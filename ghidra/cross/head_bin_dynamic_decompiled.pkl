(dp0
S'__libc_csu_init'
p1
(S'\n__stdcall __libc_csu_init()\n'
p2
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p3
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x609e08]\nPUSH RBP\nLEA RBP,[0x609e10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x004012d8\nTEST RBP,RBP\nJZ 0x00405f16\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00405f00\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p4
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 36 3f 20 00\n55\n48 8d 2d 36 3f 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 e7 b3 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p5
S'.text:0000000000405ec0\n.text:0000000000405ec2\n.text:0000000000405ec4\n.text:0000000000405ec7\n.text:0000000000405ec9\n.text:0000000000405ecb\n.text:0000000000405ed2\n.text:0000000000405ed3\n.text:0000000000405eda\n.text:0000000000405edb\n.text:0000000000405ede\n.text:0000000000405ee1\n.text:0000000000405ee4\n.text:0000000000405ee8\n.text:0000000000405eec\n.text:0000000000405ef1\n.text:0000000000405ef4\n.text:0000000000405ef6\n.text:0000000000405ef8\n.text:0000000000405f00\n.text:0000000000405f03\n.text:0000000000405f06\n.text:0000000000405f09\n.text:0000000000405f0d\n.text:0000000000405f11\n.text:0000000000405f14\n.text:0000000000405f16\n.text:0000000000405f1a\n.text:0000000000405f1b\n.text:0000000000405f1c\n.text:0000000000405f1e\n.text:0000000000405f20\n.text:0000000000405f22\n.text:0000000000405f24\n'
p6
tp7
sS'ungetc'
p8
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p9
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_0060a140)();\u000a  return iVar1;\u000a}\u000a\u000a
p10
S'JMP qword ptr [0x0060a140]\n'
p11
S'ff 25 ea 8b 20 00\n'
p12
S'.plt:0000000000401550\n'
p13
tp14
sS'c_isdigit'
p15
(S'\n__stdcall c_isdigit()\n'
p16
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p17
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p18
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p19
S'.text:0000000000405910\n.text:0000000000405913\n.text:0000000000405916\n.text:0000000000405919\n'
p20
tp21
sS'version_etc_arn'
p22
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p23
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_004070fb,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x404f27;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x404fa8;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x40503c;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p24
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00404db8\nMOV EDX,0x4070e8\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401650\nJMP 0x00404dcd\nMOV EDX,0x4070f4\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401650\nXOR EDI,EDI\nMOV ESI,0x4070fb\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x4073d0\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401650\nXOR EDI,EDI\nMOV ESI,0x4070ff\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x004014c0\nCMP R12,0x9\nJA 0x00404e56\nJMP qword ptr [0x407098 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x4071ca\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401650\nXOR EDI,EDI\nMOV ESI,0x407309\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401650\nADD RSP,0x38\nJMP 0x004050c7\nXOR EDI,EDI\nMOV ESI,0x4071da\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401650\nXOR EDI,EDI\nMOV ESI,0x4071f1\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401650\nXOR EDI,EDI\nMOV ESI,0x40720d\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401650\nADD RSP,0x18\nJMP 0x004050c7\nXOR EDI,EDI\nMOV ESI,0x40722d\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401650\nADD RSP,0x18\nJMP 0x004050c7\nXOR EDI,EDI\nMOV ESI,0x407251\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401650\nADD RSP,0x28\nJMP 0x004050c7\nXOR EDI,EDI\nMOV ESI,0x407279\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401650\nADD RSP,0x28\nJMP 0x004050c7\nXOR EDI,EDI\nMOV ESI,0x4072a5\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401650\nADD RSP,0x38\nJMP 0x004050c7\nXOR EDI,EDI\nMOV ESI,0x4072d5\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401650\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401320\n'
p25
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba e8 70 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 9a c8 ff ff\neb 15\nba f4 70 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 83 c8 ff ff\n31 ff\nbe fb 70 40 00\nba 05 00 00 00\ne8 f2 c5 ff ff\n48 89 c1\nbe 01 00 00 00\nba d0 73 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 55 c8 ff ff\n31 ff\nbe ff 70 40 00\nba 05 00 00 00\ne8 c4 c5 ff ff\n48 89 c7\n4c 89 f6\ne8 a9 c6 ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 98 70 40 00\n31 ff\nbe ca 71 40 00\nba 05 00 00 00\ne8 9a c5 ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 fa c7 ff ff\n31 ff\nbe 09 73 40 00\nba 05 00 00 00\ne8 69 c5 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 b1 c7 ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe da 71 40 00\nba 05 00 00 00\ne8 17 c5 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 73 c7 ff ff\n31 ff\nbe f1 71 40 00\nba 05 00 00 00\ne8 e2 c4 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 3a c7 ff ff\n31 ff\nbe 0d 72 40 00\nba 05 00 00 00\ne8 a9 c4 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 04 c7 ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe 2d 72 40 00\nba 05 00 00 00\ne8 6a c4 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 c2 c6 ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 51 72 40 00\nba 05 00 00 00\ne8 28 c4 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 78 c6 ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe 79 72 40 00\nba 05 00 00 00\ne8 de c3 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 2e c6 ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe a5 72 40 00\nba 05 00 00 00\ne8 94 c3 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 dc c5 ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe d5 72 40 00\nba 05 00 00 00\ne8 45 c3 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 8d c5 ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 4c c2 ff ff\n'
p26
S'.text:0000000000404d80\n.text:0000000000404d82\n.text:0000000000404d84\n.text:0000000000404d86\n.text:0000000000404d87\n.text:0000000000404d88\n.text:0000000000404d8b\n.text:0000000000404d8e\n.text:0000000000404d91\n.text:0000000000404d94\n.text:0000000000404d97\n.text:0000000000404d9a\n.text:0000000000404d9f\n.text:0000000000404da2\n.text:0000000000404da4\n.text:0000000000404da9\n.text:0000000000404dab\n.text:0000000000404dae\n.text:0000000000404db1\n.text:0000000000404db6\n.text:0000000000404db8\n.text:0000000000404dbd\n.text:0000000000404dbf\n.text:0000000000404dc2\n.text:0000000000404dc5\n.text:0000000000404dc8\n.text:0000000000404dcd\n.text:0000000000404dcf\n.text:0000000000404dd4\n.text:0000000000404dd9\n.text:0000000000404dde\n.text:0000000000404de1\n.text:0000000000404de6\n.text:0000000000404deb\n.text:0000000000404df1\n.text:0000000000404df3\n.text:0000000000404df6\n.text:0000000000404dfb\n.text:0000000000404dfd\n.text:0000000000404e02\n.text:0000000000404e07\n.text:0000000000404e0c\n.text:0000000000404e0f\n.text:0000000000404e12\n.text:0000000000404e17\n.text:0000000000404e1b\n.text:0000000000404e1d\n.text:0000000000404e25\n.text:0000000000404e27\n.text:0000000000404e2c\n.text:0000000000404e31\n.text:0000000000404e36\n.text:0000000000404e39\n.text:0000000000404e3c\n.text:0000000000404e41\n.text:0000000000404e43\n.text:0000000000404e46\n.text:0000000000404e4a\n.text:0000000000404e4b\n.text:0000000000404e4d\n.text:0000000000404e4f\n.text:0000000000404e51\n.text:0000000000404e56\n.text:0000000000404e58\n.text:0000000000404e5d\n.text:0000000000404e62\n.text:0000000000404e67\n.text:0000000000404e6a\n.text:0000000000404e6d\n.text:0000000000404e71\n.text:0000000000404e75\n.text:0000000000404e7a\n.text:0000000000404e7f\n.text:0000000000404e82\n.text:0000000000404e86\n.text:0000000000404e8a\n.text:0000000000404e8e\n.text:0000000000404e92\n.text:0000000000404e96\n.text:0000000000404e9a\n.text:0000000000404e9f\n.text:0000000000404ea3\n.text:0000000000404ea8\n.text:0000000000404eaa\n.text:0000000000404eaf\n.text:0000000000404eb4\n.text:0000000000404eb9\n.text:0000000000404ebc\n.text:0000000000404ebf\n.text:0000000000404ec3\n.text:0000000000404ec8\n.text:0000000000404eca\n.text:0000000000404ecd\n.text:0000000000404ed1\n.text:0000000000404ed2\n.text:0000000000404ed4\n.text:0000000000404ed6\n.text:0000000000404ed8\n.text:0000000000404edd\n.text:0000000000404edf\n.text:0000000000404ee4\n.text:0000000000404ee9\n.text:0000000000404eee\n.text:0000000000404ef1\n.text:0000000000404ef4\n.text:0000000000404ef8\n.text:0000000000404efc\n.text:0000000000404f01\n.text:0000000000404f03\n.text:0000000000404f06\n.text:0000000000404f0a\n.text:0000000000404f0b\n.text:0000000000404f0d\n.text:0000000000404f0f\n.text:0000000000404f11\n.text:0000000000404f16\n.text:0000000000404f18\n.text:0000000000404f1d\n.text:0000000000404f22\n.text:0000000000404f27\n.text:0000000000404f2a\n.text:0000000000404f2d\n.text:0000000000404f31\n.text:0000000000404f35\n.text:0000000000404f39\n.text:0000000000404f3e\n.text:0000000000404f40\n.text:0000000000404f43\n.text:0000000000404f47\n.text:0000000000404f4c\n.text:0000000000404f50\n.text:0000000000404f55\n.text:0000000000404f57\n.text:0000000000404f5c\n.text:0000000000404f61\n.text:0000000000404f66\n.text:0000000000404f69\n.text:0000000000404f6c\n.text:0000000000404f70\n.text:0000000000404f74\n.text:0000000000404f79\n.text:0000000000404f7e\n.text:0000000000404f81\n.text:0000000000404f85\n.text:0000000000404f89\n.text:0000000000404f8e\n.text:0000000000404f92\n.text:0000000000404f97\n.text:0000000000404f99\n.text:0000000000404f9e\n.text:0000000000404fa3\n.text:0000000000404fa8\n.text:0000000000404fab\n.text:0000000000404fae\n.text:0000000000404fb2\n.text:0000000000404fb6\n.text:0000000000404fba\n.text:0000000000404fbf\n.text:0000000000404fc4\n.text:0000000000404fc7\n.text:0000000000404fcb\n.text:0000000000404fcf\n.text:0000000000404fd3\n.text:0000000000404fd8\n.text:0000000000404fdc\n.text:0000000000404fe1\n.text:0000000000404fe3\n.text:0000000000404fe8\n.text:0000000000404fed\n.text:0000000000404ff2\n.text:0000000000404ff5\n.text:0000000000404ff8\n.text:0000000000404ffc\n.text:0000000000405000\n.text:0000000000405005\n.text:000000000040500a\n.text:000000000040500d\n.text:0000000000405011\n.text:0000000000405015\n.text:0000000000405019\n.text:000000000040501d\n.text:0000000000405022\n.text:0000000000405026\n.text:000000000040502b\n.text:000000000040502d\n.text:0000000000405032\n.text:0000000000405037\n.text:000000000040503c\n.text:000000000040503f\n.text:0000000000405042\n.text:0000000000405046\n.text:000000000040504a\n.text:000000000040504e\n.text:0000000000405053\n.text:0000000000405058\n.text:000000000040505b\n.text:000000000040505f\n.text:0000000000405063\n.text:0000000000405067\n.text:000000000040506b\n.text:000000000040506f\n.text:0000000000405074\n.text:0000000000405078\n.text:000000000040507a\n.text:000000000040507c\n.text:0000000000405081\n.text:0000000000405086\n.text:000000000040508b\n.text:000000000040508e\n.text:0000000000405091\n.text:0000000000405095\n.text:0000000000405099\n.text:000000000040509e\n.text:00000000004050a3\n.text:00000000004050a6\n.text:00000000004050aa\n.text:00000000004050ae\n.text:00000000004050b2\n.text:00000000004050b6\n.text:00000000004050ba\n.text:00000000004050be\n.text:00000000004050c3\n.text:00000000004050c7\n.text:00000000004050c8\n.text:00000000004050ca\n.text:00000000004050cc\n.text:00000000004050ce\n.text:00000000004050cf\n'
p27
tp28
sS'usage'
p29
(S'\n__stdcall usage()\n'
p30
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,"Usage: %s [OPTION]... [FILE]...\u005cn",5);\u000a    __printf_chk(1,uVar1,program_name,uVar1);\u000a    uVar1 = dcgettext(0,\u000a                      "Print the first %d lines of each FILE to standard output.\u005cnWith more than one FILE, precede each with a header giving the file name.\u005cn"\u000a                      ,5);\u000a    __printf_chk(1,uVar1,10,uVar1);\u000a    emit_stdin_note();\u000a    emit_mandatory_arg_note();\u000a    uVar1 = dcgettext(0,\u000a                      "  -c, --bytes=[-]NUM       print the first NUM bytes of each file;\u005cn                             with the leading \u005c'-\u005c', print all but the last\u005cn                             NUM bytes of each file\u005cn  -n, --lines=[-]NUM       print the first NUM lines instead of the first %d;\u005cn                             with the leading \u005c'-\u005c', print all but the last\u005cn                             NUM lines of each file\u005cn"\u000a                      ,5);\u000a    __printf_chk(1,uVar1,10,uVar1);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -q, --quiet, --silent    never print headers giving file names\u005cn  -v, --verbose            always print headers giving file names\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"  -z, --zero-terminated    line delimiter is NUL, not newline\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnNUM may have a multiplier suffix:\u005cnb 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024,\u005cnGB 1000*1000*1000, G 1024*1024*1024, and so on for T, P, E, Z, Y.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p31
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x004018cb\nXOR EDI,EDI\nMOV ESI,0x406330\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060a2c0]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004015c0\nXOR EDI,EDI\nMOV ESI,0x406351\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0xa\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004015c0\nCALL 0x00401920\nCALL 0x00401950\nXOR EDI,EDI\nMOV ESI,0x4063d6\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0xa\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004015c0\nXOR EDI,EDI\nMOV ESI,0x406564\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x004014c0\nXOR EDI,EDI\nMOV ESI,0x4065e8\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x004014c0\nXOR EDI,EDI\nMOV ESI,0x406627\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x004014c0\nXOR EDI,EDI\nMOV ESI,0x406654\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x004014c0\nXOR EDI,EDI\nMOV ESI,0x40668a\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x004014c0\nCALL 0x00401980\nMOV EDI,EBX\nCALL 0x00401630\nCALL 0x004018e0\nMOV EDI,EBX\nCALL 0x00401630\n'
p32
S'53\n89 fb\n85 db\n0f 85 30 01 00 00\n31 ff\nbe 30 63 40 00\nba 05 00 00 00\ne8 24 fc ff ff\n48 89 c1\n48 8b 15 0a 8b 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 fb fd ff ff\n31 ff\nbe 51 63 40 00\nba 05 00 00 00\ne8 fa fb ff ff\n48 89 c1\nbf 01 00 00 00\nba 0a 00 00 00\n31 c0\n48 89 ce\ne8 d3 fd ff ff\ne8 2e 01 00 00\ne8 59 01 00 00\n31 ff\nbe d6 63 40 00\nba 05 00 00 00\ne8 c8 fb ff ff\n48 89 c1\nbf 01 00 00 00\nba 0a 00 00 00\n31 c0\n48 89 ce\ne8 a1 fd ff ff\n31 ff\nbe 64 65 40 00\nba 05 00 00 00\ne8 a0 fb ff ff\n48 8b 35 31 8a 20 00\n48 89 c7\ne8 81 fc ff ff\n31 ff\nbe e8 65 40 00\nba 05 00 00 00\ne8 80 fb ff ff\n48 8b 35 11 8a 20 00\n48 89 c7\ne8 61 fc ff ff\n31 ff\nbe 27 66 40 00\nba 05 00 00 00\ne8 60 fb ff ff\n48 8b 35 f1 89 20 00\n48 89 c7\ne8 41 fc ff ff\n31 ff\nbe 54 66 40 00\nba 05 00 00 00\ne8 40 fb ff ff\n48 8b 35 d1 89 20 00\n48 89 c7\ne8 21 fc ff ff\n31 ff\nbe 8a 66 40 00\nba 05 00 00 00\ne8 20 fb ff ff\n48 8b 35 b1 89 20 00\n48 89 c7\ne8 01 fc ff ff\ne8 bc 00 00 00\n89 df\ne8 65 fd ff ff\ne8 10 00 00 00\n89 df\ne8 59 fd ff ff\n'
p33
S'.text:0000000000401790\n.text:0000000000401791\n.text:0000000000401793\n.text:0000000000401795\n.text:000000000040179b\n.text:000000000040179d\n.text:00000000004017a2\n.text:00000000004017a7\n.text:00000000004017ac\n.text:00000000004017af\n.text:00000000004017b6\n.text:00000000004017bb\n.text:00000000004017bd\n.text:00000000004017c0\n.text:00000000004017c5\n.text:00000000004017c7\n.text:00000000004017cc\n.text:00000000004017d1\n.text:00000000004017d6\n.text:00000000004017d9\n.text:00000000004017de\n.text:00000000004017e3\n.text:00000000004017e5\n.text:00000000004017e8\n.text:00000000004017ed\n.text:00000000004017f2\n.text:00000000004017f7\n.text:00000000004017f9\n.text:00000000004017fe\n.text:0000000000401803\n.text:0000000000401808\n.text:000000000040180b\n.text:0000000000401810\n.text:0000000000401815\n.text:0000000000401817\n.text:000000000040181a\n.text:000000000040181f\n.text:0000000000401821\n.text:0000000000401826\n.text:000000000040182b\n.text:0000000000401830\n.text:0000000000401837\n.text:000000000040183a\n.text:000000000040183f\n.text:0000000000401841\n.text:0000000000401846\n.text:000000000040184b\n.text:0000000000401850\n.text:0000000000401857\n.text:000000000040185a\n.text:000000000040185f\n.text:0000000000401861\n.text:0000000000401866\n.text:000000000040186b\n.text:0000000000401870\n.text:0000000000401877\n.text:000000000040187a\n.text:000000000040187f\n.text:0000000000401881\n.text:0000000000401886\n.text:000000000040188b\n.text:0000000000401890\n.text:0000000000401897\n.text:000000000040189a\n.text:000000000040189f\n.text:00000000004018a1\n.text:00000000004018a6\n.text:00000000004018ab\n.text:00000000004018b0\n.text:00000000004018b7\n.text:00000000004018ba\n.text:00000000004018bf\n.text:00000000004018c4\n.text:00000000004018c6\n.text:00000000004018cb\n.text:00000000004018d0\n.text:00000000004018d2\n'
p34
tp35
sS'quoting_options_from_style'
p36
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p37
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p38
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x0040466d\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00401320\n'
p39
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 ae cc ff ff\n'
p40
S'.text:0000000000404620\n.text:0000000000404624\n.text:0000000000404627\n.text:000000000040462c\n.text:0000000000404631\n.text:0000000000404635\n.text:000000000040463d\n.text:0000000000404640\n.text:0000000000404642\n.text:0000000000404644\n.text:0000000000404648\n.text:000000000040464b\n.text:000000000040464f\n.text:0000000000404654\n.text:0000000000404659\n.text:000000000040465d\n.text:0000000000404661\n.text:0000000000404665\n.text:0000000000404668\n.text:000000000040466c\n.text:000000000040466d\n'
p41
tp42
sS'strchr'
p43
(S'\n__stdcall strchr(char * __s, int __c)\n'
p44
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_0060a0a8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p45
S'JMP qword ptr [0x0060a0a8]\n'
p46
S'ff 25 82 8c 20 00\n'
p47
S'.plt:0000000000401420\n'
p48
tp49
sS'rpl_fclose'
p50
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p51
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00405de9;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00405de9:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p52
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x00401510\nTEST EAX,EAX\nJS 0x00405de9\nMOV RDI,RBX\nCALL 0x00401570\nTEST EAX,EAX\nJZ 0x00405db7\nMOV RDI,RBX\nCALL 0x00401510\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x00401440\nCMP RAX,-0x1\nJZ 0x00405de9\nMOV RDI,RBX\nCALL 0x00405e00\nTEST EAX,EAX\nJZ 0x00405de9\nCALL 0x00401330\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x004013b0\nTEST EBP,EBP\nJZ 0x00405de2\nCALL 0x00401330\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x004013b0\n'
p53
S'55\n53\n50\n48 89 fb\ne8 85 b7 ff ff\n85 c0\n78 5a\n48 89 df\ne8 d9 b7 ff ff\n85 c0\n74 1c\n48 89 df\ne8 6d b7 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 8f b6 ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 68 b5 ff ff\n8b 28\n48 89 df\ne8 de b5 ff ff\n85 ed\n74 0c\ne8 55 b5 ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 b9 b5 ff ff\n'
p54
S'.text:0000000000405d80\n.text:0000000000405d81\n.text:0000000000405d82\n.text:0000000000405d83\n.text:0000000000405d86\n.text:0000000000405d8b\n.text:0000000000405d8d\n.text:0000000000405d8f\n.text:0000000000405d92\n.text:0000000000405d97\n.text:0000000000405d99\n.text:0000000000405d9b\n.text:0000000000405d9e\n.text:0000000000405da3\n.text:0000000000405da5\n.text:0000000000405daa\n.text:0000000000405dac\n.text:0000000000405db1\n.text:0000000000405db5\n.text:0000000000405db7\n.text:0000000000405dba\n.text:0000000000405dbf\n.text:0000000000405dc1\n.text:0000000000405dc3\n.text:0000000000405dc8\n.text:0000000000405dca\n.text:0000000000405dcd\n.text:0000000000405dd2\n.text:0000000000405dd4\n.text:0000000000405dd6\n.text:0000000000405ddb\n.text:0000000000405ddd\n.text:0000000000405de2\n.text:0000000000405de6\n.text:0000000000405de7\n.text:0000000000405de8\n.text:0000000000405de9\n.text:0000000000405dec\n.text:0000000000405df0\n.text:0000000000405df1\n.text:0000000000405df2\n'
p55
tp56
sS'strcpy'
p57
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p58
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_0060a048)();\u000a  return pcVar1;\u000a}\u000a\u000a
p59
S'JMP qword ptr [0x0060a048]\n'
p60
S'ff 25 e2 8c 20 00\n'
p61
S'.plt:0000000000401360\n'
p62
tp63
sS'fwrite_unlocked'
p64
(S'\n__stdcall fwrite_unlocked(void * __ptr, size_t __size, size_t __n, FILE * __stream)\n'
p65
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite_unlocked(void *__ptr,size_t __size,size_t __n,FILE *__stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_unlocked_0060a158)();\u000a  return sVar1;\u000a}\u000a\u000a
p66
S'JMP qword ptr [0x0060a158]\n'
p67
S'ff 25 d2 8b 20 00\n'
p68
S'.plt:0000000000401580\n'
p69
tp70
sS'strncmp'
p71
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p72
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_0060a038)();\u000a  return iVar1;\u000a}\u000a\u000a
p73
S'JMP qword ptr [0x0060a038]\n'
p74
S'ff 25 f2 8c 20 00\n'
p75
S'.plt:0000000000401340\n'
p76
tp77
sS'xnrealloc'
p78
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p79
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p80
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x004052d4\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x004052e0\nPUSH RAX\nCALL 0x00405430\n'
p81
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p82
S'.text:00000000004052c0\n.text:00000000004052c3\n.text:00000000004052c6\n.text:00000000004052c9\n.text:00000000004052cb\n.text:00000000004052cf\n.text:00000000004052d2\n.text:00000000004052d4\n.text:00000000004052d5\n'
p83
tp84
sS'elide_tail_bytes_pipe'
p85
(S'\n__stdcall elide_tail_bytes_pipe(char * filename, uintmax_t n_elide_0, off_t current_pos)\n'
p86
V\u000a_Bool elide_tail_bytes_pipe(char *filename,uintmax_t n_elide_0,off_t current_pos)\u000a\u000a{\u000a  uint uVar1;\u000a  bool bVar2;\u000a  ulong uVar3;\u000a  size_t sVar4;\u000a  uint *puVar5;\u000a  long lVar6;\u000a  void *pvVar7;\u000a  size_t n;\u000a  undefined8 uVar8;\u000a  char *buffer;\u000a  off_t oVar9;\u000a  char *in_RCX;\u000a  void **ppvVar10;\u000a  size_t n_bytes;\u000a  ulong n_bytes_00;\u000a  bool bVar11;\u000a  ulong uVar12;\u000a  undefined uVar13;\u000a  undefined uVar14;\u000a  bool bVar15;\u000a  char *b [2];\u000a  char *local_c0;\u000a  void **local_b8;\u000a  long local_a0;\u000a  size_t local_90;\u000a  char *local_88 [3];\u000a  ulong local_70;\u000a  ulong local_68;\u000a  ulong local_60;\u000a  ulong local_58;\u000a  ulong local_50;\u000a  ulong local_48;\u000a  ulong local_40;\u000a  ulong local_38;\u000a  \u000a  if ((ulong)current_pos < 0x100001) {\u000a    n = current_pos + 0x2000;\u000a    local_88[0] = (char *)xnmalloc(2,n);\u000a    local_88[1] = local_88[0] + n;\u000a    bVar2 = true;\u000a    bVar11 = false;\u000a    bVar15 = false;\u000a    local_c0 = in_RCX;\u000a    do {\u000a      sVar4 = full_read((void *)(n_elide_0 & 0xffffffff),(size_t)local_88[(ulong)bVar15]);\u000a      if (sVar4 < n) {\u000a        puVar5 = (uint *)__errno_location();\u000a        uVar1 = *puVar5;\u000a        if (uVar1 != 0) {\u000a          uVar13 = 0;\u000a          uVar8 = dcgettext(0,"error reading %s",5);\u000a          buffer = quotearg_style((char *)0x4);\u000a          error(0,(ulong)uVar1,uVar8,buffer);\u000a          goto LAB_00403047;\u000a        }\u000a        lVar6 = current_pos - sVar4;\u000a        if ((ulong)current_pos < sVar4) {\u000a          lVar6 = 0;\u000a        }\u000a        if (bVar2) {\u000a          lVar6 = 0;\u000a        }\u000a        bVar11 = true;\u000a        if (bVar2) goto LAB_00402dd6;\u000aLAB_00402de0:\u000a        local_c0 = local_c0 + (current_pos - lVar6);\u000a        xwrite_stdout(local_88[(ulong)(bVar15 == false)] + 0x2000,current_pos - lVar6);\u000a        n_bytes = sVar4 - current_pos;\u000a        if ((ulong)current_pos <= sVar4 && n_bytes != 0) {\u000aLAB_00402e0c:\u000a          local_c0 = local_c0 + n_bytes;\u000a          xwrite_stdout(local_88[(ulong)bVar15],n_bytes);\u000a        }\u000a      }\u000a      else {\u000a        lVar6 = 0;\u000a        if (!bVar2) goto LAB_00402de0;\u000aLAB_00402dd6:\u000a        n_bytes = sVar4 - current_pos;\u000a        if ((ulong)current_pos <= sVar4 && n_bytes != 0) goto LAB_00402e0c;\u000a      }\u000a      bVar15 = bVar15 == false;\u000a      bVar2 = false;\u000a    } while (!bVar11);\u000a    uVar13 = 1;\u000aLAB_00403047:\u000a    free(local_88[0]);\u000a    goto joined_r0x0040314c;\u000a  }\u000a  local_58 = (ulong)((uint)current_pos & 0x1fff);\u000a  local_50 = 0x2000 - local_58;\u000a  local_70 = current_pos + local_50 >> 0xd;\u000a  local_68 = local_70 + 1;\u000a  local_40 = 0x10;\u000a  if (local_68 < 0x10) {\u000a    local_40 = local_68;\u000a  }\u000a  local_48 = local_68 >> 1;\u000a  local_90 = 0;\u000a  uVar12 = 1;\u000a  local_a0 = 0;\u000a  local_b8 = (void **)0x0;\u000a  local_60 = 0;\u000a  n_bytes_00 = 0;\u000a  local_c0 = in_RCX;\u000a  bVar2 = false;\u000a  do {\u000a    local_38 = uVar12;\u000a    if (local_90 == n_bytes_00) {\u000a      n = local_40;\u000a      if ((local_90 != 0) && (n = local_90 * 2, local_48 < local_90)) {\u000a        n = local_68;\u000a      }\u000a      local_38 = uVar12;\u000a      local_b8 = (void **)xnrealloc(local_b8,n,8);\u000a      local_90 = n;\u000a    }\u000a    uVar12 = local_70;\u000a    if (!bVar2) {\u000a      pvVar7 = xmalloc(0x2000);\u000a      local_b8[n_bytes_00] = pvVar7;\u000a      local_a0 = n_bytes_00 + 1;\u000a    }\u000a    n = full_read((void *)(n_elide_0 & 0xffffffff),(size_t)local_b8[n_bytes_00]);\u000a    if (n < 0x2000) {\u000a      puVar5 = (uint *)__errno_location();\u000a      uVar1 = *puVar5;\u000a      local_60 = CONCAT71((int7)((ulong)puVar5 >> 8),1);\u000a      if (uVar1 != 0) {\u000a        uVar13 = 0;\u000a        uVar8 = dcgettext(0,"error reading %s",5);\u000a        buffer = quotearg_style((char *)0x4);\u000a        error(0,(ulong)uVar1,uVar8,buffer);\u000a        ppvVar10 = local_b8;\u000a        goto joined_r0x004030ae;\u000a      }\u000a    }\u000a    uVar3 = local_38;\u000a    bVar15 = true;\u000a    if (n_bytes_00 != uVar12) {\u000a      bVar15 = bVar2;\u000a    }\u000a    if (bVar15) {\u000a      local_c0 = local_c0 + n;\u000a      xwrite_stdout((char *)local_b8[local_38],n);\u000a    }\u000a    uVar12 = (uVar3 + 1) % local_68;\u000a    n_bytes_00 = uVar3;\u000a    bVar2 = bVar15;\u000a  } while ((local_60 & 1) == 0);\u000a  if (local_50 == 0) {\u000aLAB_00403102:\u000a    uVar13 = 1;\u000a    ppvVar10 = local_b8;\u000a  }\u000a  else {\u000a    if (!bVar15) {\u000a      if (uVar3 == local_70) {\u000a        local_c0 = local_c0 + (n - local_58);\u000a        xwrite_stdout((char *)local_b8[uVar12],n - local_58);\u000a      }\u000a      goto LAB_00403102;\u000a    }\u000a    n_bytes_00 = 0x2000 - n;\u000a    local_c0 = local_c0 + local_50;\u000a    buffer = (char *)((long)local_b8[uVar3] + n);\u000a    sVar4 = local_50 - n_bytes_00;\u000a    uVar13 = 1;\u000a    n = local_50;\u000a    if (n_bytes_00 <= local_50) {\u000a      xwrite_stdout(buffer,n_bytes_00);\u000a      buffer = (char *)local_b8[uVar12];\u000a      n = sVar4;\u000a    }\u000a    xwrite_stdout(buffer,n);\u000a    ppvVar10 = local_b8;\u000a  }\u000ajoined_r0x004030ae:\u000a  while (local_a0 != 0) {\u000a    free(*ppvVar10);\u000a    ppvVar10 = ppvVar10 + 1;\u000a    local_a0 = local_a0 + -1;\u000a  }\u000a  free(local_b8);\u000ajoined_r0x0040314c:\u000a  uVar14 = uVar13;\u000a  if (-1 < (long)in_RCX) {\u000a    oVar9 = elseek(n_elide_0 & 0xffffffff,local_c0);\u000a    uVar14 = 0;\u000a    if (-1 < oVar9) {\u000a      uVar14 = uVar13;\u000a    }\u000a  }\u000a  return (_Bool)uVar14;\u000a}\u000a\u000a
p87
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV RBP,RCX\nMOV dword ptr [RSP + 0x1c],ESI\nMOV qword ptr [RSP + 0x30],RDI\nCMP RDX,0x100000\nMOV qword ptr [RSP + 0x20],RBP\nJA 0x00402e38\nMOV R15,RDX\nLEA R14,[0x2000 + RDX]\nMOV EDI,0x2\nMOV RSI,R14\nCALL 0x00405280\nMOV qword ptr [RSP + 0x40],RAX\nADD RAX,R14\nMOV qword ptr [RSP + 0x48],RAX\nMOV BL,0x1\nMOV qword ptr [RSP + 0x8],RBP\nXOR R13D,R13D\nXOR EAX,EAX\nNOP\nMOVZX R12D,AL\nMOV RSI,qword ptr [RSP + R12*0x8 + 0x40]\nMOV EDI,dword ptr [RSP + 0x1c]\nMOV RDX,R14\nCALL 0x00403270\nMOV RBP,RAX\nCMP RBP,R14\nJNC 0x00402dd0\nCALL 0x00401330\nMOV R13D,dword ptr [RAX]\nTEST R13D,R13D\nJNZ 0x0040300f\nMOV RAX,R15\nSUB RAX,RBP\nMOV ECX,0x0\nCMOVC RAX,RCX\nTEST BL,BL\nCMOVNZ RAX,RCX\nMOV R13B,0x1\nTEST BL,BL\nJNZ 0x00402dd6\nJMP 0x00402de0\nXOR EAX,EAX\nTEST BL,BL\nJZ 0x00402de0\nMOV RBX,R15\nSUB RBP,RBX\nJBE 0x00402e1e\nJMP 0x00402e0c\nMOV RBX,R15\nMOV RSI,RBX\nSUB RSI,RAX\nADD qword ptr [RSP + 0x8],RSI\nXOR EAX,EAX\nTEST R12B,R12B\nSETZ AL\nMOV RDI,qword ptr [RSP + RAX*0x8 + 0x40]\nADD RDI,0x2000\nCALL 0x00402ba0\nSUB RBP,RBX\nJBE 0x00402e1e\nADD qword ptr [RSP + 0x8],RBP\nMOV RDI,qword ptr [RSP + R12*0x8 + 0x40]\nMOV RSI,RBP\nCALL 0x00402ba0\nTEST R12B,R12B\nSETZ AL\nXOR EBX,EBX\nTEST R13B,0x1\nJZ 0x00402d80\nMOV R15B,0x1\nJMP 0x00403047\nMOV ECX,EDX\nAND ECX,0x1fff\nMOV EAX,0x2000\nMOV qword ptr [RSP + 0x70],RCX\nSUB RAX,RCX\nMOV qword ptr [RSP + 0x78],RAX\nADD RDX,RAX\nSHR RDX,0xd\nMOV qword ptr [RSP + 0x58],RDX\nLEA RAX,[RDX + 0x1]\nCMP RAX,0x10\nMOV ECX,0x10\nCMOVC RCX,RAX\nMOV qword ptr [0x88 + RSP],RCX\nMOV qword ptr [RSP + 0x60],RAX\nSHR RAX,1\nMOV qword ptr [0x80 + RSP],RAX\nXOR ECX,ECX\nMOV R14D,0x1\nMOV qword ptr [RSP + 0x8],RBP\nMOV EAX,0x0\nMOV qword ptr [RSP + 0x28],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nXOR R12D,R12D\nXOR R13D,R13D\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x68],RAX\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP RCX,R12\nMOV qword ptr [0x90 + RSP],R14\nJNZ 0x00402f10\nTEST RCX,RCX\nMOV RBP,qword ptr [0x88 + RSP]\nMOV RDI,qword ptr [RSP + 0x10]\nJZ 0x00402ef1\nCMP RCX,qword ptr [0x80 + RSP]\nLEA RBP,[RCX + RCX*0x1]\nCMOVA RBP,qword ptr [RSP + 0x60]\nMOV EDX,0x8\nMOV RSI,RBP\nCALL 0x004052c0\nMOV R14,RAX\nMOV qword ptr [RSP + 0x38],RBP\nJMP 0x00402f1a\nMOV qword ptr [RSP + 0x38],RCX\nMOV R14,qword ptr [RSP + 0x10]\nTEST R13B,0x1\nMOV RBX,qword ptr [RSP + 0x58]\nJNZ 0x00402f3d\nMOV EDI,0x2000\nCALL 0x004052a0\nMOV qword ptr [R14 + R12*0x8],RAX\nLEA RAX,[R12 + 0x1]\nMOV qword ptr [RSP + 0x28],RAX\nMOV RSI,qword ptr [R14 + R12*0x8]\nMOV EDX,0x2000\nMOV EDI,dword ptr [RSP + 0x1c]\nCALL 0x00403270\nMOV R15,RAX\nCMP R15,0x1fff\nJA 0x00402f71\nCALL 0x00401330\nMOV EBP,dword ptr [RAX]\nMOV AL,0x1\nMOV qword ptr [RSP + 0x68],RAX\nTEST EBP,EBP\nJNZ 0x00403064\nCMP R12,RBX\nMOV BL,0x1\nJZ 0x00402f7b\nMOV EBX,R13D\nTEST BL,0x1\nMOV RBP,qword ptr [0x90 + RSP]\nMOV qword ptr [RSP + 0x10],R14\nJZ 0x00402f9e\nADD qword ptr [RSP + 0x8],R15\nMOV RDI,qword ptr [R14 + RBP*0x8]\nMOV RSI,R15\nCALL 0x00402ba0\nMOV RCX,qword ptr [RSP + 0x38]\nLEA RAX,[RBP + 0x1]\nXOR EDX,EDX\nDIV qword ptr [RSP + 0x60]\nMOV R14,RDX\nTEST byte ptr [RSP + 0x68],0x1\nMOV R12,RBP\nMOV R13B,BL\nJZ 0x00402ec0\nMOV RAX,qword ptr [RSP + 0x78]\nTEST RAX,RAX\nJZ 0x004030b5\nTEST BL,0x1\nJNZ 0x004030c6\nCMP RBP,qword ptr [RSP + 0x58]\nMOV R12,qword ptr [RSP + 0x20]\nMOV R13,qword ptr [RSP + 0x28]\nJNZ 0x004030fd\nSUB R15,qword ptr [RSP + 0x70]\nADD qword ptr [RSP + 0x8],R15\nMOV RBP,qword ptr [RSP + 0x10]\nMOV RDI,qword ptr [RBP + R14*0x8]\nMOV RSI,R15\nCALL 0x00402ba0\nJMP 0x00403102\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x406aa5\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x30]\nCALL 0x004046c0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R13D\nMOV RDX,RBP\nCALL 0x004015d0\nMOV RDI,qword ptr [RSP + 0x40]\nCALL 0x00401310\nMOV R12,qword ptr [RSP + 0x20]\nTEST R12,R12\nJNS 0x0040314e\nJMP 0x00403170\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x406aa5\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RBX,R14\nMOV R14,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x30]\nCALL 0x004046c0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,R14\nMOV RBP,RBX\nCALL 0x004015d0\nMOV R12,qword ptr [RSP + 0x20]\nMOV R13,qword ptr [RSP + 0x28]\nTEST R13,R13\nJNZ 0x00403123\nJMP 0x00403141\nMOV R12,qword ptr [RSP + 0x20]\nMOV RBP,qword ptr [RSP + 0x10]\nMOV R13,qword ptr [RSP + 0x28]\nJMP 0x00403102\nMOV ESI,0x2000\nSUB RSI,R15\nADD qword ptr [RSP + 0x8],RAX\nMOV RCX,RBP\nMOV RBP,qword ptr [RSP + 0x10]\nMOV RDI,qword ptr [RBP + RCX*0x8]\nADD RDI,R15\nMOV RBX,RAX\nSUB RBX,RSI\nMOV R12,qword ptr [RSP + 0x20]\nMOV R13,qword ptr [RSP + 0x28]\nMOV R15B,0x1\nJNC 0x0040310c\nMOV RSI,RAX\nJMP 0x00403119\nMOV RBP,qword ptr [RSP + 0x10]\nMOV R15B,0x1\nTEST R13,R13\nJNZ 0x00403123\nJMP 0x00403141\nCALL 0x00402ba0\nMOV RDI,qword ptr [RBP + R14*0x8]\nMOV RSI,RBX\nCALL 0x00402ba0\nTEST R13,R13\nJZ 0x00403141\nMOV RBX,RBP\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RDI,qword ptr [RBX]\nCALL 0x00401310\nADD RBX,0x8\nDEC R13\nJNZ 0x00403130\nMOV RDI,RBP\nCALL 0x00401310\nTEST R12,R12\nJS 0x00403170\nXOR EBX,EBX\nXOR EDX,EDX\nMOV EDI,dword ptr [RSP + 0x1c]\nMOV RSI,qword ptr [RSP + 0x8]\nMOV RCX,qword ptr [RSP + 0x30]\nCALL 0x004021b0\nTEST RAX,RAX\nJS 0x0040316d\nMOV BL,R15B\nMOV R15B,BL\nAND R15B,0x1\nMOV EAX,R15D\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p88
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n48 89 cd\n89 74 24 1c\n48 89 7c 24 30\n48 81 fa 00 00 10 00\n48 89 6c 24 20\n0f 87 e9 00 00 00\n49 89 d7\n4c 8d b2 00 20 00 00\nbf 02 00 00 00\n4c 89 f6\ne8 1a 25 00 00\n48 89 44 24 40\n4c 01 f0\n48 89 44 24 48\nb3 01\n48 89 6c 24 08\n45 31 ed\n31 c0\n90\n44 0f b6 e0\n4a 8b 74 e4 40\n8b 7c 24 1c\n4c 89 f2\ne8 db 04 00 00\n48 89 c5\n4c 39 f5\n73 33\ne8 8e e5 ff ff\n44 8b 28\n45 85 ed\n0f 85 61 02 00 00\n4c 89 f8\n48 29 e8\nb9 00 00 00 00\n48 0f 42 c1\n84 db\n48 0f 45 c1\n41 b5 01\n84 db\n75 0c\neb 14\n31 c0\n84 db\n74 0a\n4c 89 fb\n48 29 dd\n76 40\neb 2c\n4c 89 fb\n48 89 de\n48 29 c6\n48 01 74 24 08\n31 c0\n45 84 e4\n0f 94 c0\n48 8b 7c c4 40\n48 81 c7 00 20 00 00\ne8 99 fd ff ff\n48 29 dd\n76 12\n48 01 6c 24 08\n4a 8b 7c e4 40\n48 89 ee\ne8 82 fd ff ff\n45 84 e4\n0f 94 c0\n31 db\n41 f6 c5 01\n0f 84 50 ff ff ff\n41 b7 01\ne9 0f 02 00 00\n89 d1\n81 e1 ff 1f 00 00\nb8 00 20 00 00\n48 89 4c 24 70\n48 29 c8\n48 89 44 24 78\n48 01 c2\n48 c1 ea 0d\n48 89 54 24 58\n48 8d 42 01\n48 83 f8 10\nb9 10 00 00 00\n48 0f 42 c8\n48 89 8c 24 88 00 00 00\n48 89 44 24 60\n48 d1 e8\n48 89 84 24 80 00 00 00\n31 c9\n41 be 01 00 00 00\n48 89 6c 24 08\nb8 00 00 00 00\n48 89 44 24 28\n31 c0\n48 89 44 24 10\n45 31 e4\n45 31 ed\n31 c0\n48 89 44 24 68\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 39 e1\n4c 89 b4 24 90 00 00 00\n75 43\n48 85 c9\n48 8b ac 24 88 00 00 00\n48 8b 7c 24 10\n74 12\n48 3b 8c 24 80 00 00 00\n48 8d 2c 09\n48 0f 47 6c 24 60\nba 08 00 00 00\n48 89 ee\ne8 c2 23 00 00\n49 89 c6\n48 89 6c 24 38\neb 12\n48 89 4c 24 38\n4c 8b 74 24 10\n41 f6 c5 01\n48 8b 5c 24 58\n75 18\nbf 00 20 00 00\ne8 71 23 00 00\n4b 89 04 e6\n49 8d 44 24 01\n48 89 44 24 28\n4b 8b 34 e6\nba 00 20 00 00\n8b 7c 24 1c\ne8 21 03 00 00\n49 89 c7\n49 81 ff ff 1f 00 00\n77 16\ne8 d0 e3 ff ff\n8b 28\nb0 01\n48 89 44 24 68\n85 ed\n0f 85 f3 00 00 00\n49 39 dc\nb3 01\n74 03\n44 89 eb\nf6 c3 01\n48 8b ac 24 90 00 00 00\n4c 89 74 24 10\n74 11\n4c 01 7c 24 08\n49 8b 3c ee\n4c 89 fe\ne8 02 fc ff ff\n48 8b 4c 24 38\n48 8d 45 01\n31 d2\n48 f7 74 24 60\n49 89 d6\nf6 44 24 68 01\n49 89 ec\n41 88 dd\n0f 84 fe fe ff ff\n48 8b 44 24 78\n48 85 c0\n0f 84 e5 00 00 00\nf6 c3 01\n0f 85 ed 00 00 00\n48 3b 6c 24 58\n4c 8b 64 24 20\n4c 8b 6c 24 28\n0f 85 0f 01 00 00\n4c 2b 7c 24 70\n4c 01 7c 24 08\n48 8b 6c 24 10\n4a 8b 7c f5 00\n4c 89 fe\ne8 96 fb ff ff\ne9 f3 00 00 00\n45 31 ff\n31 ff\nbe a5 6a 40 00\nba 05 00 00 00\ne8 ad e3 ff ff\n48 89 c5\nbf 04 00 00 00\n48 8b 74 24 30\ne8 8b 16 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 ee\n48 89 ea\ne8 89 e5 ff ff\n48 8b 7c 24 40\ne8 bf e2 ff ff\n4c 8b 64 24 20\n4d 85 e4\n0f 89 ef 00 00 00\ne9 0c 01 00 00\n45 31 ff\n31 ff\nbe a5 6a 40 00\nba 05 00 00 00\ne8 58 e3 ff ff\n4c 89 f3\n49 89 c6\nbf 04 00 00 00\n48 8b 74 24 30\ne8 33 16 00 00\n48 89 c1\n31 ff\n31 c0\n89 ee\n4c 89 f2\n48 89 dd\ne8 2f e5 ff ff\n4c 8b 64 24 20\n4c 8b 6c 24 28\n4d 85 ed\n75 73\ne9 8c 00 00 00\n4c 8b 64 24 20\n48 8b 6c 24 10\n4c 8b 6c 24 28\neb 3c\nbe 00 20 00 00\n4c 29 fe\n48 01 44 24 08\n48 89 e9\n48 8b 6c 24 10\n48 8b 7c cd 00\n4c 01 ff\n48 89 c3\n48 29 f3\n4c 8b 64 24 20\n4c 8b 6c 24 28\n41 b7 01\n73 14\n48 89 c6\neb 1c\n48 8b 6c 24 10\n41 b7 01\n4d 85 ed\n75 19\neb 35\ne8 8f fa ff ff\n4a 8b 7c f5 00\n48 89 de\ne8 82 fa ff ff\n4d 85 ed\n74 1e\n48 89 eb\n66 2e 0f 1f 84 00 00 00 00 00\n48 8b 3b\ne8 d8 e1 ff ff\n48 83 c3 08\n49 ff cd\n75 ef\n48 89 ef\ne8 c7 e1 ff ff\n4d 85 e4\n78 22\n31 db\n31 d2\n8b 7c 24 1c\n48 8b 74 24 08\n48 8b 4c 24 30\ne8 4b f0 ff ff\n48 85 c0\n78 03\n44 88 fb\n41 88 df\n41 80 e7 01\n44 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p89
S'.text:0000000000402d20\n.text:0000000000402d21\n.text:0000000000402d23\n.text:0000000000402d25\n.text:0000000000402d27\n.text:0000000000402d29\n.text:0000000000402d2a\n.text:0000000000402d31\n.text:0000000000402d34\n.text:0000000000402d38\n.text:0000000000402d3d\n.text:0000000000402d44\n.text:0000000000402d49\n.text:0000000000402d4f\n.text:0000000000402d52\n.text:0000000000402d59\n.text:0000000000402d5e\n.text:0000000000402d61\n.text:0000000000402d66\n.text:0000000000402d6b\n.text:0000000000402d6e\n.text:0000000000402d73\n.text:0000000000402d75\n.text:0000000000402d7a\n.text:0000000000402d7d\n.text:0000000000402d7f\n.text:0000000000402d80\n.text:0000000000402d84\n.text:0000000000402d89\n.text:0000000000402d8d\n.text:0000000000402d90\n.text:0000000000402d95\n.text:0000000000402d98\n.text:0000000000402d9b\n.text:0000000000402d9d\n.text:0000000000402da2\n.text:0000000000402da5\n.text:0000000000402da8\n.text:0000000000402dae\n.text:0000000000402db1\n.text:0000000000402db4\n.text:0000000000402db9\n.text:0000000000402dbd\n.text:0000000000402dbf\n.text:0000000000402dc3\n.text:0000000000402dc6\n.text:0000000000402dc8\n.text:0000000000402dca\n.text:0000000000402dd0\n.text:0000000000402dd2\n.text:0000000000402dd4\n.text:0000000000402dd6\n.text:0000000000402dd9\n.text:0000000000402ddc\n.text:0000000000402dde\n.text:0000000000402de0\n.text:0000000000402de3\n.text:0000000000402de6\n.text:0000000000402de9\n.text:0000000000402dee\n.text:0000000000402df0\n.text:0000000000402df3\n.text:0000000000402df6\n.text:0000000000402dfb\n.text:0000000000402e02\n.text:0000000000402e07\n.text:0000000000402e0a\n.text:0000000000402e0c\n.text:0000000000402e11\n.text:0000000000402e16\n.text:0000000000402e19\n.text:0000000000402e1e\n.text:0000000000402e21\n.text:0000000000402e24\n.text:0000000000402e26\n.text:0000000000402e2a\n.text:0000000000402e30\n.text:0000000000402e33\n.text:0000000000402e38\n.text:0000000000402e3a\n.text:0000000000402e40\n.text:0000000000402e45\n.text:0000000000402e4a\n.text:0000000000402e4d\n.text:0000000000402e52\n.text:0000000000402e55\n.text:0000000000402e59\n.text:0000000000402e5e\n.text:0000000000402e62\n.text:0000000000402e66\n.text:0000000000402e6b\n.text:0000000000402e6f\n.text:0000000000402e77\n.text:0000000000402e7c\n.text:0000000000402e7f\n.text:0000000000402e87\n.text:0000000000402e89\n.text:0000000000402e8f\n.text:0000000000402e94\n.text:0000000000402e99\n.text:0000000000402e9e\n.text:0000000000402ea0\n.text:0000000000402ea5\n.text:0000000000402ea8\n.text:0000000000402eab\n.text:0000000000402ead\n.text:0000000000402eb2\n.text:0000000000402ec0\n.text:0000000000402ec3\n.text:0000000000402ecb\n.text:0000000000402ecd\n.text:0000000000402ed0\n.text:0000000000402ed8\n.text:0000000000402edd\n.text:0000000000402edf\n.text:0000000000402ee7\n.text:0000000000402eeb\n.text:0000000000402ef1\n.text:0000000000402ef6\n.text:0000000000402ef9\n.text:0000000000402efe\n.text:0000000000402f01\n.text:0000000000402f06\n.text:0000000000402f10\n.text:0000000000402f15\n.text:0000000000402f1a\n.text:0000000000402f1e\n.text:0000000000402f23\n.text:0000000000402f25\n.text:0000000000402f2a\n.text:0000000000402f2f\n.text:0000000000402f33\n.text:0000000000402f38\n.text:0000000000402f3d\n.text:0000000000402f41\n.text:0000000000402f46\n.text:0000000000402f4a\n.text:0000000000402f4f\n.text:0000000000402f52\n.text:0000000000402f59\n.text:0000000000402f5b\n.text:0000000000402f60\n.text:0000000000402f62\n.text:0000000000402f64\n.text:0000000000402f69\n.text:0000000000402f6b\n.text:0000000000402f71\n.text:0000000000402f74\n.text:0000000000402f76\n.text:0000000000402f78\n.text:0000000000402f7b\n.text:0000000000402f7e\n.text:0000000000402f86\n.text:0000000000402f8b\n.text:0000000000402f8d\n.text:0000000000402f92\n.text:0000000000402f96\n.text:0000000000402f99\n.text:0000000000402f9e\n.text:0000000000402fa3\n.text:0000000000402fa7\n.text:0000000000402fa9\n.text:0000000000402fae\n.text:0000000000402fb1\n.text:0000000000402fb6\n.text:0000000000402fb9\n.text:0000000000402fbc\n.text:0000000000402fc2\n.text:0000000000402fc7\n.text:0000000000402fca\n.text:0000000000402fd0\n.text:0000000000402fd3\n.text:0000000000402fd9\n.text:0000000000402fde\n.text:0000000000402fe3\n.text:0000000000402fe8\n.text:0000000000402fee\n.text:0000000000402ff3\n.text:0000000000402ff8\n.text:0000000000402ffd\n.text:0000000000403002\n.text:0000000000403005\n.text:000000000040300a\n.text:000000000040300f\n.text:0000000000403012\n.text:0000000000403014\n.text:0000000000403019\n.text:000000000040301e\n.text:0000000000403023\n.text:0000000000403026\n.text:000000000040302b\n.text:0000000000403030\n.text:0000000000403035\n.text:0000000000403038\n.text:000000000040303a\n.text:000000000040303c\n.text:000000000040303f\n.text:0000000000403042\n.text:0000000000403047\n.text:000000000040304c\n.text:0000000000403051\n.text:0000000000403056\n.text:0000000000403059\n.text:000000000040305f\n.text:0000000000403064\n.text:0000000000403067\n.text:0000000000403069\n.text:000000000040306e\n.text:0000000000403073\n.text:0000000000403078\n.text:000000000040307b\n.text:000000000040307e\n.text:0000000000403083\n.text:0000000000403088\n.text:000000000040308d\n.text:0000000000403090\n.text:0000000000403092\n.text:0000000000403094\n.text:0000000000403096\n.text:0000000000403099\n.text:000000000040309c\n.text:00000000004030a1\n.text:00000000004030a6\n.text:00000000004030ab\n.text:00000000004030ae\n.text:00000000004030b0\n.text:00000000004030b5\n.text:00000000004030ba\n.text:00000000004030bf\n.text:00000000004030c4\n.text:00000000004030c6\n.text:00000000004030cb\n.text:00000000004030ce\n.text:00000000004030d3\n.text:00000000004030d6\n.text:00000000004030db\n.text:00000000004030e0\n.text:00000000004030e3\n.text:00000000004030e6\n.text:00000000004030e9\n.text:00000000004030ee\n.text:00000000004030f3\n.text:00000000004030f6\n.text:00000000004030f8\n.text:00000000004030fb\n.text:00000000004030fd\n.text:0000000000403102\n.text:0000000000403105\n.text:0000000000403108\n.text:000000000040310a\n.text:000000000040310c\n.text:0000000000403111\n.text:0000000000403116\n.text:0000000000403119\n.text:000000000040311e\n.text:0000000000403121\n.text:0000000000403123\n.text:0000000000403126\n.text:0000000000403130\n.text:0000000000403133\n.text:0000000000403138\n.text:000000000040313c\n.text:000000000040313f\n.text:0000000000403141\n.text:0000000000403144\n.text:0000000000403149\n.text:000000000040314c\n.text:000000000040314e\n.text:0000000000403150\n.text:0000000000403152\n.text:0000000000403156\n.text:000000000040315b\n.text:0000000000403160\n.text:0000000000403165\n.text:0000000000403168\n.text:000000000040316a\n.text:000000000040316d\n.text:0000000000403170\n.text:0000000000403174\n.text:0000000000403177\n.text:000000000040317e\n.text:000000000040317f\n.text:0000000000403181\n.text:0000000000403183\n.text:0000000000403185\n.text:0000000000403187\n.text:0000000000403188\n'
p90
tp91
sS'quote'
p92
(S'\n__stdcall quote(char * arg)\n'
p93
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p94
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x004048d0\n'
p95
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p96
S'.text:00000000004048e0\n.text:00000000004048e3\n.text:00000000004048e5\n.text:00000000004048e8\n'
p97
tp98
sS'emit_bug_reporting_address'
p99
(S'\n__stdcall emit_bug_reporting_address()\n'
p100
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p101
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x407345\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40735a\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004015c0\nXOR EDI,EDI\nMOV ESI,0x407370\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x406770\nMOV ECX,0x4068da\nXOR EAX,EAX\nCALL 0x004015c0\nXOR EDI,EDI\nMOV ESI,0x407384\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004014c0\n'
p102
S'50\n31 ff\nbe 45 73 40 00\nba 05 00 00 00\ne8 be c1 ff ff\n48 89 c1\nbf 01 00 00 00\nba 5a 73 40 00\n31 c0\n48 89 ce\ne8 97 c3 ff ff\n31 ff\nbe 70 73 40 00\nba 05 00 00 00\ne8 96 c1 ff ff\n48 89 c6\nbf 01 00 00 00\nba 70 67 40 00\nb9 da 68 40 00\n31 c0\ne8 6d c3 ff ff\n31 ff\nbe 84 73 40 00\nba 05 00 00 00\ne8 6c c1 ff ff\n48 8b 35 fd 4f 20 00\n48 89 c7\n58\ne9 4c c2 ff ff\n'
p103
S'.text:0000000000405200\n.text:0000000000405201\n.text:0000000000405203\n.text:0000000000405208\n.text:000000000040520d\n.text:0000000000405212\n.text:0000000000405215\n.text:000000000040521a\n.text:000000000040521f\n.text:0000000000405221\n.text:0000000000405224\n.text:0000000000405229\n.text:000000000040522b\n.text:0000000000405230\n.text:0000000000405235\n.text:000000000040523a\n.text:000000000040523d\n.text:0000000000405242\n.text:0000000000405247\n.text:000000000040524c\n.text:000000000040524e\n.text:0000000000405253\n.text:0000000000405255\n.text:000000000040525a\n.text:000000000040525f\n.text:0000000000405264\n.text:000000000040526b\n.text:000000000040526e\n.text:000000000040526f\n'
p104
tp105
sS'clone_quoting_options'
p106
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p107
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p108
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401330\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x60a2d0\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x004053e0\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p109
S'55\n41 56\n53\n48 89 fb\ne8 84 de ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 d0 a2 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 15 1f 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p110
S'.text:00000000004034a0\n.text:00000000004034a1\n.text:00000000004034a3\n.text:00000000004034a4\n.text:00000000004034a7\n.text:00000000004034ac\n.text:00000000004034af\n.text:00000000004034b2\n.text:00000000004034b5\n.text:00000000004034ba\n.text:00000000004034be\n.text:00000000004034c3\n.text:00000000004034c6\n.text:00000000004034cb\n.text:00000000004034ce\n.text:00000000004034cf\n.text:00000000004034d1\n.text:00000000004034d2\n'
p111
tp112
sS'xmalloc'
p113
(S'\n__stdcall xmalloc(size_t n)\n'
p114
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p115
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401520\nTEST RBX,RBX\nJZ 0x004052b3\nTEST RAX,RAX\nJZ 0x004052b5\nPOP RBX\nRET\nCALL 0x00405430\n'
p116
S'53\n48 89 fb\ne8 77 c2 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p117
S'.text:00000000004052a0\n.text:00000000004052a1\n.text:00000000004052a4\n.text:00000000004052a9\n.text:00000000004052ac\n.text:00000000004052ae\n.text:00000000004052b1\n.text:00000000004052b3\n.text:00000000004052b4\n.text:00000000004052b5\n'
p118
tp119
sS'quotearg_char_mem'
p120
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p121
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p122
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x0060a300]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x0060a2f0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a2e0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a2d0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00403500\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004043f0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p123
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d e8 5b 20 00\n48 89 4c 24 30\n0f 10 05 cc 5b 20 00\n0f 29 44 24 20\n0f 10 05 b0 5b 20 00\n0f 29 44 24 10\n0f 10 05 94 5b 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p124
S'.text:0000000000404700\n.text:0000000000404702\n.text:0000000000404704\n.text:0000000000404705\n.text:0000000000404709\n.text:000000000040470b\n.text:000000000040470e\n.text:0000000000404711\n.text:0000000000404718\n.text:000000000040471d\n.text:0000000000404724\n.text:0000000000404729\n.text:0000000000404730\n.text:0000000000404735\n.text:000000000040473c\n.text:0000000000404740\n.text:0000000000404743\n.text:0000000000404748\n.text:000000000040474b\n.text:000000000040474d\n.text:0000000000404752\n.text:0000000000404754\n.text:0000000000404757\n.text:000000000040475a\n.text:000000000040475d\n.text:0000000000404762\n.text:0000000000404766\n.text:0000000000404767\n.text:0000000000404769\n.text:000000000040476b\n'
p125
tp126
sS'c_isgraph'
p127
(S'\n__stdcall c_isgraph()\n'
p128
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p129
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p130
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p131
S'.text:0000000000405920\n.text:0000000000405923\n.text:0000000000405926\n.text:0000000000405929\n'
p132
tp133
sS'frame_dummy'
p134
(S'\n__stdcall frame_dummy()\n'
p135
V\u000a/* WARNING: Removing unreachable block (ram,0x0040177a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p136
S'MOV EDI,0x609e18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401770\nJMP 0x00401700\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x0040176b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401700\n'
p137
S'bf 18 9e 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p138
S'.text:0000000000401760\n.text:0000000000401765\n.text:0000000000401769\n.text:000000000040176b\n.text:0000000000401770\n.text:0000000000401775\n.text:0000000000401778\n.text:000000000040177a\n.text:000000000040177b\n.text:000000000040177e\n.text:0000000000401780\n.text:0000000000401781\n'
p139
tp140
sS'copy_fd'
p141
(S'\n__stdcall copy_fd(uintmax_t n_bytes)\n'
p142
V\u000aCopy_fd_status copy_fd(uintmax_t n_bytes)\u000a\u000a{\u000a  size_t n_bytes_00;\u000a  long in_RSI;\u000a  char buf [8192];\u000a  char acStack8232 [8200];\u000a  \u000a  if (in_RSI != 0) {\u000a    do {\u000a      n_bytes_00 = safe_read((void *)(n_bytes & 0xffffffff),(size_t)acStack8232);\u000a      if (n_bytes_00 == 0xffffffffffffffff) {\u000a        return COPY_FD_READ_ERROR;\u000a      }\u000a      in_RSI = in_RSI - n_bytes_00;\u000a      if ((n_bytes_00 == 0) && (in_RSI != 0)) {\u000a        return COPY_FD_UNEXPECTED_EOF;\u000a      }\u000a      xwrite_stdout(acStack8232,n_bytes_00);\u000a    } while (in_RSI != 0);\u000a  }\u000a  return COPY_FD_OK;\u000a}\u000a\u000a
p143
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x2008\nMOV RBX,RSI\nMOV EBP,EDI\nXOR R14D,R14D\nTEST RBX,RBX\nJZ 0x00402c8d\nMOV R15,RSP\nNOP dword ptr [RAX]\nCMP RBX,0x2000\nMOV EDX,0x2000\nCMOVC RDX,RBX\nMOV EDI,EBP\nMOV RSI,R15\nCALL 0x00404cf0\nCMP RAX,-0x1\nJZ 0x00402c7f\nSUB RBX,RAX\nTEST RAX,RAX\nJNZ 0x00402c6d\nTEST RBX,RBX\nJNZ 0x00402c87\nMOV RDI,R15\nMOV RSI,RAX\nCALL 0x00402ba0\nTEST RBX,RBX\nJNZ 0x00402c40\nJMP 0x00402c8d\nMOV R14D,0x1\nJMP 0x00402c8d\nMOV R14D,0x2\nMOV EAX,R14D\nADD RSP,0x2008\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p144
S'55\n41 57\n41 56\n53\n48 81 ec 08 20 00 00\n48 89 f3\n89 fd\n45 31 f6\n48 85 db\n74 53\n49 89 e7\n0f 1f 00\n48 81 fb 00 20 00 00\nba 00 20 00 00\n48 0f 42 d3\n89 ef\n4c 89 fe\ne8 96 20 00 00\n48 83 f8 ff\n74 1f\n48 29 c3\n48 85 c0\n75 05\n48 85 db\n75 1a\n4c 89 ff\n48 89 c6\ne8 28 ff ff ff\n48 85 db\n75 c3\neb 0e\n41 be 01 00 00 00\neb 06\n41 be 02 00 00 00\n44 89 f0\n48 81 c4 08 20 00 00\n5b\n41 5e\n41 5f\n5d\nc3\n'
p145
S'.text:0000000000402c20\n.text:0000000000402c21\n.text:0000000000402c23\n.text:0000000000402c25\n.text:0000000000402c26\n.text:0000000000402c2d\n.text:0000000000402c30\n.text:0000000000402c32\n.text:0000000000402c35\n.text:0000000000402c38\n.text:0000000000402c3a\n.text:0000000000402c3d\n.text:0000000000402c40\n.text:0000000000402c47\n.text:0000000000402c4c\n.text:0000000000402c50\n.text:0000000000402c52\n.text:0000000000402c55\n.text:0000000000402c5a\n.text:0000000000402c5e\n.text:0000000000402c60\n.text:0000000000402c63\n.text:0000000000402c66\n.text:0000000000402c68\n.text:0000000000402c6b\n.text:0000000000402c6d\n.text:0000000000402c70\n.text:0000000000402c73\n.text:0000000000402c78\n.text:0000000000402c7b\n.text:0000000000402c7d\n.text:0000000000402c7f\n.text:0000000000402c85\n.text:0000000000402c87\n.text:0000000000402c8d\n.text:0000000000402c90\n.text:0000000000402c97\n.text:0000000000402c98\n.text:0000000000402c9a\n.text:0000000000402c9c\n.text:0000000000402c9d\n'
p146
tp147
sS'elseek'
p148
(S'\n__stdcall elseek(off_t offset, char * filename)\n'
p149
V\u000aoff_t elseek(off_t offset,char *filename)\u000a\u000a{\u000a  uint uVar1;\u000a  __off_t _Var2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  char *pcVar6;\u000a  int __whence;\u000a  char buf [21];\u000a  char acStack72 [24];\u000a  \u000a  _Var2 = lseek((int)offset,(__off_t)filename,__whence);\u000a  if (_Var2 < 0) {\u000a    puVar3 = (uint *)__errno_location();\u000a    uVar1 = *puVar3;\u000a    pcVar5 = "%s: cannot seek to relative offset %s";\u000a    if (__whence == 0) {\u000a      pcVar5 = "%s: cannot seek to offset %s";\u000a    }\u000a    uVar4 = dcgettext(0,pcVar5,5);\u000a    pcVar5 = quotearg_n_style_colon((char *)0x0);\u000a    pcVar6 = offtostr((off_t)filename,acStack72);\u000a    error(0,(ulong)uVar1,uVar4,pcVar5,pcVar6);\u000a  }\u000a  return _Var2;\u000a}\u000a\u000a
p150
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R15,RCX\nMOV EBP,EDX\nMOV R14,RSI\nCALL 0x00401440\nMOV RBX,RAX\nTEST RBX,RBX\nJNS 0x0040222f\nCALL 0x00401330\nMOV R12D,dword ptr [RAX]\nTEST EBP,EBP\nMOV EAX,0x406a62\nMOV ESI,0x406a7f\nCMOVZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x004013d0\nMOV R13,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R15\nCALL 0x004047a0\nMOV R15,RAX\nMOV RSI,RSP\nMOV RDI,R14\nCALL 0x004032d0\nMOV RBP,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R12D\nMOV RDX,R13\nMOV RCX,R15\nMOV R8,RBP\nCALL 0x004015d0\nMOV RAX,RBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p151
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 cf\n89 d5\n49 89 f6\ne8 75 f2 ff ff\n48 89 c3\n48 85 db\n79 5c\ne8 58 f1 ff ff\n44 8b 20\n85 ed\nb8 62 6a 40 00\nbe 7f 6a 40 00\n48 0f 44 f0\n31 ff\nba 05 00 00 00\ne8 d9 f1 ff ff\n49 89 c5\n31 ff\nbe 03 00 00 00\n4c 89 fa\ne8 97 25 00 00\n49 89 c7\n48 89 e6\n4c 89 f7\ne8 b9 10 00 00\n48 89 c5\n31 ff\n31 c0\n44 89 e6\n4c 89 ea\n4c 89 f9\n49 89 e8\ne8 a1 f3 ff ff\n48 89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p152
S'.text:00000000004021b0\n.text:00000000004021b1\n.text:00000000004021b3\n.text:00000000004021b5\n.text:00000000004021b7\n.text:00000000004021b9\n.text:00000000004021ba\n.text:00000000004021be\n.text:00000000004021c1\n.text:00000000004021c3\n.text:00000000004021c6\n.text:00000000004021cb\n.text:00000000004021ce\n.text:00000000004021d1\n.text:00000000004021d3\n.text:00000000004021d8\n.text:00000000004021db\n.text:00000000004021dd\n.text:00000000004021e2\n.text:00000000004021e7\n.text:00000000004021eb\n.text:00000000004021ed\n.text:00000000004021f2\n.text:00000000004021f7\n.text:00000000004021fa\n.text:00000000004021fc\n.text:0000000000402201\n.text:0000000000402204\n.text:0000000000402209\n.text:000000000040220c\n.text:000000000040220f\n.text:0000000000402212\n.text:0000000000402217\n.text:000000000040221a\n.text:000000000040221c\n.text:000000000040221e\n.text:0000000000402221\n.text:0000000000402224\n.text:0000000000402227\n.text:000000000040222a\n.text:000000000040222f\n.text:0000000000402232\n.text:0000000000402236\n.text:0000000000402237\n.text:0000000000402239\n.text:000000000040223b\n.text:000000000040223d\n.text:000000000040223f\n.text:0000000000402240\n'
p153
tp154
sS'quotearg_buffer_restyled'
p155
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p156
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_0040369c_caseD_7;\u000a  case 2:\u000a    goto switchD_0040369c_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_0040369c_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_0040369c_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_0040369c_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_0040369c_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_0040369c_caseD_7;\u000aswitchD_0040369c_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_0040369c_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_0040369c_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00404160;\u000aLAB_00403880:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00404169:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00404178:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_0040388b:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_004038cf:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_004038cf;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00404178;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_004040a5;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00403fb0;\u000a    }\u000a    goto LAB_00404178;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_004040da;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00404178;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00404109;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00403bc8;\u000a  case '\u005ca':\u000a    goto joined_r0x00403ab8;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00403ab8;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_004038e6_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00403ab8;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00403ab8;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_004038e6_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00403ab8:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_0040401e;\u000a    }\u000a    goto LAB_00404178;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00404178;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00404178;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00404178;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00404178;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00404178;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_004038e6_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00404076;\u000a      goto joined_r0x00404068;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00403b71:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00404068;\u000a      goto LAB_00404076;\u000a    }\u000a    goto LAB_00404178;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00404178;\u000a  }\u000a  goto joined_r0x00403fb0;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_004040da:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00404109;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00404109:\u000a  if (1 < uVar10) {\u000aLAB_00403be6:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00403ca2;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00403b71;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00403ca2:\u000a        if (bVar6 != 0) goto LAB_00404178;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00403bc8:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00403be6;\u000ajoined_r0x00403fb0:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00403fb0:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00403fd7;\u000aLAB_00404010:\u000a    if (bVar22) goto LAB_00404015;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00404010;\u000aLAB_00403fd7:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00404015:\u000a      if (bVar6 != 0) goto LAB_00404178;\u000aLAB_0040401e:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00404068;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00404076:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00404068:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_004040a5:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00403880;\u000aLAB_00404160:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00404169;\u000a  goto LAB_0040388b;\u000a}\u000a\u000a
p157
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x004013e0\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00404245\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x406b50 + RAX*0x8]\nMOV EDI,0x407076\nMOV ESI,R15D\nCALL 0x004048f0\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x407078\nMOV ESI,R15D\nCALL 0x004048f0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x004036fd\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00403700\nNOP\nCMP R12,RSI\nJNC 0x004036ee\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x004036e0\nJMP 0x00403700\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x004013f0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x004037cc\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x004037cc\nMOV ECX,0x407074\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x004037c6\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00403767\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00403794\nTEST RSI,RSI\nJZ 0x00403781\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x407078\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x004037a2\nMOV ECX,0x407078\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x004037cc\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x0040421c\nMOV ECX,0x407074\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00404160\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00404169\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x004038cf\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x004038ca\nCMP R11,-0x1\nJNZ 0x004038ca\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x004013f0\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00403920\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x00403b7c\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x406ba8 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00404178\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00403fd0\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00403fd7\nJMP 0x00404010\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x004014b0\nTEST EAX,EAX\nSETZ AL\nJNZ 0x0040396d\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x004038d1\nJMP 0x00404178\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x004038d1\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x004038fb\nCMP EBX,0x2\nJNZ 0x004038fb\nTEST R13,R13\nJNZ 0x004038fb\nJMP 0x00404178\nCMP R11,-0x1\nJZ 0x00403d53\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00403d73\nJMP 0x004038fb\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403d84\nTEST R8B,R8B\nJNZ 0x00404178\nCMP EBX,0x2\nJNZ 0x00403a28\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403a28\nCMP R12,RSI\nJNC 0x00403a03\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403a12\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403a21\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403a32\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00403ef8\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00403ef8\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00403ef8\nCMP RCX,RSI\nJNC 0x00403a6c\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x00403a7b\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403906\nJMP 0x00403fd0\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004038f9\nJMP 0x00403ada\nMOV DL,0x74\nJMP 0x00403ac2\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004038f9\nJMP 0x00403ada\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004038f9\nJMP 0x00403ada\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00404178\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004038f9\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x0040401e\nJMP 0x00404178\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x004038f9\nTEST R8B,R8B\nJNZ 0x00404178\nCMP R12,RSI\nJNC 0x00403b0a\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403b19\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403b28\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x004038f9\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x00403f0b\nCMP EBX,0x2\nJNZ 0x004038f9\nTEST R8B,R8B\nJZ 0x004038f9\nJMP 0x00404178\nCMP EBX,0x2\nJNZ 0x00403da4\nTEST R8B,R8B\nJNZ 0x00404178\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00404076\nJMP 0x00404099\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00403dc5\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401680\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403fb8\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00403fb8\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00403ca2\nJMP 0x00403c70\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x00403c59\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x00403c56\nCMP R12,RSI\nJNC 0x00403c3b\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x00403c4a\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00403c90\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00403c90\nTEST BPL,0x1\nJZ 0x00403d33\nCMP R12,RSI\nJNC 0x00403c84\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00403d33\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00403c70\nTEST R8B,R8B\nJNZ 0x00404178\nCMP EBX,0x2\nJNZ 0x00403cea\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x00403cea\nCMP R12,RSI\nJNC 0x00403cc2\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403cd1\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403ce0\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00403cf4\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403d0b\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403d25\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00403c20\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00404076\nJMP 0x00404099\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x004038fb\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x004038fb\nJMP 0x00404178\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x004040a5\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403906\nJMP 0x00403fd0\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00403ac2\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00404076\nJMP 0x00404099\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00403de7\nMOV RDI,R10\nCALL 0x004013f0\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00401410\nMOV R14,RAX\nTEST R14,R14\nJZ 0x004040bf\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x004040b7\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x004040c6\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x00403eae\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00403ea6\nBT RDI,RDX\nJC 0x00404212\nINC RCX\nCMP RCX,R14\nJC 0x00403e90\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401670\nTEST EAX,EAX\nJNZ 0x00403ec3\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00401660\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403e05\nJMP 0x00404109\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403906\nJMP 0x00403fd0\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x004038f9\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x004038f9\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x004038f9\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x004038fb\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00404142\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00404178\nCMP R12,RSI\nJNC 0x00403f6e\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00403f81\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403f90\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x00403f9f\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403906\nJMP 0x00403fd0\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403906\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00404010\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00404015\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00404070\nJMP 0x00404015\nTEST BPL,BPL\nJZ 0x00404070\nTEST R8B,R8B\nJNZ 0x00404178\nCMP EBX,0x2\nJNZ 0x00404058\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00404058\nCMP R12,RSI\nJNC 0x00404033\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00404042\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00404051\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00404062\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x004040a2\nJMP 0x0040409e\nTEST DIL,0x1\nJZ 0x00404099\nAND AL,0x1\nJNZ 0x00404099\nCMP R12,RSI\nJNC 0x00404084\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00404093\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x004040a2\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00404160\nJMP 0x00403880\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00404104\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x004040fc\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00404138\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x004040da\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00404109\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00403bc8\nJMP 0x00403be6\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00404109\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403906\nJMP 0x00403fd0\nCMP R13,R11\nJNZ 0x0040388b\nTEST R8B,R8B\nJZ 0x004041d2\nCMP EBX,0x2\nJNZ 0x004041d2\nTEST R12,R12\nJNZ 0x004041d2\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00403610\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00404206\nTEST R8B,R8B\nJNZ 0x00404206\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00404206\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x004041f9\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x004041f0\nCMP R12,RSI\nJNC 0x004041bd\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x004041bd\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00404178\nTEST RSI,RSI\nJZ 0x00404229\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x407074\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x004037cc\nCALL 0x00401320\n'
p158
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 a2 dd ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 50 6b 40 00\nbf 76 70 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf 78 70 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 e3 dc ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 74 70 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 78 70 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 78 70 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 74 70 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 43 db ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd a8 6b 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 77 db ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 e7 da ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 11 d6 ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 e3 d5 ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 b9 d7 ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 82 d7 ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 74 70 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 d6 d0 ff ff\n'
p159
S'.text:0000000000403610\n.text:0000000000403611\n.text:0000000000403613\n.text:0000000000403615\n.text:0000000000403617\n.text:0000000000403619\n.text:000000000040361a\n.text:0000000000403621\n.text:0000000000403624\n.text:0000000000403627\n.text:000000000040362a\n.text:000000000040362f\n.text:0000000000403634\n.text:0000000000403639\n.text:000000000040363e\n.text:0000000000403646\n.text:000000000040364a\n.text:0000000000403650\n.text:0000000000403658\n.text:000000000040365d\n.text:0000000000403665\n.text:000000000040366a\n.text:000000000040366e\n.text:0000000000403670\n.text:0000000000403673\n.text:0000000000403676\n.text:0000000000403679\n.text:000000000040367e\n.text:0000000000403681\n.text:0000000000403684\n.text:0000000000403687\n.text:000000000040368a\n.text:000000000040368c\n.text:000000000040368f\n.text:0000000000403694\n.text:0000000000403697\n.text:000000000040369c\n.text:00000000004036a3\n.text:00000000004036a8\n.text:00000000004036ab\n.text:00000000004036b0\n.text:00000000004036b5\n.text:00000000004036ba\n.text:00000000004036bd\n.text:00000000004036c2\n.text:00000000004036c7\n.text:00000000004036cc\n.text:00000000004036ce\n.text:00000000004036d0\n.text:00000000004036d5\n.text:00000000004036d7\n.text:00000000004036da\n.text:00000000004036dc\n.text:00000000004036de\n.text:00000000004036e0\n.text:00000000004036e3\n.text:00000000004036e5\n.text:00000000004036ea\n.text:00000000004036ee\n.text:00000000004036f4\n.text:00000000004036f7\n.text:00000000004036f9\n.text:00000000004036fb\n.text:00000000004036fd\n.text:0000000000403700\n.text:0000000000403705\n.text:0000000000403708\n.text:000000000040370d\n.text:0000000000403712\n.text:0000000000403715\n.text:0000000000403718\n.text:000000000040371b\n.text:000000000040371e\n.text:0000000000403723\n.text:0000000000403726\n.text:0000000000403729\n.text:000000000040372e\n.text:0000000000403731\n.text:0000000000403733\n.text:0000000000403736\n.text:0000000000403738\n.text:000000000040373a\n.text:000000000040373d\n.text:0000000000403742\n.text:0000000000403747\n.text:000000000040374c\n.text:000000000040374f\n.text:0000000000403755\n.text:0000000000403757\n.text:000000000040375a\n.text:000000000040375d\n.text:0000000000403760\n.text:0000000000403762\n.text:0000000000403764\n.text:0000000000403767\n.text:000000000040376a\n.text:000000000040376f\n.text:0000000000403772\n.text:0000000000403774\n.text:0000000000403777\n.text:0000000000403779\n.text:000000000040377e\n.text:0000000000403781\n.text:0000000000403786\n.text:000000000040378c\n.text:0000000000403792\n.text:0000000000403794\n.text:0000000000403799\n.text:000000000040379f\n.text:00000000004037a2\n.text:00000000004037a5\n.text:00000000004037a8\n.text:00000000004037aa\n.text:00000000004037af\n.text:00000000004037b2\n.text:00000000004037b8\n.text:00000000004037bd\n.text:00000000004037c3\n.text:00000000004037c6\n.text:00000000004037c9\n.text:00000000004037cc\n.text:00000000004037d4\n.text:00000000004037d6\n.text:00000000004037d8\n.text:00000000004037db\n.text:00000000004037df\n.text:00000000004037e1\n.text:00000000004037e4\n.text:00000000004037e8\n.text:00000000004037ea\n.text:00000000004037ed\n.text:00000000004037f0\n.text:00000000004037f3\n.text:00000000004037f5\n.text:00000000004037f9\n.text:00000000004037fb\n.text:00000000004037ff\n.text:0000000000403802\n.text:0000000000403805\n.text:0000000000403808\n.text:000000000040380a\n.text:000000000040380e\n.text:0000000000403817\n.text:000000000040381a\n.text:000000000040381c\n.text:0000000000403820\n.text:0000000000403822\n.text:0000000000403826\n.text:0000000000403828\n.text:000000000040382b\n.text:000000000040382f\n.text:0000000000403831\n.text:0000000000403834\n.text:0000000000403838\n.text:000000000040383d\n.text:0000000000403840\n.text:0000000000403844\n.text:000000000040384c\n.text:000000000040384f\n.text:0000000000403852\n.text:0000000000403854\n.text:0000000000403858\n.text:000000000040385b\n.text:000000000040385d\n.text:0000000000403862\n.text:0000000000403866\n.text:000000000040386b\n.text:0000000000403870\n.text:0000000000403874\n.text:000000000040387a\n.text:0000000000403880\n.text:0000000000403885\n.text:000000000040388b\n.text:0000000000403890\n.text:0000000000403892\n.text:0000000000403897\n.text:000000000040389b\n.text:000000000040389d\n.text:00000000004038a1\n.text:00000000004038a3\n.text:00000000004038a5\n.text:00000000004038a8\n.text:00000000004038ad\n.text:00000000004038af\n.text:00000000004038b4\n.text:00000000004038b9\n.text:00000000004038bd\n.text:00000000004038c2\n.text:00000000004038c7\n.text:00000000004038ca\n.text:00000000004038cd\n.text:00000000004038cf\n.text:00000000004038d1\n.text:00000000004038d6\n.text:00000000004038da\n.text:00000000004038e0\n.text:00000000004038e2\n.text:00000000004038e4\n.text:00000000004038e6\n.text:00000000004038ee\n.text:00000000004038f3\n.text:00000000004038f9\n.text:00000000004038fb\n.text:0000000000403900\n.text:0000000000403906\n.text:000000000040390f\n.text:0000000000403915\n.text:0000000000403920\n.text:0000000000403922\n.text:0000000000403925\n.text:0000000000403929\n.text:0000000000403931\n.text:0000000000403934\n.text:0000000000403939\n.text:000000000040393b\n.text:000000000040393e\n.text:0000000000403940\n.text:0000000000403945\n.text:0000000000403948\n.text:000000000040394d\n.text:0000000000403950\n.text:0000000000403955\n.text:0000000000403959\n.text:000000000040395e\n.text:0000000000403960\n.text:0000000000403962\n.text:0000000000403968\n.text:000000000040396d\n.text:0000000000403972\n.text:0000000000403975\n.text:000000000040397a\n.text:000000000040397e\n.text:0000000000403983\n.text:0000000000403988\n.text:000000000040398a\n.text:000000000040398c\n.text:0000000000403991\n.text:0000000000403993\n.text:0000000000403996\n.text:000000000040399c\n.text:000000000040399f\n.text:00000000004039a5\n.text:00000000004039a8\n.text:00000000004039ae\n.text:00000000004039b3\n.text:00000000004039b7\n.text:00000000004039bd\n.text:00000000004039c0\n.text:00000000004039c3\n.text:00000000004039c7\n.text:00000000004039ca\n.text:00000000004039cc\n.text:00000000004039cf\n.text:00000000004039d5\n.text:00000000004039da\n.text:00000000004039df\n.text:00000000004039e5\n.text:00000000004039e8\n.text:00000000004039ee\n.text:00000000004039f1\n.text:00000000004039f3\n.text:00000000004039f5\n.text:00000000004039f7\n.text:00000000004039f9\n.text:00000000004039fc\n.text:00000000004039fe\n.text:0000000000403a03\n.text:0000000000403a08\n.text:0000000000403a0b\n.text:0000000000403a0d\n.text:0000000000403a12\n.text:0000000000403a17\n.text:0000000000403a1a\n.text:0000000000403a1c\n.text:0000000000403a21\n.text:0000000000403a25\n.text:0000000000403a28\n.text:0000000000403a2b\n.text:0000000000403a2d\n.text:0000000000403a32\n.text:0000000000403a37\n.text:0000000000403a39\n.text:0000000000403a3c\n.text:0000000000403a3f\n.text:0000000000403a45\n.text:0000000000403a49\n.text:0000000000403a4c\n.text:0000000000403a52\n.text:0000000000403a56\n.text:0000000000403a59\n.text:0000000000403a5c\n.text:0000000000403a62\n.text:0000000000403a65\n.text:0000000000403a67\n.text:0000000000403a6c\n.text:0000000000403a71\n.text:0000000000403a74\n.text:0000000000403a76\n.text:0000000000403a7b\n.text:0000000000403a7f\n.text:0000000000403a84\n.text:0000000000403a8a\n.text:0000000000403a8f\n.text:0000000000403a91\n.text:0000000000403a96\n.text:0000000000403a9c\n.text:0000000000403a9e\n.text:0000000000403aa0\n.text:0000000000403aa2\n.text:0000000000403aa4\n.text:0000000000403aa9\n.text:0000000000403aaf\n.text:0000000000403ab1\n.text:0000000000403ab3\n.text:0000000000403ab8\n.text:0000000000403abe\n.text:0000000000403ac0\n.text:0000000000403ac2\n.text:0000000000403ac7\n.text:0000000000403ac9\n.text:0000000000403acf\n.text:0000000000403ad4\n.text:0000000000403ada\n.text:0000000000403add\n.text:0000000000403ae0\n.text:0000000000403ae6\n.text:0000000000403aeb\n.text:0000000000403aee\n.text:0000000000403af1\n.text:0000000000403af7\n.text:0000000000403afa\n.text:0000000000403b00\n.text:0000000000403b03\n.text:0000000000403b05\n.text:0000000000403b0a\n.text:0000000000403b0f\n.text:0000000000403b12\n.text:0000000000403b14\n.text:0000000000403b19\n.text:0000000000403b1e\n.text:0000000000403b21\n.text:0000000000403b23\n.text:0000000000403b28\n.text:0000000000403b2c\n.text:0000000000403b2e\n.text:0000000000403b33\n.text:0000000000403b36\n.text:0000000000403b39\n.text:0000000000403b3f\n.text:0000000000403b42\n.text:0000000000403b48\n.text:0000000000403b4b\n.text:0000000000403b51\n.text:0000000000403b56\n.text:0000000000403b59\n.text:0000000000403b5f\n.text:0000000000403b62\n.text:0000000000403b68\n.text:0000000000403b6b\n.text:0000000000403b6d\n.text:0000000000403b71\n.text:0000000000403b77\n.text:0000000000403b7c\n.text:0000000000403b80\n.text:0000000000403b89\n.text:0000000000403b8f\n.text:0000000000403b94\n.text:0000000000403b99\n.text:0000000000403b9e\n.text:0000000000403ba1\n.text:0000000000403ba6\n.text:0000000000403ba9\n.text:0000000000403bac\n.text:0000000000403bb1\n.text:0000000000403bb6\n.text:0000000000403bba\n.text:0000000000403bbf\n.text:0000000000403bc4\n.text:0000000000403bc8\n.text:0000000000403bca\n.text:0000000000403bcf\n.text:0000000000403bd5\n.text:0000000000403bd8\n.text:0000000000403bda\n.text:0000000000403bdd\n.text:0000000000403be0\n.text:0000000000403be6\n.text:0000000000403beb\n.text:0000000000403bee\n.text:0000000000403bf1\n.text:0000000000403bf4\n.text:0000000000403bf7\n.text:0000000000403bf9\n.text:0000000000403bfd\n.text:0000000000403bff\n.text:0000000000403c04\n.text:0000000000403c09\n.text:0000000000403c0f\n.text:0000000000403c20\n.text:0000000000403c25\n.text:0000000000403c27\n.text:0000000000403c2a\n.text:0000000000403c2c\n.text:0000000000403c2f\n.text:0000000000403c31\n.text:0000000000403c34\n.text:0000000000403c36\n.text:0000000000403c3b\n.text:0000000000403c40\n.text:0000000000403c43\n.text:0000000000403c45\n.text:0000000000403c4a\n.text:0000000000403c4e\n.text:0000000000403c56\n.text:0000000000403c59\n.text:0000000000403c5c\n.text:0000000000403c5e\n.text:0000000000403c62\n.text:0000000000403c70\n.text:0000000000403c74\n.text:0000000000403c7a\n.text:0000000000403c7d\n.text:0000000000403c7f\n.text:0000000000403c84\n.text:0000000000403c87\n.text:0000000000403c89\n.text:0000000000403c90\n.text:0000000000403c93\n.text:0000000000403c98\n.text:0000000000403c9b\n.text:0000000000403ca0\n.text:0000000000403ca2\n.text:0000000000403ca5\n.text:0000000000403cab\n.text:0000000000403cae\n.text:0000000000403cb0\n.text:0000000000403cb4\n.text:0000000000403cb6\n.text:0000000000403cb8\n.text:0000000000403cbb\n.text:0000000000403cbd\n.text:0000000000403cc2\n.text:0000000000403cc7\n.text:0000000000403cca\n.text:0000000000403ccc\n.text:0000000000403cd1\n.text:0000000000403cd6\n.text:0000000000403cd9\n.text:0000000000403cdb\n.text:0000000000403ce0\n.text:0000000000403ce4\n.text:0000000000403ce6\n.text:0000000000403cea\n.text:0000000000403ced\n.text:0000000000403cef\n.text:0000000000403cf4\n.text:0000000000403cf9\n.text:0000000000403cfc\n.text:0000000000403cfe\n.text:0000000000403d01\n.text:0000000000403d04\n.text:0000000000403d07\n.text:0000000000403d0b\n.text:0000000000403d10\n.text:0000000000403d13\n.text:0000000000403d15\n.text:0000000000403d18\n.text:0000000000403d1b\n.text:0000000000403d1e\n.text:0000000000403d21\n.text:0000000000403d25\n.text:0000000000403d29\n.text:0000000000403d2d\n.text:0000000000403d31\n.text:0000000000403d33\n.text:0000000000403d37\n.text:0000000000403d3a\n.text:0000000000403d40\n.text:0000000000403d44\n.text:0000000000403d48\n.text:0000000000403d4e\n.text:0000000000403d53\n.text:0000000000403d56\n.text:0000000000403d59\n.text:0000000000403d5e\n.text:0000000000403d61\n.text:0000000000403d63\n.text:0000000000403d66\n.text:0000000000403d6d\n.text:0000000000403d73\n.text:0000000000403d75\n.text:0000000000403d79\n.text:0000000000403d7f\n.text:0000000000403d84\n.text:0000000000403d89\n.text:0000000000403d8f\n.text:0000000000403d92\n.text:0000000000403d94\n.text:0000000000403d99\n.text:0000000000403d9f\n.text:0000000000403da4\n.text:0000000000403da6\n.text:0000000000403dab\n.text:0000000000403db1\n.text:0000000000403db3\n.text:0000000000403db6\n.text:0000000000403dba\n.text:0000000000403dc0\n.text:0000000000403dc5\n.text:0000000000403dd1\n.text:0000000000403dd5\n.text:0000000000403dd7\n.text:0000000000403dda\n.text:0000000000403ddf\n.text:0000000000403de4\n.text:0000000000403de7\n.text:0000000000403deb\n.text:0000000000403df0\n.text:0000000000403df2\n.text:0000000000403df6\n.text:0000000000403df8\n.text:0000000000403e00\n.text:0000000000403e05\n.text:0000000000403e0a\n.text:0000000000403e0e\n.text:0000000000403e12\n.text:0000000000403e1a\n.text:0000000000403e1d\n.text:0000000000403e22\n.text:0000000000403e25\n.text:0000000000403e28\n.text:0000000000403e2d\n.text:0000000000403e30\n.text:0000000000403e33\n.text:0000000000403e39\n.text:0000000000403e3d\n.text:0000000000403e47\n.text:0000000000403e4d\n.text:0000000000403e51\n.text:0000000000403e56\n.text:0000000000403e5c\n.text:0000000000403e60\n.text:0000000000403e63\n.text:0000000000403e67\n.text:0000000000403e69\n.text:0000000000403e6e\n.text:0000000000403e73\n.text:0000000000403e77\n.text:0000000000403e79\n.text:0000000000403e7e\n.text:0000000000403e83\n.text:0000000000403e87\n.text:0000000000403e8c\n.text:0000000000403e90\n.text:0000000000403e94\n.text:0000000000403e97\n.text:0000000000403e9a\n.text:0000000000403e9c\n.text:0000000000403ea0\n.text:0000000000403ea6\n.text:0000000000403ea9\n.text:0000000000403eac\n.text:0000000000403eae\n.text:0000000000403eb2\n.text:0000000000403eb7\n.text:0000000000403eb9\n.text:0000000000403ebb\n.text:0000000000403ec3\n.text:0000000000403ec8\n.text:0000000000403ecb\n.text:0000000000403ed3\n.text:0000000000403ed6\n.text:0000000000403ed9\n.text:0000000000403ede\n.text:0000000000403ee1\n.text:0000000000403ee3\n.text:0000000000403ee8\n.text:0000000000403eed\n.text:0000000000403ef3\n.text:0000000000403ef8\n.text:0000000000403efb\n.text:0000000000403f00\n.text:0000000000403f06\n.text:0000000000403f0b\n.text:0000000000403f10\n.text:0000000000403f16\n.text:0000000000403f1a\n.text:0000000000403f1d\n.text:0000000000403f23\n.text:0000000000403f29\n.text:0000000000403f2f\n.text:0000000000403f34\n.text:0000000000403f36\n.text:0000000000403f39\n.text:0000000000403f3f\n.text:0000000000403f43\n.text:0000000000403f45\n.text:0000000000403f4f\n.text:0000000000403f53\n.text:0000000000403f59\n.text:0000000000403f5c\n.text:0000000000403f5e\n.text:0000000000403f64\n.text:0000000000403f67\n.text:0000000000403f69\n.text:0000000000403f6e\n.text:0000000000403f73\n.text:0000000000403f76\n.text:0000000000403f7a\n.text:0000000000403f7c\n.text:0000000000403f81\n.text:0000000000403f86\n.text:0000000000403f89\n.text:0000000000403f8b\n.text:0000000000403f90\n.text:0000000000403f95\n.text:0000000000403f98\n.text:0000000000403f9a\n.text:0000000000403f9f\n.text:0000000000403fa3\n.text:0000000000403fa5\n.text:0000000000403fa8\n.text:0000000000403fab\n.text:0000000000403fb0\n.text:0000000000403fb6\n.text:0000000000403fb8\n.text:0000000000403fbd\n.text:0000000000403fc2\n.text:0000000000403fc8\n.text:0000000000403fd0\n.text:0000000000403fd5\n.text:0000000000403fd7\n.text:0000000000403fdc\n.text:0000000000403fdf\n.text:0000000000403fe1\n.text:0000000000403fe4\n.text:0000000000403fe6\n.text:0000000000403fe9\n.text:0000000000403fec\n.text:0000000000403fef\n.text:0000000000403ff1\n.text:0000000000403ff9\n.text:0000000000403ffc\n.text:0000000000403ffe\n.text:0000000000404000\n.text:0000000000404010\n.text:0000000000404013\n.text:0000000000404015\n.text:0000000000404018\n.text:000000000040401e\n.text:0000000000404021\n.text:0000000000404023\n.text:0000000000404025\n.text:0000000000404027\n.text:0000000000404029\n.text:000000000040402c\n.text:000000000040402e\n.text:0000000000404033\n.text:0000000000404038\n.text:000000000040403b\n.text:000000000040403d\n.text:0000000000404042\n.text:0000000000404047\n.text:000000000040404a\n.text:000000000040404c\n.text:0000000000404051\n.text:0000000000404055\n.text:0000000000404058\n.text:000000000040405b\n.text:000000000040405d\n.text:0000000000404062\n.text:0000000000404065\n.text:0000000000404068\n.text:000000000040406a\n.text:0000000000404070\n.text:0000000000404074\n.text:0000000000404076\n.text:0000000000404078\n.text:000000000040407a\n.text:000000000040407d\n.text:000000000040407f\n.text:0000000000404084\n.text:0000000000404089\n.text:000000000040408c\n.text:000000000040408e\n.text:0000000000404093\n.text:0000000000404097\n.text:0000000000404099\n.text:000000000040409c\n.text:000000000040409e\n.text:00000000004040a2\n.text:00000000004040a5\n.text:00000000004040a8\n.text:00000000004040ac\n.text:00000000004040b2\n.text:00000000004040b7\n.text:00000000004040bf\n.text:00000000004040c4\n.text:00000000004040c6\n.text:00000000004040ce\n.text:00000000004040d3\n.text:00000000004040d5\n.text:00000000004040da\n.text:00000000004040df\n.text:00000000004040e3\n.text:00000000004040e5\n.text:00000000004040ea\n.text:00000000004040ed\n.text:00000000004040f0\n.text:00000000004040f2\n.text:00000000004040fa\n.text:00000000004040fc\n.text:0000000000404104\n.text:0000000000404109\n.text:000000000040410d\n.text:0000000000404112\n.text:0000000000404117\n.text:000000000040411b\n.text:0000000000404120\n.text:0000000000404125\n.text:0000000000404129\n.text:000000000040412d\n.text:0000000000404133\n.text:0000000000404138\n.text:0000000000404140\n.text:0000000000404142\n.text:0000000000404144\n.text:0000000000404148\n.text:000000000040414d\n.text:0000000000404153\n.text:0000000000404160\n.text:0000000000404163\n.text:0000000000404169\n.text:000000000040416c\n.text:000000000040416e\n.text:0000000000404171\n.text:0000000000404173\n.text:0000000000404176\n.text:0000000000404178\n.text:0000000000404180\n.text:0000000000404186\n.text:000000000040418a\n.text:000000000040418d\n.text:0000000000404191\n.text:0000000000404196\n.text:000000000040419a\n.text:000000000040419e\n.text:00000000004041a1\n.text:00000000004041a4\n.text:00000000004041a7\n.text:00000000004041ab\n.text:00000000004041af\n.text:00000000004041b1\n.text:00000000004041b6\n.text:00000000004041ba\n.text:00000000004041bd\n.text:00000000004041c0\n.text:00000000004041c7\n.text:00000000004041c8\n.text:00000000004041ca\n.text:00000000004041cc\n.text:00000000004041ce\n.text:00000000004041d0\n.text:00000000004041d1\n.text:00000000004041d2\n.text:00000000004041da\n.text:00000000004041dd\n.text:00000000004041df\n.text:00000000004041e2\n.text:00000000004041e4\n.text:00000000004041e6\n.text:00000000004041e8\n.text:00000000004041ea\n.text:00000000004041ed\n.text:00000000004041f0\n.text:00000000004041f3\n.text:00000000004041f5\n.text:00000000004041f9\n.text:00000000004041fc\n.text:00000000004041ff\n.text:0000000000404202\n.text:0000000000404204\n.text:0000000000404206\n.text:0000000000404209\n.text:000000000040420b\n.text:0000000000404210\n.text:0000000000404212\n.text:0000000000404217\n.text:000000000040421c\n.text:000000000040421f\n.text:0000000000404221\n.text:0000000000404226\n.text:0000000000404229\n.text:000000000040422e\n.text:0000000000404231\n.text:0000000000404237\n.text:000000000040423d\n.text:0000000000404240\n.text:0000000000404245\n'
p160
tp161
sS'elide_tail_bytes_file'
p162
(S'\n__stdcall elide_tail_bytes_file(char * filename, uintmax_t n_elide, stat * st, off_t current_pos)\n'
p163
V\u000a_Bool elide_tail_bytes_file(char *filename,uintmax_t n_elide,stat *st,off_t current_pos)\u000a\u000a{\u000a  ulong uVar1;\u000a  _Bool _Var2;\u000a  Copy_fd_status CVar3;\u000a  stat *psVar4;\u000a  undefined uVar5;\u000a  ulong uVar6;\u000a  stat *psVar7;\u000a  long in_R8;\u000a  \u000a  if (presume_input_pipe == 0) {\u000a    uVar1 = *(ulong *)(current_pos + 0x38);\u000a    uVar6 = 0x200;\u000a    if (uVar1 < 0x2000000000000001) {\u000a      uVar6 = uVar1;\u000a    }\u000a    if ((long)uVar1 < 1) {\u000a      uVar6 = 0x200;\u000a    }\u000a    if ((long)uVar6 < *(long *)(current_pos + 0x30)) {\u000a      psVar7 = (stat *)(*(long *)(current_pos + 0x30) - in_R8);\u000a      psVar4 = (stat *)0x0;\u000a      if (-1 < (long)psVar7) {\u000a        psVar4 = psVar7;\u000a      }\u000a      uVar5 = 1;\u000a      if (st < psVar4) {\u000a        CVar3 = copy_fd(n_elide & 0xffffffff);\u000a        if (CVar3 != COPY_FD_OK) {\u000a          diagnose_copy_fd_failure((char *)(ulong)CVar3);\u000a          uVar5 = 0;\u000a        }\u000a      }\u000a      return (_Bool)uVar5;\u000a    }\u000a  }\u000a  _Var2 = elide_tail_bytes_pipe(filename,n_elide,(off_t)st);\u000a  return _Var2;\u000a}\u000a\u000a
p164
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV AL,byte ptr [0x0060a2ac]\nTEST AL,AL\nJNZ 0x00402323\nMOV RDI,qword ptr [RCX + 0x30]\nMOV RAX,qword ptr [RCX + 0x38]\nMOV RCX,0x2000000000000001\nCMP RAX,RCX\nMOV ECX,0x200\nMOV EBP,0x200\nCMOVC RBP,RAX\nTEST RAX,RAX\nCMOVLE RBP,RCX\nCMP RDI,RBP\nJLE 0x00402323\nXOR EAX,EAX\nSUB RDI,R8\nCMOVNS RAX,RDI\nMOV BPL,0x1\nSUB RAX,RDX\nJBE 0x0040231a\nMOV EDI,ESI\nMOV RSI,RAX\nCALL 0x00402c20\nTEST EAX,EAX\nJZ 0x0040231a\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00402ca0\nXOR EBP,EBP\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nMOV RCX,R8\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00402d20\n'
p165
S'55\n53\n50\n48 89 fb\n8a 05 f0 7f 20 00\n84 c0\n75 63\n48 8b 79 30\n48 8b 41 38\n48 b9 01 00 00 00 00 00 00 20\n48 39 c8\nb9 00 02 00 00\nbd 00 02 00 00\n48 0f 42 e8\n48 85 c0\n48 0f 4e e9\n48 39 ef\n7e 34\n31 c0\n4c 29 c7\n48 0f 49 c7\n40 b5 01\n48 29 d0\n76 1a\n89 f7\n48 89 c6\ne8 16 09 00 00\n85 c0\n74 0c\n89 c7\n48 89 de\ne8 88 09 00 00\n31 ed\n89 e8\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n4c 89 c1\n48 83 c4 08\n5b\n5d\ne9 ec 09 00 00\n'
p166
S'.text:00000000004022b0\n.text:00000000004022b1\n.text:00000000004022b2\n.text:00000000004022b3\n.text:00000000004022b6\n.text:00000000004022bc\n.text:00000000004022be\n.text:00000000004022c0\n.text:00000000004022c4\n.text:00000000004022c8\n.text:00000000004022d2\n.text:00000000004022d5\n.text:00000000004022da\n.text:00000000004022df\n.text:00000000004022e3\n.text:00000000004022e6\n.text:00000000004022ea\n.text:00000000004022ed\n.text:00000000004022ef\n.text:00000000004022f1\n.text:00000000004022f4\n.text:00000000004022f8\n.text:00000000004022fb\n.text:00000000004022fe\n.text:0000000000402300\n.text:0000000000402302\n.text:0000000000402305\n.text:000000000040230a\n.text:000000000040230c\n.text:000000000040230e\n.text:0000000000402310\n.text:0000000000402313\n.text:0000000000402318\n.text:000000000040231a\n.text:000000000040231c\n.text:0000000000402320\n.text:0000000000402321\n.text:0000000000402322\n.text:0000000000402323\n.text:0000000000402326\n.text:0000000000402329\n.text:000000000040232d\n.text:000000000040232e\n.text:000000000040232f\n'
p167
tp168
sS'set_quoting_style'
p169
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p170
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p171
S'TEST RDI,RDI\nMOV EAX,0x60a2d0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p172
S'48 85 ff\nb8 d0 a2 60 00\n48 0f 45 c7\n89 30\nc3\n'
p173
S'.text:00000000004034f0\n.text:00000000004034f3\n.text:00000000004034f8\n.text:00000000004034fc\n.text:00000000004034fe\n'
p174
tp175
sS'quotearg_n_style_colon'
p176
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p177
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p178
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00404620\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00403500\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x004043f0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p179
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p180
S'.text:00000000004047a0\n.text:00000000004047a1\n.text:00000000004047a3\n.text:00000000004047a4\n.text:00000000004047a8\n.text:00000000004047ab\n.text:00000000004047ad\n.text:00000000004047b2\n.text:00000000004047b5\n.text:00000000004047ba\n.text:00000000004047bf\n.text:00000000004047c4\n.text:00000000004047c7\n.text:00000000004047cc\n.text:00000000004047d3\n.text:00000000004047d5\n.text:00000000004047d8\n.text:00000000004047db\n.text:00000000004047e0\n.text:00000000004047e4\n.text:00000000004047e5\n.text:00000000004047e7\n.text:00000000004047e8\n'
p181
tp182
sS'textdomain'
p183
(S'\n__stdcall textdomain()\n'
p184
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_0060a068)();\u000a  return;\u000a}\u000a\u000a
p185
S'JMP qword ptr [0x0060a068]\n'
p186
S'ff 25 c2 8c 20 00\n'
p187
S'.plt:00000000004013a0\n'
p188
tp189
sS'xmemdup'
p190
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p191
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p192
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x004052a0\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00401500\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p193
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 fc c0 ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p194
S'.text:00000000004053e0\n.text:00000000004053e2\n.text:00000000004053e4\n.text:00000000004053e5\n.text:00000000004053e8\n.text:00000000004053eb\n.text:00000000004053ee\n.text:00000000004053f3\n.text:00000000004053f6\n.text:00000000004053f9\n.text:00000000004053fc\n.text:00000000004053ff\n.text:0000000000405404\n.text:0000000000405407\n.text:0000000000405408\n.text:000000000040540a\n.text:000000000040540c\n'
p195
tp196
sS'xwrite_stdout'
p197
(S'\n__stdcall xwrite_stdout(char * buffer, size_t n_bytes)\n'
p198
V\u000avoid xwrite_stdout(char *buffer,size_t n_bytes)\u000a\u000a{\u000a  uint uVar1;\u000a  size_t sVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  \u000a  if (n_bytes != 0) {\u000a    sVar2 = fwrite_unlocked(buffer,1,n_bytes,stdout);\u000a    if (sVar2 < n_bytes) {\u000a      clearerr_unlocked(stdout);\u000a      puVar3 = (uint *)__errno_location();\u000a      uVar1 = *puVar3;\u000a      uVar4 = dcgettext(0,"error writing %s",5);\u000a      pcVar5 = quotearg_style((char *)0x4);\u000a      error(1,(ulong)uVar1,uVar4,pcVar5);\u000a      return;\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p199
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nTEST RBX,RBX\nJZ 0x00402c14\nMOV RCX,qword ptr [0x0060a268]\nMOV ESI,0x1\nMOV RDX,RBX\nCALL 0x00401580\nCMP RAX,RBX\nJNC 0x00402c14\nMOV RDI,qword ptr [0x0060a268]\nCALL 0x00401390\nCALL 0x00401330\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x406ab6\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RBX,RAX\nMOV EDI,0x4\nMOV ESI,0x406ac7\nCALL 0x004046c0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x004015d0\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p200
S'55\n53\n50\n48 89 f3\n48 85 db\n74 69\n48 8b 0d b6 76 20 00\nbe 01 00 00 00\n48 89 da\ne8 c1 e9 ff ff\n48 39 d8\n73 50\n48 8b 3d 9d 76 20 00\ne8 c0 e7 ff ff\ne8 5b e7 ff ff\n8b 28\n31 ff\nbe b6 6a 40 00\nba 05 00 00 00\ne8 e8 e7 ff ff\n48 89 c3\nbf 04 00 00 00\nbe c7 6a 40 00\ne8 c6 1a 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 ee\n48 89 da\n48 83 c4 08\n5b\n5d\ne9 bc e9 ff ff\n48 83 c4 08\n5b\n5d\nc3\n'
p201
S'.text:0000000000402ba0\n.text:0000000000402ba1\n.text:0000000000402ba2\n.text:0000000000402ba3\n.text:0000000000402ba6\n.text:0000000000402ba9\n.text:0000000000402bab\n.text:0000000000402bb2\n.text:0000000000402bb7\n.text:0000000000402bba\n.text:0000000000402bbf\n.text:0000000000402bc2\n.text:0000000000402bc4\n.text:0000000000402bcb\n.text:0000000000402bd0\n.text:0000000000402bd5\n.text:0000000000402bd7\n.text:0000000000402bd9\n.text:0000000000402bde\n.text:0000000000402be3\n.text:0000000000402be8\n.text:0000000000402beb\n.text:0000000000402bf0\n.text:0000000000402bf5\n.text:0000000000402bfa\n.text:0000000000402bfd\n.text:0000000000402c02\n.text:0000000000402c04\n.text:0000000000402c06\n.text:0000000000402c09\n.text:0000000000402c0d\n.text:0000000000402c0e\n.text:0000000000402c0f\n.text:0000000000402c14\n.text:0000000000402c18\n.text:0000000000402c19\n.text:0000000000402c1a\n'
p202
tp203
sS'get_quoting_style'
p204
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p205
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p206
S'TEST RDI,RDI\nMOV EAX,0x60a2d0\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p207
S'48 85 ff\nb8 d0 a2 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p208
S'.text:00000000004034e0\n.text:00000000004034e3\n.text:00000000004034e8\n.text:00000000004034ec\n.text:00000000004034ee\n'
p209
tp210
sS'ferror_unlocked'
p211
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p212
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_0060a100)();\u000a  return iVar1;\u000a}\u000a\u000a
p213
S'JMP qword ptr [0x0060a100]\n'
p214
S'ff 25 2a 8c 20 00\n'
p215
S'.plt:00000000004014d0\n'
p216
tp217
sS'exit'
p218
(S'\n__stdcall exit(int __status)\n'
p219
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_0060a1b0)();\u000a  return;\u000a}\u000a\u000a
p220
S'JMP qword ptr [0x0060a1b0]\n'
p221
S'ff 25 7a 8b 20 00\n'
p222
S'.plt:0000000000401630\n'
p223
tp224
sS'quote_mem'
p225
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p226
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p227
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x004048b0\n'
p228
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p229
S'.text:00000000004048c0\n.text:00000000004048c3\n.text:00000000004048c6\n.text:00000000004048c8\n.text:00000000004048cb\n.text:00000000004048ce\n'
p230
tp231
sS'locale_charset'
p232
(S'\n__stdcall locale_charset()\n'
p233
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_00405acd:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_00405acd;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p234
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401540\nTEST RAX,RAX\nMOV R14D,0x4071c9\nCMOVNZ R14,RAX\nCALL 0x00405ae0\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00405aa5\nJMP 0x00405acd\nMOV RDI,RBX\nCALL 0x004013f0\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x004013f0\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x00405acd\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x004014f0\nTEST EAX,EAX\nJZ 0x00405ac0\nCMP BPL,0x2a\nJNZ 0x00405a80\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00405a80\nMOV RDI,RBX\nCALL 0x004013f0\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x407a60\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p235
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 e2 ba ff ff\n48 85 c0\n41 be c9 71 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 68 b9 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 5a b9 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 40 ba ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 28 b9 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 60 7a 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p236
S'.text:0000000000405a50\n.text:0000000000405a51\n.text:0000000000405a53\n.text:0000000000405a54\n.text:0000000000405a59\n.text:0000000000405a5e\n.text:0000000000405a61\n.text:0000000000405a67\n.text:0000000000405a6b\n.text:0000000000405a70\n.text:0000000000405a73\n.text:0000000000405a76\n.text:0000000000405a79\n.text:0000000000405a7b\n.text:0000000000405a80\n.text:0000000000405a83\n.text:0000000000405a88\n.text:0000000000405a8c\n.text:0000000000405a91\n.text:0000000000405a96\n.text:0000000000405a9b\n.text:0000000000405aa0\n.text:0000000000405aa3\n.text:0000000000405aa5\n.text:0000000000405aa8\n.text:0000000000405aab\n.text:0000000000405ab0\n.text:0000000000405ab2\n.text:0000000000405ab4\n.text:0000000000405ab8\n.text:0000000000405aba\n.text:0000000000405abe\n.text:0000000000405ac0\n.text:0000000000405ac3\n.text:0000000000405ac8\n.text:0000000000405acd\n.text:0000000000405ad1\n.text:0000000000405ad6\n.text:0000000000405ada\n.text:0000000000405adb\n.text:0000000000405add\n.text:0000000000405ade\n'
p237
tp238
sS'set_program_name'
p239
(S'\n__stdcall set_program_name(char * argv0)\n'
p240
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p241
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00403471\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00401430\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x0040345b\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x406b3d\nMOV EDX,0x7\nCALL 0x00401340\nTEST EAX,EAX\nJNZ 0x0040345b\nMOV ESI,0x406b45\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401340\nTEST EAX,EAX\nJNZ 0x00403458\nADD R14,0x3\nMOV qword ptr [0x0060a260],R14\nMOV RBX,R14\nMOV qword ptr [0x0060a2c0],RBX\nMOV qword ptr [0x0060a280],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x0060a2a0]\nMOV EDI,0x406b05\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401640\nCALL 0x00401320\n'
p242
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 27 e0 ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 3d 6b 40 00\nba 07 00 00 00\ne8 0d df ff ff\n85 c0\n75 24\nbe 45 6b 40 00\nba 03 00 00 00\n4c 89 f7\ne8 f7 de ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 08 6e 20 00\n4c 89 f3\n48 89 1d 5e 6e 20 00\n48 89 1d 17 6e 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 28 6e 20 00\nbf 05 6b 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 b4 e1 ff ff\ne8 8f de ff ff\n'
p243
S'.text:00000000004033f0\n.text:00000000004033f2\n.text:00000000004033f3\n.text:00000000004033f4\n.text:00000000004033f7\n.text:00000000004033fa\n.text:00000000004033fc\n.text:0000000000403401\n.text:0000000000403404\n.text:0000000000403409\n.text:000000000040340c\n.text:0000000000403410\n.text:0000000000403414\n.text:0000000000403417\n.text:000000000040341a\n.text:000000000040341e\n.text:0000000000403420\n.text:0000000000403424\n.text:0000000000403429\n.text:000000000040342e\n.text:0000000000403433\n.text:0000000000403435\n.text:0000000000403437\n.text:000000000040343c\n.text:0000000000403441\n.text:0000000000403444\n.text:0000000000403449\n.text:000000000040344b\n.text:000000000040344d\n.text:0000000000403451\n.text:0000000000403458\n.text:000000000040345b\n.text:0000000000403462\n.text:0000000000403469\n.text:000000000040346d\n.text:000000000040346e\n.text:0000000000403470\n.text:0000000000403471\n.text:0000000000403478\n.text:000000000040347d\n.text:0000000000403482\n.text:0000000000403487\n.text:000000000040348c\n'
p244
tp245
sS'fileno'
p246
(S'\n__stdcall fileno(FILE * __stream)\n'
p247
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_0060a120)();\u000a  return iVar1;\u000a}\u000a\u000a
p248
S'JMP qword ptr [0x0060a120]\n'
p249
S'ff 25 0a 8c 20 00\n'
p250
S'.plt:0000000000401510\n'
p251
tp252
sS'quotearg_buffer'
p253
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p254
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p255
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x60a2d0\nCMOVNZ RBP,R8\nCALL 0x00401330\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00403610\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p256
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd d0 a2 60 00\n49 0f 45 e8\ne8 78 dd ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p257
S'.text:0000000000403590\n.text:0000000000403591\n.text:0000000000403593\n.text:0000000000403595\n.text:0000000000403597\n.text:0000000000403599\n.text:000000000040359a\n.text:000000000040359b\n.text:000000000040359e\n.text:00000000004035a1\n.text:00000000004035a4\n.text:00000000004035a7\n.text:00000000004035aa\n.text:00000000004035af\n.text:00000000004035b3\n.text:00000000004035b8\n.text:00000000004035bb\n.text:00000000004035bd\n.text:00000000004035c1\n.text:00000000004035c5\n.text:00000000004035c9\n.text:00000000004035cd\n.text:00000000004035d0\n.text:00000000004035d3\n.text:00000000004035d6\n.text:00000000004035d9\n.text:00000000004035dc\n.text:00000000004035df\n.text:00000000004035e3\n.text:00000000004035e4\n.text:00000000004035e9\n.text:00000000004035ed\n.text:00000000004035f1\n.text:00000000004035f3\n.text:00000000004035f7\n.text:00000000004035f8\n.text:00000000004035fa\n.text:00000000004035fc\n.text:00000000004035fe\n.text:0000000000403600\n.text:0000000000403601\n'
p258
tp259
sS'quotearg_colon'
p260
(S'\n__stdcall quotearg_colon(char * arg)\n'
p261
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p262
S'MOV ESI,0x3a\nJMP 0x00404770\n'
p263
S'be 3a 00 00 00\neb e9\n'
p264
S'.text:0000000000404780\n.text:0000000000404785\n'
p265
tp266
sS'mbrtowc'
p267
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p268
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_0060a0a0)();\u000a  return sVar1;\u000a}\u000a\u000a
p269
S'JMP qword ptr [0x0060a0a0]\n'
p270
S'ff 25 8a 8c 20 00\n'
p271
S'.plt:0000000000401410\n'
p272
tp273
sS'elide_tail_lines_seekable'
p274
(S'\n__stdcall elide_tail_lines_seekable(char * pretty_filename, uintmax_t n_lines, off_t start_pos, off_t size)\n'
p275
V\u000a_Bool elide_tail_lines_seekable(char *pretty_filename,uintmax_t n_lines,off_t start_pos,off_t size)\u000a\u000a{\u000a  uint uVar1;\u000a  Copy_fd_status CVar2;\u000a  long lVar3;\u000a  off_t oVar4;\u000a  void *__n;\u000a  uint *puVar5;\u000a  undefined8 uVar6;\u000a  char cVar7;\u000a  int __c;\u000a  long in_R8;\u000a  void *buf;\u000a  long lVar8;\u000a  char *filename;\u000a  char buffer [8192];\u000a  char *local_2040;\u000a  char local_2038 [8200];\u000a  \u000a  buf = (void *)(n_lines & 0xffffffff);\u000a  lVar3 = in_R8 - size;\u000a  lVar3 = lVar3 - (((ulong)(lVar3 >> 0x3f) >> 0x33) + lVar3 & 0xffffe000);\u000a  lVar8 = 0x2000;\u000a  if (lVar3 != 0) {\u000a    lVar8 = lVar3;\u000a  }\u000a  filename = (char *)(in_R8 - lVar8);\u000a  oVar4 = elseek((off_t)buf,filename);\u000a  if (-1 < oVar4) {\u000a    local_2040 = (char *)size;\u000a    __n = (void *)safe_read(buf,(size_t)local_2038);\u000a    if (__n != (void *)0xffffffffffffffff) {\u000a      lVar8 = start_pos;\u000a      if ((start_pos != 0) && (lVar8 = start_pos, __n != (void *)0x0)) {\u000a        cVar7 = '\u005cn';\u000a        if (line_end == 0) {\u000a          cVar7 = 0;\u000a        }\u000a        lVar8 = start_pos -\u000a                (ulong)(*(char *)((long)register0x00000020 + -0x2039 + (long)__n) != cVar7);\u000a      }\u000a      do {\u000a        __c = 0;\u000a        if (line_end != 0) {\u000a          __c = 10;\u000a        }\u000a        lVar8 = -lVar8;\u000a        while (__n != (void *)0x0) {\u000a          if (start_pos == 0) {\u000a            __n = (void *)((long)__n + -1);\u000a          }\u000a          else {\u000a            __n = memrchr(local_2038,__c,(size_t)__n);\u000a            if (__n == (void *)0x0) break;\u000a            __n = (void *)((long)__n - (long)local_2038);\u000a          }\u000a          lVar8 = lVar8 + 1;\u000a          if (lVar8 == 1) {\u000a            if ((long)local_2040 < (long)filename) {\u000a              oVar4 = elseek((off_t)buf,local_2040);\u000a              if (oVar4 < 0) {\u000a                return false;\u000a              }\u000a              CVar2 = copy_fd((uintmax_t)buf);\u000a              if (CVar2 != COPY_FD_OK) {\u000a                diagnose_copy_fd_failure((char *)(ulong)CVar2);\u000a                return false;\u000a              }\u000a            }\u000a            xwrite_stdout(local_2038,(long)__n + 1);\u000a            oVar4 = elseek((off_t)buf,filename + 1 + (long)__n);\u000a            return (_Bool)(-1 < oVar4);\u000a          }\u000a        }\u000a        if (filename == local_2040) {\u000a          return true;\u000a        }\u000a        filename = filename + 0xffffe000;\u000a        oVar4 = elseek((off_t)buf,filename);\u000a        if (oVar4 < 0) {\u000a          return false;\u000a        }\u000a        __n = (void *)safe_read(buf,(size_t)local_2038);\u000a        if (__n == (void *)0x0) {\u000a          return true;\u000a        }\u000a        lVar8 = -lVar8;\u000a      } while (__n != (void *)0xffffffffffffffff);\u000a    }\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    uVar6 = dcgettext(0,"error reading %s",5);\u000a    filename = quotearg_style((char *)0x4);\u000a    error(0,(ulong)uVar1,uVar6,filename);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p276
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x2028\nMOV R13,R8\nMOV R14,RCX\nMOV R15,RDX\nMOV R12D,ESI\nMOV RBP,RDI\nMOV RAX,R13\nSUB RAX,R14\nMOV RCX,RAX\nSAR RCX,0x3f\nSHR RCX,0x33\nADD RCX,RAX\nAND RCX,0xffffe000\nSUB RAX,RCX\nMOV EBX,0x2000\nCMOVNZ RBX,RAX\nSUB R13,RBX\nXOR EDX,EDX\nMOV EDI,R12D\nMOV RSI,R13\nMOV RCX,RBP\nCALL 0x004021b0\nTEST RAX,RAX\nJS 0x00402b11\nMOV qword ptr [RSP + 0x10],RBP\nMOV qword ptr [RSP + 0x18],R14\nLEA R14,[RSP + 0x20]\nMOV dword ptr [RSP + 0xc],R12D\nMOV EDI,R12D\nMOV RSI,R14\nMOV RDX,RBX\nCALL 0x00404cf0\nMOV RBX,RAX\nCMP RBX,-0x1\nJZ 0x00402ad0\nTEST R15,R15\nMOV R12,R15\nJZ 0x00402a06\nTEST RBX,RBX\nMOV R12,R15\nJZ 0x00402a06\nMOVSX EAX,byte ptr [RSP + RBX*0x1 + 0x1f]\nMOV CL,byte ptr [0x0060a2ab]\nXOR EDX,EDX\nTEST CL,CL\nMOV ECX,0xa\nCMOVZ ECX,EDX\nXOR EDX,EDX\nCMP EAX,ECX\nSETNZ DL\nMOV R12,R15\nSUB R12,RDX\nMOV ECX,0xa\nMOV AL,byte ptr [0x0060a2ab]\nTEST AL,AL\nMOV EBP,0x0\nCMOVNZ EBP,ECX\nNEG R12\nNOP\nTEST RBX,RBX\nJZ 0x00402a70\nTEST R15,R15\nJZ 0x00402a50\nMOV RDI,R14\nMOV ESI,EBP\nMOV RDX,RBX\nCALL 0x004015e0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00402a70\nSUB RBX,R14\nJMP 0x00402a53\nDEC RBX\nINC R12\nCMP R12,0x1\nJNZ 0x00402a20\nJMP 0x00402b15\nCMP R13,qword ptr [RSP + 0x18]\nMOV BPL,0x1\nJZ 0x00402b85\nADD R13,0xffffe000\nXOR EDX,EDX\nMOV EBX,dword ptr [RSP + 0xc]\nMOV EDI,EBX\nMOV RSI,R13\nMOV RCX,qword ptr [RSP + 0x10]\nCALL 0x004021b0\nTEST RAX,RAX\nJS 0x00402b99\nMOV EDX,0x2000\nMOV EDI,EBX\nMOV RSI,R14\nCALL 0x00404cf0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00402b85\nNEG R12\nCMP RBX,-0x1\nMOV ECX,0xa\nJNZ 0x00402a0b\nCALL 0x00401330\nMOV R14D,dword ptr [RAX]\nXOR EBP,EBP\nXOR EDI,EDI\nMOV ESI,0x406aa5\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x10]\nCALL 0x004046c0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,RBX\nCALL 0x004015d0\nJMP 0x00402b85\nXOR EBP,EBP\nJMP 0x00402b85\nMOV R14,R13\nMOV RSI,qword ptr [RSP + 0x18]\nSUB R14,RSI\nMOV R15,qword ptr [RSP + 0x10]\nJLE 0x00402b5d\nXOR EBP,EBP\nXOR EDX,EDX\nMOV R12D,dword ptr [RSP + 0xc]\nMOV EDI,R12D\nMOV RCX,R15\nCALL 0x004021b0\nTEST RAX,RAX\nJS 0x00402b85\nMOV EDI,R12D\nMOV RSI,R14\nCALL 0x00402c20\nTEST EAX,EAX\nJZ 0x00402b5d\nMOV EDI,EAX\nMOV RSI,R15\nCALL 0x00402ca0\nXOR EBP,EBP\nJMP 0x00402b85\nLEA RSI,[RBX + 0x1]\nLEA RDI,[RSP + 0x20]\nCALL 0x00402ba0\nLEA RSI,[R13 + RBX*0x1 + 0x1]\nXOR EDX,EDX\nMOV EDI,dword ptr [RSP + 0xc]\nMOV RCX,R15\nCALL 0x004021b0\nTEST RAX,RAX\nSETNS BPL\nMOV EAX,EBP\nADD RSP,0x2028\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EBP,EBP\nJMP 0x00402b85\n'
p277
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 28 20 00 00\n4d 89 c5\n49 89 ce\n49 89 d7\n41 89 f4\n48 89 fd\n4c 89 e8\n4c 29 f0\n48 89 c1\n48 c1 f9 3f\n48 c1 e9 33\n48 01 c1\n48 81 e1 00 e0 ff ff\n48 29 c8\nbb 00 20 00 00\n48 0f 45 d8\n49 29 dd\n31 d2\n44 89 e7\n4c 89 ee\n48 89 e9\ne8 16 f8 ff ff\n48 85 c0\n0f 88 6e 01 00 00\n48 89 6c 24 10\n4c 89 74 24 18\n4c 8d 74 24 20\n44 89 64 24 0c\n44 89 e7\n4c 89 f6\n48 89 da\ne8 2b 23 00 00\n48 89 c3\n48 83 fb ff\n0f 84 fe 00 00 00\n4d 85 ff\n4d 89 fc\n74 2c\n48 85 db\n4d 89 fc\n74 24\n0f be 44 1c 1f\n8a 0d be 78 20 00\n31 d2\n84 c9\nb9 0a 00 00 00\n0f 44 ca\n31 d2\n39 c8\n0f 95 c2\n4d 89 fc\n49 29 d4\nb9 0a 00 00 00\n8a 05 9a 78 20 00\n84 c0\nbd 00 00 00 00\n0f 45 e9\n49 f7 dc\n66 90\n48 85 db\n74 4b\n4d 85 ff\n74 26\n4c 89 f7\n89 ee\n48 89 da\ne8 a9 eb ff ff\n48 89 c3\n48 85 db\n74 31\n4c 29 f3\neb 0f\n48 ff cb\n49 ff c4\n49 83 fc 01\n75 c4\ne9 b4 00 00 00\n4c 3b 6c 24 18\n40 b5 01\n0f 84 07 01 00 00\n49 81 c5 00 e0 ff ff\n31 d2\n8b 5c 24 0c\n89 df\n4c 89 ee\n48 8b 4c 24 10\ne8 16 f7 ff ff\n48 85 c0\n0f 88 f6 00 00 00\nba 00 20 00 00\n89 df\n4c 89 f6\ne8 3e 22 00 00\n48 89 c3\n48 85 db\n0f 84 c7 00 00 00\n49 f7 dc\n48 83 fb ff\nb9 0a 00 00 00\n0f 85 3b ff ff ff\ne8 5b e8 ff ff\n44 8b 30\n31 ed\n31 ff\nbe a5 6a 40 00\nba 05 00 00 00\ne8 e5 e8 ff ff\n48 89 c3\nbf 04 00 00 00\n48 8b 74 24 10\ne8 c3 1b 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 f6\n48 89 da\ne8 c1 ea ff ff\neb 74\n31 ed\neb 70\n4d 89 ee\n48 8b 74 24 18\n49 29 f6\n4c 8b 7c 24 10\n7e 36\n31 ed\n31 d2\n44 8b 64 24 0c\n44 89 e7\n4c 89 f9\ne8 75 f6 ff ff\n48 85 c0\n78 45\n44 89 e7\n4c 89 f6\ne8 d5 00 00 00\n85 c0\n74 0e\n89 c7\n4c 89 fe\ne8 47 01 00 00\n31 ed\neb 28\n48 8d 73 01\n48 8d 7c 24 20\ne8 35 00 00 00\n49 8d 74 1d 01\n31 d2\n8b 7c 24 0c\n4c 89 f9\ne8 32 f6 ff ff\n48 85 c0\n40 0f 99 c5\n89 e8\n48 81 c4 28 20 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 ed\neb e8\n'
p278
S'.text:0000000000402940\n.text:0000000000402941\n.text:0000000000402943\n.text:0000000000402945\n.text:0000000000402947\n.text:0000000000402949\n.text:000000000040294a\n.text:0000000000402951\n.text:0000000000402954\n.text:0000000000402957\n.text:000000000040295a\n.text:000000000040295d\n.text:0000000000402960\n.text:0000000000402963\n.text:0000000000402966\n.text:0000000000402969\n.text:000000000040296d\n.text:0000000000402971\n.text:0000000000402974\n.text:000000000040297b\n.text:000000000040297e\n.text:0000000000402983\n.text:0000000000402987\n.text:000000000040298a\n.text:000000000040298c\n.text:000000000040298f\n.text:0000000000402992\n.text:0000000000402995\n.text:000000000040299a\n.text:000000000040299d\n.text:00000000004029a3\n.text:00000000004029a8\n.text:00000000004029ad\n.text:00000000004029b2\n.text:00000000004029b7\n.text:00000000004029ba\n.text:00000000004029bd\n.text:00000000004029c0\n.text:00000000004029c5\n.text:00000000004029c8\n.text:00000000004029cc\n.text:00000000004029d2\n.text:00000000004029d5\n.text:00000000004029d8\n.text:00000000004029da\n.text:00000000004029dd\n.text:00000000004029e0\n.text:00000000004029e2\n.text:00000000004029e7\n.text:00000000004029ed\n.text:00000000004029ef\n.text:00000000004029f1\n.text:00000000004029f6\n.text:00000000004029f9\n.text:00000000004029fb\n.text:00000000004029fd\n.text:0000000000402a00\n.text:0000000000402a03\n.text:0000000000402a06\n.text:0000000000402a0b\n.text:0000000000402a11\n.text:0000000000402a13\n.text:0000000000402a18\n.text:0000000000402a1b\n.text:0000000000402a1e\n.text:0000000000402a20\n.text:0000000000402a23\n.text:0000000000402a25\n.text:0000000000402a28\n.text:0000000000402a2a\n.text:0000000000402a2d\n.text:0000000000402a2f\n.text:0000000000402a32\n.text:0000000000402a37\n.text:0000000000402a3a\n.text:0000000000402a3d\n.text:0000000000402a3f\n.text:0000000000402a42\n.text:0000000000402a50\n.text:0000000000402a53\n.text:0000000000402a56\n.text:0000000000402a5a\n.text:0000000000402a5c\n.text:0000000000402a70\n.text:0000000000402a75\n.text:0000000000402a78\n.text:0000000000402a7e\n.text:0000000000402a85\n.text:0000000000402a87\n.text:0000000000402a8b\n.text:0000000000402a8d\n.text:0000000000402a90\n.text:0000000000402a95\n.text:0000000000402a9a\n.text:0000000000402a9d\n.text:0000000000402aa3\n.text:0000000000402aa8\n.text:0000000000402aaa\n.text:0000000000402aad\n.text:0000000000402ab2\n.text:0000000000402ab5\n.text:0000000000402ab8\n.text:0000000000402abe\n.text:0000000000402ac1\n.text:0000000000402ac5\n.text:0000000000402aca\n.text:0000000000402ad0\n.text:0000000000402ad5\n.text:0000000000402ad8\n.text:0000000000402ada\n.text:0000000000402adc\n.text:0000000000402ae1\n.text:0000000000402ae6\n.text:0000000000402aeb\n.text:0000000000402aee\n.text:0000000000402af3\n.text:0000000000402af8\n.text:0000000000402afd\n.text:0000000000402b00\n.text:0000000000402b02\n.text:0000000000402b04\n.text:0000000000402b07\n.text:0000000000402b0a\n.text:0000000000402b0f\n.text:0000000000402b11\n.text:0000000000402b13\n.text:0000000000402b15\n.text:0000000000402b18\n.text:0000000000402b1d\n.text:0000000000402b20\n.text:0000000000402b25\n.text:0000000000402b27\n.text:0000000000402b29\n.text:0000000000402b2b\n.text:0000000000402b30\n.text:0000000000402b33\n.text:0000000000402b36\n.text:0000000000402b3b\n.text:0000000000402b3e\n.text:0000000000402b40\n.text:0000000000402b43\n.text:0000000000402b46\n.text:0000000000402b4b\n.text:0000000000402b4d\n.text:0000000000402b4f\n.text:0000000000402b51\n.text:0000000000402b54\n.text:0000000000402b59\n.text:0000000000402b5b\n.text:0000000000402b5d\n.text:0000000000402b61\n.text:0000000000402b66\n.text:0000000000402b6b\n.text:0000000000402b70\n.text:0000000000402b72\n.text:0000000000402b76\n.text:0000000000402b79\n.text:0000000000402b7e\n.text:0000000000402b81\n.text:0000000000402b85\n.text:0000000000402b87\n.text:0000000000402b8e\n.text:0000000000402b8f\n.text:0000000000402b91\n.text:0000000000402b93\n.text:0000000000402b95\n.text:0000000000402b97\n.text:0000000000402b98\n.text:0000000000402b99\n.text:0000000000402b9b\n'
p279
tp280
sS'xstrtoumax'
p281
(S'\n__stdcall xstrtoumax(char * s, char * * ptr, uintmax_t * val, char * valid_suffixes)\n'
p282
V\u000astrtol_error xstrtoumax(char *s,char **ptr,uintmax_t *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  byte *pbVar8;\u000a  strtol_error sVar9;\u000a  strtol_error sVar10;\u000a  long lVar11;\u000a  char *__s;\u000a  char **__endptr;\u000a  uintmax_t local_48;\u000a  uintmax_t *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)");\u000a  }\u000a  local_40 = (uintmax_t *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar8 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar8;\u000a    pbVar8 = pbVar8 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoumax(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar9 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar9 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar9 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar10 = sVar9;\u000a    if (__s == (char *)0x0) goto LAB_00405796;\u000a  }\u000a  pcVar6 = *__endptr;\u000a  sVar10 = sVar9;\u000a  if (*pcVar6 == 0) goto LAB_00405796;\u000a  pcVar7 = strchr(__s,(int)*pcVar6);\u000a  if (pcVar7 == (char *)0x0) goto switchD_004056c5_caseD_43;\u000a  pcVar7 = strchr(__s,0x30);\u000a  if (pcVar7 == (char *)0x0) {\u000aLAB_004056a3:\u000a    lVar11 = 1;\u000a  }\u000a  else {\u000a    cVar2 = pcVar6[1];\u000a    if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a      lVar11 = 2;\u000a    }\u000a    else {\u000a      if (cVar2 != 'i') goto LAB_004056a3;\u000a      lVar11 = (ulong)(pcVar6[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_00405777;\u000a  default:\u000aswitchD_004056c5_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'P':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Y':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Z':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'b':\u000a    goto LAB_00405777;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_00405777:\u000a    sVar3 = bkm_scale(&local_48);\u000a  }\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar10 = sVar3 | sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar10 = sVar3 | sVar9;\u000a  }\u000aLAB_00405796:\u000a  *local_40 = local_48;\u000a  return sVar10;\u000a}\u000a\u000a
p283
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x004057b3\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x00401330\nMOV R15,RAX\nMOV dword ptr [R15],0x0\nCALL 0x00401680\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x004055b0\nTEST RBX,RBX\nLEA R13,[RSP + 0x10]\nCMOVNZ R13,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x004057a2\nMOV RDI,RBP\nMOV RSI,R13\nMOV EDX,R14D\nCALL 0x00401610\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R13]\nCMP RAX,RBP\nJZ 0x00405610\nMOV EAX,dword ptr [R15]\nTEST EAX,EAX\nJZ 0x00405641\nCMP EAX,0x22\nJNZ 0x004057a2\nMOV EBX,0x1\nTEST R12,R12\nJNZ 0x0040564c\nJMP 0x00405796\nTEST R12,R12\nJZ 0x004057a2\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x004057a2\nMOV RDI,R12\nCALL 0x00401420\nTEST RAX,RAX\nJZ 0x004057a2\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x0040564c\nXOR EBX,EBX\nTEST R12,R12\nJZ 0x00405796\nMOV RBP,qword ptr [R13]\nMOVSX ESI,byte ptr [RBP]\nTEST ESI,ESI\nJZ 0x00405796\nMOV RDI,R12\nCALL 0x00401420\nTEST RAX,RAX\nJZ 0x004056de\nMOV ESI,0x30\nMOV RDI,R12\nCALL 0x00401420\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x004056a3\nMOVSX EAX,byte ptr [RBP + 0x1]\nCMP EAX,0x42\nJZ 0x004056aa\nCMP EAX,0x44\nJZ 0x004056aa\nCMP EAX,0x69\nJNZ 0x004056a3\nXOR EAX,EAX\nCMP byte ptr [RBP + 0x2],0x42\nSETZ AL\nLEA RBP,[RAX + RAX*0x1 + 0x1]\nJMP 0x004056b4\nMOV EBP,0x1\nJMP 0x004056b4\nMOV ESI,0x3e8\nMOV EBP,0x2\nMOV RAX,qword ptr [R13]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x004056de\nXOR EAX,EAX\nJMP qword ptr [0x407410 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nCALL 0x00405800\nJMP 0x0040577c\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x004057a2\nMOV RDI,RSP\nMOV EDX,0x1\nCALL 0x00405800\nJMP 0x0040577c\nMOV RDI,RSP\nMOV EDX,0x2\nCALL 0x00405800\nJMP 0x0040577c\nMOV RDI,RSP\nMOV EDX,0x4\nCALL 0x00405800\nJMP 0x0040577c\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x00405777\nMOV RDI,RSP\nMOV EDX,0x6\nCALL 0x00405800\nJMP 0x0040577c\nMOV RDI,RSP\nMOV EDX,0x5\nCALL 0x00405800\nJMP 0x0040577c\nMOV RDI,RSP\nMOV EDX,0x8\nCALL 0x00405800\nJMP 0x0040577c\nMOV RDI,RSP\nMOV EDX,0x7\nCALL 0x00405800\nJMP 0x0040577c\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x00405777\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x004057d0\nOR EAX,EBX\nMOV RCX,qword ptr [R13]\nLEA RDX,[RCX + RBP*0x1]\nMOV qword ptr [R13],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + RBP*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x4075c0\nMOV ESI,0x4075e6\nMOV EDX,0x60\nMOV ECX,0x4075f6\nCALL 0x00401450\n'
p284
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c4\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 2f 02 00 00\n48 89 4c 24 08\ne8 a2 bd ff ff\n49 89 c7\n41 c7 07 00 00 00 00\ne8 e3 c0 ff ff\n48 8b 08\n48 89 ea\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 6c 24 10\n4c 0f 45 eb\nbb 04 00 00 00\n3c 2d\n0f 84 cc 01 00 00\n48 89 ef\n4c 89 ee\n44 89 f2\ne8 2c c0 ff ff\n48 89 04 24\n49 8b 45 00\n48 39 e8\n74 1f\n41 8b 07\n85 c0\n74 49\n83 f8 22\n0f 85 a1 01 00 00\nbb 01 00 00 00\n4d 85 e4\n75 41\ne9 86 01 00 00\n4d 85 e4\n0f 84 89 01 00 00\n0f be 30\n85 f6\n0f 84 7e 01 00 00\n4c 89 e7\ne8 f4 bd ff ff\n48 85 c0\n0f 84 6d 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 e4\n0f 84 4a 01 00 00\n49 8b 6d 00\n0f be 75 00\n85 f6\n0f 84 3a 01 00 00\n4c 89 e7\ne8 bc bd ff ff\n48 85 c0\n74 75\nbe 30 00 00 00\n4c 89 e7\ne8 aa bd ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 45 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7d 02 42\n0f 94 c0\n48 8d 6c 00 01\neb 11\nbd 01 00 00 00\neb 0a\nbe e8 03 00 00\nbd 02 00 00 00\n49 8b 45 00\n0f be 08\n83 c1 be\n83 f9 35\n77 1b\n31 c0\nff 24 cd 10 74 40 00\n48 89 e7\nba 03 00 00 00\ne8 27 01 00 00\ne9 9e 00 00 00\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 b0 00 00 00\n48 89 e7\nba 01 00 00 00\ne8 01 01 00 00\neb 7b\n48 89 e7\nba 02 00 00 00\ne8 f2 00 00 00\neb 6c\n48 89 e7\nba 04 00 00 00\ne8 e3 00 00 00\neb 5d\n48 89 e7\nbe 00 04 00 00\neb 4e\n48 89 e7\nba 06 00 00 00\ne8 ca 00 00 00\neb 44\n48 89 e7\nba 05 00 00 00\ne8 bb 00 00 00\neb 35\n48 89 e7\nba 08 00 00 00\ne8 ac 00 00 00\neb 26\n48 89 e7\nba 07 00 00 00\ne8 9d 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 54 00 00 00\n09 d8\n49 8b 4d 00\n48 8d 14 29\n49 89 55 00\n89 c3\n83 cb 02\n80 3c 29 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf c0 75 40 00\nbe e6 75 40 00\nba 60 00 00 00\nb9 f6 75 40 00\ne8 84 bc ff ff\n'
p285
S'.text:0000000000405560\n.text:0000000000405561\n.text:0000000000405563\n.text:0000000000405565\n.text:0000000000405567\n.text:0000000000405569\n.text:000000000040556a\n.text:000000000040556e\n.text:0000000000405571\n.text:0000000000405574\n.text:0000000000405577\n.text:000000000040557a\n.text:000000000040557e\n.text:0000000000405584\n.text:0000000000405589\n.text:000000000040558e\n.text:0000000000405591\n.text:0000000000405598\n.text:000000000040559d\n.text:00000000004055a0\n.text:00000000004055a3\n.text:00000000004055b0\n.text:00000000004055b3\n.text:00000000004055b6\n.text:00000000004055bb\n.text:00000000004055bd\n.text:00000000004055c0\n.text:00000000004055c5\n.text:00000000004055c9\n.text:00000000004055ce\n.text:00000000004055d0\n.text:00000000004055d6\n.text:00000000004055d9\n.text:00000000004055dc\n.text:00000000004055df\n.text:00000000004055e4\n.text:00000000004055e8\n.text:00000000004055ec\n.text:00000000004055ef\n.text:00000000004055f1\n.text:00000000004055f4\n.text:00000000004055f6\n.text:00000000004055f8\n.text:00000000004055fb\n.text:0000000000405601\n.text:0000000000405606\n.text:0000000000405609\n.text:000000000040560b\n.text:0000000000405610\n.text:0000000000405613\n.text:0000000000405619\n.text:000000000040561c\n.text:000000000040561e\n.text:0000000000405624\n.text:0000000000405627\n.text:000000000040562c\n.text:000000000040562f\n.text:0000000000405635\n.text:000000000040563d\n.text:000000000040563f\n.text:0000000000405641\n.text:0000000000405643\n.text:0000000000405646\n.text:000000000040564c\n.text:0000000000405650\n.text:0000000000405654\n.text:0000000000405656\n.text:000000000040565c\n.text:000000000040565f\n.text:0000000000405664\n.text:0000000000405667\n.text:0000000000405669\n.text:000000000040566e\n.text:0000000000405671\n.text:0000000000405676\n.text:000000000040567b\n.text:000000000040567e\n.text:0000000000405680\n.text:0000000000405684\n.text:0000000000405687\n.text:0000000000405689\n.text:000000000040568c\n.text:000000000040568e\n.text:0000000000405691\n.text:0000000000405693\n.text:0000000000405695\n.text:0000000000405699\n.text:000000000040569c\n.text:00000000004056a1\n.text:00000000004056a3\n.text:00000000004056a8\n.text:00000000004056aa\n.text:00000000004056af\n.text:00000000004056b4\n.text:00000000004056b8\n.text:00000000004056bb\n.text:00000000004056be\n.text:00000000004056c1\n.text:00000000004056c3\n.text:00000000004056c5\n.text:00000000004056cc\n.text:00000000004056cf\n.text:00000000004056d4\n.text:00000000004056d9\n.text:00000000004056de\n.text:00000000004056e2\n.text:00000000004056e7\n.text:00000000004056ea\n.text:00000000004056ed\n.text:00000000004056f2\n.text:00000000004056f5\n.text:00000000004056fa\n.text:00000000004056ff\n.text:0000000000405701\n.text:0000000000405704\n.text:0000000000405709\n.text:000000000040570e\n.text:0000000000405710\n.text:0000000000405713\n.text:0000000000405718\n.text:000000000040571d\n.text:000000000040571f\n.text:0000000000405722\n.text:0000000000405727\n.text:0000000000405729\n.text:000000000040572c\n.text:0000000000405731\n.text:0000000000405736\n.text:0000000000405738\n.text:000000000040573b\n.text:0000000000405740\n.text:0000000000405745\n.text:0000000000405747\n.text:000000000040574a\n.text:000000000040574f\n.text:0000000000405754\n.text:0000000000405756\n.text:0000000000405759\n.text:000000000040575e\n.text:0000000000405763\n.text:0000000000405765\n.text:0000000000405768\n.text:000000000040576d\n.text:000000000040576f\n.text:0000000000405772\n.text:0000000000405777\n.text:000000000040577c\n.text:000000000040577e\n.text:0000000000405782\n.text:0000000000405786\n.text:000000000040578a\n.text:000000000040578c\n.text:000000000040578f\n.text:0000000000405793\n.text:0000000000405796\n.text:000000000040579a\n.text:000000000040579f\n.text:00000000004057a2\n.text:00000000004057a4\n.text:00000000004057a8\n.text:00000000004057a9\n.text:00000000004057ab\n.text:00000000004057ad\n.text:00000000004057af\n.text:00000000004057b1\n.text:00000000004057b2\n.text:00000000004057b3\n.text:00000000004057b8\n.text:00000000004057bd\n.text:00000000004057c2\n.text:00000000004057c7\n'
p286
tp287
sS'rpl_fflush'
p288
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p289
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_0060a130)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p290
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00405e1d\nMOV RDI,RBX\nCALL 0x00401570\nTEST EAX,EAX\nJZ 0x00405e1d\nMOV RDI,RBX\nCALL 0x00405e30\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401530\n'
p291
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 5f b7 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 0a b7 ff ff\n'
p292
S'.text:0000000000405e00\n.text:0000000000405e01\n.text:0000000000405e04\n.text:0000000000405e07\n.text:0000000000405e09\n.text:0000000000405e0c\n.text:0000000000405e11\n.text:0000000000405e13\n.text:0000000000405e15\n.text:0000000000405e18\n.text:0000000000405e1d\n.text:0000000000405e20\n.text:0000000000405e21\n'
p293
tp294
sS'__assert_fail'
p295
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p296
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_0060a0c0)();\u000a  return;\u000a}\u000a\u000a
p297
S'JMP qword ptr [0x0060a0c0]\n'
p298
S'ff 25 6a 8c 20 00\n'
p299
S'.plt:0000000000401450\n'
p300
tp301
sS'setlocale'
p302
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p303
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_0060a170)();\u000a  return pcVar1;\u000a}\u000a\u000a
p304
S'JMP qword ptr [0x0060a170]\n'
p305
S'ff 25 ba 8b 20 00\n'
p306
S'.plt:00000000004015b0\n'
p307
tp308
sS'c_toupper'
p309
(S'\n__stdcall c_toupper()\n'
p310
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p311
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p312
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p313
S'.text:00000000004059d0\n.text:00000000004059d3\n.text:00000000004059d6\n.text:00000000004059d9\n.text:00000000004059dc\n'
p314
tp315
sS'bindtextdomain'
p316
(S'\n__stdcall bindtextdomain()\n'
p317
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_0060a078)();\u000a  return;\u000a}\u000a\u000a
p318
S'JMP qword ptr [0x0060a078]\n'
p319
S'ff 25 b2 8c 20 00\n'
p320
S'.plt:00000000004013c0\n'
p321
tp322
sS'set_char_quoting'
p323
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p324
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p325
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x60a2d0\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p326
S'89 f1\n48 85 ff\nbe d0 a2 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p327
S'.text:0000000000403500\n.text:0000000000403502\n.text:0000000000403505\n.text:000000000040350a\n.text:000000000040350e\n.text:0000000000403510\n.text:0000000000403513\n.text:0000000000403517\n.text:000000000040351c\n.text:000000000040351f\n.text:0000000000403521\n.text:0000000000403523\n.text:0000000000403526\n.text:0000000000403528\n.text:000000000040352b\n.text:000000000040352d\n.text:0000000000403530\n.text:0000000000403535\n'
p328
tp329
sS'quotearg_n'
p330
(S'\n__stdcall quotearg_n(char * arg)\n'
p331
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p332
S'MOV RDX,-0x1\nMOV ECX,0x60a2d0\nJMP 0x004043f0\n'
p333
S'48 c7 c2 ff ff ff ff\nb9 d0 a2 60 00\neb 02\n'
p334
S'.text:00000000004043e0\n.text:00000000004043e7\n.text:00000000004043ec\n'
p335
tp336
sS'mbsinit'
p337
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p338
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_0060a1c8)();\u000a  return iVar1;\u000a}\u000a\u000a
p339
S'JMP qword ptr [0x0060a1c8]\n'
p340
S'ff 25 62 8b 20 00\n'
p341
S'.plt:0000000000401660\n'
p342
tp343
sS'dcgettext'
p344
(S'\n__stdcall dcgettext()\n'
p345
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_0060a080)();\u000a  return;\u000a}\u000a\u000a
p346
S'JMP qword ptr [0x0060a080]\n'
p347
S'ff 25 aa 8c 20 00\n'
p348
S'.plt:00000000004013d0\n'
p349
tp350
sS'close_stream'
p351
(S'\n__stdcall close_stream(FILE * stream)\n'
p352
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p353
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401370\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x004014d0\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00405d80\nTEST EBP,EBP\nJZ 0x00405a1b\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x00405a3f\nCALL 0x00401330\nMOV dword ptr [RAX],0x0\nJMP 0x00405a3f\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x00405a3f\nTEST CL,CL\nJNZ 0x00405a3f\nCALL 0x00401330\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p354
S'55\n41 56\n53\n48 89 fb\ne8 84 b9 ff ff\n49 89 c6\n48 89 df\ne8 d9 ba ff ff\n89 c5\n48 89 df\ne8 7f 03 00 00\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 1d b9 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 fe b8 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p355
S'.text:00000000004059e0\n.text:00000000004059e1\n.text:00000000004059e3\n.text:00000000004059e4\n.text:00000000004059e7\n.text:00000000004059ec\n.text:00000000004059ef\n.text:00000000004059f2\n.text:00000000004059f7\n.text:00000000004059f9\n.text:00000000004059fc\n.text:0000000000405a01\n.text:0000000000405a03\n.text:0000000000405a05\n.text:0000000000405a0a\n.text:0000000000405a0c\n.text:0000000000405a0e\n.text:0000000000405a13\n.text:0000000000405a19\n.text:0000000000405a1b\n.text:0000000000405a1d\n.text:0000000000405a20\n.text:0000000000405a22\n.text:0000000000405a24\n.text:0000000000405a27\n.text:0000000000405a29\n.text:0000000000405a2b\n.text:0000000000405a2d\n.text:0000000000405a32\n.text:0000000000405a34\n.text:0000000000405a37\n.text:0000000000405a3c\n.text:0000000000405a3f\n.text:0000000000405a41\n.text:0000000000405a42\n.text:0000000000405a44\n.text:0000000000405a45\n'
p356
tp357
sS'quotearg_colon_mem'
p358
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p359
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p360
S'MOV EDX,0x3a\nJMP 0x00404700\n'
p361
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p362
S'.text:0000000000404790\n.text:0000000000404795\n'
p363
tp364
sS'full_read'
p365
(S'\n__stdcall full_read(void * buf, size_t count)\n'
p366
V\u000asize_t full_read(void *buf,size_t count)\u000a\u000a{\u000a  size_t sVar1;\u000a  int *piVar2;\u000a  long in_RDX;\u000a  size_t sVar3;\u000a  \u000a  sVar3 = 0;\u000a  if (in_RDX != 0) {\u000a    do {\u000a      sVar1 = safe_read((void *)((ulong)buf & 0xffffffff),count);\u000a      if (sVar1 == 0xffffffffffffffff) {\u000a        return sVar3;\u000a      }\u000a      if (sVar1 == 0) {\u000a        piVar2 = __errno_location();\u000a        *piVar2 = 0;\u000a        return sVar3;\u000a      }\u000a      sVar3 = sVar3 + sVar1;\u000a      count = count + sVar1;\u000a      in_RDX = in_RDX - sVar1;\u000a    } while (in_RDX != 0);\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p367
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R15,RDX\nMOV RBX,RSI\nMOV EBP,EDI\nXOR R14D,R14D\nTEST R15,R15\nJZ 0x004032c0\nNOP word ptr [RAX + RAX*0x1]\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R15\nCALL 0x00404cf0\nCMP RAX,-0x1\nJZ 0x004032c0\nTEST RAX,RAX\nJZ 0x004032b5\nADD R14,RAX\nADD RBX,RAX\nSUB R15,RAX\nJNZ 0x00403290\nJMP 0x004032c0\nCALL 0x00401330\nMOV dword ptr [RAX],0x0\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p368
S'55\n41 57\n41 56\n53\n50\n49 89 d7\n48 89 f3\n89 fd\n45 31 f6\n4d 85 ff\n74 39\n66 0f 1f 84 00 00 00 00 00\n89 ef\n48 89 de\n4c 89 fa\ne8 53 1a 00 00\n48 83 f8 ff\n74 1d\n48 85 c0\n74 0d\n49 01 c6\n48 01 c3\n49 29 c7\n75 dd\neb 0b\ne8 76 e0 ff ff\nc7 00 00 00 00 00\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p369
S'.text:0000000000403270\n.text:0000000000403271\n.text:0000000000403273\n.text:0000000000403275\n.text:0000000000403276\n.text:0000000000403277\n.text:000000000040327a\n.text:000000000040327d\n.text:000000000040327f\n.text:0000000000403282\n.text:0000000000403285\n.text:0000000000403287\n.text:0000000000403290\n.text:0000000000403292\n.text:0000000000403295\n.text:0000000000403298\n.text:000000000040329d\n.text:00000000004032a1\n.text:00000000004032a3\n.text:00000000004032a6\n.text:00000000004032a8\n.text:00000000004032ab\n.text:00000000004032ae\n.text:00000000004032b1\n.text:00000000004032b3\n.text:00000000004032b5\n.text:00000000004032ba\n.text:00000000004032c0\n.text:00000000004032c3\n.text:00000000004032c7\n.text:00000000004032c8\n.text:00000000004032ca\n.text:00000000004032cc\n.text:00000000004032cd\n'
p370
tp371
sS'quotearg_free'
p372
(S'\n__stdcall quotearg_free()\n'
p373
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p374
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x0060a200]\nCMP dword ptr [0x0060a208],0x2\nJC 0x0040438a\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00401310\nINC RBX\nMOV EAX,dword ptr [0x0060a208]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00404370\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x60a310\nCMP RDI,RAX\nJZ 0x004043b3\nCALL 0x00401310\nMOV qword ptr [0x0060a210],0x100\nMOV qword ptr [0x0060a218],0x60a310\nMOV EAX,0x60a210\nCMP R14,RAX\nJZ 0x004043d0\nMOV RDI,R14\nCALL 0x00401310\nMOV qword ptr [0x0060a200],0x60a210\nMOV dword ptr [0x0060a208],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p375
S'41 57\n41 56\n53\n4c 8b 35 a4 5e 20 00\n83 3d a5 5e 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 98 cf ff ff\n48 ff c3\n8b 05 87 5e 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 10 a3 60 00\n48 39 c7\n74 1b\ne8 73 cf ff ff\n48 c7 05 68 5e 20 00 00 01 00 00\n48 c7 05 65 5e 20 00 10 a3 60 00\nb8 10 a2 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 4b cf ff ff\n48 c7 05 30 5e 20 00 10 a2 60 00\nc7 05 2e 5e 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p376
S'.text:0000000000404350\n.text:0000000000404352\n.text:0000000000404354\n.text:0000000000404355\n.text:000000000040435c\n.text:0000000000404363\n.text:0000000000404365\n.text:0000000000404369\n.text:000000000040436e\n.text:0000000000404370\n.text:0000000000404373\n.text:0000000000404378\n.text:000000000040437b\n.text:0000000000404381\n.text:0000000000404385\n.text:0000000000404388\n.text:000000000040438a\n.text:000000000040438e\n.text:0000000000404393\n.text:0000000000404396\n.text:0000000000404398\n.text:000000000040439d\n.text:00000000004043a8\n.text:00000000004043b3\n.text:00000000004043b8\n.text:00000000004043bb\n.text:00000000004043bd\n.text:00000000004043c0\n.text:00000000004043c5\n.text:00000000004043d0\n.text:00000000004043da\n.text:00000000004043db\n.text:00000000004043dd\n.text:00000000004043df\n'
p377
tp378
sS'quotearg_mem'
p379
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p380
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p381
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x004045b0\n'
p382
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p383
S'.text:00000000004045d0\n.text:00000000004045d3\n.text:00000000004045d6\n.text:00000000004045d8\n.text:00000000004045db\n.text:00000000004045de\n'
p384
tp385
sS'xcalloc'
p386
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p387
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p388
S'PUSH RAX\nCALL 0x00405840\nTEST RAX,RAX\nJZ 0x004053cd\nPOP RCX\nRET\nCALL 0x00405430\n'
p389
S'50\ne8 7a 04 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p390
S'.text:00000000004053c0\n.text:00000000004053c1\n.text:00000000004053c6\n.text:00000000004053c9\n.text:00000000004053cb\n.text:00000000004053cc\n.text:00000000004053cd\n'
p391
tp392
sS'deregister_tm_clones'
p393
(S'\n__stdcall deregister_tm_clones()\n'
p394
V\u000a/* WARNING: Removing unreachable block (ram,0x004016d5) */\u000a/* WARNING: Removing unreachable block (ram,0x004016df) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p395
S'MOV EAX,0x60a25f\nPUSH RBP\nSUB RAX,0x60a258\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x004016f0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004016f0\nPOP RBP\nMOV EDI,0x60a258\nJMP RAX\nPOP RBP\nRET\n'
p396
S'b8 5f a2 60 00\n55\n48 2d 58 a2 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 58 a2 60 00\nff e0\n5d\nc3\n'
p397
S'.text:00000000004016c0\n.text:00000000004016c5\n.text:00000000004016c6\n.text:00000000004016cc\n.text:00000000004016d0\n.text:00000000004016d3\n.text:00000000004016d5\n.text:00000000004016da\n.text:00000000004016dd\n.text:00000000004016df\n.text:00000000004016e0\n.text:00000000004016e5\n.text:00000000004016f0\n.text:00000000004016f1\n'
p398
tp399
sS'xnumtoumax'
p400
(S'\n__stdcall xnumtoumax(char * n_str, uintmax_t min, uintmax_t max, char * suffixes, char * err)\n'
p401
V\u000auintmax_t xnumtoumax(char *n_str,uintmax_t min,uintmax_t max,char *suffixes,char *err)\u000a\u000a{\u000a  char *pcVar1;\u000a  strtol_error sVar2;\u000a  char *in_RAX;\u000a  int *piVar3;\u000a  uint *puVar4;\u000a  int iVar5;\u000a  uint uVar6;\u000a  uint uVar7;\u000a  uint in_stack_00000008;\u000a  char *local_38;\u000a  \u000a  local_38 = in_RAX;\u000a  sVar2 = xstrtoumax(n_str,(char **)0x0,(uintmax_t *)(min & 0xffffffff),(char *)&local_38);\u000a  pcVar1 = local_38;\u000a  if (sVar2 == LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW) {\u000a    piVar3 = __errno_location();\u000a    *piVar3 = 0;\u000a  }\u000a  else {\u000a    if (sVar2 == LONGINT_OVERFLOW) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0x4b;\u000a    }\u000a    else {\u000a      if (sVar2 == LONGINT_OK) {\u000a        if ((max <= local_38) && (local_38 <= suffixes)) {\u000a          return (uintmax_t)local_38;\u000a        }\u000a        piVar3 = __errno_location();\u000a        iVar5 = 0x22;\u000a        if ((char *)0x3fffffff < pcVar1) {\u000a          iVar5 = 0x4b;\u000a        }\u000a        *piVar3 = iVar5;\u000a      }\u000a    }\u000a  }\u000a  uVar7 = 1;\u000a  if (in_stack_00000008 != 0) {\u000a    uVar7 = in_stack_00000008;\u000a  }\u000a  puVar4 = (uint *)__errno_location();\u000a  uVar6 = *puVar4;\u000a  if (uVar6 == 0x16) {\u000a    uVar6 = 0;\u000a  }\u000a  quote(n_str);\u000a  error((ulong)uVar7,(ulong)uVar6,"%s: %s");\u000a  return (uintmax_t)local_38;\u000a}\u000a\u000a
p402
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,R9\nMOV R15,RCX\nMOV R12,RDX\nMOV EAX,ESI\nMOV R13,RDI\nMOV RCX,RSP\nXOR ESI,ESI\nMOV EDX,EAX\nCALL 0x00405560\nCMP EAX,0x3\nJZ 0x004054be\nCMP EAX,0x1\nJZ 0x004054cb\nTEST EAX,EAX\nJNZ 0x004054d6\nMOV RBX,qword ptr [RSP]\nCMP RBX,R12\nJC 0x004054a1\nCMP RBX,R15\nJBE 0x00405511\nCALL 0x00401330\nCMP RBX,0x3fffffff\nMOV ECX,0x4b\nMOV EDX,0x22\nCMOVA EDX,ECX\nMOV dword ptr [RAX],EDX\nJMP 0x004054d6\nCALL 0x00401330\nMOV dword ptr [RAX],0x0\nJMP 0x004054d6\nCALL 0x00401330\nMOV dword ptr [RAX],0x4b\nMOV EAX,dword ptr [RSP + 0x40]\nTEST EAX,EAX\nMOV EBP,0x1\nCMOVNZ EBP,EAX\nCALL 0x00401330\nMOV EBX,dword ptr [RAX]\nXOR EAX,EAX\nCMP EBX,0x16\nCMOVZ EBX,EAX\nMOV RDI,R13\nCALL 0x004048e0\nMOV R8,RAX\nMOV EDX,0x40679b\nXOR EAX,EAX\nMOV EDI,EBP\nMOV ESI,EBX\nMOV RCX,R14\nCALL 0x004015d0\nMOV RAX,qword ptr [RSP]\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p403
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 ce\n49 89 cf\n49 89 d4\n89 f0\n49 89 fd\n48 89 e1\n31 f6\n89 c2\ne8 db 00 00 00\n83 f8 03\n74 34\n83 f8 01\n74 3c\n85 c0\n75 43\n48 8b 1c 24\n4c 39 e3\n72 05\n4c 39 fb\n76 70\ne8 8a be ff ff\n48 81 fb ff ff ff 3f\nb9 4b 00 00 00\nba 22 00 00 00\n0f 47 d1\n89 10\neb 18\ne8 6d be ff ff\nc7 00 00 00 00 00\neb 0b\ne8 60 be ff ff\nc7 00 4b 00 00 00\n8b 44 24 40\n85 c0\nbd 01 00 00 00\n0f 45 e8\ne8 47 be ff ff\n8b 18\n31 c0\n83 fb 16\n0f 44 d8\n4c 89 ef\ne8 e5 f3 ff ff\n49 89 c0\nba 9b 67 40 00\n31 c0\n89 ef\n89 de\n4c 89 f1\ne8 bf c0 ff ff\n48 8b 04 24\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p404
S'.text:0000000000405460\n.text:0000000000405461\n.text:0000000000405463\n.text:0000000000405465\n.text:0000000000405467\n.text:0000000000405469\n.text:000000000040546a\n.text:000000000040546b\n.text:000000000040546e\n.text:0000000000405471\n.text:0000000000405474\n.text:0000000000405476\n.text:0000000000405479\n.text:000000000040547c\n.text:000000000040547e\n.text:0000000000405480\n.text:0000000000405485\n.text:0000000000405488\n.text:000000000040548a\n.text:000000000040548d\n.text:000000000040548f\n.text:0000000000405491\n.text:0000000000405493\n.text:0000000000405497\n.text:000000000040549a\n.text:000000000040549c\n.text:000000000040549f\n.text:00000000004054a1\n.text:00000000004054a6\n.text:00000000004054ad\n.text:00000000004054b2\n.text:00000000004054b7\n.text:00000000004054ba\n.text:00000000004054bc\n.text:00000000004054be\n.text:00000000004054c3\n.text:00000000004054c9\n.text:00000000004054cb\n.text:00000000004054d0\n.text:00000000004054d6\n.text:00000000004054da\n.text:00000000004054dc\n.text:00000000004054e1\n.text:00000000004054e4\n.text:00000000004054e9\n.text:00000000004054eb\n.text:00000000004054ed\n.text:00000000004054f0\n.text:00000000004054f3\n.text:00000000004054f6\n.text:00000000004054fb\n.text:00000000004054fe\n.text:0000000000405503\n.text:0000000000405505\n.text:0000000000405507\n.text:0000000000405509\n.text:000000000040550c\n.text:0000000000405511\n.text:0000000000405515\n.text:0000000000405519\n.text:000000000040551a\n.text:000000000040551c\n.text:000000000040551e\n.text:0000000000405520\n.text:0000000000405522\n.text:0000000000405523\n'
p405
tp406
sS'elide_tail_lines_pipe'
p407
(S'\n__stdcall elide_tail_lines_pipe(char * filename, uintmax_t n_elide, off_t current_pos)\n'
p408
V\u000a_Bool elide_tail_lines_pipe(char *filename,uintmax_t n_elide,off_t current_pos)\u000a\u000a{\u000a  long *plVar1;\u000a  uint uVar2;\u000a  long lVar3;\u000a  int __c;\u000a  char *buffer;\u000a  size_t n_bytes;\u000a  void *pvVar4;\u000a  ulong uVar5;\u000a  long lVar6;\u000a  char *__s;\u000a  uint *puVar7;\u000a  undefined8 uVar8;\u000a  char *buffer_00;\u000a  off_t oVar9;\u000a  char cVar10;\u000a  char *in_RCX;\u000a  char *filename_00;\u000a  char *buffer_01;\u000a  undefined uVar11;\u000a  undefined uVar12;\u000a  ulong uVar13;\u000a  \u000a  buffer_01 = (char *)xmalloc(0x2018);\u000a  *(undefined4 *)(buffer_01 + 0x2000) = 0;\u000a  *(undefined4 *)(buffer_01 + 0x2004) = 0;\u000a  *(undefined4 *)(buffer_01 + 0x2008) = 0;\u000a  *(undefined4 *)(buffer_01 + 0x200c) = 0;\u000a  *(undefined8 *)(buffer_01 + 0x2010) = 0;\u000a  buffer_00 = (char *)xmalloc(0x2018);\u000a  uVar13 = 0;\u000a  filename_00 = in_RCX;\u000a  __s = buffer_01;\u000aLAB_004025f0:\u000a  buffer = buffer_00;\u000a  plVar1 = (long *)(buffer + 0x2008);\u000aLAB_0040261e:\u000a  n_bytes = safe_read((void *)(n_elide & 0xffffffff),(size_t)buffer);\u000a  if (1 < n_bytes + 1) {\u000a    if (current_pos == 0) {\u000a      filename_00 = filename_00 + n_bytes;\u000a      xwrite_stdout(buffer,n_bytes);\u000a      goto LAB_0040261e;\u000a    }\u000a    *(size_t *)(buffer + 0x2000) = n_bytes;\u000a    *(undefined4 *)plVar1 = 0;\u000a    *(undefined4 *)(buffer + 0x200c) = 0;\u000a    *(undefined4 *)(buffer + 0x2010) = 0;\u000a    *(undefined4 *)(buffer + 0x2014) = 0;\u000a    __c = 0;\u000a    if (line_end != 0) {\u000a      __c = 10;\u000a    }\u000a    pvVar4 = memchr(buffer,__c,n_bytes);\u000a    lVar3 = *(long *)(buffer + 0x2008);\u000a    while (pvVar4 != (void *)0x0) {\u000a      *plVar1 = lVar3 + 1;\u000a      __c = 0;\u000a      if (line_end != 0) {\u000a        __c = 10;\u000a      }\u000a      pvVar4 = memchr((void *)((long)pvVar4 + 1),__c,\u000a                      (size_t)(buffer + (n_bytes - (long)(void *)((long)pvVar4 + 1))));\u000a      lVar3 = *plVar1;\u000a    }\u000a    uVar13 = uVar13 + lVar3;\u000a    if (*(long *)(__s + 0x2000) + *(size_t *)(buffer + 0x2000) < 0x2000) {\u000a      memcpy(__s + *(long *)(__s + 0x2000),buffer,*(size_t *)(buffer + 0x2000));\u000a      *(long *)(__s + 0x2000) = *(long *)(__s + 0x2000) + *(long *)(buffer + 0x2000);\u000a      *(long *)(__s + 0x2008) = *(long *)(__s + 0x2008) + *(long *)(buffer + 0x2008);\u000a      goto LAB_0040261e;\u000a    }\u000a    *(char **)(__s + 0x2010) = buffer;\u000a    if ((ulong)current_pos < uVar13 - *(long *)(buffer_01 + 0x2008)) {\u000a      filename_00 = filename_00 + *(size_t *)(buffer_01 + 0x2000);\u000a      xwrite_stdout(buffer_01,*(size_t *)(buffer_01 + 0x2000));\u000a      uVar13 = uVar13 - *(long *)(buffer_01 + 0x2008);\u000a      buffer_00 = buffer_01;\u000a      buffer_01 = *(char **)(buffer_01 + 0x2010);\u000a      __s = buffer;\u000a    }\u000a    else {\u000a      buffer_00 = (char *)xmalloc(0x2018);\u000a      __s = buffer;\u000a    }\u000a    goto LAB_004025f0;\u000a  }\u000a  free(buffer);\u000a  if (n_bytes == 0xffffffffffffffff) {\u000a    puVar7 = (uint *)__errno_location();\u000a    uVar2 = *puVar7;\u000a    uVar11 = 0;\u000a    uVar8 = dcgettext(0,"error reading %s",5);\u000a    buffer_00 = quotearg_style((char *)0x4);\u000a    error(0,(ulong)uVar2,uVar8,buffer_00);\u000a    goto joined_r0x004028b2;\u000a  }\u000a  if (*(long *)(__s + 0x2000) != 0) {\u000a    cVar10 = '\u005cn';\u000a    if (line_end == 0) {\u000a      cVar10 = 0;\u000a    }\u000a    if (__s[*(long *)(__s + 0x2000) + -1] != cVar10) {\u000a      *(long *)(__s + 0x2008) = *(long *)(__s + 0x2008) + 1;\u000a      uVar13 = uVar13 + 1;\u000a    }\u000a  }\u000a  uVar5 = uVar13 - *(long *)(buffer_01 + 0x2008);\u000a  buffer_00 = buffer_01;\u000a  while (plVar1 = (long *)(buffer_00 + 0x2008), (ulong)current_pos < uVar5) {\u000a    filename_00 = filename_00 + *(size_t *)(buffer_00 + 0x2000);\u000a    xwrite_stdout(buffer_00,*(size_t *)(buffer_00 + 0x2000));\u000a    uVar13 = uVar13 - *plVar1;\u000a    buffer_00 = *(char **)(buffer_00 + 0x2010);\u000a    uVar5 = uVar13 - *(long *)(buffer_00 + 0x2008);\u000a  }\u000a  if ((ulong)current_pos < uVar13) {\u000a    __s = buffer_00;\u000a    if (uVar13 != current_pos) {\u000a      lVar3 = *(long *)(buffer_00 + 0x2000);\u000a      lVar6 = current_pos - uVar13;\u000a      __s = buffer_00;\u000a      do {\u000a        __c = 0;\u000a        if (line_end != 0) {\u000a          __c = 10;\u000a        }\u000a        pvVar4 = memchr(__s,__c,(size_t)(buffer_00 + (lVar3 - (long)__s)));\u000a        if (pvVar4 == (void *)0x0) {\u000a          __s = (char *)0x0;\u000a          break;\u000a        }\u000a        __s = (char *)((long)pvVar4 + 1);\u000a        *plVar1 = *plVar1 + 1;\u000a        lVar6 = lVar6 + 1;\u000a      } while (lVar6 != 0);\u000a    }\u000a    filename_00 = __s + -(long)buffer_00 + (long)filename_00;\u000a    xwrite_stdout(buffer_00,(size_t)(__s + -(long)buffer_00));\u000a  }\u000a  uVar11 = 1;\u000ajoined_r0x004028b2:\u000a  while (buffer_01 != (char *)0x0) {\u000a    buffer_00 = *(char **)(buffer_01 + 0x2010);\u000a    free(buffer_01);\u000a    buffer_01 = buffer_00;\u000a  }\u000a  uVar12 = uVar11;\u000a  if (-1 < (long)in_RCX) {\u000a    oVar9 = elseek(n_elide & 0xffffffff,filename_00);\u000a    uVar12 = 0;\u000a    if (-1 < oVar9) {\u000a      uVar12 = uVar11;\u000a    }\u000a  }\u000a  return (_Bool)uVar12;\u000a}\u000a\u000a
p409
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RCX\nMOV qword ptr [RSP],RDX\nMOV dword ptr [RSP + 0xc],ESI\nMOV qword ptr [RSP + 0x18],RDI\nMOV EDI,0x2018\nCALL 0x004052a0\nMOV R14,RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [0x2000 + R14],XMM0\nMOV qword ptr [0x2010 + R14],0x0\nMOV EDI,0x2018\nCALL 0x004052a0\nXOR R13D,R13D\nMOV R12,R14\nMOV qword ptr [RSP + 0x10],RBX\nJMP 0x004025f0\nMOV EDI,0x2018\nCALL 0x004052a0\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV qword ptr [RSP + 0x20],R14\nMOV R14,RAX\nLEA R15,[0x2008 + R14]\nJMP 0x0040261e\nADD RBX,RBP\nMOV RDI,R14\nMOV RSI,RBP\nCALL 0x00402ba0\nMOV EDX,0x2000\nMOV EDI,dword ptr [RSP + 0xc]\nMOV RSI,R14\nCALL 0x00404cf0\nMOV RBP,RAX\nLEA RAX,[RBP + 0x1]\nCMP RAX,0x2\nJC 0x0040275a\nCMP qword ptr [RSP],0x0\nJZ 0x00402610\nMOV qword ptr [0x2000 + R14],RBP\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R15],XMM0\nMOV AL,byte ptr [0x0060a2ab]\nTEST AL,AL\nMOV ESI,0x0\nMOV EAX,0xa\nCMOVNZ ESI,EAX\nMOV RDI,R14\nMOV RDX,RBP\nCALL 0x00401490\nTEST RAX,RAX\nMOV RCX,qword ptr [0x2008 + R14]\nJZ 0x004026c5\nADD RBP,R14\nNOP word ptr CS:[RAX + RAX*0x1]\nINC RAX\nINC RCX\nMOV qword ptr [R15],RCX\nMOVZX ECX,byte ptr [0x0060a2ab]\nTEST CL,CL\nMOV ESI,0x0\nMOV ECX,0xa\nCMOVNZ ESI,ECX\nMOV RDX,RBP\nSUB RDX,RAX\nMOV RDI,RAX\nCALL 0x00401490\nMOV RCX,qword ptr [R15]\nTEST RAX,RAX\nJNZ 0x00402690\nADD R13,RCX\nMOV RDX,qword ptr [0x2000 + R14]\nMOV RBP,qword ptr [RSP + 0x20]\nMOV RDI,qword ptr [0x2000 + RBP]\nLEA RAX,[RDI + RDX*0x1]\nCMP RAX,0x1fff\nJA 0x00402713\nADD RDI,RBP\nMOV RSI,R14\nCALL 0x00401500\nMOV RAX,qword ptr [0x2000 + R14]\nADD qword ptr [0x2000 + RBP],RAX\nMOV RAX,qword ptr [0x2008 + R14]\nADD qword ptr [0x2008 + RBP],RAX\nJMP 0x0040261e\nMOV qword ptr [0x2010 + RBP],R14\nMOV RAX,R13\nSUB RAX,qword ptr [0x2008 + R12]\nCMP RAX,qword ptr [RSP]\nJBE 0x004025d8\nMOV RSI,qword ptr [0x2000 + R12]\nADD RBX,RSI\nMOV RDI,R12\nCALL 0x00402ba0\nSUB R13,qword ptr [0x2008 + R12]\nMOV RAX,R12\nMOV R12,qword ptr [0x2010 + R12]\nJMP 0x004025f0\nMOV RDI,R14\nCALL 0x00401310\nCMP RBP,-0x1\nJZ 0x00402867\nMOV RSI,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [0x2000 + RSI]\nTEST RAX,RAX\nJZ 0x004027a2\nMOVSX EAX,byte ptr [RSI + RAX*0x1 + -0x1]\nMOV CL,byte ptr [0x0060a2ab]\nXOR EDX,EDX\nTEST CL,CL\nMOV ECX,0xa\nCMOVZ ECX,EDX\nCMP EAX,ECX\nJZ 0x004027a2\nINC qword ptr [0x2008 + RSI]\nINC R13\nMOV R14,qword ptr [RSP]\nLEA RBP,[0x2008 + R12]\nMOV RAX,R13\nSUB RAX,qword ptr [0x2008 + R12]\nMOV R15,R12\nCMP RAX,R14\nJBE 0x00402803\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RSI,qword ptr [0x2000 + R15]\nADD RBX,RSI\nMOV RDI,R15\nCALL 0x00402ba0\nSUB R13,qword ptr [RBP]\nMOV R15,qword ptr [0x2010 + R15]\nLEA RBP,[0x2008 + R15]\nMOV RAX,R13\nSUB RAX,qword ptr [0x2008 + R15]\nCMP RAX,R14\nJA 0x004027d0\nCMP R13,R14\nJBE 0x004028ce\nJZ 0x004028b6\nMOV RAX,R14\nMOV R14,qword ptr [0x2000 + R15]\nADD R14,R15\nSUB RAX,R13\nMOV R13,RAX\nMOV RAX,R15\nNOP dword ptr [RAX + RAX*0x1]\nMOVZX ECX,byte ptr [0x0060a2ab]\nTEST CL,CL\nMOV ESI,0x0\nMOV ECX,0xa\nCMOVNZ ESI,ECX\nMOV RDX,R14\nSUB RDX,RAX\nMOV RDI,RAX\nCALL 0x00401490\nTEST RAX,RAX\nJZ 0x004028bb\nINC RAX\nINC qword ptr [RBP]\nINC R13\nJNZ 0x00402830\nJMP 0x004028bd\nCALL 0x00401330\nMOV R15D,dword ptr [RAX]\nXOR R13D,R13D\nXOR EDI,EDI\nMOV ESI,0x406aa5\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RBP,RAX\nMOV EDI,0x4\nMOV R14,qword ptr [RSP + 0x18]\nMOV RSI,R14\nCALL 0x004046c0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,RBP\nCALL 0x004015d0\nMOV R15,qword ptr [RSP + 0x10]\nTEST R12,R12\nJNZ 0x004028e0\nJMP 0x004028f8\nMOV RAX,R15\nJMP 0x004028bd\nXOR EAX,EAX\nSUB RAX,R15\nADD RBX,RAX\nMOV RDI,R15\nMOV RSI,RAX\nCALL 0x00402ba0\nMOV R14,qword ptr [RSP + 0x18]\nMOV R15,qword ptr [RSP + 0x10]\nMOV R13B,0x1\nTEST R12,R12\nJZ 0x004028f8\nMOV RBP,qword ptr [0x2010 + R12]\nMOV RDI,R12\nCALL 0x00401310\nTEST RBP,RBP\nMOV R12,RBP\nJNZ 0x004028e0\nTEST R15,R15\nJS 0x0040291b\nXOR EBP,EBP\nXOR EDX,EDX\nMOV EDI,dword ptr [RSP + 0xc]\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x004021b0\nTEST RAX,RAX\nJS 0x00402918\nMOV BPL,R13B\nMOV R13B,BPL\nAND R13B,0x1\nMOV EAX,R13D\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p410
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 cb\n48 89 14 24\n89 74 24 0c\n48 89 7c 24 18\nbf 18 20 00 00\ne8 f8 2c 00 00\n49 89 c6\n0f 57 c0\n41 0f 11 86 00 20 00 00\n49 c7 86 10 20 00 00 00 00 00 00\nbf 18 20 00 00\ne8 d5 2c 00 00\n45 31 ed\n4d 89 f4\n48 89 5c 24 10\neb 18\nbf 18 20 00 00\ne8 be 2c 00 00\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 74 24 20\n49 89 c6\n4d 8d be 08 20 00 00\neb 1d\n48 01 eb\n4c 89 f7\n48 89 ee\ne8 82 05 00 00\nba 00 20 00 00\n8b 7c 24 0c\n4c 89 f6\ne8 c1 26 00 00\n48 89 c5\n48 8d 45 01\n48 83 f8 02\n0f 82 1a 01 00 00\n48 83 3c 24 00\n74 c9\n49 89 ae 00 20 00 00\n0f 57 c0\n41 0f 11 07\n8a 05 50 7c 20 00\n84 c0\nbe 00 00 00 00\nb8 0a 00 00 00\n0f 45 f0\n4c 89 f7\n48 89 ea\ne8 1b ee ff ff\n48 85 c0\n49 8b 8e 08 20 00 00\n74 44\n4c 01 f5\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 ff c0\n48 ff c1\n49 89 0f\n0f b6 0d 0b 7c 20 00\n84 c9\nbe 00 00 00 00\nb9 0a 00 00 00\n0f 45 f1\n48 89 ea\n48 29 c2\n48 89 c7\ne8 d3 ed ff ff\n49 8b 0f\n48 85 c0\n75 cb\n49 01 cd\n49 8b 96 00 20 00 00\n48 8b 6c 24 20\n48 8b bd 00 20 00 00\n48 8d 04 17\n48 3d ff 1f 00 00\n77 2c\n48 01 ef\n4c 89 f6\ne8 0e ee ff ff\n49 8b 86 00 20 00 00\n48 01 85 00 20 00 00\n49 8b 86 08 20 00 00\n48 01 85 08 20 00 00\ne9 0b ff ff ff\n4c 89 b5 10 20 00 00\n4c 89 e8\n49 2b 84 24 08 20 00 00\n48 3b 04 24\n0f 86 a9 fe ff ff\n49 8b b4 24 00 20 00 00\n48 01 f3\n4c 89 e7\ne8 5e 04 00 00\n4d 2b ac 24 08 20 00 00\n4c 89 e0\n4d 8b a4 24 10 20 00 00\ne9 96 fe ff ff\n4c 89 f7\ne8 ae eb ff ff\n48 83 fd ff\n0f 84 fb 00 00 00\n48 8b 74 24 20\n48 8b 86 00 20 00 00\n48 85 c0\n74 25\n0f be 44 06 ff\n8a 0d 23 7b 20 00\n31 d2\n84 c9\nb9 0a 00 00 00\n0f 44 ca\n39 c8\n74 0a\n48 ff 86 08 20 00 00\n49 ff c5\n4c 8b 34 24\n49 8d ac 24 08 20 00 00\n4c 89 e8\n49 2b 84 24 08 20 00 00\n4d 89 e7\n4c 39 f0\n76 42\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 8b b7 00 20 00 00\n48 01 f3\n4c 89 ff\ne8 be 03 00 00\n4c 2b 6d 00\n4d 8b bf 10 20 00 00\n49 8d af 08 20 00 00\n4c 89 e8\n49 2b 87 08 20 00 00\n4c 39 f0\n77 cd\n4d 39 f5\n0f 86 c2 00 00 00\n0f 84 a4 00 00 00\n4c 89 f0\n4d 8b b7 00 20 00 00\n4d 01 fe\n4c 29 e8\n49 89 c5\n4c 89 f8\n0f 1f 84 00 00 00 00 00\n0f b6 0d 74 7a 20 00\n84 c9\nbe 00 00 00 00\nb9 0a 00 00 00\n0f 45 f1\n4c 89 f2\n48 29 c2\n48 89 c7\ne8 3c ec ff ff\n48 85 c0\n74 62\n48 ff c0\n48 ff 45 00\n49 ff c5\n75 cb\neb 56\ne8 c4 ea ff ff\n44 8b 38\n45 31 ed\n31 ff\nbe a5 6a 40 00\nba 05 00 00 00\ne8 4d eb ff ff\n48 89 c5\nbf 04 00 00 00\n4c 8b 74 24 18\n4c 89 f6\ne8 28 1e 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 fe\n48 89 ea\ne8 26 ed ff ff\n4c 8b 7c 24 10\n4d 85 e4\n75 2c\neb 42\n4c 89 f8\neb 02\n31 c0\n4c 29 f8\n48 01 c3\n4c 89 ff\n48 89 c6\ne8 d2 02 00 00\n4c 8b 74 24 18\n4c 8b 7c 24 10\n41 b5 01\n4d 85 e4\n74 18\n49 8b ac 24 10 20 00 00\n4c 89 e7\ne8 20 ea ff ff\n48 85 ed\n49 89 ec\n75 e8\n4d 85 ff\n78 1e\n31 ed\n31 d2\n8b 7c 24 0c\n48 89 de\n4c 89 f1\ne8 a0 f8 ff ff\n48 85 c0\n78 03\n44 88 ed\n41 88 ed\n41 80 e5 01\n44 89 e8\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p411
S'.text:0000000000402580\n.text:0000000000402581\n.text:0000000000402583\n.text:0000000000402585\n.text:0000000000402587\n.text:0000000000402589\n.text:000000000040258a\n.text:000000000040258e\n.text:0000000000402591\n.text:0000000000402595\n.text:0000000000402599\n.text:000000000040259e\n.text:00000000004025a3\n.text:00000000004025a8\n.text:00000000004025ab\n.text:00000000004025ae\n.text:00000000004025b6\n.text:00000000004025c1\n.text:00000000004025c6\n.text:00000000004025cb\n.text:00000000004025ce\n.text:00000000004025d1\n.text:00000000004025d6\n.text:00000000004025d8\n.text:00000000004025dd\n.text:00000000004025e2\n.text:00000000004025f0\n.text:00000000004025f5\n.text:00000000004025f8\n.text:00000000004025ff\n.text:0000000000402610\n.text:0000000000402613\n.text:0000000000402616\n.text:0000000000402619\n.text:000000000040261e\n.text:0000000000402623\n.text:0000000000402627\n.text:000000000040262a\n.text:000000000040262f\n.text:0000000000402632\n.text:0000000000402636\n.text:000000000040263a\n.text:0000000000402640\n.text:0000000000402645\n.text:0000000000402647\n.text:000000000040264e\n.text:0000000000402651\n.text:0000000000402655\n.text:000000000040265b\n.text:000000000040265d\n.text:0000000000402662\n.text:0000000000402667\n.text:000000000040266a\n.text:000000000040266d\n.text:0000000000402670\n.text:0000000000402675\n.text:0000000000402678\n.text:000000000040267f\n.text:0000000000402681\n.text:0000000000402684\n.text:0000000000402690\n.text:0000000000402693\n.text:0000000000402696\n.text:0000000000402699\n.text:00000000004026a0\n.text:00000000004026a2\n.text:00000000004026a7\n.text:00000000004026ac\n.text:00000000004026af\n.text:00000000004026b2\n.text:00000000004026b5\n.text:00000000004026b8\n.text:00000000004026bd\n.text:00000000004026c0\n.text:00000000004026c3\n.text:00000000004026c5\n.text:00000000004026c8\n.text:00000000004026cf\n.text:00000000004026d4\n.text:00000000004026db\n.text:00000000004026df\n.text:00000000004026e5\n.text:00000000004026e7\n.text:00000000004026ea\n.text:00000000004026ed\n.text:00000000004026f2\n.text:00000000004026f9\n.text:0000000000402700\n.text:0000000000402707\n.text:000000000040270e\n.text:0000000000402713\n.text:000000000040271a\n.text:000000000040271d\n.text:0000000000402725\n.text:0000000000402729\n.text:000000000040272f\n.text:0000000000402737\n.text:000000000040273a\n.text:000000000040273d\n.text:0000000000402742\n.text:000000000040274a\n.text:000000000040274d\n.text:0000000000402755\n.text:000000000040275a\n.text:000000000040275d\n.text:0000000000402762\n.text:0000000000402766\n.text:000000000040276c\n.text:0000000000402771\n.text:0000000000402778\n.text:000000000040277b\n.text:000000000040277d\n.text:0000000000402782\n.text:0000000000402788\n.text:000000000040278a\n.text:000000000040278c\n.text:0000000000402791\n.text:0000000000402794\n.text:0000000000402796\n.text:0000000000402798\n.text:000000000040279f\n.text:00000000004027a2\n.text:00000000004027a6\n.text:00000000004027ae\n.text:00000000004027b1\n.text:00000000004027b9\n.text:00000000004027bc\n.text:00000000004027bf\n.text:00000000004027c1\n.text:00000000004027d0\n.text:00000000004027d7\n.text:00000000004027da\n.text:00000000004027dd\n.text:00000000004027e2\n.text:00000000004027e6\n.text:00000000004027ed\n.text:00000000004027f4\n.text:00000000004027f7\n.text:00000000004027fe\n.text:0000000000402801\n.text:0000000000402803\n.text:0000000000402806\n.text:000000000040280c\n.text:0000000000402812\n.text:0000000000402815\n.text:000000000040281c\n.text:000000000040281f\n.text:0000000000402822\n.text:0000000000402825\n.text:0000000000402828\n.text:0000000000402830\n.text:0000000000402837\n.text:0000000000402839\n.text:000000000040283e\n.text:0000000000402843\n.text:0000000000402846\n.text:0000000000402849\n.text:000000000040284c\n.text:000000000040284f\n.text:0000000000402854\n.text:0000000000402857\n.text:0000000000402859\n.text:000000000040285c\n.text:0000000000402860\n.text:0000000000402863\n.text:0000000000402865\n.text:0000000000402867\n.text:000000000040286c\n.text:000000000040286f\n.text:0000000000402872\n.text:0000000000402874\n.text:0000000000402879\n.text:000000000040287e\n.text:0000000000402883\n.text:0000000000402886\n.text:000000000040288b\n.text:0000000000402890\n.text:0000000000402893\n.text:0000000000402898\n.text:000000000040289b\n.text:000000000040289d\n.text:000000000040289f\n.text:00000000004028a2\n.text:00000000004028a5\n.text:00000000004028aa\n.text:00000000004028af\n.text:00000000004028b2\n.text:00000000004028b4\n.text:00000000004028b6\n.text:00000000004028b9\n.text:00000000004028bb\n.text:00000000004028bd\n.text:00000000004028c0\n.text:00000000004028c3\n.text:00000000004028c6\n.text:00000000004028c9\n.text:00000000004028ce\n.text:00000000004028d3\n.text:00000000004028d8\n.text:00000000004028db\n.text:00000000004028de\n.text:00000000004028e0\n.text:00000000004028e8\n.text:00000000004028eb\n.text:00000000004028f0\n.text:00000000004028f3\n.text:00000000004028f6\n.text:00000000004028f8\n.text:00000000004028fb\n.text:00000000004028fd\n.text:00000000004028ff\n.text:0000000000402901\n.text:0000000000402905\n.text:0000000000402908\n.text:000000000040290b\n.text:0000000000402910\n.text:0000000000402913\n.text:0000000000402915\n.text:0000000000402918\n.text:000000000040291b\n.text:000000000040291f\n.text:0000000000402922\n.text:0000000000402926\n.text:0000000000402927\n.text:0000000000402929\n.text:000000000040292b\n.text:000000000040292d\n.text:000000000040292f\n.text:0000000000402930\n'
p412
tp413
sS'clear_ungetc_buffer_preserving_position'
p414
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p415
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p416
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00405e37\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00405e50\n'
p417
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p418
S'.text:0000000000405e30\n.text:0000000000405e34\n.text:0000000000405e36\n.text:0000000000405e37\n.text:0000000000405e39\n.text:0000000000405e3e\n'
p419
tp420
sS'xnmalloc'
p421
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p422
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p423
S'MOV RAX,RDI\nMUL RSI\nJO 0x00405291\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x004052a0\nPUSH RAX\nCALL 0x00405430\n'
p424
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p425
S'.text:0000000000405280\n.text:0000000000405283\n.text:0000000000405286\n.text:0000000000405288\n.text:000000000040528c\n.text:000000000040528f\n.text:0000000000405291\n.text:0000000000405292\n'
p426
tp427
sS'quotearg_custom'
p428
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p429
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p430
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x004047f0\n'
p431
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p432
S'.text:0000000000404870\n.text:0000000000404873\n.text:0000000000404876\n.text:0000000000404879\n.text:000000000040487b\n.text:000000000040487e\n.text:0000000000404881\n.text:0000000000404884\n'
p433
tp434
sS'free'
p435
(S'\n__stdcall free(void * __ptr)\n'
p436
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_0060a020)();\u000a  return;\u000a}\u000a\u000a
p437
S'JMP qword ptr [0x0060a020]\n'
p438
S'ff 25 0a 8d 20 00\n'
p439
S'.plt:0000000000401310\n'
p440
tp441
sS'close'
p442
(S'\n__stdcall close(int __fd)\n'
p443
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_0060a0d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p444
S'JMP qword ptr [0x0060a0d8]\n'
p445
S'ff 25 52 8c 20 00\n'
p446
S'.plt:0000000000401480\n'
p447
tp448
sS'getenv'
p449
(S'\n__stdcall getenv(char * __name)\n'
p450
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_0060a018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p451
S'JMP qword ptr [0x0060a018]\n'
p452
S'ff 25 12 8d 20 00\n'
p453
S'.plt:0000000000401300\n'
p454
tp455
sS'quotearg_char'
p456
(S'\n__stdcall quotearg_char(char * arg)\n'
p457
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p458
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00404700\n'
p459
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p460
S'.text:0000000000404770\n.text:0000000000404772\n.text:0000000000404779\n.text:000000000040477b\n'
p461
tp462
sS'malloc'
p463
(S'\n__stdcall malloc(size_t __size)\n'
p464
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_0060a128)();\u000a  return pvVar1;\u000a}\u000a\u000a
p465
S'JMP qword ptr [0x0060a128]\n'
p466
S'ff 25 02 8c 20 00\n'
p467
S'.plt:0000000000401520\n'
p468
tp469
sS'c_tolower'
p470
(S'\n__stdcall c_tolower()\n'
p471
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p472
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p473
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p474
S'.text:00000000004059c0\n.text:00000000004059c3\n.text:00000000004059c6\n.text:00000000004059c9\n.text:00000000004059cc\n'
p475
tp476
sS'rpl_fseeko'
p477
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p478
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_0060a198)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p479
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00405e78\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00405e78\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x00405e8a\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401600\nMOV RDI,RBX\nCALL 0x00401510\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00401440\nCMP RAX,-0x1\nJZ 0x00405eb3\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x00405eb8\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p480
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 76 b7 ff ff\n48 89 df\ne8 7e b6 ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 a1 b5 ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p481
S'.text:0000000000405e50\n.text:0000000000405e51\n.text:0000000000405e53\n.text:0000000000405e54\n.text:0000000000405e57\n.text:0000000000405e5a\n.text:0000000000405e5d\n.text:0000000000405e61\n.text:0000000000405e65\n.text:0000000000405e67\n.text:0000000000405e6b\n.text:0000000000405e6f\n.text:0000000000405e71\n.text:0000000000405e76\n.text:0000000000405e78\n.text:0000000000405e7b\n.text:0000000000405e7e\n.text:0000000000405e81\n.text:0000000000405e82\n.text:0000000000405e84\n.text:0000000000405e85\n.text:0000000000405e8a\n.text:0000000000405e8d\n.text:0000000000405e92\n.text:0000000000405e94\n.text:0000000000405e97\n.text:0000000000405e9a\n.text:0000000000405e9f\n.text:0000000000405ea3\n.text:0000000000405ea5\n.text:0000000000405ea8\n.text:0000000000405eaf\n.text:0000000000405eb1\n.text:0000000000405eb3\n.text:0000000000405eb8\n.text:0000000000405eb9\n.text:0000000000405ebb\n.text:0000000000405ebc\n'
p482
tp483
sS'getopt_long'
p484
(S'\n__stdcall getopt_long()\n'
p485
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_0060a098)();\u000a  return;\u000a}\u000a\u000a
p486
S'JMP qword ptr [0x0060a098]\n'
p487
S'ff 25 92 8c 20 00\n'
p488
S'.plt:0000000000401400\n'
p489
tp490
sS'quote_n_mem'
p491
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p492
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p493
S'MOV ECX,0x60a220\nJMP 0x004043f0\n'
p494
S'b9 20 a2 60 00\ne9 36 fb ff ff\n'
p495
S'.text:00000000004048b0\n.text:00000000004048b5\n'
p496
tp497
sS'xstrdup'
p498
(S'\n__stdcall xstrdup(char * string)\n'
p499
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p500
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004013f0\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x004053e0\n'
p501
S'53\n48 89 fb\ne8 d7 bf ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p502
S'.text:0000000000405410\n.text:0000000000405411\n.text:0000000000405414\n.text:0000000000405419\n.text:000000000040541d\n.text:0000000000405420\n.text:0000000000405421\n'
p503
tp504
sS'c_ispunct'
p505
(S'\n__stdcall c_ispunct()\n'
p506
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p507
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00405962\nMOV AL,0x1\nJMP qword ptr [0x407648 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p508
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 48 76 40 00\nc3\n31 c0\nc3\n'
p509
S'.text:0000000000405950\n.text:0000000000405953\n.text:0000000000405956\n.text:0000000000405958\n.text:000000000040595a\n.text:0000000000405961\n.text:0000000000405962\n.text:0000000000405964\n'
p510
tp511
sS'fstat'
p512
(S'\n__stdcall fstat(int __fd, stat * __buf)\n'
p513
V\u000aint fstat(int __fd,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___fxstat_0060a148)(1,(ulong)(uint)__fd,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p514
S'MOV RDX,RSI\nMOV ESI,EDI\nMOV EDI,0x1\nJMP 0x00401560\n'
p515
S'48 89 f2\n89 fe\nbf 01 00 00 00\ne9 e1 b5 ff ff\n'
p516
S'.text:0000000000405f70\n.text:0000000000405f73\n.text:0000000000405f75\n.text:0000000000405f7a\n'
p517
tp518
sS'quotearg_style'
p519
(S'\n__stdcall quotearg_style(char * arg)\n'
p520
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p521
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x004045e0\n'
p522
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p523
S'.text:00000000004046c0\n.text:00000000004046c3\n.text:00000000004046c5\n.text:00000000004046c7\n.text:00000000004046c9\n.text:00000000004046cc\n'
p524
tp525
sS'fscanf'
p526
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p527
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_0060a0d0)();\u000a  return iVar1;\u000a}\u000a\u000a
p528
S'JMP qword ptr [0x0060a0d0]\n'
p529
S'ff 25 5a 8c 20 00\n'
p530
S'.plt:0000000000401470\n'
p531
tp532
sS'emit_try_help'
p533
(S'\n__stdcall emit_try_help()\n'
p534
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p535
S'PUSH RBX\nMOV RBX,qword ptr [0x0060a2a0]\nXOR EDI,EDI\nMOV ESI,0x4067ba\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060a2c0]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401650\n'
p536
S'53\n48 8b 1d b8 89 20 00\n31 ff\nbe ba 67 40 00\nba 05 00 00 00\ne8 d7 fa ff ff\n48 89 c2\n48 8b 0d bd 89 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 3d fd ff ff\n'
p537
S'.text:00000000004018e0\n.text:00000000004018e1\n.text:00000000004018e8\n.text:00000000004018ea\n.text:00000000004018ef\n.text:00000000004018f4\n.text:00000000004018f9\n.text:00000000004018fc\n.text:0000000000401903\n.text:0000000000401908\n.text:000000000040190a\n.text:000000000040190d\n.text:000000000040190e\n'
p538
tp539
sS'memcpy'
p540
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p541
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_0060a118)();\u000a  return pvVar1;\u000a}\u000a\u000a
p542
S'JMP qword ptr [0x0060a118]\n'
p543
S'ff 25 12 8c 20 00\n'
p544
S'.plt:0000000000401500\n'
p545
tp546
sS'strrchr'
p547
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p548
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_0060a0b0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p549
S'JMP qword ptr [0x0060a0b0]\n'
p550
S'ff 25 7a 8c 20 00\n'
p551
S'.plt:0000000000401430\n'
p552
tp553
sS'close_stdout_set_ignore_EPIPE'
p554
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p555
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p556
S'MOV byte ptr [0x0060a2b8],DIL\nRET\n'
p557
S'40 88 3d 11 71 20 00\nc3\n'
p558
S'.text:00000000004031a0\n.text:00000000004031a7\n'
p559
tp560
sS'quotearg_alloc_mem'
p561
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p562
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p563
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x60a2d0\nCMOVNZ R12,RCX\nCALL 0x00401330\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00403610\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00405370\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00403610\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x0040433a\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p564
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc d0 a2 60 00\n4c 0f 45 e1\ne8 98 d0 ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 81 10 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p565
S'.text:0000000000404260\n.text:0000000000404261\n.text:0000000000404263\n.text:0000000000404265\n.text:0000000000404267\n.text:0000000000404269\n.text:000000000040426a\n.text:000000000040426e\n.text:0000000000404271\n.text:0000000000404276\n.text:0000000000404279\n.text:000000000040427e\n.text:0000000000404281\n.text:0000000000404286\n.text:0000000000404289\n.text:000000000040428f\n.text:0000000000404293\n.text:0000000000404298\n.text:000000000040429d\n.text:000000000040429f\n.text:00000000004042a3\n.text:00000000004042a5\n.text:00000000004042a8\n.text:00000000004042ac\n.text:00000000004042b1\n.text:00000000004042b5\n.text:00000000004042ba\n.text:00000000004042be\n.text:00000000004042c0\n.text:00000000004042c2\n.text:00000000004042c5\n.text:00000000004042c8\n.text:00000000004042cb\n.text:00000000004042d0\n.text:00000000004042d5\n.text:00000000004042d7\n.text:00000000004042dc\n.text:00000000004042e0\n.text:00000000004042e3\n.text:00000000004042e7\n.text:00000000004042ea\n.text:00000000004042ef\n.text:00000000004042f2\n.text:00000000004042f6\n.text:00000000004042fa\n.text:00000000004042fd\n.text:0000000000404300\n.text:0000000000404305\n.text:000000000040430a\n.text:000000000040430d\n.text:0000000000404312\n.text:0000000000404317\n.text:0000000000404319\n.text:000000000040431e\n.text:0000000000404323\n.text:0000000000404327\n.text:000000000040432a\n.text:000000000040432e\n.text:0000000000404333\n.text:0000000000404335\n.text:0000000000404337\n.text:000000000040433a\n.text:000000000040433d\n.text:0000000000404341\n.text:0000000000404342\n.text:0000000000404344\n.text:0000000000404346\n.text:0000000000404348\n.text:000000000040434a\n.text:000000000040434b\n'
p566
tp567
sS'iswprint'
p568
(S'\n__stdcall iswprint(wint_t __wc)\n'
p569
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_0060a1d0)();\u000a  return iVar1;\u000a}\u000a\u000a
p570
S'JMP qword ptr [0x0060a1d0]\n'
p571
S'ff 25 5a 8b 20 00\n'
p572
S'.plt:0000000000401670\n'
p573
tp574
sS'bkm_scale'
p575
(S'\n__stdcall bkm_scale(uintmax_t * x)\n'
p576
V\u000astrtol_error bkm_scale(uintmax_t *x)\u000a\u000a{\u000a  ulong uVar1;\u000a  uintmax_t uVar2;\u000a  int in_ESI;\u000a  bool bVar3;\u000a  \u000a  uVar1 = *x;\u000a  uVar2 = (long)in_ESI * uVar1;\u000a  bVar3 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816((ulong)(long)in_ESI),0\u000a                ) < uVar1;\u000a  if (bVar3) {\u000a    uVar2 = 0xffffffffffffffff;\u000a  }\u000a  *x = uVar2;\u000a  return -(uint)bVar3 & LONGINT_OVERFLOW;\u000a}\u000a\u000a
p577
S'MOVSXD RCX,ESI\nMOV RSI,-0x1\nMOV RAX,-0x1\nXOR EDX,EDX\nDIV RCX\nMOV RDX,qword ptr [RDI]\nIMUL RCX,RDX\nCMP RAX,RDX\nCMOVC RCX,RSI\nSBB EAX,EAX\nAND EAX,0x1\nMOV qword ptr [RDI],RCX\nRET\n'
p578
S'48 63 ce\n48 c7 c6 ff ff ff ff\n48 c7 c0 ff ff ff ff\n31 d2\n48 f7 f1\n48 8b 17\n48 0f af ca\n48 39 d0\n48 0f 42 ce\n19 c0\n83 e0 01\n48 89 0f\nc3\n'
p579
S'.text:00000000004057d0\n.text:00000000004057d3\n.text:00000000004057da\n.text:00000000004057e1\n.text:00000000004057e3\n.text:00000000004057e6\n.text:00000000004057e9\n.text:00000000004057ed\n.text:00000000004057f0\n.text:00000000004057f4\n.text:00000000004057f6\n.text:00000000004057f9\n.text:00000000004057fc\n'
p580
tp581
sS'memchr'
p582
(S'\n__stdcall memchr(void * __s, int __c, size_t __n)\n'
p583
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memchr(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memchr_0060a0e0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p584
S'JMP qword ptr [0x0060a0e0]\n'
p585
S'ff 25 4a 8c 20 00\n'
p586
S'.plt:0000000000401490\n'
p587
tp588
sS'quotearg_style_mem'
p589
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p590
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p591
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00404680\n'
p592
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p593
S'.text:00000000004046e0\n.text:00000000004046e3\n.text:00000000004046e6\n.text:00000000004046e8\n.text:00000000004046ea\n.text:00000000004046ec\n.text:00000000004046ef\n.text:00000000004046f2\n'
p594
tp595
sS'xalloc_die'
p596
(S'\n__stdcall xalloc_die()\n'
p597
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x40679f,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p598
S'PUSH RBX\nMOV EBX,dword ptr [0x0060a1f8]\nXOR EDI,EDI\nMOV ESI,0x4073ff\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x40679f\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x004015d0\nCALL 0x00401320\n'
p599
S'53\n8b 1d c1 4d 20 00\n31 ff\nbe ff 73 40 00\nba 05 00 00 00\ne8 88 bf ff ff\n48 89 c1\n31 f6\nba 9f 67 40 00\n31 c0\n89 df\ne8 75 c1 ff ff\ne8 c0 be ff ff\n'
p600
S'.text:0000000000405430\n.text:0000000000405431\n.text:0000000000405437\n.text:0000000000405439\n.text:000000000040543e\n.text:0000000000405443\n.text:0000000000405448\n.text:000000000040544b\n.text:000000000040544d\n.text:0000000000405452\n.text:0000000000405454\n.text:0000000000405456\n.text:000000000040545b\n'
p601
tp602
sS'c_isspace'
p603
(S'\n__stdcall c_isspace()\n'
p604
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p605
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00405985\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p606
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p607
S'.text:0000000000405970\n.text:0000000000405973\n.text:0000000000405976\n.text:0000000000405978\n.text:000000000040597d\n.text:000000000040597f\n.text:0000000000405981\n.text:0000000000405984\n.text:0000000000405985\n.text:0000000000405987\n'
p608
tp609
sS'quotearg_n_custom'
p610
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p611
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p612
S'MOV R8,-0x1\nJMP 0x00404800\n'
p613
S'49 c7 c0 ff ff ff ff\neb 07\n'
p614
S'.text:00000000004047f0\n.text:00000000004047f7\n'
p615
tp616
sS'open'
p617
(S'\n__stdcall open(char * __file, int __oflag)\n'
p618
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_0060a190)();\u000a  return iVar1;\u000a}\u000a\u000a
p619
S'JMP qword ptr [0x0060a190]\n'
p620
S'ff 25 9a 8b 20 00\n'
p621
S'.plt:00000000004015f0\n'
p622
tp623
sS'quotearg_n_custom_mem'
p624
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p625
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p626
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x0060a300]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x0060a2f0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a2e0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a2d0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00403560\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004043f0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p627
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 e7 5a 20 00\n48 89 44 24 30\n0f 10 05 cb 5a 20 00\n0f 29 44 24 20\n0f 10 05 af 5a 20 00\n0f 29 44 24 10\n0f 10 05 93 5a 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p628
S'.text:0000000000404800\n.text:0000000000404801\n.text:0000000000404803\n.text:0000000000404805\n.text:0000000000404806\n.text:000000000040480a\n.text:000000000040480d\n.text:0000000000404810\n.text:0000000000404812\n.text:0000000000404819\n.text:000000000040481e\n.text:0000000000404825\n.text:000000000040482a\n.text:0000000000404831\n.text:0000000000404836\n.text:000000000040483d\n.text:0000000000404841\n.text:0000000000404844\n.text:0000000000404847\n.text:000000000040484c\n.text:000000000040484e\n.text:0000000000404851\n.text:0000000000404854\n.text:0000000000404857\n.text:000000000040485c\n.text:0000000000404860\n.text:0000000000404861\n.text:0000000000404863\n.text:0000000000404865\n.text:0000000000404866\n'
p629
tp630
sS'_init'
p631
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p632
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00609ff8;\u000a  if (PTR___gmon_start___00609ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00609ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p633
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00609ff8]\nTEST RAX,RAX\nJZ 0x004012ea\nCALL RAX\nADD RSP,0x8\nRET\n'
p634
S'48 83 ec 08\n48 8b 05 15 8d 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p635
S'.init:00000000004012d8\n.init:00000000004012dc\n.init:00000000004012e3\n.init:00000000004012e6\n.init:00000000004012e8\n.init:00000000004012ea\n.init:00000000004012ee\n'
p636
tp637
sS'__freading'
p638
(S'\n__stdcall __freading()\n'
p639
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_0060a150)();\u000a  return;\u000a}\u000a\u000a
p640
S'JMP qword ptr [0x0060a150]\n'
p641
S'ff 25 da 8b 20 00\n'
p642
S'.plt:0000000000401570\n'
p643
tp644
sS'set_quoting_flags'
p645
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p646
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p647
S'TEST RDI,RDI\nMOV ECX,0x60a2d0\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p648
S'48 85 ff\nb9 d0 a2 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p649
S'.text:0000000000403540\n.text:0000000000403543\n.text:0000000000403548\n.text:000000000040354c\n.text:000000000040354f\n.text:0000000000403552\n'
p650
tp651
sS'fputs_unlocked'
p652
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p653
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_0060a0f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p654
S'JMP qword ptr [0x0060a0f8]\n'
p655
S'ff 25 32 8c 20 00\n'
p656
S'.plt:00000000004014c0\n'
p657
tp658
sS'main'
p659
(S'\n__stdcall main(char * * argv)\n'
p660
V\u000aint main(char **argv)\u000a\u000a{\u000a  byte bVar1;\u000a  char *default_file_list [2];\u000a  _Bool _Var2;\u000a  uint uVar3;\u000a  int iVar4;\u000a  char *pcVar5;\u000a  char *arg;\u000a  uintmax_t i;\u000a  uint *puVar6;\u000a  undefined8 uVar7;\u000a  char cVar8;\u000a  byte bVar9;\u000a  uint uVar10;\u000a  char *pcVar11;\u000a  char **n_str;\u000a  char **in_RSI;\u000a  char cVar12;\u000a  char cVar13;\u000a  int iVar14;\u000a  bool bVar15;\u000a  char umax_buf [21];\u000a  char **local_58;\u000a  ulong local_50;\u000a  char local_48 [24];\u000a  \u000a  local_50 = (ulong)argv & 0xffffffff;\u000a  set_program_name(*in_RSI);\u000a  setlocale(6,\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  bindtextdomain(0x406774,"/usr/local/share/locale");\u000a  textdomain(0x406774);\u000a  atexit(close_stdout);\u000a  have_read_stdin = 0;\u000a  print_headers = 0;\u000a  line_end = 1;\u000a  bVar9 = 1;\u000a  if ((((int)local_50 < 2) || (arg = in_RSI[1], *arg != '-')) || (9 < (int)arg[1] - 0x30U)) {\u000a    i = 10;\u000a    bVar15 = false;\u000a    local_58 = in_RSI;\u000a    iVar4 = 0;\u000a    goto LAB_00401c63;\u000a  }\u000a  local_58 = in_RSI + 1;\u000a  arg = arg + 2;\u000a  do {\u000a    pcVar5 = arg;\u000a    arg = pcVar5 + 1;\u000a  } while ((int)*pcVar5 - 0x30U < 10);\u000a  cVar8 = *pcVar5;\u000a  if (cVar8 == 0) {\u000a    iVar4 = 0;\u000a    bVar9 = 1;\u000a    arg = pcVar5;\u000aLAB_00401c08:\u000a    *arg = 0;\u000a  }\u000a  else {\u000a    bVar9 = 1;\u000a    iVar4 = 0;\u000a    pcVar11 = arg;\u000a    cVar12 = 0;\u000a    do {\u000a      bVar1 = 0;\u000a      cVar13 = 0;\u000a      switch(cVar8) {\u000a      case 'b':\u000a      case 'k':\u000a      case 'm':\u000a        bVar1 = 0;\u000a        cVar13 = cVar8;\u000a        break;\u000a      case 'c':\u000a        break;\u000a      default:\u000a        goto switchD_00401baa_caseD_64;\u000a      case 'l':\u000a        bVar1 = 1;\u000a        cVar13 = cVar12;\u000a        break;\u000a      case 'q':\u000a        iVar4 = 2;\u000a        bVar1 = bVar9;\u000a        cVar13 = cVar12;\u000a        break;\u000a      case 'v':\u000a        iVar4 = 1;\u000a        bVar1 = bVar9;\u000a        cVar13 = cVar12;\u000a        break;\u000a      case 'z':\u000a        line_end = 0;\u000a        bVar1 = bVar9;\u000a        cVar13 = cVar12;\u000a      }\u000a      bVar9 = bVar1;\u000a      cVar8 = *pcVar11;\u000a      pcVar11 = pcVar11 + 1;\u000a      cVar12 = cVar13;\u000a    } while (cVar8 != 0);\u000a    *pcVar5 = cVar13;\u000a    if (cVar13 != 0) goto LAB_00401c08;\u000a  }\u000a  i = string_to_integer((char *)(ulong)bVar9);\u000a  in_RSI[1] = *in_RSI;\u000a  local_50 = (ulong)((int)local_50 - 1);\u000a  bVar15 = false;\u000aLAB_00401c63:\u000a  iVar14 = iVar4;\u000a  n_str = local_58;\u000a  uVar3 = getopt_long(local_50,local_58,"c:n:qvz0123456789",long_options,0);\u000a  pcVar11 = (char *)(ulong)uVar3;\u000a  if ((int)uVar3 < 99) {\u000a    if (uVar3 == 0xffffffff) {\u000a      if ((iVar14 == 1) || ((iVar14 == 0 && (optind < (int)local_50 + -1)))) {\u000a        print_headers = 1;\u000a      }\u000a      if (((bVar9 == 0) && ((long)i < 0)) && (bVar15)) {\u000a        uVar7 = dcgettext(0,"invalid number of bytes",5);\u000a        arg = umaxtostr(i,local_48);\u000a        arg = quote(arg);\u000a        error(1,0x4b,"%s: %s",uVar7,arg);\u000a      }\u000a      n_str = (char **)&ram0x00406160;\u000a      if (optind < (int)local_50) {\u000a        n_str = local_58 + ((long)optind & 0xffffffff);\u000a      }\u000a      arg = *n_str;\u000a      if (arg == (char *)0x0) {\u000a        uVar10 = 0;\u000a        uVar3 = 0;\u000a      }\u000a      else {\u000a        bVar9 = 1;\u000a        do {\u000a          n_str = n_str + 1;\u000a          _Var2 = head_file(arg,i);\u000a          bVar9 = bVar9 & _Var2;\u000a          arg = *n_str;\u000a        } while (arg != (char *)0x0);\u000a        uVar10 = (uint)(bVar9 ^ 1);\u000a        uVar3 = (uint)(bVar9 ^ 1);\u000a      }\u000a      if ((have_read_stdin == 1) && (iVar4 = close(0), uVar3 = uVar10, iVar4 < 0)) {\u000a        puVar6 = (uint *)__errno_location();\u000a        error(1,(ulong)*puVar6,&DAT_00406b47);\u000a        uVar3 = uVar10;\u000a      }\u000a      return (int)uVar3;\u000a    }\u000a    if (uVar3 == 0xffffff7d) goto LAB_00401e69;\u000a    if (uVar3 == 0xffffff7e) {\u000a      usage(0);\u000aswitchD_00401baa_caseD_64:\u000a      uVar7 = dcgettext(0,"invalid trailing option -- %c",5);\u000a      error(0,0,uVar7,(ulong)(uint)(int)pcVar11[-1]);\u000a      usage(1);\u000aLAB_00401e69:\u000a      version_etc(stdout,"head","GNU coreutils",Version,"David MacKenzie","Jim Meyering",0);\u000a                    /* WARNING: Subroutine does not return */\u000a      exit(0);\u000a    }\u000a    goto switchD_00401c98_caseD_64;\u000a  }\u000a  iVar4 = 1;\u000a  switch(uVar3) {\u000a  case 99:\u000a    bVar9 = 0;\u000a    bVar15 = *optarg == '-';\u000a    if (bVar15) {\u000a      optarg = optarg + 1;\u000a      bVar9 = 0;\u000a    }\u000a    break;\u000a  default:\u000a    goto switchD_00401c98_caseD_64;\u000a  case 0x6e:\u000a    bVar15 = *optarg == '-';\u000a    bVar9 = 1;\u000a    if (bVar15) {\u000a      optarg = optarg + 1;\u000a      bVar9 = 1;\u000a    }\u000a    break;\u000a  case 0x71:\u000a    iVar4 = 2;\u000a  case 0x76:\u000a    goto LAB_00401c63;\u000a  case 0x7a:\u000a    line_end = 0;\u000a    iVar4 = iVar14;\u000a    goto LAB_00401c63;\u000a  case 0x80:\u000a    presume_input_pipe = 1;\u000a    iVar4 = iVar14;\u000a    goto LAB_00401c63;\u000a  }\u000a  i = string_to_integer((char *)(ulong)bVar9);\u000a  iVar4 = iVar14;\u000a  goto LAB_00401c63;\u000aswitchD_00401c98_caseD_64:\u000a  if (uVar3 - 0x30 < 10) {\u000a    uVar7 = dcgettext(0,"invalid trailing option -- %c",5);\u000a    n_str = (char **)0x0;\u000a    error(0,0,uVar7,(ulong)uVar3);\u000a  }\u000a  cVar8 = 1;\u000a  usage();\u000a  arg = "invalid number of bytes";\u000a  if (cVar8 != 0) {\u000a    arg = "invalid number of lines";\u000a  }\u000a  arg = (char *)dcgettext(0,arg,5);\u000a  i = xdectoumax((char *)n_str,0,0xffffffffffffffff,"bkKmMGTPEZY0",arg);\u000a  return (int)i;\u000a}\u000a\u000a
p661
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV R12,RSI\nMOV EBX,EDI\nMOV RDI,qword ptr [R12]\nCALL 0x004033f0\nMOV EDI,0x6\nMOV ESI,0x4071c9\nCALL 0x004015b0\nMOV EDI,0x406774\nMOV ESI,0x406728\nCALL 0x004013c0\nMOV EDI,0x406774\nCALL 0x004013a0\nMOV EDI,0x4031b0\nCALL 0x00405f40\nMOV byte ptr [0x0060a2a9],0x0\nMOV byte ptr [0x0060a2aa],0x0\nMOV byte ptr [0x0060a2ab],0x1\nMOV R15B,0x1\nXOR R14D,R14D\nMOV qword ptr [RSP + 0x18],RBX\nCMP EBX,0x2\nJL 0x00401bef\nMOV RAX,qword ptr [R12 + 0x8]\nCMP byte ptr [RAX],0x2d\nJNZ 0x00401bef\nMOVSX ECX,byte ptr [RAX + 0x1]\nADD ECX,-0x30\nCMP ECX,0x9\nJA 0x00401bef\nLEA RCX,[R12 + 0x8]\nMOV qword ptr [RSP + 0x10],RCX\nLEA RSI,[RAX + 0x1]\nADD RAX,0x2\nNOP word ptr [RAX + RAX*0x1]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x30\nINC RAX\nCMP ECX,0xa\nJC 0x00401b60\nLEA R9,[RAX + -0x1]\nMOV DL,byte ptr [RAX + -0x1]\nTEST DL,DL\nJZ 0x00401bff\nXOR EDI,EDI\nMOV R15B,0x1\nMOV RBX,RAX\nXOR R14D,R14D\nNOP dword ptr [RAX + RAX*0x1]\nMOV ECX,R15D\nMOV R8D,EDI\nMOVSX EBP,DL\nADD EBP,-0x62\nCMP EBP,0x18\nJA 0x00401e3c\nXOR R15D,R15D\nXOR EDI,EDI\nJMP qword ptr [0x405fa0 + RBP*0x8]\nXOR R15D,R15D\nMOV DIL,DL\nJMP 0x00401bdb\nMOV R15B,0x1\nJMP 0x00401bd8\nMOV R14D,0x2\nJMP 0x00401bd5\nMOV R14D,0x1\nJMP 0x00401bd5\nMOV byte ptr [0x0060a2ab],0x0\nMOV R15B,CL\nMOV DIL,R8B\nMOVZX EDX,byte ptr [RBX]\nINC RBX\nTEST DL,DL\nJNZ 0x00401b90\nMOV byte ptr [R9],DIL\nTEST DIL,DIL\nJNZ 0x00401c08\nJMP 0x00401c0b\nMOV R13D,0xa\nMOV qword ptr [RSP + 0x10],R12\nXOR R12D,R12D\nJMP 0x00401c46\nXOR R14D,R14D\nMOV R15B,0x1\nMOV RAX,R9\nMOV byte ptr [RAX],0x0\nMOV EAX,R15D\nAND AL,0x1\nMOVZX EDI,AL\nCALL 0x00401ee0\nMOV R13,RAX\nMOV RAX,qword ptr [R12]\nMOV qword ptr [R12 + 0x8],RAX\nMOV RAX,qword ptr [RSP + 0x18]\nDEC EAX\nMOV qword ptr [RSP + 0x18],RAX\nXOR R12D,R12D\nJMP 0x00401c46\nMOV R14D,0x2\nMOV EBP,R14D\nJMP 0x00401c63\nMOV RSI,qword ptr [0x0060a278]\nMOVZX EDI,R15B\nCALL 0x00401ee0\nMOV R13,RAX\nMOV EDX,0x40675e\nMOV ECX,0x406170\nXOR R8D,R8D\nMOV RDI,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x10]\nCALL 0x00401400\nMOV EBX,EAX\nCMP EBX,0x62\nJLE 0x00401d02\nLEA EAX,[RBX + -0x63]\nCMP EAX,0x1d\nJA 0x00401ea3\nMOV R14D,0x1\nJMP qword ptr [0x406068 + RAX*0x8]\nMOV RAX,qword ptr [0x0060a278]\nXOR R15D,R15D\nCMP byte ptr [RAX],0x2d\nSETZ R12B\nJNZ 0x00401c50\nINC RAX\nMOV qword ptr [0x0060a278],RAX\nXOR R15D,R15D\nJMP 0x00401c50\nMOV RAX,qword ptr [0x0060a278]\nCMP byte ptr [RAX],0x2d\nSETZ R12B\nMOV R15B,0x1\nJNZ 0x00401c50\nINC RAX\nMOV qword ptr [0x0060a278],RAX\nMOV R15B,0x1\nJMP 0x00401c50\nMOV byte ptr [0x0060a2ab],0x0\nJMP 0x00401c63\nMOV byte ptr [0x0060a2ac],0x1\nJMP 0x00401c63\nCMP EBX,-0x1\nJNZ 0x00401e25\nCMP EBP,0x1\nJZ 0x00401d24\nTEST EBP,EBP\nJNZ 0x00401d2b\nMOV RAX,qword ptr [RSP + 0x18]\nLEA EAX,[RAX + -0x1]\nCMP dword ptr [0x0060a270],EAX\nJGE 0x00401d2b\nMOV byte ptr [0x0060a2aa],0x1\nAND R15B,0x1\nJNZ 0x00401d83\nTEST R13,R13\nJNS 0x00401d83\nTEST R12B,R12B\nJZ 0x00401d83\nXOR EDI,EDI\nMOV ESI,0x4067a2\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RBP,RAX\nLEA RSI,[RSP + 0x20]\nMOV RDI,R13\nCALL 0x00403390\nMOV RDI,RAX\nCALL 0x004048e0\nMOV RBX,RAX\nMOV EDI,0x1\nMOV ESI,0x4b\nMOV EDX,0x40679b\nXOR EAX,EAX\nMOV RCX,RBP\nMOV R8,RBX\nCALL 0x004015d0\nMOVSXD RAX,dword ptr [0x0060a270]\nCMP EAX,dword ptr [RSP + 0x18]\nMOV RCX,qword ptr [RSP + 0x10]\nLEA RAX,[RCX + RAX*0x8]\nMOV EBP,0x406160\nCMOVL RBP,RAX\nMOV RDI,qword ptr [RBP]\nTEST RDI,RDI\nJZ 0x00401de5\nADD RBP,0x8\nMOV BL,0x1\nNOP\nXOR ECX,ECX\nTEST R12B,R12B\nSETNZ CL\nXOR EDX,EDX\nTEST R15B,R15B\nSETNZ DL\nMOV RSI,R13\nCALL 0x00401f30\nAND BL,AL\nMOV RDI,qword ptr [RBP]\nADD RBP,0x8\nTEST RDI,RDI\nJNZ 0x00401db0\nXOR BL,0x1\nCMP byte ptr [0x0060a2a9],0x1\nJZ 0x00401df0\nJMP 0x00401e13\nXOR EBX,EBX\nCMP byte ptr [0x0060a2a9],0x1\nJNZ 0x00401e13\nXOR EDI,EDI\nCALL 0x00401480\nTEST EAX,EAX\nJNS 0x00401e13\nCALL 0x00401330\nMOV ESI,dword ptr [RAX]\nMOV EDI,0x1\nMOV EDX,0x406b47\nXOR EAX,EAX\nCALL 0x004015d0\nMOVZX EAX,BL\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP EBX,0xffffff7d\nJZ 0x00401e69\nCMP EBX,0xffffff7e\nJNZ 0x00401ea3\nXOR EDI,EDI\nCALL 0x00401790\nXOR EDI,EDI\nMOV ESI,0x406740\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOVSX ECX,byte ptr [RBX + -0x1]\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x004015d0\nMOV EDI,0x1\nCALL 0x00401790\nMOV RDI,qword ptr [0x0060a268]\nMOV RCX,qword ptr [0x0060a1f0]\nMOV qword ptr [RSP],0x0\nMOV ESI,0x406723\nMOV EDX,0x406770\nMOV R8D,0x40677e\nMOV R9D,0x40678e\nXOR EAX,EAX\nCALL 0x00405170\nXOR EDI,EDI\nCALL 0x00401630\nLEA EAX,[RBX + -0x30]\nCMP EAX,0x9\nJA 0x00401ecf\nXOR EDI,EDI\nMOV ESI,0x406740\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV ECX,EBX\nCALL 0x004015d0\nMOV EDI,0x1\nCALL 0x00401790\nNOP dword ptr [RAX]\n'
p662
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n49 89 f4\n89 fb\n49 8b 3c 24\ne8 24 19 00 00\nbf 06 00 00 00\nbe c9 71 40 00\ne8 d5 fa ff ff\nbf 74 67 40 00\nbe 28 67 40 00\ne8 d6 f8 ff ff\nbf 74 67 40 00\ne8 ac f8 ff ff\nbf b0 31 40 00\ne8 42 44 00 00\nc6 05 a4 87 20 00 00\nc6 05 9e 87 20 00 00\nc6 05 98 87 20 00 01\n41 b7 01\n45 31 f6\n48 89 5c 24 18\n83 fb 02\n0f 8c c8 00 00 00\n49 8b 44 24 08\n80 38 2d\n0f 85 ba 00 00 00\n0f be 48 01\n83 c1 d0\n83 f9 09\n0f 87 aa 00 00 00\n49 8d 4c 24 08\n48 89 4c 24 10\n48 8d 70 01\n48 83 c0 02\n66 0f 1f 84 00 00 00 00 00\n0f be 08\n83 c1 d0\n48 ff c0\n83 f9 0a\n72 f2\n4c 8d 48 ff\n8a 50 ff\n84 d2\n0f 84 82 00 00 00\n31 ff\n41 b7 01\n48 89 c3\n45 31 f6\n0f 1f 84 00 00 00 00 00\n44 89 f9\n41 89 f8\n0f be ea\n83 c5 9e\n83 fd 18\n0f 87 97 02 00 00\n45 31 ff\n31 ff\nff 24 ed a0 5f 40 00\n45 31 ff\n40 88 d7\neb 22\n41 b7 01\neb 1a\n41 be 02 00 00 00\neb 0f\n41 be 01 00 00 00\neb 07\nc6 05 d6 86 20 00 00\n41 88 cf\n44 88 c7\n0f b6 13\n48 ff c3\n84 d2\n75 ab\n41 88 39\n40 84 ff\n75 1b\neb 1c\n41 bd 0a 00 00 00\n4c 89 64 24 10\n45 31 e4\neb 47\n45 31 f6\n41 b7 01\n4c 89 c8\nc6 00 00\n44 89 f8\n24 01\n0f b6 f8\ne8 c8 02 00 00\n49 89 c5\n49 8b 04 24\n49 89 44 24 08\n48 8b 44 24 18\nff c8\n48 89 44 24 18\n45 31 e4\neb 11\n41 be 02 00 00 00\n44 89 f5\neb 18\n48 8b 35 21 86 20 00\n41 0f b6 ff\ne8 80 02 00 00\n49 89 c5\nba 5e 67 40 00\nb9 70 61 40 00\n45 31 c0\n48 8b 7c 24 18\n48 8b 74 24 10\ne8 81 f7 ff ff\n89 c3\n83 fb 62\n7e 7c\n8d 43 9d\n83 f8 1d\n0f 87 11 02 00 00\n41 be 01 00 00 00\nff 24 c5 68 60 40 00\n48 8b 05 d2 85 20 00\n45 31 ff\n80 38 2d\n41 0f 94 c4\n75 9e\n48 ff c0\n48 89 05 bc 85 20 00\n45 31 ff\neb 8f\n48 8b 05 b0 85 20 00\n80 38 2d\n41 0f 94 c4\n41 b7 01\n0f 85 78 ff ff ff\n48 ff c0\n48 89 05 96 85 20 00\n41 b7 01\ne9 66 ff ff ff\nc6 05 ba 85 20 00 00\ne9 6d ff ff ff\nc6 05 af 85 20 00 01\ne9 61 ff ff ff\n83 fb ff\n0f 85 1a 01 00 00\n83 fd 01\n74 14\n85 ed\n75 17\n48 8b 44 24 18\n8d 40 ff\n39 05 4e 85 20 00\n7d 07\nc6 05 7f 85 20 00 01\n41 80 e7 01\n75 52\n4d 85 ed\n79 4d\n45 84 e4\n74 48\n31 ff\nbe a2 67 40 00\nba 05 00 00 00\ne8 84 f6 ff ff\n48 89 c5\n48 8d 74 24 20\n4c 89 ef\ne8 34 16 00 00\n48 89 c7\ne8 7c 2b 00 00\n48 89 c3\nbf 01 00 00 00\nbe 4b 00 00 00\nba 9b 67 40 00\n31 c0\n48 89 e9\n49 89 d8\ne8 4d f8 ff ff\n48 63 05 e6 84 20 00\n3b 44 24 18\n48 8b 4c 24 10\n48 8d 04 c1\nbd 60 61 40 00\n48 0f 4c e8\n48 8b 7d 00\n48 85 ff\n74 3c\n48 83 c5 08\nb3 01\n90\n31 c9\n45 84 e4\n0f 95 c1\n31 d2\n45 84 ff\n0f 95 c2\n4c 89 ee\ne8 68 01 00 00\n20 c3\n48 8b 7d 00\n48 83 c5 08\n48 85 ff\n75 d9\n80 f3 01\n80 3d c8 84 20 00 01\n74 0d\neb 2e\n31 db\n80 3d bb 84 20 00 01\n75 23\n31 ff\ne8 89 f6 ff ff\n85 c0\n79 18\ne8 30 f5 ff ff\n8b 30\nbf 01 00 00 00\nba 47 6b 40 00\n31 c0\ne8 bd f7 ff ff\n0f b6 c3\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n81 fb 7d ff ff ff\n74 3c\n81 fb 7e ff ff ff\n75 6e\n31 ff\ne8 54 f9 ff ff\n31 ff\nbe 40 67 40 00\nba 05 00 00 00\ne8 83 f5 ff ff\n48 89 c2\n0f be 4b ff\n31 ff\n31 f6\n31 c0\ne8 71 f7 ff ff\nbf 01 00 00 00\ne8 27 f9 ff ff\n48 8b 3d f8 83 20 00\n48 8b 0d 79 83 20 00\n48 c7 04 24 00 00 00 00\nbe 23 67 40 00\nba 70 67 40 00\n41 b8 7e 67 40 00\n41 b9 8e 67 40 00\n31 c0\ne8 d4 32 00 00\n31 ff\ne8 8d f7 ff ff\n8d 43 d0\n83 f8 09\n77 24\n31 ff\nbe 40 67 40 00\nba 05 00 00 00\ne8 14 f5 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\n89 d9\ne8 01 f7 ff ff\nbf 01 00 00 00\ne8 b7 f8 ff ff\n0f 1f 80 00 00 00 00\n'
p663
S'.text:0000000000401ab0\n.text:0000000000401ab1\n.text:0000000000401ab3\n.text:0000000000401ab5\n.text:0000000000401ab7\n.text:0000000000401ab9\n.text:0000000000401aba\n.text:0000000000401abe\n.text:0000000000401ac1\n.text:0000000000401ac3\n.text:0000000000401ac7\n.text:0000000000401acc\n.text:0000000000401ad1\n.text:0000000000401ad6\n.text:0000000000401adb\n.text:0000000000401ae0\n.text:0000000000401ae5\n.text:0000000000401aea\n.text:0000000000401aef\n.text:0000000000401af4\n.text:0000000000401af9\n.text:0000000000401afe\n.text:0000000000401b05\n.text:0000000000401b0c\n.text:0000000000401b13\n.text:0000000000401b16\n.text:0000000000401b19\n.text:0000000000401b1e\n.text:0000000000401b21\n.text:0000000000401b27\n.text:0000000000401b2c\n.text:0000000000401b2f\n.text:0000000000401b35\n.text:0000000000401b39\n.text:0000000000401b3c\n.text:0000000000401b3f\n.text:0000000000401b45\n.text:0000000000401b4a\n.text:0000000000401b4f\n.text:0000000000401b53\n.text:0000000000401b57\n.text:0000000000401b60\n.text:0000000000401b63\n.text:0000000000401b66\n.text:0000000000401b69\n.text:0000000000401b6c\n.text:0000000000401b6e\n.text:0000000000401b72\n.text:0000000000401b75\n.text:0000000000401b77\n.text:0000000000401b7d\n.text:0000000000401b7f\n.text:0000000000401b82\n.text:0000000000401b85\n.text:0000000000401b88\n.text:0000000000401b90\n.text:0000000000401b93\n.text:0000000000401b96\n.text:0000000000401b99\n.text:0000000000401b9c\n.text:0000000000401b9f\n.text:0000000000401ba5\n.text:0000000000401ba8\n.text:0000000000401baa\n.text:0000000000401bb1\n.text:0000000000401bb4\n.text:0000000000401bb7\n.text:0000000000401bb9\n.text:0000000000401bbc\n.text:0000000000401bbe\n.text:0000000000401bc4\n.text:0000000000401bc6\n.text:0000000000401bcc\n.text:0000000000401bce\n.text:0000000000401bd5\n.text:0000000000401bd8\n.text:0000000000401bdb\n.text:0000000000401bde\n.text:0000000000401be1\n.text:0000000000401be3\n.text:0000000000401be5\n.text:0000000000401be8\n.text:0000000000401beb\n.text:0000000000401bed\n.text:0000000000401bef\n.text:0000000000401bf5\n.text:0000000000401bfa\n.text:0000000000401bfd\n.text:0000000000401bff\n.text:0000000000401c02\n.text:0000000000401c05\n.text:0000000000401c08\n.text:0000000000401c0b\n.text:0000000000401c0e\n.text:0000000000401c10\n.text:0000000000401c13\n.text:0000000000401c18\n.text:0000000000401c1b\n.text:0000000000401c1f\n.text:0000000000401c24\n.text:0000000000401c29\n.text:0000000000401c2b\n.text:0000000000401c30\n.text:0000000000401c33\n.text:0000000000401c40\n.text:0000000000401c46\n.text:0000000000401c49\n.text:0000000000401c50\n.text:0000000000401c57\n.text:0000000000401c5b\n.text:0000000000401c60\n.text:0000000000401c63\n.text:0000000000401c68\n.text:0000000000401c6d\n.text:0000000000401c70\n.text:0000000000401c75\n.text:0000000000401c7a\n.text:0000000000401c7f\n.text:0000000000401c81\n.text:0000000000401c84\n.text:0000000000401c86\n.text:0000000000401c89\n.text:0000000000401c8c\n.text:0000000000401c92\n.text:0000000000401c98\n.text:0000000000401c9f\n.text:0000000000401ca6\n.text:0000000000401ca9\n.text:0000000000401cac\n.text:0000000000401cb0\n.text:0000000000401cb2\n.text:0000000000401cb5\n.text:0000000000401cbc\n.text:0000000000401cbf\n.text:0000000000401cc1\n.text:0000000000401cc8\n.text:0000000000401ccb\n.text:0000000000401ccf\n.text:0000000000401cd2\n.text:0000000000401cd8\n.text:0000000000401cdb\n.text:0000000000401ce2\n.text:0000000000401ce5\n.text:0000000000401cea\n.text:0000000000401cf1\n.text:0000000000401cf6\n.text:0000000000401cfd\n.text:0000000000401d02\n.text:0000000000401d05\n.text:0000000000401d0b\n.text:0000000000401d0e\n.text:0000000000401d10\n.text:0000000000401d12\n.text:0000000000401d14\n.text:0000000000401d19\n.text:0000000000401d1c\n.text:0000000000401d22\n.text:0000000000401d24\n.text:0000000000401d2b\n.text:0000000000401d2f\n.text:0000000000401d31\n.text:0000000000401d34\n.text:0000000000401d36\n.text:0000000000401d39\n.text:0000000000401d3b\n.text:0000000000401d3d\n.text:0000000000401d42\n.text:0000000000401d47\n.text:0000000000401d4c\n.text:0000000000401d4f\n.text:0000000000401d54\n.text:0000000000401d57\n.text:0000000000401d5c\n.text:0000000000401d5f\n.text:0000000000401d64\n.text:0000000000401d67\n.text:0000000000401d6c\n.text:0000000000401d71\n.text:0000000000401d76\n.text:0000000000401d78\n.text:0000000000401d7b\n.text:0000000000401d7e\n.text:0000000000401d83\n.text:0000000000401d8a\n.text:0000000000401d8e\n.text:0000000000401d93\n.text:0000000000401d97\n.text:0000000000401d9c\n.text:0000000000401da0\n.text:0000000000401da4\n.text:0000000000401da7\n.text:0000000000401da9\n.text:0000000000401dad\n.text:0000000000401daf\n.text:0000000000401db0\n.text:0000000000401db2\n.text:0000000000401db5\n.text:0000000000401db8\n.text:0000000000401dba\n.text:0000000000401dbd\n.text:0000000000401dc0\n.text:0000000000401dc3\n.text:0000000000401dc8\n.text:0000000000401dca\n.text:0000000000401dce\n.text:0000000000401dd2\n.text:0000000000401dd5\n.text:0000000000401dd7\n.text:0000000000401dda\n.text:0000000000401de1\n.text:0000000000401de3\n.text:0000000000401de5\n.text:0000000000401de7\n.text:0000000000401dee\n.text:0000000000401df0\n.text:0000000000401df2\n.text:0000000000401df7\n.text:0000000000401df9\n.text:0000000000401dfb\n.text:0000000000401e00\n.text:0000000000401e02\n.text:0000000000401e07\n.text:0000000000401e0c\n.text:0000000000401e0e\n.text:0000000000401e13\n.text:0000000000401e16\n.text:0000000000401e1a\n.text:0000000000401e1b\n.text:0000000000401e1d\n.text:0000000000401e1f\n.text:0000000000401e21\n.text:0000000000401e23\n.text:0000000000401e24\n.text:0000000000401e25\n.text:0000000000401e2b\n.text:0000000000401e2d\n.text:0000000000401e33\n.text:0000000000401e35\n.text:0000000000401e37\n.text:0000000000401e3c\n.text:0000000000401e3e\n.text:0000000000401e43\n.text:0000000000401e48\n.text:0000000000401e4d\n.text:0000000000401e50\n.text:0000000000401e54\n.text:0000000000401e56\n.text:0000000000401e58\n.text:0000000000401e5a\n.text:0000000000401e5f\n.text:0000000000401e64\n.text:0000000000401e69\n.text:0000000000401e70\n.text:0000000000401e77\n.text:0000000000401e7f\n.text:0000000000401e84\n.text:0000000000401e89\n.text:0000000000401e8f\n.text:0000000000401e95\n.text:0000000000401e97\n.text:0000000000401e9c\n.text:0000000000401e9e\n.text:0000000000401ea3\n.text:0000000000401ea6\n.text:0000000000401ea9\n.text:0000000000401eab\n.text:0000000000401ead\n.text:0000000000401eb2\n.text:0000000000401eb7\n.text:0000000000401ebc\n.text:0000000000401ebf\n.text:0000000000401ec1\n.text:0000000000401ec3\n.text:0000000000401ec5\n.text:0000000000401ec8\n.text:0000000000401eca\n.text:0000000000401ecf\n.text:0000000000401ed4\n.text:0000000000401ed9\n'
p664
tp665
sS'realloc'
p666
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p667
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_0060a160)();\u000a  return pvVar1;\u000a}\u000a\u000a
p668
S'JMP qword ptr [0x0060a160]\n'
p669
S'ff 25 ca 8b 20 00\n'
p670
S'.plt:0000000000401590\n'
p671
tp672
sS'xcharalloc'
p673
(S'\n__stdcall xcharalloc(size_t n)\n'
p674
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p675
S'JMP 0x004052a0\n'
p676
S'e9 2b ff ff ff\n'
p677
S'.text:0000000000405370\n'
p678
tp679
sS'c_isupper'
p680
(S'\n__stdcall c_isupper()\n'
p681
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p682
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p683
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p684
S'.text:0000000000405990\n.text:0000000000405993\n.text:0000000000405996\n.text:0000000000405999\n'
p685
tp686
sS'__fprintf_chk'
p687
(S'\n__stdcall __fprintf_chk()\n'
p688
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_0060a1c0)();\u000a  return;\u000a}\u000a\u000a
p689
S'JMP qword ptr [0x0060a1c0]\n'
p690
S'ff 25 6a 8b 20 00\n'
p691
S'.plt:0000000000401650\n'
p692
tp693
sS'get_charset_aliases'
p694
(S'\n__stdcall get_charset_aliases()\n'
p695
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00405cf4_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00405cf4_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00405cf4_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00405cf4_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_00405cf4_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00405cf4_caseD_9;\u000a      case -1:\u000a        goto switchD_00405cf4_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_00405d4d:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_00405d53:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00405cf4_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00405d53;\u000a  }\u000a  goto LAB_00405d4d;\u000a}\u000a\u000a
p696
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x0060a410]\nTEST R15,R15\nJNZ 0x00405d62\nMOV EDI,0x407a74\nCALL 0x00401300\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405b18\nCMP byte ptr [RBX],0x0\nJNZ 0x00405b1d\nMOV EBX,0x407a84\nMOV RDI,RBX\nCALL 0x004013f0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00405b37\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00405b39\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401520\nMOV R13,RAX\nTEST R13,R13\nJZ 0x00405b8d\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00401500\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00405b98\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00405bb5\nMOV R15D,0x4071c9\nJMP 0x00405d5b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x004015f0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00405d4d\nMOV ESI,0x406b03\nMOV EDI,EBP\nCALL 0x004015a0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405d14\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00405ce0\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x00401360\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x00401360\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00405ce0\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401550\nMOV ESI,0x407a93\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00401470\nCMP EAX,0x2\nJL 0x00405d34\nMOV RDI,R12\nCALL 0x004013f0\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x004013f0\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00405cbd\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401590\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00405c04\nJMP 0x00405d1d\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401520\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00405c04\nJMP 0x00405d1d\nMOV RDI,RBX\nCALL 0x00401380\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00405c47\nJMP qword ptr [0x407938 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x00401380\nCMP EAX,-0x1\nJZ 0x00405d34\nCMP EAX,0xa\nJNZ 0x00405d00\nJMP 0x00405ce0\nMOV EDI,EBP\nCALL 0x00401480\nJMP 0x00405d4d\nMOV RDI,R15\nCALL 0x00401310\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00405d80\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00405d4d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00405d53\nMOV R15D,0x4071c9\nMOV RDI,R13\nCALL 0x00401310\nMOV qword ptr [0x0060a410],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p697
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 18 49 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 74 7a 40 00\ne8 f5 b7 ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb 84 7a 40 00\n48 89 df\ne8 cb b8 ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 d9 b9 ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 a3 b9 ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf c9 71 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 2c ba ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 03 6b 40 00\n89 ef\ne8 c6 b9 ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 3b b7 ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 2b b7 ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 ff b8 ff ff\nbe 93 7a 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 0a b8 ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 79 b7 ff ff\n49 89 c4\n48 89 ef\ne8 6e b7 ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 e6 b8 ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 55 b8 ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 98 b6 ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 38 79 40 00\n48 89 df\ne8 78 b6 ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 65 b7 ff ff\neb 30\n4c 89 ff\ne8 eb b5 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 44 00 00 00\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf c9 71 40 00\n4c 89 ef\ne8 b5 b5 ff ff\n4c 89 3d ae 46 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p698
S'.text:0000000000405ae0\n.text:0000000000405ae1\n.text:0000000000405ae3\n.text:0000000000405ae5\n.text:0000000000405ae7\n.text:0000000000405ae9\n.text:0000000000405aea\n.text:0000000000405af1\n.text:0000000000405af8\n.text:0000000000405afb\n.text:0000000000405b01\n.text:0000000000405b06\n.text:0000000000405b0b\n.text:0000000000405b0e\n.text:0000000000405b11\n.text:0000000000405b13\n.text:0000000000405b16\n.text:0000000000405b18\n.text:0000000000405b1d\n.text:0000000000405b20\n.text:0000000000405b25\n.text:0000000000405b28\n.text:0000000000405b2b\n.text:0000000000405b2d\n.text:0000000000405b32\n.text:0000000000405b35\n.text:0000000000405b37\n.text:0000000000405b39\n.text:0000000000405b3d\n.text:0000000000405b42\n.text:0000000000405b47\n.text:0000000000405b4a\n.text:0000000000405b4d\n.text:0000000000405b4f\n.text:0000000000405b52\n.text:0000000000405b55\n.text:0000000000405b58\n.text:0000000000405b5d\n.text:0000000000405b60\n.text:0000000000405b63\n.text:0000000000405b66\n.text:0000000000405b68\n.text:0000000000405b6e\n.text:0000000000405b78\n.text:0000000000405b7d\n.text:0000000000405b87\n.text:0000000000405b8b\n.text:0000000000405b8d\n.text:0000000000405b93\n.text:0000000000405b98\n.text:0000000000405ba2\n.text:0000000000405ba7\n.text:0000000000405bb1\n.text:0000000000405bb5\n.text:0000000000405bba\n.text:0000000000405bbc\n.text:0000000000405bbf\n.text:0000000000405bc4\n.text:0000000000405bc6\n.text:0000000000405bc8\n.text:0000000000405bce\n.text:0000000000405bd3\n.text:0000000000405bd5\n.text:0000000000405bda\n.text:0000000000405bdd\n.text:0000000000405be0\n.text:0000000000405be6\n.text:0000000000405beb\n.text:0000000000405bf0\n.text:0000000000405bf2\n.text:0000000000405bf7\n.text:0000000000405bfa\n.text:0000000000405bff\n.text:0000000000405c04\n.text:0000000000405c09\n.text:0000000000405c0c\n.text:0000000000405c0f\n.text:0000000000405c12\n.text:0000000000405c15\n.text:0000000000405c18\n.text:0000000000405c1d\n.text:0000000000405c20\n.text:0000000000405c25\n.text:0000000000405c28\n.text:0000000000405c2d\n.text:0000000000405c30\n.text:0000000000405c35\n.text:0000000000405c3a\n.text:0000000000405c3d\n.text:0000000000405c42\n.text:0000000000405c47\n.text:0000000000405c49\n.text:0000000000405c4c\n.text:0000000000405c51\n.text:0000000000405c56\n.text:0000000000405c58\n.text:0000000000405c5b\n.text:0000000000405c5e\n.text:0000000000405c61\n.text:0000000000405c66\n.text:0000000000405c69\n.text:0000000000405c6f\n.text:0000000000405c72\n.text:0000000000405c77\n.text:0000000000405c7a\n.text:0000000000405c7d\n.text:0000000000405c82\n.text:0000000000405c85\n.text:0000000000405c8a\n.text:0000000000405c8f\n.text:0000000000405c92\n.text:0000000000405c94\n.text:0000000000405c98\n.text:0000000000405c9d\n.text:0000000000405ca2\n.text:0000000000405ca5\n.text:0000000000405caa\n.text:0000000000405cad\n.text:0000000000405cb2\n.text:0000000000405cb5\n.text:0000000000405cbb\n.text:0000000000405cbd\n.text:0000000000405cc2\n.text:0000000000405cc6\n.text:0000000000405ccb\n.text:0000000000405cce\n.text:0000000000405cd1\n.text:0000000000405cd7\n.text:0000000000405ce0\n.text:0000000000405ce3\n.text:0000000000405ce8\n.text:0000000000405ceb\n.text:0000000000405cee\n.text:0000000000405cf4\n.text:0000000000405d00\n.text:0000000000405d03\n.text:0000000000405d08\n.text:0000000000405d0b\n.text:0000000000405d0d\n.text:0000000000405d10\n.text:0000000000405d12\n.text:0000000000405d14\n.text:0000000000405d16\n.text:0000000000405d1b\n.text:0000000000405d1d\n.text:0000000000405d20\n.text:0000000000405d25\n.text:0000000000405d27\n.text:0000000000405d2c\n.text:0000000000405d2f\n.text:0000000000405d34\n.text:0000000000405d37\n.text:0000000000405d3c\n.text:0000000000405d41\n.text:0000000000405d44\n.text:0000000000405d46\n.text:0000000000405d4b\n.text:0000000000405d4d\n.text:0000000000405d53\n.text:0000000000405d56\n.text:0000000000405d5b\n.text:0000000000405d62\n.text:0000000000405d65\n.text:0000000000405d6c\n.text:0000000000405d6d\n.text:0000000000405d6f\n.text:0000000000405d71\n.text:0000000000405d73\n.text:0000000000405d75\n.text:0000000000405d76\n'
p699
tp700
sS'nl_langinfo'
p701
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p702
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_0060a138)();\u000a  return pcVar1;\u000a}\u000a\u000a
p703
S'JMP qword ptr [0x0060a138]\n'
p704
S'ff 25 f2 8b 20 00\n'
p705
S'.plt:0000000000401540\n'
p706
tp707
sS'c_isalnum'
p708
(S'\n__stdcall c_isalnum()\n'
p709
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p710
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x004058ab\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x004058ab\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x004058aa\nXOR EAX,EAX\nRET\n'
p711
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p712
S'.text:0000000000405890\n.text:0000000000405892\n.text:0000000000405895\n.text:0000000000405898\n.text:000000000040589a\n.text:00000000004058a4\n.text:00000000004058a8\n.text:00000000004058aa\n.text:00000000004058ab\n.text:00000000004058ae\n.text:00000000004058b1\n.text:00000000004058b3\n.text:00000000004058b5\n'
p713
tp714
sS'x2realloc'
p715
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p716
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p717
S'MOV EDX,0x1\nJMP 0x00405310\n'
p718
S'ba 01 00 00 00\neb 89\n'
p719
S'.text:0000000000405380\n.text:0000000000405385\n'
p720
tp721
sS'strlen'
p722
(S'\n__stdcall strlen(char * __s)\n'
p723
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_0060a090)();\u000a  return sVar1;\u000a}\u000a\u000a
p724
S'JMP qword ptr [0x0060a090]\n'
p725
S'ff 25 9a 8c 20 00\n'
p726
S'.plt:00000000004013f0\n'
p727
tp728
sS'memcmp'
p729
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p730
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_0060a0f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p731
S'JMP qword ptr [0x0060a0f0]\n'
p732
S'ff 25 3a 8c 20 00\n'
p733
S'.plt:00000000004014b0\n'
p734
tp735
sS'head_file'
p736
(S'\n__stdcall head_file(char * filename, uintmax_t n_units)\n'
p737
V\u000a_Bool head_file(char *filename,uintmax_t n_units)\u000a\u000a{\u000a  _Bool _Var1;\u000a  uint __fd;\u000a  int iVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  char *filename_00;\u000a  \u000a  if ((*filename == '-') && (filename[1] == 0)) {\u000a    have_read_stdin = 1;\u000a    filename_00 = (char *)dcgettext(0,"standard input",5);\u000a    _Var1 = head(filename_00,0);\u000a    return _Var1;\u000a  }\u000a  __fd = open(filename,0);\u000a  if ((int)__fd < 0) {\u000a    puVar3 = (uint *)__errno_location();\u000a    __fd = *puVar3;\u000a    filename_00 = "cannot open %s for reading";\u000a  }\u000a  else {\u000a    _Var1 = head(filename,(ulong)__fd);\u000a    iVar2 = close(__fd);\u000a    if (iVar2 == 0) {\u000a      return _Var1;\u000a    }\u000a    puVar3 = (uint *)__errno_location();\u000a    __fd = *puVar3;\u000a    filename_00 = "failed to close %s";\u000a  }\u000a  uVar4 = dcgettext(0,filename_00,5);\u000a  filename_00 = quotearg_style((char *)0x4);\u000a  error(0,(ulong)__fd,uVar4,filename_00);\u000a  return false;\u000a}\u000a\u000a
p738
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R15D,ECX\nMOV R12D,EDX\nMOV R14,RSI\nMOV RBX,RDI\nCMP byte ptr [RBX],0x2d\nJNZ 0x00401f53\nCMP byte ptr [RBX + 0x1],0x0\nJZ 0x00401fe6\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x004015f0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00401f9c\nMOVZX ECX,R12B\nMOVZX R8D,R15B\nMOV RDI,RBX\nMOV ESI,EBP\nMOV RDX,R14\nCALL 0x00402020\nMOV R14B,AL\nMOV EDI,EBP\nCALL 0x00401480\nTEST EAX,EAX\nJZ 0x00401fda\nCALL 0x00401330\nMOV R15D,dword ptr [RAX]\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x406a31\nJMP 0x00401fae\nCALL 0x00401330\nMOV R15D,dword ptr [RAX]\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x406a16\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,RBX\nCALL 0x004046c0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,RBP\nCALL 0x004015d0\nMOV EAX,R14D\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV byte ptr [0x0060a2a9],0x1\nXOR EDI,EDI\nMOV ESI,0x406a07\nMOV EDX,0x5\nCALL 0x004013d0\nMOVZX ECX,R12B\nMOVZX R8D,R15B\nXOR ESI,ESI\nMOV RDI,RAX\nMOV RDX,R14\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00402020\n'
p739
S'55\n41 57\n41 56\n41 54\n53\n41 89 cf\n41 89 d4\n49 89 f6\n48 89 fb\n80 3b 2d\n75 0a\n80 7b 01 00\n0f 84 93 00 00 00\n31 f6\n31 c0\n48 89 df\ne8 91 f6 ff ff\n89 c5\n85 ed\n78 37\n41 0f b6 cc\n45 0f b6 c7\n48 89 df\n89 ee\n4c 89 f2\ne8 a6 00 00 00\n41 88 c6\n89 ef\ne8 fc f4 ff ff\n85 c0\n74 52\ne8 a3 f3 ff ff\n44 8b 38\n45 31 f6\n31 ff\nbe 31 6a 40 00\neb 12\ne8 8f f3 ff ff\n44 8b 38\n45 31 f6\n31 ff\nbe 16 6a 40 00\nba 05 00 00 00\ne8 18 f4 ff ff\n48 89 c5\nbf 04 00 00 00\n48 89 de\ne8 f8 26 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 fe\n48 89 ea\ne8 f6 f5 ff ff\n44 89 f0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\nc6 05 bc 82 20 00 01\n31 ff\nbe 07 6a 40 00\nba 05 00 00 00\ne8 d2 f3 ff ff\n41 0f b6 cc\n45 0f b6 c7\n31 f6\n48 89 c7\n4c 89 f2\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 08\n'
p740
S'.text:0000000000401f30\n.text:0000000000401f31\n.text:0000000000401f33\n.text:0000000000401f35\n.text:0000000000401f37\n.text:0000000000401f38\n.text:0000000000401f3b\n.text:0000000000401f3e\n.text:0000000000401f41\n.text:0000000000401f44\n.text:0000000000401f47\n.text:0000000000401f49\n.text:0000000000401f4d\n.text:0000000000401f53\n.text:0000000000401f55\n.text:0000000000401f57\n.text:0000000000401f5a\n.text:0000000000401f5f\n.text:0000000000401f61\n.text:0000000000401f63\n.text:0000000000401f65\n.text:0000000000401f69\n.text:0000000000401f6d\n.text:0000000000401f70\n.text:0000000000401f72\n.text:0000000000401f75\n.text:0000000000401f7a\n.text:0000000000401f7d\n.text:0000000000401f7f\n.text:0000000000401f84\n.text:0000000000401f86\n.text:0000000000401f88\n.text:0000000000401f8d\n.text:0000000000401f90\n.text:0000000000401f93\n.text:0000000000401f95\n.text:0000000000401f9a\n.text:0000000000401f9c\n.text:0000000000401fa1\n.text:0000000000401fa4\n.text:0000000000401fa7\n.text:0000000000401fa9\n.text:0000000000401fae\n.text:0000000000401fb3\n.text:0000000000401fb8\n.text:0000000000401fbb\n.text:0000000000401fc0\n.text:0000000000401fc3\n.text:0000000000401fc8\n.text:0000000000401fcb\n.text:0000000000401fcd\n.text:0000000000401fcf\n.text:0000000000401fd2\n.text:0000000000401fd5\n.text:0000000000401fda\n.text:0000000000401fdd\n.text:0000000000401fde\n.text:0000000000401fe0\n.text:0000000000401fe2\n.text:0000000000401fe4\n.text:0000000000401fe5\n.text:0000000000401fe6\n.text:0000000000401fed\n.text:0000000000401fef\n.text:0000000000401ff4\n.text:0000000000401ff9\n.text:0000000000401ffe\n.text:0000000000402002\n.text:0000000000402006\n.text:0000000000402008\n.text:000000000040200b\n.text:000000000040200e\n.text:000000000040200f\n.text:0000000000402011\n.text:0000000000402013\n.text:0000000000402015\n.text:0000000000402016\n'
p741
tp742
sS'quotearg_n_style_mem'
p743
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p744
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p745
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00404620\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004043f0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p746
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p747
S'.text:0000000000404680\n.text:0000000000404681\n.text:0000000000404683\n.text:0000000000404685\n.text:0000000000404686\n.text:000000000040468a\n.text:000000000040468d\n.text:0000000000404690\n.text:0000000000404692\n.text:0000000000404695\n.text:0000000000404698\n.text:000000000040469d\n.text:000000000040469f\n.text:00000000004046a2\n.text:00000000004046a5\n.text:00000000004046a8\n.text:00000000004046ad\n.text:00000000004046b1\n.text:00000000004046b2\n.text:00000000004046b4\n.text:00000000004046b6\n.text:00000000004046b7\n'
p748
tp749
sS'_exit'
p750
(S'\n__stdcall _exit(int __status)\n'
p751
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_0060a040)();\u000a  return;\u000a}\u000a\u000a
p752
S'JMP qword ptr [0x0060a040]\n'
p753
S'ff 25 ea 8c 20 00\n'
p754
S'.plt:0000000000401350\n'
p755
tp756
sS'emit_stdin_note'
p757
(S'\n__stdcall emit_stdin_note()\n'
p758
V\u000avoid emit_stdin_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,"\u005cnWith no FILE, or when FILE is -, read standard input.\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p759
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x4067e1\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004014c0\n'
p760
S'50\n31 ff\nbe e1 67 40 00\nba 05 00 00 00\ne8 9e fa ff ff\n48 8b 35 2f 89 20 00\n48 89 c7\n58\ne9 7e fb ff ff\n'
p761
S'.text:0000000000401920\n.text:0000000000401921\n.text:0000000000401923\n.text:0000000000401928\n.text:000000000040192d\n.text:0000000000401932\n.text:0000000000401939\n.text:000000000040193c\n.text:000000000040193d\n'
p762
tp763
sS'string_to_integer'
p764
(S'\n__stdcall string_to_integer(char * n_string)\n'
p765
V\u000auintmax_t string_to_integer(char *n_string)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  char *n_str;\u000a  char *err;\u000a  \u000a  err = "invalid number of bytes";\u000a  if ((char)n_string != 0) {\u000a    err = "invalid number of lines";\u000a  }\u000a  err = (char *)dcgettext(0,err,5);\u000a  uVar1 = xdectoumax(n_str,0,0xffffffffffffffff,"bkKmMGTPEZY0",err);\u000a  return uVar1;\u000a}\u000a\u000a
p766
S'PUSH RBX\nMOV RBX,RSI\nMOV EAX,0x4069a9\nMOV ESI,0x4067a2\nTEST DIL,DIL\nCMOVNZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x004013d0\nMOV ESI,0x0\nMOV RDX,-0x1\nMOV ECX,0x40699c\nXOR R9D,R9D\nMOV RDI,RBX\nMOV R8,RAX\nPOP RBX\nJMP 0x00405530\n'
p767
S'53\n48 89 f3\nb8 a9 69 40 00\nbe a2 67 40 00\n40 84 ff\n48 0f 45 f0\n31 ff\nba 05 00 00 00\ne8 cf f4 ff ff\nbe 00 00 00 00\n48 c7 c2 ff ff ff ff\nb9 9c 69 40 00\n45 31 c9\n48 89 df\n49 89 c0\n5b\ne9 0f 36 00 00\n'
p768
S'.text:0000000000401ee0\n.text:0000000000401ee1\n.text:0000000000401ee4\n.text:0000000000401ee9\n.text:0000000000401eee\n.text:0000000000401ef1\n.text:0000000000401ef5\n.text:0000000000401ef7\n.text:0000000000401efc\n.text:0000000000401f01\n.text:0000000000401f06\n.text:0000000000401f0d\n.text:0000000000401f12\n.text:0000000000401f15\n.text:0000000000401f18\n.text:0000000000401f1b\n.text:0000000000401f1c\n'
p769
tp770
sS'xdectoumax'
p771
(S'\n__stdcall xdectoumax(char * n_str, uintmax_t min, uintmax_t max, char * suffixes, char * err)\n'
p772
V\u000auintmax_t xdectoumax(char *n_str,uintmax_t min,uintmax_t max,char *suffixes,char *err)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  \u000a  uVar1 = xnumtoumax(n_str,10,min,(char *)max,suffixes);\u000a  return uVar1;\u000a}\u000a\u000a
p773
S'PUSH RAX\nMOV R10,R8\nMOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV dword ptr [RSP],R9D\nMOV ESI,0xa\nMOV R8,RAX\nMOV R9,R10\nCALL 0x00405460\nPOP RCX\nRET\n'
p774
S'50\n4d 89 c2\n48 89 c8\n48 89 d1\n48 89 f2\n44 89 0c 24\nbe 0a 00 00 00\n49 89 c0\n4d 89 d1\ne8 0f ff ff ff\n59\nc3\n'
p775
S'.text:0000000000405530\n.text:0000000000405531\n.text:0000000000405534\n.text:0000000000405537\n.text:000000000040553a\n.text:000000000040553d\n.text:0000000000405541\n.text:0000000000405546\n.text:0000000000405549\n.text:000000000040554c\n.text:0000000000405551\n.text:0000000000405552\n'
p776
tp777
sS'__errno_location'
p778
(S'\n__stdcall __errno_location()\n'
p779
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_0060a030)();\u000a  return piVar1;\u000a}\u000a\u000a
p780
S'JMP qword ptr [0x0060a030]\n'
p781
S'ff 25 fa 8c 20 00\n'
p782
S'.plt:0000000000401330\n'
p783
tp784
sS'bkm_scale_by_power'
p785
(S'\n__stdcall bkm_scale_by_power(uintmax_t * x)\n'
p786
V\u000astrtol_error bkm_scale_by_power(uintmax_t *x)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  int in_EDX;\u000a  strtol_error sVar2;\u000a  \u000a  sVar2 = LONGINT_OK;\u000a  if (in_EDX != 0) {\u000a    do {\u000a      sVar1 = bkm_scale(x);\u000a      sVar2 = sVar2 | sVar1;\u000a      in_EDX = in_EDX + -1;\u000a    } while (in_EDX != 0);\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p787
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R14D,ESI\nMOV R15,RDI\nXOR EBP,EBP\nTEST EBX,EBX\nJZ 0x00405831\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nMOV ESI,R14D\nCALL 0x004057d0\nOR EBP,EAX\nDEC EBX\nJNZ 0x00405820\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p788
S'55\n41 57\n41 56\n53\n50\n89 d3\n41 89 f6\n49 89 ff\n31 ed\n85 db\n74 1c\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\n44 89 f6\ne8 a5 ff ff ff\n09 c5\nff cb\n75 ef\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p789
S'.text:0000000000405800\n.text:0000000000405801\n.text:0000000000405803\n.text:0000000000405805\n.text:0000000000405806\n.text:0000000000405807\n.text:0000000000405809\n.text:000000000040580c\n.text:000000000040580f\n.text:0000000000405811\n.text:0000000000405813\n.text:0000000000405815\n.text:0000000000405820\n.text:0000000000405823\n.text:0000000000405826\n.text:000000000040582b\n.text:000000000040582d\n.text:000000000040582f\n.text:0000000000405831\n.text:0000000000405833\n.text:0000000000405837\n.text:0000000000405838\n.text:000000000040583a\n.text:000000000040583c\n.text:000000000040583d\n'
p790
tp791
sS'x2nrealloc'
p792
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p793
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p794
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x0040533c\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00405369\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x0040535a\nTEST RCX,RCX\nJNZ 0x0040535a\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x004052e0\nPUSH RAX\nCALL 0x00405430\n'
p795
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p796
S'.text:0000000000405310\n.text:0000000000405313\n.text:0000000000405316\n.text:0000000000405319\n.text:000000000040531b\n.text:0000000000405325\n.text:0000000000405327\n.text:000000000040532a\n.text:000000000040532d\n.text:000000000040532f\n.text:0000000000405332\n.text:0000000000405335\n.text:000000000040533a\n.text:000000000040533c\n.text:000000000040533f\n.text:0000000000405341\n.text:0000000000405346\n.text:0000000000405348\n.text:000000000040534b\n.text:000000000040534d\n.text:0000000000405354\n.text:0000000000405357\n.text:000000000040535a\n.text:000000000040535d\n.text:0000000000405361\n.text:0000000000405364\n.text:0000000000405369\n.text:000000000040536a\n'
p797
tp798
sS'xrealloc'
p799
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p800
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p801
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x004052f7\nTEST RBX,RBX\nJNZ 0x004052f7\nCALL 0x00401310\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401590\nTEST RBX,RBX\nJZ 0x00405309\nTEST RAX,RAX\nJZ 0x0040530b\nPOP RBX\nRET\nCALL 0x00405430\n'
p802
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 1d c0 ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 91 c2 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p803
S'.text:00000000004052e0\n.text:00000000004052e1\n.text:00000000004052e4\n.text:00000000004052e7\n.text:00000000004052e9\n.text:00000000004052ec\n.text:00000000004052ee\n.text:00000000004052f3\n.text:00000000004052f5\n.text:00000000004052f6\n.text:00000000004052f7\n.text:00000000004052fa\n.text:00000000004052ff\n.text:0000000000405302\n.text:0000000000405304\n.text:0000000000405307\n.text:0000000000405309\n.text:000000000040530a\n.text:000000000040530b\n'
p804
tp805
sS'head_bytes'
p806
(S'\n__stdcall head_bytes(char * filename, uintmax_t bytes_to_write)\n'
p807
V\u000a_Bool head_bytes(char *filename,uintmax_t bytes_to_write)\u000a\u000a{\u000a  uint uVar1;\u000a  size_t n_bytes;\u000a  uint *puVar2;\u000a  undefined8 uVar3;\u000a  char *pcVar4;\u000a  ulong in_RDX;\u000a  ulong uVar5;\u000a  char buffer [8192];\u000a  char local_2038 [8200];\u000a  \u000a  if (in_RDX != 0) {\u000a    uVar5 = 0x2000;\u000a    do {\u000a      if (in_RDX < uVar5) {\u000a        uVar5 = in_RDX;\u000a      }\u000a      n_bytes = safe_read((void *)(bytes_to_write & 0xffffffff),(size_t)local_2038);\u000a      if (n_bytes == 0) {\u000a        return true;\u000a      }\u000a      if (n_bytes == 0xffffffffffffffff) {\u000a        puVar2 = (uint *)__errno_location();\u000a        uVar1 = *puVar2;\u000a        uVar3 = dcgettext(0,"error reading %s",5);\u000a        pcVar4 = quotearg_style((char *)0x4);\u000a        error(0,(ulong)uVar1,uVar3,pcVar4);\u000a        return false;\u000a      }\u000a      xwrite_stdout(local_2038,n_bytes);\u000a      in_RDX = in_RDX - n_bytes;\u000a    } while (in_RDX != 0);\u000a  }\u000a  return true;\u000a}\u000a\u000a
p808
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x2018\nMOV RBX,RDX\nMOV R12D,ESI\nMOV R15B,0x1\nTEST RBX,RBX\nJZ 0x00402563\nMOV qword ptr [RSP + 0x8],RDI\nMOV EBP,0x2000\nLEA R13,[RSP + 0x10]\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP RBX,RBP\nCMOVC RBP,RBX\nMOV EDI,R12D\nMOV RSI,R13\nMOV RDX,RBP\nCALL 0x00404cf0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00402563\nCMP R14,-0x1\nJZ 0x00402525\nMOV RDI,R13\nMOV RSI,R14\nCALL 0x00402ba0\nSUB RBX,R14\nJNZ 0x004024f0\nJMP 0x00402563\nCALL 0x00401330\nMOV EBX,dword ptr [RAX]\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x406aa5\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x8]\nCALL 0x004046c0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x004015d0\nMOV EAX,R15D\nADD RSP,0x2018\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p809
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 18 20 00 00\n48 89 d3\n41 89 f4\n41 b7 01\n48 85 db\n0f 84 90 00 00 00\n48 89 7c 24 08\nbd 00 20 00 00\n4c 8d 6c 24 10\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 39 eb\n48 0f 42 eb\n44 89 e7\n4c 89 ee\n48 89 ea\ne8 eb 27 00 00\n49 89 c6\n4d 85 f6\n74 56\n49 83 fe ff\n74 12\n4c 89 ef\n4c 89 f6\ne8 82 06 00 00\n4c 29 f3\n75 cd\neb 3e\ne8 06 ee ff ff\n8b 18\n45 31 ff\n31 ff\nbe a5 6a 40 00\nba 05 00 00 00\ne8 90 ee ff ff\n48 89 c5\nbf 04 00 00 00\n48 8b 74 24 08\ne8 6e 21 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 6d f0 ff ff\n44 89 f8\n48 81 c4 18 20 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p810
S'.text:00000000004024b0\n.text:00000000004024b1\n.text:00000000004024b3\n.text:00000000004024b5\n.text:00000000004024b7\n.text:00000000004024b9\n.text:00000000004024ba\n.text:00000000004024c1\n.text:00000000004024c4\n.text:00000000004024c7\n.text:00000000004024ca\n.text:00000000004024cd\n.text:00000000004024d3\n.text:00000000004024d8\n.text:00000000004024dd\n.text:00000000004024e2\n.text:00000000004024f0\n.text:00000000004024f3\n.text:00000000004024f7\n.text:00000000004024fa\n.text:00000000004024fd\n.text:0000000000402500\n.text:0000000000402505\n.text:0000000000402508\n.text:000000000040250b\n.text:000000000040250d\n.text:0000000000402511\n.text:0000000000402513\n.text:0000000000402516\n.text:0000000000402519\n.text:000000000040251e\n.text:0000000000402521\n.text:0000000000402523\n.text:0000000000402525\n.text:000000000040252a\n.text:000000000040252c\n.text:000000000040252f\n.text:0000000000402531\n.text:0000000000402536\n.text:000000000040253b\n.text:0000000000402540\n.text:0000000000402543\n.text:0000000000402548\n.text:000000000040254d\n.text:0000000000402552\n.text:0000000000402555\n.text:0000000000402557\n.text:0000000000402559\n.text:000000000040255b\n.text:000000000040255e\n.text:0000000000402563\n.text:0000000000402566\n.text:000000000040256d\n.text:000000000040256e\n.text:0000000000402570\n.text:0000000000402572\n.text:0000000000402574\n.text:0000000000402576\n.text:0000000000402577\n'
p811
tp812
sS'elide_tail_lines_file'
p813
(S'\n__stdcall elide_tail_lines_file(char * filename, uintmax_t n_elide, stat * st, off_t current_pos)\n'
p814
V\u000a_Bool elide_tail_lines_file(char *filename,uintmax_t n_elide,stat *st,off_t current_pos)\u000a\u000a{\u000a  ulong uVar1;\u000a  _Bool _Var2;\u000a  ulong uVar3;\u000a  off_t size;\u000a  \u000a  if (presume_input_pipe == 0) {\u000a    uVar1 = *(ulong *)(current_pos + 0x38);\u000a    uVar3 = 0x200;\u000a    if (uVar1 < 0x2000000000000001) {\u000a      uVar3 = uVar1;\u000a    }\u000a    if ((long)uVar1 < 1) {\u000a      uVar3 = 0x200;\u000a    }\u000a    if ((long)uVar3 < *(long *)(current_pos + 0x30)) {\u000a      if (size < *(long *)(current_pos + 0x30)) {\u000a        _Var2 = elide_tail_lines_seekable(filename,n_elide,(off_t)st,size);\u000a        return _Var2;\u000a      }\u000a      return true;\u000a    }\u000a  }\u000a  _Var2 = elide_tail_lines_pipe(filename,n_elide,(off_t)st);\u000a  return _Var2;\u000a}\u000a\u000a
p815
S'MOV AL,byte ptr [0x0060a2ac]\nTEST AL,AL\nJNZ 0x0040229a\nMOV R9,qword ptr [RCX + 0x30]\nMOV RCX,qword ptr [RCX + 0x38]\nMOV RAX,0x2000000000000001\nCMP RCX,RAX\nMOV R10D,0x200\nMOV EAX,0x200\nCMOVC RAX,RCX\nTEST RCX,RCX\nCMOVLE RAX,R10\nCMP R9,RAX\nJLE 0x0040229a\nCMP R9,R8\nJLE 0x004022a2\nMOV RCX,R8\nMOV R8,R9\nJMP 0x00402940\nMOV RCX,R8\nJMP 0x00402580\nMOV AL,0x1\nRET\n'
p816
S'8a 05 56 80 20 00\n84 c0\n75 40\n4c 8b 49 30\n48 8b 49 38\n48 b8 01 00 00 00 00 00 00 20\n48 39 c1\n41 ba 00 02 00 00\nb8 00 02 00 00\n48 0f 42 c1\n48 85 c9\n49 0f 4e c2\n49 39 c1\n7e 10\n4d 39 c1\n7e 13\n4c 89 c1\n4d 89 c8\ne9 a6 06 00 00\n4c 89 c1\ne9 de 02 00 00\nb0 01\nc3\n'
p817
S'.text:0000000000402250\n.text:0000000000402256\n.text:0000000000402258\n.text:000000000040225a\n.text:000000000040225e\n.text:0000000000402262\n.text:000000000040226c\n.text:000000000040226f\n.text:0000000000402275\n.text:000000000040227a\n.text:000000000040227e\n.text:0000000000402281\n.text:0000000000402285\n.text:0000000000402288\n.text:000000000040228a\n.text:000000000040228d\n.text:000000000040228f\n.text:0000000000402292\n.text:0000000000402295\n.text:000000000040229a\n.text:000000000040229d\n.text:00000000004022a2\n.text:00000000004022a4\n'
p818
tp819
sS'safe_read'
p820
(S'\n__stdcall safe_read(void * buf, size_t count)\n'
p821
V\u000asize_t safe_read(void *buf,size_t count)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  size_t sVar3;\u000a  int *piVar4;\u000a  ulong __nbytes;\u000a  size_t unaff_R14;\u000a  \u000a  while( true ) {\u000a    do {\u000a      sVar3 = read((int)buf,(void *)count,__nbytes);\u000a      if (-1 < (long)sVar3) {\u000a        return sVar3;\u000a      }\u000a      piVar4 = __errno_location();\u000a      iVar1 = *piVar4;\u000a    } while (iVar1 == 4);\u000a    uVar2 = __nbytes;\u000a    if (0x7fffe000 < __nbytes && iVar1 == 0x16) {\u000a      sVar3 = unaff_R14;\u000a      uVar2 = 0x7fffe000;\u000a    }\u000a    if (__nbytes < 0x7fffe001) break;\u000a    __nbytes = uVar2;\u000a    unaff_R14 = sVar3;\u000a    if (iVar1 != 0x16) {\u000a      return sVar3;\u000a    }\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p822
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV R15,RSI\nMOV R12D,EDI\nMOV R13D,0x7fffe000\nNOP word ptr [RAX + RAX*0x1]\nMOV EDI,R12D\nMOV RSI,R15\nMOV RDX,RBX\nCALL 0x004014a0\nMOV RBP,RAX\nTEST RBP,RBP\nJNS 0x00404d64\nCALL 0x00401330\nMOV EAX,dword ptr [RAX]\nCMP EAX,0x4\nJZ 0x00404d10\nCMP EAX,0x16\nSETZ CL\nCMP RBX,0x7fffe000\nSETA DL\nAND DL,CL\nMOV RCX,RBX\nCMOVNZ RCX,R13\nTEST DL,DL\nCMOVZ R14,RBP\nCMP RBX,0x7fffe001\nJC 0x00404d67\nCMP EAX,0x16\nMOV RBX,RCX\nJZ 0x00404d10\nJMP 0x00404d67\nMOV R14,RBP\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p823
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n48 89 d3\n49 89 f7\n41 89 fc\n41 bd 00 e0 ff 7f\n66 0f 1f 44 00 00\n44 89 e7\n4c 89 fe\n48 89 da\ne8 82 c7 ff ff\n48 89 c5\n48 85 ed\n79 3e\ne8 05 c6 ff ff\n8b 00\n83 f8 04\n74 de\n83 f8 16\n0f 94 c1\n48 81 fb 00 e0 ff 7f\n0f 97 c2\n20 ca\n48 89 d9\n49 0f 45 cd\n84 d2\n4c 0f 44 f5\n48 81 fb 01 e0 ff 7f\n72 0d\n83 f8 16\n48 89 cb\n74 ae\neb 03\n49 89 ee\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p824
S'.text:0000000000404cf0\n.text:0000000000404cf1\n.text:0000000000404cf3\n.text:0000000000404cf5\n.text:0000000000404cf7\n.text:0000000000404cf9\n.text:0000000000404cfa\n.text:0000000000404cfb\n.text:0000000000404cfe\n.text:0000000000404d01\n.text:0000000000404d04\n.text:0000000000404d0a\n.text:0000000000404d10\n.text:0000000000404d13\n.text:0000000000404d16\n.text:0000000000404d19\n.text:0000000000404d1e\n.text:0000000000404d21\n.text:0000000000404d24\n.text:0000000000404d26\n.text:0000000000404d2b\n.text:0000000000404d2d\n.text:0000000000404d30\n.text:0000000000404d32\n.text:0000000000404d35\n.text:0000000000404d38\n.text:0000000000404d3f\n.text:0000000000404d42\n.text:0000000000404d44\n.text:0000000000404d47\n.text:0000000000404d4b\n.text:0000000000404d4d\n.text:0000000000404d51\n.text:0000000000404d58\n.text:0000000000404d5a\n.text:0000000000404d5d\n.text:0000000000404d60\n.text:0000000000404d62\n.text:0000000000404d64\n.text:0000000000404d67\n.text:0000000000404d6a\n.text:0000000000404d6e\n.text:0000000000404d6f\n.text:0000000000404d71\n.text:0000000000404d73\n.text:0000000000404d75\n.text:0000000000404d77\n.text:0000000000404d78\n'
p825
tp826
sS'quotearg_n_options'
p827
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p828
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p829
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401330\nTEST R12D,R12D\nJS 0x004045a1\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x0060a200]\nCMP dword ptr [0x0060a208],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x004044bb\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x60a210\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x004052e0\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x0060a200],R15\nJNZ 0x00404482\nMOVUPS XMM0,xmmword ptr [0x0060a210]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x0060a208]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00401460\nMOV dword ptr [0x0060a208],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00403610\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x0040451d\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x0040458b\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x60a310\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00404548\nCALL 0x00401310\nMOV RDI,R15\nCALL 0x00405370\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00403610\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401320\n'
p830
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 21 cf ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 d6 5d 20 00\n44 39 25 d7 5d 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 10 a2 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 78 0e 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 8b 5d 20 00\n75 0b\n0f 10 05 92 5d 20 00\n41 0f 11 07\n8b 05 80 5d 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 bd cf ff ff\n89 1d 5f 5d 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 10 a3 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 c8 cd ff ff\n4c 89 ff\ne8 20 0e 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 7a cd ff ff\n'
p831
S'.text:00000000004043f0\n.text:00000000004043f1\n.text:00000000004043f3\n.text:00000000004043f5\n.text:00000000004043f7\n.text:00000000004043f9\n.text:00000000004043fa\n.text:00000000004043fe\n.text:0000000000404401\n.text:0000000000404404\n.text:0000000000404407\n.text:000000000040440a\n.text:000000000040440f\n.text:0000000000404412\n.text:0000000000404418\n.text:000000000040441d\n.text:000000000040441f\n.text:0000000000404423\n.text:000000000040442a\n.text:0000000000404431\n.text:0000000000404436\n.text:000000000040443b\n.text:0000000000404440\n.text:0000000000404442\n.text:0000000000404447\n.text:000000000040444a\n.text:000000000040444d\n.text:0000000000404453\n.text:0000000000404455\n.text:0000000000404458\n.text:000000000040445c\n.text:000000000040445f\n.text:0000000000404463\n.text:0000000000404468\n.text:000000000040446b\n.text:000000000040446e\n.text:0000000000404475\n.text:0000000000404477\n.text:000000000040447e\n.text:0000000000404482\n.text:0000000000404488\n.text:000000000040448b\n.text:000000000040448f\n.text:0000000000404492\n.text:0000000000404495\n.text:0000000000404499\n.text:000000000040449b\n.text:000000000040449e\n.text:00000000004044a3\n.text:00000000004044a9\n.text:00000000004044ac\n.text:00000000004044b1\n.text:00000000004044b6\n.text:00000000004044bb\n.text:00000000004044be\n.text:00000000004044c2\n.text:00000000004044c6\n.text:00000000004044cb\n.text:00000000004044cf\n.text:00000000004044d3\n.text:00000000004044d7\n.text:00000000004044db\n.text:00000000004044df\n.text:00000000004044e4\n.text:00000000004044e7\n.text:00000000004044ea\n.text:00000000004044ed\n.text:00000000004044f2\n.text:00000000004044f5\n.text:00000000004044f8\n.text:00000000004044fb\n.text:00000000004044fc\n.text:0000000000404501\n.text:0000000000404505\n.text:0000000000404508\n.text:000000000040450b\n.text:000000000040450d\n.text:0000000000404512\n.text:0000000000404516\n.text:000000000040451b\n.text:000000000040451d\n.text:0000000000404521\n.text:0000000000404526\n.text:0000000000404529\n.text:000000000040452c\n.text:0000000000404531\n.text:0000000000404536\n.text:0000000000404539\n.text:000000000040453e\n.text:0000000000404541\n.text:0000000000404543\n.text:0000000000404548\n.text:000000000040454b\n.text:0000000000404550\n.text:0000000000404553\n.text:0000000000404556\n.text:000000000040455b\n.text:000000000040455e\n.text:0000000000404562\n.text:0000000000404565\n.text:0000000000404568\n.text:000000000040456d\n.text:0000000000404572\n.text:0000000000404577\n.text:000000000040457a\n.text:000000000040457d\n.text:000000000040457e\n.text:0000000000404583\n.text:0000000000404587\n.text:000000000040458b\n.text:000000000040458f\n.text:0000000000404592\n.text:0000000000404596\n.text:0000000000404597\n.text:0000000000404599\n.text:000000000040459b\n.text:000000000040459d\n.text:000000000040459f\n.text:00000000004045a0\n.text:00000000004045a1\n'
p832
tp833
sS'strcmp'
p834
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p835
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_0060a110)();\u000a  return iVar1;\u000a}\u000a\u000a
p836
S'JMP qword ptr [0x0060a110]\n'
p837
S'ff 25 1a 8c 20 00\n'
p838
S'.plt:00000000004014f0\n'
p839
tp840
sS'read'
p841
(S'\n__stdcall read(int __fd, void * __buf, size_t __nbytes)\n'
p842
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000assize_t read(int __fd,void *__buf,size_t __nbytes)\u000a\u000a{\u000a  ssize_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_read_0060a0e8)();\u000a  return sVar1;\u000a}\u000a\u000a
p843
S'JMP qword ptr [0x0060a0e8]\n'
p844
S'ff 25 42 8c 20 00\n'
p845
S'.plt:00000000004014a0\n'
p846
tp847
sS'set_custom_quoting'
p848
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p849
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p850
S'TEST RDI,RDI\nMOV EAX,0x60a2d0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00403585\nTEST RDX,RDX\nJZ 0x00403585\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00401320\n'
p851
S'48 85 ff\nb8 d0 a2 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 95 dd ff ff\n'
p852
S'.text:0000000000403560\n.text:0000000000403563\n.text:0000000000403568\n.text:000000000040356c\n.text:0000000000403572\n.text:0000000000403575\n.text:0000000000403577\n.text:000000000040357a\n.text:000000000040357c\n.text:0000000000403580\n.text:0000000000403584\n.text:0000000000403585\n.text:0000000000403586\n'
p853
tp854
sS'c_isalpha'
p855
(S'\n__stdcall c_isalpha()\n'
p856
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p857
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x004058db\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p858
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p859
S'.text:00000000004058c0\n.text:00000000004058c3\n.text:00000000004058c6\n.text:00000000004058c8\n.text:00000000004058d2\n.text:00000000004058d4\n.text:00000000004058d7\n.text:00000000004058da\n.text:00000000004058db\n.text:00000000004058dd\n'
p860
tp861
sS'quotearg_custom_mem'
p862
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p863
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p864
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00404800\n'
p865
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p866
S'.text:0000000000404890\n.text:0000000000404893\n.text:0000000000404896\n.text:0000000000404899\n.text:000000000040489c\n.text:000000000040489e\n.text:00000000004048a1\n'
p867
tp868
sS'diagnose_copy_fd_failure'
p869
(S'\n__stdcall diagnose_copy_fd_failure(char * filename)\n'
p870
V\u000avoid diagnose_copy_fd_failure(char *filename)\u000a\u000a{\u000a  uint uVar1;\u000a  uint *puVar2;\u000a  undefined8 uVar3;\u000a  char *pcVar4;\u000a  \u000a  puVar2 = (uint *)__errno_location();\u000a  uVar1 = *puVar2;\u000a  if ((int)filename == 2) {\u000a    uVar3 = dcgettext(0,"%s: file has shrunk too much",5);\u000a    pcVar4 = quotearg_n_style_colon((char *)0x0);\u000a  }\u000a  else {\u000a    if ((int)filename != 1) {\u000a                    /* WARNING: Subroutine does not return */\u000a      abort();\u000a    }\u000a    uVar3 = dcgettext(0,"error reading %s",5);\u000a    pcVar4 = quotearg_style((char *)0x4);\u000a  }\u000a  error(0,(ulong)uVar1,uVar3,pcVar4);\u000a  return;\u000a}\u000a\u000a
p871
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RSI\nMOV EBP,EDI\nCALL 0x00401330\nMOV R14D,dword ptr [RAX]\nCMP EBP,0x2\nJZ 0x00402cde\nCMP EBP,0x1\nJNZ 0x00402d17\nXOR EDI,EDI\nMOV ESI,0x406aa5\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,RBX\nCALL 0x004046c0\nJMP 0x00402d01\nXOR EDI,EDI\nMOV ESI,0x406ad7\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RBP,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,RBX\nCALL 0x004047a0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,RBP\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004015d0\nCALL 0x00401320\n'
p872
S'55\n41 56\n53\n48 89 f3\n89 fd\ne8 82 e6 ff ff\n44 8b 30\n83 fd 02\n74 28\n83 fd 01\n75 5c\n31 ff\nbe a5 6a 40 00\nba 05 00 00 00\ne8 04 e7 ff ff\n48 89 c5\nbf 04 00 00 00\n48 89 de\ne8 e4 19 00 00\neb 23\n31 ff\nbe d7 6a 40 00\nba 05 00 00 00\ne8 e1 e6 ff ff\n48 89 c5\n31 ff\nbe 03 00 00 00\n48 89 da\ne8 9f 1a 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 f6\n48 89 ea\n5b\n41 5e\n5d\ne9 b9 e8 ff ff\ne8 04 e6 ff ff\n'
p873
S'.text:0000000000402ca0\n.text:0000000000402ca1\n.text:0000000000402ca3\n.text:0000000000402ca4\n.text:0000000000402ca7\n.text:0000000000402ca9\n.text:0000000000402cae\n.text:0000000000402cb1\n.text:0000000000402cb4\n.text:0000000000402cb6\n.text:0000000000402cb9\n.text:0000000000402cbb\n.text:0000000000402cbd\n.text:0000000000402cc2\n.text:0000000000402cc7\n.text:0000000000402ccc\n.text:0000000000402ccf\n.text:0000000000402cd4\n.text:0000000000402cd7\n.text:0000000000402cdc\n.text:0000000000402cde\n.text:0000000000402ce0\n.text:0000000000402ce5\n.text:0000000000402cea\n.text:0000000000402cef\n.text:0000000000402cf2\n.text:0000000000402cf4\n.text:0000000000402cf9\n.text:0000000000402cfc\n.text:0000000000402d01\n.text:0000000000402d04\n.text:0000000000402d06\n.text:0000000000402d08\n.text:0000000000402d0b\n.text:0000000000402d0e\n.text:0000000000402d0f\n.text:0000000000402d11\n.text:0000000000402d12\n.text:0000000000402d17\n'
p874
tp875
sS'close_stdout'
p876
(S'\n__stdcall close_stdout()\n'
p877
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_004031d7;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x40679f,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_004031d7:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p878
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x0060a268]\nCALL 0x004059e0\nTEST EAX,EAX\nJZ 0x004031d7\nCMP byte ptr [0x0060a2b8],0x0\nJZ 0x004031ec\nCALL 0x00401330\nCMP dword ptr [RAX],0x20\nJNZ 0x004031ec\nMOV RDI,qword ptr [0x0060a2a0]\nCALL 0x004059e0\nTEST EAX,EAX\nJNZ 0x00403231\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x406af9\nMOV EDX,0x5\nCALL 0x004013d0\nMOV R14,RAX\nMOV RBX,qword ptr [0x0060a2b0]\nCALL 0x00401330\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x0040323c\nXOR EDI,EDI\nMOV EDX,0x40679f\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x004015d0\nMOV EDI,dword ptr [0x0060a1f8]\nCALL 0x00401350\nMOV EDI,dword ptr [0x0060a1f8]\nCALL 0x00401350\nMOV RDI,RBX\nCALL 0x00404780\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40679b\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x004015d0\nMOV EDI,dword ptr [0x0060a1f8]\nCALL 0x00401350\n'
p879
S'55\n41 56\n53\n48 8b 3d ad 70 20 00\ne8 20 28 00 00\n85 c0\n74 13\n80 3d ed 70 20 00 00\n74 1f\ne8 5e e1 ff ff\n83 38 20\n75 15\n48 8b 3d c2 70 20 00\ne8 fd 27 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe f9 6a 40 00\nba 05 00 00 00\ne8 d3 e1 ff ff\n49 89 c6\n48 8b 1d a9 70 20 00\ne8 24 e1 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 9f 67 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 aa e3 ff ff\n8b 3d cc 6f 20 00\ne8 1f e1 ff ff\n8b 3d c1 6f 20 00\ne8 14 e1 ff ff\n48 89 df\ne8 3c 15 00 00\n48 89 c1\n31 ff\nba 9b 67 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 76 e3 ff ff\n8b 3d 98 6f 20 00\ne8 eb e0 ff ff\n'
p880
S'.text:00000000004031b0\n.text:00000000004031b1\n.text:00000000004031b3\n.text:00000000004031b4\n.text:00000000004031bb\n.text:00000000004031c0\n.text:00000000004031c2\n.text:00000000004031c4\n.text:00000000004031cb\n.text:00000000004031cd\n.text:00000000004031d2\n.text:00000000004031d5\n.text:00000000004031d7\n.text:00000000004031de\n.text:00000000004031e3\n.text:00000000004031e5\n.text:00000000004031e7\n.text:00000000004031e8\n.text:00000000004031ea\n.text:00000000004031eb\n.text:00000000004031ec\n.text:00000000004031ee\n.text:00000000004031f3\n.text:00000000004031f8\n.text:00000000004031fd\n.text:0000000000403200\n.text:0000000000403207\n.text:000000000040320c\n.text:000000000040320f\n.text:0000000000403211\n.text:0000000000403213\n.text:0000000000403215\n.text:000000000040321a\n.text:000000000040321c\n.text:000000000040321e\n.text:0000000000403221\n.text:0000000000403226\n.text:000000000040322c\n.text:0000000000403231\n.text:0000000000403237\n.text:000000000040323c\n.text:000000000040323f\n.text:0000000000403244\n.text:0000000000403247\n.text:0000000000403249\n.text:000000000040324e\n.text:0000000000403250\n.text:0000000000403252\n.text:0000000000403255\n.text:000000000040325a\n.text:0000000000403260\n'
p881
tp882
sS'version_etc_ar'
p883
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p884
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p885
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x004050f0\nJMP 0x00404d80\n'
p886
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p887
S'.text:00000000004050e0\n.text:00000000004050e7\n.text:00000000004050f0\n.text:00000000004050f6\n.text:00000000004050fa\n.text:00000000004050fc\n'
p888
tp889
sS'strtoumax'
p890
(S'\n__stdcall strtoumax(char * __nptr, char * * __endptr, int __base)\n'
p891
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000auintmax_t strtoumax(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoumax_0060a1a0)();\u000a  return uVar1;\u000a}\u000a\u000a
p892
S'JMP qword ptr [0x0060a1a0]\n'
p893
S'ff 25 8a 8b 20 00\n'
p894
S'.plt:0000000000401610\n'
p895
tp896
sS'rpl_calloc'
p897
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p898
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_0060a108)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p899
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x0040587b\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00405880\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00405880\nPUSH RAX\nCALL 0x00401330\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x004014e0\n'
p900
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 bf ba ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 55 bc ff ff\n'
p901
S'.text:0000000000405840\n.text:0000000000405843\n.text:0000000000405848\n.text:000000000040584a\n.text:000000000040584d\n.text:0000000000405852\n.text:0000000000405854\n.text:0000000000405857\n.text:000000000040585b\n.text:000000000040585d\n.text:0000000000405860\n.text:0000000000405863\n.text:0000000000405866\n.text:0000000000405869\n.text:000000000040586b\n.text:000000000040586c\n.text:0000000000405871\n.text:0000000000405877\n.text:0000000000405879\n.text:000000000040587a\n.text:000000000040587b\n.text:0000000000405880\n.text:0000000000405883\n.text:0000000000405886\n'
p902
tp903
sS'memset'
p904
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p905
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_0060a0c8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p906
S'JMP qword ptr [0x0060a0c8]\n'
p907
S'ff 25 62 8c 20 00\n'
p908
S'.plt:0000000000401460\n'
p909
tp910
sS'c_isxdigit'
p911
(S'\n__stdcall c_isxdigit()\n'
p912
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p913
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x004059bb\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p914
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p915
S'.text:00000000004059a0\n.text:00000000004059a3\n.text:00000000004059a6\n.text:00000000004059a8\n.text:00000000004059b2\n.text:00000000004059b4\n.text:00000000004059b7\n.text:00000000004059ba\n.text:00000000004059bb\n.text:00000000004059bd\n'
p916
tp917
sS'__libc_csu_fini'
p918
(S'\n__stdcall __libc_csu_fini()\n'
p919
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p920
S'RET\n'
p921
S'f3 c3\n'
p922
S'.text:0000000000405f30\n'
p923
tp924
sS'getc_unlocked'
p925
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p926
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_0060a058)();\u000a  return iVar1;\u000a}\u000a\u000a
p927
S'JMP qword ptr [0x0060a058]\n'
p928
S'ff 25 d2 8c 20 00\n'
p929
S'.plt:0000000000401380\n'
p930
tp931
sS'abort'
p932
(S'\n__stdcall abort()\n'
p933
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_0060a028)();\u000a  return;\u000a}\u000a\u000a
p934
S'JMP qword ptr [0x0060a028]\n'
p935
S'ff 25 02 8d 20 00\n'
p936
S'.plt:0000000000401320\n'
p937
tp938
sS'c_isascii'
p939
(S'\n__stdcall c_isascii()\n'
p940
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p941
S'CMP EDI,0x80\nSETC AL\nRET\n'
p942
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p943
S'.text:00000000004058e0\n.text:00000000004058e6\n.text:00000000004058e9\n'
p944
tp945
sS'head_lines'
p946
(S'\n__stdcall head_lines(char * filename, uintmax_t lines_to_write)\n'
p947
V\u000a_Bool head_lines(char *filename,uintmax_t lines_to_write)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  size_t sVar3;\u000a  __off_t _Var4;\u000a  uint *puVar5;\u000a  undefined8 uVar6;\u000a  char *pcVar7;\u000a  char cVar8;\u000a  long in_RDX;\u000a  ulong n_bytes;\u000a  void *buf;\u000a  stat st;\u000a  char buffer [8192];\u000a  stat local_20c8;\u000a  char local_2038 [8200];\u000a  \u000a  buf = (void *)(lines_to_write & 0xffffffff);\u000a  if (in_RDX != 0) {\u000a    do {\u000a      sVar3 = safe_read(buf,(size_t)local_2038);\u000a      if (sVar3 == 0xffffffffffffffff) {\u000a        puVar5 = (uint *)__errno_location();\u000a        uVar1 = *puVar5;\u000a        uVar6 = dcgettext(0,"error reading %s",5);\u000a        pcVar7 = quotearg_style((char *)0x4);\u000a        error(0,(ulong)uVar1,uVar6,pcVar7);\u000a        return false;\u000a      }\u000a      if (sVar3 == 0) {\u000a        return true;\u000a      }\u000a      cVar8 = 0;\u000a      if (line_end != 0) {\u000a        cVar8 = '\u005cn';\u000a      }\u000a      n_bytes = 0;\u000a      while (n_bytes < sVar3) {\u000a        pcVar7 = local_2038 + n_bytes;\u000a        n_bytes = n_bytes + 1;\u000a        if ((*pcVar7 == cVar8) && (in_RDX = in_RDX + -1, in_RDX == 0)) {\u000a          _Var4 = lseek((int)buf,(__off_t)(char *)(n_bytes - sVar3),1);\u000a          if ((_Var4 < 0) &&\u000a             ((iVar2 = fstat((int)buf,&local_20c8), iVar2 != 0 ||\u000a              ((local_20c8.st_mode & 0xf000) == 0x8000)))) {\u000a            elseek((off_t)buf,(char *)(n_bytes - sVar3));\u000a          }\u000a          xwrite_stdout(local_2038,n_bytes);\u000a          return true;\u000a        }\u000a      }\u000a      xwrite_stdout(local_2038,n_bytes);\u000a    } while (in_RDX != 0);\u000a  }\u000a  return true;\u000a}\u000a\u000a
p948
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x20a8\nMOV RBP,RDX\nMOV R12D,ESI\nMOV R15B,0x1\nTEST RBP,RBP\nJZ 0x00402496\nMOV qword ptr [RSP + 0x8],RDI\nLEA R13,[0xa0 + RSP]\nMOV R14D,0xa\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV EDX,0x2000\nMOV EDI,R12D\nMOV RSI,R13\nCALL 0x00404cf0\nCMP RAX,-0x1\nJZ 0x00402458\nTEST RAX,RAX\nJZ 0x00402496\nMOV CL,byte ptr [0x0060a2ab]\nTEST CL,CL\nMOV ECX,0x0\nCMOVNZ ECX,R14D\nXOR EBX,EBX\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP RBX,RAX\nJNC 0x004023e0\nMOVSX EDX,byte ptr [0xa0 + RSP + RBX*0x1]\nINC RBX\nCMP EDX,ECX\nJNZ 0x004023c0\nDEC RBP\nJNZ 0x004023c0\nJMP 0x004023f5\nMOV RDI,R13\nMOV RSI,RBX\nCALL 0x00402ba0\nTEST RBP,RBP\nJNZ 0x00402380\nJMP 0x00402496\nMOV RBP,RBX\nSUB RBP,RAX\nMOV EDX,0x1\nMOV EDI,R12D\nMOV RSI,RBP\nCALL 0x00401440\nTEST RAX,RAX\nJNS 0x00402446\nLEA RSI,[RSP + 0x10]\nMOV EDI,R12D\nCALL 0x00405f70\nTEST EAX,EAX\nJNZ 0x00402431\nMOV EAX,0xf000\nAND EAX,dword ptr [RSP + 0x28]\nCMP EAX,0x8000\nJNZ 0x00402446\nMOV EDX,0x1\nMOV EDI,R12D\nMOV RSI,RBP\nMOV RCX,qword ptr [RSP + 0x8]\nCALL 0x004021b0\nLEA RDI,[0xa0 + RSP]\nMOV RSI,RBX\nCALL 0x00402ba0\nJMP 0x00402496\nCALL 0x00401330\nMOV EBX,dword ptr [RAX]\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x406aa5\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x8]\nCALL 0x004046c0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x004015d0\nMOV EAX,R15D\nADD RSP,0x20a8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p949
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 20 00 00\n48 89 d5\n41 89 f4\n41 b7 01\n48 85 ed\n0f 84 33 01 00 00\n48 89 7c 24 08\n4c 8d ac 24 a0 00 00 00\n41 be 0a 00 00 00\n66 2e 0f 1f 84 00 00 00 00 00\nba 00 20 00 00\n44 89 e7\n4c 89 ee\ne8 60 29 00 00\n48 83 f8 ff\n0f 84 be 00 00 00\n48 85 c0\n0f 84 f3 00 00 00\n8a 0d 02 7f 20 00\n84 c9\nb9 00 00 00 00\n41 0f 45 ce\n31 db\n66 2e 0f 1f 84 00 00 00 00 00\n48 39 c3\n73 1b\n0f be 94 1c a0 00 00 00\n48 ff c3\n39 ca\n75 ec\n48 ff cd\n75 e7\neb 1a\n4c 89 ef\n48 89 de\ne8 b5 07 00 00\n48 85 ed\n75 90\ne9 a1 00 00 00\n48 89 dd\n48 29 c5\nba 01 00 00 00\n44 89 e7\n48 89 ee\ne8 35 f0 ff ff\n48 85 c0\n79 36\n48 8d 74 24 10\n44 89 e7\ne8 53 3b 00 00\n85 c0\n75 10\nb8 00 f0 00 00\n23 44 24 28\n3d 00 80 00 00\n75 15\nba 01 00 00 00\n44 89 e7\n48 89 ee\n48 8b 4c 24 08\ne8 6a fd ff ff\n48 8d bc 24 a0 00 00 00\n48 89 de\ne8 4a 07 00 00\neb 3e\ne8 d3 ee ff ff\n8b 18\n45 31 ff\n31 ff\nbe a5 6a 40 00\nba 05 00 00 00\ne8 5d ef ff ff\n48 89 c5\nbf 04 00 00 00\n48 8b 74 24 08\ne8 3b 22 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 3a f1 ff ff\n44 89 f8\n48 81 c4 a8 20 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p950
S'.text:0000000000402340\n.text:0000000000402341\n.text:0000000000402343\n.text:0000000000402345\n.text:0000000000402347\n.text:0000000000402349\n.text:000000000040234a\n.text:0000000000402351\n.text:0000000000402354\n.text:0000000000402357\n.text:000000000040235a\n.text:000000000040235d\n.text:0000000000402363\n.text:0000000000402368\n.text:0000000000402370\n.text:0000000000402376\n.text:0000000000402380\n.text:0000000000402385\n.text:0000000000402388\n.text:000000000040238b\n.text:0000000000402390\n.text:0000000000402394\n.text:000000000040239a\n.text:000000000040239d\n.text:00000000004023a3\n.text:00000000004023a9\n.text:00000000004023ab\n.text:00000000004023b0\n.text:00000000004023b4\n.text:00000000004023b6\n.text:00000000004023c0\n.text:00000000004023c3\n.text:00000000004023c5\n.text:00000000004023cd\n.text:00000000004023d0\n.text:00000000004023d2\n.text:00000000004023d4\n.text:00000000004023d7\n.text:00000000004023d9\n.text:00000000004023e0\n.text:00000000004023e3\n.text:00000000004023e6\n.text:00000000004023eb\n.text:00000000004023ee\n.text:00000000004023f0\n.text:00000000004023f5\n.text:00000000004023f8\n.text:00000000004023fb\n.text:0000000000402400\n.text:0000000000402403\n.text:0000000000402406\n.text:000000000040240b\n.text:000000000040240e\n.text:0000000000402410\n.text:0000000000402415\n.text:0000000000402418\n.text:000000000040241d\n.text:000000000040241f\n.text:0000000000402421\n.text:0000000000402426\n.text:000000000040242a\n.text:000000000040242f\n.text:0000000000402431\n.text:0000000000402436\n.text:0000000000402439\n.text:000000000040243c\n.text:0000000000402441\n.text:0000000000402446\n.text:000000000040244e\n.text:0000000000402451\n.text:0000000000402456\n.text:0000000000402458\n.text:000000000040245d\n.text:000000000040245f\n.text:0000000000402462\n.text:0000000000402464\n.text:0000000000402469\n.text:000000000040246e\n.text:0000000000402473\n.text:0000000000402476\n.text:000000000040247b\n.text:0000000000402480\n.text:0000000000402485\n.text:0000000000402488\n.text:000000000040248a\n.text:000000000040248c\n.text:000000000040248e\n.text:0000000000402491\n.text:0000000000402496\n.text:0000000000402499\n.text:00000000004024a0\n.text:00000000004024a1\n.text:00000000004024a3\n.text:00000000004024a5\n.text:00000000004024a7\n.text:00000000004024a9\n.text:00000000004024aa\n'
p951
tp952
sS'usable_st_size'
p953
(S'\n__stdcall usable_st_size(stat * sb)\n'
p954
V\u000a_Bool usable_st_size(stat *sb)\u000a\u000a{\u000a  if ((*(ushort *)&sb->st_mode & 0xf000 | 0x2000) == 0xa000) {\u000a    return true;\u000a  }\u000a  return false;\u000a}\u000a\u000a
p955
S'MOVZX EAX,word ptr [RDI + 0x18]\nOR EAX,0x2000\nAND EAX,0xf000\nCMP EAX,0xa000\nJNZ 0x004021a8\nMOV AL,0x1\nRET\nXOR EAX,EAX\nRET\n'
p956
S'0f b7 47 18\n0d 00 20 00 00\n25 00 f0 00 00\n3d 00 a0 00 00\n75 03\nb0 01\nc3\n31 c0\nc3\n'
p957
S'.text:0000000000402190\n.text:0000000000402194\n.text:0000000000402199\n.text:000000000040219e\n.text:00000000004021a3\n.text:00000000004021a5\n.text:00000000004021a7\n.text:00000000004021a8\n.text:00000000004021aa\n'
p958
tp959
sS'version_etc'
p960
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p961
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p962
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x004051b2\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00405110\nADD RSP,0xd8\nRET\n'
p963
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p964
S'.text:0000000000405170\n.text:0000000000405177\n.text:0000000000405179\n.text:000000000040517b\n.text:0000000000405180\n.text:0000000000405185\n.text:000000000040518a\n.text:0000000000405192\n.text:000000000040519a\n.text:00000000004051a2\n.text:00000000004051aa\n.text:00000000004051b2\n.text:00000000004051b7\n.text:00000000004051bc\n.text:00000000004051c1\n.text:00000000004051c6\n.text:00000000004051ce\n.text:00000000004051d3\n.text:00000000004051db\n.text:00000000004051e2\n.text:00000000004051e5\n.text:00000000004051ea\n.text:00000000004051f1\n'
p965
tp966
sS'__ctype_b_loc'
p967
(S'\n__stdcall __ctype_b_loc()\n'
p968
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_0060a1d8)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p969
S'JMP qword ptr [0x0060a1d8]\n'
p970
S'ff 25 52 8b 20 00\n'
p971
S'.plt:0000000000401680\n'
p972
tp973
sS'lseek'
p974
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p975
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_0060a0b8)();\u000a  return _Var1;\u000a}\u000a\u000a
p976
S'JMP qword ptr [0x0060a0b8]\n'
p977
S'ff 25 72 8c 20 00\n'
p978
S'.plt:0000000000401440\n'
p979
tp980
sS'quotearg'
p981
(S'\n__stdcall quotearg(char * arg)\n'
p982
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p983
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x004043e0\n'
p984
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p985
S'.text:00000000004045c0\n.text:00000000004045c3\n.text:00000000004045c5\n.text:00000000004045c8\n'
p986
tp987
sS'_start'
p988
(S'\n__stdcall _start()\n'
p989
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00609ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p990
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x405f30\nMOV RCX,0x405ec0\nMOV RDI,0x401ab0\nCALL qword ptr [0x00609ff0]\nHLT\n'
p991
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 30 5f 40 00\n48 c7 c1 c0 5e 40 00\n48 c7 c7 b0 1a 40 00\nff 15 36 89 20 00\nf4\n'
p992
S'.text:0000000000401690\n.text:0000000000401692\n.text:0000000000401695\n.text:0000000000401696\n.text:0000000000401699\n.text:000000000040169d\n.text:000000000040169e\n.text:000000000040169f\n.text:00000000004016a6\n.text:00000000004016ad\n.text:00000000004016b4\n.text:00000000004016ba\n'
p993
tp994
sS'offtostr'
p995
(S'\n__stdcall offtostr(off_t i, char * buf)\n'
p996
V\u000achar * offtostr(off_t i,char *buf)\u000a\u000a{\u000a  ulong uVar1;\u000a  long lVar2;\u000a  \u000a  buf[0x14] = 0;\u000a  if (i < 0) {\u000a    buf = buf + 0x13;\u000a    do {\u000a      lVar2 = i / 10 + (i >> 0x3f);\u000a      *buf = '0' - ((char)i + (char)lVar2 * -10);\u000a      uVar1 = i + 9;\u000a      buf = buf + -1;\u000a      i = lVar2;\u000a    } while (0x12 < uVar1);\u000a    *buf = '-';\u000a  }\u000a  else {\u000a    buf = buf + 0x14;\u000a    do {\u000a      lVar2 = i / 10 + (i >> 0x3f);\u000a      buf[-1] = (char)i + (char)lVar2 * -10 + '0';\u000a      buf = buf + -1;\u000a      uVar1 = i + 9;\u000a      i = lVar2;\u000a    } while (0x12 < uVar1);\u000a  }\u000a  return buf;\u000a}\u000a\u000a
p997
S'MOV RCX,RDI\nMOV byte ptr [RSI + 0x14],0x0\nTEST RCX,RCX\nJS 0x0040332b\nADD RSI,0x14\nMOV R8,0x6666666666666667\nNOP word ptr [RAX + RAX*0x1]\nMOV RAX,RCX\nIMUL R8\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0x2\nLEA EDI,[RDX + RAX*0x1]\nADD EDI,EDI\nLEA R9D,[RDI + RDI*0x4]\nMOV EDI,ECX\nSUB EDI,R9D\nADD EDI,0x30\nMOV byte ptr [RSI + -0x1],DIL\nDEC RSI\nADD RDX,RAX\nADD RCX,0x9\nCMP RCX,0x12\nMOV RCX,RDX\nJA 0x004032f0\nJMP 0x0040337f\nADD RSI,0x13\nMOV R8,0x6666666666666667\nNOP dword ptr [RAX]\nMOV RAX,RCX\nIMUL R8\nMOV R10,RDX\nSHR R10,0x3f\nSAR RDX,0x2\nLEA EDI,[RDX + R10*0x1]\nADD EDI,EDI\nLEA R9D,[RDI + RDI*0x4]\nMOV EDI,ECX\nSUB EDI,R9D\nMOV EAX,0x30\nSUB EAX,EDI\nMOV byte ptr [RSI],AL\nADD RDX,R10\nADD RCX,0x9\nDEC RSI\nCMP RCX,0x12\nMOV RCX,RDX\nJA 0x00403340\nMOV byte ptr [RSI],0x2d\nMOV RAX,RSI\nRET\n'
p998
S'48 89 f9\nc6 46 14 00\n48 85 c9\n78 4f\n48 83 c6 14\n49 b8 67 66 66 66 66 66 66 66\n66 0f 1f 44 00 00\n48 89 c8\n49 f7 e8\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 02\n8d 3c 02\n01 ff\n44 8d 0c bf\n89 cf\n44 29 cf\n83 c7 30\n40 88 7e ff\n48 ff ce\n48 01 c2\n48 83 c1 09\n48 83 f9 12\n48 89 d1\n77 c7\neb 54\n48 83 c6 13\n49 b8 67 66 66 66 66 66 66 66\n0f 1f 80 00 00 00 00\n48 89 c8\n49 f7 e8\n49 89 d2\n49 c1 ea 3f\n48 c1 fa 02\n42 8d 3c 12\n01 ff\n44 8d 0c bf\n89 cf\n44 29 cf\nb8 30 00 00 00\n29 f8\n88 06\n4c 01 d2\n48 83 c1 09\n48 ff ce\n48 83 f9 12\n48 89 d1\n77 c4\nc6 06 2d\n48 89 f0\nc3\n'
p999
S'.text:00000000004032d0\n.text:00000000004032d3\n.text:00000000004032d7\n.text:00000000004032da\n.text:00000000004032dc\n.text:00000000004032e0\n.text:00000000004032ea\n.text:00000000004032f0\n.text:00000000004032f3\n.text:00000000004032f6\n.text:00000000004032f9\n.text:00000000004032fd\n.text:0000000000403301\n.text:0000000000403304\n.text:0000000000403306\n.text:000000000040330a\n.text:000000000040330c\n.text:000000000040330f\n.text:0000000000403312\n.text:0000000000403316\n.text:0000000000403319\n.text:000000000040331c\n.text:0000000000403320\n.text:0000000000403324\n.text:0000000000403327\n.text:0000000000403329\n.text:000000000040332b\n.text:000000000040332f\n.text:0000000000403339\n.text:0000000000403340\n.text:0000000000403343\n.text:0000000000403346\n.text:0000000000403349\n.text:000000000040334d\n.text:0000000000403351\n.text:0000000000403355\n.text:0000000000403357\n.text:000000000040335b\n.text:000000000040335d\n.text:0000000000403360\n.text:0000000000403365\n.text:0000000000403367\n.text:0000000000403369\n.text:000000000040336c\n.text:0000000000403370\n.text:0000000000403373\n.text:0000000000403377\n.text:000000000040337a\n.text:000000000040337c\n.text:000000000040337f\n.text:0000000000403382\n'
p1000
tp1001
sS'c_iscntrl'
p1002
(S'\n__stdcall c_iscntrl()\n'
p1003
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1004
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00405908\nRET\nCMP EDI,0x7f\nJZ 0x00405907\nXOR EAX,EAX\nRET\n'
p1005
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1006
S'.text:0000000000405900\n.text:0000000000405902\n.text:0000000000405905\n.text:0000000000405907\n.text:0000000000405908\n.text:000000000040590b\n.text:000000000040590d\n.text:000000000040590f\n'
p1007
tp1008
sS'memrchr'
p1009
(S'\n__stdcall memrchr(void * __s, int __c, size_t __n)\n'
p1010
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memrchr(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memrchr_0060a188)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1011
S'JMP qword ptr [0x0060a188]\n'
p1012
S'ff 25 a2 8b 20 00\n'
p1013
S'.plt:00000000004015e0\n'
p1014
tp1015
sS'c_isblank'
p1016
(S'\n__stdcall c_isblank()\n'
p1017
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1018
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1019
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1020
S'.text:00000000004058f0\n.text:00000000004058f3\n.text:00000000004058f6\n.text:00000000004058f9\n.text:00000000004058fc\n.text:00000000004058fe\n'
p1021
tp1022
sS'quotearg_n_mem'
p1023
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p1024
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p1025
S'MOV ECX,0x60a2d0\nJMP 0x004043f0\n'
p1026
S'b9 d0 a2 60 00\ne9 36 fe ff ff\n'
p1027
S'.text:00000000004045b0\n.text:00000000004045b5\n'
p1028
tp1029
sS'atexit'
p1030
(S'\n__stdcall atexit(__func * __func)\n'
p1031
V\u000a/* WARNING: Removing unreachable block (ram,0x00405f60) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_0060a1a8)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1032
S'MOV RAX,0x60a1e8\nTEST RAX,RAX\nJZ 0x00405f60\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401620\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401620\n'
p1033
S'48 c7 c0 e8 a1 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 ca b6 ff ff\n31 d2\n31 f6\ne9 b7 b6 ff ff\n'
p1034
S'.text:0000000000405f40\n.text:0000000000405f47\n.text:0000000000405f4a\n.text:0000000000405f4c\n.text:0000000000405f4f\n.text:0000000000405f51\n.text:0000000000405f60\n.text:0000000000405f62\n.text:0000000000405f64\n'
p1035
tp1036
sS'__printf_chk'
p1037
(S'\n__stdcall __printf_chk()\n'
p1038
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_0060a178)();\u000a  return;\u000a}\u000a\u000a
p1039
S'JMP qword ptr [0x0060a178]\n'
p1040
S'ff 25 b2 8b 20 00\n'
p1041
S'.plt:00000000004015c0\n'
p1042
tp1043
sS'fdopen'
p1044
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1045
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_0060a168)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1046
S'JMP qword ptr [0x0060a168]\n'
p1047
S'ff 25 c2 8b 20 00\n'
p1048
S'.plt:00000000004015a0\n'
p1049
tp1050
sS'error'
p1051
(S'\n__stdcall error()\n'
p1052
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_0060a180)();\u000a  return;\u000a}\u000a\u000a
p1053
S'JMP qword ptr [0x0060a180]\n'
p1054
S'ff 25 aa 8b 20 00\n'
p1055
S'.plt:00000000004015d0\n'
p1056
tp1057
sS'head'
p1058
(S'\n__stdcall head(char * filename, uintmax_t n_units)\n'
p1059
V\u000a_Bool head(char *filename,uintmax_t n_units)\u000a\u000a{\u000a  uint uVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  uint *puVar4;\u000a  undefined8 uVar5;\u000a  char *pcVar6;\u000a  off_t oVar7;\u000a  char in_CL;\u000a  stat *st;\u000a  ulong bytes_to_write;\u000a  char in_R8B;\u000a  stat local_c0;\u000a  \u000a  bytes_to_write = n_units & 0xffffffff;\u000a  if (print_headers == 1) {\u000a    write_header(filename);\u000a  }\u000a  if (in_R8B != 0) {\u000a    iVar3 = fstat((int)bytes_to_write,(stat *)&local_c0);\u000a    if (iVar3 == 0) {\u000a      if (((presume_input_pipe == 0) && (_Var2 = usable_st_size(&local_c0), _Var2 != false)) &&\u000a         (oVar7 = elseek(bytes_to_write,(char *)0x0), oVar7 < 0)) {\u000a        return false;\u000a      }\u000a      if (in_CL == 0) {\u000a        _Var2 = elide_tail_bytes_file(filename,bytes_to_write,st,(off_t)&local_c0);\u000a      }\u000a      else {\u000a        _Var2 = elide_tail_lines_file(filename,bytes_to_write,st,(off_t)&local_c0);\u000a      }\u000a    }\u000a    else {\u000a      puVar4 = (uint *)__errno_location();\u000a      uVar1 = *puVar4;\u000a      _Var2 = false;\u000a      uVar5 = dcgettext(0,"cannot fstat %s",5);\u000a      pcVar6 = quotearg_style((char *)0x4);\u000a      error(0,(ulong)uVar1,uVar5,pcVar6);\u000a    }\u000a    return _Var2;\u000a  }\u000a  if (in_CL != 0) {\u000a    _Var2 = head_lines(filename,bytes_to_write);\u000a    return _Var2;\u000a  }\u000a  _Var2 = head_bytes(filename,bytes_to_write);\u000a  return _Var2;\u000a}\u000a\u000a
p1060
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV EBX,R8D\nMOV R15D,ECX\nMOV R14,RDX\nMOV EBP,ESI\nMOV R13,RDI\nCMP byte ptr [0x0060a2aa],0x1\nJNZ 0x00402050\nMOV RDI,R13\nCALL 0x00402150\nTEST BL,BL\nJZ 0x004020a5\nLEA RSI,[RSP + 0x8]\nMOV EDI,EBP\nCALL 0x00405f70\nTEST EAX,EAX\nJZ 0x004020d7\nCALL 0x00401330\nMOV EBX,dword ptr [RAX]\nXOR R12D,R12D\nXOR EDI,EDI\nMOV ESI,0x406a44\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,R13\nCALL 0x004046c0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x004015d0\nJMP 0x00402136\nMOV RDI,R13\nMOV ESI,EBP\nMOV RDX,R14\nADD RSP,0x98\nTEST R15B,R15B\nJZ 0x004020c8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00402340\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004024b0\nMOV RBX,-0x1\nMOV AL,byte ptr [0x0060a2ac]\nTEST AL,AL\nJNZ 0x00402112\nLEA RDI,[RSP + 0x8]\nCALL 0x00402190\nTEST AL,AL\nJZ 0x00402112\nXOR R12D,R12D\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EBP\nMOV RCX,R13\nCALL 0x004021b0\nMOV RBX,RAX\nTEST RBX,RBX\nJS 0x00402136\nLEA RCX,[RSP + 0x8]\nMOV RDI,R13\nMOV ESI,EBP\nMOV RDX,R14\nMOV R8,RBX\nTEST R15B,R15B\nJZ 0x0040212e\nCALL 0x00402250\nJMP 0x00402133\nCALL 0x004022b0\nMOV R12B,AL\nMOV EAX,R12D\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1061
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n44 89 c3\n41 89 cf\n49 89 d6\n89 f5\n49 89 fd\n80 3d 64 82 20 00 01\n75 08\n4c 89 ef\ne8 00 01 00 00\n84 db\n74 51\n48 8d 74 24 08\n89 ef\ne8 10 3f 00 00\n85 c0\n74 73\ne8 c7 f2 ff ff\n8b 18\n45 31 e4\n31 ff\nbe 44 6a 40 00\nba 05 00 00 00\ne8 51 f3 ff ff\n48 89 c5\nbf 04 00 00 00\n4c 89 ee\ne8 31 26 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 30 f5 ff ff\ne9 91 00 00 00\n4c 89 ef\n89 ee\n4c 89 f2\n48 81 c4 98 00 00 00\n45 84 ff\n74 0f\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 78 02 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 d9 03 00 00\n48 c7 c3 ff ff ff ff\n8a 05 c8 81 20 00\n84 c0\n75 2a\n48 8d 7c 24 08\ne8 9e 00 00 00\n84 c0\n74 1c\n45 31 e4\n31 f6\nba 01 00 00 00\n89 ef\n4c 89 e9\ne8 a6 00 00 00\n48 89 c3\n48 85 db\n78 24\n48 8d 4c 24 08\n4c 89 ef\n89 ee\n4c 89 f2\n49 89 d8\n45 84 ff\n74 07\ne8 24 01 00 00\neb 05\ne8 7d 01 00 00\n41 88 c4\n44 89 e0\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1062
S'.text:0000000000402020\n.text:0000000000402021\n.text:0000000000402023\n.text:0000000000402025\n.text:0000000000402027\n.text:0000000000402029\n.text:000000000040202a\n.text:0000000000402031\n.text:0000000000402034\n.text:0000000000402037\n.text:000000000040203a\n.text:000000000040203c\n.text:000000000040203f\n.text:0000000000402046\n.text:0000000000402048\n.text:000000000040204b\n.text:0000000000402050\n.text:0000000000402052\n.text:0000000000402054\n.text:0000000000402059\n.text:000000000040205b\n.text:0000000000402060\n.text:0000000000402062\n.text:0000000000402064\n.text:0000000000402069\n.text:000000000040206b\n.text:000000000040206e\n.text:0000000000402070\n.text:0000000000402075\n.text:000000000040207a\n.text:000000000040207f\n.text:0000000000402082\n.text:0000000000402087\n.text:000000000040208a\n.text:000000000040208f\n.text:0000000000402092\n.text:0000000000402094\n.text:0000000000402096\n.text:0000000000402098\n.text:000000000040209b\n.text:00000000004020a0\n.text:00000000004020a5\n.text:00000000004020a8\n.text:00000000004020aa\n.text:00000000004020ad\n.text:00000000004020b4\n.text:00000000004020b7\n.text:00000000004020b9\n.text:00000000004020ba\n.text:00000000004020bc\n.text:00000000004020be\n.text:00000000004020c0\n.text:00000000004020c2\n.text:00000000004020c3\n.text:00000000004020c8\n.text:00000000004020c9\n.text:00000000004020cb\n.text:00000000004020cd\n.text:00000000004020cf\n.text:00000000004020d1\n.text:00000000004020d2\n.text:00000000004020d7\n.text:00000000004020de\n.text:00000000004020e4\n.text:00000000004020e6\n.text:00000000004020e8\n.text:00000000004020ed\n.text:00000000004020f2\n.text:00000000004020f4\n.text:00000000004020f6\n.text:00000000004020f9\n.text:00000000004020fb\n.text:0000000000402100\n.text:0000000000402102\n.text:0000000000402105\n.text:000000000040210a\n.text:000000000040210d\n.text:0000000000402110\n.text:0000000000402112\n.text:0000000000402117\n.text:000000000040211a\n.text:000000000040211c\n.text:000000000040211f\n.text:0000000000402122\n.text:0000000000402125\n.text:0000000000402127\n.text:000000000040212c\n.text:000000000040212e\n.text:0000000000402133\n.text:0000000000402136\n.text:0000000000402139\n.text:0000000000402140\n.text:0000000000402141\n.text:0000000000402143\n.text:0000000000402145\n.text:0000000000402147\n.text:0000000000402149\n.text:000000000040214a\n'
p1063
tp1064
sS'strcaseeq6'
p1065
(S'\n__stdcall strcaseeq6()\n'
p1066
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1067
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405990\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00404c82\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404c89\nJMP 0x00404c9e\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404c9e\nTEST BPL,BPL\nJZ 0x00404c99\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00404cb0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1068
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 21 0d 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1069
S'.text:0000000000404c60\n.text:0000000000404c61\n.text:0000000000404c62\n.text:0000000000404c63\n.text:0000000000404c65\n.text:0000000000404c68\n.text:0000000000404c6a\n.text:0000000000404c6f\n.text:0000000000404c73\n.text:0000000000404c75\n.text:0000000000404c77\n.text:0000000000404c7a\n.text:0000000000404c7c\n.text:0000000000404c7e\n.text:0000000000404c80\n.text:0000000000404c82\n.text:0000000000404c84\n.text:0000000000404c87\n.text:0000000000404c89\n.text:0000000000404c8c\n.text:0000000000404c8e\n.text:0000000000404c91\n.text:0000000000404c95\n.text:0000000000404c96\n.text:0000000000404c97\n.text:0000000000404c99\n.text:0000000000404c9e\n.text:0000000000404ca2\n.text:0000000000404ca3\n.text:0000000000404ca4\n'
p1070
tp1071
sS'strcaseeq5'
p1072
(S'\n__stdcall strcaseeq5()\n'
p1073
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1074
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405990\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00404c36\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404c3d\nJMP 0x00404c54\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404c54\nTEST BPL,BPL\nJZ 0x00404c4f\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00404c60\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1075
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 6d 0d 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1076
S'.text:0000000000404c10\n.text:0000000000404c11\n.text:0000000000404c13\n.text:0000000000404c14\n.text:0000000000404c17\n.text:0000000000404c19\n.text:0000000000404c1c\n.text:0000000000404c1e\n.text:0000000000404c23\n.text:0000000000404c27\n.text:0000000000404c29\n.text:0000000000404c2b\n.text:0000000000404c2e\n.text:0000000000404c30\n.text:0000000000404c32\n.text:0000000000404c34\n.text:0000000000404c36\n.text:0000000000404c38\n.text:0000000000404c3b\n.text:0000000000404c3d\n.text:0000000000404c40\n.text:0000000000404c42\n.text:0000000000404c46\n.text:0000000000404c49\n.text:0000000000404c4a\n.text:0000000000404c4c\n.text:0000000000404c4d\n.text:0000000000404c4f\n.text:0000000000404c54\n.text:0000000000404c55\n.text:0000000000404c57\n.text:0000000000404c58\n'
p1077
tp1078
sS'emit_ancillary_info'
p1079
(S'\n__stdcall emit_ancillary_info()\n'
p1080
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x004062b0;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("head",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "head";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,&DAT_00406723,uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/",&DAT_00406723);\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x4071c9;\u000a  if (__s2 == "head") {\u000a    uVar3 = 0x406880;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p1081
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x4062b0\nMOV ESI,0x406864\nNOP\nMOV EDI,0x406723\nCALL 0x004014f0\nTEST EAX,EAX\nJZ 0x004019ab\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401990\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x406723\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x4068c3\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x406770\nMOV ECX,0x4068da\nXOR EAX,EAX\nCALL 0x004015c0\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x004015b0\nTEST RAX,RAX\nJZ 0x00401a34\nMOV ESI,0x406901\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00401340\nTEST EAX,EAX\nJZ 0x00401a34\nXOR EDI,EDI\nMOV ESI,0x406905\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x406723\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004015c0\nXOR EDI,EDI\nMOV ESI,0x40694a\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,RAX\nMOV R14D,0x406723\nMOV EDI,0x1\nMOV EDX,0x4068da\nMOV ECX,0x406723\nXOR EAX,EAX\nCALL 0x004015c0\nXOR EDI,EDI\nMOV ESI,0x406969\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x406880\nMOV ECX,0x4071c9\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x004015c0\n'
p1082
S'41 56\n53\n50\nbb b0 62 40 00\nbe 64 68 40 00\n66 90\nbf 23 67 40 00\ne8 56 fb ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 23 67 40 00\n48 0f 45 d8\n31 ff\nbe c3 68 40 00\nba 05 00 00 00\ne8 04 fa ff ff\n48 89 c6\nbf 01 00 00 00\nba 70 67 40 00\nb9 da 68 40 00\n31 c0\ne8 db fb ff ff\nbf 05 00 00 00\n31 f6\ne8 bf fb ff ff\n48 85 c0\n74 3e\nbe 01 69 40 00\nba 03 00 00 00\n48 89 c7\ne8 38 f9 ff ff\n85 c0\n74 28\n31 ff\nbe 05 69 40 00\nba 05 00 00 00\ne8 b3 f9 ff ff\n48 89 c1\nbf 01 00 00 00\nba 23 67 40 00\n31 c0\n48 89 ce\ne8 8c fb ff ff\n31 ff\nbe 4a 69 40 00\nba 05 00 00 00\ne8 8b f9 ff ff\n48 89 c6\n41 be 23 67 40 00\nbf 01 00 00 00\nba da 68 40 00\nb9 23 67 40 00\n31 c0\ne8 5c fb ff ff\n31 ff\nbe 69 69 40 00\nba 05 00 00 00\ne8 5b f9 ff ff\n48 89 c2\n4c 39 f3\nb8 80 68 40 00\nb9 c9 71 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 1e fb ff ff\n'
p1083
S'.text:0000000000401980\n.text:0000000000401982\n.text:0000000000401983\n.text:0000000000401984\n.text:0000000000401989\n.text:000000000040198e\n.text:0000000000401990\n.text:0000000000401995\n.text:000000000040199a\n.text:000000000040199c\n.text:000000000040199e\n.text:00000000004019a2\n.text:00000000004019a6\n.text:00000000004019a9\n.text:00000000004019ab\n.text:00000000004019af\n.text:00000000004019b2\n.text:00000000004019b7\n.text:00000000004019bb\n.text:00000000004019bd\n.text:00000000004019c2\n.text:00000000004019c7\n.text:00000000004019cc\n.text:00000000004019cf\n.text:00000000004019d4\n.text:00000000004019d9\n.text:00000000004019de\n.text:00000000004019e0\n.text:00000000004019e5\n.text:00000000004019ea\n.text:00000000004019ec\n.text:00000000004019f1\n.text:00000000004019f4\n.text:00000000004019f6\n.text:00000000004019fb\n.text:0000000000401a00\n.text:0000000000401a03\n.text:0000000000401a08\n.text:0000000000401a0a\n.text:0000000000401a0c\n.text:0000000000401a0e\n.text:0000000000401a13\n.text:0000000000401a18\n.text:0000000000401a1d\n.text:0000000000401a20\n.text:0000000000401a25\n.text:0000000000401a2a\n.text:0000000000401a2c\n.text:0000000000401a2f\n.text:0000000000401a34\n.text:0000000000401a36\n.text:0000000000401a3b\n.text:0000000000401a40\n.text:0000000000401a45\n.text:0000000000401a48\n.text:0000000000401a4e\n.text:0000000000401a53\n.text:0000000000401a58\n.text:0000000000401a5d\n.text:0000000000401a5f\n.text:0000000000401a64\n.text:0000000000401a66\n.text:0000000000401a6b\n.text:0000000000401a70\n.text:0000000000401a75\n.text:0000000000401a78\n.text:0000000000401a7b\n.text:0000000000401a80\n.text:0000000000401a85\n.text:0000000000401a89\n.text:0000000000401a8e\n.text:0000000000401a90\n.text:0000000000401a93\n.text:0000000000401a96\n.text:0000000000401a9a\n.text:0000000000401a9b\n.text:0000000000401a9d\n'
p1084
tp1085
sS'strcaseeq7'
p1086
(S'\n__stdcall strcaseeq7()\n'
p1087
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1088
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00405990\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00404cd2\nTEST ECX,0xffffffdf\nJNZ 0x00404cd6\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x00404cda\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1089
S'53\n48 89 fb\n31 ff\ne8 d5 0c 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1090
S'.text:0000000000404cb0\n.text:0000000000404cb1\n.text:0000000000404cb4\n.text:0000000000404cb6\n.text:0000000000404cbb\n.text:0000000000404cbf\n.text:0000000000404cc1\n.text:0000000000404cc3\n.text:0000000000404cc9\n.text:0000000000404ccb\n.text:0000000000404cd0\n.text:0000000000404cd1\n.text:0000000000404cd2\n.text:0000000000404cd4\n.text:0000000000404cd6\n.text:0000000000404cd8\n.text:0000000000404cd9\n.text:0000000000404cda\n.text:0000000000404cdf\n.text:0000000000404ce0\n'
p1091
tp1092
sS'version_etc_va'
p1093
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p1094
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p1095
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x00405140\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x0040514c\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00405161\nINC R9\nCMP R9,0xa\nJC 0x00405120\nMOV R8,RSP\nCALL 0x00404d80\nADD RSP,0x58\nRET\n'
p1096
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p1097
S'.text:0000000000405110\n.text:0000000000405114\n.text:0000000000405117\n.text:0000000000405120\n.text:0000000000405123\n.text:0000000000405127\n.text:0000000000405129\n.text:000000000040512c\n.text:0000000000405130\n.text:0000000000405134\n.text:0000000000405137\n.text:0000000000405140\n.text:0000000000405144\n.text:0000000000405148\n.text:000000000040514c\n.text:000000000040514f\n.text:0000000000405153\n.text:0000000000405156\n.text:0000000000405158\n.text:000000000040515b\n.text:000000000040515f\n.text:0000000000405161\n.text:0000000000405164\n.text:0000000000405169\n.text:000000000040516d\n'
p1098
tp1099
sS'xzalloc'
p1100
(S'\n__stdcall xzalloc(size_t s)\n'
p1101
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p1102
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x004052a0\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00401460\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1103
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 b4 c0 ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1104
S'.text:0000000000405390\n.text:0000000000405392\n.text:0000000000405393\n.text:0000000000405394\n.text:0000000000405397\n.text:000000000040539c\n.text:000000000040539f\n.text:00000000004053a1\n.text:00000000004053a4\n.text:00000000004053a7\n.text:00000000004053ac\n.text:00000000004053af\n.text:00000000004053b3\n.text:00000000004053b4\n.text:00000000004053b6\n'
p1105
tp1106
sS'umaxtostr'
p1107
(S'\n__stdcall umaxtostr(uintmax_t i, char * buf)\n'
p1108
V\u000achar * umaxtostr(uintmax_t i,char *buf)\u000a\u000a{\u000a  bool bVar1;\u000a  \u000a  buf[0x14] = 0;\u000a  buf = buf + 0x14;\u000a  do {\u000a    buf[-1] = (char)i + ((byte)((SUB168(ZEXT816(i) * ZEXT816(0xcccccccccccccccd) >> 0x40,0) &\u000a                                0xffffffff) >> 2) & 0xfe) * -5 | 0x30;\u000a    buf = buf + -1;\u000a    bVar1 = 9 < i;\u000a    i = i / 10;\u000a  } while (bVar1);\u000a  return buf;\u000a}\u000a\u000a
p1109
S'MOV RCX,RDI\nMOV byte ptr [RSI + 0x14],0x0\nADD RSI,0x14\nMOV R8,-0x3333333333333333\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RAX,RCX\nMUL R8\nMOV EAX,EDX\nSHR EAX,0x2\nAND EAX,0x3ffffffe\nLEA EAX,[RAX + RAX*0x4]\nMOV EDI,ECX\nSUB EDI,EAX\nOR DIL,0x30\nMOV byte ptr [RSI + -0x1],DIL\nDEC RSI\nSHR RDX,0x3\nCMP RCX,0x9\nMOV RCX,RDX\nJA 0x004033b0\nMOV RAX,RSI\nRET\n'
p1110
S'48 89 f9\nc6 46 14 00\n48 83 c6 14\n49 b8 cd cc cc cc cc cc cc cc\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 c8\n49 f7 e0\n89 d0\nc1 e8 02\n25 fe ff ff 3f\n8d 04 80\n89 cf\n29 c7\n40 80 cf 30\n40 88 7e ff\n48 ff ce\n48 c1 ea 03\n48 83 f9 09\n48 89 d1\n77 d1\n48 89 f0\nc3\n'
p1111
S'.text:0000000000403390\n.text:0000000000403393\n.text:0000000000403397\n.text:000000000040339b\n.text:00000000004033a5\n.text:00000000004033b0\n.text:00000000004033b3\n.text:00000000004033b6\n.text:00000000004033b8\n.text:00000000004033bb\n.text:00000000004033c0\n.text:00000000004033c3\n.text:00000000004033c5\n.text:00000000004033c7\n.text:00000000004033cb\n.text:00000000004033cf\n.text:00000000004033d2\n.text:00000000004033d6\n.text:00000000004033da\n.text:00000000004033dd\n.text:00000000004033df\n.text:00000000004033e2\n'
p1112
tp1113
sS'emit_mandatory_arg_note'
p1114
(S'\n__stdcall emit_mandatory_arg_note()\n'
p1115
V\u000avoid emit_mandatory_arg_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnMandatory arguments to long options are mandatory for short options too.\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p1116
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x406819\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004014c0\n'
p1117
S'50\n31 ff\nbe 19 68 40 00\nba 05 00 00 00\ne8 6e fa ff ff\n48 8b 35 ff 88 20 00\n48 89 c7\n58\ne9 4e fb ff ff\n'
p1118
S'.text:0000000000401950\n.text:0000000000401951\n.text:0000000000401953\n.text:0000000000401958\n.text:000000000040195d\n.text:0000000000401962\n.text:0000000000401969\n.text:000000000040196c\n.text:000000000040196d\n'
p1119
tp1120
sS'strcaseeq0'
p1121
(S'\n__stdcall strcaseeq0()\n'
p1122
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1123
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405990\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x004049e5\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004049ec\nJMP 0x00404a20\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404a20\nTEST BPL,BPL\nJZ 0x00404a1b\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00404a30\nJMP 0x00404a20\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1124
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 bd 0f 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1125
S'.text:00000000004049b0\n.text:00000000004049b1\n.text:00000000004049b3\n.text:00000000004049b5\n.text:00000000004049b7\n.text:00000000004049b9\n.text:00000000004049ba\n.text:00000000004049bb\n.text:00000000004049be\n.text:00000000004049c1\n.text:00000000004049c4\n.text:00000000004049c7\n.text:00000000004049c9\n.text:00000000004049cc\n.text:00000000004049ce\n.text:00000000004049d3\n.text:00000000004049d6\n.text:00000000004049d8\n.text:00000000004049da\n.text:00000000004049dd\n.text:00000000004049df\n.text:00000000004049e1\n.text:00000000004049e3\n.text:00000000004049e5\n.text:00000000004049e7\n.text:00000000004049ea\n.text:00000000004049ec\n.text:00000000004049ef\n.text:00000000004049f1\n.text:00000000004049f5\n.text:00000000004049fa\n.text:00000000004049fd\n.text:0000000000404a01\n.text:0000000000404a05\n.text:0000000000404a09\n.text:0000000000404a0d\n.text:0000000000404a11\n.text:0000000000404a14\n.text:0000000000404a19\n.text:0000000000404a1b\n.text:0000000000404a20\n.text:0000000000404a24\n.text:0000000000404a25\n.text:0000000000404a27\n.text:0000000000404a29\n.text:0000000000404a2b\n.text:0000000000404a2d\n.text:0000000000404a2e\n'
p1126
tp1127
sS'strcaseeq2'
p1128
(S'\n__stdcall strcaseeq2()\n'
p1129
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1130
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405990\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00404af6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404afd\nJMP 0x00404b2a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404b2a\nTEST BPL,BPL\nJZ 0x00404b25\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404b40\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1131
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 ad 0e 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1132
S'.text:0000000000404ac0\n.text:0000000000404ac1\n.text:0000000000404ac3\n.text:0000000000404ac5\n.text:0000000000404ac7\n.text:0000000000404ac9\n.text:0000000000404aca\n.text:0000000000404acb\n.text:0000000000404ace\n.text:0000000000404ad1\n.text:0000000000404ad4\n.text:0000000000404ad7\n.text:0000000000404ad9\n.text:0000000000404adc\n.text:0000000000404ade\n.text:0000000000404ae3\n.text:0000000000404ae7\n.text:0000000000404ae9\n.text:0000000000404aeb\n.text:0000000000404aee\n.text:0000000000404af0\n.text:0000000000404af2\n.text:0000000000404af4\n.text:0000000000404af6\n.text:0000000000404af8\n.text:0000000000404afb\n.text:0000000000404afd\n.text:0000000000404b00\n.text:0000000000404b02\n.text:0000000000404b06\n.text:0000000000404b0a\n.text:0000000000404b0e\n.text:0000000000404b12\n.text:0000000000404b15\n.text:0000000000404b19\n.text:0000000000404b1a\n.text:0000000000404b1c\n.text:0000000000404b1e\n.text:0000000000404b20\n.text:0000000000404b22\n.text:0000000000404b23\n.text:0000000000404b25\n.text:0000000000404b2a\n.text:0000000000404b2e\n.text:0000000000404b2f\n.text:0000000000404b31\n.text:0000000000404b33\n.text:0000000000404b35\n.text:0000000000404b37\n.text:0000000000404b38\n'
p1133
tp1134
sS'strcaseeq1'
p1135
(S'\n__stdcall strcaseeq1()\n'
p1136
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1137
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00405990\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x00404a6d\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404a74\nJMP 0x00404aa7\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404aa7\nTEST BPL,BPL\nJZ 0x00404aa2\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404ac0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1138
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 36 0f 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1139
S'.text:0000000000404a30\n.text:0000000000404a31\n.text:0000000000404a33\n.text:0000000000404a35\n.text:0000000000404a37\n.text:0000000000404a39\n.text:0000000000404a3a\n.text:0000000000404a3b\n.text:0000000000404a40\n.text:0000000000404a43\n.text:0000000000404a46\n.text:0000000000404a49\n.text:0000000000404a4b\n.text:0000000000404a4e\n.text:0000000000404a53\n.text:0000000000404a55\n.text:0000000000404a5a\n.text:0000000000404a5e\n.text:0000000000404a60\n.text:0000000000404a62\n.text:0000000000404a65\n.text:0000000000404a67\n.text:0000000000404a69\n.text:0000000000404a6b\n.text:0000000000404a6d\n.text:0000000000404a6f\n.text:0000000000404a72\n.text:0000000000404a74\n.text:0000000000404a77\n.text:0000000000404a79\n.text:0000000000404a7d\n.text:0000000000404a81\n.text:0000000000404a85\n.text:0000000000404a8b\n.text:0000000000404a8f\n.text:0000000000404a92\n.text:0000000000404a96\n.text:0000000000404a97\n.text:0000000000404a99\n.text:0000000000404a9b\n.text:0000000000404a9d\n.text:0000000000404a9f\n.text:0000000000404aa0\n.text:0000000000404aa2\n.text:0000000000404aa7\n.text:0000000000404aab\n.text:0000000000404aac\n.text:0000000000404aae\n.text:0000000000404ab0\n.text:0000000000404ab2\n.text:0000000000404ab4\n.text:0000000000404ab5\n'
p1140
tp1141
sS'strcaseeq4'
p1142
(S'\n__stdcall strcaseeq4()\n'
p1143
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1144
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405990\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x00404bdc\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404be3\nJMP 0x00404c04\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404c04\nTEST BPL,BPL\nJZ 0x00404bff\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404c10\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1145
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 c7 0d 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1146
S'.text:0000000000404bb0\n.text:0000000000404bb1\n.text:0000000000404bb3\n.text:0000000000404bb5\n.text:0000000000404bb6\n.text:0000000000404bb7\n.text:0000000000404bba\n.text:0000000000404bbd\n.text:0000000000404bbf\n.text:0000000000404bc2\n.text:0000000000404bc4\n.text:0000000000404bc9\n.text:0000000000404bcd\n.text:0000000000404bcf\n.text:0000000000404bd1\n.text:0000000000404bd4\n.text:0000000000404bd6\n.text:0000000000404bd8\n.text:0000000000404bda\n.text:0000000000404bdc\n.text:0000000000404bde\n.text:0000000000404be1\n.text:0000000000404be3\n.text:0000000000404be6\n.text:0000000000404be8\n.text:0000000000404bec\n.text:0000000000404bf0\n.text:0000000000404bf3\n.text:0000000000404bf7\n.text:0000000000404bf8\n.text:0000000000404bfa\n.text:0000000000404bfc\n.text:0000000000404bfd\n.text:0000000000404bff\n.text:0000000000404c04\n.text:0000000000404c08\n.text:0000000000404c09\n.text:0000000000404c0b\n.text:0000000000404c0d\n.text:0000000000404c0e\n'
p1147
tp1148
sS'strcaseeq3'
p1149
(S'\n__stdcall strcaseeq3()\n'
p1150
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1151
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405990\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00404b70\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404b77\nJMP 0x00404b9a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404b9a\nTEST BPL,BPL\nJZ 0x00404b95\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404bb0\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1152
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 33 0e 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1153
S'.text:0000000000404b40\n.text:0000000000404b41\n.text:0000000000404b43\n.text:0000000000404b45\n.text:0000000000404b47\n.text:0000000000404b48\n.text:0000000000404b4b\n.text:0000000000404b4e\n.text:0000000000404b51\n.text:0000000000404b53\n.text:0000000000404b56\n.text:0000000000404b58\n.text:0000000000404b5d\n.text:0000000000404b61\n.text:0000000000404b63\n.text:0000000000404b65\n.text:0000000000404b68\n.text:0000000000404b6a\n.text:0000000000404b6c\n.text:0000000000404b6e\n.text:0000000000404b70\n.text:0000000000404b72\n.text:0000000000404b75\n.text:0000000000404b77\n.text:0000000000404b7a\n.text:0000000000404b7c\n.text:0000000000404b80\n.text:0000000000404b84\n.text:0000000000404b88\n.text:0000000000404b8b\n.text:0000000000404b8c\n.text:0000000000404b8e\n.text:0000000000404b90\n.text:0000000000404b92\n.text:0000000000404b93\n.text:0000000000404b95\n.text:0000000000404b9a\n.text:0000000000404b9b\n.text:0000000000404b9d\n.text:0000000000404b9f\n.text:0000000000404ba1\n.text:0000000000404ba2\n'
p1154
tp1155
sS'register_tm_clones'
p1156
(S'\n__stdcall register_tm_clones()\n'
p1157
V\u000a/* WARNING: Removing unreachable block (ram,0x00401723) */\u000a/* WARNING: Removing unreachable block (ram,0x0040172d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1158
S'MOV ESI,0x60a258\nPUSH RBP\nSUB RSI,0x60a258\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401738\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401738\nPOP RBP\nMOV EDI,0x60a258\nJMP RAX\nPOP RBP\nRET\n'
p1159
S'be 58 a2 60 00\n55\n48 81 ee 58 a2 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 58 a2 60 00\nff e0\n5d\nc3\n'
p1160
S'.text:0000000000401700\n.text:0000000000401705\n.text:0000000000401706\n.text:000000000040170d\n.text:0000000000401711\n.text:0000000000401714\n.text:0000000000401717\n.text:000000000040171b\n.text:000000000040171e\n.text:0000000000401721\n.text:0000000000401723\n.text:0000000000401728\n.text:000000000040172b\n.text:000000000040172d\n.text:000000000040172e\n.text:0000000000401733\n.text:0000000000401738\n.text:0000000000401739\n'
p1161
tp1162
sS'gettext_quote'
p1163
(S'\n__stdcall gettext_quote(char * msgid)\n'
p1164
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_00407090;\u000a        pcVar2 = &DAT_00407094;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p1165
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x004013d0\nCMP RAX,RBX\nJNZ 0x004049a8\nCALL 0x00405a50\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x004049b0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00404958\nCMP byte ptr [RBX],0x60\nMOV ECX,0x407080\nMOV EAX,0x407084\nJMP 0x004049a4\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x004049b0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00404996\nCMP byte ptr [RBX],0x60\nMOV ECX,0x407090\nMOV EAX,0x407094\nJMP 0x004049a4\nCMP R14D,0x9\nMOV ECX,0x407074\nMOV EAX,0x407078\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1166
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 c7 ca ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 39 11 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 80 70 40 00\nb8 84 70 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 90 70 40 00\nb8 94 70 40 00\neb 0e\n41 83 fe 09\nb9 74 70 40 00\nb8 78 70 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p1167
S'.text:00000000004048f0\n.text:00000000004048f1\n.text:00000000004048f3\n.text:00000000004048f4\n.text:00000000004048f7\n.text:00000000004048fa\n.text:00000000004048fc\n.text:0000000000404901\n.text:0000000000404904\n.text:0000000000404909\n.text:000000000040490c\n.text:0000000000404912\n.text:0000000000404917\n.text:000000000040491a\n.text:000000000040491f\n.text:0000000000404924\n.text:0000000000404929\n.text:000000000040492f\n.text:0000000000404935\n.text:0000000000404938\n.text:000000000040493a\n.text:000000000040493c\n.text:0000000000404941\n.text:0000000000404945\n.text:0000000000404947\n.text:0000000000404949\n.text:000000000040494c\n.text:0000000000404951\n.text:0000000000404956\n.text:0000000000404958\n.text:000000000040495d\n.text:0000000000404962\n.text:0000000000404967\n.text:000000000040496d\n.text:0000000000404973\n.text:0000000000404976\n.text:0000000000404978\n.text:000000000040497a\n.text:000000000040497f\n.text:0000000000404983\n.text:0000000000404985\n.text:0000000000404987\n.text:000000000040498a\n.text:000000000040498f\n.text:0000000000404994\n.text:0000000000404996\n.text:000000000040499a\n.text:000000000040499f\n.text:00000000004049a4\n.text:00000000004049a8\n.text:00000000004049a9\n.text:00000000004049ab\n.text:00000000004049ac\n'
p1168
tp1169
sS'c_islower'
p1170
(S'\n__stdcall c_islower()\n'
p1171
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1172
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1173
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1174
S'.text:0000000000405930\n.text:0000000000405933\n.text:0000000000405936\n.text:0000000000405939\n'
p1175
tp1176
sS'FUN_004012f0'
p1177
(S'\n__stdcall FUN_004012f0()\n'
p1178
V\u000avoid FUN_004012f0(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_0060a010)();\u000a  return;\u000a}\u000a\u000a
p1179
S'PUSH qword ptr [0x0060a008]\nJMP qword ptr [0x0060a010]\n'
p1180
S'ff 35 12 8d 20 00\nff 25 14 8d 20 00\n'
p1181
S'.plt:00000000004012f0\n.plt:00000000004012f6\n'
p1182
tp1183
sS'write_header'
p1184
(S'\n__stdcall write_header(char * filename)\n'
p1185
V\u000avoid write_header(char *filename)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  \u000a  uVar1 = 0x4071c9;\u000a  if (write_header_first_file != 0) {\u000a    uVar1 = 0x4071c8;\u000a  }\u000a  __printf_chk(1,"%s==> %s <==\u005cn",uVar1,filename);\u000a  write_header_first_file = 1;\u000a  return;\u000a}\u000a\u000a
p1186
S'PUSH RAX\nMOV RCX,RDI\nMOV AL,byte ptr [0x0060a2ad]\nMOV ESI,0x4071c8\nMOV EDX,0x4071c9\nTEST AL,AL\nCMOVNZ RDX,RSI\nMOV EDI,0x1\nMOV ESI,0x406a54\nXOR EAX,EAX\nCALL 0x004015c0\nMOV byte ptr [0x0060a2ad],0x1\nPOP RAX\nRET\n'
p1187
S'50\n48 89 f9\n8a 05 53 81 20 00\nbe c8 71 40 00\nba c9 71 40 00\n84 c0\n48 0f 45 d6\nbf 01 00 00 00\nbe 54 6a 40 00\n31 c0\ne8 45 f4 ff ff\nc6 05 2b 81 20 00 01\n58\nc3\n'
p1188
S'.text:0000000000402150\n.text:0000000000402151\n.text:0000000000402154\n.text:000000000040215a\n.text:000000000040215f\n.text:0000000000402164\n.text:0000000000402166\n.text:000000000040216a\n.text:000000000040216f\n.text:0000000000402174\n.text:0000000000402176\n.text:000000000040217b\n.text:0000000000402182\n.text:0000000000402183\n'
p1189
tp1190
sS'fclose'
p1191
(S'\n__stdcall fclose(FILE * __stream)\n'
p1192
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_0060a070)();\u000a  return iVar1;\u000a}\u000a\u000a
p1193
S'JMP qword ptr [0x0060a070]\n'
p1194
S'ff 25 ba 8c 20 00\n'
p1195
S'.plt:00000000004013b0\n'
p1196
tp1197
sS'__ctype_get_mb_cur_max'
p1198
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p1199
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_0060a088)();\u000a  return sVar1;\u000a}\u000a\u000a
p1200
S'JMP qword ptr [0x0060a088]\n'
p1201
S'ff 25 a2 8c 20 00\n'
p1202
S'.plt:00000000004013e0\n'
p1203
tp1204
sS'clearerr_unlocked'
p1205
(S'\n__stdcall clearerr_unlocked(FILE * __stream)\n'
p1206
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid clearerr_unlocked(FILE *__stream)\u000a\u000a{\u000a  (*(code *)PTR_clearerr_unlocked_0060a060)();\u000a  return;\u000a}\u000a\u000a
p1207
S'JMP qword ptr [0x0060a060]\n'
p1208
S'ff 25 ca 8c 20 00\n'
p1209
S'.plt:0000000000401390\n'
p1210
tp1211
sS'quotearg_n_style'
p1212
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p1213
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1214
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00404620\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x004043f0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1215
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p1216
S'.text:00000000004045e0\n.text:00000000004045e1\n.text:00000000004045e3\n.text:00000000004045e4\n.text:00000000004045e8\n.text:00000000004045eb\n.text:00000000004045ed\n.text:00000000004045f2\n.text:00000000004045f5\n.text:00000000004045fa\n.text:0000000000404601\n.text:0000000000404603\n.text:0000000000404606\n.text:0000000000404609\n.text:000000000040460e\n.text:0000000000404612\n.text:0000000000404613\n.text:0000000000404615\n.text:0000000000404616\n'
p1217
tp1218
sS'fwrite'
p1219
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1220
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_0060a1b8)();\u000a  return sVar1;\u000a}\u000a\u000a
p1221
S'JMP qword ptr [0x0060a1b8]\n'
p1222
S'ff 25 72 8b 20 00\n'
p1223
S'.plt:0000000000401640\n'
p1224
tp1225
sS'quote_n'
p1226
(S'\n__stdcall quote_n(char * arg)\n'
p1227
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1228
S'MOV RDX,-0x1\nJMP 0x004048b0\n'
p1229
S'48 c7 c2 ff ff ff ff\neb d7\n'
p1230
S'.text:00000000004048d0\n.text:00000000004048d7\n'
p1231
tp1232
sS'quotearg_alloc'
p1233
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p1234
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p1235
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00404260\n'
p1236
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p1237
S'.text:0000000000404250\n.text:0000000000404253\n.text:0000000000404255\n.text:0000000000404258\n'
p1238
tp1239
sS'__do_global_dtors_aux'
p1240
(S'\n__stdcall __do_global_dtors_aux()\n'
p1241
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1242
S'CMP byte ptr [0x0060a2a8],0x0\nJNZ 0x0040175a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x004016c0\nPOP RBP\nMOV byte ptr [0x0060a2a8],0x1\nRET\n'
p1243
S'80 3d 61 8b 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 4e 8b 20 00 01\nf3 c3\n'
p1244
S'.text:0000000000401740\n.text:0000000000401747\n.text:0000000000401749\n.text:000000000040174a\n.text:000000000040174d\n.text:0000000000401752\n.text:0000000000401753\n.text:000000000040175a\n'
p1245
tp1246
sS'close_stdout_set_file_name'
p1247
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p1248
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p1249
S'MOV qword ptr [0x0060a2b0],RDI\nRET\n'
p1250
S'48 89 3d 19 71 20 00\nc3\n'
p1251
S'.text:0000000000403190\n.text:0000000000403197\n'
p1252
tp1253
sS'c_isprint'
p1254
(S'\n__stdcall c_isprint()\n'
p1255
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1256
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1257
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1258
S'.text:0000000000405940\n.text:0000000000405943\n.text:0000000000405946\n.text:0000000000405949\n'
p1259
tp1260
sS'_fini'
p1261
(S'\n__stdcall _fini()\n'
p1262
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1263
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1264
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1265
S'.fini:0000000000405f80\n.fini:0000000000405f84\n.fini:0000000000405f88\n'
p1266
tp1267
sS'__fpending'
p1268
(S'\n__stdcall __fpending()\n'
p1269
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_0060a050)();\u000a  return;\u000a}\u000a\u000a
p1270
S'JMP qword ptr [0x0060a050]\n'
p1271
S'ff 25 da 8c 20 00\n'
p1272
S'.plt:0000000000401370\n'
p1273
tp1274
s.