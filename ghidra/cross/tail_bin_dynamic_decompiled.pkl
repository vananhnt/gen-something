(dp0
S'ungetc'
p1
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p2
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_006101b0)();\u000a  return iVar1;\u000a}\u000a\u000a
p3
S'JMP qword ptr [0x006101b0]\n'
p4
S'ff 25 3a e7 20 00\n'
p5
S'.plt:0000000000401a70\n'
p6
tp7
sS'version_etc_arn'
p8
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p9
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_0040cdc3,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x409157;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x4091d8;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x40926c;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p10
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00408fe8\nMOV EDX,0x40cdb0\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401b80\nJMP 0x00408ffd\nMOV EDX,0x40cdbc\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401b80\nXOR EDI,EDI\nMOV ESI,0x40cdc3\nMOV EDX,0x5\nCALL 0x00401840\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x40d090\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401b80\nXOR EDI,EDI\nMOV ESI,0x40cdc7\nMOV EDX,0x5\nCALL 0x00401840\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00401970\nCMP R12,0x9\nJA 0x00409086\nJMP qword ptr [0x40cd60 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x40ce92\nMOV EDX,0x5\nCALL 0x00401840\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401b80\nXOR EDI,EDI\nMOV ESI,0x40cfd1\nMOV EDX,0x5\nCALL 0x00401840\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b80\nADD RSP,0x38\nJMP 0x004092f7\nXOR EDI,EDI\nMOV ESI,0x40cea2\nMOV EDX,0x5\nCALL 0x00401840\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401b80\nXOR EDI,EDI\nMOV ESI,0x40ceb9\nMOV EDX,0x5\nCALL 0x00401840\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401b80\nXOR EDI,EDI\nMOV ESI,0x40ced5\nMOV EDX,0x5\nCALL 0x00401840\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b80\nADD RSP,0x18\nJMP 0x004092f7\nXOR EDI,EDI\nMOV ESI,0x40cef5\nMOV EDX,0x5\nCALL 0x00401840\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b80\nADD RSP,0x18\nJMP 0x004092f7\nXOR EDI,EDI\nMOV ESI,0x40cf19\nMOV EDX,0x5\nCALL 0x00401840\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b80\nADD RSP,0x28\nJMP 0x004092f7\nXOR EDI,EDI\nMOV ESI,0x40cf41\nMOV EDX,0x5\nCALL 0x00401840\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b80\nADD RSP,0x28\nJMP 0x004092f7\nXOR EDI,EDI\nMOV ESI,0x40cf6d\nMOV EDX,0x5\nCALL 0x00401840\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b80\nADD RSP,0x38\nJMP 0x004092f7\nXOR EDI,EDI\nMOV ESI,0x40cf9d\nMOV EDX,0x5\nCALL 0x00401840\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b80\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401760\n'
p11
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba b0 cd 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 9a 8b ff ff\neb 15\nba bc cd 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 83 8b ff ff\n31 ff\nbe c3 cd 40 00\nba 05 00 00 00\ne8 32 88 ff ff\n48 89 c1\nbe 01 00 00 00\nba 90 d0 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 55 8b ff ff\n31 ff\nbe c7 cd 40 00\nba 05 00 00 00\ne8 04 88 ff ff\n48 89 c7\n4c 89 f6\ne8 29 89 ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 60 cd 40 00\n31 ff\nbe 92 ce 40 00\nba 05 00 00 00\ne8 da 87 ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 fa 8a ff ff\n31 ff\nbe d1 cf 40 00\nba 05 00 00 00\ne8 a9 87 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 b1 8a ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe a2 ce 40 00\nba 05 00 00 00\ne8 57 87 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 73 8a ff ff\n31 ff\nbe b9 ce 40 00\nba 05 00 00 00\ne8 22 87 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 3a 8a ff ff\n31 ff\nbe d5 ce 40 00\nba 05 00 00 00\ne8 e9 86 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 04 8a ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe f5 ce 40 00\nba 05 00 00 00\ne8 aa 86 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 c2 89 ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 19 cf 40 00\nba 05 00 00 00\ne8 68 86 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 78 89 ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe 41 cf 40 00\nba 05 00 00 00\ne8 1e 86 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 2e 89 ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe 6d cf 40 00\nba 05 00 00 00\ne8 d4 85 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 dc 88 ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe 9d cf 40 00\nba 05 00 00 00\ne8 85 85 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 8d 88 ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 5c 84 ff ff\n'
p12
S'.text:0000000000408fb0\n.text:0000000000408fb2\n.text:0000000000408fb4\n.text:0000000000408fb6\n.text:0000000000408fb7\n.text:0000000000408fb8\n.text:0000000000408fbb\n.text:0000000000408fbe\n.text:0000000000408fc1\n.text:0000000000408fc4\n.text:0000000000408fc7\n.text:0000000000408fca\n.text:0000000000408fcf\n.text:0000000000408fd2\n.text:0000000000408fd4\n.text:0000000000408fd9\n.text:0000000000408fdb\n.text:0000000000408fde\n.text:0000000000408fe1\n.text:0000000000408fe6\n.text:0000000000408fe8\n.text:0000000000408fed\n.text:0000000000408fef\n.text:0000000000408ff2\n.text:0000000000408ff5\n.text:0000000000408ff8\n.text:0000000000408ffd\n.text:0000000000408fff\n.text:0000000000409004\n.text:0000000000409009\n.text:000000000040900e\n.text:0000000000409011\n.text:0000000000409016\n.text:000000000040901b\n.text:0000000000409021\n.text:0000000000409023\n.text:0000000000409026\n.text:000000000040902b\n.text:000000000040902d\n.text:0000000000409032\n.text:0000000000409037\n.text:000000000040903c\n.text:000000000040903f\n.text:0000000000409042\n.text:0000000000409047\n.text:000000000040904b\n.text:000000000040904d\n.text:0000000000409055\n.text:0000000000409057\n.text:000000000040905c\n.text:0000000000409061\n.text:0000000000409066\n.text:0000000000409069\n.text:000000000040906c\n.text:0000000000409071\n.text:0000000000409073\n.text:0000000000409076\n.text:000000000040907a\n.text:000000000040907b\n.text:000000000040907d\n.text:000000000040907f\n.text:0000000000409081\n.text:0000000000409086\n.text:0000000000409088\n.text:000000000040908d\n.text:0000000000409092\n.text:0000000000409097\n.text:000000000040909a\n.text:000000000040909d\n.text:00000000004090a1\n.text:00000000004090a5\n.text:00000000004090aa\n.text:00000000004090af\n.text:00000000004090b2\n.text:00000000004090b6\n.text:00000000004090ba\n.text:00000000004090be\n.text:00000000004090c2\n.text:00000000004090c6\n.text:00000000004090ca\n.text:00000000004090cf\n.text:00000000004090d3\n.text:00000000004090d8\n.text:00000000004090da\n.text:00000000004090df\n.text:00000000004090e4\n.text:00000000004090e9\n.text:00000000004090ec\n.text:00000000004090ef\n.text:00000000004090f3\n.text:00000000004090f8\n.text:00000000004090fa\n.text:00000000004090fd\n.text:0000000000409101\n.text:0000000000409102\n.text:0000000000409104\n.text:0000000000409106\n.text:0000000000409108\n.text:000000000040910d\n.text:000000000040910f\n.text:0000000000409114\n.text:0000000000409119\n.text:000000000040911e\n.text:0000000000409121\n.text:0000000000409124\n.text:0000000000409128\n.text:000000000040912c\n.text:0000000000409131\n.text:0000000000409133\n.text:0000000000409136\n.text:000000000040913a\n.text:000000000040913b\n.text:000000000040913d\n.text:000000000040913f\n.text:0000000000409141\n.text:0000000000409146\n.text:0000000000409148\n.text:000000000040914d\n.text:0000000000409152\n.text:0000000000409157\n.text:000000000040915a\n.text:000000000040915d\n.text:0000000000409161\n.text:0000000000409165\n.text:0000000000409169\n.text:000000000040916e\n.text:0000000000409170\n.text:0000000000409173\n.text:0000000000409177\n.text:000000000040917c\n.text:0000000000409180\n.text:0000000000409185\n.text:0000000000409187\n.text:000000000040918c\n.text:0000000000409191\n.text:0000000000409196\n.text:0000000000409199\n.text:000000000040919c\n.text:00000000004091a0\n.text:00000000004091a4\n.text:00000000004091a9\n.text:00000000004091ae\n.text:00000000004091b1\n.text:00000000004091b5\n.text:00000000004091b9\n.text:00000000004091be\n.text:00000000004091c2\n.text:00000000004091c7\n.text:00000000004091c9\n.text:00000000004091ce\n.text:00000000004091d3\n.text:00000000004091d8\n.text:00000000004091db\n.text:00000000004091de\n.text:00000000004091e2\n.text:00000000004091e6\n.text:00000000004091ea\n.text:00000000004091ef\n.text:00000000004091f4\n.text:00000000004091f7\n.text:00000000004091fb\n.text:00000000004091ff\n.text:0000000000409203\n.text:0000000000409208\n.text:000000000040920c\n.text:0000000000409211\n.text:0000000000409213\n.text:0000000000409218\n.text:000000000040921d\n.text:0000000000409222\n.text:0000000000409225\n.text:0000000000409228\n.text:000000000040922c\n.text:0000000000409230\n.text:0000000000409235\n.text:000000000040923a\n.text:000000000040923d\n.text:0000000000409241\n.text:0000000000409245\n.text:0000000000409249\n.text:000000000040924d\n.text:0000000000409252\n.text:0000000000409256\n.text:000000000040925b\n.text:000000000040925d\n.text:0000000000409262\n.text:0000000000409267\n.text:000000000040926c\n.text:000000000040926f\n.text:0000000000409272\n.text:0000000000409276\n.text:000000000040927a\n.text:000000000040927e\n.text:0000000000409283\n.text:0000000000409288\n.text:000000000040928b\n.text:000000000040928f\n.text:0000000000409293\n.text:0000000000409297\n.text:000000000040929b\n.text:000000000040929f\n.text:00000000004092a4\n.text:00000000004092a8\n.text:00000000004092aa\n.text:00000000004092ac\n.text:00000000004092b1\n.text:00000000004092b6\n.text:00000000004092bb\n.text:00000000004092be\n.text:00000000004092c1\n.text:00000000004092c5\n.text:00000000004092c9\n.text:00000000004092ce\n.text:00000000004092d3\n.text:00000000004092d6\n.text:00000000004092da\n.text:00000000004092de\n.text:00000000004092e2\n.text:00000000004092e6\n.text:00000000004092ea\n.text:00000000004092ee\n.text:00000000004092f3\n.text:00000000004092f7\n.text:00000000004092f8\n.text:00000000004092fa\n.text:00000000004092fc\n.text:00000000004092fe\n.text:00000000004092ff\n'
p13
tp14
sS'strchr'
p15
(S'\n__stdcall strchr(char * __s, int __c)\n'
p16
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_006100c8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p17
S'JMP qword ptr [0x006100c8]\n'
p18
S'ff 25 22 e8 20 00\n'
p19
S'.plt:00000000004018a0\n'
p20
tp21
sS'transfer_entries'
p22
(S'\n__stdcall transfer_entries(Hash_table * dst, Hash_table * src)\n'
p23
V\u000a_Bool transfer_entries(Hash_table *dst,Hash_table *src)\u000a\u000a{\u000a  void *key;\u000a  hash_entry *phVar1;\u000a  hash_entry *entry;\u000a  hash_entry *phVar2;\u000a  char in_DL;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar3 = src->bucket;\u000a  if (phVar3 < src->bucket_limit) {\u000a    do {\u000a      if (phVar3->data != (void *)0x0) {\u000a        entry = phVar3->next;\u000a        while (entry != (hash_entry *)0x0) {\u000a          key = entry->data;\u000a          phVar1 = safe_hasher(dst,key);\u000a          phVar2 = entry->next;\u000a          if (phVar1->data == (void *)0x0) {\u000a            phVar1->data = key;\u000a            dst->n_buckets_used = dst->n_buckets_used + 1;\u000a            free_entry(dst,entry);\u000a            entry = phVar2;\u000a          }\u000a          else {\u000a            entry->next = phVar1->next;\u000a            phVar1->next = entry;\u000a            entry = phVar2;\u000a          }\u000a        }\u000a        key = phVar3->data;\u000a        phVar3->next = (hash_entry *)0x0;\u000a        if (in_DL == 0) {\u000a          entry = safe_hasher(dst,key);\u000a          if (entry->data == (void *)0x0) {\u000a            entry->data = key;\u000a            dst->n_buckets_used = dst->n_buckets_used + 1;\u000a          }\u000a          else {\u000a            phVar2 = allocate_entry(dst);\u000a            if (phVar2 == (hash_entry *)0x0) {\u000a              return false;\u000a            }\u000a            phVar2->data = key;\u000a            phVar2->next = entry->next;\u000a            entry->next = phVar2;\u000a          }\u000a          phVar3->data = (void *)0x0;\u000a          src->n_buckets_used = src->n_buckets_used - 1;\u000a        }\u000a      }\u000a      phVar3 = phVar3 + 1;\u000a    } while (phVar3 < src->bucket_limit);\u000a  }\u000a  return true;\u000a}\u000a\u000a
p24
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12D,EDX\nMOV RBP,RSI\nMOV R14,RDI\nMOV R15,qword ptr [RBP]\nMOV AL,0x1\nCMP R15,qword ptr [RBP + 0x8]\nJNC 0x00406e22\nMOV qword ptr [RSP],RBP\nNOP dword ptr [RAX + RAX*0x1]\nCMP qword ptr [R15],0x0\nJZ 0x00406e12\nMOV RBX,qword ptr [R15 + 0x8]\nTEST RBX,RBX\nJZ 0x00406dba\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV R13,qword ptr [RBX]\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x00406630\nMOV RBP,qword ptr [RBX + 0x8]\nCMP qword ptr [RAX],0x0\nJZ 0x00406da0\nMOV RCX,qword ptr [RAX + 0x8]\nMOV qword ptr [RBX + 0x8],RCX\nMOV qword ptr [RAX + 0x8],RBX\nJMP 0x00406db2\nMOV qword ptr [RAX],R13\nINC qword ptr [R14 + 0x18]\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x004073a0\nTEST RBP,RBP\nMOV RBX,RBP\nJNZ 0x00406d70\nMOV R13,qword ptr [R15]\nMOV qword ptr [R15 + 0x8],0x0\nTEST R12B,R12B\nMOV RBP,qword ptr [RSP]\nJNZ 0x00406e12\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x00406630\nMOV RBX,RAX\nCMP qword ptr [RBX],0x0\nJZ 0x00406e00\nMOV RDI,R14\nCALL 0x004070e0\nTEST RAX,RAX\nJZ 0x00406e31\nMOV qword ptr [RAX],R13\nMOV RCX,qword ptr [RBX + 0x8]\nMOV qword ptr [RAX + 0x8],RCX\nMOV qword ptr [RBX + 0x8],RAX\nJMP 0x00406e07\nMOV qword ptr [RBX],R13\nINC qword ptr [R14 + 0x18]\nMOV qword ptr [R15],0x0\nDEC qword ptr [RBP + 0x18]\nADD R15,0x10\nCMP R15,qword ptr [RBP + 0x8]\nJC 0x00406d50\nMOV AL,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EAX,EAX\nJMP 0x00406e22\n'
p25
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n41 89 d4\n48 89 f5\n49 89 fe\n4c 8b 7d 00\nb0 01\n4c 3b 7d 08\n0f 83 de 00 00 00\n48 89 2c 24\n0f 1f 84 00 00 00 00 00\n49 83 3f 00\n0f 84 b8 00 00 00\n49 8b 5f 08\n48 85 db\n74 57\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 8b 2b\n4c 89 f7\n4c 89 ee\ne8 b2 f8 ff ff\n48 8b 6b 08\n48 83 38 00\n74 18\n48 8b 48 08\n48 89 4b 08\n48 89 58 08\neb 1c\n4c 89 28\n49 ff 46 18\n4c 89 f7\n48 89 de\ne8 ee 05 00 00\n48 85 ed\n48 89 eb\n75 b6\n4d 8b 2f\n49 c7 47 08 00 00 00 00\n45 84 e4\n48 8b 2c 24\n75 44\n4c 89 f7\n4c 89 ee\ne8 57 f8 ff ff\n48 89 c3\n48 83 3b 00\n74 1e\n4c 89 f7\ne8 f6 02 00 00\n48 85 c0\n74 42\n4c 89 28\n48 8b 4b 08\n48 89 48 08\n48 89 43 08\neb 07\n4c 89 2b\n49 ff 46 18\n49 c7 07 00 00 00 00\n48 ff 4d 18\n49 83 c7 10\n4c 3b 7d 08\n0f 82 30 ff ff ff\nb0 01\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 c0\neb ed\n'
p26
S'.text:0000000000406d20\n.text:0000000000406d21\n.text:0000000000406d23\n.text:0000000000406d25\n.text:0000000000406d27\n.text:0000000000406d29\n.text:0000000000406d2a\n.text:0000000000406d2b\n.text:0000000000406d2e\n.text:0000000000406d31\n.text:0000000000406d34\n.text:0000000000406d38\n.text:0000000000406d3a\n.text:0000000000406d3e\n.text:0000000000406d44\n.text:0000000000406d48\n.text:0000000000406d50\n.text:0000000000406d54\n.text:0000000000406d5a\n.text:0000000000406d5e\n.text:0000000000406d61\n.text:0000000000406d63\n.text:0000000000406d70\n.text:0000000000406d73\n.text:0000000000406d76\n.text:0000000000406d79\n.text:0000000000406d7e\n.text:0000000000406d82\n.text:0000000000406d86\n.text:0000000000406d88\n.text:0000000000406d8c\n.text:0000000000406d90\n.text:0000000000406d94\n.text:0000000000406da0\n.text:0000000000406da3\n.text:0000000000406da7\n.text:0000000000406daa\n.text:0000000000406dad\n.text:0000000000406db2\n.text:0000000000406db5\n.text:0000000000406db8\n.text:0000000000406dba\n.text:0000000000406dbd\n.text:0000000000406dc5\n.text:0000000000406dc8\n.text:0000000000406dcc\n.text:0000000000406dce\n.text:0000000000406dd1\n.text:0000000000406dd4\n.text:0000000000406dd9\n.text:0000000000406ddc\n.text:0000000000406de0\n.text:0000000000406de2\n.text:0000000000406de5\n.text:0000000000406dea\n.text:0000000000406ded\n.text:0000000000406def\n.text:0000000000406df2\n.text:0000000000406df6\n.text:0000000000406dfa\n.text:0000000000406dfe\n.text:0000000000406e00\n.text:0000000000406e03\n.text:0000000000406e07\n.text:0000000000406e0e\n.text:0000000000406e12\n.text:0000000000406e16\n.text:0000000000406e1a\n.text:0000000000406e20\n.text:0000000000406e22\n.text:0000000000406e26\n.text:0000000000406e27\n.text:0000000000406e29\n.text:0000000000406e2b\n.text:0000000000406e2d\n.text:0000000000406e2f\n.text:0000000000406e30\n.text:0000000000406e31\n.text:0000000000406e33\n'
p27
tp28
sS'start_bytes'
p29
(S'\n__stdcall start_bytes(char * pretty_filename, uintmax_t n_bytes, uintmax_t * read_pos)\n'
p30
V\u000aint start_bytes(char *pretty_filename,uintmax_t n_bytes,uintmax_t *read_pos)\u000a\u000a{\u000a  uint uVar1;\u000a  uintmax_t *puVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  long *in_RCX;\u000a  uintmax_t *puVar6;\u000a  char buffer [8192];\u000a  char acStack8248 [8200];\u000a  \u000a  if (read_pos != (uintmax_t *)0x0) {\u000a    do {\u000a      puVar2 = (uintmax_t *)safe_read((void *)(n_bytes & 0xffffffff),(size_t)acStack8248);\u000a      if (puVar2 == (uintmax_t *)0x0) {\u000a        return -1;\u000a      }\u000a      if (puVar2 == (uintmax_t *)0xffffffffffffffff) {\u000a        puVar3 = (uint *)__errno_location();\u000a        uVar1 = *puVar3;\u000a        uVar4 = dcgettext(0,"error reading %s",5);\u000a        pcVar5 = quotearg_style((char *)0x4);\u000a        error(0,(ulong)uVar1,uVar4,pcVar5);\u000a        return 1;\u000a      }\u000a      *in_RCX = *in_RCX + (long)puVar2;\u000a      puVar6 = (uintmax_t *)((long)read_pos - (long)puVar2);\u000a      if (read_pos < puVar2) {\u000a        if ((uintmax_t *)((long)puVar2 - (long)read_pos) == (uintmax_t *)0x0) {\u000a          return 0;\u000a        }\u000a        xwrite_stdout(acStack8248 + (long)read_pos,\u000a                      (size_t)(uintmax_t *)((long)puVar2 - (long)read_pos));\u000a        return 0;\u000a      }\u000a      read_pos = puVar6;\u000a    } while (puVar6 != (uintmax_t *)0x0);\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p31
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x2008\nMOV R12,RCX\nMOV RBX,RDX\nMOV EBP,ESI\nMOV R14,RDI\nXOR R15D,R15D\nTEST RBX,RBX\nJZ 0x00404c87\nMOV R13,RSP\nNOP dword ptr [RAX + RAX*0x1]\nMOV EDX,0x2000\nMOV EDI,EBP\nMOV RSI,R13\nCALL 0x00408de0\nTEST RAX,RAX\nJZ 0x00404c40\nCMP RAX,-0x1\nJZ 0x00404c48\nADD qword ptr [R12],RAX\nMOV RCX,RBX\nSUB RCX,RAX\nJC 0x00404c2d\nMOV RBX,RCX\nJNZ 0x00404c00\nJMP 0x00404c87\nSUB RAX,RBX\nJZ 0x00404c87\nLEA RDI,[RSP + RBX*0x1]\nMOV RSI,RAX\nCALL 0x00404b50\nJMP 0x00404c87\nMOV R15D,0xffffffff\nJMP 0x00404c87\nCALL 0x00401770\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40c200\nMOV EDX,0x5\nCALL 0x00401840\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,R14\nCALL 0x004087b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00401af0\nMOV R15D,0x1\nMOV EAX,R15D\nADD RSP,0x2008\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p32
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 08 20 00 00\n49 89 cc\n48 89 d3\n89 f5\n49 89 fe\n45 31 ff\n48 85 db\n0f 84 8f 00 00 00\n49 89 e5\n0f 1f 44 00 00\nba 00 20 00 00\n89 ef\n4c 89 ee\ne8 d1 41 00 00\n48 85 c0\n74 2c\n48 83 f8 ff\n74 2e\n49 01 04 24\n48 89 d9\n48 29 c1\n72 07\n48 89 cb\n75 d5\neb 5a\n48 29 d8\n74 55\n48 8d 3c 1c\n48 89 c6\ne8 12 ff ff ff\neb 47\n41 bf ff ff ff ff\neb 3f\ne8 23 cb ff ff\n8b 18\n31 ff\nbe 00 c2 40 00\nba 05 00 00 00\ne8 e0 cb ff ff\n48 89 c5\nbf 04 00 00 00\n4c 89 f6\ne8 40 3b 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 6f ce ff ff\n41 bf 01 00 00 00\n44 89 f8\n48 81 c4 08 20 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p33
S'.text:0000000000404bd0\n.text:0000000000404bd1\n.text:0000000000404bd3\n.text:0000000000404bd5\n.text:0000000000404bd7\n.text:0000000000404bd9\n.text:0000000000404bda\n.text:0000000000404be1\n.text:0000000000404be4\n.text:0000000000404be7\n.text:0000000000404be9\n.text:0000000000404bec\n.text:0000000000404bef\n.text:0000000000404bf2\n.text:0000000000404bf8\n.text:0000000000404bfb\n.text:0000000000404c00\n.text:0000000000404c05\n.text:0000000000404c07\n.text:0000000000404c0a\n.text:0000000000404c0f\n.text:0000000000404c12\n.text:0000000000404c14\n.text:0000000000404c18\n.text:0000000000404c1a\n.text:0000000000404c1e\n.text:0000000000404c21\n.text:0000000000404c24\n.text:0000000000404c26\n.text:0000000000404c29\n.text:0000000000404c2b\n.text:0000000000404c2d\n.text:0000000000404c30\n.text:0000000000404c32\n.text:0000000000404c36\n.text:0000000000404c39\n.text:0000000000404c3e\n.text:0000000000404c40\n.text:0000000000404c46\n.text:0000000000404c48\n.text:0000000000404c4d\n.text:0000000000404c4f\n.text:0000000000404c51\n.text:0000000000404c56\n.text:0000000000404c5b\n.text:0000000000404c60\n.text:0000000000404c63\n.text:0000000000404c68\n.text:0000000000404c6b\n.text:0000000000404c70\n.text:0000000000404c73\n.text:0000000000404c75\n.text:0000000000404c77\n.text:0000000000404c79\n.text:0000000000404c7c\n.text:0000000000404c81\n.text:0000000000404c87\n.text:0000000000404c8a\n.text:0000000000404c91\n.text:0000000000404c92\n.text:0000000000404c94\n.text:0000000000404c96\n.text:0000000000404c98\n.text:0000000000404c9a\n.text:0000000000404c9b\n'
p34
tp35
sS'rpl_fclose'
p36
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p37
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_0040a549;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_0040a549:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p38
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x004019f0\nTEST EAX,EAX\nJS 0x0040a549\nMOV RDI,RBX\nCALL 0x00401a90\nTEST EAX,EAX\nJZ 0x0040a517\nMOV RDI,RBX\nCALL 0x004019f0\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x004018f0\nCMP RAX,-0x1\nJZ 0x0040a549\nMOV RDI,RBX\nCALL 0x0040a560\nTEST EAX,EAX\nJZ 0x0040a549\nCALL 0x00401770\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x00401820\nTEST EBP,EBP\nJZ 0x0040a542\nCALL 0x00401770\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00401820\n'
p39
S'55\n53\n50\n48 89 fb\ne8 05 75 ff ff\n85 c0\n78 5a\n48 89 df\ne8 99 75 ff ff\n85 c0\n74 1c\n48 89 df\ne8 ed 74 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 df 73 ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 48 72 ff ff\n8b 28\n48 89 df\ne8 ee 72 ff ff\n85 ed\n74 0c\ne8 35 72 ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 c9 72 ff ff\n'
p40
S'.text:000000000040a4e0\n.text:000000000040a4e1\n.text:000000000040a4e2\n.text:000000000040a4e3\n.text:000000000040a4e6\n.text:000000000040a4eb\n.text:000000000040a4ed\n.text:000000000040a4ef\n.text:000000000040a4f2\n.text:000000000040a4f7\n.text:000000000040a4f9\n.text:000000000040a4fb\n.text:000000000040a4fe\n.text:000000000040a503\n.text:000000000040a505\n.text:000000000040a50a\n.text:000000000040a50c\n.text:000000000040a511\n.text:000000000040a515\n.text:000000000040a517\n.text:000000000040a51a\n.text:000000000040a51f\n.text:000000000040a521\n.text:000000000040a523\n.text:000000000040a528\n.text:000000000040a52a\n.text:000000000040a52d\n.text:000000000040a532\n.text:000000000040a534\n.text:000000000040a536\n.text:000000000040a53b\n.text:000000000040a53d\n.text:000000000040a542\n.text:000000000040a546\n.text:000000000040a547\n.text:000000000040a548\n.text:000000000040a549\n.text:000000000040a54c\n.text:000000000040a550\n.text:000000000040a551\n.text:000000000040a552\n'
p41
tp42
sS'fwrite_unlocked'
p43
(S'\n__stdcall fwrite_unlocked(void * __ptr, size_t __size, size_t __n, FILE * __stream)\n'
p44
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite_unlocked(void *__ptr,size_t __size,size_t __n,FILE *__stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_unlocked_006101c8)();\u000a  return sVar1;\u000a}\u000a\u000a
p45
S'JMP qword ptr [0x006101c8]\n'
p46
S'ff 25 22 e7 20 00\n'
p47
S'.plt:0000000000401aa0\n'
p48
tp49
sS'parse_obsolete_option'
p50
(S'\n__stdcall parse_obsolete_option(char * * argv, uintmax_t * n_units)\n'
p51
V\u000a_Bool parse_obsolete_option(char **argv,uintmax_t *n_units)\u000a\u000a{\u000a  char cVar1;\u000a  uint uVar2;\u000a  int iVar3;\u000a  strtol_error sVar4;\u000a  long lVar5;\u000a  uint *puVar6;\u000a  char *s;\u000a  char *pcVar7;\u000a  undefined8 *valid_suffixes;\u000a  undefined8 uVar8;\u000a  _Bool _Var9;\u000a  undefined uVar10;\u000a  char *pcVar11;\u000a  _Bool _Var12;\u000a  \u000a  iVar3 = (int)argv;\u000a  if (iVar3 != 2) {\u000a    if (iVar3 == 3) {\u000a      if ((*(char *)n_units[2] != '-') || (((char *)n_units[2])[1] == 0)) goto LAB_004024f4;\u000a    }\u000a    else {\u000a      if (1 < iVar3 - 3U) {\u000a        return false;\u000a      }\u000a    }\u000a    s = (char *)n_units[2];\u000a    if (*s != '-') {\u000a      return false;\u000a    }\u000a    if (s[1] != '-') {\u000a      return false;\u000a    }\u000a    if (s[2] != 0) {\u000a      return false;\u000a    }\u000a  }\u000aLAB_004024f4:\u000a  iVar3 = posix2_version();\u000a  pcVar7 = (char *)n_units[1];\u000a  s = pcVar7 + 1;\u000a  if (*pcVar7 == '-') {\u000a    if (iVar3 < 0x30db0) {\u000a      _Var9 = false;\u000a    }\u000a    else {\u000a      _Var9 = false;\u000a      if (s[(ulong)(*s == 'c')] == 0) {\u000a        return false;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    if (*pcVar7 != '+') {\u000a      return false;\u000a    }\u000a    _Var9 = true;\u000a    if (0x30daf < iVar3) {\u000a      return false;\u000a    }\u000a  }\u000a  lVar5 = 0;\u000a  do {\u000a    iVar3 = (int)pcVar7[lVar5 + 1];\u000a    lVar5 = lVar5 + 1;\u000a  } while (iVar3 - 0x30U < 10);\u000a  if (iVar3 == 0x62) {\u000a    uVar8 = 0x1400;\u000aLAB_00402590:\u000a    _Var12 = false;\u000a  }\u000a  else {\u000a    uVar8 = 10;\u000a    if (iVar3 == 99) goto LAB_00402590;\u000a    _Var12 = true;\u000a    if (iVar3 != 0x6c) {\u000a      _Var12 = true;\u000a      uVar8 = 10;\u000a      goto LAB_00402598;\u000a    }\u000a  }\u000a  pcVar7 = pcVar7 + 1;\u000aLAB_00402598:\u000a  pcVar7 = pcVar7 + lVar5;\u000a  cVar1 = *pcVar7;\u000a  pcVar11 = pcVar7 + 1;\u000a  if (cVar1 != 'f') {\u000a    pcVar11 = pcVar7;\u000a  }\u000a  if (*pcVar11 == 0) {\u000a    if (lVar5 == 1) {\u000a      *valid_suffixes = uVar8;\u000a    }\u000a    else {\u000a      sVar4 = xstrtoumax(s,(char **)0x0,(uintmax_t *)0xa,(char *)valid_suffixes);\u000a      if ((sVar4 & ~LONGINT_INVALID_SUFFIX_CHAR) != LONGINT_OK) {\u000a        puVar6 = (uint *)__errno_location();\u000a        uVar2 = *puVar6;\u000a        uVar8 = dcgettext(0,"invalid number",5);\u000a        s = quote((char *)n_units[1]);\u000a        error(1,(ulong)uVar2,"%s: %s",uVar8,s);\u000a      }\u000a    }\u000a    uVar10 = 1;\u000a    count_lines = _Var12;\u000a    from_start = _Var9;\u000a    forever = (_Bool)(cVar1 == 'f');\u000a  }\u000a  else {\u000a    uVar10 = 0;\u000a  }\u000a  return (_Bool)uVar10;\u000a}\u000a\u000a
p52
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV RBX,RSI\nCMP EDI,0x2\nJZ 0x004024f4\nCMP EDI,0x3\nJNZ 0x004024cc\nMOV RAX,qword ptr [RBX + 0x10]\nCMP byte ptr [RAX],0x2d\nJNZ 0x004024f4\nCMP byte ptr [RAX + 0x1],0x0\nJNZ 0x004024d4\nJMP 0x004024f4\nADD EDI,-0x3\nCMP EDI,0x1\nJA 0x0040251f\nMOV RAX,qword ptr [RBX + 0x10]\nCMP byte ptr [RAX],0x2d\nJNZ 0x0040251f\nCMP byte ptr [RAX + 0x1],0x2d\nJNZ 0x00402584\nCMP byte ptr [RAX + 0x2],0x0\nJZ 0x004024f4\nXOR EBP,EBP\nJMP 0x00402634\nCALL 0x00407480\nMOV RCX,qword ptr [RBX + 0x8]\nLEA RDI,[RCX + 0x1]\nMOVSX EDX,byte ptr [RCX]\nCMP EDX,0x2d\nJZ 0x00402526\nCMP EDX,0x2b\nJNZ 0x0040251f\nMOV BPL,0x1\nCMP EAX,0x30db0\nJL 0x00402545\nXOR EBP,EBP\nJMP 0x00402634\nXOR EBP,EBP\nJMP 0x00402634\nCMP EAX,0x30db0\nJGE 0x00402531\nXOR EBP,EBP\nJMP 0x00402545\nXOR EAX,EAX\nCMP byte ptr [RDI],0x63\nSETZ AL\nXOR EBP,EBP\nCMP byte ptr [RDI + RAX*0x1],0x0\nJZ 0x00402634\nXOR EAX,EAX\nNOP word ptr [RAX + RAX*0x1]\nMOVSX ESI,byte ptr [RCX + RAX*0x1 + 0x1]\nLEA EDX,[RSI + -0x30]\nINC RAX\nCMP EDX,0xa\nJC 0x00402550\nCMP ESI,0x62\nJZ 0x0040258b\nMOV EDX,0xa\nCMP ESI,0x63\nJZ 0x00402590\nMOV R12B,0x1\nCMP ESI,0x6c\nJZ 0x00402593\nADD RCX,RAX\nMOV R12B,0x1\nMOV EDX,0xa\nJMP 0x00402598\nXOR EBP,EBP\nJMP 0x00402634\nMOV EDX,0x1400\nXOR R12D,R12D\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nLEA RSI,[RCX + 0x1]\nCMP byte ptr [RCX],0x66\nSETZ R13B\nCMOVNZ RSI,RCX\nCMP byte ptr [RSI],0x0\nJZ 0x004025b3\nXOR EBP,EBP\nJMP 0x00402634\nCMP RAX,0x1\nJNZ 0x004025be\nMOV qword ptr [R14],RDX\nJMP 0x0040261c\nXOR ESI,ESI\nMOV EDX,0xa\nMOV R8D,0x40d761\nMOV RCX,R14\nCALL 0x004098b0\nTEST EAX,0xfffffffd\nJZ 0x0040261c\nCALL 0x00401770\nMOV R14D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40bf45\nMOV EDX,0x5\nCALL 0x00401840\nMOV R15,RAX\nMOV RDI,qword ptr [RBX + 0x8]\nCALL 0x004089d0\nMOV RBX,RAX\nMOV EDI,0x1\nMOV EDX,0x40bf3e\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RCX,R15\nMOV R8,RBX\nCALL 0x00401af0\nMOV byte ptr [0x0061034f],BPL\nMOV byte ptr [0x0061034d],R12B\nMOV byte ptr [0x00610350],R13B\nMOV BPL,0x1\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p53
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n48 89 f3\n83 ff 02\n74 3e\n83 ff 03\n75 11\n48 8b 43 10\n80 38 2d\n75 30\n80 78 01 00\n75 0a\neb 28\n83 c7 fd\n83 ff 01\n77 4b\n48 8b 43 10\n80 38 2d\n75 42\n80 78 01 2d\n0f 85 9d 00 00 00\n80 78 02 00\n74 07\n31 ed\ne9 40 01 00 00\ne8 87 4f 00 00\n48 8b 4b 08\n48 8d 79 01\n0f be 11\n83 fa 2d\n74 1d\n83 fa 2b\n75 11\n40 b5 01\n3d b0 0d 03 00\n7c 2d\n31 ed\ne9 15 01 00 00\n31 ed\ne9 0e 01 00 00\n3d b0 0d 03 00\n7d 04\n31 ed\neb 14\n31 c0\n80 3f 63\n0f 94 c0\n31 ed\n80 3c 07 00\n0f 84 ef 00 00 00\n31 c0\n66 0f 1f 84 00 00 00 00 00\n0f be 74 01 01\n8d 56 d0\n48 ff c0\n83 fa 0a\n72 f0\n83 fe 62\n74 26\nba 0a 00 00 00\n83 fe 63\n74 21\n41 b4 01\n83 fe 6c\n74 1c\n48 01 c1\n41 b4 01\nba 0a 00 00 00\neb 14\n31 ed\ne9 a9 00 00 00\nba 00 14 00 00\n45 31 e4\n48 8d 4c 01 01\n48 8d 71 01\n80 39 66\n41 0f 94 c5\n48 0f 45 f1\n80 3e 00\n74 07\n31 ed\ne9 81 00 00 00\n48 83 f8 01\n75 05\n49 89 16\neb 5e\n31 f6\nba 0a 00 00 00\n41 b8 61 d7 40 00\n4c 89 f1\ne8 dd 72 00 00\na9 fd ff ff ff\n74 42\ne8 91 f1 ff ff\n44 8b 30\n31 ff\nbe 45 bf 40 00\nba 05 00 00 00\ne8 4d f2 ff ff\n49 89 c7\n48 8b 7b 08\ne8 d1 63 00 00\n48 89 c3\nbf 01 00 00 00\nba 3e bf 40 00\n31 c0\n44 89 f6\n4c 89 f9\n49 89 d8\ne8 d4 f4 ff ff\n40 88 2d 2c dd 20 00\n44 88 25 23 dd 20 00\n44 88 2d 1f dd 20 00\n40 b5 01\n89 e8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p54
S'.text:00000000004024a0\n.text:00000000004024a1\n.text:00000000004024a3\n.text:00000000004024a5\n.text:00000000004024a7\n.text:00000000004024a9\n.text:00000000004024aa\n.text:00000000004024ab\n.text:00000000004024ae\n.text:00000000004024b1\n.text:00000000004024b4\n.text:00000000004024b6\n.text:00000000004024b9\n.text:00000000004024bb\n.text:00000000004024bf\n.text:00000000004024c2\n.text:00000000004024c4\n.text:00000000004024c8\n.text:00000000004024ca\n.text:00000000004024cc\n.text:00000000004024cf\n.text:00000000004024d2\n.text:00000000004024d4\n.text:00000000004024d8\n.text:00000000004024db\n.text:00000000004024dd\n.text:00000000004024e1\n.text:00000000004024e7\n.text:00000000004024eb\n.text:00000000004024ed\n.text:00000000004024ef\n.text:00000000004024f4\n.text:00000000004024f9\n.text:00000000004024fd\n.text:0000000000402501\n.text:0000000000402504\n.text:0000000000402507\n.text:0000000000402509\n.text:000000000040250c\n.text:000000000040250e\n.text:0000000000402511\n.text:0000000000402516\n.text:0000000000402518\n.text:000000000040251a\n.text:000000000040251f\n.text:0000000000402521\n.text:0000000000402526\n.text:000000000040252b\n.text:000000000040252d\n.text:000000000040252f\n.text:0000000000402531\n.text:0000000000402533\n.text:0000000000402536\n.text:0000000000402539\n.text:000000000040253b\n.text:000000000040253f\n.text:0000000000402545\n.text:0000000000402547\n.text:0000000000402550\n.text:0000000000402555\n.text:0000000000402558\n.text:000000000040255b\n.text:000000000040255e\n.text:0000000000402560\n.text:0000000000402563\n.text:0000000000402565\n.text:000000000040256a\n.text:000000000040256d\n.text:000000000040256f\n.text:0000000000402572\n.text:0000000000402575\n.text:0000000000402577\n.text:000000000040257a\n.text:000000000040257d\n.text:0000000000402582\n.text:0000000000402584\n.text:0000000000402586\n.text:000000000040258b\n.text:0000000000402590\n.text:0000000000402593\n.text:0000000000402598\n.text:000000000040259c\n.text:000000000040259f\n.text:00000000004025a3\n.text:00000000004025a7\n.text:00000000004025aa\n.text:00000000004025ac\n.text:00000000004025ae\n.text:00000000004025b3\n.text:00000000004025b7\n.text:00000000004025b9\n.text:00000000004025bc\n.text:00000000004025be\n.text:00000000004025c0\n.text:00000000004025c5\n.text:00000000004025cb\n.text:00000000004025ce\n.text:00000000004025d3\n.text:00000000004025d8\n.text:00000000004025da\n.text:00000000004025df\n.text:00000000004025e2\n.text:00000000004025e4\n.text:00000000004025e9\n.text:00000000004025ee\n.text:00000000004025f3\n.text:00000000004025f6\n.text:00000000004025fa\n.text:00000000004025ff\n.text:0000000000402602\n.text:0000000000402607\n.text:000000000040260c\n.text:000000000040260e\n.text:0000000000402611\n.text:0000000000402614\n.text:0000000000402617\n.text:000000000040261c\n.text:0000000000402623\n.text:000000000040262a\n.text:0000000000402631\n.text:0000000000402634\n.text:0000000000402636\n.text:000000000040263a\n.text:000000000040263b\n.text:000000000040263d\n.text:000000000040263f\n.text:0000000000402641\n.text:0000000000402643\n.text:0000000000402644\n'
p55
tp56
sS'strncmp'
p57
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p58
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_00610038)();\u000a  return iVar1;\u000a}\u000a\u000a
p59
S'JMP qword ptr [0x00610038]\n'
p60
S'ff 25 b2 e8 20 00\n'
p61
S'.plt:0000000000401780\n'
p62
tp63
sS'any_non_remote_file'
p64
(S'\n__stdcall any_non_remote_file(File_spec * f, size_t n_files)\n'
p65
V\u000a_Bool any_non_remote_file(File_spec *f,size_t n_files)\u000a\u000a{\u000a  ulong uVar1;\u000a  int *piVar2;\u000a  \u000a  if (n_files != 0) {\u000a    piVar2 = &f->fd;\u000a    uVar1 = 0;\u000a    do {\u000a      if ((-1 < *piVar2) && (*(char *)((long)piVar2 + -3) == 0)) {\u000a        return true;\u000a      }\u000a      uVar1 = uVar1 + 1;\u000a      piVar2 = piVar2 + 0x18;\u000a    } while (uVar1 < n_files);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p66
S'TEST RSI,RSI\nJZ 0x00402e07\nADD RDI,0x38\nXOR EAX,EAX\nNOP dword ptr [RAX + RAX*0x1]\nCMP dword ptr [RDI],0x0\nJS 0x00402dfb\nCMP byte ptr [RDI + -0x3],0x0\nJZ 0x00402e0a\nINC RAX\nADD RDI,0x60\nCMP RAX,RSI\nJC 0x00402df0\nXOR EAX,EAX\nRET\nMOV AL,0x1\nRET\n'
p67
S'48 85 f6\n74 22\n48 83 c7 38\n31 c0\n0f 1f 44 00 00\n83 3f 00\n78 06\n80 7f fd 00\n74 0f\n48 ff c0\n48 83 c7 60\n48 39 f0\n72 e9\n31 c0\nc3\nb0 01\nc3\n'
p68
S'.text:0000000000402de0\n.text:0000000000402de3\n.text:0000000000402de5\n.text:0000000000402de9\n.text:0000000000402deb\n.text:0000000000402df0\n.text:0000000000402df3\n.text:0000000000402df5\n.text:0000000000402df9\n.text:0000000000402dfb\n.text:0000000000402dfe\n.text:0000000000402e02\n.text:0000000000402e05\n.text:0000000000402e07\n.text:0000000000402e09\n.text:0000000000402e0a\n.text:0000000000402e0c\n'
p69
tp70
sS'xnrealloc'
p71
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p72
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p73
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00409504\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00409510\nPUSH RAX\nCALL 0x00409660\n'
p74
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p75
S'.text:00000000004094f0\n.text:00000000004094f3\n.text:00000000004094f6\n.text:00000000004094f9\n.text:00000000004094fb\n.text:00000000004094ff\n.text:0000000000409502\n.text:0000000000409504\n.text:0000000000409505\n'
p76
tp77
sS'quote'
p78
(S'\n__stdcall quote(char * arg)\n'
p79
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p80
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x004089c0\n'
p81
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p82
S'.text:00000000004089d0\n.text:00000000004089d3\n.text:00000000004089d5\n.text:00000000004089d8\n'
p83
tp84
sS'emit_bug_reporting_address'
p85
(S'\n__stdcall emit_bug_reporting_address()\n'
p86
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p87
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x40d00d\nMOV EDX,0x5\nCALL 0x00401840\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40d022\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401ae0\nXOR EDI,EDI\nMOV ESI,0x40d038\nMOV EDX,0x5\nCALL 0x00401840\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x40be6b\nMOV ECX,0x40be79\nXOR EAX,EAX\nCALL 0x00401ae0\nXOR EDI,EDI\nMOV ESI,0x40d04c\nMOV EDX,0x5\nCALL 0x00401840\nMOV RSI,qword ptr [0x00610308]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401970\n'
p88
S'50\n31 ff\nbe 0d d0 40 00\nba 05 00 00 00\ne8 fe 83 ff ff\n48 89 c1\nbf 01 00 00 00\nba 22 d0 40 00\n31 c0\n48 89 ce\ne8 87 86 ff ff\n31 ff\nbe 38 d0 40 00\nba 05 00 00 00\ne8 d6 83 ff ff\n48 89 c6\nbf 01 00 00 00\nba 6b be 40 00\nb9 79 be 40 00\n31 c0\ne8 5d 86 ff ff\n31 ff\nbe 4c d0 40 00\nba 05 00 00 00\ne8 ac 83 ff ff\n48 8b 35 6d 6e 20 00\n48 89 c7\n58\ne9 cc 84 ff ff\n'
p89
S'.text:0000000000409430\n.text:0000000000409431\n.text:0000000000409433\n.text:0000000000409438\n.text:000000000040943d\n.text:0000000000409442\n.text:0000000000409445\n.text:000000000040944a\n.text:000000000040944f\n.text:0000000000409451\n.text:0000000000409454\n.text:0000000000409459\n.text:000000000040945b\n.text:0000000000409460\n.text:0000000000409465\n.text:000000000040946a\n.text:000000000040946d\n.text:0000000000409472\n.text:0000000000409477\n.text:000000000040947c\n.text:000000000040947e\n.text:0000000000409483\n.text:0000000000409485\n.text:000000000040948a\n.text:000000000040948f\n.text:0000000000409494\n.text:000000000040949b\n.text:000000000040949e\n.text:000000000040949f\n'
p90
tp91
sS'clone_quoting_options'
p92
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p93
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p94
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401770\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x610380\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00409610\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p95
S'55\n41 56\n53\n48 89 fb\ne8 d4 a1 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 80 03 61 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 55 20 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p96
S'.text:0000000000407590\n.text:0000000000407591\n.text:0000000000407593\n.text:0000000000407594\n.text:0000000000407597\n.text:000000000040759c\n.text:000000000040759f\n.text:00000000004075a2\n.text:00000000004075a5\n.text:00000000004075aa\n.text:00000000004075ae\n.text:00000000004075b3\n.text:00000000004075b6\n.text:00000000004075bb\n.text:00000000004075be\n.text:00000000004075bf\n.text:00000000004075c1\n.text:00000000004075c2\n'
p97
tp98
sS'get_stat_atime'
p99
(S'\n__stdcall get_stat_atime(stat * st)\n'
p100
V\u000atimespec get_stat_atime(stat *st)\u000a\u000a{\u000a  return st->st_atim;\u000a}\u000a\u000a
p101
S'MOV RAX,qword ptr [RDI + 0x48]\nMOV RDX,qword ptr [RDI + 0x50]\nRET\n'
p102
S'48 8b 47 48\n48 8b 57 50\nc3\n'
p103
S'.text:0000000000408eb0\n.text:0000000000408eb4\n.text:0000000000408eb8\n'
p104
tp105
sS'xmalloc'
p106
(S'\n__stdcall xmalloc(size_t n)\n'
p107
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p108
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401a30\nTEST RBX,RBX\nJZ 0x004094e3\nTEST RAX,RAX\nJZ 0x004094e5\nPOP RBX\nRET\nCALL 0x00409660\n'
p109
S'53\n48 89 fb\ne8 57 85 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p110
S'.text:00000000004094d0\n.text:00000000004094d1\n.text:00000000004094d4\n.text:00000000004094d9\n.text:00000000004094dc\n.text:00000000004094de\n.text:00000000004094e1\n.text:00000000004094e3\n.text:00000000004094e4\n.text:00000000004094e5\n'
p111
tp112
sS'quotearg_char_mem'
p113
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p114
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p115
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x006103b0]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x006103a0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x00610390]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x00610380]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x004075f0\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004084e0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p116
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d a8 7b 20 00\n48 89 4c 24 30\n0f 10 05 8c 7b 20 00\n0f 29 44 24 20\n0f 10 05 70 7b 20 00\n0f 29 44 24 10\n0f 10 05 54 7b 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p117
S'.text:00000000004087f0\n.text:00000000004087f2\n.text:00000000004087f4\n.text:00000000004087f5\n.text:00000000004087f9\n.text:00000000004087fb\n.text:00000000004087fe\n.text:0000000000408801\n.text:0000000000408808\n.text:000000000040880d\n.text:0000000000408814\n.text:0000000000408819\n.text:0000000000408820\n.text:0000000000408825\n.text:000000000040882c\n.text:0000000000408830\n.text:0000000000408833\n.text:0000000000408838\n.text:000000000040883b\n.text:000000000040883d\n.text:0000000000408842\n.text:0000000000408844\n.text:0000000000408847\n.text:000000000040884a\n.text:000000000040884d\n.text:0000000000408852\n.text:0000000000408856\n.text:0000000000408857\n.text:0000000000408859\n.text:000000000040885b\n'
p118
tp119
sS'frame_dummy'
p120
(S'\n__stdcall frame_dummy()\n'
p121
V\u000a/* WARNING: Removing unreachable block (ram,0x00401cca) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p122
S'MOV EDI,0x60fe18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401cc0\nJMP 0x00401c50\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401cbb\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401c50\n'
p123
S'bf 18 fe 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p124
S'.text:0000000000401cb0\n.text:0000000000401cb5\n.text:0000000000401cb9\n.text:0000000000401cbb\n.text:0000000000401cc0\n.text:0000000000401cc5\n.text:0000000000401cc8\n.text:0000000000401cca\n.text:0000000000401ccb\n.text:0000000000401cce\n.text:0000000000401cd0\n.text:0000000000401cd1\n'
p125
tp126
sS'tail_forever'
p127
(S'\n__stdcall tail_forever(File_spec * f, size_t n_files, double sleep_interval)\n'
p128
V\u000avoid tail_forever(File_spec *f,size_t n_files,double sleep_interval)\u000a\u000a{\u000a  uint __fd;\u000a  uint uVar1;\u000a  bool bVar2;\u000a  _Bool _Var3;\u000a  uint uVar4;\u000a  int iVar5;\u000a  uint uVar6;\u000a  int iVar7;\u000a  uint *puVar8;\u000a  undefined8 uVar9;\u000a  char *pcVar10;\u000a  char *pretty_filename;\u000a  int *piVar11;\u000a  uintmax_t uVar12;\u000a  File_spec *f_00;\u000a  uint uVar13;\u000a  ulong uVar14;\u000a  size_t sVar15;\u000a  bool bVar16;\u000a  timespec tVar17;\u000a  size_t local_e0;\u000a  stat local_c0;\u000a  \u000a  uVar4 = 0;\u000a  if (((n_files == 1) && (pid == 0)) && (follow_mode == Follow_descriptor)) {\u000a    uVar4 = f->mode & 0xf000;\u000a    uVar4 = uVar4 | (uint)(uVar4 != 0x8000);\u000a  }\u000a  local_e0 = n_files - 1;\u000a  uVar14 = (ulong)(byte)uVar4;\u000a  bVar16 = false;\u000a  uVar13 = uVar4 & 0xff;\u000a  if (n_files != 0) goto LAB_004039e7;\u000aLAB_00403970:\u000a  bVar2 = false;\u000a  do {\u000a    _Var3 = any_live_files(f,n_files);\u000a    if (_Var3 == false) {\u000a      uVar9 = dcgettext(0,"no files remaining",5);\u000a      error(0,0,uVar9,uVar9);\u000a      return;\u000a    }\u000a    if ((((int)uVar14 != 0) || (!bVar2)) && (iVar5 = fflush_unlocked(stdout), iVar5 != 0)) {\u000a      puVar8 = (uint *)__errno_location();\u000a      __fd = *puVar8;\u000a      uVar9 = dcgettext(0,"write error",5);\u000a      error(1,(ulong)__fd,uVar9);\u000a    }\u000a    if (!bVar2) {\u000a      if (bVar16) {\u000a        return;\u000a      }\u000a      if ((pid == 0) || (iVar5 = kill(pid,0), iVar5 == 0)) {\u000a        bVar16 = false;\u000a      }\u000a      else {\u000a        piVar11 = __errno_location();\u000a        bVar16 = *piVar11 != 1;\u000a        if (bVar16) goto joined_r0x00403963;\u000a      }\u000a      iVar5 = xnanosleep(sleep_interval);\u000a      if (iVar5 != 0) {\u000a        puVar8 = (uint *)__errno_location();\u000a        __fd = *puVar8;\u000a        uVar9 = dcgettext(0,"cannot read realtime clock",5);\u000a        error(1,(ulong)__fd,uVar9);\u000a      }\u000a    }\u000ajoined_r0x00403963:\u000a    if (n_files == 0) goto LAB_00403970;\u000aLAB_004039e7:\u000a    sVar15 = 0;\u000a    bVar2 = false;\u000a    f_00 = f;\u000a    do {\u000a      iVar5 = (int)uVar14;\u000a      if (f_00->ignore == false) {\u000a        __fd = f_00->fd;\u000a        if ((int)__fd < 0) {\u000a          recheck(f_00);\u000a        }\u000a        else {\u000a          pretty_filename = pretty_name(f_00);\u000a          uVar1 = f_00->mode;\u000a          iVar7 = f_00->blocking;\u000a          if (f_00->blocking != iVar5) {\u000a            uVar6 = rpl_fcntl();\u000a            if (((int)uVar6 < 0) ||\u000a               (((uVar6 | (uint)((byte)uVar4 == 0) << 0xb) != uVar6 &&\u000a                (iVar7 = rpl_fcntl(), iVar7 == -1)))) {\u000a              if (((f_00->mode & 0xf000) != 0x8000) || (piVar11 = __errno_location(), *piVar11 != 1)\u000a                 ) {\u000a                puVar8 = (uint *)__errno_location();\u000a                uVar6 = *puVar8;\u000a                uVar9 = dcgettext(0,"%s: cannot change nonblocking mode",5);\u000a                quotearg_n_style_colon((char *)0x0);\u000a                uVar14 = (ulong)uVar13;\u000a                error(1,(ulong)uVar6,uVar9);\u000a              }\u000a              iVar7 = f_00->blocking;\u000a            }\u000a            else {\u000a              f_00->blocking = iVar5;\u000a              iVar7 = iVar5;\u000a            }\u000a          }\u000a          if (iVar7 == 0) {\u000a            iVar5 = fstat(__fd,(stat *)&local_c0);\u000a            uVar6 = local_c0.st_mode;\u000a            if (iVar5 != 0) {\u000a              f_00->fd = -1;\u000a              puVar8 = (uint *)__errno_location();\u000a              f_00->errnum = *puVar8;\u000a              uVar1 = *puVar8;\u000a              quotearg_n_style_colon((char *)0x0);\u000a              uVar14 = (ulong)uVar13;\u000a              error(0,(ulong)uVar1,&DAT_0040c6e4);\u000a              close(__fd);\u000a              goto LAB_00403cf0;\u000a            }\u000a            if ((f_00->mode == local_c0.st_mode) &&\u000a               (((local_c0.st_mode & 0xf000) != 0x8000 || (f_00->size == local_c0.st_size)))) {\u000a              get_stat_mtime(&local_c0);\u000a              iVar5 = timespec_cmp();\u000a              uVar12 = max_n_unchanged_stats_between_opens;\u000a              if (iVar5 == 0) {\u000a                uVar14 = f_00->n_unchanged_stats;\u000a                f_00->n_unchanged_stats = uVar14 + 1;\u000a                if (uVar14 < uVar12) {\u000a                  uVar14 = (ulong)uVar13;\u000a                }\u000a                else {\u000a                  uVar14 = (ulong)uVar13;\u000a                  if (follow_mode == Follow_name) {\u000a                    recheck(f_00);\u000a                    f_00->n_unchanged_stats = 0;\u000a                  }\u000a                }\u000a                goto LAB_00403cf0;\u000a              }\u000a            }\u000a            tVar17 = get_stat_mtime(&local_c0);\u000a            (f_00->mtime).tv_sec = SUB168((undefined  [16])tVar17,0);\u000a            (f_00->mtime).tv_nsec = SUB168((undefined  [16])tVar17 >> 0x40,0);\u000a            f_00->mode = uVar6;\u000a            f_00->n_unchanged_stats = 0;\u000a            if (((uVar1 & 0xf000) == 0x8000) && (local_c0.st_size < f_00->size)) {\u000a              uVar9 = dcgettext(0,"%s: file truncated",5);\u000a              pcVar10 = quotearg_n_style_colon((char *)0x0);\u000a              error(0,0,uVar9,pcVar10);\u000a              xlseek((ulong)__fd,(char *)0x0);\u000a              f_00->size = 0;\u000a            }\u000a            uVar14 = (ulong)uVar13;\u000a            if ((sVar15 != local_e0) && (local_e0 = sVar15, print_headers == 1)) {\u000a              write_header(pretty_filename);\u000a              local_e0 = sVar15;\u000a            }\u000a          }\u000a          uVar12 = dump_remainder(pretty_filename,(ulong)__fd);\u000a          bVar2 = (bool)(bVar2 | uVar12 != 0);\u000a          f_00->size = f_00->size + uVar12;\u000a        }\u000a      }\u000aLAB_00403cf0:\u000a      sVar15 = sVar15 + 1;\u000a      f_00 = f_00 + 1;\u000a    } while (n_files != sVar15);\u000a  } while( true );\u000a}\u000a\u000a
p129
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xd8\nMOVSD qword ptr [RSP + 0x40],XMM0\nMOV qword ptr [RSP + 0x30],RDI\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x20],RSI\nCMP RSI,0x1\nJNZ 0x004038a1\nMOV ECX,dword ptr [0x00610354]\nTEST ECX,ECX\nJNZ 0x004038a1\nCMP dword ptr [0x00610278],0x2\nJNZ 0x004038a1\nMOV EAX,0xf000\nMOV RCX,qword ptr [RSP + 0x30]\nAND EAX,dword ptr [RCX + 0x30]\nCMP EAX,0x8000\nSETNZ AL\nMOV RCX,qword ptr [RSP + 0x20]\nDEC RCX\nMOV qword ptr [RSP + 0x28],RCX\nMOVZX R14D,AL\nXOR EAX,EAX\nTEST R14B,R14B\nSETZ AL\nSHL EAX,0xb\nMOV dword ptr [RSP + 0x3c],EAX\nMOV dword ptr [RSP + 0xc],0x0\nMOV dword ptr [RSP + 0x8],R14D\nCMP qword ptr [RSP + 0x20],0x0\nJNZ 0x004039e7\nJMP 0x00403970\nTEST byte ptr [RSP + 0xc],0x1\nJNZ 0x00403d29\nMOV EDI,dword ptr [0x00610354]\nTEST EDI,EDI\nJZ 0x00403916\nXOR ESI,ESI\nCALL 0x004019d0\nTEST EAX,EAX\nJZ 0x00403916\nCALL 0x00401770\nCMP dword ptr [RAX],0x1\nSETNZ AL\nMOV dword ptr [RSP + 0xc],EAX\nJNZ 0x004039df\nJMP 0x0040391e\nMOV dword ptr [RSP + 0xc],0x0\nMOVSD XMM0,qword ptr [RSP + 0x40]\nCALL 0x00409790\nTEST EAX,EAX\nJZ 0x004039df\nCALL 0x00401770\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40c66d\nMOV EDX,0x5\nCALL 0x00401840\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401af0\nCMP qword ptr [RSP + 0x20],0x0\nJNZ 0x004039e7\nNOP dword ptr [RAX]\nXOR R13D,R13D\nMOV RDI,qword ptr [RSP + 0x30]\nMOV RSI,qword ptr [RSP + 0x20]\nCALL 0x00405d20\nTEST AL,AL\nJZ 0x00403d07\nAND R13B,0x1\nSETZ AL\nTEST R14D,R14D\nJNZ 0x0040399a\nTEST AL,AL\nJZ 0x004039d6\nMOV RDI,qword ptr [0x00610308]\nCALL 0x00401b90\nTEST EAX,EAX\nJZ 0x004039d6\nCALL 0x00401770\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40bd12\nMOV EDX,0x5\nCALL 0x00401840\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401af0\nTEST R13B,R13B\nJZ 0x004038df\nCMP qword ptr [RSP + 0x20],0x0\nJZ 0x00403970\nXOR R15D,R15D\nMOV RBP,qword ptr [RSP + 0x30]\nXOR R13D,R13D\nJMP 0x00403b70\nMOV R14D,dword ptr [RSP + 0x60]\nCMP dword ptr [RBP + 0x30],R14D\nJNZ 0x00403a41\nMOV EAX,R14D\nAND EAX,0xf000\nCMP EAX,0x8000\nJNZ 0x00403a1c\nMOV RAX,qword ptr [RBP + 0x8]\nCMP RAX,qword ptr [RSP + 0x78]\nJNZ 0x00403a41\nLEA RDI,[RSP + 0x48]\nCALL 0x00408ed0\nMOV RCX,RDX\nMOV RDI,qword ptr [RBP + 0x10]\nMOV RSI,qword ptr [RBP + 0x18]\nMOV RDX,RAX\nCALL 0x00408f00\nTEST EAX,EAX\nJZ 0x00403b10\nLEA RDI,[RSP + 0x48]\nCALL 0x00408ed0\nMOV qword ptr [RBP + 0x10],RAX\nMOV qword ptr [RBP + 0x18],RDX\nMOV dword ptr [RBP + 0x30],R14D\nMOV qword ptr [RBP + 0x58],0x0\nAND EBX,0xf000\nCMP EBX,0x8000\nJNZ 0x00403ad2\nMOV RAX,qword ptr [RSP + 0x78]\nCMP RAX,qword ptr [RBP + 0x8]\nJGE 0x00403ad2\nXOR EDI,EDI\nMOV ESI,0x40c637\nMOV EDX,0x5\nCALL 0x00401840\nMOV R14,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV dword ptr [RSP + 0x1c],R13D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDX,R13\nCALL 0x00408890\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R14\nCALL 0x00401af0\nXOR ESI,ESI\nXOR EDX,EDX\nMOV EDI,R12D\nMOV RCX,R13\nMOV R13D,dword ptr [RSP + 0x1c]\nCALL 0x00404720\nMOV qword ptr [RBP + 0x8],0x0\nCMP R15,qword ptr [RSP + 0x28]\nMOV R14D,dword ptr [RSP + 0x8]\nMOV RAX,qword ptr [RSP + 0x10]\nJZ 0x00403c60\nCMP byte ptr [0x0061034e],0x1\nMOV qword ptr [RSP + 0x28],R15\nJNZ 0x00403c60\nMOV RDI,RAX\nCALL 0x00403d70\nMOV RAX,qword ptr [RSP + 0x10]\nMOV qword ptr [RSP + 0x28],R15\nJMP 0x00403c60\nMOV RAX,qword ptr [0x00610280]\nMOV RCX,qword ptr [RBP + 0x58]\nLEA RDX,[RCX + 0x1]\nMOV qword ptr [RBP + 0x58],RDX\nCMP RAX,RCX\nJA 0x00403b59\nCMP dword ptr [0x00610278],0x1\nMOV R14D,dword ptr [RSP + 0x8]\nJNZ 0x00403cf0\nXOR ESI,ESI\nCMP dword ptr [RBP + 0x40],0x0\nSETNZ SIL\nMOV RDI,RBP\nCALL 0x00405720\nMOV qword ptr [RBP + 0x58],0x0\nJMP 0x00403cf0\nMOV R14D,dword ptr [RSP + 0x8]\nJMP 0x00403cf0\nCMP byte ptr [RBP + 0x34],0x0\nJNZ 0x00403cf0\nMOV R12D,dword ptr [RBP + 0x38]\nMOV RDI,RBP\nTEST R12D,R12D\nJS 0x00403bde\nCALL 0x00403d40\nMOV EBX,dword ptr [RBP + 0x30]\nMOV ECX,dword ptr [RBP + 0x40]\nCMP ECX,R14D\nJZ 0x00403c5c\nMOV dword ptr [RSP + 0x10],EBX\nMOV EBX,R13D\nMOV R13,RAX\nMOV ESI,0x3\nXOR EAX,EAX\nMOV EDI,R12D\nCALL 0x00409be0\nTEST EAX,EAX\nJS 0x00403beb\nMOV EDX,EAX\nOR EDX,dword ptr [RSP + 0x3c]\nCMP EDX,EAX\nJZ 0x00403bd5\nMOV ESI,0x4\nXOR EAX,EAX\nMOV EDI,R12D\nCALL 0x00409be0\nCMP EAX,-0x1\nJZ 0x00403beb\nMOV dword ptr [RBP + 0x40],R14D\nMOV ECX,R14D\nJMP 0x00403c52\nMOV ESI,R14D\nCALL 0x00405720\nJMP 0x00403cf0\nMOV EAX,dword ptr [RBP + 0x30]\nMOV ECX,0xf000\nAND EAX,ECX\nCMP EAX,0x8000\nJNZ 0x00403c06\nCALL 0x00401770\nCMP dword ptr [RAX],0x1\nJZ 0x00403c4f\nCALL 0x00401770\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x1c],EAX\nXOR EDI,EDI\nMOV ESI,0x40c64a\nMOV EDX,0x5\nCALL 0x00401840\nMOV R14,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R13\nCALL 0x00408890\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,dword ptr [RSP + 0x1c]\nMOV RDX,R14\nMOV R14D,dword ptr [RSP + 0x8]\nCALL 0x00401af0\nMOV ECX,dword ptr [RBP + 0x40]\nMOV RAX,R13\nMOV R13D,EBX\nMOV EBX,dword ptr [RSP + 0x10]\nTEST ECX,ECX\nJZ 0x00403c8b\nXOR EDX,EDX\nCMP dword ptr [RBP + 0x40],0x0\nSETZ DL\nOR RDX,-0x2\nMOV RDI,RAX\nMOV ESI,R12D\nCALL 0x00404370\nTEST RAX,RAX\nSETNZ CL\nAND R13B,0x1\nOR R13B,CL\nADD qword ptr [RBP + 0x8],RAX\nJMP 0x00403cf0\nMOV qword ptr [RSP + 0x10],RAX\nMOV EDI,R12D\nLEA RSI,[RSP + 0x48]\nCALL 0x0040a6e0\nTEST EAX,EAX\nJZ 0x004039f7\nMOV dword ptr [RBP + 0x38],0xffffffff\nCALL 0x00401770\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RBP + 0x3c],ECX\nMOV R14D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,qword ptr [RSP + 0x10]\nCALL 0x00408890\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40c6e4\nXOR EAX,EAX\nMOV ESI,R14D\nMOV R14D,dword ptr [RSP + 0x8]\nCALL 0x00401af0\nMOV EDI,R12D\nCALL 0x00401930\nNOP dword ptr [RAX + RAX*0x1]\nINC R15\nADD RBP,0x60\nCMP qword ptr [RSP + 0x20],R15\nJNZ 0x00403b70\nJMP 0x00403973\nXOR EDI,EDI\nMOV ESI,0x40c457\nMOV EDX,0x5\nCALL 0x00401840\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401af0\nADD RSP,0xd8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p130
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec d8 00 00 00\nf2 0f 11 44 24 40\n48 89 7c 24 30\n31 c0\n48 89 74 24 20\n48 83 fe 01\n75 28\n8b 0d d5 ca 20 00\n85 c9\n75 1e\n83 3d ee c9 20 00 02\n75 15\nb8 00 f0 00 00\n48 8b 4c 24 30\n23 41 30\n3d 00 80 00 00\n0f 95 c0\n48 8b 4c 24 20\n48 ff c9\n48 89 4c 24 28\n44 0f b6 f0\n31 c0\n45 84 f6\n0f 94 c0\nc1 e0 0b\n89 44 24 3c\nc7 44 24 0c 00 00 00 00\n44 89 74 24 08\n48 83 7c 24 20 00\n0f 85 0d 01 00 00\ne9 91 00 00 00\nf6 44 24 0c 01\n0f 85 3f 04 00 00\n8b 3d 64 ca 20 00\n85 ff\n74 22\n31 f6\ne8 d5 e0 ff ff\n85 c0\n74 17\ne8 6c de ff ff\n83 38 01\n0f 95 c0\n89 44 24 0c\n0f 85 cb 00 00 00\neb 08\nc7 44 24 0c 00 00 00 00\nf2 0f 10 44 24 40\ne8 67 5e 00 00\n85 c0\n0f 84 ae 00 00 00\ne8 3a de ff ff\n8b 18\n31 ff\nbe 6d c6 40 00\nba 05 00 00 00\ne8 f7 de ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ca\ne8 93 e1 ff ff\n48 83 7c 24 20 00\n0f 85 7e 00 00 00\n0f 1f 80 00 00 00 00\n45 31 ed\n48 8b 7c 24 30\n48 8b 74 24 20\ne8 9e 23 00 00\n84 c0\n0f 84 7d 03 00 00\n41 80 e5 01\n0f 94 c0\n45 85 f6\n75 04\n84 c0\n74 3c\n48 8b 3d 67 c9 20 00\ne8 ea e1 ff ff\n85 c0\n74 2c\ne8 c1 dd ff ff\n8b 18\n31 ff\nbe 12 bd 40 00\nba 05 00 00 00\ne8 7e de ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ca\ne8 1a e1 ff ff\n45 84 ed\n0f 84 00 ff ff ff\n48 83 7c 24 20 00\n74 89\n45 31 ff\n48 8b 6c 24 30\n45 31 ed\ne9 79 01 00 00\n44 8b 74 24 60\n44 39 75 30\n75 3f\n44 89 f0\n25 00 f0 00 00\n3d 00 80 00 00\n75 0b\n48 8b 45 08\n48 3b 44 24 78\n75 25\n48 8d 7c 24 48\ne8 aa 54 00 00\n48 89 d1\n48 8b 7d 10\n48 8b 75 18\n48 89 c2\ne8 c7 54 00 00\n85 c0\n0f 84 cf 00 00 00\n48 8d 7c 24 48\ne8 85 54 00 00\n48 89 45 10\n48 89 55 18\n44 89 75 30\n48 c7 45 58 00 00 00 00\n81 e3 00 f0 00 00\n81 fb 00 80 00 00\n75 65\n48 8b 44 24 78\n48 3b 45 08\n7d 5a\n31 ff\nbe 37 c6 40 00\nba 05 00 00 00\ne8 b7 dd ff ff\n49 89 c6\n31 ff\nbe 03 00 00 00\n44 89 6c 24 1c\n4c 8b 6c 24 10\n4c 89 ea\ne8 eb 4d 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n4c 89 f2\ne8 3a e0 ff ff\n31 f6\n31 d2\n44 89 e7\n4c 89 e9\n44 8b 6c 24 1c\ne8 56 0c 00 00\n48 c7 45 08 00 00 00 00\n4c 3b 7c 24 28\n44 8b 74 24 08\n48 8b 44 24 10\n0f 84 79 01 00 00\n80 3d 60 c8 20 00 01\n4c 89 7c 24 28\n0f 85 67 01 00 00\n48 89 c7\ne8 6f 02 00 00\n48 8b 44 24 10\n4c 89 7c 24 28\ne9 50 01 00 00\n48 8b 05 69 c7 20 00\n48 8b 4d 58\n48 8d 51 01\n48 89 55 58\n48 39 c8\n77 31\n83 3d 49 c7 20 00 01\n44 8b 74 24 08\n0f 85 b6 01 00 00\n31 f6\n83 7d 40 00\n40 0f 95 c6\n48 89 ef\ne8 d4 1b 00 00\n48 c7 45 58 00 00 00 00\ne9 97 01 00 00\n44 8b 74 24 08\ne9 8d 01 00 00\n80 7d 34 00\n0f 85 76 01 00 00\n44 8b 65 38\n48 89 ef\n45 85 e4\n78 58\ne8 b5 01 00 00\n8b 5d 30\n8b 4d 40\n44 39 f1\n0f 84 c2 00 00 00\n89 5c 24 10\n44 89 eb\n49 89 c5\nbe 03 00 00 00\n31 c0\n44 89 e7\ne8 2d 60 00 00\n85 c0\n78 34\n89 c2\n0b 54 24 3c\n39 c2\n74 14\nbe 04 00 00 00\n31 c0\n44 89 e7\ne8 10 60 00 00\n83 f8 ff\n74 16\n44 89 75 40\n44 89 f1\neb 74\n44 89 f6\ne8 3a 1b 00 00\ne9 05 01 00 00\n8b 45 30\nb9 00 f0 00 00\n21 c8\n3d 00 80 00 00\n75 0a\ne8 6f db ff ff\n83 38 01\n74 49\ne8 65 db ff ff\n8b 00\n89 44 24 1c\n31 ff\nbe 4a c6 40 00\nba 05 00 00 00\ne8 1e dc ff ff\n49 89 c6\n31 ff\nbe 03 00 00 00\n4c 89 ea\ne8 5c 4c 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n8b 74 24 1c\n4c 89 f2\n44 8b 74 24 08\ne8 a1 de ff ff\n8b 4d 40\n4c 89 e8\n41 89 dd\n8b 5c 24 10\n85 c9\n74 2b\n31 d2\n83 7d 40 00\n0f 94 c2\n48 83 ca fe\n48 89 c7\n44 89 e6\ne8 f8 06 00 00\n48 85 c0\n0f 95 c1\n41 80 e5 01\n41 08 cd\n48 01 45 08\neb 65\n48 89 44 24 10\n44 89 e7\n48 8d 74 24 48\ne8 43 6a 00 00\n85 c0\n0f 84 52 fd ff ff\nc7 45 38 ff ff ff ff\ne8 bf da ff ff\n8b 08\n89 4d 3c\n44 8b 30\n31 ff\nbe 03 00 00 00\n48 8b 54 24 10\ne8 c6 4b 00 00\n48 89 c1\n31 ff\nba e4 c6 40 00\n31 c0\n44 89 f6\n44 8b 74 24 08\ne8 0d de ff ff\n44 89 e7\ne8 45 dc ff ff\n0f 1f 44 00 00\n49 ff c7\n48 83 c5 60\n4c 39 7c 24 20\n0f 85 6e fe ff ff\ne9 6c fc ff ff\n31 ff\nbe 57 c4 40 00\nba 05 00 00 00\ne8 28 db ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 c7 dd ff ff\n48 81 c4 d8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p131
S'.text:0000000000403850\n.text:0000000000403851\n.text:0000000000403853\n.text:0000000000403855\n.text:0000000000403857\n.text:0000000000403859\n.text:000000000040385a\n.text:0000000000403861\n.text:0000000000403867\n.text:000000000040386c\n.text:000000000040386e\n.text:0000000000403873\n.text:0000000000403877\n.text:0000000000403879\n.text:000000000040387f\n.text:0000000000403881\n.text:0000000000403883\n.text:000000000040388a\n.text:000000000040388c\n.text:0000000000403891\n.text:0000000000403896\n.text:0000000000403899\n.text:000000000040389e\n.text:00000000004038a1\n.text:00000000004038a6\n.text:00000000004038a9\n.text:00000000004038ae\n.text:00000000004038b2\n.text:00000000004038b4\n.text:00000000004038b7\n.text:00000000004038ba\n.text:00000000004038bd\n.text:00000000004038c1\n.text:00000000004038c9\n.text:00000000004038ce\n.text:00000000004038d4\n.text:00000000004038da\n.text:00000000004038df\n.text:00000000004038e4\n.text:00000000004038ea\n.text:00000000004038f0\n.text:00000000004038f2\n.text:00000000004038f4\n.text:00000000004038f6\n.text:00000000004038fb\n.text:00000000004038fd\n.text:00000000004038ff\n.text:0000000000403904\n.text:0000000000403907\n.text:000000000040390a\n.text:000000000040390e\n.text:0000000000403914\n.text:0000000000403916\n.text:000000000040391e\n.text:0000000000403924\n.text:0000000000403929\n.text:000000000040392b\n.text:0000000000403931\n.text:0000000000403936\n.text:0000000000403938\n.text:000000000040393a\n.text:000000000040393f\n.text:0000000000403944\n.text:0000000000403949\n.text:000000000040394c\n.text:0000000000403951\n.text:0000000000403953\n.text:0000000000403955\n.text:0000000000403958\n.text:000000000040395d\n.text:0000000000403963\n.text:0000000000403969\n.text:0000000000403970\n.text:0000000000403973\n.text:0000000000403978\n.text:000000000040397d\n.text:0000000000403982\n.text:0000000000403984\n.text:000000000040398a\n.text:000000000040398e\n.text:0000000000403991\n.text:0000000000403994\n.text:0000000000403996\n.text:0000000000403998\n.text:000000000040399a\n.text:00000000004039a1\n.text:00000000004039a6\n.text:00000000004039a8\n.text:00000000004039aa\n.text:00000000004039af\n.text:00000000004039b1\n.text:00000000004039b3\n.text:00000000004039b8\n.text:00000000004039bd\n.text:00000000004039c2\n.text:00000000004039c5\n.text:00000000004039ca\n.text:00000000004039cc\n.text:00000000004039ce\n.text:00000000004039d1\n.text:00000000004039d6\n.text:00000000004039d9\n.text:00000000004039df\n.text:00000000004039e5\n.text:00000000004039e7\n.text:00000000004039ea\n.text:00000000004039ef\n.text:00000000004039f2\n.text:00000000004039f7\n.text:00000000004039fc\n.text:0000000000403a00\n.text:0000000000403a02\n.text:0000000000403a05\n.text:0000000000403a0a\n.text:0000000000403a0f\n.text:0000000000403a11\n.text:0000000000403a15\n.text:0000000000403a1a\n.text:0000000000403a1c\n.text:0000000000403a21\n.text:0000000000403a26\n.text:0000000000403a29\n.text:0000000000403a2d\n.text:0000000000403a31\n.text:0000000000403a34\n.text:0000000000403a39\n.text:0000000000403a3b\n.text:0000000000403a41\n.text:0000000000403a46\n.text:0000000000403a4b\n.text:0000000000403a4f\n.text:0000000000403a53\n.text:0000000000403a57\n.text:0000000000403a5f\n.text:0000000000403a65\n.text:0000000000403a6b\n.text:0000000000403a6d\n.text:0000000000403a72\n.text:0000000000403a76\n.text:0000000000403a78\n.text:0000000000403a7a\n.text:0000000000403a7f\n.text:0000000000403a84\n.text:0000000000403a89\n.text:0000000000403a8c\n.text:0000000000403a8e\n.text:0000000000403a93\n.text:0000000000403a98\n.text:0000000000403a9d\n.text:0000000000403aa0\n.text:0000000000403aa5\n.text:0000000000403aa8\n.text:0000000000403aaa\n.text:0000000000403aac\n.text:0000000000403aae\n.text:0000000000403ab1\n.text:0000000000403ab6\n.text:0000000000403ab8\n.text:0000000000403aba\n.text:0000000000403abd\n.text:0000000000403ac0\n.text:0000000000403ac5\n.text:0000000000403aca\n.text:0000000000403ad2\n.text:0000000000403ad7\n.text:0000000000403adc\n.text:0000000000403ae1\n.text:0000000000403ae7\n.text:0000000000403aee\n.text:0000000000403af3\n.text:0000000000403af9\n.text:0000000000403afc\n.text:0000000000403b01\n.text:0000000000403b06\n.text:0000000000403b0b\n.text:0000000000403b10\n.text:0000000000403b17\n.text:0000000000403b1b\n.text:0000000000403b1f\n.text:0000000000403b23\n.text:0000000000403b26\n.text:0000000000403b28\n.text:0000000000403b2f\n.text:0000000000403b34\n.text:0000000000403b3a\n.text:0000000000403b3c\n.text:0000000000403b40\n.text:0000000000403b44\n.text:0000000000403b47\n.text:0000000000403b4c\n.text:0000000000403b54\n.text:0000000000403b59\n.text:0000000000403b5e\n.text:0000000000403b70\n.text:0000000000403b74\n.text:0000000000403b7a\n.text:0000000000403b7e\n.text:0000000000403b81\n.text:0000000000403b84\n.text:0000000000403b86\n.text:0000000000403b8b\n.text:0000000000403b8e\n.text:0000000000403b91\n.text:0000000000403b94\n.text:0000000000403b9a\n.text:0000000000403b9e\n.text:0000000000403ba1\n.text:0000000000403ba4\n.text:0000000000403ba9\n.text:0000000000403bab\n.text:0000000000403bae\n.text:0000000000403bb3\n.text:0000000000403bb5\n.text:0000000000403bb7\n.text:0000000000403bb9\n.text:0000000000403bbd\n.text:0000000000403bbf\n.text:0000000000403bc1\n.text:0000000000403bc6\n.text:0000000000403bc8\n.text:0000000000403bcb\n.text:0000000000403bd0\n.text:0000000000403bd3\n.text:0000000000403bd5\n.text:0000000000403bd9\n.text:0000000000403bdc\n.text:0000000000403bde\n.text:0000000000403be1\n.text:0000000000403be6\n.text:0000000000403beb\n.text:0000000000403bee\n.text:0000000000403bf3\n.text:0000000000403bf5\n.text:0000000000403bfa\n.text:0000000000403bfc\n.text:0000000000403c01\n.text:0000000000403c04\n.text:0000000000403c06\n.text:0000000000403c0b\n.text:0000000000403c0d\n.text:0000000000403c11\n.text:0000000000403c13\n.text:0000000000403c18\n.text:0000000000403c1d\n.text:0000000000403c22\n.text:0000000000403c25\n.text:0000000000403c27\n.text:0000000000403c2c\n.text:0000000000403c2f\n.text:0000000000403c34\n.text:0000000000403c37\n.text:0000000000403c3c\n.text:0000000000403c3e\n.text:0000000000403c42\n.text:0000000000403c45\n.text:0000000000403c4a\n.text:0000000000403c4f\n.text:0000000000403c52\n.text:0000000000403c55\n.text:0000000000403c58\n.text:0000000000403c5c\n.text:0000000000403c5e\n.text:0000000000403c60\n.text:0000000000403c62\n.text:0000000000403c66\n.text:0000000000403c69\n.text:0000000000403c6d\n.text:0000000000403c70\n.text:0000000000403c73\n.text:0000000000403c78\n.text:0000000000403c7b\n.text:0000000000403c7e\n.text:0000000000403c82\n.text:0000000000403c85\n.text:0000000000403c89\n.text:0000000000403c8b\n.text:0000000000403c90\n.text:0000000000403c93\n.text:0000000000403c98\n.text:0000000000403c9d\n.text:0000000000403c9f\n.text:0000000000403ca5\n.text:0000000000403cac\n.text:0000000000403cb1\n.text:0000000000403cb3\n.text:0000000000403cb6\n.text:0000000000403cb9\n.text:0000000000403cbb\n.text:0000000000403cc0\n.text:0000000000403cc5\n.text:0000000000403cca\n.text:0000000000403ccd\n.text:0000000000403ccf\n.text:0000000000403cd4\n.text:0000000000403cd6\n.text:0000000000403cd9\n.text:0000000000403cde\n.text:0000000000403ce3\n.text:0000000000403ce6\n.text:0000000000403ceb\n.text:0000000000403cf0\n.text:0000000000403cf3\n.text:0000000000403cf7\n.text:0000000000403cfc\n.text:0000000000403d02\n.text:0000000000403d07\n.text:0000000000403d09\n.text:0000000000403d0e\n.text:0000000000403d13\n.text:0000000000403d18\n.text:0000000000403d1b\n.text:0000000000403d1d\n.text:0000000000403d1f\n.text:0000000000403d21\n.text:0000000000403d24\n.text:0000000000403d29\n.text:0000000000403d30\n.text:0000000000403d31\n.text:0000000000403d33\n.text:0000000000403d35\n.text:0000000000403d37\n.text:0000000000403d39\n.text:0000000000403d3a\n'
p132
tp133
sS'start_lines'
p134
(S'\n__stdcall start_lines(char * pretty_filename, uintmax_t n_lines, uintmax_t * read_pos)\n'
p135
V\u000aint start_lines(char *pretty_filename,uintmax_t n_lines,uintmax_t *read_pos)\u000a\u000a{\u000a  uint uVar1;\u000a  int __c;\u000a  size_t sVar2;\u000a  char *buffer_00;\u000a  void *pvVar3;\u000a  uint *puVar4;\u000a  undefined8 uVar5;\u000a  char *pcVar6;\u000a  long *in_RCX;\u000a  char buffer [8192];\u000a  char local_2038 [8200];\u000a  \u000a  if (read_pos == (uintmax_t *)0x0) {\u000a    __c = 0;\u000a  }\u000a  else {\u000a    while (sVar2 = safe_read((void *)(n_lines & 0xffffffff),(size_t)local_2038), sVar2 != 0) {\u000a      if (sVar2 == 0xffffffffffffffff) {\u000a        puVar4 = (uint *)__errno_location();\u000a        uVar1 = *puVar4;\u000a        uVar5 = dcgettext(0,"error reading %s",5);\u000a        pcVar6 = quotearg_style((char *)0x4);\u000a        error(0,(ulong)uVar1,uVar5,pcVar6);\u000a        return 1;\u000a      }\u000a      pcVar6 = local_2038 + sVar2;\u000a      *in_RCX = *in_RCX + sVar2;\u000a      __c = 0;\u000a      buffer_00 = local_2038;\u000a      if (line_end != 0) {\u000a        __c = 10;\u000a        buffer_00 = local_2038;\u000a      }\u000a      while (pvVar3 = memchr(buffer_00,__c,(size_t)(pcVar6 + -(long)buffer_00)),\u000a            pvVar3 != (void *)0x0) {\u000a        buffer_00 = (char *)((long)pvVar3 + 1);\u000a        read_pos = (uintmax_t *)((long)read_pos + -1);\u000a        if (read_pos == (uintmax_t *)0x0) {\u000a          if (pcVar6 <= buffer_00) {\u000a            return 0;\u000a          }\u000a          xwrite_stdout(buffer_00,(size_t)(pcVar6 + -(long)buffer_00));\u000a          return 0;\u000a        }\u000a      }\u000a    }\u000a    __c = -1;\u000a  }\u000a  return __c;\u000a}\u000a\u000a
p136
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x2018\nMOV R15,RCX\nMOV RBX,RDX\nMOV R13D,ESI\nTEST RBX,RBX\nJZ 0x00404305\nMOV qword ptr [RSP + 0x8],RDI\nLEA R12,[RSP + 0x10]\nMOV EDX,0x2000\nMOV EDI,R13D\nMOV RSI,R12\nCALL 0x00408de0\nTEST RAX,RAX\nJZ 0x0040431b\nCMP RAX,-0x1\nJZ 0x00404322\nLEA RBP,[RSP + RAX*0x1 + 0x10]\nADD qword ptr [R15],RAX\nMOV AL,byte ptr [0x00610351]\nTEST AL,AL\nMOV R14D,0x0\nMOV EAX,0xa\nCMOVNZ R14D,EAX\nMOV RAX,R12\nNOP word ptr [RAX + RAX*0x1]\nMOV RDX,RBP\nSUB RDX,RAX\nMOV RDI,RAX\nMOV ESI,R14D\nCALL 0x00401940\nTEST RAX,RAX\nJZ 0x0040428d\nINC RAX\nDEC RBX\nJNZ 0x004042d0\nXOR EBX,EBX\nCMP RAX,RBP\nJNC 0x00404307\nSUB RBP,RAX\nMOV RDI,RAX\nMOV RSI,RBP\nCALL 0x00404b50\nJMP 0x00404307\nXOR EBX,EBX\nMOV EAX,EBX\nADD RSP,0x2018\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EBX,0xffffffff\nJMP 0x00404307\nCALL 0x00401770\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40c200\nMOV EDX,0x5\nCALL 0x00401840\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x8]\nCALL 0x004087b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00401af0\nMOV EBX,0x1\nJMP 0x00404307\n'
p137
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 18 20 00 00\n49 89 cf\n48 89 d3\n41 89 f5\n48 85 db\n0f 84 82 00 00 00\n48 89 7c 24 08\n4c 8d 64 24 10\nba 00 20 00 00\n44 89 ef\n4c 89 e6\ne8 43 4b 00 00\n48 85 c0\n74 79\n48 83 f8 ff\n74 7a\n48 8d 6c 04 10\n49 01 07\n8a 05 9b c0 20 00\n84 c0\n41 be 00 00 00 00\nb8 0a 00 00 00\n44 0f 45 f0\n4c 89 e0\n66 0f 1f 44 00 00\n48 89 ea\n48 29 c2\n48 89 c7\n44 89 f6\ne8 5f d6 ff ff\n48 85 c0\n74 a7\n48 ff c0\n48 ff cb\n75 e2\n31 db\n48 39 e8\n73 12\n48 29 c5\n48 89 c7\n48 89 ee\ne8 4d 08 00 00\neb 02\n31 db\n89 d8\n48 81 c4 18 20 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbb ff ff ff ff\neb e5\ne8 49 d4 ff ff\n8b 18\n31 ff\nbe 00 c2 40 00\nba 05 00 00 00\ne8 06 d5 ff ff\n48 89 c5\nbf 04 00 00 00\n48 8b 74 24 08\ne8 64 44 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 93 d7 ff ff\nbb 01 00 00 00\neb a3\n'
p138
S'.text:0000000000404260\n.text:0000000000404261\n.text:0000000000404263\n.text:0000000000404265\n.text:0000000000404267\n.text:0000000000404269\n.text:000000000040426a\n.text:0000000000404271\n.text:0000000000404274\n.text:0000000000404277\n.text:000000000040427a\n.text:000000000040427d\n.text:0000000000404283\n.text:0000000000404288\n.text:000000000040428d\n.text:0000000000404292\n.text:0000000000404295\n.text:0000000000404298\n.text:000000000040429d\n.text:00000000004042a0\n.text:00000000004042a2\n.text:00000000004042a6\n.text:00000000004042a8\n.text:00000000004042ad\n.text:00000000004042b0\n.text:00000000004042b6\n.text:00000000004042b8\n.text:00000000004042be\n.text:00000000004042c3\n.text:00000000004042c7\n.text:00000000004042ca\n.text:00000000004042d0\n.text:00000000004042d3\n.text:00000000004042d6\n.text:00000000004042d9\n.text:00000000004042dc\n.text:00000000004042e1\n.text:00000000004042e4\n.text:00000000004042e6\n.text:00000000004042e9\n.text:00000000004042ec\n.text:00000000004042ee\n.text:00000000004042f0\n.text:00000000004042f3\n.text:00000000004042f5\n.text:00000000004042f8\n.text:00000000004042fb\n.text:00000000004042fe\n.text:0000000000404303\n.text:0000000000404305\n.text:0000000000404307\n.text:0000000000404309\n.text:0000000000404310\n.text:0000000000404311\n.text:0000000000404313\n.text:0000000000404315\n.text:0000000000404317\n.text:0000000000404319\n.text:000000000040431a\n.text:000000000040431b\n.text:0000000000404320\n.text:0000000000404322\n.text:0000000000404327\n.text:0000000000404329\n.text:000000000040432b\n.text:0000000000404330\n.text:0000000000404335\n.text:000000000040433a\n.text:000000000040433d\n.text:0000000000404342\n.text:0000000000404347\n.text:000000000040434c\n.text:000000000040434f\n.text:0000000000404351\n.text:0000000000404353\n.text:0000000000404355\n.text:0000000000404358\n.text:000000000040435d\n.text:0000000000404362\n'
p139
tp140
sS'quotearg_n_style_colon'
p141
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p142
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p143
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00408710\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x004075f0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x004084e0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p144
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p145
S'.text:0000000000408890\n.text:0000000000408891\n.text:0000000000408893\n.text:0000000000408894\n.text:0000000000408898\n.text:000000000040889b\n.text:000000000040889d\n.text:00000000004088a2\n.text:00000000004088a5\n.text:00000000004088aa\n.text:00000000004088af\n.text:00000000004088b4\n.text:00000000004088b7\n.text:00000000004088bc\n.text:00000000004088c3\n.text:00000000004088c5\n.text:00000000004088c8\n.text:00000000004088cb\n.text:00000000004088d0\n.text:00000000004088d4\n.text:00000000004088d5\n.text:00000000004088d7\n.text:00000000004088d8\n'
p146
tp147
sS'get_stat_birthtime_ns'
p148
(S'\n__stdcall get_stat_birthtime_ns(stat * st)\n'
p149
V\u000along get_stat_birthtime_ns(stat *st)\u000a\u000a{\u000a  return 0;\u000a}\u000a\u000a
p150
S'XOR EAX,EAX\nRET\n'
p151
S'31 c0\nc3\n'
p152
S'.text:0000000000408ea0\n.text:0000000000408ea2\n'
p153
tp154
sS'rotl64'
p155
(S'\n__stdcall rotl64(uint64_t x)\n'
p156
V\u000auint64_t rotl64(uint64_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x << bVar1 | x >> 0x40 - bVar1;\u000a}\u000a\u000a
p157
S'MOV ECX,ESI\nROL RDI,CL\nMOV RAX,RDI\nRET\n'
p158
S'89 f1\n48 d3 c7\n48 89 f8\nc3\n'
p159
S'.text:0000000000409e40\n.text:0000000000409e42\n.text:0000000000409e45\n.text:0000000000409e48\n'
p160
tp161
sS'fremote'
p162
(S'\n__stdcall fremote(char * name)\n'
p163
V\u000a_Bool fremote(char *name)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  byte bVar6;\u000a  statfs local_98;\u000a  \u000a  iVar2 = fstatfs((int)name,&local_98);\u000a  if (iVar2 == 0) {\u000a    iVar2 = is_local_fs_type(local_98.f_type);\u000a    if (2 < iVar2 + 1U) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("!\u005c"unexpected return value from is_local_fs_type\u005c"","src/tail.c",0x394,\u000a                    "_Bool fremote(int, const char *)");\u000a    }\u000a    bVar6 = 3U >> ((byte)(iVar2 + 1U) & 7) & 1;\u000a  }\u000a  else {\u000a    puVar3 = (uint *)__errno_location();\u000a    uVar1 = *puVar3;\u000a    bVar6 = 1;\u000a    if (uVar1 != 0x26) {\u000a      uVar4 = dcgettext(0,"cannot determine location of %s. reverting to polling",5);\u000a      pcVar5 = quotearg_style((char *)0x4);\u000a      error(0,(ulong)uVar1,uVar4,pcVar5);\u000a    }\u000a  }\u000a  return (_Bool)bVar6;\u000a}\u000a\u000a
p164
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x78\nMOV R14,RSI\nMOV RSI,RSP\nCALL 0x00401b40\nTEST EAX,EAX\nJZ 0x00403efb\nCALL 0x00401770\nMOV EBP,dword ptr [RAX]\nMOV BL,0x1\nCMP EBP,0x26\nJZ 0x00403f16\nXOR EDI,EDI\nMOV ESI,0x40c36d\nMOV EDX,0x5\nCALL 0x00401840\nMOV R15,RAX\nMOV EDI,0x4\nMOV RSI,R14\nCALL 0x004087b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,R15\nCALL 0x00401af0\nJMP 0x00403f16\nMOV RDI,qword ptr [RSP]\nCALL 0x00404ed0\nINC EAX\nCMP EAX,0x3\nJNC 0x00403f23\nAND AL,0x7\nMOV BL,0x3\nMOV ECX,EAX\nSHR BL,CL\nAND BL,0x1\nMOV EAX,EBX\nADD RSP,0x78\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x40c3a3\nMOV ESI,0x40c313\nMOV EDX,0x394\nMOV ECX,0x40c3d4\nCALL 0x00401900\n'
p165
S'55\n41 57\n41 56\n53\n48 83 ec 78\n49 89 f6\n48 89 e6\ne8 8b dc ff ff\n85 c0\n74 42\ne8 b2 d8 ff ff\n8b 28\nb3 01\n83 fd 26\n74 4f\n31 ff\nbe 6d c3 40 00\nba 05 00 00 00\ne8 68 d9 ff ff\n49 89 c7\nbf 04 00 00 00\n4c 89 f6\ne8 c8 48 00 00\n48 89 c1\n31 ff\n31 c0\n89 ee\n4c 89 fa\ne8 f7 db ff ff\neb 1b\n48 8b 3c 24\ne8 cc 0f 00 00\nff c0\n83 f8 03\n73 18\n24 07\nb3 03\n89 c1\nd2 eb\n80 e3 01\n89 d8\n48 83 c4 78\n5b\n41 5e\n41 5f\n5d\nc3\nbf a3 c3 40 00\nbe 13 c3 40 00\nba 94 03 00 00\nb9 d4 c3 40 00\ne8 c4 d9 ff ff\n'
p166
S'.text:0000000000403ea0\n.text:0000000000403ea1\n.text:0000000000403ea3\n.text:0000000000403ea5\n.text:0000000000403ea6\n.text:0000000000403eaa\n.text:0000000000403ead\n.text:0000000000403eb0\n.text:0000000000403eb5\n.text:0000000000403eb7\n.text:0000000000403eb9\n.text:0000000000403ebe\n.text:0000000000403ec0\n.text:0000000000403ec2\n.text:0000000000403ec5\n.text:0000000000403ec7\n.text:0000000000403ec9\n.text:0000000000403ece\n.text:0000000000403ed3\n.text:0000000000403ed8\n.text:0000000000403edb\n.text:0000000000403ee0\n.text:0000000000403ee3\n.text:0000000000403ee8\n.text:0000000000403eeb\n.text:0000000000403eed\n.text:0000000000403eef\n.text:0000000000403ef1\n.text:0000000000403ef4\n.text:0000000000403ef9\n.text:0000000000403efb\n.text:0000000000403eff\n.text:0000000000403f04\n.text:0000000000403f06\n.text:0000000000403f09\n.text:0000000000403f0b\n.text:0000000000403f0d\n.text:0000000000403f0f\n.text:0000000000403f11\n.text:0000000000403f13\n.text:0000000000403f16\n.text:0000000000403f18\n.text:0000000000403f1c\n.text:0000000000403f1d\n.text:0000000000403f1f\n.text:0000000000403f21\n.text:0000000000403f22\n.text:0000000000403f23\n.text:0000000000403f28\n.text:0000000000403f2d\n.text:0000000000403f32\n.text:0000000000403f37\n'
p167
tp168
sS'xnanosleep'
p169
(S'\n__stdcall xnanosleep(double seconds)\n'
p170
V\u000aint xnanosleep(double seconds)\u000a\u000a{\u000a  int iVar1;\u000a  uint *puVar2;\u000a  timespec local_28;\u000a  \u000a  local_28 = dtotimespec(seconds);\u000a  puVar2 = (uint *)__errno_location();\u000a  *puVar2 = 0;\u000a  iVar1 = rpl_nanosleep(&local_28,(timespec *)0x0);\u000a  while( true ) {\u000a    if (iVar1 == 0) {\u000a      return 0;\u000a    }\u000a    if ((*puVar2 | 4) != 4) break;\u000a    *puVar2 = 0;\u000a    iVar1 = rpl_nanosleep(&local_28,(timespec *)0x0);\u000a  }\u000a  return -1;\u000a}\u000a\u000a
p171
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nCALL 0x0040a0e0\nMOV qword ptr [RSP],RAX\nMOV qword ptr [RSP + 0x8],RDX\nCALL 0x00401770\nMOV R14,RAX\nMOV dword ptr [R14],0x0\nXOR EBX,EBX\nMOV RDI,RSP\nXOR ESI,ESI\nCALL 0x00409da0\nTEST EAX,EAX\nJZ 0x004097f9\nMOV R15,RSP\nNOP dword ptr [RAX]\nMOV EAX,dword ptr [R14]\nOR EAX,0x4\nCMP EAX,0x4\nJNZ 0x004097f4\nMOV dword ptr [R14],0x0\nXOR EBX,EBX\nXOR ESI,ESI\nMOV RDI,R15\nCALL 0x00409da0\nTEST EAX,EAX\nJNZ 0x004097d0\nJMP 0x004097f9\nMOV EBX,0xffffffff\nMOV EAX,EBX\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p172
S'41 57\n41 56\n53\n48 83 ec 10\ne8 42 09 00 00\n48 89 04 24\n48 89 54 24 08\ne8 c4 7f ff ff\n49 89 c6\n41 c7 06 00 00 00 00\n31 db\n48 89 e7\n31 f6\ne8 de 05 00 00\n85 c0\n74 33\n49 89 e7\n0f 1f 80 00 00 00 00\n41 8b 06\n83 c8 04\n83 f8 04\n75 19\n41 c7 06 00 00 00 00\n31 db\n31 f6\n4c 89 ff\ne8 b2 05 00 00\n85 c0\n75 de\neb 05\nbb ff ff ff ff\n89 d8\n48 83 c4 10\n5b\n41 5e\n41 5f\nc3\n'
p173
S'.text:0000000000409790\n.text:0000000000409792\n.text:0000000000409794\n.text:0000000000409795\n.text:0000000000409799\n.text:000000000040979e\n.text:00000000004097a2\n.text:00000000004097a7\n.text:00000000004097ac\n.text:00000000004097af\n.text:00000000004097b6\n.text:00000000004097b8\n.text:00000000004097bb\n.text:00000000004097bd\n.text:00000000004097c2\n.text:00000000004097c4\n.text:00000000004097c6\n.text:00000000004097c9\n.text:00000000004097d0\n.text:00000000004097d3\n.text:00000000004097d6\n.text:00000000004097d9\n.text:00000000004097db\n.text:00000000004097e2\n.text:00000000004097e4\n.text:00000000004097e6\n.text:00000000004097e9\n.text:00000000004097ee\n.text:00000000004097f0\n.text:00000000004097f2\n.text:00000000004097f4\n.text:00000000004097f9\n.text:00000000004097fb\n.text:00000000004097ff\n.text:0000000000409800\n.text:0000000000409802\n.text:0000000000409804\n'
p174
tp175
sS'quote_mem'
p176
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p177
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p178
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x004089a0\n'
p179
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p180
S'.text:00000000004089b0\n.text:00000000004089b3\n.text:00000000004089b6\n.text:00000000004089b8\n.text:00000000004089bb\n.text:00000000004089be\n'
p181
tp182
sS'fileno'
p183
(S'\n__stdcall fileno(FILE * __stream)\n'
p184
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_00610170)();\u000a  return iVar1;\u000a}\u000a\u000a
p185
S'JMP qword ptr [0x00610170]\n'
p186
S'ff 25 7a e7 20 00\n'
p187
S'.plt:00000000004019f0\n'
p188
tp189
sS'recheck'
p190
(S'\n__stdcall recheck(File_spec * f)\n'
p191
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000avoid recheck(File_spec *f)\u000a\u000a{\u000a  uint uVar1;\u000a  _Bool _Var2;\u000a  uint __fd;\u000a  int iVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  uint *puVar6;\u000a  char in_SIL;\u000a  uint *puVar7;\u000a  uint uVar8;\u000a  bool bVar9;\u000a  dev_t local_c0;\u000a  ino_t local_b8;\u000a  uint local_a8;\u000a  \u000a  if (*f->name == '-') {\u000a    bVar9 = f->tailable == false;\u000a    uVar8 = f->errnum;\u000a    if (f->name[1] != 0) goto LAB_00405779;\u000a    __fd = 0;\u000a  }\u000a  else {\u000a    bVar9 = f->tailable == false;\u000a    uVar8 = f->errnum;\u000aLAB_00405779:\u000a    __fd = open_safer(f->name,(ulong)(in_SIL == 0) << 0xb);\u000a  }\u000a  puVar7 = (uint *)&f->errnum;\u000a  _Var2 = valid_file_spec(f);\u000a  if (_Var2 == false) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("valid_file_spec (f)","src/tail.c",0x3af,"void recheck(struct File_spec *, _Bool)"\u000a                 );\u000a  }\u000a  f->tailable = __fd != 0xffffffff | ~reopen_inaccessible_files & 1;\u000a  if (disable_inotify == 0) {\u000a    iVar3 = lstat(f->name,(stat *)&local_c0);\u000a    if ((iVar3 == 0) && ((local_a8 & 0xf000) == 0xa000)) {\u000a      *puVar7 = 0xffffffff;\u000a      f->ignore = true;\u000a      uVar4 = dcgettext(0,"%s has been replaced with a symbolic link. giving up on this name",5);\u000a      pretty_name(f);\u000a      pcVar5 = quotearg_style((char *)0x4);\u000a      error(0,0,uVar4,pcVar5);\u000a      goto LAB_00405a35;\u000a    }\u000a  }\u000a  if ((__fd == 0xffffffff) || (iVar3 = fstat(__fd,(stat *)&local_c0), iVar3 < 0)) {\u000a    puVar6 = (uint *)__errno_location();\u000a    uVar1 = *puVar6;\u000a    *puVar7 = uVar1;\u000a    if (f->tailable == false) {\u000a      if (!bVar9) {\u000a        uVar4 = dcgettext(0,"%s has become inaccessible",5);\u000a        pretty_name(f);\u000a        pcVar5 = quotearg_style((char *)0x4);\u000a        error(0,(ulong)uVar1,uVar4,pcVar5);\u000a      }\u000a    }\u000a    else {\u000a      uVar1 = *puVar6;\u000a      if (uVar8 != uVar1) {\u000a        pretty_name(f);\u000a        pcVar5 = quotearg_n_style_colon((char *)0x0);\u000a        error(0,(ulong)uVar1,&DAT_0040c6e4,pcVar5);\u000a      }\u000a    }\u000a    goto LAB_00405a35;\u000a  }\u000a  local_a8._0_2_ = (ushort)local_a8 & 0xf000;\u000a  if ((short)(ushort)local_a8 < 0x1000) {\u000a    if (((ushort)local_a8 == 0x8000) || ((ushort)local_a8 == 0xc000)) {\u000aLAB_0040592c:\u000a      if (disable_inotify == 0) {\u000a        pretty_name(f);\u000a        _Var2 = fremote((char *)(ulong)__fd);\u000a        if (_Var2 != false) {\u000a          *puVar7 = 0xffffffff;\u000a          uVar4 = dcgettext(0,"%s has been replaced with a remote file. giving up on this name",5);\u000a          pretty_name(f);\u000a          pcVar5 = quotearg_style((char *)0x4);\u000a          error(0,0,uVar4,pcVar5);\u000a          *(undefined2 *)&f->ignore = 0x101;\u000a          goto LAB_00405a35;\u000a        }\u000a      }\u000a      *puVar7 = 0;\u000a      if ((uVar8 | 2) == 2) {\u000a        if (f->fd != -1) {\u000a          if ((f->ino == local_b8) && (f->dev == local_c0)) {\u000a            pretty_name(f);\u000a            close_fd((char *)(ulong)__fd);\u000a            return;\u000a          }\u000a          uVar4 = dcgettext(0,"%s has been replaced;  following new file",5);\u000a          pretty_name(f);\u000a          pcVar5 = quotearg_style((char *)0x4);\u000a          error(0,0,uVar4,pcVar5);\u000a          uVar8 = f->fd;\u000a          pretty_name(f);\u000a          close_fd((char *)(ulong)uVar8);\u000a          goto LAB_00405b15;\u000a        }\u000a        pcVar5 = "%s has appeared;  following new file";\u000a      }\u000a      else {\u000a        if (f->fd != -1) {\u000a                    /* WARNING: Subroutine does not return */\u000a          __assert_fail("f->fd == -1","src/tail.c",0x3fa,"void recheck(struct File_spec *, _Bool)");\u000a        }\u000a        pcVar5 = "%s has become accessible";\u000a      }\u000a      uVar4 = dcgettext(0,pcVar5,5);\u000a      pretty_name(f);\u000a      pcVar5 = quotearg_style((char *)0x4);\u000a      error(0,0,uVar4,pcVar5);\u000aLAB_00405b15:\u000a      record_open_fd(f,(ulong)__fd,(stat *)0x0);\u000a      pretty_name(f);\u000a      xlseek((ulong)__fd,(char *)0x0);\u000a      return;\u000a    }\u000a  }\u000a  else {\u000a    if (((ushort)local_a8 == 0x1000) || ((ushort)local_a8 == 0x2000)) goto LAB_0040592c;\u000a  }\u000a  *puVar7 = 0xffffffff;\u000a  uVar4 = dcgettext(0,"%s has been replaced with an untailable file; giving up on this name",5);\u000a  pretty_name(f);\u000a  pcVar5 = quotearg_style((char *)0x4);\u000a  error(0,0,uVar4,pcVar5);\u000a  f->ignore = true;\u000aLAB_00405a35:\u000a  pretty_name(f);\u000a  close_fd((char *)(ulong)__fd);\u000a  uVar8 = f->fd;\u000a  pretty_name(f);\u000a  close_fd((char *)(ulong)uVar8);\u000a  f->fd = -1;\u000a  return;\u000a}\u000a\u000a
p192
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV EBP,ESI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX]\nCMP byte ptr [RAX],0x2d\nJNZ 0x00405764\nLEA R14,[RBX + 0x36]\nCMP byte ptr [RBX + 0x36],0x0\nSETZ byte ptr [RSP + 0x3]\nLEA R12,[RBX + 0x3c]\nCMP byte ptr [RAX + 0x1],0x0\nMOV R13D,dword ptr [RBX + 0x3c]\nJNZ 0x00405779\nXOR R15D,R15D\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nJMP 0x0040579a\nCMP byte ptr [RBX + 0x36],0x0\nLEA R14,[RBX + 0x36]\nSETZ byte ptr [RSP + 0x3]\nLEA R12,[RBX + 0x3c]\nMOV R13D,dword ptr [RBX + 0x3c]\nMOV RDI,qword ptr [RBX]\nXOR ESI,ESI\nTEST BPL,BPL\nSETZ SIL\nSHL ESI,0xb\nMOV dword ptr [RSP + 0x4],0x0\nXOR EAX,EAX\nCALL 0x00406340\nMOV R15D,EAX\nMOV RDI,RBX\nCALL 0x00405d00\nTEST AL,AL\nJZ 0x00405b56\nMOV AL,byte ptr [0x00610353]\nNOT AL\nCMP R15D,-0x1\nSETNZ CL\nOR CL,AL\nAND CL,0x1\nMOV byte ptr [R14],CL\nMOV AL,byte ptr [0x00610352]\nTEST AL,AL\nJNZ 0x00405837\nMOV RDI,qword ptr [RBX]\nLEA RSI,[RSP + 0x8]\nCALL 0x0040a6f0\nTEST EAX,EAX\nJNZ 0x00405837\nMOV EAX,0xf000\nAND EAX,dword ptr [RSP + 0x20]\nCMP EAX,0xa000\nJNZ 0x00405837\nMOV dword ptr [R12],0xffffffff\nMOV byte ptr [RBX + 0x34],0x1\nXOR EDI,EDI\nMOV ESI,0x40c4e1\nMOV EDX,0x5\nCALL 0x00401840\nMOV RBP,RAX\nMOV RDI,RBX\nCALL 0x00403d40\nMOV EDI,0x4\nMOV RSI,RAX\nCALL 0x004087b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x00401af0\nJMP 0x00405a35\nCMP R15D,-0x1\nJZ 0x00405885\nLEA RSI,[RSP + 0x8]\nMOV EDI,R15D\nCALL 0x0040a6e0\nTEST EAX,EAX\nJS 0x00405885\nMOVZX EAX,word ptr [RSP + 0x20]\nAND EAX,0xf000\nMOVSX ECX,AX\nMOVZX EAX,AX\nCMP ECX,0xfff\nJG 0x0040591a\nCMP EAX,0x8000\nJZ 0x0040592c\nCMP EAX,0xc000\nJZ 0x0040592c\nJMP 0x004059ef\nCALL 0x00401770\nMOV EBP,dword ptr [RAX]\nMOV dword ptr [R12],EBP\nCMP byte ptr [R14],0x0\nJZ 0x004058d0\nMOV EBP,dword ptr [RAX]\nCMP R13D,EBP\nJZ 0x00405a35\nMOV RDI,RBX\nCALL 0x00403d40\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,RAX\nCALL 0x00408890\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40c6e4\nXOR EAX,EAX\nMOV ESI,EBP\nCALL 0x00401af0\nJMP 0x00405a35\nCMP byte ptr [RSP + 0x3],0x0\nJNZ 0x00405a35\nXOR EDI,EDI\nMOV ESI,0x40c523\nMOV EDX,0x5\nCALL 0x00401840\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00403d40\nMOV EDI,0x4\nMOV RSI,RAX\nCALL 0x004087b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,R14\nCALL 0x00401af0\nJMP 0x00405a35\nCMP EAX,0x1000\nJZ 0x0040592c\nCMP EAX,0x2000\nJNZ 0x004059ef\nMOV AL,byte ptr [0x00610352]\nTEST AL,AL\nJNZ 0x0040599a\nMOV RDI,RBX\nCALL 0x00403d40\nMOV EDI,R15D\nMOV RSI,RAX\nCALL 0x00403ea0\nTEST AL,AL\nJZ 0x0040599a\nMOV dword ptr [R12],0xffffffff\nXOR EDI,EDI\nMOV ESI,0x40c583\nMOV EDX,0x5\nCALL 0x00401840\nMOV RBP,RAX\nMOV RDI,RBX\nCALL 0x00403d40\nMOV EDI,0x4\nMOV RSI,RAX\nCALL 0x004087b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x00401af0\nMOV word ptr [RBX + 0x34],0x101\nJMP 0x00405a35\nMOV dword ptr [R12],0x0\nMOV EAX,dword ptr [RBX + 0x38]\nOR R13D,0x2\nCMP R13D,0x2\nJNZ 0x00405a76\nCMP EAX,-0x1\nJZ 0x00405adb\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RSP + 0x10]\nJNZ 0x00405a88\nMOV RAX,qword ptr [RBX + 0x20]\nCMP RAX,qword ptr [RSP + 0x8]\nJNZ 0x00405a88\nMOV RDI,RBX\nCALL 0x00403d40\nMOV EDI,R15D\nMOV RSI,RAX\nCALL 0x00403dd0\nJMP 0x00405a64\nMOV dword ptr [R12],0xffffffff\nXOR EDI,EDI\nMOV ESI,0x40c53e\nMOV EDX,0x5\nCALL 0x00401840\nMOV RBP,RAX\nMOV RDI,RBX\nCALL 0x00403d40\nMOV EDI,0x4\nMOV RSI,RAX\nCALL 0x004087b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x00401af0\nMOV byte ptr [RBX + 0x34],0x1\nMOV RDI,RBX\nCALL 0x00403d40\nMOV EDI,R15D\nMOV RSI,RAX\nCALL 0x00403dd0\nMOV EBP,dword ptr [RBX + 0x38]\nMOV RDI,RBX\nCALL 0x00403d40\nMOV EDI,EBP\nMOV RSI,RAX\nCALL 0x00403dd0\nMOV dword ptr [RBX + 0x38],0xffffffff\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP EAX,-0x1\nJNZ 0x00405b6f\nXOR EDI,EDI\nMOV ESI,0x40c5cf\nJMP 0x00405ae2\nXOR EDI,EDI\nMOV ESI,0x40c60d\nMOV EDX,0x5\nCALL 0x00401840\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00403d40\nMOV EDI,0x4\nMOV RSI,RAX\nCALL 0x004087b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R14\nCALL 0x00401af0\nMOV R14D,dword ptr [RBX + 0x38]\nMOV RDI,RBX\nCALL 0x00403d40\nMOV EDI,R14D\nMOV RSI,RAX\nCALL 0x00403dd0\nJMP 0x00405b15\nXOR EDI,EDI\nMOV ESI,0x40c5e8\nMOV EDX,0x5\nCALL 0x00401840\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00403d40\nMOV EDI,0x4\nMOV RSI,RAX\nCALL 0x004087b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R14\nCALL 0x00401af0\nMOVZX EAX,BPL\nCMP byte ptr [RSP + 0x4],0x0\nMOV R8D,0xffffffff\nCMOVZ R8D,EAX\nLEA RCX,[RSP + 0x8]\nXOR EDX,EDX\nMOV RDI,RBX\nMOV ESI,R15D\nCALL 0x00403e50\nMOV RDI,RBX\nCALL 0x00403d40\nXOR ESI,ESI\nXOR EDX,EDX\nMOV EDI,R15D\nMOV RCX,RAX\nCALL 0x00404720\nJMP 0x00405a64\nMOV EDI,0x40c4a5\nMOV ESI,0x40c313\nMOV EDX,0x3af\nMOV ECX,0x40c4b9\nCALL 0x00401900\nMOV EDI,0x40c5c3\nMOV ESI,0x40c313\nMOV EDX,0x3fa\nMOV ECX,0x40c4b9\nCALL 0x00401900\n'
p193
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n89 f5\n48 89 fb\n48 8b 03\n80 38 2d\n75 26\n4c 8d 73 36\n80 7b 36 00\n0f 94 44 24 03\n4c 8d 63 3c\n80 78 01 00\n44 8b 6b 3c\n75 20\n45 31 ff\nb0 01\n89 44 24 04\neb 36\n80 7b 36 00\n4c 8d 73 36\n0f 94 44 24 03\n4c 8d 63 3c\n44 8b 6b 3c\n48 8b 3b\n31 f6\n40 84 ed\n40 0f 94 c6\nc1 e6 0b\nc7 44 24 04 00 00 00 00\n31 c0\ne8 a9 0b 00 00\n41 89 c7\n48 89 df\ne8 5e 05 00 00\n84 c0\n0f 84 ac 03 00 00\n8a 05 a3 ab 20 00\nf6 d0\n41 83 ff ff\n0f 95 c1\n08 c1\n80 e1 01\n41 88 0e\n8a 05 8b ab 20 00\n84 c0\n75 6c\n48 8b 3b\n48 8d 74 24 08\ne8 18 4f 00 00\n85 c0\n75 5b\nb8 00 f0 00 00\n23 44 24 20\n3d 00 a0 00 00\n75 4b\n41 c7 04 24 ff ff ff ff\nc6 43 34 01\n31 ff\nbe e1 c4 40 00\nba 05 00 00 00\ne8 37 c0 ff ff\n48 89 c5\n48 89 df\ne8 2c e5 ff ff\nbf 04 00 00 00\n48 89 c6\ne8 8f 2f 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ea\ne8 be c2 ff ff\ne9 fe 01 00 00\n41 83 ff ff\n74 48\n48 8d 74 24 08\n44 89 ff\ne8 96 4e 00 00\n85 c0\n78 37\n0f b7 44 24 20\n25 00 f0 00 00\n0f bf c8\n0f b7 c0\n81 f9 ff 0f 00 00\n0f 8f b0 00 00 00\n3d 00 80 00 00\n0f 84 b7 00 00 00\n3d 00 c0 00 00\n0f 84 ac 00 00 00\ne9 6a 01 00 00\ne8 e6 be ff ff\n8b 28\n41 89 2c 24\n41 80 3e 00\n74 3a\n8b 28\n41 39 ed\n0f 84 94 01 00 00\n48 89 df\ne8 97 e4 ff ff\n31 ff\nbe 03 00 00 00\n48 89 c2\ne8 d8 2f 00 00\n48 89 c1\n31 ff\nba e4 c6 40 00\n31 c0\n89 ee\ne8 25 c2 ff ff\ne9 65 01 00 00\n80 7c 24 03 00\n0f 85 5a 01 00 00\n31 ff\nbe 23 c5 40 00\nba 05 00 00 00\ne8 54 bf ff ff\n49 89 c6\n48 89 df\ne8 49 e4 ff ff\nbf 04 00 00 00\n48 89 c6\ne8 ac 2e 00 00\n48 89 c1\n31 ff\n31 c0\n89 ee\n4c 89 f2\ne8 db c1 ff ff\ne9 1b 01 00 00\n3d 00 10 00 00\n74 0b\n3d 00 20 00 00\n0f 85 c3 00 00 00\n8a 05 20 aa 20 00\n84 c0\n75 64\n48 89 df\ne8 02 e4 ff ff\n44 89 ff\n48 89 c6\ne8 57 e5 ff ff\n84 c0\n74 4d\n41 c7 04 24 ff ff ff ff\n31 ff\nbe 83 c5 40 00\nba 05 00 00 00\ne8 da be ff ff\n48 89 c5\n48 89 df\ne8 cf e3 ff ff\nbf 04 00 00 00\n48 89 c6\ne8 32 2e 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ea\ne8 61 c1 ff ff\n66 c7 43 34 01 01\ne9 9b 00 00 00\n41 c7 04 24 00 00 00 00\n8b 43 38\n41 83 cd 02\n41 83 fd 02\n0f 85 c3 00 00 00\n83 f8 ff\n0f 84 1f 01 00 00\n48 8b 43 28\n48 3b 44 24 10\n0f 85 bd 00 00 00\n48 8b 43 20\n48 3b 44 24 08\n0f 85 ae 00 00 00\n48 89 df\ne8 5e e3 ff ff\n44 89 ff\n48 89 c6\ne8 e3 e3 ff ff\neb 75\n41 c7 04 24 ff ff ff ff\n31 ff\nbe 3e c5 40 00\nba 05 00 00 00\ne8 38 be ff ff\n48 89 c5\n48 89 df\ne8 2d e3 ff ff\nbf 04 00 00 00\n48 89 c6\ne8 90 2d 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ea\ne8 bf c0 ff ff\nc6 43 34 01\n48 89 df\ne8 03 e3 ff ff\n44 89 ff\n48 89 c6\ne8 88 e3 ff ff\n8b 6b 38\n48 89 df\ne8 ed e2 ff ff\n89 ef\n48 89 c6\ne8 73 e3 ff ff\nc7 43 38 ff ff ff ff\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n83 f8 ff\n0f 85 f0 00 00 00\n31 ff\nbe cf c5 40 00\neb 5a\n31 ff\nbe 0d c6 40 00\nba 05 00 00 00\ne8 a7 bd ff ff\n49 89 c6\n48 89 df\ne8 9c e2 ff ff\nbf 04 00 00 00\n48 89 c6\ne8 ff 2c 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n4c 89 f2\ne8 2e c0 ff ff\n44 8b 73 38\n48 89 df\ne8 72 e2 ff ff\n44 89 f7\n48 89 c6\ne8 f7 e2 ff ff\neb 3a\n31 ff\nbe e8 c5 40 00\nba 05 00 00 00\ne8 54 bd ff ff\n49 89 c6\n48 89 df\ne8 49 e2 ff ff\nbf 04 00 00 00\n48 89 c6\ne8 ac 2c 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n4c 89 f2\ne8 db bf ff ff\n40 0f b6 c5\n80 7c 24 04 00\n41 b8 ff ff ff ff\n44 0f 44 c0\n48 8d 4c 24 08\n31 d2\n48 89 df\n44 89 fe\ne8 16 e3 ff ff\n48 89 df\ne8 fe e1 ff ff\n31 f6\n31 d2\n44 89 ff\n48 89 c1\ne8 cf eb ff ff\ne9 0e ff ff ff\nbf a5 c4 40 00\nbe 13 c3 40 00\nba af 03 00 00\nb9 b9 c4 40 00\ne8 91 bd ff ff\nbf c3 c5 40 00\nbe 13 c3 40 00\nba fa 03 00 00\nb9 b9 c4 40 00\ne8 78 bd ff ff\n'
p194
S'.text:0000000000405720\n.text:0000000000405721\n.text:0000000000405723\n.text:0000000000405725\n.text:0000000000405727\n.text:0000000000405729\n.text:000000000040572a\n.text:0000000000405731\n.text:0000000000405733\n.text:0000000000405736\n.text:0000000000405739\n.text:000000000040573c\n.text:000000000040573e\n.text:0000000000405742\n.text:0000000000405746\n.text:000000000040574b\n.text:000000000040574f\n.text:0000000000405753\n.text:0000000000405757\n.text:0000000000405759\n.text:000000000040575c\n.text:000000000040575e\n.text:0000000000405762\n.text:0000000000405764\n.text:0000000000405768\n.text:000000000040576c\n.text:0000000000405771\n.text:0000000000405775\n.text:0000000000405779\n.text:000000000040577c\n.text:000000000040577e\n.text:0000000000405781\n.text:0000000000405785\n.text:0000000000405788\n.text:0000000000405790\n.text:0000000000405792\n.text:0000000000405797\n.text:000000000040579a\n.text:000000000040579d\n.text:00000000004057a2\n.text:00000000004057a4\n.text:00000000004057aa\n.text:00000000004057b0\n.text:00000000004057b2\n.text:00000000004057b6\n.text:00000000004057b9\n.text:00000000004057bb\n.text:00000000004057be\n.text:00000000004057c1\n.text:00000000004057c7\n.text:00000000004057c9\n.text:00000000004057cb\n.text:00000000004057ce\n.text:00000000004057d3\n.text:00000000004057d8\n.text:00000000004057da\n.text:00000000004057dc\n.text:00000000004057e1\n.text:00000000004057e5\n.text:00000000004057ea\n.text:00000000004057ec\n.text:00000000004057f4\n.text:00000000004057f8\n.text:00000000004057fa\n.text:00000000004057ff\n.text:0000000000405804\n.text:0000000000405809\n.text:000000000040580c\n.text:000000000040580f\n.text:0000000000405814\n.text:0000000000405819\n.text:000000000040581c\n.text:0000000000405821\n.text:0000000000405824\n.text:0000000000405826\n.text:0000000000405828\n.text:000000000040582a\n.text:000000000040582d\n.text:0000000000405832\n.text:0000000000405837\n.text:000000000040583b\n.text:000000000040583d\n.text:0000000000405842\n.text:0000000000405845\n.text:000000000040584a\n.text:000000000040584c\n.text:000000000040584e\n.text:0000000000405853\n.text:0000000000405858\n.text:000000000040585b\n.text:000000000040585e\n.text:0000000000405864\n.text:000000000040586a\n.text:000000000040586f\n.text:0000000000405875\n.text:000000000040587a\n.text:0000000000405880\n.text:0000000000405885\n.text:000000000040588a\n.text:000000000040588c\n.text:0000000000405890\n.text:0000000000405894\n.text:0000000000405896\n.text:0000000000405898\n.text:000000000040589b\n.text:00000000004058a1\n.text:00000000004058a4\n.text:00000000004058a9\n.text:00000000004058ab\n.text:00000000004058b0\n.text:00000000004058b3\n.text:00000000004058b8\n.text:00000000004058bb\n.text:00000000004058bd\n.text:00000000004058c2\n.text:00000000004058c4\n.text:00000000004058c6\n.text:00000000004058cb\n.text:00000000004058d0\n.text:00000000004058d5\n.text:00000000004058db\n.text:00000000004058dd\n.text:00000000004058e2\n.text:00000000004058e7\n.text:00000000004058ec\n.text:00000000004058ef\n.text:00000000004058f2\n.text:00000000004058f7\n.text:00000000004058fc\n.text:00000000004058ff\n.text:0000000000405904\n.text:0000000000405907\n.text:0000000000405909\n.text:000000000040590b\n.text:000000000040590d\n.text:0000000000405910\n.text:0000000000405915\n.text:000000000040591a\n.text:000000000040591f\n.text:0000000000405921\n.text:0000000000405926\n.text:000000000040592c\n.text:0000000000405932\n.text:0000000000405934\n.text:0000000000405936\n.text:0000000000405939\n.text:000000000040593e\n.text:0000000000405941\n.text:0000000000405944\n.text:0000000000405949\n.text:000000000040594b\n.text:000000000040594d\n.text:0000000000405955\n.text:0000000000405957\n.text:000000000040595c\n.text:0000000000405961\n.text:0000000000405966\n.text:0000000000405969\n.text:000000000040596c\n.text:0000000000405971\n.text:0000000000405976\n.text:0000000000405979\n.text:000000000040597e\n.text:0000000000405981\n.text:0000000000405983\n.text:0000000000405985\n.text:0000000000405987\n.text:000000000040598a\n.text:000000000040598f\n.text:0000000000405995\n.text:000000000040599a\n.text:00000000004059a2\n.text:00000000004059a5\n.text:00000000004059a9\n.text:00000000004059ad\n.text:00000000004059b3\n.text:00000000004059b6\n.text:00000000004059bc\n.text:00000000004059c0\n.text:00000000004059c5\n.text:00000000004059cb\n.text:00000000004059cf\n.text:00000000004059d4\n.text:00000000004059da\n.text:00000000004059dd\n.text:00000000004059e2\n.text:00000000004059e5\n.text:00000000004059e8\n.text:00000000004059ed\n.text:00000000004059ef\n.text:00000000004059f7\n.text:00000000004059f9\n.text:00000000004059fe\n.text:0000000000405a03\n.text:0000000000405a08\n.text:0000000000405a0b\n.text:0000000000405a0e\n.text:0000000000405a13\n.text:0000000000405a18\n.text:0000000000405a1b\n.text:0000000000405a20\n.text:0000000000405a23\n.text:0000000000405a25\n.text:0000000000405a27\n.text:0000000000405a29\n.text:0000000000405a2c\n.text:0000000000405a31\n.text:0000000000405a35\n.text:0000000000405a38\n.text:0000000000405a3d\n.text:0000000000405a40\n.text:0000000000405a43\n.text:0000000000405a48\n.text:0000000000405a4b\n.text:0000000000405a4e\n.text:0000000000405a53\n.text:0000000000405a55\n.text:0000000000405a58\n.text:0000000000405a5d\n.text:0000000000405a64\n.text:0000000000405a6b\n.text:0000000000405a6c\n.text:0000000000405a6e\n.text:0000000000405a70\n.text:0000000000405a72\n.text:0000000000405a74\n.text:0000000000405a75\n.text:0000000000405a76\n.text:0000000000405a79\n.text:0000000000405a7f\n.text:0000000000405a81\n.text:0000000000405a86\n.text:0000000000405a88\n.text:0000000000405a8a\n.text:0000000000405a8f\n.text:0000000000405a94\n.text:0000000000405a99\n.text:0000000000405a9c\n.text:0000000000405a9f\n.text:0000000000405aa4\n.text:0000000000405aa9\n.text:0000000000405aac\n.text:0000000000405ab1\n.text:0000000000405ab4\n.text:0000000000405ab6\n.text:0000000000405ab8\n.text:0000000000405aba\n.text:0000000000405abd\n.text:0000000000405ac2\n.text:0000000000405ac6\n.text:0000000000405ac9\n.text:0000000000405ace\n.text:0000000000405ad1\n.text:0000000000405ad4\n.text:0000000000405ad9\n.text:0000000000405adb\n.text:0000000000405add\n.text:0000000000405ae2\n.text:0000000000405ae7\n.text:0000000000405aec\n.text:0000000000405aef\n.text:0000000000405af2\n.text:0000000000405af7\n.text:0000000000405afc\n.text:0000000000405aff\n.text:0000000000405b04\n.text:0000000000405b07\n.text:0000000000405b09\n.text:0000000000405b0b\n.text:0000000000405b0d\n.text:0000000000405b10\n.text:0000000000405b15\n.text:0000000000405b19\n.text:0000000000405b1e\n.text:0000000000405b24\n.text:0000000000405b28\n.text:0000000000405b2d\n.text:0000000000405b2f\n.text:0000000000405b32\n.text:0000000000405b35\n.text:0000000000405b3a\n.text:0000000000405b3d\n.text:0000000000405b42\n.text:0000000000405b44\n.text:0000000000405b46\n.text:0000000000405b49\n.text:0000000000405b4c\n.text:0000000000405b51\n.text:0000000000405b56\n.text:0000000000405b5b\n.text:0000000000405b60\n.text:0000000000405b65\n.text:0000000000405b6a\n.text:0000000000405b6f\n.text:0000000000405b74\n.text:0000000000405b79\n.text:0000000000405b7e\n.text:0000000000405b83\n'
p195
tp196
sS'mbrtowc'
p197
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p198
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_006100c0)();\u000a  return sVar1;\u000a}\u000a\u000a
p199
S'JMP qword ptr [0x006100c0]\n'
p200
S'ff 25 2a e8 20 00\n'
p201
S'.plt:0000000000401890\n'
p202
tp203
sS'nanosleep'
p204
(S'\n__stdcall nanosleep(timespec * __requested_time, timespec * __remaining)\n'
p205
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint nanosleep(timespec *__requested_time,timespec *__remaining)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_nanosleep_006100e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p206
S'JMP qword ptr [0x006100e0]\n'
p207
S'ff 25 0a e8 20 00\n'
p208
S'.plt:00000000004018d0\n'
p209
tp210
sS'rotr16'
p211
(S'\n__stdcall rotr16()\n'
p212
V\u000auint16_t rotr16(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint16_t)\u000a         ((ushort)(in_EDI << (0x10 - (byte)in_ESI & 0x1f)) |\u000a         (ushort)(in_EDI >> ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p213
S'MOV EAX,EDI\nMOV ECX,ESI\nSHR EAX,CL\nMOV ECX,0x10\nSUB ECX,ESI\nSHL EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p214
S'89 f8\n89 f1\nd3 e8\nb9 10 00 00 00\n29 f1\nd3 e7\n09 c7\n89 f8\nc3\n'
p215
S'.text:0000000000409ec0\n.text:0000000000409ec2\n.text:0000000000409ec4\n.text:0000000000409ec6\n.text:0000000000409ecb\n.text:0000000000409ecd\n.text:0000000000409ecf\n.text:0000000000409ed1\n.text:0000000000409ed3\n'
p216
tp217
sS'xstrtoumax'
p218
(S'\n__stdcall xstrtoumax(char * s, char * * ptr, uintmax_t * val, char * valid_suffixes)\n'
p219
V\u000astrtol_error xstrtoumax(char *s,char **ptr,uintmax_t *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  byte *pbVar8;\u000a  strtol_error sVar9;\u000a  strtol_error sVar10;\u000a  long lVar11;\u000a  char *__s;\u000a  char **__endptr;\u000a  uintmax_t local_48;\u000a  uintmax_t *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)");\u000a  }\u000a  local_40 = (uintmax_t *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar8 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar8;\u000a    pbVar8 = pbVar8 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoumax(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar9 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar9 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar9 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar10 = sVar9;\u000a    if (__s == (char *)0x0) goto LAB_00409ae6;\u000a  }\u000a  pcVar6 = *__endptr;\u000a  sVar10 = sVar9;\u000a  if (*pcVar6 == 0) goto LAB_00409ae6;\u000a  pcVar7 = strchr(__s,(int)*pcVar6);\u000a  if (pcVar7 == (char *)0x0) goto switchD_00409a15_caseD_43;\u000a  pcVar7 = strchr(__s,0x30);\u000a  if (pcVar7 == (char *)0x0) {\u000aLAB_004099f3:\u000a    lVar11 = 1;\u000a  }\u000a  else {\u000a    cVar2 = pcVar6[1];\u000a    if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a      lVar11 = 2;\u000a    }\u000a    else {\u000a      if (cVar2 != 'i') goto LAB_004099f3;\u000a      lVar11 = (ulong)(pcVar6[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_00409ac7;\u000a  default:\u000aswitchD_00409a15_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'P':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Y':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Z':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'b':\u000a    goto LAB_00409ac7;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_00409ac7:\u000a    sVar3 = bkm_scale(&local_48);\u000a  }\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar10 = sVar3 | sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar10 = sVar3 | sVar9;\u000a  }\u000aLAB_00409ae6:\u000a  *local_40 = local_48;\u000a  return sVar10;\u000a}\u000a\u000a
p220
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x00409b03\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x00401770\nMOV R15,RAX\nMOV dword ptr [R15],0x0\nCALL 0x00401bd0\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x00409900\nTEST RBX,RBX\nLEA R13,[RSP + 0x10]\nCMOVNZ R13,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x00409af2\nMOV RDI,RBP\nMOV RSI,R13\nMOV EDX,R14D\nCALL 0x00401b30\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R13]\nCMP RAX,RBP\nJZ 0x00409960\nMOV EAX,dword ptr [R15]\nTEST EAX,EAX\nJZ 0x00409991\nCMP EAX,0x22\nJNZ 0x00409af2\nMOV EBX,0x1\nTEST R12,R12\nJNZ 0x0040999c\nJMP 0x00409ae6\nTEST R12,R12\nJZ 0x00409af2\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x00409af2\nMOV RDI,R12\nCALL 0x004018a0\nTEST RAX,RAX\nJZ 0x00409af2\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x0040999c\nXOR EBX,EBX\nTEST R12,R12\nJZ 0x00409ae6\nMOV RBP,qword ptr [R13]\nMOVSX ESI,byte ptr [RBP]\nTEST ESI,ESI\nJZ 0x00409ae6\nMOV RDI,R12\nCALL 0x004018a0\nTEST RAX,RAX\nJZ 0x00409a2e\nMOV ESI,0x30\nMOV RDI,R12\nCALL 0x004018a0\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x004099f3\nMOVSX EAX,byte ptr [RBP + 0x1]\nCMP EAX,0x42\nJZ 0x004099fa\nCMP EAX,0x44\nJZ 0x004099fa\nCMP EAX,0x69\nJNZ 0x004099f3\nXOR EAX,EAX\nCMP byte ptr [RBP + 0x2],0x42\nSETZ AL\nLEA RBP,[RAX + RAX*0x1 + 0x1]\nJMP 0x00409a04\nMOV EBP,0x1\nJMP 0x00409a04\nMOV ESI,0x3e8\nMOV EBP,0x2\nMOV RAX,qword ptr [R13]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x00409a2e\nXOR EAX,EAX\nJMP qword ptr [0x40d0d0 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nCALL 0x00409b50\nJMP 0x00409acc\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x00409af2\nMOV RDI,RSP\nMOV EDX,0x1\nCALL 0x00409b50\nJMP 0x00409acc\nMOV RDI,RSP\nMOV EDX,0x2\nCALL 0x00409b50\nJMP 0x00409acc\nMOV RDI,RSP\nMOV EDX,0x4\nCALL 0x00409b50\nJMP 0x00409acc\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x00409ac7\nMOV RDI,RSP\nMOV EDX,0x6\nCALL 0x00409b50\nJMP 0x00409acc\nMOV RDI,RSP\nMOV EDX,0x5\nCALL 0x00409b50\nJMP 0x00409acc\nMOV RDI,RSP\nMOV EDX,0x8\nCALL 0x00409b50\nJMP 0x00409acc\nMOV RDI,RSP\nMOV EDX,0x7\nCALL 0x00409b50\nJMP 0x00409acc\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x00409ac7\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x00409b20\nOR EAX,EBX\nMOV RCX,qword ptr [R13]\nLEA RDX,[RCX + RBP*0x1]\nMOV qword ptr [R13],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + RBP*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x40d280\nMOV ESI,0x40d2a6\nMOV EDX,0x60\nMOV ECX,0x40d2b6\nCALL 0x00401900\n'
p221
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c4\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 2f 02 00 00\n48 89 4c 24 08\ne8 92 7e ff ff\n49 89 c7\n41 c7 07 00 00 00 00\ne8 e3 82 ff ff\n48 8b 08\n48 89 ea\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 6c 24 10\n4c 0f 45 eb\nbb 04 00 00 00\n3c 2d\n0f 84 cc 01 00 00\n48 89 ef\n4c 89 ee\n44 89 f2\ne8 fc 81 ff ff\n48 89 04 24\n49 8b 45 00\n48 39 e8\n74 1f\n41 8b 07\n85 c0\n74 49\n83 f8 22\n0f 85 a1 01 00 00\nbb 01 00 00 00\n4d 85 e4\n75 41\ne9 86 01 00 00\n4d 85 e4\n0f 84 89 01 00 00\n0f be 30\n85 f6\n0f 84 7e 01 00 00\n4c 89 e7\ne8 24 7f ff ff\n48 85 c0\n0f 84 6d 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 e4\n0f 84 4a 01 00 00\n49 8b 6d 00\n0f be 75 00\n85 f6\n0f 84 3a 01 00 00\n4c 89 e7\ne8 ec 7e ff ff\n48 85 c0\n74 75\nbe 30 00 00 00\n4c 89 e7\ne8 da 7e ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 45 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7d 02 42\n0f 94 c0\n48 8d 6c 00 01\neb 11\nbd 01 00 00 00\neb 0a\nbe e8 03 00 00\nbd 02 00 00 00\n49 8b 45 00\n0f be 08\n83 c1 be\n83 f9 35\n77 1b\n31 c0\nff 24 cd d0 d0 40 00\n48 89 e7\nba 03 00 00 00\ne8 27 01 00 00\ne9 9e 00 00 00\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 b0 00 00 00\n48 89 e7\nba 01 00 00 00\ne8 01 01 00 00\neb 7b\n48 89 e7\nba 02 00 00 00\ne8 f2 00 00 00\neb 6c\n48 89 e7\nba 04 00 00 00\ne8 e3 00 00 00\neb 5d\n48 89 e7\nbe 00 04 00 00\neb 4e\n48 89 e7\nba 06 00 00 00\ne8 ca 00 00 00\neb 44\n48 89 e7\nba 05 00 00 00\ne8 bb 00 00 00\neb 35\n48 89 e7\nba 08 00 00 00\ne8 ac 00 00 00\neb 26\n48 89 e7\nba 07 00 00 00\ne8 9d 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 54 00 00 00\n09 d8\n49 8b 4d 00\n48 8d 14 29\n49 89 55 00\n89 c3\n83 cb 02\n80 3c 29 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 80 d2 40 00\nbe a6 d2 40 00\nba 60 00 00 00\nb9 b6 d2 40 00\ne8 e4 7d ff ff\n'
p222
S'.text:00000000004098b0\n.text:00000000004098b1\n.text:00000000004098b3\n.text:00000000004098b5\n.text:00000000004098b7\n.text:00000000004098b9\n.text:00000000004098ba\n.text:00000000004098be\n.text:00000000004098c1\n.text:00000000004098c4\n.text:00000000004098c7\n.text:00000000004098ca\n.text:00000000004098ce\n.text:00000000004098d4\n.text:00000000004098d9\n.text:00000000004098de\n.text:00000000004098e1\n.text:00000000004098e8\n.text:00000000004098ed\n.text:00000000004098f0\n.text:00000000004098f3\n.text:0000000000409900\n.text:0000000000409903\n.text:0000000000409906\n.text:000000000040990b\n.text:000000000040990d\n.text:0000000000409910\n.text:0000000000409915\n.text:0000000000409919\n.text:000000000040991e\n.text:0000000000409920\n.text:0000000000409926\n.text:0000000000409929\n.text:000000000040992c\n.text:000000000040992f\n.text:0000000000409934\n.text:0000000000409938\n.text:000000000040993c\n.text:000000000040993f\n.text:0000000000409941\n.text:0000000000409944\n.text:0000000000409946\n.text:0000000000409948\n.text:000000000040994b\n.text:0000000000409951\n.text:0000000000409956\n.text:0000000000409959\n.text:000000000040995b\n.text:0000000000409960\n.text:0000000000409963\n.text:0000000000409969\n.text:000000000040996c\n.text:000000000040996e\n.text:0000000000409974\n.text:0000000000409977\n.text:000000000040997c\n.text:000000000040997f\n.text:0000000000409985\n.text:000000000040998d\n.text:000000000040998f\n.text:0000000000409991\n.text:0000000000409993\n.text:0000000000409996\n.text:000000000040999c\n.text:00000000004099a0\n.text:00000000004099a4\n.text:00000000004099a6\n.text:00000000004099ac\n.text:00000000004099af\n.text:00000000004099b4\n.text:00000000004099b7\n.text:00000000004099b9\n.text:00000000004099be\n.text:00000000004099c1\n.text:00000000004099c6\n.text:00000000004099cb\n.text:00000000004099ce\n.text:00000000004099d0\n.text:00000000004099d4\n.text:00000000004099d7\n.text:00000000004099d9\n.text:00000000004099dc\n.text:00000000004099de\n.text:00000000004099e1\n.text:00000000004099e3\n.text:00000000004099e5\n.text:00000000004099e9\n.text:00000000004099ec\n.text:00000000004099f1\n.text:00000000004099f3\n.text:00000000004099f8\n.text:00000000004099fa\n.text:00000000004099ff\n.text:0000000000409a04\n.text:0000000000409a08\n.text:0000000000409a0b\n.text:0000000000409a0e\n.text:0000000000409a11\n.text:0000000000409a13\n.text:0000000000409a15\n.text:0000000000409a1c\n.text:0000000000409a1f\n.text:0000000000409a24\n.text:0000000000409a29\n.text:0000000000409a2e\n.text:0000000000409a32\n.text:0000000000409a37\n.text:0000000000409a3a\n.text:0000000000409a3d\n.text:0000000000409a42\n.text:0000000000409a45\n.text:0000000000409a4a\n.text:0000000000409a4f\n.text:0000000000409a51\n.text:0000000000409a54\n.text:0000000000409a59\n.text:0000000000409a5e\n.text:0000000000409a60\n.text:0000000000409a63\n.text:0000000000409a68\n.text:0000000000409a6d\n.text:0000000000409a6f\n.text:0000000000409a72\n.text:0000000000409a77\n.text:0000000000409a79\n.text:0000000000409a7c\n.text:0000000000409a81\n.text:0000000000409a86\n.text:0000000000409a88\n.text:0000000000409a8b\n.text:0000000000409a90\n.text:0000000000409a95\n.text:0000000000409a97\n.text:0000000000409a9a\n.text:0000000000409a9f\n.text:0000000000409aa4\n.text:0000000000409aa6\n.text:0000000000409aa9\n.text:0000000000409aae\n.text:0000000000409ab3\n.text:0000000000409ab5\n.text:0000000000409ab8\n.text:0000000000409abd\n.text:0000000000409abf\n.text:0000000000409ac2\n.text:0000000000409ac7\n.text:0000000000409acc\n.text:0000000000409ace\n.text:0000000000409ad2\n.text:0000000000409ad6\n.text:0000000000409ada\n.text:0000000000409adc\n.text:0000000000409adf\n.text:0000000000409ae3\n.text:0000000000409ae6\n.text:0000000000409aea\n.text:0000000000409aef\n.text:0000000000409af2\n.text:0000000000409af4\n.text:0000000000409af8\n.text:0000000000409af9\n.text:0000000000409afb\n.text:0000000000409afd\n.text:0000000000409aff\n.text:0000000000409b01\n.text:0000000000409b02\n.text:0000000000409b03\n.text:0000000000409b08\n.text:0000000000409b0d\n.text:0000000000409b12\n.text:0000000000409b17\n'
p223
tp224
sS'setlocale'
p225
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p226
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_006101e0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p227
S'JMP qword ptr [0x006101e0]\n'
p228
S'ff 25 0a e7 20 00\n'
p229
S'.plt:0000000000401ad0\n'
p230
tp231
sS'c_toupper'
p232
(S'\n__stdcall c_toupper()\n'
p233
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p234
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p235
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p236
S'.text:000000000040a060\n.text:000000000040a063\n.text:000000000040a066\n.text:000000000040a069\n.text:000000000040a06c\n'
p237
tp238
sS'fcntl'
p239
(S'\n__stdcall fcntl(int __fd, int __cmd)\n'
p240
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fcntl(int __fd,int __cmd,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fcntl_00610068)();\u000a  return iVar1;\u000a}\u000a\u000a
p241
S'JMP qword ptr [0x00610068]\n'
p242
S'ff 25 82 e8 20 00\n'
p243
S'.plt:00000000004017e0\n'
p244
tp245
sS'mbsinit'
p246
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p247
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_00610248)();\u000a  return iVar1;\u000a}\u000a\u000a
p248
S'JMP qword ptr [0x00610248]\n'
p249
S'ff 25 a2 e6 20 00\n'
p250
S'.plt:0000000000401ba0\n'
p251
tp252
sS'dcgettext'
p253
(S'\n__stdcall dcgettext()\n'
p254
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_00610098)();\u000a  return;\u000a}\u000a\u000a
p255
S'JMP qword ptr [0x00610098]\n'
p256
S'ff 25 52 e8 20 00\n'
p257
S'.plt:0000000000401840\n'
p258
tp259
sS'quotearg_free'
p260
(S'\n__stdcall quotearg_free()\n'
p261
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p262
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x006102a0]\nCMP dword ptr [0x006102a8],0x2\nJC 0x0040847a\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00401750\nINC RBX\nMOV EAX,dword ptr [0x006102a8]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00408460\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x6103c0\nCMP RDI,RAX\nJZ 0x004084a3\nCALL 0x00401750\nMOV qword ptr [0x006102b0],0x100\nMOV qword ptr [0x006102b8],0x6103c0\nMOV EAX,0x6102b0\nCMP R14,RAX\nJZ 0x004084c0\nMOV RDI,R14\nCALL 0x00401750\nMOV qword ptr [0x006102a0],0x6102b0\nMOV dword ptr [0x006102a8],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p263
S'41 57\n41 56\n53\n4c 8b 35 54 7e 20 00\n83 3d 55 7e 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 e8 92 ff ff\n48 ff c3\n8b 05 37 7e 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 c0 03 61 00\n48 39 c7\n74 1b\ne8 c3 92 ff ff\n48 c7 05 18 7e 20 00 00 01 00 00\n48 c7 05 15 7e 20 00 c0 03 61 00\nb8 b0 02 61 00\n49 39 c6\n74 13\n4c 89 f7\ne8 9b 92 ff ff\n48 c7 05 e0 7d 20 00 b0 02 61 00\nc7 05 de 7d 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p264
S'.text:0000000000408440\n.text:0000000000408442\n.text:0000000000408444\n.text:0000000000408445\n.text:000000000040844c\n.text:0000000000408453\n.text:0000000000408455\n.text:0000000000408459\n.text:000000000040845e\n.text:0000000000408460\n.text:0000000000408463\n.text:0000000000408468\n.text:000000000040846b\n.text:0000000000408471\n.text:0000000000408475\n.text:0000000000408478\n.text:000000000040847a\n.text:000000000040847e\n.text:0000000000408483\n.text:0000000000408486\n.text:0000000000408488\n.text:000000000040848d\n.text:0000000000408498\n.text:00000000004084a3\n.text:00000000004084a8\n.text:00000000004084ab\n.text:00000000004084ad\n.text:00000000004084b0\n.text:00000000004084b5\n.text:00000000004084c0\n.text:00000000004084ca\n.text:00000000004084cb\n.text:00000000004084cd\n.text:00000000004084cf\n'
p265
tp266
sS'quotearg_mem'
p267
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p268
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p269
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x004086a0\n'
p270
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p271
S'.text:00000000004086c0\n.text:00000000004086c3\n.text:00000000004086c6\n.text:00000000004086c8\n.text:00000000004086cb\n.text:00000000004086ce\n'
p272
tp273
sS'rotl32'
p274
(S'\n__stdcall rotl32()\n'
p275
V\u000auint32_t rotl32(void)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x1f;\u000a  return (uint32_t)(in_EDI << bVar1 | in_EDI >> 0x20 - bVar1);\u000a}\u000a\u000a
p276
S'MOV ECX,ESI\nROL EDI,CL\nMOV EAX,EDI\nRET\n'
p277
S'89 f1\nd3 c7\n89 f8\nc3\n'
p278
S'.text:0000000000409e60\n.text:0000000000409e62\n.text:0000000000409e64\n.text:0000000000409e66\n'
p279
tp280
sS'deregister_tm_clones'
p281
(S'\n__stdcall deregister_tm_clones()\n'
p282
V\u000a/* WARNING: Removing unreachable block (ram,0x00401c25) */\u000a/* WARNING: Removing unreachable block (ram,0x00401c2f) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p283
S'MOV EAX,0x6102ff\nPUSH RBP\nSUB RAX,0x6102f8\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00401c40\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401c40\nPOP RBP\nMOV EDI,0x6102f8\nJMP RAX\nPOP RBP\nRET\n'
p284
S'b8 ff 02 61 00\n55\n48 2d f8 02 61 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf f8 02 61 00\nff e0\n5d\nc3\n'
p285
S'.text:0000000000401c10\n.text:0000000000401c15\n.text:0000000000401c16\n.text:0000000000401c1c\n.text:0000000000401c20\n.text:0000000000401c23\n.text:0000000000401c25\n.text:0000000000401c2a\n.text:0000000000401c2d\n.text:0000000000401c2f\n.text:0000000000401c30\n.text:0000000000401c35\n.text:0000000000401c40\n.text:0000000000401c41\n'
p286
tp287
sS'quotearg_custom'
p288
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p289
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p290
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x004088e0\n'
p291
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p292
S'.text:0000000000408960\n.text:0000000000408963\n.text:0000000000408966\n.text:0000000000408969\n.text:000000000040896b\n.text:000000000040896e\n.text:0000000000408971\n.text:0000000000408974\n'
p293
tp294
sS'free'
p295
(S'\n__stdcall free(void * __ptr)\n'
p296
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_00610020)();\u000a  return;\u000a}\u000a\u000a
p297
S'JMP qword ptr [0x00610020]\n'
p298
S'ff 25 ca e8 20 00\n'
p299
S'.plt:0000000000401750\n'
p300
tp301
sS'close'
p302
(S'\n__stdcall close(int __fd)\n'
p303
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_00610110)();\u000a  return iVar1;\u000a}\u000a\u000a
p304
S'JMP qword ptr [0x00610110]\n'
p305
S'ff 25 da e7 20 00\n'
p306
S'.plt:0000000000401930\n'
p307
tp308
sS'is_local_fs_type'
p309
(S'\n__stdcall is_local_fs_type(ulong magic)\n'
p310
V\u000a/* WARNING: Switch with 1 destination removed at 0x00405059 : 4 cases all go to same destination */\u000a\u000aint is_local_fs_type(ulong magic)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  \u000a  if ((long)magic < 0x1badface) {\u000a    if ((long)magic < 0x9fa1) {\u000a      if ((long)magic < 0x4244) {\u000a        if ((long)magic < 0x1cd1) {\u000a          if ((long)magic < 0x1373) {\u000a            if (magic == 0x2f) {\u000a              return 1;\u000a            }\u000a            if (magic == 0x187) {\u000a              return 1;\u000a            }\u000a            if (magic == 0x7c0) {\u000a              return 1;\u000a            }\u000a          }\u000a          else {\u000a            if (magic + 0xffffec8d < 0x1d) {\u000a                    /* WARNING: Treating indirect jump as call */\u000a              iVar1 = (*(code *)(&PTR_LAB_0040af78)[magic + 0xffffec8d])();\u000a              return iVar1;\u000a            }\u000a          }\u000a        }\u000a        else {\u000a          if ((long)magic < 0x3434) {\u000a            if (magic == 0x1cd1) {\u000a              return 1;\u000a            }\u000a            if (magic == 0x2468) {\u000a              return 1;\u000a            }\u000a            if (magic == 0x2478) {\u000a              return 1;\u000a            }\u000a          }\u000a          else {\u000a            if ((long)magic < 0x4004) {\u000a              if (magic == 0x3434) {\u000a                return 1;\u000a              }\u000a              if (magic == 0x4000) {\u000a                return 1;\u000a              }\u000a            }\u000a            else {\u000a              if (magic == 0x4004) {\u000a                return 1;\u000a              }\u000a              if (magic == 0x4006) {\u000a                return 1;\u000a              }\u000a            }\u000a          }\u000a        }\u000a      }\u000a      else {\u000a        if ((long)magic < 0x564c) {\u000a          if ((long)magic < 0x4d44) {\u000a            if (magic == 0x4244) {\u000a              return 1;\u000a            }\u000a            if (magic == 0x482b) {\u000a              return 1;\u000a            }\u000a            if (magic == 0x4858) {\u000a              return 1;\u000a            }\u000a          }\u000a          else {\u000a            if (magic == 0x4d44) {\u000a              return 1;\u000a            }\u000a            if (magic == 0x4d5a) {\u000a              return 1;\u000a            }\u000a            if (magic == 0x517b) {\u000a              return 0;\u000a            }\u000a          }\u000a        }\u000a        else {\u000a          if ((long)magic < 0x7275) {\u000a            if (magic == 0x564c) {\u000a              return 0;\u000a            }\u000a            if (magic != 0x5df5) {\u000a              if (magic == 0x6969) {\u000a                return 0;\u000a              }\u000a              return -1;\u000a            }\u000a            return 1;\u000a          }\u000a          if ((long)magic < 0x9660) {\u000a            if (magic == 0x7275) {\u000a              return 1;\u000a            }\u000a            if (magic == 0x72b6) {\u000a              return 1;\u000a            }\u000a          }\u000a          else {\u000a            if (magic == 0x9660) {\u000a              return 1;\u000a            }\u000a            if (magic == 0x9fa0) {\u000a              return 1;\u000a            }\u000a          }\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if (0x116196f < (long)magic) {\u000a        if (0x9041933 < (long)magic) {\u000a          if ((long)magic < 0x11307854) {\u000a            if (magic == 0x9041934) {\u000a              return 1;\u000a            }\u000a            if (magic != 0xbad1dea) {\u000a              if (magic != 0xbd00bd0) {\u000a                return -1;\u000a              }\u000a              return 0;\u000a            }\u000a            return 1;\u000a          }\u000a          if ((long)magic < 0x19800202) {\u000a            if (magic == 0x11307854) {\u000a              return 1;\u000a            }\u000a            if (magic != 0x15013346) {\u000a              return -1;\u000a            }\u000a            return 1;\u000a          }\u000a          if (magic == 0x19800202) {\u000a            return 1;\u000a          }\u000a          if (magic != 0x19830326) {\u000a            return -1;\u000a          }\u000a          return 0;\u000a        }\u000a        if ((long)magic < 0x12ff7b4) {\u000a          if (magic == 0x1161970) {\u000a            return 0;\u000a          }\u000a          if (magic == 0x12fd16d) {\u000a            return 1;\u000a          }\u000a          return -1;\u000a        }\u000a        if (magic - 0x12ff7b4 < 4) {\u000a          return 1;\u000a        }\u000a        if (magic == 0x13111a8) {\u000a          return 0;\u000a        }\u000a        return -1;\u000a      }\u000a      if ((long)magic < 0x11954) {\u000a        if ((long)magic < 0xadff) {\u000a          if (magic == 0x9fa1) {\u000a            return 1;\u000a          }\u000a          if (magic == 0x9fa2) {\u000a            return 1;\u000a          }\u000a          if (magic == 0xadf5) {\u000a            return 1;\u000a          }\u000a        }\u000a        else {\u000a          if ((long)magic < 0xef53) {\u000a            if (magic == 0xadff) {\u000a              return 1;\u000a            }\u000a            if (magic == 0xef51) {\u000a              return 1;\u000a            }\u000a          }\u000a          else {\u000a            if (magic == 0xef53) {\u000a              return 1;\u000a            }\u000a            if (magic == 0xf15f) {\u000a              return 1;\u000a            }\u000a          }\u000a        }\u000a      }\u000a      else {\u000a        if ((long)magic < 0xc0ffee) {\u000a          if (magic == 0x11954) {\u000a            return 1;\u000a          }\u000a          if (magic == 0x27e0eb) {\u000a            return 1;\u000a          }\u000a          if (magic == 0x414a53) {\u000a            return 1;\u000a          }\u000a        }\u000a        else {\u000a          if ((long)magic < 0x1021994) {\u000a            if (magic == 0xc0ffee) {\u000a              return 1;\u000a            }\u000a            if (magic == 0xc36400) {\u000a              return 0;\u000a            }\u000a          }\u000a          else {\u000a            if (magic == 0x1021994) {\u000a              return 1;\u000a            }\u000a            if (magic == 0x1021997) {\u000a              return 1;\u000a            }\u000a          }\u000a        }\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    if ((long)magic < 0x65735546) {\u000a      if (0x5346414e < (long)magic) {\u000a        if (0x6165676b < (long)magic) {\u000a          if ((long)magic < 0x62656570) {\u000a            if (magic == 0x6165676c) {\u000a              return 1;\u000a            }\u000a            if (magic != 0x61756673) {\u000a              if (magic == 0x62646576) {\u000a                return 1;\u000a              }\u000a              return -1;\u000a            }\u000a            return 0;\u000a          }\u000a          if ((long)magic < 0x64626720) {\u000a            if (magic == 0x62656570) {\u000a              return 1;\u000a            }\u000a            if (magic != 0x62656572) {\u000a              return -1;\u000a            }\u000a            return 1;\u000a          }\u000a          if (magic == 0x64626720) {\u000a            return 1;\u000a          }\u000a          if (magic != 0x65735543) {\u000a            return -1;\u000a          }\u000a          return 0;\u000a        }\u000a        if ((long)magic < 0x54190100) {\u000a          if (magic == 0x5346414f) {\u000a            return 0;\u000a          }\u000a          if (magic != 0x5346544e) {\u000a            if (magic != 0x534f434b) {\u000a              return -1;\u000a            }\u000a            return 1;\u000a          }\u000a          return 1;\u000a        }\u000a        if ((long)magic < 0x58465342) {\u000a          if (magic == 0x54190100) {\u000a            return 1;\u000a          }\u000a          if (magic != 0x565a4653) {\u000a            return -1;\u000a          }\u000a          return 1;\u000a        }\u000a        if (magic == 0x58465342) {\u000a          return 1;\u000a        }\u000a        if (magic != 0x61636673) {\u000a          return -1;\u000a        }\u000a        return 0;\u000a      }\u000a      if (0x42465330 < (long)magic) {\u000a        if ((long)magic < 0x453dcd28) {\u000a          if (magic == 0x42465331) {\u000a            return 1;\u000a          }\u000a          if (magic == 0x42494e4d) {\u000a            return 1;\u000a          }\u000a          if (magic == 0x43415d53) {\u000a            return 1;\u000a          }\u000a          return -1;\u000a        }\u000a        if ((long)magic < 0x50495045) {\u000a          if (magic == 0x453dcd28) {\u000a            return 1;\u000a          }\u000a          if (magic == 0x47504653) {\u000a            return 0;\u000a          }\u000a          return -1;\u000a        }\u000a        if (magic == 0x50495045) {\u000a          return 0;\u000a        }\u000a        if (magic == 0x52654973) {\u000a          return 1;\u000a        }\u000a        return -1;\u000a      }\u000a      if (0x2bad1de9 < (long)magic) {\u000a        if (magic == 0x2bad1dea) {\u000a          return 1;\u000a        }\u000a        if (magic != 0x2fc12fc1) {\u000a          if (magic != 0x3153464a) {\u000a            return -1;\u000a          }\u000a          return 1;\u000a        }\u000a        return 1;\u000a      }\u000a      if (magic == 0x1badface) {\u000a        return 1;\u000a      }\u000a      if (magic != 0x24051905) {\u000a        if (magic != 0x28cd3d45) {\u000a          return -1;\u000a        }\u000a        return 1;\u000a      }\u000a      return 1;\u000a    }\u000a    if ((long)magic < 0x9123683e) {\u000a      if ((long)magic < 0x73717368) {\u000a        if ((long)magic < 0x6b414653) {\u000a          if (magic == 0x65735546) {\u000a            return 0;\u000a          }\u000a          if (magic != 0x67596969) {\u000a            if (magic != 0x68191122) {\u000a              return -1;\u000a            }\u000a            return 1;\u000a          }\u000a          return 1;\u000a        }\u000a        if ((long)magic < 0x6e736673) {\u000a          if (magic == 0x6b414653) {\u000a            return 0;\u000a          }\u000a          if (magic != 0x6e667364) {\u000a            return -1;\u000a          }\u000a          return 0;\u000a        }\u000a        if (magic == 0x6e736673) {\u000a          return 1;\u000a        }\u000a        if (magic != 0x73636673) {\u000a          return -1;\u000a        }\u000a        return 1;\u000a      }\u000a      if ((long)magic < 0x7461636f) {\u000a        if (magic == 0x73717368) {\u000a          return 1;\u000a        }\u000a        if (magic != 0x73727279) {\u000a          if (magic == 0x73757245) {\u000a            return 0;\u000a          }\u000a          return -1;\u000a        }\u000a        return 1;\u000a      }\u000a      if (0x794c762f < (long)magic) {\u000a        if (magic == 0x794c7630) {\u000a          return 0;\u000a        }\u000a        if (magic != 0x858458f6) {\u000a          return -1;\u000a        }\u000a        return 1;\u000a      }\u000a      if (magic == 0x7461636f) {\u000a        return 0;\u000a      }\u000a      if (magic != 0x74726163) {\u000a        return -1;\u000a      }\u000a      return 1;\u000a    }\u000a    if ((long)magic < 0xc97e8168) {\u000a      if ((long)magic < 0xaad7aaea) {\u000a        if (magic == 0x9123683e) {\u000a          return 1;\u000a        }\u000a        if (magic == 0x958458f6) {\u000a          return 1;\u000a        }\u000a        uVar2 = 0xa501fcf5;\u000a      }\u000a      else {\u000a        if ((long)magic < 0xbacbacbc) {\u000a          if (magic == 0xaad7aaea) {\u000a            return 0;\u000a          }\u000a          if (magic == 0xabba1974) {\u000a            return 1;\u000a          }\u000a          return -1;\u000a        }\u000a        if (magic == 0xbacbacbc) {\u000a          return 0;\u000a        }\u000a        uVar2 = 0xbeefdead;\u000a      }\u000a    }\u000a    else {\u000a      if ((long)magic < 0xf2f52010) {\u000a        if (((magic != 0xc97e8168) && (magic != 0xcafe4a11)) && (magic != 0xde5e81e4)) {\u000a          return -1;\u000a        }\u000a        return 1;\u000a      }\u000a      if ((long)magic < 0xf995e849) {\u000a        if (magic == 0xf2f52010) {\u000a          return 1;\u000a        }\u000a        if (magic == 0xf97cff8c) {\u000a          return 1;\u000a        }\u000a        return -1;\u000a      }\u000a      if (magic == 0xf995e849) {\u000a        return 1;\u000a      }\u000a      uVar2 = 0xff534d42;\u000a    }\u000a    if (magic == uVar2) {\u000a      return 0;\u000a    }\u000a  }\u000a  return -1;\u000a}\u000a\u000a
p311
S'XOR EAX,EAX\nCMP RDI,0x1badfacd\nJG 0x00404f3b\nCMP RDI,0x9fa0\nJLE 0x00404f9c\nCMP RDI,0x116196f\nJG 0x0040502e\nCMP RDI,0x11953\nJG 0x00405137\nCMP RDI,0xadfe\nJLE 0x00405303\nCMP RDI,0xef52\nJG 0x00405591\nCMP RDI,0xadff\nJZ 0x004056de\nCMP RDI,0xef51\nJZ 0x004056de\nJMP 0x004056ee\nCMP RDI,0x65735545\nJLE 0x00404fdb\nMOV ECX,0x9123683d\nCMP RDI,RCX\nJG 0x00405060\nCMP RDI,0x73717367\nJG 0x00405170\nCMP RDI,0x6b414652\nJLE 0x0040532f\nCMP RDI,0x6e736672\nJG 0x004055b0\nCMP RDI,0x6b414653\nJZ 0x004056ed\nCMP RDI,0x6e667364\nJZ 0x004056ed\nJMP 0x004056ee\nCMP RDI,0x4243\nJG 0x004050ab\nCMP RDI,0x1cd0\nJG 0x004051a9\nCMP RDI,0x1372\nJLE 0x0040535b\nADD RDI,0xffffec8d\nCMP RDI,0x1c\nJA 0x004056ee\nJMP qword ptr [0x40af78 + RDI*0x8]\nCMP RDI,0x5346414e\nJLE 0x004050f1\nCMP RDI,0x6165676b\nJG 0x004051e2\nCMP RDI,0x541900ff\nJLE 0x00405384\nCMP RDI,0x58465341\nJG 0x004055cf\nCMP RDI,0x54190100\nJZ 0x004056de\nCMP RDI,0x565a4653\nJZ 0x004056de\nJMP 0x004056ee\nCMP RDI,0x9041933\nJG 0x0040521b\nCMP RDI,0x12ff7b3\nJLE 0x004055ee\nLEA RCX,[-0x12ff7b4 + RDI]\nCMP RCX,0x3\nJA 0x004056e4\nJMP qword ptr [0x40b060 + RCX*0x8]\nMOV ECX,0xc97e8167\nCMP RDI,RCX\nJG 0x00405254\nMOV ECX,0xaad7aae9\nCMP RDI,RCX\nJLE 0x004053b0\nMOV ECX,0xbacbacbb\nCMP RDI,RCX\nJG 0x0040560d\nMOV ECX,0xaad7aaea\nCMP RDI,RCX\nJZ 0x004056ed\nMOV EAX,0xabba1974\nCMP RDI,RAX\nJZ 0x004056de\nJMP 0x004056ee\nCMP RDI,0x564b\nJLE 0x00405291\nCMP RDI,0x7274\nJLE 0x004053d6\nCMP RDI,0x965f\nJG 0x00405625\nCMP RDI,0x7275\nJZ 0x004056de\nCMP RDI,0x72b6\nJZ 0x004056de\nJMP 0x004056ee\nCMP RDI,0x42465330\nJLE 0x004052ca\nCMP RDI,0x453dcd27\nJLE 0x00405402\nCMP RDI,0x50495044\nJG 0x00405644\nCMP RDI,0x453dcd28\nJZ 0x004056de\nCMP RDI,0x47504653\nJZ 0x004056ed\nJMP 0x004056ee\nCMP RDI,0xc0ffed\nJLE 0x0040542e\nCMP RDI,0x1021993\nJG 0x00405663\nCMP RDI,0xc0ffee\nJZ 0x004056de\nCMP RDI,0xc36400\nJZ 0x004056ed\nJMP 0x004056ee\nCMP RDI,0x7461636e\nJLE 0x0040545a\nCMP RDI,0x794c762f\nJG 0x00405677\nCMP RDI,0x7461636f\nJZ 0x004056ed\nCMP RDI,0x74726163\nJZ 0x004056de\nJMP 0x004056ee\nCMP RDI,0x3433\nJLE 0x00405486\nCMP RDI,0x4003\nJG 0x0040568c\nCMP RDI,0x3434\nJZ 0x004056de\nCMP RDI,0x4000\nJZ 0x004056de\nJMP 0x004056ee\nCMP RDI,0x6265656f\nJLE 0x004054b2\nCMP RDI,0x6462671f\nJG 0x004056a0\nCMP RDI,0x62656570\nJZ 0x004056de\nCMP RDI,0x62656572\nJZ 0x004056de\nJMP 0x004056ee\nCMP RDI,0x11307853\nJLE 0x004054de\nCMP RDI,0x19800201\nJG 0x004056b4\nCMP RDI,0x11307854\nJZ 0x004056de\nCMP RDI,0x15013346\nJZ 0x004056de\nJMP 0x004056ee\nMOV ECX,0xf2f5200f\nCMP RDI,RCX\nJLE 0x0040550a\nMOV ECX,0xf995e848\nCMP RDI,RCX\nJG 0x004056c8\nMOV EAX,0xf2f52010\nCMP RDI,RAX\nJZ 0x004056de\nMOV EAX,0xf97cff8c\nCMP RDI,RAX\nJZ 0x004056de\nJMP 0x004056ee\nCMP RDI,0x4d43\nJG 0x00405539\nCMP RDI,0x4244\nJZ 0x004056de\nCMP RDI,0x482b\nJZ 0x004056de\nCMP RDI,0x4858\nJZ 0x004056de\nJMP 0x004056ee\nCMP RDI,0x2bad1de9\nJG 0x00405565\nCMP RDI,0x1badface\nJZ 0x004056de\nCMP RDI,0x24051905\nJZ 0x004056de\nCMP RDI,0x28cd3d45\nJZ 0x004056de\nJMP 0x004056ee\nCMP RDI,0x9fa1\nJZ 0x004056de\nCMP RDI,0x9fa2\nJZ 0x004056de\nCMP RDI,0xadf5\nJZ 0x004056de\nJMP 0x004056ee\nCMP RDI,0x65735546\nJZ 0x004056ed\nCMP RDI,0x67596969\nJZ 0x004056de\nCMP RDI,0x68191122\nJZ 0x004056de\nJMP 0x004056ee\nCMP RDI,0x2f\nJZ 0x004056de\nCMP RDI,0x187\nJZ 0x004056de\nCMP RDI,0x7c0\nJZ 0x004056de\nJMP 0x004056ee\nCMP RDI,0x5346414f\nJZ 0x004056ed\nCMP RDI,0x5346544e\nJZ 0x004056de\nCMP RDI,0x534f434b\nJZ 0x004056de\nJMP 0x004056ee\nMOV ECX,0x9123683e\nCMP RDI,RCX\nJZ 0x004056de\nMOV ECX,0x958458f6\nCMP RDI,RCX\nJZ 0x004056de\nMOV ECX,0xa501fcf5\nJMP 0x004056d7\nCMP RDI,0x564c\nJZ 0x004056ed\nCMP RDI,0x5df5\nJZ 0x004056de\nCMP RDI,0x6969\nJZ 0x004056ed\nJMP 0x004056ee\nCMP RDI,0x42465331\nJZ 0x004056de\nCMP RDI,0x42494e4d\nJZ 0x004056de\nCMP RDI,0x43415d53\nJZ 0x004056de\nJMP 0x004056ee\nCMP RDI,0x11954\nJZ 0x004056de\nCMP RDI,0x27e0eb\nJZ 0x004056de\nCMP RDI,0x414a53\nJZ 0x004056de\nJMP 0x004056ee\nCMP RDI,0x73717368\nJZ 0x004056de\nCMP RDI,0x73727279\nJZ 0x004056de\nCMP RDI,0x73757245\nJZ 0x004056ed\nJMP 0x004056ee\nCMP RDI,0x1cd1\nJZ 0x004056de\nCMP RDI,0x2468\nJZ 0x004056de\nCMP RDI,0x2478\nJZ 0x004056de\nJMP 0x004056ee\nCMP RDI,0x6165676c\nJZ 0x004056de\nCMP RDI,0x61756673\nJZ 0x004056ed\nCMP RDI,0x62646576\nJZ 0x004056de\nJMP 0x004056ee\nCMP RDI,0x9041934\nJZ 0x004056de\nCMP RDI,0xbad1dea\nJZ 0x004056de\nCMP RDI,0xbd00bd0\nJZ 0x004056ed\nJMP 0x004056ee\nMOV EAX,0xc97e8168\nCMP RDI,RAX\nJZ 0x004056de\nMOV EAX,0xcafe4a11\nCMP RDI,RAX\nJZ 0x004056de\nMOV EAX,0xde5e81e4\nCMP RDI,RAX\nJZ 0x004056de\nJMP 0x004056ee\nCMP RDI,0x4d44\nJZ 0x004056de\nCMP RDI,0x4d5a\nJZ 0x004056de\nCMP RDI,0x517b\nJZ 0x004056ed\nJMP 0x004056ee\nCMP RDI,0x2bad1dea\nJZ 0x004056de\nCMP RDI,0x2fc12fc1\nJZ 0x004056de\nCMP RDI,0x3153464a\nJZ 0x004056de\nJMP 0x004056ee\nCMP RDI,0xef53\nJZ 0x004056de\nCMP RDI,0xf15f\nJZ 0x004056de\nJMP 0x004056ee\nCMP RDI,0x6e736673\nJZ 0x004056de\nCMP RDI,0x73636673\nJZ 0x004056de\nJMP 0x004056ee\nCMP RDI,0x58465342\nJZ 0x004056de\nCMP RDI,0x61636673\nJZ 0x004056ed\nJMP 0x004056ee\nCMP RDI,0x1161970\nJZ 0x004056ed\nCMP RDI,0x12fd16d\nJZ 0x004056de\nJMP 0x004056ee\nMOV ECX,0xbacbacbc\nCMP RDI,RCX\nJZ 0x004056ed\nMOV ECX,0xbeefdead\nJMP 0x004056d7\nCMP RDI,0x9660\nJZ 0x004056de\nCMP RDI,0x9fa0\nJZ 0x004056de\nJMP 0x004056ee\nCMP RDI,0x50495045\nJZ 0x004056ed\nCMP RDI,0x52654973\nJZ 0x004056de\nJMP 0x004056ee\nCMP RDI,0x1021994\nJZ 0x004056de\nCMP RDI,0x1021997\nJZ 0x004056de\nJMP 0x004056ee\nCMP RDI,0x794c7630\nJZ 0x004056ed\nMOV EAX,0x858458f6\nCMP RDI,RAX\nJZ 0x004056de\nJMP 0x004056ee\nCMP RDI,0x4004\nJZ 0x004056de\nCMP RDI,0x4006\nJZ 0x004056de\nJMP 0x004056ee\nCMP RDI,0x64626720\nJZ 0x004056de\nCMP RDI,0x65735543\nJZ 0x004056ed\nJMP 0x004056ee\nCMP RDI,0x19800202\nJZ 0x004056de\nCMP RDI,0x19830326\nJZ 0x004056ed\nJMP 0x004056ee\nMOV ECX,0xf995e849\nCMP RDI,RCX\nJZ 0x004056de\nMOV ECX,0xff534d42\nCMP RDI,RCX\nJZ 0x004056ed\nJMP 0x004056ee\nMOV EAX,0x1\nRET\nCMP RDI,0x13111a8\nJNZ 0x004056ee\nRET\nMOV EAX,0xffffffff\nRET\n'
p312
S'31 c0\n48 81 ff cd fa ad 1b\n7f 60\n48 81 ff a0 9f 00 00\n0f 8e b4 00 00 00\n48 81 ff 6f 19 16 01\n0f 8f 39 01 00 00\n48 81 ff 53 19 01 00\n0f 8f 35 02 00 00\n48 81 ff fe ad 00 00\n0f 8e f4 03 00 00\n48 81 ff 52 ef 00 00\n0f 8f 75 06 00 00\n48 81 ff ff ad 00 00\n0f 84 b5 07 00 00\n48 81 ff 51 ef 00 00\n0f 84 a8 07 00 00\ne9 b3 07 00 00\n48 81 ff 45 55 73 65\n0f 8e 93 00 00 00\nb9 3d 68 23 91\n48 39 cf\n0f 8f 0a 01 00 00\n48 81 ff 67 73 71 73\n0f 8f 0d 02 00 00\n48 81 ff 52 46 41 6b\n0f 8e bf 03 00 00\n48 81 ff 72 66 73 6e\n0f 8f 33 06 00 00\n48 81 ff 53 46 41 6b\n0f 84 63 07 00 00\n48 81 ff 64 73 66 6e\n0f 84 56 07 00 00\ne9 52 07 00 00\n48 81 ff 43 42 00 00\n0f 8f 02 01 00 00\n48 81 ff d0 1c 00 00\n0f 8f f3 01 00 00\n48 81 ff 72 13 00 00\n0f 8e 98 03 00 00\n48 81 c7 8d ec ff ff\n48 83 ff 1c\n0f 87 1a 07 00 00\nff 24 fd 78 af 40 00\n48 81 ff 4e 41 46 53\n0f 8e 09 01 00 00\n48 81 ff 6b 67 65 61\n0f 8f ed 01 00 00\n48 81 ff ff 00 19 54\n0f 8e 82 03 00 00\n48 81 ff 41 53 46 58\n0f 8f c0 05 00 00\n48 81 ff 00 01 19 54\n0f 84 c2 06 00 00\n48 81 ff 53 46 5a 56\n0f 84 b5 06 00 00\ne9 c0 06 00 00\n48 81 ff 33 19 04 09\n0f 8f e0 01 00 00\n48 81 ff b3 f7 2f 01\n0f 8e a6 05 00 00\n48 8d 8f 4c 08 d0 fe\n48 83 f9 03\n0f 87 8b 06 00 00\nff 24 cd 60 b0 40 00\nb9 67 81 7e c9\n48 39 cf\n0f 8f e6 01 00 00\nb9 e9 aa d7 aa\n48 39 cf\n0f 8e 34 03 00 00\nb9 bb ac cb ba\n48 39 cf\n0f 8f 83 05 00 00\nb9 ea aa d7 aa\n48 39 cf\n0f 84 55 06 00 00\nb8 74 19 ba ab\n48 39 c7\n0f 84 38 06 00 00\ne9 43 06 00 00\n48 81 ff 4b 56 00 00\n0f 8e d9 01 00 00\n48 81 ff 74 72 00 00\n0f 8e 11 03 00 00\n48 81 ff 5f 96 00 00\n0f 8f 53 05 00 00\n48 81 ff 75 72 00 00\n0f 84 ff 05 00 00\n48 81 ff b6 72 00 00\n0f 84 f2 05 00 00\ne9 fd 05 00 00\n48 81 ff 30 53 46 42\n0f 8e cc 01 00 00\n48 81 ff 27 cd 3d 45\n0f 8e f7 02 00 00\n48 81 ff 44 50 49 50\n0f 8f 2c 05 00 00\n48 81 ff 28 cd 3d 45\n0f 84 b9 05 00 00\n48 81 ff 53 46 50 47\n0f 84 bb 05 00 00\ne9 b7 05 00 00\n48 81 ff ed ff c0 00\n0f 8e ea 02 00 00\n48 81 ff 93 19 02 01\n0f 8f 12 05 00 00\n48 81 ff ee ff c0 00\n0f 84 80 05 00 00\n48 81 ff 00 64 c3 00\n0f 84 82 05 00 00\ne9 7e 05 00 00\n48 81 ff 6e 63 61 74\n0f 8e dd 02 00 00\n48 81 ff 2f 76 4c 79\n0f 8f ed 04 00 00\n48 81 ff 6f 63 61 74\n0f 84 56 05 00 00\n48 81 ff 63 61 72 74\n0f 84 3a 05 00 00\ne9 45 05 00 00\n48 81 ff 33 34 00 00\n0f 8e d0 02 00 00\n48 81 ff 03 40 00 00\n0f 8f c9 04 00 00\n48 81 ff 34 34 00 00\n0f 84 0e 05 00 00\n48 81 ff 00 40 00 00\n0f 84 01 05 00 00\ne9 0c 05 00 00\n48 81 ff 6f 65 65 62\n0f 8e c3 02 00 00\n48 81 ff 1f 67 62 64\n0f 8f a4 04 00 00\n48 81 ff 70 65 65 62\n0f 84 d5 04 00 00\n48 81 ff 72 65 65 62\n0f 84 c8 04 00 00\ne9 d3 04 00 00\n48 81 ff 53 78 30 11\n0f 8e b6 02 00 00\n48 81 ff 01 02 80 19\n0f 8f 7f 04 00 00\n48 81 ff 54 78 30 11\n0f 84 9c 04 00 00\n48 81 ff 46 33 01 15\n0f 84 8f 04 00 00\ne9 9a 04 00 00\nb9 0f 20 f5 f2\n48 39 cf\n0f 8e a8 02 00 00\nb9 48 e8 95 f9\n48 39 cf\n0f 8f 58 04 00 00\nb8 10 20 f5 f2\n48 39 c7\n0f 84 60 04 00 00\nb8 8c ff 7c f9\n48 39 c7\n0f 84 52 04 00 00\ne9 5d 04 00 00\n48 81 ff 43 4d 00 00\n0f 8f 9b 02 00 00\n48 81 ff 44 42 00 00\n0f 84 33 04 00 00\n48 81 ff 2b 48 00 00\n0f 84 26 04 00 00\n48 81 ff 58 48 00 00\n0f 84 19 04 00 00\ne9 24 04 00 00\n48 81 ff e9 1d ad 2b\n0f 8f 8e 02 00 00\n48 81 ff ce fa ad 1b\n0f 84 fa 03 00 00\n48 81 ff 05 19 05 24\n0f 84 ed 03 00 00\n48 81 ff 45 3d cd 28\n0f 84 e0 03 00 00\ne9 eb 03 00 00\n48 81 ff a1 9f 00 00\n0f 84 ce 03 00 00\n48 81 ff a2 9f 00 00\n0f 84 c1 03 00 00\n48 81 ff f5 ad 00 00\n0f 84 b4 03 00 00\ne9 bf 03 00 00\n48 81 ff 46 55 73 65\n0f 84 b1 03 00 00\n48 81 ff 69 69 59 67\n0f 84 95 03 00 00\n48 81 ff 22 11 19 68\n0f 84 88 03 00 00\ne9 93 03 00 00\n48 83 ff 2f\n0f 84 79 03 00 00\n48 81 ff 87 01 00 00\n0f 84 6c 03 00 00\n48 81 ff c0 07 00 00\n0f 84 5f 03 00 00\ne9 6a 03 00 00\n48 81 ff 4f 41 46 53\n0f 84 5c 03 00 00\n48 81 ff 4e 54 46 53\n0f 84 40 03 00 00\n48 81 ff 4b 43 4f 53\n0f 84 33 03 00 00\ne9 3e 03 00 00\nb9 3e 68 23 91\n48 39 cf\n0f 84 20 03 00 00\nb9 f6 58 84 95\n48 39 cf\n0f 84 12 03 00 00\nb9 f5 fc 01 a5\ne9 01 03 00 00\n48 81 ff 4c 56 00 00\n0f 84 0a 03 00 00\n48 81 ff f5 5d 00 00\n0f 84 ee 02 00 00\n48 81 ff 69 69 00 00\n0f 84 f0 02 00 00\ne9 ec 02 00 00\n48 81 ff 31 53 46 42\n0f 84 cf 02 00 00\n48 81 ff 4d 4e 49 42\n0f 84 c2 02 00 00\n48 81 ff 53 5d 41 43\n0f 84 b5 02 00 00\ne9 c0 02 00 00\n48 81 ff 54 19 01 00\n0f 84 a3 02 00 00\n48 81 ff eb e0 27 00\n0f 84 96 02 00 00\n48 81 ff 53 4a 41 00\n0f 84 89 02 00 00\ne9 94 02 00 00\n48 81 ff 68 73 71 73\n0f 84 77 02 00 00\n48 81 ff 79 72 72 73\n0f 84 6a 02 00 00\n48 81 ff 45 72 75 73\n0f 84 6c 02 00 00\ne9 68 02 00 00\n48 81 ff d1 1c 00 00\n0f 84 4b 02 00 00\n48 81 ff 68 24 00 00\n0f 84 3e 02 00 00\n48 81 ff 78 24 00 00\n0f 84 31 02 00 00\ne9 3c 02 00 00\n48 81 ff 6c 67 65 61\n0f 84 1f 02 00 00\n48 81 ff 73 66 75 61\n0f 84 21 02 00 00\n48 81 ff 76 65 64 62\n0f 84 05 02 00 00\ne9 10 02 00 00\n48 81 ff 34 19 04 09\n0f 84 f3 01 00 00\n48 81 ff ea 1d ad 0b\n0f 84 e6 01 00 00\n48 81 ff d0 0b d0 0b\n0f 84 e8 01 00 00\ne9 e4 01 00 00\nb8 68 81 7e c9\n48 39 c7\n0f 84 c6 01 00 00\nb8 11 4a fe ca\n48 39 c7\n0f 84 b8 01 00 00\nb8 e4 81 5e de\n48 39 c7\n0f 84 aa 01 00 00\ne9 b5 01 00 00\n48 81 ff 44 4d 00 00\n0f 84 98 01 00 00\n48 81 ff 5a 4d 00 00\n0f 84 8b 01 00 00\n48 81 ff 7b 51 00 00\n0f 84 8d 01 00 00\ne9 89 01 00 00\n48 81 ff ea 1d ad 2b\n0f 84 6c 01 00 00\n48 81 ff c1 2f c1 2f\n0f 84 5f 01 00 00\n48 81 ff 4a 46 53 31\n0f 84 52 01 00 00\ne9 5d 01 00 00\n48 81 ff 53 ef 00 00\n0f 84 40 01 00 00\n48 81 ff 5f f1 00 00\n0f 84 33 01 00 00\ne9 3e 01 00 00\n48 81 ff 73 66 73 6e\n0f 84 21 01 00 00\n48 81 ff 73 66 63 73\n0f 84 14 01 00 00\ne9 1f 01 00 00\n48 81 ff 42 53 46 58\n0f 84 02 01 00 00\n48 81 ff 73 66 63 61\n0f 84 04 01 00 00\ne9 00 01 00 00\n48 81 ff 70 19 16 01\n0f 84 f2 00 00 00\n48 81 ff 6d d1 2f 01\n0f 84 d6 00 00 00\ne9 e1 00 00 00\nb9 bc ac cb ba\n48 39 cf\n0f 84 d2 00 00 00\nb9 ad de ef be\ne9 b2 00 00 00\n48 81 ff 60 96 00 00\n0f 84 ac 00 00 00\n48 81 ff a0 9f 00 00\n0f 84 9f 00 00 00\ne9 aa 00 00 00\n48 81 ff 45 50 49 50\n0f 84 9c 00 00 00\n48 81 ff 73 49 65 52\n0f 84 80 00 00 00\ne9 8b 00 00 00\n48 81 ff 94 19 02 01\n74 72\n48 81 ff 97 19 02 01\n74 69\neb 77\n48 81 ff 30 76 4c 79\n74 6d\nb8 f6 58 84 85\n48 39 c7\n74 54\neb 62\n48 81 ff 04 40 00 00\n74 49\n48 81 ff 06 40 00 00\n74 40\neb 4e\n48 81 ff 20 67 62 64\n74 35\n48 81 ff 43 55 73 65\n74 3b\neb 3a\n48 81 ff 02 02 80 19\n74 21\n48 81 ff 26 03 83 19\n74 27\neb 26\nb9 49 e8 95 f9\n48 39 cf\n74 0c\nb9 42 4d 53 ff\n48 39 cf\n74 11\neb 10\nb8 01 00 00 00\nc3\n48 81 ff a8 11 31 01\n75 01\nc3\nb8 ff ff ff ff\nc3\n'
p313
S'.text:0000000000404ed0\n.text:0000000000404ed2\n.text:0000000000404ed9\n.text:0000000000404edb\n.text:0000000000404ee2\n.text:0000000000404ee8\n.text:0000000000404eef\n.text:0000000000404ef5\n.text:0000000000404efc\n.text:0000000000404f02\n.text:0000000000404f09\n.text:0000000000404f0f\n.text:0000000000404f16\n.text:0000000000404f1c\n.text:0000000000404f23\n.text:0000000000404f29\n.text:0000000000404f30\n.text:0000000000404f36\n.text:0000000000404f3b\n.text:0000000000404f42\n.text:0000000000404f48\n.text:0000000000404f4d\n.text:0000000000404f50\n.text:0000000000404f56\n.text:0000000000404f5d\n.text:0000000000404f63\n.text:0000000000404f6a\n.text:0000000000404f70\n.text:0000000000404f77\n.text:0000000000404f7d\n.text:0000000000404f84\n.text:0000000000404f8a\n.text:0000000000404f91\n.text:0000000000404f97\n.text:0000000000404f9c\n.text:0000000000404fa3\n.text:0000000000404fa9\n.text:0000000000404fb0\n.text:0000000000404fb6\n.text:0000000000404fbd\n.text:0000000000404fc3\n.text:0000000000404fca\n.text:0000000000404fce\n.text:0000000000404fd4\n.text:0000000000404fdb\n.text:0000000000404fe2\n.text:0000000000404fe8\n.text:0000000000404fef\n.text:0000000000404ff5\n.text:0000000000404ffc\n.text:0000000000405002\n.text:0000000000405009\n.text:000000000040500f\n.text:0000000000405016\n.text:000000000040501c\n.text:0000000000405023\n.text:0000000000405029\n.text:000000000040502e\n.text:0000000000405035\n.text:000000000040503b\n.text:0000000000405042\n.text:0000000000405048\n.text:000000000040504f\n.text:0000000000405053\n.text:0000000000405059\n.text:0000000000405060\n.text:0000000000405065\n.text:0000000000405068\n.text:000000000040506e\n.text:0000000000405073\n.text:0000000000405076\n.text:000000000040507c\n.text:0000000000405081\n.text:0000000000405084\n.text:000000000040508a\n.text:000000000040508f\n.text:0000000000405092\n.text:0000000000405098\n.text:000000000040509d\n.text:00000000004050a0\n.text:00000000004050a6\n.text:00000000004050ab\n.text:00000000004050b2\n.text:00000000004050b8\n.text:00000000004050bf\n.text:00000000004050c5\n.text:00000000004050cc\n.text:00000000004050d2\n.text:00000000004050d9\n.text:00000000004050df\n.text:00000000004050e6\n.text:00000000004050ec\n.text:00000000004050f1\n.text:00000000004050f8\n.text:00000000004050fe\n.text:0000000000405105\n.text:000000000040510b\n.text:0000000000405112\n.text:0000000000405118\n.text:000000000040511f\n.text:0000000000405125\n.text:000000000040512c\n.text:0000000000405132\n.text:0000000000405137\n.text:000000000040513e\n.text:0000000000405144\n.text:000000000040514b\n.text:0000000000405151\n.text:0000000000405158\n.text:000000000040515e\n.text:0000000000405165\n.text:000000000040516b\n.text:0000000000405170\n.text:0000000000405177\n.text:000000000040517d\n.text:0000000000405184\n.text:000000000040518a\n.text:0000000000405191\n.text:0000000000405197\n.text:000000000040519e\n.text:00000000004051a4\n.text:00000000004051a9\n.text:00000000004051b0\n.text:00000000004051b6\n.text:00000000004051bd\n.text:00000000004051c3\n.text:00000000004051ca\n.text:00000000004051d0\n.text:00000000004051d7\n.text:00000000004051dd\n.text:00000000004051e2\n.text:00000000004051e9\n.text:00000000004051ef\n.text:00000000004051f6\n.text:00000000004051fc\n.text:0000000000405203\n.text:0000000000405209\n.text:0000000000405210\n.text:0000000000405216\n.text:000000000040521b\n.text:0000000000405222\n.text:0000000000405228\n.text:000000000040522f\n.text:0000000000405235\n.text:000000000040523c\n.text:0000000000405242\n.text:0000000000405249\n.text:000000000040524f\n.text:0000000000405254\n.text:0000000000405259\n.text:000000000040525c\n.text:0000000000405262\n.text:0000000000405267\n.text:000000000040526a\n.text:0000000000405270\n.text:0000000000405275\n.text:0000000000405278\n.text:000000000040527e\n.text:0000000000405283\n.text:0000000000405286\n.text:000000000040528c\n.text:0000000000405291\n.text:0000000000405298\n.text:000000000040529e\n.text:00000000004052a5\n.text:00000000004052ab\n.text:00000000004052b2\n.text:00000000004052b8\n.text:00000000004052bf\n.text:00000000004052c5\n.text:00000000004052ca\n.text:00000000004052d1\n.text:00000000004052d7\n.text:00000000004052de\n.text:00000000004052e4\n.text:00000000004052eb\n.text:00000000004052f1\n.text:00000000004052f8\n.text:00000000004052fe\n.text:0000000000405303\n.text:000000000040530a\n.text:0000000000405310\n.text:0000000000405317\n.text:000000000040531d\n.text:0000000000405324\n.text:000000000040532a\n.text:000000000040532f\n.text:0000000000405336\n.text:000000000040533c\n.text:0000000000405343\n.text:0000000000405349\n.text:0000000000405350\n.text:0000000000405356\n.text:000000000040535b\n.text:000000000040535f\n.text:0000000000405365\n.text:000000000040536c\n.text:0000000000405372\n.text:0000000000405379\n.text:000000000040537f\n.text:0000000000405384\n.text:000000000040538b\n.text:0000000000405391\n.text:0000000000405398\n.text:000000000040539e\n.text:00000000004053a5\n.text:00000000004053ab\n.text:00000000004053b0\n.text:00000000004053b5\n.text:00000000004053b8\n.text:00000000004053be\n.text:00000000004053c3\n.text:00000000004053c6\n.text:00000000004053cc\n.text:00000000004053d1\n.text:00000000004053d6\n.text:00000000004053dd\n.text:00000000004053e3\n.text:00000000004053ea\n.text:00000000004053f0\n.text:00000000004053f7\n.text:00000000004053fd\n.text:0000000000405402\n.text:0000000000405409\n.text:000000000040540f\n.text:0000000000405416\n.text:000000000040541c\n.text:0000000000405423\n.text:0000000000405429\n.text:000000000040542e\n.text:0000000000405435\n.text:000000000040543b\n.text:0000000000405442\n.text:0000000000405448\n.text:000000000040544f\n.text:0000000000405455\n.text:000000000040545a\n.text:0000000000405461\n.text:0000000000405467\n.text:000000000040546e\n.text:0000000000405474\n.text:000000000040547b\n.text:0000000000405481\n.text:0000000000405486\n.text:000000000040548d\n.text:0000000000405493\n.text:000000000040549a\n.text:00000000004054a0\n.text:00000000004054a7\n.text:00000000004054ad\n.text:00000000004054b2\n.text:00000000004054b9\n.text:00000000004054bf\n.text:00000000004054c6\n.text:00000000004054cc\n.text:00000000004054d3\n.text:00000000004054d9\n.text:00000000004054de\n.text:00000000004054e5\n.text:00000000004054eb\n.text:00000000004054f2\n.text:00000000004054f8\n.text:00000000004054ff\n.text:0000000000405505\n.text:000000000040550a\n.text:000000000040550f\n.text:0000000000405512\n.text:0000000000405518\n.text:000000000040551d\n.text:0000000000405520\n.text:0000000000405526\n.text:000000000040552b\n.text:000000000040552e\n.text:0000000000405534\n.text:0000000000405539\n.text:0000000000405540\n.text:0000000000405546\n.text:000000000040554d\n.text:0000000000405553\n.text:000000000040555a\n.text:0000000000405560\n.text:0000000000405565\n.text:000000000040556c\n.text:0000000000405572\n.text:0000000000405579\n.text:000000000040557f\n.text:0000000000405586\n.text:000000000040558c\n.text:0000000000405591\n.text:0000000000405598\n.text:000000000040559e\n.text:00000000004055a5\n.text:00000000004055ab\n.text:00000000004055b0\n.text:00000000004055b7\n.text:00000000004055bd\n.text:00000000004055c4\n.text:00000000004055ca\n.text:00000000004055cf\n.text:00000000004055d6\n.text:00000000004055dc\n.text:00000000004055e3\n.text:00000000004055e9\n.text:00000000004055ee\n.text:00000000004055f5\n.text:00000000004055fb\n.text:0000000000405602\n.text:0000000000405608\n.text:000000000040560d\n.text:0000000000405612\n.text:0000000000405615\n.text:000000000040561b\n.text:0000000000405620\n.text:0000000000405625\n.text:000000000040562c\n.text:0000000000405632\n.text:0000000000405639\n.text:000000000040563f\n.text:0000000000405644\n.text:000000000040564b\n.text:0000000000405651\n.text:0000000000405658\n.text:000000000040565e\n.text:0000000000405663\n.text:000000000040566a\n.text:000000000040566c\n.text:0000000000405673\n.text:0000000000405675\n.text:0000000000405677\n.text:000000000040567e\n.text:0000000000405680\n.text:0000000000405685\n.text:0000000000405688\n.text:000000000040568a\n.text:000000000040568c\n.text:0000000000405693\n.text:0000000000405695\n.text:000000000040569c\n.text:000000000040569e\n.text:00000000004056a0\n.text:00000000004056a7\n.text:00000000004056a9\n.text:00000000004056b0\n.text:00000000004056b2\n.text:00000000004056b4\n.text:00000000004056bb\n.text:00000000004056bd\n.text:00000000004056c4\n.text:00000000004056c6\n.text:00000000004056c8\n.text:00000000004056cd\n.text:00000000004056d0\n.text:00000000004056d2\n.text:00000000004056d7\n.text:00000000004056da\n.text:00000000004056dc\n.text:00000000004056de\n.text:00000000004056e3\n.text:00000000004056e4\n.text:00000000004056eb\n.text:00000000004056ed\n.text:00000000004056ee\n.text:00000000004056f3\n'
p314
tp315
sS'getenv'
p316
(S'\n__stdcall getenv(char * __name)\n'
p317
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_00610018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p318
S'JMP qword ptr [0x00610018]\n'
p319
S'ff 25 d2 e8 20 00\n'
p320
S'.plt:0000000000401740\n'
p321
tp322
sS'dtotimespec'
p323
(S'\n__stdcall dtotimespec(double sec)\n'
p324
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000atimespec dtotimespec(double sec)\u000a\u000a{\u000a  long ns;\u000a  long lVar1;\u000a  long lVar2;\u000a  double dVar3;\u000a  timespec tVar4;\u000a  \u000a  if (sec <= _DAT_0040d5f8) {\u000a    tVar4 = make_timespec(-0x8000000000000000,0);\u000a    return tVar4;\u000a  }\u000a  if (sec < DAT_0040d600) {\u000a    dVar3 = (sec - (double)(long)sec) * _DAT_0040cd58;\u000a    ns = (long)dVar3;\u000a    ns = (ulong)((double)ns < dVar3) + ns;\u000a    lVar2 = ns / 1000000000 + (ns >> 0x3f);\u000a    lVar1 = ns + lVar2 * -1000000000;\u000a    ns = ns + lVar2 * -1000000000 + 1000000000;\u000a    if (-1 < lVar1) {\u000a      ns = lVar1;\u000a    }\u000a    tVar4 = make_timespec((lVar1 >> 0x3f) + (long)sec + lVar2,ns);\u000a    return tVar4;\u000a  }\u000a  tVar4 = make_timespec(0x7fffffffffffffff,999999999);\u000a  return tVar4;\u000a}\u000a\u000a
p325
S'MOV RDI,0x7fffffffffffffff\nUCOMISD XMM0,qword ptr [0x0040d5f8]\nJBE 0x0040a187\nMOVSD XMM1,qword ptr [0x0040d600]\nUCOMISD XMM1,XMM0\nJBE 0x0040a191\nCVTTSD2SI RDI,XMM0\nXORPS XMM1,XMM1\nCVTSI2SD XMM1,RDI\nSUBSD XMM0,XMM1\nMULSD XMM0,qword ptr [0x0040cd58]\nCVTTSD2SI RAX,XMM0\nXORPS XMM1,XMM1\nCVTSI2SD XMM1,RAX\nXOR ECX,ECX\nUCOMISD XMM0,XMM1\nSETA CL\nADD RCX,RAX\nMOV RDX,0x112e0be826d694b3\nMOV RAX,RCX\nIMUL RDX\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0x1a\nADD RDX,RAX\nIMUL RAX,RDX,0x3b9aca00\nMOV RSI,RCX\nSUB RSI,RAX\nADD RSI,0x3b9aca00\nSUB RCX,RAX\nCMOVNS RSI,RCX\nADD RDI,RDX\nSAR RCX,0x3f\nADD RCX,RDI\nMOV RDI,RCX\nJMP 0x00408ef0\nINC RDI\nXOR ESI,ESI\nJMP 0x00408ef0\nMOV ESI,0x3b9ac9ff\nJMP 0x00408ef0\n'
p326
S'48 bf ff ff ff ff ff ff ff 7f\n66 0f 2e 05 06 35 00 00\n0f 86 8f 00 00 00\nf2 0f 10 0d 00 35 00 00\n66 0f 2e c8\n0f 86 87 00 00 00\nf2 48 0f 2c f8\n0f 57 c9\nf2 48 0f 2a cf\nf2 0f 5c c1\nf2 0f 59 05 35 2c 00 00\nf2 48 0f 2c c0\n0f 57 c9\nf2 48 0f 2a c8\n31 c9\n66 0f 2e c1\n0f 97 c1\n48 01 c1\n48 ba b3 94 d6 26 e8 0b 2e 11\n48 89 c8\n48 f7 ea\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 1a\n48 01 c2\n48 69 c2 00 ca 9a 3b\n48 89 ce\n48 29 c6\n48 81 c6 00 ca 9a 3b\n48 29 c1\n48 0f 49 f1\n48 01 d7\n48 c1 f9 3f\n48 01 f9\n48 89 cf\ne9 69 ed ff ff\n48 ff c7\n31 f6\ne9 5f ed ff ff\nbe ff c9 9a 3b\ne9 55 ed ff ff\n'
p327
S'.text:000000000040a0e0\n.text:000000000040a0ea\n.text:000000000040a0f2\n.text:000000000040a0f8\n.text:000000000040a100\n.text:000000000040a104\n.text:000000000040a10a\n.text:000000000040a10f\n.text:000000000040a112\n.text:000000000040a117\n.text:000000000040a11b\n.text:000000000040a123\n.text:000000000040a128\n.text:000000000040a12b\n.text:000000000040a130\n.text:000000000040a132\n.text:000000000040a136\n.text:000000000040a139\n.text:000000000040a13c\n.text:000000000040a146\n.text:000000000040a149\n.text:000000000040a14c\n.text:000000000040a14f\n.text:000000000040a153\n.text:000000000040a157\n.text:000000000040a15a\n.text:000000000040a161\n.text:000000000040a164\n.text:000000000040a167\n.text:000000000040a16e\n.text:000000000040a171\n.text:000000000040a175\n.text:000000000040a178\n.text:000000000040a17c\n.text:000000000040a17f\n.text:000000000040a182\n.text:000000000040a187\n.text:000000000040a18a\n.text:000000000040a18c\n.text:000000000040a191\n.text:000000000040a196\n'
p328
tp329
sS'stat'
p330
(S'\n__stdcall stat(char * __file, stat * __buf)\n'
p331
V\u000aint stat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___xstat_00610180)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p332
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x00401a10\n'
p333
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 30 73 ff ff\n'
p334
S'.text:000000000040a6d0\n.text:000000000040a6d3\n.text:000000000040a6d6\n.text:000000000040a6db\n'
p335
tp336
sS'rpl_fseeko'
p337
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p338
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_00610208)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p339
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x0040a5d8\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x0040a5d8\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x0040a5ea\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401b20\nMOV RDI,RBX\nCALL 0x004019f0\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x004018f0\nCMP RAX,-0x1\nJZ 0x0040a613\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x0040a618\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p340
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 36 75 ff ff\n48 89 df\ne8 fe 73 ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 f1 72 ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p341
S'.text:000000000040a5b0\n.text:000000000040a5b1\n.text:000000000040a5b3\n.text:000000000040a5b4\n.text:000000000040a5b7\n.text:000000000040a5ba\n.text:000000000040a5bd\n.text:000000000040a5c1\n.text:000000000040a5c5\n.text:000000000040a5c7\n.text:000000000040a5cb\n.text:000000000040a5cf\n.text:000000000040a5d1\n.text:000000000040a5d6\n.text:000000000040a5d8\n.text:000000000040a5db\n.text:000000000040a5de\n.text:000000000040a5e1\n.text:000000000040a5e2\n.text:000000000040a5e4\n.text:000000000040a5e5\n.text:000000000040a5ea\n.text:000000000040a5ed\n.text:000000000040a5f2\n.text:000000000040a5f4\n.text:000000000040a5f7\n.text:000000000040a5fa\n.text:000000000040a5ff\n.text:000000000040a603\n.text:000000000040a605\n.text:000000000040a608\n.text:000000000040a60f\n.text:000000000040a611\n.text:000000000040a613\n.text:000000000040a618\n.text:000000000040a619\n.text:000000000040a61b\n.text:000000000040a61c\n'
p342
tp343
sS'quote_n_mem'
p344
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p345
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p346
S'MOV ECX,0x6102c0\nJMP 0x004084e0\n'
p347
S'b9 c0 02 61 00\ne9 36 fb ff ff\n'
p348
S'.text:00000000004089a0\n.text:00000000004089a5\n'
p349
tp350
sS'tail'
p351
(S'\n__stdcall tail(char * filename, uintmax_t n_units, uintmax_t * read_pos)\n'
p352
V\u000a_Bool tail(char *filename,uintmax_t n_units,uintmax_t *read_pos)\u000a\u000a{\u000a  _Bool _Var1;\u000a  undefined8 *in_RCX;\u000a  \u000a  *in_RCX = 0;\u000a  if (count_lines != false) {\u000a    _Var1 = tail_lines(filename,n_units,read_pos);\u000a    return _Var1;\u000a  }\u000a  _Var1 = tail_bytes(filename,n_units,read_pos);\u000a  return _Var1;\u000a}\u000a\u000a
p353
S'MOV qword ptr [RCX],0x0\nCMP byte ptr [0x0061034d],0x0\nJZ 0x00403dc5\nJMP 0x00403f40\nJMP 0x004040b0\n'
p354
S'48 c7 01 00 00 00 00\n80 3d 8f c5 20 00 00\n74 05\ne9 7b 01 00 00\ne9 e6 02 00 00\n'
p355
S'.text:0000000000403db0\n.text:0000000000403db7\n.text:0000000000403dbe\n.text:0000000000403dc0\n.text:0000000000403dc5\n'
p356
tp357
sS'xstrdup'
p358
(S'\n__stdcall xstrdup(char * string)\n'
p359
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p360
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401860\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00409610\n'
p361
S'53\n48 89 fb\ne8 17 82 ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p362
S'.text:0000000000409640\n.text:0000000000409641\n.text:0000000000409644\n.text:0000000000409649\n.text:000000000040964d\n.text:0000000000409650\n.text:0000000000409651\n'
p363
tp364
sS'rotr8'
p365
(S'\n__stdcall rotr8()\n'
p366
V\u000auint8_t rotr8(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint8_t)((byte)(in_EDI << (8 - (byte)in_ESI & 0x1f)) |\u000a                  (byte)(in_EDI >> ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p367
S'MOV EAX,EDI\nMOV ECX,ESI\nSHR EAX,CL\nMOV ECX,0x8\nSUB ECX,ESI\nSHL EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p368
S'89 f8\n89 f1\nd3 e8\nb9 08 00 00 00\n29 f1\nd3 e7\n09 c7\n89 f8\nc3\n'
p369
S'.text:0000000000409f00\n.text:0000000000409f02\n.text:0000000000409f04\n.text:0000000000409f06\n.text:0000000000409f0b\n.text:0000000000409f0d\n.text:0000000000409f0f\n.text:0000000000409f11\n.text:0000000000409f13\n'
p370
tp371
sS'c_ispunct'
p372
(S'\n__stdcall c_ispunct()\n'
p373
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p374
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00409ff2\nMOV AL,0x1\nJMP qword ptr [0x40d308 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p375
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 08 d3 40 00\nc3\n31 c0\nc3\n'
p376
S'.text:0000000000409fe0\n.text:0000000000409fe3\n.text:0000000000409fe6\n.text:0000000000409fe8\n.text:0000000000409fea\n.text:0000000000409ff1\n.text:0000000000409ff2\n.text:0000000000409ff4\n'
p377
tp378
sS'fstat'
p379
(S'\n__stdcall fstat(int __fd, stat * __buf)\n'
p380
V\u000aint fstat(int __fd,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___fxstat_006101b8)(1,(ulong)(uint)__fd,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p381
S'MOV RDX,RSI\nMOV ESI,EDI\nMOV EDI,0x1\nJMP 0x00401a80\n'
p382
S'48 89 f2\n89 fe\nbf 01 00 00 00\ne9 91 73 ff ff\n'
p383
S'.text:000000000040a6e0\n.text:000000000040a6e3\n.text:000000000040a6e5\n.text:000000000040a6ea\n'
p384
tp385
sS'is_prime'
p386
(S'\n__stdcall is_prime(size_t candidate)\n'
p387
V\u000a_Bool is_prime(size_t candidate)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  long lVar3;\u000a  bool bVar4;\u000a  \u000a  bVar4 = candidate != (candidate / 3) * 3;\u000a  if ((9 < candidate) && (bVar4)) {\u000a    uVar2 = 9;\u000a    lVar3 = 0x10;\u000a    uVar1 = 5;\u000a    do {\u000a      uVar2 = uVar2 + lVar3;\u000a      bVar4 = candidate % uVar1 != 0;\u000a      if (candidate <= uVar2) {\u000a        return (_Bool)bVar4;\u000a      }\u000a      lVar3 = lVar3 + 8;\u000a      uVar1 = uVar1 + 2;\u000a    } while (bVar4);\u000a  }\u000a  return (_Bool)bVar4;\u000a}\u000a\u000a
p388
S'MOV R8,RDI\nMOV RCX,-0x5555555555555555\nMOV RAX,R8\nMUL RCX\nSHR RDX,1\nLEA RAX,[RDX + RDX*0x2]\nCMP R8,RAX\nSETNZ AL\nSETZ CL\nCMP R8,0xa\nJC 0x00407395\nTEST CL,CL\nJNZ 0x00407395\nMOV ESI,0x9\nMOV EDI,0x10\nMOV ECX,0x5\nNOP dword ptr [RAX]\nADD RSI,RDI\nXOR EDX,EDX\nMOV RAX,R8\nDIV RCX\nTEST RDX,RDX\nSETNZ AL\nSETZ DL\nCMP RSI,R8\nJNC 0x00407395\nADD RDI,0x8\nADD RCX,0x2\nTEST DL,DL\nJZ 0x00407370\nRET\n'
p389
S'49 89 f8\n48 b9 ab aa aa aa aa aa aa aa\n4c 89 c0\n48 f7 e1\n48 d1 ea\n48 8d 04 52\n49 39 c0\n0f 95 c0\n0f 94 c1\n49 83 f8 0a\n72 3c\n84 c9\n75 38\nbe 09 00 00 00\nbf 10 00 00 00\nb9 05 00 00 00\n0f 1f 40 00\n48 01 fe\n31 d2\n4c 89 c0\n48 f7 f1\n48 85 d2\n0f 95 c0\n0f 94 c2\n4c 39 c6\n73 0c\n48 83 c7 08\n48 83 c1 02\n84 d2\n74 db\nc3\n'
p390
S'.text:0000000000407330\n.text:0000000000407333\n.text:000000000040733d\n.text:0000000000407340\n.text:0000000000407343\n.text:0000000000407346\n.text:000000000040734a\n.text:000000000040734d\n.text:0000000000407350\n.text:0000000000407353\n.text:0000000000407357\n.text:0000000000407359\n.text:000000000040735b\n.text:000000000040735d\n.text:0000000000407362\n.text:0000000000407367\n.text:000000000040736c\n.text:0000000000407370\n.text:0000000000407373\n.text:0000000000407375\n.text:0000000000407378\n.text:000000000040737b\n.text:000000000040737e\n.text:0000000000407381\n.text:0000000000407384\n.text:0000000000407387\n.text:0000000000407389\n.text:000000000040738d\n.text:0000000000407391\n.text:0000000000407393\n.text:0000000000407395\n'
p391
tp392
sS'fscanf'
p393
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p394
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_00610108)();\u000a  return iVar1;\u000a}\u000a\u000a
p395
S'JMP qword ptr [0x00610108]\n'
p396
S'ff 25 e2 e7 20 00\n'
p397
S'.plt:0000000000401920\n'
p398
tp399
sS'memcpy'
p400
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p401
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_00610158)();\u000a  return pvVar1;\u000a}\u000a\u000a
p402
S'JMP qword ptr [0x00610158]\n'
p403
S'ff 25 92 e7 20 00\n'
p404
S'.plt:00000000004019c0\n'
p405
tp406
sS'hash_get_n_buckets_used'
p407
(S'\n__stdcall hash_get_n_buckets_used(Hash_table * table)\n'
p408
V\u000asize_t hash_get_n_buckets_used(Hash_table *table)\u000a\u000a{\u000a  return table->n_buckets_used;\u000a}\u000a\u000a
p409
S'MOV RAX,qword ptr [RDI + 0x18]\nRET\n'
p410
S'48 8b 47 18\nc3\n'
p411
S'.text:0000000000406420\n.text:0000000000406424\n'
p412
tp413
sS'close_stdout_set_ignore_EPIPE'
p414
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p415
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p416
S'MOV byte ptr [0x00610370],DIL\nRET\n'
p417
S'40 88 3d 29 a2 20 00\nc3\n'
p418
S'.text:0000000000406140\n.text:0000000000406147\n'
p419
tp420
sS'iswprint'
p421
(S'\n__stdcall iswprint(wint_t __wc)\n'
p422
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_00610250)();\u000a  return iVar1;\u000a}\u000a\u000a
p423
S'JMP qword ptr [0x00610250]\n'
p424
S'ff 25 9a e6 20 00\n'
p425
S'.plt:0000000000401bb0\n'
p426
tp427
sS'c_isspace'
p428
(S'\n__stdcall c_isspace()\n'
p429
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p430
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x0040a015\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p431
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p432
S'.text:000000000040a000\n.text:000000000040a003\n.text:000000000040a006\n.text:000000000040a008\n.text:000000000040a00d\n.text:000000000040a00f\n.text:000000000040a011\n.text:000000000040a014\n.text:000000000040a015\n.text:000000000040a017\n'
p433
tp434
sS'open'
p435
(S'\n__stdcall open(char * __file, int __oflag)\n'
p436
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_00610200)();\u000a  return iVar1;\u000a}\u000a\u000a
p437
S'JMP qword ptr [0x00610200]\n'
p438
S'ff 25 ea e6 20 00\n'
p439
S'.plt:0000000000401b10\n'
p440
tp441
sS'quotearg_n_custom_mem'
p442
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p443
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p444
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x006103b0]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x006103a0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x00610390]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x00610380]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00407650\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004084e0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p445
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 a7 7a 20 00\n48 89 44 24 30\n0f 10 05 8b 7a 20 00\n0f 29 44 24 20\n0f 10 05 6f 7a 20 00\n0f 29 44 24 10\n0f 10 05 53 7a 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p446
S'.text:00000000004088f0\n.text:00000000004088f1\n.text:00000000004088f3\n.text:00000000004088f5\n.text:00000000004088f6\n.text:00000000004088fa\n.text:00000000004088fd\n.text:0000000000408900\n.text:0000000000408902\n.text:0000000000408909\n.text:000000000040890e\n.text:0000000000408915\n.text:000000000040891a\n.text:0000000000408921\n.text:0000000000408926\n.text:000000000040892d\n.text:0000000000408931\n.text:0000000000408934\n.text:0000000000408937\n.text:000000000040893c\n.text:000000000040893e\n.text:0000000000408941\n.text:0000000000408944\n.text:0000000000408947\n.text:000000000040894c\n.text:0000000000408950\n.text:0000000000408951\n.text:0000000000408953\n.text:0000000000408955\n.text:0000000000408956\n'
p447
tp448
sS'rotl16'
p449
(S'\n__stdcall rotl16()\n'
p450
V\u000auint16_t rotl16(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint16_t)\u000a         ((ushort)(in_EDI >> (0x10 - (byte)in_ESI & 0x1f)) |\u000a         (ushort)(in_EDI << ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p451
S'MOV EAX,EDI\nMOV ECX,ESI\nSHL EAX,CL\nMOV ECX,0x10\nSUB ECX,ESI\nSHR EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p452
S'89 f8\n89 f1\nd3 e0\nb9 10 00 00 00\n29 f1\nd3 ef\n09 c7\n89 f8\nc3\n'
p453
S'.text:0000000000409ea0\n.text:0000000000409ea2\n.text:0000000000409ea4\n.text:0000000000409ea6\n.text:0000000000409eab\n.text:0000000000409ead\n.text:0000000000409eaf\n.text:0000000000409eb1\n.text:0000000000409eb3\n'
p454
tp455
sS'_init'
p456
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p457
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___0060fff8;\u000a  if (PTR___gmon_start___0060fff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___0060fff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p458
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x0060fff8]\nTEST RAX,RAX\nJZ 0x00401722\nCALL RAX\nADD RSP,0x8\nRET\n'
p459
S'48 83 ec 08\n48 8b 05 dd e8 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p460
S'.init:0000000000401710\n.init:0000000000401714\n.init:000000000040171b\n.init:000000000040171e\n.init:0000000000401720\n.init:0000000000401722\n.init:0000000000401726\n'
p461
tp462
sS'set_quoting_flags'
p463
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p464
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p465
S'TEST RDI,RDI\nMOV ECX,0x610380\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p466
S'48 85 ff\nb9 80 03 61 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p467
S'.text:0000000000407630\n.text:0000000000407633\n.text:0000000000407638\n.text:000000000040763c\n.text:000000000040763f\n.text:0000000000407642\n'
p468
tp469
sS'get_stat_birthtime'
p470
(S'\n__stdcall get_stat_birthtime(stat * st)\n'
p471
V\u000atimespec get_stat_birthtime(stat *st)\u000a\u000a{\u000a  return (timespec)CONCAT88(0xffffffffffffffff,0xffffffffffffffff);\u000a}\u000a\u000a
p472
S'MOV RAX,-0x1\nMOV RDX,-0x1\nRET\n'
p473
S'48 c7 c0 ff ff ff ff\n48 c7 c2 ff ff ff ff\nc3\n'
p474
S'.text:0000000000408ee0\n.text:0000000000408ee7\n.text:0000000000408eee\n'
p475
tp476
sS'realloc'
p477
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p478
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_006101d0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p479
S'JMP qword ptr [0x006101d0]\n'
p480
S'ff 25 1a e7 20 00\n'
p481
S'.plt:0000000000401ab0\n'
p482
tp483
sS'__fprintf_chk'
p484
(S'\n__stdcall __fprintf_chk()\n'
p485
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_00610238)();\u000a  return;\u000a}\u000a\u000a
p486
S'JMP qword ptr [0x00610238]\n'
p487
S'ff 25 b2 e6 20 00\n'
p488
S'.plt:0000000000401b80\n'
p489
tp490
sS'c_strtod'
p491
(S'\n__stdcall c_strtod(char * nptr, char * * endptr)\n'
p492
V\u000adouble c_strtod(char *nptr,char **endptr)\u000a\u000a{\u000a  double dVar1;\u000a  locale_t p_Var2;\u000a  \u000a  p_Var2 = c_locale();\u000a  if (p_Var2 != (locale_t)0x0) {\u000a    dVar1 = (double)(*(code *)PTR_strtod_l_00610080)(nptr,endptr,p_Var2);\u000a    return dVar1;\u000a  }\u000a  if (endptr != (char **)0x0) {\u000a    *endptr = nptr;\u000a  }\u000a  return 0.00000000;\u000a}\u000a\u000a
p493
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nCALL 0x00406100\nTEST RAX,RAX\nJZ 0x004060e9\nMOV RDI,R14\nMOV RSI,RBX\nMOV RDX,RAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401810\nTEST RBX,RBX\nJZ 0x004060f1\nMOV qword ptr [RBX],R14\nXORPS XMM0,XMM0\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p494
S'41 56\n53\n50\n48 89 f3\n49 89 fe\ne8 31 00 00 00\n48 85 c0\n74 15\n4c 89 f7\n48 89 de\n48 89 c2\n48 83 c4 08\n5b\n41 5e\ne9 27 b7 ff ff\n48 85 db\n74 03\n4c 89 33\n0f 57 c0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p495
S'.text:00000000004060c0\n.text:00000000004060c2\n.text:00000000004060c3\n.text:00000000004060c4\n.text:00000000004060c7\n.text:00000000004060ca\n.text:00000000004060cf\n.text:00000000004060d2\n.text:00000000004060d4\n.text:00000000004060d7\n.text:00000000004060da\n.text:00000000004060dd\n.text:00000000004060e1\n.text:00000000004060e2\n.text:00000000004060e4\n.text:00000000004060e9\n.text:00000000004060ec\n.text:00000000004060ee\n.text:00000000004060f1\n.text:00000000004060f4\n.text:00000000004060f8\n.text:00000000004060f9\n.text:00000000004060fb\n'
p496
tp497
sS'get_charset_aliases'
p498
(S'\n__stdcall get_charset_aliases()\n'
p499
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnNUM may have a multiplier suffix:\u005cnb 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024,\u005cnGB 1000*1000*1000, G 1024*1024*1024, and so on for T, P, E, Z, Y.\u005cn\u005cn"\u000a         + 0x99;\u000a    return \u000a           "\u005cnNUM may have a multiplier suffix:\u005cnb 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024,\u005cnGB 1000*1000*1000, G 1024*1024*1024, and so on for T, P, E, Z, Y.\u005cn\u005cn"\u000a           + 0x99;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_0040a444_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_0040a444_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_0040a444_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_0040a444_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_0040a444_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_0040a444_caseD_9;\u000a      case -1:\u000a        goto switchD_0040a444_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_0040a49d:\u000a  __s = \u000a        "\u005cnNUM may have a multiplier suffix:\u005cnb 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024,\u005cnGB 1000*1000*1000, G 1024*1024*1024, and so on for T, P, E, Z, Y.\u005cn\u005cn"\u000a        + 0x99;\u000aLAB_0040a4a3:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_0040a444_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_0040a4a3;\u000a  }\u000a  goto LAB_0040a49d;\u000a}\u000a\u000a
p500
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x006104c8]\nTEST R15,R15\nJNZ 0x0040a4b2\nMOV EDI,0x40d744\nCALL 0x00401740\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040a268\nCMP byte ptr [RBX],0x0\nJNZ 0x0040a26d\nMOV EBX,0x40d754\nMOV RDI,RBX\nCALL 0x00401860\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x0040a287\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x0040a289\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401a30\nMOV R13,RAX\nTEST R13,R13\nJZ 0x0040a2dd\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x004019c0\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x0040a2e8\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x0040a305\nMOV R15D,0x40bae8\nJMP 0x0040a4ab\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00401b10\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0040a49d\nMOV ESI,0x40bf52\nMOV EDI,EBP\nCALL 0x00401ac0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040a464\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x0040a430\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x004017a0\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x004017a0\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x0040a430\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401a70\nMOV ESI,0x40d763\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00401920\nCMP EAX,0x2\nJL 0x0040a484\nMOV RDI,R12\nCALL 0x00401860\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x00401860\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040a40d\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401ab0\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x0040a354\nJMP 0x0040a46d\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401a30\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x0040a354\nJMP 0x0040a46d\nMOV RDI,RBX\nCALL 0x004017c0\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x0040a397\nJMP qword ptr [0x40d608 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x004017c0\nCMP EAX,-0x1\nJZ 0x0040a484\nCMP EAX,0xa\nJNZ 0x0040a450\nJMP 0x0040a430\nMOV EDI,EBP\nCALL 0x00401930\nJMP 0x0040a49d\nMOV RDI,R15\nCALL 0x00401750\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x0040a4e0\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040a49d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x0040a4a3\nMOV R15D,0x40bae8\nMOV RDI,R13\nCALL 0x00401750\nMOV qword ptr [0x006104c8],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p501
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 80 62 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 44 d7 40 00\ne8 e5 74 ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb 54 d7 40 00\n48 89 df\ne8 eb 75 ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 99 77 ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 13 77 ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf e8 ba 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 fc 77 ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 52 bf 40 00\n89 ef\ne8 96 77 ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 2b 74 ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 1b 74 ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 cf 76 ff ff\nbe 63 d7 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 6a 75 ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 99 74 ff ff\n49 89 c4\n48 89 ef\ne8 8e 74 ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 b6 76 ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 15 76 ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 88 73 ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 08 d6 40 00\n48 89 df\ne8 68 73 ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 c5 74 ff ff\neb 30\n4c 89 ff\ne8 db 72 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 54 00 00 00\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf e8 ba 40 00\n4c 89 ef\ne8 a5 72 ff ff\n4c 89 3d 16 60 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p502
S'.text:000000000040a230\n.text:000000000040a231\n.text:000000000040a233\n.text:000000000040a235\n.text:000000000040a237\n.text:000000000040a239\n.text:000000000040a23a\n.text:000000000040a241\n.text:000000000040a248\n.text:000000000040a24b\n.text:000000000040a251\n.text:000000000040a256\n.text:000000000040a25b\n.text:000000000040a25e\n.text:000000000040a261\n.text:000000000040a263\n.text:000000000040a266\n.text:000000000040a268\n.text:000000000040a26d\n.text:000000000040a270\n.text:000000000040a275\n.text:000000000040a278\n.text:000000000040a27b\n.text:000000000040a27d\n.text:000000000040a282\n.text:000000000040a285\n.text:000000000040a287\n.text:000000000040a289\n.text:000000000040a28d\n.text:000000000040a292\n.text:000000000040a297\n.text:000000000040a29a\n.text:000000000040a29d\n.text:000000000040a29f\n.text:000000000040a2a2\n.text:000000000040a2a5\n.text:000000000040a2a8\n.text:000000000040a2ad\n.text:000000000040a2b0\n.text:000000000040a2b3\n.text:000000000040a2b6\n.text:000000000040a2b8\n.text:000000000040a2be\n.text:000000000040a2c8\n.text:000000000040a2cd\n.text:000000000040a2d7\n.text:000000000040a2db\n.text:000000000040a2dd\n.text:000000000040a2e3\n.text:000000000040a2e8\n.text:000000000040a2f2\n.text:000000000040a2f7\n.text:000000000040a301\n.text:000000000040a305\n.text:000000000040a30a\n.text:000000000040a30c\n.text:000000000040a30f\n.text:000000000040a314\n.text:000000000040a316\n.text:000000000040a318\n.text:000000000040a31e\n.text:000000000040a323\n.text:000000000040a325\n.text:000000000040a32a\n.text:000000000040a32d\n.text:000000000040a330\n.text:000000000040a336\n.text:000000000040a33b\n.text:000000000040a340\n.text:000000000040a342\n.text:000000000040a347\n.text:000000000040a34a\n.text:000000000040a34f\n.text:000000000040a354\n.text:000000000040a359\n.text:000000000040a35c\n.text:000000000040a35f\n.text:000000000040a362\n.text:000000000040a365\n.text:000000000040a368\n.text:000000000040a36d\n.text:000000000040a370\n.text:000000000040a375\n.text:000000000040a378\n.text:000000000040a37d\n.text:000000000040a380\n.text:000000000040a385\n.text:000000000040a38a\n.text:000000000040a38d\n.text:000000000040a392\n.text:000000000040a397\n.text:000000000040a399\n.text:000000000040a39c\n.text:000000000040a3a1\n.text:000000000040a3a6\n.text:000000000040a3a8\n.text:000000000040a3ab\n.text:000000000040a3ae\n.text:000000000040a3b1\n.text:000000000040a3b6\n.text:000000000040a3b9\n.text:000000000040a3bf\n.text:000000000040a3c2\n.text:000000000040a3c7\n.text:000000000040a3ca\n.text:000000000040a3cd\n.text:000000000040a3d2\n.text:000000000040a3d5\n.text:000000000040a3da\n.text:000000000040a3df\n.text:000000000040a3e2\n.text:000000000040a3e4\n.text:000000000040a3e8\n.text:000000000040a3ed\n.text:000000000040a3f2\n.text:000000000040a3f5\n.text:000000000040a3fa\n.text:000000000040a3fd\n.text:000000000040a402\n.text:000000000040a405\n.text:000000000040a40b\n.text:000000000040a40d\n.text:000000000040a412\n.text:000000000040a416\n.text:000000000040a41b\n.text:000000000040a41e\n.text:000000000040a421\n.text:000000000040a427\n.text:000000000040a430\n.text:000000000040a433\n.text:000000000040a438\n.text:000000000040a43b\n.text:000000000040a43e\n.text:000000000040a444\n.text:000000000040a450\n.text:000000000040a453\n.text:000000000040a458\n.text:000000000040a45b\n.text:000000000040a45d\n.text:000000000040a460\n.text:000000000040a462\n.text:000000000040a464\n.text:000000000040a466\n.text:000000000040a46b\n.text:000000000040a46d\n.text:000000000040a470\n.text:000000000040a475\n.text:000000000040a477\n.text:000000000040a47c\n.text:000000000040a47f\n.text:000000000040a484\n.text:000000000040a487\n.text:000000000040a48c\n.text:000000000040a491\n.text:000000000040a494\n.text:000000000040a496\n.text:000000000040a49b\n.text:000000000040a49d\n.text:000000000040a4a3\n.text:000000000040a4a6\n.text:000000000040a4ab\n.text:000000000040a4b2\n.text:000000000040a4b5\n.text:000000000040a4bc\n.text:000000000040a4bd\n.text:000000000040a4bf\n.text:000000000040a4c1\n.text:000000000040a4c3\n.text:000000000040a4c5\n.text:000000000040a4c6\n'
p503
tp504
sS'fstatfs'
p505
(S'\n__stdcall fstatfs(int __fildes, statfs * __buf)\n'
p506
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fstatfs(int __fildes,statfs *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fstatfs_00610218)();\u000a  return iVar1;\u000a}\u000a\u000a
p507
S'JMP qword ptr [0x00610218]\n'
p508
S'ff 25 d2 e6 20 00\n'
p509
S'.plt:0000000000401b40\n'
p510
tp511
sS'nl_langinfo'
p512
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p513
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_006101a8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p514
S'JMP qword ptr [0x006101a8]\n'
p515
S'ff 25 42 e7 20 00\n'
p516
S'.plt:0000000000401a60\n'
p517
tp518
sS'x2realloc'
p519
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p520
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p521
S'MOV EDX,0x1\nJMP 0x00409540\n'
p522
S'ba 01 00 00 00\neb 89\n'
p523
S'.text:00000000004095b0\n.text:00000000004095b5\n'
p524
tp525
sS'strlen'
p526
(S'\n__stdcall strlen(char * __s)\n'
p527
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_006100a8)();\u000a  return sVar1;\u000a}\u000a\u000a
p528
S'JMP qword ptr [0x006100a8]\n'
p529
S'ff 25 42 e8 20 00\n'
p530
S'.plt:0000000000401860\n'
p531
tp532
sS'memcmp'
p533
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p534
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_00610128)();\u000a  return iVar1;\u000a}\u000a\u000a
p535
S'JMP qword ptr [0x00610128]\n'
p536
S'ff 25 c2 e7 20 00\n'
p537
S'.plt:0000000000401960\n'
p538
tp539
sS'hash_free'
p540
(S'\n__stdcall hash_free(Hash_table * table)\n'
p541
V\u000avoid hash_free(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  hash_entry *__ptr;\u000a  hash_entry *__ptr_00;\u000a  \u000a  if (((table->data_freer != (void (*)(void *))0x0) && (table->n_entries != 0)) &&\u000a     (__ptr_00 = table->bucket, __ptr_00 < table->bucket_limit)) {\u000a    do {\u000a      __ptr = __ptr_00;\u000a      if (__ptr_00->data != (void *)0x0) {\u000a        while (__ptr != (hash_entry *)0x0) {\u000a          (*table->data_freer)(__ptr->data);\u000a          __ptr = __ptr->next;\u000a        }\u000a      }\u000a      __ptr_00 = __ptr_00 + 1;\u000a    } while (__ptr_00 < table->bucket_limit);\u000a  }\u000a  __ptr_00 = table->bucket;\u000a  if (__ptr_00 < table->bucket_limit) {\u000a    do {\u000a      __ptr = __ptr_00->next;\u000a      while (__ptr != (hash_entry *)0x0) {\u000a        phVar1 = __ptr->next;\u000a        free(__ptr);\u000a        __ptr = phVar1;\u000a      }\u000a      __ptr_00 = __ptr_00 + 1;\u000a    } while (__ptr_00 < table->bucket_limit);\u000a  }\u000a  __ptr_00 = table->free_entry_list;\u000a  while (__ptr_00 != (hash_entry *)0x0) {\u000a    __ptr = __ptr_00->next;\u000a    free(__ptr_00);\u000a    __ptr_00 = __ptr;\u000a  }\u000a  free(table->bucket);\u000a  free(table);\u000a  return;\u000a}\u000a\u000a
p542
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nCMP qword ptr [R15 + 0x40],0x0\nJZ 0x00406b72\nCMP qword ptr [R15 + 0x20],0x0\nJZ 0x00406b72\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x00406b4a\nJMP 0x00406b72\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x00406b72\nCMP qword ptr [R14],0x0\nJZ 0x00406b40\nTEST R14,R14\nJZ 0x00406b40\nMOV RBX,R14\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RBX]\nCALL qword ptr [R15 + 0x40]\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x00406b60\nJMP 0x00406b40\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x00406b8a\nJMP 0x00406bb3\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x00406bb3\nMOV RDI,qword ptr [R14 + 0x8]\nTEST RDI,RDI\nJZ 0x00406b80\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x00401750\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x00406ba0\nJMP 0x00406b80\nMOV RDI,qword ptr [R15 + 0x48]\nTEST RDI,RDI\nJZ 0x00406bd1\nNOP dword ptr [RAX]\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x00401750\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x00406bc0\nMOV RDI,qword ptr [R15]\nCALL 0x00401750\nMOV RDI,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00401750\n'
p543
S'41 57\n41 56\n53\n49 89 ff\n49 83 7f 40 00\n74 53\n49 83 7f 20 00\n74 4c\n4d 8b 37\n4d 3b 77 08\n72 1b\neb 41\n49 83 c6 10\n4d 3b 77 08\n73 28\n49 83 3e 00\n74 f0\n4d 85 f6\n74 eb\n4c 89 f3\n0f 1f 84 00 00 00 00 00\n48 8b 3b\n41 ff 57 40\n48 8b 5b 08\n48 85 db\n75 f0\neb ce\n4d 8b 37\n4d 3b 77 08\n72 0f\neb 36\n49 83 c6 10\n4d 3b 77 08\n73 29\n49 8b 7e 08\n48 85 ff\n74 ed\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 5f 08\ne8 a7 ab ff ff\n48 85 db\n48 89 df\n75 ef\neb cd\n49 8b 7f 48\n48 85 ff\n74 15\n0f 1f 40 00\n48 8b 5f 08\ne8 87 ab ff ff\n48 85 db\n48 89 df\n75 ef\n49 8b 3f\ne8 77 ab ff ff\n4c 89 ff\n5b\n41 5e\n41 5f\ne9 6a ab ff ff\n'
p544
S'.text:0000000000406b10\n.text:0000000000406b12\n.text:0000000000406b14\n.text:0000000000406b15\n.text:0000000000406b18\n.text:0000000000406b1d\n.text:0000000000406b1f\n.text:0000000000406b24\n.text:0000000000406b26\n.text:0000000000406b29\n.text:0000000000406b2d\n.text:0000000000406b2f\n.text:0000000000406b40\n.text:0000000000406b44\n.text:0000000000406b48\n.text:0000000000406b4a\n.text:0000000000406b4e\n.text:0000000000406b50\n.text:0000000000406b53\n.text:0000000000406b55\n.text:0000000000406b58\n.text:0000000000406b60\n.text:0000000000406b63\n.text:0000000000406b67\n.text:0000000000406b6b\n.text:0000000000406b6e\n.text:0000000000406b70\n.text:0000000000406b72\n.text:0000000000406b75\n.text:0000000000406b79\n.text:0000000000406b7b\n.text:0000000000406b80\n.text:0000000000406b84\n.text:0000000000406b88\n.text:0000000000406b8a\n.text:0000000000406b8e\n.text:0000000000406b91\n.text:0000000000406b93\n.text:0000000000406ba0\n.text:0000000000406ba4\n.text:0000000000406ba9\n.text:0000000000406bac\n.text:0000000000406baf\n.text:0000000000406bb1\n.text:0000000000406bb3\n.text:0000000000406bb7\n.text:0000000000406bba\n.text:0000000000406bbc\n.text:0000000000406bc0\n.text:0000000000406bc4\n.text:0000000000406bc9\n.text:0000000000406bcc\n.text:0000000000406bcf\n.text:0000000000406bd1\n.text:0000000000406bd4\n.text:0000000000406bd9\n.text:0000000000406bdc\n.text:0000000000406bdd\n.text:0000000000406bdf\n.text:0000000000406be1\n'
p545
tp546
sS'quotearg_n_style_mem'
p547
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p548
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p549
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00408710\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004084e0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p550
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p551
S'.text:0000000000408770\n.text:0000000000408771\n.text:0000000000408773\n.text:0000000000408775\n.text:0000000000408776\n.text:000000000040877a\n.text:000000000040877d\n.text:0000000000408780\n.text:0000000000408782\n.text:0000000000408785\n.text:0000000000408788\n.text:000000000040878d\n.text:000000000040878f\n.text:0000000000408792\n.text:0000000000408795\n.text:0000000000408798\n.text:000000000040879d\n.text:00000000004087a1\n.text:00000000004087a2\n.text:00000000004087a4\n.text:00000000004087a6\n.text:00000000004087a7\n'
p552
tp553
sS'_exit'
p554
(S'\n__stdcall _exit(int __status)\n'
p555
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_00610040)();\u000a  return;\u000a}\u000a\u000a
p556
S'JMP qword ptr [0x00610040]\n'
p557
S'ff 25 aa e8 20 00\n'
p558
S'.plt:0000000000401790\n'
p559
tp560
sS'emit_stdin_note'
p561
(S'\n__stdcall emit_stdin_note()\n'
p562
V\u000avoid emit_stdin_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,"\u005cnWith no FILE, or when FILE is -, read standard input.\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p563
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x40bd72\nMOV EDX,0x5\nCALL 0x00401840\nMOV RSI,qword ptr [0x00610308]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401970\n'
p564
S'50\n31 ff\nbe 72 bd 40 00\nba 05 00 00 00\ne8 3e f9 ff ff\n48 8b 35 ff e3 20 00\n48 89 c7\n58\ne9 5e fa ff ff\n'
p565
S'.text:0000000000401ef0\n.text:0000000000401ef1\n.text:0000000000401ef3\n.text:0000000000401ef8\n.text:0000000000401efd\n.text:0000000000401f02\n.text:0000000000401f09\n.text:0000000000401f0c\n.text:0000000000401f0d\n'
p566
tp567
sS'free_entry'
p568
(S'\n__stdcall free_entry(Hash_table * table, hash_entry * entry)\n'
p569
V\u000avoid free_entry(Hash_table *table,hash_entry *entry)\u000a\u000a{\u000a  entry->data = (void *)0x0;\u000a  entry->next = table->free_entry_list;\u000a  table->free_entry_list = entry;\u000a  return;\u000a}\u000a\u000a
p570
S'MOV qword ptr [RSI],0x0\nMOV RAX,qword ptr [RDI + 0x48]\nMOV qword ptr [RSI + 0x8],RAX\nMOV qword ptr [RDI + 0x48],RSI\nRET\n'
p571
S'48 c7 06 00 00 00 00\n48 8b 47 48\n48 89 46 08\n48 89 77 48\nc3\n'
p572
S'.text:00000000004073a0\n.text:00000000004073a7\n.text:00000000004073ab\n.text:00000000004073af\n.text:00000000004073b3\n'
p573
tp574
sS'xdectoumax'
p575
(S'\n__stdcall xdectoumax(char * n_str, uintmax_t min, uintmax_t max, char * suffixes, char * err)\n'
p576
V\u000auintmax_t xdectoumax(char *n_str,uintmax_t min,uintmax_t max,char *suffixes,char *err)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  \u000a  uVar1 = xnumtoumax(n_str,10,min,(char *)max,suffixes);\u000a  return uVar1;\u000a}\u000a\u000a
p577
S'PUSH RAX\nMOV R10,R8\nMOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV dword ptr [RSP],R9D\nMOV ESI,0xa\nMOV R8,RAX\nMOV R9,R10\nCALL 0x00409690\nPOP RCX\nRET\n'
p578
S'50\n4d 89 c2\n48 89 c8\n48 89 d1\n48 89 f2\n44 89 0c 24\nbe 0a 00 00 00\n49 89 c0\n4d 89 d1\ne8 0f ff ff ff\n59\nc3\n'
p579
S'.text:0000000000409760\n.text:0000000000409761\n.text:0000000000409764\n.text:0000000000409767\n.text:000000000040976a\n.text:000000000040976d\n.text:0000000000409771\n.text:0000000000409776\n.text:0000000000409779\n.text:000000000040977c\n.text:0000000000409781\n.text:0000000000409782\n'
p580
tp581
sS'bkm_scale_by_power'
p582
(S'\n__stdcall bkm_scale_by_power(uintmax_t * x)\n'
p583
V\u000astrtol_error bkm_scale_by_power(uintmax_t *x)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  int in_EDX;\u000a  strtol_error sVar2;\u000a  \u000a  sVar2 = LONGINT_OK;\u000a  if (in_EDX != 0) {\u000a    do {\u000a      sVar1 = bkm_scale(x);\u000a      sVar2 = sVar2 | sVar1;\u000a      in_EDX = in_EDX + -1;\u000a    } while (in_EDX != 0);\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p584
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R14D,ESI\nMOV R15,RDI\nXOR EBP,EBP\nTEST EBX,EBX\nJZ 0x00409b81\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nMOV ESI,R14D\nCALL 0x00409b20\nOR EBP,EAX\nDEC EBX\nJNZ 0x00409b70\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p585
S'55\n41 57\n41 56\n53\n50\n89 d3\n41 89 f6\n49 89 ff\n31 ed\n85 db\n74 1c\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\n44 89 f6\ne8 a5 ff ff ff\n09 c5\nff cb\n75 ef\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p586
S'.text:0000000000409b50\n.text:0000000000409b51\n.text:0000000000409b53\n.text:0000000000409b55\n.text:0000000000409b56\n.text:0000000000409b57\n.text:0000000000409b59\n.text:0000000000409b5c\n.text:0000000000409b5f\n.text:0000000000409b61\n.text:0000000000409b63\n.text:0000000000409b65\n.text:0000000000409b70\n.text:0000000000409b73\n.text:0000000000409b76\n.text:0000000000409b7b\n.text:0000000000409b7d\n.text:0000000000409b7f\n.text:0000000000409b81\n.text:0000000000409b83\n.text:0000000000409b87\n.text:0000000000409b88\n.text:0000000000409b8a\n.text:0000000000409b8c\n.text:0000000000409b8d\n'
p587
tp588
sS'argmatch_valid'
p589
(S'\n__stdcall argmatch_valid(char * * arglist, char * vallist, size_t valsize)\n'
p590
V\u000avoid argmatch_valid(char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  int iVar2;\u000a  char *__s;\u000a  char *__s1;\u000a  long lVar3;\u000a  \u000a  __s = (char *)dcgettext(0,"Valid arguments are:",5);\u000a  fputs_unlocked(__s,stderr);\u000a  __s = *arglist;\u000a  if (__s != (char *)0x0) {\u000a    __s1 = (char *)0x0;\u000a    lVar3 = 0;\u000a    do {\u000a      pFVar1 = stderr;\u000a      if (lVar3 == 0) {\u000aLAB_00405f57:\u000a        __s = quote(__s);\u000a        __fprintf_chk(pFVar1,1,"\u005cn  - %s",__s);\u000a        __s1 = vallist;\u000a      }\u000a      else {\u000a        iVar2 = memcmp(__s1,vallist,valsize);\u000a        if (iVar2 != 0) goto LAB_00405f57;\u000a        __s = quote(__s);\u000a        __fprintf_chk(pFVar1,1,&DAT_0040c6e2,__s);\u000a      }\u000a      __s = arglist[lVar3 + 1];\u000a      lVar3 = lVar3 + 1;\u000a      vallist = vallist + valsize;\u000a    } while (__s != (char *)0x0);\u000a  }\u000a  (*(code *)PTR_putc_unlocked_00610188)(10,stderr);\u000a  return;\u000a}\u000a\u000a
p591
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R13,RSI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV ESI,0x40c6c5\nMOV EDX,0x5\nCALL 0x00401840\nMOV RSI,qword ptr [0x00610340]\nMOV RDI,RAX\nCALL 0x00401970\nMOV qword ptr [RSP],RBX\nMOV RBX,qword ptr [RBX]\nTEST RBX,RBX\nMOV R12,qword ptr [0x00610340]\nJZ 0x00405fba\nXOR EBP,EBP\nXOR R15D,R15D\nTEST R15,R15\nJZ 0x00405f57\nMOV RDI,RBP\nMOV RSI,R13\nMOV RDX,R14\nCALL 0x00401960\nTEST EAX,EAX\nJZ 0x00405f80\nMOV RDI,RBX\nCALL 0x004089d0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x40c6da\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x00401b80\nMOV RBP,R13\nJMP 0x00405f9f\nMOV RDI,RBX\nCALL 0x004089d0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x40c6e2\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x00401b80\nMOV RAX,qword ptr [RSP]\nMOV RBX,qword ptr [RAX + R15*0x8 + 0x8]\nINC R15\nMOV R12,qword ptr [0x00610340]\nADD R13,R14\nTEST RBX,RBX\nJNZ 0x00405f40\nMOV EDI,0xa\nMOV RSI,R12\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00401a20\n'
p592
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f5\n48 89 fb\n31 ff\nbe c5 c6 40 00\nba 05 00 00 00\ne8 2b b9 ff ff\n48 8b 35 24 a4 20 00\n48 89 c7\ne8 4c ba ff ff\n48 89 1c 24\n48 8b 1b\n48 85 db\n4c 8b 25 0b a4 20 00\n0f 84 7f 00 00 00\n31 ed\n45 31 ff\n4d 85 ff\n74 12\n48 89 ef\n4c 89 ee\n4c 89 f2\ne8 0d ba ff ff\n85 c0\n74 29\n48 89 df\ne8 71 2a 00 00\n48 89 c1\nbe 01 00 00 00\nba da c6 40 00\n31 c0\n4c 89 e7\ne8 0a bc ff ff\n4c 89 ed\neb 24\n48 89 df\ne8 48 2a 00 00\n48 89 c1\nbe 01 00 00 00\nba e2 c6 40 00\n31 c0\n4c 89 e7\ne8 e1 bb ff ff\n48 8b 04 24\n4a 8b 5c f8 08\n49 ff c7\n4c 8b 25 8e a3 20 00\n4d 01 f5\n48 85 db\n75 86\nbf 0a 00 00 00\n4c 89 e6\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 4b ba ff ff\n'
p593
S'.text:0000000000405ef0\n.text:0000000000405ef1\n.text:0000000000405ef3\n.text:0000000000405ef5\n.text:0000000000405ef7\n.text:0000000000405ef9\n.text:0000000000405efa\n.text:0000000000405efb\n.text:0000000000405efe\n.text:0000000000405f01\n.text:0000000000405f04\n.text:0000000000405f06\n.text:0000000000405f0b\n.text:0000000000405f10\n.text:0000000000405f15\n.text:0000000000405f1c\n.text:0000000000405f1f\n.text:0000000000405f24\n.text:0000000000405f28\n.text:0000000000405f2b\n.text:0000000000405f2e\n.text:0000000000405f35\n.text:0000000000405f3b\n.text:0000000000405f3d\n.text:0000000000405f40\n.text:0000000000405f43\n.text:0000000000405f45\n.text:0000000000405f48\n.text:0000000000405f4b\n.text:0000000000405f4e\n.text:0000000000405f53\n.text:0000000000405f55\n.text:0000000000405f57\n.text:0000000000405f5a\n.text:0000000000405f5f\n.text:0000000000405f62\n.text:0000000000405f67\n.text:0000000000405f6c\n.text:0000000000405f6e\n.text:0000000000405f71\n.text:0000000000405f76\n.text:0000000000405f79\n.text:0000000000405f80\n.text:0000000000405f83\n.text:0000000000405f88\n.text:0000000000405f8b\n.text:0000000000405f90\n.text:0000000000405f95\n.text:0000000000405f97\n.text:0000000000405f9a\n.text:0000000000405f9f\n.text:0000000000405fa3\n.text:0000000000405fa8\n.text:0000000000405fab\n.text:0000000000405fb2\n.text:0000000000405fb5\n.text:0000000000405fb8\n.text:0000000000405fba\n.text:0000000000405fbf\n.text:0000000000405fc2\n.text:0000000000405fc6\n.text:0000000000405fc7\n.text:0000000000405fc9\n.text:0000000000405fcb\n.text:0000000000405fcd\n.text:0000000000405fcf\n.text:0000000000405fd0\n'
p594
tp595
sS'hash_initialize'
p596
(S'\n__stdcall hash_initialize(size_t candidate, Hash_tuning * tuning, Hash_hasher * hasher, Hash_comparator * comparator, Hash_data_freer * data_freer)\n'
p597
V\u000aHash_table *\u000ahash_initialize(size_t candidate,Hash_tuning *tuning,size_t (*hasher)(void *,size_t),\u000a               _Bool (*comparator)(void *,void *),void (*data_freer)(void *))\u000a\u000a{\u000a  _Bool _Var1;\u000a  Hash_table *table;\u000a  size_t n;\u000a  hash_entry *phVar2;\u000a  code *pcVar3;\u000a  Hash_tuning *tuning_00;\u000a  code *pcVar4;\u000a  \u000a  pcVar3 = raw_hasher;\u000a  if (hasher != (size_t (*)(void *,size_t))0x0) {\u000a    pcVar3 = hasher;\u000a  }\u000a  pcVar4 = raw_comparator;\u000a  if (comparator != (_Bool (*)(void *,void *))0x0) {\u000a    pcVar4 = comparator;\u000a  }\u000a  table = (Hash_table *)malloc(0x50);\u000a  if (table != (Hash_table *)0x0) {\u000a    tuning_00 = &default_tuning;\u000a    if (tuning != (Hash_tuning *)0x0) {\u000a      tuning_00 = tuning;\u000a    }\u000a    table->tuning = tuning_00;\u000a    _Var1 = check_tuning(table);\u000a    if (_Var1 != false) {\u000a      n = compute_bucket_size(candidate,tuning_00);\u000a      table->n_buckets = n;\u000a      if (n != 0) {\u000a        phVar2 = (hash_entry *)rpl_calloc(n,0x10);\u000a        table->bucket = phVar2;\u000a        if (phVar2 != (hash_entry *)0x0) {\u000a          table->bucket_limit = phVar2 + table->n_buckets;\u000a          *(undefined4 *)&table->n_buckets_used = 0;\u000a          *(undefined4 *)((long)&table->n_buckets_used + 4) = 0;\u000a          *(undefined4 *)&table->n_entries = 0;\u000a          *(undefined4 *)((long)&table->n_entries + 4) = 0;\u000a          table->hasher = pcVar3;\u000a          table->comparator = pcVar4;\u000a          table->data_freer = data_freer;\u000a          table->free_entry_list = (hash_entry *)0x0;\u000a          return table;\u000a        }\u000a      }\u000a    }\u000a    free(table);\u000a  }\u000a  return (Hash_table *)0x0;\u000a}\u000a\u000a
p598
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R13,R8\nMOV R12,RSI\nMOV R15,RDI\nTEST RDX,RDX\nMOV EBP,0x406920\nCMOVNZ RBP,RDX\nTEST RCX,RCX\nMOV R14D,0x406940\nCMOVNZ R14,RCX\nMOV EDI,0x50\nCALL 0x00401a30\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00406905\nMOV qword ptr [RSP],R13\nTEST R12,R12\nMOV R13D,0x40c79c\nCMOVNZ R13,R12\nMOV qword ptr [RBX + 0x28],R13\nMOV RDI,RBX\nCALL 0x00406950\nTEST AL,AL\nJZ 0x004068fd\nMOV RDI,R15\nMOV RSI,R13\nCALL 0x004069d0\nMOV qword ptr [RBX + 0x10],RAX\nTEST RAX,RAX\nJZ 0x004068fd\nMOV ESI,0x10\nMOV RDI,RAX\nCALL 0x00409b90\nMOV qword ptr [RBX],RAX\nTEST RAX,RAX\nJZ 0x004068fd\nMOV RCX,qword ptr [RBX + 0x10]\nSHL RCX,0x4\nADD RAX,RCX\nMOV qword ptr [RBX + 0x8],RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX + 0x18],XMM0\nMOV qword ptr [RBX + 0x30],RBP\nMOV qword ptr [RBX + 0x38],R14\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX + 0x40],RAX\nMOV qword ptr [RBX + 0x48],0x0\nJMP 0x00406907\nMOV RDI,RBX\nCALL 0x00401750\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p599
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 c5\n49 89 f4\n49 89 ff\n48 85 d2\nbd 20 69 40 00\n48 0f 45 ea\n48 85 c9\n41 be 40 69 40 00\n4c 0f 45 f1\nbf 50 00 00 00\ne8 b9 b1 ff ff\n48 89 c3\n48 85 db\n0f 84 82 00 00 00\n4c 89 2c 24\n4d 85 e4\n41 bd 9c c7 40 00\n4d 0f 45 ec\n4c 89 6b 28\n48 89 df\ne8 b0 00 00 00\n84 c0\n74 59\n4c 89 ff\n4c 89 ee\ne8 21 01 00 00\n48 89 43 10\n48 85 c0\n74 45\nbe 10 00 00 00\n48 89 c7\ne8 cb 32 00 00\n48 89 03\n48 85 c0\n74 30\n48 8b 4b 10\n48 c1 e1 04\n48 01 c8\n48 89 43 08\n0f 57 c0\n0f 11 43 18\n48 89 6b 30\n4c 89 73 38\n48 8b 04 24\n48 89 43 40\n48 c7 43 48 00 00 00 00\neb 0a\n48 89 df\ne8 4b ae ff ff\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p600
S'.text:0000000000406840\n.text:0000000000406841\n.text:0000000000406843\n.text:0000000000406845\n.text:0000000000406847\n.text:0000000000406849\n.text:000000000040684a\n.text:000000000040684b\n.text:000000000040684e\n.text:0000000000406851\n.text:0000000000406854\n.text:0000000000406857\n.text:000000000040685c\n.text:0000000000406860\n.text:0000000000406863\n.text:0000000000406869\n.text:000000000040686d\n.text:0000000000406872\n.text:0000000000406877\n.text:000000000040687a\n.text:000000000040687d\n.text:0000000000406883\n.text:0000000000406887\n.text:000000000040688a\n.text:0000000000406890\n.text:0000000000406894\n.text:0000000000406898\n.text:000000000040689b\n.text:00000000004068a0\n.text:00000000004068a2\n.text:00000000004068a4\n.text:00000000004068a7\n.text:00000000004068aa\n.text:00000000004068af\n.text:00000000004068b3\n.text:00000000004068b6\n.text:00000000004068b8\n.text:00000000004068bd\n.text:00000000004068c0\n.text:00000000004068c5\n.text:00000000004068c8\n.text:00000000004068cb\n.text:00000000004068cd\n.text:00000000004068d1\n.text:00000000004068d5\n.text:00000000004068d8\n.text:00000000004068dc\n.text:00000000004068df\n.text:00000000004068e3\n.text:00000000004068e7\n.text:00000000004068eb\n.text:00000000004068ef\n.text:00000000004068f3\n.text:00000000004068fb\n.text:00000000004068fd\n.text:0000000000406900\n.text:0000000000406905\n.text:0000000000406907\n.text:000000000040690a\n.text:000000000040690e\n.text:000000000040690f\n.text:0000000000406911\n.text:0000000000406913\n.text:0000000000406915\n.text:0000000000406917\n.text:0000000000406918\n'
p601
tp602
sS'xrealloc'
p603
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p604
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p605
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00409527\nTEST RBX,RBX\nJNZ 0x00409527\nCALL 0x00401750\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401ab0\nTEST RBX,RBX\nJZ 0x00409539\nTEST RAX,RAX\nJZ 0x0040953b\nPOP RBX\nRET\nCALL 0x00409660\n'
p606
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 2d 82 ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 81 85 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p607
S'.text:0000000000409510\n.text:0000000000409511\n.text:0000000000409514\n.text:0000000000409517\n.text:0000000000409519\n.text:000000000040951c\n.text:000000000040951e\n.text:0000000000409523\n.text:0000000000409525\n.text:0000000000409526\n.text:0000000000409527\n.text:000000000040952a\n.text:000000000040952f\n.text:0000000000409532\n.text:0000000000409534\n.text:0000000000409537\n.text:0000000000409539\n.text:000000000040953a\n.text:000000000040953b\n'
p608
tp609
sS'parse_options'
p610
(S'\n__stdcall parse_options(char * * argv, uintmax_t * n_units, header_mode * header_mode, double * sleep_interval)\n'
p611
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000avoid parse_options(char **argv,uintmax_t *n_units,header_mode *header_mode,double *sleep_interval)\u000a\u000a{\u000a  uint uVar1;\u000a  bool bVar2;\u000a  _Bool _Var3;\u000a  uint __fd;\u000a  int iVar4;\u000a  ptrdiff_t pVar5;\u000a  char *n_str;\u000a  char *err;\u000a  uintmax_t uVar6;\u000a  int *piVar7;\u000a  undefined8 uVar8;\u000a  uint *puVar9;\u000a  char *unaff_RBX;\u000a  ulong uVar10;\u000a  uintmax_t *read_pos;\u000a  File_spec *f;\u000a  double *in_R8;\u000a  stat *psStack256;\u000a  undefined auStack248 [24];\u000a  ushort uStack224;\u000a  long lStack112;\u000a  char *pcStack104;\u000a  char *pcStack96;\u000a  double *pdStack88;\u000a  ulong uStack80;\u000a  double local_40;\u000a  double *local_38;\u000a  \u000a  uVar10 = (ulong)argv & 0xffffffff;\u000a  pcStack104 = unaff_RBX;\u000a  local_38 = in_R8;\u000a  uStack80 = 0x4026d7;\u000a  read_pos = n_units;\u000a  __fd = getopt_long(uVar10,n_units,"c:n:fFqs:vz0123456789",long_options,0);\u000a  n_str = optarg;\u000a  switch(__fd) {\u000a  case 0x30:\u000a  case 0x31:\u000a  case 0x32:\u000a  case 0x33:\u000a  case 0x34:\u000a  case 0x35:\u000a  case 0x36:\u000a  case 0x37:\u000a  case 0x38:\u000a  case 0x39:\u000a    uStack80 = 0x4029ce;\u000a    uVar8 = dcgettext(0,"option used in invalid context -- %c",5);\u000a    uStack80 = 0x4029e5;\u000a    error(1,0,uVar8,(ulong)__fd);\u000a  default:\u000a    uStack80 = 0x4029ef;\u000a    usage(1);\u000a  case 0xffffff7d:\u000a    pdStack88 = (double *)0x0;\u000a    pcStack96 = "Jim Meyering";\u000a    pcStack104 = "Ian Lance Taylor";\u000a    lStack112 = 0x402a2d;\u000a    version_etc(stdout,"tail","GNU coreutils",Version,"Paul Rubin","David MacKenzie");\u000a                    /* WARNING: Subroutine does not return */\u000a    uStack80 = 0x402a38;\u000a    exit(0);\u000a  case 0x46:\u000a    forever = true;\u000a    follow_mode = Follow_name;\u000a    reopen_inaccessible_files = 1;\u000a    break;\u000a  case 99:\u000a  case 0x6e:\u000a    count_lines = (_Bool)(__fd == 0x6e);\u000a    if (*optarg == '-') {\u000a      optarg = optarg + 1;\u000a    }\u000a    else {\u000a      if (*optarg == '+') {\u000a        from_start = true;\u000a      }\u000a    }\u000a    pcStack104 = optarg;\u000a    n_str = "invalid number of bytes";\u000a    if ((bool)count_lines) {\u000a      n_str = "invalid number of lines";\u000a    }\u000a    uStack80 = 0x402698;\u000a    n_str = (char *)dcgettext(0,n_str,5);\u000a    uStack80 = 0x4026b4;\u000a    uVar6 = xdectoumax(pcStack104,0,0xffffffffffffffff,"bkKmMGTPEZY0",n_str);\u000a    *(uintmax_t *)header_mode = uVar6;\u000a    break;\u000a  case 0x66:\u000a  case 0x84:\u000a    forever = true;\u000a    if (optarg == (char *)0x0) {\u000a      follow_mode = Follow_descriptor;\u000a    }\u000a    else {\u000a      uStack80 = 0x40275e;\u000a      pVar5 = __xargmatch_internal\u000a                        ("--follow",optarg,follow_mode_string,(char *)follow_mode_map,4,argmatch_die\u000a                        );\u000a      follow_mode = follow_mode_map[pVar5];\u000a    }\u000a    break;\u000a  case 0x71:\u000a    *(undefined4 *)sleep_interval = 2;\u000a    break;\u000a  case 0x73:\u000a    uStack80 = 0x4027b1;\u000a    _Var3 = xstrtod(optarg,(char **)0x0,&local_40,c_strtod);\u000a    if ((_Var3 == false) || (local_40 < _DAT_0040a718)) {\u000a      uStack80 = 0x4027d7;\u000a      pcStack104 = (char *)dcgettext(0,"invalid number of seconds: %s",5);\u000a      uStack80 = 0x4027e6;\u000a      n_str = quote(optarg);\u000a      uStack80 = 0x4027fa;\u000a      error(1,0,pcStack104,n_str);\u000a    }\u000a    *local_38 = local_40;\u000a    break;\u000a  case 0x76:\u000a    *(undefined4 *)sleep_interval = 1;\u000a    break;\u000a  case 0x7a:\u000a    line_end = 0;\u000a    break;\u000a  case 0x80:\u000a    reopen_inaccessible_files = 1;\u000a    break;\u000a  case 0x81:\u000a    uStack80 = 0x402848;\u000a    err = (char *)dcgettext(0,"invalid maximum number of unchanged stats between opens",5);\u000a    uStack80 = 0x402864;\u000a    max_n_unchanged_stats_between_opens =\u000a         xdectoumax(n_str,0,0xffffffffffffffff,\u000a                                        \u000a                    "\u005cnNUM may have a multiplier suffix:\u005cnb 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024,\u005cnGB 1000*1000*1000, G 1024*1024*1024, and so on for T, P, E, Z, Y.\u005cn\u005cn"\u000a                    + 0x99,err);\u000a    pcStack104 = n_str;\u000a    break;\u000a  case 0x82:\u000a    uStack80 = 0x402888;\u000a    err = (char *)dcgettext(0,"invalid PID",5);\u000a    uStack80 = 0x4028a2;\u000a    uVar6 = xdectoumax(n_str,0,0x7fffffff,\u000a                                              \u000a                       "\u005cnNUM may have a multiplier suffix:\u005cnb 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024,\u005cnGB 1000*1000*1000, G 1024*1024*1024, and so on for T, P, E, Z, Y.\u005cn\u005cn"\u000a                       + 0x99,err);\u000a    pid = (pid_t)uVar6;\u000a    pcStack104 = n_str;\u000a    break;\u000a  case 0x83:\u000a    presume_input_pipe = 1;\u000a    break;\u000a  case 0x85:\u000a    disable_inotify = 1;\u000a    break;\u000a  case 0xffffff7e:\u000a    f = (File_spec *)0x0;\u000a    uStack80 = 0x402a3f;\u000a    usage();\u000a    if ((*f->name == '-') && (f->name[1] == 0)) {\u000a      have_read_stdin = 1;\u000a      __fd = 0;\u000a      bVar2 = true;\u000a      pcStack96 = (char *)n_units;\u000a      pdStack88 = sleep_interval;\u000a      uStack80 = uVar10;\u000a    }\u000a    else {\u000a      bVar2 = false;\u000a      pcStack96 = (char *)n_units;\u000a      pdStack88 = sleep_interval;\u000a      uStack80 = uVar10;\u000a      __fd = open_safer(f->name);\u000a    }\u000a    f->tailable = __fd != 0xffffffff | ~reopen_inaccessible_files & 1;\u000a    _Var3 = forever;\u000a    if (__fd == 0xffffffff) {\u000a      puVar9 = (uint *)__errno_location();\u000a      if (_Var3 != false) {\u000a        f->fd = -1;\u000a        f->errnum = *puVar9;\u000a        f->ignore = false;\u000a        *(undefined4 *)&f->dev = 0;\u000a        *(undefined4 *)((long)&f->dev + 4) = 0;\u000a        *(undefined4 *)&f->ino = 0;\u000a        *(undefined4 *)((long)&f->ino + 4) = 0;\u000a      }\u000a      __fd = *puVar9;\u000a      n_str = "cannot open %s for reading";\u000aLAB_00402b67:\u000a      uVar8 = dcgettext(0,n_str,5);\u000a      pretty_name(f);\u000a      n_str = quotearg_style((char *)0x4);\u000a      error(0,(ulong)__fd,uVar8,n_str);\u000a      return;\u000a    }\u000a    if (print_headers == 1) {\u000a      n_str = pretty_name(f);\u000a      write_header(n_str);\u000a    }\u000a    n_str = pretty_name(f);\u000a    _Var3 = tail(n_str,(ulong)__fd,read_pos);\u000a    if (forever == false) {\u000a      if (bVar2) {\u000a        return;\u000a      }\u000a      iVar4 = close(__fd);\u000a      if (iVar4 == 0) {\u000a        return;\u000a      }\u000a      puVar9 = (uint *)__errno_location();\u000a      __fd = *puVar9;\u000a      n_str = "error reading %s";\u000a      goto LAB_00402b67;\u000a    }\u000a    f->errnum = -((uint)(byte)~_Var3 & 1);\u000a    iVar4 = fstat(__fd,(stat *)auStack248);\u000a    if (iVar4 < 0) {\u000a      puVar9 = (uint *)__errno_location();\u000a      f->errnum = *puVar9;\u000a      uVar1 = *puVar9;\u000a      uVar8 = dcgettext(0,"error reading %s",5);\u000a      pretty_name(f);\u000a      n_str = quotearg_style((char *)0x4);\u000a      error(0,(ulong)uVar1,uVar8,n_str);\u000a      goto LAB_00402cc7;\u000a    }\u000a    uStack224 = uStack224 & 0xf000;\u000a    if ((short)uStack224 < 0x1000) {\u000a      if ((uStack224 == 0x8000) || (uStack224 == 0xc000)) {\u000aLAB_00402c38:\u000a        if (_Var3 != false) {\u000a          record_open_fd(f,(ulong)__fd,psStack256);\u000a          pretty_name(f);\u000a          _Var3 = fremote((char *)(ulong)__fd);\u000a          f->remote = _Var3;\u000a          return;\u000a        }\u000a        goto LAB_00402cc7;\u000a      }\u000a    }\u000a    else {\u000a      if ((uStack224 == 0x1000) || (uStack224 == 0x2000)) goto LAB_00402c38;\u000a    }\u000a    uVar8 = dcgettext(0,"%s: cannot follow end of this type of file; giving up on this name",5);\u000a    pretty_name(f);\u000a    n_str = quotearg_n_style_colon((char *)0x0);\u000a    error(0,0,uVar8,n_str);\u000a    f->errnum = -1;\u000a    f->ignore = true;\u000aLAB_00402cc7:\u000a    pretty_name(f);\u000a    close_fd((char *)(ulong)__fd);\u000a    f->fd = -1;\u000a    return;\u000a  case 0xffffffff:\u000a    if (reopen_inaccessible_files == 1) {\u000a      if (forever == false) {\u000a        reopen_inaccessible_files = 0;\u000a        n_str = "warning: --retry ignored; --retry is useful only when following";\u000a      }\u000a      else {\u000a        if (follow_mode != Follow_descriptor) goto LAB_00402931;\u000a        n_str = "warning: --retry only effective for the initial open";\u000a      }\u000a      uStack80 = 0x402920;\u000a      uVar8 = dcgettext(0,n_str,5);\u000a      uStack80 = 0x402931;\u000a      error(0,0,uVar8,uVar8);\u000a    }\u000aLAB_00402931:\u000a    if ((pid == 0) || (forever != false)) {\u000a      if (pid != 0) {\u000a        uStack80 = 0x402974;\u000a        iVar4 = kill(pid,0);\u000a        if (iVar4 != 0) {\u000a          uStack80 = 0x40297d;\u000a          piVar7 = __errno_location();\u000a          if (*piVar7 == 0x26) {\u000a            uStack80 = 0x402993;\u000a            uVar8 = dcgettext(0,"warning: --pid=PID is not supported on this system",5);\u000a            uStack80 = 0x4029a4;\u000a            error(0,0,uVar8,uVar8);\u000a            pid = 0;\u000a          }\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      uStack80 = 0x402956;\u000a      uVar8 = dcgettext(0,"warning: PID ignored; --pid=PID is useful only when following",5);\u000a      uStack80 = 0x402967;\u000a      error(0,0,uVar8,uVar8);\u000a    }\u000a    return;\u000a  }\u000a}\u000a\u000a
p612
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV qword ptr [RSP + 0x10],R8\nMOV R15,RCX\nMOV R12,RDX\nMOV R14,RSI\nMOV EBP,EDI\nJMP 0x004026c0\nMOV RBX,qword ptr [0x00610318]\nCMP byte ptr [0x0061034d],0x0\nMOV ESI,0x40bf8f\nMOV EAX,0x40bf77\nCMOVNZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00401840\nXOR ESI,ESI\nMOV RDX,-0x1\nMOV ECX,0x40bf6a\nXOR R9D,R9D\nMOV RDI,RBX\nMOV R8,RAX\nCALL 0x00409760\nMOV qword ptr [R12],RAX\nNOP dword ptr [RAX + RAX*0x1]\nMOV EDX,0x40bf54\nMOV ECX,0x40b100\nXOR R8D,R8D\nMOV EDI,EBP\nMOV RSI,R14\nCALL 0x00401880\nMOV R13D,EAX\nLEA EAX,[0x83 + R13]\nCMP EAX,0x108\nJA 0x004029e5\nJMP qword ptr [0x40a730 + RAX*0x8]\nCMP R13D,0x6e\nSETZ byte ptr [0x0061034d]\nMOV RAX,qword ptr [0x00610318]\nMOVZX ECX,byte ptr [RAX]\nCMP CL,0x2d\nJZ 0x004028d5\nCMP CL,0x2b\nJNZ 0x00402670\nMOV byte ptr [0x0061034f],0x1\nJMP 0x00402670\nMOV byte ptr [0x00610350],0x1\nMOV RSI,qword ptr [0x00610318]\nTEST RSI,RSI\nJZ 0x004028c5\nMOV R9,qword ptr [0x00610290]\nMOV EDI,0x40bfa7\nMOV EDX,0x40b310\nMOV ECX,0x40b300\nMOV R8D,0x4\nCALL 0x00405fe0\nMOV EAX,dword ptr [0x40b300 + RAX*0x4]\nMOV dword ptr [0x00610278],EAX\nJMP 0x004026c0\nMOV byte ptr [0x00610350],0x1\nMOV dword ptr [0x00610278],0x1\nMOV byte ptr [0x00610353],0x1\nJMP 0x004026c0\nMOV dword ptr [R15],0x2\nJMP 0x004026c0\nMOV RDI,qword ptr [0x00610318]\nXOR ESI,ESI\nMOV ECX,0x4060c0\nLEA RDX,[RSP + 0x8]\nCALL 0x00409810\nTEST AL,AL\nJZ 0x004027c6\nMOVSD XMM0,qword ptr [RSP + 0x8]\nUCOMISD XMM0,qword ptr [0x0040a718]\nJNC 0x004027fa\nXOR EDI,EDI\nMOV ESI,0x40bff4\nMOV EDX,0x5\nCALL 0x00401840\nMOV RBX,RAX\nMOV RDI,qword ptr [0x00610318]\nCALL 0x004089d0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401af0\nMOV RAX,qword ptr [RSP + 0x8]\nMOV RCX,qword ptr [RSP + 0x10]\nMOV qword ptr [RCX],RAX\nJMP 0x004026c0\nMOV dword ptr [R15],0x1\nJMP 0x004026c0\nMOV byte ptr [0x00610351],0x0\nJMP 0x004026c0\nMOV byte ptr [0x00610353],0x1\nJMP 0x004026c0\nMOV RBX,qword ptr [0x00610318]\nXOR EDI,EDI\nMOV ESI,0x40bfb0\nMOV EDX,0x5\nCALL 0x00401840\nXOR ESI,ESI\nMOV RDX,-0x1\nMOV ECX,0x40bae8\nXOR R9D,R9D\nMOV RDI,RBX\nMOV R8,RAX\nCALL 0x00409760\nMOV qword ptr [0x00610280],RAX\nJMP 0x004026c0\nMOV RBX,qword ptr [0x00610318]\nXOR EDI,EDI\nMOV ESI,0x40bfe8\nMOV EDX,0x5\nCALL 0x00401840\nXOR ESI,ESI\nMOV EDX,0x7fffffff\nMOV ECX,0x40bae8\nXOR R9D,R9D\nMOV RDI,RBX\nMOV R8,RAX\nCALL 0x00409760\nMOV dword ptr [0x00610354],EAX\nJMP 0x004026c0\nMOV byte ptr [0x00610358],0x1\nJMP 0x004026c0\nMOV byte ptr [0x00610352],0x1\nJMP 0x004026c0\nMOV EAX,0x2\nMOV dword ptr [0x00610278],EAX\nJMP 0x004026c0\nINC RAX\nMOV qword ptr [0x00610318],RAX\nJMP 0x00402670\nCMP byte ptr [0x00610353],0x1\nJNZ 0x00402931\nCMP byte ptr [0x00610350],0x0\nJZ 0x00402908\nCMP dword ptr [0x00610278],0x2\nJNZ 0x00402931\nXOR EDI,EDI\nMOV ESI,0x40c0b0\nJMP 0x00402916\nMOV byte ptr [0x00610353],0x0\nXOR EDI,EDI\nMOV ESI,0x40c070\nMOV EDX,0x5\nCALL 0x00401840\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401af0\nMOV EDI,dword ptr [0x00610354]\nTEST EDI,EDI\nJZ 0x00402969\nMOV AL,byte ptr [0x00610350]\nTEST AL,AL\nJNZ 0x00402969\nXOR EDI,EDI\nMOV ESI,0x40c0e5\nMOV EDX,0x5\nCALL 0x00401840\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401af0\nJMP 0x004029ae\nTEST EDI,EDI\nJZ 0x004029ae\nXOR ESI,ESI\nCALL 0x004019d0\nTEST EAX,EAX\nJZ 0x004029ae\nCALL 0x00401770\nCMP dword ptr [RAX],0x26\nJNZ 0x004029ae\nXOR EDI,EDI\nMOV ESI,0x40c123\nMOV EDX,0x5\nCALL 0x00401840\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401af0\nMOV dword ptr [0x00610354],0x0\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x40c04b\nMOV EDX,0x5\nCALL 0x00401840\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV ECX,R13D\nCALL 0x00401af0\nMOV EDI,0x1\nCALL 0x00401ce0\nMOV RDI,qword ptr [0x00610308]\nMOV RCX,qword ptr [0x00610288]\nSUB RSP,0x8\nMOV ESI,0x40bc9e\nMOV EDX,0x40be6b\nMOV R8D,0x40c012\nMOV R9D,0x40c01d\nMOV EAX,0x0\nPUSH 0x0\nPUSH 0x40c03e\nPUSH 0x40c02d\nCALL 0x004093a0\nADD RSP,0x20\nXOR EDI,EDI\nCALL 0x00401b60\nXOR EDI,EDI\nCALL 0x00401ce0\nNOP\n'
p613
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4c 89 44 24 10\n49 89 cf\n49 89 d4\n49 89 f6\n89 fd\neb 50\n48 8b 1d a1 dc 20 00\n80 3d cf dc 20 00 00\nbe 8f bf 40 00\nb8 77 bf 40 00\n48 0f 45 f0\n31 ff\nba 05 00 00 00\ne8 a8 f1 ff ff\n31 f6\n48 c7 c2 ff ff ff ff\nb9 6a bf 40 00\n45 31 c9\n48 89 df\n49 89 c0\ne8 ac 70 00 00\n49 89 04 24\n0f 1f 84 00 00 00 00 00\nba 54 bf 40 00\nb9 00 b1 40 00\n45 31 c0\n89 ef\n4c 89 f6\ne8 a9 f1 ff ff\n41 89 c5\n41 8d 85 83 00 00 00\n3d 08 01 00 00\n0f 87 f9 02 00 00\nff 24 c5 30 a7 40 00\n41 83 fd 6e\n0f 94 05 4f dc 20 00\n48 8b 05 13 dc 20 00\n0f b6 08\n80 f9 2d\n0f 84 c4 01 00 00\n80 f9 2b\n0f 85 56 ff ff ff\nc6 05 2e dc 20 00 01\ne9 4a ff ff ff\nc6 05 23 dc 20 00 01\n48 8b 35 e4 db 20 00\n48 85 f6\n0f 84 88 01 00 00\n4c 8b 0d 4c db 20 00\nbf a7 bf 40 00\nba 10 b3 40 00\nb9 00 b3 40 00\n41 b8 04 00 00 00\ne8 82 38 00 00\n8b 04 85 00 b3 40 00\n89 05 0d db 20 00\ne9 50 ff ff ff\nc6 05 d9 db 20 00 01\nc7 05 f7 da 20 00 01 00 00 00\nc6 05 cb db 20 00 01\ne9 33 ff ff ff\n41 c7 07 02 00 00 00\ne9 27 ff ff ff\n48 8b 3d 78 db 20 00\n31 f6\nb9 c0 60 40 00\n48 8d 54 24 08\ne8 5f 70 00 00\n84 c0\n74 11\nf2 0f 10 44 24 08\n66 0f 2e 04 25 18 a7 40 00\n73 34\n31 ff\nbe f4 bf 40 00\nba 05 00 00 00\ne8 69 f0 ff ff\n48 89 c3\n48 8b 3d 37 db 20 00\ne8 ea 61 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 da\ne8 f6 f2 ff ff\n48 8b 44 24 08\n48 8b 4c 24 10\n48 89 01\ne9 b4 fe ff ff\n41 c7 07 01 00 00 00\ne9 a8 fe ff ff\nc6 05 32 db 20 00 00\ne9 9c fe ff ff\nc6 05 28 db 20 00 01\ne9 90 fe ff ff\n48 8b 1d e1 da 20 00\n31 ff\nbe b0 bf 40 00\nba 05 00 00 00\ne8 f8 ef ff ff\n31 f6\n48 c7 c2 ff ff ff ff\nb9 e8 ba 40 00\n45 31 c9\n48 89 df\n49 89 c0\ne8 fc 6e 00 00\n48 89 05 15 da 20 00\ne9 50 fe ff ff\n48 8b 1d a1 da 20 00\n31 ff\nbe e8 bf 40 00\nba 05 00 00 00\ne8 b8 ef ff ff\n31 f6\nba ff ff ff 7f\nb9 e8 ba 40 00\n45 31 c9\n48 89 df\n49 89 c0\ne8 be 6e 00 00\n89 05 ac da 20 00\ne9 13 fe ff ff\nc6 05 a4 da 20 00 01\ne9 07 fe ff ff\nc6 05 92 da 20 00 01\ne9 fb fd ff ff\nb8 02 00 00 00\n89 05 a8 d9 20 00\ne9 eb fd ff ff\n48 ff c0\n48 89 05 39 da 20 00\ne9 8c fd ff ff\n80 3d 68 da 20 00 01\n75 44\n80 3d 5c da 20 00 00\n74 12\n83 3d 7b d9 20 00 02\n75 32\n31 ff\nbe b0 c0 40 00\neb 0e\nc6 05 44 da 20 00 00\n31 ff\nbe 70 c0 40 00\nba 05 00 00 00\ne8 20 ef ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 bf f1 ff ff\n8b 3d 1d da 20 00\n85 ff\n74 2e\n8a 05 0f da 20 00\n84 c0\n75 24\n31 ff\nbe e5 c0 40 00\nba 05 00 00 00\ne8 ea ee ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 89 f1 ff ff\neb 45\n85 ff\n74 41\n31 f6\ne8 5c f0 ff ff\n85 c0\n74 36\ne8 f3 ed ff ff\n83 38 26\n75 2c\n31 ff\nbe 23 c1 40 00\nba 05 00 00 00\ne8 ad ee ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 4c f1 ff ff\nc7 05 a6 d9 20 00 00 00 00 00\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 ff\nbe 4b c0 40 00\nba 05 00 00 00\ne8 72 ee ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\n44 89 e9\ne8 0b f1 ff ff\nbf 01 00 00 00\ne8 f1 f2 ff ff\n48 8b 3d 12 d9 20 00\n48 8b 0d 8b d8 20 00\n48 83 ec 08\nbe 9e bc 40 00\nba 6b be 40 00\n41 b8 12 c0 40 00\n41 b9 1d c0 40 00\nb8 00 00 00 00\n6a 00\n68 3e c0 40 00\n68 2d c0 40 00\ne8 73 69 00 00\n48 83 c4 20\n31 ff\ne8 28 f1 ff ff\n31 ff\ne8 a1 f2 ff ff\n90\n'
p614
S'.text:0000000000402650\n.text:0000000000402651\n.text:0000000000402653\n.text:0000000000402655\n.text:0000000000402657\n.text:0000000000402659\n.text:000000000040265a\n.text:000000000040265e\n.text:0000000000402663\n.text:0000000000402666\n.text:0000000000402669\n.text:000000000040266c\n.text:000000000040266e\n.text:0000000000402670\n.text:0000000000402677\n.text:000000000040267e\n.text:0000000000402683\n.text:0000000000402688\n.text:000000000040268c\n.text:000000000040268e\n.text:0000000000402693\n.text:0000000000402698\n.text:000000000040269a\n.text:00000000004026a1\n.text:00000000004026a6\n.text:00000000004026a9\n.text:00000000004026ac\n.text:00000000004026af\n.text:00000000004026b4\n.text:00000000004026b8\n.text:00000000004026c0\n.text:00000000004026c5\n.text:00000000004026ca\n.text:00000000004026cd\n.text:00000000004026cf\n.text:00000000004026d2\n.text:00000000004026d7\n.text:00000000004026da\n.text:00000000004026e1\n.text:00000000004026e6\n.text:00000000004026ec\n.text:00000000004026f3\n.text:00000000004026f7\n.text:00000000004026fe\n.text:0000000000402705\n.text:0000000000402708\n.text:000000000040270b\n.text:0000000000402711\n.text:0000000000402714\n.text:000000000040271a\n.text:0000000000402721\n.text:0000000000402726\n.text:000000000040272d\n.text:0000000000402734\n.text:0000000000402737\n.text:000000000040273d\n.text:0000000000402744\n.text:0000000000402749\n.text:000000000040274e\n.text:0000000000402753\n.text:0000000000402759\n.text:000000000040275e\n.text:0000000000402765\n.text:000000000040276b\n.text:0000000000402770\n.text:0000000000402777\n.text:0000000000402781\n.text:0000000000402788\n.text:000000000040278d\n.text:0000000000402794\n.text:0000000000402799\n.text:00000000004027a0\n.text:00000000004027a2\n.text:00000000004027a7\n.text:00000000004027ac\n.text:00000000004027b1\n.text:00000000004027b3\n.text:00000000004027b5\n.text:00000000004027bb\n.text:00000000004027c4\n.text:00000000004027c6\n.text:00000000004027c8\n.text:00000000004027cd\n.text:00000000004027d2\n.text:00000000004027d7\n.text:00000000004027da\n.text:00000000004027e1\n.text:00000000004027e6\n.text:00000000004027e9\n.text:00000000004027ee\n.text:00000000004027f0\n.text:00000000004027f2\n.text:00000000004027f5\n.text:00000000004027fa\n.text:00000000004027ff\n.text:0000000000402804\n.text:0000000000402807\n.text:000000000040280c\n.text:0000000000402813\n.text:0000000000402818\n.text:000000000040281f\n.text:0000000000402824\n.text:000000000040282b\n.text:0000000000402830\n.text:0000000000402837\n.text:0000000000402839\n.text:000000000040283e\n.text:0000000000402843\n.text:0000000000402848\n.text:000000000040284a\n.text:0000000000402851\n.text:0000000000402856\n.text:0000000000402859\n.text:000000000040285c\n.text:000000000040285f\n.text:0000000000402864\n.text:000000000040286b\n.text:0000000000402870\n.text:0000000000402877\n.text:0000000000402879\n.text:000000000040287e\n.text:0000000000402883\n.text:0000000000402888\n.text:000000000040288a\n.text:000000000040288f\n.text:0000000000402894\n.text:0000000000402897\n.text:000000000040289a\n.text:000000000040289d\n.text:00000000004028a2\n.text:00000000004028a8\n.text:00000000004028ad\n.text:00000000004028b4\n.text:00000000004028b9\n.text:00000000004028c0\n.text:00000000004028c5\n.text:00000000004028ca\n.text:00000000004028d0\n.text:00000000004028d5\n.text:00000000004028d8\n.text:00000000004028df\n.text:00000000004028e4\n.text:00000000004028eb\n.text:00000000004028ed\n.text:00000000004028f4\n.text:00000000004028f6\n.text:00000000004028fd\n.text:00000000004028ff\n.text:0000000000402901\n.text:0000000000402906\n.text:0000000000402908\n.text:000000000040290f\n.text:0000000000402911\n.text:0000000000402916\n.text:000000000040291b\n.text:0000000000402920\n.text:0000000000402923\n.text:0000000000402925\n.text:0000000000402927\n.text:0000000000402929\n.text:000000000040292c\n.text:0000000000402931\n.text:0000000000402937\n.text:0000000000402939\n.text:000000000040293b\n.text:0000000000402941\n.text:0000000000402943\n.text:0000000000402945\n.text:0000000000402947\n.text:000000000040294c\n.text:0000000000402951\n.text:0000000000402956\n.text:0000000000402959\n.text:000000000040295b\n.text:000000000040295d\n.text:000000000040295f\n.text:0000000000402962\n.text:0000000000402967\n.text:0000000000402969\n.text:000000000040296b\n.text:000000000040296d\n.text:000000000040296f\n.text:0000000000402974\n.text:0000000000402976\n.text:0000000000402978\n.text:000000000040297d\n.text:0000000000402980\n.text:0000000000402982\n.text:0000000000402984\n.text:0000000000402989\n.text:000000000040298e\n.text:0000000000402993\n.text:0000000000402996\n.text:0000000000402998\n.text:000000000040299a\n.text:000000000040299c\n.text:000000000040299f\n.text:00000000004029a4\n.text:00000000004029ae\n.text:00000000004029b2\n.text:00000000004029b3\n.text:00000000004029b5\n.text:00000000004029b7\n.text:00000000004029b9\n.text:00000000004029bb\n.text:00000000004029bc\n.text:00000000004029bd\n.text:00000000004029bf\n.text:00000000004029c4\n.text:00000000004029c9\n.text:00000000004029ce\n.text:00000000004029d1\n.text:00000000004029d6\n.text:00000000004029d8\n.text:00000000004029da\n.text:00000000004029dd\n.text:00000000004029e0\n.text:00000000004029e5\n.text:00000000004029ea\n.text:00000000004029ef\n.text:00000000004029f6\n.text:00000000004029fd\n.text:0000000000402a01\n.text:0000000000402a06\n.text:0000000000402a0b\n.text:0000000000402a11\n.text:0000000000402a17\n.text:0000000000402a1c\n.text:0000000000402a1e\n.text:0000000000402a23\n.text:0000000000402a28\n.text:0000000000402a2d\n.text:0000000000402a31\n.text:0000000000402a33\n.text:0000000000402a38\n.text:0000000000402a3a\n.text:0000000000402a3f\n'
p615
tp616
sS'close_stdout'
p617
(S'\n__stdcall close_stdout()\n'
p618
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00406177;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,&DAT_0040c6e4,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00406177:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p619
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x00610308]\nCALL 0x0040a070\nTEST EAX,EAX\nJZ 0x00406177\nCMP byte ptr [0x00610370],0x0\nJZ 0x0040618c\nCALL 0x00401770\nCMP dword ptr [RAX],0x20\nJNZ 0x0040618c\nMOV RDI,qword ptr [0x00610340]\nCALL 0x0040a070\nTEST EAX,EAX\nJNZ 0x004061d1\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x40bd12\nMOV EDX,0x5\nCALL 0x00401840\nMOV R14,RAX\nMOV RBX,qword ptr [0x00610368]\nCALL 0x00401770\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x004061dc\nXOR EDI,EDI\nMOV EDX,0x40c6e4\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00401af0\nMOV EDI,dword ptr [0x00610298]\nCALL 0x00401790\nMOV EDI,dword ptr [0x00610298]\nCALL 0x00401790\nMOV RDI,RBX\nCALL 0x00408870\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40bf3e\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00401af0\nMOV EDI,dword ptr [0x00610298]\nCALL 0x00401790\n'
p620
S'55\n41 56\n53\n48 8b 3d ad a1 20 00\ne8 10 3f 00 00\n85 c0\n74 13\n80 3d 05 a2 20 00 00\n74 1f\ne8 fe b5 ff ff\n83 38 20\n75 15\n48 8b 3d c2 a1 20 00\ne8 ed 3e 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe 12 bd 40 00\nba 05 00 00 00\ne8 a3 b6 ff ff\n49 89 c6\n48 8b 1d c1 a1 20 00\ne8 c4 b5 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba e4 c6 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 2a b9 ff ff\n8b 3d cc a0 20 00\ne8 bf b5 ff ff\n8b 3d c1 a0 20 00\ne8 b4 b5 ff ff\n48 89 df\ne8 8c 26 00 00\n48 89 c1\n31 ff\nba 3e bf 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 f6 b8 ff ff\n8b 3d 98 a0 20 00\ne8 8b b5 ff ff\n'
p621
S'.text:0000000000406150\n.text:0000000000406151\n.text:0000000000406153\n.text:0000000000406154\n.text:000000000040615b\n.text:0000000000406160\n.text:0000000000406162\n.text:0000000000406164\n.text:000000000040616b\n.text:000000000040616d\n.text:0000000000406172\n.text:0000000000406175\n.text:0000000000406177\n.text:000000000040617e\n.text:0000000000406183\n.text:0000000000406185\n.text:0000000000406187\n.text:0000000000406188\n.text:000000000040618a\n.text:000000000040618b\n.text:000000000040618c\n.text:000000000040618e\n.text:0000000000406193\n.text:0000000000406198\n.text:000000000040619d\n.text:00000000004061a0\n.text:00000000004061a7\n.text:00000000004061ac\n.text:00000000004061af\n.text:00000000004061b1\n.text:00000000004061b3\n.text:00000000004061b5\n.text:00000000004061ba\n.text:00000000004061bc\n.text:00000000004061be\n.text:00000000004061c1\n.text:00000000004061c6\n.text:00000000004061cc\n.text:00000000004061d1\n.text:00000000004061d7\n.text:00000000004061dc\n.text:00000000004061df\n.text:00000000004061e4\n.text:00000000004061e7\n.text:00000000004061e9\n.text:00000000004061ee\n.text:00000000004061f0\n.text:00000000004061f2\n.text:00000000004061f5\n.text:00000000004061fa\n.text:0000000000406200\n'
p622
tp623
sS'version_etc_ar'
p624
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p625
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p626
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00409320\nJMP 0x00408fb0\n'
p627
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p628
S'.text:0000000000409310\n.text:0000000000409317\n.text:0000000000409320\n.text:0000000000409326\n.text:000000000040932a\n.text:000000000040932c\n'
p629
tp630
sS'strtoumax'
p631
(S'\n__stdcall strtoumax(char * __nptr, char * * __endptr, int __base)\n'
p632
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000auintmax_t strtoumax(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoumax_00610210)();\u000a  return uVar1;\u000a}\u000a\u000a
p633
S'JMP qword ptr [0x00610210]\n'
p634
S'ff 25 da e6 20 00\n'
p635
S'.plt:0000000000401b30\n'
p636
tp637
sS'check_fspec'
p638
(S'\n__stdcall check_fspec(File_spec * fspec, File_spec * * prev_fspec)\n'
p639
V\u000avoid check_fspec(File_spec *fspec,File_spec **prev_fspec)\u000a\u000a{\u000a  uint uVar1;\u000a  File_spec *pFVar2;\u000a  int iVar3;\u000a  char *pretty_filename;\u000a  int *piVar4;\u000a  undefined8 uVar5;\u000a  char *pcVar6;\u000a  uintmax_t uVar7;\u000a  uint *puVar8;\u000a  stat local_b0;\u000a  \u000a  if (fspec->fd == -1) {\u000a    return;\u000a  }\u000a  pretty_filename = pretty_name(fspec);\u000a  iVar3 = fstat(fspec->fd,(stat *)&local_b0);\u000a  if (iVar3 != 0) {\u000a    piVar4 = __errno_location();\u000a    fspec->errnum = *piVar4;\u000a    close_fd((char *)(ulong)(uint)fspec->fd);\u000a    fspec->fd = -1;\u000a    return;\u000a  }\u000a  if ((fspec->mode & 0xf000) == 0x8000) {\u000a    if (local_b0.st_size < fspec->size) {\u000a      uVar5 = dcgettext(0,"%s: file truncated",5);\u000a      pcVar6 = quotearg_n_style_colon((char *)0x0);\u000a      error(0,0,uVar5,pcVar6);\u000a      xlseek((ulong)(uint)fspec->fd,(char *)0x0);\u000a      fspec->size = 0;\u000a      pFVar2 = *prev_fspec;\u000a      goto joined_r0x00405c81;\u000a    }\u000a    if (local_b0.st_size == fspec->size) {\u000a      get_stat_mtime(&local_b0);\u000a      iVar3 = timespec_cmp();\u000a      if (iVar3 == 0) {\u000a        return;\u000a      }\u000a    }\u000a  }\u000a  pFVar2 = *prev_fspec;\u000ajoined_r0x00405c81:\u000a  if (pFVar2 != fspec) {\u000a    if (print_headers == 1) {\u000a      write_header(pretty_filename);\u000a    }\u000a    *prev_fspec = fspec;\u000a  }\u000a  uVar7 = dump_remainder(pretty_filename,(ulong)(uint)fspec->fd);\u000a  fspec->size = fspec->size + uVar7;\u000a  iVar3 = fflush_unlocked(stdout);\u000a  if (iVar3 != 0) {\u000a    puVar8 = (uint *)__errno_location();\u000a    uVar1 = *puVar8;\u000a    uVar5 = dcgettext(0,"write error",5);\u000a    error(1,(ulong)uVar1,uVar5,uVar5);\u000a  }\u000a  return;\u000a}\u000a\u000a
p640
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,RSI\nMOV RBX,RDI\nCMP dword ptr [RBX + 0x38],-0x1\nJZ 0x00405ce9\nMOV RDI,RBX\nCALL 0x00403d40\nMOV R14,RAX\nMOV EDI,dword ptr [RBX + 0x38]\nLEA RSI,[RSP + 0x8]\nCALL 0x0040a6e0\nTEST EAX,EAX\nJZ 0x00405beb\nCALL 0x00401770\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RBX + 0x3c],EAX\nMOV EDI,dword ptr [RBX + 0x38]\nMOV RSI,R14\nCALL 0x00403dd0\nMOV dword ptr [RBX + 0x38],0xffffffff\nJMP 0x00405ce9\nMOV EAX,0xf000\nAND EAX,dword ptr [RBX + 0x30]\nCMP EAX,0x8000\nJNZ 0x00405c7e\nMOV RAX,qword ptr [RBX + 0x8]\nCMP qword ptr [RSP + 0x38],RAX\nJGE 0x00405c5b\nXOR EDI,EDI\nMOV ESI,0x40c637\nMOV EDX,0x5\nCALL 0x00401840\nMOV R12,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R14\nCALL 0x00408890\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R12\nCALL 0x00401af0\nMOV EDI,dword ptr [RBX + 0x38]\nXOR ESI,ESI\nXOR EDX,EDX\nMOV RCX,R14\nCALL 0x00404720\nMOV qword ptr [RBX + 0x8],0x0\nCMP qword ptr [R15],RBX\nJNZ 0x00405c83\nJMP 0x00405c97\nJNZ 0x00405c7e\nLEA RDI,[RSP + 0x8]\nCALL 0x00408ed0\nMOV RCX,RDX\nMOV RDI,qword ptr [RBX + 0x10]\nMOV RSI,qword ptr [RBX + 0x18]\nMOV RDX,RAX\nCALL 0x00408f00\nTEST EAX,EAX\nJZ 0x00405ce9\nCMP qword ptr [R15],RBX\nJZ 0x00405c97\nCMP byte ptr [0x0061034e],0x1\nJNZ 0x00405c94\nMOV RDI,R14\nCALL 0x00403d70\nMOV qword ptr [R15],RBX\nMOV ESI,dword ptr [RBX + 0x38]\nMOV RDX,-0x1\nMOV RDI,R14\nCALL 0x00404370\nADD qword ptr [RBX + 0x8],RAX\nMOV RDI,qword ptr [0x00610308]\nCALL 0x00401b90\nTEST EAX,EAX\nJZ 0x00405ce9\nCALL 0x00401770\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40bd12\nMOV EDX,0x5\nCALL 0x00401840\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401af0\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p641
S'41 57\n41 56\n41 54\n53\n48 81 ec 98 00 00 00\n49 89 f7\n48 89 fb\n83 7b 38 ff\n0f 84 3b 01 00 00\n48 89 df\ne8 8a e1 ff ff\n49 89 c6\n8b 7b 38\n48 8d 74 24 08\ne8 1a 4b 00 00\n85 c0\n74 21\ne8 a1 bb ff ff\n8b 00\n89 43 3c\n8b 7b 38\n4c 89 f6\ne8 f1 e1 ff ff\nc7 43 38 ff ff ff ff\ne9 fe 00 00 00\nb8 00 f0 00 00\n23 43 30\n3d 00 80 00 00\n0f 85 80 00 00 00\n48 8b 43 08\n48 39 44 24 38\n7d 52\n31 ff\nbe 37 c6 40 00\nba 05 00 00 00\ne8 26 bc ff ff\n49 89 c4\n31 ff\nbe 03 00 00 00\n4c 89 f2\ne8 64 2c 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n4c 89 e2\ne8 b3 be ff ff\n8b 7b 38\n31 f6\n31 d2\n4c 89 f1\ne8 d4 ea ff ff\n48 c7 43 08 00 00 00 00\n49 39 1f\n75 2a\neb 3c\n75 21\n48 8d 7c 24 08\ne8 69 32 00 00\n48 89 d1\n48 8b 7b 10\n48 8b 73 18\n48 89 c2\ne8 86 32 00 00\n85 c0\n74 6b\n49 39 1f\n74 14\n80 3d c4 a6 20 00 01\n75 08\n4c 89 f7\ne8 dc e0 ff ff\n49 89 1f\n8b 73 38\n48 c7 c2 ff ff ff ff\n4c 89 f7\ne8 c7 e6 ff ff\n48 01 43 08\n48 8b 3d 54 a6 20 00\ne8 d7 be ff ff\n85 c0\n74 2c\ne8 ae ba ff ff\n8b 18\n31 ff\nbe 12 bd 40 00\nba 05 00 00 00\ne8 6b bb ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ca\ne8 07 be ff ff\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p642
S'.text:0000000000405b90\n.text:0000000000405b92\n.text:0000000000405b94\n.text:0000000000405b96\n.text:0000000000405b97\n.text:0000000000405b9e\n.text:0000000000405ba1\n.text:0000000000405ba4\n.text:0000000000405ba8\n.text:0000000000405bae\n.text:0000000000405bb1\n.text:0000000000405bb6\n.text:0000000000405bb9\n.text:0000000000405bbc\n.text:0000000000405bc1\n.text:0000000000405bc6\n.text:0000000000405bc8\n.text:0000000000405bca\n.text:0000000000405bcf\n.text:0000000000405bd1\n.text:0000000000405bd4\n.text:0000000000405bd7\n.text:0000000000405bda\n.text:0000000000405bdf\n.text:0000000000405be6\n.text:0000000000405beb\n.text:0000000000405bf0\n.text:0000000000405bf3\n.text:0000000000405bf8\n.text:0000000000405bfe\n.text:0000000000405c02\n.text:0000000000405c07\n.text:0000000000405c09\n.text:0000000000405c0b\n.text:0000000000405c10\n.text:0000000000405c15\n.text:0000000000405c1a\n.text:0000000000405c1d\n.text:0000000000405c1f\n.text:0000000000405c24\n.text:0000000000405c27\n.text:0000000000405c2c\n.text:0000000000405c2f\n.text:0000000000405c31\n.text:0000000000405c33\n.text:0000000000405c35\n.text:0000000000405c38\n.text:0000000000405c3d\n.text:0000000000405c40\n.text:0000000000405c42\n.text:0000000000405c44\n.text:0000000000405c47\n.text:0000000000405c4c\n.text:0000000000405c54\n.text:0000000000405c57\n.text:0000000000405c59\n.text:0000000000405c5b\n.text:0000000000405c5d\n.text:0000000000405c62\n.text:0000000000405c67\n.text:0000000000405c6a\n.text:0000000000405c6e\n.text:0000000000405c72\n.text:0000000000405c75\n.text:0000000000405c7a\n.text:0000000000405c7c\n.text:0000000000405c7e\n.text:0000000000405c81\n.text:0000000000405c83\n.text:0000000000405c8a\n.text:0000000000405c8c\n.text:0000000000405c8f\n.text:0000000000405c94\n.text:0000000000405c97\n.text:0000000000405c9a\n.text:0000000000405ca1\n.text:0000000000405ca4\n.text:0000000000405ca9\n.text:0000000000405cad\n.text:0000000000405cb4\n.text:0000000000405cb9\n.text:0000000000405cbb\n.text:0000000000405cbd\n.text:0000000000405cc2\n.text:0000000000405cc4\n.text:0000000000405cc6\n.text:0000000000405ccb\n.text:0000000000405cd0\n.text:0000000000405cd5\n.text:0000000000405cd8\n.text:0000000000405cdd\n.text:0000000000405cdf\n.text:0000000000405ce1\n.text:0000000000405ce4\n.text:0000000000405ce9\n.text:0000000000405cf0\n.text:0000000000405cf1\n.text:0000000000405cf3\n.text:0000000000405cf5\n.text:0000000000405cf7\n'
p643
tp644
sS'c_isxdigit'
p645
(S'\n__stdcall c_isxdigit()\n'
p646
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p647
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x0040a04b\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p648
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p649
S'.text:000000000040a030\n.text:000000000040a033\n.text:000000000040a036\n.text:000000000040a038\n.text:000000000040a042\n.text:000000000040a044\n.text:000000000040a047\n.text:000000000040a04a\n.text:000000000040a04b\n.text:000000000040a04d\n'
p650
tp651
sS'__libc_csu_fini'
p652
(S'\n__stdcall __libc_csu_fini()\n'
p653
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p654
S'RET\n'
p655
S'f3 c3\n'
p656
S'.text:000000000040a690\n'
p657
tp658
sS'pretty_name'
p659
(S'\n__stdcall pretty_name(File_spec * f)\n'
p660
V\u000achar * pretty_name(File_spec *f)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  if ((*f->name == '-') && (f->name[1] == 0)) {\u000a    pcVar1 = (char *)dcgettext(0,"standard input",5);\u000a    return pcVar1;\u000a  }\u000a  return f->name;\u000a}\u000a\u000a
p661
S'MOV RAX,qword ptr [RDI]\nCMP byte ptr [RAX],0x2d\nJNZ 0x00403d4e\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x00403d52\nMOV RAX,qword ptr [RDI]\nRET\nXOR EDI,EDI\nMOV ESI,0x40c254\nMOV EDX,0x5\nJMP 0x00401840\n'
p662
S'48 8b 07\n80 38 2d\n75 06\n80 78 01 00\n74 04\n48 8b 07\nc3\n31 ff\nbe 54 c2 40 00\nba 05 00 00 00\ne9 dd da ff ff\n'
p663
S'.text:0000000000403d40\n.text:0000000000403d43\n.text:0000000000403d46\n.text:0000000000403d48\n.text:0000000000403d4c\n.text:0000000000403d4e\n.text:0000000000403d51\n.text:0000000000403d52\n.text:0000000000403d54\n.text:0000000000403d59\n.text:0000000000403d5e\n'
p664
tp665
sS'abort'
p666
(S'\n__stdcall abort()\n'
p667
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_00610028)();\u000a  return;\u000a}\u000a\u000a
p668
S'JMP qword ptr [0x00610028]\n'
p669
S'ff 25 c2 e8 20 00\n'
p670
S'.plt:0000000000401760\n'
p671
tp672
sS'compute_bucket_size'
p673
(S'\n__stdcall compute_bucket_size(size_t candidate, Hash_tuning * tuning)\n'
p674
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000asize_t compute_bucket_size(size_t candidate,Hash_tuning *tuning)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  float fVar3;\u000a  \u000a  if (tuning->is_n_buckets == false) {\u000a    if ((long)candidate < 0) {\u000a      fVar3 = (float)((ulong)((uint)candidate & 1) | candidate >> 1);\u000a      fVar3 = fVar3 + fVar3;\u000a    }\u000a    else {\u000a      fVar3 = (float)candidate;\u000a    }\u000a    fVar3 = fVar3 / tuning->growth_threshold;\u000a    candidate = (long)fVar3;\u000a    if (DAT_0040c728 <= fVar3) {\u000a      candidate = (long)(fVar3 - DAT_0040c728) ^ 0x8000000000000000;\u000a    }\u000a    if (_DAT_0040c72c <= fVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  sVar1 = next_prime(candidate);\u000a  sVar2 = 0;\u000a  if (SUB168(ZEXT816(sVar1) * ZEXT816(8) >> 0x40,0) == 0) {\u000a    sVar2 = sVar1;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p675
S'CMP byte ptr [RSI + 0x10],0x0\nJNZ 0x00406a32\nTEST RDI,RDI\nJS 0x004069e2\nCVTSI2SS XMM0,RDI\nJMP 0x004069f7\nMOV RAX,RDI\nSHR RAX,1\nAND EDI,0x1\nOR RDI,RAX\nCVTSI2SS XMM0,RDI\nADDSS XMM0,XMM0\nDIVSS XMM0,dword ptr [RSI + 0x8]\nMOVSS XMM1,dword ptr [0x0040c728]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RDI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RDI,RCX\nUCOMISS XMM0,dword ptr [0x0040c72c]\nJNC 0x00406a51\nPUSH RAX\nCALL 0x004072d0\nMOV RSI,RAX\nMOV EDX,0x8\nXOR ECX,ECX\nMUL RDX\nCMOVNO RCX,RSI\nADD RSP,0x8\nMOV RAX,RCX\nRET\nXOR ECX,ECX\nMOV RAX,RCX\nRET\n'
p676
S'80 7e 10 00\n75 5c\n48 85 ff\n78 07\nf3 48 0f 2a c7\neb 15\n48 89 f8\n48 d1 e8\n83 e7 01\n48 09 c7\nf3 48 0f 2a c7\nf3 0f 58 c0\nf3 0f 5e 46 08\nf3 0f 10 0d 24 5d 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f8\n0f 2e c1\n48 0f 43 f9\n0f 2e 05 fc 5c 00 00\n73 1f\n50\ne8 98 08 00 00\n48 89 c6\nba 08 00 00 00\n31 c9\n48 f7 e2\n48 0f 41 ce\n48 83 c4 08\n48 89 c8\nc3\n31 c9\n48 89 c8\nc3\n'
p677
S'.text:00000000004069d0\n.text:00000000004069d4\n.text:00000000004069d6\n.text:00000000004069d9\n.text:00000000004069db\n.text:00000000004069e0\n.text:00000000004069e2\n.text:00000000004069e5\n.text:00000000004069e8\n.text:00000000004069eb\n.text:00000000004069ee\n.text:00000000004069f3\n.text:00000000004069f7\n.text:00000000004069fc\n.text:0000000000406a04\n.text:0000000000406a07\n.text:0000000000406a0b\n.text:0000000000406a10\n.text:0000000000406a1a\n.text:0000000000406a1d\n.text:0000000000406a22\n.text:0000000000406a25\n.text:0000000000406a29\n.text:0000000000406a30\n.text:0000000000406a32\n.text:0000000000406a33\n.text:0000000000406a38\n.text:0000000000406a3b\n.text:0000000000406a40\n.text:0000000000406a42\n.text:0000000000406a45\n.text:0000000000406a49\n.text:0000000000406a4d\n.text:0000000000406a50\n.text:0000000000406a51\n.text:0000000000406a53\n.text:0000000000406a56\n'
p678
tp679
sS'usable_st_size'
p680
(S'\n__stdcall usable_st_size(stat * sb)\n'
p681
V\u000a_Bool usable_st_size(stat *sb)\u000a\u000a{\u000a  if ((*(ushort *)&sb->st_mode & 0xf000 | 0x2000) == 0xa000) {\u000a    return true;\u000a  }\u000a  return false;\u000a}\u000a\u000a
p682
S'MOVZX EAX,word ptr [RDI + 0x18]\nOR EAX,0x2000\nAND EAX,0xf000\nCMP EAX,0xa000\nJNZ 0x00404cb8\nMOV AL,0x1\nRET\nXOR EAX,EAX\nRET\n'
p683
S'0f b7 47 18\n0d 00 20 00 00\n25 00 f0 00 00\n3d 00 a0 00 00\n75 03\nb0 01\nc3\n31 c0\nc3\n'
p684
S'.text:0000000000404ca0\n.text:0000000000404ca4\n.text:0000000000404ca9\n.text:0000000000404cae\n.text:0000000000404cb3\n.text:0000000000404cb5\n.text:0000000000404cb7\n.text:0000000000404cb8\n.text:0000000000404cba\n'
p685
tp686
sS'version_etc'
p687
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p688
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p689
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x004093e2\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00409340\nADD RSP,0xd8\nRET\n'
p690
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p691
S'.text:00000000004093a0\n.text:00000000004093a7\n.text:00000000004093a9\n.text:00000000004093ab\n.text:00000000004093b0\n.text:00000000004093b5\n.text:00000000004093ba\n.text:00000000004093c2\n.text:00000000004093ca\n.text:00000000004093d2\n.text:00000000004093da\n.text:00000000004093e2\n.text:00000000004093e7\n.text:00000000004093ec\n.text:00000000004093f1\n.text:00000000004093f6\n.text:00000000004093fe\n.text:0000000000409403\n.text:000000000040940b\n.text:0000000000409412\n.text:0000000000409415\n.text:000000000040941a\n.text:0000000000409421\n'
p692
tp693
sS'__fdelt_chk'
p694
(S'\n__stdcall __fdelt_chk()\n'
p695
V\u000avoid __fdelt_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fdelt_chk_006100d0)();\u000a  return;\u000a}\u000a\u000a
p696
S'JMP qword ptr [0x006100d0]\n'
p697
S'ff 25 1a e8 20 00\n'
p698
S'.plt:00000000004018b0\n'
p699
tp700
sS'hash_rehash'
p701
(S'\n__stdcall hash_rehash(Hash_table * table, size_t candidate)\n'
p702
V\u000a_Bool hash_rehash(Hash_table *table,size_t candidate)\u000a\u000a{\u000a  _Bool _Var1;\u000a  hash_entry *local_68;\u000a  hash_entry *local_60;\u000a  size_t local_58;\u000a  undefined4 local_50;\u000a  undefined4 uStack76;\u000a  undefined4 uStack72;\u000a  undefined4 uStack68;\u000a  Hash_tuning *local_40;\u000a  size_t (*local_38)(void *,size_t);\u000a  _Bool (*local_30)(void *,void *);\u000a  void (*local_28)(void *);\u000a  hash_entry *local_20;\u000a  \u000a  local_58 = compute_bucket_size(candidate,table->tuning);\u000a  if (local_58 != 0) {\u000a    if (local_58 == table->n_buckets) {\u000a      return true;\u000a    }\u000a    local_68 = (hash_entry *)rpl_calloc(local_58,0x10);\u000a    if (local_68 != (hash_entry *)0x0) {\u000a      local_60 = local_68 + local_58;\u000a      local_50 = 0;\u000a      uStack76 = 0;\u000a      uStack72 = 0;\u000a      uStack68 = 0;\u000a      local_40 = table->tuning;\u000a      local_38 = table->hasher;\u000a      local_30 = table->comparator;\u000a      local_28 = table->data_freer;\u000a      local_20 = table->free_entry_list;\u000a      _Var1 = transfer_entries((Hash_table *)&local_68,table);\u000a      if (_Var1 != false) {\u000a        free(table->bucket);\u000a        table->bucket = local_68;\u000a        table->bucket_limit = local_60;\u000a        table->n_buckets = local_58;\u000a        table->n_buckets_used = CONCAT44(uStack76,local_50);\u000a        table->free_entry_list = local_20;\u000a        return true;\u000a      }\u000a      table->free_entry_list = local_20;\u000a      _Var1 = transfer_entries(table,(Hash_table *)&local_68);\u000a      if ((_Var1 == false) ||\u000a         (_Var1 = transfer_entries(table,(Hash_table *)&local_68), _Var1 == false)) {\u000a                    /* WARNING: Subroutine does not return */\u000a        abort();\u000a      }\u000a      free(local_68);\u000a    }\u000a  }\u000a  return false;\u000a}\u000a\u000a
p703
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x50\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x28]\nMOV RDI,RSI\nMOV RSI,RAX\nCALL 0x004069d0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00406d01\nMOV R14B,0x1\nCMP RBP,qword ptr [RBX + 0x10]\nJZ 0x00406d04\nMOV ESI,0x10\nMOV RDI,RBP\nCALL 0x00409b90\nMOV qword ptr [RSP],RAX\nTEST RAX,RAX\nJZ 0x00406d01\nMOV qword ptr [RSP + 0x10],RBP\nSHL RBP,0x4\nADD RBP,qword ptr [RSP]\nMOV qword ptr [RSP + 0x8],RBP\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RSP + 0x18],XMM0\nMOV RAX,qword ptr [RBX + 0x28]\nMOV qword ptr [RSP + 0x28],RAX\nMOV RAX,qword ptr [RBX + 0x30]\nMOV qword ptr [RSP + 0x30],RAX\nMOV RAX,qword ptr [RBX + 0x38]\nMOV qword ptr [RSP + 0x38],RAX\nMOV RAX,qword ptr [RBX + 0x40]\nMOV qword ptr [RSP + 0x40],RAX\nMOV RAX,qword ptr [RBX + 0x48]\nMOV qword ptr [RSP + 0x48],RAX\nMOV RDI,RSP\nXOR EDX,EDX\nMOV RSI,RBX\nCALL 0x00406d20\nTEST AL,AL\nJZ 0x00406cca\nMOV RDI,qword ptr [RBX]\nCALL 0x00401750\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX],RAX\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [RBX + 0x8],RAX\nMOV RAX,qword ptr [RSP + 0x10]\nMOV qword ptr [RBX + 0x10],RAX\nMOV RAX,qword ptr [RSP + 0x18]\nMOV qword ptr [RBX + 0x18],RAX\nMOV RAX,qword ptr [RSP + 0x48]\nMOV qword ptr [RBX + 0x48],RAX\nJMP 0x00406d04\nMOV RAX,qword ptr [RSP + 0x48]\nMOV qword ptr [RBX + 0x48],RAX\nMOV RSI,RSP\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00406d20\nTEST AL,AL\nJZ 0x00406d10\nMOV RSI,RSP\nXOR EDX,EDX\nMOV RDI,RBX\nCALL 0x00406d20\nTEST AL,AL\nJZ 0x00406d10\nMOV RDI,qword ptr [RSP]\nCALL 0x00401750\nXOR R14D,R14D\nMOV EAX,R14D\nADD RSP,0x50\nPOP RBX\nPOP R14\nPOP RBP\nRET\nCALL 0x00401760\n'
p704
S'55\n41 56\n53\n48 83 ec 50\n48 89 fb\n48 8b 43 28\n48 89 f7\n48 89 c6\ne8 c6 fd ff ff\n48 89 c5\n48 85 ed\n0f 84 eb 00 00 00\n41 b6 01\n48 3b 6b 10\n0f 84 e1 00 00 00\nbe 10 00 00 00\n48 89 ef\ne8 60 2f 00 00\n48 89 04 24\n48 85 c0\n0f 84 c4 00 00 00\n48 89 6c 24 10\n48 c1 e5 04\n48 03 2c 24\n48 89 6c 24 08\n0f 57 c0\n0f 11 44 24 18\n48 8b 43 28\n48 89 44 24 28\n48 8b 43 30\n48 89 44 24 30\n48 8b 43 38\n48 89 44 24 38\n48 8b 43 40\n48 89 44 24 40\n48 8b 43 48\n48 89 44 24 48\n48 89 e7\n31 d2\n48 89 de\ne8 8f 00 00 00\n84 c0\n74 35\n48 8b 3b\ne8 b3 aa ff ff\n48 8b 04 24\n48 89 03\n48 8b 44 24 08\n48 89 43 08\n48 8b 44 24 10\n48 89 43 10\n48 8b 44 24 18\n48 89 43 18\n48 8b 44 24 48\n48 89 43 48\neb 3a\n48 8b 44 24 48\n48 89 43 48\n48 89 e6\nba 01 00 00 00\n48 89 df\ne8 3d 00 00 00\n84 c0\n74 29\n48 89 e6\n31 d2\n48 89 df\ne8 2c 00 00 00\n84 c0\n74 18\n48 8b 3c 24\ne8 4f aa ff ff\n45 31 f6\n44 89 f0\n48 83 c4 50\n5b\n41 5e\n5d\nc3\ne8 4b aa ff ff\n'
p705
S'.text:0000000000406bf0\n.text:0000000000406bf1\n.text:0000000000406bf3\n.text:0000000000406bf4\n.text:0000000000406bf8\n.text:0000000000406bfb\n.text:0000000000406bff\n.text:0000000000406c02\n.text:0000000000406c05\n.text:0000000000406c0a\n.text:0000000000406c0d\n.text:0000000000406c10\n.text:0000000000406c16\n.text:0000000000406c19\n.text:0000000000406c1d\n.text:0000000000406c23\n.text:0000000000406c28\n.text:0000000000406c2b\n.text:0000000000406c30\n.text:0000000000406c34\n.text:0000000000406c37\n.text:0000000000406c3d\n.text:0000000000406c42\n.text:0000000000406c46\n.text:0000000000406c4a\n.text:0000000000406c4f\n.text:0000000000406c52\n.text:0000000000406c57\n.text:0000000000406c5b\n.text:0000000000406c60\n.text:0000000000406c64\n.text:0000000000406c69\n.text:0000000000406c6d\n.text:0000000000406c72\n.text:0000000000406c76\n.text:0000000000406c7b\n.text:0000000000406c7f\n.text:0000000000406c84\n.text:0000000000406c87\n.text:0000000000406c89\n.text:0000000000406c8c\n.text:0000000000406c91\n.text:0000000000406c93\n.text:0000000000406c95\n.text:0000000000406c98\n.text:0000000000406c9d\n.text:0000000000406ca1\n.text:0000000000406ca4\n.text:0000000000406ca9\n.text:0000000000406cad\n.text:0000000000406cb2\n.text:0000000000406cb6\n.text:0000000000406cbb\n.text:0000000000406cbf\n.text:0000000000406cc4\n.text:0000000000406cc8\n.text:0000000000406cca\n.text:0000000000406ccf\n.text:0000000000406cd3\n.text:0000000000406cd6\n.text:0000000000406cdb\n.text:0000000000406cde\n.text:0000000000406ce3\n.text:0000000000406ce5\n.text:0000000000406ce7\n.text:0000000000406cea\n.text:0000000000406cec\n.text:0000000000406cef\n.text:0000000000406cf4\n.text:0000000000406cf6\n.text:0000000000406cf8\n.text:0000000000406cfc\n.text:0000000000406d01\n.text:0000000000406d04\n.text:0000000000406d07\n.text:0000000000406d0b\n.text:0000000000406d0c\n.text:0000000000406d0e\n.text:0000000000406d0f\n.text:0000000000406d10\n'
p706
tp707
sS'lseek'
p708
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p709
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_006100f0)();\u000a  return _Var1;\u000a}\u000a\u000a
p710
S'JMP qword ptr [0x006100f0]\n'
p711
S'ff 25 fa e7 20 00\n'
p712
S'.plt:00000000004018f0\n'
p713
tp714
sS'offtostr'
p715
(S'\n__stdcall offtostr(off_t i, char * buf)\n'
p716
V\u000achar * offtostr(off_t i,char *buf)\u000a\u000a{\u000a  ulong uVar1;\u000a  long lVar2;\u000a  \u000a  buf[0x14] = 0;\u000a  if (i < 0) {\u000a    buf = buf + 0x13;\u000a    do {\u000a      lVar2 = i / 10 + (i >> 0x3f);\u000a      *buf = '0' - ((char)i + (char)lVar2 * -10);\u000a      uVar1 = i + 9;\u000a      buf = buf + -1;\u000a      i = lVar2;\u000a    } while (0x12 < uVar1);\u000a    *buf = '-';\u000a  }\u000a  else {\u000a    buf = buf + 0x14;\u000a    do {\u000a      lVar2 = i / 10 + (i >> 0x3f);\u000a      buf[-1] = (char)i + (char)lVar2 * -10 + '0';\u000a      buf = buf + -1;\u000a      uVar1 = i + 9;\u000a      i = lVar2;\u000a    } while (0x12 < uVar1);\u000a  }\u000a  return buf;\u000a}\u000a\u000a
p717
S'MOV RCX,RDI\nMOV byte ptr [RSI + 0x14],0x0\nTEST RCX,RCX\nJS 0x0040741b\nADD RSI,0x14\nMOV R8,0x6666666666666667\nNOP word ptr [RAX + RAX*0x1]\nMOV RAX,RCX\nIMUL R8\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0x2\nLEA EDI,[RDX + RAX*0x1]\nADD EDI,EDI\nLEA R9D,[RDI + RDI*0x4]\nMOV EDI,ECX\nSUB EDI,R9D\nADD EDI,0x30\nMOV byte ptr [RSI + -0x1],DIL\nDEC RSI\nADD RDX,RAX\nADD RCX,0x9\nCMP RCX,0x12\nMOV RCX,RDX\nJA 0x004073e0\nJMP 0x0040746f\nADD RSI,0x13\nMOV R8,0x6666666666666667\nNOP dword ptr [RAX]\nMOV RAX,RCX\nIMUL R8\nMOV R10,RDX\nSHR R10,0x3f\nSAR RDX,0x2\nLEA EDI,[RDX + R10*0x1]\nADD EDI,EDI\nLEA R9D,[RDI + RDI*0x4]\nMOV EDI,ECX\nSUB EDI,R9D\nMOV EAX,0x30\nSUB EAX,EDI\nMOV byte ptr [RSI],AL\nADD RDX,R10\nADD RCX,0x9\nDEC RSI\nCMP RCX,0x12\nMOV RCX,RDX\nJA 0x00407430\nMOV byte ptr [RSI],0x2d\nMOV RAX,RSI\nRET\n'
p718
S'48 89 f9\nc6 46 14 00\n48 85 c9\n78 4f\n48 83 c6 14\n49 b8 67 66 66 66 66 66 66 66\n66 0f 1f 44 00 00\n48 89 c8\n49 f7 e8\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 02\n8d 3c 02\n01 ff\n44 8d 0c bf\n89 cf\n44 29 cf\n83 c7 30\n40 88 7e ff\n48 ff ce\n48 01 c2\n48 83 c1 09\n48 83 f9 12\n48 89 d1\n77 c7\neb 54\n48 83 c6 13\n49 b8 67 66 66 66 66 66 66 66\n0f 1f 80 00 00 00 00\n48 89 c8\n49 f7 e8\n49 89 d2\n49 c1 ea 3f\n48 c1 fa 02\n42 8d 3c 12\n01 ff\n44 8d 0c bf\n89 cf\n44 29 cf\nb8 30 00 00 00\n29 f8\n88 06\n4c 01 d2\n48 83 c1 09\n48 ff ce\n48 83 f9 12\n48 89 d1\n77 c4\nc6 06 2d\n48 89 f0\nc3\n'
p719
S'.text:00000000004073c0\n.text:00000000004073c3\n.text:00000000004073c7\n.text:00000000004073ca\n.text:00000000004073cc\n.text:00000000004073d0\n.text:00000000004073da\n.text:00000000004073e0\n.text:00000000004073e3\n.text:00000000004073e6\n.text:00000000004073e9\n.text:00000000004073ed\n.text:00000000004073f1\n.text:00000000004073f4\n.text:00000000004073f6\n.text:00000000004073fa\n.text:00000000004073fc\n.text:00000000004073ff\n.text:0000000000407402\n.text:0000000000407406\n.text:0000000000407409\n.text:000000000040740c\n.text:0000000000407410\n.text:0000000000407414\n.text:0000000000407417\n.text:0000000000407419\n.text:000000000040741b\n.text:000000000040741f\n.text:0000000000407429\n.text:0000000000407430\n.text:0000000000407433\n.text:0000000000407436\n.text:0000000000407439\n.text:000000000040743d\n.text:0000000000407441\n.text:0000000000407445\n.text:0000000000407447\n.text:000000000040744b\n.text:000000000040744d\n.text:0000000000407450\n.text:0000000000407455\n.text:0000000000407457\n.text:0000000000407459\n.text:000000000040745c\n.text:0000000000407460\n.text:0000000000407463\n.text:0000000000407467\n.text:000000000040746a\n.text:000000000040746c\n.text:000000000040746f\n.text:0000000000407472\n'
p720
tp721
sS'hash_get_first'
p722
(S'\n__stdcall hash_get_first(Hash_table * table)\n'
p723
V\u000avoid * hash_get_first(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  \u000a  if (table->n_entries == 0) {\u000a    return (void *)0x0;\u000a  }\u000a  phVar1 = table->bucket;\u000a  if (phVar1 < table->bucket_limit) {\u000a    do {\u000a      if (phVar1->data != (void *)0x0) {\u000a        return phVar1->data;\u000a      }\u000a      phVar1 = phVar1 + 1;\u000a    } while (phVar1 < table->bucket_limit);\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p724
S'CMP qword ptr [RDI + 0x20],0x0\nJZ 0x00406693\nMOV RCX,qword ptr [RDI]\nCMP RCX,qword ptr [RDI + 0x8]\nJC 0x0040668a\nJMP 0x00406696\nADD RCX,0x10\nCMP RCX,qword ptr [RDI + 0x8]\nJNC 0x00406696\nMOV RAX,qword ptr [RCX]\nTEST RAX,RAX\nJZ 0x00406680\nRET\nXOR EAX,EAX\nRET\nPUSH RAX\nCALL 0x00401760\n'
p725
S'48 83 7f 20 00\n74 2c\n48 8b 0f\n48 3b 4f 08\n72 1a\neb 24\n48 83 c1 10\n48 3b 4f 08\n73 0c\n48 8b 01\n48 85 c0\n74 ee\nc3\n31 c0\nc3\n50\ne8 c4 b0 ff ff\n'
p726
S'.text:0000000000406660\n.text:0000000000406665\n.text:0000000000406667\n.text:000000000040666a\n.text:000000000040666e\n.text:0000000000406670\n.text:0000000000406680\n.text:0000000000406684\n.text:0000000000406688\n.text:000000000040668a\n.text:000000000040668d\n.text:0000000000406690\n.text:0000000000406692\n.text:0000000000406693\n.text:0000000000406695\n.text:0000000000406696\n.text:0000000000406697\n'
p727
tp728
sS'memrchr'
p729
(S'\n__stdcall memrchr(void * __s, int __c, size_t __n)\n'
p730
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memrchr(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memrchr_006101f8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p731
S'JMP qword ptr [0x006101f8]\n'
p732
S'ff 25 f2 e6 20 00\n'
p733
S'.plt:0000000000401b00\n'
p734
tp735
sS'hash_get_n_entries'
p736
(S'\n__stdcall hash_get_n_entries(Hash_table * table)\n'
p737
V\u000asize_t hash_get_n_entries(Hash_table *table)\u000a\u000a{\u000a  return table->n_entries;\u000a}\u000a\u000a
p738
S'MOV RAX,qword ptr [RDI + 0x20]\nRET\n'
p739
S'48 8b 47 20\nc3\n'
p740
S'.text:0000000000406430\n.text:0000000000406434\n'
p741
tp742
sS'quotearg_n_mem'
p743
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p744
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p745
S'MOV ECX,0x610380\nJMP 0x004084e0\n'
p746
S'b9 80 03 61 00\ne9 36 fe ff ff\n'
p747
S'.text:00000000004086a0\n.text:00000000004086a5\n'
p748
tp749
sS'__printf_chk'
p750
(S'\n__stdcall __printf_chk()\n'
p751
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_006101e8)();\u000a  return;\u000a}\u000a\u000a
p752
S'JMP qword ptr [0x006101e8]\n'
p753
S'ff 25 02 e7 20 00\n'
p754
S'.plt:0000000000401ae0\n'
p755
tp756
sS'hash_lookup'
p757
(S'\n__stdcall hash_lookup(Hash_table * table, void * entry)\n'
p758
V\u000avoid * hash_lookup(Hash_table *table,void *entry)\u000a\u000a{\u000a  _Bool _Var1;\u000a  hash_entry *phVar2;\u000a  \u000a  phVar2 = safe_hasher(table,entry);\u000a  if (phVar2->data != (void *)0x0) {\u000a    while (phVar2 != (hash_entry *)0x0) {\u000a      if ((phVar2->data == entry) ||\u000a         (_Var1 = (*table->comparator)(entry,phVar2->data), _Var1 != false)) {\u000a        return phVar2->data;\u000a      }\u000a      phVar2 = phVar2->next;\u000a    }\u000a  }\u000a  return (void *)0x0;\u000a}\u000a\u000a
p759
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,RSI\nMOV R15,RDI\nCALL 0x00406630\nMOV RBX,RAX\nXOR R14D,R14D\nCMP qword ptr [RBX],0x0\nJZ 0x00406621\nTEST RBX,RBX\nJZ 0x00406621\nXOR R14D,R14D\nNOP word ptr [RAX + RAX*0x1]\nMOV RSI,qword ptr [RBX]\nCMP RSI,R12\nJZ 0x0040661e\nMOV RDI,R12\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJNZ 0x0040661e\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x00406600\nJMP 0x00406621\nMOV R14,qword ptr [RBX]\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p760
S'41 57\n41 56\n41 54\n53\n50\n49 89 f4\n49 89 ff\ne8 4d 00 00 00\n48 89 c3\n45 31 f6\n48 83 3b 00\n74 32\n48 85 db\n74 2d\n45 31 f6\n66 0f 1f 84 00 00 00 00 00\n48 8b 33\n4c 39 e6\n74 16\n4c 89 e7\n41 ff 57 38\n84 c0\n75 0b\n48 8b 5b 08\n48 85 db\n75 e4\neb 03\n4c 8b 33\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p761
S'.text:00000000004065d0\n.text:00000000004065d2\n.text:00000000004065d4\n.text:00000000004065d6\n.text:00000000004065d7\n.text:00000000004065d8\n.text:00000000004065db\n.text:00000000004065de\n.text:00000000004065e3\n.text:00000000004065e6\n.text:00000000004065e9\n.text:00000000004065ed\n.text:00000000004065ef\n.text:00000000004065f2\n.text:00000000004065f4\n.text:00000000004065f7\n.text:0000000000406600\n.text:0000000000406603\n.text:0000000000406606\n.text:0000000000406608\n.text:000000000040660b\n.text:000000000040660f\n.text:0000000000406611\n.text:0000000000406613\n.text:0000000000406617\n.text:000000000040661a\n.text:000000000040661c\n.text:000000000040661e\n.text:0000000000406621\n.text:0000000000406624\n.text:0000000000406628\n.text:0000000000406629\n.text:000000000040662b\n.text:000000000040662d\n.text:000000000040662f\n'
p762
tp763
sS'base_len'
p764
(S'\n__stdcall base_len(char * name)\n'
p765
V\u000asize_t base_len(char *name)\u000a\u000a{\u000a  long lVar1;\u000a  size_t sVar2;\u000a  size_t sVar3;\u000a  \u000a  sVar2 = strlen(name);\u000a  do {\u000a    sVar3 = sVar2;\u000a    if (sVar2 < 2) {\u000a      return sVar3;\u000a    }\u000a    lVar1 = sVar2 - 1;\u000a    sVar2 = sVar2 - 1;\u000a  } while (name[lVar1] == '/');\u000a  return sVar3;\u000a}\u000a\u000a
p766
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401860\nMOV RCX,RAX\nNOP dword ptr [RAX]\nMOV RAX,RCX\nCMP RAX,0x2\nJC 0x00406334\nLEA RCX,[RAX + -0x1]\nCMP byte ptr [RBX + RAX*0x1 + -0x1],0x2f\nJZ 0x00406320\nPOP RBX\nRET\n'
p767
S'53\n48 89 fb\ne8 47 b5 ff ff\n48 89 c1\n0f 1f 40 00\n48 89 c8\n48 83 f8 02\n72 0b\n48 8d 48 ff\n80 7c 03 ff 2f\n74 ec\n5b\nc3\n'
p768
S'.text:0000000000406310\n.text:0000000000406311\n.text:0000000000406314\n.text:0000000000406319\n.text:000000000040631c\n.text:0000000000406320\n.text:0000000000406323\n.text:0000000000406327\n.text:0000000000406329\n.text:000000000040632d\n.text:0000000000406332\n.text:0000000000406334\n.text:0000000000406335\n'
p769
tp770
sS'emit_ancillary_info'
p771
(S'\n__stdcall emit_ancillary_info()\n'
p772
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x0040b090;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("tail",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "tail";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,&DAT_0040bc9e,uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/",&DAT_0040bc9e);\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x40bae8;\u000a  if (__s2 == "tail") {\u000a    uVar3 = 0x40be11;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p773
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x40b090\nMOV ESI,0x40bdf5\nNOP\nMOV EDI,0x40bc9e\nCALL 0x004019a0\nTEST EAX,EAX\nJZ 0x00401f7b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401f60\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x40bc9e\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x40be54\nMOV EDX,0x5\nCALL 0x00401840\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x40be6b\nMOV ECX,0x40be79\nXOR EAX,EAX\nCALL 0x00401ae0\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x00401ad0\nTEST RAX,RAX\nJZ 0x00402004\nMOV ESI,0x40bea0\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00401780\nTEST EAX,EAX\nJZ 0x00402004\nXOR EDI,EDI\nMOV ESI,0x40bea4\nMOV EDX,0x5\nCALL 0x00401840\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40bc9e\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401ae0\nXOR EDI,EDI\nMOV ESI,0x40bee9\nMOV EDX,0x5\nCALL 0x00401840\nMOV RSI,RAX\nMOV R14D,0x40bc9e\nMOV EDI,0x1\nMOV EDX,0x40be79\nMOV ECX,0x40bc9e\nXOR EAX,EAX\nCALL 0x00401ae0\nXOR EDI,EDI\nMOV ESI,0x40bf08\nMOV EDX,0x5\nCALL 0x00401840\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x40be11\nMOV ECX,0x40bae8\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401ae0\n'
p774
S'41 56\n53\n50\nbb 90 b0 40 00\nbe f5 bd 40 00\n66 90\nbf 9e bc 40 00\ne8 36 fa ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 9e bc 40 00\n48 0f 45 d8\n31 ff\nbe 54 be 40 00\nba 05 00 00 00\ne8 a4 f8 ff ff\n48 89 c6\nbf 01 00 00 00\nba 6b be 40 00\nb9 79 be 40 00\n31 c0\ne8 2b fb ff ff\nbf 05 00 00 00\n31 f6\ne8 0f fb ff ff\n48 85 c0\n74 3e\nbe a0 be 40 00\nba 03 00 00 00\n48 89 c7\ne8 a8 f7 ff ff\n85 c0\n74 28\n31 ff\nbe a4 be 40 00\nba 05 00 00 00\ne8 53 f8 ff ff\n48 89 c1\nbf 01 00 00 00\nba 9e bc 40 00\n31 c0\n48 89 ce\ne8 dc fa ff ff\n31 ff\nbe e9 be 40 00\nba 05 00 00 00\ne8 2b f8 ff ff\n48 89 c6\n41 be 9e bc 40 00\nbf 01 00 00 00\nba 79 be 40 00\nb9 9e bc 40 00\n31 c0\ne8 ac fa ff ff\n31 ff\nbe 08 bf 40 00\nba 05 00 00 00\ne8 fb f7 ff ff\n48 89 c2\n4c 39 f3\nb8 11 be 40 00\nb9 e8 ba 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 6e fa ff ff\n'
p775
S'.text:0000000000401f50\n.text:0000000000401f52\n.text:0000000000401f53\n.text:0000000000401f54\n.text:0000000000401f59\n.text:0000000000401f5e\n.text:0000000000401f60\n.text:0000000000401f65\n.text:0000000000401f6a\n.text:0000000000401f6c\n.text:0000000000401f6e\n.text:0000000000401f72\n.text:0000000000401f76\n.text:0000000000401f79\n.text:0000000000401f7b\n.text:0000000000401f7f\n.text:0000000000401f82\n.text:0000000000401f87\n.text:0000000000401f8b\n.text:0000000000401f8d\n.text:0000000000401f92\n.text:0000000000401f97\n.text:0000000000401f9c\n.text:0000000000401f9f\n.text:0000000000401fa4\n.text:0000000000401fa9\n.text:0000000000401fae\n.text:0000000000401fb0\n.text:0000000000401fb5\n.text:0000000000401fba\n.text:0000000000401fbc\n.text:0000000000401fc1\n.text:0000000000401fc4\n.text:0000000000401fc6\n.text:0000000000401fcb\n.text:0000000000401fd0\n.text:0000000000401fd3\n.text:0000000000401fd8\n.text:0000000000401fda\n.text:0000000000401fdc\n.text:0000000000401fde\n.text:0000000000401fe3\n.text:0000000000401fe8\n.text:0000000000401fed\n.text:0000000000401ff0\n.text:0000000000401ff5\n.text:0000000000401ffa\n.text:0000000000401ffc\n.text:0000000000401fff\n.text:0000000000402004\n.text:0000000000402006\n.text:000000000040200b\n.text:0000000000402010\n.text:0000000000402015\n.text:0000000000402018\n.text:000000000040201e\n.text:0000000000402023\n.text:0000000000402028\n.text:000000000040202d\n.text:000000000040202f\n.text:0000000000402034\n.text:0000000000402036\n.text:000000000040203b\n.text:0000000000402040\n.text:0000000000402045\n.text:0000000000402048\n.text:000000000040204b\n.text:0000000000402050\n.text:0000000000402055\n.text:0000000000402059\n.text:000000000040205e\n.text:0000000000402060\n.text:0000000000402063\n.text:0000000000402066\n.text:000000000040206a\n.text:000000000040206b\n.text:000000000040206d\n'
p776
tp777
sS'version_etc_va'
p778
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p779
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p780
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x00409370\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x0040937c\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00409391\nINC R9\nCMP R9,0xa\nJC 0x00409350\nMOV R8,RSP\nCALL 0x00408fb0\nADD RSP,0x58\nRET\n'
p781
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p782
S'.text:0000000000409340\n.text:0000000000409344\n.text:0000000000409347\n.text:0000000000409350\n.text:0000000000409353\n.text:0000000000409357\n.text:0000000000409359\n.text:000000000040935c\n.text:0000000000409360\n.text:0000000000409364\n.text:0000000000409367\n.text:0000000000409370\n.text:0000000000409374\n.text:0000000000409378\n.text:000000000040937c\n.text:000000000040937f\n.text:0000000000409383\n.text:0000000000409386\n.text:0000000000409388\n.text:000000000040938b\n.text:000000000040938f\n.text:0000000000409391\n.text:0000000000409394\n.text:0000000000409399\n.text:000000000040939d\n'
p783
tp784
sS'tail_bytes'
p785
(S'\n__stdcall tail_bytes(char * pretty_filename, uintmax_t n_bytes, uintmax_t * read_pos)\n'
p786
V\u000a_Bool tail_bytes(char *pretty_filename,uintmax_t n_bytes,uintmax_t *read_pos)\u000a\u000a{\u000a  uint uVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  uint *puVar4;\u000a  undefined8 uVar5;\u000a  char *filename;\u000a  uintmax_t uVar6;\u000a  char **in_RCX;\u000a  ulong uVar7;\u000a  ulong n_bytes_00;\u000a  long lVar8;\u000a  stat sStack184;\u000a  \u000a  n_bytes_00 = n_bytes & 0xffffffff;\u000a  iVar3 = fstat((int)n_bytes_00,(stat *)&sStack184);\u000a  if (iVar3 != 0) {\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar1 = *puVar4;\u000a    uVar5 = dcgettext(0,"cannot fstat %s",5);\u000a    filename = quotearg_style((char *)0x4);\u000a    error(0,(ulong)uVar1,uVar5,filename);\u000a    return false;\u000a  }\u000a  if (from_start == false) {\u000a    lVar8 = -1;\u000a    if ((((presume_input_pipe & 1) == 0) &&\u000a        (_Var2 = usable_st_size(&sStack184), -1 < (long)read_pos)) && (_Var2 != false)) {\u000a      lVar8 = sStack184.st_size;\u000a    }\u000a    uVar7 = 0x200;\u000a    if (sStack184.st_blksize < 0x2000000000000001) {\u000a      uVar7 = sStack184.st_blksize;\u000a    }\u000a    if ((long)sStack184.st_blksize < 1) {\u000a      uVar7 = 0x200;\u000a    }\u000a    if (lVar8 <= (long)uVar7) {\u000a      _Var2 = pipe_bytes(pretty_filename,n_bytes_00,read_pos);\u000a      return _Var2;\u000a    }\u000a    filename = (char *)xlseek(n_bytes_00,(char *)0x0);\u000a    if (((long)filename < lVar8) && (read_pos < (uintmax_t *)(lVar8 - (long)filename))) {\u000a      filename = (char *)(lVar8 - (long)read_pos);\u000a      xlseek(n_bytes_00,filename);\u000a    }\u000a  }\u000a  else {\u000a    if ((((presume_input_pipe & 1) != 0) || ((long)read_pos < 0)) ||\u000a       ((sStack184.st_mode & 0xf000) != 0x8000)) {\u000a      iVar3 = start_bytes(pretty_filename,n_bytes_00,read_pos);\u000a      if (iVar3 != 0) {\u000a        return (_Bool)(byte)((uint)iVar3 >> 0x1f);\u000a      }\u000a      goto LAB_00404231;\u000a    }\u000a    xlseek(n_bytes_00,(char *)read_pos);\u000a    filename = (char *)((long)read_pos + (long)*in_RCX);\u000a  }\u000a  *in_RCX = filename;\u000aLAB_00404231:\u000a  uVar6 = dump_remainder(pretty_filename,n_bytes_00);\u000a  *in_RCX = *in_RCX + uVar6;\u000a  return true;\u000a}\u000a\u000a
p787
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x90\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,ESI\nMOV R15,RDI\nMOV RSI,RSP\nMOV EDI,EBP\nCALL 0x0040a6e0\nTEST EAX,EAX\nJZ 0x0040411a\nCALL 0x00401770\nMOV R14D,dword ptr [RAX]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x40c271\nMOV EDX,0x5\nCALL 0x00401840\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,R15\nCALL 0x004087b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,RBP\nCALL 0x00401af0\nJMP 0x00404243\nCMP byte ptr [0x0061034f],0x0\nMOV AL,byte ptr [0x00610358]\nJZ 0x00404153\nTEST AL,0x1\nJZ 0x004041d5\nMOV RDI,R15\nMOV ESI,EBP\nMOV RDX,RBX\nMOV RCX,R14\nCALL 0x00404bd0\nMOV EBX,EAX\nTEST EBX,EBX\nJZ 0x0040422a\nSHR EBX,0x1f\nJMP 0x00404243\nMOV R12,-0x1\nTEST AL,0x1\nJNZ 0x00404174\nMOV RDI,RSP\nCALL 0x00404ca0\nTEST RBX,RBX\nJS 0x00404174\nTEST AL,AL\nJZ 0x00404174\nMOV R12,qword ptr [RSP + 0x30]\nMOV RAX,qword ptr [RSP + 0x38]\nMOV RCX,0x2000000000000001\nCMP RAX,RCX\nMOV ECX,0x200\nMOV EDX,0x200\nCMOVC RDX,RAX\nTEST RAX,RAX\nCMOVLE RDX,RCX\nCMP R12,RDX\nJLE 0x00404216\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EBP\nMOV RCX,R15\nCALL 0x00404720\nMOV RCX,R12\nSUB RCX,RAX\nJLE 0x00404211\nCMP RCX,RBX\nJBE 0x00404211\nSUB R12,RBX\nXOR EDX,EDX\nMOV EDI,EBP\nMOV RSI,R12\nMOV RCX,R15\nCALL 0x00404720\nMOV RAX,R12\nJMP 0x00404211\nTEST RBX,RBX\nJS 0x00404131\nMOV EAX,0xf000\nAND EAX,dword ptr [RSP + 0x18]\nCMP EAX,0x8000\nJNZ 0x00404131\nMOV EDX,0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R15\nCALL 0x00404720\nADD RBX,qword ptr [R14]\nMOV RAX,RBX\nMOV RBX,-0x1\nMOV qword ptr [R14],RAX\nJMP 0x00404231\nMOV RDI,R15\nMOV ESI,EBP\nMOV RDX,RBX\nMOV RCX,R14\nCALL 0x00404cc0\nMOV BL,AL\nJMP 0x00404243\nMOV RBX,-0x1\nMOV RDI,R15\nMOV ESI,EBP\nMOV RDX,RBX\nCALL 0x00404370\nADD qword ptr [R14],RAX\nMOV BL,0x1\nMOV EAX,EBX\nADD RSP,0x90\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p788
S'55\n41 57\n41 56\n41 54\n53\n48 81 ec 90 00 00 00\n49 89 ce\n48 89 d3\n89 f5\n49 89 ff\n48 89 e6\n89 ef\ne8 0c 66 00 00\n85 c0\n74 42\ne8 93 d6 ff ff\n44 8b 30\n31 db\n31 ff\nbe 71 c2 40 00\nba 05 00 00 00\ne8 4d d7 ff ff\n48 89 c5\nbf 04 00 00 00\n4c 89 fe\ne8 ad 46 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 f6\n48 89 ea\ne8 db d9 ff ff\ne9 29 01 00 00\n80 3d 2e c2 20 00 00\n8a 05 31 c2 20 00\n74 2a\na8 01\n0f 84 a4 00 00 00\n4c 89 ff\n89 ee\n48 89 da\n4c 89 f1\ne8 8f 0a 00 00\n89 c3\n85 db\n0f 84 df 00 00 00\nc1 eb 1f\ne9 f0 00 00 00\n49 c7 c4 ff ff ff ff\na8 01\n75 16\n48 89 e7\ne8 3a 0b 00 00\n48 85 db\n78 09\n84 c0\n74 05\n4c 8b 64 24 30\n48 8b 44 24 38\n48 b9 01 00 00 00 00 00 00 20\n48 39 c8\nb9 00 02 00 00\nba 00 02 00 00\n48 0f 42 d0\n48 85 c0\n48 0f 4e d1\n49 39 d4\n7e 76\n31 f6\nba 01 00 00 00\n89 ef\n4c 89 f9\ne8 6f 05 00 00\n4c 89 e1\n48 29 c1\n7e 58\n48 39 d9\n76 53\n49 29 dc\n31 d2\n89 ef\n4c 89 e6\n4c 89 f9\ne8 50 05 00 00\n4c 89 e0\neb 3c\n48 85 db\n0f 88 53 ff ff ff\nb8 00 f0 00 00\n23 44 24 18\n3d 00 80 00 00\n0f 85 3f ff ff ff\nba 01 00 00 00\n89 ef\n48 89 de\n4c 89 f9\ne8 1c 05 00 00\n49 03 1e\n48 89 d8\n48 c7 c3 ff ff ff ff\n49 89 06\neb 1b\n4c 89 ff\n89 ee\n48 89 da\n4c 89 f1\ne8 9a 0a 00 00\n88 c3\neb 19\n48 c7 c3 ff ff ff ff\n4c 89 ff\n89 ee\n48 89 da\ne8 32 01 00 00\n49 01 06\nb3 01\n89 d8\n48 81 c4 90 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p789
S'.text:00000000004040b0\n.text:00000000004040b1\n.text:00000000004040b3\n.text:00000000004040b5\n.text:00000000004040b7\n.text:00000000004040b8\n.text:00000000004040bf\n.text:00000000004040c2\n.text:00000000004040c5\n.text:00000000004040c7\n.text:00000000004040ca\n.text:00000000004040cd\n.text:00000000004040cf\n.text:00000000004040d4\n.text:00000000004040d6\n.text:00000000004040d8\n.text:00000000004040dd\n.text:00000000004040e0\n.text:00000000004040e2\n.text:00000000004040e4\n.text:00000000004040e9\n.text:00000000004040ee\n.text:00000000004040f3\n.text:00000000004040f6\n.text:00000000004040fb\n.text:00000000004040fe\n.text:0000000000404103\n.text:0000000000404106\n.text:0000000000404108\n.text:000000000040410a\n.text:000000000040410d\n.text:0000000000404110\n.text:0000000000404115\n.text:000000000040411a\n.text:0000000000404121\n.text:0000000000404127\n.text:0000000000404129\n.text:000000000040412b\n.text:0000000000404131\n.text:0000000000404134\n.text:0000000000404136\n.text:0000000000404139\n.text:000000000040413c\n.text:0000000000404141\n.text:0000000000404143\n.text:0000000000404145\n.text:000000000040414b\n.text:000000000040414e\n.text:0000000000404153\n.text:000000000040415a\n.text:000000000040415c\n.text:000000000040415e\n.text:0000000000404161\n.text:0000000000404166\n.text:0000000000404169\n.text:000000000040416b\n.text:000000000040416d\n.text:000000000040416f\n.text:0000000000404174\n.text:0000000000404179\n.text:0000000000404183\n.text:0000000000404186\n.text:000000000040418b\n.text:0000000000404190\n.text:0000000000404194\n.text:0000000000404197\n.text:000000000040419b\n.text:000000000040419e\n.text:00000000004041a0\n.text:00000000004041a2\n.text:00000000004041a7\n.text:00000000004041a9\n.text:00000000004041ac\n.text:00000000004041b1\n.text:00000000004041b4\n.text:00000000004041b7\n.text:00000000004041b9\n.text:00000000004041bc\n.text:00000000004041be\n.text:00000000004041c1\n.text:00000000004041c3\n.text:00000000004041c5\n.text:00000000004041c8\n.text:00000000004041cb\n.text:00000000004041d0\n.text:00000000004041d3\n.text:00000000004041d5\n.text:00000000004041d8\n.text:00000000004041de\n.text:00000000004041e3\n.text:00000000004041e7\n.text:00000000004041ec\n.text:00000000004041f2\n.text:00000000004041f7\n.text:00000000004041f9\n.text:00000000004041fc\n.text:00000000004041ff\n.text:0000000000404204\n.text:0000000000404207\n.text:000000000040420a\n.text:0000000000404211\n.text:0000000000404214\n.text:0000000000404216\n.text:0000000000404219\n.text:000000000040421b\n.text:000000000040421e\n.text:0000000000404221\n.text:0000000000404226\n.text:0000000000404228\n.text:000000000040422a\n.text:0000000000404231\n.text:0000000000404234\n.text:0000000000404236\n.text:0000000000404239\n.text:000000000040423e\n.text:0000000000404241\n.text:0000000000404243\n.text:0000000000404245\n.text:000000000040424c\n.text:000000000040424d\n.text:000000000040424f\n.text:0000000000404251\n.text:0000000000404253\n.text:0000000000404254\n'
p790
tp791
sS'hash_print_statistics'
p792
(S'\n__stdcall hash_print_statistics(Hash_table * table, FILE * stream)\n'
p793
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000avoid hash_print_statistics(Hash_table *table,FILE *stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  undefined auVar5 [16];\u000a  undefined auVar6 [16];\u000a  undefined4 uVar7;\u000a  \u000a  sVar1 = hash_get_n_entries(table);\u000a  sVar2 = hash_get_n_buckets(table);\u000a  sVar3 = hash_get_n_buckets_used(table);\u000a  sVar4 = hash_get_max_bucket_length(table);\u000a  __fprintf_chk(stream,1,0x40c730,sVar1);\u000a  __fprintf_chk(stream,1,"# buckets:         %lu\u005cn",sVar2);\u000a  uVar7 = SUB164(_DAT_0040c6f0 >> 0x20,0);\u000a  auVar5 = subpd(CONCAT88(SUB168(CONCAT412(uVar7,ZEXT812(sVar3) &\u000a                                                 (undefined  [12])0xffffffffffffffff |\u000a                                                 (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                          CONCAT44(SUB164(_DAT_0040c6f0,0),\u000a                                   SUB124(ZEXT812(sVar3) & (undefined  [12])0xffffffffffffffff,0))),\u000a                 CONCAT88(DAT_0040c708,DAT_0040c700));\u000a  auVar5 = addpd(CONCAT412(SUB164(auVar5 >> 0x20,0),\u000a                           CONCAT48(SUB164(auVar5,0),SUB168(auVar5 >> 0x40,0))),auVar5);\u000a  auVar6 = subpd(CONCAT88(SUB168(CONCAT412(uVar7,ZEXT812(sVar2) &\u000a                                                 (undefined  [12])0xffffffffffffffff |\u000a                                                 (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                          CONCAT44(SUB164(_DAT_0040c6f0,0),\u000a                                   SUB124(ZEXT812(sVar2) & (undefined  [12])0xffffffffffffffff,0))),\u000a                 CONCAT88(DAT_0040c708,DAT_0040c700));\u000a  auVar6 = addpd(CONCAT412(SUB164(auVar6 >> 0x20,0),\u000a                           CONCAT48(SUB164(auVar6,0),SUB168(auVar6 >> 0x40,0))),auVar6);\u000a  __fprintf_chk(CONCAT88(SUB168(auVar5 >> 0x40,0),\u000a                         (SUB168(auVar5,0) * _DAT_0040c710) / SUB168(auVar6,0)),stream,1,\u000a                "# buckets used:    %lu (%.2f%%)\u005cn",sVar3);\u000a  __fprintf_chk(stream,1,"max bucket length: %lu\u005cn",sVar4);\u000a  return;\u000a}\u000a\u000a
p794
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R13,RSI\nMOV RBX,RDI\nCALL 0x00406430\nMOV RBP,RAX\nMOV RDI,RBX\nCALL 0x00406410\nMOV R12,RAX\nMOV RDI,RBX\nCALL 0x00406420\nMOV R15,RAX\nMOV RDI,RBX\nCALL 0x00406440\nMOV R14,RAX\nMOV ESI,0x1\nMOV EDX,0x40c730\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,RBP\nCALL 0x00401b80\nMOV ESI,0x1\nMOV EDX,0x40c748\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,R12\nCALL 0x00401b80\nMOVQ XMM1,R15\nMOVDQA XMM2,xmmword ptr [0x0040c6f0]\nPUNPCKLDQ XMM1,XMM2\nMOVAPD XMM3,xmmword ptr [0x0040c700]\nSUBPD XMM1,XMM3\nPSHUFD XMM0,XMM1,0x4e\nADDPD XMM0,XMM1\nMULSD XMM0,qword ptr [0x0040c710]\nMOVQ XMM1,R12\nPUNPCKLDQ XMM1,XMM2\nSUBPD XMM1,XMM3\nPSHUFD XMM2,XMM1,0x4e\nADDPD XMM2,XMM1\nDIVSD XMM0,XMM2\nMOV ESI,0x1\nMOV EDX,0x40c760\nMOV AL,0x1\nMOV RDI,R13\nMOV RCX,R15\nCALL 0x00401b80\nMOV ESI,0x1\nMOV EDX,0x40c781\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00401b80\n'
p795
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f5\n48 89 fb\ne8 3a ff ff ff\n48 89 c5\n48 89 df\ne8 0f ff ff ff\n49 89 c4\n48 89 df\ne8 14 ff ff ff\n49 89 c7\n48 89 df\ne8 29 ff ff ff\n49 89 c6\nbe 01 00 00 00\nba 30 c7 40 00\n31 c0\n4c 89 ef\n48 89 e9\ne8 4f b6 ff ff\nbe 01 00 00 00\nba 48 c7 40 00\n31 c0\n4c 89 ef\n4c 89 e1\ne8 38 b6 ff ff\n66 49 0f 6e cf\n66 0f 6f 15 9b 61 00 00\n66 0f 62 ca\n66 0f 28 1d 9f 61 00 00\n66 0f 5c cb\n66 0f 70 c1 4e\n66 0f 58 c1\nf2 0f 59 05 9a 61 00 00\n66 49 0f 6e cc\n66 0f 62 ca\n66 0f 5c cb\n66 0f 70 d1 4e\n66 0f 58 d1\nf2 0f 5e c2\nbe 01 00 00 00\nba 60 c7 40 00\nb0 01\n4c 89 ef\n4c 89 f9\ne8 d9 b5 ff ff\nbe 01 00 00 00\nba 81 c7 40 00\n31 c0\n4c 89 ef\n4c 89 f1\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 b4 b5 ff ff\n'
p796
S'.text:00000000004064e0\n.text:00000000004064e1\n.text:00000000004064e3\n.text:00000000004064e5\n.text:00000000004064e7\n.text:00000000004064e9\n.text:00000000004064ea\n.text:00000000004064eb\n.text:00000000004064ee\n.text:00000000004064f1\n.text:00000000004064f6\n.text:00000000004064f9\n.text:00000000004064fc\n.text:0000000000406501\n.text:0000000000406504\n.text:0000000000406507\n.text:000000000040650c\n.text:000000000040650f\n.text:0000000000406512\n.text:0000000000406517\n.text:000000000040651a\n.text:000000000040651f\n.text:0000000000406524\n.text:0000000000406526\n.text:0000000000406529\n.text:000000000040652c\n.text:0000000000406531\n.text:0000000000406536\n.text:000000000040653b\n.text:000000000040653d\n.text:0000000000406540\n.text:0000000000406543\n.text:0000000000406548\n.text:000000000040654d\n.text:0000000000406555\n.text:0000000000406559\n.text:0000000000406561\n.text:0000000000406565\n.text:000000000040656a\n.text:000000000040656e\n.text:0000000000406576\n.text:000000000040657b\n.text:000000000040657f\n.text:0000000000406583\n.text:0000000000406588\n.text:000000000040658c\n.text:0000000000406590\n.text:0000000000406595\n.text:000000000040659a\n.text:000000000040659c\n.text:000000000040659f\n.text:00000000004065a2\n.text:00000000004065a7\n.text:00000000004065ac\n.text:00000000004065b1\n.text:00000000004065b3\n.text:00000000004065b6\n.text:00000000004065b9\n.text:00000000004065bd\n.text:00000000004065be\n.text:00000000004065c0\n.text:00000000004065c2\n.text:00000000004065c4\n.text:00000000004065c6\n.text:00000000004065c7\n'
p797
tp798
sS'xzalloc'
p799
(S'\n__stdcall xzalloc(size_t s)\n'
p800
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p801
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x004094d0\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00401910\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p802
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 34 83 ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p803
S'.text:00000000004095c0\n.text:00000000004095c2\n.text:00000000004095c3\n.text:00000000004095c4\n.text:00000000004095c7\n.text:00000000004095cc\n.text:00000000004095cf\n.text:00000000004095d1\n.text:00000000004095d4\n.text:00000000004095d7\n.text:00000000004095dc\n.text:00000000004095df\n.text:00000000004095e3\n.text:00000000004095e4\n.text:00000000004095e6\n'
p804
tp805
sS'next_prime'
p806
(S'\n__stdcall next_prime(size_t candidate)\n'
p807
V\u000asize_t next_prime(size_t candidate)\u000a\u000a{\u000a  _Bool _Var1;\u000a  size_t candidate_00;\u000a  size_t sVar2;\u000a  \u000a  candidate_00 = 10;\u000a  if (10 < candidate) {\u000a    candidate_00 = candidate;\u000a  }\u000a  candidate_00 = candidate_00 | 1;\u000a  while ((sVar2 = 0xffffffffffffffff, candidate_00 != 0xffffffffffffffff &&\u000a         (_Var1 = is_prime(candidate_00), sVar2 = candidate_00, _Var1 == false))) {\u000a    candidate_00 = candidate_00 + 2;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p808
S'PUSH R14\nPUSH RBX\nPUSH RAX\nCMP RDI,0xa\nMOV EBX,0xa\nCMOVA RBX,RDI\nOR RBX,0x1\nMOV R14,-0x1\nCMP RBX,-0x1\nJNZ 0x0040730a\nJMP 0x00407319\nADD RBX,0x2\nCMP RBX,-0x1\nJZ 0x00407319\nMOV RDI,RBX\nCALL 0x00407330\nTEST AL,AL\nJZ 0x00407300\nMOV R14,RBX\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p809
S'41 56\n53\n50\n48 83 ff 0a\nbb 0a 00 00 00\n48 0f 47 df\n48 83 cb 01\n49 c7 c6 ff ff ff ff\n48 83 fb ff\n75 18\neb 25\n48 83 c3 02\n48 83 fb ff\n74 0f\n48 89 df\ne8 1e 00 00 00\n84 c0\n74 ea\n49 89 de\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p810
S'.text:00000000004072d0\n.text:00000000004072d2\n.text:00000000004072d3\n.text:00000000004072d4\n.text:00000000004072d8\n.text:00000000004072dd\n.text:00000000004072e1\n.text:00000000004072e5\n.text:00000000004072ec\n.text:00000000004072f0\n.text:00000000004072f2\n.text:0000000000407300\n.text:0000000000407304\n.text:0000000000407308\n.text:000000000040730a\n.text:000000000040730d\n.text:0000000000407312\n.text:0000000000407314\n.text:0000000000407316\n.text:0000000000407319\n.text:000000000040731c\n.text:0000000000407320\n.text:0000000000407321\n.text:0000000000407323\n'
p811
tp812
sS'hash_insert'
p813
(S'\n__stdcall hash_insert(Hash_table * table, void * entry)\n'
p814
V\u000avoid * hash_insert(Hash_table *table,void *entry)\u000a\u000a{\u000a  int iVar1;\u000a  void *matched_ent;\u000a  void *local_10;\u000a  \u000a  iVar1 = hash_insert_if_absent(table,entry,&local_10);\u000a  if (iVar1 == -1) {\u000a    entry = (void *)0x0;\u000a  }\u000a  else {\u000a    if (iVar1 == 0) {\u000a      entry = local_10;\u000a    }\u000a  }\u000a  return entry;\u000a}\u000a\u000a
p815
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RSI\nLEA RDX,[RSP + 0x8]\nCALL 0x00406e40\nCMP EAX,-0x1\nJZ 0x00407131\nTEST EAX,EAX\nCMOVZ RBX,qword ptr [RSP + 0x8]\nJMP 0x00407133\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x10\nPOP RBX\nRET\n'
p816
S'53\n48 83 ec 10\n48 89 f3\n48 8d 54 24 08\ne8 1e fd ff ff\n83 f8 ff\n74 0a\n85 c0\n48 0f 44 5c 24 08\neb 02\n31 db\n48 89 d8\n48 83 c4 10\n5b\nc3\n'
p817
S'.text:0000000000407110\n.text:0000000000407111\n.text:0000000000407115\n.text:0000000000407118\n.text:000000000040711d\n.text:0000000000407122\n.text:0000000000407125\n.text:0000000000407127\n.text:0000000000407129\n.text:000000000040712f\n.text:0000000000407131\n.text:0000000000407133\n.text:0000000000407136\n.text:000000000040713a\n.text:000000000040713b\n'
p818
tp819
sS'gettext_quote'
p820
(S'\n__stdcall gettext_quote(char * msgid)\n'
p821
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_0040cd4e;\u000a        pcVar2 = &DAT_0040cd52;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p822
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x00401840\nCMP RAX,RBX\nJNZ 0x00408a98\nCALL 0x0040a1a0\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00408aa0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00408a48\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40cd3e\nMOV EAX,0x40cd42\nJMP 0x00408a94\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00408aa0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00408a86\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40cd4e\nMOV EAX,0x40cd52\nJMP 0x00408a94\nCMP R14D,0x9\nMOV ECX,0x40c3d2\nMOV EAX,0x40cd36\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p823
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 47 8e ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 99 17 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 3e cd 40 00\nb8 42 cd 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 4e cd 40 00\nb8 52 cd 40 00\neb 0e\n41 83 fe 09\nb9 d2 c3 40 00\nb8 36 cd 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p824
S'.text:00000000004089e0\n.text:00000000004089e1\n.text:00000000004089e3\n.text:00000000004089e4\n.text:00000000004089e7\n.text:00000000004089ea\n.text:00000000004089ec\n.text:00000000004089f1\n.text:00000000004089f4\n.text:00000000004089f9\n.text:00000000004089fc\n.text:0000000000408a02\n.text:0000000000408a07\n.text:0000000000408a0a\n.text:0000000000408a0f\n.text:0000000000408a14\n.text:0000000000408a19\n.text:0000000000408a1f\n.text:0000000000408a25\n.text:0000000000408a28\n.text:0000000000408a2a\n.text:0000000000408a2c\n.text:0000000000408a31\n.text:0000000000408a35\n.text:0000000000408a37\n.text:0000000000408a39\n.text:0000000000408a3c\n.text:0000000000408a41\n.text:0000000000408a46\n.text:0000000000408a48\n.text:0000000000408a4d\n.text:0000000000408a52\n.text:0000000000408a57\n.text:0000000000408a5d\n.text:0000000000408a63\n.text:0000000000408a66\n.text:0000000000408a68\n.text:0000000000408a6a\n.text:0000000000408a6f\n.text:0000000000408a73\n.text:0000000000408a75\n.text:0000000000408a77\n.text:0000000000408a7a\n.text:0000000000408a7f\n.text:0000000000408a84\n.text:0000000000408a86\n.text:0000000000408a8a\n.text:0000000000408a8f\n.text:0000000000408a94\n.text:0000000000408a98\n.text:0000000000408a99\n.text:0000000000408a9b\n.text:0000000000408a9c\n'
p825
tp826
sS'record_open_fd'
p827
(S'\n__stdcall record_open_fd(File_spec * f, off_t size, stat * st)\n'
p828
V\u000avoid record_open_fd(File_spec *f,off_t size,stat *st)\u000a\u000a{\u000a  stat *st_00;\u000a  int in_R8D;\u000a  timespec tVar1;\u000a  \u000a  f->fd = (int)size;\u000a  *(stat **)&f->size = st;\u000a  tVar1 = get_stat_mtime(st_00);\u000a  (f->mtime).tv_sec = SUB168((undefined  [16])tVar1,0);\u000a  (f->mtime).tv_nsec = SUB168((undefined  [16])tVar1 >> 0x40,0);\u000a  f->dev = st_00->st_dev;\u000a  f->ino = st_00->st_ino;\u000a  f->mode = st_00->st_mode;\u000a  f->blocking = in_R8D;\u000a  f->n_unchanged_stats = 0;\u000a  f->ignore = false;\u000a  return;\u000a}\u000a\u000a
p829
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,R8D\nMOV RBX,RCX\nMOV RBP,RDI\nMOV dword ptr [RBP + 0x38],ESI\nMOV qword ptr [RBP + 0x8],RDX\nMOV RDI,RBX\nCALL 0x00408ed0\nMOV qword ptr [RBP + 0x10],RAX\nMOV qword ptr [RBP + 0x18],RDX\nMOV RAX,qword ptr [RBX]\nMOV qword ptr [RBP + 0x20],RAX\nMOV RAX,qword ptr [RBX + 0x8]\nMOV qword ptr [RBP + 0x28],RAX\nMOV EAX,dword ptr [RBX + 0x18]\nMOV dword ptr [RBP + 0x30],EAX\nMOV dword ptr [RBP + 0x40],R14D\nMOV qword ptr [RBP + 0x58],0x0\nMOV byte ptr [RBP + 0x34],0x0\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p830
S'55\n41 56\n53\n45 89 c6\n48 89 cb\n48 89 fd\n89 75 38\n48 89 55 08\n48 89 df\ne8 64 50 00 00\n48 89 45 10\n48 89 55 18\n48 8b 03\n48 89 45 20\n48 8b 43 08\n48 89 45 28\n8b 43 18\n89 45 30\n44 89 75 40\n48 c7 45 58 00 00 00 00\nc6 45 34 00\n5b\n41 5e\n5d\nc3\n'
p831
S'.text:0000000000403e50\n.text:0000000000403e51\n.text:0000000000403e53\n.text:0000000000403e54\n.text:0000000000403e57\n.text:0000000000403e5a\n.text:0000000000403e5d\n.text:0000000000403e60\n.text:0000000000403e64\n.text:0000000000403e67\n.text:0000000000403e6c\n.text:0000000000403e70\n.text:0000000000403e74\n.text:0000000000403e77\n.text:0000000000403e7b\n.text:0000000000403e7f\n.text:0000000000403e83\n.text:0000000000403e86\n.text:0000000000403e89\n.text:0000000000403e8d\n.text:0000000000403e95\n.text:0000000000403e99\n.text:0000000000403e9a\n.text:0000000000403e9c\n.text:0000000000403e9d\n'
p832
tp833
sS'pipe_lines'
p834
(S'\n__stdcall pipe_lines(char * pretty_filename, uintmax_t n_lines, uintmax_t * read_pos)\n'
p835
V\u000a_Bool pipe_lines(char *pretty_filename,uintmax_t n_lines,uintmax_t *read_pos)\u000a\u000a{\u000a  long *plVar1;\u000a  uint uVar2;\u000a  long lVar3;\u000a  uintmax_t *puVar4;\u000a  uintmax_t *puVar5;\u000a  char *__ptr;\u000a  size_t __n;\u000a  void *pvVar6;\u000a  char *buffer;\u000a  uint *puVar7;\u000a  undefined8 uVar8;\u000a  char *buffer_00;\u000a  char cVar9;\u000a  long *in_RCX;\u000a  int __c;\u000a  uintmax_t *puVar10;\u000a  undefined uVar11;\u000a  char *local_58;\u000a  \u000a  buffer = (char *)xmalloc(0x2018);\u000a  *(undefined4 *)(buffer + 0x2000) = 0;\u000a  *(undefined4 *)(buffer + 0x2004) = 0;\u000a  *(undefined4 *)(buffer + 0x2008) = 0;\u000a  *(undefined4 *)(buffer + 0x200c) = 0;\u000a  *(undefined8 *)(buffer + 0x2010) = 0;\u000a  buffer_00 = (char *)xmalloc(0x2018);\u000a  puVar10 = (uintmax_t *)0x0;\u000a  local_58 = buffer;\u000a  do {\u000a    __ptr = buffer_00;\u000a    plVar1 = (long *)(__ptr + 0x2008);\u000a    while( true ) {\u000a      __n = safe_read((void *)(n_lines & 0xffffffff),(size_t)__ptr);\u000a      if (__n + 1 < 2) {\u000a        free(__ptr);\u000a        if (__n == 0xffffffffffffffff) {\u000a          puVar7 = (uint *)__errno_location();\u000a          uVar2 = *puVar7;\u000a          uVar11 = 0;\u000a          uVar8 = dcgettext(0,"error reading %s",5);\u000a          buffer_00 = quotearg_style((char *)0x4);\u000a          error(0,(ulong)uVar2,uVar8,buffer_00);\u000a        }\u000a        else {\u000a          uVar11 = 1;\u000a          if ((read_pos != (uintmax_t *)0x0) && (*(long *)(buffer + 0x2000) != 0)) {\u000a            cVar9 = '\u005cn';\u000a            if (line_end == 0) {\u000a              cVar9 = 0;\u000a            }\u000a            if (buffer[*(long *)(buffer + 0x2000) + -1] != cVar9) {\u000a              *(long *)(buffer + 0x2008) = *(long *)(buffer + 0x2008) + 1;\u000a              puVar10 = (uintmax_t *)((long)puVar10 + 1);\u000a            }\u000a            puVar5 = (uintmax_t *)((long)puVar10 - *(long *)(local_58 + 0x2008));\u000a            buffer_00 = local_58;\u000a            while (puVar4 = puVar5, read_pos < puVar4) {\u000a              buffer_00 = *(char **)(buffer_00 + 0x2010);\u000a              puVar5 = (uintmax_t *)((long)puVar4 - *(long *)(buffer_00 + 0x2008));\u000a              puVar10 = puVar4;\u000a            }\u000a            lVar3 = *(long *)(buffer_00 + 0x2000);\u000a            buffer = buffer_00;\u000a            if ((read_pos < puVar10) && (buffer = buffer_00, puVar10 != read_pos)) {\u000a              __c = 10;\u000a              if (line_end == 0) {\u000a                __c = 0;\u000a              }\u000a              read_pos = (uintmax_t *)((long)read_pos - (long)puVar10);\u000a              buffer = buffer_00;\u000a              do {\u000a                pvVar6 = memchr(buffer,__c,(size_t)(buffer_00 + lVar3 + -(long)buffer));\u000a                if (pvVar6 == (void *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a                  __assert_fail("beg","src/tail.c",0x2aa,\u000a                                "_Bool pipe_lines(const char *, int, uintmax_t, uintmax_t *)");\u000a                }\u000a                buffer = (char *)((long)pvVar6 + 1);\u000a                read_pos = (uintmax_t *)((long)read_pos + 1);\u000a              } while (read_pos != (uintmax_t *)0x0);\u000a            }\u000a            xwrite_stdout(buffer,(size_t)(buffer_00 + lVar3 + -(long)buffer));\u000a            buffer_00 = *(char **)(buffer_00 + 0x2010);\u000a            uVar11 = 1;\u000a            while (buffer_00 != (char *)0x0) {\u000a              xwrite_stdout(buffer_00,*(size_t *)(buffer_00 + 0x2000));\u000a              buffer_00 = *(char **)(buffer_00 + 0x2010);\u000a            }\u000a          }\u000a        }\u000a        while (local_58 != (char *)0x0) {\u000a          buffer_00 = *(char **)(local_58 + 0x2010);\u000a          free(local_58);\u000a          local_58 = buffer_00;\u000a        }\u000a        return (_Bool)uVar11;\u000a      }\u000a      *(size_t *)(__ptr + 0x2000) = __n;\u000a      *in_RCX = *in_RCX + __n;\u000a      *(undefined4 *)plVar1 = 0;\u000a      *(undefined4 *)(__ptr + 0x200c) = 0;\u000a      *(undefined4 *)(__ptr + 0x2010) = 0;\u000a      *(undefined4 *)(__ptr + 0x2014) = 0;\u000a      __c = 0;\u000a      if (line_end != 0) {\u000a        __c = 10;\u000a      }\u000a      pvVar6 = memchr(__ptr,__c,__n);\u000a      lVar3 = *(long *)(__ptr + 0x2008);\u000a      while (pvVar6 != (void *)0x0) {\u000a        *plVar1 = lVar3 + 1;\u000a        __c = 0;\u000a        if (line_end != 0) {\u000a          __c = 10;\u000a        }\u000a        pvVar6 = memchr((void *)((long)pvVar6 + 1),__c,\u000a                        (size_t)(__ptr + (__n - (long)(void *)((long)pvVar6 + 1))));\u000a        lVar3 = *plVar1;\u000a      }\u000a      puVar10 = (uintmax_t *)((long)puVar10 + lVar3);\u000a      if (0x1fff < *(long *)(buffer + 0x2000) + *(size_t *)(__ptr + 0x2000)) break;\u000a      memcpy(buffer + *(long *)(buffer + 0x2000),__ptr,*(size_t *)(__ptr + 0x2000));\u000a      *(long *)(buffer + 0x2000) = *(long *)(buffer + 0x2000) + *(long *)(__ptr + 0x2000);\u000a      *(long *)(buffer + 0x2008) = *(long *)(buffer + 0x2008) + *(long *)(__ptr + 0x2008);\u000a    }\u000a    *(char **)(buffer + 0x2010) = __ptr;\u000a    if (read_pos < (uintmax_t *)((long)puVar10 - *(long *)(local_58 + 0x2008))) {\u000a      buffer_00 = local_58;\u000a      buffer = __ptr;\u000a      puVar10 = (uintmax_t *)((long)puVar10 - *(long *)(local_58 + 0x2008));\u000a      local_58 = *(char **)(local_58 + 0x2010);\u000a    }\u000a    else {\u000a      buffer_00 = (char *)xmalloc(0x2018);\u000a      buffer = __ptr;\u000a    }\u000a  } while( true );\u000a}\u000a\u000a
p836
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV qword ptr [RSP + 0x20],RCX\nMOV qword ptr [RSP + 0x10],RDX\nMOV dword ptr [RSP + 0xc],ESI\nMOV qword ptr [RSP + 0x18],RDI\nMOV EDI,0x2018\nCALL 0x004094d0\nMOV RBP,RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [0x2000 + RBP],XMM0\nMOV qword ptr [0x2010 + RBP],0x0\nMOV EDI,0x2018\nCALL 0x004094d0\nXOR ECX,ECX\nMOV R12D,0xa\nMOV qword ptr [RSP],RBP\nJMP 0x00404840\nMOV RAX,RDX\nMOV RDX,qword ptr [0x2010 + RDX]\nMOV qword ptr [RSP],RDX\nNOP dword ptr [RAX]\nMOV R14,RCX\nJMP 0x0040485a\nMOV EDI,0x2018\nCALL 0x004094d0\nMOV R13,RBP\nMOV RBP,RAX\nLEA RBX,[0x2008 + RBP]\nJMP 0x00404897\nADD RDI,R13\nMOV RSI,RBP\nCALL 0x004019c0\nMOV RAX,qword ptr [0x2000 + RBP]\nADD qword ptr [0x2000 + R13],RAX\nMOV RAX,qword ptr [0x2008 + RBP]\nADD qword ptr [0x2008 + R13],RAX\nMOV EDX,0x2000\nMOV EDI,dword ptr [RSP + 0xc]\nMOV RSI,RBP\nCALL 0x00408de0\nMOV R15,RAX\nLEA RAX,[R15 + 0x1]\nCMP RAX,0x2\nJC 0x00404977\nMOV qword ptr [0x2000 + RBP],R15\nMOV RAX,qword ptr [RSP + 0x20]\nADD qword ptr [RAX],R15\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX],XMM0\nMOV AL,byte ptr [0x00610351]\nTEST AL,AL\nMOV ESI,0x0\nCMOVNZ ESI,R12D\nMOV RDI,RBP\nMOV RDX,R15\nCALL 0x00401940\nTEST RAX,RAX\nMOV RCX,qword ptr [0x2008 + RBP]\nJZ 0x00404931\nADD R15,RBP\nNOP dword ptr [RAX]\nINC RAX\nINC RCX\nMOV qword ptr [RBX],RCX\nMOVZX ECX,byte ptr [0x00610351]\nTEST CL,CL\nMOV ESI,0x0\nCMOVNZ ESI,R12D\nMOV RDX,R15\nSUB RDX,RAX\nMOV RDI,RAX\nCALL 0x00401940\nMOV RCX,qword ptr [RBX]\nTEST RAX,RAX\nJNZ 0x00404900\nADD R14,RCX\nMOV RDX,qword ptr [0x2000 + RBP]\nMOV RDI,qword ptr [0x2000 + R13]\nLEA RAX,[RDI + RDX*0x1]\nCMP RAX,0x1fff\nJBE 0x00404870\nMOV qword ptr [0x2010 + R13],RBP\nMOV RCX,R14\nMOV RDX,qword ptr [RSP]\nSUB RCX,qword ptr [0x2008 + RDX]\nCMP RCX,qword ptr [RSP + 0x10]\nJBE 0x00404850\nJMP 0x0040482b\nMOV RDI,RBP\nCALL 0x00401750\nCMP R15,-0x1\nJZ 0x00404a6a\nMOV RSI,qword ptr [RSP + 0x10]\nTEST RSI,RSI\nMOV R15B,0x1\nJZ 0x00404aaa\nMOV RAX,qword ptr [0x2000 + R13]\nTEST RAX,RAX\nJZ 0x00404aaa\nMOVSX EAX,byte ptr [R13 + RAX*0x1 + -0x1]\nMOV CL,byte ptr [0x00610351]\nXOR EDX,EDX\nTEST CL,CL\nMOV ECX,0xa\nCMOVZ ECX,EDX\nCMP EAX,ECX\nJZ 0x004049d0\nINC qword ptr [0x2008 + R13]\nINC R14\nMOV RAX,R14\nMOV R13,qword ptr [RSP]\nSUB RAX,qword ptr [0x2008 + R13]\nCMP RAX,RSI\nMOV RBX,R13\nJBE 0x00404a06\nMOV RBX,R13\nNOP dword ptr [RAX]\nMOV R14,RAX\nMOV RBX,qword ptr [0x2010 + RBX]\nSUB RAX,qword ptr [0x2008 + RBX]\nCMP RAX,RSI\nJA 0x004049f0\nMOV R12,qword ptr [0x2000 + RBX]\nADD R12,RBX\nCMP R14,RSI\nMOV RAX,RBX\nJBE 0x00404ab8\nJZ 0x00404ab5\nMOV AL,byte ptr [0x00610351]\nXOR ECX,ECX\nTEST AL,AL\nMOV R15D,0xa\nCMOVZ R15D,ECX\nSUB RSI,R14\nMOV RAX,RBX\nNOP dword ptr [RAX]\nMOV RBP,RSI\nMOV RDX,R12\nSUB RDX,RAX\nMOV RDI,RAX\nMOV ESI,R15D\nCALL 0x00401940\nTEST RAX,RAX\nJZ 0x00404b29\nINC RAX\nMOV RSI,RBP\nINC RSI\nJNZ 0x00404a40\nJMP 0x00404ab8\nCALL 0x00401770\nMOV R14D,dword ptr [RAX]\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x40c200\nMOV EDX,0x5\nCALL 0x00401840\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x18]\nCALL 0x004087b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,RBP\nCALL 0x00401af0\nMOV R13,qword ptr [RSP]\nTEST R13,R13\nJNZ 0x00404b00\nJMP 0x00404b17\nMOV RAX,RBX\nSUB R12,RAX\nMOV RDI,RAX\nMOV RSI,R12\nCALL 0x00404b50\nMOV RBP,qword ptr [0x2010 + RBX]\nMOV R15B,0x1\nTEST RBP,RBP\nJZ 0x00404afb\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RSI,qword ptr [0x2000 + RBP]\nMOV RDI,RBP\nCALL 0x00404b50\nMOV RBP,qword ptr [0x2010 + RBP]\nTEST RBP,RBP\nJNZ 0x00404ae0\nTEST R13,R13\nJZ 0x00404b17\nMOV RBX,qword ptr [0x2010 + R13]\nMOV RDI,R13\nCALL 0x00401750\nTEST RBX,RBX\nMOV R13,RBX\nJNZ 0x00404b00\nMOV EAX,R15D\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x40c30f\nMOV ESI,0x40c313\nMOV EDX,0x2aa\nMOV ECX,0x40c31e\nCALL 0x00401900\n'
p837
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 4c 24 20\n48 89 54 24 10\n89 74 24 0c\n48 89 7c 24 18\nbf 18 20 00 00\ne8 d5 4c 00 00\n48 89 c5\n0f 57 c0\n0f 11 85 00 20 00 00\n48 c7 85 10 20 00 00 00 00 00 00\nbf 18 20 00 00\ne8 b3 4c 00 00\n31 c9\n41 bc 0a 00 00 00\n48 89 2c 24\neb 15\n48 89 d0\n48 8b 92 10 20 00 00\n48 89 14 24\n0f 1f 80 00 00 00 00\n49 89 ce\neb 15\nbf 18 20 00 00\ne8 76 4c 00 00\n49 89 ed\n48 89 c5\n48 8d 9d 08 20 00 00\neb 2e\n4c 01 ef\n48 89 ee\ne8 45 d1 ff ff\n48 8b 85 00 20 00 00\n49 01 85 00 20 00 00\n48 8b 85 08 20 00 00\n49 01 85 08 20 00 00\nba 00 20 00 00\n8b 7c 24 0c\n48 89 ee\ne8 38 45 00 00\n49 89 c7\n49 8d 47 01\n48 83 f8 02\n0f 82 be 00 00 00\n4c 89 bd 00 20 00 00\n48 8b 44 24 20\n4c 01 38\n0f 57 c0\n0f 11 03\n8a 05 7d ba 20 00\n84 c0\nbe 00 00 00 00\n41 0f 45 f4\n48 89 ef\n4c 89 fa\ne8 56 d0 ff ff\n48 85 c0\n48 8b 8d 08 20 00 00\n74 3b\n49 01 ef\n0f 1f 80 00 00 00 00\n48 ff c0\n48 ff c1\n48 89 0b\n0f b6 0d 41 ba 20 00\n84 c9\nbe 00 00 00 00\n41 0f 45 f4\n4c 89 fa\n48 29 c2\n48 89 c7\ne8 17 d0 ff ff\n48 8b 0b\n48 85 c0\n75 cf\n49 01 ce\n48 8b 95 00 20 00 00\n49 8b bd 00 20 00 00\n48 8d 04 17\n48 3d ff 1f 00 00\n0f 86 1e ff ff ff\n49 89 ad 10 20 00 00\n4c 89 f1\n48 8b 14 24\n48 2b 8a 08 20 00 00\n48 3b 4c 24 10\n0f 86 de fe ff ff\ne9 b4 fe ff ff\n48 89 ef\ne8 d1 cd ff ff\n49 83 ff ff\n0f 84 e1 00 00 00\n48 8b 74 24 10\n48 85 f6\n41 b7 01\n0f 84 10 01 00 00\n49 8b 85 00 20 00 00\n48 85 c0\n0f 84 00 01 00 00\n41 0f be 44 05 ff\n8a 0d 9b b9 20 00\n31 d2\n84 c9\nb9 0a 00 00 00\n0f 44 ca\n39 c8\n74 0a\n49 ff 85 08 20 00 00\n49 ff c6\n4c 89 f0\n4c 8b 2c 24\n49 2b 85 08 20 00 00\n48 39 f0\n4c 89 eb\n76 20\n4c 89 eb\n0f 1f 80 00 00 00 00\n49 89 c6\n48 8b 9b 10 20 00 00\n48 2b 83 08 20 00 00\n48 39 f0\n77 ea\n4c 8b a3 00 20 00 00\n49 01 dc\n49 39 f6\n48 89 d8\n0f 86 9c 00 00 00\n0f 84 93 00 00 00\n8a 05 29 b9 20 00\n31 c9\n84 c0\n41 bf 0a 00 00 00\n44 0f 44 f9\n4c 29 f6\n48 89 d8\n0f 1f 40 00\n48 89 f5\n4c 89 e2\n48 29 c2\n48 89 c7\n44 89 fe\ne8 ec ce ff ff\n48 85 c0\n0f 84 cc 00 00 00\n48 ff c0\n48 89 ee\n48 ff c6\n75 d8\neb 4e\ne8 01 cd ff ff\n44 8b 30\n45 31 ff\n31 ff\nbe 00 c2 40 00\nba 05 00 00 00\ne8 ba cd ff ff\n48 89 c5\nbf 04 00 00 00\n48 8b 74 24 18\ne8 18 3d 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 f6\n48 89 ea\ne8 46 d0 ff ff\n4c 8b 2c 24\n4d 85 ed\n75 4d\neb 62\n48 89 d8\n49 29 c4\n48 89 c7\n4c 89 e6\ne8 8a 00 00 00\n48 8b ab 10 20 00 00\n41 b7 01\n48 85 ed\n74 26\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b b5 00 20 00 00\n48 89 ef\ne8 61 00 00 00\n48 8b ad 10 20 00 00\n48 85 ed\n75 e5\n4d 85 ed\n74 17\n49 8b 9d 10 20 00 00\n4c 89 ef\ne8 41 cc ff ff\n48 85 db\n49 89 dd\n75 e9\n44 89 f8\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 0f c3 40 00\nbe 13 c3 40 00\nba aa 02 00 00\nb9 1e c3 40 00\ne8 be cd ff ff\n'
p838
S'.text:00000000004047d0\n.text:00000000004047d1\n.text:00000000004047d3\n.text:00000000004047d5\n.text:00000000004047d7\n.text:00000000004047d9\n.text:00000000004047da\n.text:00000000004047de\n.text:00000000004047e3\n.text:00000000004047e8\n.text:00000000004047ec\n.text:00000000004047f1\n.text:00000000004047f6\n.text:00000000004047fb\n.text:00000000004047fe\n.text:0000000000404801\n.text:0000000000404808\n.text:0000000000404813\n.text:0000000000404818\n.text:000000000040481d\n.text:000000000040481f\n.text:0000000000404825\n.text:0000000000404829\n.text:000000000040482b\n.text:000000000040482e\n.text:0000000000404835\n.text:0000000000404839\n.text:0000000000404840\n.text:0000000000404843\n.text:0000000000404850\n.text:0000000000404855\n.text:000000000040485a\n.text:000000000040485d\n.text:0000000000404860\n.text:0000000000404867\n.text:0000000000404870\n.text:0000000000404873\n.text:0000000000404876\n.text:000000000040487b\n.text:0000000000404882\n.text:0000000000404889\n.text:0000000000404890\n.text:0000000000404897\n.text:000000000040489c\n.text:00000000004048a0\n.text:00000000004048a3\n.text:00000000004048a8\n.text:00000000004048ab\n.text:00000000004048af\n.text:00000000004048b3\n.text:00000000004048b9\n.text:00000000004048c0\n.text:00000000004048c5\n.text:00000000004048c8\n.text:00000000004048cb\n.text:00000000004048ce\n.text:00000000004048d4\n.text:00000000004048d6\n.text:00000000004048db\n.text:00000000004048df\n.text:00000000004048e2\n.text:00000000004048e5\n.text:00000000004048ea\n.text:00000000004048ed\n.text:00000000004048f4\n.text:00000000004048f6\n.text:00000000004048f9\n.text:0000000000404900\n.text:0000000000404903\n.text:0000000000404906\n.text:0000000000404909\n.text:0000000000404910\n.text:0000000000404912\n.text:0000000000404917\n.text:000000000040491b\n.text:000000000040491e\n.text:0000000000404921\n.text:0000000000404924\n.text:0000000000404929\n.text:000000000040492c\n.text:000000000040492f\n.text:0000000000404931\n.text:0000000000404934\n.text:000000000040493b\n.text:0000000000404942\n.text:0000000000404946\n.text:000000000040494c\n.text:0000000000404952\n.text:0000000000404959\n.text:000000000040495c\n.text:0000000000404960\n.text:0000000000404967\n.text:000000000040496c\n.text:0000000000404972\n.text:0000000000404977\n.text:000000000040497a\n.text:000000000040497f\n.text:0000000000404983\n.text:0000000000404989\n.text:000000000040498e\n.text:0000000000404991\n.text:0000000000404994\n.text:000000000040499a\n.text:00000000004049a1\n.text:00000000004049a4\n.text:00000000004049aa\n.text:00000000004049b0\n.text:00000000004049b6\n.text:00000000004049b8\n.text:00000000004049ba\n.text:00000000004049bf\n.text:00000000004049c2\n.text:00000000004049c4\n.text:00000000004049c6\n.text:00000000004049cd\n.text:00000000004049d0\n.text:00000000004049d3\n.text:00000000004049d7\n.text:00000000004049de\n.text:00000000004049e1\n.text:00000000004049e4\n.text:00000000004049e6\n.text:00000000004049e9\n.text:00000000004049f0\n.text:00000000004049f3\n.text:00000000004049fa\n.text:0000000000404a01\n.text:0000000000404a04\n.text:0000000000404a06\n.text:0000000000404a0d\n.text:0000000000404a10\n.text:0000000000404a13\n.text:0000000000404a16\n.text:0000000000404a1c\n.text:0000000000404a22\n.text:0000000000404a28\n.text:0000000000404a2a\n.text:0000000000404a2c\n.text:0000000000404a32\n.text:0000000000404a36\n.text:0000000000404a39\n.text:0000000000404a3c\n.text:0000000000404a40\n.text:0000000000404a43\n.text:0000000000404a46\n.text:0000000000404a49\n.text:0000000000404a4c\n.text:0000000000404a4f\n.text:0000000000404a54\n.text:0000000000404a57\n.text:0000000000404a5d\n.text:0000000000404a60\n.text:0000000000404a63\n.text:0000000000404a66\n.text:0000000000404a68\n.text:0000000000404a6a\n.text:0000000000404a6f\n.text:0000000000404a72\n.text:0000000000404a75\n.text:0000000000404a77\n.text:0000000000404a7c\n.text:0000000000404a81\n.text:0000000000404a86\n.text:0000000000404a89\n.text:0000000000404a8e\n.text:0000000000404a93\n.text:0000000000404a98\n.text:0000000000404a9b\n.text:0000000000404a9d\n.text:0000000000404a9f\n.text:0000000000404aa2\n.text:0000000000404aa5\n.text:0000000000404aaa\n.text:0000000000404aae\n.text:0000000000404ab1\n.text:0000000000404ab3\n.text:0000000000404ab5\n.text:0000000000404ab8\n.text:0000000000404abb\n.text:0000000000404abe\n.text:0000000000404ac1\n.text:0000000000404ac6\n.text:0000000000404acd\n.text:0000000000404ad0\n.text:0000000000404ad3\n.text:0000000000404ad5\n.text:0000000000404ae0\n.text:0000000000404ae7\n.text:0000000000404aea\n.text:0000000000404aef\n.text:0000000000404af6\n.text:0000000000404af9\n.text:0000000000404afb\n.text:0000000000404afe\n.text:0000000000404b00\n.text:0000000000404b07\n.text:0000000000404b0a\n.text:0000000000404b0f\n.text:0000000000404b12\n.text:0000000000404b15\n.text:0000000000404b17\n.text:0000000000404b1a\n.text:0000000000404b1e\n.text:0000000000404b1f\n.text:0000000000404b21\n.text:0000000000404b23\n.text:0000000000404b25\n.text:0000000000404b27\n.text:0000000000404b28\n.text:0000000000404b29\n.text:0000000000404b2e\n.text:0000000000404b33\n.text:0000000000404b38\n.text:0000000000404b3d\n'
p839
tp840
sS'fclose'
p841
(S'\n__stdcall fclose(FILE * __stream)\n'
p842
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_00610088)();\u000a  return iVar1;\u000a}\u000a\u000a
p843
S'JMP qword ptr [0x00610088]\n'
p844
S'ff 25 62 e8 20 00\n'
p845
S'.plt:0000000000401820\n'
p846
tp847
sS'__ctype_get_mb_cur_max'
p848
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p849
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_006100a0)();\u000a  return sVar1;\u000a}\u000a\u000a
p850
S'JMP qword ptr [0x006100a0]\n'
p851
S'ff 25 4a e8 20 00\n'
p852
S'.plt:0000000000401850\n'
p853
tp854
sS'lstat'
p855
(S'\n__stdcall lstat(char * __file, stat * __buf)\n'
p856
V\u000aint lstat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___lxstat_006100b0)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p857
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x00401870\n'
p858
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 70 71 ff ff\n'
p859
S'.text:000000000040a6f0\n.text:000000000040a6f3\n.text:000000000040a6f6\n.text:000000000040a6fb\n'
p860
tp861
sS'quotearg_n_style'
p862
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p863
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p864
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00408710\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x004084e0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p865
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p866
S'.text:00000000004086d0\n.text:00000000004086d1\n.text:00000000004086d3\n.text:00000000004086d4\n.text:00000000004086d8\n.text:00000000004086db\n.text:00000000004086dd\n.text:00000000004086e2\n.text:00000000004086e5\n.text:00000000004086ea\n.text:00000000004086f1\n.text:00000000004086f3\n.text:00000000004086f6\n.text:00000000004086f9\n.text:00000000004086fe\n.text:0000000000408702\n.text:0000000000408703\n.text:0000000000408705\n.text:0000000000408706\n'
p867
tp868
sS'hash_clear'
p869
(S'\n__stdcall hash_clear(Hash_table * table)\n'
p870
V\u000avoid hash_clear(Hash_table *table)\u000a\u000a{\u000a  void (*pVar1)(void *);\u000a  hash_entry *phVar2;\u000a  hash_entry *phVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar4 = table->bucket;\u000a  if (phVar4 < table->bucket_limit) {\u000a    do {\u000a      if (phVar4->data != (void *)0x0) {\u000a        pVar1 = table->data_freer;\u000a        phVar3 = phVar4->next;\u000a        while (phVar3 != (hash_entry *)0x0) {\u000a          if (pVar1 != (void (*)(void *))0x0) {\u000a            (*pVar1)(phVar3->data);\u000a          }\u000a          phVar3->data = (void *)0x0;\u000a          phVar2 = phVar3->next;\u000a          phVar3->next = table->free_entry_list;\u000a          table->free_entry_list = phVar3;\u000a          pVar1 = table->data_freer;\u000a          phVar3 = phVar2;\u000a        }\u000a        if (pVar1 != (void (*)(void *))0x0) {\u000a          (*pVar1)(phVar4->data);\u000a        }\u000a        *(undefined4 *)&phVar4->data = 0;\u000a        *(undefined4 *)((long)&phVar4->data + 4) = 0;\u000a        *(undefined4 *)&phVar4->next = 0;\u000a        *(undefined4 *)((long)&phVar4->next + 4) = 0;\u000a      }\u000a      phVar4 = phVar4 + 1;\u000a    } while (phVar4 < table->bucket_limit);\u000a  }\u000a  *(undefined4 *)&table->n_buckets_used = 0;\u000a  *(undefined4 *)((long)&table->n_buckets_used + 4) = 0;\u000a  *(undefined4 *)&table->n_entries = 0;\u000a  *(undefined4 *)((long)&table->n_entries + 4) = 0;\u000a  return;\u000a}\u000a\u000a
p871
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x00406a9a\nJMP 0x00406af5\nTEST CL,CL\nJZ 0x00406a89\nMOV RDI,qword ptr [R14]\nCALL RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R14],XMM0\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x00406af5\nCMP qword ptr [R14],0x0\nJZ 0x00406a90\nMOV RBX,qword ptr [R14 + 0x8]\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nSETNZ CL\nTEST RBX,RBX\nJZ 0x00406a80\nNOP dword ptr CS:[RAX + RAX*0x1]\nTEST CL,0x1\nJZ 0x00406aca\nMOV RDI,qword ptr [RBX]\nCALL RAX\nMOV qword ptr [RBX],0x0\nMOV RDX,qword ptr [RBX + 0x8]\nMOV RAX,qword ptr [R15 + 0x48]\nMOV qword ptr [RBX + 0x8],RAX\nMOV qword ptr [R15 + 0x48],RBX\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nSETNZ CL\nTEST RDX,RDX\nMOV RBX,RDX\nJNZ 0x00406ac0\nJMP 0x00406a80\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R15 + 0x18],XMM0\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p872
S'41 57\n41 56\n53\n49 89 ff\n4d 8b 37\n4d 3b 77 08\n72 29\ne9 7f 00 00 00\n84 c9\n74 05\n49 8b 3e\nff d0\n0f 57 c0\n41 0f 11 06\n49 83 c6 10\n4d 3b 77 08\n73 5b\n49 83 3e 00\n74 f0\n49 8b 5e 08\n49 8b 47 40\n48 85 c0\n0f 95 c1\n48 85 db\n74 cd\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\nf6 c1 01\n74 05\n48 8b 3b\nff d0\n48 c7 03 00 00 00 00\n48 8b 53 08\n49 8b 47 48\n48 89 43 08\n49 89 5f 48\n49 8b 47 40\n48 85 c0\n0f 95 c1\n48 85 d2\n48 89 d3\n75 cd\neb 8b\n0f 57 c0\n41 0f 11 47 18\n5b\n41 5e\n41 5f\nc3\n'
p873
S'.text:0000000000406a60\n.text:0000000000406a62\n.text:0000000000406a64\n.text:0000000000406a65\n.text:0000000000406a68\n.text:0000000000406a6b\n.text:0000000000406a6f\n.text:0000000000406a71\n.text:0000000000406a80\n.text:0000000000406a82\n.text:0000000000406a84\n.text:0000000000406a87\n.text:0000000000406a89\n.text:0000000000406a8c\n.text:0000000000406a90\n.text:0000000000406a94\n.text:0000000000406a98\n.text:0000000000406a9a\n.text:0000000000406a9e\n.text:0000000000406aa0\n.text:0000000000406aa4\n.text:0000000000406aa8\n.text:0000000000406aab\n.text:0000000000406aae\n.text:0000000000406ab1\n.text:0000000000406ab3\n.text:0000000000406ac0\n.text:0000000000406ac3\n.text:0000000000406ac5\n.text:0000000000406ac8\n.text:0000000000406aca\n.text:0000000000406ad1\n.text:0000000000406ad5\n.text:0000000000406ad9\n.text:0000000000406add\n.text:0000000000406ae1\n.text:0000000000406ae5\n.text:0000000000406ae8\n.text:0000000000406aeb\n.text:0000000000406aee\n.text:0000000000406af1\n.text:0000000000406af3\n.text:0000000000406af5\n.text:0000000000406af8\n.text:0000000000406afd\n.text:0000000000406afe\n.text:0000000000406b00\n.text:0000000000406b02\n'
p874
tp875
sS'dir_len'
p876
(S'\n__stdcall dir_len(char * file)\n'
p877
V\u000asize_t dir_len(char *file)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  char *pcVar3;\u000a  char *pcVar4;\u000a  \u000a  cVar2 = *file;\u000a  pcVar3 = last_component(file);\u000a  pcVar3 = pcVar3 + -(long)file;\u000a  do {\u000a    pcVar4 = pcVar3;\u000a    if (pcVar3 <= (char *)(ulong)(cVar2 == '/')) {\u000a      return (size_t)pcVar4;\u000a    }\u000a    pcVar1 = pcVar3 + (long)(file + -1);\u000a    pcVar3 = pcVar3 + -1;\u000a  } while (*pcVar1 == '/');\u000a  return (size_t)pcVar4;\u000a}\u000a\u000a
p878
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nXOR R14D,R14D\nCMP byte ptr [RBX],0x2f\nSETZ R14B\nCALL 0x004062b0\nMOV RCX,RAX\nSUB RCX,RBX\nNOP dword ptr [RAX]\nMOV RAX,RCX\nCMP R14,RAX\nJNC 0x00406243\nLEA RCX,[RAX + -0x1]\nCMP byte ptr [RBX + RAX*0x1 + -0x1],0x2f\nJZ 0x00406230\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p879
S'41 56\n53\n50\n48 89 fb\n45 31 f6\n80 3b 2f\n41 0f 94 c6\ne8 8a 00 00 00\n48 89 c1\n48 29 d9\n0f 1f 40 00\n48 89 c8\n49 39 c6\n73 0b\n48 8d 48 ff\n80 7c 03 ff 2f\n74 ed\n48 83 c4 08\n5b\n41 5e\nc3\n'
p880
S'.text:0000000000406210\n.text:0000000000406212\n.text:0000000000406213\n.text:0000000000406214\n.text:0000000000406217\n.text:000000000040621a\n.text:000000000040621d\n.text:0000000000406221\n.text:0000000000406226\n.text:0000000000406229\n.text:000000000040622c\n.text:0000000000406230\n.text:0000000000406233\n.text:0000000000406236\n.text:0000000000406238\n.text:000000000040623c\n.text:0000000000406241\n.text:0000000000406243\n.text:0000000000406247\n.text:0000000000406248\n.text:000000000040624a\n'
p881
tp882
sS'raw_hasher'
p883
(S'\n__stdcall raw_hasher(void * data, size_t n)\n'
p884
V\u000asize_t raw_hasher(void *data,size_t n)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = rotr_sz((size_t)data);\u000a  return sVar1 % n;\u000a}\u000a\u000a
p885
S'PUSH RBX\nMOV RBX,RSI\nMOV ESI,0x3\nCALL 0x00409e90\nXOR EDX,EDX\nDIV RBX\nMOV RAX,RDX\nPOP RBX\nRET\n'
p886
S'53\n48 89 f3\nbe 03 00 00 00\ne8 62 35 00 00\n31 d2\n48 f7 f3\n48 89 d0\n5b\nc3\n'
p887
S'.text:0000000000406920\n.text:0000000000406921\n.text:0000000000406924\n.text:0000000000406929\n.text:000000000040692e\n.text:0000000000406930\n.text:0000000000406933\n.text:0000000000406936\n.text:0000000000406937\n'
p888
tp889
sS'quote_n'
p890
(S'\n__stdcall quote_n(char * arg)\n'
p891
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p892
S'MOV RDX,-0x1\nJMP 0x004089a0\n'
p893
S'48 c7 c2 ff ff ff ff\neb d7\n'
p894
S'.text:00000000004089c0\n.text:00000000004089c7\n'
p895
tp896
sS'quotearg_alloc'
p897
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p898
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p899
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00408350\n'
p900
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p901
S'.text:0000000000408340\n.text:0000000000408343\n.text:0000000000408345\n.text:0000000000408348\n'
p902
tp903
sS'close_stdout_set_file_name'
p904
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p905
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p906
S'MOV qword ptr [0x00610368],RDI\nRET\n'
p907
S'48 89 3d 31 a2 20 00\nc3\n'
p908
S'.text:0000000000406130\n.text:0000000000406137\n'
p909
tp910
sS'any_remote_file'
p911
(S'\n__stdcall any_remote_file(File_spec * f, size_t n_files)\n'
p912
V\u000a_Bool any_remote_file(File_spec *f,size_t n_files)\u000a\u000a{\u000a  ulong uVar1;\u000a  int *piVar2;\u000a  \u000a  if (n_files != 0) {\u000a    piVar2 = &f->fd;\u000a    uVar1 = 0;\u000a    do {\u000a      if ((-1 < *piVar2) && (*(char *)((long)piVar2 + -3) != 0)) {\u000a        return true;\u000a      }\u000a      uVar1 = uVar1 + 1;\u000a      piVar2 = piVar2 + 0x18;\u000a    } while (uVar1 < n_files);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p913
S'TEST RSI,RSI\nJZ 0x00402dd7\nADD RDI,0x38\nXOR EAX,EAX\nNOP dword ptr [RAX + RAX*0x1]\nCMP dword ptr [RDI],0x0\nJS 0x00402dcb\nCMP byte ptr [RDI + -0x3],0x0\nJNZ 0x00402dda\nINC RAX\nADD RDI,0x60\nCMP RAX,RSI\nJC 0x00402dc0\nXOR EAX,EAX\nRET\nMOV AL,0x1\nRET\n'
p914
S'48 85 f6\n74 22\n48 83 c7 38\n31 c0\n0f 1f 44 00 00\n83 3f 00\n78 06\n80 7f fd 00\n75 0f\n48 ff c0\n48 83 c7 60\n48 39 f0\n72 e9\n31 c0\nc3\nb0 01\nc3\n'
p915
S'.text:0000000000402db0\n.text:0000000000402db3\n.text:0000000000402db5\n.text:0000000000402db9\n.text:0000000000402dbb\n.text:0000000000402dc0\n.text:0000000000402dc3\n.text:0000000000402dc5\n.text:0000000000402dc9\n.text:0000000000402dcb\n.text:0000000000402dce\n.text:0000000000402dd2\n.text:0000000000402dd5\n.text:0000000000402dd7\n.text:0000000000402dd9\n.text:0000000000402dda\n.text:0000000000402ddc\n'
p916
tp917
sS'check_tuning'
p918
(S'\n__stdcall check_tuning(Hash_table * table)\n'
p919
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000a_Bool check_tuning(Hash_table *table)\u000a\u000a{\u000a  float fVar1;\u000a  Hash_tuning *pHVar2;\u000a  undefined uVar3;\u000a  float fVar4;\u000a  \u000a  pHVar2 = table->tuning;\u000a  uVar3 = 1;\u000a  if ((pHVar2 != &default_tuning) &&\u000a     ((((fVar1 = pHVar2->growth_threshold, fVar1 <= _DAT_0040c718 || (DAT_0040c71c <= fVar1)) ||\u000a       (pHVar2->growth_factor <= _DAT_0040c720)) ||\u000a      (((pHVar2->shrink_threshold < 0.00000000 ||\u000a        (fVar4 = pHVar2->shrink_threshold + _DAT_0040c718, fVar1 <= fVar4)) ||\u000a       ((DAT_0040c724 < pHVar2->shrink_factor || (pHVar2->shrink_factor <= fVar4)))))))) {\u000a    table->tuning = &default_tuning;\u000a    uVar3 = 0;\u000a  }\u000a  return (_Bool)uVar3;\u000a}\u000a\u000a
p920
S'MOV RCX,qword ptr [RDI + 0x28]\nMOV EDX,0x40c79c\nMOV AL,0x1\nCMP RCX,RDX\nJZ 0x004069c3\nMOVSS XMM0,dword ptr [RCX + 0x8]\nUCOMISS XMM0,dword ptr [0x0040c718]\nJBE 0x004069b9\nMOVSS XMM1,dword ptr [0x0040c71c]\nUCOMISS XMM1,XMM0\nJBE 0x004069b9\nMOVSS XMM1,dword ptr [RCX + 0xc]\nUCOMISS XMM1,dword ptr [0x0040c720]\nJBE 0x004069b9\nMOVSS XMM1,dword ptr [RCX]\nXORPS XMM2,XMM2\nUCOMISS XMM1,XMM2\nJC 0x004069b9\nADDSS XMM1,dword ptr [0x0040c718]\nUCOMISS XMM0,XMM1\nJBE 0x004069b9\nMOVSS XMM0,dword ptr [RCX + 0x4]\nMOVSS XMM2,dword ptr [0x0040c724]\nUCOMISS XMM2,XMM0\nJC 0x004069b9\nUCOMISS XMM0,XMM1\nJA 0x004069c3\nMOV qword ptr [RDI + 0x28],0x40c79c\nXOR EAX,EAX\nRET\n'
p921
S'48 8b 4f 28\nba 9c c7 40 00\nb0 01\n48 39 d1\n74 63\nf3 0f 10 41 08\n0f 2e 05 ac 5d 00 00\n76 4b\nf3 0f 10 0d a6 5d 00 00\n0f 2e c8\n76 3e\nf3 0f 10 49 0c\n0f 2e 0d 99 5d 00 00\n76 30\nf3 0f 10 09\n0f 57 d2\n0f 2e ca\n72 24\nf3 0f 58 0d 7b 5d 00 00\n0f 2e c1\n76 17\nf3 0f 10 41 04\nf3 0f 10 15 75 5d 00 00\n0f 2e d0\n72 05\n0f 2e c1\n77 0a\n48 c7 47 28 9c c7 40 00\n31 c0\nc3\n'
p922
S'.text:0000000000406950\n.text:0000000000406954\n.text:0000000000406959\n.text:000000000040695b\n.text:000000000040695e\n.text:0000000000406960\n.text:0000000000406965\n.text:000000000040696c\n.text:000000000040696e\n.text:0000000000406976\n.text:0000000000406979\n.text:000000000040697b\n.text:0000000000406980\n.text:0000000000406987\n.text:0000000000406989\n.text:000000000040698d\n.text:0000000000406990\n.text:0000000000406993\n.text:0000000000406995\n.text:000000000040699d\n.text:00000000004069a0\n.text:00000000004069a2\n.text:00000000004069a7\n.text:00000000004069af\n.text:00000000004069b2\n.text:00000000004069b4\n.text:00000000004069b7\n.text:00000000004069b9\n.text:00000000004069c1\n.text:00000000004069c3\n'
p923
tp924
sS'__libc_csu_init'
p925
(S'\n__stdcall __libc_csu_init()\n'
p926
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p927
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x60fe08]\nPUSH RBP\nLEA RBP,[0x60fe10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401710\nTEST RBP,RBP\nJZ 0x0040a676\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x0040a660\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p928
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 d6 57 20 00\n55\n48 8d 2d d6 57 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 bf 70 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p929
S'.text:000000000040a620\n.text:000000000040a622\n.text:000000000040a624\n.text:000000000040a627\n.text:000000000040a629\n.text:000000000040a62b\n.text:000000000040a632\n.text:000000000040a633\n.text:000000000040a63a\n.text:000000000040a63b\n.text:000000000040a63e\n.text:000000000040a641\n.text:000000000040a644\n.text:000000000040a648\n.text:000000000040a64c\n.text:000000000040a651\n.text:000000000040a654\n.text:000000000040a656\n.text:000000000040a658\n.text:000000000040a660\n.text:000000000040a663\n.text:000000000040a666\n.text:000000000040a669\n.text:000000000040a66d\n.text:000000000040a671\n.text:000000000040a674\n.text:000000000040a676\n.text:000000000040a67a\n.text:000000000040a67b\n.text:000000000040a67c\n.text:000000000040a67e\n.text:000000000040a680\n.text:000000000040a682\n.text:000000000040a684\n'
p930
tp931
sS'fflush_unlocked'
p932
(S'\n__stdcall fflush_unlocked(FILE * __stream)\n'
p933
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fflush_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fflush_unlocked_00610240)();\u000a  return iVar1;\u000a}\u000a\u000a
p934
S'JMP qword ptr [0x00610240]\n'
p935
S'ff 25 aa e6 20 00\n'
p936
S'.plt:0000000000401b90\n'
p937
tp938
sS'select'
p939
(S'\n__stdcall select(int __nfds, fd_set * __readfds, fd_set * __writefds, fd_set * __exceptfds, timeval * __timeout)\n'
p940
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint select(int __nfds,fd_set *__readfds,fd_set *__writefds,fd_set *__exceptfds,timeval *__timeout)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_select_00610178)();\u000a  return iVar1;\u000a}\u000a\u000a
p941
S'JMP qword ptr [0x00610178]\n'
p942
S'ff 25 72 e7 20 00\n'
p943
S'.plt:0000000000401a00\n'
p944
tp945
sS'argmatch_to_argument'
p946
(S'\n__stdcall argmatch_to_argument(char * value, char * * arglist, char * vallist, size_t valsize)\n'
p947
V\u000achar * argmatch_to_argument(char *value,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  \u000a  pcVar2 = *arglist;\u000a  if (pcVar2 != (char *)0x0) {\u000a    arglist = arglist + 1;\u000a    do {\u000a      iVar1 = memcmp(value,vallist,valsize);\u000a      if (iVar1 == 0) {\u000a        return pcVar2;\u000a      }\u000a      pcVar2 = *arglist;\u000a      arglist = arglist + 1;\u000a      vallist = vallist + valsize;\u000a    } while (pcVar2 != (char *)0x0);\u000a  }\u000a  return (char *)0x0;\u000a}\u000a\u000a
p948
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R14,RCX\nMOV R12,RDX\nMOV RBX,RSI\nMOV R13,RDI\nMOV R15,qword ptr [RBX]\nTEST R15,R15\nJZ 0x004060a1\nADD RBX,0x8\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R14\nCALL 0x00401960\nTEST EAX,EAX\nJZ 0x004060a4\nMOV R15,qword ptr [RBX]\nADD RBX,0x8\nADD R12,R14\nTEST R15,R15\nJNZ 0x00406080\nXOR R15D,R15D\nMOV RAX,R15\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p949
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 ce\n49 89 d4\n48 89 f3\n49 89 fd\n4c 8b 3b\n4d 85 ff\n74 34\n48 83 c3 08\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ef\n4c 89 e6\n4c 89 f2\ne8 d2 b8 ff ff\n85 c0\n74 12\n4c 8b 3b\n48 83 c3 08\n4d 01 f4\n4d 85 ff\n75 df\n45 31 ff\n4c 89 f8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p950
S'.text:0000000000406050\n.text:0000000000406052\n.text:0000000000406054\n.text:0000000000406056\n.text:0000000000406058\n.text:0000000000406059\n.text:000000000040605c\n.text:000000000040605f\n.text:0000000000406062\n.text:0000000000406065\n.text:0000000000406068\n.text:000000000040606b\n.text:000000000040606d\n.text:0000000000406071\n.text:0000000000406080\n.text:0000000000406083\n.text:0000000000406086\n.text:0000000000406089\n.text:000000000040608e\n.text:0000000000406090\n.text:0000000000406092\n.text:0000000000406095\n.text:0000000000406099\n.text:000000000040609c\n.text:000000000040609f\n.text:00000000004060a1\n.text:00000000004060a4\n.text:00000000004060a7\n.text:00000000004060a8\n.text:00000000004060aa\n.text:00000000004060ac\n.text:00000000004060ae\n.text:00000000004060b0\n'
p951
tp952
sS'c_isdigit'
p953
(S'\n__stdcall c_isdigit()\n'
p954
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p955
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p956
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p957
S'.text:0000000000409fa0\n.text:0000000000409fa3\n.text:0000000000409fa6\n.text:0000000000409fa9\n'
p958
tp959
sS'hash_do_for_each'
p960
(S'\n__stdcall hash_do_for_each(Hash_table * table, Hash_processor * processor, void * processor_data)\n'
p961
V\u000asize_t hash_do_for_each(Hash_table *table,_Bool (*processor)(void *,void *),void *processor_data)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  _Bool _Var2;\u000a  size_t sVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar4 = table->bucket;\u000a  if (phVar4 < table->bucket_limit) {\u000a    sVar3 = 0;\u000a    do {\u000a      phVar1 = phVar4;\u000a      if (phVar4->data != (void *)0x0) {\u000a        while (phVar1 != (hash_entry *)0x0) {\u000a          _Var2 = (*processor)(phVar1->data,processor_data);\u000a          if (_Var2 == false) {\u000a            return sVar3;\u000a          }\u000a          sVar3 = sVar3 + 1;\u000a          phVar1 = phVar1->next;\u000a        }\u000a      }\u000a      phVar4 = phVar4 + 1;\u000a    } while (phVar4 < table->bucket_limit);\u000a  }\u000a  else {\u000a    sVar3 = 0;\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p962
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R15,RSI\nMOV R12,RDI\nMOV R13,qword ptr [R12]\nCMP R13,qword ptr [R12 + 0x8]\nJNC 0x004067c7\nXOR EBX,EBX\nCMP qword ptr [R13],0x0\nJZ 0x004067ba\nTEST R13,R13\nJZ 0x004067ba\nMOV RBP,R13\nMOV RDI,qword ptr [RBP]\nMOV RSI,R14\nCALL R15\nTEST AL,AL\nJZ 0x004067c9\nINC RBX\nMOV RBP,qword ptr [RBP + 0x8]\nTEST RBP,RBP\nJNZ 0x004067a0\nADD R13,0x10\nCMP R13,qword ptr [R12 + 0x8]\nJC 0x00406791\nJMP 0x004067c9\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p963
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f7\n49 89 fc\n4d 8b 2c 24\n4d 3b 6c 24 08\n73 38\n31 db\n49 83 7d 00 00\n74 22\n4d 85 ed\n74 1d\n4c 89 ed\n48 8b 7d 00\n4c 89 f6\n41 ff d7\n84 c0\n74 1b\n48 ff c3\n48 8b 6d 08\n48 85 ed\n75 e6\n49 83 c5 10\n4d 3b 6c 24 08\n72 cc\neb 02\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p964
S'.text:0000000000406770\n.text:0000000000406771\n.text:0000000000406773\n.text:0000000000406775\n.text:0000000000406777\n.text:0000000000406779\n.text:000000000040677a\n.text:000000000040677b\n.text:000000000040677e\n.text:0000000000406781\n.text:0000000000406784\n.text:0000000000406788\n.text:000000000040678d\n.text:000000000040678f\n.text:0000000000406791\n.text:0000000000406796\n.text:0000000000406798\n.text:000000000040679b\n.text:000000000040679d\n.text:00000000004067a0\n.text:00000000004067a4\n.text:00000000004067a7\n.text:00000000004067aa\n.text:00000000004067ac\n.text:00000000004067ae\n.text:00000000004067b1\n.text:00000000004067b5\n.text:00000000004067b8\n.text:00000000004067ba\n.text:00000000004067be\n.text:00000000004067c3\n.text:00000000004067c5\n.text:00000000004067c7\n.text:00000000004067c9\n.text:00000000004067cc\n.text:00000000004067d0\n.text:00000000004067d1\n.text:00000000004067d3\n.text:00000000004067d5\n.text:00000000004067d7\n.text:00000000004067d9\n.text:00000000004067da\n'
p965
tp966
sS'usage'
p967
(S'\n__stdcall usage()\n'
p968
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,"Usage: %s [OPTION]... [FILE]...\u005cn",5);\u000a    __printf_chk(1,uVar1,program_name,uVar1);\u000a    uVar1 = dcgettext(0,\u000a                      "Print the last %d lines of each FILE to standard output.\u005cnWith more than one FILE, precede each with a header giving the file name.\u005cn"\u000a                      ,5);\u000a    __printf_chk(1,uVar1,10,uVar1);\u000a    emit_stdin_note();\u000a    emit_mandatory_arg_note();\u000a    __s = (char *)dcgettext(0,\u000a                            "  -c, --bytes=[+]NUM       output the last NUM bytes; or use -c +NUM to\u005cn                             output starting with byte NUM of each file\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -f, --follow[={name|descriptor}]\u005cn                           output appended data as the file grows;\u005cn                             an absent option argument means \u005c'descriptor\u005c'\u005cn  -F                       same as --follow=name --retry\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    uVar1 = dcgettext(0,\u000a                      "  -n, --lines=[+]NUM       output the last NUM lines, instead of the last %d;\u005cn                             or use -n +NUM to output starting with line NUM\u005cn      --max-unchanged-stats=N\u005cn                           with --follow=name, reopen a FILE which has not\u005cn                             changed size after N (default %d) iterations\u005cn                             to see if it has been unlinked or renamed\u005cn                             (this is the usual case of rotated log files);\u005cn                             with inotify, this option is rarely useful\u005cn"\u000a                      ,5);\u000a    __printf_chk(1,uVar1,10,5);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --pid=PID            with -f, terminate after process ID, PID dies\u005cn  -q, --quiet, --silent    never output headers giving file names\u005cn      --retry              keep trying to open a file if it is inaccessible\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -s, --sleep-interval=N   with -f, sleep for approximately N seconds\u005cn                             (default 1.0) between iterations;\u005cn                             with inotify and --pid=P, check process P at\u005cn                             least once every N seconds\u005cn  -v, --verbose            always output headers giving file names\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"  -z, --zero-terminated    line delimiter is NUL, not newline\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnNUM may have a multiplier suffix:\u005cnb 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024,\u005cnGB 1000*1000*1000, G 1024*1024*1024, and so on for T, P, E, Z, Y.\u005cn\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "With --follow (-f), tail defaults to following the file descriptor, which\u005cnmeans that even if a tail\u005c'ed file is renamed, tail will continue to track\u005cnits end.  This default behavior is not desirable when you really want to\u005cntrack the actual name of the file, not the file descriptor (e.g., log\u005cnrotation).  Use --follow=name in that case.  That causes tail to track the\u005cnnamed file in a way that accommodates renaming, removal and creation.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p969
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x00401e9d\nXOR EDI,EDI\nMOV ESI,0x40b340\nMOV EDX,0x5\nCALL 0x00401840\nMOV RCX,RAX\nMOV RDX,qword ptr [0x00610378]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401ae0\nXOR EDI,EDI\nMOV ESI,0x40b361\nMOV EDX,0x5\nCALL 0x00401840\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0xa\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401ae0\nCALL 0x00401ef0\nCALL 0x00401f20\nXOR EDI,EDI\nMOV ESI,0x40b3e5\nMOV EDX,0x5\nCALL 0x00401840\nMOV RSI,qword ptr [0x00610308]\nMOV RDI,RAX\nCALL 0x00401970\nXOR EDI,EDI\nMOV ESI,0x40b476\nMOV EDX,0x5\nCALL 0x00401840\nMOV RSI,qword ptr [0x00610308]\nMOV RDI,RAX\nCALL 0x00401970\nXOR EDI,EDI\nMOV ESI,0x40b560\nMOV EDX,0x5\nCALL 0x00401840\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0xa\nMOV ECX,0x5\nXOR EAX,EAX\nCALL 0x00401ae0\nXOR EDI,EDI\nMOV ESI,0x40b78a\nMOV EDX,0x5\nCALL 0x00401840\nMOV RSI,qword ptr [0x00610308]\nMOV RDI,RAX\nCALL 0x00401970\nXOR EDI,EDI\nMOV ESI,0x40b862\nMOV EDX,0x5\nCALL 0x00401840\nMOV RSI,qword ptr [0x00610308]\nMOV RDI,RAX\nCALL 0x00401970\nXOR EDI,EDI\nMOV ESI,0x40b9ad\nMOV EDX,0x5\nCALL 0x00401840\nMOV RSI,qword ptr [0x00610308]\nMOV RDI,RAX\nCALL 0x00401970\nXOR EDI,EDI\nMOV ESI,0x40b9ec\nMOV EDX,0x5\nCALL 0x00401840\nMOV RSI,qword ptr [0x00610308]\nMOV RDI,RAX\nCALL 0x00401970\nXOR EDI,EDI\nMOV ESI,0x40ba19\nMOV EDX,0x5\nCALL 0x00401840\nMOV RSI,qword ptr [0x00610308]\nMOV RDI,RAX\nCALL 0x00401970\nXOR EDI,EDI\nMOV ESI,0x40ba4f\nMOV EDX,0x5\nCALL 0x00401840\nMOV RSI,qword ptr [0x00610308]\nMOV RDI,RAX\nCALL 0x00401970\nXOR EDI,EDI\nMOV ESI,0x40bae9\nMOV EDX,0x5\nCALL 0x00401840\nMOV RSI,qword ptr [0x00610308]\nMOV RDI,RAX\nCALL 0x00401970\nCALL 0x00401f50\nMOV EDI,EBX\nCALL 0x00401b60\nCALL 0x00401eb0\nMOV EDI,EBX\nCALL 0x00401b60\n'
p970
S'53\n89 fb\n85 db\n0f 85 b2 01 00 00\n31 ff\nbe 40 b3 40 00\nba 05 00 00 00\ne8 44 fb ff ff\n48 89 c1\n48 8b 15 72 e6 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 cb fd ff ff\n31 ff\nbe 61 b3 40 00\nba 05 00 00 00\ne8 1a fb ff ff\n48 89 c1\nbf 01 00 00 00\nba 0a 00 00 00\n31 c0\n48 89 ce\ne8 a3 fd ff ff\ne8 ae 01 00 00\ne8 d9 01 00 00\n31 ff\nbe e5 b3 40 00\nba 05 00 00 00\ne8 e8 fa ff ff\n48 8b 35 a9 e5 20 00\n48 89 c7\ne8 09 fc ff ff\n31 ff\nbe 76 b4 40 00\nba 05 00 00 00\ne8 c8 fa ff ff\n48 8b 35 89 e5 20 00\n48 89 c7\ne8 e9 fb ff ff\n31 ff\nbe 60 b5 40 00\nba 05 00 00 00\ne8 a8 fa ff ff\n48 89 c6\nbf 01 00 00 00\nba 0a 00 00 00\nb9 05 00 00 00\n31 c0\ne8 2f fd ff ff\n31 ff\nbe 8a b7 40 00\nba 05 00 00 00\ne8 7e fa ff ff\n48 8b 35 3f e5 20 00\n48 89 c7\ne8 9f fb ff ff\n31 ff\nbe 62 b8 40 00\nba 05 00 00 00\ne8 5e fa ff ff\n48 8b 35 1f e5 20 00\n48 89 c7\ne8 7f fb ff ff\n31 ff\nbe ad b9 40 00\nba 05 00 00 00\ne8 3e fa ff ff\n48 8b 35 ff e4 20 00\n48 89 c7\ne8 5f fb ff ff\n31 ff\nbe ec b9 40 00\nba 05 00 00 00\ne8 1e fa ff ff\n48 8b 35 df e4 20 00\n48 89 c7\ne8 3f fb ff ff\n31 ff\nbe 19 ba 40 00\nba 05 00 00 00\ne8 fe f9 ff ff\n48 8b 35 bf e4 20 00\n48 89 c7\ne8 1f fb ff ff\n31 ff\nbe 4f ba 40 00\nba 05 00 00 00\ne8 de f9 ff ff\n48 8b 35 9f e4 20 00\n48 89 c7\ne8 ff fa ff ff\n31 ff\nbe e9 ba 40 00\nba 05 00 00 00\ne8 be f9 ff ff\n48 8b 35 7f e4 20 00\n48 89 c7\ne8 df fa ff ff\ne8 ba 00 00 00\n89 df\ne8 c3 fc ff ff\ne8 0e 00 00 00\n89 df\ne8 b7 fc ff ff\n'
p971
S'.text:0000000000401ce0\n.text:0000000000401ce1\n.text:0000000000401ce3\n.text:0000000000401ce5\n.text:0000000000401ceb\n.text:0000000000401ced\n.text:0000000000401cf2\n.text:0000000000401cf7\n.text:0000000000401cfc\n.text:0000000000401cff\n.text:0000000000401d06\n.text:0000000000401d0b\n.text:0000000000401d0d\n.text:0000000000401d10\n.text:0000000000401d15\n.text:0000000000401d17\n.text:0000000000401d1c\n.text:0000000000401d21\n.text:0000000000401d26\n.text:0000000000401d29\n.text:0000000000401d2e\n.text:0000000000401d33\n.text:0000000000401d35\n.text:0000000000401d38\n.text:0000000000401d3d\n.text:0000000000401d42\n.text:0000000000401d47\n.text:0000000000401d49\n.text:0000000000401d4e\n.text:0000000000401d53\n.text:0000000000401d58\n.text:0000000000401d5f\n.text:0000000000401d62\n.text:0000000000401d67\n.text:0000000000401d69\n.text:0000000000401d6e\n.text:0000000000401d73\n.text:0000000000401d78\n.text:0000000000401d7f\n.text:0000000000401d82\n.text:0000000000401d87\n.text:0000000000401d89\n.text:0000000000401d8e\n.text:0000000000401d93\n.text:0000000000401d98\n.text:0000000000401d9b\n.text:0000000000401da0\n.text:0000000000401da5\n.text:0000000000401daa\n.text:0000000000401dac\n.text:0000000000401db1\n.text:0000000000401db3\n.text:0000000000401db8\n.text:0000000000401dbd\n.text:0000000000401dc2\n.text:0000000000401dc9\n.text:0000000000401dcc\n.text:0000000000401dd1\n.text:0000000000401dd3\n.text:0000000000401dd8\n.text:0000000000401ddd\n.text:0000000000401de2\n.text:0000000000401de9\n.text:0000000000401dec\n.text:0000000000401df1\n.text:0000000000401df3\n.text:0000000000401df8\n.text:0000000000401dfd\n.text:0000000000401e02\n.text:0000000000401e09\n.text:0000000000401e0c\n.text:0000000000401e11\n.text:0000000000401e13\n.text:0000000000401e18\n.text:0000000000401e1d\n.text:0000000000401e22\n.text:0000000000401e29\n.text:0000000000401e2c\n.text:0000000000401e31\n.text:0000000000401e33\n.text:0000000000401e38\n.text:0000000000401e3d\n.text:0000000000401e42\n.text:0000000000401e49\n.text:0000000000401e4c\n.text:0000000000401e51\n.text:0000000000401e53\n.text:0000000000401e58\n.text:0000000000401e5d\n.text:0000000000401e62\n.text:0000000000401e69\n.text:0000000000401e6c\n.text:0000000000401e71\n.text:0000000000401e73\n.text:0000000000401e78\n.text:0000000000401e7d\n.text:0000000000401e82\n.text:0000000000401e89\n.text:0000000000401e8c\n.text:0000000000401e91\n.text:0000000000401e96\n.text:0000000000401e98\n.text:0000000000401e9d\n.text:0000000000401ea2\n.text:0000000000401ea4\n'
p972
tp973
sS'get_stat_ctime_ns'
p974
(S'\n__stdcall get_stat_ctime_ns(stat * st)\n'
p975
V\u000along get_stat_ctime_ns(stat *st)\u000a\u000a{\u000a  return (st->st_ctim).tv_nsec;\u000a}\u000a\u000a
p976
S'MOV RAX,qword ptr [RDI + 0x70]\nRET\n'
p977
S'48 8b 47 70\nc3\n'
p978
S'.text:0000000000408e80\n.text:0000000000408e84\n'
p979
tp980
sS'quoting_options_from_style'
p981
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p982
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p983
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x0040875d\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00401760\n'
p984
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 fe 8f ff ff\n'
p985
S'.text:0000000000408710\n.text:0000000000408714\n.text:0000000000408717\n.text:000000000040871c\n.text:0000000000408721\n.text:0000000000408725\n.text:000000000040872d\n.text:0000000000408730\n.text:0000000000408732\n.text:0000000000408734\n.text:0000000000408738\n.text:000000000040873b\n.text:000000000040873f\n.text:0000000000408744\n.text:0000000000408749\n.text:000000000040874d\n.text:0000000000408751\n.text:0000000000408755\n.text:0000000000408758\n.text:000000000040875c\n.text:000000000040875d\n'
p986
tp987
sS'strcpy'
p988
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p989
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_00610048)();\u000a  return pcVar1;\u000a}\u000a\u000a
p990
S'JMP qword ptr [0x00610048]\n'
p991
S'ff 25 a2 e8 20 00\n'
p992
S'.plt:00000000004017a0\n'
p993
tp994
sS'get_stat_mtime_ns'
p995
(S'\n__stdcall get_stat_mtime_ns(stat * st)\n'
p996
V\u000along get_stat_mtime_ns(stat *st)\u000a\u000a{\u000a  return (st->st_mtim).tv_nsec;\u000a}\u000a\u000a
p997
S'MOV RAX,qword ptr [RDI + 0x60]\nRET\n'
p998
S'48 8b 47 60\nc3\n'
p999
S'.text:0000000000408e90\n.text:0000000000408e94\n'
p1000
tp1001
sS'file_lines'
p1002
(S'\n__stdcall file_lines(char * pretty_filename, uintmax_t n_lines, off_t start_pos, off_t end_pos, uintmax_t * read_pos)\n'
p1003
V\u000a_Bool file_lines(char *pretty_filename,uintmax_t n_lines,off_t start_pos,off_t end_pos,\u000a                uintmax_t *read_pos)\u000a\u000a{\u000a  uint uVar1;\u000a  int __c;\u000a  uintmax_t *puVar2;\u000a  void *pvVar3;\u000a  uintmax_t uVar4;\u000a  uint *puVar5;\u000a  undefined8 uVar6;\u000a  char *pcVar7;\u000a  long lVar8;\u000a  char cVar9;\u000a  undefined uVar10;\u000a  uintmax_t *filename;\u000a  void *__n;\u000a  long *in_R9;\u000a  void *buf;\u000a  void *pvVar11;\u000a  bool bVar12;\u000a  char buffer [8192];\u000a  uintmax_t *local_2040;\u000a  undefined local_2038 [8200];\u000a  \u000a  buf = (void *)(n_lines & 0xffffffff);\u000a  uVar10 = 1;\u000a  if (start_pos != 0) {\u000a    puVar2 = (uintmax_t *)((long)read_pos - end_pos);\u000a    puVar2 = (uintmax_t *)\u000a             ((long)puVar2 - (((ulong)((long)puVar2 >> 0x3f) >> 0x33) + (long)puVar2 & 0xffffe000));\u000a    filename = (uintmax_t *)0x2000;\u000a    if (puVar2 != (uintmax_t *)0x0) {\u000a      filename = puVar2;\u000a    }\u000a    read_pos = (uintmax_t *)((long)read_pos - (long)filename);\u000a    xlseek((off_t)buf,(char *)read_pos);\u000a    __n = (void *)safe_read(buf,(size_t)local_2038);\u000a    if (__n == (void *)0xffffffffffffffff) {\u000a      puVar5 = (uint *)__errno_location();\u000a      uVar1 = *puVar5;\u000a      uVar6 = dcgettext(0,"error reading %s",5);\u000a      pcVar7 = quotearg_style((char *)0x4);\u000aLAB_00404707:\u000a      uVar10 = 0;\u000a      error(0,(ulong)uVar1,uVar6,pcVar7);\u000a    }\u000a    else {\u000a      *in_R9 = (long)__n + (long)read_pos;\u000a      local_2040 = read_pos;\u000a      pvVar11 = (void *)0x0;\u000a      if (__n != (void *)0x0) {\u000a        cVar9 = '\u005cn';\u000a        if (line_end == 0) {\u000a          cVar9 = 0;\u000a        }\u000a        start_pos = start_pos -\u000a                    (ulong)(*(char *)((long)register0x00000020 + -0x2039 + (long)__n) != cVar9);\u000a        local_2040 = read_pos;\u000a        pvVar11 = __n;\u000a      }\u000a      do {\u000a        while( true ) {\u000a          __n = pvVar11;\u000a          do {\u000a            if (__n == (void *)0x0) goto LAB_004045e3;\u000a            __c = 0;\u000a            if (line_end != 0) {\u000a              __c = 10;\u000a            }\u000a            pvVar3 = memrchr(local_2038,__c,(size_t)__n);\u000a            if (pvVar3 == (void *)0x0) {\u000a              lVar8 = 5;\u000a            }\u000a            else {\u000a              __n = (void *)((long)pvVar3 - (long)local_2038);\u000a              lVar8 = 0;\u000a              bVar12 = start_pos == 0;\u000a              start_pos = start_pos + -1;\u000a              if (bVar12) {\u000a                if (__n != (void *)((long)pvVar11 - 1U)) {\u000a                  xwrite_stdout((char *)((long)pvVar3 + 1),\u000a                                (size_t)((long)(void *)((long)pvVar11 - 1U) - (long)__n));\u000a                }\u000a                uVar4 = dump_remainder(pretty_filename,(uintmax_t)buf);\u000a                *in_R9 = *in_R9 + uVar4;\u000a                lVar8 = 1;\u000a              }\u000a            }\u000a          } while (lVar8 == 0);\u000a          if ((char)lVar8 == 5) break;\u000a          if (((int)lVar8 != 0) || (pvVar11 == (void *)0x0)) goto LAB_004046c9;\u000a        }\u000aLAB_004045e3:\u000a        if (local_2040 == (uintmax_t *)end_pos) {\u000a          xlseek((off_t)buf,(char *)end_pos);\u000a          uVar4 = dump_remainder(pretty_filename,(uintmax_t)buf);\u000a          *in_R9 = uVar4 + end_pos;\u000a          break;\u000a        }\u000a        filename = local_2040 + 0x1ffffc00;\u000a        xlseek((off_t)buf,(char *)filename);\u000a        pvVar11 = (void *)safe_read(buf,(size_t)local_2038);\u000a        if (pvVar11 == (void *)0xffffffffffffffff) {\u000a          puVar5 = (uint *)__errno_location();\u000a          uVar1 = *puVar5;\u000a          uVar6 = dcgettext(0,"error reading %s",5);\u000a          pcVar7 = quotearg_style((char *)0x4);\u000a          goto LAB_00404707;\u000a        }\u000a        *in_R9 = (long)pvVar11 + (long)filename;\u000a        local_2040 = filename;\u000a      } while (pvVar11 != (void *)0x0);\u000aLAB_004046c9:\u000a      uVar10 = 1;\u000a    }\u000a  }\u000a  return (_Bool)uVar10;\u000a}\u000a\u000a
p1004
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x2038\nMOV qword ptr [RSP + 0x10],R9\nMOV R14,RDX\nMOV R15D,ESI\nMOV RBP,RDI\nMOV BL,0x1\nTEST R14,R14\nJZ 0x0040470c\nMOV RAX,R8\nMOV qword ptr [RSP + 0x18],RCX\nSUB RAX,RCX\nMOV RCX,RAX\nSAR RCX,0x3f\nSHR RCX,0x33\nADD RCX,RAX\nAND RCX,0xffffe000\nSUB RAX,RCX\nMOV EBX,0x2000\nCMOVNZ RBX,RAX\nMOV qword ptr [RSP + 0x20],R8\nMOV R12,R8\nSUB R12,RBX\nXOR EDX,EDX\nMOV EDI,R15D\nMOV RSI,R12\nMOV qword ptr [RSP + 0x8],RBP\nMOV RCX,RBP\nCALL 0x00404720\nLEA R13,[RSP + 0x30]\nMOV EDI,R15D\nMOV RSI,R13\nMOV RDX,RBX\nCALL 0x00408de0\nCMP RAX,-0x1\nJZ 0x00404664\nMOV dword ptr [RSP + 0x4],R15D\nLEA RCX,[RAX + R12*0x1]\nMOV RDX,qword ptr [RSP + 0x10]\nMOV qword ptr [RDX],RCX\nXOR R15D,R15D\nTEST RAX,RAX\nMOV RBP,R12\nJZ 0x00404530\nMOVSX ECX,byte ptr [RSP + RAX*0x1 + 0x2f]\nMOV DL,byte ptr [0x00610351]\nTEST DL,DL\nMOV EDX,0xa\nCMOVZ EDX,R15D\nXOR ESI,ESI\nCMP ECX,EDX\nSETNZ SIL\nSUB R14,RSI\nMOV R15,RAX\nNOP dword ptr CS:[RAX + RAX*0x1]\nLEA R12,[R15 + -0x1]\nMOV RBX,qword ptr [RSP + 0x20]\nSUB RBX,R15\nMOV qword ptr [RSP + 0x28],RBP\nSUB RBX,RBP\nMOV RBP,R15\nNOP word ptr [RAX + RAX*0x1]\nTEST RBP,RBP\nJZ 0x004045e3\nMOVZX EAX,byte ptr [0x00610351]\nTEST AL,AL\nMOV ESI,0x0\nMOV EAX,0xa\nCMOVNZ ESI,EAX\nMOV RDI,R13\nMOV RDX,RBP\nCALL 0x00401b00\nTEST RAX,RAX\nJZ 0x004045d0\nMOV RBP,RAX\nSUB RBP,R13\nXOR ECX,ECX\nTEST R14,R14\nLEA R14,[R14 + -0x1]\nJNZ 0x004045d5\nCMP RBP,R12\nJZ 0x004045a6\nINC RAX\nMOV RSI,R12\nSUB RSI,RBP\nMOV RDI,RAX\nCALL 0x00404b50\nMOV RDI,qword ptr [RSP + 0x8]\nMOV ESI,dword ptr [RSP + 0x4]\nMOV RDX,RBX\nCALL 0x00404370\nMOV RCX,qword ptr [RSP + 0x10]\nADD qword ptr [RCX],RAX\nMOV ECX,0x1\nJMP 0x004045d5\nMOV ECX,0x5\nMOV EAX,ECX\nAND AL,0x7\nJZ 0x00404550\nCMP AL,0x5\nJNZ 0x00404650\nMOV R15,qword ptr [RSP + 0x8]\nMOV R12,qword ptr [RSP + 0x18]\nMOV EBX,dword ptr [RSP + 0x4]\nMOV RBP,qword ptr [RSP + 0x28]\nCMP RBP,R12\nJZ 0x004046a0\nADD RBP,0xffffe000\nXOR EDX,EDX\nMOV EDI,EBX\nMOV RSI,RBP\nMOV RCX,R15\nCALL 0x00404720\nMOV EDX,0x2000\nMOV EDI,EBX\nMOV RSI,R13\nCALL 0x00408de0\nMOV R15,RAX\nCMP R15,-0x1\nJZ 0x004046cd\nMOV RAX,R15\nADD RAX,RBP\nMOV RCX,qword ptr [RSP + 0x10]\nMOV qword ptr [RCX],RAX\nTEST R15,R15\nJNZ 0x00404530\nJMP 0x004046c9\nTEST ECX,ECX\nMOV RBP,qword ptr [RSP + 0x28]\nJNZ 0x004046c9\nTEST R15,R15\nJNZ 0x00404530\nJMP 0x004046c9\nCALL 0x00401770\nMOV R14D,dword ptr [RAX]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x40c200\nMOV EDX,0x5\nCALL 0x00401840\nMOV R15,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x8]\nCALL 0x004087b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,R15\nJMP 0x00404707\nXOR EDX,EDX\nMOV EDI,EBX\nMOV RSI,R12\nMOV RCX,R15\nCALL 0x00404720\nMOV RDI,R15\nMOV ESI,EBX\nMOV RDX,qword ptr [RSP + 0x20]\nCALL 0x00404370\nADD RAX,R12\nMOV RCX,qword ptr [RSP + 0x10]\nMOV qword ptr [RCX],RAX\nMOV BL,0x1\nJMP 0x0040470c\nCALL 0x00401770\nMOV R14D,dword ptr [RAX]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x40c200\nMOV EDX,0x5\nCALL 0x00401840\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x8]\nCALL 0x004087b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,RBP\nCALL 0x00401af0\nMOV EAX,EBX\nADD RSP,0x2038\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1005
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 38 20 00 00\n4c 89 4c 24 10\n49 89 d6\n41 89 f7\n48 89 fd\nb3 01\n4d 85 f6\n0f 84 92 02 00 00\n4c 89 c0\n48 89 4c 24 18\n48 29 c8\n48 89 c1\n48 c1 f9 3f\n48 c1 e9 33\n48 01 c1\n48 81 e1 00 e0 ff ff\n48 29 c8\nbb 00 20 00 00\n48 0f 45 d8\n4c 89 44 24 20\n4d 89 c4\n49 29 dc\n31 d2\n44 89 ff\n4c 89 e6\n48 89 6c 24 08\n48 89 e9\ne8 5a 02 00 00\n4c 8d 6c 24 30\n44 89 ff\n4c 89 ee\n48 89 da\ne8 07 49 00 00\n48 83 f8 ff\n0f 84 81 01 00 00\n44 89 7c 24 04\n4a 8d 0c 20\n48 8b 54 24 10\n48 89 0a\n45 31 ff\n48 85 c0\n4c 89 e5\n74 31\n0f be 4c 04 2f\n8a 15 47 be 20 00\n84 d2\nba 0a 00 00 00\n41 0f 44 d7\n31 f6\n39 d1\n40 0f 95 c6\n49 29 f6\n49 89 c7\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4d 8d 67 ff\n48 8b 5c 24 20\n4c 29 fb\n48 89 6c 24 28\n48 29 eb\n4c 89 fd\n66 0f 1f 84 00 00 00 00 00\n48 85 ed\n0f 84 8a 00 00 00\n0f b6 05 f1 bd 20 00\n84 c0\nbe 00 00 00 00\nb8 0a 00 00 00\n0f 45 f0\n4c 89 ef\n48 89 ea\ne8 86 d5 ff ff\n48 85 c0\n74 51\n48 89 c5\n4c 29 ed\n31 c9\n4d 85 f6\n4d 8d 76 ff\n75 45\n4c 39 e5\n74 11\n48 ff c0\n4c 89 e6\n48 29 ee\n48 89 c7\ne8 aa 05 00 00\n48 8b 7c 24 08\n8b 74 24 04\n48 89 da\ne8 b9 fd ff ff\n48 8b 4c 24 10\n48 01 01\nb9 01 00 00 00\neb 0f\nb9 05 00 00 00\n89 c8\n24 07\n0f 84 71 ff ff ff\n3c 05\n75 6d\n4c 8b 7c 24 08\n4c 8b 64 24 18\n8b 5c 24 04\n48 8b 6c 24 28\n4c 39 e5\n0f 84 a1 00 00 00\n48 81 c5 00 e0 ff ff\n31 d2\n89 df\n48 89 ee\n4c 89 f9\ne8 0b 01 00 00\nba 00 20 00 00\n89 df\n4c 89 ee\ne8 bc 47 00 00\n49 89 c7\n49 83 ff ff\n0f 84 9c 00 00 00\n4c 89 f8\n48 01 e8\n48 8b 4c 24 10\n48 89 01\n4d 85 ff\n0f 85 e8 fe ff ff\neb 7f\n85 c9\n48 8b 6c 24 28\n75 70\n4d 85 ff\n0f 85 ce fe ff ff\neb 65\ne8 07 d1 ff ff\n44 8b 30\n31 db\n31 ff\nbe 00 c2 40 00\nba 05 00 00 00\ne8 c1 d1 ff ff\n49 89 c7\nbf 04 00 00 00\n48 8b 74 24 08\ne8 1f 41 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 f6\n4c 89 fa\neb 67\n31 d2\n89 df\n4c 89 e6\n4c 89 f9\ne8 71 00 00 00\n4c 89 ff\n89 de\n48 8b 54 24 20\ne8 b2 fc ff ff\n4c 01 e0\n48 8b 4c 24 10\n48 89 01\nb3 01\neb 3f\ne8 9e d0 ff ff\n44 8b 30\n31 db\n31 ff\nbe 00 c2 40 00\nba 05 00 00 00\ne8 58 d1 ff ff\n48 89 c5\nbf 04 00 00 00\n48 8b 74 24 08\ne8 b6 40 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 f6\n48 89 ea\ne8 e4 d3 ff ff\n89 d8\n48 81 c4 38 20 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1006
S'.text:0000000000404450\n.text:0000000000404451\n.text:0000000000404453\n.text:0000000000404455\n.text:0000000000404457\n.text:0000000000404459\n.text:000000000040445a\n.text:0000000000404461\n.text:0000000000404466\n.text:0000000000404469\n.text:000000000040446c\n.text:000000000040446f\n.text:0000000000404471\n.text:0000000000404474\n.text:000000000040447a\n.text:000000000040447d\n.text:0000000000404482\n.text:0000000000404485\n.text:0000000000404488\n.text:000000000040448c\n.text:0000000000404490\n.text:0000000000404493\n.text:000000000040449a\n.text:000000000040449d\n.text:00000000004044a2\n.text:00000000004044a6\n.text:00000000004044ab\n.text:00000000004044ae\n.text:00000000004044b1\n.text:00000000004044b3\n.text:00000000004044b6\n.text:00000000004044b9\n.text:00000000004044be\n.text:00000000004044c1\n.text:00000000004044c6\n.text:00000000004044cb\n.text:00000000004044ce\n.text:00000000004044d1\n.text:00000000004044d4\n.text:00000000004044d9\n.text:00000000004044dd\n.text:00000000004044e3\n.text:00000000004044e8\n.text:00000000004044ec\n.text:00000000004044f1\n.text:00000000004044f4\n.text:00000000004044f7\n.text:00000000004044fa\n.text:00000000004044fd\n.text:00000000004044ff\n.text:0000000000404504\n.text:000000000040450a\n.text:000000000040450c\n.text:0000000000404511\n.text:0000000000404515\n.text:0000000000404517\n.text:0000000000404519\n.text:000000000040451d\n.text:0000000000404520\n.text:0000000000404523\n.text:0000000000404530\n.text:0000000000404534\n.text:0000000000404539\n.text:000000000040453c\n.text:0000000000404541\n.text:0000000000404544\n.text:0000000000404547\n.text:0000000000404550\n.text:0000000000404553\n.text:0000000000404559\n.text:0000000000404560\n.text:0000000000404562\n.text:0000000000404567\n.text:000000000040456c\n.text:000000000040456f\n.text:0000000000404572\n.text:0000000000404575\n.text:000000000040457a\n.text:000000000040457d\n.text:000000000040457f\n.text:0000000000404582\n.text:0000000000404585\n.text:0000000000404587\n.text:000000000040458a\n.text:000000000040458e\n.text:0000000000404590\n.text:0000000000404593\n.text:0000000000404595\n.text:0000000000404598\n.text:000000000040459b\n.text:000000000040459e\n.text:00000000004045a1\n.text:00000000004045a6\n.text:00000000004045ab\n.text:00000000004045af\n.text:00000000004045b2\n.text:00000000004045b7\n.text:00000000004045bc\n.text:00000000004045bf\n.text:00000000004045c4\n.text:00000000004045d0\n.text:00000000004045d5\n.text:00000000004045d7\n.text:00000000004045d9\n.text:00000000004045df\n.text:00000000004045e1\n.text:00000000004045e3\n.text:00000000004045e8\n.text:00000000004045ed\n.text:00000000004045f1\n.text:00000000004045f6\n.text:00000000004045f9\n.text:00000000004045ff\n.text:0000000000404606\n.text:0000000000404608\n.text:000000000040460a\n.text:000000000040460d\n.text:0000000000404610\n.text:0000000000404615\n.text:000000000040461a\n.text:000000000040461c\n.text:000000000040461f\n.text:0000000000404624\n.text:0000000000404627\n.text:000000000040462b\n.text:0000000000404631\n.text:0000000000404634\n.text:0000000000404637\n.text:000000000040463c\n.text:000000000040463f\n.text:0000000000404642\n.text:0000000000404648\n.text:0000000000404650\n.text:0000000000404652\n.text:0000000000404657\n.text:0000000000404659\n.text:000000000040465c\n.text:0000000000404662\n.text:0000000000404664\n.text:0000000000404669\n.text:000000000040466c\n.text:000000000040466e\n.text:0000000000404670\n.text:0000000000404675\n.text:000000000040467a\n.text:000000000040467f\n.text:0000000000404682\n.text:0000000000404687\n.text:000000000040468c\n.text:0000000000404691\n.text:0000000000404694\n.text:0000000000404696\n.text:0000000000404698\n.text:000000000040469b\n.text:000000000040469e\n.text:00000000004046a0\n.text:00000000004046a2\n.text:00000000004046a4\n.text:00000000004046a7\n.text:00000000004046aa\n.text:00000000004046af\n.text:00000000004046b2\n.text:00000000004046b4\n.text:00000000004046b9\n.text:00000000004046be\n.text:00000000004046c1\n.text:00000000004046c6\n.text:00000000004046c9\n.text:00000000004046cb\n.text:00000000004046cd\n.text:00000000004046d2\n.text:00000000004046d5\n.text:00000000004046d7\n.text:00000000004046d9\n.text:00000000004046de\n.text:00000000004046e3\n.text:00000000004046e8\n.text:00000000004046eb\n.text:00000000004046f0\n.text:00000000004046f5\n.text:00000000004046fa\n.text:00000000004046fd\n.text:00000000004046ff\n.text:0000000000404701\n.text:0000000000404704\n.text:0000000000404707\n.text:000000000040470c\n.text:000000000040470e\n.text:0000000000404715\n.text:0000000000404716\n.text:0000000000404718\n.text:000000000040471a\n.text:000000000040471c\n.text:000000000040471e\n.text:000000000040471f\n'
p1007
tp1008
sS'get_stat_atime_ns'
p1009
(S'\n__stdcall get_stat_atime_ns(stat * st)\n'
p1010
V\u000along get_stat_atime_ns(stat *st)\u000a\u000a{\u000a  return (st->st_atim).tv_nsec;\u000a}\u000a\u000a
p1011
S'MOV RAX,qword ptr [RDI + 0x50]\nRET\n'
p1012
S'48 8b 47 50\nc3\n'
p1013
S'.text:0000000000408e70\n.text:0000000000408e74\n'
p1014
tp1015
sS'mdir_name'
p1016
(S'\n__stdcall mdir_name(char * file)\n'
p1017
V\u000achar * mdir_name(char *file)\u000a\u000a{\u000a  size_t __n;\u000a  char *__dest;\u000a  \u000a  __n = dir_len(file);\u000a  __dest = (char *)malloc(__n + 1 + (ulong)(__n == 0));\u000a  if (__dest == (char *)0x0) {\u000a    __dest = (char *)0x0;\u000a  }\u000a  else {\u000a    memcpy(__dest,file,__n);\u000a    if (__n == 0) {\u000a      *__dest = '.';\u000a      __n = 1;\u000a    }\u000a    __dest[__n] = 0;\u000a  }\u000a  return __dest;\u000a}\u000a\u000a
p1018
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nCALL 0x00406210\nMOV RBX,RAX\nXOR EAX,EAX\nTEST RBX,RBX\nSETZ AL\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00401a30\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0040629e\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,RBX\nCALL 0x004019c0\nTEST RBX,RBX\nJNZ 0x00406297\nMOV byte ptr [R14 + RBX*0x1],0x2e\nMOV EBX,0x1\nMOV byte ptr [R14 + RBX*0x1],0x0\nJMP 0x004062a1\nXOR R14D,R14D\nMOV RAX,R14\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1019
S'41 57\n41 56\n53\n49 89 ff\ne8 b3 ff ff ff\n48 89 c3\n31 c0\n48 85 db\n0f 94 c0\n48 8d 7c 03 01\ne8 be b7 ff ff\n49 89 c6\n4d 85 f6\n74 24\n4c 89 f7\n4c 89 fe\n48 89 da\ne8 38 b7 ff ff\n48 85 db\n75 0a\n41 c6 04 1e 2e\nbb 01 00 00 00\n41 c6 04 1e 00\neb 03\n45 31 f6\n4c 89 f0\n5b\n41 5e\n41 5f\nc3\n'
p1020
S'.text:0000000000406250\n.text:0000000000406252\n.text:0000000000406254\n.text:0000000000406255\n.text:0000000000406258\n.text:000000000040625d\n.text:0000000000406260\n.text:0000000000406262\n.text:0000000000406265\n.text:0000000000406268\n.text:000000000040626d\n.text:0000000000406272\n.text:0000000000406275\n.text:0000000000406278\n.text:000000000040627a\n.text:000000000040627d\n.text:0000000000406280\n.text:0000000000406283\n.text:0000000000406288\n.text:000000000040628b\n.text:000000000040628d\n.text:0000000000406292\n.text:0000000000406297\n.text:000000000040629c\n.text:000000000040629e\n.text:00000000004062a1\n.text:00000000004062a4\n.text:00000000004062a5\n.text:00000000004062a7\n.text:00000000004062a9\n'
p1021
tp1022
sS'rotl8'
p1023
(S'\n__stdcall rotl8()\n'
p1024
V\u000auint8_t rotl8(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint8_t)((byte)(in_EDI >> (8 - (byte)in_ESI & 0x1f)) |\u000a                  (byte)(in_EDI << ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p1025
S'MOV EAX,EDI\nMOV ECX,ESI\nSHL EAX,CL\nMOV ECX,0x8\nSUB ECX,ESI\nSHR EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p1026
S'89 f8\n89 f1\nd3 e0\nb9 08 00 00 00\n29 f1\nd3 ef\n09 c7\n89 f8\nc3\n'
p1027
S'.text:0000000000409ee0\n.text:0000000000409ee2\n.text:0000000000409ee4\n.text:0000000000409ee6\n.text:0000000000409eeb\n.text:0000000000409eed\n.text:0000000000409eef\n.text:0000000000409ef1\n.text:0000000000409ef3\n'
p1028
tp1029
sS'c_isgraph'
p1030
(S'\n__stdcall c_isgraph()\n'
p1031
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p1032
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p1033
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p1034
S'.text:0000000000409fb0\n.text:0000000000409fb3\n.text:0000000000409fb6\n.text:0000000000409fb9\n'
p1035
tp1036
sS'hash_get_next'
p1037
(S'\n__stdcall hash_get_next(Hash_table * table, void * entry)\n'
p1038
V\u000avoid * hash_get_next(Hash_table *table,void *entry)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  hash_entry *phVar2;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar2 = safe_hasher(table,entry);\u000a  phVar3 = phVar2;\u000a  while( true ) {\u000a    phVar1 = phVar3->next;\u000a    if ((phVar3->data == entry) && (phVar1 != (hash_entry *)0x0)) break;\u000a    phVar3 = phVar1;\u000a    if (phVar1 == (hash_entry *)0x0) {\u000a      do {\u000a        phVar2 = phVar2 + 1;\u000a        if (table->bucket_limit <= phVar2) {\u000a          return (void *)0x0;\u000a        }\u000a      } while (phVar2->data == (void *)0x0);\u000a      return phVar2->data;\u000a    }\u000a  }\u000a  return phVar1->data;\u000a}\u000a\u000a
p1039
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nCALL 0x00406630\nMOV RCX,RAX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RSI,RCX\nMOV RCX,qword ptr [RSI + 0x8]\nTEST RCX,RCX\nSETZ DL\nCMP qword ptr [RSI],RBX\nJNZ 0x004066d6\nTEST DL,DL\nJZ 0x00406703\nTEST RCX,RCX\nJNZ 0x004066c0\nMOV RDX,qword ptr [R14 + 0x8]\nADD RAX,0x10\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP RAX,RDX\nJNC 0x00406708\nMOV RCX,qword ptr [RAX]\nADD RAX,0x10\nTEST RCX,RCX\nJZ 0x004066f0\nJMP 0x0040670a\nMOV RCX,qword ptr [RCX]\nJMP 0x0040670a\nXOR ECX,ECX\nMOV RAX,RCX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1040
S'41 56\n53\n50\n48 89 f3\n49 89 fe\ne8 81 ff ff ff\n48 89 c1\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 ce\n48 8b 4e 08\n48 85 c9\n0f 94 c2\n48 39 1e\n75 04\n84 d2\n74 2d\n48 85 c9\n75 e5\n49 8b 56 08\n48 83 c0 10\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 39 d0\n73 13\n48 8b 08\n48 83 c0 10\n48 85 c9\n74 ef\neb 07\n48 8b 09\neb 02\n31 c9\n48 89 c8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1041
S'.text:00000000004066a0\n.text:00000000004066a2\n.text:00000000004066a3\n.text:00000000004066a4\n.text:00000000004066a7\n.text:00000000004066aa\n.text:00000000004066af\n.text:00000000004066b2\n.text:00000000004066c0\n.text:00000000004066c3\n.text:00000000004066c7\n.text:00000000004066ca\n.text:00000000004066cd\n.text:00000000004066d0\n.text:00000000004066d2\n.text:00000000004066d4\n.text:00000000004066d6\n.text:00000000004066d9\n.text:00000000004066db\n.text:00000000004066df\n.text:00000000004066e3\n.text:00000000004066f0\n.text:00000000004066f3\n.text:00000000004066f5\n.text:00000000004066f8\n.text:00000000004066fc\n.text:00000000004066ff\n.text:0000000000406701\n.text:0000000000406703\n.text:0000000000406706\n.text:0000000000406708\n.text:000000000040670a\n.text:000000000040670d\n.text:0000000000406711\n.text:0000000000406712\n.text:0000000000406714\n'
p1042
tp1043
sS'quotearg_buffer_restyled'
p1044
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p1045
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_0040778c_caseD_7;\u000a  case 2:\u000a    goto switchD_0040778c_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_0040778c_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_0040778c_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_0040778c_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_0040778c_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_0040778c_caseD_7;\u000aswitchD_0040778c_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_0040778c_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_0040778c_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00408250;\u000aLAB_00407970:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00408259:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00408268:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_0040797b:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_004079bf:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_004079bf;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00408268;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00408195;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x004080a0;\u000a    }\u000a    goto LAB_00408268;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_004081ca;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00408268;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_004081f9;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00407cb8;\u000a  case '\u005ca':\u000a    goto joined_r0x00407ba8;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00407ba8;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_004079d6_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00407ba8;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00407ba8;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_004079d6_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00407ba8:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_0040810e;\u000a    }\u000a    goto LAB_00408268;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00408268;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00408268;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00408268;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00408268;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00408268;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_004079d6_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00408166;\u000a      goto joined_r0x00408158;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00407c61:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00408158;\u000a      goto LAB_00408166;\u000a    }\u000a    goto LAB_00408268;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00408268;\u000a  }\u000a  goto joined_r0x004080a0;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_004081ca:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_004081f9;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_004081f9:\u000a  if (1 < uVar10) {\u000aLAB_00407cd6:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00407d92;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00407c61;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00407d92:\u000a        if (bVar6 != 0) goto LAB_00408268;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00407cb8:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00407cd6;\u000ajoined_r0x004080a0:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x004080a0:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_004080c7;\u000aLAB_00408100:\u000a    if (bVar22) goto LAB_00408105;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00408100;\u000aLAB_004080c7:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00408105:\u000a      if (bVar6 != 0) goto LAB_00408268;\u000aLAB_0040810e:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00408158;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00408166:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00408158:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00408195:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00407970;\u000aLAB_00408250:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00408259;\u000a  goto LAB_0040797b;\u000a}\u000a\u000a
p1046
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x00401850\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00408335\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x40c810 + RAX*0x8]\nMOV EDI,0x40cd34\nMOV ESI,R15D\nCALL 0x004089e0\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x40cd36\nMOV ESI,R15D\nCALL 0x004089e0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x004077ed\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x004077f0\nNOP\nCMP R12,RSI\nJNC 0x004077de\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x004077d0\nJMP 0x004077f0\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x00401860\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x004078bc\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x004078bc\nMOV ECX,0x40c3d2\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x004078b6\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00407857\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00407884\nTEST RSI,RSI\nJZ 0x00407871\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x40cd36\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x00407892\nMOV ECX,0x40cd36\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x004078bc\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x0040830c\nMOV ECX,0x40c3d2\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00408250\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00408259\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x004079bf\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x004079ba\nCMP R11,-0x1\nJNZ 0x004079ba\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x00401860\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00407a10\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x00407c6c\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x40c868 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00408268\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x004080c0\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x004080c7\nJMP 0x00408100\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00401960\nTEST EAX,EAX\nSETZ AL\nJNZ 0x00407a5d\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x004079c1\nJMP 0x00408268\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x004079c1\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x004079eb\nCMP EBX,0x2\nJNZ 0x004079eb\nTEST R13,R13\nJNZ 0x004079eb\nJMP 0x00408268\nCMP R11,-0x1\nJZ 0x00407e43\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00407e63\nJMP 0x004079eb\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00407e74\nTEST R8B,R8B\nJNZ 0x00408268\nCMP EBX,0x2\nJNZ 0x00407b18\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00407b18\nCMP R12,RSI\nJNC 0x00407af3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00407b02\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00407b11\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00407b22\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00407fe8\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00407fe8\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00407fe8\nCMP RCX,RSI\nJNC 0x00407b5c\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x00407b6b\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004079f6\nJMP 0x004080c0\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004079e9\nJMP 0x00407bca\nMOV DL,0x74\nJMP 0x00407bb2\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004079e9\nJMP 0x00407bca\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004079e9\nJMP 0x00407bca\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00408268\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004079e9\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x0040810e\nJMP 0x00408268\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x004079e9\nTEST R8B,R8B\nJNZ 0x00408268\nCMP R12,RSI\nJNC 0x00407bfa\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00407c09\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00407c18\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x004079e9\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x00407ffb\nCMP EBX,0x2\nJNZ 0x004079e9\nTEST R8B,R8B\nJZ 0x004079e9\nJMP 0x00408268\nCMP EBX,0x2\nJNZ 0x00407e94\nTEST R8B,R8B\nJNZ 0x00408268\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00408166\nJMP 0x00408189\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00407eb5\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401bd0\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004080a8\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x004080a8\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00407d92\nJMP 0x00407d60\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x00407d49\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x00407d46\nCMP R12,RSI\nJNC 0x00407d2b\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x00407d3a\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00407d80\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00407d80\nTEST BPL,0x1\nJZ 0x00407e23\nCMP R12,RSI\nJNC 0x00407d74\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00407e23\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00407d60\nTEST R8B,R8B\nJNZ 0x00408268\nCMP EBX,0x2\nJNZ 0x00407dda\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x00407dda\nCMP R12,RSI\nJNC 0x00407db2\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00407dc1\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00407dd0\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00407de4\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00407dfb\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00407e15\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00407d10\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00408166\nJMP 0x00408189\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x004079eb\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x004079eb\nJMP 0x00408268\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00408195\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004079f6\nJMP 0x004080c0\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00407bb2\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00408166\nJMP 0x00408189\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00407ed7\nMOV RDI,R10\nCALL 0x00401860\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00401890\nMOV R14,RAX\nTEST R14,R14\nJZ 0x004081af\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x004081a7\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x004081b6\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x00407f9e\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00407f96\nBT RDI,RDX\nJC 0x00408302\nINC RCX\nCMP RCX,R14\nJC 0x00407f80\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401bb0\nTEST EAX,EAX\nJNZ 0x00407fb3\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00401ba0\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00407ef5\nJMP 0x004081f9\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004079f6\nJMP 0x004080c0\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x004079e9\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x004079e9\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x004079e9\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x004079eb\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00408232\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00408268\nCMP R12,RSI\nJNC 0x0040805e\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00408071\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00408080\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x0040808f\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004079f6\nJMP 0x004080c0\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004079f6\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00408100\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00408105\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00408160\nJMP 0x00408105\nTEST BPL,BPL\nJZ 0x00408160\nTEST R8B,R8B\nJNZ 0x00408268\nCMP EBX,0x2\nJNZ 0x00408148\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00408148\nCMP R12,RSI\nJNC 0x00408123\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00408132\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00408141\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00408152\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00408192\nJMP 0x0040818e\nTEST DIL,0x1\nJZ 0x00408189\nAND AL,0x1\nJNZ 0x00408189\nCMP R12,RSI\nJNC 0x00408174\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00408183\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00408192\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00408250\nJMP 0x00407970\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x004081f4\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x004081ec\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00408228\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x004081ca\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x004081f9\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00407cb8\nJMP 0x00407cd6\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x004081f9\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004079f6\nJMP 0x004080c0\nCMP R13,R11\nJNZ 0x0040797b\nTEST R8B,R8B\nJZ 0x004082c2\nCMP EBX,0x2\nJNZ 0x004082c2\nTEST R12,R12\nJNZ 0x004082c2\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00407700\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x004082f6\nTEST R8B,R8B\nJNZ 0x004082f6\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x004082f6\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x004082e9\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x004082e0\nCMP R12,RSI\nJNC 0x004082ad\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x004082ad\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00408268\nTEST RSI,RSI\nJZ 0x00408319\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x40c3d2\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x004078bc\nCALL 0x00401760\n'
p1047
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 22 a1 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 10 c8 40 00\nbf 34 cd 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf 36 cd 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 63 a0 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 d2 c3 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 36 cd 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 36 cd 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 d2 c3 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 c3 9e ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd 68 c8 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 37 9f ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 47 9f ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 91 99 ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 73 99 ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 09 9c ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 d2 9b ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 d2 c3 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 26 94 ff ff\n'
p1048
S'.text:0000000000407700\n.text:0000000000407701\n.text:0000000000407703\n.text:0000000000407705\n.text:0000000000407707\n.text:0000000000407709\n.text:000000000040770a\n.text:0000000000407711\n.text:0000000000407714\n.text:0000000000407717\n.text:000000000040771a\n.text:000000000040771f\n.text:0000000000407724\n.text:0000000000407729\n.text:000000000040772e\n.text:0000000000407736\n.text:000000000040773a\n.text:0000000000407740\n.text:0000000000407748\n.text:000000000040774d\n.text:0000000000407755\n.text:000000000040775a\n.text:000000000040775e\n.text:0000000000407760\n.text:0000000000407763\n.text:0000000000407766\n.text:0000000000407769\n.text:000000000040776e\n.text:0000000000407771\n.text:0000000000407774\n.text:0000000000407777\n.text:000000000040777a\n.text:000000000040777c\n.text:000000000040777f\n.text:0000000000407784\n.text:0000000000407787\n.text:000000000040778c\n.text:0000000000407793\n.text:0000000000407798\n.text:000000000040779b\n.text:00000000004077a0\n.text:00000000004077a5\n.text:00000000004077aa\n.text:00000000004077ad\n.text:00000000004077b2\n.text:00000000004077b7\n.text:00000000004077bc\n.text:00000000004077be\n.text:00000000004077c0\n.text:00000000004077c5\n.text:00000000004077c7\n.text:00000000004077ca\n.text:00000000004077cc\n.text:00000000004077ce\n.text:00000000004077d0\n.text:00000000004077d3\n.text:00000000004077d5\n.text:00000000004077da\n.text:00000000004077de\n.text:00000000004077e4\n.text:00000000004077e7\n.text:00000000004077e9\n.text:00000000004077eb\n.text:00000000004077ed\n.text:00000000004077f0\n.text:00000000004077f5\n.text:00000000004077f8\n.text:00000000004077fd\n.text:0000000000407802\n.text:0000000000407805\n.text:0000000000407808\n.text:000000000040780b\n.text:000000000040780e\n.text:0000000000407813\n.text:0000000000407816\n.text:0000000000407819\n.text:000000000040781e\n.text:0000000000407821\n.text:0000000000407823\n.text:0000000000407826\n.text:0000000000407828\n.text:000000000040782a\n.text:000000000040782d\n.text:0000000000407832\n.text:0000000000407837\n.text:000000000040783c\n.text:000000000040783f\n.text:0000000000407845\n.text:0000000000407847\n.text:000000000040784a\n.text:000000000040784d\n.text:0000000000407850\n.text:0000000000407852\n.text:0000000000407854\n.text:0000000000407857\n.text:000000000040785a\n.text:000000000040785f\n.text:0000000000407862\n.text:0000000000407864\n.text:0000000000407867\n.text:0000000000407869\n.text:000000000040786e\n.text:0000000000407871\n.text:0000000000407876\n.text:000000000040787c\n.text:0000000000407882\n.text:0000000000407884\n.text:0000000000407889\n.text:000000000040788f\n.text:0000000000407892\n.text:0000000000407895\n.text:0000000000407898\n.text:000000000040789a\n.text:000000000040789f\n.text:00000000004078a2\n.text:00000000004078a8\n.text:00000000004078ad\n.text:00000000004078b3\n.text:00000000004078b6\n.text:00000000004078b9\n.text:00000000004078bc\n.text:00000000004078c4\n.text:00000000004078c6\n.text:00000000004078c8\n.text:00000000004078cb\n.text:00000000004078cf\n.text:00000000004078d1\n.text:00000000004078d4\n.text:00000000004078d8\n.text:00000000004078da\n.text:00000000004078dd\n.text:00000000004078e0\n.text:00000000004078e3\n.text:00000000004078e5\n.text:00000000004078e9\n.text:00000000004078eb\n.text:00000000004078ef\n.text:00000000004078f2\n.text:00000000004078f5\n.text:00000000004078f8\n.text:00000000004078fa\n.text:00000000004078fe\n.text:0000000000407907\n.text:000000000040790a\n.text:000000000040790c\n.text:0000000000407910\n.text:0000000000407912\n.text:0000000000407916\n.text:0000000000407918\n.text:000000000040791b\n.text:000000000040791f\n.text:0000000000407921\n.text:0000000000407924\n.text:0000000000407928\n.text:000000000040792d\n.text:0000000000407930\n.text:0000000000407934\n.text:000000000040793c\n.text:000000000040793f\n.text:0000000000407942\n.text:0000000000407944\n.text:0000000000407948\n.text:000000000040794b\n.text:000000000040794d\n.text:0000000000407952\n.text:0000000000407956\n.text:000000000040795b\n.text:0000000000407960\n.text:0000000000407964\n.text:000000000040796a\n.text:0000000000407970\n.text:0000000000407975\n.text:000000000040797b\n.text:0000000000407980\n.text:0000000000407982\n.text:0000000000407987\n.text:000000000040798b\n.text:000000000040798d\n.text:0000000000407991\n.text:0000000000407993\n.text:0000000000407995\n.text:0000000000407998\n.text:000000000040799d\n.text:000000000040799f\n.text:00000000004079a4\n.text:00000000004079a9\n.text:00000000004079ad\n.text:00000000004079b2\n.text:00000000004079b7\n.text:00000000004079ba\n.text:00000000004079bd\n.text:00000000004079bf\n.text:00000000004079c1\n.text:00000000004079c6\n.text:00000000004079ca\n.text:00000000004079d0\n.text:00000000004079d2\n.text:00000000004079d4\n.text:00000000004079d6\n.text:00000000004079de\n.text:00000000004079e3\n.text:00000000004079e9\n.text:00000000004079eb\n.text:00000000004079f0\n.text:00000000004079f6\n.text:00000000004079ff\n.text:0000000000407a05\n.text:0000000000407a10\n.text:0000000000407a12\n.text:0000000000407a15\n.text:0000000000407a19\n.text:0000000000407a21\n.text:0000000000407a24\n.text:0000000000407a29\n.text:0000000000407a2b\n.text:0000000000407a2e\n.text:0000000000407a30\n.text:0000000000407a35\n.text:0000000000407a38\n.text:0000000000407a3d\n.text:0000000000407a40\n.text:0000000000407a45\n.text:0000000000407a49\n.text:0000000000407a4e\n.text:0000000000407a50\n.text:0000000000407a52\n.text:0000000000407a58\n.text:0000000000407a5d\n.text:0000000000407a62\n.text:0000000000407a65\n.text:0000000000407a6a\n.text:0000000000407a6e\n.text:0000000000407a73\n.text:0000000000407a78\n.text:0000000000407a7a\n.text:0000000000407a7c\n.text:0000000000407a81\n.text:0000000000407a83\n.text:0000000000407a86\n.text:0000000000407a8c\n.text:0000000000407a8f\n.text:0000000000407a95\n.text:0000000000407a98\n.text:0000000000407a9e\n.text:0000000000407aa3\n.text:0000000000407aa7\n.text:0000000000407aad\n.text:0000000000407ab0\n.text:0000000000407ab3\n.text:0000000000407ab7\n.text:0000000000407aba\n.text:0000000000407abc\n.text:0000000000407abf\n.text:0000000000407ac5\n.text:0000000000407aca\n.text:0000000000407acf\n.text:0000000000407ad5\n.text:0000000000407ad8\n.text:0000000000407ade\n.text:0000000000407ae1\n.text:0000000000407ae3\n.text:0000000000407ae5\n.text:0000000000407ae7\n.text:0000000000407ae9\n.text:0000000000407aec\n.text:0000000000407aee\n.text:0000000000407af3\n.text:0000000000407af8\n.text:0000000000407afb\n.text:0000000000407afd\n.text:0000000000407b02\n.text:0000000000407b07\n.text:0000000000407b0a\n.text:0000000000407b0c\n.text:0000000000407b11\n.text:0000000000407b15\n.text:0000000000407b18\n.text:0000000000407b1b\n.text:0000000000407b1d\n.text:0000000000407b22\n.text:0000000000407b27\n.text:0000000000407b29\n.text:0000000000407b2c\n.text:0000000000407b2f\n.text:0000000000407b35\n.text:0000000000407b39\n.text:0000000000407b3c\n.text:0000000000407b42\n.text:0000000000407b46\n.text:0000000000407b49\n.text:0000000000407b4c\n.text:0000000000407b52\n.text:0000000000407b55\n.text:0000000000407b57\n.text:0000000000407b5c\n.text:0000000000407b61\n.text:0000000000407b64\n.text:0000000000407b66\n.text:0000000000407b6b\n.text:0000000000407b6f\n.text:0000000000407b74\n.text:0000000000407b7a\n.text:0000000000407b7f\n.text:0000000000407b81\n.text:0000000000407b86\n.text:0000000000407b8c\n.text:0000000000407b8e\n.text:0000000000407b90\n.text:0000000000407b92\n.text:0000000000407b94\n.text:0000000000407b99\n.text:0000000000407b9f\n.text:0000000000407ba1\n.text:0000000000407ba3\n.text:0000000000407ba8\n.text:0000000000407bae\n.text:0000000000407bb0\n.text:0000000000407bb2\n.text:0000000000407bb7\n.text:0000000000407bb9\n.text:0000000000407bbf\n.text:0000000000407bc4\n.text:0000000000407bca\n.text:0000000000407bcd\n.text:0000000000407bd0\n.text:0000000000407bd6\n.text:0000000000407bdb\n.text:0000000000407bde\n.text:0000000000407be1\n.text:0000000000407be7\n.text:0000000000407bea\n.text:0000000000407bf0\n.text:0000000000407bf3\n.text:0000000000407bf5\n.text:0000000000407bfa\n.text:0000000000407bff\n.text:0000000000407c02\n.text:0000000000407c04\n.text:0000000000407c09\n.text:0000000000407c0e\n.text:0000000000407c11\n.text:0000000000407c13\n.text:0000000000407c18\n.text:0000000000407c1c\n.text:0000000000407c1e\n.text:0000000000407c23\n.text:0000000000407c26\n.text:0000000000407c29\n.text:0000000000407c2f\n.text:0000000000407c32\n.text:0000000000407c38\n.text:0000000000407c3b\n.text:0000000000407c41\n.text:0000000000407c46\n.text:0000000000407c49\n.text:0000000000407c4f\n.text:0000000000407c52\n.text:0000000000407c58\n.text:0000000000407c5b\n.text:0000000000407c5d\n.text:0000000000407c61\n.text:0000000000407c67\n.text:0000000000407c6c\n.text:0000000000407c70\n.text:0000000000407c79\n.text:0000000000407c7f\n.text:0000000000407c84\n.text:0000000000407c89\n.text:0000000000407c8e\n.text:0000000000407c91\n.text:0000000000407c96\n.text:0000000000407c99\n.text:0000000000407c9c\n.text:0000000000407ca1\n.text:0000000000407ca6\n.text:0000000000407caa\n.text:0000000000407caf\n.text:0000000000407cb4\n.text:0000000000407cb8\n.text:0000000000407cba\n.text:0000000000407cbf\n.text:0000000000407cc5\n.text:0000000000407cc8\n.text:0000000000407cca\n.text:0000000000407ccd\n.text:0000000000407cd0\n.text:0000000000407cd6\n.text:0000000000407cdb\n.text:0000000000407cde\n.text:0000000000407ce1\n.text:0000000000407ce4\n.text:0000000000407ce7\n.text:0000000000407ce9\n.text:0000000000407ced\n.text:0000000000407cef\n.text:0000000000407cf4\n.text:0000000000407cf9\n.text:0000000000407cff\n.text:0000000000407d10\n.text:0000000000407d15\n.text:0000000000407d17\n.text:0000000000407d1a\n.text:0000000000407d1c\n.text:0000000000407d1f\n.text:0000000000407d21\n.text:0000000000407d24\n.text:0000000000407d26\n.text:0000000000407d2b\n.text:0000000000407d30\n.text:0000000000407d33\n.text:0000000000407d35\n.text:0000000000407d3a\n.text:0000000000407d3e\n.text:0000000000407d46\n.text:0000000000407d49\n.text:0000000000407d4c\n.text:0000000000407d4e\n.text:0000000000407d52\n.text:0000000000407d60\n.text:0000000000407d64\n.text:0000000000407d6a\n.text:0000000000407d6d\n.text:0000000000407d6f\n.text:0000000000407d74\n.text:0000000000407d77\n.text:0000000000407d79\n.text:0000000000407d80\n.text:0000000000407d83\n.text:0000000000407d88\n.text:0000000000407d8b\n.text:0000000000407d90\n.text:0000000000407d92\n.text:0000000000407d95\n.text:0000000000407d9b\n.text:0000000000407d9e\n.text:0000000000407da0\n.text:0000000000407da4\n.text:0000000000407da6\n.text:0000000000407da8\n.text:0000000000407dab\n.text:0000000000407dad\n.text:0000000000407db2\n.text:0000000000407db7\n.text:0000000000407dba\n.text:0000000000407dbc\n.text:0000000000407dc1\n.text:0000000000407dc6\n.text:0000000000407dc9\n.text:0000000000407dcb\n.text:0000000000407dd0\n.text:0000000000407dd4\n.text:0000000000407dd6\n.text:0000000000407dda\n.text:0000000000407ddd\n.text:0000000000407ddf\n.text:0000000000407de4\n.text:0000000000407de9\n.text:0000000000407dec\n.text:0000000000407dee\n.text:0000000000407df1\n.text:0000000000407df4\n.text:0000000000407df7\n.text:0000000000407dfb\n.text:0000000000407e00\n.text:0000000000407e03\n.text:0000000000407e05\n.text:0000000000407e08\n.text:0000000000407e0b\n.text:0000000000407e0e\n.text:0000000000407e11\n.text:0000000000407e15\n.text:0000000000407e19\n.text:0000000000407e1d\n.text:0000000000407e21\n.text:0000000000407e23\n.text:0000000000407e27\n.text:0000000000407e2a\n.text:0000000000407e30\n.text:0000000000407e34\n.text:0000000000407e38\n.text:0000000000407e3e\n.text:0000000000407e43\n.text:0000000000407e46\n.text:0000000000407e49\n.text:0000000000407e4e\n.text:0000000000407e51\n.text:0000000000407e53\n.text:0000000000407e56\n.text:0000000000407e5d\n.text:0000000000407e63\n.text:0000000000407e65\n.text:0000000000407e69\n.text:0000000000407e6f\n.text:0000000000407e74\n.text:0000000000407e79\n.text:0000000000407e7f\n.text:0000000000407e82\n.text:0000000000407e84\n.text:0000000000407e89\n.text:0000000000407e8f\n.text:0000000000407e94\n.text:0000000000407e96\n.text:0000000000407e9b\n.text:0000000000407ea1\n.text:0000000000407ea3\n.text:0000000000407ea6\n.text:0000000000407eaa\n.text:0000000000407eb0\n.text:0000000000407eb5\n.text:0000000000407ec1\n.text:0000000000407ec5\n.text:0000000000407ec7\n.text:0000000000407eca\n.text:0000000000407ecf\n.text:0000000000407ed4\n.text:0000000000407ed7\n.text:0000000000407edb\n.text:0000000000407ee0\n.text:0000000000407ee2\n.text:0000000000407ee6\n.text:0000000000407ee8\n.text:0000000000407ef0\n.text:0000000000407ef5\n.text:0000000000407efa\n.text:0000000000407efe\n.text:0000000000407f02\n.text:0000000000407f0a\n.text:0000000000407f0d\n.text:0000000000407f12\n.text:0000000000407f15\n.text:0000000000407f18\n.text:0000000000407f1d\n.text:0000000000407f20\n.text:0000000000407f23\n.text:0000000000407f29\n.text:0000000000407f2d\n.text:0000000000407f37\n.text:0000000000407f3d\n.text:0000000000407f41\n.text:0000000000407f46\n.text:0000000000407f4c\n.text:0000000000407f50\n.text:0000000000407f53\n.text:0000000000407f57\n.text:0000000000407f59\n.text:0000000000407f5e\n.text:0000000000407f63\n.text:0000000000407f67\n.text:0000000000407f69\n.text:0000000000407f6e\n.text:0000000000407f73\n.text:0000000000407f77\n.text:0000000000407f7c\n.text:0000000000407f80\n.text:0000000000407f84\n.text:0000000000407f87\n.text:0000000000407f8a\n.text:0000000000407f8c\n.text:0000000000407f90\n.text:0000000000407f96\n.text:0000000000407f99\n.text:0000000000407f9c\n.text:0000000000407f9e\n.text:0000000000407fa2\n.text:0000000000407fa7\n.text:0000000000407fa9\n.text:0000000000407fab\n.text:0000000000407fb3\n.text:0000000000407fb8\n.text:0000000000407fbb\n.text:0000000000407fc3\n.text:0000000000407fc6\n.text:0000000000407fc9\n.text:0000000000407fce\n.text:0000000000407fd1\n.text:0000000000407fd3\n.text:0000000000407fd8\n.text:0000000000407fdd\n.text:0000000000407fe3\n.text:0000000000407fe8\n.text:0000000000407feb\n.text:0000000000407ff0\n.text:0000000000407ff6\n.text:0000000000407ffb\n.text:0000000000408000\n.text:0000000000408006\n.text:000000000040800a\n.text:000000000040800d\n.text:0000000000408013\n.text:0000000000408019\n.text:000000000040801f\n.text:0000000000408024\n.text:0000000000408026\n.text:0000000000408029\n.text:000000000040802f\n.text:0000000000408033\n.text:0000000000408035\n.text:000000000040803f\n.text:0000000000408043\n.text:0000000000408049\n.text:000000000040804c\n.text:000000000040804e\n.text:0000000000408054\n.text:0000000000408057\n.text:0000000000408059\n.text:000000000040805e\n.text:0000000000408063\n.text:0000000000408066\n.text:000000000040806a\n.text:000000000040806c\n.text:0000000000408071\n.text:0000000000408076\n.text:0000000000408079\n.text:000000000040807b\n.text:0000000000408080\n.text:0000000000408085\n.text:0000000000408088\n.text:000000000040808a\n.text:000000000040808f\n.text:0000000000408093\n.text:0000000000408095\n.text:0000000000408098\n.text:000000000040809b\n.text:00000000004080a0\n.text:00000000004080a6\n.text:00000000004080a8\n.text:00000000004080ad\n.text:00000000004080b2\n.text:00000000004080b8\n.text:00000000004080c0\n.text:00000000004080c5\n.text:00000000004080c7\n.text:00000000004080cc\n.text:00000000004080cf\n.text:00000000004080d1\n.text:00000000004080d4\n.text:00000000004080d6\n.text:00000000004080d9\n.text:00000000004080dc\n.text:00000000004080df\n.text:00000000004080e1\n.text:00000000004080e9\n.text:00000000004080ec\n.text:00000000004080ee\n.text:00000000004080f0\n.text:0000000000408100\n.text:0000000000408103\n.text:0000000000408105\n.text:0000000000408108\n.text:000000000040810e\n.text:0000000000408111\n.text:0000000000408113\n.text:0000000000408115\n.text:0000000000408117\n.text:0000000000408119\n.text:000000000040811c\n.text:000000000040811e\n.text:0000000000408123\n.text:0000000000408128\n.text:000000000040812b\n.text:000000000040812d\n.text:0000000000408132\n.text:0000000000408137\n.text:000000000040813a\n.text:000000000040813c\n.text:0000000000408141\n.text:0000000000408145\n.text:0000000000408148\n.text:000000000040814b\n.text:000000000040814d\n.text:0000000000408152\n.text:0000000000408155\n.text:0000000000408158\n.text:000000000040815a\n.text:0000000000408160\n.text:0000000000408164\n.text:0000000000408166\n.text:0000000000408168\n.text:000000000040816a\n.text:000000000040816d\n.text:000000000040816f\n.text:0000000000408174\n.text:0000000000408179\n.text:000000000040817c\n.text:000000000040817e\n.text:0000000000408183\n.text:0000000000408187\n.text:0000000000408189\n.text:000000000040818c\n.text:000000000040818e\n.text:0000000000408192\n.text:0000000000408195\n.text:0000000000408198\n.text:000000000040819c\n.text:00000000004081a2\n.text:00000000004081a7\n.text:00000000004081af\n.text:00000000004081b4\n.text:00000000004081b6\n.text:00000000004081be\n.text:00000000004081c3\n.text:00000000004081c5\n.text:00000000004081ca\n.text:00000000004081cf\n.text:00000000004081d3\n.text:00000000004081d5\n.text:00000000004081da\n.text:00000000004081dd\n.text:00000000004081e0\n.text:00000000004081e2\n.text:00000000004081ea\n.text:00000000004081ec\n.text:00000000004081f4\n.text:00000000004081f9\n.text:00000000004081fd\n.text:0000000000408202\n.text:0000000000408207\n.text:000000000040820b\n.text:0000000000408210\n.text:0000000000408215\n.text:0000000000408219\n.text:000000000040821d\n.text:0000000000408223\n.text:0000000000408228\n.text:0000000000408230\n.text:0000000000408232\n.text:0000000000408234\n.text:0000000000408238\n.text:000000000040823d\n.text:0000000000408243\n.text:0000000000408250\n.text:0000000000408253\n.text:0000000000408259\n.text:000000000040825c\n.text:000000000040825e\n.text:0000000000408261\n.text:0000000000408263\n.text:0000000000408266\n.text:0000000000408268\n.text:0000000000408270\n.text:0000000000408276\n.text:000000000040827a\n.text:000000000040827d\n.text:0000000000408281\n.text:0000000000408286\n.text:000000000040828a\n.text:000000000040828e\n.text:0000000000408291\n.text:0000000000408294\n.text:0000000000408297\n.text:000000000040829b\n.text:000000000040829f\n.text:00000000004082a1\n.text:00000000004082a6\n.text:00000000004082aa\n.text:00000000004082ad\n.text:00000000004082b0\n.text:00000000004082b7\n.text:00000000004082b8\n.text:00000000004082ba\n.text:00000000004082bc\n.text:00000000004082be\n.text:00000000004082c0\n.text:00000000004082c1\n.text:00000000004082c2\n.text:00000000004082ca\n.text:00000000004082cd\n.text:00000000004082cf\n.text:00000000004082d2\n.text:00000000004082d4\n.text:00000000004082d6\n.text:00000000004082d8\n.text:00000000004082da\n.text:00000000004082dd\n.text:00000000004082e0\n.text:00000000004082e3\n.text:00000000004082e5\n.text:00000000004082e9\n.text:00000000004082ec\n.text:00000000004082ef\n.text:00000000004082f2\n.text:00000000004082f4\n.text:00000000004082f6\n.text:00000000004082f9\n.text:00000000004082fb\n.text:0000000000408300\n.text:0000000000408302\n.text:0000000000408307\n.text:000000000040830c\n.text:000000000040830f\n.text:0000000000408311\n.text:0000000000408316\n.text:0000000000408319\n.text:000000000040831e\n.text:0000000000408321\n.text:0000000000408327\n.text:000000000040832d\n.text:0000000000408330\n.text:0000000000408335\n'
p1049
tp1050
sS'inotify_add_watch'
p1051
(S'\n__stdcall inotify_add_watch(int __fd, char * __name, uint32_t __mask)\n'
p1052
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint inotify_add_watch(int __fd,char *__name,uint32_t __mask)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_inotify_add_watch_006101a0)();\u000a  return iVar1;\u000a}\u000a\u000a
p1053
S'JMP qword ptr [0x006101a0]\n'
p1054
S'ff 25 4a e7 20 00\n'
p1055
S'.plt:0000000000401a50\n'
p1056
tp1057
sS'newlocale'
p1058
(S'\n__stdcall newlocale(int __category_mask, char * __locale, __locale_t __base)\n'
p1059
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__locale_t newlocale(int __category_mask,char *__locale,__locale_t __base)\u000a\u000a{\u000a  __locale_t p_Var1;\u000a  \u000a  p_Var1 = (__locale_t)(*(code *)PTR_newlocale_006100d8)();\u000a  return p_Var1;\u000a}\u000a\u000a
p1060
S'JMP qword ptr [0x006100d8]\n'
p1061
S'ff 25 12 e8 20 00\n'
p1062
S'.plt:00000000004018c0\n'
p1063
tp1064
sS'rotr_sz'
p1065
(S'\n__stdcall rotr_sz(size_t x)\n'
p1066
V\u000asize_t rotr_sz(size_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x >> bVar1 | x << 0x40 - bVar1;\u000a}\u000a\u000a
p1067
S'MOV ECX,ESI\nROR RDI,CL\nMOV RAX,RDI\nRET\n'
p1068
S'89 f1\n48 d3 cf\n48 89 f8\nc3\n'
p1069
S'.text:0000000000409e90\n.text:0000000000409e92\n.text:0000000000409e95\n.text:0000000000409e98\n'
p1070
tp1071
sS'set_quoting_style'
p1072
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p1073
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p1074
S'TEST RDI,RDI\nMOV EAX,0x610380\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p1075
S'48 85 ff\nb8 80 03 61 00\n48 0f 45 c7\n89 30\nc3\n'
p1076
S'.text:00000000004075e0\n.text:00000000004075e3\n.text:00000000004075e8\n.text:00000000004075ec\n.text:00000000004075ee\n'
p1077
tp1078
sS'hash_get_entries'
p1079
(S'\n__stdcall hash_get_entries(Hash_table * table, void * * buffer, size_t buffer_size)\n'
p1080
V\u000asize_t hash_get_entries(Hash_table *table,void **buffer,size_t buffer_size)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  ulong uVar2;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar3 = table->bucket;\u000a  if (table->bucket_limit <= phVar3) {\u000a    return 0;\u000a  }\u000a  uVar2 = 0;\u000a  do {\u000a    phVar1 = phVar3;\u000a    if (phVar3->data != (void *)0x0) {\u000a      while (phVar1 != (hash_entry *)0x0) {\u000a        if (buffer_size <= uVar2) {\u000a          return uVar2;\u000a        }\u000a        buffer[uVar2] = phVar1->data;\u000a        uVar2 = uVar2 + 1;\u000a        phVar1 = phVar1->next;\u000a      }\u000a    }\u000a    phVar3 = phVar3 + 1;\u000a  } while (phVar3 < table->bucket_limit);\u000a  return uVar2;\u000a}\u000a\u000a
p1081
S'MOV R8,qword ptr [RDI]\nCMP R8,qword ptr [RDI + 0x8]\nJNC 0x00406763\nXOR EAX,EAX\nCMP qword ptr [R8],0x0\nJZ 0x00406758\nTEST R8,R8\nJZ 0x00406758\nMOV R9,R8\nNOP dword ptr [RAX]\nCMP RAX,RDX\nJNC 0x00406762\nMOV RCX,qword ptr [R9]\nMOV qword ptr [RSI + RAX*0x8],RCX\nINC RAX\nMOV R9,qword ptr [R9 + 0x8]\nTEST R9,R9\nJNZ 0x00406740\nADD R8,0x10\nCMP R8,qword ptr [RDI + 0x8]\nJC 0x0040672b\nRET\nXOR EAX,EAX\nRET\n'
p1082
S'4c 8b 07\n4c 3b 47 08\n73 3a\n31 c0\n49 83 38 00\n74 27\n4d 85 c0\n74 22\n4d 89 c1\n0f 1f 80 00 00 00 00\n48 39 d0\n73 1d\n49 8b 09\n48 89 0c c6\n48 ff c0\n4d 8b 49 08\n4d 85 c9\n75 e8\n49 83 c0 10\n4c 3b 47 08\n72 c9\nc3\n31 c0\nc3\n'
p1083
S'.text:0000000000406720\n.text:0000000000406723\n.text:0000000000406727\n.text:0000000000406729\n.text:000000000040672b\n.text:000000000040672f\n.text:0000000000406731\n.text:0000000000406734\n.text:0000000000406736\n.text:0000000000406739\n.text:0000000000406740\n.text:0000000000406743\n.text:0000000000406745\n.text:0000000000406748\n.text:000000000040674c\n.text:000000000040674f\n.text:0000000000406753\n.text:0000000000406756\n.text:0000000000406758\n.text:000000000040675c\n.text:0000000000406760\n.text:0000000000406762\n.text:0000000000406763\n.text:0000000000406765\n'
p1084
tp1085
sS'textdomain'
p1086
(S'\n__stdcall textdomain()\n'
p1087
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_00610078)();\u000a  return;\u000a}\u000a\u000a
p1088
S'JMP qword ptr [0x00610078]\n'
p1089
S'ff 25 72 e8 20 00\n'
p1090
S'.plt:0000000000401800\n'
p1091
tp1092
sS'xmemdup'
p1093
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p1094
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p1095
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x004094d0\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x004019c0\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1096
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 8c 83 ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p1097
S'.text:0000000000409610\n.text:0000000000409612\n.text:0000000000409614\n.text:0000000000409615\n.text:0000000000409618\n.text:000000000040961b\n.text:000000000040961e\n.text:0000000000409623\n.text:0000000000409626\n.text:0000000000409629\n.text:000000000040962c\n.text:000000000040962f\n.text:0000000000409634\n.text:0000000000409637\n.text:0000000000409638\n.text:000000000040963a\n.text:000000000040963c\n'
p1098
tp1099
sS'xwrite_stdout'
p1100
(S'\n__stdcall xwrite_stdout(char * buffer, size_t n_bytes)\n'
p1101
V\u000avoid xwrite_stdout(char *buffer,size_t n_bytes)\u000a\u000a{\u000a  uint uVar1;\u000a  size_t sVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  \u000a  if (n_bytes != 0) {\u000a    sVar2 = fwrite_unlocked(buffer,1,n_bytes,stdout);\u000a    if (sVar2 < n_bytes) {\u000a      clearerr_unlocked(stdout);\u000a      puVar3 = (uint *)__errno_location();\u000a      uVar1 = *puVar3;\u000a      uVar4 = dcgettext(0,"error writing %s",5);\u000a      pcVar5 = quotearg_style((char *)0x4);\u000a      error(1,(ulong)uVar1,uVar4,pcVar5);\u000a      return;\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p1102
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nTEST RBX,RBX\nJZ 0x00404bc4\nMOV RCX,qword ptr [0x00610308]\nMOV ESI,0x1\nMOV RDX,RBX\nCALL 0x00401aa0\nCMP RAX,RBX\nJNC 0x00404bc4\nMOV RDI,qword ptr [0x00610308]\nCALL 0x004017f0\nCALL 0x00401770\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40c281\nMOV EDX,0x5\nCALL 0x00401840\nMOV RBX,RAX\nMOV EDI,0x4\nMOV ESI,0x40c292\nCALL 0x004087b0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00401af0\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1103
S'55\n53\n50\n48 89 f3\n48 85 db\n74 69\n48 8b 0d a6 b7 20 00\nbe 01 00 00 00\n48 89 da\ne8 31 cf ff ff\n48 39 d8\n73 50\n48 8b 3d 8d b7 20 00\ne8 70 cc ff ff\ne8 eb cb ff ff\n8b 28\n31 ff\nbe 81 c2 40 00\nba 05 00 00 00\ne8 a8 cc ff ff\n48 89 c3\nbf 04 00 00 00\nbe 92 c2 40 00\ne8 06 3c 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 ee\n48 89 da\n48 83 c4 08\n5b\n5d\ne9 2c cf ff ff\n48 83 c4 08\n5b\n5d\nc3\n'
p1104
S'.text:0000000000404b50\n.text:0000000000404b51\n.text:0000000000404b52\n.text:0000000000404b53\n.text:0000000000404b56\n.text:0000000000404b59\n.text:0000000000404b5b\n.text:0000000000404b62\n.text:0000000000404b67\n.text:0000000000404b6a\n.text:0000000000404b6f\n.text:0000000000404b72\n.text:0000000000404b74\n.text:0000000000404b7b\n.text:0000000000404b80\n.text:0000000000404b85\n.text:0000000000404b87\n.text:0000000000404b89\n.text:0000000000404b8e\n.text:0000000000404b93\n.text:0000000000404b98\n.text:0000000000404b9b\n.text:0000000000404ba0\n.text:0000000000404ba5\n.text:0000000000404baa\n.text:0000000000404bad\n.text:0000000000404bb2\n.text:0000000000404bb4\n.text:0000000000404bb6\n.text:0000000000404bb9\n.text:0000000000404bbd\n.text:0000000000404bbe\n.text:0000000000404bbf\n.text:0000000000404bc4\n.text:0000000000404bc8\n.text:0000000000404bc9\n.text:0000000000404bca\n'
p1105
tp1106
sS'get_quoting_style'
p1107
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p1108
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p1109
S'TEST RDI,RDI\nMOV EAX,0x610380\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p1110
S'48 85 ff\nb8 80 03 61 00\n48 0f 45 c7\n8b 00\nc3\n'
p1111
S'.text:00000000004075d0\n.text:00000000004075d3\n.text:00000000004075d8\n.text:00000000004075dc\n.text:00000000004075de\n'
p1112
tp1113
sS'ferror_unlocked'
p1114
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p1115
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_00610138)();\u000a  return iVar1;\u000a}\u000a\u000a
p1116
S'JMP qword ptr [0x00610138]\n'
p1117
S'ff 25 b2 e7 20 00\n'
p1118
S'.plt:0000000000401980\n'
p1119
tp1120
sS'exit'
p1121
(S'\n__stdcall exit(int __status)\n'
p1122
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_00610228)();\u000a  return;\u000a}\u000a\u000a
p1123
S'JMP qword ptr [0x00610228]\n'
p1124
S'ff 25 c2 e6 20 00\n'
p1125
S'.plt:0000000000401b60\n'
p1126
tp1127
sS'xstrtod'
p1128
(S'\n__stdcall xstrtod(char * str, char * * ptr, double * result, anon_subr_double_char_ptr_char_ptr_ptr * convert)\n'
p1129
V\u000a_Bool xstrtod(char *str,char **ptr,double *result,double (*convert)(char *,char **))\u000a\u000a{\u000a  int *piVar1;\u000a  bool bVar2;\u000a  double dVar3;\u000a  char *local_30;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0;\u000a  dVar3 = (*convert)(str,&local_30);\u000a  if (local_30 == str) {\u000a    bVar2 = false;\u000a  }\u000a  else {\u000a    if ((ptr == (char **)0x0) && (*local_30 != 0)) {\u000a      bVar2 = false;\u000a      goto LAB_0040988e;\u000a    }\u000a    if (dVar3 == 0.00000000) {\u000a      bVar2 = true;\u000a    }\u000a    else {\u000a      bVar2 = *piVar1 != 0x22;\u000a    }\u000a  }\u000a  if (ptr != (char **)0x0) {\u000a    *ptr = local_30;\u000a  }\u000aLAB_0040988e:\u000a  *result = dVar3;\u000a  return (_Bool)bVar2;\u000a}\u000a\u000a
p1130
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV R13,RCX\nMOV R14,RDX\nMOV R15,RSI\nMOV RBX,RDI\nCALL 0x00401770\nMOV R12,RAX\nMOV dword ptr [R12],0x0\nLEA RSI,[RSP + 0x8]\nMOV RDI,RBX\nCALL R13\nMOV RAX,qword ptr [RSP + 0x8]\nCMP RAX,RBX\nJZ 0x0040986d\nTEST R15,R15\nJZ 0x00409876\nXORPS XMM1,XMM1\nUCOMISD XMM0,XMM1\nJNZ 0x0040985e\nJNP 0x0040987f\nCMP dword ptr [R12],0x22\nSETNZ AL\nTEST R15,R15\nJNZ 0x00409886\nJMP 0x0040988e\nXOR EAX,EAX\nTEST R15,R15\nJNZ 0x00409886\nJMP 0x0040988e\nCMP byte ptr [RAX],0x0\nJZ 0x00409853\nXOR EAX,EAX\nJMP 0x0040988e\nMOV AL,0x1\nTEST R15,R15\nJZ 0x0040988e\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [R15],RCX\nMOVSD qword ptr [R14],XMM0\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p1131
S'41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 10\n49 89 cd\n49 89 d6\n49 89 f7\n48 89 fb\ne8 42 7f ff ff\n49 89 c4\n41 c7 04 24 00 00 00 00\n48 8d 74 24 08\n48 89 df\n41 ff d5\n48 8b 44 24 08\n48 39 d8\n74 1f\n4d 85 ff\n74 23\n0f 57 c9\n66 0f 2e c1\n75 02\n7b 21\n41 83 3c 24 22\n0f 95 c0\n4d 85 ff\n75 1b\neb 21\n31 c0\n4d 85 ff\n75 12\neb 18\n80 38 00\n74 d8\n31 c0\neb 0f\nb0 01\n4d 85 ff\n74 08\n48 8b 4c 24 08\n49 89 0f\nf2 41 0f 11 06\n48 83 c4 10\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p1132
S'.text:0000000000409810\n.text:0000000000409812\n.text:0000000000409814\n.text:0000000000409816\n.text:0000000000409818\n.text:0000000000409819\n.text:000000000040981d\n.text:0000000000409820\n.text:0000000000409823\n.text:0000000000409826\n.text:0000000000409829\n.text:000000000040982e\n.text:0000000000409831\n.text:0000000000409839\n.text:000000000040983e\n.text:0000000000409841\n.text:0000000000409844\n.text:0000000000409849\n.text:000000000040984c\n.text:000000000040984e\n.text:0000000000409851\n.text:0000000000409853\n.text:0000000000409856\n.text:000000000040985a\n.text:000000000040985c\n.text:000000000040985e\n.text:0000000000409863\n.text:0000000000409866\n.text:0000000000409869\n.text:000000000040986b\n.text:000000000040986d\n.text:000000000040986f\n.text:0000000000409872\n.text:0000000000409874\n.text:0000000000409876\n.text:0000000000409879\n.text:000000000040987b\n.text:000000000040987d\n.text:000000000040987f\n.text:0000000000409881\n.text:0000000000409884\n.text:0000000000409886\n.text:000000000040988b\n.text:000000000040988e\n.text:0000000000409893\n.text:0000000000409897\n.text:0000000000409898\n.text:000000000040989a\n.text:000000000040989c\n.text:000000000040989e\n.text:00000000004098a0\n'
p1133
tp1134
sS'safe_hasher'
p1135
(S'\n__stdcall safe_hasher(Hash_table * table, void * key)\n'
p1136
V\u000ahash_entry * safe_hasher(Hash_table *table,void *key)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*table->hasher)(key,table->n_buckets);\u000a  if (sVar1 < table->n_buckets) {\u000a    return table->bucket + sVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1137
S'PUSH RBX\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nMOV RDI,RSI\nMOV RSI,RAX\nCALL qword ptr [RBX + 0x30]\nCMP RAX,qword ptr [RBX + 0x10]\nJNC 0x00406650\nSHL RAX,0x4\nADD RAX,qword ptr [RBX]\nPOP RBX\nRET\nCALL 0x00401760\n'
p1138
S'53\n48 89 fb\n48 8b 43 10\n48 89 f7\n48 89 c6\nff 53 30\n48 3b 43 10\n73 09\n48 c1 e0 04\n48 03 03\n5b\nc3\ne8 0b b1 ff ff\n'
p1139
S'.text:0000000000406630\n.text:0000000000406631\n.text:0000000000406634\n.text:0000000000406638\n.text:000000000040663b\n.text:000000000040663e\n.text:0000000000406641\n.text:0000000000406645\n.text:0000000000406647\n.text:000000000040664b\n.text:000000000040664e\n.text:000000000040664f\n.text:0000000000406650\n'
p1140
tp1141
sS'locale_charset'
p1142
(S'\n__stdcall locale_charset()\n'
p1143
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnNUM may have a multiplier suffix:\u005cnb 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024,\u005cnGB 1000*1000*1000, G 1024*1024*1024, and so on for T, P, E, Z, Y.\u005cn\u005cn"\u000a         + 0x99;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_0040a21d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_0040a21d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p1144
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401a60\nTEST RAX,RAX\nMOV R14D,0x40bae8\nCMOVNZ R14,RAX\nCALL 0x0040a230\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x0040a1f5\nJMP 0x0040a21d\nMOV RDI,RBX\nCALL 0x00401860\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00401860\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x0040a21d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x004019a0\nTEST EAX,EAX\nJZ 0x0040a210\nCMP BPL,0x2a\nJNZ 0x0040a1d0\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x0040a1d0\nMOV RDI,RBX\nCALL 0x00401860\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x40d730\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1145
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 b2 78 ff ff\n48 85 c0\n41 be e8 ba 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 88 76 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 7a 76 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 a0 77 ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 48 76 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 30 d7 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p1146
S'.text:000000000040a1a0\n.text:000000000040a1a1\n.text:000000000040a1a3\n.text:000000000040a1a4\n.text:000000000040a1a9\n.text:000000000040a1ae\n.text:000000000040a1b1\n.text:000000000040a1b7\n.text:000000000040a1bb\n.text:000000000040a1c0\n.text:000000000040a1c3\n.text:000000000040a1c6\n.text:000000000040a1c9\n.text:000000000040a1cb\n.text:000000000040a1d0\n.text:000000000040a1d3\n.text:000000000040a1d8\n.text:000000000040a1dc\n.text:000000000040a1e1\n.text:000000000040a1e6\n.text:000000000040a1eb\n.text:000000000040a1f0\n.text:000000000040a1f3\n.text:000000000040a1f5\n.text:000000000040a1f8\n.text:000000000040a1fb\n.text:000000000040a200\n.text:000000000040a202\n.text:000000000040a204\n.text:000000000040a208\n.text:000000000040a20a\n.text:000000000040a20e\n.text:000000000040a210\n.text:000000000040a213\n.text:000000000040a218\n.text:000000000040a21d\n.text:000000000040a221\n.text:000000000040a226\n.text:000000000040a22a\n.text:000000000040a22b\n.text:000000000040a22d\n.text:000000000040a22e\n'
p1147
tp1148
sS'set_program_name'
p1149
(S'\n__stdcall set_program_name(char * argv0)\n'
p1150
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p1151
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00407561\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x004018e0\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x0040754b\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x40c7f8\nMOV EDX,0x7\nCALL 0x00401780\nTEST EAX,EAX\nJNZ 0x0040754b\nMOV ESI,0x40c800\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401780\nTEST EAX,EAX\nJNZ 0x00407548\nADD R14,0x3\nMOV qword ptr [0x00610300],R14\nMOV RBX,R14\nMOV qword ptr [0x00610378],RBX\nMOV qword ptr [0x00610320],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x00610340]\nMOV EDI,0x40c7c0\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401b70\nCALL 0x00401760\n'
p1152
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 e7 a3 ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe f8 c7 40 00\nba 07 00 00 00\ne8 5d a2 ff ff\n85 c0\n75 24\nbe 00 c8 40 00\nba 03 00 00 00\n4c 89 f7\ne8 47 a2 ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 b8 8d 20 00\n4c 89 f3\n48 89 1d 26 8e 20 00\n48 89 1d c7 8d 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d d8 8d 20 00\nbf c0 c7 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 f4 a5 ff ff\ne8 df a1 ff ff\n'
p1153
S'.text:00000000004074e0\n.text:00000000004074e2\n.text:00000000004074e3\n.text:00000000004074e4\n.text:00000000004074e7\n.text:00000000004074ea\n.text:00000000004074ec\n.text:00000000004074f1\n.text:00000000004074f4\n.text:00000000004074f9\n.text:00000000004074fc\n.text:0000000000407500\n.text:0000000000407504\n.text:0000000000407507\n.text:000000000040750a\n.text:000000000040750e\n.text:0000000000407510\n.text:0000000000407514\n.text:0000000000407519\n.text:000000000040751e\n.text:0000000000407523\n.text:0000000000407525\n.text:0000000000407527\n.text:000000000040752c\n.text:0000000000407531\n.text:0000000000407534\n.text:0000000000407539\n.text:000000000040753b\n.text:000000000040753d\n.text:0000000000407541\n.text:0000000000407548\n.text:000000000040754b\n.text:0000000000407552\n.text:0000000000407559\n.text:000000000040755d\n.text:000000000040755e\n.text:0000000000407560\n.text:0000000000407561\n.text:0000000000407568\n.text:000000000040756d\n.text:0000000000407572\n.text:0000000000407577\n.text:000000000040757c\n'
p1154
tp1155
sS'hash_delete'
p1156
(S'\n__stdcall hash_delete(Hash_table * table, void * entry)\n'
p1157
V\u000avoid * hash_delete(Hash_table *table,void *entry)\u000a\u000a{\u000a  ulong uVar1;\u000a  Hash_tuning *pHVar2;\u000a  hash_entry *phVar3;\u000a  hash_entry *__ptr;\u000a  _Bool _Var4;\u000a  void *pvVar5;\u000a  ulong uVar6;\u000a  size_t candidate;\u000a  float fVar7;\u000a  float fVar8;\u000a  hash_entry *local_20;\u000a  \u000a  pvVar5 = hash_find_entry(table,entry,&local_20);\u000a  if (pvVar5 == (void *)0x0) {\u000a    pvVar5 = (void *)0x0;\u000a  }\u000a  else {\u000a    table->n_entries = table->n_entries - 1;\u000a    if (local_20->data == (void *)0x0) {\u000a      uVar6 = table->n_buckets_used - 1;\u000a      table->n_buckets_used = uVar6;\u000a      if ((long)uVar6 < 0) {\u000a        fVar7 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a        fVar7 = fVar7 + fVar7;\u000a      }\u000a      else {\u000a        fVar7 = (float)uVar6;\u000a      }\u000a      uVar6 = table->n_buckets;\u000a      if ((long)uVar6 < 0) {\u000a        fVar8 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a        fVar8 = fVar8 + fVar8;\u000a      }\u000a      else {\u000a        fVar8 = (float)uVar6;\u000a      }\u000a      if (fVar7 < fVar8 * table->tuning->shrink_threshold) {\u000a        check_tuning(table);\u000a        uVar6 = table->n_buckets;\u000a        uVar1 = table->n_buckets_used;\u000a        if ((long)uVar1 < 0) {\u000a          fVar7 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a          fVar7 = fVar7 + fVar7;\u000a        }\u000a        else {\u000a          fVar7 = (float)uVar1;\u000a        }\u000a        pHVar2 = table->tuning;\u000a        if ((long)uVar6 < 0) {\u000a          fVar8 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a          fVar8 = fVar8 + fVar8;\u000a        }\u000a        else {\u000a          fVar8 = (float)uVar6;\u000a        }\u000a        if (fVar7 < pHVar2->shrink_threshold * fVar8) {\u000a          fVar8 = fVar8 * pHVar2->shrink_factor;\u000a          if (pHVar2->is_n_buckets == false) {\u000a            fVar8 = fVar8 * pHVar2->growth_threshold;\u000a          }\u000a          candidate = (long)fVar8;\u000a          if (DAT_0040c728 <= fVar8) {\u000a            candidate = (long)(fVar8 - DAT_0040c728) ^ 0x8000000000000000;\u000a          }\u000a          _Var4 = hash_rehash(table,candidate);\u000a          if (_Var4 == false) {\u000a            __ptr = table->free_entry_list;\u000a            while (__ptr != (hash_entry *)0x0) {\u000a              phVar3 = __ptr->next;\u000a              free(__ptr);\u000a              __ptr = phVar3;\u000a            }\u000a            table->free_entry_list = (hash_entry *)0x0;\u000a          }\u000a        }\u000a      }\u000a    }\u000a  }\u000a  return pvVar5;\u000a}\u000a\u000a
p1158
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV R15,RDI\nLEA RDX,[RSP + 0x8]\nMOV ECX,0x1\nCALL 0x00407020\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0040718a\nDEC qword ptr [R15 + 0x20]\nMOV RAX,qword ptr [RSP + 0x8]\nCMP qword ptr [RAX],0x0\nJNZ 0x004072b9\nMOV RAX,qword ptr [R15 + 0x18]\nDEC RAX\nMOV qword ptr [R15 + 0x18],RAX\nJS 0x00407192\nCVTSI2SS XMM0,RAX\nJMP 0x004071a7\nXOR R14D,R14D\nJMP 0x004072b9\nMOV RCX,RAX\nSHR RCX,1\nAND EAX,0x1\nOR RAX,RCX\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOV RCX,qword ptr [R15 + 0x10]\nMOV RAX,qword ptr [R15 + 0x28]\nTEST RCX,RCX\nJS 0x004071bb\nCVTSI2SS XMM1,RCX\nJMP 0x004071d0\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM1,RCX\nADDSS XMM1,XMM1\nMULSS XMM1,dword ptr [RAX]\nUCOMISS XMM1,XMM0\nJBE 0x004072b9\nMOV RDI,R15\nCALL 0x00406950\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x004071fc\nXORPS XMM1,XMM1\nCVTSI2SS XMM1,RCX\nJMP 0x00407214\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nXORPS XMM1,XMM1\nCVTSI2SS XMM1,RCX\nADDSS XMM1,XMM1\nMOV RCX,qword ptr [R15 + 0x28]\nTEST RAX,RAX\nJS 0x00407227\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nJMP 0x0040723f\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOVSS XMM2,dword ptr [RCX]\nMULSS XMM2,XMM0\nUCOMISS XMM2,XMM1\nJBE 0x004072b9\nMULSS XMM0,dword ptr [RCX + 0x4]\nCMP byte ptr [RCX + 0x10],0x0\nJNZ 0x0040725c\nMULSS XMM0,dword ptr [RCX + 0x8]\nMOVSS XMM1,dword ptr [0x0040c728]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RSI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RSI,RCX\nMOV RDI,R15\nCALL 0x00406bf0\nTEST AL,AL\nJNZ 0x004072b9\nMOV RDI,qword ptr [R15 + 0x48]\nTEST RDI,RDI\nJZ 0x004072b1\nNOP\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x00401750\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x004072a0\nMOV qword ptr [R15 + 0x48],0x0\nMOV RAX,R14\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1159
S'41 57\n41 56\n53\n48 83 ec 10\n49 89 ff\n48 8d 54 24 08\nb9 01 00 00 00\ne8 c5 fe ff ff\n49 89 c6\n4d 85 f6\n74 27\n49 ff 4f 20\n48 8b 44 24 08\n48 83 38 00\n0f 85 43 01 00 00\n49 8b 47 18\n48 ff c8\n49 89 47 18\n78 0f\nf3 48 0f 2a c0\neb 1d\n45 31 f6\ne9 27 01 00 00\n48 89 c1\n48 d1 e9\n83 e0 01\n48 09 c8\nf3 48 0f 2a c0\nf3 0f 58 c0\n49 8b 4f 10\n49 8b 47 28\n48 85 c9\n78 07\nf3 48 0f 2a c9\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a c9\nf3 0f 58 c9\nf3 0f 59 08\n0f 2e c8\n0f 86 dc 00 00 00\n4c 89 ff\ne8 6b f7 ff ff\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 0a\n0f 57 c9\nf3 48 0f 2a c9\neb 18\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\n0f 57 c9\nf3 48 0f 2a c9\nf3 0f 58 c9\n49 8b 4f 28\n48 85 c0\n78 0a\n0f 57 c0\nf3 48 0f 2a c0\neb 18\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\n0f 57 c0\nf3 48 0f 2a c0\nf3 0f 58 c0\nf3 0f 10 11\nf3 0f 59 d0\n0f 2e d1\n76 6d\nf3 0f 59 41 04\n80 79 10 00\n75 05\nf3 0f 59 41 08\nf3 0f 10 0d c4 54 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f0\n0f 2e c1\n48 0f 43 f1\n4c 89 ff\ne8 5f f9 ff ff\n84 c0\n75 24\n49 8b 7f 48\n48 85 ff\n74 13\n66 90\n48 8b 5f 08\ne8 a7 a4 ff ff\n48 85 db\n48 89 df\n75 ef\n49 c7 47 48 00 00 00 00\n4c 89 f0\n48 83 c4 10\n5b\n41 5e\n41 5f\nc3\n'
p1160
S'.text:0000000000407140\n.text:0000000000407142\n.text:0000000000407144\n.text:0000000000407145\n.text:0000000000407149\n.text:000000000040714c\n.text:0000000000407151\n.text:0000000000407156\n.text:000000000040715b\n.text:000000000040715e\n.text:0000000000407161\n.text:0000000000407163\n.text:0000000000407167\n.text:000000000040716c\n.text:0000000000407170\n.text:0000000000407176\n.text:000000000040717a\n.text:000000000040717d\n.text:0000000000407181\n.text:0000000000407183\n.text:0000000000407188\n.text:000000000040718a\n.text:000000000040718d\n.text:0000000000407192\n.text:0000000000407195\n.text:0000000000407198\n.text:000000000040719b\n.text:000000000040719e\n.text:00000000004071a3\n.text:00000000004071a7\n.text:00000000004071ab\n.text:00000000004071af\n.text:00000000004071b2\n.text:00000000004071b4\n.text:00000000004071b9\n.text:00000000004071bb\n.text:00000000004071be\n.text:00000000004071c1\n.text:00000000004071c4\n.text:00000000004071c7\n.text:00000000004071cc\n.text:00000000004071d0\n.text:00000000004071d4\n.text:00000000004071d7\n.text:00000000004071dd\n.text:00000000004071e0\n.text:00000000004071e5\n.text:00000000004071e9\n.text:00000000004071ed\n.text:00000000004071f0\n.text:00000000004071f2\n.text:00000000004071f5\n.text:00000000004071fa\n.text:00000000004071fc\n.text:00000000004071ff\n.text:0000000000407202\n.text:0000000000407205\n.text:0000000000407208\n.text:000000000040720b\n.text:0000000000407210\n.text:0000000000407214\n.text:0000000000407218\n.text:000000000040721b\n.text:000000000040721d\n.text:0000000000407220\n.text:0000000000407225\n.text:0000000000407227\n.text:000000000040722a\n.text:000000000040722d\n.text:0000000000407230\n.text:0000000000407233\n.text:0000000000407236\n.text:000000000040723b\n.text:000000000040723f\n.text:0000000000407243\n.text:0000000000407247\n.text:000000000040724a\n.text:000000000040724c\n.text:0000000000407251\n.text:0000000000407255\n.text:0000000000407257\n.text:000000000040725c\n.text:0000000000407264\n.text:0000000000407267\n.text:000000000040726b\n.text:0000000000407270\n.text:000000000040727a\n.text:000000000040727d\n.text:0000000000407282\n.text:0000000000407285\n.text:0000000000407289\n.text:000000000040728c\n.text:0000000000407291\n.text:0000000000407293\n.text:0000000000407295\n.text:0000000000407299\n.text:000000000040729c\n.text:000000000040729e\n.text:00000000004072a0\n.text:00000000004072a4\n.text:00000000004072a9\n.text:00000000004072ac\n.text:00000000004072af\n.text:00000000004072b1\n.text:00000000004072b9\n.text:00000000004072bc\n.text:00000000004072c0\n.text:00000000004072c1\n.text:00000000004072c3\n.text:00000000004072c5\n'
p1161
tp1162
sS'quotearg_buffer'
p1163
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p1164
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p1165
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x610380\nCMOVNZ RBP,R8\nCALL 0x00401770\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00407700\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1166
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd 80 03 61 00\n49 0f 45 e8\ne8 c8 a0 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1167
S'.text:0000000000407680\n.text:0000000000407681\n.text:0000000000407683\n.text:0000000000407685\n.text:0000000000407687\n.text:0000000000407689\n.text:000000000040768a\n.text:000000000040768b\n.text:000000000040768e\n.text:0000000000407691\n.text:0000000000407694\n.text:0000000000407697\n.text:000000000040769a\n.text:000000000040769f\n.text:00000000004076a3\n.text:00000000004076a8\n.text:00000000004076ab\n.text:00000000004076ad\n.text:00000000004076b1\n.text:00000000004076b5\n.text:00000000004076b9\n.text:00000000004076bd\n.text:00000000004076c0\n.text:00000000004076c3\n.text:00000000004076c6\n.text:00000000004076c9\n.text:00000000004076cc\n.text:00000000004076cf\n.text:00000000004076d3\n.text:00000000004076d4\n.text:00000000004076d9\n.text:00000000004076dd\n.text:00000000004076e1\n.text:00000000004076e3\n.text:00000000004076e7\n.text:00000000004076e8\n.text:00000000004076ea\n.text:00000000004076ec\n.text:00000000004076ee\n.text:00000000004076f0\n.text:00000000004076f1\n'
p1168
tp1169
sS'quotearg_colon'
p1170
(S'\n__stdcall quotearg_colon(char * arg)\n'
p1171
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1172
S'MOV ESI,0x3a\nJMP 0x00408860\n'
p1173
S'be 3a 00 00 00\neb e9\n'
p1174
S'.text:0000000000408870\n.text:0000000000408875\n'
p1175
tp1176
sS'get_stat_ctime'
p1177
(S'\n__stdcall get_stat_ctime(stat * st)\n'
p1178
V\u000atimespec get_stat_ctime(stat *st)\u000a\u000a{\u000a  return st->st_ctim;\u000a}\u000a\u000a
p1179
S'MOV RAX,qword ptr [RDI + 0x68]\nMOV RDX,qword ptr [RDI + 0x70]\nRET\n'
p1180
S'48 8b 47 68\n48 8b 57 70\nc3\n'
p1181
S'.text:0000000000408ec0\n.text:0000000000408ec4\n.text:0000000000408ec8\n'
p1182
tp1183
sS'rpl_fflush'
p1184
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p1185
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_00610198)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p1186
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0040a57d\nMOV RDI,RBX\nCALL 0x00401a90\nTEST EAX,EAX\nJZ 0x0040a57d\nMOV RDI,RBX\nCALL 0x0040a590\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401a40\n'
p1187
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 1f 75 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 ba 74 ff ff\n'
p1188
S'.text:000000000040a560\n.text:000000000040a561\n.text:000000000040a564\n.text:000000000040a567\n.text:000000000040a569\n.text:000000000040a56c\n.text:000000000040a571\n.text:000000000040a573\n.text:000000000040a575\n.text:000000000040a578\n.text:000000000040a57d\n.text:000000000040a580\n.text:000000000040a581\n'
p1189
tp1190
sS'__assert_fail'
p1191
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p1192
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_006100f8)();\u000a  return;\u000a}\u000a\u000a
p1193
S'JMP qword ptr [0x006100f8]\n'
p1194
S'ff 25 f2 e7 20 00\n'
p1195
S'.plt:0000000000401900\n'
p1196
tp1197
sS'timespectod'
p1198
(S'\n__stdcall timespectod()\n'
p1199
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000adouble timespectod(void)\u000a\u000a{\u000a  long in_RSI;\u000a  long in_RDI;\u000a  \u000a  return (double)in_RSI / _DAT_0040cd58 + (double)in_RDI;\u000a}\u000a\u000a
p1200
S'CVTSI2SD XMM1,RDI\nCVTSI2SD XMM0,RSI\nDIVSD XMM0,qword ptr [0x0040cd58]\nADDSD XMM0,XMM1\nRET\n'
p1201
S'f2 48 0f 2a cf\nf2 48 0f 2a c6\nf2 0f 5e 05 06 3e 00 00\nf2 0f 58 c1\nc3\n'
p1202
S'.text:0000000000408f40\n.text:0000000000408f45\n.text:0000000000408f4a\n.text:0000000000408f52\n.text:0000000000408f56\n'
p1203
tp1204
sS'bindtextdomain'
p1205
(S'\n__stdcall bindtextdomain()\n'
p1206
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_00610090)();\u000a  return;\u000a}\u000a\u000a
p1207
S'JMP qword ptr [0x00610090]\n'
p1208
S'ff 25 5a e8 20 00\n'
p1209
S'.plt:0000000000401830\n'
p1210
tp1211
sS'set_char_quoting'
p1212
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p1213
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p1214
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x610380\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p1215
S'89 f1\n48 85 ff\nbe 80 03 61 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p1216
S'.text:00000000004075f0\n.text:00000000004075f2\n.text:00000000004075f5\n.text:00000000004075fa\n.text:00000000004075fe\n.text:0000000000407600\n.text:0000000000407603\n.text:0000000000407607\n.text:000000000040760c\n.text:000000000040760f\n.text:0000000000407611\n.text:0000000000407613\n.text:0000000000407616\n.text:0000000000407618\n.text:000000000040761b\n.text:000000000040761d\n.text:0000000000407620\n.text:0000000000407625\n'
p1217
tp1218
sS'quotearg_n'
p1219
(S'\n__stdcall quotearg_n(char * arg)\n'
p1220
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1221
S'MOV RDX,-0x1\nMOV ECX,0x610380\nJMP 0x004084e0\n'
p1222
S'48 c7 c2 ff ff ff ff\nb9 80 03 61 00\neb 02\n'
p1223
S'.text:00000000004084d0\n.text:00000000004084d7\n.text:00000000004084dc\n'
p1224
tp1225
sS'tail_forever_inotify'
p1226
(S'\n__stdcall tail_forever_inotify(File_spec * f, size_t n_files, double sleep_interval)\n'
p1227
V\u000a/* WARNING: Removing unreachable block (ram,0x00403097) */\u000a/* WARNING: Type propagation algorithm not settling */\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000a_Bool tail_forever_inotify(File_spec *f,size_t n_files,double sleep_interval)\u000a\u000a{\u000a  char cVar1;\u000a  uint uVar2;\u000a  int __wd;\u000a  int iVar3;\u000a  int iVar4;\u000a  Hash_table *table;\u000a  size_t sVar5;\u000a  size_t sVar6;\u000a  char *pcVar7;\u000a  void *pvVar8;\u000a  long lVar9;\u000a  char *__s;\u000a  File_spec *f_00;\u000a  int *piVar10;\u000a  undefined8 uVar11;\u000a  bool bVar12;\u000a  uint32_t __mask;\u000a  ulong uVar13;\u000a  long lVar14;\u000a  size_t candidate;\u000a  long lVar15;\u000a  uint *puVar16;\u000a  uint uVar17;\u000a  char **entry;\u000a  File_spec *f_01;\u000a  int __fd;\u000a  fd_set *pfVar18;\u000a  long *plVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  timeval delay;\u000a  stat stats;\u000a  size_t local_150;\u000a  void *local_130;\u000a  size_t local_110;\u000a  File_spec *local_100;\u000a  timeval local_f8;\u000a  undefined8 local_e8;\u000a  long *local_e0;\u000a  long local_d8;\u000a  ulong local_d0;\u000a  long local_c8;\u000a  dev_t local_c0;\u000a  ino_t local_b8;\u000a  int local_7c;\u000a  \u000a  table = hash_initialize(candidate,(Hash_tuning *)0x0,wd_hasher,wd_comparator,(void (*)(void *))0x0\u000a                         );\u000a  if (table == (Hash_table *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  __mask = 2;\u000a  if (follow_mode == Follow_name) {\u000a    __mask = 0xc06;\u000a  }\u000a  __fd = (int)f;\u000a  if (candidate == 0) {\u000a    bVar21 = follow_mode == Follow_descriptor;\u000a    uVar13 = 0;\u000a  }\u000a  else {\u000a    bVar12 = false;\u000a    bVar22 = false;\u000a    uVar13 = 0;\u000a    uVar20 = 0;\u000a    entry = (char **)n_files;\u000a    do {\u000a      if (*(char *)((long)entry + 0x34) == 0) {\u000a        __s = *entry;\u000a        sVar5 = strlen(__s);\u000a        if (uVar13 < sVar5) {\u000a          uVar13 = sVar5;\u000a        }\u000a        *(undefined4 *)((long)entry + 0x44) = 0xffffffff;\u000a        if (follow_mode == Follow_name) {\u000a          sVar6 = dir_len(__s);\u000a          cVar1 = __s[sVar6];\u000a          pcVar7 = last_component(__s);\u000a          entry[10] = pcVar7 + -(long)__s;\u000a          __s[sVar6] = 0;\u000a          if (sVar6 == 0) {\u000a            __s = ".";\u000a          }\u000a          else {\u000a            __s = *entry;\u000a          }\u000a          __wd = inotify_add_watch(__fd,__s,900);\u000a          *(int *)(entry + 9) = __wd;\u000a          (*entry)[sVar6] = cVar1;\u000a          if (-1 < *(int *)(entry + 9)) goto LAB_00402fa8;\u000a          puVar16 = (uint *)__errno_location();\u000a          uVar17 = *puVar16;\u000a          if (uVar17 == 0x1c) {\u000aLAB_00403223:\u000a            uVar11 = dcgettext(0,"inotify resources exhausted",5);\u000a            error(0,0,uVar11,uVar11);\u000a          }\u000a          else {\u000a            uVar11 = dcgettext(0,"cannot watch parent directory of %s",5);\u000a            __s = quotearg_style((char *)0x4);\u000a            error(0,(ulong)uVar17,uVar11,__s);\u000a          }\u000a          goto LAB_0040378a;\u000a        }\u000aLAB_00402fa8:\u000a        __wd = inotify_add_watch(__fd,*entry,__mask);\u000a        *(int *)((long)entry + 0x44) = __wd;\u000a        if (__wd < 0) {\u000a          if (*(int *)(entry + 7) != -1) {\u000a            bVar22 = true;\u000a          }\u000a          puVar16 = (uint *)__errno_location();\u000a          uVar17 = *puVar16;\u000a          if ((uVar17 | 0x10) == 0x1c) goto LAB_00403223;\u000a          if (uVar17 != *(uint *)((long)entry + 0x3c)) {\u000a            uVar11 = dcgettext(0,"cannot watch %s",5);\u000a            quotearg_style((char *)0x4);\u000a            error(0,(ulong)uVar17,uVar11);\u000a          }\u000a        }\u000a        else {\u000a          pvVar8 = hash_insert(table,entry);\u000a          bVar12 = true;\u000a          if (pvVar8 == (void *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a            xalloc_die();\u000a          }\u000a        }\u000a      }\u000a      uVar20 = uVar20 + 1;\u000a      entry = entry + 0xc;\u000a    } while (uVar20 < candidate);\u000a    bVar21 = follow_mode == Follow_descriptor;\u000a    if ((bVar22) && (bVar21)) {\u000aLAB_0040378a:\u000a      hash_free(table);\u000a      piVar10 = __errno_location();\u000a      *piVar10 = 0;\u000a      return true;\u000a    }\u000a    if (bVar12) goto LAB_004030ae;\u000a  }\u000a  if (bVar21) {\u000a    return false;\u000a  }\u000aLAB_004030ae:\u000a  local_100 = (File_spec *)((n_files - 0x60) + candidate * 0x60);\u000a  if (candidate != 0) {\u000a    uVar20 = 0;\u000a    f_01 = (File_spec *)n_files;\u000a    do {\u000a      if (f_01->ignore == false) {\u000a        if (follow_mode == Follow_name) {\u000a          recheck(f_01);\u000a        }\u000a        else {\u000a          if (((f_01->fd != -1) && (__wd = stat(f_01->name,(stat *)&local_c0), __wd == 0)) &&\u000a             ((f_01->dev != local_c0 || (f_01->ino != local_b8)))) {\u000a            puVar16 = (uint *)__errno_location();\u000a            uVar17 = *puVar16;\u000a            uVar11 = dcgettext(0,"%s was replaced",5);\u000a            pretty_name(f_01);\u000a            __s = quotearg_style((char *)0x4);\u000a            error(0,(ulong)uVar17,uVar11,__s);\u000a            goto LAB_004037f9;\u000a          }\u000a        }\u000a        check_fspec(f_01,&local_100);\u000a      }\u000a      uVar20 = uVar20 + 1;\u000a      f_01 = f_01 + 1;\u000a    } while (uVar20 < candidate);\u000a  }\u000a  local_110 = uVar13 + 0x11;\u000a  local_130 = xmalloc(local_110);\u000a  lVar9 = (long)sleep_interval;\u000a  local_c8 = (long)((sleep_interval - (double)lVar9) * _DAT_0040a720);\u000a  local_d0 = 1 << ((byte)f & 0x3f);\u000a  local_d8 = (long)__fd;\u000a  local_e0 = (long *)(n_files + 0x50);\u000a  local_150 = 0;\u000a  uVar13 = 0;\u000a  bVar22 = false;\u000a  lVar15 = local_c8;\u000a  uVar20 = local_d0;\u000a  __wd = 3;\u000aLAB_00403510:\u000a  if (((follow_mode == Follow_name) && (reopen_inaccessible_files == 0)) &&\u000a     (sVar6 = hash_get_n_entries(table), sVar6 == 0)) {\u000a    uVar11 = dcgettext(0,"no files remaining",5);\u000a    error(0,0,uVar11,uVar11);\u000a    return false;\u000a  }\u000a  if (pid != 0) goto code_r0x00403545;\u000a  goto LAB_0040360f;\u000acode_r0x00403545:\u000a  if (bVar22) {\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  iVar3 = kill(pid,0);\u000a  if (iVar3 == 0) {\u000a    bVar22 = false;\u000a    local_f8.tv_sec = lVar9;\u000a    local_f8.tv_usec = lVar15;\u000a  }\u000a  else {\u000a    piVar10 = __errno_location();\u000a    bVar22 = *piVar10 != 1;\u000a    local_f8.tv_sec = lVar9;\u000a    local_f8.tv_usec = lVar15;\u000a    if (bVar22) {\u000a      local_f8.tv_sec = 0;\u000a      local_f8.tv_usec = 0;\u000a    }\u000a  }\u000a  lVar14 = 0x10;\u000a  pfVar18 = (fd_set *)&local_c0;\u000a  while (lVar14 != 0) {\u000a    lVar14 = lVar14 + -1;\u000a    pfVar18->fds_bits[0] = 0;\u000a    pfVar18 = (fd_set *)(pfVar18->fds_bits + 1);\u000a  }\u000a  lVar14 = __fdelt_chk();\u000a  *(ulong *)(&local_c0 + lVar14 * 8) = *(ulong *)(&local_c0 + lVar14 * 8) | uVar20;\u000a  iVar3 = select(__fd + 1,(fd_set *)&local_c0,(fd_set *)0x0,(fd_set *)0x0,&local_f8);\u000a  if (iVar3 == 0) goto LAB_00403510;\u000a  if (iVar3 == -1) {\u000a    puVar16 = (uint *)__errno_location();\u000a    uVar17 = *puVar16;\u000a    uVar11 = dcgettext(0,"error monitoring inotify event",5);\u000a    error(1,(ulong)uVar17,uVar11,uVar11);\u000a  }\u000aLAB_0040360f:\u000a  iVar3 = __wd;\u000a  if (uVar13 < local_150) goto LAB_004036a5;\u000a  local_150 = safe_read(f,(size_t)local_130);\u000a  if (local_150 == 0) {\u000aLAB_00403657:\u000a    iVar3 = __wd + -1;\u000a    if (__wd != 0) {\u000a      local_110 = local_110 * 2;\u000a      local_130 = xrealloc(local_130,local_110);\u000a      local_150 = 0;\u000a      uVar13 = 0;\u000a      lVar15 = local_c8;\u000a      uVar20 = local_d0;\u000a      __wd = iVar3;\u000a      goto LAB_00403510;\u000a    }\u000aLAB_00403667:\u000a    if (local_150 + 1 < 2) goto LAB_00403675;\u000a  }\u000a  else {\u000a    iVar3 = __wd;\u000a    if (local_150 != 0xffffffffffffffff) goto LAB_00403667;\u000a    piVar10 = __errno_location();\u000a    iVar3 = __wd;\u000a    if (*piVar10 == 0x16) goto LAB_00403657;\u000aLAB_00403675:\u000a    puVar16 = (uint *)__errno_location();\u000a    uVar17 = *puVar16;\u000a    uVar11 = dcgettext(0,"error reading inotify event",5);\u000a    error(1,(ulong)uVar17,uVar11);\u000a  }\u000a  uVar13 = 0;\u000aLAB_004036a5:\u000a  piVar10 = (int *)((long)local_130 + uVar13);\u000a  uVar17 = *(uint *)((long)local_130 + uVar13 + 0xc);\u000a  uVar13 = uVar13 + 0x10 + (ulong)uVar17;\u000a  if (uVar17 == 0) {\u000a    local_7c = *piVar10;\u000a    f_01 = (File_spec *)hash_lookup(table,&local_c0);\u000a  }\u000a  else {\u000a    if (candidate == 0) {\u000a      sVar6 = 0;\u000a    }\u000a    else {\u000a      __wd = *piVar10;\u000a      sVar6 = 0;\u000a      plVar19 = local_e0;\u000a      do {\u000a        if ((*(int *)(plVar19 + -1) == __wd) &&\u000a           (iVar4 = strcmp((char *)(piVar10 + 4),(char *)(plVar19[-10] + *plVar19)), iVar4 == 0))\u000a        break;\u000a        sVar6 = sVar6 + 1;\u000a        plVar19 = plVar19 + 0xc;\u000a      } while (sVar6 < candidate);\u000a    }\u000a    lVar15 = local_c8;\u000a    uVar20 = local_d0;\u000a    __wd = iVar3;\u000a    if (sVar6 == candidate) goto LAB_00403510;\u000a    lVar15 = sVar6 * 0x60;\u000a    f_01 = (File_spec *)(n_files + lVar15);\u000a    uVar17 = piVar10[1] & 0x200;\u000a    iVar4 = -1;\u000a    if (uVar17 == 0) {\u000a      iVar4 = inotify_add_watch(__fd,f_01->name,__mask);\u000a    }\u000a    if (iVar4 < 0 && uVar17 == 0) {\u000a      puVar16 = (uint *)__errno_location();\u000a      uVar2 = *puVar16;\u000a      if ((uVar2 | 0x10) == 0x1c) {\u000a        uVar11 = dcgettext(0,"inotify resources exhausted",5);\u000a        error(0,0,uVar11,uVar11);\u000aLAB_004037f9:\u000a        hash_free(table);\u000a        *puVar16 = 0;\u000a        return true;\u000a      }\u000a      local_e8 = dcgettext(0,"cannot watch %s",5);\u000a      __s = quotearg_style((char *)0x4);\u000a      error(0,(ulong)uVar2,local_e8,__s);\u000a    }\u000a    if ((uVar17 == 0) && ((__wd = *(int *)(n_files + 0x44 + lVar15), __wd < 0 || (iVar4 != __wd))))\u000a    {\u000a      if (-1 < __wd) {\u000a        inotify_rm_watch(__fd,__wd);\u000a        hash_delete(table,f_01);\u000a      }\u000a      *(int *)(n_files + 0x44 + lVar15) = iVar4;\u000a      lVar15 = local_c8;\u000a      uVar20 = local_d0;\u000a      __wd = iVar3;\u000a      if (iVar4 == -1) goto LAB_00403510;\u000a      f_00 = (File_spec *)hash_delete(table,f_01);\u000a      if ((f_00 != (File_spec *)0x0) && (f_00 != f_01)) {\u000a        if (follow_mode == Follow_name) {\u000a          recheck(f_00);\u000a        }\u000a        f_00->wd = -1;\u000a        uVar17 = f_00->fd;\u000a        pretty_name(f_00);\u000a        close_fd((char *)(ulong)uVar17);\u000a      }\u000a      pvVar8 = hash_insert(table,f_01);\u000a      if (pvVar8 == (void *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        xalloc_die();\u000a      }\u000a    }\u000a    if (follow_mode == Follow_name) {\u000a      recheck(f_01);\u000a    }\u000a  }\u000a  lVar15 = local_c8;\u000a  uVar20 = local_d0;\u000a  __wd = iVar3;\u000a  if (f_01 != (File_spec *)0x0) {\u000a    if ((piVar10[1] & 0xe04U) == 0) {\u000a      check_fspec(f_01,&local_100);\u000a      lVar15 = local_c8;\u000a      uVar20 = local_d0;\u000a      __wd = iVar3;\u000a    }\u000a    else {\u000a      if ((piVar10[1] & 0x400U) != 0) {\u000a        inotify_rm_watch(__fd,f_01->wd);\u000a        hash_delete(table,f_01);\u000a      }\u000a      recheck(f_01);\u000a      lVar15 = local_c8;\u000a      uVar20 = local_d0;\u000a      __wd = iVar3;\u000a    }\u000a  }\u000a  goto LAB_00403510;\u000a}\u000a\u000a
p1228
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x148\nMOVSD qword ptr [RSP + 0x28],XMM0\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x20],RSI\nMOV qword ptr [RSP + 0x30],RDI\nXOR ESI,ESI\nMOV EDX,0x405700\nMOV ECX,0x405710\nXOR R8D,R8D\nMOV RDI,RBX\nCALL 0x00406840\nMOV R12,RAX\nTEST R12,R12\nJZ 0x0040383c\nCMP dword ptr [0x00610278],0x1\nMOV EAX,0xc06\nMOV ECX,0x2\nCMOVZ ECX,EAX\nMOV dword ptr [RSP + 0x44],ECX\nTEST RBX,RBX\nMOV qword ptr [RSP + 0x10],R12\nMOV qword ptr [RSP + 0x60],RBX\nJZ 0x00403083\nMOV RBP,qword ptr [RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x38],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nXOR R13D,R13D\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RBP + 0x34],0x0\nJNZ 0x00403050\nMOV R14,RBX\nMOV RBX,qword ptr [RBP]\nMOV RDI,RBX\nCALL 0x00401860\nCMP R15,RAX\nCMOVC R15,RAX\nMOV dword ptr [RBP + 0x44],0xffffffff\nCMP dword ptr [0x00610278],0x1\nJNZ 0x00402fa8\nMOV R14,R15\nMOV RDI,RBX\nCALL 0x00406210\nMOV R15,RAX\nMOVZX R12D,byte ptr [RBX + R15*0x1]\nMOV RDI,RBX\nCALL 0x004062b0\nSUB RAX,RBX\nMOV qword ptr [RBP + 0x50],RAX\nMOV byte ptr [RBX + R15*0x1],0x0\nTEST R15,R15\nJZ 0x00402f72\nMOV RSI,qword ptr [RBP]\nJMP 0x00402f77\nMOV ESI,0x40c3f5\nMOV EDX,0x384\nMOV RDI,qword ptr [RSP + 0x30]\nCALL 0x00401a50\nMOV dword ptr [RBP + 0x48],EAX\nMOV RAX,qword ptr [RBP]\nMOV byte ptr [RAX + R15*0x1],R12B\nCMP dword ptr [RBP + 0x48],0x0\nMOV R12,qword ptr [RSP + 0x10]\nMOV R15,R14\nMOV R14,qword ptr [RSP + 0x60]\nJS 0x00403213\nMOV RSI,qword ptr [RBP]\nMOV RDI,qword ptr [RSP + 0x30]\nMOV EDX,dword ptr [RSP + 0x44]\nCALL 0x00401a50\nMOV dword ptr [RBP + 0x44],EAX\nTEST EAX,EAX\nJS 0x00402fe0\nMOV RDI,R12\nMOV RSI,RBP\nCALL 0x00407110\nMOV CL,0x1\nMOV qword ptr [RSP + 0x38],RCX\nTEST RAX,RAX\nMOV RBX,R14\nJNZ 0x00403050\nJMP 0x00403837\nCMP dword ptr [RBP + 0x38],-0x1\nJZ 0x00402fed\nMOV AL,0x1\nMOV qword ptr [RSP + 0x8],RAX\nCALL 0x00401770\nMOV EBX,dword ptr [RAX]\nMOV EAX,EBX\nOR EAX,0x10\nCMP EAX,0x1c\nJZ 0x00403223\nCMP EBX,dword ptr [RBP + 0x3c]\nJNZ 0x0040300c\nMOV RBX,R14\nJMP 0x00403050\nXOR EDI,EDI\nMOV ESI,0x40c437\nMOV EDX,0x5\nCALL 0x00401840\nMOV R14,R15\nMOV R15,RAX\nMOV RSI,qword ptr [RBP]\nMOV EDI,0x4\nCALL 0x004087b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,R15\nMOV R15,R14\nMOV RBX,qword ptr [RSP + 0x60]\nCALL 0x00401af0\nNOP word ptr [RAX + RAX*0x1]\nINC R13\nADD RBP,0x60\nCMP R13,RBX\nJC 0x00402f10\nCMP dword ptr [0x00610278],0x2\nSETZ AL\nSETNZ CL\nTEST byte ptr [RSP + 0x8],0x1\nJZ 0x00403099\nTEST CL,CL\nMOV RCX,qword ptr [RSP + 0x38]\nJZ 0x0040378a\nJMP 0x0040309e\nCMP dword ptr [0x00610278],0x2\nSETZ AL\nXOR ECX,ECX\nXOR R15D,R15D\nTEST CL,0x1\nJZ 0x004030a3\nJMP 0x004030ae\nMOV RCX,qword ptr [RSP + 0x38]\nTEST CL,0x1\nJNZ 0x004030ae\nTEST AL,AL\nJZ 0x004030ae\nXOR EBX,EBX\nJMP 0x0040379f\nMOV R13,R15\nLEA RAX,[RBX + RBX*0x2]\nSHL RAX,0x5\nMOV RCX,qword ptr [RSP + 0x20]\nLEA RAX,[RCX + RAX*0x1 + -0x60]\nMOV qword ptr [RSP + 0x78],RAX\nTEST RBX,RBX\nJZ 0x00403169\nXOR EBX,EBX\nLEA R12,[RSP + 0x78]\nLEA R15,[0xb8 + RSP]\nMOV RBP,qword ptr [RSP + 0x20]\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP byte ptr [RBP + 0x34],0x0\nJNZ 0x0040315b\nCMP dword ptr [0x00610278],0x1\nJNZ 0x0040310b\nXOR ESI,ESI\nMOV RDI,RBP\nCALL 0x00405720\nJMP 0x00403150\nCMP dword ptr [RBP + 0x38],-0x1\nJZ 0x00403150\nMOV RDI,qword ptr [RBP]\nMOV RSI,R15\nCALL 0x0040a6d0\nTEST EAX,EAX\nJNZ 0x00403150\nMOV RAX,qword ptr [RBP + 0x20]\nCMP RAX,qword ptr [0xb8 + RSP]\nJNZ 0x004037b3\nMOV RAX,qword ptr [RBP + 0x28]\nCMP RAX,qword ptr [0xc0 + RSP]\nJNZ 0x004037b3\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,RBP\nMOV RSI,R12\nCALL 0x00405b90\nINC RBX\nADD RBP,0x60\nCMP RBX,qword ptr [RSP + 0x60]\nJC 0x004030f0\nMOV RDI,R13\nADD RDI,0x11\nMOV qword ptr [RSP + 0x68],RDI\nCALL 0x004094d0\nMOV qword ptr [RSP + 0x48],RAX\nMOVSD XMM1,qword ptr [RSP + 0x28]\nCVTTSD2SI RAX,XMM1\nMOV qword ptr [RSP + 0x38],RAX\nCVTSI2SD XMM0,RAX\nSUBSD XMM1,XMM0\nMULSD XMM1,qword ptr [0x0040a720]\nCVTTSD2SI RDI,XMM1\nMOV RDX,qword ptr [RSP + 0x30]\nMOV EAX,EDX\nSAR EAX,0x1f\nSHR EAX,0x1a\nADD EAX,EDX\nAND EAX,0xc0\nMOV ECX,EDX\nSUB ECX,EAX\nMOV R12D,0x1\nSHL R12,CL\nMOVSXD RBX,EDX\nLEA EBP,[RDX + 0x1]\nMOV RAX,qword ptr [RSP + 0x20]\nLEA RAX,[RAX + 0x50]\nMOV qword ptr [0x98 + RSP],RAX\nMOV R13D,0x3\nMOV EAX,0x0\nMOV qword ptr [RSP + 0x28],RAX\nXOR ECX,ECX\nXOR R14D,R14D\nMOV qword ptr [0xb0 + RSP],RDI\nMOV qword ptr [0xa8 + RSP],R12\nMOV qword ptr [0xa0 + RSP],RBX\nMOV dword ptr [RSP + 0x74],EBP\nJMP 0x004034a0\nCALL 0x00401770\nMOV EBX,dword ptr [RAX]\nCMP EBX,0x1c\nJNZ 0x00403757\nXOR EDI,EDI\nMOV ESI,0x40c41b\nMOV EDX,0x5\nCALL 0x00401840\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401af0\nJMP 0x0040378a\nLEA RBX,[R13 + R13*0x2]\nSHL RBX,0x5\nMOV RAX,qword ptr [RSP + 0x20]\nLEA RDX,[RAX + RBX*0x1]\nMOV RAX,qword ptr [RSP + 0x50]\nMOV EBP,dword ptr [RAX + 0x4]\nMOV EAX,0x200\nAND EBP,EAX\nSETZ R12B\nMOV R15D,0xffffffff\nMOV qword ptr [RSP + 0x18],RDX\nJNZ 0x0040329a\nMOV RSI,qword ptr [RDX]\nMOV RDI,qword ptr [RSP + 0x30]\nMOV EDX,dword ptr [RSP + 0x44]\nCALL 0x00401a50\nMOV RDX,qword ptr [RSP + 0x18]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV R15D,EAX\nTEST R15D,R15D\nSETS AL\nAND AL,R12B\nCMP AL,0x1\nMOV R13,qword ptr [RSP + 0x58]\nJNZ 0x0040331d\nCALL 0x00401770\nMOV R12D,dword ptr [RAX]\nMOV ECX,R12D\nOR ECX,0x10\nXOR EDI,EDI\nCMP ECX,0x1c\nJZ 0x0040380b\nMOV ESI,0x40c437\nMOV EDX,0x5\nCALL 0x00401840\nMOV qword ptr [0x90 + RSP],RAX\nMOV dword ptr [RSP + 0x70],R15D\nMOV R15,RBX\nMOV RBX,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RBX]\nMOV EDI,0x4\nCALL 0x004087b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R12D\nMOV RDX,qword ptr [0x90 + RSP]\nCALL 0x00401af0\nMOV RDX,RBX\nMOV RBX,R15\nMOV R15D,dword ptr [RSP + 0x70]\nMOV RCX,qword ptr [RSP + 0x8]\nTEST EBP,EBP\nJNZ 0x004033ee\nMOV RAX,qword ptr [RSP + 0x20]\nMOV ESI,dword ptr [RAX + RBX*0x1 + 0x44]\nTEST ESI,ESI\nJS 0x0040333b\nCMP R15D,ESI\nJZ 0x004033ee\nMOV RAX,qword ptr [RSP + 0x20]\nLEA R12,[RAX + RBX*0x1 + 0x44]\nTEST ESI,ESI\nJS 0x0040336c\nMOV RDI,qword ptr [RSP + 0x30]\nCALL 0x00401bc0\nMOV RDI,qword ptr [RSP + 0x10]\nMOV RSI,qword ptr [RSP + 0x18]\nCALL 0x00407140\nMOV RDX,qword ptr [RSP + 0x18]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV dword ptr [R12],R15D\nCMP R15D,-0x1\nJZ 0x004034a0\nMOV RDI,qword ptr [RSP + 0x10]\nMOV RSI,RDX\nCALL 0x00407140\nMOV RSI,qword ptr [RSP + 0x18]\nMOV R12,RAX\nTEST R12,R12\nJZ 0x004033d1\nCMP R12,RSI\nJZ 0x004033d1\nCMP dword ptr [0x00610278],0x1\nJNZ 0x004033ac\nXOR ESI,ESI\nMOV RDI,R12\nCALL 0x00405720\nMOV dword ptr [R12 + 0x44],0xffffffff\nMOV EBX,dword ptr [R12 + 0x38]\nMOV RDI,R12\nCALL 0x00403d40\nMOV EDI,EBX\nMOV RSI,RAX\nCALL 0x00403dd0\nMOV RSI,qword ptr [RSP + 0x18]\nMOV RDI,qword ptr [RSP + 0x10]\nCALL 0x00407110\nMOV RDX,qword ptr [RSP + 0x18]\nTEST RAX,RAX\nMOV RCX,qword ptr [RSP + 0x8]\nJZ 0x00403841\nCMP dword ptr [0x00610278],0x1\nJNZ 0x0040343e\nXOR ESI,ESI\nMOV RDI,RDX\nCALL 0x00405720\nMOV RDX,qword ptr [RSP + 0x18]\nMOV RCX,qword ptr [RSP + 0x8]\nTEST RDX,RDX\nJZ 0x004034a0\nJMP 0x00403443\nMOV RAX,qword ptr [RSP + 0x50]\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [0xfc + RSP],EAX\nMOV RDI,qword ptr [RSP + 0x10]\nLEA RSI,[0xb8 + RSP]\nCALL 0x004065d0\nMOV RCX,qword ptr [RSP + 0x8]\nMOV RDX,RAX\nTEST RDX,RDX\nJZ 0x004034a0\nMOV RAX,qword ptr [RSP + 0x50]\nMOV EAX,dword ptr [RAX + 0x4]\nTEST AX,0xe04\nJZ 0x00403478\nTEST AH,0x4\nJZ 0x0040348c\nMOV ESI,dword ptr [RDX + 0x44]\nMOV RDI,qword ptr [RSP + 0x30]\nMOV R15,RDX\nCALL 0x00401bc0\nMOV RDI,qword ptr [RSP + 0x10]\nMOV RSI,R15\nCALL 0x00407140\nMOV RDX,R15\nJMP 0x0040348c\nMOV RDI,RDX\nLEA RSI,[RSP + 0x78]\nCALL 0x00405b90\nMOV RCX,qword ptr [RSP + 0x8]\nJMP 0x004034a0\nXOR ESI,ESI\nMOV RDI,RDX\nCALL 0x00405720\nMOV RCX,qword ptr [RSP + 0x8]\nNOP dword ptr [RAX + RAX*0x1]\nMOV R12D,R13D\nJMP 0x004034d0\nMOV RSI,qword ptr [RSP + 0x68]\nADD RSI,RSI\nMOV RDI,qword ptr [RSP + 0x48]\nMOV qword ptr [RSP + 0x68],RSI\nCALL 0x00409510\nMOV qword ptr [RSP + 0x48],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x28],RAX\nXOR ECX,ECX\nNOP word ptr [RAX + RAX*0x1]\nMOV EAX,R12D\nMOV qword ptr [RSP + 0x58],RAX\nNOP dword ptr [RAX + RAX*0x1]\nMOV qword ptr [RSP + 0x8],RCX\nMOV R15,qword ptr [0xb0 + RSP]\nMOV R12,qword ptr [0xa8 + RSP]\nMOV RBX,qword ptr [0xa0 + RSP]\nMOV EBP,dword ptr [RSP + 0x74]\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP dword ptr [0x00610278],0x1\nJNZ 0x00403537\nMOVZX EAX,byte ptr [0x00610353]\nTEST AL,AL\nJNZ 0x00403537\nMOV RDI,qword ptr [RSP + 0x10]\nCALL 0x00406430\nTEST RAX,RAX\nJZ 0x00403731\nMOV EDI,dword ptr [0x00610354]\nTEST EDI,EDI\nJZ 0x0040360f\nTEST R14B,0x1\nJNZ 0x00403830\nXOR ESI,ESI\nCALL 0x004019d0\nTEST EAX,EAX\nJZ 0x00403580\nCALL 0x00401770\nCMP dword ptr [RAX],0x1\nSETNZ R14B\nJZ 0x00403583\nXORPD XMM0,XMM0\nMOVAPD xmmword ptr [0x80 + RSP],XMM0\nJMP 0x00403598\nXOR R14D,R14D\nMOV RAX,qword ptr [RSP + 0x38]\nMOV qword ptr [0x80 + RSP],RAX\nMOV qword ptr [0x88 + RSP],R15\nXOR EAX,EAX\nMOV ECX,0x10\nLEA R13,[0xb8 + RSP]\nMOV RDI,R13\nCLD\nSTOSQ.REP RDI\nMOV RDI,RBX\nCALL 0x004018b0\nOR qword ptr [0xb8 + RSP + RAX*0x8],R12\nXOR EDX,EDX\nXOR ECX,ECX\nMOV EDI,EBP\nMOV RSI,R13\nLEA R8,[0x80 + RSP]\nCALL 0x00401a00\nTEST EAX,EAX\nJZ 0x00403510\nCMP EAX,-0x1\nJNZ 0x0040360f\nCALL 0x00401770\nMOV R12D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40c46a\nMOV EDX,0x5\nCALL 0x00401840\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,R12D\nMOV RDX,RCX\nCALL 0x00401af0\nMOV R13,qword ptr [RSP + 0x58]\nMOV RCX,qword ptr [RSP + 0x8]\nCMP qword ptr [RSP + 0x28],RCX\nJA 0x004036a5\nMOV RDI,qword ptr [RSP + 0x30]\nMOV RSI,qword ptr [RSP + 0x48]\nMOV RDX,qword ptr [RSP + 0x68]\nCALL 0x00408de0\nMOV RCX,RAX\nMOV qword ptr [RSP + 0x28],RCX\nTEST RAX,RAX\nJZ 0x00403657\nCMP qword ptr [RSP + 0x28],-0x1\nJNZ 0x00403667\nCALL 0x00401770\nCMP dword ptr [RAX],0x16\nJNZ 0x00403675\nLEA R12D,[R13 + -0x1]\nTEST R13D,R13D\nJNZ 0x004034a5\nMOV R13D,R12D\nMOV RAX,qword ptr [RSP + 0x28]\nINC RAX\nCMP RAX,0x1\nJA 0x004036a3\nCALL 0x00401770\nMOV R12D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40c489\nMOV EDX,0x5\nCALL 0x00401840\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,R12D\nMOV RDX,RCX\nCALL 0x00401af0\nXOR ECX,ECX\nMOV RAX,qword ptr [RSP + 0x48]\nLEA RDX,[RAX + RCX*0x1]\nMOV qword ptr [RSP + 0x50],RDX\nMOV EAX,dword ptr [RAX + RCX*0x1 + 0xc]\nTEST RAX,RAX\nLEA RCX,[RCX + RAX*0x1 + 0x10]\nMOV qword ptr [RSP + 0x8],RCX\nJZ 0x00403416\nMOV qword ptr [RSP + 0x58],R13\nMOV RBX,qword ptr [RSP + 0x60]\nTEST RBX,RBX\nJZ 0x00403720\nMOV RAX,qword ptr [RSP + 0x50]\nLEA RBP,[RAX + 0x10]\nMOV R15D,dword ptr [RAX]\nMOV R12,qword ptr [0x98 + RSP]\nXOR R13D,R13D\nCMP dword ptr [R12 + -0x8],R15D\nJNZ 0x00403711\nMOV RSI,qword ptr [R12 + -0x50]\nADD RSI,qword ptr [R12]\nMOV RDI,RBP\nCALL 0x004019a0\nMOV RCX,qword ptr [RSP + 0x8]\nTEST EAX,EAX\nJZ 0x00403723\nINC R13\nADD R12,0x60\nCMP R13,RBX\nJC 0x004036f0\nJMP 0x00403723\nXOR R13D,R13D\nCMP R13,RBX\nJZ 0x004034e0\nJMP 0x0040324a\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x40c457\nMOV EDX,0x5\nCALL 0x00401840\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401af0\nJMP 0x0040379f\nXOR EDI,EDI\nMOV ESI,0x40c3f7\nMOV EDX,0x5\nCALL 0x00401840\nMOV R14,RAX\nMOV RSI,qword ptr [RBP]\nMOV EDI,0x4\nCALL 0x004087b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,R14\nCALL 0x00401af0\nMOV RDI,R12\nCALL 0x00406b10\nCALL 0x00401770\nMOV dword ptr [RAX],0x0\nMOV BL,0x1\nMOV EAX,EBX\nADD RSP,0x148\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401770\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nXOR EDI,EDI\nMOV ESI,0x40c447\nMOV EDX,0x5\nCALL 0x00401840\nMOV R15,RAX\nMOV RDI,RBP\nCALL 0x00403d40\nMOV EDI,0x4\nMOV RSI,RAX\nCALL 0x004087b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,R15\nCALL 0x00401af0\nMOV RDI,qword ptr [RSP + 0x10]\nCALL 0x00406b10\nMOV dword ptr [RBX],0x0\nJMP 0x0040379d\nMOV ESI,0x40c41b\nMOV EDX,0x5\nMOV RBX,RAX\nCALL 0x00401840\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401af0\nJMP 0x004037f9\nXOR EDI,EDI\nCALL 0x00401b60\nCALL 0x00409660\nCALL 0x00409660\nCALL 0x00409660\n'
p1229
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 48 01 00 00\nf2 0f 11 44 24 28\n48 89 d3\n48 89 74 24 20\n48 89 7c 24 30\n31 f6\nba 00 57 40 00\nb9 10 57 40 00\n45 31 c0\n48 89 df\ne8 85 39 00 00\n49 89 c4\n4d 85 e4\n0f 84 75 09 00 00\n83 3d aa d3 20 00 01\nb8 06 0c 00 00\nb9 02 00 00 00\n0f 44 c8\n89 4c 24 44\n48 85 db\n4c 89 64 24 10\n48 89 5c 24 60\n0f 84 91 01 00 00\n48 8b 6c 24 20\n31 c0\n48 89 44 24 38\n31 c0\n48 89 44 24 08\n45 31 ff\n45 31 ed\n0f 1f 44 00 00\n80 7d 34 00\n0f 85 36 01 00 00\n49 89 de\n48 8b 5d 00\n48 89 df\ne8 37 e9 ff ff\n49 39 c7\n4c 0f 42 f8\nc7 45 44 ff ff ff ff\n83 3d 3a d3 20 00 01\n75 68\n4d 89 fe\n48 89 df\ne8 c5 32 00 00\n49 89 c7\n46 0f b6 24 3b\n48 89 df\ne8 55 33 00 00\n48 29 d8\n48 89 45 50\n42 c6 04 3b 00\n4d 85 ff\n74 06\n48 8b 75 00\neb 05\nbe f5 c3 40 00\nba 84 03 00 00\n48 8b 7c 24 30\ne8 ca ea ff ff\n89 45 48\n48 8b 45 00\n46 88 24 38\n83 7d 48 00\n4c 8b 64 24 10\n4d 89 f7\n4c 8b 74 24 60\n0f 88 6b 02 00 00\n48 8b 75 00\n48 8b 7c 24 30\n8b 54 24 44\ne8 96 ea ff ff\n89 45 44\n85 c0\n78 1f\n4c 89 e7\n48 89 ee\ne8 44 41 00 00\nb1 01\n48 89 4c 24 38\n48 85 c0\n4c 89 f3\n75 75\ne9 57 08 00 00\n83 7d 38 ff\n74 07\nb0 01\n48 89 44 24 08\ne8 7e e7 ff ff\n8b 18\n89 d8\n83 c8 10\n83 f8 1c\n0f 84 21 02 00 00\n3b 5d 3c\n75 05\n4c 89 f3\neb 44\n31 ff\nbe 37 c4 40 00\nba 05 00 00 00\ne8 23 e8 ff ff\n4d 89 fe\n49 89 c7\n48 8b 75 00\nbf 04 00 00 00\ne8 7f 57 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n4c 89 fa\n4d 89 f7\n48 8b 5c 24 60\ne8 a6 ea ff ff\n66 0f 1f 44 00 00\n49 ff c5\n48 83 c5 60\n49 39 dd\n0f 82 b0 fe ff ff\n83 3d 11 d2 20 00 02\n0f 94 c0\n0f 95 c1\nf6 44 24 08 01\n74 25\n84 c9\n48 8b 4c 24 38\n0f 84 09 07 00 00\neb 1b\n83 3d ee d1 20 00 02\n0f 94 c0\n31 c9\n45 31 ff\nf6 c1 01\n74 0c\neb 15\n48 8b 4c 24 38\nf6 c1 01\n75 0b\n84 c0\n74 07\n31 db\ne9 f1 06 00 00\n4d 89 fd\n48 8d 04 5b\n48 c1 e0 05\n48 8b 4c 24 20\n48 8d 44 01 a0\n48 89 44 24 78\n48 85 db\n0f 84 98 00 00 00\n31 db\n4c 8d 64 24 78\n4c 8d bc 24 b8 00 00 00\n48 8b 6c 24 20\n66 66 2e 0f 1f 84 00 00 00 00 00\n80 7d 34 00\n75 65\n83 3d 7b d1 20 00 01\n75 0c\n31 f6\n48 89 ef\ne8 17 26 00 00\neb 45\n83 7d 38 ff\n74 3f\n48 8b 7d 00\n4c 89 fe\ne8 b3 75 00 00\n85 c0\n75 2f\n48 8b 45 20\n48 3b 84 24 b8 00 00 00\n0f 85 80 06 00 00\n48 8b 45 28\n48 3b 84 24 c0 00 00 00\n0f 85 6e 06 00 00\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 ef\n4c 89 e6\ne8 35 2a 00 00\n48 ff c3\n48 83 c5 60\n48 3b 5c 24 60\n72 87\n4c 89 ef\n48 83 c7 11\n48 89 7c 24 68\ne8 56 63 00 00\n48 89 44 24 48\nf2 0f 10 4c 24 28\nf2 48 0f 2c c1\n48 89 44 24 38\nf2 48 0f 2a c0\nf2 0f 5c c8\nf2 0f 59 0d 80 75 00 00\nf2 48 0f 2c f9\n48 8b 54 24 30\n89 d0\nc1 f8 1f\nc1 e8 1a\n01 d0\n25 c0 00 00 00\n89 d1\n29 c1\n41 bc 01 00 00 00\n49 d3 e4\n48 63 da\n8d 6a 01\n48 8b 44 24 20\n48 8d 40 50\n48 89 84 24 98 00 00 00\n41 bd 03 00 00 00\nb8 00 00 00 00\n48 89 44 24 28\n31 c9\n45 31 f6\n48 89 bc 24 b0 00 00 00\n4c 89 a4 24 a8 00 00 00\n48 89 9c 24 a0 00 00 00\n89 6c 24 74\ne9 8d 02 00 00\ne8 58 e5 ff ff\n8b 18\n83 fb 1c\n0f 85 34 05 00 00\n31 ff\nbe 1b c4 40 00\nba 05 00 00 00\ne8 0c e6 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 ab e8 ff ff\ne9 40 05 00 00\n4b 8d 5c 6d 00\n48 c1 e3 05\n48 8b 44 24 20\n48 8d 14 18\n48 8b 44 24 50\n8b 68 04\nb8 00 02 00 00\n21 c5\n41 0f 94 c4\n41 bf ff ff ff ff\n48 89 54 24 18\n75 1e\n48 8b 32\n48 8b 7c 24 30\n8b 54 24 44\ne8 c3 e7 ff ff\n48 8b 54 24 18\n48 8b 4c 24 08\n41 89 c7\n45 85 ff\n0f 98 c0\n44 20 e0\n3c 01\n4c 8b 6c 24 58\n75 71\ne8 bf e4 ff ff\n44 8b 20\n44 89 e1\n83 c9 10\n31 ff\n83 f9 1c\n0f 84 46 05 00 00\nbe 37 c4 40 00\nba 05 00 00 00\ne8 6c e5 ff ff\n48 89 84 24 90 00 00 00\n44 89 7c 24 70\n49 89 df\n48 8b 5c 24 18\n48 8b 33\nbf 04 00 00 00\ne8 ba 54 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 e6\n48 8b 94 24 90 00 00 00\ne8 e3 e7 ff ff\n48 89 da\n4c 89 fb\n44 8b 7c 24 70\n48 8b 4c 24 08\n85 ed\n0f 85 c9 00 00 00\n48 8b 44 24 20\n8b 74 18 44\n85 f6\n78 09\n41 39 f7\n0f 84 b3 00 00 00\n48 8b 44 24 20\n4c 8d 64 18 44\n85 f6\n78 23\n48 8b 7c 24 30\ne8 6d e8 ff ff\n48 8b 7c 24 10\n48 8b 74 24 18\ne8 de 3d 00 00\n48 8b 54 24 18\n48 8b 4c 24 08\n45 89 3c 24\n41 83 ff ff\n0f 84 26 01 00 00\n48 8b 7c 24 10\n48 89 d6\ne8 b9 3d 00 00\n48 8b 74 24 18\n49 89 c4\n4d 85 e4\n74 3d\n49 39 f4\n74 38\n83 3d d8 ce 20 00 01\n75 0a\n31 f6\n4c 89 e7\ne8 74 23 00 00\n41 c7 44 24 44 ff ff ff ff\n41 8b 5c 24 38\n4c 89 e7\ne8 7e 09 00 00\n89 df\n48 89 c6\ne8 04 0a 00 00\n48 8b 74 24 18\n48 8b 7c 24 10\ne8 35 3d 00 00\n48 8b 54 24 18\n48 85 c0\n48 8b 4c 24 08\n0f 84 53 04 00 00\n83 3d 83 ce 20 00 01\n75 47\n31 f6\n48 89 d7\ne8 1f 23 00 00\n48 8b 54 24 18\n48 8b 4c 24 08\n48 85 d2\n0f 84 8c 00 00 00\neb 2d\n48 8b 44 24 50\n8b 00\n89 84 24 fc 00 00 00\n48 8b 7c 24 10\n48 8d b4 24 b8 00 00 00\ne8 9a 31 00 00\n48 8b 4c 24 08\n48 89 c2\n48 85 d2\n74 5d\n48 8b 44 24 50\n8b 40 04\n66 a9 04 0e\n74 27\nf6 c4 04\n74 36\n8b 72 44\n48 8b 7c 24 30\n49 89 d7\ne8 5a e7 ff ff\n48 8b 7c 24 10\n4c 89 fe\ne8 cd 3c 00 00\n4c 89 fa\neb 14\n48 89 d7\n48 8d 74 24 78\ne8 0b 27 00 00\n48 8b 4c 24 08\neb 14\n31 f6\n48 89 d7\ne8 8a 22 00 00\n48 8b 4c 24 08\n0f 1f 44 00 00\n45 89 ec\neb 2b\n48 8b 74 24 68\n48 01 f6\n48 8b 7c 24 48\n48 89 74 24 68\ne8 54 60 00 00\n48 89 44 24 48\n31 c0\n48 89 44 24 28\n31 c9\n66 0f 1f 44 00 00\n44 89 e0\n48 89 44 24 58\n0f 1f 84 00 00 00 00 00\n48 89 4c 24 08\n4c 8b bc 24 b0 00 00 00\n4c 8b a4 24 a8 00 00 00\n48 8b 9c 24 a0 00 00 00\n8b 6c 24 74\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n83 3d 61 cd 20 00 01\n75 1e\n0f b6 05 33 ce 20 00\n84 c0\n75 13\n48 8b 7c 24 10\ne8 02 2f 00 00\n48 85 c0\n0f 84 fa 01 00 00\n8b 3d 17 ce 20 00\n85 ff\n0f 84 ca 00 00 00\n41 f6 c6 01\n0f 85 e1 02 00 00\n31 f6\ne8 7a e4 ff ff\n85 c0\n74 26\ne8 11 e2 ff ff\n83 38 01\n41 0f 95 c6\n74 1b\n66 0f 57 c0\n66 0f 29 84 24 80 00 00 00\neb 21\n45 31 f6\n48 8b 44 24 38\n48 89 84 24 80 00 00 00\n4c 89 bc 24 88 00 00 00\n31 c0\nb9 10 00 00 00\n4c 8d ac 24 b8 00 00 00\n4c 89 ef\nfc\nf3 48 ab\n48 89 df\ne8 fa e2 ff ff\n4c 09 a4 c4 b8 00 00 00\n31 d2\n31 c9\n89 ef\n4c 89 ee\n4c 8d 84 24 80 00 00 00\ne8 2c e4 ff ff\n85 c0\n0f 84 34 ff ff ff\n83 f8 ff\n75 2e\ne8 8a e1 ff ff\n44 8b 20\n31 ff\nbe 6a c4 40 00\nba 05 00 00 00\ne8 46 e2 ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n44 89 e6\n48 89 ca\ne8 e1 e4 ff ff\n4c 8b 6c 24 58\n48 8b 4c 24 08\n48 39 4c 24 28\n0f 87 81 00 00 00\n48 8b 7c 24 30\n48 8b 74 24 48\n48 8b 54 24 68\ne8 a8 57 00 00\n48 89 c1\n48 89 4c 24 28\n48 85 c0\n74 12\n48 83 7c 24 28 ff\n75 1a\ne8 1e e1 ff ff\n83 38 16\n75 1e\n45 8d 65 ff\n45 85 ed\n0f 85 41 fe ff ff\n45 89 e5\n48 8b 44 24 28\n48 ff c0\n48 83 f8 01\n77 2e\ne8 f6 e0 ff ff\n44 8b 20\n31 ff\nbe 89 c4 40 00\nba 05 00 00 00\ne8 b2 e1 ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n44 89 e6\n48 89 ca\ne8 4d e4 ff ff\n31 c9\n48 8b 44 24 48\n48 8d 14 08\n48 89 54 24 50\n8b 44 08 0c\n48 85 c0\n48 8d 4c 01 10\n48 89 4c 24 08\n0f 84 4c fd ff ff\n4c 89 6c 24 58\n48 8b 5c 24 60\n48 85 db\n74 47\n48 8b 44 24 50\n48 8d 68 10\n44 8b 38\n4c 8b a4 24 98 00 00 00\n45 31 ed\n45 39 7c 24 f8\n75 1a\n49 8b 74 24 b0\n49 03 34 24\n48 89 ef\ne8 98 e2 ff ff\n48 8b 4c 24 08\n85 c0\n74 12\n49 ff c5\n49 83 c4 60\n49 39 dd\n72 d3\neb 04\n45 31 ed\n49 39 dd\n0f 84 b4 fd ff ff\ne9 19 fb ff ff\n31 db\n31 ff\nbe 57 c4 40 00\nba 05 00 00 00\ne8 fc e0 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 9b e3 ff ff\neb 48\n31 ff\nbe f7 c3 40 00\nba 05 00 00 00\ne8 d8 e0 ff ff\n49 89 c6\n48 8b 75 00\nbf 04 00 00 00\ne8 37 50 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n4c 89 f2\ne8 66 e3 ff ff\n4c 89 e7\ne8 7e 33 00 00\ne8 d9 df ff ff\nc7 00 00 00 00 00\nb3 01\n89 d8\n48 81 c4 48 01 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 b8 df ff ff\n48 89 c3\n44 8b 33\n31 ff\nbe 47 c4 40 00\nba 05 00 00 00\ne8 71 e0 ff ff\n49 89 c7\n48 89 ef\ne8 66 05 00 00\nbf 04 00 00 00\n48 89 c6\ne8 c9 4f 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 f6\n4c 89 fa\ne8 f7 e2 ff ff\n48 8b 7c 24 10\ne8 0d 33 00 00\nc7 03 00 00 00 00\neb 92\nbe 1b c4 40 00\nba 05 00 00 00\n48 89 c3\ne8 23 e0 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 c2 e2 ff ff\neb c9\n31 ff\ne8 29 e3 ff ff\ne8 24 5e 00 00\ne8 1f 5e 00 00\ne8 1a 5e 00 00\n'
p1230
S'.text:0000000000402e80\n.text:0000000000402e81\n.text:0000000000402e83\n.text:0000000000402e85\n.text:0000000000402e87\n.text:0000000000402e89\n.text:0000000000402e8a\n.text:0000000000402e91\n.text:0000000000402e97\n.text:0000000000402e9a\n.text:0000000000402e9f\n.text:0000000000402ea4\n.text:0000000000402ea6\n.text:0000000000402eab\n.text:0000000000402eb0\n.text:0000000000402eb3\n.text:0000000000402eb6\n.text:0000000000402ebb\n.text:0000000000402ebe\n.text:0000000000402ec1\n.text:0000000000402ec7\n.text:0000000000402ece\n.text:0000000000402ed3\n.text:0000000000402ed8\n.text:0000000000402edb\n.text:0000000000402edf\n.text:0000000000402ee2\n.text:0000000000402ee7\n.text:0000000000402eec\n.text:0000000000402ef2\n.text:0000000000402ef7\n.text:0000000000402ef9\n.text:0000000000402efe\n.text:0000000000402f00\n.text:0000000000402f05\n.text:0000000000402f08\n.text:0000000000402f0b\n.text:0000000000402f10\n.text:0000000000402f14\n.text:0000000000402f1a\n.text:0000000000402f1d\n.text:0000000000402f21\n.text:0000000000402f24\n.text:0000000000402f29\n.text:0000000000402f2c\n.text:0000000000402f30\n.text:0000000000402f37\n.text:0000000000402f3e\n.text:0000000000402f40\n.text:0000000000402f43\n.text:0000000000402f46\n.text:0000000000402f4b\n.text:0000000000402f4e\n.text:0000000000402f53\n.text:0000000000402f56\n.text:0000000000402f5b\n.text:0000000000402f5e\n.text:0000000000402f62\n.text:0000000000402f67\n.text:0000000000402f6a\n.text:0000000000402f6c\n.text:0000000000402f70\n.text:0000000000402f72\n.text:0000000000402f77\n.text:0000000000402f7c\n.text:0000000000402f81\n.text:0000000000402f86\n.text:0000000000402f89\n.text:0000000000402f8d\n.text:0000000000402f91\n.text:0000000000402f95\n.text:0000000000402f9a\n.text:0000000000402f9d\n.text:0000000000402fa2\n.text:0000000000402fa8\n.text:0000000000402fac\n.text:0000000000402fb1\n.text:0000000000402fb5\n.text:0000000000402fba\n.text:0000000000402fbd\n.text:0000000000402fbf\n.text:0000000000402fc1\n.text:0000000000402fc4\n.text:0000000000402fc7\n.text:0000000000402fcc\n.text:0000000000402fce\n.text:0000000000402fd3\n.text:0000000000402fd6\n.text:0000000000402fd9\n.text:0000000000402fdb\n.text:0000000000402fe0\n.text:0000000000402fe4\n.text:0000000000402fe6\n.text:0000000000402fe8\n.text:0000000000402fed\n.text:0000000000402ff2\n.text:0000000000402ff4\n.text:0000000000402ff6\n.text:0000000000402ff9\n.text:0000000000402ffc\n.text:0000000000403002\n.text:0000000000403005\n.text:0000000000403007\n.text:000000000040300a\n.text:000000000040300c\n.text:000000000040300e\n.text:0000000000403013\n.text:0000000000403018\n.text:000000000040301d\n.text:0000000000403020\n.text:0000000000403023\n.text:0000000000403027\n.text:000000000040302c\n.text:0000000000403031\n.text:0000000000403034\n.text:0000000000403036\n.text:0000000000403038\n.text:000000000040303a\n.text:000000000040303d\n.text:0000000000403040\n.text:0000000000403045\n.text:000000000040304a\n.text:0000000000403050\n.text:0000000000403053\n.text:0000000000403057\n.text:000000000040305a\n.text:0000000000403060\n.text:0000000000403067\n.text:000000000040306a\n.text:000000000040306d\n.text:0000000000403072\n.text:0000000000403074\n.text:0000000000403076\n.text:000000000040307b\n.text:0000000000403081\n.text:0000000000403083\n.text:000000000040308a\n.text:000000000040308d\n.text:000000000040308f\n.text:0000000000403092\n.text:0000000000403095\n.text:0000000000403097\n.text:0000000000403099\n.text:000000000040309e\n.text:00000000004030a1\n.text:00000000004030a3\n.text:00000000004030a5\n.text:00000000004030a7\n.text:00000000004030a9\n.text:00000000004030ae\n.text:00000000004030b1\n.text:00000000004030b5\n.text:00000000004030b9\n.text:00000000004030be\n.text:00000000004030c3\n.text:00000000004030c8\n.text:00000000004030cb\n.text:00000000004030d1\n.text:00000000004030d3\n.text:00000000004030d8\n.text:00000000004030e0\n.text:00000000004030e5\n.text:00000000004030f0\n.text:00000000004030f4\n.text:00000000004030f6\n.text:00000000004030fd\n.text:00000000004030ff\n.text:0000000000403101\n.text:0000000000403104\n.text:0000000000403109\n.text:000000000040310b\n.text:000000000040310f\n.text:0000000000403111\n.text:0000000000403115\n.text:0000000000403118\n.text:000000000040311d\n.text:000000000040311f\n.text:0000000000403121\n.text:0000000000403125\n.text:000000000040312d\n.text:0000000000403133\n.text:0000000000403137\n.text:000000000040313f\n.text:0000000000403145\n.text:0000000000403150\n.text:0000000000403153\n.text:0000000000403156\n.text:000000000040315b\n.text:000000000040315e\n.text:0000000000403162\n.text:0000000000403167\n.text:0000000000403169\n.text:000000000040316c\n.text:0000000000403170\n.text:0000000000403175\n.text:000000000040317a\n.text:000000000040317f\n.text:0000000000403185\n.text:000000000040318a\n.text:000000000040318f\n.text:0000000000403194\n.text:0000000000403198\n.text:00000000004031a0\n.text:00000000004031a5\n.text:00000000004031aa\n.text:00000000004031ac\n.text:00000000004031af\n.text:00000000004031b2\n.text:00000000004031b4\n.text:00000000004031b9\n.text:00000000004031bb\n.text:00000000004031bd\n.text:00000000004031c3\n.text:00000000004031c6\n.text:00000000004031c9\n.text:00000000004031cc\n.text:00000000004031d1\n.text:00000000004031d5\n.text:00000000004031dd\n.text:00000000004031e3\n.text:00000000004031e8\n.text:00000000004031ed\n.text:00000000004031ef\n.text:00000000004031f2\n.text:00000000004031fa\n.text:0000000000403202\n.text:000000000040320a\n.text:000000000040320e\n.text:0000000000403213\n.text:0000000000403218\n.text:000000000040321a\n.text:000000000040321d\n.text:0000000000403223\n.text:0000000000403225\n.text:000000000040322a\n.text:000000000040322f\n.text:0000000000403234\n.text:0000000000403237\n.text:0000000000403239\n.text:000000000040323b\n.text:000000000040323d\n.text:0000000000403240\n.text:0000000000403245\n.text:000000000040324a\n.text:000000000040324f\n.text:0000000000403253\n.text:0000000000403258\n.text:000000000040325c\n.text:0000000000403261\n.text:0000000000403264\n.text:0000000000403269\n.text:000000000040326b\n.text:000000000040326f\n.text:0000000000403275\n.text:000000000040327a\n.text:000000000040327c\n.text:000000000040327f\n.text:0000000000403284\n.text:0000000000403288\n.text:000000000040328d\n.text:0000000000403292\n.text:0000000000403297\n.text:000000000040329a\n.text:000000000040329d\n.text:00000000004032a0\n.text:00000000004032a3\n.text:00000000004032a5\n.text:00000000004032aa\n.text:00000000004032ac\n.text:00000000004032b1\n.text:00000000004032b4\n.text:00000000004032b7\n.text:00000000004032ba\n.text:00000000004032bc\n.text:00000000004032bf\n.text:00000000004032c5\n.text:00000000004032ca\n.text:00000000004032cf\n.text:00000000004032d4\n.text:00000000004032dc\n.text:00000000004032e1\n.text:00000000004032e4\n.text:00000000004032e9\n.text:00000000004032ec\n.text:00000000004032f1\n.text:00000000004032f6\n.text:00000000004032f9\n.text:00000000004032fb\n.text:00000000004032fd\n.text:0000000000403300\n.text:0000000000403308\n.text:000000000040330d\n.text:0000000000403310\n.text:0000000000403313\n.text:0000000000403318\n.text:000000000040331d\n.text:000000000040331f\n.text:0000000000403325\n.text:000000000040332a\n.text:000000000040332e\n.text:0000000000403330\n.text:0000000000403332\n.text:0000000000403335\n.text:000000000040333b\n.text:0000000000403340\n.text:0000000000403345\n.text:0000000000403347\n.text:0000000000403349\n.text:000000000040334e\n.text:0000000000403353\n.text:0000000000403358\n.text:000000000040335d\n.text:0000000000403362\n.text:0000000000403367\n.text:000000000040336c\n.text:0000000000403370\n.text:0000000000403374\n.text:000000000040337a\n.text:000000000040337f\n.text:0000000000403382\n.text:0000000000403387\n.text:000000000040338c\n.text:000000000040338f\n.text:0000000000403392\n.text:0000000000403394\n.text:0000000000403397\n.text:0000000000403399\n.text:00000000004033a0\n.text:00000000004033a2\n.text:00000000004033a4\n.text:00000000004033a7\n.text:00000000004033ac\n.text:00000000004033b5\n.text:00000000004033ba\n.text:00000000004033bd\n.text:00000000004033c2\n.text:00000000004033c4\n.text:00000000004033c7\n.text:00000000004033cc\n.text:00000000004033d1\n.text:00000000004033d6\n.text:00000000004033db\n.text:00000000004033e0\n.text:00000000004033e3\n.text:00000000004033e8\n.text:00000000004033ee\n.text:00000000004033f5\n.text:00000000004033f7\n.text:00000000004033f9\n.text:00000000004033fc\n.text:0000000000403401\n.text:0000000000403406\n.text:000000000040340b\n.text:000000000040340e\n.text:0000000000403414\n.text:0000000000403416\n.text:000000000040341b\n.text:000000000040341d\n.text:0000000000403424\n.text:0000000000403429\n.text:0000000000403431\n.text:0000000000403436\n.text:000000000040343b\n.text:000000000040343e\n.text:0000000000403441\n.text:0000000000403443\n.text:0000000000403448\n.text:000000000040344b\n.text:000000000040344f\n.text:0000000000403451\n.text:0000000000403454\n.text:0000000000403456\n.text:0000000000403459\n.text:000000000040345e\n.text:0000000000403461\n.text:0000000000403466\n.text:000000000040346b\n.text:000000000040346e\n.text:0000000000403473\n.text:0000000000403476\n.text:0000000000403478\n.text:000000000040347b\n.text:0000000000403480\n.text:0000000000403485\n.text:000000000040348a\n.text:000000000040348c\n.text:000000000040348e\n.text:0000000000403491\n.text:0000000000403496\n.text:000000000040349b\n.text:00000000004034a0\n.text:00000000004034a3\n.text:00000000004034a5\n.text:00000000004034aa\n.text:00000000004034ad\n.text:00000000004034b2\n.text:00000000004034b7\n.text:00000000004034bc\n.text:00000000004034c1\n.text:00000000004034c3\n.text:00000000004034c8\n.text:00000000004034ca\n.text:00000000004034d0\n.text:00000000004034d3\n.text:00000000004034d8\n.text:00000000004034e0\n.text:00000000004034e5\n.text:00000000004034ed\n.text:00000000004034f5\n.text:00000000004034fd\n.text:0000000000403501\n.text:0000000000403510\n.text:0000000000403517\n.text:0000000000403519\n.text:0000000000403520\n.text:0000000000403522\n.text:0000000000403524\n.text:0000000000403529\n.text:000000000040352e\n.text:0000000000403531\n.text:0000000000403537\n.text:000000000040353d\n.text:000000000040353f\n.text:0000000000403545\n.text:0000000000403549\n.text:000000000040354f\n.text:0000000000403551\n.text:0000000000403556\n.text:0000000000403558\n.text:000000000040355a\n.text:000000000040355f\n.text:0000000000403562\n.text:0000000000403566\n.text:0000000000403568\n.text:000000000040356c\n.text:0000000000403575\n.text:0000000000403580\n.text:0000000000403583\n.text:0000000000403588\n.text:0000000000403590\n.text:0000000000403598\n.text:000000000040359a\n.text:000000000040359f\n.text:00000000004035a7\n.text:00000000004035aa\n.text:00000000004035ab\n.text:00000000004035ae\n.text:00000000004035b1\n.text:00000000004035b6\n.text:00000000004035be\n.text:00000000004035c0\n.text:00000000004035c2\n.text:00000000004035c4\n.text:00000000004035c7\n.text:00000000004035cf\n.text:00000000004035d4\n.text:00000000004035d6\n.text:00000000004035dc\n.text:00000000004035df\n.text:00000000004035e1\n.text:00000000004035e6\n.text:00000000004035e9\n.text:00000000004035eb\n.text:00000000004035f0\n.text:00000000004035f5\n.text:00000000004035fa\n.text:00000000004035fd\n.text:0000000000403602\n.text:0000000000403604\n.text:0000000000403607\n.text:000000000040360a\n.text:000000000040360f\n.text:0000000000403614\n.text:0000000000403619\n.text:000000000040361e\n.text:0000000000403624\n.text:0000000000403629\n.text:000000000040362e\n.text:0000000000403633\n.text:0000000000403638\n.text:000000000040363b\n.text:0000000000403640\n.text:0000000000403643\n.text:0000000000403645\n.text:000000000040364b\n.text:000000000040364d\n.text:0000000000403652\n.text:0000000000403655\n.text:0000000000403657\n.text:000000000040365b\n.text:000000000040365e\n.text:0000000000403664\n.text:0000000000403667\n.text:000000000040366c\n.text:000000000040366f\n.text:0000000000403673\n.text:0000000000403675\n.text:000000000040367a\n.text:000000000040367d\n.text:000000000040367f\n.text:0000000000403684\n.text:0000000000403689\n.text:000000000040368e\n.text:0000000000403691\n.text:0000000000403696\n.text:0000000000403698\n.text:000000000040369b\n.text:000000000040369e\n.text:00000000004036a3\n.text:00000000004036a5\n.text:00000000004036aa\n.text:00000000004036ae\n.text:00000000004036b3\n.text:00000000004036b7\n.text:00000000004036ba\n.text:00000000004036bf\n.text:00000000004036c4\n.text:00000000004036ca\n.text:00000000004036cf\n.text:00000000004036d4\n.text:00000000004036d7\n.text:00000000004036d9\n.text:00000000004036de\n.text:00000000004036e2\n.text:00000000004036e5\n.text:00000000004036ed\n.text:00000000004036f0\n.text:00000000004036f5\n.text:00000000004036f7\n.text:00000000004036fc\n.text:0000000000403700\n.text:0000000000403703\n.text:0000000000403708\n.text:000000000040370d\n.text:000000000040370f\n.text:0000000000403711\n.text:0000000000403714\n.text:0000000000403718\n.text:000000000040371b\n.text:000000000040371d\n.text:0000000000403720\n.text:0000000000403723\n.text:0000000000403726\n.text:000000000040372c\n.text:0000000000403731\n.text:0000000000403733\n.text:0000000000403735\n.text:000000000040373a\n.text:000000000040373f\n.text:0000000000403744\n.text:0000000000403747\n.text:0000000000403749\n.text:000000000040374b\n.text:000000000040374d\n.text:0000000000403750\n.text:0000000000403755\n.text:0000000000403757\n.text:0000000000403759\n.text:000000000040375e\n.text:0000000000403763\n.text:0000000000403768\n.text:000000000040376b\n.text:000000000040376f\n.text:0000000000403774\n.text:0000000000403779\n.text:000000000040377c\n.text:000000000040377e\n.text:0000000000403780\n.text:0000000000403782\n.text:0000000000403785\n.text:000000000040378a\n.text:000000000040378d\n.text:0000000000403792\n.text:0000000000403797\n.text:000000000040379d\n.text:000000000040379f\n.text:00000000004037a1\n.text:00000000004037a8\n.text:00000000004037a9\n.text:00000000004037ab\n.text:00000000004037ad\n.text:00000000004037af\n.text:00000000004037b1\n.text:00000000004037b2\n.text:00000000004037b3\n.text:00000000004037b8\n.text:00000000004037bb\n.text:00000000004037be\n.text:00000000004037c0\n.text:00000000004037c5\n.text:00000000004037ca\n.text:00000000004037cf\n.text:00000000004037d2\n.text:00000000004037d5\n.text:00000000004037da\n.text:00000000004037df\n.text:00000000004037e2\n.text:00000000004037e7\n.text:00000000004037ea\n.text:00000000004037ec\n.text:00000000004037ee\n.text:00000000004037f1\n.text:00000000004037f4\n.text:00000000004037f9\n.text:00000000004037fe\n.text:0000000000403803\n.text:0000000000403809\n.text:000000000040380b\n.text:0000000000403810\n.text:0000000000403815\n.text:0000000000403818\n.text:000000000040381d\n.text:0000000000403820\n.text:0000000000403822\n.text:0000000000403824\n.text:0000000000403826\n.text:0000000000403829\n.text:000000000040382e\n.text:0000000000403830\n.text:0000000000403832\n.text:0000000000403837\n.text:000000000040383c\n.text:0000000000403841\n'
p1231
tp1232
sS'close_fd'
p1233
(S'\n__stdcall close_fd(char * filename)\n'
p1234
V\u000avoid close_fd(char *filename)\u000a\u000a{\u000a  uint uVar1;\u000a  int __fd;\u000a  uint *puVar2;\u000a  undefined8 uVar3;\u000a  char *pcVar4;\u000a  \u000a  __fd = (int)((ulong)filename & 0xffffffff);\u000a  if (1 < __fd + 1U) {\u000a    __fd = close(__fd);\u000a    if (__fd != 0) {\u000a      puVar2 = (uint *)__errno_location();\u000a      uVar1 = *puVar2;\u000a      uVar3 = dcgettext(0,"closing %s (fd=%d)",5);\u000a      pcVar4 = quotearg_style((char *)0x4);\u000a      error(0,(ulong)uVar1,uVar3,pcVar4,(ulong)filename & 0xffffffff);\u000a      return;\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p1235
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV EBX,EDI\nLEA EAX,[RBX + 0x1]\nCMP EAX,0x2\nJC 0x00403e37\nMOV EDI,EBX\nCALL 0x00401930\nTEST EAX,EAX\nJZ 0x00403e37\nCALL 0x00401770\nMOV R15D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40c35a\nMOV EDX,0x5\nCALL 0x00401840\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,R14\nCALL 0x004087b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,RBP\nMOV R8D,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00401af0\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1236
S'55\n41 57\n41 56\n53\n50\n49 89 f6\n89 fb\n8d 43 01\n83 f8 02\n72 53\n89 df\ne8 45 db ff ff\n85 c0\n74 48\ne8 7c d9 ff ff\n44 8b 38\n31 ff\nbe 5a c3 40 00\nba 05 00 00 00\ne8 38 da ff ff\n48 89 c5\nbf 04 00 00 00\n4c 89 f6\ne8 98 49 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 fe\n48 89 ea\n41 89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\ne9 b9 dc ff ff\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1237
S'.text:0000000000403dd0\n.text:0000000000403dd1\n.text:0000000000403dd3\n.text:0000000000403dd5\n.text:0000000000403dd6\n.text:0000000000403dd7\n.text:0000000000403dda\n.text:0000000000403ddc\n.text:0000000000403ddf\n.text:0000000000403de2\n.text:0000000000403de4\n.text:0000000000403de6\n.text:0000000000403deb\n.text:0000000000403ded\n.text:0000000000403def\n.text:0000000000403df4\n.text:0000000000403df7\n.text:0000000000403df9\n.text:0000000000403dfe\n.text:0000000000403e03\n.text:0000000000403e08\n.text:0000000000403e0b\n.text:0000000000403e10\n.text:0000000000403e13\n.text:0000000000403e18\n.text:0000000000403e1b\n.text:0000000000403e1d\n.text:0000000000403e1f\n.text:0000000000403e22\n.text:0000000000403e25\n.text:0000000000403e28\n.text:0000000000403e2c\n.text:0000000000403e2d\n.text:0000000000403e2f\n.text:0000000000403e31\n.text:0000000000403e32\n.text:0000000000403e37\n.text:0000000000403e3b\n.text:0000000000403e3c\n.text:0000000000403e3e\n.text:0000000000403e40\n.text:0000000000403e41\n'
p1238
tp1239
sS'close_stream'
p1240
(S'\n__stdcall close_stream(FILE * stream)\n'
p1241
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1242
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x004017b0\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00401980\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x0040a4e0\nTEST EBP,EBP\nJZ 0x0040a0ab\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x0040a0cf\nCALL 0x00401770\nMOV dword ptr [RAX],0x0\nJMP 0x0040a0cf\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x0040a0cf\nTEST CL,CL\nJNZ 0x0040a0cf\nCALL 0x00401770\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1243
S'55\n41 56\n53\n48 89 fb\ne8 34 77 ff ff\n49 89 c6\n48 89 df\ne8 f9 78 ff ff\n89 c5\n48 89 df\ne8 4f 04 00 00\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 cd 76 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 ae 76 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p1244
S'.text:000000000040a070\n.text:000000000040a071\n.text:000000000040a073\n.text:000000000040a074\n.text:000000000040a077\n.text:000000000040a07c\n.text:000000000040a07f\n.text:000000000040a082\n.text:000000000040a087\n.text:000000000040a089\n.text:000000000040a08c\n.text:000000000040a091\n.text:000000000040a093\n.text:000000000040a095\n.text:000000000040a09a\n.text:000000000040a09c\n.text:000000000040a09e\n.text:000000000040a0a3\n.text:000000000040a0a9\n.text:000000000040a0ab\n.text:000000000040a0ad\n.text:000000000040a0b0\n.text:000000000040a0b2\n.text:000000000040a0b4\n.text:000000000040a0b7\n.text:000000000040a0b9\n.text:000000000040a0bb\n.text:000000000040a0bd\n.text:000000000040a0c2\n.text:000000000040a0c4\n.text:000000000040a0c7\n.text:000000000040a0cc\n.text:000000000040a0cf\n.text:000000000040a0d1\n.text:000000000040a0d2\n.text:000000000040a0d4\n.text:000000000040a0d5\n'
p1245
tp1246
sS'quotearg_colon_mem'
p1247
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p1248
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1249
S'MOV EDX,0x3a\nJMP 0x004087f0\n'
p1250
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p1251
S'.text:0000000000408880\n.text:0000000000408885\n'
p1252
tp1253
sS'tailable_stdin'
p1254
(S'\n__stdcall tailable_stdin(File_spec * f, size_t n_files)\n'
p1255
V\u000a_Bool tailable_stdin(File_spec *f,size_t n_files)\u000a\u000a{\u000a  ulong uVar1;\u000a  \u000a  if (n_files != 0) {\u000a    uVar1 = 0;\u000a    do {\u000a      if (((f->ignore == false) && (*f->name == '-')) && (f->name[1] == 0)) {\u000a        return true;\u000a      }\u000a      uVar1 = uVar1 + 1;\u000a      f = f + 1;\u000a    } while (uVar1 < n_files);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1256
S'TEST RSI,RSI\nJZ 0x00402d9c\nXOR EAX,EAX\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [RDI + 0x34],0x0\nJNZ 0x00402d90\nMOV RCX,qword ptr [RDI]\nCMP byte ptr [RCX],0x2d\nJNZ 0x00402d90\nCMP byte ptr [RCX + 0x1],0x0\nJZ 0x00402d9f\nNOP word ptr CS:[RAX + RAX*0x1]\nINC RAX\nADD RDI,0x60\nCMP RAX,RSI\nJC 0x00402d70\nXOR EAX,EAX\nRET\nMOV AL,0x1\nRET\n'
p1257
S'48 85 f6\n74 37\n31 c0\n66 0f 1f 84 00 00 00 00 00\n80 7f 34 00\n75 1a\n48 8b 0f\n80 39 2d\n75 12\n80 79 01 00\n74 1b\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 ff c0\n48 83 c7 60\n48 39 f0\n72 d4\n31 c0\nc3\nb0 01\nc3\n'
p1258
S'.text:0000000000402d60\n.text:0000000000402d63\n.text:0000000000402d65\n.text:0000000000402d67\n.text:0000000000402d70\n.text:0000000000402d74\n.text:0000000000402d76\n.text:0000000000402d79\n.text:0000000000402d7c\n.text:0000000000402d7e\n.text:0000000000402d82\n.text:0000000000402d84\n.text:0000000000402d90\n.text:0000000000402d93\n.text:0000000000402d97\n.text:0000000000402d9a\n.text:0000000000402d9c\n.text:0000000000402d9e\n.text:0000000000402d9f\n.text:0000000000402da1\n'
p1259
tp1260
sS'xcalloc'
p1261
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p1262
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1263
S'PUSH RAX\nCALL 0x00409b90\nTEST RAX,RAX\nJZ 0x004095fd\nPOP RCX\nRET\nCALL 0x00409660\n'
p1264
S'50\ne8 9a 05 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p1265
S'.text:00000000004095f0\n.text:00000000004095f1\n.text:00000000004095f6\n.text:00000000004095f9\n.text:00000000004095fb\n.text:00000000004095fc\n.text:00000000004095fd\n'
p1266
tp1267
sS'xnumtoumax'
p1268
(S'\n__stdcall xnumtoumax(char * n_str, uintmax_t min, uintmax_t max, char * suffixes, char * err)\n'
p1269
V\u000auintmax_t xnumtoumax(char *n_str,uintmax_t min,uintmax_t max,char *suffixes,char *err)\u000a\u000a{\u000a  char *pcVar1;\u000a  strtol_error sVar2;\u000a  char *in_RAX;\u000a  int *piVar3;\u000a  uint *puVar4;\u000a  int iVar5;\u000a  uint uVar6;\u000a  uint uVar7;\u000a  uint in_stack_00000008;\u000a  char *local_38;\u000a  \u000a  local_38 = in_RAX;\u000a  sVar2 = xstrtoumax(n_str,(char **)0x0,(uintmax_t *)(min & 0xffffffff),(char *)&local_38);\u000a  pcVar1 = local_38;\u000a  if (sVar2 == LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW) {\u000a    piVar3 = __errno_location();\u000a    *piVar3 = 0;\u000a  }\u000a  else {\u000a    if (sVar2 == LONGINT_OVERFLOW) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0x4b;\u000a    }\u000a    else {\u000a      if (sVar2 == LONGINT_OK) {\u000a        if ((max <= local_38) && (local_38 <= suffixes)) {\u000a          return (uintmax_t)local_38;\u000a        }\u000a        piVar3 = __errno_location();\u000a        iVar5 = 0x22;\u000a        if ((char *)0x3fffffff < pcVar1) {\u000a          iVar5 = 0x4b;\u000a        }\u000a        *piVar3 = iVar5;\u000a      }\u000a    }\u000a  }\u000a  uVar7 = 1;\u000a  if (in_stack_00000008 != 0) {\u000a    uVar7 = in_stack_00000008;\u000a  }\u000a  puVar4 = (uint *)__errno_location();\u000a  uVar6 = *puVar4;\u000a  if (uVar6 == 0x16) {\u000a    uVar6 = 0;\u000a  }\u000a  quote(n_str);\u000a  error((ulong)uVar7,(ulong)uVar6,"%s: %s");\u000a  return (uintmax_t)local_38;\u000a}\u000a\u000a
p1270
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,R9\nMOV R15,RCX\nMOV R12,RDX\nMOV EAX,ESI\nMOV R13,RDI\nMOV RCX,RSP\nXOR ESI,ESI\nMOV EDX,EAX\nCALL 0x004098b0\nCMP EAX,0x3\nJZ 0x004096ee\nCMP EAX,0x1\nJZ 0x004096fb\nTEST EAX,EAX\nJNZ 0x00409706\nMOV RBX,qword ptr [RSP]\nCMP RBX,R12\nJC 0x004096d1\nCMP RBX,R15\nJBE 0x00409741\nCALL 0x00401770\nCMP RBX,0x3fffffff\nMOV ECX,0x4b\nMOV EDX,0x22\nCMOVA EDX,ECX\nMOV dword ptr [RAX],EDX\nJMP 0x00409706\nCALL 0x00401770\nMOV dword ptr [RAX],0x0\nJMP 0x00409706\nCALL 0x00401770\nMOV dword ptr [RAX],0x4b\nMOV EAX,dword ptr [RSP + 0x40]\nTEST EAX,EAX\nMOV EBP,0x1\nCMOVNZ EBP,EAX\nCALL 0x00401770\nMOV EBX,dword ptr [RAX]\nXOR EAX,EAX\nCMP EBX,0x16\nCMOVZ EBX,EAX\nMOV RDI,R13\nCALL 0x004089d0\nMOV R8,RAX\nMOV EDX,0x40bf3e\nXOR EAX,EAX\nMOV EDI,EBP\nMOV ESI,EBX\nMOV RCX,R14\nCALL 0x00401af0\nMOV RAX,qword ptr [RSP]\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1271
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 ce\n49 89 cf\n49 89 d4\n89 f0\n49 89 fd\n48 89 e1\n31 f6\n89 c2\ne8 fb 01 00 00\n83 f8 03\n74 34\n83 f8 01\n74 3c\n85 c0\n75 43\n48 8b 1c 24\n4c 39 e3\n72 05\n4c 39 fb\n76 70\ne8 9a 80 ff ff\n48 81 fb ff ff ff 3f\nb9 4b 00 00 00\nba 22 00 00 00\n0f 47 d1\n89 10\neb 18\ne8 7d 80 ff ff\nc7 00 00 00 00 00\neb 0b\ne8 70 80 ff ff\nc7 00 4b 00 00 00\n8b 44 24 40\n85 c0\nbd 01 00 00 00\n0f 45 e8\ne8 57 80 ff ff\n8b 18\n31 c0\n83 fb 16\n0f 44 d8\n4c 89 ef\ne8 a5 f2 ff ff\n49 89 c0\nba 3e bf 40 00\n31 c0\n89 ef\n89 de\n4c 89 f1\ne8 af 83 ff ff\n48 8b 04 24\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1272
S'.text:0000000000409690\n.text:0000000000409691\n.text:0000000000409693\n.text:0000000000409695\n.text:0000000000409697\n.text:0000000000409699\n.text:000000000040969a\n.text:000000000040969b\n.text:000000000040969e\n.text:00000000004096a1\n.text:00000000004096a4\n.text:00000000004096a6\n.text:00000000004096a9\n.text:00000000004096ac\n.text:00000000004096ae\n.text:00000000004096b0\n.text:00000000004096b5\n.text:00000000004096b8\n.text:00000000004096ba\n.text:00000000004096bd\n.text:00000000004096bf\n.text:00000000004096c1\n.text:00000000004096c3\n.text:00000000004096c7\n.text:00000000004096ca\n.text:00000000004096cc\n.text:00000000004096cf\n.text:00000000004096d1\n.text:00000000004096d6\n.text:00000000004096dd\n.text:00000000004096e2\n.text:00000000004096e7\n.text:00000000004096ea\n.text:00000000004096ec\n.text:00000000004096ee\n.text:00000000004096f3\n.text:00000000004096f9\n.text:00000000004096fb\n.text:0000000000409700\n.text:0000000000409706\n.text:000000000040970a\n.text:000000000040970c\n.text:0000000000409711\n.text:0000000000409714\n.text:0000000000409719\n.text:000000000040971b\n.text:000000000040971d\n.text:0000000000409720\n.text:0000000000409723\n.text:0000000000409726\n.text:000000000040972b\n.text:000000000040972e\n.text:0000000000409733\n.text:0000000000409735\n.text:0000000000409737\n.text:0000000000409739\n.text:000000000040973c\n.text:0000000000409741\n.text:0000000000409745\n.text:0000000000409749\n.text:000000000040974a\n.text:000000000040974c\n.text:000000000040974e\n.text:0000000000409750\n.text:0000000000409752\n.text:0000000000409753\n'
p1273
tp1274
sS'any_live_files'
p1275
(S'\n__stdcall any_live_files(File_spec * f, size_t n_files)\n'
p1276
V\u000a_Bool any_live_files(File_spec *f,size_t n_files)\u000a\u000a{\u000a  undefined uVar1;\u000a  ulong uVar2;\u000a  int *piVar3;\u000a  \u000a  uVar1 = 1;\u000a  if ((reopen_inaccessible_files != 1) || (follow_mode != Follow_name)) {\u000a    if (n_files != 0) {\u000a      piVar3 = &f->fd;\u000a      uVar2 = 0;\u000a      do {\u000a        if (-1 < *piVar3) {\u000a          return true;\u000a        }\u000a        if (((follow_mode == Follow_descriptor & reopen_inaccessible_files) != 0) &&\u000a           (*(char *)(piVar3 + -1) == 0)) {\u000a          return true;\u000a        }\u000a        uVar2 = uVar2 + 1;\u000a        piVar3 = piVar3 + 0x18;\u000a      } while (uVar2 < n_files);\u000a    }\u000a    uVar1 = 0;\u000a  }\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p1277
S'MOV AL,0x1\nCMP byte ptr [0x00610353],0x1\nJNZ 0x00405d34\nCMP dword ptr [0x00610278],0x1\nJZ 0x00405d6d\nTEST RSI,RSI\nJZ 0x00405d6b\nCMP dword ptr [0x00610278],0x2\nSETZ CL\nAND CL,byte ptr [0x00610353]\nADD RDI,0x38\nXOR EDX,EDX\nNOP\nCMP dword ptr [RDI],0x0\nJNS 0x00405d6d\nTEST CL,CL\nJZ 0x00405d5f\nCMP byte ptr [RDI + -0x4],0x0\nJZ 0x00405d6d\nINC RDX\nADD RDI,0x60\nCMP RDX,RSI\nJC 0x00405d50\nXOR EAX,EAX\nRET\n'
p1278
S'b0 01\n80 3d 2a a6 20 00 01\n75 09\n83 3d 46 a5 20 00 01\n74 39\n48 85 f6\n74 32\n83 3d 38 a5 20 00 02\n0f 94 c1\n22 0d 0a a6 20 00\n48 83 c7 38\n31 d2\n90\n83 3f 00\n79 18\n84 c9\n74 06\n80 7f fc 00\n74 0e\n48 ff c2\n48 83 c7 60\n48 39 f2\n72 e5\n31 c0\nc3\n'
p1279
S'.text:0000000000405d20\n.text:0000000000405d22\n.text:0000000000405d29\n.text:0000000000405d2b\n.text:0000000000405d32\n.text:0000000000405d34\n.text:0000000000405d37\n.text:0000000000405d39\n.text:0000000000405d40\n.text:0000000000405d43\n.text:0000000000405d49\n.text:0000000000405d4d\n.text:0000000000405d4f\n.text:0000000000405d50\n.text:0000000000405d53\n.text:0000000000405d55\n.text:0000000000405d57\n.text:0000000000405d59\n.text:0000000000405d5d\n.text:0000000000405d5f\n.text:0000000000405d62\n.text:0000000000405d66\n.text:0000000000405d69\n.text:0000000000405d6b\n.text:0000000000405d6d\n'
p1280
tp1281
sS'strtol'
p1282
(S'\n__stdcall strtol(char * __nptr, char * * __endptr, int __base)\n'
p1283
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000along strtol(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  lVar1 = (*(code *)PTR_strtol_00610150)();\u000a  return lVar1;\u000a}\u000a\u000a
p1284
S'JMP qword ptr [0x00610150]\n'
p1285
S'ff 25 9a e7 20 00\n'
p1286
S'.plt:00000000004019b0\n'
p1287
tp1288
sS'clear_ungetc_buffer_preserving_position'
p1289
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p1290
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p1291
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x0040a597\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x0040a5b0\n'
p1292
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p1293
S'.text:000000000040a590\n.text:000000000040a594\n.text:000000000040a596\n.text:000000000040a597\n.text:000000000040a599\n.text:000000000040a59e\n'
p1294
tp1295
sS'wd_comparator'
p1296
(S'\n__stdcall wd_comparator(void * e1, void * e2)\n'
p1297
V\u000a_Bool wd_comparator(void *e1,void *e2)\u000a\u000a{\u000a  return (_Bool)(*(int *)((long)e1 + 0x44) == *(int *)((long)e2 + 0x44));\u000a}\u000a\u000a
p1298
S'MOV EAX,dword ptr [RDI + 0x44]\nCMP EAX,dword ptr [RSI + 0x44]\nSETZ AL\nRET\n'
p1299
S'8b 47 44\n3b 46 44\n0f 94 c0\nc3\n'
p1300
S'.text:0000000000405710\n.text:0000000000405713\n.text:0000000000405716\n.text:0000000000405719\n'
p1301
tp1302
sS'xnmalloc'
p1303
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p1304
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1305
S'MOV RAX,RDI\nMUL RSI\nJO 0x004094c1\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x004094d0\nPUSH RAX\nCALL 0x00409660\n'
p1306
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p1307
S'.text:00000000004094b0\n.text:00000000004094b3\n.text:00000000004094b6\n.text:00000000004094b8\n.text:00000000004094bc\n.text:00000000004094bf\n.text:00000000004094c1\n.text:00000000004094c2\n'
p1308
tp1309
sS'hash_string'
p1310
(S'\n__stdcall hash_string(char * string, size_t n_buckets)\n'
p1311
V\u000asize_t hash_string(char *string,size_t n_buckets)\u000a\u000a{\u000a  byte bVar1;\u000a  ulong uVar2;\u000a  byte *pbVar3;\u000a  \u000a  bVar1 = *string;\u000a  if (bVar1 != 0) {\u000a    pbVar3 = (byte *)(string + 1);\u000a    uVar2 = 0;\u000a    do {\u000a      uVar2 = ((ulong)bVar1 + uVar2 * 0x1f) % n_buckets;\u000a      bVar1 = *pbVar3;\u000a      pbVar3 = pbVar3 + 1;\u000a    } while (bVar1 != 0);\u000a    return uVar2;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1312
S'MOV AL,byte ptr [RDI]\nTEST AL,AL\nJZ 0x00406813\nINC RDI\nXOR EDX,EDX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RCX,RDX\nSHL RCX,0x5\nSUB RCX,RDX\nMOVZX EAX,AL\nADD RAX,RCX\nXOR EDX,EDX\nDIV RSI\nMOVZX EAX,byte ptr [RDI]\nINC RDI\nTEST AL,AL\nJNZ 0x004067f0\nMOV RAX,RDX\nRET\nXOR EDX,EDX\nMOV RAX,RDX\nRET\n'
p1313
S'8a 07\n84 c0\n74 2d\n48 ff c7\n31 d2\n0f 1f 44 00 00\n48 89 d1\n48 c1 e1 05\n48 29 d1\n0f b6 c0\n48 01 c8\n31 d2\n48 f7 f6\n0f b6 07\n48 ff c7\n84 c0\n75 e1\n48 89 d0\nc3\n31 d2\n48 89 d0\nc3\n'
p1314
S'.text:00000000004067e0\n.text:00000000004067e2\n.text:00000000004067e4\n.text:00000000004067e6\n.text:00000000004067e9\n.text:00000000004067eb\n.text:00000000004067f0\n.text:00000000004067f3\n.text:00000000004067f7\n.text:00000000004067fa\n.text:00000000004067fd\n.text:0000000000406800\n.text:0000000000406802\n.text:0000000000406805\n.text:0000000000406808\n.text:000000000040680b\n.text:000000000040680d\n.text:000000000040680f\n.text:0000000000406812\n.text:0000000000406813\n.text:0000000000406815\n.text:0000000000406818\n'
p1315
tp1316
sS'quotearg_char'
p1317
(S'\n__stdcall quotearg_char(char * arg)\n'
p1318
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1319
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x004087f0\n'
p1320
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p1321
S'.text:0000000000408860\n.text:0000000000408862\n.text:0000000000408869\n.text:000000000040886b\n'
p1322
tp1323
sS'malloc'
p1324
(S'\n__stdcall malloc(size_t __size)\n'
p1325
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_00610190)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1326
S'JMP qword ptr [0x00610190]\n'
p1327
S'ff 25 5a e7 20 00\n'
p1328
S'.plt:0000000000401a30\n'
p1329
tp1330
sS'argmatch_invalid'
p1331
(S'\n__stdcall argmatch_invalid(char * context, char * value, ptrdiff_t problem)\n'
p1332
V\u000avoid argmatch_invalid(char *context,char *value,ptrdiff_t problem)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  \u000a  pcVar2 = "ambiguous argument %s for %s";\u000a  if (problem == -1) {\u000a    pcVar2 = "invalid argument %s for %s";\u000a  }\u000a  uVar1 = dcgettext(0,pcVar2,5);\u000a  pcVar2 = quotearg_n_style((char *)0x0);\u000a  pcVar3 = quote_n((char *)0x1);\u000a  error(0,0,uVar1,pcVar2,pcVar3);\u000a  return;\u000a}\u000a\u000a
p1333
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RSI\nMOV R14,RDI\nCMP RDX,-0x1\nMOV EAX,0x40c68d\nMOV ESI,0x40c6a8\nCMOVZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00401840\nMOV R12,RAX\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,R15\nCALL 0x004086d0\nMOV R15,RAX\nMOV EDI,0x1\nMOV RSI,R14\nCALL 0x004089c0\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R12\nMOV RCX,R15\nMOV R8,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401af0\n'
p1334
S'41 57\n41 56\n41 54\n53\n50\n49 89 f7\n49 89 fe\n48 83 fa ff\nb8 8d c6 40 00\nbe a8 c6 40 00\n48 0f 44 f0\n31 ff\nba 05 00 00 00\ne8 94 b9 ff ff\n49 89 c4\n31 ff\nbe 08 00 00 00\n4c 89 fa\ne8 12 28 00 00\n49 89 c7\nbf 01 00 00 00\n4c 89 f6\ne8 f2 2a 00 00\n48 89 c3\n31 ff\n31 f6\n31 c0\n4c 89 e2\n4c 89 f9\n49 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 00 bc ff ff\n'
p1335
S'.text:0000000000405e80\n.text:0000000000405e82\n.text:0000000000405e84\n.text:0000000000405e86\n.text:0000000000405e87\n.text:0000000000405e88\n.text:0000000000405e8b\n.text:0000000000405e8e\n.text:0000000000405e92\n.text:0000000000405e97\n.text:0000000000405e9c\n.text:0000000000405ea0\n.text:0000000000405ea2\n.text:0000000000405ea7\n.text:0000000000405eac\n.text:0000000000405eaf\n.text:0000000000405eb1\n.text:0000000000405eb6\n.text:0000000000405eb9\n.text:0000000000405ebe\n.text:0000000000405ec1\n.text:0000000000405ec6\n.text:0000000000405ec9\n.text:0000000000405ece\n.text:0000000000405ed1\n.text:0000000000405ed3\n.text:0000000000405ed5\n.text:0000000000405ed7\n.text:0000000000405eda\n.text:0000000000405edd\n.text:0000000000405ee0\n.text:0000000000405ee4\n.text:0000000000405ee5\n.text:0000000000405ee7\n.text:0000000000405ee9\n.text:0000000000405eeb\n'
p1336
tp1337
sS'c_tolower'
p1338
(S'\n__stdcall c_tolower()\n'
p1339
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1340
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p1341
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p1342
S'.text:000000000040a050\n.text:000000000040a053\n.text:000000000040a056\n.text:000000000040a059\n.text:000000000040a05c\n'
p1343
tp1344
sS'getopt_long'
p1345
(S'\n__stdcall getopt_long()\n'
p1346
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_006100b8)();\u000a  return;\u000a}\u000a\u000a
p1347
S'JMP qword ptr [0x006100b8]\n'
p1348
S'ff 25 32 e8 20 00\n'
p1349
S'.plt:0000000000401880\n'
p1350
tp1351
sS'valid_file_spec'
p1352
(S'\n__stdcall valid_file_spec(File_spec * f)\n'
p1353
V\u000a_Bool valid_file_spec(File_spec *f)\u000a\u000a{\u000a  return (_Bool)((f->errnum == 0) != (f->fd == -1));\u000a}\u000a\u000a
p1354
S'CMP dword ptr [RDI + 0x38],-0x1\nSETZ CL\nCMP dword ptr [RDI + 0x3c],0x0\nSETZ AL\nXOR AL,CL\nRET\n'
p1355
S'83 7f 38 ff\n0f 94 c1\n83 7f 3c 00\n0f 94 c0\n30 c8\nc3\n'
p1356
S'.text:0000000000405d00\n.text:0000000000405d04\n.text:0000000000405d07\n.text:0000000000405d0b\n.text:0000000000405d0e\n.text:0000000000405d10\n'
p1357
tp1358
sS'posix2_version'
p1359
(S'\n__stdcall posix2_version()\n'
p1360
V\u000aint posix2_version(void)\u000a\u000a{\u000a  int iVar1;\u000a  char *in_RAX;\u000a  char *__nptr;\u000a  long lVar2;\u000a  long lVar3;\u000a  int iVar4;\u000a  char *local_8;\u000a  \u000a  local_8 = in_RAX;\u000a  __nptr = getenv("_POSIX2_VERSION");\u000a  if ((__nptr == (char *)0x0) || (*__nptr == 0)) {\u000a    lVar3 = 0x31069;\u000a  }\u000a  else {\u000a    lVar2 = strtol(__nptr,&local_8,10);\u000a    lVar3 = 0x31069;\u000a    if (*local_8 == 0) {\u000a      lVar3 = lVar2;\u000a    }\u000a  }\u000a  iVar4 = 0x7fffffff;\u000a  if (lVar3 < 0x7fffffff) {\u000a    iVar4 = (int)lVar3;\u000a  }\u000a  iVar1 = -0x80000000;\u000a  if (0x7fffffff < lVar3) {\u000a    iVar1 = iVar4;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1361
S'PUSH RAX\nMOV EDI,0x40c7b0\nCALL 0x00401740\nTEST RAX,RAX\nJZ 0x004074b7\nCMP byte ptr [RAX],0x0\nJZ 0x004074b7\nMOV RSI,RSP\nMOV EDX,0xa\nMOV RDI,RAX\nCALL 0x004019b0\nMOV RCX,qword ptr [RSP]\nCMP byte ptr [RCX],0x0\nMOV ECX,0x31069\nCMOVZ RCX,RAX\nJMP 0x004074bc\nMOV ECX,0x31069\nCMP RCX,0x7fffffff\nMOV EDX,0x7fffffff\nCMOVL EDX,ECX\nCMP RCX,0x80000000\nMOV EAX,0x80000000\nCMOVGE EAX,EDX\nPOP RCX\nRET\n'
p1362
S'50\nbf b0 c7 40 00\ne8 b5 a2 ff ff\n48 85 c0\n74 27\n80 38 00\n74 22\n48 89 e6\nba 0a 00 00 00\n48 89 c7\ne8 0b a5 ff ff\n48 8b 0c 24\n80 39 00\nb9 69 10 03 00\n48 0f 44 c8\neb 05\nb9 69 10 03 00\n48 81 f9 ff ff ff 7f\nba ff ff ff 7f\n0f 4c d1\n48 81 f9 00 00 00 80\nb8 00 00 00 80\n0f 4d c2\n59\nc3\n'
p1363
S'.text:0000000000407480\n.text:0000000000407481\n.text:0000000000407486\n.text:000000000040748b\n.text:000000000040748e\n.text:0000000000407490\n.text:0000000000407493\n.text:0000000000407495\n.text:0000000000407498\n.text:000000000040749d\n.text:00000000004074a0\n.text:00000000004074a5\n.text:00000000004074a9\n.text:00000000004074ac\n.text:00000000004074b1\n.text:00000000004074b5\n.text:00000000004074b7\n.text:00000000004074bc\n.text:00000000004074c3\n.text:00000000004074c8\n.text:00000000004074cb\n.text:00000000004074d2\n.text:00000000004074d7\n.text:00000000004074da\n.text:00000000004074db\n'
p1364
tp1365
sS'quotearg_style'
p1366
(S'\n__stdcall quotearg_style(char * arg)\n'
p1367
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1368
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x004086d0\n'
p1369
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p1370
S'.text:00000000004087b0\n.text:00000000004087b3\n.text:00000000004087b5\n.text:00000000004087b7\n.text:00000000004087b9\n.text:00000000004087bc\n'
p1371
tp1372
sS'kill'
p1373
(S'\n__stdcall kill(__pid_t __pid, int __sig)\n'
p1374
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint kill(__pid_t __pid,int __sig)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_kill_00610160)();\u000a  return iVar1;\u000a}\u000a\u000a
p1375
S'JMP qword ptr [0x00610160]\n'
p1376
S'ff 25 8a e7 20 00\n'
p1377
S'.plt:00000000004019d0\n'
p1378
tp1379
sS'__argmatch_die'
p1380
(S'\n__stdcall __argmatch_die()\n'
p1381
V\u000avoid __argmatch_die(void)\u000a\u000a{\u000a  usage(1);\u000a  return;\u000a}\u000a\u000a
p1382
S'MOV EDI,0x1\nJMP 0x00401ce0\n'
p1383
S'bf 01 00 00 00\ne9 66 bf ff ff\n'
p1384
S'.text:0000000000405d70\n.text:0000000000405d75\n'
p1385
tp1386
sS'hash_get_n_buckets'
p1387
(S'\n__stdcall hash_get_n_buckets(Hash_table * table)\n'
p1388
V\u000asize_t hash_get_n_buckets(Hash_table *table)\u000a\u000a{\u000a  return table->n_buckets;\u000a}\u000a\u000a
p1389
S'MOV RAX,qword ptr [RDI + 0x10]\nRET\n'
p1390
S'48 8b 47 10\nc3\n'
p1391
S'.text:0000000000406410\n.text:0000000000406414\n'
p1392
tp1393
sS'emit_try_help'
p1394
(S'\n__stdcall emit_try_help()\n'
p1395
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p1396
S'PUSH RBX\nMOV RBX,qword ptr [0x00610340]\nXOR EDI,EDI\nMOV ESI,0x40bd4b\nMOV EDX,0x5\nCALL 0x00401840\nMOV RDX,RAX\nMOV RCX,qword ptr [0x00610378]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401b80\n'
p1397
S'53\n48 8b 1d 88 e4 20 00\n31 ff\nbe 4b bd 40 00\nba 05 00 00 00\ne8 77 f9 ff ff\n48 89 c2\n48 8b 0d a5 e4 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 9d fc ff ff\n'
p1398
S'.text:0000000000401eb0\n.text:0000000000401eb1\n.text:0000000000401eb8\n.text:0000000000401eba\n.text:0000000000401ebf\n.text:0000000000401ec4\n.text:0000000000401ec9\n.text:0000000000401ecc\n.text:0000000000401ed3\n.text:0000000000401ed8\n.text:0000000000401eda\n.text:0000000000401edd\n.text:0000000000401ede\n'
p1399
tp1400
sS'make_timespec'
p1401
(S'\n__stdcall make_timespec(time_t s, long ns)\n'
p1402
V\u000atimespec make_timespec(time_t s,long ns)\u000a\u000a{\u000a  return (timespec)CONCAT88(ns,s);\u000a}\u000a\u000a
p1403
S'MOV RAX,RDI\nMOV RDX,RSI\nRET\n'
p1404
S'48 89 f8\n48 89 f2\nc3\n'
p1405
S'.text:0000000000408ef0\n.text:0000000000408ef3\n.text:0000000000408ef6\n'
p1406
tp1407
sS'tail_file'
p1408
(S'\n__stdcall tail_file(File_spec * f, uintmax_t n_units)\n'
p1409
V\u000a_Bool tail_file(File_spec *f,uintmax_t n_units)\u000a\u000a{\u000a  uint uVar1;\u000a  bool bVar2;\u000a  _Bool _Var3;\u000a  uint __fd;\u000a  int iVar4;\u000a  char *pretty_filename;\u000a  uint *puVar5;\u000a  undefined8 uVar6;\u000a  stat *local_b8;\u000a  undefined local_b0 [24];\u000a  ushort local_98;\u000a  \u000a  if ((*f->name == '-') && (f->name[1] == 0)) {\u000a    have_read_stdin = 1;\u000a    __fd = 0;\u000a    bVar2 = true;\u000a  }\u000a  else {\u000a    bVar2 = false;\u000a    __fd = open_safer(f->name);\u000a  }\u000a  f->tailable = __fd != 0xffffffff | ~reopen_inaccessible_files & 1;\u000a  _Var3 = forever;\u000a  if (__fd == 0xffffffff) {\u000a    puVar5 = (uint *)__errno_location();\u000a    if (_Var3 != false) {\u000a      f->fd = -1;\u000a      f->errnum = *puVar5;\u000a      f->ignore = false;\u000a      *(undefined4 *)&f->dev = 0;\u000a      *(undefined4 *)((long)&f->dev + 4) = 0;\u000a      *(undefined4 *)&f->ino = 0;\u000a      *(undefined4 *)((long)&f->ino + 4) = 0;\u000a    }\u000a    __fd = *puVar5;\u000a    pretty_filename = "cannot open %s for reading";\u000aLAB_00402b67:\u000a    uVar6 = dcgettext(0,pretty_filename,5);\u000a    pretty_name(f);\u000a    pretty_filename = quotearg_style((char *)0x4);\u000a    error(0,(ulong)__fd,uVar6,pretty_filename);\u000a    return false;\u000a  }\u000a  if (print_headers == 1) {\u000a    pretty_filename = pretty_name(f);\u000a    write_header(pretty_filename);\u000a  }\u000a  pretty_filename = pretty_name(f);\u000a  _Var3 = tail(pretty_filename,(ulong)__fd,(uintmax_t *)n_units);\u000a  if (forever == false) {\u000a    if (bVar2) {\u000a      return _Var3;\u000a    }\u000a    iVar4 = close(__fd);\u000a    if (iVar4 == 0) {\u000a      return _Var3;\u000a    }\u000a    puVar5 = (uint *)__errno_location();\u000a    __fd = *puVar5;\u000a    pretty_filename = "error reading %s";\u000a    goto LAB_00402b67;\u000a  }\u000a  f->errnum = -((uint)(byte)~_Var3 & 1);\u000a  iVar4 = fstat(__fd,(stat *)local_b0);\u000a  if (iVar4 < 0) {\u000a    puVar5 = (uint *)__errno_location();\u000a    f->errnum = *puVar5;\u000a    uVar1 = *puVar5;\u000a    uVar6 = dcgettext(0,"error reading %s",5);\u000a    pretty_name(f);\u000a    pretty_filename = quotearg_style((char *)0x4);\u000a    error(0,(ulong)uVar1,uVar6,pretty_filename);\u000a    goto LAB_00402cc7;\u000a  }\u000a  local_98 = local_98 & 0xf000;\u000a  if ((short)local_98 < 0x1000) {\u000a    if ((local_98 == 0x8000) || (local_98 == 0xc000)) {\u000aLAB_00402c38:\u000a      if (_Var3 != false) {\u000a        record_open_fd(f,(ulong)__fd,local_b8);\u000a        pretty_name(f);\u000a        _Var3 = fremote((char *)(ulong)__fd);\u000a        f->remote = _Var3;\u000a        return true;\u000a      }\u000a      goto LAB_00402cc7;\u000a    }\u000a  }\u000a  else {\u000a    if ((local_98 == 0x1000) || (local_98 == 0x2000)) goto LAB_00402c38;\u000a  }\u000a  uVar6 = dcgettext(0,"%s: cannot follow end of this type of file; giving up on this name",5);\u000a  pretty_name(f);\u000a  pretty_filename = quotearg_n_style_colon((char *)0x0);\u000a  error(0,0,uVar6,pretty_filename);\u000a  f->errnum = -1;\u000a  f->ignore = true;\u000aLAB_00402cc7:\u000a  pretty_name(f);\u000a  close_fd((char *)(ulong)__fd);\u000a  f->fd = -1;\u000a  return false;\u000a}\u000a\u000a
p1410
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x98\nMOV R14,RSI\nMOV RBP,RDI\nMOV RAX,qword ptr [RBP]\nCMP byte ptr [RAX],0x2d\nJNZ 0x00402a66\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x00402bcc\nMOV RDI,qword ptr [RBP]\nXOR R15D,R15D\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00406340\nMOV EBX,EAX\nMOV AL,byte ptr [0x00610353]\nNOT AL\nCMP EBX,-0x1\nSETNZ CL\nOR CL,AL\nAND CL,0x1\nCMP EBX,-0x1\nMOV byte ptr [RBP + 0x36],CL\nJZ 0x00402b33\nCMP byte ptr [0x0061034e],0x1\nJNZ 0x00402ab0\nMOV RDI,RBP\nCALL 0x00403d40\nMOV RDI,RAX\nCALL 0x00403d70\nMOV RDI,RBP\nCALL 0x00403d40\nMOV RCX,RSP\nMOV RDI,RAX\nMOV ESI,EBX\nMOV RDX,R14\nCALL 0x00403db0\nMOV R14B,AL\nCMP byte ptr [0x00610350],0x0\nJZ 0x00402ba0\nMOV EAX,R14D\nNOT AL\nMOVZX EAX,AL\nAND EAX,0x1\nNEG EAX\nMOV dword ptr [RBP + 0x3c],EAX\nLEA RSI,[RSP + 0x8]\nMOV EDI,EBX\nCALL 0x0040a6e0\nTEST EAX,EAX\nJS 0x00402bdd\nMOVZX EAX,word ptr [RSP + 0x20]\nAND EAX,0xf000\nMOVSX ECX,AX\nMOVZX EAX,AX\nCMP ECX,0xfff\nJG 0x00402c2a\nCMP EAX,0x8000\nJZ 0x00402c38\nCMP EAX,0xc000\nJZ 0x00402c38\nJMP 0x00402c80\nMOV BL,byte ptr [0x00610350]\nCALL 0x00401770\nCMP BL,0x0\nJZ 0x00402b5a\nMOV dword ptr [RBP + 0x38],0xffffffff\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RBP + 0x3c],ECX\nMOV byte ptr [RBP + 0x34],0x0\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBP + 0x20],XMM0\nMOV R15D,dword ptr [RAX]\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x40c1e5\nMOV EDX,0x5\nCALL 0x00401840\nMOV RBX,RAX\nMOV RDI,RBP\nCALL 0x00403d40\nMOV EDI,0x4\nMOV RSI,RAX\nCALL 0x004087b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,RBX\nCALL 0x00401af0\nJMP 0x00402ce3\nTEST R15B,R15B\nJNZ 0x00402ce3\nMOV EDI,EBX\nCALL 0x00401930\nTEST EAX,EAX\nJZ 0x00402ce3\nCALL 0x00401770\nMOV R15D,dword ptr [RAX]\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x40c200\nJMP 0x00402b67\nMOV byte ptr [0x0061034c],0x1\nXOR EBX,EBX\nMOV R15B,0x1\nJMP 0x00402a78\nCALL 0x00401770\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RBP + 0x3c],ECX\nMOV R14D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40c200\nMOV EDX,0x5\nCALL 0x00401840\nMOV R15,RAX\nMOV RDI,RBP\nCALL 0x00403d40\nMOV EDI,0x4\nMOV RSI,RAX\nCALL 0x004087b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,R15\nCALL 0x00401af0\nJMP 0x00402cc7\nCMP EAX,0x1000\nJZ 0x00402c38\nCMP EAX,0x2000\nJNZ 0x00402c80\nTEST R14B,R14B\nJZ 0x00402cc7\nMOV RDX,qword ptr [RSP]\nTEST R15B,R15B\nMOV EAX,0xffffffff\nMOV R8D,0x1\nCMOVNZ R8D,EAX\nLEA RCX,[RSP + 0x8]\nMOV RDI,RBP\nMOV ESI,EBX\nCALL 0x00403e50\nMOV RDI,RBP\nCALL 0x00403d40\nMOV EDI,EBX\nMOV RSI,RAX\nCALL 0x00403ea0\nMOV byte ptr [RBP + 0x35],AL\nMOV R14B,0x1\nJMP 0x00402ce3\nXOR EDI,EDI\nMOV ESI,0x40c211\nMOV EDX,0x5\nCALL 0x00401840\nMOV R14,RAX\nMOV RDI,RBP\nCALL 0x00403d40\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,RAX\nCALL 0x00408890\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R14\nCALL 0x00401af0\nMOV dword ptr [RBP + 0x3c],0xffffffff\nMOV byte ptr [RBP + 0x34],0x1\nMOV RDI,RBP\nCALL 0x00403d40\nMOV EDI,EBX\nMOV RSI,RAX\nCALL 0x00403dd0\nMOV dword ptr [RBP + 0x38],0xffffffff\nXOR R14D,R14D\nMOV EAX,R14D\nADD RSP,0x98\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1411
S'55\n41 57\n41 56\n53\n48 81 ec 98 00 00 00\n49 89 f6\n48 89 fd\n48 8b 45 00\n80 38 2d\n75 0a\n80 78 01 00\n0f 84 66 01 00 00\n48 8b 7d 00\n45 31 ff\n31 f6\n31 c0\ne8 ca 38 00 00\n89 c3\n8a 05 d5 d8 20 00\nf6 d0\n83 fb ff\n0f 95 c1\n08 c1\n80 e1 01\n83 fb ff\n88 4d 36\n0f 84 9c 00 00 00\n80 3d b0 d8 20 00 01\n75 10\n48 89 ef\ne8 98 12 00 00\n48 89 c7\ne8 c0 12 00 00\n48 89 ef\ne8 88 12 00 00\n48 89 e1\n48 89 c7\n89 de\n4c 89 f2\ne8 e8 12 00 00\n41 88 c6\n80 3d 7e d8 20 00 00\n0f 84 c8 00 00 00\n44 89 f0\nf6 d0\n0f b6 c0\n83 e0 01\nf7 d8\n89 45 3c\n48 8d 74 24 08\n89 df\ne8 ec 7b 00 00\n85 c0\n0f 88 e1 00 00 00\n0f b7 44 24 20\n25 00 f0 00 00\n0f bf c8\n0f b7 c0\n81 f9 ff 0f 00 00\n0f 8f 12 01 00 00\n3d 00 80 00 00\n0f 84 15 01 00 00\n3d 00 c0 00 00\n0f 84 0a 01 00 00\ne9 4d 01 00 00\n8a 1d 17 d8 20 00\ne8 32 ec ff ff\n80 fb 00\n74 17\nc7 45 38 ff ff ff ff\n8b 08\n89 4d 3c\nc6 45 34 00\n0f 57 c0\n0f 11 45 20\n44 8b 38\n45 31 f6\n31 ff\nbe e5 c1 40 00\nba 05 00 00 00\ne8 cf ec ff ff\n48 89 c3\n48 89 ef\ne8 c4 11 00 00\nbf 04 00 00 00\n48 89 c6\ne8 27 5c 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 fe\n48 89 da\ne8 55 ef ff ff\ne9 43 01 00 00\n45 84 ff\n0f 85 3a 01 00 00\n89 df\ne8 80 ed ff ff\n85 c0\n0f 84 2b 01 00 00\ne8 b3 eb ff ff\n44 8b 38\n45 31 f6\n31 ff\nbe 00 c2 40 00\neb 9b\nc6 05 79 d7 20 00 01\n31 db\n41 b7 01\ne9 9b fe ff ff\ne8 8e eb ff ff\n8b 08\n89 4d 3c\n44 8b 30\n31 ff\nbe 00 c2 40 00\nba 05 00 00 00\ne8 45 ec ff ff\n49 89 c7\n48 89 ef\ne8 3a 11 00 00\nbf 04 00 00 00\n48 89 c6\ne8 9d 5b 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 f6\n4c 89 fa\ne8 cb ee ff ff\ne9 9d 00 00 00\n3d 00 10 00 00\n74 07\n3d 00 20 00 00\n75 48\n45 84 f6\n0f 84 86 00 00 00\n48 8b 14 24\n45 84 ff\nb8 ff ff ff ff\n41 b8 01 00 00 00\n44 0f 45 c0\n48 8d 4c 24 08\n48 89 ef\n89 de\ne8 ea 11 00 00\n48 89 ef\ne8 d2 10 00 00\n89 df\n48 89 c6\ne8 28 12 00 00\n88 45 35\n41 b6 01\neb 63\n31 ff\nbe 11 c2 40 00\nba 05 00 00 00\ne8 af eb ff ff\n49 89 c6\n48 89 ef\ne8 a4 10 00 00\n31 ff\nbe 03 00 00 00\n48 89 c2\ne8 e5 5b 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n4c 89 f2\ne8 34 ee ff ff\nc7 45 3c ff ff ff ff\nc6 45 34 01\n48 89 ef\ne8 71 10 00 00\n89 df\n48 89 c6\ne8 f7 10 00 00\nc7 45 38 ff ff ff ff\n45 31 f6\n44 89 f0\n48 81 c4 98 00 00 00\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1412
S'.text:0000000000402a40\n.text:0000000000402a41\n.text:0000000000402a43\n.text:0000000000402a45\n.text:0000000000402a46\n.text:0000000000402a4d\n.text:0000000000402a50\n.text:0000000000402a53\n.text:0000000000402a57\n.text:0000000000402a5a\n.text:0000000000402a5c\n.text:0000000000402a60\n.text:0000000000402a66\n.text:0000000000402a6a\n.text:0000000000402a6d\n.text:0000000000402a6f\n.text:0000000000402a71\n.text:0000000000402a76\n.text:0000000000402a78\n.text:0000000000402a7e\n.text:0000000000402a80\n.text:0000000000402a83\n.text:0000000000402a86\n.text:0000000000402a88\n.text:0000000000402a8b\n.text:0000000000402a8e\n.text:0000000000402a91\n.text:0000000000402a97\n.text:0000000000402a9e\n.text:0000000000402aa0\n.text:0000000000402aa3\n.text:0000000000402aa8\n.text:0000000000402aab\n.text:0000000000402ab0\n.text:0000000000402ab3\n.text:0000000000402ab8\n.text:0000000000402abb\n.text:0000000000402abe\n.text:0000000000402ac0\n.text:0000000000402ac3\n.text:0000000000402ac8\n.text:0000000000402acb\n.text:0000000000402ad2\n.text:0000000000402ad8\n.text:0000000000402adb\n.text:0000000000402add\n.text:0000000000402ae0\n.text:0000000000402ae3\n.text:0000000000402ae5\n.text:0000000000402ae8\n.text:0000000000402aed\n.text:0000000000402aef\n.text:0000000000402af4\n.text:0000000000402af6\n.text:0000000000402afc\n.text:0000000000402b01\n.text:0000000000402b06\n.text:0000000000402b09\n.text:0000000000402b0c\n.text:0000000000402b12\n.text:0000000000402b18\n.text:0000000000402b1d\n.text:0000000000402b23\n.text:0000000000402b28\n.text:0000000000402b2e\n.text:0000000000402b33\n.text:0000000000402b39\n.text:0000000000402b3e\n.text:0000000000402b41\n.text:0000000000402b43\n.text:0000000000402b4a\n.text:0000000000402b4c\n.text:0000000000402b4f\n.text:0000000000402b53\n.text:0000000000402b56\n.text:0000000000402b5a\n.text:0000000000402b5d\n.text:0000000000402b60\n.text:0000000000402b62\n.text:0000000000402b67\n.text:0000000000402b6c\n.text:0000000000402b71\n.text:0000000000402b74\n.text:0000000000402b77\n.text:0000000000402b7c\n.text:0000000000402b81\n.text:0000000000402b84\n.text:0000000000402b89\n.text:0000000000402b8c\n.text:0000000000402b8e\n.text:0000000000402b90\n.text:0000000000402b93\n.text:0000000000402b96\n.text:0000000000402b9b\n.text:0000000000402ba0\n.text:0000000000402ba3\n.text:0000000000402ba9\n.text:0000000000402bab\n.text:0000000000402bb0\n.text:0000000000402bb2\n.text:0000000000402bb8\n.text:0000000000402bbd\n.text:0000000000402bc0\n.text:0000000000402bc3\n.text:0000000000402bc5\n.text:0000000000402bca\n.text:0000000000402bcc\n.text:0000000000402bd3\n.text:0000000000402bd5\n.text:0000000000402bd8\n.text:0000000000402bdd\n.text:0000000000402be2\n.text:0000000000402be4\n.text:0000000000402be7\n.text:0000000000402bea\n.text:0000000000402bec\n.text:0000000000402bf1\n.text:0000000000402bf6\n.text:0000000000402bfb\n.text:0000000000402bfe\n.text:0000000000402c01\n.text:0000000000402c06\n.text:0000000000402c0b\n.text:0000000000402c0e\n.text:0000000000402c13\n.text:0000000000402c16\n.text:0000000000402c18\n.text:0000000000402c1a\n.text:0000000000402c1d\n.text:0000000000402c20\n.text:0000000000402c25\n.text:0000000000402c2a\n.text:0000000000402c2f\n.text:0000000000402c31\n.text:0000000000402c36\n.text:0000000000402c38\n.text:0000000000402c3b\n.text:0000000000402c41\n.text:0000000000402c45\n.text:0000000000402c48\n.text:0000000000402c4d\n.text:0000000000402c53\n.text:0000000000402c57\n.text:0000000000402c5c\n.text:0000000000402c5f\n.text:0000000000402c61\n.text:0000000000402c66\n.text:0000000000402c69\n.text:0000000000402c6e\n.text:0000000000402c70\n.text:0000000000402c73\n.text:0000000000402c78\n.text:0000000000402c7b\n.text:0000000000402c7e\n.text:0000000000402c80\n.text:0000000000402c82\n.text:0000000000402c87\n.text:0000000000402c8c\n.text:0000000000402c91\n.text:0000000000402c94\n.text:0000000000402c97\n.text:0000000000402c9c\n.text:0000000000402c9e\n.text:0000000000402ca3\n.text:0000000000402ca6\n.text:0000000000402cab\n.text:0000000000402cae\n.text:0000000000402cb0\n.text:0000000000402cb2\n.text:0000000000402cb4\n.text:0000000000402cb7\n.text:0000000000402cbc\n.text:0000000000402cc3\n.text:0000000000402cc7\n.text:0000000000402cca\n.text:0000000000402ccf\n.text:0000000000402cd1\n.text:0000000000402cd4\n.text:0000000000402cd9\n.text:0000000000402ce0\n.text:0000000000402ce3\n.text:0000000000402ce6\n.text:0000000000402ced\n.text:0000000000402cee\n.text:0000000000402cf0\n.text:0000000000402cf2\n.text:0000000000402cf3\n'
p1413
tp1414
sS'strrchr'
p1415
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p1416
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_006100e8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1417
S'JMP qword ptr [0x006100e8]\n'
p1418
S'ff 25 02 e8 20 00\n'
p1419
S'.plt:00000000004018e0\n'
p1420
tp1421
sS'quotearg_alloc_mem'
p1422
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p1423
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p1424
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x610380\nCMOVNZ R12,RCX\nCALL 0x00401770\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00407700\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x004095a0\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00407700\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x0040842a\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1425
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc 80 03 61 00\n4c 0f 45 e1\ne8 e8 93 ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 c1 11 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1426
S'.text:0000000000408350\n.text:0000000000408351\n.text:0000000000408353\n.text:0000000000408355\n.text:0000000000408357\n.text:0000000000408359\n.text:000000000040835a\n.text:000000000040835e\n.text:0000000000408361\n.text:0000000000408366\n.text:0000000000408369\n.text:000000000040836e\n.text:0000000000408371\n.text:0000000000408376\n.text:0000000000408379\n.text:000000000040837f\n.text:0000000000408383\n.text:0000000000408388\n.text:000000000040838d\n.text:000000000040838f\n.text:0000000000408393\n.text:0000000000408395\n.text:0000000000408398\n.text:000000000040839c\n.text:00000000004083a1\n.text:00000000004083a5\n.text:00000000004083aa\n.text:00000000004083ae\n.text:00000000004083b0\n.text:00000000004083b2\n.text:00000000004083b5\n.text:00000000004083b8\n.text:00000000004083bb\n.text:00000000004083c0\n.text:00000000004083c5\n.text:00000000004083c7\n.text:00000000004083cc\n.text:00000000004083d0\n.text:00000000004083d3\n.text:00000000004083d7\n.text:00000000004083da\n.text:00000000004083df\n.text:00000000004083e2\n.text:00000000004083e6\n.text:00000000004083ea\n.text:00000000004083ed\n.text:00000000004083f0\n.text:00000000004083f5\n.text:00000000004083fa\n.text:00000000004083fd\n.text:0000000000408402\n.text:0000000000408407\n.text:0000000000408409\n.text:000000000040840e\n.text:0000000000408413\n.text:0000000000408417\n.text:000000000040841a\n.text:000000000040841e\n.text:0000000000408423\n.text:0000000000408425\n.text:0000000000408427\n.text:000000000040842a\n.text:000000000040842d\n.text:0000000000408431\n.text:0000000000408432\n.text:0000000000408434\n.text:0000000000408436\n.text:0000000000408438\n.text:000000000040843a\n.text:000000000040843b\n'
p1427
tp1428
sS'bkm_scale'
p1429
(S'\n__stdcall bkm_scale(uintmax_t * x)\n'
p1430
V\u000astrtol_error bkm_scale(uintmax_t *x)\u000a\u000a{\u000a  ulong uVar1;\u000a  uintmax_t uVar2;\u000a  int in_ESI;\u000a  bool bVar3;\u000a  \u000a  uVar1 = *x;\u000a  uVar2 = (long)in_ESI * uVar1;\u000a  bVar3 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816((ulong)(long)in_ESI),0\u000a                ) < uVar1;\u000a  if (bVar3) {\u000a    uVar2 = 0xffffffffffffffff;\u000a  }\u000a  *x = uVar2;\u000a  return -(uint)bVar3 & LONGINT_OVERFLOW;\u000a}\u000a\u000a
p1431
S'MOVSXD RCX,ESI\nMOV RSI,-0x1\nMOV RAX,-0x1\nXOR EDX,EDX\nDIV RCX\nMOV RDX,qword ptr [RDI]\nIMUL RCX,RDX\nCMP RAX,RDX\nCMOVC RCX,RSI\nSBB EAX,EAX\nAND EAX,0x1\nMOV qword ptr [RDI],RCX\nRET\n'
p1432
S'48 63 ce\n48 c7 c6 ff ff ff ff\n48 c7 c0 ff ff ff ff\n31 d2\n48 f7 f1\n48 8b 17\n48 0f af ca\n48 39 d0\n48 0f 42 ce\n19 c0\n83 e0 01\n48 89 0f\nc3\n'
p1433
S'.text:0000000000409b20\n.text:0000000000409b23\n.text:0000000000409b2a\n.text:0000000000409b31\n.text:0000000000409b33\n.text:0000000000409b36\n.text:0000000000409b39\n.text:0000000000409b3d\n.text:0000000000409b40\n.text:0000000000409b44\n.text:0000000000409b46\n.text:0000000000409b49\n.text:0000000000409b4c\n'
p1434
tp1435
sS'memchr'
p1436
(S'\n__stdcall memchr(void * __s, int __c, size_t __n)\n'
p1437
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memchr(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memchr_00610118)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1438
S'JMP qword ptr [0x00610118]\n'
p1439
S'ff 25 d2 e7 20 00\n'
p1440
S'.plt:0000000000401940\n'
p1441
tp1442
sS'quotearg_style_mem'
p1443
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p1444
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1445
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00408770\n'
p1446
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p1447
S'.text:00000000004087d0\n.text:00000000004087d3\n.text:00000000004087d6\n.text:00000000004087d8\n.text:00000000004087da\n.text:00000000004087dc\n.text:00000000004087df\n.text:00000000004087e2\n'
p1448
tp1449
sS'xalloc_die'
p1450
(S'\n__stdcall xalloc_die()\n'
p1451
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,&DAT_0040c6e4,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1452
S'PUSH RBX\nMOV EBX,dword ptr [0x00610298]\nXOR EDI,EDI\nMOV ESI,0x40d0bf\nMOV EDX,0x5\nCALL 0x00401840\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x40c6e4\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00401af0\nCALL 0x00401760\n'
p1453
S'53\n8b 1d 31 6c 20 00\n31 ff\nbe bf d0 40 00\nba 05 00 00 00\ne8 c8 81 ff ff\n48 89 c1\n31 f6\nba e4 c6 40 00\n31 c0\n89 df\ne8 65 84 ff ff\ne8 d0 80 ff ff\n'
p1454
S'.text:0000000000409660\n.text:0000000000409661\n.text:0000000000409667\n.text:0000000000409669\n.text:000000000040966e\n.text:0000000000409673\n.text:0000000000409678\n.text:000000000040967b\n.text:000000000040967d\n.text:0000000000409682\n.text:0000000000409684\n.text:0000000000409686\n.text:000000000040968b\n'
p1455
tp1456
sS'open_safer'
p1457
(S'\n__stdcall open_safer(char * file)\n'
p1458
V\u000a/* WARNING: Removing unreachable block (ram,0x004063de) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff58 : 0x004063ec */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint open_safer(char *file,...)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  uint __oflag;\u000a  va_list ap;\u000a  uint local_a8;\u000a  \u000a  uVar2 = 0;\u000a  if ((__oflag & 0x40) != 0) {\u000a    uVar2 = (ulong)local_a8;\u000a  }\u000a  open(file,__oflag,uVar2);\u000a  iVar1 = fd_safer();\u000a  return iVar1;\u000a}\u000a\u000a
p1459
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00406382\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nXOR EDX,EDX\nTEST SIL,0x40\nJZ 0x004063ee\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RCX,dword ptr [RSP]\nCMP RCX,0x28\nJA 0x004063de\nMOV RAX,RCX\nADD RAX,qword ptr [RSP + 0x10]\nLEA ECX,[RCX + 0x8]\nMOV dword ptr [RSP],ECX\nJMP 0x004063ec\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RCX,[RAX + 0x8]\nMOV qword ptr [RSP + 0x8],RCX\nMOV EDX,dword ptr [RAX]\nXOR EAX,EAX\nCALL 0x00401b10\nMOV EDI,EAX\nCALL 0x00408f60\nADD RSP,0xd8\nRET\n'
p1460
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n31 d2\n40 f6 c6 40\n74 50\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 0c 24\n48 83 f9 28\n77 10\n48 89 c8\n48 03 44 24 10\n8d 49 08\n89 0c 24\neb 0e\n48 8b 44 24 08\n48 8d 48 08\n48 89 4c 24 08\n8b 10\n31 c0\ne8 1b b7 ff ff\n89 c7\ne8 64 2b 00 00\n48 81 c4 d8 00 00 00\nc3\n'
p1461
S'.text:0000000000406340\n.text:0000000000406347\n.text:0000000000406349\n.text:000000000040634b\n.text:0000000000406350\n.text:0000000000406355\n.text:000000000040635a\n.text:0000000000406362\n.text:000000000040636a\n.text:0000000000406372\n.text:000000000040637a\n.text:0000000000406382\n.text:0000000000406387\n.text:000000000040638c\n.text:0000000000406391\n.text:0000000000406396\n.text:0000000000406398\n.text:000000000040639c\n.text:000000000040639e\n.text:00000000004063a3\n.text:00000000004063a8\n.text:00000000004063b0\n.text:00000000004063b5\n.text:00000000004063bd\n.text:00000000004063c4\n.text:00000000004063c8\n.text:00000000004063cc\n.text:00000000004063ce\n.text:00000000004063d1\n.text:00000000004063d6\n.text:00000000004063d9\n.text:00000000004063dc\n.text:00000000004063de\n.text:00000000004063e3\n.text:00000000004063e7\n.text:00000000004063ec\n.text:00000000004063ee\n.text:00000000004063f0\n.text:00000000004063f5\n.text:00000000004063f7\n.text:00000000004063fc\n.text:0000000000406403\n'
p1462
tp1463
sS'FUN_00401730'
p1464
(S'\n__stdcall FUN_00401730()\n'
p1465
V\u000avoid FUN_00401730(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_00610010)();\u000a  return;\u000a}\u000a\u000a
p1466
S'PUSH qword ptr [0x00610008]\nJMP qword ptr [0x00610010]\n'
p1467
S'ff 35 d2 e8 20 00\nff 25 d4 e8 20 00\n'
p1468
S'.plt:0000000000401730\n.plt:0000000000401736\n'
p1469
tp1470
sS'quotearg_n_custom'
p1471
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p1472
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1473
S'MOV R8,-0x1\nJMP 0x004088f0\n'
p1474
S'49 c7 c0 ff ff ff ff\neb 07\n'
p1475
S'.text:00000000004088e0\n.text:00000000004088e7\n'
p1476
tp1477
sS'xlseek'
p1478
(S'\n__stdcall xlseek(off_t offset, char * filename)\n'
p1479
V\u000aoff_t xlseek(off_t offset,char *filename)\u000a\u000a{\u000a  uint uVar1;\u000a  __off_t _Var2;\u000a  char *pcVar3;\u000a  uint *puVar4;\u000a  undefined8 uVar5;\u000a  char *pcVar6;\u000a  int __whence;\u000a  char buf [21];\u000a  char acStack72 [32];\u000a  \u000a  _Var2 = lseek((int)offset,(__off_t)filename,__whence);\u000a  if (-1 < _Var2) {\u000a    return _Var2;\u000a  }\u000a  pcVar3 = offtostr((off_t)filename,acStack72);\u000a  puVar4 = (uint *)__errno_location();\u000a  uVar1 = *puVar4;\u000a  if (__whence == 2) {\u000a    pcVar6 = "%s: cannot seek to end-relative offset %s";\u000a  }\u000a  else {\u000a    if (__whence == 1) {\u000a      pcVar6 = "%s: cannot seek to relative offset %s";\u000a    }\u000a    else {\u000a      if (__whence != 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        abort();\u000a      }\u000a      pcVar6 = "%s: cannot seek to offset %s";\u000a    }\u000a  }\u000a  uVar5 = dcgettext(0,pcVar6,5);\u000a  pcVar6 = quotearg_n_style_colon((char *)0x0);\u000a  error(0,(ulong)uVar1,uVar5,pcVar6,pcVar3);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(1);\u000a}\u000a\u000a
p1480
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x20\nMOV R12,RCX\nMOV EBP,EDX\nMOV RBX,RSI\nCALL 0x004018f0\nTEST RAX,RAX\nJS 0x0040474b\nADD RSP,0x20\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RSI,RSP\nMOV RDI,RBX\nCALL 0x004073c0\nMOV R14,RAX\nCALL 0x00401770\nMOV R15D,dword ptr [RAX]\nCMP EBP,0x2\nJZ 0x00404778\nCMP EBP,0x1\nJZ 0x00404781\nTEST EBP,EBP\nJNZ 0x004047c3\nXOR EDI,EDI\nMOV ESI,0x40c2a2\nJMP 0x00404788\nXOR EDI,EDI\nMOV ESI,0x40c2e5\nJMP 0x00404788\nXOR EDI,EDI\nMOV ESI,0x40c2bf\nMOV EDX,0x5\nCALL 0x00401840\nMOV RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R12\nCALL 0x00408890\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,RBX\nMOV R8,R14\nCALL 0x00401af0\nMOV EDI,0x1\nCALL 0x00401b60\nCALL 0x00401760\n'
p1481
S'55\n41 57\n41 56\n41 54\n53\n48 83 ec 20\n49 89 cc\n89 d5\n48 89 f3\ne8 b7 d1 ff ff\n48 85 c0\n78 0d\n48 83 c4 20\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n48 89 e6\n48 89 df\ne8 6a 2c 00 00\n49 89 c6\ne8 12 d0 ff ff\n44 8b 38\n83 fd 02\n74 12\n83 fd 01\n74 16\n85 ed\n75 54\n31 ff\nbe a2 c2 40 00\neb 10\n31 ff\nbe e5 c2 40 00\neb 07\n31 ff\nbe bf c2 40 00\nba 05 00 00 00\ne8 ae d0 ff ff\n48 89 c3\n31 ff\nbe 03 00 00 00\n4c 89 e2\ne8 ec 40 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 fe\n48 89 da\n4d 89 f0\ne8 37 d3 ff ff\nbf 01 00 00 00\ne8 9d d3 ff ff\ne8 98 cf ff ff\n'
p1482
S'.text:0000000000404720\n.text:0000000000404721\n.text:0000000000404723\n.text:0000000000404725\n.text:0000000000404727\n.text:0000000000404728\n.text:000000000040472c\n.text:000000000040472f\n.text:0000000000404731\n.text:0000000000404734\n.text:0000000000404739\n.text:000000000040473c\n.text:000000000040473e\n.text:0000000000404742\n.text:0000000000404743\n.text:0000000000404745\n.text:0000000000404747\n.text:0000000000404749\n.text:000000000040474a\n.text:000000000040474b\n.text:000000000040474e\n.text:0000000000404751\n.text:0000000000404756\n.text:0000000000404759\n.text:000000000040475e\n.text:0000000000404761\n.text:0000000000404764\n.text:0000000000404766\n.text:0000000000404769\n.text:000000000040476b\n.text:000000000040476d\n.text:000000000040476f\n.text:0000000000404771\n.text:0000000000404776\n.text:0000000000404778\n.text:000000000040477a\n.text:000000000040477f\n.text:0000000000404781\n.text:0000000000404783\n.text:0000000000404788\n.text:000000000040478d\n.text:0000000000404792\n.text:0000000000404795\n.text:0000000000404797\n.text:000000000040479c\n.text:000000000040479f\n.text:00000000004047a4\n.text:00000000004047a7\n.text:00000000004047a9\n.text:00000000004047ab\n.text:00000000004047ae\n.text:00000000004047b1\n.text:00000000004047b4\n.text:00000000004047b9\n.text:00000000004047be\n.text:00000000004047c3\n'
p1483
tp1484
sS'fd_safer'
p1485
(S'\n__stdcall fd_safer()\n'
p1486
V\u000aint fd_safer(void)\u000a\u000a{\u000a  int iVar1;\u000a  uint uVar2;\u000a  int *piVar3;\u000a  uint __fd;\u000a  \u000a  if (__fd < 3) {\u000a    uVar2 = dup_safer();\u000a    piVar3 = __errno_location();\u000a    iVar1 = *piVar3;\u000a    close(__fd);\u000a    *piVar3 = iVar1;\u000a    __fd = uVar2;\u000a  }\u000a  return (int)__fd;\u000a}\u000a\u000a
p1487
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDI\nCMP EBX,0x2\nJA 0x00408f94\nMOV EDI,EBX\nCALL 0x0040a4d0\nMOV R14D,EAX\nCALL 0x00401770\nMOV RBP,RAX\nMOV R15D,dword ptr [RBP]\nMOV EDI,EBX\nCALL 0x00401930\nMOV dword ptr [RBP],R15D\nMOV EAX,R14D\nJMP 0x00408f96\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1488
S'55\n41 57\n41 56\n53\n50\n89 fb\n83 fb 02\n77 26\n89 df\ne8 5b 15 00 00\n41 89 c6\ne8 f3 87 ff ff\n48 89 c5\n44 8b 7d 00\n89 df\ne8 a5 89 ff ff\n44 89 7d 00\n44 89 f0\neb 02\n89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1489
S'.text:0000000000408f60\n.text:0000000000408f61\n.text:0000000000408f63\n.text:0000000000408f65\n.text:0000000000408f66\n.text:0000000000408f67\n.text:0000000000408f69\n.text:0000000000408f6c\n.text:0000000000408f6e\n.text:0000000000408f70\n.text:0000000000408f75\n.text:0000000000408f78\n.text:0000000000408f7d\n.text:0000000000408f80\n.text:0000000000408f84\n.text:0000000000408f86\n.text:0000000000408f8b\n.text:0000000000408f8f\n.text:0000000000408f92\n.text:0000000000408f94\n.text:0000000000408f96\n.text:0000000000408f9a\n.text:0000000000408f9b\n.text:0000000000408f9d\n.text:0000000000408f9f\n.text:0000000000408fa0\n'
p1490
tp1491
sS'__freading'
p1492
(S'\n__stdcall __freading()\n'
p1493
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_006101c0)();\u000a  return;\u000a}\u000a\u000a
p1494
S'JMP qword ptr [0x006101c0]\n'
p1495
S'ff 25 2a e7 20 00\n'
p1496
S'.plt:0000000000401a90\n'
p1497
tp1498
sS'any_symlinks'
p1499
(S'\n__stdcall any_symlinks(File_spec * f, size_t n_files)\n'
p1500
V\u000a_Bool any_symlinks(File_spec *f,size_t n_files)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  stat sStack184;\u000a  \u000a  if (n_files != 0) {\u000a    uVar2 = 0;\u000a    do {\u000a      iVar1 = lstat(f->name,&sStack184);\u000a      if ((iVar1 == 0) && ((sStack184.st_mode & 0xf000) == 0xa000)) {\u000a        return true;\u000a      }\u000a      uVar2 = uVar2 + 1;\u000a      f = f + 1;\u000a    } while (uVar2 < n_files);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1501
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x90\nMOV R14,RSI\nMOV R12,RDI\nTEST R14,R14\nJZ 0x00402e69\nXOR EBX,EBX\nMOV R15,RSP\nMOV EBP,0xf000\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RDI,qword ptr [R12]\nMOV RSI,R15\nCALL 0x0040a6f0\nTEST EAX,EAX\nJNZ 0x00402e5d\nMOV EAX,dword ptr [RSP + 0x18]\nAND EAX,EBP\nCMP EAX,0xa000\nJZ 0x00402e7b\nINC RBX\nADD R12,0x60\nCMP RBX,R14\nJC 0x00402e40\nXOR EAX,EAX\nADD RSP,0x90\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV AL,0x1\nJMP 0x00402e6b\n'
p1502
S'55\n41 57\n41 56\n41 54\n53\n48 81 ec 90 00 00 00\n49 89 f6\n49 89 fc\n4d 85 f6\n74 3f\n31 db\n49 89 e7\nbd 00 f0 00 00\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 8b 3c 24\n4c 89 fe\ne8 a4 78 00 00\n85 c0\n75 0d\n8b 44 24 18\n21 e8\n3d 00 a0 00 00\n74 1e\n48 ff c3\n49 83 c4 60\n4c 39 f3\n72 d7\n31 c0\n48 81 c4 90 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\nb0 01\neb ec\n'
p1503
S'.text:0000000000402e10\n.text:0000000000402e11\n.text:0000000000402e13\n.text:0000000000402e15\n.text:0000000000402e17\n.text:0000000000402e18\n.text:0000000000402e1f\n.text:0000000000402e22\n.text:0000000000402e25\n.text:0000000000402e28\n.text:0000000000402e2a\n.text:0000000000402e2c\n.text:0000000000402e2f\n.text:0000000000402e34\n.text:0000000000402e40\n.text:0000000000402e44\n.text:0000000000402e47\n.text:0000000000402e4c\n.text:0000000000402e4e\n.text:0000000000402e50\n.text:0000000000402e54\n.text:0000000000402e56\n.text:0000000000402e5b\n.text:0000000000402e5d\n.text:0000000000402e60\n.text:0000000000402e64\n.text:0000000000402e67\n.text:0000000000402e69\n.text:0000000000402e6b\n.text:0000000000402e72\n.text:0000000000402e73\n.text:0000000000402e75\n.text:0000000000402e77\n.text:0000000000402e79\n.text:0000000000402e7a\n.text:0000000000402e7b\n.text:0000000000402e7d\n'
p1504
tp1505
sS'fputs_unlocked'
p1506
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p1507
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_00610130)();\u000a  return iVar1;\u000a}\u000a\u000a
p1508
S'JMP qword ptr [0x00610130]\n'
p1509
S'ff 25 ba e7 20 00\n'
p1510
S'.plt:0000000000401970\n'
p1511
tp1512
sS'main'
p1513
(S'\n__stdcall main(char * * argv)\n'
p1514
V\u000aint main(char **argv)\u000a\u000a{\u000a  uint uVar1;\u000a  bool bVar2;\u000a  char *dummy_stdin;\u000a  _Bool _Var3;\u000a  ulong uVar4;\u000a  undefined8 uVar5;\u000a  File_spec *f;\u000a  size_t sVar6;\u000a  uint *puVar7;\u000a  int iVar8;\u000a  bool bVar9;\u000a  uint __fd;\u000a  char **ppcVar10;\u000a  File_spec *f_00;\u000a  int *piVar11;\u000a  char **n_units;\u000a  ulong n;\u000a  byte bVar12;\u000a  uintmax_t local_48;\u000a  int local_3c;\u000a  double local_38;\u000a  \u000a  local_3c = 0;\u000a  local_48 = 10;\u000a  local_38 = 1.00000000;\u000a  set_program_name(*n_units);\u000a  setlocale(6,\u000a              "\u005cnNUM may have a multiplier suffix:\u005cnb 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024,\u005cnGB 1000*1000*1000, G 1024*1024*1024, and so on for T, P, E, Z, Y.\u005cn\u005cn"\u000a              + 0x99);\u000a  bindtextdomain(0x40be6f,"/usr/local/share/locale");\u000a  textdomain(0x40be6f);\u000a  atexit(close_stdout);\u000a  have_read_stdin = 0;\u000a  count_lines = true;\u000a  print_headers = 0;\u000a  from_start = false;\u000a  forever = false;\u000a  line_end = 1;\u000a  _Var3 = parse_obsolete_option((char **)((ulong)argv & 0xffffffff),(uintmax_t *)n_units);\u000a  __fd = (int)(char **)((ulong)argv & 0xffffffff) - (uint)_Var3;\u000a  parse_options((char **)(ulong)__fd,(uintmax_t *)(n_units + (ulong)_Var3),(header_mode *)&local_48,\u000a                (double *)&local_3c);\u000a  if ((from_start != false) && (local_48 != 0)) {\u000a    local_48 = local_48 - 1;\u000a  }\u000a  if (optind < (int)__fd) {\u000a    ppcVar10 = n_units + (ulong)_Var3 + (long)optind;\u000a    if (__fd - optind == 0) {\u000a      n = 0;\u000a      goto joined_r0x00402242;\u000a    }\u000a    n = SEXT48((int)(__fd - optind));\u000a  }\u000a  else {\u000a    ppcVar10 = (char **)&ram0x0040b080;\u000a    n = 1;\u000a  }\u000a  uVar4 = 0;\u000a  bVar2 = false;\u000a  do {\u000a    iVar8 = 0x2d - (uint)(byte)*ppcVar10[uVar4];\u000a    if (iVar8 == 0) {\u000a      iVar8 = -(uint)(byte)ppcVar10[uVar4][1];\u000a    }\u000a    bVar9 = true;\u000a    if (iVar8 != 0) {\u000a      bVar9 = bVar2;\u000a    }\u000a    uVar4 = uVar4 + 1;\u000a    bVar2 = bVar9;\u000a  } while (n != uVar4);\u000a  if ((bVar9) && (follow_mode == Follow_name)) {\u000a    uVar5 = dcgettext(0,"cannot follow %s by name",5);\u000a    quotearg_style((char *)0x4);\u000a    error(1,0,uVar5);\u000a  }\u000a  if (((forever != false) && (bVar9)) && (iVar8 = isatty(0), iVar8 != 0)) {\u000a    uVar5 = dcgettext(0,"warning: following standard input indefinitely is ineffective",5);\u000a    error(0,0,uVar5);\u000a  }\u000ajoined_r0x00402242:\u000a  if ((local_48 != 0) || (__fd = 0, (from_start | forever) != 0)) {\u000a    f = (File_spec *)xnmalloc(n,0x60);\u000a    f_00 = f;\u000a    uVar4 = n;\u000a    while (uVar4 != 0) {\u000a      f_00->name = *ppcVar10;\u000a      ppcVar10 = ppcVar10 + 1;\u000a      f_00 = f_00 + 1;\u000a      uVar4 = uVar4 - 1;\u000a    }\u000a    if ((local_3c == 1) || ((1 < n && (local_3c == 0)))) {\u000a      print_headers = 1;\u000a    }\u000a    if (n == 0) {\u000a      bVar12 = 0;\u000a    }\u000a    else {\u000a      bVar12 = 1;\u000a      uVar4 = n;\u000a      f_00 = f;\u000a      do {\u000a        _Var3 = tail_file(f_00,local_48);\u000a        bVar12 = bVar12 & _Var3;\u000a        f_00 = f_00 + 1;\u000a        uVar4 = uVar4 - 1;\u000a      } while (uVar4 != 0);\u000a      bVar12 = bVar12 ^ 1;\u000a    }\u000a    if ((forever != false) && (sVar6 = ignore_fifo_and_pipe(f,n), sVar6 != 0)) {\u000a      if (((disable_inotify == 0) &&\u000a          ((((_Var3 = tailable_stdin(f,n), _Var3 == false &&\u000a             (_Var3 = any_remote_file(f,n), _Var3 == false)) &&\u000a            (_Var3 = any_non_remote_file(f,n), _Var3 != false)) &&\u000a           ((_Var3 = any_symlinks(f,n), _Var3 == false &&\u000a            ((follow_mode == Follow_descriptor & bVar12) != 1)))))) && (disable_inotify == 0)) {\u000a        __fd = inotify_init();\u000a        if (-1 < (int)__fd) {\u000a          iVar8 = fflush_unlocked(stdout);\u000a          if (iVar8 != 0) {\u000a            puVar7 = (uint *)__errno_location();\u000a            uVar1 = *puVar7;\u000a            uVar5 = dcgettext(0,"write error",5);\u000a            error(1,(ulong)uVar1,uVar5);\u000a          }\u000a          _Var3 = tail_forever_inotify((File_spec *)(ulong)__fd,(size_t)f,local_38);\u000a          if (_Var3 == false) {\u000a            return 1;\u000a          }\u000a        }\u000a        puVar7 = (uint *)__errno_location();\u000a        uVar1 = *puVar7;\u000a        uVar5 = dcgettext(0,"inotify cannot be used, reverting to polling",5);\u000a        error(0,(ulong)uVar1,uVar5,uVar5);\u000a        if (n != 0) {\u000a          piVar11 = &f->parent_wd;\u000a          uVar4 = n;\u000a          do {\u000a            if (piVar11[-1] != -1) {\u000a              inotify_rm_watch(__fd,piVar11[-1]);\u000a            }\u000a            if (*piVar11 != -1) {\u000a              inotify_rm_watch(__fd,*piVar11);\u000a            }\u000a            piVar11 = piVar11 + 0x18;\u000a            uVar4 = uVar4 - 1;\u000a          } while (uVar4 != 0);\u000a        }\u000a      }\u000a      disable_inotify = 1;\u000a      tail_forever(f,n,local_38);\u000a    }\u000a    if ((have_read_stdin == 1) && (iVar8 = close(0), iVar8 < 0)) {\u000a      puVar7 = (uint *)__errno_location();\u000a      error(1,(ulong)*puVar7,&DAT_0040bf3c);\u000a    }\u000a    __fd = (uint)bVar12;\u000a  }\u000a  return (int)__fd;\u000a}\u000a\u000a
p1515
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV RBP,RSI\nMOV EBX,EDI\nMOV dword ptr [RSP + 0xc],0x0\nMOV qword ptr [RSP],0xa\nMOV RAX,0x3ff0000000000000\nMOV qword ptr [RSP + 0x10],RAX\nMOV RDI,qword ptr [RBP]\nCALL 0x004074e0\nMOV EDI,0x6\nMOV ESI,0x40bae8\nCALL 0x00401ad0\nMOV EDI,0x40be6f\nMOV ESI,0x40bca3\nCALL 0x00401830\nMOV EDI,0x40be6f\nCALL 0x00401800\nMOV EDI,0x406150\nCALL 0x0040a6a0\nMOV byte ptr [0x0061034c],0x0\nMOV byte ptr [0x0061034d],0x1\nMOV byte ptr [0x0061034e],0x0\nMOV byte ptr [0x0061034f],0x0\nMOV byte ptr [0x00610350],0x0\nMOV byte ptr [0x00610351],0x1\nMOV R14,RSP\nMOV EDI,EBX\nMOV RSI,RBP\nMOV RDX,R14\nCALL 0x004024a0\nMOVZX EAX,AL\nSUB EBX,EAX\nLEA RBP,[RBP + RAX*0x8]\nLEA RCX,[RSP + 0xc]\nLEA R8,[RSP + 0x10]\nMOV EDI,EBX\nMOV RSI,RBP\nMOV RDX,R14\nCALL 0x00402650\nCMP byte ptr [0x0061034f],0x0\nJZ 0x00402161\nMOV RAX,qword ptr [RSP]\nTEST RAX,RAX\nJZ 0x00402161\nDEC RAX\nMOV qword ptr [RSP],RAX\nMOVSXD RAX,dword ptr [0x00610310]\nCMP EBX,EAX\nJLE 0x0040217e\nSUB EBX,EAX\nLEA RBP,[RBP + RAX*0x8]\nJZ 0x00402246\nMOVSXD R12,EBX\nJMP 0x00402189\nMOV EBP,0x40b080\nMOV R12D,0x1\nXOR ECX,ECX\nXOR EAX,EAX\nNOP dword ptr [RAX]\nMOV RSI,qword ptr [RBP + RAX*0x8]\nMOVZX EDI,byte ptr [RSI]\nMOV EDX,0x2d\nSUB EDX,EDI\nJNZ 0x004021a7\nMOVZX EDX,byte ptr [RSI + 0x1]\nNEG EDX\nTEST EDX,EDX\nMOV BL,0x1\nJZ 0x004021af\nMOV EBX,ECX\nINC RAX\nCMP R12,RAX\nMOV CL,BL\nJNZ 0x00402190\nAND BL,0x1\nJZ 0x004021fe\nCMP dword ptr [0x00610278],0x1\nJNZ 0x004021fe\nXOR EDI,EDI\nMOV ESI,0x40bcbb\nMOV EDX,0x5\nCALL 0x00401840\nMOV R14,RAX\nMOV EDI,0x4\nMOV ESI,0x40bf3c\nCALL 0x004087b0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R14\nCALL 0x00401af0\nTEST BL,BL\nSETZ AL\nCMP byte ptr [0x00610350],0x0\nJZ 0x00402249\nTEST AL,AL\nJNZ 0x00402249\nXOR EDI,EDI\nCALL 0x004017d0\nTEST EAX,EAX\nJZ 0x00402249\nXOR EDI,EDI\nMOV ESI,0x40bcd4\nMOV EDX,0x5\nCALL 0x00401840\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401af0\nCMP qword ptr [RSP],0x0\nJZ 0x00402250\nJMP 0x00402264\nXOR R12D,R12D\nCMP qword ptr [RSP],0x0\nJNZ 0x00402264\nMOV CL,byte ptr [0x0061034f]\nXOR EAX,EAX\nOR CL,byte ptr [0x00610350]\nJZ 0x004023b0\nMOV ESI,0x60\nMOV RDI,R12\nCALL 0x004094b0\nMOV R14,RAX\nTEST R12,R12\nJZ 0x00402294\nMOV RAX,R12\nMOV RCX,R14\nNOP\nMOV RDX,qword ptr [RBP]\nMOV qword ptr [RCX],RDX\nADD RBP,0x8\nADD RCX,0x60\nDEC RAX\nJNZ 0x00402280\nMOV EAX,dword ptr [RSP + 0xc]\nCMP EAX,0x1\nJZ 0x004022a7\nCMP R12,0x2\nJC 0x004022ae\nTEST EAX,EAX\nJNZ 0x004022ae\nMOV byte ptr [0x0061034e],0x1\nTEST R12,R12\nJZ 0x004022ea\nMOV R13B,0x1\nMOV RBX,R12\nMOV RBP,R14\nNOP dword ptr [RAX]\nMOV RSI,qword ptr [RSP]\nMOV RDI,RBP\nCALL 0x00402a40\nAND R13B,AL\nADD RBP,0x60\nDEC RBX\nJNZ 0x004022c0\nXOR R13B,0x1\nCMP byte ptr [0x00610350],0x0\nJNZ 0x004022fa\nJMP 0x00402380\nXOR R13D,R13D\nCMP byte ptr [0x00610350],0x0\nJZ 0x00402380\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00402d00\nTEST RAX,RAX\nJZ 0x00402380\nMOV AL,byte ptr [0x00610352]\nTEST AL,AL\nJNZ 0x00402368\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00402d60\nTEST AL,AL\nJNZ 0x00402361\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00402db0\nTEST AL,AL\nJNZ 0x00402361\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00402de0\nTEST AL,AL\nJZ 0x00402361\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00402e10\nTEST AL,AL\nJNZ 0x00402361\nCMP dword ptr [0x00610278],0x2\nSETZ AL\nAND AL,R13B\nCMP AL,0x1\nJNZ 0x004023bf\nMOV byte ptr [0x00610352],0x1\nMOV byte ptr [0x00610352],0x1\nMOVSD XMM0,qword ptr [RSP + 0x10]\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00403850\nCMP byte ptr [0x0061034c],0x1\nJNZ 0x004023ac\nXOR EDI,EDI\nCALL 0x00401930\nTEST EAX,EAX\nJNS 0x004023ac\nCALL 0x00401770\nMOV ESI,dword ptr [RAX]\nMOV EDI,0x1\nMOV EDX,0x40bf3c\nXOR EAX,EAX\nCALL 0x00401af0\nMOVZX EAX,R13B\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV AL,byte ptr [0x00610352]\nTEST AL,AL\nJNZ 0x00402368\nCALL 0x004019e0\nMOV EBX,EAX\nTEST EBX,EBX\nJS 0x00402430\nMOV RDI,qword ptr [0x00610308]\nCALL 0x00401b90\nTEST EAX,EAX\nJZ 0x00402412\nCALL 0x00401770\nMOV R15D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40bd12\nMOV EDX,0x5\nCALL 0x00401840\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,RCX\nCALL 0x00401af0\nMOVSD XMM0,qword ptr [RSP + 0x10]\nMOV EDI,EBX\nMOV RSI,R14\nMOV RDX,R12\nCALL 0x00402e80\nMOV ECX,EAX\nMOV EAX,0x1\nTEST CL,CL\nJZ 0x004023b0\nCALL 0x00401770\nMOV R15D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40bd1e\nMOV EDX,0x5\nCALL 0x00401840\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,RCX\nCALL 0x00401af0\nTEST R12,R12\nJZ 0x00402368\nMOV RBP,R14\nADD RBP,0x48\nMOV R15,R12\nMOV ESI,dword ptr [RBP + -0x4]\nCMP ESI,-0x1\nJZ 0x0040247d\nMOV EDI,EBX\nCALL 0x00401bc0\nMOV ESI,dword ptr [RBP]\nCMP ESI,-0x1\nJZ 0x0040248c\nMOV EDI,EBX\nCALL 0x00401bc0\nADD RBP,0x60\nDEC R15\nJNZ 0x0040246e\nJMP 0x00402368\n'
p1516
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n48 89 f5\n89 fb\nc7 44 24 0c 00 00 00 00\n48 c7 04 24 0a 00 00 00\n48 b8 00 00 00 00 00 00 f0 3f\n48 89 44 24 10\n48 8b 7d 00\ne8 25 54 00 00\nbf 06 00 00 00\nbe e8 ba 40 00\ne8 06 fa ff ff\nbf 6f be 40 00\nbe a3 bc 40 00\ne8 57 f7 ff ff\nbf 6f be 40 00\ne8 1d f7 ff ff\nbf 50 61 40 00\ne8 b3 85 00 00\nc6 05 58 e2 20 00 00\nc6 05 52 e2 20 00 01\nc6 05 4c e2 20 00 00\nc6 05 46 e2 20 00 00\nc6 05 40 e2 20 00 00\nc6 05 3a e2 20 00 01\n49 89 e6\n89 df\n48 89 ee\n4c 89 f2\ne8 79 03 00 00\n0f b6 c0\n29 c3\n48 8d 6c c5 00\n48 8d 4c 24 0c\n4c 8d 44 24 10\n89 df\n48 89 ee\n4c 89 f2\ne8 08 05 00 00\n80 3d 00 e2 20 00 00\n74 10\n48 8b 04 24\n48 85 c0\n74 07\n48 ff c8\n48 89 04 24\n48 63 05 a8 e1 20 00\n39 c3\n7e 12\n29 c3\n48 8d 6c c5 00\n0f 84 cd 00 00 00\n4c 63 e3\neb 0b\nbd 80 b0 40 00\n41 bc 01 00 00 00\n31 c9\n31 c0\n0f 1f 00\n48 8b 74 c5 00\n0f b6 3e\nba 2d 00 00 00\n29 fa\n75 06\n0f b6 56 01\nf7 da\n85 d2\nb3 01\n74 02\n89 cb\n48 ff c0\n49 39 c4\n88 d9\n75 d7\n80 e3 01\n74 40\n83 3d b3 e0 20 00 01\n75 37\n31 ff\nbe bb bc 40 00\nba 05 00 00 00\ne8 68 f6 ff ff\n49 89 c6\nbf 04 00 00 00\nbe 3c bf 40 00\ne8 c6 65 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n4c 89 f2\ne8 f2 f8 ff ff\n84 db\n0f 94 c0\n80 3d 46 e1 20 00 00\n74 3d\n84 c0\n75 39\n31 ff\ne8 b9 f5 ff ff\n85 c0\n74 2e\n31 ff\nbe d4 bc 40 00\nba 05 00 00 00\ne8 14 f6 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 b3 f8 ff ff\n48 83 3c 24 00\n74 0c\neb 1e\n45 31 e4\n48 83 3c 24 00\n75 14\n8a 0d f9 e0 20 00\n31 c0\n0a 0d f2 e0 20 00\n0f 84 4c 01 00 00\nbe 60 00 00 00\n4c 89 e7\ne8 3f 72 00 00\n49 89 c6\n4d 85 e4\n74 1b\n4c 89 e0\n4c 89 f1\n90\n48 8b 55 00\n48 89 11\n48 83 c5 08\n48 83 c1 60\n48 ff c8\n75 ec\n8b 44 24 0c\n83 f8 01\n74 0a\n49 83 fc 02\n72 0b\n85 c0\n75 07\nc6 05 a0 e0 20 00 01\n4d 85 e4\n74 37\n41 b5 01\n4c 89 e3\n4c 89 f5\n0f 1f 40 00\n48 8b 34 24\n48 89 ef\ne8 74 07 00 00\n41 20 c5\n48 83 c5 60\n48 ff cb\n75 e8\n41 80 f5 01\n80 3d 6d e0 20 00 00\n75 15\ne9 96 00 00 00\n45 31 ed\n80 3d 5c e0 20 00 00\n0f 84 86 00 00 00\n4c 89 f7\n4c 89 e6\ne8 fb 09 00 00\n48 85 c0\n74 76\n8a 05 42 e0 20 00\n84 c0\n75 54\n4c 89 f7\n4c 89 e6\ne8 41 0a 00 00\n84 c0\n75 3e\n4c 89 f7\n4c 89 e6\ne8 82 0a 00 00\n84 c0\n75 2f\n4c 89 f7\n4c 89 e6\ne8 a3 0a 00 00\n84 c0\n74 20\n4c 89 f7\n4c 89 e6\ne8 c4 0a 00 00\n84 c0\n75 11\n83 3d 21 df 20 00 02\n0f 94 c0\n44 20 e8\n3c 01\n75 5e\nc6 05 ea df 20 00 01\nc6 05 e3 df 20 00 01\nf2 0f 10 44 24 10\n4c 89 f7\n4c 89 e6\ne8 d0 14 00 00\n80 3d c5 df 20 00 01\n75 23\n31 ff\ne8 a0 f5 ff ff\n85 c0\n79 18\ne8 d7 f3 ff ff\n8b 30\nbf 01 00 00 00\nba 3c bf 40 00\n31 c0\ne8 44 f7 ff ff\n41 0f b6 c5\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n8a 05 8d df 20 00\n84 c0\n75 9f\ne8 12 f6 ff ff\n89 c3\n85 db\n78 5c\n48 8b 3d 2d df 20 00\ne8 b0 f7 ff ff\n85 c0\n74 2e\ne8 87 f3 ff ff\n44 8b 38\n31 ff\nbe 12 bd 40 00\nba 05 00 00 00\ne8 43 f4 ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n44 89 fe\n48 89 ca\ne8 de f6 ff ff\nf2 0f 10 44 24 10\n89 df\n4c 89 f6\n4c 89 e2\ne8 5b 0a 00 00\n89 c1\nb8 01 00 00 00\n84 c9\n74 80\ne8 3b f3 ff ff\n44 8b 38\n31 ff\nbe 1e bd 40 00\nba 05 00 00 00\ne8 f7 f3 ff ff\n48 89 c1\n31 ff\n31 c0\n44 89 fe\n48 89 ca\ne8 95 f6 ff ff\n4d 85 e4\n0f 84 04 ff ff ff\n4c 89 f5\n48 83 c5 48\n4d 89 e7\n8b 75 fc\n83 fe ff\n74 07\n89 df\ne8 43 f7 ff ff\n8b 75 00\n83 fe ff\n74 07\n89 df\ne8 34 f7 ff ff\n48 83 c5 60\n49 ff cf\n75 d9\ne9 ce fe ff ff\n'
p1517
S'.text:0000000000402080\n.text:0000000000402081\n.text:0000000000402083\n.text:0000000000402085\n.text:0000000000402087\n.text:0000000000402089\n.text:000000000040208a\n.text:000000000040208e\n.text:0000000000402091\n.text:0000000000402093\n.text:000000000040209b\n.text:00000000004020a3\n.text:00000000004020ad\n.text:00000000004020b2\n.text:00000000004020b6\n.text:00000000004020bb\n.text:00000000004020c0\n.text:00000000004020c5\n.text:00000000004020ca\n.text:00000000004020cf\n.text:00000000004020d4\n.text:00000000004020d9\n.text:00000000004020de\n.text:00000000004020e3\n.text:00000000004020e8\n.text:00000000004020ed\n.text:00000000004020f4\n.text:00000000004020fb\n.text:0000000000402102\n.text:0000000000402109\n.text:0000000000402110\n.text:0000000000402117\n.text:000000000040211a\n.text:000000000040211c\n.text:000000000040211f\n.text:0000000000402122\n.text:0000000000402127\n.text:000000000040212a\n.text:000000000040212c\n.text:0000000000402131\n.text:0000000000402136\n.text:000000000040213b\n.text:000000000040213d\n.text:0000000000402140\n.text:0000000000402143\n.text:0000000000402148\n.text:000000000040214f\n.text:0000000000402151\n.text:0000000000402155\n.text:0000000000402158\n.text:000000000040215a\n.text:000000000040215d\n.text:0000000000402161\n.text:0000000000402168\n.text:000000000040216a\n.text:000000000040216c\n.text:000000000040216e\n.text:0000000000402173\n.text:0000000000402179\n.text:000000000040217c\n.text:000000000040217e\n.text:0000000000402183\n.text:0000000000402189\n.text:000000000040218b\n.text:000000000040218d\n.text:0000000000402190\n.text:0000000000402195\n.text:0000000000402198\n.text:000000000040219d\n.text:000000000040219f\n.text:00000000004021a1\n.text:00000000004021a5\n.text:00000000004021a7\n.text:00000000004021a9\n.text:00000000004021ab\n.text:00000000004021ad\n.text:00000000004021af\n.text:00000000004021b2\n.text:00000000004021b5\n.text:00000000004021b7\n.text:00000000004021b9\n.text:00000000004021bc\n.text:00000000004021be\n.text:00000000004021c5\n.text:00000000004021c7\n.text:00000000004021c9\n.text:00000000004021ce\n.text:00000000004021d3\n.text:00000000004021d8\n.text:00000000004021db\n.text:00000000004021e0\n.text:00000000004021e5\n.text:00000000004021ea\n.text:00000000004021ed\n.text:00000000004021f2\n.text:00000000004021f4\n.text:00000000004021f6\n.text:00000000004021f9\n.text:00000000004021fe\n.text:0000000000402200\n.text:0000000000402203\n.text:000000000040220a\n.text:000000000040220c\n.text:000000000040220e\n.text:0000000000402210\n.text:0000000000402212\n.text:0000000000402217\n.text:0000000000402219\n.text:000000000040221b\n.text:000000000040221d\n.text:0000000000402222\n.text:0000000000402227\n.text:000000000040222c\n.text:000000000040222f\n.text:0000000000402231\n.text:0000000000402233\n.text:0000000000402235\n.text:0000000000402238\n.text:000000000040223d\n.text:0000000000402242\n.text:0000000000402244\n.text:0000000000402246\n.text:0000000000402249\n.text:000000000040224e\n.text:0000000000402250\n.text:0000000000402256\n.text:0000000000402258\n.text:000000000040225e\n.text:0000000000402264\n.text:0000000000402269\n.text:000000000040226c\n.text:0000000000402271\n.text:0000000000402274\n.text:0000000000402277\n.text:0000000000402279\n.text:000000000040227c\n.text:000000000040227f\n.text:0000000000402280\n.text:0000000000402284\n.text:0000000000402287\n.text:000000000040228b\n.text:000000000040228f\n.text:0000000000402292\n.text:0000000000402294\n.text:0000000000402298\n.text:000000000040229b\n.text:000000000040229d\n.text:00000000004022a1\n.text:00000000004022a3\n.text:00000000004022a5\n.text:00000000004022a7\n.text:00000000004022ae\n.text:00000000004022b1\n.text:00000000004022b3\n.text:00000000004022b6\n.text:00000000004022b9\n.text:00000000004022bc\n.text:00000000004022c0\n.text:00000000004022c4\n.text:00000000004022c7\n.text:00000000004022cc\n.text:00000000004022cf\n.text:00000000004022d3\n.text:00000000004022d6\n.text:00000000004022d8\n.text:00000000004022dc\n.text:00000000004022e3\n.text:00000000004022e5\n.text:00000000004022ea\n.text:00000000004022ed\n.text:00000000004022f4\n.text:00000000004022fa\n.text:00000000004022fd\n.text:0000000000402300\n.text:0000000000402305\n.text:0000000000402308\n.text:000000000040230a\n.text:0000000000402310\n.text:0000000000402312\n.text:0000000000402314\n.text:0000000000402317\n.text:000000000040231a\n.text:000000000040231f\n.text:0000000000402321\n.text:0000000000402323\n.text:0000000000402326\n.text:0000000000402329\n.text:000000000040232e\n.text:0000000000402330\n.text:0000000000402332\n.text:0000000000402335\n.text:0000000000402338\n.text:000000000040233d\n.text:000000000040233f\n.text:0000000000402341\n.text:0000000000402344\n.text:0000000000402347\n.text:000000000040234c\n.text:000000000040234e\n.text:0000000000402350\n.text:0000000000402357\n.text:000000000040235a\n.text:000000000040235d\n.text:000000000040235f\n.text:0000000000402361\n.text:0000000000402368\n.text:000000000040236f\n.text:0000000000402375\n.text:0000000000402378\n.text:000000000040237b\n.text:0000000000402380\n.text:0000000000402387\n.text:0000000000402389\n.text:000000000040238b\n.text:0000000000402390\n.text:0000000000402392\n.text:0000000000402394\n.text:0000000000402399\n.text:000000000040239b\n.text:00000000004023a0\n.text:00000000004023a5\n.text:00000000004023a7\n.text:00000000004023ac\n.text:00000000004023b0\n.text:00000000004023b4\n.text:00000000004023b5\n.text:00000000004023b7\n.text:00000000004023b9\n.text:00000000004023bb\n.text:00000000004023bd\n.text:00000000004023be\n.text:00000000004023bf\n.text:00000000004023c5\n.text:00000000004023c7\n.text:00000000004023c9\n.text:00000000004023ce\n.text:00000000004023d0\n.text:00000000004023d2\n.text:00000000004023d4\n.text:00000000004023db\n.text:00000000004023e0\n.text:00000000004023e2\n.text:00000000004023e4\n.text:00000000004023e9\n.text:00000000004023ec\n.text:00000000004023ee\n.text:00000000004023f3\n.text:00000000004023f8\n.text:00000000004023fd\n.text:0000000000402400\n.text:0000000000402405\n.text:0000000000402407\n.text:000000000040240a\n.text:000000000040240d\n.text:0000000000402412\n.text:0000000000402418\n.text:000000000040241a\n.text:000000000040241d\n.text:0000000000402420\n.text:0000000000402425\n.text:0000000000402427\n.text:000000000040242c\n.text:000000000040242e\n.text:0000000000402430\n.text:0000000000402435\n.text:0000000000402438\n.text:000000000040243a\n.text:000000000040243f\n.text:0000000000402444\n.text:0000000000402449\n.text:000000000040244c\n.text:000000000040244e\n.text:0000000000402450\n.text:0000000000402453\n.text:0000000000402456\n.text:000000000040245b\n.text:000000000040245e\n.text:0000000000402464\n.text:0000000000402467\n.text:000000000040246b\n.text:000000000040246e\n.text:0000000000402471\n.text:0000000000402474\n.text:0000000000402476\n.text:0000000000402478\n.text:000000000040247d\n.text:0000000000402480\n.text:0000000000402483\n.text:0000000000402485\n.text:0000000000402487\n.text:000000000040248c\n.text:0000000000402490\n.text:0000000000402493\n.text:0000000000402495\n'
p1518
tp1519
sS'xcharalloc'
p1520
(S'\n__stdcall xcharalloc(size_t n)\n'
p1521
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p1522
S'JMP 0x004094d0\n'
p1523
S'e9 2b ff ff ff\n'
p1524
S'.text:00000000004095a0\n'
p1525
tp1526
sS'c_isupper'
p1527
(S'\n__stdcall c_isupper()\n'
p1528
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p1529
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1530
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p1531
S'.text:000000000040a020\n.text:000000000040a023\n.text:000000000040a026\n.text:000000000040a029\n'
p1532
tp1533
sS'isatty'
p1534
(S'\n__stdcall isatty(int __fd)\n'
p1535
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint isatty(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_isatty_00610060)();\u000a  return iVar1;\u000a}\u000a\u000a
p1536
S'JMP qword ptr [0x00610060]\n'
p1537
S'ff 25 8a e8 20 00\n'
p1538
S'.plt:00000000004017d0\n'
p1539
tp1540
sS'allocate_entry'
p1541
(S'\n__stdcall allocate_entry(Hash_table * table)\n'
p1542
V\u000ahash_entry * allocate_entry(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  \u000a  phVar1 = table->free_entry_list;\u000a  if (phVar1 != (hash_entry *)0x0) {\u000a    table->free_entry_list = phVar1->next;\u000a    return phVar1;\u000a  }\u000a  phVar1 = (hash_entry *)malloc(0x10);\u000a  return phVar1;\u000a}\u000a\u000a
p1543
S'MOV RAX,qword ptr [RDI + 0x48]\nTEST RAX,RAX\nJZ 0x004070f2\nMOV RCX,qword ptr [RAX + 0x8]\nMOV qword ptr [RDI + 0x48],RCX\nRET\nPUSH RAX\nMOV EDI,0x10\nCALL 0x00401a30\nADD RSP,0x8\nRET\n'
p1544
S'48 8b 47 48\n48 85 c0\n74 09\n48 8b 48 08\n48 89 4f 48\nc3\n50\nbf 10 00 00 00\ne8 33 a9 ff ff\n48 83 c4 08\nc3\n'
p1545
S'.text:00000000004070e0\n.text:00000000004070e4\n.text:00000000004070e7\n.text:00000000004070e9\n.text:00000000004070ed\n.text:00000000004070f1\n.text:00000000004070f2\n.text:00000000004070f3\n.text:00000000004070f8\n.text:00000000004070fd\n.text:0000000000407101\n'
p1546
tp1547
sS'c_isalnum'
p1548
(S'\n__stdcall c_isalnum()\n'
p1549
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1550
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x00409f3b\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x00409f3b\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x00409f3a\nXOR EAX,EAX\nRET\n'
p1551
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p1552
S'.text:0000000000409f20\n.text:0000000000409f22\n.text:0000000000409f25\n.text:0000000000409f28\n.text:0000000000409f2a\n.text:0000000000409f34\n.text:0000000000409f38\n.text:0000000000409f3a\n.text:0000000000409f3b\n.text:0000000000409f3e\n.text:0000000000409f41\n.text:0000000000409f43\n.text:0000000000409f45\n'
p1553
tp1554
sS'timespec_sign'
p1555
(S'\n__stdcall timespec_sign()\n'
p1556
V\u000aint timespec_sign(void)\u000a\u000a{\u000a  uint uVar1;\u000a  ulong in_RSI;\u000a  ulong in_RDI;\u000a  \u000a  uVar1 = 0xffffffff;\u000a  if (-1 < (long)in_RDI) {\u000a    uVar1 = (uint)((in_RSI | in_RDI) != 0);\u000a  }\u000a  return (int)uVar1;\u000a}\u000a\u000a
p1557
S'XOR ECX,ECX\nOR RSI,RDI\nSETNZ CL\nTEST RDI,RDI\nMOV EAX,0xffffffff\nCMOVNS EAX,ECX\nRET\n'
p1558
S'31 c9\n48 09 fe\n0f 95 c1\n48 85 ff\nb8 ff ff ff ff\n0f 49 c1\nc3\n'
p1559
S'.text:0000000000408f20\n.text:0000000000408f22\n.text:0000000000408f25\n.text:0000000000408f28\n.text:0000000000408f2b\n.text:0000000000408f30\n.text:0000000000408f33\n'
p1560
tp1561
sS'inotify_rm_watch'
p1562
(S'\n__stdcall inotify_rm_watch(int __fd, int __wd)\n'
p1563
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint inotify_rm_watch(int __fd,int __wd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_inotify_rm_watch_00610258)();\u000a  return iVar1;\u000a}\u000a\u000a
p1564
S'JMP qword ptr [0x00610258]\n'
p1565
S'ff 25 92 e6 20 00\n'
p1566
S'.plt:0000000000401bc0\n'
p1567
tp1568
sS'__errno_location'
p1569
(S'\n__stdcall __errno_location()\n'
p1570
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_00610030)();\u000a  return piVar1;\u000a}\u000a\u000a
p1571
S'JMP qword ptr [0x00610030]\n'
p1572
S'ff 25 ba e8 20 00\n'
p1573
S'.plt:0000000000401770\n'
p1574
tp1575
sS'x2nrealloc'
p1576
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p1577
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p1578
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x0040956c\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00409599\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x0040958a\nTEST RCX,RCX\nJNZ 0x0040958a\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00409510\nPUSH RAX\nCALL 0x00409660\n'
p1579
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p1580
S'.text:0000000000409540\n.text:0000000000409543\n.text:0000000000409546\n.text:0000000000409549\n.text:000000000040954b\n.text:0000000000409555\n.text:0000000000409557\n.text:000000000040955a\n.text:000000000040955d\n.text:000000000040955f\n.text:0000000000409562\n.text:0000000000409565\n.text:000000000040956a\n.text:000000000040956c\n.text:000000000040956f\n.text:0000000000409571\n.text:0000000000409576\n.text:0000000000409578\n.text:000000000040957b\n.text:000000000040957d\n.text:0000000000409584\n.text:0000000000409587\n.text:000000000040958a\n.text:000000000040958d\n.text:0000000000409591\n.text:0000000000409594\n.text:0000000000409599\n.text:000000000040959a\n'
p1581
tp1582
sS'safe_read'
p1583
(S'\n__stdcall safe_read(void * buf, size_t count)\n'
p1584
V\u000asize_t safe_read(void *buf,size_t count)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  size_t sVar3;\u000a  int *piVar4;\u000a  ulong __nbytes;\u000a  size_t unaff_R14;\u000a  \u000a  while( true ) {\u000a    do {\u000a      sVar3 = read((int)buf,(void *)count,__nbytes);\u000a      if (-1 < (long)sVar3) {\u000a        return sVar3;\u000a      }\u000a      piVar4 = __errno_location();\u000a      iVar1 = *piVar4;\u000a    } while (iVar1 == 4);\u000a    uVar2 = __nbytes;\u000a    if (0x7fffe000 < __nbytes && iVar1 == 0x16) {\u000a      sVar3 = unaff_R14;\u000a      uVar2 = 0x7fffe000;\u000a    }\u000a    if (__nbytes < 0x7fffe001) break;\u000a    __nbytes = uVar2;\u000a    unaff_R14 = sVar3;\u000a    if (iVar1 != 0x16) {\u000a      return sVar3;\u000a    }\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p1585
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV R15,RSI\nMOV R12D,EDI\nMOV R13D,0x7fffe000\nNOP word ptr [RAX + RAX*0x1]\nMOV EDI,R12D\nMOV RSI,R15\nMOV RDX,RBX\nCALL 0x00401950\nMOV RBP,RAX\nTEST RBP,RBP\nJNS 0x00408e54\nCALL 0x00401770\nMOV EAX,dword ptr [RAX]\nCMP EAX,0x4\nJZ 0x00408e00\nCMP EAX,0x16\nSETZ CL\nCMP RBX,0x7fffe000\nSETA DL\nAND DL,CL\nMOV RCX,RBX\nCMOVNZ RCX,R13\nTEST DL,DL\nCMOVZ R14,RBP\nCMP RBX,0x7fffe001\nJC 0x00408e57\nCMP EAX,0x16\nMOV RBX,RCX\nJZ 0x00408e00\nJMP 0x00408e57\nMOV R14,RBP\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1586
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n48 89 d3\n49 89 f7\n41 89 fc\n41 bd 00 e0 ff 7f\n66 0f 1f 44 00 00\n44 89 e7\n4c 89 fe\n48 89 da\ne8 42 8b ff ff\n48 89 c5\n48 85 ed\n79 3e\ne8 55 89 ff ff\n8b 00\n83 f8 04\n74 de\n83 f8 16\n0f 94 c1\n48 81 fb 00 e0 ff 7f\n0f 97 c2\n20 ca\n48 89 d9\n49 0f 45 cd\n84 d2\n4c 0f 44 f5\n48 81 fb 01 e0 ff 7f\n72 0d\n83 f8 16\n48 89 cb\n74 ae\neb 03\n49 89 ee\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1587
S'.text:0000000000408de0\n.text:0000000000408de1\n.text:0000000000408de3\n.text:0000000000408de5\n.text:0000000000408de7\n.text:0000000000408de9\n.text:0000000000408dea\n.text:0000000000408deb\n.text:0000000000408dee\n.text:0000000000408df1\n.text:0000000000408df4\n.text:0000000000408dfa\n.text:0000000000408e00\n.text:0000000000408e03\n.text:0000000000408e06\n.text:0000000000408e09\n.text:0000000000408e0e\n.text:0000000000408e11\n.text:0000000000408e14\n.text:0000000000408e16\n.text:0000000000408e1b\n.text:0000000000408e1d\n.text:0000000000408e20\n.text:0000000000408e22\n.text:0000000000408e25\n.text:0000000000408e28\n.text:0000000000408e2f\n.text:0000000000408e32\n.text:0000000000408e34\n.text:0000000000408e37\n.text:0000000000408e3b\n.text:0000000000408e3d\n.text:0000000000408e41\n.text:0000000000408e48\n.text:0000000000408e4a\n.text:0000000000408e4d\n.text:0000000000408e50\n.text:0000000000408e52\n.text:0000000000408e54\n.text:0000000000408e57\n.text:0000000000408e5a\n.text:0000000000408e5e\n.text:0000000000408e5f\n.text:0000000000408e61\n.text:0000000000408e63\n.text:0000000000408e65\n.text:0000000000408e67\n.text:0000000000408e68\n'
p1588
tp1589
sS'quotearg_n_options'
p1590
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p1591
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p1592
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401770\nTEST R12D,R12D\nJS 0x00408691\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x006102a0]\nCMP dword ptr [0x006102a8],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x004085ab\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x6102b0\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00409510\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x006102a0],R15\nJNZ 0x00408572\nMOVUPS XMM0,xmmword ptr [0x006102b0]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x006102a8]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00401910\nMOV dword ptr [0x006102a8],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00407700\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x0040860d\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x0040867b\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x6103c0\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00408638\nCALL 0x00401750\nMOV RDI,R15\nCALL 0x004095a0\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00407700\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401760\n'
p1593
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 71 92 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 86 7d 20 00\n44 39 25 87 7d 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd b0 02 61 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 b8 0f 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 3b 7d 20 00\n75 0b\n0f 10 05 42 7d 20 00\n41 0f 11 07\n8b 05 30 7d 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 7d 93 ff ff\n89 1d 0f 7d 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 c0 03 61 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 18 91 ff ff\n4c 89 ff\ne8 60 0f 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 ca 90 ff ff\n'
p1594
S'.text:00000000004084e0\n.text:00000000004084e1\n.text:00000000004084e3\n.text:00000000004084e5\n.text:00000000004084e7\n.text:00000000004084e9\n.text:00000000004084ea\n.text:00000000004084ee\n.text:00000000004084f1\n.text:00000000004084f4\n.text:00000000004084f7\n.text:00000000004084fa\n.text:00000000004084ff\n.text:0000000000408502\n.text:0000000000408508\n.text:000000000040850d\n.text:000000000040850f\n.text:0000000000408513\n.text:000000000040851a\n.text:0000000000408521\n.text:0000000000408526\n.text:000000000040852b\n.text:0000000000408530\n.text:0000000000408532\n.text:0000000000408537\n.text:000000000040853a\n.text:000000000040853d\n.text:0000000000408543\n.text:0000000000408545\n.text:0000000000408548\n.text:000000000040854c\n.text:000000000040854f\n.text:0000000000408553\n.text:0000000000408558\n.text:000000000040855b\n.text:000000000040855e\n.text:0000000000408565\n.text:0000000000408567\n.text:000000000040856e\n.text:0000000000408572\n.text:0000000000408578\n.text:000000000040857b\n.text:000000000040857f\n.text:0000000000408582\n.text:0000000000408585\n.text:0000000000408589\n.text:000000000040858b\n.text:000000000040858e\n.text:0000000000408593\n.text:0000000000408599\n.text:000000000040859c\n.text:00000000004085a1\n.text:00000000004085a6\n.text:00000000004085ab\n.text:00000000004085ae\n.text:00000000004085b2\n.text:00000000004085b6\n.text:00000000004085bb\n.text:00000000004085bf\n.text:00000000004085c3\n.text:00000000004085c7\n.text:00000000004085cb\n.text:00000000004085cf\n.text:00000000004085d4\n.text:00000000004085d7\n.text:00000000004085da\n.text:00000000004085dd\n.text:00000000004085e2\n.text:00000000004085e5\n.text:00000000004085e8\n.text:00000000004085eb\n.text:00000000004085ec\n.text:00000000004085f1\n.text:00000000004085f5\n.text:00000000004085f8\n.text:00000000004085fb\n.text:00000000004085fd\n.text:0000000000408602\n.text:0000000000408606\n.text:000000000040860b\n.text:000000000040860d\n.text:0000000000408611\n.text:0000000000408616\n.text:0000000000408619\n.text:000000000040861c\n.text:0000000000408621\n.text:0000000000408626\n.text:0000000000408629\n.text:000000000040862e\n.text:0000000000408631\n.text:0000000000408633\n.text:0000000000408638\n.text:000000000040863b\n.text:0000000000408640\n.text:0000000000408643\n.text:0000000000408646\n.text:000000000040864b\n.text:000000000040864e\n.text:0000000000408652\n.text:0000000000408655\n.text:0000000000408658\n.text:000000000040865d\n.text:0000000000408662\n.text:0000000000408667\n.text:000000000040866a\n.text:000000000040866d\n.text:000000000040866e\n.text:0000000000408673\n.text:0000000000408677\n.text:000000000040867b\n.text:000000000040867f\n.text:0000000000408682\n.text:0000000000408686\n.text:0000000000408687\n.text:0000000000408689\n.text:000000000040868b\n.text:000000000040868d\n.text:000000000040868f\n.text:0000000000408690\n.text:0000000000408691\n'
p1595
tp1596
sS'strcmp'
p1597
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p1598
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_00610148)();\u000a  return iVar1;\u000a}\u000a\u000a
p1599
S'JMP qword ptr [0x00610148]\n'
p1600
S'ff 25 a2 e7 20 00\n'
p1601
S'.plt:00000000004019a0\n'
p1602
tp1603
sS'tail_lines'
p1604
(S'\n__stdcall tail_lines(char * pretty_filename, uintmax_t n_lines, uintmax_t * read_pos)\n'
p1605
V\u000a_Bool tail_lines(char *pretty_filename,uintmax_t n_lines,uintmax_t *read_pos)\u000a\u000a{\u000a  uint uVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  uint *puVar4;\u000a  undefined8 uVar5;\u000a  char *filename;\u000a  uintmax_t *read_pos_00;\u000a  uintmax_t uVar6;\u000a  uintmax_t **in_RCX;\u000a  ulong n_lines_00;\u000a  int __fd;\u000a  stat stats;\u000a  stat local_c0;\u000a  \u000a  n_lines_00 = n_lines & 0xffffffff;\u000a  __fd = (int)n_lines_00;\u000a  iVar3 = fstat(__fd,&local_c0);\u000a  if (iVar3 == 0) {\u000a    if (from_start == false) {\u000a      if (((presume_input_pipe == 0) && ((local_c0.st_mode & 0xf000) == 0x8000)) &&\u000a         (filename = (char *)lseek(__fd,0,1), filename != (char *)0xffffffffffffffff)) {\u000a        read_pos_00 = (uintmax_t *)lseek(__fd,0,2);\u000a        if ((long)filename < (long)read_pos_00) {\u000a          *in_RCX = read_pos_00;\u000a          if (read_pos_00 == (uintmax_t *)0x0) {\u000a            return true;\u000a          }\u000a          _Var2 = file_lines(pretty_filename,n_lines_00,(off_t)read_pos,(off_t)filename,read_pos_00)\u000a          ;\u000a          if (_Var2 != false) {\u000a            return true;\u000a          }\u000a          return false;\u000a        }\u000a        xlseek(n_lines_00,filename);\u000a      }\u000a      _Var2 = pipe_lines(pretty_filename,n_lines_00,read_pos);\u000a    }\u000a    else {\u000a      iVar3 = start_lines(pretty_filename,n_lines_00,read_pos);\u000a      if (iVar3 == 0) {\u000a        uVar6 = dump_remainder(pretty_filename,n_lines_00);\u000a        *in_RCX = (uintmax_t *)((long)*in_RCX + uVar6);\u000a        _Var2 = true;\u000a      }\u000a      else {\u000a        _Var2 = SUB41((uint)iVar3 >> 0x1f,0);\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar1 = *puVar4;\u000a    _Var2 = false;\u000a    uVar5 = dcgettext(0,"cannot fstat %s",5);\u000a    filename = quotearg_style((char *)0x4);\u000a    error(0,(ulong)uVar1,uVar5,filename);\u000a  }\u000a  return _Var2;\u000a}\u000a\u000a
p1606
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R14,RCX\nMOV R15,RDX\nMOV EBP,ESI\nMOV R12,RDI\nLEA RSI,[RSP + 0x8]\nMOV EDI,EBP\nCALL 0x0040a6e0\nTEST EAX,EAX\nJZ 0x00403fbd\nCALL 0x00401770\nMOV R14D,dword ptr [RAX]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x40c271\nMOV EDX,0x5\nCALL 0x00401840\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,R12\nCALL 0x004087b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,RBP\nCALL 0x00401af0\nMOV EAX,EBX\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP byte ptr [0x0061034f],0x0\nJZ 0x00403fe5\nMOV RDI,R12\nMOV ESI,EBP\nMOV RDX,R15\nMOV RCX,R14\nCALL 0x00404260\nMOV EBX,EAX\nTEST EBX,EBX\nJZ 0x00404064\nSHR EBX,0x1f\nJMP 0x00403fa9\nMOV AL,byte ptr [0x00610358]\nTEST AL,AL\nJNZ 0x0040408e\nMOV EAX,0xf000\nAND EAX,dword ptr [RSP + 0x20]\nCMP EAX,0x8000\nJNZ 0x0040408e\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EBP\nCALL 0x004018f0\nMOV R13,RAX\nCMP R13,-0x1\nJZ 0x0040408e\nXOR ESI,ESI\nMOV EDX,0x2\nMOV EDI,EBP\nCALL 0x004018f0\nCMP R13,RAX\nJGE 0x0040407f\nMOV qword ptr [R14],RAX\nMOV BL,0x1\nTEST RAX,RAX\nJZ 0x00403fa9\nMOV RDI,R12\nMOV ESI,EBP\nMOV RDX,R15\nMOV RCX,R13\nMOV R8,RAX\nMOV R9,R14\nCALL 0x00404450\nTEST AL,AL\nJNZ 0x00403fa9\nXOR EBX,EBX\nJMP 0x00403fa9\nMOV RDX,-0x1\nMOV RDI,R12\nMOV ESI,EBP\nCALL 0x00404370\nADD qword ptr [R14],RAX\nMOV BL,0x1\nJMP 0x00403fa9\nXOR EDX,EDX\nMOV EDI,EBP\nMOV RSI,R13\nMOV RCX,R12\nCALL 0x00404720\nMOV RDI,R12\nMOV ESI,EBP\nMOV RDX,R15\nMOV RCX,R14\nCALL 0x004047d0\nMOV BL,AL\nJMP 0x00403fa9\n'
p1607
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n49 89 ce\n49 89 d7\n89 f5\n49 89 fc\n48 8d 74 24 08\n89 ef\ne8 78 67 00 00\n85 c0\n74 51\ne8 ff d7 ff ff\n44 8b 30\n31 db\n31 ff\nbe 71 c2 40 00\nba 05 00 00 00\ne8 b9 d8 ff ff\n48 89 c5\nbf 04 00 00 00\n4c 89 e6\ne8 19 48 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 f6\n48 89 ea\ne8 47 db ff ff\n89 d8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n80 3d 8b c3 20 00 00\n74 1f\n4c 89 e7\n89 ee\n4c 89 fa\n4c 89 f1\ne8 8a 02 00 00\n89 c3\n85 db\n0f 84 84 00 00 00\nc1 eb 1f\neb c4\n8a 05 6d c3 20 00\n84 c0\n0f 85 9b 00 00 00\nb8 00 f0 00 00\n23 44 24 20\n3d 00 80 00 00\n0f 85 87 00 00 00\n31 f6\nba 01 00 00 00\n89 ef\ne8 db d8 ff ff\n49 89 c5\n49 83 fd ff\n74 70\n31 f6\nba 02 00 00 00\n89 ef\ne8 c4 d8 ff ff\n49 39 c5\n7d 4e\n49 89 06\nb3 01\n48 85 c0\n0f 84 6a ff ff ff\n4c 89 e7\n89 ee\n4c 89 fa\n4c 89 e9\n49 89 c0\n4d 89 f1\ne8 fb 03 00 00\n84 c0\n0f 85 4c ff ff ff\n31 db\ne9 45 ff ff ff\n48 c7 c2 ff ff ff ff\n4c 89 e7\n89 ee\ne8 fb 02 00 00\n49 01 06\nb3 01\ne9 2a ff ff ff\n31 d2\n89 ef\n4c 89 ee\n4c 89 e1\ne8 92 06 00 00\n4c 89 e7\n89 ee\n4c 89 fa\n4c 89 f1\ne8 32 07 00 00\n88 c3\ne9 04 ff ff ff\n'
p1608
S'.text:0000000000403f40\n.text:0000000000403f41\n.text:0000000000403f43\n.text:0000000000403f45\n.text:0000000000403f47\n.text:0000000000403f49\n.text:0000000000403f4a\n.text:0000000000403f51\n.text:0000000000403f54\n.text:0000000000403f57\n.text:0000000000403f59\n.text:0000000000403f5c\n.text:0000000000403f61\n.text:0000000000403f63\n.text:0000000000403f68\n.text:0000000000403f6a\n.text:0000000000403f6c\n.text:0000000000403f71\n.text:0000000000403f74\n.text:0000000000403f76\n.text:0000000000403f78\n.text:0000000000403f7d\n.text:0000000000403f82\n.text:0000000000403f87\n.text:0000000000403f8a\n.text:0000000000403f8f\n.text:0000000000403f92\n.text:0000000000403f97\n.text:0000000000403f9a\n.text:0000000000403f9c\n.text:0000000000403f9e\n.text:0000000000403fa1\n.text:0000000000403fa4\n.text:0000000000403fa9\n.text:0000000000403fab\n.text:0000000000403fb2\n.text:0000000000403fb3\n.text:0000000000403fb5\n.text:0000000000403fb7\n.text:0000000000403fb9\n.text:0000000000403fbb\n.text:0000000000403fbc\n.text:0000000000403fbd\n.text:0000000000403fc4\n.text:0000000000403fc6\n.text:0000000000403fc9\n.text:0000000000403fcb\n.text:0000000000403fce\n.text:0000000000403fd1\n.text:0000000000403fd6\n.text:0000000000403fd8\n.text:0000000000403fda\n.text:0000000000403fe0\n.text:0000000000403fe3\n.text:0000000000403fe5\n.text:0000000000403feb\n.text:0000000000403fed\n.text:0000000000403ff3\n.text:0000000000403ff8\n.text:0000000000403ffc\n.text:0000000000404001\n.text:0000000000404007\n.text:0000000000404009\n.text:000000000040400e\n.text:0000000000404010\n.text:0000000000404015\n.text:0000000000404018\n.text:000000000040401c\n.text:000000000040401e\n.text:0000000000404020\n.text:0000000000404025\n.text:0000000000404027\n.text:000000000040402c\n.text:000000000040402f\n.text:0000000000404031\n.text:0000000000404034\n.text:0000000000404036\n.text:0000000000404039\n.text:000000000040403f\n.text:0000000000404042\n.text:0000000000404044\n.text:0000000000404047\n.text:000000000040404a\n.text:000000000040404d\n.text:0000000000404050\n.text:0000000000404055\n.text:0000000000404057\n.text:000000000040405d\n.text:000000000040405f\n.text:0000000000404064\n.text:000000000040406b\n.text:000000000040406e\n.text:0000000000404070\n.text:0000000000404075\n.text:0000000000404078\n.text:000000000040407a\n.text:000000000040407f\n.text:0000000000404081\n.text:0000000000404083\n.text:0000000000404086\n.text:0000000000404089\n.text:000000000040408e\n.text:0000000000404091\n.text:0000000000404093\n.text:0000000000404096\n.text:0000000000404099\n.text:000000000040409e\n.text:00000000004040a0\n'
p1609
tp1610
sS'rotr64'
p1611
(S'\n__stdcall rotr64(uint64_t x)\n'
p1612
V\u000auint64_t rotr64(uint64_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x >> bVar1 | x << 0x40 - bVar1;\u000a}\u000a\u000a
p1613
S'MOV ECX,ESI\nROR RDI,CL\nMOV RAX,RDI\nRET\n'
p1614
S'89 f1\n48 d3 cf\n48 89 f8\nc3\n'
p1615
S'.text:0000000000409e50\n.text:0000000000409e52\n.text:0000000000409e55\n.text:0000000000409e58\n'
p1616
tp1617
sS'read'
p1618
(S'\n__stdcall read(int __fd, void * __buf, size_t __nbytes)\n'
p1619
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000assize_t read(int __fd,void *__buf,size_t __nbytes)\u000a\u000a{\u000a  ssize_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_read_00610120)();\u000a  return sVar1;\u000a}\u000a\u000a
p1620
S'JMP qword ptr [0x00610120]\n'
p1621
S'ff 25 ca e7 20 00\n'
p1622
S'.plt:0000000000401950\n'
p1623
tp1624
sS'set_custom_quoting'
p1625
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p1626
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1627
S'TEST RDI,RDI\nMOV EAX,0x610380\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00407675\nTEST RDX,RDX\nJZ 0x00407675\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00401760\n'
p1628
S'48 85 ff\nb8 80 03 61 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 e5 a0 ff ff\n'
p1629
S'.text:0000000000407650\n.text:0000000000407653\n.text:0000000000407658\n.text:000000000040765c\n.text:0000000000407662\n.text:0000000000407665\n.text:0000000000407667\n.text:000000000040766a\n.text:000000000040766c\n.text:0000000000407670\n.text:0000000000407674\n.text:0000000000407675\n.text:0000000000407676\n'
p1630
tp1631
sS'c_isalpha'
p1632
(S'\n__stdcall c_isalpha()\n'
p1633
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1634
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x00409f6b\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1635
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1636
S'.text:0000000000409f50\n.text:0000000000409f53\n.text:0000000000409f56\n.text:0000000000409f58\n.text:0000000000409f62\n.text:0000000000409f64\n.text:0000000000409f67\n.text:0000000000409f6a\n.text:0000000000409f6b\n.text:0000000000409f6d\n'
p1637
tp1638
sS'ignore_fifo_and_pipe'
p1639
(S'\n__stdcall ignore_fifo_and_pipe(File_spec * f, size_t n_files)\n'
p1640
V\u000asize_t ignore_fifo_and_pipe(File_spec *f,size_t n_files)\u000a\u000a{\u000a  size_t sVar1;\u000a  int *piVar2;\u000a  \u000a  if (n_files != 0) {\u000a    piVar2 = &f->fd;\u000a    sVar1 = 0;\u000a    do {\u000a      if ((((**(char **)(piVar2 + -0xe) == '-') && ((*(char **)(piVar2 + -0xe))[1] == 0)) &&\u000a          (*(char *)(piVar2 + -1) == 0)) && ((-1 < *piVar2 && ((piVar2[-2] & 0xf000U) == 0x1000))))\u000a      {\u000a        *(undefined *)(piVar2 + -1) = 1;\u000a      }\u000a      else {\u000a        sVar1 = sVar1 + 1;\u000a      }\u000a      piVar2 = piVar2 + 0x18;\u000a      n_files = n_files - 1;\u000a    } while (n_files != 0);\u000a    return sVar1;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1641
S'TEST RSI,RSI\nJZ 0x00402d5d\nADD RDI,0x38\nXOR EAX,EAX\nMOV ECX,0xf000\nJMP 0x00402d30\nCMP dword ptr [RDI],0x0\nJS 0x00402d50\nMOV EDX,dword ptr [RDI + -0x8]\nAND EDX,ECX\nCMP EDX,0x1000\nJNZ 0x00402d50\nMOV byte ptr [RDI + -0x4],0x1\nJMP 0x00402d53\nMOV RDX,qword ptr [RDI + -0x38]\nCMP byte ptr [RDX],0x2d\nJNZ 0x00402d50\nCMP byte ptr [RDX + 0x1],0x0\nJNZ 0x00402d50\nCMP byte ptr [RDI + -0x4],0x0\nJZ 0x00402d12\nNOP dword ptr CS:[RAX + RAX*0x1]\nINC RAX\nADD RDI,0x60\nDEC RSI\nJNZ 0x00402d30\nRET\nXOR EAX,EAX\nRET\n'
p1642
S'48 85 f6\n74 58\n48 83 c7 38\n31 c0\nb9 00 f0 00 00\neb 1e\n83 3f 00\n78 39\n8b 57 f8\n21 ca\n81 fa 00 10 00 00\n75 2c\nc6 47 fc 01\neb 29\n48 8b 57 c8\n80 3a 2d\n75 17\n80 7a 01 00\n75 11\n80 7f fc 00\n74 cd\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 ff c0\n48 83 c7 60\n48 ff ce\n75 d4\nc3\n31 c0\nc3\n'
p1643
S'.text:0000000000402d00\n.text:0000000000402d03\n.text:0000000000402d05\n.text:0000000000402d09\n.text:0000000000402d0b\n.text:0000000000402d10\n.text:0000000000402d12\n.text:0000000000402d15\n.text:0000000000402d17\n.text:0000000000402d1a\n.text:0000000000402d1c\n.text:0000000000402d22\n.text:0000000000402d24\n.text:0000000000402d28\n.text:0000000000402d30\n.text:0000000000402d34\n.text:0000000000402d37\n.text:0000000000402d39\n.text:0000000000402d3d\n.text:0000000000402d3f\n.text:0000000000402d43\n.text:0000000000402d45\n.text:0000000000402d50\n.text:0000000000402d53\n.text:0000000000402d57\n.text:0000000000402d5a\n.text:0000000000402d5c\n.text:0000000000402d5d\n.text:0000000000402d5f\n'
p1644
tp1645
sS'quotearg_custom_mem'
p1646
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p1647
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1648
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x004088f0\n'
p1649
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p1650
S'.text:0000000000408980\n.text:0000000000408983\n.text:0000000000408986\n.text:0000000000408989\n.text:000000000040898c\n.text:000000000040898e\n.text:0000000000408991\n'
p1651
tp1652
sS'hash_get_max_bucket_length'
p1653
(S'\n__stdcall hash_get_max_bucket_length(Hash_table * table)\n'
p1654
V\u000asize_t hash_get_max_bucket_length(Hash_table *table)\u000a\u000a{\u000a  ulong uVar1;\u000a  hash_entry *phVar2;\u000a  ulong uVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar2 = table->bucket;\u000a  if (phVar2 < table->bucket_limit) {\u000a    uVar1 = 0;\u000a    do {\u000a      if (phVar2->data != (void *)0x0) {\u000a        uVar3 = 0;\u000a        phVar4 = phVar2;\u000a        do {\u000a          phVar4 = phVar4->next;\u000a          uVar3 = uVar3 + 1;\u000a        } while (phVar4 != (hash_entry *)0x0);\u000a        if (uVar1 < uVar3) {\u000a          uVar1 = uVar3;\u000a        }\u000a      }\u000a      phVar2 = phVar2 + 1;\u000a    } while (phVar2 < table->bucket_limit);\u000a    return uVar1;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1655
S'MOV RCX,qword ptr [RDI]\nCMP RCX,qword ptr [RDI + 0x8]\nJNC 0x0040647d\nMOV RDX,qword ptr [RDI + 0x8]\nXOR EAX,EAX\nNOP\nCMP qword ptr [RCX],0x0\nJZ 0x00406473\nXOR ESI,ESI\nMOV RDI,RCX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RDI + 0x8]\nINC RSI\nTEST RDI,RDI\nJNZ 0x00406460\nCMP RSI,RAX\nCMOVA RAX,RSI\nADD RCX,0x10\nCMP RCX,RDX\nJC 0x00406450\nRET\nXOR EAX,EAX\nRET\n'
p1656
S'48 8b 0f\n48 3b 4f 08\n73 34\n48 8b 57 08\n31 c0\n90\n48 83 39 00\n74 1d\n31 f6\n48 89 cf\n0f 1f 44 00 00\n48 8b 7f 08\n48 ff c6\n48 85 ff\n75 f4\n48 39 c6\n48 0f 47 c6\n48 83 c1 10\n48 39 d1\n72 d4\nc3\n31 c0\nc3\n'
p1657
S'.text:0000000000406440\n.text:0000000000406443\n.text:0000000000406447\n.text:0000000000406449\n.text:000000000040644d\n.text:000000000040644f\n.text:0000000000406450\n.text:0000000000406454\n.text:0000000000406456\n.text:0000000000406458\n.text:000000000040645b\n.text:0000000000406460\n.text:0000000000406464\n.text:0000000000406467\n.text:000000000040646a\n.text:000000000040646c\n.text:000000000040646f\n.text:0000000000406473\n.text:0000000000406477\n.text:000000000040647a\n.text:000000000040647c\n.text:000000000040647d\n.text:000000000040647f\n'
p1658
tp1659
sS'c_locale'
p1660
(S'\n__stdcall c_locale()\n'
p1661
V\u000alocale_t c_locale(void)\u000a\u000a{\u000a  if (c_locale_cache == (locale_t)0x0) {\u000a    c_locale_cache = (locale_t)newlocale(0x1fbf,"C",(__locale_t)0x0);\u000a  }\u000a  return c_locale_cache;\u000a}\u000a\u000a
p1662
S'CMP qword ptr [0x00610360],0x0\nJNZ 0x00406127\nPUSH RAX\nMOV EDI,0x1fbf\nMOV ESI,0x40c6e7\nXOR EDX,EDX\nCALL 0x004018c0\nMOV qword ptr [0x00610360],RAX\nADD RSP,0x8\nMOV RAX,qword ptr [0x00610360]\nRET\n'
p1663
S'48 83 3d 58 a2 20 00 00\n75 1d\n50\nbf bf 1f 00 00\nbe e7 c6 40 00\n31 d2\ne8 a4 b7 ff ff\n48 89 05 3d a2 20 00\n48 83 c4 08\n48 8b 05 32 a2 20 00\nc3\n'
p1664
S'.text:0000000000406100\n.text:0000000000406108\n.text:000000000040610a\n.text:000000000040610b\n.text:0000000000406110\n.text:0000000000406115\n.text:0000000000406117\n.text:000000000040611c\n.text:0000000000406123\n.text:0000000000406127\n.text:000000000040612e\n'
p1665
tp1666
sS'rpl_calloc'
p1667
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p1668
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_00610140)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p1669
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x00409bcb\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00409bd0\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00409bd0\nPUSH RAX\nCALL 0x00401770\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x00401990\n'
p1670
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 af 7b ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 b5 7d ff ff\n'
p1671
S'.text:0000000000409b90\n.text:0000000000409b93\n.text:0000000000409b98\n.text:0000000000409b9a\n.text:0000000000409b9d\n.text:0000000000409ba2\n.text:0000000000409ba4\n.text:0000000000409ba7\n.text:0000000000409bab\n.text:0000000000409bad\n.text:0000000000409bb0\n.text:0000000000409bb3\n.text:0000000000409bb6\n.text:0000000000409bb9\n.text:0000000000409bbb\n.text:0000000000409bbc\n.text:0000000000409bc1\n.text:0000000000409bc7\n.text:0000000000409bc9\n.text:0000000000409bca\n.text:0000000000409bcb\n.text:0000000000409bd0\n.text:0000000000409bd3\n.text:0000000000409bd6\n'
p1672
tp1673
sS'memset'
p1674
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p1675
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_00610100)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1676
S'JMP qword ptr [0x00610100]\n'
p1677
S'ff 25 ea e7 20 00\n'
p1678
S'.plt:0000000000401910\n'
p1679
tp1680
sS'getc_unlocked'
p1681
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p1682
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_00610058)();\u000a  return iVar1;\u000a}\u000a\u000a
p1683
S'JMP qword ptr [0x00610058]\n'
p1684
S'ff 25 92 e8 20 00\n'
p1685
S'.plt:00000000004017c0\n'
p1686
tp1687
sS'hash_insert_if_absent'
p1688
(S'\n__stdcall hash_insert_if_absent(Hash_table * table, void * entry, void * * matched_ent)\n'
p1689
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000aint hash_insert_if_absent(Hash_table *table,void *entry,void **matched_ent)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  Hash_tuning *pHVar3;\u000a  _Bool _Var4;\u000a  hash_entry *in_RAX;\u000a  void *pvVar5;\u000a  hash_entry *phVar6;\u000a  size_t candidate;\u000a  float fVar7;\u000a  float fVar8;\u000a  hash_entry *local_28;\u000a  \u000a  if (entry != (void *)0x0) {\u000a    local_28 = in_RAX;\u000a    pvVar5 = hash_find_entry(table,entry,&local_28);\u000a    if (pvVar5 != (void *)0x0) {\u000a      if (matched_ent == (void **)0x0) {\u000a        return 0;\u000a      }\u000a      *matched_ent = pvVar5;\u000a      return 0;\u000a    }\u000a    uVar1 = table->n_buckets;\u000a    uVar2 = table->n_buckets_used;\u000a    if ((long)uVar2 < 0) {\u000a      fVar7 = (float)((ulong)((uint)uVar2 & 1) | uVar2 >> 1);\u000a      fVar7 = fVar7 + fVar7;\u000a    }\u000a    else {\u000a      fVar7 = (float)uVar2;\u000a    }\u000a    if ((long)uVar1 < 0) {\u000a      fVar8 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a      fVar8 = fVar8 + fVar8;\u000a    }\u000a    else {\u000a      fVar8 = (float)uVar1;\u000a    }\u000a    if (fVar8 * table->tuning->growth_threshold < fVar7) {\u000a      check_tuning(table);\u000a      uVar1 = table->n_buckets;\u000a      uVar2 = table->n_buckets_used;\u000a      if ((long)uVar2 < 0) {\u000a        fVar7 = (float)((ulong)((uint)uVar2 & 1) | uVar2 >> 1);\u000a        fVar7 = fVar7 + fVar7;\u000a      }\u000a      else {\u000a        fVar7 = (float)uVar2;\u000a      }\u000a      pHVar3 = table->tuning;\u000a      if ((long)uVar1 < 0) {\u000a        fVar8 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a        fVar8 = fVar8 + fVar8;\u000a      }\u000a      else {\u000a        fVar8 = (float)uVar1;\u000a      }\u000a      if (pHVar3->growth_threshold * fVar8 < fVar7) {\u000a        fVar8 = fVar8 * pHVar3->growth_factor;\u000a        if (pHVar3->is_n_buckets == false) {\u000a          fVar8 = fVar8 * pHVar3->growth_threshold;\u000a        }\u000a        if (_DAT_0040c72c <= fVar8) {\u000a          return -1;\u000a        }\u000a        candidate = (long)fVar8;\u000a        if (DAT_0040c728 <= fVar8) {\u000a          candidate = (long)(fVar8 - DAT_0040c728) ^ 0x8000000000000000;\u000a        }\u000a        _Var4 = hash_rehash(table,candidate);\u000a        if (_Var4 == false) {\u000a          return -1;\u000a        }\u000a        pvVar5 = hash_find_entry(table,entry,&local_28);\u000a        if (pvVar5 != (void *)0x0) goto LAB_0040700d;\u000a      }\u000a    }\u000a    if (local_28->data == (void *)0x0) {\u000a      local_28->data = entry;\u000a      table->n_entries = table->n_entries + 1;\u000a      table->n_buckets_used = table->n_buckets_used + 1;\u000a    }\u000a    else {\u000a      phVar6 = allocate_entry(table);\u000a      if (phVar6 == (hash_entry *)0x0) {\u000a        return -1;\u000a      }\u000a      phVar6->data = entry;\u000a      phVar6->next = local_28->next;\u000a      local_28->next = phVar6;\u000a      table->n_entries = table->n_entries + 1;\u000a    }\u000a    return 1;\u000a  }\u000aLAB_0040700d:\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1690
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV R14,RSI\nMOV R15,RDI\nTEST R14,R14\nJZ 0x0040700d\nMOV RDX,RSP\nXOR EBP,EBP\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x00407020\nTEST RAX,RAX\nJZ 0x00406e81\nTEST RBX,RBX\nJZ 0x00407000\nMOV qword ptr [RBX],RAX\nJMP 0x00407000\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x00406e95\nCVTSI2SS XMM0,RCX\nJMP 0x00406eaa\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM0,RCX\nADDSS XMM0,XMM0\nMOV RCX,qword ptr [R15 + 0x28]\nTEST RAX,RAX\nJS 0x00406eba\nCVTSI2SS XMM1,RAX\nJMP 0x00406ecf\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nCVTSI2SS XMM1,RAX\nADDSS XMM1,XMM1\nMULSS XMM1,dword ptr [RCX + 0x8]\nUCOMISS XMM0,XMM1\nJBE 0x00406fb9\nMOV RDI,R15\nCALL 0x00406950\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x00406ef9\nCVTSI2SS XMM2,RCX\nJMP 0x00406f0e\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM2,RCX\nADDSS XMM2,XMM2\nMOV RCX,qword ptr [R15 + 0x28]\nMOVSS XMM1,dword ptr [RCX + 0x8]\nTEST RAX,RAX\nJS 0x00406f26\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nJMP 0x00406f3e\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOVAPS XMM3,XMM1\nMULSS XMM3,XMM0\nUCOMISS XMM2,XMM3\nJBE 0x00406fb9\nCMP byte ptr [RCX + 0x10],0x0\nMULSS XMM0,dword ptr [RCX + 0xc]\nJNZ 0x00406f59\nMULSS XMM0,XMM1\nMOV EBP,0xffffffff\nUCOMISS XMM0,dword ptr [0x0040c72c]\nJNC 0x00407000\nMOVSS XMM1,dword ptr [0x0040c728]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RSI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RSI,RCX\nMOV RDI,R15\nCALL 0x00406bf0\nTEST AL,AL\nJZ 0x00407000\nMOV RDX,RSP\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x00407020\nTEST RAX,RAX\nJNZ 0x0040700d\nMOV RAX,qword ptr [RSP]\nCMP qword ptr [RAX],0x0\nJZ 0x00406fe9\nMOV RDI,R15\nCALL 0x004070e0\nTEST RAX,RAX\nJZ 0x00406ffb\nMOV qword ptr [RAX],R14\nMOV RCX,qword ptr [RSP]\nMOV RDX,qword ptr [RCX + 0x8]\nMOV qword ptr [RAX + 0x8],RDX\nMOV qword ptr [RCX + 0x8],RAX\nINC qword ptr [R15 + 0x20]\nJMP 0x00406ff4\nMOV qword ptr [RAX],R14\nINC qword ptr [R15 + 0x20]\nINC qword ptr [R15 + 0x18]\nMOV EBP,0x1\nJMP 0x00407000\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401760\n'
p1691
S'55\n41 57\n41 56\n53\n50\n48 89 d3\n49 89 f6\n49 89 ff\n4d 85 f6\n0f 84 b4 01 00 00\n48 89 e2\n31 ed\n31 c9\n4c 89 ff\n4c 89 f6\ne8 b5 01 00 00\n48 85 c0\n74 11\n48 85 db\n0f 84 87 01 00 00\n48 89 03\ne9 7f 01 00 00\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 07\nf3 48 0f 2a c1\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a c1\nf3 0f 58 c0\n49 8b 4f 28\n48 85 c0\n78 07\nf3 48 0f 2a c8\neb 15\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\nf3 48 0f 2a c8\nf3 0f 58 c9\nf3 0f 59 49 08\n0f 2e c1\n0f 86 dc 00 00 00\n4c 89 ff\ne8 6b fa ff ff\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 07\nf3 48 0f 2a d1\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a d1\nf3 0f 58 d2\n49 8b 4f 28\nf3 0f 10 49 08\n48 85 c0\n78 0a\n0f 57 c0\nf3 48 0f 2a c0\neb 18\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\n0f 57 c0\nf3 48 0f 2a c0\nf3 0f 58 c0\n0f 28 d9\nf3 0f 59 d8\n0f 2e d3\n76 6f\n80 79 10 00\nf3 0f 59 41 0c\n75 04\nf3 0f 59 c1\nbd ff ff ff ff\n0f 2e 05 c7 57 00 00\n0f 83 95 00 00 00\nf3 0f 10 0d b5 57 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f0\n0f 2e c1\n48 0f 43 f1\n4c 89 ff\ne8 50 fc ff ff\n84 c0\n74 5c\n48 89 e2\n31 c9\n4c 89 ff\n4c 89 f6\ne8 6c 00 00 00\n48 85 c0\n75 54\n48 8b 04 24\n48 83 38 00\n74 26\n4c 89 ff\ne8 15 01 00 00\n48 85 c0\n74 2b\n4c 89 30\n48 8b 0c 24\n48 8b 51 08\n48 89 50 08\n48 89 41 08\n49 ff 47 20\neb 0b\n4c 89 30\n49 ff 47 20\n49 ff 47 18\nbd 01 00 00 00\neb 05\nbd ff ff ff ff\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\ne8 4e a7 ff ff\n'
p1692
S'.text:0000000000406e40\n.text:0000000000406e41\n.text:0000000000406e43\n.text:0000000000406e45\n.text:0000000000406e46\n.text:0000000000406e47\n.text:0000000000406e4a\n.text:0000000000406e4d\n.text:0000000000406e50\n.text:0000000000406e53\n.text:0000000000406e59\n.text:0000000000406e5c\n.text:0000000000406e5e\n.text:0000000000406e60\n.text:0000000000406e63\n.text:0000000000406e66\n.text:0000000000406e6b\n.text:0000000000406e6e\n.text:0000000000406e70\n.text:0000000000406e73\n.text:0000000000406e79\n.text:0000000000406e7c\n.text:0000000000406e81\n.text:0000000000406e85\n.text:0000000000406e89\n.text:0000000000406e8c\n.text:0000000000406e8e\n.text:0000000000406e93\n.text:0000000000406e95\n.text:0000000000406e98\n.text:0000000000406e9b\n.text:0000000000406e9e\n.text:0000000000406ea1\n.text:0000000000406ea6\n.text:0000000000406eaa\n.text:0000000000406eae\n.text:0000000000406eb1\n.text:0000000000406eb3\n.text:0000000000406eb8\n.text:0000000000406eba\n.text:0000000000406ebd\n.text:0000000000406ec0\n.text:0000000000406ec3\n.text:0000000000406ec6\n.text:0000000000406ecb\n.text:0000000000406ecf\n.text:0000000000406ed4\n.text:0000000000406ed7\n.text:0000000000406edd\n.text:0000000000406ee0\n.text:0000000000406ee5\n.text:0000000000406ee9\n.text:0000000000406eed\n.text:0000000000406ef0\n.text:0000000000406ef2\n.text:0000000000406ef7\n.text:0000000000406ef9\n.text:0000000000406efc\n.text:0000000000406eff\n.text:0000000000406f02\n.text:0000000000406f05\n.text:0000000000406f0a\n.text:0000000000406f0e\n.text:0000000000406f12\n.text:0000000000406f17\n.text:0000000000406f1a\n.text:0000000000406f1c\n.text:0000000000406f1f\n.text:0000000000406f24\n.text:0000000000406f26\n.text:0000000000406f29\n.text:0000000000406f2c\n.text:0000000000406f2f\n.text:0000000000406f32\n.text:0000000000406f35\n.text:0000000000406f3a\n.text:0000000000406f3e\n.text:0000000000406f41\n.text:0000000000406f45\n.text:0000000000406f48\n.text:0000000000406f4a\n.text:0000000000406f4e\n.text:0000000000406f53\n.text:0000000000406f55\n.text:0000000000406f59\n.text:0000000000406f5e\n.text:0000000000406f65\n.text:0000000000406f6b\n.text:0000000000406f73\n.text:0000000000406f76\n.text:0000000000406f7a\n.text:0000000000406f7f\n.text:0000000000406f89\n.text:0000000000406f8c\n.text:0000000000406f91\n.text:0000000000406f94\n.text:0000000000406f98\n.text:0000000000406f9b\n.text:0000000000406fa0\n.text:0000000000406fa2\n.text:0000000000406fa4\n.text:0000000000406fa7\n.text:0000000000406fa9\n.text:0000000000406fac\n.text:0000000000406faf\n.text:0000000000406fb4\n.text:0000000000406fb7\n.text:0000000000406fb9\n.text:0000000000406fbd\n.text:0000000000406fc1\n.text:0000000000406fc3\n.text:0000000000406fc6\n.text:0000000000406fcb\n.text:0000000000406fce\n.text:0000000000406fd0\n.text:0000000000406fd3\n.text:0000000000406fd7\n.text:0000000000406fdb\n.text:0000000000406fdf\n.text:0000000000406fe3\n.text:0000000000406fe7\n.text:0000000000406fe9\n.text:0000000000406fec\n.text:0000000000406ff0\n.text:0000000000406ff4\n.text:0000000000406ff9\n.text:0000000000406ffb\n.text:0000000000407000\n.text:0000000000407002\n.text:0000000000407006\n.text:0000000000407007\n.text:0000000000407009\n.text:000000000040700b\n.text:000000000040700c\n.text:000000000040700d\n'
p1693
tp1694
sS'c_isascii'
p1695
(S'\n__stdcall c_isascii()\n'
p1696
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p1697
S'CMP EDI,0x80\nSETC AL\nRET\n'
p1698
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p1699
S'.text:0000000000409f70\n.text:0000000000409f76\n.text:0000000000409f79\n'
p1700
tp1701
sS'__xargmatch_internal'
p1702
(S'\n__stdcall __xargmatch_internal(char * context, char * arg, char * * arglist, char * vallist, size_t valsize, argmatch_exit_fn * exit_fn)\n'
p1703
V\u000aptrdiff_t __xargmatch_internal\u000a                    (char *context,char *arg,char **arglist,char *vallist,size_t valsize,\u000a                    void (*exit_fn)())\u000a\u000a{\u000a  ptrdiff_t problem;\u000a  \u000a  problem = argmatch(arg,arglist,vallist,valsize);\u000a  if (problem < 0) {\u000a    argmatch_invalid(context,arg,problem);\u000a    argmatch_valid(arglist,vallist,valsize);\u000a    (*exit_fn)();\u000a    problem = -1;\u000a  }\u000a  return problem;\u000a}\u000a\u000a
p1704
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,R9\nMOV R15,R8\nMOV R12,RCX\nMOV R13,RDX\nMOV RBX,RSI\nMOV RBP,RDI\nMOV RDI,RBX\nMOV RSI,R13\nMOV RDX,R12\nMOV RCX,R15\nCALL 0x00405d80\nTEST RAX,RAX\nJNS 0x00406039\nMOV RDI,RBP\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x00405e80\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nCALL 0x00405ef0\nCALL R14\nMOV RAX,-0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1705
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 ce\n4d 89 c7\n49 89 cc\n49 89 d5\n48 89 f3\n48 89 fd\n48 89 df\n4c 89 ee\n4c 89 e2\n4c 89 f9\ne8 72 fd ff ff\n48 85 c0\n79 26\n48 89 ef\n48 89 de\n48 89 c2\ne8 5f fe ff ff\n4c 89 ef\n4c 89 e6\n4c 89 fa\ne8 c1 fe ff ff\n41 ff d6\n48 c7 c0 ff ff ff ff\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1706
S'.text:0000000000405fe0\n.text:0000000000405fe1\n.text:0000000000405fe3\n.text:0000000000405fe5\n.text:0000000000405fe7\n.text:0000000000405fe9\n.text:0000000000405fea\n.text:0000000000405feb\n.text:0000000000405fee\n.text:0000000000405ff1\n.text:0000000000405ff4\n.text:0000000000405ff7\n.text:0000000000405ffa\n.text:0000000000405ffd\n.text:0000000000406000\n.text:0000000000406003\n.text:0000000000406006\n.text:0000000000406009\n.text:000000000040600e\n.text:0000000000406011\n.text:0000000000406013\n.text:0000000000406016\n.text:0000000000406019\n.text:000000000040601c\n.text:0000000000406021\n.text:0000000000406024\n.text:0000000000406027\n.text:000000000040602a\n.text:000000000040602f\n.text:0000000000406032\n.text:0000000000406039\n.text:000000000040603d\n.text:000000000040603e\n.text:0000000000406040\n.text:0000000000406042\n.text:0000000000406044\n.text:0000000000406046\n.text:0000000000406047\n'
p1707
tp1708
sS'dup_safer'
p1709
(S'\n__stdcall dup_safer()\n'
p1710
V\u000aint dup_safer(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 in_RDI;\u000a  \u000a  iVar1 = rpl_fcntl(in_RDI,0,3);\u000a  return iVar1;\u000a}\u000a\u000a
p1711
S'XOR ESI,ESI\nMOV EDX,0x3\nXOR EAX,EAX\nJMP 0x00409be0\n'
p1712
S'31 f6\nba 03 00 00 00\n31 c0\ne9 02 f7 ff ff\n'
p1713
S'.text:000000000040a4d0\n.text:000000000040a4d2\n.text:000000000040a4d7\n.text:000000000040a4d9\n'
p1714
tp1715
sS'rotr32'
p1716
(S'\n__stdcall rotr32()\n'
p1717
V\u000auint32_t rotr32(void)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x1f;\u000a  return (uint32_t)(in_EDI >> bVar1 | in_EDI << 0x20 - bVar1);\u000a}\u000a\u000a
p1718
S'MOV ECX,ESI\nROR EDI,CL\nMOV EAX,EDI\nRET\n'
p1719
S'89 f1\nd3 cf\n89 f8\nc3\n'
p1720
S'.text:0000000000409e70\n.text:0000000000409e72\n.text:0000000000409e74\n.text:0000000000409e76\n'
p1721
tp1722
sS'__ctype_b_loc'
p1723
(S'\n__stdcall __ctype_b_loc()\n'
p1724
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_00610260)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p1725
S'JMP qword ptr [0x00610260]\n'
p1726
S'ff 25 8a e6 20 00\n'
p1727
S'.plt:0000000000401bd0\n'
p1728
tp1729
sS'quotearg'
p1730
(S'\n__stdcall quotearg(char * arg)\n'
p1731
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1732
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x004084d0\n'
p1733
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1734
S'.text:00000000004086b0\n.text:00000000004086b3\n.text:00000000004086b5\n.text:00000000004086b8\n'
p1735
tp1736
sS'_start'
p1737
(S'\n__stdcall _start()\n'
p1738
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_0060fff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1739
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x40a690\nMOV RCX,0x40a620\nMOV RDI,0x402080\nCALL qword ptr [0x0060fff0]\nHLT\n'
p1740
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 90 a6 40 00\n48 c7 c1 20 a6 40 00\n48 c7 c7 80 20 40 00\nff 15 e6 e3 20 00\nf4\n'
p1741
S'.text:0000000000401be0\n.text:0000000000401be2\n.text:0000000000401be5\n.text:0000000000401be6\n.text:0000000000401be9\n.text:0000000000401bed\n.text:0000000000401bee\n.text:0000000000401bef\n.text:0000000000401bf6\n.text:0000000000401bfd\n.text:0000000000401c04\n.text:0000000000401c0a\n'
p1742
tp1743
sS'inotify_init'
p1744
(S'\n__stdcall inotify_init()\n'
p1745
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint inotify_init(void)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_inotify_init_00610168)();\u000a  return iVar1;\u000a}\u000a\u000a
p1746
S'JMP qword ptr [0x00610168]\n'
p1747
S'ff 25 82 e7 20 00\n'
p1748
S'.plt:00000000004019e0\n'
p1749
tp1750
sS'c_iscntrl'
p1751
(S'\n__stdcall c_iscntrl()\n'
p1752
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1753
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00409f98\nRET\nCMP EDI,0x7f\nJZ 0x00409f97\nXOR EAX,EAX\nRET\n'
p1754
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1755
S'.text:0000000000409f90\n.text:0000000000409f92\n.text:0000000000409f95\n.text:0000000000409f97\n.text:0000000000409f98\n.text:0000000000409f9b\n.text:0000000000409f9d\n.text:0000000000409f9f\n'
p1756
tp1757
sS'hash_reset_tuning'
p1758
(S'\n__stdcall hash_reset_tuning(Hash_tuning * tuning)\n'
p1759
V\u000avoid hash_reset_tuning(Hash_tuning *tuning)\u000a\u000a{\u000a  float fVar1;\u000a  float fVar2;\u000a  float fVar3;\u000a  \u000a  *(undefined4 *)&tuning->is_n_buckets = default_tuning._16_4_;\u000a  fVar3 = default_tuning.growth_factor;\u000a  fVar2 = default_tuning.growth_threshold;\u000a  fVar1 = default_tuning.shrink_factor;\u000a  tuning->shrink_threshold = default_tuning.shrink_threshold;\u000a  tuning->shrink_factor = fVar1;\u000a  tuning->growth_threshold = fVar2;\u000a  tuning->growth_factor = fVar3;\u000a  return;\u000a}\u000a\u000a
p1760
S'MOV EAX,dword ptr [0x0040c7ac]\nMOV dword ptr [RDI + 0x10],EAX\nMOVUPS XMM0,xmmword ptr [0x0040c79c]\nMOVUPS xmmword ptr [RDI],XMM0\nRET\n'
p1761
S'8b 05 86 5f 00 00\n89 47 10\n0f 10 05 6c 5f 00 00\n0f 11 07\nc3\n'
p1762
S'.text:0000000000406820\n.text:0000000000406826\n.text:0000000000406829\n.text:0000000000406830\n.text:0000000000406833\n'
p1763
tp1764
sS'c_isblank'
p1765
(S'\n__stdcall c_isblank()\n'
p1766
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1767
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1768
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1769
S'.text:0000000000409f80\n.text:0000000000409f83\n.text:0000000000409f86\n.text:0000000000409f89\n.text:0000000000409f8c\n.text:0000000000409f8e\n'
p1770
tp1771
sS'atexit'
p1772
(S'\n__stdcall atexit(__func * __func)\n'
p1773
V\u000a/* WARNING: Removing unreachable block (ram,0x0040a6c0) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_00610220)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1774
S'MOV RAX,0x610270\nTEST RAX,RAX\nJZ 0x0040a6c0\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401b50\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401b50\n'
p1775
S'48 c7 c0 70 02 61 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 9a 74 ff ff\n31 d2\n31 f6\ne9 87 74 ff ff\n'
p1776
S'.text:000000000040a6a0\n.text:000000000040a6a7\n.text:000000000040a6aa\n.text:000000000040a6ac\n.text:000000000040a6af\n.text:000000000040a6b1\n.text:000000000040a6c0\n.text:000000000040a6c2\n.text:000000000040a6c4\n'
p1777
tp1778
sS'fdopen'
p1779
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1780
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_006101d8)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1781
S'JMP qword ptr [0x006101d8]\n'
p1782
S'ff 25 12 e7 20 00\n'
p1783
S'.plt:0000000000401ac0\n'
p1784
tp1785
sS'hash_find_entry'
p1786
(S'\n__stdcall hash_find_entry(Hash_table * table, void * entry, hash_entry * * bucket_head)\n'
p1787
V\u000avoid * hash_find_entry(Hash_table *table,void *entry,hash_entry **bucket_head)\u000a\u000a{\u000a  undefined4 uVar1;\u000a  undefined4 uVar2;\u000a  undefined4 uVar3;\u000a  _Bool _Var4;\u000a  hash_entry *phVar5;\u000a  hash_entry *entry_00;\u000a  char in_CL;\u000a  hash_entry **pphVar6;\u000a  void *pvVar7;\u000a  \u000a  phVar5 = safe_hasher(table,entry);\u000a  *bucket_head = phVar5;\u000a  pvVar7 = phVar5->data;\u000a  if (pvVar7 == (void *)0x0) {\u000a    return (void *)0x0;\u000a  }\u000a  if ((pvVar7 == entry) || (_Var4 = (*table->comparator)(entry,pvVar7), _Var4 != false)) {\u000a    pvVar7 = phVar5->data;\u000a    if (in_CL == 0) {\u000a      return pvVar7;\u000a    }\u000a    entry_00 = phVar5->next;\u000a    if (entry_00 == (hash_entry *)0x0) {\u000a      phVar5->data = (void *)0x0;\u000a      return pvVar7;\u000a    }\u000a    uVar1 = *(undefined4 *)((long)&entry_00->data + 4);\u000a    uVar2 = *(undefined4 *)&entry_00->next;\u000a    uVar3 = *(undefined4 *)((long)&entry_00->next + 4);\u000a    *(undefined4 *)&phVar5->data = *(undefined4 *)&entry_00->data;\u000a    *(undefined4 *)((long)&phVar5->data + 4) = uVar1;\u000a    *(undefined4 *)&phVar5->next = uVar2;\u000a    *(undefined4 *)((long)&phVar5->next + 4) = uVar3;\u000a  }\u000a  else {\u000a    entry_00 = phVar5->next;\u000a    if (entry_00 == (hash_entry *)0x0) {\u000a      return (void *)0x0;\u000a    }\u000a    while( true ) {\u000a      pphVar6 = &phVar5->next;\u000a      if ((entry_00->data == entry) ||\u000a         (_Var4 = (*table->comparator)(entry,entry_00->data), _Var4 != false)) break;\u000a      phVar5 = *pphVar6;\u000a      entry_00 = phVar5->next;\u000a      if (entry_00 == (hash_entry *)0x0) {\u000a        return (void *)0x0;\u000a      }\u000a    }\u000a    entry_00 = *pphVar6;\u000a    pvVar7 = entry_00->data;\u000a    if (in_CL == 0) {\u000a      return pvVar7;\u000a    }\u000a    *pphVar6 = entry_00->next;\u000a  }\u000a  free_entry(table,entry_00);\u000a  return pvVar7;\u000a}\u000a\u000a
p1788
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R12D,ECX\nMOV R14,RDX\nMOV RBP,RSI\nMOV R15,RDI\nCALL 0x00406630\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RSI,qword ptr [RBX]\nTEST RSI,RSI\nJZ 0x004070a5\nCMP RSI,RBP\nJZ 0x00407057\nMOV RDI,RBP\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJZ 0x00407070\nMOV R14,qword ptr [RBX]\nTEST R12B,R12B\nJZ 0x004070cd\nMOV RSI,qword ptr [RBX + 0x8]\nTEST RSI,RSI\nJZ 0x004070aa\nMOVUPS XMM0,xmmword ptr [RSI]\nMOVUPS xmmword ptr [RBX],XMM0\nJMP 0x004070c5\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nJZ 0x004070a5\nADD RBX,0x8\nXOR R14D,R14D\nMOV RSI,qword ptr [RAX]\nCMP RSI,RBP\nJZ 0x004070b3\nMOV RDI,RBP\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJNZ 0x004070b3\nMOV RBX,qword ptr [RBX]\nMOV RAX,qword ptr [RBX + 0x8]\nADD RBX,0x8\nTEST RAX,RAX\nJNZ 0x00407080\nJMP 0x004070cd\nXOR R14D,R14D\nJMP 0x004070cd\nMOV qword ptr [RBX],0x0\nJMP 0x004070cd\nMOV RSI,qword ptr [RBX]\nMOV R14,qword ptr [RSI]\nTEST R12B,R12B\nJZ 0x004070cd\nMOV RAX,qword ptr [RSI + 0x8]\nMOV qword ptr [RBX],RAX\nMOV RDI,R15\nCALL 0x004073a0\nMOV RAX,R14\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1789
S'55\n41 57\n41 56\n41 54\n53\n41 89 cc\n49 89 d6\n48 89 f5\n49 89 ff\ne8 f7 f5 ff ff\n48 89 c3\n49 89 1e\n48 8b 33\n48 85 f6\n74 5e\n48 39 ee\n74 0b\n48 89 ef\n41 ff 57 38\n84 c0\n74 19\n4c 8b 33\n45 84 e4\n74 6e\n48 8b 73 08\n48 85 f6\n74 42\n0f 10 06\n0f 11 03\neb 55\n48 8b 43 08\n48 85 c0\n74 2c\n48 83 c3 08\n45 31 f6\n48 8b 30\n48 39 ee\n74 2b\n48 89 ef\n41 ff 57 38\n84 c0\n75 20\n48 8b 1b\n48 8b 43 08\n48 83 c3 08\n48 85 c0\n75 dd\neb 28\n45 31 f6\neb 23\n48 c7 03 00 00 00 00\neb 1a\n48 8b 33\n4c 8b 36\n45 84 e4\n74 0f\n48 8b 46 08\n48 89 03\n4c 89 ff\ne8 d3 02 00 00\n4c 89 f0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1790
S'.text:0000000000407020\n.text:0000000000407021\n.text:0000000000407023\n.text:0000000000407025\n.text:0000000000407027\n.text:0000000000407028\n.text:000000000040702b\n.text:000000000040702e\n.text:0000000000407031\n.text:0000000000407034\n.text:0000000000407039\n.text:000000000040703c\n.text:000000000040703f\n.text:0000000000407042\n.text:0000000000407045\n.text:0000000000407047\n.text:000000000040704a\n.text:000000000040704c\n.text:000000000040704f\n.text:0000000000407053\n.text:0000000000407055\n.text:0000000000407057\n.text:000000000040705a\n.text:000000000040705d\n.text:000000000040705f\n.text:0000000000407063\n.text:0000000000407066\n.text:0000000000407068\n.text:000000000040706b\n.text:000000000040706e\n.text:0000000000407070\n.text:0000000000407074\n.text:0000000000407077\n.text:0000000000407079\n.text:000000000040707d\n.text:0000000000407080\n.text:0000000000407083\n.text:0000000000407086\n.text:0000000000407088\n.text:000000000040708b\n.text:000000000040708f\n.text:0000000000407091\n.text:0000000000407093\n.text:0000000000407096\n.text:000000000040709a\n.text:000000000040709e\n.text:00000000004070a1\n.text:00000000004070a3\n.text:00000000004070a5\n.text:00000000004070a8\n.text:00000000004070aa\n.text:00000000004070b1\n.text:00000000004070b3\n.text:00000000004070b6\n.text:00000000004070b9\n.text:00000000004070bc\n.text:00000000004070be\n.text:00000000004070c2\n.text:00000000004070c5\n.text:00000000004070c8\n.text:00000000004070cd\n.text:00000000004070d0\n.text:00000000004070d1\n.text:00000000004070d3\n.text:00000000004070d5\n.text:00000000004070d7\n.text:00000000004070d8\n'
p1791
tp1792
sS'error'
p1793
(S'\n__stdcall error()\n'
p1794
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_006101f0)();\u000a  return;\u000a}\u000a\u000a
p1795
S'JMP qword ptr [0x006101f0]\n'
p1796
S'ff 25 fa e6 20 00\n'
p1797
S'.plt:0000000000401af0\n'
p1798
tp1799
sS'raw_comparator'
p1800
(S'\n__stdcall raw_comparator(void * a, void * b)\n'
p1801
V\u000a_Bool raw_comparator(void *a,void *b)\u000a\u000a{\u000a  return (_Bool)(a == b);\u000a}\u000a\u000a
p1802
S'CMP RDI,RSI\nSETZ AL\nRET\n'
p1803
S'48 39 f7\n0f 94 c0\nc3\n'
p1804
S'.text:0000000000406940\n.text:0000000000406943\n.text:0000000000406946\n'
p1805
tp1806
sS'strcaseeq6'
p1807
(S'\n__stdcall strcaseeq6()\n'
p1808
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1809
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x0040a020\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00408d72\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00408d79\nJMP 0x00408d8e\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00408d8e\nTEST BPL,BPL\nJZ 0x00408d89\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00408da0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1810
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 c1 12 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1811
S'.text:0000000000408d50\n.text:0000000000408d51\n.text:0000000000408d52\n.text:0000000000408d53\n.text:0000000000408d55\n.text:0000000000408d58\n.text:0000000000408d5a\n.text:0000000000408d5f\n.text:0000000000408d63\n.text:0000000000408d65\n.text:0000000000408d67\n.text:0000000000408d6a\n.text:0000000000408d6c\n.text:0000000000408d6e\n.text:0000000000408d70\n.text:0000000000408d72\n.text:0000000000408d74\n.text:0000000000408d77\n.text:0000000000408d79\n.text:0000000000408d7c\n.text:0000000000408d7e\n.text:0000000000408d81\n.text:0000000000408d85\n.text:0000000000408d86\n.text:0000000000408d87\n.text:0000000000408d89\n.text:0000000000408d8e\n.text:0000000000408d92\n.text:0000000000408d93\n.text:0000000000408d94\n'
p1812
tp1813
sS'strcaseeq5'
p1814
(S'\n__stdcall strcaseeq5()\n'
p1815
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1816
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x0040a020\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00408d26\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00408d2d\nJMP 0x00408d44\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00408d44\nTEST BPL,BPL\nJZ 0x00408d3f\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00408d50\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1817
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 0d 13 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1818
S'.text:0000000000408d00\n.text:0000000000408d01\n.text:0000000000408d03\n.text:0000000000408d04\n.text:0000000000408d07\n.text:0000000000408d09\n.text:0000000000408d0c\n.text:0000000000408d0e\n.text:0000000000408d13\n.text:0000000000408d17\n.text:0000000000408d19\n.text:0000000000408d1b\n.text:0000000000408d1e\n.text:0000000000408d20\n.text:0000000000408d22\n.text:0000000000408d24\n.text:0000000000408d26\n.text:0000000000408d28\n.text:0000000000408d2b\n.text:0000000000408d2d\n.text:0000000000408d30\n.text:0000000000408d32\n.text:0000000000408d36\n.text:0000000000408d39\n.text:0000000000408d3a\n.text:0000000000408d3c\n.text:0000000000408d3d\n.text:0000000000408d3f\n.text:0000000000408d44\n.text:0000000000408d45\n.text:0000000000408d47\n.text:0000000000408d48\n'
p1819
tp1820
sS'strcaseeq7'
p1821
(S'\n__stdcall strcaseeq7()\n'
p1822
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1823
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x0040a020\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00408dc2\nTEST ECX,0xffffffdf\nJNZ 0x00408dc6\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x00408dca\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1824
S'53\n48 89 fb\n31 ff\ne8 75 12 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1825
S'.text:0000000000408da0\n.text:0000000000408da1\n.text:0000000000408da4\n.text:0000000000408da6\n.text:0000000000408dab\n.text:0000000000408daf\n.text:0000000000408db1\n.text:0000000000408db3\n.text:0000000000408db9\n.text:0000000000408dbb\n.text:0000000000408dc0\n.text:0000000000408dc1\n.text:0000000000408dc2\n.text:0000000000408dc4\n.text:0000000000408dc6\n.text:0000000000408dc8\n.text:0000000000408dc9\n.text:0000000000408dca\n.text:0000000000408dcf\n.text:0000000000408dd0\n'
p1826
tp1827
sS'wd_hasher'
p1828
(S'\n__stdcall wd_hasher(void * entry, size_t tabsize)\n'
p1829
V\u000asize_t wd_hasher(void *entry,size_t tabsize)\u000a\u000a{\u000a  return (ulong)(long)*(int *)((long)entry + 0x44) % tabsize;\u000a}\u000a\u000a
p1830
S'MOVSXD RAX,dword ptr [RDI + 0x44]\nXOR EDX,EDX\nDIV RSI\nMOV RAX,RDX\nRET\n'
p1831
S'48 63 47 44\n31 d2\n48 f7 f6\n48 89 d0\nc3\n'
p1832
S'.text:0000000000405700\n.text:0000000000405704\n.text:0000000000405706\n.text:0000000000405709\n.text:000000000040570c\n'
p1833
tp1834
sS'dump_remainder'
p1835
(S'\n__stdcall dump_remainder(char * pretty_filename, uintmax_t n_bytes)\n'
p1836
V\u000auintmax_t dump_remainder(char *pretty_filename,uintmax_t n_bytes)\u000a\u000a{\u000a  uint uVar1;\u000a  size_t n_bytes_00;\u000a  uint *puVar2;\u000a  undefined8 uVar3;\u000a  char *pcVar4;\u000a  long in_RDX;\u000a  long lVar5;\u000a  uintmax_t uVar6;\u000a  char buffer [8192];\u000a  char local_2038 [8200];\u000a  \u000a  uVar6 = 0;\u000a  lVar5 = in_RDX;\u000a  do {\u000a    do {\u000a      n_bytes_00 = safe_read((void *)(n_bytes & 0xffffffff),(size_t)local_2038);\u000a      if (n_bytes_00 == 0) {\u000a        return uVar6;\u000a      }\u000a      if (n_bytes_00 == 0xffffffffffffffff) {\u000a        puVar2 = (uint *)__errno_location();\u000a        uVar1 = *puVar2;\u000a        if (uVar1 == 0xb) {\u000a          return uVar6;\u000a        }\u000a        uVar3 = dcgettext(0,"error reading %s",5);\u000a        pcVar4 = quotearg_style((char *)0x4);\u000a        error(1,(ulong)uVar1,uVar3,pcVar4);\u000a        return uVar6;\u000a      }\u000a      xwrite_stdout(local_2038,n_bytes_00);\u000a      uVar6 = uVar6 + n_bytes_00;\u000a    } while (in_RDX == -1);\u000a    if (in_RDX == -2) {\u000a      return uVar6;\u000a    }\u000a    lVar5 = lVar5 - n_bytes_00;\u000a  } while (lVar5 != 0);\u000a  return uVar6;\u000a}\u000a\u000a
p1837
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x2018\nMOV R14,RDX\nMOV R12D,ESI\nMOV qword ptr [RSP + 0x8],RDI\nXOR R15D,R15D\nLEA R13,[RSP + 0x10]\nMOV RBX,R14\nNOP word ptr [RAX + RAX*0x1]\nCMP RBX,0x2000\nMOV EDX,0x2000\nCMOVC RDX,RBX\nMOV EDI,R12D\nMOV RSI,R13\nCALL 0x00408de0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x0040442d\nCMP RBP,-0x1\nJZ 0x004043ea\nMOV RDI,R13\nMOV RSI,RBP\nCALL 0x00404b50\nADD R15,RBP\nCMP R14,-0x1\nJZ 0x004043a0\nCMP R14,-0x2\nJZ 0x0040442d\nSUB RBX,RBP\nJNZ 0x004043a0\nJMP 0x0040442d\nCALL 0x00401770\nMOV EBX,dword ptr [RAX]\nCMP EBX,0xb\nJZ 0x0040442d\nXOR EDI,EDI\nMOV ESI,0x40c200\nMOV EDX,0x5\nCALL 0x00401840\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x8]\nCALL 0x004087b0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00401af0\nMOV RAX,R15\nADD RSP,0x2018\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1838
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 18 20 00 00\n49 89 d6\n41 89 f4\n48 89 7c 24 08\n45 31 ff\n4c 8d 6c 24 10\n4c 89 f3\n66 0f 1f 84 00 00 00 00 00\n48 81 fb 00 20 00 00\nba 00 20 00 00\n48 0f 42 d3\n44 89 e7\n4c 89 ee\ne8 25 4a 00 00\n48 89 c5\n48 85 ed\n74 6a\n48 83 fd ff\n74 21\n4c 89 ef\n48 89 ee\ne8 7c 07 00 00\n49 01 ef\n49 83 fe ff\n74 c3\n49 83 fe fe\n74 4a\n48 29 eb\n75 b8\neb 43\ne8 81 d3 ff ff\n8b 18\n83 fb 0b\n74 37\n31 ff\nbe 00 c2 40 00\nba 05 00 00 00\ne8 39 d4 ff ff\n48 89 c5\nbf 04 00 00 00\n48 8b 74 24 08\ne8 97 43 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ea\ne8 c3 d6 ff ff\n4c 89 f8\n48 81 c4 18 20 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1839
S'.text:0000000000404370\n.text:0000000000404371\n.text:0000000000404373\n.text:0000000000404375\n.text:0000000000404377\n.text:0000000000404379\n.text:000000000040437a\n.text:0000000000404381\n.text:0000000000404384\n.text:0000000000404387\n.text:000000000040438c\n.text:000000000040438f\n.text:0000000000404394\n.text:0000000000404397\n.text:00000000004043a0\n.text:00000000004043a7\n.text:00000000004043ac\n.text:00000000004043b0\n.text:00000000004043b3\n.text:00000000004043b6\n.text:00000000004043bb\n.text:00000000004043be\n.text:00000000004043c1\n.text:00000000004043c3\n.text:00000000004043c7\n.text:00000000004043c9\n.text:00000000004043cc\n.text:00000000004043cf\n.text:00000000004043d4\n.text:00000000004043d7\n.text:00000000004043db\n.text:00000000004043dd\n.text:00000000004043e1\n.text:00000000004043e3\n.text:00000000004043e6\n.text:00000000004043e8\n.text:00000000004043ea\n.text:00000000004043ef\n.text:00000000004043f1\n.text:00000000004043f4\n.text:00000000004043f6\n.text:00000000004043f8\n.text:00000000004043fd\n.text:0000000000404402\n.text:0000000000404407\n.text:000000000040440a\n.text:000000000040440f\n.text:0000000000404414\n.text:0000000000404419\n.text:000000000040441c\n.text:0000000000404421\n.text:0000000000404423\n.text:0000000000404425\n.text:0000000000404428\n.text:000000000040442d\n.text:0000000000404430\n.text:0000000000404437\n.text:0000000000404438\n.text:000000000040443a\n.text:000000000040443c\n.text:000000000040443e\n.text:0000000000404440\n.text:0000000000404441\n'
p1840
tp1841
sS'emit_mandatory_arg_note'
p1842
(S'\n__stdcall emit_mandatory_arg_note()\n'
p1843
V\u000avoid emit_mandatory_arg_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnMandatory arguments to long options are mandatory for short options too.\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p1844
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x40bdaa\nMOV EDX,0x5\nCALL 0x00401840\nMOV RSI,qword ptr [0x00610308]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401970\n'
p1845
S'50\n31 ff\nbe aa bd 40 00\nba 05 00 00 00\ne8 0e f9 ff ff\n48 8b 35 cf e3 20 00\n48 89 c7\n58\ne9 2e fa ff ff\n'
p1846
S'.text:0000000000401f20\n.text:0000000000401f21\n.text:0000000000401f23\n.text:0000000000401f28\n.text:0000000000401f2d\n.text:0000000000401f32\n.text:0000000000401f39\n.text:0000000000401f3c\n.text:0000000000401f3d\n'
p1847
tp1848
sS'strcaseeq0'
p1849
(S'\n__stdcall strcaseeq0()\n'
p1850
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1851
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x0040a020\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00408ad5\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00408adc\nJMP 0x00408b10\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00408b10\nTEST BPL,BPL\nJZ 0x00408b0b\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00408b20\nJMP 0x00408b10\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1852
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 5d 15 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1853
S'.text:0000000000408aa0\n.text:0000000000408aa1\n.text:0000000000408aa3\n.text:0000000000408aa5\n.text:0000000000408aa7\n.text:0000000000408aa9\n.text:0000000000408aaa\n.text:0000000000408aab\n.text:0000000000408aae\n.text:0000000000408ab1\n.text:0000000000408ab4\n.text:0000000000408ab7\n.text:0000000000408ab9\n.text:0000000000408abc\n.text:0000000000408abe\n.text:0000000000408ac3\n.text:0000000000408ac6\n.text:0000000000408ac8\n.text:0000000000408aca\n.text:0000000000408acd\n.text:0000000000408acf\n.text:0000000000408ad1\n.text:0000000000408ad3\n.text:0000000000408ad5\n.text:0000000000408ad7\n.text:0000000000408ada\n.text:0000000000408adc\n.text:0000000000408adf\n.text:0000000000408ae1\n.text:0000000000408ae5\n.text:0000000000408aea\n.text:0000000000408aed\n.text:0000000000408af1\n.text:0000000000408af5\n.text:0000000000408af9\n.text:0000000000408afd\n.text:0000000000408b01\n.text:0000000000408b04\n.text:0000000000408b09\n.text:0000000000408b0b\n.text:0000000000408b10\n.text:0000000000408b14\n.text:0000000000408b15\n.text:0000000000408b17\n.text:0000000000408b19\n.text:0000000000408b1b\n.text:0000000000408b1d\n.text:0000000000408b1e\n'
p1854
tp1855
sS'get_stat_mtime'
p1856
(S'\n__stdcall get_stat_mtime(stat * st)\n'
p1857
V\u000atimespec get_stat_mtime(stat *st)\u000a\u000a{\u000a  return st->st_mtim;\u000a}\u000a\u000a
p1858
S'MOV RAX,qword ptr [RDI + 0x58]\nMOV RDX,qword ptr [RDI + 0x60]\nRET\n'
p1859
S'48 8b 47 58\n48 8b 57 60\nc3\n'
p1860
S'.text:0000000000408ed0\n.text:0000000000408ed4\n.text:0000000000408ed8\n'
p1861
tp1862
sS'pipe_bytes'
p1863
(S'\n__stdcall pipe_bytes(char * pretty_filename, uintmax_t n_bytes, uintmax_t * read_pos)\n'
p1864
V\u000a_Bool pipe_bytes(char *pretty_filename,uintmax_t n_bytes,uintmax_t *read_pos)\u000a\u000a{\u000a  uint uVar1;\u000a  long lVar2;\u000a  uintmax_t *puVar3;\u000a  void *pvVar4;\u000a  void *pvVar5;\u000a  size_t __n;\u000a  uintmax_t *puVar6;\u000a  uint *puVar7;\u000a  undefined8 uVar8;\u000a  char *buffer;\u000a  long *in_RCX;\u000a  uintmax_t *puVar9;\u000a  void *__ptr;\u000a  void *__ptr_00;\u000a  undefined uVar10;\u000a  \u000a  pvVar4 = xmalloc(0x2010);\u000a  *(undefined4 *)((long)pvVar4 + 0x2000) = 0;\u000a  *(undefined4 *)((long)pvVar4 + 0x2004) = 0;\u000a  *(undefined4 *)((long)pvVar4 + 0x2008) = 0;\u000a  *(undefined4 *)((long)pvVar4 + 0x200c) = 0;\u000a  pvVar5 = xmalloc(0x2010);\u000a  puVar9 = (uintmax_t *)0x0;\u000a  __ptr_00 = pvVar4;\u000a  while (__ptr = pvVar5, __n = safe_read((void *)(n_bytes & 0xffffffff),(size_t)__ptr), 1 < __n + 1)\u000a  {\u000a    *in_RCX = *in_RCX + __n;\u000a    *(size_t *)((long)__ptr + 0x2000) = __n;\u000a    *(undefined8 *)((long)__ptr + 0x2008) = 0;\u000a    puVar6 = (uintmax_t *)((long)puVar9 + __n);\u000a    if (__n + *(long *)((long)pvVar4 + 0x2000) < 0x2000) {\u000a      memcpy((void *)(*(long *)((long)pvVar4 + 0x2000) + (long)pvVar4),__ptr,__n);\u000a      *(long *)((long)pvVar4 + 0x2000) =\u000a           *(long *)((long)pvVar4 + 0x2000) + *(long *)((long)__ptr + 0x2000);\u000a      pvVar5 = __ptr;\u000a      puVar9 = puVar6;\u000a    }\u000a    else {\u000a      *(void **)((long)pvVar4 + 0x2008) = __ptr;\u000a      puVar9 = (uintmax_t *)((long)puVar6 - *(long *)((long)__ptr_00 + 0x2000));\u000a      if (read_pos < puVar9) {\u000a        pvVar5 = __ptr_00;\u000a        pvVar4 = __ptr;\u000a        __ptr_00 = *(void **)((long)__ptr_00 + 0x2008);\u000a      }\u000a      else {\u000a        pvVar5 = xmalloc(0x2010);\u000a        pvVar4 = __ptr;\u000a        puVar9 = puVar6;\u000a      }\u000a    }\u000a  }\u000a  free(__ptr);\u000a  if (__n == 0xffffffffffffffff) {\u000a    puVar7 = (uint *)__errno_location();\u000a    uVar1 = *puVar7;\u000a    uVar10 = 0;\u000a    uVar8 = dcgettext(0,"error reading %s",5);\u000a    buffer = quotearg_style((char *)0x4);\u000a    error(0,(ulong)uVar1,uVar8,buffer);\u000a  }\u000a  else {\u000a    lVar2 = *(long *)((long)__ptr_00 + 0x2000);\u000a    puVar6 = (uintmax_t *)((long)puVar9 - lVar2);\u000a    pvVar5 = __ptr_00;\u000a    while (puVar3 = puVar6, read_pos < puVar3) {\u000a      pvVar5 = *(void **)((long)pvVar5 + 0x2008);\u000a      lVar2 = *(long *)((long)pvVar5 + 0x2000);\u000a      puVar6 = (uintmax_t *)((long)puVar3 - lVar2);\u000a      puVar9 = puVar3;\u000a    }\u000a    puVar6 = (uintmax_t *)0x0;\u000a    if (read_pos <= puVar9 && (uintmax_t *)((long)puVar9 - (long)read_pos) != (uintmax_t *)0x0) {\u000a      puVar6 = (uintmax_t *)((long)puVar9 - (long)read_pos);\u000a    }\u000a    xwrite_stdout((char *)((long)pvVar5 + (long)puVar6),lVar2 - (long)puVar6);\u000a    buffer = *(char **)((long)pvVar5 + 0x2008);\u000a    uVar10 = 1;\u000a    while (buffer != (char *)0x0) {\u000a      xwrite_stdout(buffer,*(size_t *)(buffer + 0x2000));\u000a      buffer = *(char **)(buffer + 0x2008);\u000a    }\u000a  }\u000a  while (__ptr_00 != (void *)0x0) {\u000a    pvVar5 = *(void **)((long)__ptr_00 + 0x2008);\u000a    free(__ptr_00);\u000a    __ptr_00 = pvVar5;\u000a  }\u000a  return (_Bool)uVar10;\u000a}\u000a\u000a
p1865
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV qword ptr [RSP + 0x10],RCX\nMOV qword ptr [RSP],RDX\nMOV EBX,ESI\nMOV qword ptr [RSP + 0x8],RDI\nMOV EDI,0x2010\nCALL 0x004094d0\nMOV RBP,RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [0x2000 + RBP],XMM0\nMOV EDI,0x2010\nCALL 0x004094d0\nXOR ECX,ECX\nMOV R13,RBP\nJMP 0x00404d10\nMOV RAX,R13\nMOV R13,qword ptr [0x2008 + R13]\nMOV R12,RBP\nMOV RBP,RAX\nMOV R14,RCX\nJMP 0x00404d3d\nADD RDI,R12\nMOV RSI,RBP\nMOV RDX,R15\nCALL 0x004019c0\nMOV RAX,qword ptr [0x2000 + RBP]\nADD qword ptr [0x2000 + R12],RAX\nMOV EDX,0x2000\nMOV EDI,EBX\nMOV RSI,RBP\nCALL 0x00408de0\nMOV R15,RAX\nLEA RAX,[R15 + 0x1]\nCMP RAX,0x2\nJC 0x00404dba\nMOV RAX,qword ptr [RSP + 0x10]\nADD qword ptr [RAX],R15\nMOV qword ptr [0x2000 + RBP],R15\nMOV qword ptr [0x2008 + RBP],0x0\nADD R14,R15\nMOV RDI,qword ptr [0x2000 + R12]\nMOV RAX,R15\nADD RAX,RDI\nCMP RAX,0x1fff\nJBE 0x00404d20\nMOV qword ptr [0x2008 + R12],RBP\nMOV RCX,R14\nSUB RCX,qword ptr [0x2000 + R13]\nCMP RCX,qword ptr [RSP]\nJA 0x00404d06\nMOV EDI,0x2010\nCALL 0x004094d0\nMOV R12,RBP\nMOV RBP,RAX\nJMP 0x00404d3d\nMOV RDI,RBP\nCALL 0x00401750\nCMP R15,-0x1\nJZ 0x00404e4d\nMOV RSI,qword ptr [0x2000 + R13]\nMOV RAX,R14\nSUB RAX,RSI\nMOV RCX,qword ptr [RSP]\nCMP RAX,RCX\nMOV RBX,R13\nJBE 0x00404e09\nMOV RBX,R13\nNOP dword ptr [RAX + RAX*0x1]\nMOV R14,RAX\nMOV RBX,qword ptr [0x2008 + RBX]\nMOV RSI,qword ptr [0x2000 + RBX]\nSUB RAX,RSI\nCMP RAX,RCX\nJA 0x00404df0\nXOR EAX,EAX\nSUB R14,RCX\nCMOVA RAX,R14\nLEA RDI,[RBX + RAX*0x1]\nSUB RSI,RAX\nCALL 0x00404b50\nMOV RBP,qword ptr [0x2008 + RBX]\nMOV R14B,0x1\nJMP 0x00404e46\nMOV RSI,qword ptr [0x2000 + RBP]\nMOV RDI,RBP\nCALL 0x00404b50\nMOV RBP,qword ptr [0x2008 + RBP]\nTEST RBP,RBP\nJNZ 0x00404e30\nJMP 0x00404e8d\nCALL 0x00401770\nMOV R15D,dword ptr [RAX]\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x40c200\nMOV EDX,0x5\nCALL 0x00401840\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x8]\nCALL 0x004087b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,RBP\nCALL 0x00401af0\nTEST R13,R13\nJZ 0x00404eb7\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RBX,qword ptr [0x2008 + R13]\nMOV RDI,R13\nCALL 0x00401750\nTEST RBX,RBX\nMOV R13,RBX\nJNZ 0x00404ea0\nMOV EAX,R14D\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1866
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n48 89 4c 24 10\n48 89 14 24\n89 f3\n48 89 7c 24 08\nbf 10 20 00 00\ne8 e8 47 00 00\n48 89 c5\n0f 57 c0\n0f 11 85 00 20 00 00\nbf 10 20 00 00\ne8 d1 47 00 00\n31 c9\n49 89 ed\neb 0a\n4c 89 e8\n4d 8b ad 08 20 00 00\n49 89 ec\n48 89 c5\n49 89 ce\neb 22\n4c 01 e7\n48 89 ee\n4c 89 fa\ne8 92 cc ff ff\n48 8b 85 00 20 00 00\n49 01 84 24 00 20 00 00\nba 00 20 00 00\n89 df\n48 89 ee\ne8 94 40 00 00\n49 89 c7\n49 8d 47 01\n48 83 f8 02\n72 61\n48 8b 44 24 10\n4c 01 38\n4c 89 bd 00 20 00 00\n48 c7 85 08 20 00 00 00 00 00 00\n4d 01 fe\n49 8b bc 24 00 20 00 00\n4c 89 f8\n48 01 f8\n48 3d ff 1f 00 00\n76 94\n49 89 ac 24 08 20 00 00\n4c 89 f1\n49 2b 8d 00 20 00 00\n48 3b 0c 24\n0f 87 5e ff ff ff\nbf 10 20 00 00\ne8 1e 47 00 00\n49 89 ec\n48 89 c5\neb 83\n48 89 ef\ne8 8e c9 ff ff\n49 83 ff ff\n0f 84 81 00 00 00\n49 8b b5 00 20 00 00\n4c 89 f0\n48 29 f0\n48 8b 0c 24\n48 39 c8\n4c 89 eb\n76 24\n4c 89 eb\n0f 1f 84 00 00 00 00 00\n49 89 c6\n48 8b 9b 08 20 00 00\n48 8b b3 00 20 00 00\n48 29 f0\n48 39 c8\n77 e7\n31 c0\n49 29 ce\n49 0f 47 c6\n48 8d 3c 03\n48 29 c6\ne8 32 fd ff ff\n48 8b ab 08 20 00 00\n41 b6 01\neb 1c\n48 8b b5 00 20 00 00\n48 89 ef\ne8 11 fd ff ff\n48 8b ad 08 20 00 00\n48 85 ed\n75 e5\neb 40\ne8 1e c9 ff ff\n44 8b 38\n45 31 f6\n31 ff\nbe 00 c2 40 00\nba 05 00 00 00\ne8 d7 c9 ff ff\n48 89 c5\nbf 04 00 00 00\n48 8b 74 24 08\ne8 35 39 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 fe\n48 89 ea\ne8 63 cc ff ff\n4d 85 ed\n74 25\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 8b 9d 08 20 00 00\n4c 89 ef\ne8 a1 c8 ff ff\n48 85 db\n49 89 dd\n75 e9\n44 89 f0\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1867
S'.text:0000000000404cc0\n.text:0000000000404cc1\n.text:0000000000404cc3\n.text:0000000000404cc5\n.text:0000000000404cc7\n.text:0000000000404cc9\n.text:0000000000404cca\n.text:0000000000404cce\n.text:0000000000404cd3\n.text:0000000000404cd7\n.text:0000000000404cd9\n.text:0000000000404cde\n.text:0000000000404ce3\n.text:0000000000404ce8\n.text:0000000000404ceb\n.text:0000000000404cee\n.text:0000000000404cf5\n.text:0000000000404cfa\n.text:0000000000404cff\n.text:0000000000404d01\n.text:0000000000404d04\n.text:0000000000404d06\n.text:0000000000404d09\n.text:0000000000404d10\n.text:0000000000404d13\n.text:0000000000404d16\n.text:0000000000404d19\n.text:0000000000404d20\n.text:0000000000404d23\n.text:0000000000404d26\n.text:0000000000404d29\n.text:0000000000404d2e\n.text:0000000000404d35\n.text:0000000000404d3d\n.text:0000000000404d42\n.text:0000000000404d44\n.text:0000000000404d47\n.text:0000000000404d4c\n.text:0000000000404d4f\n.text:0000000000404d53\n.text:0000000000404d57\n.text:0000000000404d59\n.text:0000000000404d5e\n.text:0000000000404d61\n.text:0000000000404d68\n.text:0000000000404d73\n.text:0000000000404d76\n.text:0000000000404d7e\n.text:0000000000404d81\n.text:0000000000404d84\n.text:0000000000404d8a\n.text:0000000000404d8c\n.text:0000000000404d94\n.text:0000000000404d97\n.text:0000000000404d9e\n.text:0000000000404da2\n.text:0000000000404da8\n.text:0000000000404dad\n.text:0000000000404db2\n.text:0000000000404db5\n.text:0000000000404db8\n.text:0000000000404dba\n.text:0000000000404dbd\n.text:0000000000404dc2\n.text:0000000000404dc6\n.text:0000000000404dcc\n.text:0000000000404dd3\n.text:0000000000404dd6\n.text:0000000000404dd9\n.text:0000000000404ddd\n.text:0000000000404de0\n.text:0000000000404de3\n.text:0000000000404de5\n.text:0000000000404de8\n.text:0000000000404df0\n.text:0000000000404df3\n.text:0000000000404dfa\n.text:0000000000404e01\n.text:0000000000404e04\n.text:0000000000404e07\n.text:0000000000404e09\n.text:0000000000404e0b\n.text:0000000000404e0e\n.text:0000000000404e12\n.text:0000000000404e16\n.text:0000000000404e19\n.text:0000000000404e1e\n.text:0000000000404e25\n.text:0000000000404e28\n.text:0000000000404e30\n.text:0000000000404e37\n.text:0000000000404e3a\n.text:0000000000404e3f\n.text:0000000000404e46\n.text:0000000000404e49\n.text:0000000000404e4b\n.text:0000000000404e4d\n.text:0000000000404e52\n.text:0000000000404e55\n.text:0000000000404e58\n.text:0000000000404e5a\n.text:0000000000404e5f\n.text:0000000000404e64\n.text:0000000000404e69\n.text:0000000000404e6c\n.text:0000000000404e71\n.text:0000000000404e76\n.text:0000000000404e7b\n.text:0000000000404e7e\n.text:0000000000404e80\n.text:0000000000404e82\n.text:0000000000404e85\n.text:0000000000404e88\n.text:0000000000404e8d\n.text:0000000000404e90\n.text:0000000000404e92\n.text:0000000000404ea0\n.text:0000000000404ea7\n.text:0000000000404eaa\n.text:0000000000404eaf\n.text:0000000000404eb2\n.text:0000000000404eb5\n.text:0000000000404eb7\n.text:0000000000404eba\n.text:0000000000404ebe\n.text:0000000000404ebf\n.text:0000000000404ec1\n.text:0000000000404ec3\n.text:0000000000404ec5\n.text:0000000000404ec7\n.text:0000000000404ec8\n'
p1868
tp1869
sS'hash_table_ok'
p1870
(S'\n__stdcall hash_table_ok(Hash_table * table)\n'
p1871
V\u000a_Bool hash_table_ok(Hash_table *table)\u000a\u000a{\u000a  hash_entry **pphVar1;\u000a  undefined uVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  hash_entry *phVar5;\u000a  hash_entry *phVar6;\u000a  \u000a  phVar6 = table->bucket;\u000a  if (phVar6 < table->bucket_limit) {\u000a    sVar4 = 0;\u000a    sVar3 = 0;\u000a    do {\u000a      phVar5 = phVar6;\u000a      if (phVar6->data != (void *)0x0) {\u000a        do {\u000a          sVar4 = sVar4 + 1;\u000a          pphVar1 = &phVar5->next;\u000a          phVar5 = *pphVar1;\u000a        } while (*pphVar1 != (hash_entry *)0x0);\u000a        sVar3 = sVar3 + 1;\u000a      }\u000a      phVar6 = phVar6 + 1;\u000a    } while (phVar6 < table->bucket_limit);\u000a  }\u000a  else {\u000a    sVar3 = 0;\u000a    sVar4 = 0;\u000a  }\u000a  if ((sVar3 != table->n_buckets_used) || (uVar2 = 1, sVar4 != table->n_entries)) {\u000a    uVar2 = 0;\u000a  }\u000a  return (_Bool)uVar2;\u000a}\u000a\u000a
p1872
S'MOV RSI,qword ptr [RDI]\nCMP RSI,qword ptr [RDI + 0x8]\nJNC 0x004064ca\nMOV R8,qword ptr [RDI + 0x8]\nXOR ECX,ECX\nXOR EAX,EAX\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP qword ptr [RSI],0x0\nJZ 0x004064bf\nMOV RDX,RSI\nNOP dword ptr [RAX]\nINC RCX\nMOV RDX,qword ptr [RDX + 0x8]\nTEST RDX,RDX\nJNZ 0x004064b0\nINC RAX\nADD RSI,0x10\nCMP RSI,R8\nJC 0x004064a0\nJMP 0x004064ce\nXOR EAX,EAX\nXOR ECX,ECX\nCMP RAX,qword ptr [RDI + 0x18]\nJNZ 0x004064dc\nMOV AL,0x1\nCMP RCX,qword ptr [RDI + 0x20]\nJZ 0x004064de\nXOR EAX,EAX\nRET\n'
p1873
S'48 8b 37\n48 3b 77 08\n73 41\n4c 8b 47 08\n31 c9\n31 c0\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 83 3e 00\n74 19\n48 89 f2\n0f 1f 80 00 00 00 00\n48 ff c1\n48 8b 52 08\n48 85 d2\n75 f4\n48 ff c0\n48 83 c6 10\n4c 39 c6\n72 d8\neb 04\n31 c0\n31 c9\n48 3b 47 18\n75 08\nb0 01\n48 3b 4f 20\n74 02\n31 c0\nc3\n'
p1874
S'.text:0000000000406480\n.text:0000000000406483\n.text:0000000000406487\n.text:0000000000406489\n.text:000000000040648d\n.text:000000000040648f\n.text:0000000000406491\n.text:00000000004064a0\n.text:00000000004064a4\n.text:00000000004064a6\n.text:00000000004064a9\n.text:00000000004064b0\n.text:00000000004064b3\n.text:00000000004064b7\n.text:00000000004064ba\n.text:00000000004064bc\n.text:00000000004064bf\n.text:00000000004064c3\n.text:00000000004064c6\n.text:00000000004064c8\n.text:00000000004064ca\n.text:00000000004064cc\n.text:00000000004064ce\n.text:00000000004064d2\n.text:00000000004064d4\n.text:00000000004064d6\n.text:00000000004064da\n.text:00000000004064dc\n.text:00000000004064de\n'
p1875
tp1876
sS'strcaseeq2'
p1877
(S'\n__stdcall strcaseeq2()\n'
p1878
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1879
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x0040a020\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00408be6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00408bed\nJMP 0x00408c1a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00408c1a\nTEST BPL,BPL\nJZ 0x00408c15\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00408c30\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1880
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 4d 14 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1881
S'.text:0000000000408bb0\n.text:0000000000408bb1\n.text:0000000000408bb3\n.text:0000000000408bb5\n.text:0000000000408bb7\n.text:0000000000408bb9\n.text:0000000000408bba\n.text:0000000000408bbb\n.text:0000000000408bbe\n.text:0000000000408bc1\n.text:0000000000408bc4\n.text:0000000000408bc7\n.text:0000000000408bc9\n.text:0000000000408bcc\n.text:0000000000408bce\n.text:0000000000408bd3\n.text:0000000000408bd7\n.text:0000000000408bd9\n.text:0000000000408bdb\n.text:0000000000408bde\n.text:0000000000408be0\n.text:0000000000408be2\n.text:0000000000408be4\n.text:0000000000408be6\n.text:0000000000408be8\n.text:0000000000408beb\n.text:0000000000408bed\n.text:0000000000408bf0\n.text:0000000000408bf2\n.text:0000000000408bf6\n.text:0000000000408bfa\n.text:0000000000408bfe\n.text:0000000000408c02\n.text:0000000000408c05\n.text:0000000000408c09\n.text:0000000000408c0a\n.text:0000000000408c0c\n.text:0000000000408c0e\n.text:0000000000408c10\n.text:0000000000408c12\n.text:0000000000408c13\n.text:0000000000408c15\n.text:0000000000408c1a\n.text:0000000000408c1e\n.text:0000000000408c1f\n.text:0000000000408c21\n.text:0000000000408c23\n.text:0000000000408c25\n.text:0000000000408c27\n.text:0000000000408c28\n'
p1882
tp1883
sS'strcaseeq1'
p1884
(S'\n__stdcall strcaseeq1()\n'
p1885
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1886
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x0040a020\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x00408b5d\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00408b64\nJMP 0x00408b97\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00408b97\nTEST BPL,BPL\nJZ 0x00408b92\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00408bb0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1887
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 d6 14 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1888
S'.text:0000000000408b20\n.text:0000000000408b21\n.text:0000000000408b23\n.text:0000000000408b25\n.text:0000000000408b27\n.text:0000000000408b29\n.text:0000000000408b2a\n.text:0000000000408b2b\n.text:0000000000408b30\n.text:0000000000408b33\n.text:0000000000408b36\n.text:0000000000408b39\n.text:0000000000408b3b\n.text:0000000000408b3e\n.text:0000000000408b43\n.text:0000000000408b45\n.text:0000000000408b4a\n.text:0000000000408b4e\n.text:0000000000408b50\n.text:0000000000408b52\n.text:0000000000408b55\n.text:0000000000408b57\n.text:0000000000408b59\n.text:0000000000408b5b\n.text:0000000000408b5d\n.text:0000000000408b5f\n.text:0000000000408b62\n.text:0000000000408b64\n.text:0000000000408b67\n.text:0000000000408b69\n.text:0000000000408b6d\n.text:0000000000408b71\n.text:0000000000408b75\n.text:0000000000408b7b\n.text:0000000000408b7f\n.text:0000000000408b82\n.text:0000000000408b86\n.text:0000000000408b87\n.text:0000000000408b89\n.text:0000000000408b8b\n.text:0000000000408b8d\n.text:0000000000408b8f\n.text:0000000000408b90\n.text:0000000000408b92\n.text:0000000000408b97\n.text:0000000000408b9b\n.text:0000000000408b9c\n.text:0000000000408b9e\n.text:0000000000408ba0\n.text:0000000000408ba2\n.text:0000000000408ba4\n.text:0000000000408ba5\n'
p1889
tp1890
sS'strcaseeq4'
p1891
(S'\n__stdcall strcaseeq4()\n'
p1892
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1893
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x0040a020\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x00408ccc\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00408cd3\nJMP 0x00408cf4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00408cf4\nTEST BPL,BPL\nJZ 0x00408cef\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00408d00\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1894
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 67 13 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1895
S'.text:0000000000408ca0\n.text:0000000000408ca1\n.text:0000000000408ca3\n.text:0000000000408ca5\n.text:0000000000408ca6\n.text:0000000000408ca7\n.text:0000000000408caa\n.text:0000000000408cad\n.text:0000000000408caf\n.text:0000000000408cb2\n.text:0000000000408cb4\n.text:0000000000408cb9\n.text:0000000000408cbd\n.text:0000000000408cbf\n.text:0000000000408cc1\n.text:0000000000408cc4\n.text:0000000000408cc6\n.text:0000000000408cc8\n.text:0000000000408cca\n.text:0000000000408ccc\n.text:0000000000408cce\n.text:0000000000408cd1\n.text:0000000000408cd3\n.text:0000000000408cd6\n.text:0000000000408cd8\n.text:0000000000408cdc\n.text:0000000000408ce0\n.text:0000000000408ce3\n.text:0000000000408ce7\n.text:0000000000408ce8\n.text:0000000000408cea\n.text:0000000000408cec\n.text:0000000000408ced\n.text:0000000000408cef\n.text:0000000000408cf4\n.text:0000000000408cf8\n.text:0000000000408cf9\n.text:0000000000408cfb\n.text:0000000000408cfd\n.text:0000000000408cfe\n'
p1896
tp1897
sS'strcaseeq3'
p1898
(S'\n__stdcall strcaseeq3()\n'
p1899
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1900
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x0040a020\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00408c60\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00408c67\nJMP 0x00408c8a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00408c8a\nTEST BPL,BPL\nJZ 0x00408c85\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00408ca0\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1901
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 d3 13 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1902
S'.text:0000000000408c30\n.text:0000000000408c31\n.text:0000000000408c33\n.text:0000000000408c35\n.text:0000000000408c37\n.text:0000000000408c38\n.text:0000000000408c3b\n.text:0000000000408c3e\n.text:0000000000408c41\n.text:0000000000408c43\n.text:0000000000408c46\n.text:0000000000408c48\n.text:0000000000408c4d\n.text:0000000000408c51\n.text:0000000000408c53\n.text:0000000000408c55\n.text:0000000000408c58\n.text:0000000000408c5a\n.text:0000000000408c5c\n.text:0000000000408c5e\n.text:0000000000408c60\n.text:0000000000408c62\n.text:0000000000408c65\n.text:0000000000408c67\n.text:0000000000408c6a\n.text:0000000000408c6c\n.text:0000000000408c70\n.text:0000000000408c74\n.text:0000000000408c78\n.text:0000000000408c7b\n.text:0000000000408c7c\n.text:0000000000408c7e\n.text:0000000000408c80\n.text:0000000000408c82\n.text:0000000000408c83\n.text:0000000000408c85\n.text:0000000000408c8a\n.text:0000000000408c8b\n.text:0000000000408c8d\n.text:0000000000408c8f\n.text:0000000000408c91\n.text:0000000000408c92\n'
p1903
tp1904
sS'last_component'
p1905
(S'\n__stdcall last_component(char * name)\n'
p1906
V\u000achar * last_component(char *name)\u000a\u000a{\u000a  bool bVar1;\u000a  bool bVar2;\u000a  char *pcVar3;\u000a  \u000a  name = name + -1;\u000a  do {\u000a    pcVar3 = name + 1;\u000a    name = name + 1;\u000a  } while (*pcVar3 == '/');\u000a  bVar2 = false;\u000a  pcVar3 = name;\u000a  do {\u000a    bVar1 = true;\u000a    if (*name != '/') {\u000a      if (*name == 0) {\u000a        return pcVar3;\u000a      }\u000a      bVar1 = bVar2;\u000a      if (bVar2) {\u000a        pcVar3 = name;\u000a        bVar1 = false;\u000a      }\u000a    }\u000a    bVar2 = bVar1;\u000a    name = name + 1;\u000a  } while( true );\u000a}\u000a\u000a
p1907
S'DEC RDI\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP byte ptr [RDI + 0x1],0x2f\nLEA RDI,[RDI + 0x1]\nJZ 0x004062c0\nXOR ESI,ESI\nMOV RAX,RDI\nJMP 0x004062e6\nINC RAX\nMOV SIL,DL\nMOVZX ECX,byte ptr [RAX]\nMOV DL,0x1\nCMP CL,0x2f\nJZ 0x004062e0\nTEST CL,CL\nJZ 0x00406307\nMOV EDX,ESI\nAND DL,0x1\nJZ 0x004062fd\nXOR ESI,ESI\nTEST DL,DL\nCMOVNZ RDI,RAX\nMOV EDX,ESI\nJMP 0x004062e0\nMOV RAX,RDI\nRET\n'
p1908
S'48 ff cf\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n80 7f 01 2f\n48 8d 7f 01\n74 f6\n31 f6\n48 89 f8\neb 15\n48 ff c0\n40 88 d6\n0f b6 08\nb2 01\n80 f9 2f\n74 f0\n84 c9\n74 13\n89 f2\n80 e2 01\n74 02\n31 f6\n84 d2\n48 0f 45 f8\n89 f2\neb d9\n48 89 f8\nc3\n'
p1909
S'.text:00000000004062b0\n.text:00000000004062b3\n.text:00000000004062c0\n.text:00000000004062c4\n.text:00000000004062c8\n.text:00000000004062ca\n.text:00000000004062cc\n.text:00000000004062cf\n.text:00000000004062e0\n.text:00000000004062e3\n.text:00000000004062e6\n.text:00000000004062e9\n.text:00000000004062eb\n.text:00000000004062ee\n.text:00000000004062f0\n.text:00000000004062f2\n.text:00000000004062f4\n.text:00000000004062f6\n.text:00000000004062f9\n.text:00000000004062fb\n.text:00000000004062fd\n.text:00000000004062ff\n.text:0000000000406303\n.text:0000000000406305\n.text:0000000000406307\n.text:000000000040630a\n'
p1910
tp1911
sS'register_tm_clones'
p1912
(S'\n__stdcall register_tm_clones()\n'
p1913
V\u000a/* WARNING: Removing unreachable block (ram,0x00401c73) */\u000a/* WARNING: Removing unreachable block (ram,0x00401c7d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1914
S'MOV ESI,0x6102f8\nPUSH RBP\nSUB RSI,0x6102f8\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401c88\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401c88\nPOP RBP\nMOV EDI,0x6102f8\nJMP RAX\nPOP RBP\nRET\n'
p1915
S'be f8 02 61 00\n55\n48 81 ee f8 02 61 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf f8 02 61 00\nff e0\n5d\nc3\n'
p1916
S'.text:0000000000401c50\n.text:0000000000401c55\n.text:0000000000401c56\n.text:0000000000401c5d\n.text:0000000000401c61\n.text:0000000000401c64\n.text:0000000000401c67\n.text:0000000000401c6b\n.text:0000000000401c6e\n.text:0000000000401c71\n.text:0000000000401c73\n.text:0000000000401c78\n.text:0000000000401c7b\n.text:0000000000401c7d\n.text:0000000000401c7e\n.text:0000000000401c83\n.text:0000000000401c88\n.text:0000000000401c89\n'
p1917
tp1918
sS'c_islower'
p1919
(S'\n__stdcall c_islower()\n'
p1920
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1921
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1922
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1923
S'.text:0000000000409fc0\n.text:0000000000409fc3\n.text:0000000000409fc6\n.text:0000000000409fc9\n'
p1924
tp1925
sS'timespec_cmp'
p1926
(S'\n__stdcall timespec_cmp()\n'
p1927
V\u000aint timespec_cmp(void)\u000a\u000a{\u000a  int in_ECX;\u000a  long in_RDX;\u000a  int in_ESI;\u000a  int iVar1;\u000a  long in_RDI;\u000a  \u000a  iVar1 = -1;\u000a  if ((in_RDX <= in_RDI) && (iVar1 = 1, in_RDI <= in_RDX)) {\u000a    iVar1 = in_ESI - in_ECX;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1928
S'MOV EAX,0xffffffff\nCMP RDI,RDX\nJL 0x00408f15\nMOV EAX,0x1\nJG 0x00408f15\nSUB ESI,ECX\nMOV EAX,ESI\nRET\n'
p1929
S'b8 ff ff ff ff\n48 39 d7\n7c 0b\nb8 01 00 00 00\n7f 04\n29 ce\n89 f0\nc3\n'
p1930
S'.text:0000000000408f00\n.text:0000000000408f05\n.text:0000000000408f08\n.text:0000000000408f0a\n.text:0000000000408f0f\n.text:0000000000408f11\n.text:0000000000408f13\n.text:0000000000408f15\n'
p1931
tp1932
sS'write_header'
p1933
(S'\n__stdcall write_header(char * pretty_filename)\n'
p1934
V\u000avoid write_header(char *pretty_filename)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  \u000a  uVar1 = 0x40bae8;\u000a  if (write_header_first_file != 0) {\u000a    uVar1 = 0x40bae7;\u000a  }\u000a  __printf_chk(1,"%s==> %s <==\u005cn",uVar1,pretty_filename);\u000a  write_header_first_file = 1;\u000a  return;\u000a}\u000a\u000a
p1935
S'PUSH RAX\nMOV RCX,RDI\nMOV AL,byte ptr [0x00610359]\nMOV ESI,0x40bae7\nMOV EDX,0x40bae8\nTEST AL,AL\nCMOVNZ RDX,RSI\nMOV EDI,0x1\nMOV ESI,0x40c263\nXOR EAX,EAX\nCALL 0x00401ae0\nMOV byte ptr [0x00610359],0x1\nPOP RAX\nRET\n'
p1936
S'50\n48 89 f9\n8a 05 df c5 20 00\nbe e7 ba 40 00\nba e8 ba 40 00\n84 c0\n48 0f 45 d6\nbf 01 00 00 00\nbe 63 c2 40 00\n31 c0\ne8 45 dd ff ff\nc6 05 b7 c5 20 00 01\n58\nc3\n'
p1937
S'.text:0000000000403d70\n.text:0000000000403d71\n.text:0000000000403d74\n.text:0000000000403d7a\n.text:0000000000403d7f\n.text:0000000000403d84\n.text:0000000000403d86\n.text:0000000000403d8a\n.text:0000000000403d8f\n.text:0000000000403d94\n.text:0000000000403d96\n.text:0000000000403d9b\n.text:0000000000403da2\n.text:0000000000403da3\n'
p1938
tp1939
sS'argmatch'
p1940
(S'\n__stdcall argmatch(char * arg, char * * arglist, char * vallist, size_t valsize)\n'
p1941
V\u000aptrdiff_t argmatch(char *arg,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  bool bVar1;\u000a  long lVar2;\u000a  int iVar3;\u000a  size_t __n;\u000a  size_t sVar4;\u000a  long lVar5;\u000a  ptrdiff_t pVar6;\u000a  char *__s2;\u000a  char *__s1;\u000a  long local_50;\u000a  \u000a  __n = strlen(arg);\u000a  __s1 = *arglist;\u000a  if (__s1 == (char *)0x0) {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a  }\u000a  else {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a    lVar5 = 0;\u000a    __s2 = vallist;\u000a    do {\u000a      iVar3 = strncmp(__s1,arg,__n);\u000a      lVar2 = local_50;\u000a      if (iVar3 == 0) {\u000a        sVar4 = strlen(__s1);\u000a        if (sVar4 == __n) {\u000a          return lVar5;\u000a        }\u000a        lVar2 = lVar5;\u000a        if ((local_50 != -1) &&\u000a           ((vallist == (char *)0x0 ||\u000a            (iVar3 = memcmp(vallist + local_50 * valsize,__s2,valsize), lVar2 = local_50, iVar3 != 0\u000a            )))) {\u000a          bVar1 = true;\u000a          lVar2 = local_50;\u000a        }\u000a      }\u000a      local_50 = lVar2;\u000a      __s1 = arglist[lVar5 + 1];\u000a      lVar5 = lVar5 + 1;\u000a      __s2 = __s2 + valsize;\u000a    } while (__s1 != (char *)0x0);\u000a  }\u000a  pVar6 = -2;\u000a  if (!bVar1) {\u000a    pVar6 = local_50;\u000a  }\u000a  return pVar6;\u000a}\u000a\u000a
p1942
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R13,RCX\nMOV R14,RDX\nMOV RBP,RSI\nMOV R12,RDI\nCALL 0x00401860\nMOV RBX,RAX\nMOV qword ptr [RSP + 0x20],RBP\nMOV R15,qword ptr [RBP]\nTEST R15,R15\nJZ 0x00405e47\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nMOV qword ptr [RSP + 0x18],R14\nXOR EBP,EBP\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,R15\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x00401780\nTEST EAX,EAX\nJNZ 0x00405e30\nMOV RDI,R15\nCALL 0x00401860\nCMP RAX,RBX\nJZ 0x00405e69\nCMP qword ptr [RSP + 0x8],-0x1\nJZ 0x00405e25\nMOV RAX,qword ptr [RSP + 0x18]\nTEST RAX,RAX\nJZ 0x00405e1c\nMOV RDI,qword ptr [RSP + 0x8]\nIMUL RDI,R13\nADD RDI,RAX\nMOV RSI,R14\nMOV RDX,R13\nCALL 0x00401960\nTEST EAX,EAX\nJZ 0x00405e30\nMOV AL,0x1\nMOV qword ptr [RSP + 0x10],RAX\nJMP 0x00405e30\nMOV qword ptr [RSP + 0x8],RBP\nNOP word ptr [RAX + RAX*0x1]\nMOV RAX,qword ptr [RSP + 0x20]\nMOV R15,qword ptr [RAX + RBP*0x8 + 0x8]\nINC RBP\nADD R14,R13\nTEST R15,R15\nJNZ 0x00405dd0\nJMP 0x00405e57\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nTEST byte ptr [RSP + 0x10],0x1\nMOV RBP,-0x2\nCMOVZ RBP,qword ptr [RSP + 0x8]\nMOV RAX,RBP\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1943
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 cd\n49 89 d6\n48 89 f5\n49 89 fc\ne8 c1 ba ff ff\n48 89 c3\n48 89 6c 24 20\n4c 8b 7d 00\n4d 85 ff\n0f 84 93 00 00 00\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\n4c 89 74 24 18\n31 ed\n0f 1f 44 00 00\n4c 89 ff\n4c 89 e6\n48 89 da\ne8 a2 b9 ff ff\n85 c0\n75 4e\n4c 89 ff\ne8 76 ba ff ff\n48 39 d8\n74 7a\n48 83 7c 24 08 ff\n74 2e\n48 8b 44 24 18\n48 85 c0\n74 1b\n48 8b 7c 24 08\n49 0f af fd\n48 01 c7\n4c 89 f6\n4c 89 ea\ne8 48 bb ff ff\n85 c0\n74 14\nb0 01\n48 89 44 24 10\neb 0b\n48 89 6c 24 08\n66 0f 1f 44 00 00\n48 8b 44 24 20\n4c 8b 7c e8 08\n48 ff c5\n4d 01 ee\n4d 85 ff\n75 8b\neb 10\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\nf6 44 24 10 01\n48 c7 c5 fe ff ff ff\n48 0f 44 6c 24 08\n48 89 e8\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1944
S'.text:0000000000405d80\n.text:0000000000405d81\n.text:0000000000405d83\n.text:0000000000405d85\n.text:0000000000405d87\n.text:0000000000405d89\n.text:0000000000405d8a\n.text:0000000000405d8e\n.text:0000000000405d91\n.text:0000000000405d94\n.text:0000000000405d97\n.text:0000000000405d9a\n.text:0000000000405d9f\n.text:0000000000405da2\n.text:0000000000405da7\n.text:0000000000405dab\n.text:0000000000405dae\n.text:0000000000405db4\n.text:0000000000405dbd\n.text:0000000000405dbf\n.text:0000000000405dc4\n.text:0000000000405dc9\n.text:0000000000405dcb\n.text:0000000000405dd0\n.text:0000000000405dd3\n.text:0000000000405dd6\n.text:0000000000405dd9\n.text:0000000000405dde\n.text:0000000000405de0\n.text:0000000000405de2\n.text:0000000000405de5\n.text:0000000000405dea\n.text:0000000000405ded\n.text:0000000000405def\n.text:0000000000405df5\n.text:0000000000405df7\n.text:0000000000405dfc\n.text:0000000000405dff\n.text:0000000000405e01\n.text:0000000000405e06\n.text:0000000000405e0a\n.text:0000000000405e0d\n.text:0000000000405e10\n.text:0000000000405e13\n.text:0000000000405e18\n.text:0000000000405e1a\n.text:0000000000405e1c\n.text:0000000000405e1e\n.text:0000000000405e23\n.text:0000000000405e25\n.text:0000000000405e2a\n.text:0000000000405e30\n.text:0000000000405e35\n.text:0000000000405e3a\n.text:0000000000405e3d\n.text:0000000000405e40\n.text:0000000000405e43\n.text:0000000000405e45\n.text:0000000000405e47\n.text:0000000000405e50\n.text:0000000000405e52\n.text:0000000000405e57\n.text:0000000000405e5c\n.text:0000000000405e63\n.text:0000000000405e69\n.text:0000000000405e6c\n.text:0000000000405e70\n.text:0000000000405e71\n.text:0000000000405e73\n.text:0000000000405e75\n.text:0000000000405e77\n.text:0000000000405e79\n.text:0000000000405e7a\n'
p1945
tp1946
sS'clearerr_unlocked'
p1947
(S'\n__stdcall clearerr_unlocked(FILE * __stream)\n'
p1948
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid clearerr_unlocked(FILE *__stream)\u000a\u000a{\u000a  (*(code *)PTR_clearerr_unlocked_00610070)();\u000a  return;\u000a}\u000a\u000a
p1949
S'JMP qword ptr [0x00610070]\n'
p1950
S'ff 25 7a e8 20 00\n'
p1951
S'.plt:00000000004017f0\n'
p1952
tp1953
sS'fwrite'
p1954
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1955
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_00610230)();\u000a  return sVar1;\u000a}\u000a\u000a
p1956
S'JMP qword ptr [0x00610230]\n'
p1957
S'ff 25 ba e6 20 00\n'
p1958
S'.plt:0000000000401b70\n'
p1959
tp1960
sS'rotl_sz'
p1961
(S'\n__stdcall rotl_sz(size_t x)\n'
p1962
V\u000asize_t rotl_sz(size_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x << bVar1 | x >> 0x40 - bVar1;\u000a}\u000a\u000a
p1963
S'MOV ECX,ESI\nROL RDI,CL\nMOV RAX,RDI\nRET\n'
p1964
S'89 f1\n48 d3 c7\n48 89 f8\nc3\n'
p1965
S'.text:0000000000409e80\n.text:0000000000409e82\n.text:0000000000409e85\n.text:0000000000409e88\n'
p1966
tp1967
sS'__do_global_dtors_aux'
p1968
(S'\n__stdcall __do_global_dtors_aux()\n'
p1969
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1970
S'CMP byte ptr [0x00610348],0x0\nJNZ 0x00401caa\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00401c10\nPOP RBP\nMOV byte ptr [0x00610348],0x1\nRET\n'
p1971
S'80 3d b1 e6 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 9e e6 20 00 01\nf3 c3\n'
p1972
S'.text:0000000000401c90\n.text:0000000000401c97\n.text:0000000000401c99\n.text:0000000000401c9a\n.text:0000000000401c9d\n.text:0000000000401ca2\n.text:0000000000401ca3\n.text:0000000000401caa\n'
p1973
tp1974
sS'c_isprint'
p1975
(S'\n__stdcall c_isprint()\n'
p1976
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1977
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1978
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1979
S'.text:0000000000409fd0\n.text:0000000000409fd3\n.text:0000000000409fd6\n.text:0000000000409fd9\n'
p1980
tp1981
sS'rpl_nanosleep'
p1982
(S'\n__stdcall rpl_nanosleep(timespec * requested_delay, timespec * remaining_delay)\n'
p1983
V\u000aint rpl_nanosleep(timespec *requested_delay,timespec *remaining_delay)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  long lVar3;\u000a  timespec local_28;\u000a  \u000a  if ((ulong)requested_delay->tv_nsec < 1000000000) {\u000a    lVar3 = requested_delay->tv_sec;\u000a    local_28.tv_nsec = requested_delay->tv_nsec;\u000a    do {\u000a      if (lVar3 < 0x1fa401) {\u000a        local_28.tv_sec = lVar3;\u000a        iVar1 = nanosleep(&local_28,(timespec *)remaining_delay);\u000a        return iVar1;\u000a      }\u000a      local_28.tv_sec = 0x1fa400;\u000a      iVar1 = nanosleep(&local_28,(timespec *)remaining_delay);\u000a      lVar3 = lVar3 + 0xffe05c00;\u000a      local_28.tv_nsec = 0;\u000a    } while (iVar1 == 0);\u000a    if (remaining_delay != (timespec *)0x0) {\u000a      remaining_delay->tv_sec = remaining_delay->tv_sec + lVar3;\u000a    }\u000a  }\u000a  else {\u000a    piVar2 = __errno_location();\u000a    *piVar2 = 0x16;\u000a    iVar1 = -1;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1984
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV R15,RSI\nCMP qword ptr [RDI + 0x8],0x3b9aca00\nJC 0x00409dc8\nCALL 0x00401770\nMOV dword ptr [RAX],0x16\nMOV EAX,0xffffffff\nJMP 0x00409e2a\nMOV RBX,qword ptr [RDI]\nMOV RCX,qword ptr [RDI + 0x8]\nMOV R14,RSP\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV qword ptr [RSP + 0x8],RCX\nCMP RBX,0x1fa401\nJL 0x00409e1b\nMOV qword ptr [RSP],0x1fa400\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x004018d0\nADD RBX,0xffe05c00\nTEST EAX,EAX\nMOV ECX,0x0\nJZ 0x00409de0\nTEST R15,R15\nJZ 0x00409e2a\nADD qword ptr [R15],RBX\nJMP 0x00409e2a\nMOV qword ptr [RSP],RBX\nMOV RDI,RSP\nMOV RSI,R15\nCALL 0x004018d0\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1985
S'41 57\n41 56\n53\n48 83 ec 10\n49 89 f7\n48 81 7f 08 00 ca 9a 3b\n72 12\ne8 b5 79 ff ff\nc7 00 16 00 00 00\nb8 ff ff ff ff\neb 62\n48 8b 1f\n48 8b 4f 08\n49 89 e6\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 4c 24 08\n48 81 fb 01 a4 1f 00\n7c 2d\n48 c7 04 24 00 a4 1f 00\n4c 89 f7\n4c 89 fe\ne8 cf 7a ff ff\n48 81 c3 00 5c e0 ff\n85 c0\nb9 00 00 00 00\n74 cf\n4d 85 ff\n74 14\n49 01 1f\neb 0f\n48 89 1c 24\n48 89 e7\n4c 89 fe\ne8 a6 7a ff ff\n48 83 c4 10\n5b\n41 5e\n41 5f\nc3\n'
p1986
S'.text:0000000000409da0\n.text:0000000000409da2\n.text:0000000000409da4\n.text:0000000000409da5\n.text:0000000000409da9\n.text:0000000000409dac\n.text:0000000000409db4\n.text:0000000000409db6\n.text:0000000000409dbb\n.text:0000000000409dc1\n.text:0000000000409dc6\n.text:0000000000409dc8\n.text:0000000000409dcb\n.text:0000000000409dcf\n.text:0000000000409dd2\n.text:0000000000409de0\n.text:0000000000409de5\n.text:0000000000409dec\n.text:0000000000409dee\n.text:0000000000409df6\n.text:0000000000409df9\n.text:0000000000409dfc\n.text:0000000000409e01\n.text:0000000000409e08\n.text:0000000000409e0a\n.text:0000000000409e0f\n.text:0000000000409e11\n.text:0000000000409e14\n.text:0000000000409e16\n.text:0000000000409e19\n.text:0000000000409e1b\n.text:0000000000409e1f\n.text:0000000000409e22\n.text:0000000000409e25\n.text:0000000000409e2a\n.text:0000000000409e2e\n.text:0000000000409e2f\n.text:0000000000409e31\n.text:0000000000409e33\n'
p1987
tp1988
sS'_fini'
p1989
(S'\n__stdcall _fini()\n'
p1990
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1991
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1992
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1993
S'.fini:000000000040a700\n.fini:000000000040a704\n.fini:000000000040a708\n'
p1994
tp1995
sS'rpl_fcntl'
p1996
(S'\n__stdcall rpl_fcntl()\n'
p1997
V\u000a/* WARNING: Removing unreachable block (ram,0x00409c9b) */\u000a/* WARNING: Removing unreachable block (ram,0x00409d04) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff38 : 0x00409ca9 */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint rpl_fcntl(void...)\u000a\u000a{\u000a  int have_dupfd_cloexec;\u000a  int __fd;\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  int __cmd;\u000a  uint __fd_00;\u000a  va_list arg;\u000a  ulong local_c8;\u000a  \u000a  if (__cmd == 0x406) {\u000a    if (have_dupfd_cloexec < 0) {\u000a      __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a    }\u000a    else {\u000a      __fd = fcntl(__fd_00,0x406,local_c8 & 0xffffffff);\u000a      have_dupfd_cloexec = 1;\u000a      if ((__fd < 0) && (piVar3 = __errno_location(), *piVar3 == 0x16)) {\u000a        __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a        have_dupfd_cloexec = -1;\u000a        if (__fd < 0) {\u000a          return __fd;\u000a        }\u000a      }\u000a    }\u000a    if (((-1 < __fd) && (have_dupfd_cloexec == -1)) &&\u000a       ((uVar1 = fcntl(__fd,1), (int)uVar1 < 0 ||\u000a        (iVar2 = fcntl(__fd,2,(ulong)(uVar1 | 1),(ulong)(uVar1 | 1)), iVar2 == -1)))) {\u000a      piVar3 = __errno_location();\u000a      iVar2 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar2;\u000a      __fd = -1;\u000a    }\u000a  }\u000a  else {\u000a    __fd = fcntl(__fd_00,__cmd,local_c8);\u000a  }\u000a  return __fd;\u000a}\u000a\u000a
p1998
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0xd8\nMOV R14D,EDI\nTEST AL,AL\nJZ 0x00409c2b\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0x100 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RAX,dword ptr [RSP]\nCMP ESI,0x406\nJNZ 0x00409c86\nCMP EAX,0x28\nJA 0x00409c9b\nMOV RCX,qword ptr [RSP + 0x10]\nADD RCX,RAX\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x00409ca9\nCMP EAX,0x28\nJA 0x00409d04\nMOV RCX,RAX\nADD RCX,qword ptr [RSP + 0x10]\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x00409d12\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV EBX,dword ptr [RCX]\nCMP dword ptr [0x006104c0],0x0\nJS 0x00409d23\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x004017e0\nMOV EBP,EAX\nMOV R15D,0x1\nTEST EBP,EBP\nJNS 0x00409cf4\nCALL 0x00401770\nCMP dword ptr [RAX],0x16\nJNZ 0x00409cf4\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00409be0\nMOV EBP,EAX\nMOV R15D,0xffffffff\nTEST EBP,EBP\nJS 0x00409d86\nMOV dword ptr [0x006104c0],R15D\nTEST EBP,EBP\nJNS 0x00409d37\nJMP 0x00409d86\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RDX,qword ptr [RCX]\nXOR EAX,EAX\nMOV EDI,R14D\nCALL 0x004017e0\nMOV EBP,EAX\nJMP 0x00409d86\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00409be0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00409d86\nCMP dword ptr [0x006104c0],-0x1\nJNZ 0x00409d86\nMOV ESI,0x1\nXOR EAX,EAX\nMOV EDI,EBP\nCALL 0x004017e0\nMOV ECX,EAX\nTEST ECX,ECX\nJS 0x00409d6c\nOR ECX,0x1\nMOV ESI,0x2\nXOR EAX,EAX\nMOV EDI,EBP\nMOV EDX,ECX\nCALL 0x004017e0\nCMP EAX,-0x1\nJNZ 0x00409d86\nCALL 0x00401770\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x00401930\nMOV dword ptr [RBX],R14D\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0xd8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1999
S'55\n41 57\n41 56\n53\n48 81 ec d8 00 00 00\n41 89 fe\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 00 01 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 04 24\n81 fe 06 04 00 00\n75 15\n83 f8 28\n77 25\n48 8b 4c 24 10\n48 01 c1\n8d 40 08\n89 04 24\neb 23\n83 f8 28\n77 79\n48 89 c1\n48 03 4c 24 10\n8d 40 08\n89 04 24\neb 77\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n8b 19\n83 3d 0e 68 20 00 00\n78 6f\n31 c0\n44 89 f7\n89 da\ne8 20 7b ff ff\n89 c5\n41 bf 01 00 00 00\n85 ed\n79 28\ne8 9f 7a ff ff\n83 38 16\n75 1e\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 fc fe ff ff\n89 c5\n41 bf ff ff ff ff\n85 ed\n0f 88 92 00 00 00\n44 89 3d c5 67 20 00\n85 ed\n79 38\ne9 82 00 00 00\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n48 8b 11\n31 c0\n44 89 f7\ne8 c1 7a ff ff\n89 c5\neb 63\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 af fe ff ff\n89 c5\n85 ed\n78 4f\n83 3d 82 67 20 00 ff\n75 46\nbe 01 00 00 00\n31 c0\n89 ef\ne8 92 7a ff ff\n89 c1\n85 c9\n78 18\n83 c9 01\nbe 02 00 00 00\n31 c0\n89 ef\n89 ca\ne8 79 7a ff ff\n83 f8 ff\n75 1a\ne8 ff 79 ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 b2 7b ff ff\n44 89 33\nbd ff ff ff ff\n89 e8\n48 81 c4 d8 00 00 00\n5b\n41 5e\n41 5f\n5d\nc3\n'
p2000
S'.text:0000000000409be0\n.text:0000000000409be1\n.text:0000000000409be3\n.text:0000000000409be5\n.text:0000000000409be6\n.text:0000000000409bed\n.text:0000000000409bf0\n.text:0000000000409bf2\n.text:0000000000409bf4\n.text:0000000000409bf9\n.text:0000000000409bfe\n.text:0000000000409c03\n.text:0000000000409c0b\n.text:0000000000409c13\n.text:0000000000409c1b\n.text:0000000000409c23\n.text:0000000000409c2b\n.text:0000000000409c30\n.text:0000000000409c35\n.text:0000000000409c3a\n.text:0000000000409c3f\n.text:0000000000409c44\n.text:0000000000409c49\n.text:0000000000409c51\n.text:0000000000409c56\n.text:0000000000409c5e\n.text:0000000000409c65\n.text:0000000000409c69\n.text:0000000000409c6f\n.text:0000000000409c71\n.text:0000000000409c74\n.text:0000000000409c76\n.text:0000000000409c7b\n.text:0000000000409c7e\n.text:0000000000409c81\n.text:0000000000409c84\n.text:0000000000409c86\n.text:0000000000409c89\n.text:0000000000409c8b\n.text:0000000000409c8e\n.text:0000000000409c93\n.text:0000000000409c96\n.text:0000000000409c99\n.text:0000000000409c9b\n.text:0000000000409ca0\n.text:0000000000409ca4\n.text:0000000000409ca9\n.text:0000000000409cab\n.text:0000000000409cb2\n.text:0000000000409cb4\n.text:0000000000409cb6\n.text:0000000000409cb9\n.text:0000000000409cbb\n.text:0000000000409cc0\n.text:0000000000409cc2\n.text:0000000000409cc8\n.text:0000000000409cca\n.text:0000000000409ccc\n.text:0000000000409cd1\n.text:0000000000409cd4\n.text:0000000000409cd6\n.text:0000000000409cd8\n.text:0000000000409cda\n.text:0000000000409cdd\n.text:0000000000409cdf\n.text:0000000000409ce4\n.text:0000000000409ce6\n.text:0000000000409cec\n.text:0000000000409cee\n.text:0000000000409cf4\n.text:0000000000409cfb\n.text:0000000000409cfd\n.text:0000000000409cff\n.text:0000000000409d04\n.text:0000000000409d09\n.text:0000000000409d0d\n.text:0000000000409d12\n.text:0000000000409d15\n.text:0000000000409d17\n.text:0000000000409d1a\n.text:0000000000409d1f\n.text:0000000000409d21\n.text:0000000000409d23\n.text:0000000000409d25\n.text:0000000000409d27\n.text:0000000000409d2a\n.text:0000000000409d2c\n.text:0000000000409d31\n.text:0000000000409d33\n.text:0000000000409d35\n.text:0000000000409d37\n.text:0000000000409d3e\n.text:0000000000409d40\n.text:0000000000409d45\n.text:0000000000409d47\n.text:0000000000409d49\n.text:0000000000409d4e\n.text:0000000000409d50\n.text:0000000000409d52\n.text:0000000000409d54\n.text:0000000000409d57\n.text:0000000000409d5c\n.text:0000000000409d5e\n.text:0000000000409d60\n.text:0000000000409d62\n.text:0000000000409d67\n.text:0000000000409d6a\n.text:0000000000409d6c\n.text:0000000000409d71\n.text:0000000000409d74\n.text:0000000000409d77\n.text:0000000000409d79\n.text:0000000000409d7e\n.text:0000000000409d81\n.text:0000000000409d86\n.text:0000000000409d88\n.text:0000000000409d8f\n.text:0000000000409d90\n.text:0000000000409d92\n.text:0000000000409d94\n.text:0000000000409d95\n'
p2001
tp2002
sS'__fpending'
p2003
(S'\n__stdcall __fpending()\n'
p2004
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_00610050)();\u000a  return;\u000a}\u000a\u000a
p2005
S'JMP qword ptr [0x00610050]\n'
p2006
S'ff 25 9a e8 20 00\n'
p2007
S'.plt:00000000004017b0\n'
p2008
tp2009
s.