(dp0
S'ungetc'
p1
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p2
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_0060b150)();\u000a  return iVar1;\u000a}\u000a\u000a
p3
S'JMP qword ptr [0x0060b150]\n'
p4
S'ff 25 aa 9a 20 00\n'
p5
S'.plt:00000000004016a0\n'
p6
tp7
sS'version_etc_arn'
p8
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p9
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_00407e6b,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x405287;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x405308;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x40539c;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p10
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00405118\nMOV EDX,0x407e58\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x004017b0\nJMP 0x0040512d\nMOV EDX,0x407e64\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x004017b0\nXOR EDI,EDI\nMOV ESI,0x407e6b\nMOV EDX,0x5\nCALL 0x00401510\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x408140\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x004017b0\nXOR EDI,EDI\nMOV ESI,0x407e6f\nMOV EDX,0x5\nCALL 0x00401510\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00401600\nCMP R12,0x9\nJA 0x004051b6\nJMP qword ptr [0x407e08 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x407f3a\nMOV EDX,0x5\nCALL 0x00401510\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004017b0\nXOR EDI,EDI\nMOV ESI,0x408079\nMOV EDX,0x5\nCALL 0x00401510\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004017b0\nADD RSP,0x38\nJMP 0x00405427\nXOR EDI,EDI\nMOV ESI,0x407f4a\nMOV EDX,0x5\nCALL 0x00401510\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004017b0\nXOR EDI,EDI\nMOV ESI,0x407f61\nMOV EDX,0x5\nCALL 0x00401510\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004017b0\nXOR EDI,EDI\nMOV ESI,0x407f7d\nMOV EDX,0x5\nCALL 0x00401510\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004017b0\nADD RSP,0x18\nJMP 0x00405427\nXOR EDI,EDI\nMOV ESI,0x407f9d\nMOV EDX,0x5\nCALL 0x00401510\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004017b0\nADD RSP,0x18\nJMP 0x00405427\nXOR EDI,EDI\nMOV ESI,0x407fc1\nMOV EDX,0x5\nCALL 0x00401510\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004017b0\nADD RSP,0x28\nJMP 0x00405427\nXOR EDI,EDI\nMOV ESI,0x407fe9\nMOV EDX,0x5\nCALL 0x00401510\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004017b0\nADD RSP,0x28\nJMP 0x00405427\nXOR EDI,EDI\nMOV ESI,0x408015\nMOV EDX,0x5\nCALL 0x00401510\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004017b0\nADD RSP,0x38\nJMP 0x00405427\nXOR EDI,EDI\nMOV ESI,0x408045\nMOV EDX,0x5\nCALL 0x00401510\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004017b0\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401460\n'
p11
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba 58 7e 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 9a c6 ff ff\neb 15\nba 64 7e 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 83 c6 ff ff\n31 ff\nbe 6b 7e 40 00\nba 05 00 00 00\ne8 d2 c3 ff ff\n48 89 c1\nbe 01 00 00 00\nba 40 81 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 55 c6 ff ff\n31 ff\nbe 6f 7e 40 00\nba 05 00 00 00\ne8 a4 c3 ff ff\n48 89 c7\n4c 89 f6\ne8 89 c4 ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 08 7e 40 00\n31 ff\nbe 3a 7f 40 00\nba 05 00 00 00\ne8 7a c3 ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 fa c5 ff ff\n31 ff\nbe 79 80 40 00\nba 05 00 00 00\ne8 49 c3 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 b1 c5 ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe 4a 7f 40 00\nba 05 00 00 00\ne8 f7 c2 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 73 c5 ff ff\n31 ff\nbe 61 7f 40 00\nba 05 00 00 00\ne8 c2 c2 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 3a c5 ff ff\n31 ff\nbe 7d 7f 40 00\nba 05 00 00 00\ne8 89 c2 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 04 c5 ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe 9d 7f 40 00\nba 05 00 00 00\ne8 4a c2 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 c2 c4 ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe c1 7f 40 00\nba 05 00 00 00\ne8 08 c2 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 78 c4 ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe e9 7f 40 00\nba 05 00 00 00\ne8 be c1 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 2e c4 ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe 15 80 40 00\nba 05 00 00 00\ne8 74 c1 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 dc c3 ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe 45 80 40 00\nba 05 00 00 00\ne8 25 c1 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 8d c3 ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 2c c0 ff ff\n'
p12
S'.text:00000000004050e0\n.text:00000000004050e2\n.text:00000000004050e4\n.text:00000000004050e6\n.text:00000000004050e7\n.text:00000000004050e8\n.text:00000000004050eb\n.text:00000000004050ee\n.text:00000000004050f1\n.text:00000000004050f4\n.text:00000000004050f7\n.text:00000000004050fa\n.text:00000000004050ff\n.text:0000000000405102\n.text:0000000000405104\n.text:0000000000405109\n.text:000000000040510b\n.text:000000000040510e\n.text:0000000000405111\n.text:0000000000405116\n.text:0000000000405118\n.text:000000000040511d\n.text:000000000040511f\n.text:0000000000405122\n.text:0000000000405125\n.text:0000000000405128\n.text:000000000040512d\n.text:000000000040512f\n.text:0000000000405134\n.text:0000000000405139\n.text:000000000040513e\n.text:0000000000405141\n.text:0000000000405146\n.text:000000000040514b\n.text:0000000000405151\n.text:0000000000405153\n.text:0000000000405156\n.text:000000000040515b\n.text:000000000040515d\n.text:0000000000405162\n.text:0000000000405167\n.text:000000000040516c\n.text:000000000040516f\n.text:0000000000405172\n.text:0000000000405177\n.text:000000000040517b\n.text:000000000040517d\n.text:0000000000405185\n.text:0000000000405187\n.text:000000000040518c\n.text:0000000000405191\n.text:0000000000405196\n.text:0000000000405199\n.text:000000000040519c\n.text:00000000004051a1\n.text:00000000004051a3\n.text:00000000004051a6\n.text:00000000004051aa\n.text:00000000004051ab\n.text:00000000004051ad\n.text:00000000004051af\n.text:00000000004051b1\n.text:00000000004051b6\n.text:00000000004051b8\n.text:00000000004051bd\n.text:00000000004051c2\n.text:00000000004051c7\n.text:00000000004051ca\n.text:00000000004051cd\n.text:00000000004051d1\n.text:00000000004051d5\n.text:00000000004051da\n.text:00000000004051df\n.text:00000000004051e2\n.text:00000000004051e6\n.text:00000000004051ea\n.text:00000000004051ee\n.text:00000000004051f2\n.text:00000000004051f6\n.text:00000000004051fa\n.text:00000000004051ff\n.text:0000000000405203\n.text:0000000000405208\n.text:000000000040520a\n.text:000000000040520f\n.text:0000000000405214\n.text:0000000000405219\n.text:000000000040521c\n.text:000000000040521f\n.text:0000000000405223\n.text:0000000000405228\n.text:000000000040522a\n.text:000000000040522d\n.text:0000000000405231\n.text:0000000000405232\n.text:0000000000405234\n.text:0000000000405236\n.text:0000000000405238\n.text:000000000040523d\n.text:000000000040523f\n.text:0000000000405244\n.text:0000000000405249\n.text:000000000040524e\n.text:0000000000405251\n.text:0000000000405254\n.text:0000000000405258\n.text:000000000040525c\n.text:0000000000405261\n.text:0000000000405263\n.text:0000000000405266\n.text:000000000040526a\n.text:000000000040526b\n.text:000000000040526d\n.text:000000000040526f\n.text:0000000000405271\n.text:0000000000405276\n.text:0000000000405278\n.text:000000000040527d\n.text:0000000000405282\n.text:0000000000405287\n.text:000000000040528a\n.text:000000000040528d\n.text:0000000000405291\n.text:0000000000405295\n.text:0000000000405299\n.text:000000000040529e\n.text:00000000004052a0\n.text:00000000004052a3\n.text:00000000004052a7\n.text:00000000004052ac\n.text:00000000004052b0\n.text:00000000004052b5\n.text:00000000004052b7\n.text:00000000004052bc\n.text:00000000004052c1\n.text:00000000004052c6\n.text:00000000004052c9\n.text:00000000004052cc\n.text:00000000004052d0\n.text:00000000004052d4\n.text:00000000004052d9\n.text:00000000004052de\n.text:00000000004052e1\n.text:00000000004052e5\n.text:00000000004052e9\n.text:00000000004052ee\n.text:00000000004052f2\n.text:00000000004052f7\n.text:00000000004052f9\n.text:00000000004052fe\n.text:0000000000405303\n.text:0000000000405308\n.text:000000000040530b\n.text:000000000040530e\n.text:0000000000405312\n.text:0000000000405316\n.text:000000000040531a\n.text:000000000040531f\n.text:0000000000405324\n.text:0000000000405327\n.text:000000000040532b\n.text:000000000040532f\n.text:0000000000405333\n.text:0000000000405338\n.text:000000000040533c\n.text:0000000000405341\n.text:0000000000405343\n.text:0000000000405348\n.text:000000000040534d\n.text:0000000000405352\n.text:0000000000405355\n.text:0000000000405358\n.text:000000000040535c\n.text:0000000000405360\n.text:0000000000405365\n.text:000000000040536a\n.text:000000000040536d\n.text:0000000000405371\n.text:0000000000405375\n.text:0000000000405379\n.text:000000000040537d\n.text:0000000000405382\n.text:0000000000405386\n.text:000000000040538b\n.text:000000000040538d\n.text:0000000000405392\n.text:0000000000405397\n.text:000000000040539c\n.text:000000000040539f\n.text:00000000004053a2\n.text:00000000004053a6\n.text:00000000004053aa\n.text:00000000004053ae\n.text:00000000004053b3\n.text:00000000004053b8\n.text:00000000004053bb\n.text:00000000004053bf\n.text:00000000004053c3\n.text:00000000004053c7\n.text:00000000004053cb\n.text:00000000004053cf\n.text:00000000004053d4\n.text:00000000004053d8\n.text:00000000004053da\n.text:00000000004053dc\n.text:00000000004053e1\n.text:00000000004053e6\n.text:00000000004053eb\n.text:00000000004053ee\n.text:00000000004053f1\n.text:00000000004053f5\n.text:00000000004053f9\n.text:00000000004053fe\n.text:0000000000405403\n.text:0000000000405406\n.text:000000000040540a\n.text:000000000040540e\n.text:0000000000405412\n.text:0000000000405416\n.text:000000000040541a\n.text:000000000040541e\n.text:0000000000405423\n.text:0000000000405427\n.text:0000000000405428\n.text:000000000040542a\n.text:000000000040542c\n.text:000000000040542e\n.text:000000000040542f\n'
p13
tp14
sS'strchr'
p15
(S'\n__stdcall strchr(char * __s, int __c)\n'
p16
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_0060b0b0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p17
S'JMP qword ptr [0x0060b0b0]\n'
p18
S'ff 25 4a 9b 20 00\n'
p19
S'.plt:0000000000401560\n'
p20
tp21
sS'rpl_fclose'
p22
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p23
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00405cc9;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00405cc9:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p24
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x00401660\nTEST EAX,EAX\nJS 0x00405cc9\nMOV RDI,RBX\nCALL 0x004016d0\nTEST EAX,EAX\nJZ 0x00405c97\nMOV RDI,RBX\nCALL 0x00401660\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x00401580\nCMP RAX,-0x1\nJZ 0x00405cc9\nMOV RDI,RBX\nCALL 0x00405ea0\nTEST EAX,EAX\nJZ 0x00405cc9\nCALL 0x00401470\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x004014f0\nTEST EBP,EBP\nJZ 0x00405cc2\nCALL 0x00401470\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x004014f0\n'
p25
S'55\n53\n50\n48 89 fb\ne8 f5 b9 ff ff\n85 c0\n78 5a\n48 89 df\ne8 59 ba ff ff\n85 c0\n74 1c\n48 89 df\ne8 dd b9 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 ef b8 ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 01 02 00 00\n85 c0\n74 26\ne8 c8 b7 ff ff\n8b 28\n48 89 df\ne8 3e b8 ff ff\n85 ed\n74 0c\ne8 b5 b7 ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 19 b8 ff ff\n'
p26
S'.text:0000000000405c60\n.text:0000000000405c61\n.text:0000000000405c62\n.text:0000000000405c63\n.text:0000000000405c66\n.text:0000000000405c6b\n.text:0000000000405c6d\n.text:0000000000405c6f\n.text:0000000000405c72\n.text:0000000000405c77\n.text:0000000000405c79\n.text:0000000000405c7b\n.text:0000000000405c7e\n.text:0000000000405c83\n.text:0000000000405c85\n.text:0000000000405c8a\n.text:0000000000405c8c\n.text:0000000000405c91\n.text:0000000000405c95\n.text:0000000000405c97\n.text:0000000000405c9a\n.text:0000000000405c9f\n.text:0000000000405ca1\n.text:0000000000405ca3\n.text:0000000000405ca8\n.text:0000000000405caa\n.text:0000000000405cad\n.text:0000000000405cb2\n.text:0000000000405cb4\n.text:0000000000405cb6\n.text:0000000000405cbb\n.text:0000000000405cbd\n.text:0000000000405cc2\n.text:0000000000405cc6\n.text:0000000000405cc7\n.text:0000000000405cc8\n.text:0000000000405cc9\n.text:0000000000405ccc\n.text:0000000000405cd0\n.text:0000000000405cd1\n.text:0000000000405cd2\n'
p27
tp28
sS'strncmp'
p29
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p30
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_0060b040)();\u000a  return iVar1;\u000a}\u000a\u000a
p31
S'JMP qword ptr [0x0060b040]\n'
p32
S'ff 25 ba 9b 20 00\n'
p33
S'.plt:0000000000401480\n'
p34
tp35
sS'delseq'
p36
(S'\n__stdcall delseq(seq * seq)\n'
p37
V\u000avoid delseq(seq *seq)\u000a\u000a{\u000a  ulong uVar1;\u000a  line *__ptr;\u000a  \u000a  __ptr = (line *)seq->lines;\u000a  if (seq->alloc != 0) {\u000a    uVar1 = 0;\u000a    do {\u000a      freeline(((line **)__ptr)[uVar1]);\u000a      free(seq->lines[uVar1]);\u000a      uVar1 = uVar1 + 1;\u000a      __ptr = (line *)seq->lines;\u000a    } while (uVar1 < seq->alloc);\u000a  }\u000a  free(__ptr);\u000a  return;\u000a}\u000a\u000a
p38
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCMP qword ptr [R14 + 0x8],0x0\nMOV RDI,qword ptr [R14 + 0x10]\nJZ 0x00403083\nXOR EBX,EBX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RDI,qword ptr [RDI + RBX*0x8]\nCALL 0x00402b10\nMOV RAX,qword ptr [R14 + 0x10]\nMOV RDI,qword ptr [RAX + RBX*0x8]\nCALL 0x00401450\nINC RBX\nMOV RDI,qword ptr [R14 + 0x10]\nCMP RBX,qword ptr [R14 + 0x8]\nJC 0x00403060\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401450\n'
p39
S'41 56\n53\n50\n49 89 fe\n49 83 7e 08 00\n49 8b 7e 10\n74 31\n31 db\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 3c df\ne8 a7 fa ff ff\n49 8b 46 10\n48 8b 3c d8\ne8 da e3 ff ff\n48 ff c3\n49 8b 7e 10\n49 3b 5e 08\n72 dd\n48 83 c4 08\n5b\n41 5e\ne9 c1 e3 ff ff\n'
p40
S'.text:0000000000403040\n.text:0000000000403042\n.text:0000000000403043\n.text:0000000000403044\n.text:0000000000403047\n.text:000000000040304c\n.text:0000000000403050\n.text:0000000000403052\n.text:0000000000403054\n.text:0000000000403060\n.text:0000000000403064\n.text:0000000000403069\n.text:000000000040306d\n.text:0000000000403071\n.text:0000000000403076\n.text:0000000000403079\n.text:000000000040307d\n.text:0000000000403081\n.text:0000000000403083\n.text:0000000000403087\n.text:0000000000403088\n.text:000000000040308a\n'
p41
tp42
sS'xnrealloc'
p43
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p44
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p45
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00405634\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00405640\nPUSH RAX\nCALL 0x00405790\n'
p46
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p47
S'.text:0000000000405620\n.text:0000000000405623\n.text:0000000000405626\n.text:0000000000405629\n.text:000000000040562b\n.text:000000000040562f\n.text:0000000000405632\n.text:0000000000405634\n.text:0000000000405635\n'
p48
tp49
sS'quote'
p50
(S'\n__stdcall quote(char * arg)\n'
p51
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p52
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00404cb0\n'
p53
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p54
S'.text:0000000000404cc0\n.text:0000000000404cc3\n.text:0000000000404cc5\n.text:0000000000404cc8\n'
p55
tp56
sS'emit_bug_reporting_address'
p57
(S'\n__stdcall emit_bug_reporting_address()\n'
p58
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p59
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x4080b5\nMOV EDX,0x5\nCALL 0x00401510\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x4080ca\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401720\nXOR EDI,EDI\nMOV ESI,0x4080e0\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x407549\nMOV ECX,0x40764e\nXOR EAX,EAX\nCALL 0x00401720\nXOR EDI,EDI\nMOV ESI,0x4080f4\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,qword ptr [0x0060b2a8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401600\n'
p60
S'50\n31 ff\nbe b5 80 40 00\nba 05 00 00 00\ne8 9e bf ff ff\n48 89 c1\nbf 01 00 00 00\nba ca 80 40 00\n31 c0\n48 89 ce\ne8 97 c1 ff ff\n31 ff\nbe e0 80 40 00\nba 05 00 00 00\ne8 76 bf ff ff\n48 89 c6\nbf 01 00 00 00\nba 49 75 40 00\nb9 4e 76 40 00\n31 c0\ne8 6d c1 ff ff\n31 ff\nbe f4 80 40 00\nba 05 00 00 00\ne8 4c bf ff ff\n48 8b 35 dd 5c 20 00\n48 89 c7\n58\ne9 2c c0 ff ff\n'
p61
S'.text:0000000000405560\n.text:0000000000405561\n.text:0000000000405563\n.text:0000000000405568\n.text:000000000040556d\n.text:0000000000405572\n.text:0000000000405575\n.text:000000000040557a\n.text:000000000040557f\n.text:0000000000405581\n.text:0000000000405584\n.text:0000000000405589\n.text:000000000040558b\n.text:0000000000405590\n.text:0000000000405595\n.text:000000000040559a\n.text:000000000040559d\n.text:00000000004055a2\n.text:00000000004055a7\n.text:00000000004055ac\n.text:00000000004055ae\n.text:00000000004055b3\n.text:00000000004055b5\n.text:00000000004055ba\n.text:00000000004055bf\n.text:00000000004055c4\n.text:00000000004055cb\n.text:00000000004055ce\n.text:00000000004055cf\n'
p62
tp63
sS'strcoll_loop'
p64
(S'\n__stdcall strcoll_loop(char * s1, size_t s1size, char * s2, size_t s2size)\n'
p65
V\u000aint strcoll_loop(char *s1,size_t s1size,char *s2,size_t s2size)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  \u000a  piVar2 = __errno_location();\u000a  while( true ) {\u000a    *piVar2 = 0;\u000a    iVar1 = strcoll(s1,s2);\u000a    if (iVar1 != 0) {\u000a      return iVar1;\u000a    }\u000a    sVar3 = strlen(s1);\u000a    sVar4 = strlen(s2);\u000a    s2size = s2size - (sVar4 + 1);\u000a    s1size = s1size - (sVar3 + 1);\u000a    if (s1size == 0) break;\u000a    s2 = s2 + sVar4 + 1;\u000a    s1 = s1 + sVar3 + 1;\u000a    if (s2size == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return -(uint)(s2size != 0);\u000a}\u000a\u000a
p66
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R12,RDX\nMOV R15,RSI\nMOV RBX,RDI\nCALL 0x00401470\nMOV R13,RAX\nNOP\nMOV dword ptr [R13],0x0\nMOV RDI,RBX\nMOV RSI,R12\nCALL 0x004016b0\nTEST EAX,EAX\nJNZ 0x0040653f\nMOV RDI,RBX\nCALL 0x00401530\nMOV RBP,RAX\nINC RBP\nMOV RDI,R12\nCALL 0x00401530\nINC RAX\nSUB R14,RAX\nSUB R15,RBP\nJZ 0x0040653a\nADD R12,RAX\nADD RBX,RBP\nTEST R14,R14\nJNZ 0x004064f0\nMOV EAX,0x1\nJMP 0x0040653f\nNEG R14\nSBB EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p67
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d4\n49 89 f7\n48 89 fb\ne8 84 af ff ff\n49 89 c5\n90\n41 c7 45 00 00 00 00 00\n48 89 df\n4c 89 e6\ne8 ad b1 ff ff\n85 c0\n75 38\n48 89 df\ne8 21 b0 ff ff\n48 89 c5\n48 ff c5\n4c 89 e7\ne8 13 b0 ff ff\n48 ff c0\n49 29 c6\n49 29 ef\n74 12\n49 01 c4\n48 01 eb\n4d 85 f6\n75 bd\nb8 01 00 00 00\neb 05\n49 f7 de\n19 c0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p68
S'.text:00000000004064d0\n.text:00000000004064d1\n.text:00000000004064d3\n.text:00000000004064d5\n.text:00000000004064d7\n.text:00000000004064d9\n.text:00000000004064da\n.text:00000000004064db\n.text:00000000004064de\n.text:00000000004064e1\n.text:00000000004064e4\n.text:00000000004064e7\n.text:00000000004064ec\n.text:00000000004064ef\n.text:00000000004064f0\n.text:00000000004064f8\n.text:00000000004064fb\n.text:00000000004064fe\n.text:0000000000406503\n.text:0000000000406505\n.text:0000000000406507\n.text:000000000040650a\n.text:000000000040650f\n.text:0000000000406512\n.text:0000000000406515\n.text:0000000000406518\n.text:000000000040651d\n.text:0000000000406520\n.text:0000000000406523\n.text:0000000000406526\n.text:0000000000406528\n.text:000000000040652b\n.text:000000000040652e\n.text:0000000000406531\n.text:0000000000406533\n.text:0000000000406538\n.text:000000000040653a\n.text:000000000040653d\n.text:000000000040653f\n.text:0000000000406543\n.text:0000000000406544\n.text:0000000000406546\n.text:0000000000406548\n.text:000000000040654a\n.text:000000000040654c\n.text:000000000040654d\n'
p69
tp70
sS'clone_quoting_options'
p71
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p72
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p73
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401470\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x60b3e0\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00405740\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p74
S'55\n41 56\n53\n48 89 fb\ne8 e4 db ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 e0 b3 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 95 1e 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p75
S'.text:0000000000403880\n.text:0000000000403881\n.text:0000000000403883\n.text:0000000000403884\n.text:0000000000403887\n.text:000000000040388c\n.text:000000000040388f\n.text:0000000000403892\n.text:0000000000403895\n.text:000000000040389a\n.text:000000000040389e\n.text:00000000004038a3\n.text:00000000004038a6\n.text:00000000004038ab\n.text:00000000004038ae\n.text:00000000004038af\n.text:00000000004038b1\n.text:00000000004038b2\n'
p76
tp77
sS'xmalloc'
p78
(S'\n__stdcall xmalloc(size_t n)\n'
p79
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p80
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401670\nTEST RBX,RBX\nJZ 0x00405613\nTEST RAX,RAX\nJZ 0x00405615\nPOP RBX\nRET\nCALL 0x00405790\n'
p81
S'53\n48 89 fb\ne8 67 c0 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p82
S'.text:0000000000405600\n.text:0000000000405601\n.text:0000000000405604\n.text:0000000000405609\n.text:000000000040560c\n.text:000000000040560e\n.text:0000000000405611\n.text:0000000000405613\n.text:0000000000405614\n.text:0000000000405615\n'
p83
tp84
sS'quotearg_char_mem'
p85
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p86
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p87
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x0060b410]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x0060b400]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060b3f0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060b3e0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x004038e0\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004047d0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p88
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d 18 69 20 00\n48 89 4c 24 30\n0f 10 05 fc 68 20 00\n0f 29 44 24 20\n0f 10 05 e0 68 20 00\n0f 29 44 24 10\n0f 10 05 c4 68 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p89
S'.text:0000000000404ae0\n.text:0000000000404ae2\n.text:0000000000404ae4\n.text:0000000000404ae5\n.text:0000000000404ae9\n.text:0000000000404aeb\n.text:0000000000404aee\n.text:0000000000404af1\n.text:0000000000404af8\n.text:0000000000404afd\n.text:0000000000404b04\n.text:0000000000404b09\n.text:0000000000404b10\n.text:0000000000404b15\n.text:0000000000404b1c\n.text:0000000000404b20\n.text:0000000000404b23\n.text:0000000000404b28\n.text:0000000000404b2b\n.text:0000000000404b2d\n.text:0000000000404b32\n.text:0000000000404b34\n.text:0000000000404b37\n.text:0000000000404b3a\n.text:0000000000404b3d\n.text:0000000000404b42\n.text:0000000000404b46\n.text:0000000000404b47\n.text:0000000000404b49\n.text:0000000000404b4b\n'
p90
tp91
sS'frame_dummy'
p92
(S'\n__stdcall frame_dummy()\n'
p93
V\u000a/* WARNING: Removing unreachable block (ram,0x004018ea) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p94
S'MOV EDI,0x60ae18\nCMP qword ptr [RDI],0x0\nJNZ 0x004018e0\nJMP 0x00401870\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004018db\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401870\n'
p95
S'bf 18 ae 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p96
S'.text:00000000004018d0\n.text:00000000004018d5\n.text:00000000004018d9\n.text:00000000004018db\n.text:00000000004018e0\n.text:00000000004018e5\n.text:00000000004018e8\n.text:00000000004018ea\n.text:00000000004018eb\n.text:00000000004018ee\n.text:00000000004018f0\n.text:00000000004018f1\n'
p97
tp98
sS'quotearg_n_style_colon'
p99
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p100
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p101
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00404a00\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x004038e0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x004047d0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p102
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p103
S'.text:0000000000404b80\n.text:0000000000404b81\n.text:0000000000404b83\n.text:0000000000404b84\n.text:0000000000404b88\n.text:0000000000404b8b\n.text:0000000000404b8d\n.text:0000000000404b92\n.text:0000000000404b95\n.text:0000000000404b9a\n.text:0000000000404b9f\n.text:0000000000404ba4\n.text:0000000000404ba7\n.text:0000000000404bac\n.text:0000000000404bb3\n.text:0000000000404bb5\n.text:0000000000404bb8\n.text:0000000000404bbb\n.text:0000000000404bc0\n.text:0000000000404bc4\n.text:0000000000404bc5\n.text:0000000000404bc7\n.text:0000000000404bc8\n'
p104
tp105
sS'extract_field'
p106
(S'\n__stdcall extract_field(line * line, char * field, size_t len)\n'
p107
V\u000avoid extract_field(line *line,char *field,size_t len)\u000a\u000a{\u000a  size_t sVar1;\u000a  field *pfVar2;\u000a  \u000a  if (line->nfields_allocated <= line->nfields) {\u000a    pfVar2 = (field *)x2nrealloc(line->fields,&line->nfields_allocated,0x10);\u000a    line->fields = pfVar2;\u000a  }\u000a  sVar1 = line->nfields;\u000a  pfVar2 = line->fields;\u000a  pfVar2[sVar1].beg = field;\u000a  pfVar2[sVar1].len = len;\u000a  line->nfields = sVar1 + 1;\u000a  return;\u000a}\u000a\u000a
p108
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RDX\nMOV R15,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x18]\nCMP RAX,qword ptr [RBX + 0x20]\nJC 0x0040345e\nLEA RSI,[RBX + 0x20]\nMOV RDI,qword ptr [RBX + 0x28]\nMOV EDX,0x10\nCALL 0x00405670\nMOV qword ptr [RBX + 0x28],RAX\nMOV RAX,qword ptr [RBX + 0x18]\nMOV RCX,qword ptr [RBX + 0x28]\nMOV RDX,RAX\nSHL RDX,0x4\nMOV qword ptr [RCX + RDX*0x1],R15\nMOV qword ptr [RCX + RDX*0x1 + 0x8],R14\nINC RAX\nMOV qword ptr [RBX + 0x18],RAX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p109
S'41 57\n41 56\n53\n49 89 d6\n49 89 f7\n48 89 fb\n48 8b 43 18\n48 3b 43 20\n72 16\n48 8d 73 20\n48 8b 7b 28\nba 10 00 00 00\ne8 16 22 00 00\n48 89 43 28\n48 8b 43 18\n48 8b 4b 28\n48 89 c2\n48 c1 e2 04\n4c 89 3c 11\n4c 89 74 11 08\n48 ff c0\n48 89 43 18\n5b\n41 5e\n41 5f\nc3\n'
p110
S'.text:0000000000403430\n.text:0000000000403432\n.text:0000000000403434\n.text:0000000000403435\n.text:0000000000403438\n.text:000000000040343b\n.text:000000000040343e\n.text:0000000000403442\n.text:0000000000403446\n.text:0000000000403448\n.text:000000000040344c\n.text:0000000000403450\n.text:0000000000403455\n.text:000000000040345a\n.text:000000000040345e\n.text:0000000000403462\n.text:0000000000403466\n.text:0000000000403469\n.text:000000000040346d\n.text:0000000000403471\n.text:0000000000403476\n.text:0000000000403479\n.text:000000000040347d\n.text:000000000040347e\n.text:0000000000403480\n.text:0000000000403482\n'
p111
tp112
sS'quote_mem'
p113
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p114
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p115
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00404c90\n'
p116
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p117
S'.text:0000000000404ca0\n.text:0000000000404ca3\n.text:0000000000404ca6\n.text:0000000000404ca8\n.text:0000000000404cab\n.text:0000000000404cae\n'
p118
tp119
sS'fadvise'
p120
(S'\n__stdcall fadvise(FILE * fp)\n'
p121
V\u000avoid fadvise(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int __advise;\u000a  \u000a  if (fp != (FILE *)0x0) {\u000a    __fd = fileno((FILE *)fp);\u000a    fdadvise(__fd,0,0,__advise);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p122
S'PUSH RBX\nMOV EBX,ESI\nTEST RDI,RDI\nJZ 0x004035b8\nCALL 0x00401660\nXOR ESI,ESI\nXOR EDX,EDX\nMOV EDI,EAX\nMOV ECX,EBX\nPOP RBX\nJMP 0x00403590\nPOP RBX\nRET\n'
p123
S'53\n89 f3\n48 85 ff\n74 10\ne8 b3 e0 ff ff\n31 f6\n31 d2\n89 c7\n89 d9\n5b\neb d8\n5b\nc3\n'
p124
S'.text:00000000004035a0\n.text:00000000004035a1\n.text:00000000004035a3\n.text:00000000004035a6\n.text:00000000004035a8\n.text:00000000004035ad\n.text:00000000004035af\n.text:00000000004035b1\n.text:00000000004035b3\n.text:00000000004035b5\n.text:00000000004035b6\n.text:00000000004035b8\n.text:00000000004035b9\n'
p125
tp126
sS'prfields'
p127
(S'\n__stdcall prfields(line * line, size_t join_field, size_t autocount)\n'
p128
V\u000avoid prfields(line *line,size_t join_field,size_t autocount)\u000a\u000a{\u000a  size_t n;\u000a  char cVar1;\u000a  \u000a  if (autoformat == 0) {\u000a    autocount = line->nfields;\u000a  }\u000a  cVar1 = ' ';\u000a  if (-1 < tab) {\u000a    cVar1 = (char)tab;\u000a  }\u000a  if ((join_field != 0) && (autocount != 0)) {\u000a    n = 0;\u000a    do {\u000a      putchar_unlocked((int)cVar1);\u000a      prfield(n,line);\u000a      n = n + 1;\u000a      if (join_field <= n) break;\u000a    } while (n < autocount);\u000a  }\u000a  join_field = join_field + 1;\u000a  if (join_field < autocount) {\u000a    do {\u000a      putchar_unlocked((int)cVar1);\u000a      prfield(join_field,line);\u000a      join_field = join_field + 1;\u000a    } while (autocount != join_field);\u000a  }\u000a  return;\u000a}\u000a\u000a
p129
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV RBX,RSI\nMOV R15,RDI\nMOV AL,byte ptr [0x0060b309]\nTEST AL,AL\nJNZ 0x00403112\nMOV R14,qword ptr [R15 + 0x18]\nMOV EAX,dword ptr [0x0060b220]\nTEST EAX,EAX\nMOV R13B,0x20\nJS 0x00403122\nMOV R13D,EAX\nTEST RBX,RBX\nJZ 0x00403160\nTEST R14,R14\nJZ 0x00403160\nMOVSX R12D,R13B\nXOR EBP,EBP\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV EDI,R12D\nCALL 0x00401650\nMOV RDI,RBP\nMOV RSI,R15\nCALL 0x00403090\nINC RBP\nCMP RBP,RBX\nJNC 0x00403160\nCMP RBP,R14\nJC 0x00403140\nINC RBX\nCMP RBX,R14\nJNC 0x0040318a\nMOVSX EBP,R13B\nNOP dword ptr [RAX]\nMOV EDI,EBP\nCALL 0x00401650\nMOV RDI,RBX\nMOV RSI,R15\nCALL 0x00403090\nINC RBX\nCMP R14,RBX\nJNZ 0x00403170\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p130
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n48 89 f3\n49 89 ff\n8a 05 ff 81 20 00\n84 c0\n75 04\n4d 8b 77 18\n8b 05 08 81 20 00\n85 c0\n41 b5 20\n78 03\n41 89 c5\n48 85 db\n74 39\n4d 85 f6\n74 34\n45 0f be e5\n31 ed\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n44 89 e7\ne8 08 e5 ff ff\n48 89 ef\n4c 89 fe\ne8 3d ff ff ff\n48 ff c5\n48 39 dd\n73 05\n4c 39 f5\n72 e0\n48 ff c3\n4c 39 f3\n73 22\n41 0f be ed\n0f 1f 40 00\n89 ef\ne8 d9 e4 ff ff\n48 89 df\n4c 89 fe\ne8 0e ff ff ff\n48 ff c3\n49 39 de\n75 e6\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p131
S'.text:00000000004030f0\n.text:00000000004030f1\n.text:00000000004030f3\n.text:00000000004030f5\n.text:00000000004030f7\n.text:00000000004030f9\n.text:00000000004030fa\n.text:00000000004030fb\n.text:00000000004030fe\n.text:0000000000403101\n.text:0000000000403104\n.text:000000000040310a\n.text:000000000040310c\n.text:000000000040310e\n.text:0000000000403112\n.text:0000000000403118\n.text:000000000040311a\n.text:000000000040311d\n.text:000000000040311f\n.text:0000000000403122\n.text:0000000000403125\n.text:0000000000403127\n.text:000000000040312a\n.text:000000000040312c\n.text:0000000000403130\n.text:0000000000403132\n.text:0000000000403140\n.text:0000000000403143\n.text:0000000000403148\n.text:000000000040314b\n.text:000000000040314e\n.text:0000000000403153\n.text:0000000000403156\n.text:0000000000403159\n.text:000000000040315b\n.text:000000000040315e\n.text:0000000000403160\n.text:0000000000403163\n.text:0000000000403166\n.text:0000000000403168\n.text:000000000040316c\n.text:0000000000403170\n.text:0000000000403172\n.text:0000000000403177\n.text:000000000040317a\n.text:000000000040317d\n.text:0000000000403182\n.text:0000000000403185\n.text:0000000000403188\n.text:000000000040318a\n.text:000000000040318e\n.text:000000000040318f\n.text:0000000000403191\n.text:0000000000403193\n.text:0000000000403195\n.text:0000000000403197\n.text:0000000000403198\n'
p132
tp133
sS'fileno'
p134
(S'\n__stdcall fileno(FILE * __stream)\n'
p135
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_0060b130)();\u000a  return iVar1;\u000a}\u000a\u000a
p136
S'JMP qword ptr [0x0060b130]\n'
p137
S'ff 25 ca 9a 20 00\n'
p138
S'.plt:0000000000401660\n'
p139
tp140
sS'freeline'
p141
(S'\n__stdcall freeline(line * line)\n'
p142
V\u000avoid freeline(line *line)\u000a\u000a{\u000a  if (line != (line *)0x0) {\u000a    free(line->fields);\u000a    line->fields = (field *)0x0;\u000a    free((line->buf).buffer);\u000a    (line->buf).buffer = (char *)0x0;\u000a  }\u000a  return;\u000a}\u000a\u000a
p143
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00402b3b\nMOV RDI,qword ptr [RBX + 0x28]\nCALL 0x00401450\nMOV qword ptr [RBX + 0x28],0x0\nMOV RDI,qword ptr [RBX + 0x10]\nCALL 0x00401450\nMOV qword ptr [RBX + 0x10],0x0\nPOP RBX\nRET\n'
p144
S'53\n48 89 fb\n48 85 db\n74 22\n48 8b 7b 28\ne8 2e e9 ff ff\n48 c7 43 28 00 00 00 00\n48 8b 7b 10\ne8 1d e9 ff ff\n48 c7 43 10 00 00 00 00\n5b\nc3\n'
p145
S'.text:0000000000402b10\n.text:0000000000402b11\n.text:0000000000402b14\n.text:0000000000402b17\n.text:0000000000402b19\n.text:0000000000402b1d\n.text:0000000000402b22\n.text:0000000000402b2a\n.text:0000000000402b2e\n.text:0000000000402b33\n.text:0000000000402b3b\n.text:0000000000402b3c\n'
p146
tp147
sS'mbrtowc'
p148
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p149
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_0060b0a8)();\u000a  return sVar1;\u000a}\u000a\u000a
p150
S'JMP qword ptr [0x0060b0a8]\n'
p151
S'ff 25 52 9b 20 00\n'
p152
S'.plt:0000000000401550\n'
p153
tp154
sS'initbuffer'
p155
(S'\n__stdcall initbuffer(linebuffer * linebuffer)\n'
p156
V\u000avoid initbuffer(linebuffer *linebuffer)\u000a\u000a{\u000a  *(undefined4 *)&linebuffer->size = 0;\u000a  *(undefined4 *)((long)&linebuffer->size + 4) = 0;\u000a  *(undefined4 *)&linebuffer->length = 0;\u000a  *(undefined4 *)((long)&linebuffer->length + 4) = 0;\u000a  linebuffer->buffer = (char *)0x0;\u000a  return;\u000a}\u000a\u000a
p157
S'XORPS XMM0,XMM0\nMOVUPS xmmword ptr [RDI],XMM0\nMOV qword ptr [RDI + 0x10],0x0\nRET\n'
p158
S'0f 57 c0\n0f 11 07\n48 c7 47 10 00 00 00 00\nc3\n'
p159
S'.text:0000000000403690\n.text:0000000000403693\n.text:0000000000403696\n.text:000000000040369e\n'
p160
tp161
sS'setlocale'
p162
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p163
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_0060b188)();\u000a  return pcVar1;\u000a}\u000a\u000a
p164
S'JMP qword ptr [0x0060b188]\n'
p165
S'ff 25 72 9a 20 00\n'
p166
S'.plt:0000000000401710\n'
p167
tp168
sS'c_toupper'
p169
(S'\n__stdcall c_toupper()\n'
p170
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p171
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p172
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p173
S'.text:00000000004060a0\n.text:00000000004060a3\n.text:00000000004060a6\n.text:00000000004060a9\n.text:00000000004060ac\n'
p174
tp175
sS'fcntl'
p176
(S'\n__stdcall fcntl(int __fd, int __cmd)\n'
p177
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fcntl(int __fd,int __cmd,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fcntl_0060b068)();\u000a  return iVar1;\u000a}\u000a\u000a
p178
S'JMP qword ptr [0x0060b068]\n'
p179
S'ff 25 92 9b 20 00\n'
p180
S'.plt:00000000004014d0\n'
p181
tp182
sS'mbsinit'
p183
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p184
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_0060b1e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p185
S'JMP qword ptr [0x0060b1e0]\n'
p186
S'ff 25 1a 9a 20 00\n'
p187
S'.plt:00000000004017c0\n'
p188
tp189
sS'dcgettext'
p190
(S'\n__stdcall dcgettext()\n'
p191
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_0060b088)();\u000a  return;\u000a}\u000a\u000a
p192
S'JMP qword ptr [0x0060b088]\n'
p193
S'ff 25 72 9b 20 00\n'
p194
S'.plt:0000000000401510\n'
p195
tp196
sS'__ctype_toupper_loc'
p197
(S'\n__stdcall __ctype_toupper_loc()\n'
p198
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__int32_t ** __ctype_toupper_loc(void)\u000a\u000a{\u000a  __int32_t **pp_Var1;\u000a  \u000a  pp_Var1 = (__int32_t **)(*(code *)PTR___ctype_toupper_loc_0060b018)();\u000a  return pp_Var1;\u000a}\u000a\u000a
p199
S'JMP qword ptr [0x0060b018]\n'
p200
S'ff 25 e2 9b 20 00\n'
p201
S'.plt:0000000000401430\n'
p202
tp203
sS'quotearg_free'
p204
(S'\n__stdcall quotearg_free()\n'
p205
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p206
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x0060b240]\nCMP dword ptr [0x0060b248],0x2\nJC 0x0040476a\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00401450\nINC RBX\nMOV EAX,dword ptr [0x0060b248]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00404750\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x60b420\nCMP RDI,RAX\nJZ 0x00404793\nCALL 0x00401450\nMOV qword ptr [0x0060b250],0x100\nMOV qword ptr [0x0060b258],0x60b420\nMOV EAX,0x60b250\nCMP R14,RAX\nJZ 0x004047b0\nMOV RDI,R14\nCALL 0x00401450\nMOV qword ptr [0x0060b240],0x60b250\nMOV dword ptr [0x0060b248],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p207
S'41 57\n41 56\n53\n4c 8b 35 04 6b 20 00\n83 3d 05 6b 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 f8 cc ff ff\n48 ff c3\n8b 05 e7 6a 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 20 b4 60 00\n48 39 c7\n74 1b\ne8 d3 cc ff ff\n48 c7 05 c8 6a 20 00 00 01 00 00\n48 c7 05 c5 6a 20 00 20 b4 60 00\nb8 50 b2 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 ab cc ff ff\n48 c7 05 90 6a 20 00 50 b2 60 00\nc7 05 8e 6a 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p208
S'.text:0000000000404730\n.text:0000000000404732\n.text:0000000000404734\n.text:0000000000404735\n.text:000000000040473c\n.text:0000000000404743\n.text:0000000000404745\n.text:0000000000404749\n.text:000000000040474e\n.text:0000000000404750\n.text:0000000000404753\n.text:0000000000404758\n.text:000000000040475b\n.text:0000000000404761\n.text:0000000000404765\n.text:0000000000404768\n.text:000000000040476a\n.text:000000000040476e\n.text:0000000000404773\n.text:0000000000404776\n.text:0000000000404778\n.text:000000000040477d\n.text:0000000000404788\n.text:0000000000404793\n.text:0000000000404798\n.text:000000000040479b\n.text:000000000040479d\n.text:00000000004047a0\n.text:00000000004047a5\n.text:00000000004047b0\n.text:00000000004047ba\n.text:00000000004047bb\n.text:00000000004047bd\n.text:00000000004047bf\n'
p209
tp210
sS'quotearg_mem'
p211
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p212
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p213
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00404990\n'
p214
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p215
S'.text:00000000004049b0\n.text:00000000004049b3\n.text:00000000004049b6\n.text:00000000004049b8\n.text:00000000004049bb\n.text:00000000004049be\n'
p216
tp217
sS'deregister_tm_clones'
p218
(S'\n__stdcall deregister_tm_clones()\n'
p219
V\u000a/* WARNING: Removing unreachable block (ram,0x00401845) */\u000a/* WARNING: Removing unreachable block (ram,0x0040184f) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p220
S'MOV EAX,0x60b29f\nPUSH RBP\nSUB RAX,0x60b298\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00401860\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401860\nPOP RBP\nMOV EDI,0x60b298\nJMP RAX\nPOP RBP\nRET\n'
p221
S'b8 9f b2 60 00\n55\n48 2d 98 b2 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 98 b2 60 00\nff e0\n5d\nc3\n'
p222
S'.text:0000000000401830\n.text:0000000000401835\n.text:0000000000401836\n.text:000000000040183c\n.text:0000000000401840\n.text:0000000000401843\n.text:0000000000401845\n.text:000000000040184a\n.text:000000000040184d\n.text:000000000040184f\n.text:0000000000401850\n.text:0000000000401855\n.text:0000000000401860\n.text:0000000000401861\n'
p223
tp224
sS'set_join_field'
p225
(S'\n__stdcall set_join_field(size_t * var, size_t val)\n'
p226
V\u000avoid set_join_field(size_t *var,size_t val)\u000a\u000a{\u000a  size_t sVar1;\u000a  undefined8 uVar2;\u000a  \u000a  sVar1 = *var;\u000a  if ((sVar1 != 0xffffffffffffffff) && (sVar1 != val)) {\u000a    uVar2 = dcgettext(0,"incompatible join fields %lu, %lu",5);\u000a    error(1,0,uVar2,sVar1 + 1,val + 1);\u000a  }\u000a  *var = val;\u000a  return;\u000a}\u000a\u000a
p227
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RSI\nMOV R14,RDI\nMOV RBX,qword ptr [R14]\nCMP RBX,-0x1\nJZ 0x0040239e\nCMP RBX,R15\nJZ 0x0040239e\nINC RBX\nLEA R12,[R15 + 0x1]\nXOR EDI,EDI\nMOV ESI,0x40774e\nMOV EDX,0x5\nCALL 0x00401510\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,RBX\nMOV R8,R12\nCALL 0x00401730\nMOV qword ptr [R14],R15\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p228
S'41 57\n41 56\n41 54\n53\n50\n49 89 f7\n49 89 fe\n49 8b 1e\n48 83 fb ff\n74 37\n4c 39 fb\n74 32\n48 ff c3\n4d 8d 67 01\n31 ff\nbe 4e 77 40 00\nba 05 00 00 00\ne8 8c f1 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\n48 89 d9\n4d 89 e0\ne8 92 f3 ff ff\n4d 89 3e\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p229
S'.text:0000000000402350\n.text:0000000000402352\n.text:0000000000402354\n.text:0000000000402356\n.text:0000000000402357\n.text:0000000000402358\n.text:000000000040235b\n.text:000000000040235e\n.text:0000000000402361\n.text:0000000000402365\n.text:0000000000402367\n.text:000000000040236a\n.text:000000000040236c\n.text:000000000040236f\n.text:0000000000402373\n.text:0000000000402375\n.text:000000000040237a\n.text:000000000040237f\n.text:0000000000402384\n.text:0000000000402387\n.text:000000000040238c\n.text:000000000040238e\n.text:0000000000402390\n.text:0000000000402393\n.text:0000000000402396\n.text:0000000000402399\n.text:000000000040239e\n.text:00000000004023a1\n.text:00000000004023a5\n.text:00000000004023a6\n.text:00000000004023a8\n.text:00000000004023aa\n.text:00000000004023ac\n'
p230
tp231
sS'quotearg_custom'
p232
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p233
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p234
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00404bd0\n'
p235
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p236
S'.text:0000000000404c50\n.text:0000000000404c53\n.text:0000000000404c56\n.text:0000000000404c59\n.text:0000000000404c5b\n.text:0000000000404c5e\n.text:0000000000404c61\n.text:0000000000404c64\n'
p237
tp238
sS'free'
p239
(S'\n__stdcall free(void * __ptr)\n'
p240
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_0060b028)();\u000a  return;\u000a}\u000a\u000a
p241
S'JMP qword ptr [0x0060b028]\n'
p242
S'ff 25 d2 9b 20 00\n'
p243
S'.plt:0000000000401450\n'
p244
tp245
sS'close'
p246
(S'\n__stdcall close(int __fd)\n'
p247
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_0060b0e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p248
S'JMP qword ptr [0x0060b0e0]\n'
p249
S'ff 25 1a 9b 20 00\n'
p250
S'.plt:00000000004015c0\n'
p251
tp252
sS'getenv'
p253
(S'\n__stdcall getenv(char * __name)\n'
p254
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_0060b020)();\u000a  return pcVar1;\u000a}\u000a\u000a
p255
S'JMP qword ptr [0x0060b020]\n'
p256
S'ff 25 da 9b 20 00\n'
p257
S'.plt:0000000000401440\n'
p258
tp259
sS'putchar_unlocked'
p260
(S'\n__stdcall putchar_unlocked(int __c)\n'
p261
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint putchar_unlocked(int __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_putchar_unlocked_0060b128)();\u000a  return iVar1;\u000a}\u000a\u000a
p262
S'JMP qword ptr [0x0060b128]\n'
p263
S'ff 25 d2 9a 20 00\n'
p264
S'.plt:0000000000401650\n'
p265
tp266
sS'fopen'
p267
(S'\n__stdcall fopen(char * __filename, char * __modes)\n'
p268
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fopen(char *__filename,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fopen_0060b1b0)();\u000a  return pFVar1;\u000a}\u000a\u000a
p269
S'JMP qword ptr [0x0060b1b0]\n'
p270
S'ff 25 4a 9a 20 00\n'
p271
S'.plt:0000000000401760\n'
p272
tp273
sS'add_field'
p274
(S'\n__stdcall add_field(size_t field)\n'
p275
V\u000avoid add_field(size_t field)\u000a\u000a{\u000a  uint uVar1;\u000a  outlist *poVar2;\u000a  size_t in_RSI;\u000a  \u000a  uVar1 = (uint)field;\u000a  if (2 < uVar1) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("file == 0 || file == 1 || file == 2","src/join.c",0x337,\u000a                  "void add_field(int, size_t)");\u000a  }\u000a  if ((uVar1 == 0) && (in_RSI != 0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("file != 0 || field == 0","src/join.c",0x338,"void add_field(int, size_t)");\u000a  }\u000a  poVar2 = (outlist *)xmalloc(0x18);\u000a  poVar2->file = uVar1;\u000a  poVar2->field = in_RSI;\u000a  poVar2->next = (outlist *)0x0;\u000a  outlist_end->next = poVar2;\u000a  outlist_end = poVar2;\u000a  return;\u000a}\u000a\u000a
p276
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV EBP,EDI\nCMP EBP,0x3\nJNC 0x00402c77\nTEST EBP,EBP\nJNZ 0x00402c46\nTEST RBX,RBX\nJNZ 0x00402c90\nMOV EDI,0x18\nCALL 0x00405600\nMOV dword ptr [RAX],EBP\nMOV qword ptr [RAX + 0x8],RBX\nMOV qword ptr [RAX + 0x10],0x0\nMOV RCX,qword ptr [0x0060b228]\nMOV qword ptr [RCX + 0x10],RAX\nMOV qword ptr [0x0060b228],RAX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV EDI,0x4077b6\nMOV ESI,0x4077da\nMOV EDX,0x337\nMOV ECX,0x4077e5\nCALL 0x00401590\nMOV EDI,0x407801\nMOV ESI,0x4077da\nMOV EDX,0x338\nMOV ECX,0x4077e5\nCALL 0x00401590\n'
p277
S'55\n53\n50\n48 89 f3\n89 fd\n83 fd 03\n73 3a\n85 ed\n75 05\n48 85 db\n75 4a\nbf 18 00 00 00\ne8 b0 29 00 00\n89 28\n48 89 58 08\n48 c7 40 10 00 00 00 00\n48 8b 0d c3 85 20 00\n48 89 41 10\n48 89 05 b8 85 20 00\n48 83 c4 08\n5b\n5d\nc3\nbf b6 77 40 00\nbe da 77 40 00\nba 37 03 00 00\nb9 e5 77 40 00\ne8 00 e9 ff ff\nbf 01 78 40 00\nbe da 77 40 00\nba 38 03 00 00\nb9 e5 77 40 00\ne8 e7 e8 ff ff\n'
p278
S'.text:0000000000402c30\n.text:0000000000402c31\n.text:0000000000402c32\n.text:0000000000402c33\n.text:0000000000402c36\n.text:0000000000402c38\n.text:0000000000402c3b\n.text:0000000000402c3d\n.text:0000000000402c3f\n.text:0000000000402c41\n.text:0000000000402c44\n.text:0000000000402c46\n.text:0000000000402c4b\n.text:0000000000402c50\n.text:0000000000402c52\n.text:0000000000402c56\n.text:0000000000402c5e\n.text:0000000000402c65\n.text:0000000000402c69\n.text:0000000000402c70\n.text:0000000000402c74\n.text:0000000000402c75\n.text:0000000000402c76\n.text:0000000000402c77\n.text:0000000000402c7c\n.text:0000000000402c81\n.text:0000000000402c86\n.text:0000000000402c8b\n.text:0000000000402c90\n.text:0000000000402c95\n.text:0000000000402c9a\n.text:0000000000402c9f\n.text:0000000000402ca4\n'
p279
tp280
sS'rpl_fseeko'
p281
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p282
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_0060b1a8)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p283
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00405f18\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00405f18\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x00405f2a\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401750\nMOV RDI,RBX\nCALL 0x00401660\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00401580\nCMP RAX,-0x1\nJZ 0x00405f53\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x00405f58\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p284
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 26 b8 ff ff\n48 89 df\ne8 2e b7 ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 41 b6 ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p285
S'.text:0000000000405ef0\n.text:0000000000405ef1\n.text:0000000000405ef3\n.text:0000000000405ef4\n.text:0000000000405ef7\n.text:0000000000405efa\n.text:0000000000405efd\n.text:0000000000405f01\n.text:0000000000405f05\n.text:0000000000405f07\n.text:0000000000405f0b\n.text:0000000000405f0f\n.text:0000000000405f11\n.text:0000000000405f16\n.text:0000000000405f18\n.text:0000000000405f1b\n.text:0000000000405f1e\n.text:0000000000405f21\n.text:0000000000405f22\n.text:0000000000405f24\n.text:0000000000405f25\n.text:0000000000405f2a\n.text:0000000000405f2d\n.text:0000000000405f32\n.text:0000000000405f34\n.text:0000000000405f37\n.text:0000000000405f3a\n.text:0000000000405f3f\n.text:0000000000405f43\n.text:0000000000405f45\n.text:0000000000405f48\n.text:0000000000405f4f\n.text:0000000000405f51\n.text:0000000000405f53\n.text:0000000000405f58\n.text:0000000000405f59\n.text:0000000000405f5b\n.text:0000000000405f5c\n'
p286
tp287
sS'quote_n_mem'
p288
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p289
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p290
S'MOV ECX,0x60b260\nJMP 0x004047d0\n'
p291
S'b9 60 b2 60 00\ne9 36 fb ff ff\n'
p292
S'.text:0000000000404c90\n.text:0000000000404c95\n'
p293
tp294
sS'xstrdup'
p295
(S'\n__stdcall xstrdup(char * string)\n'
p296
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p297
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401530\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00405740\n'
p298
S'53\n48 89 fb\ne8 b7 bd ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p299
S'.text:0000000000405770\n.text:0000000000405771\n.text:0000000000405774\n.text:0000000000405779\n.text:000000000040577d\n.text:0000000000405780\n.text:0000000000405781\n'
p300
tp301
sS'c_ispunct'
p302
(S'\n__stdcall c_ispunct()\n'
p303
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p304
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00406032\nMOV AL,0x1\nJMP qword ptr [0x408428 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p305
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 28 84 40 00\nc3\n31 c0\nc3\n'
p306
S'.text:0000000000406020\n.text:0000000000406023\n.text:0000000000406026\n.text:0000000000406028\n.text:000000000040602a\n.text:0000000000406031\n.text:0000000000406032\n.text:0000000000406034\n'
p307
tp308
sS'fscanf'
p309
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p310
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_0060b0d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p311
S'JMP qword ptr [0x0060b0d8]\n'
p312
S'ff 25 22 9b 20 00\n'
p313
S'.plt:00000000004015b0\n'
p314
tp315
sS'memcpy'
p316
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p317
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_0060b120)();\u000a  return pvVar1;\u000a}\u000a\u000a
p318
S'JMP qword ptr [0x0060b120]\n'
p319
S'ff 25 da 9a 20 00\n'
p320
S'.plt:0000000000401640\n'
p321
tp322
sS'close_stdout_set_ignore_EPIPE'
p323
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p324
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p325
S'MOV byte ptr [0x0060b3c8],DIL\nRET\n'
p326
S'40 88 3d 01 7f 20 00\nc3\n'
p327
S'.text:00000000004034c0\n.text:00000000004034c7\n'
p328
tp329
sS'iswprint'
p330
(S'\n__stdcall iswprint(wint_t __wc)\n'
p331
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_0060b1e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p332
S'JMP qword ptr [0x0060b1e8]\n'
p333
S'ff 25 12 9a 20 00\n'
p334
S'.plt:00000000004017d0\n'
p335
tp336
sS'init_linep'
p337
(S'\n__stdcall init_linep(line * * linep)\n'
p338
V\u000aline * init_linep(line **linep)\u000a\u000a{\u000a  line *plVar1;\u000a  \u000a  plVar1 = (line *)xcalloc(1,0x30);\u000a  *linep = plVar1;\u000a  return plVar1;\u000a}\u000a\u000a
p339
S'PUSH RBX\nMOV RBX,RDI\nMOV EDI,0x1\nMOV ESI,0x30\nCALL 0x00405720\nMOV qword ptr [RBX],RAX\nPOP RBX\nRET\n'
p340
S'53\n48 89 fb\nbf 01 00 00 00\nbe 30 00 00 00\ne8 5d 25 00 00\n48 89 03\n5b\nc3\n'
p341
S'.text:00000000004031b0\n.text:00000000004031b1\n.text:00000000004031b4\n.text:00000000004031b9\n.text:00000000004031be\n.text:00000000004031c3\n.text:00000000004031c6\n.text:00000000004031c7\n'
p342
tp343
sS'collate_error'
p344
(S'\n__stdcall collate_error(char * s1, size_t s1len, char * s2, size_t s2len)\n'
p345
V\u000avoid collate_error(char *s1,size_t s1len,char *s2,size_t s2len)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *pcVar3;\u000a  char *pcVar4;\u000a  \u000a  uVar2 = dcgettext(0,"string comparison failed",5);\u000a  error(0,(ulong)s1 & 0xffffffff,uVar2,uVar2);\u000a  uVar2 = dcgettext(0,"Set LC_ALL=\u005c'C\u005c' to work around the problem.",5);\u000a  error(0,0,uVar2,uVar2);\u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"The strings compared were %s and %s.",5);\u000a  pcVar3 = quotearg_n_style_mem((char *)0x0,8);\u000a  pcVar4 = quotearg_n_style_mem((char *)0x1,8);\u000a  error((ulong)(uint)iVar1,0,uVar2,pcVar3,pcVar4);\u000a  return;\u000a}\u000a\u000a
p346
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV qword ptr [RSP],R8\nMOV RBX,RCX\nMOV R12,RDX\nMOV R13,RSI\nMOV EBP,EDI\nXOR EDI,EDI\nMOV ESI,0x408180\nMOV EDX,0x5\nCALL 0x00401510\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nCALL 0x00401730\nXOR EDI,EDI\nMOV ESI,0x408199\nMOV EDX,0x5\nCALL 0x00401510\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401730\nMOV R14D,dword ptr [0x0060b238]\nXOR EDI,EDI\nMOV ESI,0x4081c4\nMOV EDX,0x5\nCALL 0x00401510\nMOV R15,RAX\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,R13\nMOV RCX,R12\nCALL 0x00404a60\nMOV RBP,RAX\nMOV EDI,0x1\nMOV ESI,0x8\nMOV RDX,RBX\nMOV RCX,qword ptr [RSP]\nCALL 0x00404a60\nMOV RBX,RAX\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV RDX,R15\nMOV RCX,RBP\nMOV R8,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00401730\n'
p347
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4c 89 04 24\n48 89 cb\n49 89 d4\n49 89 f5\n89 fd\n31 ff\nbe 80 81 40 00\nba 05 00 00 00\ne8 d5 bc ff ff\n48 89 c1\n31 ff\n31 c0\n89 ee\n48 89 ca\ne8 e4 be ff ff\n31 ff\nbe 99 81 40 00\nba 05 00 00 00\ne8 b3 bc ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 c2 be ff ff\n44 8b 35 c3 59 20 00\n31 ff\nbe c4 81 40 00\nba 05 00 00 00\ne8 8a bc ff ff\n49 89 c7\n31 ff\nbe 08 00 00 00\n4c 89 ea\n4c 89 e1\ne8 c5 f1 ff ff\n48 89 c5\nbf 01 00 00 00\nbe 08 00 00 00\n48 89 da\n48 8b 0c 24\ne8 ac f1 ff ff\n48 89 c3\n31 f6\n31 c0\n44 89 f7\n4c 89 fa\n48 89 e9\n49 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 56 be ff ff\n'
p348
S'.text:0000000000405810\n.text:0000000000405811\n.text:0000000000405813\n.text:0000000000405815\n.text:0000000000405817\n.text:0000000000405819\n.text:000000000040581a\n.text:000000000040581b\n.text:000000000040581f\n.text:0000000000405822\n.text:0000000000405825\n.text:0000000000405828\n.text:000000000040582a\n.text:000000000040582c\n.text:0000000000405831\n.text:0000000000405836\n.text:000000000040583b\n.text:000000000040583e\n.text:0000000000405840\n.text:0000000000405842\n.text:0000000000405844\n.text:0000000000405847\n.text:000000000040584c\n.text:000000000040584e\n.text:0000000000405853\n.text:0000000000405858\n.text:000000000040585d\n.text:0000000000405860\n.text:0000000000405862\n.text:0000000000405864\n.text:0000000000405866\n.text:0000000000405869\n.text:000000000040586e\n.text:0000000000405875\n.text:0000000000405877\n.text:000000000040587c\n.text:0000000000405881\n.text:0000000000405886\n.text:0000000000405889\n.text:000000000040588b\n.text:0000000000405890\n.text:0000000000405893\n.text:0000000000405896\n.text:000000000040589b\n.text:000000000040589e\n.text:00000000004058a3\n.text:00000000004058a8\n.text:00000000004058ab\n.text:00000000004058af\n.text:00000000004058b4\n.text:00000000004058b7\n.text:00000000004058b9\n.text:00000000004058bb\n.text:00000000004058be\n.text:00000000004058c1\n.text:00000000004058c4\n.text:00000000004058c7\n.text:00000000004058cb\n.text:00000000004058cc\n.text:00000000004058ce\n.text:00000000004058d0\n.text:00000000004058d2\n.text:00000000004058d4\n.text:00000000004058d5\n'
p349
tp350
sS'add_file_name'
p351
(S'\n__stdcall add_file_name()\n'
p352
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000avoid add_file_name(char *pcParm1,uint *puParm2,int *piParm3,int *piParm4,uint *puParm5,\u000a                  undefined4 *puParm6)\u000a\u000a{\u000a  uint uVar1;\u000a  char *str;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  size_t val;\u000a  undefined7 extraout_var;\u000a  undefined7 extraout_var_00;\u000a  ulong uVar4;\u000a  FILE *fp;\u000a  line *line2;\u000a  seq *seq;\u000a  size_t *var;\u000a  FILE *fp_00;\u000a  line *line1;\u000a  FILE *fp_01;\u000a  ulong uVar5;\u000a  bool bVar6;\u000a  seq sStack168;\u000a  seq sStack144;\u000a  line *plStack120;\u000a  undefined4 uStack112;\u000a  undefined4 uStack108;\u000a  undefined8 uStack104;\u000a  uint *puStack96;\u000a  int *piStack88;\u000a  undefined4 *puStack80;\u000a  char *pcStack72;\u000a  ulong uStack64;\u000a  \u000a  iVar3 = *piParm4;\u000a  if (iVar3 != 2) goto LAB_0040253a;\u000a  uVar1 = *puParm2;\u000a  if (puParm2[(ulong)(uVar1 == 0)] < 4) {\u000a    str = g_names[(ulong)(uVar1 == 0)];\u000a    switch(puParm2[(ulong)(uVar1 == 0)]) {\u000a    case 0:\u000a      uStack64 = 0x40257f;\u000a      uStack104 = dcgettext(0,"extra operand %s",5);\u000a      uStack64 = 0x40258f;\u000a      quotearg_style((char *)0x4);\u000a      fp = (FILE *)0x0;\u000a      uStack64 = 0x4025a0;\u000a      error(0,0,uStack104);\u000a      fp_00 = (FILE *)0x1;\u000a      uStack64 = 0x4025aa;\u000a      usage();\u000a      puStack96 = puParm5;\u000a      piStack88 = piParm4;\u000a      puStack80 = puParm6;\u000a      pcStack72 = pcParm1;\u000a      uStack64 = (ulong)uVar1;\u000a      fadvise(fp_00);\u000a      fadvise(fp);\u000a      initseq(&sStack144);\u000a      getseq(fp_00,&sStack144);\u000a      initseq(&sStack168);\u000a      getseq(fp,&sStack168);\u000a      if (autoformat == 1) {\u000a        if (sStack144.count == 0) {\u000a          autocount_1 = 0;\u000a        }\u000a        else {\u000a          autocount_1 = (*sStack144.lines)->nfields;\u000a        }\u000a        if (sStack168.count == 0) {\u000a          autocount_2 = 0;\u000a        }\u000a        else {\u000a          autocount_2 = (*sStack168.lines)->nfields;\u000a        }\u000a      }\u000a      if (join_header_lines != 1) goto LAB_004026f4;\u000a      if (sStack144.count == 0) {\u000a        if (sStack168.count == 0) goto LAB_004026f4;\u000a        line1 = &uni_blank;\u000a        if (sStack168.count == 0) goto LAB_004026a2;\u000aLAB_00402698:\u000a        line2 = *sStack168.lines;\u000a      }\u000a      else {\u000a        line1 = *sStack144.lines;\u000a        if (sStack168.count != 0) goto LAB_00402698;\u000aLAB_004026a2:\u000a        line2 = &uni_blank;\u000a      }\u000a      prjoin(line1,line2);\u000a      prevline[0]._0_4_ = 0;\u000a      prevline[0]._4_4_ = 0;\u000a      prevline[1]._0_4_ = 0;\u000a      prevline[1]._4_4_ = 0;\u000a      if (sStack144.count != 0) {\u000a        advance_seq(fp_00,&sStack144);\u000a      }\u000a      if (sStack168.count != 0) {\u000a        advance_seq(fp,&sStack168);\u000a      }\u000aLAB_004026f4:\u000a      if ((sStack144.count != 0) && (sStack168.count != 0)) {\u000a        do {\u000a          iVar3 = keycmp(*sStack144.lines,*sStack168.lines,join_field_1,join_field_2);\u000a          if (iVar3 < 0) {\u000a            seq = &sStack144;\u000a            fp_01 = fp_00;\u000a            if (print_unpairables_1 != false) {\u000a              prjoin(*sStack144.lines,&uni_blank);\u000a              seq = &sStack144;\u000a              fp_01 = fp_00;\u000a            }\u000aLAB_0040280b:\u000a            advance_seq(fp_01,seq);\u000a            seen_unpairable = 1;\u000a            if (sStack144.count == 0) break;\u000a          }\u000a          else {\u000a            if (iVar3 != 0) {\u000a              seq = &sStack168;\u000a              fp_01 = fp;\u000a              if (print_unpairables_2 != false) {\u000a                prjoin(&uni_blank,*sStack168.lines);\u000a                seq = &sStack168;\u000a                fp_01 = fp;\u000a              }\u000a              goto LAB_0040280b;\u000a            }\u000a            do {\u000a              _Var2 = advance_seq(fp_00,&sStack144);\u000a              if (_Var2 == false) {\u000a                sStack144.count = sStack144.count + 1;\u000a                uStack108 = (undefined4)CONCAT71(extraout_var,1);\u000a                goto LAB_00402840;\u000a              }\u000a              iVar3 = keycmp(sStack144.lines[sStack144.count - 1],*sStack168.lines,join_field_1,\u000a                             join_field_2);\u000a            } while (iVar3 == 0);\u000a            uStack108 = 0;\u000aLAB_00402840:\u000a            do {\u000a              _Var2 = advance_seq(fp,&sStack168);\u000a              if (_Var2 == false) {\u000a                sStack168.count = sStack168.count + 1;\u000a                uStack112 = (undefined4)CONCAT71(extraout_var_00,1);\u000a                if (sStack144.count == 1) goto LAB_00402907;\u000a                goto LAB_004028a9;\u000a              }\u000a              iVar3 = keycmp(*sStack144.lines,sStack168.lines[sStack168.count - 1],join_field_1,\u000a                             join_field_2);\u000a            } while (iVar3 == 0);\u000a            uStack112 = 0;\u000a            if (sStack144.count != 1) {\u000aLAB_004028a9:\u000a              if (((print_pairables ^ 1) & 1) == 0) {\u000a                uVar5 = 0;\u000a                do {\u000a                  if (sStack168.count != 1) {\u000a                    uVar4 = 0;\u000a                    do {\u000a                      prjoin(sStack144.lines[uVar5],sStack168.lines[uVar4]);\u000a                      uVar4 = uVar4 + 1;\u000a                    } while (uVar4 < sStack168.count - 1);\u000a                  }\u000a                  uVar5 = uVar5 + 1;\u000a                } while (uVar5 < sStack144.count - 1);\u000a              }\u000a            }\u000aLAB_00402907:\u000a            bVar6 = (char)uStack108 == 0;\u000a            if (bVar6) {\u000a              line1 = *sStack144.lines;\u000a              *sStack144.lines = sStack144.lines[sStack144.count - 1];\u000a              sStack144.lines[sStack144.count - 1] = line1;\u000a            }\u000a            sStack144.count = (ulong)bVar6;\u000a            if ((char)uStack112 == 0) {\u000a              line1 = *sStack168.lines;\u000a              *sStack168.lines = sStack168.lines[sStack168.count - 1];\u000a              sStack168.lines[sStack168.count - 1] = line1;\u000a            }\u000a            sStack168.count = (ulong)((char)uStack112 == 0);\u000a            if (!bVar6) break;\u000a          }\u000a        } while (sStack168.count != 0);\u000a      }\u000a      plStack120 = (line *)0x0;\u000a      if (check_input_order == CHECK_ORDER_DISABLED) {\u000a        bVar6 = false;\u000a      }\u000a      else {\u000a        bVar6 = issued_disorder_warning[1] == false || issued_disorder_warning[0] == false;\u000a      }\u000a      if ((sStack144.count != 0) && (!(bool)(print_unpairables_1 == false & ~bVar6))) {\u000a        if (print_unpairables_1 != false) {\u000a          prjoin(*sStack144.lines,&uni_blank);\u000a        }\u000a        if (sStack168.count != 0) {\u000a          seen_unpairable = 1;\u000a        }\u000a        do {\u000a          _Var2 = get_line(fp_00,&plStack120);\u000a          if (_Var2 == false) break;\u000a          if (print_unpairables_1 != false) {\u000a            prjoin(plStack120,&uni_blank);\u000a          }\u000a        } while ((issued_disorder_warning[0] == false) || (print_unpairables_1 != false));\u000a      }\u000a      if ((sStack168.count != 0) && ((~bVar6 & print_unpairables_2 == false) == 0)) {\u000a        if (print_unpairables_2 != false) {\u000a          prjoin(&uni_blank,*sStack168.lines);\u000a        }\u000a        if (sStack144.count != 0) {\u000a          seen_unpairable = 1;\u000a        }\u000a        do {\u000a          _Var2 = get_line(fp,&plStack120);\u000a          if (_Var2 == false) break;\u000a          if (print_unpairables_2 != false) {\u000a            prjoin(&uni_blank,plStack120);\u000a          }\u000a        } while ((issued_disorder_warning[1] == false) || (print_unpairables_2 != false));\u000a      }\u000a      line1 = plStack120;\u000a      freeline(plStack120);\u000a      free(line1);\u000a      delseq(&sStack144);\u000a      delseq(&sStack168);\u000a      return;\u000a    case 1:\u000a      *piParm3 = *piParm3 + -1;\u000a      uStack64 = 0x4024fb;\u000a      val = string_to_join_field(str);\u000a      var = &join_field_1;\u000a      break;\u000a    case 2:\u000a      piParm3[1] = piParm3[1] + -1;\u000a      uStack64 = 0x40250a;\u000a      val = string_to_join_field(str);\u000a      var = &join_field_2;\u000a      break;\u000a    case 3:\u000a      uStack64 = 0x40251e;\u000a      add_field_list(str);\u000a      goto LAB_0040251e;\u000a    }\u000a    uStack64 = 0x402517;\u000a    set_join_field(var,val);\u000a  }\u000aLAB_0040251e:\u000a  iVar3 = 1;\u000a  if (uVar1 != 0) {\u000a    *puParm2 = puParm2[1];\u000a    g_names[0] = g_names[1];\u000a  }\u000aLAB_0040253a:\u000a  puParm2[(long)iVar3] = *puParm5;\u000a  g_names[(long)iVar3] = pcParm1;\u000a  *piParm4 = iVar3 + 1;\u000a  if (*puParm5 == 3) {\u000a    *puParm6 = 3;\u000a  }\u000a  return;\u000a}\u000a\u000a
p353
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,R9\nMOV R12,R8\nMOV R13,RCX\nMOV RBX,RSI\nMOV R15,RDI\nMOV EAX,dword ptr [R13]\nCMP EAX,0x2\nJNZ 0x0040253a\nMOV EBP,dword ptr [RBX]\nXOR EAX,EAX\nTEST EBP,EBP\nSETZ AL\nMOV ECX,dword ptr [RBX + RAX*0x4]\nCMP RCX,0x3\nJA 0x0040251e\nMOV RDI,qword ptr [0x60b310 + RAX*0x8]\nJMP qword ptr [0x406a90 + RCX*0x8]\nDEC dword ptr [RDX]\nCALL 0x004023b0\nMOV EDI,0x60b210\nJMP 0x0040250f\nDEC dword ptr [RDX + 0x4]\nCALL 0x004023b0\nMOV EDI,0x60b218\nMOV RSI,RAX\nCALL 0x00402350\nJMP 0x0040251e\nCALL 0x00402430\nMOV EAX,0x1\nTEST EBP,EBP\nJZ 0x0040253a\nMOV ECX,dword ptr [RBX + 0x4]\nMOV dword ptr [RBX],ECX\nMOV RCX,qword ptr [0x0060b318]\nMOV qword ptr [0x0060b310],RCX\nMOV ECX,dword ptr [R12]\nCDQE\nMOV dword ptr [RBX + RAX*0x4],ECX\nMOV qword ptr [0x60b310 + RAX*0x8],R15\nINC EAX\nMOV dword ptr [R13],EAX\nCMP dword ptr [R12],0x3\nJNZ 0x0040255f\nMOV dword ptr [R14],0x3\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x407819\nMOV EDX,0x5\nCALL 0x00401510\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,R15\nCALL 0x00404aa0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401730\nMOV EDI,0x1\nCALL 0x00401900\nNOP word ptr [RAX + RAX*0x1]\n'
p354
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 ce\n4d 89 c4\n49 89 cd\n48 89 f3\n49 89 ff\n41 8b 45 00\n83 f8 02\n75 67\n8b 2b\n31 c0\n85 ed\n0f 94 c0\n8b 0c 83\n48 83 f9 03\n77 39\n48 8b 3c c5 10 b3 60 00\nff 24 cd 90 6a 40 00\nff 0a\ne8 b5 fe ff ff\nbf 10 b2 60 00\neb 0d\nff 4a 04\ne8 a6 fe ff ff\nbf 18 b2 60 00\n48 89 c6\ne8 39 fe ff ff\neb 05\ne8 12 ff ff ff\nb8 01 00 00 00\n85 ed\n74 13\n8b 4b 04\n89 0b\n48 8b 0d e5 8d 20 00\n48 89 0d d6 8d 20 00\n41 8b 0c 24\n48 98\n89 0c 83\n4c 89 3c c5 10 b3 60 00\nff c0\n41 89 45 00\n41 83 3c 24 03\n75 07\n41 c7 06 03 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 ff\nbe 19 78 40 00\nba 05 00 00 00\ne8 91 ef ff ff\n48 89 c3\nbf 04 00 00 00\n4c 89 fe\ne8 11 25 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 90 f1 ff ff\nbf 01 00 00 00\ne8 56 f3 ff ff\n66 0f 1f 44 00 00\n'
p355
S'.text:00000000004024b0\n.text:00000000004024b1\n.text:00000000004024b3\n.text:00000000004024b5\n.text:00000000004024b7\n.text:00000000004024b9\n.text:00000000004024ba\n.text:00000000004024bb\n.text:00000000004024be\n.text:00000000004024c1\n.text:00000000004024c4\n.text:00000000004024c7\n.text:00000000004024ca\n.text:00000000004024ce\n.text:00000000004024d1\n.text:00000000004024d3\n.text:00000000004024d5\n.text:00000000004024d7\n.text:00000000004024d9\n.text:00000000004024dc\n.text:00000000004024df\n.text:00000000004024e3\n.text:00000000004024e5\n.text:00000000004024ed\n.text:00000000004024f4\n.text:00000000004024f6\n.text:00000000004024fb\n.text:0000000000402500\n.text:0000000000402502\n.text:0000000000402505\n.text:000000000040250a\n.text:000000000040250f\n.text:0000000000402512\n.text:0000000000402517\n.text:0000000000402519\n.text:000000000040251e\n.text:0000000000402523\n.text:0000000000402525\n.text:0000000000402527\n.text:000000000040252a\n.text:000000000040252c\n.text:0000000000402533\n.text:000000000040253a\n.text:000000000040253e\n.text:0000000000402540\n.text:0000000000402543\n.text:000000000040254b\n.text:000000000040254d\n.text:0000000000402551\n.text:0000000000402556\n.text:0000000000402558\n.text:000000000040255f\n.text:0000000000402563\n.text:0000000000402564\n.text:0000000000402566\n.text:0000000000402568\n.text:000000000040256a\n.text:000000000040256c\n.text:000000000040256d\n.text:000000000040256e\n.text:0000000000402570\n.text:0000000000402575\n.text:000000000040257a\n.text:000000000040257f\n.text:0000000000402582\n.text:0000000000402587\n.text:000000000040258a\n.text:000000000040258f\n.text:0000000000402592\n.text:0000000000402594\n.text:0000000000402596\n.text:0000000000402598\n.text:000000000040259b\n.text:00000000004025a0\n.text:00000000004025a5\n.text:00000000004025aa\n'
p356
tp357
sS'c_isspace'
p358
(S'\n__stdcall c_isspace()\n'
p359
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p360
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00406055\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p361
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p362
S'.text:0000000000406040\n.text:0000000000406043\n.text:0000000000406046\n.text:0000000000406048\n.text:000000000040604d\n.text:000000000040604f\n.text:0000000000406051\n.text:0000000000406054\n.text:0000000000406055\n.text:0000000000406057\n'
p363
tp364
sS'open'
p365
(S'\n__stdcall open(char * __file, int __oflag)\n'
p366
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_0060b1a0)();\u000a  return iVar1;\u000a}\u000a\u000a
p367
S'JMP qword ptr [0x0060b1a0]\n'
p368
S'ff 25 5a 9a 20 00\n'
p369
S'.plt:0000000000401740\n'
p370
tp371
sS'quotearg_n_custom_mem'
p372
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p373
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p374
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x0060b410]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x0060b400]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060b3f0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060b3e0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00403940\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004047d0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p375
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 17 68 20 00\n48 89 44 24 30\n0f 10 05 fb 67 20 00\n0f 29 44 24 20\n0f 10 05 df 67 20 00\n0f 29 44 24 10\n0f 10 05 c3 67 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p376
S'.text:0000000000404be0\n.text:0000000000404be1\n.text:0000000000404be3\n.text:0000000000404be5\n.text:0000000000404be6\n.text:0000000000404bea\n.text:0000000000404bed\n.text:0000000000404bf0\n.text:0000000000404bf2\n.text:0000000000404bf9\n.text:0000000000404bfe\n.text:0000000000404c05\n.text:0000000000404c0a\n.text:0000000000404c11\n.text:0000000000404c16\n.text:0000000000404c1d\n.text:0000000000404c21\n.text:0000000000404c24\n.text:0000000000404c27\n.text:0000000000404c2c\n.text:0000000000404c2e\n.text:0000000000404c31\n.text:0000000000404c34\n.text:0000000000404c37\n.text:0000000000404c3c\n.text:0000000000404c40\n.text:0000000000404c41\n.text:0000000000404c43\n.text:0000000000404c45\n.text:0000000000404c46\n'
p377
tp378
sS'_init'
p379
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p380
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___0060aff8;\u000a  if (PTR___gmon_start___0060aff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___0060aff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p381
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x0060aff8]\nTEST RAX,RAX\nJZ 0x0040141a\nCALL RAX\nADD RSP,0x8\nRET\n'
p382
S'48 83 ec 08\n48 8b 05 e5 9b 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p383
S'.init:0000000000401408\n.init:000000000040140c\n.init:0000000000401413\n.init:0000000000401416\n.init:0000000000401418\n.init:000000000040141a\n.init:000000000040141e\n'
p384
tp385
sS'strpbrk'
p386
(S'\n__stdcall strpbrk(char * __s, char * __accept)\n'
p387
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strpbrk(char *__s,char *__accept)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strpbrk_0060b160)();\u000a  return pcVar1;\u000a}\u000a\u000a
p388
S'JMP qword ptr [0x0060b160]\n'
p389
S'ff 25 9a 9a 20 00\n'
p390
S'.plt:00000000004016c0\n'
p391
tp392
sS'set_quoting_flags'
p393
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p394
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p395
S'TEST RDI,RDI\nMOV ECX,0x60b3e0\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p396
S'48 85 ff\nb9 e0 b3 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p397
S'.text:0000000000403920\n.text:0000000000403923\n.text:0000000000403928\n.text:000000000040392c\n.text:000000000040392f\n.text:0000000000403932\n'
p398
tp399
sS'realloc'
p400
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p401
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_0060b178)();\u000a  return pvVar1;\u000a}\u000a\u000a
p402
S'JMP qword ptr [0x0060b178]\n'
p403
S'ff 25 82 9a 20 00\n'
p404
S'.plt:00000000004016f0\n'
p405
tp406
sS'__fprintf_chk'
p407
(S'\n__stdcall __fprintf_chk()\n'
p408
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_0060b1d8)();\u000a  return;\u000a}\u000a\u000a
p409
S'JMP qword ptr [0x0060b1d8]\n'
p410
S'ff 25 22 9a 20 00\n'
p411
S'.plt:00000000004017b0\n'
p412
tp413
sS'get_charset_aliases'
p414
(S'\n__stdcall get_charset_aliases()\n'
p415
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases = "";\u000a    return "";\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_004063c4_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_004063c4_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_004063c4_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_004063c4_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_004063c4_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_004063c4_caseD_9;\u000a      case -1:\u000a        goto switchD_004063c4_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_0040641d:\u000a  __s = "";\u000aLAB_00406423:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_004063c4_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00406423;\u000a  }\u000a  goto LAB_0040641d;\u000a}\u000a\u000a
p416
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x0060b528]\nTEST R15,R15\nJNZ 0x00406432\nMOV EDI,0x408854\nCALL 0x00401440\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004061e8\nCMP byte ptr [RBX],0x0\nJNZ 0x004061ed\nMOV EBX,0x408864\nMOV RDI,RBX\nCALL 0x00401530\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00406207\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00406209\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401670\nMOV R13,RAX\nTEST R13,R13\nJZ 0x0040625d\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00401640\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00406268\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00406285\nMOV R15D,0x407773\nJMP 0x0040642b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00401740\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0040641d\nMOV ESI,0x40773f\nMOV EDI,EBP\nCALL 0x00401700\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004063e4\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x004063b0\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x004014a0\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x004014a0\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x004063b0\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x004016a0\nMOV ESI,0x408873\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x004015b0\nCMP EAX,0x2\nJL 0x00406404\nMOV RDI,R12\nCALL 0x00401530\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x00401530\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040638d\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x004016f0\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x004062d4\nJMP 0x004063ed\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401670\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x004062d4\nJMP 0x004063ed\nMOV RDI,RBX\nCALL 0x004014c0\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00406317\nJMP qword ptr [0x408718 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x004014c0\nCMP EAX,-0x1\nJZ 0x00406404\nCMP EAX,0xa\nJNZ 0x004063d0\nJMP 0x004063b0\nMOV EDI,EBP\nCALL 0x004015c0\nJMP 0x0040641d\nMOV RDI,R15\nCALL 0x00401450\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00405c60\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040641d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00406423\nMOV R15D,0x407773\nMOV RDI,R13\nCALL 0x00401450\nMOV qword ptr [0x0060b528],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p417
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 60 53 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 54 88 40 00\ne8 65 b2 ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb 64 88 40 00\n48 89 df\ne8 3b b3 ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 59 b4 ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 13 b4 ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf 73 77 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 ac b4 ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 3f 77 40 00\n89 ef\ne8 56 b4 ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 ab b1 ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 9b b1 ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 7f b3 ff ff\nbe 73 88 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 7a b2 ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 e9 b1 ff ff\n49 89 c4\n48 89 ef\ne8 de b1 ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 76 b3 ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 d5 b2 ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 08 b1 ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 18 87 40 00\n48 89 df\ne8 e8 b0 ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 d5 b1 ff ff\neb 30\n4c 89 ff\ne8 5b b0 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 54 f8 ff ff\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf 73 77 40 00\n4c 89 ef\ne8 25 b0 ff ff\n4c 89 3d f6 50 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p418
S'.text:00000000004061b0\n.text:00000000004061b1\n.text:00000000004061b3\n.text:00000000004061b5\n.text:00000000004061b7\n.text:00000000004061b9\n.text:00000000004061ba\n.text:00000000004061c1\n.text:00000000004061c8\n.text:00000000004061cb\n.text:00000000004061d1\n.text:00000000004061d6\n.text:00000000004061db\n.text:00000000004061de\n.text:00000000004061e1\n.text:00000000004061e3\n.text:00000000004061e6\n.text:00000000004061e8\n.text:00000000004061ed\n.text:00000000004061f0\n.text:00000000004061f5\n.text:00000000004061f8\n.text:00000000004061fb\n.text:00000000004061fd\n.text:0000000000406202\n.text:0000000000406205\n.text:0000000000406207\n.text:0000000000406209\n.text:000000000040620d\n.text:0000000000406212\n.text:0000000000406217\n.text:000000000040621a\n.text:000000000040621d\n.text:000000000040621f\n.text:0000000000406222\n.text:0000000000406225\n.text:0000000000406228\n.text:000000000040622d\n.text:0000000000406230\n.text:0000000000406233\n.text:0000000000406236\n.text:0000000000406238\n.text:000000000040623e\n.text:0000000000406248\n.text:000000000040624d\n.text:0000000000406257\n.text:000000000040625b\n.text:000000000040625d\n.text:0000000000406263\n.text:0000000000406268\n.text:0000000000406272\n.text:0000000000406277\n.text:0000000000406281\n.text:0000000000406285\n.text:000000000040628a\n.text:000000000040628c\n.text:000000000040628f\n.text:0000000000406294\n.text:0000000000406296\n.text:0000000000406298\n.text:000000000040629e\n.text:00000000004062a3\n.text:00000000004062a5\n.text:00000000004062aa\n.text:00000000004062ad\n.text:00000000004062b0\n.text:00000000004062b6\n.text:00000000004062bb\n.text:00000000004062c0\n.text:00000000004062c2\n.text:00000000004062c7\n.text:00000000004062ca\n.text:00000000004062cf\n.text:00000000004062d4\n.text:00000000004062d9\n.text:00000000004062dc\n.text:00000000004062df\n.text:00000000004062e2\n.text:00000000004062e5\n.text:00000000004062e8\n.text:00000000004062ed\n.text:00000000004062f0\n.text:00000000004062f5\n.text:00000000004062f8\n.text:00000000004062fd\n.text:0000000000406300\n.text:0000000000406305\n.text:000000000040630a\n.text:000000000040630d\n.text:0000000000406312\n.text:0000000000406317\n.text:0000000000406319\n.text:000000000040631c\n.text:0000000000406321\n.text:0000000000406326\n.text:0000000000406328\n.text:000000000040632b\n.text:000000000040632e\n.text:0000000000406331\n.text:0000000000406336\n.text:0000000000406339\n.text:000000000040633f\n.text:0000000000406342\n.text:0000000000406347\n.text:000000000040634a\n.text:000000000040634d\n.text:0000000000406352\n.text:0000000000406355\n.text:000000000040635a\n.text:000000000040635f\n.text:0000000000406362\n.text:0000000000406364\n.text:0000000000406368\n.text:000000000040636d\n.text:0000000000406372\n.text:0000000000406375\n.text:000000000040637a\n.text:000000000040637d\n.text:0000000000406382\n.text:0000000000406385\n.text:000000000040638b\n.text:000000000040638d\n.text:0000000000406392\n.text:0000000000406396\n.text:000000000040639b\n.text:000000000040639e\n.text:00000000004063a1\n.text:00000000004063a7\n.text:00000000004063b0\n.text:00000000004063b3\n.text:00000000004063b8\n.text:00000000004063bb\n.text:00000000004063be\n.text:00000000004063c4\n.text:00000000004063d0\n.text:00000000004063d3\n.text:00000000004063d8\n.text:00000000004063db\n.text:00000000004063dd\n.text:00000000004063e0\n.text:00000000004063e2\n.text:00000000004063e4\n.text:00000000004063e6\n.text:00000000004063eb\n.text:00000000004063ed\n.text:00000000004063f0\n.text:00000000004063f5\n.text:00000000004063f7\n.text:00000000004063fc\n.text:00000000004063ff\n.text:0000000000406404\n.text:0000000000406407\n.text:000000000040640c\n.text:0000000000406411\n.text:0000000000406414\n.text:0000000000406416\n.text:000000000040641b\n.text:000000000040641d\n.text:0000000000406423\n.text:0000000000406426\n.text:000000000040642b\n.text:0000000000406432\n.text:0000000000406435\n.text:000000000040643c\n.text:000000000040643d\n.text:000000000040643f\n.text:0000000000406441\n.text:0000000000406443\n.text:0000000000406445\n.text:0000000000406446\n'
p419
tp420
sS'nl_langinfo'
p421
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p422
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_0060b148)();\u000a  return pcVar1;\u000a}\u000a\u000a
p423
S'JMP qword ptr [0x0060b148]\n'
p424
S'ff 25 b2 9a 20 00\n'
p425
S'.plt:0000000000401690\n'
p426
tp427
sS'x2realloc'
p428
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p429
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p430
S'MOV EDX,0x1\nJMP 0x00405670\n'
p431
S'ba 01 00 00 00\neb 89\n'
p432
S'.text:00000000004056e0\n.text:00000000004056e5\n'
p433
tp434
sS'strlen'
p435
(S'\n__stdcall strlen(char * __s)\n'
p436
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_0060b098)();\u000a  return sVar1;\u000a}\u000a\u000a
p437
S'JMP qword ptr [0x0060b098]\n'
p438
S'ff 25 62 9b 20 00\n'
p439
S'.plt:0000000000401530\n'
p440
tp441
sS'memcmp'
p442
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p443
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_0060b0f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p444
S'JMP qword ptr [0x0060b0f8]\n'
p445
S'ff 25 02 9b 20 00\n'
p446
S'.plt:00000000004015f0\n'
p447
tp448
sS'quotearg_n_style_mem'
p449
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p450
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p451
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00404a00\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004047d0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p452
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p453
S'.text:0000000000404a60\n.text:0000000000404a61\n.text:0000000000404a63\n.text:0000000000404a65\n.text:0000000000404a66\n.text:0000000000404a6a\n.text:0000000000404a6d\n.text:0000000000404a70\n.text:0000000000404a72\n.text:0000000000404a75\n.text:0000000000404a78\n.text:0000000000404a7d\n.text:0000000000404a7f\n.text:0000000000404a82\n.text:0000000000404a85\n.text:0000000000404a88\n.text:0000000000404a8d\n.text:0000000000404a91\n.text:0000000000404a92\n.text:0000000000404a94\n.text:0000000000404a96\n.text:0000000000404a97\n'
p454
tp455
sS'_exit'
p456
(S'\n__stdcall _exit(int __status)\n'
p457
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_0060b048)();\u000a  return;\u000a}\u000a\u000a
p458
S'JMP qword ptr [0x0060b048]\n'
p459
S'ff 25 b2 9b 20 00\n'
p460
S'.plt:0000000000401490\n'
p461
tp462
sS'memcasecmp'
p463
(S'\n__stdcall memcasecmp(void * vs1, void * vs2, size_t n)\n'
p464
V\u000aint memcasecmp(void *vs1,void *vs2,size_t n)\u000a\u000a{\u000a  int iVar1;\u000a  __int32_t **pp_Var2;\u000a  ulong uVar3;\u000a  \u000a  if (n != 0) {\u000a    pp_Var2 = __ctype_toupper_loc();\u000a    uVar3 = 0;\u000a    do {\u000a      iVar1 = (*pp_Var2)[(ulong)*(byte *)((long)vs1 + uVar3)] -\u000a              (*pp_Var2)[(ulong)*(byte *)((long)vs2 + uVar3)];\u000a      if (iVar1 != 0) {\u000a        return iVar1;\u000a      }\u000a      uVar3 = uVar3 + 1;\u000a    } while (uVar3 < n);\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p465
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV RBX,RDX\nMOV R14,RSI\nMOV R15,RDI\nTEST RBX,RBX\nJZ 0x004037ba\nCALL 0x00401430\nMOV RCX,qword ptr [RAX]\nXOR EDX,EDX\nNOP dword ptr [RAX]\nMOVZX EAX,byte ptr [R15 + RDX*0x1]\nMOV EAX,dword ptr [RCX + RAX*0x4]\nMOVZX ESI,byte ptr [R14 + RDX*0x1]\nSUB EAX,dword ptr [RCX + RSI*0x4]\nJNZ 0x004037bc\nINC RDX\nCMP RDX,RBX\nJC 0x004037a0\nXOR EAX,EAX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p466
S'41 57\n41 56\n53\n48 89 d3\n49 89 f6\n49 89 ff\n48 85 db\n74 27\ne8 98 dc ff ff\n48 8b 08\n31 d2\n0f 1f 00\n41 0f b6 04 17\n8b 04 81\n41 0f b6 34 16\n2b 04 b1\n75 0a\n48 ff c2\n48 39 da\n72 e6\n31 c0\n5b\n41 5e\n41 5f\nc3\n'
p467
S'.text:0000000000403780\n.text:0000000000403782\n.text:0000000000403784\n.text:0000000000403785\n.text:0000000000403788\n.text:000000000040378b\n.text:000000000040378e\n.text:0000000000403791\n.text:0000000000403793\n.text:0000000000403798\n.text:000000000040379b\n.text:000000000040379d\n.text:00000000004037a0\n.text:00000000004037a5\n.text:00000000004037a8\n.text:00000000004037ad\n.text:00000000004037b0\n.text:00000000004037b2\n.text:00000000004037b5\n.text:00000000004037b8\n.text:00000000004037ba\n.text:00000000004037bc\n.text:00000000004037bd\n.text:00000000004037bf\n.text:00000000004037c1\n'
p468
tp469
sS'bkm_scale_by_power'
p470
(S'\n__stdcall bkm_scale_by_power(ulong * x)\n'
p471
V\u000astrtol_error bkm_scale_by_power(ulong *x)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  int in_EDX;\u000a  strtol_error sVar2;\u000a  \u000a  sVar2 = LONGINT_OK;\u000a  if (in_EDX != 0) {\u000a    do {\u000a      sVar1 = bkm_scale(x);\u000a      sVar2 = sVar2 | sVar1;\u000a      in_EDX = in_EDX + -1;\u000a    } while (in_EDX != 0);\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p472
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R14D,ESI\nMOV R15,RDI\nXOR EBP,EBP\nTEST EBX,EBX\nJZ 0x00405c01\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nMOV ESI,R14D\nCALL 0x00405ba0\nOR EBP,EAX\nDEC EBX\nJNZ 0x00405bf0\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p473
S'55\n41 57\n41 56\n53\n50\n89 d3\n41 89 f6\n49 89 ff\n31 ed\n85 db\n74 1c\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\n44 89 f6\ne8 a5 ff ff ff\n09 c5\nff cb\n75 ef\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p474
S'.text:0000000000405bd0\n.text:0000000000405bd1\n.text:0000000000405bd3\n.text:0000000000405bd5\n.text:0000000000405bd6\n.text:0000000000405bd7\n.text:0000000000405bd9\n.text:0000000000405bdc\n.text:0000000000405bdf\n.text:0000000000405be1\n.text:0000000000405be3\n.text:0000000000405be5\n.text:0000000000405bf0\n.text:0000000000405bf3\n.text:0000000000405bf6\n.text:0000000000405bfb\n.text:0000000000405bfd\n.text:0000000000405bff\n.text:0000000000405c01\n.text:0000000000405c03\n.text:0000000000405c07\n.text:0000000000405c08\n.text:0000000000405c0a\n.text:0000000000405c0c\n.text:0000000000405c0d\n'
p475
tp476
sS'xrealloc'
p477
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p478
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p479
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00405657\nTEST RBX,RBX\nJNZ 0x00405657\nCALL 0x00401450\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x004016f0\nTEST RBX,RBX\nJZ 0x00405669\nTEST RAX,RAX\nJZ 0x0040566b\nPOP RBX\nRET\nCALL 0x00405790\n'
p480
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 fd bd ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 91 c0 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p481
S'.text:0000000000405640\n.text:0000000000405641\n.text:0000000000405644\n.text:0000000000405647\n.text:0000000000405649\n.text:000000000040564c\n.text:000000000040564e\n.text:0000000000405653\n.text:0000000000405655\n.text:0000000000405656\n.text:0000000000405657\n.text:000000000040565a\n.text:000000000040565f\n.text:0000000000405662\n.text:0000000000405664\n.text:0000000000405667\n.text:0000000000405669\n.text:000000000040566a\n.text:000000000040566b\n'
p482
tp483
sS'feof_unlocked'
p484
(S'\n__stdcall feof_unlocked(FILE * __stream)\n'
p485
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint feof_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_feof_unlocked_0060b1f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p486
S'JMP qword ptr [0x0060b1f0]\n'
p487
S'ff 25 0a 9a 20 00\n'
p488
S'.plt:00000000004017e0\n'
p489
tp490
sS'close_stdout'
p491
(S'\n__stdcall close_stdout()\n'
p492
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_004034f7;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x4077b3,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_004034f7:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p493
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x0060b2a8]\nCALL 0x004060b0\nTEST EAX,EAX\nJZ 0x004034f7\nCMP byte ptr [0x0060b3c8],0x0\nJZ 0x0040350c\nCALL 0x00401470\nCMP dword ptr [RAX],0x20\nJNZ 0x0040350c\nMOV RDI,qword ptr [0x0060b2e0]\nCALL 0x004060b0\nTEST EAX,EAX\nJNZ 0x00403551\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x407856\nMOV EDX,0x5\nCALL 0x00401510\nMOV R14,RAX\nMOV RBX,qword ptr [0x0060b3c0]\nCALL 0x00401470\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x0040355c\nXOR EDI,EDI\nMOV EDX,0x4077b3\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00401730\nMOV EDI,dword ptr [0x0060b238]\nCALL 0x00401490\nMOV EDI,dword ptr [0x0060b238]\nCALL 0x00401490\nMOV RDI,RBX\nCALL 0x00404b60\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x407862\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00401730\nMOV EDI,dword ptr [0x0060b238]\nCALL 0x00401490\n'
p494
S'55\n41 56\n53\n48 8b 3d cd 7d 20 00\ne8 d0 2b 00 00\n85 c0\n74 13\n80 3d dd 7e 20 00 00\n74 1f\ne8 7e df ff ff\n83 38 20\n75 15\n48 8b 3d e2 7d 20 00\ne8 ad 2b 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe 56 78 40 00\nba 05 00 00 00\ne8 f3 df ff ff\n49 89 c6\n48 8b 1d 99 7e 20 00\ne8 44 df ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba b3 77 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 ea e1 ff ff\n8b 3d ec 7c 20 00\ne8 3f df ff ff\n8b 3d e1 7c 20 00\ne8 34 df ff ff\n48 89 df\ne8 fc 15 00 00\n48 89 c1\n31 ff\nba 62 78 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 b6 e1 ff ff\n8b 3d b8 7c 20 00\ne8 0b df ff ff\n'
p495
S'.text:00000000004034d0\n.text:00000000004034d1\n.text:00000000004034d3\n.text:00000000004034d4\n.text:00000000004034db\n.text:00000000004034e0\n.text:00000000004034e2\n.text:00000000004034e4\n.text:00000000004034eb\n.text:00000000004034ed\n.text:00000000004034f2\n.text:00000000004034f5\n.text:00000000004034f7\n.text:00000000004034fe\n.text:0000000000403503\n.text:0000000000403505\n.text:0000000000403507\n.text:0000000000403508\n.text:000000000040350a\n.text:000000000040350b\n.text:000000000040350c\n.text:000000000040350e\n.text:0000000000403513\n.text:0000000000403518\n.text:000000000040351d\n.text:0000000000403520\n.text:0000000000403527\n.text:000000000040352c\n.text:000000000040352f\n.text:0000000000403531\n.text:0000000000403533\n.text:0000000000403535\n.text:000000000040353a\n.text:000000000040353c\n.text:000000000040353e\n.text:0000000000403541\n.text:0000000000403546\n.text:000000000040354c\n.text:0000000000403551\n.text:0000000000403557\n.text:000000000040355c\n.text:000000000040355f\n.text:0000000000403564\n.text:0000000000403567\n.text:0000000000403569\n.text:000000000040356e\n.text:0000000000403570\n.text:0000000000403572\n.text:0000000000403575\n.text:000000000040357a\n.text:0000000000403580\n'
p496
tp497
sS'version_etc_ar'
p498
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p499
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p500
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00405450\nJMP 0x004050e0\n'
p501
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p502
S'.text:0000000000405440\n.text:0000000000405447\n.text:0000000000405450\n.text:0000000000405456\n.text:000000000040545a\n.text:000000000040545c\n'
p503
tp504
sS'c_isxdigit'
p505
(S'\n__stdcall c_isxdigit()\n'
p506
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p507
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x0040608b\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p508
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p509
S'.text:0000000000406070\n.text:0000000000406073\n.text:0000000000406076\n.text:0000000000406078\n.text:0000000000406082\n.text:0000000000406084\n.text:0000000000406087\n.text:000000000040608a\n.text:000000000040608b\n.text:000000000040608d\n'
p510
tp511
sS'__libc_csu_fini'
p512
(S'\n__stdcall __libc_csu_fini()\n'
p513
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p514
S'RET\n'
p515
S'f3 c3\n'
p516
S'.text:0000000000406620\n'
p517
tp518
sS'abort'
p519
(S'\n__stdcall abort()\n'
p520
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_0060b030)();\u000a  return;\u000a}\u000a\u000a
p521
S'JMP qword ptr [0x0060b030]\n'
p522
S'ff 25 ca 9b 20 00\n'
p523
S'.plt:0000000000401460\n'
p524
tp525
sS'version_etc'
p526
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p527
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p528
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00405512\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00405470\nADD RSP,0xd8\nRET\n'
p529
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p530
S'.text:00000000004054d0\n.text:00000000004054d7\n.text:00000000004054d9\n.text:00000000004054db\n.text:00000000004054e0\n.text:00000000004054e5\n.text:00000000004054ea\n.text:00000000004054f2\n.text:00000000004054fa\n.text:0000000000405502\n.text:000000000040550a\n.text:0000000000405512\n.text:0000000000405517\n.text:000000000040551c\n.text:0000000000405521\n.text:0000000000405526\n.text:000000000040552e\n.text:0000000000405533\n.text:000000000040553b\n.text:0000000000405542\n.text:0000000000405545\n.text:000000000040554a\n.text:0000000000405551\n'
p531
tp532
sS'xfields'
p533
(S'\n__stdcall xfields(line * line)\n'
p534
V\u000avoid xfields(line *line)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t sVar2;\u000a  char *pcVar3;\u000a  _Bool _Var4;\u000a  void *pvVar5;\u000a  char *pcVar6;\u000a  long lVar7;\u000a  char *pcVar8;\u000a  char *pcVar9;\u000a  char *field;\u000a  char *len;\u000a  \u000a  sVar2 = (line->buf).length;\u000a  field = (line->buf).buffer;\u000a  len = field + (sVar2 - 1);\u000a  if (field == len) {\u000a    return;\u000a  }\u000a  if ((tab < 0) || (tab == 10)) {\u000a    if (tab < 0) {\u000a      pcVar1 = field + sVar2;\u000a      lVar7 = sVar2 - 1;\u000a      while (_Var4 = field_sep(), _Var4 != false) {\u000a        field = field + 1;\u000a        lVar7 = lVar7 + -1;\u000a        if (lVar7 == 0) {\u000a          return;\u000a        }\u000a      }\u000a      do {\u000a        pcVar8 = field + 3;\u000a        pcVar3 = field + 2;\u000a        do {\u000a          pcVar9 = pcVar3;\u000a          pcVar6 = pcVar8;\u000a          if (pcVar1 == pcVar9) {\u000a            len = pcVar9 + (-1 - (long)field);\u000a            goto LAB_0040327f;\u000a          }\u000a          _Var4 = field_sep();\u000a          pcVar8 = pcVar6 + 1;\u000a          pcVar3 = pcVar9 + 1;\u000a        } while (_Var4 == false);\u000a        extract_field(line,field,(size_t)(pcVar9 + (-1 - (long)field)));\u000a        do {\u000a          pcVar8 = pcVar6;\u000a          if (pcVar1 == pcVar8) break;\u000a          _Var4 = field_sep();\u000a          pcVar6 = pcVar8 + 1;\u000a        } while (_Var4 != false);\u000a        field = pcVar8 + -1;\u000a      } while (pcVar1 != pcVar8);\u000a      field = pcVar8 + -1;\u000a    }\u000a  }\u000a  else {\u000a    while (pvVar5 = memchr(field,tab,(size_t)(len + -(long)field)), pvVar5 != (void *)0x0) {\u000a      extract_field(line,field,(size_t)((long)pvVar5 - (long)field));\u000a      field = (char *)((long)pvVar5 + 1);\u000a    }\u000a  }\u000a  len = len + -(long)field;\u000aLAB_0040327f:\u000a  extract_field(line,field,(size_t)len);\u000a  return;\u000a}\u000a\u000a
p535
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV RBX,qword ptr [R14 + 0x8]\nMOV R13,qword ptr [R14 + 0x10]\nLEA R15,[R13 + RBX*0x1 + -0x1]\nCMP R13,R15\nJZ 0x00403226\nMOV EAX,dword ptr [0x0060b220]\nTEST EAX,EAX\nJS 0x004031ff\nCMP EAX,0xa\nJNZ 0x00403257\nTEST EAX,EAX\nJNS 0x00403273\nLEA RBP,[R13 + RBX*0x1]\nDEC RBX\nNOP dword ptr [RAX + RAX*0x1]\nMOVZX EDI,byte ptr [R13]\nCALL 0x00403490\nTEST AL,AL\nJZ 0x00403292\nINC R13\nDEC RBX\nJNZ 0x00403210\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RDX,RBX\nSUB RDX,R13\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x00403430\nMOV R13,RBX\nINC R13\nMOV ESI,dword ptr [0x0060b220]\nMOV RDX,R15\nSUB RDX,R13\nMOV RDI,R13\nCALL 0x004015e0\nMOV RBX,RAX\nTEST RBX,RBX\nJNZ 0x00403240\nSUB R15,R13\nMOV RDI,R14\nMOV RSI,R13\nMOV RDX,R15\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00403430\nMOV qword ptr [RSP],RBP\nLEA R12,[R13 + 0x2]\nLEA RCX,[R13 + 0x3]\nMOV RBP,qword ptr [RSP]\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RBX,RCX\nCMP RBP,R12\nJZ 0x0040331f\nMOVZX EDI,byte ptr [R12 + -0x1]\nCALL 0x00403490\nINC R12\nLEA RCX,[RBX + 0x1]\nTEST AL,AL\nJZ 0x004032b0\nADD R12,-0x2\nSUB R12,R13\nMOV RDI,R14\nMOV RSI,R13\nMOV RDX,R12\nCALL 0x00403430\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RBP,RBX\nCMP qword ptr [RSP],RBP\nJZ 0x0040330a\nMOVZX EDI,byte ptr [RBP + -0x1]\nCALL 0x00403490\nLEA RBX,[RBP + 0x1]\nTEST AL,AL\nJNZ 0x004032f0\nLEA R13,[RBP + -0x1]\nCMP qword ptr [RSP],RBP\nJNZ 0x00403296\nDEC RBP\nMOV R13,RBP\nJMP 0x00403273\nDEC R12\nSUB R12,R13\nMOV RDI,R14\nMOV RSI,R13\nMOV RDX,R12\nJMP 0x0040327f\n'
p536
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 fe\n49 8b 5e 08\n4d 8b 6e 10\n4d 8d 7c 1d ff\n4d 39 fd\n74 36\n8b 05 2a 80 20 00\n85 c0\n78 05\n83 f8 0a\n75 58\n85 c0\n79 70\n49 8d 6c 1d 00\n48 ff cb\n0f 1f 44 00 00\n41 0f b6 7d 00\ne8 76 02 00 00\n84 c0\n74 74\n49 ff c5\n48 ff cb\n75 ea\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 89 da\n4c 29 ea\n4c 89 f7\n4c 89 ee\ne8 df 01 00 00\n49 89 dd\n49 ff c5\n8b 35 c3 7f 20 00\n4c 89 fa\n4c 29 ea\n4c 89 ef\ne8 75 e3 ff ff\n48 89 c3\n48 85 db\n75 cd\n4d 29 ef\n4c 89 f7\n4c 89 ee\n4c 89 fa\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 9e 01 00 00\n48 89 2c 24\n4d 8d 65 02\n49 8d 4d 03\n48 8b 2c 24\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 cb\n4c 39 e5\n74 67\n41 0f b6 7c 24 ff\ne8 cd 01 00 00\n49 ff c4\n48 8d 4b 01\n84 c0\n74 e2\n49 83 c4 fe\n4d 29 ec\n4c 89 f7\n4c 89 ee\n4c 89 e2\ne8 4d 01 00 00\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 dd\n48 39 2c 24\n74 11\n0f b6 7d ff\ne8 8e 01 00 00\n48 8d 5d 01\n84 c0\n75 e6\n4c 8d 6d ff\n48 39 2c 24\n75 82\n48 ff cd\n49 89 ed\ne9 54 ff ff ff\n49 ff cc\n4d 29 ec\n4c 89 f7\n4c 89 ee\n4c 89 e2\ne9 4c ff ff ff\n'
p537
S'.text:00000000004031d0\n.text:00000000004031d1\n.text:00000000004031d3\n.text:00000000004031d5\n.text:00000000004031d7\n.text:00000000004031d9\n.text:00000000004031da\n.text:00000000004031db\n.text:00000000004031de\n.text:00000000004031e2\n.text:00000000004031e6\n.text:00000000004031eb\n.text:00000000004031ee\n.text:00000000004031f0\n.text:00000000004031f6\n.text:00000000004031f8\n.text:00000000004031fa\n.text:00000000004031fd\n.text:00000000004031ff\n.text:0000000000403201\n.text:0000000000403203\n.text:0000000000403208\n.text:000000000040320b\n.text:0000000000403210\n.text:0000000000403215\n.text:000000000040321a\n.text:000000000040321c\n.text:000000000040321e\n.text:0000000000403221\n.text:0000000000403224\n.text:0000000000403226\n.text:000000000040322a\n.text:000000000040322b\n.text:000000000040322d\n.text:000000000040322f\n.text:0000000000403231\n.text:0000000000403233\n.text:0000000000403234\n.text:0000000000403240\n.text:0000000000403243\n.text:0000000000403246\n.text:0000000000403249\n.text:000000000040324c\n.text:0000000000403251\n.text:0000000000403254\n.text:0000000000403257\n.text:000000000040325d\n.text:0000000000403260\n.text:0000000000403263\n.text:0000000000403266\n.text:000000000040326b\n.text:000000000040326e\n.text:0000000000403271\n.text:0000000000403273\n.text:0000000000403276\n.text:0000000000403279\n.text:000000000040327c\n.text:000000000040327f\n.text:0000000000403283\n.text:0000000000403284\n.text:0000000000403286\n.text:0000000000403288\n.text:000000000040328a\n.text:000000000040328c\n.text:000000000040328d\n.text:0000000000403292\n.text:0000000000403296\n.text:000000000040329a\n.text:000000000040329e\n.text:00000000004032a2\n.text:00000000004032b0\n.text:00000000004032b3\n.text:00000000004032b6\n.text:00000000004032b8\n.text:00000000004032be\n.text:00000000004032c3\n.text:00000000004032c6\n.text:00000000004032ca\n.text:00000000004032cc\n.text:00000000004032ce\n.text:00000000004032d2\n.text:00000000004032d5\n.text:00000000004032d8\n.text:00000000004032db\n.text:00000000004032de\n.text:00000000004032e3\n.text:00000000004032f0\n.text:00000000004032f3\n.text:00000000004032f7\n.text:00000000004032f9\n.text:00000000004032fd\n.text:0000000000403302\n.text:0000000000403306\n.text:0000000000403308\n.text:000000000040330a\n.text:000000000040330e\n.text:0000000000403312\n.text:0000000000403314\n.text:0000000000403317\n.text:000000000040331a\n.text:000000000040331f\n.text:0000000000403322\n.text:0000000000403325\n.text:0000000000403328\n.text:000000000040332b\n.text:000000000040332e\n'
p538
tp539
sS'posix_fadvise'
p540
(S'\n__stdcall posix_fadvise(int __fd, __off_t __offset, __off_t __len, int __advise)\n'
p541
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint posix_fadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_posix_fadvise_0060b0e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p542
S'JMP qword ptr [0x0060b0e8]\n'
p543
S'ff 25 12 9b 20 00\n'
p544
S'.plt:00000000004015d0\n'
p545
tp546
sS'getseq'
p547
(S'\n__stdcall getseq(FILE * fp, seq * seq)\n'
p548
V\u000a_Bool getseq(FILE *fp,seq *seq)\u000a\u000a{\u000a  ulong uVar1;\u000a  _Bool _Var2;\u000a  line **pplVar3;\u000a  ulong uVar4;\u000a  \u000a  if (seq->count == seq->alloc) {\u000a    pplVar3 = (line **)x2nrealloc(seq->lines,&seq->alloc,8);\u000a    seq->lines = pplVar3;\u000a    uVar4 = seq->count;\u000a    if (uVar4 < seq->alloc) {\u000a      uVar1 = seq->alloc;\u000a      do {\u000a        seq->lines[uVar4] = (line *)0x0;\u000a        uVar4 = uVar4 + 1;\u000a      } while (uVar4 < uVar1);\u000a    }\u000a  }\u000a  _Var2 = get_line(fp,seq->lines + seq->count);\u000a  if (_Var2 != false) {\u000a    seq->count = seq->count + 1;\u000a  }\u000a  return (_Bool)(_Var2 != false);\u000a}\u000a\u000a
p549
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nMOV RAX,qword ptr [RBX]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00402d14\nLEA R15,[RBX + 0x8]\nMOV RDI,qword ptr [RBX + 0x10]\nMOV EDX,0x8\nMOV RSI,R15\nCALL 0x00405670\nMOV qword ptr [RBX + 0x10],RAX\nMOV RAX,qword ptr [RBX]\nCMP RAX,qword ptr [RBX + 0x8]\nJNC 0x00402d14\nMOV RCX,qword ptr [R15]\nNOP\nMOV RDX,qword ptr [RBX + 0x10]\nMOV qword ptr [RDX + RAX*0x8],0x0\nINC RAX\nCMP RAX,RCX\nJC 0x00402d00\nMOV RSI,qword ptr [RBX]\nSHL RSI,0x3\nADD RSI,qword ptr [RBX + 0x10]\nMOV RDI,RBP\nMOV EDX,R14D\nCALL 0x00402f40\nTEST AL,AL\nJZ 0x00402d35\nINC qword ptr [RBX]\nMOV AL,0x1\nJMP 0x00402d37\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p550
S'55\n41 57\n41 56\n53\n50\n41 89 d6\n48 89 f3\n48 89 fd\n48 8b 03\n48 3b 43 08\n75 3b\n4c 8d 7b 08\n48 8b 7b 10\nba 08 00 00 00\n4c 89 fe\ne8 82 29 00 00\n48 89 43 10\n48 8b 03\n48 3b 43 08\n73 19\n49 8b 0f\n66 90\n48 8b 53 10\n48 c7 04 c2 00 00 00 00\n48 ff c0\n48 39 c8\n72 ec\n48 8b 33\n48 c1 e6 03\n48 03 73 10\n48 89 ef\n44 89 f2\ne8 16 02 00 00\n84 c0\n74 07\n48 ff 03\nb0 01\neb 02\n31 c0\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p551
S'.text:0000000000402cc0\n.text:0000000000402cc1\n.text:0000000000402cc3\n.text:0000000000402cc5\n.text:0000000000402cc6\n.text:0000000000402cc7\n.text:0000000000402cca\n.text:0000000000402ccd\n.text:0000000000402cd0\n.text:0000000000402cd3\n.text:0000000000402cd7\n.text:0000000000402cd9\n.text:0000000000402cdd\n.text:0000000000402ce1\n.text:0000000000402ce6\n.text:0000000000402ce9\n.text:0000000000402cee\n.text:0000000000402cf2\n.text:0000000000402cf5\n.text:0000000000402cf9\n.text:0000000000402cfb\n.text:0000000000402cfe\n.text:0000000000402d00\n.text:0000000000402d04\n.text:0000000000402d0c\n.text:0000000000402d0f\n.text:0000000000402d12\n.text:0000000000402d14\n.text:0000000000402d17\n.text:0000000000402d1b\n.text:0000000000402d1f\n.text:0000000000402d22\n.text:0000000000402d25\n.text:0000000000402d2a\n.text:0000000000402d2c\n.text:0000000000402d2e\n.text:0000000000402d31\n.text:0000000000402d33\n.text:0000000000402d35\n.text:0000000000402d37\n.text:0000000000402d3b\n.text:0000000000402d3c\n.text:0000000000402d3e\n.text:0000000000402d40\n.text:0000000000402d41\n'
p552
tp553
sS'lseek'
p554
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p555
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_0060b0c0)();\u000a  return _Var1;\u000a}\u000a\u000a
p556
S'JMP qword ptr [0x0060b0c0]\n'
p557
S'ff 25 3a 9b 20 00\n'
p558
S'.plt:0000000000401580\n'
p559
tp560
sS'quotearg_n_mem'
p561
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p562
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p563
S'MOV ECX,0x60b3e0\nJMP 0x004047d0\n'
p564
S'b9 e0 b3 60 00\ne9 36 fe ff ff\n'
p565
S'.text:0000000000404990\n.text:0000000000404995\n'
p566
tp567
sS'__printf_chk'
p568
(S'\n__stdcall __printf_chk()\n'
p569
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_0060b190)();\u000a  return;\u000a}\u000a\u000a
p570
S'JMP qword ptr [0x0060b190]\n'
p571
S'ff 25 6a 9a 20 00\n'
p572
S'.plt:0000000000401720\n'
p573
tp574
sS'memcoll'
p575
(S'\n__stdcall memcoll(char * s1, size_t s1len, char * s2, size_t s2len)\n'
p576
V\u000aint memcoll(char *s1,size_t s1len,char *s2,size_t s2len)\u000a\u000a{\u000a  char cVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  int *piVar4;\u000a  \u000a  if ((s1len == s2len) && (iVar3 = memcmp(s1,s2,s1len), iVar3 == 0)) {\u000a    piVar4 = __errno_location();\u000a    *piVar4 = 0;\u000a    return 0;\u000a  }\u000a  cVar1 = s1[s1len];\u000a  cVar2 = s2[s2len];\u000a  s1[s1len] = 0;\u000a  s2[s2len] = 0;\u000a  iVar3 = strcoll_loop(s1,s1len + 1,s2,s2len + 1);\u000a  s1[s1len] = cVar1;\u000a  s2[s2len] = cVar2;\u000a  return iVar3;\u000a}\u000a\u000a
p577
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RCX\nMOV R14,RDX\nMOV RBX,RSI\nMOV R12,RDI\nCMP RBX,R15\nJNZ 0x0040647e\nMOV RDI,R12\nMOV RSI,R14\nMOV RDX,RBX\nCALL 0x004015f0\nTEST EAX,EAX\nJZ 0x004064ad\nMOV BPL,byte ptr [R12 + RBX*0x1]\nMOV R13B,byte ptr [R14 + R15*0x1]\nMOV byte ptr [R12 + RBX*0x1],0x0\nMOV byte ptr [R14 + R15*0x1],0x0\nLEA RSI,[RBX + 0x1]\nLEA RCX,[R15 + 0x1]\nMOV RDI,R12\nMOV RDX,R14\nCALL 0x004064d0\nMOV byte ptr [R12 + RBX*0x1],BPL\nMOV byte ptr [R14 + R15*0x1],R13B\nJMP 0x004064ba\nCALL 0x00401470\nMOV dword ptr [RAX],0x0\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p578
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 cf\n49 89 d6\n48 89 f3\n49 89 fc\n4c 39 fb\n75 12\n4c 89 e7\n4c 89 f6\n48 89 da\ne8 76 b1 ff ff\n85 c0\n74 2f\n41 8a 2c 1c\n47 8a 2c 3e\n41 c6 04 1c 00\n43 c6 04 3e 00\n48 8d 73 01\n49 8d 4f 01\n4c 89 e7\n4c 89 f2\ne8 2d 00 00 00\n41 88 2c 1c\n47 88 2c 3e\neb 0d\ne8 be af ff ff\nc7 00 00 00 00 00\n31 c0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p579
S'.text:0000000000406450\n.text:0000000000406451\n.text:0000000000406453\n.text:0000000000406455\n.text:0000000000406457\n.text:0000000000406459\n.text:000000000040645a\n.text:000000000040645b\n.text:000000000040645e\n.text:0000000000406461\n.text:0000000000406464\n.text:0000000000406467\n.text:000000000040646a\n.text:000000000040646c\n.text:000000000040646f\n.text:0000000000406472\n.text:0000000000406475\n.text:000000000040647a\n.text:000000000040647c\n.text:000000000040647e\n.text:0000000000406482\n.text:0000000000406486\n.text:000000000040648b\n.text:0000000000406490\n.text:0000000000406494\n.text:0000000000406498\n.text:000000000040649b\n.text:000000000040649e\n.text:00000000004064a3\n.text:00000000004064a7\n.text:00000000004064ab\n.text:00000000004064ad\n.text:00000000004064b2\n.text:00000000004064b8\n.text:00000000004064ba\n.text:00000000004064be\n.text:00000000004064bf\n.text:00000000004064c1\n.text:00000000004064c3\n.text:00000000004064c5\n.text:00000000004064c7\n.text:00000000004064c8\n'
p580
tp581
sS'emit_ancillary_info'
p582
(S'\n__stdcall emit_ancillary_info()\n'
p583
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined *puVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x00406bb0;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("join",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "join";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,&DAT_004074a2,uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/",&DAT_004074a2);\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  puVar3 = &DAT_00407773;\u000a  if (__s2 == "join") {\u000a    puVar3 = (undefined *)0x4075f4;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,puVar3);\u000a  return;\u000a}\u000a\u000a
p584
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x406bb0\nMOV ESI,0x4075d8\nNOP\nMOV EDI,0x4074a2\nCALL 0x00401630\nTEST EAX,EAX\nJZ 0x00401adb\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401ac0\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x4074a2\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x407637\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x407549\nMOV ECX,0x40764e\nXOR EAX,EAX\nCALL 0x00401720\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x00401710\nTEST RAX,RAX\nJZ 0x00401b64\nMOV ESI,0x407675\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00401480\nTEST EAX,EAX\nJZ 0x00401b64\nXOR EDI,EDI\nMOV ESI,0x407679\nMOV EDX,0x5\nCALL 0x00401510\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x4074a2\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401720\nXOR EDI,EDI\nMOV ESI,0x4076be\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,RAX\nMOV R14D,0x4074a2\nMOV EDI,0x1\nMOV EDX,0x40764e\nMOV ECX,0x4074a2\nXOR EAX,EAX\nCALL 0x00401720\nXOR EDI,EDI\nMOV ESI,0x4076dd\nMOV EDX,0x5\nCALL 0x00401510\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x4075f4\nMOV ECX,0x407773\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401720\n'
p585
S'41 56\n53\n50\nbb b0 6b 40 00\nbe d8 75 40 00\n66 90\nbf a2 74 40 00\ne8 66 fb ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb a2 74 40 00\n48 0f 45 d8\n31 ff\nbe 37 76 40 00\nba 05 00 00 00\ne8 14 fa ff ff\n48 89 c6\nbf 01 00 00 00\nba 49 75 40 00\nb9 4e 76 40 00\n31 c0\ne8 0b fc ff ff\nbf 05 00 00 00\n31 f6\ne8 ef fb ff ff\n48 85 c0\n74 3e\nbe 75 76 40 00\nba 03 00 00 00\n48 89 c7\ne8 48 f9 ff ff\n85 c0\n74 28\n31 ff\nbe 79 76 40 00\nba 05 00 00 00\ne8 c3 f9 ff ff\n48 89 c1\nbf 01 00 00 00\nba a2 74 40 00\n31 c0\n48 89 ce\ne8 bc fb ff ff\n31 ff\nbe be 76 40 00\nba 05 00 00 00\ne8 9b f9 ff ff\n48 89 c6\n41 be a2 74 40 00\nbf 01 00 00 00\nba 4e 76 40 00\nb9 a2 74 40 00\n31 c0\ne8 8c fb ff ff\n31 ff\nbe dd 76 40 00\nba 05 00 00 00\ne8 6b f9 ff ff\n48 89 c2\n4c 39 f3\nb8 f4 75 40 00\nb9 73 77 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 4e fb ff ff\n'
p586
S'.text:0000000000401ab0\n.text:0000000000401ab2\n.text:0000000000401ab3\n.text:0000000000401ab4\n.text:0000000000401ab9\n.text:0000000000401abe\n.text:0000000000401ac0\n.text:0000000000401ac5\n.text:0000000000401aca\n.text:0000000000401acc\n.text:0000000000401ace\n.text:0000000000401ad2\n.text:0000000000401ad6\n.text:0000000000401ad9\n.text:0000000000401adb\n.text:0000000000401adf\n.text:0000000000401ae2\n.text:0000000000401ae7\n.text:0000000000401aeb\n.text:0000000000401aed\n.text:0000000000401af2\n.text:0000000000401af7\n.text:0000000000401afc\n.text:0000000000401aff\n.text:0000000000401b04\n.text:0000000000401b09\n.text:0000000000401b0e\n.text:0000000000401b10\n.text:0000000000401b15\n.text:0000000000401b1a\n.text:0000000000401b1c\n.text:0000000000401b21\n.text:0000000000401b24\n.text:0000000000401b26\n.text:0000000000401b2b\n.text:0000000000401b30\n.text:0000000000401b33\n.text:0000000000401b38\n.text:0000000000401b3a\n.text:0000000000401b3c\n.text:0000000000401b3e\n.text:0000000000401b43\n.text:0000000000401b48\n.text:0000000000401b4d\n.text:0000000000401b50\n.text:0000000000401b55\n.text:0000000000401b5a\n.text:0000000000401b5c\n.text:0000000000401b5f\n.text:0000000000401b64\n.text:0000000000401b66\n.text:0000000000401b6b\n.text:0000000000401b70\n.text:0000000000401b75\n.text:0000000000401b78\n.text:0000000000401b7e\n.text:0000000000401b83\n.text:0000000000401b88\n.text:0000000000401b8d\n.text:0000000000401b8f\n.text:0000000000401b94\n.text:0000000000401b96\n.text:0000000000401b9b\n.text:0000000000401ba0\n.text:0000000000401ba5\n.text:0000000000401ba8\n.text:0000000000401bab\n.text:0000000000401bb0\n.text:0000000000401bb5\n.text:0000000000401bb9\n.text:0000000000401bbe\n.text:0000000000401bc0\n.text:0000000000401bc3\n.text:0000000000401bc6\n.text:0000000000401bca\n.text:0000000000401bcb\n.text:0000000000401bcd\n'
p587
tp588
sS'xmemcoll'
p589
(S'\n__stdcall xmemcoll(char * s1, size_t s1len, char * s2, size_t s2len)\n'
p590
V\u000aint xmemcoll(char *s1,size_t s1len,char *s2,size_t s2len)\u000a\u000a{\u000a  int iVar1;\u000a  uint *puVar2;\u000a  \u000a  iVar1 = memcoll(s1,s1len,s2,s2len);\u000a  puVar2 = (uint *)__errno_location();\u000a  if (*puVar2 != 0) {\u000a    collate_error((char *)(ulong)*puVar2,(size_t)s1,(char *)s1len,(size_t)s2);\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p591
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV RBX,RDI\nCALL 0x00406450\nMOV EBP,EAX\nCALL 0x00401470\nMOV EDI,dword ptr [RAX]\nTEST EDI,EDI\nJZ 0x004057f7\nMOV RSI,RBX\nMOV RDX,R12\nMOV RCX,R15\nMOV R8,R14\nCALL 0x00405810\nMOV EAX,EBP\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p592
S'55\n41 57\n41 56\n41 54\n53\n49 89 ce\n49 89 d7\n49 89 f4\n48 89 fb\ne8 77 0c 00 00\n89 c5\ne8 90 bc ff ff\n8b 38\n85 ff\n74 11\n48 89 de\n4c 89 e2\n4c 89 f9\n4d 89 f0\ne8 19 00 00 00\n89 e8\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p593
S'.text:00000000004057c0\n.text:00000000004057c1\n.text:00000000004057c3\n.text:00000000004057c5\n.text:00000000004057c7\n.text:00000000004057c8\n.text:00000000004057cb\n.text:00000000004057ce\n.text:00000000004057d1\n.text:00000000004057d4\n.text:00000000004057d9\n.text:00000000004057db\n.text:00000000004057e0\n.text:00000000004057e2\n.text:00000000004057e4\n.text:00000000004057e6\n.text:00000000004057e9\n.text:00000000004057ec\n.text:00000000004057ef\n.text:00000000004057f2\n.text:00000000004057f7\n.text:00000000004057f9\n.text:00000000004057fa\n.text:00000000004057fc\n.text:00000000004057fe\n.text:0000000000405800\n.text:0000000000405801\n'
p594
tp595
sS'version_etc_va'
p596
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p597
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p598
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x004054a0\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x004054ac\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x004054c1\nINC R9\nCMP R9,0xa\nJC 0x00405480\nMOV R8,RSP\nCALL 0x004050e0\nADD RSP,0x58\nRET\n'
p599
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p600
S'.text:0000000000405470\n.text:0000000000405474\n.text:0000000000405477\n.text:0000000000405480\n.text:0000000000405483\n.text:0000000000405487\n.text:0000000000405489\n.text:000000000040548c\n.text:0000000000405490\n.text:0000000000405494\n.text:0000000000405497\n.text:00000000004054a0\n.text:00000000004054a4\n.text:00000000004054a8\n.text:00000000004054ac\n.text:00000000004054af\n.text:00000000004054b3\n.text:00000000004054b6\n.text:00000000004054b8\n.text:00000000004054bb\n.text:00000000004054bf\n.text:00000000004054c1\n.text:00000000004054c4\n.text:00000000004054c9\n.text:00000000004054cd\n'
p601
tp602
sS'xzalloc'
p603
(S'\n__stdcall xzalloc(size_t s)\n'
p604
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p605
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00405600\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x004015a0\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p606
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 94 be ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p607
S'.text:00000000004056f0\n.text:00000000004056f2\n.text:00000000004056f3\n.text:00000000004056f4\n.text:00000000004056f7\n.text:00000000004056fc\n.text:00000000004056ff\n.text:0000000000405701\n.text:0000000000405704\n.text:0000000000405707\n.text:000000000040570c\n.text:000000000040570f\n.text:0000000000405713\n.text:0000000000405714\n.text:0000000000405716\n'
p608
tp609
sS'keycmp'
p610
(S'\n__stdcall keycmp(line * line1, line * line2, size_t jf_1, size_t jf_2)\n'
p611
V\u000aint keycmp(line *line1,line *line2,size_t jf_1,size_t jf_2)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  char *s2;\u000a  ulong __n;\u000a  ulong s2len;\u000a  char *s1;\u000a  size_t s1len;\u000a  \u000a  s1 = (char *)0x0;\u000a  s1len = 0;\u000a  if (jf_1 <= line1->nfields && line1->nfields != jf_1) {\u000a    s1 = line1->fields[jf_1].beg;\u000a    s1len = line1->fields[jf_1].len;\u000a  }\u000a  s2 = (char *)0x0;\u000a  s2len = 0;\u000a  if (jf_2 <= line2->nfields && line2->nfields != jf_2) {\u000a    s2 = line2->fields[jf_2].beg;\u000a    s2len = line2->fields[jf_2].len;\u000a  }\u000a  if (s1len == 0) {\u000a    uVar1 = -(uint)(s2len != 0);\u000a  }\u000a  else {\u000a    if (s2len == 0) {\u000a      uVar1 = 1;\u000a    }\u000a    else {\u000a      if (ignore_case == 1) {\u000a        __n = s2len;\u000a        if (s1len < s2len) {\u000a          __n = s1len;\u000a        }\u000a        uVar1 = memcasecmp(s1,s2,__n);\u000a      }\u000a      else {\u000a        if (hard_LC_COLLATE != false) {\u000a          iVar2 = xmemcoll(s1,s1len,s2,s2len);\u000a          return iVar2;\u000a        }\u000a        __n = s2len;\u000a        if (s1len < s2len) {\u000a          __n = s1len;\u000a        }\u000a        uVar1 = memcmp(s1,s2,__n);\u000a      }\u000a      if (uVar1 == 0) {\u000a        uVar1 = 0xffffffff;\u000a        if (s2len <= s1len) {\u000a          uVar1 = (uint)(s1len != s2len);\u000a        }\u000a      }\u000a    }\u000a  }\u000a  return (int)uVar1;\u000a}\u000a\u000a
p612
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RAX,RDI\nXOR EDI,EDI\nCMP qword ptr [RAX + 0x18],RDX\nMOV R14D,0x0\nJBE 0x00402e96\nMOV RAX,qword ptr [RAX + 0x28]\nSHL RDX,0x4\nMOV RDI,qword ptr [RAX + RDX*0x1]\nMOV R14,qword ptr [RAX + RDX*0x1 + 0x8]\nXOR EAX,EAX\nCMP qword ptr [RSI + 0x18],RCX\nMOV EBX,0x0\nJBE 0x00402eb4\nMOV RDX,qword ptr [RSI + 0x28]\nSHL RCX,0x4\nMOV RAX,qword ptr [RDX + RCX*0x1]\nMOV RBX,qword ptr [RDX + RCX*0x1 + 0x8]\nTEST R14,R14\nJZ 0x00402edf\nTEST RBX,RBX\nJZ 0x00402ee6\nCMP byte ptr [0x0060b308],0x1\nJNZ 0x00402eed\nCMP R14,RBX\nMOV RDX,RBX\nCMOVC RDX,R14\nMOV RSI,RAX\nCALL 0x00403780\nTEST EAX,EAX\nJNZ 0x00402f31\nJMP 0x00402f21\nNEG RBX\nSBB EAX,EAX\nJMP 0x00402f31\nMOV EAX,0x1\nJMP 0x00402f31\nCMP byte ptr [0x0060b2f0],0x0\nJZ 0x00402f0b\nMOV RSI,R14\nMOV RDX,RAX\nMOV RCX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x004057c0\nCMP R14,RBX\nMOV RDX,RBX\nCMOVC RDX,R14\nMOV RSI,RAX\nCALL 0x004015f0\nTEST EAX,EAX\nJNZ 0x00402f31\nXOR ECX,ECX\nCMP R14,RBX\nSETNZ CL\nMOV EAX,0xffffffff\nCMOVNC EAX,ECX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p613
S'41 56\n53\n50\n48 89 f8\n31 ff\n48 39 50 18\n41 be 00 00 00 00\n76 11\n48 8b 40 28\n48 c1 e2 04\n48 8b 3c 10\n4c 8b 74 10 08\n31 c0\n48 39 4e 18\nbb 00 00 00 00\n76 11\n48 8b 56 28\n48 c1 e1 04\n48 8b 04 0a\n48 8b 5c 0a 08\n4d 85 f6\n74 26\n48 85 db\n74 28\n80 3d 43 84 20 00 01\n75 26\n49 39 de\n48 89 da\n49 0f 42 d6\n48 89 c6\ne8 a7 08 00 00\n85 c0\n75 54\neb 42\n48 f7 db\n19 c0\neb 4b\nb8 01 00 00 00\neb 44\n80 3d fc 83 20 00 00\n74 15\n4c 89 f6\n48 89 c2\n48 89 d9\n48 83 c4 08\n5b\n41 5e\ne9 b5 28 00 00\n49 39 de\n48 89 da\n49 0f 42 d6\n48 89 c6\ne8 d3 e6 ff ff\n85 c0\n75 10\n31 c9\n49 39 de\n0f 95 c1\nb8 ff ff ff ff\n0f 43 c1\n48 83 c4 08\n5b\n41 5e\nc3\n'
p614
S'.text:0000000000402e70\n.text:0000000000402e72\n.text:0000000000402e73\n.text:0000000000402e74\n.text:0000000000402e77\n.text:0000000000402e79\n.text:0000000000402e7d\n.text:0000000000402e83\n.text:0000000000402e85\n.text:0000000000402e89\n.text:0000000000402e8d\n.text:0000000000402e91\n.text:0000000000402e96\n.text:0000000000402e98\n.text:0000000000402e9c\n.text:0000000000402ea1\n.text:0000000000402ea3\n.text:0000000000402ea7\n.text:0000000000402eab\n.text:0000000000402eaf\n.text:0000000000402eb4\n.text:0000000000402eb7\n.text:0000000000402eb9\n.text:0000000000402ebc\n.text:0000000000402ebe\n.text:0000000000402ec5\n.text:0000000000402ec7\n.text:0000000000402eca\n.text:0000000000402ecd\n.text:0000000000402ed1\n.text:0000000000402ed4\n.text:0000000000402ed9\n.text:0000000000402edb\n.text:0000000000402edd\n.text:0000000000402edf\n.text:0000000000402ee2\n.text:0000000000402ee4\n.text:0000000000402ee6\n.text:0000000000402eeb\n.text:0000000000402eed\n.text:0000000000402ef4\n.text:0000000000402ef6\n.text:0000000000402ef9\n.text:0000000000402efc\n.text:0000000000402eff\n.text:0000000000402f03\n.text:0000000000402f04\n.text:0000000000402f06\n.text:0000000000402f0b\n.text:0000000000402f0e\n.text:0000000000402f11\n.text:0000000000402f15\n.text:0000000000402f18\n.text:0000000000402f1d\n.text:0000000000402f1f\n.text:0000000000402f21\n.text:0000000000402f23\n.text:0000000000402f26\n.text:0000000000402f29\n.text:0000000000402f2e\n.text:0000000000402f31\n.text:0000000000402f35\n.text:0000000000402f36\n.text:0000000000402f38\n'
p615
tp616
sS'gettext_quote'
p617
(S'\n__stdcall gettext_quote(char * msgid)\n'
p618
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_00407e00;\u000a        pcVar2 = &DAT_00407e04;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p619
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x00401510\nCMP RAX,RBX\nJNZ 0x00404d88\nCALL 0x00406120\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00404d90\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00404d38\nCMP byte ptr [RBX],0x60\nMOV ECX,0x407df0\nMOV EAX,0x407df4\nJMP 0x00404d84\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00404d90\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00404d76\nCMP byte ptr [RBX],0x60\nMOV ECX,0x407e00\nMOV EAX,0x407e04\nJMP 0x00404d84\nCMP R14D,0x9\nMOV ECX,0x407de4\nMOV EAX,0x407de8\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p620
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 27 c8 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 29 14 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 f0 7d 40 00\nb8 f4 7d 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 00 7e 40 00\nb8 04 7e 40 00\neb 0e\n41 83 fe 09\nb9 e4 7d 40 00\nb8 e8 7d 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p621
S'.text:0000000000404cd0\n.text:0000000000404cd1\n.text:0000000000404cd3\n.text:0000000000404cd4\n.text:0000000000404cd7\n.text:0000000000404cda\n.text:0000000000404cdc\n.text:0000000000404ce1\n.text:0000000000404ce4\n.text:0000000000404ce9\n.text:0000000000404cec\n.text:0000000000404cf2\n.text:0000000000404cf7\n.text:0000000000404cfa\n.text:0000000000404cff\n.text:0000000000404d04\n.text:0000000000404d09\n.text:0000000000404d0f\n.text:0000000000404d15\n.text:0000000000404d18\n.text:0000000000404d1a\n.text:0000000000404d1c\n.text:0000000000404d21\n.text:0000000000404d25\n.text:0000000000404d27\n.text:0000000000404d29\n.text:0000000000404d2c\n.text:0000000000404d31\n.text:0000000000404d36\n.text:0000000000404d38\n.text:0000000000404d3d\n.text:0000000000404d42\n.text:0000000000404d47\n.text:0000000000404d4d\n.text:0000000000404d53\n.text:0000000000404d56\n.text:0000000000404d58\n.text:0000000000404d5a\n.text:0000000000404d5f\n.text:0000000000404d63\n.text:0000000000404d65\n.text:0000000000404d67\n.text:0000000000404d6a\n.text:0000000000404d6f\n.text:0000000000404d74\n.text:0000000000404d76\n.text:0000000000404d7a\n.text:0000000000404d7f\n.text:0000000000404d84\n.text:0000000000404d88\n.text:0000000000404d89\n.text:0000000000404d8b\n.text:0000000000404d8c\n'
p622
tp623
sS'fclose'
p624
(S'\n__stdcall fclose(FILE * __stream)\n'
p625
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_0060b078)();\u000a  return iVar1;\u000a}\u000a\u000a
p626
S'JMP qword ptr [0x0060b078]\n'
p627
S'ff 25 82 9b 20 00\n'
p628
S'.plt:00000000004014f0\n'
p629
tp630
sS'__ctype_get_mb_cur_max'
p631
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p632
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_0060b090)();\u000a  return sVar1;\u000a}\u000a\u000a
p633
S'JMP qword ptr [0x0060b090]\n'
p634
S'ff 25 6a 9b 20 00\n'
p635
S'.plt:0000000000401520\n'
p636
tp637
sS'quotearg_n_style'
p638
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p639
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p640
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00404a00\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x004047d0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p641
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p642
S'.text:00000000004049c0\n.text:00000000004049c1\n.text:00000000004049c3\n.text:00000000004049c4\n.text:00000000004049c8\n.text:00000000004049cb\n.text:00000000004049cd\n.text:00000000004049d2\n.text:00000000004049d5\n.text:00000000004049da\n.text:00000000004049e1\n.text:00000000004049e3\n.text:00000000004049e6\n.text:00000000004049e9\n.text:00000000004049ee\n.text:00000000004049f2\n.text:00000000004049f3\n.text:00000000004049f5\n.text:00000000004049f6\n'
p643
tp644
sS'get_line'
p645
(S'\n__stdcall get_line(FILE * fp, line * * linep)\n'
p646
V\u000a_Bool get_line(FILE *fp,line **linep)\u000a\u000a{\u000a  long lVar1;\u000a  uint uVar2;\u000a  line *plVar3;\u000a  undefined uVar4;\u000a  int iVar5;\u000a  line *line;\u000a  linebuffer *plVar6;\u000a  uint *puVar7;\u000a  undefined8 uVar8;\u000a  int in_EDX;\u000a  \u000a  plVar3 = *linep;\u000a  lVar1 = (long)in_EDX + -1;\u000a  line = plVar3;\u000a  if (plVar3 == *(line **)(&DAT_0060b398 + (long)in_EDX * 8)) {\u000a    line = spareline[lVar1];\u000a    spareline[lVar1] = plVar3;\u000a    *linep = line;\u000a  }\u000a  if (line == (line *)0x0) {\u000a    line = init_linep(linep);\u000a  }\u000a  else {\u000a    reset_line(line);\u000a  }\u000a  plVar6 = readlinebuffer_delim((linebuffer *)line,fp);\u000a  if (plVar6 == (linebuffer *)0x0) {\u000a    iVar5 = ferror_unlocked((FILE *)fp);\u000a    if (iVar5 != 0) {\u000a      puVar7 = (uint *)__errno_location();\u000a      uVar2 = *puVar7;\u000a      uVar8 = dcgettext(0,"read error",5);\u000a      error(1,(ulong)uVar2,uVar8,uVar8);\u000a    }\u000a    freeline(line);\u000a    uVar4 = 0;\u000a  }\u000a  else {\u000a    line_no[lVar1] = line_no[lVar1] + 1;\u000a    xfields(line);\u000a    if (prevline[lVar1] != (line *)0x0) {\u000a      check_order(prevline[lVar1],line);\u000a    }\u000a    prevline[lVar1] = line;\u000a    uVar4 = 1;\u000a  }\u000a  return (_Bool)uVar4;\u000a}\u000a\u000a
p647
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,EDX\nMOV R15,RDI\nMOV RBX,qword ptr [RSI]\nMOVSXD RAX,R14D\nCMP RBX,qword ptr [0x60b398 + RAX*0x8]\nLEA RBP,[RAX + -0x1]\nJNZ 0x00402f77\nMOV RAX,qword ptr [0x60b330 + RBP*0x8]\nMOV qword ptr [0x60b330 + RBP*0x8],RBX\nMOV qword ptr [RSI],RAX\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00402f86\nMOV RDI,RBX\nCALL 0x004031a0\nJMP 0x00402f91\nMOV RDI,RSI\nCALL 0x004031b0\nMOV RBX,RAX\nMOV AL,byte ptr [0x0060b30a]\nTEST AL,AL\nJNZ 0x00402f9f\nMOV AL,0xa\nJMP 0x00402fa1\nXOR EAX,EAX\nMOVZX EDX,AL\nMOV RDI,RBX\nMOV RSI,R15\nCALL 0x004036b0\nTEST RAX,RAX\nJZ 0x00402fe8\nINC qword ptr [0x60b3b0 + RBP*0x8]\nMOV RDI,RBX\nCALL 0x004031d0\nMOV RDI,qword ptr [0x60b3a0 + RBP*0x8]\nTEST RDI,RDI\nJZ 0x00402fdc\nMOV RSI,RBX\nMOV EDX,R14D\nCALL 0x00403340\nMOV qword ptr [0x60b3a0 + RBP*0x8],RBX\nMOV AL,0x1\nJMP 0x0040302a\nMOV RDI,R15\nCALL 0x00401610\nTEST EAX,EAX\nJZ 0x00403020\nCALL 0x00401470\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40782a\nMOV EDX,0x5\nCALL 0x00401510\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nCALL 0x00401730\nMOV RDI,RBX\nCALL 0x00402b10\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p648
S'55\n41 57\n41 56\n53\n50\n41 89 d6\n49 89 ff\n48 8b 1e\n49 63 c6\n48 3b 1c c5 98 b3 60 00\n48 8d 68 ff\n75 16\n48 8b 04 ed 30 b3 60 00\n48 89 1c ed 30 b3 60 00\n48 89 06\n48 89 c3\n48 85 db\n74 0a\n48 89 df\ne8 1c 02 00 00\neb 0b\n48 89 f7\ne8 22 02 00 00\n48 89 c3\n8a 05 73 83 20 00\n84 c0\n75 04\nb0 0a\neb 02\n31 c0\n0f b6 d0\n48 89 df\n4c 89 fe\ne8 01 07 00 00\n48 85 c0\n74 34\n48 ff 04 ed b0 b3 60 00\n48 89 df\ne8 0c 02 00 00\n48 8b 3c ed a0 b3 60 00\n48 85 ff\n74 0b\n48 89 de\n44 89 f2\ne8 64 03 00 00\n48 89 1c ed a0 b3 60 00\nb0 01\neb 42\n4c 89 ff\ne8 20 e6 ff ff\n85 c0\n74 2c\ne8 77 e4 ff ff\n8b 28\n31 ff\nbe 2a 78 40 00\nba 05 00 00 00\ne8 04 e5 ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 ee\n48 89 ca\ne8 10 e7 ff ff\n48 89 df\ne8 e8 fa ff ff\n31 c0\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p649
S'.text:0000000000402f40\n.text:0000000000402f41\n.text:0000000000402f43\n.text:0000000000402f45\n.text:0000000000402f46\n.text:0000000000402f47\n.text:0000000000402f4a\n.text:0000000000402f4d\n.text:0000000000402f50\n.text:0000000000402f53\n.text:0000000000402f5b\n.text:0000000000402f5f\n.text:0000000000402f61\n.text:0000000000402f69\n.text:0000000000402f71\n.text:0000000000402f74\n.text:0000000000402f77\n.text:0000000000402f7a\n.text:0000000000402f7c\n.text:0000000000402f7f\n.text:0000000000402f84\n.text:0000000000402f86\n.text:0000000000402f89\n.text:0000000000402f8e\n.text:0000000000402f91\n.text:0000000000402f97\n.text:0000000000402f99\n.text:0000000000402f9b\n.text:0000000000402f9d\n.text:0000000000402f9f\n.text:0000000000402fa1\n.text:0000000000402fa4\n.text:0000000000402fa7\n.text:0000000000402faa\n.text:0000000000402faf\n.text:0000000000402fb2\n.text:0000000000402fb4\n.text:0000000000402fbc\n.text:0000000000402fbf\n.text:0000000000402fc4\n.text:0000000000402fcc\n.text:0000000000402fcf\n.text:0000000000402fd1\n.text:0000000000402fd4\n.text:0000000000402fd7\n.text:0000000000402fdc\n.text:0000000000402fe4\n.text:0000000000402fe6\n.text:0000000000402fe8\n.text:0000000000402feb\n.text:0000000000402ff0\n.text:0000000000402ff2\n.text:0000000000402ff4\n.text:0000000000402ff9\n.text:0000000000402ffb\n.text:0000000000402ffd\n.text:0000000000403002\n.text:0000000000403007\n.text:000000000040300c\n.text:000000000040300f\n.text:0000000000403014\n.text:0000000000403016\n.text:0000000000403018\n.text:000000000040301b\n.text:0000000000403020\n.text:0000000000403023\n.text:0000000000403028\n.text:000000000040302a\n.text:000000000040302e\n.text:000000000040302f\n.text:0000000000403031\n.text:0000000000403033\n.text:0000000000403034\n'
p650
tp651
sS'quote_n'
p652
(S'\n__stdcall quote_n(char * arg)\n'
p653
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p654
S'MOV RDX,-0x1\nJMP 0x00404c90\n'
p655
S'48 c7 c2 ff ff ff ff\neb d7\n'
p656
S'.text:0000000000404cb0\n.text:0000000000404cb7\n'
p657
tp658
sS'reset_line'
p659
(S'\n__stdcall reset_line(line * line)\n'
p660
V\u000avoid reset_line(line *line)\u000a\u000a{\u000a  line->nfields = 0;\u000a  return;\u000a}\u000a\u000a
p661
S'MOV qword ptr [RDI + 0x18],0x0\nRET\n'
p662
S'48 c7 47 18 00 00 00 00\nc3\n'
p663
S'.text:00000000004031a0\n.text:00000000004031a8\n'
p664
tp665
sS'quotearg_alloc'
p666
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p667
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p668
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00404640\n'
p669
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p670
S'.text:0000000000404630\n.text:0000000000404633\n.text:0000000000404635\n.text:0000000000404638\n'
p671
tp672
sS'close_stdout_set_file_name'
p673
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p674
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p675
S'MOV qword ptr [0x0060b3c0],RDI\nRET\n'
p676
S'48 89 3d 09 7f 20 00\nc3\n'
p677
S'.text:00000000004034b0\n.text:00000000004034b7\n'
p678
tp679
sS'field_sep'
p680
(S'\n__stdcall field_sep()\n'
p681
V\u000a_Bool field_sep(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  uint in_EDI;\u000a  \u000a  ppuVar1 = __ctype_b_loc();\u000a  return (_Bool)(*(byte *)(*ppuVar1 + (ulong)in_EDI) & 1 | (char)in_EDI == '\u005cn');\u000a}\u000a\u000a
p682
S'PUSH RBX\nMOV EBX,EDI\nCALL 0x004017f0\nMOV RAX,qword ptr [RAX]\nCMP BL,0xa\nSETZ CL\nMOV AL,byte ptr [RAX + RBX*0x2]\nAND AL,0x1\nOR AL,CL\nPOP RBX\nRET\n'
p683
S'53\n89 fb\ne8 58 e3 ff ff\n48 8b 00\n80 fb 0a\n0f 94 c1\n8a 04 58\n24 01\n08 c8\n5b\nc3\n'
p684
S'.text:0000000000403490\n.text:0000000000403491\n.text:0000000000403493\n.text:0000000000403498\n.text:000000000040349b\n.text:000000000040349e\n.text:00000000004034a1\n.text:00000000004034a4\n.text:00000000004034a6\n.text:00000000004034a8\n.text:00000000004034a9\n'
p685
tp686
sS'__libc_csu_init'
p687
(S'\n__stdcall __libc_csu_init()\n'
p688
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p689
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x60ae08]\nPUSH RBP\nLEA RBP,[0x60ae10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401408\nTEST RBP,RBP\nJZ 0x00406606\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x004065f0\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p690
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 46 48 20 00\n55\n48 8d 2d 46 48 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 27 ae ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p691
S'.text:00000000004065b0\n.text:00000000004065b2\n.text:00000000004065b4\n.text:00000000004065b7\n.text:00000000004065b9\n.text:00000000004065bb\n.text:00000000004065c2\n.text:00000000004065c3\n.text:00000000004065ca\n.text:00000000004065cb\n.text:00000000004065ce\n.text:00000000004065d1\n.text:00000000004065d4\n.text:00000000004065d8\n.text:00000000004065dc\n.text:00000000004065e1\n.text:00000000004065e4\n.text:00000000004065e6\n.text:00000000004065e8\n.text:00000000004065f0\n.text:00000000004065f3\n.text:00000000004065f6\n.text:00000000004065f9\n.text:00000000004065fd\n.text:0000000000406601\n.text:0000000000406604\n.text:0000000000406606\n.text:000000000040660a\n.text:000000000040660b\n.text:000000000040660c\n.text:000000000040660e\n.text:0000000000406610\n.text:0000000000406612\n.text:0000000000406614\n'
p692
tp693
sS'c_isdigit'
p694
(S'\n__stdcall c_isdigit()\n'
p695
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p696
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p697
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p698
S'.text:0000000000405fe0\n.text:0000000000405fe3\n.text:0000000000405fe6\n.text:0000000000405fe9\n'
p699
tp700
sS'usage'
p701
(S'\n__stdcall usage()\n'
p702
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,"Usage: %s [OPTION]... FILE1 FILE2\u005cn",5);\u000a    __printf_chk(1,uVar1,program_name,uVar1);\u000a    __s = (char *)dcgettext(0,\u000a                            "For each pair of input lines with identical join fields, write a line to\u005cnstandard output.  The default join field is the first, delimited by blanks.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"\u005cnWhen FILE1 or FILE2 (not both) is -, read standard input.\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cn  -a FILENUM        also print unpairable lines from file FILENUM, where\u005cn                      FILENUM is 1 or 2, corresponding to FILE1 or FILE2\u005cn  -e EMPTY          replace missing input fields with EMPTY\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -i, --ignore-case  ignore differences in case when comparing fields\u005cn  -j FIELD          equivalent to \u005c'-1 FIELD -2 FIELD\u005c'\u005cn  -o FORMAT         obey FORMAT while constructing output line\u005cn  -t CHAR           use CHAR as input and output field separator\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -v FILENUM        like -a FILENUM, but suppress joined output lines\u005cn  -1 FIELD          join on this FIELD of file 1\u005cn  -2 FIELD          join on this FIELD of file 2\u005cn  --check-order     check that the input is correctly sorted, even\u005cn                      if all input lines are pairable\u005cn  --nocheck-order   do not check that the input is correctly sorted\u005cn  --header          treat the first line in each file as field headers,\u005cn                      print them without trying to pair them\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"  -z, --zero-terminated     line delimiter is NUL, not newline\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnUnless -t CHAR is given, leading blanks separate fields and are ignored,\u005cnelse fields are separated by CHAR.  Any FIELD is a field number counted\u005cnfrom 1.  FORMAT is one or more comma or blank separated specifications,\u005cneach being \u005c'FILENUM.FIELD\u005c' or \u005c'0\u005c'.  Default FORMAT outputs the join field,\u005cnthe remaining fields from FILE1, the remaining fields from FILE2, all\u005cnseparated by CHAR.  If FORMAT is the keyword \u005c'auto\u005c', then the first\u005cnline of each file determines the number of fields output for each line.\u005cn\u005cnImportant: FILE1 and FILE2 must be sorted on the join fields.\u005cnE.g., use \u005c"sort -k 1b,1\u005c" if \u005c'join\u005c' has no options,\u005cnor use \u005c"join -t \u005c'\u005c'\u005c" if \u005c'sort\u005c' has no options.\u005cnNote, comparisons honor the rules specified by \u005c'LC_COLLATE\u005c'.\u005cnIf the input is not sorted and some lines cannot be joined, a\u005cnwarning message will be given.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p703
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x00401a61\nXOR EDI,EDI\nMOV ESI,0x406c20\nMOV EDX,0x5\nCALL 0x00401510\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060b3d0]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401720\nXOR EDI,EDI\nMOV ESI,0x406c43\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,qword ptr [0x0060b2a8]\nMOV RDI,RAX\nCALL 0x00401600\nXOR EDI,EDI\nMOV ESI,0x406cd9\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,qword ptr [0x0060b2a8]\nMOV RDI,RAX\nCALL 0x00401600\nXOR EDI,EDI\nMOV ESI,0x406d15\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,qword ptr [0x0060b2a8]\nMOV RDI,RAX\nCALL 0x00401600\nXOR EDI,EDI\nMOV ESI,0x406de5\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,qword ptr [0x0060b2a8]\nMOV RDI,RAX\nCALL 0x00401600\nXOR EDI,EDI\nMOV ESI,0x406ee2\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,qword ptr [0x0060b2a8]\nMOV RDI,RAX\nCALL 0x00401600\nXOR EDI,EDI\nMOV ESI,0x4070cd\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,qword ptr [0x0060b2a8]\nMOV RDI,RAX\nCALL 0x00401600\nXOR EDI,EDI\nMOV ESI,0x40710d\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,qword ptr [0x0060b2a8]\nMOV RDI,RAX\nCALL 0x00401600\nXOR EDI,EDI\nMOV ESI,0x40713a\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,qword ptr [0x0060b2a8]\nMOV RDI,RAX\nCALL 0x00401600\nXOR EDI,EDI\nMOV ESI,0x407170\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,qword ptr [0x0060b2a8]\nMOV RDI,RAX\nCALL 0x00401600\nCALL 0x00401ab0\nMOV EDI,EBX\nCALL 0x00401790\nCALL 0x00401a70\nMOV EDI,EBX\nCALL 0x00401790\n'
p704
S'53\n89 fb\n85 db\n0f 85 56 01 00 00\n31 ff\nbe 20 6c 40 00\nba 05 00 00 00\ne8 f4 fb ff ff\n48 89 c1\n48 8b 15 aa 9a 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 eb fd ff ff\n31 ff\nbe 43 6c 40 00\nba 05 00 00 00\ne8 ca fb ff ff\n48 8b 35 5b 99 20 00\n48 89 c7\ne8 ab fc ff ff\n31 ff\nbe d9 6c 40 00\nba 05 00 00 00\ne8 aa fb ff ff\n48 8b 35 3b 99 20 00\n48 89 c7\ne8 8b fc ff ff\n31 ff\nbe 15 6d 40 00\nba 05 00 00 00\ne8 8a fb ff ff\n48 8b 35 1b 99 20 00\n48 89 c7\ne8 6b fc ff ff\n31 ff\nbe e5 6d 40 00\nba 05 00 00 00\ne8 6a fb ff ff\n48 8b 35 fb 98 20 00\n48 89 c7\ne8 4b fc ff ff\n31 ff\nbe e2 6e 40 00\nba 05 00 00 00\ne8 4a fb ff ff\n48 8b 35 db 98 20 00\n48 89 c7\ne8 2b fc ff ff\n31 ff\nbe cd 70 40 00\nba 05 00 00 00\ne8 2a fb ff ff\n48 8b 35 bb 98 20 00\n48 89 c7\ne8 0b fc ff ff\n31 ff\nbe 0d 71 40 00\nba 05 00 00 00\ne8 0a fb ff ff\n48 8b 35 9b 98 20 00\n48 89 c7\ne8 eb fb ff ff\n31 ff\nbe 3a 71 40 00\nba 05 00 00 00\ne8 ea fa ff ff\n48 8b 35 7b 98 20 00\n48 89 c7\ne8 cb fb ff ff\n31 ff\nbe 70 71 40 00\nba 05 00 00 00\ne8 ca fa ff ff\n48 8b 35 5b 98 20 00\n48 89 c7\ne8 ab fb ff ff\ne8 56 00 00 00\n89 df\ne8 2f fd ff ff\ne8 0a 00 00 00\n89 df\ne8 23 fd ff ff\n'
p705
S'.text:0000000000401900\n.text:0000000000401901\n.text:0000000000401903\n.text:0000000000401905\n.text:000000000040190b\n.text:000000000040190d\n.text:0000000000401912\n.text:0000000000401917\n.text:000000000040191c\n.text:000000000040191f\n.text:0000000000401926\n.text:000000000040192b\n.text:000000000040192d\n.text:0000000000401930\n.text:0000000000401935\n.text:0000000000401937\n.text:000000000040193c\n.text:0000000000401941\n.text:0000000000401946\n.text:000000000040194d\n.text:0000000000401950\n.text:0000000000401955\n.text:0000000000401957\n.text:000000000040195c\n.text:0000000000401961\n.text:0000000000401966\n.text:000000000040196d\n.text:0000000000401970\n.text:0000000000401975\n.text:0000000000401977\n.text:000000000040197c\n.text:0000000000401981\n.text:0000000000401986\n.text:000000000040198d\n.text:0000000000401990\n.text:0000000000401995\n.text:0000000000401997\n.text:000000000040199c\n.text:00000000004019a1\n.text:00000000004019a6\n.text:00000000004019ad\n.text:00000000004019b0\n.text:00000000004019b5\n.text:00000000004019b7\n.text:00000000004019bc\n.text:00000000004019c1\n.text:00000000004019c6\n.text:00000000004019cd\n.text:00000000004019d0\n.text:00000000004019d5\n.text:00000000004019d7\n.text:00000000004019dc\n.text:00000000004019e1\n.text:00000000004019e6\n.text:00000000004019ed\n.text:00000000004019f0\n.text:00000000004019f5\n.text:00000000004019f7\n.text:00000000004019fc\n.text:0000000000401a01\n.text:0000000000401a06\n.text:0000000000401a0d\n.text:0000000000401a10\n.text:0000000000401a15\n.text:0000000000401a17\n.text:0000000000401a1c\n.text:0000000000401a21\n.text:0000000000401a26\n.text:0000000000401a2d\n.text:0000000000401a30\n.text:0000000000401a35\n.text:0000000000401a37\n.text:0000000000401a3c\n.text:0000000000401a41\n.text:0000000000401a46\n.text:0000000000401a4d\n.text:0000000000401a50\n.text:0000000000401a55\n.text:0000000000401a5a\n.text:0000000000401a5c\n.text:0000000000401a61\n.text:0000000000401a66\n.text:0000000000401a68\n'
p706
tp707
sS'quoting_options_from_style'
p708
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p709
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p710
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x00404a4d\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00401460\n'
p711
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 0e ca ff ff\n'
p712
S'.text:0000000000404a00\n.text:0000000000404a04\n.text:0000000000404a07\n.text:0000000000404a0c\n.text:0000000000404a11\n.text:0000000000404a15\n.text:0000000000404a1d\n.text:0000000000404a20\n.text:0000000000404a22\n.text:0000000000404a24\n.text:0000000000404a28\n.text:0000000000404a2b\n.text:0000000000404a2f\n.text:0000000000404a34\n.text:0000000000404a39\n.text:0000000000404a3d\n.text:0000000000404a41\n.text:0000000000404a45\n.text:0000000000404a48\n.text:0000000000404a4c\n.text:0000000000404a4d\n'
p713
tp714
sS'strcpy'
p715
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p716
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_0060b050)();\u000a  return pcVar1;\u000a}\u000a\u000a
p717
S'JMP qword ptr [0x0060b050]\n'
p718
S'ff 25 aa 9b 20 00\n'
p719
S'.plt:00000000004014a0\n'
p720
tp721
sS'c_isgraph'
p722
(S'\n__stdcall c_isgraph()\n'
p723
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p724
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p725
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p726
S'.text:0000000000405ff0\n.text:0000000000405ff3\n.text:0000000000405ff6\n.text:0000000000405ff9\n'
p727
tp728
sS'hard_locale'
p729
(S'\n__stdcall hard_locale()\n'
p730
V\u000a_Bool hard_locale(void)\u000a\u000a{\u000a  int iVar1;\u000a  char *__s1;\u000a  undefined uVar2;\u000a  int __category;\u000a  \u000a  __s1 = setlocale(__category,(char *)0x0);\u000a  uVar2 = 1;\u000a  if (__s1 != (char *)0x0) {\u000a    if (((*__s1 != 'C') || (__s1[1] != 0)) && (iVar1 = strcmp(__s1,"POSIX"), iVar1 != 0)) {\u000a      return true;\u000a    }\u000a    uVar2 = 0;\u000a  }\u000a  return (_Bool)uVar2;\u000a}\u000a\u000a
p731
S'PUSH RBX\nXOR ESI,ESI\nCALL 0x00401710\nMOV BL,0x1\nTEST RAX,RAX\nJZ 0x0040367d\nCMP byte ptr [RAX],0x43\nJNZ 0x0040366a\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x0040367b\nMOV ESI,0x40786b\nMOV RDI,RAX\nCALL 0x00401630\nTEST EAX,EAX\nJNZ 0x0040367d\nXOR EBX,EBX\nMOV EAX,EBX\nPOP RBX\nRET\n'
p732
S'53\n31 f6\ne8 b8 e0 ff ff\nb3 01\n48 85 c0\n74 1e\n80 38 43\n75 06\n80 78 01 00\n74 11\nbe 6b 78 40 00\n48 89 c7\ne8 b9 df ff ff\n85 c0\n75 02\n31 db\n89 d8\n5b\nc3\n'
p733
S'.text:0000000000403650\n.text:0000000000403651\n.text:0000000000403653\n.text:0000000000403658\n.text:000000000040365a\n.text:000000000040365d\n.text:000000000040365f\n.text:0000000000403662\n.text:0000000000403664\n.text:0000000000403668\n.text:000000000040366a\n.text:000000000040366f\n.text:0000000000403672\n.text:0000000000403677\n.text:0000000000403679\n.text:000000000040367b\n.text:000000000040367d\n.text:000000000040367f\n.text:0000000000403680\n'
p734
tp735
sS'quotearg_buffer_restyled'
p736
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p737
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_00403a7c_caseD_7;\u000a  case 2:\u000a    goto switchD_00403a7c_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_00403a7c_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_00403a7c_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_00403a7c_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_00403a7c_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_00403a7c_caseD_7;\u000aswitchD_00403a7c_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_00403a7c_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_00403a7c_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00404540;\u000aLAB_00403c60:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00404549:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00404558:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_00403c6b:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_00403caf:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_00403caf;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00404558;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00404485;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00404390;\u000a    }\u000a    goto LAB_00404558;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_004044ba;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00404558;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_004044e9;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00403fa8;\u000a  case '\u005ca':\u000a    goto joined_r0x00403e98;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00403e98;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00403cc6_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00403e98;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00403e98;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00403cc6_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00403e98:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_004043fe;\u000a    }\u000a    goto LAB_00404558;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00404558;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00404558;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00404558;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00404558;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00404558;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00403cc6_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00404456;\u000a      goto joined_r0x00404448;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00403f51:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00404448;\u000a      goto LAB_00404456;\u000a    }\u000a    goto LAB_00404558;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00404558;\u000a  }\u000a  goto joined_r0x00404390;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_004044ba:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_004044e9;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_004044e9:\u000a  if (1 < uVar10) {\u000aLAB_00403fc6:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00404082;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00403f51;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00404082:\u000a        if (bVar6 != 0) goto LAB_00404558;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00403fa8:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00403fc6;\u000ajoined_r0x00404390:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00404390:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_004043b7;\u000aLAB_004043f0:\u000a    if (bVar22) goto LAB_004043f5;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_004043f0;\u000aLAB_004043b7:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_004043f5:\u000a      if (bVar6 != 0) goto LAB_00404558;\u000aLAB_004043fe:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00404448;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00404456:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00404448:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00404485:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00403c60;\u000aLAB_00404540:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00404549;\u000a  goto LAB_00403c6b;\u000a}\u000a\u000a
p738
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x00401520\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00404625\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x4078c0 + RAX*0x8]\nMOV EDI,0x407de6\nMOV ESI,R15D\nCALL 0x00404cd0\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x407de8\nMOV ESI,R15D\nCALL 0x00404cd0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x00403add\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00403ae0\nNOP\nCMP R12,RSI\nJNC 0x00403ace\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00403ac0\nJMP 0x00403ae0\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x00401530\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x00403bac\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x00403bac\nMOV ECX,0x407de4\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00403ba6\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00403b47\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00403b74\nTEST RSI,RSI\nJZ 0x00403b61\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x407de8\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x00403b82\nMOV ECX,0x407de8\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x00403bac\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x004045fc\nMOV ECX,0x407de4\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00404540\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00404549\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x00403caf\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x00403caa\nCMP R11,-0x1\nJNZ 0x00403caa\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x00401530\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00403d00\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x00403f5c\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x407918 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00404558\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x004043b0\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x004043b7\nJMP 0x004043f0\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x004015f0\nTEST EAX,EAX\nSETZ AL\nJNZ 0x00403d4d\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00403cb1\nJMP 0x00404558\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00403cb1\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x00403cdb\nCMP EBX,0x2\nJNZ 0x00403cdb\nTEST R13,R13\nJNZ 0x00403cdb\nJMP 0x00404558\nCMP R11,-0x1\nJZ 0x00404133\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00404153\nJMP 0x00403cdb\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00404164\nTEST R8B,R8B\nJNZ 0x00404558\nCMP EBX,0x2\nJNZ 0x00403e08\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403e08\nCMP R12,RSI\nJNC 0x00403de3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403df2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403e01\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403e12\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x004042d8\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x004042d8\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x004042d8\nCMP RCX,RSI\nJNC 0x00403e4c\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x00403e5b\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403ce6\nJMP 0x004043b0\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403cd9\nJMP 0x00403eba\nMOV DL,0x74\nJMP 0x00403ea2\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403cd9\nJMP 0x00403eba\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403cd9\nJMP 0x00403eba\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00404558\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403cd9\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x004043fe\nJMP 0x00404558\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00403cd9\nTEST R8B,R8B\nJNZ 0x00404558\nCMP R12,RSI\nJNC 0x00403eea\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403ef9\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403f08\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00403cd9\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x004042eb\nCMP EBX,0x2\nJNZ 0x00403cd9\nTEST R8B,R8B\nJZ 0x00403cd9\nJMP 0x00404558\nCMP EBX,0x2\nJNZ 0x00404184\nTEST R8B,R8B\nJNZ 0x00404558\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00404456\nJMP 0x00404479\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x004041a5\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x004017f0\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00404398\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00404398\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00404082\nJMP 0x00404050\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x00404039\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x00404036\nCMP R12,RSI\nJNC 0x0040401b\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x0040402a\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00404070\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00404070\nTEST BPL,0x1\nJZ 0x00404113\nCMP R12,RSI\nJNC 0x00404064\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00404113\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00404050\nTEST R8B,R8B\nJNZ 0x00404558\nCMP EBX,0x2\nJNZ 0x004040ca\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x004040ca\nCMP R12,RSI\nJNC 0x004040a2\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004040b1\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004040c0\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x004040d4\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004040eb\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00404105\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00404000\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00404456\nJMP 0x00404479\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x00403cdb\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x00403cdb\nJMP 0x00404558\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00404485\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403ce6\nJMP 0x004043b0\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00403ea2\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00404456\nJMP 0x00404479\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x004041c7\nMOV RDI,R10\nCALL 0x00401530\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00401550\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0040449f\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00404497\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x004044a6\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x0040428e\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00404286\nBT RDI,RDX\nJC 0x004045f2\nINC RCX\nCMP RCX,R14\nJC 0x00404270\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x004017d0\nTEST EAX,EAX\nJNZ 0x004042a3\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x004017c0\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x004041e5\nJMP 0x004044e9\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403ce6\nJMP 0x004043b0\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00403cd9\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00403cd9\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00403cd9\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x00403cdb\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00404522\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00404558\nCMP R12,RSI\nJNC 0x0040434e\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00404361\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00404370\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x0040437f\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403ce6\nJMP 0x004043b0\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403ce6\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x004043f0\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x004043f5\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00404450\nJMP 0x004043f5\nTEST BPL,BPL\nJZ 0x00404450\nTEST R8B,R8B\nJNZ 0x00404558\nCMP EBX,0x2\nJNZ 0x00404438\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00404438\nCMP R12,RSI\nJNC 0x00404413\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00404422\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00404431\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00404442\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00404482\nJMP 0x0040447e\nTEST DIL,0x1\nJZ 0x00404479\nAND AL,0x1\nJNZ 0x00404479\nCMP R12,RSI\nJNC 0x00404464\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00404473\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00404482\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00404540\nJMP 0x00403c60\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x004044e4\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x004044dc\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00404518\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x004044ba\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x004044e9\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00403fa8\nJMP 0x00403fc6\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x004044e9\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403ce6\nJMP 0x004043b0\nCMP R13,R11\nJNZ 0x00403c6b\nTEST R8B,R8B\nJZ 0x004045b2\nCMP EBX,0x2\nJNZ 0x004045b2\nTEST R12,R12\nJNZ 0x004045b2\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x004039f0\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x004045e6\nTEST R8B,R8B\nJNZ 0x004045e6\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x004045e6\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x004045d9\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x004045d0\nCMP R12,RSI\nJNC 0x0040459d\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x0040459d\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00404558\nTEST RSI,RSI\nJZ 0x00404609\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x407de4\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x00403bac\nCALL 0x00401460\n'
p739
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 02 db ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 c0 78 40 00\nbf e6 7d 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf e8 7d 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 43 da ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 e4 7d 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 e8 7d 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 e8 7d 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 e4 7d 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 a3 d8 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd 18 79 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 d7 d8 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 77 d8 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 71 d3 ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 43 d3 ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 39 d5 ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 02 d5 ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 e4 7d 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 36 ce ff ff\n'
p740
S'.text:00000000004039f0\n.text:00000000004039f1\n.text:00000000004039f3\n.text:00000000004039f5\n.text:00000000004039f7\n.text:00000000004039f9\n.text:00000000004039fa\n.text:0000000000403a01\n.text:0000000000403a04\n.text:0000000000403a07\n.text:0000000000403a0a\n.text:0000000000403a0f\n.text:0000000000403a14\n.text:0000000000403a19\n.text:0000000000403a1e\n.text:0000000000403a26\n.text:0000000000403a2a\n.text:0000000000403a30\n.text:0000000000403a38\n.text:0000000000403a3d\n.text:0000000000403a45\n.text:0000000000403a4a\n.text:0000000000403a4e\n.text:0000000000403a50\n.text:0000000000403a53\n.text:0000000000403a56\n.text:0000000000403a59\n.text:0000000000403a5e\n.text:0000000000403a61\n.text:0000000000403a64\n.text:0000000000403a67\n.text:0000000000403a6a\n.text:0000000000403a6c\n.text:0000000000403a6f\n.text:0000000000403a74\n.text:0000000000403a77\n.text:0000000000403a7c\n.text:0000000000403a83\n.text:0000000000403a88\n.text:0000000000403a8b\n.text:0000000000403a90\n.text:0000000000403a95\n.text:0000000000403a9a\n.text:0000000000403a9d\n.text:0000000000403aa2\n.text:0000000000403aa7\n.text:0000000000403aac\n.text:0000000000403aae\n.text:0000000000403ab0\n.text:0000000000403ab5\n.text:0000000000403ab7\n.text:0000000000403aba\n.text:0000000000403abc\n.text:0000000000403abe\n.text:0000000000403ac0\n.text:0000000000403ac3\n.text:0000000000403ac5\n.text:0000000000403aca\n.text:0000000000403ace\n.text:0000000000403ad4\n.text:0000000000403ad7\n.text:0000000000403ad9\n.text:0000000000403adb\n.text:0000000000403add\n.text:0000000000403ae0\n.text:0000000000403ae5\n.text:0000000000403ae8\n.text:0000000000403aed\n.text:0000000000403af2\n.text:0000000000403af5\n.text:0000000000403af8\n.text:0000000000403afb\n.text:0000000000403afe\n.text:0000000000403b03\n.text:0000000000403b06\n.text:0000000000403b09\n.text:0000000000403b0e\n.text:0000000000403b11\n.text:0000000000403b13\n.text:0000000000403b16\n.text:0000000000403b18\n.text:0000000000403b1a\n.text:0000000000403b1d\n.text:0000000000403b22\n.text:0000000000403b27\n.text:0000000000403b2c\n.text:0000000000403b2f\n.text:0000000000403b35\n.text:0000000000403b37\n.text:0000000000403b3a\n.text:0000000000403b3d\n.text:0000000000403b40\n.text:0000000000403b42\n.text:0000000000403b44\n.text:0000000000403b47\n.text:0000000000403b4a\n.text:0000000000403b4f\n.text:0000000000403b52\n.text:0000000000403b54\n.text:0000000000403b57\n.text:0000000000403b59\n.text:0000000000403b5e\n.text:0000000000403b61\n.text:0000000000403b66\n.text:0000000000403b6c\n.text:0000000000403b72\n.text:0000000000403b74\n.text:0000000000403b79\n.text:0000000000403b7f\n.text:0000000000403b82\n.text:0000000000403b85\n.text:0000000000403b88\n.text:0000000000403b8a\n.text:0000000000403b8f\n.text:0000000000403b92\n.text:0000000000403b98\n.text:0000000000403b9d\n.text:0000000000403ba3\n.text:0000000000403ba6\n.text:0000000000403ba9\n.text:0000000000403bac\n.text:0000000000403bb4\n.text:0000000000403bb6\n.text:0000000000403bb8\n.text:0000000000403bbb\n.text:0000000000403bbf\n.text:0000000000403bc1\n.text:0000000000403bc4\n.text:0000000000403bc8\n.text:0000000000403bca\n.text:0000000000403bcd\n.text:0000000000403bd0\n.text:0000000000403bd3\n.text:0000000000403bd5\n.text:0000000000403bd9\n.text:0000000000403bdb\n.text:0000000000403bdf\n.text:0000000000403be2\n.text:0000000000403be5\n.text:0000000000403be8\n.text:0000000000403bea\n.text:0000000000403bee\n.text:0000000000403bf7\n.text:0000000000403bfa\n.text:0000000000403bfc\n.text:0000000000403c00\n.text:0000000000403c02\n.text:0000000000403c06\n.text:0000000000403c08\n.text:0000000000403c0b\n.text:0000000000403c0f\n.text:0000000000403c11\n.text:0000000000403c14\n.text:0000000000403c18\n.text:0000000000403c1d\n.text:0000000000403c20\n.text:0000000000403c24\n.text:0000000000403c2c\n.text:0000000000403c2f\n.text:0000000000403c32\n.text:0000000000403c34\n.text:0000000000403c38\n.text:0000000000403c3b\n.text:0000000000403c3d\n.text:0000000000403c42\n.text:0000000000403c46\n.text:0000000000403c4b\n.text:0000000000403c50\n.text:0000000000403c54\n.text:0000000000403c5a\n.text:0000000000403c60\n.text:0000000000403c65\n.text:0000000000403c6b\n.text:0000000000403c70\n.text:0000000000403c72\n.text:0000000000403c77\n.text:0000000000403c7b\n.text:0000000000403c7d\n.text:0000000000403c81\n.text:0000000000403c83\n.text:0000000000403c85\n.text:0000000000403c88\n.text:0000000000403c8d\n.text:0000000000403c8f\n.text:0000000000403c94\n.text:0000000000403c99\n.text:0000000000403c9d\n.text:0000000000403ca2\n.text:0000000000403ca7\n.text:0000000000403caa\n.text:0000000000403cad\n.text:0000000000403caf\n.text:0000000000403cb1\n.text:0000000000403cb6\n.text:0000000000403cba\n.text:0000000000403cc0\n.text:0000000000403cc2\n.text:0000000000403cc4\n.text:0000000000403cc6\n.text:0000000000403cce\n.text:0000000000403cd3\n.text:0000000000403cd9\n.text:0000000000403cdb\n.text:0000000000403ce0\n.text:0000000000403ce6\n.text:0000000000403cef\n.text:0000000000403cf5\n.text:0000000000403d00\n.text:0000000000403d02\n.text:0000000000403d05\n.text:0000000000403d09\n.text:0000000000403d11\n.text:0000000000403d14\n.text:0000000000403d19\n.text:0000000000403d1b\n.text:0000000000403d1e\n.text:0000000000403d20\n.text:0000000000403d25\n.text:0000000000403d28\n.text:0000000000403d2d\n.text:0000000000403d30\n.text:0000000000403d35\n.text:0000000000403d39\n.text:0000000000403d3e\n.text:0000000000403d40\n.text:0000000000403d42\n.text:0000000000403d48\n.text:0000000000403d4d\n.text:0000000000403d52\n.text:0000000000403d55\n.text:0000000000403d5a\n.text:0000000000403d5e\n.text:0000000000403d63\n.text:0000000000403d68\n.text:0000000000403d6a\n.text:0000000000403d6c\n.text:0000000000403d71\n.text:0000000000403d73\n.text:0000000000403d76\n.text:0000000000403d7c\n.text:0000000000403d7f\n.text:0000000000403d85\n.text:0000000000403d88\n.text:0000000000403d8e\n.text:0000000000403d93\n.text:0000000000403d97\n.text:0000000000403d9d\n.text:0000000000403da0\n.text:0000000000403da3\n.text:0000000000403da7\n.text:0000000000403daa\n.text:0000000000403dac\n.text:0000000000403daf\n.text:0000000000403db5\n.text:0000000000403dba\n.text:0000000000403dbf\n.text:0000000000403dc5\n.text:0000000000403dc8\n.text:0000000000403dce\n.text:0000000000403dd1\n.text:0000000000403dd3\n.text:0000000000403dd5\n.text:0000000000403dd7\n.text:0000000000403dd9\n.text:0000000000403ddc\n.text:0000000000403dde\n.text:0000000000403de3\n.text:0000000000403de8\n.text:0000000000403deb\n.text:0000000000403ded\n.text:0000000000403df2\n.text:0000000000403df7\n.text:0000000000403dfa\n.text:0000000000403dfc\n.text:0000000000403e01\n.text:0000000000403e05\n.text:0000000000403e08\n.text:0000000000403e0b\n.text:0000000000403e0d\n.text:0000000000403e12\n.text:0000000000403e17\n.text:0000000000403e19\n.text:0000000000403e1c\n.text:0000000000403e1f\n.text:0000000000403e25\n.text:0000000000403e29\n.text:0000000000403e2c\n.text:0000000000403e32\n.text:0000000000403e36\n.text:0000000000403e39\n.text:0000000000403e3c\n.text:0000000000403e42\n.text:0000000000403e45\n.text:0000000000403e47\n.text:0000000000403e4c\n.text:0000000000403e51\n.text:0000000000403e54\n.text:0000000000403e56\n.text:0000000000403e5b\n.text:0000000000403e5f\n.text:0000000000403e64\n.text:0000000000403e6a\n.text:0000000000403e6f\n.text:0000000000403e71\n.text:0000000000403e76\n.text:0000000000403e7c\n.text:0000000000403e7e\n.text:0000000000403e80\n.text:0000000000403e82\n.text:0000000000403e84\n.text:0000000000403e89\n.text:0000000000403e8f\n.text:0000000000403e91\n.text:0000000000403e93\n.text:0000000000403e98\n.text:0000000000403e9e\n.text:0000000000403ea0\n.text:0000000000403ea2\n.text:0000000000403ea7\n.text:0000000000403ea9\n.text:0000000000403eaf\n.text:0000000000403eb4\n.text:0000000000403eba\n.text:0000000000403ebd\n.text:0000000000403ec0\n.text:0000000000403ec6\n.text:0000000000403ecb\n.text:0000000000403ece\n.text:0000000000403ed1\n.text:0000000000403ed7\n.text:0000000000403eda\n.text:0000000000403ee0\n.text:0000000000403ee3\n.text:0000000000403ee5\n.text:0000000000403eea\n.text:0000000000403eef\n.text:0000000000403ef2\n.text:0000000000403ef4\n.text:0000000000403ef9\n.text:0000000000403efe\n.text:0000000000403f01\n.text:0000000000403f03\n.text:0000000000403f08\n.text:0000000000403f0c\n.text:0000000000403f0e\n.text:0000000000403f13\n.text:0000000000403f16\n.text:0000000000403f19\n.text:0000000000403f1f\n.text:0000000000403f22\n.text:0000000000403f28\n.text:0000000000403f2b\n.text:0000000000403f31\n.text:0000000000403f36\n.text:0000000000403f39\n.text:0000000000403f3f\n.text:0000000000403f42\n.text:0000000000403f48\n.text:0000000000403f4b\n.text:0000000000403f4d\n.text:0000000000403f51\n.text:0000000000403f57\n.text:0000000000403f5c\n.text:0000000000403f60\n.text:0000000000403f69\n.text:0000000000403f6f\n.text:0000000000403f74\n.text:0000000000403f79\n.text:0000000000403f7e\n.text:0000000000403f81\n.text:0000000000403f86\n.text:0000000000403f89\n.text:0000000000403f8c\n.text:0000000000403f91\n.text:0000000000403f96\n.text:0000000000403f9a\n.text:0000000000403f9f\n.text:0000000000403fa4\n.text:0000000000403fa8\n.text:0000000000403faa\n.text:0000000000403faf\n.text:0000000000403fb5\n.text:0000000000403fb8\n.text:0000000000403fba\n.text:0000000000403fbd\n.text:0000000000403fc0\n.text:0000000000403fc6\n.text:0000000000403fcb\n.text:0000000000403fce\n.text:0000000000403fd1\n.text:0000000000403fd4\n.text:0000000000403fd7\n.text:0000000000403fd9\n.text:0000000000403fdd\n.text:0000000000403fdf\n.text:0000000000403fe4\n.text:0000000000403fe9\n.text:0000000000403fef\n.text:0000000000404000\n.text:0000000000404005\n.text:0000000000404007\n.text:000000000040400a\n.text:000000000040400c\n.text:000000000040400f\n.text:0000000000404011\n.text:0000000000404014\n.text:0000000000404016\n.text:000000000040401b\n.text:0000000000404020\n.text:0000000000404023\n.text:0000000000404025\n.text:000000000040402a\n.text:000000000040402e\n.text:0000000000404036\n.text:0000000000404039\n.text:000000000040403c\n.text:000000000040403e\n.text:0000000000404042\n.text:0000000000404050\n.text:0000000000404054\n.text:000000000040405a\n.text:000000000040405d\n.text:000000000040405f\n.text:0000000000404064\n.text:0000000000404067\n.text:0000000000404069\n.text:0000000000404070\n.text:0000000000404073\n.text:0000000000404078\n.text:000000000040407b\n.text:0000000000404080\n.text:0000000000404082\n.text:0000000000404085\n.text:000000000040408b\n.text:000000000040408e\n.text:0000000000404090\n.text:0000000000404094\n.text:0000000000404096\n.text:0000000000404098\n.text:000000000040409b\n.text:000000000040409d\n.text:00000000004040a2\n.text:00000000004040a7\n.text:00000000004040aa\n.text:00000000004040ac\n.text:00000000004040b1\n.text:00000000004040b6\n.text:00000000004040b9\n.text:00000000004040bb\n.text:00000000004040c0\n.text:00000000004040c4\n.text:00000000004040c6\n.text:00000000004040ca\n.text:00000000004040cd\n.text:00000000004040cf\n.text:00000000004040d4\n.text:00000000004040d9\n.text:00000000004040dc\n.text:00000000004040de\n.text:00000000004040e1\n.text:00000000004040e4\n.text:00000000004040e7\n.text:00000000004040eb\n.text:00000000004040f0\n.text:00000000004040f3\n.text:00000000004040f5\n.text:00000000004040f8\n.text:00000000004040fb\n.text:00000000004040fe\n.text:0000000000404101\n.text:0000000000404105\n.text:0000000000404109\n.text:000000000040410d\n.text:0000000000404111\n.text:0000000000404113\n.text:0000000000404117\n.text:000000000040411a\n.text:0000000000404120\n.text:0000000000404124\n.text:0000000000404128\n.text:000000000040412e\n.text:0000000000404133\n.text:0000000000404136\n.text:0000000000404139\n.text:000000000040413e\n.text:0000000000404141\n.text:0000000000404143\n.text:0000000000404146\n.text:000000000040414d\n.text:0000000000404153\n.text:0000000000404155\n.text:0000000000404159\n.text:000000000040415f\n.text:0000000000404164\n.text:0000000000404169\n.text:000000000040416f\n.text:0000000000404172\n.text:0000000000404174\n.text:0000000000404179\n.text:000000000040417f\n.text:0000000000404184\n.text:0000000000404186\n.text:000000000040418b\n.text:0000000000404191\n.text:0000000000404193\n.text:0000000000404196\n.text:000000000040419a\n.text:00000000004041a0\n.text:00000000004041a5\n.text:00000000004041b1\n.text:00000000004041b5\n.text:00000000004041b7\n.text:00000000004041ba\n.text:00000000004041bf\n.text:00000000004041c4\n.text:00000000004041c7\n.text:00000000004041cb\n.text:00000000004041d0\n.text:00000000004041d2\n.text:00000000004041d6\n.text:00000000004041d8\n.text:00000000004041e0\n.text:00000000004041e5\n.text:00000000004041ea\n.text:00000000004041ee\n.text:00000000004041f2\n.text:00000000004041fa\n.text:00000000004041fd\n.text:0000000000404202\n.text:0000000000404205\n.text:0000000000404208\n.text:000000000040420d\n.text:0000000000404210\n.text:0000000000404213\n.text:0000000000404219\n.text:000000000040421d\n.text:0000000000404227\n.text:000000000040422d\n.text:0000000000404231\n.text:0000000000404236\n.text:000000000040423c\n.text:0000000000404240\n.text:0000000000404243\n.text:0000000000404247\n.text:0000000000404249\n.text:000000000040424e\n.text:0000000000404253\n.text:0000000000404257\n.text:0000000000404259\n.text:000000000040425e\n.text:0000000000404263\n.text:0000000000404267\n.text:000000000040426c\n.text:0000000000404270\n.text:0000000000404274\n.text:0000000000404277\n.text:000000000040427a\n.text:000000000040427c\n.text:0000000000404280\n.text:0000000000404286\n.text:0000000000404289\n.text:000000000040428c\n.text:000000000040428e\n.text:0000000000404292\n.text:0000000000404297\n.text:0000000000404299\n.text:000000000040429b\n.text:00000000004042a3\n.text:00000000004042a8\n.text:00000000004042ab\n.text:00000000004042b3\n.text:00000000004042b6\n.text:00000000004042b9\n.text:00000000004042be\n.text:00000000004042c1\n.text:00000000004042c3\n.text:00000000004042c8\n.text:00000000004042cd\n.text:00000000004042d3\n.text:00000000004042d8\n.text:00000000004042db\n.text:00000000004042e0\n.text:00000000004042e6\n.text:00000000004042eb\n.text:00000000004042f0\n.text:00000000004042f6\n.text:00000000004042fa\n.text:00000000004042fd\n.text:0000000000404303\n.text:0000000000404309\n.text:000000000040430f\n.text:0000000000404314\n.text:0000000000404316\n.text:0000000000404319\n.text:000000000040431f\n.text:0000000000404323\n.text:0000000000404325\n.text:000000000040432f\n.text:0000000000404333\n.text:0000000000404339\n.text:000000000040433c\n.text:000000000040433e\n.text:0000000000404344\n.text:0000000000404347\n.text:0000000000404349\n.text:000000000040434e\n.text:0000000000404353\n.text:0000000000404356\n.text:000000000040435a\n.text:000000000040435c\n.text:0000000000404361\n.text:0000000000404366\n.text:0000000000404369\n.text:000000000040436b\n.text:0000000000404370\n.text:0000000000404375\n.text:0000000000404378\n.text:000000000040437a\n.text:000000000040437f\n.text:0000000000404383\n.text:0000000000404385\n.text:0000000000404388\n.text:000000000040438b\n.text:0000000000404390\n.text:0000000000404396\n.text:0000000000404398\n.text:000000000040439d\n.text:00000000004043a2\n.text:00000000004043a8\n.text:00000000004043b0\n.text:00000000004043b5\n.text:00000000004043b7\n.text:00000000004043bc\n.text:00000000004043bf\n.text:00000000004043c1\n.text:00000000004043c4\n.text:00000000004043c6\n.text:00000000004043c9\n.text:00000000004043cc\n.text:00000000004043cf\n.text:00000000004043d1\n.text:00000000004043d9\n.text:00000000004043dc\n.text:00000000004043de\n.text:00000000004043e0\n.text:00000000004043f0\n.text:00000000004043f3\n.text:00000000004043f5\n.text:00000000004043f8\n.text:00000000004043fe\n.text:0000000000404401\n.text:0000000000404403\n.text:0000000000404405\n.text:0000000000404407\n.text:0000000000404409\n.text:000000000040440c\n.text:000000000040440e\n.text:0000000000404413\n.text:0000000000404418\n.text:000000000040441b\n.text:000000000040441d\n.text:0000000000404422\n.text:0000000000404427\n.text:000000000040442a\n.text:000000000040442c\n.text:0000000000404431\n.text:0000000000404435\n.text:0000000000404438\n.text:000000000040443b\n.text:000000000040443d\n.text:0000000000404442\n.text:0000000000404445\n.text:0000000000404448\n.text:000000000040444a\n.text:0000000000404450\n.text:0000000000404454\n.text:0000000000404456\n.text:0000000000404458\n.text:000000000040445a\n.text:000000000040445d\n.text:000000000040445f\n.text:0000000000404464\n.text:0000000000404469\n.text:000000000040446c\n.text:000000000040446e\n.text:0000000000404473\n.text:0000000000404477\n.text:0000000000404479\n.text:000000000040447c\n.text:000000000040447e\n.text:0000000000404482\n.text:0000000000404485\n.text:0000000000404488\n.text:000000000040448c\n.text:0000000000404492\n.text:0000000000404497\n.text:000000000040449f\n.text:00000000004044a4\n.text:00000000004044a6\n.text:00000000004044ae\n.text:00000000004044b3\n.text:00000000004044b5\n.text:00000000004044ba\n.text:00000000004044bf\n.text:00000000004044c3\n.text:00000000004044c5\n.text:00000000004044ca\n.text:00000000004044cd\n.text:00000000004044d0\n.text:00000000004044d2\n.text:00000000004044da\n.text:00000000004044dc\n.text:00000000004044e4\n.text:00000000004044e9\n.text:00000000004044ed\n.text:00000000004044f2\n.text:00000000004044f7\n.text:00000000004044fb\n.text:0000000000404500\n.text:0000000000404505\n.text:0000000000404509\n.text:000000000040450d\n.text:0000000000404513\n.text:0000000000404518\n.text:0000000000404520\n.text:0000000000404522\n.text:0000000000404524\n.text:0000000000404528\n.text:000000000040452d\n.text:0000000000404533\n.text:0000000000404540\n.text:0000000000404543\n.text:0000000000404549\n.text:000000000040454c\n.text:000000000040454e\n.text:0000000000404551\n.text:0000000000404553\n.text:0000000000404556\n.text:0000000000404558\n.text:0000000000404560\n.text:0000000000404566\n.text:000000000040456a\n.text:000000000040456d\n.text:0000000000404571\n.text:0000000000404576\n.text:000000000040457a\n.text:000000000040457e\n.text:0000000000404581\n.text:0000000000404584\n.text:0000000000404587\n.text:000000000040458b\n.text:000000000040458f\n.text:0000000000404591\n.text:0000000000404596\n.text:000000000040459a\n.text:000000000040459d\n.text:00000000004045a0\n.text:00000000004045a7\n.text:00000000004045a8\n.text:00000000004045aa\n.text:00000000004045ac\n.text:00000000004045ae\n.text:00000000004045b0\n.text:00000000004045b1\n.text:00000000004045b2\n.text:00000000004045ba\n.text:00000000004045bd\n.text:00000000004045bf\n.text:00000000004045c2\n.text:00000000004045c4\n.text:00000000004045c6\n.text:00000000004045c8\n.text:00000000004045ca\n.text:00000000004045cd\n.text:00000000004045d0\n.text:00000000004045d3\n.text:00000000004045d5\n.text:00000000004045d9\n.text:00000000004045dc\n.text:00000000004045df\n.text:00000000004045e2\n.text:00000000004045e4\n.text:00000000004045e6\n.text:00000000004045e9\n.text:00000000004045eb\n.text:00000000004045f0\n.text:00000000004045f2\n.text:00000000004045f7\n.text:00000000004045fc\n.text:00000000004045ff\n.text:0000000000404601\n.text:0000000000404606\n.text:0000000000404609\n.text:000000000040460e\n.text:0000000000404611\n.text:0000000000404617\n.text:000000000040461d\n.text:0000000000404620\n.text:0000000000404625\n'
p741
tp742
sS'set_quoting_style'
p743
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p744
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p745
S'TEST RDI,RDI\nMOV EAX,0x60b3e0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p746
S'48 85 ff\nb8 e0 b3 60 00\n48 0f 45 c7\n89 30\nc3\n'
p747
S'.text:00000000004038d0\n.text:00000000004038d3\n.text:00000000004038d8\n.text:00000000004038dc\n.text:00000000004038de\n'
p748
tp749
sS'prfield'
p750
(S'\n__stdcall prfield(size_t n, line * line)\n'
p751
V\u000avoid prfield(size_t n,line *line)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  if (line->nfields < n || line->nfields == n) {\u000a    if (empty_filler != (char *)0x0) {\u000a      fputs_unlocked(empty_filler,stdout);\u000a      return;\u000a    }\u000a  }\u000a  else {\u000a    sVar1 = line->fields[n].len;\u000a    if (sVar1 != 0) {\u000a      (*(code *)PTR_fwrite_unlocked_0060b170)(line->fields[n].beg,1,sVar1,stdout);\u000a      return;\u000a    }\u000a    if (empty_filler != (char *)0x0) {\u000a      fputs_unlocked(empty_filler,stdout);\u000a      return;\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p752
S'CMP qword ptr [RSI + 0x18],RDI\nJBE 0x004030bd\nMOV RAX,qword ptr [RSI + 0x28]\nSHL RDI,0x4\nMOV RDX,qword ptr [RAX + RDI*0x1 + 0x8]\nTEST RDX,RDX\nJZ 0x004030d5\nMOV RDI,qword ptr [RAX + RDI*0x1]\nMOV RCX,qword ptr [0x0060b2a8]\nMOV ESI,0x1\nJMP 0x004016e0\nMOV RDI,qword ptr [0x0060b300]\nTEST RDI,RDI\nJZ 0x004030ed\nMOV RSI,qword ptr [0x0060b2a8]\nJMP 0x00401600\nMOV RDI,qword ptr [0x0060b300]\nTEST RDI,RDI\nJZ 0x004030ed\nMOV RSI,qword ptr [0x0060b2a8]\nJMP 0x00401600\nRET\n'
p753
S'48 39 7e 18\n76 27\n48 8b 46 28\n48 c1 e7 04\n48 8b 54 38 08\n48 85 d2\n74 2d\n48 8b 3c 38\n48 8b 0d f5 81 20 00\nbe 01 00 00 00\ne9 23 e6 ff ff\n48 8b 3d 3c 82 20 00\n48 85 ff\n74 24\n48 8b 35 d8 81 20 00\ne9 2b e5 ff ff\n48 8b 3d 24 82 20 00\n48 85 ff\n74 0c\n48 8b 35 c0 81 20 00\ne9 13 e5 ff ff\nc3\n'
p754
S'.text:0000000000403090\n.text:0000000000403094\n.text:0000000000403096\n.text:000000000040309a\n.text:000000000040309e\n.text:00000000004030a3\n.text:00000000004030a6\n.text:00000000004030a8\n.text:00000000004030ac\n.text:00000000004030b3\n.text:00000000004030b8\n.text:00000000004030bd\n.text:00000000004030c4\n.text:00000000004030c7\n.text:00000000004030c9\n.text:00000000004030d0\n.text:00000000004030d5\n.text:00000000004030dc\n.text:00000000004030df\n.text:00000000004030e1\n.text:00000000004030e8\n.text:00000000004030ed\n'
p755
tp756
sS'free_spareline'
p757
(S'\n__stdcall free_spareline()\n'
p758
V\u000avoid free_spareline(void)\u000a\u000a{\u000a  line *line;\u000a  long lVar1;\u000a  \u000a  lVar1 = -0x10;\u000a  do {\u000a    line = *(line **)((long)&outlist_head.file + lVar1);\u000a    if (line != (line *)0x0) {\u000a      freeline(line);\u000a      free(*(void **)((long)&outlist_head.file + lVar1));\u000a    }\u000a    lVar1 = lVar1 + 8;\u000a  } while (lVar1 != 0);\u000a  return;\u000a}\u000a\u000a
p759
S'PUSH RBX\nMOV RBX,-0x10\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [0x60b340 + RBX]\nTEST RDI,RDI\nJZ 0x0040233d\nCALL 0x00402b10\nMOV RDI,qword ptr [0x60b340 + RBX]\nCALL 0x00401450\nADD RBX,0x8\nJNZ 0x00402320\nPOP RBX\nRET\n'
p760
S'53\n48 c7 c3 f0 ff ff ff\n0f 1f 84 00 00 00 00 00\n48 8b bb 40 b3 60 00\n48 85 ff\n74 11\ne8 df 07 00 00\n48 8b bb 40 b3 60 00\ne8 13 f1 ff ff\n48 83 c3 08\n75 dd\n5b\nc3\n'
p761
S'.text:0000000000402310\n.text:0000000000402311\n.text:0000000000402318\n.text:0000000000402320\n.text:0000000000402327\n.text:000000000040232a\n.text:000000000040232c\n.text:0000000000402331\n.text:0000000000402338\n.text:000000000040233d\n.text:0000000000402341\n.text:0000000000402343\n.text:0000000000402344\n'
p762
tp763
sS'textdomain'
p764
(S'\n__stdcall textdomain()\n'
p765
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_0060b070)();\u000a  return;\u000a}\u000a\u000a
p766
S'JMP qword ptr [0x0060b070]\n'
p767
S'ff 25 8a 9b 20 00\n'
p768
S'.plt:00000000004014e0\n'
p769
tp770
sS'xmemdup'
p771
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p772
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p773
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00405600\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00401640\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p774
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 dc be ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p775
S'.text:0000000000405740\n.text:0000000000405742\n.text:0000000000405744\n.text:0000000000405745\n.text:0000000000405748\n.text:000000000040574b\n.text:000000000040574e\n.text:0000000000405753\n.text:0000000000405756\n.text:0000000000405759\n.text:000000000040575c\n.text:000000000040575f\n.text:0000000000405764\n.text:0000000000405767\n.text:0000000000405768\n.text:000000000040576a\n.text:000000000040576c\n'
p776
tp777
sS'get_quoting_style'
p778
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p779
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p780
S'TEST RDI,RDI\nMOV EAX,0x60b3e0\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p781
S'48 85 ff\nb8 e0 b3 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p782
S'.text:00000000004038c0\n.text:00000000004038c3\n.text:00000000004038c8\n.text:00000000004038cc\n.text:00000000004038ce\n'
p783
tp784
sS'ferror_unlocked'
p785
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p786
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_0060b108)();\u000a  return iVar1;\u000a}\u000a\u000a
p787
S'JMP qword ptr [0x0060b108]\n'
p788
S'ff 25 f2 9a 20 00\n'
p789
S'.plt:0000000000401610\n'
p790
tp791
sS'exit'
p792
(S'\n__stdcall exit(int __status)\n'
p793
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_0060b1c8)();\u000a  return;\u000a}\u000a\u000a
p794
S'JMP qword ptr [0x0060b1c8]\n'
p795
S'ff 25 32 9a 20 00\n'
p796
S'.plt:0000000000401790\n'
p797
tp798
sS'locale_charset'
p799
(S'\n__stdcall locale_charset()\n'
p800
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = "";\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_0040619d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_0040619d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p801
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401690\nTEST RAX,RAX\nMOV R14D,0x407773\nCMOVNZ R14,RAX\nCALL 0x004061b0\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00406175\nJMP 0x0040619d\nMOV RDI,RBX\nCALL 0x00401530\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00401530\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x0040619d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00401630\nTEST EAX,EAX\nJZ 0x00406190\nCMP BPL,0x2a\nJNZ 0x00406150\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00406150\nMOV RDI,RBX\nCALL 0x00401530\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x408840\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p802
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 62 b5 ff ff\n48 85 c0\n41 be 73 77 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 d8 b3 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 ca b3 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 b0 b4 ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 98 b3 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 40 88 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p803
S'.text:0000000000406120\n.text:0000000000406121\n.text:0000000000406123\n.text:0000000000406124\n.text:0000000000406129\n.text:000000000040612e\n.text:0000000000406131\n.text:0000000000406137\n.text:000000000040613b\n.text:0000000000406140\n.text:0000000000406143\n.text:0000000000406146\n.text:0000000000406149\n.text:000000000040614b\n.text:0000000000406150\n.text:0000000000406153\n.text:0000000000406158\n.text:000000000040615c\n.text:0000000000406161\n.text:0000000000406166\n.text:000000000040616b\n.text:0000000000406170\n.text:0000000000406173\n.text:0000000000406175\n.text:0000000000406178\n.text:000000000040617b\n.text:0000000000406180\n.text:0000000000406182\n.text:0000000000406184\n.text:0000000000406188\n.text:000000000040618a\n.text:000000000040618e\n.text:0000000000406190\n.text:0000000000406193\n.text:0000000000406198\n.text:000000000040619d\n.text:00000000004061a1\n.text:00000000004061a6\n.text:00000000004061aa\n.text:00000000004061ab\n.text:00000000004061ad\n.text:00000000004061ae\n'
p804
tp805
sS'set_program_name'
p806
(S'\n__stdcall set_program_name(char * argv0)\n'
p807
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p808
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00403851\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00401570\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x0040383b\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x4078a9\nMOV EDX,0x7\nCALL 0x00401480\nTEST EAX,EAX\nJNZ 0x0040383b\nMOV ESI,0x4078b1\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401480\nTEST EAX,EAX\nJNZ 0x00403838\nADD R14,0x3\nMOV qword ptr [0x0060b2a0],R14\nMOV RBX,R14\nMOV qword ptr [0x0060b3d0],RBX\nMOV qword ptr [0x0060b2c8],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x0060b2e0]\nMOV EDI,0x407871\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x004017a0\nCALL 0x00401460\n'
p809
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 87 dd ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe a9 78 40 00\nba 07 00 00 00\ne8 6d dc ff ff\n85 c0\n75 24\nbe b1 78 40 00\nba 03 00 00 00\n4c 89 f7\ne8 57 dc ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 68 7a 20 00\n4c 89 f3\n48 89 1d 8e 7b 20 00\n48 89 1d 7f 7a 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 88 7a 20 00\nbf 71 78 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 34 df ff ff\ne8 ef db ff ff\n'
p810
S'.text:00000000004037d0\n.text:00000000004037d2\n.text:00000000004037d3\n.text:00000000004037d4\n.text:00000000004037d7\n.text:00000000004037da\n.text:00000000004037dc\n.text:00000000004037e1\n.text:00000000004037e4\n.text:00000000004037e9\n.text:00000000004037ec\n.text:00000000004037f0\n.text:00000000004037f4\n.text:00000000004037f7\n.text:00000000004037fa\n.text:00000000004037fe\n.text:0000000000403800\n.text:0000000000403804\n.text:0000000000403809\n.text:000000000040380e\n.text:0000000000403813\n.text:0000000000403815\n.text:0000000000403817\n.text:000000000040381c\n.text:0000000000403821\n.text:0000000000403824\n.text:0000000000403829\n.text:000000000040382b\n.text:000000000040382d\n.text:0000000000403831\n.text:0000000000403838\n.text:000000000040383b\n.text:0000000000403842\n.text:0000000000403849\n.text:000000000040384d\n.text:000000000040384e\n.text:0000000000403850\n.text:0000000000403851\n.text:0000000000403858\n.text:000000000040385d\n.text:0000000000403862\n.text:0000000000403867\n.text:000000000040386c\n'
p811
tp812
sS'quotearg_buffer'
p813
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p814
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p815
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x60b3e0\nCMOVNZ RBP,R8\nCALL 0x00401470\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x004039f0\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p816
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd e0 b3 60 00\n49 0f 45 e8\ne8 d8 da ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p817
S'.text:0000000000403970\n.text:0000000000403971\n.text:0000000000403973\n.text:0000000000403975\n.text:0000000000403977\n.text:0000000000403979\n.text:000000000040397a\n.text:000000000040397b\n.text:000000000040397e\n.text:0000000000403981\n.text:0000000000403984\n.text:0000000000403987\n.text:000000000040398a\n.text:000000000040398f\n.text:0000000000403993\n.text:0000000000403998\n.text:000000000040399b\n.text:000000000040399d\n.text:00000000004039a1\n.text:00000000004039a5\n.text:00000000004039a9\n.text:00000000004039ad\n.text:00000000004039b0\n.text:00000000004039b3\n.text:00000000004039b6\n.text:00000000004039b9\n.text:00000000004039bc\n.text:00000000004039bf\n.text:00000000004039c3\n.text:00000000004039c4\n.text:00000000004039c9\n.text:00000000004039cd\n.text:00000000004039d1\n.text:00000000004039d3\n.text:00000000004039d7\n.text:00000000004039d8\n.text:00000000004039da\n.text:00000000004039dc\n.text:00000000004039de\n.text:00000000004039e0\n.text:00000000004039e1\n'
p818
tp819
sS'quotearg_colon'
p820
(S'\n__stdcall quotearg_colon(char * arg)\n'
p821
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p822
S'MOV ESI,0x3a\nJMP 0x00404b50\n'
p823
S'be 3a 00 00 00\neb e9\n'
p824
S'.text:0000000000404b60\n.text:0000000000404b65\n'
p825
tp826
sS'rpl_fflush'
p827
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p828
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_0060b140)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p829
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00405ebd\nMOV RDI,RBX\nCALL 0x004016d0\nTEST EAX,EAX\nJZ 0x00405ebd\nMOV RDI,RBX\nCALL 0x00405ed0\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401680\n'
p830
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 1f b8 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 ba b7 ff ff\n'
p831
S'.text:0000000000405ea0\n.text:0000000000405ea1\n.text:0000000000405ea4\n.text:0000000000405ea7\n.text:0000000000405ea9\n.text:0000000000405eac\n.text:0000000000405eb1\n.text:0000000000405eb3\n.text:0000000000405eb5\n.text:0000000000405eb8\n.text:0000000000405ebd\n.text:0000000000405ec0\n.text:0000000000405ec1\n'
p832
tp833
sS'__assert_fail'
p834
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p835
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_0060b0c8)();\u000a  return;\u000a}\u000a\u000a
p836
S'JMP qword ptr [0x0060b0c8]\n'
p837
S'ff 25 32 9b 20 00\n'
p838
S'.plt:0000000000401590\n'
p839
tp840
sS'system_join'
p841
(S'\n__stdcall system_join(FILE * fp1, FILE * fp2)\n'
p842
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000avoid system_join(FILE *fp1,FILE *fp2)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  undefined7 extraout_var;\u000a  undefined7 extraout_var_00;\u000a  ulong uVar3;\u000a  line *line2;\u000a  seq *seq;\u000a  line *line1;\u000a  FILE *fp;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  seq local_70;\u000a  seq local_58;\u000a  line *local_40;\u000a  undefined4 local_38;\u000a  undefined4 local_34;\u000a  \u000a  fadvise(fp1);\u000a  fadvise(fp2);\u000a  initseq(&local_58);\u000a  getseq(fp1,&local_58);\u000a  initseq(&local_70);\u000a  getseq(fp2,&local_70);\u000a  if (autoformat == 1) {\u000a    if (local_58.count == 0) {\u000a      autocount_1 = 0;\u000a    }\u000a    else {\u000a      autocount_1 = (*local_58.lines)->nfields;\u000a    }\u000a    if (local_70.count == 0) {\u000a      autocount_2 = 0;\u000a    }\u000a    else {\u000a      autocount_2 = (*local_70.lines)->nfields;\u000a    }\u000a  }\u000a  if (join_header_lines != 1) goto LAB_004026f4;\u000a  if (local_58.count == 0) {\u000a    if (local_70.count == 0) goto LAB_004026f4;\u000a    line1 = &uni_blank;\u000a    if (local_70.count == 0) goto LAB_004026a2;\u000aLAB_00402698:\u000a    line2 = *local_70.lines;\u000a  }\u000a  else {\u000a    line1 = *local_58.lines;\u000a    if (local_70.count != 0) goto LAB_00402698;\u000aLAB_004026a2:\u000a    line2 = &uni_blank;\u000a  }\u000a  prjoin(line1,line2);\u000a  prevline[0]._0_4_ = 0;\u000a  prevline[0]._4_4_ = 0;\u000a  prevline[1]._0_4_ = 0;\u000a  prevline[1]._4_4_ = 0;\u000a  if (local_58.count != 0) {\u000a    advance_seq(fp1,&local_58);\u000a  }\u000a  if (local_70.count != 0) {\u000a    advance_seq(fp2,&local_70);\u000a  }\u000aLAB_004026f4:\u000a  if ((local_58.count != 0) && (local_70.count != 0)) {\u000a    do {\u000a      iVar2 = keycmp(*local_58.lines,*local_70.lines,join_field_1,join_field_2);\u000a      if (iVar2 < 0) {\u000a        seq = &local_58;\u000a        fp = fp1;\u000a        if (print_unpairables_1 != false) {\u000a          prjoin(*local_58.lines,&uni_blank);\u000a          seq = &local_58;\u000a          fp = fp1;\u000a        }\u000aLAB_0040280b:\u000a        advance_seq(fp,seq);\u000a        seen_unpairable = 1;\u000a        if (local_58.count == 0) break;\u000a      }\u000a      else {\u000a        if (iVar2 != 0) {\u000a          seq = &local_70;\u000a          fp = fp2;\u000a          if (print_unpairables_2 != false) {\u000a            prjoin(&uni_blank,*local_70.lines);\u000a            seq = &local_70;\u000a            fp = fp2;\u000a          }\u000a          goto LAB_0040280b;\u000a        }\u000a        do {\u000a          _Var1 = advance_seq(fp1,&local_58);\u000a          if (_Var1 == false) {\u000a            local_58.count = local_58.count + 1;\u000a            local_34 = (undefined4)CONCAT71(extraout_var,1);\u000a            goto LAB_00402840;\u000a          }\u000a          iVar2 = keycmp(local_58.lines[local_58.count - 1],*local_70.lines,join_field_1,\u000a                         join_field_2);\u000a        } while (iVar2 == 0);\u000a        local_34 = 0;\u000aLAB_00402840:\u000a        do {\u000a          _Var1 = advance_seq(fp2,&local_70);\u000a          if (_Var1 == false) {\u000a            local_70.count = local_70.count + 1;\u000a            local_38 = (undefined4)CONCAT71(extraout_var_00,1);\u000a            if (local_58.count == 1) goto LAB_00402907;\u000a            goto LAB_004028a9;\u000a          }\u000a          iVar2 = keycmp(*local_58.lines,local_70.lines[local_70.count - 1],join_field_1,\u000a                         join_field_2);\u000a        } while (iVar2 == 0);\u000a        local_38 = 0;\u000a        if (local_58.count != 1) {\u000aLAB_004028a9:\u000a          if (((print_pairables ^ 1) & 1) == 0) {\u000a            uVar4 = 0;\u000a            do {\u000a              if (local_70.count != 1) {\u000a                uVar3 = 0;\u000a                do {\u000a                  prjoin(local_58.lines[uVar4],local_70.lines[uVar3]);\u000a                  uVar3 = uVar3 + 1;\u000a                } while (uVar3 < local_70.count - 1);\u000a              }\u000a              uVar4 = uVar4 + 1;\u000a            } while (uVar4 < local_58.count - 1);\u000a          }\u000a        }\u000aLAB_00402907:\u000a        bVar5 = (char)local_34 == 0;\u000a        if (bVar5) {\u000a          line1 = *local_58.lines;\u000a          *local_58.lines = local_58.lines[local_58.count - 1];\u000a          local_58.lines[local_58.count - 1] = line1;\u000a        }\u000a        local_58.count = (ulong)bVar5;\u000a        if ((char)local_38 == 0) {\u000a          line1 = *local_70.lines;\u000a          *local_70.lines = local_70.lines[local_70.count - 1];\u000a          local_70.lines[local_70.count - 1] = line1;\u000a        }\u000a        local_70.count = (ulong)((char)local_38 == 0);\u000a        if (!bVar5) break;\u000a      }\u000a    } while (local_70.count != 0);\u000a  }\u000a  local_40 = (line *)0x0;\u000a  if (check_input_order == CHECK_ORDER_DISABLED) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = issued_disorder_warning[1] == false || issued_disorder_warning[0] == false;\u000a  }\u000a  if ((local_58.count != 0) && (!(bool)(print_unpairables_1 == false & ~bVar5))) {\u000a    if (print_unpairables_1 != false) {\u000a      prjoin(*local_58.lines,&uni_blank);\u000a    }\u000a    if (local_70.count != 0) {\u000a      seen_unpairable = 1;\u000a    }\u000a    do {\u000a      _Var1 = get_line(fp1,&local_40);\u000a      if (_Var1 == false) break;\u000a      if (print_unpairables_1 != false) {\u000a        prjoin(local_40,&uni_blank);\u000a      }\u000a    } while ((issued_disorder_warning[0] == false) || (print_unpairables_1 != false));\u000a  }\u000a  if ((local_70.count != 0) && ((~bVar5 & print_unpairables_2 == false) == 0)) {\u000a    if (print_unpairables_2 != false) {\u000a      prjoin(&uni_blank,*local_70.lines);\u000a    }\u000a    if (local_58.count != 0) {\u000a      seen_unpairable = 1;\u000a    }\u000a    do {\u000a      _Var1 = get_line(fp2,&local_40);\u000a      if (_Var1 == false) break;\u000a      if (print_unpairables_2 != false) {\u000a        prjoin(&uni_blank,local_40);\u000a      }\u000a    } while ((issued_disorder_warning[1] == false) || (print_unpairables_2 != false));\u000a  }\u000a  line1 = local_40;\u000a  freeline(local_40);\u000a  free(line1);\u000a  delseq(&local_58);\u000a  delseq(&local_70);\u000a  return;\u000a}\u000a\u000a
p843
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x48\nMOV R14,RSI\nMOV RBX,RDI\nMOV ESI,0x2\nCALL 0x004035a0\nMOV ESI,0x2\nMOV RDI,R14\nCALL 0x004035a0\nLEA R15,[RSP + 0x20]\nMOV RDI,R15\nCALL 0x00402cb0\nMOV EDX,0x1\nMOV RDI,RBX\nMOV RSI,R15\nCALL 0x00402cc0\nLEA R15,[RSP + 0x8]\nMOV RDI,R15\nCALL 0x00402cb0\nMOV EDX,0x2\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x00402cc0\nCMP byte ptr [0x0060b309],0x1\nJNZ 0x0040265c\nCMP qword ptr [RSP + 0x20],0x0\nJZ 0x00402634\nMOV RAX,qword ptr [RSP + 0x30]\nMOV RAX,qword ptr [RAX]\nMOV RAX,qword ptr [RAX + 0x18]\nJMP 0x00402636\nXOR EAX,EAX\nMOV qword ptr [0x0060b358],RAX\nCMP qword ptr [RSP + 0x8],0x0\nJZ 0x00402653\nMOV RAX,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOV RAX,qword ptr [RAX + 0x18]\nJMP 0x00402655\nXOR EAX,EAX\nMOV qword ptr [0x0060b360],RAX\nCMP byte ptr [0x0060b320],0x1\nJNZ 0x004026f4\nCMP qword ptr [RSP + 0x20],0x0\nJZ 0x00402683\nMOV RAX,qword ptr [RSP + 0x30]\nMOV RDI,qword ptr [RAX]\nCMP qword ptr [RSP + 0x8],0x0\nJNZ 0x00402698\nJMP 0x004026a2\nCMP qword ptr [RSP + 0x8],0x0\nJZ 0x004026f4\nMOV EDI,0x60b368\nCMP qword ptr [RSP + 0x8],0x0\nJZ 0x004026a2\nMOV RAX,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RAX]\nJMP 0x004026a7\nMOV ESI,0x60b368\nCALL 0x00402d50\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [0x0060b3a0],XMM0\nCMP qword ptr [RSP + 0x20],0x0\nJZ 0x004026d5\nLEA RSI,[RSP + 0x20]\nMOV EDX,0x1\nMOV ECX,0x1\nMOV RDI,RBX\nCALL 0x00402e50\nCMP qword ptr [RSP + 0x8],0x0\nJZ 0x004026f4\nLEA RSI,[RSP + 0x8]\nMOV EDX,0x1\nMOV ECX,0x2\nMOV RDI,R14\nCALL 0x00402e50\nCMP qword ptr [RSP + 0x20],0x0\nJZ 0x00402985\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00402985\nLEA R15,[RSP + 0x20]\nLEA R12,[RSP + 0x8]\nNOP dword ptr [RAX + RAX*0x1]\nMOV RAX,qword ptr [RSP + 0x30]\nMOV RDI,qword ptr [RAX]\nMOV RAX,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RAX]\nMOV RDX,qword ptr [0x0060b210]\nMOV RCX,qword ptr [0x0060b218]\nCALL 0x00402e70\nTEST EAX,EAX\nJS 0x004027e0\nJZ 0x00402780\nCMP byte ptr [0x0060b2fd],0x0\nJZ 0x00402768\nMOV RAX,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RAX]\nMOV EDI,0x60b368\nCALL 0x00402d50\nMOV EDX,0x1\nMOV ECX,0x2\nMOV RDI,R14\nMOV RSI,R12\nJMP 0x0040280b\nXOR EDX,EDX\nMOV ECX,0x1\nMOV RDI,RBX\nMOV RSI,R15\nCALL 0x00402e50\nTEST AL,AL\nJZ 0x00402828\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x30]\nMOV RDI,qword ptr [RCX + RAX*0x8 + -0x8]\nMOV RAX,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RAX]\nMOV RDX,qword ptr [0x0060b210]\nMOV RCX,qword ptr [0x0060b218]\nCALL 0x00402e70\nTEST EAX,EAX\nJZ 0x00402780\nMOV dword ptr [RSP + 0x44],0x0\nJMP 0x00402840\nCMP byte ptr [0x0060b2fc],0x0\nJZ 0x004027fb\nMOV RAX,qword ptr [RSP + 0x30]\nMOV RDI,qword ptr [RAX]\nMOV ESI,0x60b368\nCALL 0x00402d50\nMOV EDX,0x1\nMOV ECX,0x1\nMOV RDI,RBX\nMOV RSI,R15\nCALL 0x00402e50\nMOV byte ptr [0x0060b2f2],0x1\nCMP qword ptr [RSP + 0x20],0x0\nJNZ 0x00402977\nJMP 0x00402985\nINC qword ptr [RSP + 0x20]\nMOV AL,0x1\nMOV dword ptr [RSP + 0x44],EAX\nNOP dword ptr CS:[RAX + RAX*0x1]\nXOR EDX,EDX\nMOV ECX,0x2\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00402e50\nTEST AL,AL\nJZ 0x00402896\nMOV RAX,qword ptr [RSP + 0x30]\nMOV RDI,qword ptr [RAX]\nMOV RAX,qword ptr [RSP + 0x8]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RCX + RAX*0x8 + -0x8]\nMOV RDX,qword ptr [0x0060b210]\nMOV RCX,qword ptr [0x0060b218]\nCALL 0x00402e70\nTEST EAX,EAX\nJZ 0x00402840\nMOV dword ptr [RSP + 0x40],0x0\nCMP qword ptr [RSP + 0x20],0x1\nJNZ 0x004028a9\nJMP 0x00402907\nINC qword ptr [RSP + 0x8]\nMOV AL,0x1\nMOV dword ptr [RSP + 0x40],EAX\nCMP qword ptr [RSP + 0x20],0x1\nJZ 0x00402907\nMOV AL,byte ptr [0x0060b2f1]\nXOR AL,0x1\nTEST AL,0x1\nJNZ 0x00402907\nXOR R13D,R13D\nNOP dword ptr [RAX + RAX*0x1]\nCMP qword ptr [RSP + 0x8],0x1\nJZ 0x004028f7\nXOR EBP,EBP\nNOP word ptr [RAX + RAX*0x1]\nMOV RAX,qword ptr [RSP + 0x30]\nMOV RDI,qword ptr [RAX + R13*0x8]\nMOV RAX,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RAX + RBP*0x8]\nCALL 0x00402d50\nINC RBP\nMOV RAX,qword ptr [RSP + 0x8]\nDEC RAX\nCMP RBP,RAX\nJC 0x004028d0\nINC R13\nMOV RAX,qword ptr [RSP + 0x20]\nDEC RAX\nCMP R13,RAX\nJC 0x004028c0\nCMP byte ptr [RSP + 0x44],0x0\nJZ 0x00402912\nXOR EAX,EAX\nJMP 0x00402936\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x30]\nMOV RDX,qword ptr [RCX]\nMOV RSI,qword ptr [RCX + RAX*0x8 + -0x8]\nMOV qword ptr [RCX],RSI\nMOV RCX,qword ptr [RSP + 0x30]\nMOV qword ptr [RCX + RAX*0x8 + -0x8],RDX\nMOV EAX,0x1\nMOV qword ptr [RSP + 0x20],RAX\nCMP byte ptr [RSP + 0x40],0x0\nJZ 0x00402946\nXOR EAX,EAX\nJMP 0x0040296a\nMOV RAX,qword ptr [RSP + 0x8]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV RDX,qword ptr [RCX]\nMOV RSI,qword ptr [RCX + RAX*0x8 + -0x8]\nMOV qword ptr [RCX],RSI\nMOV RCX,qword ptr [RSP + 0x18]\nMOV qword ptr [RCX + RAX*0x8 + -0x8],RDX\nMOV EAX,0x1\nMOV qword ptr [RSP + 0x8],RAX\nCMP qword ptr [RSP + 0x20],0x0\nJZ 0x00402985\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJNZ 0x00402720\nMOV qword ptr [RSP + 0x38],0x0\nCMP dword ptr [0x0060b2f8],0x2\nJNZ 0x0040299b\nXOR EBP,EBP\nJMP 0x004029b3\nCMP byte ptr [0x0060b2f3],0x0\nSETZ AL\nCMP byte ptr [0x0060b2f4],0x0\nSETZ BPL\nOR BPL,AL\nMOV AL,byte ptr [0x0060b2fc]\nTEST AL,AL\nSETZ CL\nNOT BPL\nCMP qword ptr [RSP + 0x20],0x0\nJZ 0x00402a40\nAND CL,BPL\nJNZ 0x00402a40\nTEST AL,AL\nJZ 0x004029e4\nMOV RAX,qword ptr [RSP + 0x30]\nMOV RDI,qword ptr [RAX]\nMOV ESI,0x60b368\nCALL 0x00402d50\nCMP qword ptr [RSP + 0x8],0x0\nJZ 0x004029f3\nMOV byte ptr [0x0060b2f2],0x1\nLEA R15,[RSP + 0x38]\nNOP dword ptr [RAX + RAX*0x1]\nMOV EDX,0x1\nMOV RDI,RBX\nMOV RSI,R15\nCALL 0x00402f40\nTEST AL,AL\nJZ 0x00402a40\nCMP byte ptr [0x0060b2fc],0x0\nJZ 0x00402a2c\nMOV RDI,qword ptr [RSP + 0x38]\nMOV ESI,0x60b368\nCALL 0x00402d50\nCMP byte ptr [0x0060b2f3],0x0\nJZ 0x00402a00\nMOVZX EAX,byte ptr [0x0060b2fc]\nTEST AL,AL\nJNZ 0x00402a00\nMOV AL,byte ptr [0x0060b2fd]\nTEST AL,AL\nSETZ CL\nCMP qword ptr [RSP + 0x8],0x0\nJZ 0x00402ad0\nAND BPL,CL\nJNZ 0x00402ad0\nTEST AL,AL\nJZ 0x00402a6e\nMOV RAX,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RAX]\nMOV EDI,0x60b368\nCALL 0x00402d50\nCMP qword ptr [RSP + 0x20],0x0\nJZ 0x00402a7d\nMOV byte ptr [0x0060b2f2],0x1\nLEA RBX,[RSP + 0x38]\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV EDX,0x2\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00402f40\nTEST AL,AL\nJZ 0x00402ad0\nCMP byte ptr [0x0060b2fd],0x0\nJZ 0x00402abc\nMOV RSI,qword ptr [RSP + 0x38]\nMOV EDI,0x60b368\nCALL 0x00402d50\nCMP byte ptr [0x0060b2f4],0x0\nJZ 0x00402a90\nMOVZX EAX,byte ptr [0x0060b2fd]\nTEST AL,AL\nJNZ 0x00402a90\nMOV RBX,qword ptr [RSP + 0x38]\nMOV RDI,RBX\nCALL 0x00402b10\nMOV RDI,RBX\nCALL 0x00401450\nLEA RDI,[RSP + 0x20]\nCALL 0x00403040\nLEA RDI,[RSP + 0x8]\nCALL 0x00403040\nADD RSP,0x48\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p844
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 48\n49 89 f6\n48 89 fb\nbe 02 00 00 00\ne8 d2 0f 00 00\nbe 02 00 00 00\n4c 89 f7\ne8 c5 0f 00 00\n4c 8d 7c 24 20\n4c 89 ff\ne8 c8 06 00 00\nba 01 00 00 00\n48 89 df\n4c 89 fe\ne8 c8 06 00 00\n4c 8d 7c 24 08\n4c 89 ff\ne8 ab 06 00 00\nba 02 00 00 00\n4c 89 f7\n4c 89 fe\ne8 ab 06 00 00\n80 3d ed 8c 20 00 01\n75 3e\n48 83 7c 24 20 00\n74 0e\n48 8b 44 24 30\n48 8b 00\n48 8b 40 18\neb 02\n31 c0\n48 89 05 1b 8d 20 00\n48 83 7c 24 08 00\n74 0e\n48 8b 44 24 18\n48 8b 00\n48 8b 40 18\neb 02\n31 c0\n48 89 05 04 8d 20 00\n80 3d bd 8c 20 00 01\n0f 85 8b 00 00 00\n48 83 7c 24 20 00\n74 12\n48 8b 44 24 30\n48 8b 38\n48 83 7c 24 08 00\n75 17\neb 1f\n48 83 7c 24 08 00\n74 69\nbf 68 b3 60 00\n48 83 7c 24 08 00\n74 0a\n48 8b 44 24 18\n48 8b 30\neb 05\nbe 68 b3 60 00\ne8 a4 06 00 00\n0f 57 c0\n0f 29 05 ea 8c 20 00\n48 83 7c 24 20 00\n74 17\n48 8d 74 24 20\nba 01 00 00 00\nb9 01 00 00 00\n48 89 df\ne8 7b 07 00 00\n48 83 7c 24 08 00\n74 17\n48 8d 74 24 08\nba 01 00 00 00\nb9 02 00 00 00\n4c 89 f7\ne8 5c 07 00 00\n48 83 7c 24 20 00\n0f 84 85 02 00 00\n48 8b 44 24 08\n48 85 c0\n0f 84 77 02 00 00\n4c 8d 7c 24 20\n4c 8d 64 24 08\n0f 1f 84 00 00 00 00 00\n48 8b 44 24 30\n48 8b 38\n48 8b 44 24 18\n48 8b 30\n48 8b 15 d9 8a 20 00\n48 8b 0d da 8a 20 00\ne8 2d 07 00 00\n85 c0\n0f 88 95 00 00 00\n74 33\n80 3d a9 8b 20 00 00\n74 12\n48 8b 44 24 18\n48 8b 30\nbf 68 b3 60 00\ne8 e8 05 00 00\nba 01 00 00 00\nb9 02 00 00 00\n4c 89 f7\n4c 89 e6\ne9 8e 00 00 00\n31 d2\nb9 01 00 00 00\n48 89 df\n4c 89 fe\ne8 be 06 00 00\n84 c0\n0f 84 8e 00 00 00\n48 8b 44 24 20\n48 8b 4c 24 30\n48 8b 7c c1 f8\n48 8b 44 24 18\n48 8b 30\n48 8b 15 58 8a 20 00\n48 8b 0d 59 8a 20 00\ne8 ac 06 00 00\n85 c0\n74 b8\nc7 44 24 44 00 00 00 00\neb 6e\n80 3d 15 8b 20 00 00\n74 12\n48 8b 44 24 30\n48 8b 38\nbe 68 b3 60 00\ne8 55 05 00 00\nba 01 00 00 00\nb9 01 00 00 00\n48 89 df\n4c 89 fe\ne8 40 06 00 00\nc6 05 db 8a 20 00 01\n48 83 7c 24 20 00\n0f 85 54 01 00 00\ne9 5d 01 00 00\n48 ff 44 24 20\nb0 01\n89 44 24 44\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n31 d2\nb9 02 00 00 00\n4c 89 f7\n4c 89 e6\ne8 fe 05 00 00\n84 c0\n74 40\n48 8b 44 24 30\n48 8b 38\n48 8b 44 24 08\n48 8b 4c 24 18\n48 8b 74 c1 f8\n48 8b 15 9c 89 20 00\n48 8b 0d 9d 89 20 00\ne8 f0 05 00 00\n85 c0\n74 bc\nc7 44 24 40 00 00 00 00\n48 83 7c 24 20 01\n75 15\neb 71\n48 ff 44 24 08\nb0 01\n89 44 24 40\n48 83 7c 24 20 01\n74 5e\n8a 05 42 8a 20 00\n34 01\na8 01\n75 52\n45 31 ed\n0f 1f 84 00 00 00 00 00\n48 83 7c 24 08 01\n74 2f\n31 ed\n66 0f 1f 44 00 00\n48 8b 44 24 30\n4a 8b 3c e8\n48 8b 44 24 18\n48 8b 34 e8\ne8 69 04 00 00\n48 ff c5\n48 8b 44 24 08\n48 ff c8\n48 39 c5\n72 d9\n49 ff c5\n48 8b 44 24 20\n48 ff c8\n49 39 c5\n72 b9\n80 7c 24 44 00\n74 04\n31 c0\neb 24\n48 8b 44 24 20\n48 8b 4c 24 30\n48 8b 11\n48 8b 74 c1 f8\n48 89 31\n48 8b 4c 24 30\n48 89 54 c1 f8\nb8 01 00 00 00\n48 89 44 24 20\n80 7c 24 40 00\n74 04\n31 c0\neb 24\n48 8b 44 24 08\n48 8b 4c 24 18\n48 8b 11\n48 8b 74 c1 f8\n48 89 31\n48 8b 4c 24 18\n48 89 54 c1 f8\nb8 01 00 00 00\n48 89 44 24 08\n48 83 7c 24 20 00\n74 0e\n48 8b 44 24 08\n48 85 c0\n0f 85 9b fd ff ff\n48 c7 44 24 38 00 00 00 00\n83 3d 63 89 20 00 02\n75 04\n31 ed\neb 18\n80 3d 51 89 20 00 00\n0f 94 c0\n80 3d 48 89 20 00 00\n40 0f 94 c5\n40 08 c5\n8a 05 43 89 20 00\n84 c0\n0f 94 c1\n40 f6 d5\n48 83 7c 24 20 00\n74 77\n40 20 e9\n75 72\n84 c0\n74 12\n48 8b 44 24 30\n48 8b 38\nbe 68 b3 60 00\ne8 6c 03 00 00\n48 83 7c 24 08 00\n74 07\nc6 05 ff 88 20 00 01\n4c 8d 7c 24 38\n0f 1f 84 00 00 00 00 00\nba 01 00 00 00\n48 89 df\n4c 89 fe\ne8 30 05 00 00\n84 c0\n74 2c\n80 3d e1 88 20 00 00\n74 0f\n48 8b 7c 24 38\nbe 68 b3 60 00\ne8 24 03 00 00\n80 3d c0 88 20 00 00\n74 cb\n0f b6 05 c0 88 20 00\n84 c0\n75 c0\n8a 05 b7 88 20 00\n84 c0\n0f 94 c1\n48 83 7c 24 08 00\n74 7d\n40 20 cd\n75 78\n84 c0\n74 12\n48 8b 44 24 18\n48 8b 30\nbf 68 b3 60 00\ne8 e2 02 00 00\n48 83 7c 24 20 00\n74 07\nc6 05 75 88 20 00 01\n48 8d 5c 24 38\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\nba 02 00 00 00\n4c 89 f7\n48 89 de\ne8 a0 04 00 00\n84 c0\n74 2c\n80 3d 52 88 20 00 00\n74 0f\n48 8b 74 24 38\nbf 68 b3 60 00\ne8 94 02 00 00\n80 3d 31 88 20 00 00\n74 cb\n0f b6 05 31 88 20 00\n84 c0\n75 c0\n48 8b 5c 24 38\n48 89 df\ne8 33 00 00 00\n48 89 df\ne8 6b e9 ff ff\n48 8d 7c 24 20\ne8 51 05 00 00\n48 8d 7c 24 08\ne8 47 05 00 00\n48 83 c4 48\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p845
S'.text:00000000004025b0\n.text:00000000004025b1\n.text:00000000004025b3\n.text:00000000004025b5\n.text:00000000004025b7\n.text:00000000004025b9\n.text:00000000004025ba\n.text:00000000004025be\n.text:00000000004025c1\n.text:00000000004025c4\n.text:00000000004025c9\n.text:00000000004025ce\n.text:00000000004025d3\n.text:00000000004025d6\n.text:00000000004025db\n.text:00000000004025e0\n.text:00000000004025e3\n.text:00000000004025e8\n.text:00000000004025ed\n.text:00000000004025f0\n.text:00000000004025f3\n.text:00000000004025f8\n.text:00000000004025fd\n.text:0000000000402600\n.text:0000000000402605\n.text:000000000040260a\n.text:000000000040260d\n.text:0000000000402610\n.text:0000000000402615\n.text:000000000040261c\n.text:000000000040261e\n.text:0000000000402624\n.text:0000000000402626\n.text:000000000040262b\n.text:000000000040262e\n.text:0000000000402632\n.text:0000000000402634\n.text:0000000000402636\n.text:000000000040263d\n.text:0000000000402643\n.text:0000000000402645\n.text:000000000040264a\n.text:000000000040264d\n.text:0000000000402651\n.text:0000000000402653\n.text:0000000000402655\n.text:000000000040265c\n.text:0000000000402663\n.text:0000000000402669\n.text:000000000040266f\n.text:0000000000402671\n.text:0000000000402676\n.text:0000000000402679\n.text:000000000040267f\n.text:0000000000402681\n.text:0000000000402683\n.text:0000000000402689\n.text:000000000040268b\n.text:0000000000402690\n.text:0000000000402696\n.text:0000000000402698\n.text:000000000040269d\n.text:00000000004026a0\n.text:00000000004026a2\n.text:00000000004026a7\n.text:00000000004026ac\n.text:00000000004026af\n.text:00000000004026b6\n.text:00000000004026bc\n.text:00000000004026be\n.text:00000000004026c3\n.text:00000000004026c8\n.text:00000000004026cd\n.text:00000000004026d0\n.text:00000000004026d5\n.text:00000000004026db\n.text:00000000004026dd\n.text:00000000004026e2\n.text:00000000004026e7\n.text:00000000004026ec\n.text:00000000004026ef\n.text:00000000004026f4\n.text:00000000004026fa\n.text:0000000000402700\n.text:0000000000402705\n.text:0000000000402708\n.text:000000000040270e\n.text:0000000000402713\n.text:0000000000402718\n.text:0000000000402720\n.text:0000000000402725\n.text:0000000000402728\n.text:000000000040272d\n.text:0000000000402730\n.text:0000000000402737\n.text:000000000040273e\n.text:0000000000402743\n.text:0000000000402745\n.text:000000000040274b\n.text:000000000040274d\n.text:0000000000402754\n.text:0000000000402756\n.text:000000000040275b\n.text:000000000040275e\n.text:0000000000402763\n.text:0000000000402768\n.text:000000000040276d\n.text:0000000000402772\n.text:0000000000402775\n.text:0000000000402778\n.text:0000000000402780\n.text:0000000000402782\n.text:0000000000402787\n.text:000000000040278a\n.text:000000000040278d\n.text:0000000000402792\n.text:0000000000402794\n.text:000000000040279a\n.text:000000000040279f\n.text:00000000004027a4\n.text:00000000004027a9\n.text:00000000004027ae\n.text:00000000004027b1\n.text:00000000004027b8\n.text:00000000004027bf\n.text:00000000004027c4\n.text:00000000004027c6\n.text:00000000004027c8\n.text:00000000004027d0\n.text:00000000004027e0\n.text:00000000004027e7\n.text:00000000004027e9\n.text:00000000004027ee\n.text:00000000004027f1\n.text:00000000004027f6\n.text:00000000004027fb\n.text:0000000000402800\n.text:0000000000402805\n.text:0000000000402808\n.text:000000000040280b\n.text:0000000000402810\n.text:0000000000402817\n.text:000000000040281d\n.text:0000000000402823\n.text:0000000000402828\n.text:000000000040282d\n.text:000000000040282f\n.text:0000000000402833\n.text:0000000000402840\n.text:0000000000402842\n.text:0000000000402847\n.text:000000000040284a\n.text:000000000040284d\n.text:0000000000402852\n.text:0000000000402854\n.text:0000000000402856\n.text:000000000040285b\n.text:000000000040285e\n.text:0000000000402863\n.text:0000000000402868\n.text:000000000040286d\n.text:0000000000402874\n.text:000000000040287b\n.text:0000000000402880\n.text:0000000000402882\n.text:0000000000402884\n.text:000000000040288c\n.text:0000000000402892\n.text:0000000000402894\n.text:0000000000402896\n.text:000000000040289b\n.text:000000000040289d\n.text:00000000004028a1\n.text:00000000004028a7\n.text:00000000004028a9\n.text:00000000004028af\n.text:00000000004028b1\n.text:00000000004028b3\n.text:00000000004028b5\n.text:00000000004028b8\n.text:00000000004028c0\n.text:00000000004028c6\n.text:00000000004028c8\n.text:00000000004028ca\n.text:00000000004028d0\n.text:00000000004028d5\n.text:00000000004028d9\n.text:00000000004028de\n.text:00000000004028e2\n.text:00000000004028e7\n.text:00000000004028ea\n.text:00000000004028ef\n.text:00000000004028f2\n.text:00000000004028f5\n.text:00000000004028f7\n.text:00000000004028fa\n.text:00000000004028ff\n.text:0000000000402902\n.text:0000000000402905\n.text:0000000000402907\n.text:000000000040290c\n.text:000000000040290e\n.text:0000000000402910\n.text:0000000000402912\n.text:0000000000402917\n.text:000000000040291c\n.text:000000000040291f\n.text:0000000000402924\n.text:0000000000402927\n.text:000000000040292c\n.text:0000000000402931\n.text:0000000000402936\n.text:000000000040293b\n.text:0000000000402940\n.text:0000000000402942\n.text:0000000000402944\n.text:0000000000402946\n.text:000000000040294b\n.text:0000000000402950\n.text:0000000000402953\n.text:0000000000402958\n.text:000000000040295b\n.text:0000000000402960\n.text:0000000000402965\n.text:000000000040296a\n.text:000000000040296f\n.text:0000000000402975\n.text:0000000000402977\n.text:000000000040297c\n.text:000000000040297f\n.text:0000000000402985\n.text:000000000040298e\n.text:0000000000402995\n.text:0000000000402997\n.text:0000000000402999\n.text:000000000040299b\n.text:00000000004029a2\n.text:00000000004029a5\n.text:00000000004029ac\n.text:00000000004029b0\n.text:00000000004029b3\n.text:00000000004029b9\n.text:00000000004029bb\n.text:00000000004029be\n.text:00000000004029c1\n.text:00000000004029c7\n.text:00000000004029c9\n.text:00000000004029cc\n.text:00000000004029ce\n.text:00000000004029d0\n.text:00000000004029d2\n.text:00000000004029d7\n.text:00000000004029da\n.text:00000000004029df\n.text:00000000004029e4\n.text:00000000004029ea\n.text:00000000004029ec\n.text:00000000004029f3\n.text:00000000004029f8\n.text:0000000000402a00\n.text:0000000000402a05\n.text:0000000000402a08\n.text:0000000000402a0b\n.text:0000000000402a10\n.text:0000000000402a12\n.text:0000000000402a14\n.text:0000000000402a1b\n.text:0000000000402a1d\n.text:0000000000402a22\n.text:0000000000402a27\n.text:0000000000402a2c\n.text:0000000000402a33\n.text:0000000000402a35\n.text:0000000000402a3c\n.text:0000000000402a3e\n.text:0000000000402a40\n.text:0000000000402a46\n.text:0000000000402a48\n.text:0000000000402a4b\n.text:0000000000402a51\n.text:0000000000402a53\n.text:0000000000402a56\n.text:0000000000402a58\n.text:0000000000402a5a\n.text:0000000000402a5c\n.text:0000000000402a61\n.text:0000000000402a64\n.text:0000000000402a69\n.text:0000000000402a6e\n.text:0000000000402a74\n.text:0000000000402a76\n.text:0000000000402a7d\n.text:0000000000402a82\n.text:0000000000402a90\n.text:0000000000402a95\n.text:0000000000402a98\n.text:0000000000402a9b\n.text:0000000000402aa0\n.text:0000000000402aa2\n.text:0000000000402aa4\n.text:0000000000402aab\n.text:0000000000402aad\n.text:0000000000402ab2\n.text:0000000000402ab7\n.text:0000000000402abc\n.text:0000000000402ac3\n.text:0000000000402ac5\n.text:0000000000402acc\n.text:0000000000402ace\n.text:0000000000402ad0\n.text:0000000000402ad5\n.text:0000000000402ad8\n.text:0000000000402add\n.text:0000000000402ae0\n.text:0000000000402ae5\n.text:0000000000402aea\n.text:0000000000402aef\n.text:0000000000402af4\n.text:0000000000402af9\n.text:0000000000402afd\n.text:0000000000402afe\n.text:0000000000402b00\n.text:0000000000402b02\n.text:0000000000402b04\n.text:0000000000402b06\n.text:0000000000402b07\n'
p846
tp847
sS'bindtextdomain'
p848
(S'\n__stdcall bindtextdomain()\n'
p849
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_0060b080)();\u000a  return;\u000a}\u000a\u000a
p850
S'JMP qword ptr [0x0060b080]\n'
p851
S'ff 25 7a 9b 20 00\n'
p852
S'.plt:0000000000401500\n'
p853
tp854
sS'set_char_quoting'
p855
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p856
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p857
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x60b3e0\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p858
S'89 f1\n48 85 ff\nbe e0 b3 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p859
S'.text:00000000004038e0\n.text:00000000004038e2\n.text:00000000004038e5\n.text:00000000004038ea\n.text:00000000004038ee\n.text:00000000004038f0\n.text:00000000004038f3\n.text:00000000004038f7\n.text:00000000004038fc\n.text:00000000004038ff\n.text:0000000000403901\n.text:0000000000403903\n.text:0000000000403906\n.text:0000000000403908\n.text:000000000040390b\n.text:000000000040390d\n.text:0000000000403910\n.text:0000000000403915\n'
p860
tp861
sS'quotearg_n'
p862
(S'\n__stdcall quotearg_n(char * arg)\n'
p863
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p864
S'MOV RDX,-0x1\nMOV ECX,0x60b3e0\nJMP 0x004047d0\n'
p865
S'48 c7 c2 ff ff ff ff\nb9 e0 b3 60 00\neb 02\n'
p866
S'.text:00000000004047c0\n.text:00000000004047c7\n.text:00000000004047cc\n'
p867
tp868
sS'close_stream'
p869
(S'\n__stdcall close_stream(FILE * stream)\n'
p870
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p871
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x004014b0\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00401610\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00405c60\nTEST EBP,EBP\nJZ 0x004060eb\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x0040610f\nCALL 0x00401470\nMOV dword ptr [RAX],0x0\nJMP 0x0040610f\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x0040610f\nTEST CL,CL\nJNZ 0x0040610f\nCALL 0x00401470\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p872
S'55\n41 56\n53\n48 89 fb\ne8 f4 b3 ff ff\n49 89 c6\n48 89 df\ne8 49 b5 ff ff\n89 c5\n48 89 df\ne8 8f fb ff ff\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 8d b3 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 6e b3 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p873
S'.text:00000000004060b0\n.text:00000000004060b1\n.text:00000000004060b3\n.text:00000000004060b4\n.text:00000000004060b7\n.text:00000000004060bc\n.text:00000000004060bf\n.text:00000000004060c2\n.text:00000000004060c7\n.text:00000000004060c9\n.text:00000000004060cc\n.text:00000000004060d1\n.text:00000000004060d3\n.text:00000000004060d5\n.text:00000000004060da\n.text:00000000004060dc\n.text:00000000004060de\n.text:00000000004060e3\n.text:00000000004060e9\n.text:00000000004060eb\n.text:00000000004060ed\n.text:00000000004060f0\n.text:00000000004060f2\n.text:00000000004060f4\n.text:00000000004060f7\n.text:00000000004060f9\n.text:00000000004060fb\n.text:00000000004060fd\n.text:0000000000406102\n.text:0000000000406104\n.text:0000000000406107\n.text:000000000040610c\n.text:000000000040610f\n.text:0000000000406111\n.text:0000000000406112\n.text:0000000000406114\n.text:0000000000406115\n'
p874
tp875
sS'quotearg_colon_mem'
p876
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p877
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p878
S'MOV EDX,0x3a\nJMP 0x00404ae0\n'
p879
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p880
S'.text:0000000000404b70\n.text:0000000000404b75\n'
p881
tp882
sS'strcoll'
p883
(S'\n__stdcall strcoll(char * __s1, char * __s2)\n'
p884
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcoll(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcoll_0060b158)();\u000a  return iVar1;\u000a}\u000a\u000a
p885
S'JMP qword ptr [0x0060b158]\n'
p886
S'ff 25 a2 9a 20 00\n'
p887
S'.plt:00000000004016b0\n'
p888
tp889
sS'xcalloc'
p890
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p891
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p892
S'PUSH RAX\nCALL 0x00405c10\nTEST RAX,RAX\nJZ 0x0040572d\nPOP RCX\nRET\nCALL 0x00405790\n'
p893
S'50\ne8 ea 04 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p894
S'.text:0000000000405720\n.text:0000000000405721\n.text:0000000000405726\n.text:0000000000405729\n.text:000000000040572b\n.text:000000000040572c\n.text:000000000040572d\n'
p895
tp896
sS'memcoll0'
p897
(S'\n__stdcall memcoll0(char * s1, size_t s1size, char * s2, size_t s2size)\n'
p898
V\u000aint memcoll0(char *s1,size_t s1size,char *s2,size_t s2size)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  \u000a  if (s1size == s2size) {\u000a    iVar1 = memcmp(s1,s2,s1size);\u000a    if (iVar1 == 0) {\u000a      piVar2 = __errno_location();\u000a      *piVar2 = 0;\u000a      return 0;\u000a    }\u000a  }\u000a  iVar1 = strcoll_loop(s1,s1size,s2,s2size);\u000a  return iVar1;\u000a}\u000a\u000a
p899
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RCX\nMOV R14,RDX\nMOV RBX,RSI\nMOV R12,RDI\nCMP RBX,R15\nJNZ 0x0040657b\nMOV RDI,R12\nMOV RSI,R14\nMOV RDX,RBX\nCALL 0x004015f0\nTEST EAX,EAX\nJZ 0x00406597\nMOV RDI,R12\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004064d0\nCALL 0x00401470\nMOV dword ptr [RAX],0x0\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p900
S'41 57\n41 56\n41 54\n53\n50\n49 89 cf\n49 89 d6\n48 89 f3\n49 89 fc\n4c 39 fb\n75 12\n4c 89 e7\n4c 89 f6\n48 89 da\ne8 79 b0 ff ff\n85 c0\n74 1c\n4c 89 e7\n48 89 de\n4c 89 f2\n4c 89 f9\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 39 ff ff ff\ne8 d4 ae ff ff\nc7 00 00 00 00 00\n31 c0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p901
S'.text:0000000000406550\n.text:0000000000406552\n.text:0000000000406554\n.text:0000000000406556\n.text:0000000000406557\n.text:0000000000406558\n.text:000000000040655b\n.text:000000000040655e\n.text:0000000000406561\n.text:0000000000406564\n.text:0000000000406567\n.text:0000000000406569\n.text:000000000040656c\n.text:000000000040656f\n.text:0000000000406572\n.text:0000000000406577\n.text:0000000000406579\n.text:000000000040657b\n.text:000000000040657e\n.text:0000000000406581\n.text:0000000000406584\n.text:0000000000406587\n.text:000000000040658b\n.text:000000000040658c\n.text:000000000040658e\n.text:0000000000406590\n.text:0000000000406592\n.text:0000000000406597\n.text:000000000040659c\n.text:00000000004065a2\n.text:00000000004065a4\n.text:00000000004065a8\n.text:00000000004065a9\n.text:00000000004065ab\n.text:00000000004065ad\n.text:00000000004065af\n'
p902
tp903
sS'check_order'
p904
(S'\n__stdcall check_order(line * prev, line * current)\n'
p905
V\u000avoid check_order(line *prev,line *current)\u000a\u000a{\u000a  size_t sVar1;\u000a  int iVar2;\u000a  undefined8 uVar3;\u000a  size_t *psVar4;\u000a  int in_EDX;\u000a  long lVar5;\u000a  ulong uVar6;\u000a  ulong uVar7;\u000a  bool bVar8;\u000a  \u000a  if (((check_input_order == CHECK_ORDER_ENABLED) ||\u000a      ((check_input_order != CHECK_ORDER_DISABLED && (seen_unpairable == 1)))) &&\u000a     (lVar5 = (long)in_EDX, (&seen_unpairable)[lVar5] == 0)) {\u000a    psVar4 = &join_field_2;\u000a    if (in_EDX == 1) {\u000a      psVar4 = &join_field_1;\u000a    }\u000a    iVar2 = keycmp(prev,current,*psVar4,*psVar4);\u000a    if (0 < iVar2) {\u000a      sVar1 = (current->buf).length;\u000a      if (sVar1 == 0) {\u000a        uVar7 = 0;\u000a      }\u000a      else {\u000a        uVar7 = sVar1 - 1;\u000a        if ((current->buf).buffer[sVar1 - 1] != '\u005cn') {\u000a          uVar7 = sVar1;\u000a        }\u000a      }\u000a      bVar8 = check_input_order == CHECK_ORDER_ENABLED;\u000a      uVar3 = dcgettext(0,"%s:%lu: is not sorted: %.*s",5);\u000a      uVar6 = 0x7fffffff;\u000a      if (uVar7 < 0x7fffffff) {\u000a        uVar6 = uVar7 & 0xffffffff;\u000a      }\u000a      error((ulong)bVar8,0,uVar3,*(undefined8 *)(&ignore_case + lVar5 * 8),prevline[lVar5 + 1],uVar6\u000a            ,(current->buf).buffer);\u000a      (&seen_unpairable)[lVar5] = 1;\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p906
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV EAX,dword ptr [0x0060b2f8]\nCMP EAX,0x1\nJZ 0x0040336b\nCMP EAX,0x2\nJZ 0x00403422\nCMP byte ptr [0x0060b2f2],0x1\nJNZ 0x00403422\nMOVSXD RBP,EDX\nCMP byte ptr [0x60b2f2 + RBP],0x0\nJNZ 0x00403422\nCMP EDX,0x1\nMOV EAX,0x60b210\nMOV ECX,0x60b218\nCMOVZ RCX,RAX\nMOV RDX,qword ptr [RCX]\nMOV RSI,RBX\nMOV RCX,RDX\nCALL 0x00402e70\nTEST EAX,EAX\nJLE 0x00403422\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nJZ 0x004033be\nMOV RCX,qword ptr [RBX + 0x10]\nLEA R15,[RAX + -0x1]\nCMP byte ptr [RCX + RAX*0x1 + -0x1],0xa\nCMOVNZ R15,RAX\nJMP 0x004033c1\nXOR R15D,R15D\nXOR R14D,R14D\nCMP dword ptr [0x0060b2f8],0x1\nSETZ R14B\nXOR EDI,EDI\nMOV ESI,0x407835\nMOV EDX,0x5\nCALL 0x00401510\nMOV RDX,RAX\nCMP R15,0x7fffffff\nMOV RCX,qword ptr [0x60b308 + RBP*0x8]\nMOV R8,qword ptr [0x60b3a8 + RBP*0x8]\nMOV R9D,0x7fffffff\nCMOVC R9D,R15D\nMOV RAX,qword ptr [RBX + 0x10]\nMOV qword ptr [RSP],RAX\nMOV ESI,0x0\nXOR EAX,EAX\nMOV EDI,R14D\nCALL 0x00401730\nMOV byte ptr [0x60b2f2 + RBP],0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p907
S'55\n41 57\n41 56\n53\n50\n48 89 f3\n8b 05 a8 7f 20 00\n83 f8 01\n74 16\n83 f8 02\n0f 84 c4 00 00 00\n80 3d 8d 7f 20 00 01\n0f 85 b7 00 00 00\n48 63 ea\n80 bd f2 b2 60 00 00\n0f 85 a7 00 00 00\n83 fa 01\nb8 10 b2 60 00\nb9 18 b2 60 00\n48 0f 44 c8\n48 8b 11\n48 89 de\n48 89 d1\ne8 d6 fa ff ff\n85 c0\n0f 8e 80 00 00 00\n48 8b 43 08\n48 85 c0\n74 13\n48 8b 4b 10\n4c 8d 78 ff\n80 7c 01 ff 0a\n4c 0f 45 f8\neb 03\n45 31 ff\n45 31 f6\n83 3d 2d 7f 20 00 01\n41 0f 94 c6\n31 ff\nbe 35 78 40 00\nba 05 00 00 00\ne8 30 e1 ff ff\n48 89 c2\n49 81 ff ff ff ff 7f\n48 8b 0c ed 08 b3 60 00\n4c 8b 04 ed a8 b3 60 00\n41 b9 ff ff ff 7f\n45 0f 42 cf\n48 8b 43 10\n48 89 04 24\nbe 00 00 00 00\n31 c0\n44 89 f7\ne8 15 e3 ff ff\nc6 85 f2 b2 60 00 01\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p908
S'.text:0000000000403340\n.text:0000000000403341\n.text:0000000000403343\n.text:0000000000403345\n.text:0000000000403346\n.text:0000000000403347\n.text:000000000040334a\n.text:0000000000403350\n.text:0000000000403353\n.text:0000000000403355\n.text:0000000000403358\n.text:000000000040335e\n.text:0000000000403365\n.text:000000000040336b\n.text:000000000040336e\n.text:0000000000403375\n.text:000000000040337b\n.text:000000000040337e\n.text:0000000000403383\n.text:0000000000403388\n.text:000000000040338c\n.text:000000000040338f\n.text:0000000000403392\n.text:0000000000403395\n.text:000000000040339a\n.text:000000000040339c\n.text:00000000004033a2\n.text:00000000004033a6\n.text:00000000004033a9\n.text:00000000004033ab\n.text:00000000004033af\n.text:00000000004033b3\n.text:00000000004033b8\n.text:00000000004033bc\n.text:00000000004033be\n.text:00000000004033c1\n.text:00000000004033c4\n.text:00000000004033cb\n.text:00000000004033cf\n.text:00000000004033d1\n.text:00000000004033d6\n.text:00000000004033db\n.text:00000000004033e0\n.text:00000000004033e3\n.text:00000000004033ea\n.text:00000000004033f2\n.text:00000000004033fa\n.text:0000000000403400\n.text:0000000000403404\n.text:0000000000403408\n.text:000000000040340c\n.text:0000000000403411\n.text:0000000000403413\n.text:0000000000403416\n.text:000000000040341b\n.text:0000000000403422\n.text:0000000000403426\n.text:0000000000403427\n.text:0000000000403429\n.text:000000000040342b\n.text:000000000040342c\n'
p909
tp910
sS'clear_ungetc_buffer_preserving_position'
p911
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p912
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p913
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00405ed7\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00405ef0\n'
p914
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p915
S'.text:0000000000405ed0\n.text:0000000000405ed4\n.text:0000000000405ed6\n.text:0000000000405ed7\n.text:0000000000405ed9\n.text:0000000000405ede\n'
p916
tp917
sS'xnmalloc'
p918
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p919
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p920
S'MOV RAX,RDI\nMUL RSI\nJO 0x004055f1\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00405600\nPUSH RAX\nCALL 0x00405790\n'
p921
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p922
S'.text:00000000004055e0\n.text:00000000004055e3\n.text:00000000004055e6\n.text:00000000004055e8\n.text:00000000004055ec\n.text:00000000004055ef\n.text:00000000004055f1\n.text:00000000004055f2\n'
p923
tp924
sS'quotearg_char'
p925
(S'\n__stdcall quotearg_char(char * arg)\n'
p926
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p927
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00404ae0\n'
p928
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p929
S'.text:0000000000404b50\n.text:0000000000404b52\n.text:0000000000404b59\n.text:0000000000404b5b\n'
p930
tp931
sS'string_to_join_field'
p932
(S'\n__stdcall string_to_join_field(char * str)\n'
p933
V\u000asize_t string_to_join_field(char *str)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  long in_RAX;\u000a  undefined8 uVar2;\u000a  char *pcVar3;\u000a  long local_18;\u000a  \u000a  local_18 = in_RAX;\u000a  sVar1 = xstrtoul(str,(char **)0x0,(ulong *)0xa,(char *)&local_18);\u000a  if (sVar1 == LONGINT_OVERFLOW) {\u000a    local_18 = -1;\u000a  }\u000a  else {\u000a    if ((sVar1 != LONGINT_OK) || (local_18 == 0)) {\u000a      uVar2 = dcgettext(0,"invalid field number: %s",5);\u000a      pcVar3 = quote(str);\u000a      error(1,0,uVar2,pcVar3);\u000a    }\u000a  }\u000a  return local_18 - 1;\u000a}\u000a\u000a
p934
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV RCX,RSP\nXOR ESI,ESI\nMOV EDX,0xa\nMOV R8D,0x407773\nCALL 0x00405930\nCMP EAX,0x1\nJNZ 0x004023db\nMOV qword ptr [RSP],-0x1\nJMP 0x00402418\nTEST EAX,EAX\nJNZ 0x004023e8\nMOV RAX,qword ptr [RSP]\nTEST RAX,RAX\nJNZ 0x00402418\nXOR EDI,EDI\nMOV ESI,0x4074d3\nMOV EDX,0x5\nCALL 0x00401510\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00404cc0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R14\nCALL 0x00401730\nMOV RAX,qword ptr [RSP]\nDEC RAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p935
S'41 56\n53\n50\n48 89 fb\n48 89 e1\n31 f6\nba 0a 00 00 00\n41 b8 73 77 40 00\ne8 64 35 00 00\n83 f8 01\n75 0a\n48 c7 04 24 ff ff ff ff\neb 3d\n85 c0\n75 09\n48 8b 04 24\n48 85 c0\n75 30\n31 ff\nbe d3 74 40 00\nba 05 00 00 00\ne8 17 f1 ff ff\n49 89 c6\n48 89 df\ne8 bc 28 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n4c 89 f2\ne8 18 f3 ff ff\n48 8b 04 24\n48 ff c8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p936
S'.text:00000000004023b0\n.text:00000000004023b2\n.text:00000000004023b3\n.text:00000000004023b4\n.text:00000000004023b7\n.text:00000000004023ba\n.text:00000000004023bc\n.text:00000000004023c1\n.text:00000000004023c7\n.text:00000000004023cc\n.text:00000000004023cf\n.text:00000000004023d1\n.text:00000000004023d9\n.text:00000000004023db\n.text:00000000004023dd\n.text:00000000004023df\n.text:00000000004023e3\n.text:00000000004023e6\n.text:00000000004023e8\n.text:00000000004023ea\n.text:00000000004023ef\n.text:00000000004023f4\n.text:00000000004023f9\n.text:00000000004023fc\n.text:00000000004023ff\n.text:0000000000402404\n.text:0000000000402407\n.text:000000000040240c\n.text:000000000040240e\n.text:0000000000402410\n.text:0000000000402413\n.text:0000000000402418\n.text:000000000040241c\n.text:000000000040241f\n.text:0000000000402423\n.text:0000000000402424\n.text:0000000000402426\n'
p937
tp938
sS'malloc'
p939
(S'\n__stdcall malloc(size_t __size)\n'
p940
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_0060b138)();\u000a  return pvVar1;\u000a}\u000a\u000a
p941
S'JMP qword ptr [0x0060b138]\n'
p942
S'ff 25 c2 9a 20 00\n'
p943
S'.plt:0000000000401670\n'
p944
tp945
sS'c_tolower'
p946
(S'\n__stdcall c_tolower()\n'
p947
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p948
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p949
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p950
S'.text:0000000000406090\n.text:0000000000406093\n.text:0000000000406096\n.text:0000000000406099\n.text:000000000040609c\n'
p951
tp952
sS'getopt_long'
p953
(S'\n__stdcall getopt_long()\n'
p954
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_0060b0a0)();\u000a  return;\u000a}\u000a\u000a
p955
S'JMP qword ptr [0x0060b0a0]\n'
p956
S'ff 25 5a 9b 20 00\n'
p957
S'.plt:0000000000401540\n'
p958
tp959
sS'quotearg_style'
p960
(S'\n__stdcall quotearg_style(char * arg)\n'
p961
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p962
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x004049c0\n'
p963
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p964
S'.text:0000000000404aa0\n.text:0000000000404aa3\n.text:0000000000404aa5\n.text:0000000000404aa7\n.text:0000000000404aa9\n.text:0000000000404aac\n'
p965
tp966
sS'initseq'
p967
(S'\n__stdcall initseq(seq * seq)\n'
p968
V\u000avoid initseq(seq *seq)\u000a\u000a{\u000a  *(undefined4 *)&seq->count = 0;\u000a  *(undefined4 *)((long)&seq->count + 4) = 0;\u000a  *(undefined4 *)&seq->alloc = 0;\u000a  *(undefined4 *)((long)&seq->alloc + 4) = 0;\u000a  seq->lines = (line **)0x0;\u000a  return;\u000a}\u000a\u000a
p969
S'XORPS XMM0,XMM0\nMOVUPS xmmword ptr [RDI],XMM0\nMOV qword ptr [RDI + 0x10],0x0\nRET\n'
p970
S'0f 57 c0\n0f 11 07\n48 c7 47 10 00 00 00 00\nc3\n'
p971
S'.text:0000000000402cb0\n.text:0000000000402cb3\n.text:0000000000402cb6\n.text:0000000000402cbe\n'
p972
tp973
sS'emit_try_help'
p974
(S'\n__stdcall emit_try_help()\n'
p975
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p976
S'PUSH RBX\nMOV RBX,qword ptr [0x0060b2e0]\nXOR EDI,EDI\nMOV ESI,0x4075b1\nMOV EDX,0x5\nCALL 0x00401510\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060b3d0]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x004017b0\n'
p977
S'53\n48 8b 1d 68 98 20 00\n31 ff\nbe b1 75 40 00\nba 05 00 00 00\ne8 87 fa ff ff\n48 89 c2\n48 8b 0d 3d 99 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 0d fd ff ff\n'
p978
S'.text:0000000000401a70\n.text:0000000000401a71\n.text:0000000000401a78\n.text:0000000000401a7a\n.text:0000000000401a7f\n.text:0000000000401a84\n.text:0000000000401a89\n.text:0000000000401a8c\n.text:0000000000401a93\n.text:0000000000401a98\n.text:0000000000401a9a\n.text:0000000000401a9d\n.text:0000000000401a9e\n'
p979
tp980
sS'strrchr'
p981
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p982
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_0060b0b8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p983
S'JMP qword ptr [0x0060b0b8]\n'
p984
S'ff 25 42 9b 20 00\n'
p985
S'.plt:0000000000401570\n'
p986
tp987
sS'quotearg_alloc_mem'
p988
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p989
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p990
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x60b3e0\nCMOVNZ R12,RCX\nCALL 0x00401470\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x004039f0\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x004056d0\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x004039f0\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x0040471a\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p991
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc e0 b3 60 00\n4c 0f 45 e1\ne8 f8 cd ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 01 10 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p992
S'.text:0000000000404640\n.text:0000000000404641\n.text:0000000000404643\n.text:0000000000404645\n.text:0000000000404647\n.text:0000000000404649\n.text:000000000040464a\n.text:000000000040464e\n.text:0000000000404651\n.text:0000000000404656\n.text:0000000000404659\n.text:000000000040465e\n.text:0000000000404661\n.text:0000000000404666\n.text:0000000000404669\n.text:000000000040466f\n.text:0000000000404673\n.text:0000000000404678\n.text:000000000040467d\n.text:000000000040467f\n.text:0000000000404683\n.text:0000000000404685\n.text:0000000000404688\n.text:000000000040468c\n.text:0000000000404691\n.text:0000000000404695\n.text:000000000040469a\n.text:000000000040469e\n.text:00000000004046a0\n.text:00000000004046a2\n.text:00000000004046a5\n.text:00000000004046a8\n.text:00000000004046ab\n.text:00000000004046b0\n.text:00000000004046b5\n.text:00000000004046b7\n.text:00000000004046bc\n.text:00000000004046c0\n.text:00000000004046c3\n.text:00000000004046c7\n.text:00000000004046ca\n.text:00000000004046cf\n.text:00000000004046d2\n.text:00000000004046d6\n.text:00000000004046da\n.text:00000000004046dd\n.text:00000000004046e0\n.text:00000000004046e5\n.text:00000000004046ea\n.text:00000000004046ed\n.text:00000000004046f2\n.text:00000000004046f7\n.text:00000000004046f9\n.text:00000000004046fe\n.text:0000000000404703\n.text:0000000000404707\n.text:000000000040470a\n.text:000000000040470e\n.text:0000000000404713\n.text:0000000000404715\n.text:0000000000404717\n.text:000000000040471a\n.text:000000000040471d\n.text:0000000000404721\n.text:0000000000404722\n.text:0000000000404724\n.text:0000000000404726\n.text:0000000000404728\n.text:000000000040472a\n.text:000000000040472b\n'
p993
tp994
sS'bkm_scale'
p995
(S'\n__stdcall bkm_scale(ulong * x)\n'
p996
V\u000astrtol_error bkm_scale(ulong *x)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  int in_ESI;\u000a  bool bVar3;\u000a  \u000a  uVar1 = *x;\u000a  uVar2 = (long)in_ESI * uVar1;\u000a  bVar3 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816((ulong)(long)in_ESI),0\u000a                ) < uVar1;\u000a  if (bVar3) {\u000a    uVar2 = 0xffffffffffffffff;\u000a  }\u000a  *x = uVar2;\u000a  return -(uint)bVar3 & LONGINT_OVERFLOW;\u000a}\u000a\u000a
p997
S'MOVSXD RCX,ESI\nMOV RSI,-0x1\nMOV RAX,-0x1\nXOR EDX,EDX\nDIV RCX\nMOV RDX,qword ptr [RDI]\nIMUL RCX,RDX\nCMP RAX,RDX\nCMOVC RCX,RSI\nSBB EAX,EAX\nAND EAX,0x1\nMOV qword ptr [RDI],RCX\nRET\n'
p998
S'48 63 ce\n48 c7 c6 ff ff ff ff\n48 c7 c0 ff ff ff ff\n31 d2\n48 f7 f1\n48 8b 17\n48 0f af ca\n48 39 d0\n48 0f 42 ce\n19 c0\n83 e0 01\n48 89 0f\nc3\n'
p999
S'.text:0000000000405ba0\n.text:0000000000405ba3\n.text:0000000000405baa\n.text:0000000000405bb1\n.text:0000000000405bb3\n.text:0000000000405bb6\n.text:0000000000405bb9\n.text:0000000000405bbd\n.text:0000000000405bc0\n.text:0000000000405bc4\n.text:0000000000405bc6\n.text:0000000000405bc9\n.text:0000000000405bcc\n'
p1000
tp1001
sS'memchr'
p1002
(S'\n__stdcall memchr(void * __s, int __c, size_t __n)\n'
p1003
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memchr(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memchr_0060b0f0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1004
S'JMP qword ptr [0x0060b0f0]\n'
p1005
S'ff 25 0a 9b 20 00\n'
p1006
S'.plt:00000000004015e0\n'
p1007
tp1008
sS'quotearg_style_mem'
p1009
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p1010
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1011
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00404a60\n'
p1012
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p1013
S'.text:0000000000404ac0\n.text:0000000000404ac3\n.text:0000000000404ac6\n.text:0000000000404ac8\n.text:0000000000404aca\n.text:0000000000404acc\n.text:0000000000404acf\n.text:0000000000404ad2\n'
p1014
tp1015
sS'xalloc_die'
p1016
(S'\n__stdcall xalloc_die()\n'
p1017
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x4077b3,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1018
S'PUSH RBX\nMOV EBX,dword ptr [0x0060b238]\nXOR EDI,EDI\nMOV ESI,0x40816f\nMOV EDX,0x5\nCALL 0x00401510\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x4077b3\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00401730\nCALL 0x00401460\n'
p1019
S'53\n8b 1d a1 5a 20 00\n31 ff\nbe 6f 81 40 00\nba 05 00 00 00\ne8 68 bd ff ff\n48 89 c1\n31 f6\nba b3 77 40 00\n31 c0\n89 df\ne8 75 bf ff ff\ne8 a0 bc ff ff\n'
p1020
S'.text:0000000000405790\n.text:0000000000405791\n.text:0000000000405797\n.text:0000000000405799\n.text:000000000040579e\n.text:00000000004057a3\n.text:00000000004057a8\n.text:00000000004057ab\n.text:00000000004057ad\n.text:00000000004057b2\n.text:00000000004057b4\n.text:00000000004057b6\n.text:00000000004057bb\n'
p1021
tp1022
sS'fopen_safer'
p1023
(S'\n__stdcall fopen_safer(char * file, char * mode)\n'
p1024
V\u000aFILE * fopen_safer(char *file,char *mode)\u000a\u000a{\u000a  uint uVar1;\u000a  int __fd;\u000a  int iVar2;\u000a  FILE *fp;\u000a  int *piVar3;\u000a  \u000a  fp = (FILE *)fopen(file,mode);\u000a  if (fp != (FILE *)0x0) {\u000a    uVar1 = fileno((FILE *)fp);\u000a    if (2 < uVar1) {\u000a      return fp;\u000a    }\u000a    __fd = dup_safer();\u000a    if (__fd < 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      rpl_fclose(fp);\u000a      *piVar3 = __fd;\u000a    }\u000a    else {\u000a      iVar2 = rpl_fclose(fp);\u000a      if ((iVar2 == 0) && (fp = (FILE *)fdopen(__fd,mode), fp != (FILE *)0x0)) {\u000a        return fp;\u000a      }\u000a      piVar3 = __errno_location();\u000a      iVar2 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar2;\u000a    }\u000a  }\u000a  return (FILE *)0x0;\u000a}\u000a\u000a
p1025
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nCALL 0x00401760\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040363b\nMOV RDI,RBX\nCALL 0x00401660\nCMP EAX,0x2\nJA 0x0040363d\nMOV EDI,EAX\nCALL 0x004050d0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00403623\nMOV RDI,RBX\nCALL 0x00405c60\nTEST EAX,EAX\nJNZ 0x0040360c\nMOV EDI,EBP\nMOV RSI,R14\nCALL 0x00401700\nMOV RBX,RAX\nTEST RBX,RBX\nJNZ 0x0040363d\nCALL 0x00401470\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x004015c0\nMOV dword ptr [RBX],R14D\nJMP 0x0040363b\nCALL 0x00401470\nMOV RBP,RAX\nMOV R14D,dword ptr [RBP]\nMOV RDI,RBX\nCALL 0x00405c60\nMOV dword ptr [RBP],R14D\nXOR EBX,EBX\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1026
S'55\n41 56\n53\n49 89 f6\ne8 94 e1 ff ff\n48 89 c3\n48 85 db\n74 67\n48 89 df\ne8 84 e0 ff ff\n83 f8 02\n77 5c\n89 c7\ne8 e8 1a 00 00\n89 c5\n85 ed\n78 35\n48 89 df\ne8 6a 26 00 00\n85 c0\n75 12\n89 ef\n4c 89 f6\ne8 fc e0 ff ff\n48 89 c3\n48 85 db\n75 31\ne8 5f de ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 a2 df ff ff\n44 89 33\neb 18\ne8 48 de ff ff\n48 89 c5\n44 8b 75 00\n48 89 df\ne8 29 26 00 00\n44 89 75 00\n31 db\n48 89 d8\n5b\n41 5e\n5d\nc3\n'
p1027
S'.text:00000000004035c0\n.text:00000000004035c1\n.text:00000000004035c3\n.text:00000000004035c4\n.text:00000000004035c7\n.text:00000000004035cc\n.text:00000000004035cf\n.text:00000000004035d2\n.text:00000000004035d4\n.text:00000000004035d7\n.text:00000000004035dc\n.text:00000000004035df\n.text:00000000004035e1\n.text:00000000004035e3\n.text:00000000004035e8\n.text:00000000004035ea\n.text:00000000004035ec\n.text:00000000004035ee\n.text:00000000004035f1\n.text:00000000004035f6\n.text:00000000004035f8\n.text:00000000004035fa\n.text:00000000004035fc\n.text:00000000004035ff\n.text:0000000000403604\n.text:0000000000403607\n.text:000000000040360a\n.text:000000000040360c\n.text:0000000000403611\n.text:0000000000403614\n.text:0000000000403617\n.text:0000000000403619\n.text:000000000040361e\n.text:0000000000403621\n.text:0000000000403623\n.text:0000000000403628\n.text:000000000040362b\n.text:000000000040362f\n.text:0000000000403632\n.text:0000000000403637\n.text:000000000040363b\n.text:000000000040363d\n.text:0000000000403640\n.text:0000000000403641\n.text:0000000000403643\n.text:0000000000403644\n'
p1028
tp1029
sS'quotearg_n_custom'
p1030
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p1031
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1032
S'MOV R8,-0x1\nJMP 0x00404be0\n'
p1033
S'49 c7 c0 ff ff ff ff\neb 07\n'
p1034
S'.text:0000000000404bd0\n.text:0000000000404bd7\n'
p1035
tp1036
sS'__freading'
p1037
(S'\n__stdcall __freading()\n'
p1038
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_0060b168)();\u000a  return;\u000a}\u000a\u000a
p1039
S'JMP qword ptr [0x0060b168]\n'
p1040
S'ff 25 92 9a 20 00\n'
p1041
S'.plt:00000000004016d0\n'
p1042
tp1043
sS'fputs_unlocked'
p1044
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p1045
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_0060b100)();\u000a  return iVar1;\u000a}\u000a\u000a
p1046
S'JMP qword ptr [0x0060b100]\n'
p1047
S'ff 25 fa 9a 20 00\n'
p1048
S'.plt:0000000000401600\n'
p1049
tp1050
sS'main'
p1051
(S'\n__stdcall main(char * * argv)\n'
p1052
V\u000aint main(char **argv)\u000a\u000a{\u000a  long *plVar1;\u000a  line *line;\u000a  byte *str;\u000a  int iVar2;\u000a  strtol_error sVar3;\u000a  int iVar4;\u000a  undefined8 uVar5;\u000a  _Bool *p_Var6;\u000a  long lVar7;\u000a  FILE *fp1;\u000a  uint *puVar8;\u000a  FILE *fp2;\u000a  char *pcVar9;\u000a  undefined8 extraout_RAX;\u000a  byte bVar10;\u000a  uint uVar11;\u000a  size_t val;\u000a  char **in_RSI;\u000a  size_t *var;\u000a  int operand_status [2];\u000a  int local_54;\u000a  int local_50;\u000a  int local_4c;\u000a  long local_48;\u000a  long local_40;\u000a  undefined local_38 [8];\u000a  \u000a  iVar4 = (int)argv;\u000a  local_50 = 0;\u000a  local_48 = 0;\u000a  local_4c = 0;\u000a  set_program_name(*in_RSI);\u000a  setlocale(6,"");\u000a  bindtextdomain(0x40754d,"/usr/local/share/locale");\u000a  textdomain(0x40754d);\u000a  hard_LC_COLLATE = hard_locale();\u000a  atexit(close_stdout);\u000a  atexit(free_spareline);\u000a  print_pairables = 1;\u000a  seen_unpairable = 0;\u000a  issued_disorder_warning[1] = false;\u000a  issued_disorder_warning[0] = false;\u000a  check_input_order = CHECK_ORDER_DEFAULT;\u000a  uVar5 = getopt_long();\u000a  if ((int)uVar5 != -1) {\u000a    do {\u000a      str = optarg;\u000a      local_54 = 0;\u000a      iVar2 = (int)uVar5;\u000a      switch(iVar2) {\u000a      case 1:\u000a        add_file_name(optarg,local_38,&local_48,&local_4c,&local_50);\u000a        uVar11 = tab;\u000a        break;\u000a      case 0x31:\u000a        val = string_to_join_field((char *)optarg);\u000a        var = &join_field_1;\u000a        goto LAB_00401d4c;\u000a      case 0x32:\u000a        val = string_to_join_field((char *)optarg);\u000a        var = &join_field_2;\u000aLAB_00401d4c:\u000a        set_join_field(var,val);\u000a        uVar11 = tab;\u000a        break;\u000a      case 0x65:\u000a        if ((empty_filler != (char *)0x0) &&\u000a           (iVar2 = strcmp(empty_filler,(char *)optarg), iVar2 != 0)) {\u000a          uVar5 = dcgettext(0,"conflicting empty-field replacement strings",5);\u000a          error(1,0,uVar5,uVar5);\u000a        }\u000a        empty_filler = (char *)optarg;\u000a        uVar11 = tab;\u000a        break;\u000a      case 0x69:\u000a        ignore_case = 1;\u000a        uVar11 = tab;\u000a        break;\u000a      case 0x6a:\u000a        bVar10 = *optarg;\u000a        if ((((byte)(bVar10 - 0x31) < 2) && (optarg[1] == 0)) &&\u000a           (optarg == (byte *)(in_RSI[(long)optind + -1] + 2))) {\u000a          plVar1 = (long *)((long)&local_48 + (ulong)(bVar10 == 0x32) * 4);\u000a          *(int *)plVar1 = *(int *)plVar1 + 1;\u000a          local_54 = (uint)(bVar10 == 0x32) + 1;\u000a          uVar11 = tab;\u000a        }\u000a        else {\u000a          val = string_to_join_field((char *)optarg);\u000a          set_join_field(&join_field_1,val);\u000a          set_join_field(&join_field_2,join_field_1);\u000a          uVar11 = tab;\u000a        }\u000a        break;\u000a      case 0x6f:\u000a        iVar2 = strcmp((char *)optarg,"auto");\u000a        if (iVar2 == 0) {\u000a          autoformat = 1;\u000a          uVar11 = tab;\u000a        }\u000a        else {\u000a          add_field_list((char *)str);\u000a          local_54 = 3;\u000a          uVar11 = tab;\u000a        }\u000a        break;\u000a      case 0x74:\u000a        bVar10 = *optarg;\u000a        if (bVar10 == 0) {\u000a          bVar10 = 10;\u000a        }\u000a        else {\u000a          if (optarg[1] != 0) {\u000a            if (((bVar10 == 0x5c) && (optarg[1] == 0x30)) && (optarg[2] == 0)) {\u000a              bVar10 = 0;\u000a            }\u000a            else {\u000a              uVar5 = dcgettext(0,"multi-character tab %s",5);\u000a              pcVar9 = quote((char *)optarg);\u000a              error(1,0,uVar5,pcVar9);\u000a            }\u000a          }\u000a        }\u000a        uVar11 = (uint)bVar10;\u000a        if ((-1 < tab) && (tab != uVar11)) {\u000a          uVar5 = dcgettext(0,"incompatible tabs",5);\u000a          error(1,0,uVar5,uVar5);\u000a        }\u000a        break;\u000a      case 0x76:\u000a        print_pairables = 0;\u000a      case 0x61:\u000a        sVar3 = xstrtoul((char *)optarg,(char **)0x0,(ulong *)0xa,(char *)(&local_48 + 1));\u000a        if ((sVar3 != LONGINT_OK) || (1 < local_40 - 1U)) {\u000a          uVar5 = dcgettext(0,"invalid field number: %s",5);\u000a          pcVar9 = quote((char *)optarg);\u000a          error(1,0,uVar5,pcVar9);\u000a        }\u000a        p_Var6 = &print_unpairables_2;\u000a        if (local_40 == 1) {\u000a          p_Var6 = &print_unpairables_1;\u000a        }\u000a        *p_Var6 = true;\u000a        uVar11 = tab;\u000a        break;\u000a      case 0x7a:\u000a        eolchar = 1;\u000a        uVar11 = tab;\u000a        break;\u000a      case 0x80:\u000a        check_input_order = CHECK_ORDER_ENABLED;\u000a        uVar11 = tab;\u000a        break;\u000a      case 0x81:\u000a        check_input_order = CHECK_ORDER_DISABLED;\u000a        uVar11 = tab;\u000a        break;\u000a      case 0x82:\u000a        join_header_lines = 1;\u000a        uVar11 = tab;\u000a        break;\u000a      default:\u000a        if (iVar2 == -0x83) goto LAB_00402272;\u000a        if (iVar2 == -0x82) {\u000a          usage(0);\u000a        }\u000a      case 2:\u000a      case 3:\u000a      case 4:\u000a      case 5:\u000a      case 6:\u000a      case 7:\u000a      case 8:\u000a      case 9:\u000a      case 10:\u000a      case 0xb:\u000a      case 0xc:\u000a      case 0xd:\u000a      case 0xe:\u000a      case 0xf:\u000a      case 0x10:\u000a      case 0x11:\u000a      case 0x12:\u000a      case 0x13:\u000a      case 0x14:\u000a      case 0x15:\u000a      case 0x16:\u000a      case 0x17:\u000a      case 0x18:\u000a      case 0x19:\u000a      case 0x1a:\u000a      case 0x1b:\u000a      case 0x1c:\u000a      case 0x1d:\u000a      case 0x1e:\u000a      case 0x1f:\u000a      case 0x20:\u000a      case 0x21:\u000a      case 0x22:\u000a      case 0x23:\u000a      case 0x24:\u000a      case 0x25:\u000a      case 0x26:\u000a      case 0x27:\u000a      case 0x28:\u000a      case 0x29:\u000a      case 0x2a:\u000a      case 0x2b:\u000a      case 0x2c:\u000a      case 0x2d:\u000a      case 0x2e:\u000a      case 0x2f:\u000a      case 0x30:\u000a      case 0x33:\u000a      case 0x34:\u000a      case 0x35:\u000a      case 0x36:\u000a      case 0x37:\u000a      case 0x38:\u000a      case 0x39:\u000a      case 0x3a:\u000a      case 0x3b:\u000a      case 0x3c:\u000a      case 0x3d:\u000a      case 0x3e:\u000a      case 0x3f:\u000a      case 0x40:\u000a      case 0x41:\u000a      case 0x42:\u000a      case 0x43:\u000a      case 0x44:\u000a      case 0x45:\u000a      case 0x46:\u000a      case 0x47:\u000a      case 0x48:\u000a      case 0x49:\u000a      case 0x4a:\u000a      case 0x4b:\u000a      case 0x4c:\u000a      case 0x4d:\u000a      case 0x4e:\u000a      case 0x4f:\u000a      case 0x50:\u000a      case 0x51:\u000a      case 0x52:\u000a      case 0x53:\u000a      case 0x54:\u000a      case 0x55:\u000a      case 0x56:\u000a      case 0x57:\u000a      case 0x58:\u000a      case 0x59:\u000a      case 0x5a:\u000a      case 0x5b:\u000a      case 0x5c:\u000a      case 0x5d:\u000a      case 0x5e:\u000a      case 0x5f:\u000a      case 0x60:\u000a      case 0x62:\u000a      case 99:\u000a      case 100:\u000a      case 0x66:\u000a      case 0x67:\u000a      case 0x68:\u000a      case 0x6b:\u000a      case 0x6c:\u000a      case 0x6d:\u000a      case 0x6e:\u000a      case 0x70:\u000a      case 0x71:\u000a      case 0x72:\u000a      case 0x73:\u000a      case 0x75:\u000a      case 0x77:\u000a      case 0x78:\u000a      case 0x79:\u000a      case 0x7b:\u000a      case 0x7c:\u000a      case 0x7d:\u000a      case 0x7e:\u000a      case 0x7f:\u000a        usage(1);\u000aLAB_00402272:\u000a        version_etc(stdout,"join","GNU coreutils",Version,"Mike Haertel",0);\u000a                    /* WARNING: Subroutine does not return */\u000a        exit(0);\u000a      }\u000a      tab = uVar11;\u000a      local_50 = local_54;\u000a      uVar5 = getopt_long();\u000a    } while ((int)uVar5 != -1);\u000a  }\u000a  local_50 = 0;\u000a  if (optind < iVar4) {\u000a    do {\u000a      lVar7 = (long)optind;\u000a      optind = optind + 1;\u000a      add_file_name(in_RSI[lVar7],local_38,&local_48,&local_4c,&local_50,&local_54);\u000a    } while (optind < iVar4);\u000a  }\u000a  if (local_4c != 2) {\u000a    if (local_4c == 0) {\u000a      uVar5 = dcgettext(0,"missing operand",5);\u000a      error(0,0,uVar5,uVar5);\u000a      usage(1);\u000a    }\u000a    uVar5 = dcgettext();\u000a    pcVar9 = quote(in_RSI[(long)iVar4 + -1]);\u000a    error(0,0,uVar5,pcVar9);\u000a    uVar5 = usage(1);\u000a    lVar7 = -0x10;\u000a    do {\u000a      line = *(line **)((long)&outlist_head.file + lVar7);\u000a      if (line != (line *)0x0) {\u000a        freeline(line);\u000a        free(*(void **)((long)&outlist_head.file + lVar7));\u000a        uVar5 = extraout_RAX;\u000a      }\u000a      lVar7 = lVar7 + 8;\u000a    } while (lVar7 != 0);\u000a    return (int)uVar5;\u000a  }\u000a  val = 0;\u000a  do {\u000a    if (*(int *)((long)&local_48 + val * 4) != 0) {\u000a      set_join_field(&join_field_1,val);\u000a      set_join_field(&join_field_2,val);\u000a    }\u000a    val = val + 1;\u000a  } while (val != 2);\u000a  if (join_field_1 == 0xffffffffffffffff) {\u000a    join_field_1 = 0;\u000a  }\u000a  if (join_field_2 == 0xffffffffffffffff) {\u000a    join_field_2 = 0;\u000a  }\u000a  if ((*g_names[0] != '-') || (fp1 = stdin, g_names[0][1] != 0)) {\u000a    fp1 = fopen_safer(g_names[0],"r");\u000a  }\u000a  if (fp1 == (FILE *)0x0) {\u000a    puVar8 = (uint *)__errno_location();\u000a    uVar11 = *puVar8;\u000a    quotearg_n_style_colon((char *)0x0);\u000a    error(1,(ulong)uVar11,0x4077b3);\u000a  }\u000a  if ((*g_names[1] != '-') || (fp2 = stdin, g_names[1][1] != 0)) {\u000a    fp2 = fopen_safer(g_names[1],"r");\u000a  }\u000a  if (fp2 == (FILE *)0x0) {\u000a    puVar8 = (uint *)__errno_location();\u000a    uVar11 = *puVar8;\u000a    quotearg_n_style_colon((char *)0x0);\u000a    error(1,(ulong)uVar11,0x4077b3);\u000a  }\u000a  if (fp1 == fp2) {\u000a    puVar8 = (uint *)__errno_location();\u000a    uVar11 = *puVar8;\u000a    uVar5 = dcgettext(0,"both files cannot be standard input",5);\u000a    error(1,(ulong)uVar11,uVar5);\u000a  }\u000a  system_join(fp1,fp2);\u000a  iVar4 = rpl_fclose(fp1);\u000a  if (iVar4 != 0) {\u000a    puVar8 = (uint *)__errno_location();\u000a    uVar11 = *puVar8;\u000a    quotearg_n_style_colon((char *)0x0);\u000a    error(1,(ulong)uVar11,0x4077b3);\u000a  }\u000a  iVar4 = rpl_fclose(fp2);\u000a  if (iVar4 != 0) {\u000a    puVar8 = (uint *)__errno_location();\u000a    uVar11 = *puVar8;\u000a    quotearg_n_style_colon((char *)0x0);\u000a    error(1,(ulong)uVar11,0x4077b3);\u000a  }\u000a  return (int)(uint)((issued_disorder_warning[1] | issued_disorder_warning[0]) != 0);\u000a}\u000a\u000a
p1053
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R13,RSI\nMOV R14D,EDI\nMOV dword ptr [RSP + 0x8],0x0\nMOV qword ptr [RSP + 0x10],0x0\nMOV dword ptr [RSP + 0xc],0x0\nMOV RDI,qword ptr [R13]\nCALL 0x004037d0\nMOV EDI,0x6\nMOV ESI,0x407773\nCALL 0x00401710\nMOV EDI,0x40754d\nMOV ESI,0x4074a7\nCALL 0x00401500\nMOV EDI,0x40754d\nCALL 0x004014e0\nMOV EDI,0x3\nCALL 0x00403650\nMOV byte ptr [0x0060b2f0],AL\nMOV EDI,0x4034d0\nCALL 0x00406630\nMOV EDI,0x402310\nCALL 0x00406630\nMOV byte ptr [0x0060b2f1],0x1\nMOV byte ptr [0x0060b2f2],0x0\nMOV byte ptr [0x0060b2f4],0x0\nMOV byte ptr [0x0060b2f3],0x0\nMOV dword ptr [0x0060b2f8],0x0\nMOV EDX,0x4074bf\nMOV ECX,0x406ab0\nXOR R8D,R8D\nMOV EDI,R14D\nMOV RSI,R13\nCALL 0x00401540\nCMP EAX,-0x1\nJZ 0x00401fc9\nLEA R15,[RSP + 0x18]\nMOV R12D,0x60b2fc\nJMP 0x00401ce0\nXOR EBX,EBX\nJMP 0x00401f61\nXOR ECX,ECX\nCMP AL,0x32\nSETZ CL\nINC dword ptr [RSP + RCX*0x4 + 0x10]\nINC ECX\nMOV dword ptr [RSP + 0x4],ECX\nJMP 0x00401fa0\nMOV dword ptr [RSP + 0x4],0x0\nLEA ECX,[RAX + -0x1]\nCMP ECX,0x81\nJA 0x00402253\nJMP qword ptr [0x406680 + RCX*0x8]\nMOV RDI,qword ptr [0x0060b2c0]\nLEA RSI,[RSP + 0x20]\nLEA RDX,[RSP + 0x10]\nLEA RCX,[RSP + 0xc]\nLEA R8,[RSP + 0x8]\nLEA R9,[RSP + 0x4]\nCALL 0x004024b0\nJMP 0x00401fa0\nMOV RDI,qword ptr [0x0060b2c0]\nCALL 0x004023b0\nMOV EDI,0x60b210\nJMP 0x00401d4c\nMOV RDI,qword ptr [0x0060b2c0]\nCALL 0x004023b0\nMOV EDI,0x60b218\nMOV RSI,RAX\nCALL 0x00402350\nJMP 0x00401fa0\nMOV RDI,qword ptr [0x0060b300]\nTEST RDI,RDI\nJZ 0x00401d9a\nMOV RSI,qword ptr [0x0060b2c0]\nCALL 0x00401630\nTEST EAX,EAX\nJZ 0x00401d9a\nXOR EDI,EDI\nMOV ESI,0x4074ec\nMOV EDX,0x5\nCALL 0x00401510\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401730\nMOV RAX,qword ptr [0x0060b2c0]\nMOV qword ptr [0x0060b300],RAX\nJMP 0x00401fa0\nMOV byte ptr [0x0060b308],0x1\nJMP 0x00401fa0\nMOV RDI,qword ptr [0x0060b2c0]\nMOVZX EAX,byte ptr [RDI]\nMOV ECX,EAX\nADD CL,0xcf\nCMP CL,0x1\nJA 0x00401dec\nCMP byte ptr [RDI + 0x1],0x0\nJNZ 0x00401dec\nMOVSXD RCX,dword ptr [0x0060b2b8]\nMOV RCX,qword ptr [R13 + RCX*0x8 + -0x8]\nADD RCX,0x2\nCMP RDI,RCX\nJZ 0x00401cbd\nCALL 0x004023b0\nMOV EDI,0x60b210\nMOV RSI,RAX\nCALL 0x00402350\nMOV RSI,qword ptr [0x0060b210]\nMOV EDI,0x60b218\nCALL 0x00402350\nJMP 0x00401fa0\nMOV RBP,qword ptr [0x0060b2c0]\nMOV ESI,0x407518\nMOV RDI,RBP\nCALL 0x00401630\nTEST EAX,EAX\nJZ 0x00401f56\nMOV RDI,RBP\nCALL 0x00402430\nMOV dword ptr [RSP + 0x4],0x3\nJMP 0x00401fa0\nMOV RAX,qword ptr [0x0060b2c0]\nMOV BL,byte ptr [RAX]\nTEST BL,BL\nJZ 0x00401f5f\nMOVZX ECX,byte ptr [RAX + 0x1]\nTEST CL,CL\nJZ 0x00401f61\nCMP BL,0x5c\nJNZ 0x00401e76\nCMP CL,0x30\nJNZ 0x00401e76\nCMP byte ptr [RAX + 0x2],0x0\nJZ 0x00401cb6\nXOR EDI,EDI\nMOV ESI,0x407520\nMOV EDX,0x5\nCALL 0x00401510\nMOV RBP,RAX\nMOV RDI,qword ptr [0x0060b2c0]\nCALL 0x00404cc0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x00401730\nJMP 0x00401f61\nMOV byte ptr [0x0060b2f1],0x0\nMOV RDI,qword ptr [0x0060b2c0]\nXOR ESI,ESI\nMOV EDX,0xa\nMOV R8D,0x407773\nMOV RCX,R15\nCALL 0x00405930\nTEST EAX,EAX\nJNZ 0x00401ee4\nMOV RAX,qword ptr [RSP + 0x18]\nDEC RAX\nCMP RAX,0x2\nJC 0x00401f18\nXOR EDI,EDI\nMOV ESI,0x4074d3\nMOV EDX,0x5\nCALL 0x00401510\nMOV RBP,RAX\nMOV RDI,qword ptr [0x0060b2c0]\nCALL 0x00404cc0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x00401730\nCMP qword ptr [RSP + 0x18],0x1\nMOV EAX,0x60b2fd\nCMOVZ RAX,R12\nMOV byte ptr [RAX],0x1\nJMP 0x00401fa0\nMOV byte ptr [0x0060b30a],0x1\nJMP 0x00401fa0\nMOV dword ptr [0x0060b2f8],0x1\nJMP 0x00401fa0\nMOV dword ptr [0x0060b2f8],0x2\nJMP 0x00401fa0\nMOV byte ptr [0x0060b320],0x1\nJMP 0x00401fa0\nMOV byte ptr [0x0060b309],0x1\nJMP 0x00401fa0\nMOV BL,0xa\nMOV EAX,dword ptr [0x0060b220]\nTEST EAX,EAX\nMOVZX EBX,BL\nJS 0x00401f97\nCMP EAX,EBX\nJZ 0x00401f97\nXOR EDI,EDI\nMOV ESI,0x407537\nMOV EDX,0x5\nCALL 0x00401510\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401730\nMOV dword ptr [0x0060b220],EBX\nNOP dword ptr [RAX]\nMOV EAX,dword ptr [RSP + 0x4]\nMOV dword ptr [RSP + 0x8],EAX\nMOV EDX,0x4074bf\nMOV ECX,0x406ab0\nXOR R8D,R8D\nMOV EDI,R14D\nMOV RSI,R13\nCALL 0x00401540\nCMP EAX,-0x1\nJNZ 0x00401ce0\nMOV dword ptr [RSP + 0x8],0x0\nMOV EAX,dword ptr [0x0060b2b8]\nCMP EAX,R14D\nMOV EBX,R14D\nJGE 0x00402030\nLEA R15,[RSP + 0x10]\nLEA RBP,[RSP + 0xc]\nLEA R14,[RSP + 0x8]\nLEA R12,[RSP + 0x4]\nNOP dword ptr CS:[RAX + RAX*0x1]\nLEA ECX,[RAX + 0x1]\nMOV dword ptr [0x0060b2b8],ECX\nCDQE\nMOV RDI,qword ptr [R13 + RAX*0x8]\nLEA RSI,[RSP + 0x20]\nMOV RDX,R15\nMOV RCX,RBP\nMOV R8,R14\nMOV R9,R12\nCALL 0x004024b0\nMOV EAX,dword ptr [0x0060b2b8]\nCMP EAX,EBX\nJL 0x00402000\nMOV EBP,EBX\nMOV EAX,dword ptr [RSP + 0xc]\nCMP EAX,0x2\nJNZ 0x004022a1\nXOR EBX,EBX\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP dword ptr [RSP + RBX*0x4 + 0x10],0x0\nJZ 0x00402071\nMOV EDI,0x60b210\nMOV RSI,RBX\nCALL 0x00402350\nMOV EDI,0x60b218\nMOV RSI,RBX\nCALL 0x00402350\nINC RBX\nCMP RBX,0x2\nJNZ 0x00402050\nCMP qword ptr [0x0060b210],-0x1\nJNZ 0x0040208f\nMOV qword ptr [0x0060b210],0x0\nCMP qword ptr [0x0060b218],-0x1\nJNZ 0x004020a4\nMOV qword ptr [0x0060b218],0x0\nMOV RAX,qword ptr [0x0060b310]\nCMP byte ptr [RAX],0x2d\nJNZ 0x004020b6\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x00402101\nMOV RDI,qword ptr [0x0060b310]\nMOV ESI,0x40773f\nCALL 0x004035c0\nMOV RBX,RAX\nTEST RBX,RBX\nJNZ 0x0040210d\nCALL 0x00401470\nMOV EBP,dword ptr [RAX]\nMOV RDX,qword ptr [0x0060b310]\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x00404b80\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x4077b3\nXOR EAX,EAX\nMOV ESI,EBP\nCALL 0x00401730\nJMP 0x0040210d\nMOV RBX,qword ptr [0x0060b2b0]\nTEST RBX,RBX\nJZ 0x004020cf\nMOV RAX,qword ptr [0x0060b318]\nCMP byte ptr [RAX],0x2d\nJNZ 0x0040211f\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x00402171\nMOV RDI,qword ptr [0x0060b318]\nMOV ESI,0x40773f\nCALL 0x004035c0\nMOV RBP,RAX\nTEST RBP,RBP\nJNZ 0x0040217d\nCALL 0x00401470\nMOV R14D,dword ptr [RAX]\nMOV RDX,qword ptr [0x0060b318]\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x00404b80\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x4077b3\nXOR EAX,EAX\nMOV ESI,R14D\nCALL 0x00401730\nCMP RBX,RBP\nJNZ 0x004021b0\nJMP 0x00402182\nMOV RBP,qword ptr [0x0060b2b0]\nTEST RBP,RBP\nJZ 0x00402138\nCMP RBX,RBP\nJNZ 0x004021b0\nCALL 0x00401470\nMOV R14D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40758d\nMOV EDX,0x5\nCALL 0x00401510\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,RCX\nCALL 0x00401730\nMOV RDI,RBX\nMOV RSI,RBP\nCALL 0x004025b0\nMOV RDI,RBX\nCALL 0x00405c60\nTEST EAX,EAX\nJZ 0x004021f7\nCALL 0x00401470\nMOV EBX,dword ptr [RAX]\nMOV RDX,qword ptr [0x0060b310]\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x00404b80\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x4077b3\nXOR EAX,EAX\nMOV ESI,EBX\nCALL 0x00401730\nMOV RDI,RBP\nCALL 0x00405c60\nTEST EAX,EAX\nJZ 0x00402233\nCALL 0x00401470\nMOV EBX,dword ptr [RAX]\nMOV RDX,qword ptr [0x0060b318]\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x00404b80\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x4077b3\nXOR EAX,EAX\nMOV ESI,EBX\nCALL 0x00401730\nMOV CL,byte ptr [0x0060b2f4]\nXOR EAX,EAX\nOR CL,byte ptr [0x0060b2f3]\nSETNZ AL\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP EAX,0xffffff7d\nJZ 0x00402272\nCMP EAX,0xffffff7e\nJNZ 0x00402268\nXOR EDI,EDI\nCALL 0x00401900\nMOV EDI,0x1\nCALL 0x00401900\nMOV RDI,qword ptr [0x0060b2a8]\nMOV RCX,qword ptr [0x0060b230]\nMOV ESI,0x4074a2\nMOV EDX,0x407549\nMOV R8D,0x407557\nXOR R9D,R9D\nXOR EAX,EAX\nCALL 0x004054d0\nXOR EDI,EDI\nCALL 0x00401790\nXOR EDI,EDI\nTEST EAX,EAX\nJNZ 0x004022d1\nMOV ESI,0x407564\nMOV EDX,0x5\nCALL 0x00401510\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401730\nMOV EDI,0x1\nCALL 0x00401900\nMOV ESI,0x407574\nMOV EDX,0x5\nCALL 0x00401510\nMOV RBX,RAX\nMOVSXD RAX,EBP\nMOV RDI,qword ptr [R13 + RAX*0x8 + -0x8]\nCALL 0x00404cc0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401730\nMOV EDI,0x1\nCALL 0x00401900\nNOP dword ptr [RAX + RAX*0x1]\n'
p1054
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 f5\n41 89 fe\nc7 44 24 08 00 00 00 00\n48 c7 44 24 10 00 00 00 00\nc7 44 24 0c 00 00 00 00\n49 8b 7d 00\ne8 ba 1b 00 00\nbf 06 00 00 00\nbe 73 77 40 00\ne8 eb fa ff ff\nbf 4d 75 40 00\nbe a7 74 40 00\ne8 cc f8 ff ff\nbf 4d 75 40 00\ne8 a2 f8 ff ff\nbf 03 00 00 00\ne8 08 1a 00 00\n88 05 a2 96 20 00\nbf d0 34 40 00\ne8 d8 49 00 00\nbf 10 23 40 00\ne8 ce 49 00 00\nc6 05 88 96 20 00 01\nc6 05 82 96 20 00 00\nc6 05 7d 96 20 00 00\nc6 05 75 96 20 00 00\nc7 05 70 96 20 00 00 00 00 00\nba bf 74 40 00\nb9 b0 6a 40 00\n45 31 c0\n44 89 f7\n4c 89 ee\ne8 a0 f8 ff ff\n83 f8 ff\n0f 84 20 03 00 00\n4c 8d 7c 24 18\n41 bc fc b2 60 00\neb 2a\n31 db\ne9 a4 02 00 00\n31 c9\n3c 32\n0f 94 c1\nff 44 8c 10\nff c1\n89 4c 24 04\ne9 cd 02 00 00\nc7 44 24 04 00 00 00 00\n8d 48 ff\n81 f9 81 00 00 00\n0f 87 5c 05 00 00\nff 24 cd 80 66 40 00\n48 8b 3d bb 95 20 00\n48 8d 74 24 20\n48 8d 54 24 10\n48 8d 4c 24 0c\n4c 8d 44 24 08\n4c 8d 4c 24 04\ne8 8d 07 00 00\ne9 78 02 00 00\n48 8b 3d 91 95 20 00\ne8 7c 06 00 00\nbf 10 b2 60 00\neb 11\n48 8b 3d 7e 95 20 00\ne8 69 06 00 00\nbf 18 b2 60 00\n48 89 c6\ne8 fc 05 00 00\ne9 47 02 00 00\n48 8b 3d a0 95 20 00\n48 85 ff\n74 35\n48 8b 35 54 95 20 00\ne8 bf f8 ff ff\n85 c0\n74 25\n31 ff\nbe ec 74 40 00\nba 05 00 00 00\ne8 8a f7 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 96 f9 ff ff\n48 8b 05 1f 95 20 00\n48 89 05 58 95 20 00\ne9 f3 01 00 00\nc6 05 54 95 20 00 01\ne9 e7 01 00 00\n48 8b 3d 00 95 20 00\n0f b6 07\n89 c1\n80 c1 cf\n80 f9 01\n77 1f\n80 7f 01 00\n75 19\n48 63 0d de 94 20 00\n49 8b 4c cd f8\n48 83 c1 02\n48 39 cf\n0f 84 d1 fe ff ff\ne8 bf 05 00 00\nbf 10 b2 60 00\n48 89 c6\ne8 52 05 00 00\n48 8b 35 0b 94 20 00\nbf 18 b2 60 00\ne8 41 05 00 00\ne9 8c 01 00 00\n48 8b 2d a5 94 20 00\nbe 18 75 40 00\n48 89 ef\ne8 08 f8 ff ff\n85 c0\n0f 84 26 01 00 00\n48 89 ef\ne8 f8 05 00 00\nc7 44 24 04 03 00 00 00\ne9 5b 01 00 00\n48 8b 05 74 94 20 00\n8a 18\n84 db\n0f 84 09 01 00 00\n0f b6 48 01\n84 c9\n0f 84 ff 00 00 00\n80 fb 5c\n75 0f\n80 f9 30\n75 0a\n80 78 02 00\n0f 84 40 fe ff ff\n31 ff\nbe 20 75 40 00\nba 05 00 00 00\ne8 89 f6 ff ff\n48 89 c5\n48 8b 3d 2f 94 20 00\ne8 2a 2e 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ea\ne8 86 f8 ff ff\ne9 b2 00 00 00\nc6 05 3b 94 20 00 00\n48 8b 3d 03 94 20 00\n31 f6\nba 0a 00 00 00\n41 b8 73 77 40 00\n4c 89 f9\ne8 5e 3a 00 00\n85 c0\n75 0e\n48 8b 44 24 18\n48 ff c8\n48 83 f8 02\n72 34\n31 ff\nbe d3 74 40 00\nba 05 00 00 00\ne8 1b f6 ff ff\n48 89 c5\n48 8b 3d c1 93 20 00\ne8 bc 2d 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ea\ne8 18 f8 ff ff\n48 83 7c 24 18 01\nb8 fd b2 60 00\n49 0f 44 c4\nc6 00 01\neb 74\nc6 05 d7 93 20 00 01\neb 6b\nc7 05 b9 93 20 00 01 00 00 00\neb 5f\nc7 05 ad 93 20 00 02 00 00 00\neb 53\nc6 05 cc 93 20 00 01\neb 4a\nc6 05 ac 93 20 00 01\neb 41\nb3 0a\n8b 05 b9 92 20 00\n85 c0\n0f b6 db\n78 29\n39 d8\n74 25\n31 ff\nbe 37 75 40 00\nba 05 00 00 00\ne8 8d f5 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 99 f7 ff ff\n89 1d 83 92 20 00\n0f 1f 00\n8b 44 24 04\n89 44 24 08\nba bf 74 40 00\nb9 b0 6a 40 00\n45 31 c0\n44 89 f7\n4c 89 ee\ne8 80 f5 ff ff\n83 f8 ff\n0f 85 17 fd ff ff\nc7 44 24 08 00 00 00 00\n8b 05 e1 92 20 00\n44 39 f0\n44 89 f3\n7d 51\n4c 8d 7c 24 10\n48 8d 6c 24 0c\n4c 8d 74 24 08\n4c 8d 64 24 04\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n8d 48 01\n89 0d af 92 20 00\n48 98\n49 8b 7c c5 00\n48 8d 74 24 20\n4c 89 fa\n48 89 e9\n4d 89 f0\n4d 89 e1\ne8 8a 04 00 00\n8b 05 8c 92 20 00\n39 d8\n7c d0\n89 dd\n8b 44 24 0c\n83 f8 02\n0f 85 62 02 00 00\n31 db\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n83 7c 9c 10 00\n74 1a\nbf 10 b2 60 00\n48 89 de\ne8 ec 02 00 00\nbf 18 b2 60 00\n48 89 de\ne8 df 02 00 00\n48 ff c3\n48 83 fb 02\n75 d6\n48 83 3d 8e 91 20 00 ff\n75 0b\n48 c7 05 81 91 20 00 00 00 00 00\n48 83 3d 81 91 20 00 ff\n75 0b\n48 c7 05 74 91 20 00 00 00 00 00\n48 8b 05 65 92 20 00\n80 38 2d\n75 06\n80 78 01 00\n74 4b\n48 8b 3d 53 92 20 00\nbe 3f 77 40 00\ne8 f9 14 00 00\n48 89 c3\n48 85 db\n75 3e\ne8 9c f3 ff ff\n8b 28\n48 8b 15 33 92 20 00\n31 ff\nbe 03 00 00 00\ne8 97 2a 00 00\n48 89 c1\nbf 01 00 00 00\nba b3 77 40 00\n31 c0\n89 ee\ne8 31 f6 ff ff\neb 0c\n48 8b 1d a8 91 20 00\n48 85 db\n74 c2\n48 8b 05 04 92 20 00\n80 38 2d\n75 06\n80 78 01 00\n74 52\n48 8b 3d f2 91 20 00\nbe 3f 77 40 00\ne8 90 14 00 00\n48 89 c5\n48 85 ed\n75 45\ne8 33 f3 ff ff\n44 8b 30\n48 8b 15 d1 91 20 00\n31 ff\nbe 03 00 00 00\ne8 2d 2a 00 00\n48 89 c1\nbf 01 00 00 00\nba b3 77 40 00\n31 c0\n44 89 f6\ne8 c6 f5 ff ff\n48 39 eb\n75 41\neb 11\n48 8b 2d 38 91 20 00\n48 85 ed\n74 bb\n48 39 eb\n75 2e\ne8 e9 f2 ff ff\n44 8b 30\n31 ff\nbe 8d 75 40 00\nba 05 00 00 00\ne8 75 f3 ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n44 89 f6\n48 89 ca\ne8 80 f5 ff ff\n48 89 df\n48 89 ee\ne8 f5 03 00 00\n48 89 df\ne8 9d 3a 00 00\n85 c0\n74 30\ne8 a4 f2 ff ff\n8b 18\n48 8b 15 3b 91 20 00\n31 ff\nbe 03 00 00 00\ne8 9f 29 00 00\n48 89 c1\nbf 01 00 00 00\nba b3 77 40 00\n31 c0\n89 de\ne8 39 f5 ff ff\n48 89 ef\ne8 61 3a 00 00\n85 c0\n74 30\ne8 68 f2 ff ff\n8b 18\n48 8b 15 07 91 20 00\n31 ff\nbe 03 00 00 00\ne8 63 29 00 00\n48 89 c1\nbf 01 00 00 00\nba b3 77 40 00\n31 c0\n89 de\ne8 fd f4 ff ff\n8a 0d bb 90 20 00\n31 c0\n0a 0d b2 90 20 00\n0f 95 c0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n3d 7d ff ff ff\n74 18\n3d 7e ff ff ff\n75 07\n31 ff\ne8 98 f6 ff ff\nbf 01 00 00 00\ne8 8e f6 ff ff\n48 8b 3d 2f 90 20 00\n48 8b 0d b0 8f 20 00\nbe a2 74 40 00\nba 49 75 40 00\n41 b8 57 75 40 00\n45 31 c9\n31 c0\ne8 36 32 00 00\n31 ff\ne8 ef f4 ff ff\n31 ff\n85 c0\n75 2a\nbe 64 75 40 00\nba 05 00 00 00\ne8 5a f2 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 69 f4 ff ff\nbf 01 00 00 00\ne8 2f f6 ff ff\nbe 74 75 40 00\nba 05 00 00 00\ne8 30 f2 ff ff\n48 89 c3\n48 63 c5\n49 8b 7c c5 f8\ne8 d0 29 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 2f f4 ff ff\nbf 01 00 00 00\ne8 f5 f5 ff ff\n0f 1f 44 00 00\n'
p1055
S'.text:0000000000401be0\n.text:0000000000401be1\n.text:0000000000401be3\n.text:0000000000401be5\n.text:0000000000401be7\n.text:0000000000401be9\n.text:0000000000401bea\n.text:0000000000401bee\n.text:0000000000401bf1\n.text:0000000000401bf4\n.text:0000000000401bfc\n.text:0000000000401c05\n.text:0000000000401c0d\n.text:0000000000401c11\n.text:0000000000401c16\n.text:0000000000401c1b\n.text:0000000000401c20\n.text:0000000000401c25\n.text:0000000000401c2a\n.text:0000000000401c2f\n.text:0000000000401c34\n.text:0000000000401c39\n.text:0000000000401c3e\n.text:0000000000401c43\n.text:0000000000401c48\n.text:0000000000401c4e\n.text:0000000000401c53\n.text:0000000000401c58\n.text:0000000000401c5d\n.text:0000000000401c62\n.text:0000000000401c69\n.text:0000000000401c70\n.text:0000000000401c77\n.text:0000000000401c7e\n.text:0000000000401c88\n.text:0000000000401c8d\n.text:0000000000401c92\n.text:0000000000401c95\n.text:0000000000401c98\n.text:0000000000401c9b\n.text:0000000000401ca0\n.text:0000000000401ca3\n.text:0000000000401ca9\n.text:0000000000401cae\n.text:0000000000401cb4\n.text:0000000000401cb6\n.text:0000000000401cb8\n.text:0000000000401cbd\n.text:0000000000401cbf\n.text:0000000000401cc1\n.text:0000000000401cc4\n.text:0000000000401cc8\n.text:0000000000401cca\n.text:0000000000401cce\n.text:0000000000401ce0\n.text:0000000000401ce8\n.text:0000000000401ceb\n.text:0000000000401cf1\n.text:0000000000401cf7\n.text:0000000000401cfe\n.text:0000000000401d05\n.text:0000000000401d0a\n.text:0000000000401d0f\n.text:0000000000401d14\n.text:0000000000401d19\n.text:0000000000401d1e\n.text:0000000000401d23\n.text:0000000000401d28\n.text:0000000000401d2f\n.text:0000000000401d34\n.text:0000000000401d39\n.text:0000000000401d3b\n.text:0000000000401d42\n.text:0000000000401d47\n.text:0000000000401d4c\n.text:0000000000401d4f\n.text:0000000000401d54\n.text:0000000000401d59\n.text:0000000000401d60\n.text:0000000000401d63\n.text:0000000000401d65\n.text:0000000000401d6c\n.text:0000000000401d71\n.text:0000000000401d73\n.text:0000000000401d75\n.text:0000000000401d77\n.text:0000000000401d7c\n.text:0000000000401d81\n.text:0000000000401d86\n.text:0000000000401d89\n.text:0000000000401d8e\n.text:0000000000401d90\n.text:0000000000401d92\n.text:0000000000401d95\n.text:0000000000401d9a\n.text:0000000000401da1\n.text:0000000000401da8\n.text:0000000000401dad\n.text:0000000000401db4\n.text:0000000000401db9\n.text:0000000000401dc0\n.text:0000000000401dc3\n.text:0000000000401dc5\n.text:0000000000401dc8\n.text:0000000000401dcb\n.text:0000000000401dcd\n.text:0000000000401dd1\n.text:0000000000401dd3\n.text:0000000000401dda\n.text:0000000000401ddf\n.text:0000000000401de3\n.text:0000000000401de6\n.text:0000000000401dec\n.text:0000000000401df1\n.text:0000000000401df6\n.text:0000000000401df9\n.text:0000000000401dfe\n.text:0000000000401e05\n.text:0000000000401e0a\n.text:0000000000401e0f\n.text:0000000000401e14\n.text:0000000000401e1b\n.text:0000000000401e20\n.text:0000000000401e23\n.text:0000000000401e28\n.text:0000000000401e2a\n.text:0000000000401e30\n.text:0000000000401e33\n.text:0000000000401e38\n.text:0000000000401e40\n.text:0000000000401e45\n.text:0000000000401e4c\n.text:0000000000401e4e\n.text:0000000000401e50\n.text:0000000000401e56\n.text:0000000000401e5a\n.text:0000000000401e5c\n.text:0000000000401e62\n.text:0000000000401e65\n.text:0000000000401e67\n.text:0000000000401e6a\n.text:0000000000401e6c\n.text:0000000000401e70\n.text:0000000000401e76\n.text:0000000000401e78\n.text:0000000000401e7d\n.text:0000000000401e82\n.text:0000000000401e87\n.text:0000000000401e8a\n.text:0000000000401e91\n.text:0000000000401e96\n.text:0000000000401e99\n.text:0000000000401e9e\n.text:0000000000401ea0\n.text:0000000000401ea2\n.text:0000000000401ea5\n.text:0000000000401eaa\n.text:0000000000401eaf\n.text:0000000000401eb6\n.text:0000000000401ebd\n.text:0000000000401ebf\n.text:0000000000401ec4\n.text:0000000000401eca\n.text:0000000000401ecd\n.text:0000000000401ed2\n.text:0000000000401ed4\n.text:0000000000401ed6\n.text:0000000000401edb\n.text:0000000000401ede\n.text:0000000000401ee2\n.text:0000000000401ee4\n.text:0000000000401ee6\n.text:0000000000401eeb\n.text:0000000000401ef0\n.text:0000000000401ef5\n.text:0000000000401ef8\n.text:0000000000401eff\n.text:0000000000401f04\n.text:0000000000401f07\n.text:0000000000401f0c\n.text:0000000000401f0e\n.text:0000000000401f10\n.text:0000000000401f13\n.text:0000000000401f18\n.text:0000000000401f1e\n.text:0000000000401f23\n.text:0000000000401f27\n.text:0000000000401f2a\n.text:0000000000401f2c\n.text:0000000000401f33\n.text:0000000000401f35\n.text:0000000000401f3f\n.text:0000000000401f41\n.text:0000000000401f4b\n.text:0000000000401f4d\n.text:0000000000401f54\n.text:0000000000401f56\n.text:0000000000401f5d\n.text:0000000000401f5f\n.text:0000000000401f61\n.text:0000000000401f67\n.text:0000000000401f69\n.text:0000000000401f6c\n.text:0000000000401f6e\n.text:0000000000401f70\n.text:0000000000401f72\n.text:0000000000401f74\n.text:0000000000401f79\n.text:0000000000401f7e\n.text:0000000000401f83\n.text:0000000000401f86\n.text:0000000000401f8b\n.text:0000000000401f8d\n.text:0000000000401f8f\n.text:0000000000401f92\n.text:0000000000401f97\n.text:0000000000401f9d\n.text:0000000000401fa0\n.text:0000000000401fa4\n.text:0000000000401fa8\n.text:0000000000401fad\n.text:0000000000401fb2\n.text:0000000000401fb5\n.text:0000000000401fb8\n.text:0000000000401fbb\n.text:0000000000401fc0\n.text:0000000000401fc3\n.text:0000000000401fc9\n.text:0000000000401fd1\n.text:0000000000401fd7\n.text:0000000000401fda\n.text:0000000000401fdd\n.text:0000000000401fdf\n.text:0000000000401fe4\n.text:0000000000401fe9\n.text:0000000000401fee\n.text:0000000000401ff3\n.text:0000000000402000\n.text:0000000000402003\n.text:0000000000402009\n.text:000000000040200b\n.text:0000000000402010\n.text:0000000000402015\n.text:0000000000402018\n.text:000000000040201b\n.text:000000000040201e\n.text:0000000000402021\n.text:0000000000402026\n.text:000000000040202c\n.text:000000000040202e\n.text:0000000000402030\n.text:0000000000402032\n.text:0000000000402036\n.text:0000000000402039\n.text:000000000040203f\n.text:0000000000402041\n.text:0000000000402050\n.text:0000000000402055\n.text:0000000000402057\n.text:000000000040205c\n.text:000000000040205f\n.text:0000000000402064\n.text:0000000000402069\n.text:000000000040206c\n.text:0000000000402071\n.text:0000000000402074\n.text:0000000000402078\n.text:000000000040207a\n.text:0000000000402082\n.text:0000000000402084\n.text:000000000040208f\n.text:0000000000402097\n.text:0000000000402099\n.text:00000000004020a4\n.text:00000000004020ab\n.text:00000000004020ae\n.text:00000000004020b0\n.text:00000000004020b4\n.text:00000000004020b6\n.text:00000000004020bd\n.text:00000000004020c2\n.text:00000000004020c7\n.text:00000000004020ca\n.text:00000000004020cd\n.text:00000000004020cf\n.text:00000000004020d4\n.text:00000000004020d6\n.text:00000000004020dd\n.text:00000000004020df\n.text:00000000004020e4\n.text:00000000004020e9\n.text:00000000004020ec\n.text:00000000004020f1\n.text:00000000004020f6\n.text:00000000004020f8\n.text:00000000004020fa\n.text:00000000004020ff\n.text:0000000000402101\n.text:0000000000402108\n.text:000000000040210b\n.text:000000000040210d\n.text:0000000000402114\n.text:0000000000402117\n.text:0000000000402119\n.text:000000000040211d\n.text:000000000040211f\n.text:0000000000402126\n.text:000000000040212b\n.text:0000000000402130\n.text:0000000000402133\n.text:0000000000402136\n.text:0000000000402138\n.text:000000000040213d\n.text:0000000000402140\n.text:0000000000402147\n.text:0000000000402149\n.text:000000000040214e\n.text:0000000000402153\n.text:0000000000402156\n.text:000000000040215b\n.text:0000000000402160\n.text:0000000000402162\n.text:0000000000402165\n.text:000000000040216a\n.text:000000000040216d\n.text:000000000040216f\n.text:0000000000402171\n.text:0000000000402178\n.text:000000000040217b\n.text:000000000040217d\n.text:0000000000402180\n.text:0000000000402182\n.text:0000000000402187\n.text:000000000040218a\n.text:000000000040218c\n.text:0000000000402191\n.text:0000000000402196\n.text:000000000040219b\n.text:000000000040219e\n.text:00000000004021a3\n.text:00000000004021a5\n.text:00000000004021a8\n.text:00000000004021ab\n.text:00000000004021b0\n.text:00000000004021b3\n.text:00000000004021b6\n.text:00000000004021bb\n.text:00000000004021be\n.text:00000000004021c3\n.text:00000000004021c5\n.text:00000000004021c7\n.text:00000000004021cc\n.text:00000000004021ce\n.text:00000000004021d5\n.text:00000000004021d7\n.text:00000000004021dc\n.text:00000000004021e1\n.text:00000000004021e4\n.text:00000000004021e9\n.text:00000000004021ee\n.text:00000000004021f0\n.text:00000000004021f2\n.text:00000000004021f7\n.text:00000000004021fa\n.text:00000000004021ff\n.text:0000000000402201\n.text:0000000000402203\n.text:0000000000402208\n.text:000000000040220a\n.text:0000000000402211\n.text:0000000000402213\n.text:0000000000402218\n.text:000000000040221d\n.text:0000000000402220\n.text:0000000000402225\n.text:000000000040222a\n.text:000000000040222c\n.text:000000000040222e\n.text:0000000000402233\n.text:0000000000402239\n.text:000000000040223b\n.text:0000000000402241\n.text:0000000000402244\n.text:0000000000402248\n.text:0000000000402249\n.text:000000000040224b\n.text:000000000040224d\n.text:000000000040224f\n.text:0000000000402251\n.text:0000000000402252\n.text:0000000000402253\n.text:0000000000402258\n.text:000000000040225a\n.text:000000000040225f\n.text:0000000000402261\n.text:0000000000402263\n.text:0000000000402268\n.text:000000000040226d\n.text:0000000000402272\n.text:0000000000402279\n.text:0000000000402280\n.text:0000000000402285\n.text:000000000040228a\n.text:0000000000402290\n.text:0000000000402293\n.text:0000000000402295\n.text:000000000040229a\n.text:000000000040229c\n.text:00000000004022a1\n.text:00000000004022a3\n.text:00000000004022a5\n.text:00000000004022a7\n.text:00000000004022ac\n.text:00000000004022b1\n.text:00000000004022b6\n.text:00000000004022b9\n.text:00000000004022bb\n.text:00000000004022bd\n.text:00000000004022bf\n.text:00000000004022c2\n.text:00000000004022c7\n.text:00000000004022cc\n.text:00000000004022d1\n.text:00000000004022d6\n.text:00000000004022db\n.text:00000000004022e0\n.text:00000000004022e3\n.text:00000000004022e6\n.text:00000000004022eb\n.text:00000000004022f0\n.text:00000000004022f3\n.text:00000000004022f5\n.text:00000000004022f7\n.text:00000000004022f9\n.text:00000000004022fc\n.text:0000000000402301\n.text:0000000000402306\n.text:000000000040230b\n'
p1056
tp1057
sS'xcharalloc'
p1058
(S'\n__stdcall xcharalloc(size_t n)\n'
p1059
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p1060
S'JMP 0x00405600\n'
p1061
S'e9 2b ff ff ff\n'
p1062
S'.text:00000000004056d0\n'
p1063
tp1064
sS'c_isupper'
p1065
(S'\n__stdcall c_isupper()\n'
p1066
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p1067
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1068
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p1069
S'.text:0000000000406060\n.text:0000000000406063\n.text:0000000000406066\n.text:0000000000406069\n'
p1070
tp1071
sS'c_isalnum'
p1072
(S'\n__stdcall c_isalnum()\n'
p1073
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1074
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x00405f7b\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x00405f7b\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x00405f7a\nXOR EAX,EAX\nRET\n'
p1075
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p1076
S'.text:0000000000405f60\n.text:0000000000405f62\n.text:0000000000405f65\n.text:0000000000405f68\n.text:0000000000405f6a\n.text:0000000000405f74\n.text:0000000000405f78\n.text:0000000000405f7a\n.text:0000000000405f7b\n.text:0000000000405f7e\n.text:0000000000405f81\n.text:0000000000405f83\n.text:0000000000405f85\n'
p1077
tp1078
sS'readlinebuffer_delim'
p1079
(S'\n__stdcall readlinebuffer_delim(linebuffer * linebuffer, FILE * stream)\n'
p1080
V\u000alinebuffer * readlinebuffer_delim(linebuffer *linebuffer,FILE *stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  int iVar2;\u000a  char in_DL;\u000a  char *pcVar3;\u000a  char *pcVar4;\u000a  char *p;\u000a  \u000a  sVar1 = linebuffer->size;\u000a  pcVar3 = linebuffer->buffer;\u000a  iVar2 = feof_unlocked((FILE *)stream);\u000a  if (iVar2 == 0) {\u000a    pcVar4 = pcVar3 + sVar1;\u000a    p = pcVar3;\u000a    do {\u000a      iVar2 = getc_unlocked((FILE *)stream);\u000a      if (iVar2 == -1) {\u000a        if (pcVar3 == p) goto LAB_004036d6;\u000a        iVar2 = ferror_unlocked((FILE *)stream);\u000a        if (iVar2 != 0) goto LAB_004036d6;\u000a        iVar2 = (int)in_DL;\u000a        if (pcVar3[-1] == in_DL) break;\u000a      }\u000a      if (pcVar3 == pcVar4) {\u000a        sVar1 = linebuffer->size;\u000a        p = (char *)x2realloc(p,(size_t *)linebuffer);\u000a        pcVar3 = p + sVar1;\u000a        linebuffer->buffer = p;\u000a        pcVar4 = p + linebuffer->size;\u000a      }\u000a      *pcVar3 = (char)iVar2;\u000a      pcVar3 = pcVar3 + 1;\u000a    } while (iVar2 != (int)in_DL);\u000a    *(char **)&linebuffer->length = pcVar3 + -(long)p;\u000a  }\u000a  else {\u000aLAB_004036d6:\u000a    linebuffer = (linebuffer *)0x0;\u000a  }\u000a  return linebuffer;\u000a}\u000a\u000a
p1081
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R12,RSI\nMOV R14,RDI\nMOV R13,qword ptr [R14]\nMOV R15,qword ptr [R14 + 0x10]\nMOV RDI,R12\nCALL 0x004017e0\nTEST EAX,EAX\nJZ 0x004036db\nXOR R14D,R14D\nJMP 0x00403751\nADD R13,R15\nMOV dword ptr [RSP + 0x4],EBX\nMOVSX EAX,BL\nMOV dword ptr [RSP],EAX\nMOV RBX,R15\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,R12\nCALL 0x004014c0\nMOV EBP,EAX\nCMP EBP,-0x1\nJNZ 0x0040371c\nCMP RBX,R15\nJZ 0x004036d6\nMOV RDI,R12\nCALL 0x00401610\nTEST EAX,EAX\nJNZ 0x004036d6\nMOV EAX,dword ptr [RSP + 0x4]\nCMP byte ptr [RBX + -0x1],AL\nMOV EBP,dword ptr [RSP]\nJZ 0x0040374a\nCMP RBX,R13\nJNZ 0x0040373f\nMOV RBX,qword ptr [R14]\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x004056e0\nMOV R15,RAX\nADD RBX,R15\nMOV qword ptr [R14 + 0x10],R15\nMOV R13,R15\nADD R13,qword ptr [R14]\nMOV byte ptr [RBX],BPL\nINC RBX\nCMP EBP,dword ptr [RSP]\nJNZ 0x004036f0\nSUB RBX,R15\nMOV qword ptr [R14 + 0x8],RBX\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1082
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n89 d3\n49 89 f4\n49 89 fe\n4d 8b 2e\n4d 8b 7e 10\n4c 89 e7\ne8 0e e1 ff ff\n85 c0\n74 05\n45 31 f6\neb 76\n4d 01 fd\n89 5c 24 04\n0f be c3\n89 04 24\n4c 89 fb\n0f 1f 44 00 00\n4c 89 e7\ne8 c8 dd ff ff\n89 c5\n83 fd ff\n75 1d\n4c 39 fb\n74 d2\n4c 89 e7\ne8 04 df ff ff\n85 c0\n75 c6\n8b 44 24 04\n38 43 ff\n8b 2c 24\n74 2e\n4c 39 eb\n75 1e\n49 8b 1e\n4c 89 ff\n4c 89 f6\ne8 b1 1f 00 00\n49 89 c7\n4c 01 fb\n4d 89 7e 10\n4d 89 fd\n4d 03 2e\n40 88 2b\n48 ff c3\n3b 2c 24\n75 a6\n4c 29 fb\n49 89 5e 08\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1083
S'.text:00000000004036b0\n.text:00000000004036b1\n.text:00000000004036b3\n.text:00000000004036b5\n.text:00000000004036b7\n.text:00000000004036b9\n.text:00000000004036ba\n.text:00000000004036bb\n.text:00000000004036bd\n.text:00000000004036c0\n.text:00000000004036c3\n.text:00000000004036c6\n.text:00000000004036ca\n.text:00000000004036cd\n.text:00000000004036d2\n.text:00000000004036d4\n.text:00000000004036d6\n.text:00000000004036d9\n.text:00000000004036db\n.text:00000000004036de\n.text:00000000004036e2\n.text:00000000004036e5\n.text:00000000004036e8\n.text:00000000004036eb\n.text:00000000004036f0\n.text:00000000004036f3\n.text:00000000004036f8\n.text:00000000004036fa\n.text:00000000004036fd\n.text:00000000004036ff\n.text:0000000000403702\n.text:0000000000403704\n.text:0000000000403707\n.text:000000000040370c\n.text:000000000040370e\n.text:0000000000403710\n.text:0000000000403714\n.text:0000000000403717\n.text:000000000040371a\n.text:000000000040371c\n.text:000000000040371f\n.text:0000000000403721\n.text:0000000000403724\n.text:0000000000403727\n.text:000000000040372a\n.text:000000000040372f\n.text:0000000000403732\n.text:0000000000403735\n.text:0000000000403739\n.text:000000000040373c\n.text:000000000040373f\n.text:0000000000403742\n.text:0000000000403745\n.text:0000000000403748\n.text:000000000040374a\n.text:000000000040374d\n.text:0000000000403751\n.text:0000000000403754\n.text:0000000000403758\n.text:0000000000403759\n.text:000000000040375b\n.text:000000000040375d\n.text:000000000040375f\n.text:0000000000403761\n.text:0000000000403762\n'
p1084
tp1085
sS'__errno_location'
p1086
(S'\n__stdcall __errno_location()\n'
p1087
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_0060b038)();\u000a  return piVar1;\u000a}\u000a\u000a
p1088
S'JMP qword ptr [0x0060b038]\n'
p1089
S'ff 25 c2 9b 20 00\n'
p1090
S'.plt:0000000000401470\n'
p1091
tp1092
sS'x2nrealloc'
p1093
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p1094
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p1095
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x0040569c\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x004056c9\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x004056ba\nTEST RCX,RCX\nJNZ 0x004056ba\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00405640\nPUSH RAX\nCALL 0x00405790\n'
p1096
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p1097
S'.text:0000000000405670\n.text:0000000000405673\n.text:0000000000405676\n.text:0000000000405679\n.text:000000000040567b\n.text:0000000000405685\n.text:0000000000405687\n.text:000000000040568a\n.text:000000000040568d\n.text:000000000040568f\n.text:0000000000405692\n.text:0000000000405695\n.text:000000000040569a\n.text:000000000040569c\n.text:000000000040569f\n.text:00000000004056a1\n.text:00000000004056a6\n.text:00000000004056a8\n.text:00000000004056ab\n.text:00000000004056ad\n.text:00000000004056b4\n.text:00000000004056b7\n.text:00000000004056ba\n.text:00000000004056bd\n.text:00000000004056c1\n.text:00000000004056c4\n.text:00000000004056c9\n.text:00000000004056ca\n'
p1098
tp1099
sS'quotearg_n_options'
p1100
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p1101
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p1102
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401470\nTEST R12D,R12D\nJS 0x00404981\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x0060b240]\nCMP dword ptr [0x0060b248],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x0040489b\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x60b250\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00405640\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x0060b240],R15\nJNZ 0x00404862\nMOVUPS XMM0,xmmword ptr [0x0060b250]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x0060b248]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x004015a0\nMOV dword ptr [0x0060b248],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x004039f0\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x004048fd\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x0040496b\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x60b420\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00404928\nCALL 0x00401450\nMOV RDI,R15\nCALL 0x004056d0\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x004039f0\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401460\n'
p1103
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 81 cc ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 36 6a 20 00\n44 39 25 37 6a 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 50 b2 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 f8 0d 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d eb 69 20 00\n75 0b\n0f 10 05 f2 69 20 00\n41 0f 11 07\n8b 05 e0 69 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 1d cd ff ff\n89 1d bf 69 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 20 b4 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 28 cb ff ff\n4c 89 ff\ne8 a0 0d 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 da ca ff ff\n'
p1104
S'.text:00000000004047d0\n.text:00000000004047d1\n.text:00000000004047d3\n.text:00000000004047d5\n.text:00000000004047d7\n.text:00000000004047d9\n.text:00000000004047da\n.text:00000000004047de\n.text:00000000004047e1\n.text:00000000004047e4\n.text:00000000004047e7\n.text:00000000004047ea\n.text:00000000004047ef\n.text:00000000004047f2\n.text:00000000004047f8\n.text:00000000004047fd\n.text:00000000004047ff\n.text:0000000000404803\n.text:000000000040480a\n.text:0000000000404811\n.text:0000000000404816\n.text:000000000040481b\n.text:0000000000404820\n.text:0000000000404822\n.text:0000000000404827\n.text:000000000040482a\n.text:000000000040482d\n.text:0000000000404833\n.text:0000000000404835\n.text:0000000000404838\n.text:000000000040483c\n.text:000000000040483f\n.text:0000000000404843\n.text:0000000000404848\n.text:000000000040484b\n.text:000000000040484e\n.text:0000000000404855\n.text:0000000000404857\n.text:000000000040485e\n.text:0000000000404862\n.text:0000000000404868\n.text:000000000040486b\n.text:000000000040486f\n.text:0000000000404872\n.text:0000000000404875\n.text:0000000000404879\n.text:000000000040487b\n.text:000000000040487e\n.text:0000000000404883\n.text:0000000000404889\n.text:000000000040488c\n.text:0000000000404891\n.text:0000000000404896\n.text:000000000040489b\n.text:000000000040489e\n.text:00000000004048a2\n.text:00000000004048a6\n.text:00000000004048ab\n.text:00000000004048af\n.text:00000000004048b3\n.text:00000000004048b7\n.text:00000000004048bb\n.text:00000000004048bf\n.text:00000000004048c4\n.text:00000000004048c7\n.text:00000000004048ca\n.text:00000000004048cd\n.text:00000000004048d2\n.text:00000000004048d5\n.text:00000000004048d8\n.text:00000000004048db\n.text:00000000004048dc\n.text:00000000004048e1\n.text:00000000004048e5\n.text:00000000004048e8\n.text:00000000004048eb\n.text:00000000004048ed\n.text:00000000004048f2\n.text:00000000004048f6\n.text:00000000004048fb\n.text:00000000004048fd\n.text:0000000000404901\n.text:0000000000404906\n.text:0000000000404909\n.text:000000000040490c\n.text:0000000000404911\n.text:0000000000404916\n.text:0000000000404919\n.text:000000000040491e\n.text:0000000000404921\n.text:0000000000404923\n.text:0000000000404928\n.text:000000000040492b\n.text:0000000000404930\n.text:0000000000404933\n.text:0000000000404936\n.text:000000000040493b\n.text:000000000040493e\n.text:0000000000404942\n.text:0000000000404945\n.text:0000000000404948\n.text:000000000040494d\n.text:0000000000404952\n.text:0000000000404957\n.text:000000000040495a\n.text:000000000040495d\n.text:000000000040495e\n.text:0000000000404963\n.text:0000000000404967\n.text:000000000040496b\n.text:000000000040496f\n.text:0000000000404972\n.text:0000000000404976\n.text:0000000000404977\n.text:0000000000404979\n.text:000000000040497b\n.text:000000000040497d\n.text:000000000040497f\n.text:0000000000404980\n.text:0000000000404981\n'
p1105
tp1106
sS'strcmp'
p1107
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p1108
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_0060b118)();\u000a  return iVar1;\u000a}\u000a\u000a
p1109
S'JMP qword ptr [0x0060b118]\n'
p1110
S'ff 25 e2 9a 20 00\n'
p1111
S'.plt:0000000000401630\n'
p1112
tp1113
sS'decode_field_spec'
p1114
(S'\n__stdcall decode_field_spec(char * s, int * file_index, size_t * field_index)\n'
p1115
V\u000avoid decode_field_spec(char *s,int *file_index,size_t *field_index)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *pcVar2;\u000a  size_t sVar3;\u000a  \u000a  if ((int)*s - 0x31U < 2) {\u000a    if (s[1] != '.') {\u000a      uVar1 = dcgettext(0,"invalid field specifier: %s",5);\u000a      pcVar2 = quote(s);\u000a      error(1,0,uVar1,pcVar2);\u000a    }\u000a    *file_index = (int)*s + -0x30;\u000a    sVar3 = string_to_join_field(s + 2);\u000a  }\u000a  else {\u000a    if ((int)*s != 0x30) {\u000a      uVar1 = dcgettext(0,"invalid file number in field spec: %s",5);\u000a      pcVar2 = quote(s);\u000a      error(1,0,uVar1,pcVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a      abort();\u000a    }\u000a    if (s[1] != 0) {\u000a      uVar1 = dcgettext(0,"invalid field specifier: %s",5);\u000a      pcVar2 = quote(s);\u000a      error(1,0,uVar1,pcVar2);\u000a    }\u000a    *file_index = 0;\u000a    sVar3 = 0;\u000a  }\u000a  *field_index = sVar3;\u000a  return;\u000a}\u000a\u000a
p1116
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R15,RSI\nMOV RBX,RDI\nMOVSX ECX,byte ptr [RBX]\nMOV AL,byte ptr [RBX + 0x1]\nLEA EDX,[RCX + -0x31]\nCMP EDX,0x2\nJNC 0x00402baa\nCMP AL,0x2e\nJZ 0x00402b93\nXOR EDI,EDI\nMOV ESI,0x407774\nMOV EDX,0x5\nCALL 0x00401510\nMOV R12,RAX\nMOV RDI,RBX\nCALL 0x00404cc0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R12\nCALL 0x00401730\nMOVSX EAX,byte ptr [RBX]\nADD EAX,-0x30\nMOV dword ptr [R15],EAX\nADD RBX,0x2\nMOV RDI,RBX\nCALL 0x004023b0\nJMP 0x00402bec\nCMP ECX,0x30\nJNZ 0x00402bfb\nTEST AL,AL\nJZ 0x00402be3\nXOR EDI,EDI\nMOV ESI,0x407774\nMOV EDX,0x5\nCALL 0x00401510\nMOV R12,RAX\nMOV RDI,RBX\nCALL 0x00404cc0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R12\nCALL 0x00401730\nMOV dword ptr [R15],0x0\nXOR EAX,EAX\nMOV qword ptr [R14],RAX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nXOR EDI,EDI\nMOV ESI,0x407790\nMOV EDX,0x5\nCALL 0x00401510\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00404cc0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R14\nCALL 0x00401730\nCALL 0x00401460\n'
p1117
S'41 57\n41 56\n41 54\n53\n50\n49 89 d6\n49 89 f7\n48 89 fb\n0f be 0b\n8a 43 01\n8d 51 cf\n83 fa 02\n73 4b\n3c 2e\n74 30\n31 ff\nbe 74 77 40 00\nba 05 00 00 00\ne8 9c e9 ff ff\n49 89 c4\n48 89 df\ne8 41 21 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n4c 89 e2\ne8 9d eb ff ff\n0f be 03\n83 c0 d0\n41 89 07\n48 83 c3 02\n48 89 df\ne8 08 f8 ff ff\neb 42\n83 f9 30\n75 4c\n84 c0\n74 30\n31 ff\nbe 74 77 40 00\nba 05 00 00 00\ne8 4c e9 ff ff\n49 89 c4\n48 89 df\ne8 f1 20 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n4c 89 e2\ne8 4d eb ff ff\n41 c7 07 00 00 00 00\n31 c0\n49 89 06\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n31 ff\nbe 90 77 40 00\nba 05 00 00 00\ne8 04 e9 ff ff\n49 89 c6\n48 89 df\ne8 a9 20 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n4c 89 f2\ne8 05 eb ff ff\ne8 30 e8 ff ff\n'
p1118
S'.text:0000000000402b40\n.text:0000000000402b42\n.text:0000000000402b44\n.text:0000000000402b46\n.text:0000000000402b47\n.text:0000000000402b48\n.text:0000000000402b4b\n.text:0000000000402b4e\n.text:0000000000402b51\n.text:0000000000402b54\n.text:0000000000402b57\n.text:0000000000402b5a\n.text:0000000000402b5d\n.text:0000000000402b5f\n.text:0000000000402b61\n.text:0000000000402b63\n.text:0000000000402b65\n.text:0000000000402b6a\n.text:0000000000402b6f\n.text:0000000000402b74\n.text:0000000000402b77\n.text:0000000000402b7a\n.text:0000000000402b7f\n.text:0000000000402b82\n.text:0000000000402b87\n.text:0000000000402b89\n.text:0000000000402b8b\n.text:0000000000402b8e\n.text:0000000000402b93\n.text:0000000000402b96\n.text:0000000000402b99\n.text:0000000000402b9c\n.text:0000000000402ba0\n.text:0000000000402ba3\n.text:0000000000402ba8\n.text:0000000000402baa\n.text:0000000000402bad\n.text:0000000000402baf\n.text:0000000000402bb1\n.text:0000000000402bb3\n.text:0000000000402bb5\n.text:0000000000402bba\n.text:0000000000402bbf\n.text:0000000000402bc4\n.text:0000000000402bc7\n.text:0000000000402bca\n.text:0000000000402bcf\n.text:0000000000402bd2\n.text:0000000000402bd7\n.text:0000000000402bd9\n.text:0000000000402bdb\n.text:0000000000402bde\n.text:0000000000402be3\n.text:0000000000402bea\n.text:0000000000402bec\n.text:0000000000402bef\n.text:0000000000402bf3\n.text:0000000000402bf4\n.text:0000000000402bf6\n.text:0000000000402bf8\n.text:0000000000402bfa\n.text:0000000000402bfb\n.text:0000000000402bfd\n.text:0000000000402c02\n.text:0000000000402c07\n.text:0000000000402c0c\n.text:0000000000402c0f\n.text:0000000000402c12\n.text:0000000000402c17\n.text:0000000000402c1a\n.text:0000000000402c1f\n.text:0000000000402c21\n.text:0000000000402c23\n.text:0000000000402c26\n.text:0000000000402c2b\n'
p1119
tp1120
sS'set_custom_quoting'
p1121
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p1122
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1123
S'TEST RDI,RDI\nMOV EAX,0x60b3e0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00403965\nTEST RDX,RDX\nJZ 0x00403965\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00401460\n'
p1124
S'48 85 ff\nb8 e0 b3 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 f5 da ff ff\n'
p1125
S'.text:0000000000403940\n.text:0000000000403943\n.text:0000000000403948\n.text:000000000040394c\n.text:0000000000403952\n.text:0000000000403955\n.text:0000000000403957\n.text:000000000040395a\n.text:000000000040395c\n.text:0000000000403960\n.text:0000000000403964\n.text:0000000000403965\n.text:0000000000403966\n'
p1126
tp1127
sS'c_isalpha'
p1128
(S'\n__stdcall c_isalpha()\n'
p1129
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1130
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x00405fab\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1131
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1132
S'.text:0000000000405f90\n.text:0000000000405f93\n.text:0000000000405f96\n.text:0000000000405f98\n.text:0000000000405fa2\n.text:0000000000405fa4\n.text:0000000000405fa7\n.text:0000000000405faa\n.text:0000000000405fab\n.text:0000000000405fad\n'
p1133
tp1134
sS'quotearg_custom_mem'
p1135
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p1136
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1137
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00404be0\n'
p1138
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p1139
S'.text:0000000000404c70\n.text:0000000000404c73\n.text:0000000000404c76\n.text:0000000000404c79\n.text:0000000000404c7c\n.text:0000000000404c7e\n.text:0000000000404c81\n'
p1140
tp1141
sS'rpl_calloc'
p1142
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p1143
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_0060b110)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p1144
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x00405c4b\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00405c50\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00405c50\nPUSH RAX\nCALL 0x00401470\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x00401620\n'
p1145
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 2f b8 ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 c5 b9 ff ff\n'
p1146
S'.text:0000000000405c10\n.text:0000000000405c13\n.text:0000000000405c18\n.text:0000000000405c1a\n.text:0000000000405c1d\n.text:0000000000405c22\n.text:0000000000405c24\n.text:0000000000405c27\n.text:0000000000405c2b\n.text:0000000000405c2d\n.text:0000000000405c30\n.text:0000000000405c33\n.text:0000000000405c36\n.text:0000000000405c39\n.text:0000000000405c3b\n.text:0000000000405c3c\n.text:0000000000405c41\n.text:0000000000405c47\n.text:0000000000405c49\n.text:0000000000405c4a\n.text:0000000000405c4b\n.text:0000000000405c50\n.text:0000000000405c53\n.text:0000000000405c56\n'
p1147
tp1148
sS'memset'
p1149
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p1150
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_0060b0d0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1151
S'JMP qword ptr [0x0060b0d0]\n'
p1152
S'ff 25 2a 9b 20 00\n'
p1153
S'.plt:00000000004015a0\n'
p1154
tp1155
sS'getc_unlocked'
p1156
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p1157
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_0060b060)();\u000a  return iVar1;\u000a}\u000a\u000a
p1158
S'JMP qword ptr [0x0060b060]\n'
p1159
S'ff 25 9a 9b 20 00\n'
p1160
S'.plt:00000000004014c0\n'
p1161
tp1162
sS'c_isascii'
p1163
(S'\n__stdcall c_isascii()\n'
p1164
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p1165
S'CMP EDI,0x80\nSETC AL\nRET\n'
p1166
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p1167
S'.text:0000000000405fb0\n.text:0000000000405fb6\n.text:0000000000405fb9\n'
p1168
tp1169
sS'dup_safer'
p1170
(S'\n__stdcall dup_safer()\n'
p1171
V\u000aint dup_safer(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 in_RDI;\u000a  \u000a  iVar1 = rpl_fcntl(in_RDI,0,3);\u000a  return iVar1;\u000a}\u000a\u000a
p1172
S'XOR ESI,ESI\nMOV EDX,0x3\nXOR EAX,EAX\nJMP 0x00405ce0\n'
p1173
S'31 f6\nba 03 00 00 00\n31 c0\ne9 02 0c 00 00\n'
p1174
S'.text:00000000004050d0\n.text:00000000004050d2\n.text:00000000004050d7\n.text:00000000004050d9\n'
p1175
tp1176
sS'prjoin'
p1177
(S'\n__stdcall prjoin(line * line1, line * line2)\n'
p1178
V\u000avoid prjoin(line *line1,line *line2)\u000a\u000a{\u000a  size_t *psVar1;\u000a  size_t *psVar2;\u000a  outlist *poVar3;\u000a  line *line;\u000a  line *line_00;\u000a  int __c;\u000a  \u000a  if (outlist_head.next == (outlist *)0x0) {\u000a    line_00 = line1;\u000a    if (line1 == &uni_blank) {\u000a      line_00 = line2;\u000a    }\u000a    psVar2 = &join_field_1;\u000a    if (line1 == &uni_blank) {\u000a      psVar2 = &join_field_2;\u000a    }\u000a    prfield(*psVar2,line_00);\u000a    prfields(line1,join_field_1,autocount_1);\u000a    prfields(line2,join_field_2,autocount_2);\u000a  }\u000a  else {\u000a    psVar2 = &join_field_1;\u000a    line_00 = line1;\u000a    if (line1 == &uni_blank) {\u000a      psVar2 = &join_field_2;\u000a      line_00 = line2;\u000a    }\u000a    poVar3 = outlist_head.next;\u000a    __c = 0x20;\u000a    if (-1 < tab) {\u000a      poVar3 = outlist_head.next;\u000a      __c = (int)(char)tab;\u000a    }\u000a    while( true ) {\u000a      line = line2;\u000a      if (poVar3->file == 1) {\u000a        line = line1;\u000a      }\u000a      psVar1 = &poVar3->field;\u000a      if (poVar3->file == 0) {\u000a        line = line_00;\u000a        psVar1 = psVar2;\u000a      }\u000a      prfield(*psVar1,line);\u000a      poVar3 = poVar3->next;\u000a      if (poVar3 == (outlist *)0x0) break;\u000a      putchar_unlocked(__c);\u000a    }\u000a  }\u000a  __c = 10;\u000a  if (eolchar != 0) {\u000a    __c = 0;\u000a  }\u000a  putchar_unlocked(__c);\u000a  return;\u000a}\u000a\u000a
p1179
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV R13,RDI\nMOV RBX,qword ptr [0x0060b350]\nTEST RBX,RBX\nJZ 0x00402dd4\nMOV EAX,dword ptr [0x0060b220]\nMOV ECX,0x60b368\nCMP R13,RCX\nMOV ECX,0x60b218\nMOV R12D,0x60b210\nCMOVZ R12,RCX\nMOV R15,R13\nCMOVZ R15,R14\nTEST EAX,EAX\nMOVSX EAX,AL\nMOV EBP,0x20\nCMOVNS EBP,EAX\nJMP 0x00402da7\nMOV EDI,EBP\nCALL 0x00401650\nMOV EAX,dword ptr [RBX]\nCMP EAX,0x1\nMOV RSI,R14\nCMOVZ RSI,R13\nLEA RCX,[RBX + 0x8]\nTEST EAX,EAX\nCMOVZ RCX,R12\nCMOVZ RSI,R15\nMOV RDI,qword ptr [RCX]\nCALL 0x00403090\nMOV RBX,qword ptr [RBX + 0x10]\nTEST RBX,RBX\nJNZ 0x00402da0\nJMP 0x00402e25\nMOV EAX,0x60b368\nCMP R13,RAX\nMOV RSI,R13\nCMOVZ RSI,R14\nMOV EAX,0x60b218\nMOV ECX,0x60b210\nCMOVZ RCX,RAX\nMOV RDI,qword ptr [RCX]\nCALL 0x00403090\nMOV RSI,qword ptr [0x0060b210]\nMOV RDX,qword ptr [0x0060b358]\nMOV RDI,R13\nCALL 0x004030f0\nMOV RSI,qword ptr [0x0060b218]\nMOV RDX,qword ptr [0x0060b360]\nMOV RDI,R14\nCALL 0x004030f0\nMOV AL,byte ptr [0x0060b30a]\nXOR ECX,ECX\nTEST AL,AL\nMOV EDI,0xa\nCMOVNZ EDI,ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00401650\n'
p1180
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f6\n49 89 fd\n48 8b 1d e8 85 20 00\n48 85 db\n74 67\n8b 05 ad 84 20 00\nb9 68 b3 60 00\n49 39 cd\nb9 18 b2 60 00\n41 bc 10 b2 60 00\n4c 0f 44 e1\n4d 89 ef\n4d 0f 44 fe\n85 c0\n0f be c0\nbd 20 00 00 00\n0f 49 e8\neb 07\n89 ef\ne8 a9 e8 ff ff\n8b 03\n83 f8 01\n4c 89 f6\n49 0f 44 f5\n48 8d 4b 08\n85 c0\n49 0f 44 cc\n49 0f 44 f7\n48 8b 39\ne8 c7 02 00 00\n48 8b 5b 10\n48 85 db\n75 ce\neb 51\nb8 68 b3 60 00\n49 39 c5\n4c 89 ee\n49 0f 44 f6\nb8 18 b2 60 00\nb9 10 b2 60 00\n48 0f 44 c8\n48 8b 39\ne8 97 02 00 00\n48 8b 35 10 84 20 00\n48 8b 15 51 85 20 00\n4c 89 ef\ne8 e1 02 00 00\n48 8b 35 02 84 20 00\n48 8b 15 43 85 20 00\n4c 89 f7\ne8 cb 02 00 00\n8a 05 df 84 20 00\n31 c9\n84 c0\nbf 0a 00 00 00\n0f 45 f9\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 06 e8 ff ff\n'
p1181
S'.text:0000000000402d50\n.text:0000000000402d51\n.text:0000000000402d53\n.text:0000000000402d55\n.text:0000000000402d57\n.text:0000000000402d59\n.text:0000000000402d5a\n.text:0000000000402d5b\n.text:0000000000402d5e\n.text:0000000000402d61\n.text:0000000000402d68\n.text:0000000000402d6b\n.text:0000000000402d6d\n.text:0000000000402d73\n.text:0000000000402d78\n.text:0000000000402d7b\n.text:0000000000402d80\n.text:0000000000402d86\n.text:0000000000402d8a\n.text:0000000000402d8d\n.text:0000000000402d91\n.text:0000000000402d93\n.text:0000000000402d96\n.text:0000000000402d9b\n.text:0000000000402d9e\n.text:0000000000402da0\n.text:0000000000402da2\n.text:0000000000402da7\n.text:0000000000402da9\n.text:0000000000402dac\n.text:0000000000402daf\n.text:0000000000402db3\n.text:0000000000402db7\n.text:0000000000402db9\n.text:0000000000402dbd\n.text:0000000000402dc1\n.text:0000000000402dc4\n.text:0000000000402dc9\n.text:0000000000402dcd\n.text:0000000000402dd0\n.text:0000000000402dd2\n.text:0000000000402dd4\n.text:0000000000402dd9\n.text:0000000000402ddc\n.text:0000000000402ddf\n.text:0000000000402de3\n.text:0000000000402de8\n.text:0000000000402ded\n.text:0000000000402df1\n.text:0000000000402df4\n.text:0000000000402df9\n.text:0000000000402e00\n.text:0000000000402e07\n.text:0000000000402e0a\n.text:0000000000402e0f\n.text:0000000000402e16\n.text:0000000000402e1d\n.text:0000000000402e20\n.text:0000000000402e25\n.text:0000000000402e2b\n.text:0000000000402e2d\n.text:0000000000402e2f\n.text:0000000000402e34\n.text:0000000000402e37\n.text:0000000000402e3b\n.text:0000000000402e3c\n.text:0000000000402e3e\n.text:0000000000402e40\n.text:0000000000402e42\n.text:0000000000402e44\n.text:0000000000402e45\n'
p1182
tp1183
sS'__ctype_b_loc'
p1184
(S'\n__stdcall __ctype_b_loc()\n'
p1185
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_0060b1f8)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p1186
S'JMP qword ptr [0x0060b1f8]\n'
p1187
S'ff 25 02 9a 20 00\n'
p1188
S'.plt:00000000004017f0\n'
p1189
tp1190
sS'fdadvise'
p1191
(S'\n__stdcall fdadvise(int __fd, __off_t __offset, __off_t __len, int __advise)\n'
p1192
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fdadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_posix_fadvise_0060b0e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p1193
S'JMP 0x004015d0\n'
p1194
S'e9 3b e0 ff ff\n'
p1195
S'.text:0000000000403590\n'
p1196
tp1197
sS'quotearg'
p1198
(S'\n__stdcall quotearg(char * arg)\n'
p1199
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1200
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x004047c0\n'
p1201
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1202
S'.text:00000000004049a0\n.text:00000000004049a3\n.text:00000000004049a5\n.text:00000000004049a8\n'
p1203
tp1204
sS'_start'
p1205
(S'\n__stdcall _start()\n'
p1206
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_0060aff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1207
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x406620\nMOV RCX,0x4065b0\nMOV RDI,0x401be0\nCALL qword ptr [0x0060aff0]\nHLT\n'
p1208
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 20 66 40 00\n48 c7 c1 b0 65 40 00\n48 c7 c7 e0 1b 40 00\nff 15 c6 97 20 00\nf4\n'
p1209
S'.text:0000000000401800\n.text:0000000000401802\n.text:0000000000401805\n.text:0000000000401806\n.text:0000000000401809\n.text:000000000040180d\n.text:000000000040180e\n.text:000000000040180f\n.text:0000000000401816\n.text:000000000040181d\n.text:0000000000401824\n.text:000000000040182a\n'
p1210
tp1211
sS'c_iscntrl'
p1212
(S'\n__stdcall c_iscntrl()\n'
p1213
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1214
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00405fd8\nRET\nCMP EDI,0x7f\nJZ 0x00405fd7\nXOR EAX,EAX\nRET\n'
p1215
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1216
S'.text:0000000000405fd0\n.text:0000000000405fd2\n.text:0000000000405fd5\n.text:0000000000405fd7\n.text:0000000000405fd8\n.text:0000000000405fdb\n.text:0000000000405fdd\n.text:0000000000405fdf\n'
p1217
tp1218
sS'c_isblank'
p1219
(S'\n__stdcall c_isblank()\n'
p1220
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1221
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1222
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1223
S'.text:0000000000405fc0\n.text:0000000000405fc3\n.text:0000000000405fc6\n.text:0000000000405fc9\n.text:0000000000405fcc\n.text:0000000000405fce\n'
p1224
tp1225
sS'atexit'
p1226
(S'\n__stdcall atexit(__func * __func)\n'
p1227
V\u000a/* WARNING: Removing unreachable block (ram,0x00406650) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_0060b1c0)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1228
S'MOV RAX,0x60b208\nTEST RAX,RAX\nJZ 0x00406650\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401780\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401780\n'
p1229
S'48 c7 c0 08 b2 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 3a b1 ff ff\n31 d2\n31 f6\ne9 27 b1 ff ff\n'
p1230
S'.text:0000000000406630\n.text:0000000000406637\n.text:000000000040663a\n.text:000000000040663c\n.text:000000000040663f\n.text:0000000000406641\n.text:0000000000406650\n.text:0000000000406652\n.text:0000000000406654\n'
p1231
tp1232
sS'fdopen'
p1233
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1234
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_0060b180)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1235
S'JMP qword ptr [0x0060b180]\n'
p1236
S'ff 25 7a 9a 20 00\n'
p1237
S'.plt:0000000000401700\n'
p1238
tp1239
sS'error'
p1240
(S'\n__stdcall error()\n'
p1241
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_0060b198)();\u000a  return;\u000a}\u000a\u000a
p1242
S'JMP qword ptr [0x0060b198]\n'
p1243
S'ff 25 62 9a 20 00\n'
p1244
S'.plt:0000000000401730\n'
p1245
tp1246
sS'readlinebuffer'
p1247
(S'\n__stdcall readlinebuffer(linebuffer * linebuffer, FILE * stream)\n'
p1248
V\u000alinebuffer * readlinebuffer(linebuffer *linebuffer,FILE *stream)\u000a\u000a{\u000a  linebuffer *plVar1;\u000a  \u000a  plVar1 = readlinebuffer_delim(linebuffer,stream);\u000a  return plVar1;\u000a}\u000a\u000a
p1249
S'MOV EDX,0xa\nJMP 0x004036b0\n'
p1250
S'ba 0a 00 00 00\neb 09\n'
p1251
S'.text:00000000004036a0\n.text:00000000004036a5\n'
p1252
tp1253
sS'strcaseeq6'
p1254
(S'\n__stdcall strcaseeq6()\n'
p1255
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1256
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00406060\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00405062\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00405069\nJMP 0x0040507e\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040507e\nTEST BPL,BPL\nJZ 0x00405079\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00405090\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1257
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 11 10 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1258
S'.text:0000000000405040\n.text:0000000000405041\n.text:0000000000405042\n.text:0000000000405043\n.text:0000000000405045\n.text:0000000000405048\n.text:000000000040504a\n.text:000000000040504f\n.text:0000000000405053\n.text:0000000000405055\n.text:0000000000405057\n.text:000000000040505a\n.text:000000000040505c\n.text:000000000040505e\n.text:0000000000405060\n.text:0000000000405062\n.text:0000000000405064\n.text:0000000000405067\n.text:0000000000405069\n.text:000000000040506c\n.text:000000000040506e\n.text:0000000000405071\n.text:0000000000405075\n.text:0000000000405076\n.text:0000000000405077\n.text:0000000000405079\n.text:000000000040507e\n.text:0000000000405082\n.text:0000000000405083\n.text:0000000000405084\n'
p1259
tp1260
sS'strcaseeq5'
p1261
(S'\n__stdcall strcaseeq5()\n'
p1262
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1263
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00406060\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00405016\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040501d\nJMP 0x00405034\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00405034\nTEST BPL,BPL\nJZ 0x0040502f\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00405040\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1264
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 5d 10 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1265
S'.text:0000000000404ff0\n.text:0000000000404ff1\n.text:0000000000404ff3\n.text:0000000000404ff4\n.text:0000000000404ff7\n.text:0000000000404ff9\n.text:0000000000404ffc\n.text:0000000000404ffe\n.text:0000000000405003\n.text:0000000000405007\n.text:0000000000405009\n.text:000000000040500b\n.text:000000000040500e\n.text:0000000000405010\n.text:0000000000405012\n.text:0000000000405014\n.text:0000000000405016\n.text:0000000000405018\n.text:000000000040501b\n.text:000000000040501d\n.text:0000000000405020\n.text:0000000000405022\n.text:0000000000405026\n.text:0000000000405029\n.text:000000000040502a\n.text:000000000040502c\n.text:000000000040502d\n.text:000000000040502f\n.text:0000000000405034\n.text:0000000000405035\n.text:0000000000405037\n.text:0000000000405038\n'
p1266
tp1267
sS'strcaseeq7'
p1268
(S'\n__stdcall strcaseeq7()\n'
p1269
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1270
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00406060\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x004050b2\nTEST ECX,0xffffffdf\nJNZ 0x004050b6\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x004050ba\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1271
S'53\n48 89 fb\n31 ff\ne8 c5 0f 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1272
S'.text:0000000000405090\n.text:0000000000405091\n.text:0000000000405094\n.text:0000000000405096\n.text:000000000040509b\n.text:000000000040509f\n.text:00000000004050a1\n.text:00000000004050a3\n.text:00000000004050a9\n.text:00000000004050ab\n.text:00000000004050b0\n.text:00000000004050b1\n.text:00000000004050b2\n.text:00000000004050b4\n.text:00000000004050b6\n.text:00000000004050b8\n.text:00000000004050b9\n.text:00000000004050ba\n.text:00000000004050bf\n.text:00000000004050c0\n'
p1273
tp1274
sS'strtoul'
p1275
(S'\n__stdcall strtoul(char * __nptr, char * * __endptr, int __base)\n'
p1276
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aulong strtoul(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  ulong uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoul_0060b1b8)();\u000a  return uVar1;\u000a}\u000a\u000a
p1277
S'JMP qword ptr [0x0060b1b8]\n'
p1278
S'ff 25 42 9a 20 00\n'
p1279
S'.plt:0000000000401770\n'
p1280
tp1281
sS'strcaseeq0'
p1282
(S'\n__stdcall strcaseeq0()\n'
p1283
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1284
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00406060\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00404dc5\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404dcc\nJMP 0x00404e00\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404e00\nTEST BPL,BPL\nJZ 0x00404dfb\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00404e10\nJMP 0x00404e00\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1285
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 ad 12 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1286
S'.text:0000000000404d90\n.text:0000000000404d91\n.text:0000000000404d93\n.text:0000000000404d95\n.text:0000000000404d97\n.text:0000000000404d99\n.text:0000000000404d9a\n.text:0000000000404d9b\n.text:0000000000404d9e\n.text:0000000000404da1\n.text:0000000000404da4\n.text:0000000000404da7\n.text:0000000000404da9\n.text:0000000000404dac\n.text:0000000000404dae\n.text:0000000000404db3\n.text:0000000000404db6\n.text:0000000000404db8\n.text:0000000000404dba\n.text:0000000000404dbd\n.text:0000000000404dbf\n.text:0000000000404dc1\n.text:0000000000404dc3\n.text:0000000000404dc5\n.text:0000000000404dc7\n.text:0000000000404dca\n.text:0000000000404dcc\n.text:0000000000404dcf\n.text:0000000000404dd1\n.text:0000000000404dd5\n.text:0000000000404dda\n.text:0000000000404ddd\n.text:0000000000404de1\n.text:0000000000404de5\n.text:0000000000404de9\n.text:0000000000404ded\n.text:0000000000404df1\n.text:0000000000404df4\n.text:0000000000404df9\n.text:0000000000404dfb\n.text:0000000000404e00\n.text:0000000000404e04\n.text:0000000000404e05\n.text:0000000000404e07\n.text:0000000000404e09\n.text:0000000000404e0b\n.text:0000000000404e0d\n.text:0000000000404e0e\n'
p1287
tp1288
sS'strcaseeq2'
p1289
(S'\n__stdcall strcaseeq2()\n'
p1290
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1291
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00406060\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00404ed6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404edd\nJMP 0x00404f0a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404f0a\nTEST BPL,BPL\nJZ 0x00404f05\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404f20\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1292
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 9d 11 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1293
S'.text:0000000000404ea0\n.text:0000000000404ea1\n.text:0000000000404ea3\n.text:0000000000404ea5\n.text:0000000000404ea7\n.text:0000000000404ea9\n.text:0000000000404eaa\n.text:0000000000404eab\n.text:0000000000404eae\n.text:0000000000404eb1\n.text:0000000000404eb4\n.text:0000000000404eb7\n.text:0000000000404eb9\n.text:0000000000404ebc\n.text:0000000000404ebe\n.text:0000000000404ec3\n.text:0000000000404ec7\n.text:0000000000404ec9\n.text:0000000000404ecb\n.text:0000000000404ece\n.text:0000000000404ed0\n.text:0000000000404ed2\n.text:0000000000404ed4\n.text:0000000000404ed6\n.text:0000000000404ed8\n.text:0000000000404edb\n.text:0000000000404edd\n.text:0000000000404ee0\n.text:0000000000404ee2\n.text:0000000000404ee6\n.text:0000000000404eea\n.text:0000000000404eee\n.text:0000000000404ef2\n.text:0000000000404ef5\n.text:0000000000404ef9\n.text:0000000000404efa\n.text:0000000000404efc\n.text:0000000000404efe\n.text:0000000000404f00\n.text:0000000000404f02\n.text:0000000000404f03\n.text:0000000000404f05\n.text:0000000000404f0a\n.text:0000000000404f0e\n.text:0000000000404f0f\n.text:0000000000404f11\n.text:0000000000404f13\n.text:0000000000404f15\n.text:0000000000404f17\n.text:0000000000404f18\n'
p1294
tp1295
sS'strcaseeq1'
p1296
(S'\n__stdcall strcaseeq1()\n'
p1297
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1298
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00406060\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x00404e4d\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404e54\nJMP 0x00404e87\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404e87\nTEST BPL,BPL\nJZ 0x00404e82\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404ea0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1299
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 26 12 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1300
S'.text:0000000000404e10\n.text:0000000000404e11\n.text:0000000000404e13\n.text:0000000000404e15\n.text:0000000000404e17\n.text:0000000000404e19\n.text:0000000000404e1a\n.text:0000000000404e1b\n.text:0000000000404e20\n.text:0000000000404e23\n.text:0000000000404e26\n.text:0000000000404e29\n.text:0000000000404e2b\n.text:0000000000404e2e\n.text:0000000000404e33\n.text:0000000000404e35\n.text:0000000000404e3a\n.text:0000000000404e3e\n.text:0000000000404e40\n.text:0000000000404e42\n.text:0000000000404e45\n.text:0000000000404e47\n.text:0000000000404e49\n.text:0000000000404e4b\n.text:0000000000404e4d\n.text:0000000000404e4f\n.text:0000000000404e52\n.text:0000000000404e54\n.text:0000000000404e57\n.text:0000000000404e59\n.text:0000000000404e5d\n.text:0000000000404e61\n.text:0000000000404e65\n.text:0000000000404e6b\n.text:0000000000404e6f\n.text:0000000000404e72\n.text:0000000000404e76\n.text:0000000000404e77\n.text:0000000000404e79\n.text:0000000000404e7b\n.text:0000000000404e7d\n.text:0000000000404e7f\n.text:0000000000404e80\n.text:0000000000404e82\n.text:0000000000404e87\n.text:0000000000404e8b\n.text:0000000000404e8c\n.text:0000000000404e8e\n.text:0000000000404e90\n.text:0000000000404e92\n.text:0000000000404e94\n.text:0000000000404e95\n'
p1301
tp1302
sS'FUN_00401420'
p1303
(S'\n__stdcall FUN_00401420()\n'
p1304
V\u000avoid FUN_00401420(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_0060b010)();\u000a  return;\u000a}\u000a\u000a
p1305
S'PUSH qword ptr [0x0060b008]\nJMP qword ptr [0x0060b010]\n'
p1306
S'ff 35 e2 9b 20 00\nff 25 e4 9b 20 00\n'
p1307
S'.plt:0000000000401420\n.plt:0000000000401426\n'
p1308
tp1309
sS'strcaseeq4'
p1310
(S'\n__stdcall strcaseeq4()\n'
p1311
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1312
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00406060\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x00404fbc\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404fc3\nJMP 0x00404fe4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404fe4\nTEST BPL,BPL\nJZ 0x00404fdf\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404ff0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1313
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 b7 10 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1314
S'.text:0000000000404f90\n.text:0000000000404f91\n.text:0000000000404f93\n.text:0000000000404f95\n.text:0000000000404f96\n.text:0000000000404f97\n.text:0000000000404f9a\n.text:0000000000404f9d\n.text:0000000000404f9f\n.text:0000000000404fa2\n.text:0000000000404fa4\n.text:0000000000404fa9\n.text:0000000000404fad\n.text:0000000000404faf\n.text:0000000000404fb1\n.text:0000000000404fb4\n.text:0000000000404fb6\n.text:0000000000404fb8\n.text:0000000000404fba\n.text:0000000000404fbc\n.text:0000000000404fbe\n.text:0000000000404fc1\n.text:0000000000404fc3\n.text:0000000000404fc6\n.text:0000000000404fc8\n.text:0000000000404fcc\n.text:0000000000404fd0\n.text:0000000000404fd3\n.text:0000000000404fd7\n.text:0000000000404fd8\n.text:0000000000404fda\n.text:0000000000404fdc\n.text:0000000000404fdd\n.text:0000000000404fdf\n.text:0000000000404fe4\n.text:0000000000404fe8\n.text:0000000000404fe9\n.text:0000000000404feb\n.text:0000000000404fed\n.text:0000000000404fee\n'
p1315
tp1316
sS'strcaseeq3'
p1317
(S'\n__stdcall strcaseeq3()\n'
p1318
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1319
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00406060\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00404f50\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404f57\nJMP 0x00404f7a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404f7a\nTEST BPL,BPL\nJZ 0x00404f75\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404f90\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1320
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 23 11 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1321
S'.text:0000000000404f20\n.text:0000000000404f21\n.text:0000000000404f23\n.text:0000000000404f25\n.text:0000000000404f27\n.text:0000000000404f28\n.text:0000000000404f2b\n.text:0000000000404f2e\n.text:0000000000404f31\n.text:0000000000404f33\n.text:0000000000404f36\n.text:0000000000404f38\n.text:0000000000404f3d\n.text:0000000000404f41\n.text:0000000000404f43\n.text:0000000000404f45\n.text:0000000000404f48\n.text:0000000000404f4a\n.text:0000000000404f4c\n.text:0000000000404f4e\n.text:0000000000404f50\n.text:0000000000404f52\n.text:0000000000404f55\n.text:0000000000404f57\n.text:0000000000404f5a\n.text:0000000000404f5c\n.text:0000000000404f60\n.text:0000000000404f64\n.text:0000000000404f68\n.text:0000000000404f6b\n.text:0000000000404f6c\n.text:0000000000404f6e\n.text:0000000000404f70\n.text:0000000000404f72\n.text:0000000000404f73\n.text:0000000000404f75\n.text:0000000000404f7a\n.text:0000000000404f7b\n.text:0000000000404f7d\n.text:0000000000404f7f\n.text:0000000000404f81\n.text:0000000000404f82\n'
p1322
tp1323
sS'register_tm_clones'
p1324
(S'\n__stdcall register_tm_clones()\n'
p1325
V\u000a/* WARNING: Removing unreachable block (ram,0x00401893) */\u000a/* WARNING: Removing unreachable block (ram,0x0040189d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1326
S'MOV ESI,0x60b298\nPUSH RBP\nSUB RSI,0x60b298\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x004018a8\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004018a8\nPOP RBP\nMOV EDI,0x60b298\nJMP RAX\nPOP RBP\nRET\n'
p1327
S'be 98 b2 60 00\n55\n48 81 ee 98 b2 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 98 b2 60 00\nff e0\n5d\nc3\n'
p1328
S'.text:0000000000401870\n.text:0000000000401875\n.text:0000000000401876\n.text:000000000040187d\n.text:0000000000401881\n.text:0000000000401884\n.text:0000000000401887\n.text:000000000040188b\n.text:000000000040188e\n.text:0000000000401891\n.text:0000000000401893\n.text:0000000000401898\n.text:000000000040189b\n.text:000000000040189d\n.text:000000000040189e\n.text:00000000004018a3\n.text:00000000004018a8\n.text:00000000004018a9\n'
p1329
tp1330
sS'xstrtoul'
p1331
(S'\n__stdcall xstrtoul(char * s, char * * ptr, ulong * val, char * valid_suffixes)\n'
p1332
V\u000astrtol_error xstrtoul(char *s,char **ptr,ulong *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  byte *pbVar8;\u000a  strtol_error sVar9;\u000a  strtol_error sVar10;\u000a  long lVar11;\u000a  char *__s;\u000a  char **__endptr;\u000a  ulong local_48;\u000a  ulong *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtoul(const char *, char **, int, unsigned long *, const char *)"\u000a                 );\u000a  }\u000a  local_40 = (ulong *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar8 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar8;\u000a    pbVar8 = pbVar8 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoul(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar9 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar9 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar9 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar10 = sVar9;\u000a    if (__s == (char *)0x0) goto LAB_00405b66;\u000a  }\u000a  pcVar6 = *__endptr;\u000a  sVar10 = sVar9;\u000a  if (*pcVar6 == 0) goto LAB_00405b66;\u000a  pcVar7 = strchr(__s,(int)*pcVar6);\u000a  if (pcVar7 == (char *)0x0) goto switchD_00405a95_caseD_43;\u000a  pcVar7 = strchr(__s,0x30);\u000a  if (pcVar7 == (char *)0x0) {\u000aLAB_00405a73:\u000a    lVar11 = 1;\u000a  }\u000a  else {\u000a    cVar2 = pcVar6[1];\u000a    if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a      lVar11 = 2;\u000a    }\u000a    else {\u000a      if (cVar2 != 'i') goto LAB_00405a73;\u000a      lVar11 = (ulong)(pcVar6[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_00405b47;\u000a  default:\u000aswitchD_00405a95_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'P':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Y':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Z':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'b':\u000a    goto LAB_00405b47;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_00405b47:\u000a    sVar3 = bkm_scale(&local_48);\u000a  }\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar10 = sVar3 | sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar10 = sVar3 | sVar9;\u000a  }\u000aLAB_00405b66:\u000a  *local_40 = local_48;\u000a  return sVar10;\u000a}\u000a\u000a
p1333
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x00405b83\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x00401470\nMOV R15,RAX\nMOV dword ptr [R15],0x0\nCALL 0x004017f0\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x00405980\nTEST RBX,RBX\nLEA R13,[RSP + 0x10]\nCMOVNZ R13,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x00405b72\nMOV RDI,RBP\nMOV RSI,R13\nMOV EDX,R14D\nCALL 0x00401770\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R13]\nCMP RAX,RBP\nJZ 0x004059e0\nMOV EAX,dword ptr [R15]\nTEST EAX,EAX\nJZ 0x00405a11\nCMP EAX,0x22\nJNZ 0x00405b72\nMOV EBX,0x1\nTEST R12,R12\nJNZ 0x00405a1c\nJMP 0x00405b66\nTEST R12,R12\nJZ 0x00405b72\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x00405b72\nMOV RDI,R12\nCALL 0x00401560\nTEST RAX,RAX\nJZ 0x00405b72\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x00405a1c\nXOR EBX,EBX\nTEST R12,R12\nJZ 0x00405b66\nMOV RBP,qword ptr [R13]\nMOVSX ESI,byte ptr [RBP]\nTEST ESI,ESI\nJZ 0x00405b66\nMOV RDI,R12\nCALL 0x00401560\nTEST RAX,RAX\nJZ 0x00405aae\nMOV ESI,0x30\nMOV RDI,R12\nCALL 0x00401560\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x00405a73\nMOVSX EAX,byte ptr [RBP + 0x1]\nCMP EAX,0x42\nJZ 0x00405a7a\nCMP EAX,0x44\nJZ 0x00405a7a\nCMP EAX,0x69\nJNZ 0x00405a73\nXOR EAX,EAX\nCMP byte ptr [RBP + 0x2],0x42\nSETZ AL\nLEA RBP,[RAX + RAX*0x1 + 0x1]\nJMP 0x00405a84\nMOV EBP,0x1\nJMP 0x00405a84\nMOV ESI,0x3e8\nMOV EBP,0x2\nMOV RAX,qword ptr [R13]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x00405aae\nXOR EAX,EAX\nJMP qword ptr [0x4081f0 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nCALL 0x00405bd0\nJMP 0x00405b4c\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x00405b72\nMOV RDI,RSP\nMOV EDX,0x1\nCALL 0x00405bd0\nJMP 0x00405b4c\nMOV RDI,RSP\nMOV EDX,0x2\nCALL 0x00405bd0\nJMP 0x00405b4c\nMOV RDI,RSP\nMOV EDX,0x4\nCALL 0x00405bd0\nJMP 0x00405b4c\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x00405b47\nMOV RDI,RSP\nMOV EDX,0x6\nCALL 0x00405bd0\nJMP 0x00405b4c\nMOV RDI,RSP\nMOV EDX,0x5\nCALL 0x00405bd0\nJMP 0x00405b4c\nMOV RDI,RSP\nMOV EDX,0x8\nCALL 0x00405bd0\nJMP 0x00405b4c\nMOV RDI,RSP\nMOV EDX,0x7\nCALL 0x00405bd0\nJMP 0x00405b4c\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x00405b47\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x00405ba0\nOR EAX,EBX\nMOV RCX,qword ptr [R13]\nLEA RDX,[RCX + RBP*0x1]\nMOV qword ptr [R13],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + RBP*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x4083a0\nMOV ESI,0x4083c6\nMOV EDX,0x60\nMOV ECX,0x4083d6\nCALL 0x00401590\n'
p1334
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c4\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 2f 02 00 00\n48 89 4c 24 08\ne8 12 bb ff ff\n49 89 c7\n41 c7 07 00 00 00 00\ne8 83 be ff ff\n48 8b 08\n48 89 ea\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 6c 24 10\n4c 0f 45 eb\nbb 04 00 00 00\n3c 2d\n0f 84 cc 01 00 00\n48 89 ef\n4c 89 ee\n44 89 f2\ne8 bc bd ff ff\n48 89 04 24\n49 8b 45 00\n48 39 e8\n74 1f\n41 8b 07\n85 c0\n74 49\n83 f8 22\n0f 85 a1 01 00 00\nbb 01 00 00 00\n4d 85 e4\n75 41\ne9 86 01 00 00\n4d 85 e4\n0f 84 89 01 00 00\n0f be 30\n85 f6\n0f 84 7e 01 00 00\n4c 89 e7\ne8 64 bb ff ff\n48 85 c0\n0f 84 6d 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 e4\n0f 84 4a 01 00 00\n49 8b 6d 00\n0f be 75 00\n85 f6\n0f 84 3a 01 00 00\n4c 89 e7\ne8 2c bb ff ff\n48 85 c0\n74 75\nbe 30 00 00 00\n4c 89 e7\ne8 1a bb ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 45 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7d 02 42\n0f 94 c0\n48 8d 6c 00 01\neb 11\nbd 01 00 00 00\neb 0a\nbe e8 03 00 00\nbd 02 00 00 00\n49 8b 45 00\n0f be 08\n83 c1 be\n83 f9 35\n77 1b\n31 c0\nff 24 cd f0 81 40 00\n48 89 e7\nba 03 00 00 00\ne8 27 01 00 00\ne9 9e 00 00 00\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 b0 00 00 00\n48 89 e7\nba 01 00 00 00\ne8 01 01 00 00\neb 7b\n48 89 e7\nba 02 00 00 00\ne8 f2 00 00 00\neb 6c\n48 89 e7\nba 04 00 00 00\ne8 e3 00 00 00\neb 5d\n48 89 e7\nbe 00 04 00 00\neb 4e\n48 89 e7\nba 06 00 00 00\ne8 ca 00 00 00\neb 44\n48 89 e7\nba 05 00 00 00\ne8 bb 00 00 00\neb 35\n48 89 e7\nba 08 00 00 00\ne8 ac 00 00 00\neb 26\n48 89 e7\nba 07 00 00 00\ne8 9d 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 54 00 00 00\n09 d8\n49 8b 4d 00\n48 8d 14 29\n49 89 55 00\n89 c3\n83 cb 02\n80 3c 29 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf a0 83 40 00\nbe c6 83 40 00\nba 60 00 00 00\nb9 d6 83 40 00\ne8 f4 b9 ff ff\n'
p1335
S'.text:0000000000405930\n.text:0000000000405931\n.text:0000000000405933\n.text:0000000000405935\n.text:0000000000405937\n.text:0000000000405939\n.text:000000000040593a\n.text:000000000040593e\n.text:0000000000405941\n.text:0000000000405944\n.text:0000000000405947\n.text:000000000040594a\n.text:000000000040594e\n.text:0000000000405954\n.text:0000000000405959\n.text:000000000040595e\n.text:0000000000405961\n.text:0000000000405968\n.text:000000000040596d\n.text:0000000000405970\n.text:0000000000405973\n.text:0000000000405980\n.text:0000000000405983\n.text:0000000000405986\n.text:000000000040598b\n.text:000000000040598d\n.text:0000000000405990\n.text:0000000000405995\n.text:0000000000405999\n.text:000000000040599e\n.text:00000000004059a0\n.text:00000000004059a6\n.text:00000000004059a9\n.text:00000000004059ac\n.text:00000000004059af\n.text:00000000004059b4\n.text:00000000004059b8\n.text:00000000004059bc\n.text:00000000004059bf\n.text:00000000004059c1\n.text:00000000004059c4\n.text:00000000004059c6\n.text:00000000004059c8\n.text:00000000004059cb\n.text:00000000004059d1\n.text:00000000004059d6\n.text:00000000004059d9\n.text:00000000004059db\n.text:00000000004059e0\n.text:00000000004059e3\n.text:00000000004059e9\n.text:00000000004059ec\n.text:00000000004059ee\n.text:00000000004059f4\n.text:00000000004059f7\n.text:00000000004059fc\n.text:00000000004059ff\n.text:0000000000405a05\n.text:0000000000405a0d\n.text:0000000000405a0f\n.text:0000000000405a11\n.text:0000000000405a13\n.text:0000000000405a16\n.text:0000000000405a1c\n.text:0000000000405a20\n.text:0000000000405a24\n.text:0000000000405a26\n.text:0000000000405a2c\n.text:0000000000405a2f\n.text:0000000000405a34\n.text:0000000000405a37\n.text:0000000000405a39\n.text:0000000000405a3e\n.text:0000000000405a41\n.text:0000000000405a46\n.text:0000000000405a4b\n.text:0000000000405a4e\n.text:0000000000405a50\n.text:0000000000405a54\n.text:0000000000405a57\n.text:0000000000405a59\n.text:0000000000405a5c\n.text:0000000000405a5e\n.text:0000000000405a61\n.text:0000000000405a63\n.text:0000000000405a65\n.text:0000000000405a69\n.text:0000000000405a6c\n.text:0000000000405a71\n.text:0000000000405a73\n.text:0000000000405a78\n.text:0000000000405a7a\n.text:0000000000405a7f\n.text:0000000000405a84\n.text:0000000000405a88\n.text:0000000000405a8b\n.text:0000000000405a8e\n.text:0000000000405a91\n.text:0000000000405a93\n.text:0000000000405a95\n.text:0000000000405a9c\n.text:0000000000405a9f\n.text:0000000000405aa4\n.text:0000000000405aa9\n.text:0000000000405aae\n.text:0000000000405ab2\n.text:0000000000405ab7\n.text:0000000000405aba\n.text:0000000000405abd\n.text:0000000000405ac2\n.text:0000000000405ac5\n.text:0000000000405aca\n.text:0000000000405acf\n.text:0000000000405ad1\n.text:0000000000405ad4\n.text:0000000000405ad9\n.text:0000000000405ade\n.text:0000000000405ae0\n.text:0000000000405ae3\n.text:0000000000405ae8\n.text:0000000000405aed\n.text:0000000000405aef\n.text:0000000000405af2\n.text:0000000000405af7\n.text:0000000000405af9\n.text:0000000000405afc\n.text:0000000000405b01\n.text:0000000000405b06\n.text:0000000000405b08\n.text:0000000000405b0b\n.text:0000000000405b10\n.text:0000000000405b15\n.text:0000000000405b17\n.text:0000000000405b1a\n.text:0000000000405b1f\n.text:0000000000405b24\n.text:0000000000405b26\n.text:0000000000405b29\n.text:0000000000405b2e\n.text:0000000000405b33\n.text:0000000000405b35\n.text:0000000000405b38\n.text:0000000000405b3d\n.text:0000000000405b3f\n.text:0000000000405b42\n.text:0000000000405b47\n.text:0000000000405b4c\n.text:0000000000405b4e\n.text:0000000000405b52\n.text:0000000000405b56\n.text:0000000000405b5a\n.text:0000000000405b5c\n.text:0000000000405b5f\n.text:0000000000405b63\n.text:0000000000405b66\n.text:0000000000405b6a\n.text:0000000000405b6f\n.text:0000000000405b72\n.text:0000000000405b74\n.text:0000000000405b78\n.text:0000000000405b79\n.text:0000000000405b7b\n.text:0000000000405b7d\n.text:0000000000405b7f\n.text:0000000000405b81\n.text:0000000000405b82\n.text:0000000000405b83\n.text:0000000000405b88\n.text:0000000000405b8d\n.text:0000000000405b92\n.text:0000000000405b97\n'
p1336
tp1337
sS'c_islower'
p1338
(S'\n__stdcall c_islower()\n'
p1339
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1340
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1341
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1342
S'.text:0000000000406000\n.text:0000000000406003\n.text:0000000000406006\n.text:0000000000406009\n'
p1343
tp1344
sS'freebuffer'
p1345
(S'\n__stdcall freebuffer(linebuffer * linebuffer)\n'
p1346
V\u000avoid freebuffer(linebuffer *linebuffer)\u000a\u000a{\u000a  free(linebuffer->buffer);\u000a  return;\u000a}\u000a\u000a
p1347
S'MOV RDI,qword ptr [RDI + 0x10]\nJMP 0x00401450\n'
p1348
S'48 8b 7f 10\ne9 d7 dc ff ff\n'
p1349
S'.text:0000000000403770\n.text:0000000000403774\n'
p1350
tp1351
sS'fwrite'
p1352
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1353
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_0060b1d0)();\u000a  return sVar1;\u000a}\u000a\u000a
p1354
S'JMP qword ptr [0x0060b1d0]\n'
p1355
S'ff 25 2a 9a 20 00\n'
p1356
S'.plt:00000000004017a0\n'
p1357
tp1358
sS'advance_seq'
p1359
(S'\n__stdcall advance_seq(FILE * fp, seq * seq)\n'
p1360
V\u000a_Bool advance_seq(FILE *fp,seq *seq)\u000a\u000a{\u000a  _Bool _Var1;\u000a  char in_DL;\u000a  \u000a  if (in_DL != 0) {\u000a    seq->count = 0;\u000a  }\u000a  _Var1 = getseq(fp,seq);\u000a  return _Var1;\u000a}\u000a\u000a
p1361
S'TEST DL,DL\nJZ 0x00402e5b\nMOV qword ptr [RSI],0x0\nMOV EDX,ECX\nJMP 0x00402cc0\n'
p1362
S'84 d2\n74 07\n48 c7 06 00 00 00 00\n89 ca\ne9 5e fe ff ff\n'
p1363
S'.text:0000000000402e50\n.text:0000000000402e52\n.text:0000000000402e54\n.text:0000000000402e5b\n.text:0000000000402e5d\n'
p1364
tp1365
sS'__do_global_dtors_aux'
p1366
(S'\n__stdcall __do_global_dtors_aux()\n'
p1367
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1368
S'CMP byte ptr [0x0060b2e8],0x0\nJNZ 0x004018ca\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00401830\nPOP RBP\nMOV byte ptr [0x0060b2e8],0x1\nRET\n'
p1369
S'80 3d 31 9a 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 1e 9a 20 00 01\nf3 c3\n'
p1370
S'.text:00000000004018b0\n.text:00000000004018b7\n.text:00000000004018b9\n.text:00000000004018ba\n.text:00000000004018bd\n.text:00000000004018c2\n.text:00000000004018c3\n.text:00000000004018ca\n'
p1371
tp1372
sS'c_isprint'
p1373
(S'\n__stdcall c_isprint()\n'
p1374
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1375
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1376
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1377
S'.text:0000000000406010\n.text:0000000000406013\n.text:0000000000406016\n.text:0000000000406019\n'
p1378
tp1379
sS'xmemcoll0'
p1380
(S'\n__stdcall xmemcoll0(char * s1, size_t s1size, char * s2, size_t s2size)\n'
p1381
V\u000aint xmemcoll0(char *s1,size_t s1size,char *s2,size_t s2size)\u000a\u000a{\u000a  int iVar1;\u000a  uint *puVar2;\u000a  \u000a  iVar1 = memcoll0(s1,s1size,s2,s2size);\u000a  puVar2 = (uint *)__errno_location();\u000a  if (*puVar2 != 0) {\u000a    collate_error((char *)(ulong)*puVar2,(size_t)s1,(char *)(s1size - 1),(size_t)s2);\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1382
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R15,RCX\nMOV R14,RDX\nMOV RBX,RSI\nMOV R12,RDI\nCALL 0x00406550\nMOV EBP,EAX\nCALL 0x00401470\nMOV EDI,dword ptr [RAX]\nTEST EDI,EDI\nJZ 0x0040591d\nDEC RBX\nDEC R15\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R14\nMOV R8,R15\nCALL 0x00405810\nMOV EAX,EBP\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1383
S'55\n41 57\n41 56\n41 54\n53\n49 89 cf\n49 89 d6\n48 89 f3\n49 89 fc\ne8 57 0c 00 00\n89 c5\ne8 70 bb ff ff\n8b 38\n85 ff\n74 17\n48 ff cb\n49 ff cf\n4c 89 e6\n48 89 da\n4c 89 f1\n4d 89 f8\ne8 f3 fe ff ff\n89 e8\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1384
S'.text:00000000004058e0\n.text:00000000004058e1\n.text:00000000004058e3\n.text:00000000004058e5\n.text:00000000004058e7\n.text:00000000004058e8\n.text:00000000004058eb\n.text:00000000004058ee\n.text:00000000004058f1\n.text:00000000004058f4\n.text:00000000004058f9\n.text:00000000004058fb\n.text:0000000000405900\n.text:0000000000405902\n.text:0000000000405904\n.text:0000000000405906\n.text:0000000000405909\n.text:000000000040590c\n.text:000000000040590f\n.text:0000000000405912\n.text:0000000000405915\n.text:0000000000405918\n.text:000000000040591d\n.text:000000000040591f\n.text:0000000000405920\n.text:0000000000405922\n.text:0000000000405924\n.text:0000000000405926\n.text:0000000000405927\n'
p1385
tp1386
sS'_fini'
p1387
(S'\n__stdcall _fini()\n'
p1388
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1389
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1390
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1391
S'.fini:000000000040665c\n.fini:0000000000406660\n.fini:0000000000406664\n'
p1392
tp1393
sS'add_field_list'
p1394
(S'\n__stdcall add_field_list(char * str)\n'
p1395
V\u000avoid add_field_list(char *str)\u000a\u000a{\u000a  char *pcVar1;\u000a  char *pcVar2;\u000a  uint local_2c;\u000a  size_t local_28;\u000a  \u000a  do {\u000a    pcVar1 = strpbrk(str,", \u005ct");\u000a    if (pcVar1 == (char *)0x0) {\u000a      pcVar2 = (char *)0x0;\u000a    }\u000a    else {\u000a      pcVar2 = pcVar1 + 1;\u000a      *pcVar1 = 0;\u000a    }\u000a    decode_field_spec(str,(int *)&local_2c,&local_28);\u000a    add_field((ulong)local_2c);\u000a    str = pcVar2;\u000a  } while (pcVar2 != (char *)0x0);\u000a  return;\u000a}\u000a\u000a
p1396
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,RDI\nLEA R14,[RSP + 0xc]\nLEA R15,[RSP + 0x10]\nNOP dword ptr [RAX + RAX*0x1]\nMOV ESI,0x407770\nMOV RDI,R12\nCALL 0x004016c0\nTEST RAX,RAX\nJZ 0x00402470\nMOV RBX,RAX\nINC RBX\nMOV byte ptr [RAX],0x0\nJMP 0x00402472\nXOR EBX,EBX\nMOV RDI,R12\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00402b40\nMOV EDI,dword ptr [RSP + 0xc]\nMOV RSI,qword ptr [RSP + 0x10]\nCALL 0x00402c30\nTEST RBX,RBX\nMOV R12,RBX\nJNZ 0x00402450\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p1397
S'41 57\n41 56\n41 54\n53\n48 83 ec 18\n49 89 fc\n4c 8d 74 24 0c\n4c 8d 7c 24 10\n0f 1f 84 00 00 00 00 00\nbe 70 77 40 00\n4c 89 e7\ne8 63 f2 ff ff\n48 85 c0\n74 0e\n48 89 c3\n48 ff c3\nc6 00 00\neb 05\n31 db\n4c 89 e7\n4c 89 f6\n4c 89 fa\ne8 c0 06 00 00\n8b 7c 24 0c\n48 8b 74 24 10\ne8 a2 07 00 00\n48 85 db\n49 89 dc\n75 ba\n48 83 c4 18\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p1398
S'.text:0000000000402430\n.text:0000000000402432\n.text:0000000000402434\n.text:0000000000402436\n.text:0000000000402437\n.text:000000000040243b\n.text:000000000040243e\n.text:0000000000402443\n.text:0000000000402448\n.text:0000000000402450\n.text:0000000000402455\n.text:0000000000402458\n.text:000000000040245d\n.text:0000000000402460\n.text:0000000000402462\n.text:0000000000402465\n.text:0000000000402468\n.text:000000000040246b\n.text:0000000000402470\n.text:0000000000402472\n.text:0000000000402475\n.text:0000000000402478\n.text:000000000040247b\n.text:0000000000402480\n.text:0000000000402484\n.text:0000000000402489\n.text:000000000040248e\n.text:0000000000402491\n.text:0000000000402494\n.text:0000000000402496\n.text:000000000040249a\n.text:000000000040249b\n.text:000000000040249d\n.text:000000000040249f\n.text:00000000004024a1\n'
p1399
tp1400
sS'rpl_fcntl'
p1401
(S'\n__stdcall rpl_fcntl()\n'
p1402
V\u000a/* WARNING: Removing unreachable block (ram,0x00405d9b) */\u000a/* WARNING: Removing unreachable block (ram,0x00405e04) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff38 : 0x00405da9 */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint rpl_fcntl(void...)\u000a\u000a{\u000a  int have_dupfd_cloexec;\u000a  int __fd;\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  int __cmd;\u000a  uint __fd_00;\u000a  va_list arg;\u000a  ulong local_c8;\u000a  \u000a  if (__cmd == 0x406) {\u000a    if (have_dupfd_cloexec < 0) {\u000a      __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a    }\u000a    else {\u000a      __fd = fcntl(__fd_00,0x406,local_c8 & 0xffffffff);\u000a      have_dupfd_cloexec = 1;\u000a      if ((__fd < 0) && (piVar3 = __errno_location(), *piVar3 == 0x16)) {\u000a        __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a        have_dupfd_cloexec = -1;\u000a        if (__fd < 0) {\u000a          return __fd;\u000a        }\u000a      }\u000a    }\u000a    if (((-1 < __fd) && (have_dupfd_cloexec == -1)) &&\u000a       ((uVar1 = fcntl(__fd,1), (int)uVar1 < 0 ||\u000a        (iVar2 = fcntl(__fd,2,(ulong)(uVar1 | 1),(ulong)(uVar1 | 1)), iVar2 == -1)))) {\u000a      piVar3 = __errno_location();\u000a      iVar2 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar2;\u000a      __fd = -1;\u000a    }\u000a  }\u000a  else {\u000a    __fd = fcntl(__fd_00,__cmd,local_c8);\u000a  }\u000a  return __fd;\u000a}\u000a\u000a
p1403
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0xd8\nMOV R14D,EDI\nTEST AL,AL\nJZ 0x00405d2b\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0x100 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RAX,dword ptr [RSP]\nCMP ESI,0x406\nJNZ 0x00405d86\nCMP EAX,0x28\nJA 0x00405d9b\nMOV RCX,qword ptr [RSP + 0x10]\nADD RCX,RAX\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x00405da9\nCMP EAX,0x28\nJA 0x00405e04\nMOV RCX,RAX\nADD RCX,qword ptr [RSP + 0x10]\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x00405e12\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV EBX,dword ptr [RCX]\nCMP dword ptr [0x0060b520],0x0\nJS 0x00405e23\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x004014d0\nMOV EBP,EAX\nMOV R15D,0x1\nTEST EBP,EBP\nJNS 0x00405df4\nCALL 0x00401470\nCMP dword ptr [RAX],0x16\nJNZ 0x00405df4\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00405ce0\nMOV EBP,EAX\nMOV R15D,0xffffffff\nTEST EBP,EBP\nJS 0x00405e86\nMOV dword ptr [0x0060b520],R15D\nTEST EBP,EBP\nJNS 0x00405e37\nJMP 0x00405e86\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RDX,qword ptr [RCX]\nXOR EAX,EAX\nMOV EDI,R14D\nCALL 0x004014d0\nMOV EBP,EAX\nJMP 0x00405e86\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00405ce0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00405e86\nCMP dword ptr [0x0060b520],-0x1\nJNZ 0x00405e86\nMOV ESI,0x1\nXOR EAX,EAX\nMOV EDI,EBP\nCALL 0x004014d0\nMOV ECX,EAX\nTEST ECX,ECX\nJS 0x00405e6c\nOR ECX,0x1\nMOV ESI,0x2\nXOR EAX,EAX\nMOV EDI,EBP\nMOV EDX,ECX\nCALL 0x004014d0\nCMP EAX,-0x1\nJNZ 0x00405e86\nCALL 0x00401470\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x004015c0\nMOV dword ptr [RBX],R14D\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0xd8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1404
S'55\n41 57\n41 56\n53\n48 81 ec d8 00 00 00\n41 89 fe\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 00 01 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 04 24\n81 fe 06 04 00 00\n75 15\n83 f8 28\n77 25\n48 8b 4c 24 10\n48 01 c1\n8d 40 08\n89 04 24\neb 23\n83 f8 28\n77 79\n48 89 c1\n48 03 4c 24 10\n8d 40 08\n89 04 24\neb 77\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n8b 19\n83 3d 6e 57 20 00 00\n78 6f\n31 c0\n44 89 f7\n89 da\ne8 10 b7 ff ff\n89 c5\n41 bf 01 00 00 00\n85 ed\n79 28\ne8 9f b6 ff ff\n83 38 16\n75 1e\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 fc fe ff ff\n89 c5\n41 bf ff ff ff ff\n85 ed\n0f 88 92 00 00 00\n44 89 3d 25 57 20 00\n85 ed\n79 38\ne9 82 00 00 00\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n48 8b 11\n31 c0\n44 89 f7\ne8 b1 b6 ff ff\n89 c5\neb 63\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 af fe ff ff\n89 c5\n85 ed\n78 4f\n83 3d e2 56 20 00 ff\n75 46\nbe 01 00 00 00\n31 c0\n89 ef\ne8 82 b6 ff ff\n89 c1\n85 c9\n78 18\n83 c9 01\nbe 02 00 00 00\n31 c0\n89 ef\n89 ca\ne8 69 b6 ff ff\n83 f8 ff\n75 1a\ne8 ff b5 ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 42 b7 ff ff\n44 89 33\nbd ff ff ff ff\n89 e8\n48 81 c4 d8 00 00 00\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1405
S'.text:0000000000405ce0\n.text:0000000000405ce1\n.text:0000000000405ce3\n.text:0000000000405ce5\n.text:0000000000405ce6\n.text:0000000000405ced\n.text:0000000000405cf0\n.text:0000000000405cf2\n.text:0000000000405cf4\n.text:0000000000405cf9\n.text:0000000000405cfe\n.text:0000000000405d03\n.text:0000000000405d0b\n.text:0000000000405d13\n.text:0000000000405d1b\n.text:0000000000405d23\n.text:0000000000405d2b\n.text:0000000000405d30\n.text:0000000000405d35\n.text:0000000000405d3a\n.text:0000000000405d3f\n.text:0000000000405d44\n.text:0000000000405d49\n.text:0000000000405d51\n.text:0000000000405d56\n.text:0000000000405d5e\n.text:0000000000405d65\n.text:0000000000405d69\n.text:0000000000405d6f\n.text:0000000000405d71\n.text:0000000000405d74\n.text:0000000000405d76\n.text:0000000000405d7b\n.text:0000000000405d7e\n.text:0000000000405d81\n.text:0000000000405d84\n.text:0000000000405d86\n.text:0000000000405d89\n.text:0000000000405d8b\n.text:0000000000405d8e\n.text:0000000000405d93\n.text:0000000000405d96\n.text:0000000000405d99\n.text:0000000000405d9b\n.text:0000000000405da0\n.text:0000000000405da4\n.text:0000000000405da9\n.text:0000000000405dab\n.text:0000000000405db2\n.text:0000000000405db4\n.text:0000000000405db6\n.text:0000000000405db9\n.text:0000000000405dbb\n.text:0000000000405dc0\n.text:0000000000405dc2\n.text:0000000000405dc8\n.text:0000000000405dca\n.text:0000000000405dcc\n.text:0000000000405dd1\n.text:0000000000405dd4\n.text:0000000000405dd6\n.text:0000000000405dd8\n.text:0000000000405dda\n.text:0000000000405ddd\n.text:0000000000405ddf\n.text:0000000000405de4\n.text:0000000000405de6\n.text:0000000000405dec\n.text:0000000000405dee\n.text:0000000000405df4\n.text:0000000000405dfb\n.text:0000000000405dfd\n.text:0000000000405dff\n.text:0000000000405e04\n.text:0000000000405e09\n.text:0000000000405e0d\n.text:0000000000405e12\n.text:0000000000405e15\n.text:0000000000405e17\n.text:0000000000405e1a\n.text:0000000000405e1f\n.text:0000000000405e21\n.text:0000000000405e23\n.text:0000000000405e25\n.text:0000000000405e27\n.text:0000000000405e2a\n.text:0000000000405e2c\n.text:0000000000405e31\n.text:0000000000405e33\n.text:0000000000405e35\n.text:0000000000405e37\n.text:0000000000405e3e\n.text:0000000000405e40\n.text:0000000000405e45\n.text:0000000000405e47\n.text:0000000000405e49\n.text:0000000000405e4e\n.text:0000000000405e50\n.text:0000000000405e52\n.text:0000000000405e54\n.text:0000000000405e57\n.text:0000000000405e5c\n.text:0000000000405e5e\n.text:0000000000405e60\n.text:0000000000405e62\n.text:0000000000405e67\n.text:0000000000405e6a\n.text:0000000000405e6c\n.text:0000000000405e71\n.text:0000000000405e74\n.text:0000000000405e77\n.text:0000000000405e79\n.text:0000000000405e7e\n.text:0000000000405e81\n.text:0000000000405e86\n.text:0000000000405e88\n.text:0000000000405e8f\n.text:0000000000405e90\n.text:0000000000405e92\n.text:0000000000405e94\n.text:0000000000405e95\n'
p1406
tp1407
sS'__fpending'
p1408
(S'\n__stdcall __fpending()\n'
p1409
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_0060b058)();\u000a  return;\u000a}\u000a\u000a
p1410
S'JMP qword ptr [0x0060b058]\n'
p1411
S'ff 25 a2 9b 20 00\n'
p1412
S'.plt:00000000004014b0\n'
p1413
tp1414
s.