(dp0
S'ungetc'
p1
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p2
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_00619278)();\u000a  return iVar1;\u000a}\u000a\u000a
p3
S'JMP qword ptr [0x00619278]\n'
p4
S'ff 25 02 6d 21 00\n'
p5
S'.plt:0000000000402570\n'
p6
tp7
sS'emit_verbose'
p8
(S'\n__stdcall emit_verbose(char * src, char * dst, char * backup_dst_name)\n'
p9
V\u000avoid emit_verbose(char *src,char *dst,char *backup_dst_name)\u000a\u000a{\u000a  char *pcVar1;\u000a  char *pcVar2;\u000a  undefined8 uVar3;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  pcVar2 = quotearg_n_style((char *)0x1);\u000a  __printf_chk(1,0x412a1e,pcVar1,pcVar2);\u000a  if (backup_dst_name != (char *)0x0) {\u000a    uVar3 = dcgettext(0," (backup: %s)",5);\u000a    pcVar1 = quotearg_style((char *)0x4);\u000a    __printf_chk(1,uVar3,pcVar1,pcVar1);\u000a  }\u000a  (*(code *)PTR_putchar_unlocked_00619230)(10);\u000a  return;\u000a}\u000a\u000a
p10
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RDX\nMOV RBX,RSI\nMOV RAX,RDI\nXOR EDI,EDI\nMOV ESI,0x4\nMOV RDX,RAX\nCALL 0x0040b880\nMOV R15,RAX\nMOV EDI,0x1\nMOV ESI,0x4\nMOV RDX,RBX\nCALL 0x0040b880\nMOV RCX,RAX\nMOV EDI,0x1\nMOV ESI,0x412a1e\nXOR EAX,EAX\nMOV RDX,R15\nCALL 0x00402600\nTEST R14,R14\nJZ 0x00406444\nXOR EDI,EDI\nMOV ESI,0x412e98\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,R14\nCALL 0x0040b960\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RBX\nMOV RDX,RCX\nCALL 0x00402600\nMOV EDI,0xa\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x004024e0\n'
p11
S'41 57\n41 56\n53\n49 89 d6\n48 89 f3\n48 89 f8\n31 ff\nbe 04 00 00 00\n48 89 c2\ne8 a3 54 00 00\n49 89 c7\nbf 01 00 00 00\nbe 04 00 00 00\n48 89 da\ne8 8e 54 00 00\n48 89 c1\nbf 01 00 00 00\nbe 1e 2a 41 00\n31 c0\n4c 89 fa\ne8 f7 c1 ff ff\n4d 85 f6\n74 36\n31 ff\nbe 98 2e 41 00\nba 05 00 00 00\ne8 51 be ff ff\n48 89 c3\nbf 04 00 00 00\n4c 89 f6\ne8 31 55 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n48 89 de\n48 89 ca\ne8 bc c1 ff ff\nbf 0a 00 00 00\n5b\n41 5e\n41 5f\ne9 8d c0 ff ff\n'
p12
S'.text:00000000004063c0\n.text:00000000004063c2\n.text:00000000004063c4\n.text:00000000004063c5\n.text:00000000004063c8\n.text:00000000004063cb\n.text:00000000004063ce\n.text:00000000004063d0\n.text:00000000004063d5\n.text:00000000004063d8\n.text:00000000004063dd\n.text:00000000004063e0\n.text:00000000004063e5\n.text:00000000004063ea\n.text:00000000004063ed\n.text:00000000004063f2\n.text:00000000004063f5\n.text:00000000004063fa\n.text:00000000004063ff\n.text:0000000000406401\n.text:0000000000406404\n.text:0000000000406409\n.text:000000000040640c\n.text:000000000040640e\n.text:0000000000406410\n.text:0000000000406415\n.text:000000000040641a\n.text:000000000040641f\n.text:0000000000406422\n.text:0000000000406427\n.text:000000000040642a\n.text:000000000040642f\n.text:0000000000406432\n.text:0000000000406437\n.text:0000000000406439\n.text:000000000040643c\n.text:000000000040643f\n.text:0000000000406444\n.text:0000000000406449\n.text:000000000040644a\n.text:000000000040644c\n.text:000000000040644e\n'
p13
tp14
sS'dev_info_hash'
p15
(S'\n__stdcall dev_info_hash(void * x, size_t table_size)\n'
p16
V\u000asize_t dev_info_hash(void *x,size_t table_size)\u000a\u000a{\u000a  return *(ulong *)x % table_size;\u000a}\u000a\u000a
p17
S'MOV RAX,qword ptr [RDI]\nXOR EDX,EDX\nDIV RSI\nMOV RAX,RDX\nRET\n'
p18
S'48 8b 07\n31 d2\n48 f7 f6\n48 89 d0\nc3\n'
p19
S'.text:000000000040cd00\n.text:000000000040cd03\n.text:000000000040cd05\n.text:000000000040cd08\n.text:000000000040cd0b\n'
p20
tp21
sS'version_etc_arn'
p22
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p23
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_00413a8b,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x40d5a7;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x40d628;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x40d6bc;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p24
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x0040d438\nMOV EDX,0x413a78\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00402740\nJMP 0x0040d44d\nMOV EDX,0x413a84\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00402740\nXOR EDI,EDI\nMOV ESI,0x413a8b\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x413d40\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00402740\nXOR EDI,EDI\nMOV ESI,0x413a8f\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00402440\nCMP R12,0x9\nJA 0x0040d4d6\nJMP qword ptr [0x413a28 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x413b5a\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00402740\nXOR EDI,EDI\nMOV ESI,0x413c99\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00402740\nADD RSP,0x38\nJMP 0x0040d747\nXOR EDI,EDI\nMOV ESI,0x413b6a\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00402740\nXOR EDI,EDI\nMOV ESI,0x413b81\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00402740\nXOR EDI,EDI\nMOV ESI,0x413b9d\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00402740\nADD RSP,0x18\nJMP 0x0040d747\nXOR EDI,EDI\nMOV ESI,0x413bbd\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00402740\nADD RSP,0x18\nJMP 0x0040d747\nXOR EDI,EDI\nMOV ESI,0x413be1\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00402740\nADD RSP,0x28\nJMP 0x0040d747\nXOR EDI,EDI\nMOV ESI,0x413c09\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00402740\nADD RSP,0x28\nJMP 0x0040d747\nXOR EDI,EDI\nMOV ESI,0x413c35\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00402740\nADD RSP,0x38\nJMP 0x0040d747\nXOR EDI,EDI\nMOV ESI,0x413c65\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00402740\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x004020f0\n'
p25
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba 78 3a 41 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 0a 53 ff ff\neb 15\nba 84 3a 41 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 f3 52 ff ff\n31 ff\nbe 8b 3a 41 00\nba 05 00 00 00\ne8 12 4e ff ff\n48 89 c1\nbe 01 00 00 00\nba 40 3d 41 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 c5 52 ff ff\n31 ff\nbe 8f 3a 41 00\nba 05 00 00 00\ne8 e4 4d ff ff\n48 89 c7\n4c 89 f6\ne8 a9 4f ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 28 3a 41 00\n31 ff\nbe 5a 3b 41 00\nba 05 00 00 00\ne8 ba 4d ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 6a 52 ff ff\n31 ff\nbe 99 3c 41 00\nba 05 00 00 00\ne8 89 4d ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 21 52 ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe 6a 3b 41 00\nba 05 00 00 00\ne8 37 4d ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 e3 51 ff ff\n31 ff\nbe 81 3b 41 00\nba 05 00 00 00\ne8 02 4d ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 aa 51 ff ff\n31 ff\nbe 9d 3b 41 00\nba 05 00 00 00\ne8 c9 4c ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 74 51 ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe bd 3b 41 00\nba 05 00 00 00\ne8 8a 4c ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 32 51 ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe e1 3b 41 00\nba 05 00 00 00\ne8 48 4c ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 e8 50 ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe 09 3c 41 00\nba 05 00 00 00\ne8 fe 4b ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 9e 50 ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe 35 3c 41 00\nba 05 00 00 00\ne8 b4 4b ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 4c 50 ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe 65 3c 41 00\nba 05 00 00 00\ne8 65 4b ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 fd 4f ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 9c 49 ff ff\n'
p26
S'.text:000000000040d400\n.text:000000000040d402\n.text:000000000040d404\n.text:000000000040d406\n.text:000000000040d407\n.text:000000000040d408\n.text:000000000040d40b\n.text:000000000040d40e\n.text:000000000040d411\n.text:000000000040d414\n.text:000000000040d417\n.text:000000000040d41a\n.text:000000000040d41f\n.text:000000000040d422\n.text:000000000040d424\n.text:000000000040d429\n.text:000000000040d42b\n.text:000000000040d42e\n.text:000000000040d431\n.text:000000000040d436\n.text:000000000040d438\n.text:000000000040d43d\n.text:000000000040d43f\n.text:000000000040d442\n.text:000000000040d445\n.text:000000000040d448\n.text:000000000040d44d\n.text:000000000040d44f\n.text:000000000040d454\n.text:000000000040d459\n.text:000000000040d45e\n.text:000000000040d461\n.text:000000000040d466\n.text:000000000040d46b\n.text:000000000040d471\n.text:000000000040d473\n.text:000000000040d476\n.text:000000000040d47b\n.text:000000000040d47d\n.text:000000000040d482\n.text:000000000040d487\n.text:000000000040d48c\n.text:000000000040d48f\n.text:000000000040d492\n.text:000000000040d497\n.text:000000000040d49b\n.text:000000000040d49d\n.text:000000000040d4a5\n.text:000000000040d4a7\n.text:000000000040d4ac\n.text:000000000040d4b1\n.text:000000000040d4b6\n.text:000000000040d4b9\n.text:000000000040d4bc\n.text:000000000040d4c1\n.text:000000000040d4c3\n.text:000000000040d4c6\n.text:000000000040d4ca\n.text:000000000040d4cb\n.text:000000000040d4cd\n.text:000000000040d4cf\n.text:000000000040d4d1\n.text:000000000040d4d6\n.text:000000000040d4d8\n.text:000000000040d4dd\n.text:000000000040d4e2\n.text:000000000040d4e7\n.text:000000000040d4ea\n.text:000000000040d4ed\n.text:000000000040d4f1\n.text:000000000040d4f5\n.text:000000000040d4fa\n.text:000000000040d4ff\n.text:000000000040d502\n.text:000000000040d506\n.text:000000000040d50a\n.text:000000000040d50e\n.text:000000000040d512\n.text:000000000040d516\n.text:000000000040d51a\n.text:000000000040d51f\n.text:000000000040d523\n.text:000000000040d528\n.text:000000000040d52a\n.text:000000000040d52f\n.text:000000000040d534\n.text:000000000040d539\n.text:000000000040d53c\n.text:000000000040d53f\n.text:000000000040d543\n.text:000000000040d548\n.text:000000000040d54a\n.text:000000000040d54d\n.text:000000000040d551\n.text:000000000040d552\n.text:000000000040d554\n.text:000000000040d556\n.text:000000000040d558\n.text:000000000040d55d\n.text:000000000040d55f\n.text:000000000040d564\n.text:000000000040d569\n.text:000000000040d56e\n.text:000000000040d571\n.text:000000000040d574\n.text:000000000040d578\n.text:000000000040d57c\n.text:000000000040d581\n.text:000000000040d583\n.text:000000000040d586\n.text:000000000040d58a\n.text:000000000040d58b\n.text:000000000040d58d\n.text:000000000040d58f\n.text:000000000040d591\n.text:000000000040d596\n.text:000000000040d598\n.text:000000000040d59d\n.text:000000000040d5a2\n.text:000000000040d5a7\n.text:000000000040d5aa\n.text:000000000040d5ad\n.text:000000000040d5b1\n.text:000000000040d5b5\n.text:000000000040d5b9\n.text:000000000040d5be\n.text:000000000040d5c0\n.text:000000000040d5c3\n.text:000000000040d5c7\n.text:000000000040d5cc\n.text:000000000040d5d0\n.text:000000000040d5d5\n.text:000000000040d5d7\n.text:000000000040d5dc\n.text:000000000040d5e1\n.text:000000000040d5e6\n.text:000000000040d5e9\n.text:000000000040d5ec\n.text:000000000040d5f0\n.text:000000000040d5f4\n.text:000000000040d5f9\n.text:000000000040d5fe\n.text:000000000040d601\n.text:000000000040d605\n.text:000000000040d609\n.text:000000000040d60e\n.text:000000000040d612\n.text:000000000040d617\n.text:000000000040d619\n.text:000000000040d61e\n.text:000000000040d623\n.text:000000000040d628\n.text:000000000040d62b\n.text:000000000040d62e\n.text:000000000040d632\n.text:000000000040d636\n.text:000000000040d63a\n.text:000000000040d63f\n.text:000000000040d644\n.text:000000000040d647\n.text:000000000040d64b\n.text:000000000040d64f\n.text:000000000040d653\n.text:000000000040d658\n.text:000000000040d65c\n.text:000000000040d661\n.text:000000000040d663\n.text:000000000040d668\n.text:000000000040d66d\n.text:000000000040d672\n.text:000000000040d675\n.text:000000000040d678\n.text:000000000040d67c\n.text:000000000040d680\n.text:000000000040d685\n.text:000000000040d68a\n.text:000000000040d68d\n.text:000000000040d691\n.text:000000000040d695\n.text:000000000040d699\n.text:000000000040d69d\n.text:000000000040d6a2\n.text:000000000040d6a6\n.text:000000000040d6ab\n.text:000000000040d6ad\n.text:000000000040d6b2\n.text:000000000040d6b7\n.text:000000000040d6bc\n.text:000000000040d6bf\n.text:000000000040d6c2\n.text:000000000040d6c6\n.text:000000000040d6ca\n.text:000000000040d6ce\n.text:000000000040d6d3\n.text:000000000040d6d8\n.text:000000000040d6db\n.text:000000000040d6df\n.text:000000000040d6e3\n.text:000000000040d6e7\n.text:000000000040d6eb\n.text:000000000040d6ef\n.text:000000000040d6f4\n.text:000000000040d6f8\n.text:000000000040d6fa\n.text:000000000040d6fc\n.text:000000000040d701\n.text:000000000040d706\n.text:000000000040d70b\n.text:000000000040d70e\n.text:000000000040d711\n.text:000000000040d715\n.text:000000000040d719\n.text:000000000040d71e\n.text:000000000040d723\n.text:000000000040d726\n.text:000000000040d72a\n.text:000000000040d72e\n.text:000000000040d732\n.text:000000000040d736\n.text:000000000040d73a\n.text:000000000040d73e\n.text:000000000040d743\n.text:000000000040d747\n.text:000000000040d748\n.text:000000000040d74a\n.text:000000000040d74c\n.text:000000000040d74e\n.text:000000000040d74f\n'
p27
tp28
sS'fts_maxarglen'
p29
(S'\n__stdcall fts_maxarglen(char * * argv)\n'
p30
V\u000asize_t fts_maxarglen(char **argv)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *__s;\u000a  ulong uVar2;\u000a  size_t sVar3;\u000a  \u000a  __s = *argv;\u000a  if (__s == (char *)0x0) {\u000a    sVar3 = 1;\u000a  }\u000a  else {\u000a    argv = argv + 1;\u000a    uVar2 = 0;\u000a    do {\u000a      sVar1 = strlen(__s);\u000a      if (uVar2 < sVar1) {\u000a        uVar2 = sVar1;\u000a      }\u000a      __s = *argv;\u000a      argv = argv + 1;\u000a    } while (__s != (char *)0x0);\u000a    sVar3 = uVar2 + 1;\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p31
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV RDI,qword ptr [RBX]\nTEST RDI,RDI\nJZ 0x0040e28d\nADD RBX,0x8\nXOR R14D,R14D\nNOP word ptr CS:[RAX + RAX*0x1]\nCALL 0x00402290\nCMP RAX,R14\nCMOVA R14,RAX\nMOV RDI,qword ptr [RBX]\nADD RBX,0x8\nTEST RDI,RDI\nJNZ 0x0040e270\nINC R14\nJMP 0x0040e293\nMOV R14D,0x1\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p32
S'41 56\n53\n50\n48 89 fb\n48 8b 3b\n48 85 ff\n74 2e\n48 83 c3 08\n45 31 f6\n66 2e 0f 1f 84 00 00 00 00 00\ne8 1b 40 ff ff\n4c 39 f0\n4c 0f 47 f0\n48 8b 3b\n48 83 c3 08\n48 85 ff\n75 e8\n49 ff c6\neb 06\n41 be 01 00 00 00\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p33
S'.text:000000000040e250\n.text:000000000040e252\n.text:000000000040e253\n.text:000000000040e254\n.text:000000000040e257\n.text:000000000040e25a\n.text:000000000040e25d\n.text:000000000040e25f\n.text:000000000040e263\n.text:000000000040e266\n.text:000000000040e270\n.text:000000000040e275\n.text:000000000040e278\n.text:000000000040e27c\n.text:000000000040e27f\n.text:000000000040e283\n.text:000000000040e286\n.text:000000000040e288\n.text:000000000040e28b\n.text:000000000040e28d\n.text:000000000040e293\n.text:000000000040e296\n.text:000000000040e29a\n.text:000000000040e29b\n.text:000000000040e29d\n'
p34
tp35
sS'transfer_entries'
p36
(S'\n__stdcall transfer_entries(Hash_table * dst, Hash_table * src)\n'
p37
V\u000a_Bool transfer_entries(Hash_table *dst,Hash_table *src)\u000a\u000a{\u000a  void *key;\u000a  hash_entry *phVar1;\u000a  hash_entry *entry;\u000a  hash_entry *phVar2;\u000a  char in_DL;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar3 = src->bucket;\u000a  if (phVar3 < src->bucket_limit) {\u000a    do {\u000a      if (phVar3->data != (void *)0x0) {\u000a        entry = phVar3->next;\u000a        while (entry != (hash_entry *)0x0) {\u000a          key = entry->data;\u000a          phVar1 = safe_hasher(dst,key);\u000a          phVar2 = entry->next;\u000a          if (phVar1->data == (void *)0x0) {\u000a            phVar1->data = key;\u000a            dst->n_buckets_used = dst->n_buckets_used + 1;\u000a            free_entry(dst,entry);\u000a            entry = phVar2;\u000a          }\u000a          else {\u000a            entry->next = phVar1->next;\u000a            phVar1->next = entry;\u000a            entry = phVar2;\u000a          }\u000a        }\u000a        key = phVar3->data;\u000a        phVar3->next = (hash_entry *)0x0;\u000a        if (in_DL == 0) {\u000a          entry = safe_hasher(dst,key);\u000a          if (entry->data == (void *)0x0) {\u000a            entry->data = key;\u000a            dst->n_buckets_used = dst->n_buckets_used + 1;\u000a          }\u000a          else {\u000a            phVar2 = allocate_entry(dst);\u000a            if (phVar2 == (hash_entry *)0x0) {\u000a              return false;\u000a            }\u000a            phVar2->data = key;\u000a            phVar2->next = entry->next;\u000a            entry->next = phVar2;\u000a          }\u000a          phVar3->data = (void *)0x0;\u000a          src->n_buckets_used = src->n_buckets_used - 1;\u000a        }\u000a      }\u000a      phVar3 = phVar3 + 1;\u000a    } while (phVar3 < src->bucket_limit);\u000a  }\u000a  return true;\u000a}\u000a\u000a
p38
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12D,EDX\nMOV RBP,RSI\nMOV R14,RDI\nMOV R15,qword ptr [RBP]\nMOV AL,0x1\nCMP R15,qword ptr [RBP + 0x8]\nJNC 0x00409fb2\nMOV qword ptr [RSP],RBP\nNOP dword ptr [RAX + RAX*0x1]\nCMP qword ptr [R15],0x0\nJZ 0x00409fa2\nMOV RBX,qword ptr [R15 + 0x8]\nTEST RBX,RBX\nJZ 0x00409f4a\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV R13,qword ptr [RBX]\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x004097c0\nMOV RBP,qword ptr [RBX + 0x8]\nCMP qword ptr [RAX],0x0\nJZ 0x00409f30\nMOV RCX,qword ptr [RAX + 0x8]\nMOV qword ptr [RBX + 0x8],RCX\nMOV qword ptr [RAX + 0x8],RBX\nJMP 0x00409f42\nMOV qword ptr [RAX],R13\nINC qword ptr [R14 + 0x18]\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x0040a530\nTEST RBP,RBP\nMOV RBX,RBP\nJNZ 0x00409f00\nMOV R13,qword ptr [R15]\nMOV qword ptr [R15 + 0x8],0x0\nTEST R12B,R12B\nMOV RBP,qword ptr [RSP]\nJNZ 0x00409fa2\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x004097c0\nMOV RBX,RAX\nCMP qword ptr [RBX],0x0\nJZ 0x00409f90\nMOV RDI,R14\nCALL 0x0040a270\nTEST RAX,RAX\nJZ 0x00409fc1\nMOV qword ptr [RAX],R13\nMOV RCX,qword ptr [RBX + 0x8]\nMOV qword ptr [RAX + 0x8],RCX\nMOV qword ptr [RBX + 0x8],RAX\nJMP 0x00409f97\nMOV qword ptr [RBX],R13\nINC qword ptr [R14 + 0x18]\nMOV qword ptr [R15],0x0\nDEC qword ptr [RBP + 0x18]\nADD R15,0x10\nCMP R15,qword ptr [RBP + 0x8]\nJC 0x00409ee0\nMOV AL,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EAX,EAX\nJMP 0x00409fb2\n'
p39
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n41 89 d4\n48 89 f5\n49 89 fe\n4c 8b 7d 00\nb0 01\n4c 3b 7d 08\n0f 83 de 00 00 00\n48 89 2c 24\n0f 1f 84 00 00 00 00 00\n49 83 3f 00\n0f 84 b8 00 00 00\n49 8b 5f 08\n48 85 db\n74 57\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 8b 2b\n4c 89 f7\n4c 89 ee\ne8 b2 f8 ff ff\n48 8b 6b 08\n48 83 38 00\n74 18\n48 8b 48 08\n48 89 4b 08\n48 89 58 08\neb 1c\n4c 89 28\n49 ff 46 18\n4c 89 f7\n48 89 de\ne8 ee 05 00 00\n48 85 ed\n48 89 eb\n75 b6\n4d 8b 2f\n49 c7 47 08 00 00 00 00\n45 84 e4\n48 8b 2c 24\n75 44\n4c 89 f7\n4c 89 ee\ne8 57 f8 ff ff\n48 89 c3\n48 83 3b 00\n74 1e\n4c 89 f7\ne8 f6 02 00 00\n48 85 c0\n74 42\n4c 89 28\n48 8b 4b 08\n48 89 48 08\n48 89 43 08\neb 07\n4c 89 2b\n49 ff 46 18\n49 c7 07 00 00 00 00\n48 ff 4d 18\n49 83 c7 10\n4c 3b 7d 08\n0f 82 30 ff ff ff\nb0 01\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 c0\neb ed\n'
p40
S'.text:0000000000409eb0\n.text:0000000000409eb1\n.text:0000000000409eb3\n.text:0000000000409eb5\n.text:0000000000409eb7\n.text:0000000000409eb9\n.text:0000000000409eba\n.text:0000000000409ebb\n.text:0000000000409ebe\n.text:0000000000409ec1\n.text:0000000000409ec4\n.text:0000000000409ec8\n.text:0000000000409eca\n.text:0000000000409ece\n.text:0000000000409ed4\n.text:0000000000409ed8\n.text:0000000000409ee0\n.text:0000000000409ee4\n.text:0000000000409eea\n.text:0000000000409eee\n.text:0000000000409ef1\n.text:0000000000409ef3\n.text:0000000000409f00\n.text:0000000000409f03\n.text:0000000000409f06\n.text:0000000000409f09\n.text:0000000000409f0e\n.text:0000000000409f12\n.text:0000000000409f16\n.text:0000000000409f18\n.text:0000000000409f1c\n.text:0000000000409f20\n.text:0000000000409f24\n.text:0000000000409f30\n.text:0000000000409f33\n.text:0000000000409f37\n.text:0000000000409f3a\n.text:0000000000409f3d\n.text:0000000000409f42\n.text:0000000000409f45\n.text:0000000000409f48\n.text:0000000000409f4a\n.text:0000000000409f4d\n.text:0000000000409f55\n.text:0000000000409f58\n.text:0000000000409f5c\n.text:0000000000409f5e\n.text:0000000000409f61\n.text:0000000000409f64\n.text:0000000000409f69\n.text:0000000000409f6c\n.text:0000000000409f70\n.text:0000000000409f72\n.text:0000000000409f75\n.text:0000000000409f7a\n.text:0000000000409f7d\n.text:0000000000409f7f\n.text:0000000000409f82\n.text:0000000000409f86\n.text:0000000000409f8a\n.text:0000000000409f8e\n.text:0000000000409f90\n.text:0000000000409f93\n.text:0000000000409f97\n.text:0000000000409f9e\n.text:0000000000409fa2\n.text:0000000000409fa6\n.text:0000000000409faa\n.text:0000000000409fb0\n.text:0000000000409fb2\n.text:0000000000409fb6\n.text:0000000000409fb7\n.text:0000000000409fb9\n.text:0000000000409fbb\n.text:0000000000409fbd\n.text:0000000000409fbf\n.text:0000000000409fc0\n.text:0000000000409fc1\n.text:0000000000409fc3\n'
p41
tp42
sS'file_name_concat'
p43
(S'\n__stdcall file_name_concat(char * dir, char * abase, char * * base_in_result)\n'
p44
V\u000achar * file_name_concat(char *dir,char *abase,char **base_in_result)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = mfile_name_concat(dir,abase,base_in_result);\u000a  if (pcVar1 != (char *)0x0) {\u000a    return pcVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p45
S'PUSH RAX\nCALL 0x00409430\nTEST RAX,RAX\nJZ 0x0040941d\nPOP RCX\nRET\nCALL 0x0040dae0\n'
p46
S'50\ne8 1a 00 00 00\n48 85 c0\n74 02\n59\nc3\ne8 be 46 00 00\n'
p47
S'.text:0000000000409410\n.text:0000000000409411\n.text:0000000000409416\n.text:0000000000409419\n.text:000000000040941b\n.text:000000000040941c\n.text:000000000040941d\n'
p48
tp49
sS'leave_dir'
p50
(S'\n__stdcall leave_dir(FTS * fts, FTSENT * ent)\n'
p51
V\u000avoid leave_dir(FTS *fts,FTSENT *ent)\u000a\u000a{\u000a  _ftsent *p_Var1;\u000a  __ino_t *p_Var2;\u000a  void *__ptr;\u000a  __dev_t local_18;\u000a  __ino_t local_10;\u000a  \u000a  if ((*(ushort *)&fts->fts_options & 0x102) != 0) {\u000a    local_18 = ent->fts_statp[0].st_dev;\u000a    local_10 = ent->fts_statp[0].st_ino;\u000a    __ptr = hash_delete((Hash_table *)fts->fts_cycle,&local_18);\u000a    if (__ptr != (void *)0x0) {\u000a      free(__ptr);\u000a      return;\u000a    }\u000aLAB_0040eed8:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  p_Var1 = ent->fts_parent;\u000a  if ((p_Var1 != (_ftsent *)0x0) && (-1 < p_Var1->fts_level)) {\u000a    p_Var2 = (__ino_t *)fts->fts_cycle;\u000a    if (p_Var2[2] == 0) goto LAB_0040eed8;\u000a    if ((*p_Var2 == ent->fts_statp[0].st_ino) && (p_Var2[1] == ent->fts_statp[0].st_dev)) {\u000a      p_Var2[1] = p_Var1->fts_statp[0].st_dev;\u000a      *p_Var2 = p_Var1->fts_statp[0].st_ino;\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p52
S'SUB RSP,0x18\nMOVZX EAX,word ptr [RDI + 0x48]\nTEST AX,0x102\nJZ 0x0040ee90\nMOV RAX,qword ptr [RSI + 0x78]\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [0x80 + RSI]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RDI,qword ptr [RDI + 0x58]\nMOV RSI,RSP\nCALL 0x0040a2d0\nTEST RAX,RAX\nJZ 0x0040eed8\nMOV RDI,RAX\nCALL 0x004020c0\nADD RSP,0x18\nRET\nMOV RAX,qword ptr [RSI + 0x8]\nTEST RAX,RAX\nJZ 0x0040eed3\nCMP qword ptr [RAX + 0x58],0x0\nJS 0x0040eed3\nMOV RCX,qword ptr [RDI + 0x58]\nCMP qword ptr [RCX + 0x10],0x0\nJZ 0x0040eed8\nMOV RDX,qword ptr [RCX]\nCMP RDX,qword ptr [0x80 + RSI]\nJNZ 0x0040eed3\nMOV RDX,qword ptr [RCX + 0x8]\nCMP RDX,qword ptr [RSI + 0x78]\nJNZ 0x0040eed3\nMOV RDX,qword ptr [RAX + 0x78]\nMOV qword ptr [RCX + 0x8],RDX\nMOV RAX,qword ptr [0x80 + RAX]\nMOV qword ptr [RCX],RAX\nADD RSP,0x18\nRET\nCALL 0x004020f0\n'
p53
S'48 83 ec 18\n0f b7 47 48\n66 a9 02 01\n74 32\n48 8b 46 78\n48 89 04 24\n48 8b 86 80 00 00 00\n48 89 44 24 08\n48 8b 7f 58\n48 89 e6\ne8 52 b4 ff ff\n48 85 c0\n74 55\n48 89 c7\ne8 35 32 ff ff\n48 83 c4 18\nc3\n48 8b 46 08\n48 85 c0\n74 3a\n48 83 78 58 00\n78 33\n48 8b 4f 58\n48 83 79 10 00\n74 2d\n48 8b 11\n48 3b 96 80 00 00 00\n75 1c\n48 8b 51 08\n48 3b 56 78\n75 12\n48 8b 50 78\n48 89 51 08\n48 8b 80 80 00 00 00\n48 89 01\n48 83 c4 18\nc3\ne8 13 32 ff ff\n'
p54
S'.text:000000000040ee50\n.text:000000000040ee54\n.text:000000000040ee58\n.text:000000000040ee5c\n.text:000000000040ee5e\n.text:000000000040ee62\n.text:000000000040ee66\n.text:000000000040ee6d\n.text:000000000040ee72\n.text:000000000040ee76\n.text:000000000040ee79\n.text:000000000040ee7e\n.text:000000000040ee81\n.text:000000000040ee83\n.text:000000000040ee86\n.text:000000000040ee8b\n.text:000000000040ee8f\n.text:000000000040ee90\n.text:000000000040ee94\n.text:000000000040ee97\n.text:000000000040ee99\n.text:000000000040ee9e\n.text:000000000040eea0\n.text:000000000040eea4\n.text:000000000040eea9\n.text:000000000040eeab\n.text:000000000040eeae\n.text:000000000040eeb5\n.text:000000000040eeb7\n.text:000000000040eebb\n.text:000000000040eebf\n.text:000000000040eec1\n.text:000000000040eec5\n.text:000000000040eec9\n.text:000000000040eed0\n.text:000000000040eed3\n.text:000000000040eed7\n.text:000000000040eed8\n'
p55
tp56
sS'strncmp'
p57
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p58
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_00619050)();\u000a  return iVar1;\u000a}\u000a\u000a
p59
S'JMP qword ptr [0x00619050]\n'
p60
S'ff 25 2a 6f 21 00\n'
p61
S'.plt:0000000000402120\n'
p62
tp63
sS'direntry_cmp_name'
p64
(S'\n__stdcall direntry_cmp_name(void * a, void * b)\n'
p65
V\u000aint direntry_cmp_name(void *a,void *b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = strcmp(*(char **)a,*(char **)b);\u000a  return iVar1;\u000a}\u000a\u000a
p66
S'MOV RDI,qword ptr [RDI]\nMOV RSI,qword ptr [RSI]\nJMP 0x00402480\n'
p67
S'48 8b 3f\n48 8b 36\ne9 35 60 ff ff\n'
p68
S'.text:000000000040c440\n.text:000000000040c443\n.text:000000000040c446\n'
p69
tp70
sS'quote'
p71
(S'\n__stdcall quote(char * arg)\n'
p72
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p73
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x0040bb70\n'
p74
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p75
S'.text:000000000040bb80\n.text:000000000040bb83\n.text:000000000040bb85\n.text:000000000040bb88\n'
p76
tp77
sS'clone_quoting_options'
p78
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p79
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p80
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00402100\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x6198e0\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x0040da90\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p81
S'55\n41 56\n53\n48 89 fb\ne8 b4 79 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 e0 98 61 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 25 33 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p82
S'.text:000000000040a740\n.text:000000000040a741\n.text:000000000040a743\n.text:000000000040a744\n.text:000000000040a747\n.text:000000000040a74c\n.text:000000000040a74f\n.text:000000000040a752\n.text:000000000040a755\n.text:000000000040a75a\n.text:000000000040a75e\n.text:000000000040a763\n.text:000000000040a766\n.text:000000000040a76b\n.text:000000000040a76e\n.text:000000000040a76f\n.text:000000000040a771\n.text:000000000040a772\n'
p83
tp84
sS'cwd_advance_fd'
p85
(S'\n__stdcall cwd_advance_fd(FTS * sp)\n'
p86
V\u000avoid cwd_advance_fd(FTS *sp)\u000a\u000a{\u000a  int __fd;\u000a  char in_DL;\u000a  int in_ESI;\u000a  \u000a  __fd = sp->fts_cwd_fd;\u000a  if ((__fd == in_ESI) && (__fd != -100)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  if (in_DL == 0) {\u000a    if ((__fd < 0) || ((sp->fts_options & 4U) != 0)) goto LAB_0040f9fc;\u000a  }\u000a  else {\u000a    __fd = i_ring_push(&sp->fts_fd_ring);\u000a    if (__fd < 0) goto LAB_0040f9fc;\u000a  }\u000a  close(__fd);\u000aLAB_0040f9fc:\u000a  sp->fts_cwd_fd = in_ESI;\u000a  return;\u000a}\u000a\u000a
p87
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV ESI,dword ptr [RBX + 0x2c]\nCMP ESI,EBP\nJNZ 0x0040f9d4\nCMP ESI,-0x64\nJNZ 0x0040fa06\nTEST DL,DL\nJZ 0x0040f9e9\nLEA RDI,[RBX + 0x60]\nCALL 0x00410910\nTEST EAX,EAX\nJS 0x0040f9fc\nMOV EDI,EAX\nJMP 0x0040f9f7\nTEST ESI,ESI\nJS 0x0040f9fc\nMOV EAX,dword ptr [RBX + 0x48]\nAND EAX,0x4\nJNZ 0x0040f9fc\nMOV EDI,ESI\nCALL 0x004023c0\nMOV dword ptr [RBX + 0x2c],EBP\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nCALL 0x004020f0\n'
p88
S'55\n53\n50\n89 f5\n48 89 fb\n8b 73 2c\n39 ee\n75 05\n83 fe 9c\n75 32\n84 d2\n74 11\n48 8d 7b 60\ne8 2f 0f 00 00\n85 c0\n78 17\n89 c7\neb 0e\n85 f6\n78 0f\n8b 43 48\n83 e0 04\n75 07\n89 f7\ne8 c4 29 ff ff\n89 6b 2c\n48 83 c4 08\n5b\n5d\nc3\ne8 e5 26 ff ff\n'
p89
S'.text:000000000040f9c0\n.text:000000000040f9c1\n.text:000000000040f9c2\n.text:000000000040f9c3\n.text:000000000040f9c5\n.text:000000000040f9c8\n.text:000000000040f9cb\n.text:000000000040f9cd\n.text:000000000040f9cf\n.text:000000000040f9d2\n.text:000000000040f9d4\n.text:000000000040f9d6\n.text:000000000040f9d8\n.text:000000000040f9dc\n.text:000000000040f9e1\n.text:000000000040f9e3\n.text:000000000040f9e5\n.text:000000000040f9e7\n.text:000000000040f9e9\n.text:000000000040f9eb\n.text:000000000040f9ed\n.text:000000000040f9f0\n.text:000000000040f9f3\n.text:000000000040f9f5\n.text:000000000040f9f7\n.text:000000000040f9fc\n.text:000000000040f9ff\n.text:000000000040fa03\n.text:000000000040fa04\n.text:000000000040fa05\n.text:000000000040fa06\n'
p90
tp91
sS'clock_gettime'
p92
(S'\n__stdcall clock_gettime(clockid_t __clock_id, timespec * __tp)\n'
p93
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint clock_gettime(clockid_t __clock_id,timespec *__tp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_clock_gettime_006190b0)();\u000a  return iVar1;\u000a}\u000a\u000a
p94
S'JMP qword ptr [0x006190b0]\n'
p95
S'ff 25 ca 6e 21 00\n'
p96
S'.plt:00000000004021e0\n'
p97
tp98
sS'same_name'
p99
(S'\n__stdcall same_name(char * source, char * dest)\n'
p100
V\u000a_Bool same_name(char *source,char *dest)\u000a\u000a{\u000a  int iVar1;\u000a  char *name;\u000a  char *name_00;\u000a  size_t sVar2;\u000a  size_t __n;\u000a  uint *puVar3;\u000a  bool bVar4;\u000a  stat source_dir_stats;\u000a  stat local_148;\u000a  stat local_b8;\u000a  \u000a  name = last_component(source);\u000a  name_00 = last_component(dest);\u000a  sVar2 = base_len(name);\u000a  __n = base_len(name_00);\u000a  if ((sVar2 == __n) && (iVar1 = memcmp(name,name_00,__n), iVar1 == 0)) {\u000a    name = dir_name(source);\u000a    name_00 = dir_name(dest);\u000a    iVar1 = stat(name,&local_b8);\u000a    if (iVar1 != 0) {\u000a      puVar3 = (uint *)__errno_location();\u000a      error(1,(ulong)*puVar3,0x412b8a,name);\u000a    }\u000a    iVar1 = stat(name_00,&local_148);\u000a    if (iVar1 != 0) {\u000a      puVar3 = (uint *)__errno_location();\u000a      error(1,(ulong)*puVar3,0x412b8a,name_00);\u000a    }\u000a    bVar4 = local_b8.st_ino == local_148.st_ino && local_b8.st_dev == local_148.st_dev;\u000a    free(name);\u000a    free(name_00);\u000a  }\u000a  else {\u000a    bVar4 = false;\u000a  }\u000a  return (_Bool)bVar4;\u000a}\u000a\u000a
p101
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x120\nMOV R15,RSI\nMOV R14,RDI\nCALL 0x00409000\nMOV R12,RAX\nMOV RDI,R15\nCALL 0x00409000\nMOV RBX,RAX\nMOV RDI,R12\nCALL 0x00409060\nMOV RBP,RAX\nMOV RDI,RBX\nCALL 0x00409060\nCMP RBP,RAX\nJNZ 0x0040c0b2\nMOV RDI,R12\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x00402420\nTEST EAX,EAX\nJZ 0x0040c0c6\nXOR EBP,EBP\nMOV EAX,EBP\nADD RSP,0x120\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RDI,R14\nCALL 0x00408f40\nMOV R14,RAX\nMOV RDI,R15\nCALL 0x00408f40\nMOV RBX,RAX\nLEA RSI,[0x90 + RSP]\nMOV RDI,R14\nCALL 0x004113e0\nTEST EAX,EAX\nJZ 0x0040c10b\nCALL 0x00402100\nMOV ESI,dword ptr [RAX]\nMOV EDI,0x1\nMOV EDX,0x412b8a\nXOR EAX,EAX\nMOV RCX,R14\nCALL 0x00402640\nMOV RSI,RSP\nMOV RDI,RBX\nCALL 0x004113e0\nTEST EAX,EAX\nJZ 0x0040c135\nCALL 0x00402100\nMOV ESI,dword ptr [RAX]\nMOV EDI,0x1\nMOV EDX,0x412b8a\nXOR EAX,EAX\nMOV RCX,RBX\nCALL 0x00402640\nMOV RAX,qword ptr [0x98 + RSP]\nCMP RAX,qword ptr [RSP + 0x8]\nJNZ 0x0040c156\nMOV RAX,qword ptr [0x90 + RSP]\nCMP RAX,qword ptr [RSP]\nSETZ BPL\nJMP 0x0040c158\nXOR EBP,EBP\nMOV RDI,R14\nCALL 0x004020c0\nMOV RDI,RBX\nCALL 0x004020c0\nJMP 0x0040c0b4\n'
p102
S'55\n41 57\n41 56\n41 54\n53\n48 81 ec 20 01 00 00\n49 89 f7\n49 89 fe\ne8 86 cf ff ff\n49 89 c4\n4c 89 ff\ne8 7b cf ff ff\n48 89 c3\n4c 89 e7\ne8 d0 cf ff ff\n48 89 c5\n48 89 df\ne8 c5 cf ff ff\n48 39 c5\n75 12\n4c 89 e7\n48 89 de\n48 89 c2\ne8 72 63 ff ff\n85 c0\n74 14\n31 ed\n89 e8\n48 81 c4 20 01 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n4c 89 f7\ne8 72 ce ff ff\n49 89 c6\n4c 89 ff\ne8 67 ce ff ff\n48 89 c3\n48 8d b4 24 90 00 00 00\n4c 89 f7\ne8 f4 52 00 00\n85 c0\n74 1b\ne8 0b 60 ff ff\n8b 30\nbf 01 00 00 00\nba 8a 2b 41 00\n31 c0\n4c 89 f1\ne8 35 65 ff ff\n48 89 e6\n48 89 df\ne8 ca 52 00 00\n85 c0\n74 1b\ne8 e1 5f ff ff\n8b 30\nbf 01 00 00 00\nba 8a 2b 41 00\n31 c0\n48 89 d9\ne8 0b 65 ff ff\n48 8b 84 24 98 00 00 00\n48 3b 44 24 08\n75 12\n48 8b 84 24 90 00 00 00\n48 3b 04 24\n40 0f 94 c5\neb 02\n31 ed\n4c 89 f7\ne8 60 5f ff ff\n48 89 df\ne8 58 5f ff ff\ne9 47 ff ff ff\n'
p103
S'.text:000000000040c060\n.text:000000000040c061\n.text:000000000040c063\n.text:000000000040c065\n.text:000000000040c067\n.text:000000000040c068\n.text:000000000040c06f\n.text:000000000040c072\n.text:000000000040c075\n.text:000000000040c07a\n.text:000000000040c07d\n.text:000000000040c080\n.text:000000000040c085\n.text:000000000040c088\n.text:000000000040c08b\n.text:000000000040c090\n.text:000000000040c093\n.text:000000000040c096\n.text:000000000040c09b\n.text:000000000040c09e\n.text:000000000040c0a0\n.text:000000000040c0a3\n.text:000000000040c0a6\n.text:000000000040c0a9\n.text:000000000040c0ae\n.text:000000000040c0b0\n.text:000000000040c0b2\n.text:000000000040c0b4\n.text:000000000040c0b6\n.text:000000000040c0bd\n.text:000000000040c0be\n.text:000000000040c0c0\n.text:000000000040c0c2\n.text:000000000040c0c4\n.text:000000000040c0c5\n.text:000000000040c0c6\n.text:000000000040c0c9\n.text:000000000040c0ce\n.text:000000000040c0d1\n.text:000000000040c0d4\n.text:000000000040c0d9\n.text:000000000040c0dc\n.text:000000000040c0e4\n.text:000000000040c0e7\n.text:000000000040c0ec\n.text:000000000040c0ee\n.text:000000000040c0f0\n.text:000000000040c0f5\n.text:000000000040c0f7\n.text:000000000040c0fc\n.text:000000000040c101\n.text:000000000040c103\n.text:000000000040c106\n.text:000000000040c10b\n.text:000000000040c10e\n.text:000000000040c111\n.text:000000000040c116\n.text:000000000040c118\n.text:000000000040c11a\n.text:000000000040c11f\n.text:000000000040c121\n.text:000000000040c126\n.text:000000000040c12b\n.text:000000000040c12d\n.text:000000000040c130\n.text:000000000040c135\n.text:000000000040c13d\n.text:000000000040c142\n.text:000000000040c144\n.text:000000000040c14c\n.text:000000000040c150\n.text:000000000040c154\n.text:000000000040c156\n.text:000000000040c158\n.text:000000000040c15b\n.text:000000000040c160\n.text:000000000040c163\n.text:000000000040c168\n'
p104
tp105
sS'frame_dummy'
p106
(S'\n__stdcall frame_dummy()\n'
p107
V\u000a/* WARNING: Removing unreachable block (ram,0x0040288a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p108
S'MOV EDI,0x618e18\nCMP qword ptr [RDI],0x0\nJNZ 0x00402880\nJMP 0x00402810\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x0040287b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00402810\n'
p109
S'bf 18 8e 61 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p110
S'.text:0000000000402870\n.text:0000000000402875\n.text:0000000000402879\n.text:000000000040287b\n.text:0000000000402880\n.text:0000000000402885\n.text:0000000000402888\n.text:000000000040288a\n.text:000000000040288b\n.text:000000000040288e\n.text:0000000000402890\n.text:0000000000402891\n'
p111
tp112
sS'mkdir'
p113
(S'\n__stdcall mkdir(char * __path, __mode_t __mode)\n'
p114
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mkdir(char *__path,__mode_t __mode)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mkdir_00619070)();\u000a  return iVar1;\u000a}\u000a\u000a
p115
S'JMP qword ptr [0x00619070]\n'
p116
S'ff 25 0a 6f 21 00\n'
p117
S'.plt:0000000000402160\n'
p118
tp119
sS'is_ENOTSUP'
p120
(S'\n__stdcall is_ENOTSUP()\n'
p121
V\u000a_Bool is_ENOTSUP(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 0x5f);\u000a}\u000a\u000a
p122
S'CMP EDI,0x5f\nSETZ AL\nRET\n'
p123
S'83 ff 5f\n0f 94 c0\nc3\n'
p124
S'.text:0000000000408180\n.text:0000000000408183\n.text:0000000000408186\n'
p125
tp126
sS'qcopy_acl'
p127
(S'\n__stdcall qcopy_acl(char * src_name, char * dst_name)\n'
p128
V\u000aint qcopy_acl(char *src_name,char *dst_name)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  char *name;\u000a  permission_context apStack24 [2];\u000a  \u000a  iVar1 = get_permissions(src_name,(permission_context *)dst_name);\u000a  iVar2 = -2;\u000a  if (iVar1 == 0) {\u000a    iVar2 = set_permissions(apStack24,name);\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p129
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ECX\nMOV RBX,RDX\nMOV RCX,RSP\nMOV EDX,R8D\nCALL 0x00410110\nMOV ECX,EAX\nMOV EAX,0xfffffffe\nTEST ECX,ECX\nJNZ 0x0040a70b\nMOV RDI,RSP\nMOV RSI,RBX\nMOV EDX,EBP\nCALL 0x00410140\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p130
S'55\n53\n50\n89 cd\n48 89 d3\n48 89 e1\n44 89 c2\ne8 1d 5a 00 00\n89 c1\nb8 fe ff ff ff\n85 c9\n75 0d\n48 89 e7\n48 89 de\n89 ea\ne8 35 5a 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p131
S'.text:000000000040a6e0\n.text:000000000040a6e1\n.text:000000000040a6e2\n.text:000000000040a6e3\n.text:000000000040a6e5\n.text:000000000040a6e8\n.text:000000000040a6eb\n.text:000000000040a6ee\n.text:000000000040a6f3\n.text:000000000040a6f5\n.text:000000000040a6fa\n.text:000000000040a6fc\n.text:000000000040a6fe\n.text:000000000040a701\n.text:000000000040a704\n.text:000000000040a706\n.text:000000000040a70b\n.text:000000000040a70f\n.text:000000000040a710\n.text:000000000040a711\n'
p132
tp133
sS'restore_initial_cwd'
p134
(S'\n__stdcall restore_initial_cwd(FTS * sp)\n'
p135
V\u000aint restore_initial_cwd(FTS *sp)\u000a\u000a{\u000a  int iVar1;\u000a  bool bVar2;\u000a  \u000a  if ((sp->fts_options & 4U) == 0) {\u000a    if ((sp->fts_options & 0x200U) == 0) {\u000a      iVar1 = fchdir(sp->fts_rfd);\u000a      bVar2 = iVar1 != 0;\u000a      goto LAB_0040f795;\u000a    }\u000a    cwd_advance_fd(sp);\u000a  }\u000a  bVar2 = false;\u000aLAB_0040f795:\u000a  fd_ring_clear(&sp->fts_fd_ring);\u000a  return (int)(uint)bVar2;\u000a}\u000a\u000a
p136
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV EAX,dword ptr [RBX + 0x48]\nTEST AL,0x4\nJNZ 0x0040f793\nTEST AH,0x2\nJNZ 0x0040f781\nMOV EDI,dword ptr [RBX + 0x28]\nCALL 0x004025b0\nTEST EAX,EAX\nSETNZ AL\nJMP 0x0040f795\nMOV ESI,0xffffff9c\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x0040f9c0\nXOR EAX,EAX\nMOVZX EBP,AL\nADD RBX,0x60\nMOV RDI,RBX\nCALL 0x0040e830\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p137
S'55\n53\n50\n48 89 fb\n8b 43 48\na8 04\n75 26\nf6 c4 02\n75 0f\n8b 7b 28\ne8 36 2e ff ff\n85 c0\n0f 95 c0\neb 14\nbe 9c ff ff ff\nba 01 00 00 00\n48 89 df\ne8 2d 02 00 00\n31 c0\n0f b6 e8\n48 83 c3 60\n48 89 df\ne8 8c f0 ff ff\n89 e8\n48 83 c4 08\n5b\n5d\nc3\n'
p138
S'.text:000000000040f760\n.text:000000000040f761\n.text:000000000040f762\n.text:000000000040f763\n.text:000000000040f766\n.text:000000000040f769\n.text:000000000040f76b\n.text:000000000040f76d\n.text:000000000040f770\n.text:000000000040f772\n.text:000000000040f775\n.text:000000000040f77a\n.text:000000000040f77c\n.text:000000000040f77f\n.text:000000000040f781\n.text:000000000040f786\n.text:000000000040f78b\n.text:000000000040f78e\n.text:000000000040f793\n.text:000000000040f795\n.text:000000000040f798\n.text:000000000040f79c\n.text:000000000040f79f\n.text:000000000040f7a4\n.text:000000000040f7a6\n.text:000000000040f7aa\n.text:000000000040f7ab\n.text:000000000040f7ac\n'
p139
tp140
sS'rpl_utimensat'
p141
(S'\n__stdcall rpl_utimensat(char * file, timespec * times)\n'
p142
V\u000aint rpl_utimensat(char *file,timespec *times)\u000a\u000a{\u000a  long lVar1;\u000a  int utimensat_works_really;\u000a  int iVar2;\u000a  int __fd;\u000a  int *piVar3;\u000a  uint __flag;\u000a  timespec *__times;\u000a  timespec ts [2];\u000a  timespec local_d8;\u000a  timespec local_c8;\u000a  stat local_b8;\u000a  \u000a  if (-1 < utimensat_works_really) {\u000a    __fd = (int)(char *)((ulong)file & 0xffffffff);\u000a    if (__times == (timespec *)0x0) {\u000a      __times = (timespec *)0x0;\u000a    }\u000a    else {\u000a      if ((__times->tv_nsec == 0x3ffffffe) ||\u000a         (local_d8 = (timespec)CONCAT88(local_d8.tv_nsec,local_d8.tv_sec),\u000a         local_c8 = (timespec)CONCAT88(local_c8.tv_nsec,local_c8.tv_sec),\u000a         __times[1].tv_nsec == 0x3ffffffe)) {\u000a        iVar2 = fstatat(__fd,(char *)times,(stat *)&local_b8,__flag);\u000a        if (iVar2 != 0) {\u000a          return -1;\u000a        }\u000a        if (__times->tv_nsec == 0x3ffffffe) {\u000a          if (__times[1].tv_nsec == 0x3ffffffe) {\u000a            return 0;\u000a          }\u000a          local_d8 = (timespec)get_stat_atime(&local_b8);\u000a          lVar1 = __times[1].tv_nsec;\u000a        }\u000a        else {\u000a          local_d8 = *__times;\u000a          lVar1 = __times[1].tv_nsec;\u000a        }\u000a        if (lVar1 == 0x3ffffffe) {\u000a          local_c8 = (timespec)get_stat_mtime(&local_b8);\u000a          __times = &local_d8;\u000a        }\u000a        else {\u000a          local_c8 = __times[1];\u000a          __times = &local_d8;\u000a        }\u000a      }\u000a    }\u000a    __fd = utimensat(__fd,(char *)times,__times,__flag);\u000a    if (__fd == 0) {\u000a      return 0;\u000a    }\u000a    if (__fd == -1) {\u000a      piVar3 = __errno_location();\u000a      if (((__flag & 0xfffffeff) != 0) && (*piVar3 == 0x16)) {\u000a        return -1;\u000a      }\u000a    }\u000a    piVar3 = __errno_location();\u000a    if ((*piVar3 != 0x16) && (*piVar3 != 0x26)) {\u000a      return __fd;\u000a    }\u000a    if (-1 < utimensat_works_really) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x26) {\u000a        utimensat_works_really = -1;\u000a      }\u000a    }\u000a  }\u000a  __fd = local_utimensat((char *)((ulong)file & 0xffffffff),times);\u000a  return __fd;\u000a}\u000a\u000a
p143
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0xb0\nMOV R12D,ECX\nMOV RBP,RDX\nMOV R14,RSI\nMOV R15D,EDI\nCMP dword ptr [0x00619a40],0x0\nJS 0x0040feed\nTEST RBP,RBP\nJZ 0x0040fe50\nCMP qword ptr [RBP + 0x8],0x3ffffffe\nJZ 0x0040fdf5\nCMP qword ptr [RBP + 0x18],0x3ffffffe\nJNZ 0x0040fe88\nLEA RDX,[RSP + 0x20]\nMOV EDI,R15D\nMOV RSI,R14\nMOV ECX,R12D\nCALL 0x00411410\nMOV ECX,EAX\nMOV EAX,0xffffffff\nTEST ECX,ECX\nJNZ 0x0040ff0c\nCMP qword ptr [RBP + 0x8],0x3ffffffe\nJNZ 0x0040fe54\nXOR EAX,EAX\nCMP qword ptr [RBP + 0x18],0x3ffffffe\nJZ 0x0040ff0c\nLEA RDI,[RSP + 0x20]\nCALL 0x0040c6b0\nMOV qword ptr [RSP],RAX\nMOV qword ptr [RSP + 0x8],RDX\nCMP qword ptr [RBP + 0x18],0x3ffffffe\nJZ 0x0040fe66\nJMP 0x0040fe7c\nXOR EBP,EBP\nJMP 0x0040fe88\nMOVUPS XMM0,xmmword ptr [RBP]\nMOVAPS xmmword ptr [RSP],XMM0\nCMP qword ptr [RBP + 0x18],0x3ffffffe\nJNZ 0x0040fe7c\nLEA RDI,[RSP + 0x20]\nCALL 0x0040c6d0\nMOV qword ptr [RSP + 0x10],RAX\nMOV qword ptr [RSP + 0x18],RDX\nJMP 0x0040fe85\nMOVUPS XMM0,xmmword ptr [RBP + 0x10]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOV RBP,RSP\nMOV EDI,R15D\nMOV RSI,R14\nMOV RDX,RBP\nMOV ECX,R12D\nCALL 0x004020d0\nMOV EBX,EAX\nTEST EBX,EBX\nJZ 0x0040ff00\nCMP EBX,-0x1\nJNZ 0x0040febf\nCALL 0x00402100\nMOV RCX,RAX\nTEST R12D,0xfffffeff\nJZ 0x0040febf\nMOV EAX,0xffffffff\nCMP dword ptr [RCX],0x16\nJZ 0x0040ff0c\nCALL 0x00402100\nMOV EAX,dword ptr [RAX]\nCMP EAX,0x16\nJZ 0x0040fed0\nCMP EAX,0x26\nJNZ 0x0040ff00\nCMP dword ptr [0x00619a40],0x0\nJS 0x0040feed\nCALL 0x00402100\nCMP dword ptr [RAX],0x26\nJNZ 0x0040feed\nMOV dword ptr [0x00619a40],0xffffffff\nMOV EDI,R15D\nMOV RSI,R14\nMOV RDX,RBP\nMOV ECX,R12D\nCALL 0x0040ff20\nJMP 0x0040ff0c\nMOV dword ptr [0x00619a40],0x1\nMOV EAX,EBX\nADD RSP,0xb0\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p144
S'55\n41 57\n41 56\n41 54\n53\n48 81 ec b0 00 00 00\n41 89 cc\n48 89 d5\n49 89 f6\n41 89 ff\n83 3d 6e 9c 20 00 00\n0f 88 15 01 00 00\n48 85 ed\n74 73\n48 81 7d 08 fe ff ff 3f\n74 0e\n48 81 7d 18 fe ff ff 3f\n0f 85 93 00 00 00\n48 8d 54 24 20\n44 89 ff\n4c 89 f6\n44 89 e1\ne8 08 16 00 00\n89 c1\nb8 ff ff ff ff\n85 c9\n0f 85 f5 00 00 00\n48 81 7d 08 fe ff ff 3f\n75 33\n31 c0\n48 81 7d 18 fe ff ff 3f\n0f 84 db 00 00 00\n48 8d 7c 24 20\ne8 75 c8 ff ff\n48 89 04 24\n48 89 54 24 08\n48 81 7d 18 fe ff ff 3f\n74 18\neb 2c\n31 ed\neb 34\n0f 10 45 00\n0f 29 04 24\n48 81 7d 18 fe ff ff 3f\n75 16\n48 8d 7c 24 20\ne8 60 c8 ff ff\n48 89 44 24 10\n48 89 54 24 18\neb 09\n0f 10 45 10\n0f 29 44 24 10\n48 89 e5\n44 89 ff\n4c 89 f6\n48 89 ea\n44 89 e1\ne8 37 22 ff ff\n89 c3\n85 db\n74 61\n83 fb ff\n75 1b\ne8 57 22 ff ff\n48 89 c1\n41 f7 c4 ff fe ff ff\n74 0a\nb8 ff ff ff ff\n83 39 16\n74 4d\ne8 3c 22 ff ff\n8b 00\n83 f8 16\n74 05\n83 f8 26\n75 30\n83 3d 69 9b 20 00 00\n78 14\ne8 22 22 ff ff\n83 38 26\n75 0a\nc7 05 53 9b 20 00 ff ff ff ff\n44 89 ff\n4c 89 f6\n48 89 ea\n44 89 e1\ne8 22 00 00 00\neb 0c\nc7 05 36 9b 20 00 01 00 00 00\n89 d8\n48 81 c4 b0 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p145
S'.text:000000000040fdb0\n.text:000000000040fdb1\n.text:000000000040fdb3\n.text:000000000040fdb5\n.text:000000000040fdb7\n.text:000000000040fdb8\n.text:000000000040fdbf\n.text:000000000040fdc2\n.text:000000000040fdc5\n.text:000000000040fdc8\n.text:000000000040fdcb\n.text:000000000040fdd2\n.text:000000000040fdd8\n.text:000000000040fddb\n.text:000000000040fddd\n.text:000000000040fde5\n.text:000000000040fde7\n.text:000000000040fdef\n.text:000000000040fdf5\n.text:000000000040fdfa\n.text:000000000040fdfd\n.text:000000000040fe00\n.text:000000000040fe03\n.text:000000000040fe08\n.text:000000000040fe0a\n.text:000000000040fe0f\n.text:000000000040fe11\n.text:000000000040fe17\n.text:000000000040fe1f\n.text:000000000040fe21\n.text:000000000040fe23\n.text:000000000040fe2b\n.text:000000000040fe31\n.text:000000000040fe36\n.text:000000000040fe3b\n.text:000000000040fe3f\n.text:000000000040fe44\n.text:000000000040fe4c\n.text:000000000040fe4e\n.text:000000000040fe50\n.text:000000000040fe52\n.text:000000000040fe54\n.text:000000000040fe58\n.text:000000000040fe5c\n.text:000000000040fe64\n.text:000000000040fe66\n.text:000000000040fe6b\n.text:000000000040fe70\n.text:000000000040fe75\n.text:000000000040fe7a\n.text:000000000040fe7c\n.text:000000000040fe80\n.text:000000000040fe85\n.text:000000000040fe88\n.text:000000000040fe8b\n.text:000000000040fe8e\n.text:000000000040fe91\n.text:000000000040fe94\n.text:000000000040fe99\n.text:000000000040fe9b\n.text:000000000040fe9d\n.text:000000000040fe9f\n.text:000000000040fea2\n.text:000000000040fea4\n.text:000000000040fea9\n.text:000000000040feac\n.text:000000000040feb3\n.text:000000000040feb5\n.text:000000000040feba\n.text:000000000040febd\n.text:000000000040febf\n.text:000000000040fec4\n.text:000000000040fec6\n.text:000000000040fec9\n.text:000000000040fecb\n.text:000000000040fece\n.text:000000000040fed0\n.text:000000000040fed7\n.text:000000000040fed9\n.text:000000000040fede\n.text:000000000040fee1\n.text:000000000040fee3\n.text:000000000040feed\n.text:000000000040fef0\n.text:000000000040fef3\n.text:000000000040fef6\n.text:000000000040fef9\n.text:000000000040fefe\n.text:000000000040ff00\n.text:000000000040ff0a\n.text:000000000040ff0c\n.text:000000000040ff13\n.text:000000000040ff14\n.text:000000000040ff16\n.text:000000000040ff18\n.text:000000000040ff1a\n.text:000000000040ff1b\n'
p146
tp147
sS'filemodestring'
p148
(S'\n__stdcall filemodestring(stat * statp, char * str)\n'
p149
V\u000avoid filemodestring(stat *statp,char *str)\u000a\u000a{\u000a  strmode((char *)(ulong)statp->st_mode);\u000a  return;\u000a}\u000a\u000a
p150
S'MOV EDI,dword ptr [RDI + 0x18]\nJMP 0x00409300\n'
p151
S'8b 7f 18\ne9 f8 fe ff ff\n'
p152
S'.text:0000000000409400\n.text:0000000000409403\n'
p153
tp154
sS'get_stat_birthtime_ns'
p155
(S'\n__stdcall get_stat_birthtime_ns(stat * st)\n'
p156
V\u000along get_stat_birthtime_ns(stat *st)\u000a\u000a{\u000a  return 0;\u000a}\u000a\u000a
p157
S'XOR EAX,EAX\nRET\n'
p158
S'31 c0\nc3\n'
p159
S'.text:000000000040c6a0\n.text:000000000040c6a2\n'
p160
tp161
sS'io_blksize'
p162
(S'\n__stdcall io_blksize(stat sb)\n'
p163
V\u000asize_t io_blksize(stat sb)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  if ((0x1ffff < sb.st_blksize) && (0 < sb.st_blksize && (ulong)sb.st_blksize < 0x2000000000000001))\u000a  {\u000a    sVar1 = 0x200;\u000a    if ((ulong)sb.st_blksize < 0x2000000000000001) {\u000a      sVar1 = sb.st_blksize;\u000a    }\u000a    return sVar1;\u000a  }\u000a  return 0x20000;\u000a}\u000a\u000a
p164
S'MOV RCX,qword ptr [RSP + 0x40]\nTEST RCX,RCX\nSETLE AL\nMOV RDX,0x2000000000000000\nCMP RCX,RDX\nSETA DL\nCMP RCX,0x20000\nJL 0x0040777f\nOR AL,DL\nJNZ 0x0040777f\nMOV RAX,0x2000000000000001\nCMP RCX,RAX\nMOV EAX,0x200\nCMOVC RAX,RCX\nRET\nMOV EAX,0x20000\nRET\n'
p165
S'48 8b 4c 24 40\n48 85 c9\n0f 9e c0\n48 ba 00 00 00 00 00 00 00 20\n48 39 d1\n0f 97 c2\n48 81 f9 00 00 02 00\n7c 1b\n08 d0\n75 17\n48 b8 01 00 00 00 00 00 00 20\n48 39 c1\nb8 00 02 00 00\n48 0f 42 c1\nc3\nb8 00 00 02 00\nc3\n'
p166
S'.text:0000000000407740\n.text:0000000000407745\n.text:0000000000407748\n.text:000000000040774b\n.text:0000000000407755\n.text:0000000000407758\n.text:000000000040775b\n.text:0000000000407762\n.text:0000000000407764\n.text:0000000000407766\n.text:0000000000407768\n.text:0000000000407772\n.text:0000000000407775\n.text:000000000040777a\n.text:000000000040777e\n.text:000000000040777f\n.text:0000000000407784\n'
p167
tp168
sS'LCO_compare'
p169
(S'\n__stdcall LCO_compare(void * x, void * y)\n'
p170
V\u000a_Bool LCO_compare(void *x,void *y)\u000a\u000a{\u000a  return (_Bool)(*(long *)x == *(long *)y);\u000a}\u000a\u000a
p171
S'MOV RAX,qword ptr [RDI]\nCMP RAX,qword ptr [RSI]\nSETZ AL\nRET\n'
p172
S'48 8b 07\n48 3b 06\n0f 94 c0\nc3\n'
p173
S'.text:000000000040fbb0\n.text:000000000040fbb3\n.text:000000000040fbb6\n.text:000000000040fbb9\n'
p174
tp175
sS'yesno'
p176
(S'\n__stdcall yesno()\n'
p177
V\u000a_Bool yesno(void)\u000a\u000a{\u000a  int iVar1;\u000a  __ssize_t _Var2;\u000a  bool bVar3;\u000a  char *local_18;\u000a  size_t local_10;\u000a  \u000a  local_18 = (char *)0x0;\u000a  local_10 = 0;\u000a  _Var2 = getline(&local_18,&local_10,stdin);\u000a  if (_Var2 < 1) {\u000a    bVar3 = false;\u000a  }\u000a  else {\u000a    if (local_18[_Var2 + -1] == '\u005cn') {\u000a      local_18[_Var2 + -1] = 0;\u000a    }\u000a    iVar1 = rpmatch(local_18);\u000a    bVar3 = 0 < iVar1;\u000a  }\u000a  free(local_18);\u000a  return (_Bool)bVar3;\u000a}\u000a\u000a
p178
S'PUSH RBX\nSUB RSP,0x10\nMOV qword ptr [RSP],0x0\nMOV qword ptr [RSP + 0x8],0x0\nMOV RDX,qword ptr [0x00619430]\nMOV RDI,RSP\nLEA RSI,[RSP + 0x8]\nCALL 0x00402700\nTEST RAX,RAX\nJLE 0x0040dbbf\nMOV RCX,qword ptr [RSP]\nCMP byte ptr [RCX + RAX*0x1 + -0x1],0xa\nJNZ 0x0040dbaf\nMOV byte ptr [RCX + RAX*0x1 + -0x1],0x0\nMOV RDI,qword ptr [RSP]\nCALL 0x004024a0\nTEST EAX,EAX\nSETG BL\nJMP 0x0040dbc1\nXOR EBX,EBX\nMOV RDI,qword ptr [RSP]\nCALL 0x004020c0\nMOV EAX,EBX\nADD RSP,0x10\nPOP RBX\nRET\n'
p179
S'53\n48 83 ec 10\n48 c7 04 24 00 00 00 00\n48 c7 44 24 08 00 00 00 00\n48 8b 15 a3 b8 20 00\n48 89 e7\n48 8d 74 24 08\ne8 66 4b ff ff\n48 85 c0\n7e 20\n48 8b 0c 24\n80 7c 01 ff 0a\n75 05\nc6 44 01 ff 00\n48 8b 3c 24\ne8 e8 48 ff ff\n85 c0\n0f 9f c3\neb 02\n31 db\n48 8b 3c 24\ne8 f6 44 ff ff\n89 d8\n48 83 c4 10\n5b\nc3\n'
p180
S'.text:000000000040db70\n.text:000000000040db71\n.text:000000000040db75\n.text:000000000040db7d\n.text:000000000040db86\n.text:000000000040db8d\n.text:000000000040db90\n.text:000000000040db95\n.text:000000000040db9a\n.text:000000000040db9d\n.text:000000000040db9f\n.text:000000000040dba3\n.text:000000000040dba8\n.text:000000000040dbaa\n.text:000000000040dbaf\n.text:000000000040dbb3\n.text:000000000040dbb8\n.text:000000000040dbba\n.text:000000000040dbbd\n.text:000000000040dbbf\n.text:000000000040dbc1\n.text:000000000040dbc5\n.text:000000000040dbca\n.text:000000000040dbcc\n.text:000000000040dbd0\n.text:000000000040dbd1\n'
p181
tp182
sS'fadvise'
p183
(S'\n__stdcall fadvise(FILE * fp)\n'
p184
V\u000avoid fadvise(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int __advise;\u000a  \u000a  if (fp != (FILE *)0x0) {\u000a    __fd = fileno((FILE *)fp);\u000a    fdadvise(__fd,0,0,__advise);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p185
S'PUSH RBX\nMOV EBX,ESI\nTEST RDI,RDI\nJZ 0x004090f8\nCALL 0x00402500\nXOR ESI,ESI\nXOR EDX,EDX\nMOV EDI,EAX\nMOV ECX,EBX\nPOP RBX\nJMP 0x004090d0\nPOP RBX\nRET\n'
p186
S'53\n89 f3\n48 85 ff\n74 10\ne8 13 94 ff ff\n31 f6\n31 d2\n89 c7\n89 d9\n5b\neb d8\n5b\nc3\n'
p187
S'.text:00000000004090e0\n.text:00000000004090e1\n.text:00000000004090e3\n.text:00000000004090e6\n.text:00000000004090e8\n.text:00000000004090ed\n.text:00000000004090ef\n.text:00000000004090f1\n.text:00000000004090f3\n.text:00000000004090f5\n.text:00000000004090f6\n.text:00000000004090f8\n.text:00000000004090f9\n'
p188
tp189
sS'fileno'
p190
(S'\n__stdcall fileno(FILE * __stream)\n'
p191
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_00619240)();\u000a  return iVar1;\u000a}\u000a\u000a
p192
S'JMP qword ptr [0x00619240]\n'
p193
S'ff 25 3a 6d 21 00\n'
p194
S'.plt:0000000000402500\n'
p195
tp196
sS'rotr16'
p197
(S'\n__stdcall rotr16()\n'
p198
V\u000auint16_t rotr16(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint16_t)\u000a         ((ushort)(in_EDI << (0x10 - (byte)in_ESI & 0x1f)) |\u000a         (ushort)(in_EDI >> ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p199
S'MOV EAX,EDI\nMOV ECX,ESI\nSHR EAX,CL\nMOV ECX,0x10\nSUB ECX,ESI\nSHL EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p200
S'89 f8\n89 f1\nd3 e8\nb9 10 00 00 00\n29 f1\nd3 e7\n09 c7\n89 f8\nc3\n'
p201
S'.text:0000000000410530\n.text:0000000000410532\n.text:0000000000410534\n.text:0000000000410536\n.text:000000000041053b\n.text:000000000041053d\n.text:000000000041053f\n.text:0000000000410541\n.text:0000000000410543\n'
p202
tp203
sS'openat'
p204
(S'\n__stdcall openat(int __fd, char * __file, int __oflag)\n'
p205
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint openat(int __fd,char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_openat_00619118)();\u000a  return iVar1;\u000a}\u000a\u000a
p206
S'JMP qword ptr [0x00619118]\n'
p207
S'ff 25 62 6e 21 00\n'
p208
S'.plt:00000000004022b0\n'
p209
tp210
sS'lutimens'
p211
(S'\n__stdcall lutimens(char * file, timespec * timespec)\n'
p212
V\u000aint lutimens(char *file,timespec *timespec)\u000a\u000a{\u000a  timespec *ptVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  int iVar4;\u000a  int *piVar5;\u000a  long lVar6;\u000a  timespec tVar7;\u000a  timespec adjusted_timespec [2];\u000a  timespec *local_d0;\u000a  undefined4 local_c8;\u000a  undefined4 uStack196;\u000a  undefined4 uStack192;\u000a  undefined4 uStack188;\u000a  undefined4 local_b8;\u000a  undefined4 uStack180;\u000a  undefined4 uStack176;\u000a  undefined4 uStack172;\u000a  stat local_a8;\u000a  \u000a  local_d0 = (timespec *)&local_c8;\u000a  if (timespec == (timespec *)0x0) {\u000a    iVar3 = 0;\u000a    local_d0 = timespec;\u000a  }\u000a  else {\u000a    local_c8 = *(undefined4 *)&timespec->tv_sec;\u000a    uStack196 = *(undefined4 *)((long)&timespec->tv_sec + 4);\u000a    uStack192 = *(undefined4 *)&timespec->tv_nsec;\u000a    uStack188 = *(undefined4 *)((long)&timespec->tv_nsec + 4);\u000a    local_b8 = *(undefined4 *)&timespec[1].tv_sec;\u000a    uStack180 = *(undefined4 *)((long)&timespec[1].tv_sec + 4);\u000a    uStack176 = *(undefined4 *)&timespec[1].tv_nsec;\u000a    uStack172 = *(undefined4 *)((long)&timespec[1].tv_nsec + 4);\u000a    iVar3 = validate_timespec(local_d0);\u000a    if (iVar3 < 0) {\u000a      return -1;\u000a    }\u000a  }\u000a  if (lutimensat_works_really < 0) goto LAB_0040d338;\u000a  if (iVar3 == 2) {\u000a    iVar3 = lstat(file,(stat *)&local_a8);\u000a    ptVar1 = local_d0;\u000a    if (iVar3 != 0) {\u000a      return -1;\u000a    }\u000a    if (local_d0->tv_nsec == 0x3ffffffe) {\u000a      tVar7 = get_stat_atime(&local_a8);\u000a      lVar6 = 0;\u000a    }\u000a    else {\u000a      iVar3 = 3;\u000a      if (local_d0[1].tv_nsec != 0x3ffffffe) goto LAB_0040d302;\u000a      tVar7 = get_stat_mtime(&local_a8);\u000a      lVar6 = 1;\u000a    }\u000a    ptVar1[lVar6].tv_sec = SUB168((undefined  [16])tVar7,0);\u000a    ptVar1[lVar6].tv_nsec = SUB168((undefined  [16])tVar7 >> 0x40,0);\u000a    iVar3 = 3;\u000a  }\u000aLAB_0040d302:\u000a  iVar4 = utimensat(-100,file,(timespec *)local_d0,0x100);\u000a  if (iVar4 < 1) {\u000a    if (iVar4 == 0) {\u000a      utimensat_works_really = 1;\u000a      lutimensat_works_really = 1;\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    piVar5 = __errno_location();\u000a    *piVar5 = 0x26;\u000a  }\u000a  piVar5 = __errno_location();\u000a  if (*piVar5 != 0x26) {\u000a    utimensat_works_really = 1;\u000a    lutimensat_works_really = 1;\u000a    return iVar4;\u000a  }\u000aLAB_0040d338:\u000a  lutimensat_works_really = -1;\u000a  if (iVar3 == 0) {\u000a    iVar3 = lstat(file,(stat *)&local_a8);\u000a    if (iVar3 != 0) {\u000a      return -1;\u000a    }\u000a  }\u000a  else {\u000a    if ((iVar3 != 3) && (iVar3 = lstat(file,(stat *)&local_a8), iVar3 != 0)) {\u000a      return -1;\u000a    }\u000a    if ((local_d0 != (timespec *)0x0) &&\u000a       (_Var2 = update_timespec(&local_a8,&local_d0), _Var2 != false)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((local_a8.st_mode & 0xf000) == 0xa000) {\u000a    piVar5 = __errno_location();\u000a    *piVar5 = 0x26;\u000a    return -1;\u000a  }\u000a  iVar3 = fdutimens((char *)0xffffffff,(timespec *)file);\u000a  return iVar3;\u000a}\u000a\u000a
p213
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0xc0\nMOV R14,RDI\nTEST RSI,RSI\nLEA RAX,[RSP + 0x10]\nCMOVZ RAX,RSI\nMOV qword ptr [RSP + 0x8],RAX\nJZ 0x0040d287\nMOVUPS XMM0,xmmword ptr [RSI]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [RSI + 0x10]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x0040d0c0\nMOV EBP,EAX\nTEST EBP,EBP\nJNS 0x0040d289\nJMP 0x0040d3cb\nXOR EBP,EBP\nCMP dword ptr [0x00619a34],0x0\nJS 0x0040d338\nCMP EBP,0x2\nJNZ 0x0040d302\nLEA RSI,[RSP + 0x30]\nMOV RDI,R14\nCALL 0x00411400\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x0040d3e6\nMOV RBX,qword ptr [RSP + 0x8]\nCMP qword ptr [RBX + 0x8],0x3ffffffe\nJNZ 0x0040d2d2\nLEA RDI,[RSP + 0x30]\nCALL 0x0040c6b0\nXOR ECX,ECX\nJMP 0x0040d2f0\nMOV EBP,0x3\nCMP qword ptr [RBX + 0x18],0x3ffffffe\nJNZ 0x0040d302\nLEA RDI,[RSP + 0x30]\nCALL 0x0040c6d0\nMOV ECX,0x1\nSHL RCX,0x4\nMOV qword ptr [RBX + RCX*0x1],RAX\nMOV qword ptr [RBX + RCX*0x1 + 0x8],RDX\nMOV EBP,0x3\nMOV RDX,qword ptr [RSP + 0x8]\nMOV EDI,0xffffff9c\nMOV ECX,0x100\nMOV RSI,R14\nCALL 0x004020d0\nMOV EBX,EAX\nTEST EBX,EBX\nJLE 0x0040d32c\nCALL 0x00402100\nMOV dword ptr [RAX],0x26\nJMP 0x0040d32e\nJZ 0x0040d384\nCALL 0x00402100\nCMP dword ptr [RAX],0x26\nJNZ 0x0040d384\nMOV dword ptr [0x00619a34],0xffffffff\nTEST EBP,EBP\nJZ 0x0040d39a\nCMP EBP,0x3\nJZ 0x0040d365\nLEA RSI,[RSP + 0x30]\nMOV RDI,R14\nCALL 0x00411400\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x0040d3e6\nCMP qword ptr [RSP + 0x8],0x0\nJZ 0x0040d3b0\nLEA RDI,[RSP + 0x30]\nLEA RSI,[RSP + 0x8]\nCALL 0x0040d180\nXOR EBX,EBX\nTEST AL,AL\nJZ 0x0040d3b0\nJMP 0x0040d3e6\nMOV dword ptr [0x00619a30],0x1\nMOV dword ptr [0x00619a34],0x1\nJMP 0x0040d3e6\nLEA RSI,[RSP + 0x30]\nMOV RDI,R14\nCALL 0x00411400\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x0040d3e6\nMOV EAX,0xf000\nAND EAX,dword ptr [RSP + 0x48]\nCMP EAX,0xa000\nJNZ 0x0040d3d2\nCALL 0x00402100\nMOV dword ptr [RAX],0x26\nMOV EBX,0xffffffff\nJMP 0x0040d3e6\nMOV RDX,qword ptr [RSP + 0x8]\nMOV EDI,0xffffffff\nMOV RSI,R14\nCALL 0x0040cd30\nMOV EBX,EAX\nMOV EAX,EBX\nADD RSP,0xc0\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p214
S'55\n41 56\n53\n48 81 ec c0 00 00 00\n49 89 fe\n48 85 f6\n48 8d 44 24 10\n48 0f 44 c6\n48 89 44 24 08\n74 26\n0f 10 06\n0f 29 44 24 10\n0f 10 46 10\n0f 29 44 24 20\n48 8b 7c 24 08\ne8 44 fe ff ff\n89 c5\n85 ed\n79 07\ne9 44 01 00 00\n31 ed\n83 3d a4 c7 20 00 00\n0f 88 a2 00 00 00\n83 fd 02\n75 67\n48 8d 74 24 30\n4c 89 f7\ne8 58 41 00 00\nbb ff ff ff ff\n85 c0\n0f 85 31 01 00 00\n48 8b 5c 24 08\n48 81 7b 08 fe ff ff 3f\n75 0e\n48 8d 7c 24 30\ne8 e2 f3 ff ff\n31 c9\neb 1e\nbd 03 00 00 00\n48 81 7b 18 fe ff ff 3f\n75 21\n48 8d 7c 24 30\ne8 e5 f3 ff ff\nb9 01 00 00 00\n48 c1 e1 04\n48 89 04 0b\n48 89 54 0b 08\nbd 03 00 00 00\n48 8b 54 24 08\nbf 9c ff ff ff\nb9 00 01 00 00\n4c 89 f6\ne8 b7 4d ff ff\n89 c3\n85 db\n7e 0d\ne8 dc 4d ff ff\nc7 00 26 00 00 00\neb 02\n74 56\ne8 cd 4d ff ff\n83 38 26\n75 4c\nc7 05 f2 c6 20 00 ff ff ff ff\n85 ed\n74 54\n83 fd 03\n74 1a\n48 8d 74 24 30\n4c 89 f7\ne8 a8 40 00 00\nbb ff ff ff ff\n85 c0\n0f 85 81 00 00 00\n48 83 7c 24 08 00\n74 43\n48 8d 7c 24 30\n48 8d 74 24 08\ne8 04 fe ff ff\n31 db\n84 c0\n74 2e\neb 62\nc7 05 a2 c6 20 00 01 00 00 00\nc7 05 9c c6 20 00 01 00 00 00\neb 4c\n48 8d 74 24 30\n4c 89 f7\ne8 59 40 00 00\nbb ff ff ff ff\n85 c0\n75 36\nb8 00 f0 00 00\n23 44 24 48\n3d 00 a0 00 00\n75 12\ne8 3b 4d ff ff\nc7 00 26 00 00 00\nbb ff ff ff ff\neb 14\n48 8b 54 24 08\nbf ff ff ff ff\n4c 89 f6\ne8 4c f9 ff ff\n89 c3\n89 d8\n48 81 c4 c0 00 00 00\n5b\n41 5e\n5d\nc3\n'
p215
S'.text:000000000040d240\n.text:000000000040d241\n.text:000000000040d243\n.text:000000000040d244\n.text:000000000040d24b\n.text:000000000040d24e\n.text:000000000040d251\n.text:000000000040d256\n.text:000000000040d25a\n.text:000000000040d25f\n.text:000000000040d261\n.text:000000000040d264\n.text:000000000040d269\n.text:000000000040d26d\n.text:000000000040d272\n.text:000000000040d277\n.text:000000000040d27c\n.text:000000000040d27e\n.text:000000000040d280\n.text:000000000040d282\n.text:000000000040d287\n.text:000000000040d289\n.text:000000000040d290\n.text:000000000040d296\n.text:000000000040d299\n.text:000000000040d29b\n.text:000000000040d2a0\n.text:000000000040d2a3\n.text:000000000040d2a8\n.text:000000000040d2ad\n.text:000000000040d2af\n.text:000000000040d2b5\n.text:000000000040d2ba\n.text:000000000040d2c2\n.text:000000000040d2c4\n.text:000000000040d2c9\n.text:000000000040d2ce\n.text:000000000040d2d0\n.text:000000000040d2d2\n.text:000000000040d2d7\n.text:000000000040d2df\n.text:000000000040d2e1\n.text:000000000040d2e6\n.text:000000000040d2eb\n.text:000000000040d2f0\n.text:000000000040d2f4\n.text:000000000040d2f8\n.text:000000000040d2fd\n.text:000000000040d302\n.text:000000000040d307\n.text:000000000040d30c\n.text:000000000040d311\n.text:000000000040d314\n.text:000000000040d319\n.text:000000000040d31b\n.text:000000000040d31d\n.text:000000000040d31f\n.text:000000000040d324\n.text:000000000040d32a\n.text:000000000040d32c\n.text:000000000040d32e\n.text:000000000040d333\n.text:000000000040d336\n.text:000000000040d338\n.text:000000000040d342\n.text:000000000040d344\n.text:000000000040d346\n.text:000000000040d349\n.text:000000000040d34b\n.text:000000000040d350\n.text:000000000040d353\n.text:000000000040d358\n.text:000000000040d35d\n.text:000000000040d35f\n.text:000000000040d365\n.text:000000000040d36b\n.text:000000000040d36d\n.text:000000000040d372\n.text:000000000040d377\n.text:000000000040d37c\n.text:000000000040d37e\n.text:000000000040d380\n.text:000000000040d382\n.text:000000000040d384\n.text:000000000040d38e\n.text:000000000040d398\n.text:000000000040d39a\n.text:000000000040d39f\n.text:000000000040d3a2\n.text:000000000040d3a7\n.text:000000000040d3ac\n.text:000000000040d3ae\n.text:000000000040d3b0\n.text:000000000040d3b5\n.text:000000000040d3b9\n.text:000000000040d3be\n.text:000000000040d3c0\n.text:000000000040d3c5\n.text:000000000040d3cb\n.text:000000000040d3d0\n.text:000000000040d3d2\n.text:000000000040d3d7\n.text:000000000040d3dc\n.text:000000000040d3df\n.text:000000000040d3e4\n.text:000000000040d3e6\n.text:000000000040d3e8\n.text:000000000040d3ef\n.text:000000000040d3f0\n.text:000000000040d3f2\n.text:000000000040d3f3\n'
p216
tp217
sS'AD_hash'
p218
(S'\n__stdcall AD_hash(void * x, size_t table_size)\n'
p219
V\u000asize_t AD_hash(void *x,size_t table_size)\u000a\u000a{\u000a  return *(ulong *)((long)x + 8) % table_size;\u000a}\u000a\u000a
p220
S'MOV RAX,qword ptr [RDI + 0x8]\nXOR EDX,EDX\nDIV RSI\nMOV RAX,RDX\nRET\n'
p221
S'48 8b 47 08\n31 d2\n48 f7 f6\n48 89 d0\nc3\n'
p222
S'.text:000000000040fb70\n.text:000000000040fb74\n.text:000000000040fb76\n.text:000000000040fb79\n.text:000000000040fb7c\n'
p223
tp224
sS'setlocale'
p225
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p226
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_006192b8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p227
S'JMP qword ptr [0x006192b8]\n'
p228
S'ff 25 c2 6c 21 00\n'
p229
S'.plt:00000000004025f0\n'
p230
tp231
sS'c_toupper'
p232
(S'\n__stdcall c_toupper()\n'
p233
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p234
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p235
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p236
S'.text:00000000004106d0\n.text:00000000004106d3\n.text:00000000004106d6\n.text:00000000004106d9\n.text:00000000004106dc\n'
p237
tp238
sS'fcntl'
p239
(S'\n__stdcall fcntl(int __fd, int __cmd)\n'
p240
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fcntl(int __fd,int __cmd,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fcntl_006190a8)();\u000a  return iVar1;\u000a}\u000a\u000a
p241
S'JMP qword ptr [0x006190a8]\n'
p242
S'ff 25 d2 6e 21 00\n'
p243
S'.plt:00000000004021d0\n'
p244
tp245
sS'src_to_dest_free'
p246
(S'\n__stdcall src_to_dest_free(void * x)\n'
p247
V\u000avoid src_to_dest_free(void *x)\u000a\u000a{\u000a  free(*(void **)((long)x + 0x10));\u000a  free(x);\u000a  return;\u000a}\u000a\u000a
p248
S'PUSH RBX\nMOV RBX,RDI\nMOV RDI,qword ptr [RBX + 0x10]\nCALL 0x004020c0\nMOV RDI,RBX\nPOP RBX\nJMP 0x004020c0\n'
p249
S'53\n48 89 fb\n48 8b 7b 10\ne8 73 9e ff ff\n48 89 df\n5b\ne9 6a 9e ff ff\n'
p250
S'.text:0000000000408240\n.text:0000000000408241\n.text:0000000000408244\n.text:0000000000408248\n.text:000000000040824d\n.text:0000000000408250\n.text:0000000000408251\n'
p251
tp252
sS'mbsinit'
p253
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p254
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_00619368)();\u000a  return iVar1;\u000a}\u000a\u000a
p255
S'JMP qword ptr [0x00619368]\n'
p256
S'ff 25 12 6c 21 00\n'
p257
S'.plt:0000000000402750\n'
p258
tp259
sS'dirent_inode_sort_may_be_useful'
p260
(S'\n__stdcall dirent_inode_sort_may_be_useful()\n'
p261
V\u000a_Bool dirent_inode_sort_may_be_useful(void)\u000a\u000a{\u000a  undefined uVar1;\u000a  int iVar2;\u000a  int __fildes;\u000a  statfs local_78;\u000a  \u000a  iVar2 = fstatfs(__fildes,&local_78);\u000a  uVar1 = 1;\u000a  if (iVar2 == 0) {\u000a    uVar1 = 0;\u000a    if ((local_78.f_type != 0x6969) && (local_78.f_type != 0x1021994)) {\u000a      uVar1 = 1;\u000a    }\u000a  }\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p262
S'SUB RSP,0x78\nMOV RSI,RSP\nCALL 0x004026e0\nMOV ECX,EAX\nMOV AL,0x1\nTEST ECX,ECX\nJZ 0x0040fd19\nADD RSP,0x78\nRET\nXOR EAX,EAX\nMOV RCX,qword ptr [RSP]\nCMP RCX,0x6969\nJZ 0x0040fd14\nCMP RCX,0x1021994\nJZ 0x0040fd14\nMOV AL,0x1\nJMP 0x0040fd14\n'
p263
S'48 83 ec 78\n48 89 e6\ne8 d4 29 ff ff\n89 c1\nb0 01\n85 c9\n74 05\n48 83 c4 78\nc3\n31 c0\n48 8b 0c 24\n48 81 f9 69 69 00 00\n74 ec\n48 81 f9 94 19 02 01\n74 e3\nb0 01\neb df\n'
p264
S'.text:000000000040fd00\n.text:000000000040fd04\n.text:000000000040fd07\n.text:000000000040fd0c\n.text:000000000040fd0e\n.text:000000000040fd10\n.text:000000000040fd12\n.text:000000000040fd14\n.text:000000000040fd18\n.text:000000000040fd19\n.text:000000000040fd1b\n.text:000000000040fd1f\n.text:000000000040fd26\n.text:000000000040fd28\n.text:000000000040fd2f\n.text:000000000040fd31\n.text:000000000040fd33\n'
p265
tp266
sS'deregister_tm_clones'
p267
(S'\n__stdcall deregister_tm_clones()\n'
p268
V\u000a/* WARNING: Removing unreachable block (ram,0x004027e5) */\u000a/* WARNING: Removing unreachable block (ram,0x004027ef) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p269
S'MOV EAX,0x619427\nPUSH RBP\nSUB RAX,0x619420\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00402800\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00402800\nPOP RBP\nMOV EDI,0x619420\nJMP RAX\nPOP RBP\nRET\n'
p270
S'b8 27 94 61 00\n55\n48 2d 20 94 61 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 20 94 61 00\nff e0\n5d\nc3\n'
p271
S'.text:00000000004027d0\n.text:00000000004027d5\n.text:00000000004027d6\n.text:00000000004027dc\n.text:00000000004027e0\n.text:00000000004027e3\n.text:00000000004027e5\n.text:00000000004027ea\n.text:00000000004027ed\n.text:00000000004027ef\n.text:00000000004027f0\n.text:00000000004027f5\n.text:0000000000402800\n.text:0000000000402801\n'
p272
tp273
sS'utimens_symlink'
p274
(S'\n__stdcall utimens_symlink(char * file, timespec * timespec)\n'
p275
V\u000aint utimens_symlink(char *file,timespec *timespec)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  \u000a  iVar1 = lutimens(file,timespec);\u000a  if (iVar1 != 0) {\u000a    piVar2 = __errno_location();\u000a    if (*piVar2 == 0x26) {\u000a      iVar1 = 0;\u000a    }\u000a    return iVar1;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p276
S'PUSH RBX\nCALL 0x0040d240\nMOV EBX,EAX\nTEST EBX,EBX\nJZ 0x004074dd\nCALL 0x00402100\nXOR ECX,ECX\nCMP dword ptr [RAX],0x26\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nRET\nXOR EAX,EAX\nPOP RBX\nRET\n'
p277
S'53\ne8 7a 5d 00 00\n89 c3\n85 db\n74 11\ne8 2f ac ff ff\n31 c9\n83 38 26\n0f 44 d9\n89 d8\n5b\nc3\n31 c0\n5b\nc3\n'
p278
S'.text:00000000004074c0\n.text:00000000004074c1\n.text:00000000004074c6\n.text:00000000004074c8\n.text:00000000004074ca\n.text:00000000004074cc\n.text:00000000004074d1\n.text:00000000004074d3\n.text:00000000004074d6\n.text:00000000004074d9\n.text:00000000004074db\n.text:00000000004074dc\n.text:00000000004074dd\n.text:00000000004074df\n.text:00000000004074e0\n'
p279
tp280
sS'ptr_align'
p281
(S'\n__stdcall ptr_align(void * ptr, size_t alignment)\n'
p282
V\u000avoid * ptr_align(void *ptr,size_t alignment)\u000a\u000a{\u000a  ulong uVar1;\u000a  \u000a  uVar1 = (long)ptr + (alignment - 1);\u000a  return (void *)(uVar1 - uVar1 % alignment);\u000a}\u000a\u000a
p283
S'LEA RCX,[RDI + RSI*0x1 + -0x1]\nXOR EDX,EDX\nMOV RAX,RCX\nDIV RSI\nSUB RCX,RDX\nMOV RAX,RCX\nRET\n'
p284
S'48 8d 4c 37 ff\n31 d2\n48 89 c8\n48 f7 f6\n48 29 d1\n48 89 c8\nc3\n'
p285
S'.text:00000000004077c0\n.text:00000000004077c5\n.text:00000000004077c7\n.text:00000000004077ca\n.text:00000000004077cd\n.text:00000000004077d0\n.text:00000000004077d3\n'
p286
tp287
sS'quotearg_custom'
p288
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p289
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p290
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x0040ba90\n'
p291
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p292
S'.text:000000000040bb10\n.text:000000000040bb13\n.text:000000000040bb16\n.text:000000000040bb19\n.text:000000000040bb1b\n.text:000000000040bb1e\n.text:000000000040bb21\n.text:000000000040bb24\n'
p293
tp294
sS'fts_palloc'
p295
(S'\n__stdcall fts_palloc(FTS * sp, size_t more)\n'
p296
V\u000a_Bool fts_palloc(FTS *sp,size_t more)\u000a\u000a{\u000a  int *piVar1;\u000a  char *pcVar2;\u000a  size_t __size;\u000a  \u000a  __size = more + 0x100 + sp->fts_pathlen;\u000a  if (CARRY8(more + 0x100,sp->fts_pathlen)) {\u000a    free(sp->fts_path);\u000a    sp->fts_path = (char *)0x0;\u000a    piVar1 = __errno_location();\u000a    *piVar1 = 0x24;\u000a  }\u000a  else {\u000a    sp->fts_pathlen = __size;\u000a    pcVar2 = (char *)realloc(sp->fts_path,__size);\u000a    if (pcVar2 != (char *)0x0) {\u000a      sp->fts_path = pcVar2;\u000a      return true;\u000a    }\u000a    free(sp->fts_path);\u000a    sp->fts_path = (char *)0x0;\u000a  }\u000a  return false;\u000a}\u000a\u000a
p297
S'PUSH RBX\nMOV RBX,RDI\nADD RSI,0x100\nADD RSI,qword ptr [RBX + 0x30]\nMOV RDI,qword ptr [RBX + 0x20]\nJNC 0x0040e2cf\nCALL 0x004020c0\nMOV qword ptr [RBX + 0x20],0x0\nCALL 0x00402100\nMOV dword ptr [RAX],0x24\nJMP 0x0040e2f6\nMOV qword ptr [RBX + 0x30],RSI\nCALL 0x004025c0\nTEST RAX,RAX\nJZ 0x0040e2e5\nMOV qword ptr [RBX + 0x20],RAX\nMOV AL,0x1\nJMP 0x0040e2f8\nMOV RDI,qword ptr [RBX + 0x20]\nCALL 0x004020c0\nMOV qword ptr [RBX + 0x20],0x0\nXOR EAX,EAX\nPOP RBX\nRET\n'
p298
S'53\n48 89 fb\n48 81 c6 00 01 00 00\n48 03 73 30\n48 8b 7b 20\n73 1a\ne8 06 3e ff ff\n48 c7 43 20 00 00 00 00\ne8 39 3e ff ff\nc7 00 24 00 00 00\neb 27\n48 89 73 30\ne8 e8 42 ff ff\n48 85 c0\n74 08\n48 89 43 20\nb0 01\neb 13\n48 8b 7b 20\ne8 d2 3d ff ff\n48 c7 43 20 00 00 00 00\n31 c0\n5b\nc3\n'
p299
S'.text:000000000040e2a0\n.text:000000000040e2a1\n.text:000000000040e2a4\n.text:000000000040e2ab\n.text:000000000040e2af\n.text:000000000040e2b3\n.text:000000000040e2b5\n.text:000000000040e2ba\n.text:000000000040e2c2\n.text:000000000040e2c7\n.text:000000000040e2cd\n.text:000000000040e2cf\n.text:000000000040e2d3\n.text:000000000040e2d8\n.text:000000000040e2db\n.text:000000000040e2dd\n.text:000000000040e2e1\n.text:000000000040e2e3\n.text:000000000040e2e5\n.text:000000000040e2e9\n.text:000000000040e2ee\n.text:000000000040e2f6\n.text:000000000040e2f8\n.text:000000000040e2f9\n'
p300
tp301
sS'close'
p302
(S'\n__stdcall close(int __fd)\n'
p303
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_006191a0)();\u000a  return iVar1;\u000a}\u000a\u000a
p304
S'JMP qword ptr [0x006191a0]\n'
p305
S'ff 25 da 6d 21 00\n'
p306
S'.plt:00000000004023c0\n'
p307
tp308
sS'getenv'
p309
(S'\n__stdcall getenv(char * __name)\n'
p310
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_00619018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p311
S'JMP qword ptr [0x00619018]\n'
p312
S'ff 25 62 6f 21 00\n'
p313
S'.plt:00000000004020b0\n'
p314
tp315
sS'LCO_hash'
p316
(S'\n__stdcall LCO_hash(void * x, size_t table_size)\n'
p317
V\u000asize_t LCO_hash(void *x,size_t table_size)\u000a\u000a{\u000a  return *(ulong *)x % table_size;\u000a}\u000a\u000a
p318
S'MOV RAX,qword ptr [RDI]\nXOR EDX,EDX\nDIV RSI\nMOV RAX,RDX\nRET\n'
p319
S'48 8b 07\n31 d2\n48 f7 f6\n48 89 d0\nc3\n'
p320
S'.text:000000000040fba0\n.text:000000000040fba3\n.text:000000000040fba5\n.text:000000000040fba8\n.text:000000000040fbab\n'
p321
tp322
sS'triple_free'
p323
(S'\n__stdcall triple_free(void * x)\n'
p324
V\u000avoid triple_free(void *x)\u000a\u000a{\u000a  free(*(void **)x);\u000a  free(x);\u000a  return;\u000a}\u000a\u000a
p325
S'PUSH RBX\nMOV RBX,RDI\nMOV RDI,qword ptr [RBX]\nCALL 0x004020c0\nMOV RDI,RBX\nPOP RBX\nJMP 0x004020c0\n'
p326
S'53\n48 89 fb\n48 8b 3b\ne8 c4 7a ff ff\n48 89 df\n5b\ne9 bb 7a ff ff\n'
p327
S'.text:000000000040a5f0\n.text:000000000040a5f1\n.text:000000000040a5f4\n.text:000000000040a5f7\n.text:000000000040a5fc\n.text:000000000040a5ff\n.text:000000000040a600\n'
p328
tp329
sS'rpl_fseeko'
p330
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p331
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_00619300)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p332
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x0040de98\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x0040de98\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x0040deaa\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00402680\nMOV RDI,RBX\nCALL 0x00402500\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00402330\nCMP RAX,-0x1\nJZ 0x0040ded3\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x0040ded8\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p333
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 d6 47 ff ff\n48 89 df\ne8 4e 46 ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 71 44 ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p334
S'.text:000000000040de70\n.text:000000000040de71\n.text:000000000040de73\n.text:000000000040de74\n.text:000000000040de77\n.text:000000000040de7a\n.text:000000000040de7d\n.text:000000000040de81\n.text:000000000040de85\n.text:000000000040de87\n.text:000000000040de8b\n.text:000000000040de8f\n.text:000000000040de91\n.text:000000000040de96\n.text:000000000040de98\n.text:000000000040de9b\n.text:000000000040de9e\n.text:000000000040dea1\n.text:000000000040dea2\n.text:000000000040dea4\n.text:000000000040dea5\n.text:000000000040deaa\n.text:000000000040dead\n.text:000000000040deb2\n.text:000000000040deb4\n.text:000000000040deb7\n.text:000000000040deba\n.text:000000000040debf\n.text:000000000040dec3\n.text:000000000040dec5\n.text:000000000040dec8\n.text:000000000040decf\n.text:000000000040ded1\n.text:000000000040ded3\n.text:000000000040ded8\n.text:000000000040ded9\n.text:000000000040dedb\n.text:000000000040dedc\n'
p335
tp336
sS'rotr8'
p337
(S'\n__stdcall rotr8()\n'
p338
V\u000auint8_t rotr8(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint8_t)((byte)(in_EDI << (8 - (byte)in_ESI & 0x1f)) |\u000a                  (byte)(in_EDI >> ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p339
S'MOV EAX,EDI\nMOV ECX,ESI\nSHR EAX,CL\nMOV ECX,0x8\nSUB ECX,ESI\nSHL EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p340
S'89 f8\n89 f1\nd3 e8\nb9 08 00 00 00\n29 f1\nd3 e7\n09 c7\n89 f8\nc3\n'
p341
S'.text:0000000000410570\n.text:0000000000410572\n.text:0000000000410574\n.text:0000000000410576\n.text:000000000041057b\n.text:000000000041057d\n.text:000000000041057f\n.text:0000000000410581\n.text:0000000000410583\n'
p342
tp343
sS'free_dir'
p344
(S'\n__stdcall free_dir(FTS * sp)\n'
p345
V\u000avoid free_dir(FTS *sp)\u000a\u000a{\u000a  if ((*(ushort *)&sp->fts_options & 0x102) == 0) {\u000a    free((void *)sp->fts_cycle);\u000a    return;\u000a  }\u000a  if ((Hash_table *)sp->fts_cycle != (Hash_table *)0x0) {\u000a    hash_free((Hash_table *)sp->fts_cycle);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p346
S'MOVZX EAX,word ptr [RDI + 0x48]\nTEST AX,0x102\nJZ 0x0040e888\nMOV RDI,qword ptr [RDI + 0x58]\nTEST RDI,RDI\nJZ 0x0040e891\nJMP 0x00409ca0\nMOV RDI,qword ptr [RDI + 0x58]\nJMP 0x004020c0\nRET\n'
p347
S'0f b7 47 48\n66 a9 02 01\n74 0e\n48 8b 7f 58\n48 85 ff\n74 0e\ne9 18 b4 ff ff\n48 8b 7f 58\ne9 2f 38 ff ff\nc3\n'
p348
S'.text:000000000040e870\n.text:000000000040e874\n.text:000000000040e878\n.text:000000000040e87a\n.text:000000000040e87e\n.text:000000000040e881\n.text:000000000040e883\n.text:000000000040e888\n.text:000000000040e88c\n.text:000000000040e891\n'
p349
tp350
sS'fdopendir'
p351
(S'\n__stdcall fdopendir(int __fd)\n'
p352
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aDIR * fdopendir(int __fd)\u000a\u000a{\u000a  DIR *pDVar1;\u000a  \u000a  pDVar1 = (DIR *)(*(code *)PTR_fdopendir_00619318)();\u000a  return pDVar1;\u000a}\u000a\u000a
p353
S'JMP qword ptr [0x00619318]\n'
p354
S'ff 25 62 6c 21 00\n'
p355
S'.plt:00000000004026b0\n'
p356
tp357
sS'is_prime'
p358
(S'\n__stdcall is_prime(size_t candidate)\n'
p359
V\u000a_Bool is_prime(size_t candidate)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  long lVar3;\u000a  bool bVar4;\u000a  \u000a  bVar4 = candidate != (candidate / 3) * 3;\u000a  if ((9 < candidate) && (bVar4)) {\u000a    uVar2 = 9;\u000a    lVar3 = 0x10;\u000a    uVar1 = 5;\u000a    do {\u000a      uVar2 = uVar2 + lVar3;\u000a      bVar4 = candidate % uVar1 != 0;\u000a      if (candidate <= uVar2) {\u000a        return (_Bool)bVar4;\u000a      }\u000a      lVar3 = lVar3 + 8;\u000a      uVar1 = uVar1 + 2;\u000a    } while (bVar4);\u000a  }\u000a  return (_Bool)bVar4;\u000a}\u000a\u000a
p360
S'MOV R8,RDI\nMOV RCX,-0x5555555555555555\nMOV RAX,R8\nMUL RCX\nSHR RDX,1\nLEA RAX,[RDX + RDX*0x2]\nCMP R8,RAX\nSETNZ AL\nSETZ CL\nCMP R8,0xa\nJC 0x0040a525\nTEST CL,CL\nJNZ 0x0040a525\nMOV ESI,0x9\nMOV EDI,0x10\nMOV ECX,0x5\nNOP dword ptr [RAX]\nADD RSI,RDI\nXOR EDX,EDX\nMOV RAX,R8\nDIV RCX\nTEST RDX,RDX\nSETNZ AL\nSETZ DL\nCMP RSI,R8\nJNC 0x0040a525\nADD RDI,0x8\nADD RCX,0x2\nTEST DL,DL\nJZ 0x0040a500\nRET\n'
p361
S'49 89 f8\n48 b9 ab aa aa aa aa aa aa aa\n4c 89 c0\n48 f7 e1\n48 d1 ea\n48 8d 04 52\n49 39 c0\n0f 95 c0\n0f 94 c1\n49 83 f8 0a\n72 3c\n84 c9\n75 38\nbe 09 00 00 00\nbf 10 00 00 00\nb9 05 00 00 00\n0f 1f 40 00\n48 01 fe\n31 d2\n4c 89 c0\n48 f7 f1\n48 85 d2\n0f 95 c0\n0f 94 c2\n4c 39 c6\n73 0c\n48 83 c7 08\n48 83 c1 02\n84 d2\n74 db\nc3\n'
p362
S'.text:000000000040a4c0\n.text:000000000040a4c3\n.text:000000000040a4cd\n.text:000000000040a4d0\n.text:000000000040a4d3\n.text:000000000040a4d6\n.text:000000000040a4da\n.text:000000000040a4dd\n.text:000000000040a4e0\n.text:000000000040a4e3\n.text:000000000040a4e7\n.text:000000000040a4e9\n.text:000000000040a4eb\n.text:000000000040a4ed\n.text:000000000040a4f2\n.text:000000000040a4f7\n.text:000000000040a4fc\n.text:000000000040a500\n.text:000000000040a503\n.text:000000000040a505\n.text:000000000040a508\n.text:000000000040a50b\n.text:000000000040a50e\n.text:000000000040a511\n.text:000000000040a514\n.text:000000000040a517\n.text:000000000040a519\n.text:000000000040a51d\n.text:000000000040a521\n.text:000000000040a523\n.text:000000000040a525\n'
p363
tp364
sS'i_ring_push'
p365
(S'\n__stdcall i_ring_push(I_ring * ir)\n'
p366
V\u000aint i_ring_push(I_ring *ir)\u000a\u000a{\u000a  int iVar1;\u000a  uint uVar2;\u000a  int in_ESI;\u000a  \u000a  uVar2 = (uint)(ir->ir_empty ^ 1) + ir->ir_front & 3;\u000a  iVar1 = ir->ir_data[(ulong)uVar2];\u000a  ir->ir_data[(ulong)uVar2] = in_ESI;\u000a  ir->ir_front = uVar2;\u000a  if (uVar2 == ir->ir_back) {\u000a    ir->ir_back = (uint)(ir->ir_empty ^ 1) + ir->ir_back & 3;\u000a  }\u000a  ir->ir_empty = false;\u000a  return iVar1;\u000a}\u000a\u000a
p367
S'MOV AL,byte ptr [RDI + 0x1c]\nXOR AL,0x1\nMOVZX EDX,AL\nADD EDX,dword ptr [RDI + 0x14]\nAND EDX,0x3\nMOV EAX,dword ptr [RDI + RDX*0x4]\nMOV dword ptr [RDI + RDX*0x4],ESI\nMOV dword ptr [RDI + 0x14],EDX\nMOV ECX,dword ptr [RDI + 0x18]\nCMP EDX,ECX\nJNZ 0x0041093f\nMOV DL,byte ptr [RDI + 0x1c]\nXOR DL,0x1\nMOVZX EDX,DL\nADD EDX,ECX\nAND EDX,0x3\nMOV dword ptr [RDI + 0x18],EDX\nMOV byte ptr [RDI + 0x1c],0x0\nRET\n'
p368
S'8a 47 1c\n34 01\n0f b6 d0\n03 57 14\n83 e2 03\n8b 04 97\n89 34 97\n89 57 14\n8b 4f 18\n39 ca\n75 11\n8a 57 1c\n80 f2 01\n0f b6 d2\n01 ca\n83 e2 03\n89 57 18\nc6 47 1c 00\nc3\n'
p369
S'.text:0000000000410910\n.text:0000000000410913\n.text:0000000000410915\n.text:0000000000410918\n.text:000000000041091b\n.text:000000000041091e\n.text:0000000000410921\n.text:0000000000410924\n.text:0000000000410927\n.text:000000000041092a\n.text:000000000041092c\n.text:000000000041092e\n.text:0000000000410931\n.text:0000000000410934\n.text:0000000000410937\n.text:0000000000410939\n.text:000000000041093c\n.text:000000000041093f\n.text:0000000000410943\n'
p370
tp371
sS'fscanf'
p372
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p373
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_00619180)();\u000a  return iVar1;\u000a}\u000a\u000a
p374
S'JMP qword ptr [0x00619180]\n'
p375
S'ff 25 fa 6d 21 00\n'
p376
S'.plt:0000000000402380\n'
p377
tp378
sS'memcpy'
p379
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p380
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_00619228)();\u000a  return pvVar1;\u000a}\u000a\u000a
p381
S'JMP qword ptr [0x00619228]\n'
p382
S'ff 25 52 6d 21 00\n'
p383
S'.plt:00000000004024d0\n'
p384
tp385
sS'readdir_ignoring_dot_and_dotdot'
p386
(S'\n__stdcall readdir_ignoring_dot_and_dotdot(DIR * dirp)\n'
p387
V\u000adirent * readdir_ignoring_dot_and_dotdot(DIR *dirp)\u000a\u000a{\u000a  _Bool _Var1;\u000a  dirent *pdVar2;\u000a  \u000a  do {\u000a    pdVar2 = readdir((DIR *)dirp);\u000a    if (pdVar2 == (dirent *)0x0) {\u000a      return (dirent *)0x0;\u000a    }\u000a    _Var1 = dot_or_dotdot(pdVar2->d_name);\u000a  } while (_Var1 != false);\u000a  return (dirent *)pdVar2;\u000a}\u000a\u000a
p388
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nXOR R14D,R14D\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,R15\nCALL 0x00402520\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00403ec0\nLEA RDI,[RBX + 0x13]\nCALL 0x00403a00\nTEST AL,AL\nJNZ 0x00403ea0\nMOV R14,RBX\nMOV RAX,R14\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p389
S'41 57\n41 56\n53\n49 89 ff\n45 31 f6\n0f 1f 44 00 00\n4c 89 ff\ne8 78 e6 ff ff\n48 89 c3\n48 85 db\n74 10\n48 8d 7b 13\ne8 47 fb ff ff\n84 c0\n75 e3\n49 89 de\n4c 89 f0\n5b\n41 5e\n41 5f\nc3\n'
p390
S'.text:0000000000403e90\n.text:0000000000403e92\n.text:0000000000403e94\n.text:0000000000403e95\n.text:0000000000403e98\n.text:0000000000403e9b\n.text:0000000000403ea0\n.text:0000000000403ea3\n.text:0000000000403ea8\n.text:0000000000403eab\n.text:0000000000403eae\n.text:0000000000403eb0\n.text:0000000000403eb4\n.text:0000000000403eb9\n.text:0000000000403ebb\n.text:0000000000403ebd\n.text:0000000000403ec0\n.text:0000000000403ec3\n.text:0000000000403ec4\n.text:0000000000403ec6\n.text:0000000000403ec8\n'
p391
tp392
sS'quotearg_n_custom_mem'
p393
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p394
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p395
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x00619910]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x00619900]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x006198f0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x006198e0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x0040a800\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x0040b690\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p396
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 57 de 20 00\n48 89 44 24 30\n0f 10 05 3b de 20 00\n0f 29 44 24 20\n0f 10 05 1f de 20 00\n0f 29 44 24 10\n0f 10 05 03 de 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p397
S'.text:000000000040baa0\n.text:000000000040baa1\n.text:000000000040baa3\n.text:000000000040baa5\n.text:000000000040baa6\n.text:000000000040baaa\n.text:000000000040baad\n.text:000000000040bab0\n.text:000000000040bab2\n.text:000000000040bab9\n.text:000000000040babe\n.text:000000000040bac5\n.text:000000000040baca\n.text:000000000040bad1\n.text:000000000040bad6\n.text:000000000040badd\n.text:000000000040bae1\n.text:000000000040bae4\n.text:000000000040bae7\n.text:000000000040baec\n.text:000000000040baee\n.text:000000000040baf1\n.text:000000000040baf4\n.text:000000000040baf7\n.text:000000000040bafc\n.text:000000000040bb00\n.text:000000000040bb01\n.text:000000000040bb03\n.text:000000000040bb05\n.text:000000000040bb06\n'
p398
tp399
sS'fts_compar'
p400
(S'\n__stdcall fts_compar(void * a, void * b)\n'
p401
V\u000aint fts_compar(void *a,void *b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (**(code **)(*(long *)(*(long *)a + 0x50) + 0x40))();\u000a  return iVar1;\u000a}\u000a\u000a
p402
S'PUSH RAX\nMOV RAX,qword ptr [RDI]\nMOV RAX,qword ptr [RAX + 0x50]\nCALL qword ptr [RAX + 0x40]\nPOP RCX\nRET\n'
p403
S'50\n48 8b 07\n48 8b 40 50\nff 50 40\n59\nc3\n'
p404
S'.text:000000000040fd70\n.text:000000000040fd71\n.text:000000000040fd74\n.text:000000000040fd78\n.text:000000000040fd7b\n.text:000000000040fd7c\n'
p405
tp406
sS'fts_padjust'
p407
(S'\n__stdcall fts_padjust(FTS * sp, FTSENT * head)\n'
p408
V\u000avoid fts_padjust(FTS *sp,FTSENT *head)\u000a\u000a{\u000a  _ftsent *p_Var1;\u000a  char *pcVar2;\u000a  _ftsent **pp_Var3;\u000a  \u000a  p_Var1 = sp->fts_child;\u000a  pcVar2 = sp->fts_path;\u000a  while (p_Var1 != (_ftsent *)0x0) {\u000a    if ((_ftsent *)p_Var1->fts_accpath != p_Var1 + 1) {\u000a      p_Var1->fts_accpath =\u000a           pcVar2 + (long)&((_ftsent *)\u000a                           ((long)(_ftsent *)p_Var1->fts_accpath - (long)p_Var1->fts_path))->\u000a                           fts_cycle;\u000a    }\u000a    p_Var1->fts_path = pcVar2;\u000a    p_Var1 = p_Var1->fts_link;\u000a  }\u000a  while (-1 < head->fts_level) {\u000a    if ((FTSENT *)head->fts_accpath != head + 1) {\u000a      head->fts_accpath =\u000a           pcVar2 + (long)&((FTSENT *)((long)(FTSENT *)head->fts_accpath - (long)head->fts_path))->\u000a                           fts_cycle;\u000a    }\u000a    head->fts_path = pcVar2;\u000a    pp_Var3 = &head->fts_link;\u000a    if (head->fts_link == (_ftsent *)0x0) {\u000a      pp_Var3 = &head->fts_parent;\u000a    }\u000a    head = (FTSENT *)*pp_Var3;\u000a  }\u000a  return;\u000a}\u000a\u000a
p409
S'MOV RCX,qword ptr [RDI + 0x8]\nMOV RAX,qword ptr [RDI + 0x20]\nTEST RCX,RCX\nJNZ 0x0040fc9d\nJMP 0x0040fcd8\nMOV qword ptr [RCX + 0x38],RAX\nMOV RCX,qword ptr [RCX + 0x10]\nTEST RCX,RCX\nJZ 0x0040fcd8\nMOV RDX,qword ptr [RCX + 0x30]\nLEA RDI,[0x108 + RCX]\nCMP RDX,RDI\nJZ 0x0040fc90\nSUB RDX,qword ptr [RCX + 0x38]\nADD RDX,RAX\nMOV qword ptr [RCX + 0x30],RDX\nJMP 0x0040fc90\nMOV qword ptr [RSI + 0x38],RAX\nCMP qword ptr [RSI + 0x10],0x0\nLEA RCX,[RSI + 0x10]\nLEA RDX,[RSI + 0x8]\nCMOVZ RCX,RDX\nMOV RSI,qword ptr [RCX]\nCMP qword ptr [RSI + 0x58],0x0\nJS 0x0040fcfc\nMOV RCX,qword ptr [RSI + 0x30]\nLEA RDX,[0x108 + RSI]\nCMP RCX,RDX\nJZ 0x0040fcc0\nSUB RCX,qword ptr [RSI + 0x38]\nADD RCX,RAX\nMOV qword ptr [RSI + 0x30],RCX\nJMP 0x0040fcc0\nRET\n'
p410
S'48 8b 4f 08\n48 8b 47 20\n48 85 c9\n75 10\neb 49\n48 89 41 38\n48 8b 49 10\n48 85 c9\n74 3b\n48 8b 51 30\n48 8d b9 08 01 00 00\n48 39 fa\n74 e3\n48 2b 51 38\n48 01 c2\n48 89 51 30\neb d6\n48 89 46 38\n48 83 7e 10 00\n48 8d 4e 10\n48 8d 56 08\n48 0f 44 ca\n48 8b 31\n48 83 7e 58 00\n78 1d\n48 8b 4e 30\n48 8d 96 08 01 00 00\n48 39 d1\n74 d1\n48 2b 4e 38\n48 01 c1\n48 89 4e 30\neb c4\nc3\n'
p411
S'.text:000000000040fc80\n.text:000000000040fc84\n.text:000000000040fc88\n.text:000000000040fc8b\n.text:000000000040fc8d\n.text:000000000040fc90\n.text:000000000040fc94\n.text:000000000040fc98\n.text:000000000040fc9b\n.text:000000000040fc9d\n.text:000000000040fca1\n.text:000000000040fca8\n.text:000000000040fcab\n.text:000000000040fcad\n.text:000000000040fcb1\n.text:000000000040fcb4\n.text:000000000040fcb8\n.text:000000000040fcc0\n.text:000000000040fcc4\n.text:000000000040fcc9\n.text:000000000040fccd\n.text:000000000040fcd1\n.text:000000000040fcd5\n.text:000000000040fcd8\n.text:000000000040fcdd\n.text:000000000040fcdf\n.text:000000000040fce3\n.text:000000000040fcea\n.text:000000000040fced\n.text:000000000040fcef\n.text:000000000040fcf3\n.text:000000000040fcf6\n.text:000000000040fcfa\n.text:000000000040fcfc\n'
p412
tp413
sS'_init'
p414
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p415
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00618ff8;\u000a  if (PTR___gmon_start___00618ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00618ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p416
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00618ff8]\nTEST RAX,RAX\nJZ 0x00402092\nCALL RAX\nADD RSP,0x8\nRET\n'
p417
S'48 83 ec 08\n48 8b 05 6d 6f 21 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p418
S'.init:0000000000402080\n.init:0000000000402084\n.init:000000000040208b\n.init:000000000040208e\n.init:0000000000402090\n.init:0000000000402092\n.init:0000000000402096\n'
p419
tp420
sS'get_stat_birthtime'
p421
(S'\n__stdcall get_stat_birthtime(stat * st)\n'
p422
V\u000atimespec get_stat_birthtime(stat *st)\u000a\u000a{\u000a  return (timespec)CONCAT88(0xffffffffffffffff,0xffffffffffffffff);\u000a}\u000a\u000a
p423
S'MOV RAX,-0x1\nMOV RDX,-0x1\nRET\n'
p424
S'48 c7 c0 ff ff ff ff\n48 c7 c2 ff ff ff ff\nc3\n'
p425
S'.text:000000000040c6e0\n.text:000000000040c6e7\n.text:000000000040c6ee\n'
p426
tp427
sS'realloc'
p428
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p429
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_006192a0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p430
S'JMP qword ptr [0x006192a0]\n'
p431
S'ff 25 da 6c 21 00\n'
p432
S'.plt:00000000004025c0\n'
p433
tp434
sS'strmode'
p435
(S'\n__stdcall strmode(char * str)\n'
p436
V\u000avoid strmode(char *str)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  byte bVar3;\u000a  byte bVar4;\u000a  byte bVar5;\u000a  char cVar6;\u000a  uint uVar7;\u000a  undefined in_SIL;\u000a  char cVar8;\u000a  undefined7 in_register_00000031;\u000a  char cVar9;\u000a  byte bVar10;\u000a  \u000a  pcVar1 = (char *)CONCAT71(in_register_00000031,in_SIL);\u000a  cVar2 = ftypelet();\u000a  *pcVar1 = cVar2;\u000a  cVar8 = 'r';\u000a  cVar2 = 'r';\u000a  if (((ulong)str & 0x100) == 0) {\u000a    cVar2 = '-';\u000a  }\u000a  pcVar1[1] = cVar2;\u000a  uVar7 = (uint)((ulong)str & 0xffffffff);\u000a  bVar3 = (byte)((ulong)str & 0xffffffff);\u000a  pcVar1[2] = ((char)bVar3 >> 7 & 0x4aU) + 0x2d;\u000a  bVar10 = 0x78;\u000a  bVar4 = 0x78;\u000a  if (((ulong)str & 0x40) == 0) {\u000a    bVar4 = 0x2d;\u000a  }\u000a  bVar5 = (byte)((uVar7 & 0x40) >> 1) | 0x53;\u000a  if (((ulong)str & 0x800) == 0) {\u000a    bVar5 = bVar4;\u000a  }\u000a  pcVar1[3] = bVar5;\u000a  cVar2 = 'r';\u000a  if (((ulong)str & 0x20) == 0) {\u000a    cVar2 = '-';\u000a  }\u000a  pcVar1[4] = cVar2;\u000a  cVar6 = 'w';\u000a  cVar2 = 'w';\u000a  if (((ulong)str & 0x10) == 0) {\u000a    cVar2 = '-';\u000a  }\u000a  pcVar1[5] = cVar2;\u000a  cVar2 = 'x';\u000a  if (((ulong)str & 8) == 0) {\u000a    cVar2 = '-';\u000a  }\u000a  cVar9 = (bVar3 & 8) * 4 + 'S';\u000a  if (((ulong)str & 0x400) == 0) {\u000a    cVar9 = cVar2;\u000a  }\u000a  pcVar1[6] = cVar9;\u000a  if (((ulong)str & 4) == 0) {\u000a    cVar8 = '-';\u000a  }\u000a  pcVar1[7] = cVar8;\u000a  if (((ulong)str & 2) == 0) {\u000a    cVar6 = '-';\u000a  }\u000a  pcVar1[8] = cVar6;\u000a  if (((ulong)str & 1) == 0) {\u000a    bVar10 = 0x2d;\u000a  }\u000a  if (((ulong)str & 0x200) != 0) {\u000a    bVar10 = (byte)((uVar7 & 1) << 5) | 0x54;\u000a  }\u000a  pcVar1[9] = bVar10;\u000a  pcVar1[10] = ' ';\u000a  pcVar1[0xb] = 0;\u000a  return;\u000a}\u000a\u000a
p437
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV EBX,EDI\nCALL 0x004093d0\nMOV byte ptr [R14],AL\nMOV AL,BH\nTEST AL,0x1\nMOV SIL,0x72\nMOV CL,0x72\nJNZ 0x0040931e\nMOV CL,0x2d\nMOV byte ptr [R14 + 0x1],CL\nMOV ECX,EBX\nSAR CL,0x7\nAND CL,0x4a\nADD CL,0x2d\nMOV byte ptr [R14 + 0x2],CL\nMOV ECX,EBX\nAND ECX,0x40\nMOV EDX,ECX\nSHR EDX,1\nOR EDX,0x53\nTEST ECX,ECX\nMOV R8B,0x78\nMOV CL,0x78\nJNZ 0x00409348\nMOV CL,0x2d\nTEST AL,0x8\nJNZ 0x0040934e\nMOV DL,CL\nMOV byte ptr [R14 + 0x3],DL\nTEST BL,0x20\nMOV CL,0x72\nJNZ 0x0040935b\nMOV CL,0x2d\nMOV byte ptr [R14 + 0x4],CL\nTEST BL,0x10\nMOV DL,0x77\nMOV CL,0x77\nJNZ 0x0040936a\nMOV CL,0x2d\nMOV byte ptr [R14 + 0x5],CL\nMOV ECX,EBX\nAND ECX,0x8\nLEA EDI,[0x53 + RCX*0x4]\nMOV CL,0x78\nJNZ 0x00409380\nMOV CL,0x2d\nTEST AL,0x4\nJNZ 0x00409387\nMOV DIL,CL\nMOV byte ptr [R14 + 0x6],DIL\nTEST BL,0x4\nJNZ 0x00409393\nMOV SIL,0x2d\nMOV byte ptr [R14 + 0x7],SIL\nTEST BL,0x2\nJNZ 0x0040939e\nMOV DL,0x2d\nMOV byte ptr [R14 + 0x8],DL\nAND EBX,0x1\nJNZ 0x004093aa\nMOV R8B,0x2d\nTEST AL,0x2\nJZ 0x004093b7\nSHL EBX,0x5\nOR EBX,0x54\nMOV R8D,EBX\nMOV byte ptr [R14 + 0x9],R8B\nMOV byte ptr [R14 + 0xa],0x20\nMOV byte ptr [R14 + 0xb],0x0\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p438
S'41 56\n53\n50\n49 89 f6\n89 fb\ne8 c2 00 00 00\n41 88 06\n88 f8\na8 01\n40 b6 72\nb1 72\n75 02\nb1 2d\n41 88 4e 01\n89 d9\nc0 f9 07\n80 e1 4a\n80 c1 2d\n41 88 4e 02\n89 d9\n83 e1 40\n89 ca\nd1 ea\n83 ca 53\n85 c9\n41 b0 78\nb1 78\n75 02\nb1 2d\na8 08\n75 02\n88 ca\n41 88 56 03\nf6 c3 20\nb1 72\n75 02\nb1 2d\n41 88 4e 04\nf6 c3 10\nb2 77\nb1 77\n75 02\nb1 2d\n41 88 4e 05\n89 d9\n83 e1 08\n8d 3c 8d 53 00 00 00\nb1 78\n75 02\nb1 2d\na8 04\n75 03\n40 88 cf\n41 88 7e 06\nf6 c3 04\n75 03\n40 b6 2d\n41 88 76 07\nf6 c3 02\n75 02\nb2 2d\n41 88 56 08\n83 e3 01\n75 03\n41 b0 2d\na8 02\n74 09\nc1 e3 05\n83 cb 54\n41 89 d8\n45 88 46 09\n41 c6 46 0a 20\n41 c6 46 0b 00\n48 83 c4 08\n5b\n41 5e\nc3\n'
p439
S'.text:0000000000409300\n.text:0000000000409302\n.text:0000000000409303\n.text:0000000000409304\n.text:0000000000409307\n.text:0000000000409309\n.text:000000000040930e\n.text:0000000000409311\n.text:0000000000409313\n.text:0000000000409315\n.text:0000000000409318\n.text:000000000040931a\n.text:000000000040931c\n.text:000000000040931e\n.text:0000000000409322\n.text:0000000000409324\n.text:0000000000409327\n.text:000000000040932a\n.text:000000000040932d\n.text:0000000000409331\n.text:0000000000409333\n.text:0000000000409336\n.text:0000000000409338\n.text:000000000040933a\n.text:000000000040933d\n.text:000000000040933f\n.text:0000000000409342\n.text:0000000000409344\n.text:0000000000409346\n.text:0000000000409348\n.text:000000000040934a\n.text:000000000040934c\n.text:000000000040934e\n.text:0000000000409352\n.text:0000000000409355\n.text:0000000000409357\n.text:0000000000409359\n.text:000000000040935b\n.text:000000000040935f\n.text:0000000000409362\n.text:0000000000409364\n.text:0000000000409366\n.text:0000000000409368\n.text:000000000040936a\n.text:000000000040936e\n.text:0000000000409370\n.text:0000000000409373\n.text:000000000040937a\n.text:000000000040937c\n.text:000000000040937e\n.text:0000000000409380\n.text:0000000000409382\n.text:0000000000409384\n.text:0000000000409387\n.text:000000000040938b\n.text:000000000040938e\n.text:0000000000409390\n.text:0000000000409393\n.text:0000000000409397\n.text:000000000040939a\n.text:000000000040939c\n.text:000000000040939e\n.text:00000000004093a2\n.text:00000000004093a5\n.text:00000000004093a7\n.text:00000000004093aa\n.text:00000000004093ac\n.text:00000000004093ae\n.text:00000000004093b1\n.text:00000000004093b4\n.text:00000000004093b7\n.text:00000000004093bb\n.text:00000000004093c0\n.text:00000000004093c5\n.text:00000000004093c9\n.text:00000000004093ca\n.text:00000000004093cc\n'
p440
tp441
sS'fstatfs'
p442
(S'\n__stdcall fstatfs(int __fildes, statfs * __buf)\n'
p443
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fstatfs(int __fildes,statfs *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fstatfs_00619330)();\u000a  return iVar1;\u000a}\u000a\u000a
p444
S'JMP qword ptr [0x00619330]\n'
p445
S'ff 25 4a 6c 21 00\n'
p446
S'.plt:00000000004026e0\n'
p447
tp448
sS'matchpathcon'
p449
(S'\n__stdcall matchpathcon(char * file, security_context_t * con)\n'
p450
V\u000aint matchpathcon(char *file,security_context_t *con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p451
S'PUSH RAX\nCALL 0x00402100\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p452
S'50\ne8 1a 5c ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p453
S'.text:000000000040c4e0\n.text:000000000040c4e1\n.text:000000000040c4e6\n.text:000000000040c4ec\n.text:000000000040c4f1\n.text:000000000040c4f2\n'
p454
tp455
sS'cached_umask'
p456
(S'\n__stdcall cached_umask()\n'
p457
V\u000amode_t cached_umask(void)\u000a\u000a{\u000a  mode_t mask;\u000a  \u000a  if (mask == 0xffffffff) {\u000a    mask = umask(0);\u000a    umask(mask);\u000a  }\u000a  return mask;\u000a}\u000a\u000a
p458
S'CMP dword ptr [0x006193a0],-0x1\nJNZ 0x00405c62\nPUSH RAX\nXOR EDI,EDI\nCALL 0x004024c0\nMOV dword ptr [0x006193a0],EAX\nMOV EDI,EAX\nCALL 0x004024c0\nADD RSP,0x8\nMOV EAX,dword ptr [0x006193a0]\nRET\n'
p459
S'83 3d 59 37 21 00 ff\n75 19\n50\n31 ff\ne8 6f c8 ff ff\n89 05 49 37 21 00\n89 c7\ne8 62 c8 ff ff\n48 83 c4 08\n8b 05 38 37 21 00\nc3\n'
p460
S'.text:0000000000405c40\n.text:0000000000405c47\n.text:0000000000405c49\n.text:0000000000405c4a\n.text:0000000000405c4c\n.text:0000000000405c51\n.text:0000000000405c57\n.text:0000000000405c59\n.text:0000000000405c5e\n.text:0000000000405c62\n.text:0000000000405c68\n'
p461
tp462
sS'__mempcpy_chk'
p463
(S'\n__stdcall __mempcpy_chk()\n'
p464
V\u000avoid __mempcpy_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___mempcpy_chk_00619030)();\u000a  return;\u000a}\u000a\u000a
p465
S'JMP qword ptr [0x00619030]\n'
p466
S'ff 25 4a 6f 21 00\n'
p467
S'.plt:00000000004020e0\n'
p468
tp469
sS'strlen'
p470
(S'\n__stdcall strlen(char * __s)\n'
p471
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_00619108)();\u000a  return sVar1;\u000a}\u000a\u000a
p472
S'JMP qword ptr [0x00619108]\n'
p473
S'ff 25 72 6e 21 00\n'
p474
S'.plt:0000000000402290\n'
p475
tp476
sS'memcmp'
p477
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p478
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_006191d0)();\u000a  return iVar1;\u000a}\u000a\u000a
p479
S'JMP qword ptr [0x006191d0]\n'
p480
S'ff 25 aa 6d 21 00\n'
p481
S'.plt:0000000000402420\n'
p482
tp483
sS'hash_free'
p484
(S'\n__stdcall hash_free(Hash_table * table)\n'
p485
V\u000avoid hash_free(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  hash_entry *__ptr;\u000a  hash_entry *__ptr_00;\u000a  \u000a  if (((table->data_freer != (void (*)(void *))0x0) && (table->n_entries != 0)) &&\u000a     (__ptr_00 = table->bucket, __ptr_00 < table->bucket_limit)) {\u000a    do {\u000a      __ptr = __ptr_00;\u000a      if (__ptr_00->data != (void *)0x0) {\u000a        while (__ptr != (hash_entry *)0x0) {\u000a          (*table->data_freer)(__ptr->data);\u000a          __ptr = __ptr->next;\u000a        }\u000a      }\u000a      __ptr_00 = __ptr_00 + 1;\u000a    } while (__ptr_00 < table->bucket_limit);\u000a  }\u000a  __ptr_00 = table->bucket;\u000a  if (__ptr_00 < table->bucket_limit) {\u000a    do {\u000a      __ptr = __ptr_00->next;\u000a      while (__ptr != (hash_entry *)0x0) {\u000a        phVar1 = __ptr->next;\u000a        free(__ptr);\u000a        __ptr = phVar1;\u000a      }\u000a      __ptr_00 = __ptr_00 + 1;\u000a    } while (__ptr_00 < table->bucket_limit);\u000a  }\u000a  __ptr_00 = table->free_entry_list;\u000a  while (__ptr_00 != (hash_entry *)0x0) {\u000a    __ptr = __ptr_00->next;\u000a    free(__ptr_00);\u000a    __ptr_00 = __ptr;\u000a  }\u000a  free(table->bucket);\u000a  free(table);\u000a  return;\u000a}\u000a\u000a
p486
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nCMP qword ptr [R15 + 0x40],0x0\nJZ 0x00409d02\nCMP qword ptr [R15 + 0x20],0x0\nJZ 0x00409d02\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x00409cda\nJMP 0x00409d02\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x00409d02\nCMP qword ptr [R14],0x0\nJZ 0x00409cd0\nTEST R14,R14\nJZ 0x00409cd0\nMOV RBX,R14\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RBX]\nCALL qword ptr [R15 + 0x40]\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x00409cf0\nJMP 0x00409cd0\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x00409d1a\nJMP 0x00409d43\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x00409d43\nMOV RDI,qword ptr [R14 + 0x8]\nTEST RDI,RDI\nJZ 0x00409d10\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x004020c0\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x00409d30\nJMP 0x00409d10\nMOV RDI,qword ptr [R15 + 0x48]\nTEST RDI,RDI\nJZ 0x00409d61\nNOP dword ptr [RAX]\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x004020c0\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x00409d50\nMOV RDI,qword ptr [R15]\nCALL 0x004020c0\nMOV RDI,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x004020c0\n'
p487
S'41 57\n41 56\n53\n49 89 ff\n49 83 7f 40 00\n74 53\n49 83 7f 20 00\n74 4c\n4d 8b 37\n4d 3b 77 08\n72 1b\neb 41\n49 83 c6 10\n4d 3b 77 08\n73 28\n49 83 3e 00\n74 f0\n4d 85 f6\n74 eb\n4c 89 f3\n0f 1f 84 00 00 00 00 00\n48 8b 3b\n41 ff 57 40\n48 8b 5b 08\n48 85 db\n75 f0\neb ce\n4d 8b 37\n4d 3b 77 08\n72 0f\neb 36\n49 83 c6 10\n4d 3b 77 08\n73 29\n49 8b 7e 08\n48 85 ff\n74 ed\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 5f 08\ne8 87 83 ff ff\n48 85 db\n48 89 df\n75 ef\neb cd\n49 8b 7f 48\n48 85 ff\n74 15\n0f 1f 40 00\n48 8b 5f 08\ne8 67 83 ff ff\n48 85 db\n48 89 df\n75 ef\n49 8b 3f\ne8 57 83 ff ff\n4c 89 ff\n5b\n41 5e\n41 5f\ne9 4a 83 ff ff\n'
p488
S'.text:0000000000409ca0\n.text:0000000000409ca2\n.text:0000000000409ca4\n.text:0000000000409ca5\n.text:0000000000409ca8\n.text:0000000000409cad\n.text:0000000000409caf\n.text:0000000000409cb4\n.text:0000000000409cb6\n.text:0000000000409cb9\n.text:0000000000409cbd\n.text:0000000000409cbf\n.text:0000000000409cd0\n.text:0000000000409cd4\n.text:0000000000409cd8\n.text:0000000000409cda\n.text:0000000000409cde\n.text:0000000000409ce0\n.text:0000000000409ce3\n.text:0000000000409ce5\n.text:0000000000409ce8\n.text:0000000000409cf0\n.text:0000000000409cf3\n.text:0000000000409cf7\n.text:0000000000409cfb\n.text:0000000000409cfe\n.text:0000000000409d00\n.text:0000000000409d02\n.text:0000000000409d05\n.text:0000000000409d09\n.text:0000000000409d0b\n.text:0000000000409d10\n.text:0000000000409d14\n.text:0000000000409d18\n.text:0000000000409d1a\n.text:0000000000409d1e\n.text:0000000000409d21\n.text:0000000000409d23\n.text:0000000000409d30\n.text:0000000000409d34\n.text:0000000000409d39\n.text:0000000000409d3c\n.text:0000000000409d3f\n.text:0000000000409d41\n.text:0000000000409d43\n.text:0000000000409d47\n.text:0000000000409d4a\n.text:0000000000409d4c\n.text:0000000000409d50\n.text:0000000000409d54\n.text:0000000000409d59\n.text:0000000000409d5c\n.text:0000000000409d5f\n.text:0000000000409d61\n.text:0000000000409d64\n.text:0000000000409d69\n.text:0000000000409d6c\n.text:0000000000409d6d\n.text:0000000000409d6f\n.text:0000000000409d71\n'
p489
tp490
sS'fts_compare_ino'
p491
(S'\n__stdcall fts_compare_ino(_ftsent * * a, _ftsent * * b)\n'
p492
V\u000aint fts_compare_ino(_ftsent **a,_ftsent **b)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  uint uVar3;\u000a  \u000a  uVar1 = (*a)->fts_statp[0].st_ino;\u000a  uVar2 = (*b)->fts_statp[0].st_ino;\u000a  uVar3 = 0xffffffff;\u000a  if (uVar2 <= uVar1) {\u000a    uVar3 = -(uint)(uVar2 < uVar1) & 1;\u000a  }\u000a  return (int)uVar3;\u000a}\u000a\u000a
p493
S'MOV RAX,qword ptr [RDI]\nMOV RAX,qword ptr [0x80 + RAX]\nMOV RCX,qword ptr [RSI]\nMOV RCX,qword ptr [0x80 + RCX]\nCMP RCX,RAX\nSBB EDX,EDX\nAND EDX,0x1\nCMP RAX,RCX\nMOV EAX,0xffffffff\nCMOVNC EAX,EDX\nRET\n'
p494
S'48 8b 07\n48 8b 80 80 00 00 00\n48 8b 0e\n48 8b 89 80 00 00 00\n48 39 c1\n19 d2\n83 e2 01\n48 39 c8\nb8 ff ff ff ff\n0f 43 c2\nc3\n'
p495
S'.text:000000000040fd40\n.text:000000000040fd43\n.text:000000000040fd4a\n.text:000000000040fd4d\n.text:000000000040fd54\n.text:000000000040fd57\n.text:000000000040fd59\n.text:000000000040fd5c\n.text:000000000040fd5f\n.text:000000000040fd64\n.text:000000000040fd67\n'
p496
tp497
sS'xfts_open'
p498
(S'\n__stdcall xfts_open(char * * argv, anon_subr_int_FTSENT_ptr_ptr_FTSENT_ptr_ptr * compar)\n'
p499
V\u000aFTS * xfts_open(char **argv,int (*compar)(FTSENT **,FTSENT **))\u000a\u000a{\u000a  FTS *pFVar1;\u000a  int *piVar2;\u000a  \u000a  pFVar1 = fts_open(argv,(int (*)(FTSENT **,FTSENT **))(ulong)((uint)compar | 0x200));\u000a  if (pFVar1 != (FTS *)0x0) {\u000a    return pFVar1;\u000a  }\u000a  piVar2 = __errno_location();\u000a  if (*piVar2 == 0x16) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("errno != EINVAL","lib/xfts.c",0x29,\u000a                  "FTS *xfts_open(char *const *, int, int (*)(const FTSENT **, const FTSENT **))");\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p500
S'PUSH RAX\nOR ESI,0x200\nCALL 0x0040dee0\nTEST RAX,RAX\nJZ 0x0040db23\nPOP RCX\nRET\nCALL 0x00402100\nCMP dword ptr [RAX],0x16\nJNZ 0x0040db46\nMOV EDI,0x413d80\nMOV ESI,0x413d90\nMOV EDX,0x29\nMOV ECX,0x413d9b\nCALL 0x00402350\nCALL 0x0040dae0\n'
p501
S'50\n81 ce 00 02 00 00\ne8 c4 03 00 00\n48 85 c0\n74 02\n59\nc3\ne8 d8 45 ff ff\n83 38 16\n75 19\nbf 80 3d 41 00\nbe 90 3d 41 00\nba 29 00 00 00\nb9 9b 3d 41 00\ne8 0a 48 ff ff\ne8 95 ff ff ff\n'
p502
S'.text:000000000040db10\n.text:000000000040db11\n.text:000000000040db17\n.text:000000000040db1c\n.text:000000000040db1f\n.text:000000000040db21\n.text:000000000040db22\n.text:000000000040db23\n.text:000000000040db28\n.text:000000000040db2b\n.text:000000000040db2d\n.text:000000000040db32\n.text:000000000040db37\n.text:000000000040db3c\n.text:000000000040db41\n.text:000000000040db46\n'
p503
tp504
sS'futimesat'
p505
(S'\n__stdcall futimesat(int __fd, char * __file, timeval * __tvp)\n'
p506
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint futimesat(int __fd,char *__file,timeval *__tvp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_futimesat_00619378)();\u000a  return iVar1;\u000a}\u000a\u000a
p507
S'JMP qword ptr [0x00619378]\n'
p508
S'ff 25 02 6c 21 00\n'
p509
S'.plt:0000000000402770\n'
p510
tp511
sS'_exit'
p512
(S'\n__stdcall _exit(int __status)\n'
p513
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_00619058)();\u000a  return;\u000a}\u000a\u000a
p514
S'JMP qword ptr [0x00619058]\n'
p515
S'ff 25 22 6f 21 00\n'
p516
S'.plt:0000000000402130\n'
p517
tp518
sS'copy_internal'
p519
(S'\n__stdcall copy_internal(char * src_name, char * dst_name, stat * parent, dir_list * ancestors, cp_options * x, _Bool * first_dir_created_per_command_line_arg, _Bool * copy_into_self, _Bool * rename_succeeded)\n'
p520
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000a_Bool copy_internal(char *src_name,char *dst_name,stat *parent,dir_list *ancestors,cp_options *x,\u000a                   _Bool *first_dir_created_per_command_line_arg,_Bool *copy_into_self,\u000a                   _Bool *rename_succeeded)\u000a\u000a{\u000a  undefined8 ht;\u000a  long lVar1;\u000a  ulong uVar2;\u000a  cp_options *pcVar3;\u000a  undefined4 uVar4;\u000a  _Bool _Var5;\u000a  _Bool _Var6;\u000a  int iVar7;\u000a  uint uVar8;\u000a  int iVar9;\u000a  mode_t mVar10;\u000a  uint *puVar11;\u000a  undefined8 ht_00;\u000a  char *file;\u000a  char *file_name;\u000a  undefined7 extraout_var;\u000a  size_t sVar12;\u000a  int *piVar13;\u000a  undefined *backup_dst_name;\u000a  stat *stats;\u000a  dir_list *pdVar14;\u000a  ulong *puVar15;\u000a  ulong *puVar16;\u000a  ulong *puVar17;\u000a  ulong *puVar18;\u000a  ulong *puVar19;\u000a  ulong *__new;\u000a  ulong *puVar20;\u000a  char cVar21;\u000a  ulong uVar22;\u000a  char cVar23;\u000a  undefined4 uVar24;\u000a  undefined *in_stack_00000018;\u000a  undefined *in_stack_00000020;\u000a  ulong uStack720;\u000a  ulong local_2c8;\u000a  __ino_t local_2c0;\u000a  _Bool local_238_00;\u000a  ulong local_238;\u000a  timespec local_238_01;\u000a  timespec timespec [2];\u000a  stat local_1a0;\u000a  stat local_110;\u000a  undefined8 local_80;\u000a  dir_list *local_78;\u000a  undefined8 local_70;\u000a  undefined *local_68;\u000a  undefined *local_60;\u000a  uint local_58;\u000a  uint local_54;\u000a  undefined8 local_50;\u000a  undefined8 local_48;\u000a  char *local_40;\u000a  byte local_31;\u000a  \u000a  puVar16 = &uStack720 + 1;\u000a  puVar18 = &uStack720 + 1;\u000a  puVar19 = &uStack720 + 1;\u000a  __new = &uStack720 + 1;\u000a  puVar15 = &uStack720 + 1;\u000a  puVar20 = &uStack720 + 1;\u000a  puVar17 = &uStack720 + 1;\u000a  local_31 = (byte)parent;\u000a  if ((in_stack_00000020 != (undefined *)0x0) &&\u000a     (first_dir_created_per_command_line_arg[0x18] != false)) {\u000a    *in_stack_00000020 = 0;\u000a  }\u000a  *in_stack_00000018 = 0;\u000a  if (*(int *)(first_dir_created_per_command_line_arg + 4) == 2) {\u000a    uStack720 = 0x4041b9;\u000a    backup_dst_name = in_stack_00000018;\u000a    iVar7 = lstat(src_name,(stat *)&local_110);\u000a    local_58 = local_110.st_mode;\u000a  }\u000a  else {\u000a    uStack720 = 0x4041ce;\u000a    backup_dst_name = in_stack_00000018;\u000a    iVar7 = stat(src_name,(stat *)&local_110);\u000a    local_58 = local_110.st_mode;\u000a  }\u000a  if (iVar7 != 0) {\u000a    uStack720 = 0x4041d7;\u000a    puVar11 = (uint *)__errno_location();\u000a    uVar8 = *puVar11;\u000a    uStack720 = 0x4041ee;\u000a    ht_00 = dcgettext(0,"cannot stat %s",5);\u000a    uStack720 = 0x4041fe;\u000a    file = quotearg_style((char *)0x4);\u000a    uVar22 = (ulong)uVar8;\u000a    goto LAB_0040420b;\u000a  }\u000a  uVar8 = local_58 & 0xf000;\u000a  local_50 = (ulong)uVar8;\u000a  if ((uVar8 == 0x4000) && (first_dir_created_per_command_line_arg[0x29] == false)) {\u000a    uStack720 = 0x40440c;\u000a    local_78 = ancestors;\u000a    local_48 = x;\u000a    ht_00 = dcgettext(0,"omitting directory %s",5);\u000a    uStack720 = 0x40441c;\u000a    file = quotearg_style((char *)0x4);\u000a    uVar22 = 0;\u000a    puVar16 = &uStack720 + 1;\u000a    goto LAB_0040420b;\u000a  }\u000a  local_110.st_mode = local_58;\u000a  local_78 = ancestors;\u000a  local_48 = x;\u000a  if ((byte)copy_into_self != 0) {\u000a    local_110.st_mode = local_58;\u000a    local_78 = ancestors;\u000a    local_48 = x;\u000a    if ((uVar8 != 0x4000) &&\u000a       (local_110.st_mode = local_58, local_78 = ancestors, local_48 = x,\u000a       *(int *)first_dir_created_per_command_line_arg == 0)) {\u000a      uStack720 = 0x40427b;\u000a      local_110.st_mode = local_58;\u000a      local_78 = ancestors;\u000a      local_48 = x;\u000a      _Var5 = seen_file(*(Hash_table **)(first_dir_created_per_command_line_arg + 0x40),src_name,\u000a                        &local_110);\u000a      if (_Var5 != false) {\u000a        uStack720 = 0x404290;\u000a        ht_00 = dcgettext(0,"warning: source file %s specified more than once",5);\u000a        uStack720 = 0x4042a0;\u000a        file = quotearg_style((char *)0x4);\u000a        uStack720 = 0x4042b1;\u000a        error(0,0,ht_00,file);\u000a        return true;\u000a      }\u000a    }\u000a    uStack720 = 0x4042cd;\u000a    record_file(*(Hash_table **)(first_dir_created_per_command_line_arg + 0x40),src_name,&local_110)\u000a    ;\u000a  }\u000a  uStack720 = 0x4042db;\u000a  _Var5 = should_dereference((cp_options *)first_dir_created_per_command_line_arg);\u000a  if (local_31 == 0) {\u000a    if (((((int)local_50 != 0x8000) &&\u000a         (((first_dir_created_per_command_line_arg[0x14] == false || ((int)local_50 == 0xa000)) ||\u000a          ((short)local_50 == 0x4000)))) ||\u000a        (((first_dir_created_per_command_line_arg[0x18] != false ||\u000a          (first_dir_created_per_command_line_arg[0x2b] != false)) ||\u000a         (first_dir_created_per_command_line_arg[0x17] != false)))) ||\u000a       ((*(int *)first_dir_created_per_command_line_arg != 0 ||\u000a        (first_dir_created_per_command_line_arg[0x15] != false)))) {\u000a      uStack720 = 0x404459;\u000a      local_40 = dst_name;\u000a      iVar7 = lstat(dst_name,(stat *)&local_1a0);\u000a      backup_dst_name = (undefined *)CONCAT71((int7)((ulong)backup_dst_name >> 8),1);\u000a      if (iVar7 == 0) goto LAB_0040447b;\u000aLAB_0040445f:\u000a      local_68 = (undefined *)((ulong)local_68 & 0xffffffffffffff00 | (ulong)_Var5);\u000a      uStack720 = 0x404467;\u000a      puVar11 = (uint *)__errno_location();\u000a      uVar8 = *puVar11;\u000a      if (uVar8 == 2) {\u000a        local_31 = 1;\u000a        goto LAB_004042f2;\u000a      }\u000a      file = "cannot stat %s";\u000a      puVar17 = &uStack720 + 1;\u000aLAB_004044f7:\u000a      *(undefined8 *)((undefined *)puVar17 + -8) = 0x404501;\u000a      ht_00 = dcgettext(0,file,5);\u000a      *(undefined8 *)((undefined *)puVar17 + -8) = 0x404512;\u000a      file = quotearg_style(4,((undefined *)puVar17)[-8]);\u000a      uVar22 = (ulong)uVar8;\u000aLAB_0040451b:\u000a      puVar16 = puVar17;\u000a      goto LAB_0040420b;\u000a    }\u000a    uStack720 = 0x4043ed;\u000a    local_40 = dst_name;\u000a    iVar7 = stat(dst_name,(stat *)&local_1a0);\u000a    backup_dst_name = (undefined *)0x0;\u000a    if (iVar7 != 0) goto LAB_0040445f;\u000aLAB_0040447b:\u000a    uStack720 = 0x4044a2;\u000a    local_60 = backup_dst_name;\u000a    _Var6 = same_file_ok(src_name,&local_110,dst_name,&local_1a0,\u000a                         (cp_options *)first_dir_created_per_command_line_arg,\u000a                         (_Bool *)&stack0xfffffffffffffdc8);\u000a    if (_Var6 == false) {\u000a      uStack720 = 0x404537;\u000a      ht_00 = dcgettext(0,"%s and %s are the same file",5);\u000a      uStack720 = 0x404549;\u000a      file = quotearg_n_style((char *)0x0);\u000aLAB_00404559:\u000a      *(undefined8 *)((undefined *)puVar18 + -8) = 0x40455e;\u000a      file_name = quotearg_n_style(1,((undefined *)puVar18)[-8]);\u000a      puVar19 = puVar18;\u000aLAB_0040456d:\u000a      *(undefined8 *)((undefined *)puVar19 + -8) = 0x404575;\u000a      error(0,0,ht_00,file,file_name);\u000a      return false;\u000a    }\u000a    if (((int)local_50 == 0x4000) || (first_dir_created_per_command_line_arg[0x2c] == false)) {\u000aLAB_00404ed0:\u000a      if (first_dir_created_per_command_line_arg[0x18] == false) {\u000a        iVar7 = (int)local_50;\u000a        if (iVar7 == 0x4000) goto LAB_00404f67;\u000a        if (*(int *)(first_dir_created_per_command_line_arg + 8) == 2) {\u000a          return true;\u000a        }\u000a        if (*(int *)(first_dir_created_per_command_line_arg + 8) != 3) goto LAB_00404f67;\u000a        uStack720 = 0x404f4c;\u000a        _Var6 = overwrite_ok((cp_options *)first_dir_created_per_command_line_arg,local_40,\u000a                             &local_1a0);\u000a        if (_Var6 == false) {\u000a          return true;\u000a        }\u000a        file = local_40;\u000a      }\u000a      else {\u000a        uStack720 = 0x404eee;\u000a        _Var6 = abandon_move((cp_options *)first_dir_created_per_command_line_arg,dst_name,\u000a                             &local_1a0);\u000a        iVar7 = (int)local_50;\u000a        if (_Var6 != false) {\u000a          if (in_stack_00000020 == (undefined *)0x0) {\u000a            return true;\u000a          }\u000a          *in_stack_00000020 = 1;\u000a          return true;\u000a        }\u000aLAB_00404f67:\u000a        file = local_40;\u000a      }\u000a      if (local_238_00 != false) {\u000a        return true;\u000a      }\u000a      local_40 = file;\u000a      if ((local_1a0.st_mode & 0xf000) != 0x4000) {\u000a        if ((iVar7 == 0x4000) &&\u000a           ((first_dir_created_per_command_line_arg[0x18] == false ||\u000a            (*(int *)first_dir_created_per_command_line_arg == 0)))) {\u000a          file_name = "cannot overwrite non-directory %s with directory %s";\u000a          local_40 = file;\u000aLAB_0040519b:\u000a          uStack720 = 0x4051a5;\u000a          ht_00 = dcgettext(0,file_name,5);\u000a          uStack720 = 0x4051b7;\u000a          file = quotearg_n_style((char *)0x0);\u000a          uStack720 = 0x4051cc;\u000a          file_name = quotearg_n_style((char *)0x1);\u000a          puVar19 = &uStack720 + 1;\u000a          goto LAB_0040456d;\u000a        }\u000a        local_40 = file;\u000a        if (((byte)copy_into_self != 0) &&\u000a           (local_40 = file, *(int *)first_dir_created_per_command_line_arg != 3)) {\u000a          uStack720 = 0x404fce;\u000a          local_40 = file;\u000a          _Var6 = seen_file(*(Hash_table **)(first_dir_created_per_command_line_arg + 0x38),file,\u000a                            &local_1a0);\u000a          if (_Var6 != false) {\u000a            file_name = "will not overwrite just-created %s with %s";\u000a            goto LAB_0040519b;\u000a          }\u000a        }\u000a      }\u000a      if (((iVar7 == 0x4000) || ((local_1a0.st_mode & 0xf000) != 0x4000)) ||\u000a         ((first_dir_created_per_command_line_arg[0x18] != false &&\u000a          (*(int *)first_dir_created_per_command_line_arg != 0)))) {\u000a        if ((((first_dir_created_per_command_line_arg[0x18] != false) &&\u000a             ((local_110.st_mode & 0xf000) == 0x4000)) && ((local_1a0.st_mode & 0xf000) != 0x4000))\u000a           && (*(int *)first_dir_created_per_command_line_arg == 0)) {\u000a          uStack720 = 0x40541f;\u000a          ht_00 = dcgettext(0,"cannot move directory onto non-directory: %s -> %s",5);\u000a          uStack720 = 0x405431;\u000a          file = quotearg_n_style_colon((char *)0x0);\u000a          uStack720 = 0x405443;\u000a          file_name = quotearg_n_style_colon((char *)0x0);\u000a          goto LAB_0040456d;\u000a        }\u000a        local_68 = (undefined *)((ulong)local_68 & 0xffffffffffffff00 | (ulong)_Var5);\u000a        if (*(int *)first_dir_created_per_command_line_arg != 0) {\u000a          uStack720 = 0x405061;\u000a          file_name = last_component(src_name);\u000a          uStack720 = 0x405069;\u000a          _Var5 = dot_or_dotdot(file_name);\u000a          if ((_Var5 == false) &&\u000a             ((first_dir_created_per_command_line_arg[0x18] != false ||\u000a              ((local_1a0.st_mode & 0xf000) != 0x4000)))) {\u000a            uStack720 = 0x405111;\u000a            local_70 = find_backup_file_name(file);\u000a            uStack720 = 0x405120;\u000a            iVar9 = strcmp(local_70,src_name);\u000a            file = local_70;\u000a            if (iVar9 == 0) {\u000a              file = "backing up %s would destroy source;  %s not copied";\u000a              if (first_dir_created_per_command_line_arg[0x18] != false) {\u000a                file = "backing up %s would destroy source;  %s not moved";\u000a              }\u000a              uStack720 = 0x4053bf;\u000a              ht_00 = dcgettext(0,file,5);\u000a              uStack720 = 0x4053d1;\u000a              file = quotearg_n_style((char *)0x0);\u000a              uStack720 = 0x4053e6;\u000a              file_name = quotearg_n_style((char *)0x1);\u000a              uStack720 = 0x4053fa;\u000a              error(0,0,ht_00,file,file_name);\u000a              uStack720 = 0x405403;\u000a              free(local_70);\u000a              return false;\u000a            }\u000a            uStack720 = 0x405134;\u000a            sVar12 = strlen(local_70);\u000a            lVar1 = -(sVar12 + 0x10 & 0xfffffffffffffff0);\u000a            __new = (ulong *)((long)&uStack720 + lVar1 + 8);\u000a            *(ulong *)((long)&uStack720 + lVar1) = 0x405154;\u000a            memcpy(__new,file,sVar12 + 1,*(undefined *)((long)&uStack720 + lVar1));\u000a            *(ulong *)((long)&uStack720 + lVar1) = 0x40515c;\u000a            free(file,*(undefined *)((long)&uStack720 + lVar1));\u000a            *(ulong *)((long)&uStack720 + lVar1) = 0x405168;\u000a            iVar9 = rename(local_40,__new,*(undefined *)((long)&uStack720 + lVar1));\u000a            if (iVar9 == 0) {\u000a              ht_00 = CONCAT71((int7)((ulong)file >> 8),1);\u000a              local_31 = 1;\u000a              local_60 = (undefined *)__new;\u000a            }\u000a            else {\u000a              *(ulong *)((long)&uStack720 + lVar1) = 0x405175;\u000a              puVar11 = (uint *)__errno_location(*(undefined *)((long)&uStack720 + lVar1));\u000a              uVar8 = *puVar11;\u000a              ht_00 = 0;\u000a              if (uVar8 != 2) {\u000a                file = "cannot backup %s";\u000a                puVar17 = __new;\u000a                goto LAB_004044f7;\u000a              }\u000a              local_31 = 1;\u000a              local_60 = (undefined *)0x0;\u000a            }\u000a            goto LAB_00404300;\u000a          }\u000a        }\u000a        if ((local_1a0.st_mode & 0xf000) != 0x4000) {\u000a          if (first_dir_created_per_command_line_arg[0x18] != false) {\u000a            ht_00 = 0;\u000a            local_60 = (undefined *)0x0;\u000a            __new = &uStack720 + 1;\u000a            goto LAB_00404300;\u000a          }\u000a          if (((first_dir_created_per_command_line_arg[0x15] != false) ||\u000a              ((first_dir_created_per_command_line_arg[0x21] != false && (1 < local_1a0.st_nlink))))\u000a             || ((*(int *)(first_dir_created_per_command_line_arg + 4) == 2 &&\u000a                 ((local_110.st_mode & 0xf000) != 0x8000)))) {\u000a            uStack720 = 0x405302;\u000a            iVar9 = unlink(local_40);\u000a            if (iVar9 != 0) {\u000a              uStack720 = 0x40530b;\u000a              piVar13 = __errno_location();\u000a              local_70 = (char *)CONCAT44(local_70._4_4_,*piVar13);\u000a              if (*piVar13 != 2) {\u000a                uStack720 = 0x40554f;\u000a                ht_00 = dcgettext(0,"cannot remove %s",5);\u000a                uStack720 = 0x40555f;\u000a                file = quotearg_style((char *)0x4);\u000a                uVar22 = (ulong)local_70 & 0xffffffff;\u000a                puVar17 = &uStack720 + 1;\u000a                goto LAB_0040451b;\u000a              }\u000a            }\u000a            local_31 = 1;\u000a            if (first_dir_created_per_command_line_arg[0x2d] != false) {\u000a              uStack720 = 0x40533d;\u000a              ht_00 = dcgettext(0,"removed %s\u005cn",5);\u000a              uStack720 = 0x40534e;\u000a              file = quotearg_style((char *)0x4);\u000a              uStack720 = 0x405363;\u000a              __printf_chk(1,ht_00,file);\u000a            }\u000a            ht_00 = 0;\u000a            local_60 = (undefined *)0x0;\u000a            goto LAB_00404300;\u000a          }\u000a        }\u000a        ht_00 = 0;\u000a        local_60 = (undefined *)0x0;\u000a        __new = &uStack720 + 1;\u000a        goto LAB_00404300;\u000a      }\u000a      uStack720 = 0x40529c;\u000a      ht_00 = dcgettext(0,"cannot overwrite directory %s with non-directory",5);\u000a      uStack720 = 0x4052ac;\u000a      file = quotearg_style((char *)0x4);\u000a      uVar22 = 0;\u000a      goto LAB_0040451b;\u000a    }\u000a    uStack720 = 0x404e77;\u000a    iVar7 = utimecmp(dst_name,&local_1a0,&local_110);\u000a    if (iVar7 < 0) goto LAB_00404ed0;\u000a    if (in_stack_00000020 != (undefined *)0x0) {\u000a      *in_stack_00000020 = 1;\u000a    }\u000a    uStack720 = 0x404e9d;\u000a    local_70 = remember_copied(dst_name,local_110.st_ino,(dev_t)local_110.st_dev);\u000a    if (local_70 == (char *)0x0) {\u000a      return true;\u000a    }\u000a    uStack720 = 0x404ec0;\u000a    _Var5 = create_hard_link(local_70,dst_name);\u000a    if (_Var5 != false) {\u000a      return (_Bool)1;\u000a    }\u000a    local_60 = (undefined *)0x0;\u000a    _Var5 = first_dir_created_per_command_line_arg[0x24];\u000a  }\u000a  else {\u000a    local_68 = (undefined *)((ulong)local_68 & 0xffffffffffffff00 | (ulong)_Var5);\u000a    local_40 = dst_name;\u000aLAB_004042f2:\u000a    local_60._0_1_ = 0;\u000a    ht_00 = 0;\u000a    iVar7 = (int)local_50;\u000a    local_60 = (undefined *)0x0;\u000a    __new = &uStack720 + 1;\u000aLAB_00404300:\u000a    cVar21 = (char)ht_00;\u000a    if (((((byte)copy_into_self != 0) &&\u000a         (*(long *)(first_dir_created_per_command_line_arg + 0x38) != 0)) &&\u000a        (first_dir_created_per_command_line_arg[0x18] == false)) &&\u000a       (*(int *)first_dir_created_per_command_line_arg == 0)) {\u000a      if ((char)local_60 == 0) {\u000a        stats = (stat *)&stack0xfffffffffffffdc8;\u000a        *(undefined8 *)((undefined *)__new + -8) = 0x40458d;\u000a        iVar9 = lstat(local_40,stats,((undefined *)__new)[-8]);\u000a        if (iVar9 != 0) goto LAB_00404599;\u000a      }\u000a      else {\u000a        stats = &local_1a0;\u000a      }\u000a      if ((stats->st_mode & 0xf000) == 0xa000) {\u000a        ht = *(undefined8 *)(first_dir_created_per_command_line_arg + 0x38);\u000a        *(undefined8 *)((undefined *)__new + -8) = 0x404362;\u000a        _Var5 = seen_file(ht,local_40,stats,((undefined *)__new)[-8]);\u000a        if (_Var5 != false) {\u000a          *(undefined8 *)((undefined *)__new + -8) = 0x40437e;\u000a          ht_00 = dcgettext(0,"will not copy %s through just-created symlink %s",5);\u000a          *(undefined8 *)((undefined *)__new + -8) = 0x404390;\u000a          file = quotearg_n_style(0,((undefined *)__new)[-8]);\u000a          puVar18 = __new;\u000a          goto LAB_00404559;\u000a        }\u000a      }\u000a    }\u000aLAB_00404599:\u000a    if ((iVar7 != 0x4000) && (first_dir_created_per_command_line_arg[0x2d] != false)) {\u000a      backup_dst_name = (undefined *)0x0;\u000a      if (cVar21 != 0) {\u000a        backup_dst_name = local_60;\u000a      }\u000a      *(undefined8 *)((undefined *)__new + -8) = 0x4045c0;\u000a      emit_verbose(src_name,local_40,backup_dst_name,((undefined *)__new)[-8]);\u000a    }\u000a    if ((first_dir_created_per_command_line_arg[0x29] == false) || (iVar7 != 0x4000)) {\u000a      if ((first_dir_created_per_command_line_arg[0x18] != false) && (local_110.st_nlink == 1))\u000a      goto LAB_00404685;\u000a      if (((first_dir_created_per_command_line_arg[0x21] != false) &&\u000a          (first_dir_created_per_command_line_arg[0x17] == false)) &&\u000a         ((1 < local_110.st_nlink ||\u000a          ((*(int *)(first_dir_created_per_command_line_arg + 4) == 4 ||\u000a           ((*(int *)(first_dir_created_per_command_line_arg + 4) == 3 & (byte)copy_into_self) != 0)\u000a           ))))) goto LAB_004045f8;\u000aLAB_0040472d:\u000a      local_70 = (char *)0x0;\u000aLAB_0040472f:\u000a      if (first_dir_created_per_command_line_arg[0x18] != false) {\u000a        *(undefined8 *)((undefined *)__new + -8) = 0x40474b;\u000a        iVar9 = rename(src_name,local_40,((undefined *)__new)[-8]);\u000a        if (iVar9 == 0) {\u000a          if (first_dir_created_per_command_line_arg[0x2d] != false && iVar7 == 0x4000) {\u000a            backup_dst_name = (undefined *)0x0;\u000a            if (cVar21 != 0) {\u000a              backup_dst_name = local_60;\u000a            }\u000a            *(undefined8 *)((undefined *)__new + -8) = 0x404825;\u000a            emit_verbose(src_name,local_40,backup_dst_name,((undefined *)__new)[-8]);\u000a          }\u000a          if (first_dir_created_per_command_line_arg[0x20] != false) {\u000a            *(undefined8 *)((undefined *)__new + -8) = 0x404840;\u000a            set_file_security_ctx(((undefined *)__new)[-8]);\u000a          }\u000a          if (in_stack_00000020 != (undefined *)0x0) {\u000a            *in_stack_00000020 = 1;\u000a          }\u000a          if ((byte)copy_into_self == 0) {\u000a            return true;\u000a          }\u000a          ht_00 = *(undefined8 *)(first_dir_created_per_command_line_arg + 0x38);\u000a          *(undefined8 *)((undefined *)__new + -8) = 0x40486e;\u000a          record_file(ht_00,local_40,&local_110,((undefined *)__new)[-8]);\u000a          return true;\u000a        }\u000a        *(undefined8 *)((undefined *)__new + -8) = 0x404758;\u000a        puVar11 = (uint *)__errno_location(((undefined *)__new)[-8]);\u000a        uVar8 = *puVar11;\u000a        if (uVar8 != 0x12) {\u000a          if (uVar8 == 0x16) {\u000a            *(undefined8 *)((undefined *)__new + -8) = 0x404781;\u000a            ht_00 = dcgettext(0,"cannot move %s to a subdirectory of itself, %s",5);\u000a            *(undefined8 *)((undefined *)__new + -8) = 0x404797;\u000a            file = quotearg_n_style(0,((undefined *)__new)[-8]);\u000a            *(undefined8 *)((undefined *)__new + -8) = 0x4047b0;\u000a            file_name = quotearg_n_style(1,((undefined *)__new)[-8]);\u000a            *(undefined8 *)((undefined *)__new + -8) = 0x4047c7;\u000a            error(0,0,ht_00,file,file_name);\u000a            *in_stack_00000018 = 1;\u000a            return true;\u000a          }\u000a          file = "cannot move %s to %s";\u000aLAB_00404c3f:\u000a          *(undefined8 *)((undefined *)__new + -8) = 0x404c49;\u000a          ht_00 = dcgettext(0,file,5);\u000a          *(undefined8 *)((undefined *)__new + -8) = 0x404c5b;\u000a          file = quotearg_n_style(0,((undefined *)__new)[-8]);\u000a          *(undefined8 *)((undefined *)__new + -8) = 0x404c71;\u000a          file_name = quotearg_n_style(1,((undefined *)__new)[-8]);\u000a          *(undefined8 *)((undefined *)__new + -8) = 0x404c85;\u000a          error(0,(ulong)uVar8,ht_00,file,file_name);\u000a          *(undefined8 *)((undefined *)__new + -8) = 0x404c98;\u000a          forget_created(local_110.st_ino,local_110.st_dev,((undefined *)__new)[-8]);\u000a          return false;\u000a        }\u000a        if (iVar7 == 0x4000) {\u000a          *(undefined8 *)((undefined *)__new + -8) = 0x4048f8;\u000a          iVar9 = rmdir(local_40,((undefined *)__new)[-8]);\u000a        }\u000a        else {\u000a          *(undefined8 *)((undefined *)__new + -8) = 0x40498c;\u000a          iVar9 = unlink(local_40,((undefined *)__new)[-8]);\u000a        }\u000a        if (iVar9 != 0) {\u000a          local_80._4_4_ = (undefined4)((ulong)local_80 >> 0x20);\u000a          uVar8 = *puVar11;\u000a          if (uVar8 != 2) {\u000a            file = "inter-device move failed: %s to %s; unable to remove target";\u000a            goto LAB_00404c3f;\u000a          }\u000a        }\u000a        local_31 = 1;\u000a      }\u000a      uVar8 = local_58;\u000a      if (first_dir_created_per_command_line_arg[0x2a] != false) {\u000a        uVar8 = *(uint *)(first_dir_created_per_command_line_arg + 0x10);\u000a      }\u000a      local_80 = CONCAT44(local_80._4_4_,uVar8);\u000a      uVar8 = 0x12;\u000a      if (iVar7 != 0x4000) {\u000a        uVar8 = 0;\u000a      }\u000a      local_54 = 0x3f;\u000a      if (first_dir_created_per_command_line_arg[0x1c] == false) {\u000a        local_54 = uVar8;\u000a      }\u000a      *(undefined8 *)((undefined *)__new + -8) = 0x4049ec;\u000a      _Var5 = set_process_security_ctx(((undefined *)__new)[-8]);\u000a      pcVar3 = local_48;\u000a      if (_Var5 == false) {\u000a        return false;\u000a      }\u000a      local_54 = local_54 & (uint)local_80;\u000a      uVar22 = 0;\u000a      if (iVar7 == 0x4000) {\u000a        *(undefined8 *)((undefined *)__new + -8) = 0x404a19;\u000a        _Var5 = is_ancestor(&local_110,local_48,((undefined *)__new)[-8]);\u000a        file = local_40;\u000a        if (_Var5 == false) {\u000a          backup_dst_name = (undefined *)__new + -0x20;\u000a          *(cp_options **)((undefined *)__new + -0x20) = pcVar3;\u000a          *(ino_t *)((undefined *)__new + -0x18) = local_110.st_ino;\u000a          *(dir_list **)((undefined *)__new + -0x10) = local_110.st_dev;\u000a          if ((local_31 == 0) && ((local_1a0.st_mode & 0xf000) == 0x4000)) {\u000a            if ((first_dir_created_per_command_line_arg[0x20] |\u000a                first_dir_created_per_command_line_arg[0x24]) == 0) {\u000a              uVar24 = 0;\u000a              local_54 = 0;\u000a              local_48 = (cp_options *)\u000a                         ((ulong)local_48 & 0xffffffff00000000 |\u000a                          (ulong)first_dir_created_per_command_line_arg[0x24] | 0x4000);\u000a              pdVar14 = local_78;\u000a              uVar4 = 0;\u000a              local_68 = backup_dst_name;\u000a              if (local_78 != (dir_list *)0x0) goto LAB_00405490;\u000aLAB_004054a5:\u000a              *(undefined **)((undefined *)__new + -0x28) = in_stack_00000018;\u000a              *(_Bool **)((undefined *)__new + -0x30) = rename_succeeded;\u000a              *(undefined8 *)((undefined *)__new + -0x38) = 0x4054c8;\u000a              _Var5 = copy_dir(src_name,local_40,(ulong)local_31,&local_110,local_68,\u000a                               ((undefined *)__new)[-0x38]);\u000a            }\u000a            else {\u000a              *(undefined8 *)((undefined *)__new + -0x28) = 0x404b9b;\u000a              local_68 = backup_dst_name;\u000a              _Var5 = set_file_security_ctx(((undefined *)__new)[-0x28]);\u000a              if (first_dir_created_per_command_line_arg[0x25] != false) goto LAB_00404d0c;\u000a              local_54 = 0;\u000a              uVar24 = 0;\u000a              local_48 = (cp_options *)\u000a                         ((ulong)local_48 & 0xffffffff00000000 |\u000a                         CONCAT71(extraout_var,_Var5) & 0xffffffff);\u000a              pdVar14 = local_78;\u000ajoined_r0x0040548e:\u000a              uVar4 = uVar24;\u000a              if (pdVar14 == (dir_list *)0x0) goto LAB_004054a5;\u000aLAB_00405490:\u000a              uVar24 = uVar4;\u000a              if ((first_dir_created_per_command_line_arg[0x1b] == false) ||\u000a                 (pdVar14->parent == local_110.st_dev)) goto LAB_004054a5;\u000a              _Var5 = true;\u000a            }\u000a            pdVar14 = (dir_list *)0x0;\u000a            local_68._0_4_ = 0;\u000a            __new = (ulong *)backup_dst_name;\u000a            goto LAB_0040577d;\u000a          }\u000a          *(undefined8 *)((undefined *)__new + -0x28) = 0x404be1;\u000a          iVar7 = mkdir(local_40,~local_54 & (uint)local_80 & 0xfff,((undefined *)__new)[-0x28]);\u000a          if (iVar7 == 0) {\u000a            *(undefined8 *)((undefined *)__new + -0x28) = 0x404cc9;\u000a            iVar7 = lstat(file,&local_1a0,((undefined *)__new)[-0x28]);\u000a            file = local_40;\u000a            uVar8 = local_1a0.st_mode;\u000a            if (iVar7 == 0) {\u000a              if ((local_1a0.st_mode & 0x1c0) == 0x1c0) {\u000a                local_48 = (cp_options *)\u000a                           ((ulong)local_48 & 0xffffffff00000000 | (ulong)local_1a0.st_mode);\u000a                uVar24 = 0;\u000a                local_68 = backup_dst_name;\u000a              }\u000a              else {\u000a                *(undefined8 *)((undefined *)__new + -0x28) = 0x4052ce;\u000a                local_68 = backup_dst_name;\u000a                iVar7 = chmod(local_40,local_1a0.st_mode | 0x1c0,((undefined *)__new)[-0x28]);\u000a                if (iVar7 != 0) {\u000a                  *(undefined8 *)((undefined *)__new + -0x28) = 0x4052db;\u000a                  puVar11 = (uint *)__errno_location(((undefined *)__new)[-0x28]);\u000a                  uVar8 = *puVar11;\u000a                  file = "setting permissions for %s";\u000a                  __new = (ulong *)backup_dst_name;\u000a                  goto LAB_00404ce0;\u000a                }\u000a                local_48 = (cp_options *)((ulong)local_48 & 0xffffffff00000000 | (ulong)uVar8);\u000a                uVar24 = (undefined4)CONCAT71((int7)((ulong)file >> 8),1);\u000a              }\u000a              pdVar14 = local_78;\u000a              if (*rename_succeeded == false) {\u000a                *(undefined8 *)((undefined *)__new + -0x28) = 0x405470;\u000a                remember_copied(local_40,local_1a0.st_ino,local_1a0.st_dev,\u000a                                ((undefined *)__new)[-0x28]);\u000a                *rename_succeeded = true;\u000a              }\u000a              if (first_dir_created_per_command_line_arg[0x2d] != false) {\u000a                *(undefined8 *)((undefined *)__new + -0x28) = 0x40548b;\u000a                emit_verbose(src_name,local_40,0,((undefined *)__new)[-0x28]);\u000a              }\u000a              goto joined_r0x0040548e;\u000a            }\u000a            *(undefined8 *)((undefined *)__new + -0x28) = 0x404cd6;\u000a            puVar11 = (uint *)__errno_location(((undefined *)__new)[-0x28]);\u000a            uVar8 = *puVar11;\u000a            file = "cannot stat %s";\u000a            __new = (ulong *)backup_dst_name;\u000a          }\u000a          else {\u000a            *(undefined8 *)((undefined *)__new + -0x28) = 0x404bee;\u000a            puVar11 = (uint *)__errno_location(((undefined *)__new)[-0x28]);\u000a            uVar8 = *puVar11;\u000a            file = "cannot create directory %s";\u000a            __new = (ulong *)backup_dst_name;\u000a          }\u000aLAB_00404ce0:\u000a          *(undefined8 *)((undefined *)__new + -8) = 0x404cea;\u000a          ht_00 = dcgettext(0,file,5);\u000a          *(undefined8 *)((undefined *)__new + -8) = 0x404cfa;\u000a          file = quotearg_style(4,((undefined *)__new)[-8]);\u000a          uVar22 = (ulong)uVar8;\u000a        }\u000a        else {\u000a          file = "cannot copy cyclic symbolic link %s";\u000aLAB_00404a28:\u000a          *(undefined8 *)((undefined *)__new + -8) = 0x404a32;\u000a          ht_00 = dcgettext(0,file,5);\u000a          *(undefined8 *)((undefined *)__new + -8) = 0x404a42;\u000a          file = quotearg_style(4,((undefined *)__new)[-8]);\u000aLAB_00404a42:\u000a          uVar22 = 0;\u000a        }\u000aLAB_00404d04:\u000a        *(undefined8 *)((undefined *)__new + -8) = 0x404d0c;\u000a        error(0,uVar22,ht_00,file);\u000a        backup_dst_name = (undefined *)__new;\u000a      }\u000a      else {\u000a        if (first_dir_created_per_command_line_arg[0x2b] != false) {\u000a          if (*src_name != '/') {\u000a            *(undefined8 *)((undefined *)__new + -8) = 0x404a6e;\u000a            file = dir_name(local_40,((undefined *)__new)[-8]);\u000a            if ((*file != '.') || (file[1] != 0)) {\u000a              *(undefined8 *)((undefined *)__new + -8) = 0x404a8f;\u000a              iVar7 = stat(&DAT_004124e0,&stack0xfffffffffffffdc8,((undefined *)__new)[-8]);\u000a              if (iVar7 == 0) {\u000a                *(undefined8 *)((undefined *)__new + -8) = 0x404aa2;\u000a                iVar7 = stat(file,&uStack720 + 1,((undefined *)__new)[-8]);\u000a                uVar2 = local_238;\u000a                if (iVar7 == 0) {\u000a                  if (timespec[0].tv_sec == local_2c0) {\u000a                    *(undefined8 *)((undefined *)__new + -8) = 0x40520a;\u000a                    free(file,((undefined *)__new)[-8]);\u000a                    uVar22 = uVar2;\u000a                    if (uVar2 == local_2c8) goto LAB_00404ab6;\u000a                  }\u000a                  else {\u000a                    *(undefined8 *)((undefined *)__new + -8) = 0x405370;\u000a                    free(file,((undefined *)__new)[-8]);\u000a                  }\u000a                  *(undefined8 *)((undefined *)__new + -8) = 0x405381;\u000a                  ht_00 = dcgettext(0,\u000a                                    "%s: can make relative symbolic links only in current directory"\u000a                                    ,5);\u000a                  *(undefined8 *)((undefined *)__new + -8) = 0x405394;\u000a                  file = quotearg_n_style_colon(0,((undefined *)__new)[-8]);\u000a                  goto LAB_00404a42;\u000a                }\u000a              }\u000a            }\u000a            *(undefined8 *)((undefined *)__new + -8) = 0x404ab2;\u000a            free(file,((undefined *)__new)[-8]);\u000a          }\u000aLAB_00404ab6:\u000a          *(undefined8 *)((undefined *)__new + -8) = 0x404ac1;\u000a          iVar7 = symlink(src_name,local_40,((undefined *)__new)[-8]);\u000a          if (iVar7 == 0) {\u000aLAB_00405770:\u000a            pdVar14 = (dir_list *)CONCAT71((int7)(uVar22 >> 8),1);\u000a            local_68._0_4_ = 0;\u000a            goto LAB_00405777;\u000a          }\u000a          *(undefined8 *)((undefined *)__new + -8) = 0x404ace;\u000a          puVar11 = (uint *)__errno_location(((undefined *)__new)[-8]);\u000a          local_50 = local_50 & 0xffffffff00000000 | (ulong)*puVar11;\u000a          *(undefined8 *)((undefined *)__new + -8) = 0x404ae4;\u000a          ht_00 = dcgettext(0,"cannot create symbolic link %s to %s",5);\u000a          *(undefined8 *)((undefined *)__new + -8) = 0x404af6;\u000a          file = quotearg_n_style(0,((undefined *)__new)[-8]);\u000a          *(undefined8 *)((undefined *)__new + -8) = 0x404b0b;\u000a          file_name = quotearg_n_style(1,((undefined *)__new)[-8]);\u000a          uVar22 = local_50 & 0xffffffff;\u000a          goto LAB_00404b1b;\u000a        }\u000a        if (first_dir_created_per_command_line_arg[0x17] == false) {\u000a          iVar7 = (int)local_50;\u000a          if ((iVar7 == 0x8000) ||\u000a             ((iVar7 != 0xa000 && (first_dir_created_per_command_line_arg[0x14] != false)))) {\u000a            local_80._0_4_ = (uint)local_80 & 0x1ff;\u000a            *(stat **)((undefined *)__new + -0x10) = &local_110;\u000a            *(undefined8 *)((undefined *)__new + -0x18) = 0x404e43;\u000a            file = local_40;\u000a            _Var5 = copy_reg(src_name,local_40,first_dir_created_per_command_line_arg,\u000a                             (ulong)(uint)local_80,(ulong)local_54,((undefined *)__new)[-0x18]);\u000a            backup_dst_name = (undefined *)__new;\u000a            if (_Var5 == false) goto LAB_00404d0c;\u000a            local_68._0_4_ = (uint)CONCAT71((int7)((ulong)file >> 8),1);\u000a            pdVar14 = (dir_list *)0x0;\u000a          }\u000a          else {\u000a            switch(iVar7 - 0x1000U >> 0xc) {\u000a            case 0:\u000a              uVar8 = ~local_54;\u000a              *(undefined8 *)((undefined *)__new + -8) = 0x405582;\u000a              iVar7 = rpl_mknod(local_40,(ulong)(uVar8 & local_58),((undefined *)__new)[-8]);\u000a              if (iVar7 == 0) {\u000a                local_68._0_4_ = 0;\u000a                uVar24 = 0;\u000a                local_48 = (cp_options *)((ulong)local_48 & 0xffffffff00000000);\u000a                _Var5 = true;\u000a                pdVar14 = (dir_list *)0x0;\u000a              }\u000a              else {\u000a                *(undefined8 *)((undefined *)__new + -8) = 0x40559d;\u000a                iVar7 = mkfifo(local_40,uVar8 & local_58 & 0xffffefff,((undefined *)__new)[-8]);\u000a                if (iVar7 != 0) {\u000a                  *(undefined8 *)((undefined *)__new + -8) = 0x4055aa;\u000a                  puVar11 = (uint *)__errno_location(((undefined *)__new)[-8]);\u000a                  uVar8 = *puVar11;\u000a                  *(undefined8 *)((undefined *)__new + -8) = 0x4055be;\u000a                  ht_00 = dcgettext(0,"cannot create fifo %s",5);\u000a                  goto LAB_004056ce;\u000a                }\u000a                pdVar14 = (dir_list *)0x0;\u000a                local_68._0_4_ = 0;\u000a                uVar24 = 0;\u000a                local_48 = (cp_options *)((ulong)local_48 & 0xffffffff00000000);\u000a                _Var5 = true;\u000a              }\u000a              goto LAB_0040577d;\u000a            case 1:\u000a            case 5:\u000a            case 0xb:\u000a              *(undefined8 *)((undefined *)__new + -8) = 0x405269;\u000a              iVar7 = rpl_mknod(local_40,(ulong)(~local_54 & local_58),((undefined *)__new)[-8]);\u000a              if (iVar7 != 0) {\u000a                *(undefined8 *)((undefined *)__new + -8) = 0x405276;\u000a                puVar11 = (uint *)__errno_location(((undefined *)__new)[-8]);\u000a                uVar8 = *puVar11;\u000a                file = "cannot create special file %s";\u000a                goto LAB_00404ce0;\u000a              }\u000a              pdVar14 = (dir_list *)0x0;\u000a              local_68._0_4_ = 0;\u000a              break;\u000a            default:\u000a              file = "%s has unknown file type";\u000a              goto LAB_00404a28;\u000a            case 9:\u000a              *(undefined8 *)((undefined *)__new + -8) = 0x4055ea;\u000a              file = areadlink_with_size(src_name,local_110.st_size,((undefined *)__new)[-8]);\u000a              if (file == (char *)0x0) {\u000a                *(undefined8 *)((undefined *)__new + -8) = 0x4056af;\u000a                puVar11 = (uint *)__errno_location(((undefined *)__new)[-8]);\u000a                uVar8 = *puVar11;\u000a                *(undefined8 *)((undefined *)__new + -8) = 0x4056c3;\u000a                ht_00 = dcgettext(0,"cannot read symbolic link %s",5);\u000aLAB_004056ce:\u000a                uVar22 = (ulong)uVar8;\u000a                *(undefined8 *)((undefined *)__new + -8) = 0x4056d3;\u000a                file = quotearg_style(4,((undefined *)__new)[-8]);\u000a                goto LAB_00404d04;\u000a              }\u000a              *(undefined8 *)((undefined *)__new + -8) = 0x405602;\u000a              iVar7 = symlink(file,local_40,((undefined *)__new)[-8]);\u000a              if (iVar7 == 0) {\u000a                *(undefined8 *)((undefined *)__new + -8) = 0x405732;\u000a                free(file,((undefined *)__new)[-8]);\u000aLAB_00405732:\u000a                if (first_dir_created_per_command_line_arg[0x24] != false) {\u000a                  *(undefined8 *)((undefined *)__new + -8) = 0x40573f;\u000a                  restore_default_fscreatecon_or_die();\u000a                }\u000a                if (first_dir_created_per_command_line_arg[0x1c] != false) {\u000a                  *(undefined8 *)((undefined *)__new + -8) = 0x40575c;\u000a                  iVar7 = lchown(local_40,local_110.st_uid,local_110.st_gid,((undefined *)__new)[-8]\u000a                                );\u000a                  if (iVar7 != 0) {\u000a                    *(undefined8 *)((undefined *)__new + -8) = 0x405768;\u000a                    _Var5 = chown_failure_ok(first_dir_created_per_command_line_arg,\u000a                                             ((undefined *)__new)[-8]);\u000a                    if (_Var5 == false) {\u000a                      *(undefined8 *)((undefined *)__new + -8) = 0x405ae8;\u000a                      puVar11 = (uint *)__errno_location(((undefined *)__new)[-8]);\u000a                      uVar8 = *puVar11;\u000a                      *(undefined8 *)((undefined *)__new + -8) = 0x405afb;\u000a                      ht_00 = dcgettext(0,"failed to preserve ownership for %s",5);\u000a                      *(undefined8 *)((undefined *)__new + -8) = 0x405b10;\u000a                      error(0,(ulong)uVar8,ht_00,local_40);\u000a                      _Var5 = first_dir_created_per_command_line_arg[0x24];\u000a                      puVar15 = __new;\u000a                      puVar20 = __new;\u000a                      goto joined_r0x00404722;\u000a                    }\u000a                  }\u000a                }\u000a                goto LAB_00405770;\u000a              }\u000a              *(undefined8 *)((undefined *)__new + -8) = 0x40560f;\u000a              puVar11 = (uint *)__errno_location(((undefined *)__new)[-8]);\u000a              uVar22 = (ulong)*puVar11;\u000a              if (((first_dir_created_per_command_line_arg[0x2c] == false) || (local_31 != 0)) ||\u000a                 ((local_1a0.st_mode & 0xf000) != 0xa000)) {\u000aLAB_004056e2:\u000a                *(undefined8 *)((undefined *)__new + -8) = 0x4056ea;\u000a                free(file,((undefined *)__new)[-8]);\u000a              }\u000a              else {\u000a                *(undefined8 *)((undefined *)__new + -8) = 0x40564e;\u000a                sVar12 = strlen(file,((undefined *)__new)[-8]);\u000a                if (local_1a0.st_size != sVar12) goto LAB_004056e2;\u000a                *(undefined8 *)((undefined *)__new + -8) = 0x405663;\u000a                file_name = areadlink_with_size(local_40,local_1a0.st_size,((undefined *)__new)[-8])\u000a                ;\u000a                if (file_name == (char *)0x0) {\u000a                  local_48 = (cp_options *)((ulong)local_48 & 0xffffffff00000000);\u000a                }\u000a                else {\u000a                  *(undefined8 *)((undefined *)__new + -8) = 0x40567a;\u000a                  uVar8 = strcmp(file_name,file,((undefined *)__new)[-8]);\u000a                  local_48 = (cp_options *)\u000a                             ((ulong)local_48 & 0xffffffff00000000 |\u000a                             (ulong)(uVar8 & 0xffffff00 | (uint)(uVar8 == 0)));\u000a                }\u000a                *(undefined8 *)((undefined *)__new + -8) = 0x405bc8;\u000a                free(file_name,((undefined *)__new)[-8]);\u000a                *(undefined8 *)((undefined *)__new + -8) = 0x405bd0;\u000a                free(file,((undefined *)__new)[-8]);\u000a                if ((char)local_48 != 0) goto LAB_00405732;\u000a              }\u000a              *(undefined8 *)((undefined *)__new + -8) = 0x4056fb;\u000a              ht_00 = dcgettext(0,"cannot create symbolic link %s",5);\u000a              *(undefined8 *)((undefined *)__new + -8) = 0x40570c;\u000a              file = quotearg_style(4,((undefined *)__new)[-8]);\u000a              goto LAB_00404d04;\u000a            }\u000a          }\u000aLAB_00405777:\u000a          _Var5 = true;\u000a          uVar24 = 0;\u000a          local_48 = (cp_options *)CONCAT44(local_48._4_4_,(uint)local_80);\u000aLAB_0040577d:\u000a          iVar7 = (int)local_50;\u000a          if (((local_31 == 0) && (iVar7 != 0x4000)) &&\u000a             ((first_dir_created_per_command_line_arg[0x14] == false &&\u000a              ((first_dir_created_per_command_line_arg[0x20] |\u000a               first_dir_created_per_command_line_arg[0x24]) != 0)))) {\u000a            local_68 = (undefined *)((ulong)local_68 & 0xffffffff00000000 | (ulong)(uint)local_68);\u000a            *(undefined8 *)((undefined *)__new + -8) = 0x4058a3;\u000a            local_78 = pdVar14;\u000a            set_file_security_ctx(((undefined *)__new)[-8]);\u000a            backup_dst_name = (undefined *)__new;\u000a            pdVar14 = local_78;\u000a            if (first_dir_created_per_command_line_arg[0x25] != false) goto LAB_00404d0c;\u000a          }\u000a          cVar21 = (char)(uint)local_68;\u000a          if (((byte)copy_into_self != 0) &&\u000a             (*(long *)(first_dir_created_per_command_line_arg + 0x38) != 0)) {\u000a            local_68 = (undefined *)((ulong)local_68 & 0xffffffff00000000 | (ulong)(uint)local_68);\u000a            *(undefined8 *)((undefined *)__new + -8) = 0x4057b6;\u000a            local_78 = pdVar14;\u000a            iVar9 = lstat(local_40,&stack0xfffffffffffffdc8,((undefined *)__new)[-8]);\u000a            if (iVar9 == 0) {\u000a              ht_00 = *(undefined8 *)(first_dir_created_per_command_line_arg + 0x38);\u000a              *(undefined8 *)((undefined *)__new + -8) = 0x4057cf;\u000a              record_file(ht_00,local_40,&stack0xfffffffffffffdc8,((undefined *)__new)[-8]);\u000a            }\u000a            cVar21 = (char)local_68;\u000a            pdVar14 = local_78;\u000a          }\u000a          cVar23 = (char)pdVar14;\u000a          if (((iVar7 != 0x4000) && (first_dir_created_per_command_line_arg[0x17] != false)) ||\u000a             (cVar21 != 0)) {\u000aLAB_0040592a:\u000a            return (_Bool)(_Var5 != false);\u000a          }\u000a          if (first_dir_created_per_command_line_arg[0x1e] != false) {\u000a            local_50 = local_50 & 0xffffffffffffff00 | (ulong)_Var5;\u000a            *(undefined8 *)((undefined *)__new + -8) = 0x405818;\u000a            local_238_01 = get_stat_atime(&local_110,((undefined *)__new)[-8]);\u000a            *(undefined8 *)((undefined *)__new + -8) = 0x40582e;\u000a            timespec._8_16_ = get_stat_mtime(&local_110,((undefined *)__new)[-8]);\u000a            if (cVar23 == 0) {\u000a              *(undefined8 *)((undefined *)__new + -8) = 0x4058ca;\u000a              iVar7 = utimens(local_40,&stack0xfffffffffffffdc8,((undefined *)__new)[-8]);\u000a            }\u000a            else {\u000a              *(undefined8 *)((undefined *)__new + -8) = 0x405851;\u000a              iVar7 = utimens_symlink(local_40,&stack0xfffffffffffffdc8,((undefined *)__new)[-8]);\u000a            }\u000a            if (iVar7 != 0) {\u000a              *(undefined8 *)((undefined *)__new + -8) = 0x4058d3;\u000a              puVar11 = (uint *)__errno_location(((undefined *)__new)[-8]);\u000a              uVar8 = *puVar11;\u000a              *(undefined8 *)((undefined *)__new + -8) = 0x4058eb;\u000a              local_78 = pdVar14;\u000a              ht_00 = dcgettext(0,"preserving times for %s",5);\u000a              *(undefined8 *)((undefined *)__new + -8) = 0x4058fc;\u000a              quotearg_style(4,((undefined *)__new)[-8]);\u000a              cVar23 = (char)local_78;\u000a              *(undefined8 *)((undefined *)__new + -8) = 0x405912;\u000a              error(0,(ulong)uVar8,ht_00);\u000a              if (first_dir_created_per_command_line_arg[0x23] != false) {\u000a                return false;\u000a              }\u000a            }\u000a            _Var5 = local_50._0_1_;\u000a          }\u000a          if (cVar23 != 0) goto LAB_0040592a;\u000a          local_50 = CONCAT44(local_50._4_4_,uVar24);\u000a          if ((first_dir_created_per_command_line_arg[0x1c] != false) &&\u000a             (((local_31 != 0 || (local_110.st_uid != local_1a0.st_uid)) ||\u000a              (local_110.st_gid != local_1a0.st_gid)))) {\u000a            *(undefined8 *)((undefined *)__new + -8) = 0x405991;\u000a            iVar7 = set_owner(first_dir_created_per_command_line_arg,local_40,0xffffffff,&local_110,\u000a                              ((undefined *)__new)[-8]);\u000a            if (iVar7 == -1) {\u000a              return (_Bool)0;\u000a            }\u000a          }\u000a          if ((first_dir_created_per_command_line_arg[0x1d] == false) &&\u000a             (first_dir_created_per_command_line_arg[0x18] == false)) {\u000a            if (first_dir_created_per_command_line_arg[0x2a] != false) {\u000a              *(undefined8 *)((undefined *)__new + -8) = 0x405a13;\u000a              iVar7 = set_acl(local_40,((undefined *)__new)[-8]);\u000a              if (iVar7 != 0) {\u000a                return false;\u000a              }\u000a              goto LAB_00405bae;\u000a            }\u000a            if (first_dir_created_per_command_line_arg[0x1f] != false) {\u000a              *(undefined8 *)((undefined *)__new + -8) = 0x405a33;\u000a              cached_umask(((undefined *)__new)[-8]);\u000a              *(undefined8 *)((undefined *)__new + -8) = 0x405a4a;\u000a              iVar7 = set_acl(local_40,((undefined *)__new)[-8]);\u000a              if (iVar7 != 0) {\u000a                return false;\u000a              }\u000a              goto LAB_00405bae;\u000a            }\u000a            if (local_54 == 0) {\u000a              local_54 = 0;\u000a            }\u000a            else {\u000a              *(undefined8 *)((undefined *)__new + -8) = 0x405a6c;\u000a              mVar10 = cached_umask(((undefined *)__new)[-8]);\u000a              local_54 = local_54 & ~mVar10;\u000a              if ((local_50._0_1_ == false) && (local_54 != 0)) {\u000a                if (local_31 != 0) {\u000a                  *(undefined8 *)((undefined *)__new + -8) = 0x405a9f;\u000a                  iVar7 = lstat(local_40,&local_1a0,((undefined *)__new)[-8]);\u000a                  if (iVar7 != 0) {\u000a                    *(undefined8 *)((undefined *)__new + -8) = 0x405aac;\u000a                    puVar11 = (uint *)__errno_location(((undefined *)__new)[-8]);\u000a                    uVar8 = *puVar11;\u000a                    *(undefined8 *)((undefined *)__new + -8) = 0x405ac3;\u000a                    ht_00 = dcgettext(0,"cannot stat %s",5);\u000a                    *(undefined8 *)((undefined *)__new + -8) = 0x405ad4;\u000a                    file = quotearg_style(4,((undefined *)__new)[-8]);\u000a                    uVar22 = (ulong)uVar8;\u000a                    puVar16 = __new;\u000a                    goto LAB_0040420b;\u000a                  }\u000a                }\u000a                local_48 = (cp_options *)CONCAT44(local_48._4_4_,local_1a0.st_mode);\u000a                if ((local_54 & ~local_1a0.st_mode) != 0) {\u000a                  local_50 = local_50 & 0xffffffff00000000 |\u000a                             CONCAT71((uint7)(uint3)(~local_1a0.st_mode >> 8),1);\u000a                }\u000a              }\u000a            }\u000a            if ((local_50 & 1) != 0) {\u000a              *(undefined8 *)((undefined *)__new + -8) = 0x405b59;\u000a              iVar7 = chmod(local_40,(uint)local_48 | local_54,((undefined *)__new)[-8]);\u000a              if (iVar7 != 0) {\u000a                *(undefined8 *)((undefined *)__new + -8) = 0x405b65;\u000a                puVar11 = (uint *)__errno_location(((undefined *)__new)[-8]);\u000a                uVar8 = *puVar11;\u000a                *(undefined8 *)((undefined *)__new + -8) = 0x405b7c;\u000a                ht_00 = dcgettext(0,"preserving permissions for %s",5);\u000a                *(undefined8 *)((undefined *)__new + -8) = 0x405b8d;\u000a                quotearg_style(4,((undefined *)__new)[-8]);\u000a                *(undefined8 *)((undefined *)__new + -8) = 0x405b9f;\u000a                error(0,(ulong)uVar8,ht_00);\u000a                if (first_dir_created_per_command_line_arg[0x23] != false) {\u000a                  return false;\u000a                }\u000a              }\u000a            }\u000a          }\u000a          else {\u000a            *(undefined8 *)((undefined *)__new + -8) = 0x4059d9;\u000a            iVar7 = copy_acl(src_name,0xffffffff,((undefined *)__new)[-8]);\u000a            if ((iVar7 != 0) && (first_dir_created_per_command_line_arg[0x23] != false)) {\u000a              return false;\u000a            }\u000a          }\u000aLAB_00405bae:\u000a          return (_Bool)(_Var5 != false);\u000a        }\u000a        pdVar14 = (dir_list *)0x0;\u000a        local_80._0_4_ = 0;\u000a        *(undefined8 *)((undefined *)__new + -8) = 0x404c24;\u000a        _Var5 = create_hard_link(src_name,local_40,((undefined *)__new)[-8]);\u000a        backup_dst_name = (undefined *)__new;\u000a        if (_Var5 != false) {\u000a          local_68._0_4_ = 0;\u000a          goto LAB_00405777;\u000a        }\u000a      }\u000aLAB_00404d0c:\u000a      _Var5 = first_dir_created_per_command_line_arg[0x24];\u000a      puVar15 = (ulong *)backup_dst_name;\u000a      puVar20 = (ulong *)backup_dst_name;\u000a    }\u000a    else {\u000a      if ((byte)copy_into_self == 0) {\u000aLAB_00404685:\u000a        *(undefined8 *)((undefined *)__new + -8) = 0x40468a;\u000a        file = src_to_dest_lookup(local_110.st_ino,local_110.st_dev,((undefined *)__new)[-8]);\u000a      }\u000a      else {\u000aLAB_004045f8:\u000a        *(undefined8 *)((undefined *)__new + -8) = 0x4045fd;\u000a        file = remember_copied(local_40,local_110.st_ino,local_110.st_dev,((undefined *)__new)[-8]);\u000a      }\u000a      if (file == (char *)0x0) goto LAB_0040472d;\u000a      if (iVar7 != 0x4000) {\u000a        *(undefined8 *)((undefined *)__new + -8) = 0x4047f2;\u000a        local_70 = file;\u000a        _Var5 = create_hard_link(file,local_40,((undefined *)__new)[-8]);\u000a        backup_dst_name = (undefined *)__new;\u000a        if (_Var5 != false) {\u000a          return true;\u000a        }\u000a        goto LAB_00404d0c;\u000a      }\u000a      *(undefined8 *)((undefined *)__new + -8) = 0x4046b6;\u000a      local_80 = ht_00;\u000a      local_70 = file;\u000a      _Var5 = same_name(src_name,file,((undefined *)__new)[-8]);\u000a      if (_Var5 != false) {\u000a        *(undefined8 *)((undefined *)__new + -8) = 0x4046cf;\u000a        ht_00 = dcgettext(0,"cannot copy a directory, %s, into itself, %s",5);\u000a        *(undefined8 *)((undefined *)__new + -8) = 0x4046e5;\u000a        file = quotearg_n_style(0,((undefined *)__new)[-8]);\u000a        *(undefined8 *)((undefined *)__new + -8) = 0x4046fe;\u000a        file_name = quotearg_n_style(1,((undefined *)__new)[-8]);\u000a        *(undefined8 *)((undefined *)__new + -8) = 0x404715;\u000a        error(0,0,ht_00,file,file_name);\u000a        *in_stack_00000018 = 1;\u000a        _Var5 = first_dir_created_per_command_line_arg[0x24];\u000a        puVar15 = __new;\u000a        puVar20 = __new;\u000a        goto joined_r0x00404722;\u000a      }\u000a      *(undefined8 *)((undefined *)__new + -8) = 0x40487f;\u000a      _Var5 = same_name(local_40,file,((undefined *)__new)[-8]);\u000a      if (_Var5 != false) {\u000a        *(undefined8 *)((undefined *)__new + -8) = 0x404898;\u000a        ht_00 = dcgettext(0,"warning: source directory %s specified more than once",5);\u000a        *(undefined8 *)((undefined *)__new + -8) = 0x4048ac;\u000a        file = quotearg_style(4,((undefined *)__new)[-8]);\u000a        *(undefined8 *)((undefined *)__new + -8) = 0x4048bd;\u000a        error(0,0,ht_00,file);\u000a        if (in_stack_00000020 == (undefined *)0x0) {\u000a          return true;\u000a        }\u000a        if (first_dir_created_per_command_line_arg[0x18] == false) {\u000a          return true;\u000a        }\u000a        *in_stack_00000020 = 1;\u000a        return true;\u000a      }\u000a      cVar21 = (char)local_80;\u000a      if ((*(int *)(first_dir_created_per_command_line_arg + 4) == 4) ||\u000a         ((*(int *)(first_dir_created_per_command_line_arg + 4) == 3 & (byte)copy_into_self) != 0))\u000a      goto LAB_0040472f;\u000a      *(undefined8 *)((undefined *)__new + -8) = 0x404946;\u000a      ht_00 = dcgettext(0,"will not create hard link %s to directory %s",5);\u000a      *(undefined8 *)((undefined *)__new + -8) = 0x404959;\u000a      file = quotearg_n_style(0,((undefined *)__new)[-8]);\u000a      *(undefined8 *)((undefined *)__new + -8) = 0x40496f;\u000a      file_name = quotearg_n_style(1,((undefined *)__new)[-8]);\u000a      uVar22 = 0;\u000aLAB_00404b1b:\u000a      *(undefined8 *)((undefined *)__new + -8) = 0x404b23;\u000a      error(0,uVar22,ht_00,file,file_name);\u000a      _Var5 = first_dir_created_per_command_line_arg[0x24];\u000a      puVar15 = __new;\u000a      puVar20 = __new;\u000a    }\u000a  }\u000ajoined_r0x00404722:\u000a  if (_Var5 != false) {\u000a    *(undefined8 *)((undefined *)puVar15 + -8) = 0x404d19;\u000a    restore_default_fscreatecon_or_die();\u000a    puVar20 = puVar15;\u000a  }\u000a  file = local_40;\u000a  if (local_70 == (char *)0x0) {\u000a    *(undefined8 *)((undefined *)puVar20 + -8) = 0x404d37;\u000a    forget_created(local_110.st_ino,local_110.st_dev,((undefined *)puVar20)[-8]);\u000a  }\u000a  if (local_60 == (undefined *)0x0) {\u000a    return false;\u000a  }\u000a  *(undefined8 *)((undefined *)puVar20 + -8) = 0x404d48;\u000a  iVar7 = rename(local_60,file,((undefined *)puVar20)[-8]);\u000a  if (iVar7 == 0) {\u000a    if (first_dir_created_per_command_line_arg[0x2d] != false) {\u000a      *(undefined8 *)((undefined *)puVar20 + -8) = 0x404db1;\u000a      ht_00 = dcgettext(0,"%s -> %s (unbackup)\u005cn",5);\u000a      *(undefined8 *)((undefined *)puVar20 + -8) = 0x404dc4;\u000a      file = quotearg_n_style(0,((undefined *)puVar20)[-8]);\u000a      *(undefined8 *)((undefined *)puVar20 + -8) = 0x404dd9;\u000a      file_name = quotearg_n_style(1,((undefined *)puVar20)[-8]);\u000a      *(undefined8 *)((undefined *)puVar20 + -8) = 0x404dee;\u000a      __printf_chk(1,ht_00,file,file_name);\u000a      return false;\u000a    }\u000a    return false;\u000a  }\u000a  *(undefined8 *)((undefined *)puVar20 + -8) = 0x404d51;\u000a  puVar11 = (uint *)__errno_location(((undefined *)puVar20)[-8]);\u000a  uVar8 = *puVar11;\u000a  *(undefined8 *)((undefined *)puVar20 + -8) = 0x404d68;\u000a  ht_00 = dcgettext(0,"cannot un-backup %s",5);\u000a  *(undefined8 *)((undefined *)puVar20 + -8) = 0x404d78;\u000a  file = quotearg_style(4,((undefined *)puVar20)[-8]);\u000a  uVar22 = (ulong)uVar8;\u000a  puVar16 = puVar20;\u000aLAB_0040420b:\u000a  *(undefined8 *)((undefined *)puVar16 + -8) = 0x404210;\u000a  error(0,uVar22,ht_00,file);\u000a  return false;\u000a}\u000a\u000a
p521
S'PUSH RBP\nMOV RBP,RSP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x298\nMOV R12,R9\nMOV R14,R8\nMOV RBX,RCX\nMOV R13,RSI\nMOV R15,RDI\nMOV RSI,qword ptr [RBP + 0x28]\nMOV RCX,qword ptr [RBP + 0x20]\nMOV byte ptr [RBP + -0x29],DL\nTEST RSI,RSI\nJZ 0x0040419f\nMOV AL,byte ptr [R12 + 0x18]\nTEST AL,AL\nJZ 0x0040419f\nMOV byte ptr [RSI],0x0\nMOV byte ptr [RCX],0x0\nCMP dword ptr [R12 + 0x4],0x2\nJNZ 0x004041bf\nLEA RSI,[-0x108 + RBP]\nMOV RDI,R15\nCALL 0x00411400\nTEST EAX,EAX\nJNZ 0x004041d2\nJMP 0x00404222\nLEA RSI,[-0x108 + RBP]\nMOV RDI,R15\nCALL 0x004113e0\nTEST EAX,EAX\nJZ 0x00404222\nCALL 0x00402100\nMOV R12D,dword ptr [RAX]\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x4128f2\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,R15\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R12D\nMOV RDX,RBX\nCALL 0x00402640\nMOV EAX,R14D\nLEA RSP,[RBP + -0x28]\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV qword ptr [RBP + -0x40],R14\nMOV qword ptr [RBP + -0x70],RBX\nMOV R14D,dword ptr [-0xf0 + RBP]\nMOV EAX,R14D\nAND EAX,0xf000\nMOV qword ptr [RBP + -0x48],RAX\nCMP EAX,0x4000\nJNZ 0x00404250\nCMP byte ptr [R12 + 0x29],0x0\nJZ 0x004043f8\nMOV AL,byte ptr [RBP + 0x10]\nTEST AL,AL\nJZ 0x004042d0\nCMP dword ptr [RBP + -0x48],0x4000\nJZ 0x004042b9\nCMP dword ptr [R12],0x0\nJNZ 0x004042b9\nMOV RDI,qword ptr [R12 + 0x40]\nLEA RDX,[-0x108 + RBP]\nMOV RSI,R15\nCALL 0x00409250\nTEST AL,AL\nJZ 0x004042b9\nXOR EDI,EDI\nMOV ESI,0x412917\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,R15\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00402640\nMOV R14B,0x1\nJMP 0x00404210\nMOV RDI,qword ptr [R12 + 0x40]\nLEA RDX,[-0x108 + RBP]\nMOV RSI,R15\nCALL 0x004091d0\nMOV AL,byte ptr [RBP + 0x10]\nMOVZX ESI,AL\nMOV RDI,R12\nCALL 0x00405c70\nMOV EBX,EAX\nCMP byte ptr [RBP + -0x29],0x0\nMOV qword ptr [RBP + -0x38],R13\nJZ 0x004043a6\nMOV byte ptr [RBP + -0x60],BL\nMOV dword ptr [RBP + -0x50],R14D\nXOR EDX,EDX\nXOR R14D,R14D\nXOR EBX,EBX\nMOV AL,byte ptr [RBP + 0x10]\nMOV R13,qword ptr [RBP + -0x48]\nTEST AL,AL\nMOV qword ptr [RBP + -0x58],RBX\nJZ 0x00404599\nCMP qword ptr [R12 + 0x38],0x0\nJZ 0x00404599\nCMP byte ptr [R12 + 0x18],0x0\nJNZ 0x00404599\nCMP dword ptr [R12],0x0\nJNZ 0x00404599\nTEST DL,DL\nJZ 0x0040457a\nLEA RBX,[-0x198 + RBP]\nMOV EAX,0xf000\nAND EAX,dword ptr [RBX + 0x18]\nCMP EAX,0xa000\nJNZ 0x00404595\nMOV RDI,qword ptr [R12 + 0x38]\nMOV RSI,qword ptr [RBP + -0x38]\nMOV RDX,RBX\nCALL 0x00409250\nTEST AL,AL\nJZ 0x00404595\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x412a9d\nMOV EDX,0x5\nCALL 0x00402270\nMOV R12,RAX\nXOR EDI,EDI\nMOV ESI,0x4\nMOV RDX,R15\nCALL 0x0040b880\nMOV R15,RAX\nMOV EDI,0x1\nMOV ESI,0x4\nMOV RDX,qword ptr [RBP + -0x38]\nJMP 0x00404559\nCMP dword ptr [RBP + -0x48],0x8000\nJNZ 0x0040442a\nCMP byte ptr [R12 + 0x18],0x0\nJNZ 0x0040444a\nCMP byte ptr [R12 + 0x2b],0x0\nJNZ 0x0040444a\nCMP byte ptr [R12 + 0x17],0x0\nJNZ 0x0040444a\nCMP dword ptr [R12],0x0\nJNZ 0x0040444a\nCMP byte ptr [R12 + 0x15],0x0\nJNZ 0x0040444a\nLEA RSI,[-0x198 + RBP]\nMOV RDI,R13\nCALL 0x004113e0\nXOR ECX,ECX\nTEST EAX,EAX\nJNZ 0x0040445f\nJMP 0x0040447b\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x412901\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,R15\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nJMP 0x00404208\nCMP byte ptr [R12 + 0x14],0x0\nJZ 0x0040444a\nCMP dword ptr [RBP + -0x48],0xa000\nJZ 0x0040444a\nMOVZX EAX,word ptr [RBP + -0x48]\nCMP EAX,0x4000\nJNZ 0x004043af\nLEA RSI,[-0x198 + RBP]\nMOV RDI,R13\nCALL 0x00411400\nMOV CL,0x1\nTEST EAX,EAX\nJZ 0x0040447b\nMOV byte ptr [RBP + -0x60],BL\nCALL 0x00402100\nMOV EBX,dword ptr [RAX]\nCMP EBX,0x2\nJNZ 0x004044ed\nMOV dword ptr [RBP + -0x50],R14D\nMOV byte ptr [RBP + -0x29],0x1\nJMP 0x004042f2\nMOV qword ptr [RBP + -0x58],RCX\nLEA RSI,[-0x108 + RBP]\nLEA RCX,[-0x198 + RBP]\nLEA R9,[-0x230 + RBP]\nMOV RDI,R15\nMOV RDX,R13\nMOV R8,R12\nCALL 0x00405c90\nTEST AL,AL\nJZ 0x00404523\nCMP dword ptr [RBP + -0x48],0x4000\nJZ 0x00404ed0\nCMP byte ptr [R12 + 0x2c],0x0\nJZ 0x00404ed0\nCMP byte ptr [R12 + 0x1e],0x0\nJZ 0x00404cb3\nCMP byte ptr [R12 + 0x18],0x0\nJZ 0x00404e5a\nMOV RAX,qword ptr [-0x198 + RBP]\nCMP RAX,qword ptr [-0x108 + RBP]\nSETZ AL\nJMP 0x00404e5c\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x4128f2\nMOV EDX,0x5\nCALL 0x00402270\nMOV R15,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RBP + -0x38]\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,R15\nJMP 0x0040420b\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x412948\nMOV EDX,0x5\nCALL 0x00402270\nMOV R12,RAX\nXOR EDI,EDI\nMOV ESI,0x4\nMOV RDX,R15\nCALL 0x0040b880\nMOV R15,RAX\nMOV EDI,0x1\nMOV ESI,0x4\nMOV RDX,R13\nCALL 0x0040b880\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R12\nMOV RCX,R15\nMOV R8,RBX\nCALL 0x00402640\nJMP 0x00404210\nLEA RBX,[-0x230 + RBP]\nMOV RDI,qword ptr [RBP + -0x38]\nMOV RSI,RBX\nCALL 0x00411400\nTEST EAX,EAX\nJZ 0x0040433e\nMOV RBX,qword ptr [RBP + -0x58]\nCMP R13D,0x4000\nJZ 0x004045c0\nMOV AL,byte ptr [R12 + 0x2d]\nTEST AL,AL\nJZ 0x004045c0\nXOR EDX,EDX\nTEST R14B,R14B\nCMOVNZ RDX,RBX\nMOV RDI,R15\nMOV RSI,qword ptr [RBP + -0x38]\nCALL 0x004063c0\nCMP R13D,0x4000\nSETNZ BL\nCMP byte ptr [R12 + 0x29],0x0\nJZ 0x0040460b\nTEST BL,BL\nJNZ 0x0040460b\nMOV RAX,qword ptr [-0x108 + RBP]\nMOV RCX,qword ptr [-0x100 + RBP]\nCMP byte ptr [RBP + 0x10],0x0\nJZ 0x0040467f\nMOV RDI,qword ptr [RBP + -0x38]\nMOV RSI,RCX\nMOV RDX,RAX\nCALL 0x004082a0\nTEST RAX,RAX\nJNZ 0x00404693\nJMP 0x0040472d\nCMP byte ptr [R12 + 0x18],0x0\nJZ 0x0040462d\nCMP qword ptr [-0xf8 + RBP],0x1\nJNZ 0x0040462d\nMOV RSI,qword ptr [-0x108 + RBP]\nMOV RDI,qword ptr [-0x100 + RBP]\nJMP 0x00404685\nCMP byte ptr [R12 + 0x21],0x0\nJZ 0x0040472d\nCMP byte ptr [R12 + 0x17],0x0\nJNZ 0x0040472d\nCMP qword ptr [-0xf8 + RBP],0x1\nJA 0x00404668\nMOV ECX,dword ptr [R12 + 0x4]\nCMP ECX,0x3\nSETZ AL\nCMP ECX,0x4\nJZ 0x00404668\nAND AL,byte ptr [RBP + 0x10]\nJZ 0x0040472d\nMOV RDX,qword ptr [-0x108 + RBP]\nMOV RSI,qword ptr [-0x100 + RBP]\nMOV RDI,qword ptr [RBP + -0x38]\nJMP 0x004045f8\nMOV RDI,RCX\nMOV RSI,RAX\nCALL 0x00408260\nTEST RAX,RAX\nJZ 0x0040472d\nCMP R13D,0x4000\nMOV qword ptr [RBP + -0x68],RAX\nJNZ 0x004047d6\nMOV qword ptr [RBP + -0x78],R14\nMOV RDI,R15\nMOV RSI,RAX\nMOV R14,RAX\nCALL 0x0040c060\nTEST AL,AL\nJZ 0x00404873\nXOR EDI,EDI\nMOV ESI,0x412ace\nMOV EDX,0x5\nCALL 0x00402270\nMOV R14,RAX\nMOV RDX,qword ptr [0x00619490]\nXOR EDI,EDI\nMOV ESI,0x4\nCALL 0x0040b880\nMOV R15,RAX\nMOV RDX,qword ptr [0x00619498]\nMOV EDI,0x1\nMOV ESI,0x4\nCALL 0x0040b880\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R14\nMOV RCX,R15\nMOV R8,RBX\nCALL 0x00402640\nMOV RAX,qword ptr [RBP + 0x20]\nMOV byte ptr [RAX],0x1\nCMP byte ptr [R12 + 0x24],0x0\nJNZ 0x00404d14\nJMP 0x00404d19\nXOR EAX,EAX\nCMP byte ptr [R12 + 0x18],0x0\nMOV qword ptr [RBP + -0x68],RAX\nJZ 0x004049a0\nMOV RDI,R15\nMOV RSI,qword ptr [RBP + -0x38]\nCALL 0x004026a0\nTEST EAX,EAX\nJZ 0x00404802\nCALL 0x00402100\nMOV R14,RAX\nMOV EBX,dword ptr [R14]\nCMP EBX,0x12\nJZ 0x004048e2\nCMP EBX,0x16\nJNZ 0x00404905\nXOR EDI,EDI\nMOV ESI,0x412b5e\nMOV EDX,0x5\nCALL 0x00402270\nMOV R14,RAX\nMOV RDX,qword ptr [0x00619490]\nXOR EDI,EDI\nMOV ESI,0x4\nCALL 0x0040b880\nMOV R15,RAX\nMOV RDX,qword ptr [0x00619498]\nMOV EDI,0x1\nMOV ESI,0x4\nCALL 0x0040b880\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R14\nMOV RCX,R15\nMOV R8,RBX\nCALL 0x00402640\nMOV RAX,qword ptr [RBP + 0x20]\nMOV byte ptr [RAX],0x1\nMOV R14B,0x1\nJMP 0x00404210\nMOVZX ECX,byte ptr [R12 + 0x2d]\nMOVZX R8D,byte ptr [RBP + -0x60]\nMOV EDX,0x1\nMOV RDI,RAX\nMOV RSI,qword ptr [RBP + -0x38]\nCALL 0x00406070\nMOV R14B,0x1\nTEST AL,AL\nJNZ 0x00404210\nJMP 0x00404d0c\nCMP byte ptr [R12 + 0x2d],0x0\nSETZ AL\nOR AL,BL\nJNZ 0x00404825\nXOR EDX,EDX\nTEST R14B,R14B\nCMOVNZ RDX,qword ptr [RBP + -0x58]\nMOV RDI,R15\nMOV RSI,qword ptr [RBP + -0x38]\nCALL 0x004063c0\nCMP byte ptr [R12 + 0x20],0x0\nMOV RDI,qword ptr [RBP + -0x38]\nJZ 0x00404840\nXOR ESI,ESI\nMOV EDX,0x1\nMOV RCX,R12\nCALL 0x00406460\nMOV RAX,qword ptr [RBP + 0x28]\nTEST RAX,RAX\nJZ 0x0040484c\nMOV byte ptr [RAX],0x1\nMOV R14B,0x1\nCMP byte ptr [RBP + 0x10],0x0\nJZ 0x00404210\nMOV RDI,qword ptr [R12 + 0x38]\nLEA RDX,[-0x108 + RBP]\nMOV RSI,qword ptr [RBP + -0x38]\nCALL 0x004091d0\nJMP 0x00404210\nMOV RDI,qword ptr [RBP + -0x38]\nMOV RSI,R14\nCALL 0x0040c060\nTEST AL,AL\nJZ 0x00404914\nXOR EDI,EDI\nMOV ESI,0x412afb\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV RSI,qword ptr [0x00619490]\nMOV EDI,0x4\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00402640\nMOV R14B,0x1\nMOV RCX,qword ptr [RBP + 0x28]\nTEST RCX,RCX\nJZ 0x00404210\nMOV AL,byte ptr [R12 + 0x18]\nTEST AL,AL\nJZ 0x00404210\nMOV byte ptr [RCX],0x1\nJMP 0x00404210\nCMP R13D,0x4000\nJNZ 0x00404983\nMOV RDI,qword ptr [RBP + -0x38]\nCALL 0x00402260\nTEST EAX,EAX\nJNZ 0x00404990\nJMP 0x0040499c\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x412b8d\nJMP 0x00404c3f\nMOV ECX,dword ptr [R12 + 0x4]\nCMP ECX,0x3\nSETZ AL\nCMP ECX,0x4\nJZ 0x00404c9d\nAND AL,byte ptr [RBP + 0x10]\nMOV R14,qword ptr [RBP + -0x78]\nJNZ 0x00404caa\nXOR EDI,EDI\nMOV ESI,0x412b31\nMOV EDX,0x5\nCALL 0x00402270\nMOV R14,RAX\nXOR EDI,EDI\nMOV ESI,0x4\nMOV RDX,qword ptr [RBP + -0x38]\nCALL 0x0040b880\nMOV R15,RAX\nMOV EDI,0x1\nMOV ESI,0x4\nMOV RDX,qword ptr [RBP + -0x68]\nCALL 0x0040b880\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R14\nMOV RCX,R15\nJMP 0x00404b1b\nMOV RDI,qword ptr [RBP + -0x38]\nCALL 0x00402110\nTEST EAX,EAX\nJZ 0x0040499c\nMOV EBX,dword ptr [R14]\nCMP EBX,0x2\nJNZ 0x00404c35\nMOV byte ptr [RBP + -0x29],0x1\nCMP byte ptr [R12 + 0x2a],0x0\nMOV EAX,dword ptr [RBP + -0x50]\nJZ 0x004049b0\nMOV EAX,dword ptr [R12 + 0x10]\nMOV dword ptr [RBP + -0x78],EAX\nXOR R14D,R14D\nCMP R13D,0x4000\nMOV EAX,0x12\nCMOVNZ EAX,R14D\nCMP byte ptr [R12 + 0x1c],0x0\nMOV RBX,R13\nMOV R13D,0x3f\nCMOVZ R13D,EAX\nMOVZX EDX,byte ptr [RBP + -0x29]\nMOV RDI,R15\nMOV RSI,qword ptr [RBP + -0x38]\nMOV RCX,R12\nCALL 0x004064e0\nTEST AL,AL\nJZ 0x00404210\nMOV ECX,dword ptr [RBP + -0x78]\nAND R13D,ECX\nCMP EBX,0x4000\nMOV dword ptr [RBP + -0x4c],R13D\nJNZ 0x00404a50\nLEA RDI,[-0x108 + RBP]\nMOV R14,qword ptr [RBP + -0x40]\nMOV RSI,R14\nCALL 0x004066a0\nTEST AL,AL\nJZ 0x00404b34\nXOR EDI,EDI\nMOV ESI,0x412bde\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,R15\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nJMP 0x00404d04\nCMP byte ptr [R12 + 0x2b],0x0\nMOV R14,qword ptr [RBP + -0x38]\nJZ 0x00404bfd\nCMP byte ptr [R15],0x2f\nJZ 0x00404ab6\nMOV RDI,R14\nCALL 0x00408f40\nMOV R14,RAX\nCMP byte ptr [R14],0x2e\nJNZ 0x00404a7e\nCMP byte ptr [R14 + 0x1],0x0\nJZ 0x00404aaa\nLEA RSI,[-0x230 + RBP]\nMOV EDI,0x4124e0\nCALL 0x004113e0\nTEST EAX,EAX\nJNZ 0x00404aaa\nLEA RSI,[-0x2c0 + RBP]\nMOV RDI,R14\nCALL 0x004113e0\nTEST EAX,EAX\nJZ 0x004051e0\nMOV RDI,R14\nCALL 0x004020c0\nMOV R14,qword ptr [RBP + -0x38]\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x004022f0\nTEST EAX,EAX\nJZ 0x00405770\nCALL 0x00402100\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RBP + -0x48],EAX\nXOR EDI,EDI\nMOV ESI,0x412c77\nMOV EDX,0x5\nCALL 0x00402270\nMOV R13,RAX\nXOR EDI,EDI\nMOV ESI,0x4\nMOV RDX,R14\nCALL 0x0040b880\nMOV R14,RAX\nMOV EDI,0x1\nMOV ESI,0x4\nMOV RDX,R15\nCALL 0x0040b880\nMOV RBX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,dword ptr [RBP + -0x48]\nMOV RDX,R13\nMOV RCX,R14\nMOV R8,RBX\nCALL 0x00402640\nCMP byte ptr [R12 + 0x24],0x0\nJNZ 0x00404d14\nJMP 0x00404d19\nMOV R13,qword ptr [RBP + 0x18]\nMOV RAX,RSP\nLEA RBX,[RAX + -0x20]\nMOV RSP,RBX\nMOV qword ptr [RAX + -0x20],R14\nMOV RCX,qword ptr [-0x100 + RBP]\nMOV qword ptr [RAX + -0x18],RCX\nMOV RCX,qword ptr [-0x108 + RBP]\nMOV qword ptr [RAX + -0x10],RCX\nCMP byte ptr [RBP + -0x29],0x0\nJNZ 0x00404bc6\nMOV EAX,0xf000\nAND EAX,dword ptr [-0x180 + RBP]\nCMP EAX,0x4000\nJNZ 0x00404bc6\nMOV qword ptr [RBP + -0x60],RBX\nMOV AL,byte ptr [R12 + 0x24]\nMOV CL,byte ptr [R12 + 0x20]\nOR CL,AL\nJZ 0x00405218\nMOVZX ESI,AL\nXOR EDX,EDX\nMOV RDI,qword ptr [RBP + -0x38]\nMOV RCX,R12\nCALL 0x00406460\nCMP byte ptr [R12 + 0x25],0x0\nMOV RBX,qword ptr [RBP + -0x70]\nJNZ 0x00404d0c\nMOV dword ptr [RBP + -0x4c],0x0\nXOR R14D,R14D\nMOV dword ptr [RBP + -0x40],EAX\nTEST RBX,RBX\nJNZ 0x00405490\nJMP 0x004054a5\nMOV EAX,dword ptr [RBP + -0x78]\nAND EAX,0xfff\nMOV ESI,dword ptr [RBP + -0x4c]\nNOT ESI\nAND ESI,EAX\nMOV R14,qword ptr [RBP + -0x38]\nMOV RDI,R14\nCALL 0x00402160\nTEST EAX,EAX\nJZ 0x00404cba\nCALL 0x00402100\nMOV R15D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x412c02\nJMP 0x00404ce0\nCMP byte ptr [R12 + 0x17],0x0\nMOV RDX,qword ptr [RBP + -0x48]\nJZ 0x00404dfb\nMOVZX R8D,byte ptr [RBP + -0x60]\nXOR R13D,R13D\nXOR EDX,EDX\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x00406070\nTEST AL,AL\nJZ 0x00404d0c\nMOV AL,0x1\nXOR ESI,ESI\nJMP 0x00405777\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x412ba2\nMOV EDX,0x5\nCALL 0x00402270\nMOV R12,RAX\nXOR EDI,EDI\nMOV ESI,0x4\nMOV RDX,R15\nCALL 0x0040b880\nMOV R15,RAX\nMOV EDI,0x1\nMOV ESI,0x4\nMOV RDX,qword ptr [RBP + -0x38]\nCALL 0x0040b880\nMOV R8,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,R12\nMOV RCX,R15\nCALL 0x00402640\nMOV RSI,qword ptr [-0x108 + RBP]\nMOV RDI,qword ptr [-0x100 + RBP]\nCALL 0x00408200\nJMP 0x00404210\nMOV RAX,qword ptr [RBP + -0x68]\nMOV R14,qword ptr [RBP + -0x78]\nJMP 0x0040472f\nMOV RAX,qword ptr [RBP + -0x68]\nJMP 0x0040472f\nXOR EAX,EAX\nJMP 0x00404e5e\nLEA RSI,[-0x198 + RBP]\nMOV RDI,R14\nCALL 0x00411400\nTEST EAX,EAX\nJZ 0x004050c0\nCALL 0x00402100\nMOV R15D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x4128f2\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,R14\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,RBX\nCALL 0x00402640\nCMP byte ptr [R12 + 0x24],0x0\nJZ 0x00404d19\nCALL 0x00407480\nCMP qword ptr [RBP + -0x68],0x0\nMOV RBX,qword ptr [RBP + -0x38]\nJNZ 0x00404d37\nMOV RSI,qword ptr [-0x108 + RBP]\nMOV RDI,qword ptr [-0x100 + RBP]\nCALL 0x00408200\nMOV RDI,qword ptr [RBP + -0x58]\nTEST RDI,RDI\nJZ 0x00404d8a\nMOV RSI,RBX\nCALL 0x004026a0\nTEST EAX,EAX\nJZ 0x00404d92\nCALL 0x00402100\nMOV R15D,dword ptr [RAX]\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x412d7f\nMOV EDX,0x5\nCALL 0x00402270\nMOV R12,RAX\nMOV EDI,0x4\nMOV RSI,RBX\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,R12\nJMP 0x0040420b\nXOR R14D,R14D\nJMP 0x00404210\nCMP byte ptr [R12 + 0x2d],0x0\nJZ 0x00404df3\nMOV R12,RBX\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x412d93\nMOV EDX,0x5\nCALL 0x00402270\nMOV R15,RAX\nXOR EDI,EDI\nMOV ESI,0x4\nMOV RDX,qword ptr [RBP + -0x58]\nCALL 0x0040b880\nMOV RBX,RAX\nMOV EDI,0x1\nMOV ESI,0x4\nMOV RDX,R12\nCALL 0x0040b880\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,R15\nMOV RDX,RBX\nCALL 0x00402600\nJMP 0x00404210\nXOR R14D,R14D\nJMP 0x00404210\nCMP EDX,0x8000\nJZ 0x00404e1c\nCMP EDX,0xa000\nJZ 0x00405237\nMOV AL,byte ptr [R12 + 0x14]\nTEST AL,AL\nJZ 0x00405237\nAND ECX,0x1ff\nSUB RSP,0x8\nLEA RAX,[-0x108 + RBP]\nLEA R9,[RBP + -0x29]\nMOV RDI,R15\nMOV RSI,R14\nMOV RDX,R12\nMOV R8D,R13D\nPUSH RAX\nCALL 0x004068a0\nADD RSP,0x10\nTEST AL,AL\nJZ 0x00404d0c\nMOV SIL,0x1\nXOR R13D,R13D\nJMP 0x00405775\nXOR EAX,EAX\nXOR AL,0x1\nMOVZX ECX,AL\nLEA RSI,[-0x198 + RBP]\nLEA RDX,[-0x108 + RBP]\nMOV RDI,R13\nCALL 0x0040c770\nTEST EAX,EAX\nJS 0x00404ed0\nMOV RAX,qword ptr [RBP + 0x28]\nTEST RAX,RAX\nJZ 0x00404e87\nMOV byte ptr [RAX],0x1\nMOV RDX,qword ptr [-0x108 + RBP]\nMOV RSI,qword ptr [-0x100 + RBP]\nMOV RDI,R13\nCALL 0x004082a0\nTEST RAX,RAX\nJZ 0x00404ec8\nMOVZX ECX,byte ptr [R12 + 0x2d]\nMOVZX R8D,BL\nMOV EDX,0x1\nMOV RDI,RAX\nMOV RSI,R13\nMOV qword ptr [RBP + -0x68],RAX\nCALL 0x00406070\nTEST AL,AL\nJZ 0x00405090\nMOV R14B,0x1\nJMP 0x00404210\nMOV dword ptr [RBP + -0x50],R14D\nCMP byte ptr [R12 + 0x18],0x0\nJZ 0x00404f12\nLEA RDX,[-0x198 + RBP]\nMOV RDI,R12\nMOV RSI,R13\nCALL 0x004061f0\nTEST AL,AL\nMOV R13,qword ptr [RBP + -0x48]\nMOV RAX,qword ptr [RBP + 0x28]\nMOV RDX,qword ptr [RBP + -0x58]\nJZ 0x00404f67\nMOV R14B,0x1\nTEST RAX,RAX\nJZ 0x00404210\nMOV byte ptr [RAX],0x1\nJMP 0x00404210\nMOV R13,qword ptr [RBP + -0x48]\nCMP R13D,0x4000\nMOV RDX,qword ptr [RBP + -0x58]\nJZ 0x00404f67\nMOV EAX,dword ptr [R12 + 0x8]\nMOV R14B,0x1\nCMP EAX,0x2\nJZ 0x00404210\nCMP EAX,0x3\nJNZ 0x00404f67\nLEA RDX,[-0x198 + RBP]\nMOV RDI,R12\nMOV RSI,qword ptr [RBP + -0x38]\nCALL 0x00406270\nTEST AL,AL\nJZ 0x00404210\nMOV AL,byte ptr [-0x230 + RBP]\nTEST AL,AL\nMOV RDX,qword ptr [RBP + -0x58]\nJZ 0x00404f77\nJMP 0x00404210\nMOV R14B,0x1\nCMP byte ptr [-0x230 + RBP],0x0\nJNZ 0x00404210\nMOV EAX,0xf000\nAND EAX,dword ptr [-0x180 + RBP]\nCMP EAX,0x4000\nMOV R14,qword ptr [RBP + -0x38]\nJZ 0x00404fe8\nCMP R13D,0x4000\nJNZ 0x00404fad\nCMP byte ptr [R12 + 0x18],0x0\nJZ 0x0040518e\nCMP dword ptr [R12],0x0\nJZ 0x0040518e\nCMP byte ptr [RBP + 0x10],0x0\nJZ 0x00404fe8\nCMP dword ptr [R12],0x3\nJZ 0x00404fe8\nMOV RDI,qword ptr [R12 + 0x38]\nLEA RDX,[-0x198 + RBP]\nMOV RSI,R14\nCALL 0x00409250\nMOV RDX,qword ptr [RBP + -0x58]\nTEST AL,AL\nJZ 0x00404fe8\nMOV RBX,R14\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x412998\nJMP 0x0040519b\nCMP R13D,0x4000\nJZ 0x0040501a\nMOV EAX,0xf000\nAND EAX,dword ptr [-0x180 + RBP]\nCMP EAX,0x4000\nJNZ 0x0040501a\nCMP byte ptr [R12 + 0x18],0x0\nJZ 0x00405285\nCMP dword ptr [R12],0x0\nJZ 0x00405285\nCMP byte ptr [R12 + 0x18],0x0\nJZ 0x0040504f\nMOV EAX,0xf000\nMOV ECX,dword ptr [-0xf0 + RBP]\nAND ECX,EAX\nCMP ECX,0x4000\nJNZ 0x0040504f\nAND EAX,dword ptr [-0x180 + RBP]\nCMP EAX,0x4000\nJZ 0x0040504f\nCMP dword ptr [R12],0x0\nJZ 0x00405408\nCMP dword ptr [R12],0x0\nMOV byte ptr [RBP + -0x60],BL\nJZ 0x00405071\nMOV RDI,R15\nCALL 0x00409000\nMOV RDI,RAX\nCALL 0x00406390\nMOV RDX,qword ptr [RBP + -0x58]\nTEST AL,AL\nJZ 0x004050e7\nMOV EAX,0xf000\nAND EAX,dword ptr [-0x180 + RBP]\nCMP EAX,0x4000\nJNZ 0x004050a7\nXOR R14D,R14D\nXOR EBX,EBX\nMOV AL,byte ptr [RBP + 0x10]\nJMP 0x00404300\nXOR EAX,EAX\nMOV qword ptr [RBP + -0x58],RAX\nCMP byte ptr [R12 + 0x24],0x0\nJNZ 0x00404d14\nJMP 0x00404d19\nCMP byte ptr [R12 + 0x18],0x0\nMOV AL,byte ptr [RBP + 0x10]\nJZ 0x004052ea\nXOR R14D,R14D\nXOR EBX,EBX\nJMP 0x00404300\nMOV qword ptr [RBP + -0x60],RBX\nMOV EBX,dword ptr [-0x180 + RBP]\nMOV EAX,EBX\nAND EAX,0x1c0\nCMP EAX,0x1c0\nJNZ 0x004052ba\nMOV dword ptr [RBP + -0x40],EBX\nXOR R14D,R14D\nJMP 0x0040544e\nCMP byte ptr [R12 + 0x18],0x0\nJNZ 0x00405105\nMOV EAX,0xf000\nAND EAX,dword ptr [-0x180 + RBP]\nCMP EAX,0x4000\nJZ 0x00405071\nMOV ESI,dword ptr [R12]\nMOV RDI,R14\nCALL 0x00408800\nMOV qword ptr [RBP + -0x68],RAX\nMOV RDI,RAX\nMOV RSI,R15\nCALL 0x00402480\nTEST EAX,EAX\nJZ 0x00405399\nMOV RDI,qword ptr [RBP + -0x68]\nMOV R14,RDI\nCALL 0x00402290\nMOV RBX,RSP\nLEA RDX,[RAX + 0x1]\nADD RAX,0x10\nAND RAX,-0x10\nSUB RBX,RAX\nMOV RSP,RBX\nMOV RDI,RBX\nMOV RSI,R14\nCALL 0x004024d0\nMOV RDI,R14\nCALL 0x004020c0\nMOV RDI,qword ptr [RBP + -0x38]\nMOV RSI,RBX\nCALL 0x004026a0\nTEST EAX,EAX\nJZ 0x004054da\nCALL 0x00402100\nMOV EBX,dword ptr [RAX]\nXOR R14D,R14D\nCMP EBX,0x2\nJNZ 0x00405523\nXOR EBX,EBX\nMOV byte ptr [RBP + -0x29],0x1\nJMP 0x0040568c\nMOV RBX,R14\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x412964\nMOV EDX,0x5\nCALL 0x00402270\nMOV R12,RAX\nXOR EDI,EDI\nMOV ESI,0x4\nMOV RDX,RBX\nCALL 0x0040b880\nMOV R13,RAX\nMOV EDI,0x1\nMOV ESI,0x4\nMOV RDX,R15\nCALL 0x0040b880\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R12\nMOV RCX,R13\nJMP 0x0040456d\nMOV RAX,qword ptr [-0x228 + RBP]\nCMP RAX,qword ptr [-0x2b8 + RBP]\nJNZ 0x00405368\nMOV R13,qword ptr [-0x230 + RBP]\nMOV RBX,qword ptr [-0x2c0 + RBP]\nMOV RDI,R14\nCALL 0x004020c0\nCMP R13,RBX\nJZ 0x00404ab2\nJMP 0x00405370\nXOR R14D,R14D\nMOV dword ptr [RBP + -0x4c],0x0\nMOV dword ptr [RBP + -0x40],EAX\nMOV RBX,qword ptr [RBP + -0x70]\nTEST RBX,RBX\nJNZ 0x00405490\nJMP 0x004054a5\nLEA EAX,[-0x1000 + RDX]\nSHR EAX,0xc\nCMP EAX,0xb\nJA 0x004055cf\nJMP qword ptr [0x412770 + RAX*0x8]\nNOT R13D\nAND R13D,dword ptr [RBP + -0x50]\nMOV RDX,qword ptr [-0xe0 + RBP]\nMOV RDI,R14\nMOV ESI,R13D\nCALL 0x0040fd80\nTEST EAX,EAX\nJZ 0x0040552f\nCALL 0x00402100\nMOV R15D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x412cb2\nJMP 0x00404ce0\nMOV RBX,R14\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x4129c3\nMOV EDX,0x5\nCALL 0x00402270\nMOV R15,RAX\nMOV EDI,0x4\nMOV RSI,RBX\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nJMP 0x0040451b\nMOV ESI,EBX\nOR ESI,0x1c0\nMOV R14,qword ptr [RBP + -0x38]\nMOV RDI,R14\nCALL 0x00402620\nTEST EAX,EAX\nJZ 0x00405448\nCALL 0x00402100\nMOV R15D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x412c1d\nJMP 0x00404ce0\nCMP byte ptr [R12 + 0x15],0x0\nJZ 0x004054e6\nMOV RBX,qword ptr [RBP + -0x38]\nMOV RDI,RBX\nCALL 0x00402110\nTEST EAX,EAX\nJZ 0x00405319\nCALL 0x00402100\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RBP + -0x68],EAX\nCMP EAX,0x2\nJNZ 0x0040553b\nMOV byte ptr [RBP + -0x29],0x1\nCMP byte ptr [R12 + 0x2d],0x0\nJZ 0x00405687\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x412761\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RBP + -0x38]\nCALL 0x0040b960\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RBX\nMOV RDX,RCX\nCALL 0x00402600\nJMP 0x0040568a\nMOV RDI,R14\nCALL 0x004020c0\nXOR EDI,EDI\nMOV ESI,0x412c38\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,qword ptr [RBP + -0x38]\nCALL 0x0040ba40\nJMP 0x00404a42\nCMP byte ptr [R12 + 0x18],0x0\nMOV EAX,0x412a27\nMOV ESI,0x412a59\nCMOVNZ RSI,RAX\nMOV RBX,R14\nXOR R14D,R14D\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00402270\nMOV R13,RAX\nXOR EDI,EDI\nMOV ESI,0x4\nMOV RDX,RBX\nCALL 0x0040b880\nMOV R12,RAX\nMOV EDI,0x1\nMOV ESI,0x4\nMOV RDX,R15\nCALL 0x0040b880\nMOV R8,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R13\nMOV RCX,R12\nCALL 0x00402640\nMOV RDI,qword ptr [RBP + -0x68]\nCALL 0x004020c0\nJMP 0x00404210\nMOV RBX,R14\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x4129f4\nMOV EDX,0x5\nCALL 0x00402270\nMOV R12,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R15\nCALL 0x0040ba40\nMOV R15,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,RBX\nCALL 0x0040ba40\nJMP 0x0040455e\nMOV dword ptr [RBP + -0x40],EBX\nMOV R14B,0x1\nCMP byte ptr [R13],0x0\nMOV RBX,qword ptr [RBP + -0x70]\nJNZ 0x00405475\nMOV RDX,qword ptr [-0x198 + RBP]\nMOV RSI,qword ptr [-0x190 + RBP]\nMOV RDI,qword ptr [RBP + -0x38]\nCALL 0x004082a0\nMOV byte ptr [R13],0x1\nCMP byte ptr [R12 + 0x2d],0x0\nJZ 0x0040548b\nXOR EDX,EDX\nMOV RDI,R15\nMOV RSI,qword ptr [RBP + -0x38]\nCALL 0x004063c0\nTEST RBX,RBX\nJZ 0x004054a5\nMOV AL,byte ptr [R12 + 0x1b]\nTEST AL,AL\nJZ 0x004054a5\nMOV RAX,qword ptr [RBX]\nCMP RAX,qword ptr [-0x108 + RBP]\nJNZ 0x004054ce\nMOVZX EDX,byte ptr [RBP + -0x29]\nLEA RCX,[-0x108 + RBP]\nMOV RDI,R15\nMOV RSI,qword ptr [RBP + -0x38]\nMOV R8,qword ptr [RBP + -0x60]\nMOV R9,R12\nPUSH qword ptr [RBP + 0x20]\nPUSH R13\nCALL 0x004066d0\nADD RSP,0x10\nJMP 0x004054d0\nMOV AL,0x1\nXOR R13D,R13D\nXOR ESI,ESI\nJMP 0x0040577d\nMOV R14B,0x1\nMOV byte ptr [RBP + -0x29],0x1\nJMP 0x0040568c\nCMP byte ptr [R12 + 0x21],0x0\nJZ 0x004054fc\nCMP qword ptr [-0x188 + RBP],0x1\nJA 0x004052f6\nCMP dword ptr [R12 + 0x4],0x2\nJNZ 0x00405083\nMOV EAX,0xf000\nAND EAX,dword ptr [-0xf0 + RBP]\nCMP EAX,0x8000\nJZ 0x00405083\nJMP 0x004052f6\nXOR EDI,EDI\nMOV ESI,0x412a8c\nJMP 0x004044f7\nMOV AL,0x1\nXOR R13D,R13D\nXOR ESI,ESI\nJMP 0x00405777\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x41249b\nMOV EDX,0x5\nCALL 0x00402270\nMOV R15,RAX\nMOV EDI,0x4\nMOV RSI,RBX\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,dword ptr [RBP + -0x68]\nJMP 0x0040451b\nNOT R13D\nAND R13D,dword ptr [RBP + -0x50]\nXOR EDX,EDX\nMOV RDI,R14\nMOV ESI,R13D\nCALL 0x0040fd80\nTEST EAX,EAX\nJZ 0x00405698\nAND R13D,0xffffefff\nMOV RDI,qword ptr [RBP + -0x38]\nMOV ESI,R13D\nCALL 0x004024b0\nTEST EAX,EAX\nJZ 0x0040571b\nCALL 0x00402100\nMOV R14D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x412c9c\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RBP + -0x38]\nJMP 0x004056ce\nXOR EDI,EDI\nMOV ESI,0x412d30\nJMP 0x00404a28\nMOV RSI,qword ptr [-0xd8 + RBP]\nMOV RDI,R15\nCALL 0x00408730\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004056aa\nMOV RDI,RBX\nMOV RSI,qword ptr [RBP + -0x38]\nCALL 0x004022f0\nTEST EAX,EAX\nJZ 0x0040572a\nCALL 0x00402100\nMOV R13D,dword ptr [RAX]\nCMP byte ptr [R12 + 0x2c],0x0\nJZ 0x004056e2\nMOV AL,byte ptr [RBP + -0x29]\nTEST AL,AL\nJNZ 0x004056e2\nMOV EAX,0xf000\nAND EAX,dword ptr [-0x180 + RBP]\nCMP EAX,0xa000\nJNZ 0x004056e2\nMOV R14,qword ptr [-0x168 + RBP]\nMOV RDI,RBX\nCALL 0x00402290\nCMP R14,RAX\nJNZ 0x004056e2\nMOV RDI,qword ptr [RBP + -0x38]\nMOV RSI,R14\nCALL 0x00408730\nMOV R14,RAX\nTEST RAX,RAX\nJZ 0x00405bb9\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00402480\nTEST EAX,EAX\nSETZ AL\nMOV dword ptr [RBP + -0x40],EAX\nJMP 0x00405bc0\nXOR R14D,R14D\nXOR EBX,EBX\nMOV AL,byte ptr [RBP + 0x10]\nMOV RDX,qword ptr [RBP + -0x58]\nJMP 0x00404300\nXOR ESI,ESI\nXOR R14D,R14D\nMOV dword ptr [RBP + -0x40],EAX\nMOV AL,0x1\nXOR R13D,R13D\nJMP 0x0040577d\nCALL 0x00402100\nMOV R14D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x412cd0\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,R15\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R14D\nJMP 0x00404d04\nMOV RDI,RBX\nCALL 0x004020c0\nXOR EDI,EDI\nMOV ESI,0x412ced\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RBP + -0x38]\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R13D\nJMP 0x00404d04\nXOR R13D,R13D\nXOR ESI,ESI\nXOR R14D,R14D\nMOV dword ptr [RBP + -0x40],EAX\nMOV AL,0x1\nJMP 0x0040577d\nMOV RDI,RBX\nCALL 0x004020c0\nCMP byte ptr [R12 + 0x24],0x0\nJZ 0x0040573f\nCALL 0x00407480\nCMP byte ptr [R12 + 0x1c],0x0\nJZ 0x00405770\nMOV ESI,dword ptr [-0xec + RBP]\nMOV EDX,dword ptr [-0xe8 + RBP]\nMOV RDI,qword ptr [RBP + -0x38]\nCALL 0x00402590\nTEST EAX,EAX\nJZ 0x00405770\nMOV RDI,R12\nCALL 0x00405c10\nTEST AL,AL\nJZ 0x00405ae3\nMOV R13B,0x1\nXOR ESI,ESI\nMOV AL,0x1\nXOR R14D,R14D\nMOV dword ptr [RBP + -0x40],ECX\nCMP byte ptr [RBP + -0x29],0x0\nMOV RBX,qword ptr [RBP + -0x48]\nJZ 0x0040585a\nCMP byte ptr [RBP + 0x10],0x0\nJZ 0x004057dc\nCMP qword ptr [R12 + 0x38],0x0\nJZ 0x004057dc\nMOV dword ptr [RBP + -0x60],ESI\nMOV qword ptr [RBP + -0x70],R13\nMOV R13D,R14D\nMOV R14D,EAX\nLEA RSI,[-0x230 + RBP]\nMOV RDI,qword ptr [RBP + -0x38]\nCALL 0x00411400\nTEST EAX,EAX\nJNZ 0x004057cf\nMOV RDI,qword ptr [R12 + 0x38]\nLEA RDX,[-0x230 + RBP]\nMOV RSI,qword ptr [RBP + -0x38]\nCALL 0x004091d0\nMOV EAX,R14D\nMOV R14D,R13D\nMOV R13,qword ptr [RBP + -0x70]\nMOV ESI,dword ptr [RBP + -0x60]\nCMP EBX,0x4000\nJZ 0x004057f1\nMOV CL,byte ptr [R12 + 0x17]\nTEST CL,CL\nJNZ 0x0040592a\nTEST SIL,SIL\nJNZ 0x0040592a\nCMP byte ptr [R12 + 0x1e],0x0\nJZ 0x00405925\nMOV byte ptr [RBP + -0x48],AL\nLEA RBX,[-0x108 + RBP]\nMOV RDI,RBX\nCALL 0x0040c6b0\nMOV qword ptr [-0x230 + RBP],RAX\nMOV qword ptr [-0x228 + RBP],RDX\nMOV RDI,RBX\nCALL 0x0040c6d0\nMOV qword ptr [-0x220 + RBP],RAX\nMOV qword ptr [-0x218 + RBP],RDX\nLEA RSI,[-0x230 + RBP]\nTEST R13B,R13B\nJZ 0x004058c1\nMOV RDI,qword ptr [RBP + -0x38]\nCALL 0x004074c0\nTEST EAX,EAX\nJNZ 0x004058ce\nJMP 0x00405922\nCMP EBX,0x4000\nJZ 0x0040578b\nMOV CL,byte ptr [R12 + 0x14]\nTEST CL,CL\nJNZ 0x0040578b\nMOV DL,byte ptr [R12 + 0x24]\nMOV CL,byte ptr [R12 + 0x20]\nOR CL,DL\nJZ 0x0040578b\nMOV dword ptr [RBP + -0x60],ESI\nMOVZX ESI,DL\nMOV qword ptr [RBP + -0x70],R13\nMOV R13D,R14D\nMOV R14D,EAX\nXOR EDX,EDX\nMOV RDI,qword ptr [RBP + -0x38]\nMOV RCX,R12\nCALL 0x00406460\nMOV ESI,dword ptr [RBP + -0x60]\nMOV EAX,R14D\nMOV R14D,R13D\nMOV R13,qword ptr [RBP + -0x70]\nCMP byte ptr [R12 + 0x25],0x0\nJNZ 0x00404d0c\nJMP 0x0040578b\nMOV RDI,qword ptr [RBP + -0x38]\nCALL 0x0040d220\nTEST EAX,EAX\nJZ 0x00405922\nCALL 0x00402100\nMOV qword ptr [RBP + -0x70],R13\nMOV R13D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x412d49\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RBP + -0x38]\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R13D\nMOV R13,qword ptr [RBP + -0x70]\nMOV RDX,RBX\nCALL 0x00402640\nCMP byte ptr [R12 + 0x23],0x0\nJZ 0x00405922\nXOR R14D,R14D\nJMP 0x00404210\nMOV AL,byte ptr [RBP + -0x48]\nTEST R13B,R13B\nJZ 0x00405935\nTEST AL,AL\nSETNZ R14B\nJMP 0x00404210\nMOV dword ptr [RBP + -0x48],R14D\nCMP byte ptr [R12 + 0x1c],0x0\nJZ 0x004059a6\nMOV R13D,EAX\nMOV AL,byte ptr [RBP + -0x29]\nTEST AL,AL\nMOV RBX,qword ptr [RBP + -0x38]\nMOV R14D,dword ptr [RBP + -0x50]\nJNZ 0x0040596f\nMOV ECX,dword ptr [-0xec + RBP]\nCMP ECX,dword ptr [-0x17c + RBP]\nJNZ 0x0040596f\nMOV ECX,dword ptr [-0xe8 + RBP]\nCMP ECX,dword ptr [-0x178 + RBP]\nJZ 0x004059a1\nMOVZX R8D,AL\nLEA RCX,[-0x108 + RBP]\nLEA R9,[-0x198 + RBP]\nMOV EDX,0xffffffff\nMOV RDI,R12\nMOV RSI,RBX\nCALL 0x004074f0\nCMP EAX,-0x1\nJZ 0x004059f0\nTEST EAX,EAX\nJNZ 0x004059a1\nAND R14D,0xfffff1ff\nMOV EAX,R13D\nJMP 0x004059ae\nMOV RBX,qword ptr [RBP + -0x38]\nMOV R14D,dword ptr [RBP + -0x50]\nMOV R13D,EAX\nCMP byte ptr [R12 + 0x1d],0x0\nJNZ 0x004059c1\nCMP byte ptr [R12 + 0x18],0x0\nJZ 0x004059f8\nMOV ESI,0xffffffff\nMOV ECX,0xffffffff\nMOV RDI,R15\nMOV RDX,RBX\nMOV R8D,R14D\nCALL 0x00408640\nTEST EAX,EAX\nMOV ECX,R13D\nJZ 0x00405bae\nCMP byte ptr [R12 + 0x23],0x0\nJZ 0x00405bae\nXOR R14D,R14D\nJMP 0x00404210\nCMP byte ptr [R12 + 0x2a],0x0\nJZ 0x00405a26\nMOV EDX,dword ptr [R12 + 0x10]\nMOV ESI,0xffffffff\nMOV RDI,qword ptr [RBP + -0x38]\nCALL 0x004086d0\nTEST EAX,EAX\nMOV ECX,R13D\nJZ 0x00405bae\nXOR R14D,R14D\nJMP 0x00404210\nCMP byte ptr [R12 + 0x1f],0x0\nJZ 0x00405a5d\nCALL 0x00405c40\nNOT EAX\nAND EAX,0x1ff\nMOV ESI,0xffffffff\nMOV RDI,qword ptr [RBP + -0x38]\nMOV EDX,EAX\nCALL 0x004086d0\nTEST EAX,EAX\nMOV ECX,R13D\nJZ 0x00405bae\nXOR R14D,R14D\nJMP 0x00404210\nCMP dword ptr [RBP + -0x4c],0x0\nJZ 0x00405b21\nCALL 0x00405c40\nNOT EAX\nAND dword ptr [RBP + -0x4c],EAX\nCMP byte ptr [RBP + -0x48],0x0\nJNZ 0x00405b3f\nCMP dword ptr [RBP + -0x4c],0x0\nJZ 0x00405b3f\nCMP byte ptr [RBP + -0x29],0x0\nJZ 0x00405b2a\nLEA RSI,[-0x198 + RBP]\nMOV RDI,qword ptr [RBP + -0x38]\nCALL 0x00411400\nTEST EAX,EAX\nJZ 0x00405b2a\nCALL 0x00402100\nMOV R15D,dword ptr [RAX]\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x4128f2\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RBP + -0x38]\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R15D\nJMP 0x00404208\nCALL 0x00402100\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x412d0c\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nMOV RCX,qword ptr [RBP + -0x38]\nCALL 0x00402640\nCMP byte ptr [R12 + 0x24],0x0\nJNZ 0x00404d14\nJMP 0x00404d19\nMOV dword ptr [RBP + -0x4c],0x0\nJMP 0x00405b3f\nMOV EAX,dword ptr [-0x180 + RBP]\nMOV dword ptr [RBP + -0x40],EAX\nNOT EAX\nTEST dword ptr [RBP + -0x4c],EAX\nJZ 0x00405b3f\nMOV AL,0x1\nMOV dword ptr [RBP + -0x48],EAX\nTEST byte ptr [RBP + -0x48],0x1\nMOV EAX,dword ptr [RBP + -0x4c]\nMOV ECX,R13D\nJZ 0x00405bae\nMOV ESI,dword ptr [RBP + -0x40]\nOR ESI,EAX\nMOV RDI,qword ptr [RBP + -0x38]\nCALL 0x00402620\nMOV ECX,R13D\nTEST EAX,EAX\nJZ 0x00405bae\nCALL 0x00402100\nMOV R15D,dword ptr [RAX]\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x412d61\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RBP + -0x38]\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,RBX\nCALL 0x00402640\nMOV ECX,R13D\nCMP byte ptr [R12 + 0x23],0x0\nJNZ 0x00404210\nTEST CL,CL\nSETNZ R14B\nJMP 0x00404210\nMOV dword ptr [RBP + -0x40],0x0\nMOV RDI,R14\nCALL 0x004020c0\nMOV RDI,RBX\nCALL 0x004020c0\nCMP byte ptr [RBP + -0x40],0x0\nJNZ 0x00405732\nJMP 0x004056ea\n'
p522
S'55\n48 89 e5\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 02 00 00\n4d 89 cc\n4d 89 c6\n48 89 cb\n49 89 f5\n49 89 ff\n48 8b 75 28\n48 8b 4d 20\n88 55 d7\n48 85 f6\n74 0c\n41 8a 44 24 18\n84 c0\n74 03\nc6 06 00\nc6 01 00\n41 83 7c 24 04 02\n75 15\n48 8d b5 f8 fe ff ff\n4c 89 ff\ne8 47 d2 00 00\n85 c0\n75 15\neb 63\n48 8d b5 f8 fe ff ff\n4c 89 ff\ne8 12 d2 00 00\n85 c0\n74 50\ne8 29 df ff ff\n44 8b 20\n45 31 f6\n31 ff\nbe f2 28 41 00\nba 05 00 00 00\ne8 82 e0 ff ff\n48 89 c3\nbf 04 00 00 00\n4c 89 fe\ne8 62 77 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 e6\n48 89 da\ne8 30 e4 ff ff\n44 89 f0\n48 8d 65 d8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n4c 89 75 c0\n48 89 5d 90\n44 8b b5 10 ff ff ff\n44 89 f0\n25 00 f0 00 00\n48 89 45 b8\n3d 00 40 00 00\n75 0c\n41 80 7c 24 29 00\n0f 84 a8 01 00 00\n8a 45 10\n84 c0\n74 79\n81 7d b8 00 40 00 00\n74 59\n41 83 3c 24 00\n75 52\n49 8b 7c 24 40\n48 8d 95 f8 fe ff ff\n4c 89 fe\ne8 d5 4f 00 00\n84 c0\n74 3a\n31 ff\nbe 17 29 41 00\nba 05 00 00 00\ne8 e0 df ff ff\n48 89 c3\nbf 04 00 00 00\n4c 89 fe\ne8 c0 76 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 8f e3 ff ff\n41 b6 01\ne9 57 ff ff ff\n49 8b 7c 24 40\n48 8d 95 f8 fe ff ff\n4c 89 fe\ne8 03 4f 00 00\n8a 45 10\n0f b6 f0\n4c 89 e7\ne8 95 19 00 00\n89 c3\n80 7d d7 00\n4c 89 6d c8\n0f 84 bb 00 00 00\n88 5d a0\n44 89 75 b0\n31 d2\n45 31 f6\n31 db\n8a 45 10\n4c 8b 6d b8\n84 c0\n48 89 5d a8\n0f 84 8d 02 00 00\n49 83 7c 24 38 00\n0f 84 81 02 00 00\n41 80 7c 24 18 00\n0f 85 75 02 00 00\n41 83 3c 24 00\n0f 85 6a 02 00 00\n84 d2\n0f 84 43 02 00 00\n48 8d 9d 68 fe ff ff\nb8 00 f0 00 00\n23 43 18\n3d 00 a0 00 00\n0f 85 44 02 00 00\n49 8b 7c 24 38\n48 8b 75 c8\n48 89 da\ne8 ee 4e 00 00\n84 c0\n0f 84 2b 02 00 00\n45 31 f6\n31 ff\nbe 9d 2a 41 00\nba 05 00 00 00\ne8 f2 de ff ff\n49 89 c4\n31 ff\nbe 04 00 00 00\n4c 89 fa\ne8 f0 74 00 00\n49 89 c7\nbf 01 00 00 00\nbe 04 00 00 00\n48 8b 55 c8\ne9 b3 01 00 00\n81 7d b8 00 80 00 00\n75 7b\n41 80 7c 24 18 00\n0f 85 8f 00 00 00\n41 80 7c 24 2b 00\n0f 85 83 00 00 00\n41 80 7c 24 17 00\n75 7b\n41 83 3c 24 00\n75 74\n41 80 7c 24 15 00\n75 6c\n48 8d b5 68 fe ff ff\n4c 89 ef\ne8 f3 cf 00 00\n31 c9\n85 c0\n75 6c\ne9 83 00 00 00\n45 31 f6\n31 ff\nbe 01 29 41 00\nba 05 00 00 00\ne8 64 de ff ff\n48 89 c3\nbf 04 00 00 00\n4c 89 fe\ne8 44 75 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\ne9 de fd ff ff\n41 80 7c 24 14 00\n74 18\n81 7d b8 00 a0 00 00\n74 0f\n0f b7 45 b8\n3d 00 40 00 00\n0f 85 65 ff ff ff\n48 8d b5 68 fe ff ff\n4c 89 ef\ne8 a7 cf 00 00\nb1 01\n85 c0\n74 1c\n88 5d a0\ne8 99 dc ff ff\n8b 18\n83 fb 02\n75 7f\n44 89 75 b0\nc6 45 d7 01\ne9 77 fe ff ff\n48 89 4d a8\n48 8d b5 f8 fe ff ff\n48 8d 8d 68 fe ff ff\n4c 8d 8d d0 fd ff ff\n4c 89 ff\n4c 89 ea\n4d 89 e0\ne8 ee 17 00 00\n84 c0\n74 7d\n81 7d b8 00 40 00 00\n0f 84 1d 0a 00 00\n41 80 7c 24 2c 00\n0f 84 11 0a 00 00\n41 80 7c 24 1e 00\n0f 84 e8 07 00 00\n41 80 7c 24 18 00\n0f 84 83 09 00 00\n48 8b 85 68 fe ff ff\n48 3b 85 f8 fe ff ff\n0f 94 c0\ne9 6f 09 00 00\n45 31 f6\n31 ff\nbe f2 28 41 00\nba 05 00 00 00\ne8 6f dd ff ff\n49 89 c7\nbf 04 00 00 00\n48 8b 75 c8\ne8 4e 74 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n4c 89 fa\ne9 e8 fc ff ff\n45 31 f6\n31 ff\nbe 48 29 41 00\nba 05 00 00 00\ne8 39 dd ff ff\n49 89 c4\n31 ff\nbe 04 00 00 00\n4c 89 fa\ne8 37 73 00 00\n49 89 c7\nbf 01 00 00 00\nbe 04 00 00 00\n4c 89 ea\ne8 22 73 00 00\n48 89 c3\n31 ff\n31 f6\n31 c0\n4c 89 e2\n4c 89 f9\n49 89 d8\ne8 cb e0 ff ff\ne9 96 fc ff ff\n48 8d 9d d0 fd ff ff\n48 8b 7d c8\n48 89 de\ne8 73 ce 00 00\n85 c0\n0f 84 a9 fd ff ff\n48 8b 5d a8\n41 81 fd 00 40 00 00\n74 1e\n41 8a 44 24 2d\n84 c0\n74 15\n31 d2\n45 84 f6\n48 0f 45 d3\n4c 89 ff\n48 8b 75 c8\ne8 00 1e 00 00\n41 81 fd 00 40 00 00\n0f 95 c3\n41 80 7c 24 29 00\n74 39\n84 db\n75 35\n48 8b 85 f8 fe ff ff\n48 8b 8d 00 ff ff ff\n80 7d 10 00\n0f 84 91 00 00 00\n48 8b 7d c8\n48 89 ce\n48 89 c2\ne8 a3 3c 00 00\n48 85 c0\n0f 85 8d 00 00 00\ne9 22 01 00 00\n41 80 7c 24 18 00\n74 1a\n48 83 bd 08 ff ff ff 01\n75 10\n48 8b b5 f8 fe ff ff\n48 8b bd 00 ff ff ff\neb 58\n41 80 7c 24 21 00\n0f 84 f4 00 00 00\n41 80 7c 24 17 00\n0f 85 e8 00 00 00\n48 83 bd 08 ff ff ff 01\n77 19\n41 8b 4c 24 04\n83 f9 03\n0f 94 c0\n83 f9 04\n74 09\n22 45 10\n0f 84 c5 00 00 00\n48 8b 95 f8 fe ff ff\n48 8b b5 00 ff ff ff\n48 8b 7d c8\ne9 79 ff ff ff\n48 89 cf\n48 89 c6\ne8 d6 3b 00 00\n48 85 c0\n0f 84 9a 00 00 00\n41 81 fd 00 40 00 00\n48 89 45 98\n0f 85 32 01 00 00\n4c 89 75 88\n4c 89 ff\n48 89 c6\n49 89 c6\ne8 aa 79 00 00\n84 c0\n0f 84 b5 01 00 00\n31 ff\nbe ce 2a 41 00\nba 05 00 00 00\ne8 a1 db ff ff\n49 89 c6\n48 8b 15 b7 4d 21 00\n31 ff\nbe 04 00 00 00\ne8 9b 71 00 00\n49 89 c7\n48 8b 15 a9 4d 21 00\nbf 01 00 00 00\nbe 04 00 00 00\ne8 82 71 00 00\n48 89 c3\n31 ff\n31 f6\n31 c0\n4c 89 f2\n4c 89 f9\n49 89 d8\ne8 2b df ff ff\n48 8b 45 20\nc6 00 01\n41 80 7c 24 24 00\n0f 85 ec 05 00 00\ne9 ec 05 00 00\n31 c0\n41 80 7c 24 18 00\n48 89 45 98\n0f 84 61 02 00 00\n4c 89 ff\n48 8b 75 c8\ne8 55 df ff ff\n85 c0\n0f 84 af 00 00 00\ne8 a8 d9 ff ff\n49 89 c6\n41 8b 1e\n83 fb 12\n0f 84 7b 01 00 00\n83 fb 16\n0f 85 95 01 00 00\n31 ff\nbe 5e 2b 41 00\nba 05 00 00 00\ne8 ef da ff ff\n49 89 c6\n48 8b 15 05 4d 21 00\n31 ff\nbe 04 00 00 00\ne8 e9 70 00 00\n49 89 c7\n48 8b 15 f7 4c 21 00\nbf 01 00 00 00\nbe 04 00 00 00\ne8 d0 70 00 00\n48 89 c3\n31 ff\n31 f6\n31 c0\n4c 89 f2\n4c 89 f9\n49 89 d8\ne8 79 de ff ff\n48 8b 45 20\nc6 00 01\n41 b6 01\ne9 3a fa ff ff\n41 0f b6 4c 24 2d\n44 0f b6 45 a0\nba 01 00 00 00\n48 89 c7\n48 8b 75 c8\ne8 7e 18 00 00\n41 b6 01\n84 c0\n0f 85 13 fa ff ff\ne9 0a 05 00 00\n41 80 7c 24 2d 00\n0f 94 c0\n08 d8\n75 16\n31 d2\n45 84 f6\n48 0f 45 55 a8\n4c 89 ff\n48 8b 75 c8\ne8 9b 1b 00 00\n41 80 7c 24 20 00\n48 8b 7d c8\n74 0f\n31 f6\nba 01 00 00 00\n4c 89 e1\ne8 20 1c 00 00\n48 8b 45 28\n48 85 c0\n74 03\nc6 00 01\n41 b6 01\n80 7d 10 00\n0f 84 b7 f9 ff ff\n49 8b 7c 24 38\n48 8d 95 f8 fe ff ff\n48 8b 75 c8\ne8 62 49 00 00\ne9 9d f9 ff ff\n48 8b 7d c8\n4c 89 f6\ne8 e1 77 00 00\n84 c0\n0f 84 8d 00 00 00\n31 ff\nbe fb 2a 41 00\nba 05 00 00 00\ne8 d8 d9 ff ff\n48 89 c3\n48 8b 35 ee 4b 21 00\nbf 04 00 00 00\ne8 b4 70 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 83 dd ff ff\n41 b6 01\n48 8b 4d 28\n48 85 c9\n0f 84 43 f9 ff ff\n41 8a 44 24 18\n84 c0\n0f 84 36 f9 ff ff\nc6 01 01\ne9 2e f9 ff ff\n41 81 fd 00 40 00 00\n0f 85 94 00 00 00\n48 8b 7d c8\ne8 68 d9 ff ff\n85 c0\n0f 85 90 00 00 00\ne9 97 00 00 00\n45 31 f6\n31 ff\nbe 8d 2b 41 00\ne9 2b 03 00 00\n41 8b 4c 24 04\n83 f9 03\n0f 94 c0\n83 f9 04\n0f 84 75 03 00 00\n22 45 10\n4c 8b 75 88\n0f 85 75 03 00 00\n31 ff\nbe 31 2b 41 00\nba 05 00 00 00\ne8 2a d9 ff ff\n49 89 c6\n31 ff\nbe 04 00 00 00\n48 8b 55 c8\ne8 27 6f 00 00\n49 89 c7\nbf 01 00 00 00\nbe 04 00 00 00\n48 8b 55 98\ne8 11 6f 00 00\n48 89 c3\n31 ff\n31 f6\n31 c0\n4c 89 f2\n4c 89 f9\ne9 98 01 00 00\n48 8b 7d c8\ne8 84 d7 ff ff\n85 c0\n74 0c\n41 8b 1e\n83 fb 02\n0f 85 99 02 00 00\nc6 45 d7 01\n41 80 7c 24 2a 00\n8b 45 b0\n74 05\n41 8b 44 24 10\n89 45 88\n45 31 f6\n41 81 fd 00 40 00 00\nb8 12 00 00 00\n41 0f 45 c6\n41 80 7c 24 1c 00\n4c 89 eb\n41 bd 3f 00 00 00\n44 0f 44 e8\n0f b6 55 d7\n4c 89 ff\n48 8b 75 c8\n4c 89 e1\ne8 f4 1a 00 00\n84 c0\n0f 84 1c f8 ff ff\n8b 4d 88\n41 21 cd\n81 fb 00 40 00 00\n44 89 6d b4\n75 4a\n48 8d bd f8 fe ff ff\n4c 8b 75 c0\n4c 89 f6\ne8 87 1c 00 00\n84 c0\n0f 84 13 01 00 00\n31 ff\nbe de 2b 41 00\nba 05 00 00 00\ne8 3e d8 ff ff\n48 89 c3\nbf 04 00 00 00\n4c 89 fe\ne8 1e 6f 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\ne9 b4 02 00 00\n41 80 7c 24 2b 00\n4c 8b 75 c8\n0f 84 9d 01 00 00\n41 80 3f 2f\n74 50\n4c 89 f7\ne8 d2 44 00 00\n49 89 c6\n41 80 3e 2e\n75 07\n41 80 7e 01 00\n74 2c\n48 8d b5 d0 fd ff ff\nbf e0 24 41 00\ne8 51 c9 00 00\n85 c0\n75 17\n48 8d b5 40 fd ff ff\n4c 89 f7\ne8 3e c9 00 00\n85 c0\n0f 84 36 07 00 00\n4c 89 f7\ne8 0e d6 ff ff\n4c 8b 75 c8\n4c 89 ff\n4c 89 f6\ne8 2f d8 ff ff\n85 c0\n0f 84 a7 0c 00 00\ne8 32 d6 ff ff\n8b 00\n89 45 b8\n31 ff\nbe 77 2c 41 00\nba 05 00 00 00\ne8 8c d7 ff ff\n49 89 c5\n31 ff\nbe 04 00 00 00\n4c 89 f2\ne8 8a 6d 00 00\n49 89 c6\nbf 01 00 00 00\nbe 04 00 00 00\n4c 89 fa\ne8 75 6d 00 00\n48 89 c3\n31 ff\n31 c0\n8b 75 b8\n4c 89 ea\n4c 89 f1\n49 89 d8\ne8 1d db ff ff\n41 80 7c 24 24 00\n0f 85 e5 01 00 00\ne9 e5 01 00 00\n4c 8b 6d 18\n48 89 e0\n48 8d 58 e0\n48 89 dc\n4c 89 70 e0\n48 8b 8d 00 ff ff ff\n48 89 48 e8\n48 8b 8d f8 fe ff ff\n48 89 48 f0\n80 7d d7 00\n75 64\nb8 00 f0 00 00\n23 85 80 fe ff ff\n3d 00 40 00 00\n75 52\n48 89 5d a0\n41 8a 44 24 24\n41 8a 4c 24 20\n08 c1\n0f 84 8e 06 00 00\n0f b6 f0\n31 d2\n48 8b 7d c8\n4c 89 e1\ne8 c5 18 00 00\n41 80 7c 24 25 00\n48 8b 5d 90\n0f 85 61 01 00 00\nc7 45 b4 00 00 00 00\n45 31 f6\n89 45 c0\n48 85 db\n0f 85 cf 08 00 00\ne9 df 08 00 00\n8b 45 88\n25 ff 0f 00 00\n8b 75 b4\nf7 d6\n21 c6\n4c 8b 75 c8\n4c 89 f7\ne8 7f d5 ff ff\n85 c0\n0f 84 d1 00 00 00\ne8 12 d5 ff ff\n44 8b 38\n31 ff\nbe 02 2c 41 00\ne9 e3 00 00 00\n41 80 7c 24 17 00\n48 8b 55 b8\n0f 84 ee 01 00 00\n44 0f b6 45 a0\n45 31 ed\n31 d2\n31 c9\n4c 89 ff\n4c 89 f6\ne8 4c 14 00 00\n84 c0\n0f 84 e0 00 00 00\nb0 01\n31 f6\ne9 42 0b 00 00\n45 31 f6\n31 ff\nbe a2 2b 41 00\nba 05 00 00 00\ne8 27 d6 ff ff\n49 89 c4\n31 ff\nbe 04 00 00 00\n4c 89 fa\ne8 25 6c 00 00\n49 89 c7\nbf 01 00 00 00\nbe 04 00 00 00\n48 8b 55 c8\ne8 0f 6c 00 00\n49 89 c0\n31 ff\n31 c0\n89 de\n4c 89 e2\n4c 89 f9\ne8 bb d9 ff ff\n48 8b b5 f8 fe ff ff\n48 8b bd 00 ff ff ff\ne8 68 35 00 00\ne9 73 f5 ff ff\n48 8b 45 98\n4c 8b 75 88\ne9 85 fa ff ff\n48 8b 45 98\ne9 7c fa ff ff\n31 c0\ne9 a4 01 00 00\n48 8d b5 68 fe ff ff\n4c 89 f7\ne8 37 c7 00 00\n85 c0\n0f 84 ef 03 00 00\ne8 2a d4 ff ff\n44 8b 38\n31 ff\nbe f2 28 41 00\nba 05 00 00 00\ne8 86 d5 ff ff\n48 89 c3\nbf 04 00 00 00\n4c 89 f6\ne8 66 6c 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 fe\n48 89 da\ne8 34 d9 ff ff\n41 80 7c 24 24 00\n74 05\ne8 67 27 00 00\n48 83 7d 98 00\n48 8b 5d c8\n75 13\n48 8b b5 f8 fe ff ff\n48 8b bd 00 ff ff ff\ne8 c9 34 00 00\n48 8b 7d a8\n48 85 ff\n74 4a\n48 89 de\ne8 58 d9 ff ff\n85 c0\n74 46\ne8 af d3 ff ff\n44 8b 38\n45 31 f6\n31 ff\nbe 7f 2d 41 00\nba 05 00 00 00\ne8 08 d5 ff ff\n49 89 c4\nbf 04 00 00 00\n48 89 de\ne8 e8 6b 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 fe\n4c 89 e2\ne9 81 f4 ff ff\n45 31 f6\ne9 7e f4 ff ff\n41 80 7c 24 2d 00\n74 59\n49 89 dc\n45 31 f6\n31 ff\nbe 93 2d 41 00\nba 05 00 00 00\ne8 bf d4 ff ff\n49 89 c7\n31 ff\nbe 04 00 00 00\n48 8b 55 a8\ne8 bc 6a 00 00\n48 89 c3\nbf 01 00 00 00\nbe 04 00 00 00\n4c 89 e2\ne8 a7 6a 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n4c 89 fe\n48 89 da\ne8 12 d8 ff ff\ne9 1d f4 ff ff\n45 31 f6\ne9 15 f4 ff ff\n81 fa 00 80 00 00\n74 19\n81 fa 00 a0 00 00\n0f 84 28 04 00 00\n41 8a 44 24 14\n84 c0\n0f 84 1b 04 00 00\n81 e1 ff 01 00 00\n48 83 ec 08\n48 8d 85 f8 fe ff ff\n4c 8d 4d d7\n4c 89 ff\n4c 89 f6\n4c 89 e2\n45 89 e8\n50\ne8 5d 1a 00 00\n48 83 c4 10\n84 c0\n0f 84 bd fe ff ff\n40 b6 01\n45 31 ed\ne9 1b 09 00 00\n31 c0\n34 01\n0f b6 c8\n48 8d b5 68 fe ff ff\n48 8d 95 f8 fe ff ff\n4c 89 ef\ne8 f9 78 00 00\n85 c0\n78 55\n48 8b 45 28\n48 85 c0\n74 03\nc6 00 01\n48 8b 95 f8 fe ff ff\n48 8b b5 00 ff ff ff\n4c 89 ef\ne8 03 34 00 00\n48 85 c0\n74 26\n41 0f b6 4c 24 2d\n44 0f b6 c3\nba 01 00 00 00\n48 89 c7\n4c 89 ee\n48 89 45 98\ne8 b0 11 00 00\n84 c0\n0f 84 c8 01 00 00\n41 b6 01\ne9 40 f3 ff ff\n44 89 75 b0\n41 80 7c 24 18 00\n74 36\n48 8d 95 68 fe ff ff\n4c 89 e7\n4c 89 ee\ne8 02 13 00 00\n84 c0\n4c 8b 6d b8\n48 8b 45 28\n48 8b 55 a8\n74 69\n41 b6 01\n48 85 c0\n0f 84 06 f3 ff ff\nc6 00 01\ne9 fe f2 ff ff\n4c 8b 6d b8\n41 81 fd 00 40 00 00\n48 8b 55 a8\n74 44\n41 8b 44 24 08\n41 b6 01\n83 f8 02\n0f 84 dc f2 ff ff\n83 f8 03\n75 2e\n48 8d 95 68 fe ff ff\n4c 89 e7\n48 8b 75 c8\ne8 24 13 00 00\n84 c0\n0f 84 bc f2 ff ff\n8a 85 d0 fd ff ff\n84 c0\n48 8b 55 a8\n74 15\ne9 a9 f2 ff ff\n41 b6 01\n80 bd d0 fd ff ff 00\n0f 85 99 f2 ff ff\nb8 00 f0 00 00\n23 85 80 fe ff ff\n3d 00 40 00 00\n4c 8b 75 c8\n74 5b\n41 81 fd 00 40 00 00\n75 17\n41 80 7c 24 18 00\n0f 84 ec 01 00 00\n41 83 3c 24 00\n0f 84 e1 01 00 00\n80 7d 10 00\n74 35\n41 83 3c 24 03\n74 2e\n49 8b 7c 24 38\n48 8d 95 68 fe ff ff\n4c 89 f6\ne8 82 42 00 00\n48 8b 55 a8\n84 c0\n74 12\n4c 89 f3\n45 31 f6\n31 ff\nbe 98 29 41 00\ne9 b3 01 00 00\n41 81 fd 00 40 00 00\n74 29\nb8 00 f0 00 00\n23 85 80 fe ff ff\n3d 00 40 00 00\n75 17\n41 80 7c 24 18 00\n0f 84 76 02 00 00\n41 83 3c 24 00\n0f 84 6b 02 00 00\n41 80 7c 24 18 00\n74 2d\nb8 00 f0 00 00\n8b 8d 10 ff ff ff\n21 c1\n81 f9 00 40 00 00\n75 18\n23 85 80 fe ff ff\n3d 00 40 00 00\n74 0b\n41 83 3c 24 00\n0f 84 b9 03 00 00\n41 83 3c 24 00\n88 5d a0\n74 18\n4c 89 ff\ne8 9f 3f 00 00\n48 89 c7\ne8 27 13 00 00\n48 8b 55 a8\n84 c0\n74 76\nb8 00 f0 00 00\n23 85 80 fe ff ff\n3d 00 40 00 00\n75 24\n45 31 f6\n31 db\n8a 45 10\ne9 70 f2 ff ff\n31 c0\n48 89 45 a8\n41 80 7c 24 24 00\n0f 85 72 fc ff ff\ne9 72 fc ff ff\n41 80 7c 24 18 00\n8a 45 10\n0f 84 34 02 00 00\n45 31 f6\n31 db\ne9 40 f2 ff ff\n48 89 5d a0\n8b 9d 80 fe ff ff\n89 d8\n25 c0 01 00 00\n3d c0 01 00 00\n0f 85 de 01 00 00\n89 5d c0\n45 31 f6\ne9 67 03 00 00\n41 80 7c 24 18 00\n75 16\nb8 00 f0 00 00\n23 85 80 fe ff ff\n3d 00 40 00 00\n0f 84 6c ff ff ff\n41 8b 34 24\n4c 89 f7\ne8 ef 36 00 00\n48 89 45 98\n48 89 c7\n4c 89 fe\ne8 60 d3 ff ff\n85 c0\n0f 84 71 02 00 00\n48 8b 7d 98\n49 89 fe\ne8 5c d1 ff ff\n48 89 e3\n48 8d 50 01\n48 83 c0 10\n48 83 e0 f0\n48 29 c3\n48 89 dc\n48 89 df\n4c 89 f6\ne8 7c d3 ff ff\n4c 89 f7\ne8 64 cf ff ff\n48 8b 7d c8\n48 89 de\ne8 38 d5 ff ff\n85 c0\n0f 84 6a 03 00 00\ne8 8b cf ff ff\n8b 18\n45 31 f6\n83 fb 02\n0f 85 a0 03 00 00\n31 db\nc6 45 d7 01\ne9 fe 04 00 00\n4c 89 f3\n45 31 f6\n31 ff\nbe 64 29 41 00\nba 05 00 00 00\ne8 cb d0 ff ff\n49 89 c4\n31 ff\nbe 04 00 00 00\n48 89 da\ne8 c9 66 00 00\n49 89 c5\nbf 01 00 00 00\nbe 04 00 00 00\n4c 89 fa\ne8 b4 66 00 00\n48 89 c3\n31 ff\n31 f6\n31 c0\n4c 89 e2\n4c 89 e9\ne9 8d f3 ff ff\n48 8b 85 d8 fd ff ff\n48 3b 85 48 fd ff ff\n0f 85 74 01 00 00\n4c 8b ad d0 fd ff ff\n48 8b 9d 40 fd ff ff\n4c 89 f7\ne8 b6 ce ff ff\n49 39 dd\n0f 84 9f f8 ff ff\ne9 58 01 00 00\n45 31 f6\nc7 45 b4 00 00 00 00\n89 45 c0\n48 8b 5d 90\n48 85 db\n0f 85 5e 02 00 00\ne9 6e 02 00 00\n8d 82 00 f0 ff ff\nc1 e8 0c\n83 f8 0b\n0f 87 86 03 00 00\nff 24 c5 70 27 41 00\n41 f7 d5\n44 23 6d b0\n48 8b 95 20 ff ff ff\n4c 89 f7\n44 89 ee\ne8 17 ab 00 00\n85 c0\n0f 84 be 02 00 00\ne8 8a ce ff ff\n44 8b 38\n31 ff\nbe b2 2c 41 00\ne9 5b fa ff ff\n4c 89 f3\n45 31 f6\n31 ff\nbe c3 29 41 00\nba 05 00 00 00\ne8 d4 cf ff ff\n49 89 c7\nbf 04 00 00 00\n48 89 de\ne8 b4 66 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\ne9 61 f2 ff ff\n89 de\n81 ce c0 01 00 00\n4c 8b 75 c8\n4c 89 f7\ne8 52 d3 ff ff\n85 c0\n0f 84 72 01 00 00\ne8 25 ce ff ff\n44 8b 38\n31 ff\nbe 1d 2c 41 00\ne9 f6 f9 ff ff\n41 80 7c 24 15 00\n0f 84 f0 01 00 00\n48 8b 5d c8\n48 89 df\ne8 0e ce ff ff\n85 c0\n74 13\ne8 f5 cd ff ff\n8b 00\n89 45 98\n83 f8 02\n0f 85 22 02 00 00\nc6 45 d7 01\n41 80 7c 24 2d 00\n0f 84 5e 03 00 00\n45 31 f6\n31 ff\nbe 61 27 41 00\nba 05 00 00 00\ne8 33 cf ff ff\n48 89 c3\nbf 04 00 00 00\n48 8b 75 c8\ne8 12 66 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n48 89 de\n48 89 ca\ne8 9d d2 ff ff\ne9 22 03 00 00\n4c 89 f7\ne8 50 cd ff ff\n31 ff\nbe 38 2c 41 00\nba 05 00 00 00\ne8 ef ce ff ff\n48 89 c3\n31 ff\nbe 03 00 00 00\n48 8b 55 c8\ne8 ac 66 00 00\ne9 a9 f6 ff ff\n41 80 7c 24 18 00\nb8 27 2a 41 00\nbe 59 2a 41 00\n48 0f 45 f0\n4c 89 f3\n45 31 f6\n31 ff\nba 05 00 00 00\ne8 b1 ce ff ff\n49 89 c5\n31 ff\nbe 04 00 00 00\n48 89 da\ne8 af 64 00 00\n49 89 c4\nbf 01 00 00 00\nbe 04 00 00 00\n4c 89 fa\ne8 9a 64 00 00\n49 89 c0\n31 ff\n31 f6\n31 c0\n4c 89 ea\n4c 89 e1\ne8 46 d2 ff ff\n48 8b 7d 98\ne8 bd cc ff ff\ne9 08 ee ff ff\n4c 89 f3\n45 31 f6\n31 ff\nbe f4 29 41 00\nba 05 00 00 00\ne8 51 ce ff ff\n49 89 c4\n31 ff\nbe 03 00 00 00\n4c 89 fa\ne8 0f 66 00 00\n49 89 c7\n31 ff\nbe 03 00 00 00\n48 89 da\ne8 fd 65 00 00\ne9 16 f1 ff ff\n89 5d c0\n41 b6 01\n41 80 7d 00 00\n48 8b 5d 90\n75 1c\n48 8b 95 68 fe ff ff\n48 8b b5 70 fe ff ff\n48 8b 7d c8\ne8 30 2e 00 00\n41 c6 45 00 01\n41 80 7c 24 2d 00\n74 0e\n31 d2\n4c 89 ff\n48 8b 75 c8\ne8 35 0f 00 00\n48 85 db\n74 15\n41 8a 44 24 1b\n84 c0\n74 0c\n48 8b 03\n48 3b 85 f8 fe ff ff\n75 29\n0f b6 55 d7\n48 8d 8d f8 fe ff ff\n4c 89 ff\n48 8b 75 c8\n4c 8b 45 a0\n4d 89 e1\nff 75 20\n41 55\ne8 08 12 00 00\n48 83 c4 10\neb 02\nb0 01\n45 31 ed\n31 f6\ne9 a3 02 00 00\n41 b6 01\nc6 45 d7 01\ne9 a6 01 00 00\n41 80 7c 24 21 00\n74 0e\n48 83 bd 78 fe ff ff 01\n0f 87 fa fd ff ff\n41 83 7c 24 04 02\n0f 85 7b fb ff ff\nb8 00 f0 00 00\n23 85 10 ff ff ff\n3d 00 80 00 00\n0f 84 65 fb ff ff\ne9 d3 fd ff ff\n31 ff\nbe 8c 2a 41 00\ne9 c8 ef ff ff\nb0 01\n45 31 ed\n31 f6\ne9 3c 02 00 00\n45 31 f6\n31 ff\nbe 9b 24 41 00\nba 05 00 00 00\ne8 21 cd ff ff\n49 89 c7\nbf 04 00 00 00\n48 89 de\ne8 01 64 00 00\n48 89 c1\n31 ff\n31 c0\n8b 75 98\ne9 ad ef ff ff\n41 f7 d5\n44 23 6d b0\n31 d2\n4c 89 f7\n44 89 ee\ne8 fe a7 00 00\n85 c0\n0f 84 0e 01 00 00\n41 81 e5 ff ef ff ff\n48 8b 7d c8\n44 89 ee\ne8 13 cf ff ff\n85 c0\n0f 84 76 01 00 00\ne8 56 cb ff ff\n44 8b 30\n31 ff\nbe 9c 2c 41 00\nba 05 00 00 00\ne8 b2 cc ff ff\n48 89 c3\nbf 04 00 00 00\n48 8b 75 c8\ne9 ff 00 00 00\n31 ff\nbe 30 2d 41 00\ne9 4d f4 ff ff\n48 8b b5 28 ff ff ff\n4c 89 ff\ne8 46 31 00 00\n48 89 c3\n48 85 db\n0f 84 b4 00 00 00\n48 89 df\n48 8b 75 c8\ne8 ee cc ff ff\n85 c0\n0f 84 20 01 00 00\ne8 f1 ca ff ff\n44 8b 28\n41 80 7c 24 2c 00\n0f 84 c4 00 00 00\n8a 45 d7\n84 c0\n0f 85 b9 00 00 00\nb8 00 f0 00 00\n23 85 80 fe ff ff\n3d 00 a0 00 00\n0f 85 a3 00 00 00\n4c 8b b5 98 fe ff ff\n48 89 df\ne8 42 cc ff ff\n49 39 c6\n0f 85 8b 00 00 00\n48 8b 7d c8\n4c 89 f6\ne8 cd 30 00 00\n49 89 c6\n48 85 c0\n0f 84 4a 05 00 00\n4c 89 f7\n48 89 de\ne8 06 ce ff ff\n85 c0\n0f 94 c0\n89 45 c0\ne9 39 05 00 00\n45 31 f6\n31 db\n8a 45 10\n48 8b 55 a8\ne9 68 ec ff ff\n31 f6\n45 31 f6\n89 45 c0\nb0 01\n45 31 ed\ne9 d3 00 00 00\ne8 51 ca ff ff\n44 8b 30\n31 ff\nbe d0 2c 41 00\nba 05 00 00 00\ne8 ad cb ff ff\n48 89 c3\nbf 04 00 00 00\n4c 89 fe\ne8 8d 62 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 f6\ne9 22 f6 ff ff\n48 89 df\ne8 d6 c9 ff ff\n31 ff\nbe ed 2c 41 00\nba 05 00 00 00\ne8 75 cb ff ff\n48 89 c3\nbf 04 00 00 00\n48 8b 75 c8\ne8 54 62 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 ee\ne9 e9 f5 ff ff\n45 31 ed\n31 f6\n45 31 f6\n89 45 c0\nb0 01\neb 53\n48 89 df\ne8 8e c9 ff ff\n41 80 7c 24 24 00\n74 05\ne8 41 1d 00 00\n41 80 7c 24 1c 00\n74 29\n8b b5 14 ff ff ff\n8b 95 18 ff ff ff\n48 8b 7d c8\ne8 34 ce ff ff\n85 c0\n74 10\n4c 89 e7\ne8 a8 04 00 00\n84 c0\n0f 84 73 03 00 00\n41 b5 01\n31 f6\nb0 01\n45 31 f6\n89 4d c0\n80 7d d7 00\n48 8b 5d b8\n0f 84 cf 00 00 00\n80 7d 10 00\n74 4b\n49 83 7c 24 38 00\n74 43\n89 75 a0\n4c 89 6d 90\n45 89 f5\n41 89 c6\n48 8d b5 d0 fd ff ff\n48 8b 7d c8\ne8 4a bc 00 00\n85 c0\n75 15\n49 8b 7c 24 38\n48 8d 95 d0 fd ff ff\n48 8b 75 c8\ne8 01 3a 00 00\n44 89 f0\n45 89 ee\n4c 8b 6d 90\n8b 75 a0\n81 fb 00 40 00 00\n74 0d\n41 8a 4c 24 17\n84 c9\n0f 85 39 01 00 00\n40 84 f6\n0f 85 30 01 00 00\n41 80 7c 24 1e 00\n0f 84 1f 01 00 00\n88 45 b8\n48 8d 9d f8 fe ff ff\n48 89 df\ne8 98 6e 00 00\n48 89 85 d0 fd ff ff\n48 89 95 d8 fd ff ff\n48 89 df\ne8 a2 6e 00 00\n48 89 85 e0 fd ff ff\n48 89 95 e8 fd ff ff\n48 8d b5 d0 fd ff ff\n45 84 ed\n74 79\n48 8b 7d c8\ne8 6f 1c 00 00\n85 c0\n75 79\ne9 c8 00 00 00\n81 fb 00 40 00 00\n0f 84 25 ff ff ff\n41 8a 4c 24 14\n84 c9\n0f 85 18 ff ff ff\n41 8a 54 24 24\n41 8a 4c 24 20\n08 d1\n0f 84 06 ff ff ff\n89 75 a0\n0f b6 f2\n4c 89 6d 90\n45 89 f5\n41 89 c6\n31 d2\n48 8b 7d c8\n4c 89 e1\ne8 bd 0b 00 00\n8b 75 a0\n44 89 f0\n45 89 ee\n4c 8b 6d 90\n41 80 7c 24 25 00\n0f 85 50 f4 ff ff\ne9 ca fe ff ff\n48 8b 7d c8\ne8 56 79 00 00\n85 c0\n74 54\ne8 2d c8 ff ff\n4c 89 6d 90\n44 8b 28\n31 ff\nbe 49 2d 41 00\nba 05 00 00 00\ne8 85 c9 ff ff\n48 89 c3\nbf 04 00 00 00\n48 8b 75 c8\ne8 64 60 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 ee\n4c 8b 6d 90\n48 89 da\ne8 2e cd ff ff\n41 80 7c 24 23 00\n74 08\n45 31 f6\ne9 ee e8 ff ff\n8a 45 b8\n45 84 ed\n74 0b\n84 c0\n41 0f 95 c6\ne9 db e8 ff ff\n44 89 75 b8\n41 80 7c 24 1c 00\n74 65\n41 89 c5\n8a 45 d7\n84 c0\n48 8b 5d c8\n44 8b 75 b0\n75 1c\n8b 8d 14 ff ff ff\n3b 8d 84 fe ff ff\n75 0e\n8b 8d 18 ff ff ff\n3b 8d 88 fe ff ff\n74 32\n44 0f b6 c0\n48 8d 8d f8 fe ff ff\n4c 8d 8d 68 fe ff ff\nba ff ff ff ff\n4c 89 e7\n48 89 de\ne8 5f 1b 00 00\n83 f8 ff\n74 5a\n85 c0\n75 07\n41 81 e6 ff f1 ff ff\n44 89 e8\neb 08\n48 8b 5d c8\n44 8b 75 b0\n41 89 c5\n41 80 7c 24 1d 00\n75 08\n41 80 7c 24 18 00\n74 37\nbe ff ff ff ff\nb9 ff ff ff ff\n4c 89 ff\n48 89 da\n45 89 f0\ne8 67 2c 00 00\n85 c0\n44 89 e9\n0f 84 ca 01 00 00\n41 80 7c 24 23 00\n0f 84 be 01 00 00\n45 31 f6\ne9 18 e8 ff ff\n41 80 7c 24 2a 00\n74 26\n41 8b 54 24 10\nbe ff ff ff ff\n48 8b 7d c8\ne8 bd 2c 00 00\n85 c0\n44 89 e9\n0f 84 90 01 00 00\n45 31 f6\ne9 ea e7 ff ff\n41 80 7c 24 1f 00\n74 2f\ne8 0d 02 00 00\nf7 d0\n25 ff 01 00 00\nbe ff ff ff ff\n48 8b 7d c8\n89 c2\ne8 86 2c 00 00\n85 c0\n44 89 e9\n0f 84 59 01 00 00\n45 31 f6\ne9 b3 e7 ff ff\n83 7d b4 00\n0f 84 ba 00 00 00\ne8 d4 01 00 00\nf7 d0\n21 45 b4\n80 7d b8 00\n0f 85 c4 00 00 00\n83 7d b4 00\n0f 84 ba 00 00 00\n80 7d d7 00\n0f 84 9b 00 00 00\n48 8d b5 68 fe ff ff\n48 8b 7d c8\ne8 61 b9 00 00\n85 c0\n0f 84 83 00 00 00\ne8 54 c6 ff ff\n44 8b 38\n45 31 f6\n31 ff\nbe f2 28 41 00\nba 05 00 00 00\ne8 ad c7 ff ff\n48 89 c3\nbf 04 00 00 00\n48 8b 75 c8\ne8 8c 5e 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 fe\ne9 25 e7 ff ff\ne8 18 c6 ff ff\n8b 18\n31 ff\nbe 0c 2d 41 00\nba 05 00 00 00\ne8 75 c7 ff ff\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ca\n48 8b 4d c8\ne8 30 cb ff ff\n41 80 7c 24 24 00\n0f 85 f8 f1 ff ff\ne9 f8 f1 ff ff\nc7 45 b4 00 00 00 00\neb 15\n8b 85 80 fe ff ff\n89 45 c0\nf7 d0\n85 45 b4\n74 05\nb0 01\n89 45 b8\nf6 45 b8 01\n8b 45 b4\n44 89 e9\n74 63\n8b 75 c0\n09 c6\n48 8b 7d c8\ne8 c7 ca ff ff\n44 89 e9\n85 c0\n74 4e\ne8 9b c5 ff ff\n44 8b 38\n45 31 f6\n31 ff\nbe 61 2d 41 00\nba 05 00 00 00\ne8 f4 c6 ff ff\n48 89 c3\nbf 04 00 00 00\n48 8b 75 c8\ne8 d3 5d 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 fe\n48 89 da\ne8 a1 ca ff ff\n44 89 e9\n41 80 7c 24 23 00\n0f 85 62 e6 ff ff\n84 c9\n41 0f 95 c6\ne9 57 e6 ff ff\nc7 45 c0 00 00 00 00\n4c 89 f7\ne8 f8 c4 ff ff\n48 89 df\ne8 f0 c4 ff ff\n80 7d c0 00\n0f 85 58 fb ff ff\ne9 0b fb ff ff\n'
p523
S'.text:0000000000404160\n.text:0000000000404161\n.text:0000000000404164\n.text:0000000000404166\n.text:0000000000404168\n.text:000000000040416a\n.text:000000000040416c\n.text:000000000040416d\n.text:0000000000404174\n.text:0000000000404177\n.text:000000000040417a\n.text:000000000040417d\n.text:0000000000404180\n.text:0000000000404183\n.text:0000000000404187\n.text:000000000040418b\n.text:000000000040418e\n.text:0000000000404191\n.text:0000000000404193\n.text:0000000000404198\n.text:000000000040419a\n.text:000000000040419c\n.text:000000000040419f\n.text:00000000004041a2\n.text:00000000004041a8\n.text:00000000004041aa\n.text:00000000004041b1\n.text:00000000004041b4\n.text:00000000004041b9\n.text:00000000004041bb\n.text:00000000004041bd\n.text:00000000004041bf\n.text:00000000004041c6\n.text:00000000004041c9\n.text:00000000004041ce\n.text:00000000004041d0\n.text:00000000004041d2\n.text:00000000004041d7\n.text:00000000004041da\n.text:00000000004041dd\n.text:00000000004041df\n.text:00000000004041e4\n.text:00000000004041e9\n.text:00000000004041ee\n.text:00000000004041f1\n.text:00000000004041f6\n.text:00000000004041f9\n.text:00000000004041fe\n.text:0000000000404201\n.text:0000000000404203\n.text:0000000000404205\n.text:0000000000404208\n.text:000000000040420b\n.text:0000000000404210\n.text:0000000000404213\n.text:0000000000404217\n.text:0000000000404218\n.text:000000000040421a\n.text:000000000040421c\n.text:000000000040421e\n.text:0000000000404220\n.text:0000000000404221\n.text:0000000000404222\n.text:0000000000404226\n.text:000000000040422a\n.text:0000000000404231\n.text:0000000000404234\n.text:0000000000404239\n.text:000000000040423d\n.text:0000000000404242\n.text:0000000000404244\n.text:000000000040424a\n.text:0000000000404250\n.text:0000000000404253\n.text:0000000000404255\n.text:0000000000404257\n.text:000000000040425e\n.text:0000000000404260\n.text:0000000000404265\n.text:0000000000404267\n.text:000000000040426c\n.text:0000000000404273\n.text:0000000000404276\n.text:000000000040427b\n.text:000000000040427d\n.text:000000000040427f\n.text:0000000000404281\n.text:0000000000404286\n.text:000000000040428b\n.text:0000000000404290\n.text:0000000000404293\n.text:0000000000404298\n.text:000000000040429b\n.text:00000000004042a0\n.text:00000000004042a3\n.text:00000000004042a5\n.text:00000000004042a7\n.text:00000000004042a9\n.text:00000000004042ac\n.text:00000000004042b1\n.text:00000000004042b4\n.text:00000000004042b9\n.text:00000000004042be\n.text:00000000004042c5\n.text:00000000004042c8\n.text:00000000004042cd\n.text:00000000004042d0\n.text:00000000004042d3\n.text:00000000004042d6\n.text:00000000004042db\n.text:00000000004042dd\n.text:00000000004042e1\n.text:00000000004042e5\n.text:00000000004042eb\n.text:00000000004042ee\n.text:00000000004042f2\n.text:00000000004042f4\n.text:00000000004042f7\n.text:00000000004042f9\n.text:00000000004042fc\n.text:0000000000404300\n.text:0000000000404302\n.text:0000000000404306\n.text:000000000040430c\n.text:0000000000404312\n.text:0000000000404318\n.text:000000000040431e\n.text:0000000000404324\n.text:0000000000404329\n.text:000000000040432f\n.text:0000000000404331\n.text:0000000000404337\n.text:000000000040433e\n.text:0000000000404343\n.text:0000000000404346\n.text:000000000040434b\n.text:0000000000404351\n.text:0000000000404356\n.text:000000000040435a\n.text:000000000040435d\n.text:0000000000404362\n.text:0000000000404364\n.text:000000000040436a\n.text:000000000040436d\n.text:000000000040436f\n.text:0000000000404374\n.text:0000000000404379\n.text:000000000040437e\n.text:0000000000404381\n.text:0000000000404383\n.text:0000000000404388\n.text:000000000040438b\n.text:0000000000404390\n.text:0000000000404393\n.text:0000000000404398\n.text:000000000040439d\n.text:00000000004043a1\n.text:00000000004043a6\n.text:00000000004043ad\n.text:00000000004043af\n.text:00000000004043b5\n.text:00000000004043bb\n.text:00000000004043c1\n.text:00000000004043c7\n.text:00000000004043cd\n.text:00000000004043cf\n.text:00000000004043d4\n.text:00000000004043d6\n.text:00000000004043dc\n.text:00000000004043de\n.text:00000000004043e5\n.text:00000000004043e8\n.text:00000000004043ed\n.text:00000000004043ef\n.text:00000000004043f1\n.text:00000000004043f3\n.text:00000000004043f8\n.text:00000000004043fb\n.text:00000000004043fd\n.text:0000000000404402\n.text:0000000000404407\n.text:000000000040440c\n.text:000000000040440f\n.text:0000000000404414\n.text:0000000000404417\n.text:000000000040441c\n.text:000000000040441f\n.text:0000000000404421\n.text:0000000000404423\n.text:0000000000404425\n.text:000000000040442a\n.text:0000000000404430\n.text:0000000000404432\n.text:0000000000404439\n.text:000000000040443b\n.text:000000000040443f\n.text:0000000000404444\n.text:000000000040444a\n.text:0000000000404451\n.text:0000000000404454\n.text:0000000000404459\n.text:000000000040445b\n.text:000000000040445d\n.text:000000000040445f\n.text:0000000000404462\n.text:0000000000404467\n.text:0000000000404469\n.text:000000000040446c\n.text:000000000040446e\n.text:0000000000404472\n.text:0000000000404476\n.text:000000000040447b\n.text:000000000040447f\n.text:0000000000404486\n.text:000000000040448d\n.text:0000000000404494\n.text:0000000000404497\n.text:000000000040449a\n.text:000000000040449d\n.text:00000000004044a2\n.text:00000000004044a4\n.text:00000000004044a6\n.text:00000000004044ad\n.text:00000000004044b3\n.text:00000000004044b9\n.text:00000000004044bf\n.text:00000000004044c5\n.text:00000000004044cb\n.text:00000000004044d1\n.text:00000000004044d7\n.text:00000000004044de\n.text:00000000004044e5\n.text:00000000004044e8\n.text:00000000004044ed\n.text:00000000004044f0\n.text:00000000004044f2\n.text:00000000004044f7\n.text:00000000004044fc\n.text:0000000000404501\n.text:0000000000404504\n.text:0000000000404509\n.text:000000000040450d\n.text:0000000000404512\n.text:0000000000404515\n.text:0000000000404517\n.text:0000000000404519\n.text:000000000040451b\n.text:000000000040451e\n.text:0000000000404523\n.text:0000000000404526\n.text:0000000000404528\n.text:000000000040452d\n.text:0000000000404532\n.text:0000000000404537\n.text:000000000040453a\n.text:000000000040453c\n.text:0000000000404541\n.text:0000000000404544\n.text:0000000000404549\n.text:000000000040454c\n.text:0000000000404551\n.text:0000000000404556\n.text:0000000000404559\n.text:000000000040455e\n.text:0000000000404561\n.text:0000000000404563\n.text:0000000000404565\n.text:0000000000404567\n.text:000000000040456a\n.text:000000000040456d\n.text:0000000000404570\n.text:0000000000404575\n.text:000000000040457a\n.text:0000000000404581\n.text:0000000000404585\n.text:0000000000404588\n.text:000000000040458d\n.text:000000000040458f\n.text:0000000000404595\n.text:0000000000404599\n.text:00000000004045a0\n.text:00000000004045a2\n.text:00000000004045a7\n.text:00000000004045a9\n.text:00000000004045ab\n.text:00000000004045ad\n.text:00000000004045b0\n.text:00000000004045b4\n.text:00000000004045b7\n.text:00000000004045bb\n.text:00000000004045c0\n.text:00000000004045c7\n.text:00000000004045ca\n.text:00000000004045d0\n.text:00000000004045d2\n.text:00000000004045d4\n.text:00000000004045d6\n.text:00000000004045dd\n.text:00000000004045e4\n.text:00000000004045e8\n.text:00000000004045ee\n.text:00000000004045f2\n.text:00000000004045f5\n.text:00000000004045f8\n.text:00000000004045fd\n.text:0000000000404600\n.text:0000000000404606\n.text:000000000040460b\n.text:0000000000404611\n.text:0000000000404613\n.text:000000000040461b\n.text:000000000040461d\n.text:0000000000404624\n.text:000000000040462b\n.text:000000000040462d\n.text:0000000000404633\n.text:0000000000404639\n.text:000000000040463f\n.text:0000000000404645\n.text:000000000040464d\n.text:000000000040464f\n.text:0000000000404654\n.text:0000000000404657\n.text:000000000040465a\n.text:000000000040465d\n.text:000000000040465f\n.text:0000000000404662\n.text:0000000000404668\n.text:000000000040466f\n.text:0000000000404676\n.text:000000000040467a\n.text:000000000040467f\n.text:0000000000404682\n.text:0000000000404685\n.text:000000000040468a\n.text:000000000040468d\n.text:0000000000404693\n.text:000000000040469a\n.text:000000000040469e\n.text:00000000004046a4\n.text:00000000004046a8\n.text:00000000004046ab\n.text:00000000004046ae\n.text:00000000004046b1\n.text:00000000004046b6\n.text:00000000004046b8\n.text:00000000004046be\n.text:00000000004046c0\n.text:00000000004046c5\n.text:00000000004046ca\n.text:00000000004046cf\n.text:00000000004046d2\n.text:00000000004046d9\n.text:00000000004046db\n.text:00000000004046e0\n.text:00000000004046e5\n.text:00000000004046e8\n.text:00000000004046ef\n.text:00000000004046f4\n.text:00000000004046f9\n.text:00000000004046fe\n.text:0000000000404701\n.text:0000000000404703\n.text:0000000000404705\n.text:0000000000404707\n.text:000000000040470a\n.text:000000000040470d\n.text:0000000000404710\n.text:0000000000404715\n.text:0000000000404719\n.text:000000000040471c\n.text:0000000000404722\n.text:0000000000404728\n.text:000000000040472d\n.text:000000000040472f\n.text:0000000000404735\n.text:0000000000404739\n.text:000000000040473f\n.text:0000000000404742\n.text:0000000000404746\n.text:000000000040474b\n.text:000000000040474d\n.text:0000000000404753\n.text:0000000000404758\n.text:000000000040475b\n.text:000000000040475e\n.text:0000000000404761\n.text:0000000000404767\n.text:000000000040476a\n.text:0000000000404770\n.text:0000000000404772\n.text:0000000000404777\n.text:000000000040477c\n.text:0000000000404781\n.text:0000000000404784\n.text:000000000040478b\n.text:000000000040478d\n.text:0000000000404792\n.text:0000000000404797\n.text:000000000040479a\n.text:00000000004047a1\n.text:00000000004047a6\n.text:00000000004047ab\n.text:00000000004047b0\n.text:00000000004047b3\n.text:00000000004047b5\n.text:00000000004047b7\n.text:00000000004047b9\n.text:00000000004047bc\n.text:00000000004047bf\n.text:00000000004047c2\n.text:00000000004047c7\n.text:00000000004047cb\n.text:00000000004047ce\n.text:00000000004047d1\n.text:00000000004047d6\n.text:00000000004047dc\n.text:00000000004047e1\n.text:00000000004047e6\n.text:00000000004047e9\n.text:00000000004047ed\n.text:00000000004047f2\n.text:00000000004047f5\n.text:00000000004047f7\n.text:00000000004047fd\n.text:0000000000404802\n.text:0000000000404808\n.text:000000000040480b\n.text:000000000040480d\n.text:000000000040480f\n.text:0000000000404811\n.text:0000000000404814\n.text:0000000000404819\n.text:000000000040481c\n.text:0000000000404820\n.text:0000000000404825\n.text:000000000040482b\n.text:000000000040482f\n.text:0000000000404831\n.text:0000000000404833\n.text:0000000000404838\n.text:000000000040483b\n.text:0000000000404840\n.text:0000000000404844\n.text:0000000000404847\n.text:0000000000404849\n.text:000000000040484c\n.text:000000000040484f\n.text:0000000000404853\n.text:0000000000404859\n.text:000000000040485e\n.text:0000000000404865\n.text:0000000000404869\n.text:000000000040486e\n.text:0000000000404873\n.text:0000000000404877\n.text:000000000040487a\n.text:000000000040487f\n.text:0000000000404881\n.text:0000000000404887\n.text:0000000000404889\n.text:000000000040488e\n.text:0000000000404893\n.text:0000000000404898\n.text:000000000040489b\n.text:00000000004048a2\n.text:00000000004048a7\n.text:00000000004048ac\n.text:00000000004048af\n.text:00000000004048b1\n.text:00000000004048b3\n.text:00000000004048b5\n.text:00000000004048b8\n.text:00000000004048bd\n.text:00000000004048c0\n.text:00000000004048c4\n.text:00000000004048c7\n.text:00000000004048cd\n.text:00000000004048d2\n.text:00000000004048d4\n.text:00000000004048da\n.text:00000000004048dd\n.text:00000000004048e2\n.text:00000000004048e9\n.text:00000000004048ef\n.text:00000000004048f3\n.text:00000000004048f8\n.text:00000000004048fa\n.text:0000000000404900\n.text:0000000000404905\n.text:0000000000404908\n.text:000000000040490a\n.text:000000000040490f\n.text:0000000000404914\n.text:0000000000404919\n.text:000000000040491c\n.text:000000000040491f\n.text:0000000000404922\n.text:0000000000404928\n.text:000000000040492b\n.text:000000000040492f\n.text:0000000000404935\n.text:0000000000404937\n.text:000000000040493c\n.text:0000000000404941\n.text:0000000000404946\n.text:0000000000404949\n.text:000000000040494b\n.text:0000000000404950\n.text:0000000000404954\n.text:0000000000404959\n.text:000000000040495c\n.text:0000000000404961\n.text:0000000000404966\n.text:000000000040496a\n.text:000000000040496f\n.text:0000000000404972\n.text:0000000000404974\n.text:0000000000404976\n.text:0000000000404978\n.text:000000000040497b\n.text:000000000040497e\n.text:0000000000404983\n.text:0000000000404987\n.text:000000000040498c\n.text:000000000040498e\n.text:0000000000404990\n.text:0000000000404993\n.text:0000000000404996\n.text:000000000040499c\n.text:00000000004049a0\n.text:00000000004049a6\n.text:00000000004049a9\n.text:00000000004049ab\n.text:00000000004049b0\n.text:00000000004049b3\n.text:00000000004049b6\n.text:00000000004049bd\n.text:00000000004049c2\n.text:00000000004049c6\n.text:00000000004049cc\n.text:00000000004049cf\n.text:00000000004049d5\n.text:00000000004049d9\n.text:00000000004049dd\n.text:00000000004049e0\n.text:00000000004049e4\n.text:00000000004049e7\n.text:00000000004049ec\n.text:00000000004049ee\n.text:00000000004049f4\n.text:00000000004049f7\n.text:00000000004049fa\n.text:0000000000404a00\n.text:0000000000404a04\n.text:0000000000404a06\n.text:0000000000404a0d\n.text:0000000000404a11\n.text:0000000000404a14\n.text:0000000000404a19\n.text:0000000000404a1b\n.text:0000000000404a21\n.text:0000000000404a23\n.text:0000000000404a28\n.text:0000000000404a2d\n.text:0000000000404a32\n.text:0000000000404a35\n.text:0000000000404a3a\n.text:0000000000404a3d\n.text:0000000000404a42\n.text:0000000000404a45\n.text:0000000000404a47\n.text:0000000000404a49\n.text:0000000000404a4b\n.text:0000000000404a50\n.text:0000000000404a56\n.text:0000000000404a5a\n.text:0000000000404a60\n.text:0000000000404a64\n.text:0000000000404a66\n.text:0000000000404a69\n.text:0000000000404a6e\n.text:0000000000404a71\n.text:0000000000404a75\n.text:0000000000404a77\n.text:0000000000404a7c\n.text:0000000000404a7e\n.text:0000000000404a85\n.text:0000000000404a8a\n.text:0000000000404a8f\n.text:0000000000404a91\n.text:0000000000404a93\n.text:0000000000404a9a\n.text:0000000000404a9d\n.text:0000000000404aa2\n.text:0000000000404aa4\n.text:0000000000404aaa\n.text:0000000000404aad\n.text:0000000000404ab2\n.text:0000000000404ab6\n.text:0000000000404ab9\n.text:0000000000404abc\n.text:0000000000404ac1\n.text:0000000000404ac3\n.text:0000000000404ac9\n.text:0000000000404ace\n.text:0000000000404ad0\n.text:0000000000404ad3\n.text:0000000000404ad5\n.text:0000000000404ada\n.text:0000000000404adf\n.text:0000000000404ae4\n.text:0000000000404ae7\n.text:0000000000404ae9\n.text:0000000000404aee\n.text:0000000000404af1\n.text:0000000000404af6\n.text:0000000000404af9\n.text:0000000000404afe\n.text:0000000000404b03\n.text:0000000000404b06\n.text:0000000000404b0b\n.text:0000000000404b0e\n.text:0000000000404b10\n.text:0000000000404b12\n.text:0000000000404b15\n.text:0000000000404b18\n.text:0000000000404b1b\n.text:0000000000404b1e\n.text:0000000000404b23\n.text:0000000000404b29\n.text:0000000000404b2f\n.text:0000000000404b34\n.text:0000000000404b38\n.text:0000000000404b3b\n.text:0000000000404b3f\n.text:0000000000404b42\n.text:0000000000404b46\n.text:0000000000404b4d\n.text:0000000000404b51\n.text:0000000000404b58\n.text:0000000000404b5c\n.text:0000000000404b60\n.text:0000000000404b62\n.text:0000000000404b67\n.text:0000000000404b6d\n.text:0000000000404b72\n.text:0000000000404b74\n.text:0000000000404b78\n.text:0000000000404b7d\n.text:0000000000404b82\n.text:0000000000404b84\n.text:0000000000404b8a\n.text:0000000000404b8d\n.text:0000000000404b8f\n.text:0000000000404b93\n.text:0000000000404b96\n.text:0000000000404b9b\n.text:0000000000404ba1\n.text:0000000000404ba5\n.text:0000000000404bab\n.text:0000000000404bb2\n.text:0000000000404bb5\n.text:0000000000404bb8\n.text:0000000000404bbb\n.text:0000000000404bc1\n.text:0000000000404bc6\n.text:0000000000404bc9\n.text:0000000000404bce\n.text:0000000000404bd1\n.text:0000000000404bd3\n.text:0000000000404bd5\n.text:0000000000404bd9\n.text:0000000000404bdc\n.text:0000000000404be1\n.text:0000000000404be3\n.text:0000000000404be9\n.text:0000000000404bee\n.text:0000000000404bf1\n.text:0000000000404bf3\n.text:0000000000404bf8\n.text:0000000000404bfd\n.text:0000000000404c03\n.text:0000000000404c07\n.text:0000000000404c0d\n.text:0000000000404c12\n.text:0000000000404c15\n.text:0000000000404c17\n.text:0000000000404c19\n.text:0000000000404c1c\n.text:0000000000404c1f\n.text:0000000000404c24\n.text:0000000000404c26\n.text:0000000000404c2c\n.text:0000000000404c2e\n.text:0000000000404c30\n.text:0000000000404c35\n.text:0000000000404c38\n.text:0000000000404c3a\n.text:0000000000404c3f\n.text:0000000000404c44\n.text:0000000000404c49\n.text:0000000000404c4c\n.text:0000000000404c4e\n.text:0000000000404c53\n.text:0000000000404c56\n.text:0000000000404c5b\n.text:0000000000404c5e\n.text:0000000000404c63\n.text:0000000000404c68\n.text:0000000000404c6c\n.text:0000000000404c71\n.text:0000000000404c74\n.text:0000000000404c76\n.text:0000000000404c78\n.text:0000000000404c7a\n.text:0000000000404c7d\n.text:0000000000404c80\n.text:0000000000404c85\n.text:0000000000404c8c\n.text:0000000000404c93\n.text:0000000000404c98\n.text:0000000000404c9d\n.text:0000000000404ca1\n.text:0000000000404ca5\n.text:0000000000404caa\n.text:0000000000404cae\n.text:0000000000404cb3\n.text:0000000000404cb5\n.text:0000000000404cba\n.text:0000000000404cc1\n.text:0000000000404cc4\n.text:0000000000404cc9\n.text:0000000000404ccb\n.text:0000000000404cd1\n.text:0000000000404cd6\n.text:0000000000404cd9\n.text:0000000000404cdb\n.text:0000000000404ce0\n.text:0000000000404ce5\n.text:0000000000404cea\n.text:0000000000404ced\n.text:0000000000404cf2\n.text:0000000000404cf5\n.text:0000000000404cfa\n.text:0000000000404cfd\n.text:0000000000404cff\n.text:0000000000404d01\n.text:0000000000404d04\n.text:0000000000404d07\n.text:0000000000404d0c\n.text:0000000000404d12\n.text:0000000000404d14\n.text:0000000000404d19\n.text:0000000000404d1e\n.text:0000000000404d22\n.text:0000000000404d24\n.text:0000000000404d2b\n.text:0000000000404d32\n.text:0000000000404d37\n.text:0000000000404d3b\n.text:0000000000404d3e\n.text:0000000000404d40\n.text:0000000000404d43\n.text:0000000000404d48\n.text:0000000000404d4a\n.text:0000000000404d4c\n.text:0000000000404d51\n.text:0000000000404d54\n.text:0000000000404d57\n.text:0000000000404d59\n.text:0000000000404d5e\n.text:0000000000404d63\n.text:0000000000404d68\n.text:0000000000404d6b\n.text:0000000000404d70\n.text:0000000000404d73\n.text:0000000000404d78\n.text:0000000000404d7b\n.text:0000000000404d7d\n.text:0000000000404d7f\n.text:0000000000404d82\n.text:0000000000404d85\n.text:0000000000404d8a\n.text:0000000000404d8d\n.text:0000000000404d92\n.text:0000000000404d98\n.text:0000000000404d9a\n.text:0000000000404d9d\n.text:0000000000404da0\n.text:0000000000404da2\n.text:0000000000404da7\n.text:0000000000404dac\n.text:0000000000404db1\n.text:0000000000404db4\n.text:0000000000404db6\n.text:0000000000404dbb\n.text:0000000000404dbf\n.text:0000000000404dc4\n.text:0000000000404dc7\n.text:0000000000404dcc\n.text:0000000000404dd1\n.text:0000000000404dd4\n.text:0000000000404dd9\n.text:0000000000404ddc\n.text:0000000000404de1\n.text:0000000000404de3\n.text:0000000000404de6\n.text:0000000000404de9\n.text:0000000000404dee\n.text:0000000000404df3\n.text:0000000000404df6\n.text:0000000000404dfb\n.text:0000000000404e01\n.text:0000000000404e03\n.text:0000000000404e09\n.text:0000000000404e0f\n.text:0000000000404e14\n.text:0000000000404e16\n.text:0000000000404e1c\n.text:0000000000404e22\n.text:0000000000404e26\n.text:0000000000404e2d\n.text:0000000000404e31\n.text:0000000000404e34\n.text:0000000000404e37\n.text:0000000000404e3a\n.text:0000000000404e3d\n.text:0000000000404e3e\n.text:0000000000404e43\n.text:0000000000404e47\n.text:0000000000404e49\n.text:0000000000404e4f\n.text:0000000000404e52\n.text:0000000000404e55\n.text:0000000000404e5a\n.text:0000000000404e5c\n.text:0000000000404e5e\n.text:0000000000404e61\n.text:0000000000404e68\n.text:0000000000404e6f\n.text:0000000000404e72\n.text:0000000000404e77\n.text:0000000000404e79\n.text:0000000000404e7b\n.text:0000000000404e7f\n.text:0000000000404e82\n.text:0000000000404e84\n.text:0000000000404e87\n.text:0000000000404e8e\n.text:0000000000404e95\n.text:0000000000404e98\n.text:0000000000404e9d\n.text:0000000000404ea0\n.text:0000000000404ea2\n.text:0000000000404ea8\n.text:0000000000404eac\n.text:0000000000404eb1\n.text:0000000000404eb4\n.text:0000000000404eb7\n.text:0000000000404ebb\n.text:0000000000404ec0\n.text:0000000000404ec2\n.text:0000000000404ec8\n.text:0000000000404ecb\n.text:0000000000404ed0\n.text:0000000000404ed4\n.text:0000000000404eda\n.text:0000000000404edc\n.text:0000000000404ee3\n.text:0000000000404ee6\n.text:0000000000404ee9\n.text:0000000000404eee\n.text:0000000000404ef0\n.text:0000000000404ef4\n.text:0000000000404ef8\n.text:0000000000404efc\n.text:0000000000404efe\n.text:0000000000404f01\n.text:0000000000404f04\n.text:0000000000404f0a\n.text:0000000000404f0d\n.text:0000000000404f12\n.text:0000000000404f16\n.text:0000000000404f1d\n.text:0000000000404f21\n.text:0000000000404f23\n.text:0000000000404f28\n.text:0000000000404f2b\n.text:0000000000404f2e\n.text:0000000000404f34\n.text:0000000000404f37\n.text:0000000000404f39\n.text:0000000000404f40\n.text:0000000000404f43\n.text:0000000000404f47\n.text:0000000000404f4c\n.text:0000000000404f4e\n.text:0000000000404f54\n.text:0000000000404f5a\n.text:0000000000404f5c\n.text:0000000000404f60\n.text:0000000000404f62\n.text:0000000000404f67\n.text:0000000000404f6a\n.text:0000000000404f71\n.text:0000000000404f77\n.text:0000000000404f7c\n.text:0000000000404f82\n.text:0000000000404f87\n.text:0000000000404f8b\n.text:0000000000404f8d\n.text:0000000000404f94\n.text:0000000000404f96\n.text:0000000000404f9c\n.text:0000000000404fa2\n.text:0000000000404fa7\n.text:0000000000404fad\n.text:0000000000404fb1\n.text:0000000000404fb3\n.text:0000000000404fb8\n.text:0000000000404fba\n.text:0000000000404fbf\n.text:0000000000404fc6\n.text:0000000000404fc9\n.text:0000000000404fce\n.text:0000000000404fd2\n.text:0000000000404fd4\n.text:0000000000404fd6\n.text:0000000000404fd9\n.text:0000000000404fdc\n.text:0000000000404fde\n.text:0000000000404fe3\n.text:0000000000404fe8\n.text:0000000000404fef\n.text:0000000000404ff1\n.text:0000000000404ff6\n.text:0000000000404ffc\n.text:0000000000405001\n.text:0000000000405003\n.text:0000000000405009\n.text:000000000040500f\n.text:0000000000405014\n.text:000000000040501a\n.text:0000000000405020\n.text:0000000000405022\n.text:0000000000405027\n.text:000000000040502d\n.text:000000000040502f\n.text:0000000000405035\n.text:0000000000405037\n.text:000000000040503d\n.text:0000000000405042\n.text:0000000000405044\n.text:0000000000405049\n.text:000000000040504f\n.text:0000000000405054\n.text:0000000000405057\n.text:0000000000405059\n.text:000000000040505c\n.text:0000000000405061\n.text:0000000000405064\n.text:0000000000405069\n.text:000000000040506d\n.text:000000000040506f\n.text:0000000000405071\n.text:0000000000405076\n.text:000000000040507c\n.text:0000000000405081\n.text:0000000000405083\n.text:0000000000405086\n.text:0000000000405088\n.text:000000000040508b\n.text:0000000000405090\n.text:0000000000405092\n.text:0000000000405096\n.text:000000000040509c\n.text:00000000004050a2\n.text:00000000004050a7\n.text:00000000004050ad\n.text:00000000004050b0\n.text:00000000004050b6\n.text:00000000004050b9\n.text:00000000004050bb\n.text:00000000004050c0\n.text:00000000004050c4\n.text:00000000004050ca\n.text:00000000004050cc\n.text:00000000004050d1\n.text:00000000004050d6\n.text:00000000004050dc\n.text:00000000004050df\n.text:00000000004050e2\n.text:00000000004050e7\n.text:00000000004050ed\n.text:00000000004050ef\n.text:00000000004050f4\n.text:00000000004050fa\n.text:00000000004050ff\n.text:0000000000405105\n.text:0000000000405109\n.text:000000000040510c\n.text:0000000000405111\n.text:0000000000405115\n.text:0000000000405118\n.text:000000000040511b\n.text:0000000000405120\n.text:0000000000405122\n.text:0000000000405128\n.text:000000000040512c\n.text:000000000040512f\n.text:0000000000405134\n.text:0000000000405137\n.text:000000000040513b\n.text:000000000040513f\n.text:0000000000405143\n.text:0000000000405146\n.text:0000000000405149\n.text:000000000040514c\n.text:000000000040514f\n.text:0000000000405154\n.text:0000000000405157\n.text:000000000040515c\n.text:0000000000405160\n.text:0000000000405163\n.text:0000000000405168\n.text:000000000040516a\n.text:0000000000405170\n.text:0000000000405175\n.text:0000000000405177\n.text:000000000040517a\n.text:000000000040517d\n.text:0000000000405183\n.text:0000000000405185\n.text:0000000000405189\n.text:000000000040518e\n.text:0000000000405191\n.text:0000000000405194\n.text:0000000000405196\n.text:000000000040519b\n.text:00000000004051a0\n.text:00000000004051a5\n.text:00000000004051a8\n.text:00000000004051aa\n.text:00000000004051af\n.text:00000000004051b2\n.text:00000000004051b7\n.text:00000000004051ba\n.text:00000000004051bf\n.text:00000000004051c4\n.text:00000000004051c7\n.text:00000000004051cc\n.text:00000000004051cf\n.text:00000000004051d1\n.text:00000000004051d3\n.text:00000000004051d5\n.text:00000000004051d8\n.text:00000000004051db\n.text:00000000004051e0\n.text:00000000004051e7\n.text:00000000004051ee\n.text:00000000004051f4\n.text:00000000004051fb\n.text:0000000000405202\n.text:0000000000405205\n.text:000000000040520a\n.text:000000000040520d\n.text:0000000000405213\n.text:0000000000405218\n.text:000000000040521b\n.text:0000000000405222\n.text:0000000000405225\n.text:0000000000405229\n.text:000000000040522c\n.text:0000000000405232\n.text:0000000000405237\n.text:000000000040523d\n.text:0000000000405240\n.text:0000000000405243\n.text:0000000000405249\n.text:0000000000405250\n.text:0000000000405253\n.text:0000000000405257\n.text:000000000040525e\n.text:0000000000405261\n.text:0000000000405264\n.text:0000000000405269\n.text:000000000040526b\n.text:0000000000405271\n.text:0000000000405276\n.text:0000000000405279\n.text:000000000040527b\n.text:0000000000405280\n.text:0000000000405285\n.text:0000000000405288\n.text:000000000040528b\n.text:000000000040528d\n.text:0000000000405292\n.text:0000000000405297\n.text:000000000040529c\n.text:000000000040529f\n.text:00000000004052a4\n.text:00000000004052a7\n.text:00000000004052ac\n.text:00000000004052af\n.text:00000000004052b1\n.text:00000000004052b3\n.text:00000000004052b5\n.text:00000000004052ba\n.text:00000000004052bc\n.text:00000000004052c2\n.text:00000000004052c6\n.text:00000000004052c9\n.text:00000000004052ce\n.text:00000000004052d0\n.text:00000000004052d6\n.text:00000000004052db\n.text:00000000004052de\n.text:00000000004052e0\n.text:00000000004052e5\n.text:00000000004052ea\n.text:00000000004052f0\n.text:00000000004052f6\n.text:00000000004052fa\n.text:00000000004052fd\n.text:0000000000405302\n.text:0000000000405304\n.text:0000000000405306\n.text:000000000040530b\n.text:000000000040530d\n.text:0000000000405310\n.text:0000000000405313\n.text:0000000000405319\n.text:000000000040531d\n.text:0000000000405323\n.text:0000000000405329\n.text:000000000040532c\n.text:000000000040532e\n.text:0000000000405333\n.text:0000000000405338\n.text:000000000040533d\n.text:0000000000405340\n.text:0000000000405345\n.text:0000000000405349\n.text:000000000040534e\n.text:0000000000405351\n.text:0000000000405356\n.text:0000000000405358\n.text:000000000040535b\n.text:000000000040535e\n.text:0000000000405363\n.text:0000000000405368\n.text:000000000040536b\n.text:0000000000405370\n.text:0000000000405372\n.text:0000000000405377\n.text:000000000040537c\n.text:0000000000405381\n.text:0000000000405384\n.text:0000000000405386\n.text:000000000040538b\n.text:000000000040538f\n.text:0000000000405394\n.text:0000000000405399\n.text:000000000040539f\n.text:00000000004053a4\n.text:00000000004053a9\n.text:00000000004053ad\n.text:00000000004053b0\n.text:00000000004053b3\n.text:00000000004053b5\n.text:00000000004053ba\n.text:00000000004053bf\n.text:00000000004053c2\n.text:00000000004053c4\n.text:00000000004053c9\n.text:00000000004053cc\n.text:00000000004053d1\n.text:00000000004053d4\n.text:00000000004053d9\n.text:00000000004053de\n.text:00000000004053e1\n.text:00000000004053e6\n.text:00000000004053e9\n.text:00000000004053eb\n.text:00000000004053ed\n.text:00000000004053ef\n.text:00000000004053f2\n.text:00000000004053f5\n.text:00000000004053fa\n.text:00000000004053fe\n.text:0000000000405403\n.text:0000000000405408\n.text:000000000040540b\n.text:000000000040540e\n.text:0000000000405410\n.text:0000000000405415\n.text:000000000040541a\n.text:000000000040541f\n.text:0000000000405422\n.text:0000000000405424\n.text:0000000000405429\n.text:000000000040542c\n.text:0000000000405431\n.text:0000000000405434\n.text:0000000000405436\n.text:000000000040543b\n.text:000000000040543e\n.text:0000000000405443\n.text:0000000000405448\n.text:000000000040544b\n.text:000000000040544e\n.text:0000000000405453\n.text:0000000000405457\n.text:0000000000405459\n.text:0000000000405460\n.text:0000000000405467\n.text:000000000040546b\n.text:0000000000405470\n.text:0000000000405475\n.text:000000000040547b\n.text:000000000040547d\n.text:000000000040547f\n.text:0000000000405482\n.text:0000000000405486\n.text:000000000040548b\n.text:000000000040548e\n.text:0000000000405490\n.text:0000000000405495\n.text:0000000000405497\n.text:0000000000405499\n.text:000000000040549c\n.text:00000000004054a3\n.text:00000000004054a5\n.text:00000000004054a9\n.text:00000000004054b0\n.text:00000000004054b3\n.text:00000000004054b7\n.text:00000000004054bb\n.text:00000000004054be\n.text:00000000004054c1\n.text:00000000004054c3\n.text:00000000004054c8\n.text:00000000004054cc\n.text:00000000004054ce\n.text:00000000004054d0\n.text:00000000004054d3\n.text:00000000004054d5\n.text:00000000004054da\n.text:00000000004054dd\n.text:00000000004054e1\n.text:00000000004054e6\n.text:00000000004054ec\n.text:00000000004054ee\n.text:00000000004054f6\n.text:00000000004054fc\n.text:0000000000405502\n.text:0000000000405508\n.text:000000000040550d\n.text:0000000000405513\n.text:0000000000405518\n.text:000000000040551e\n.text:0000000000405523\n.text:0000000000405525\n.text:000000000040552a\n.text:000000000040552f\n.text:0000000000405531\n.text:0000000000405534\n.text:0000000000405536\n.text:000000000040553b\n.text:000000000040553e\n.text:0000000000405540\n.text:0000000000405545\n.text:000000000040554a\n.text:000000000040554f\n.text:0000000000405552\n.text:0000000000405557\n.text:000000000040555a\n.text:000000000040555f\n.text:0000000000405562\n.text:0000000000405564\n.text:0000000000405566\n.text:0000000000405569\n.text:000000000040556e\n.text:0000000000405571\n.text:0000000000405575\n.text:0000000000405577\n.text:000000000040557a\n.text:000000000040557d\n.text:0000000000405582\n.text:0000000000405584\n.text:000000000040558a\n.text:0000000000405591\n.text:0000000000405595\n.text:0000000000405598\n.text:000000000040559d\n.text:000000000040559f\n.text:00000000004055a5\n.text:00000000004055aa\n.text:00000000004055ad\n.text:00000000004055af\n.text:00000000004055b4\n.text:00000000004055b9\n.text:00000000004055be\n.text:00000000004055c1\n.text:00000000004055c6\n.text:00000000004055ca\n.text:00000000004055cf\n.text:00000000004055d1\n.text:00000000004055d6\n.text:00000000004055db\n.text:00000000004055e2\n.text:00000000004055e5\n.text:00000000004055ea\n.text:00000000004055ed\n.text:00000000004055f0\n.text:00000000004055f6\n.text:00000000004055f9\n.text:00000000004055fd\n.text:0000000000405602\n.text:0000000000405604\n.text:000000000040560a\n.text:000000000040560f\n.text:0000000000405612\n.text:0000000000405618\n.text:000000000040561e\n.text:0000000000405621\n.text:0000000000405623\n.text:0000000000405629\n.text:000000000040562e\n.text:0000000000405634\n.text:0000000000405639\n.text:000000000040563f\n.text:0000000000405646\n.text:0000000000405649\n.text:000000000040564e\n.text:0000000000405651\n.text:0000000000405657\n.text:000000000040565b\n.text:000000000040565e\n.text:0000000000405663\n.text:0000000000405666\n.text:0000000000405669\n.text:000000000040566f\n.text:0000000000405672\n.text:0000000000405675\n.text:000000000040567a\n.text:000000000040567c\n.text:000000000040567f\n.text:0000000000405682\n.text:0000000000405687\n.text:000000000040568a\n.text:000000000040568c\n.text:000000000040568f\n.text:0000000000405693\n.text:0000000000405698\n.text:000000000040569a\n.text:000000000040569d\n.text:00000000004056a0\n.text:00000000004056a2\n.text:00000000004056a5\n.text:00000000004056aa\n.text:00000000004056af\n.text:00000000004056b2\n.text:00000000004056b4\n.text:00000000004056b9\n.text:00000000004056be\n.text:00000000004056c3\n.text:00000000004056c6\n.text:00000000004056cb\n.text:00000000004056ce\n.text:00000000004056d3\n.text:00000000004056d6\n.text:00000000004056d8\n.text:00000000004056da\n.text:00000000004056dd\n.text:00000000004056e2\n.text:00000000004056e5\n.text:00000000004056ea\n.text:00000000004056ec\n.text:00000000004056f1\n.text:00000000004056f6\n.text:00000000004056fb\n.text:00000000004056fe\n.text:0000000000405703\n.text:0000000000405707\n.text:000000000040570c\n.text:000000000040570f\n.text:0000000000405711\n.text:0000000000405713\n.text:0000000000405716\n.text:000000000040571b\n.text:000000000040571e\n.text:0000000000405720\n.text:0000000000405723\n.text:0000000000405726\n.text:0000000000405728\n.text:000000000040572a\n.text:000000000040572d\n.text:0000000000405732\n.text:0000000000405738\n.text:000000000040573a\n.text:000000000040573f\n.text:0000000000405745\n.text:0000000000405747\n.text:000000000040574d\n.text:0000000000405753\n.text:0000000000405757\n.text:000000000040575c\n.text:000000000040575e\n.text:0000000000405760\n.text:0000000000405763\n.text:0000000000405768\n.text:000000000040576a\n.text:0000000000405770\n.text:0000000000405773\n.text:0000000000405775\n.text:0000000000405777\n.text:000000000040577a\n.text:000000000040577d\n.text:0000000000405781\n.text:0000000000405785\n.text:000000000040578b\n.text:000000000040578f\n.text:0000000000405791\n.text:0000000000405797\n.text:0000000000405799\n.text:000000000040579c\n.text:00000000004057a0\n.text:00000000004057a3\n.text:00000000004057a6\n.text:00000000004057ad\n.text:00000000004057b1\n.text:00000000004057b6\n.text:00000000004057b8\n.text:00000000004057ba\n.text:00000000004057bf\n.text:00000000004057c6\n.text:00000000004057ca\n.text:00000000004057cf\n.text:00000000004057d2\n.text:00000000004057d5\n.text:00000000004057d9\n.text:00000000004057dc\n.text:00000000004057e2\n.text:00000000004057e4\n.text:00000000004057e9\n.text:00000000004057eb\n.text:00000000004057f1\n.text:00000000004057f4\n.text:00000000004057fa\n.text:0000000000405800\n.text:0000000000405806\n.text:0000000000405809\n.text:0000000000405810\n.text:0000000000405813\n.text:0000000000405818\n.text:000000000040581f\n.text:0000000000405826\n.text:0000000000405829\n.text:000000000040582e\n.text:0000000000405835\n.text:000000000040583c\n.text:0000000000405843\n.text:0000000000405846\n.text:0000000000405848\n.text:000000000040584c\n.text:0000000000405851\n.text:0000000000405853\n.text:0000000000405855\n.text:000000000040585a\n.text:0000000000405860\n.text:0000000000405866\n.text:000000000040586b\n.text:000000000040586d\n.text:0000000000405873\n.text:0000000000405878\n.text:000000000040587d\n.text:000000000040587f\n.text:0000000000405885\n.text:0000000000405888\n.text:000000000040588b\n.text:000000000040588f\n.text:0000000000405892\n.text:0000000000405895\n.text:0000000000405897\n.text:000000000040589b\n.text:000000000040589e\n.text:00000000004058a3\n.text:00000000004058a6\n.text:00000000004058a9\n.text:00000000004058ac\n.text:00000000004058b0\n.text:00000000004058b6\n.text:00000000004058bc\n.text:00000000004058c1\n.text:00000000004058c5\n.text:00000000004058ca\n.text:00000000004058cc\n.text:00000000004058ce\n.text:00000000004058d3\n.text:00000000004058d7\n.text:00000000004058da\n.text:00000000004058dc\n.text:00000000004058e1\n.text:00000000004058e6\n.text:00000000004058eb\n.text:00000000004058ee\n.text:00000000004058f3\n.text:00000000004058f7\n.text:00000000004058fc\n.text:00000000004058ff\n.text:0000000000405901\n.text:0000000000405903\n.text:0000000000405906\n.text:000000000040590a\n.text:000000000040590d\n.text:0000000000405912\n.text:0000000000405918\n.text:000000000040591a\n.text:000000000040591d\n.text:0000000000405922\n.text:0000000000405925\n.text:0000000000405928\n.text:000000000040592a\n.text:000000000040592c\n.text:0000000000405930\n.text:0000000000405935\n.text:0000000000405939\n.text:000000000040593f\n.text:0000000000405941\n.text:0000000000405944\n.text:0000000000405947\n.text:0000000000405949\n.text:000000000040594d\n.text:0000000000405951\n.text:0000000000405953\n.text:0000000000405959\n.text:000000000040595f\n.text:0000000000405961\n.text:0000000000405967\n.text:000000000040596d\n.text:000000000040596f\n.text:0000000000405973\n.text:000000000040597a\n.text:0000000000405981\n.text:0000000000405986\n.text:0000000000405989\n.text:000000000040598c\n.text:0000000000405991\n.text:0000000000405994\n.text:0000000000405996\n.text:0000000000405998\n.text:000000000040599a\n.text:00000000004059a1\n.text:00000000004059a4\n.text:00000000004059a6\n.text:00000000004059aa\n.text:00000000004059ae\n.text:00000000004059b1\n.text:00000000004059b7\n.text:00000000004059b9\n.text:00000000004059bf\n.text:00000000004059c1\n.text:00000000004059c6\n.text:00000000004059cb\n.text:00000000004059ce\n.text:00000000004059d1\n.text:00000000004059d4\n.text:00000000004059d9\n.text:00000000004059db\n.text:00000000004059de\n.text:00000000004059e4\n.text:00000000004059ea\n.text:00000000004059f0\n.text:00000000004059f3\n.text:00000000004059f8\n.text:00000000004059fe\n.text:0000000000405a00\n.text:0000000000405a05\n.text:0000000000405a0a\n.text:0000000000405a0e\n.text:0000000000405a13\n.text:0000000000405a15\n.text:0000000000405a18\n.text:0000000000405a1e\n.text:0000000000405a21\n.text:0000000000405a26\n.text:0000000000405a2c\n.text:0000000000405a2e\n.text:0000000000405a33\n.text:0000000000405a35\n.text:0000000000405a3a\n.text:0000000000405a3f\n.text:0000000000405a43\n.text:0000000000405a45\n.text:0000000000405a4a\n.text:0000000000405a4c\n.text:0000000000405a4f\n.text:0000000000405a55\n.text:0000000000405a58\n.text:0000000000405a5d\n.text:0000000000405a61\n.text:0000000000405a67\n.text:0000000000405a6c\n.text:0000000000405a6e\n.text:0000000000405a71\n.text:0000000000405a75\n.text:0000000000405a7b\n.text:0000000000405a7f\n.text:0000000000405a85\n.text:0000000000405a89\n.text:0000000000405a8f\n.text:0000000000405a96\n.text:0000000000405a9a\n.text:0000000000405a9f\n.text:0000000000405aa1\n.text:0000000000405aa7\n.text:0000000000405aac\n.text:0000000000405aaf\n.text:0000000000405ab2\n.text:0000000000405ab4\n.text:0000000000405ab9\n.text:0000000000405abe\n.text:0000000000405ac3\n.text:0000000000405ac6\n.text:0000000000405acb\n.text:0000000000405acf\n.text:0000000000405ad4\n.text:0000000000405ad7\n.text:0000000000405ad9\n.text:0000000000405adb\n.text:0000000000405ade\n.text:0000000000405ae3\n.text:0000000000405ae8\n.text:0000000000405aea\n.text:0000000000405aec\n.text:0000000000405af1\n.text:0000000000405af6\n.text:0000000000405afb\n.text:0000000000405afe\n.text:0000000000405b00\n.text:0000000000405b02\n.text:0000000000405b04\n.text:0000000000405b07\n.text:0000000000405b0b\n.text:0000000000405b10\n.text:0000000000405b16\n.text:0000000000405b1c\n.text:0000000000405b21\n.text:0000000000405b28\n.text:0000000000405b2a\n.text:0000000000405b30\n.text:0000000000405b33\n.text:0000000000405b35\n.text:0000000000405b38\n.text:0000000000405b3a\n.text:0000000000405b3c\n.text:0000000000405b3f\n.text:0000000000405b43\n.text:0000000000405b46\n.text:0000000000405b49\n.text:0000000000405b4b\n.text:0000000000405b4e\n.text:0000000000405b50\n.text:0000000000405b54\n.text:0000000000405b59\n.text:0000000000405b5c\n.text:0000000000405b5e\n.text:0000000000405b60\n.text:0000000000405b65\n.text:0000000000405b68\n.text:0000000000405b6b\n.text:0000000000405b6d\n.text:0000000000405b72\n.text:0000000000405b77\n.text:0000000000405b7c\n.text:0000000000405b7f\n.text:0000000000405b84\n.text:0000000000405b88\n.text:0000000000405b8d\n.text:0000000000405b90\n.text:0000000000405b92\n.text:0000000000405b94\n.text:0000000000405b97\n.text:0000000000405b9a\n.text:0000000000405b9f\n.text:0000000000405ba2\n.text:0000000000405ba8\n.text:0000000000405bae\n.text:0000000000405bb0\n.text:0000000000405bb4\n.text:0000000000405bb9\n.text:0000000000405bc0\n.text:0000000000405bc3\n.text:0000000000405bc8\n.text:0000000000405bcb\n.text:0000000000405bd0\n.text:0000000000405bd4\n.text:0000000000405bda\n'
p524
tp525
sS'hash_initialize'
p526
(S'\n__stdcall hash_initialize(size_t candidate, Hash_tuning * tuning, Hash_hasher * hasher, Hash_comparator * comparator, Hash_data_freer * data_freer)\n'
p527
V\u000aHash_table *\u000ahash_initialize(size_t candidate,Hash_tuning *tuning,size_t (*hasher)(void *,size_t),\u000a               _Bool (*comparator)(void *,void *),void (*data_freer)(void *))\u000a\u000a{\u000a  _Bool _Var1;\u000a  Hash_table *table;\u000a  size_t n;\u000a  hash_entry *phVar2;\u000a  code *pcVar3;\u000a  Hash_tuning *tuning_00;\u000a  code *pcVar4;\u000a  \u000a  pcVar3 = raw_hasher;\u000a  if (hasher != (size_t (*)(void *,size_t))0x0) {\u000a    pcVar3 = hasher;\u000a  }\u000a  pcVar4 = raw_comparator;\u000a  if (comparator != (_Bool (*)(void *,void *))0x0) {\u000a    pcVar4 = comparator;\u000a  }\u000a  table = (Hash_table *)malloc(0x50);\u000a  if (table != (Hash_table *)0x0) {\u000a    tuning_00 = &default_tuning;\u000a    if (tuning != (Hash_tuning *)0x0) {\u000a      tuning_00 = tuning;\u000a    }\u000a    table->tuning = tuning_00;\u000a    _Var1 = check_tuning(table);\u000a    if (_Var1 != false) {\u000a      n = compute_bucket_size(candidate,tuning_00);\u000a      table->n_buckets = n;\u000a      if (n != 0) {\u000a        phVar2 = (hash_entry *)rpl_calloc(n,0x10);\u000a        table->bucket = phVar2;\u000a        if (phVar2 != (hash_entry *)0x0) {\u000a          table->bucket_limit = phVar2 + table->n_buckets;\u000a          *(undefined4 *)&table->n_buckets_used = 0;\u000a          *(undefined4 *)((long)&table->n_buckets_used + 4) = 0;\u000a          *(undefined4 *)&table->n_entries = 0;\u000a          *(undefined4 *)((long)&table->n_entries + 4) = 0;\u000a          table->hasher = pcVar3;\u000a          table->comparator = pcVar4;\u000a          table->data_freer = data_freer;\u000a          table->free_entry_list = (hash_entry *)0x0;\u000a          return table;\u000a        }\u000a      }\u000a    }\u000a    free(table);\u000a  }\u000a  return (Hash_table *)0x0;\u000a}\u000a\u000a
p528
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R13,R8\nMOV R12,RSI\nMOV R15,RDI\nTEST RDX,RDX\nMOV EBP,0x409ab0\nCMOVNZ RBP,RDX\nTEST RCX,RCX\nMOV R14D,0x409ad0\nCMOVNZ R14,RCX\nMOV EDI,0x50\nCALL 0x00402540\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00409a95\nMOV qword ptr [RSP],R13\nTEST R12,R12\nMOV R13D,0x41345c\nCMOVNZ R13,R12\nMOV qword ptr [RBX + 0x28],R13\nMOV RDI,RBX\nCALL 0x00409ae0\nTEST AL,AL\nJZ 0x00409a8d\nMOV RDI,R15\nMOV RSI,R13\nCALL 0x00409b60\nMOV qword ptr [RBX + 0x10],RAX\nTEST RAX,RAX\nJZ 0x00409a8d\nMOV ESI,0x10\nMOV RDI,RAX\nCALL 0x0040dbe0\nMOV qword ptr [RBX],RAX\nTEST RAX,RAX\nJZ 0x00409a8d\nMOV RCX,qword ptr [RBX + 0x10]\nSHL RCX,0x4\nADD RAX,RCX\nMOV qword ptr [RBX + 0x8],RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX + 0x18],XMM0\nMOV qword ptr [RBX + 0x30],RBP\nMOV qword ptr [RBX + 0x38],R14\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX + 0x40],RAX\nMOV qword ptr [RBX + 0x48],0x0\nJMP 0x00409a97\nMOV RDI,RBX\nCALL 0x004020c0\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p529
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 c5\n49 89 f4\n49 89 ff\n48 85 d2\nbd b0 9a 40 00\n48 0f 45 ea\n48 85 c9\n41 be d0 9a 40 00\n4c 0f 45 f1\nbf 50 00 00 00\ne8 39 8b ff ff\n48 89 c3\n48 85 db\n0f 84 82 00 00 00\n4c 89 2c 24\n4d 85 e4\n41 bd 5c 34 41 00\n4d 0f 45 ec\n4c 89 6b 28\n48 89 df\ne8 b0 00 00 00\n84 c0\n74 59\n4c 89 ff\n4c 89 ee\ne8 21 01 00 00\n48 89 43 10\n48 85 c0\n74 45\nbe 10 00 00 00\n48 89 c7\ne8 8b 41 00 00\n48 89 03\n48 85 c0\n74 30\n48 8b 4b 10\n48 c1 e1 04\n48 01 c8\n48 89 43 08\n0f 57 c0\n0f 11 43 18\n48 89 6b 30\n4c 89 73 38\n48 8b 04 24\n48 89 43 40\n48 c7 43 48 00 00 00 00\neb 0a\n48 89 df\ne8 2b 86 ff ff\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p530
S'.text:00000000004099d0\n.text:00000000004099d1\n.text:00000000004099d3\n.text:00000000004099d5\n.text:00000000004099d7\n.text:00000000004099d9\n.text:00000000004099da\n.text:00000000004099db\n.text:00000000004099de\n.text:00000000004099e1\n.text:00000000004099e4\n.text:00000000004099e7\n.text:00000000004099ec\n.text:00000000004099f0\n.text:00000000004099f3\n.text:00000000004099f9\n.text:00000000004099fd\n.text:0000000000409a02\n.text:0000000000409a07\n.text:0000000000409a0a\n.text:0000000000409a0d\n.text:0000000000409a13\n.text:0000000000409a17\n.text:0000000000409a1a\n.text:0000000000409a20\n.text:0000000000409a24\n.text:0000000000409a28\n.text:0000000000409a2b\n.text:0000000000409a30\n.text:0000000000409a32\n.text:0000000000409a34\n.text:0000000000409a37\n.text:0000000000409a3a\n.text:0000000000409a3f\n.text:0000000000409a43\n.text:0000000000409a46\n.text:0000000000409a48\n.text:0000000000409a4d\n.text:0000000000409a50\n.text:0000000000409a55\n.text:0000000000409a58\n.text:0000000000409a5b\n.text:0000000000409a5d\n.text:0000000000409a61\n.text:0000000000409a65\n.text:0000000000409a68\n.text:0000000000409a6c\n.text:0000000000409a6f\n.text:0000000000409a73\n.text:0000000000409a77\n.text:0000000000409a7b\n.text:0000000000409a7f\n.text:0000000000409a83\n.text:0000000000409a8b\n.text:0000000000409a8d\n.text:0000000000409a90\n.text:0000000000409a95\n.text:0000000000409a97\n.text:0000000000409a9a\n.text:0000000000409a9e\n.text:0000000000409a9f\n.text:0000000000409aa1\n.text:0000000000409aa3\n.text:0000000000409aa5\n.text:0000000000409aa7\n.text:0000000000409aa8\n'
p531
tp532
sS'xrealloc'
p533
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p534
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p535
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x0040d9a7\nTEST RBX,RBX\nJNZ 0x0040d9a7\nCALL 0x004020c0\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x004025c0\nTEST RBX,RBX\nJZ 0x0040d9b9\nTEST RAX,RAX\nJZ 0x0040d9bb\nPOP RBX\nRET\nCALL 0x0040dae0\n'
p536
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 1d 47 ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 11 4c ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p537
S'.text:000000000040d990\n.text:000000000040d991\n.text:000000000040d994\n.text:000000000040d997\n.text:000000000040d999\n.text:000000000040d99c\n.text:000000000040d99e\n.text:000000000040d9a3\n.text:000000000040d9a5\n.text:000000000040d9a6\n.text:000000000040d9a7\n.text:000000000040d9aa\n.text:000000000040d9af\n.text:000000000040d9b2\n.text:000000000040d9b4\n.text:000000000040d9b7\n.text:000000000040d9b9\n.text:000000000040d9ba\n.text:000000000040d9bb\n'
p538
tp539
sS'cycle_warning_required'
p540
(S'\n__stdcall cycle_warning_required(FTS * fts, FTSENT * ent)\n'
p541
V\u000a_Bool cycle_warning_required(FTS *fts,FTSENT *ent)\u000a\u000a{\u000a  _Bool _Var1;\u000a  uint uVar2;\u000a  \u000a  uVar2 = fts->fts_options & 0x11;\u000a  _Var1 = (_Bool)(uVar2 == 0x10);\u000a  if (uVar2 == 0x11) {\u000a    _Var1 = (_Bool)(ent->fts_level != 0);\u000a  }\u000a  return _Var1;\u000a}\u000a\u000a
p542
S'MOV ECX,dword ptr [RDI + 0x48]\nAND ECX,0x11\nCMP ECX,0x10\nSETZ AL\nCMP ECX,0x11\nJNZ 0x0040db6e\nCMP ECX,0x10\nJZ 0x0040db6e\nCMP qword ptr [RSI + 0x58],0x0\nSETNZ AL\nRET\n'
p543
S'8b 4f 48\n83 e1 11\n83 f9 10\n0f 94 c0\n83 f9 11\n75 0d\n83 f9 10\n74 08\n48 83 7e 58 00\n0f 95 c0\nc3\n'
p544
S'.text:000000000040db50\n.text:000000000040db53\n.text:000000000040db56\n.text:000000000040db59\n.text:000000000040db5c\n.text:000000000040db5f\n.text:000000000040db61\n.text:000000000040db64\n.text:000000000040db66\n.text:000000000040db6b\n.text:000000000040db6e\n'
p545
tp546
sS'set_file_security_ctx'
p547
(S'\n__stdcall set_file_security_ctx()\n'
p548
V\u000a_Bool set_file_security_ctx(void)\u000a\u000a{\u000a  char cVar1;\u000a  uint uVar2;\u000a  undefined uVar3;\u000a  _Bool _Var4;\u000a  uint *puVar5;\u000a  undefined8 uVar6;\u000a  char *pcVar7;\u000a  long in_RCX;\u000a  \u000a  if ((*(char *)(in_RCX + 0x22) != 0) && (*(char *)(in_RCX + 0x25) == 0)) {\u000a    cVar1 = *(char *)(in_RCX + 0x28);\u000a    _Var4 = restorecon();\u000a    if (cVar1 == 0) {\u000a      __errno_location();\u000a      _Var4 = errno_unsupported();\u000a      if (_Var4 == false) goto LAB_00406478;\u000a    }\u000a    return _Var4;\u000a  }\u000a  restorecon();\u000aLAB_00406478:\u000a  puVar5 = (uint *)__errno_location();\u000a  uVar2 = *puVar5;\u000a  uVar6 = dcgettext(0,"failed to set the security context of %s",5);\u000a  pcVar7 = quotearg_n_style((char *)0x0);\u000a  uVar3 = error(0,(ulong)uVar2,uVar6,pcVar7);\u000a  return (_Bool)uVar3;\u000a}\u000a\u000a
p549
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RDI\nCMP byte ptr [RCX + 0x22],0x0\nJZ 0x00406473\nCMP byte ptr [RCX + 0x25],0x0\nJZ 0x004064b7\nCALL 0x004076f0\nCALL 0x00402100\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x412ea6\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x4\nMOV RDX,R14\nCALL 0x0040b880\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00402640\nMOV BL,byte ptr [RCX + 0x28]\nCALL 0x004076f0\nCMP BL,0x0\nJNZ 0x004064d4\nCALL 0x00402100\nMOV EDI,dword ptr [RAX]\nCALL 0x00407700\nTEST AL,AL\nJZ 0x00406478\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p550
S'55\n41 56\n53\n49 89 fe\n80 79 22 00\n74 06\n80 79 25 00\n74 44\ne8 78 12 00 00\ne8 83 bc ff ff\n8b 28\n31 ff\nbe a6 2e 41 00\nba 05 00 00 00\ne8 e0 bd ff ff\n48 89 c3\n31 ff\nbe 04 00 00 00\n4c 89 f2\ne8 de 53 00 00\n48 89 c1\n31 ff\n31 c0\n89 ee\n48 89 da\n5b\n41 5e\n5d\ne9 89 c1 ff ff\n8a 59 28\ne8 31 12 00 00\n80 fb 00\n75 10\ne8 37 bc ff ff\n8b 38\ne8 30 12 00 00\n84 c0\n74 a4\n5b\n41 5e\n5d\nc3\n'
p551
S'.text:0000000000406460\n.text:0000000000406461\n.text:0000000000406463\n.text:0000000000406464\n.text:0000000000406467\n.text:000000000040646b\n.text:000000000040646d\n.text:0000000000406471\n.text:0000000000406473\n.text:0000000000406478\n.text:000000000040647d\n.text:000000000040647f\n.text:0000000000406481\n.text:0000000000406486\n.text:000000000040648b\n.text:0000000000406490\n.text:0000000000406493\n.text:0000000000406495\n.text:000000000040649a\n.text:000000000040649d\n.text:00000000004064a2\n.text:00000000004064a5\n.text:00000000004064a7\n.text:00000000004064a9\n.text:00000000004064ab\n.text:00000000004064ae\n.text:00000000004064af\n.text:00000000004064b1\n.text:00000000004064b2\n.text:00000000004064b7\n.text:00000000004064ba\n.text:00000000004064bf\n.text:00000000004064c2\n.text:00000000004064c4\n.text:00000000004064c9\n.text:00000000004064cb\n.text:00000000004064d0\n.text:00000000004064d2\n.text:00000000004064d4\n.text:00000000004064d5\n.text:00000000004064d7\n.text:00000000004064d8\n'
p552
tp553
sS'dir_name'
p554
(S'\n__stdcall dir_name(char * file)\n'
p555
V\u000achar * dir_name(char *file)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = mdir_name(file);\u000a  if (pcVar1 != (char *)0x0) {\u000a    return pcVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p556
S'PUSH RAX\nCALL 0x00408fa0\nTEST RAX,RAX\nJZ 0x00408f4d\nPOP RCX\nRET\nCALL 0x0040dae0\n'
p557
S'50\ne8 5a 00 00 00\n48 85 c0\n74 02\n59\nc3\ne8 8e 4b 00 00\n'
p558
S'.text:0000000000408f40\n.text:0000000000408f41\n.text:0000000000408f46\n.text:0000000000408f49\n.text:0000000000408f4b\n.text:0000000000408f4c\n.text:0000000000408f4d\n'
p559
tp560
sS'version_etc_ar'
p561
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p562
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p563
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x0040d770\nJMP 0x0040d400\n'
p564
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p565
S'.text:000000000040d760\n.text:000000000040d767\n.text:000000000040d770\n.text:000000000040d776\n.text:000000000040d77a\n.text:000000000040d77c\n'
p566
tp567
sS'create_hole'
p568
(S'\n__stdcall create_hole(char * name, off_t size)\n'
p569
V\u000a_Bool create_hole(char *name,off_t size)\u000a\u000a{\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  __off_t __offset;\u000a  char in_DL;\u000a  uint uVar6;\u000a  \u000a  _Var2 = lseek((int)name,__offset,1);\u000a  if (_Var2 < 0) {\u000a    puVar3 = (uint *)__errno_location();\u000a    uVar6 = *puVar3;\u000a    pcVar5 = "cannot lseek %s";\u000a  }\u000a  else {\u000a    if (in_DL == 0) {\u000a      return true;\u000a    }\u000a    iVar1 = punch_hole((ulong)name & 0xffffffff,_Var2 - __offset);\u000a    if (-1 < iVar1) {\u000a      return true;\u000a    }\u000a    puVar3 = (uint *)__errno_location();\u000a    uVar6 = *puVar3;\u000a    pcVar5 = "error deallocating %s";\u000a  }\u000a  uVar4 = dcgettext(0,pcVar5,5);\u000a  pcVar5 = quotearg_style((char *)0x4);\u000a  error(0,(ulong)uVar6,uVar4,pcVar5);\u000a  return false;\u000a}\u000a\u000a
p570
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV RBX,RCX\nMOV R12D,EDX\nMOV R14,RSI\nMOV EBP,EDI\nMOV EDX,0x1\nMOV RSI,RBX\nCALL 0x00402330\nTEST RAX,RAX\nJS 0x00408024\nMOV R15B,0x1\nTEST R12B,R12B\nJZ 0x00408060\nSUB RAX,RBX\nMOV EDI,EBP\nMOV RSI,RAX\nMOV RDX,RBX\nCALL 0x00408130\nTEST EAX,EAX\nJNS 0x00408060\nCALL 0x00402100\nMOV EBX,dword ptr [RAX]\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x413095\nJMP 0x00408035\nCALL 0x00402100\nMOV EBX,dword ptr [RAX]\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x413074\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,R14\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00402640\nMOV EAX,R15D\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p571
S'55\n41 57\n41 56\n41 54\n53\n48 89 cb\n41 89 d4\n49 89 f6\n89 fd\nba 01 00 00 00\n48 89 de\ne8 40 a3 ff ff\n48 85 c0\n78 2f\n41 b7 01\n45 84 e4\n74 63\n48 29 d8\n89 ef\n48 89 c6\n48 89 da\ne8 23 01 00 00\n85 c0\n79 4f\ne8 ea a0 ff ff\n8b 18\n45 31 ff\n31 ff\nbe 95 30 41 00\neb 11\ne8 d7 a0 ff ff\n8b 18\n45 31 ff\n31 ff\nbe 74 30 41 00\nba 05 00 00 00\ne8 31 a2 ff ff\n48 89 c5\nbf 04 00 00 00\n4c 89 f6\ne8 11 39 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 e0 a5 ff ff\n44 89 f8\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p572
S'.text:0000000000407fd0\n.text:0000000000407fd1\n.text:0000000000407fd3\n.text:0000000000407fd5\n.text:0000000000407fd7\n.text:0000000000407fd8\n.text:0000000000407fdb\n.text:0000000000407fde\n.text:0000000000407fe1\n.text:0000000000407fe3\n.text:0000000000407fe8\n.text:0000000000407feb\n.text:0000000000407ff0\n.text:0000000000407ff3\n.text:0000000000407ff5\n.text:0000000000407ff8\n.text:0000000000407ffb\n.text:0000000000407ffd\n.text:0000000000408000\n.text:0000000000408002\n.text:0000000000408005\n.text:0000000000408008\n.text:000000000040800d\n.text:000000000040800f\n.text:0000000000408011\n.text:0000000000408016\n.text:0000000000408018\n.text:000000000040801b\n.text:000000000040801d\n.text:0000000000408022\n.text:0000000000408024\n.text:0000000000408029\n.text:000000000040802b\n.text:000000000040802e\n.text:0000000000408030\n.text:0000000000408035\n.text:000000000040803a\n.text:000000000040803f\n.text:0000000000408042\n.text:0000000000408047\n.text:000000000040804a\n.text:000000000040804f\n.text:0000000000408052\n.text:0000000000408054\n.text:0000000000408056\n.text:0000000000408058\n.text:000000000040805b\n.text:0000000000408060\n.text:0000000000408063\n.text:0000000000408064\n.text:0000000000408066\n.text:0000000000408068\n.text:000000000040806a\n.text:000000000040806b\n'
p573
tp574
sS'update_timespec'
p575
(S'\n__stdcall update_timespec(stat * statbuf, timespec * * ts)\n'
p576
V\u000a_Bool update_timespec(stat *statbuf,timespec **ts)\u000a\u000a{\u000a  timespec *ts_00;\u000a  timespec tVar1;\u000a  \u000a  ts_00 = *ts;\u000a  if (ts_00->tv_nsec == 0x3fffffff) {\u000a    if (ts_00[1].tv_nsec == 0x3fffffff) {\u000a      *ts = (timespec *)0x0;\u000a      return false;\u000a    }\u000a    gettime(ts_00);\u000a  }\u000a  else {\u000a    if (ts_00->tv_nsec == 0x3ffffffe) {\u000a      if (ts_00[1].tv_nsec == 0x3ffffffe) {\u000a        return true;\u000a      }\u000a      tVar1 = get_stat_atime(statbuf);\u000a      ts_00->tv_sec = SUB168((undefined  [16])tVar1,0);\u000a      ts_00->tv_nsec = SUB168((undefined  [16])tVar1 >> 0x40,0);\u000a    }\u000a  }\u000a  if (ts_00[1].tv_nsec == 0x3fffffff) {\u000a    gettime(ts_00 + 1);\u000a  }\u000a  else {\u000a    if (ts_00[1].tv_nsec == 0x3ffffffe) {\u000a      tVar1 = get_stat_mtime(statbuf);\u000a      ts_00[1].tv_sec = SUB168((undefined  [16])tVar1,0);\u000a      ts_00[1].tv_nsec = SUB168((undefined  [16])tVar1 >> 0x40,0);\u000a    }\u000a  }\u000a  return false;\u000a}\u000a\u000a
p577
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV RBX,qword ptr [RSI]\nMOV RAX,qword ptr [RBX + 0x8]\nCMP RAX,0x3fffffff\nJZ 0x0040d1bb\nCMP RAX,0x3ffffffe\nJNZ 0x0040d1d6\nMOV AL,0x1\nCMP qword ptr [RBX + 0x18],0x3ffffffe\nJZ 0x0040d20a\nMOV RDI,R14\nCALL 0x0040c6b0\nMOV qword ptr [RBX],RAX\nMOV qword ptr [RBX + 0x8],RDX\nJMP 0x0040d1d6\nCMP qword ptr [RBX + 0x18],0x3fffffff\nJNZ 0x0040d1ce\nMOV qword ptr [RSI],0x0\nJMP 0x0040d208\nMOV RDI,RBX\nCALL 0x00410860\nMOV RAX,qword ptr [RBX + 0x18]\nCMP RAX,0x3fffffff\nJZ 0x0040d1fc\nCMP RAX,0x3ffffffe\nJNZ 0x0040d208\nMOV RDI,R14\nCALL 0x0040c6d0\nMOV qword ptr [RBX + 0x10],RAX\nMOV qword ptr [RBX + 0x18],RDX\nJMP 0x0040d208\nADD RBX,0x10\nMOV RDI,RBX\nCALL 0x00410860\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p578
S'41 56\n53\n50\n49 89 fe\n48 8b 1e\n48 8b 43 08\n48 3d ff ff ff 3f\n74 25\n48 3d fe ff ff 3f\n75 38\nb0 01\n48 81 7b 18 fe ff ff 3f\n74 60\n4c 89 f7\ne8 fe f4 ff ff\n48 89 03\n48 89 53 08\neb 1b\n48 81 7b 18 ff ff ff 3f\n75 09\n48 c7 06 00 00 00 00\neb 3a\n48 89 df\ne8 8a 36 00 00\n48 8b 43 18\n48 3d ff ff ff 3f\n74 1a\n48 3d fe ff ff 3f\n75 1e\n4c 89 f7\ne8 de f4 ff ff\n48 89 43 10\n48 89 53 18\neb 0c\n48 83 c3 10\n48 89 df\ne8 58 36 00 00\n31 c0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p579
S'.text:000000000040d180\n.text:000000000040d182\n.text:000000000040d183\n.text:000000000040d184\n.text:000000000040d187\n.text:000000000040d18a\n.text:000000000040d18e\n.text:000000000040d194\n.text:000000000040d196\n.text:000000000040d19c\n.text:000000000040d19e\n.text:000000000040d1a0\n.text:000000000040d1a8\n.text:000000000040d1aa\n.text:000000000040d1ad\n.text:000000000040d1b2\n.text:000000000040d1b5\n.text:000000000040d1b9\n.text:000000000040d1bb\n.text:000000000040d1c3\n.text:000000000040d1c5\n.text:000000000040d1cc\n.text:000000000040d1ce\n.text:000000000040d1d1\n.text:000000000040d1d6\n.text:000000000040d1da\n.text:000000000040d1e0\n.text:000000000040d1e2\n.text:000000000040d1e8\n.text:000000000040d1ea\n.text:000000000040d1ed\n.text:000000000040d1f2\n.text:000000000040d1f6\n.text:000000000040d1fa\n.text:000000000040d1fc\n.text:000000000040d200\n.text:000000000040d203\n.text:000000000040d208\n.text:000000000040d20a\n.text:000000000040d20e\n.text:000000000040d20f\n.text:000000000040d211\n'
p580
tp581
sS'gettime'
p582
(S'\n__stdcall gettime(timespec * ts)\n'
p583
V\u000avoid gettime(timespec *ts)\u000a\u000a{\u000a  int iVar1;\u000a  timeval local_18;\u000a  \u000a  iVar1 = clock_gettime(0,(timespec *)ts);\u000a  if (iVar1 != 0) {\u000a    gettimeofday(&local_18,(__timezone_ptr_t)0x0);\u000a    ts->tv_sec = local_18.tv_sec;\u000a    ts->tv_nsec = local_18.tv_usec * 1000;\u000a  }\u000a  return;\u000a}\u000a\u000a
p584
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RDI\nXOR EDI,EDI\nMOV RSI,RBX\nCALL 0x004021e0\nTEST EAX,EAX\nJZ 0x00410894\nMOV RDI,RSP\nXOR ESI,ESI\nCALL 0x00402340\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX],RAX\nIMUL RAX,qword ptr [RSP + 0x8],0x3e8\nMOV qword ptr [RBX + 0x8],RAX\nADD RSP,0x10\nPOP RBX\nRET\n'
p585
S'53\n48 83 ec 10\n48 89 fb\n31 ff\n48 89 de\ne8 6e 19 ff ff\n85 c0\n74 1e\n48 89 e7\n31 f6\ne8 c0 1a ff ff\n48 8b 04 24\n48 89 03\n48 69 44 24 08 e8 03 00 00\n48 89 43 08\n48 83 c4 10\n5b\nc3\n'
p586
S'.text:0000000000410860\n.text:0000000000410861\n.text:0000000000410865\n.text:0000000000410868\n.text:000000000041086a\n.text:000000000041086d\n.text:0000000000410872\n.text:0000000000410874\n.text:0000000000410876\n.text:0000000000410879\n.text:000000000041087b\n.text:0000000000410880\n.text:0000000000410884\n.text:0000000000410887\n.text:0000000000410890\n.text:0000000000410894\n.text:0000000000410898\n.text:0000000000410899\n'
p587
tp588
sS'rpl_mknod'
p589
(S'\n__stdcall rpl_mknod(char * name, dev_t dev)\n'
p590
V\u000aint rpl_mknod(char *name,dev_t dev)\u000a\u000a{\u000a  int iVar1;\u000a  __dev_t __dev;\u000a  uint __mode;\u000a  \u000a  __mode = (uint)dev;\u000a  if (((__mode & 0xf000) == 0x1000) && (__dev == 0)) {\u000a    iVar1 = mkfifo(name,__mode & 0xffffefff);\u000a    return iVar1;\u000a  }\u000a  iVar1 = mknod(name,__mode,__dev);\u000a  return iVar1;\u000a}\u000a\u000a
p591
S'MOV EAX,ESI\nAND EAX,0xf000\nCMP EAX,0x1000\nJNZ 0x0040fd9e\nTEST RDX,RDX\nJNZ 0x0040fd9e\nAND ESI,0xffffefff\nJMP 0x004024b0\nJMP 0x00411430\n'
p592
S'89 f0\n25 00 f0 00 00\n3d 00 10 00 00\n75 10\n48 85 d2\n75 0b\n81 e6 ff ef ff ff\ne9 12 27 ff ff\ne9 8d 16 00 00\n'
p593
S'.text:000000000040fd80\n.text:000000000040fd82\n.text:000000000040fd87\n.text:000000000040fd8c\n.text:000000000040fd8e\n.text:000000000040fd91\n.text:000000000040fd93\n.text:000000000040fd99\n.text:000000000040fd9e\n'
p594
tp595
sS'longest_relative_suffix'
p596
(S'\n__stdcall longest_relative_suffix(char * f)\n'
p597
V\u000achar * longest_relative_suffix(char *f)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  f = f + -1;\u000a  do {\u000a    pcVar1 = f + 1;\u000a    f = f + 1;\u000a  } while (*pcVar1 == '/');\u000a  return f;\u000a}\u000a\u000a
p598
S'DEC RDI\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP byte ptr [RDI + 0x1],0x2f\nLEA RDI,[RDI + 0x1]\nJZ 0x00409530\nMOV RAX,RDI\nRET\n'
p599
S'48 ff cf\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n80 7f 01 2f\n48 8d 7f 01\n74 f6\n48 89 f8\nc3\n'
p600
S'.text:0000000000409520\n.text:0000000000409523\n.text:0000000000409530\n.text:0000000000409534\n.text:0000000000409538\n.text:000000000040953a\n.text:000000000040953d\n'
p601
tp602
sS'priv_set_remove_linkdir'
p603
(S'\n__stdcall priv_set_remove_linkdir()\n'
p604
V\u000aint priv_set_remove_linkdir(void)\u000a\u000a{\u000a  return -1;\u000a}\u000a\u000a
p605
S'MOV EAX,0xffffffff\nRET\n'
p606
S'b8 ff ff ff ff\nc3\n'
p607
S'.text:000000000040a610\n.text:000000000040a615\n'
p608
tp609
sS'version_etc'
p610
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p611
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p612
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x0040d832\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x0040d790\nADD RSP,0xd8\nRET\n'
p613
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p614
S'.text:000000000040d7f0\n.text:000000000040d7f7\n.text:000000000040d7f9\n.text:000000000040d7fb\n.text:000000000040d800\n.text:000000000040d805\n.text:000000000040d80a\n.text:000000000040d812\n.text:000000000040d81a\n.text:000000000040d822\n.text:000000000040d82a\n.text:000000000040d832\n.text:000000000040d837\n.text:000000000040d83c\n.text:000000000040d841\n.text:000000000040d846\n.text:000000000040d84e\n.text:000000000040d853\n.text:000000000040d85b\n.text:000000000040d862\n.text:000000000040d865\n.text:000000000040d86a\n.text:000000000040d871\n'
p615
tp616
sS'create_hard_link'
p617
(S'\n__stdcall create_hard_link(char * src_name, char * dst_name)\n'
p618
V\u000a_Bool create_hard_link(char *src_name,char *dst_name)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  char *pcVar6;\u000a  char in_CL;\u000a  char in_DL;\u000a  int __flags;\u000a  undefined8 in_R8;\u000a  bool bVar7;\u000a  \u000a  __flags = ((uint)in_R8 & 0xff) << 10;\u000a  iVar2 = linkat(-100,src_name,-100,dst_name,__flags);\u000a  bVar7 = iVar2 != 0;\u000a  if (((bVar7) && (in_DL != 0)) && (puVar3 = (uint *)__errno_location(), *puVar3 == 0x11)) {\u000a    iVar2 = unlink(dst_name);\u000a    if (iVar2 != 0) {\u000a      uVar1 = *puVar3;\u000a      uVar4 = dcgettext(0,"cannot remove %s",5);\u000a      pcVar5 = quotearg_style((char *)0x4);\u000a      error(0,(ulong)uVar1,uVar4,pcVar5);\u000a      return false;\u000a    }\u000a    if (in_CL != 0) {\u000a      uVar4 = dcgettext(0,"removed %s\u005cn",5);\u000a      pcVar5 = quotearg_style((char *)0x4);\u000a      __printf_chk(1,uVar4,pcVar5,pcVar5);\u000a    }\u000a    iVar2 = linkat(-100,src_name,-100,dst_name,__flags);\u000a    bVar7 = iVar2 != 0;\u000a  }\u000a  if (bVar7) {\u000a    puVar3 = (uint *)__errno_location();\u000a    uVar1 = *puVar3;\u000a    uVar4 = dcgettext(0,"cannot create hard link %s to %s",5);\u000a    pcVar5 = quotearg_n_style((char *)0x0);\u000a    pcVar6 = quotearg_n_style((char *)0x1);\u000a    error(0,(ulong)uVar1,uVar4,pcVar5,pcVar6);\u000a  }\u000a  return (_Bool)!bVar7;\u000a}\u000a\u000a
p619
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15D,ECX\nMOV R14D,EDX\nMOV R12,RSI\nMOV R13,RDI\nMOVZX EBP,R8B\nSHL EBP,0xa\nMOV EDI,0xffffff9c\nMOV EDX,0xffffff9c\nMOV RSI,R13\nMOV RCX,R12\nMOV R8D,EBP\nCALL 0x004025e0\nTEST EAX,EAX\nSETNZ BL\nJZ 0x0040616d\nTEST R14B,R14B\nJZ 0x0040616d\nCALL 0x00402100\nMOV R14,RAX\nCMP dword ptr [R14],0x11\nJNZ 0x0040616d\nMOV RDI,R12\nCALL 0x00402110\nTEST EAX,EAX\nJZ 0x00406115\nMOV EBP,dword ptr [R14]\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x41249b\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,R12\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RBX\nCALL 0x00402640\nJMP 0x004061d4\nTEST R15B,R15B\nJZ 0x00406150\nXOR EDI,EDI\nMOV ESI,0x412761\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,R12\nCALL 0x0040b960\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RBX\nMOV RDX,RCX\nCALL 0x00402600\nMOV EDI,0xffffff9c\nMOV EDX,0xffffff9c\nMOV RSI,R13\nMOV RCX,R12\nMOV R8D,EBP\nCALL 0x004025e0\nTEST EAX,EAX\nSETNZ BL\nTEST BL,BL\nJZ 0x004061d1\nCALL 0x00402100\nMOV R15D,dword ptr [RAX]\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x412da8\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBP,R13\nMOV R13,RAX\nXOR EDI,EDI\nMOV ESI,0x4\nMOV RDX,R12\nCALL 0x0040b880\nMOV RBX,RAX\nMOV EDI,0x1\nMOV ESI,0x4\nMOV RDX,RBP\nCALL 0x0040b880\nMOV RBP,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,R13\nMOV RCX,RBX\nMOV R8,RBP\nCALL 0x00402640\nJMP 0x004061d4\nMOV R14B,0x1\nMOV EAX,R14D\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p620
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n41 89 cf\n41 89 d6\n49 89 f4\n49 89 fd\n41 0f b6 e8\nc1 e5 0a\nbf 9c ff ff ff\nba 9c ff ff ff\n4c 89 ee\n4c 89 e1\n41 89 e8\ne8 3a c5 ff ff\n85 c0\n0f 95 c3\n0f 84 bc 00 00 00\n45 84 f6\n0f 84 b3 00 00 00\ne8 41 c0 ff ff\n49 89 c6\n41 83 3e 11\n0f 85 a1 00 00 00\n4c 89 e7\ne8 3c c0 ff ff\n85 c0\n74 3d\n41 8b 2e\n45 31 f6\n31 ff\nbe 9b 24 41 00\nba 05 00 00 00\ne8 81 c1 ff ff\n48 89 c3\nbf 04 00 00 00\n4c 89 e6\ne8 61 58 00 00\n48 89 c1\n31 ff\n31 c0\n89 ee\n48 89 da\ne8 30 c5 ff ff\ne9 bf 00 00 00\n45 84 ff\n74 36\n31 ff\nbe 61 27 41 00\nba 05 00 00 00\ne8 45 c1 ff ff\n48 89 c3\nbf 04 00 00 00\n4c 89 e6\ne8 25 58 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n48 89 de\n48 89 ca\ne8 b0 c4 ff ff\nbf 9c ff ff ff\nba 9c ff ff ff\n4c 89 ee\n4c 89 e1\n41 89 e8\ne8 78 c4 ff ff\n85 c0\n0f 95 c3\n84 db\n74 60\ne8 8a bf ff ff\n44 8b 38\n45 31 f6\n31 ff\nbe a8 2d 41 00\nba 05 00 00 00\ne8 e3 c0 ff ff\n4c 89 ed\n49 89 c5\n31 ff\nbe 04 00 00 00\n4c 89 e2\ne8 de 56 00 00\n48 89 c3\nbf 01 00 00 00\nbe 04 00 00 00\n48 89 ea\ne8 c9 56 00 00\n48 89 c5\n31 ff\n31 c0\n44 89 fe\n4c 89 ea\n48 89 d9\n49 89 e8\ne8 71 c4 ff ff\neb 03\n41 b6 01\n44 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p621
S'.text:0000000000406070\n.text:0000000000406071\n.text:0000000000406073\n.text:0000000000406075\n.text:0000000000406077\n.text:0000000000406079\n.text:000000000040607a\n.text:000000000040607b\n.text:000000000040607e\n.text:0000000000406081\n.text:0000000000406084\n.text:0000000000406087\n.text:000000000040608b\n.text:000000000040608e\n.text:0000000000406093\n.text:0000000000406098\n.text:000000000040609b\n.text:000000000040609e\n.text:00000000004060a1\n.text:00000000004060a6\n.text:00000000004060a8\n.text:00000000004060ab\n.text:00000000004060b1\n.text:00000000004060b4\n.text:00000000004060ba\n.text:00000000004060bf\n.text:00000000004060c2\n.text:00000000004060c6\n.text:00000000004060cc\n.text:00000000004060cf\n.text:00000000004060d4\n.text:00000000004060d6\n.text:00000000004060d8\n.text:00000000004060db\n.text:00000000004060de\n.text:00000000004060e0\n.text:00000000004060e5\n.text:00000000004060ea\n.text:00000000004060ef\n.text:00000000004060f2\n.text:00000000004060f7\n.text:00000000004060fa\n.text:00000000004060ff\n.text:0000000000406102\n.text:0000000000406104\n.text:0000000000406106\n.text:0000000000406108\n.text:000000000040610b\n.text:0000000000406110\n.text:0000000000406115\n.text:0000000000406118\n.text:000000000040611a\n.text:000000000040611c\n.text:0000000000406121\n.text:0000000000406126\n.text:000000000040612b\n.text:000000000040612e\n.text:0000000000406133\n.text:0000000000406136\n.text:000000000040613b\n.text:000000000040613e\n.text:0000000000406143\n.text:0000000000406145\n.text:0000000000406148\n.text:000000000040614b\n.text:0000000000406150\n.text:0000000000406155\n.text:000000000040615a\n.text:000000000040615d\n.text:0000000000406160\n.text:0000000000406163\n.text:0000000000406168\n.text:000000000040616a\n.text:000000000040616d\n.text:000000000040616f\n.text:0000000000406171\n.text:0000000000406176\n.text:0000000000406179\n.text:000000000040617c\n.text:000000000040617e\n.text:0000000000406183\n.text:0000000000406188\n.text:000000000040618d\n.text:0000000000406190\n.text:0000000000406193\n.text:0000000000406195\n.text:000000000040619a\n.text:000000000040619d\n.text:00000000004061a2\n.text:00000000004061a5\n.text:00000000004061aa\n.text:00000000004061af\n.text:00000000004061b2\n.text:00000000004061b7\n.text:00000000004061ba\n.text:00000000004061bc\n.text:00000000004061be\n.text:00000000004061c1\n.text:00000000004061c4\n.text:00000000004061c7\n.text:00000000004061ca\n.text:00000000004061cf\n.text:00000000004061d1\n.text:00000000004061d4\n.text:00000000004061d7\n.text:00000000004061db\n.text:00000000004061dc\n.text:00000000004061de\n.text:00000000004061e0\n.text:00000000004061e2\n.text:00000000004061e4\n.text:00000000004061e5\n'
p622
tp623
sS'get_permissions'
p624
(S'\n__stdcall get_permissions(char * name, permission_context * ctx)\n'
p625
V\u000aint get_permissions(char *name,permission_context *ctx)\u000a\u000a{\u000a  undefined4 *in_RCX;\u000a  undefined4 in_EDX;\u000a  \u000a  *in_RCX = in_EDX;\u000a  return 0;\u000a}\u000a\u000a
p626
S'MOV dword ptr [RCX],EDX\nXOR EAX,EAX\nRET\n'
p627
S'89 11\n31 c0\nc3\n'
p628
S'.text:0000000000410110\n.text:0000000000410112\n.text:0000000000410114\n'
p629
tp630
sS'cdb_init'
p631
(S'\n__stdcall cdb_init(cd_buf * cdb)\n'
p632
V\u000avoid cdb_init(cd_buf *cdb)\u000a\u000a{\u000a  *cdb = (cd_buf)0xffffff9c;\u000a  return;\u000a}\u000a\u000a
p633
S'MOV dword ptr [RDI],0xffffff9c\nRET\n'
p634
S'c7 07 9c ff ff ff\nc3\n'
p635
S'.text:00000000004110f0\n.text:00000000004110f6\n'
p636
tp637
sS'hash_get_first'
p638
(S'\n__stdcall hash_get_first(Hash_table * table)\n'
p639
V\u000avoid * hash_get_first(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  \u000a  if (table->n_entries == 0) {\u000a    return (void *)0x0;\u000a  }\u000a  phVar1 = table->bucket;\u000a  if (phVar1 < table->bucket_limit) {\u000a    do {\u000a      if (phVar1->data != (void *)0x0) {\u000a        return phVar1->data;\u000a      }\u000a      phVar1 = phVar1 + 1;\u000a    } while (phVar1 < table->bucket_limit);\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p640
S'CMP qword ptr [RDI + 0x20],0x0\nJZ 0x00409823\nMOV RCX,qword ptr [RDI]\nCMP RCX,qword ptr [RDI + 0x8]\nJC 0x0040981a\nJMP 0x00409826\nADD RCX,0x10\nCMP RCX,qword ptr [RDI + 0x8]\nJNC 0x00409826\nMOV RAX,qword ptr [RCX]\nTEST RAX,RAX\nJZ 0x00409810\nRET\nXOR EAX,EAX\nRET\nPUSH RAX\nCALL 0x004020f0\n'
p641
S'48 83 7f 20 00\n74 2c\n48 8b 0f\n48 3b 4f 08\n72 1a\neb 24\n48 83 c1 10\n48 3b 4f 08\n73 0c\n48 8b 01\n48 85 c0\n74 ee\nc3\n31 c0\nc3\n50\ne8 c4 88 ff ff\n'
p642
S'.text:00000000004097f0\n.text:00000000004097f5\n.text:00000000004097f7\n.text:00000000004097fa\n.text:00000000004097fe\n.text:0000000000409800\n.text:0000000000409810\n.text:0000000000409814\n.text:0000000000409818\n.text:000000000040981a\n.text:000000000040981d\n.text:0000000000409820\n.text:0000000000409822\n.text:0000000000409823\n.text:0000000000409825\n.text:0000000000409826\n.text:0000000000409827\n'
p643
tp644
sS'quotearg_n_mem'
p645
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p646
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p647
S'MOV ECX,0x6198e0\nJMP 0x0040b690\n'
p648
S'b9 e0 98 61 00\ne9 36 fe ff ff\n'
p649
S'.text:000000000040b850\n.text:000000000040b855\n'
p650
tp651
sS'emit_ancillary_info'
p652
(S'\n__stdcall emit_ancillary_info()\n'
p653
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x004117a0;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("mv",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "mv";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,&DAT_00411f4e,uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/",&DAT_00411f4e);\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x413b59;\u000a  if (__s2 == "mv") {\u000a    uVar3 = 0x4121af;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p654
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x4117a0\nMOV ESI,0x412193\nNOP\nMOV EDI,0x411f4e\nCALL 0x00402480\nTEST EAX,EAX\nJZ 0x00402a9b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00402a80\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x411f4e\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x4121f2\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x411fe2\nMOV ECX,0x412209\nXOR EAX,EAX\nCALL 0x00402600\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x004025f0\nTEST RAX,RAX\nJZ 0x00402b24\nMOV ESI,0x412230\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00402120\nTEST EAX,EAX\nJZ 0x00402b24\nXOR EDI,EDI\nMOV ESI,0x412234\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x411f4e\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00402600\nXOR EDI,EDI\nMOV ESI,0x412279\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,RAX\nMOV R14D,0x411f4e\nMOV EDI,0x1\nMOV EDX,0x412209\nMOV ECX,0x411f4e\nXOR EAX,EAX\nCALL 0x00402600\nXOR EDI,EDI\nMOV ESI,0x412298\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x4121af\nMOV ECX,0x413b59\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00402600\n'
p655
S'41 56\n53\n50\nbb a0 17 41 00\nbe 93 21 41 00\n66 90\nbf 4e 1f 41 00\ne8 f6 f9 ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 4e 1f 41 00\n48 0f 45 d8\n31 ff\nbe f2 21 41 00\nba 05 00 00 00\ne8 b4 f7 ff ff\n48 89 c6\nbf 01 00 00 00\nba e2 1f 41 00\nb9 09 22 41 00\n31 c0\ne8 2b fb ff ff\nbf 05 00 00 00\n31 f6\ne8 0f fb ff ff\n48 85 c0\n74 3e\nbe 30 22 41 00\nba 03 00 00 00\n48 89 c7\ne8 28 f6 ff ff\n85 c0\n74 28\n31 ff\nbe 34 22 41 00\nba 05 00 00 00\ne8 63 f7 ff ff\n48 89 c1\nbf 01 00 00 00\nba 4e 1f 41 00\n31 c0\n48 89 ce\ne8 dc fa ff ff\n31 ff\nbe 79 22 41 00\nba 05 00 00 00\ne8 3b f7 ff ff\n48 89 c6\n41 be 4e 1f 41 00\nbf 01 00 00 00\nba 09 22 41 00\nb9 4e 1f 41 00\n31 c0\ne8 ac fa ff ff\n31 ff\nbe 98 22 41 00\nba 05 00 00 00\ne8 0b f7 ff ff\n48 89 c2\n4c 39 f3\nb8 af 21 41 00\nb9 59 3b 41 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 6e fa ff ff\n'
p656
S'.text:0000000000402a70\n.text:0000000000402a72\n.text:0000000000402a73\n.text:0000000000402a74\n.text:0000000000402a79\n.text:0000000000402a7e\n.text:0000000000402a80\n.text:0000000000402a85\n.text:0000000000402a8a\n.text:0000000000402a8c\n.text:0000000000402a8e\n.text:0000000000402a92\n.text:0000000000402a96\n.text:0000000000402a99\n.text:0000000000402a9b\n.text:0000000000402a9f\n.text:0000000000402aa2\n.text:0000000000402aa7\n.text:0000000000402aab\n.text:0000000000402aad\n.text:0000000000402ab2\n.text:0000000000402ab7\n.text:0000000000402abc\n.text:0000000000402abf\n.text:0000000000402ac4\n.text:0000000000402ac9\n.text:0000000000402ace\n.text:0000000000402ad0\n.text:0000000000402ad5\n.text:0000000000402ada\n.text:0000000000402adc\n.text:0000000000402ae1\n.text:0000000000402ae4\n.text:0000000000402ae6\n.text:0000000000402aeb\n.text:0000000000402af0\n.text:0000000000402af3\n.text:0000000000402af8\n.text:0000000000402afa\n.text:0000000000402afc\n.text:0000000000402afe\n.text:0000000000402b03\n.text:0000000000402b08\n.text:0000000000402b0d\n.text:0000000000402b10\n.text:0000000000402b15\n.text:0000000000402b1a\n.text:0000000000402b1c\n.text:0000000000402b1f\n.text:0000000000402b24\n.text:0000000000402b26\n.text:0000000000402b2b\n.text:0000000000402b30\n.text:0000000000402b35\n.text:0000000000402b38\n.text:0000000000402b3e\n.text:0000000000402b43\n.text:0000000000402b48\n.text:0000000000402b4d\n.text:0000000000402b4f\n.text:0000000000402b54\n.text:0000000000402b56\n.text:0000000000402b5b\n.text:0000000000402b60\n.text:0000000000402b65\n.text:0000000000402b68\n.text:0000000000402b6b\n.text:0000000000402b70\n.text:0000000000402b75\n.text:0000000000402b79\n.text:0000000000402b7e\n.text:0000000000402b80\n.text:0000000000402b83\n.text:0000000000402b86\n.text:0000000000402b8a\n.text:0000000000402b8b\n.text:0000000000402b8d\n'
p657
tp658
sS'save_cwd'
p659
(S'\n__stdcall save_cwd(saved_cwd * cwd)\n'
p660
V\u000aint save_cwd(saved_cwd *cwd)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  int iVar3;\u000a  \u000a  cwd->name = (char *)0x0;\u000a  iVar3 = 0;\u000a  iVar1 = open_safer(".");\u000a  cwd->desc = iVar1;\u000a  if (iVar1 < 0) {\u000a    pcVar2 = getcwd((char *)0x0,0);\u000a    cwd->name = pcVar2;\u000a    iVar3 = -(uint)(pcVar2 == (char *)0x0);\u000a  }\u000a  else {\u000a    set_cloexec_flag();\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p661
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV qword ptr [RBX + 0x8],0x0\nXOR EBP,EBP\nMOV EDI,0x4124e0\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00409100\nMOV dword ptr [RBX],EAX\nTEST EAX,EAX\nJS 0x00410e32\nMOV ESI,0x1\nMOV EDI,EAX\nCALL 0x004106e0\nJMP 0x00410e45\nXOR EDI,EDI\nXOR ESI,ESI\nCALL 0x004023a0\nMOV qword ptr [RBX + 0x8],RAX\nCMP RAX,0x1\nSBB EBP,EBP\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p662
S'55\n53\n50\n48 89 fb\n48 c7 43 08 00 00 00 00\n31 ed\nbf e0 24 41 00\n31 f6\n31 c0\ne8 e2 82 ff ff\n89 03\n85 c0\n78 0e\nbe 01 00 00 00\n89 c7\ne8 b0 f8 ff ff\neb 13\n31 ff\n31 f6\ne8 65 15 ff ff\n48 89 43 08\n48 83 f8 01\n19 ed\n89 e8\n48 83 c4 08\n5b\n5d\nc3\n'
p663
S'.text:0000000000410e00\n.text:0000000000410e01\n.text:0000000000410e02\n.text:0000000000410e03\n.text:0000000000410e06\n.text:0000000000410e0e\n.text:0000000000410e10\n.text:0000000000410e15\n.text:0000000000410e17\n.text:0000000000410e19\n.text:0000000000410e1e\n.text:0000000000410e20\n.text:0000000000410e22\n.text:0000000000410e24\n.text:0000000000410e29\n.text:0000000000410e2b\n.text:0000000000410e30\n.text:0000000000410e32\n.text:0000000000410e34\n.text:0000000000410e36\n.text:0000000000410e3b\n.text:0000000000410e3f\n.text:0000000000410e43\n.text:0000000000410e45\n.text:0000000000410e47\n.text:0000000000410e4b\n.text:0000000000410e4c\n.text:0000000000410e4d\n'
p664
tp665
sS'xzalloc'
p666
(S'\n__stdcall xzalloc(size_t s)\n'
p667
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p668
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x0040d950\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00402360\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p669
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 04 49 ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p670
S'.text:000000000040da40\n.text:000000000040da42\n.text:000000000040da43\n.text:000000000040da44\n.text:000000000040da47\n.text:000000000040da4c\n.text:000000000040da4f\n.text:000000000040da51\n.text:000000000040da54\n.text:000000000040da57\n.text:000000000040da5c\n.text:000000000040da5f\n.text:000000000040da63\n.text:000000000040da64\n.text:000000000040da66\n'
p671
tp672
sS'i_ring_empty'
p673
(S'\n__stdcall i_ring_empty(I_ring * ir)\n'
p674
V\u000a_Bool i_ring_empty(I_ring *ir)\u000a\u000a{\u000a  return ir->ir_empty;\u000a}\u000a\u000a
p675
S'MOV AL,byte ptr [RDI + 0x1c]\nRET\n'
p676
S'8a 47 1c\nc3\n'
p677
S'.text:0000000000410900\n.text:0000000000410903\n'
p678
tp679
sS'chdir_long'
p680
(S'\n__stdcall chdir_long(char * dir)\n'
p681
V\u000aint chdir_long(char *dir)\u000a\u000a{\u000a  char cVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  undefined *puVar5;\u000a  char *pcVar6;\u000a  cd_buf local_30 [2];\u000a  \u000a  iVar2 = chdir(dir);\u000a  if (iVar2 == 0) {\u000a    return 0;\u000a  }\u000a  piVar3 = __errno_location();\u000a  if (*piVar3 != 0x24) {\u000a    return iVar2;\u000a  }\u000a  sVar4 = strlen(dir);\u000a  cdb_init(local_30);\u000a  if (sVar4 == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 < len","lib/chdir-long.c",0x7e,"int chdir_long(char *)");\u000a  }\u000a  if (sVar4 < 0x1000) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("4096 <= len","lib/chdir-long.c",0x7f,"int chdir_long(char *)");\u000a  }\u000a  pcVar6 = dir + sVar4;\u000a  sVar4 = strspn(dir,"/");\u000a  if (sVar4 == 0) {\u000aLAB_00410f7f:\u000a    cVar1 = *dir;\u000a  }\u000a  else {\u000a    if (sVar4 != 2) {\u000a      iVar2 = cdb_advance_fd(local_30,"/");\u000a      if (iVar2 != 0) goto LAB_00411033;\u000a      dir = dir + sVar4;\u000a      goto LAB_00410f7f;\u000a    }\u000a    puVar5 = (undefined *)memchr(dir + 3,0x2f,(size_t)(pcVar6 + -(long)(dir + 3)));\u000a    if (puVar5 == (undefined *)0x0) {\u000aLAB_00411045:\u000a      *piVar3 = 0x24;\u000a      return -1;\u000a    }\u000a    *puVar5 = 0;\u000a    iVar2 = cdb_advance_fd(local_30,dir);\u000a    *puVar5 = 0x2f;\u000a    if (iVar2 != 0) goto LAB_00411033;\u000a    dir = find_non_slash(puVar5 + 1);\u000a    cVar1 = *dir;\u000a  }\u000a  if (cVar1 == '/') {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("*dir != \u005c'/\u005c'","lib/chdir-long.c",0xa2,"int chdir_long(char *)");\u000a  }\u000a  if (pcVar6 < dir) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("dir <= dir_end","lib/chdir-long.c",0xa3,"int chdir_long(char *)");\u000a  }\u000a  if (0xfff < (long)(pcVar6 + -(long)dir)) {\u000a    do {\u000a      puVar5 = (undefined *)memrchr(dir,0x2f,0x1000);\u000a      if (puVar5 == (undefined *)0x0) goto LAB_00411045;\u000a      *puVar5 = 0;\u000a      if (0xfff < (long)(puVar5 + -(long)dir)) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("slash - dir < 4096","lib/chdir-long.c",0xb3,"int chdir_long(char *)");\u000a      }\u000a      iVar2 = cdb_advance_fd(local_30,dir);\u000a      *puVar5 = 0x2f;\u000a      if (iVar2 != 0) goto LAB_00411033;\u000a      dir = find_non_slash(puVar5 + 1);\u000a    } while (0xfff < (long)(pcVar6 + -(long)dir));\u000a  }\u000a  if (((pcVar6 <= dir) || (iVar2 = cdb_advance_fd(local_30,dir), iVar2 == 0)) &&\u000a     (iVar2 = cdb_fchdir(local_30), iVar2 == 0)) {\u000a    cdb_free(local_30);\u000a    return 0;\u000a  }\u000aLAB_00411033:\u000a  iVar2 = *piVar3;\u000a  cdb_free(local_30);\u000a  *piVar3 = iVar2;\u000a  return -1;\u000a}\u000a\u000a
p682
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV RBX,RDI\nCALL 0x004022c0\nMOV EBP,EAX\nTEST EBP,EBP\nJZ 0x00410f5e\nCALL 0x00402100\nMOV R14,RAX\nCMP dword ptr [R14],0x24\nJNZ 0x00411051\nMOV RDI,RBX\nCALL 0x00402290\nMOV R15,RAX\nLEA RDI,[RSP + 0x8]\nCALL 0x004110f0\nTEST R15,R15\nJZ 0x00411087\nCMP R15,0xfff\nJBE 0x004110a0\nADD R15,RBX\nMOV ESI,0x414467\nMOV RDI,RBX\nCALL 0x004023d0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00410f7f\nCMP RBP,0x2\nJNZ 0x00410f65\nLEA RDI,[RBX + 0x3]\nMOV RDX,R15\nSUB RDX,RDI\nMOV ESI,0x2f\nCALL 0x00402400\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00411045\nMOV byte ptr [RBP],0x0\nLEA RDI,[RSP + 0x8]\nMOV RSI,RBX\nCALL 0x00411100\nMOV byte ptr [RBP],0x2f\nTEST EAX,EAX\nJNZ 0x00411033\nINC RBP\nMOV RDI,RBP\nCALL 0x00411140\nMOV RBX,RAX\nCMP byte ptr [RBX],0x2f\nJNZ 0x00410f88\nJMP 0x004110b9\nXOR EBP,EBP\nJMP 0x00411051\nLEA RDI,[RSP + 0x8]\nMOV ESI,0x414467\nCALL 0x00411100\nTEST EAX,EAX\nJNZ 0x00411033\nADD RBX,RBP\nCMP byte ptr [RBX],0x2f\nJZ 0x004110b9\nCMP RBX,R15\nJA 0x004110d2\nMOV RAX,R15\nSUB RAX,RBX\nCMP RAX,0x1000\nJL 0x0041100f\nLEA R12,[RSP + 0x8]\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV ESI,0x2f\nMOV EDX,0x1000\nMOV RDI,RBX\nCALL 0x00402650\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00411045\nMOV byte ptr [RBP],0x0\nMOV RAX,RBP\nSUB RAX,RBX\nCMP RAX,0x1000\nJGE 0x0041106e\nMOV RDI,R12\nMOV RSI,RBX\nCALL 0x00411100\nMOV byte ptr [RBP],0x2f\nTEST EAX,EAX\nJNZ 0x00411033\nINC RBP\nMOV RDI,RBP\nCALL 0x00411140\nMOV RBX,RAX\nMOV RAX,R15\nSUB RAX,RBX\nCMP RAX,0xfff\nJG 0x00410fb0\nCMP RBX,R15\nJNC 0x00411025\nLEA RDI,[RSP + 0x8]\nMOV RSI,RBX\nCALL 0x00411100\nTEST EAX,EAX\nJNZ 0x00411033\nLEA RDI,[RSP + 0x8]\nCALL 0x00411160\nTEST EAX,EAX\nJZ 0x00411060\nMOV EBX,dword ptr [R14]\nLEA RDI,[RSP + 0x8]\nCALL 0x00411170\nMOV dword ptr [R14],EBX\nJMP 0x0041104c\nMOV dword ptr [R14],0x24\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nLEA RDI,[RSP + 0x8]\nCALL 0x00411170\nXOR EBP,EBP\nJMP 0x00411051\nMOV EDI,0x4143ed\nMOV ESI,0x41439e\nMOV EDX,0xb3\nMOV ECX,0x4143af\nCALL 0x00402350\nMOV EDI,0x414396\nMOV ESI,0x41439e\nMOV EDX,0x7e\nMOV ECX,0x4143af\nCALL 0x00402350\nMOV EDI,0x4143c6\nMOV ESI,0x41439e\nMOV EDX,0x7f\nMOV ECX,0x4143af\nCALL 0x00402350\nMOV EDI,0x4143d2\nMOV ESI,0x41439e\nMOV EDX,0xa2\nMOV ECX,0x4143af\nCALL 0x00402350\nMOV EDI,0x4143de\nMOV ESI,0x41439e\nMOV EDX,0xa3\nMOV ECX,0x4143af\nCALL 0x00402350\n'
p683
S'55\n41 57\n41 56\n41 54\n53\n48 83 ec 10\n48 89 fb\ne8 1c 14 ff ff\n89 c5\n85 ed\n0f 84 b0 00 00 00\ne8 4d 12 ff ff\n49 89 c6\n41 83 3e 24\n0f 85 91 01 00 00\n48 89 df\ne8 c8 13 ff ff\n49 89 c7\n48 8d 7c 24 08\ne8 1b 02 00 00\n4d 85 ff\n0f 84 a9 01 00 00\n49 81 ff ff 0f 00 00\n0f 86 b5 01 00 00\n49 01 df\nbe 67 44 41 00\n48 89 df\ne8 d5 14 ff ff\n48 89 c5\n48 85 ed\n74 7c\n48 83 fd 02\n75 5c\n48 8d 7b 03\n4c 89 fa\n48 29 fa\nbe 2f 00 00 00\ne8 e3 14 ff ff\n48 89 c5\n48 85 ed\n0f 84 1c 01 00 00\nc6 45 00 00\n48 8d 7c 24 08\n48 89 de\ne8 c6 01 00 00\nc6 45 00 2f\n85 c0\n0f 85 ed 00 00 00\n48 ff c5\n48 89 ef\ne8 ef 01 00 00\n48 89 c3\n80 3b 2f\n75 2f\ne9 5b 01 00 00\n31 ed\ne9 ec 00 00 00\n48 8d 7c 24 08\nbe 67 44 41 00\ne8 8c 01 00 00\n85 c0\n0f 85 b7 00 00 00\n48 01 eb\n80 3b 2f\n0f 84 31 01 00 00\n4c 39 fb\n0f 87 41 01 00 00\n4c 89 f8\n48 29 d8\n48 3d 00 10 00 00\n7c 70\n4c 8d 64 24 08\n66 66 66 2e 0f 1f 84 00 00 00 00 00\nbe 2f 00 00 00\nba 00 10 00 00\n48 89 df\ne8 8e 16 ff ff\n48 89 c5\n48 85 ed\n74 7b\nc6 45 00 00\n48 89 e8\n48 29 d8\n48 3d 00 10 00 00\n0f 8d 8e 00 00 00\n4c 89 e7\n48 89 de\ne8 15 01 00 00\nc6 45 00 2f\n85 c0\n75 40\n48 ff c5\n48 89 ef\ne8 42 01 00 00\n48 89 c3\n4c 89 f8\n48 29 d8\n48 3d ff 0f 00 00\n7f a1\n4c 39 fb\n73 11\n48 8d 7c 24 08\n48 89 de\ne8 df 00 00 00\n85 c0\n75 0e\n48 8d 7c 24 08\ne8 31 01 00 00\n85 c0\n74 2d\n41 8b 1e\n48 8d 7c 24 08\ne8 30 01 00 00\n41 89 1e\neb 07\n41 c7 06 24 00 00 00\nbd ff ff ff ff\n89 e8\n48 83 c4 10\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n48 8d 7c 24 08\ne8 06 01 00 00\n31 ed\neb e3\nbf ed 43 41 00\nbe 9e 43 41 00\nba b3 00 00 00\nb9 af 43 41 00\ne8 c9 12 ff ff\nbf 96 43 41 00\nbe 9e 43 41 00\nba 7e 00 00 00\nb9 af 43 41 00\ne8 b0 12 ff ff\nbf c6 43 41 00\nbe 9e 43 41 00\nba 7f 00 00 00\nb9 af 43 41 00\ne8 97 12 ff ff\nbf d2 43 41 00\nbe 9e 43 41 00\nba a2 00 00 00\nb9 af 43 41 00\ne8 7e 12 ff ff\nbf de 43 41 00\nbe 9e 43 41 00\nba a3 00 00 00\nb9 af 43 41 00\ne8 65 12 ff ff\n'
p684
S'.text:0000000000410e90\n.text:0000000000410e91\n.text:0000000000410e93\n.text:0000000000410e95\n.text:0000000000410e97\n.text:0000000000410e98\n.text:0000000000410e9c\n.text:0000000000410e9f\n.text:0000000000410ea4\n.text:0000000000410ea6\n.text:0000000000410ea8\n.text:0000000000410eae\n.text:0000000000410eb3\n.text:0000000000410eb6\n.text:0000000000410eba\n.text:0000000000410ec0\n.text:0000000000410ec3\n.text:0000000000410ec8\n.text:0000000000410ecb\n.text:0000000000410ed0\n.text:0000000000410ed5\n.text:0000000000410ed8\n.text:0000000000410ede\n.text:0000000000410ee5\n.text:0000000000410eeb\n.text:0000000000410eee\n.text:0000000000410ef3\n.text:0000000000410ef6\n.text:0000000000410efb\n.text:0000000000410efe\n.text:0000000000410f01\n.text:0000000000410f03\n.text:0000000000410f07\n.text:0000000000410f09\n.text:0000000000410f0d\n.text:0000000000410f10\n.text:0000000000410f13\n.text:0000000000410f18\n.text:0000000000410f1d\n.text:0000000000410f20\n.text:0000000000410f23\n.text:0000000000410f29\n.text:0000000000410f2d\n.text:0000000000410f32\n.text:0000000000410f35\n.text:0000000000410f3a\n.text:0000000000410f3e\n.text:0000000000410f40\n.text:0000000000410f46\n.text:0000000000410f49\n.text:0000000000410f4c\n.text:0000000000410f51\n.text:0000000000410f54\n.text:0000000000410f57\n.text:0000000000410f59\n.text:0000000000410f5e\n.text:0000000000410f60\n.text:0000000000410f65\n.text:0000000000410f6a\n.text:0000000000410f6f\n.text:0000000000410f74\n.text:0000000000410f76\n.text:0000000000410f7c\n.text:0000000000410f7f\n.text:0000000000410f82\n.text:0000000000410f88\n.text:0000000000410f8b\n.text:0000000000410f91\n.text:0000000000410f94\n.text:0000000000410f97\n.text:0000000000410f9d\n.text:0000000000410f9f\n.text:0000000000410fa4\n.text:0000000000410fb0\n.text:0000000000410fb5\n.text:0000000000410fba\n.text:0000000000410fbd\n.text:0000000000410fc2\n.text:0000000000410fc5\n.text:0000000000410fc8\n.text:0000000000410fca\n.text:0000000000410fce\n.text:0000000000410fd1\n.text:0000000000410fd4\n.text:0000000000410fda\n.text:0000000000410fe0\n.text:0000000000410fe3\n.text:0000000000410fe6\n.text:0000000000410feb\n.text:0000000000410fef\n.text:0000000000410ff1\n.text:0000000000410ff3\n.text:0000000000410ff6\n.text:0000000000410ff9\n.text:0000000000410ffe\n.text:0000000000411001\n.text:0000000000411004\n.text:0000000000411007\n.text:000000000041100d\n.text:000000000041100f\n.text:0000000000411012\n.text:0000000000411014\n.text:0000000000411019\n.text:000000000041101c\n.text:0000000000411021\n.text:0000000000411023\n.text:0000000000411025\n.text:000000000041102a\n.text:000000000041102f\n.text:0000000000411031\n.text:0000000000411033\n.text:0000000000411036\n.text:000000000041103b\n.text:0000000000411040\n.text:0000000000411043\n.text:0000000000411045\n.text:000000000041104c\n.text:0000000000411051\n.text:0000000000411053\n.text:0000000000411057\n.text:0000000000411058\n.text:000000000041105a\n.text:000000000041105c\n.text:000000000041105e\n.text:000000000041105f\n.text:0000000000411060\n.text:0000000000411065\n.text:000000000041106a\n.text:000000000041106c\n.text:000000000041106e\n.text:0000000000411073\n.text:0000000000411078\n.text:000000000041107d\n.text:0000000000411082\n.text:0000000000411087\n.text:000000000041108c\n.text:0000000000411091\n.text:0000000000411096\n.text:000000000041109b\n.text:00000000004110a0\n.text:00000000004110a5\n.text:00000000004110aa\n.text:00000000004110af\n.text:00000000004110b4\n.text:00000000004110b9\n.text:00000000004110be\n.text:00000000004110c3\n.text:00000000004110c8\n.text:00000000004110cd\n.text:00000000004110d2\n.text:00000000004110d7\n.text:00000000004110dc\n.text:00000000004110e1\n.text:00000000004110e6\n'
p685
tp686
sS'quotearg_n_style'
p687
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p688
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p689
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x0040b8c0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x0040b690\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p690
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p691
S'.text:000000000040b880\n.text:000000000040b881\n.text:000000000040b883\n.text:000000000040b884\n.text:000000000040b888\n.text:000000000040b88b\n.text:000000000040b88d\n.text:000000000040b892\n.text:000000000040b895\n.text:000000000040b89a\n.text:000000000040b8a1\n.text:000000000040b8a3\n.text:000000000040b8a6\n.text:000000000040b8a9\n.text:000000000040b8ae\n.text:000000000040b8b2\n.text:000000000040b8b3\n.text:000000000040b8b5\n.text:000000000040b8b6\n'
p692
tp693
sS'hash_clear'
p694
(S'\n__stdcall hash_clear(Hash_table * table)\n'
p695
V\u000avoid hash_clear(Hash_table *table)\u000a\u000a{\u000a  void (*pVar1)(void *);\u000a  hash_entry *phVar2;\u000a  hash_entry *phVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar4 = table->bucket;\u000a  if (phVar4 < table->bucket_limit) {\u000a    do {\u000a      if (phVar4->data != (void *)0x0) {\u000a        pVar1 = table->data_freer;\u000a        phVar3 = phVar4->next;\u000a        while (phVar3 != (hash_entry *)0x0) {\u000a          if (pVar1 != (void (*)(void *))0x0) {\u000a            (*pVar1)(phVar3->data);\u000a          }\u000a          phVar3->data = (void *)0x0;\u000a          phVar2 = phVar3->next;\u000a          phVar3->next = table->free_entry_list;\u000a          table->free_entry_list = phVar3;\u000a          pVar1 = table->data_freer;\u000a          phVar3 = phVar2;\u000a        }\u000a        if (pVar1 != (void (*)(void *))0x0) {\u000a          (*pVar1)(phVar4->data);\u000a        }\u000a        *(undefined4 *)&phVar4->data = 0;\u000a        *(undefined4 *)((long)&phVar4->data + 4) = 0;\u000a        *(undefined4 *)&phVar4->next = 0;\u000a        *(undefined4 *)((long)&phVar4->next + 4) = 0;\u000a      }\u000a      phVar4 = phVar4 + 1;\u000a    } while (phVar4 < table->bucket_limit);\u000a  }\u000a  *(undefined4 *)&table->n_buckets_used = 0;\u000a  *(undefined4 *)((long)&table->n_buckets_used + 4) = 0;\u000a  *(undefined4 *)&table->n_entries = 0;\u000a  *(undefined4 *)((long)&table->n_entries + 4) = 0;\u000a  return;\u000a}\u000a\u000a
p696
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x00409c2a\nJMP 0x00409c85\nTEST CL,CL\nJZ 0x00409c19\nMOV RDI,qword ptr [R14]\nCALL RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R14],XMM0\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x00409c85\nCMP qword ptr [R14],0x0\nJZ 0x00409c20\nMOV RBX,qword ptr [R14 + 0x8]\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nSETNZ CL\nTEST RBX,RBX\nJZ 0x00409c10\nNOP dword ptr CS:[RAX + RAX*0x1]\nTEST CL,0x1\nJZ 0x00409c5a\nMOV RDI,qword ptr [RBX]\nCALL RAX\nMOV qword ptr [RBX],0x0\nMOV RDX,qword ptr [RBX + 0x8]\nMOV RAX,qword ptr [R15 + 0x48]\nMOV qword ptr [RBX + 0x8],RAX\nMOV qword ptr [R15 + 0x48],RBX\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nSETNZ CL\nTEST RDX,RDX\nMOV RBX,RDX\nJNZ 0x00409c50\nJMP 0x00409c10\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R15 + 0x18],XMM0\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p697
S'41 57\n41 56\n53\n49 89 ff\n4d 8b 37\n4d 3b 77 08\n72 29\ne9 7f 00 00 00\n84 c9\n74 05\n49 8b 3e\nff d0\n0f 57 c0\n41 0f 11 06\n49 83 c6 10\n4d 3b 77 08\n73 5b\n49 83 3e 00\n74 f0\n49 8b 5e 08\n49 8b 47 40\n48 85 c0\n0f 95 c1\n48 85 db\n74 cd\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\nf6 c1 01\n74 05\n48 8b 3b\nff d0\n48 c7 03 00 00 00 00\n48 8b 53 08\n49 8b 47 48\n48 89 43 08\n49 89 5f 48\n49 8b 47 40\n48 85 c0\n0f 95 c1\n48 85 d2\n48 89 d3\n75 cd\neb 8b\n0f 57 c0\n41 0f 11 47 18\n5b\n41 5e\n41 5f\nc3\n'
p698
S'.text:0000000000409bf0\n.text:0000000000409bf2\n.text:0000000000409bf4\n.text:0000000000409bf5\n.text:0000000000409bf8\n.text:0000000000409bfb\n.text:0000000000409bff\n.text:0000000000409c01\n.text:0000000000409c10\n.text:0000000000409c12\n.text:0000000000409c14\n.text:0000000000409c17\n.text:0000000000409c19\n.text:0000000000409c1c\n.text:0000000000409c20\n.text:0000000000409c24\n.text:0000000000409c28\n.text:0000000000409c2a\n.text:0000000000409c2e\n.text:0000000000409c30\n.text:0000000000409c34\n.text:0000000000409c38\n.text:0000000000409c3b\n.text:0000000000409c3e\n.text:0000000000409c41\n.text:0000000000409c43\n.text:0000000000409c50\n.text:0000000000409c53\n.text:0000000000409c55\n.text:0000000000409c58\n.text:0000000000409c5a\n.text:0000000000409c61\n.text:0000000000409c65\n.text:0000000000409c69\n.text:0000000000409c6d\n.text:0000000000409c71\n.text:0000000000409c75\n.text:0000000000409c78\n.text:0000000000409c7b\n.text:0000000000409c7e\n.text:0000000000409c81\n.text:0000000000409c83\n.text:0000000000409c85\n.text:0000000000409c88\n.text:0000000000409c8d\n.text:0000000000409c8e\n.text:0000000000409c90\n.text:0000000000409c92\n'
p699
tp700
sS'setfilecon'
p701
(S'\n__stdcall setfilecon(char * file, security_context_t con)\n'
p702
V\u000aint setfilecon(char *file,security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p703
S'PUSH RAX\nCALL 0x00402100\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p704
S'50\ne8 9a 5b ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p705
S'.text:000000000040c560\n.text:000000000040c561\n.text:000000000040c566\n.text:000000000040c56c\n.text:000000000040c571\n.text:000000000040c572\n'
p706
tp707
sS'dir_len'
p708
(S'\n__stdcall dir_len(char * file)\n'
p709
V\u000asize_t dir_len(char *file)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  char *pcVar3;\u000a  char *pcVar4;\u000a  \u000a  cVar2 = *file;\u000a  pcVar3 = last_component(file);\u000a  pcVar3 = pcVar3 + -(long)file;\u000a  do {\u000a    pcVar4 = pcVar3;\u000a    if (pcVar3 <= (char *)(ulong)(cVar2 == '/')) {\u000a      return (size_t)pcVar4;\u000a    }\u000a    pcVar1 = pcVar3 + (long)(file + -1);\u000a    pcVar3 = pcVar3 + -1;\u000a  } while (*pcVar1 == '/');\u000a  return (size_t)pcVar4;\u000a}\u000a\u000a
p710
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nXOR R14D,R14D\nCMP byte ptr [RBX],0x2f\nSETZ R14B\nCALL 0x00409000\nMOV RCX,RAX\nSUB RCX,RBX\nNOP dword ptr [RAX]\nMOV RAX,RCX\nCMP R14,RAX\nJNC 0x00408f93\nLEA RCX,[RAX + -0x1]\nCMP byte ptr [RBX + RAX*0x1 + -0x1],0x2f\nJZ 0x00408f80\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p711
S'41 56\n53\n50\n48 89 fb\n45 31 f6\n80 3b 2f\n41 0f 94 c6\ne8 8a 00 00 00\n48 89 c1\n48 29 d9\n0f 1f 40 00\n48 89 c8\n49 39 c6\n73 0b\n48 8d 48 ff\n80 7c 03 ff 2f\n74 ed\n48 83 c4 08\n5b\n41 5e\nc3\n'
p712
S'.text:0000000000408f60\n.text:0000000000408f62\n.text:0000000000408f63\n.text:0000000000408f64\n.text:0000000000408f67\n.text:0000000000408f6a\n.text:0000000000408f6d\n.text:0000000000408f71\n.text:0000000000408f76\n.text:0000000000408f79\n.text:0000000000408f7c\n.text:0000000000408f80\n.text:0000000000408f83\n.text:0000000000408f86\n.text:0000000000408f88\n.text:0000000000408f8c\n.text:0000000000408f91\n.text:0000000000408f93\n.text:0000000000408f97\n.text:0000000000408f98\n.text:0000000000408f9a\n'
p713
tp714
sS'find_backup_file_name'
p715
(S'\n__stdcall find_backup_file_name(char * file)\n'
p716
V\u000achar * find_backup_file_name(char *file)\u000a\u000a{\u000a  size_t n;\u000a  numbered_backup_result nVar1;\u000a  size_t filelen;\u000a  size_t sVar2;\u000a  ulong uVar3;\u000a  ulong __n;\u000a  int in_ESI;\u000a  char *local_38;\u000a  \u000a  filelen = strlen(file);\u000a  sVar2 = strlen(simple_backup_suffix);\u000a  __n = sVar2 + 1;\u000a  uVar3 = 9;\u000a  if (9 < __n) {\u000a    uVar3 = __n;\u000a  }\u000a  n = filelen + 1 + uVar3;\u000a  local_38 = (char *)xmalloc(n);\u000a  memcpy(local_38,file,filelen + 1);\u000a  if (in_ESI != 1) {\u000a    nVar1 = numbered_backup(&local_38,n,filelen);\u000a    if (nVar1 == BACKUP_IS_SAME_LENGTH) {\u000a      return local_38;\u000a    }\u000a    if ((nVar1 == BACKUP_IS_LONGER) || ((nVar1 == BACKUP_IS_NEW && (in_ESI != 2))))\u000a    goto LAB_00408899;\u000a  }\u000a  memcpy(local_38 + filelen,simple_backup_suffix,__n);\u000aLAB_00408899:\u000a  check_extension(local_38,filelen);\u000a  return local_38;\u000a}\u000a\u000a
p717
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,ESI\nMOV R13,RDI\nCALL 0x00402290\nMOV R15,RAX\nMOV RDI,qword ptr [0x006193b0]\nCALL 0x00402290\nMOV RBP,RAX\nINC RBP\nCMP RBP,0x9\nMOV EAX,0x9\nCMOVA RAX,RBP\nLEA R12,[R15 + RAX*0x1 + 0x1]\nLEA RBX,[R15 + 0x1]\nMOV RDI,R12\nCALL 0x0040d950\nMOV qword ptr [RSP],RAX\nMOV RDI,RAX\nMOV RSI,R13\nMOV RDX,RBX\nCALL 0x004024d0\nCMP R14D,0x1\nJZ 0x00408883\nMOV RDI,RSP\nMOV RSI,R12\nMOV RDX,R15\nCALL 0x004088c0\nTEST EAX,EAX\nJZ 0x004088a5\nCMP EAX,0x1\nJZ 0x00408899\nCMP EAX,0x2\nJNZ 0x00408883\nCMP R14D,0x2\nJNZ 0x00408899\nMOV RDI,qword ptr [RSP]\nADD RDI,R15\nMOV RSI,qword ptr [0x006193b0]\nMOV RDX,RBP\nCALL 0x004024d0\nMOV RDI,qword ptr [RSP]\nMOV RSI,R15\nCALL 0x00408b80\nMOV RAX,qword ptr [RSP]\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p718
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n41 89 f6\n49 89 fd\ne8 7a 9a ff ff\n49 89 c7\n48 8b 3d 90 0b 21 00\ne8 6b 9a ff ff\n48 89 c5\n48 ff c5\n48 83 fd 09\nb8 09 00 00 00\n48 0f 47 c5\n4d 8d 64 07 01\n49 8d 5f 01\n4c 89 e7\ne8 07 51 00 00\n48 89 04 24\n48 89 c7\n4c 89 ee\n48 89 da\ne8 75 9c ff ff\n41 83 fe 01\n74 22\n48 89 e7\n4c 89 e6\n4c 89 fa\ne8 51 00 00 00\n85 c0\n74 32\n83 f8 01\n74 21\n83 f8 02\n75 06\n41 83 fe 02\n75 16\n48 8b 3c 24\n4c 01 ff\n48 8b 35 1f 0b 21 00\n48 89 ea\ne8 37 9c ff ff\n48 8b 3c 24\n4c 89 fe\ne8 db 02 00 00\n48 8b 04 24\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p719
S'.text:0000000000408800\n.text:0000000000408801\n.text:0000000000408803\n.text:0000000000408805\n.text:0000000000408807\n.text:0000000000408809\n.text:000000000040880a\n.text:000000000040880b\n.text:000000000040880e\n.text:0000000000408811\n.text:0000000000408816\n.text:0000000000408819\n.text:0000000000408820\n.text:0000000000408825\n.text:0000000000408828\n.text:000000000040882b\n.text:000000000040882f\n.text:0000000000408834\n.text:0000000000408838\n.text:000000000040883d\n.text:0000000000408841\n.text:0000000000408844\n.text:0000000000408849\n.text:000000000040884d\n.text:0000000000408850\n.text:0000000000408853\n.text:0000000000408856\n.text:000000000040885b\n.text:000000000040885f\n.text:0000000000408861\n.text:0000000000408864\n.text:0000000000408867\n.text:000000000040886a\n.text:000000000040886f\n.text:0000000000408871\n.text:0000000000408873\n.text:0000000000408876\n.text:0000000000408878\n.text:000000000040887b\n.text:000000000040887d\n.text:0000000000408881\n.text:0000000000408883\n.text:0000000000408887\n.text:000000000040888a\n.text:0000000000408891\n.text:0000000000408894\n.text:0000000000408899\n.text:000000000040889d\n.text:00000000004088a0\n.text:00000000004088a5\n.text:00000000004088a9\n.text:00000000004088ad\n.text:00000000004088ae\n.text:00000000004088b0\n.text:00000000004088b2\n.text:00000000004088b4\n.text:00000000004088b6\n.text:00000000004088b7\n'
p720
tp721
sS'forget_all'
p722
(S'\n__stdcall forget_all()\n'
p723
V\u000avoid forget_all(void)\u000a\u000a{\u000a  hash_free(src_to_dest);\u000a  return;\u000a}\u000a\u000a
p724
S'MOV RDI,qword ptr [0x006198b0]\nJMP 0x00409ca0\n'
p725
S'48 8b 3d 39 15 21 00\ne9 24 19 00 00\n'
p726
S'.text:0000000000408370\n.text:0000000000408377\n'
p727
tp728
sS'quote_n'
p729
(S'\n__stdcall quote_n(char * arg)\n'
p730
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p731
S'MOV RDX,-0x1\nJMP 0x0040bb50\n'
p732
S'48 c7 c2 ff ff ff ff\neb d7\n'
p733
S'.text:000000000040bb70\n.text:000000000040bb77\n'
p734
tp735
sS'buffer_lcm'
p736
(S'\n__stdcall buffer_lcm(size_t a, size_t b, size_t lcm_max)\n'
p737
V\u000asize_t buffer_lcm(size_t a,size_t b,size_t lcm_max)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  ulong uVar3;\u000a  \u000a  if (a == 0) {\u000a    a = 0x2000;\u000a    if (b != 0) {\u000a      a = b;\u000a    }\u000a  }\u000a  else {\u000a    uVar1 = a;\u000a    uVar3 = b;\u000a    if (b != 0) {\u000a      do {\u000a        uVar2 = uVar3;\u000a        uVar3 = uVar1 % uVar2;\u000a        uVar1 = uVar2;\u000a      } while (uVar3 != 0);\u000a      uVar1 = (a / uVar2) * b;\u000a      if ((uVar1 < lcm_max || uVar1 - lcm_max == 0) && (uVar1 / b == a / uVar2)) {\u000a        return uVar1;\u000a      }\u000a    }\u000a  }\u000a  if (a <= lcm_max) {\u000a    lcm_max = a;\u000a  }\u000a  return lcm_max;\u000a}\u000a\u000a
p738
S'MOV R8,RDX\nTEST RDI,RDI\nJZ 0x00408ce6\nTEST RSI,RSI\nJZ 0x00408cf2\nMOV RAX,RDI\nMOV RDX,RSI\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RCX,RDX\nXOR EDX,EDX\nDIV RCX\nTEST RDX,RDX\nMOV RAX,RCX\nJNZ 0x00408cb0\nXOR EDX,EDX\nMOV RAX,RDI\nDIV RCX\nMOV R9,RAX\nMOV RCX,R9\nIMUL RCX,RSI\nCMP RCX,R8\nJA 0x00408cf2\nXOR EDX,EDX\nMOV RAX,RCX\nDIV RSI\nCMP RAX,R9\nJNZ 0x00408cf2\nJMP 0x00408cfc\nTEST RSI,RSI\nMOV EDI,0x2000\nCMOVNZ RDI,RSI\nCMP RDI,R8\nCMOVBE R8,RDI\nMOV RCX,R8\nMOV RAX,RCX\nRET\n'
p739
S'49 89 d0\n48 85 ff\n74 4e\n48 85 f6\n74 55\n48 89 f8\n48 89 f2\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 d1\n31 d2\n48 f7 f1\n48 85 d2\n48 89 c8\n75 f0\n31 d2\n48 89 f8\n48 f7 f1\n49 89 c1\n4c 89 c9\n48 0f af ce\n4c 39 c1\n77 1b\n31 d2\n48 89 c8\n48 f7 f6\n4c 39 c8\n75 0e\neb 16\n48 85 f6\nbf 00 20 00 00\n48 0f 45 fe\n4c 39 c7\n4c 0f 46 c7\n4c 89 c1\n48 89 c8\nc3\n'
p740
S'.text:0000000000408c90\n.text:0000000000408c93\n.text:0000000000408c96\n.text:0000000000408c98\n.text:0000000000408c9b\n.text:0000000000408c9d\n.text:0000000000408ca0\n.text:0000000000408ca3\n.text:0000000000408cb0\n.text:0000000000408cb3\n.text:0000000000408cb5\n.text:0000000000408cb8\n.text:0000000000408cbb\n.text:0000000000408cbe\n.text:0000000000408cc0\n.text:0000000000408cc2\n.text:0000000000408cc5\n.text:0000000000408cc8\n.text:0000000000408ccb\n.text:0000000000408cce\n.text:0000000000408cd2\n.text:0000000000408cd5\n.text:0000000000408cd7\n.text:0000000000408cd9\n.text:0000000000408cdc\n.text:0000000000408cdf\n.text:0000000000408ce2\n.text:0000000000408ce4\n.text:0000000000408ce6\n.text:0000000000408ce9\n.text:0000000000408cee\n.text:0000000000408cf2\n.text:0000000000408cf5\n.text:0000000000408cf9\n.text:0000000000408cfc\n.text:0000000000408cff\n'
p741
tp742
sS'close_stdout_set_file_name'
p743
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p744
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p745
S'MOV qword ptr [0x006198c0],RDI\nRET\n'
p746
S'48 89 3d d9 0a 21 00\nc3\n'
p747
S'.text:0000000000408de0\n.text:0000000000408de7\n'
p748
tp749
sS'is_empty_dir'
p750
(S'\n__stdcall is_empty_dir(char * dir)\n'
p751
V\u000a_Bool is_empty_dir(char *dir)\u000a\u000a{\u000a  int __fd;\u000a  DIR *__dirp;\u000a  int *piVar1;\u000a  dirent *pdVar2;\u000a  char *__file;\u000a  bool bVar3;\u000a  \u000a  bVar3 = false;\u000a  __fd = openat((int)dir,__file,0x30900);\u000a  if (-1 < __fd) {\u000a    __dirp = fdopendir(__fd);\u000a    if (__dirp == (DIR *)0x0) {\u000a      close(__fd);\u000a      bVar3 = false;\u000a    }\u000a    else {\u000a      piVar1 = __errno_location();\u000a      *piVar1 = 0;\u000a      pdVar2 = readdir_ignoring_dot_and_dotdot((DIR *)__dirp);\u000a      __fd = *piVar1;\u000a      closedir(__dirp);\u000a      if (pdVar2 == (dirent *)0x0) {\u000a        bVar3 = __fd == 0;\u000a      }\u000a      else {\u000a        bVar3 = false;\u000a      }\u000a    }\u000a  }\u000a  return (_Bool)bVar3;\u000a}\u000a\u000a
p752
S'PUSH RBP\nPUSH R14\nPUSH RBX\nXOR EBX,EBX\nMOV EDX,0x30900\nXOR EAX,EAX\nCALL 0x004022b0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x004039a5\nMOV EDI,EBP\nCALL 0x004026b0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00403995\nCALL 0x00402100\nMOV RBP,RAX\nMOV dword ptr [RBP],0x0\nMOV RDI,RBX\nCALL 0x00403e90\nMOV R14,RAX\nMOV EBP,dword ptr [RBP]\nMOV RDI,RBX\nCALL 0x004023e0\nTEST R14,R14\nJZ 0x004039a0\nXOR EBX,EBX\nJMP 0x004039a5\nMOV EDI,EBP\nCALL 0x004023c0\nXOR EBX,EBX\nJMP 0x004039a5\nTEST EBP,EBP\nSETZ BL\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p753
S'55\n41 56\n53\n31 db\nba 00 09 03 00\n31 c0\ne8 5e e9 ff ff\n89 c5\n85 ed\n78 4d\n89 ef\ne8 51 ed ff ff\n48 89 c3\n48 85 db\n74 2e\ne8 94 e7 ff ff\n48 89 c5\nc7 45 00 00 00 00 00\n48 89 df\ne8 12 05 00 00\n49 89 c6\n8b 6d 00\n48 89 df\ne8 54 ea ff ff\n4d 85 f6\n74 0f\n31 db\neb 10\n89 ef\ne8 24 ea ff ff\n31 db\neb 05\n85 ed\n0f 94 c3\n89 d8\n5b\n41 5e\n5d\nc3\n'
p754
S'.text:0000000000403940\n.text:0000000000403941\n.text:0000000000403943\n.text:0000000000403944\n.text:0000000000403946\n.text:000000000040394b\n.text:000000000040394d\n.text:0000000000403952\n.text:0000000000403954\n.text:0000000000403956\n.text:0000000000403958\n.text:000000000040395a\n.text:000000000040395f\n.text:0000000000403962\n.text:0000000000403965\n.text:0000000000403967\n.text:000000000040396c\n.text:000000000040396f\n.text:0000000000403976\n.text:0000000000403979\n.text:000000000040397e\n.text:0000000000403981\n.text:0000000000403984\n.text:0000000000403987\n.text:000000000040398c\n.text:000000000040398f\n.text:0000000000403991\n.text:0000000000403993\n.text:0000000000403995\n.text:0000000000403997\n.text:000000000040399c\n.text:000000000040399e\n.text:00000000004039a0\n.text:00000000004039a2\n.text:00000000004039a5\n.text:00000000004039a7\n.text:00000000004039a8\n.text:00000000004039aa\n.text:00000000004039ab\n'
p755
tp756
sS'prompt'
p757
(S'\n__stdcall prompt(FTS * fts, FTSENT * ent, rm_options * x, Ternary * is_empty_p)\n'
p758
V\u000aRM_status prompt(FTS *fts,FTSENT *ent,rm_options *x,Ternary *is_empty_p)\u000a\u000a{\u000a  uint uVar1;\u000a  stat *buf;\u000a  _Bool _Var2;\u000a  byte bVar3;\u000a  int iVar4;\u000a  int iVar5;\u000a  uint *puVar6;\u000a  char *pcVar7;\u000a  undefined8 uVar8;\u000a  undefined8 uVar9;\u000a  char *pcVar10;\u000a  uint uVar11;\u000a  char *pcVar12;\u000a  int in_R8D;\u000a  int *in_R9;\u000a  RM_status RVar13;\u000a  int iVar14;\u000a  char *full_name;\u000a  undefined local_c0 [24];\u000a  ushort local_a8;\u000a  \u000a  uVar1 = fts->fts_cwd_fd;\u000a  buf = (stat *)ent->fts_accpath;\u000a  if (in_R9 != (int *)0x0) {\u000a    *in_R9 = 2;\u000a  }\u000a  cache_stat_init();\u000a  if (in_R9 == (int *)0x0) {\u000a    _Var2 = false;\u000a  }\u000a  else {\u000a    _Var2 = is_empty_dir((char *)(ulong)uVar1);\u000a    *in_R9 = (uint)_Var2 + 3;\u000a  }\u000a  if (ent->fts_number != 0) {\u000a    return RM_USER_DECLINED;\u000a  }\u000a  if (is_empty_p[1] == 5) {\u000aLAB_00403ad0:\u000a    RVar13 = RM_OK;\u000a  }\u000a  else {\u000a    uVar11 = 0;\u000a    if ((*(char *)is_empty_p == 0) && ((is_empty_p[1] == T_NO || (*(char *)(is_empty_p + 6) != 0))))\u000a    {\u000a      iVar4 = write_protected_non_symlink((char *)(ulong)uVar1,buf);\u000a      puVar6 = (uint *)__errno_location();\u000a      uVar11 = *puVar6;\u000a      if (iVar4 == 0) goto LAB_00403ac3;\u000a    }\u000a    else {\u000aLAB_00403ac3:\u000a      iVar4 = 0;\u000a      if (is_empty_p[1] != T_NO) goto LAB_00403ad0;\u000a    }\u000a    iVar14 = ((uint)x & 0xff) << 2;\u000a    if ((iVar4 < 0) || ((char)x == 1)) {\u000a      if (-1 < iVar4) goto LAB_00403b55;\u000a    }\u000a    else {\u000a      iVar5 = cache_fstatat();\u000a      if (iVar5 == 0) {\u000a        if ((local_a8 & 0xf000) == 0xa000) {\u000a          iVar14 = 10;\u000a        }\u000a        else {\u000a          if ((local_a8 & 0xf000) == 0x4000) {\u000a            iVar14 = 4;\u000a          }\u000a        }\u000aLAB_00403b55:\u000a        bVar3 = (byte)iVar14 & 0xf;\u000a        if (bVar3 == 4) {\u000a          if ((*(char *)((long)is_empty_p + 9) == 0) &&\u000a             ((uVar11 = 0x15, *(char *)((long)is_empty_p + 10) == 0 || (_Var2 != true))))\u000a          goto LAB_00403c34;\u000a        }\u000a        else {\u000a          if ((bVar3 == 10) && (is_empty_p[1] != T_NO)) goto LAB_00403ad0;\u000a        }\u000a        pcVar7 = quotearg_style((char *)0x4);\u000a        uVar8 = stderr;\u000a        if ((_Var2 | (in_R8D != 2 || iVar14 != 4)) == 0) {\u000a          pcVar12 = "%s: descend into directory %s? ";\u000a          if (iVar4 != 0) {\u000a            pcVar12 = "%s: descend into write-protected directory %s? ";\u000a          }\u000a          uVar9 = dcgettext(0,pcVar12,5);\u000a          __fprintf_chk(uVar8,1,uVar9,program_name,pcVar7);\u000a        }\u000a        else {\u000a          iVar14 = cache_fstatat();\u000a          uVar8 = stderr;\u000a          if (iVar14 != 0) {\u000a            puVar6 = (uint *)__errno_location();\u000a            uVar1 = *puVar6;\u000a            uVar8 = dcgettext(0,"cannot remove %s",5);\u000a            error(0,(ulong)uVar1,uVar8,pcVar7);\u000a            return RM_ERROR;\u000a          }\u000a          pcVar12 = "%s: remove %s %s? ";\u000a          if (iVar4 != 0) {\u000a            pcVar12 = "%s: remove write-protected %s %s? ";\u000a          }\u000a          uVar9 = dcgettext(0,pcVar12,5);\u000a          pcVar12 = program_name;\u000a          pcVar10 = file_type((stat *)local_c0);\u000a          __fprintf_chk(uVar8,1,uVar9,pcVar12,pcVar10,pcVar7);\u000a        }\u000a        _Var2 = yesno();\u000a        if (_Var2 == false) {\u000a          return RM_USER_DECLINED;\u000a        }\u000a        goto LAB_00403ad0;\u000a      }\u000a      puVar6 = (uint *)__errno_location();\u000a      uVar11 = *puVar6;\u000a    }\u000aLAB_00403c34:\u000a    RVar13 = RM_ERROR;\u000a    pcVar7 = quotearg_style((char *)0x4);\u000a    uVar8 = dcgettext(0,"cannot remove %s",5);\u000a    error(0,(ulong)uVar11,uVar8,pcVar7);\u000a  }\u000a  return RVar13;\u000a}\u000a\u000a
p759
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xb8\nMOV R13,R9\nMOV dword ptr [RSP + 0x1c],R8D\nMOV R12,RCX\nMOV R15D,EDX\nMOV R14,RSI\nMOV EBX,dword ptr [RDI + 0x2c]\nMOV RBP,qword ptr [R14 + 0x30]\nMOV RAX,qword ptr [R14 + 0x38]\nMOV qword ptr [RSP + 0x20],RAX\nTEST R13,R13\nJZ 0x00403a6f\nMOV dword ptr [R13],0x2\nLEA RDI,[RSP + 0x28]\nCALL 0x00403ed0\nTEST R13,R13\nMOV qword ptr [RSP + 0x10],RBP\nMOV dword ptr [RSP + 0xc],EBX\nJZ 0x00403aa1\nMOV EDI,EBX\nMOV RSI,RBP\nCALL 0x00403940\nMOV BPL,AL\nMOVZX EAX,BPL\nADD EAX,0x3\nMOV dword ptr [R13],EAX\nJMP 0x00403aa3\nXOR EBP,EBP\nMOV R13D,0x3\nCMP qword ptr [R14 + 0x20],0x0\nJNZ 0x00403ad6\nMOV EAX,dword ptr [R12 + 0x4]\nCMP EAX,0x5\nJZ 0x00403ad0\nXOR ECX,ECX\nCMP byte ptr [R12],0x0\nJZ 0x00403aeb\nCMP dword ptr [R12 + 0x4],0x3\nMOV EBX,0x0\nJZ 0x00403b18\nMOV R13D,0x2\nMOV EAX,R13D\nADD RSP,0xb8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP EAX,0x3\nJZ 0x00403af8\nCMP byte ptr [R12 + 0x18],0x0\nJZ 0x00403ac3\nLEA RDX,[RSP + 0x28]\nMOV EDI,dword ptr [RSP + 0xc]\nMOV RSI,qword ptr [RSP + 0x10]\nCALL 0x00403ee0\nMOV EBX,EAX\nCALL 0x00402100\nMOV ECX,dword ptr [RAX]\nTEST EBX,EBX\nJZ 0x00403ac3\nMOVZX R14D,R15B\nSHL R14D,0x2\nTEST EBX,EBX\nJS 0x00403b4d\nXOR R15B,0x1\nJZ 0x00403b4d\nLEA RDX,[RSP + 0x28]\nMOV EDI,dword ptr [RSP + 0xc]\nMOV RSI,qword ptr [RSP + 0x10]\nCALL 0x00403f60\nTEST EAX,EAX\nJZ 0x00403b70\nCALL 0x00402100\nMOV ECX,dword ptr [RAX]\nJMP 0x00403c34\nTEST EBX,EBX\nJS 0x00403c34\nMOV EAX,R14D\nAND AL,0xf\nCMP AL,0x4\nJZ 0x00403b97\nCMP AL,0xa\nJNZ 0x00403bb6\nCMP dword ptr [R12 + 0x4],0x3\nJNZ 0x00403ad0\nJMP 0x00403bb6\nMOVZX EAX,word ptr [RSP + 0x40]\nAND EAX,0xf000\nCMP EAX,0xa000\nJZ 0x00403d20\nMOVZX EAX,AX\nCMP EAX,0x4000\nJNZ 0x00403b55\nMOV R14D,0x4\nJMP 0x00403b55\nCMP byte ptr [R12 + 0x9],0x0\nJNZ 0x00403bb6\nCMP byte ptr [R12 + 0xa],0x0\nMOV ECX,0x15\nJZ 0x00403c34\nMOV EAX,EBP\nXOR AL,0x1\nJNZ 0x00403c34\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x20]\nCALL 0x0040b960\nMOV R15,RAX\nCMP R14D,0x4\nSETNZ AL\nCMP dword ptr [RSP + 0x1c],0x2\nSETNZ CL\nOR CL,AL\nOR BPL,CL\nJZ 0x00403c78\nLEA RDX,[RSP + 0x28]\nMOV EDI,dword ptr [RSP + 0xc]\nMOV RSI,qword ptr [RSP + 0x10]\nCALL 0x00403f60\nTEST EAX,EAX\nJZ 0x00403cb9\nCALL 0x00402100\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x41249b\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nMOV RCX,R15\nCALL 0x00402640\nMOV R13D,0x4\nJMP 0x00403ad6\nMOV R13D,0x4\nMOV EDI,0x4\nMOV EBP,ECX\nMOV RSI,qword ptr [RSP + 0x20]\nCALL 0x0040b960\nMOV RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x41249b\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nMOV RCX,RBX\nCALL 0x00402640\nJMP 0x00403ad6\nMOV RBP,qword ptr [0x00619460]\nTEST EBX,EBX\nMOV EAX,0x4126c5\nMOV ESI,0x4126f5\nCMOVNZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDX,RAX\nMOV RCX,qword ptr [0x006198d0]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBP\nMOV R8,R15\nCALL 0x00402740\nJMP 0x00403d0e\nMOV R14,qword ptr [0x00619460]\nTEST EBX,EBX\nMOV EAX,0x412715\nMOV ESI,0x412738\nCMOVNZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV R12,qword ptr [0x006198d0]\nLEA RDI,[RSP + 0x28]\nCALL 0x00409290\nMOV RBP,RAX\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nMOV RDX,RBX\nMOV RCX,R12\nMOV R8,RBP\nMOV R9,R15\nCALL 0x00402740\nCALL 0x0040db70\nTEST AL,AL\nJNZ 0x00403ad0\nJMP 0x00403ad6\nMOV R14D,0xa\nJMP 0x00403b55\n'
p760
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec b8 00 00 00\n4d 89 cd\n44 89 44 24 1c\n49 89 cc\n41 89 d7\n49 89 f6\n8b 5f 2c\n49 8b 6e 30\n49 8b 46 38\n48 89 44 24 20\n4d 85 ed\n74 08\n41 c7 45 00 02 00 00 00\n48 8d 7c 24 28\ne8 57 04 00 00\n4d 85 ed\n48 89 6c 24 10\n89 5c 24 0c\n74 1a\n89 df\n48 89 ee\ne8 af fe ff ff\n40 88 c5\n40 0f b6 c5\n83 c0 03\n41 89 45 00\neb 02\n31 ed\n41 bd 03 00 00 00\n49 83 7e 20 00\n75 26\n41 8b 44 24 04\n83 f8 05\n74 16\n31 c9\n41 80 3c 24 00\n74 28\n41 83 7c 24 04 03\nbb 00 00 00 00\n74 48\n41 bd 02 00 00 00\n44 89 e8\n48 81 c4 b8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n83 f8 03\n74 08\n41 80 7c 24 18 00\n74 cb\n48 8d 54 24 28\n8b 7c 24 0c\n48 8b 74 24 10\ne8 d5 03 00 00\n89 c3\ne8 ee e5 ff ff\n8b 08\n85 db\n74 ab\n45 0f b6 f7\n41 c1 e6 02\n85 db\n78 29\n41 80 f7 01\n74 23\n48 8d 54 24 28\n8b 7c 24 0c\n48 8b 74 24 10\ne8 23 04 00 00\n85 c0\n74 2f\ne8 ba e5 ff ff\n8b 08\ne9 e7 00 00 00\n85 db\n0f 88 df 00 00 00\n44 89 f0\n24 0f\n3c 04\n74 39\n3c 0a\n75 54\n41 83 7c 24 04 03\n0f 85 62 ff ff ff\neb 46\n0f b7 44 24 40\n25 00 f0 00 00\n3d 00 a0 00 00\n0f 84 9b 01 00 00\n0f b7 c0\n3d 00 40 00 00\n75 c6\n41 be 04 00 00 00\neb be\n41 80 7c 24 09 00\n75 17\n41 80 7c 24 0a 00\nb9 15 00 00 00\n0f 84 84 00 00 00\n89 e8\n34 01\n75 7e\nbf 04 00 00 00\n48 8b 74 24 20\ne8 9b 7d 00 00\n49 89 c7\n41 83 fe 04\n0f 95 c0\n83 7c 24 1c 02\n0f 95 c1\n08 c1\n40 08 cd\n0f 84 96 00 00 00\n48 8d 54 24 28\n8b 7c 24 0c\n48 8b 74 24 10\ne8 6b 03 00 00\n85 c0\n0f 84 bc 00 00 00\ne8 fe e4 ff ff\n8b 28\n31 ff\nbe 9b 24 41 00\nba 05 00 00 00\ne8 5b e6 ff ff\n48 89 c1\n31 ff\n31 c0\n89 ee\n48 89 ca\n4c 89 f9\ne8 17 ea ff ff\n41 bd 04 00 00 00\ne9 a2 fe ff ff\n41 bd 04 00 00 00\nbf 04 00 00 00\n89 cd\n48 8b 74 24 20\ne8 15 7d 00 00\n48 89 c3\n31 ff\nbe 9b 24 41 00\nba 05 00 00 00\ne8 11 e6 ff ff\n48 89 c1\n31 ff\n31 c0\n89 ee\n48 89 ca\n48 89 d9\ne8 cd e9 ff ff\ne9 5e fe ff ff\n48 8b 2d e1 57 21 00\n85 db\nb8 c5 26 41 00\nbe f5 26 41 00\n48 0f 45 f0\n31 ff\nba 05 00 00 00\ne8 d5 e5 ff ff\n48 89 c2\n48 8b 0d 2b 5c 21 00\nbe 01 00 00 00\n31 c0\n48 89 ef\n4d 89 f8\ne8 89 ea ff ff\neb 55\n4c 8b 35 a0 57 21 00\n85 db\nb8 15 27 41 00\nbe 38 27 41 00\n48 0f 45 f0\n31 ff\nba 05 00 00 00\ne8 94 e5 ff ff\n48 89 c3\n4c 8b 25 ea 5b 21 00\n48 8d 7c 24 28\ne8 a0 55 00 00\n48 89 c5\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 89 da\n4c 89 e1\n49 89 e8\n4d 89 f9\ne8 32 ea ff ff\ne8 5d 9e 00 00\n84 c0\n0f 85 b5 fd ff ff\ne9 b6 fd ff ff\n41 be 0a 00 00 00\ne9 2a fe ff ff\n'
p761
S'.text:0000000000403a30\n.text:0000000000403a31\n.text:0000000000403a33\n.text:0000000000403a35\n.text:0000000000403a37\n.text:0000000000403a39\n.text:0000000000403a3a\n.text:0000000000403a41\n.text:0000000000403a44\n.text:0000000000403a49\n.text:0000000000403a4c\n.text:0000000000403a4f\n.text:0000000000403a52\n.text:0000000000403a55\n.text:0000000000403a59\n.text:0000000000403a5d\n.text:0000000000403a62\n.text:0000000000403a65\n.text:0000000000403a67\n.text:0000000000403a6f\n.text:0000000000403a74\n.text:0000000000403a79\n.text:0000000000403a7c\n.text:0000000000403a81\n.text:0000000000403a85\n.text:0000000000403a87\n.text:0000000000403a89\n.text:0000000000403a8c\n.text:0000000000403a91\n.text:0000000000403a94\n.text:0000000000403a98\n.text:0000000000403a9b\n.text:0000000000403a9f\n.text:0000000000403aa1\n.text:0000000000403aa3\n.text:0000000000403aa9\n.text:0000000000403aae\n.text:0000000000403ab0\n.text:0000000000403ab5\n.text:0000000000403ab8\n.text:0000000000403aba\n.text:0000000000403abc\n.text:0000000000403ac1\n.text:0000000000403ac3\n.text:0000000000403ac9\n.text:0000000000403ace\n.text:0000000000403ad0\n.text:0000000000403ad6\n.text:0000000000403ad9\n.text:0000000000403ae0\n.text:0000000000403ae1\n.text:0000000000403ae3\n.text:0000000000403ae5\n.text:0000000000403ae7\n.text:0000000000403ae9\n.text:0000000000403aea\n.text:0000000000403aeb\n.text:0000000000403aee\n.text:0000000000403af0\n.text:0000000000403af6\n.text:0000000000403af8\n.text:0000000000403afd\n.text:0000000000403b01\n.text:0000000000403b06\n.text:0000000000403b0b\n.text:0000000000403b0d\n.text:0000000000403b12\n.text:0000000000403b14\n.text:0000000000403b16\n.text:0000000000403b18\n.text:0000000000403b1c\n.text:0000000000403b20\n.text:0000000000403b22\n.text:0000000000403b24\n.text:0000000000403b28\n.text:0000000000403b2a\n.text:0000000000403b2f\n.text:0000000000403b33\n.text:0000000000403b38\n.text:0000000000403b3d\n.text:0000000000403b3f\n.text:0000000000403b41\n.text:0000000000403b46\n.text:0000000000403b48\n.text:0000000000403b4d\n.text:0000000000403b4f\n.text:0000000000403b55\n.text:0000000000403b58\n.text:0000000000403b5a\n.text:0000000000403b5c\n.text:0000000000403b5e\n.text:0000000000403b60\n.text:0000000000403b62\n.text:0000000000403b68\n.text:0000000000403b6e\n.text:0000000000403b70\n.text:0000000000403b75\n.text:0000000000403b7a\n.text:0000000000403b7f\n.text:0000000000403b85\n.text:0000000000403b88\n.text:0000000000403b8d\n.text:0000000000403b8f\n.text:0000000000403b95\n.text:0000000000403b97\n.text:0000000000403b9d\n.text:0000000000403b9f\n.text:0000000000403ba5\n.text:0000000000403baa\n.text:0000000000403bb0\n.text:0000000000403bb2\n.text:0000000000403bb4\n.text:0000000000403bb6\n.text:0000000000403bbb\n.text:0000000000403bc0\n.text:0000000000403bc5\n.text:0000000000403bc8\n.text:0000000000403bcc\n.text:0000000000403bcf\n.text:0000000000403bd4\n.text:0000000000403bd7\n.text:0000000000403bd9\n.text:0000000000403bdc\n.text:0000000000403be2\n.text:0000000000403be7\n.text:0000000000403beb\n.text:0000000000403bf0\n.text:0000000000403bf5\n.text:0000000000403bf7\n.text:0000000000403bfd\n.text:0000000000403c02\n.text:0000000000403c04\n.text:0000000000403c06\n.text:0000000000403c0b\n.text:0000000000403c10\n.text:0000000000403c15\n.text:0000000000403c18\n.text:0000000000403c1a\n.text:0000000000403c1c\n.text:0000000000403c1e\n.text:0000000000403c21\n.text:0000000000403c24\n.text:0000000000403c29\n.text:0000000000403c2f\n.text:0000000000403c34\n.text:0000000000403c3a\n.text:0000000000403c3f\n.text:0000000000403c41\n.text:0000000000403c46\n.text:0000000000403c4b\n.text:0000000000403c4e\n.text:0000000000403c50\n.text:0000000000403c55\n.text:0000000000403c5a\n.text:0000000000403c5f\n.text:0000000000403c62\n.text:0000000000403c64\n.text:0000000000403c66\n.text:0000000000403c68\n.text:0000000000403c6b\n.text:0000000000403c6e\n.text:0000000000403c73\n.text:0000000000403c78\n.text:0000000000403c7f\n.text:0000000000403c81\n.text:0000000000403c86\n.text:0000000000403c8b\n.text:0000000000403c8f\n.text:0000000000403c91\n.text:0000000000403c96\n.text:0000000000403c9b\n.text:0000000000403c9e\n.text:0000000000403ca5\n.text:0000000000403caa\n.text:0000000000403cac\n.text:0000000000403caf\n.text:0000000000403cb2\n.text:0000000000403cb7\n.text:0000000000403cb9\n.text:0000000000403cc0\n.text:0000000000403cc2\n.text:0000000000403cc7\n.text:0000000000403ccc\n.text:0000000000403cd0\n.text:0000000000403cd2\n.text:0000000000403cd7\n.text:0000000000403cdc\n.text:0000000000403cdf\n.text:0000000000403ce6\n.text:0000000000403ceb\n.text:0000000000403cf0\n.text:0000000000403cf3\n.text:0000000000403cf8\n.text:0000000000403cfa\n.text:0000000000403cfd\n.text:0000000000403d00\n.text:0000000000403d03\n.text:0000000000403d06\n.text:0000000000403d09\n.text:0000000000403d0e\n.text:0000000000403d13\n.text:0000000000403d15\n.text:0000000000403d1b\n.text:0000000000403d20\n.text:0000000000403d26\n'
p762
tp763
sS'__libc_csu_init'
p764
(S'\n__stdcall __libc_csu_init()\n'
p765
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p766
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x618e08]\nPUSH RBP\nLEA RBP,[0x618e10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00402080\nTEST RBP,RBP\nJZ 0x00411386\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00411370\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p767
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 c6 7a 20 00\n55\n48 8d 2d c6 7a 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 1f 0d ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p768
S'.text:0000000000411330\n.text:0000000000411332\n.text:0000000000411334\n.text:0000000000411337\n.text:0000000000411339\n.text:000000000041133b\n.text:0000000000411342\n.text:0000000000411343\n.text:000000000041134a\n.text:000000000041134b\n.text:000000000041134e\n.text:0000000000411351\n.text:0000000000411354\n.text:0000000000411358\n.text:000000000041135c\n.text:0000000000411361\n.text:0000000000411364\n.text:0000000000411366\n.text:0000000000411368\n.text:0000000000411370\n.text:0000000000411373\n.text:0000000000411376\n.text:0000000000411379\n.text:000000000041137d\n.text:0000000000411381\n.text:0000000000411384\n.text:0000000000411386\n.text:000000000041138a\n.text:000000000041138b\n.text:000000000041138c\n.text:000000000041138e\n.text:0000000000411390\n.text:0000000000411392\n.text:0000000000411394\n'
p769
tp770
sS'movefile'
p771
(S'\n__stdcall movefile(char * source, char * dest, cp_options * x)\n'
p772
V\u000a_Bool movefile(char *source,char *dest,cp_options *x)\u000a\u000a{\u000a  _Bool _Var1;\u000a  char *abase;\u000a  cp_options *x_00;\u000a  \u000a  if (remove_trailing_slashes == 1) {\u000a    strip_trailing_slashes(source);\u000a  }\u000a  if ((char)x == 0) {\u000a    _Var1 = do_move(source,dest,x_00);\u000a  }\u000a  else {\u000a    abase = last_component(source);\u000a    abase = file_name_concat(dest,abase,(char **)0x0);\u000a    strip_trailing_slashes(abase);\u000a    _Var1 = do_move(source,abase,x_00);\u000a    free(abase);\u000a  }\u000a  return _Var1;\u000a}\u000a\u000a
p773
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV EBP,EDX\nMOV R15,RSI\nMOV RBX,RDI\nCMP byte ptr [0x00619470],0x1\nJNZ 0x00403253\nMOV RDI,RBX\nCALL 0x00409090\nTEST BPL,BPL\nJZ 0x00403292\nMOV RDI,RBX\nCALL 0x00409000\nXOR EDX,EDX\nMOV RDI,R15\nMOV RSI,RAX\nCALL 0x00409410\nMOV RBP,RAX\nMOV RDI,RBP\nCALL 0x00409090\nMOV RDI,RBX\nMOV RSI,RBP\nMOV RDX,R14\nCALL 0x004032b0\nMOV EBX,EAX\nMOV RDI,RBP\nCALL 0x004020c0\nJMP 0x004032a2\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,R14\nCALL 0x004032b0\nMOV EBX,EAX\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p774
S'55\n41 57\n41 56\n53\n50\n49 89 ce\n89 d5\n49 89 f7\n48 89 fb\n80 3d 27 62 21 00 01\n75 08\n48 89 df\ne8 3d 5e 00 00\n40 84 ed\n74 3a\n48 89 df\ne8 a0 5d 00 00\n31 d2\n4c 89 ff\n48 89 c6\ne8 a3 61 00 00\n48 89 c5\n48 89 ef\ne8 18 5e 00 00\n48 89 df\n48 89 ee\n4c 89 f2\ne8 2a 00 00 00\n89 c3\n48 89 ef\ne8 30 ee ff ff\neb 10\n48 89 df\n4c 89 fe\n4c 89 f2\ne8 10 00 00 00\n89 c3\n89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p775
S'.text:0000000000403230\n.text:0000000000403231\n.text:0000000000403233\n.text:0000000000403235\n.text:0000000000403236\n.text:0000000000403237\n.text:000000000040323a\n.text:000000000040323c\n.text:000000000040323f\n.text:0000000000403242\n.text:0000000000403249\n.text:000000000040324b\n.text:000000000040324e\n.text:0000000000403253\n.text:0000000000403256\n.text:0000000000403258\n.text:000000000040325b\n.text:0000000000403260\n.text:0000000000403262\n.text:0000000000403265\n.text:0000000000403268\n.text:000000000040326d\n.text:0000000000403270\n.text:0000000000403273\n.text:0000000000403278\n.text:000000000040327b\n.text:000000000040327e\n.text:0000000000403281\n.text:0000000000403286\n.text:0000000000403288\n.text:000000000040328b\n.text:0000000000403290\n.text:0000000000403292\n.text:0000000000403295\n.text:0000000000403298\n.text:000000000040329b\n.text:00000000004032a0\n.text:00000000004032a2\n.text:00000000004032a4\n.text:00000000004032a8\n.text:00000000004032a9\n.text:00000000004032ab\n.text:00000000004032ad\n.text:00000000004032ae\n'
p776
tp777
sS'c_isdigit'
p778
(S'\n__stdcall c_isdigit()\n'
p779
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p780
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p781
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p782
S'.text:0000000000410610\n.text:0000000000410613\n.text:0000000000410616\n.text:0000000000410619\n'
p783
tp784
sS'cache_stat_init'
p785
(S'\n__stdcall cache_stat_init()\n'
p786
V\u000astat * cache_stat_init(void)\u000a\u000a{\u000a  stat *in_RAX;\u000a  long in_RDI;\u000a  \u000a  *(undefined8 *)(in_RDI + 0x30) = 0xffffffffffffffff;\u000a  return in_RAX;\u000a}\u000a\u000a
p787
S'MOV qword ptr [RDI + 0x30],-0x1\nRET\n'
p788
S'48 c7 47 30 ff ff ff ff\nc3\n'
p789
S'.text:0000000000403ed0\n.text:0000000000403ed8\n'
p790
tp791
sS'string_to_security_class'
p792
(S'\n__stdcall string_to_security_class(char * name)\n'
p793
V\u000asecurity_class_t string_to_security_class(char *name)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return 0;\u000a}\u000a\u000a
p794
S'PUSH RAX\nCALL 0x00402100\nMOV dword ptr [RAX],0x5f\nXOR EAX,EAX\nPOP RCX\nRET\n'
p795
S'50\ne8 ba 5a ff ff\nc7 00 5f 00 00 00\n31 c0\n59\nc3\n'
p796
S'.text:000000000040c640\n.text:000000000040c641\n.text:000000000040c646\n.text:000000000040c64c\n.text:000000000040c64e\n.text:000000000040c64f\n'
p797
tp798
sS'matchpathcon_init_prefix'
p799
(S'\n__stdcall matchpathcon_init_prefix(char * path, char * prefix)\n'
p800
V\u000aint matchpathcon_init_prefix(char *path,char *prefix)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p801
S'PUSH RAX\nCALL 0x00402100\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p802
S'50\ne8 aa 5a ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p803
S'.text:000000000040c650\n.text:000000000040c651\n.text:000000000040c656\n.text:000000000040c65c\n.text:000000000040c661\n.text:000000000040c662\n'
p804
tp805
sS'triple_compare_ino_str'
p806
(S'\n__stdcall triple_compare_ino_str(void * x, void * y)\n'
p807
V\u000a_Bool triple_compare_ino_str(void *x,void *y)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (*(long *)((long)x + 8) != *(long *)((long)y + 8)) {\u000a    return false;\u000a  }\u000a  if (*(long *)((long)x + 0x10) == *(long *)((long)y + 0x10)) {\u000a    iVar1 = strcmp(*(char **)x,*(char **)y);\u000a    return (_Bool)(iVar1 == 0);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p808
S'MOV RAX,qword ptr [RDI + 0x8]\nCMP RAX,qword ptr [RSI + 0x8]\nJNZ 0x0040a5ea\nMOV RAX,qword ptr [RDI + 0x10]\nCMP RAX,qword ptr [RSI + 0x10]\nJNZ 0x0040a5ed\nPUSH RAX\nMOV RDI,qword ptr [RDI]\nMOV RSI,qword ptr [RSI]\nCALL 0x00402480\nTEST EAX,EAX\nSETZ AL\nADD RSP,0x8\nRET\nXOR EAX,EAX\nRET\nXOR EAX,EAX\nRET\n'
p809
S'48 8b 47 08\n48 3b 46 08\n75 20\n48 8b 47 10\n48 3b 46 10\n75 19\n50\n48 8b 3f\n48 8b 36\ne8 a0 7e ff ff\n85 c0\n0f 94 c0\n48 83 c4 08\nc3\n31 c0\nc3\n31 c0\nc3\n'
p810
S'.text:000000000040a5c0\n.text:000000000040a5c4\n.text:000000000040a5c8\n.text:000000000040a5ca\n.text:000000000040a5ce\n.text:000000000040a5d2\n.text:000000000040a5d4\n.text:000000000040a5d5\n.text:000000000040a5d8\n.text:000000000040a5db\n.text:000000000040a5e0\n.text:000000000040a5e2\n.text:000000000040a5e5\n.text:000000000040a5e9\n.text:000000000040a5ea\n.text:000000000040a5ec\n.text:000000000040a5ed\n.text:000000000040a5ef\n'
p811
tp812
sS'get_stat_mtime_ns'
p813
(S'\n__stdcall get_stat_mtime_ns(stat * st)\n'
p814
V\u000along get_stat_mtime_ns(stat *st)\u000a\u000a{\u000a  return (st->st_mtim).tv_nsec;\u000a}\u000a\u000a
p815
S'MOV RAX,qword ptr [RDI + 0x60]\nRET\n'
p816
S'48 8b 47 60\nc3\n'
p817
S'.text:000000000040c690\n.text:000000000040c694\n'
p818
tp819
sS'copy_reg'
p820
(S'\n__stdcall copy_reg(char * src_name, char * dst_name, cp_options * x, _Bool * new_dst, stat * src_sb)\n'
p821
V\u000a/* WARNING: Removing unreachable block (ram,0x004071f6) */\u000a/* WARNING: Removing unreachable block (ram,0x0040719e) */\u000a/* WARNING: Removing unreachable block (ram,0x004071a8) */\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000a_Bool copy_reg(char *src_name,char *dst_name,cp_options *x,_Bool *new_dst,stat *src_sb)\u000a\u000a{\u000a  _Bool *p_Var1;\u000a  bool bVar2;\u000a  _Bool _Var3;\u000a  _Bool _Var4;\u000a  uint __fd;\u000a  int iVar5;\u000a  uint __fd_00;\u000a  int iVar6;\u000a  __uid_t _Var7;\u000a  mode_t mVar8;\u000a  undefined8 uVar9;\u000a  char *max_n_read;\u000a  size_t sVar10;\u000a  int *piVar11;\u000a  char *pcVar12;\u000a  size_t a;\u000a  _Bool *p_Var13;\u000a  void *ptr;\u000a  uint *hole_size;\u000a  long lVar14;\u000a  uint uVar15;\u000a  ulong uVar16;\u000a  size_t alignment;\u000a  undefined8 *puVar17;\u000a  stat *psVar18;\u000a  undefined8 *puVar19;\u000a  __dev_t *p_Var20;\u000a  char *in_R9;\u000a  undefined uVar21;\u000a  uint uVar22;\u000a  ulong uVar23;\u000a  _Bool *src_name_00;\u000a  byte bVar24;\u000a  stat *st;\u000a  _Bool wrote_hole_at_eof;\u000a  _Bool normal_copy_required;\u000a  stat dangling_link_sb;\u000a  undefined in_stack_fffffffffffffdb8 [88];\u000a  undefined8 in_stack_fffffffffffffe10;\u000a  undefined8 in_stack_fffffffffffffe18;\u000a  undefined in_stack_fffffffffffffe20;\u000a  undefined7 in_stack_fffffffffffffe21;\u000a  undefined8 in_stack_fffffffffffffe28;\u000a  undefined8 in_stack_fffffffffffffe30;\u000a  undefined8 in_stack_fffffffffffffe38;\u000a  undefined7 uVar25;\u000a  uint local_1b4;\u000a  timespec *local_1b0;\u000a  _Bool *local_1a8;\u000a  uint local_19c;\u000a  uint local_198;\u000a  char local_191;\u000a  uint *local_190;\u000a  undefined8 local_188;\u000a  uint local_17c;\u000a  timespec local_178;\u000a  timespec local_168;\u000a  char *local_158;\u000a  undefined local_150 [24];\u000a  uint local_138;\u000a  __uid_t local_134;\u000a  __gid_t local_130;\u000a  char *local_118;\u000a  stat local_c0;\u000a  \u000a  bVar24 = 0;\u000a  uVar23 = (ulong)src_sb & 0xffffffff;\u000a  uVar16 = (ulong)new_dst & 0xffffffff;\u000a  local_17c = st->st_mode;\u000a  _Var4 = x->data_copy_required;\u000a  local_188 = in_R9;\u000a  __fd = open_safer(src_name,(ulong)(x->dereference == DEREF_NEVER) << 0x11);\u000a  if ((int)__fd < 0) {\u000a    hole_size = (uint *)__errno_location();\u000a    __fd = *hole_size;\u000a    uVar9 = dcgettext(0,"cannot open %s for reading",5);\u000a    max_n_read = quotearg_style((char *)0x4);\u000a    error(0,(ulong)__fd,uVar9,max_n_read);\u000a    return false;\u000a  }\u000a  local_1a8 = (_Bool *)src_name;\u000a  iVar5 = fstat(__fd,(stat *)&local_c0);\u000a  if (iVar5 == 0) {\u000a    if ((st->st_ino == local_c0.st_ino) && (st->st_dev == local_c0.st_dev)) {\u000a      if (*local_188 == 0) {\u000a        local_19c = (uint)uVar23;\u000a        local_198 = (uint)uVar16;\u000a        uVar9 = 1;\u000a        if (x->data_copy_required != false) {\u000a          uVar9 = 0x201;\u000a        }\u000a        local_1b0 = (timespec *)dst_name;\u000a        __fd_00 = open_safer(dst_name,uVar9);\u000a        hole_size = (uint *)__errno_location();\u000a        local_190._0_4_ = *hole_size;\u000a        if (x->set_security_context == false) {\u000a          if ((-1 < (int)__fd_00) && (x->preserve_security_context != false)) goto LAB_00406b5a;\u000a          if ((int)__fd_00 < 0) goto LAB_00406b96;\u000aLAB_00406cee:\u000a          uVar16 = (ulong)local_198;\u000a          uVar23 = (ulong)local_19c;\u000a          dst_name = (char *)local_1b0;\u000a          if (*local_188 == 0) {\u000a            uVar23 = 0;\u000a            dst_name = (char *)local_1b0;\u000a            goto LAB_00406d0d;\u000a          }\u000a          goto LAB_004069cc;\u000a        }\u000a        if ((int)__fd_00 < 0) {\u000aLAB_00406b96:\u000a          if (x->unlink_dest_after_failed_open == false) goto LAB_00406cee;\u000a          local_190 = (uint *)((ulong)local_190 & 0xffffffff00000000 | (ulong)(uint)local_190);\u000a          local_1b4 = __fd_00;\u000a          iVar5 = unlink((char *)local_1b0);\u000a          if (iVar5 != 0) {\u000a            local_190._0_4_ = *hole_size;\u000a            max_n_read = "cannot remove %s";\u000a            goto LAB_00406df6;\u000a          }\u000a          if (x->verbose != false) {\u000a            uVar9 = dcgettext(0,"removed %s\u005cn",5);\u000a            max_n_read = quotearg_style((char *)0x4);\u000a            __printf_chk(1,uVar9,max_n_read);\u000a          }\u000a          *local_188 = 1;\u000a          if (x->set_security_context == false) {\u000a            uVar16 = (ulong)local_198;\u000a            uVar23 = (ulong)local_19c;\u000a            dst_name = (char *)local_1b0;\u000a            goto LAB_004069cc;\u000a          }\u000a          _Var3 = set_process_security_ctx();\u000a          __fd_00 = local_1b4;\u000a          if (_Var3 != false) goto LAB_00406cee;\u000a          goto LAB_00406e22;\u000a        }\u000aLAB_00406b5a:\u000a        uVar21 = 0;\u000a        set_file_security_ctx();\u000a        if (x->require_preserve_context == false) goto LAB_00406cee;\u000a        ptr = (void *)0x0;\u000a      }\u000a      else {\u000aLAB_004069cc:\u000a        uVar22 = (uint)uVar23;\u000a        uVar15 = (uint)uVar16;\u000a        local_1b0 = (timespec *)((ulong)local_1b0 & 0xffffffff00000000 | (ulong)(~uVar22 & uVar15));\u000a        local_1b4 = open_safer(dst_name,0xc1);\u000a        local_190 = (uint *)__errno_location();\u000a        __fd_00 = local_1b4;\u000a        local_190._0_4_ = *local_190;\u000a        local_19c = uVar22;\u000a        local_198 = uVar15;\u000a        if (((int)local_1b4 < 0) &&\u000a           (local_19c = uVar22, local_198 = uVar15, (uint)local_190 == 0x11)) {\u000a          local_190._0_4_ = 0x11;\u000a          local_19c = uVar22;\u000a          local_198 = uVar15;\u000a          if (x->move_mode == false) {\u000a            local_19c = uVar22;\u000a            local_198 = uVar15;\u000a            iVar5 = lstat(dst_name,(stat *)local_150);\u000a            local_190._0_4_ = 0x11;\u000a            if (iVar5 == 0) {\u000a              uVar23 = (ulong)local_19c;\u000a              if ((local_138 & 0xf000) != 0xa000) goto LAB_00406c15;\u000a              if (x->open_dangling_dest_symlink == false) {\u000a                uVar9 = dcgettext(0,"not writing through dangling symlink %s",5);\u000a                max_n_read = quotearg_style((char *)0x4);\u000a                uVar16 = 0;\u000a                goto LAB_00406e1a;\u000a              }\u000a              __fd_00 = open_safer(dst_name,0x41,(ulong)local_1b0 & 0xffffffff);\u000a              local_190._0_4_ = *local_190;\u000a              goto LAB_00406c15;\u000a            }\u000a            uVar23 = (ulong)local_19c;\u000a          }\u000aLAB_00406d0d:\u000a          uVar15 = (uint)uVar16;\u000a          uVar22 = (uint)uVar23;\u000ajoined_r0x00406c68:\u000a          if (-1 < (int)__fd_00) goto LAB_00406d15;\u000aLAB_00406dce:\u000a          if ((((uint)local_190 == 2) && (*local_188 == 0)) && (x->move_mode == false))\u000a          goto LAB_004070bb;\u000a          max_n_read = "cannot create regular file %s";\u000aLAB_00406df6:\u000a          uVar16 = (ulong)(uint)local_190;\u000a          uVar9 = dcgettext(0,max_n_read,5);\u000a          max_n_read = quotearg_style((char *)0x4);\u000aLAB_00406e1a:\u000a          error(0,uVar16,uVar9,max_n_read);\u000aLAB_00406e22:\u000a          uVar21 = 0;\u000a          ptr = (void *)0x0;\u000a          goto LAB_00406a95;\u000a        }\u000aLAB_00406c15:\u000a        if (((uint)local_190 != 0x15) || (uVar22 = (uint)uVar23, -1 < (int)__fd_00))\u000a        goto LAB_00406d0d;\u000a        if (*(char *)&((timespec *)dst_name)->tv_sec == 0) {\u000a          local_190._0_4_ = 0x15;\u000a          goto joined_r0x00406c68;\u000a        }\u000a        sVar10 = strlen(dst_name);\u000a        uVar23 = (ulong)local_19c;\u000a        uVar16 = (ulong)local_198;\u000a        if (*(char *)((long)&((timespec *)dst_name)[-1].tv_nsec + sVar10 + 7) == '/') {\u000a          local_190._0_4_ = 0x14;\u000a        }\u000a        uVar22 = local_19c;\u000a        uVar15 = local_198;\u000a        if ((int)__fd_00 < 0) goto LAB_00406dce;\u000aLAB_00406d15:\u000a        local_1b4 = __fd_00;\u000a        local_1b0 = (timespec *)dst_name;\u000a        iVar5 = fstat(__fd_00,(stat *)local_150);\u000a        if (iVar5 != 0) {\u000a          hole_size = (uint *)__errno_location();\u000a          __fd_00 = *hole_size;\u000a          uVar21 = 0;\u000a          uVar9 = dcgettext(0,"cannot fstat %s",5);\u000a          quotearg_style((char *)0x4);\u000a          error(0,(ulong)__fd_00,uVar9);\u000a          ptr = (void *)0x0;\u000a          __fd_00 = local_1b4;\u000a          goto LAB_00406d7c;\u000a        }\u000a        uVar21 = 1;\u000a        local_19c = uVar22;\u000a        local_198 = uVar15;\u000a        if (_Var4 == false) {\u000aLAB_00406ede:\u000a          ptr = (void *)0x0;\u000a          if (x->preserve_timestamps != false) goto LAB_0040722a;\u000a          goto LAB_004072b9;\u000a        }\u000a        local_19c = uVar22;\u000a        local_198 = uVar15;\u000a        if (x->reflink_mode != REFLINK_NEVER) {\u000a          local_19c = uVar22;\u000a          local_198 = uVar15;\u000a          iVar5 = clone_file();\u000a          if (iVar5 == 0) goto LAB_00406ede;\u000a          if (x->reflink_mode == REFLINK_ALWAYS) {\u000a            piVar11 = __errno_location();\u000a            local_188 = (char *)CONCAT44(local_188._4_4_,*piVar11);\u000a            uVar21 = 0;\u000a            uVar9 = dcgettext(0,"failed to clone %s from %s",5);\u000a            max_n_read = quotearg_n_style((char *)0x0);\u000a            pcVar12 = quotearg_n_style((char *)0x1);\u000a            error(0,(ulong)local_188 & 0xffffffff,uVar9,max_n_read,pcVar12);\u000a            ptr = (void *)0x0;\u000a            __fd_00 = local_1b4;\u000a            goto LAB_00406d7c;\u000a          }\u000a        }\u000a        uVar21 = 0xf7;\u000a        uVar25 = 0x406e;\u000a        iVar5 = getpagesize();\u000a        alignment = SEXT48(iVar5);\u000a        lVar14 = 0x12;\u000a        puVar17 = (undefined8 *)local_150;\u000a        puVar19 = (undefined8 *)&stack0xfffffffffffffdb8;\u000a        while (lVar14 != 0) {\u000a          lVar14 = lVar14 + -1;\u000a          *puVar19 = *puVar17;\u000a          puVar17 = puVar17 + (ulong)bVar24 * 0x1ffffffffffffffe + 1;\u000a          puVar19 = puVar19 + (ulong)bVar24 * 0x1ffffffffffffffe + 1;\u000a        }\u000a        src_name_00 = (_Bool *)io_blksize((stat)CONCAT7137(uVar25,CONCAT1136(uVar21,CONCAT8128(\u000a                                                  in_stack_fffffffffffffe38,\u000a                                                  CONCAT8120(in_stack_fffffffffffffe30,\u000a                                                             CONCAT8112(in_stack_fffffffffffffe28,\u000a                                                                        CONCAT7105(\u000a                                                  in_stack_fffffffffffffe21,\u000a                                                  CONCAT1104(in_stack_fffffffffffffe20,\u000a                                                             CONCAT896(in_stack_fffffffffffffe18,\u000a                                                                       CONCAT888(\u000a                                                  in_stack_fffffffffffffe10,\u000a                                                  in_stack_fffffffffffffdb8))))))))));\u000a        local_158 = (char *)0x200;\u000a        if (local_118 < (char *)0x2000000000000001) {\u000a          local_158 = local_118;\u000a        }\u000a        if ((long)local_118 < 1) {\u000a          local_158 = (char *)0x200;\u000a        }\u000a        fdadvise(__fd,0,0,2);\u000a        uVar21 = 0x70;\u000a        uVar25 = 0x406f;\u000a        _Var4 = is_probably_sparse(&local_c0);\u000a        local_190 = (uint *)((ulong)local_190 & 0xffffffffffffff00 | (ulong)_Var4);\u000a        if ((local_138 & 0xf000) == 0x8000) {\u000a          bVar2 = true;\u000a          if ((x->sparse_mode != SPARSE_ALWAYS) && ((x->sparse_mode == SPARSE_AUTO & _Var4) == 0))\u000a          goto LAB_00406fab;\u000a        }\u000a        else {\u000aLAB_00406fab:\u000a          lVar14 = 0x12;\u000a          psVar18 = &local_c0;\u000a          p_Var20 = (__dev_t *)&stack0xfffffffffffffdb8;\u000a          while (lVar14 != 0) {\u000a            lVar14 = lVar14 + -1;\u000a            *p_Var20 = psVar18->st_dev;\u000a            psVar18 = (stat *)(&psVar18->st_dev + (ulong)bVar24 * 0x1ffffffffffffffe + 1);\u000a            p_Var20 = p_Var20 + (ulong)bVar24 * 0x1ffffffffffffffe + 1;\u000a          }\u000a          a = io_blksize((stat)CONCAT7137(uVar25,CONCAT1136(uVar21,CONCAT8128(\u000a                                                  in_stack_fffffffffffffe38,\u000a                                                  CONCAT8120(in_stack_fffffffffffffe30,\u000a                                                             CONCAT8112(in_stack_fffffffffffffe28,\u000a                                                                        CONCAT7105(\u000a                                                  in_stack_fffffffffffffe21,\u000a                                                  CONCAT1104(in_stack_fffffffffffffe20,\u000a                                                             CONCAT896(in_stack_fffffffffffffe18,\u000a                                                                       CONCAT888(\u000a                                                  in_stack_fffffffffffffe10,\u000a                                                  in_stack_fffffffffffffdb8))))))))));\u000a          p_Var13 = (_Bool *)buffer_lcm(a,(size_t)src_name_00,\u000a                                        (size_t)(_Bool *)(0x7fffffffffffffff - alignment));\u000a          if (((local_c0.st_mode & 0xf000) == 0x8000) && (local_c0.st_size < src_name_00)) {\u000a            src_name_00 = local_c0.st_size + 1;\u000a          }\u000a          p_Var1 = src_name_00 + (long)(p_Var13 + -1);\u000a          src_name_00 = p_Var1 + -((ulong)p_Var1 % (ulong)p_Var13);\u000a          if ((_Bool *)(0x7fffffffffffffff - alignment) <=\u000a              p_Var1 + -((ulong)p_Var1 % (ulong)p_Var13) + -1) {\u000a            src_name_00 = p_Var13;\u000a          }\u000a          bVar2 = false;\u000a        }\u000a        ptr = xmalloc((size_t)(src_name_00 + alignment));\u000a        hole_size = (uint *)ptr_align(ptr,alignment);\u000a        max_n_read = local_158;\u000a        if ((char)local_190 == 0) {\u000aLAB_004070db:\u000a          if (!bVar2) {\u000a            max_n_read = (char *)0x0;\u000a          }\u000a          _Var4 = sparse_copy((char *)(ulong)__fd,(ulong)local_1b4,(size_t)hole_size,src_name_00,\u000a                              (uintmax_t)max_n_read,\u000a                              (off_t *)(ulong)(x->sparse_mode == SPARSE_ALWAYS),local_1a8);\u000a          iVar5 = 3;\u000a          if (_Var4 == false) {\u000a            uVar21 = 0;\u000a          }\u000a          else {\u000a            uVar21 = 1;\u000a            if (local_191 == 0) {\u000a              iVar5 = 0;\u000a            }\u000a            else {\u000a              iVar6 = ftruncate(local_1b4,local_178.tv_sec);\u000a              iVar5 = 0;\u000a              if (-1 < iVar6) goto LAB_00407208;\u000a              hole_size = (uint *)__errno_location();\u000a              __fd_00 = *hole_size;\u000a              uVar21 = 0;\u000a              uVar9 = dcgettext(0,"failed to extend %s",5);\u000a              max_n_read = quotearg_style((char *)0x4);\u000a              error(0,(ulong)__fd_00,uVar9,max_n_read);\u000a              iVar5 = 3;\u000a            }\u000a          }\u000aLAB_0040720d:\u000a          __fd_00 = local_1b4;\u000a          if (iVar5 != 3) {\u000a            if (iVar5 != 0) {\u000a              return (_Bool)uVar21;\u000a            }\u000a            goto LAB_0040721e;\u000a          }\u000a        }\u000a        else {\u000a          local_190 = hole_size;\u000a          _Var4 = extent_copy((char *)(ulong)__fd,(ulong)local_1b4,(size_t)hole_size,\u000a                              (off_t)src_name_00,local_158,local_c0.st_size);\u000a          if (_Var4 == false) {\u000a            hole_size = local_190;\u000a            if ((char)local_178.tv_sec != 0) goto LAB_004070db;\u000a            iVar5 = 3;\u000a            uVar21 = 0;\u000aLAB_00407208:\u000a            if (iVar5 != 5) goto LAB_0040720d;\u000a          }\u000a          else {\u000a            uVar21 = 1;\u000a          }\u000aLAB_0040721e:\u000a          if (x->preserve_timestamps == false) {\u000aLAB_004072b9:\u000a            if ((x->preserve_ownership != false) &&\u000a               ((st->st_uid != local_134 || (st->st_gid != local_130)))) {\u000a              iVar5 = set_owner(x,(char *)local_1b0,(stat *)(ulong)local_1b4,st);\u000a              if (iVar5 == -1) goto LAB_004073aa;\u000a              if (iVar5 == 0) {\u000a                local_17c = local_17c & 0xfffff1ff;\u000a              }\u000a            }\u000a            if ((x->preserve_xattr != false) && (-1 < (char)local_138)) {\u000a              _Var7 = geteuid();\u000a              if (_Var7 != 0) {\u000a                iVar5 = fchmod_or_lchmod((char *)(ulong)local_1b4);\u000a                if (iVar5 == 0) {\u000a                  fchmod_or_lchmod((char *)(ulong)local_1b4);\u000a                }\u000a              }\u000a            }\u000a            uVar15 = local_19c;\u000a            if ((x->preserve_mode == false) && (x->move_mode == false)) {\u000a              if (x->set_mode == false) {\u000a                if (x->explicit_no_preserve_mode == false) {\u000a                  __fd_00 = local_1b4;\u000a                  if (local_19c != 0) {\u000a                    mVar8 = cached_umask();\u000a                    __fd_00 = local_1b4;\u000a                    if ((uVar15 & ~mVar8) != 0) {\u000a                      iVar5 = fchmod_or_lchmod((char *)(ulong)local_1b4);\u000a                      __fd_00 = local_1b4;\u000a                      if (iVar5 != 0) {\u000a                        hole_size = (uint *)__errno_location();\u000a                        __fd_00 = *hole_size;\u000a                        uVar9 = dcgettext(0,"preserving permissions for %s",5);\u000a                        quotearg_style((char *)0x4);\u000a                        error(0,(ulong)__fd_00,uVar9);\u000a                        _Var4 = x->require_preserve;\u000a                        goto joined_r0x004073a4;\u000a                      }\u000a                    }\u000a                  }\u000a                  goto LAB_00406d7c;\u000a                }\u000a                cached_umask();\u000a              }\u000a              iVar5 = set_acl((char *)local_1b0);\u000a              __fd_00 = local_1b4;\u000a              if (iVar5 != 0) goto LAB_004073aa;\u000a            }\u000a            else {\u000a              iVar5 = copy_acl(local_1a8,(char *)(ulong)__fd);\u000a              __fd_00 = local_1b4;\u000a              if (iVar5 != 0) {\u000a                _Var4 = x->require_preserve;\u000ajoined_r0x004073a4:\u000a                __fd_00 = local_1b4;\u000a                if (_Var4 != false) goto LAB_004073aa;\u000a              }\u000a            }\u000a            goto LAB_00406d7c;\u000a          }\u000aLAB_0040722a:\u000a          local_178 = get_stat_atime(st);\u000a          local_168 = get_stat_mtime(st);\u000a          iVar5 = fdutimens((char *)(ulong)local_1b4,local_1b0);\u000a          if (iVar5 == 0) goto LAB_004072b9;\u000a          hole_size = (uint *)__errno_location();\u000a          __fd_00 = *hole_size;\u000a          local_190 = (uint *)dcgettext(0,"preserving times for %s",5);\u000a          quotearg_style((char *)0x4);\u000a          error(0,(ulong)__fd_00,local_190);\u000a          if (x->require_preserve == false) goto LAB_004072b9;\u000aLAB_004073aa:\u000a          uVar21 = 0;\u000a          __fd_00 = local_1b4;\u000a        }\u000a      }\u000aLAB_00406d7c:\u000a      iVar5 = close(__fd_00);\u000a      if (iVar5 < 0) {\u000a        hole_size = (uint *)__errno_location();\u000a        __fd_00 = *hole_size;\u000a        uVar21 = 0;\u000a        uVar9 = dcgettext(0,"failed to close %s",5);\u000a        max_n_read = quotearg_style((char *)0x4);\u000a        error(0,(ulong)__fd_00,uVar9,max_n_read);\u000a      }\u000a      goto LAB_00406a95;\u000a    }\u000a    uVar9 = dcgettext(0,"skipping file %s, as it was replaced while being copied",5);\u000a    max_n_read = quotearg_style((char *)0x4);\u000a    uVar16 = 0;\u000a  }\u000a  else {\u000a    hole_size = (uint *)__errno_location();\u000a    __fd_00 = *hole_size;\u000a    uVar9 = dcgettext(0,"cannot fstat %s",5);\u000a    max_n_read = quotearg_style((char *)0x4);\u000a    uVar16 = (ulong)__fd_00;\u000a  }\u000a  uVar21 = 0;\u000a  error(0,uVar16,uVar9,max_n_read);\u000a  ptr = (void *)0x0;\u000aLAB_00406a95:\u000a  iVar5 = close(__fd);\u000a  if (iVar5 < 0) {\u000a    hole_size = (uint *)__errno_location();\u000a    __fd = *hole_size;\u000a    uVar21 = 0;\u000a    uVar9 = dcgettext(0,"failed to close %s",5);\u000a    max_n_read = quotearg_style((char *)0x4);\u000a    error(0,(ulong)__fd,uVar9,max_n_read);\u000a  }\u000a  free(ptr);\u000a  return (_Bool)uVar21;\u000aLAB_004070bb:\u000a  *local_188 = 1;\u000a  goto LAB_004069cc;\u000a}\u000a\u000a
p822
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x188\nMOV qword ptr [RSP + 0x30],R9\nMOV R13D,R8D\nMOV EBX,ECX\nMOV R12,RDX\nMOV RBP,RSI\nMOV R14,RDI\nMOV RAX,qword ptr [0x1c0 + RSP]\nMOV EAX,dword ptr [RAX + 0x18]\nMOV dword ptr [RSP + 0x3c],EAX\nMOV R15B,byte ptr [R12 + 0x22]\nXOR ESI,ESI\nCMP dword ptr [R12 + 0x4],0x2\nSETZ SIL\nSHL ESI,0x11\nXOR EAX,EAX\nCALL 0x00409100\nTEST EAX,EAX\nJS 0x00406952\nMOV qword ptr [RSP + 0x10],R14\nLEA RSI,[0xf8 + RSP]\nMOV R14D,EAX\nMOV EDI,EAX\nCALL 0x004113f0\nTEST EAX,EAX\nJZ 0x00406993\nCALL 0x00402100\nMOV EBX,dword ptr [RAX]\nXOR R13D,R13D\nXOR EDI,EDI\nMOV ESI,0x412f85\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBP,RAX\nMOV EDI,0x4\nMOV R12,qword ptr [RSP + 0x10]\nMOV RSI,R12\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nJMP 0x00406a8d\nCALL 0x00402100\nMOV EBX,dword ptr [RAX]\nXOR R13D,R13D\nXOR EDI,EDI\nMOV ESI,0x412f6a\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,R14\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00402640\nJMP 0x00406ae9\nMOV RCX,qword ptr [0x1c0 + RSP]\nMOV RAX,qword ptr [RCX + 0x8]\nCMP RAX,qword ptr [0x100 + RSP]\nJNZ 0x00406a58\nMOV RAX,qword ptr [RCX]\nCMP RAX,qword ptr [0xf8 + RSP]\nJNZ 0x00406a58\nMOV RAX,qword ptr [RSP + 0x30]\nCMP byte ptr [RAX],0x0\nJZ 0x00406b02\nMOV RDI,RBP\nMOV EDX,R13D\nNOT EDX\nAND EDX,EBX\nMOV ESI,0xc1\nXOR EAX,EAX\nMOV dword ptr [RSP + 0x8],EDX\nCALL 0x00409100\nMOV dword ptr [RSP + 0x4],EAX\nCALL 0x00402100\nMOV ECX,dword ptr [RSP + 0x4]\nMOV qword ptr [RSP + 0x28],RAX\nMOV EDX,dword ptr [RAX]\nTEST ECX,ECX\nMOV dword ptr [RSP + 0x1c],R13D\nMOV dword ptr [RSP + 0x20],EBX\nJNS 0x00406c15\nCMP EDX,0x11\nJNZ 0x00406c15\nMOV EDX,0x11\nCMP byte ptr [R12 + 0x18],0x0\nJNZ 0x00406d0d\nMOV R13D,ECX\nLEA RSI,[RSP + 0x68]\nMOV RDI,RBP\nCALL 0x00411400\nMOV EDX,0x11\nTEST EAX,EAX\nJZ 0x00406bd2\nMOV ECX,R13D\nMOV R13D,dword ptr [RSP + 0x1c]\nCMP EDX,0x15\nJZ 0x00406c1e\nJMP 0x00406d0d\nXOR R13D,R13D\nXOR EDI,EDI\nMOV ESI,0x412f95\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV EDI,0x4\nMOV R12,qword ptr [RSP + 0x10]\nMOV RSI,R12\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00402640\nXOR R15D,R15D\nMOV EDI,R14D\nCALL 0x004023c0\nTEST EAX,EAX\nJNS 0x00406add\nCALL 0x00402100\nMOV EBX,dword ptr [RAX]\nXOR R13D,R13D\nXOR EDI,EDI\nMOV ESI,0x413042\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,R12\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00402640\nMOV RDI,R15\nCALL 0x004020c0\nAND R13B,0x1\nAND R13B,0x1\nMOV EAX,R13D\nADD RSP,0x188\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV dword ptr [RSP + 0x1c],R13D\nMOV dword ptr [RSP + 0x20],EBX\nCMP byte ptr [R12 + 0x22],0x0\nMOV EAX,0x201\nMOV ESI,0x1\nCMOVNZ ESI,EAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RBP\nMOV RDI,RBP\nCALL 0x00409100\nMOV EBP,EAX\nCALL 0x00402100\nMOV R13,RAX\nMOV EDX,dword ptr [R13]\nCMP byte ptr [R12 + 0x20],0x0\nJZ 0x00406b4b\nTEST EBP,EBP\nMOV ECX,EBP\nJNS 0x00406b5a\nJMP 0x00406b96\nTEST EBP,EBP\nMOV ECX,EBP\nJS 0x00406b8e\nMOV AL,byte ptr [R12 + 0x24]\nTEST AL,AL\nJZ 0x00406b8e\nMOV EBX,EDX\nMOVZX ESI,byte ptr [R12 + 0x24]\nXOR R13D,R13D\nXOR EDX,EDX\nMOV RDI,qword ptr [RSP + 0x8]\nMOV EBP,ECX\nMOV RCX,R12\nCALL 0x00406460\nMOV EDX,EBX\nMOV ECX,EBP\nCMP byte ptr [R12 + 0x25],0x0\nJZ 0x00406cee\nXOR R15D,R15D\nJMP 0x00406d77\nTEST ECX,ECX\nJNS 0x00406cee\nCMP byte ptr [R12 + 0x16],0x0\nJZ 0x00406cee\nMOV dword ptr [RSP + 0x28],EDX\nMOV dword ptr [RSP + 0x4],ECX\nMOV RBP,qword ptr [RSP + 0x8]\nMOV RDI,RBP\nCALL 0x00402110\nTEST EAX,EAX\nJZ 0x00406c73\nMOV R15D,dword ptr [R13]\nXOR R13D,R13D\nXOR EDI,EDI\nMOV ESI,0x41249b\nJMP 0x00406df6\nMOV EAX,0xf000\nAND EAX,dword ptr [0x80 + RSP]\nCMP EAX,0xa000\nMOV ECX,R13D\nMOV R13D,dword ptr [RSP + 0x1c]\nJNZ 0x00406c15\nCMP byte ptr [R12 + 0x2f],0x0\nJZ 0x004071aa\nMOV ESI,0x41\nXOR EAX,EAX\nMOV RDI,RBP\nMOV EDX,dword ptr [RSP + 0x8]\nCALL 0x00409100\nMOV ECX,EAX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV EDX,dword ptr [RAX]\nCMP EDX,0x15\nJNZ 0x00406d0d\nTEST ECX,ECX\nJNS 0x00406d0d\nCMP byte ptr [RBP],0x0\nJZ 0x00406c61\nMOV RDI,RBP\nMOV EBX,ECX\nMOV R13D,EDX\nCALL 0x00402290\nMOV EDX,R13D\nMOV ECX,EBX\nMOV R13D,dword ptr [RSP + 0x1c]\nMOV EBX,dword ptr [RSP + 0x20]\nCMP byte ptr [RBP + RAX*0x1 + -0x1],0x2f\nMOV EAX,0x14\nCMOVZ EDX,EAX\nTEST ECX,ECX\nJNS 0x00406d15\nJMP 0x00406dce\nMOV EDX,0x15\nTEST ECX,ECX\nJNS 0x00406d15\nJMP 0x00406dce\nCMP byte ptr [R12 + 0x2d],0x0\nJZ 0x00406cb3\nXOR EDI,EDI\nMOV ESI,0x412761\nMOV EDX,0x5\nCALL 0x00402270\nMOV R13,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x8]\nCALL 0x0040b960\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,R13\nMOV RDX,RCX\nCALL 0x00402600\nMOV RAX,qword ptr [RSP + 0x30]\nMOV byte ptr [RAX],0x1\nCMP byte ptr [R12 + 0x20],0x0\nJZ 0x004071dc\nMOV EDX,0x1\nMOV RDI,qword ptr [RSP + 0x10]\nMOV RSI,qword ptr [RSP + 0x8]\nMOV RCX,R12\nCALL 0x004064e0\nTEST AL,AL\nMOV ECX,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x28]\nJZ 0x004071f8\nMOV RAX,qword ptr [RSP + 0x30]\nCMP byte ptr [RAX],0x0\nMOV RBP,qword ptr [RSP + 0x8]\nMOV EBX,dword ptr [RSP + 0x20]\nMOV R13D,dword ptr [RSP + 0x1c]\nJNZ 0x004069cc\nXOR R13D,R13D\nTEST ECX,ECX\nJS 0x00406dce\nMOV qword ptr [RSP + 0x8],RBP\nLEA RSI,[RSP + 0x68]\nMOV dword ptr [RSP + 0x4],ECX\nMOV EDI,ECX\nCALL 0x004113f0\nTEST EAX,EAX\nJZ 0x00406e2f\nCALL 0x00402100\nMOV EBX,dword ptr [RAX]\nXOR R13D,R13D\nXOR EDI,EDI\nMOV ESI,0x412f85\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x8]\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00402640\nXOR R15D,R15D\nMOV ECX,dword ptr [RSP + 0x4]\nMOV R12,qword ptr [RSP + 0x10]\nMOV EDI,ECX\nCALL 0x004023c0\nTEST EAX,EAX\nJNS 0x00406a95\nCALL 0x00402100\nMOV EBX,dword ptr [RAX]\nXOR R13D,R13D\nXOR EDI,EDI\nMOV ESI,0x413042\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x8]\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00402640\nJMP 0x00406a95\nCMP EDX,0x2\nJNZ 0x00406de9\nMOV RAX,qword ptr [RSP + 0x30]\nCMP byte ptr [RAX],0x0\nJNZ 0x00406de9\nCMP byte ptr [R12 + 0x18],0x0\nJZ 0x004070bb\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R15D,EDX\nMOV ESI,0x412ff5\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,RBP\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,RBX\nCALL 0x00402640\nXOR R15D,R15D\nMOV R12,qword ptr [RSP + 0x10]\nJMP 0x00406a95\nMOV dword ptr [RSP + 0x1c],R13D\nMOV dword ptr [RSP + 0x20],EBX\nMOV R13B,0x1\nTEST R15B,R15B\nJZ 0x00406ede\nCMP dword ptr [R12 + 0x30],0x0\nJZ 0x00406ef2\nMOV EDI,dword ptr [RSP + 0x4]\nMOV ESI,R14D\nCALL 0x00407730\nTEST EAX,EAX\nJZ 0x00406ede\nCMP dword ptr [R12 + 0x30],0x2\nJNZ 0x00406ef2\nCALL 0x00402100\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x30],EAX\nXOR R13D,R13D\nXOR EDI,EDI\nMOV ESI,0x413013\nMOV EDX,0x5\nCALL 0x00402270\nMOV R15,RAX\nXOR EDI,EDI\nMOV ESI,0x4\nMOV RDX,qword ptr [RSP + 0x8]\nCALL 0x0040b880\nMOV RBX,RAX\nMOV EDI,0x1\nMOV ESI,0x4\nMOV R12,qword ptr [RSP + 0x10]\nMOV RDX,R12\nCALL 0x0040b880\nMOV RBP,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,dword ptr [RSP + 0x30]\nMOV RDX,R15\nMOV RCX,RBX\nMOV R8,RBP\nCALL 0x00402640\nXOR R15D,R15D\nMOV ECX,dword ptr [RSP + 0x4]\nJMP 0x00406d7c\nXOR R15D,R15D\nCMP byte ptr [R12 + 0x1e],0x0\nJNZ 0x0040722a\nJMP 0x004072b9\nCALL 0x00402710\nMOVSXD RBX,EAX\nSUB RSP,0x90\nLEA RSI,[0xf8 + RSP]\nMOV ECX,0x12\nMOV RDI,RSP\nMOVSQ.REP RDI,RSI\nCALL 0x00407740\nADD RSP,0x90\nMOV R13,RAX\nMOV RAX,qword ptr [0xa0 + RSP]\nMOV RCX,0x2000000000000001\nCMP RAX,RCX\nMOV ECX,0x200\nMOV EDX,0x200\nCMOVC RDX,RAX\nTEST RAX,RAX\nCMOVLE RDX,RCX\nMOV qword ptr [RSP + 0x60],RDX\nXOR ESI,ESI\nXOR EDX,EDX\nMOV ECX,0x2\nMOV EDI,R14D\nCALL 0x004090d0\nLEA RDI,[0xf8 + RSP]\nCALL 0x00407790\nMOV R15D,0xf000\nMOV ECX,dword ptr [0x80 + RSP]\nAND ECX,R15D\nCMP ECX,0x8000\nMOV byte ptr [RSP + 0x28],AL\nJNZ 0x00406fab\nMOV ECX,dword ptr [R12 + 0xc]\nCMP ECX,0x2\nSETZ DL\nCMP ECX,0x3\nMOV BPL,0x1\nJZ 0x00407030\nAND DL,AL\nJNZ 0x00407030\nMOV RBP,0x7fffffffffffffff\nSUB RBP,RBX\nSUB RSP,0x90\nLEA RSI,[0x188 + RSP]\nMOV ECX,0x12\nMOV RDI,RSP\nMOVSQ.REP RDI,RSI\nCALL 0x00407740\nADD RSP,0x90\nMOV RDI,RAX\nMOV RSI,R13\nMOV RDX,RBP\nCALL 0x00408c90\nMOV RCX,RAX\nAND R15D,dword ptr [0x110 + RSP]\nCMP R15D,0x8000\nJNZ 0x00407013\nMOV RAX,qword ptr [0x128 + RSP]\nCMP RAX,R13\nLEA RAX,[RAX + 0x1]\nCMOVC R13,RAX\nLEA R13,[RCX + R13*0x1 + -0x1]\nXOR EDX,EDX\nMOV RAX,R13\nDIV RCX\nSUB R13,RDX\nLEA RAX,[R13 + -0x1]\nCMP RAX,RBP\nCMOVNC R13,RCX\nXOR EBP,EBP\nLEA RDI,[R13 + RBX*0x1]\nCALL 0x0040d950\nMOV R15,RAX\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x004077c0\nCMP byte ptr [RSP + 0x28],0x0\nMOV ECX,R14D\nMOV RBX,qword ptr [RSP + 0x60]\nJZ 0x004070db\nMOV R11D,0x1\nMOV R9,qword ptr [0x128 + RSP]\nTEST BPL,BPL\nMOV ESI,dword ptr [RSP + 0x4]\nJZ 0x00407077\nMOV R11D,dword ptr [R12 + 0xc]\nLEA R10,[RSP + 0x40]\nMOV EDI,ECX\nMOV qword ptr [RSP + 0x28],RAX\nMOV RDX,RAX\nMOV RCX,R13\nMOV R8,RBX\nPUSH R10\nPUSH qword ptr [RSP + 0x10]\nPUSH qword ptr [RSP + 0x20]\nPUSH R11\nCALL 0x004077e0\nADD RSP,0x20\nTEST AL,AL\nJZ 0x004070c8\nMOV R13B,0x1\nMOV ECX,0x5\nCMP ECX,0x5\nJNZ 0x0040720d\nJMP 0x0040721e\nMOV RAX,qword ptr [RSP + 0x30]\nMOV byte ptr [RAX],0x1\nJMP 0x004069cc\nCMP byte ptr [RSP + 0x40],0x0\nJZ 0x00407200\nMOV ECX,R14D\nMOV RAX,qword ptr [RSP + 0x28]\nXOR EDX,EDX\nTEST BPL,BPL\nCMOVZ RBX,RDX\nXOR R9D,R9D\nCMP dword ptr [R12 + 0xc],0x3\nSETZ R9B\nSUB RSP,0x8\nLEA RBP,[RSP + 0x2f]\nLEA R10,[RSP + 0x48]\nMOV EDI,ECX\nMOV ESI,dword ptr [RSP + 0xc]\nMOV RDX,RAX\nMOV RCX,R13\nMOV R8,RBX\nPUSH RBP\nPUSH R10\nPUSH -0x1\nPUSH qword ptr [RSP + 0x28]\nPUSH qword ptr [RSP + 0x38]\nCALL 0x00407c00\nADD RSP,0x30\nMOV ECX,0x3\nTEST AL,AL\nJZ 0x004071a0\nMOV R13B,0x1\nCMP byte ptr [RSP + 0x27],0x0\nJZ 0x004071ef\nMOV RSI,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nCALL 0x00402320\nTEST EAX,EAX\nMOV ECX,0x0\nJNS 0x00407208\nCALL 0x00402100\nMOV EBX,dword ptr [RAX]\nXOR R13D,R13D\nXOR EDI,EDI\nMOV ESI,0x41302e\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x8]\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00402640\nMOV ECX,0x3\nCMP ECX,0x5\nJNZ 0x0040720d\nJMP 0x0040721e\nXOR R13D,R13D\nCMP ECX,0x5\nJNZ 0x0040720d\nJMP 0x0040721e\nXOR R13D,R13D\nXOR EDI,EDI\nMOV ESI,0x412fcd\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,RBP\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nJMP 0x00406e1a\nMOV RBP,qword ptr [RSP + 0x8]\nMOV EBX,dword ptr [RSP + 0x20]\nMOV R13D,dword ptr [RSP + 0x1c]\nJMP 0x004069cc\nXOR ECX,ECX\nCMP ECX,0x5\nJNZ 0x0040720d\nJMP 0x0040721e\nXOR R13D,R13D\nJMP 0x00406e22\nMOV ECX,0x3\nXOR R13D,R13D\nCMP ECX,0x5\nJZ 0x0040721e\nCMP ECX,0x3\nJZ 0x00406d73\nTEST ECX,ECX\nJNZ 0x00406ae9\nCMP byte ptr [R12 + 0x1e],0x0\nJZ 0x004072b9\nMOV RBX,qword ptr [0x1c0 + RSP]\nMOV RDI,RBX\nCALL 0x0040c6b0\nMOV qword ptr [RSP + 0x40],RAX\nMOV qword ptr [RSP + 0x48],RDX\nMOV RDI,RBX\nCALL 0x0040c6d0\nMOV qword ptr [RSP + 0x50],RAX\nMOV qword ptr [RSP + 0x58],RDX\nLEA RDX,[RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV RBP,qword ptr [RSP + 0x8]\nMOV RSI,RBP\nCALL 0x0040cd30\nTEST EAX,EAX\nJZ 0x004072b9\nCALL 0x00402100\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x412d49\nMOV EDX,0x5\nCALL 0x00402270\nMOV qword ptr [RSP + 0x28],RAX\nMOV EDI,0x4\nMOV RSI,RBP\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,qword ptr [RSP + 0x28]\nCALL 0x00402640\nCMP byte ptr [R12 + 0x23],0x0\nJNZ 0x004073aa\nCMP byte ptr [R12 + 0x1c],0x0\nMOV RCX,qword ptr [0x1c0 + RSP]\nJZ 0x00407317\nMOV EAX,dword ptr [RCX + 0x1c]\nCMP EAX,dword ptr [0x84 + RSP]\nMOV EBP,dword ptr [RSP + 0x4]\nJNZ 0x004072e5\nMOV EAX,dword ptr [RCX + 0x20]\nCMP EAX,dword ptr [0x88 + RSP]\nJZ 0x0040731b\nMOV RAX,qword ptr [RSP + 0x30]\nMOVZX R8D,byte ptr [RAX]\nLEA R9,[RSP + 0x68]\nMOV RDI,R12\nMOV RSI,qword ptr [RSP + 0x8]\nMOV EDX,EBP\nCALL 0x004074f0\nCMP EAX,-0x1\nJZ 0x004073aa\nTEST EAX,EAX\nJNZ 0x00407317\nAND dword ptr [RSP + 0x3c],0xfffff1ff\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [R12 + 0x26],0x0\nJZ 0x0040736d\nCMP byte ptr [0x80 + RSP],0x0\nJS 0x0040736d\nCALL 0x00402370\nMOV EBP,dword ptr [RSP + 0x4]\nTEST EAX,EAX\nJZ 0x0040736d\nMOV EDX,0x180\nMOV EDI,EBP\nMOV RSI,qword ptr [RSP + 0x8]\nCALL 0x00407f90\nMOV EBP,dword ptr [RSP + 0x4]\nTEST EAX,EAX\nJNZ 0x0040736d\nMOV EDX,dword ptr [RSP + 0x1c]\nNOT EDX\nAND EDX,dword ptr [RSP + 0x20]\nMOV EDI,EBP\nMOV RSI,qword ptr [RSP + 0x8]\nCALL 0x00407f90\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [R12 + 0x1d],0x0\nJNZ 0x0040737d\nCMP byte ptr [R12 + 0x18],0x0\nJZ 0x004073b2\nMOV RDI,qword ptr [RSP + 0x10]\nMOV ESI,R14D\nMOV RDX,qword ptr [RSP + 0x8]\nMOV ECX,EBP\nMOV R8D,dword ptr [RSP + 0x3c]\nCALL 0x00408640\nTEST EAX,EAX\nJZ 0x00406d73\nCMP byte ptr [R12 + 0x23],0x0\nJZ 0x00406d73\nXOR R13D,R13D\nJMP 0x00406d73\nCMP byte ptr [R12 + 0x2a],0x0\nJZ 0x004073c8\nMOV EDX,dword ptr [R12 + 0x10]\nMOV RDI,qword ptr [RSP + 0x8]\nMOV ESI,EBP\nJMP 0x004073e7\nCMP byte ptr [R12 + 0x1f],0x0\nJZ 0x004073f6\nCALL 0x00405c40\nNOT EAX\nAND EAX,0x1b6\nMOV RDI,qword ptr [RSP + 0x8]\nMOV ESI,dword ptr [RSP + 0x4]\nMOV EDX,EAX\nCALL 0x004086d0\nTEST EAX,EAX\nJZ 0x00406d73\nJMP 0x004073aa\nMOV EBX,dword ptr [RSP + 0x1c]\nTEST EBX,EBX\nJZ 0x00406d73\nCALL 0x00405c40\nNOT EAX\nTEST EBX,EAX\nJZ 0x00406d73\nMOV EDI,dword ptr [RSP + 0x4]\nMOV RSI,qword ptr [RSP + 0x8]\nMOV EDX,dword ptr [RSP + 0x20]\nCALL 0x00407f90\nTEST EAX,EAX\nJZ 0x00406d73\nCALL 0x00402100\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x412d61\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x8]\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00402640\nCMP byte ptr [R12 + 0x23],0x0\nJZ 0x00406d73\nJMP 0x004073aa\n'
p823
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 88 01 00 00\n4c 89 4c 24 30\n45 89 c5\n89 cb\n49 89 d4\n48 89 f5\n49 89 fe\n48 8b 84 24 c0 01 00 00\n8b 40 18\n89 44 24 3c\n45 8a 7c 24 22\n31 f6\n41 83 7c 24 04 02\n40 0f 94 c6\nc1 e6 11\n31 c0\ne8 12 28 00 00\n85 c0\n78 60\n4c 89 74 24 10\n48 8d b4 24 f8 00 00 00\n41 89 c6\n89 c7\ne8 e7 aa 00 00\n85 c0\n0f 84 82 00 00 00\ne8 ea b7 ff ff\n8b 18\n45 31 ed\n31 ff\nbe 85 2f 41 00\nba 05 00 00 00\ne8 44 b9 ff ff\n48 89 c5\nbf 04 00 00 00\n4c 8b 64 24 10\n4c 89 e6\ne8 1f 50 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne9 3b 01 00 00\ne8 a9 b7 ff ff\n8b 18\n45 31 ed\n31 ff\nbe 6a 2f 41 00\nba 05 00 00 00\ne8 03 b9 ff ff\n48 89 c5\nbf 04 00 00 00\n4c 89 f6\ne8 e3 4f 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 b2 bc ff ff\ne9 56 01 00 00\n48 8b 8c 24 c0 01 00 00\n48 8b 41 08\n48 3b 84 24 00 01 00 00\n0f 85 ab 00 00 00\n48 8b 01\n48 3b 84 24 f8 00 00 00\n0f 85 9a 00 00 00\n48 8b 44 24 30\n80 38 00\n0f 84 36 01 00 00\n48 89 ef\n44 89 ea\nf7 d2\n21 da\nbe c1 00 00 00\n31 c0\n89 54 24 08\ne8 1a 27 00 00\n89 44 24 04\ne8 11 b7 ff ff\n8b 4c 24 04\n48 89 44 24 28\n8b 10\n85 c9\n44 89 6c 24 1c\n89 5c 24 20\n0f 89 0a 02 00 00\n83 fa 11\n0f 85 01 02 00 00\nba 11 00 00 00\n41 80 7c 24 18 00\n0f 85 e8 02 00 00\n41 89 cd\n48 8d 74 24 68\n48 89 ef\ne8 cb a9 00 00\nba 11 00 00 00\n85 c0\n0f 84 90 01 00 00\n44 89 e9\n44 8b 6c 24 1c\n83 fa 15\n0f 84 cb 01 00 00\ne9 b5 02 00 00\n45 31 ed\n31 ff\nbe 95 2f 41 00\nba 05 00 00 00\ne8 04 b8 ff ff\n48 89 c3\nbf 04 00 00 00\n4c 8b 64 24 10\n4c 89 e6\ne8 df 4e 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 ae bb ff ff\n45 31 ff\n44 89 f7\ne8 23 b9 ff ff\n85 c0\n79 3c\ne8 5a b6 ff ff\n8b 18\n45 31 ed\n31 ff\nbe 42 30 41 00\nba 05 00 00 00\ne8 b4 b7 ff ff\n48 89 c5\nbf 04 00 00 00\n4c 89 e6\ne8 94 4e 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 63 bb ff ff\n4c 89 ff\ne8 db b5 ff ff\n41 80 e5 01\n41 80 e5 01\n44 89 e8\n48 81 c4 88 01 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n44 89 6c 24 1c\n89 5c 24 20\n41 80 7c 24 22 00\nb8 01 02 00 00\nbe 01 00 00 00\n0f 45 f0\n31 c0\n48 89 6c 24 08\n48 89 ef\ne8 d3 25 00 00\n89 c5\ne8 cc b5 ff ff\n49 89 c5\n41 8b 55 00\n41 80 7c 24 20 00\n74 08\n85 ed\n89 e9\n79 11\neb 4b\n85 ed\n89 e9\n78 3d\n41 8a 44 24 24\n84 c0\n74 34\n89 d3\n41 0f b6 74 24 24\n45 31 ed\n31 d2\n48 8b 7c 24 08\n89 cd\n4c 89 e1\ne8 ea f8 ff ff\n89 da\n89 e9\n41 80 7c 24 25 00\n0f 84 68 01 00 00\n45 31 ff\ne9 e9 01 00 00\n85 c9\n0f 89 58 01 00 00\n41 80 7c 24 16 00\n0f 84 4c 01 00 00\n89 54 24 28\n89 4c 24 04\n48 8b 6c 24 08\n48 89 ef\ne8 59 b5 ff ff\n85 c0\n0f 84 b4 00 00 00\n45 8b 7d 00\n45 31 ed\n31 ff\nbe 9b 24 41 00\ne9 24 02 00 00\nb8 00 f0 00 00\n23 84 24 80 00 00 00\n3d 00 a0 00 00\n44 89 e9\n44 8b 6c 24 1c\n75 28\n41 80 7c 24 2f 00\n0f 84 b1 05 00 00\nbe 41 00 00 00\n31 c0\n48 89 ef\n8b 54 24 08\ne8 f4 24 00 00\n89 c1\n48 8b 44 24 28\n8b 10\n83 fa 15\n0f 85 ef 00 00 00\n85 c9\n0f 89 e7 00 00 00\n80 7d 00 00\n74 35\n48 89 ef\n89 cb\n41 89 d5\ne8 57 b6 ff ff\n44 89 ea\n89 d9\n44 8b 6c 24 1c\n8b 5c 24 20\n80 7c 05 ff 2f\nb8 14 00 00 00\n0f 44 d0\n85 c9\n0f 89 b9 00 00 00\ne9 6d 01 00 00\nba 15 00 00 00\n85 c9\n0f 89 a7 00 00 00\ne9 5b 01 00 00\n41 80 7c 24 2d 00\n74 38\n31 ff\nbe 61 27 41 00\nba 05 00 00 00\ne8 e4 b5 ff ff\n49 89 c5\nbf 04 00 00 00\n48 8b 74 24 08\ne8 c2 4c 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n4c 89 ee\n48 89 ca\ne8 4d b9 ff ff\n48 8b 44 24 30\nc6 00 01\n41 80 7c 24 20 00\n0f 84 15 05 00 00\nba 01 00 00 00\n48 8b 7c 24 10\n48 8b 74 24 08\n4c 89 e1\ne8 02 f8 ff ff\n84 c0\n8b 4c 24 04\n8b 54 24 28\n0f 84 0a 05 00 00\n48 8b 44 24 30\n80 38 00\n48 8b 6c 24 08\n8b 5c 24 20\n44 8b 6c 24 1c\n0f 85 c2 fc ff ff\n45 31 ed\n85 c9\n0f 88 b9 00 00 00\n48 89 6c 24 08\n48 8d 74 24 68\n89 4c 24 04\n89 cf\ne8 c6 a6 00 00\n85 c0\n0f 84 fd 00 00 00\ne8 c9 b3 ff ff\n8b 18\n45 31 ed\n31 ff\nbe 85 2f 41 00\nba 05 00 00 00\ne8 23 b5 ff ff\n48 89 c5\nbf 04 00 00 00\n48 8b 74 24 08\ne8 01 4c 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 d0 b8 ff ff\n45 31 ff\n8b 4c 24 04\n4c 8b 64 24 10\n89 cf\ne8 3d b6 ff ff\n85 c0\n0f 89 0a fd ff ff\ne8 70 b3 ff ff\n8b 18\n45 31 ed\n31 ff\nbe 42 30 41 00\nba 05 00 00 00\ne8 ca b4 ff ff\n48 89 c5\nbf 04 00 00 00\n48 8b 74 24 08\ne8 a8 4b 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 77 b8 ff ff\ne9 c7 fc ff ff\n83 fa 02\n75 16\n48 8b 44 24 30\n80 38 00\n75 0c\n41 80 7c 24 18 00\n0f 84 d2 02 00 00\n45 31 ed\n31 ff\n41 89 d7\nbe f5 2f 41 00\nba 05 00 00 00\ne8 70 b4 ff ff\n48 89 c3\nbf 04 00 00 00\n48 89 ee\ne8 50 4b 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 fe\n48 89 da\ne8 1e b8 ff ff\n45 31 ff\n4c 8b 64 24 10\ne9 66 fc ff ff\n44 89 6c 24 1c\n89 5c 24 20\n41 b5 01\n45 84 ff\n0f 84 9a 00 00 00\n41 83 7c 24 30 00\n0f 84 a2 00 00 00\n8b 7c 24 04\n44 89 f6\ne8 d4 08 00 00\n85 c0\n74 7e\n41 83 7c 24 30 02\n0f 85 86 00 00 00\ne8 8f b2 ff ff\n8b 00\n89 44 24 30\n45 31 ed\n31 ff\nbe 13 30 41 00\nba 05 00 00 00\ne8 e5 b3 ff ff\n49 89 c7\n31 ff\nbe 04 00 00 00\n48 8b 54 24 08\ne8 e1 49 00 00\n48 89 c3\nbf 01 00 00 00\nbe 04 00 00 00\n4c 8b 64 24 10\n4c 89 e2\ne8 c7 49 00 00\n48 89 c5\n31 ff\n31 c0\n8b 74 24 30\n4c 89 fa\n48 89 d9\n49 89 e8\ne8 6e b7 ff ff\n45 31 ff\n8b 4c 24 04\ne9 9e fe ff ff\n45 31 ff\n41 80 7c 24 1e 00\n0f 85 3d 03 00 00\ne9 c7 03 00 00\ne8 19 b8 ff ff\n48 63 d8\n48 81 ec 90 00 00 00\n48 8d b4 24 f8 00 00 00\nb9 12 00 00 00\n48 89 e7\nf3 48 a5\ne8 27 08 00 00\n48 81 c4 90 00 00 00\n49 89 c5\n48 8b 84 24 a0 00 00 00\n48 b9 01 00 00 00 00 00 00 20\n48 39 c8\nb9 00 02 00 00\nba 00 02 00 00\n48 0f 42 d0\n48 85 c0\n48 0f 4e d1\n48 89 54 24 60\n31 f6\n31 d2\nb9 02 00 00 00\n44 89 f7\ne8 6d 21 00 00\n48 8d bc 24 f8 00 00 00\ne8 20 08 00 00\n41 bf 00 f0 00 00\n8b 8c 24 80 00 00 00\n44 21 f9\n81 f9 00 80 00 00\n88 44 24 28\n75 1f\n41 8b 4c 24 0c\n83 f9 02\n0f 94 c2\n83 f9 03\n40 b5 01\n0f 84 8d 00 00 00\n20 c2\n0f 85 85 00 00 00\n48 bd ff ff ff ff ff ff ff 7f\n48 29 dd\n48 81 ec 90 00 00 00\n48 8d b4 24 88 01 00 00\nb9 12 00 00 00\n48 89 e7\nf3 48 a5\ne8 69 07 00 00\n48 81 c4 90 00 00 00\n48 89 c7\n4c 89 ee\n48 89 ea\ne8 a4 1c 00 00\n48 89 c1\n44 23 bc 24 10 01 00 00\n41 81 ff 00 80 00 00\n75 13\n48 8b 84 24 28 01 00 00\n4c 39 e8\n48 8d 40 01\n4c 0f 42 e8\n4e 8d 6c 29 ff\n31 d2\n4c 89 e8\n48 f7 f1\n49 29 d5\n49 8d 45 ff\n48 39 e8\n4c 0f 43 e9\n31 ed\n49 8d 7c 1d 00\ne8 16 69 00 00\n49 89 c7\n4c 89 ff\n48 89 de\ne8 78 07 00 00\n80 7c 24 28 00\n44 89 f1\n48 8b 5c 24 60\n0f 84 80 00 00 00\n41 bb 01 00 00 00\n4c 8b 8c 24 28 01 00 00\n40 84 ed\n8b 74 24 04\n74 05\n45 8b 5c 24 0c\n4c 8d 54 24 40\n89 cf\n48 89 44 24 28\n48 89 c2\n4c 89 e9\n49 89 d8\n41 52\nff 74 24 10\nff 74 24 20\n41 53\ne8 43 07 00 00\n48 83 c4 20\n84 c0\n74 23\n41 b5 01\nb9 05 00 00 00\n83 f9 05\n0f 85 57 01 00 00\ne9 63 01 00 00\n48 8b 44 24 30\nc6 00 01\ne9 04 f9 ff ff\n80 7c 24 40 00\n0f 84 2d 01 00 00\n44 89 f1\n48 8b 44 24 28\n31 d2\n40 84 ed\n48 0f 44 da\n45 31 c9\n41 83 7c 24 0c 03\n41 0f 94 c1\n48 83 ec 08\n48 8d 6c 24 2f\n4c 8d 54 24 48\n89 cf\n8b 74 24 0c\n48 89 c2\n4c 89 e9\n49 89 d8\n55\n41 52\n6a ff\nff 74 24 28\nff 74 24 38\ne8 e0 0a 00 00\n48 83 c4 30\nb9 03 00 00 00\n84 c0\n74 73\n41 b5 01\n80 7c 24 27 00\n0f 84 b4 00 00 00\n48 8b 74 24 40\n8b 7c 24 04\ne8 d7 b1 ff ff\n85 c0\nb9 00 00 00 00\n0f 89 b2 00 00 00\ne8 a5 af ff ff\n8b 18\n45 31 ed\n31 ff\nbe 2e 30 41 00\nba 05 00 00 00\ne8 ff b0 ff ff\n48 89 c5\nbf 04 00 00 00\n48 8b 74 24 08\ne8 dd 47 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 ac b4 ff ff\nb9 03 00 00 00\n83 f9 05\n75 6f\neb 7e\n45 31 ed\n83 f9 05\n75 65\neb 74\n45 31 ed\n31 ff\nbe cd 2f 41 00\nba 05 00 00 00\ne8 b2 b0 ff ff\n48 89 c3\nbf 04 00 00 00\n48 89 ee\ne8 92 47 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\ne9 3e fc ff ff\n48 8b 6c 24 08\n8b 5c 24 20\n44 8b 6c 24 1c\ne9 dd f7 ff ff\n31 c9\n83 f9 05\n75 17\neb 26\n45 31 ed\ne9 22 fc ff ff\nb9 03 00 00 00\n45 31 ed\n83 f9 05\n74 11\n83 f9 03\n0f 84 5d fb ff ff\n85 c9\n0f 85 cb f8 ff ff\n41 80 7c 24 1e 00\n0f 84 8f 00 00 00\n48 8b 9c 24 c0 01 00 00\n48 89 df\ne8 76 54 00 00\n48 89 44 24 40\n48 89 54 24 48\n48 89 df\ne8 84 54 00 00\n48 89 44 24 50\n48 89 54 24 58\n48 8d 54 24 40\n8b 7c 24 04\n48 8b 6c 24 08\n48 89 ee\ne8 c4 5a 00 00\n85 c0\n74 49\ne8 8b ae ff ff\n8b 18\n31 ff\nbe 49 2d 41 00\nba 05 00 00 00\ne8 e8 af ff ff\n48 89 44 24 28\nbf 04 00 00 00\n48 89 ee\ne8 c6 46 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 8b 54 24 28\ne8 93 b3 ff ff\n41 80 7c 24 23 00\n0f 85 f1 00 00 00\n41 80 7c 24 1c 00\n48 8b 8c 24 c0 01 00 00\n74 4e\n8b 41 1c\n3b 84 24 84 00 00 00\n8b 6c 24 04\n75 0c\n8b 41 20\n3b 84 24 88 00 00 00\n74 36\n48 8b 44 24 30\n44 0f b6 00\n4c 8d 4c 24 68\n4c 89 e7\n48 8b 74 24 08\n89 ea\ne8 ee 01 00 00\n83 f8 ff\n0f 84 9f 00 00 00\n85 c0\n75 08\n81 64 24 3c ff f1 ff ff\n8b 6c 24 04\n41 80 7c 24 26 00\n74 4a\n80 bc 24 80 00 00 00 00\n78 40\ne8 3e b0 ff ff\n8b 6c 24 04\n85 c0\n74 33\nba 80 01 00 00\n89 ef\n48 8b 74 24 08\ne8 45 0c 00 00\n8b 6c 24 04\n85 c0\n75 1a\n8b 54 24 1c\nf7 d2\n23 54 24 20\n89 ef\n48 8b 74 24 08\ne8 27 0c 00 00\n8b 6c 24 04\n41 80 7c 24 1d 00\n75 08\n41 80 7c 24 18 00\n74 35\n48 8b 7c 24 10\n44 89 f6\n48 8b 54 24 08\n89 e9\n44 8b 44 24 3c\ne8 aa 12 00 00\n85 c0\n0f 84 d5 f9 ff ff\n41 80 7c 24 23 00\n0f 84 c9 f9 ff ff\n45 31 ed\ne9 c1 f9 ff ff\n41 80 7c 24 2a 00\n74 0e\n41 8b 54 24 10\n48 8b 7c 24 08\n89 ee\neb 1f\n41 80 7c 24 1f 00\n74 26\ne8 6b e8 ff ff\nf7 d0\n25 b6 01 00 00\n48 8b 7c 24 08\n8b 74 24 04\n89 c2\ne8 e4 12 00 00\n85 c0\n0f 84 7f f9 ff ff\neb b4\n8b 5c 24 1c\n85 db\n0f 84 71 f9 ff ff\ne8 39 e8 ff ff\nf7 d0\n85 c3\n0f 84 62 f9 ff ff\n8b 7c 24 04\n48 8b 74 24 08\n8b 54 24 20\ne8 6d 0b 00 00\n85 c0\n0f 84 48 f9 ff ff\ne8 d0 ac ff ff\n8b 18\n31 ff\nbe 61 2d 41 00\nba 05 00 00 00\ne8 2d ae ff ff\n48 89 c5\nbf 04 00 00 00\n48 8b 74 24 08\ne8 0b 45 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 da b1 ff ff\n41 80 7c 24 23 00\n0f 84 01 f9 ff ff\ne9 33 ff ff ff\n'
p824
S'.text:00000000004068a0\n.text:00000000004068a1\n.text:00000000004068a3\n.text:00000000004068a5\n.text:00000000004068a7\n.text:00000000004068a9\n.text:00000000004068aa\n.text:00000000004068b1\n.text:00000000004068b6\n.text:00000000004068b9\n.text:00000000004068bb\n.text:00000000004068be\n.text:00000000004068c1\n.text:00000000004068c4\n.text:00000000004068cc\n.text:00000000004068cf\n.text:00000000004068d3\n.text:00000000004068d8\n.text:00000000004068da\n.text:00000000004068e0\n.text:00000000004068e4\n.text:00000000004068e7\n.text:00000000004068e9\n.text:00000000004068ee\n.text:00000000004068f0\n.text:00000000004068f2\n.text:00000000004068f7\n.text:00000000004068ff\n.text:0000000000406902\n.text:0000000000406904\n.text:0000000000406909\n.text:000000000040690b\n.text:0000000000406911\n.text:0000000000406916\n.text:0000000000406918\n.text:000000000040691b\n.text:000000000040691d\n.text:0000000000406922\n.text:0000000000406927\n.text:000000000040692c\n.text:000000000040692f\n.text:0000000000406934\n.text:0000000000406939\n.text:000000000040693c\n.text:0000000000406941\n.text:0000000000406944\n.text:0000000000406946\n.text:0000000000406948\n.text:000000000040694a\n.text:000000000040694d\n.text:0000000000406952\n.text:0000000000406957\n.text:0000000000406959\n.text:000000000040695c\n.text:000000000040695e\n.text:0000000000406963\n.text:0000000000406968\n.text:000000000040696d\n.text:0000000000406970\n.text:0000000000406975\n.text:0000000000406978\n.text:000000000040697d\n.text:0000000000406980\n.text:0000000000406982\n.text:0000000000406984\n.text:0000000000406986\n.text:0000000000406989\n.text:000000000040698e\n.text:0000000000406993\n.text:000000000040699b\n.text:000000000040699f\n.text:00000000004069a7\n.text:00000000004069ad\n.text:00000000004069b0\n.text:00000000004069b8\n.text:00000000004069be\n.text:00000000004069c3\n.text:00000000004069c6\n.text:00000000004069cc\n.text:00000000004069cf\n.text:00000000004069d2\n.text:00000000004069d4\n.text:00000000004069d6\n.text:00000000004069db\n.text:00000000004069dd\n.text:00000000004069e1\n.text:00000000004069e6\n.text:00000000004069ea\n.text:00000000004069ef\n.text:00000000004069f3\n.text:00000000004069f8\n.text:00000000004069fa\n.text:00000000004069fc\n.text:0000000000406a01\n.text:0000000000406a05\n.text:0000000000406a0b\n.text:0000000000406a0e\n.text:0000000000406a14\n.text:0000000000406a19\n.text:0000000000406a1f\n.text:0000000000406a25\n.text:0000000000406a28\n.text:0000000000406a2d\n.text:0000000000406a30\n.text:0000000000406a35\n.text:0000000000406a3a\n.text:0000000000406a3c\n.text:0000000000406a42\n.text:0000000000406a45\n.text:0000000000406a4a\n.text:0000000000406a4d\n.text:0000000000406a53\n.text:0000000000406a58\n.text:0000000000406a5b\n.text:0000000000406a5d\n.text:0000000000406a62\n.text:0000000000406a67\n.text:0000000000406a6c\n.text:0000000000406a6f\n.text:0000000000406a74\n.text:0000000000406a79\n.text:0000000000406a7c\n.text:0000000000406a81\n.text:0000000000406a84\n.text:0000000000406a86\n.text:0000000000406a88\n.text:0000000000406a8a\n.text:0000000000406a8d\n.text:0000000000406a92\n.text:0000000000406a95\n.text:0000000000406a98\n.text:0000000000406a9d\n.text:0000000000406a9f\n.text:0000000000406aa1\n.text:0000000000406aa6\n.text:0000000000406aa8\n.text:0000000000406aab\n.text:0000000000406aad\n.text:0000000000406ab2\n.text:0000000000406ab7\n.text:0000000000406abc\n.text:0000000000406abf\n.text:0000000000406ac4\n.text:0000000000406ac7\n.text:0000000000406acc\n.text:0000000000406acf\n.text:0000000000406ad1\n.text:0000000000406ad3\n.text:0000000000406ad5\n.text:0000000000406ad8\n.text:0000000000406add\n.text:0000000000406ae0\n.text:0000000000406ae5\n.text:0000000000406ae9\n.text:0000000000406aed\n.text:0000000000406af0\n.text:0000000000406af7\n.text:0000000000406af8\n.text:0000000000406afa\n.text:0000000000406afc\n.text:0000000000406afe\n.text:0000000000406b00\n.text:0000000000406b01\n.text:0000000000406b02\n.text:0000000000406b07\n.text:0000000000406b0b\n.text:0000000000406b11\n.text:0000000000406b16\n.text:0000000000406b1b\n.text:0000000000406b1e\n.text:0000000000406b20\n.text:0000000000406b25\n.text:0000000000406b28\n.text:0000000000406b2d\n.text:0000000000406b2f\n.text:0000000000406b34\n.text:0000000000406b37\n.text:0000000000406b3b\n.text:0000000000406b41\n.text:0000000000406b43\n.text:0000000000406b45\n.text:0000000000406b47\n.text:0000000000406b49\n.text:0000000000406b4b\n.text:0000000000406b4d\n.text:0000000000406b4f\n.text:0000000000406b51\n.text:0000000000406b56\n.text:0000000000406b58\n.text:0000000000406b5a\n.text:0000000000406b5c\n.text:0000000000406b62\n.text:0000000000406b65\n.text:0000000000406b67\n.text:0000000000406b6c\n.text:0000000000406b6e\n.text:0000000000406b71\n.text:0000000000406b76\n.text:0000000000406b78\n.text:0000000000406b7a\n.text:0000000000406b80\n.text:0000000000406b86\n.text:0000000000406b89\n.text:0000000000406b8e\n.text:0000000000406b90\n.text:0000000000406b96\n.text:0000000000406b9c\n.text:0000000000406ba2\n.text:0000000000406ba6\n.text:0000000000406baa\n.text:0000000000406baf\n.text:0000000000406bb2\n.text:0000000000406bb7\n.text:0000000000406bb9\n.text:0000000000406bbf\n.text:0000000000406bc3\n.text:0000000000406bc6\n.text:0000000000406bc8\n.text:0000000000406bcd\n.text:0000000000406bd2\n.text:0000000000406bd7\n.text:0000000000406bde\n.text:0000000000406be3\n.text:0000000000406be6\n.text:0000000000406beb\n.text:0000000000406bed\n.text:0000000000406bf3\n.text:0000000000406bf9\n.text:0000000000406bfe\n.text:0000000000406c00\n.text:0000000000406c03\n.text:0000000000406c07\n.text:0000000000406c0c\n.text:0000000000406c0e\n.text:0000000000406c13\n.text:0000000000406c15\n.text:0000000000406c18\n.text:0000000000406c1e\n.text:0000000000406c20\n.text:0000000000406c26\n.text:0000000000406c2a\n.text:0000000000406c2c\n.text:0000000000406c2f\n.text:0000000000406c31\n.text:0000000000406c34\n.text:0000000000406c39\n.text:0000000000406c3c\n.text:0000000000406c3e\n.text:0000000000406c43\n.text:0000000000406c47\n.text:0000000000406c4c\n.text:0000000000406c51\n.text:0000000000406c54\n.text:0000000000406c56\n.text:0000000000406c5c\n.text:0000000000406c61\n.text:0000000000406c66\n.text:0000000000406c68\n.text:0000000000406c6e\n.text:0000000000406c73\n.text:0000000000406c79\n.text:0000000000406c7b\n.text:0000000000406c7d\n.text:0000000000406c82\n.text:0000000000406c87\n.text:0000000000406c8c\n.text:0000000000406c8f\n.text:0000000000406c94\n.text:0000000000406c99\n.text:0000000000406c9e\n.text:0000000000406ca1\n.text:0000000000406ca6\n.text:0000000000406ca8\n.text:0000000000406cab\n.text:0000000000406cae\n.text:0000000000406cb3\n.text:0000000000406cb8\n.text:0000000000406cbb\n.text:0000000000406cc1\n.text:0000000000406cc7\n.text:0000000000406ccc\n.text:0000000000406cd1\n.text:0000000000406cd6\n.text:0000000000406cd9\n.text:0000000000406cde\n.text:0000000000406ce0\n.text:0000000000406ce4\n.text:0000000000406ce8\n.text:0000000000406cee\n.text:0000000000406cf3\n.text:0000000000406cf6\n.text:0000000000406cfb\n.text:0000000000406cff\n.text:0000000000406d04\n.text:0000000000406d0a\n.text:0000000000406d0d\n.text:0000000000406d0f\n.text:0000000000406d15\n.text:0000000000406d1a\n.text:0000000000406d1f\n.text:0000000000406d23\n.text:0000000000406d25\n.text:0000000000406d2a\n.text:0000000000406d2c\n.text:0000000000406d32\n.text:0000000000406d37\n.text:0000000000406d39\n.text:0000000000406d3c\n.text:0000000000406d3e\n.text:0000000000406d43\n.text:0000000000406d48\n.text:0000000000406d4d\n.text:0000000000406d50\n.text:0000000000406d55\n.text:0000000000406d5a\n.text:0000000000406d5f\n.text:0000000000406d62\n.text:0000000000406d64\n.text:0000000000406d66\n.text:0000000000406d68\n.text:0000000000406d6b\n.text:0000000000406d70\n.text:0000000000406d73\n.text:0000000000406d77\n.text:0000000000406d7c\n.text:0000000000406d7e\n.text:0000000000406d83\n.text:0000000000406d85\n.text:0000000000406d8b\n.text:0000000000406d90\n.text:0000000000406d92\n.text:0000000000406d95\n.text:0000000000406d97\n.text:0000000000406d9c\n.text:0000000000406da1\n.text:0000000000406da6\n.text:0000000000406da9\n.text:0000000000406dae\n.text:0000000000406db3\n.text:0000000000406db8\n.text:0000000000406dbb\n.text:0000000000406dbd\n.text:0000000000406dbf\n.text:0000000000406dc1\n.text:0000000000406dc4\n.text:0000000000406dc9\n.text:0000000000406dce\n.text:0000000000406dd1\n.text:0000000000406dd3\n.text:0000000000406dd8\n.text:0000000000406ddb\n.text:0000000000406ddd\n.text:0000000000406de3\n.text:0000000000406de9\n.text:0000000000406dec\n.text:0000000000406dee\n.text:0000000000406df1\n.text:0000000000406df6\n.text:0000000000406dfb\n.text:0000000000406e00\n.text:0000000000406e03\n.text:0000000000406e08\n.text:0000000000406e0b\n.text:0000000000406e10\n.text:0000000000406e13\n.text:0000000000406e15\n.text:0000000000406e17\n.text:0000000000406e1a\n.text:0000000000406e1d\n.text:0000000000406e22\n.text:0000000000406e25\n.text:0000000000406e2a\n.text:0000000000406e2f\n.text:0000000000406e34\n.text:0000000000406e38\n.text:0000000000406e3b\n.text:0000000000406e3e\n.text:0000000000406e44\n.text:0000000000406e4a\n.text:0000000000406e50\n.text:0000000000406e54\n.text:0000000000406e57\n.text:0000000000406e5c\n.text:0000000000406e5e\n.text:0000000000406e60\n.text:0000000000406e66\n.text:0000000000406e6c\n.text:0000000000406e71\n.text:0000000000406e73\n.text:0000000000406e77\n.text:0000000000406e7a\n.text:0000000000406e7c\n.text:0000000000406e81\n.text:0000000000406e86\n.text:0000000000406e8b\n.text:0000000000406e8e\n.text:0000000000406e90\n.text:0000000000406e95\n.text:0000000000406e9a\n.text:0000000000406e9f\n.text:0000000000406ea2\n.text:0000000000406ea7\n.text:0000000000406eac\n.text:0000000000406eb1\n.text:0000000000406eb4\n.text:0000000000406eb9\n.text:0000000000406ebc\n.text:0000000000406ebe\n.text:0000000000406ec0\n.text:0000000000406ec4\n.text:0000000000406ec7\n.text:0000000000406eca\n.text:0000000000406ecd\n.text:0000000000406ed2\n.text:0000000000406ed5\n.text:0000000000406ed9\n.text:0000000000406ede\n.text:0000000000406ee1\n.text:0000000000406ee7\n.text:0000000000406eed\n.text:0000000000406ef2\n.text:0000000000406ef7\n.text:0000000000406efa\n.text:0000000000406f01\n.text:0000000000406f09\n.text:0000000000406f0e\n.text:0000000000406f11\n.text:0000000000406f14\n.text:0000000000406f19\n.text:0000000000406f20\n.text:0000000000406f23\n.text:0000000000406f2b\n.text:0000000000406f35\n.text:0000000000406f38\n.text:0000000000406f3d\n.text:0000000000406f42\n.text:0000000000406f46\n.text:0000000000406f49\n.text:0000000000406f4d\n.text:0000000000406f52\n.text:0000000000406f54\n.text:0000000000406f56\n.text:0000000000406f5b\n.text:0000000000406f5e\n.text:0000000000406f63\n.text:0000000000406f6b\n.text:0000000000406f70\n.text:0000000000406f76\n.text:0000000000406f7d\n.text:0000000000406f80\n.text:0000000000406f86\n.text:0000000000406f8a\n.text:0000000000406f8c\n.text:0000000000406f91\n.text:0000000000406f94\n.text:0000000000406f97\n.text:0000000000406f9a\n.text:0000000000406f9d\n.text:0000000000406fa3\n.text:0000000000406fa5\n.text:0000000000406fab\n.text:0000000000406fb5\n.text:0000000000406fb8\n.text:0000000000406fbf\n.text:0000000000406fc7\n.text:0000000000406fcc\n.text:0000000000406fcf\n.text:0000000000406fd2\n.text:0000000000406fd7\n.text:0000000000406fde\n.text:0000000000406fe1\n.text:0000000000406fe4\n.text:0000000000406fe7\n.text:0000000000406fec\n.text:0000000000406fef\n.text:0000000000406ff7\n.text:0000000000406ffe\n.text:0000000000407000\n.text:0000000000407008\n.text:000000000040700b\n.text:000000000040700f\n.text:0000000000407013\n.text:0000000000407018\n.text:000000000040701a\n.text:000000000040701d\n.text:0000000000407020\n.text:0000000000407023\n.text:0000000000407027\n.text:000000000040702a\n.text:000000000040702e\n.text:0000000000407030\n.text:0000000000407035\n.text:000000000040703a\n.text:000000000040703d\n.text:0000000000407040\n.text:0000000000407043\n.text:0000000000407048\n.text:000000000040704d\n.text:0000000000407050\n.text:0000000000407055\n.text:000000000040705b\n.text:0000000000407061\n.text:0000000000407069\n.text:000000000040706c\n.text:0000000000407070\n.text:0000000000407072\n.text:0000000000407077\n.text:000000000040707c\n.text:000000000040707e\n.text:0000000000407083\n.text:0000000000407086\n.text:0000000000407089\n.text:000000000040708c\n.text:000000000040708e\n.text:0000000000407092\n.text:0000000000407096\n.text:0000000000407098\n.text:000000000040709d\n.text:00000000004070a1\n.text:00000000004070a3\n.text:00000000004070a5\n.text:00000000004070a8\n.text:00000000004070ad\n.text:00000000004070b0\n.text:00000000004070b6\n.text:00000000004070bb\n.text:00000000004070c0\n.text:00000000004070c3\n.text:00000000004070c8\n.text:00000000004070cd\n.text:00000000004070d3\n.text:00000000004070d6\n.text:00000000004070db\n.text:00000000004070dd\n.text:00000000004070e0\n.text:00000000004070e4\n.text:00000000004070e7\n.text:00000000004070ed\n.text:00000000004070f1\n.text:00000000004070f5\n.text:00000000004070fa\n.text:00000000004070ff\n.text:0000000000407101\n.text:0000000000407105\n.text:0000000000407108\n.text:000000000040710b\n.text:000000000040710e\n.text:000000000040710f\n.text:0000000000407111\n.text:0000000000407113\n.text:0000000000407117\n.text:000000000040711b\n.text:0000000000407120\n.text:0000000000407124\n.text:0000000000407129\n.text:000000000040712b\n.text:000000000040712d\n.text:0000000000407130\n.text:0000000000407135\n.text:000000000040713b\n.text:0000000000407140\n.text:0000000000407144\n.text:0000000000407149\n.text:000000000040714b\n.text:0000000000407150\n.text:0000000000407156\n.text:000000000040715b\n.text:000000000040715d\n.text:0000000000407160\n.text:0000000000407162\n.text:0000000000407167\n.text:000000000040716c\n.text:0000000000407171\n.text:0000000000407174\n.text:0000000000407179\n.text:000000000040717e\n.text:0000000000407183\n.text:0000000000407186\n.text:0000000000407188\n.text:000000000040718a\n.text:000000000040718c\n.text:000000000040718f\n.text:0000000000407194\n.text:0000000000407199\n.text:000000000040719c\n.text:000000000040719e\n.text:00000000004071a0\n.text:00000000004071a3\n.text:00000000004071a6\n.text:00000000004071a8\n.text:00000000004071aa\n.text:00000000004071ad\n.text:00000000004071af\n.text:00000000004071b4\n.text:00000000004071b9\n.text:00000000004071be\n.text:00000000004071c1\n.text:00000000004071c6\n.text:00000000004071c9\n.text:00000000004071ce\n.text:00000000004071d1\n.text:00000000004071d3\n.text:00000000004071d5\n.text:00000000004071d7\n.text:00000000004071dc\n.text:00000000004071e1\n.text:00000000004071e5\n.text:00000000004071ea\n.text:00000000004071ef\n.text:00000000004071f1\n.text:00000000004071f4\n.text:00000000004071f6\n.text:00000000004071f8\n.text:00000000004071fb\n.text:0000000000407200\n.text:0000000000407205\n.text:0000000000407208\n.text:000000000040720b\n.text:000000000040720d\n.text:0000000000407210\n.text:0000000000407216\n.text:0000000000407218\n.text:000000000040721e\n.text:0000000000407224\n.text:000000000040722a\n.text:0000000000407232\n.text:0000000000407235\n.text:000000000040723a\n.text:000000000040723f\n.text:0000000000407244\n.text:0000000000407247\n.text:000000000040724c\n.text:0000000000407251\n.text:0000000000407256\n.text:000000000040725b\n.text:000000000040725f\n.text:0000000000407264\n.text:0000000000407267\n.text:000000000040726c\n.text:000000000040726e\n.text:0000000000407270\n.text:0000000000407275\n.text:0000000000407277\n.text:0000000000407279\n.text:000000000040727e\n.text:0000000000407283\n.text:0000000000407288\n.text:000000000040728d\n.text:0000000000407292\n.text:0000000000407295\n.text:000000000040729a\n.text:000000000040729d\n.text:000000000040729f\n.text:00000000004072a1\n.text:00000000004072a3\n.text:00000000004072a8\n.text:00000000004072ad\n.text:00000000004072b3\n.text:00000000004072b9\n.text:00000000004072bf\n.text:00000000004072c7\n.text:00000000004072c9\n.text:00000000004072cc\n.text:00000000004072d3\n.text:00000000004072d7\n.text:00000000004072d9\n.text:00000000004072dc\n.text:00000000004072e3\n.text:00000000004072e5\n.text:00000000004072ea\n.text:00000000004072ee\n.text:00000000004072f3\n.text:00000000004072f6\n.text:00000000004072fb\n.text:00000000004072fd\n.text:0000000000407302\n.text:0000000000407305\n.text:000000000040730b\n.text:000000000040730d\n.text:000000000040730f\n.text:0000000000407317\n.text:000000000040731b\n.text:0000000000407321\n.text:0000000000407323\n.text:000000000040732b\n.text:000000000040732d\n.text:0000000000407332\n.text:0000000000407336\n.text:0000000000407338\n.text:000000000040733a\n.text:000000000040733f\n.text:0000000000407341\n.text:0000000000407346\n.text:000000000040734b\n.text:000000000040734f\n.text:0000000000407351\n.text:0000000000407353\n.text:0000000000407357\n.text:0000000000407359\n.text:000000000040735d\n.text:000000000040735f\n.text:0000000000407364\n.text:0000000000407369\n.text:000000000040736d\n.text:0000000000407373\n.text:0000000000407375\n.text:000000000040737b\n.text:000000000040737d\n.text:0000000000407382\n.text:0000000000407385\n.text:000000000040738a\n.text:000000000040738c\n.text:0000000000407391\n.text:0000000000407396\n.text:0000000000407398\n.text:000000000040739e\n.text:00000000004073a4\n.text:00000000004073aa\n.text:00000000004073ad\n.text:00000000004073b2\n.text:00000000004073b8\n.text:00000000004073ba\n.text:00000000004073bf\n.text:00000000004073c4\n.text:00000000004073c6\n.text:00000000004073c8\n.text:00000000004073ce\n.text:00000000004073d0\n.text:00000000004073d5\n.text:00000000004073d7\n.text:00000000004073dc\n.text:00000000004073e1\n.text:00000000004073e5\n.text:00000000004073e7\n.text:00000000004073ec\n.text:00000000004073ee\n.text:00000000004073f4\n.text:00000000004073f6\n.text:00000000004073fa\n.text:00000000004073fc\n.text:0000000000407402\n.text:0000000000407407\n.text:0000000000407409\n.text:000000000040740b\n.text:0000000000407411\n.text:0000000000407415\n.text:000000000040741a\n.text:000000000040741e\n.text:0000000000407423\n.text:0000000000407425\n.text:000000000040742b\n.text:0000000000407430\n.text:0000000000407432\n.text:0000000000407434\n.text:0000000000407439\n.text:000000000040743e\n.text:0000000000407443\n.text:0000000000407446\n.text:000000000040744b\n.text:0000000000407450\n.text:0000000000407455\n.text:0000000000407458\n.text:000000000040745a\n.text:000000000040745c\n.text:000000000040745e\n.text:0000000000407461\n.text:0000000000407466\n.text:000000000040746c\n.text:0000000000407472\n'
p825
tp826
sS'get_stat_atime_ns'
p827
(S'\n__stdcall get_stat_atime_ns(stat * st)\n'
p828
V\u000along get_stat_atime_ns(stat *st)\u000a\u000a{\u000a  return (st->st_atim).tv_nsec;\u000a}\u000a\u000a
p829
S'MOV RAX,qword ptr [RDI + 0x50]\nRET\n'
p830
S'48 8b 47 50\nc3\n'
p831
S'.text:000000000040c670\n.text:000000000040c674\n'
p832
tp833
sS'mdir_name'
p834
(S'\n__stdcall mdir_name(char * file)\n'
p835
V\u000achar * mdir_name(char *file)\u000a\u000a{\u000a  size_t __n;\u000a  char *__dest;\u000a  \u000a  __n = dir_len(file);\u000a  __dest = (char *)malloc(__n + 1 + (ulong)(__n == 0));\u000a  if (__dest == (char *)0x0) {\u000a    __dest = (char *)0x0;\u000a  }\u000a  else {\u000a    memcpy(__dest,file,__n);\u000a    if (__n == 0) {\u000a      *__dest = '.';\u000a      __n = 1;\u000a    }\u000a    __dest[__n] = 0;\u000a  }\u000a  return __dest;\u000a}\u000a\u000a
p836
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nCALL 0x00408f60\nMOV RBX,RAX\nXOR EAX,EAX\nTEST RBX,RBX\nSETZ AL\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00402540\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00408fee\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,RBX\nCALL 0x004024d0\nTEST RBX,RBX\nJNZ 0x00408fe7\nMOV byte ptr [R14 + RBX*0x1],0x2e\nMOV EBX,0x1\nMOV byte ptr [R14 + RBX*0x1],0x0\nJMP 0x00408ff1\nXOR R14D,R14D\nMOV RAX,R14\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p837
S'41 57\n41 56\n53\n49 89 ff\ne8 b3 ff ff ff\n48 89 c3\n31 c0\n48 85 db\n0f 94 c0\n48 8d 7c 03 01\ne8 7e 95 ff ff\n49 89 c6\n4d 85 f6\n74 24\n4c 89 f7\n4c 89 fe\n48 89 da\ne8 f8 94 ff ff\n48 85 db\n75 0a\n41 c6 04 1e 2e\nbb 01 00 00 00\n41 c6 04 1e 00\neb 03\n45 31 f6\n4c 89 f0\n5b\n41 5e\n41 5f\nc3\n'
p838
S'.text:0000000000408fa0\n.text:0000000000408fa2\n.text:0000000000408fa4\n.text:0000000000408fa5\n.text:0000000000408fa8\n.text:0000000000408fad\n.text:0000000000408fb0\n.text:0000000000408fb2\n.text:0000000000408fb5\n.text:0000000000408fb8\n.text:0000000000408fbd\n.text:0000000000408fc2\n.text:0000000000408fc5\n.text:0000000000408fc8\n.text:0000000000408fca\n.text:0000000000408fcd\n.text:0000000000408fd0\n.text:0000000000408fd3\n.text:0000000000408fd8\n.text:0000000000408fdb\n.text:0000000000408fdd\n.text:0000000000408fe2\n.text:0000000000408fe7\n.text:0000000000408fec\n.text:0000000000408fee\n.text:0000000000408ff1\n.text:0000000000408ff4\n.text:0000000000408ff5\n.text:0000000000408ff7\n.text:0000000000408ff9\n'
p839
tp840
sS'opendirat'
p841
(S'\n__stdcall opendirat(char * dir, int * pdir_fd)\n'
p842
V\u000aDIR * opendirat(char *dir,int *pdir_fd)\u000a\u000a{\u000a  int iVar1;\u000a  int __fd;\u000a  DIR *pDVar2;\u000a  int *piVar3;\u000a  int *in_RCX;\u000a  uint in_EDX;\u000a  \u000a  pDVar2 = (DIR *)0x0;\u000a  __fd = openat_safer(dir,pdir_fd,(ulong)(in_EDX | 0x10900));\u000a  if (-1 < __fd) {\u000a    set_cloexec_flag();\u000a    pDVar2 = fdopendir(__fd);\u000a    if (pDVar2 == (DIR *)0x0) {\u000a      piVar3 = __errno_location();\u000a      iVar1 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar1;\u000a      pDVar2 = (DIR *)0x0;\u000a    }\u000a    else {\u000a      *in_RCX = __fd;\u000a    }\u000a  }\u000a  return (DIR *)pDVar2;\u000a}\u000a\u000a
p843
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RCX\nOR EDX,0x10900\nXOR EBX,EBX\nXOR EAX,EAX\nCALL 0x00410d40\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0040fc53\nMOV ESI,0x1\nMOV EDI,EBP\nCALL 0x004106e0\nMOV EDI,EBP\nCALL 0x004026b0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040fc3c\nMOV dword ptr [R14],EBP\nJMP 0x0040fc53\nCALL 0x00402100\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x004023c0\nMOV dword ptr [RBX],R14D\nXOR EBX,EBX\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p844
S'55\n41 56\n53\n49 89 ce\n81 ca 00 09 01 00\n31 db\n31 c0\ne8 2a 11 00 00\n89 c5\n85 ed\n78 37\nbe 01 00 00 00\n89 ef\ne8 b8 0a 00 00\n89 ef\ne8 81 2a ff ff\n48 89 c3\n48 85 db\n74 05\n41 89 2e\neb 17\ne8 bf 24 ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 72 27 ff ff\n44 89 33\n31 db\n48 89 d8\n5b\n41 5e\n5d\nc3\n'
p845
S'.text:000000000040fc00\n.text:000000000040fc01\n.text:000000000040fc03\n.text:000000000040fc04\n.text:000000000040fc07\n.text:000000000040fc0d\n.text:000000000040fc0f\n.text:000000000040fc11\n.text:000000000040fc16\n.text:000000000040fc18\n.text:000000000040fc1a\n.text:000000000040fc1c\n.text:000000000040fc21\n.text:000000000040fc23\n.text:000000000040fc28\n.text:000000000040fc2a\n.text:000000000040fc2f\n.text:000000000040fc32\n.text:000000000040fc35\n.text:000000000040fc37\n.text:000000000040fc3a\n.text:000000000040fc3c\n.text:000000000040fc41\n.text:000000000040fc44\n.text:000000000040fc47\n.text:000000000040fc49\n.text:000000000040fc4e\n.text:000000000040fc51\n.text:000000000040fc53\n.text:000000000040fc56\n.text:000000000040fc57\n.text:000000000040fc59\n.text:000000000040fc5a\n'
p846
tp847
sS'c_isgraph'
p848
(S'\n__stdcall c_isgraph()\n'
p849
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p850
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p851
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p852
S'.text:0000000000410620\n.text:0000000000410623\n.text:0000000000410626\n.text:0000000000410629\n'
p853
tp854
sS'copy_acl'
p855
(S'\n__stdcall copy_acl(char * src_name, char * dst_name)\n'
p856
V\u000aint copy_acl(char *src_name,char *dst_name)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  char *pcVar3;\u000a  uint *puVar4;\u000a  char *arg;\u000a  undefined8 uVar5;\u000a  \u000a  iVar2 = qcopy_acl(src_name,dst_name);\u000a  if (iVar2 == -1) {\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar1 = *puVar4;\u000a    uVar5 = dcgettext(0,"preserving permissions for %s",5);\u000a    pcVar3 = quote(arg);\u000a  }\u000a  else {\u000a    if (iVar2 != -2) {\u000a      return iVar2;\u000a    }\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar1 = *puVar4;\u000a    pcVar3 = quote(src_name);\u000a    uVar5 = 0x412b8a;\u000a  }\u000a  error(0,(ulong)uVar1,uVar5,pcVar3);\u000a  return iVar2;\u000a}\u000a\u000a
p857
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV RBX,RDI\nCALL 0x0040a6e0\nMOV EBP,EAX\nCMP EBP,-0x1\nJZ 0x0040867f\nCMP EBP,-0x2\nJNZ 0x004086b5\nCALL 0x00402100\nMOV R14D,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x0040bb80\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x412b8a\nXOR EAX,EAX\nMOV ESI,R14D\nJMP 0x004086b0\nCALL 0x00402100\nMOV R15D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x412d61\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV RDI,R14\nCALL 0x0040bb80\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,RBX\nCALL 0x00402640\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p858
S'55\n41 57\n41 56\n53\n50\n49 89 d6\n48 89 fb\ne8 8e 20 00 00\n89 c5\n83 fd ff\n74 26\n83 fd fe\n75 57\ne8 9d 9a ff ff\n44 8b 30\n48 89 df\ne8 12 35 00 00\n48 89 c1\n31 ff\nba 8a 2b 41 00\n31 c0\n44 89 f6\neb 31\ne8 7c 9a ff ff\n44 8b 38\n31 ff\nbe 61 2d 41 00\nba 05 00 00 00\ne8 d8 9b ff ff\n48 89 c3\n4c 89 f7\ne8 dd 34 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 fe\n48 89 da\ne8 8b 9f ff ff\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p859
S'.text:0000000000408640\n.text:0000000000408641\n.text:0000000000408643\n.text:0000000000408645\n.text:0000000000408646\n.text:0000000000408647\n.text:000000000040864a\n.text:000000000040864d\n.text:0000000000408652\n.text:0000000000408654\n.text:0000000000408657\n.text:0000000000408659\n.text:000000000040865c\n.text:000000000040865e\n.text:0000000000408663\n.text:0000000000408666\n.text:0000000000408669\n.text:000000000040866e\n.text:0000000000408671\n.text:0000000000408673\n.text:0000000000408678\n.text:000000000040867a\n.text:000000000040867d\n.text:000000000040867f\n.text:0000000000408684\n.text:0000000000408687\n.text:0000000000408689\n.text:000000000040868e\n.text:0000000000408693\n.text:0000000000408698\n.text:000000000040869b\n.text:000000000040869e\n.text:00000000004086a3\n.text:00000000004086a6\n.text:00000000004086a8\n.text:00000000004086aa\n.text:00000000004086ad\n.text:00000000004086b0\n.text:00000000004086b5\n.text:00000000004086b7\n.text:00000000004086bb\n.text:00000000004086bc\n.text:00000000004086be\n.text:00000000004086c0\n.text:00000000004086c1\n'
p860
tp861
sS'hash_get_next'
p862
(S'\n__stdcall hash_get_next(Hash_table * table, void * entry)\n'
p863
V\u000avoid * hash_get_next(Hash_table *table,void *entry)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  hash_entry *phVar2;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar2 = safe_hasher(table,entry);\u000a  phVar3 = phVar2;\u000a  while( true ) {\u000a    phVar1 = phVar3->next;\u000a    if ((phVar3->data == entry) && (phVar1 != (hash_entry *)0x0)) break;\u000a    phVar3 = phVar1;\u000a    if (phVar1 == (hash_entry *)0x0) {\u000a      do {\u000a        phVar2 = phVar2 + 1;\u000a        if (table->bucket_limit <= phVar2) {\u000a          return (void *)0x0;\u000a        }\u000a      } while (phVar2->data == (void *)0x0);\u000a      return phVar2->data;\u000a    }\u000a  }\u000a  return phVar1->data;\u000a}\u000a\u000a
p864
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nCALL 0x004097c0\nMOV RCX,RAX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RSI,RCX\nMOV RCX,qword ptr [RSI + 0x8]\nTEST RCX,RCX\nSETZ DL\nCMP qword ptr [RSI],RBX\nJNZ 0x00409866\nTEST DL,DL\nJZ 0x00409893\nTEST RCX,RCX\nJNZ 0x00409850\nMOV RDX,qword ptr [R14 + 0x8]\nADD RAX,0x10\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP RAX,RDX\nJNC 0x00409898\nMOV RCX,qword ptr [RAX]\nADD RAX,0x10\nTEST RCX,RCX\nJZ 0x00409880\nJMP 0x0040989a\nMOV RCX,qword ptr [RCX]\nJMP 0x0040989a\nXOR ECX,ECX\nMOV RAX,RCX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p865
S'41 56\n53\n50\n48 89 f3\n49 89 fe\ne8 81 ff ff ff\n48 89 c1\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 ce\n48 8b 4e 08\n48 85 c9\n0f 94 c2\n48 39 1e\n75 04\n84 d2\n74 2d\n48 85 c9\n75 e5\n49 8b 56 08\n48 83 c0 10\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 39 d0\n73 13\n48 8b 08\n48 83 c0 10\n48 85 c9\n74 ef\neb 07\n48 8b 09\neb 02\n31 c9\n48 89 c8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p866
S'.text:0000000000409830\n.text:0000000000409832\n.text:0000000000409833\n.text:0000000000409834\n.text:0000000000409837\n.text:000000000040983a\n.text:000000000040983f\n.text:0000000000409842\n.text:0000000000409850\n.text:0000000000409853\n.text:0000000000409857\n.text:000000000040985a\n.text:000000000040985d\n.text:0000000000409860\n.text:0000000000409862\n.text:0000000000409864\n.text:0000000000409866\n.text:0000000000409869\n.text:000000000040986b\n.text:000000000040986f\n.text:0000000000409873\n.text:0000000000409880\n.text:0000000000409883\n.text:0000000000409885\n.text:0000000000409888\n.text:000000000040988c\n.text:000000000040988f\n.text:0000000000409891\n.text:0000000000409893\n.text:0000000000409896\n.text:0000000000409898\n.text:000000000040989a\n.text:000000000040989d\n.text:00000000004098a1\n.text:00000000004098a2\n.text:00000000004098a4\n'
p867
tp868
sS'write'
p869
(S'\n__stdcall write(int __fd, void * __buf, size_t __n)\n'
p870
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000assize_t write(int __fd,void *__buf,size_t __n)\u000a\u000a{\u000a  ssize_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_write_006190b8)();\u000a  return sVar1;\u000a}\u000a\u000a
p871
S'JMP qword ptr [0x006190b8]\n'
p872
S'ff 25 c2 6e 21 00\n'
p873
S'.plt:00000000004021f0\n'
p874
tp875
sS'copy_dir'
p876
(S'\n__stdcall copy_dir(char * src_name_in, char * dst_name_in, stat * src_sb, dir_list * ancestors, cp_options * x)\n'
p877
V\u000a_Bool copy_dir(char *src_name_in,char *dst_name_in,stat *src_sb,dir_list *ancestors,cp_options *x)\u000a\u000a{\u000a  uint uVar1;\u000a  byte bVar2;\u000a  _Bool _Var3;\u000a  char *abase;\u000a  char *src_name;\u000a  char *dst_name;\u000a  size_t sVar4;\u000a  uint *puVar5;\u000a  undefined8 uVar6;\u000a  byte bVar7;\u000a  undefined4 *in_R9;\u000a  byte bVar8;\u000a  bool bVar9;\u000a  byte *in_stack_00000008;\u000a  byte *in_stack_00000010;\u000a  cp_options non_command_line_options;\u000a  _Bool local_a7;\u000a  byte local_a6;\u000a  byte local_a5;\u000a  uint local_a4;\u000a  char *local_a0;\u000a  char *local_98;\u000a  char *local_90;\u000a  dir_list *local_88;\u000a  cp_options *local_80;\u000a  undefined4 local_78;\u000a  undefined4 local_74;\u000a  undefined4 uStack112;\u000a  undefined4 uStack108;\u000a  undefined4 local_68;\u000a  undefined4 uStack100;\u000a  undefined4 uStack96;\u000a  undefined4 uStack92;\u000a  undefined4 local_58;\u000a  undefined4 uStack84;\u000a  undefined4 uStack80;\u000a  undefined4 uStack76;\u000a  undefined4 local_48;\u000a  undefined4 uStack68;\u000a  undefined4 uStack64;\u000a  undefined4 uStack60;\u000a  undefined8 local_38;\u000a  \u000a  local_38 = *(undefined8 *)(in_R9 + 0x10);\u000a  local_78 = *in_R9;\u000a  local_74 = in_R9[1];\u000a  uStack112 = in_R9[2];\u000a  uStack108 = in_R9[3];\u000a  local_68 = in_R9[4];\u000a  uStack100 = in_R9[5];\u000a  uStack96 = in_R9[6];\u000a  uStack92 = in_R9[7];\u000a  local_58 = in_R9[8];\u000a  uStack84 = in_R9[9];\u000a  uStack80 = in_R9[10];\u000a  uStack76 = in_R9[0xb];\u000a  local_48 = in_R9[0xc];\u000a  uStack68 = in_R9[0xd];\u000a  uStack64 = in_R9[0xe];\u000a  uStack60 = in_R9[0xf];\u000a  local_90 = dst_name_in;\u000a  local_88 = ancestors;\u000a  local_80 = x;\u000a  abase = savedir(src_name_in);\u000a  if (abase == (char *)0x0) {\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    bVar9 = false;\u000a    uVar6 = dcgettext(0,"cannot access %s",5);\u000a    abase = quotearg_style((char *)0x4);\u000a    error(0,(ulong)uVar1,uVar6,abase);\u000a  }\u000a  else {\u000a    if (in_R9[1] == 3) {\u000a      local_74 = 2;\u000a    }\u000a    bVar8 = 1;\u000a    if (*abase == 0) {\u000a      bVar7 = 0;\u000a      local_a0 = abase;\u000a    }\u000a    else {\u000a      bVar7 = 0;\u000a      local_a4 = (uint)src_sb & 0xff;\u000a      local_a0 = abase;\u000a      local_98 = src_name_in;\u000a      do {\u000a        local_a6 = bVar8;\u000a        src_name = file_name_concat(local_98,abase,(char **)0x0);\u000a        dst_name = file_name_concat(local_90,abase,(char **)0x0);\u000a        local_a7 = (_Bool)*in_stack_00000008;\u000a        _Var3 = copy_internal(src_name,dst_name,(stat *)(ulong)local_a4,local_88,local_80,\u000a                              (_Bool *)&local_78,(_Bool *)0x0,&local_a7);\u000a        bVar2 = local_a5;\u000a        bVar8 = _Var3 & local_a6;\u000a        *in_stack_00000010 = *in_stack_00000010 | local_a5;\u000a        free(dst_name);\u000a        free(src_name);\u000a        if (bVar2 != 0) break;\u000a        bVar7 = bVar7 | local_a7;\u000a        sVar4 = strlen(abase);\u000a        src_name = abase + sVar4 + 1;\u000a        abase = abase + sVar4 + 1;\u000a      } while (*src_name != 0);\u000a    }\u000a    free(local_a0);\u000a    *in_stack_00000008 = bVar7;\u000a    bVar9 = bVar8 != 0;\u000a  }\u000a  return (_Bool)bVar9;\u000a}\u000a\u000a
p878
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x78\nMOV RBP,R9\nMOV qword ptr [RSP + 0x28],R8\nMOV qword ptr [RSP + 0x20],RCX\nMOV R15D,EDX\nMOV qword ptr [RSP + 0x18],RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBP + 0x40]\nMOV qword ptr [RSP + 0x70],RAX\nMOVUPS XMM0,xmmword ptr [RBP]\nMOVUPS XMM1,xmmword ptr [RBP + 0x10]\nMOVUPS XMM2,xmmword ptr [RBP + 0x20]\nMOVUPS XMM3,xmmword ptr [RBP + 0x30]\nMOVAPS xmmword ptr [RSP + 0x60],XMM3\nMOVAPS xmmword ptr [RSP + 0x50],XMM2\nMOVAPS xmmword ptr [RSP + 0x40],XMM1\nMOVAPS xmmword ptr [RSP + 0x30],XMM0\nMOV ESI,0x2\nCALL 0x0040c3f0\nTEST RAX,RAX\nJZ 0x00406828\nCMP dword ptr [RBP + 0x4],0x3\nJNZ 0x00406744\nMOV dword ptr [RSP + 0x34],0x2\nCMP byte ptr [RAX],0x0\nMOV qword ptr [RSP + 0x8],RAX\nMOV R14B,0x1\nJZ 0x00406867\nXOR EBP,EBP\nMOVZX ECX,R15B\nMOV dword ptr [RSP + 0x4],ECX\nMOV R13,RAX\nMOV qword ptr [RSP + 0x10],RBX\nNOP word ptr [RAX + RAX*0x1]\nMOV byte ptr [RSP + 0x2],R14B\nXOR EDX,EDX\nMOV RDI,RBX\nMOV RSI,R13\nCALL 0x00409410\nMOV R15,RAX\nXOR EDX,EDX\nMOV RDI,qword ptr [RSP + 0x18]\nMOV RSI,R13\nCALL 0x00409410\nMOV R12,RAX\nMOV RAX,qword ptr [0xb0 + RSP]\nMOVZX EAX,byte ptr [RAX]\nMOV byte ptr [RSP + 0x1],AL\nMOV RDI,R15\nMOV RSI,R12\nMOV EDX,dword ptr [RSP + 0x4]\nMOV RCX,qword ptr [RSP + 0x20]\nMOV R8,qword ptr [RSP + 0x28]\nLEA R9,[RSP + 0x30]\nPUSH 0x0\nLEA RAX,[RSP + 0xb]\nPUSH RAX\nLEA RAX,[RSP + 0x11]\nPUSH RAX\nPUSH 0x0\nCALL 0x00404160\nADD RSP,0x20\nMOV R14D,EAX\nAND R14B,byte ptr [RSP + 0x2]\nMOVZX EBX,byte ptr [RSP + 0x3]\nMOV RAX,qword ptr [0xb8 + RSP]\nOR byte ptr [RAX],BL\nMOV RDI,R12\nCALL 0x004020c0\nMOV RDI,R15\nCALL 0x004020c0\nTEST BL,BL\nJNZ 0x00406869\nOR BPL,byte ptr [RSP + 0x1]\nMOV RDI,R13\nCALL 0x00402290\nCMP byte ptr [R13 + RAX*0x1 + 0x1],0x0\nLEA R13,[R13 + RAX*0x1 + 0x1]\nMOV RBX,qword ptr [RSP + 0x10]\nJNZ 0x00406770\nJMP 0x00406869\nCALL 0x00402100\nMOV R14D,dword ptr [RAX]\nXOR EBP,EBP\nXOR EDI,EDI\nMOV ESI,0x412f59\nMOV EDX,0x5\nCALL 0x00402270\nMOV R15,RAX\nMOV EDI,0x4\nMOV RSI,RBX\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,R15\nCALL 0x00402640\nJMP 0x00406885\nXOR EBP,EBP\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x004020c0\nMOV RAX,qword ptr [0xb0 + RSP]\nMOV byte ptr [RAX],BPL\nTEST R14B,R14B\nSETNZ BPL\nMOV EAX,EBP\nADD RSP,0x78\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p879
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 78\n4c 89 cd\n4c 89 44 24 28\n48 89 4c 24 20\n41 89 d7\n48 89 74 24 18\n48 89 fb\n48 8b 45 40\n48 89 44 24 70\n0f 10 45 00\n0f 10 4d 10\n0f 10 55 20\n0f 10 5d 30\n0f 29 5c 24 60\n0f 29 54 24 50\n0f 29 4c 24 40\n0f 29 44 24 30\nbe 02 00 00 00\ne8 c3 5c 00 00\n48 85 c0\n0f 84 f2 00 00 00\n83 7d 04 03\n75 08\nc7 44 24 34 02 00 00 00\n80 38 00\n48 89 44 24 08\n41 b6 01\n0f 84 12 01 00 00\n31 ed\n41 0f b6 cf\n89 4c 24 04\n49 89 c5\n48 89 5c 24 10\n66 0f 1f 84 00 00 00 00 00\n44 88 74 24 02\n31 d2\n48 89 df\n4c 89 ee\ne8 8e 2c 00 00\n49 89 c7\n31 d2\n48 8b 7c 24 18\n4c 89 ee\ne8 7c 2c 00 00\n49 89 c4\n48 8b 84 24 b0 00 00 00\n0f b6 00\n88 44 24 01\n4c 89 ff\n4c 89 e6\n8b 54 24 04\n48 8b 4c 24 20\n4c 8b 44 24 28\n4c 8d 4c 24 30\n6a 00\n48 8d 44 24 0b\n50\n48 8d 44 24 11\n50\n6a 00\ne8 8c d9 ff ff\n48 83 c4 20\n41 89 c6\n44 22 74 24 02\n0f b6 5c 24 03\n48 8b 84 24 b8 00 00 00\n08 18\n4c 89 e7\ne8 c9 b8 ff ff\n4c 89 ff\ne8 c1 b8 ff ff\n84 db\n75 66\n40 0a 6c 24 01\n4c 89 ef\ne8 80 ba ff ff\n41 80 7c 05 01 00\n4d 8d 6c 05 01\n48 8b 5c 24 10\n0f 85 4a ff ff ff\neb 41\ne8 d3 b8 ff ff\n44 8b 30\n31 ed\n31 ff\nbe 59 2f 41 00\nba 05 00 00 00\ne8 2d ba ff ff\n49 89 c7\nbf 04 00 00 00\n48 89 de\ne8 0d 51 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 f6\n4c 89 fa\ne8 db bd ff ff\neb 1e\n31 ed\n48 8b 7c 24 08\ne8 4d b8 ff ff\n48 8b 84 24 b0 00 00 00\n40 88 28\n45 84 f6\n40 0f 95 c5\n89 e8\n48 83 c4 78\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p880
S'.text:00000000004066d0\n.text:00000000004066d1\n.text:00000000004066d3\n.text:00000000004066d5\n.text:00000000004066d7\n.text:00000000004066d9\n.text:00000000004066da\n.text:00000000004066de\n.text:00000000004066e1\n.text:00000000004066e6\n.text:00000000004066eb\n.text:00000000004066ee\n.text:00000000004066f3\n.text:00000000004066f6\n.text:00000000004066fa\n.text:00000000004066ff\n.text:0000000000406703\n.text:0000000000406707\n.text:000000000040670b\n.text:000000000040670f\n.text:0000000000406714\n.text:0000000000406719\n.text:000000000040671e\n.text:0000000000406723\n.text:0000000000406728\n.text:000000000040672d\n.text:0000000000406730\n.text:0000000000406736\n.text:000000000040673a\n.text:000000000040673c\n.text:0000000000406744\n.text:0000000000406747\n.text:000000000040674c\n.text:000000000040674f\n.text:0000000000406755\n.text:0000000000406757\n.text:000000000040675b\n.text:000000000040675f\n.text:0000000000406762\n.text:0000000000406767\n.text:0000000000406770\n.text:0000000000406775\n.text:0000000000406777\n.text:000000000040677a\n.text:000000000040677d\n.text:0000000000406782\n.text:0000000000406785\n.text:0000000000406787\n.text:000000000040678c\n.text:000000000040678f\n.text:0000000000406794\n.text:0000000000406797\n.text:000000000040679f\n.text:00000000004067a2\n.text:00000000004067a6\n.text:00000000004067a9\n.text:00000000004067ac\n.text:00000000004067b0\n.text:00000000004067b5\n.text:00000000004067ba\n.text:00000000004067bf\n.text:00000000004067c1\n.text:00000000004067c6\n.text:00000000004067c7\n.text:00000000004067cc\n.text:00000000004067cd\n.text:00000000004067cf\n.text:00000000004067d4\n.text:00000000004067d8\n.text:00000000004067db\n.text:00000000004067e0\n.text:00000000004067e5\n.text:00000000004067ed\n.text:00000000004067ef\n.text:00000000004067f2\n.text:00000000004067f7\n.text:00000000004067fa\n.text:00000000004067ff\n.text:0000000000406801\n.text:0000000000406803\n.text:0000000000406808\n.text:000000000040680b\n.text:0000000000406810\n.text:0000000000406816\n.text:000000000040681b\n.text:0000000000406820\n.text:0000000000406826\n.text:0000000000406828\n.text:000000000040682d\n.text:0000000000406830\n.text:0000000000406832\n.text:0000000000406834\n.text:0000000000406839\n.text:000000000040683e\n.text:0000000000406843\n.text:0000000000406846\n.text:000000000040684b\n.text:000000000040684e\n.text:0000000000406853\n.text:0000000000406856\n.text:0000000000406858\n.text:000000000040685a\n.text:000000000040685d\n.text:0000000000406860\n.text:0000000000406865\n.text:0000000000406867\n.text:0000000000406869\n.text:000000000040686e\n.text:0000000000406873\n.text:000000000040687b\n.text:000000000040687e\n.text:0000000000406881\n.text:0000000000406885\n.text:0000000000406887\n.text:000000000040688b\n.text:000000000040688c\n.text:000000000040688e\n.text:0000000000406890\n.text:0000000000406892\n.text:0000000000406894\n.text:0000000000406895\n'
p881
tp882
sS'quotearg_buffer_restyled'
p883
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p884
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_0040a93c_caseD_7;\u000a  case 2:\u000a    goto switchD_0040a93c_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_0040a93c_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_0040a93c_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_0040a93c_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_0040a93c_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_0040a93c_caseD_7;\u000aswitchD_0040a93c_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_0040a93c_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_0040a93c_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_0040b400;\u000aLAB_0040ab20:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_0040b409:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_0040b418:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_0040ab2b:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_0040ab6f:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_0040ab6f;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_0040b418;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_0040b345;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x0040b250;\u000a    }\u000a    goto LAB_0040b418;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_0040b37a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_0040b418;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_0040b3a9;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_0040ae68;\u000a  case '\u005ca':\u000a    goto joined_r0x0040ad58;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x0040ad58;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_0040ab86_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x0040ad58;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x0040ad58;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_0040ab86_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x0040ad58:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_0040b2be;\u000a    }\u000a    goto LAB_0040b418;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_0040b418;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_0040b418;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_0040b418;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_0040b418;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_0040b418;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_0040ab86_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_0040b316;\u000a      goto joined_r0x0040b308;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x0040ae11:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x0040b308;\u000a      goto LAB_0040b316;\u000a    }\u000a    goto LAB_0040b418;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_0040b418;\u000a  }\u000a  goto joined_r0x0040b250;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_0040b37a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_0040b3a9;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_0040b3a9:\u000a  if (1 < uVar10) {\u000aLAB_0040ae86:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_0040af42;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x0040ae11;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_0040af42:\u000a        if (bVar6 != 0) goto LAB_0040b418;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_0040ae68:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_0040ae86;\u000ajoined_r0x0040b250:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x0040b250:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_0040b277;\u000aLAB_0040b2b0:\u000a    if (bVar22) goto LAB_0040b2b5;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_0040b2b0;\u000aLAB_0040b277:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_0040b2b5:\u000a      if (bVar6 != 0) goto LAB_0040b418;\u000aLAB_0040b2be:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x0040b308;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_0040b316:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x0040b308:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_0040b345:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_0040ab20;\u000aLAB_0040b400:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_0040b409;\u000a  goto LAB_0040ab2b;\u000a}\u000a\u000a
p885
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x00402280\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x0040b4e5\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x4134c0 + RAX*0x8]\nMOV EDI,0x4139e6\nMOV ESI,R15D\nCALL 0x0040bb90\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x4143dc\nMOV ESI,R15D\nCALL 0x0040bb90\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x0040a99d\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x0040a9a0\nNOP\nCMP R12,RSI\nJNC 0x0040a98e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x0040a980\nJMP 0x0040a9a0\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x00402290\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x0040aa6c\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x0040aa6c\nMOV ECX,0x4139e4\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x0040aa66\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x0040aa07\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x0040aa34\nTEST RSI,RSI\nJZ 0x0040aa21\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x4143dc\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x0040aa42\nMOV ECX,0x4143dc\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x0040aa6c\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x0040b4bc\nMOV ECX,0x4139e4\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x0040b400\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x0040b409\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x0040ab6f\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x0040ab6a\nCMP R11,-0x1\nJNZ 0x0040ab6a\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x00402290\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x0040abc0\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x0040ae1c\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x413518 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x0040b418\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x0040b270\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x0040b277\nJMP 0x0040b2b0\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00402420\nTEST EAX,EAX\nSETZ AL\nJNZ 0x0040ac0d\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x0040ab71\nJMP 0x0040b418\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x0040ab71\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x0040ab9b\nCMP EBX,0x2\nJNZ 0x0040ab9b\nTEST R13,R13\nJNZ 0x0040ab9b\nJMP 0x0040b418\nCMP R11,-0x1\nJZ 0x0040aff3\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x0040b013\nJMP 0x0040ab9b\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x0040b024\nTEST R8B,R8B\nJNZ 0x0040b418\nCMP EBX,0x2\nJNZ 0x0040acc8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x0040acc8\nCMP R12,RSI\nJNC 0x0040aca3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040acb2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x0040acc1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x0040acd2\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x0040b198\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x0040b198\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x0040b198\nCMP RCX,RSI\nJNC 0x0040ad0c\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x0040ad1b\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x0040aba6\nJMP 0x0040b270\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x0040ab99\nJMP 0x0040ad7a\nMOV DL,0x74\nJMP 0x0040ad62\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x0040ab99\nJMP 0x0040ad7a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x0040ab99\nJMP 0x0040ad7a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x0040b418\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x0040ab99\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x0040b2be\nJMP 0x0040b418\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x0040ab99\nTEST R8B,R8B\nJNZ 0x0040b418\nCMP R12,RSI\nJNC 0x0040adaa\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040adb9\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x0040adc8\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x0040ab99\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x0040b1ab\nCMP EBX,0x2\nJNZ 0x0040ab99\nTEST R8B,R8B\nJZ 0x0040ab99\nJMP 0x0040b418\nCMP EBX,0x2\nJNZ 0x0040b044\nTEST R8B,R8B\nJNZ 0x0040b418\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x0040b316\nJMP 0x0040b339\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x0040b065\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00402780\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x0040b258\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x0040b258\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x0040af42\nJMP 0x0040af10\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x0040aef9\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x0040aef6\nCMP R12,RSI\nJNC 0x0040aedb\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x0040aeea\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x0040af30\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x0040af30\nTEST BPL,0x1\nJZ 0x0040afd3\nCMP R12,RSI\nJNC 0x0040af24\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x0040afd3\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x0040af10\nTEST R8B,R8B\nJNZ 0x0040b418\nCMP EBX,0x2\nJNZ 0x0040af8a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x0040af8a\nCMP R12,RSI\nJNC 0x0040af62\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040af71\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x0040af80\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x0040af94\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040afab\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x0040afc5\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x0040aec0\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x0040b316\nJMP 0x0040b339\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x0040ab9b\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x0040ab9b\nJMP 0x0040b418\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x0040b345\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x0040aba6\nJMP 0x0040b270\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x0040ad62\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x0040b316\nJMP 0x0040b339\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x0040b087\nMOV RDI,R10\nCALL 0x00402290\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x004022e0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0040b35f\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x0040b357\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x0040b366\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x0040b14e\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x0040b146\nBT RDI,RDX\nJC 0x0040b4b2\nINC RCX\nCMP RCX,R14\nJC 0x0040b130\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00402760\nTEST EAX,EAX\nJNZ 0x0040b163\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00402750\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x0040b0a5\nJMP 0x0040b3a9\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x0040aba6\nJMP 0x0040b270\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x0040ab99\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x0040ab99\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x0040ab99\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x0040ab9b\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x0040b3e2\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x0040b418\nCMP R12,RSI\nJNC 0x0040b20e\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x0040b221\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x0040b230\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x0040b23f\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x0040aba6\nJMP 0x0040b270\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x0040aba6\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x0040b2b0\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x0040b2b5\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x0040b310\nJMP 0x0040b2b5\nTEST BPL,BPL\nJZ 0x0040b310\nTEST R8B,R8B\nJNZ 0x0040b418\nCMP EBX,0x2\nJNZ 0x0040b2f8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x0040b2f8\nCMP R12,RSI\nJNC 0x0040b2d3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040b2e2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x0040b2f1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x0040b302\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x0040b342\nJMP 0x0040b33e\nTEST DIL,0x1\nJZ 0x0040b339\nAND AL,0x1\nJNZ 0x0040b339\nCMP R12,RSI\nJNC 0x0040b324\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040b333\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x0040b342\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x0040b400\nJMP 0x0040ab20\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x0040b3a4\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x0040b39c\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x0040b3d8\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x0040b37a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x0040b3a9\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x0040ae68\nJMP 0x0040ae86\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x0040b3a9\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x0040aba6\nJMP 0x0040b270\nCMP R13,R11\nJNZ 0x0040ab2b\nTEST R8B,R8B\nJZ 0x0040b472\nCMP EBX,0x2\nJNZ 0x0040b472\nTEST R12,R12\nJNZ 0x0040b472\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x0040a8b0\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x0040b4a6\nTEST R8B,R8B\nJNZ 0x0040b4a6\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x0040b4a6\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x0040b499\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x0040b490\nCMP R12,RSI\nJNC 0x0040b45d\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x0040b45d\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x0040b418\nTEST RSI,RSI\nJZ 0x0040b4c9\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x4139e4\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x0040aa6c\nCALL 0x004020f0\n'
p886
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 a2 79 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 c0 34 41 00\nbf e6 39 41 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf dc 43 41 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 e3 78 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 e4 39 41 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 dc 43 41 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 dc 43 41 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 e4 39 41 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 43 77 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd 18 35 41 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 47 78 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 47 79 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 11 72 ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 13 72 ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 09 76 ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 d2 75 ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 e4 39 41 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 06 6c ff ff\n'
p887
S'.text:000000000040a8b0\n.text:000000000040a8b1\n.text:000000000040a8b3\n.text:000000000040a8b5\n.text:000000000040a8b7\n.text:000000000040a8b9\n.text:000000000040a8ba\n.text:000000000040a8c1\n.text:000000000040a8c4\n.text:000000000040a8c7\n.text:000000000040a8ca\n.text:000000000040a8cf\n.text:000000000040a8d4\n.text:000000000040a8d9\n.text:000000000040a8de\n.text:000000000040a8e6\n.text:000000000040a8ea\n.text:000000000040a8f0\n.text:000000000040a8f8\n.text:000000000040a8fd\n.text:000000000040a905\n.text:000000000040a90a\n.text:000000000040a90e\n.text:000000000040a910\n.text:000000000040a913\n.text:000000000040a916\n.text:000000000040a919\n.text:000000000040a91e\n.text:000000000040a921\n.text:000000000040a924\n.text:000000000040a927\n.text:000000000040a92a\n.text:000000000040a92c\n.text:000000000040a92f\n.text:000000000040a934\n.text:000000000040a937\n.text:000000000040a93c\n.text:000000000040a943\n.text:000000000040a948\n.text:000000000040a94b\n.text:000000000040a950\n.text:000000000040a955\n.text:000000000040a95a\n.text:000000000040a95d\n.text:000000000040a962\n.text:000000000040a967\n.text:000000000040a96c\n.text:000000000040a96e\n.text:000000000040a970\n.text:000000000040a975\n.text:000000000040a977\n.text:000000000040a97a\n.text:000000000040a97c\n.text:000000000040a97e\n.text:000000000040a980\n.text:000000000040a983\n.text:000000000040a985\n.text:000000000040a98a\n.text:000000000040a98e\n.text:000000000040a994\n.text:000000000040a997\n.text:000000000040a999\n.text:000000000040a99b\n.text:000000000040a99d\n.text:000000000040a9a0\n.text:000000000040a9a5\n.text:000000000040a9a8\n.text:000000000040a9ad\n.text:000000000040a9b2\n.text:000000000040a9b5\n.text:000000000040a9b8\n.text:000000000040a9bb\n.text:000000000040a9be\n.text:000000000040a9c3\n.text:000000000040a9c6\n.text:000000000040a9c9\n.text:000000000040a9ce\n.text:000000000040a9d1\n.text:000000000040a9d3\n.text:000000000040a9d6\n.text:000000000040a9d8\n.text:000000000040a9da\n.text:000000000040a9dd\n.text:000000000040a9e2\n.text:000000000040a9e7\n.text:000000000040a9ec\n.text:000000000040a9ef\n.text:000000000040a9f5\n.text:000000000040a9f7\n.text:000000000040a9fa\n.text:000000000040a9fd\n.text:000000000040aa00\n.text:000000000040aa02\n.text:000000000040aa04\n.text:000000000040aa07\n.text:000000000040aa0a\n.text:000000000040aa0f\n.text:000000000040aa12\n.text:000000000040aa14\n.text:000000000040aa17\n.text:000000000040aa19\n.text:000000000040aa1e\n.text:000000000040aa21\n.text:000000000040aa26\n.text:000000000040aa2c\n.text:000000000040aa32\n.text:000000000040aa34\n.text:000000000040aa39\n.text:000000000040aa3f\n.text:000000000040aa42\n.text:000000000040aa45\n.text:000000000040aa48\n.text:000000000040aa4a\n.text:000000000040aa4f\n.text:000000000040aa52\n.text:000000000040aa58\n.text:000000000040aa5d\n.text:000000000040aa63\n.text:000000000040aa66\n.text:000000000040aa69\n.text:000000000040aa6c\n.text:000000000040aa74\n.text:000000000040aa76\n.text:000000000040aa78\n.text:000000000040aa7b\n.text:000000000040aa7f\n.text:000000000040aa81\n.text:000000000040aa84\n.text:000000000040aa88\n.text:000000000040aa8a\n.text:000000000040aa8d\n.text:000000000040aa90\n.text:000000000040aa93\n.text:000000000040aa95\n.text:000000000040aa99\n.text:000000000040aa9b\n.text:000000000040aa9f\n.text:000000000040aaa2\n.text:000000000040aaa5\n.text:000000000040aaa8\n.text:000000000040aaaa\n.text:000000000040aaae\n.text:000000000040aab7\n.text:000000000040aaba\n.text:000000000040aabc\n.text:000000000040aac0\n.text:000000000040aac2\n.text:000000000040aac6\n.text:000000000040aac8\n.text:000000000040aacb\n.text:000000000040aacf\n.text:000000000040aad1\n.text:000000000040aad4\n.text:000000000040aad8\n.text:000000000040aadd\n.text:000000000040aae0\n.text:000000000040aae4\n.text:000000000040aaec\n.text:000000000040aaef\n.text:000000000040aaf2\n.text:000000000040aaf4\n.text:000000000040aaf8\n.text:000000000040aafb\n.text:000000000040aafd\n.text:000000000040ab02\n.text:000000000040ab06\n.text:000000000040ab0b\n.text:000000000040ab10\n.text:000000000040ab14\n.text:000000000040ab1a\n.text:000000000040ab20\n.text:000000000040ab25\n.text:000000000040ab2b\n.text:000000000040ab30\n.text:000000000040ab32\n.text:000000000040ab37\n.text:000000000040ab3b\n.text:000000000040ab3d\n.text:000000000040ab41\n.text:000000000040ab43\n.text:000000000040ab45\n.text:000000000040ab48\n.text:000000000040ab4d\n.text:000000000040ab4f\n.text:000000000040ab54\n.text:000000000040ab59\n.text:000000000040ab5d\n.text:000000000040ab62\n.text:000000000040ab67\n.text:000000000040ab6a\n.text:000000000040ab6d\n.text:000000000040ab6f\n.text:000000000040ab71\n.text:000000000040ab76\n.text:000000000040ab7a\n.text:000000000040ab80\n.text:000000000040ab82\n.text:000000000040ab84\n.text:000000000040ab86\n.text:000000000040ab8e\n.text:000000000040ab93\n.text:000000000040ab99\n.text:000000000040ab9b\n.text:000000000040aba0\n.text:000000000040aba6\n.text:000000000040abaf\n.text:000000000040abb5\n.text:000000000040abc0\n.text:000000000040abc2\n.text:000000000040abc5\n.text:000000000040abc9\n.text:000000000040abd1\n.text:000000000040abd4\n.text:000000000040abd9\n.text:000000000040abdb\n.text:000000000040abde\n.text:000000000040abe0\n.text:000000000040abe5\n.text:000000000040abe8\n.text:000000000040abed\n.text:000000000040abf0\n.text:000000000040abf5\n.text:000000000040abf9\n.text:000000000040abfe\n.text:000000000040ac00\n.text:000000000040ac02\n.text:000000000040ac08\n.text:000000000040ac0d\n.text:000000000040ac12\n.text:000000000040ac15\n.text:000000000040ac1a\n.text:000000000040ac1e\n.text:000000000040ac23\n.text:000000000040ac28\n.text:000000000040ac2a\n.text:000000000040ac2c\n.text:000000000040ac31\n.text:000000000040ac33\n.text:000000000040ac36\n.text:000000000040ac3c\n.text:000000000040ac3f\n.text:000000000040ac45\n.text:000000000040ac48\n.text:000000000040ac4e\n.text:000000000040ac53\n.text:000000000040ac57\n.text:000000000040ac5d\n.text:000000000040ac60\n.text:000000000040ac63\n.text:000000000040ac67\n.text:000000000040ac6a\n.text:000000000040ac6c\n.text:000000000040ac6f\n.text:000000000040ac75\n.text:000000000040ac7a\n.text:000000000040ac7f\n.text:000000000040ac85\n.text:000000000040ac88\n.text:000000000040ac8e\n.text:000000000040ac91\n.text:000000000040ac93\n.text:000000000040ac95\n.text:000000000040ac97\n.text:000000000040ac99\n.text:000000000040ac9c\n.text:000000000040ac9e\n.text:000000000040aca3\n.text:000000000040aca8\n.text:000000000040acab\n.text:000000000040acad\n.text:000000000040acb2\n.text:000000000040acb7\n.text:000000000040acba\n.text:000000000040acbc\n.text:000000000040acc1\n.text:000000000040acc5\n.text:000000000040acc8\n.text:000000000040accb\n.text:000000000040accd\n.text:000000000040acd2\n.text:000000000040acd7\n.text:000000000040acd9\n.text:000000000040acdc\n.text:000000000040acdf\n.text:000000000040ace5\n.text:000000000040ace9\n.text:000000000040acec\n.text:000000000040acf2\n.text:000000000040acf6\n.text:000000000040acf9\n.text:000000000040acfc\n.text:000000000040ad02\n.text:000000000040ad05\n.text:000000000040ad07\n.text:000000000040ad0c\n.text:000000000040ad11\n.text:000000000040ad14\n.text:000000000040ad16\n.text:000000000040ad1b\n.text:000000000040ad1f\n.text:000000000040ad24\n.text:000000000040ad2a\n.text:000000000040ad2f\n.text:000000000040ad31\n.text:000000000040ad36\n.text:000000000040ad3c\n.text:000000000040ad3e\n.text:000000000040ad40\n.text:000000000040ad42\n.text:000000000040ad44\n.text:000000000040ad49\n.text:000000000040ad4f\n.text:000000000040ad51\n.text:000000000040ad53\n.text:000000000040ad58\n.text:000000000040ad5e\n.text:000000000040ad60\n.text:000000000040ad62\n.text:000000000040ad67\n.text:000000000040ad69\n.text:000000000040ad6f\n.text:000000000040ad74\n.text:000000000040ad7a\n.text:000000000040ad7d\n.text:000000000040ad80\n.text:000000000040ad86\n.text:000000000040ad8b\n.text:000000000040ad8e\n.text:000000000040ad91\n.text:000000000040ad97\n.text:000000000040ad9a\n.text:000000000040ada0\n.text:000000000040ada3\n.text:000000000040ada5\n.text:000000000040adaa\n.text:000000000040adaf\n.text:000000000040adb2\n.text:000000000040adb4\n.text:000000000040adb9\n.text:000000000040adbe\n.text:000000000040adc1\n.text:000000000040adc3\n.text:000000000040adc8\n.text:000000000040adcc\n.text:000000000040adce\n.text:000000000040add3\n.text:000000000040add6\n.text:000000000040add9\n.text:000000000040addf\n.text:000000000040ade2\n.text:000000000040ade8\n.text:000000000040adeb\n.text:000000000040adf1\n.text:000000000040adf6\n.text:000000000040adf9\n.text:000000000040adff\n.text:000000000040ae02\n.text:000000000040ae08\n.text:000000000040ae0b\n.text:000000000040ae0d\n.text:000000000040ae11\n.text:000000000040ae17\n.text:000000000040ae1c\n.text:000000000040ae20\n.text:000000000040ae29\n.text:000000000040ae2f\n.text:000000000040ae34\n.text:000000000040ae39\n.text:000000000040ae3e\n.text:000000000040ae41\n.text:000000000040ae46\n.text:000000000040ae49\n.text:000000000040ae4c\n.text:000000000040ae51\n.text:000000000040ae56\n.text:000000000040ae5a\n.text:000000000040ae5f\n.text:000000000040ae64\n.text:000000000040ae68\n.text:000000000040ae6a\n.text:000000000040ae6f\n.text:000000000040ae75\n.text:000000000040ae78\n.text:000000000040ae7a\n.text:000000000040ae7d\n.text:000000000040ae80\n.text:000000000040ae86\n.text:000000000040ae8b\n.text:000000000040ae8e\n.text:000000000040ae91\n.text:000000000040ae94\n.text:000000000040ae97\n.text:000000000040ae99\n.text:000000000040ae9d\n.text:000000000040ae9f\n.text:000000000040aea4\n.text:000000000040aea9\n.text:000000000040aeaf\n.text:000000000040aec0\n.text:000000000040aec5\n.text:000000000040aec7\n.text:000000000040aeca\n.text:000000000040aecc\n.text:000000000040aecf\n.text:000000000040aed1\n.text:000000000040aed4\n.text:000000000040aed6\n.text:000000000040aedb\n.text:000000000040aee0\n.text:000000000040aee3\n.text:000000000040aee5\n.text:000000000040aeea\n.text:000000000040aeee\n.text:000000000040aef6\n.text:000000000040aef9\n.text:000000000040aefc\n.text:000000000040aefe\n.text:000000000040af02\n.text:000000000040af10\n.text:000000000040af14\n.text:000000000040af1a\n.text:000000000040af1d\n.text:000000000040af1f\n.text:000000000040af24\n.text:000000000040af27\n.text:000000000040af29\n.text:000000000040af30\n.text:000000000040af33\n.text:000000000040af38\n.text:000000000040af3b\n.text:000000000040af40\n.text:000000000040af42\n.text:000000000040af45\n.text:000000000040af4b\n.text:000000000040af4e\n.text:000000000040af50\n.text:000000000040af54\n.text:000000000040af56\n.text:000000000040af58\n.text:000000000040af5b\n.text:000000000040af5d\n.text:000000000040af62\n.text:000000000040af67\n.text:000000000040af6a\n.text:000000000040af6c\n.text:000000000040af71\n.text:000000000040af76\n.text:000000000040af79\n.text:000000000040af7b\n.text:000000000040af80\n.text:000000000040af84\n.text:000000000040af86\n.text:000000000040af8a\n.text:000000000040af8d\n.text:000000000040af8f\n.text:000000000040af94\n.text:000000000040af99\n.text:000000000040af9c\n.text:000000000040af9e\n.text:000000000040afa1\n.text:000000000040afa4\n.text:000000000040afa7\n.text:000000000040afab\n.text:000000000040afb0\n.text:000000000040afb3\n.text:000000000040afb5\n.text:000000000040afb8\n.text:000000000040afbb\n.text:000000000040afbe\n.text:000000000040afc1\n.text:000000000040afc5\n.text:000000000040afc9\n.text:000000000040afcd\n.text:000000000040afd1\n.text:000000000040afd3\n.text:000000000040afd7\n.text:000000000040afda\n.text:000000000040afe0\n.text:000000000040afe4\n.text:000000000040afe8\n.text:000000000040afee\n.text:000000000040aff3\n.text:000000000040aff6\n.text:000000000040aff9\n.text:000000000040affe\n.text:000000000040b001\n.text:000000000040b003\n.text:000000000040b006\n.text:000000000040b00d\n.text:000000000040b013\n.text:000000000040b015\n.text:000000000040b019\n.text:000000000040b01f\n.text:000000000040b024\n.text:000000000040b029\n.text:000000000040b02f\n.text:000000000040b032\n.text:000000000040b034\n.text:000000000040b039\n.text:000000000040b03f\n.text:000000000040b044\n.text:000000000040b046\n.text:000000000040b04b\n.text:000000000040b051\n.text:000000000040b053\n.text:000000000040b056\n.text:000000000040b05a\n.text:000000000040b060\n.text:000000000040b065\n.text:000000000040b071\n.text:000000000040b075\n.text:000000000040b077\n.text:000000000040b07a\n.text:000000000040b07f\n.text:000000000040b084\n.text:000000000040b087\n.text:000000000040b08b\n.text:000000000040b090\n.text:000000000040b092\n.text:000000000040b096\n.text:000000000040b098\n.text:000000000040b0a0\n.text:000000000040b0a5\n.text:000000000040b0aa\n.text:000000000040b0ae\n.text:000000000040b0b2\n.text:000000000040b0ba\n.text:000000000040b0bd\n.text:000000000040b0c2\n.text:000000000040b0c5\n.text:000000000040b0c8\n.text:000000000040b0cd\n.text:000000000040b0d0\n.text:000000000040b0d3\n.text:000000000040b0d9\n.text:000000000040b0dd\n.text:000000000040b0e7\n.text:000000000040b0ed\n.text:000000000040b0f1\n.text:000000000040b0f6\n.text:000000000040b0fc\n.text:000000000040b100\n.text:000000000040b103\n.text:000000000040b107\n.text:000000000040b109\n.text:000000000040b10e\n.text:000000000040b113\n.text:000000000040b117\n.text:000000000040b119\n.text:000000000040b11e\n.text:000000000040b123\n.text:000000000040b127\n.text:000000000040b12c\n.text:000000000040b130\n.text:000000000040b134\n.text:000000000040b137\n.text:000000000040b13a\n.text:000000000040b13c\n.text:000000000040b140\n.text:000000000040b146\n.text:000000000040b149\n.text:000000000040b14c\n.text:000000000040b14e\n.text:000000000040b152\n.text:000000000040b157\n.text:000000000040b159\n.text:000000000040b15b\n.text:000000000040b163\n.text:000000000040b168\n.text:000000000040b16b\n.text:000000000040b173\n.text:000000000040b176\n.text:000000000040b179\n.text:000000000040b17e\n.text:000000000040b181\n.text:000000000040b183\n.text:000000000040b188\n.text:000000000040b18d\n.text:000000000040b193\n.text:000000000040b198\n.text:000000000040b19b\n.text:000000000040b1a0\n.text:000000000040b1a6\n.text:000000000040b1ab\n.text:000000000040b1b0\n.text:000000000040b1b6\n.text:000000000040b1ba\n.text:000000000040b1bd\n.text:000000000040b1c3\n.text:000000000040b1c9\n.text:000000000040b1cf\n.text:000000000040b1d4\n.text:000000000040b1d6\n.text:000000000040b1d9\n.text:000000000040b1df\n.text:000000000040b1e3\n.text:000000000040b1e5\n.text:000000000040b1ef\n.text:000000000040b1f3\n.text:000000000040b1f9\n.text:000000000040b1fc\n.text:000000000040b1fe\n.text:000000000040b204\n.text:000000000040b207\n.text:000000000040b209\n.text:000000000040b20e\n.text:000000000040b213\n.text:000000000040b216\n.text:000000000040b21a\n.text:000000000040b21c\n.text:000000000040b221\n.text:000000000040b226\n.text:000000000040b229\n.text:000000000040b22b\n.text:000000000040b230\n.text:000000000040b235\n.text:000000000040b238\n.text:000000000040b23a\n.text:000000000040b23f\n.text:000000000040b243\n.text:000000000040b245\n.text:000000000040b248\n.text:000000000040b24b\n.text:000000000040b250\n.text:000000000040b256\n.text:000000000040b258\n.text:000000000040b25d\n.text:000000000040b262\n.text:000000000040b268\n.text:000000000040b270\n.text:000000000040b275\n.text:000000000040b277\n.text:000000000040b27c\n.text:000000000040b27f\n.text:000000000040b281\n.text:000000000040b284\n.text:000000000040b286\n.text:000000000040b289\n.text:000000000040b28c\n.text:000000000040b28f\n.text:000000000040b291\n.text:000000000040b299\n.text:000000000040b29c\n.text:000000000040b29e\n.text:000000000040b2a0\n.text:000000000040b2b0\n.text:000000000040b2b3\n.text:000000000040b2b5\n.text:000000000040b2b8\n.text:000000000040b2be\n.text:000000000040b2c1\n.text:000000000040b2c3\n.text:000000000040b2c5\n.text:000000000040b2c7\n.text:000000000040b2c9\n.text:000000000040b2cc\n.text:000000000040b2ce\n.text:000000000040b2d3\n.text:000000000040b2d8\n.text:000000000040b2db\n.text:000000000040b2dd\n.text:000000000040b2e2\n.text:000000000040b2e7\n.text:000000000040b2ea\n.text:000000000040b2ec\n.text:000000000040b2f1\n.text:000000000040b2f5\n.text:000000000040b2f8\n.text:000000000040b2fb\n.text:000000000040b2fd\n.text:000000000040b302\n.text:000000000040b305\n.text:000000000040b308\n.text:000000000040b30a\n.text:000000000040b310\n.text:000000000040b314\n.text:000000000040b316\n.text:000000000040b318\n.text:000000000040b31a\n.text:000000000040b31d\n.text:000000000040b31f\n.text:000000000040b324\n.text:000000000040b329\n.text:000000000040b32c\n.text:000000000040b32e\n.text:000000000040b333\n.text:000000000040b337\n.text:000000000040b339\n.text:000000000040b33c\n.text:000000000040b33e\n.text:000000000040b342\n.text:000000000040b345\n.text:000000000040b348\n.text:000000000040b34c\n.text:000000000040b352\n.text:000000000040b357\n.text:000000000040b35f\n.text:000000000040b364\n.text:000000000040b366\n.text:000000000040b36e\n.text:000000000040b373\n.text:000000000040b375\n.text:000000000040b37a\n.text:000000000040b37f\n.text:000000000040b383\n.text:000000000040b385\n.text:000000000040b38a\n.text:000000000040b38d\n.text:000000000040b390\n.text:000000000040b392\n.text:000000000040b39a\n.text:000000000040b39c\n.text:000000000040b3a4\n.text:000000000040b3a9\n.text:000000000040b3ad\n.text:000000000040b3b2\n.text:000000000040b3b7\n.text:000000000040b3bb\n.text:000000000040b3c0\n.text:000000000040b3c5\n.text:000000000040b3c9\n.text:000000000040b3cd\n.text:000000000040b3d3\n.text:000000000040b3d8\n.text:000000000040b3e0\n.text:000000000040b3e2\n.text:000000000040b3e4\n.text:000000000040b3e8\n.text:000000000040b3ed\n.text:000000000040b3f3\n.text:000000000040b400\n.text:000000000040b403\n.text:000000000040b409\n.text:000000000040b40c\n.text:000000000040b40e\n.text:000000000040b411\n.text:000000000040b413\n.text:000000000040b416\n.text:000000000040b418\n.text:000000000040b420\n.text:000000000040b426\n.text:000000000040b42a\n.text:000000000040b42d\n.text:000000000040b431\n.text:000000000040b436\n.text:000000000040b43a\n.text:000000000040b43e\n.text:000000000040b441\n.text:000000000040b444\n.text:000000000040b447\n.text:000000000040b44b\n.text:000000000040b44f\n.text:000000000040b451\n.text:000000000040b456\n.text:000000000040b45a\n.text:000000000040b45d\n.text:000000000040b460\n.text:000000000040b467\n.text:000000000040b468\n.text:000000000040b46a\n.text:000000000040b46c\n.text:000000000040b46e\n.text:000000000040b470\n.text:000000000040b471\n.text:000000000040b472\n.text:000000000040b47a\n.text:000000000040b47d\n.text:000000000040b47f\n.text:000000000040b482\n.text:000000000040b484\n.text:000000000040b486\n.text:000000000040b488\n.text:000000000040b48a\n.text:000000000040b48d\n.text:000000000040b490\n.text:000000000040b493\n.text:000000000040b495\n.text:000000000040b499\n.text:000000000040b49c\n.text:000000000040b49f\n.text:000000000040b4a2\n.text:000000000040b4a4\n.text:000000000040b4a6\n.text:000000000040b4a9\n.text:000000000040b4ab\n.text:000000000040b4b0\n.text:000000000040b4b2\n.text:000000000040b4b7\n.text:000000000040b4bc\n.text:000000000040b4bf\n.text:000000000040b4c1\n.text:000000000040b4c6\n.text:000000000040b4c9\n.text:000000000040b4ce\n.text:000000000040b4d1\n.text:000000000040b4d7\n.text:000000000040b4dd\n.text:000000000040b4e0\n.text:000000000040b4e5\n'
p888
tp889
sS'rotr_sz'
p890
(S'\n__stdcall rotr_sz(size_t x)\n'
p891
V\u000asize_t rotr_sz(size_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x >> bVar1 | x << 0x40 - bVar1;\u000a}\u000a\u000a
p892
S'MOV ECX,ESI\nROR RDI,CL\nMOV RAX,RDI\nRET\n'
p893
S'89 f1\n48 d3 cf\n48 89 f8\nc3\n'
p894
S'.text:0000000000410500\n.text:0000000000410502\n.text:0000000000410505\n.text:0000000000410508\n'
p895
tp896
sS'qset_acl'
p897
(S'\n__stdcall qset_acl(char * name)\n'
p898
V\u000aint qset_acl(char *name)\u000a\u000a{\u000a  int iVar1;\u000a  ulong in_RAX;\u000a  uint in_EDX;\u000a  ulong local_8;\u000a  \u000a  local_8 = in_RAX & 0xffffffff00000000 | (ulong)in_EDX;\u000a  iVar1 = set_permissions((permission_context *)&local_8,name);\u000a  return iVar1;\u000a}\u000a\u000a
p899
S'PUSH RAX\nMOV EAX,ESI\nMOV RCX,RDI\nMOV dword ptr [RSP],EDX\nMOV RDI,RSP\nMOV RSI,RCX\nMOV EDX,EAX\nCALL 0x00410140\nPOP RCX\nRET\n'
p900
S'50\n89 f0\n48 89 f9\n89 14 24\n48 89 e7\n48 89 ce\n89 c2\ne8 0a 5a 00 00\n59\nc3\n'
p901
S'.text:000000000040a720\n.text:000000000040a721\n.text:000000000040a723\n.text:000000000040a726\n.text:000000000040a729\n.text:000000000040a72c\n.text:000000000040a72f\n.text:000000000040a731\n.text:000000000040a736\n.text:000000000040a737\n'
p902
tp903
sS'set_quoting_style'
p904
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p905
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p906
S'TEST RDI,RDI\nMOV EAX,0x6198e0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p907
S'48 85 ff\nb8 e0 98 61 00\n48 0f 45 c7\n89 30\nc3\n'
p908
S'.text:000000000040a790\n.text:000000000040a793\n.text:000000000040a798\n.text:000000000040a79c\n.text:000000000040a79e\n'
p909
tp910
sS'hash_get_entries'
p911
(S'\n__stdcall hash_get_entries(Hash_table * table, void * * buffer, size_t buffer_size)\n'
p912
V\u000asize_t hash_get_entries(Hash_table *table,void **buffer,size_t buffer_size)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  ulong uVar2;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar3 = table->bucket;\u000a  if (table->bucket_limit <= phVar3) {\u000a    return 0;\u000a  }\u000a  uVar2 = 0;\u000a  do {\u000a    phVar1 = phVar3;\u000a    if (phVar3->data != (void *)0x0) {\u000a      while (phVar1 != (hash_entry *)0x0) {\u000a        if (buffer_size <= uVar2) {\u000a          return uVar2;\u000a        }\u000a        buffer[uVar2] = phVar1->data;\u000a        uVar2 = uVar2 + 1;\u000a        phVar1 = phVar1->next;\u000a      }\u000a    }\u000a    phVar3 = phVar3 + 1;\u000a  } while (phVar3 < table->bucket_limit);\u000a  return uVar2;\u000a}\u000a\u000a
p913
S'MOV R8,qword ptr [RDI]\nCMP R8,qword ptr [RDI + 0x8]\nJNC 0x004098f3\nXOR EAX,EAX\nCMP qword ptr [R8],0x0\nJZ 0x004098e8\nTEST R8,R8\nJZ 0x004098e8\nMOV R9,R8\nNOP dword ptr [RAX]\nCMP RAX,RDX\nJNC 0x004098f2\nMOV RCX,qword ptr [R9]\nMOV qword ptr [RSI + RAX*0x8],RCX\nINC RAX\nMOV R9,qword ptr [R9 + 0x8]\nTEST R9,R9\nJNZ 0x004098d0\nADD R8,0x10\nCMP R8,qword ptr [RDI + 0x8]\nJC 0x004098bb\nRET\nXOR EAX,EAX\nRET\n'
p914
S'4c 8b 07\n4c 3b 47 08\n73 3a\n31 c0\n49 83 38 00\n74 27\n4d 85 c0\n74 22\n4d 89 c1\n0f 1f 80 00 00 00 00\n48 39 d0\n73 1d\n49 8b 09\n48 89 0c c6\n48 ff c0\n4d 8b 49 08\n4d 85 c9\n75 e8\n49 83 c0 10\n4c 3b 47 08\n72 c9\nc3\n31 c0\nc3\n'
p915
S'.text:00000000004098b0\n.text:00000000004098b3\n.text:00000000004098b7\n.text:00000000004098b9\n.text:00000000004098bb\n.text:00000000004098bf\n.text:00000000004098c1\n.text:00000000004098c4\n.text:00000000004098c6\n.text:00000000004098c9\n.text:00000000004098d0\n.text:00000000004098d3\n.text:00000000004098d5\n.text:00000000004098d8\n.text:00000000004098dc\n.text:00000000004098df\n.text:00000000004098e3\n.text:00000000004098e6\n.text:00000000004098e8\n.text:00000000004098ec\n.text:00000000004098f0\n.text:00000000004098f2\n.text:00000000004098f3\n.text:00000000004098f5\n'
p916
tp917
sS'xmemdup'
p918
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p919
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p920
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x0040d950\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x004024d0\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p921
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 1c 4a ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p922
S'.text:000000000040da90\n.text:000000000040da92\n.text:000000000040da94\n.text:000000000040da95\n.text:000000000040da98\n.text:000000000040da9b\n.text:000000000040da9e\n.text:000000000040daa3\n.text:000000000040daa6\n.text:000000000040daa9\n.text:000000000040daac\n.text:000000000040daaf\n.text:000000000040dab4\n.text:000000000040dab7\n.text:000000000040dab8\n.text:000000000040daba\n.text:000000000040dabc\n'
p923
tp924
sS'get_quoting_style'
p925
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p926
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p927
S'TEST RDI,RDI\nMOV EAX,0x6198e0\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p928
S'48 85 ff\nb8 e0 98 61 00\n48 0f 45 c7\n8b 00\nc3\n'
p929
S'.text:000000000040a780\n.text:000000000040a783\n.text:000000000040a788\n.text:000000000040a78c\n.text:000000000040a78e\n'
p930
tp931
sS'exit'
p932
(S'\n__stdcall exit(int __status)\n'
p933
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_00619350)();\u000a  return;\u000a}\u000a\u000a
p934
S'JMP qword ptr [0x00619350]\n'
p935
S'ff 25 2a 6c 21 00\n'
p936
S'.plt:0000000000402720\n'
p937
tp938
sS'safe_hasher'
p939
(S'\n__stdcall safe_hasher(Hash_table * table, void * key)\n'
p940
V\u000ahash_entry * safe_hasher(Hash_table *table,void *key)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*table->hasher)(key,table->n_buckets);\u000a  if (sVar1 < table->n_buckets) {\u000a    return table->bucket + sVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p941
S'PUSH RBX\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nMOV RDI,RSI\nMOV RSI,RAX\nCALL qword ptr [RBX + 0x30]\nCMP RAX,qword ptr [RBX + 0x10]\nJNC 0x004097e0\nSHL RAX,0x4\nADD RAX,qword ptr [RBX]\nPOP RBX\nRET\nCALL 0x004020f0\n'
p942
S'53\n48 89 fb\n48 8b 43 10\n48 89 f7\n48 89 c6\nff 53 30\n48 3b 43 10\n73 09\n48 c1 e0 04\n48 03 03\n5b\nc3\ne8 0b 89 ff ff\n'
p943
S'.text:00000000004097c0\n.text:00000000004097c1\n.text:00000000004097c4\n.text:00000000004097c8\n.text:00000000004097cb\n.text:00000000004097ce\n.text:00000000004097d1\n.text:00000000004097d5\n.text:00000000004097d7\n.text:00000000004097db\n.text:00000000004097de\n.text:00000000004097df\n.text:00000000004097e0\n'
p944
tp945
sS'chown_failure_ok'
p946
(S'\n__stdcall chown_failure_ok(cp_options * x)\n'
p947
V\u000a_Bool chown_failure_ok(cp_options *x)\u000a\u000a{\u000a  int *piVar1;\u000a  bool bVar2;\u000a  \u000a  piVar1 = __errno_location();\u000a  if ((*piVar1 == 0x16) || (*piVar1 == 1)) {\u000a    bVar2 = x->chown_privileges == false;\u000a  }\u000a  else {\u000a    bVar2 = false;\u000a  }\u000a  return (_Bool)bVar2;\u000a}\u000a\u000a
p948
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00402100\nMOV EAX,dword ptr [RAX]\nCMP EAX,0x16\nJZ 0x00405c25\nCMP EAX,0x1\nJNZ 0x00405c2e\nCMP byte ptr [RBX + 0x19],0x0\nSETZ AL\nJMP 0x00405c30\nXOR EAX,EAX\nPOP RBX\nRET\n'
p949
S'53\n48 89 fb\ne8 e7 c4 ff ff\n8b 00\n83 f8 16\n74 05\n83 f8 01\n75 09\n80 7b 19 00\n0f 94 c0\neb 02\n31 c0\n5b\nc3\n'
p950
S'.text:0000000000405c10\n.text:0000000000405c11\n.text:0000000000405c14\n.text:0000000000405c19\n.text:0000000000405c1b\n.text:0000000000405c1e\n.text:0000000000405c20\n.text:0000000000405c23\n.text:0000000000405c25\n.text:0000000000405c29\n.text:0000000000405c2c\n.text:0000000000405c2e\n.text:0000000000405c30\n.text:0000000000405c31\n'
p951
tp952
sS'hash_delete'
p953
(S'\n__stdcall hash_delete(Hash_table * table, void * entry)\n'
p954
V\u000avoid * hash_delete(Hash_table *table,void *entry)\u000a\u000a{\u000a  ulong uVar1;\u000a  Hash_tuning *pHVar2;\u000a  hash_entry *phVar3;\u000a  hash_entry *__ptr;\u000a  _Bool _Var4;\u000a  void *pvVar5;\u000a  ulong uVar6;\u000a  size_t candidate;\u000a  float fVar7;\u000a  float fVar8;\u000a  hash_entry *local_20;\u000a  \u000a  pvVar5 = hash_find_entry(table,entry,&local_20);\u000a  if (pvVar5 == (void *)0x0) {\u000a    pvVar5 = (void *)0x0;\u000a  }\u000a  else {\u000a    table->n_entries = table->n_entries - 1;\u000a    if (local_20->data == (void *)0x0) {\u000a      uVar6 = table->n_buckets_used - 1;\u000a      table->n_buckets_used = uVar6;\u000a      if ((long)uVar6 < 0) {\u000a        fVar7 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a        fVar7 = fVar7 + fVar7;\u000a      }\u000a      else {\u000a        fVar7 = (float)uVar6;\u000a      }\u000a      uVar6 = table->n_buckets;\u000a      if ((long)uVar6 < 0) {\u000a        fVar8 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a        fVar8 = fVar8 + fVar8;\u000a      }\u000a      else {\u000a        fVar8 = (float)uVar6;\u000a      }\u000a      if (fVar7 < fVar8 * table->tuning->shrink_threshold) {\u000a        check_tuning(table);\u000a        uVar6 = table->n_buckets;\u000a        uVar1 = table->n_buckets_used;\u000a        if ((long)uVar1 < 0) {\u000a          fVar7 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a          fVar7 = fVar7 + fVar7;\u000a        }\u000a        else {\u000a          fVar7 = (float)uVar1;\u000a        }\u000a        pHVar2 = table->tuning;\u000a        if ((long)uVar6 < 0) {\u000a          fVar8 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a          fVar8 = fVar8 + fVar8;\u000a        }\u000a        else {\u000a          fVar8 = (float)uVar6;\u000a        }\u000a        if (fVar7 < pHVar2->shrink_threshold * fVar8) {\u000a          fVar8 = fVar8 * pHVar2->shrink_factor;\u000a          if (pHVar2->is_n_buckets == false) {\u000a            fVar8 = fVar8 * pHVar2->growth_threshold;\u000a          }\u000a          candidate = (long)fVar8;\u000a          if (DAT_004133e8 <= fVar8) {\u000a            candidate = (long)(fVar8 - DAT_004133e8) ^ 0x8000000000000000;\u000a          }\u000a          _Var4 = hash_rehash(table,candidate);\u000a          if (_Var4 == false) {\u000a            __ptr = table->free_entry_list;\u000a            while (__ptr != (hash_entry *)0x0) {\u000a              phVar3 = __ptr->next;\u000a              free(__ptr);\u000a              __ptr = phVar3;\u000a            }\u000a            table->free_entry_list = (hash_entry *)0x0;\u000a          }\u000a        }\u000a      }\u000a    }\u000a  }\u000a  return pvVar5;\u000a}\u000a\u000a
p955
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV R15,RDI\nLEA RDX,[RSP + 0x8]\nMOV ECX,0x1\nCALL 0x0040a1b0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0040a31a\nDEC qword ptr [R15 + 0x20]\nMOV RAX,qword ptr [RSP + 0x8]\nCMP qword ptr [RAX],0x0\nJNZ 0x0040a449\nMOV RAX,qword ptr [R15 + 0x18]\nDEC RAX\nMOV qword ptr [R15 + 0x18],RAX\nJS 0x0040a322\nCVTSI2SS XMM0,RAX\nJMP 0x0040a337\nXOR R14D,R14D\nJMP 0x0040a449\nMOV RCX,RAX\nSHR RCX,1\nAND EAX,0x1\nOR RAX,RCX\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOV RCX,qword ptr [R15 + 0x10]\nMOV RAX,qword ptr [R15 + 0x28]\nTEST RCX,RCX\nJS 0x0040a34b\nCVTSI2SS XMM1,RCX\nJMP 0x0040a360\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM1,RCX\nADDSS XMM1,XMM1\nMULSS XMM1,dword ptr [RAX]\nUCOMISS XMM1,XMM0\nJBE 0x0040a449\nMOV RDI,R15\nCALL 0x00409ae0\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x0040a38c\nXORPS XMM1,XMM1\nCVTSI2SS XMM1,RCX\nJMP 0x0040a3a4\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nXORPS XMM1,XMM1\nCVTSI2SS XMM1,RCX\nADDSS XMM1,XMM1\nMOV RCX,qword ptr [R15 + 0x28]\nTEST RAX,RAX\nJS 0x0040a3b7\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nJMP 0x0040a3cf\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOVSS XMM2,dword ptr [RCX]\nMULSS XMM2,XMM0\nUCOMISS XMM2,XMM1\nJBE 0x0040a449\nMULSS XMM0,dword ptr [RCX + 0x4]\nCMP byte ptr [RCX + 0x10],0x0\nJNZ 0x0040a3ec\nMULSS XMM0,dword ptr [RCX + 0x8]\nMOVSS XMM1,dword ptr [0x004133e8]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RSI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RSI,RCX\nMOV RDI,R15\nCALL 0x00409d80\nTEST AL,AL\nJNZ 0x0040a449\nMOV RDI,qword ptr [R15 + 0x48]\nTEST RDI,RDI\nJZ 0x0040a441\nNOP\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x004020c0\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x0040a430\nMOV qword ptr [R15 + 0x48],0x0\nMOV RAX,R14\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p956
S'41 57\n41 56\n53\n48 83 ec 10\n49 89 ff\n48 8d 54 24 08\nb9 01 00 00 00\ne8 c5 fe ff ff\n49 89 c6\n4d 85 f6\n74 27\n49 ff 4f 20\n48 8b 44 24 08\n48 83 38 00\n0f 85 43 01 00 00\n49 8b 47 18\n48 ff c8\n49 89 47 18\n78 0f\nf3 48 0f 2a c0\neb 1d\n45 31 f6\ne9 27 01 00 00\n48 89 c1\n48 d1 e9\n83 e0 01\n48 09 c8\nf3 48 0f 2a c0\nf3 0f 58 c0\n49 8b 4f 10\n49 8b 47 28\n48 85 c9\n78 07\nf3 48 0f 2a c9\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a c9\nf3 0f 58 c9\nf3 0f 59 08\n0f 2e c8\n0f 86 dc 00 00 00\n4c 89 ff\ne8 6b f7 ff ff\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 0a\n0f 57 c9\nf3 48 0f 2a c9\neb 18\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\n0f 57 c9\nf3 48 0f 2a c9\nf3 0f 58 c9\n49 8b 4f 28\n48 85 c0\n78 0a\n0f 57 c0\nf3 48 0f 2a c0\neb 18\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\n0f 57 c0\nf3 48 0f 2a c0\nf3 0f 58 c0\nf3 0f 10 11\nf3 0f 59 d0\n0f 2e d1\n76 6d\nf3 0f 59 41 04\n80 79 10 00\n75 05\nf3 0f 59 41 08\nf3 0f 10 0d f4 8f 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f0\n0f 2e c1\n48 0f 43 f1\n4c 89 ff\ne8 5f f9 ff ff\n84 c0\n75 24\n49 8b 7f 48\n48 85 ff\n74 13\n66 90\n48 8b 5f 08\ne8 87 7c ff ff\n48 85 db\n48 89 df\n75 ef\n49 c7 47 48 00 00 00 00\n4c 89 f0\n48 83 c4 10\n5b\n41 5e\n41 5f\nc3\n'
p957
S'.text:000000000040a2d0\n.text:000000000040a2d2\n.text:000000000040a2d4\n.text:000000000040a2d5\n.text:000000000040a2d9\n.text:000000000040a2dc\n.text:000000000040a2e1\n.text:000000000040a2e6\n.text:000000000040a2eb\n.text:000000000040a2ee\n.text:000000000040a2f1\n.text:000000000040a2f3\n.text:000000000040a2f7\n.text:000000000040a2fc\n.text:000000000040a300\n.text:000000000040a306\n.text:000000000040a30a\n.text:000000000040a30d\n.text:000000000040a311\n.text:000000000040a313\n.text:000000000040a318\n.text:000000000040a31a\n.text:000000000040a31d\n.text:000000000040a322\n.text:000000000040a325\n.text:000000000040a328\n.text:000000000040a32b\n.text:000000000040a32e\n.text:000000000040a333\n.text:000000000040a337\n.text:000000000040a33b\n.text:000000000040a33f\n.text:000000000040a342\n.text:000000000040a344\n.text:000000000040a349\n.text:000000000040a34b\n.text:000000000040a34e\n.text:000000000040a351\n.text:000000000040a354\n.text:000000000040a357\n.text:000000000040a35c\n.text:000000000040a360\n.text:000000000040a364\n.text:000000000040a367\n.text:000000000040a36d\n.text:000000000040a370\n.text:000000000040a375\n.text:000000000040a379\n.text:000000000040a37d\n.text:000000000040a380\n.text:000000000040a382\n.text:000000000040a385\n.text:000000000040a38a\n.text:000000000040a38c\n.text:000000000040a38f\n.text:000000000040a392\n.text:000000000040a395\n.text:000000000040a398\n.text:000000000040a39b\n.text:000000000040a3a0\n.text:000000000040a3a4\n.text:000000000040a3a8\n.text:000000000040a3ab\n.text:000000000040a3ad\n.text:000000000040a3b0\n.text:000000000040a3b5\n.text:000000000040a3b7\n.text:000000000040a3ba\n.text:000000000040a3bd\n.text:000000000040a3c0\n.text:000000000040a3c3\n.text:000000000040a3c6\n.text:000000000040a3cb\n.text:000000000040a3cf\n.text:000000000040a3d3\n.text:000000000040a3d7\n.text:000000000040a3da\n.text:000000000040a3dc\n.text:000000000040a3e1\n.text:000000000040a3e5\n.text:000000000040a3e7\n.text:000000000040a3ec\n.text:000000000040a3f4\n.text:000000000040a3f7\n.text:000000000040a3fb\n.text:000000000040a400\n.text:000000000040a40a\n.text:000000000040a40d\n.text:000000000040a412\n.text:000000000040a415\n.text:000000000040a419\n.text:000000000040a41c\n.text:000000000040a421\n.text:000000000040a423\n.text:000000000040a425\n.text:000000000040a429\n.text:000000000040a42c\n.text:000000000040a42e\n.text:000000000040a430\n.text:000000000040a434\n.text:000000000040a439\n.text:000000000040a43c\n.text:000000000040a43f\n.text:000000000040a441\n.text:000000000040a449\n.text:000000000040a44c\n.text:000000000040a450\n.text:000000000040a451\n.text:000000000040a453\n.text:000000000040a455\n'
p958
tp959
sS'quotearg_colon'
p960
(S'\n__stdcall quotearg_colon(char * arg)\n'
p961
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p962
S'MOV ESI,0x3a\nJMP 0x0040ba10\n'
p963
S'be 3a 00 00 00\neb e9\n'
p964
S'.text:000000000040ba20\n.text:000000000040ba25\n'
p965
tp966
sS'__assert_fail'
p967
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p968
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_00619168)();\u000a  return;\u000a}\u000a\u000a
p969
S'JMP qword ptr [0x00619168]\n'
p970
S'ff 25 12 6e 21 00\n'
p971
S'.plt:0000000000402350\n'
p972
tp973
sS'extent_scan_init'
p974
(S'\n__stdcall extent_scan_init(extent_scan * scan)\n'
p975
V\u000avoid extent_scan_init(extent_scan *scan)\u000a\u000a{\u000a  undefined4 *in_RSI;\u000a  \u000a  *in_RSI = (int)scan;\u000a  *(undefined8 *)(in_RSI + 6) = 0;\u000a  *(undefined8 *)(in_RSI + 10) = 0;\u000a  *(undefined8 *)(in_RSI + 2) = 0;\u000a  *(undefined *)(in_RSI + 8) = 0;\u000a  *(undefined *)((long)in_RSI + 0x21) = 0;\u000a  in_RSI[4] = 1;\u000a  return;\u000a}\u000a\u000a
p976
S'MOV dword ptr [RSI],EDI\nMOV qword ptr [RSI + 0x18],0x0\nMOV qword ptr [RSI + 0x28],0x0\nMOV qword ptr [RSI + 0x8],0x0\nMOV byte ptr [RSI + 0x20],0x0\nMOV byte ptr [RSI + 0x21],0x0\nMOV dword ptr [RSI + 0x10],0x1\nRET\n'
p977
S'89 3e\n48 c7 46 18 00 00 00 00\n48 c7 46 28 00 00 00 00\n48 c7 46 08 00 00 00 00\nc6 46 20 00\nc6 46 21 00\nc7 46 10 01 00 00 00\nc3\n'
p978
S'.text:0000000000408380\n.text:0000000000408382\n.text:000000000040838a\n.text:0000000000408392\n.text:000000000040839a\n.text:000000000040839e\n.text:00000000004083a2\n.text:00000000004083a9\n'
p979
tp980
sS'bindtextdomain'
p981
(S'\n__stdcall bindtextdomain()\n'
p982
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_006190e0)();\u000a  return;\u000a}\u000a\u000a
p983
S'JMP qword ptr [0x006190e0]\n'
p984
S'ff 25 9a 6e 21 00\n'
p985
S'.plt:0000000000402240\n'
p986
tp987
sS'set_char_quoting'
p988
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p989
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p990
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x6198e0\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p991
S'89 f1\n48 85 ff\nbe e0 98 61 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p992
S'.text:000000000040a7a0\n.text:000000000040a7a2\n.text:000000000040a7a5\n.text:000000000040a7aa\n.text:000000000040a7ae\n.text:000000000040a7b0\n.text:000000000040a7b3\n.text:000000000040a7b7\n.text:000000000040a7bc\n.text:000000000040a7bf\n.text:000000000040a7c1\n.text:000000000040a7c3\n.text:000000000040a7c6\n.text:000000000040a7c8\n.text:000000000040a7cb\n.text:000000000040a7cd\n.text:000000000040a7d0\n.text:000000000040a7d5\n'
p993
tp994
sS'xcalloc'
p995
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p996
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p997
S'PUSH RAX\nCALL 0x0040dbe0\nTEST RAX,RAX\nJZ 0x0040da7d\nPOP RCX\nRET\nCALL 0x0040dae0\n'
p998
S'50\ne8 6a 01 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p999
S'.text:000000000040da70\n.text:000000000040da71\n.text:000000000040da76\n.text:000000000040da79\n.text:000000000040da7b\n.text:000000000040da7c\n.text:000000000040da7d\n'
p1000
tp1001
sS'fts_open'
p1002
(S'\n__stdcall fts_open(char * * argv, anon_subr_int_FTSENT_ptr_ptr_FTSENT_ptr_ptr * compar)\n'
p1003
V\u000aFTS * fts_open(char **argv,int (*compar)(FTSENT **,FTSENT **))\u000a\u000a{\u000a  uint uVar1;\u000a  _ftsent *p_Var2;\u000a  _Bool _Var3;\u000a  unsigned_short uVar4;\u000a  uint uVar5;\u000a  int iVar6;\u000a  FTS *sp;\u000a  size_t sVar7;\u000a  FTSENT *__ptr;\u000a  int *piVar8;\u000a  size_t more;\u000a  FTSENT *p;\u000a  int (*in_RDX)(_ftsent **,_ftsent **);\u000a  ulong nitems;\u000a  char *__s;\u000a  byte local_59;\u000a  FTSENT *local_58;\u000a  FTSENT *local_48;\u000a  \u000a  uVar1 = (uint)compar;\u000a  if (((0x1fff < uVar1) || ((uVar1 & 0x204) == 0x204)) || (((ulong)compar & 0x12) == 0)) {\u000a    piVar8 = __errno_location();\u000a    *piVar8 = 0x16;\u000a    return (FTS *)0x0;\u000a  }\u000a  sp = (FTS *)malloc(0x80);\u000a  if (sp == (FTS *)0x0) {\u000a    return (FTS *)0x0;\u000a  }\u000a  (sp->fts_fd_ring).ir_default_val = 0;\u000a  (sp->fts_fd_ring).ir_front = 0;\u000a  (sp->fts_fd_ring).ir_back = 0;\u000a  *(undefined4 *)&(sp->fts_fd_ring).ir_empty = 0;\u000a  (sp->fts_fd_ring).ir_data[0] = 0;\u000a  (sp->fts_fd_ring).ir_data[1] = 0;\u000a  (sp->fts_fd_ring).ir_data[2] = 0;\u000a  (sp->fts_fd_ring).ir_data[3] = 0;\u000a  *(undefined4 *)&sp->fts_leaf_optimization_works_ht = 0;\u000a  *(undefined4 *)((long)&sp->fts_leaf_optimization_works_ht + 4) = 0;\u000a  *(undefined4 *)&sp->fts_cycle = 0;\u000a  *(undefined4 *)((long)&sp->fts_cycle + 4) = 0;\u000a  *(undefined4 *)&sp->fts_compar = 0;\u000a  *(undefined4 *)((long)&sp->fts_compar + 4) = 0;\u000a  sp->fts_options = 0;\u000a  *(undefined4 *)&sp->field_0x4c = 0;\u000a  *(undefined4 *)&sp->fts_pathlen = 0;\u000a  *(undefined4 *)((long)&sp->fts_pathlen + 4) = 0;\u000a  *(undefined4 *)&sp->fts_nitems = 0;\u000a  *(undefined4 *)((long)&sp->fts_nitems + 4) = 0;\u000a  *(undefined4 *)&sp->fts_path = 0;\u000a  *(undefined4 *)((long)&sp->fts_path + 4) = 0;\u000a  sp->fts_rfd = 0;\u000a  sp->fts_cwd_fd = 0;\u000a  *(undefined4 *)&sp->fts_array = 0;\u000a  *(undefined4 *)((long)&sp->fts_array + 4) = 0;\u000a  *(undefined4 *)&sp->fts_dev = 0;\u000a  *(undefined4 *)((long)&sp->fts_dev + 4) = 0;\u000a  *(undefined4 *)&sp->fts_cur = 0;\u000a  *(undefined4 *)((long)&sp->fts_cur + 4) = 0;\u000a  *(undefined4 *)&sp->fts_child = 0;\u000a  *(undefined4 *)((long)&sp->fts_child + 4) = 0;\u000a  sp->fts_compar = in_RDX;\u000a  uVar5 = uVar1 & 0xfffffdfb | 4;\u000a  if (((ulong)compar & 2) == 0) {\u000a    uVar5 = uVar1;\u000a  }\u000a  sp->fts_options = uVar5;\u000a  sp->fts_cwd_fd = -100;\u000a  sVar7 = fts_maxarglen(argv);\u000a  more = 0x1000;\u000a  if (0x1000 < sVar7) {\u000a    more = sVar7;\u000a  }\u000a  _Var3 = fts_palloc(sp,more);\u000a  if (_Var3 == false) goto LAB_0040e234;\u000a  if (*argv == (char *)0x0) {\u000a    __ptr = (FTSENT *)0x0;\u000aLAB_0040dffb:\u000a    if (in_RDX == (int (*)(_ftsent **,_ftsent **))0x0) {\u000a      local_59 = 1;\u000a    }\u000a    else {\u000a      local_59 = (byte)(((ulong)*(byte *)((long)&sp->fts_options + 1) & 0xffffffffffffff04) >> 2);\u000a    }\u000a    __s = *argv;\u000a    if (__s == (char *)0x0) {\u000a      local_58 = (FTSENT *)0x0;\u000a    }\u000a    else {\u000a      local_58 = (FTSENT *)0x0;\u000a      local_48 = (FTSENT *)0x0;\u000a      nitems = 0;\u000a      do {\u000a        more = strlen(__s);\u000a        if (((((ulong)compar & 0x1000) == 0) && (2 < more)) && (__s[more - 1] == '/')) {\u000a          do {\u000a            if (__s[more - 2] != '/') break;\u000a            more = more - 1;\u000a          } while (1 < more);\u000a        }\u000a        p = fts_alloc(sp,*argv,more);\u000a        if (p == (FTSENT *)0x0) goto LAB_0040e21b;\u000a        p->fts_level = 0;\u000a        *(FTSENT **)&p->fts_parent = __ptr;\u000a        *(FTSENT **)&p->fts_accpath = p + 1;\u000a        if ((local_58 != (FTSENT *)0x0 & local_59) == 1) {\u000a          p->fts_info = 0xb;\u000a          fts_set_stat_required(p);\u000a          if (in_RDX != (int (*)(_ftsent **,_ftsent **))0x0) goto LAB_0040e0b7;\u000aLAB_0040e0c2:\u000a          p->fts_link = (_ftsent *)0x0;\u000a          p_Var2 = (_ftsent *)p;\u000a          if (local_58 != (FTSENT *)0x0) {\u000a            *(FTSENT **)&local_48->fts_link = p;\u000a            p_Var2 = (_ftsent *)local_58;\u000a          }\u000a        }\u000a        else {\u000a          uVar4 = fts_stat(sp,p);\u000a          p->fts_info = uVar4;\u000a          if (in_RDX == (int (*)(_ftsent **,_ftsent **))0x0) goto LAB_0040e0c2;\u000aLAB_0040e0b7:\u000a          *(FTSENT **)&p->fts_link = local_58;\u000a          p_Var2 = (_ftsent *)p;\u000a          p = local_48;\u000a        }\u000a        local_48 = p;\u000a        local_58 = (FTSENT *)p_Var2;\u000a        nitems = nitems + 1;\u000a        __s = argv[1];\u000a        argv = argv + 1;\u000a      } while (__s != (char *)0x0);\u000a      if ((in_RDX != (int (*)(_ftsent **,_ftsent **))0x0) && (1 < nitems)) {\u000a        local_58 = fts_sort(sp,local_58,nitems);\u000a      }\u000a    }\u000a    p = fts_alloc(sp,\u000a                     "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                     + 0xca,0);\u000a    *(FTSENT **)&sp->fts_cur = p;\u000a    if (p != (FTSENT *)0x0) {\u000a      *(FTSENT **)&p->fts_link = local_58;\u000a      sp->fts_cur->fts_info = 9;\u000a      _Var3 = setup_dir(sp);\u000a      if (_Var3 != false) {\u000a        if ((*(ushort *)&sp->fts_options & 0x204) == 0) {\u000a          iVar6 = diropen(sp,".");\u000a          sp->fts_rfd = iVar6;\u000a          if (iVar6 < 0) {\u000a            *(byte *)&sp->fts_options = *(byte *)&sp->fts_options | 4;\u000a          }\u000a        }\u000a        i_ring_init(&sp->fts_fd_ring);\u000a        return sp;\u000a      }\u000a    }\u000aLAB_0040e21b:\u000a    fts_lfree(local_58);\u000a    free(__ptr);\u000a  }\u000a  else {\u000a    __ptr = fts_alloc(sp,\u000a                         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                         + 0xca,0);\u000a    if (__ptr != (FTSENT *)0x0) {\u000a      __ptr->fts_level = -1;\u000a      goto LAB_0040dffb;\u000a    }\u000a  }\u000a  free(sp->fts_path);\u000aLAB_0040e234:\u000a  free(sp);\u000a  return (FTS *)0x0;\u000a}\u000a\u000a
p1004
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RDX\nMOV R14D,ESI\nMOV R15,RDI\nCMP R14D,0x2000\nJNC 0x0040dfd8\nMOV EAX,R14D\nAND EAX,0x204\nCMP EAX,0x204\nJZ 0x0040dfd8\nTEST R14B,0x12\nJZ 0x0040dfd8\nMOV EDI,0x80\nCALL 0x00402540\nMOV R13,RAX\nTEST R13,R13\nJZ 0x0040dfe3\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R13 + 0x70],XMM0\nMOVUPS xmmword ptr [R13 + 0x60],XMM0\nMOVUPS xmmword ptr [R13 + 0x50],XMM0\nMOVUPS xmmword ptr [R13 + 0x40],XMM0\nMOVUPS xmmword ptr [R13 + 0x30],XMM0\nMOVUPS xmmword ptr [R13 + 0x20],XMM0\nMOVUPS xmmword ptr [R13 + 0x10],XMM0\nMOVUPS xmmword ptr [R13],XMM0\nMOV qword ptr [R13 + 0x40],RBP\nMOV EAX,R14D\nAND EAX,0xfffffdfb\nOR EAX,0x4\nTEST R14B,0x2\nCMOVZ EAX,R14D\nMOV dword ptr [R13 + 0x48],EAX\nMOV dword ptr [R13 + 0x2c],0xffffff9c\nMOV RDI,R15\nCALL 0x0040e250\nCMP RAX,0x1000\nMOV ESI,0x1000\nCMOVA RSI,RAX\nMOV RDI,R13\nCALL 0x0040e2a0\nTEST AL,AL\nJZ 0x0040e234\nCMP qword ptr [R15],0x0\nJZ 0x0040dff8\nMOV ESI,0x413b59\nXOR EDX,EDX\nMOV RDI,R13\nCALL 0x0040e300\nMOV R12,RAX\nTEST R12,R12\nJZ 0x0040e22b\nMOV qword ptr [R12 + 0x58],-0x1\nJMP 0x0040dffb\nCALL 0x00402100\nMOV dword ptr [RAX],0x16\nXOR R13D,R13D\nMOV RAX,R13\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR R12D,R12D\nTEST RBP,RBP\nMOV qword ptr [RSP + 0x28],R13\nJZ 0x0040e014\nMOV AL,byte ptr [R13 + 0x49]\nAND AL,0x4\nSHR AL,0x2\nMOV byte ptr [RSP + 0xf],AL\nJMP 0x0040e019\nMOV byte ptr [RSP + 0xf],0x1\nMOV R13,qword ptr [R15]\nTEST R13,R13\nJZ 0x0040e16e\nMOV qword ptr [RSP + 0x18],R12\nMOV qword ptr [RSP + 0x30],RBP\nAND R14D,0x1000\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x20],RAX\nXOR R12D,R12D\nJMP 0x0040e100\nMOV qword ptr [RBP + 0x58],0x0\nMOV RAX,qword ptr [RSP + 0x18]\nMOV qword ptr [RBP + 0x8],RAX\nMOV RAX,RBP\nADD RAX,0x108\nMOV qword ptr [RBP + 0x30],RAX\nMOV RBX,qword ptr [RSP + 0x10]\nTEST RBX,RBX\nSETNZ AL\nAND AL,byte ptr [RSP + 0xf]\nCMP AL,0x1\nJNZ 0x0040e09e\nMOV word ptr [RBP + 0x70],0xb\nMOV ESI,0x1\nMOV RDI,RBP\nCALL 0x0040e390\nCMP qword ptr [RSP + 0x30],0x0\nJNZ 0x0040e0b7\nJMP 0x0040e0c2\nXOR EDX,EDX\nMOV RDI,R13\nMOV RSI,RBP\nCALL 0x0040e3b0\nMOV word ptr [RBP + 0x70],AX\nCMP qword ptr [RSP + 0x30],0x0\nJZ 0x0040e0c2\nMOV qword ptr [RBP + 0x10],RBX\nMOV qword ptr [RSP + 0x10],RBP\nJMP 0x0040e0dd\nMOV qword ptr [RBP + 0x10],0x0\nTEST RBX,RBX\nJZ 0x0040e0f2\nMOV RAX,qword ptr [RSP + 0x20]\nMOV qword ptr [RAX + 0x10],RBP\nMOV qword ptr [RSP + 0x20],RBP\nINC R12\nMOV R13,qword ptr [R15 + 0x8]\nADD R15,0x8\nTEST R13,R13\nJNZ 0x0040e100\nJMP 0x0040e177\nMOV RAX,RBP\nMOV qword ptr [RSP + 0x20],RAX\nJMP 0x0040e0bb\nMOV RDI,R13\nCALL 0x00402290\nTEST R14D,R14D\nJNZ 0x0040e140\nCMP RAX,0x3\nJC 0x0040e140\nCMP byte ptr [R13 + RAX*0x1 + -0x1],0x2f\nJNZ 0x0040e140\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [R13 + RAX*0x1 + -0x2],0x2f\nJNZ 0x0040e140\nDEC RAX\nCMP RAX,0x1\nJA 0x0040e120\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RSI,qword ptr [R15]\nMOV R13,qword ptr [RSP + 0x28]\nMOV RDI,R13\nMOV RDX,RAX\nCALL 0x0040e300\nMOV RBP,RAX\nTEST RBP,RBP\nJNZ 0x0040e050\nMOV R12,qword ptr [RSP + 0x18]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x0040e21b\nXOR EBX,EBX\nMOV R13,qword ptr [RSP + 0x28]\nJMP 0x0040e1ae\nCMP qword ptr [RSP + 0x30],0x0\nMOV R13,qword ptr [RSP + 0x28]\nJZ 0x0040e1a4\nCMP R12,0x2\nJC 0x0040e1a4\nMOV RDI,R13\nMOV RSI,qword ptr [RSP + 0x10]\nMOV RDX,R12\nCALL 0x0040e520\nMOV RBX,RAX\nMOV R12,qword ptr [RSP + 0x18]\nJMP 0x0040e1ae\nMOV R12,qword ptr [RSP + 0x18]\nMOV RBX,qword ptr [RSP + 0x10]\nMOV ESI,0x413b59\nXOR EDX,EDX\nMOV RDI,R13\nCALL 0x0040e300\nMOV qword ptr [R13],RAX\nTEST RAX,RAX\nJZ 0x0040e21b\nMOV qword ptr [RAX + 0x10],RBX\nMOV RAX,qword ptr [R13]\nMOV word ptr [RAX + 0x70],0x9\nMOV RDI,R13\nCALL 0x0040e610\nTEST AL,AL\nJZ 0x0040e21b\nMOVZX EAX,word ptr [R13 + 0x48]\nTEST AX,0x204\nJNZ 0x0040e205\nMOV ESI,0x4124e0\nMOV RDI,R13\nCALL 0x0040e680\nMOV dword ptr [R13 + 0x28],EAX\nTEST EAX,EAX\nJNS 0x0040e205\nOR byte ptr [R13 + 0x48],0x4\nMOV RDI,R13\nADD RDI,0x60\nMOV ESI,0xffffffff\nCALL 0x004108e0\nJMP 0x0040dfe6\nMOV RDI,RBX\nCALL 0x0040e6e0\nMOV RDI,R12\nCALL 0x004020c0\nMOV RDI,qword ptr [R13 + 0x20]\nCALL 0x004020c0\nMOV RDI,R13\nCALL 0x004020c0\nJMP 0x0040dfe3\n'
p1005
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 d5\n41 89 f6\n49 89 ff\n41 81 fe 00 20 00 00\n0f 83 d4 00 00 00\n44 89 f0\n25 04 02 00 00\n3d 04 02 00 00\n0f 84 c1 00 00 00\n41 f6 c6 12\n0f 84 b7 00 00 00\nbf 80 00 00 00\ne8 15 46 ff ff\n49 89 c5\n4d 85 ed\n0f 84 ac 00 00 00\n0f 57 c0\n41 0f 11 45 70\n41 0f 11 45 60\n41 0f 11 45 50\n41 0f 11 45 40\n41 0f 11 45 30\n41 0f 11 45 20\n41 0f 11 45 10\n41 0f 11 45 00\n49 89 6d 40\n44 89 f0\n25 fb fd ff ff\n83 c8 04\n41 f6 c6 02\n41 0f 44 c6\n41 89 45 48\n41 c7 45 2c 9c ff ff ff\n4c 89 ff\ne8 c3 02 00 00\n48 3d 00 10 00 00\nbe 00 10 00 00\n48 0f 47 f0\n4c 89 ef\ne8 fc 02 00 00\n84 c0\n0f 84 88 02 00 00\n49 83 3f 00\n74 46\nbe 59 3b 41 00\n31 d2\n4c 89 ef\ne8 3f 03 00 00\n49 89 c4\n4d 85 e4\n0f 84 5e 02 00 00\n49 c7 44 24 58 ff ff ff ff\neb 23\ne8 23 41 ff ff\nc7 00 16 00 00 00\n45 31 ed\n4c 89 e8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n45 31 e4\n48 85 ed\n4c 89 6c 24 28\n74 0f\n41 8a 45 49\n24 04\nc0 e8 02\n88 44 24 0f\neb 05\nc6 44 24 0f 01\n4d 8b 2f\n4d 85 ed\n0f 84 49 01 00 00\n4c 89 64 24 18\n48 89 6c 24 30\n41 81 e6 00 10 00 00\n31 c0\n48 89 44 24 10\n31 c0\n48 89 44 24 20\n45 31 e4\ne9 b4 00 00 00\n48 c7 45 58 00 00 00 00\n48 8b 44 24 18\n48 89 45 08\n48 89 e8\n48 05 08 01 00 00\n48 89 45 30\n48 8b 5c 24 10\n48 85 db\n0f 95 c0\n22 44 24 0f\n3c 01\n75 1d\n66 c7 45 70 0b 00\nbe 01 00 00 00\n48 89 ef\ne8 fc 02 00 00\n48 83 7c 24 30 00\n75 1b\neb 24\n31 d2\n4c 89 ef\n48 89 ee\ne8 05 03 00 00\n66 89 45 70\n48 83 7c 24 30 00\n74 0b\n48 89 5d 10\n48 89 6c 24 10\neb 1b\n48 c7 45 10 00 00 00 00\n48 85 db\n74 23\n48 8b 44 24 20\n48 89 68 10\n48 89 6c 24 20\n49 ff c4\n4d 8b 6f 08\n49 83 c7 08\n4d 85 ed\n75 13\ne9 85 00 00 00\n48 89 e8\n48 89 44 24 20\neb bf\n4c 89 ef\ne8 88 41 ff ff\n45 85 f6\n75 33\n48 83 f8 03\n72 2d\n41 80 7c 05 ff 2f\n75 25\n0f 1f 44 00 00\n41 80 7c 05 fe 2f\n75 18\n48 ff c8\n48 83 f8 01\n77 ef\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 8b 37\n4c 8b 6c 24 28\n4c 89 ef\n48 89 c2\ne8 ad 01 00 00\n48 89 c5\n48 85 ed\n0f 85 f1 fe ff ff\n4c 8b 64 24 18\n48 8b 5c 24 10\ne9 ad 00 00 00\n31 db\n4c 8b 6c 24 28\neb 37\n48 83 7c 24 30 00\n4c 8b 6c 24 28\n74 20\n49 83 fc 02\n72 1a\n4c 89 ef\n48 8b 74 24 10\n4c 89 e2\ne8 86 03 00 00\n48 89 c3\n4c 8b 64 24 18\neb 0a\n4c 8b 64 24 18\n48 8b 5c 24 10\nbe 59 3b 41 00\n31 d2\n4c 89 ef\ne8 43 01 00 00\n49 89 45 00\n48 85 c0\n74 55\n48 89 58 10\n49 8b 45 00\n66 c7 40 70 09 00\n4c 89 ef\ne8 34 04 00 00\n84 c0\n74 3b\n41 0f b7 45 48\n66 a9 04 02\n75 1a\nbe e0 24 41 00\n4c 89 ef\ne8 88 04 00 00\n41 89 45 28\n85 c0\n79 05\n41 80 4d 48 04\n4c 89 ef\n48 83 c7 60\nbe ff ff ff ff\ne8 ca 26 00 00\ne9 cb fd ff ff\n48 89 df\ne8 bd 04 00 00\n4c 89 e7\ne8 95 3e ff ff\n49 8b 7d 20\ne8 8c 3e ff ff\n4c 89 ef\ne8 84 3e ff ff\ne9 a2 fd ff ff\n'
p1006
S'.text:000000000040dee0\n.text:000000000040dee1\n.text:000000000040dee3\n.text:000000000040dee5\n.text:000000000040dee7\n.text:000000000040dee9\n.text:000000000040deea\n.text:000000000040deee\n.text:000000000040def1\n.text:000000000040def4\n.text:000000000040def7\n.text:000000000040defe\n.text:000000000040df04\n.text:000000000040df07\n.text:000000000040df0c\n.text:000000000040df11\n.text:000000000040df17\n.text:000000000040df1b\n.text:000000000040df21\n.text:000000000040df26\n.text:000000000040df2b\n.text:000000000040df2e\n.text:000000000040df31\n.text:000000000040df37\n.text:000000000040df3a\n.text:000000000040df3f\n.text:000000000040df44\n.text:000000000040df49\n.text:000000000040df4e\n.text:000000000040df53\n.text:000000000040df58\n.text:000000000040df5d\n.text:000000000040df62\n.text:000000000040df66\n.text:000000000040df69\n.text:000000000040df6e\n.text:000000000040df71\n.text:000000000040df75\n.text:000000000040df79\n.text:000000000040df7d\n.text:000000000040df85\n.text:000000000040df88\n.text:000000000040df8d\n.text:000000000040df93\n.text:000000000040df98\n.text:000000000040df9c\n.text:000000000040df9f\n.text:000000000040dfa4\n.text:000000000040dfa6\n.text:000000000040dfac\n.text:000000000040dfb0\n.text:000000000040dfb2\n.text:000000000040dfb7\n.text:000000000040dfb9\n.text:000000000040dfbc\n.text:000000000040dfc1\n.text:000000000040dfc4\n.text:000000000040dfc7\n.text:000000000040dfcd\n.text:000000000040dfd6\n.text:000000000040dfd8\n.text:000000000040dfdd\n.text:000000000040dfe3\n.text:000000000040dfe6\n.text:000000000040dfe9\n.text:000000000040dfed\n.text:000000000040dfee\n.text:000000000040dff0\n.text:000000000040dff2\n.text:000000000040dff4\n.text:000000000040dff6\n.text:000000000040dff7\n.text:000000000040dff8\n.text:000000000040dffb\n.text:000000000040dffe\n.text:000000000040e003\n.text:000000000040e005\n.text:000000000040e009\n.text:000000000040e00b\n.text:000000000040e00e\n.text:000000000040e012\n.text:000000000040e014\n.text:000000000040e019\n.text:000000000040e01c\n.text:000000000040e01f\n.text:000000000040e025\n.text:000000000040e02a\n.text:000000000040e02f\n.text:000000000040e036\n.text:000000000040e038\n.text:000000000040e03d\n.text:000000000040e03f\n.text:000000000040e044\n.text:000000000040e047\n.text:000000000040e050\n.text:000000000040e058\n.text:000000000040e05d\n.text:000000000040e061\n.text:000000000040e064\n.text:000000000040e06a\n.text:000000000040e06e\n.text:000000000040e073\n.text:000000000040e076\n.text:000000000040e079\n.text:000000000040e07d\n.text:000000000040e07f\n.text:000000000040e081\n.text:000000000040e087\n.text:000000000040e08c\n.text:000000000040e08f\n.text:000000000040e094\n.text:000000000040e09a\n.text:000000000040e09c\n.text:000000000040e09e\n.text:000000000040e0a0\n.text:000000000040e0a3\n.text:000000000040e0a6\n.text:000000000040e0ab\n.text:000000000040e0af\n.text:000000000040e0b5\n.text:000000000040e0b7\n.text:000000000040e0bb\n.text:000000000040e0c0\n.text:000000000040e0c2\n.text:000000000040e0ca\n.text:000000000040e0cd\n.text:000000000040e0cf\n.text:000000000040e0d4\n.text:000000000040e0d8\n.text:000000000040e0dd\n.text:000000000040e0e0\n.text:000000000040e0e4\n.text:000000000040e0e8\n.text:000000000040e0eb\n.text:000000000040e0ed\n.text:000000000040e0f2\n.text:000000000040e0f5\n.text:000000000040e0fa\n.text:000000000040e100\n.text:000000000040e103\n.text:000000000040e108\n.text:000000000040e10b\n.text:000000000040e10d\n.text:000000000040e111\n.text:000000000040e113\n.text:000000000040e119\n.text:000000000040e11b\n.text:000000000040e120\n.text:000000000040e126\n.text:000000000040e128\n.text:000000000040e12b\n.text:000000000040e12f\n.text:000000000040e131\n.text:000000000040e140\n.text:000000000040e143\n.text:000000000040e148\n.text:000000000040e14b\n.text:000000000040e14e\n.text:000000000040e153\n.text:000000000040e156\n.text:000000000040e159\n.text:000000000040e15f\n.text:000000000040e164\n.text:000000000040e169\n.text:000000000040e16e\n.text:000000000040e170\n.text:000000000040e175\n.text:000000000040e177\n.text:000000000040e17d\n.text:000000000040e182\n.text:000000000040e184\n.text:000000000040e188\n.text:000000000040e18a\n.text:000000000040e18d\n.text:000000000040e192\n.text:000000000040e195\n.text:000000000040e19a\n.text:000000000040e19d\n.text:000000000040e1a2\n.text:000000000040e1a4\n.text:000000000040e1a9\n.text:000000000040e1ae\n.text:000000000040e1b3\n.text:000000000040e1b5\n.text:000000000040e1b8\n.text:000000000040e1bd\n.text:000000000040e1c1\n.text:000000000040e1c4\n.text:000000000040e1c6\n.text:000000000040e1ca\n.text:000000000040e1ce\n.text:000000000040e1d4\n.text:000000000040e1d7\n.text:000000000040e1dc\n.text:000000000040e1de\n.text:000000000040e1e0\n.text:000000000040e1e5\n.text:000000000040e1e9\n.text:000000000040e1eb\n.text:000000000040e1f0\n.text:000000000040e1f3\n.text:000000000040e1f8\n.text:000000000040e1fc\n.text:000000000040e1fe\n.text:000000000040e200\n.text:000000000040e205\n.text:000000000040e208\n.text:000000000040e20c\n.text:000000000040e211\n.text:000000000040e216\n.text:000000000040e21b\n.text:000000000040e21e\n.text:000000000040e223\n.text:000000000040e226\n.text:000000000040e22b\n.text:000000000040e22f\n.text:000000000040e234\n.text:000000000040e237\n.text:000000000040e23c\n'
p1007
tp1008
sS'pathconf'
p1009
(S'\n__stdcall pathconf(char * __path, int __name)\n'
p1010
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000along pathconf(char *__path,int __name)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  lVar1 = (*(code *)PTR_pathconf_006190c8)();\u000a  return lVar1;\u000a}\u000a\u000a
p1011
S'JMP qword ptr [0x006190c8]\n'
p1012
S'ff 25 b2 6e 21 00\n'
p1013
S'.plt:0000000000402210\n'
p1014
tp1015
sS'local_utimensat'
p1016
(S'\n__stdcall local_utimensat(char * file, timespec * ts)\n'
p1017
V\u000aint local_utimensat(char *file,timespec *ts)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int iVar3;\u000a  int __fd;\u000a  int *piVar4;\u000a  saved_cwd *__ptr;\u000a  uint *puVar5;\u000a  undefined4 *in_RCX;\u000a  undefined4 extraout_EDX;\u000a  timespec *timespec;\u000a  char proc_buf [4032];\u000a  saved_cwd local_ff8 [252];\u000a  \u000a  iVar2 = (int)in_RCX;\u000a  if (((ulong)in_RCX & 0xfffffeff) == 0) {\u000a    __fd = (int)(char *)((ulong)file & 0xffffffff);\u000a    if ((__fd == -100) || (*(char *)&ts->tv_sec == '/')) {\u000a      if (iVar2 != 0x100) {\u000a        iVar2 = utimens((char *)ts,timespec);\u000a        return iVar2;\u000a      }\u000a      iVar2 = lutimens((char *)ts,timespec);\u000a      return iVar2;\u000a    }\u000a    __ptr = (saved_cwd *)openat_proc_name((char *)local_ff8,(char *)((ulong)file & 0xffffffff));\u000a    if (__ptr != (saved_cwd *)0x0) {\u000a      if (iVar2 == 0x100) {\u000a        iVar3 = lutimens((char *)__ptr,timespec);\u000a      }\u000a      else {\u000a        iVar3 = utimens((char *)__ptr,timespec);\u000a      }\u000a      puVar5 = (uint *)__errno_location();\u000a      uVar1 = *puVar5;\u000a      if (__ptr != local_ff8) {\u000a        free(__ptr);\u000a      }\u000a      if (iVar3 != -1) {\u000a        return iVar3;\u000a      }\u000a      if (((0x26 < uVar1) ||\u000a          (in_RCX = (undefined4 *)&DAT_4000102006, (0x4000102006U >> ((ulong)uVar1 & 0x1f) & 1) == 0\u000a          )) && (uVar1 != 0x5f)) {\u000a        *puVar5 = uVar1;\u000a        return -1;\u000a      }\u000a    }\u000a    iVar3 = save_cwd(local_ff8);\u000a    if (iVar3 != 0) {\u000a      puVar5 = (uint *)__errno_location();\u000a      openat_save_fail((ulong)*puVar5);\u000aLAB_004100fd:\u000a      puVar5 = (uint *)__errno_location();\u000a      openat_restore_fail((ulong)*puVar5);\u000a      *in_RCX = extraout_EDX;\u000a      return 0;\u000a    }\u000a    if ((__fd < 0) || (local_ff8[0].desc != __fd)) {\u000a      __fd = fchdir(__fd);\u000a      if (__fd == 0) {\u000a        if (iVar2 == 0x100) {\u000a          iVar2 = lutimens((char *)ts,timespec);\u000a        }\u000a        else {\u000a          iVar2 = utimens((char *)ts,timespec);\u000a        }\u000a        __fd = 0;\u000a        if (iVar2 == -1) {\u000a          piVar4 = __errno_location();\u000a          __fd = *piVar4;\u000a        }\u000a        iVar3 = restore_cwd(local_ff8);\u000a        if (iVar3 == 0) {\u000a          free_cwd(local_ff8);\u000a          if (__fd == 0) {\u000a            return iVar2;\u000a          }\u000a          piVar4 = __errno_location();\u000a          *piVar4 = __fd;\u000a          return iVar2;\u000a        }\u000a        goto LAB_004100fd;\u000a      }\u000a      piVar4 = __errno_location();\u000a      iVar2 = *piVar4;\u000a      free_cwd(local_ff8);\u000a      *piVar4 = iVar2;\u000a    }\u000a    else {\u000a      free_cwd(local_ff8);\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 9;\u000a    }\u000a  }\u000a  else {\u000a    piVar4 = __errno_location();\u000a    *piVar4 = 0x16;\u000a  }\u000a  return -1;\u000a}\u000a\u000a
p1018
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xfd8\nMOV EBP,ECX\nMOV R14,RDX\nMOV R15,RSI\nMOV EBX,EDI\nTEST EBP,0xfffffeff\nJZ 0x0040ff69\nCALL 0x00402100\nMOV dword ptr [RAX],0x16\nMOV R12D,0xffffffff\nMOV EAX,R12D\nADD RSP,0xfd8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP EBX,-0x64\nJZ 0x0040ff74\nCMP byte ptr [R15],0x2f\nJNZ 0x0040ffa7\nMOV RDI,R15\nMOV RSI,R14\nADD RSP,0xfd8\nCMP EBP,0x100\nJNZ 0x0040ff98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x0040d240\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x0040d220\nLEA RDI,[RSP + 0x10]\nMOV ESI,EBX\nMOV RDX,R15\nCALL 0x00411220\nMOV R13,RAX\nTEST R13,R13\nJZ 0x00410028\nMOV RDI,R13\nMOV RSI,R14\nCMP EBP,0x100\nJNZ 0x0040ffd3\nCALL 0x0040d240\nJMP 0x0040ffd8\nCALL 0x0040d220\nMOV R12D,EAX\nCALL 0x00402100\nMOV qword ptr [RSP + 0x8],RAX\nMOV EDX,dword ptr [RAX]\nLEA RAX,[RSP + 0x10]\nCMP R13,RAX\nJZ 0x0040ffff\nMOV RDI,R13\nMOV R13D,EDX\nCALL 0x004020c0\nMOV EDX,R13D\nCMP R12D,-0x1\nJNZ 0x0040ff54\nCMP EDX,0x26\nJA 0x004100dc\nMOV EAX,EDX\nMOV RCX,0x4000102006\nBT RCX,RAX\nJNC 0x004100dc\nLEA RDI,[RSP + 0x10]\nCALL 0x00410e00\nTEST EAX,EAX\nJNZ 0x004100f1\nTEST EBX,EBX\nJS 0x0041005e\nCMP dword ptr [RSP + 0x10],EBX\nJNZ 0x0041005e\nLEA RDI,[RSP + 0x10]\nCALL 0x00410e70\nCALL 0x00402100\nMOV dword ptr [RAX],0x9\nJMP 0x0040ff4e\nMOV EDI,EBX\nCALL 0x004025b0\nTEST EAX,EAX\nJZ 0x00410084\nCALL 0x00402100\nMOV RBX,RAX\nMOV EBP,dword ptr [RBX]\nLEA RDI,[RSP + 0x10]\nCALL 0x00410e70\nMOV dword ptr [RBX],EBP\nJMP 0x0040ff4e\nMOV RDI,R15\nMOV RSI,R14\nCMP EBP,0x100\nJNZ 0x00410099\nCALL 0x0040d240\nJMP 0x0041009e\nCALL 0x0040d220\nMOV R12D,EAX\nXOR EBX,EBX\nCMP R12D,-0x1\nJNZ 0x004100b0\nCALL 0x00402100\nMOV EBX,dword ptr [RAX]\nLEA RDI,[RSP + 0x10]\nCALL 0x00410e50\nTEST EAX,EAX\nJNZ 0x004100fd\nLEA RDI,[RSP + 0x10]\nCALL 0x00410e70\nTEST EBX,EBX\nJZ 0x0040ff54\nCALL 0x00402100\nMOV dword ptr [RAX],EBX\nJMP 0x0040ff54\nCMP EDX,0x5f\nJZ 0x00410028\nMOV RAX,qword ptr [RSP + 0x8]\nMOV dword ptr [RAX],EDX\nJMP 0x0040ff54\nCALL 0x00402100\nMOV EDI,dword ptr [RAX]\nCALL 0x00410cc0\nCALL 0x00402100\nMOV EDI,dword ptr [RAX]\nCALL 0x00410d00\nNOP dword ptr [RAX]\n'
p1019
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec d8 0f 00 00\n89 cd\n49 89 d6\n49 89 f7\n89 fb\nf7 c5 ff fe ff ff\n74 26\ne8 b8 21 ff ff\nc7 00 16 00 00 00\n41 bc ff ff ff ff\n44 89 e0\n48 81 c4 d8 0f 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n83 fb 9c\n74 06\n41 80 3f 2f\n75 33\n4c 89 ff\n4c 89 f6\n48 81 c4 d8 0f 00 00\n81 fd 00 01 00 00\n75 0f\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 a8 d2 ff ff\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 79 d2 ff ff\n48 8d 7c 24 10\n89 de\n4c 89 fa\ne8 6a 12 00 00\n49 89 c5\n4d 85 ed\n74 6a\n4c 89 ef\n4c 89 f6\n81 fd 00 01 00 00\n75 07\ne8 6f d2 ff ff\neb 05\ne8 48 d2 ff ff\n41 89 c4\ne8 20 21 ff ff\n48 89 44 24 08\n8b 10\n48 8d 44 24 10\n49 39 c5\n74 0e\n4c 89 ef\n41 89 d5\ne8 c4 20 ff ff\n44 89 ea\n41 83 fc ff\n0f 85 4b ff ff ff\n83 fa 26\n0f 87 ca 00 00 00\n89 d0\n48 b9 06 20 10 00 40 00 00 00\n48 0f a3 c1\n0f 83 b4 00 00 00\n48 8d 7c 24 10\ne8 ce 0d 00 00\n85 c0\n0f 85 b7 00 00 00\n85 db\n78 20\n39 5c 24 10\n75 1a\n48 8d 7c 24 10\ne8 22 0e 00 00\ne8 ad 20 ff ff\nc7 00 09 00 00 00\ne9 f0 fe ff ff\n89 df\ne8 4b 25 ff ff\n85 c0\n74 1b\ne8 92 20 ff ff\n48 89 c3\n8b 2b\n48 8d 7c 24 10\ne8 f3 0d 00 00\n89 2b\ne9 ca fe ff ff\n4c 89 ff\n4c 89 f6\n81 fd 00 01 00 00\n75 07\ne8 a9 d1 ff ff\neb 05\ne8 82 d1 ff ff\n41 89 c4\n31 db\n41 83 fc ff\n75 07\ne8 52 20 ff ff\n8b 18\n48 8d 7c 24 10\ne8 96 0d 00 00\n85 c0\n75 3f\n48 8d 7c 24 10\ne8 a8 0d 00 00\n85 db\n0f 84 84 fe ff ff\ne8 2b 20 ff ff\n89 18\ne9 78 fe ff ff\n83 fa 5f\n0f 84 43 ff ff ff\n48 8b 44 24 08\n89 10\ne9 63 fe ff ff\ne8 0a 20 ff ff\n8b 38\ne8 c3 0b 00 00\ne8 fe 1f ff ff\n8b 38\ne8 f7 0b 00 00\n0f 1f 80 00 00 00 00\n'
p1020
S'.text:000000000040ff20\n.text:000000000040ff21\n.text:000000000040ff23\n.text:000000000040ff25\n.text:000000000040ff27\n.text:000000000040ff29\n.text:000000000040ff2a\n.text:000000000040ff31\n.text:000000000040ff33\n.text:000000000040ff36\n.text:000000000040ff39\n.text:000000000040ff3b\n.text:000000000040ff41\n.text:000000000040ff43\n.text:000000000040ff48\n.text:000000000040ff4e\n.text:000000000040ff54\n.text:000000000040ff57\n.text:000000000040ff5e\n.text:000000000040ff5f\n.text:000000000040ff61\n.text:000000000040ff63\n.text:000000000040ff65\n.text:000000000040ff67\n.text:000000000040ff68\n.text:000000000040ff69\n.text:000000000040ff6c\n.text:000000000040ff6e\n.text:000000000040ff72\n.text:000000000040ff74\n.text:000000000040ff77\n.text:000000000040ff7a\n.text:000000000040ff81\n.text:000000000040ff87\n.text:000000000040ff89\n.text:000000000040ff8a\n.text:000000000040ff8c\n.text:000000000040ff8e\n.text:000000000040ff90\n.text:000000000040ff92\n.text:000000000040ff93\n.text:000000000040ff98\n.text:000000000040ff99\n.text:000000000040ff9b\n.text:000000000040ff9d\n.text:000000000040ff9f\n.text:000000000040ffa1\n.text:000000000040ffa2\n.text:000000000040ffa7\n.text:000000000040ffac\n.text:000000000040ffae\n.text:000000000040ffb1\n.text:000000000040ffb6\n.text:000000000040ffb9\n.text:000000000040ffbc\n.text:000000000040ffbe\n.text:000000000040ffc1\n.text:000000000040ffc4\n.text:000000000040ffca\n.text:000000000040ffcc\n.text:000000000040ffd1\n.text:000000000040ffd3\n.text:000000000040ffd8\n.text:000000000040ffdb\n.text:000000000040ffe0\n.text:000000000040ffe5\n.text:000000000040ffe7\n.text:000000000040ffec\n.text:000000000040ffef\n.text:000000000040fff1\n.text:000000000040fff4\n.text:000000000040fff7\n.text:000000000040fffc\n.text:000000000040ffff\n.text:0000000000410003\n.text:0000000000410009\n.text:000000000041000c\n.text:0000000000410012\n.text:0000000000410014\n.text:000000000041001e\n.text:0000000000410022\n.text:0000000000410028\n.text:000000000041002d\n.text:0000000000410032\n.text:0000000000410034\n.text:000000000041003a\n.text:000000000041003c\n.text:000000000041003e\n.text:0000000000410042\n.text:0000000000410044\n.text:0000000000410049\n.text:000000000041004e\n.text:0000000000410053\n.text:0000000000410059\n.text:000000000041005e\n.text:0000000000410060\n.text:0000000000410065\n.text:0000000000410067\n.text:0000000000410069\n.text:000000000041006e\n.text:0000000000410071\n.text:0000000000410073\n.text:0000000000410078\n.text:000000000041007d\n.text:000000000041007f\n.text:0000000000410084\n.text:0000000000410087\n.text:000000000041008a\n.text:0000000000410090\n.text:0000000000410092\n.text:0000000000410097\n.text:0000000000410099\n.text:000000000041009e\n.text:00000000004100a1\n.text:00000000004100a3\n.text:00000000004100a7\n.text:00000000004100a9\n.text:00000000004100ae\n.text:00000000004100b0\n.text:00000000004100b5\n.text:00000000004100ba\n.text:00000000004100bc\n.text:00000000004100be\n.text:00000000004100c3\n.text:00000000004100c8\n.text:00000000004100ca\n.text:00000000004100d0\n.text:00000000004100d5\n.text:00000000004100d7\n.text:00000000004100dc\n.text:00000000004100df\n.text:00000000004100e5\n.text:00000000004100ea\n.text:00000000004100ec\n.text:00000000004100f1\n.text:00000000004100f6\n.text:00000000004100f8\n.text:00000000004100fd\n.text:0000000000410102\n.text:0000000000410104\n.text:0000000000410109\n'
p1021
tp1022
sS'fts_stat'
p1023
(S'\n__stdcall fts_stat(FTS * sp, FTSENT * p)\n'
p1024
V\u000aunsigned_short fts_stat(FTS *sp,FTSENT *p)\u000a\u000a{\u000a  stat *__buf;\u000a  char cVar1;\u000a  ushort uVar2;\u000a  int iVar3;\u000a  int iVar4;\u000a  int *piVar5;\u000a  byte in_DL;\u000a  \u000a  __buf = p->fts_statp;\u000a  if (((sp->fts_options & 2U) == 0) &&\u000a     ((byte)(p->fts_level == 0 & (byte)sp->fts_options & 1 | in_DL) != 1)) {\u000a    iVar3 = fstatat(sp->fts_cwd_fd,p->fts_accpath,(stat *)__buf,0x100);\u000a    if (iVar3 == 0) {\u000aLAB_0040e46d:\u000a      uVar2 = *(ushort *)&p->fts_statp[0].st_mode & 0xf000;\u000a      if (uVar2 == 0x8000) {\u000a        return 8;\u000a      }\u000a      if (uVar2 == 0xa000) {\u000a        return 0xc;\u000a      }\u000a      if (uVar2 != 0x4000) {\u000a        return 3;\u000a      }\u000a      p->fts_n_dirs_remaining =\u000a           p->fts_statp[0].st_nlink - (ulong)(~((uint)sp->fts_options >> 4) & 2);\u000a      if (*(char *)&p[1].fts_cycle != '.') {\u000a        return 1;\u000a      }\u000a      cVar1 = *(char *)((long)&p[1].fts_cycle + 1);\u000a      if (cVar1 != 0) {\u000a        if (cVar1 != '.') {\u000a          return 1;\u000a        }\u000a        if (*(char *)((long)&p[1].fts_cycle + 2) != 0) {\u000a          return 1;\u000a        }\u000a      }\u000a      if (p->fts_level != 0) {\u000a        return 5;\u000a      }\u000a      return 1;\u000a    }\u000a    piVar5 = __errno_location();\u000a    iVar3 = *piVar5;\u000a  }\u000a  else {\u000a    iVar3 = stat(p->fts_accpath,(stat *)__buf);\u000a    if (iVar3 == 0) goto LAB_0040e46d;\u000a    piVar5 = __errno_location();\u000a    iVar3 = *piVar5;\u000a    if (iVar3 == 2) {\u000a      iVar4 = lstat(p->fts_accpath,(stat *)__buf);\u000a      iVar3 = 2;\u000a      if (iVar4 == 0) {\u000a        *piVar5 = 0;\u000a        return 0xd;\u000a      }\u000a    }\u000a  }\u000a  p->fts_errno = iVar3;\u000a  *(undefined4 *)(p->fts_statp[0].__glibc_reserved + 1) = 0;\u000a  *(undefined4 *)((long)p->fts_statp[0].__glibc_reserved + 0xc) = 0;\u000a  *(undefined4 *)(p->fts_statp[0].__glibc_reserved + 2) = 0;\u000a  *(undefined4 *)((long)p->fts_statp[0].__glibc_reserved + 0x14) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_ctim.tv_nsec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_ctim.tv_nsec + 4) = 0;\u000a  *(undefined4 *)p->fts_statp[0].__glibc_reserved = 0;\u000a  *(undefined4 *)((long)p->fts_statp[0].__glibc_reserved + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_mtim.tv_nsec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_mtim.tv_nsec + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_ctim.tv_sec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_ctim.tv_sec + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_atim.tv_nsec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_atim.tv_nsec + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_mtim.tv_sec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_mtim.tv_sec + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_blocks = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_blocks + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_atim.tv_sec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_atim.tv_sec + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_size = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_size + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_blksize = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_blksize + 4) = 0;\u000a  p->fts_statp[0].st_gid = 0;\u000a  p->fts_statp[0].__pad0 = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_rdev = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_rdev + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_nlink = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_nlink + 4) = 0;\u000a  p->fts_statp[0].st_mode = 0;\u000a  p->fts_statp[0].st_uid = 0;\u000a  *(undefined4 *)&__buf->st_dev = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_dev + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_ino = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_ino + 4) = 0;\u000a  return 10;\u000a}\u000a\u000a
p1025
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nLEA RBX,[R14 + 0x78]\nMOV ECX,dword ptr [R15 + 0x48]\nCMP qword ptr [R14 + 0x58],0x0\nSETZ AL\nTEST CL,0x2\nJNZ 0x0040e3fd\nAND ECX,0x1\nAND AL,CL\nOR AL,DL\nXOR AL,0x1\nJZ 0x0040e3fd\nMOV EDI,dword ptr [R15 + 0x2c]\nMOV RSI,qword ptr [R14 + 0x30]\nMOV ECX,0x100\nMOV RDX,RBX\nCALL 0x00411410\nTEST EAX,EAX\nJZ 0x0040e46d\nCALL 0x00402100\nMOV ECX,dword ptr [RAX]\nJMP 0x0040e436\nMOV RDI,qword ptr [R14 + 0x30]\nMOV RSI,RBX\nCALL 0x004113e0\nTEST EAX,EAX\nJZ 0x0040e46d\nCALL 0x00402100\nMOV R15,RAX\nMOV ECX,dword ptr [R15]\nCMP ECX,0x2\nJNZ 0x0040e436\nMOV RDI,qword ptr [R14 + 0x30]\nMOV RSI,RBX\nCALL 0x00411400\nMOV ECX,0x2\nTEST EAX,EAX\nJZ 0x0040e502\nMOV dword ptr [R14 + 0x40],ECX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [0x80 + RBX],XMM0\nMOVUPS xmmword ptr [RBX + 0x70],XMM0\nMOVUPS xmmword ptr [RBX + 0x60],XMM0\nMOVUPS xmmword ptr [RBX + 0x50],XMM0\nMOVUPS xmmword ptr [RBX + 0x40],XMM0\nMOVUPS xmmword ptr [RBX + 0x30],XMM0\nMOVUPS xmmword ptr [RBX + 0x20],XMM0\nMOVUPS xmmword ptr [RBX + 0x10],XMM0\nMOVUPS xmmword ptr [RBX],XMM0\nMOV AX,0xa\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOVZX EAX,word ptr [0x90 + R14]\nAND EAX,0xf000\nCMP EAX,0x8000\nJZ 0x0040e4f0\nMOVZX EAX,AX\nCMP EAX,0xa000\nJZ 0x0040e4e7\nCMP EAX,0x4000\nJNZ 0x0040e4f9\nMOV RAX,qword ptr [0x88 + R14]\nMOV ECX,dword ptr [R15 + 0x48]\nSHR ECX,0x4\nNOT ECX\nAND ECX,0x2\nSUB RAX,RCX\nMOV qword ptr [R14 + 0x68],RAX\nMOV AX,0x1\nCMP byte ptr [0x108 + R14],0x2e\nJNZ 0x0040e467\nMOV CL,byte ptr [0x109 + R14]\nTEST CL,CL\nJZ 0x0040e4d4\nCMP CL,0x2e\nJNZ 0x0040e467\nCMP byte ptr [0x10a + R14],0x0\nJNZ 0x0040e467\nCMP qword ptr [R14 + 0x58],0x0\nMOV CX,0x1\nMOV AX,0x5\nCMOVZ AX,CX\nJMP 0x0040e467\nMOV AX,0xc\nJMP 0x0040e467\nMOV AX,0x8\nJMP 0x0040e467\nMOV AX,0x3\nJMP 0x0040e467\nMOV dword ptr [R15],0x0\nMOV AX,0xd\nJMP 0x0040e467\n'
p1026
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\n49 8d 5e 78\n41 8b 4f 48\n49 83 7e 58 00\n0f 94 c0\nf6 c1 02\n75 2d\n83 e1 01\n20 c8\n08 d0\n34 01\n74 22\n41 8b 7f 2c\n49 8b 76 30\nb9 00 01 00 00\n48 89 da\ne8 20 30 00 00\n85 c0\n74 79\ne8 07 3d ff ff\n8b 08\neb 39\n49 8b 7e 30\n48 89 de\ne8 d7 2f 00 00\n85 c0\n74 60\ne8 ee 3c ff ff\n49 89 c7\n41 8b 0f\n83 f9 02\n75 19\n49 8b 7e 30\n48 89 de\ne8 d7 2f 00 00\nb9 02 00 00 00\n85 c0\n0f 84 cc 00 00 00\n41 89 4e 40\n0f 57 c0\n0f 11 83 80 00 00 00\n0f 11 43 70\n0f 11 43 60\n0f 11 43 50\n0f 11 43 40\n0f 11 43 30\n0f 11 43 20\n0f 11 43 10\n0f 11 03\n66 b8 0a 00\n5b\n41 5e\n41 5f\nc3\n41 0f b7 86 90 00 00 00\n25 00 f0 00 00\n3d 00 80 00 00\n74 6f\n0f b7 c0\n3d 00 a0 00 00\n74 5c\n3d 00 40 00 00\n75 67\n49 8b 86 88 00 00 00\n41 8b 4f 48\nc1 e9 04\nf7 d1\n83 e1 02\n48 29 c8\n49 89 46 68\n66 b8 01 00\n41 80 be 08 01 00 00 2e\n75 ad\n41 8a 8e 09 01 00 00\n84 c9\n74 0f\n80 f9 2e\n75 9d\n41 80 be 0a 01 00 00 00\n75 93\n49 83 7e 58 00\n66 b9 01 00\n66 b8 05 00\n66 0f 44 c1\neb 80\n66 b8 0c 00\ne9 77 ff ff ff\n66 b8 08 00\ne9 6e ff ff ff\n66 b8 03 00\ne9 65 ff ff ff\n41 c7 07 00 00 00 00\n66 b8 0d 00\ne9 55 ff ff ff\n'
p1027
S'.text:000000000040e3b0\n.text:000000000040e3b2\n.text:000000000040e3b4\n.text:000000000040e3b5\n.text:000000000040e3b8\n.text:000000000040e3bb\n.text:000000000040e3bf\n.text:000000000040e3c3\n.text:000000000040e3c8\n.text:000000000040e3cb\n.text:000000000040e3ce\n.text:000000000040e3d0\n.text:000000000040e3d3\n.text:000000000040e3d5\n.text:000000000040e3d7\n.text:000000000040e3d9\n.text:000000000040e3db\n.text:000000000040e3df\n.text:000000000040e3e3\n.text:000000000040e3e8\n.text:000000000040e3eb\n.text:000000000040e3f0\n.text:000000000040e3f2\n.text:000000000040e3f4\n.text:000000000040e3f9\n.text:000000000040e3fb\n.text:000000000040e3fd\n.text:000000000040e401\n.text:000000000040e404\n.text:000000000040e409\n.text:000000000040e40b\n.text:000000000040e40d\n.text:000000000040e412\n.text:000000000040e415\n.text:000000000040e418\n.text:000000000040e41b\n.text:000000000040e41d\n.text:000000000040e421\n.text:000000000040e424\n.text:000000000040e429\n.text:000000000040e42e\n.text:000000000040e430\n.text:000000000040e436\n.text:000000000040e43a\n.text:000000000040e43d\n.text:000000000040e444\n.text:000000000040e448\n.text:000000000040e44c\n.text:000000000040e450\n.text:000000000040e454\n.text:000000000040e458\n.text:000000000040e45c\n.text:000000000040e460\n.text:000000000040e463\n.text:000000000040e467\n.text:000000000040e468\n.text:000000000040e46a\n.text:000000000040e46c\n.text:000000000040e46d\n.text:000000000040e475\n.text:000000000040e47a\n.text:000000000040e47f\n.text:000000000040e481\n.text:000000000040e484\n.text:000000000040e489\n.text:000000000040e48b\n.text:000000000040e490\n.text:000000000040e492\n.text:000000000040e499\n.text:000000000040e49d\n.text:000000000040e4a0\n.text:000000000040e4a2\n.text:000000000040e4a5\n.text:000000000040e4a8\n.text:000000000040e4ac\n.text:000000000040e4b0\n.text:000000000040e4b8\n.text:000000000040e4ba\n.text:000000000040e4c1\n.text:000000000040e4c3\n.text:000000000040e4c5\n.text:000000000040e4c8\n.text:000000000040e4ca\n.text:000000000040e4d2\n.text:000000000040e4d4\n.text:000000000040e4d9\n.text:000000000040e4dd\n.text:000000000040e4e1\n.text:000000000040e4e5\n.text:000000000040e4e7\n.text:000000000040e4eb\n.text:000000000040e4f0\n.text:000000000040e4f4\n.text:000000000040e4f9\n.text:000000000040e4fd\n.text:000000000040e502\n.text:000000000040e509\n.text:000000000040e50d\n'
p1028
tp1029
sS'clear_ungetc_buffer_preserving_position'
p1030
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p1031
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p1032
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x0040de27\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x0040de70\n'
p1033
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 3d 00 00 00\n'
p1034
S'.text:000000000040de20\n.text:000000000040de24\n.text:000000000040de26\n.text:000000000040de27\n.text:000000000040de29\n.text:000000000040de2e\n'
p1035
tp1036
sS'xnmalloc'
p1037
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p1038
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1039
S'MOV RAX,RDI\nMUL RSI\nJO 0x0040d941\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x0040d950\nPUSH RAX\nCALL 0x0040dae0\n'
p1040
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p1041
S'.text:000000000040d930\n.text:000000000040d933\n.text:000000000040d936\n.text:000000000040d938\n.text:000000000040d93c\n.text:000000000040d93f\n.text:000000000040d941\n.text:000000000040d942\n'
p1042
tp1043
sS'quotearg_char'
p1044
(S'\n__stdcall quotearg_char(char * arg)\n'
p1045
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1046
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x0040b9a0\n'
p1047
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p1048
S'.text:000000000040ba10\n.text:000000000040ba12\n.text:000000000040ba19\n.text:000000000040ba1b\n'
p1049
tp1050
sS'malloc'
p1051
(S'\n__stdcall malloc(size_t __size)\n'
p1052
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_00619260)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1053
S'JMP qword ptr [0x00619260]\n'
p1054
S'ff 25 1a 6d 21 00\n'
p1055
S'.plt:0000000000402540\n'
p1056
tp1057
sS'cdb_free'
p1058
(S'\n__stdcall cdb_free(cd_buf * cdb)\n'
p1059
V\u000avoid cdb_free(cd_buf *cdb)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (-1 < (int)*cdb) {\u000a    iVar1 = close((int)*cdb);\u000a    if (iVar1 != 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("! close_fail","lib/chdir-long.c",0x40,"void cdb_free(const struct cd_buf *)");\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p1060
S'PUSH RAX\nMOV EDI,dword ptr [RDI]\nTEST EDI,EDI\nJS 0x00411180\nCALL 0x004023c0\nTEST EAX,EAX\nJNZ 0x00411182\nPOP RAX\nRET\nMOV EDI,0x414400\nMOV ESI,0x41439e\nMOV EDX,0x40\nMOV ECX,0x41440d\nCALL 0x00402350\n'
p1061
S'50\n8b 3f\n85 ff\n78 09\ne8 44 12 ff ff\n85 c0\n75 02\n58\nc3\nbf 00 44 41 00\nbe 9e 43 41 00\nba 40 00 00 00\nb9 0d 44 41 00\ne8 b5 11 ff ff\n'
p1062
S'.text:0000000000411170\n.text:0000000000411171\n.text:0000000000411173\n.text:0000000000411175\n.text:0000000000411177\n.text:000000000041117c\n.text:000000000041117e\n.text:0000000000411180\n.text:0000000000411181\n.text:0000000000411182\n.text:0000000000411187\n.text:000000000041118c\n.text:0000000000411191\n.text:0000000000411196\n'
p1063
tp1064
sS'get_version'
p1065
(S'\n__stdcall get_version(char * context, char * version)\n'
p1066
V\u000abackup_type get_version(char *context,char *version)\u000a\u000a{\u000a  backup_type bVar1;\u000a  ptrdiff_t pVar2;\u000a  \u000a  bVar1 = numbered_existing_backups;\u000a  if ((version != (char *)0x0) && (*version != 0)) {\u000a    pVar2 = __xargmatch_internal(context,version,backup_args,(char *)backup_types,4,argmatch_die);\u000a    bVar1 = backup_types[pVar2];\u000a  }\u000a  return bVar1;\u000a}\u000a\u000a
p1067
S'MOV EAX,0x2\nTEST RSI,RSI\nJZ 0x00408c57\nCMP byte ptr [RSI],0x0\nJZ 0x00408c57\nPUSH RAX\nMOV R9,qword ptr [0x00619418]\nMOV EDX,0x413250\nMOV ECX,0x413230\nMOV R8D,0x4\nCALL 0x004103d0\nMOV EAX,dword ptr [0x413230 + RAX*0x4]\nADD RSP,0x8\nRET\n'
p1068
S'b8 02 00 00 00\n48 85 f6\n74 2d\n80 3e 00\n74 28\n50\n4c 8b 0d e1 07 21 00\nba 50 32 41 00\nb9 30 32 41 00\n41 b8 04 00 00 00\ne8 84 77 00 00\n8b 04 85 30 32 41 00\n48 83 c4 08\nc3\n'
p1069
S'.text:0000000000408c20\n.text:0000000000408c25\n.text:0000000000408c28\n.text:0000000000408c2a\n.text:0000000000408c2d\n.text:0000000000408c2f\n.text:0000000000408c30\n.text:0000000000408c37\n.text:0000000000408c3c\n.text:0000000000408c41\n.text:0000000000408c47\n.text:0000000000408c4c\n.text:0000000000408c53\n.text:0000000000408c57\n'
p1070
tp1071
sS'hash_get_n_buckets'
p1072
(S'\n__stdcall hash_get_n_buckets(Hash_table * table)\n'
p1073
V\u000asize_t hash_get_n_buckets(Hash_table *table)\u000a\u000a{\u000a  return table->n_buckets;\u000a}\u000a\u000a
p1074
S'MOV RAX,qword ptr [RDI + 0x10]\nRET\n'
p1075
S'48 8b 47 10\nc3\n'
p1076
S'.text:00000000004095a0\n.text:00000000004095a4\n'
p1077
tp1078
sS'dup_cloexec'
p1079
(S'\n__stdcall dup_cloexec()\n'
p1080
V\u000aint dup_cloexec(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 in_RDI;\u000a  \u000a  iVar1 = rpl_fcntl(in_RDI,0x406,0);\u000a  return iVar1;\u000a}\u000a\u000a
p1081
S'MOV ESI,0x406\nXOR EDX,EDX\nXOR EAX,EAX\nJMP 0x0040dc30\n'
p1082
S'be 06 04 00 00\n31 d2\n31 c0\ne9 e2 d4 ff ff\n'
p1083
S'.text:0000000000410740\n.text:0000000000410745\n.text:0000000000410747\n.text:0000000000410749\n'
p1084
tp1085
sS'is_probably_sparse'
p1086
(S'\n__stdcall is_probably_sparse(stat * sb)\n'
p1087
V\u000a_Bool is_probably_sparse(stat *sb)\u000a\u000a{\u000a  if ((sb->st_mode & 0xf000) == 0x8000) {\u000a    return (_Bool)(sb->st_blocks < (long)(((ulong)(sb->st_size >> 0x3f) >> 0x37) + sb->st_size) >> 9\u000a                  );\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1088
S'MOV EAX,0xf000\nAND EAX,dword ptr [RDI + 0x18]\nCMP EAX,0x8000\nJNZ 0x004077bd\nMOV RAX,qword ptr [RDI + 0x30]\nMOV RCX,RAX\nSAR RCX,0x3f\nSHR RCX,0x37\nADD RCX,RAX\nSAR RCX,0x9\nCMP qword ptr [RDI + 0x40],RCX\nSETL AL\nRET\nXOR EAX,EAX\nRET\n'
p1089
S'b8 00 f0 00 00\n23 47 18\n3d 00 80 00 00\n75 1e\n48 8b 47 30\n48 89 c1\n48 c1 f9 3f\n48 c1 e9 37\n48 01 c1\n48 c1 f9 09\n48 39 4f 40\n0f 9c c0\nc3\n31 c0\nc3\n'
p1090
S'.text:0000000000407790\n.text:0000000000407795\n.text:0000000000407798\n.text:000000000040779d\n.text:000000000040779f\n.text:00000000004077a3\n.text:00000000004077a6\n.text:00000000004077aa\n.text:00000000004077ae\n.text:00000000004077b1\n.text:00000000004077b5\n.text:00000000004077b9\n.text:00000000004077bc\n.text:00000000004077bd\n.text:00000000004077bf\n'
p1091
tp1092
sS'set_acl'
p1093
(S'\n__stdcall set_acl(char * name)\n'
p1094
V\u000aint set_acl(char *name)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  \u000a  iVar2 = qset_acl(name);\u000a  if (iVar2 != 0) {\u000a    puVar3 = (uint *)__errno_location();\u000a    uVar1 = *puVar3;\u000a    uVar4 = dcgettext(0,"setting permissions for %s",5);\u000a    pcVar5 = quote(name);\u000a    error(0,(ulong)uVar1,uVar4,pcVar5);\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1095
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x0040a720\nMOV EBX,EAX\nTEST EBX,EBX\nJZ 0x0040871b\nCALL 0x00402100\nMOV R15D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x412c1d\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBP,RAX\nMOV RDI,R14\nCALL 0x0040bb80\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,RBP\nCALL 0x00402640\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1096
S'55\n41 57\n41 56\n53\n50\n49 89 fe\ne8 41 20 00 00\n89 c3\n85 db\n74 36\ne8 16 9a ff ff\n44 8b 38\n31 ff\nbe 1d 2c 41 00\nba 05 00 00 00\ne8 72 9b ff ff\n48 89 c5\n4c 89 f7\ne8 77 34 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 fe\n48 89 ea\ne8 25 9f ff ff\n89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1097
S'.text:00000000004086d0\n.text:00000000004086d1\n.text:00000000004086d3\n.text:00000000004086d5\n.text:00000000004086d6\n.text:00000000004086d7\n.text:00000000004086da\n.text:00000000004086df\n.text:00000000004086e1\n.text:00000000004086e3\n.text:00000000004086e5\n.text:00000000004086ea\n.text:00000000004086ed\n.text:00000000004086ef\n.text:00000000004086f4\n.text:00000000004086f9\n.text:00000000004086fe\n.text:0000000000408701\n.text:0000000000408704\n.text:0000000000408709\n.text:000000000040870c\n.text:000000000040870e\n.text:0000000000408710\n.text:0000000000408713\n.text:0000000000408716\n.text:000000000040871b\n.text:000000000040871d\n.text:0000000000408721\n.text:0000000000408722\n.text:0000000000408724\n.text:0000000000408726\n.text:0000000000408727\n'
p1098
tp1099
sS'memchr'
p1100
(S'\n__stdcall memchr(void * __s, int __c, size_t __n)\n'
p1101
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memchr(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memchr_006191c0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1102
S'JMP qword ptr [0x006191c0]\n'
p1103
S'ff 25 ba 6d 21 00\n'
p1104
S'.plt:0000000000402400\n'
p1105
tp1106
sS'quotearg_style_mem'
p1107
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p1108
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1109
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x0040b920\n'
p1110
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p1111
S'.text:000000000040b980\n.text:000000000040b983\n.text:000000000040b986\n.text:000000000040b988\n.text:000000000040b98a\n.text:000000000040b98c\n.text:000000000040b98f\n.text:000000000040b992\n'
p1112
tp1113
sS'xalloc_die'
p1114
(S'\n__stdcall xalloc_die()\n'
p1115
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x412b8a,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1116
S'PUSH RBX\nMOV EBX,dword ptr [0x006193b8]\nXOR EDI,EDI\nMOV ESI,0x413d6f\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x412b8a\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00402640\nCALL 0x004020f0\n'
p1117
S'53\n8b 1d d1 b8 20 00\n31 ff\nbe 6f 3d 41 00\nba 05 00 00 00\ne8 78 47 ff ff\n48 89 c1\n31 f6\nba 8a 2b 41 00\n31 c0\n89 df\ne8 35 4b ff ff\ne8 e0 45 ff ff\n'
p1118
S'.text:000000000040dae0\n.text:000000000040dae1\n.text:000000000040dae7\n.text:000000000040dae9\n.text:000000000040daee\n.text:000000000040daf3\n.text:000000000040daf8\n.text:000000000040dafb\n.text:000000000040dafd\n.text:000000000040db02\n.text:000000000040db04\n.text:000000000040db06\n.text:000000000040db0b\n'
p1119
tp1120
sS'fts_set_stat_required'
p1121
(S'\n__stdcall fts_set_stat_required(FTSENT * p)\n'
p1122
V\u000avoid fts_set_stat_required(FTSENT *p)\u000a\u000a{\u000a  byte in_SIL;\u000a  \u000a  if (p->fts_info == 0xb) {\u000a    p->fts_statp[0].st_size = (ulong)in_SIL + 1;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1123
S'MOVZX EAX,word ptr [RDI + 0x70]\nCMP EAX,0xb\nJNZ 0x0040e3a8\nMOVZX EAX,SIL\nINC RAX\nMOV qword ptr [0xa8 + RDI],RAX\nRET\nPUSH RAX\nCALL 0x004020f0\n'
p1124
S'0f b7 47 70\n83 f8 0b\n75 0f\n40 0f b6 c6\n48 ff c0\n48 89 87 a8 00 00 00\nc3\n50\ne8 42 3d ff ff\n'
p1125
S'.text:000000000040e390\n.text:000000000040e394\n.text:000000000040e397\n.text:000000000040e399\n.text:000000000040e39d\n.text:000000000040e3a0\n.text:000000000040e3a7\n.text:000000000040e3a8\n.text:000000000040e3a9\n'
p1126
tp1127
sS'open_safer'
p1128
(S'\n__stdcall open_safer(char * file)\n'
p1129
V\u000a/* WARNING: Removing unreachable block (ram,0x0040919e) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff58 : 0x004091ac */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint open_safer(char *file,...)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  uint __oflag;\u000a  va_list ap;\u000a  uint local_a8;\u000a  \u000a  uVar2 = 0;\u000a  if ((__oflag & 0x40) != 0) {\u000a    uVar2 = (ulong)local_a8;\u000a  }\u000a  open(file,__oflag,uVar2);\u000a  iVar1 = fd_safer();\u000a  return iVar1;\u000a}\u000a\u000a
p1130
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00409142\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nXOR EDX,EDX\nTEST SIL,0x40\nJZ 0x004091ae\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RCX,dword ptr [RSP]\nCMP RCX,0x28\nJA 0x0040919e\nMOV RAX,RCX\nADD RAX,qword ptr [RSP + 0x10]\nLEA ECX,[RCX + 0x8]\nMOV dword ptr [RSP],ECX\nJMP 0x004091ac\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RCX,[RAX + 0x8]\nMOV qword ptr [RSP + 0x8],RCX\nMOV EDX,dword ptr [RAX]\nXOR EAX,EAX\nCALL 0x00402660\nMOV EDI,EAX\nCALL 0x0040c720\nADD RSP,0xd8\nRET\n'
p1131
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n31 d2\n40 f6 c6 40\n74 50\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 0c 24\n48 83 f9 28\n77 10\n48 89 c8\n48 03 44 24 10\n8d 49 08\n89 0c 24\neb 0e\n48 8b 44 24 08\n48 8d 48 08\n48 89 4c 24 08\n8b 10\n31 c0\ne8 ab 94 ff ff\n89 c7\ne8 64 35 00 00\n48 81 c4 d8 00 00 00\nc3\n'
p1132
S'.text:0000000000409100\n.text:0000000000409107\n.text:0000000000409109\n.text:000000000040910b\n.text:0000000000409110\n.text:0000000000409115\n.text:000000000040911a\n.text:0000000000409122\n.text:000000000040912a\n.text:0000000000409132\n.text:000000000040913a\n.text:0000000000409142\n.text:0000000000409147\n.text:000000000040914c\n.text:0000000000409151\n.text:0000000000409156\n.text:0000000000409158\n.text:000000000040915c\n.text:000000000040915e\n.text:0000000000409163\n.text:0000000000409168\n.text:0000000000409170\n.text:0000000000409175\n.text:000000000040917d\n.text:0000000000409184\n.text:0000000000409188\n.text:000000000040918c\n.text:000000000040918e\n.text:0000000000409191\n.text:0000000000409196\n.text:0000000000409199\n.text:000000000040919c\n.text:000000000040919e\n.text:00000000004091a3\n.text:00000000004091a7\n.text:00000000004091ac\n.text:00000000004091ae\n.text:00000000004091b0\n.text:00000000004091b5\n.text:00000000004091b7\n.text:00000000004091bc\n.text:00000000004091c3\n'
p1133
tp1134
sS'quotearg_n_custom'
p1135
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p1136
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1137
S'MOV R8,-0x1\nJMP 0x0040baa0\n'
p1138
S'49 c7 c0 ff ff ff ff\neb 07\n'
p1139
S'.text:000000000040ba90\n.text:000000000040ba97\n'
p1140
tp1141
sS'fts_sort'
p1142
(S'\n__stdcall fts_sort(FTS * sp, FTSENT * head, size_t nitems)\n'
p1143
V\u000aFTSENT * fts_sort(FTS *sp,FTSENT *head,size_t nitems)\u000a\u000a{\u000a  ulong uVar1;\u000a  int (*__compar)(_ftsent **,_ftsent **);\u000a  _ftsent **pp_Var2;\u000a  FTSENT *pFVar3;\u000a  _ftsent *p_Var4;\u000a  long lVar5;\u000a  _ftsent *p_Var6;\u000a  \u000a  __compar = sp->fts_compar;\u000a  if (sp->fts_nitems < nitems) {\u000a    uVar1 = nitems + 0x28;\u000a    sp->fts_nitems = uVar1;\u000a    if (uVar1 >> 0x3d == 0) {\u000a      pp_Var2 = (_ftsent **)realloc(sp->fts_array,uVar1 * 8);\u000a      if (pp_Var2 != (_ftsent **)0x0) {\u000a        sp->fts_array = pp_Var2;\u000a        goto LAB_0040e566;\u000a      }\u000a    }\u000a    free(sp->fts_array);\u000a    sp->fts_array = (_ftsent **)0x0;\u000a    sp->fts_nitems = 0;\u000a  }\u000a  else {\u000aLAB_0040e566:\u000a    if (head != (FTSENT *)0x0) {\u000a      pFVar3 = (FTSENT *)sp->fts_array;\u000a      do {\u000a        *(FTSENT **)pFVar3 = head;\u000a        pFVar3 = (FTSENT *)((FTSENT **)pFVar3 + 1);\u000a        head = (FTSENT *)head->fts_link;\u000a      } while (head != (FTSENT *)0x0);\u000a    }\u000a    qsort(sp->fts_array,nitems,8,(__compar_fn_t)__compar);\u000a    p_Var4 = (_ftsent *)sp->fts_array;\u000a    head = (FTSENT *)p_Var4->fts_cycle;\u000a    p_Var6 = (_ftsent *)head;\u000a    if (nitems != 1) {\u000a      lVar5 = 1 - nitems;\u000a      p_Var6 = (_ftsent *)head;\u000a      do {\u000a        p_Var4 = (_ftsent *)((_ftsent **)p_Var4 + 1);\u000a        ((FTSENT *)p_Var6)->fts_link = *(_ftsent **)p_Var4;\u000a        p_Var6 = *(_ftsent **)p_Var4;\u000a        lVar5 = lVar5 + 1;\u000a      } while (lVar5 != 0);\u000a    }\u000a    p_Var6->fts_link = (_ftsent *)0x0;\u000a  }\u000a  return head;\u000a}\u000a\u000a
p1144
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV RBX,RSI\nMOV R15,RDI\nMOV R12,qword ptr [R15 + 0x40]\nCMP qword ptr [R15 + 0x38],R14\nJNC 0x0040e566\nLEA RSI,[R14 + 0x28]\nMOV qword ptr [R15 + 0x38],RSI\nMOV RAX,RSI\nSHR RAX,0x3d\nJNZ 0x0040e5dd\nMOV RDI,qword ptr [R15 + 0x10]\nSHL RSI,0x3\nCALL 0x004025c0\nTEST RAX,RAX\nJZ 0x0040e5dd\nMOV qword ptr [R15 + 0x10],RAX\nTEST RBX,RBX\nJZ 0x0040e580\nMOV RAX,qword ptr [R15 + 0x10]\nNOP\nMOV qword ptr [RAX],RBX\nADD RAX,0x8\nMOV RBX,qword ptr [RBX + 0x10]\nTEST RBX,RBX\nJNZ 0x0040e570\nMOV RDI,qword ptr [R15 + 0x10]\nMOV EDX,0x8\nMOV RSI,R14\nMOV RCX,R12\nCALL 0x00402190\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RBX,qword ptr [RAX]\nCMP R14,0x1\nMOV RDX,RBX\nJZ 0x0040e5d3\nMOV ECX,0x1\nSUB RCX,R14\nADD RAX,0x8\nMOV RDX,RBX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RSI,qword ptr [RAX]\nMOV qword ptr [RDX + 0x10],RSI\nMOV RDX,qword ptr [RAX]\nADD RAX,0x8\nINC RCX\nJNZ 0x0040e5c0\nMOV qword ptr [RDX + 0x10],0x0\nJMP 0x0040e5f6\nMOV RDI,qword ptr [R15 + 0x10]\nCALL 0x004020c0\nMOV qword ptr [R15 + 0x10],0x0\nMOV qword ptr [R15 + 0x38],0x0\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p1145
S'41 57\n41 56\n41 54\n53\n50\n49 89 d6\n48 89 f3\n49 89 ff\n4d 8b 67 40\n4d 39 77 38\n73 2b\n49 8d 76 28\n49 89 77 38\n48 89 f0\n48 c1 e8 3d\n0f 85 8d 00 00 00\n49 8b 7f 10\n48 c1 e6 03\ne8 63 40 ff ff\n48 85 c0\n74 7b\n49 89 47 10\n48 85 db\n74 15\n49 8b 47 10\n90\n48 89 18\n48 83 c0 08\n48 8b 5b 10\n48 85 db\n75 f0\n49 8b 7f 10\nba 08 00 00 00\n4c 89 f6\n4c 89 e1\ne8 fc 3b ff ff\n49 8b 47 10\n48 8b 18\n49 83 fe 01\n48 89 da\n74 2f\nb9 01 00 00 00\n4c 29 f1\n48 83 c0 08\n48 89 da\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 30\n48 89 72 10\n48 8b 10\n48 83 c0 08\n48 ff c1\n75 ed\n48 c7 42 10 00 00 00 00\neb 19\n49 8b 7f 10\ne8 da 3a ff ff\n49 c7 47 10 00 00 00 00\n49 c7 47 38 00 00 00 00\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p1146
S'.text:000000000040e520\n.text:000000000040e522\n.text:000000000040e524\n.text:000000000040e526\n.text:000000000040e527\n.text:000000000040e528\n.text:000000000040e52b\n.text:000000000040e52e\n.text:000000000040e531\n.text:000000000040e535\n.text:000000000040e539\n.text:000000000040e53b\n.text:000000000040e53f\n.text:000000000040e543\n.text:000000000040e546\n.text:000000000040e54a\n.text:000000000040e550\n.text:000000000040e554\n.text:000000000040e558\n.text:000000000040e55d\n.text:000000000040e560\n.text:000000000040e562\n.text:000000000040e566\n.text:000000000040e569\n.text:000000000040e56b\n.text:000000000040e56f\n.text:000000000040e570\n.text:000000000040e573\n.text:000000000040e577\n.text:000000000040e57b\n.text:000000000040e57e\n.text:000000000040e580\n.text:000000000040e584\n.text:000000000040e589\n.text:000000000040e58c\n.text:000000000040e58f\n.text:000000000040e594\n.text:000000000040e598\n.text:000000000040e59b\n.text:000000000040e59f\n.text:000000000040e5a2\n.text:000000000040e5a4\n.text:000000000040e5a9\n.text:000000000040e5ac\n.text:000000000040e5b0\n.text:000000000040e5b3\n.text:000000000040e5c0\n.text:000000000040e5c3\n.text:000000000040e5c7\n.text:000000000040e5ca\n.text:000000000040e5ce\n.text:000000000040e5d1\n.text:000000000040e5d3\n.text:000000000040e5db\n.text:000000000040e5dd\n.text:000000000040e5e1\n.text:000000000040e5e6\n.text:000000000040e5ee\n.text:000000000040e5f6\n.text:000000000040e5f9\n.text:000000000040e5fd\n.text:000000000040e5fe\n.text:000000000040e600\n.text:000000000040e602\n.text:000000000040e604\n'
p1147
tp1148
sS'fd_safer'
p1149
(S'\n__stdcall fd_safer()\n'
p1150
V\u000aint fd_safer(void)\u000a\u000a{\u000a  int iVar1;\u000a  uint uVar2;\u000a  int *piVar3;\u000a  uint __fd;\u000a  \u000a  if (__fd < 3) {\u000a    uVar2 = dup_safer();\u000a    piVar3 = __errno_location();\u000a    iVar1 = *piVar3;\u000a    close(__fd);\u000a    *piVar3 = iVar1;\u000a    __fd = uVar2;\u000a  }\u000a  return (int)__fd;\u000a}\u000a\u000a
p1151
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDI\nCMP EBX,0x2\nJA 0x0040c754\nMOV EDI,EBX\nCALL 0x0040c710\nMOV R14D,EAX\nCALL 0x00402100\nMOV RBP,RAX\nMOV R15D,dword ptr [RBP]\nMOV EDI,EBX\nCALL 0x004023c0\nMOV dword ptr [RBP],R15D\nMOV EAX,R14D\nJMP 0x0040c756\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1152
S'55\n41 57\n41 56\n53\n50\n89 fb\n83 fb 02\n77 26\n89 df\ne8 db ff ff ff\n41 89 c6\ne8 c3 59 ff ff\n48 89 c5\n44 8b 7d 00\n89 df\ne8 75 5c ff ff\n44 89 7d 00\n44 89 f0\neb 02\n89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1153
S'.text:000000000040c720\n.text:000000000040c721\n.text:000000000040c723\n.text:000000000040c725\n.text:000000000040c726\n.text:000000000040c727\n.text:000000000040c729\n.text:000000000040c72c\n.text:000000000040c72e\n.text:000000000040c730\n.text:000000000040c735\n.text:000000000040c738\n.text:000000000040c73d\n.text:000000000040c740\n.text:000000000040c744\n.text:000000000040c746\n.text:000000000040c74b\n.text:000000000040c74f\n.text:000000000040c752\n.text:000000000040c754\n.text:000000000040c756\n.text:000000000040c75a\n.text:000000000040c75b\n.text:000000000040c75d\n.text:000000000040c75f\n.text:000000000040c760\n'
p1154
tp1155
sS'fts_read'
p1156
(S'\n__stdcall fts_read(FTS * sp)\n'
p1157
V\u000aFTSENT * fts_read(FTS *sp)\u000a\u000a{\u000a  byte *pbVar1;\u000a  uint uVar2;\u000a  _ftsent *p_Var3;\u000a  char *pcVar4;\u000a  size_t sVar5;\u000a  long lVar6;\u000a  _Bool _Var7;\u000a  unsigned_short uVar8;\u000a  int iVar9;\u000a  FTSENT *ent;\u000a  FTSENT *head;\u000a  int *piVar10;\u000a  size_t sVar11;\u000a  \u000a  ent = (FTSENT *)sp->fts_cur;\u000a  if (ent == (FTSENT *)0x0) {\u000a    return (FTSENT *)0x0;\u000a  }\u000a  if ((*(byte *)((long)&sp->fts_options + 1) & 0x40) != 0) {\u000a    return (FTSENT *)0x0;\u000a  }\u000a  uVar8 = ent->fts_instr;\u000a  ent->fts_instr = 3;\u000a  if (uVar8 == 1) {\u000a    uVar8 = fts_stat(sp,ent);\u000a    ent->fts_info = uVar8;\u000a    return ent;\u000a  }\u000a  if ((uVar8 == 2) && ((ent->fts_info & 0xfffe) == 0xc)) {\u000a    uVar8 = fts_stat(sp,ent);\u000a    ent->fts_info = uVar8;\u000a    if ((uVar8 == 1) && ((*(byte *)&sp->fts_options & 4) == 0)) {\u000a      iVar9 = diropen(sp,".");\u000a      ent->fts_symfd = iVar9;\u000a      if (iVar9 < 0) {\u000a        piVar10 = __errno_location();\u000a        ent->fts_errno = *piVar10;\u000a        ent->fts_info = 7;\u000a      }\u000a      else {\u000a        *(byte *)&ent->fts_flags = *(byte *)&ent->fts_flags | 2;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    head = ent;\u000a    if (ent->fts_info == 1) {\u000a      if ((uVar8 == 4) ||\u000a         ((uVar2 = sp->fts_options, (uVar2 & 0x40) != 0 && (ent->fts_statp[0].st_dev != sp->fts_dev)\u000a          ))) {\u000a        if ((*(byte *)&ent->fts_flags & 2) != 0) {\u000a          close(ent->fts_symfd);\u000a        }\u000a        if ((FTSENT *)sp->fts_child != (FTSENT *)0x0) {\u000a          fts_lfree((FTSENT *)sp->fts_child);\u000a          sp->fts_child = (_ftsent *)0x0;\u000a        }\u000a        ent->fts_info = 6;\u000a        goto LAB_0040ea78;\u000a      }\u000a      head = (FTSENT *)sp->fts_child;\u000a      if (((uVar2 & 0x2000) == 0) || (head == (FTSENT *)0x0)) {\u000a        if (head == (FTSENT *)0x0) goto LAB_0040eb50;\u000a        iVar9 = fts_safe_changedir(sp,ent,(char *)0xffffffff);\u000a        if (iVar9 != 0) {\u000a          piVar10 = __errno_location();\u000a          ent->fts_errno = *piVar10;\u000a          *(byte *)&ent->fts_flags = *(byte *)&ent->fts_flags | 1;\u000a          p_Var3 = sp->fts_child;\u000a          while (p_Var3 != (_ftsent *)0x0) {\u000a            p_Var3->fts_accpath = p_Var3->fts_parent->fts_accpath;\u000a            p_Var3 = p_Var3->fts_link;\u000a          }\u000a        }\u000a      }\u000a      else {\u000a        sp->fts_options = uVar2 & 0xffffdfff;\u000a        fts_lfree(head);\u000a        sp->fts_child = (_ftsent *)0x0;\u000aLAB_0040eb50:\u000a        head = fts_build(sp);\u000a        *(FTSENT **)&sp->fts_child = head;\u000a        if (head == (FTSENT *)0x0) {\u000a          if ((*(byte *)((long)&sp->fts_options + 1) & 0x40) != 0) {\u000a            return (FTSENT *)0x0;\u000a          }\u000a          if ((ent->fts_errno != 0) && (ent->fts_info != 4)) {\u000a            ent->fts_info = 7;\u000a          }\u000aLAB_0040ea78:\u000a          leave_dir(sp,ent);\u000a          return ent;\u000a        }\u000a      }\u000a      ent = (FTSENT *)sp->fts_child;\u000a      sp->fts_child = (_ftsent *)0x0;\u000a    }\u000a    else {\u000a      do {\u000a        ent = (FTSENT *)head->fts_link;\u000a        if (ent == (FTSENT *)0x0) {\u000a          p_Var3 = head->fts_parent;\u000a          if (p_Var3->fts_dirp != (DIR *)0x0) {\u000a            sp->fts_cur = p_Var3;\u000a            sp->fts_path[p_Var3->fts_pathlen] = 0;\u000a            ent = fts_build(sp);\u000a            if (ent != (FTSENT *)0x0) {\u000a              free(head);\u000a              goto LAB_0040ecd4;\u000a            }\u000a            if ((*(byte *)((long)&sp->fts_options + 1) & 0x40) != 0) {\u000a              return (FTSENT *)0x0;\u000a            }\u000a          }\u000a          ent = (FTSENT *)head->fts_parent;\u000a          *(FTSENT **)&sp->fts_cur = ent;\u000a          free(head);\u000a          if (ent->fts_level == -1) {\u000a            free(ent);\u000a            piVar10 = __errno_location();\u000a            *piVar10 = 0;\u000a            sp->fts_cur = (_ftsent *)0x0;\u000a            return (FTSENT *)0x0;\u000a          }\u000a          if (ent->fts_info != 0xb) {\u000a            sp->fts_path[ent->fts_pathlen] = 0;\u000a            if (ent->fts_level == 0) {\u000a              iVar9 = restore_initial_cwd(sp);\u000a            }\u000a            else {\u000a              if ((ent->fts_flags & 2) != 0) {\u000a                if ((sp->fts_options & 4U) == 0) {\u000a                  if ((sp->fts_options & 0x200U) == 0) {\u000a                    iVar9 = fchdir(ent->fts_symfd);\u000a                    if (iVar9 != 0) {\u000a                      piVar10 = __errno_location();\u000a                      ent->fts_errno = *piVar10;\u000a                      pbVar1 = (byte *)((long)&sp->fts_options + 1);\u000a                      *pbVar1 = *pbVar1 | 0x40;\u000a                    }\u000a                  }\u000a                  else {\u000a                    cwd_advance_fd(sp);\u000a                  }\u000a                }\u000a                close(ent->fts_symfd);\u000a                goto LAB_0040ee07;\u000a              }\u000a              if ((ent->fts_flags & 1) != 0) goto LAB_0040ee07;\u000a              iVar9 = fts_safe_changedir(sp,(FTSENT *)ent->fts_parent,(char *)0xffffffff);\u000a            }\u000a            if (iVar9 != 0) {\u000a              piVar10 = __errno_location();\u000a              ent->fts_errno = *piVar10;\u000a              pbVar1 = (byte *)((long)&sp->fts_options + 1);\u000a              *pbVar1 = *pbVar1 | 0x40;\u000a            }\u000aLAB_0040ee07:\u000a            if ((ent->fts_info != 2) &&\u000a               (ent->fts_info = (ushort)(ent->fts_errno != 0) | 6, ent->fts_errno == 0)) {\u000a              leave_dir(sp,ent);\u000a            }\u000a            if ((*(byte *)((long)&sp->fts_options + 1) & 0x40) != 0) {\u000a              return (FTSENT *)0x0;\u000a            }\u000a            return ent;\u000a          }\u000a          goto LAB_0040ee45;\u000a        }\u000a        *(FTSENT **)&sp->fts_cur = ent;\u000a        free(head);\u000a        if (ent->fts_level == 0) {\u000a          iVar9 = restore_initial_cwd(sp);\u000a          if (iVar9 != 0) {\u000a            pbVar1 = (byte *)((long)&sp->fts_options + 1);\u000a            *pbVar1 = *pbVar1 | 0x40;\u000a            return (FTSENT *)0x0;\u000a          }\u000a          free_dir(sp);\u000a          fts_load(sp,ent);\u000a          setup_dir(sp);\u000a          goto LAB_0040ed10;\u000a        }\u000a        head = ent;\u000a      } while (ent->fts_instr == 4);\u000a      if (ent->fts_instr == 2) {\u000a        uVar8 = fts_stat(sp,ent);\u000a        ent->fts_info = uVar8;\u000a        if ((uVar8 == 1) && ((*(byte *)&sp->fts_options & 4) == 0)) {\u000a          iVar9 = diropen(sp,".");\u000a          ent->fts_symfd = iVar9;\u000a          if (iVar9 < 0) {\u000a            piVar10 = __errno_location();\u000a            ent->fts_errno = *piVar10;\u000a            ent->fts_info = 7;\u000a          }\u000a          else {\u000a            *(byte *)&ent->fts_flags = *(byte *)&ent->fts_flags | 2;\u000a          }\u000a        }\u000a        ent->fts_instr = 3;\u000a      }\u000a    }\u000aLAB_0040ecd4:\u000a    pcVar4 = sp->fts_path;\u000a    sVar5 = ent->fts_parent->fts_pathlen;\u000a    sVar11 = sVar5 - 1;\u000a    if (ent->fts_parent->fts_path[sVar5 - 1] != '/') {\u000a      sVar11 = sVar5;\u000a    }\u000a    pcVar4[sVar11] = '/';\u000a    memmove(pcVar4 + sVar11 + 1,ent + 1,ent->fts_namelen + 1);\u000a  }\u000aLAB_0040ed10:\u000a  *(FTSENT **)&sp->fts_cur = ent;\u000a  uVar8 = ent->fts_info;\u000a  if (uVar8 == 0xb) {\u000a    lVar6 = ent->fts_statp[0].st_size;\u000a    if (lVar6 != 1) {\u000a      if (lVar6 != 2) {\u000aLAB_0040ee45:\u000a                    /* WARNING: Subroutine does not return */\u000a        abort();\u000a      }\u000a      head = (FTSENT *)ent->fts_parent;\u000a      if ((((ent->fts_level < 1) || (head->fts_n_dirs_remaining != 0)) ||\u000a          ((sp->fts_options & 0x18U) != 0x18)) ||\u000a         (_Var7 = link_count_optimize_ok(head), _Var7 == false)) {\u000a        uVar8 = fts_stat(sp,ent);\u000a        ent->fts_info = uVar8;\u000a        if ((ent->fts_statp[0].st_mode & 0xf000) != 0x4000) goto LAB_0040edac;\u000a        if ((ent->fts_level != 0) && (head->fts_n_dirs_remaining != 0)) {\u000a          head->fts_n_dirs_remaining = head->fts_n_dirs_remaining - 1;\u000a        }\u000a      }\u000a    }\u000a    uVar8 = ent->fts_info;\u000a  }\u000aLAB_0040edac:\u000a  if (uVar8 != 1) {\u000a    return ent;\u000a  }\u000a  if (ent->fts_level == 0) {\u000a    sp->fts_dev = ent->fts_statp[0].st_dev;\u000a  }\u000a  _Var7 = enter_dir(sp,ent);\u000a  if (_Var7 == false) {\u000a    piVar10 = __errno_location();\u000a    *piVar10 = 0xc;\u000a    return (FTSENT *)0x0;\u000a  }\u000a  return ent;\u000a}\u000a\u000a
p1158
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV R12,qword ptr [R14]\nTEST R12,R12\nJZ 0x0040eddf\nTEST byte ptr [R14 + 0x49],0x40\nJNZ 0x0040eddf\nMOVZX EAX,word ptr [R12 + 0x74]\nMOV word ptr [R12 + 0x74],0x3\nCMP EAX,0x1\nJNZ 0x0040e8ed\nXOR EDX,EDX\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x0040e3b0\nMOV word ptr [R12 + 0x70],AX\nJMP 0x0040ede2\nMOVZX ECX,word ptr [R12 + 0x70]\nMOVZX EAX,AX\nCMP EAX,0x2\nJNZ 0x0040e95d\nMOV EDX,ECX\nAND EDX,0xfffe\nMOVZX EDX,DX\nCMP EDX,0xc\nJNZ 0x0040e95d\nMOV EDX,0x1\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x0040e3b0\nMOV word ptr [R12 + 0x70],AX\nMOVZX EAX,AX\nCMP EAX,0x1\nJNZ 0x0040ed10\nTEST byte ptr [R14 + 0x48],0x4\nJNZ 0x0040ed10\nMOV ESI,0x4124e0\nMOV RDI,R14\nCALL 0x0040e680\nMOV dword ptr [R12 + 0x44],EAX\nTEST EAX,EAX\nJS 0x0040eae7\nOR byte ptr [R12 + 0x72],0x2\nJMP 0x0040ed10\nMOVZX ECX,CX\nCMP ECX,0x1\nJNZ 0x0040e9c0\nCMP EAX,0x4\nJZ 0x0040ea48\nMOV EAX,dword ptr [R14 + 0x48]\nTEST AL,0x40\nJZ 0x0040e985\nMOV RCX,qword ptr [R12 + 0x78]\nCMP RCX,qword ptr [R14 + 0x18]\nJNZ 0x0040ea48\nMOV RDI,qword ptr [R14 + 0x8]\nTEST AH,0x20\nJZ 0x0040eb00\nTEST RDI,RDI\nJZ 0x0040eb00\nAND EAX,0xffffdfff\nMOV dword ptr [R14 + 0x48],EAX\nCALL 0x0040e6e0\nMOV qword ptr [R14 + 0x8],0x0\nJMP 0x0040eb50\nMOV RBX,qword ptr [R12 + 0x10]\nTEST RBX,RBX\nJZ 0x0040ea88\nMOV qword ptr [R14],RBX\nMOV RDI,R12\nCALL 0x004020c0\nCMP qword ptr [RBX + 0x58],0x0\nJZ 0x0040eacd\nMOVZX EAX,word ptr [RBX + 0x74]\nCMP EAX,0x4\nMOV R12,RBX\nJZ 0x0040e9c0\nMOVZX EAX,AX\nCMP EAX,0x2\nJNZ 0x0040ecd4\nMOV EDX,0x1\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x0040e3b0\nMOV word ptr [RBX + 0x70],AX\nMOVZX EAX,AX\nCMP EAX,0x1\nJNZ 0x0040ecce\nTEST byte ptr [R14 + 0x48],0x4\nJNZ 0x0040ecce\nMOV ESI,0x4124e0\nMOV RDI,R14\nCALL 0x0040e680\nMOV dword ptr [RBX + 0x44],EAX\nTEST EAX,EAX\nJS 0x0040ecbe\nOR byte ptr [RBX + 0x72],0x2\nJMP 0x0040ecce\nTEST byte ptr [R12 + 0x72],0x2\nJZ 0x0040ea5a\nMOV EDI,dword ptr [R12 + 0x44]\nCALL 0x004023c0\nMOV RDI,qword ptr [R14 + 0x8]\nTEST RDI,RDI\nJZ 0x0040ea70\nCALL 0x0040e6e0\nMOV qword ptr [R14 + 0x8],0x0\nMOV word ptr [R12 + 0x70],0x6\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x0040ee50\nJMP 0x0040ede2\nMOV RAX,qword ptr [R12 + 0x8]\nCMP qword ptr [RAX + 0x18],0x0\nJZ 0x0040ebd5\nMOV qword ptr [R14],RAX\nMOV RCX,qword ptr [R14 + 0x20]\nMOV RAX,qword ptr [RAX + 0x48]\nMOV byte ptr [RCX + RAX*0x1],0x0\nMOV ESI,0x3\nMOV RDI,R14\nCALL 0x0040f070\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040ebca\nMOV RDI,R12\nCALL 0x004020c0\nJMP 0x0040ecd4\nMOV RDI,R14\nCALL 0x0040f760\nTEST EAX,EAX\nJZ 0x0040eb77\nOR byte ptr [R14 + 0x49],0x40\nJMP 0x0040eddf\nCALL 0x00402100\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [R12 + 0x40],EAX\nMOV word ptr [R12 + 0x70],0x7\nJMP 0x0040ed10\nTEST RDI,RDI\nJZ 0x0040eb50\nMOV RCX,qword ptr [R12 + 0x30]\nMOV EDX,0xffffffff\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x0040eee0\nTEST EAX,EAX\nJZ 0x0040eb66\nCALL 0x00402100\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [R12 + 0x40],EAX\nOR byte ptr [R12 + 0x72],0x1\nMOV RAX,qword ptr [R14 + 0x8]\nTEST RAX,RAX\nJZ 0x0040eb66\nMOV RCX,qword ptr [RAX + 0x8]\nMOV RCX,qword ptr [RCX + 0x30]\nMOV qword ptr [RAX + 0x30],RCX\nMOV RAX,qword ptr [RAX + 0x10]\nTEST RAX,RAX\nJNZ 0x0040eb39\nJMP 0x0040eb66\nMOV ESI,0x3\nMOV RDI,R14\nCALL 0x0040f070\nMOV qword ptr [R14 + 0x8],RAX\nTEST RAX,RAX\nJZ 0x0040eb97\nMOV RBX,qword ptr [R14 + 0x8]\nMOV qword ptr [R14 + 0x8],0x0\nJMP 0x0040ecd4\nMOV RDI,R14\nCALL 0x0040e870\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x0040f7b0\nMOV RDI,R14\nCALL 0x0040e610\nJMP 0x0040ed0d\nTEST byte ptr [R14 + 0x49],0x40\nJNZ 0x0040eddf\nCMP dword ptr [R12 + 0x40],0x0\nJZ 0x0040ea78\nMOVZX EAX,word ptr [R12 + 0x70]\nCMP EAX,0x4\nJZ 0x0040ea78\nMOV word ptr [R12 + 0x70],0x7\nJMP 0x0040ea78\nTEST byte ptr [R14 + 0x49],0x40\nJNZ 0x0040eddf\nMOV R15,qword ptr [R12 + 0x8]\nMOV qword ptr [R14],R15\nMOV RDI,R12\nCALL 0x004020c0\nCMP qword ptr [R15 + 0x58],-0x1\nJZ 0x0040ec3d\nMOVZX EAX,word ptr [R15 + 0x70]\nCMP EAX,0xb\nJZ 0x0040ee45\nMOV RAX,qword ptr [R14 + 0x20]\nMOV RCX,qword ptr [R15 + 0x48]\nMOV byte ptr [RAX + RCX*0x1],0x0\nCMP qword ptr [R15 + 0x58],0x0\nJZ 0x0040ec5c\nMOVZX EAX,word ptr [R15 + 0x72]\nTEST AL,0x2\nJNZ 0x0040ec81\nTEST AL,0x1\nJNZ 0x0040ee07\nMOV RSI,qword ptr [R15 + 0x8]\nMOV EDX,0xffffffff\nMOV ECX,0x4124df\nMOV RDI,R14\nCALL 0x0040eee0\nTEST EAX,EAX\nJNZ 0x0040ec6c\nJMP 0x0040ee07\nMOV RDI,R15\nCALL 0x004020c0\nCALL 0x00402100\nMOV dword ptr [RAX],0x0\nMOV qword ptr [R14],0x0\nJMP 0x0040eddf\nMOV RDI,R14\nCALL 0x0040f760\nTEST EAX,EAX\nJZ 0x0040ee07\nCALL 0x00402100\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [R15 + 0x40],EAX\nOR byte ptr [R14 + 0x49],0x40\nJMP 0x0040ee07\nMOV EAX,dword ptr [R14 + 0x48]\nTEST AL,0x4\nJNZ 0x0040edfe\nTEST AH,0x2\nMOV ESI,dword ptr [R15 + 0x44]\nJNZ 0x0040edf1\nMOV EDI,ESI\nCALL 0x004025b0\nTEST EAX,EAX\nJZ 0x0040edfe\nCALL 0x00402100\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [R15 + 0x40],EAX\nOR byte ptr [R14 + 0x49],0x40\nJMP 0x0040edfe\nCALL 0x00402100\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RBX + 0x40],EAX\nMOV word ptr [RBX + 0x70],0x7\nMOV word ptr [RBX + 0x74],0x3\nMOV RAX,qword ptr [R14 + 0x20]\nMOV RCX,qword ptr [RBX + 0x8]\nMOV RDX,qword ptr [RCX + 0x38]\nMOV RCX,qword ptr [RCX + 0x48]\nLEA RSI,[RCX + -0x1]\nCMP byte ptr [RDX + RCX*0x1 + -0x1],0x2f\nCMOVNZ RSI,RCX\nLEA RDI,[RAX + RSI*0x1 + 0x1]\nMOV byte ptr [RAX + RSI*0x1],0x2f\nLEA RSI,[0x108 + RBX]\nMOV RDX,qword ptr [RBX + 0x60]\nINC RDX\nCALL 0x00402630\nMOV R12,RBX\nMOV qword ptr [R14],R12\nMOVZX EAX,word ptr [R12 + 0x70]\nCMP EAX,0xb\nJNZ 0x0040edac\nMOV RAX,qword ptr [0xa8 + R12]\nCMP RAX,0x1\nJZ 0x0040eda6\nCMP RAX,0x2\nJNZ 0x0040ee45\nMOV RBX,qword ptr [R12 + 0x8]\nCMP qword ptr [R12 + 0x58],0x0\nJLE 0x0040ed66\nCMP qword ptr [RBX + 0x68],0x0\nJNZ 0x0040ed66\nMOV EAX,dword ptr [R14 + 0x48]\nAND EAX,0x18\nCMP EAX,0x18\nJNZ 0x0040ed66\nMOV RDI,RBX\nCALL 0x0040f840\nTEST AL,AL\nJNZ 0x0040eda6\nXOR EDX,EDX\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x0040e3b0\nMOV word ptr [R12 + 0x70],AX\nMOV ECX,0xf000\nAND ECX,dword ptr [0x90 + R12]\nCMP ECX,0x4000\nJNZ 0x0040edac\nCMP qword ptr [R12 + 0x58],0x0\nJZ 0x0040eda6\nMOV RAX,qword ptr [RBX + 0x68]\nTEST RAX,RAX\nJZ 0x0040eda6\nDEC RAX\nMOV qword ptr [RBX + 0x68],RAX\nMOV AX,word ptr [R12 + 0x70]\nMOVZX EAX,AX\nCMP EAX,0x1\nJNZ 0x0040ede2\nCMP qword ptr [R12 + 0x58],0x0\nJNZ 0x0040edc5\nMOV RAX,qword ptr [R12 + 0x78]\nMOV qword ptr [R14 + 0x18],RAX\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x0040f920\nTEST AL,AL\nJNZ 0x0040ede2\nCALL 0x00402100\nMOV dword ptr [RAX],0xc\nXOR R12D,R12D\nMOV RAX,R12\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nMOV EDX,0x1\nMOV RDI,R14\nCALL 0x0040f9c0\nMOV EDI,dword ptr [R15 + 0x44]\nCALL 0x004023c0\nMOVZX EAX,word ptr [R15 + 0x70]\nCMP EAX,0x2\nJZ 0x0040ee35\nMOV EAX,dword ptr [R15 + 0x40]\nXOR ECX,ECX\nCMP EAX,0x0\nSETNZ CL\nOR ECX,0x6\nCMP EAX,0x0\nMOV word ptr [R15 + 0x70],CX\nJNZ 0x0040ee35\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x0040ee50\nXOR EAX,EAX\nTEST byte ptr [R14 + 0x49],0x40\nCMOVNZ R15,RAX\nMOV R12,R15\nJMP 0x0040ede2\nCALL 0x004020f0\n'
p1159
S'41 57\n41 56\n41 54\n53\n50\n49 89 fe\n4d 8b 26\n4d 85 e4\n0f 84 28 05 00 00\n41 f6 46 49 40\n0f 85 1d 05 00 00\n41 0f b7 44 24 74\n66 41 c7 44 24 74 03 00\n83 f8 01\n75 18\n31 d2\n4c 89 f7\n4c 89 e6\ne8 ce fa ff ff\n66 41 89 44 24 70\ne9 f5 04 00 00\n41 0f b7 4c 24 70\n0f b7 c0\n83 f8 02\n75 62\n89 ca\n81 e2 fe ff 00 00\n0f b7 d2\n83 fa 0c\n75 52\nba 01 00 00 00\n4c 89 f7\n4c 89 e6\ne8 95 fa ff ff\n66 41 89 44 24 70\n0f b7 c0\n83 f8 01\n0f 85 e3 03 00 00\n41 f6 46 48 04\n0f 85 d8 03 00 00\nbe e0 24 41 00\n4c 89 f7\ne8 3b fd ff ff\n41 89 44 24 44\n85 c0\n0f 88 95 01 00 00\n41 80 4c 24 72 02\ne9 b3 03 00 00\n0f b7 c9\n83 f9 01\n75 5b\n83 f8 04\n0f 84 da 00 00 00\n41 8b 46 48\na8 40\n74 0f\n49 8b 4c 24 78\n49 3b 4e 18\n0f 85 c3 00 00 00\n49 8b 7e 08\nf6 c4 20\n0f 84 6e 01 00 00\n48 85 ff\n0f 84 65 01 00 00\n25 ff df ff ff\n41 89 46 48\ne8 37 fd ff ff\n49 c7 46 08 00 00 00 00\ne9 9a 01 00 00\n49 8b 5c 24 10\n48 85 db\n0f 84 ba 00 00 00\n49 89 1e\n4c 89 e7\ne8 e7 36 ff ff\n48 83 7b 58 00\n0f 84 e9 00 00 00\n0f b7 43 74\n83 f8 04\n49 89 dc\n74 d0\n0f b7 c0\n83 f8 02\n0f 85 d8 02 00 00\nba 01 00 00 00\n4c 89 f7\n48 89 de\ne8 a4 f9 ff ff\n66 89 43 70\n0f b7 c0\n83 f8 01\n0f 85 b2 02 00 00\n41 f6 46 48 04\n0f 85 a7 02 00 00\nbe e0 24 41 00\n4c 89 f7\ne8 4c fc ff ff\n89 43 44\n85 c0\n0f 88 7f 02 00 00\n80 4b 72 02\ne9 86 02 00 00\n41 f6 44 24 72 02\n74 0a\n41 8b 7c 24 44\ne8 66 39 ff ff\n49 8b 7e 08\n48 85 ff\n74 0d\ne8 78 fc ff ff\n49 c7 46 08 00 00 00 00\n66 41 c7 44 24 70 06 00\n4c 89 f7\n4c 89 e6\ne8 cd 03 00 00\ne9 5a 03 00 00\n49 8b 44 24 08\n48 83 78 18 00\n0f 84 3d 01 00 00\n49 89 06\n49 8b 4e 20\n48 8b 40 48\nc6 04 01 00\nbe 03 00 00 00\n4c 89 f7\ne8 bc 05 00 00\n48 89 c3\n48 85 db\n0f 84 0a 01 00 00\n4c 89 e7\ne8 f8 35 ff ff\ne9 07 02 00 00\n4c 89 f7\ne8 8b 0c 00 00\n85 c0\n0f 84 9a 00 00 00\n41 80 4e 49 40\ne9 f8 02 00 00\ne8 14 36 ff ff\n8b 00\n41 89 44 24 40\n66 41 c7 44 24 70 07 00\ne9 10 02 00 00\n48 85 ff\n74 4b\n49 8b 4c 24 30\nba ff ff ff ff\n4c 89 f7\n4c 89 e6\ne8 c6 03 00 00\n85 c0\n74 48\ne8 dd 35 ff ff\n8b 00\n41 89 44 24 40\n41 80 4c 24 72 01\n49 8b 46 08\n48 85 c0\n74 2d\n48 8b 48 08\n48 8b 49 30\n48 89 48 30\n48 8b 40 10\n48 85 c0\n75 eb\neb 16\nbe 03 00 00 00\n4c 89 f7\ne8 13 05 00 00\n49 89 46 08\n48 85 c0\n74 31\n49 8b 5e 08\n49 c7 46 08 00 00 00 00\ne9 5d 01 00 00\n4c 89 f7\ne8 f1 fc ff ff\n4c 89 f7\n48 89 de\ne8 26 0c 00 00\n4c 89 f7\ne8 7e fa ff ff\ne9 76 01 00 00\n41 f6 46 49 40\n0f 85 3d 02 00 00\n41 83 7c 24 40 00\n0f 84 ca fe ff ff\n41 0f b7 44 24 70\n83 f8 04\n0f 84 bb fe ff ff\n66 41 c7 44 24 70 07 00\ne9 ae fe ff ff\n41 f6 46 49 40\n0f 85 0a 02 00 00\n4d 8b 7c 24 08\n4d 89 3e\n4c 89 e7\ne8 db 34 ff ff\n49 83 7f 58 ff\n74 51\n41 0f b7 47 70\n83 f8 0b\n0f 84 4b 02 00 00\n49 8b 46 20\n49 8b 4f 48\nc6 04 08 00\n49 83 7f 58 00\n74 4f\n41 0f b7 47 72\na8 02\n75 6b\na8 01\n0f 85 e9 01 00 00\n49 8b 77 08\nba ff ff ff ff\nb9 df 24 41 00\n4c 89 f7\ne8 ac 02 00 00\n85 c0\n75 34\ne9 ca 01 00 00\n4c 89 ff\ne8 7b 34 ff ff\ne8 b6 34 ff ff\nc7 00 00 00 00 00\n49 c7 06 00 00 00 00\ne9 83 01 00 00\n4c 89 f7\ne8 fc 0a 00 00\n85 c0\n0f 84 9b 01 00 00\ne8 8f 34 ff ff\n8b 00\n41 89 47 40\n41 80 4e 49 40\ne9 86 01 00 00\n41 8b 46 48\na8 04\n0f 85 71 01 00 00\nf6 c4 02\n41 8b 77 44\n0f 85 57 01 00 00\n89 f7\ne8 0f 39 ff ff\n85 c0\n0f 84 55 01 00 00\ne8 52 34 ff ff\n8b 00\n41 89 47 40\n41 80 4e 49 40\ne9 40 01 00 00\ne8 3d 34 ff ff\n8b 00\n89 43 40\n66 c7 43 70 07 00\n66 c7 43 74 03 00\n49 8b 46 20\n48 8b 4b 08\n48 8b 51 38\n48 8b 49 48\n48 8d 71 ff\n80 7c 0a ff 2f\n48 0f 45 f1\n48 8d 7c 30 01\nc6 04 30 2f\n48 8d b3 08 01 00 00\n48 8b 53 60\n48 ff c2\ne8 23 39 ff ff\n49 89 dc\n4d 89 26\n41 0f b7 44 24 70\n83 f8 0b\n0f 85 8a 00 00 00\n49 8b 84 24 a8 00 00 00\n48 83 f8 01\n74 76\n48 83 f8 02\n0f 85 0b 01 00 00\n49 8b 5c 24 08\n49 83 7c 24 58 00\n7e 1f\n48 83 7b 68 00\n75 18\n41 8b 46 48\n83 e0 18\n83 f8 18\n75 0c\n48 89 df\ne8 de 0a 00 00\n84 c0\n75 40\n31 d2\n4c 89 f7\n4c 89 e6\ne8 3d f6 ff ff\n66 41 89 44 24 70\nb9 00 f0 00 00\n41 23 8c 24 90 00 00 00\n81 f9 00 40 00 00\n75 1e\n49 83 7c 24 58 00\n74 10\n48 8b 43 68\n48 85 c0\n74 07\n48 ff c8\n48 89 43 68\n66 41 8b 44 24 70\n0f b7 c0\n83 f8 01\n75 2e\n49 83 7c 24 58 00\n75 09\n49 8b 44 24 78\n49 89 46 18\n4c 89 f7\n4c 89 e6\ne8 50 0b 00 00\n84 c0\n75 0e\ne8 27 33 ff ff\nc7 00 0c 00 00 00\n45 31 e4\n4c 89 e0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\nba 01 00 00 00\n4c 89 f7\ne8 c2 0b 00 00\n41 8b 7f 44\ne8 b9 35 ff ff\n41 0f b7 47 70\n83 f8 02\n74 24\n41 8b 47 40\n31 c9\n83 f8 00\n0f 95 c1\n83 c9 06\n83 f8 00\n66 41 89 4f 70\n75 0b\n4c 89 f7\n4c 89 fe\ne8 1b 00 00 00\n31 c0\n41 f6 46 49 40\n4c 0f 45 f8\n4d 89 fc\neb 9d\ne8 a6 32 ff ff\n'
p1160
S'.text:000000000040e8a0\n.text:000000000040e8a2\n.text:000000000040e8a4\n.text:000000000040e8a6\n.text:000000000040e8a7\n.text:000000000040e8a8\n.text:000000000040e8ab\n.text:000000000040e8ae\n.text:000000000040e8b1\n.text:000000000040e8b7\n.text:000000000040e8bc\n.text:000000000040e8c2\n.text:000000000040e8c8\n.text:000000000040e8d0\n.text:000000000040e8d3\n.text:000000000040e8d5\n.text:000000000040e8d7\n.text:000000000040e8da\n.text:000000000040e8dd\n.text:000000000040e8e2\n.text:000000000040e8e8\n.text:000000000040e8ed\n.text:000000000040e8f3\n.text:000000000040e8f6\n.text:000000000040e8f9\n.text:000000000040e8fb\n.text:000000000040e8fd\n.text:000000000040e903\n.text:000000000040e906\n.text:000000000040e909\n.text:000000000040e90b\n.text:000000000040e910\n.text:000000000040e913\n.text:000000000040e916\n.text:000000000040e91b\n.text:000000000040e921\n.text:000000000040e924\n.text:000000000040e927\n.text:000000000040e92d\n.text:000000000040e932\n.text:000000000040e938\n.text:000000000040e93d\n.text:000000000040e940\n.text:000000000040e945\n.text:000000000040e94a\n.text:000000000040e94c\n.text:000000000040e952\n.text:000000000040e958\n.text:000000000040e95d\n.text:000000000040e960\n.text:000000000040e963\n.text:000000000040e965\n.text:000000000040e968\n.text:000000000040e96e\n.text:000000000040e972\n.text:000000000040e974\n.text:000000000040e976\n.text:000000000040e97b\n.text:000000000040e97f\n.text:000000000040e985\n.text:000000000040e989\n.text:000000000040e98c\n.text:000000000040e992\n.text:000000000040e995\n.text:000000000040e99b\n.text:000000000040e9a0\n.text:000000000040e9a4\n.text:000000000040e9a9\n.text:000000000040e9b1\n.text:000000000040e9c0\n.text:000000000040e9c5\n.text:000000000040e9c8\n.text:000000000040e9ce\n.text:000000000040e9d1\n.text:000000000040e9d4\n.text:000000000040e9d9\n.text:000000000040e9de\n.text:000000000040e9e4\n.text:000000000040e9e8\n.text:000000000040e9eb\n.text:000000000040e9ee\n.text:000000000040e9f0\n.text:000000000040e9f3\n.text:000000000040e9f6\n.text:000000000040e9fc\n.text:000000000040ea01\n.text:000000000040ea04\n.text:000000000040ea07\n.text:000000000040ea0c\n.text:000000000040ea10\n.text:000000000040ea13\n.text:000000000040ea16\n.text:000000000040ea1c\n.text:000000000040ea21\n.text:000000000040ea27\n.text:000000000040ea2c\n.text:000000000040ea2f\n.text:000000000040ea34\n.text:000000000040ea37\n.text:000000000040ea39\n.text:000000000040ea3f\n.text:000000000040ea43\n.text:000000000040ea48\n.text:000000000040ea4e\n.text:000000000040ea50\n.text:000000000040ea55\n.text:000000000040ea5a\n.text:000000000040ea5e\n.text:000000000040ea61\n.text:000000000040ea63\n.text:000000000040ea68\n.text:000000000040ea70\n.text:000000000040ea78\n.text:000000000040ea7b\n.text:000000000040ea7e\n.text:000000000040ea83\n.text:000000000040ea88\n.text:000000000040ea8d\n.text:000000000040ea92\n.text:000000000040ea98\n.text:000000000040ea9b\n.text:000000000040ea9f\n.text:000000000040eaa3\n.text:000000000040eaa7\n.text:000000000040eaac\n.text:000000000040eaaf\n.text:000000000040eab4\n.text:000000000040eab7\n.text:000000000040eaba\n.text:000000000040eac0\n.text:000000000040eac3\n.text:000000000040eac8\n.text:000000000040eacd\n.text:000000000040ead0\n.text:000000000040ead5\n.text:000000000040ead7\n.text:000000000040eadd\n.text:000000000040eae2\n.text:000000000040eae7\n.text:000000000040eaec\n.text:000000000040eaee\n.text:000000000040eaf3\n.text:000000000040eafb\n.text:000000000040eb00\n.text:000000000040eb03\n.text:000000000040eb05\n.text:000000000040eb0a\n.text:000000000040eb0f\n.text:000000000040eb12\n.text:000000000040eb15\n.text:000000000040eb1a\n.text:000000000040eb1c\n.text:000000000040eb1e\n.text:000000000040eb23\n.text:000000000040eb25\n.text:000000000040eb2a\n.text:000000000040eb30\n.text:000000000040eb34\n.text:000000000040eb37\n.text:000000000040eb39\n.text:000000000040eb3d\n.text:000000000040eb41\n.text:000000000040eb45\n.text:000000000040eb49\n.text:000000000040eb4c\n.text:000000000040eb4e\n.text:000000000040eb50\n.text:000000000040eb55\n.text:000000000040eb58\n.text:000000000040eb5d\n.text:000000000040eb61\n.text:000000000040eb64\n.text:000000000040eb66\n.text:000000000040eb6a\n.text:000000000040eb72\n.text:000000000040eb77\n.text:000000000040eb7a\n.text:000000000040eb7f\n.text:000000000040eb82\n.text:000000000040eb85\n.text:000000000040eb8a\n.text:000000000040eb8d\n.text:000000000040eb92\n.text:000000000040eb97\n.text:000000000040eb9c\n.text:000000000040eba2\n.text:000000000040eba8\n.text:000000000040ebae\n.text:000000000040ebb4\n.text:000000000040ebb7\n.text:000000000040ebbd\n.text:000000000040ebc5\n.text:000000000040ebca\n.text:000000000040ebcf\n.text:000000000040ebd5\n.text:000000000040ebda\n.text:000000000040ebdd\n.text:000000000040ebe0\n.text:000000000040ebe5\n.text:000000000040ebea\n.text:000000000040ebec\n.text:000000000040ebf1\n.text:000000000040ebf4\n.text:000000000040ebfa\n.text:000000000040ebfe\n.text:000000000040ec02\n.text:000000000040ec06\n.text:000000000040ec0b\n.text:000000000040ec0d\n.text:000000000040ec12\n.text:000000000040ec14\n.text:000000000040ec16\n.text:000000000040ec18\n.text:000000000040ec1e\n.text:000000000040ec22\n.text:000000000040ec27\n.text:000000000040ec2c\n.text:000000000040ec2f\n.text:000000000040ec34\n.text:000000000040ec36\n.text:000000000040ec38\n.text:000000000040ec3d\n.text:000000000040ec40\n.text:000000000040ec45\n.text:000000000040ec4a\n.text:000000000040ec50\n.text:000000000040ec57\n.text:000000000040ec5c\n.text:000000000040ec5f\n.text:000000000040ec64\n.text:000000000040ec66\n.text:000000000040ec6c\n.text:000000000040ec71\n.text:000000000040ec73\n.text:000000000040ec77\n.text:000000000040ec7c\n.text:000000000040ec81\n.text:000000000040ec85\n.text:000000000040ec87\n.text:000000000040ec8d\n.text:000000000040ec90\n.text:000000000040ec94\n.text:000000000040ec9a\n.text:000000000040ec9c\n.text:000000000040eca1\n.text:000000000040eca3\n.text:000000000040eca9\n.text:000000000040ecae\n.text:000000000040ecb0\n.text:000000000040ecb4\n.text:000000000040ecb9\n.text:000000000040ecbe\n.text:000000000040ecc3\n.text:000000000040ecc5\n.text:000000000040ecc8\n.text:000000000040ecce\n.text:000000000040ecd4\n.text:000000000040ecd8\n.text:000000000040ecdc\n.text:000000000040ece0\n.text:000000000040ece4\n.text:000000000040ece8\n.text:000000000040eced\n.text:000000000040ecf1\n.text:000000000040ecf6\n.text:000000000040ecfa\n.text:000000000040ed01\n.text:000000000040ed05\n.text:000000000040ed08\n.text:000000000040ed0d\n.text:000000000040ed10\n.text:000000000040ed13\n.text:000000000040ed19\n.text:000000000040ed1c\n.text:000000000040ed22\n.text:000000000040ed2a\n.text:000000000040ed2e\n.text:000000000040ed30\n.text:000000000040ed34\n.text:000000000040ed3a\n.text:000000000040ed3f\n.text:000000000040ed45\n.text:000000000040ed47\n.text:000000000040ed4c\n.text:000000000040ed4e\n.text:000000000040ed52\n.text:000000000040ed55\n.text:000000000040ed58\n.text:000000000040ed5a\n.text:000000000040ed5d\n.text:000000000040ed62\n.text:000000000040ed64\n.text:000000000040ed66\n.text:000000000040ed68\n.text:000000000040ed6b\n.text:000000000040ed6e\n.text:000000000040ed73\n.text:000000000040ed79\n.text:000000000040ed7e\n.text:000000000040ed86\n.text:000000000040ed8c\n.text:000000000040ed8e\n.text:000000000040ed94\n.text:000000000040ed96\n.text:000000000040ed9a\n.text:000000000040ed9d\n.text:000000000040ed9f\n.text:000000000040eda2\n.text:000000000040eda6\n.text:000000000040edac\n.text:000000000040edaf\n.text:000000000040edb2\n.text:000000000040edb4\n.text:000000000040edba\n.text:000000000040edbc\n.text:000000000040edc1\n.text:000000000040edc5\n.text:000000000040edc8\n.text:000000000040edcb\n.text:000000000040edd0\n.text:000000000040edd2\n.text:000000000040edd4\n.text:000000000040edd9\n.text:000000000040eddf\n.text:000000000040ede2\n.text:000000000040ede5\n.text:000000000040ede9\n.text:000000000040edea\n.text:000000000040edec\n.text:000000000040edee\n.text:000000000040edf0\n.text:000000000040edf1\n.text:000000000040edf6\n.text:000000000040edf9\n.text:000000000040edfe\n.text:000000000040ee02\n.text:000000000040ee07\n.text:000000000040ee0c\n.text:000000000040ee0f\n.text:000000000040ee11\n.text:000000000040ee15\n.text:000000000040ee17\n.text:000000000040ee1a\n.text:000000000040ee1d\n.text:000000000040ee20\n.text:000000000040ee23\n.text:000000000040ee28\n.text:000000000040ee2a\n.text:000000000040ee2d\n.text:000000000040ee30\n.text:000000000040ee35\n.text:000000000040ee37\n.text:000000000040ee3c\n.text:000000000040ee40\n.text:000000000040ee43\n.text:000000000040ee45\n'
p1161
tp1162
sS'fts_lfree'
p1163
(S'\n__stdcall fts_lfree(FTSENT * head)\n'
p1164
V\u000avoid fts_lfree(FTSENT *head)\u000a\u000a{\u000a  _ftsent *p_Var1;\u000a  \u000a  if (head != (FTSENT *)0x0) {\u000a    do {\u000a      p_Var1 = head->fts_link;\u000a      if ((DIR *)head->fts_dirp != (DIR *)0x0) {\u000a        closedir((DIR *)head->fts_dirp);\u000a      }\u000a      free(head);\u000a      head = (FTSENT *)p_Var1;\u000a    } while (p_Var1 != (_ftsent *)0x0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1165
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0040e712\nNOP dword ptr [RAX]\nMOV R14,qword ptr [RBX + 0x10]\nMOV RDI,qword ptr [RBX + 0x18]\nTEST RDI,RDI\nJZ 0x0040e702\nCALL 0x004023e0\nMOV RDI,RBX\nCALL 0x004020c0\nTEST R14,R14\nMOV RBX,R14\nJNZ 0x0040e6f0\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1166
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 26\n0f 1f 40 00\n4c 8b 73 10\n48 8b 7b 18\n48 85 ff\n74 05\ne8 de 3c ff ff\n48 89 df\ne8 b6 39 ff ff\n4d 85 f6\n4c 89 f3\n75 de\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1167
S'.text:000000000040e6e0\n.text:000000000040e6e2\n.text:000000000040e6e3\n.text:000000000040e6e4\n.text:000000000040e6e7\n.text:000000000040e6ea\n.text:000000000040e6ec\n.text:000000000040e6f0\n.text:000000000040e6f4\n.text:000000000040e6f8\n.text:000000000040e6fb\n.text:000000000040e6fd\n.text:000000000040e702\n.text:000000000040e705\n.text:000000000040e70a\n.text:000000000040e70d\n.text:000000000040e710\n.text:000000000040e712\n.text:000000000040e716\n.text:000000000040e717\n.text:000000000040e719\n'
p1168
tp1169
sS'main'
p1170
(S'\n__stdcall main(char * * argv)\n'
p1171
V\u000aint main(char **argv)\u000a\u000a{\u000a  bool bVar1;\u000a  bool bVar2;\u000a  bool bVar3;\u000a  _Bool _Var4;\u000a  _Bool _Var5;\u000a  int iVar6;\u000a  uint *puVar7;\u000a  char *context;\u000a  undefined8 uVar8;\u000a  char *dest;\u000a  char *version;\u000a  ulong uVar9;\u000a  char **in_RSI;\u000a  char **ppcVar10;\u000a  uint uVar11;\u000a  long lVar12;\u000a  stat st;\u000a  char *local_110;\u000a  cp_options local_108;\u000a  stat local_c0;\u000a  \u000a  set_program_name(*in_RSI);\u000a  setlocale(6,\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  bindtextdomain(0x411fe6,"/usr/local/share/locale");\u000a  textdomain(0x411fe6);\u000a  atexit(close_stdin);\u000a  cp_option_init(&local_108);\u000a  priv_set_remove_linkdir();\u000a  local_110 = getenv("SIMPLE_BACKUP_SUFFIX");\u000a  bVar2 = false;\u000a  version = (char *)0x0;\u000a  dest = (char *)0x0;\u000a  bVar3 = (bool)0;\u000aswitchD_00402c61_caseD_54:\u000a  bVar1 = bVar3;\u000a  uVar11 = (uint)&local_c0;\u000a  iVar6 = getopt_long((ulong)argv & 0xffffffff);\u000a  if (iVar6 < 0x53) {\u000a    if (iVar6 == -1) {\u000a      lVar12 = (long)(int)((ulong)argv & 0xffffffff) - (long)optind;\u000a      ppcVar10 = in_RSI + (long)optind;\u000a      uVar11 = (uint)lVar12;\u000a      if ((int)uVar11 <= (int)(uint)(dest == (char *)0x0)) goto LAB_00403036;\u000a      if (bVar1) {\u000a        if (dest != (char *)0x0) {\u000a          uVar8 = dcgettext(0,\u000a                            "cannot combine --target-directory (-t) and --no-target-directory (-T)",\u000a                            5);\u000a          error(1,0,uVar8,uVar8);\u000a        }\u000a        if (2 < (int)uVar11) {\u000a          local_110 = (char *)dcgettext(0,"extra operand %s",5);\u000a          context = quotearg_style((char *)0x4);\u000a          error(0,0,local_110,context);\u000a          usage(1);\u000a          goto LAB_00402e80;\u000a        }\u000a      }\u000a      else {\u000aLAB_00402e80:\u000a        if (dest == (char *)0x0) {\u000a          if ((int)uVar11 < 2) goto LAB_004030ce;\u000a          _Var4 = target_directory_operand(ppcVar10[lVar12 + -1]);\u000a          if (_Var4 == false) {\u000a            if ((int)uVar11 < 3) {\u000a              uVar11 = 2;\u000a              dest = (char *)0x0;\u000a            }\u000a            else {\u000a              dest = (char *)0x0;\u000a              uVar8 = dcgettext(0,"target %s is not a directory",5);\u000a              context = quotearg_style((char *)0x4);\u000a              error(1,0,uVar8,context);\u000a            }\u000a          }\u000a          else {\u000a            dest = ppcVar10[lVar12 + -1];\u000a            uVar11 = uVar11 - 1;\u000a          }\u000a        }\u000a      }\u000a      if ((bVar2) && (local_108.interactive == I_ALWAYS_NO)) goto LAB_00403067;\u000a      if (local_110 != (char *)0x0) {\u000a        simple_backup_suffix = xstrdup(local_110);\u000a      }\u000a      if (bVar2) {\u000a        context = (char *)dcgettext(0,"backup type",5);\u000a        local_108.backup_type = xget_version(context,version);\u000a      }\u000a      else {\u000a        local_108.backup_type = no_backups;\u000a      }\u000a      hash_init();\u000a      if (dest == (char *)0x0) {\u000a        _Var4 = movefile(*ppcVar10,ppcVar10[1],(cp_options *)0x0);\u000a        goto LAB_00402fbf;\u000a      }\u000a      if ((int)uVar11 < 2) {\u000a        _Var4 = true;\u000a        if (uVar11 != 1) goto LAB_00402fbf;\u000a      }\u000a      else {\u000a        dest_info_init(&local_108);\u000a      }\u000a      uVar9 = (ulong)uVar11;\u000a      _Var4 = true;\u000a      do {\u000a        _Var5 = movefile(*ppcVar10,dest,(cp_options *)0x1);\u000a        _Var4 = (_Bool)(_Var4 & _Var5);\u000a        ppcVar10 = ppcVar10 + 1;\u000a        uVar9 = uVar9 - 1;\u000a      } while (uVar9 != 0);\u000aLAB_00402fbf:\u000a      return (int)(uint)(_Var4 ^ 1);\u000a    }\u000a    if (iVar6 != -0x83) {\u000a      if (iVar6 != -0x82) goto switchD_00402c61_caseD_55;\u000a      usage(0);\u000a    }\u000a    version_etc(stdout,"mv","GNU coreutils",Version,"Mike Parker","David MacKenzie","Jim Meyering",0\u000a               );\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  bVar3 = (bool)1;\u000a  switch(iVar6) {\u000a  case 0x53:\u000a    local_110 = optarg;\u000a    break;\u000a  case 0x54:\u000a    goto switchD_00402c61_caseD_54;\u000a  default:\u000a    goto switchD_00402c61_caseD_55;\u000a  case 0x5a:\u000a    bVar3 = bVar1;\u000a    goto switchD_00402c61_caseD_54;\u000a  case 0x62:\u000a    if (optarg != (char *)0x0) {\u000a      version = optarg;\u000a    }\u000a    break;\u000a  case 0x66:\u000a    local_108.interactive = I_ALWAYS_YES;\u000a    bVar3 = bVar1;\u000a    goto switchD_00402c61_caseD_54;\u000a  case 0x69:\u000a    local_108.interactive = I_ASK_USER;\u000a    bVar3 = bVar1;\u000a    goto switchD_00402c61_caseD_54;\u000a  case 0x6e:\u000a    local_108.interactive = I_ALWAYS_NO;\u000a    bVar3 = bVar1;\u000a    goto switchD_00402c61_caseD_54;\u000a  case 0x74:\u000a    if (dest == (char *)0x0) {\u000a      iVar6 = stat(optarg,&local_c0);\u000a      if (iVar6 != 0) {\u000a        puVar7 = (uint *)__errno_location();\u000a        uVar11 = *puVar7;\u000a        uVar8 = dcgettext(0,"failed to access %s",5);\u000a        dest = quotearg_style((char *)0x4);\u000a        error(1,(ulong)uVar11,uVar8,dest);\u000a      }\u000a      dest = optarg;\u000a      bVar3 = bVar1;\u000a      if ((local_c0.st_mode & 0xf000) != 0x4000) {\u000a        uVar8 = dcgettext(0,"target %s is not a directory",5);\u000a        quotearg_style((char *)0x4);\u000a        error(1,0,uVar8);\u000a        dest = optarg;\u000a        bVar3 = bVar1;\u000a      }\u000a    }\u000a    else {\u000a      uVar8 = dcgettext(0,"multiple target directories specified",5);\u000a      error(1,0,uVar8);\u000a      dest = optarg;\u000a      bVar3 = bVar1;\u000a    }\u000a    goto switchD_00402c61_caseD_54;\u000a  case 0x75:\u000a    local_108.update = true;\u000a    bVar3 = bVar1;\u000a    goto switchD_00402c61_caseD_54;\u000a  case 0x76:\u000a    local_108.verbose = true;\u000a    bVar3 = bVar1;\u000a    goto switchD_00402c61_caseD_54;\u000a  case 0x80:\u000a    remove_trailing_slashes = 1;\u000a    bVar3 = bVar1;\u000a    goto switchD_00402c61_caseD_54;\u000a  }\u000a  bVar2 = true;\u000a  bVar3 = bVar1;\u000a  goto switchD_00402c61_caseD_54;\u000aswitchD_00402c61_caseD_55:\u000a  usage(1);\u000aLAB_00403036:\u000a  if ((int)uVar11 < 1) {\u000a    uVar8 = dcgettext(0,"missing file operand",5);\u000a    error(0,0,uVar8,uVar8);\u000a    usage(1);\u000aLAB_00403067:\u000a    uVar8 = dcgettext(0,"options --backup and --no-clobber are mutually exclusive",5);\u000a    error(0,0,uVar8,uVar8);\u000a    usage(1);\u000a  }\u000a  uVar8 = dcgettext();\u000a  dest = quotearg_style((char *)0x4);\u000a  error(0,0,uVar8,dest);\u000a  usage(1);\u000aLAB_004030ce:\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("2 <= n_files","src/mv.c",0x1d4,"int main(int, char **)");\u000a}\u000a\u000a
p1172
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xf8\nMOV R12,RSI\nMOV EBP,EDI\nMOV RDI,qword ptr [R12]\nCALL 0x0040a630\nMOV EDI,0x6\nMOV ESI,0x413b59\nCALL 0x004025f0\nMOV EDI,0x411fe6\nMOV ESI,0x411f51\nCALL 0x00402240\nMOV EDI,0x411fe6\nCALL 0x00402200\nMOV EDI,0x408d10\nCALL 0x004113b0\nLEA RDI,[RSP + 0x20]\nCALL 0x004030f0\nCALL 0x0040a610\nMOV EDI,0x411f69\nCALL 0x004020b0\nMOV qword ptr [RSP + 0x18],RAX\nLEA R14,[RSP + 0x68]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nXOR EBX,EBX\nXOR R13D,R13D\nXOR ECX,ECX\nJMP 0x00402c30\nMOV AL,0x1\nMOV qword ptr [RSP + 0x10],RAX\nMOV CL,R15B\nNOP\nMOV R15D,ECX\nMOV EDX,0x411f7e\nMOV ECX,0x4115e0\nXOR R8D,R8D\nMOV EDI,EBP\nMOV RSI,R12\nCALL 0x004022d0\nCMP EAX,0x52\nJLE 0x00402dcf\nADD EAX,-0x53\nCMP EAX,0x2d\nJA 0x0040302c\nMOV CL,0x1\nJMP qword ptr [0x411470 + RAX*0x8]\nMOV RAX,qword ptr [0x00619440]\nMOV qword ptr [RSP + 0x18],RAX\nJMP 0x00402c24\nMOV CL,R15B\nJMP 0x00402c30\nMOV RAX,qword ptr [0x00619440]\nTEST RAX,RAX\nCMOVNZ RBX,RAX\nJMP 0x00402c24\nMOV dword ptr [RSP + 0x28],0x1\nMOV CL,R15B\nJMP 0x00402c30\nMOV dword ptr [RSP + 0x28],0x3\nMOV CL,R15B\nJMP 0x00402c30\nMOV dword ptr [RSP + 0x28],0x2\nMOV CL,R15B\nJMP 0x00402c30\nTEST R13,R13\nJZ 0x00402d0d\nXOR EDI,EDI\nMOV ESI,0x411f8b\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402640\nJMP 0x00402dc0\nMOV byte ptr [RSP + 0x4c],0x1\nMOV CL,R15B\nJMP 0x00402c30\nMOV byte ptr [RSP + 0x4d],0x1\nMOV CL,R15B\nJMP 0x00402c30\nMOV byte ptr [0x00619470],0x1\nMOV CL,R15B\nJMP 0x00402c30\nMOV RDI,qword ptr [0x00619440]\nMOV RSI,R14\nCALL 0x004113e0\nTEST EAX,EAX\nJZ 0x00402d6c\nCALL 0x00402100\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nXOR EDI,EDI\nMOV ESI,0x411fb1\nMOV EDX,0x5\nCALL 0x00402270\nMOV R13,R14\nMOV R14,RAX\nMOV RSI,qword ptr [0x00619440]\nMOV EDI,0x4\nCALL 0x0040b960\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,dword ptr [RSP + 0x8]\nMOV RDX,R14\nMOV R14,R13\nCALL 0x00402640\nMOV EAX,dword ptr [0x80 + RSP]\nMOV ECX,0xf000\nAND EAX,ECX\nCMP EAX,0x4000\nJZ 0x00402dc0\nXOR EDI,EDI\nMOV ESI,0x411fc5\nMOV EDX,0x5\nCALL 0x00402270\nMOV R13,R14\nMOV R14,RAX\nMOV RSI,qword ptr [0x00619440]\nMOV EDI,0x4\nCALL 0x0040b960\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R14\nMOV R14,R13\nCALL 0x00402640\nMOV R13,qword ptr [0x00619440]\nMOV CL,R15B\nJMP 0x00402c30\nMOV qword ptr [RSP + 0x8],RBX\nCMP EAX,-0x1\nJNZ 0x00402fd7\nMOVSXD RAX,dword ptr [0x00619438]\nMOVSXD R14,EBP\nSUB R14,RAX\nLEA R12,[R12 + RAX*0x8]\nXOR EAX,EAX\nTEST R13,R13\nSETZ AL\nCMP R14D,EAX\nJLE 0x00403036\nTEST R15B,R15B\nMOV RBX,qword ptr [RSP + 0x18]\nMOV RBP,qword ptr [RSP + 0x10]\nJZ 0x00402e80\nTEST R13,R13\nJZ 0x00402e38\nXOR EDI,EDI\nMOV ESI,0x412058\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402640\nCMP R14D,0x3\nJL 0x00402efc\nXOR EDI,EDI\nMOV ESI,0x41209e\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV RSI,qword ptr [R12 + 0x10]\nMOV EDI,0x4\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00402640\nMOV EDI,0x1\nCALL 0x004028a0\nTEST R13,R13\nJNZ 0x00402efc\nCMP R14D,0x1\nJLE 0x004030ce\nMOV RDI,qword ptr [R12 + R14*0x8 + -0x8]\nCALL 0x004031a0\nTEST AL,AL\nJZ 0x00402eac\nMOV R13,qword ptr [R12 + R14*0x8 + -0x8]\nDEC R14\nTEST BPL,BPL\nJNZ 0x00402f01\nJMP 0x00402f0c\nCMP R14D,0x3\nJL 0x00402ef3\nXOR R13D,R13D\nXOR EDI,EDI\nMOV ESI,0x411fc5\nMOV EDX,0x5\nCALL 0x00402270\nMOV R15,RAX\nMOV RSI,qword ptr [R12 + R14*0x8 + -0x8]\nMOV EDI,0x4\nCALL 0x0040b960\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R15\nCALL 0x00402640\nTEST BPL,BPL\nJNZ 0x00402f01\nJMP 0x00402f0c\nMOV R14D,0x2\nXOR R13D,R13D\nTEST BPL,BPL\nJZ 0x00402f0c\nCMP dword ptr [RSP + 0x28],0x2\nJZ 0x00403067\nTEST RBX,RBX\nJZ 0x00402f20\nMOV RDI,RBX\nCALL 0x0040dac0\nMOV qword ptr [0x006193b0],RAX\nTEST BPL,BPL\nJZ 0x00402f45\nXOR EDI,EDI\nMOV ESI,0x412115\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDI,RAX\nMOV RSI,qword ptr [RSP + 0x8]\nCALL 0x00408c60\nJMP 0x00402f47\nXOR EAX,EAX\nMOV dword ptr [RSP + 0x20],EAX\nCALL 0x00408310\nTEST R13,R13\nJZ 0x00402f67\nCMP R14D,0x2\nJL 0x00402f80\nLEA RDI,[RSP + 0x20]\nCALL 0x00403fe0\nJMP 0x00402f88\nMOV RDI,qword ptr [R12]\nMOV RSI,qword ptr [R12 + 0x8]\nLEA RCX,[RSP + 0x20]\nXOR EDX,EDX\nCALL 0x00403230\nMOV EBX,EAX\nJMP 0x00402fbf\nMOV BL,0x1\nCMP R14D,0x1\nJNZ 0x00402fbf\nMOV EBP,R14D\nMOV BL,0x1\nLEA R14,[RSP + 0x20]\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RDI,qword ptr [R12]\nMOV EDX,0x1\nMOV RSI,R13\nMOV RCX,R14\nCALL 0x00403230\nAND BL,AL\nADD R12,0x8\nDEC RBP\nJNZ 0x00402fa0\nXOR BL,0x1\nMOVZX EAX,BL\nADD RSP,0xf8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP EAX,0xffffff7d\nJZ 0x00402fec\nCMP EAX,0xffffff7e\nJNZ 0x0040302c\nXOR EDI,EDI\nCALL 0x004028a0\nMOV RDI,qword ptr [0x00619428]\nMOV RCX,qword ptr [0x006193a8]\nMOV ESI,0x411f4e\nMOV EDX,0x411fe2\nMOV R8D,0x411ff0\nMOV R9D,0x411ffc\nMOV EAX,0x0\nPUSH 0x0\nPUSH 0x41200c\nCALL 0x0040d7f0\nADD RSP,0x10\nXOR EDI,EDI\nCALL 0x00402720\nMOV EDI,0x1\nCALL 0x004028a0\nXOR EDI,EDI\nTEST R14D,R14D\nJG 0x00403093\nMOV ESI,0x412019\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402640\nMOV EDI,0x1\nCALL 0x004028a0\nXOR EDI,EDI\nMOV ESI,0x4120dc\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402640\nMOV EDI,0x1\nCALL 0x004028a0\nMOV ESI,0x41202e\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV RSI,qword ptr [R12]\nMOV EDI,0x4\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00402640\nMOV EDI,0x1\nCALL 0x004028a0\nMOV EDI,0x4120af\nMOV ESI,0x4120bc\nMOV EDX,0x1d4\nMOV ECX,0x4120c5\nCALL 0x00402350\n'
p1173
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec f8 00 00 00\n49 89 f4\n89 fd\n49 8b 3c 24\ne8 71 7a 00 00\nbf 06 00 00 00\nbe 59 3b 41 00\ne8 22 fa ff ff\nbf e6 1f 41 00\nbe 51 1f 41 00\ne8 63 f6 ff ff\nbf e6 1f 41 00\ne8 19 f6 ff ff\nbf 10 8d 40 00\ne8 bf e7 00 00\n48 8d 7c 24 20\ne8 f5 04 00 00\ne8 10 7a 00 00\nbf 69 1f 41 00\ne8 a6 f4 ff ff\n48 89 44 24 18\n4c 8d 74 24 68\n31 c0\n48 89 44 24 10\n31 db\n45 31 ed\n31 c9\neb 0c\nb0 01\n48 89 44 24 10\n44 88 f9\n66 90\n41 89 cf\nba 7e 1f 41 00\nb9 e0 15 41 00\n45 31 c0\n89 ef\n4c 89 e6\ne8 86 f6 ff ff\n83 f8 52\n0f 8e 7c 01 00 00\n83 c0 ad\n83 f8 2d\n0f 87 cd 03 00 00\nb1 01\nff 24 c5 70 14 41 00\n48 8b 05 d1 67 21 00\n48 89 44 24 18\neb ae\n44 88 f9\neb b5\n48 8b 05 be 67 21 00\n48 85 c0\n48 0f 45 d8\neb 99\nc7 44 24 28 01 00 00 00\n44 88 f9\neb 98\nc7 44 24 28 03 00 00 00\n44 88 f9\neb 8b\nc7 44 24 28 02 00 00 00\n44 88 f9\ne9 7b ff ff ff\n4d 85 ed\n74 53\n31 ff\nbe 8b 1f 41 00\nba 05 00 00 00\ne8 a5 f5 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 61 f9 ff ff\ne9 dc 00 00 00\nc6 44 24 4c 01\n44 88 f9\ne9 3f ff ff ff\nc6 44 24 4d 01\n44 88 f9\ne9 32 ff ff ff\nc6 05 6b 67 21 00 01\n44 88 f9\ne9 23 ff ff ff\n48 8b 3d 2c 67 21 00\n4c 89 f6\ne8 c4 e6 00 00\n85 c0\n74 4c\ne8 db f3 ff ff\n8b 00\n89 44 24 08\n31 ff\nbe b1 1f 41 00\nba 05 00 00 00\ne8 34 f5 ff ff\n4d 89 f5\n49 89 c6\n48 8b 35 f7 66 21 00\nbf 04 00 00 00\ne8 0d 8c 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n8b 74 24 08\n4c 89 f2\n4d 89 ee\ne8 d4 f8 ff ff\n8b 84 24 80 00 00 00\nb9 00 f0 00 00\n21 c8\n3d 00 40 00 00\n74 3f\n31 ff\nbe c5 1f 41 00\nba 05 00 00 00\ne8 de f4 ff ff\n4d 89 f5\n49 89 c6\n48 8b 35 a1 66 21 00\nbf 04 00 00 00\ne8 b7 8b 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n4c 89 f2\n4d 89 ee\ne8 80 f8 ff ff\n4c 8b 2d 79 66 21 00\n44 88 f9\ne9 61 fe ff ff\n48 89 5c 24 08\n83 f8 ff\n0f 85 fa 01 00 00\n48 63 05 54 66 21 00\n4c 63 f5\n49 29 c6\n4d 8d 24 c4\n31 c0\n4d 85 ed\n0f 94 c0\n41 39 c6\n0f 8e 37 02 00 00\n45 84 ff\n48 8b 5c 24 18\n48 8b 6c 24 10\n74 72\n4d 85 ed\n74 25\n31 ff\nbe 58 20 41 00\nba 05 00 00 00\ne8 4c f4 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 08 f8 ff ff\n41 83 fe 03\n0f 8c ba 00 00 00\n31 ff\nbe 9e 20 41 00\nba 05 00 00 00\ne8 1d f4 ff ff\n48 89 c3\n49 8b 74 24 10\nbf 04 00 00 00\ne8 fb 8a 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 ca f7 ff ff\nbf 01 00 00 00\ne8 20 fa ff ff\n4d 85 ed\n75 77\n41 83 fe 01\n0f 8e 3f 02 00 00\n4b 8b 7c f4 f8\ne8 07 03 00 00\n84 c0\n74 0f\n4f 8b 6c f4 f8\n49 ff ce\n40 84 ed\n75 57\neb 60\n41 83 fe 03\n7c 41\n45 31 ed\n31 ff\nbe c5 1f 41 00\nba 05 00 00 00\ne8 aa f3 ff ff\n49 89 c7\n4b 8b 74 f4 f8\nbf 04 00 00 00\ne8 88 8a 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n4c 89 fa\ne8 54 f7 ff ff\n40 84 ed\n75 10\neb 19\n41 be 02 00 00 00\n45 31 ed\n40 84 ed\n74 0b\n83 7c 24 28 02\n0f 84 5b 01 00 00\n48 85 db\n74 0f\n48 89 df\ne8 a7 ab 00 00\n48 89 05 90 64 21 00\n40 84 ed\n74 20\n31 ff\nbe 15 21 41 00\nba 05 00 00 00\ne8 3a f3 ff ff\n48 89 c7\n48 8b 74 24 08\ne8 1d 5d 00 00\neb 02\n31 c0\n89 44 24 20\ne8 c0 53 00 00\n4d 85 ed\n74 12\n41 83 fe 02\n7c 25\n48 8d 7c 24 20\ne8 7b 10 00 00\neb 21\n49 8b 3c 24\n49 8b 74 24 08\n48 8d 4c 24 20\n31 d2\ne8 b4 02 00 00\n89 c3\neb 3f\nb3 01\n41 83 fe 01\n75 37\n44 89 f5\nb3 01\n4c 8d 74 24 20\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 8b 3c 24\nba 01 00 00 00\n4c 89 ee\n4c 89 f1\ne8 7c 02 00 00\n20 c3\n49 83 c4 08\n48 ff cd\n75 e1\n80 f3 01\n0f b6 c3\n48 81 c4 f8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n3d 7d ff ff ff\n74 0e\n3d 7e ff ff ff\n75 47\n31 ff\ne8 b4 f8 ff ff\n48 8b 3d 35 64 21 00\n48 8b 0d ae 63 21 00\nbe 4e 1f 41 00\nba e2 1f 41 00\n41 b8 f0 1f 41 00\n41 b9 fc 1f 41 00\nb8 00 00 00 00\n6a 00\n68 0c 20 41 00\ne8 cf a7 00 00\n48 83 c4 10\n31 ff\ne8 f4 f6 ff ff\nbf 01 00 00 00\ne8 6a f8 ff ff\n31 ff\n45 85 f6\n7f 56\nbe 19 20 41 00\nba 05 00 00 00\ne8 24 f2 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 e3 f5 ff ff\nbf 01 00 00 00\ne8 39 f8 ff ff\n31 ff\nbe dc 20 41 00\nba 05 00 00 00\ne8 f8 f1 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 b7 f5 ff ff\nbf 01 00 00 00\ne8 0d f8 ff ff\nbe 2e 20 41 00\nba 05 00 00 00\ne8 ce f1 ff ff\n48 89 c3\n49 8b 34 24\nbf 04 00 00 00\ne8 ad 88 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 7c f5 ff ff\nbf 01 00 00 00\ne8 d2 f7 ff ff\nbf af 20 41 00\nbe bc 20 41 00\nba d4 01 00 00\nb9 c5 20 41 00\ne8 69 f2 ff ff\n'
p1174
S'.text:0000000000402ba0\n.text:0000000000402ba1\n.text:0000000000402ba3\n.text:0000000000402ba5\n.text:0000000000402ba7\n.text:0000000000402ba9\n.text:0000000000402baa\n.text:0000000000402bb1\n.text:0000000000402bb4\n.text:0000000000402bb6\n.text:0000000000402bba\n.text:0000000000402bbf\n.text:0000000000402bc4\n.text:0000000000402bc9\n.text:0000000000402bce\n.text:0000000000402bd3\n.text:0000000000402bd8\n.text:0000000000402bdd\n.text:0000000000402be2\n.text:0000000000402be7\n.text:0000000000402bec\n.text:0000000000402bf1\n.text:0000000000402bf6\n.text:0000000000402bfb\n.text:0000000000402c00\n.text:0000000000402c05\n.text:0000000000402c0a\n.text:0000000000402c0f\n.text:0000000000402c14\n.text:0000000000402c16\n.text:0000000000402c1b\n.text:0000000000402c1d\n.text:0000000000402c20\n.text:0000000000402c22\n.text:0000000000402c24\n.text:0000000000402c26\n.text:0000000000402c2b\n.text:0000000000402c2e\n.text:0000000000402c30\n.text:0000000000402c33\n.text:0000000000402c38\n.text:0000000000402c3d\n.text:0000000000402c40\n.text:0000000000402c42\n.text:0000000000402c45\n.text:0000000000402c4a\n.text:0000000000402c4d\n.text:0000000000402c53\n.text:0000000000402c56\n.text:0000000000402c59\n.text:0000000000402c5f\n.text:0000000000402c61\n.text:0000000000402c68\n.text:0000000000402c6f\n.text:0000000000402c74\n.text:0000000000402c76\n.text:0000000000402c79\n.text:0000000000402c7b\n.text:0000000000402c82\n.text:0000000000402c85\n.text:0000000000402c89\n.text:0000000000402c8b\n.text:0000000000402c93\n.text:0000000000402c96\n.text:0000000000402c98\n.text:0000000000402ca0\n.text:0000000000402ca3\n.text:0000000000402ca5\n.text:0000000000402cad\n.text:0000000000402cb0\n.text:0000000000402cb5\n.text:0000000000402cb8\n.text:0000000000402cba\n.text:0000000000402cbc\n.text:0000000000402cc1\n.text:0000000000402cc6\n.text:0000000000402ccb\n.text:0000000000402cce\n.text:0000000000402cd3\n.text:0000000000402cd5\n.text:0000000000402cd7\n.text:0000000000402cda\n.text:0000000000402cdf\n.text:0000000000402ce4\n.text:0000000000402ce9\n.text:0000000000402cec\n.text:0000000000402cf1\n.text:0000000000402cf6\n.text:0000000000402cf9\n.text:0000000000402cfe\n.text:0000000000402d05\n.text:0000000000402d08\n.text:0000000000402d0d\n.text:0000000000402d14\n.text:0000000000402d17\n.text:0000000000402d1c\n.text:0000000000402d1e\n.text:0000000000402d20\n.text:0000000000402d25\n.text:0000000000402d27\n.text:0000000000402d2b\n.text:0000000000402d2d\n.text:0000000000402d32\n.text:0000000000402d37\n.text:0000000000402d3c\n.text:0000000000402d3f\n.text:0000000000402d42\n.text:0000000000402d49\n.text:0000000000402d4e\n.text:0000000000402d53\n.text:0000000000402d56\n.text:0000000000402d5b\n.text:0000000000402d5d\n.text:0000000000402d61\n.text:0000000000402d64\n.text:0000000000402d67\n.text:0000000000402d6c\n.text:0000000000402d73\n.text:0000000000402d78\n.text:0000000000402d7a\n.text:0000000000402d7f\n.text:0000000000402d81\n.text:0000000000402d83\n.text:0000000000402d88\n.text:0000000000402d8d\n.text:0000000000402d92\n.text:0000000000402d95\n.text:0000000000402d98\n.text:0000000000402d9f\n.text:0000000000402da4\n.text:0000000000402da9\n.text:0000000000402dac\n.text:0000000000402db1\n.text:0000000000402db3\n.text:0000000000402db5\n.text:0000000000402db8\n.text:0000000000402dbb\n.text:0000000000402dc0\n.text:0000000000402dc7\n.text:0000000000402dca\n.text:0000000000402dcf\n.text:0000000000402dd4\n.text:0000000000402dd7\n.text:0000000000402ddd\n.text:0000000000402de4\n.text:0000000000402de7\n.text:0000000000402dea\n.text:0000000000402dee\n.text:0000000000402df0\n.text:0000000000402df3\n.text:0000000000402df6\n.text:0000000000402df9\n.text:0000000000402dff\n.text:0000000000402e02\n.text:0000000000402e07\n.text:0000000000402e0c\n.text:0000000000402e0e\n.text:0000000000402e11\n.text:0000000000402e13\n.text:0000000000402e15\n.text:0000000000402e1a\n.text:0000000000402e1f\n.text:0000000000402e24\n.text:0000000000402e27\n.text:0000000000402e2c\n.text:0000000000402e2e\n.text:0000000000402e30\n.text:0000000000402e33\n.text:0000000000402e38\n.text:0000000000402e3c\n.text:0000000000402e42\n.text:0000000000402e44\n.text:0000000000402e49\n.text:0000000000402e4e\n.text:0000000000402e53\n.text:0000000000402e56\n.text:0000000000402e5b\n.text:0000000000402e60\n.text:0000000000402e65\n.text:0000000000402e68\n.text:0000000000402e6a\n.text:0000000000402e6c\n.text:0000000000402e6e\n.text:0000000000402e71\n.text:0000000000402e76\n.text:0000000000402e7b\n.text:0000000000402e80\n.text:0000000000402e83\n.text:0000000000402e85\n.text:0000000000402e89\n.text:0000000000402e8f\n.text:0000000000402e94\n.text:0000000000402e99\n.text:0000000000402e9b\n.text:0000000000402e9d\n.text:0000000000402ea2\n.text:0000000000402ea5\n.text:0000000000402ea8\n.text:0000000000402eaa\n.text:0000000000402eac\n.text:0000000000402eb0\n.text:0000000000402eb2\n.text:0000000000402eb5\n.text:0000000000402eb7\n.text:0000000000402ebc\n.text:0000000000402ec1\n.text:0000000000402ec6\n.text:0000000000402ec9\n.text:0000000000402ece\n.text:0000000000402ed3\n.text:0000000000402ed8\n.text:0000000000402edb\n.text:0000000000402ee0\n.text:0000000000402ee2\n.text:0000000000402ee4\n.text:0000000000402ee7\n.text:0000000000402eec\n.text:0000000000402eef\n.text:0000000000402ef1\n.text:0000000000402ef3\n.text:0000000000402ef9\n.text:0000000000402efc\n.text:0000000000402eff\n.text:0000000000402f01\n.text:0000000000402f06\n.text:0000000000402f0c\n.text:0000000000402f0f\n.text:0000000000402f11\n.text:0000000000402f14\n.text:0000000000402f19\n.text:0000000000402f20\n.text:0000000000402f23\n.text:0000000000402f25\n.text:0000000000402f27\n.text:0000000000402f2c\n.text:0000000000402f31\n.text:0000000000402f36\n.text:0000000000402f39\n.text:0000000000402f3e\n.text:0000000000402f43\n.text:0000000000402f45\n.text:0000000000402f47\n.text:0000000000402f4b\n.text:0000000000402f50\n.text:0000000000402f53\n.text:0000000000402f55\n.text:0000000000402f59\n.text:0000000000402f5b\n.text:0000000000402f60\n.text:0000000000402f65\n.text:0000000000402f67\n.text:0000000000402f6b\n.text:0000000000402f70\n.text:0000000000402f75\n.text:0000000000402f77\n.text:0000000000402f7c\n.text:0000000000402f7e\n.text:0000000000402f80\n.text:0000000000402f82\n.text:0000000000402f86\n.text:0000000000402f88\n.text:0000000000402f8b\n.text:0000000000402f8d\n.text:0000000000402f92\n.text:0000000000402fa0\n.text:0000000000402fa4\n.text:0000000000402fa9\n.text:0000000000402fac\n.text:0000000000402faf\n.text:0000000000402fb4\n.text:0000000000402fb6\n.text:0000000000402fba\n.text:0000000000402fbd\n.text:0000000000402fbf\n.text:0000000000402fc2\n.text:0000000000402fc5\n.text:0000000000402fcc\n.text:0000000000402fcd\n.text:0000000000402fcf\n.text:0000000000402fd1\n.text:0000000000402fd3\n.text:0000000000402fd5\n.text:0000000000402fd6\n.text:0000000000402fd7\n.text:0000000000402fdc\n.text:0000000000402fde\n.text:0000000000402fe3\n.text:0000000000402fe5\n.text:0000000000402fe7\n.text:0000000000402fec\n.text:0000000000402ff3\n.text:0000000000402ffa\n.text:0000000000402fff\n.text:0000000000403004\n.text:000000000040300a\n.text:0000000000403010\n.text:0000000000403015\n.text:0000000000403017\n.text:000000000040301c\n.text:0000000000403021\n.text:0000000000403025\n.text:0000000000403027\n.text:000000000040302c\n.text:0000000000403031\n.text:0000000000403036\n.text:0000000000403038\n.text:000000000040303b\n.text:000000000040303d\n.text:0000000000403042\n.text:0000000000403047\n.text:000000000040304c\n.text:000000000040304f\n.text:0000000000403051\n.text:0000000000403053\n.text:0000000000403055\n.text:0000000000403058\n.text:000000000040305d\n.text:0000000000403062\n.text:0000000000403067\n.text:0000000000403069\n.text:000000000040306e\n.text:0000000000403073\n.text:0000000000403078\n.text:000000000040307b\n.text:000000000040307d\n.text:000000000040307f\n.text:0000000000403081\n.text:0000000000403084\n.text:0000000000403089\n.text:000000000040308e\n.text:0000000000403093\n.text:0000000000403098\n.text:000000000040309d\n.text:00000000004030a2\n.text:00000000004030a5\n.text:00000000004030a9\n.text:00000000004030ae\n.text:00000000004030b3\n.text:00000000004030b6\n.text:00000000004030b8\n.text:00000000004030ba\n.text:00000000004030bc\n.text:00000000004030bf\n.text:00000000004030c4\n.text:00000000004030c9\n.text:00000000004030ce\n.text:00000000004030d3\n.text:00000000004030d8\n.text:00000000004030dd\n.text:00000000004030e2\n'
p1175
tp1176
sS'c_isupper'
p1177
(S'\n__stdcall c_isupper()\n'
p1178
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p1179
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1180
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p1181
S'.text:0000000000410690\n.text:0000000000410693\n.text:0000000000410696\n.text:0000000000410699\n'
p1182
tp1183
sS'allocate_entry'
p1184
(S'\n__stdcall allocate_entry(Hash_table * table)\n'
p1185
V\u000ahash_entry * allocate_entry(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  \u000a  phVar1 = table->free_entry_list;\u000a  if (phVar1 != (hash_entry *)0x0) {\u000a    table->free_entry_list = phVar1->next;\u000a    return phVar1;\u000a  }\u000a  phVar1 = (hash_entry *)malloc(0x10);\u000a  return phVar1;\u000a}\u000a\u000a
p1186
S'MOV RAX,qword ptr [RDI + 0x48]\nTEST RAX,RAX\nJZ 0x0040a282\nMOV RCX,qword ptr [RAX + 0x8]\nMOV qword ptr [RDI + 0x48],RCX\nRET\nPUSH RAX\nMOV EDI,0x10\nCALL 0x00402540\nADD RSP,0x8\nRET\n'
p1187
S'48 8b 47 48\n48 85 c0\n74 09\n48 8b 48 08\n48 89 4f 48\nc3\n50\nbf 10 00 00 00\ne8 b3 82 ff ff\n48 83 c4 08\nc3\n'
p1188
S'.text:000000000040a270\n.text:000000000040a274\n.text:000000000040a277\n.text:000000000040a279\n.text:000000000040a27d\n.text:000000000040a281\n.text:000000000040a282\n.text:000000000040a283\n.text:000000000040a288\n.text:000000000040a28d\n.text:000000000040a291\n'
p1189
tp1190
sS'direntry_cmp_inode'
p1191
(S'\n__stdcall direntry_cmp_inode(void * a, void * b)\n'
p1192
V\u000aint direntry_cmp_inode(void *a,void *b)\u000a\u000a{\u000a  ulong uVar1;\u000a  uint uVar2;\u000a  bool bVar3;\u000a  \u000a  uVar1 = *(ulong *)((long)a + 8);\u000a  bVar3 = *(ulong *)((long)b + 8) <= uVar1;\u000a  uVar2 = 0xffffffff;\u000a  if (bVar3) {\u000a    uVar2 = (uint)(bVar3 && uVar1 != *(ulong *)((long)b + 8));\u000a  }\u000a  return (int)uVar2;\u000a}\u000a\u000a
p1193
S'MOV RAX,qword ptr [RDI + 0x8]\nXOR ECX,ECX\nCMP RAX,qword ptr [RSI + 0x8]\nSETA CL\nMOV EAX,0xffffffff\nCMOVNC EAX,ECX\nRET\n'
p1194
S'48 8b 47 08\n31 c9\n48 3b 46 08\n0f 97 c1\nb8 ff ff ff ff\n0f 43 c1\nc3\n'
p1195
S'.text:000000000040c450\n.text:000000000040c454\n.text:000000000040c456\n.text:000000000040c45a\n.text:000000000040c45d\n.text:000000000040c462\n.text:000000000040c465\n'
p1196
tp1197
sS'cp_options_default'
p1198
(S'\n__stdcall cp_options_default(cp_options * x)\n'
p1199
V\u000avoid cp_options_default(cp_options *x)\u000a\u000a{\u000a  __uid_t _Var1;\u000a  \u000a  x->reflink_mode = REFLINK_NEVER;\u000a  *(undefined4 *)&x->field_0x34 = 0;\u000a  *(undefined4 *)&x->dest_info = 0;\u000a  *(undefined4 *)((long)&x->dest_info + 4) = 0;\u000a  *(undefined4 *)&x->set_security_context = 0;\u000a  *(undefined4 *)&x->preserve_security_context = 0;\u000a  *(undefined4 *)&x->reduce_diagnostics = 0;\u000a  *(undefined4 *)&x->update = 0;\u000a  x->mode = 0;\u000a  *(undefined4 *)&x->copy_as_regular = 0;\u000a  *(undefined4 *)&x->move_mode = 0;\u000a  *(undefined4 *)&x->preserve_ownership = 0;\u000a  x->backup_type = no_backups;\u000a  x->dereference = 0;\u000a  x->interactive = 0;\u000a  x->sparse_mode = SPARSE_UNUSED;\u000a  x->src_info = (Hash_table *)0x0;\u000a  _Var1 = geteuid();\u000a  *(bool *)&x->owner_privileges = _Var1 == 0;\u000a  *(bool *)&x->chown_privileges = _Var1 == 0;\u000a  return;\u000a}\u000a\u000a
p1200
S'PUSH RBX\nMOV RBX,RDI\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX + 0x30],XMM0\nMOVUPS xmmword ptr [RBX + 0x20],XMM0\nMOVUPS xmmword ptr [RBX + 0x10],XMM0\nMOVUPS xmmword ptr [RBX],XMM0\nMOV qword ptr [RBX + 0x40],0x0\nCALL 0x00402370\nTEST EAX,EAX\nSETZ byte ptr [RBX + 0x1a]\nSETZ byte ptr [RBX + 0x19]\nPOP RBX\nRET\n'
p1201
S'53\n48 89 fb\n0f 57 c0\n0f 11 43 30\n0f 11 43 20\n0f 11 43 10\n0f 11 03\n48 c7 43 40 00 00 00 00\ne8 6d c7 ff ff\n85 c0\n0f 94 43 1a\n0f 94 43 19\n5b\nc3\n'
p1202
S'.text:0000000000405be0\n.text:0000000000405be1\n.text:0000000000405be4\n.text:0000000000405be7\n.text:0000000000405beb\n.text:0000000000405bef\n.text:0000000000405bf3\n.text:0000000000405bf6\n.text:0000000000405bfe\n.text:0000000000405c03\n.text:0000000000405c05\n.text:0000000000405c09\n.text:0000000000405c0d\n.text:0000000000405c0e\n'
p1203
tp1204
sS'rpmatch'
p1205
(S'\n__stdcall rpmatch(char * __response)\n'
p1206
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint rpmatch(char *__response)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_rpmatch_00619210)();\u000a  return iVar1;\u000a}\u000a\u000a
p1207
S'JMP qword ptr [0x00619210]\n'
p1208
S'ff 25 6a 6d 21 00\n'
p1209
S'.plt:00000000004024a0\n'
p1210
tp1211
sS'file_type'
p1212
(S'\n__stdcall file_type(stat * st)\n'
p1213
V\u000achar * file_type(stat *st)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = "directory";\u000a  switch((st->st_mode & 0xf000) - 0x1000 >> 0xc) {\u000a  case 0:\u000a    pcVar1 = "fifo";\u000a    break;\u000a  case 1:\u000a    pcVar1 = "character special file";\u000a    break;\u000a  default:\u000a    pcVar1 = "weird file";\u000a    break;\u000a  case 3:\u000a    break;\u000a  case 5:\u000a    pcVar1 = "block special file";\u000a    break;\u000a  case 7:\u000a    pcVar1 = "regular file";\u000a    if (st->st_size == 0) {\u000a      pcVar1 = "regular empty file";\u000a    }\u000a    break;\u000a  case 9:\u000a    pcVar1 = "symbolic link";\u000a    break;\u000a  case 0xb:\u000a    pcVar1 = "socket";\u000a  }\u000a  pcVar1 = (char *)dcgettext(0,pcVar1,5);\u000a  return pcVar1;\u000a}\u000a\u000a
p1214
S'MOV EAX,0xf000\nAND EAX,dword ptr [RDI + 0x18]\nADD EAX,0xfffff000\nSHR EAX,0xc\nCMP EAX,0xb\nJA 0x004092bf\nMOV ESI,0x411fd8\nJMP qword ptr [0x4132c0 + RAX*0x8]\nMOV ESI,0x413378\nJMP 0x004092ee\nMOV ESI,0x413361\nJMP 0x004092ee\nMOV ESI,0x413384\nJMP 0x004092ee\nMOV ESI,0x41334e\nJMP 0x004092ee\nMOV ESI,0x413340\nJMP 0x004092ee\nMOV ESI,0x41337d\nJMP 0x004092ee\nCMP qword ptr [RDI + 0x30],0x0\nMOV EAX,0x413320\nMOV ESI,0x413333\nCMOVZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nJMP 0x00402270\n'
p1215
S'b8 00 f0 00 00\n23 47 18\n05 00 f0 ff ff\nc1 e8 0c\n83 f8 0b\n77 1a\nbe d8 1f 41 00\nff 24 c5 c0 32 41 00\nbe 78 33 41 00\neb 36\nbe 61 33 41 00\neb 2f\nbe 84 33 41 00\neb 28\nbe 4e 33 41 00\neb 21\nbe 40 33 41 00\neb 1a\nbe 7d 33 41 00\neb 13\n48 83 7f 30 00\nb8 20 33 41 00\nbe 33 33 41 00\n48 0f 44 f0\n31 ff\nba 05 00 00 00\ne9 76 8f ff ff\n'
p1216
S'.text:0000000000409290\n.text:0000000000409295\n.text:0000000000409298\n.text:000000000040929d\n.text:00000000004092a0\n.text:00000000004092a3\n.text:00000000004092a5\n.text:00000000004092aa\n.text:00000000004092b1\n.text:00000000004092b6\n.text:00000000004092b8\n.text:00000000004092bd\n.text:00000000004092bf\n.text:00000000004092c4\n.text:00000000004092c6\n.text:00000000004092cb\n.text:00000000004092cd\n.text:00000000004092d2\n.text:00000000004092d4\n.text:00000000004092d9\n.text:00000000004092db\n.text:00000000004092e0\n.text:00000000004092e5\n.text:00000000004092ea\n.text:00000000004092ee\n.text:00000000004092f0\n.text:00000000004092f5\n'
p1217
tp1218
sS'fts_safe_changedir'
p1219
(S'\n__stdcall fts_safe_changedir(FTS * sp, FTSENT * p, char * dir)\n'
p1220
V\u000aint fts_safe_changedir(FTS *sp,FTSENT *p,char *dir)\u000a\u000a{\u000a  uint uVar1;\u000a  _Bool _Var2;\u000a  int __fd;\u000a  int iVar3;\u000a  int *piVar4;\u000a  byte *dir_00;\u000a  int __fd_00;\u000a  bool bVar5;\u000a  stat sb;\u000a  stat local_c0;\u000a  \u000a  __fd_00 = (int)dir;\u000a  if (dir_00 == (byte *)0x0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    __fd = 0x2e - (uint)*dir_00;\u000a    if ((__fd == 0) && (__fd = 0x2e - (uint)dir_00[1], __fd == 0)) {\u000a      __fd = -(uint)dir_00[2];\u000a    }\u000a    bVar5 = __fd == 0;\u000a  }\u000a  uVar1 = sp->fts_options;\u000a  if ((uVar1 & 4) != 0) {\u000a    if (__fd_00 < 0) {\u000a      return 0;\u000a    }\u000a    if ((uVar1 & 0x200) == 0) {\u000a      return 0;\u000a    }\u000a    close(__fd_00);\u000a    return 0;\u000a  }\u000a  if (((__fd_00 < 0) && (bVar5)) && ((uVar1 & 0x200) != 0)) {\u000a    _Var2 = i_ring_empty(&sp->fts_fd_ring);\u000a    if (_Var2 == false) {\u000a      __fd = i_ring_pop(&sp->fts_fd_ring);\u000a      if (-1 < __fd) {\u000a        dir_00 = (byte *)0x0;\u000a        __fd_00 = __fd;\u000a      }\u000a    }\u000a  }\u000a  __fd = __fd_00;\u000a  if ((__fd_00 < 0) && (__fd = diropen(sp,(char *)dir_00), __fd < 0)) {\u000a    return -1;\u000a  }\u000a  if (((*(byte *)&sp->fts_options & 2) == 0) &&\u000a     (((dir_00 == (byte *)0x0 || (*dir_00 != 0x2e)) || ((dir_00[1] != 0x2e || (dir_00[2] != 0))))))\u000a  {\u000aLAB_0040efe1:\u000a    if ((*(byte *)((long)&sp->fts_options + 1) & 2) != 0) {\u000a      cwd_advance_fd(sp);\u000a      return 0;\u000a    }\u000a    iVar3 = fchdir(__fd);\u000a  }\u000a  else {\u000a    iVar3 = fstat(__fd,&local_c0);\u000a    if (iVar3 == 0) {\u000a      if ((p->fts_statp[0].st_dev == local_c0.st_dev) && (p->fts_statp[0].st_ino == local_c0.st_ino)\u000a         ) goto LAB_0040efe1;\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 2;\u000a    }\u000a    iVar3 = -1;\u000a  }\u000a  if (__fd_00 < 0) {\u000a    piVar4 = __errno_location();\u000a    __fd_00 = *piVar4;\u000a    close(__fd);\u000a    *piVar4 = __fd_00;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p1221
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV RBX,RCX\nMOV R13D,EDX\nMOV RBP,RSI\nMOV R14,RDI\nTEST RBX,RBX\nJZ 0x0040ef2b\nMOVZX EDX,byte ptr [RBX]\nMOV ECX,0x2e\nMOV EAX,0x2e\nSUB EAX,EDX\nJNZ 0x0040ef23\nMOVZX EAX,byte ptr [RBX + 0x1]\nSUB ECX,EAX\nMOV EAX,ECX\nJNZ 0x0040ef23\nMOVZX EAX,byte ptr [RBX + 0x2]\nNEG EAX\nTEST EAX,EAX\nSETZ R15B\nJMP 0x0040ef2e\nXOR R15D,R15D\nMOV EAX,dword ptr [R14 + 0x48]\nTEST AL,0x4\nJNZ 0x0040eff9\nTEST R13D,R13D\nJNS 0x0040ef7b\nMOV ECX,R15D\nXOR CL,0x1\nJNZ 0x0040ef7b\nAND EAX,0x200\nJZ 0x0040ef7b\nMOV R12,RBP\nLEA RBP,[R14 + 0x60]\nMOV RDI,RBP\nCALL 0x00410900\nTEST AL,AL\nJNZ 0x0040ef78\nMOV RDI,RBP\nCALL 0x00410950\nXOR ECX,ECX\nTEST EAX,EAX\nCMOVNS RBX,RCX\nCMOVNS R13D,EAX\nMOV R15B,0x1\nMOV RBP,R12\nTEST R13D,R13D\nMOV R12D,R13D\nJNS 0x0040ef9a\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x0040e680\nMOV R12D,EAX\nTEST R12D,R12D\nJS 0x0040f028\nTEST byte ptr [R14 + 0x48],0x2\nJNZ 0x0040efb7\nTEST RBX,RBX\nJZ 0x0040efe1\nCMP byte ptr [RBX],0x2e\nJNZ 0x0040efe1\nCMP byte ptr [RBX + 0x1],0x2e\nJNZ 0x0040efe1\nCMP byte ptr [RBX + 0x2],0x0\nJNZ 0x0040efe1\nLEA RSI,[RSP + 0x8]\nMOV EDI,R12D\nCALL 0x004113f0\nTEST EAX,EAX\nJNZ 0x0040f03a\nMOV RAX,qword ptr [RBP + 0x78]\nCMP RAX,qword ptr [RSP + 0x8]\nJNZ 0x0040f02f\nMOV RAX,qword ptr [0x80 + RBP]\nCMP RAX,qword ptr [RSP + 0x10]\nJNZ 0x0040f02f\nTEST byte ptr [R14 + 0x49],0x2\nJNZ 0x0040f011\nMOV EDI,R12D\nCALL 0x004025b0\nMOV EBX,EAX\nTEST R13D,R13D\nJNS 0x0040f05c\nJMP 0x0040f044\nXOR EBX,EBX\nTEST R13D,R13D\nJS 0x0040f05c\nAND EAX,0x200\nJZ 0x0040f05c\nMOV EDI,R13D\nCALL 0x004023c0\nJMP 0x0040f05c\nXOR EDX,EDX\nTEST R15B,R15B\nSETZ DL\nMOV RDI,R14\nMOV ESI,R12D\nCALL 0x0040f9c0\nXOR EBX,EBX\nJMP 0x0040f05c\nMOV EBX,0xffffffff\nJMP 0x0040f05c\nCALL 0x00402100\nMOV dword ptr [RAX],0x2\nMOV EBX,0xffffffff\nTEST R13D,R13D\nJNS 0x0040f05c\nCALL 0x00402100\nMOV RBP,RAX\nMOV R14D,dword ptr [RBP]\nMOV EDI,R12D\nCALL 0x004023c0\nMOV dword ptr [RBP],R14D\nMOV EAX,EBX\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1222
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n48 89 cb\n41 89 d5\n48 89 f5\n49 89 fe\n48 85 db\n74 29\n0f b6 13\nb9 2e 00 00 00\nb8 2e 00 00 00\n29 d0\n75 10\n0f b6 43 01\n29 c1\n89 c8\n75 06\n0f b6 43 02\nf7 d8\n85 c0\n41 0f 94 c7\neb 03\n45 31 ff\n41 8b 46 48\na8 04\n0f 85 bf 00 00 00\n45 85 ed\n79 3c\n44 89 f9\n80 f1 01\n75 34\n25 00 02 00 00\n74 2d\n49 89 ec\n49 8d 6e 60\n48 89 ef\ne8 a3 19 00 00\n84 c0\n75 17\n48 89 ef\ne8 e7 19 00 00\n31 c9\n85 c0\n48 0f 49 d9\n44 0f 49 e8\n41 b7 01\n4c 89 e5\n45 85 ed\n45 89 ec\n79 17\n4c 89 f7\n48 89 de\ne8 f2 f6 ff ff\n41 89 c4\n45 85 e4\n0f 88 8e 00 00 00\n41 f6 46 48 02\n75 16\n48 85 db\n74 3b\n80 3b 2e\n75 36\n80 7b 01 2e\n75 30\n80 7b 02 00\n75 2a\n48 8d 74 24 08\n44 89 e7\ne8 2c 24 00 00\n85 c0\n75 72\n48 8b 45 78\n48 3b 44 24 08\n75 5c\n48 8b 85 80 00 00 00\n48 3b 44 24 10\n75 4e\n41 f6 46 49 02\n75 29\n44 89 e7\ne8 c0 35 ff ff\n89 c3\n45 85 ed\n79 65\neb 4b\n31 db\n45 85 ed\n78 5c\n25 00 02 00 00\n74 55\n44 89 ef\ne8 b1 33 ff ff\neb 4b\n31 d2\n45 84 ff\n0f 94 c2\n4c 89 f7\n44 89 e6\ne8 9c 09 00 00\n31 db\neb 34\nbb ff ff ff ff\neb 2d\ne8 cc 30 ff ff\nc7 00 02 00 00 00\nbb ff ff ff ff\n45 85 ed\n79 18\ne8 b7 30 ff ff\n48 89 c5\n44 8b 75 00\n44 89 e7\ne8 68 33 ff ff\n44 89 75 00\n89 d8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1223
S'.text:000000000040eee0\n.text:000000000040eee1\n.text:000000000040eee3\n.text:000000000040eee5\n.text:000000000040eee7\n.text:000000000040eee9\n.text:000000000040eeea\n.text:000000000040eef1\n.text:000000000040eef4\n.text:000000000040eef7\n.text:000000000040eefa\n.text:000000000040eefd\n.text:000000000040ef00\n.text:000000000040ef02\n.text:000000000040ef05\n.text:000000000040ef0a\n.text:000000000040ef0f\n.text:000000000040ef11\n.text:000000000040ef13\n.text:000000000040ef17\n.text:000000000040ef19\n.text:000000000040ef1b\n.text:000000000040ef1d\n.text:000000000040ef21\n.text:000000000040ef23\n.text:000000000040ef25\n.text:000000000040ef29\n.text:000000000040ef2b\n.text:000000000040ef2e\n.text:000000000040ef32\n.text:000000000040ef34\n.text:000000000040ef3a\n.text:000000000040ef3d\n.text:000000000040ef3f\n.text:000000000040ef42\n.text:000000000040ef45\n.text:000000000040ef47\n.text:000000000040ef4c\n.text:000000000040ef4e\n.text:000000000040ef51\n.text:000000000040ef55\n.text:000000000040ef58\n.text:000000000040ef5d\n.text:000000000040ef5f\n.text:000000000040ef61\n.text:000000000040ef64\n.text:000000000040ef69\n.text:000000000040ef6b\n.text:000000000040ef6d\n.text:000000000040ef71\n.text:000000000040ef75\n.text:000000000040ef78\n.text:000000000040ef7b\n.text:000000000040ef7e\n.text:000000000040ef81\n.text:000000000040ef83\n.text:000000000040ef86\n.text:000000000040ef89\n.text:000000000040ef8e\n.text:000000000040ef91\n.text:000000000040ef94\n.text:000000000040ef9a\n.text:000000000040ef9f\n.text:000000000040efa1\n.text:000000000040efa4\n.text:000000000040efa6\n.text:000000000040efa9\n.text:000000000040efab\n.text:000000000040efaf\n.text:000000000040efb1\n.text:000000000040efb5\n.text:000000000040efb7\n.text:000000000040efbc\n.text:000000000040efbf\n.text:000000000040efc4\n.text:000000000040efc6\n.text:000000000040efc8\n.text:000000000040efcc\n.text:000000000040efd1\n.text:000000000040efd3\n.text:000000000040efda\n.text:000000000040efdf\n.text:000000000040efe1\n.text:000000000040efe6\n.text:000000000040efe8\n.text:000000000040efeb\n.text:000000000040eff0\n.text:000000000040eff2\n.text:000000000040eff5\n.text:000000000040eff7\n.text:000000000040eff9\n.text:000000000040effb\n.text:000000000040effe\n.text:000000000040f000\n.text:000000000040f005\n.text:000000000040f007\n.text:000000000040f00a\n.text:000000000040f00f\n.text:000000000040f011\n.text:000000000040f013\n.text:000000000040f016\n.text:000000000040f019\n.text:000000000040f01c\n.text:000000000040f01f\n.text:000000000040f024\n.text:000000000040f026\n.text:000000000040f028\n.text:000000000040f02d\n.text:000000000040f02f\n.text:000000000040f034\n.text:000000000040f03a\n.text:000000000040f03f\n.text:000000000040f042\n.text:000000000040f044\n.text:000000000040f049\n.text:000000000040f04c\n.text:000000000040f050\n.text:000000000040f053\n.text:000000000040f058\n.text:000000000040f05c\n.text:000000000040f05e\n.text:000000000040f065\n.text:000000000040f066\n.text:000000000040f068\n.text:000000000040f06a\n.text:000000000040f06c\n.text:000000000040f06e\n.text:000000000040f06f\n'
p1224
tp1225
sS'write_protected_non_symlink'
p1226
(S'\n__stdcall write_protected_non_symlink(char * file, stat * buf)\n'
p1227
V\u000aint write_protected_non_symlink(char *file,stat *buf)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  int iVar3;\u000a  int *piVar4;\u000a  long in_RDX;\u000a  \u000a  _Var1 = can_write_any_file();\u000a  if (_Var1 == false) {\u000a    iVar2 = cache_fstatat();\u000a    iVar3 = -1;\u000a    if (iVar2 == 0) {\u000a      if ((*(uint *)(in_RDX + 0x18) & 0xf000) == 0xa000) {\u000a        iVar3 = 0;\u000a      }\u000a      else {\u000a        iVar2 = faccessat((int)file,(char *)buf,2,0x200);\u000a        iVar3 = 0;\u000a        if (iVar2 != 0) {\u000a          piVar4 = __errno_location();\u000a          iVar3 = -1;\u000a          if (*piVar4 == 0xd) {\u000a            iVar3 = 1;\u000a          }\u000a        }\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar3 = 0;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p1228
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDX\nMOV R14,RSI\nMOV EBP,EDI\nCALL 0x0040d900\nTEST AL,AL\nJZ 0x00403ef9\nXOR EAX,EAX\nJMP 0x00403f56\nMOV EDI,EBP\nMOV RSI,R14\nMOV RDX,RBX\nCALL 0x00403f60\nMOV ECX,EAX\nMOV EAX,0xffffffff\nTEST ECX,ECX\nJNZ 0x00403f56\nMOV EAX,0xf000\nAND EAX,dword ptr [RBX + 0x18]\nCMP EAX,0xa000\nJNZ 0x00403f24\nXOR EAX,EAX\nJMP 0x00403f56\nMOV EDX,0x2\nMOV ECX,0x200\nMOV EDI,EBP\nMOV RSI,R14\nCALL 0x004021b0\nTEST EAX,EAX\nMOV EAX,0x0\nJZ 0x00403f56\nCALL 0x00402100\nCMP dword ptr [RAX],0xd\nMOV ECX,0x1\nMOV EAX,0xffffffff\nCMOVZ EAX,ECX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1229
S'55\n41 56\n53\n48 89 d3\n49 89 f6\n89 fd\ne8 0f 9a 00 00\n84 c0\n74 04\n31 c0\neb 5d\n89 ef\n4c 89 f6\n48 89 da\ne8 5a 00 00 00\n89 c1\nb8 ff ff ff ff\n85 c9\n75 45\nb8 00 f0 00 00\n23 43 18\n3d 00 a0 00 00\n75 04\n31 c0\neb 32\nba 02 00 00 00\nb9 00 02 00 00\n89 ef\n4c 89 f6\ne8 78 e2 ff ff\n85 c0\nb8 00 00 00 00\n74 15\ne8 ba e1 ff ff\n83 38 0d\nb9 01 00 00 00\nb8 ff ff ff ff\n0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p1230
S'.text:0000000000403ee0\n.text:0000000000403ee1\n.text:0000000000403ee3\n.text:0000000000403ee4\n.text:0000000000403ee7\n.text:0000000000403eea\n.text:0000000000403eec\n.text:0000000000403ef1\n.text:0000000000403ef3\n.text:0000000000403ef5\n.text:0000000000403ef7\n.text:0000000000403ef9\n.text:0000000000403efb\n.text:0000000000403efe\n.text:0000000000403f01\n.text:0000000000403f06\n.text:0000000000403f08\n.text:0000000000403f0d\n.text:0000000000403f0f\n.text:0000000000403f11\n.text:0000000000403f16\n.text:0000000000403f19\n.text:0000000000403f1e\n.text:0000000000403f20\n.text:0000000000403f22\n.text:0000000000403f24\n.text:0000000000403f29\n.text:0000000000403f2e\n.text:0000000000403f30\n.text:0000000000403f33\n.text:0000000000403f38\n.text:0000000000403f3a\n.text:0000000000403f3f\n.text:0000000000403f41\n.text:0000000000403f46\n.text:0000000000403f49\n.text:0000000000403f4e\n.text:0000000000403f53\n.text:0000000000403f56\n.text:0000000000403f57\n.text:0000000000403f59\n.text:0000000000403f5a\n'
p1231
tp1232
sS'triple_hash'
p1233
(S'\n__stdcall triple_hash(void * x, size_t table_size)\n'
p1234
V\u000asize_t triple_hash(void *x,size_t table_size)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = hash_pjw(*(void **)x,table_size);\u000a  return (sVar1 ^ *(ulong *)((long)x + 8)) % table_size;\u000a}\u000a\u000a
p1235
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RDI,qword ptr [RBX]\nCALL 0x004108a0\nXOR RAX,qword ptr [RBX + 0x8]\nXOR EDX,EDX\nDIV R14\nMOV RAX,RDX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1236
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n48 8b 3b\ne8 3e 63 00 00\n48 33 43 08\n31 d2\n49 f7 f6\n48 89 d0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1237
S'.text:000000000040a550\n.text:000000000040a552\n.text:000000000040a553\n.text:000000000040a554\n.text:000000000040a557\n.text:000000000040a55a\n.text:000000000040a55d\n.text:000000000040a562\n.text:000000000040a566\n.text:000000000040a568\n.text:000000000040a56b\n.text:000000000040a56e\n.text:000000000040a572\n.text:000000000040a573\n.text:000000000040a575\n'
p1238
tp1239
sS'rotr64'
p1240
(S'\n__stdcall rotr64(uint64_t x)\n'
p1241
V\u000auint64_t rotr64(uint64_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x >> bVar1 | x << 0x40 - bVar1;\u000a}\u000a\u000a
p1242
S'MOV ECX,ESI\nROR RDI,CL\nMOV RAX,RDI\nRET\n'
p1243
S'89 f1\n48 d3 cf\n48 89 f8\nc3\n'
p1244
S'.text:00000000004104c0\n.text:00000000004104c2\n.text:00000000004104c5\n.text:00000000004104c8\n'
p1245
tp1246
sS'read'
p1247
(S'\n__stdcall read(int __fd, void * __buf, size_t __nbytes)\n'
p1248
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000assize_t read(int __fd,void *__buf,size_t __nbytes)\u000a\u000a{\u000a  ssize_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_read_006191c8)();\u000a  return sVar1;\u000a}\u000a\u000a
p1249
S'JMP qword ptr [0x006191c8]\n'
p1250
S'ff 25 b2 6d 21 00\n'
p1251
S'.plt:0000000000402410\n'
p1252
tp1253
sS'set_custom_quoting'
p1254
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p1255
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1256
S'TEST RDI,RDI\nMOV EAX,0x6198e0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x0040a825\nTEST RDX,RDX\nJZ 0x0040a825\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x004020f0\n'
p1257
S'48 85 ff\nb8 e0 98 61 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 c5 78 ff ff\n'
p1258
S'.text:000000000040a800\n.text:000000000040a803\n.text:000000000040a808\n.text:000000000040a80c\n.text:000000000040a812\n.text:000000000040a815\n.text:000000000040a817\n.text:000000000040a81a\n.text:000000000040a81c\n.text:000000000040a820\n.text:000000000040a824\n.text:000000000040a825\n.text:000000000040a826\n'
p1259
tp1260
sS'c_isalpha'
p1261
(S'\n__stdcall c_isalpha()\n'
p1262
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1263
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x004105db\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1264
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1265
S'.text:00000000004105c0\n.text:00000000004105c3\n.text:00000000004105c6\n.text:00000000004105c8\n.text:00000000004105d2\n.text:00000000004105d4\n.text:00000000004105d7\n.text:00000000004105da\n.text:00000000004105db\n.text:00000000004105dd\n'
p1266
tp1267
sS'src_to_dest_hash'
p1268
(S'\n__stdcall src_to_dest_hash(void * x, size_t table_size)\n'
p1269
V\u000asize_t src_to_dest_hash(void *x,size_t table_size)\u000a\u000a{\u000a  return *(ulong *)x % table_size;\u000a}\u000a\u000a
p1270
S'MOV RAX,qword ptr [RDI]\nXOR EDX,EDX\nDIV RSI\nMOV RAX,RDX\nRET\n'
p1271
S'48 8b 07\n31 d2\n48 f7 f6\n48 89 d0\nc3\n'
p1272
S'.text:0000000000408340\n.text:0000000000408343\n.text:0000000000408345\n.text:0000000000408348\n.text:000000000040834b\n'
p1273
tp1274
sS'ftypelet'
p1275
(S'\n__stdcall ftypelet()\n'
p1276
V\u000achar ftypelet(void)\u000a\u000a{\u000a  uint uVar1;\u000a  undefined8 in_RDI;\u000a  \u000a  uVar1 = ((uint)in_RDI & 0xf000) - 0x1000;\u000a  if (uVar1 < 0xc000) {\u000a    return "pc?d?b?-?l?s"[(ulong)(uVar1 >> 0xc)];\u000a  }\u000a  return '?';\u000a}\u000a\u000a
p1277
S'AND EDI,0xf000\nADD EDI,0xfffff000\nCMP EDI,0xbfff\nJA 0x004093ee\nSHR EDI,0xc\nMOV AL,byte ptr [0x41338f + RDI]\nRET\nMOV AL,0x3f\nRET\n'
p1278
S'81 e7 00 f0 00 00\n81 c7 00 f0 ff ff\n81 ff ff bf 00 00\n77 0a\nc1 ef 0c\n8a 87 8f 33 41 00\nc3\nb0 3f\nc3\n'
p1279
S'.text:00000000004093d0\n.text:00000000004093d6\n.text:00000000004093dc\n.text:00000000004093e2\n.text:00000000004093e4\n.text:00000000004093e7\n.text:00000000004093ed\n.text:00000000004093ee\n.text:00000000004093f0\n'
p1280
tp1281
sS'faccessat'
p1282
(S'\n__stdcall faccessat(int __fd, char * __file, int __type, int __flag)\n'
p1283
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint faccessat(int __fd,char *__file,int __type,int __flag)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_faccessat_00619098)();\u000a  return iVar1;\u000a}\u000a\u000a
p1284
S'JMP qword ptr [0x00619098]\n'
p1285
S'ff 25 e2 6e 21 00\n'
p1286
S'.plt:00000000004021b0\n'
p1287
tp1288
sS'geteuid'
p1289
(S'\n__stdcall geteuid()\n'
p1290
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__uid_t geteuid(void)\u000a\u000a{\u000a  __uid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_geteuid_00619178)();\u000a  return _Var1;\u000a}\u000a\u000a
p1291
S'JMP qword ptr [0x00619178]\n'
p1292
S'ff 25 02 6e 21 00\n'
p1293
S'.plt:0000000000402370\n'
p1294
tp1295
sS'rpl_calloc'
p1296
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p1297
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_006191f8)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p1298
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x0040dc1b\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x0040dc20\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x0040dc20\nPUSH RAX\nCALL 0x00402100\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x00402470\n'
p1299
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 ef 44 ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 45 48 ff ff\n'
p1300
S'.text:000000000040dbe0\n.text:000000000040dbe3\n.text:000000000040dbe8\n.text:000000000040dbea\n.text:000000000040dbed\n.text:000000000040dbf2\n.text:000000000040dbf4\n.text:000000000040dbf7\n.text:000000000040dbfb\n.text:000000000040dbfd\n.text:000000000040dc00\n.text:000000000040dc03\n.text:000000000040dc06\n.text:000000000040dc09\n.text:000000000040dc0b\n.text:000000000040dc0c\n.text:000000000040dc11\n.text:000000000040dc17\n.text:000000000040dc19\n.text:000000000040dc1a\n.text:000000000040dc1b\n.text:000000000040dc20\n.text:000000000040dc23\n.text:000000000040dc26\n'
p1301
tp1302
sS'memset'
p1303
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p1304
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_00619170)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1305
S'JMP qword ptr [0x00619170]\n'
p1306
S'ff 25 0a 6e 21 00\n'
p1307
S'.plt:0000000000402360\n'
p1308
tp1309
sS'get_root_dev_ino'
p1310
(S'\n__stdcall get_root_dev_ino(dev_ino * root_d_i)\n'
p1311
V\u000adev_ino * get_root_dev_ino(dev_ino *root_d_i)\u000a\u000a{\u000a  int iVar1;\u000a  stat local_98;\u000a  \u000a  iVar1 = lstat("/",&local_98);\u000a  if (iVar1 == 0) {\u000a    root_d_i->st_ino = local_98.st_ino;\u000a    root_d_i->st_dev = local_98.st_dev;\u000a  }\u000a  else {\u000a    root_d_i = (dev_ino *)0x0;\u000a  }\u000a  return root_d_i;\u000a}\u000a\u000a
p1312
S'PUSH RBX\nSUB RSP,0x90\nMOV RBX,RDI\nMOV RSI,RSP\nMOV EDI,0x414467\nCALL 0x00411400\nTEST EAX,EAX\nJZ 0x0040bfb0\nXOR EBX,EBX\nJMP 0x0040bfc0\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [RBX],RAX\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX + 0x8],RAX\nMOV RAX,RBX\nADD RSP,0x90\nPOP RBX\nRET\n'
p1313
S'53\n48 81 ec 90 00 00 00\n48 89 fb\n48 89 e6\nbf 67 44 41 00\ne8 58 54 00 00\n85 c0\n74 04\n31 db\neb 10\n48 8b 44 24 08\n48 89 03\n48 8b 04 24\n48 89 43 08\n48 89 d8\n48 81 c4 90 00 00 00\n5b\nc3\n'
p1314
S'.text:000000000040bf90\n.text:000000000040bf91\n.text:000000000040bf98\n.text:000000000040bf9b\n.text:000000000040bf9e\n.text:000000000040bfa3\n.text:000000000040bfa8\n.text:000000000040bfaa\n.text:000000000040bfac\n.text:000000000040bfae\n.text:000000000040bfb0\n.text:000000000040bfb5\n.text:000000000040bfb8\n.text:000000000040bfbc\n.text:000000000040bfc0\n.text:000000000040bfc3\n.text:000000000040bfca\n.text:000000000040bfcb\n'
p1315
tp1316
sS'__xargmatch_internal'
p1317
(S'\n__stdcall __xargmatch_internal(char * context, char * arg, char * * arglist, char * vallist, size_t valsize, argmatch_exit_fn * exit_fn)\n'
p1318
V\u000aptrdiff_t __xargmatch_internal\u000a                    (char *context,char *arg,char **arglist,char *vallist,size_t valsize,\u000a                    void (*exit_fn)())\u000a\u000a{\u000a  ptrdiff_t problem;\u000a  \u000a  problem = argmatch(arg,arglist,vallist,valsize);\u000a  if (problem < 0) {\u000a    argmatch_invalid(context,arg,problem);\u000a    argmatch_valid(arglist,vallist,valsize);\u000a    (*exit_fn)();\u000a    problem = -1;\u000a  }\u000a  return problem;\u000a}\u000a\u000a
p1319
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,R9\nMOV R15,R8\nMOV R12,RCX\nMOV R13,RDX\nMOV RBX,RSI\nMOV RBP,RDI\nMOV RDI,RBX\nMOV RSI,R13\nMOV RDX,R12\nMOV RCX,R15\nCALL 0x00410170\nTEST RAX,RAX\nJNS 0x00410429\nMOV RDI,RBP\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x00410270\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nCALL 0x004102e0\nCALL R14\nMOV RAX,-0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1320
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 ce\n4d 89 c7\n49 89 cc\n49 89 d5\n48 89 f3\n48 89 fd\n48 89 df\n4c 89 ee\n4c 89 e2\n4c 89 f9\ne8 72 fd ff ff\n48 85 c0\n79 26\n48 89 ef\n48 89 de\n48 89 c2\ne8 5f fe ff ff\n4c 89 ef\n4c 89 e6\n4c 89 fa\ne8 c1 fe ff ff\n41 ff d6\n48 c7 c0 ff ff ff ff\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1321
S'.text:00000000004103d0\n.text:00000000004103d1\n.text:00000000004103d3\n.text:00000000004103d5\n.text:00000000004103d7\n.text:00000000004103d9\n.text:00000000004103da\n.text:00000000004103db\n.text:00000000004103de\n.text:00000000004103e1\n.text:00000000004103e4\n.text:00000000004103e7\n.text:00000000004103ea\n.text:00000000004103ed\n.text:00000000004103f0\n.text:00000000004103f3\n.text:00000000004103f6\n.text:00000000004103f9\n.text:00000000004103fe\n.text:0000000000410401\n.text:0000000000410403\n.text:0000000000410406\n.text:0000000000410409\n.text:000000000041040c\n.text:0000000000410411\n.text:0000000000410414\n.text:0000000000410417\n.text:000000000041041a\n.text:000000000041041f\n.text:0000000000410422\n.text:0000000000410429\n.text:000000000041042d\n.text:000000000041042e\n.text:0000000000410430\n.text:0000000000410432\n.text:0000000000410434\n.text:0000000000410436\n.text:0000000000410437\n'
p1322
tp1323
sS'dup_safer'
p1324
(S'\n__stdcall dup_safer()\n'
p1325
V\u000aint dup_safer(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 in_RDI;\u000a  \u000a  iVar1 = rpl_fcntl(in_RDI,0,3);\u000a  return iVar1;\u000a}\u000a\u000a
p1326
S'XOR ESI,ESI\nMOV EDX,0x3\nXOR EAX,EAX\nJMP 0x0040dc30\n'
p1327
S'31 f6\nba 03 00 00 00\n31 c0\ne9 12 15 00 00\n'
p1328
S'.text:000000000040c710\n.text:000000000040c712\n.text:000000000040c717\n.text:000000000040c719\n'
p1329
tp1330
sS'xget_version'
p1331
(S'\n__stdcall xget_version(char * context, char * version)\n'
p1332
V\u000abackup_type xget_version(char *context,char *version)\u000a\u000a{\u000a  backup_type bVar1;\u000a  char *version_00;\u000a  \u000a  if ((version != (char *)0x0) && (*version != 0)) {\u000a    bVar1 = get_version(context,version);\u000a    return bVar1;\u000a  }\u000a  version_00 = getenv("VERSION_CONTROL");\u000a  bVar1 = get_version("$VERSION_CONTROL",version_00);\u000a  return bVar1;\u000a}\u000a\u000a
p1333
S'TEST RSI,RSI\nJZ 0x00408c6c\nCMP byte ptr [RSI],0x0\nJZ 0x00408c6c\nJMP 0x00408c20\nPUSH RAX\nMOV EDI,0x4131ed\nCALL 0x004020b0\nMOV EDI,0x4131ec\nMOV RSI,RAX\nPOP RAX\nJMP 0x00408c20\n'
p1334
S'48 85 f6\n74 07\n80 3e 00\n74 02\neb b4\n50\nbf ed 31 41 00\ne8 39 94 ff ff\nbf ec 31 41 00\n48 89 c6\n58\neb 9e\n'
p1335
S'.text:0000000000408c60\n.text:0000000000408c63\n.text:0000000000408c65\n.text:0000000000408c68\n.text:0000000000408c6a\n.text:0000000000408c6c\n.text:0000000000408c6d\n.text:0000000000408c72\n.text:0000000000408c77\n.text:0000000000408c7c\n.text:0000000000408c7f\n.text:0000000000408c80\n'
p1336
tp1337
sS'rotr32'
p1338
(S'\n__stdcall rotr32()\n'
p1339
V\u000auint32_t rotr32(void)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x1f;\u000a  return (uint32_t)(in_EDI >> bVar1 | in_EDI << 0x20 - bVar1);\u000a}\u000a\u000a
p1340
S'MOV ECX,ESI\nROR EDI,CL\nMOV EAX,EDI\nRET\n'
p1341
S'89 f1\nd3 cf\n89 f8\nc3\n'
p1342
S'.text:00000000004104e0\n.text:00000000004104e2\n.text:00000000004104e4\n.text:00000000004104e6\n'
p1343
tp1344
sS'__ctype_b_loc'
p1345
(S'\n__stdcall __ctype_b_loc()\n'
p1346
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_00619380)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p1347
S'JMP qword ptr [0x00619380]\n'
p1348
S'ff 25 fa 6b 21 00\n'
p1349
S'.plt:0000000000402780\n'
p1350
tp1351
sS'fdadvise'
p1352
(S'\n__stdcall fdadvise(int __fd, __off_t __offset, __off_t __len, int __advise)\n'
p1353
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fdadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_posix_fadvise_006191b8)();\u000a  return iVar1;\u000a}\u000a\u000a
p1354
S'JMP 0x004023f0\n'
p1355
S'e9 1b 93 ff ff\n'
p1356
S'.text:00000000004090d0\n'
p1357
tp1358
sS'quotearg'
p1359
(S'\n__stdcall quotearg(char * arg)\n'
p1360
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1361
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x0040b680\n'
p1362
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1363
S'.text:000000000040b860\n.text:000000000040b863\n.text:000000000040b865\n.text:000000000040b868\n'
p1364
tp1365
sS'c_iscntrl'
p1366
(S'\n__stdcall c_iscntrl()\n'
p1367
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1368
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00410608\nRET\nCMP EDI,0x7f\nJZ 0x00410607\nXOR EAX,EAX\nRET\n'
p1369
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1370
S'.text:0000000000410600\n.text:0000000000410602\n.text:0000000000410605\n.text:0000000000410607\n.text:0000000000410608\n.text:000000000041060b\n.text:000000000041060d\n.text:000000000041060f\n'
p1371
tp1372
sS'hash_reset_tuning'
p1373
(S'\n__stdcall hash_reset_tuning(Hash_tuning * tuning)\n'
p1374
V\u000avoid hash_reset_tuning(Hash_tuning *tuning)\u000a\u000a{\u000a  float fVar1;\u000a  float fVar2;\u000a  float fVar3;\u000a  \u000a  *(undefined4 *)&tuning->is_n_buckets = default_tuning._16_4_;\u000a  fVar3 = default_tuning.growth_factor;\u000a  fVar2 = default_tuning.growth_threshold;\u000a  fVar1 = default_tuning.shrink_factor;\u000a  tuning->shrink_threshold = default_tuning.shrink_threshold;\u000a  tuning->shrink_factor = fVar1;\u000a  tuning->growth_threshold = fVar2;\u000a  tuning->growth_factor = fVar3;\u000a  return;\u000a}\u000a\u000a
p1375
S'MOV EAX,dword ptr [0x0041346c]\nMOV dword ptr [RDI + 0x10],EAX\nMOVUPS XMM0,xmmword ptr [0x0041345c]\nMOVUPS xmmword ptr [RDI],XMM0\nRET\n'
p1376
S'8b 05 b6 9a 00 00\n89 47 10\n0f 10 05 9c 9a 00 00\n0f 11 07\nc3\n'
p1377
S'.text:00000000004099b0\n.text:00000000004099b6\n.text:00000000004099b9\n.text:00000000004099c0\n.text:00000000004099c3\n'
p1378
tp1379
sS'c_isblank'
p1380
(S'\n__stdcall c_isblank()\n'
p1381
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1382
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1383
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1384
S'.text:00000000004105f0\n.text:00000000004105f3\n.text:00000000004105f6\n.text:00000000004105f9\n.text:00000000004105fc\n.text:00000000004105fe\n'
p1385
tp1386
sS'utimes'
p1387
(S'\n__stdcall utimes(char * __file, timeval * __tvp)\n'
p1388
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint utimes(char *__file,timeval *__tvp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_utimes_006191e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p1389
S'JMP qword ptr [0x006191e8]\n'
p1390
S'ff 25 92 6d 21 00\n'
p1391
S'.plt:0000000000402450\n'
p1392
tp1393
sS'dest_info_init'
p1394
(S'\n__stdcall dest_info_init(cp_options * x)\n'
p1395
V\u000avoid dest_info_init(cp_options *x)\u000a\u000a{\u000a  Hash_table *pHVar1;\u000a  \u000a  pHVar1 = hash_initialize(0x3d,(Hash_tuning *)0x0,triple_hash,triple_compare,triple_free);\u000a  x->dest_info = pHVar1;\u000a  return;\u000a}\u000a\u000a
p1396
S'PUSH RBX\nMOV RBX,RDI\nMOV EDI,0x3d\nXOR ESI,ESI\nMOV EDX,0x40a550\nMOV ECX,0x40a590\nMOV R8D,0x40a5f0\nCALL 0x004099d0\nMOV qword ptr [RBX + 0x38],RAX\nPOP RBX\nRET\n'
p1397
S'53\n48 89 fb\nbf 3d 00 00 00\n31 f6\nba 50 a5 40 00\nb9 90 a5 40 00\n41 b8 f0 a5 40 00\ne8 d0 59 00 00\n48 89 43 38\n5b\nc3\n'
p1398
S'.text:0000000000403fe0\n.text:0000000000403fe1\n.text:0000000000403fe4\n.text:0000000000403fe9\n.text:0000000000403feb\n.text:0000000000403ff0\n.text:0000000000403ff5\n.text:0000000000403ffb\n.text:0000000000404000\n.text:0000000000404004\n.text:0000000000404005\n'
p1399
tp1400
sS'restore_default_fscreatecon_or_die'
p1401
(S'\n__stdcall restore_default_fscreatecon_or_die()\n'
p1402
V\u000avoid restore_default_fscreatecon_or_die(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  \u000a  iVar2 = setfscreatecon((security_context_t)0x0);\u000a  if (iVar2 != 0) {\u000a    puVar3 = (uint *)__errno_location();\u000a    uVar1 = *puVar3;\u000a    uVar4 = dcgettext(0,"failed to restore the default file creation context",5);\u000a    error(1,(ulong)uVar1,uVar4,uVar4);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1403
S'PUSH RBX\nXOR EDI,EDI\nCALL 0x0040c4c0\nTEST EAX,EAX\nJZ 0x004074b9\nCALL 0x00402100\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x4130e1\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nPOP RBX\nJMP 0x00402640\nPOP RBX\nRET\n'
p1404
S'53\n31 ff\ne8 38 50 00 00\n85 c0\n74 2d\ne8 6f ac ff ff\n8b 18\n31 ff\nbe e1 30 41 00\nba 05 00 00 00\ne8 cc ad ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ca\n5b\ne9 87 b1 ff ff\n5b\nc3\n'
p1405
S'.text:0000000000407480\n.text:0000000000407481\n.text:0000000000407483\n.text:0000000000407488\n.text:000000000040748a\n.text:000000000040748c\n.text:0000000000407491\n.text:0000000000407493\n.text:0000000000407495\n.text:000000000040749a\n.text:000000000040749f\n.text:00000000004074a4\n.text:00000000004074a7\n.text:00000000004074ac\n.text:00000000004074ae\n.text:00000000004074b0\n.text:00000000004074b3\n.text:00000000004074b4\n.text:00000000004074b9\n.text:00000000004074ba\n'
p1406
tp1407
sS'rm_fts'
p1408
(S'\n__stdcall rm_fts(FTS * fts, FTSENT * ent, rm_options * x)\n'
p1409
V\u000aRM_status rm_fts(FTS *fts,FTSENT *ent,rm_options *x)\u000a\u000a{\u000a  ushort uVar1;\u000a  dev_ino *pdVar2;\u000a  _Bool _Var3;\u000a  RM_status RVar4;\u000a  uint uVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  undefined8 uVar8;\u000a  char *file_name;\u000a  ulong uVar9;\u000a  Ternary is_empty_directory;\u000a  int local_3c;\u000a  \u000a  switch(ent->fts_info) {\u000a  case 1:\u000a    if ((x->recursive == false) &&\u000a       ((x->remove_empty_directories == false ||\u000a        (_Var3 = is_empty_dir((char *)(ulong)(uint)fts->fts_cwd_fd), _Var3 == false)))) {\u000a      uVar5 = 0x15;\u000a      if (x->remove_empty_directories != false) {\u000a        uVar5 = 0x27;\u000a      }\u000a      uVar8 = dcgettext(0,"cannot remove %s",5);\u000a      RVar4 = RM_ERROR;\u000a      file_name = quotearg_style((char *)0x4);\u000a      error(0,(ulong)uVar5,uVar8,file_name);\u000a    }\u000a    else {\u000a      if (ent->fts_level == 0) {\u000a        file_name = last_component(ent->fts_accpath);\u000a        _Var3 = dot_or_dotdot(file_name);\u000a        if (_Var3 != false) {\u000a          uVar8 = dcgettext(0,"refusing to remove %s or %s directory: skipping %s",5);\u000a          RVar4 = RM_ERROR;\u000a          file_name = quotearg_n_style((char *)0x0);\u000a          pcVar6 = quotearg_n_style((char *)0x1);\u000a          pcVar7 = quotearg_n_style((char *)0x2);\u000a          error(0,0,uVar8,file_name,pcVar6,pcVar7);\u000a          goto LAB_004037eb;\u000a        }\u000a        pdVar2 = x->root_dev_ino;\u000a        if (((pdVar2 != (dev_ino *)0x0) && (ent->fts_statp[0].st_ino == pdVar2->st_ino)) &&\u000a           (ent->fts_statp[0].st_dev == pdVar2->st_dev)) {\u000a          if ((*ent->fts_path == '/') && (ent->fts_path[1] == 0)) {\u000a            uVar8 = dcgettext(0,"it is dangerous to operate recursively on %s",5);\u000a            file_name = quotearg_style((char *)0x4);\u000a            error(0,0,uVar8,file_name);\u000a          }\u000a          else {\u000a            uVar8 = dcgettext(0,"it is dangerous to operate recursively on %s (same as %s)",5);\u000a            file_name = quotearg_n_style((char *)0x0);\u000a            pcVar6 = quotearg_n_style((char *)0x1);\u000a            error(0,0,uVar8,file_name,pcVar6);\u000a          }\u000a          uVar8 = dcgettext(0,"use --no-preserve-root to override this failsafe",5);\u000a          error(0,0,uVar8,uVar8);\u000a          goto LAB_004036d3;\u000a        }\u000a      }\u000a      RVar4 = prompt(fts,ent,(rm_options *)0x1,(Ternary *)x);\u000a      if ((RVar4 == RM_OK) && (local_3c == 4)) {\u000a        RVar4 = excise(fts,ent,x);\u000a        fts_skip_tree(fts,ent);\u000a      }\u000a      if (RVar4 == RM_OK) {\u000a        return RM_OK;\u000a      }\u000a    }\u000a    mark_ancestor_dirs(ent);\u000aLAB_004037eb:\u000a    fts_skip_tree(fts,ent);\u000a    return RVar4;\u000a  case 2:\u000a    uVar8 = dcgettext(0,\u000a                      "WARNING: Circular directory structure.\u005cnThis almost certainly means that you have a corrupted file system.\u005cnNOTIFY YOUR SYSTEM MANAGER.\u005cnThe following directory is part of the cycle:\u005cn  %s\u005cn"\u000a                      ,5);\u000a    file_name = quotearg_n_style_colon((char *)0x0);\u000a    uVar9 = 0;\u000a    break;\u000a  default:\u000a    uVar8 = dcgettext(0,"unexpected failure: fts_info=%d: %s\u005cnplease report to %s",5);\u000a    uVar1 = ent->fts_info;\u000a    file_name = quotearg_n_style_colon((char *)0x0);\u000a    error(0,0,uVar8,(ulong)uVar1,file_name,"bug-coreutils@gnu.org");\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 6:\u000a    if (((x->one_file_system != false) && (0 < ent->fts_level)) &&\u000a       (ent->fts_statp[0].st_dev != fts->fts_dev)) {\u000a      mark_ancestor_dirs(ent);\u000a      uVar8 = dcgettext(0,"skipping %s, since it\u005c's on a different device",5);\u000a      file_name = quotearg_style((char *)0x4);\u000a      error(0,0,uVar8,file_name);\u000a      return RM_ERROR;\u000a    }\u000a  case 3:\u000a  case 4:\u000a  case 8:\u000a  case 10:\u000a  case 0xb:\u000a  case 0xc:\u000a  case 0xd:\u000a    RVar4 = prompt(fts,ent,(rm_options *)(ulong)((ent->fts_info | 2) == 6),(Ternary *)x);\u000a    if (RVar4 != RM_OK) {\u000a      return RVar4;\u000a    }\u000a    RVar4 = excise(fts,ent,x);\u000a    return RVar4;\u000a  case 7:\u000a    uVar5 = ent->fts_errno;\u000a    uVar8 = dcgettext(0,"traversal failed: %s",5);\u000a    file_name = quotearg_n_style_colon((char *)0x0);\u000a    uVar9 = (ulong)uVar5;\u000a  }\u000a  error(0,uVar9,uVar8,file_name);\u000aLAB_004036d3:\u000a  fts_skip_tree(fts,ent);\u000a  return RM_ERROR;\u000a}\u000a\u000a
p1410
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,RDX\nMOV R15,RSI\nMOV R14,RDI\nMOVZX EAX,word ptr [R15 + 0x70]\nDEC EAX\nMOVZX EAX,AX\nCMP EAX,0xc\nJA 0x004038f0\nJMP qword ptr [0x4123b8 + RAX*0x8]\nMOVZX EBX,word ptr [R15 + 0x70]\nOR EBX,0x2\nXOR EDX,EDX\nCMP EBX,0x6\nSETZ DL\nMOV R8D,0x3\nXOR R9D,R9D\nMOV RDI,R14\nMOV RSI,R15\nMOV RCX,R12\nCALL 0x00403a30\nMOV EBP,EAX\nCMP EBP,0x2\nJNZ 0x004037f6\nMOVZX EAX,BX\nXOR ECX,ECX\nCMP EAX,0x6\nSETZ CL\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,R12\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00403d30\nCMP byte ptr [R12 + 0x9],0x0\nJZ 0x004036e8\nCMP qword ptr [R15 + 0x58],0x0\nJZ 0x0040375d\nLEA R9,[RSP + 0xc]\nMOV EDX,0x1\nMOV R8D,0x2\nMOV RDI,R14\nMOV RSI,R15\nMOV RCX,R12\nCALL 0x00403a30\nMOV EBP,EAX\nCMP EBP,0x2\nJNZ 0x004035ed\nCMP dword ptr [RSP + 0xc],0x4\nJNZ 0x004035ed\nMOV ECX,0x1\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,R12\nCALL 0x00403d30\nMOV EBP,EAX\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x004039e0\nCMP EBP,0x2\nJNZ 0x00403750\nJMP 0x004037f6\nXOR EDI,EDI\nMOV ESI,0x4125a8\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV RDX,qword ptr [R15 + 0x38]\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x0040ba40\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nJMP 0x004036ce\nCMP byte ptr [R12 + 0x8],0x0\nJZ 0x00403531\nCMP qword ptr [R15 + 0x58],0x0\nJLE 0x00403531\nMOV RAX,qword ptr [R15 + 0x78]\nCMP RAX,qword ptr [R14 + 0x18]\nJZ 0x00403531\nMOV RDI,R15\nCALL 0x004039b0\nXOR EDI,EDI\nMOV ESI,0x41257a\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV RSI,qword ptr [R15 + 0x38]\nMOV EBP,0x4\nMOV EDI,0x4\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00402640\nJMP 0x004037f6\nMOV EBX,dword ptr [R15 + 0x40]\nXOR EDI,EDI\nMOV ESI,0x412662\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBP,RAX\nMOV RDX,qword ptr [R15 + 0x38]\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x0040ba40\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00402640\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x004039e0\nMOV EBP,0x4\nJMP 0x004037f6\nCMP byte ptr [R12 + 0xa],0x0\nJZ 0x00403705\nMOV EDI,dword ptr [R14 + 0x2c]\nMOV RSI,qword ptr [R15 + 0x30]\nCALL 0x00403940\nTEST AL,AL\nJNZ 0x00403596\nCMP byte ptr [R12 + 0xa],0x0\nMOV EAX,0x27\nMOV EBX,0x15\nCMOVNZ EBX,EAX\nXOR EDI,EDI\nMOV ESI,0x41249b\nMOV EDX,0x5\nCALL 0x00402270\nMOV R12,RAX\nMOV RSI,qword ptr [R15 + 0x38]\nMOV EBP,0x4\nMOV EDI,0x4\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,R12\nCALL 0x00402640\nMOV RDI,R15\nCALL 0x004039b0\nJMP 0x004037eb\nMOV RDI,qword ptr [R15 + 0x30]\nCALL 0x00409000\nMOV RDI,RAX\nCALL 0x00403a00\nTEST AL,AL\nJZ 0x00403807\nXOR EDI,EDI\nMOV ESI,0x4124ac\nMOV EDX,0x5\nCALL 0x00402270\nMOV qword ptr [RSP + 0x10],RAX\nMOV EBP,0x4\nXOR EDI,EDI\nMOV ESI,0x4\nMOV EDX,0x4124e0\nCALL 0x0040b880\nMOV R13,RAX\nMOV EDI,0x1\nMOV ESI,0x4\nMOV EDX,0x4124df\nCALL 0x0040b880\nMOV R12,RAX\nMOV RDX,qword ptr [R15 + 0x38]\nMOV EDI,0x2\nMOV ESI,0x4\nCALL 0x0040b880\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,R13\nMOV R8,R12\nMOV R9,RBX\nCALL 0x00402640\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x004039e0\nMOV EAX,EBP\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RAX,qword ptr [R12 + 0x10]\nTEST RAX,RAX\nJZ 0x004035a1\nMOV RCX,qword ptr [0x80 + R15]\nCMP RCX,qword ptr [RAX]\nJNZ 0x004035a1\nMOV RCX,qword ptr [R15 + 0x78]\nCMP RCX,qword ptr [RAX + 0x8]\nJNZ 0x004035a1\nMOV RAX,qword ptr [R15 + 0x38]\nCMP byte ptr [RAX],0x2f\nJNZ 0x00403842\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x004038bb\nXOR EDI,EDI\nMOV ESI,0x41250f\nMOV EDX,0x5\nCALL 0x00402270\nMOV R12,RAX\nMOV RDX,qword ptr [R15 + 0x38]\nXOR EDI,EDI\nMOV ESI,0x4\nCALL 0x0040b880\nMOV RBP,RAX\nMOV EDI,0x1\nMOV ESI,0x4\nMOV EDX,0x414467\nCALL 0x0040b880\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R12\nMOV RCX,RBP\nMOV R8,RBX\nCALL 0x00402640\nXOR EDI,EDI\nMOV ESI,0x412549\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402640\nJMP 0x004036d3\nXOR EDI,EDI\nMOV ESI,0x4124e2\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV RSI,qword ptr [R15 + 0x38]\nMOV EDI,0x4\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00402640\nJMP 0x00403894\nXOR EDI,EDI\nMOV ESI,0x412677\nMOV EDX,0x5\nCALL 0x00402270\nMOV R14,RAX\nMOVZX EBP,word ptr [R15 + 0x70]\nMOV RDX,qword ptr [R15 + 0x38]\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x0040ba40\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nMOV R9D,0x4126af\nXOR EAX,EAX\nMOV RDX,R14\nMOV ECX,EBP\nMOV R8,RBX\nCALL 0x00402640\nCALL 0x004020f0\n'
p1411
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 d4\n49 89 f7\n49 89 fe\n41 0f b7 47 70\nff c8\n0f b7 c0\n83 f8 0c\n0f 87 c6 03 00 00\nff 24 c5 b8 23 41 00\n41 0f b7 5f 70\n83 cb 02\n31 d2\n83 fb 06\n0f 94 c2\n41 b8 03 00 00 00\n45 31 c9\n4c 89 f7\n4c 89 fe\n4c 89 e1\ne8 d8 04 00 00\n89 c5\n83 fd 02\n0f 85 93 02 00 00\n0f b7 c3\n31 c9\n83 f8 06\n0f 94 c1\n4c 89 f7\n4c 89 fe\n4c 89 e2\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 a6 07 00 00\n41 80 7c 24 09 00\n0f 84 52 01 00 00\n49 83 7f 58 00\n0f 84 bc 01 00 00\n4c 8d 4c 24 0c\nba 01 00 00 00\n41 b8 02 00 00 00\n4c 89 f7\n4c 89 fe\n4c 89 e1\ne8 71 04 00 00\n89 c5\n83 fd 02\n75 27\n83 7c 24 0c 04\n75 20\nb9 01 00 00 00\n4c 89 f7\n4c 89 fe\n4c 89 e2\ne8 50 07 00 00\n89 c5\n4c 89 f7\n4c 89 fe\ne8 f3 03 00 00\n83 fd 02\n0f 85 5a 01 00 00\ne9 fb 01 00 00\n31 ff\nbe a8 25 41 00\nba 05 00 00 00\ne8 64 ec ff ff\n48 89 c3\n49 8b 57 38\n31 ff\nbe 03 00 00 00\ne8 21 84 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne9 9e 00 00 00\n41 80 7c 24 08 00\n0f 84 f5 fe ff ff\n49 83 7f 58 00\n0f 8e ea fe ff ff\n49 8b 47 78\n49 3b 46 18\n0f 84 dc fe ff ff\n4c 89 ff\ne8 53 03 00 00\n31 ff\nbe 7a 25 41 00\nba 05 00 00 00\ne8 02 ec ff ff\n48 89 c3\n49 8b 77 38\nbd 04 00 00 00\nbf 04 00 00 00\ne8 dc 82 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 ab ef ff ff\ne9 5c 01 00 00\n41 8b 5f 40\n31 ff\nbe 62 26 41 00\nba 05 00 00 00\ne8 c1 eb ff ff\n48 89 c5\n49 8b 57 38\n31 ff\nbe 03 00 00 00\ne8 7e 83 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 6d ef ff ff\n4c 89 f7\n4c 89 fe\ne8 02 03 00 00\nbd 04 00 00 00\ne9 0e 01 00 00\n41 80 7c 24 0a 00\n74 15\n41 8b 7e 2c\n49 8b 77 30\ne8 43 02 00 00\n84 c0\n0f 85 91 fe ff ff\n41 80 7c 24 0a 00\nb8 27 00 00 00\nbb 15 00 00 00\n0f 45 d8\n31 ff\nbe 9b 24 41 00\nba 05 00 00 00\ne8 47 eb ff ff\n49 89 c4\n49 8b 77 38\nbd 04 00 00 00\nbf 04 00 00 00\ne8 21 82 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n4c 89 e2\ne8 f0 ee ff ff\n4c 89 ff\ne8 58 02 00 00\ne9 8e 00 00 00\n49 8b 7f 30\ne8 9a 58 00 00\n48 89 c7\ne8 92 02 00 00\n84 c0\n0f 84 91 00 00 00\n31 ff\nbe ac 24 41 00\nba 05 00 00 00\ne8 e9 ea ff ff\n48 89 44 24 10\nbd 04 00 00 00\n31 ff\nbe 04 00 00 00\nba e0 24 41 00\ne8 de 80 00 00\n49 89 c5\nbf 01 00 00 00\nbe 04 00 00 00\nba df 24 41 00\ne8 c7 80 00 00\n49 89 c4\n49 8b 57 38\nbf 02 00 00 00\nbe 04 00 00 00\ne8 b1 80 00 00\n48 89 c3\n31 ff\n31 f6\n31 c0\n48 8b 54 24 10\n4c 89 e9\n4d 89 e0\n49 89 d9\ne8 55 ee ff ff\n4c 89 f7\n4c 89 fe\ne8 ea 01 00 00\n89 e8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n49 8b 44 24 10\n48 85 c0\n0f 84 8c fd ff ff\n49 8b 8f 80 00 00 00\n48 3b 08\n0f 85 7c fd ff ff\n49 8b 4f 78\n48 3b 48 08\n0f 85 6e fd ff ff\n49 8b 47 38\n80 38 2f\n75 06\n80 78 01 00\n74 79\n31 ff\nbe 0f 25 41 00\nba 05 00 00 00\ne8 1d ea ff ff\n49 89 c4\n49 8b 57 38\n31 ff\nbe 04 00 00 00\ne8 1a 80 00 00\n48 89 c5\nbf 01 00 00 00\nbe 04 00 00 00\nba 67 44 41 00\ne8 03 80 00 00\n48 89 c3\n31 ff\n31 f6\n31 c0\n4c 89 e2\n48 89 e9\n49 89 d8\ne8 ac ed ff ff\n31 ff\nbe 49 25 41 00\nba 05 00 00 00\ne8 cb e9 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 8a ed ff ff\ne9 18 fe ff ff\n31 ff\nbe e2 24 41 00\nba 05 00 00 00\ne8 a4 e9 ff ff\n48 89 c3\n49 8b 77 38\nbf 04 00 00 00\ne8 83 80 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 52 ed ff ff\neb a4\n31 ff\nbe 77 26 41 00\nba 05 00 00 00\ne8 6f e9 ff ff\n49 89 c6\n41 0f b7 6f 70\n49 8b 57 38\n31 ff\nbe 03 00 00 00\ne8 27 81 00 00\n48 89 c3\n31 ff\n31 f6\n41 b9 af 26 41 00\n31 c0\n4c 89 f2\n89 e9\n49 89 d8\ne8 0b ed ff ff\ne8 b6 e7 ff ff\n'
p1412
S'.text:0000000000403500\n.text:0000000000403501\n.text:0000000000403503\n.text:0000000000403505\n.text:0000000000403507\n.text:0000000000403509\n.text:000000000040350a\n.text:000000000040350e\n.text:0000000000403511\n.text:0000000000403514\n.text:0000000000403517\n.text:000000000040351c\n.text:000000000040351e\n.text:0000000000403521\n.text:0000000000403524\n.text:000000000040352a\n.text:0000000000403531\n.text:0000000000403536\n.text:0000000000403539\n.text:000000000040353b\n.text:000000000040353e\n.text:0000000000403541\n.text:0000000000403547\n.text:000000000040354a\n.text:000000000040354d\n.text:0000000000403550\n.text:0000000000403553\n.text:0000000000403558\n.text:000000000040355a\n.text:000000000040355d\n.text:0000000000403563\n.text:0000000000403566\n.text:0000000000403568\n.text:000000000040356b\n.text:000000000040356e\n.text:0000000000403571\n.text:0000000000403574\n.text:0000000000403577\n.text:000000000040357b\n.text:000000000040357c\n.text:000000000040357e\n.text:0000000000403580\n.text:0000000000403582\n.text:0000000000403584\n.text:0000000000403585\n.text:000000000040358a\n.text:0000000000403590\n.text:0000000000403596\n.text:000000000040359b\n.text:00000000004035a1\n.text:00000000004035a6\n.text:00000000004035ab\n.text:00000000004035b1\n.text:00000000004035b4\n.text:00000000004035b7\n.text:00000000004035ba\n.text:00000000004035bf\n.text:00000000004035c1\n.text:00000000004035c4\n.text:00000000004035c6\n.text:00000000004035cb\n.text:00000000004035cd\n.text:00000000004035d2\n.text:00000000004035d5\n.text:00000000004035d8\n.text:00000000004035db\n.text:00000000004035e0\n.text:00000000004035e2\n.text:00000000004035e5\n.text:00000000004035e8\n.text:00000000004035ed\n.text:00000000004035f0\n.text:00000000004035f6\n.text:00000000004035fb\n.text:00000000004035fd\n.text:0000000000403602\n.text:0000000000403607\n.text:000000000040360c\n.text:000000000040360f\n.text:0000000000403613\n.text:0000000000403615\n.text:000000000040361a\n.text:000000000040361f\n.text:0000000000403622\n.text:0000000000403624\n.text:0000000000403626\n.text:0000000000403628\n.text:000000000040362b\n.text:0000000000403630\n.text:0000000000403636\n.text:000000000040363c\n.text:0000000000403641\n.text:0000000000403647\n.text:000000000040364b\n.text:000000000040364f\n.text:0000000000403655\n.text:0000000000403658\n.text:000000000040365d\n.text:000000000040365f\n.text:0000000000403664\n.text:0000000000403669\n.text:000000000040366e\n.text:0000000000403671\n.text:0000000000403675\n.text:000000000040367a\n.text:000000000040367f\n.text:0000000000403684\n.text:0000000000403687\n.text:0000000000403689\n.text:000000000040368b\n.text:000000000040368d\n.text:0000000000403690\n.text:0000000000403695\n.text:000000000040369a\n.text:000000000040369e\n.text:00000000004036a0\n.text:00000000004036a5\n.text:00000000004036aa\n.text:00000000004036af\n.text:00000000004036b2\n.text:00000000004036b6\n.text:00000000004036b8\n.text:00000000004036bd\n.text:00000000004036c2\n.text:00000000004036c5\n.text:00000000004036c7\n.text:00000000004036c9\n.text:00000000004036cb\n.text:00000000004036ce\n.text:00000000004036d3\n.text:00000000004036d6\n.text:00000000004036d9\n.text:00000000004036de\n.text:00000000004036e3\n.text:00000000004036e8\n.text:00000000004036ee\n.text:00000000004036f0\n.text:00000000004036f4\n.text:00000000004036f8\n.text:00000000004036fd\n.text:00000000004036ff\n.text:0000000000403705\n.text:000000000040370b\n.text:0000000000403710\n.text:0000000000403715\n.text:0000000000403718\n.text:000000000040371a\n.text:000000000040371f\n.text:0000000000403724\n.text:0000000000403729\n.text:000000000040372c\n.text:0000000000403730\n.text:0000000000403735\n.text:000000000040373a\n.text:000000000040373f\n.text:0000000000403742\n.text:0000000000403744\n.text:0000000000403746\n.text:0000000000403748\n.text:000000000040374b\n.text:0000000000403750\n.text:0000000000403753\n.text:0000000000403758\n.text:000000000040375d\n.text:0000000000403761\n.text:0000000000403766\n.text:0000000000403769\n.text:000000000040376e\n.text:0000000000403770\n.text:0000000000403776\n.text:0000000000403778\n.text:000000000040377d\n.text:0000000000403782\n.text:0000000000403787\n.text:000000000040378c\n.text:0000000000403791\n.text:0000000000403793\n.text:0000000000403798\n.text:000000000040379d\n.text:00000000004037a2\n.text:00000000004037a5\n.text:00000000004037aa\n.text:00000000004037af\n.text:00000000004037b4\n.text:00000000004037b9\n.text:00000000004037bc\n.text:00000000004037c0\n.text:00000000004037c5\n.text:00000000004037ca\n.text:00000000004037cf\n.text:00000000004037d2\n.text:00000000004037d4\n.text:00000000004037d6\n.text:00000000004037d8\n.text:00000000004037dd\n.text:00000000004037e0\n.text:00000000004037e3\n.text:00000000004037e6\n.text:00000000004037eb\n.text:00000000004037ee\n.text:00000000004037f1\n.text:00000000004037f6\n.text:00000000004037f8\n.text:00000000004037fc\n.text:00000000004037fd\n.text:00000000004037ff\n.text:0000000000403801\n.text:0000000000403803\n.text:0000000000403805\n.text:0000000000403806\n.text:0000000000403807\n.text:000000000040380c\n.text:000000000040380f\n.text:0000000000403815\n.text:000000000040381c\n.text:000000000040381f\n.text:0000000000403825\n.text:0000000000403829\n.text:000000000040382d\n.text:0000000000403833\n.text:0000000000403837\n.text:000000000040383a\n.text:000000000040383c\n.text:0000000000403840\n.text:0000000000403842\n.text:0000000000403844\n.text:0000000000403849\n.text:000000000040384e\n.text:0000000000403853\n.text:0000000000403856\n.text:000000000040385a\n.text:000000000040385c\n.text:0000000000403861\n.text:0000000000403866\n.text:0000000000403869\n.text:000000000040386e\n.text:0000000000403873\n.text:0000000000403878\n.text:000000000040387d\n.text:0000000000403880\n.text:0000000000403882\n.text:0000000000403884\n.text:0000000000403886\n.text:0000000000403889\n.text:000000000040388c\n.text:000000000040388f\n.text:0000000000403894\n.text:0000000000403896\n.text:000000000040389b\n.text:00000000004038a0\n.text:00000000004038a5\n.text:00000000004038a8\n.text:00000000004038aa\n.text:00000000004038ac\n.text:00000000004038ae\n.text:00000000004038b1\n.text:00000000004038b6\n.text:00000000004038bb\n.text:00000000004038bd\n.text:00000000004038c2\n.text:00000000004038c7\n.text:00000000004038cc\n.text:00000000004038cf\n.text:00000000004038d3\n.text:00000000004038d8\n.text:00000000004038dd\n.text:00000000004038e0\n.text:00000000004038e2\n.text:00000000004038e4\n.text:00000000004038e6\n.text:00000000004038e9\n.text:00000000004038ee\n.text:00000000004038f0\n.text:00000000004038f2\n.text:00000000004038f7\n.text:00000000004038fc\n.text:0000000000403901\n.text:0000000000403904\n.text:0000000000403909\n.text:000000000040390d\n.text:000000000040390f\n.text:0000000000403914\n.text:0000000000403919\n.text:000000000040391c\n.text:000000000040391e\n.text:0000000000403920\n.text:0000000000403926\n.text:0000000000403928\n.text:000000000040392b\n.text:000000000040392d\n.text:0000000000403930\n.text:0000000000403935\n'
p1413
tp1414
sS'cycle_check_init'
p1415
(S'\n__stdcall cycle_check_init(cycle_check_state * state)\n'
p1416
V\u000avoid cycle_check_init(cycle_check_state *state)\u000a\u000a{\u000a  state->chdir_counter = 0;\u000a  state->magic = 0x95f616;\u000a  return;\u000a}\u000a\u000a
p1417
S'MOV qword ptr [RDI + 0x10],0x0\nMOV dword ptr [RDI + 0x18],0x95f616\nRET\n'
p1418
S'48 c7 47 10 00 00 00 00\nc7 47 18 16 f6 95 00\nc3\n'
p1419
S'.text:00000000004107c0\n.text:00000000004107c8\n.text:00000000004107cf\n'
p1420
tp1421
sS'chmod'
p1422
(S'\n__stdcall chmod(char * __file, __mode_t __mode)\n'
p1423
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint chmod(char *__file,__mode_t __mode)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_chmod_006192d0)();\u000a  return iVar1;\u000a}\u000a\u000a
p1424
S'JMP qword ptr [0x006192d0]\n'
p1425
S'ff 25 aa 6c 21 00\n'
p1426
S'.plt:0000000000402620\n'
p1427
tp1428
sS'argmatch'
p1429
(S'\n__stdcall argmatch(char * arg, char * * arglist, char * vallist, size_t valsize)\n'
p1430
V\u000aptrdiff_t argmatch(char *arg,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  bool bVar1;\u000a  long lVar2;\u000a  int iVar3;\u000a  size_t __n;\u000a  size_t sVar4;\u000a  long lVar5;\u000a  ptrdiff_t pVar6;\u000a  char *__s2;\u000a  char *__s1;\u000a  long local_50;\u000a  \u000a  __n = strlen(arg);\u000a  __s1 = *arglist;\u000a  if (__s1 == (char *)0x0) {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a  }\u000a  else {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a    lVar5 = 0;\u000a    __s2 = vallist;\u000a    do {\u000a      iVar3 = strncmp(__s1,arg,__n);\u000a      lVar2 = local_50;\u000a      if (iVar3 == 0) {\u000a        sVar4 = strlen(__s1);\u000a        if (sVar4 == __n) {\u000a          return lVar5;\u000a        }\u000a        lVar2 = lVar5;\u000a        if ((local_50 != -1) &&\u000a           ((vallist == (char *)0x0 ||\u000a            (iVar3 = memcmp(vallist + local_50 * valsize,__s2,valsize), lVar2 = local_50, iVar3 != 0\u000a            )))) {\u000a          bVar1 = true;\u000a          lVar2 = local_50;\u000a        }\u000a      }\u000a      local_50 = lVar2;\u000a      __s1 = arglist[lVar5 + 1];\u000a      lVar5 = lVar5 + 1;\u000a      __s2 = __s2 + valsize;\u000a    } while (__s1 != (char *)0x0);\u000a  }\u000a  pVar6 = -2;\u000a  if (!bVar1) {\u000a    pVar6 = local_50;\u000a  }\u000a  return pVar6;\u000a}\u000a\u000a
p1431
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R13,RCX\nMOV R14,RDX\nMOV RBP,RSI\nMOV R12,RDI\nCALL 0x00402290\nMOV RBX,RAX\nMOV qword ptr [RSP + 0x20],RBP\nMOV R15,qword ptr [RBP]\nTEST R15,R15\nJZ 0x00410237\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nMOV qword ptr [RSP + 0x18],R14\nXOR EBP,EBP\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,R15\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x00402120\nTEST EAX,EAX\nJNZ 0x00410220\nMOV RDI,R15\nCALL 0x00402290\nCMP RAX,RBX\nJZ 0x00410259\nCMP qword ptr [RSP + 0x8],-0x1\nJZ 0x00410215\nMOV RAX,qword ptr [RSP + 0x18]\nTEST RAX,RAX\nJZ 0x0041020c\nMOV RDI,qword ptr [RSP + 0x8]\nIMUL RDI,R13\nADD RDI,RAX\nMOV RSI,R14\nMOV RDX,R13\nCALL 0x00402420\nTEST EAX,EAX\nJZ 0x00410220\nMOV AL,0x1\nMOV qword ptr [RSP + 0x10],RAX\nJMP 0x00410220\nMOV qword ptr [RSP + 0x8],RBP\nNOP word ptr [RAX + RAX*0x1]\nMOV RAX,qword ptr [RSP + 0x20]\nMOV R15,qword ptr [RAX + RBP*0x8 + 0x8]\nINC RBP\nADD R14,R13\nTEST R15,R15\nJNZ 0x004101c0\nJMP 0x00410247\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nTEST byte ptr [RSP + 0x10],0x1\nMOV RBP,-0x2\nCMOVZ RBP,qword ptr [RSP + 0x8]\nMOV RAX,RBP\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1432
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 cd\n49 89 d6\n48 89 f5\n49 89 fc\ne8 01 21 ff ff\n48 89 c3\n48 89 6c 24 20\n4c 8b 7d 00\n4d 85 ff\n0f 84 93 00 00 00\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\n4c 89 74 24 18\n31 ed\n0f 1f 44 00 00\n4c 89 ff\n4c 89 e6\n48 89 da\ne8 52 1f ff ff\n85 c0\n75 4e\n4c 89 ff\ne8 b6 20 ff ff\n48 39 d8\n74 7a\n48 83 7c 24 08 ff\n74 2e\n48 8b 44 24 18\n48 85 c0\n74 1b\n48 8b 7c 24 08\n49 0f af fd\n48 01 c7\n4c 89 f6\n4c 89 ea\ne8 18 22 ff ff\n85 c0\n74 14\nb0 01\n48 89 44 24 10\neb 0b\n48 89 6c 24 08\n66 0f 1f 44 00 00\n48 8b 44 24 20\n4c 8b 7c e8 08\n48 ff c5\n4d 01 ee\n4d 85 ff\n75 8b\neb 10\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\nf6 44 24 10 01\n48 c7 c5 fe ff ff ff\n48 0f 44 6c 24 08\n48 89 e8\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1433
S'.text:0000000000410170\n.text:0000000000410171\n.text:0000000000410173\n.text:0000000000410175\n.text:0000000000410177\n.text:0000000000410179\n.text:000000000041017a\n.text:000000000041017e\n.text:0000000000410181\n.text:0000000000410184\n.text:0000000000410187\n.text:000000000041018a\n.text:000000000041018f\n.text:0000000000410192\n.text:0000000000410197\n.text:000000000041019b\n.text:000000000041019e\n.text:00000000004101a4\n.text:00000000004101ad\n.text:00000000004101af\n.text:00000000004101b4\n.text:00000000004101b9\n.text:00000000004101bb\n.text:00000000004101c0\n.text:00000000004101c3\n.text:00000000004101c6\n.text:00000000004101c9\n.text:00000000004101ce\n.text:00000000004101d0\n.text:00000000004101d2\n.text:00000000004101d5\n.text:00000000004101da\n.text:00000000004101dd\n.text:00000000004101df\n.text:00000000004101e5\n.text:00000000004101e7\n.text:00000000004101ec\n.text:00000000004101ef\n.text:00000000004101f1\n.text:00000000004101f6\n.text:00000000004101fa\n.text:00000000004101fd\n.text:0000000000410200\n.text:0000000000410203\n.text:0000000000410208\n.text:000000000041020a\n.text:000000000041020c\n.text:000000000041020e\n.text:0000000000410213\n.text:0000000000410215\n.text:000000000041021a\n.text:0000000000410220\n.text:0000000000410225\n.text:000000000041022a\n.text:000000000041022d\n.text:0000000000410230\n.text:0000000000410233\n.text:0000000000410235\n.text:0000000000410237\n.text:0000000000410240\n.text:0000000000410242\n.text:0000000000410247\n.text:000000000041024c\n.text:0000000000410253\n.text:0000000000410259\n.text:000000000041025c\n.text:0000000000410260\n.text:0000000000410261\n.text:0000000000410263\n.text:0000000000410265\n.text:0000000000410267\n.text:0000000000410269\n.text:000000000041026a\n'
p1434
tp1435
sS'fgetfilecon'
p1436
(S'\n__stdcall fgetfilecon(security_context_t * con)\n'
p1437
V\u000aint fgetfilecon(security_context_t *con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p1438
S'PUSH RAX\nCALL 0x00402100\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p1439
S'50\ne8 ba 5b ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p1440
S'.text:000000000040c540\n.text:000000000040c541\n.text:000000000040c546\n.text:000000000040c54c\n.text:000000000040c551\n.text:000000000040c552\n'
p1441
tp1442
sS'getfilecon'
p1443
(S'\n__stdcall getfilecon(char * file, security_context_t * con)\n'
p1444
V\u000aint getfilecon(char *file,security_context_t *con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p1445
S'PUSH RAX\nCALL 0x00402100\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p1446
S'50\ne8 fa 5b ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p1447
S'.text:000000000040c500\n.text:000000000040c501\n.text:000000000040c506\n.text:000000000040c50c\n.text:000000000040c511\n.text:000000000040c512\n'
p1448
tp1449
sS'openat_save_fail'
p1450
(S'\n__stdcall openat_save_fail()\n'
p1451
V\u000avoid openat_save_fail(uint uParm1)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"unable to record current working directory",5);\u000a  error((ulong)(uint)iVar1,(ulong)uParm1,uVar2,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1452
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBX,EDI\nMOV EBP,dword ptr [0x006193b8]\nXOR EDI,EDI\nMOV ESI,0x41433d\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nXOR EAX,EAX\nMOV EDI,EBP\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00402640\nCALL 0x004020f0\n'
p1453
S'55\n53\n50\n89 fb\n8b 2d ed 86 20 00\n31 ff\nbe 3d 43 41 00\nba 05 00 00 00\ne8 94 15 ff ff\n48 89 c1\n31 c0\n89 ef\n89 de\n48 89 ca\ne8 53 19 ff ff\ne8 fe 13 ff ff\n'
p1454
S'.text:0000000000410cc0\n.text:0000000000410cc1\n.text:0000000000410cc2\n.text:0000000000410cc3\n.text:0000000000410cc5\n.text:0000000000410ccb\n.text:0000000000410ccd\n.text:0000000000410cd2\n.text:0000000000410cd7\n.text:0000000000410cdc\n.text:0000000000410cdf\n.text:0000000000410ce1\n.text:0000000000410ce3\n.text:0000000000410ce5\n.text:0000000000410ce8\n.text:0000000000410ced\n'
p1455
tp1456
sS'getfscreatecon'
p1457
(S'\n__stdcall getfscreatecon(security_context_t * con)\n'
p1458
V\u000aint getfscreatecon(security_context_t *con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p1459
S'PUSH RAX\nCALL 0x00402100\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p1460
S'50\ne8 5a 5c ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p1461
S'.text:000000000040c4a0\n.text:000000000040c4a1\n.text:000000000040c4a6\n.text:000000000040c4ac\n.text:000000000040c4b1\n.text:000000000040c4b2\n'
p1462
tp1463
sS'lchown'
p1464
(S'\n__stdcall lchown(char * __file, __uid_t __owner, __gid_t __group)\n'
p1465
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint lchown(char *__file,__uid_t __owner,__gid_t __group)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_lchown_00619288)();\u000a  return iVar1;\u000a}\u000a\u000a
p1466
S'JMP qword ptr [0x00619288]\n'
p1467
S'ff 25 f2 6c 21 00\n'
p1468
S'.plt:0000000000402590\n'
p1469
tp1470
sS'rpl_fcntl'
p1471
(S'\n__stdcall rpl_fcntl()\n'
p1472
V\u000a/* WARNING: Removing unreachable block (ram,0x0040dceb) */\u000a/* WARNING: Removing unreachable block (ram,0x0040dd54) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff38 : 0x0040dcf9 */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint rpl_fcntl(void...)\u000a\u000a{\u000a  int have_dupfd_cloexec;\u000a  int __fd;\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  int __cmd;\u000a  uint __fd_00;\u000a  va_list arg;\u000a  ulong local_c8;\u000a  \u000a  if (__cmd == 0x406) {\u000a    if (have_dupfd_cloexec < 0) {\u000a      __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a    }\u000a    else {\u000a      __fd = fcntl(__fd_00,0x406,local_c8 & 0xffffffff);\u000a      have_dupfd_cloexec = 1;\u000a      if ((__fd < 0) && (piVar3 = __errno_location(), *piVar3 == 0x16)) {\u000a        __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a        have_dupfd_cloexec = -1;\u000a        if (__fd < 0) {\u000a          return __fd;\u000a        }\u000a      }\u000a    }\u000a    if (((-1 < __fd) && (have_dupfd_cloexec == -1)) &&\u000a       ((uVar1 = fcntl(__fd,1), (int)uVar1 < 0 ||\u000a        (iVar2 = fcntl(__fd,2,(ulong)(uVar1 | 1),(ulong)(uVar1 | 1)), iVar2 == -1)))) {\u000a      piVar3 = __errno_location();\u000a      iVar2 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar2;\u000a      __fd = -1;\u000a    }\u000a  }\u000a  else {\u000a    __fd = fcntl(__fd_00,__cmd,local_c8);\u000a  }\u000a  return __fd;\u000a}\u000a\u000a
p1473
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0xd8\nMOV R14D,EDI\nTEST AL,AL\nJZ 0x0040dc7b\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0x100 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RAX,dword ptr [RSP]\nCMP ESI,0x406\nJNZ 0x0040dcd6\nCMP EAX,0x28\nJA 0x0040dceb\nMOV RCX,qword ptr [RSP + 0x10]\nADD RCX,RAX\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x0040dcf9\nCMP EAX,0x28\nJA 0x0040dd54\nMOV RCX,RAX\nADD RCX,qword ptr [RSP + 0x10]\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x0040dd62\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV EBX,dword ptr [RCX]\nCMP dword ptr [0x00619a3c],0x0\nJS 0x0040dd73\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x004021d0\nMOV EBP,EAX\nMOV R15D,0x1\nTEST EBP,EBP\nJNS 0x0040dd44\nCALL 0x00402100\nCMP dword ptr [RAX],0x16\nJNZ 0x0040dd44\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x0040dc30\nMOV EBP,EAX\nMOV R15D,0xffffffff\nTEST EBP,EBP\nJS 0x0040ddd6\nMOV dword ptr [0x00619a3c],R15D\nTEST EBP,EBP\nJNS 0x0040dd87\nJMP 0x0040ddd6\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RDX,qword ptr [RCX]\nXOR EAX,EAX\nMOV EDI,R14D\nCALL 0x004021d0\nMOV EBP,EAX\nJMP 0x0040ddd6\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x0040dc30\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0040ddd6\nCMP dword ptr [0x00619a3c],-0x1\nJNZ 0x0040ddd6\nMOV ESI,0x1\nXOR EAX,EAX\nMOV EDI,EBP\nCALL 0x004021d0\nMOV ECX,EAX\nTEST ECX,ECX\nJS 0x0040ddbc\nOR ECX,0x1\nMOV ESI,0x2\nXOR EAX,EAX\nMOV EDI,EBP\nMOV EDX,ECX\nCALL 0x004021d0\nCMP EAX,-0x1\nJNZ 0x0040ddd6\nCALL 0x00402100\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x004023c0\nMOV dword ptr [RBX],R14D\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0xd8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1474
S'55\n41 57\n41 56\n53\n48 81 ec d8 00 00 00\n41 89 fe\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 00 01 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 04 24\n81 fe 06 04 00 00\n75 15\n83 f8 28\n77 25\n48 8b 4c 24 10\n48 01 c1\n8d 40 08\n89 04 24\neb 23\n83 f8 28\n77 79\n48 89 c1\n48 03 4c 24 10\n8d 40 08\n89 04 24\neb 77\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n8b 19\n83 3d 3a bd 20 00 00\n78 6f\n31 c0\n44 89 f7\n89 da\ne8 c0 44 ff ff\n89 c5\n41 bf 01 00 00 00\n85 ed\n79 28\ne8 df 43 ff ff\n83 38 16\n75 1e\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 fc fe ff ff\n89 c5\n41 bf ff ff ff ff\n85 ed\n0f 88 92 00 00 00\n44 89 3d f1 bc 20 00\n85 ed\n79 38\ne9 82 00 00 00\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n48 8b 11\n31 c0\n44 89 f7\ne8 61 44 ff ff\n89 c5\neb 63\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 af fe ff ff\n89 c5\n85 ed\n78 4f\n83 3d ae bc 20 00 ff\n75 46\nbe 01 00 00 00\n31 c0\n89 ef\ne8 32 44 ff ff\n89 c1\n85 c9\n78 18\n83 c9 01\nbe 02 00 00 00\n31 c0\n89 ef\n89 ca\ne8 19 44 ff ff\n83 f8 ff\n75 1a\ne8 3f 43 ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 f2 45 ff ff\n44 89 33\nbd ff ff ff ff\n89 e8\n48 81 c4 d8 00 00 00\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1475
S'.text:000000000040dc30\n.text:000000000040dc31\n.text:000000000040dc33\n.text:000000000040dc35\n.text:000000000040dc36\n.text:000000000040dc3d\n.text:000000000040dc40\n.text:000000000040dc42\n.text:000000000040dc44\n.text:000000000040dc49\n.text:000000000040dc4e\n.text:000000000040dc53\n.text:000000000040dc5b\n.text:000000000040dc63\n.text:000000000040dc6b\n.text:000000000040dc73\n.text:000000000040dc7b\n.text:000000000040dc80\n.text:000000000040dc85\n.text:000000000040dc8a\n.text:000000000040dc8f\n.text:000000000040dc94\n.text:000000000040dc99\n.text:000000000040dca1\n.text:000000000040dca6\n.text:000000000040dcae\n.text:000000000040dcb5\n.text:000000000040dcb9\n.text:000000000040dcbf\n.text:000000000040dcc1\n.text:000000000040dcc4\n.text:000000000040dcc6\n.text:000000000040dccb\n.text:000000000040dcce\n.text:000000000040dcd1\n.text:000000000040dcd4\n.text:000000000040dcd6\n.text:000000000040dcd9\n.text:000000000040dcdb\n.text:000000000040dcde\n.text:000000000040dce3\n.text:000000000040dce6\n.text:000000000040dce9\n.text:000000000040dceb\n.text:000000000040dcf0\n.text:000000000040dcf4\n.text:000000000040dcf9\n.text:000000000040dcfb\n.text:000000000040dd02\n.text:000000000040dd04\n.text:000000000040dd06\n.text:000000000040dd09\n.text:000000000040dd0b\n.text:000000000040dd10\n.text:000000000040dd12\n.text:000000000040dd18\n.text:000000000040dd1a\n.text:000000000040dd1c\n.text:000000000040dd21\n.text:000000000040dd24\n.text:000000000040dd26\n.text:000000000040dd28\n.text:000000000040dd2a\n.text:000000000040dd2d\n.text:000000000040dd2f\n.text:000000000040dd34\n.text:000000000040dd36\n.text:000000000040dd3c\n.text:000000000040dd3e\n.text:000000000040dd44\n.text:000000000040dd4b\n.text:000000000040dd4d\n.text:000000000040dd4f\n.text:000000000040dd54\n.text:000000000040dd59\n.text:000000000040dd5d\n.text:000000000040dd62\n.text:000000000040dd65\n.text:000000000040dd67\n.text:000000000040dd6a\n.text:000000000040dd6f\n.text:000000000040dd71\n.text:000000000040dd73\n.text:000000000040dd75\n.text:000000000040dd77\n.text:000000000040dd7a\n.text:000000000040dd7c\n.text:000000000040dd81\n.text:000000000040dd83\n.text:000000000040dd85\n.text:000000000040dd87\n.text:000000000040dd8e\n.text:000000000040dd90\n.text:000000000040dd95\n.text:000000000040dd97\n.text:000000000040dd99\n.text:000000000040dd9e\n.text:000000000040dda0\n.text:000000000040dda2\n.text:000000000040dda4\n.text:000000000040dda7\n.text:000000000040ddac\n.text:000000000040ddae\n.text:000000000040ddb0\n.text:000000000040ddb2\n.text:000000000040ddb7\n.text:000000000040ddba\n.text:000000000040ddbc\n.text:000000000040ddc1\n.text:000000000040ddc4\n.text:000000000040ddc7\n.text:000000000040ddc9\n.text:000000000040ddce\n.text:000000000040ddd1\n.text:000000000040ddd6\n.text:000000000040ddd8\n.text:000000000040dddf\n.text:000000000040dde0\n.text:000000000040dde2\n.text:000000000040dde4\n.text:000000000040dde5\n'
p1476
tp1477
sS'__fpending'
p1478
(S'\n__stdcall __fpending()\n'
p1479
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_00619068)();\u000a  return;\u000a}\u000a\u000a
p1480
S'JMP qword ptr [0x00619068]\n'
p1481
S'ff 25 12 6f 21 00\n'
p1482
S'.plt:0000000000402150\n'
p1483
tp1484
sS'rmdir'
p1485
(S'\n__stdcall rmdir(char * __path)\n'
p1486
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint rmdir(char *__path)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_rmdir_006190f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p1487
S'JMP qword ptr [0x006190f0]\n'
p1488
S'ff 25 8a 6e 21 00\n'
p1489
S'.plt:0000000000402260\n'
p1490
tp1491
sS'rpl_fclose'
p1492
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p1493
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00411209;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00411209:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p1494
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x00402500\nTEST EAX,EAX\nJS 0x00411209\nMOV RDI,RBX\nCALL 0x004025a0\nTEST EAX,EAX\nJZ 0x004111d7\nMOV RDI,RBX\nCALL 0x00402500\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x00402330\nCMP RAX,-0x1\nJZ 0x00411209\nMOV RDI,RBX\nCALL 0x0040ddf0\nTEST EAX,EAX\nJZ 0x00411209\nCALL 0x00402100\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x00402220\nTEST EBP,EBP\nJZ 0x00411202\nCALL 0x00402100\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00402220\n'
p1495
S'55\n53\n50\n48 89 fb\ne8 55 13 ff ff\n85 c0\n78 5a\n48 89 df\ne8 e9 13 ff ff\n85 c0\n74 1c\n48 89 df\ne8 3d 13 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 5f 11 ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 11 cc ff ff\n85 c0\n74 26\ne8 18 0f ff ff\n8b 28\n48 89 df\ne8 2e 10 ff ff\n85 ed\n74 0c\ne8 05 0f ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 09 10 ff ff\n'
p1496
S'.text:00000000004111a0\n.text:00000000004111a1\n.text:00000000004111a2\n.text:00000000004111a3\n.text:00000000004111a6\n.text:00000000004111ab\n.text:00000000004111ad\n.text:00000000004111af\n.text:00000000004111b2\n.text:00000000004111b7\n.text:00000000004111b9\n.text:00000000004111bb\n.text:00000000004111be\n.text:00000000004111c3\n.text:00000000004111c5\n.text:00000000004111ca\n.text:00000000004111cc\n.text:00000000004111d1\n.text:00000000004111d5\n.text:00000000004111d7\n.text:00000000004111da\n.text:00000000004111df\n.text:00000000004111e1\n.text:00000000004111e3\n.text:00000000004111e8\n.text:00000000004111ea\n.text:00000000004111ed\n.text:00000000004111f2\n.text:00000000004111f4\n.text:00000000004111f6\n.text:00000000004111fb\n.text:00000000004111fd\n.text:0000000000411202\n.text:0000000000411206\n.text:0000000000411207\n.text:0000000000411208\n.text:0000000000411209\n.text:000000000041120c\n.text:0000000000411210\n.text:0000000000411211\n.text:0000000000411212\n'
p1497
tp1498
sS'xnrealloc'
p1499
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p1500
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1501
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x0040d984\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x0040d990\nPUSH RAX\nCALL 0x0040dae0\n'
p1502
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p1503
S'.text:000000000040d970\n.text:000000000040d973\n.text:000000000040d976\n.text:000000000040d979\n.text:000000000040d97b\n.text:000000000040d97f\n.text:000000000040d982\n.text:000000000040d984\n.text:000000000040d985\n'
p1504
tp1505
sS'mfile_name_concat'
p1506
(S'\n__stdcall mfile_name_concat(char * dir, char * abase, char * * base_in_result)\n'
p1507
V\u000achar * mfile_name_concat(char *dir,char *abase,char **base_in_result)\u000a\u000a{\u000a  char *name;\u000a  size_t sVar1;\u000a  char *__s;\u000a  size_t sVar2;\u000a  undefined *puVar3;\u000a  long lVar4;\u000a  char *pcVar5;\u000a  bool bVar6;\u000a  \u000a  name = last_component(dir);\u000a  sVar1 = base_len(name);\u000a  if (sVar1 == 0) {\u000a    bVar6 = false;\u000a  }\u000a  else {\u000a    bVar6 = name[sVar1 - 1] != '/';\u000a  }\u000a  __s = longest_relative_suffix(abase);\u000a  sVar2 = strlen(__s);\u000a  pcVar5 = (char *)malloc((size_t)(name + (sVar1 - (long)dir) + sVar2 + 1 + (ulong)bVar6));\u000a  if (pcVar5 == (char *)0x0) {\u000a    pcVar5 = (char *)0x0;\u000a  }\u000a  else {\u000a    puVar3 = (undefined *)__mempcpy_chk(pcVar5,dir,name + (sVar1 - (long)dir),0xffffffffffffffff);\u000a    *puVar3 = 0x2f;\u000a    if (base_in_result != (char **)0x0) {\u000a      lVar4 = 0;\u000a      if (*abase == '/') {\u000a        lVar4 = -1;\u000a      }\u000a      *base_in_result = puVar3 + (ulong)bVar6 + lVar4;\u000a    }\u000a    puVar3 = (undefined *)__mempcpy_chk(puVar3 + (ulong)bVar6,__s,sVar2,0xffffffffffffffff);\u000a    *puVar3 = 0;\u000a  }\u000a  return pcVar5;\u000a}\u000a\u000a
p1508
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV qword ptr [RSP + 0x10],RDX\nMOV R14,RSI\nMOV R12,RDI\nCALL 0x00409000\nMOV RBP,RAX\nMOV RDI,RBP\nCALL 0x00409060\nMOV RBX,RBP\nSUB RBX,R12\nADD RBX,RAX\nTEST RAX,RAX\nJZ 0x00409471\nCMP byte ptr [RBP + RAX*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00409473\nXOR EAX,EAX\nMOVZX R13D,AL\nMOV qword ptr [RSP + 0x8],R14\nMOV RDI,R14\nCALL 0x00409520\nMOV RBP,RAX\nMOV RDI,RBP\nCALL 0x00402290\nMOV R15,RAX\nLEA RAX,[RBX + R13*0x1]\nLEA RDI,[R15 + RAX*0x1 + 0x1]\nCALL 0x00402540\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00409502\nMOV RCX,-0x1\nMOV RDI,R14\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x004020e0\nMOV byte ptr [RAX],0x2f\nADD R13,RAX\nMOV RCX,qword ptr [RSP + 0x10]\nTEST RCX,RCX\nJZ 0x004094e8\nXOR EAX,EAX\nMOV RDX,qword ptr [RSP + 0x8]\nCMP byte ptr [RDX],0x2f\nMOV RDX,-0x1\nCMOVZ RAX,RDX\nADD RAX,R13\nMOV qword ptr [RCX],RAX\nMOV RCX,-0x1\nMOV RDI,R13\nMOV RSI,RBP\nMOV RDX,R15\nCALL 0x004020e0\nMOV byte ptr [RAX],0x0\nJMP 0x00409505\nXOR R14D,R14D\nMOV RAX,R14\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1509
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n48 89 54 24 10\n49 89 f6\n49 89 fc\ne8 b2 fb ff ff\n48 89 c5\n48 89 ef\ne8 07 fc ff ff\n48 89 eb\n4c 29 e3\n48 01 c3\n48 85 c0\n74 0a\n80 7c 05 ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 e8\n4c 89 74 24 08\n4c 89 f7\ne8 9c 00 00 00\n48 89 c5\n48 89 ef\ne8 01 8e ff ff\n49 89 c7\n4a 8d 04 2b\n49 8d 7c 07 01\ne8 a0 90 ff ff\n49 89 c6\n4d 85 f6\n74 5a\n48 c7 c1 ff ff ff ff\n4c 89 f7\n4c 89 e6\n48 89 da\ne8 23 8c ff ff\nc6 00 2f\n49 01 c5\n48 8b 4c 24 10\n48 85 c9\n74 1b\n31 c0\n48 8b 54 24 08\n80 3a 2f\n48 c7 c2 ff ff ff ff\n48 0f 44 c2\n4c 01 e8\n48 89 01\n48 c7 c1 ff ff ff ff\n4c 89 ef\n48 89 ee\n4c 89 fa\ne8 e3 8b ff ff\nc6 00 00\neb 03\n45 31 f6\n4c 89 f0\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1510
S'.text:0000000000409430\n.text:0000000000409431\n.text:0000000000409433\n.text:0000000000409435\n.text:0000000000409437\n.text:0000000000409439\n.text:000000000040943a\n.text:000000000040943e\n.text:0000000000409443\n.text:0000000000409446\n.text:0000000000409449\n.text:000000000040944e\n.text:0000000000409451\n.text:0000000000409454\n.text:0000000000409459\n.text:000000000040945c\n.text:000000000040945f\n.text:0000000000409462\n.text:0000000000409465\n.text:0000000000409467\n.text:000000000040946c\n.text:000000000040946f\n.text:0000000000409471\n.text:0000000000409473\n.text:0000000000409477\n.text:000000000040947c\n.text:000000000040947f\n.text:0000000000409484\n.text:0000000000409487\n.text:000000000040948a\n.text:000000000040948f\n.text:0000000000409492\n.text:0000000000409496\n.text:000000000040949b\n.text:00000000004094a0\n.text:00000000004094a3\n.text:00000000004094a6\n.text:00000000004094a8\n.text:00000000004094af\n.text:00000000004094b2\n.text:00000000004094b5\n.text:00000000004094b8\n.text:00000000004094bd\n.text:00000000004094c0\n.text:00000000004094c3\n.text:00000000004094c8\n.text:00000000004094cb\n.text:00000000004094cd\n.text:00000000004094cf\n.text:00000000004094d4\n.text:00000000004094d7\n.text:00000000004094de\n.text:00000000004094e2\n.text:00000000004094e5\n.text:00000000004094e8\n.text:00000000004094ef\n.text:00000000004094f2\n.text:00000000004094f5\n.text:00000000004094f8\n.text:00000000004094fd\n.text:0000000000409500\n.text:0000000000409502\n.text:0000000000409505\n.text:0000000000409508\n.text:000000000040950c\n.text:000000000040950d\n.text:000000000040950f\n.text:0000000000409511\n.text:0000000000409513\n.text:0000000000409515\n.text:0000000000409516\n'
p1511
tp1512
sS'emit_bug_reporting_address'
p1513
(S'\n__stdcall emit_bug_reporting_address()\n'
p1514
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p1515
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x413cd5\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x4126af\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00402600\nXOR EDI,EDI\nMOV ESI,0x413cea\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x411fe2\nMOV ECX,0x412209\nXOR EAX,EAX\nCALL 0x00402600\nXOR EDI,EDI\nMOV ESI,0x413cfe\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x00619428]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00402440\n'
p1516
S'50\n31 ff\nbe d5 3c 41 00\nba 05 00 00 00\ne8 de 49 ff ff\n48 89 c1\nbf 01 00 00 00\nba af 26 41 00\n31 c0\n48 89 ce\ne8 57 4d ff ff\n31 ff\nbe ea 3c 41 00\nba 05 00 00 00\ne8 b6 49 ff ff\n48 89 c6\nbf 01 00 00 00\nba e2 1f 41 00\nb9 09 22 41 00\n31 c0\ne8 2d 4d ff ff\n31 ff\nbe fe 3c 41 00\nba 05 00 00 00\ne8 8c 49 ff ff\n48 8b 35 3d bb 20 00\n48 89 c7\n58\ne9 4c 4b ff ff\n'
p1517
S'.text:000000000040d880\n.text:000000000040d881\n.text:000000000040d883\n.text:000000000040d888\n.text:000000000040d88d\n.text:000000000040d892\n.text:000000000040d895\n.text:000000000040d89a\n.text:000000000040d89f\n.text:000000000040d8a1\n.text:000000000040d8a4\n.text:000000000040d8a9\n.text:000000000040d8ab\n.text:000000000040d8b0\n.text:000000000040d8b5\n.text:000000000040d8ba\n.text:000000000040d8bd\n.text:000000000040d8c2\n.text:000000000040d8c7\n.text:000000000040d8cc\n.text:000000000040d8ce\n.text:000000000040d8d3\n.text:000000000040d8d5\n.text:000000000040d8da\n.text:000000000040d8df\n.text:000000000040d8e4\n.text:000000000040d8eb\n.text:000000000040d8ee\n.text:000000000040d8ef\n'
p1518
tp1519
sS'get_stat_atime'
p1520
(S'\n__stdcall get_stat_atime(stat * st)\n'
p1521
V\u000atimespec get_stat_atime(stat *st)\u000a\u000a{\u000a  return st->st_atim;\u000a}\u000a\u000a
p1522
S'MOV RAX,qword ptr [RDI + 0x48]\nMOV RDX,qword ptr [RDI + 0x50]\nRET\n'
p1523
S'48 8b 47 48\n48 8b 57 50\nc3\n'
p1524
S'.text:000000000040c6b0\n.text:000000000040c6b4\n.text:000000000040c6b8\n'
p1525
tp1526
sS'xmalloc'
p1527
(S'\n__stdcall xmalloc(size_t n)\n'
p1528
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p1529
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00402540\nTEST RBX,RBX\nJZ 0x0040d963\nTEST RAX,RAX\nJZ 0x0040d965\nPOP RBX\nRET\nCALL 0x0040dae0\n'
p1530
S'53\n48 89 fb\ne8 e7 4b ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p1531
S'.text:000000000040d950\n.text:000000000040d951\n.text:000000000040d954\n.text:000000000040d959\n.text:000000000040d95c\n.text:000000000040d95e\n.text:000000000040d961\n.text:000000000040d963\n.text:000000000040d964\n.text:000000000040d965\n'
p1532
tp1533
sS'quotearg_char_mem'
p1534
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p1535
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1536
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x00619910]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x00619900]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x006198f0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x006198e0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x0040a7a0\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x0040b690\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1537
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d 58 df 20 00\n48 89 4c 24 30\n0f 10 05 3c df 20 00\n0f 29 44 24 20\n0f 10 05 20 df 20 00\n0f 29 44 24 10\n0f 10 05 04 df 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p1538
S'.text:000000000040b9a0\n.text:000000000040b9a2\n.text:000000000040b9a4\n.text:000000000040b9a5\n.text:000000000040b9a9\n.text:000000000040b9ab\n.text:000000000040b9ae\n.text:000000000040b9b1\n.text:000000000040b9b8\n.text:000000000040b9bd\n.text:000000000040b9c4\n.text:000000000040b9c9\n.text:000000000040b9d0\n.text:000000000040b9d5\n.text:000000000040b9dc\n.text:000000000040b9e0\n.text:000000000040b9e3\n.text:000000000040b9e8\n.text:000000000040b9eb\n.text:000000000040b9ed\n.text:000000000040b9f2\n.text:000000000040b9f4\n.text:000000000040b9f7\n.text:000000000040b9fa\n.text:000000000040b9fd\n.text:000000000040ba02\n.text:000000000040ba06\n.text:000000000040ba07\n.text:000000000040ba09\n.text:000000000040ba0b\n'
p1539
tp1540
sS'gettimeofday'
p1541
(S'\n__stdcall gettimeofday(timeval * __tv, __timezone_ptr_t __tz)\n'
p1542
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint gettimeofday(timeval *__tv,__timezone_ptr_t __tz)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_gettimeofday_00619160)();\u000a  return iVar1;\u000a}\u000a\u000a
p1543
S'JMP qword ptr [0x00619160]\n'
p1544
S'ff 25 1a 6e 21 00\n'
p1545
S'.plt:0000000000402340\n'
p1546
tp1547
sS'find_non_slash'
p1548
(S'\n__stdcall find_non_slash(char * s)\n'
p1549
V\u000achar * find_non_slash(char *s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = strspn(s,"/");\u000a  return s + sVar1;\u000a}\u000a\u000a
p1550
S'PUSH RBX\nMOV RBX,RDI\nMOV ESI,0x414467\nCALL 0x004023d0\nADD RAX,RBX\nPOP RBX\nRET\n'
p1551
S'53\n48 89 fb\nbe 67 44 41 00\ne8 82 12 ff ff\n48 01 d8\n5b\nc3\n'
p1552
S'.text:0000000000411140\n.text:0000000000411141\n.text:0000000000411144\n.text:0000000000411149\n.text:000000000041114e\n.text:0000000000411151\n.text:0000000000411152\n'
p1553
tp1554
sS'quotearg_n_style_colon'
p1555
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p1556
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1557
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x0040b8c0\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x0040a7a0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x0040b690\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1558
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p1559
S'.text:000000000040ba40\n.text:000000000040ba41\n.text:000000000040ba43\n.text:000000000040ba44\n.text:000000000040ba48\n.text:000000000040ba4b\n.text:000000000040ba4d\n.text:000000000040ba52\n.text:000000000040ba55\n.text:000000000040ba5a\n.text:000000000040ba5f\n.text:000000000040ba64\n.text:000000000040ba67\n.text:000000000040ba6c\n.text:000000000040ba73\n.text:000000000040ba75\n.text:000000000040ba78\n.text:000000000040ba7b\n.text:000000000040ba80\n.text:000000000040ba84\n.text:000000000040ba85\n.text:000000000040ba87\n.text:000000000040ba88\n'
p1560
tp1561
sS'rotl64'
p1562
(S'\n__stdcall rotl64(uint64_t x)\n'
p1563
V\u000auint64_t rotl64(uint64_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x << bVar1 | x >> 0x40 - bVar1;\u000a}\u000a\u000a
p1564
S'MOV ECX,ESI\nROL RDI,CL\nMOV RAX,RDI\nRET\n'
p1565
S'89 f1\n48 d3 c7\n48 89 f8\nc3\n'
p1566
S'.text:00000000004104b0\n.text:00000000004104b2\n.text:00000000004104b5\n.text:00000000004104b8\n'
p1567
tp1568
sS'record_file'
p1569
(S'\n__stdcall record_file(Hash_table * ht, char * file, stat * stats)\n'
p1570
V\u000avoid record_file(Hash_table *ht,char *file,stat *stats)\u000a\u000a{\u000a  char **entry;\u000a  char *pcVar1;\u000a  char **ppcVar2;\u000a  \u000a  if (ht != (Hash_table *)0x0) {\u000a    entry = (char **)xmalloc(0x18);\u000a    pcVar1 = xstrdup(file);\u000a    *entry = pcVar1;\u000a    entry[1] = (char *)stats->st_ino;\u000a    entry[2] = (char *)stats->st_dev;\u000a    ppcVar2 = (char **)hash_insert(ht,entry);\u000a    if (ppcVar2 == (char **)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die();\u000a    }\u000a    if (ppcVar2 != entry) {\u000a      triple_free(entry);\u000a      return;\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p1571
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDX\nMOV R12,RSI\nMOV R14,RDI\nTEST R14,R14\nJZ 0x00409235\nMOV EDI,0x18\nCALL 0x0040d950\nMOV RBX,RAX\nMOV RDI,R12\nCALL 0x0040dac0\nMOV qword ptr [RBX],RAX\nMOV RAX,qword ptr [R15 + 0x8]\nMOV qword ptr [RBX + 0x8],RAX\nMOV RAX,qword ptr [R15]\nMOV qword ptr [RBX + 0x10],RAX\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x0040a2a0\nTEST RAX,RAX\nJZ 0x00409241\nCMP RAX,RBX\nJZ 0x00409235\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x0040a5f0\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x0040dae0\n'
p1572
S'41 57\n41 56\n41 54\n53\n50\n49 89 d7\n49 89 f4\n49 89 fe\n4d 85 f6\n74 4f\nbf 18 00 00 00\ne8 60 47 00 00\n48 89 c3\n4c 89 e7\ne8 c5 48 00 00\n48 89 03\n49 8b 47 08\n48 89 43 08\n49 8b 07\n48 89 43 10\n4c 89 f7\n48 89 de\ne8 88 10 00 00\n48 85 c0\n74 24\n48 39 d8\n74 13\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 bb 13 00 00\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 9a 48 00 00\n'
p1573
S'.text:00000000004091d0\n.text:00000000004091d2\n.text:00000000004091d4\n.text:00000000004091d6\n.text:00000000004091d7\n.text:00000000004091d8\n.text:00000000004091db\n.text:00000000004091de\n.text:00000000004091e1\n.text:00000000004091e4\n.text:00000000004091e6\n.text:00000000004091eb\n.text:00000000004091f0\n.text:00000000004091f3\n.text:00000000004091f6\n.text:00000000004091fb\n.text:00000000004091fe\n.text:0000000000409202\n.text:0000000000409206\n.text:0000000000409209\n.text:000000000040920d\n.text:0000000000409210\n.text:0000000000409213\n.text:0000000000409218\n.text:000000000040921b\n.text:000000000040921d\n.text:0000000000409220\n.text:0000000000409222\n.text:0000000000409225\n.text:0000000000409229\n.text:000000000040922a\n.text:000000000040922c\n.text:000000000040922e\n.text:0000000000409230\n.text:0000000000409235\n.text:0000000000409239\n.text:000000000040923a\n.text:000000000040923c\n.text:000000000040923e\n.text:0000000000409240\n.text:0000000000409241\n'
p1574
tp1575
sS'fts_children'
p1576
(S'\n__stdcall fts_children(FTS * sp)\n'
p1577
V\u000aFTSENT * fts_children(FTS *sp)\u000a\u000a{\u000a  byte *pbVar1;\u000a  _ftsent *p_Var2;\u000a  int __fd;\u000a  int iVar3;\u000a  int *piVar4;\u000a  FTSENT *pFVar5;\u000a  uint in_ESI;\u000a  \u000a  piVar4 = __errno_location();\u000a  if ((in_ESI | 0x2000) == 0x2000) {\u000a    p_Var2 = sp->fts_cur;\u000a    *piVar4 = 0;\u000a    if ((*(byte *)((long)&sp->fts_options + 1) & 0x40) == 0) {\u000a      if (p_Var2->fts_info != 1) {\u000a        if (p_Var2->fts_info != 9) {\u000a          return (FTSENT *)0x0;\u000a        }\u000a        return (FTSENT *)p_Var2->fts_link;\u000a      }\u000a      if ((FTSENT *)sp->fts_child != (FTSENT *)0x0) {\u000a        fts_lfree((FTSENT *)sp->fts_child);\u000a      }\u000a      if (in_ESI == 0x2000) {\u000a        pbVar1 = (byte *)((long)&sp->fts_options + 1);\u000a        *pbVar1 = *pbVar1 | 0x20;\u000a      }\u000a      if (((p_Var2->fts_level == 0) && (*p_Var2->fts_accpath != '/')) &&\u000a         ((*(byte *)&sp->fts_options & 4) == 0)) {\u000a        __fd = diropen(sp,".");\u000a        if (__fd < 0) {\u000a          sp->fts_child = (_ftsent *)0x0;\u000a          return (FTSENT *)0x0;\u000a        }\u000a        pFVar5 = fts_build(sp);\u000a        *(FTSENT **)&sp->fts_child = pFVar5;\u000a        if ((*(byte *)((long)&sp->fts_options + 1) & 2) == 0) {\u000a          iVar3 = fchdir(__fd);\u000a          if (iVar3 != 0) {\u000a            iVar3 = *piVar4;\u000a            close(__fd);\u000a            *piVar4 = iVar3;\u000a            return (FTSENT *)0x0;\u000a          }\u000a          close(__fd);\u000a        }\u000a        else {\u000a          cwd_advance_fd(sp);\u000a        }\u000a        return (FTSENT *)sp->fts_child;\u000a      }\u000a      pFVar5 = fts_build(sp);\u000a      *(FTSENT **)&sp->fts_child = pFVar5;\u000a      return pFVar5;\u000a    }\u000a  }\u000a  else {\u000a    *piVar4 = 0x16;\u000a  }\u000a  return (FTSENT *)0x0;\u000a}\u000a\u000a
p1578
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV EBP,ESI\nMOV RBX,RDI\nCALL 0x00402100\nMOV R14,RAX\nMOV EAX,EBP\nOR EAX,0x2000\nCMP EAX,0x2000\nJNZ 0x0040fa8f\nMOV R15,qword ptr [RBX]\nMOV dword ptr [R14],0x0\nTEST byte ptr [RBX + 0x49],0x40\nJNZ 0x0040fa96\nMOVZX EAX,word ptr [R15 + 0x70]\nCMP EAX,0x1\nJZ 0x0040faa1\nMOVZX EAX,AX\nCMP EAX,0x9\nJNZ 0x0040fb21\nMOV RAX,qword ptr [R15 + 0x10]\nJMP 0x0040fa98\nMOV dword ptr [R14],0x16\nXOR EAX,EAX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RDI,qword ptr [RBX + 0x8]\nTEST RDI,RDI\nJZ 0x0040faaf\nCALL 0x0040e6e0\nMOV R12D,0x1\nCMP EBP,0x2000\nJNZ 0x0040fac7\nOR byte ptr [RBX + 0x49],0x20\nMOV R12D,0x2\nCMP qword ptr [R15 + 0x58],0x0\nJNZ 0x0040fb28\nMOV RAX,qword ptr [R15 + 0x30]\nCMP byte ptr [RAX],0x2f\nJZ 0x0040fb28\nTEST byte ptr [RBX + 0x48],0x4\nJNZ 0x0040fb28\nMOV ESI,0x4124e0\nMOV RDI,RBX\nCALL 0x0040e680\nMOV R15D,EAX\nTEST R15D,R15D\nJS 0x0040fb3c\nMOV RDI,RBX\nMOV ESI,R12D\nCALL 0x0040f070\nMOV qword ptr [RBX + 0x8],RAX\nTEST byte ptr [RBX + 0x49],0x2\nJNZ 0x0040fb4b\nMOV EDI,R15D\nCALL 0x004025b0\nTEST EAX,EAX\nJZ 0x0040fb5d\nMOV EBX,dword ptr [R14]\nMOV EDI,R15D\nCALL 0x004023c0\nMOV dword ptr [R14],EBX\nXOR EAX,EAX\nJMP 0x0040fa98\nMOV RDI,RBX\nMOV ESI,R12D\nCALL 0x0040f070\nMOV qword ptr [RBX + 0x8],RAX\nJMP 0x0040fa98\nMOV qword ptr [RBX + 0x8],0x0\nXOR EAX,EAX\nJMP 0x0040fa98\nMOV EDX,0x1\nMOV RDI,RBX\nMOV ESI,R15D\nCALL 0x0040f9c0\nJMP 0x0040fb65\nMOV EDI,R15D\nCALL 0x004023c0\nMOV RAX,qword ptr [RBX + 0x8]\nJMP 0x0040fa98\n'
p1579
S'55\n41 57\n41 56\n41 54\n53\n89 f5\n48 89 fb\ne8 ae 26 ff ff\n49 89 c6\n89 e8\n0d 00 20 00 00\n3d 00 20 00 00\n75 2c\n4c 8b 3b\n41 c7 06 00 00 00 00\nf6 43 49 40\n75 23\n41 0f b7 47 70\n83 f8 01\n74 24\n0f b7 c0\n83 f8 09\n0f 85 98 00 00 00\n49 8b 47 10\neb 09\n41 c7 06 16 00 00 00\n31 c0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n48 8b 7b 08\n48 85 ff\n74 05\ne8 31 ec ff ff\n41 bc 01 00 00 00\n81 fd 00 20 00 00\n75 0a\n80 4b 49 20\n41 bc 02 00 00 00\n49 83 7f 58 00\n75 5a\n49 8b 47 30\n80 38 2f\n74 51\nf6 43 48 04\n75 4b\nbe e0 24 41 00\n48 89 df\ne8 96 eb ff ff\n41 89 c7\n45 85 ff\n78 4a\n48 89 df\n44 89 e6\ne8 73 f5 ff ff\n48 89 43 08\nf6 43 49 02\n75 44\n44 89 ff\ne8 a1 2a ff ff\n85 c0\n74 4a\n41 8b 1e\n44 89 ff\ne8 a2 28 ff ff\n41 89 1e\n31 c0\ne9 70 ff ff ff\n48 89 df\n44 89 e6\ne8 3d f5 ff ff\n48 89 43 08\ne9 5c ff ff ff\n48 c7 43 08 00 00 00 00\n31 c0\ne9 4d ff ff ff\nba 01 00 00 00\n48 89 df\n44 89 fe\ne8 65 fe ff ff\neb 08\n44 89 ff\ne8 5b 28 ff ff\n48 8b 43 08\ne9 2a ff ff ff\n'
p1580
S'.text:000000000040fa40\n.text:000000000040fa41\n.text:000000000040fa43\n.text:000000000040fa45\n.text:000000000040fa47\n.text:000000000040fa48\n.text:000000000040fa4a\n.text:000000000040fa4d\n.text:000000000040fa52\n.text:000000000040fa55\n.text:000000000040fa57\n.text:000000000040fa5c\n.text:000000000040fa61\n.text:000000000040fa63\n.text:000000000040fa66\n.text:000000000040fa6d\n.text:000000000040fa71\n.text:000000000040fa73\n.text:000000000040fa78\n.text:000000000040fa7b\n.text:000000000040fa7d\n.text:000000000040fa80\n.text:000000000040fa83\n.text:000000000040fa89\n.text:000000000040fa8d\n.text:000000000040fa8f\n.text:000000000040fa96\n.text:000000000040fa98\n.text:000000000040fa99\n.text:000000000040fa9b\n.text:000000000040fa9d\n.text:000000000040fa9f\n.text:000000000040faa0\n.text:000000000040faa1\n.text:000000000040faa5\n.text:000000000040faa8\n.text:000000000040faaa\n.text:000000000040faaf\n.text:000000000040fab5\n.text:000000000040fabb\n.text:000000000040fabd\n.text:000000000040fac1\n.text:000000000040fac7\n.text:000000000040facc\n.text:000000000040face\n.text:000000000040fad2\n.text:000000000040fad5\n.text:000000000040fad7\n.text:000000000040fadb\n.text:000000000040fadd\n.text:000000000040fae2\n.text:000000000040fae5\n.text:000000000040faea\n.text:000000000040faed\n.text:000000000040faf0\n.text:000000000040faf2\n.text:000000000040faf5\n.text:000000000040faf8\n.text:000000000040fafd\n.text:000000000040fb01\n.text:000000000040fb05\n.text:000000000040fb07\n.text:000000000040fb0a\n.text:000000000040fb0f\n.text:000000000040fb11\n.text:000000000040fb13\n.text:000000000040fb16\n.text:000000000040fb19\n.text:000000000040fb1e\n.text:000000000040fb21\n.text:000000000040fb23\n.text:000000000040fb28\n.text:000000000040fb2b\n.text:000000000040fb2e\n.text:000000000040fb33\n.text:000000000040fb37\n.text:000000000040fb3c\n.text:000000000040fb44\n.text:000000000040fb46\n.text:000000000040fb4b\n.text:000000000040fb50\n.text:000000000040fb53\n.text:000000000040fb56\n.text:000000000040fb5b\n.text:000000000040fb5d\n.text:000000000040fb60\n.text:000000000040fb65\n.text:000000000040fb69\n'
p1581
tp1582
sS'quote_mem'
p1583
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p1584
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1585
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x0040bb50\n'
p1586
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p1587
S'.text:000000000040bb60\n.text:000000000040bb63\n.text:000000000040bb66\n.text:000000000040bb68\n.text:000000000040bb6b\n.text:000000000040bb6e\n'
p1588
tp1589
sS'fts_load'
p1590
(S'\n__stdcall fts_load(FTS * sp, FTSENT * p)\n'
p1591
V\u000avoid fts_load(FTS *sp,FTSENT *p)\u000a\u000a{\u000a  FTSENT *__src;\u000a  FTSENT *pFVar1;\u000a  size_t sVar2;\u000a  char *__s;\u000a  \u000a  p->fts_pathlen = p->fts_namelen;\u000a  __src = p + 1;\u000a  memmove(sp->fts_path,__src,p->fts_namelen + 1);\u000a  pFVar1 = (FTSENT *)strrchr((char *)__src,0x2f);\u000a  if ((pFVar1 != (FTSENT *)0x0) &&\u000a     ((pFVar1 != __src || (*(char *)((long)&pFVar1->fts_cycle + 1) != 0)))) {\u000a    __s = (char *)((long)&pFVar1->fts_cycle + 1);\u000a    sVar2 = strlen(__s);\u000a    memmove(__src,__s,sVar2 + 1);\u000a    p->fts_namelen = sVar2;\u000a  }\u000a  __s = sp->fts_path;\u000a  p->fts_path = __s;\u000a  p->fts_accpath = __s;\u000a  return;\u000a}\u000a\u000a
p1592
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R12,RSI\nMOV R14,RDI\nMOV RDX,qword ptr [R12 + 0x60]\nMOV qword ptr [R12 + 0x48],RDX\nMOV RDI,qword ptr [R14 + 0x20]\nLEA R15,[0x108 + R12]\nINC RDX\nMOV RSI,R15\nCALL 0x00402630\nMOV ESI,0x2f\nMOV RDI,R15\nCALL 0x00402310\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040f822\nCMP RBX,R15\nJNZ 0x0040f800\nCMP byte ptr [RBX + 0x1],0x0\nJZ 0x0040f822\nINC RBX\nMOV RDI,RBX\nCALL 0x00402290\nMOV R13,RAX\nLEA RDX,[R13 + 0x1]\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x00402630\nMOV qword ptr [R12 + 0x60],R13\nMOV RAX,qword ptr [R14 + 0x20]\nMOV qword ptr [R12 + 0x38],RAX\nMOV qword ptr [R12 + 0x30],RAX\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p1593
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 f4\n49 89 fe\n49 8b 54 24 60\n49 89 54 24 48\n49 8b 7e 20\n4d 8d bc 24 08 01 00 00\n48 ff c2\n4c 89 fe\ne8 50 2e ff ff\nbe 2f 00 00 00\n4c 89 ff\ne8 23 2b ff ff\n48 89 c3\n48 85 db\n74 2d\n4c 39 fb\n75 06\n80 7b 01 00\n74 22\n48 ff c3\n48 89 df\ne8 85 2a ff ff\n49 89 c5\n49 8d 55 01\n4c 89 ff\n48 89 de\ne8 13 2e ff ff\n4d 89 6c 24 60\n49 8b 46 20\n49 89 44 24 38\n49 89 44 24 30\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p1594
S'.text:000000000040f7b0\n.text:000000000040f7b2\n.text:000000000040f7b4\n.text:000000000040f7b6\n.text:000000000040f7b8\n.text:000000000040f7b9\n.text:000000000040f7bc\n.text:000000000040f7bf\n.text:000000000040f7c4\n.text:000000000040f7c9\n.text:000000000040f7cd\n.text:000000000040f7d5\n.text:000000000040f7d8\n.text:000000000040f7db\n.text:000000000040f7e0\n.text:000000000040f7e5\n.text:000000000040f7e8\n.text:000000000040f7ed\n.text:000000000040f7f0\n.text:000000000040f7f3\n.text:000000000040f7f5\n.text:000000000040f7f8\n.text:000000000040f7fa\n.text:000000000040f7fe\n.text:000000000040f800\n.text:000000000040f803\n.text:000000000040f806\n.text:000000000040f80b\n.text:000000000040f80e\n.text:000000000040f812\n.text:000000000040f815\n.text:000000000040f818\n.text:000000000040f81d\n.text:000000000040f822\n.text:000000000040f826\n.text:000000000040f82b\n.text:000000000040f830\n.text:000000000040f831\n.text:000000000040f833\n.text:000000000040f835\n.text:000000000040f837\n.text:000000000040f839\n'
p1595
tp1596
sS'restorecon'
p1597
(S'\n__stdcall restorecon()\n'
p1598
V\u000a_Bool restorecon(void)\u000a\u000a{\u000a  undefined in_AL;\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return (_Bool)in_AL;\u000a}\u000a\u000a
p1599
S'PUSH RAX\nCALL 0x00402100\nMOV dword ptr [RAX],0x5f\nPOP RAX\nRET\n'
p1600
S'50\ne8 0a aa ff ff\nc7 00 5f 00 00 00\n58\nc3\n'
p1601
S'.text:00000000004076f0\n.text:00000000004076f1\n.text:00000000004076f6\n.text:00000000004076fc\n.text:00000000004076fd\n'
p1602
tp1603
sS'__xmknod'
p1604
(S'\n__stdcall __xmknod(int __ver, char * __path, __mode_t __mode, __dev_t * __dev)\n'
p1605
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint __xmknod(int __ver,char *__path,__mode_t __mode,__dev_t *__dev)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___xmknod_00619238)();\u000a  return iVar1;\u000a}\u000a\u000a
p1606
S'JMP qword ptr [0x00619238]\n'
p1607
S'ff 25 42 6d 21 00\n'
p1608
S'.plt:00000000004024f0\n'
p1609
tp1610
sS'mbrtowc'
p1611
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p1612
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_00619130)();\u000a  return sVar1;\u000a}\u000a\u000a
p1613
S'JMP qword ptr [0x00619130]\n'
p1614
S'ff 25 4a 6e 21 00\n'
p1615
S'.plt:00000000004022e0\n'
p1616
tp1617
sS'rm'
p1618
(S'\n__stdcall rm(char * * file, rm_options * x)\n'
p1619
V\u000aRM_status rm(char **file,rm_options *x)\u000a\u000a{\u000a  uint uVar1;\u000a  RM_status RVar2;\u000a  int iVar3;\u000a  FTS *sp;\u000a  FTSENT *ent;\u000a  uint *puVar4;\u000a  undefined8 uVar5;\u000a  RM_status RVar6;\u000a  int (*compar)(FTSENT **,FTSENT **);\u000a  \u000a  if (*file == (char *)0x0) {\u000a    RVar6 = RM_OK;\u000a  }\u000a  else {\u000a    compar = (int (*)(FTSENT **,FTSENT **))0x258;\u000a    if (x->one_file_system == false) {\u000a      compar = (int (*)(FTSENT **,FTSENT **))0x218;\u000a    }\u000a    sp = xfts_open(file,compar);\u000a    RVar6 = RM_OK;\u000a    while( true ) {\u000a      ent = fts_read(sp);\u000a      if (ent == (FTSENT *)0x0) break;\u000a      RVar2 = rm_fts(sp,ent,x);\u000a      if (RVar2 + 0xfffffffe < 2) {\u000a        if ((RVar6 == RM_OK) && (RVar2 == RM_USER_DECLINED)) {\u000a          RVar6 = RM_USER_DECLINED;\u000a        }\u000a      }\u000a      else {\u000a        RVar6 = RM_ERROR;\u000a        if (RVar2 != RM_ERROR) {\u000a                    /* WARNING: Subroutine does not return */\u000a          __assert_fail("VALID_STATUS (s)","src/remove.c",0x23e,\u000a                        "enum RM_status rm(char *const *, const struct rm_options *)");\u000a        }\u000a      }\u000a    }\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar1 = *puVar4;\u000a    if (uVar1 != 0) {\u000a      uVar5 = dcgettext(0,"fts_read failed",5);\u000a      error(0,(ulong)uVar1,uVar5,uVar5);\u000a      RVar6 = RM_ERROR;\u000a    }\u000a    iVar3 = fts_close(sp);\u000a    if (iVar3 != 0) {\u000a      puVar4 = (uint *)__errno_location();\u000a      uVar1 = *puVar4;\u000a      uVar5 = dcgettext(0,"fts_close failed",5);\u000a      error(0,(ulong)uVar1,uVar5,uVar5);\u000a      RVar6 = RM_ERROR;\u000a    }\u000a  }\u000a  return RVar6;\u000a}\u000a\u000a
p1620
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nCMP qword ptr [RDI],0x0\nJZ 0x004034f4\nCMP byte ptr [R14 + 0x8],0x0\nMOV EAX,0x218\nMOV ESI,0x258\nCMOVZ ESI,EAX\nXOR EDX,EDX\nCALL 0x0040db10\nMOV RBX,RAX\nMOV EBP,0x2\nJMP 0x00403430\nMOV EBP,0x3\nNOP dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x0040e8a0\nTEST RAX,RAX\nJZ 0x00403483\nMOV RDI,RBX\nMOV RSI,RAX\nMOV RDX,R14\nCALL 0x00403500\nLEA ECX,[RAX + -0x2]\nCMP ECX,0x2\nJNC 0x00403460\nCMP EBP,0x2\nJNZ 0x00403430\nCMP EAX,0x3\nJNZ 0x00403430\nJMP 0x00403424\nMOV EBP,0x4\nCMP EAX,0x4\nJZ 0x00403430\nMOV EDI,0x412430\nMOV ESI,0x412441\nMOV EDX,0x23e\nMOV ECX,0x41244e\nCALL 0x00402350\nCALL 0x00402100\nMOV R14D,dword ptr [RAX]\nTEST R14D,R14D\nJZ 0x004034b8\nXOR EDI,EDI\nMOV ESI,0x412420\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,RCX\nCALL 0x00402640\nMOV EBP,0x4\nMOV RDI,RBX\nCALL 0x0040e720\nTEST EAX,EAX\nJZ 0x004034f9\nCALL 0x00402100\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x41248a\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00402640\nMOV EBP,0x4\nJMP 0x004034f9\nMOV EBP,0x2\nMOV EAX,EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1621
S'55\n41 56\n53\n49 89 f6\n48 83 3f 00\n0f 84 f3 00 00 00\n41 80 7e 08 00\nb8 18 02 00 00\nbe 58 02 00 00\n0f 44 f0\n31 d2\ne8 f6 a6 00 00\n48 89 c3\nbd 02 00 00 00\neb 0c\nbd 03 00 00 00\n0f 1f 80 00 00 00 00\n48 89 df\ne8 68 b4 00 00\n48 85 c0\n74 46\n48 89 df\n48 89 c6\n4c 89 f2\ne8 b5 00 00 00\n8d 48 fe\n83 f9 02\n73 0d\n83 fd 02\n75 d8\n83 f8 03\n75 d3\neb c5\nbd 04 00 00 00\n83 f8 04\n74 c6\nbf 30 24 41 00\nbe 41 24 41 00\nba 3e 02 00 00\nb9 4e 24 41 00\ne8 cd ee ff ff\ne8 78 ec ff ff\n44 8b 30\n45 85 f6\n74 28\n31 ff\nbe 20 24 41 00\nba 05 00 00 00\ne8 cf ed ff ff\n48 89 c1\n31 ff\n31 c0\n44 89 f6\n48 89 ca\ne8 8d f1 ff ff\nbd 04 00 00 00\n48 89 df\ne8 60 b2 00 00\n85 c0\n74 35\ne8 37 ec ff ff\n8b 18\n31 ff\nbe 8a 24 41 00\nba 05 00 00 00\ne8 94 ed ff ff\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ca\ne8 53 f1 ff ff\nbd 04 00 00 00\neb 05\nbd 02 00 00 00\n89 e8\n5b\n41 5e\n5d\nc3\n'
p1622
S'.text:00000000004033f0\n.text:00000000004033f1\n.text:00000000004033f3\n.text:00000000004033f4\n.text:00000000004033f7\n.text:00000000004033fb\n.text:0000000000403401\n.text:0000000000403406\n.text:000000000040340b\n.text:0000000000403410\n.text:0000000000403413\n.text:0000000000403415\n.text:000000000040341a\n.text:000000000040341d\n.text:0000000000403422\n.text:0000000000403424\n.text:0000000000403429\n.text:0000000000403430\n.text:0000000000403433\n.text:0000000000403438\n.text:000000000040343b\n.text:000000000040343d\n.text:0000000000403440\n.text:0000000000403443\n.text:0000000000403446\n.text:000000000040344b\n.text:000000000040344e\n.text:0000000000403451\n.text:0000000000403453\n.text:0000000000403456\n.text:0000000000403458\n.text:000000000040345b\n.text:000000000040345d\n.text:0000000000403460\n.text:0000000000403465\n.text:0000000000403468\n.text:000000000040346a\n.text:000000000040346f\n.text:0000000000403474\n.text:0000000000403479\n.text:000000000040347e\n.text:0000000000403483\n.text:0000000000403488\n.text:000000000040348b\n.text:000000000040348e\n.text:0000000000403490\n.text:0000000000403492\n.text:0000000000403497\n.text:000000000040349c\n.text:00000000004034a1\n.text:00000000004034a4\n.text:00000000004034a6\n.text:00000000004034a8\n.text:00000000004034ab\n.text:00000000004034ae\n.text:00000000004034b3\n.text:00000000004034b8\n.text:00000000004034bb\n.text:00000000004034c0\n.text:00000000004034c2\n.text:00000000004034c4\n.text:00000000004034c9\n.text:00000000004034cb\n.text:00000000004034cd\n.text:00000000004034d2\n.text:00000000004034d7\n.text:00000000004034dc\n.text:00000000004034df\n.text:00000000004034e1\n.text:00000000004034e3\n.text:00000000004034e5\n.text:00000000004034e8\n.text:00000000004034ed\n.text:00000000004034f2\n.text:00000000004034f4\n.text:00000000004034f9\n.text:00000000004034fb\n.text:00000000004034fc\n.text:00000000004034fe\n.text:00000000004034ff\n'
p1623
tp1624
sS'futimens'
p1625
(S'\n__stdcall futimens(int __fd, timespec * __times)\n'
p1626
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint futimens(int __fd,timespec *__times)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_futimens_00619320)();\u000a  return iVar1;\u000a}\u000a\u000a
p1627
S'JMP qword ptr [0x00619320]\n'
p1628
S'ff 25 5a 6c 21 00\n'
p1629
S'.plt:00000000004026c0\n'
p1630
tp1631
sS'remember_copied'
p1632
(S'\n__stdcall remember_copied(char * name, ino_t ino, dev_t dev)\n'
p1633
V\u000achar * remember_copied(char *name,ino_t ino,dev_t dev)\u000a\u000a{\u000a  ino_t *entry;\u000a  char *pcVar1;\u000a  ino_t *piVar2;\u000a  \u000a  entry = (ino_t *)xmalloc(0x18);\u000a  pcVar1 = xstrdup(name);\u000a  *(char **)(entry + 2) = pcVar1;\u000a  *entry = ino;\u000a  entry[1] = dev;\u000a  piVar2 = (ino_t *)hash_insert(src_to_dest,entry);\u000a  if (piVar2 != (ino_t *)0x0) {\u000a    if (piVar2 == entry) {\u000a      pcVar1 = (char *)0x0;\u000a    }\u000a    else {\u000a      src_to_dest_free(entry);\u000a      pcVar1 = (char *)piVar2[2];\u000a    }\u000a    return pcVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1634
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R15,RSI\nMOV R12,RDI\nMOV EDI,0x18\nCALL 0x0040d950\nMOV RBX,RAX\nMOV RDI,R12\nCALL 0x0040dac0\nMOV qword ptr [RBX + 0x10],RAX\nMOV qword ptr [RBX],R15\nMOV qword ptr [RBX + 0x8],R14\nMOV RDI,qword ptr [0x006198b0]\nMOV RSI,RBX\nCALL 0x0040a2a0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00408309\nCMP R14,RBX\nJZ 0x004082fb\nMOV RDI,RBX\nCALL 0x00408240\nMOV RAX,qword ptr [R14 + 0x10]\nJMP 0x004082fd\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x0040dae0\n'
p1635
S'41 57\n41 56\n41 54\n53\n50\n49 89 d6\n49 89 f7\n49 89 fc\nbf 18 00 00 00\ne8 95 56 00 00\n48 89 c3\n4c 89 e7\ne8 fa 57 00 00\n48 89 43 10\n4c 89 3b\n4c 89 73 08\n48 8b 3d d8 15 21 00\n48 89 de\ne8 c0 1f 00 00\n49 89 c6\n4d 85 f6\n74 21\n49 39 de\n74 0e\n48 89 df\ne8 4b ff ff ff\n49 8b 46 10\neb 02\n31 c0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 d2 57 00 00\n'
p1636
S'.text:00000000004082a0\n.text:00000000004082a2\n.text:00000000004082a4\n.text:00000000004082a6\n.text:00000000004082a7\n.text:00000000004082a8\n.text:00000000004082ab\n.text:00000000004082ae\n.text:00000000004082b1\n.text:00000000004082b6\n.text:00000000004082bb\n.text:00000000004082be\n.text:00000000004082c1\n.text:00000000004082c6\n.text:00000000004082ca\n.text:00000000004082cd\n.text:00000000004082d1\n.text:00000000004082d8\n.text:00000000004082db\n.text:00000000004082e0\n.text:00000000004082e3\n.text:00000000004082e6\n.text:00000000004082e8\n.text:00000000004082eb\n.text:00000000004082ed\n.text:00000000004082f0\n.text:00000000004082f5\n.text:00000000004082f9\n.text:00000000004082fb\n.text:00000000004082fd\n.text:0000000000408301\n.text:0000000000408302\n.text:0000000000408304\n.text:0000000000408306\n.text:0000000000408308\n.text:0000000000408309\n'
p1637
tp1638
sS'umask'
p1639
(S'\n__stdcall umask(__mode_t __mask)\n'
p1640
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__mode_t umask(__mode_t __mask)\u000a\u000a{\u000a  __mode_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_umask_00619220)();\u000a  return _Var1;\u000a}\u000a\u000a
p1641
S'JMP qword ptr [0x00619220]\n'
p1642
S'ff 25 5a 6d 21 00\n'
p1643
S'.plt:00000000004024c0\n'
p1644
tp1645
sS'access'
p1646
(S'\n__stdcall access(char * __name, int __type)\n'
p1647
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint access(char *__name,int __type)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_access_006192f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p1648
S'JMP qword ptr [0x006192f8]\n'
p1649
S'ff 25 82 6c 21 00\n'
p1650
S'.plt:0000000000402670\n'
p1651
tp1652
sS'enter_dir'
p1653
(S'\n__stdcall enter_dir(FTS * fts, FTSENT * ent)\n'
p1654
V\u000a_Bool enter_dir(FTS *fts,FTSENT *ent)\u000a\u000a{\u000a  _Bool _Var1;\u000a  __dev_t *entry;\u000a  __dev_t *p_Var2;\u000a  undefined uVar3;\u000a  \u000a  if ((*(ushort *)&fts->fts_options & 0x102) == 0) {\u000a    _Var1 = cycle_check((cycle_check_state *)fts->fts_cycle,ent->fts_statp);\u000a    if (_Var1 == false) {\u000a      return true;\u000a    }\u000a    *(FTSENT **)&ent->fts_cycle = ent;\u000aLAB_0040f9a3:\u000a    uVar3 = 1;\u000a    ent->fts_info = 2;\u000a  }\u000a  else {\u000a    entry = (__dev_t *)malloc(0x18);\u000a    if (entry != (__dev_t *)0x0) {\u000a      *entry = ent->fts_statp[0].st_dev;\u000a      entry[1] = ent->fts_statp[0].st_ino;\u000a      *(FTSENT **)(entry + 2) = ent;\u000a      p_Var2 = (__dev_t *)hash_insert((Hash_table *)fts->fts_cycle,entry);\u000a      if (p_Var2 == entry) {\u000a        return true;\u000a      }\u000a      free(entry);\u000a      if (p_Var2 != (__dev_t *)0x0) {\u000a        ent->fts_cycle = (_ftsent *)p_Var2[2];\u000a        goto LAB_0040f9a3;\u000a      }\u000a    }\u000a    uVar3 = 0;\u000a  }\u000a  return (_Bool)uVar3;\u000a}\u000a\u000a
p1655
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBP,RDI\nMOVZX EAX,word ptr [RBP + 0x48]\nTEST AX,0x102\nJZ 0x0040f98c\nMOV EDI,0x18\nCALL 0x00402540\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040f9ac\nMOV RAX,qword ptr [R14 + 0x78]\nMOV qword ptr [RBX],RAX\nMOV RAX,qword ptr [0x80 + R14]\nMOV qword ptr [RBX + 0x8],RAX\nMOV qword ptr [RBX + 0x10],R14\nMOV RDI,qword ptr [RBP + 0x58]\nMOV RSI,RBX\nCALL 0x0040a2a0\nMOV R15,RAX\nMOV BPL,0x1\nCMP R15,RBX\nJZ 0x0040f9ae\nMOV RDI,RBX\nCALL 0x004020c0\nTEST R15,R15\nJZ 0x0040f9ac\nMOV RAX,qword ptr [R15 + 0x10]\nMOV qword ptr [R14],RAX\nJMP 0x0040f9a3\nMOV RDI,qword ptr [RBP + 0x58]\nLEA RSI,[R14 + 0x78]\nCALL 0x004107d0\nMOV BPL,0x1\nTEST AL,AL\nJZ 0x0040f9ae\nMOV qword ptr [R14],R14\nMOV word ptr [R14 + 0x70],0x2\nJMP 0x0040f9ae\nXOR EBP,EBP\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1656
S'55\n41 57\n41 56\n53\n50\n49 89 f6\n48 89 fd\n0f b7 45 48\n66 a9 02 01\n74 55\nbf 18 00 00 00\ne8 ff 2b ff ff\n48 89 c3\n48 85 db\n74 63\n49 8b 46 78\n48 89 03\n49 8b 86 80 00 00 00\n48 89 43 08\n4c 89 73 10\n48 8b 7d 58\n48 89 de\ne8 35 a9 ff ff\n49 89 c7\n40 b5 01\n49 39 df\n74 38\n48 89 df\ne8 42 27 ff ff\n4d 85 ff\n74 29\n49 8b 47 10\n49 89 06\neb 17\n48 8b 7d 58\n49 8d 76 78\ne8 37 0e 00 00\n40 b5 01\n84 c0\n74 0e\n4d 89 36\n66 41 c7 46 70 02 00\neb 02\n31 ed\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1657
S'.text:000000000040f920\n.text:000000000040f921\n.text:000000000040f923\n.text:000000000040f925\n.text:000000000040f926\n.text:000000000040f927\n.text:000000000040f92a\n.text:000000000040f92d\n.text:000000000040f931\n.text:000000000040f935\n.text:000000000040f937\n.text:000000000040f93c\n.text:000000000040f941\n.text:000000000040f944\n.text:000000000040f947\n.text:000000000040f949\n.text:000000000040f94d\n.text:000000000040f950\n.text:000000000040f957\n.text:000000000040f95b\n.text:000000000040f95f\n.text:000000000040f963\n.text:000000000040f966\n.text:000000000040f96b\n.text:000000000040f96e\n.text:000000000040f971\n.text:000000000040f974\n.text:000000000040f976\n.text:000000000040f979\n.text:000000000040f97e\n.text:000000000040f981\n.text:000000000040f983\n.text:000000000040f987\n.text:000000000040f98a\n.text:000000000040f98c\n.text:000000000040f990\n.text:000000000040f994\n.text:000000000040f999\n.text:000000000040f99c\n.text:000000000040f99e\n.text:000000000040f9a0\n.text:000000000040f9a3\n.text:000000000040f9aa\n.text:000000000040f9ac\n.text:000000000040f9ae\n.text:000000000040f9b0\n.text:000000000040f9b4\n.text:000000000040f9b5\n.text:000000000040f9b7\n.text:000000000040f9b9\n.text:000000000040f9ba\n'
p1658
tp1659
sS'dcgettext'
p1660
(S'\n__stdcall dcgettext()\n'
p1661
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_006190f8)();\u000a  return;\u000a}\u000a\u000a
p1662
S'JMP qword ptr [0x006190f8]\n'
p1663
S'ff 25 82 6e 21 00\n'
p1664
S'.plt:0000000000402270\n'
p1665
tp1666
sS'set_cloexec_flag'
p1667
(S'\n__stdcall set_cloexec_flag()\n'
p1668
V\u000aint set_cloexec_flag(void)\u000a\u000a{\u000a  uint uVar1;\u000a  uint uVar2;\u000a  int iVar3;\u000a  char in_SIL;\u000a  ulong in_RDI;\u000a  \u000a  iVar3 = 0;\u000a  uVar2 = rpl_fcntl(in_RDI,1,0);\u000a  if ((int)uVar2 < 0) {\u000a    iVar3 = -1;\u000a  }\u000a  else {\u000a    uVar1 = uVar2 & 0xfffffffe;\u000a    if (in_SIL != 0) {\u000a      uVar1 = uVar2 | 1;\u000a    }\u000a    if ((uVar2 != uVar1) && (iVar3 = rpl_fcntl(in_RDI & 0xffffffff,2), iVar3 != -1)) {\u000a      iVar3 = 0;\u000a    }\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p1669
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV EBX,EDI\nXOR EBP,EBP\nMOV ESI,0x1\nXOR EDX,EDX\nXOR EAX,EAX\nCALL 0x0040dc30\nTEST EAX,EAX\nJS 0x00410729\nMOV ECX,EAX\nOR ECX,0x1\nMOV EDX,EAX\nAND EDX,0xfffffffe\nTEST R14B,R14B\nCMOVNZ EDX,ECX\nCMP EAX,EDX\nJZ 0x0041072e\nXOR EBP,EBP\nMOV ESI,0x2\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x0040dc30\nCMP EAX,-0x1\nCMOVNZ EAX,EBP\nJMP 0x00410730\nMOV EBP,0xffffffff\nMOV EAX,EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1670
S'55\n41 56\n53\n41 89 f6\n89 fb\n31 ed\nbe 01 00 00 00\n31 d2\n31 c0\ne8 37 d5 ff ff\n85 c0\n78 2c\n89 c1\n83 c9 01\n89 c2\n83 e2 fe\n45 84 f6\n0f 45 d1\n39 d0\n74 1d\n31 ed\nbe 02 00 00 00\n31 c0\n89 df\ne8 0f d5 ff ff\n83 f8 ff\n0f 45 c5\neb 07\nbd ff ff ff ff\n89 e8\n5b\n41 5e\n5d\nc3\n'
p1671
S'.text:00000000004106e0\n.text:00000000004106e1\n.text:00000000004106e3\n.text:00000000004106e4\n.text:00000000004106e7\n.text:00000000004106e9\n.text:00000000004106eb\n.text:00000000004106f0\n.text:00000000004106f2\n.text:00000000004106f4\n.text:00000000004106f9\n.text:00000000004106fb\n.text:00000000004106fd\n.text:00000000004106ff\n.text:0000000000410702\n.text:0000000000410704\n.text:0000000000410707\n.text:000000000041070a\n.text:000000000041070d\n.text:000000000041070f\n.text:0000000000410711\n.text:0000000000410713\n.text:0000000000410718\n.text:000000000041071a\n.text:000000000041071c\n.text:0000000000410721\n.text:0000000000410724\n.text:0000000000410727\n.text:0000000000410729\n.text:000000000041072e\n.text:0000000000410730\n.text:0000000000410731\n.text:0000000000410733\n.text:0000000000410734\n'
p1672
tp1673
sS'seen_file'
p1674
(S'\n__stdcall seen_file(Hash_table * ht, char * file, stat * stats)\n'
p1675
V\u000a_Bool seen_file(Hash_table *ht,char *file,stat *stats)\u000a\u000a{\u000a  void *pvVar1;\u000a  char *local_18;\u000a  __ino_t local_10;\u000a  __dev_t local_8;\u000a  \u000a  if (ht != (Hash_table *)0x0) {\u000a    local_10 = stats->st_ino;\u000a    local_8 = stats->st_dev;\u000a    local_18 = file;\u000a    pvVar1 = hash_lookup(ht,&local_18);\u000a    return (_Bool)(pvVar1 != (void *)0x0);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1676
S'TEST RDI,RDI\nJZ 0x00409281\nSUB RSP,0x18\nMOV qword ptr [RSP],RSI\nMOV RAX,qword ptr [RDX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RAX,qword ptr [RDX]\nMOV qword ptr [RSP + 0x10],RAX\nMOV RSI,RSP\nCALL 0x00409760\nTEST RAX,RAX\nSETNZ AL\nADD RSP,0x18\nRET\nXOR EAX,EAX\nRET\n'
p1677
S'48 85 ff\n74 2c\n48 83 ec 18\n48 89 34 24\n48 8b 42 08\n48 89 44 24 08\n48 8b 02\n48 89 44 24 10\n48 89 e6\ne8 ea 04 00 00\n48 85 c0\n0f 95 c0\n48 83 c4 18\nc3\n31 c0\nc3\n'
p1678
S'.text:0000000000409250\n.text:0000000000409253\n.text:0000000000409255\n.text:0000000000409259\n.text:000000000040925d\n.text:0000000000409261\n.text:0000000000409266\n.text:0000000000409269\n.text:000000000040926e\n.text:0000000000409271\n.text:0000000000409276\n.text:0000000000409279\n.text:000000000040927c\n.text:0000000000409280\n.text:0000000000409281\n.text:0000000000409283\n'
p1679
tp1680
sS'quotearg_free'
p1681
(S'\n__stdcall quotearg_free()\n'
p1682
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p1683
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x006193c0]\nCMP dword ptr [0x006193c8],0x2\nJC 0x0040b62a\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x004020c0\nINC RBX\nMOV EAX,dword ptr [0x006193c8]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x0040b610\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x619920\nCMP RDI,RAX\nJZ 0x0040b653\nCALL 0x004020c0\nMOV qword ptr [0x006193d0],0x100\nMOV qword ptr [0x006193d8],0x619920\nMOV EAX,0x6193d0\nCMP R14,RAX\nJZ 0x0040b670\nMOV RDI,R14\nCALL 0x004020c0\nMOV qword ptr [0x006193c0],0x6193d0\nMOV dword ptr [0x006193c8],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1684
S'41 57\n41 56\n53\n4c 8b 35 c4 dd 20 00\n83 3d c5 dd 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 a8 6a ff ff\n48 ff c3\n8b 05 a7 dd 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 20 99 61 00\n48 39 c7\n74 1b\ne8 83 6a ff ff\n48 c7 05 88 dd 20 00 00 01 00 00\n48 c7 05 85 dd 20 00 20 99 61 00\nb8 d0 93 61 00\n49 39 c6\n74 13\n4c 89 f7\ne8 5b 6a ff ff\n48 c7 05 50 dd 20 00 d0 93 61 00\nc7 05 4e dd 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p1685
S'.text:000000000040b5f0\n.text:000000000040b5f2\n.text:000000000040b5f4\n.text:000000000040b5f5\n.text:000000000040b5fc\n.text:000000000040b603\n.text:000000000040b605\n.text:000000000040b609\n.text:000000000040b60e\n.text:000000000040b610\n.text:000000000040b613\n.text:000000000040b618\n.text:000000000040b61b\n.text:000000000040b621\n.text:000000000040b625\n.text:000000000040b628\n.text:000000000040b62a\n.text:000000000040b62e\n.text:000000000040b633\n.text:000000000040b636\n.text:000000000040b638\n.text:000000000040b63d\n.text:000000000040b648\n.text:000000000040b653\n.text:000000000040b658\n.text:000000000040b65b\n.text:000000000040b65d\n.text:000000000040b660\n.text:000000000040b665\n.text:000000000040b670\n.text:000000000040b67a\n.text:000000000040b67b\n.text:000000000040b67d\n.text:000000000040b67f\n'
p1686
tp1687
sS'quotearg_mem'
p1688
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p1689
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1690
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x0040b850\n'
p1691
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p1692
S'.text:000000000040b870\n.text:000000000040b873\n.text:000000000040b876\n.text:000000000040b878\n.text:000000000040b87b\n.text:000000000040b87e\n'
p1693
tp1694
sS'security_check_context'
p1695
(S'\n__stdcall security_check_context(security_context_t con)\n'
p1696
V\u000aint security_check_context(security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p1697
S'PUSH RAX\nCALL 0x00402100\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p1698
S'50\ne8 3a 5b ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p1699
S'.text:000000000040c5c0\n.text:000000000040c5c1\n.text:000000000040c5c6\n.text:000000000040c5cc\n.text:000000000040c5d1\n.text:000000000040c5d2\n'
p1700
tp1701
sS'rotl32'
p1702
(S'\n__stdcall rotl32()\n'
p1703
V\u000auint32_t rotl32(void)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x1f;\u000a  return (uint32_t)(in_EDI << bVar1 | in_EDI >> 0x20 - bVar1);\u000a}\u000a\u000a
p1704
S'MOV ECX,ESI\nROL EDI,CL\nMOV EAX,EDI\nRET\n'
p1705
S'89 f1\nd3 c7\n89 f8\nc3\n'
p1706
S'.text:00000000004104d0\n.text:00000000004104d2\n.text:00000000004104d4\n.text:00000000004104d6\n'
p1707
tp1708
sS'free_cwd'
p1709
(S'\n__stdcall free_cwd(saved_cwd * cwd)\n'
p1710
V\u000avoid free_cwd(saved_cwd *cwd)\u000a\u000a{\u000a  if (-1 < cwd->desc) {\u000a    close(cwd->desc);\u000a  }\u000a  free(cwd->name);\u000a  return;\u000a}\u000a\u000a
p1711
S'PUSH RBX\nMOV RBX,RDI\nMOV EDI,dword ptr [RBX]\nTEST EDI,EDI\nJS 0x00410e7f\nCALL 0x004023c0\nMOV RDI,qword ptr [RBX + 0x8]\nPOP RBX\nJMP 0x004020c0\n'
p1712
S'53\n48 89 fb\n8b 3b\n85 ff\n78 05\ne8 41 15 ff ff\n48 8b 7b 08\n5b\ne9 37 12 ff ff\n'
p1713
S'.text:0000000000410e70\n.text:0000000000410e71\n.text:0000000000410e74\n.text:0000000000410e76\n.text:0000000000410e78\n.text:0000000000410e7a\n.text:0000000000410e7f\n.text:0000000000410e83\n.text:0000000000410e84\n'
p1714
tp1715
sS'savedir'
p1716
(S'\n__stdcall savedir(char * dir)\n'
p1717
V\u000achar * savedir(char *dir)\u000a\u000a{\u000a  int iVar1;\u000a  DIR *dirp;\u000a  char *__ptr;\u000a  int *piVar2;\u000a  \u000a  dirp = opendir_safer(dir);\u000a  if (dirp != (DIR *)0x0) {\u000a    __ptr = streamsavedir(dirp);\u000a    iVar1 = closedir((DIR *)dirp);\u000a    if (iVar1 == 0) {\u000a      return __ptr;\u000a    }\u000a    piVar2 = __errno_location();\u000a    iVar1 = *piVar2;\u000a    free(__ptr);\u000a    *piVar2 = iVar1;\u000a  }\u000a  return (char *)0x0;\u000a}\u000a\u000a
p1718
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EBP,ESI\nCALL 0x00408ec0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040c430\nMOV RDI,RBX\nMOV ESI,EBP\nCALL 0x0040c170\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x004023e0\nTEST EAX,EAX\nJZ 0x0040c433\nCALL 0x00402100\nMOV RBX,RAX\nMOV EBP,dword ptr [RBX]\nMOV RDI,R14\nCALL 0x004020c0\nMOV dword ptr [RBX],EBP\nXOR R14D,R14D\nMOV RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1719
S'55\n41 56\n53\n89 f5\ne8 c5 ca ff ff\n48 89 c3\n48 85 db\n74 2d\n48 89 df\n89 ee\ne8 63 fd ff ff\n49 89 c6\n48 89 df\ne8 c8 5f ff ff\n85 c0\n74 17\ne8 df 5c ff ff\n48 89 c3\n8b 2b\n4c 89 f7\ne8 92 5c ff ff\n89 2b\n45 31 f6\n4c 89 f0\n5b\n41 5e\n5d\nc3\n'
p1720
S'.text:000000000040c3f0\n.text:000000000040c3f1\n.text:000000000040c3f3\n.text:000000000040c3f4\n.text:000000000040c3f6\n.text:000000000040c3fb\n.text:000000000040c3fe\n.text:000000000040c401\n.text:000000000040c403\n.text:000000000040c406\n.text:000000000040c408\n.text:000000000040c40d\n.text:000000000040c410\n.text:000000000040c413\n.text:000000000040c418\n.text:000000000040c41a\n.text:000000000040c41c\n.text:000000000040c421\n.text:000000000040c424\n.text:000000000040c426\n.text:000000000040c429\n.text:000000000040c42e\n.text:000000000040c430\n.text:000000000040c433\n.text:000000000040c436\n.text:000000000040c437\n.text:000000000040c439\n.text:000000000040c43a\n'
p1721
tp1722
sS'mknod'
p1723
(S'\n__stdcall mknod(char * __path, __mode_t __mode, __dev_t __dev)\n'
p1724
V\u000aint mknod(char *__path,__mode_t __mode,__dev_t __dev)\u000a\u000a{\u000a  int iVar1;\u000a  __dev_t local_10 [2];\u000a  \u000a  local_10[0] = __dev;\u000a  iVar1 = __xmknod(0,__path,__mode,local_10);\u000a  return iVar1;\u000a}\u000a\u000a
p1725
S'SUB RSP,0x18\nLEA RCX,[RSP + 0x8]\nMOV qword ptr [RSP + 0x8],RDX\nMOV EDX,ESI\nMOV RSI,RDI\nXOR EDI,EDI\nCALL 0x004024f0\nADD RSP,0x18\nRET\n'
p1726
S'48 83 ec 18\n48 8d 4c 24 08\n48 89 54 24 08\n89 f2\n48 89 fe\n31 ff\ne8 a6 10 ff ff\n48 83 c4 18\nc3\n'
p1727
S'.text:0000000000411430\n.text:0000000000411434\n.text:0000000000411439\n.text:000000000041143e\n.text:0000000000411440\n.text:0000000000411443\n.text:0000000000411445\n.text:000000000041144a\n.text:000000000041144e\n'
p1728
tp1729
sS'free'
p1730
(S'\n__stdcall free(void * __ptr)\n'
p1731
V\u000a/* WARNING: Switch with 1 destination removed at 0x004020c0 */\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1732
S'JMP qword ptr [0x00619020]\n'
p1733
S'ff 25 5a 6f 21 00\n'
p1734
S'.plt:00000000004020c0\n'
p1735
tp1736
sS'euidaccess'
p1737
(S'\n__stdcall euidaccess(char * __name, int __type)\n'
p1738
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint euidaccess(char *__name,int __type)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_euidaccess_00619328)();\u000a  return iVar1;\u000a}\u000a\u000a
p1739
S'JMP qword ptr [0x00619328]\n'
p1740
S'ff 25 52 6c 21 00\n'
p1741
S'.plt:00000000004026d0\n'
p1742
tp1743
sS'stat'
p1744
(S'\n__stdcall stat(char * __file, stat * __buf)\n'
p1745
V\u000aint stat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___xstat_00619248)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p1746
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x00402510\n'
p1747
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 20 11 ff ff\n'
p1748
S'.text:00000000004113e0\n.text:00000000004113e3\n.text:00000000004113e6\n.text:00000000004113eb\n'
p1749
tp1750
sS'check_extension'
p1751
(S'\n__stdcall check_extension()\n'
p1752
V\u000avoid check_extension(char *pcParm1,long lParm2)\u000a\u000a{\u000a  undefined2 uVar1;\u000a  undefined2 *name;\u000a  int *piVar2;\u000a  char *pcVar3;\u000a  char *pcVar4;\u000a  \u000a  name = (undefined2 *)last_component(pcParm1);\u000a  pcVar4 = (char *)base_len((char *)name);\u000a  if (pcVar4 < (char *)0xf) {\u000a    pcVar3 = (char *)0xff;\u000a    if (pcVar4 < (char *)0x100) {\u000a      return;\u000a    }\u000a  }\u000a  else {\u000a    uVar1 = *name;\u000a    *name = 0x2e;\u000a    piVar2 = __errno_location();\u000a    *piVar2 = 0;\u000a    pcVar3 = (char *)pathconf(pcParm1,3);\u000a    if (((long)pcVar3 < 0) && (*piVar2 != 0)) {\u000a      pcVar3 = (char *)0xff;\u000a    }\u000a    *name = uVar1;\u000a    if (pcVar4 <= pcVar3) {\u000a      return;\u000a    }\u000a  }\u000a  pcVar4 = pcVar3 + -1;\u000a  if (pcParm1 + (lParm2 - (long)name) < pcVar3) {\u000a    pcVar4 = pcParm1 + (lParm2 - (long)name);\u000a  }\u000a  *(undefined2 *)((long)name + (long)pcVar4) = 0x7e;\u000a  return;\u000a}\u000a\u000a
p1753
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RSI\nMOV RBX,RDI\nCALL 0x00409000\nMOV R14,RAX\nMOV RDI,R14\nCALL 0x00409060\nMOV R12,RAX\nCMP R12,0xf\nJC 0x00408bed\nMOVZX EBP,word ptr [R14]\nMOV word ptr [R14],0x2e\nCALL 0x00402100\nMOV R13,RAX\nMOV dword ptr [R13],0x0\nMOV ESI,0x3\nMOV RDI,RBX\nCALL 0x00402210\nTEST RAX,RAX\nJNS 0x00408be2\nCMP dword ptr [R13],0x0\nJZ 0x00408be2\nMOV EAX,0xff\nMOV word ptr [R14],BP\nCMP RAX,R12\nJC 0x00408bf7\nJMP 0x00408c0f\nMOV EAX,0xff\nCMP RAX,R12\nJNC 0x00408c0f\nADD RBX,R15\nSUB RBX,R14\nCMP RAX,RBX\nLEA RAX,[RAX + -0x1]\nCMOVA RAX,RBX\nMOV word ptr [R14 + RAX*0x1],0x7e\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1754
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f7\n48 89 fb\ne8 6a 04 00 00\n49 89 c6\n4c 89 f7\ne8 bf 04 00 00\n49 89 c4\n49 83 fc 0f\n72 43\n41 0f b7 2e\n66 41 c7 06 2e 00\ne8 47 95 ff ff\n49 89 c5\n41 c7 45 00 00 00 00 00\nbe 03 00 00 00\n48 89 df\ne8 3f 96 ff ff\n48 85 c0\n79 0c\n41 83 7d 00 00\n74 05\nb8 ff 00 00 00\n66 41 89 2e\n4c 39 e0\n72 0c\neb 22\nb8 ff 00 00 00\n4c 39 e0\n73 18\n4c 01 fb\n4c 29 f3\n48 39 d8\n48 8d 40 ff\n48 0f 47 c3\n66 41 c7 04 06 7e 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1755
S'.text:0000000000408b80\n.text:0000000000408b81\n.text:0000000000408b83\n.text:0000000000408b85\n.text:0000000000408b87\n.text:0000000000408b89\n.text:0000000000408b8a\n.text:0000000000408b8b\n.text:0000000000408b8e\n.text:0000000000408b91\n.text:0000000000408b96\n.text:0000000000408b99\n.text:0000000000408b9c\n.text:0000000000408ba1\n.text:0000000000408ba4\n.text:0000000000408ba8\n.text:0000000000408baa\n.text:0000000000408bae\n.text:0000000000408bb4\n.text:0000000000408bb9\n.text:0000000000408bbc\n.text:0000000000408bc4\n.text:0000000000408bc9\n.text:0000000000408bcc\n.text:0000000000408bd1\n.text:0000000000408bd4\n.text:0000000000408bd6\n.text:0000000000408bdb\n.text:0000000000408bdd\n.text:0000000000408be2\n.text:0000000000408be6\n.text:0000000000408be9\n.text:0000000000408beb\n.text:0000000000408bed\n.text:0000000000408bf2\n.text:0000000000408bf5\n.text:0000000000408bf7\n.text:0000000000408bfa\n.text:0000000000408bfd\n.text:0000000000408c00\n.text:0000000000408c04\n.text:0000000000408c08\n.text:0000000000408c0f\n.text:0000000000408c13\n.text:0000000000408c14\n.text:0000000000408c16\n.text:0000000000408c18\n.text:0000000000408c1a\n.text:0000000000408c1c\n.text:0000000000408c1d\n'
p1756
tp1757
sS'quote_n_mem'
p1758
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p1759
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p1760
S'MOV ECX,0x6193e0\nJMP 0x0040b690\n'
p1761
S'b9 e0 93 61 00\ne9 36 fb ff ff\n'
p1762
S'.text:000000000040bb50\n.text:000000000040bb55\n'
p1763
tp1764
sS'xstrdup'
p1765
(S'\n__stdcall xstrdup(char * string)\n'
p1766
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p1767
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00402290\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x0040da90\n'
p1768
S'53\n48 89 fb\ne8 c7 47 ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p1769
S'.text:000000000040dac0\n.text:000000000040dac1\n.text:000000000040dac4\n.text:000000000040dac9\n.text:000000000040dacd\n.text:000000000040dad0\n.text:000000000040dad1\n'
p1770
tp1771
sS'c_ispunct'
p1772
(S'\n__stdcall c_ispunct()\n'
p1773
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p1774
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00410662\nMOV AL,0x1\nJMP qword ptr [0x413e78 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p1775
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 78 3e 41 00\nc3\n31 c0\nc3\n'
p1776
S'.text:0000000000410650\n.text:0000000000410653\n.text:0000000000410656\n.text:0000000000410658\n.text:000000000041065a\n.text:0000000000410661\n.text:0000000000410662\n.text:0000000000410664\n'
p1777
tp1778
sS'src_info_init'
p1779
(S'\n__stdcall src_info_init(cp_options * x)\n'
p1780
V\u000avoid src_info_init(cp_options *x)\u000a\u000a{\u000a  Hash_table *pHVar1;\u000a  \u000a  pHVar1 = hash_initialize(0x3d,(Hash_tuning *)0x0,triple_hash_no_name,triple_compare,triple_free);\u000a  x->src_info = pHVar1;\u000a  return;\u000a}\u000a\u000a
p1781
S'PUSH RBX\nMOV RBX,RDI\nMOV EDI,0x3d\nXOR ESI,ESI\nMOV EDX,0x40a580\nMOV ECX,0x40a590\nMOV R8D,0x40a5f0\nCALL 0x004099d0\nMOV qword ptr [RBX + 0x40],RAX\nPOP RBX\nRET\n'
p1782
S'53\n48 89 fb\nbf 3d 00 00 00\n31 f6\nba 80 a5 40 00\nb9 90 a5 40 00\n41 b8 f0 a5 40 00\ne8 a0 59 00 00\n48 89 43 40\n5b\nc3\n'
p1783
S'.text:0000000000404010\n.text:0000000000404011\n.text:0000000000404014\n.text:0000000000404019\n.text:000000000040401b\n.text:0000000000404020\n.text:0000000000404025\n.text:000000000040402b\n.text:0000000000404030\n.text:0000000000404034\n.text:0000000000404035\n'
p1784
tp1785
sS'cp_option_init'
p1786
(S'\n__stdcall cp_option_init(cp_options * x)\n'
p1787
V\u000avoid cp_option_init(cp_options *x)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  cp_options_default(x);\u000a  x->copy_as_regular = false;\u000a  x->reflink_mode = REFLINK_AUTO;\u000a  x->dereference = DEREF_NEVER;\u000a  x->unlink_dest_before_opening = false;\u000a  x->unlink_dest_after_failed_open = false;\u000a  x->hard_link = false;\u000a  x->interactive = I_UNSPECIFIED;\u000a  x->move_mode = true;\u000a  x->one_file_system = false;\u000a  x->preserve_ownership = true;\u000a  x->preserve_links = true;\u000a  x->preserve_mode = true;\u000a  x->preserve_timestamps = true;\u000a  x->explicit_no_preserve_mode = false;\u000a  x->preserve_security_context = false;\u000a  x->set_security_context = false;\u000a  x->reduce_diagnostics = false;\u000a  x->data_copy_required = true;\u000a  x->require_preserve = false;\u000a  x->require_preserve_context = false;\u000a  x->preserve_xattr = true;\u000a  x->require_preserve_xattr = false;\u000a  x->recursive = true;\u000a  x->sparse_mode = SPARSE_AUTO;\u000a  x->symbolic_link = false;\u000a  x->set_mode = false;\u000a  x->mode = 0;\u000a  iVar1 = isatty(0);\u000a  *(bool *)&x->stdin_tty = iVar1 != 0;\u000a  x->open_dangling_dest_symlink = false;\u000a  x->update = false;\u000a  x->verbose = false;\u000a  *(undefined4 *)&x->dest_info = 0;\u000a  *(undefined4 *)((long)&x->dest_info + 4) = 0;\u000a  *(undefined4 *)&x->src_info = 0;\u000a  *(undefined4 *)((long)&x->src_info + 4) = 0;\u000a  return;\u000a}\u000a\u000a
p1788
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00405be0\nMOV byte ptr [RBX + 0x14],0x0\nMOV dword ptr [RBX + 0x30],0x1\nMOV dword ptr [RBX + 0x4],0x2\nMOV byte ptr [RBX + 0x15],0x0\nMOV byte ptr [RBX + 0x16],0x0\nMOV byte ptr [RBX + 0x17],0x0\nMOV dword ptr [RBX + 0x8],0x4\nMOV byte ptr [RBX + 0x18],0x1\nMOV byte ptr [RBX + 0x1b],0x0\nMOV byte ptr [RBX + 0x1c],0x1\nMOV byte ptr [RBX + 0x21],0x1\nMOV byte ptr [RBX + 0x1d],0x1\nMOV byte ptr [RBX + 0x1e],0x1\nMOV byte ptr [RBX + 0x1f],0x0\nMOV byte ptr [RBX + 0x24],0x0\nMOV byte ptr [RBX + 0x20],0x0\nMOV byte ptr [RBX + 0x28],0x0\nMOV byte ptr [RBX + 0x22],0x1\nMOV byte ptr [RBX + 0x23],0x0\nMOV byte ptr [RBX + 0x25],0x0\nMOV byte ptr [RBX + 0x26],0x1\nMOV byte ptr [RBX + 0x27],0x0\nMOV byte ptr [RBX + 0x29],0x1\nMOV dword ptr [RBX + 0xc],0x2\nMOV byte ptr [RBX + 0x2b],0x0\nMOV byte ptr [RBX + 0x2a],0x0\nMOV dword ptr [RBX + 0x10],0x0\nXOR EDI,EDI\nCALL 0x004021a0\nTEST EAX,EAX\nSETNZ byte ptr [RBX + 0x2e]\nMOV byte ptr [RBX + 0x2f],0x0\nMOV byte ptr [RBX + 0x2c],0x0\nMOV byte ptr [RBX + 0x2d],0x0\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX + 0x38],XMM0\nPOP RBX\nRET\n'
p1789
S'53\n48 89 fb\ne8 e7 2a 00 00\nc6 43 14 00\nc7 43 30 01 00 00 00\nc7 43 04 02 00 00 00\nc6 43 15 00\nc6 43 16 00\nc6 43 17 00\nc7 43 08 04 00 00 00\nc6 43 18 01\nc6 43 1b 00\nc6 43 1c 01\nc6 43 21 01\nc6 43 1d 01\nc6 43 1e 01\nc6 43 1f 00\nc6 43 24 00\nc6 43 20 00\nc6 43 28 00\nc6 43 22 01\nc6 43 23 00\nc6 43 25 00\nc6 43 26 01\nc6 43 27 00\nc6 43 29 01\nc7 43 0c 02 00 00 00\nc6 43 2b 00\nc6 43 2a 00\nc7 43 10 00 00 00 00\n31 ff\ne8 25 f0 ff ff\n85 c0\n0f 95 43 2e\nc6 43 2f 00\nc6 43 2c 00\nc6 43 2d 00\n0f 57 c0\n0f 11 43 38\n5b\nc3\n'
p1790
S'.text:00000000004030f0\n.text:00000000004030f1\n.text:00000000004030f4\n.text:00000000004030f9\n.text:00000000004030fd\n.text:0000000000403104\n.text:000000000040310b\n.text:000000000040310f\n.text:0000000000403113\n.text:0000000000403117\n.text:000000000040311e\n.text:0000000000403122\n.text:0000000000403126\n.text:000000000040312a\n.text:000000000040312e\n.text:0000000000403132\n.text:0000000000403136\n.text:000000000040313a\n.text:000000000040313e\n.text:0000000000403142\n.text:0000000000403146\n.text:000000000040314a\n.text:000000000040314e\n.text:0000000000403152\n.text:0000000000403156\n.text:000000000040315a\n.text:000000000040315e\n.text:0000000000403165\n.text:0000000000403169\n.text:000000000040316d\n.text:0000000000403174\n.text:0000000000403176\n.text:000000000040317b\n.text:000000000040317d\n.text:0000000000403181\n.text:0000000000403185\n.text:0000000000403189\n.text:000000000040318d\n.text:0000000000403190\n.text:0000000000403194\n.text:0000000000403195\n'
p1791
tp1792
sS'fstat'
p1793
(S'\n__stdcall fstat(int __fd, stat * __buf)\n'
p1794
V\u000aint fstat(int __fd,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___fxstat_00619280)(1,(ulong)(uint)__fd,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p1795
S'MOV RDX,RSI\nMOV ESI,EDI\nMOV EDI,0x1\nJMP 0x00402580\n'
p1796
S'48 89 f2\n89 fe\nbf 01 00 00 00\ne9 81 11 ff ff\n'
p1797
S'.text:00000000004113f0\n.text:00000000004113f3\n.text:00000000004113f5\n.text:00000000004113fa\n'
p1798
tp1799
sS'leaf_optimization_applies'
p1800
(S'\n__stdcall leaf_optimization_applies()\n'
p1801
V\u000a_Bool leaf_optimization_applies(void)\u000a\u000a{\u000a  undefined uVar1;\u000a  int iVar2;\u000a  int __fildes;\u000a  statfs local_78;\u000a  \u000a  iVar2 = fstatfs(__fildes,&local_78);\u000a  if ((iVar2 != 0) ||\u000a     ((uVar1 = 1, local_78.f_type != 0x52654973 && (local_78.f_type != 0x58465342)))) {\u000a    uVar1 = 0;\u000a  }\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p1802
S'SUB RSP,0x78\nMOV RSI,RSP\nCALL 0x004026e0\nTEST EAX,EAX\nJZ 0x0040fbd7\nXOR EAX,EAX\nADD RSP,0x78\nRET\nMOV AL,0x1\nMOV RCX,qword ptr [RSP]\nCMP RCX,0x52654973\nJZ 0x0040fbd2\nCMP RCX,0x58465342\nJZ 0x0040fbd2\nJMP 0x0040fbd0\n'
p1803
S'48 83 ec 78\n48 89 e6\ne8 14 2b ff ff\n85 c0\n74 07\n31 c0\n48 83 c4 78\nc3\nb0 01\n48 8b 0c 24\n48 81 f9 73 49 65 52\n74 ec\n48 81 f9 42 53 46 58\n74 e3\neb df\n'
p1804
S'.text:000000000040fbc0\n.text:000000000040fbc4\n.text:000000000040fbc7\n.text:000000000040fbcc\n.text:000000000040fbce\n.text:000000000040fbd0\n.text:000000000040fbd2\n.text:000000000040fbd6\n.text:000000000040fbd7\n.text:000000000040fbd9\n.text:000000000040fbdd\n.text:000000000040fbe4\n.text:000000000040fbe6\n.text:000000000040fbed\n.text:000000000040fbef\n'
p1805
tp1806
sS'src_to_dest_compare'
p1807
(S'\n__stdcall src_to_dest_compare(void * x, void * y)\n'
p1808
V\u000a_Bool src_to_dest_compare(void *x,void *y)\u000a\u000a{\u000a  if (*(long *)x == *(long *)y) {\u000a    return (_Bool)(*(long *)((long)x + 8) == *(long *)((long)y + 8));\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1809
S'MOV RAX,qword ptr [RDI]\nCMP RAX,qword ptr [RSI]\nJNZ 0x00408364\nMOV RAX,qword ptr [RDI + 0x8]\nCMP RAX,qword ptr [RSI + 0x8]\nSETZ AL\nRET\nXOR EAX,EAX\nRET\n'
p1810
S'48 8b 07\n48 3b 06\n75 0c\n48 8b 47 08\n48 3b 46 08\n0f 94 c0\nc3\n31 c0\nc3\n'
p1811
S'.text:0000000000408350\n.text:0000000000408353\n.text:0000000000408356\n.text:0000000000408358\n.text:000000000040835c\n.text:0000000000408360\n.text:0000000000408363\n.text:0000000000408364\n.text:0000000000408366\n'
p1812
tp1813
sS'sparse_copy'
p1814
(S'\n__stdcall sparse_copy(char * buf, size_t buf_size, size_t hole_size, char * src_name, uintmax_t max_n_read, off_t * total_n_read, _Bool * last_write_made_hole)\n'
p1815
V\u000a_Bool sparse_copy(char *buf,size_t buf_size,size_t hole_size,char *src_name,uintmax_t max_n_read,\u000a                 off_t *total_n_read,_Bool *last_write_made_hole)\u000a\u000a{\u000a  uint uVar1;\u000a  bool bVar2;\u000a  _Bool _Var3;\u000a  _Bool _Var4;\u000a  char *pcVar5;\u000a  undefined8 uVar6;\u000a  char *pcVar7;\u000a  uint *puVar8;\u000a  char *pcVar9;\u000a  ulong uVar10;\u000a  void *buf_00;\u000a  char *length;\u000a  byte bVar11;\u000a  byte bVar12;\u000a  char *__nbytes;\u000a  bool bVar13;\u000a  bool bVar14;\u000a  off_t size;\u000a  char *in_stack_00000018;\u000a  char **in_stack_00000020;\u000a  byte *in_stack_00000028;\u000a  char *local_80;\u000a  void *local_68;\u000a  \u000a  *in_stack_00000028 = 0;\u000a  *in_stack_00000020 = (char *)0x0;\u000a  pcVar7 = src_name;\u000a  if (max_n_read != 0) {\u000a    pcVar7 = (char *)max_n_read;\u000a  }\u000a  local_80 = (char *)0x0;\u000a  _Var3 = false;\u000a  do {\u000a    __nbytes = src_name;\u000a    if (in_stack_00000018 < src_name) {\u000a      __nbytes = in_stack_00000018;\u000a    }\u000a    while( true ) {\u000a      if (in_stack_00000018 == (char *)0x0) goto LAB_00407e90;\u000a      pcVar9 = (char *)read((int)buf,(void *)hole_size,(size_t)__nbytes);\u000a      if (-1 < (long)pcVar9) break;\u000a      puVar8 = (uint *)__errno_location();\u000a      uVar1 = *puVar8;\u000a      if (uVar1 != 4) {\u000a        uVar6 = dcgettext(0,"error reading %s",5);\u000a        pcVar7 = quotearg_style((char *)0x4);\u000a        uVar10 = (ulong)uVar1;\u000a        goto LAB_00407f70;\u000a      }\u000a    }\u000a    if (pcVar9 == (char *)0x0) {\u000aLAB_00407e90:\u000a      if (((_Var3 & 1U) != 0) &&\u000a         (_Var3 = create_hole((char *)(buf_size & 0xffffffff),size), _Var3 == false)) {\u000a        return false;\u000a      }\u000a      return true;\u000a    }\u000a    in_stack_00000018 = in_stack_00000018 + -(long)pcVar9;\u000a    *in_stack_00000020 = pcVar9 + (long)*in_stack_00000020;\u000a    __nbytes = pcVar7;\u000a    buf_00 = (void *)hole_size;\u000a    local_68 = (void *)hole_size;\u000a    bVar11 = _Var3 & 1;\u000a    do {\u000a      length = pcVar9;\u000a      if (__nbytes < pcVar9) {\u000a        length = __nbytes;\u000a      }\u000a      if ((max_n_read != 0) && (length != (char *)0x0)) {\u000a        _Var3 = is_nul(buf_00,(size_t)length);\u000a      }\u000a      bVar12 = _Var3 & 1;\u000a      bVar13 = bVar12 != bVar11;\u000a      bVar14 = local_80 != (char *)0x0;\u000a      bVar2 = pcVar9 <= __nbytes;\u000a      if ((bVar14 && bVar13) || (length == (char *)0x0 || bVar12 == 0 && bVar2)) {\u000a        __nbytes = length;\u000a        if (bVar14 && bVar13) {\u000a          __nbytes = (char *)0x0;\u000a        }\u000a        if (bVar11 == 0) {\u000a          pcVar5 = (char *)full_write((void *)(buf_size & 0xffffffff),(size_t)local_68);\u000a          if (pcVar5 != __nbytes + (long)local_80) {\u000a            puVar8 = (uint *)__errno_location();\u000a            uVar1 = *puVar8;\u000a            uVar6 = dcgettext(0,"error writing %s",5);\u000a            pcVar7 = quotearg_style((char *)0x4);\u000a            uVar10 = (ulong)uVar1;\u000aLAB_00407f70:\u000a            error(0,uVar10,uVar6,pcVar7);\u000a            return false;\u000a          }\u000a        }\u000a        else {\u000a          _Var4 = create_hole((char *)(buf_size & 0xffffffff),size);\u000a          if (_Var4 == false) {\u000a            return false;\u000a          }\u000a        }\u000a        local_80 = length;\u000a        __nbytes = length;\u000a        local_68 = buf_00;\u000a        if (length == (char *)0x0 || bVar12 == 0 && bVar2) {\u000a          if (length == (char *)0x0) {\u000a            pcVar9 = length;\u000a          }\u000a          if (bVar14 && bVar13) {\u000a            local_80 = length;\u000a            __nbytes = (char *)0x0;\u000a            local_68 = buf_00;\u000a          }\u000a          else {\u000a            local_80 = (char *)0x0;\u000a            __nbytes = length;\u000a            local_68 = buf_00;\u000a          }\u000a        }\u000a      }\u000a      else {\u000a        if ((char *)(0x7fffffffffffffffU - (long)length) < local_80) {\u000a          uVar6 = dcgettext(0,"overflow reading %s",5);\u000a          pcVar7 = quotearg_style((char *)0x4);\u000a          uVar10 = 0;\u000a          goto LAB_00407f70;\u000a        }\u000a        local_80 = local_80 + (long)length;\u000a        __nbytes = length;\u000a      }\u000a      buf_00 = (void *)((long)buf_00 + (long)__nbytes);\u000a      pcVar9 = pcVar9 + -(long)__nbytes;\u000a      bVar11 = bVar12;\u000a    } while (pcVar9 != (char *)0x0);\u000a    *in_stack_00000028 = bVar12;\u000a  } while( true );\u000a}\u000a\u000a
p1816
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x58\nMOV dword ptr [RSP + 0x1c],R9D\nMOV R15,R8\nMOV R12,RCX\nMOV R13,RDX\nMOV dword ptr [RSP + 0x4],ESI\nMOV dword ptr [RSP + 0x44],EDI\nMOV RAX,qword ptr [0xb0 + RSP]\nMOV RDX,qword ptr [0xa8 + RSP]\nMOV RSI,qword ptr [0xa0 + RSP]\nMOV R14,qword ptr [0x90 + RSP]\nMOV byte ptr [RAX],0x0\nMOV qword ptr [RDX],0x0\nTEST R15,R15\nMOV RAX,R12\nCMOVNZ RAX,R15\nMOV qword ptr [RSP + 0x50],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nMOV qword ptr [RSP + 0x30],R13\nMOV qword ptr [RSP + 0x48],R12\nJMP 0x00407ca0\nMOV qword ptr [RSP + 0x8],RCX\nMOV qword ptr [RSP + 0x10],R8\nMOV RAX,qword ptr [0xb0 + RSP]\nMOV byte ptr [RAX],R14B\nMOV R14,qword ptr [0x90 + RSP]\nMOV R12,qword ptr [RSP + 0x48]\nMOV RSI,qword ptr [RSP + 0x38]\nNOP\nCMP RSI,R12\nCMOVC R12,RSI\nMOV qword ptr [RSP + 0x38],RSI\nNOP dword ptr [RAX]\nTEST RSI,RSI\nJZ 0x00407e90\nMOV EDI,dword ptr [RSP + 0x44]\nMOV RSI,R13\nMOV RDX,R12\nCALL 0x00402410\nMOV RBX,RAX\nTEST RBX,RBX\nJNS 0x00407cf0\nCALL 0x00402100\nMOV EBP,dword ptr [RAX]\nCMP EBP,0x4\nMOV RSI,qword ptr [RSP + 0x38]\nJZ 0x00407cb0\nJMP 0x00407ebe\nJZ 0x00407e90\nSUB qword ptr [RSP + 0x38],RBX\nMOV RAX,qword ptr [0xa8 + RSP]\nADD qword ptr [RAX],RBX\nMOV R8,qword ptr [RSP + 0x10]\nMOV R14D,R8D\nAND R14B,0x1\nMOV qword ptr [RSP + 0x20],R13\nMOV RDI,R13\nMOV RBP,qword ptr [RSP + 0x50]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RSP + 0x28],R15\nNOP dword ptr [RAX]\nMOV R9D,R14D\nCMP RBP,RBX\nMOV R12,RBX\nCMOVC R12,RBP\nTEST R15,R15\nJZ 0x00407d69\nTEST R12,R12\nJZ 0x00407d69\nMOV RSI,R12\nMOV R14,RCX\nMOV R13,RDI\nMOV R15D,R9D\nCALL 0x00408190\nMOV R9D,R15D\nMOV R15,qword ptr [RSP + 0x28]\nMOV RDI,R13\nMOV RCX,R14\nMOV R8B,AL\nMOV R14D,R8D\nAND R14B,0x1\nCMP R14B,R9B\nSETNZ AL\nMOV RSI,RCX\nTEST RCX,RCX\nSETNZ R13B\nCMP RBX,RBP\nSETBE CL\nTEST R14B,R14B\nSETZ DL\nAND DL,CL\nTEST R12,R12\nSETZ BPL\nOR BPL,DL\nAND R13B,AL\nJNZ 0x00407dd0\nTEST BPL,BPL\nJNZ 0x00407dd0\nMOV RAX,0x7fffffffffffffff\nSUB RAX,R12\nMOV RCX,RSI\nCMP RCX,RAX\nMOV R13,qword ptr [RSP + 0x30]\nJA 0x00407ef8\nADD RCX,R12\nJMP 0x00407e7c\nMOV qword ptr [RSP + 0x8],RDI\nMOV qword ptr [RSP + 0x10],R8\nTEST R13B,0x1\nMOV R15,R12\nMOV EAX,0x0\nCMOVNZ R15,RAX\nADD R15,RSI\nTEST R9B,R9B\nJZ 0x00407e14\nMOVZX EDX,byte ptr [RSP + 0x1c]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV RSI,qword ptr [0x98 + RSP]\nMOV RCX,R15\nCALL 0x00407fd0\nTEST AL,AL\nJNZ 0x00407e2e\nJMP 0x00407f2f\nMOV EDI,dword ptr [RSP + 0x4]\nMOV RSI,qword ptr [RSP + 0x20]\nMOV RDX,R15\nCALL 0x00409540\nCMP RAX,R15\nJNZ 0x00407f34\nTEST BPL,BPL\nJZ 0x00407e60\nTEST R12,R12\nCMOVZ RBX,R12\nAND R13B,0x1\nMOV RAX,R12\nMOV ECX,0x0\nCMOVNZ RAX,RCX\nTEST R13B,R13B\nCMOVZ R12,RCX\nMOV RCX,R12\nMOV R12,RAX\nJMP 0x00407e63\nMOV RCX,R12\nMOV RDI,qword ptr [RSP + 0x8]\nMOV qword ptr [RSP + 0x20],RDI\nMOV R15,qword ptr [RSP + 0x28]\nMOV R13,qword ptr [RSP + 0x30]\nMOV R8,qword ptr [RSP + 0x10]\nADD RDI,R12\nSUB RBX,R12\nMOV RBP,R12\nJNZ 0x00407d30\nJMP 0x00407c77\nTEST byte ptr [RSP + 0x10],0x1\nJZ 0x00407eb6\nMOVZX EDX,byte ptr [RSP + 0x1c]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV RSI,qword ptr [0x98 + RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nCALL 0x00407fd0\nTEST AL,AL\nJZ 0x00407ef3\nMOV R14B,0x1\nJMP 0x00407f75\nMOV RBX,R14\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x4130ab\nMOV EDX,0x5\nCALL 0x00402270\nMOV R15,RAX\nMOV EDI,0x4\nMOV RSI,RBX\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,R15\nJMP 0x00407f70\nXOR R14D,R14D\nJMP 0x00407f75\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x4130cd\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [0x90 + RSP]\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nJMP 0x00407f70\nXOR R14D,R14D\nJMP 0x00407f75\nCALL 0x00402100\nMOV EBX,dword ptr [RAX]\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x4130bc\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [0x98 + RSP]\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00402640\nMOV EAX,R14D\nADD RSP,0x58\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1817
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 58\n44 89 4c 24 1c\n4d 89 c7\n49 89 cc\n49 89 d5\n89 74 24 04\n89 7c 24 44\n48 8b 84 24 b0 00 00 00\n48 8b 94 24 a8 00 00 00\n48 8b b4 24 a0 00 00 00\n4c 8b b4 24 90 00 00 00\nc6 00 00\n48 c7 02 00 00 00 00\n4d 85 ff\n4c 89 e0\n49 0f 45 c7\n48 89 44 24 50\n31 c0\n48 89 44 24 08\n31 c0\n48 89 44 24 10\n4c 89 6c 24 30\n4c 89 64 24 48\neb 29\n48 89 4c 24 08\n4c 89 44 24 10\n48 8b 84 24 b0 00 00 00\n44 88 30\n4c 8b b4 24 90 00 00 00\n4c 8b 64 24 48\n48 8b 74 24 38\n66 90\n4c 39 e6\n4c 0f 42 e6\n48 89 74 24 38\n0f 1f 40 00\n48 85 f6\n0f 84 d7 01 00 00\n8b 7c 24 44\n4c 89 ee\n4c 89 e2\ne8 48 a7 ff ff\n48 89 c3\n48 85 db\n79 20\ne8 2b a4 ff ff\n8b 28\n83 fd 04\n48 8b 74 24 38\n74 cf\ne9 d8 01 00 00\n0f 84 9a 01 00 00\n48 29 5c 24 38\n48 8b 84 24 a8 00 00 00\n48 01 18\n4c 8b 44 24 10\n45 89 c6\n41 80 e6 01\n4c 89 6c 24 20\n4c 89 ef\n48 8b 6c 24 50\n48 8b 4c 24 08\n4c 89 7c 24 28\n0f 1f 80 00 00 00 00\n45 89 f1\n48 39 dd\n49 89 dc\n4c 0f 42 e5\n4d 85 ff\n74 27\n4d 85 e4\n74 22\n4c 89 e6\n49 89 ce\n49 89 fd\n45 89 cf\ne8 38 04 00 00\n45 89 f9\n4c 8b 7c 24 28\n4c 89 ef\n4c 89 f1\n41 88 c0\n45 89 c6\n41 80 e6 01\n45 38 ce\n0f 95 c0\n48 89 ce\n48 85 c9\n41 0f 95 c5\n48 39 eb\n0f 96 c1\n45 84 f6\n0f 94 c2\n20 ca\n4d 85 e4\n40 0f 94 c5\n40 08 d5\n41 20 c5\n75 33\n40 84 ed\n75 2e\n48 b8 ff ff ff ff ff ff ff 7f\n4c 29 e0\n48 89 f1\n48 39 c1\n4c 8b 6c 24 30\n0f 87 38 01 00 00\n4c 01 e1\ne9 b4 00 00 00\n48 89 7c 24 08\n4c 89 44 24 10\n41 f6 c5 01\n4d 89 e7\nb8 00 00 00 00\n4c 0f 45 f8\n49 01 f7\n45 84 c9\n74 22\n0f b6 54 24 1c\n8b 7c 24 04\n48 8b b4 24 98 00 00 00\n4c 89 f9\ne8 c5 01 00 00\n84 c0\n75 1f\ne9 1b 01 00 00\n8b 7c 24 04\n48 8b 74 24 20\n4c 89 fa\ne8 1b 17 00 00\n4c 39 f8\n0f 85 06 01 00 00\n40 84 ed\n74 2d\n4d 85 e4\n49 0f 44 dc\n41 80 e5 01\n4c 89 e0\nb9 00 00 00 00\n48 0f 45 c1\n45 84 ed\n4c 0f 44 e1\n4c 89 e1\n49 89 c4\neb 0a\n4c 89 e1\n48 8b 7c 24 08\n48 89 7c 24 20\n4c 8b 7c 24 28\n4c 8b 6c 24 30\n4c 8b 44 24 10\n4c 01 e7\n4c 29 e3\n4c 89 e5\n0f 85 a5 fe ff ff\ne9 e7 fd ff ff\nf6 44 24 10 01\n74 1f\n0f b6 54 24 1c\n8b 7c 24 04\n48 8b b4 24 98 00 00 00\n48 8b 4c 24 08\ne8 1e 01 00 00\n84 c0\n74 3d\n41 b6 01\ne9 b7 00 00 00\n4c 89 f3\n45 31 f6\n31 ff\nbe ab 30 41 00\nba 05 00 00 00\ne8 9b a3 ff ff\n49 89 c7\nbf 04 00 00 00\n48 89 de\ne8 7b 3a 00 00\n48 89 c1\n31 ff\n31 c0\n89 ee\n4c 89 fa\neb 7d\n45 31 f6\neb 7d\n45 31 f6\n31 ff\nbe cd 30 41 00\nba 05 00 00 00\ne8 64 a3 ff ff\n48 89 c3\nbf 04 00 00 00\n48 8b b4 24 90 00 00 00\ne8 3f 3a 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\neb 41\n45 31 f6\neb 41\ne8 c7 a1 ff ff\n8b 18\n45 31 f6\n31 ff\nbe bc 30 41 00\nba 05 00 00 00\ne8 21 a3 ff ff\n48 89 c5\nbf 04 00 00 00\n48 8b b4 24 98 00 00 00\ne8 fc 39 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 cb a6 ff ff\n44 89 f0\n48 83 c4 58\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1818
S'.text:0000000000407c00\n.text:0000000000407c01\n.text:0000000000407c03\n.text:0000000000407c05\n.text:0000000000407c07\n.text:0000000000407c09\n.text:0000000000407c0a\n.text:0000000000407c0e\n.text:0000000000407c13\n.text:0000000000407c16\n.text:0000000000407c19\n.text:0000000000407c1c\n.text:0000000000407c20\n.text:0000000000407c24\n.text:0000000000407c2c\n.text:0000000000407c34\n.text:0000000000407c3c\n.text:0000000000407c44\n.text:0000000000407c47\n.text:0000000000407c4e\n.text:0000000000407c51\n.text:0000000000407c54\n.text:0000000000407c58\n.text:0000000000407c5d\n.text:0000000000407c5f\n.text:0000000000407c64\n.text:0000000000407c66\n.text:0000000000407c6b\n.text:0000000000407c70\n.text:0000000000407c75\n.text:0000000000407c77\n.text:0000000000407c7c\n.text:0000000000407c81\n.text:0000000000407c89\n.text:0000000000407c8c\n.text:0000000000407c94\n.text:0000000000407c99\n.text:0000000000407c9e\n.text:0000000000407ca0\n.text:0000000000407ca3\n.text:0000000000407ca7\n.text:0000000000407cac\n.text:0000000000407cb0\n.text:0000000000407cb3\n.text:0000000000407cb9\n.text:0000000000407cbd\n.text:0000000000407cc0\n.text:0000000000407cc3\n.text:0000000000407cc8\n.text:0000000000407ccb\n.text:0000000000407cce\n.text:0000000000407cd0\n.text:0000000000407cd5\n.text:0000000000407cd7\n.text:0000000000407cda\n.text:0000000000407cdf\n.text:0000000000407ce1\n.text:0000000000407cf0\n.text:0000000000407cf6\n.text:0000000000407cfb\n.text:0000000000407d03\n.text:0000000000407d06\n.text:0000000000407d0b\n.text:0000000000407d0e\n.text:0000000000407d12\n.text:0000000000407d17\n.text:0000000000407d1a\n.text:0000000000407d1f\n.text:0000000000407d24\n.text:0000000000407d29\n.text:0000000000407d30\n.text:0000000000407d33\n.text:0000000000407d36\n.text:0000000000407d39\n.text:0000000000407d3d\n.text:0000000000407d40\n.text:0000000000407d42\n.text:0000000000407d45\n.text:0000000000407d47\n.text:0000000000407d4a\n.text:0000000000407d4d\n.text:0000000000407d50\n.text:0000000000407d53\n.text:0000000000407d58\n.text:0000000000407d5b\n.text:0000000000407d60\n.text:0000000000407d63\n.text:0000000000407d66\n.text:0000000000407d69\n.text:0000000000407d6c\n.text:0000000000407d70\n.text:0000000000407d73\n.text:0000000000407d76\n.text:0000000000407d79\n.text:0000000000407d7c\n.text:0000000000407d80\n.text:0000000000407d83\n.text:0000000000407d86\n.text:0000000000407d89\n.text:0000000000407d8c\n.text:0000000000407d8e\n.text:0000000000407d91\n.text:0000000000407d95\n.text:0000000000407d98\n.text:0000000000407d9b\n.text:0000000000407d9d\n.text:0000000000407da0\n.text:0000000000407da2\n.text:0000000000407dac\n.text:0000000000407daf\n.text:0000000000407db2\n.text:0000000000407db5\n.text:0000000000407dba\n.text:0000000000407dc0\n.text:0000000000407dc3\n.text:0000000000407dd0\n.text:0000000000407dd5\n.text:0000000000407dda\n.text:0000000000407dde\n.text:0000000000407de1\n.text:0000000000407de6\n.text:0000000000407dea\n.text:0000000000407ded\n.text:0000000000407df0\n.text:0000000000407df2\n.text:0000000000407df7\n.text:0000000000407dfb\n.text:0000000000407e03\n.text:0000000000407e06\n.text:0000000000407e0b\n.text:0000000000407e0d\n.text:0000000000407e0f\n.text:0000000000407e14\n.text:0000000000407e18\n.text:0000000000407e1d\n.text:0000000000407e20\n.text:0000000000407e25\n.text:0000000000407e28\n.text:0000000000407e2e\n.text:0000000000407e31\n.text:0000000000407e33\n.text:0000000000407e36\n.text:0000000000407e3a\n.text:0000000000407e3e\n.text:0000000000407e41\n.text:0000000000407e46\n.text:0000000000407e4a\n.text:0000000000407e4d\n.text:0000000000407e51\n.text:0000000000407e54\n.text:0000000000407e57\n.text:0000000000407e60\n.text:0000000000407e63\n.text:0000000000407e68\n.text:0000000000407e6d\n.text:0000000000407e72\n.text:0000000000407e77\n.text:0000000000407e7c\n.text:0000000000407e7f\n.text:0000000000407e82\n.text:0000000000407e85\n.text:0000000000407e8b\n.text:0000000000407e90\n.text:0000000000407e95\n.text:0000000000407e97\n.text:0000000000407e9c\n.text:0000000000407ea0\n.text:0000000000407ea8\n.text:0000000000407ead\n.text:0000000000407eb2\n.text:0000000000407eb4\n.text:0000000000407eb6\n.text:0000000000407eb9\n.text:0000000000407ebe\n.text:0000000000407ec1\n.text:0000000000407ec4\n.text:0000000000407ec6\n.text:0000000000407ecb\n.text:0000000000407ed0\n.text:0000000000407ed5\n.text:0000000000407ed8\n.text:0000000000407edd\n.text:0000000000407ee0\n.text:0000000000407ee5\n.text:0000000000407ee8\n.text:0000000000407eea\n.text:0000000000407eec\n.text:0000000000407eee\n.text:0000000000407ef1\n.text:0000000000407ef3\n.text:0000000000407ef6\n.text:0000000000407ef8\n.text:0000000000407efb\n.text:0000000000407efd\n.text:0000000000407f02\n.text:0000000000407f07\n.text:0000000000407f0c\n.text:0000000000407f0f\n.text:0000000000407f14\n.text:0000000000407f1c\n.text:0000000000407f21\n.text:0000000000407f24\n.text:0000000000407f26\n.text:0000000000407f28\n.text:0000000000407f2a\n.text:0000000000407f2d\n.text:0000000000407f2f\n.text:0000000000407f32\n.text:0000000000407f34\n.text:0000000000407f39\n.text:0000000000407f3b\n.text:0000000000407f3e\n.text:0000000000407f40\n.text:0000000000407f45\n.text:0000000000407f4a\n.text:0000000000407f4f\n.text:0000000000407f52\n.text:0000000000407f57\n.text:0000000000407f5f\n.text:0000000000407f64\n.text:0000000000407f67\n.text:0000000000407f69\n.text:0000000000407f6b\n.text:0000000000407f6d\n.text:0000000000407f70\n.text:0000000000407f75\n.text:0000000000407f78\n.text:0000000000407f7c\n.text:0000000000407f7d\n.text:0000000000407f7f\n.text:0000000000407f81\n.text:0000000000407f83\n.text:0000000000407f85\n.text:0000000000407f86\n'
p1819
tp1820
sS'close_stdout_set_ignore_EPIPE'
p1821
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p1822
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p1823
S'MOV byte ptr [0x006198c8],DIL\nRET\n'
p1824
S'40 88 3d d1 0a 21 00\nc3\n'
p1825
S'.text:0000000000408df0\n.text:0000000000408df7\n'
p1826
tp1827
sS'hash_get_n_buckets_used'
p1828
(S'\n__stdcall hash_get_n_buckets_used(Hash_table * table)\n'
p1829
V\u000asize_t hash_get_n_buckets_used(Hash_table *table)\u000a\u000a{\u000a  return table->n_buckets_used;\u000a}\u000a\u000a
p1830
S'MOV RAX,qword ptr [RDI + 0x18]\nRET\n'
p1831
S'48 8b 47 18\nc3\n'
p1832
S'.text:00000000004095b0\n.text:00000000004095b4\n'
p1833
tp1834
sS'iswprint'
p1835
(S'\n__stdcall iswprint(wint_t __wc)\n'
p1836
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_00619370)();\u000a  return iVar1;\u000a}\u000a\u000a
p1837
S'JMP qword ptr [0x00619370]\n'
p1838
S'ff 25 0a 6c 21 00\n'
p1839
S'.plt:0000000000402760\n'
p1840
tp1841
sS'ftruncate'
p1842
(S'\n__stdcall ftruncate(int __fd, __off_t __length)\n'
p1843
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ftruncate(int __fd,__off_t __length)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ftruncate_00619150)();\u000a  return iVar1;\u000a}\u000a\u000a
p1844
S'JMP qword ptr [0x00619150]\n'
p1845
S'ff 25 2a 6e 21 00\n'
p1846
S'.plt:0000000000402320\n'
p1847
tp1848
sS'openat_safer'
p1849
(S'\n__stdcall openat_safer(char * file)\n'
p1850
V\u000a/* WARNING: Removing unreachable block (ram,0x00410dd8) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff60 : 0x00410de6 */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint openat_safer(char *file,...)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  uint __oflag;\u000a  char *__file;\u000a  va_list ap;\u000a  uint local_a0;\u000a  \u000a  uVar2 = 0;\u000a  if ((__oflag & 0x40) != 0) {\u000a    uVar2 = (ulong)local_a0;\u000a  }\u000a  openat((int)file,__file,__oflag,uVar2);\u000a  iVar1 = fd_safer();\u000a  return iVar1;\u000a}\u000a\u000a
p1851
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00410d82\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nXOR ECX,ECX\nTEST DL,0x40\nJZ 0x00410de8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x18\nMOVSXD RCX,dword ptr [RSP]\nCMP RCX,0x28\nJA 0x00410dd8\nMOV RAX,RCX\nADD RAX,qword ptr [RSP + 0x10]\nLEA ECX,[RCX + 0x8]\nMOV dword ptr [RSP],ECX\nJMP 0x00410de6\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RCX,[RAX + 0x8]\nMOV qword ptr [RSP + 0x8],RCX\nMOV ECX,dword ptr [RAX]\nXOR EAX,EAX\nCALL 0x004022b0\nMOV EDI,EAX\nCALL 0x0040c720\nADD RSP,0xd8\nRET\n'
p1852
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n31 c9\nf6 c2 40\n74 50\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 18 00 00 00\n48 63 0c 24\n48 83 f9 28\n77 10\n48 89 c8\n48 03 44 24 10\n8d 49 08\n89 0c 24\neb 0e\n48 8b 44 24 08\n48 8d 48 08\n48 89 4c 24 08\n8b 08\n31 c0\ne8 c1 14 ff ff\n89 c7\ne8 2a b9 ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p1853
S'.text:0000000000410d40\n.text:0000000000410d47\n.text:0000000000410d49\n.text:0000000000410d4b\n.text:0000000000410d50\n.text:0000000000410d55\n.text:0000000000410d5a\n.text:0000000000410d62\n.text:0000000000410d6a\n.text:0000000000410d72\n.text:0000000000410d7a\n.text:0000000000410d82\n.text:0000000000410d87\n.text:0000000000410d8c\n.text:0000000000410d91\n.text:0000000000410d93\n.text:0000000000410d96\n.text:0000000000410d98\n.text:0000000000410d9d\n.text:0000000000410da2\n.text:0000000000410daa\n.text:0000000000410daf\n.text:0000000000410db7\n.text:0000000000410dbe\n.text:0000000000410dc2\n.text:0000000000410dc6\n.text:0000000000410dc8\n.text:0000000000410dcb\n.text:0000000000410dd0\n.text:0000000000410dd3\n.text:0000000000410dd6\n.text:0000000000410dd8\n.text:0000000000410ddd\n.text:0000000000410de1\n.text:0000000000410de6\n.text:0000000000410de8\n.text:0000000000410dea\n.text:0000000000410def\n.text:0000000000410df1\n.text:0000000000410df6\n.text:0000000000410dfd\n'
p1854
tp1855
sS'c_isspace'
p1856
(S'\n__stdcall c_isspace()\n'
p1857
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1858
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00410685\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1859
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1860
S'.text:0000000000410670\n.text:0000000000410673\n.text:0000000000410676\n.text:0000000000410678\n.text:000000000041067d\n.text:000000000041067f\n.text:0000000000410681\n.text:0000000000410684\n.text:0000000000410685\n.text:0000000000410687\n'
p1861
tp1862
sS'open'
p1863
(S'\n__stdcall open(char * __file, int __oflag)\n'
p1864
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_006192f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p1865
S'JMP qword ptr [0x006192f0]\n'
p1866
S'ff 25 8a 6c 21 00\n'
p1867
S'.plt:0000000000402660\n'
p1868
tp1869
sS'rotl16'
p1870
(S'\n__stdcall rotl16()\n'
p1871
V\u000auint16_t rotl16(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint16_t)\u000a         ((ushort)(in_EDI >> (0x10 - (byte)in_ESI & 0x1f)) |\u000a         (ushort)(in_EDI << ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p1872
S'MOV EAX,EDI\nMOV ECX,ESI\nSHL EAX,CL\nMOV ECX,0x10\nSUB ECX,ESI\nSHR EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p1873
S'89 f8\n89 f1\nd3 e0\nb9 10 00 00 00\n29 f1\nd3 ef\n09 c7\n89 f8\nc3\n'
p1874
S'.text:0000000000410510\n.text:0000000000410512\n.text:0000000000410514\n.text:0000000000410516\n.text:000000000041051b\n.text:000000000041051d\n.text:000000000041051f\n.text:0000000000410521\n.text:0000000000410523\n'
p1875
tp1876
sS'rm_option_init'
p1877
(S'\n__stdcall rm_option_init(rm_options * x)\n'
p1878
V\u000avoid rm_option_init(rm_options *x)\u000a\u000a{\u000a  uint uVar1;\u000a  dev_ino dev_ino_buf;\u000a  dev_ino *pdVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  \u000a  x->ignore_missing_files = false;\u000a  x->remove_empty_directories = true;\u000a  x->recursive = true;\u000a  x->one_file_system = false;\u000a  x->interactive = RMI_NEVER;\u000a  *(undefined2 *)&x->stdin_tty = 0;\u000a  x->require_restore_cwd = true;\u000a  pdVar2 = get_root_dev_ino((dev_ino *)&ram0x00619478);\u000a  x->root_dev_ino = pdVar2;\u000a  if (pdVar2 != (dev_ino *)0x0) {\u000a    return;\u000a  }\u000a  puVar3 = (uint *)__errno_location();\u000a  uVar1 = *puVar3;\u000a  uVar4 = dcgettext(0,"failed to get attributes of %s",5);\u000a  pcVar5 = quotearg_style((char *)0x4);\u000a  error(1,(ulong)uVar1,uVar4,pcVar5);\u000a  return;\u000a}\u000a\u000a
p1879
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV byte ptr [RBX],0x0\nMOV byte ptr [RBX + 0xa],0x1\nMOV byte ptr [RBX + 0x9],0x1\nMOV byte ptr [RBX + 0x8],0x0\nMOV dword ptr [RBX + 0x4],0x5\nMOV word ptr [RBX + 0x18],0x0\nMOV byte ptr [RBX + 0x1a],0x1\nMOV EDI,0x619478\nCALL 0x0040bf90\nMOV qword ptr [RBX + 0x10],RAX\nTEST RAX,RAX\nJZ 0x004033a0\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nCALL 0x00402100\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x412398\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV EDI,0x4\nMOV ESI,0x414467\nCALL 0x0040b960\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00402640\n'
p1880
S'55\n53\n50\n48 89 fb\nc6 03 00\nc6 43 0a 01\nc6 43 09 01\nc6 43 08 00\nc7 43 04 05 00 00 00\n66 c7 43 18 00 00\nc6 43 1a 01\nbf 78 94 61 00\ne8 00 8c 00 00\n48 89 43 10\n48 85 c0\n74 07\n48 83 c4 08\n5b\n5d\nc3\ne8 5b ed ff ff\n8b 28\n31 ff\nbe 98 23 41 00\nba 05 00 00 00\ne8 b8 ee ff ff\n48 89 c3\nbf 04 00 00 00\nbe 67 44 41 00\ne8 96 85 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 ee\n48 89 da\n48 83 c4 08\n5b\n5d\ne9 5c f2 ff ff\n'
p1881
S'.text:0000000000403360\n.text:0000000000403361\n.text:0000000000403362\n.text:0000000000403363\n.text:0000000000403366\n.text:0000000000403369\n.text:000000000040336d\n.text:0000000000403371\n.text:0000000000403375\n.text:000000000040337c\n.text:0000000000403382\n.text:0000000000403386\n.text:000000000040338b\n.text:0000000000403390\n.text:0000000000403394\n.text:0000000000403397\n.text:0000000000403399\n.text:000000000040339d\n.text:000000000040339e\n.text:000000000040339f\n.text:00000000004033a0\n.text:00000000004033a5\n.text:00000000004033a7\n.text:00000000004033a9\n.text:00000000004033ae\n.text:00000000004033b3\n.text:00000000004033b8\n.text:00000000004033bb\n.text:00000000004033c0\n.text:00000000004033c5\n.text:00000000004033ca\n.text:00000000004033cd\n.text:00000000004033d2\n.text:00000000004033d4\n.text:00000000004033d6\n.text:00000000004033d9\n.text:00000000004033dd\n.text:00000000004033de\n.text:00000000004033df\n'
p1882
tp1883
sS'close_stdin_set_file_name'
p1884
(S'\n__stdcall close_stdin_set_file_name(char * file)\n'
p1885
V\u000avoid close_stdin_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p1886
S'MOV qword ptr [0x006198b8],RDI\nRET\n'
p1887
S'48 89 3d b1 0b 21 00\nc3\n'
p1888
S'.text:0000000000408d00\n.text:0000000000408d07\n'
p1889
tp1890
sS'set_quoting_flags'
p1891
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p1892
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p1893
S'TEST RDI,RDI\nMOV ECX,0x6198e0\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p1894
S'48 85 ff\nb9 e0 98 61 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p1895
S'.text:000000000040a7e0\n.text:000000000040a7e3\n.text:000000000040a7e8\n.text:000000000040a7ec\n.text:000000000040a7ef\n.text:000000000040a7f2\n'
p1896
tp1897
sS'ignorable_ctx_err'
p1898
(S'\n__stdcall ignorable_ctx_err()\n'
p1899
V\u000a_Bool ignorable_ctx_err(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 0x3d || in_EDI == 0x5f);\u000a}\u000a\u000a
p1900
S'CMP EDI,0x5f\nSETZ CL\nCMP EDI,0x3d\nSETZ AL\nOR AL,CL\nRET\n'
p1901
S'83 ff 5f\n0f 94 c1\n83 ff 3d\n0f 94 c0\n08 c8\nc3\n'
p1902
S'.text:0000000000407720\n.text:0000000000407723\n.text:0000000000407726\n.text:0000000000407729\n.text:000000000040772c\n.text:000000000040772e\n'
p1903
tp1904
sS'__fprintf_chk'
p1905
(S'\n__stdcall __fprintf_chk()\n'
p1906
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_00619360)();\u000a  return;\u000a}\u000a\u000a
p1907
S'JMP qword ptr [0x00619360]\n'
p1908
S'ff 25 1a 6c 21 00\n'
p1909
S'.plt:0000000000402740\n'
p1910
tp1911
sS'get_charset_aliases'
p1912
(S'\n__stdcall get_charset_aliases()\n'
p1913
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00410c34_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00410c34_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00410c34_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00410c34_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_00410c34_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00410c34_caseD_9;\u000a      case -1:\u000a        goto switchD_00410c34_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_00410c8d:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_00410c93:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00410c34_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00410c93;\u000a  }\u000a  goto LAB_00410c8d;\u000a}\u000a\u000a
p1914
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x00619a48]\nTEST R15,R15\nJNZ 0x00410ca2\nMOV EDI,0x414314\nCALL 0x004020b0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00410a58\nCMP byte ptr [RBX],0x0\nJNZ 0x00410a5d\nMOV EBX,0x414324\nMOV RDI,RBX\nCALL 0x00402290\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00410a77\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00410a79\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00402540\nMOV R13,RAX\nTEST R13,R13\nJZ 0x00410acd\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x004024d0\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00410ad8\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00410af5\nMOV R15D,0x413b59\nJMP 0x00410c9b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00402660\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00410c8d\nMOV ESI,0x4122ed\nMOV EDI,EBP\nCALL 0x004025d0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00410c54\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00410c20\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x00402140\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x00402140\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00410c20\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00402570\nMOV ESI,0x414333\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00402380\nCMP EAX,0x2\nJL 0x00410c74\nMOV RDI,R12\nCALL 0x00402290\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x00402290\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00410bfd\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x004025c0\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00410b44\nJMP 0x00410c5d\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00402540\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00410b44\nJMP 0x00410c5d\nMOV RDI,RBX\nCALL 0x00402180\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00410b87\nJMP qword ptr [0x4141d8 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x00402180\nCMP EAX,-0x1\nJZ 0x00410c74\nCMP EAX,0xa\nJNZ 0x00410c40\nJMP 0x00410c20\nMOV EDI,EBP\nCALL 0x004023c0\nJMP 0x00410c8d\nMOV RDI,R15\nCALL 0x004020c0\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x004111a0\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00410c8d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00410c93\nMOV R15D,0x413b59\nMOV RDI,R13\nCALL 0x004020c0\nMOV qword ptr [0x00619a48],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1915
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 10 90 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 14 43 41 00\ne8 65 16 ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb 24 43 41 00\n48 89 df\ne8 2b 18 ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 b9 1a ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 33 1a ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf 59 3b 41 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 5c 1b ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe ed 22 41 00\n89 ef\ne8 b6 1a ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 db 15 ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 cb 15 ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 df 19 ff ff\nbe 33 43 41 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 da 17 ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 d9 16 ff ff\n49 89 c4\n48 89 ef\ne8 ce 16 ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 d6 19 ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 35 19 ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 58 15 ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd d8 41 41 00\n48 89 df\ne8 38 15 ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 65 17 ff ff\neb 30\n4c 89 ff\ne8 5b 14 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 24 05 00 00\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf 59 3b 41 00\n4c 89 ef\ne8 25 14 ff ff\n4c 89 3d a6 8d 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1916
S'.text:0000000000410a20\n.text:0000000000410a21\n.text:0000000000410a23\n.text:0000000000410a25\n.text:0000000000410a27\n.text:0000000000410a29\n.text:0000000000410a2a\n.text:0000000000410a31\n.text:0000000000410a38\n.text:0000000000410a3b\n.text:0000000000410a41\n.text:0000000000410a46\n.text:0000000000410a4b\n.text:0000000000410a4e\n.text:0000000000410a51\n.text:0000000000410a53\n.text:0000000000410a56\n.text:0000000000410a58\n.text:0000000000410a5d\n.text:0000000000410a60\n.text:0000000000410a65\n.text:0000000000410a68\n.text:0000000000410a6b\n.text:0000000000410a6d\n.text:0000000000410a72\n.text:0000000000410a75\n.text:0000000000410a77\n.text:0000000000410a79\n.text:0000000000410a7d\n.text:0000000000410a82\n.text:0000000000410a87\n.text:0000000000410a8a\n.text:0000000000410a8d\n.text:0000000000410a8f\n.text:0000000000410a92\n.text:0000000000410a95\n.text:0000000000410a98\n.text:0000000000410a9d\n.text:0000000000410aa0\n.text:0000000000410aa3\n.text:0000000000410aa6\n.text:0000000000410aa8\n.text:0000000000410aae\n.text:0000000000410ab8\n.text:0000000000410abd\n.text:0000000000410ac7\n.text:0000000000410acb\n.text:0000000000410acd\n.text:0000000000410ad3\n.text:0000000000410ad8\n.text:0000000000410ae2\n.text:0000000000410ae7\n.text:0000000000410af1\n.text:0000000000410af5\n.text:0000000000410afa\n.text:0000000000410afc\n.text:0000000000410aff\n.text:0000000000410b04\n.text:0000000000410b06\n.text:0000000000410b08\n.text:0000000000410b0e\n.text:0000000000410b13\n.text:0000000000410b15\n.text:0000000000410b1a\n.text:0000000000410b1d\n.text:0000000000410b20\n.text:0000000000410b26\n.text:0000000000410b2b\n.text:0000000000410b30\n.text:0000000000410b32\n.text:0000000000410b37\n.text:0000000000410b3a\n.text:0000000000410b3f\n.text:0000000000410b44\n.text:0000000000410b49\n.text:0000000000410b4c\n.text:0000000000410b4f\n.text:0000000000410b52\n.text:0000000000410b55\n.text:0000000000410b58\n.text:0000000000410b5d\n.text:0000000000410b60\n.text:0000000000410b65\n.text:0000000000410b68\n.text:0000000000410b6d\n.text:0000000000410b70\n.text:0000000000410b75\n.text:0000000000410b7a\n.text:0000000000410b7d\n.text:0000000000410b82\n.text:0000000000410b87\n.text:0000000000410b89\n.text:0000000000410b8c\n.text:0000000000410b91\n.text:0000000000410b96\n.text:0000000000410b98\n.text:0000000000410b9b\n.text:0000000000410b9e\n.text:0000000000410ba1\n.text:0000000000410ba6\n.text:0000000000410ba9\n.text:0000000000410baf\n.text:0000000000410bb2\n.text:0000000000410bb7\n.text:0000000000410bba\n.text:0000000000410bbd\n.text:0000000000410bc2\n.text:0000000000410bc5\n.text:0000000000410bca\n.text:0000000000410bcf\n.text:0000000000410bd2\n.text:0000000000410bd4\n.text:0000000000410bd8\n.text:0000000000410bdd\n.text:0000000000410be2\n.text:0000000000410be5\n.text:0000000000410bea\n.text:0000000000410bed\n.text:0000000000410bf2\n.text:0000000000410bf5\n.text:0000000000410bfb\n.text:0000000000410bfd\n.text:0000000000410c02\n.text:0000000000410c06\n.text:0000000000410c0b\n.text:0000000000410c0e\n.text:0000000000410c11\n.text:0000000000410c17\n.text:0000000000410c20\n.text:0000000000410c23\n.text:0000000000410c28\n.text:0000000000410c2b\n.text:0000000000410c2e\n.text:0000000000410c34\n.text:0000000000410c40\n.text:0000000000410c43\n.text:0000000000410c48\n.text:0000000000410c4b\n.text:0000000000410c4d\n.text:0000000000410c50\n.text:0000000000410c52\n.text:0000000000410c54\n.text:0000000000410c56\n.text:0000000000410c5b\n.text:0000000000410c5d\n.text:0000000000410c60\n.text:0000000000410c65\n.text:0000000000410c67\n.text:0000000000410c6c\n.text:0000000000410c6f\n.text:0000000000410c74\n.text:0000000000410c77\n.text:0000000000410c7c\n.text:0000000000410c81\n.text:0000000000410c84\n.text:0000000000410c86\n.text:0000000000410c8b\n.text:0000000000410c8d\n.text:0000000000410c93\n.text:0000000000410c96\n.text:0000000000410c9b\n.text:0000000000410ca2\n.text:0000000000410ca5\n.text:0000000000410cac\n.text:0000000000410cad\n.text:0000000000410caf\n.text:0000000000410cb1\n.text:0000000000410cb3\n.text:0000000000410cb5\n.text:0000000000410cb6\n'
p1917
tp1918
sS'nl_langinfo'
p1919
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p1920
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_00619270)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1921
S'JMP qword ptr [0x00619270]\n'
p1922
S'ff 25 0a 6d 21 00\n'
p1923
S'.plt:0000000000402560\n'
p1924
tp1925
sS'x2realloc'
p1926
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p1927
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p1928
S'MOV EDX,0x1\nJMP 0x0040d9c0\n'
p1929
S'ba 01 00 00 00\neb 89\n'
p1930
S'.text:000000000040da30\n.text:000000000040da35\n'
p1931
tp1932
sS'restore_cwd'
p1933
(S'\n__stdcall restore_cwd(saved_cwd * cwd)\n'
p1934
V\u000aint restore_cwd(saved_cwd *cwd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (-1 < cwd->desc) {\u000a    iVar1 = fchdir(cwd->desc);\u000a    return iVar1;\u000a  }\u000a  iVar1 = chdir_long(cwd->name);\u000a  return iVar1;\u000a}\u000a\u000a
p1935
S'MOV EAX,dword ptr [RDI]\nTEST EAX,EAX\nJS 0x00410e5d\nMOV EDI,EAX\nJMP 0x004025b0\nMOV RDI,qword ptr [RDI + 0x8]\nJMP 0x00410e90\n'
p1936
S'8b 07\n85 c0\n78 07\n89 c7\ne9 53 17 ff ff\n48 8b 7f 08\ne9 2a 00 00 00\n'
p1937
S'.text:0000000000410e50\n.text:0000000000410e52\n.text:0000000000410e54\n.text:0000000000410e56\n.text:0000000000410e58\n.text:0000000000410e5d\n.text:0000000000410e61\n'
p1938
tp1939
sS'set_stat_type'
p1940
(S'\n__stdcall set_stat_type(stat * st)\n'
p1941
V\u000avoid set_stat_type(stat *st)\u000a\u000a{\u000a  __mode_t _Var1;\u000a  int in_ESI;\u000a  \u000a  _Var1 = 0;\u000a  if (in_ESI - 1U < 0xc) {\u000a    _Var1 = *(__mode_t *)(&DAT_00413df0 + (long)(int)(in_ESI - 1U) * 4);\u000a  }\u000a  st->st_mode = _Var1;\u000a  return;\u000a}\u000a\u000a
p1942
S'DEC ESI\nXOR EAX,EAX\nCMP ESI,0xb\nJA 0x0040fc73\nMOVSXD RAX,ESI\nMOV EAX,dword ptr [0x413df0 + RAX*0x4]\nMOV dword ptr [RDI + 0x18],EAX\nRET\n'
p1943
S'ff ce\n31 c0\n83 fe 0b\n77 0a\n48 63 c6\n8b 04 85 f0 3d 41 00\n89 47 18\nc3\n'
p1944
S'.text:000000000040fc60\n.text:000000000040fc62\n.text:000000000040fc64\n.text:000000000040fc67\n.text:000000000040fc69\n.text:000000000040fc6c\n.text:000000000040fc73\n.text:000000000040fc76\n'
p1945
tp1946
sS'quotearg_n_style_mem'
p1947
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p1948
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p1949
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x0040b8c0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x0040b690\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1950
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1951
S'.text:000000000040b920\n.text:000000000040b921\n.text:000000000040b923\n.text:000000000040b925\n.text:000000000040b926\n.text:000000000040b92a\n.text:000000000040b92d\n.text:000000000040b930\n.text:000000000040b932\n.text:000000000040b935\n.text:000000000040b938\n.text:000000000040b93d\n.text:000000000040b93f\n.text:000000000040b942\n.text:000000000040b945\n.text:000000000040b948\n.text:000000000040b94d\n.text:000000000040b951\n.text:000000000040b952\n.text:000000000040b954\n.text:000000000040b956\n.text:000000000040b957\n'
p1952
tp1953
sS'free_entry'
p1954
(S'\n__stdcall free_entry(Hash_table * table, hash_entry * entry)\n'
p1955
V\u000avoid free_entry(Hash_table *table,hash_entry *entry)\u000a\u000a{\u000a  entry->data = (void *)0x0;\u000a  entry->next = table->free_entry_list;\u000a  table->free_entry_list = entry;\u000a  return;\u000a}\u000a\u000a
p1956
S'MOV qword ptr [RSI],0x0\nMOV RAX,qword ptr [RDI + 0x48]\nMOV qword ptr [RSI + 0x8],RAX\nMOV qword ptr [RDI + 0x48],RSI\nRET\n'
p1957
S'48 c7 06 00 00 00 00\n48 8b 47 48\n48 89 46 08\n48 89 77 48\nc3\n'
p1958
S'.text:000000000040a530\n.text:000000000040a537\n.text:000000000040a53b\n.text:000000000040a53f\n.text:000000000040a543\n'
p1959
tp1960
sS'unlinkat'
p1961
(S'\n__stdcall unlinkat(int __fd, char * __name, int __flag)\n'
p1962
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint unlinkat(int __fd,char *__name,int __flag)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_unlinkat_00619078)();\u000a  return iVar1;\u000a}\u000a\u000a
p1963
S'JMP qword ptr [0x00619078]\n'
p1964
S'ff 25 02 6f 21 00\n'
p1965
S'.plt:0000000000402170\n'
p1966
tp1967
sS'argmatch_valid'
p1968
(S'\n__stdcall argmatch_valid(char * * arglist, char * vallist, size_t valsize)\n'
p1969
V\u000avoid argmatch_valid(char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  int iVar2;\u000a  char *__s;\u000a  char *__s1;\u000a  long lVar3;\u000a  \u000a  __s = (char *)dcgettext(0,"Valid arguments are:",5);\u000a  fputs_unlocked(__s,stderr);\u000a  __s = *arglist;\u000a  if (__s != (char *)0x0) {\u000a    __s1 = (char *)0x0;\u000a    lVar3 = 0;\u000a    do {\u000a      pFVar1 = stderr;\u000a      if (lVar3 == 0) {\u000aLAB_00410347:\u000a        __s = quote(__s);\u000a        __fprintf_chk(pFVar1,1,"\u005cn  - %s",__s);\u000a        __s1 = vallist;\u000a      }\u000a      else {\u000a        iVar2 = memcmp(__s1,vallist,valsize);\u000a        if (iVar2 != 0) goto LAB_00410347;\u000a        __s = quote(__s);\u000a        __fprintf_chk(pFVar1,1,0x412b88,__s);\u000a      }\u000a      __s = arglist[lVar3 + 1];\u000a      lVar3 = lVar3 + 1;\u000a      vallist = vallist + valsize;\u000a    } while (__s != (char *)0x0);\u000a  }\u000a  (*(code *)PTR_putc_unlocked_00619258)(10,stderr);\u000a  return;\u000a}\u000a\u000a
p1970
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R13,RSI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV ESI,0x413e58\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x00619460]\nMOV RDI,RAX\nCALL 0x00402440\nMOV qword ptr [RSP],RBX\nMOV RBX,qword ptr [RBX]\nTEST RBX,RBX\nMOV R12,qword ptr [0x00619460]\nJZ 0x004103aa\nXOR EBP,EBP\nXOR R15D,R15D\nTEST R15,R15\nJZ 0x00410347\nMOV RDI,RBP\nMOV RSI,R13\nMOV RDX,R14\nCALL 0x00402420\nTEST EAX,EAX\nJZ 0x00410370\nMOV RDI,RBX\nCALL 0x0040bb80\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x413e6d\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x00402740\nMOV RBP,R13\nJMP 0x0041038f\nMOV RDI,RBX\nCALL 0x0040bb80\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x412b88\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x00402740\nMOV RAX,qword ptr [RSP]\nMOV RBX,qword ptr [RAX + R15*0x8 + 0x8]\nINC R15\nMOV R12,qword ptr [0x00619460]\nADD R13,R14\nTEST RBX,RBX\nJNZ 0x00410330\nMOV EDI,0xa\nMOV RSI,R12\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00402530\n'
p1971
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f5\n48 89 fb\n31 ff\nbe 58 3e 41 00\nba 05 00 00 00\ne8 6b 1f ff ff\n48 8b 35 54 91 20 00\n48 89 c7\ne8 2c 21 ff ff\n48 89 1c 24\n48 8b 1b\n48 85 db\n4c 8b 25 3b 91 20 00\n0f 84 7f 00 00 00\n31 ed\n45 31 ff\n4d 85 ff\n74 12\n48 89 ef\n4c 89 ee\n4c 89 f2\ne8 dd 20 ff ff\n85 c0\n74 29\n48 89 df\ne8 31 b8 ff ff\n48 89 c1\nbe 01 00 00 00\nba 6d 3e 41 00\n31 c0\n4c 89 e7\ne8 da 23 ff ff\n4c 89 ed\neb 24\n48 89 df\ne8 08 b8 ff ff\n48 89 c1\nbe 01 00 00 00\nba 88 2b 41 00\n31 c0\n4c 89 e7\ne8 b1 23 ff ff\n48 8b 04 24\n4a 8b 5c f8 08\n49 ff c7\n4c 8b 25 be 90 20 00\n4d 01 f5\n48 85 db\n75 86\nbf 0a 00 00 00\n4c 89 e6\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 6b 21 ff ff\n'
p1972
S'.text:00000000004102e0\n.text:00000000004102e1\n.text:00000000004102e3\n.text:00000000004102e5\n.text:00000000004102e7\n.text:00000000004102e9\n.text:00000000004102ea\n.text:00000000004102eb\n.text:00000000004102ee\n.text:00000000004102f1\n.text:00000000004102f4\n.text:00000000004102f6\n.text:00000000004102fb\n.text:0000000000410300\n.text:0000000000410305\n.text:000000000041030c\n.text:000000000041030f\n.text:0000000000410314\n.text:0000000000410318\n.text:000000000041031b\n.text:000000000041031e\n.text:0000000000410325\n.text:000000000041032b\n.text:000000000041032d\n.text:0000000000410330\n.text:0000000000410333\n.text:0000000000410335\n.text:0000000000410338\n.text:000000000041033b\n.text:000000000041033e\n.text:0000000000410343\n.text:0000000000410345\n.text:0000000000410347\n.text:000000000041034a\n.text:000000000041034f\n.text:0000000000410352\n.text:0000000000410357\n.text:000000000041035c\n.text:000000000041035e\n.text:0000000000410361\n.text:0000000000410366\n.text:0000000000410369\n.text:0000000000410370\n.text:0000000000410373\n.text:0000000000410378\n.text:000000000041037b\n.text:0000000000410380\n.text:0000000000410385\n.text:0000000000410387\n.text:000000000041038a\n.text:000000000041038f\n.text:0000000000410393\n.text:0000000000410398\n.text:000000000041039b\n.text:00000000004103a2\n.text:00000000004103a5\n.text:00000000004103a8\n.text:00000000004103aa\n.text:00000000004103af\n.text:00000000004103b2\n.text:00000000004103b6\n.text:00000000004103b7\n.text:00000000004103b9\n.text:00000000004103bb\n.text:00000000004103bd\n.text:00000000004103bf\n.text:00000000004103c0\n'
p1973
tp1974
sS'write_zeros'
p1975
(S'\n__stdcall write_zeros(off_t n_bytes)\n'
p1976
V\u000a_Bool write_zeros(off_t n_bytes)\u000a\u000a{\u000a  char *zeros;\u000a  char fallback [1024];\u000a  size_t sVar1;\u000a  ulong uVar2;\u000a  ulong in_RSI;\u000a  size_t n;\u000a  \u000a  if (zeros == (char *)0x0) {\u000a    n = 0x20000;\u000a    if (write_zeros_nz != 0) {\u000a      n = 0x400;\u000a    }\u000a    zeros = (char *)rpl_calloc(n,1);\u000a    if (zeros == (char *)0x0) {\u000a      zeros = &ram0x006194b0;\u000a      write_zeros_nz = 1;\u000a    }\u000a  }\u000a  do {\u000a    if (in_RSI == 0) {\u000a      return true;\u000a    }\u000a    uVar2 = 0x20000;\u000a    if (write_zeros_nz != 0) {\u000a      uVar2 = 0x400;\u000a    }\u000a    if (in_RSI <= uVar2) {\u000a      uVar2 = in_RSI;\u000a    }\u000a    sVar1 = full_write((void *)(n_bytes & 0xffffffff),(size_t)zeros);\u000a    n = 0;\u000a    if (sVar1 == uVar2) {\u000a      n = uVar2;\u000a    }\u000a    in_RSI = in_RSI - n;\u000a  } while (sVar1 == uVar2);\u000a  return false;\u000a}\u000a\u000a
p1977
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14D,EDI\nCMP qword ptr [0x006194a0],0x0\nJNZ 0x004080c5\nMOV AL,byte ptr [0x006194a8]\nTEST AL,AL\nMOV EAX,0x400\nMOV EDI,0x20000\nCMOVNZ RDI,RAX\nMOV ESI,0x1\nCALL 0x0040dbe0\nMOV qword ptr [0x006194a0],RAX\nTEST RAX,RAX\nJNZ 0x004080c5\nMOV qword ptr [0x006194a0],0x6194b0\nMOV byte ptr [0x006194a8],0x1\nMOV R15D,0x400\nNOP dword ptr [RAX + RAX*0x1]\nTEST RBX,RBX\nJZ 0x0040811b\nMOVZX EAX,byte ptr [0x006194a8]\nTEST AL,AL\nMOV EBP,0x20000\nCMOVNZ RBP,R15\nCMP RBP,RBX\nCMOVNC RBP,RBX\nMOV RSI,qword ptr [0x006194a0]\nMOV EDI,R14D\nMOV RDX,RBP\nCALL 0x00409540\nMOV RCX,RAX\nXOR EAX,EAX\nCMP RCX,RBP\nMOV EDX,0x0\nCMOVZ RDX,RBP\nSUB RBX,RDX\nCMP RCX,RBP\nJZ 0x004080d0\nJMP 0x0040811d\nMOV AL,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1978
S'55\n41 57\n41 56\n53\n50\n48 89 f3\n41 89 fe\n48 83 3d 1b 14 21 00 00\n75 3e\n8a 05 1b 14 21 00\n84 c0\nb8 00 04 00 00\nbf 00 00 02 00\n48 0f 45 f8\nbe 01 00 00 00\ne8 39 5b 00 00\n48 89 05 f2 13 21 00\n48 85 c0\n75 12\n48 c7 05 e2 13 21 00 b0 94 61 00\nc6 05 e3 13 21 00 01\n41 bf 00 04 00 00\n0f 1f 44 00 00\n48 85 db\n74 46\n0f b6 05 cc 13 21 00\n84 c0\nbd 00 00 02 00\n49 0f 45 ef\n48 39 dd\n48 0f 43 eb\n48 8b 35 ab 13 21 00\n44 89 f7\n48 89 ea\ne8 40 14 00 00\n48 89 c1\n31 c0\n48 39 e9\nba 00 00 00 00\n48 0f 44 d5\n48 29 d3\n48 39 e9\n74 b7\neb 02\nb0 01\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1979
S'.text:0000000000408070\n.text:0000000000408071\n.text:0000000000408073\n.text:0000000000408075\n.text:0000000000408076\n.text:0000000000408077\n.text:000000000040807a\n.text:000000000040807d\n.text:0000000000408085\n.text:0000000000408087\n.text:000000000040808d\n.text:000000000040808f\n.text:0000000000408094\n.text:0000000000408099\n.text:000000000040809d\n.text:00000000004080a2\n.text:00000000004080a7\n.text:00000000004080ae\n.text:00000000004080b1\n.text:00000000004080b3\n.text:00000000004080be\n.text:00000000004080c5\n.text:00000000004080cb\n.text:00000000004080d0\n.text:00000000004080d3\n.text:00000000004080d5\n.text:00000000004080dc\n.text:00000000004080de\n.text:00000000004080e3\n.text:00000000004080e7\n.text:00000000004080ea\n.text:00000000004080ee\n.text:00000000004080f5\n.text:00000000004080f8\n.text:00000000004080fb\n.text:0000000000408100\n.text:0000000000408103\n.text:0000000000408105\n.text:0000000000408108\n.text:000000000040810d\n.text:0000000000408111\n.text:0000000000408114\n.text:0000000000408117\n.text:0000000000408119\n.text:000000000040811b\n.text:000000000040811d\n.text:0000000000408121\n.text:0000000000408122\n.text:0000000000408124\n.text:0000000000408126\n.text:0000000000408127\n'
p1980
tp1981
sS'extent_copy'
p1982
(S'\n__stdcall extent_copy(char * buf, size_t buf_size, size_t hole_size, off_t src_total_size, char * dst_name, _Bool * require_normal_copy)\n'
p1983
V\u000a_Bool extent_copy(char *buf,size_t buf_size,size_t hole_size,off_t src_total_size,char *dst_name,\u000a                 _Bool *require_normal_copy)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  ulong uVar3;\u000a  __off_t _Var4;\u000a  undefined8 uVar5;\u000a  char *pcVar6;\u000a  uint *puVar7;\u000a  uint uVar8;\u000a  _Bool *p_Var9;\u000a  byte bVar10;\u000a  ulong uVar11;\u000a  _Bool *__offset;\u000a  bool bVar12;\u000a  int in_stack_00000008;\u000a  _Bool *last_write_made_hole;\u000a  off_t size;\u000a  undefined *in_stack_00000020;\u000a  byte local_a1;\u000a  _Bool *local_98;\u000a  _Bool *local_90;\u000a  _Bool *local_88;\u000a  long local_68;\u000a  extent_scan local_60;\u000a  \u000a  extent_scan_init((extent_scan *)buf);\u000a  *in_stack_00000020 = 0;\u000a  local_88 = (_Bool *)0x0;\u000a  if (in_stack_00000008 != 3) {\u000a    dst_name = (char *)0x0;\u000a  }\u000a  bVar10 = 1;\u000a  local_98 = (_Bool *)0x0;\u000a  local_90 = (_Bool *)0x0;\u000a  do {\u000a    _Var1 = extent_scan_read(&local_60);\u000a    if (_Var1 == false) {\u000a      if (local_60.hit_final_extent == false) {\u000a        if (local_60.initial_scan_failed != false) {\u000a          *in_stack_00000020 = 1;\u000a          return false;\u000a        }\u000a        puVar7 = (uint *)__errno_location();\u000a        uVar8 = *puVar7;\u000a        uVar5 = dcgettext(0,"%s: failed to get extents info",5);\u000a        pcVar6 = quotearg_n_style_colon((char *)0x0);\u000a        goto LAB_00407b91;\u000a      }\u000a      break;\u000a    }\u000a    if (local_60.ei_count != 0) {\u000a      uVar3 = 0;\u000a      uVar11 = 1;\u000a      do {\u000a        __offset = (_Bool *)local_60.ext_info[uVar3].ext_logical;\u000a        p_Var9 = (_Bool *)local_60.ext_info[uVar3].ext_length;\u000a        if ((long)require_normal_copy < (long)(p_Var9 + (long)__offset)) {\u000a          if ((long)require_normal_copy < (long)__offset) {\u000a            __offset = require_normal_copy;\u000a          }\u000a          p_Var9 = require_normal_copy + -(long)__offset;\u000a        }\u000a        if (__offset + -(long)local_90 == local_88) {\u000aLAB_00407911:\u000a          bVar10 = 0;\u000aLAB_00407914:\u000a          _Var1 = sparse_copy((char *)((ulong)buf & 0xffffffff),buf_size & 0xffffffff,hole_size,\u000a                              (char *)src_total_size,(uintmax_t)dst_name,(off_t *)0x1,\u000a                              last_write_made_hole);\u000a          local_90 = __offset;\u000a          local_88 = p_Var9;\u000a          if (_Var1 == false) goto LAB_00407a68;\u000a          local_98 = __offset + local_68;\u000a          if (local_68 != 0) {\u000a            bVar10 = local_a1;\u000a          }\u000a          iVar2 = 0;\u000a          local_90 = __offset;\u000a          local_88 = p_Var9;\u000a          if (local_98 == require_normal_copy) {\u000a            local_60.hit_final_extent = true;\u000a            iVar2 = 4;\u000a            local_90 = __offset;\u000a            local_88 = p_Var9;\u000a          }\u000a        }\u000a        else {\u000a          _Var4 = lseek((int)buf,(__off_t)__offset,0);\u000a          if (_Var4 < 0) {\u000a            puVar7 = (uint *)__errno_location();\u000a            uVar8 = *puVar7;\u000a            uVar5 = dcgettext(0,"cannot lseek %s",5);\u000a            quotearg_style((char *)0x4);\u000a          }\u000a          else {\u000a            if (in_stack_00000008 != 1) {\u000a              _Var1 = create_hole((char *)(buf_size & 0xffffffff),size);\u000a              bVar10 = 1;\u000a              if (_Var1 != false) goto LAB_00407914;\u000a              bVar10 = 0;\u000a              goto LAB_00407a68;\u000a            }\u000a            _Var1 = write_zeros(buf_size & 0xffffffff);\u000a            if (_Var1 != false) {\u000a              local_98 = __offset;\u000a              if ((long)require_normal_copy < (long)__offset) {\u000a                local_98 = require_normal_copy;\u000a              }\u000a              goto LAB_00407911;\u000a            }\u000a            puVar7 = (uint *)__errno_location();\u000a            uVar8 = *puVar7;\u000a            uVar5 = dcgettext(0,"%s: write failed",5);\u000a            quotearg_n_style_colon((char *)0x0);\u000a          }\u000a          bVar10 = 0;\u000a          error(0,(ulong)uVar8,uVar5);\u000aLAB_00407a68:\u000a          extent_scan_free(&local_60);\u000a          iVar2 = 1;\u000a        }\u000a        if (iVar2 != 0) {\u000a          if ((char)iVar2 != 4) {\u000a            if (iVar2 != 0) {\u000a              return false;\u000a            }\u000a            goto LAB_00407aba;\u000a          }\u000a          break;\u000a        }\u000a        bVar12 = uVar11 < local_60.ei_count;\u000a        uVar3 = uVar11;\u000a        uVar11 = (ulong)((int)uVar11 + 1);\u000a      } while (bVar12);\u000a    }\u000a    extent_scan_free(&local_60);\u000aLAB_00407aba:\u000a  } while (local_60.hit_final_extent == false);\u000a  if (((long)local_98 < (long)require_normal_copy) || ((bVar10 & 1) != 0)) {\u000a    if (in_stack_00000008 == 1) {\u000a      _Var1 = write_zeros(buf_size & 0xffffffff);\u000a      if (_Var1 != false) {\u000a        return true;\u000a      }\u000a    }\u000a    else {\u000a      iVar2 = ftruncate((int)buf_size,(__off_t)require_normal_copy);\u000a      if (iVar2 == 0) goto LAB_00407aeb;\u000a    }\u000a    puVar7 = (uint *)__errno_location();\u000a    uVar8 = *puVar7;\u000a    pcVar6 = "failed to extend %s";\u000a  }\u000a  else {\u000aLAB_00407aeb:\u000a    if (in_stack_00000008 != 3) {\u000a      return true;\u000a    }\u000a    if ((long)require_normal_copy <= (long)local_98) {\u000a      return true;\u000a    }\u000a    iVar2 = punch_hole(buf_size & 0xffffffff,(off_t)local_98);\u000a    if (-1 < iVar2) {\u000a      return true;\u000a    }\u000a    puVar7 = (uint *)__errno_location();\u000a    uVar8 = *puVar7;\u000a    pcVar6 = "error deallocating %s";\u000a  }\u000a  uVar5 = dcgettext(0,pcVar6,5);\u000a  pcVar6 = quotearg_style((char *)0x4);\u000aLAB_00407b91:\u000a  error(0,(ulong)uVar8,uVar5,pcVar6);\u000a  return false;\u000a}\u000a\u000a
p1984
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x78\nMOV R12,R9\nMOV RBX,R8\nMOV qword ptr [RSP + 0x30],RCX\nMOV qword ptr [RSP + 0x28],RDX\nMOV dword ptr [RSP + 0x8],ESI\nMOV R14,qword ptr [0xc8 + RSP]\nMOV RBP,qword ptr [0xc0 + RSP]\nLEA RSI,[RSP + 0x48]\nMOV dword ptr [RSP + 0xc],EDI\nCALL 0x00408380\nMOV byte ptr [R14],0x0\nXOR ECX,ECX\nCMP dword ptr [0xb0 + RSP],0x3\nMOV EAX,0x0\nMOV qword ptr [RSP + 0x20],RAX\nCMOVNZ RBX,RCX\nMOV qword ptr [RSP + 0x38],RBX\nMOV R13B,0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x18],RAX\nNOP word ptr CS:[RAX + RAX*0x1]\nLEA RDI,[RSP + 0x48]\nCALL 0x004083b0\nTEST AL,AL\nJZ 0x00407ad0\nCMP qword ptr [RSP + 0x60],0x0\nJZ 0x00407ab0\nMOV R14D,0x1\nXOR EAX,EAX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RCX,qword ptr [RSP + 0x70]\nLEA RAX,[RAX + RAX*0x2]\nMOV R15,qword ptr [RCX + RAX*0x8]\nMOV RBX,qword ptr [RCX + RAX*0x8 + 0x8]\nLEA RAX,[RBX + R15*0x1]\nCMP RAX,R12\nJLE 0x004078b8\nCMP R15,R12\nCMOVG R15,R12\nMOV RBX,R12\nSUB RBX,R15\nMOV R13,R15\nSUB R13,qword ptr [RSP + 0x18]\nSUB R13,qword ptr [RSP + 0x20]\nJZ 0x00407911\nXOR EDX,EDX\nMOV EDI,dword ptr [RSP + 0xc]\nMOV RSI,R15\nCALL 0x00402330\nTEST RAX,RAX\nJS 0x004079b0\nMOV EAX,dword ptr [0xb0 + RSP]\nCMP EAX,0x1\nJNZ 0x004079f6\nMOV EDI,dword ptr [RSP + 0x8]\nMOV RSI,R13\nCALL 0x00408070\nTEST AL,AL\nJZ 0x00407a1d\nCMP R15,R12\nMOV RAX,R15\nCMOVG RAX,R12\nMOV qword ptr [RSP + 0x10],RAX\nXOR R13D,R13D\nSUB RSP,0x8\nMOV R9D,0x1\nMOV EDI,dword ptr [RSP + 0x14]\nMOV ESI,dword ptr [RSP + 0x10]\nMOV RDX,qword ptr [RSP + 0x30]\nMOV RCX,qword ptr [RSP + 0x38]\nMOV R8,qword ptr [RSP + 0x40]\nLEA RAX,[RSP + 0xf]\nPUSH RAX\nLEA RAX,[RSP + 0x50]\nPUSH RAX\nPUSH RBX\nPUSH RBP\nPUSH qword ptr [0xe0 + RSP]\nCALL 0x00407c00\nADD RSP,0x30\nTEST AL,AL\nJZ 0x004079a0\nMOV RAX,qword ptr [RSP + 0x40]\nTEST RAX,RAX\nLEA RCX,[RAX + R15*0x1]\nJZ 0x0040796a\nMOV R13B,byte ptr [RSP + 0x7]\nXOR EAX,EAX\nMOV RDX,RCX\nMOV qword ptr [RSP + 0x10],RDX\nCMP RCX,R12\nJNZ 0x00407983\nMOV byte ptr [RSP + 0x69],0x1\nMOV EAX,0x4\nMOV qword ptr [RSP + 0x20],RBX\nMOV qword ptr [RSP + 0x18],R15\nJMP 0x00407a77\nMOV qword ptr [RSP + 0x20],RBX\nMOV qword ptr [RSP + 0x18],R15\nJMP 0x00407a68\nCALL 0x00402100\nMOV EBP,dword ptr [RAX]\nXOR R13D,R13D\nXOR EDI,EDI\nMOV ESI,0x413074\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [0xb8 + RSP]\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RBP,qword ptr [0xc0 + RSP]\nMOV RDX,RBX\nJMP 0x00407a63\nXOR EDX,EDX\nCMP EAX,0x3\nSETZ DL\nMOV EDI,dword ptr [RSP + 0x8]\nMOV RSI,RBP\nMOV RCX,R13\nCALL 0x00407fd0\nMOV R13B,0x1\nTEST AL,AL\nJNZ 0x00407914\nXOR R13D,R13D\nJMP 0x00407a68\nCALL 0x00402100\nMOV EBX,dword ptr [RAX]\nXOR R13D,R13D\nXOR EDI,EDI\nMOV ESI,0x413084\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBP,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,qword ptr [0xc0 + RSP]\nCALL 0x0040ba40\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nMOV RBP,qword ptr [0xc0 + RSP]\nCALL 0x00402640\nLEA RDI,[RSP + 0x48]\nCALL 0x00407fb0\nMOV EAX,0x1\nMOV ECX,EAX\nAND CL,0x7\nJNZ 0x00407aa0\nMOV EAX,R14D\nINC R14D\nCMP RAX,qword ptr [RSP + 0x60]\nJC 0x00407890\nJMP 0x00407ab0\nCMP CL,0x4\nJNZ 0x00407ac7\nNOP dword ptr CS:[RAX + RAX*0x1]\nLEA RDI,[RSP + 0x48]\nCALL 0x00407fb0\nCMP byte ptr [RSP + 0x69],0x0\nJZ 0x00407860\nJMP 0x00407adb\nTEST EAX,EAX\nJZ 0x00407aba\nJMP 0x00407bb6\nCMP byte ptr [RSP + 0x69],0x0\nJZ 0x00407ba4\nMOV RSI,qword ptr [RSP + 0x10]\nCMP RSI,R12\nJL 0x00407b2f\nAND R13B,0x1\nJNZ 0x00407b2f\nCMP dword ptr [0xb0 + RSP],0x3\nMOV R14B,0x1\nJNZ 0x00407bb9\nCMP RSI,R12\nJGE 0x00407bb9\nSUB R12,RSI\nMOV EDI,dword ptr [RSP + 0x8]\nMOV RDX,R12\nCALL 0x00408130\nTEST EAX,EAX\nJNS 0x00407bb9\nCALL 0x00402100\nMOV EBX,dword ptr [RAX]\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x413095\nJMP 0x00407b77\nCMP dword ptr [0xb0 + RSP],0x1\nJNZ 0x00407b51\nSUB R12,RSI\nMOV EDI,dword ptr [RSP + 0x8]\nMOV RSI,R12\nCALL 0x00408070\nMOV R14B,0x1\nTEST AL,AL\nJZ 0x00407b66\nJMP 0x00407bb9\nMOV EDI,dword ptr [RSP + 0x8]\nMOV RSI,R12\nCALL 0x00402320\nMOV RSI,qword ptr [RSP + 0x10]\nTEST EAX,EAX\nJZ 0x00407aeb\nCALL 0x00402100\nMOV EBX,dword ptr [RAX]\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x41302e\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,RBP\nMOV RBP,RAX\nMOV EDI,0x4\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00402640\nJMP 0x00407bb9\nCMP byte ptr [RSP + 0x68],0x0\nJZ 0x00407bcb\nMOV RAX,qword ptr [0xc8 + RSP]\nMOV byte ptr [RAX],0x1\nXOR R14D,R14D\nMOV EAX,R14D\nADD RSP,0x78\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00402100\nMOV EBX,dword ptr [RAX]\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x413055\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBP,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,qword ptr [0xb8 + RSP]\nCALL 0x0040ba40\nJMP 0x00407b91\n'
p1985
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 78\n4d 89 cc\n4c 89 c3\n48 89 4c 24 30\n48 89 54 24 28\n89 74 24 08\n4c 8b b4 24 c8 00 00 00\n48 8b ac 24 c0 00 00 00\n48 8d 74 24 48\n89 7c 24 0c\ne8 60 0b 00 00\n41 c6 06 00\n31 c9\n83 bc 24 b0 00 00 00 03\nb8 00 00 00 00\n48 89 44 24 20\n48 0f 45 d9\n48 89 5c 24 38\n41 b5 01\n31 c0\n48 89 44 24 10\n31 c0\n48 89 44 24 18\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8d 7c 24 48\ne8 46 0b 00 00\n84 c0\n0f 84 5e 02 00 00\n48 83 7c 24 60 00\n0f 84 32 02 00 00\n41 be 01 00 00 00\n31 c0\n66 2e 0f 1f 84 00 00 00 00 00\n48 8b 4c 24 70\n48 8d 04 40\n4c 8b 3c c1\n48 8b 5c c1 08\n4a 8d 04 3b\n4c 39 e0\n7e 0d\n4d 39 e7\n4d 0f 4f fc\n4c 89 e3\n4c 29 fb\n4d 89 fd\n4c 2b 6c 24 18\n4c 2b 6c 24 20\n74 4a\n31 d2\n8b 7c 24 0c\n4c 89 fe\ne8 5b aa ff ff\n48 85 c0\n0f 88 d2 00 00 00\n8b 84 24 b0 00 00 00\n83 f8 01\n0f 85 08 01 00 00\n8b 7c 24 08\n4c 89 ee\ne8 76 07 00 00\n84 c0\n0f 84 1b 01 00 00\n4d 39 e7\n4c 89 f8\n49 0f 4f c4\n48 89 44 24 10\n45 31 ed\n48 83 ec 08\n41 b9 01 00 00 00\n8b 7c 24 14\n8b 74 24 10\n48 8b 54 24 30\n48 8b 4c 24 38\n4c 8b 44 24 40\n48 8d 44 24 0f\n50\n48 8d 44 24 50\n50\n53\n55\nff b4 24 e0 00 00 00\ne8 b1 02 00 00\n48 83 c4 30\n84 c0\n74 49\n48 8b 44 24 40\n48 85 c0\n4a 8d 0c 38\n74 05\n44 8a 6c 24 07\n31 c0\n48 89 ca\n48 89 54 24 10\n4c 39 e1\n75 0a\nc6 44 24 69 01\nb8 04 00 00 00\n48 89 5c 24 20\n4c 89 7c 24 18\ne9 e5 00 00 00\n48 89 5c 24 20\n4c 89 7c 24 18\ne9 b9 00 00 00\ne8 4b a7 ff ff\n8b 28\n45 31 ed\n31 ff\nbe 74 30 41 00\nba 05 00 00 00\ne8 a5 a8 ff ff\n48 89 c3\nbf 04 00 00 00\n48 8b b4 24 b8 00 00 00\ne8 80 3f 00 00\n48 89 c1\n31 ff\n31 c0\n89 ee\n48 8b ac 24 c0 00 00 00\n48 89 da\neb 6d\n31 d2\n83 f8 03\n0f 94 c2\n8b 7c 24 08\n48 89 ee\n4c 89 e9\ne8 c3 05 00 00\n41 b5 01\n84 c0\n0f 85 fc fe ff ff\n45 31 ed\neb 4b\ne8 de a6 ff ff\n8b 18\n45 31 ed\n31 ff\nbe 84 30 41 00\nba 05 00 00 00\ne8 38 a8 ff ff\n48 89 c5\n31 ff\nbe 03 00 00 00\n48 8b 94 24 c0 00 00 00\ne8 f1 3f 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\n48 8b ac 24 c0 00 00 00\ne8 d8 ab ff ff\n48 8d 7c 24 48\ne8 3e 05 00 00\nb8 01 00 00 00\n89 c1\n80 e1 07\n75 22\n44 89 f0\n41 ff c6\n48 3b 44 24 60\n0f 82 01 fe ff ff\neb 1f\n80 f9 04\n75 22\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 8d 7c 24 48\ne8 f6 04 00 00\n80 7c 24 69 00\n0f 84 9b fd ff ff\neb 14\n85 c0\n74 ef\ne9 e6 00 00 00\n80 7c 24 69 00\n0f 84 c9 00 00 00\n48 8b 74 24 10\n4c 39 e6\n7c 4a\n41 80 e5 01\n75 44\n83 bc 24 b0 00 00 00 03\n41 b6 01\n0f 85 bd 00 00 00\n4c 39 e6\n0f 8d b4 00 00 00\n49 29 f4\n8b 7c 24 08\n4c 89 e2\ne8 1c 06 00 00\n85 c0\n0f 89 9d 00 00 00\ne8 df a5 ff ff\n8b 18\n45 31 f6\n31 ff\nbe 95 30 41 00\neb 48\n83 bc 24 b0 00 00 00 01\n75 18\n49 29 f4\n8b 7c 24 08\n4c 89 e6\ne8 28 05 00 00\n41 b6 01\n84 c0\n74 17\neb 68\n8b 7c 24 08\n4c 89 e6\ne8 c3 a7 ff ff\n48 8b 74 24 10\n85 c0\n74 85\ne8 95 a5 ff ff\n8b 18\n45 31 f6\n31 ff\nbe 2e 30 41 00\nba 05 00 00 00\ne8 ef a6 ff ff\n48 89 ee\n48 89 c5\nbf 04 00 00 00\ne8 cf 3d 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 9e aa ff ff\neb 15\n80 7c 24 68 00\n74 20\n48 8b 84 24 c8 00 00 00\nc6 00 01\n45 31 f6\n44 89 f0\n48 83 c4 78\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 30 a5 ff ff\n8b 18\n45 31 f6\n31 ff\nbe 55 30 41 00\nba 05 00 00 00\ne8 8a a6 ff ff\n48 89 c5\n31 ff\nbe 03 00 00 00\n48 8b 94 24 b8 00 00 00\ne8 43 3e 00 00\neb 92\n'
p1986
S'.text:00000000004077e0\n.text:00000000004077e1\n.text:00000000004077e3\n.text:00000000004077e5\n.text:00000000004077e7\n.text:00000000004077e9\n.text:00000000004077ea\n.text:00000000004077ee\n.text:00000000004077f1\n.text:00000000004077f4\n.text:00000000004077f9\n.text:00000000004077fe\n.text:0000000000407802\n.text:000000000040780a\n.text:0000000000407812\n.text:0000000000407817\n.text:000000000040781b\n.text:0000000000407820\n.text:0000000000407824\n.text:0000000000407826\n.text:000000000040782e\n.text:0000000000407833\n.text:0000000000407838\n.text:000000000040783c\n.text:0000000000407841\n.text:0000000000407844\n.text:0000000000407846\n.text:000000000040784b\n.text:000000000040784d\n.text:0000000000407852\n.text:0000000000407860\n.text:0000000000407865\n.text:000000000040786a\n.text:000000000040786c\n.text:0000000000407872\n.text:0000000000407878\n.text:000000000040787e\n.text:0000000000407884\n.text:0000000000407886\n.text:0000000000407890\n.text:0000000000407895\n.text:0000000000407899\n.text:000000000040789d\n.text:00000000004078a2\n.text:00000000004078a6\n.text:00000000004078a9\n.text:00000000004078ab\n.text:00000000004078ae\n.text:00000000004078b2\n.text:00000000004078b5\n.text:00000000004078b8\n.text:00000000004078bb\n.text:00000000004078c0\n.text:00000000004078c5\n.text:00000000004078c7\n.text:00000000004078c9\n.text:00000000004078cd\n.text:00000000004078d0\n.text:00000000004078d5\n.text:00000000004078d8\n.text:00000000004078de\n.text:00000000004078e5\n.text:00000000004078e8\n.text:00000000004078ee\n.text:00000000004078f2\n.text:00000000004078f5\n.text:00000000004078fa\n.text:00000000004078fc\n.text:0000000000407902\n.text:0000000000407905\n.text:0000000000407908\n.text:000000000040790c\n.text:0000000000407911\n.text:0000000000407914\n.text:0000000000407918\n.text:000000000040791e\n.text:0000000000407922\n.text:0000000000407926\n.text:000000000040792b\n.text:0000000000407930\n.text:0000000000407935\n.text:000000000040793a\n.text:000000000040793b\n.text:0000000000407940\n.text:0000000000407941\n.text:0000000000407942\n.text:0000000000407943\n.text:000000000040794a\n.text:000000000040794f\n.text:0000000000407953\n.text:0000000000407955\n.text:0000000000407957\n.text:000000000040795c\n.text:000000000040795f\n.text:0000000000407963\n.text:0000000000407965\n.text:000000000040796a\n.text:000000000040796c\n.text:000000000040796f\n.text:0000000000407974\n.text:0000000000407977\n.text:0000000000407979\n.text:000000000040797e\n.text:0000000000407983\n.text:0000000000407988\n.text:000000000040798d\n.text:00000000004079a0\n.text:00000000004079a5\n.text:00000000004079aa\n.text:00000000004079b0\n.text:00000000004079b5\n.text:00000000004079b7\n.text:00000000004079ba\n.text:00000000004079bc\n.text:00000000004079c1\n.text:00000000004079c6\n.text:00000000004079cb\n.text:00000000004079ce\n.text:00000000004079d3\n.text:00000000004079db\n.text:00000000004079e0\n.text:00000000004079e3\n.text:00000000004079e5\n.text:00000000004079e7\n.text:00000000004079e9\n.text:00000000004079f1\n.text:00000000004079f4\n.text:00000000004079f6\n.text:00000000004079f8\n.text:00000000004079fb\n.text:00000000004079fe\n.text:0000000000407a02\n.text:0000000000407a05\n.text:0000000000407a08\n.text:0000000000407a0d\n.text:0000000000407a10\n.text:0000000000407a12\n.text:0000000000407a18\n.text:0000000000407a1b\n.text:0000000000407a1d\n.text:0000000000407a22\n.text:0000000000407a24\n.text:0000000000407a27\n.text:0000000000407a29\n.text:0000000000407a2e\n.text:0000000000407a33\n.text:0000000000407a38\n.text:0000000000407a3b\n.text:0000000000407a3d\n.text:0000000000407a42\n.text:0000000000407a4a\n.text:0000000000407a4f\n.text:0000000000407a52\n.text:0000000000407a54\n.text:0000000000407a56\n.text:0000000000407a58\n.text:0000000000407a5b\n.text:0000000000407a63\n.text:0000000000407a68\n.text:0000000000407a6d\n.text:0000000000407a72\n.text:0000000000407a77\n.text:0000000000407a79\n.text:0000000000407a7c\n.text:0000000000407a7e\n.text:0000000000407a81\n.text:0000000000407a84\n.text:0000000000407a89\n.text:0000000000407a8f\n.text:0000000000407aa0\n.text:0000000000407aa3\n.text:0000000000407aa5\n.text:0000000000407ab0\n.text:0000000000407ab5\n.text:0000000000407aba\n.text:0000000000407abf\n.text:0000000000407ac5\n.text:0000000000407ac7\n.text:0000000000407ac9\n.text:0000000000407acb\n.text:0000000000407ad0\n.text:0000000000407ad5\n.text:0000000000407adb\n.text:0000000000407ae0\n.text:0000000000407ae3\n.text:0000000000407ae5\n.text:0000000000407ae9\n.text:0000000000407aeb\n.text:0000000000407af3\n.text:0000000000407af6\n.text:0000000000407afc\n.text:0000000000407aff\n.text:0000000000407b05\n.text:0000000000407b08\n.text:0000000000407b0c\n.text:0000000000407b0f\n.text:0000000000407b14\n.text:0000000000407b16\n.text:0000000000407b1c\n.text:0000000000407b21\n.text:0000000000407b23\n.text:0000000000407b26\n.text:0000000000407b28\n.text:0000000000407b2d\n.text:0000000000407b2f\n.text:0000000000407b37\n.text:0000000000407b39\n.text:0000000000407b3c\n.text:0000000000407b40\n.text:0000000000407b43\n.text:0000000000407b48\n.text:0000000000407b4b\n.text:0000000000407b4d\n.text:0000000000407b4f\n.text:0000000000407b51\n.text:0000000000407b55\n.text:0000000000407b58\n.text:0000000000407b5d\n.text:0000000000407b62\n.text:0000000000407b64\n.text:0000000000407b66\n.text:0000000000407b6b\n.text:0000000000407b6d\n.text:0000000000407b70\n.text:0000000000407b72\n.text:0000000000407b77\n.text:0000000000407b7c\n.text:0000000000407b81\n.text:0000000000407b84\n.text:0000000000407b87\n.text:0000000000407b8c\n.text:0000000000407b91\n.text:0000000000407b94\n.text:0000000000407b96\n.text:0000000000407b98\n.text:0000000000407b9a\n.text:0000000000407b9d\n.text:0000000000407ba2\n.text:0000000000407ba4\n.text:0000000000407ba9\n.text:0000000000407bab\n.text:0000000000407bb3\n.text:0000000000407bb6\n.text:0000000000407bb9\n.text:0000000000407bbc\n.text:0000000000407bc0\n.text:0000000000407bc1\n.text:0000000000407bc3\n.text:0000000000407bc5\n.text:0000000000407bc7\n.text:0000000000407bc9\n.text:0000000000407bca\n.text:0000000000407bcb\n.text:0000000000407bd0\n.text:0000000000407bd2\n.text:0000000000407bd5\n.text:0000000000407bd7\n.text:0000000000407bdc\n.text:0000000000407be1\n.text:0000000000407be6\n.text:0000000000407be9\n.text:0000000000407beb\n.text:0000000000407bf0\n.text:0000000000407bf8\n.text:0000000000407bfd\n'
p1987
tp1988
sS'fts_set'
p1989
(S'\n__stdcall fts_set(FTS * sp, FTSENT * p)\n'
p1990
V\u000aint fts_set(FTS *sp,FTSENT *p)\u000a\u000a{\u000a  int *piVar1;\u000a  uint in_EDX;\u000a  \u000a  if (4 < in_EDX) {\u000a    piVar1 = __errno_location();\u000a    *piVar1 = 0x16;\u000a    return 1;\u000a  }\u000a  p->fts_instr = (unsigned_short)in_EDX;\u000a  return 0;\u000a}\u000a\u000a
p1991
S'CMP EDX,0x5\nJC 0x0040fa2b\nPUSH RAX\nCALL 0x00402100\nMOV dword ptr [RAX],0x16\nMOV EAX,0x1\nADD RSP,0x8\nRET\nMOV word ptr [RSI + 0x74],DX\nXOR EAX,EAX\nRET\n'
p1992
S'83 fa 05\n72 16\n50\ne8 e5 26 ff ff\nc7 00 16 00 00 00\nb8 01 00 00 00\n48 83 c4 08\nc3\n66 89 56 74\n31 c0\nc3\n'
p1993
S'.text:000000000040fa10\n.text:000000000040fa13\n.text:000000000040fa15\n.text:000000000040fa16\n.text:000000000040fa1b\n.text:000000000040fa21\n.text:000000000040fa26\n.text:000000000040fa2a\n.text:000000000040fa2b\n.text:000000000040fa2f\n.text:000000000040fa31\n'
p1994
tp1995
sS'close_stdout'
p1996
(S'\n__stdcall close_stdout()\n'
p1997
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00408e27;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x412b8a,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00408e27:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p1998
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x00619428]\nCALL 0x00410750\nTEST EAX,EAX\nJZ 0x00408e27\nCMP byte ptr [0x006198c8],0x0\nJZ 0x00408e3c\nCALL 0x00402100\nCMP dword ptr [RAX],0x20\nJNZ 0x00408e3c\nMOV RDI,qword ptr [0x00619460]\nCALL 0x00410750\nTEST EAX,EAX\nJNZ 0x00408e81\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x4132b2\nMOV EDX,0x5\nCALL 0x00402270\nMOV R14,RAX\nMOV RBX,qword ptr [0x006198c0]\nCALL 0x00402100\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x00408e8c\nXOR EDI,EDI\nMOV EDX,0x412b8a\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00402640\nMOV EDI,dword ptr [0x006193b8]\nCALL 0x00402130\nMOV EDI,dword ptr [0x006193b8]\nCALL 0x00402130\nMOV RDI,RBX\nCALL 0x0040ba20\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x4132ab\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00402640\nMOV EDI,dword ptr [0x006193b8]\nCALL 0x00402130\n'
p1999
S'55\n41 56\n53\n48 8b 3d 1d 06 21 00\ne8 40 79 00 00\n85 c0\n74 13\n80 3d ad 0a 21 00 00\n74 1f\ne8 de 92 ff ff\n83 38 20\n75 15\n48 8b 3d 32 06 21 00\ne8 1d 79 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe b2 32 41 00\nba 05 00 00 00\ne8 23 94 ff ff\n49 89 c6\n48 8b 1d 69 0a 21 00\ne8 a4 92 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 8a 2b 41 00\n31 c0\n89 ee\n4c 89 f1\ne8 ca 97 ff ff\n8b 3d 3c 05 21 00\ne8 af 92 ff ff\n8b 3d 31 05 21 00\ne8 a4 92 ff ff\n48 89 df\ne8 8c 2b 00 00\n48 89 c1\n31 ff\nba ab 32 41 00\n31 c0\n89 ee\n4d 89 f0\ne8 96 97 ff ff\n8b 3d 08 05 21 00\ne8 7b 92 ff ff\n'
p2000
S'.text:0000000000408e00\n.text:0000000000408e01\n.text:0000000000408e03\n.text:0000000000408e04\n.text:0000000000408e0b\n.text:0000000000408e10\n.text:0000000000408e12\n.text:0000000000408e14\n.text:0000000000408e1b\n.text:0000000000408e1d\n.text:0000000000408e22\n.text:0000000000408e25\n.text:0000000000408e27\n.text:0000000000408e2e\n.text:0000000000408e33\n.text:0000000000408e35\n.text:0000000000408e37\n.text:0000000000408e38\n.text:0000000000408e3a\n.text:0000000000408e3b\n.text:0000000000408e3c\n.text:0000000000408e3e\n.text:0000000000408e43\n.text:0000000000408e48\n.text:0000000000408e4d\n.text:0000000000408e50\n.text:0000000000408e57\n.text:0000000000408e5c\n.text:0000000000408e5f\n.text:0000000000408e61\n.text:0000000000408e63\n.text:0000000000408e65\n.text:0000000000408e6a\n.text:0000000000408e6c\n.text:0000000000408e6e\n.text:0000000000408e71\n.text:0000000000408e76\n.text:0000000000408e7c\n.text:0000000000408e81\n.text:0000000000408e87\n.text:0000000000408e8c\n.text:0000000000408e8f\n.text:0000000000408e94\n.text:0000000000408e97\n.text:0000000000408e99\n.text:0000000000408e9e\n.text:0000000000408ea0\n.text:0000000000408ea2\n.text:0000000000408ea5\n.text:0000000000408eaa\n.text:0000000000408eb0\n'
p2001
tp2002
sS'c_isxdigit'
p2003
(S'\n__stdcall c_isxdigit()\n'
p2004
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p2005
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x004106bb\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p2006
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p2007
S'.text:00000000004106a0\n.text:00000000004106a3\n.text:00000000004106a6\n.text:00000000004106a8\n.text:00000000004106b2\n.text:00000000004106b4\n.text:00000000004106b7\n.text:00000000004106ba\n.text:00000000004106bb\n.text:00000000004106bd\n'
p2008
tp2009
sS'forget_created'
p2010
(S'\n__stdcall forget_created(ino_t ino, dev_t dev)\n'
p2011
V\u000avoid forget_created(ino_t ino,dev_t dev)\u000a\u000a{\u000a  void *x;\u000a  ino_t local_18;\u000a  dev_t local_10;\u000a  undefined8 local_8;\u000a  \u000a  local_8 = 0;\u000a  local_18 = ino;\u000a  local_10 = dev;\u000a  x = hash_delete(src_to_dest,&local_18);\u000a  if (x != (void *)0x0) {\u000a    src_to_dest_free(x);\u000a  }\u000a  return;\u000a}\u000a\u000a
p2012
S'SUB RSP,0x18\nMOV qword ptr [RSP],RDI\nMOV qword ptr [RSP + 0x8],RSI\nMOV qword ptr [RSP + 0x10],0x0\nMOV RDI,qword ptr [0x006198b0]\nMOV RSI,RSP\nCALL 0x0040a2d0\nTEST RAX,RAX\nJZ 0x00408232\nMOV RDI,RAX\nCALL 0x00408240\nADD RSP,0x18\nRET\n'
p2013
S'48 83 ec 18\n48 89 3c 24\n48 89 74 24 08\n48 c7 44 24 10 00 00 00 00\n48 8b 3d 93 16 21 00\n48 89 e6\ne8 ab 20 00 00\n48 85 c0\n74 08\n48 89 c7\ne8 0e 00 00 00\n48 83 c4 18\nc3\n'
p2014
S'.text:0000000000408200\n.text:0000000000408204\n.text:0000000000408208\n.text:000000000040820d\n.text:0000000000408216\n.text:000000000040821d\n.text:0000000000408220\n.text:0000000000408225\n.text:0000000000408228\n.text:000000000040822a\n.text:000000000040822d\n.text:0000000000408232\n.text:0000000000408236\n'
p2015
tp2016
sS'__libc_csu_fini'
p2017
(S'\n__stdcall __libc_csu_fini()\n'
p2018
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p2019
S'RET\n'
p2020
S'f3 c3\n'
p2021
S'.text:00000000004113a0\n'
p2022
tp2023
sS'abort'
p2024
(S'\n__stdcall abort()\n'
p2025
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_00619038)();\u000a  return;\u000a}\u000a\u000a
p2026
S'JMP qword ptr [0x00619038]\n'
p2027
S'ff 25 42 6f 21 00\n'
p2028
S'.plt:00000000004020f0\n'
p2029
tp2030
sS'closedir'
p2031
(S'\n__stdcall closedir(DIR * __dirp)\n'
p2032
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint closedir(DIR *__dirp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_closedir_006191b0)();\u000a  return iVar1;\u000a}\u000a\u000a
p2033
S'JMP qword ptr [0x006191b0]\n'
p2034
S'ff 25 ca 6d 21 00\n'
p2035
S'.plt:00000000004023e0\n'
p2036
tp2037
sS'opendir'
p2038
(S'\n__stdcall opendir(char * __name)\n'
p2039
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aDIR * opendir(char *__name)\u000a\u000a{\u000a  DIR *pDVar1;\u000a  \u000a  pDVar1 = (DIR *)(*(code *)PTR_opendir_006190d8)();\u000a  return pDVar1;\u000a}\u000a\u000a
p2040
S'JMP qword ptr [0x006190d8]\n'
p2041
S'ff 25 a2 6e 21 00\n'
p2042
S'.plt:0000000000402230\n'
p2043
tp2044
sS'compute_bucket_size'
p2045
(S'\n__stdcall compute_bucket_size(size_t candidate, Hash_tuning * tuning)\n'
p2046
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000asize_t compute_bucket_size(size_t candidate,Hash_tuning *tuning)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  float fVar3;\u000a  \u000a  if (tuning->is_n_buckets == false) {\u000a    if ((long)candidate < 0) {\u000a      fVar3 = (float)((ulong)((uint)candidate & 1) | candidate >> 1);\u000a      fVar3 = fVar3 + fVar3;\u000a    }\u000a    else {\u000a      fVar3 = (float)candidate;\u000a    }\u000a    fVar3 = fVar3 / tuning->growth_threshold;\u000a    candidate = (long)fVar3;\u000a    if (DAT_004133e8 <= fVar3) {\u000a      candidate = (long)(fVar3 - DAT_004133e8) ^ 0x8000000000000000;\u000a    }\u000a    if (_DAT_004133ec <= fVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  sVar1 = next_prime(candidate);\u000a  sVar2 = 0;\u000a  if (SUB168(ZEXT816(sVar1) * ZEXT816(8) >> 0x40,0) == 0) {\u000a    sVar2 = sVar1;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p2047
S'CMP byte ptr [RSI + 0x10],0x0\nJNZ 0x00409bc2\nTEST RDI,RDI\nJS 0x00409b72\nCVTSI2SS XMM0,RDI\nJMP 0x00409b87\nMOV RAX,RDI\nSHR RAX,1\nAND EDI,0x1\nOR RDI,RAX\nCVTSI2SS XMM0,RDI\nADDSS XMM0,XMM0\nDIVSS XMM0,dword ptr [RSI + 0x8]\nMOVSS XMM1,dword ptr [0x004133e8]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RDI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RDI,RCX\nUCOMISS XMM0,dword ptr [0x004133ec]\nJNC 0x00409be1\nPUSH RAX\nCALL 0x0040a460\nMOV RSI,RAX\nMOV EDX,0x8\nXOR ECX,ECX\nMUL RDX\nCMOVNO RCX,RSI\nADD RSP,0x8\nMOV RAX,RCX\nRET\nXOR ECX,ECX\nMOV RAX,RCX\nRET\n'
p2048
S'80 7e 10 00\n75 5c\n48 85 ff\n78 07\nf3 48 0f 2a c7\neb 15\n48 89 f8\n48 d1 e8\n83 e7 01\n48 09 c7\nf3 48 0f 2a c7\nf3 0f 58 c0\nf3 0f 5e 46 08\nf3 0f 10 0d 54 98 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f8\n0f 2e c1\n48 0f 43 f9\n0f 2e 05 2c 98 00 00\n73 1f\n50\ne8 98 08 00 00\n48 89 c6\nba 08 00 00 00\n31 c9\n48 f7 e2\n48 0f 41 ce\n48 83 c4 08\n48 89 c8\nc3\n31 c9\n48 89 c8\nc3\n'
p2049
S'.text:0000000000409b60\n.text:0000000000409b64\n.text:0000000000409b66\n.text:0000000000409b69\n.text:0000000000409b6b\n.text:0000000000409b70\n.text:0000000000409b72\n.text:0000000000409b75\n.text:0000000000409b78\n.text:0000000000409b7b\n.text:0000000000409b7e\n.text:0000000000409b83\n.text:0000000000409b87\n.text:0000000000409b8c\n.text:0000000000409b94\n.text:0000000000409b97\n.text:0000000000409b9b\n.text:0000000000409ba0\n.text:0000000000409baa\n.text:0000000000409bad\n.text:0000000000409bb2\n.text:0000000000409bb5\n.text:0000000000409bb9\n.text:0000000000409bc0\n.text:0000000000409bc2\n.text:0000000000409bc3\n.text:0000000000409bc8\n.text:0000000000409bcb\n.text:0000000000409bd0\n.text:0000000000409bd2\n.text:0000000000409bd5\n.text:0000000000409bd9\n.text:0000000000409bdd\n.text:0000000000409be0\n.text:0000000000409be1\n.text:0000000000409be3\n.text:0000000000409be6\n'
p2050
tp2051
sS'openat_proc_name'
p2052
(S'\n__stdcall openat_proc_name(char * buf, char * file)\n'
p2053
V\u000achar * openat_proc_name(char *buf,char *file)\u000a\u000a{\u000a  int proc_status;\u000a  uint __fd;\u000a  int iVar1;\u000a  size_t sVar2;\u000a  char *__s;\u000a  char dotdot_buf [32];\u000a  char acStack72 [32];\u000a  \u000a  if (*__s == 0) {\u000a    *buf = 0;\u000a    return buf;\u000a  }\u000a  if (proc_status == 0) {\u000a    __fd = open("/proc/self/fd",0x10900);\u000a    if ((int)__fd < 0) {\u000a      return (char *)0x0;\u000a    }\u000a    __sprintf_chk(acStack72,1,0x20,"/proc/self/fd/%d/../fd",(ulong)__fd);\u000a    iVar1 = access(acStack72,0);\u000a    proc_status = ~-(uint)(iVar1 == 0) | 1;\u000a    close(__fd);\u000a  }\u000a  if (-1 < proc_status) {\u000a    sVar2 = strlen(__s);\u000a    if ((sVar2 + 0x1b < 0xfc1) || (buf = (char *)malloc(sVar2 + 0x1b), buf != (char *)0x0)) {\u000a      iVar1 = __sprintf_chk(buf,1,0xffffffffffffffff,"/proc/self/fd/%d/",(ulong)file & 0xffffffff);\u000a      strcpy(buf + (long)iVar1,__s);\u000a      return buf;\u000a    }\u000a  }\u000a  return (char *)0x0;\u000a}\u000a\u000a
p2054
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x20\nMOV R14,RDX\nMOV R15D,ESI\nMOV RBX,RDI\nCMP byte ptr [R14],0x0\nJZ 0x00411300\nMOV EAX,dword ptr [0x00619a50]\nTEST EAX,EAX\nJNZ 0x004112aa\nMOV EDI,0x414432\nMOV ESI,0x10900\nXOR EAX,EAX\nCALL 0x00402660\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00411305\nMOV R12,RSP\nMOV ESI,0x1\nMOV EDX,0x20\nMOV ECX,0x414440\nXOR EAX,EAX\nMOV RDI,R12\nMOV R8D,EBP\nCALL 0x00402790\nXOR ESI,ESI\nMOV RDI,R12\nCALL 0x00402670\nCMP EAX,0x1\nSBB EAX,EAX\nNOT EAX\nOR EAX,0x1\nMOV dword ptr [0x00619a50],EAX\nMOV EDI,EBP\nCALL 0x004023c0\nMOV EAX,dword ptr [0x00619a50]\nTEST EAX,EAX\nJS 0x0041130f\nMOV RDI,R14\nCALL 0x00402290\nADD RAX,0x1b\nCMP RAX,0xfc1\nJC 0x004112d2\nMOV RDI,RAX\nCALL 0x00402540\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0041130f\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x414457\nXOR EAX,EAX\nMOV RDI,RBX\nMOV R8D,R15D\nCALL 0x00402790\nMOVSXD RDI,EAX\nADD RDI,RBX\nMOV RSI,R14\nCALL 0x00402140\nJMP 0x00411311\nMOV byte ptr [RBX],0x0\nJMP 0x00411311\nMOV dword ptr [0x00619a50],0xffffffff\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x20\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2055
S'55\n41 57\n41 56\n41 54\n53\n48 83 ec 20\n49 89 d6\n41 89 f7\n48 89 fb\n41 80 3e 00\n0f 84 c1 00 00 00\n8b 05 0b 88 20 00\n85 c0\n75 61\nbf 32 44 41 00\nbe 00 09 01 00\n31 c0\ne8 06 14 ff ff\n89 c5\n85 ed\n0f 88 a1 00 00 00\n49 89 e4\nbe 01 00 00 00\nba 20 00 00 00\nb9 40 44 41 00\n31 c0\n4c 89 e7\n41 89 e8\ne8 0d 15 ff ff\n31 f6\n4c 89 e7\ne8 e3 13 ff ff\n83 f8 01\n19 c0\nf7 d0\n83 c8 01\n89 05 b3 87 20 00\n89 ef\ne8 1c 11 ff ff\n8b 05 a6 87 20 00\n85 c0\n78 61\n4c 89 f7\ne8 da 0f ff ff\n48 83 c0 1b\n48 3d c1 0f 00 00\n72 10\n48 89 c7\ne8 76 12 ff ff\n48 89 c3\n48 85 db\n74 3d\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 57 44 41 00\n31 c0\n48 89 df\n45 89 f8\ne8 a0 14 ff ff\n48 63 f8\n48 01 df\n4c 89 f6\ne8 42 0e ff ff\neb 11\nc6 03 00\neb 0c\nc7 05 41 87 20 00 ff ff ff ff\n31 db\n48 89 d8\n48 83 c4 20\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p2056
S'.text:0000000000411220\n.text:0000000000411221\n.text:0000000000411223\n.text:0000000000411225\n.text:0000000000411227\n.text:0000000000411228\n.text:000000000041122c\n.text:000000000041122f\n.text:0000000000411232\n.text:0000000000411235\n.text:0000000000411239\n.text:000000000041123f\n.text:0000000000411245\n.text:0000000000411247\n.text:0000000000411249\n.text:000000000041124e\n.text:0000000000411253\n.text:0000000000411255\n.text:000000000041125a\n.text:000000000041125c\n.text:000000000041125e\n.text:0000000000411264\n.text:0000000000411267\n.text:000000000041126c\n.text:0000000000411271\n.text:0000000000411276\n.text:0000000000411278\n.text:000000000041127b\n.text:000000000041127e\n.text:0000000000411283\n.text:0000000000411285\n.text:0000000000411288\n.text:000000000041128d\n.text:0000000000411290\n.text:0000000000411292\n.text:0000000000411294\n.text:0000000000411297\n.text:000000000041129d\n.text:000000000041129f\n.text:00000000004112a4\n.text:00000000004112aa\n.text:00000000004112ac\n.text:00000000004112ae\n.text:00000000004112b1\n.text:00000000004112b6\n.text:00000000004112ba\n.text:00000000004112c0\n.text:00000000004112c2\n.text:00000000004112c5\n.text:00000000004112ca\n.text:00000000004112cd\n.text:00000000004112d0\n.text:00000000004112d2\n.text:00000000004112d7\n.text:00000000004112de\n.text:00000000004112e3\n.text:00000000004112e5\n.text:00000000004112e8\n.text:00000000004112eb\n.text:00000000004112f0\n.text:00000000004112f3\n.text:00000000004112f6\n.text:00000000004112f9\n.text:00000000004112fe\n.text:0000000000411300\n.text:0000000000411303\n.text:0000000000411305\n.text:000000000041130f\n.text:0000000000411311\n.text:0000000000411314\n.text:0000000000411318\n.text:0000000000411319\n.text:000000000041131b\n.text:000000000041131d\n.text:000000000041131f\n.text:0000000000411320\n'
p2057
tp2058
sS'security_check_context_raw'
p2059
(S'\n__stdcall security_check_context_raw(security_context_t con)\n'
p2060
V\u000aint security_check_context_raw(security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p2061
S'PUSH RAX\nCALL 0x00402100\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p2062
S'50\ne8 1a 5b ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p2063
S'.text:000000000040c5e0\n.text:000000000040c5e1\n.text:000000000040c5e6\n.text:000000000040c5ec\n.text:000000000040c5f1\n.text:000000000040c5f2\n'
p2064
tp2065
sS'ignorable_missing'
p2066
(S'\n__stdcall ignorable_missing(rm_options * x)\n'
p2067
V\u000a_Bool ignorable_missing(rm_options *x)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  if (x->ignore_missing_files != false) {\u000a    _Var1 = nonexistent_file_errno();\u000a    return _Var1;\u000a  }\u000a  return false;\u000a}\u000a\u000a
p2068
S'CMP byte ptr [RDI],0x0\nJZ 0x00403fb9\nMOV EDI,ESI\nJMP 0x00403fc0\nXOR EAX,EAX\nRET\n'
p2069
S'80 3f 00\n74 04\n89 f7\neb 07\n31 c0\nc3\n'
p2070
S'.text:0000000000403fb0\n.text:0000000000403fb3\n.text:0000000000403fb5\n.text:0000000000403fb7\n.text:0000000000403fb9\n.text:0000000000403fbb\n'
p2071
tp2072
sS'numbered_backup'
p2073
(S'\n__stdcall numbered_backup(char * * buffer, size_t buffer_size, size_t filelen)\n'
p2074
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000anumbered_backup_result numbered_backup(char **buffer,size_t buffer_size,size_t filelen)\u000a\u000a{\u000a  size_t s;\u000a  char *__dest;\u000a  char cVar1;\u000a  undefined2 uVar2;\u000a  long lVar3;\u000a  int iVar4;\u000a  undefined2 *name;\u000a  size_t sVar5;\u000a  DIR *__dirp;\u000a  dirent *pdVar6;\u000a  char *name_00;\u000a  char *__s2;\u000a  size_t sVar7;\u000a  long lVar8;\u000a  ulong __n;\u000a  bool bVar9;\u000a  ulong local_78;\u000a  ulong local_68;\u000a  ulong local_60;\u000a  \u000a  name_00 = *buffer;\u000a  name = (undefined2 *)last_component(name_00);\u000a  sVar5 = base_len((char *)name);\u000a  uVar2 = *name;\u000a  *name = 0x2e;\u000a  __dirp = opendir_safer(name_00);\u000a  *name = uVar2;\u000a  *(undefined *)((long)name + sVar5 + 4) = 0;\u000a  *(undefined4 *)((long)name + sVar5) = 0x7e317e2e;\u000a  if (__dirp == (DIR *)0x0) {\u000a    local_78._0_4_ = BACKUP_IS_NEW;\u000a  }\u000a  else {\u000a    pdVar6 = readdir((DIR *)__dirp);\u000a    if (pdVar6 == (dirent *)0x0) {\u000a      local_78._0_4_ = BACKUP_IS_NEW;\u000a    }\u000a    else {\u000a      name = (undefined2 *)((long)name - (long)name_00);\u000a      local_78 = 2;\u000a      local_68 = 1;\u000a      local_60 = buffer_size;\u000a      do {\u000a        if (pdVar6->d_ino != 0) {\u000a          sVar7 = strlen(pdVar6->d_name);\u000a          if (((sVar5 + 4 <= sVar7) &&\u000a              (iVar4 = memcmp(name_00 + (long)name,pdVar6->d_name,sVar5 + 2), iVar4 == 0)) &&\u000a             ((byte)(pdVar6->d_name[sVar5 + 2] - 0x31U) < 9)) {\u000a            bVar9 = pdVar6->d_name[sVar5 + 2] == '9';\u000a            cVar1 = pdVar6->d_name[sVar5 + 3];\u000a            iVar4 = (int)cVar1;\u000a            if (iVar4 - 0x30U < 10) {\u000a              lVar3 = 0;\u000a              do {\u000a                lVar8 = lVar3;\u000a                bVar9 = (bool)(bVar9 & (char)iVar4 == '9');\u000a                cVar1 = pdVar6->d_name[lVar8 + sVar5 + 4];\u000a                iVar4 = (int)cVar1;\u000a                lVar3 = lVar8 + 1;\u000a              } while (iVar4 - 0x30U < 10);\u000a              __n = lVar8 + 2;\u000a            }\u000a            else {\u000a              __n = 1;\u000a            }\u000a            if (((cVar1 == '~') && (__s2 = pdVar6->d_name + sVar5 + 2, __s2[__n + 1] == 0)) &&\u000a               ((local_68 < __n ||\u000a                ((local_68 == __n && (iVar4 = memcmp(name_00 + filelen + 2,__s2,__n), iVar4 < 1)))))\u000a               ) {\u000a              local_78 = (ulong)bVar9;\u000a              local_68 = local_78 + __n;\u000a              s = filelen + 3 + local_68;\u000a              if (local_60 <= s) {\u000a                name_00 = (char *)xnrealloc(name_00,2,s);\u000a                local_60 = s * 2;\u000a              }\u000a              *(undefined2 *)(name_00 + filelen) = 0x7e2e;\u000a              name_00[filelen + 2] = '0';\u000a              __dest = name_00 + local_78 + 2 + filelen;\u000a              memcpy(__dest,__s2,__n + 2);\u000a              __s2 = __dest + (__n - 1);\u000a              cVar1 = __dest[__n - 1];\u000a              while (cVar1 == '9') {\u000a                *__s2 = '0';\u000a                cVar1 = __s2[-1];\u000a                __s2 = __s2 + -1;\u000a              }\u000a              *__s2 = cVar1 + 1;\u000a            }\u000a          }\u000a        }\u000a        pdVar6 = readdir((DIR *)__dirp);\u000a      } while (pdVar6 != (dirent *)0x0);\u000a    }\u000a    closedir((DIR *)__dirp);\u000a    *buffer = name_00;\u000a  }\u000a  return (numbered_backup_result)local_78;\u000a}\u000a\u000a
p2075
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x58\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV R14,RDI\nMOV R15,qword ptr [R14]\nMOV RDI,R15\nCALL 0x00409000\nMOV R13,RAX\nMOV RDI,R13\nCALL 0x00409060\nMOV RBP,RAX\nMOVZX EBX,word ptr [R13]\nMOV word ptr [R13],0x2e\nMOV RDI,R15\nCALL 0x00408ec0\nMOV R12,RAX\nMOV word ptr [R13],BX\nMOV RBX,RBP\nMOV byte ptr [R13 + RBX*0x1 + 0x4],0x0\nMOV dword ptr [R13 + RBX*0x1],0x7e317e2e\nTEST R12,R12\nJZ 0x00408986\nMOV qword ptr [RSP + 0x40],R14\nMOV RDI,R12\nCALL 0x00402520\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00408990\nSUB R13,R15\nLEA RAX,[RBX + 0x4]\nMOV qword ptr [RSP + 0x50],RAX\nLEA RAX,[RBX + 0x2]\nMOV qword ptr [RSP + 0x48],RAX\nMOV RAX,qword ptr [RSP + 0x18]\nLEA RAX,[RAX + 0x3]\nMOV qword ptr [RSP + 0x30],RAX\nLEA RAX,[RBX + 0x17]\nMOV qword ptr [RSP + 0x38],RAX\nMOV EAX,0x2\nMOV qword ptr [RSP + 0x10],RAX\nMOV EAX,0x1\nMOV qword ptr [RSP + 0x20],RAX\nMOV qword ptr [RSP + 0x8],RBX\nJMP 0x00408a70\nMOV EAX,0x2\nJMP 0x00408b69\nMOV EAX,0x2\nMOV qword ptr [RSP + 0x10],RAX\nJMP 0x00408b54\nCMP qword ptr [RSP + 0x20],R15\nJNC 0x004089c7\nMOVZX ESI,BL\nLEA RCX,[RSI + R15*0x1]\nMOV RAX,qword ptr [RSP + 0x30]\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RAX + RCX*0x1]\nCMP qword ptr [RSP + 0x28],RAX\nJBE 0x004089ec\nMOV RAX,RBP\nJMP 0x00408a0d\nJNZ 0x00408b32\nMOV RAX,qword ptr [RSP + 0x18]\nLEA RDI,[RBP + RAX*0x1 + 0x2]\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00402420\nTEST EAX,EAX\nJG 0x00408b32\nJMP 0x004089a6\nMOV RBX,RSI\nMOV ESI,0x2\nMOV RDI,RBP\nMOV RBP,RAX\nMOV RDX,RBP\nCALL 0x0040d970\nMOV RSI,RBX\nADD RBP,RBP\nMOV qword ptr [RSP + 0x28],RBP\nMOV RDX,qword ptr [RSP + 0x18]\nLEA RCX,[RAX + RDX*0x1]\nMOV word ptr [RAX + RDX*0x1],0x7e2e\nMOV RBX,RAX\nMOV byte ptr [RAX + RDX*0x1 + 0x2],0x30\nMOV qword ptr [RSP + 0x10],RSI\nLEA RBP,[RSI + RCX*0x1 + 0x2]\nLEA RDX,[R15 + 0x2]\nMOV RDI,RBP\nMOV RSI,R14\nCALL 0x004024d0\nLEA RAX,[R15 + RBP*0x1 + -0x1]\nMOV CL,byte ptr [R15 + RBP*0x1 + -0x1]\nCMP CL,0x39\nJNZ 0x00408a5f\nNOP dword ptr [RAX]\nMOV byte ptr [RAX],0x30\nMOVZX ECX,byte ptr [RAX + -0x1]\nDEC RAX\nCMP CL,0x39\nJZ 0x00408a50\nINC CL\nMOV byte ptr [RAX],CL\nMOV R15,RBX\nJMP 0x00408b35\nCMP qword ptr [R14],0x0\nJZ 0x00408b40\nLEA RBP,[R14 + 0x13]\nMOV RDI,RBP\nCALL 0x00402290\nCMP RAX,qword ptr [RSP + 0x50]\nJC 0x00408b40\nLEA RDI,[R15 + R13*0x1]\nMOV RSI,RBP\nMOV RDX,qword ptr [RSP + 0x48]\nCALL 0x00402420\nTEST EAX,EAX\nJNZ 0x00408b40\nMOV AL,byte ptr [R14 + RBX*0x1 + 0x15]\nMOV ECX,EAX\nADD CL,0xcf\nCMP CL,0x8\nJA 0x00408b40\nLEA RCX,[R14 + RBX*0x1 + 0x13]\nCMP AL,0x39\nSETZ BL\nMOVSX EAX,byte ptr [RCX + 0x3]\nMOV ECX,EAX\nADD ECX,-0x30\nMOV RBP,R15\nCMP ECX,0x9\nJA 0x00408b12\nMOV RCX,qword ptr [RSP + 0x38]\nLEA RCX,[R14 + RCX*0x1]\nXOR R15D,R15D\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP AL,0x39\nSETZ AL\nAND BL,AL\nMOVSX EAX,byte ptr [RCX + R15*0x1]\nMOV EDX,EAX\nADD EDX,-0x30\nINC R15\nCMP EDX,0xa\nJC 0x00408af0\nINC R15\nCMP AL,0x7e\nJZ 0x00408b1c\nJMP 0x00408b32\nMOV R15D,0x1\nCMP AL,0x7e\nJNZ 0x00408b32\nMOV RAX,qword ptr [RSP + 0x8]\nLEA R14,[R14 + RAX*0x1 + 0x15]\nCMP byte ptr [R14 + R15*0x1 + 0x1],0x0\nJZ 0x0040899f\nMOV R15,RBP\nMOV RBX,qword ptr [RSP + 0x8]\nNOP word ptr [RAX + RAX*0x1]\nMOV RDI,R12\nCALL 0x00402520\nMOV R14,RAX\nTEST R14,R14\nJNZ 0x00408a70\nMOV RDI,R12\nCALL 0x004023e0\nMOV RAX,qword ptr [RSP + 0x40]\nMOV qword ptr [RAX],R15\nMOV RAX,qword ptr [RSP + 0x10]\nADD RSP,0x58\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2076
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 58\n48 89 54 24 18\n48 89 74 24 28\n49 89 fe\n4d 8b 3e\n4c 89 ff\ne8 1a 07 00 00\n49 89 c5\n4c 89 ef\ne8 6f 07 00 00\n48 89 c5\n41 0f b7 5d 00\n66 41 c7 45 00 2e 00\n4c 89 ff\ne8 b8 05 00 00\n49 89 c4\n66 41 89 5d 00\n48 89 eb\n41 c6 44 1d 04 00\n41 c7 44 1d 00 2e 7e 31 7e\n4d 85 e4\n74 5f\n4c 89 74 24 40\n4c 89 e7\ne8 ec 9b ff ff\n49 89 c6\n4d 85 f6\n74 54\n4d 29 fd\n48 8d 43 04\n48 89 44 24 50\n48 8d 43 02\n48 89 44 24 48\n48 8b 44 24 18\n48 8d 40 03\n48 89 44 24 30\n48 8d 43 17\n48 89 44 24 38\nb8 02 00 00 00\n48 89 44 24 10\nb8 01 00 00 00\n48 89 44 24 20\n48 89 5c 24 08\ne9 ea 00 00 00\nb8 02 00 00 00\ne9 d9 01 00 00\nb8 02 00 00 00\n48 89 44 24 10\ne9 b5 01 00 00\n4c 39 7c 24 20\n73 21\n0f b6 f3\n4a 8d 0c 3e\n48 8b 44 24 30\n48 89 4c 24 20\n48 8d 04 08\n48 39 44 24 28\n76 2a\n48 89 e8\neb 46\n0f 85 65 01 00 00\n48 8b 44 24 18\n48 8d 7c 05 02\n4c 89 f6\n4c 89 fa\ne8 3e 9a ff ff\n85 c0\n0f 8f 48 01 00 00\neb ba\n48 89 f3\nbe 02 00 00 00\n48 89 ef\n48 89 c5\n48 89 ea\ne8 6e 4f 00 00\n48 89 de\n48 01 ed\n48 89 6c 24 28\n48 8b 54 24 18\n48 8d 0c 10\n66 c7 04 10 2e 7e\n48 89 c3\nc6 44 10 02 30\n48 89 74 24 10\n48 8d 6c 0e 02\n49 8d 57 02\n48 89 ef\n4c 89 f6\ne8 93 9a ff ff\n49 8d 44 2f ff\n41 8a 4c 2f ff\n80 f9 39\n75 13\n0f 1f 40 00\nc6 00 30\n0f b6 48 ff\n48 ff c8\n80 f9 39\n74 f1\nfe c1\n88 08\n49 89 df\ne9 ca 00 00 00\n49 83 3e 00\n0f 84 c6 00 00 00\n49 8d 6e 13\n48 89 ef\ne8 0a 98 ff ff\n48 3b 44 24 50\n0f 82 af 00 00 00\n4b 8d 3c 2f\n48 89 ee\n48 8b 54 24 48\ne8 7e 99 ff ff\n85 c0\n0f 85 96 00 00 00\n41 8a 44 1e 15\n89 c1\n80 c1 cf\n80 f9 08\n0f 87 83 00 00 00\n49 8d 4c 1e 13\n3c 39\n0f 94 c3\n0f be 41 03\n89 c1\n83 c1 d0\n4c 89 fd\n83 f9 09\n77 3a\n48 8b 4c 24 38\n49 8d 0c 0e\n45 31 ff\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n3c 39\n0f 94 c0\n20 c3\n42 0f be 04 39\n89 c2\n83 c2 d0\n49 ff c7\n83 fa 0a\n72 e7\n49 ff c7\n3c 7e\n74 0c\neb 20\n41 bf 01 00 00 00\n3c 7e\n75 16\n48 8b 44 24 08\n4d 8d 74 06 15\n43 80 7c 3e 01 00\n0f 84 6d fe ff ff\n49 89 ef\n48 8b 5c 24 08\n66 0f 1f 44 00 00\n4c 89 e7\ne8 d8 99 ff ff\n49 89 c6\n4d 85 f6\n0f 85 1c ff ff ff\n4c 89 e7\ne8 84 98 ff ff\n48 8b 44 24 40\n4c 89 38\n48 8b 44 24 10\n48 83 c4 58\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2077
S'.text:00000000004088c0\n.text:00000000004088c1\n.text:00000000004088c3\n.text:00000000004088c5\n.text:00000000004088c7\n.text:00000000004088c9\n.text:00000000004088ca\n.text:00000000004088ce\n.text:00000000004088d3\n.text:00000000004088d8\n.text:00000000004088db\n.text:00000000004088de\n.text:00000000004088e1\n.text:00000000004088e6\n.text:00000000004088e9\n.text:00000000004088ec\n.text:00000000004088f1\n.text:00000000004088f4\n.text:00000000004088f9\n.text:0000000000408900\n.text:0000000000408903\n.text:0000000000408908\n.text:000000000040890b\n.text:0000000000408910\n.text:0000000000408913\n.text:0000000000408919\n.text:0000000000408922\n.text:0000000000408925\n.text:0000000000408927\n.text:000000000040892c\n.text:000000000040892f\n.text:0000000000408934\n.text:0000000000408937\n.text:000000000040893a\n.text:000000000040893c\n.text:000000000040893f\n.text:0000000000408943\n.text:0000000000408948\n.text:000000000040894c\n.text:0000000000408951\n.text:0000000000408956\n.text:000000000040895a\n.text:000000000040895f\n.text:0000000000408963\n.text:0000000000408968\n.text:000000000040896d\n.text:0000000000408972\n.text:0000000000408977\n.text:000000000040897c\n.text:0000000000408981\n.text:0000000000408986\n.text:000000000040898b\n.text:0000000000408990\n.text:0000000000408995\n.text:000000000040899a\n.text:000000000040899f\n.text:00000000004089a4\n.text:00000000004089a6\n.text:00000000004089a9\n.text:00000000004089ad\n.text:00000000004089b2\n.text:00000000004089b7\n.text:00000000004089bb\n.text:00000000004089c0\n.text:00000000004089c2\n.text:00000000004089c5\n.text:00000000004089c7\n.text:00000000004089cd\n.text:00000000004089d2\n.text:00000000004089d7\n.text:00000000004089da\n.text:00000000004089dd\n.text:00000000004089e2\n.text:00000000004089e4\n.text:00000000004089ea\n.text:00000000004089ec\n.text:00000000004089ef\n.text:00000000004089f4\n.text:00000000004089f7\n.text:00000000004089fa\n.text:00000000004089fd\n.text:0000000000408a02\n.text:0000000000408a05\n.text:0000000000408a08\n.text:0000000000408a0d\n.text:0000000000408a12\n.text:0000000000408a16\n.text:0000000000408a1c\n.text:0000000000408a1f\n.text:0000000000408a24\n.text:0000000000408a29\n.text:0000000000408a2e\n.text:0000000000408a32\n.text:0000000000408a35\n.text:0000000000408a38\n.text:0000000000408a3d\n.text:0000000000408a42\n.text:0000000000408a47\n.text:0000000000408a4a\n.text:0000000000408a4c\n.text:0000000000408a50\n.text:0000000000408a53\n.text:0000000000408a57\n.text:0000000000408a5a\n.text:0000000000408a5d\n.text:0000000000408a5f\n.text:0000000000408a61\n.text:0000000000408a63\n.text:0000000000408a66\n.text:0000000000408a70\n.text:0000000000408a74\n.text:0000000000408a7a\n.text:0000000000408a7e\n.text:0000000000408a81\n.text:0000000000408a86\n.text:0000000000408a8b\n.text:0000000000408a91\n.text:0000000000408a95\n.text:0000000000408a98\n.text:0000000000408a9d\n.text:0000000000408aa2\n.text:0000000000408aa4\n.text:0000000000408aaa\n.text:0000000000408aaf\n.text:0000000000408ab1\n.text:0000000000408ab4\n.text:0000000000408ab7\n.text:0000000000408abd\n.text:0000000000408ac2\n.text:0000000000408ac4\n.text:0000000000408ac7\n.text:0000000000408acb\n.text:0000000000408acd\n.text:0000000000408ad0\n.text:0000000000408ad3\n.text:0000000000408ad6\n.text:0000000000408ad8\n.text:0000000000408add\n.text:0000000000408ae1\n.text:0000000000408ae4\n.text:0000000000408af0\n.text:0000000000408af2\n.text:0000000000408af5\n.text:0000000000408af7\n.text:0000000000408afc\n.text:0000000000408afe\n.text:0000000000408b01\n.text:0000000000408b04\n.text:0000000000408b07\n.text:0000000000408b09\n.text:0000000000408b0c\n.text:0000000000408b0e\n.text:0000000000408b10\n.text:0000000000408b12\n.text:0000000000408b18\n.text:0000000000408b1a\n.text:0000000000408b1c\n.text:0000000000408b21\n.text:0000000000408b26\n.text:0000000000408b2c\n.text:0000000000408b32\n.text:0000000000408b35\n.text:0000000000408b3a\n.text:0000000000408b40\n.text:0000000000408b43\n.text:0000000000408b48\n.text:0000000000408b4b\n.text:0000000000408b4e\n.text:0000000000408b54\n.text:0000000000408b57\n.text:0000000000408b5c\n.text:0000000000408b61\n.text:0000000000408b64\n.text:0000000000408b69\n.text:0000000000408b6d\n.text:0000000000408b6e\n.text:0000000000408b70\n.text:0000000000408b72\n.text:0000000000408b74\n.text:0000000000408b76\n.text:0000000000408b77\n'
p2078
tp2079
sS'freadahead'
p2080
(S'\n__stdcall freadahead(FILE * fp)\n'
p2081
V\u000asize_t freadahead(FILE *fp)\u000a\u000a{\u000a  if (fp->_IO_write_base <= fp->_IO_write_ptr && fp->_IO_write_ptr != fp->_IO_write_base) {\u000a    return 0;\u000a  }\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return (size_t)(fp->_IO_read_end + -(long)fp->_IO_read_ptr);\u000a  }\u000a  return (size_t)(fp->_IO_read_end + -(long)fp->_IO_read_ptr +\u000a                 (long)(fp->_IO_save_end + -(long)fp->_IO_save_base));\u000a}\u000a\u000a
p2082
S'MOV RAX,qword ptr [RDI + 0x28]\nCMP RAX,qword ptr [RDI + 0x20]\nJBE 0x0040de4d\nXOR EAX,EAX\nRET\nMOV RAX,qword ptr [RDI + 0x10]\nSUB RAX,qword ptr [RDI + 0x8]\nTEST byte ptr [RDI + 0x1],0x1\nJNZ 0x0040de61\nXOR ECX,ECX\nADD RAX,RCX\nRET\nMOV RCX,qword ptr [RDI + 0x58]\nSUB RCX,qword ptr [RDI + 0x48]\nADD RAX,RCX\nRET\n'
p2083
S'48 8b 47 28\n48 3b 47 20\n76 03\n31 c0\nc3\n48 8b 47 10\n48 2b 47 08\nf6 47 01 01\n75 06\n31 c9\n48 01 c8\nc3\n48 8b 4f 58\n48 2b 4f 48\n48 01 c8\nc3\n'
p2084
S'.text:000000000040de40\n.text:000000000040de44\n.text:000000000040de48\n.text:000000000040de4a\n.text:000000000040de4c\n.text:000000000040de4d\n.text:000000000040de51\n.text:000000000040de55\n.text:000000000040de59\n.text:000000000040de5b\n.text:000000000040de5d\n.text:000000000040de60\n.text:000000000040de61\n.text:000000000040de65\n.text:000000000040de69\n.text:000000000040de6c\n'
p2085
tp2086
sS'hash_rehash'
p2087
(S'\n__stdcall hash_rehash(Hash_table * table, size_t candidate)\n'
p2088
V\u000a_Bool hash_rehash(Hash_table *table,size_t candidate)\u000a\u000a{\u000a  _Bool _Var1;\u000a  hash_entry *local_68;\u000a  hash_entry *local_60;\u000a  size_t local_58;\u000a  undefined4 local_50;\u000a  undefined4 uStack76;\u000a  undefined4 uStack72;\u000a  undefined4 uStack68;\u000a  Hash_tuning *local_40;\u000a  size_t (*local_38)(void *,size_t);\u000a  _Bool (*local_30)(void *,void *);\u000a  void (*local_28)(void *);\u000a  hash_entry *local_20;\u000a  \u000a  local_58 = compute_bucket_size(candidate,table->tuning);\u000a  if (local_58 != 0) {\u000a    if (local_58 == table->n_buckets) {\u000a      return true;\u000a    }\u000a    local_68 = (hash_entry *)rpl_calloc(local_58,0x10);\u000a    if (local_68 != (hash_entry *)0x0) {\u000a      local_60 = local_68 + local_58;\u000a      local_50 = 0;\u000a      uStack76 = 0;\u000a      uStack72 = 0;\u000a      uStack68 = 0;\u000a      local_40 = table->tuning;\u000a      local_38 = table->hasher;\u000a      local_30 = table->comparator;\u000a      local_28 = table->data_freer;\u000a      local_20 = table->free_entry_list;\u000a      _Var1 = transfer_entries((Hash_table *)&local_68,table);\u000a      if (_Var1 != false) {\u000a        free(table->bucket);\u000a        table->bucket = local_68;\u000a        table->bucket_limit = local_60;\u000a        table->n_buckets = local_58;\u000a        table->n_buckets_used = CONCAT44(uStack76,local_50);\u000a        table->free_entry_list = local_20;\u000a        return true;\u000a      }\u000a      table->free_entry_list = local_20;\u000a      _Var1 = transfer_entries(table,(Hash_table *)&local_68);\u000a      if ((_Var1 == false) ||\u000a         (_Var1 = transfer_entries(table,(Hash_table *)&local_68), _Var1 == false)) {\u000a                    /* WARNING: Subroutine does not return */\u000a        abort();\u000a      }\u000a      free(local_68);\u000a    }\u000a  }\u000a  return false;\u000a}\u000a\u000a
p2089
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x50\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x28]\nMOV RDI,RSI\nMOV RSI,RAX\nCALL 0x00409b60\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00409e91\nMOV R14B,0x1\nCMP RBP,qword ptr [RBX + 0x10]\nJZ 0x00409e94\nMOV ESI,0x10\nMOV RDI,RBP\nCALL 0x0040dbe0\nMOV qword ptr [RSP],RAX\nTEST RAX,RAX\nJZ 0x00409e91\nMOV qword ptr [RSP + 0x10],RBP\nSHL RBP,0x4\nADD RBP,qword ptr [RSP]\nMOV qword ptr [RSP + 0x8],RBP\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RSP + 0x18],XMM0\nMOV RAX,qword ptr [RBX + 0x28]\nMOV qword ptr [RSP + 0x28],RAX\nMOV RAX,qword ptr [RBX + 0x30]\nMOV qword ptr [RSP + 0x30],RAX\nMOV RAX,qword ptr [RBX + 0x38]\nMOV qword ptr [RSP + 0x38],RAX\nMOV RAX,qword ptr [RBX + 0x40]\nMOV qword ptr [RSP + 0x40],RAX\nMOV RAX,qword ptr [RBX + 0x48]\nMOV qword ptr [RSP + 0x48],RAX\nMOV RDI,RSP\nXOR EDX,EDX\nMOV RSI,RBX\nCALL 0x00409eb0\nTEST AL,AL\nJZ 0x00409e5a\nMOV RDI,qword ptr [RBX]\nCALL 0x004020c0\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX],RAX\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [RBX + 0x8],RAX\nMOV RAX,qword ptr [RSP + 0x10]\nMOV qword ptr [RBX + 0x10],RAX\nMOV RAX,qword ptr [RSP + 0x18]\nMOV qword ptr [RBX + 0x18],RAX\nMOV RAX,qword ptr [RSP + 0x48]\nMOV qword ptr [RBX + 0x48],RAX\nJMP 0x00409e94\nMOV RAX,qword ptr [RSP + 0x48]\nMOV qword ptr [RBX + 0x48],RAX\nMOV RSI,RSP\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00409eb0\nTEST AL,AL\nJZ 0x00409ea0\nMOV RSI,RSP\nXOR EDX,EDX\nMOV RDI,RBX\nCALL 0x00409eb0\nTEST AL,AL\nJZ 0x00409ea0\nMOV RDI,qword ptr [RSP]\nCALL 0x004020c0\nXOR R14D,R14D\nMOV EAX,R14D\nADD RSP,0x50\nPOP RBX\nPOP R14\nPOP RBP\nRET\nCALL 0x004020f0\n'
p2090
S'55\n41 56\n53\n48 83 ec 50\n48 89 fb\n48 8b 43 28\n48 89 f7\n48 89 c6\ne8 c6 fd ff ff\n48 89 c5\n48 85 ed\n0f 84 eb 00 00 00\n41 b6 01\n48 3b 6b 10\n0f 84 e1 00 00 00\nbe 10 00 00 00\n48 89 ef\ne8 20 3e 00 00\n48 89 04 24\n48 85 c0\n0f 84 c4 00 00 00\n48 89 6c 24 10\n48 c1 e5 04\n48 03 2c 24\n48 89 6c 24 08\n0f 57 c0\n0f 11 44 24 18\n48 8b 43 28\n48 89 44 24 28\n48 8b 43 30\n48 89 44 24 30\n48 8b 43 38\n48 89 44 24 38\n48 8b 43 40\n48 89 44 24 40\n48 8b 43 48\n48 89 44 24 48\n48 89 e7\n31 d2\n48 89 de\ne8 8f 00 00 00\n84 c0\n74 35\n48 8b 3b\ne8 93 82 ff ff\n48 8b 04 24\n48 89 03\n48 8b 44 24 08\n48 89 43 08\n48 8b 44 24 10\n48 89 43 10\n48 8b 44 24 18\n48 89 43 18\n48 8b 44 24 48\n48 89 43 48\neb 3a\n48 8b 44 24 48\n48 89 43 48\n48 89 e6\nba 01 00 00 00\n48 89 df\ne8 3d 00 00 00\n84 c0\n74 29\n48 89 e6\n31 d2\n48 89 df\ne8 2c 00 00 00\n84 c0\n74 18\n48 8b 3c 24\ne8 2f 82 ff ff\n45 31 f6\n44 89 f0\n48 83 c4 50\n5b\n41 5e\n5d\nc3\ne8 4b 82 ff ff\n'
p2091
S'.text:0000000000409d80\n.text:0000000000409d81\n.text:0000000000409d83\n.text:0000000000409d84\n.text:0000000000409d88\n.text:0000000000409d8b\n.text:0000000000409d8f\n.text:0000000000409d92\n.text:0000000000409d95\n.text:0000000000409d9a\n.text:0000000000409d9d\n.text:0000000000409da0\n.text:0000000000409da6\n.text:0000000000409da9\n.text:0000000000409dad\n.text:0000000000409db3\n.text:0000000000409db8\n.text:0000000000409dbb\n.text:0000000000409dc0\n.text:0000000000409dc4\n.text:0000000000409dc7\n.text:0000000000409dcd\n.text:0000000000409dd2\n.text:0000000000409dd6\n.text:0000000000409dda\n.text:0000000000409ddf\n.text:0000000000409de2\n.text:0000000000409de7\n.text:0000000000409deb\n.text:0000000000409df0\n.text:0000000000409df4\n.text:0000000000409df9\n.text:0000000000409dfd\n.text:0000000000409e02\n.text:0000000000409e06\n.text:0000000000409e0b\n.text:0000000000409e0f\n.text:0000000000409e14\n.text:0000000000409e17\n.text:0000000000409e19\n.text:0000000000409e1c\n.text:0000000000409e21\n.text:0000000000409e23\n.text:0000000000409e25\n.text:0000000000409e28\n.text:0000000000409e2d\n.text:0000000000409e31\n.text:0000000000409e34\n.text:0000000000409e39\n.text:0000000000409e3d\n.text:0000000000409e42\n.text:0000000000409e46\n.text:0000000000409e4b\n.text:0000000000409e4f\n.text:0000000000409e54\n.text:0000000000409e58\n.text:0000000000409e5a\n.text:0000000000409e5f\n.text:0000000000409e63\n.text:0000000000409e66\n.text:0000000000409e6b\n.text:0000000000409e6e\n.text:0000000000409e73\n.text:0000000000409e75\n.text:0000000000409e77\n.text:0000000000409e7a\n.text:0000000000409e7c\n.text:0000000000409e7f\n.text:0000000000409e84\n.text:0000000000409e86\n.text:0000000000409e88\n.text:0000000000409e8c\n.text:0000000000409e91\n.text:0000000000409e94\n.text:0000000000409e97\n.text:0000000000409e9b\n.text:0000000000409e9c\n.text:0000000000409e9e\n.text:0000000000409e9f\n.text:0000000000409ea0\n'
p2092
tp2093
sS'nonexistent_file_errno'
p2094
(S'\n__stdcall nonexistent_file_errno()\n'
p2095
V\u000a_Bool nonexistent_file_errno(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if (((0x16 < in_EDI) || ((0x500004U >> (in_EDI & 0x1f) & 1) == 0)) && (in_EDI != 0x54)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p2096
S'MOV AL,0x1\nCMP EDI,0x16\nJA 0x00403fd1\nMOV ECX,0x500004\nBT ECX,EDI\nJC 0x00403fd6\nCMP EDI,0x54\nJNZ 0x00403fd7\nRET\nXOR EAX,EAX\nRET\n'
p2097
S'b0 01\n83 ff 16\n77 0a\nb9 04 00 50 00\n0f a3 f9\n72 05\n83 ff 54\n75 01\nc3\n31 c0\nc3\n'
p2098
S'.text:0000000000403fc0\n.text:0000000000403fc2\n.text:0000000000403fc5\n.text:0000000000403fc7\n.text:0000000000403fcc\n.text:0000000000403fcf\n.text:0000000000403fd1\n.text:0000000000403fd4\n.text:0000000000403fd6\n.text:0000000000403fd7\n.text:0000000000403fd9\n'
p2099
tp2100
sS'posix_fadvise'
p2101
(S'\n__stdcall posix_fadvise(int __fd, __off_t __offset, __off_t __len, int __advise)\n'
p2102
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint posix_fadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_posix_fadvise_006191b8)();\u000a  return iVar1;\u000a}\u000a\u000a
p2103
S'JMP qword ptr [0x006191b8]\n'
p2104
S'ff 25 c2 6d 21 00\n'
p2105
S'.plt:00000000004023f0\n'
p2106
tp2107
sS'errno_unsupported'
p2108
(S'\n__stdcall errno_unsupported()\n'
p2109
V\u000a_Bool errno_unsupported(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 0x3d || in_EDI == 0x5f);\u000a}\u000a\u000a
p2110
S'CMP EDI,0x5f\nSETZ CL\nCMP EDI,0x3d\nSETZ AL\nOR AL,CL\nRET\n'
p2111
S'83 ff 5f\n0f 94 c1\n83 ff 3d\n0f 94 c0\n08 c8\nc3\n'
p2112
S'.text:0000000000407700\n.text:0000000000407703\n.text:0000000000407706\n.text:0000000000407709\n.text:000000000040770c\n.text:000000000040770e\n'
p2113
tp2114
sS'lseek'
p2115
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p2116
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_00619158)();\u000a  return _Var1;\u000a}\u000a\u000a
p2117
S'JMP qword ptr [0x00619158]\n'
p2118
S'ff 25 22 6e 21 00\n'
p2119
S'.plt:0000000000402330\n'
p2120
tp2121
sS'AD_compare'
p2122
(S'\n__stdcall AD_compare(void * x, void * y)\n'
p2123
V\u000a_Bool AD_compare(void *x,void *y)\u000a\u000a{\u000a  if (*(long *)((long)x + 8) == *(long *)((long)y + 8)) {\u000a    return (_Bool)(*(long *)x == *(long *)y);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p2124
S'MOV RAX,qword ptr [RDI + 0x8]\nCMP RAX,qword ptr [RSI + 0x8]\nJNZ 0x0040fb94\nMOV RAX,qword ptr [RDI]\nCMP RAX,qword ptr [RSI]\nSETZ AL\nRET\nXOR EAX,EAX\nRET\n'
p2125
S'48 8b 47 08\n48 3b 46 08\n75 0a\n48 8b 07\n48 3b 06\n0f 94 c0\nc3\n31 c0\nc3\n'
p2126
S'.text:000000000040fb80\n.text:000000000040fb84\n.text:000000000040fb88\n.text:000000000040fb8a\n.text:000000000040fb8d\n.text:000000000040fb90\n.text:000000000040fb93\n.text:000000000040fb94\n.text:000000000040fb96\n'
p2127
tp2128
sS'opendir_safer'
p2129
(S'\n__stdcall opendir_safer(char * name)\n'
p2130
V\u000aDIR * opendir_safer(char *name)\u000a\u000a{\u000a  uint uVar1;\u000a  int __fd;\u000a  DIR *__dirp;\u000a  DIR *pDVar2;\u000a  int *piVar3;\u000a  int iVar4;\u000a  \u000a  __dirp = opendir(name);\u000a  if (__dirp == (DIR *)0x0) {\u000a    return (DIR *)0x0;\u000a  }\u000a  uVar1 = dirfd(__dirp);\u000a  if (2 < uVar1) {\u000a    return (DIR *)__dirp;\u000a  }\u000a  __fd = dup_safer();\u000a  if (__fd < 0) {\u000a    piVar3 = __errno_location();\u000a    iVar4 = *piVar3;\u000a  }\u000a  else {\u000a    pDVar2 = fdopendir(__fd);\u000a    piVar3 = __errno_location();\u000a    iVar4 = *piVar3;\u000a    if (pDVar2 != (DIR *)0x0) goto LAB_00408f1d;\u000a    close(__fd);\u000a  }\u000a  pDVar2 = (DIR *)0x0;\u000aLAB_00408f1d:\u000a  closedir(__dirp);\u000a  piVar3 = __errno_location();\u000a  *piVar3 = iVar4;\u000a  return (DIR *)pDVar2;\u000a}\u000a\u000a
p2131
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nCALL 0x00402230\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00408f0e\nMOV RDI,RBX\nCALL 0x00402490\nCMP EAX,0x2\nJA 0x00408f30\nMOV EDI,EAX\nCALL 0x0040c710\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00408f12\nMOV EDI,EBP\nCALL 0x004026b0\nMOV R14,RAX\nCALL 0x00402100\nMOV R15D,dword ptr [RAX]\nTEST R14,R14\nJNZ 0x00408f1d\nMOV EDI,EBP\nCALL 0x004023c0\nJMP 0x00408f1a\nXOR EBX,EBX\nJMP 0x00408f30\nCALL 0x00402100\nMOV R15D,dword ptr [RAX]\nXOR R14D,R14D\nMOV RDI,RBX\nCALL 0x004023e0\nCALL 0x00402100\nMOV dword ptr [RAX],R15D\nMOV RBX,R14\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2132
S'55\n41 57\n41 56\n53\n50\ne8 64 93 ff ff\n48 89 c3\n48 85 db\n74 3a\n48 89 df\ne8 b4 95 ff ff\n83 f8 02\n77 4f\n89 c7\ne8 28 38 00 00\n89 c5\n85 ed\n78 24\n89 ef\ne8 bb 97 ff ff\n49 89 c6\ne8 03 92 ff ff\n44 8b 38\n4d 85 f6\n75 18\n89 ef\ne8 b4 94 ff ff\neb 0c\n31 db\neb 1e\ne8 e9 91 ff ff\n44 8b 38\n45 31 f6\n48 89 df\ne8 bb 94 ff ff\ne8 d6 91 ff ff\n44 89 38\n4c 89 f3\n48 89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p2133
S'.text:0000000000408ec0\n.text:0000000000408ec1\n.text:0000000000408ec3\n.text:0000000000408ec5\n.text:0000000000408ec6\n.text:0000000000408ec7\n.text:0000000000408ecc\n.text:0000000000408ecf\n.text:0000000000408ed2\n.text:0000000000408ed4\n.text:0000000000408ed7\n.text:0000000000408edc\n.text:0000000000408edf\n.text:0000000000408ee1\n.text:0000000000408ee3\n.text:0000000000408ee8\n.text:0000000000408eea\n.text:0000000000408eec\n.text:0000000000408eee\n.text:0000000000408ef0\n.text:0000000000408ef5\n.text:0000000000408ef8\n.text:0000000000408efd\n.text:0000000000408f00\n.text:0000000000408f03\n.text:0000000000408f05\n.text:0000000000408f07\n.text:0000000000408f0c\n.text:0000000000408f0e\n.text:0000000000408f10\n.text:0000000000408f12\n.text:0000000000408f17\n.text:0000000000408f1a\n.text:0000000000408f1d\n.text:0000000000408f20\n.text:0000000000408f25\n.text:0000000000408f2a\n.text:0000000000408f2d\n.text:0000000000408f30\n.text:0000000000408f33\n.text:0000000000408f37\n.text:0000000000408f38\n.text:0000000000408f3a\n.text:0000000000408f3c\n.text:0000000000408f3d\n'
p2134
tp2135
sS'readlink'
p2136
(S'\n__stdcall readlink(char * __path, char * __buf, size_t __len)\n'
p2137
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000assize_t readlink(char *__path,char *__buf,size_t __len)\u000a\u000a{\u000a  ssize_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_readlink_006190a0)();\u000a  return sVar1;\u000a}\u000a\u000a
p2138
S'JMP qword ptr [0x006190a0]\n'
p2139
S'ff 25 da 6e 21 00\n'
p2140
S'.plt:00000000004021c0\n'
p2141
tp2142
sS'memrchr'
p2143
(S'\n__stdcall memrchr(void * __s, int __c, size_t __n)\n'
p2144
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memrchr(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memrchr_006192e8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p2145
S'JMP qword ptr [0x006192e8]\n'
p2146
S'ff 25 92 6c 21 00\n'
p2147
S'.plt:0000000000402650\n'
p2148
tp2149
sS'hash_get_n_entries'
p2150
(S'\n__stdcall hash_get_n_entries(Hash_table * table)\n'
p2151
V\u000asize_t hash_get_n_entries(Hash_table *table)\u000a\u000a{\u000a  return table->n_entries;\u000a}\u000a\u000a
p2152
S'MOV RAX,qword ptr [RDI + 0x20]\nRET\n'
p2153
S'48 8b 47 20\nc3\n'
p2154
S'.text:00000000004095c0\n.text:00000000004095c4\n'
p2155
tp2156
sS'__printf_chk'
p2157
(S'\n__stdcall __printf_chk()\n'
p2158
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_006192c0)();\u000a  return;\u000a}\u000a\u000a
p2159
S'JMP qword ptr [0x006192c0]\n'
p2160
S'ff 25 ba 6c 21 00\n'
p2161
S'.plt:0000000000402600\n'
p2162
tp2163
sS'hash_lookup'
p2164
(S'\n__stdcall hash_lookup(Hash_table * table, void * entry)\n'
p2165
V\u000avoid * hash_lookup(Hash_table *table,void *entry)\u000a\u000a{\u000a  _Bool _Var1;\u000a  hash_entry *phVar2;\u000a  \u000a  phVar2 = safe_hasher(table,entry);\u000a  if (phVar2->data != (void *)0x0) {\u000a    while (phVar2 != (hash_entry *)0x0) {\u000a      if ((phVar2->data == entry) ||\u000a         (_Var1 = (*table->comparator)(entry,phVar2->data), _Var1 != false)) {\u000a        return phVar2->data;\u000a      }\u000a      phVar2 = phVar2->next;\u000a    }\u000a  }\u000a  return (void *)0x0;\u000a}\u000a\u000a
p2166
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,RSI\nMOV R15,RDI\nCALL 0x004097c0\nMOV RBX,RAX\nXOR R14D,R14D\nCMP qword ptr [RBX],0x0\nJZ 0x004097b1\nTEST RBX,RBX\nJZ 0x004097b1\nXOR R14D,R14D\nNOP word ptr [RAX + RAX*0x1]\nMOV RSI,qword ptr [RBX]\nCMP RSI,R12\nJZ 0x004097ae\nMOV RDI,R12\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJNZ 0x004097ae\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x00409790\nJMP 0x004097b1\nMOV R14,qword ptr [RBX]\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p2167
S'41 57\n41 56\n41 54\n53\n50\n49 89 f4\n49 89 ff\ne8 4d 00 00 00\n48 89 c3\n45 31 f6\n48 83 3b 00\n74 32\n48 85 db\n74 2d\n45 31 f6\n66 0f 1f 84 00 00 00 00 00\n48 8b 33\n4c 39 e6\n74 16\n4c 89 e7\n41 ff 57 38\n84 c0\n75 0b\n48 8b 5b 08\n48 85 db\n75 e4\neb 03\n4c 8b 33\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p2168
S'.text:0000000000409760\n.text:0000000000409762\n.text:0000000000409764\n.text:0000000000409766\n.text:0000000000409767\n.text:0000000000409768\n.text:000000000040976b\n.text:000000000040976e\n.text:0000000000409773\n.text:0000000000409776\n.text:0000000000409779\n.text:000000000040977d\n.text:000000000040977f\n.text:0000000000409782\n.text:0000000000409784\n.text:0000000000409787\n.text:0000000000409790\n.text:0000000000409793\n.text:0000000000409796\n.text:0000000000409798\n.text:000000000040979b\n.text:000000000040979f\n.text:00000000004097a1\n.text:00000000004097a3\n.text:00000000004097a7\n.text:00000000004097aa\n.text:00000000004097ac\n.text:00000000004097ae\n.text:00000000004097b1\n.text:00000000004097b4\n.text:00000000004097b8\n.text:00000000004097b9\n.text:00000000004097bb\n.text:00000000004097bd\n.text:00000000004097bf\n'
p2169
tp2170
sS'fchmod_or_lchmod'
p2171
(S'\n__stdcall fchmod_or_lchmod(char * name)\n'
p2172
V\u000aint fchmod_or_lchmod(char *name)\u000a\u000a{\u000a  int iVar1;\u000a  uint __mode;\u000a  char *__file;\u000a  \u000a  if (-1 < (int)name) {\u000a    iVar1 = (*(code *)PTR_fchmod_006192c8)(name,(ulong)__mode);\u000a    return iVar1;\u000a  }\u000a  iVar1 = chmod(__file,__mode);\u000a  return iVar1;\u000a}\u000a\u000a
p2173
S'TEST EDI,EDI\nJS 0x00407f9b\nMOV ESI,EDX\nJMP 0x00402610\nMOV RDI,RSI\nMOV ESI,EDX\nJMP 0x00402620\n'
p2174
S'85 ff\n78 07\n89 d6\ne9 75 a6 ff ff\n48 89 f7\n89 d6\ne9 7b a6 ff ff\n'
p2175
S'.text:0000000000407f90\n.text:0000000000407f92\n.text:0000000000407f94\n.text:0000000000407f96\n.text:0000000000407f9b\n.text:0000000000407f9e\n.text:0000000000407fa0\n'
p2176
tp2177
sS'ioctl'
p2178
(S'\n__stdcall ioctl(int __fd, ulong __request)\n'
p2179
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ioctl(int __fd,ulong __request,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ioctl_00619188)();\u000a  return iVar1;\u000a}\u000a\u000a
p2180
S'JMP qword ptr [0x00619188]\n'
p2181
S'ff 25 f2 6d 21 00\n'
p2182
S'.plt:0000000000402390\n'
p2183
tp2184
sS'base_len'
p2185
(S'\n__stdcall base_len(char * name)\n'
p2186
V\u000asize_t base_len(char *name)\u000a\u000a{\u000a  long lVar1;\u000a  size_t sVar2;\u000a  size_t sVar3;\u000a  \u000a  sVar2 = strlen(name);\u000a  do {\u000a    sVar3 = sVar2;\u000a    if (sVar2 < 2) {\u000a      return sVar3;\u000a    }\u000a    lVar1 = sVar2 - 1;\u000a    sVar2 = sVar2 - 1;\u000a  } while (name[lVar1] == '/');\u000a  return sVar3;\u000a}\u000a\u000a
p2187
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00402290\nMOV RCX,RAX\nNOP dword ptr [RAX]\nMOV RAX,RCX\nCMP RAX,0x2\nJC 0x00409084\nLEA RCX,[RAX + -0x1]\nCMP byte ptr [RBX + RAX*0x1 + -0x1],0x2f\nJZ 0x00409070\nPOP RBX\nRET\n'
p2188
S'53\n48 89 fb\ne8 27 92 ff ff\n48 89 c1\n0f 1f 40 00\n48 89 c8\n48 83 f8 02\n72 0b\n48 8d 48 ff\n80 7c 03 ff 2f\n74 ec\n5b\nc3\n'
p2189
S'.text:0000000000409060\n.text:0000000000409061\n.text:0000000000409064\n.text:0000000000409069\n.text:000000000040906c\n.text:0000000000409070\n.text:0000000000409073\n.text:0000000000409077\n.text:0000000000409079\n.text:000000000040907d\n.text:0000000000409082\n.text:0000000000409084\n.text:0000000000409085\n'
p2190
tp2191
sS'fchdir'
p2192
(S'\n__stdcall fchdir(int __fd)\n'
p2193
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fchdir(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fchdir_00619298)();\u000a  return iVar1;\u000a}\u000a\u000a
p2194
S'JMP qword ptr [0x00619298]\n'
p2195
S'ff 25 e2 6c 21 00\n'
p2196
S'.plt:00000000004025b0\n'
p2197
tp2198
sS'getcwd'
p2199
(S'\n__stdcall getcwd(char * __buf, size_t __size)\n'
p2200
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getcwd(char *__buf,size_t __size)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getcwd_00619190)();\u000a  return pcVar1;\u000a}\u000a\u000a
p2201
S'JMP qword ptr [0x00619190]\n'
p2202
S'ff 25 ea 6d 21 00\n'
p2203
S'.plt:00000000004023a0\n'
p2204
tp2205
sS'version_etc_va'
p2206
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p2207
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p2208
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x0040d7c0\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x0040d7cc\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x0040d7e1\nINC R9\nCMP R9,0xa\nJC 0x0040d7a0\nMOV R8,RSP\nCALL 0x0040d400\nADD RSP,0x58\nRET\n'
p2209
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p2210
S'.text:000000000040d790\n.text:000000000040d794\n.text:000000000040d797\n.text:000000000040d7a0\n.text:000000000040d7a3\n.text:000000000040d7a7\n.text:000000000040d7a9\n.text:000000000040d7ac\n.text:000000000040d7b0\n.text:000000000040d7b4\n.text:000000000040d7b7\n.text:000000000040d7c0\n.text:000000000040d7c4\n.text:000000000040d7c8\n.text:000000000040d7cc\n.text:000000000040d7cf\n.text:000000000040d7d3\n.text:000000000040d7d6\n.text:000000000040d7d8\n.text:000000000040d7db\n.text:000000000040d7df\n.text:000000000040d7e1\n.text:000000000040d7e4\n.text:000000000040d7e9\n.text:000000000040d7ed\n'
p2211
tp2212
sS'hash_print_statistics'
p2213
(S'\n__stdcall hash_print_statistics(Hash_table * table, FILE * stream)\n'
p2214
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000avoid hash_print_statistics(Hash_table *table,FILE *stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  undefined auVar5 [16];\u000a  undefined auVar6 [16];\u000a  undefined4 uVar7;\u000a  \u000a  sVar1 = hash_get_n_entries(table);\u000a  sVar2 = hash_get_n_buckets(table);\u000a  sVar3 = hash_get_n_buckets_used(table);\u000a  sVar4 = hash_get_max_bucket_length(table);\u000a  __fprintf_chk(stream,1,0x4133f0,sVar1);\u000a  __fprintf_chk(stream,1,"# buckets:         %lu\u005cn",sVar2);\u000a  uVar7 = SUB164(_DAT_004133a0 >> 0x20,0);\u000a  auVar5 = subpd(CONCAT88(SUB168(CONCAT412(uVar7,ZEXT812(sVar3) &\u000a                                                 (undefined  [12])0xffffffffffffffff |\u000a                                                 (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                          CONCAT44(SUB164(_DAT_004133a0,0),\u000a                                   SUB124(ZEXT812(sVar3) & (undefined  [12])0xffffffffffffffff,0))),\u000a                 CONCAT88(DAT_004133b8,DAT_004133b0));\u000a  auVar5 = addpd(CONCAT412(SUB164(auVar5 >> 0x20,0),\u000a                           CONCAT48(SUB164(auVar5,0),SUB168(auVar5 >> 0x40,0))),auVar5);\u000a  auVar6 = subpd(CONCAT88(SUB168(CONCAT412(uVar7,ZEXT812(sVar2) &\u000a                                                 (undefined  [12])0xffffffffffffffff |\u000a                                                 (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                          CONCAT44(SUB164(_DAT_004133a0,0),\u000a                                   SUB124(ZEXT812(sVar2) & (undefined  [12])0xffffffffffffffff,0))),\u000a                 CONCAT88(DAT_004133b8,DAT_004133b0));\u000a  auVar6 = addpd(CONCAT412(SUB164(auVar6 >> 0x20,0),\u000a                           CONCAT48(SUB164(auVar6,0),SUB168(auVar6 >> 0x40,0))),auVar6);\u000a  __fprintf_chk(CONCAT88(SUB168(auVar5 >> 0x40,0),\u000a                         (SUB168(auVar5,0) * _DAT_004133d0) / SUB168(auVar6,0)),stream,1,\u000a                "# buckets used:    %lu (%.2f%%)\u005cn",sVar3);\u000a  __fprintf_chk(stream,1,"max bucket length: %lu\u005cn",sVar4);\u000a  return;\u000a}\u000a\u000a
p2215
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R13,RSI\nMOV RBX,RDI\nCALL 0x004095c0\nMOV RBP,RAX\nMOV RDI,RBX\nCALL 0x004095a0\nMOV R12,RAX\nMOV RDI,RBX\nCALL 0x004095b0\nMOV R15,RAX\nMOV RDI,RBX\nCALL 0x004095d0\nMOV R14,RAX\nMOV ESI,0x1\nMOV EDX,0x4133f0\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,RBP\nCALL 0x00402740\nMOV ESI,0x1\nMOV EDX,0x413408\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,R12\nCALL 0x00402740\nMOVQ XMM1,R15\nMOVDQA XMM2,xmmword ptr [0x004133a0]\nPUNPCKLDQ XMM1,XMM2\nMOVAPD XMM3,xmmword ptr [0x004133b0]\nSUBPD XMM1,XMM3\nPSHUFD XMM0,XMM1,0x4e\nADDPD XMM0,XMM1\nMULSD XMM0,qword ptr [0x004133d0]\nMOVQ XMM1,R12\nPUNPCKLDQ XMM1,XMM2\nSUBPD XMM1,XMM3\nPSHUFD XMM2,XMM1,0x4e\nADDPD XMM2,XMM1\nDIVSD XMM0,XMM2\nMOV ESI,0x1\nMOV EDX,0x413420\nMOV AL,0x1\nMOV RDI,R13\nMOV RCX,R15\nCALL 0x00402740\nMOV ESI,0x1\nMOV EDX,0x413441\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00402740\n'
p2216
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f5\n48 89 fb\ne8 3a ff ff ff\n48 89 c5\n48 89 df\ne8 0f ff ff ff\n49 89 c4\n48 89 df\ne8 14 ff ff ff\n49 89 c7\n48 89 df\ne8 29 ff ff ff\n49 89 c6\nbe 01 00 00 00\nba f0 33 41 00\n31 c0\n4c 89 ef\n48 89 e9\ne8 7f 90 ff ff\nbe 01 00 00 00\nba 08 34 41 00\n31 c0\n4c 89 ef\n4c 89 e1\ne8 68 90 ff ff\n66 49 0f 6e cf\n66 0f 6f 15 bb 9c 00 00\n66 0f 62 ca\n66 0f 28 1d bf 9c 00 00\n66 0f 5c cb\n66 0f 70 c1 4e\n66 0f 58 c1\nf2 0f 59 05 ca 9c 00 00\n66 49 0f 6e cc\n66 0f 62 ca\n66 0f 5c cb\n66 0f 70 d1 4e\n66 0f 58 d1\nf2 0f 5e c2\nbe 01 00 00 00\nba 20 34 41 00\nb0 01\n4c 89 ef\n4c 89 f9\ne8 09 90 ff ff\nbe 01 00 00 00\nba 41 34 41 00\n31 c0\n4c 89 ef\n4c 89 f1\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 e4 8f ff ff\n'
p2217
S'.text:0000000000409670\n.text:0000000000409671\n.text:0000000000409673\n.text:0000000000409675\n.text:0000000000409677\n.text:0000000000409679\n.text:000000000040967a\n.text:000000000040967b\n.text:000000000040967e\n.text:0000000000409681\n.text:0000000000409686\n.text:0000000000409689\n.text:000000000040968c\n.text:0000000000409691\n.text:0000000000409694\n.text:0000000000409697\n.text:000000000040969c\n.text:000000000040969f\n.text:00000000004096a2\n.text:00000000004096a7\n.text:00000000004096aa\n.text:00000000004096af\n.text:00000000004096b4\n.text:00000000004096b6\n.text:00000000004096b9\n.text:00000000004096bc\n.text:00000000004096c1\n.text:00000000004096c6\n.text:00000000004096cb\n.text:00000000004096cd\n.text:00000000004096d0\n.text:00000000004096d3\n.text:00000000004096d8\n.text:00000000004096dd\n.text:00000000004096e5\n.text:00000000004096e9\n.text:00000000004096f1\n.text:00000000004096f5\n.text:00000000004096fa\n.text:00000000004096fe\n.text:0000000000409706\n.text:000000000040970b\n.text:000000000040970f\n.text:0000000000409713\n.text:0000000000409718\n.text:000000000040971c\n.text:0000000000409720\n.text:0000000000409725\n.text:000000000040972a\n.text:000000000040972c\n.text:000000000040972f\n.text:0000000000409732\n.text:0000000000409737\n.text:000000000040973c\n.text:0000000000409741\n.text:0000000000409743\n.text:0000000000409746\n.text:0000000000409749\n.text:000000000040974d\n.text:000000000040974e\n.text:0000000000409750\n.text:0000000000409752\n.text:0000000000409754\n.text:0000000000409756\n.text:0000000000409757\n'
p2218
tp2219
sS'next_prime'
p2220
(S'\n__stdcall next_prime(size_t candidate)\n'
p2221
V\u000asize_t next_prime(size_t candidate)\u000a\u000a{\u000a  _Bool _Var1;\u000a  size_t candidate_00;\u000a  size_t sVar2;\u000a  \u000a  candidate_00 = 10;\u000a  if (10 < candidate) {\u000a    candidate_00 = candidate;\u000a  }\u000a  candidate_00 = candidate_00 | 1;\u000a  while ((sVar2 = 0xffffffffffffffff, candidate_00 != 0xffffffffffffffff &&\u000a         (_Var1 = is_prime(candidate_00), sVar2 = candidate_00, _Var1 == false))) {\u000a    candidate_00 = candidate_00 + 2;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p2222
S'PUSH R14\nPUSH RBX\nPUSH RAX\nCMP RDI,0xa\nMOV EBX,0xa\nCMOVA RBX,RDI\nOR RBX,0x1\nMOV R14,-0x1\nCMP RBX,-0x1\nJNZ 0x0040a49a\nJMP 0x0040a4a9\nADD RBX,0x2\nCMP RBX,-0x1\nJZ 0x0040a4a9\nMOV RDI,RBX\nCALL 0x0040a4c0\nTEST AL,AL\nJZ 0x0040a490\nMOV R14,RBX\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p2223
S'41 56\n53\n50\n48 83 ff 0a\nbb 0a 00 00 00\n48 0f 47 df\n48 83 cb 01\n49 c7 c6 ff ff ff ff\n48 83 fb ff\n75 18\neb 25\n48 83 c3 02\n48 83 fb ff\n74 0f\n48 89 df\ne8 1e 00 00 00\n84 c0\n74 ea\n49 89 de\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p2224
S'.text:000000000040a460\n.text:000000000040a462\n.text:000000000040a463\n.text:000000000040a464\n.text:000000000040a468\n.text:000000000040a46d\n.text:000000000040a471\n.text:000000000040a475\n.text:000000000040a47c\n.text:000000000040a480\n.text:000000000040a482\n.text:000000000040a490\n.text:000000000040a494\n.text:000000000040a498\n.text:000000000040a49a\n.text:000000000040a49d\n.text:000000000040a4a2\n.text:000000000040a4a4\n.text:000000000040a4a6\n.text:000000000040a4a9\n.text:000000000040a4ac\n.text:000000000040a4b0\n.text:000000000040a4b1\n.text:000000000040a4b3\n'
p2225
tp2226
sS'lsetfilecon'
p2227
(S'\n__stdcall lsetfilecon(char * file, security_context_t con)\n'
p2228
V\u000aint lsetfilecon(char *file,security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p2229
S'PUSH RAX\nCALL 0x00402100\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p2230
S'50\ne8 7a 5b ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p2231
S'.text:000000000040c580\n.text:000000000040c581\n.text:000000000040c586\n.text:000000000040c58c\n.text:000000000040c591\n.text:000000000040c592\n'
p2232
tp2233
sS'openat_restore_fail'
p2234
(S'\n__stdcall openat_restore_fail()\n'
p2235
V\u000avoid openat_restore_fail(uint uParm1)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"failed to return to initial working directory",5);\u000a  error((ulong)(uint)iVar1,(ulong)uParm1,uVar2,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p2236
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBX,EDI\nMOV EBP,dword ptr [0x006193b8]\nXOR EDI,EDI\nMOV ESI,0x414368\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nXOR EAX,EAX\nMOV EDI,EBP\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00402640\nCALL 0x004020f0\n'
p2237
S'55\n53\n50\n89 fb\n8b 2d ad 86 20 00\n31 ff\nbe 68 43 41 00\nba 05 00 00 00\ne8 54 15 ff ff\n48 89 c1\n31 c0\n89 ef\n89 de\n48 89 ca\ne8 13 19 ff ff\ne8 be 13 ff ff\n'
p2238
S'.text:0000000000410d00\n.text:0000000000410d01\n.text:0000000000410d02\n.text:0000000000410d03\n.text:0000000000410d05\n.text:0000000000410d0b\n.text:0000000000410d0d\n.text:0000000000410d12\n.text:0000000000410d17\n.text:0000000000410d1c\n.text:0000000000410d1f\n.text:0000000000410d21\n.text:0000000000410d23\n.text:0000000000410d25\n.text:0000000000410d28\n.text:0000000000410d2d\n'
p2239
tp2240
sS'utimecmp'
p2241
(S'\n__stdcall utimecmp(char * dst_name, stat * dst_stat, stat * src_stat)\n'
p2242
V\u000aint utimecmp(char *dst_name,stat *dst_stat,stat *src_stat)\u000a\u000a{\u000a  ulong uVar1;\u000a  __time_t _Var2;\u000a  Hash_table *table;\u000a  Hash_table *ht;\u000a  fs_res *new_dst_res;\u000a  int iVar3;\u000a  uint uVar4;\u000a  int iVar5;\u000a  int iVar6;\u000a  long lVar7;\u000a  fs_res *entry;\u000a  ulong uVar8;\u000a  ulong uVar9;\u000a  uint uVar10;\u000a  ulong in_RCX;\u000a  uint uVar11;\u000a  int iVar12;\u000a  ulong uVar13;\u000a  int iVar14;\u000a  ulong uVar15;\u000a  timespec timespec [2];\u000a  timespec local_f8;\u000a  ulong local_e8;\u000a  ulong local_e0;\u000a  fs_res local_d0;\u000a  undefined local_c0 [88];\u000a  uint local_68;\u000a  undefined4 uStack100;\u000a  \u000a  uVar1 = (dst_stat->st_mtim).tv_sec;\u000a  uVar15 = (src_stat->st_mtim).tv_sec;\u000a  _iVar3 = get_stat_mtime_ns(dst_stat);\u000a  iVar3 = (int)_iVar3;\u000a  lVar7 = get_stat_mtime_ns(src_stat);\u000a  iVar14 = (int)lVar7;\u000a  if ((in_RCX & 1) == 0) goto LAB_0040c7b3;\u000a  if ((uVar1 == uVar15) && (iVar3 == iVar14)) {\u000a    return 0;\u000a  }\u000a  if ((long)uVar1 <= (long)(uVar15 - 2)) {\u000a    return -1;\u000a  }\u000a  if ((long)uVar15 <= (long)(uVar1 - 2)) {\u000a    return 1;\u000a  }\u000a  if ((ht == (Hash_table *)0x0) &&\u000a     (ht = hash_initialize(0x10,(Hash_tuning *)0x0,dev_info_hash,dev_info_compare,free),\u000a     ht == (Hash_table *)0x0)) {\u000aLAB_0040c8e4:\u000a    local_d0.resolution = 2000000000;\u000a    local_d0.exact = false;\u000a    entry = &local_d0;\u000aLAB_0040c8f6:\u000a    if (entry->exact == false) goto LAB_0040c904;\u000aLAB_0040c8fc:\u000a    iVar5 = entry->resolution;\u000a  }\u000a  else {\u000a    table = ht;\u000a    if (new_dst_res == (fs_res *)0x0) {\u000a      new_dst_res = (fs_res *)malloc(0x10);\u000a      if (new_dst_res != (fs_res *)0x0) {\u000a        new_dst_res->resolution = 2000000000;\u000a        new_dst_res->exact = false;\u000a        goto LAB_0040c889;\u000a      }\u000a      entry = (fs_res *)0x0;\u000aLAB_0040c8c1:\u000a      if (ht != (Hash_table *)0x0) {\u000a        local_d0.dev = dst_stat->st_dev;\u000a        entry = (fs_res *)hash_lookup(ht,&local_d0);\u000a      }\u000a      if (entry == (fs_res *)0x0) goto LAB_0040c8e4;\u000a      goto LAB_0040c8f6;\u000a    }\u000aLAB_0040c889:\u000a    entry = new_dst_res;\u000a    new_dst_res->dev = dst_stat->st_dev;\u000a    entry = (fs_res *)hash_insert(table,entry);\u000a    if (entry == (fs_res *)0x0) goto LAB_0040c8c1;\u000a    if (entry != new_dst_res) goto LAB_0040c8f6;\u000a    new_dst_res = (fs_res *)0x0;\u000a    if (entry->exact != false) goto LAB_0040c8fc;\u000aLAB_0040c904:\u000a    local_f8.tv_sec = (dst_stat->st_atim).tv_sec;\u000a    _Var2 = (dst_stat->st_ctim).tv_sec;\u000a    uVar8 = get_stat_atime_ns(dst_stat);\u000a    uVar9 = get_stat_ctime_ns(dst_stat);\u000a    iVar6 = (int)uVar8;\u000a    iVar5 = (int)uVar9;\u000a    if ((iVar3 + (iVar3 / 10 + (iVar3 >> 0x1f) + (uint)((ulong)((long)iVar3 * 0x66666667) >> 0x3f))\u000a                 * -10 |\u000a         iVar6 + (iVar6 / 10 + (iVar6 >> 0x1f) + (uint)((ulong)((long)iVar6 * 0x66666667) >> 0x3f))\u000a                 * -10 |\u000a        iVar5 + (iVar5 / 10 + (iVar5 >> 0x1f) + (uint)((ulong)((long)iVar5 * 0x66666667) >> 0x3f)) *\u000a                -10) == 0) {\u000a      uVar13 = 10;\u000a      if (entry->resolution < 0xb) {\u000aLAB_0040cad4:\u000a        entry->resolution = (int)uVar13;\u000a      }\u000a      else {\u000a        uVar13 = 10;\u000a        uVar8 = uVar8 & 0xffffffff;\u000a        do {\u000a          iVar5 = (int)_iVar3;\u000a          uVar11 = iVar5 / 10 + (iVar5 >> 0x1f) + (uint)((ulong)((long)iVar5 * 0x66666667) >> 0x3f);\u000a          _iVar3 = (ulong)uVar11;\u000a          iVar5 = (int)uVar9;\u000a          uVar4 = iVar5 / 10 + (iVar5 >> 0x1f) + (uint)((ulong)((long)iVar5 * 0x66666667) >> 0x3f);\u000a          uVar9 = (ulong)uVar4;\u000a          iVar5 = (int)uVar8;\u000a          uVar10 = iVar5 / 10 + (iVar5 >> 0x1f) + (uint)((ulong)((long)iVar5 * 0x66666667) >> 0x3f);\u000a          uVar8 = (ulong)uVar10;\u000a          if ((uVar11 + ((int)uVar11 / 10 + ((int)uVar11 >> 0x1f) +\u000a                        (uint)((ulong)((long)(int)uVar11 * 0x66666667) >> 0x3f)) * -10 |\u000a              uVar4 + ((int)uVar4 / 10 + ((int)uVar4 >> 0x1f) +\u000a                      (uint)((ulong)((long)(int)uVar4 * 0x66666667) >> 0x3f)) * -10 |\u000a              uVar10 + ((int)uVar10 / 10 + ((int)uVar10 >> 0x1f) +\u000a                       (uint)((ulong)((long)(int)uVar10 * 0x66666667) >> 0x3f)) * -10) != 0) break;\u000a          if ((int)uVar13 == 1000000000) {\u000a            uVar13 = (ulong)(uint)(1000000000 <<\u000a                                  (~((byte)local_f8.tv_sec | (byte)uVar1 | (byte)_Var2) & 1));\u000a            goto LAB_0040cad4;\u000a          }\u000a          uVar4 = (int)uVar13 * 10;\u000a          uVar13 = (ulong)uVar4;\u000a        } while ((int)uVar4 < entry->resolution);\u000a        iVar5 = (int)uVar13;\u000a        entry->resolution = iVar5;\u000a        if (iVar5 < 2) goto LAB_0040c9a7;\u000a      }\u000a      iVar12 = (int)uVar13;\u000a      if ((long)uVar15 < (long)uVar1) {\u000a        return 1;\u000a      }\u000a      if ((iVar14 <= iVar3) && (uVar1 == uVar15)) {\u000a        return 1;\u000a      }\u000a      _iVar3 = ~(ulong)(iVar12 == 2000000000) & uVar15;\u000a      if ((long)uVar1 < (long)_iVar3) {\u000a        return -1;\u000a      }\u000a      if ((uVar1 == _iVar3) && (iVar3 < iVar14 - iVar14 % iVar12)) {\u000a        return -1;\u000a      }\u000a      local_f8.tv_nsec = (long)iVar6;\u000a      local_e8 = (ulong)(iVar12 == 2000000000) | uVar1;\u000a      local_e0 = SEXT48((int)((uint)(uVar13 * 0x38e38e39 >> 0x21) + iVar3));\u000a      if ((dst_stat->st_mode & 0xf000) == 0xa000) {\u000a        iVar5 = lutimens(dst_name,&local_f8);\u000a      }\u000a      else {\u000a        iVar5 = utimens(dst_name,&local_f8);\u000a      }\u000a      if (iVar5 != 0) {\u000a        return -2;\u000a      }\u000a      if ((dst_stat->st_mode & 0xf000) == 0xa000) {\u000a        iVar5 = lstat(dst_name,(stat *)local_c0);\u000a      }\u000a      else {\u000a        iVar5 = stat(dst_name,(stat *)local_c0);\u000a      }\u000a      _iVar3 = CONCAT44(uStack100,local_68);\u000a      uVar8 = get_stat_mtime_ns((stat *)local_c0);\u000a      uVar9 = SEXT48(iVar3);\u000a      if ((uVar8 ^ uVar9 | _iVar3 ^ uVar1 | (long)iVar5) != 0) {\u000a        if ((dst_stat->st_mode & 0xf000) == 0xa000) {\u000a          local_e8 = uVar1;\u000a          local_e0 = uVar9;\u000a          lutimens(dst_name,&local_f8);\u000a        }\u000a        else {\u000a          local_e8 = uVar1;\u000a          local_e0 = uVar9;\u000a          utimens(dst_name,&local_f8);\u000a        }\u000a      }\u000a      if (iVar5 != 0) {\u000a        return -2;\u000a      }\u000a      lVar7 = get_stat_mtime_ns((stat *)local_c0);\u000a      _iVar3 = lVar7 + (ulong)(-(local_68 & 1) & 1000000000);\u000a      iVar6 = (int)_iVar3;\u000a      iVar5 = 1;\u000a      if (iVar6 == (iVar6 / 10 + (iVar6 >> 0x1f) + (uint)((ulong)((long)iVar6 * 0x66666667) >> 0x3f)\u000a                   ) * 10) {\u000a        iVar5 = 1;\u000a        do {\u000a          if (iVar5 == 1000000000) {\u000a            iVar5 = 2000000000;\u000a            break;\u000a          }\u000a          iVar5 = iVar5 * 10;\u000a          if (iVar5 == iVar12) break;\u000a          iVar6 = (int)_iVar3;\u000a          uVar4 = iVar6 / 10 + (iVar6 >> 0x1f) + (uint)((ulong)((long)iVar6 * 0x66666667) >> 0x3f);\u000a          _iVar3 = (ulong)uVar4;\u000a        } while (uVar4 == ((int)uVar4 / 10 + ((int)uVar4 >> 0x1f) +\u000a                          (uint)((ulong)((long)(int)uVar4 * 0x66666667) >> 0x3f)) * 10);\u000a      }\u000a    }\u000a    else {\u000a      entry->resolution = 1;\u000a      iVar5 = 1;\u000a    }\u000aLAB_0040c9a7:\u000a    entry->resolution = iVar5;\u000a    entry->exact = true;\u000a  }\u000a  uVar15 = uVar15 & ~(ulong)(iVar5 == 2000000000);\u000a  iVar14 = iVar14 - iVar14 % iVar5;\u000aLAB_0040c7b3:\u000a  uVar4 = 0xffffffff;\u000a  if ((((long)uVar15 <= (long)uVar1) && (uVar4 = 1, (long)uVar1 <= (long)uVar15)) &&\u000a     (uVar4 = 0xffffffff, iVar14 <= iVar3)) {\u000a    uVar4 = (uint)(iVar14 < iVar3);\u000a  }\u000a  return (int)uVar4;\u000a}\u000a\u000a
p2243
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xe8\nMOV EBP,ECX\nMOV RBX,RDX\nMOV R15,RSI\nMOV qword ptr [RSP + 0x8],RDI\nMOV R12,qword ptr [R15 + 0x58]\nMOV R14,qword ptr [RBX + 0x58]\nMOV RDI,R15\nCALL 0x0040c690\nMOV qword ptr [RSP],RAX\nMOV RDI,RBX\nCALL 0x0040c690\nMOV R13,RAX\nTEST BPL,0x1\nJNZ 0x0040c7e6\nMOV ECX,0xffffffff\nCMP R12,R14\nJL 0x0040cc3b\nMOV ECX,0x1\nJG 0x0040cc3b\nCMP dword ptr [RSP],R13D\nMOV ECX,0xffffffff\nJL 0x0040cc3b\nSETG AL\nMOVZX ECX,AL\nJMP 0x0040cc3b\nCMP R12,R14\nJNZ 0x0040c7f7\nXOR ECX,ECX\nCMP dword ptr [RSP],R13D\nJZ 0x0040cc3b\nLEA RAX,[R14 + -0x2]\nMOV ECX,0xffffffff\nCMP R12,RAX\nJLE 0x0040cc3b\nLEA RAX,[R12 + -0x2]\nMOV ECX,0x1\nCMP R14,RAX\nJLE 0x0040cc3b\nMOV RBP,qword ptr [0x00619a20]\nTEST RBP,RBP\nJNZ 0x0040c857\nMOV EDI,0x10\nXOR ESI,ESI\nMOV EDX,0x40cd00\nMOV ECX,0x40cd10\nMOV R8D,0x4020c0\nCALL 0x004099d0\nMOV RBP,RAX\nMOV qword ptr [0x00619a20],RBP\nTEST RBP,RBP\nJZ 0x0040c8e4\nCMP qword ptr [0x00619a28],0x0\nJNZ 0x0040c889\nMOV EDI,0x10\nCALL 0x00402540\nMOV qword ptr [0x00619a28],RAX\nTEST RAX,RAX\nJZ 0x0040c8bf\nMOV dword ptr [RAX + 0x8],0x77359400\nMOV RAX,qword ptr [0x00619a28]\nMOV byte ptr [RAX + 0xc],0x0\nMOV RAX,qword ptr [R15]\nMOV RSI,qword ptr [0x00619a28]\nMOV qword ptr [RSI],RAX\nMOV RDI,RBP\nCALL 0x0040a2a0\nTEST RAX,RAX\nJZ 0x0040c8c1\nCMP RAX,qword ptr [0x00619a28]\nJNZ 0x0040c8f6\nMOV qword ptr [0x00619a28],0x0\nCMP byte ptr [RAX + 0xc],0x0\nJNZ 0x0040c8fc\nJMP 0x0040c904\nXOR EAX,EAX\nMOV RDI,qword ptr [0x00619a20]\nTEST RDI,RDI\nJZ 0x0040c8df\nMOV RAX,qword ptr [R15]\nMOV qword ptr [RSP + 0x48],RAX\nLEA RSI,[RSP + 0x48]\nCALL 0x00409760\nTEST RAX,RAX\nJNZ 0x0040c8f6\nMOV dword ptr [RSP + 0x50],0x77359400\nMOV byte ptr [RSP + 0x54],0x0\nLEA RAX,[RSP + 0x48]\nCMP byte ptr [RAX + 0xc],0x0\nJZ 0x0040c904\nMOV ECX,dword ptr [RAX + 0x8]\nJMP 0x0040c9b0\nMOV qword ptr [RSP + 0x18],RAX\nMOV RBX,qword ptr [R15 + 0x48]\nMOV qword ptr [RSP + 0x10],RBX\nOR RBX,R12\nOR RBX,qword ptr [R15 + 0x68]\nMOV RDI,R15\nCALL 0x0040c670\nMOV RBP,RAX\nMOV RDI,R15\nCALL 0x0040c680\nMOV R11,RBP\nMOVSXD RCX,R11D\nIMUL RDX,RCX,0x66666667\nMOV RSI,RDX\nSHR RSI,0x3f\nSAR RDX,0x22\nADD EDX,ESI\nADD EDX,EDX\nLEA EDX,[RDX + RDX*0x4]\nSUB ECX,EDX\nMOVSXD RDX,EAX\nIMUL RSI,RDX,0x66666667\nMOV RDI,RSI\nSHR RDI,0x3f\nSAR RSI,0x22\nADD ESI,EDI\nADD ESI,ESI\nLEA ESI,[RSI + RSI*0x4]\nSUB EDX,ESI\nMOV RBP,qword ptr [RSP]\nMOVSXD RSI,EBP\nIMUL RSI,RSI,0x66666667\nMOV RDI,RSI\nSHR RDI,0x3f\nSAR RSI,0x22\nADD ESI,EDI\nADD ESI,ESI\nLEA ESI,[RSI + RSI*0x4]\nMOV EDI,EBP\nSUB EDI,ESI\nOR EDI,ECX\nOR EDI,EDX\nJZ 0x0040c9cf\nMOV R8,qword ptr [RSP + 0x18]\nMOV dword ptr [R8 + 0x8],0x1\nMOV ECX,0x1\nMOV dword ptr [R8 + 0x8],ECX\nMOV byte ptr [R8 + 0xc],0x1\nXOR EAX,EAX\nCMP ECX,0x77359400\nSETZ AL\nNOT RAX\nAND R14,RAX\nMOV EAX,R13D\nCDQ\nIDIV ECX\nSUB R13D,EDX\nJMP 0x0040c7b3\nMOV R10,RBX\nMOV R9D,0xa\nMOV R8,qword ptr [RSP + 0x18]\nCMP dword ptr [R8 + 0x8],0xb\nJL 0x0040cad4\nMOV R9D,0xa\nMOV ECX,R11D\nMOV RDX,qword ptr [RSP]\nMOVSXD RDX,EDX\nIMUL RDX,RDX,0x66666667\nMOV RSI,RDX\nSHR RSI,0x3f\nSAR RDX,0x22\nADD EDX,ESI\nCDQE\nIMUL RAX,RAX,0x66666667\nMOV RSI,RAX\nSHR RSI,0x3f\nSAR RAX,0x22\nADD EAX,ESI\nMOVSXD RCX,ECX\nIMUL RCX,RCX,0x66666667\nMOV RSI,RCX\nSHR RSI,0x3f\nSAR RCX,0x22\nADD ECX,ESI\nMOVSXD RDI,ECX\nIMUL RSI,RDI,0x66666667\nMOV RBX,RSI\nSHR RBX,0x3f\nSAR RSI,0x22\nADD ESI,EBX\nADD ESI,ESI\nLEA ESI,[RSI + RSI*0x4]\nSUB EDI,ESI\nMOVSXD RSI,EAX\nIMUL RBX,RSI,0x66666667\nMOV RBP,RBX\nSHR RBP,0x3f\nSAR RBX,0x22\nADD EBX,EBP\nADD EBX,EBX\nLEA EBP,[RBX + RBX*0x4]\nSUB ESI,EBP\nOR ESI,EDI\nMOVSXD RDI,EDX\nIMUL RBP,RDI,0x66666667\nMOV RBX,RBP\nSHR RBX,0x3f\nSAR RBP,0x22\nADD EBP,EBX\nADD EBP,EBP\nLEA EBP,[RBP + RBP*0x4]\nSUB EDI,EBP\nOR EDI,ESI\nJNZ 0x0040cab4\nCMP R9D,0x3b9aca00\nJZ 0x0040cac7\nADD R9D,R9D\nLEA R9D,[R9 + R9*0x4]\nCMP R9D,dword ptr [R8 + 0x8]\nJL 0x0040c9f5\nMOV dword ptr [R8 + 0x8],R9D\nCMP R9D,0x1\nMOV ECX,R9D\nJLE 0x0040c9a7\nJMP 0x0040cad8\nNOT R10D\nAND R10B,0x1\nMOV ECX,R10D\nSHL R9D,CL\nMOV dword ptr [R8 + 0x8],R9D\nXOR ESI,ESI\nCMP R9D,0x77359400\nSETZ AL\nMOV ECX,0x1\nCMP R14,R12\nJL 0x0040cc3b\nCMP R12,R14\nSETNZ DL\nCMP R13D,dword ptr [RSP]\nJG 0x0040cb06\nTEST DL,DL\nJZ 0x0040cc3b\nMOV SIL,AL\nMOV RAX,RSI\nNOT RAX\nAND RAX,R14\nMOV ECX,0xffffffff\nCMP R12,RAX\nJL 0x0040cc3b\nJNZ 0x0040cb37\nMOV EAX,R13D\nCDQ\nIDIV R9D\nMOV EAX,R13D\nSUB EAX,EDX\nCMP dword ptr [RSP],EAX\nJL 0x0040cc3b\nMOV RAX,qword ptr [RSP + 0x10]\nMOV qword ptr [RSP + 0x20],RAX\nMOVSXD RAX,R11D\nMOV qword ptr [RSP + 0x28],RAX\nOR RSI,R12\nMOV qword ptr [RSP + 0x30],RSI\nMOV qword ptr [RSP + 0x10],R9\nMOV EAX,R9D\nIMUL RAX,RAX,0x38e38e39\nSHR RAX,0x21\nADD EAX,dword ptr [RSP]\nCDQE\nMOV qword ptr [RSP + 0x38],RAX\nMOV EAX,0xf000\nAND EAX,dword ptr [R15 + 0x18]\nLEA RSI,[RSP + 0x20]\nCMP EAX,0xa000\nJNZ 0x0040cb8f\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x0040d240\nJMP 0x0040cb99\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x0040d220\nMOV ECX,0xfffffffe\nTEST EAX,EAX\nJNZ 0x0040cc3b\nMOV EAX,0xf000\nAND EAX,dword ptr [R15 + 0x18]\nLEA RSI,[RSP + 0x58]\nCMP EAX,0xa000\nJNZ 0x0040cbc7\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x00411400\nJMP 0x0040cbd1\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x004113e0\nMOV EBP,EAX\nCDQE\nMOV RBX,qword ptr [0xb0 + RSP]\nXOR RBX,R12\nOR RBX,RAX\nLEA RDI,[RSP + 0x58]\nCALL 0x0040c690\nMOVSXD RCX,dword ptr [RSP]\nXOR RAX,RCX\nOR RAX,RBX\nJZ 0x0040cc32\nMOV qword ptr [RSP + 0x30],R12\nMOV qword ptr [RSP + 0x38],RCX\nMOV EAX,0xf000\nAND EAX,dword ptr [R15 + 0x18]\nLEA RSI,[RSP + 0x20]\nCMP EAX,0xa000\nJNZ 0x0040cc28\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x0040d240\nTEST EBP,EBP\nJNZ 0x0040cc36\nJMP 0x0040cc4f\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x0040d220\nTEST EBP,EBP\nJZ 0x0040cc4f\nMOV ECX,0xfffffffe\nMOV EAX,ECX\nADD RSP,0xe8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EBX,dword ptr [0xb0 + RSP]\nAND EBX,0x1\nNEG EBX\nAND EBX,0x3b9aca00\nLEA RDI,[RSP + 0x58]\nCALL 0x0040c690\nADD RAX,RBX\nMOVSXD RDX,EAX\nIMUL RCX,RDX,0x66666667\nMOV RSI,RCX\nSHR RSI,0x3f\nSAR RCX,0x22\nADD ECX,ESI\nADD ECX,ECX\nLEA ESI,[RCX + RCX*0x4]\nMOV ECX,0x1\nCMP EDX,ESI\nMOV RBP,qword ptr [RSP + 0x10]\nJZ 0x0040cca2\nMOV R8,qword ptr [RSP + 0x18]\nJMP 0x0040c9a7\nMOV ECX,0x1\nCMP ECX,0x3b9aca00\nJZ 0x0040ccf0\nADD ECX,ECX\nLEA ECX,[RCX + RCX*0x4]\nCMP ECX,EBP\nJZ 0x0040cc98\nCDQE\nIMUL RAX,RAX,0x66666667\nMOV RDX,RAX\nSHR RDX,0x3f\nSAR RAX,0x22\nADD EAX,EDX\nMOVSXD RDX,EAX\nIMUL RSI,RDX,0x66666667\nMOV RDI,RSI\nSHR RDI,0x3f\nSAR RSI,0x22\nADD ESI,EDI\nADD ESI,ESI\nLEA ESI,[RSI + RSI*0x4]\nCMP EDX,ESI\nJZ 0x0040cca7\nJMP 0x0040cc98\nMOV ECX,0x77359400\nMOV R8,qword ptr [RSP + 0x18]\nJMP 0x0040c9a7\n'
p2244
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec e8 00 00 00\n89 cd\n48 89 d3\n49 89 f7\n48 89 7c 24 08\n4d 8b 67 58\n4c 8b 73 58\n4c 89 ff\ne8 f2 fe ff ff\n48 89 04 24\n48 89 df\ne8 e6 fe ff ff\n49 89 c5\n40 f6 c5 01\n75 33\nb9 ff ff ff ff\n4d 39 f4\n0f 8c 7a 04 00 00\nb9 01 00 00 00\n0f 8f 6f 04 00 00\n44 39 2c 24\nb9 ff ff ff ff\n0f 8c 60 04 00 00\n0f 9f c0\n0f b6 c8\ne9 55 04 00 00\n4d 39 f4\n75 0c\n31 c9\n44 39 2c 24\n0f 84 44 04 00 00\n49 8d 46 fe\nb9 ff ff ff ff\n49 39 c4\n0f 8e 32 04 00 00\n49 8d 44 24 fe\nb9 01 00 00 00\n49 39 c6\n0f 8e 1f 04 00 00\n48 8b 2d fd d1 20 00\n48 85 ed\n75 2f\nbf 10 00 00 00\n31 f6\nba 00 cd 40 00\nb9 10 cd 40 00\n41 b8 c0 20 40 00\ne8 8c d1 ff ff\n48 89 c5\n48 89 2d d2 d1 20 00\n48 85 ed\n0f 84 8d 00 00 00\n48 83 3d c9 d1 20 00 00\n75 28\nbf 10 00 00 00\ne8 d5 5c ff ff\n48 89 05 b6 d1 20 00\n48 85 c0\n74 48\nc7 40 08 00 94 35 77\n48 8b 05 a3 d1 20 00\nc6 40 0c 00\n49 8b 07\n48 8b 35 95 d1 20 00\n48 89 06\n48 89 ef\ne8 02 da ff ff\n48 85 c0\n74 1e\n48 3b 05 7e d1 20 00\n75 4a\n48 c7 05 71 d1 20 00 00 00 00 00\n80 78 0c 00\n75 3f\neb 45\n31 c0\n48 8b 3d 58 d1 20 00\n48 85 ff\n74 12\n49 8b 07\n48 89 44 24 48\n48 8d 74 24 48\ne8 81 ce ff ff\n48 85 c0\n75 12\nc7 44 24 50 00 94 35 77\nc6 44 24 54 00\n48 8d 44 24 48\n80 78 0c 00\n74 08\n8b 48 08\ne9 ac 00 00 00\n48 89 44 24 18\n49 8b 5f 48\n48 89 5c 24 10\n4c 09 e3\n49 0b 5f 68\n4c 89 ff\ne8 4f fd ff ff\n48 89 c5\n4c 89 ff\ne8 54 fd ff ff\n49 89 eb\n49 63 cb\n48 69 d1 67 66 66 66\n48 89 d6\n48 c1 ee 3f\n48 c1 fa 22\n01 f2\n01 d2\n8d 14 92\n29 d1\n48 63 d0\n48 69 f2 67 66 66 66\n48 89 f7\n48 c1 ef 3f\n48 c1 fe 22\n01 fe\n01 f6\n8d 34 b6\n29 f2\n48 8b 2c 24\n48 63 f5\n48 69 f6 67 66 66 66\n48 89 f7\n48 c1 ef 3f\n48 c1 fe 22\n01 fe\n01 f6\n8d 34 b6\n89 ef\n29 f7\n09 cf\n09 d7\n74 3a\n4c 8b 44 24 18\n41 c7 40 08 01 00 00 00\nb9 01 00 00 00\n41 89 48 08\n41 c6 40 0c 01\n31 c0\n81 f9 00 94 35 77\n0f 94 c0\n48 f7 d0\n49 21 c6\n44 89 e8\n99\nf7 f9\n41 29 d5\ne9 e4 fd ff ff\n49 89 da\n41 b9 0a 00 00 00\n4c 8b 44 24 18\n41 83 78 08 0b\n0f 8c ec 00 00 00\n41 b9 0a 00 00 00\n44 89 d9\n48 8b 14 24\n48 63 d2\n48 69 d2 67 66 66 66\n48 89 d6\n48 c1 ee 3f\n48 c1 fa 22\n01 f2\n48 98\n48 69 c0 67 66 66 66\n48 89 c6\n48 c1 ee 3f\n48 c1 f8 22\n01 f0\n48 63 c9\n48 69 c9 67 66 66 66\n48 89 ce\n48 c1 ee 3f\n48 c1 f9 22\n01 f1\n48 63 f9\n48 69 f7 67 66 66 66\n48 89 f3\n48 c1 eb 3f\n48 c1 fe 22\n01 de\n01 f6\n8d 34 b6\n29 f7\n48 63 f0\n48 69 de 67 66 66 66\n48 89 dd\n48 c1 ed 3f\n48 c1 fb 22\n01 eb\n01 db\n8d 2c 9b\n29 ee\n09 fe\n48 63 fa\n48 69 ef 67 66 66 66\n48 89 eb\n48 c1 eb 3f\n48 c1 fd 22\n01 dd\n01 ed\n8d 6c ad 00\n29 ef\n09 f7\n75 1a\n41 81 f9 00 ca 9a 3b\n74 24\n45 01 c9\n47 8d 0c 89\n45 3b 48 08\n0f 8c 41 ff ff ff\n45 89 48 08\n41 83 f9 01\n44 89 c9\n0f 8e e2 fe ff ff\neb 11\n41 f7 d2\n41 80 e2 01\n44 89 d1\n41 d3 e1\n45 89 48 08\n31 f6\n41 81 f9 00 94 35 77\n0f 94 c0\nb9 01 00 00 00\n4d 39 e6\n0f 8c 49 01 00 00\n4d 39 f4\n0f 95 c2\n44 3b 2c 24\n7f 08\n84 d2\n0f 84 35 01 00 00\n40 88 c6\n48 89 f0\n48 f7 d0\n4c 21 f0\nb9 ff ff ff ff\n49 39 c4\n0f 8c 1b 01 00 00\n75 15\n44 89 e8\n99\n41 f7 f9\n44 89 e8\n29 d0\n39 04 24\n0f 8c 04 01 00 00\n48 8b 44 24 10\n48 89 44 24 20\n49 63 c3\n48 89 44 24 28\n4c 09 e6\n48 89 74 24 30\n4c 89 4c 24 10\n44 89 c8\n48 69 c0 39 8e e3 38\n48 c1 e8 21\n03 04 24\n48 98\n48 89 44 24 38\nb8 00 f0 00 00\n41 23 47 18\n48 8d 74 24 20\n3d 00 a0 00 00\n75 0c\n48 8b 7c 24 08\ne8 b3 06 00 00\neb 0a\n48 8b 7c 24 08\ne8 87 06 00 00\nb9 fe ff ff ff\n85 c0\n0f 85 95 00 00 00\nb8 00 f0 00 00\n41 23 47 18\n48 8d 74 24 58\n3d 00 a0 00 00\n75 0c\n48 8b 7c 24 08\ne8 3b 48 00 00\neb 0a\n48 8b 7c 24 08\ne8 0f 48 00 00\n89 c5\n48 98\n48 8b 9c 24 b0 00 00 00\n4c 31 e3\n48 09 c3\n48 8d 7c 24 58\ne8 a3 fa ff ff\n48 63 0c 24\n48 31 c8\n48 09 d8\n74 39\n4c 89 64 24 30\n48 89 4c 24 38\nb8 00 f0 00 00\n41 23 47 18\n48 8d 74 24 20\n3d 00 a0 00 00\n75 10\n48 8b 7c 24 08\ne8 1e 06 00 00\n85 ed\n75 10\neb 27\n48 8b 7c 24 08\ne8 ee 05 00 00\n85 ed\n74 19\nb9 fe ff ff ff\n89 c8\n48 81 c4 e8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n8b 9c 24 b0 00 00 00\n83 e3 01\nf7 db\n81 e3 00 ca 9a 3b\n48 8d 7c 24 58\ne8 25 fa ff ff\n48 01 d8\n48 63 d0\n48 69 ca 67 66 66 66\n48 89 ce\n48 c1 ee 3f\n48 c1 f9 22\n01 f1\n01 c9\n8d 34 89\nb9 01 00 00 00\n39 f2\n48 8b 6c 24 10\n74 0a\n4c 8b 44 24 18\ne9 05 fd ff ff\nb9 01 00 00 00\n81 f9 00 ca 9a 3b\n74 41\n01 c9\n8d 0c 89\n39 e9\n74 e0\n48 98\n48 69 c0 67 66 66 66\n48 89 c2\n48 c1 ea 3f\n48 c1 f8 22\n01 d0\n48 63 d0\n48 69 f2 67 66 66 66\n48 89 f7\n48 c1 ef 3f\n48 c1 fe 22\n01 fe\n01 f6\n8d 34 b6\n39 f2\n74 b9\neb a8\nb9 00 94 35 77\n4c 8b 44 24 18\ne9 a8 fc ff ff\n'
p2245
S'.text:000000000040c770\n.text:000000000040c771\n.text:000000000040c773\n.text:000000000040c775\n.text:000000000040c777\n.text:000000000040c779\n.text:000000000040c77a\n.text:000000000040c781\n.text:000000000040c783\n.text:000000000040c786\n.text:000000000040c789\n.text:000000000040c78e\n.text:000000000040c792\n.text:000000000040c796\n.text:000000000040c799\n.text:000000000040c79e\n.text:000000000040c7a2\n.text:000000000040c7a5\n.text:000000000040c7aa\n.text:000000000040c7ad\n.text:000000000040c7b1\n.text:000000000040c7b3\n.text:000000000040c7b8\n.text:000000000040c7bb\n.text:000000000040c7c1\n.text:000000000040c7c6\n.text:000000000040c7cc\n.text:000000000040c7d0\n.text:000000000040c7d5\n.text:000000000040c7db\n.text:000000000040c7de\n.text:000000000040c7e1\n.text:000000000040c7e6\n.text:000000000040c7e9\n.text:000000000040c7eb\n.text:000000000040c7ed\n.text:000000000040c7f1\n.text:000000000040c7f7\n.text:000000000040c7fb\n.text:000000000040c800\n.text:000000000040c803\n.text:000000000040c809\n.text:000000000040c80e\n.text:000000000040c813\n.text:000000000040c816\n.text:000000000040c81c\n.text:000000000040c823\n.text:000000000040c826\n.text:000000000040c828\n.text:000000000040c82d\n.text:000000000040c82f\n.text:000000000040c834\n.text:000000000040c839\n.text:000000000040c83f\n.text:000000000040c844\n.text:000000000040c847\n.text:000000000040c84e\n.text:000000000040c851\n.text:000000000040c857\n.text:000000000040c85f\n.text:000000000040c861\n.text:000000000040c866\n.text:000000000040c86b\n.text:000000000040c872\n.text:000000000040c875\n.text:000000000040c877\n.text:000000000040c87e\n.text:000000000040c885\n.text:000000000040c889\n.text:000000000040c88c\n.text:000000000040c893\n.text:000000000040c896\n.text:000000000040c899\n.text:000000000040c89e\n.text:000000000040c8a1\n.text:000000000040c8a3\n.text:000000000040c8aa\n.text:000000000040c8ac\n.text:000000000040c8b7\n.text:000000000040c8bb\n.text:000000000040c8bd\n.text:000000000040c8bf\n.text:000000000040c8c1\n.text:000000000040c8c8\n.text:000000000040c8cb\n.text:000000000040c8cd\n.text:000000000040c8d0\n.text:000000000040c8d5\n.text:000000000040c8da\n.text:000000000040c8df\n.text:000000000040c8e2\n.text:000000000040c8e4\n.text:000000000040c8ec\n.text:000000000040c8f1\n.text:000000000040c8f6\n.text:000000000040c8fa\n.text:000000000040c8fc\n.text:000000000040c8ff\n.text:000000000040c904\n.text:000000000040c909\n.text:000000000040c90d\n.text:000000000040c912\n.text:000000000040c915\n.text:000000000040c919\n.text:000000000040c91c\n.text:000000000040c921\n.text:000000000040c924\n.text:000000000040c927\n.text:000000000040c92c\n.text:000000000040c92f\n.text:000000000040c932\n.text:000000000040c939\n.text:000000000040c93c\n.text:000000000040c940\n.text:000000000040c944\n.text:000000000040c946\n.text:000000000040c948\n.text:000000000040c94b\n.text:000000000040c94d\n.text:000000000040c950\n.text:000000000040c957\n.text:000000000040c95a\n.text:000000000040c95e\n.text:000000000040c962\n.text:000000000040c964\n.text:000000000040c966\n.text:000000000040c969\n.text:000000000040c96b\n.text:000000000040c96f\n.text:000000000040c972\n.text:000000000040c979\n.text:000000000040c97c\n.text:000000000040c980\n.text:000000000040c984\n.text:000000000040c986\n.text:000000000040c988\n.text:000000000040c98b\n.text:000000000040c98d\n.text:000000000040c98f\n.text:000000000040c991\n.text:000000000040c993\n.text:000000000040c995\n.text:000000000040c99a\n.text:000000000040c9a2\n.text:000000000040c9a7\n.text:000000000040c9ab\n.text:000000000040c9b0\n.text:000000000040c9b2\n.text:000000000040c9b8\n.text:000000000040c9bb\n.text:000000000040c9be\n.text:000000000040c9c1\n.text:000000000040c9c4\n.text:000000000040c9c5\n.text:000000000040c9c7\n.text:000000000040c9ca\n.text:000000000040c9cf\n.text:000000000040c9d2\n.text:000000000040c9d8\n.text:000000000040c9dd\n.text:000000000040c9e2\n.text:000000000040c9e8\n.text:000000000040c9ee\n.text:000000000040c9f1\n.text:000000000040c9f5\n.text:000000000040c9f8\n.text:000000000040c9ff\n.text:000000000040ca02\n.text:000000000040ca06\n.text:000000000040ca0a\n.text:000000000040ca0c\n.text:000000000040ca0e\n.text:000000000040ca15\n.text:000000000040ca18\n.text:000000000040ca1c\n.text:000000000040ca20\n.text:000000000040ca22\n.text:000000000040ca25\n.text:000000000040ca2c\n.text:000000000040ca2f\n.text:000000000040ca33\n.text:000000000040ca37\n.text:000000000040ca39\n.text:000000000040ca3c\n.text:000000000040ca43\n.text:000000000040ca46\n.text:000000000040ca4a\n.text:000000000040ca4e\n.text:000000000040ca50\n.text:000000000040ca52\n.text:000000000040ca55\n.text:000000000040ca57\n.text:000000000040ca5a\n.text:000000000040ca61\n.text:000000000040ca64\n.text:000000000040ca68\n.text:000000000040ca6c\n.text:000000000040ca6e\n.text:000000000040ca70\n.text:000000000040ca73\n.text:000000000040ca75\n.text:000000000040ca77\n.text:000000000040ca7a\n.text:000000000040ca81\n.text:000000000040ca84\n.text:000000000040ca88\n.text:000000000040ca8c\n.text:000000000040ca8e\n.text:000000000040ca90\n.text:000000000040ca94\n.text:000000000040ca96\n.text:000000000040ca98\n.text:000000000040ca9a\n.text:000000000040caa1\n.text:000000000040caa3\n.text:000000000040caa6\n.text:000000000040caaa\n.text:000000000040caae\n.text:000000000040cab4\n.text:000000000040cab8\n.text:000000000040cabc\n.text:000000000040cabf\n.text:000000000040cac5\n.text:000000000040cac7\n.text:000000000040caca\n.text:000000000040cace\n.text:000000000040cad1\n.text:000000000040cad4\n.text:000000000040cad8\n.text:000000000040cada\n.text:000000000040cae1\n.text:000000000040cae4\n.text:000000000040cae9\n.text:000000000040caec\n.text:000000000040caf2\n.text:000000000040caf5\n.text:000000000040caf8\n.text:000000000040cafc\n.text:000000000040cafe\n.text:000000000040cb00\n.text:000000000040cb06\n.text:000000000040cb09\n.text:000000000040cb0c\n.text:000000000040cb0f\n.text:000000000040cb12\n.text:000000000040cb17\n.text:000000000040cb1a\n.text:000000000040cb20\n.text:000000000040cb22\n.text:000000000040cb25\n.text:000000000040cb26\n.text:000000000040cb29\n.text:000000000040cb2c\n.text:000000000040cb2e\n.text:000000000040cb31\n.text:000000000040cb37\n.text:000000000040cb3c\n.text:000000000040cb41\n.text:000000000040cb44\n.text:000000000040cb49\n.text:000000000040cb4c\n.text:000000000040cb51\n.text:000000000040cb56\n.text:000000000040cb59\n.text:000000000040cb60\n.text:000000000040cb64\n.text:000000000040cb67\n.text:000000000040cb69\n.text:000000000040cb6e\n.text:000000000040cb73\n.text:000000000040cb77\n.text:000000000040cb7c\n.text:000000000040cb81\n.text:000000000040cb83\n.text:000000000040cb88\n.text:000000000040cb8d\n.text:000000000040cb8f\n.text:000000000040cb94\n.text:000000000040cb99\n.text:000000000040cb9e\n.text:000000000040cba0\n.text:000000000040cba6\n.text:000000000040cbab\n.text:000000000040cbaf\n.text:000000000040cbb4\n.text:000000000040cbb9\n.text:000000000040cbbb\n.text:000000000040cbc0\n.text:000000000040cbc5\n.text:000000000040cbc7\n.text:000000000040cbcc\n.text:000000000040cbd1\n.text:000000000040cbd3\n.text:000000000040cbd5\n.text:000000000040cbdd\n.text:000000000040cbe0\n.text:000000000040cbe3\n.text:000000000040cbe8\n.text:000000000040cbed\n.text:000000000040cbf1\n.text:000000000040cbf4\n.text:000000000040cbf7\n.text:000000000040cbf9\n.text:000000000040cbfe\n.text:000000000040cc03\n.text:000000000040cc08\n.text:000000000040cc0c\n.text:000000000040cc11\n.text:000000000040cc16\n.text:000000000040cc18\n.text:000000000040cc1d\n.text:000000000040cc22\n.text:000000000040cc24\n.text:000000000040cc26\n.text:000000000040cc28\n.text:000000000040cc2d\n.text:000000000040cc32\n.text:000000000040cc34\n.text:000000000040cc36\n.text:000000000040cc3b\n.text:000000000040cc3d\n.text:000000000040cc44\n.text:000000000040cc45\n.text:000000000040cc47\n.text:000000000040cc49\n.text:000000000040cc4b\n.text:000000000040cc4d\n.text:000000000040cc4e\n.text:000000000040cc4f\n.text:000000000040cc56\n.text:000000000040cc59\n.text:000000000040cc5b\n.text:000000000040cc61\n.text:000000000040cc66\n.text:000000000040cc6b\n.text:000000000040cc6e\n.text:000000000040cc71\n.text:000000000040cc78\n.text:000000000040cc7b\n.text:000000000040cc7f\n.text:000000000040cc83\n.text:000000000040cc85\n.text:000000000040cc87\n.text:000000000040cc8a\n.text:000000000040cc8f\n.text:000000000040cc91\n.text:000000000040cc96\n.text:000000000040cc98\n.text:000000000040cc9d\n.text:000000000040cca2\n.text:000000000040cca7\n.text:000000000040ccad\n.text:000000000040ccaf\n.text:000000000040ccb1\n.text:000000000040ccb4\n.text:000000000040ccb6\n.text:000000000040ccb8\n.text:000000000040ccba\n.text:000000000040ccc1\n.text:000000000040ccc4\n.text:000000000040ccc8\n.text:000000000040cccc\n.text:000000000040ccce\n.text:000000000040ccd1\n.text:000000000040ccd8\n.text:000000000040ccdb\n.text:000000000040ccdf\n.text:000000000040cce3\n.text:000000000040cce5\n.text:000000000040cce7\n.text:000000000040ccea\n.text:000000000040ccec\n.text:000000000040ccee\n.text:000000000040ccf0\n.text:000000000040ccf5\n.text:000000000040ccfa\n'
p2246
tp2247
sS'hash_insert'
p2248
(S'\n__stdcall hash_insert(Hash_table * table, void * entry)\n'
p2249
V\u000avoid * hash_insert(Hash_table *table,void *entry)\u000a\u000a{\u000a  int iVar1;\u000a  void *matched_ent;\u000a  void *local_10;\u000a  \u000a  iVar1 = hash_insert_if_absent(table,entry,&local_10);\u000a  if (iVar1 == -1) {\u000a    entry = (void *)0x0;\u000a  }\u000a  else {\u000a    if (iVar1 == 0) {\u000a      entry = local_10;\u000a    }\u000a  }\u000a  return entry;\u000a}\u000a\u000a
p2250
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RSI\nLEA RDX,[RSP + 0x8]\nCALL 0x00409fd0\nCMP EAX,-0x1\nJZ 0x0040a2c1\nTEST EAX,EAX\nCMOVZ RBX,qword ptr [RSP + 0x8]\nJMP 0x0040a2c3\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x10\nPOP RBX\nRET\n'
p2251
S'53\n48 83 ec 10\n48 89 f3\n48 8d 54 24 08\ne8 1e fd ff ff\n83 f8 ff\n74 0a\n85 c0\n48 0f 44 5c 24 08\neb 02\n31 db\n48 89 d8\n48 83 c4 10\n5b\nc3\n'
p2252
S'.text:000000000040a2a0\n.text:000000000040a2a1\n.text:000000000040a2a5\n.text:000000000040a2a8\n.text:000000000040a2ad\n.text:000000000040a2b2\n.text:000000000040a2b5\n.text:000000000040a2b7\n.text:000000000040a2b9\n.text:000000000040a2bf\n.text:000000000040a2c1\n.text:000000000040a2c3\n.text:000000000040a2c6\n.text:000000000040a2ca\n.text:000000000040a2cb\n'
p2253
tp2254
sS'gettext_quote'
p2255
(S'\n__stdcall gettext_quote(char * msgid)\n'
p2256
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_004139fe;\u000a        pcVar2 = &DAT_00413a02;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p2257
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x00402270\nCMP RAX,RBX\nJNZ 0x0040bc48\nCALL 0x00410990\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x0040bc50\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x0040bbf8\nCMP byte ptr [RBX],0x60\nMOV ECX,0x4139ee\nMOV EAX,0x4139f2\nJMP 0x0040bc44\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x0040bc50\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x0040bc36\nCMP byte ptr [RBX],0x60\nMOV ECX,0x4139fe\nMOV EAX,0x413a02\nJMP 0x0040bc44\nCMP R14D,0x9\nMOV ECX,0x4139e4\nMOV EAX,0x4143dc\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p2258
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 c7 66 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 d9 4d 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 ee 39 41 00\nb8 f2 39 41 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 fe 39 41 00\nb8 02 3a 41 00\neb 0e\n41 83 fe 09\nb9 e4 39 41 00\nb8 dc 43 41 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p2259
S'.text:000000000040bb90\n.text:000000000040bb91\n.text:000000000040bb93\n.text:000000000040bb94\n.text:000000000040bb97\n.text:000000000040bb9a\n.text:000000000040bb9c\n.text:000000000040bba1\n.text:000000000040bba4\n.text:000000000040bba9\n.text:000000000040bbac\n.text:000000000040bbb2\n.text:000000000040bbb7\n.text:000000000040bbba\n.text:000000000040bbbf\n.text:000000000040bbc4\n.text:000000000040bbc9\n.text:000000000040bbcf\n.text:000000000040bbd5\n.text:000000000040bbd8\n.text:000000000040bbda\n.text:000000000040bbdc\n.text:000000000040bbe1\n.text:000000000040bbe5\n.text:000000000040bbe7\n.text:000000000040bbe9\n.text:000000000040bbec\n.text:000000000040bbf1\n.text:000000000040bbf6\n.text:000000000040bbf8\n.text:000000000040bbfd\n.text:000000000040bc02\n.text:000000000040bc07\n.text:000000000040bc0d\n.text:000000000040bc13\n.text:000000000040bc16\n.text:000000000040bc18\n.text:000000000040bc1a\n.text:000000000040bc1f\n.text:000000000040bc23\n.text:000000000040bc25\n.text:000000000040bc27\n.text:000000000040bc2a\n.text:000000000040bc2f\n.text:000000000040bc34\n.text:000000000040bc36\n.text:000000000040bc3a\n.text:000000000040bc3f\n.text:000000000040bc44\n.text:000000000040bc48\n.text:000000000040bc49\n.text:000000000040bc4b\n.text:000000000040bc4c\n'
p2260
tp2261
sS'fsetfilecon'
p2262
(S'\n__stdcall fsetfilecon(security_context_t con)\n'
p2263
V\u000aint fsetfilecon(security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p2264
S'PUSH RAX\nCALL 0x00402100\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p2265
S'50\ne8 5a 5b ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p2266
S'.text:000000000040c5a0\n.text:000000000040c5a1\n.text:000000000040c5a6\n.text:000000000040c5ac\n.text:000000000040c5b1\n.text:000000000040c5b2\n'
p2267
tp2268
sS'fts_close'
p2269
(S'\n__stdcall fts_close(FTS * sp)\n'
p2270
V\u000aint fts_close(FTS *sp)\u000a\u000a{\u000a  _ftsent *__ptr;\u000a  _ftsent *p_Var1;\u000a  long lVar2;\u000a  int iVar3;\u000a  int iVar4;\u000a  _ftsent **pp_Var5;\u000a  int *piVar6;\u000a  \u000a  __ptr = sp->fts_cur;\u000a  if (__ptr != (_ftsent *)0x0) {\u000a    lVar2 = __ptr->fts_level;\u000a    while (-1 < lVar2) {\u000a      pp_Var5 = &__ptr->fts_link;\u000a      if (__ptr->fts_link == (_ftsent *)0x0) {\u000a        pp_Var5 = &__ptr->fts_parent;\u000a      }\u000a      p_Var1 = *pp_Var5;\u000a      free(__ptr);\u000a      lVar2 = p_Var1->fts_level;\u000a      __ptr = p_Var1;\u000a    }\u000a    free(__ptr);\u000a  }\u000a  if ((FTSENT *)sp->fts_child != (FTSENT *)0x0) {\u000a    fts_lfree((FTSENT *)sp->fts_child);\u000a  }\u000a  free(sp->fts_array);\u000a  free(sp->fts_path);\u000a  if ((sp->fts_options & 0x200U) == 0) {\u000a    iVar3 = 0;\u000a    if ((sp->fts_options & 4U) != 0) goto LAB_0040e7df;\u000a    iVar3 = fchdir(sp->fts_rfd);\u000a    if (iVar3 == 0) {\u000a      iVar3 = 0;\u000a    }\u000a    else {\u000a      piVar6 = __errno_location();\u000a      iVar3 = *piVar6;\u000a    }\u000a    iVar4 = close(sp->fts_rfd);\u000a    if (iVar3 != 0) goto LAB_0040e7df;\u000a  }\u000a  else {\u000a    iVar3 = 0;\u000a    if (sp->fts_cwd_fd < 0) goto LAB_0040e7df;\u000a    iVar4 = close(sp->fts_cwd_fd);\u000a  }\u000a  if (iVar4 != 0) {\u000a    piVar6 = __errno_location();\u000a    iVar3 = *piVar6;\u000a  }\u000aLAB_0040e7df:\u000a  fd_ring_clear(&sp->fts_fd_ring);\u000a  if ((Hash_table *)sp->fts_leaf_optimization_works_ht != (Hash_table *)0x0) {\u000a    hash_free((Hash_table *)sp->fts_leaf_optimization_works_ht);\u000a  }\u000a  free_dir(sp);\u000a  free(sp);\u000a  if (iVar3 == 0) {\u000a    iVar3 = 0;\u000a  }\u000a  else {\u000a    piVar6 = __errno_location();\u000a    *piVar6 = iVar3;\u000a    iVar3 = -1;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p2271
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV RBX,qword ptr [R14]\nTEST RBX,RBX\nJZ 0x0040e76b\nCMP qword ptr [RBX + 0x58],0x0\nJS 0x0040e763\nMOV RDI,RBX\nNOP dword ptr [RAX]\nCMP qword ptr [RBX + 0x10],0x0\nLEA RAX,[RBX + 0x10]\nLEA RCX,[RBX + 0x8]\nCMOVZ RAX,RCX\nMOV RBX,qword ptr [RAX]\nCALL 0x004020c0\nCMP qword ptr [RBX + 0x58],0x0\nMOV RDI,RBX\nJNS 0x0040e740\nMOV RDI,RBX\nCALL 0x004020c0\nMOV RDI,qword ptr [R14 + 0x8]\nTEST RDI,RDI\nJZ 0x0040e779\nCALL 0x0040e6e0\nMOV RDI,qword ptr [R14 + 0x10]\nCALL 0x004020c0\nMOV RDI,qword ptr [R14 + 0x20]\nCALL 0x004020c0\nMOV EAX,dword ptr [R14 + 0x48]\nTEST AH,0x2\nJNZ 0x0040e7b0\nXOR EBX,EBX\nTEST AL,0x4\nJNZ 0x0040e7df\nMOV EDI,dword ptr [R14 + 0x28]\nCALL 0x004025b0\nTEST EAX,EAX\nJZ 0x0040e7c5\nCALL 0x00402100\nMOV EBX,dword ptr [RAX]\nJMP 0x0040e7c7\nMOV EDI,dword ptr [R14 + 0x2c]\nXOR EBX,EBX\nTEST EDI,EDI\nJS 0x0040e7df\nCALL 0x004023c0\nTEST EAX,EAX\nJNZ 0x0040e7d8\nJMP 0x0040e7df\nXOR EBX,EBX\nMOV EDI,dword ptr [R14 + 0x28]\nCALL 0x004023c0\nTEST EBX,EBX\nJNZ 0x0040e7df\nTEST EAX,EAX\nJZ 0x0040e7df\nCALL 0x00402100\nMOV EBX,dword ptr [RAX]\nLEA RDI,[R14 + 0x60]\nCALL 0x0040e830\nMOV RDI,qword ptr [R14 + 0x50]\nTEST RDI,RDI\nJZ 0x0040e7f6\nCALL 0x00409ca0\nMOV RDI,R14\nCALL 0x0040e870\nMOV RDI,R14\nCALL 0x004020c0\nTEST EBX,EBX\nJZ 0x0040e818\nCALL 0x00402100\nMOV dword ptr [RAX],EBX\nMOV EAX,0xffffffff\nJMP 0x0040e81a\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p2272
S'41 56\n53\n50\n49 89 fe\n49 8b 1e\n48 85 db\n74 3c\n48 83 7b 58 00\n78 2d\n48 89 df\n0f 1f 80 00 00 00 00\n48 83 7b 10 00\n48 8d 43 10\n48 8d 4b 08\n48 0f 44 c1\n48 8b 18\ne8 67 39 ff ff\n48 83 7b 58 00\n48 89 df\n79 dd\n48 89 df\ne8 55 39 ff ff\n49 8b 7e 08\n48 85 ff\n74 05\ne8 67 ff ff ff\n49 8b 7e 10\ne8 3e 39 ff ff\n49 8b 7e 20\ne8 35 39 ff ff\n41 8b 46 48\nf6 c4 02\n75 1c\n31 db\na8 04\n75 45\n41 8b 7e 28\ne8 0d 3e ff ff\n85 c0\n74 1e\ne8 54 39 ff ff\n8b 18\neb 17\n41 8b 7e 2c\n31 db\n85 ff\n78 25\ne8 01 3c ff ff\n85 c0\n75 15\neb 1a\n31 db\n41 8b 7e 28\ne8 f0 3b ff ff\n85 db\n75 0b\n85 c0\n74 07\ne8 23 39 ff ff\n8b 18\n49 8d 7e 60\ne8 48 00 00 00\n49 8b 7e 50\n48 85 ff\n74 05\ne8 aa b4 ff ff\n4c 89 f7\ne8 72 00 00 00\n4c 89 f7\ne8 ba 38 ff ff\n85 db\n74 0e\ne8 f1 38 ff ff\n89 18\nb8 ff ff ff ff\neb 02\n31 c0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p2273
S'.text:000000000040e720\n.text:000000000040e722\n.text:000000000040e723\n.text:000000000040e724\n.text:000000000040e727\n.text:000000000040e72a\n.text:000000000040e72d\n.text:000000000040e72f\n.text:000000000040e734\n.text:000000000040e736\n.text:000000000040e739\n.text:000000000040e740\n.text:000000000040e745\n.text:000000000040e749\n.text:000000000040e74d\n.text:000000000040e751\n.text:000000000040e754\n.text:000000000040e759\n.text:000000000040e75e\n.text:000000000040e761\n.text:000000000040e763\n.text:000000000040e766\n.text:000000000040e76b\n.text:000000000040e76f\n.text:000000000040e772\n.text:000000000040e774\n.text:000000000040e779\n.text:000000000040e77d\n.text:000000000040e782\n.text:000000000040e786\n.text:000000000040e78b\n.text:000000000040e78f\n.text:000000000040e792\n.text:000000000040e794\n.text:000000000040e796\n.text:000000000040e798\n.text:000000000040e79a\n.text:000000000040e79e\n.text:000000000040e7a3\n.text:000000000040e7a5\n.text:000000000040e7a7\n.text:000000000040e7ac\n.text:000000000040e7ae\n.text:000000000040e7b0\n.text:000000000040e7b4\n.text:000000000040e7b6\n.text:000000000040e7b8\n.text:000000000040e7ba\n.text:000000000040e7bf\n.text:000000000040e7c1\n.text:000000000040e7c3\n.text:000000000040e7c5\n.text:000000000040e7c7\n.text:000000000040e7cb\n.text:000000000040e7d0\n.text:000000000040e7d2\n.text:000000000040e7d4\n.text:000000000040e7d6\n.text:000000000040e7d8\n.text:000000000040e7dd\n.text:000000000040e7df\n.text:000000000040e7e3\n.text:000000000040e7e8\n.text:000000000040e7ec\n.text:000000000040e7ef\n.text:000000000040e7f1\n.text:000000000040e7f6\n.text:000000000040e7f9\n.text:000000000040e7fe\n.text:000000000040e801\n.text:000000000040e806\n.text:000000000040e808\n.text:000000000040e80a\n.text:000000000040e80f\n.text:000000000040e811\n.text:000000000040e816\n.text:000000000040e818\n.text:000000000040e81a\n.text:000000000040e81e\n.text:000000000040e81f\n.text:000000000040e821\n'
p2274
tp2275
sS'fclose'
p2276
(S'\n__stdcall fclose(FILE * __stream)\n'
p2277
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_006190d0)();\u000a  return iVar1;\u000a}\u000a\u000a
p2278
S'JMP qword ptr [0x006190d0]\n'
p2279
S'ff 25 aa 6e 21 00\n'
p2280
S'.plt:0000000000402220\n'
p2281
tp2282
sS'__ctype_get_mb_cur_max'
p2283
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p2284
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_00619100)();\u000a  return sVar1;\u000a}\u000a\u000a
p2285
S'JMP qword ptr [0x00619100]\n'
p2286
S'ff 25 7a 6e 21 00\n'
p2287
S'.plt:0000000000402280\n'
p2288
tp2289
sS'lstat'
p2290
(S'\n__stdcall lstat(char * __file, stat * __buf)\n'
p2291
V\u000aint lstat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___lxstat_00619110)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p2292
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x004022a0\n'
p2293
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 90 0e ff ff\n'
p2294
S'.text:0000000000411400\n.text:0000000000411403\n.text:0000000000411406\n.text:000000000041140b\n'
p2295
tp2296
sS'streamsavedir'
p2297
(S'\n__stdcall streamsavedir(DIR * dirp)\n'
p2298
V\u000achar * streamsavedir(DIR *dirp)\u000a\u000a{\u000a  char cVar1;\u000a  int iVar2;\u000a  char *__s;\u000a  int *piVar3;\u000a  dirent *pdVar4;\u000a  size_t sVar5;\u000a  char *__n;\u000a  char **ppcVar6;\u000a  ulong in_RSI;\u000a  char *__nmemb;\u000a  char *pcVar7;\u000a  char **local_68;\u000a  char *local_60;\u000a  char *local_58;\u000a  char *local_50;\u000a  char *local_48;\u000a  ulong local_40;\u000a  int (*local_38)(void *,void *);\u000a  \u000a  if (dirp == (DIR *)0x0) {\u000a    local_58 = (char *)0x0;\u000a  }\u000a  else {\u000a    local_38 = comparison_function_table[in_RSI & 0xffffffff];\u000a    local_40 = (in_RSI & 0xffffffff) - 1;\u000a    pcVar7 = (char *)0x0;\u000a    __nmemb = (char *)0x0;\u000a    local_48 = (char *)0x0;\u000a    local_68 = (char **)0x0;\u000a    local_50 = (char *)0x0;\u000a    local_58 = (char *)0x0;\u000a    while( true ) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0;\u000a      pdVar4 = readdir((DIR *)dirp);\u000a      if (pdVar4 == (dirent *)0x0) break;\u000a      if (pdVar4->d_name[0] == '.') {\u000a        cVar1 = pdVar4->d_name[(ulong)(pdVar4->d_name[1] == '.') + 1];\u000a      }\u000a      else {\u000a        cVar1 = pdVar4->d_name[0];\u000a      }\u000a      if (cVar1 != 0) {\u000a        __s = pdVar4->d_name;\u000a        sVar5 = strlen(__s);\u000a        __n = (char *)(sVar5 + 1);\u000a        if (local_40 < 2) {\u000a          if (local_48 == __nmemb) {\u000a            local_60 = local_48;\u000a            local_68 = (char **)x2nrealloc(local_68,(size_t *)&local_60,0x10);\u000a            local_48 = local_60;\u000a          }\u000a          __s = xstrdup(__s);\u000a          local_68[(long)__nmemb * 2] = __s;\u000a          local_68[(long)__nmemb * 2 + 1] = (char *)pdVar4->d_ino;\u000a          __nmemb = __nmemb + 1;\u000a          pcVar7 = pcVar7 + (long)__n;\u000a        }\u000a        else {\u000a          if (local_50 + -(long)pcVar7 <= __n) {\u000a            local_60 = __n + (long)pcVar7;\u000a            if (CARRY8((ulong)__n,(ulong)pcVar7)) {\u000a                    /* WARNING: Subroutine does not return */\u000a              xalloc_die();\u000a            }\u000a            local_58 = (char *)x2nrealloc(local_58,(size_t *)&local_60,1);\u000a            local_50 = local_60;\u000a          }\u000a          memcpy(local_58 + (long)pcVar7,__s,(size_t)__n);\u000a          pcVar7 = pcVar7 + (long)__n;\u000a        }\u000a      }\u000a    }\u000a    iVar2 = *piVar3;\u000a    if (iVar2 == 0) {\u000a      if (local_40 < 2) {\u000a        if (__nmemb == (char *)0x0) {\u000a          __s = (char *)xmalloc((size_t)(pcVar7 + 1));\u000a          pcVar7 = (char *)0x0;\u000a        }\u000a        else {\u000a          qsort(local_68,(size_t)__nmemb,0x10,(__compar_fn_t)local_38);\u000a          __s = (char *)xmalloc((size_t)(pcVar7 + 1));\u000a          pcVar7 = (char *)0x0;\u000a          ppcVar6 = local_68;\u000a          do {\u000a            __n = stpcpy(__s + (long)pcVar7,*ppcVar6);\u000a            pcVar7 = __n + (long)(pcVar7 + (1 - (long)(__s + (long)pcVar7)));\u000a            free(*ppcVar6);\u000a            ppcVar6 = ppcVar6 + 2;\u000a            __nmemb = __nmemb + -1;\u000a          } while (__nmemb != (char *)0x0);\u000a        }\u000a        free(local_68);\u000a        local_58 = __s;\u000a      }\u000a      else {\u000a        if (local_50 == pcVar7) {\u000a          local_58 = (char *)xrealloc(local_58,(size_t)(pcVar7 + 1));\u000a        }\u000a      }\u000a      local_58[(long)pcVar7] = 0;\u000a    }\u000a    else {\u000a      free(local_68);\u000a      free(local_58);\u000a      *piVar3 = iVar2;\u000a      local_58 = (char *)0x0;\u000a    }\u000a  }\u000a  return local_58;\u000a}\u000a\u000a
p2299
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV R13,RDI\nTEST R13,R13\nJZ 0x0040c1c0\nMOV ECX,ESI\nMOV RAX,qword ptr [0x413a10 + RCX*0x8]\nMOV qword ptr [RSP + 0x30],RAX\nDEC RCX\nMOV qword ptr [RSP + 0x28],RCX\nXOR R14D,R14D\nXOR R12D,R12D\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x20],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x18],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nJMP 0x0040c1f0\nXOR R15D,R15D\nJMP 0x0040c3d1\nMOV RDI,RBX\nCALL 0x0040dac0\nMOV RCX,R12\nSHL RCX,0x4\nMOV RDX,qword ptr [RSP]\nMOV qword ptr [RDX + RCX*0x1],RAX\nMOV RAX,qword ptr [R15]\nMOV qword ptr [RDX + RCX*0x1 + 0x8],RAX\nINC R12\nADD R14,RBP\nNOP dword ptr [RAX]\nCALL 0x00402100\nMOV RBP,RAX\nMOV dword ptr [RBP],0x0\nMOV RDI,R13\nCALL 0x00402520\nMOV R15,RAX\nTEST R15,R15\nJZ 0x0040c2fe\nCMP byte ptr [R15 + 0x13],0x2e\nJNZ 0x0040c240\nXOR EAX,EAX\nCMP byte ptr [R15 + 0x14],0x2e\nSETZ AL\nINC RAX\nCMP byte ptr [R15 + RAX*0x1 + 0x13],0x0\nJZ 0x0040c1f0\nJMP 0x0040c24a\nXOR EAX,EAX\nCMP byte ptr [R15 + RAX*0x1 + 0x13],0x0\nJZ 0x0040c1f0\nMOV RBX,R15\nADD RBX,0x13\nMOV RDI,RBX\nCALL 0x00402290\nMOV RBP,RAX\nINC RBP\nCMP qword ptr [RSP + 0x28],0x1\nJA 0x0040c2a0\nMOV RAX,qword ptr [RSP + 0x20]\nCMP RAX,R12\nJNZ 0x0040c1c8\nMOV qword ptr [RSP + 0x8],RAX\nMOV EDX,0x10\nMOV RDI,qword ptr [RSP]\nLEA RSI,[RSP + 0x8]\nCALL 0x0040d9c0\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [RSP + 0x20],RAX\nJMP 0x0040c1c8\nMOV RAX,qword ptr [RSP + 0x18]\nSUB RAX,R14\nCMP RAX,RBP\nMOV RAX,qword ptr [RSP + 0x10]\nJA 0x0040c2df\nMOV RCX,RBP\nADD RCX,R14\nMOV qword ptr [RSP + 0x8],RCX\nJC 0x0040c3e3\nMOV EDX,0x1\nMOV RDI,RAX\nLEA RSI,[RSP + 0x8]\nCALL 0x0040d9c0\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RSP + 0x18],RCX\nMOV RCX,RAX\nMOV qword ptr [RSP + 0x10],RCX\nLEA RDI,[RAX + R14*0x1]\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x004024d0\nADD R14,RBP\nJMP 0x0040c1f0\nMOV EBX,dword ptr [RBP]\nTEST EBX,EBX\nJZ 0x0040c323\nMOV RDI,qword ptr [RSP]\nCALL 0x004020c0\nMOV RDI,qword ptr [RSP + 0x10]\nCALL 0x004020c0\nMOV dword ptr [RBP],EBX\nXOR R15D,R15D\nJMP 0x0040c3d1\nCMP qword ptr [RSP + 0x28],0x1\nMOV R15,qword ptr [RSP + 0x10]\nMOV R13,qword ptr [RSP]\nJA 0x0040c39b\nTEST R12,R12\nJZ 0x0040c3b3\nMOV EDX,0x10\nMOV RDI,R13\nMOV RSI,R12\nMOV RCX,qword ptr [RSP + 0x30]\nCALL 0x00402190\nINC R14\nMOV RDI,R14\nCALL 0x0040d950\nMOV R15,RAX\nXOR R14D,R14D\nMOV RBX,R13\nNOP word ptr CS:[RAX + RAX*0x1]\nLEA RBP,[R15 + R14*0x1]\nMOV RSI,qword ptr [RBX]\nMOV RDI,RBP\nCALL 0x00402250\nINC R14\nSUB R14,RBP\nADD R14,RAX\nMOV RDI,qword ptr [RBX]\nCALL 0x004020c0\nADD RBX,0x10\nDEC R12\nJNZ 0x0040c370\nJMP 0x0040c3c4\nCMP qword ptr [RSP + 0x18],R14\nJNZ 0x0040c3cc\nLEA RSI,[R14 + 0x1]\nMOV RDI,R15\nCALL 0x0040d990\nMOV R15,RAX\nJMP 0x0040c3cc\nINC R14\nMOV RDI,R14\nCALL 0x0040d950\nMOV R15,RAX\nXOR R14D,R14D\nMOV RDI,R13\nCALL 0x004020c0\nMOV byte ptr [R15 + R14*0x1],0x0\nMOV RAX,R15\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x0040dae0\n'
p2300
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n49 89 fd\n4d 85 ed\n74 3a\n89 f1\n48 8b 04 cd 10 3a 41 00\n48 89 44 24 30\n48 ff c9\n48 89 4c 24 28\n45 31 f6\n45 31 e4\n31 c0\n48 89 44 24 20\n31 c0\n48 89 04 24\n31 c0\n48 89 44 24 18\n31 c0\n48 89 44 24 10\neb 30\n45 31 ff\ne9 09 02 00 00\n48 89 df\ne8 f0 18 00 00\n4c 89 e1\n48 c1 e1 04\n48 8b 14 24\n48 89 04 0a\n49 8b 07\n48 89 44 0a 08\n49 ff c4\n49 01 ee\n0f 1f 00\ne8 0b 5f ff ff\n48 89 c5\nc7 45 00 00 00 00 00\n4c 89 ef\ne8 19 63 ff ff\n49 89 c7\n4d 85 ff\n0f 84 eb 00 00 00\n41 80 7f 13 2e\n75 26\n31 c0\n41 80 7f 14 2e\n0f 94 c0\n48 ff c0\n41 80 7c 07 13 00\n74 c1\neb 19\n31 c0\n41 80 7c 07 13 00\n74 a6\n4c 89 fb\n48 83 c3 13\n48 89 df\ne8 37 60 ff ff\n48 89 c5\n48 ff c5\n48 83 7c 24 28 01\n77 39\n48 8b 44 24 20\n4c 39 e0\n0f 85 53 ff ff ff\n48 89 44 24 08\nba 10 00 00 00\n48 8b 3c 24\n48 8d 74 24 08\ne8 33 17 00 00\n48 89 04 24\n48 8b 44 24 08\n48 89 44 24 20\ne9 28 ff ff ff\n48 8b 44 24 18\n4c 29 f0\n48 39 e8\n48 8b 44 24 10\n77 2d\n48 89 e9\n4c 01 f1\n48 89 4c 24 08\n0f 82 20 01 00 00\nba 01 00 00 00\n48 89 c7\n48 8d 74 24 08\ne8 eb 16 00 00\n48 8b 4c 24 08\n48 89 4c 24 18\n48 89 c1\n48 89 4c 24 10\n4a 8d 3c 30\n48 89 de\n48 89 ea\ne8 da 61 ff ff\n49 01 ee\ne9 f2 fe ff ff\n8b 5d 00\n85 db\n74 1e\n48 8b 3c 24\ne8 b2 5d ff ff\n48 8b 7c 24 10\ne8 a8 5d ff ff\n89 5d 00\n45 31 ff\ne9 ae 00 00 00\n48 83 7c 24 28 01\n4c 8b 7c 24 10\n4c 8b 2c 24\n77 67\n4d 85 e4\n74 7a\nba 10 00 00 00\n4c 89 ef\n4c 89 e6\n48 8b 4c 24 30\ne8 42 5e ff ff\n49 ff c6\n4c 89 f7\ne8 f7 15 00 00\n49 89 c7\n45 31 f6\n4c 89 eb\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4b 8d 2c 37\n48 8b 33\n48 89 ef\ne8 d1 5e ff ff\n49 ff c6\n49 29 ee\n49 01 c6\n48 8b 3b\ne8 30 5d ff ff\n48 83 c3 10\n49 ff cc\n75 d7\neb 29\n4c 39 74 24 18\n75 2a\n49 8d 76 01\n4c 89 ff\ne8 e2 15 00 00\n49 89 c7\neb 19\n49 ff c6\n4c 89 f7\ne8 92 15 00 00\n49 89 c7\n45 31 f6\n4c 89 ef\ne8 f4 5c ff ff\n43 c6 04 37 00\n4c 89 f8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 f8 16 00 00\n'
p2301
S'.text:000000000040c170\n.text:000000000040c171\n.text:000000000040c173\n.text:000000000040c175\n.text:000000000040c177\n.text:000000000040c179\n.text:000000000040c17a\n.text:000000000040c17e\n.text:000000000040c181\n.text:000000000040c184\n.text:000000000040c186\n.text:000000000040c188\n.text:000000000040c190\n.text:000000000040c195\n.text:000000000040c198\n.text:000000000040c19d\n.text:000000000040c1a0\n.text:000000000040c1a3\n.text:000000000040c1a5\n.text:000000000040c1aa\n.text:000000000040c1ac\n.text:000000000040c1b0\n.text:000000000040c1b2\n.text:000000000040c1b7\n.text:000000000040c1b9\n.text:000000000040c1be\n.text:000000000040c1c0\n.text:000000000040c1c3\n.text:000000000040c1c8\n.text:000000000040c1cb\n.text:000000000040c1d0\n.text:000000000040c1d3\n.text:000000000040c1d7\n.text:000000000040c1db\n.text:000000000040c1df\n.text:000000000040c1e2\n.text:000000000040c1e7\n.text:000000000040c1ea\n.text:000000000040c1ed\n.text:000000000040c1f0\n.text:000000000040c1f5\n.text:000000000040c1f8\n.text:000000000040c1ff\n.text:000000000040c202\n.text:000000000040c207\n.text:000000000040c20a\n.text:000000000040c20d\n.text:000000000040c213\n.text:000000000040c218\n.text:000000000040c21a\n.text:000000000040c21c\n.text:000000000040c221\n.text:000000000040c224\n.text:000000000040c227\n.text:000000000040c22d\n.text:000000000040c22f\n.text:000000000040c240\n.text:000000000040c242\n.text:000000000040c248\n.text:000000000040c24a\n.text:000000000040c24d\n.text:000000000040c251\n.text:000000000040c254\n.text:000000000040c259\n.text:000000000040c25c\n.text:000000000040c25f\n.text:000000000040c265\n.text:000000000040c267\n.text:000000000040c26c\n.text:000000000040c26f\n.text:000000000040c275\n.text:000000000040c27a\n.text:000000000040c27f\n.text:000000000040c283\n.text:000000000040c288\n.text:000000000040c28d\n.text:000000000040c291\n.text:000000000040c296\n.text:000000000040c29b\n.text:000000000040c2a0\n.text:000000000040c2a5\n.text:000000000040c2a8\n.text:000000000040c2ab\n.text:000000000040c2b0\n.text:000000000040c2b2\n.text:000000000040c2b5\n.text:000000000040c2b8\n.text:000000000040c2bd\n.text:000000000040c2c3\n.text:000000000040c2c8\n.text:000000000040c2cb\n.text:000000000040c2d0\n.text:000000000040c2d5\n.text:000000000040c2da\n.text:000000000040c2df\n.text:000000000040c2e2\n.text:000000000040c2e7\n.text:000000000040c2eb\n.text:000000000040c2ee\n.text:000000000040c2f1\n.text:000000000040c2f6\n.text:000000000040c2f9\n.text:000000000040c2fe\n.text:000000000040c301\n.text:000000000040c303\n.text:000000000040c305\n.text:000000000040c309\n.text:000000000040c30e\n.text:000000000040c313\n.text:000000000040c318\n.text:000000000040c31b\n.text:000000000040c31e\n.text:000000000040c323\n.text:000000000040c329\n.text:000000000040c32e\n.text:000000000040c332\n.text:000000000040c334\n.text:000000000040c337\n.text:000000000040c339\n.text:000000000040c33e\n.text:000000000040c341\n.text:000000000040c344\n.text:000000000040c349\n.text:000000000040c34e\n.text:000000000040c351\n.text:000000000040c354\n.text:000000000040c359\n.text:000000000040c35c\n.text:000000000040c35f\n.text:000000000040c362\n.text:000000000040c370\n.text:000000000040c374\n.text:000000000040c377\n.text:000000000040c37a\n.text:000000000040c37f\n.text:000000000040c382\n.text:000000000040c385\n.text:000000000040c388\n.text:000000000040c38b\n.text:000000000040c390\n.text:000000000040c394\n.text:000000000040c397\n.text:000000000040c399\n.text:000000000040c39b\n.text:000000000040c3a0\n.text:000000000040c3a2\n.text:000000000040c3a6\n.text:000000000040c3a9\n.text:000000000040c3ae\n.text:000000000040c3b1\n.text:000000000040c3b3\n.text:000000000040c3b6\n.text:000000000040c3b9\n.text:000000000040c3be\n.text:000000000040c3c1\n.text:000000000040c3c4\n.text:000000000040c3c7\n.text:000000000040c3cc\n.text:000000000040c3d1\n.text:000000000040c3d4\n.text:000000000040c3d8\n.text:000000000040c3d9\n.text:000000000040c3db\n.text:000000000040c3dd\n.text:000000000040c3df\n.text:000000000040c3e1\n.text:000000000040c3e2\n.text:000000000040c3e3\n'
p2302
tp2303
sS'cache_fstatat'
p2304
(S'\n__stdcall cache_fstatat()\n'
p2305
V\u000aint cache_fstatat(void)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  long lVar3;\u000a  stat *__buf;\u000a  char *__file;\u000a  int __fd;\u000a  \u000a  lVar3 = __buf->st_size;\u000a  if (lVar3 == -1) {\u000a    iVar1 = fstatat(__fd,__file,__buf,0x100);\u000a    if (iVar1 != 0) {\u000a      __buf->st_size = -2;\u000a      piVar2 = __errno_location();\u000a      __buf->st_ino = (long)*piVar2;\u000a    }\u000a    lVar3 = __buf->st_size;\u000a  }\u000a  iVar1 = 0;\u000a  if (lVar3 < 0) {\u000a    iVar1 = *(int *)&__buf->st_ino;\u000a    piVar2 = __errno_location();\u000a    *piVar2 = iVar1;\u000a    iVar1 = -1;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p2306
S'PUSH RBX\nMOV RBX,RDX\nMOV RCX,qword ptr [RBX + 0x30]\nCMP RCX,-0x1\nJNZ 0x00403f97\nMOV ECX,0x100\nMOV RDX,RBX\nCALL 0x00411410\nTEST EAX,EAX\nJZ 0x00403f93\nMOV qword ptr [RBX + 0x30],-0x2\nCALL 0x00402100\nMOVSXD RAX,dword ptr [RAX]\nMOV qword ptr [RBX + 0x8],RAX\nMOV RCX,qword ptr [RBX + 0x30]\nXOR EAX,EAX\nTEST RCX,RCX\nJNS 0x00403fad\nMOV EBX,dword ptr [RBX + 0x8]\nCALL 0x00402100\nMOV dword ptr [RAX],EBX\nMOV EAX,0xffffffff\nPOP RBX\nRET\n'
p2307
S'53\n48 89 d3\n48 8b 4b 30\n48 83 f9 ff\n75 29\nb9 00 01 00 00\n48 89 da\ne8 95 d4 00 00\n85 c0\n74 14\n48 c7 43 30 fe ff ff ff\ne8 74 e1 ff ff\n48 63 00\n48 89 43 08\n48 8b 4b 30\n31 c0\n48 85 c9\n79 0f\n8b 5b 08\ne8 5a e1 ff ff\n89 18\nb8 ff ff ff ff\n5b\nc3\n'
p2308
S'.text:0000000000403f60\n.text:0000000000403f61\n.text:0000000000403f64\n.text:0000000000403f68\n.text:0000000000403f6c\n.text:0000000000403f6e\n.text:0000000000403f73\n.text:0000000000403f76\n.text:0000000000403f7b\n.text:0000000000403f7d\n.text:0000000000403f7f\n.text:0000000000403f87\n.text:0000000000403f8c\n.text:0000000000403f8f\n.text:0000000000403f93\n.text:0000000000403f97\n.text:0000000000403f99\n.text:0000000000403f9c\n.text:0000000000403f9e\n.text:0000000000403fa1\n.text:0000000000403fa6\n.text:0000000000403fa8\n.text:0000000000403fad\n.text:0000000000403fae\n'
p2309
tp2310
sS'fallocate'
p2311
(S'\n__stdcall fallocate(int __fd, int __mode, __off_t __offset, __off_t __len)\n'
p2312
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fallocate(int __fd,int __mode,__off_t __offset,__off_t __len)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fallocate_006191d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p2313
S'JMP qword ptr [0x006191d8]\n'
p2314
S'ff 25 a2 6d 21 00\n'
p2315
S'.plt:0000000000402430\n'
p2316
tp2317
sS'raw_hasher'
p2318
(S'\n__stdcall raw_hasher(void * data, size_t n)\n'
p2319
V\u000asize_t raw_hasher(void *data,size_t n)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = rotr_sz((size_t)data);\u000a  return sVar1 % n;\u000a}\u000a\u000a
p2320
S'PUSH RBX\nMOV RBX,RSI\nMOV ESI,0x3\nCALL 0x00410500\nXOR EDX,EDX\nDIV RBX\nMOV RAX,RDX\nPOP RBX\nRET\n'
p2321
S'53\n48 89 f3\nbe 03 00 00 00\ne8 42 6a 00 00\n31 d2\n48 f7 f3\n48 89 d0\n5b\nc3\n'
p2322
S'.text:0000000000409ab0\n.text:0000000000409ab1\n.text:0000000000409ab4\n.text:0000000000409ab9\n.text:0000000000409abe\n.text:0000000000409ac0\n.text:0000000000409ac3\n.text:0000000000409ac6\n.text:0000000000409ac7\n'
p2323
tp2324
sS'quotearg_alloc'
p2325
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p2326
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p2327
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x0040b500\n'
p2328
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p2329
S'.text:000000000040b4f0\n.text:000000000040b4f3\n.text:000000000040b4f5\n.text:000000000040b4f8\n'
p2330
tp2331
sS'set_process_security_ctx'
p2332
(S'\n__stdcall set_process_security_ctx()\n'
p2333
V\u000a_Bool set_process_security_ctx(void)\u000a\u000a{\u000a  char cVar1;\u000a  uint uVar2;\u000a  bool bVar3;\u000a  _Bool _Var4;\u000a  int iVar5;\u000a  security_context_t in_RAX;\u000a  uint *puVar6;\u000a  undefined8 uVar7;\u000a  char *pcVar8;\u000a  long in_RCX;\u000a  char in_DL;\u000a  char *file;\u000a  bool bVar9;\u000a  security_context_t local_28;\u000a  \u000a  if (*(char *)(in_RCX + 0x24) == 0) {\u000a    if (*(char *)(in_RCX + 0x20) == 0) {\u000a      return true;\u000a    }\u000a    if (in_DL == 1) {\u000a      defaultcon();\u000a      puVar6 = (uint *)__errno_location();\u000a      uVar2 = *puVar6;\u000a      _Var4 = ignorable_ctx_err();\u000a      if (_Var4 == false) {\u000a        uVar7 = dcgettext(0,"failed to set default file creation context for %s",5);\u000a        pcVar8 = quotearg_style((char *)0x4);\u000a        error(0,(ulong)uVar2,uVar7,pcVar8);\u000a        return true;\u000a      }\u000a      return true;\u000a    }\u000a    return true;\u000a  }\u000a  bVar3 = true;\u000a  if (*(char *)(in_RCX + 0x22) == 0) {\u000a    bVar9 = false;\u000a  }\u000a  else {\u000a    if (*(char *)(in_RCX + 0x25) == 0) {\u000a      bVar9 = *(char *)(in_RCX + 0x28) == 0;\u000a      bVar3 = false;\u000a    }\u000a    else {\u000a      bVar9 = false;\u000a    }\u000a  }\u000a  local_28 = in_RAX;\u000a  iVar5 = lgetfilecon(file,&local_28);\u000a  if (-1 < iVar5) {\u000a    iVar5 = setfscreatecon(local_28);\u000a    if (-1 < iVar5) goto LAB_0040659c;\u000a    if (bVar3) {\u000aLAB_00406617:\u000a      puVar6 = (uint *)__errno_location();\u000a      uVar2 = *puVar6;\u000a      uVar7 = dcgettext(0,"failed to set default file creation context to %s",5);\u000a      pcVar8 = quote(local_28);\u000a      error(0,(ulong)uVar2,uVar7,pcVar8);\u000a    }\u000a    else {\u000a      if (bVar9) {\u000a        __errno_location();\u000a        _Var4 = errno_unsupported();\u000a        if (_Var4 == false) goto LAB_00406617;\u000a      }\u000a    }\u000a    if (*(char *)(in_RCX + 0x25) != 0) {\u000a      freecon(local_28);\u000a      return false;\u000a    }\u000aLAB_0040659c:\u000a    freecon(local_28);\u000a    return true;\u000a  }\u000a  if (bVar3) {\u000aLAB_004065b3:\u000a    puVar6 = (uint *)__errno_location();\u000a    uVar2 = *puVar6;\u000a    uVar7 = dcgettext(0,"failed to get security context of %s",5);\u000a    pcVar8 = quotearg_style((char *)0x4);\u000a    error(0,(ulong)uVar2,uVar7,pcVar8);\u000a    cVar1 = *(char *)(in_RCX + 0x25);\u000a  }\u000a  else {\u000a    if (bVar9) {\u000a      __errno_location();\u000a      _Var4 = errno_unsupported();\u000a      if (_Var4 == false) goto LAB_004065b3;\u000a    }\u000a    cVar1 = *(char *)(in_RCX + 0x25);\u000a  }\u000a  if (cVar1 == 0) {\u000a    return true;\u000a  }\u000a  return false;\u000a}\u000a\u000a
p2334
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RCX\nMOV R15,RSI\nMOV R14,RDI\nCMP byte ptr [RBX + 0x24],0x0\nJZ 0x0040650a\nMOV BPL,0x1\nCMP byte ptr [RBX + 0x22],0x0\nJZ 0x00406571\nCMP byte ptr [RBX + 0x25],0x0\nJZ 0x00406576\nXOR R15D,R15D\nJMP 0x00406580\nCMP byte ptr [RBX + 0x20],0x0\nMOV BL,0x1\nJZ 0x00406688\nXOR DL,0x1\nJNZ 0x00406688\nCALL 0x00407710\nCALL 0x00402100\nMOV EBP,dword ptr [RAX]\nMOV EDI,EBP\nCALL 0x00407720\nTEST AL,AL\nJNZ 0x00406688\nXOR EDI,EDI\nMOV ESI,0x412f26\nMOV EDX,0x5\nCALL 0x00402270\nMOV R14,RAX\nMOV EDI,0x4\nMOV RSI,R15\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,R14\nCALL 0x00402640\nJMP 0x00406688\nXOR R15D,R15D\nJMP 0x00406580\nCMP byte ptr [RBX + 0x28],0x0\nSETZ R15B\nXOR EBP,EBP\nMOV RSI,RSP\nMOV RDI,R14\nCALL 0x0040c520\nTEST EAX,EAX\nJS 0x004065aa\nMOV RDI,qword ptr [RSP]\nCALL 0x0040c4c0\nTEST EAX,EAX\nJS 0x004065fd\nMOV RDI,qword ptr [RSP]\nCALL 0x0040c490\nJMP 0x00406686\nTEST BPL,BPL\nJZ 0x00406663\nCALL 0x00402100\nMOV R15D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x412f01\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,R14\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,RBP\nCALL 0x00402640\nCMP byte ptr [RBX + 0x25],0x0\nJNZ 0x00406682\nJMP 0x00406686\nTEST BPL,BPL\nJNZ 0x00406617\nTEST R15B,R15B\nJZ 0x0040664e\nCALL 0x00402100\nMOV EDI,dword ptr [RAX]\nCALL 0x00407700\nTEST AL,AL\nJNZ 0x0040664e\nCALL 0x00402100\nMOV R14D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x412ecf\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBP,RAX\nMOV RDI,qword ptr [RSP]\nCALL 0x0040bb80\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,RBP\nCALL 0x00402640\nCMP byte ptr [RBX + 0x25],0x0\nJZ 0x0040659c\nMOV RDI,qword ptr [RSP]\nCALL 0x0040c490\nJMP 0x00406682\nTEST R15B,R15B\nJZ 0x0040667c\nCALL 0x00402100\nMOV EDI,dword ptr [RAX]\nCALL 0x00407700\nTEST AL,AL\nJZ 0x004065b3\nCMP byte ptr [RBX + 0x25],0x0\nJZ 0x00406686\nXOR EBX,EBX\nJMP 0x00406688\nMOV BL,0x1\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2335
S'55\n41 57\n41 56\n53\n50\n48 89 cb\n49 89 f7\n49 89 fe\n80 7b 24 00\n74 14\n40 b5 01\n80 7b 22 00\n74 72\n80 7b 25 00\n74 71\n45 31 ff\neb 76\n80 7b 20 00\nb3 01\n0f 84 72 01 00 00\n80 f2 01\n0f 85 69 01 00 00\ne8 ec 11 00 00\ne8 d7 bb ff ff\n8b 28\n89 ef\ne8 ee 11 00 00\n84 c0\n0f 85 4e 01 00 00\n31 ff\nbe 26 2f 41 00\nba 05 00 00 00\ne8 25 bd ff ff\n49 89 c6\nbf 04 00 00 00\n4c 89 fe\ne8 05 54 00 00\n48 89 c1\n31 ff\n31 c0\n89 ee\n4c 89 f2\ne8 d4 c0 ff ff\ne9 17 01 00 00\n45 31 ff\neb 0a\n80 7b 28 00\n41 0f 94 c7\n31 ed\n48 89 e6\n4c 89 f7\ne8 95 5f 00 00\n85 c0\n78 1b\n48 8b 3c 24\ne8 28 5f 00 00\n85 c0\n78 61\n48 8b 3c 24\ne8 eb 5e 00 00\ne9 dc 00 00 00\n40 84 ed\n0f 84 b0 00 00 00\ne8 48 bb ff ff\n44 8b 38\n31 ff\nbe 01 2f 41 00\nba 05 00 00 00\ne8 a4 bc ff ff\n48 89 c5\nbf 04 00 00 00\n4c 89 f6\ne8 84 53 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 fe\n48 89 ea\ne8 52 c0 ff ff\n80 7b 25 00\n0f 85 8a 00 00 00\ne9 89 00 00 00\n40 84 ed\n75 15\n45 84 ff\n74 47\ne8 f4 ba ff ff\n8b 38\ne8 ed 10 00 00\n84 c0\n75 37\ne8 e4 ba ff ff\n44 8b 30\n31 ff\nbe cf 2e 41 00\nba 05 00 00 00\ne8 40 bc ff ff\n48 89 c5\n48 8b 3c 24\ne8 44 55 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 f6\n48 89 ea\ne8 f2 bf ff ff\n80 7b 25 00\n0f 84 44 ff ff ff\n48 8b 3c 24\ne8 2f 5e 00 00\neb 1f\n45 84 ff\n74 14\ne8 93 ba ff ff\n8b 38\ne8 8c 10 00 00\n84 c0\n0f 84 37 ff ff ff\n80 7b 25 00\n74 04\n31 db\neb 02\nb3 01\n89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p2336
S'.text:00000000004064e0\n.text:00000000004064e1\n.text:00000000004064e3\n.text:00000000004064e5\n.text:00000000004064e6\n.text:00000000004064e7\n.text:00000000004064ea\n.text:00000000004064ed\n.text:00000000004064f0\n.text:00000000004064f4\n.text:00000000004064f6\n.text:00000000004064f9\n.text:00000000004064fd\n.text:00000000004064ff\n.text:0000000000406503\n.text:0000000000406505\n.text:0000000000406508\n.text:000000000040650a\n.text:000000000040650e\n.text:0000000000406510\n.text:0000000000406516\n.text:0000000000406519\n.text:000000000040651f\n.text:0000000000406524\n.text:0000000000406529\n.text:000000000040652b\n.text:000000000040652d\n.text:0000000000406532\n.text:0000000000406534\n.text:000000000040653a\n.text:000000000040653c\n.text:0000000000406541\n.text:0000000000406546\n.text:000000000040654b\n.text:000000000040654e\n.text:0000000000406553\n.text:0000000000406556\n.text:000000000040655b\n.text:000000000040655e\n.text:0000000000406560\n.text:0000000000406562\n.text:0000000000406564\n.text:0000000000406567\n.text:000000000040656c\n.text:0000000000406571\n.text:0000000000406574\n.text:0000000000406576\n.text:000000000040657a\n.text:000000000040657e\n.text:0000000000406580\n.text:0000000000406583\n.text:0000000000406586\n.text:000000000040658b\n.text:000000000040658d\n.text:000000000040658f\n.text:0000000000406593\n.text:0000000000406598\n.text:000000000040659a\n.text:000000000040659c\n.text:00000000004065a0\n.text:00000000004065a5\n.text:00000000004065aa\n.text:00000000004065ad\n.text:00000000004065b3\n.text:00000000004065b8\n.text:00000000004065bb\n.text:00000000004065bd\n.text:00000000004065c2\n.text:00000000004065c7\n.text:00000000004065cc\n.text:00000000004065cf\n.text:00000000004065d4\n.text:00000000004065d7\n.text:00000000004065dc\n.text:00000000004065df\n.text:00000000004065e1\n.text:00000000004065e3\n.text:00000000004065e6\n.text:00000000004065e9\n.text:00000000004065ee\n.text:00000000004065f2\n.text:00000000004065f8\n.text:00000000004065fd\n.text:0000000000406600\n.text:0000000000406602\n.text:0000000000406605\n.text:0000000000406607\n.text:000000000040660c\n.text:000000000040660e\n.text:0000000000406613\n.text:0000000000406615\n.text:0000000000406617\n.text:000000000040661c\n.text:000000000040661f\n.text:0000000000406621\n.text:0000000000406626\n.text:000000000040662b\n.text:0000000000406630\n.text:0000000000406633\n.text:0000000000406637\n.text:000000000040663c\n.text:000000000040663f\n.text:0000000000406641\n.text:0000000000406643\n.text:0000000000406646\n.text:0000000000406649\n.text:000000000040664e\n.text:0000000000406652\n.text:0000000000406658\n.text:000000000040665c\n.text:0000000000406661\n.text:0000000000406663\n.text:0000000000406666\n.text:0000000000406668\n.text:000000000040666d\n.text:000000000040666f\n.text:0000000000406674\n.text:0000000000406676\n.text:000000000040667c\n.text:0000000000406680\n.text:0000000000406682\n.text:0000000000406684\n.text:0000000000406686\n.text:0000000000406688\n.text:000000000040668a\n.text:000000000040668e\n.text:000000000040668f\n.text:0000000000406691\n.text:0000000000406693\n.text:0000000000406694\n'
p2337
tp2338
sS'safe_write'
p2339
(S'\n__stdcall safe_write(void * buf, size_t count)\n'
p2340
V\u000asize_t safe_write(void *buf,size_t count)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  size_t sVar3;\u000a  int *piVar4;\u000a  ulong __n;\u000a  size_t unaff_R14;\u000a  \u000a  while( true ) {\u000a    do {\u000a      sVar3 = write((int)buf,(void *)count,__n);\u000a      if (-1 < (long)sVar3) {\u000a        return sVar3;\u000a      }\u000a      piVar4 = __errno_location();\u000a      iVar1 = *piVar4;\u000a    } while (iVar1 == 4);\u000a    uVar2 = __n;\u000a    if (0x7fffe000 < __n && iVar1 == 0x16) {\u000a      sVar3 = unaff_R14;\u000a      uVar2 = 0x7fffe000;\u000a    }\u000a    if (__n < 0x7fffe001) break;\u000a    __n = uVar2;\u000a    unaff_R14 = sVar3;\u000a    if (iVar1 != 0x16) {\u000a      return sVar3;\u000a    }\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p2341
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV R15,RSI\nMOV R12D,EDI\nMOV R13D,0x7fffe000\nNOP word ptr [RAX + RAX*0x1]\nMOV EDI,R12D\nMOV RSI,R15\nMOV RDX,RBX\nCALL 0x004021f0\nMOV RBP,RAX\nTEST RBP,RBP\nJNS 0x0040c044\nCALL 0x00402100\nMOV EAX,dword ptr [RAX]\nCMP EAX,0x4\nJZ 0x0040bff0\nCMP EAX,0x16\nSETZ CL\nCMP RBX,0x7fffe000\nSETA DL\nAND DL,CL\nMOV RCX,RBX\nCMOVNZ RCX,R13\nTEST DL,DL\nCMOVZ R14,RBP\nCMP RBX,0x7fffe001\nJC 0x0040c047\nCMP EAX,0x16\nMOV RBX,RCX\nJZ 0x0040bff0\nJMP 0x0040c047\nMOV R14,RBP\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2342
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n48 89 d3\n49 89 f7\n41 89 fc\n41 bd 00 e0 ff 7f\n66 0f 1f 44 00 00\n44 89 e7\n4c 89 fe\n48 89 da\ne8 f2 61 ff ff\n48 89 c5\n48 85 ed\n79 3e\ne8 f5 60 ff ff\n8b 00\n83 f8 04\n74 de\n83 f8 16\n0f 94 c1\n48 81 fb 00 e0 ff 7f\n0f 97 c2\n20 ca\n48 89 d9\n49 0f 45 cd\n84 d2\n4c 0f 44 f5\n48 81 fb 01 e0 ff 7f\n72 0d\n83 f8 16\n48 89 cb\n74 ae\neb 03\n49 89 ee\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2343
S'.text:000000000040bfd0\n.text:000000000040bfd1\n.text:000000000040bfd3\n.text:000000000040bfd5\n.text:000000000040bfd7\n.text:000000000040bfd9\n.text:000000000040bfda\n.text:000000000040bfdb\n.text:000000000040bfde\n.text:000000000040bfe1\n.text:000000000040bfe4\n.text:000000000040bfea\n.text:000000000040bff0\n.text:000000000040bff3\n.text:000000000040bff6\n.text:000000000040bff9\n.text:000000000040bffe\n.text:000000000040c001\n.text:000000000040c004\n.text:000000000040c006\n.text:000000000040c00b\n.text:000000000040c00d\n.text:000000000040c010\n.text:000000000040c012\n.text:000000000040c015\n.text:000000000040c018\n.text:000000000040c01f\n.text:000000000040c022\n.text:000000000040c024\n.text:000000000040c027\n.text:000000000040c02b\n.text:000000000040c02d\n.text:000000000040c031\n.text:000000000040c038\n.text:000000000040c03a\n.text:000000000040c03d\n.text:000000000040c040\n.text:000000000040c042\n.text:000000000040c044\n.text:000000000040c047\n.text:000000000040c04a\n.text:000000000040c04e\n.text:000000000040c04f\n.text:000000000040c051\n.text:000000000040c053\n.text:000000000040c055\n.text:000000000040c057\n.text:000000000040c058\n'
p2344
tp2345
sS'check_tuning'
p2346
(S'\n__stdcall check_tuning(Hash_table * table)\n'
p2347
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000a_Bool check_tuning(Hash_table *table)\u000a\u000a{\u000a  float fVar1;\u000a  Hash_tuning *pHVar2;\u000a  undefined uVar3;\u000a  float fVar4;\u000a  \u000a  pHVar2 = table->tuning;\u000a  uVar3 = 1;\u000a  if ((pHVar2 != &default_tuning) &&\u000a     ((((fVar1 = pHVar2->growth_threshold, fVar1 <= _DAT_004133d8 || (DAT_004133dc <= fVar1)) ||\u000a       (pHVar2->growth_factor <= _DAT_004133e0)) ||\u000a      (((pHVar2->shrink_threshold < 0.00000000 ||\u000a        (fVar4 = pHVar2->shrink_threshold + _DAT_004133d8, fVar1 <= fVar4)) ||\u000a       ((DAT_004133e4 < pHVar2->shrink_factor || (pHVar2->shrink_factor <= fVar4)))))))) {\u000a    table->tuning = &default_tuning;\u000a    uVar3 = 0;\u000a  }\u000a  return (_Bool)uVar3;\u000a}\u000a\u000a
p2348
S'MOV RCX,qword ptr [RDI + 0x28]\nMOV EDX,0x41345c\nMOV AL,0x1\nCMP RCX,RDX\nJZ 0x00409b53\nMOVSS XMM0,dword ptr [RCX + 0x8]\nUCOMISS XMM0,dword ptr [0x004133d8]\nJBE 0x00409b49\nMOVSS XMM1,dword ptr [0x004133dc]\nUCOMISS XMM1,XMM0\nJBE 0x00409b49\nMOVSS XMM1,dword ptr [RCX + 0xc]\nUCOMISS XMM1,dword ptr [0x004133e0]\nJBE 0x00409b49\nMOVSS XMM1,dword ptr [RCX]\nXORPS XMM2,XMM2\nUCOMISS XMM1,XMM2\nJC 0x00409b49\nADDSS XMM1,dword ptr [0x004133d8]\nUCOMISS XMM0,XMM1\nJBE 0x00409b49\nMOVSS XMM0,dword ptr [RCX + 0x4]\nMOVSS XMM2,dword ptr [0x004133e4]\nUCOMISS XMM2,XMM0\nJC 0x00409b49\nUCOMISS XMM0,XMM1\nJA 0x00409b53\nMOV qword ptr [RDI + 0x28],0x41345c\nXOR EAX,EAX\nRET\n'
p2349
S'48 8b 4f 28\nba 5c 34 41 00\nb0 01\n48 39 d1\n74 63\nf3 0f 10 41 08\n0f 2e 05 dc 98 00 00\n76 4b\nf3 0f 10 0d d6 98 00 00\n0f 2e c8\n76 3e\nf3 0f 10 49 0c\n0f 2e 0d c9 98 00 00\n76 30\nf3 0f 10 09\n0f 57 d2\n0f 2e ca\n72 24\nf3 0f 58 0d ab 98 00 00\n0f 2e c1\n76 17\nf3 0f 10 41 04\nf3 0f 10 15 a5 98 00 00\n0f 2e d0\n72 05\n0f 2e c1\n77 0a\n48 c7 47 28 5c 34 41 00\n31 c0\nc3\n'
p2350
S'.text:0000000000409ae0\n.text:0000000000409ae4\n.text:0000000000409ae9\n.text:0000000000409aeb\n.text:0000000000409aee\n.text:0000000000409af0\n.text:0000000000409af5\n.text:0000000000409afc\n.text:0000000000409afe\n.text:0000000000409b06\n.text:0000000000409b09\n.text:0000000000409b0b\n.text:0000000000409b10\n.text:0000000000409b17\n.text:0000000000409b19\n.text:0000000000409b1d\n.text:0000000000409b20\n.text:0000000000409b23\n.text:0000000000409b25\n.text:0000000000409b2d\n.text:0000000000409b30\n.text:0000000000409b32\n.text:0000000000409b37\n.text:0000000000409b3f\n.text:0000000000409b42\n.text:0000000000409b44\n.text:0000000000409b47\n.text:0000000000409b49\n.text:0000000000409b51\n.text:0000000000409b53\n'
p2351
tp2352
sS'argmatch_to_argument'
p2353
(S'\n__stdcall argmatch_to_argument(char * value, char * * arglist, char * vallist, size_t valsize)\n'
p2354
V\u000achar * argmatch_to_argument(char *value,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  \u000a  pcVar2 = *arglist;\u000a  if (pcVar2 != (char *)0x0) {\u000a    arglist = arglist + 1;\u000a    do {\u000a      iVar1 = memcmp(value,vallist,valsize);\u000a      if (iVar1 == 0) {\u000a        return pcVar2;\u000a      }\u000a      pcVar2 = *arglist;\u000a      arglist = arglist + 1;\u000a      vallist = vallist + valsize;\u000a    } while (pcVar2 != (char *)0x0);\u000a  }\u000a  return (char *)0x0;\u000a}\u000a\u000a
p2355
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R14,RCX\nMOV R12,RDX\nMOV RBX,RSI\nMOV R13,RDI\nMOV R15,qword ptr [RBX]\nTEST R15,R15\nJZ 0x00410491\nADD RBX,0x8\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R14\nCALL 0x00402420\nTEST EAX,EAX\nJZ 0x00410494\nMOV R15,qword ptr [RBX]\nADD RBX,0x8\nADD R12,R14\nTEST R15,R15\nJNZ 0x00410470\nXOR R15D,R15D\nMOV RAX,R15\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p2356
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 ce\n49 89 d4\n48 89 f3\n49 89 fd\n4c 8b 3b\n4d 85 ff\n74 34\n48 83 c3 08\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ef\n4c 89 e6\n4c 89 f2\ne8 a2 1f ff ff\n85 c0\n74 12\n4c 8b 3b\n48 83 c3 08\n4d 01 f4\n4d 85 ff\n75 df\n45 31 ff\n4c 89 f8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p2357
S'.text:0000000000410440\n.text:0000000000410442\n.text:0000000000410444\n.text:0000000000410446\n.text:0000000000410448\n.text:0000000000410449\n.text:000000000041044c\n.text:000000000041044f\n.text:0000000000410452\n.text:0000000000410455\n.text:0000000000410458\n.text:000000000041045b\n.text:000000000041045d\n.text:0000000000410461\n.text:0000000000410470\n.text:0000000000410473\n.text:0000000000410476\n.text:0000000000410479\n.text:000000000041047e\n.text:0000000000410480\n.text:0000000000410482\n.text:0000000000410485\n.text:0000000000410489\n.text:000000000041048c\n.text:000000000041048f\n.text:0000000000410491\n.text:0000000000410494\n.text:0000000000410497\n.text:0000000000410498\n.text:000000000041049a\n.text:000000000041049c\n.text:000000000041049e\n.text:00000000004104a0\n'
p2358
tp2359
sS'hash_do_for_each'
p2360
(S'\n__stdcall hash_do_for_each(Hash_table * table, Hash_processor * processor, void * processor_data)\n'
p2361
V\u000asize_t hash_do_for_each(Hash_table *table,_Bool (*processor)(void *,void *),void *processor_data)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  _Bool _Var2;\u000a  size_t sVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar4 = table->bucket;\u000a  if (phVar4 < table->bucket_limit) {\u000a    sVar3 = 0;\u000a    do {\u000a      phVar1 = phVar4;\u000a      if (phVar4->data != (void *)0x0) {\u000a        while (phVar1 != (hash_entry *)0x0) {\u000a          _Var2 = (*processor)(phVar1->data,processor_data);\u000a          if (_Var2 == false) {\u000a            return sVar3;\u000a          }\u000a          sVar3 = sVar3 + 1;\u000a          phVar1 = phVar1->next;\u000a        }\u000a      }\u000a      phVar4 = phVar4 + 1;\u000a    } while (phVar4 < table->bucket_limit);\u000a  }\u000a  else {\u000a    sVar3 = 0;\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p2362
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R15,RSI\nMOV R12,RDI\nMOV R13,qword ptr [R12]\nCMP R13,qword ptr [R12 + 0x8]\nJNC 0x00409957\nXOR EBX,EBX\nCMP qword ptr [R13],0x0\nJZ 0x0040994a\nTEST R13,R13\nJZ 0x0040994a\nMOV RBP,R13\nMOV RDI,qword ptr [RBP]\nMOV RSI,R14\nCALL R15\nTEST AL,AL\nJZ 0x00409959\nINC RBX\nMOV RBP,qword ptr [RBP + 0x8]\nTEST RBP,RBP\nJNZ 0x00409930\nADD R13,0x10\nCMP R13,qword ptr [R12 + 0x8]\nJC 0x00409921\nJMP 0x00409959\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2363
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f7\n49 89 fc\n4d 8b 2c 24\n4d 3b 6c 24 08\n73 38\n31 db\n49 83 7d 00 00\n74 22\n4d 85 ed\n74 1d\n4c 89 ed\n48 8b 7d 00\n4c 89 f6\n41 ff d7\n84 c0\n74 1b\n48 ff c3\n48 8b 6d 08\n48 85 ed\n75 e6\n49 83 c5 10\n4d 3b 6c 24 08\n72 cc\neb 02\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2364
S'.text:0000000000409900\n.text:0000000000409901\n.text:0000000000409903\n.text:0000000000409905\n.text:0000000000409907\n.text:0000000000409909\n.text:000000000040990a\n.text:000000000040990b\n.text:000000000040990e\n.text:0000000000409911\n.text:0000000000409914\n.text:0000000000409918\n.text:000000000040991d\n.text:000000000040991f\n.text:0000000000409921\n.text:0000000000409926\n.text:0000000000409928\n.text:000000000040992b\n.text:000000000040992d\n.text:0000000000409930\n.text:0000000000409934\n.text:0000000000409937\n.text:000000000040993a\n.text:000000000040993c\n.text:000000000040993e\n.text:0000000000409941\n.text:0000000000409945\n.text:0000000000409948\n.text:000000000040994a\n.text:000000000040994e\n.text:0000000000409953\n.text:0000000000409955\n.text:0000000000409957\n.text:0000000000409959\n.text:000000000040995c\n.text:0000000000409960\n.text:0000000000409961\n.text:0000000000409963\n.text:0000000000409965\n.text:0000000000409967\n.text:0000000000409969\n.text:000000000040996a\n'
p2365
tp2366
sS'usage'
p2367
(S'\n__stdcall usage()\n'
p2368
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,\u000a                      "Usage: %s [OPTION]... [-T] SOURCE DEST\u005cn  or:  %s [OPTION]... SOURCE... DIRECTORY\u005cn  or:  %s [OPTION]... -t DIRECTORY SOURCE...\u005cn"\u000a                      ,5);\u000a    __printf_chk(1,uVar1,program_name,program_name,program_name);\u000a    __s = (char *)dcgettext(0,"Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_mandatory_arg_note();\u000a    __s = (char *)dcgettext(0,\u000a                            "      --backup[=CONTROL]       make a backup of each existing destination file\u005cn  -b                           like --backup but does not accept an argument\u005cn  -f, --force                  do not prompt before overwriting\u005cn  -i, --interactive            prompt before overwrite\u005cn  -n, --no-clobber             do not overwrite an existing file\u005cnIf you specify more than one of -i, -f, -n, only the final one takes effect.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --strip-trailing-slashes  remove any trailing slashes from each SOURCE\u005cn                                 argument\u005cn  -S, --suffix=SUFFIX          override the usual backup suffix\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -t, --target-directory=DIRECTORY  move all SOURCE arguments into DIRECTORY\u005cn  -T, --no-target-directory    treat DEST as a normal file\u005cn  -u, --update                 move only when the SOURCE file is newer\u005cn                                 than the destination file or when the\u005cn                                 destination file is missing\u005cn  -v, --verbose                explain what is being done\u005cn  -Z, --context                set SELinux security context of destination\u005cn                                 file to default type\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnThe backup suffix is \u005c'~\u005c', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.\u005cnThe version control method may be selected via the --backup option or through\u005cnthe VERSION_CONTROL environment variable.  Here are the values:\u005cn\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  none, off       never make backups (even if --backup is given)\u005cn  numbered, t     make numbered backups\u005cn  existing, nil   numbered if numbered backups exist, simple otherwise\u005cn  simple, never   always make simple backups\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p2369
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x004029ec\nXOR EDI,EDI\nMOV ESI,0x411810\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nMOV RDX,qword ptr [0x006198d0]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nMOV RCX,RDX\nMOV R8,RDX\nCALL 0x00402600\nXOR EDI,EDI\nMOV ESI,0x41188f\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x00619428]\nMOV RDI,RAX\nCALL 0x00402440\nCALL 0x00402a40\nXOR EDI,EDI\nMOV ESI,0x4118c7\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x00619428]\nMOV RDI,RAX\nCALL 0x00402440\nXOR EDI,EDI\nMOV ESI,0x411a69\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x00619428]\nMOV RDI,RAX\nCALL 0x00402440\nXOR EDI,EDI\nMOV ESI,0x411b21\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x00619428]\nMOV RDI,RAX\nCALL 0x00402440\nXOR EDI,EDI\nMOV ESI,0x411d30\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x00619428]\nMOV RDI,RAX\nCALL 0x00402440\nXOR EDI,EDI\nMOV ESI,0x411d5d\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x00619428]\nMOV RDI,RAX\nCALL 0x00402440\nXOR EDI,EDI\nMOV ESI,0x411d93\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x00619428]\nMOV RDI,RAX\nCALL 0x00402440\nXOR EDI,EDI\nMOV ESI,0x411e70\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x00619428]\nMOV RDI,RAX\nCALL 0x00402440\nCALL 0x00402a70\nMOV EDI,EBX\nCALL 0x00402720\nCALL 0x00402a00\nMOV EDI,EBX\nCALL 0x00402720\n'
p2370
S'53\n89 fb\n85 db\n0f 85 41 01 00 00\n31 ff\nbe 10 18 41 00\nba 05 00 00 00\ne8 b4 f9 ff ff\n48 89 c1\n48 8b 15 0a 70 21 00\nbf 01 00 00 00\n31 c0\n48 89 ce\n48 89 d1\n49 89 d0\ne8 25 fd ff ff\n31 ff\nbe 8f 18 41 00\nba 05 00 00 00\ne8 84 f9 ff ff\n48 8b 35 35 6b 21 00\n48 89 c7\ne8 45 fb ff ff\ne8 40 01 00 00\n31 ff\nbe c7 18 41 00\nba 05 00 00 00\ne8 5f f9 ff ff\n48 8b 35 10 6b 21 00\n48 89 c7\ne8 20 fb ff ff\n31 ff\nbe 69 1a 41 00\nba 05 00 00 00\ne8 3f f9 ff ff\n48 8b 35 f0 6a 21 00\n48 89 c7\ne8 00 fb ff ff\n31 ff\nbe 21 1b 41 00\nba 05 00 00 00\ne8 1f f9 ff ff\n48 8b 35 d0 6a 21 00\n48 89 c7\ne8 e0 fa ff ff\n31 ff\nbe 30 1d 41 00\nba 05 00 00 00\ne8 ff f8 ff ff\n48 8b 35 b0 6a 21 00\n48 89 c7\ne8 c0 fa ff ff\n31 ff\nbe 5d 1d 41 00\nba 05 00 00 00\ne8 df f8 ff ff\n48 8b 35 90 6a 21 00\n48 89 c7\ne8 a0 fa ff ff\n31 ff\nbe 93 1d 41 00\nba 05 00 00 00\ne8 bf f8 ff ff\n48 8b 35 70 6a 21 00\n48 89 c7\ne8 80 fa ff ff\n31 ff\nbe 70 1e 41 00\nba 05 00 00 00\ne8 9f f8 ff ff\n48 8b 35 50 6a 21 00\n48 89 c7\ne8 60 fa ff ff\ne8 8b 00 00 00\n89 df\ne8 34 fd ff ff\ne8 0f 00 00 00\n89 df\ne8 28 fd ff ff\n'
p2371
S'.text:00000000004028a0\n.text:00000000004028a1\n.text:00000000004028a3\n.text:00000000004028a5\n.text:00000000004028ab\n.text:00000000004028ad\n.text:00000000004028b2\n.text:00000000004028b7\n.text:00000000004028bc\n.text:00000000004028bf\n.text:00000000004028c6\n.text:00000000004028cb\n.text:00000000004028cd\n.text:00000000004028d0\n.text:00000000004028d3\n.text:00000000004028d6\n.text:00000000004028db\n.text:00000000004028dd\n.text:00000000004028e2\n.text:00000000004028e7\n.text:00000000004028ec\n.text:00000000004028f3\n.text:00000000004028f6\n.text:00000000004028fb\n.text:0000000000402900\n.text:0000000000402902\n.text:0000000000402907\n.text:000000000040290c\n.text:0000000000402911\n.text:0000000000402918\n.text:000000000040291b\n.text:0000000000402920\n.text:0000000000402922\n.text:0000000000402927\n.text:000000000040292c\n.text:0000000000402931\n.text:0000000000402938\n.text:000000000040293b\n.text:0000000000402940\n.text:0000000000402942\n.text:0000000000402947\n.text:000000000040294c\n.text:0000000000402951\n.text:0000000000402958\n.text:000000000040295b\n.text:0000000000402960\n.text:0000000000402962\n.text:0000000000402967\n.text:000000000040296c\n.text:0000000000402971\n.text:0000000000402978\n.text:000000000040297b\n.text:0000000000402980\n.text:0000000000402982\n.text:0000000000402987\n.text:000000000040298c\n.text:0000000000402991\n.text:0000000000402998\n.text:000000000040299b\n.text:00000000004029a0\n.text:00000000004029a2\n.text:00000000004029a7\n.text:00000000004029ac\n.text:00000000004029b1\n.text:00000000004029b8\n.text:00000000004029bb\n.text:00000000004029c0\n.text:00000000004029c2\n.text:00000000004029c7\n.text:00000000004029cc\n.text:00000000004029d1\n.text:00000000004029d8\n.text:00000000004029db\n.text:00000000004029e0\n.text:00000000004029e5\n.text:00000000004029e7\n.text:00000000004029ec\n.text:00000000004029f1\n.text:00000000004029f3\n'
p2372
tp2373
sS'get_stat_ctime_ns'
p2374
(S'\n__stdcall get_stat_ctime_ns(stat * st)\n'
p2375
V\u000along get_stat_ctime_ns(stat *st)\u000a\u000a{\u000a  return (st->st_ctim).tv_nsec;\u000a}\u000a\u000a
p2376
S'MOV RAX,qword ptr [RDI + 0x70]\nRET\n'
p2377
S'48 8b 47 70\nc3\n'
p2378
S'.text:000000000040c680\n.text:000000000040c684\n'
p2379
tp2380
sS'quoting_options_from_style'
p2381
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p2382
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p2383
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x0040b90d\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x004020f0\n'
p2384
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 de 67 ff ff\n'
p2385
S'.text:000000000040b8c0\n.text:000000000040b8c4\n.text:000000000040b8c7\n.text:000000000040b8cc\n.text:000000000040b8d1\n.text:000000000040b8d5\n.text:000000000040b8dd\n.text:000000000040b8e0\n.text:000000000040b8e2\n.text:000000000040b8e4\n.text:000000000040b8e8\n.text:000000000040b8eb\n.text:000000000040b8ef\n.text:000000000040b8f4\n.text:000000000040b8f9\n.text:000000000040b8fd\n.text:000000000040b901\n.text:000000000040b905\n.text:000000000040b908\n.text:000000000040b90c\n.text:000000000040b90d\n'
p2386
tp2387
sS'strcpy'
p2388
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p2389
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_00619060)();\u000a  return pcVar1;\u000a}\u000a\u000a
p2390
S'JMP qword ptr [0x00619060]\n'
p2391
S'ff 25 1a 6f 21 00\n'
p2392
S'.plt:0000000000402140\n'
p2393
tp2394
sS'triple_hash_no_name'
p2395
(S'\n__stdcall triple_hash_no_name(void * x, size_t table_size)\n'
p2396
V\u000asize_t triple_hash_no_name(void *x,size_t table_size)\u000a\u000a{\u000a  return *(ulong *)((long)x + 8) % table_size;\u000a}\u000a\u000a
p2397
S'MOV RAX,qword ptr [RDI + 0x8]\nXOR EDX,EDX\nDIV RSI\nMOV RAX,RDX\nRET\n'
p2398
S'48 8b 47 08\n31 d2\n48 f7 f6\n48 89 d0\nc3\n'
p2399
S'.text:000000000040a580\n.text:000000000040a584\n.text:000000000040a586\n.text:000000000040a589\n.text:000000000040a58c\n'
p2400
tp2401
sS'rotl8'
p2402
(S'\n__stdcall rotl8()\n'
p2403
V\u000auint8_t rotl8(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint8_t)((byte)(in_EDI >> (8 - (byte)in_ESI & 0x1f)) |\u000a                  (byte)(in_EDI << ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p2404
S'MOV EAX,EDI\nMOV ECX,ESI\nSHL EAX,CL\nMOV ECX,0x8\nSUB ECX,ESI\nSHR EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p2405
S'89 f8\n89 f1\nd3 e0\nb9 08 00 00 00\n29 f1\nd3 ef\n09 c7\n89 f8\nc3\n'
p2406
S'.text:0000000000410550\n.text:0000000000410552\n.text:0000000000410554\n.text:0000000000410556\n.text:000000000041055b\n.text:000000000041055d\n.text:000000000041055f\n.text:0000000000410561\n.text:0000000000410563\n'
p2407
tp2408
sS'target_directory_operand'
p2409
(S'\n__stdcall target_directory_operand(char * file)\n'
p2410
V\u000a_Bool target_directory_operand(char *file)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  stat st;\u000a  stat local_b0;\u000a  \u000a  iVar2 = stat(file,&local_b0);\u000a  if (iVar2 != 0) {\u000a    puVar3 = (uint *)__errno_location();\u000a    uVar1 = *puVar3;\u000a    if (uVar1 == 2) {\u000a      return false;\u000a    }\u000a    if (uVar1 != 0) {\u000a      uVar4 = dcgettext(0,"failed to access %s",5);\u000a      pcVar5 = quotearg_style((char *)0x4);\u000a      error(1,(ulong)uVar1,uVar4,pcVar5);\u000a      return false;\u000a    }\u000a  }\u000a  return (_Bool)((local_b0.st_mode & 0xf000) == 0x4000);\u000a}\u000a\u000a
p2411
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x98\nMOV RBX,RDI\nLEA RSI,[RSP + 0x8]\nCALL 0x004113e0\nTEST EAX,EAX\nJZ 0x004031ce\nCALL 0x00402100\nMOV EBP,dword ptr [RAX]\nCMP EBP,0x2\nJZ 0x004031e2\nTEST EBP,EBP\nJNZ 0x004031e7\nMOV EAX,0xf000\nAND EAX,dword ptr [RSP + 0x20]\nCMP EAX,0x4000\nSETZ R14B\nJMP 0x0040321f\nXOR R14D,R14D\nJMP 0x0040321f\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x411fb1\nMOV EDX,0x5\nCALL 0x00402270\nMOV R15,RAX\nMOV EDI,0x4\nMOV RSI,RBX\nCALL 0x0040b960\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,R15\nCALL 0x00402640\nMOV EAX,R14D\nADD RSP,0x98\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2412
S'55\n41 57\n41 56\n53\n48 81 ec 98 00 00 00\n48 89 fb\n48 8d 74 24 08\ne8 26 e2 00 00\n85 c0\n74 10\ne8 3d ef ff ff\n8b 28\n83 fd 02\n74 18\n85 ed\n75 19\nb8 00 f0 00 00\n23 44 24 20\n3d 00 40 00 00\n41 0f 94 c6\neb 3d\n45 31 f6\neb 38\n45 31 f6\n31 ff\nbe b1 1f 41 00\nba 05 00 00 00\ne8 75 f0 ff ff\n49 89 c7\nbf 04 00 00 00\n48 89 de\ne8 55 87 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 ee\n4c 89 fa\ne8 21 f4 ff ff\n44 89 f0\n48 81 c4 98 00 00 00\n5b\n41 5e\n41 5f\n5d\nc3\n'
p2413
S'.text:00000000004031a0\n.text:00000000004031a1\n.text:00000000004031a3\n.text:00000000004031a5\n.text:00000000004031a6\n.text:00000000004031ad\n.text:00000000004031b0\n.text:00000000004031b5\n.text:00000000004031ba\n.text:00000000004031bc\n.text:00000000004031be\n.text:00000000004031c3\n.text:00000000004031c5\n.text:00000000004031c8\n.text:00000000004031ca\n.text:00000000004031cc\n.text:00000000004031ce\n.text:00000000004031d3\n.text:00000000004031d7\n.text:00000000004031dc\n.text:00000000004031e0\n.text:00000000004031e2\n.text:00000000004031e5\n.text:00000000004031e7\n.text:00000000004031ea\n.text:00000000004031ec\n.text:00000000004031f1\n.text:00000000004031f6\n.text:00000000004031fb\n.text:00000000004031fe\n.text:0000000000403203\n.text:0000000000403206\n.text:000000000040320b\n.text:000000000040320e\n.text:0000000000403213\n.text:0000000000403215\n.text:0000000000403217\n.text:000000000040321a\n.text:000000000040321f\n.text:0000000000403222\n.text:0000000000403229\n.text:000000000040322a\n.text:000000000040322c\n.text:000000000040322e\n.text:000000000040322f\n'
p2414
tp2415
sS'lstatat'
p2416
(S'\n__stdcall lstatat(char * name, stat * st)\n'
p2417
V\u000aint lstatat(char *name,stat *st)\u000a\u000a{\u000a  int iVar1;\u000a  stat *__buf;\u000a  \u000a  iVar1 = fstatat((int)name,(char *)st,__buf,0x100);\u000a  return iVar1;\u000a}\u000a\u000a
p2418
S'MOV ECX,0x100\nJMP 0x00411410\n'
p2419
S'b9 00 01 00 00\ne9 06 4d 00 00\n'
p2420
S'.text:000000000040c700\n.text:000000000040c705\n'
p2421
tp2422
sS'chmod_or_fchmod'
p2423
(S'\n__stdcall chmod_or_fchmod(char * name)\n'
p2424
V\u000aint chmod_or_fchmod(char *name)\u000a\u000a{\u000a  int iVar1;\u000a  uint __mode;\u000a  uint in_ESI;\u000a  \u000a  if (in_ESI != 0xffffffff) {\u000a    iVar1 = (*(code *)PTR_fchmod_006192c8)((ulong)in_ESI,(ulong)__mode);\u000a    return iVar1;\u000a  }\u000a  iVar1 = chmod(name,__mode);\u000a  return iVar1;\u000a}\u000a\u000a
p2425
S'CMP ESI,-0x1\nJZ 0x0041012e\nMOV EDI,ESI\nMOV ESI,EDX\nJMP 0x00402610\nMOV ESI,EDX\nJMP 0x00402620\n'
p2426
S'83 fe ff\n74 09\n89 f7\n89 d6\ne9 e2 24 ff ff\n89 d6\ne9 eb 24 ff ff\n'
p2427
S'.text:0000000000410120\n.text:0000000000410123\n.text:0000000000410125\n.text:0000000000410127\n.text:0000000000410129\n.text:000000000041012e\n.text:0000000000410130\n'
p2428
tp2429
sS'i_ring_pop'
p2430
(S'\n__stdcall i_ring_pop(I_ring * ir)\n'
p2431
V\u000aint i_ring_pop(I_ring *ir)\u000a\u000a{\u000a  int iVar1;\u000a  _Bool _Var2;\u000a  \u000a  _Var2 = i_ring_empty(ir);\u000a  if (_Var2 != false) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = ir->ir_data[(ulong)ir->ir_front];\u000a  ir->ir_data[(ulong)ir->ir_front] = ir->ir_default_val;\u000a  if (ir->ir_front == ir->ir_back) {\u000a    ir->ir_empty = true;\u000a    return iVar1;\u000a  }\u000a  ir->ir_front = ir->ir_front + 3 & 3;\u000a  return iVar1;\u000a}\u000a\u000a
p2432
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00410900\nTEST AL,AL\nJNZ 0x00410982\nMOV ECX,dword ptr [RBX + 0x10]\nMOV EDX,dword ptr [RBX + 0x14]\nMOV EAX,dword ptr [RBX + RDX*0x4]\nMOV dword ptr [RBX + RDX*0x4],ECX\nMOV ECX,dword ptr [RBX + 0x14]\nCMP ECX,dword ptr [RBX + 0x18]\nJNZ 0x00410977\nMOV byte ptr [RBX + 0x1c],0x1\nPOP RBX\nRET\nADD ECX,0x3\nAND ECX,0x3\nMOV dword ptr [RBX + 0x14],ECX\nPOP RBX\nRET\nCALL 0x004020f0\n'
p2433
S'53\n48 89 fb\ne8 a7 ff ff ff\n84 c0\n75 25\n8b 4b 10\n8b 53 14\n8b 04 93\n89 0c 93\n8b 4b 14\n3b 4b 18\n75 06\nc6 43 1c 01\n5b\nc3\n83 c1 03\n83 e1 03\n89 4b 14\n5b\nc3\ne8 69 17 ff ff\n'
p2434
S'.text:0000000000410950\n.text:0000000000410951\n.text:0000000000410954\n.text:0000000000410959\n.text:000000000041095b\n.text:000000000041095d\n.text:0000000000410960\n.text:0000000000410963\n.text:0000000000410966\n.text:0000000000410969\n.text:000000000041096c\n.text:000000000041096f\n.text:0000000000410971\n.text:0000000000410975\n.text:0000000000410976\n.text:0000000000410977\n.text:000000000041097a\n.text:000000000041097d\n.text:0000000000410980\n.text:0000000000410981\n.text:0000000000410982\n'
p2435
tp2436
sS'utimens'
p2437
(S'\n__stdcall utimens(char * file, timespec * timespec)\n'
p2438
V\u000aint utimens(char *file,timespec *timespec)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = fdutimens((char *)0xffffffff,(timespec *)file);\u000a  return iVar1;\u000a}\u000a\u000a
p2439
S'MOV RAX,RSI\nMOV RCX,RDI\nMOV EDI,0xffffffff\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x0040cd30\n'
p2440
S'48 89 f0\n48 89 f9\nbf ff ff ff ff\n48 89 ce\n48 89 c2\ne9 fa fa ff ff\n'
p2441
S'.text:000000000040d220\n.text:000000000040d223\n.text:000000000040d226\n.text:000000000040d22b\n.text:000000000040d22e\n.text:000000000040d231\n'
p2442
tp2443
sS'is_zero_or_power_of_two'
p2444
(S'\n__stdcall is_zero_or_power_of_two(uintmax_t i)\n'
p2445
V\u000a_Bool is_zero_or_power_of_two(uintmax_t i)\u000a\u000a{\u000a  return (_Bool)((i - 1 & i) == 0);\u000a}\u000a\u000a
p2446
S'LEA RAX,[RDI + -0x1]\nTEST RAX,RDI\nSETZ AL\nRET\n'
p2447
S'48 8d 47 ff\n48 85 f8\n0f 94 c0\nc3\n'
p2448
S'.text:0000000000410850\n.text:0000000000410854\n.text:0000000000410857\n.text:000000000041085a\n'
p2449
tp2450
sS'punch_hole'
p2451
(S'\n__stdcall punch_hole(off_t offset, off_t length)\n'
p2452
V\u000aint punch_hole(off_t offset,off_t length)\u000a\u000a{\u000a  int iVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  int *piVar4;\u000a  __off_t __len;\u000a  \u000a  iVar3 = fallocate((int)offset,3,length,__len);\u000a  if (iVar3 < 0) {\u000a    piVar4 = __errno_location();\u000a    iVar1 = *piVar4;\u000a    _Var2 = is_ENOTSUP();\u000a    if (iVar1 == 0x26) {\u000a      iVar3 = 0;\u000a    }\u000a    if (_Var2 != false) {\u000a      iVar3 = 0;\u000a    }\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p2453
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RAX,RDX\nMOV RCX,RSI\nMOV ESI,0x3\nMOV RDX,RCX\nMOV RCX,RAX\nCALL 0x00402430\nMOV EBX,EAX\nTEST EBX,EBX\nJNS 0x0040816a\nCALL 0x00402100\nMOV EBP,dword ptr [RAX]\nMOV EDI,EBP\nCALL 0x00408180\nXOR ECX,ECX\nCMP EBP,0x26\nCMOVZ EBX,ECX\nTEST AL,AL\nCMOVNZ EBX,ECX\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p2454
S'55\n53\n50\n48 89 d0\n48 89 f1\nbe 03 00 00 00\n48 89 ca\n48 89 c1\ne8 e7 a2 ff ff\n89 c3\n85 db\n79 1b\ne8 ac 9f ff ff\n8b 28\n89 ef\ne8 23 00 00 00\n31 c9\n83 fd 26\n0f 44 d9\n84 c0\n0f 45 d9\n89 d8\n48 83 c4 08\n5b\n5d\nc3\n'
p2455
S'.text:0000000000408130\n.text:0000000000408131\n.text:0000000000408132\n.text:0000000000408133\n.text:0000000000408136\n.text:0000000000408139\n.text:000000000040813e\n.text:0000000000408141\n.text:0000000000408144\n.text:0000000000408149\n.text:000000000040814b\n.text:000000000040814d\n.text:000000000040814f\n.text:0000000000408154\n.text:0000000000408156\n.text:0000000000408158\n.text:000000000040815d\n.text:000000000040815f\n.text:0000000000408162\n.text:0000000000408165\n.text:0000000000408167\n.text:000000000040816a\n.text:000000000040816c\n.text:0000000000408170\n.text:0000000000408171\n.text:0000000000408172\n'
p2456
tp2457
sS'FUN_004020a0'
p2458
(S'\n__stdcall FUN_004020a0()\n'
p2459
V\u000avoid FUN_004020a0(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_00619010)();\u000a  return;\u000a}\u000a\u000a
p2460
S'PUSH qword ptr [0x00619008]\nJMP qword ptr [0x00619010]\n'
p2461
S'ff 35 62 6f 21 00\nff 25 64 6f 21 00\n'
p2462
S'.plt:00000000004020a0\n.plt:00000000004020a6\n'
p2463
tp2464
sS'textdomain'
p2465
(S'\n__stdcall textdomain()\n'
p2466
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_006190c0)();\u000a  return;\u000a}\u000a\u000a
p2467
S'JMP qword ptr [0x006190c0]\n'
p2468
S'ff 25 ba 6e 21 00\n'
p2469
S'.plt:0000000000402200\n'
p2470
tp2471
sS'getpagesize'
p2472
(S'\n__stdcall getpagesize()\n'
p2473
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getpagesize(void)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getpagesize_00619348)();\u000a  return iVar1;\u000a}\u000a\u000a
p2474
S'JMP qword ptr [0x00619348]\n'
p2475
S'ff 25 32 6c 21 00\n'
p2476
S'.plt:0000000000402710\n'
p2477
tp2478
sS'setup_dir'
p2479
(S'\n__stdcall setup_dir(FTS * fts)\n'
p2480
V\u000a_Bool setup_dir(FTS *fts)\u000a\u000a{\u000a  Hash_table *pHVar1;\u000a  cycle_check_state *state;\u000a  \u000a  if ((*(ushort *)&fts->fts_options & 0x102) == 0) {\u000a    state = (cycle_check_state *)malloc(0x20);\u000a    *(cycle_check_state **)&fts->fts_cycle = state;\u000a    if (state == (cycle_check_state *)0x0) {\u000a      return false;\u000a    }\u000a    cycle_check_init(state);\u000a  }\u000a  else {\u000a    pHVar1 = hash_initialize(0x1f,(Hash_tuning *)0x0,AD_hash,AD_compare,free);\u000a    *(Hash_table **)&fts->fts_cycle = pHVar1;\u000a    if (pHVar1 == (Hash_table *)0x0) {\u000a      return false;\u000a    }\u000a  }\u000a  return true;\u000a}\u000a\u000a
p2481
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOVZX EAX,word ptr [RBX + 0x48]\nTEST AX,0x102\nJZ 0x0040e64b\nXOR R14D,R14D\nMOV EDI,0x1f\nXOR ESI,ESI\nMOV EDX,0x40fb70\nMOV ECX,0x40fb80\nMOV R8D,0x4020c0\nCALL 0x004099d0\nMOV qword ptr [RBX + 0x58],RAX\nTEST RAX,RAX\nJNZ 0x0040e666\nJMP 0x0040e669\nMOV EDI,0x20\nCALL 0x00402540\nMOV qword ptr [RBX + 0x58],RAX\nTEST RAX,RAX\nJZ 0x0040e674\nMOV RDI,RAX\nCALL 0x004107c0\nMOV R14B,0x1\nMOV EAX,R14D\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nXOR R14D,R14D\nJMP 0x0040e669\n'
p2482
S'41 56\n53\n50\n48 89 fb\n0f b7 43 48\n66 a9 02 01\n74 2a\n45 31 f6\nbf 1f 00 00 00\n31 f6\nba 70 fb 40 00\nb9 80 fb 40 00\n41 b8 c0 20 40 00\ne8 90 b3 ff ff\n48 89 43 58\n48 85 c0\n75 1d\neb 1e\nbf 20 00 00 00\ne8 eb 3e ff ff\n48 89 43 58\n48 85 c0\n74 16\n48 89 c7\ne8 5a 21 00 00\n41 b6 01\n44 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n45 31 f6\neb f0\n'
p2483
S'.text:000000000040e610\n.text:000000000040e612\n.text:000000000040e613\n.text:000000000040e614\n.text:000000000040e617\n.text:000000000040e61b\n.text:000000000040e61f\n.text:000000000040e621\n.text:000000000040e624\n.text:000000000040e629\n.text:000000000040e62b\n.text:000000000040e630\n.text:000000000040e635\n.text:000000000040e63b\n.text:000000000040e640\n.text:000000000040e644\n.text:000000000040e647\n.text:000000000040e649\n.text:000000000040e64b\n.text:000000000040e650\n.text:000000000040e655\n.text:000000000040e659\n.text:000000000040e65c\n.text:000000000040e65e\n.text:000000000040e661\n.text:000000000040e666\n.text:000000000040e669\n.text:000000000040e66c\n.text:000000000040e670\n.text:000000000040e671\n.text:000000000040e673\n.text:000000000040e674\n.text:000000000040e677\n'
p2484
tp2485
sS'ferror_unlocked'
p2486
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p2487
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_006191f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p2488
S'JMP qword ptr [0x006191f0]\n'
p2489
S'ff 25 8a 6d 21 00\n'
p2490
S'.plt:0000000000402460\n'
p2491
tp2492
sS'locale_charset'
p2493
(S'\n__stdcall locale_charset()\n'
p2494
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_00410a0d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_00410a0d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p2495
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00402560\nTEST RAX,RAX\nMOV R14D,0x413b59\nCMOVNZ R14,RAX\nCALL 0x00410a20\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x004109e5\nJMP 0x00410a0d\nMOV RDI,RBX\nCALL 0x00402290\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00402290\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x00410a0d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00402480\nTEST EAX,EAX\nJZ 0x00410a00\nCMP BPL,0x2a\nJNZ 0x004109c0\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x004109c0\nMOV RDI,RBX\nCALL 0x00402290\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x414300\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p2496
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 c2 1b ff ff\n48 85 c0\n41 be 59 3b 41 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 c8 18 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 ba 18 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 90 1a ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 88 18 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 00 43 41 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p2497
S'.text:0000000000410990\n.text:0000000000410991\n.text:0000000000410993\n.text:0000000000410994\n.text:0000000000410999\n.text:000000000041099e\n.text:00000000004109a1\n.text:00000000004109a7\n.text:00000000004109ab\n.text:00000000004109b0\n.text:00000000004109b3\n.text:00000000004109b6\n.text:00000000004109b9\n.text:00000000004109bb\n.text:00000000004109c0\n.text:00000000004109c3\n.text:00000000004109c8\n.text:00000000004109cc\n.text:00000000004109d1\n.text:00000000004109d6\n.text:00000000004109db\n.text:00000000004109e0\n.text:00000000004109e3\n.text:00000000004109e5\n.text:00000000004109e8\n.text:00000000004109eb\n.text:00000000004109f0\n.text:00000000004109f2\n.text:00000000004109f4\n.text:00000000004109f8\n.text:00000000004109fa\n.text:00000000004109fe\n.text:0000000000410a00\n.text:0000000000410a03\n.text:0000000000410a08\n.text:0000000000410a0d\n.text:0000000000410a11\n.text:0000000000410a16\n.text:0000000000410a1a\n.text:0000000000410a1b\n.text:0000000000410a1d\n.text:0000000000410a1e\n'
p2498
tp2499
sS'set_program_name'
p2500
(S'\n__stdcall set_program_name(char * argv0)\n'
p2501
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p2502
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0040a6b1\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00402310\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x0040a69b\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x4134a8\nMOV EDX,0x7\nCALL 0x00402120\nTEST EAX,EAX\nJNZ 0x0040a69b\nMOV ESI,0x4134b0\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00402120\nTEST EAX,EAX\nJNZ 0x0040a698\nADD R14,0x3\nMOV qword ptr [0x00619420],R14\nMOV RBX,R14\nMOV qword ptr [0x006198d0],RBX\nMOV qword ptr [0x00619448],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x00619460]\nMOV EDI,0x413470\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00402730\nCALL 0x004020f0\n'
p2503
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 c7 7c ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe a8 34 41 00\nba 07 00 00 00\ne8 ad 7a ff ff\n85 c0\n75 24\nbe b0 34 41 00\nba 03 00 00 00\n4c 89 f7\ne8 97 7a ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 88 ed 20 00\n4c 89 f3\n48 89 1d 2e f2 20 00\n48 89 1d 9f ed 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d a8 ed 20 00\nbf 70 34 41 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 64 80 ff ff\ne8 1f 7a ff ff\n'
p2504
S'.text:000000000040a630\n.text:000000000040a632\n.text:000000000040a633\n.text:000000000040a634\n.text:000000000040a637\n.text:000000000040a63a\n.text:000000000040a63c\n.text:000000000040a641\n.text:000000000040a644\n.text:000000000040a649\n.text:000000000040a64c\n.text:000000000040a650\n.text:000000000040a654\n.text:000000000040a657\n.text:000000000040a65a\n.text:000000000040a65e\n.text:000000000040a660\n.text:000000000040a664\n.text:000000000040a669\n.text:000000000040a66e\n.text:000000000040a673\n.text:000000000040a675\n.text:000000000040a677\n.text:000000000040a67c\n.text:000000000040a681\n.text:000000000040a684\n.text:000000000040a689\n.text:000000000040a68b\n.text:000000000040a68d\n.text:000000000040a691\n.text:000000000040a698\n.text:000000000040a69b\n.text:000000000040a6a2\n.text:000000000040a6a9\n.text:000000000040a6ad\n.text:000000000040a6ae\n.text:000000000040a6b0\n.text:000000000040a6b1\n.text:000000000040a6b8\n.text:000000000040a6bd\n.text:000000000040a6c2\n.text:000000000040a6c7\n.text:000000000040a6cc\n'
p2505
tp2506
sS'strspn'
p2507
(S'\n__stdcall strspn(char * __s, char * __accept)\n'
p2508
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strspn(char *__s,char *__accept)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strspn_006191a8)();\u000a  return sVar1;\u000a}\u000a\u000a
p2509
S'JMP qword ptr [0x006191a8]\n'
p2510
S'ff 25 d2 6d 21 00\n'
p2511
S'.plt:00000000004023d0\n'
p2512
tp2513
sS'canonicalize_file_name'
p2514
(S'\n__stdcall canonicalize_file_name(char * __name)\n'
p2515
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * canonicalize_file_name(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_canonicalize_file_name_00619198)();\u000a  return pcVar1;\u000a}\u000a\u000a
p2516
S'JMP qword ptr [0x00619198]\n'
p2517
S'ff 25 e2 6d 21 00\n'
p2518
S'.plt:00000000004023b0\n'
p2519
tp2520
sS'quotearg_buffer'
p2521
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p2522
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p2523
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x6198e0\nCMOVNZ RBP,R8\nCALL 0x00402100\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x0040a8b0\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2524
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd e0 98 61 00\n49 0f 45 e8\ne8 a8 78 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2525
S'.text:000000000040a830\n.text:000000000040a831\n.text:000000000040a833\n.text:000000000040a835\n.text:000000000040a837\n.text:000000000040a839\n.text:000000000040a83a\n.text:000000000040a83b\n.text:000000000040a83e\n.text:000000000040a841\n.text:000000000040a844\n.text:000000000040a847\n.text:000000000040a84a\n.text:000000000040a84f\n.text:000000000040a853\n.text:000000000040a858\n.text:000000000040a85b\n.text:000000000040a85d\n.text:000000000040a861\n.text:000000000040a865\n.text:000000000040a869\n.text:000000000040a86d\n.text:000000000040a870\n.text:000000000040a873\n.text:000000000040a876\n.text:000000000040a879\n.text:000000000040a87c\n.text:000000000040a87f\n.text:000000000040a883\n.text:000000000040a884\n.text:000000000040a889\n.text:000000000040a88d\n.text:000000000040a891\n.text:000000000040a893\n.text:000000000040a897\n.text:000000000040a898\n.text:000000000040a89a\n.text:000000000040a89c\n.text:000000000040a89e\n.text:000000000040a8a0\n.text:000000000040a8a1\n'
p2526
tp2527
sS'cdb_fchdir'
p2528
(S'\n__stdcall cdb_fchdir(cd_buf * cdb)\n'
p2529
V\u000aint cdb_fchdir(cd_buf *cdb)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = fchdir((int)*cdb);\u000a  return iVar1;\u000a}\u000a\u000a
p2530
S'MOV EDI,dword ptr [RDI]\nJMP 0x004025b0\n'
p2531
S'8b 3f\ne9 49 14 ff ff\n'
p2532
S'.text:0000000000411160\n.text:0000000000411162\n'
p2533
tp2534
sS'get_stat_ctime'
p2535
(S'\n__stdcall get_stat_ctime(stat * st)\n'
p2536
V\u000atimespec get_stat_ctime(stat *st)\u000a\u000a{\u000a  return st->st_ctim;\u000a}\u000a\u000a
p2537
S'MOV RAX,qword ptr [RDI + 0x68]\nMOV RDX,qword ptr [RDI + 0x70]\nRET\n'
p2538
S'48 8b 47 68\n48 8b 57 70\nc3\n'
p2539
S'.text:000000000040c6c0\n.text:000000000040c6c4\n.text:000000000040c6c8\n'
p2540
tp2541
sS'close_stdin'
p2542
(S'\n__stdcall close_stdin()\n'
p2543
V\u000avoid close_stdin(void)\u000a\u000a{\u000a  uint uVar1;\u000a  FILE *fp;\u000a  int iVar2;\u000a  size_t sVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  bool bVar6;\u000a  \u000a  fp = stdin;\u000a  sVar3 = freadahead(stdin);\u000a  bVar6 = false;\u000a  if (sVar3 != 0) {\u000a    iVar2 = rpl_fseeko(fp,0);\u000a    bVar6 = false;\u000a    if (iVar2 == 0) {\u000a      iVar2 = rpl_fflush(stdin);\u000a      bVar6 = iVar2 != 0;\u000a    }\u000a  }\u000a  iVar2 = close_stream(stdin);\u000a  if ((!bVar6) && (iVar2 == 0)) {\u000a    close_stdout();\u000a    return;\u000a  }\u000a  uVar4 = dcgettext(0,"error closing file",5);\u000a  arg = file_name;\u000a  puVar5 = (uint *)__errno_location();\u000a  uVar1 = *puVar5;\u000a  if (arg == (char *)0x0) {\u000a    error(0,(ulong)uVar1,0x412b8a,uVar4);\u000a  }\u000a  else {\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a  }\u000a  close_stdout();\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p2544
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,qword ptr [0x00619430]\nMOV RDI,RBX\nCALL 0x0040de40\nXOR EBP,EBP\nTEST RAX,RAX\nJZ 0x00408d4f\nXOR ESI,ESI\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x0040de70\nTEST EAX,EAX\nJNZ 0x00408d4f\nMOV RDI,qword ptr [0x00619430]\nCALL 0x0040ddf0\nTEST EAX,EAX\nSETNZ BPL\nMOV RDI,qword ptr [0x00619430]\nCALL 0x00410750\nTEST BPL,BPL\nJNZ 0x00408d6d\nTEST EAX,EAX\nJNZ 0x00408d6d\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00408e00\nXOR EDI,EDI\nMOV ESI,0x413298\nMOV EDX,0x5\nCALL 0x00402270\nMOV R14,RAX\nMOV RBX,qword ptr [0x006198b8]\nCALL 0x00402100\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x00408da9\nXOR EDI,EDI\nMOV EDX,0x412b8a\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00402640\nJMP 0x00408dc7\nMOV RDI,RBX\nCALL 0x0040ba20\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x4132ab\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00402640\nCALL 0x00408e00\nMOV EDI,dword ptr [0x006193b8]\nCALL 0x00402130\n'
p2545
S'55\n41 56\n53\n48 8b 1d 15 07 21 00\n48 89 df\ne8 1d 51 00 00\n31 ed\n48 85 c0\n74 25\n31 f6\nba 01 00 00 00\n48 89 df\ne8 37 51 00 00\n85 c0\n75 12\n48 8b 3d ec 06 21 00\ne8 a7 50 00 00\n85 c0\n40 0f 95 c5\n48 8b 3d da 06 21 00\ne8 f5 79 00 00\n40 84 ed\n75 0d\n85 c0\n75 09\n5b\n41 5e\n5d\ne9 93 00 00 00\n31 ff\nbe 98 32 41 00\nba 05 00 00 00\ne8 f2 94 ff ff\n49 89 c6\n48 8b 1d 30 0b 21 00\ne8 73 93 ff ff\n48 85 db\n8b 28\n75 15\n31 ff\nba 8a 2b 41 00\n31 c0\n89 ee\n4c 89 f1\ne8 99 98 ff ff\neb 1e\n48 89 df\ne8 6f 2c 00 00\n48 89 c1\n31 ff\nba ab 32 41 00\n31 c0\n89 ee\n4d 89 f0\ne8 79 98 ff ff\ne8 34 00 00 00\n8b 3d e6 05 21 00\ne8 59 93 ff ff\n'
p2546
S'.text:0000000000408d10\n.text:0000000000408d11\n.text:0000000000408d13\n.text:0000000000408d14\n.text:0000000000408d1b\n.text:0000000000408d1e\n.text:0000000000408d23\n.text:0000000000408d25\n.text:0000000000408d28\n.text:0000000000408d2a\n.text:0000000000408d2c\n.text:0000000000408d31\n.text:0000000000408d34\n.text:0000000000408d39\n.text:0000000000408d3b\n.text:0000000000408d3d\n.text:0000000000408d44\n.text:0000000000408d49\n.text:0000000000408d4b\n.text:0000000000408d4f\n.text:0000000000408d56\n.text:0000000000408d5b\n.text:0000000000408d5e\n.text:0000000000408d60\n.text:0000000000408d62\n.text:0000000000408d64\n.text:0000000000408d65\n.text:0000000000408d67\n.text:0000000000408d68\n.text:0000000000408d6d\n.text:0000000000408d6f\n.text:0000000000408d74\n.text:0000000000408d79\n.text:0000000000408d7e\n.text:0000000000408d81\n.text:0000000000408d88\n.text:0000000000408d8d\n.text:0000000000408d90\n.text:0000000000408d92\n.text:0000000000408d94\n.text:0000000000408d96\n.text:0000000000408d9b\n.text:0000000000408d9d\n.text:0000000000408d9f\n.text:0000000000408da2\n.text:0000000000408da7\n.text:0000000000408da9\n.text:0000000000408dac\n.text:0000000000408db1\n.text:0000000000408db4\n.text:0000000000408db6\n.text:0000000000408dbb\n.text:0000000000408dbd\n.text:0000000000408dbf\n.text:0000000000408dc2\n.text:0000000000408dc7\n.text:0000000000408dcc\n.text:0000000000408dd2\n'
p2547
tp2548
sS'rpl_fflush'
p2549
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p2550
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_00619268)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p2551
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0040de0d\nMOV RDI,RBX\nCALL 0x004025a0\nTEST EAX,EAX\nJZ 0x0040de0d\nMOV RDI,RBX\nCALL 0x0040de20\nMOV RDI,RBX\nPOP RBX\nJMP 0x00402550\n'
p2552
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 9f 47 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 3a 47 ff ff\n'
p2553
S'.text:000000000040ddf0\n.text:000000000040ddf1\n.text:000000000040ddf4\n.text:000000000040ddf7\n.text:000000000040ddf9\n.text:000000000040ddfc\n.text:000000000040de01\n.text:000000000040de03\n.text:000000000040de05\n.text:000000000040de08\n.text:000000000040de0d\n.text:000000000040de10\n.text:000000000040de11\n'
p2554
tp2555
sS'extent_scan_read'
p2556
(S'\n__stdcall extent_scan_read(extent_scan * scan)\n'
p2557
V\u000a_Bool extent_scan_read(extent_scan *scan)\u000a\u000a{\u000a  ulong *puVar1;\u000a  uint uVar2;\u000a  extent_info *p;\u000a  int iVar3;\u000a  uint uVar4;\u000a  extent_info *peVar5;\u000a  ulong uVar6;\u000a  ulong uVar7;\u000a  size_t n;\u000a  long lVar8;\u000a  size_t sVar9;\u000a  extent_info *peVar10;\u000a  ulong local_1030;\u000a  ulong local_1028;\u000a  uint local_1020;\u000a  uint local_101c;\u000a  undefined4 local_1018;\u000a  ulong local_1010 [2];\u000a  long local_1000 [3];\u000a  uint auStack4072 [1006];\u000a  \u000a  peVar10 = scan->ext_info;\u000a  sVar9 = 0;\u000a  while( true ) {\u000a    memset(&local_1030,0,0x1000);\u000a    local_1030 = scan->scan_start;\u000a    local_1020 = scan->fm_flags;\u000a    local_1018 = 0x48;\u000a    local_1028 = ~local_1030;\u000a    iVar3 = ioctl(scan->fd,0xc020660b,&local_1030);\u000a    if (iVar3 < 0) break;\u000a    if (local_101c == 0) {\u000a      scan->hit_final_extent = true;\u000a      return (_Bool)(scan->scan_start != 0);\u000a    }\u000a    if (~(ulong)local_101c < scan->ei_count) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("scan->ei_count <= SIZE_MAX - fiemap->fm_mapped_extents","src/extent-scan.c",\u000a                    0x7e,"_Bool extent_scan_read(struct extent_scan *)");\u000a    }\u000a    n = scan->ei_count + (ulong)local_101c;\u000a    scan->ei_count = n;\u000a    p = scan->ext_info;\u000a    peVar5 = (extent_info *)xnrealloc(p,n,0x18);\u000a    scan->ext_info = peVar5;\u000a    peVar10 = (extent_info *)\u000a              ((long)&peVar5->ext_logical +\u000a              (long)&((extent_info *)((long)peVar10 - (long)p))->ext_logical);\u000a    if (local_101c != 0) {\u000a      uVar4 = 0;\u000a      do {\u000a        uVar6 = (ulong)uVar4;\u000a        if (0x7fffffffffffffffU - local_1000[uVar6 * 7] < local_1010[uVar6 * 7]) {\u000a                    /* WARNING: Subroutine does not return */\u000a          __assert_fail("fm_extents[i].fe_logical <= OFF_T_MAX - fm_extents[i].fe_length",\u000a                        "src/extent-scan.c",0x8d,"_Bool extent_scan_read(struct extent_scan *)");\u000a        }\u000a        puVar1 = local_1010 + uVar6 * 7;\u000a        if ((int)sVar9 == 0) {\u000a          if (*puVar1 <= (ulong)scan->scan_start && scan->scan_start != *puVar1) {\u000a            uVar7 = scan->scan_start;\u000a            goto LAB_0040850d;\u000a          }\u000a          uVar7 = *puVar1;\u000aLAB_0040852e:\u000a          p = scan->ext_info;\u000a          peVar10 = p + sVar9;\u000a          p[sVar9].ext_logical = uVar7;\u000a          p[sVar9].ext_length = local_1000[uVar6 * 7];\u000a          p[sVar9].ext_flags = auStack4072[uVar6 * 0xe];\u000a          sVar9 = (size_t)((int)sVar9 + 1);\u000a        }\u000a        else {\u000a          uVar2 = auStack4072[uVar6 * 0xe];\u000a          if ((peVar10->ext_flags == (uVar2 & 0xfffffffe)) &&\u000a             (peVar10->ext_logical + peVar10->ext_length == local_1010[uVar6 * 7])) {\u000a            peVar10->ext_length = peVar10->ext_length + local_1000[uVar6 * 7];\u000a            peVar10->ext_flags = uVar2;\u000a          }\u000a          else {\u000a            uVar7 = *puVar1;\u000a            if ((ulong)(peVar10->ext_length + peVar10->ext_logical) <= uVar7) goto LAB_0040852e;\u000a            uVar7 = peVar10->ext_length + peVar10->ext_logical;\u000aLAB_0040850d:\u000a            lVar8 = local_1000[uVar6 * 7] - (uVar7 - *puVar1);\u000a            if (uVar7 - *puVar1 <= (ulong)local_1000[uVar6 * 7] && lVar8 != 0) goto LAB_004085c2;\u000a            *puVar1 = uVar7;\u000a            local_1000[uVar6 * 7] = lVar8;\u000a            uVar4 = uVar4 - 1;\u000a          }\u000a        }\u000a        uVar4 = uVar4 + 1;\u000a      } while (uVar4 < local_101c);\u000a    }\u000a    if ((*(byte *)&peVar10->ext_flags & 1) != 0) {\u000a      scan->hit_final_extent = true;\u000a      scan->ei_count = sVar9;\u000a      return true;\u000a    }\u000a    if (((uint)sVar9 < 0x49) || (scan->hit_final_extent != false)) {\u000a      scan->ei_count = sVar9;\u000a      if (scan->hit_final_extent != false) {\u000a        return true;\u000a      }\u000a    }\u000a    else {\u000a      sVar9 = (size_t)((uint)sVar9 - 1);\u000a      scan->ei_count = sVar9;\u000a      peVar10 = (extent_info *)&scan->ext_info[sVar9 - 1].ext_flags;\u000a    }\u000a    scan->scan_start = peVar10->ext_length + peVar10->ext_logical;\u000a    if (0x47 < (uint)sVar9) {\u000a      return true;\u000a    }\u000a  }\u000aLAB_004085c2:\u000a  if (scan->scan_start == 0) {\u000a    scan->initial_scan_failed = true;\u000a  }\u000a  return false;\u000a}\u000a\u000a
p2558
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x1008\nMOV R15,RDI\nMOV R14,qword ptr [R15 + 0x28]\nMOV R12,0x7fffffffffffffff\nXOR R13D,R13D\nXOR ESI,ESI\nMOV EDX,0x1000\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00402360\nMOV RAX,qword ptr [R15 + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV ECX,dword ptr [R15 + 0x10]\nMOV dword ptr [RSP + 0x18],ECX\nMOV dword ptr [RSP + 0x20],0x48\nNOT RAX\nMOV qword ptr [RSP + 0x10],RAX\nMOV EDI,dword ptr [R15]\nMOV ESI,0xc020660b\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00402390\nTEST EAX,EAX\nJS 0x004085c2\nMOV EAX,dword ptr [RSP + 0x1c]\nTEST RAX,RAX\nJZ 0x004085d2\nMOV RSI,qword ptr [R15 + 0x18]\nMOV RCX,RAX\nNOT RCX\nCMP RSI,RCX\nJA 0x0040861a\nADD RSI,RAX\nMOV qword ptr [R15 + 0x18],RSI\nMOV RDI,qword ptr [R15 + 0x28]\nSUB R14,RDI\nMOV EDX,0x18\nCALL 0x0040d970\nMOV qword ptr [R15 + 0x28],RAX\nADD R14,RAX\nCMP dword ptr [RSP + 0x1c],0x0\nJZ 0x00408561\nXOR EAX,EAX\nMOV R8D,dword ptr [RSP + 0x1c]\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV ECX,EAX\nIMUL RSI,RCX,0x38\nMOV RCX,qword ptr [RSP + RSI*0x1 + 0x28]\nMOV RDI,qword ptr [RSP + RSI*0x1 + 0x38]\nMOV RDX,R12\nSUB RDX,RDI\nCMP RCX,RDX\nJA 0x00408601\nLEA RDX,[RSP + RSI*0x1 + 0x28]\nTEST R13D,R13D\nJZ 0x00408500\nMOV EBP,dword ptr [RSP + RSI*0x1 + 0x50]\nMOV EBX,EBP\nAND EBX,0xfffffffe\nCMP dword ptr [R14 + 0x10],EBX\nJNZ 0x004084e0\nMOV R9,qword ptr [R14 + 0x8]\nMOV RBX,qword ptr [R14]\nADD RBX,R9\nCMP RBX,RCX\nJNZ 0x004084e0\nADD R9,RDI\nMOV qword ptr [R14 + 0x8],R9\nMOV dword ptr [R14 + 0x10],EBP\nJMP 0x00408556\nMOV RCX,qword ptr [RDX]\nMOV RDI,qword ptr [R14 + 0x8]\nADD RDI,qword ptr [R14]\nCMP RDI,RCX\nJBE 0x0040852e\nMOV RCX,qword ptr [R14 + 0x8]\nADD RCX,qword ptr [R14]\nJMP 0x0040850d\nMOV RCX,qword ptr [R15 + 0x8]\nCMP RCX,qword ptr [RDX]\nJBE 0x0040852b\nMOV RCX,qword ptr [R15 + 0x8]\nMOV RDI,RCX\nSUB RDI,qword ptr [RDX]\nMOV RSI,qword ptr [RDX + 0x10]\nSUB RSI,RDI\nJA 0x004085c2\nMOV qword ptr [RDX],RCX\nMOV qword ptr [RDX + 0x10],RSI\nDEC EAX\nJMP 0x00408556\nMOV RCX,qword ptr [RDX]\nMOV RDI,qword ptr [R15 + 0x28]\nMOV EBP,R13D\nLEA RBP,[RBP + RBP*0x2]\nLEA R14,[RDI + RBP*0x8]\nMOV qword ptr [RDI + RBP*0x8],RCX\nMOV RCX,qword ptr [RDX + 0x10]\nMOV qword ptr [RDI + RBP*0x8 + 0x8],RCX\nMOV ECX,dword ptr [RSP + RSI*0x1 + 0x50]\nMOV dword ptr [RDI + RBP*0x8 + 0x10],ECX\nINC R13D\nINC EAX\nCMP EAX,R8D\nJC 0x00408480\nTEST byte ptr [R14 + 0x10],0x1\nJNZ 0x004085e1\nMOV AL,byte ptr [R15 + 0x21]\nCMP R13D,0x49\nJC 0x004085a0\nTEST AL,AL\nJNZ 0x004085a0\nDEC R13D\nTEST AL,AL\nMOV RAX,qword ptr [R15 + 0x28]\nMOV qword ptr [R15 + 0x18],R13\nJNZ 0x004085ed\nLEA RCX,[R13 + R13*0x2]\nLEA R14,[RAX + RCX*0x8 + -0x18]\nJMP 0x004085ab\nMOV ECX,R13D\nMOV qword ptr [R15 + 0x18],RCX\nTEST AL,AL\nJNZ 0x004085ed\nMOV RAX,qword ptr [R14 + 0x8]\nADD RAX,qword ptr [R14]\nMOV qword ptr [R15 + 0x8],RAX\nCMP R13D,0x48\nJC 0x004083d5\nJMP 0x004085ed\nCMP qword ptr [R15 + 0x8],0x0\nJNZ 0x004085ce\nMOV byte ptr [R15 + 0x20],0x1\nXOR EAX,EAX\nJMP 0x004085ef\nMOV byte ptr [R15 + 0x21],0x1\nCMP qword ptr [R15 + 0x8],0x0\nSETNZ AL\nJMP 0x004085ef\nMOV byte ptr [R15 + 0x21],0x1\nMOV EAX,R13D\nMOV qword ptr [R15 + 0x18],RAX\nMOV AL,0x1\nADD RSP,0x1008\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x4131a7\nMOV ESI,0x413168\nMOV EDX,0x8d\nMOV ECX,0x41317a\nCALL 0x00402350\nMOV EDI,0x413131\nMOV ESI,0x413168\nMOV EDX,0x7e\nMOV ECX,0x41317a\nCALL 0x00402350\n'
p2559
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 08 10 00 00\n49 89 ff\n4d 8b 77 28\n49 bc ff ff ff ff ff ff ff 7f\n45 31 ed\n31 f6\nba 00 10 00 00\n48 8d 5c 24 08\n48 89 df\ne8 77 9f ff ff\n49 8b 47 08\n48 89 44 24 08\n41 8b 4f 10\n89 4c 24 18\nc7 44 24 20 48 00 00 00\n48 f7 d0\n48 89 44 24 10\n41 8b 3f\nbe 0b 66 20 c0\n31 c0\n48 89 da\ne8 74 9f ff ff\n85 c0\n0f 88 9e 01 00 00\n8b 44 24 1c\n48 85 c0\n0f 84 a1 01 00 00\n49 8b 77 18\n48 89 c1\n48 f7 d1\n48 39 ce\n0f 87 d6 01 00 00\n48 01 c6\n49 89 77 18\n49 8b 7f 28\n49 29 fe\nba 18 00 00 00\ne8 14 55 00 00\n49 89 47 28\n49 01 c6\n83 7c 24 1c 00\n0f 84 f3 00 00 00\n31 c0\n44 8b 44 24 1c\n66 66 2e 0f 1f 84 00 00 00 00 00\n89 c1\n48 6b f1 38\n48 8b 4c 34 28\n48 8b 7c 34 38\n4c 89 e2\n48 29 fa\n48 39 d1\n0f 87 62 01 00 00\n48 8d 54 34 28\n45 85 ed\n74 57\n8b 6c 34 50\n89 eb\n83 e3 fe\n41 39 5e 10\n75 28\n4d 8b 4e 08\n49 8b 1e\n4c 01 cb\n48 39 cb\n75 19\n49 01 f9\n4d 89 4e 08\n41 89 6e 10\ne9 7f 00 00 00\n48 8b 0a\n49 8b 7e 08\n49 03 3e\n48 39 cf\n76 3f\n49 8b 4e 08\n49 03 0e\neb 15\n49 8b 4f 08\n48 3b 0a\n76 22\n49 8b 4f 08\n48 89 cf\n48 2b 3a\n48 8b 72 10\n48 29 fe\n0f 87 a2 00 00 00\n48 89 0a\n48 89 72 10\nff c8\neb 2b\n48 8b 0a\n49 8b 7f 28\n44 89 ed\n48 8d 6c 6d 00\n4c 8d 34 ef\n48 89 0c ef\n48 8b 4a 10\n48 89 4c ef 08\n8b 4c 34 50\n89 4c ef 10\n41 ff c5\nff c0\n44 39 c0\n0f 82 1f ff ff ff\n41 f6 46 10 01\n75 79\n41 8a 47 21\n41 83 fd 49\n72 2e\n84 c0\n75 2a\n41 ff cd\n84 c0\n49 8b 47 28\n4d 89 6f 18\n75 68\n4b 8d 4c 6d 00\n4c 8d 74 c8 e8\neb 1a\n44 89 e9\n49 89 4f 18\n84 c0\n75 42\n49 8b 46 08\n49 03 06\n49 89 47 08\n41 83 fd 48\n0f 82 15 fe ff ff\neb 2b\n49 83 7f 08 00\n75 05\n41 c6 47 20 01\n31 c0\neb 1d\n41 c6 47 21 01\n49 83 7f 08 00\n0f 95 c0\neb 0e\n41 c6 47 21 01\n44 89 e8\n49 89 47 18\nb0 01\n48 81 c4 08 10 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf a7 31 41 00\nbe 68 31 41 00\nba 8d 00 00 00\nb9 7a 31 41 00\ne8 36 9d ff ff\nbf 31 31 41 00\nbe 68 31 41 00\nba 7e 00 00 00\nb9 7a 31 41 00\ne8 1d 9d ff ff\n'
p2560
S'.text:00000000004083b0\n.text:00000000004083b1\n.text:00000000004083b3\n.text:00000000004083b5\n.text:00000000004083b7\n.text:00000000004083b9\n.text:00000000004083ba\n.text:00000000004083c1\n.text:00000000004083c4\n.text:00000000004083c8\n.text:00000000004083d2\n.text:00000000004083d5\n.text:00000000004083d7\n.text:00000000004083dc\n.text:00000000004083e1\n.text:00000000004083e4\n.text:00000000004083e9\n.text:00000000004083ed\n.text:00000000004083f2\n.text:00000000004083f6\n.text:00000000004083fa\n.text:0000000000408402\n.text:0000000000408405\n.text:000000000040840a\n.text:000000000040840d\n.text:0000000000408412\n.text:0000000000408414\n.text:0000000000408417\n.text:000000000040841c\n.text:000000000040841e\n.text:0000000000408424\n.text:0000000000408428\n.text:000000000040842b\n.text:0000000000408431\n.text:0000000000408435\n.text:0000000000408438\n.text:000000000040843b\n.text:000000000040843e\n.text:0000000000408444\n.text:0000000000408447\n.text:000000000040844b\n.text:000000000040844f\n.text:0000000000408452\n.text:0000000000408457\n.text:000000000040845c\n.text:0000000000408460\n.text:0000000000408463\n.text:0000000000408468\n.text:000000000040846e\n.text:0000000000408470\n.text:0000000000408475\n.text:0000000000408480\n.text:0000000000408482\n.text:0000000000408486\n.text:000000000040848b\n.text:0000000000408490\n.text:0000000000408493\n.text:0000000000408496\n.text:0000000000408499\n.text:000000000040849f\n.text:00000000004084a4\n.text:00000000004084a7\n.text:00000000004084a9\n.text:00000000004084ad\n.text:00000000004084af\n.text:00000000004084b2\n.text:00000000004084b6\n.text:00000000004084b8\n.text:00000000004084bc\n.text:00000000004084bf\n.text:00000000004084c2\n.text:00000000004084c5\n.text:00000000004084c7\n.text:00000000004084ca\n.text:00000000004084ce\n.text:00000000004084d2\n.text:00000000004084e0\n.text:00000000004084e3\n.text:00000000004084e7\n.text:00000000004084ea\n.text:00000000004084ed\n.text:00000000004084ef\n.text:00000000004084f3\n.text:00000000004084f6\n.text:0000000000408500\n.text:0000000000408504\n.text:0000000000408507\n.text:0000000000408509\n.text:000000000040850d\n.text:0000000000408510\n.text:0000000000408513\n.text:0000000000408517\n.text:000000000040851a\n.text:0000000000408520\n.text:0000000000408523\n.text:0000000000408527\n.text:0000000000408529\n.text:000000000040852b\n.text:000000000040852e\n.text:0000000000408532\n.text:0000000000408535\n.text:000000000040853a\n.text:000000000040853e\n.text:0000000000408542\n.text:0000000000408546\n.text:000000000040854b\n.text:000000000040854f\n.text:0000000000408553\n.text:0000000000408556\n.text:0000000000408558\n.text:000000000040855b\n.text:0000000000408561\n.text:0000000000408566\n.text:0000000000408568\n.text:000000000040856c\n.text:0000000000408570\n.text:0000000000408572\n.text:0000000000408574\n.text:0000000000408576\n.text:0000000000408579\n.text:000000000040857b\n.text:000000000040857f\n.text:0000000000408583\n.text:0000000000408585\n.text:000000000040858a\n.text:000000000040858f\n.text:00000000004085a0\n.text:00000000004085a3\n.text:00000000004085a7\n.text:00000000004085a9\n.text:00000000004085ab\n.text:00000000004085af\n.text:00000000004085b2\n.text:00000000004085b6\n.text:00000000004085ba\n.text:00000000004085c0\n.text:00000000004085c2\n.text:00000000004085c7\n.text:00000000004085c9\n.text:00000000004085ce\n.text:00000000004085d0\n.text:00000000004085d2\n.text:00000000004085d7\n.text:00000000004085dc\n.text:00000000004085df\n.text:00000000004085e1\n.text:00000000004085e6\n.text:00000000004085e9\n.text:00000000004085ed\n.text:00000000004085ef\n.text:00000000004085f6\n.text:00000000004085f7\n.text:00000000004085f9\n.text:00000000004085fb\n.text:00000000004085fd\n.text:00000000004085ff\n.text:0000000000408600\n.text:0000000000408601\n.text:0000000000408606\n.text:000000000040860b\n.text:0000000000408610\n.text:0000000000408615\n.text:000000000040861a\n.text:000000000040861f\n.text:0000000000408624\n.text:0000000000408629\n.text:000000000040862e\n'
p2561
tp2562
sS'quotearg_n'
p2563
(S'\n__stdcall quotearg_n(char * arg)\n'
p2564
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p2565
S'MOV RDX,-0x1\nMOV ECX,0x6198e0\nJMP 0x0040b690\n'
p2566
S'48 c7 c2 ff ff ff ff\nb9 e0 98 61 00\neb 02\n'
p2567
S'.text:000000000040b680\n.text:000000000040b687\n.text:000000000040b68c\n'
p2568
tp2569
sS'close_stream'
p2570
(S'\n__stdcall close_stream(FILE * stream)\n'
p2571
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p2572
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00402150\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00402460\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x004111a0\nTEST EBP,EBP\nJZ 0x0041078b\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x004107af\nCALL 0x00402100\nMOV dword ptr [RAX],0x0\nJMP 0x004107af\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x004107af\nTEST CL,CL\nJNZ 0x004107af\nCALL 0x00402100\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p2573
S'55\n41 56\n53\n48 89 fb\ne8 f4 19 ff ff\n49 89 c6\n48 89 df\ne8 f9 1c ff ff\n89 c5\n48 89 df\ne8 2f 0a 00 00\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 7d 19 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 5e 19 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p2574
S'.text:0000000000410750\n.text:0000000000410751\n.text:0000000000410753\n.text:0000000000410754\n.text:0000000000410757\n.text:000000000041075c\n.text:000000000041075f\n.text:0000000000410762\n.text:0000000000410767\n.text:0000000000410769\n.text:000000000041076c\n.text:0000000000410771\n.text:0000000000410773\n.text:0000000000410775\n.text:000000000041077a\n.text:000000000041077c\n.text:000000000041077e\n.text:0000000000410783\n.text:0000000000410789\n.text:000000000041078b\n.text:000000000041078d\n.text:0000000000410790\n.text:0000000000410792\n.text:0000000000410794\n.text:0000000000410797\n.text:0000000000410799\n.text:000000000041079b\n.text:000000000041079d\n.text:00000000004107a2\n.text:00000000004107a4\n.text:00000000004107a7\n.text:00000000004107ac\n.text:00000000004107af\n.text:00000000004107b1\n.text:00000000004107b2\n.text:00000000004107b4\n.text:00000000004107b5\n'
p2575
tp2576
sS'excise'
p2577
(S'\n__stdcall excise(FTS * fts, FTSENT * ent, rm_options * x)\n'
p2578
V\u000aRM_status excise(FTS *fts,FTSENT *ent,rm_options *x)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  undefined8 in_RCX;\u000a  uint uVar6;\u000a  RM_status RVar7;\u000a  \u000a  iVar2 = unlinkat(fts->fts_cwd_fd,ent->fts_accpath,((uint)in_RCX & 0xff) << 9);\u000a  if (iVar2 == 0) {\u000a    RVar7 = RM_OK;\u000a    if (x->verbose != false) {\u000a      pcVar5 = "removed %s\u005cn";\u000a      if ((char)in_RCX != 0) {\u000a        pcVar5 = "removed directory %s\u005cn";\u000a      }\u000a      uVar4 = dcgettext(0,pcVar5,5);\u000a      pcVar5 = quotearg_style((char *)0x4);\u000a      __printf_chk(1,uVar4,pcVar5,pcVar5);\u000a    }\u000a  }\u000a  else {\u000a    puVar3 = (uint *)__errno_location();\u000a    uVar6 = *puVar3;\u000a    if (uVar6 == 0x1e) {\u000a      iVar2 = lstatat((char *)(ulong)(uint)fts->fts_cwd_fd,(stat *)ent->fts_accpath);\u000a      if ((iVar2 == 0) || (*puVar3 != 2)) {\u000a        *puVar3 = 0x1e;\u000a      }\u000a      uVar6 = *puVar3;\u000a    }\u000a    _Var1 = ignorable_missing(x);\u000a    RVar7 = RM_OK;\u000a    if (_Var1 == false) {\u000a      if ((((ent->fts_info == 4) && (uVar6 < 0x28)) &&\u000a          ((0x8000320000U >> ((ulong)uVar6 & 0x1f) & 1) != 0)) &&\u000a         ((uVar6 = ent->fts_errno, uVar6 == 0xd || (uVar6 == 1)))) {\u000a        *puVar3 = uVar6;\u000a      }\u000a      uVar6 = *puVar3;\u000a      uVar4 = dcgettext(0,"cannot remove %s",5);\u000a      RVar7 = RM_ERROR;\u000a      pcVar5 = quotearg_style((char *)0x4);\u000a      error(0,(ulong)uVar6,uVar4,pcVar5);\u000a      mark_ancestor_dirs(ent);\u000a    }\u000a  }\u000a  return RVar7;\u000a}\u000a\u000a
p2579
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x90\nMOV EBX,ECX\nMOV R15,RDX\nMOV R14,RSI\nMOV RBP,RDI\nMOVZX EDX,BL\nSHL EDX,0x9\nMOV EDI,dword ptr [RBP + 0x2c]\nMOV RSI,qword ptr [R14 + 0x30]\nCALL 0x00402170\nTEST EAX,EAX\nJZ 0x00403e2c\nCALL 0x00402100\nMOV R12,RAX\nMOV EBX,dword ptr [R12]\nCMP EBX,0x1e\nJNZ 0x00403d9b\nMOV EDI,dword ptr [RBP + 0x2c]\nMOV RSI,qword ptr [R14 + 0x30]\nMOV RDX,RSP\nCALL 0x0040c700\nTEST EAX,EAX\nJZ 0x00403d8f\nCMP dword ptr [R12],0x2\nJZ 0x00403d97\nMOV dword ptr [R12],0x1e\nMOV EBX,dword ptr [R12]\nMOV RDI,R15\nMOV ESI,EBX\nCALL 0x00403fb0\nMOV EBP,0x2\nTEST AL,AL\nJNZ 0x00403e7a\nMOVZX EAX,word ptr [R14 + 0x70]\nCMP EAX,0x4\nJNZ 0x00403de5\nCMP EBX,0x27\nJA 0x00403de5\nMOV EAX,EBX\nMOV RCX,0x8000320000\nBT RCX,RAX\nJNC 0x00403de5\nMOV EAX,dword ptr [R14 + 0x40]\nCMP EAX,0xd\nJZ 0x00403de1\nCMP EAX,0x1\nJNZ 0x00403de5\nMOV dword ptr [R12],EAX\nMOV R15D,dword ptr [R12]\nXOR EDI,EDI\nMOV ESI,0x41249b\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV RSI,qword ptr [R14 + 0x38]\nMOV EBP,0x4\nMOV EDI,0x4\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,RBX\nCALL 0x00402640\nMOV RDI,R14\nCALL 0x004039b0\nJMP 0x00403e7a\nMOV EBP,0x2\nCMP byte ptr [R15 + 0x19],0x0\nJZ 0x00403e7a\nMOV EAX,0x41274b\nMOV ESI,0x412761\nTEST BL,BL\nCMOVNZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV RSI,qword ptr [R14 + 0x38]\nMOV EDI,0x4\nCALL 0x0040b960\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RBX\nMOV RDX,RCX\nCALL 0x00402600\nMOV EAX,EBP\nADD RSP,0x90\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2580
S'55\n41 57\n41 56\n41 54\n53\n48 81 ec 90 00 00 00\n89 cb\n49 89 d7\n49 89 f6\n48 89 fd\n0f b6 d3\nc1 e2 09\n8b 7d 2c\n49 8b 76 30\ne8 14 e4 ff ff\n85 c0\n0f 84 c8 00 00 00\ne8 97 e3 ff ff\n49 89 c4\n41 8b 1c 24\n83 fb 1e\n75 26\n8b 7d 2c\n49 8b 76 30\n48 89 e2\ne8 7c 89 00 00\n85 c0\n74 07\n41 83 3c 24 02\n74 08\n41 c7 04 24 1e 00 00 00\n41 8b 1c 24\n4c 89 ff\n89 de\ne8 0b 02 00 00\nbd 02 00 00 00\n84 c0\n0f 85 c8 00 00 00\n41 0f b7 46 70\n83 f8 04\n75 29\n83 fb 27\n77 24\n89 d8\n48 b9 00 00 32 00 80 00 00 00\n48 0f a3 c1\n73 12\n41 8b 46 40\n83 f8 0d\n74 05\n83 f8 01\n75 04\n41 89 04 24\n45 8b 3c 24\n31 ff\nbe 9b 24 41 00\nba 05 00 00 00\ne8 76 e4 ff ff\n48 89 c3\n49 8b 76 38\nbd 04 00 00 00\nbf 04 00 00 00\ne8 50 7b 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 fe\n48 89 da\ne8 1e e8 ff ff\n4c 89 f7\ne8 86 fb ff ff\neb 4e\nbd 02 00 00 00\n41 80 7f 19 00\n74 42\nb8 4b 27 41 00\nbe 61 27 41 00\n84 db\n48 0f 45 f0\n31 ff\nba 05 00 00 00\ne8 1c e4 ff ff\n48 89 c3\n49 8b 76 38\nbf 04 00 00 00\ne8 fb 7a 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n48 89 de\n48 89 ca\ne8 86 e7 ff ff\n89 e8\n48 81 c4 90 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p2581
S'.text:0000000000403d30\n.text:0000000000403d31\n.text:0000000000403d33\n.text:0000000000403d35\n.text:0000000000403d37\n.text:0000000000403d38\n.text:0000000000403d3f\n.text:0000000000403d41\n.text:0000000000403d44\n.text:0000000000403d47\n.text:0000000000403d4a\n.text:0000000000403d4d\n.text:0000000000403d50\n.text:0000000000403d53\n.text:0000000000403d57\n.text:0000000000403d5c\n.text:0000000000403d5e\n.text:0000000000403d64\n.text:0000000000403d69\n.text:0000000000403d6c\n.text:0000000000403d70\n.text:0000000000403d73\n.text:0000000000403d75\n.text:0000000000403d78\n.text:0000000000403d7c\n.text:0000000000403d7f\n.text:0000000000403d84\n.text:0000000000403d86\n.text:0000000000403d88\n.text:0000000000403d8d\n.text:0000000000403d8f\n.text:0000000000403d97\n.text:0000000000403d9b\n.text:0000000000403d9e\n.text:0000000000403da0\n.text:0000000000403da5\n.text:0000000000403daa\n.text:0000000000403dac\n.text:0000000000403db2\n.text:0000000000403db7\n.text:0000000000403dba\n.text:0000000000403dbc\n.text:0000000000403dbf\n.text:0000000000403dc1\n.text:0000000000403dc3\n.text:0000000000403dcd\n.text:0000000000403dd1\n.text:0000000000403dd3\n.text:0000000000403dd7\n.text:0000000000403dda\n.text:0000000000403ddc\n.text:0000000000403ddf\n.text:0000000000403de1\n.text:0000000000403de5\n.text:0000000000403de9\n.text:0000000000403deb\n.text:0000000000403df0\n.text:0000000000403df5\n.text:0000000000403dfa\n.text:0000000000403dfd\n.text:0000000000403e01\n.text:0000000000403e06\n.text:0000000000403e0b\n.text:0000000000403e10\n.text:0000000000403e13\n.text:0000000000403e15\n.text:0000000000403e17\n.text:0000000000403e1a\n.text:0000000000403e1d\n.text:0000000000403e22\n.text:0000000000403e25\n.text:0000000000403e2a\n.text:0000000000403e2c\n.text:0000000000403e31\n.text:0000000000403e36\n.text:0000000000403e38\n.text:0000000000403e3d\n.text:0000000000403e42\n.text:0000000000403e44\n.text:0000000000403e48\n.text:0000000000403e4a\n.text:0000000000403e4f\n.text:0000000000403e54\n.text:0000000000403e57\n.text:0000000000403e5b\n.text:0000000000403e60\n.text:0000000000403e65\n.text:0000000000403e68\n.text:0000000000403e6d\n.text:0000000000403e6f\n.text:0000000000403e72\n.text:0000000000403e75\n.text:0000000000403e7a\n.text:0000000000403e7c\n.text:0000000000403e83\n.text:0000000000403e84\n.text:0000000000403e86\n.text:0000000000403e88\n.text:0000000000403e8a\n.text:0000000000403e8b\n'
p2582
tp2583
sS'quotearg_colon_mem'
p2584
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p2585
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p2586
S'MOV EDX,0x3a\nJMP 0x0040b9a0\n'
p2587
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p2588
S'.text:000000000040ba30\n.text:000000000040ba35\n'
p2589
tp2590
sS'statat'
p2591
(S'\n__stdcall statat(char * name, stat * st)\n'
p2592
V\u000aint statat(char *name,stat *st)\u000a\u000a{\u000a  int iVar1;\u000a  stat *__buf;\u000a  \u000a  iVar1 = fstatat((int)name,(char *)st,__buf,0);\u000a  return iVar1;\u000a}\u000a\u000a
p2593
S'XOR ECX,ECX\nJMP 0x00411410\n'
p2594
S'31 c9\ne9 19 4d 00 00\n'
p2595
S'.text:000000000040c6f0\n.text:000000000040c6f2\n'
p2596
tp2597
sS'readdir'
p2598
(S'\n__stdcall readdir(DIR * __dirp)\n'
p2599
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000adirent * readdir(DIR *__dirp)\u000a\u000a{\u000a  dirent *pdVar1;\u000a  \u000a  pdVar1 = (dirent *)(*(code *)PTR_readdir_00619250)();\u000a  return pdVar1;\u000a}\u000a\u000a
p2600
S'JMP qword ptr [0x00619250]\n'
p2601
S'ff 25 2a 6d 21 00\n'
p2602
S'.plt:0000000000402520\n'
p2603
tp2604
sS'symlink'
p2605
(S'\n__stdcall symlink(char * __from, char * __to)\n'
p2606
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint symlink(char *__from,char *__to)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_symlink_00619138)();\u000a  return iVar1;\u000a}\u000a\u000a
p2607
S'JMP qword ptr [0x00619138]\n'
p2608
S'ff 25 42 6e 21 00\n'
p2609
S'.plt:00000000004022f0\n'
p2610
tp2611
sS'abandon_move'
p2612
(S'\n__stdcall abandon_move(cp_options * x, char * dst_name, stat * dst_sb)\n'
p2613
V\u000a_Bool abandon_move(cp_options *x,char *dst_name,stat *dst_sb)\u000a\u000a{\u000a  Interactive IVar1;\u000a  _Bool _Var2;\u000a  byte bVar3;\u000a  \u000a  if (x->move_mode == false) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("x->move_mode","src/copy.c",0x6c7,\u000a                  "_Bool abandon_move(const struct cp_options *, const char *, const struct stat *)"\u000a                 );\u000a  }\u000a  IVar1 = x->interactive;\u000a  if (IVar1 != I_ALWAYS_NO) {\u000a    if ((IVar1 == I_ASK_USER) ||\u000a       (((IVar1 == I_UNSPECIFIED && (x->stdin_tty != false)) &&\u000a        (_Var2 = writable_destination(dst_name), _Var2 == false)))) {\u000a      _Var2 = overwrite_ok(x,dst_name,dst_sb);\u000a      bVar3 = _Var2 ^ 1;\u000a    }\u000a    else {\u000a      bVar3 = 0;\u000a    }\u000a    return (_Bool)bVar3;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p2614
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RDX\nMOV R15,RSI\nMOV RBX,RDI\nCMP byte ptr [RBX + 0x18],0x0\nJZ 0x0040624a\nMOV EAX,dword ptr [RBX + 0x8]\nCMP EAX,0x2\nJZ 0x00406242\nCMP EAX,0x3\nJZ 0x00406230\nCMP EAX,0x4\nJNZ 0x0040622c\nCMP byte ptr [RBX + 0x2e],0x0\nJZ 0x0040622c\nMOV ESI,dword ptr [R14 + 0x18]\nMOV RDI,R15\nCALL 0x004076b0\nTEST AL,AL\nJZ 0x00406230\nXOR EAX,EAX\nJMP 0x00406244\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,R14\nCALL 0x00406270\nXOR AL,0x1\nJMP 0x00406244\nMOV AL,0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOV EDI,0x412dc9\nMOV ESI,0x4127d0\nMOV EDX,0x6c7\nMOV ECX,0x412dd6\nCALL 0x00402350\n'
p2615
S'41 57\n41 56\n53\n49 89 d6\n49 89 f7\n48 89 fb\n80 7b 18 00\n74 46\n8b 43 08\n83 f8 02\n74 36\n83 f8 03\n74 1f\n83 f8 04\n75 16\n80 7b 2e 00\n74 10\n41 8b 76 18\n4c 89 ff\ne8 88 14 00 00\n84 c0\n74 04\n31 c0\neb 14\n48 89 df\n4c 89 fe\n4c 89 f2\ne8 32 00 00 00\n34 01\neb 02\nb0 01\n5b\n41 5e\n41 5f\nc3\nbf c9 2d 41 00\nbe d0 27 41 00\nba c7 06 00 00\nb9 d6 2d 41 00\ne8 ed c0 ff ff\n'
p2616
S'.text:00000000004061f0\n.text:00000000004061f2\n.text:00000000004061f4\n.text:00000000004061f5\n.text:00000000004061f8\n.text:00000000004061fb\n.text:00000000004061fe\n.text:0000000000406202\n.text:0000000000406204\n.text:0000000000406207\n.text:000000000040620a\n.text:000000000040620c\n.text:000000000040620f\n.text:0000000000406211\n.text:0000000000406214\n.text:0000000000406216\n.text:000000000040621a\n.text:000000000040621c\n.text:0000000000406220\n.text:0000000000406223\n.text:0000000000406228\n.text:000000000040622a\n.text:000000000040622c\n.text:000000000040622e\n.text:0000000000406230\n.text:0000000000406233\n.text:0000000000406236\n.text:0000000000406239\n.text:000000000040623e\n.text:0000000000406240\n.text:0000000000406242\n.text:0000000000406244\n.text:0000000000406245\n.text:0000000000406247\n.text:0000000000406249\n.text:000000000040624a\n.text:000000000040624f\n.text:0000000000406254\n.text:0000000000406259\n.text:000000000040625e\n'
p2617
tp2618
sS'security_compute_create'
p2619
(S'\n__stdcall security_compute_create(security_context_t scon, security_context_t tcon, security_context_t * newcon)\n'
p2620
V\u000aint security_compute_create\u000a              (security_context_t scon,security_context_t tcon,security_context_t *newcon)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p2621
S'PUSH RAX\nCALL 0x00402100\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p2622
S'50\ne8 da 5a ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p2623
S'.text:000000000040c620\n.text:000000000040c621\n.text:000000000040c626\n.text:000000000040c62c\n.text:000000000040c631\n.text:000000000040c632\n'
p2624
tp2625
sS'copy'
p2626
(S'\n__stdcall copy(char * src_name, char * dst_name, cp_options * options, _Bool * copy_into_self, _Bool * rename_succeeded)\n'
p2627
V\u000a_Bool copy(char *src_name,char *dst_name,cp_options *options,_Bool *copy_into_self,\u000a          _Bool *rename_succeeded)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool local_9;\u000a  \u000a  local_9 = false;\u000a  top_level_src_name = src_name;\u000a  top_level_dst_name = dst_name;\u000a  _Var1 = copy_internal(src_name,dst_name,(stat *)((ulong)options & 0xff),(dir_list *)0x0,\u000a                        (cp_options *)0x0,copy_into_self,(_Bool *)0x1,&local_9);\u000a  return _Var1;\u000a}\u000a\u000a
p2628
S'PUSH RBX\nSUB RSP,0x10\nMOV R11,R9\nMOV R10,R8\nMOV RAX,RCX\nMOV qword ptr [0x00619490],RDI\nMOV qword ptr [0x00619498],RSI\nMOV byte ptr [RSP + 0xf],0x0\nLEA RBX,[RSP + 0xf]\nMOVZX EDX,DL\nMOV ECX,0x0\nMOV R8D,0x0\nMOV R9,RAX\nPUSH R11\nPUSH R10\nPUSH RBX\nPUSH 0x1\nCALL 0x00404160\nADD RSP,0x30\nPOP RBX\nRET\n'
p2629
S'53\n48 83 ec 10\n4d 89 cb\n4d 89 c2\n48 89 c8\n48 89 3d 3b 54 21 00\n48 89 35 3c 54 21 00\nc6 44 24 0f 00\n48 8d 5c 24 0f\n0f b6 d2\nb9 00 00 00 00\n41 b8 00 00 00 00\n49 89 c1\n41 53\n41 52\n53\n6a 01\ne8 dd 00 00 00\n48 83 c4 30\n5b\nc3\n'
p2630
S'.text:0000000000404040\n.text:0000000000404041\n.text:0000000000404045\n.text:0000000000404048\n.text:000000000040404b\n.text:000000000040404e\n.text:0000000000404055\n.text:000000000040405c\n.text:0000000000404061\n.text:0000000000404066\n.text:0000000000404069\n.text:000000000040406e\n.text:0000000000404074\n.text:0000000000404077\n.text:0000000000404079\n.text:000000000040407b\n.text:000000000040407c\n.text:000000000040407e\n.text:0000000000404083\n.text:0000000000404087\n.text:0000000000404088\n'
p2631
tp2632
sS'hash_string'
p2633
(S'\n__stdcall hash_string(char * string, size_t n_buckets)\n'
p2634
V\u000asize_t hash_string(char *string,size_t n_buckets)\u000a\u000a{\u000a  byte bVar1;\u000a  ulong uVar2;\u000a  byte *pbVar3;\u000a  \u000a  bVar1 = *string;\u000a  if (bVar1 != 0) {\u000a    pbVar3 = (byte *)(string + 1);\u000a    uVar2 = 0;\u000a    do {\u000a      uVar2 = ((ulong)bVar1 + uVar2 * 0x1f) % n_buckets;\u000a      bVar1 = *pbVar3;\u000a      pbVar3 = pbVar3 + 1;\u000a    } while (bVar1 != 0);\u000a    return uVar2;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p2635
S'MOV AL,byte ptr [RDI]\nTEST AL,AL\nJZ 0x004099a3\nINC RDI\nXOR EDX,EDX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RCX,RDX\nSHL RCX,0x5\nSUB RCX,RDX\nMOVZX EAX,AL\nADD RAX,RCX\nXOR EDX,EDX\nDIV RSI\nMOVZX EAX,byte ptr [RDI]\nINC RDI\nTEST AL,AL\nJNZ 0x00409980\nMOV RAX,RDX\nRET\nXOR EDX,EDX\nMOV RAX,RDX\nRET\n'
p2636
S'8a 07\n84 c0\n74 2d\n48 ff c7\n31 d2\n0f 1f 44 00 00\n48 89 d1\n48 c1 e1 05\n48 29 d1\n0f b6 c0\n48 01 c8\n31 d2\n48 f7 f6\n0f b6 07\n48 ff c7\n84 c0\n75 e1\n48 89 d0\nc3\n31 d2\n48 89 d0\nc3\n'
p2637
S'.text:0000000000409970\n.text:0000000000409972\n.text:0000000000409974\n.text:0000000000409976\n.text:0000000000409979\n.text:000000000040997b\n.text:0000000000409980\n.text:0000000000409983\n.text:0000000000409987\n.text:000000000040998a\n.text:000000000040998d\n.text:0000000000409990\n.text:0000000000409992\n.text:0000000000409995\n.text:0000000000409998\n.text:000000000040999b\n.text:000000000040999d\n.text:000000000040999f\n.text:00000000004099a2\n.text:00000000004099a3\n.text:00000000004099a5\n.text:00000000004099a8\n'
p2638
tp2639
sS'cycle_check'
p2640
(S'\n__stdcall cycle_check(cycle_check_state * state, stat * sb)\n'
p2641
V\u000a_Bool cycle_check(cycle_check_state *state,stat *sb)\u000a\u000a{\u000a  undefined uVar1;\u000a  _Bool _Var2;\u000a  uintmax_t i;\u000a  \u000a  if (state->magic != 0x95f616) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("state->magic == 9827862","lib/cycle-check.c",0x3c,\u000a                  "_Bool cycle_check(struct cycle_check_state *, const struct stat *)");\u000a  }\u000a  if (((state->chdir_counter == 0) || (sb->st_ino != (state->dev_ino).st_ino)) ||\u000a     (uVar1 = 1, sb->st_dev != (state->dev_ino).st_dev)) {\u000a    i = state->chdir_counter + 1;\u000a    state->chdir_counter = i;\u000a    _Var2 = is_zero_or_power_of_two(i);\u000a    if (_Var2 != false) {\u000a      if (i == 0) {\u000a        return true;\u000a      }\u000a      (state->dev_ino).st_dev = sb->st_dev;\u000a      (state->dev_ino).st_ino = sb->st_ino;\u000a    }\u000a    uVar1 = 0;\u000a  }\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p2642
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCMP dword ptr [R15 + 0x18],0x95f616\nJNZ 0x00410834\nMOV RBX,qword ptr [R15 + 0x10]\nTEST RBX,RBX\nJZ 0x00410802\nMOV RAX,qword ptr [R14 + 0x8]\nCMP RAX,qword ptr [R15]\nJNZ 0x00410802\nMOV RCX,qword ptr [R14]\nMOV AL,0x1\nCMP RCX,qword ptr [R15 + 0x8]\nJZ 0x0041082a\nINC RBX\nMOV qword ptr [R15 + 0x10],RBX\nMOV RDI,RBX\nCALL 0x00410850\nTEST AL,AL\nJZ 0x00410828\nTEST RBX,RBX\nJZ 0x00410830\nMOV RAX,qword ptr [R14]\nMOV qword ptr [R15 + 0x8],RAX\nMOV RAX,qword ptr [R14 + 0x8]\nMOV qword ptr [R15],RAX\nXOR EAX,EAX\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOV AL,0x1\nJMP 0x0041082a\nMOV EDI,0x414168\nMOV ESI,0x414180\nMOV EDX,0x3c\nMOV ECX,0x414192\nCALL 0x00402350\n'
p2643
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\n41 81 7f 18 16 f6 95 00\n75 4f\n49 8b 5f 10\n48 85 db\n74 14\n49 8b 46 08\n49 3b 07\n75 0b\n49 8b 0e\nb0 01\n49 3b 4f 08\n74 28\n48 ff c3\n49 89 5f 10\n48 89 df\ne8 3f 00 00 00\n84 c0\n74 13\n48 85 db\n74 16\n49 8b 06\n49 89 47 08\n49 8b 46 08\n49 89 07\n31 c0\n5b\n41 5e\n41 5f\nc3\nb0 01\neb f6\nbf 68 41 41 00\nbe 80 41 41 00\nba 3c 00 00 00\nb9 92 41 41 00\ne8 03 1b ff ff\n'
p2644
S'.text:00000000004107d0\n.text:00000000004107d2\n.text:00000000004107d4\n.text:00000000004107d5\n.text:00000000004107d8\n.text:00000000004107db\n.text:00000000004107e3\n.text:00000000004107e5\n.text:00000000004107e9\n.text:00000000004107ec\n.text:00000000004107ee\n.text:00000000004107f2\n.text:00000000004107f5\n.text:00000000004107f7\n.text:00000000004107fa\n.text:00000000004107fc\n.text:0000000000410800\n.text:0000000000410802\n.text:0000000000410805\n.text:0000000000410809\n.text:000000000041080c\n.text:0000000000410811\n.text:0000000000410813\n.text:0000000000410815\n.text:0000000000410818\n.text:000000000041081a\n.text:000000000041081d\n.text:0000000000410821\n.text:0000000000410825\n.text:0000000000410828\n.text:000000000041082a\n.text:000000000041082b\n.text:000000000041082d\n.text:000000000041082f\n.text:0000000000410830\n.text:0000000000410832\n.text:0000000000410834\n.text:0000000000410839\n.text:000000000041083e\n.text:0000000000410843\n.text:0000000000410848\n'
p2645
tp2646
sS'is_nul'
p2647
(S'\n__stdcall is_nul(void * buf, size_t length)\n'
p2648
V\u000a_Bool is_nul(void *buf,size_t length)\u000a\u000a{\u000a  ulong uVar1;\u000a  int iVar2;\u000a  ulong __n;\u000a  char *__s2;\u000a  bool bVar3;\u000a  \u000a  bVar3 = true;\u000a  if (length != 0) {\u000a    uVar1 = length - 1;\u000a    __s2 = (char *)buf;\u000a    do {\u000a      __n = uVar1;\u000a      if (*__s2 != 0) {\u000a        return false;\u000a      }\u000a      if (__n == 0) {\u000a        return true;\u000a      }\u000a      __s2 = __s2 + 1;\u000a      uVar1 = __n - 1;\u000a    } while ((__n & 0xf) != 0);\u000a    iVar2 = memcmp(buf,__s2,__n);\u000a    bVar3 = iVar2 == 0;\u000a  }\u000a  return (_Bool)bVar3;\u000a}\u000a\u000a
p2649
S'MOV RCX,RSI\nMOV AL,0x1\nTEST RCX,RCX\nJZ 0x004081cc\nDEC RCX\nMOV RSI,RDI\nCMP byte ptr [RSI],0x0\nJNZ 0x004081cd\nTEST RCX,RCX\nJZ 0x004081cc\nINC RSI\nMOV EDX,ECX\nDEC RCX\nTEST DL,0xf\nJNZ 0x004081a0\nPUSH RAX\nINC RCX\nMOV RDX,RCX\nCALL 0x00402420\nTEST EAX,EAX\nSETZ AL\nADD RSP,0x8\nRET\nXOR EAX,EAX\nRET\n'
p2650
S'48 89 f1\nb0 01\n48 85 c9\n74 32\n48 ff c9\n48 89 fe\n80 3e 00\n75 28\n48 85 c9\n74 22\n48 ff c6\n89 ca\n48 ff c9\nf6 c2 0f\n75 e9\n50\n48 ff c1\n48 89 ca\ne8 5d a2 ff ff\n85 c0\n0f 94 c0\n48 83 c4 08\nc3\n31 c0\nc3\n'
p2651
S'.text:0000000000408190\n.text:0000000000408193\n.text:0000000000408195\n.text:0000000000408198\n.text:000000000040819a\n.text:000000000040819d\n.text:00000000004081a0\n.text:00000000004081a3\n.text:00000000004081a5\n.text:00000000004081a8\n.text:00000000004081aa\n.text:00000000004081ad\n.text:00000000004081af\n.text:00000000004081b2\n.text:00000000004081b5\n.text:00000000004081b7\n.text:00000000004081b8\n.text:00000000004081bb\n.text:00000000004081be\n.text:00000000004081c3\n.text:00000000004081c5\n.text:00000000004081c8\n.text:00000000004081cc\n.text:00000000004081cd\n.text:00000000004081cf\n'
p2652
tp2653
sS'argmatch_invalid'
p2654
(S'\n__stdcall argmatch_invalid(char * context, char * value, ptrdiff_t problem)\n'
p2655
V\u000avoid argmatch_invalid(char *context,char *value,ptrdiff_t problem)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  \u000a  pcVar2 = "ambiguous argument %s for %s";\u000a  if (problem == -1) {\u000a    pcVar2 = "invalid argument %s for %s";\u000a  }\u000a  uVar1 = dcgettext(0,pcVar2,5);\u000a  pcVar2 = quotearg_n_style((char *)0x0);\u000a  pcVar3 = quote_n((char *)0x1);\u000a  error(0,0,uVar1,pcVar2,pcVar3);\u000a  return;\u000a}\u000a\u000a
p2656
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RSI\nMOV R14,RDI\nCMP RDX,-0x1\nMOV EAX,0x413e20\nMOV ESI,0x413e3b\nCMOVZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00402270\nMOV R12,RAX\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,R15\nCALL 0x0040b880\nMOV R15,RAX\nMOV EDI,0x1\nMOV RSI,R14\nCALL 0x0040bb70\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R12\nMOV RCX,R15\nMOV R8,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00402640\n'
p2657
S'41 57\n41 56\n41 54\n53\n50\n49 89 f7\n49 89 fe\n48 83 fa ff\nb8 20 3e 41 00\nbe 3b 3e 41 00\n48 0f 44 f0\n31 ff\nba 05 00 00 00\ne8 d4 1f ff ff\n49 89 c4\n31 ff\nbe 08 00 00 00\n4c 89 fa\ne8 d2 b5 ff ff\n49 89 c7\nbf 01 00 00 00\n4c 89 f6\ne8 b2 b8 ff ff\n48 89 c3\n31 ff\n31 f6\n31 c0\n4c 89 e2\n4c 89 f9\n49 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 60 23 ff ff\n'
p2658
S'.text:0000000000410270\n.text:0000000000410272\n.text:0000000000410274\n.text:0000000000410276\n.text:0000000000410277\n.text:0000000000410278\n.text:000000000041027b\n.text:000000000041027e\n.text:0000000000410282\n.text:0000000000410287\n.text:000000000041028c\n.text:0000000000410290\n.text:0000000000410292\n.text:0000000000410297\n.text:000000000041029c\n.text:000000000041029f\n.text:00000000004102a1\n.text:00000000004102a6\n.text:00000000004102a9\n.text:00000000004102ae\n.text:00000000004102b1\n.text:00000000004102b6\n.text:00000000004102b9\n.text:00000000004102be\n.text:00000000004102c1\n.text:00000000004102c3\n.text:00000000004102c5\n.text:00000000004102c7\n.text:00000000004102ca\n.text:00000000004102cd\n.text:00000000004102d0\n.text:00000000004102d4\n.text:00000000004102d5\n.text:00000000004102d7\n.text:00000000004102d9\n.text:00000000004102db\n'
p2659
tp2660
sS'c_tolower'
p2661
(S'\n__stdcall c_tolower()\n'
p2662
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p2663
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p2664
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p2665
S'.text:00000000004106c0\n.text:00000000004106c3\n.text:00000000004106c6\n.text:00000000004106c9\n.text:00000000004106cc\n'
p2666
tp2667
sS'getopt_long'
p2668
(S'\n__stdcall getopt_long()\n'
p2669
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_00619128)();\u000a  return;\u000a}\u000a\u000a
p2670
S'JMP qword ptr [0x00619128]\n'
p2671
S'ff 25 52 6e 21 00\n'
p2672
S'.plt:00000000004022d0\n'
p2673
tp2674
sS'fts_build'
p2675
(S'\n__stdcall fts_build(FTS * sp)\n'
p2676
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000aFTSENT * fts_build(FTS *sp)\u000a\u000a{\u000a  ulong uVar1;\u000a  byte *pbVar2;\u000a  char cVar3;\u000a  DIR *__dirp;\u000a  size_t sVar4;\u000a  int (*pVar5)(_ftsent **,_ftsent **);\u000a  byte bVar6;\u000a  bool bVar7;\u000a  FTSENT *pFVar8;\u000a  _Bool _Var9;\u000a  unsigned_short uVar10;\u000a  int iVar11;\u000a  DIR *__dirp_00;\u000a  int *piVar12;\u000a  dirent *pdVar13;\u000a  size_t namelen;\u000a  FTSENT *p;\u000a  FTSENT *head;\u000a  FTSENT *ent;\u000a  size_t sVar14;\u000a  int in_ESI;\u000a  char *dir;\u000a  long lVar15;\u000a  ulong nitems;\u000a  uint local_a4;\u000a  char *local_88;\u000a  FTSENT *local_60;\u000a  ulong local_58;\u000a  \u000a  ent = (FTSENT *)sp->fts_cur;\u000a  __dirp = (DIR *)ent->fts_dirp;\u000a  if (__dirp == (DIR *)0x0) {\u000a    dir = (char *)0xffffff9c;\u000a    if ((sp->fts_options & 0x204U) == 0x200) {\u000a      dir = (char *)(ulong)(uint)sp->fts_cwd_fd;\u000a    }\u000a    __dirp_00 = opendirat(dir,(int *)ent->fts_accpath);\u000a    ent->fts_dirp = __dirp_00;\u000a    if (__dirp_00 == (DIR *)0x0) goto joined_r0x0040f13d;\u000a    if (ent->fts_info == 0xb) {\u000a      uVar10 = fts_stat(sp,ent);\u000a      ent->fts_info = uVar10;\u000a    }\u000a    else {\u000a      if ((*(byte *)((long)&sp->fts_options + 1) & 1) != 0) {\u000a        leave_dir(sp,ent);\u000a        fts_stat(sp,ent);\u000a        _Var9 = enter_dir(sp,ent);\u000a        if (_Var9 == false) {\u000a          piVar12 = __errno_location();\u000a          *piVar12 = 0xc;\u000a          return (FTSENT *)0;\u000a        }\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    local_a4 = dirfd(__dirp);\u000a    if ((int)local_a4 < 0) {\u000a      closedir((DIR *)ent->fts_dirp);\u000a      ent->fts_dirp = (DIR *)0x0;\u000ajoined_r0x0040f13d:\u000a      if (in_ESI == 3) {\u000a        ent->fts_info = 4;\u000a        piVar12 = __errno_location();\u000a        ent->fts_errno = *piVar12;\u000a      }\u000a      return (FTSENT *)0x0;\u000a    }\u000a  }\u000a  pVar5 = sp->fts_compar;\u000a  if (in_ESI == 2) {\u000a    lVar15 = 0;\u000a    if (__dirp != (DIR *)0x0) goto LAB_0040f1d8;\u000aLAB_0040f1ea:\u000a    if ((in_ESI == 3) || (lVar15 != 0)) {\u000a      bVar6 = 1;\u000a      if ((*(byte *)((long)&sp->fts_options + 1) & 2) == 0) {\u000aLAB_0040f22f:\u000a        if ((-1 < (int)local_a4) &&\u000a           (iVar11 = fts_safe_changedir(sp,ent,(char *)(ulong)local_a4), iVar11 == 0))\u000a        goto LAB_0040f1d8;\u000a      }\u000a      else {\u000a        local_a4 = dup_safer();\u000a        if (-1 < (int)local_a4) {\u000a          set_cloexec_flag();\u000a          goto LAB_0040f22f;\u000a        }\u000a      }\u000a      if ((in_ESI == 3) && (lVar15 != 0)) {\u000a        piVar12 = __errno_location();\u000a        ent->fts_errno = *piVar12;\u000a      }\u000a      *(byte *)&ent->fts_flags = *(byte *)&ent->fts_flags | 1;\u000a      closedir((DIR *)ent->fts_dirp);\u000a      ent->fts_dirp = (DIR *)0x0;\u000a      if (((sp->fts_options & 0x200U) != 0) && (-1 < (int)local_a4)) {\u000a        close(local_a4);\u000a      }\u000a      ent->fts_dirp = (DIR *)0x0;\u000a    }\u000a    else {\u000a      bVar6 = 1;\u000a    }\u000a  }\u000a  else {\u000a    lVar15 = -1;\u000a    if ((sp->fts_options & 0x18U) == 0x18) {\u000a      lVar15 = ent->fts_statp[0].st_nlink - (ulong)(~((uint)sp->fts_options >> 4) & 2);\u000a    }\u000a    if (__dirp == (DIR *)0x0) goto LAB_0040f1ea;\u000aLAB_0040f1d8:\u000a    bVar6 = 0;\u000a  }\u000a  sVar4 = ent->fts_pathlen;\u000a  sVar14 = sVar4 - 1;\u000a  if (ent->fts_path[sVar4 - 1] != '/') {\u000a    sVar14 = sVar4;\u000a  }\u000a  if ((*(byte *)&sp->fts_options & 4) == 0) {\u000a    local_88 = (char *)0x0;\u000a  }\u000a  else {\u000a    local_88 = sp->fts_path + sVar14 + 1;\u000a    sp->fts_path[sVar14] = '/';\u000a  }\u000a  uVar1 = sVar14 + 1;\u000a  local_58 = sp->fts_pathlen - uVar1;\u000a  lVar15 = ent->fts_level;\u000a  bVar7 = false;\u000a  local_60 = (FTSENT *)0x0;\u000a  nitems = 0;\u000a  head = (FTSENT *)0x0;\u000a  do {\u000a    __dirp_00 = ent->fts_dirp;\u000a    if (__dirp_00 == (DIR *)0x0) {\u000a      if (bVar7) goto LAB_0040f58a;\u000a      goto LAB_0040f595;\u000a    }\u000a    while( true ) {\u000a      pdVar13 = readdir((DIR *)__dirp_00);\u000a      if (pdVar13 == (dirent *)0x0) {\u000a        if ((DIR *)ent->fts_dirp != (DIR *)0x0) {\u000a          closedir((DIR *)ent->fts_dirp);\u000a          ent->fts_dirp = (DIR *)0x0;\u000a        }\u000a        goto LAB_0040f583;\u000a      }\u000a      if (((*(byte *)&sp->fts_options & 0x20) != 0) || (pdVar13->d_name[0] != '.')) break;\u000a      cVar3 = pdVar13->d_name[1];\u000a      if (cVar3 == '.') {\u000a        cVar3 = pdVar13->d_name[2];\u000a      }\u000a      if (cVar3 != 0) break;\u000a      __dirp_00 = ent->fts_dirp;\u000a      if (__dirp_00 == (DIR *)0x0) goto LAB_0040f583;\u000a    }\u000a    namelen = strlen(pdVar13->d_name);\u000a    p = fts_alloc(sp,pdVar13->d_name,namelen);\u000a    if (p == (FTSENT *)0x0) {\u000aLAB_0040f6c8:\u000a      piVar12 = __errno_location();\u000a      iVar11 = *piVar12;\u000a      free(p);\u000a      fts_lfree(head);\u000a      closedir((DIR *)ent->fts_dirp);\u000a      ent->fts_dirp = (DIR *)0x0;\u000a      ent->fts_info = 7;\u000a      pbVar2 = (byte *)((long)&sp->fts_options + 1);\u000a      *pbVar2 = *pbVar2 | 0x40;\u000a      *piVar12 = iVar11;\u000a      return (FTSENT *)0;\u000a    }\u000a    if (local_58 <= namelen) {\u000a      dir = sp->fts_path;\u000a      _Var9 = fts_palloc(sp,sVar14 + 2 + namelen);\u000a      if (_Var9 == false) goto LAB_0040f6c8;\u000a      if (dir != sp->fts_path) {\u000a        if ((*(byte *)&sp->fts_options & 4) != 0) {\u000a          local_88 = sp->fts_path + uVar1;\u000a        }\u000a        bVar7 = true;\u000a      }\u000a      local_58 = sp->fts_pathlen - uVar1;\u000a    }\u000a    if (CARRY8(namelen,uVar1)) {\u000a      free(p);\u000a      fts_lfree(head);\u000a      closedir((DIR *)ent->fts_dirp);\u000a      ent->fts_dirp = (DIR *)0x0;\u000a      ent->fts_info = 7;\u000a      pbVar2 = (byte *)((long)&sp->fts_options + 1);\u000a      *pbVar2 = *pbVar2 | 0x40;\u000a      piVar12 = __errno_location();\u000a      *piVar12 = 0x24;\u000a      return (FTSENT *)0;\u000a    }\u000a    p->fts_level = lVar15 + 1;\u000a    p->fts_parent = sp->fts_cur;\u000a    p->fts_pathlen = namelen + uVar1;\u000a    p->fts_statp[0].st_ino = pdVar13->d_ino;\u000a    if ((*(byte *)&sp->fts_options & 4) == 0) {\u000a      *(FTSENT **)&p->fts_accpath = p + 1;\u000a    }\u000a    else {\u000a      p->fts_accpath = p->fts_path;\u000a      memmove(local_88,p + 1,p->fts_namelen + 1);\u000a    }\u000a    if ((sp->fts_compar == (int (*)(_ftsent **,_ftsent **))0x0) || ((sp->fts_options & 0x400U) != 0)\u000a       ) {\u000a      p->fts_info = 0xb;\u000a      set_stat_type(p->fts_statp);\u000a      fts_set_stat_required(p);\u000a    }\u000a    else {\u000a      uVar10 = fts_stat(sp,p);\u000a      p->fts_info = uVar10;\u000a    }\u000a    p->fts_link = (_ftsent *)0x0;\u000a    pFVar8 = p;\u000a    if (head != (FTSENT *)0x0) {\u000a      *(FTSENT **)&local_60->fts_link = p;\u000a      pFVar8 = head;\u000a    }\u000a    head = pFVar8;\u000a    nitems = nitems + 1;\u000a    local_60 = p;\u000a  } while (nitems < (~-(ulong)(pVar5 == (int (*)(_ftsent **,_ftsent **))0x0) | 100000));\u000aLAB_0040f583:\u000a  if (bVar7) {\u000aLAB_0040f58a:\u000a    fts_padjust(sp,head);\u000a  }\u000aLAB_0040f595:\u000a  if ((*(byte *)&sp->fts_options & 4) != 0) {\u000a    dir = local_88;\u000a    if (uVar1 == sp->fts_pathlen) {\u000a      dir = local_88 + -1;\u000a    }\u000a    if (nitems == 0) {\u000a      dir = local_88 + -1;\u000a    }\u000a    *dir = 0;\u000a  }\u000a  if (!(bool)(__dirp != (DIR *)0x0 | bVar6)) {\u000a    if ((in_ESI != 1) && (nitems != 0)) goto LAB_0040f5f0;\u000a    if (ent->fts_level == 0) {\u000a      iVar11 = restore_initial_cwd(sp);\u000a    }\u000a    else {\u000a      iVar11 = fts_safe_changedir(sp,(FTSENT *)ent->fts_parent,(char *)0xffffffff);\u000a    }\u000a    if (iVar11 != 0) {\u000a      ent->fts_info = 7;\u000a      pbVar2 = (byte *)((long)&sp->fts_options + 1);\u000a      *pbVar2 = *pbVar2 | 0x40;\u000a      goto LAB_0040f698;\u000a    }\u000a  }\u000a  if (nitems == 0) {\u000a    if (in_ESI == 3) {\u000a      ent->fts_info = 6;\u000a    }\u000aLAB_0040f698:\u000a    fts_lfree(head);\u000a    return (FTSENT *)0;\u000a  }\u000aLAB_0040f5f0:\u000a  if ((((10000 < nitems) && (sp->fts_compar == (int (*)(_ftsent **,_ftsent **))0x0)) &&\u000a      ((*(byte *)((long)&sp->fts_options + 1) & 2) != 0)) &&\u000a     (_Var9 = dirent_inode_sort_may_be_useful(), _Var9 != false)) {\u000a    sp->fts_compar = fts_compare_ino;\u000a    head = fts_sort(sp,head,nitems);\u000a    sp->fts_compar = (int (*)(_ftsent **,_ftsent **))0x0;\u000a  }\u000a  if (nitems < 2) {\u000a    return head;\u000a  }\u000a  if (sp->fts_compar == (int (*)(_ftsent **,_ftsent **))0x0) {\u000a    return head;\u000a  }\u000a  ent = fts_sort(sp,head,nitems);\u000a  return ent;\u000a}\u000a\u000a
p2677
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x78\nMOV R12D,ESI\nMOV R15,RDI\nMOV RBX,qword ptr [R15]\nMOV R14,qword ptr [RBX + 0x18]\nTEST R14,R14\nJZ 0x0040f0c4\nMOV RDI,R14\nCALL 0x00402490\nMOV dword ptr [RSP + 0x4],EAX\nTEST EAX,EAX\nJNS 0x0040f18a\nMOV RDI,qword ptr [RBX + 0x18]\nCALL 0x004023e0\nMOV qword ptr [RBX + 0x18],0x0\nCMP R12D,0x3\nJZ 0x0040f143\nJMP 0x0040f6a0\nMOV ECX,dword ptr [R15 + 0x48]\nMOV EAX,ECX\nAND EAX,0x204\nMOV EDI,0xffffff9c\nCMP EAX,0x200\nJNZ 0x0040f0df\nMOV EDI,dword ptr [R15 + 0x2c]\nMOV RSI,qword ptr [RBX + 0x30]\nXOR EAX,EAX\nTEST CL,0x10\nJZ 0x0040f0fb\nTEST CL,0x1\nJZ 0x0040f0f6\nCMP qword ptr [RBX + 0x58],0x0\nJZ 0x0040f0fb\nMOV EAX,0x20000\nMOV EDX,dword ptr [R15 + 0x48]\nSHL EDX,0x7\nAND EDX,0x40000\nOR EDX,EAX\nLEA RCX,[RSP + 0x4]\nCALL 0x0040fc00\nMOV qword ptr [RBX + 0x18],RAX\nTEST RAX,RAX\nJZ 0x0040f139\nMOVZX EAX,word ptr [RBX + 0x70]\nCMP EAX,0xb\nJNZ 0x0040f158\nXOR EDX,EDX\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x0040e3b0\nMOV word ptr [RBX + 0x70],AX\nJMP 0x0040f18a\nCMP R12D,0x3\nJNZ 0x0040f6a0\nMOV word ptr [RBX + 0x70],0x4\nCALL 0x00402100\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RBX + 0x40],EAX\nJMP 0x0040f6a0\nTEST byte ptr [R15 + 0x49],0x1\nJZ 0x0040f18a\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x0040ee50\nXOR EDX,EDX\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x0040e3b0\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x0040f920\nTEST AL,AL\nJZ 0x0040f70b\nMOV qword ptr [RSP + 0x8],RBX\nCMP qword ptr [R15 + 0x40],0x1\nSBB RBP,RBP\nCMP R12D,0x2\nJNZ 0x0040f1a7\nXOR R13D,R13D\nTEST R14,R14\nJNZ 0x0040f1d8\nJMP 0x0040f1ea\nMOV EAX,dword ptr [R15 + 0x48]\nMOV ECX,EAX\nAND ECX,0x18\nMOV R13,-0x1\nCMP ECX,0x18\nJNZ 0x0040f1d3\nMOV RCX,qword ptr [RSP + 0x8]\nMOV R13,qword ptr [0x88 + RCX]\nSHR EAX,0x4\nNOT EAX\nAND EAX,0x2\nSUB R13,RAX\nTEST R14,R14\nJZ 0x0040f1ea\nMOV dword ptr [RSP + 0x14],0x0\nMOV RBX,qword ptr [RSP + 0x8]\nJMP 0x0040f29c\nCMP R12D,0x3\nJZ 0x0040f205\nTEST R13,R13\nJNZ 0x0040f205\nMOV AL,0x1\nMOV dword ptr [RSP + 0x14],EAX\nMOV RBX,qword ptr [RSP + 0x8]\nJMP 0x0040f29c\nMOV AL,0x1\nMOV dword ptr [RSP + 0x14],EAX\nTEST byte ptr [R15 + 0x49],0x2\nJZ 0x0040f22f\nMOV EDI,dword ptr [RSP + 0x4]\nCALL 0x0040c710\nMOV dword ptr [RSP + 0x4],EAX\nTEST EAX,EAX\nJS 0x0040f24a\nMOV ESI,0x1\nMOV EDI,EAX\nCALL 0x004106e0\nMOV EDX,dword ptr [RSP + 0x4]\nTEST EDX,EDX\nJS 0x0040f24a\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,qword ptr [RSP + 0x8]\nCALL 0x0040eee0\nTEST EAX,EAX\nJZ 0x0040f1d8\nCMP R12D,0x3\nJNZ 0x0040f264\nTEST R13,R13\nJZ 0x0040f264\nCALL 0x00402100\nMOV EAX,dword ptr [RAX]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV dword ptr [RCX + 0x40],EAX\nMOV RBX,qword ptr [RSP + 0x8]\nOR byte ptr [RBX + 0x72],0x1\nMOV RDI,qword ptr [RBX + 0x18]\nCALL 0x004023e0\nMOV qword ptr [RBX + 0x18],0x0\nMOV EAX,dword ptr [R15 + 0x48]\nTEST AH,0x2\nJZ 0x0040f294\nMOV EDI,dword ptr [RSP + 0x4]\nTEST EDI,EDI\nJS 0x0040f294\nCALL 0x004023c0\nMOV qword ptr [RBX + 0x18],0x0\nNOT RBP\nMOV RAX,qword ptr [RBX + 0x38]\nMOV RCX,qword ptr [RBX + 0x48]\nCMP byte ptr [RAX + RCX*0x1 + -0x1],0x2f\nLEA RDX,[RCX + -0x1]\nCMOVNZ RDX,RCX\nTEST byte ptr [R15 + 0x48],0x4\nMOV dword ptr [RSP + 0x2c],R12D\nMOV qword ptr [RSP + 0x60],R14\nJNZ 0x0040f2ce\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x20],RAX\nJMP 0x0040f2e0\nMOV RAX,qword ptr [R15 + 0x20]\nLEA RCX,[RAX + RDX*0x1 + 0x1]\nMOV qword ptr [RSP + 0x20],RCX\nMOV byte ptr [RAX + RDX*0x1],0x2f\nOR RBP,0x186a0\nMOV qword ptr [RSP + 0x70],RBP\nLEA R13,[RDX + 0x1]\nMOV RAX,qword ptr [R15 + 0x30]\nSUB RAX,R13\nMOV qword ptr [RSP + 0x50],RAX\nMOV RAX,qword ptr [RBX + 0x58]\nINC RAX\nMOV qword ptr [RSP + 0x68],RAX\nADD RDX,0x2\nMOV qword ptr [RSP + 0x58],RDX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x40],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x48],RAX\nXOR R14D,R14D\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x38],R13\nMOV RDI,qword ptr [RBX + 0x18]\nTEST RDI,RDI\nJZ 0x0040f6b5\nMOV qword ptr [RSP + 0x18],RAX\nNOP dword ptr [RAX + RAX*0x1]\nCALL 0x00402520\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x0040f568\nTEST byte ptr [R15 + 0x48],0x20\nJNZ 0x0040f390\nCMP byte ptr [RBP + 0x13],0x2e\nJNZ 0x0040f390\nMOVZX EAX,byte ptr [RBP + 0x14]\nCMP AL,0x2e\nJZ 0x0040f370\nTEST AL,AL\nJZ 0x0040f376\nJMP 0x0040f390\nCMP byte ptr [RBP + 0x15],0x0\nJNZ 0x0040f390\nMOV RDI,qword ptr [RBX + 0x18]\nTEST RDI,RDI\nJNZ 0x0040f340\nJMP 0x0040f57e\nMOV qword ptr [RSP + 0x30],R14\nMOV RBX,RBP\nADD RBX,0x13\nMOV RDI,RBX\nCALL 0x00402290\nMOV R12,RAX\nMOV RDI,R15\nMOV RSI,RBX\nMOV RDX,R12\nCALL 0x0040e300\nMOV R13,RAX\nTEST R13,R13\nJZ 0x0040f6c8\nMOV RAX,qword ptr [RSP + 0x50]\nCMP R12,RAX\nJNC 0x0040f3e0\nMOV R14,qword ptr [RSP + 0x30]\nMOV RDX,qword ptr [RSP + 0x38]\nADD R12,RDX\nJNC 0x0040f449\nJMP 0x0040f718\nMOV RBX,qword ptr [R15 + 0x20]\nMOV RAX,qword ptr [RSP + 0x58]\nLEA RSI,[RAX + R12*0x1]\nMOV RDI,R15\nCALL 0x0040e2a0\nTEST AL,AL\nJZ 0x0040f6c8\nMOV RAX,qword ptr [R15 + 0x20]\nCMP RBX,RAX\nJZ 0x0040f42f\nMOV RDX,qword ptr [RSP + 0x38]\nADD RAX,RDX\nTEST byte ptr [R15 + 0x48],0x4\nMOV RCX,qword ptr [RSP + 0x20]\nCMOVNZ RCX,RAX\nMOV qword ptr [RSP + 0x20],RCX\nMOV AL,0x1\nMOV qword ptr [RSP + 0x40],RAX\nMOV R14,qword ptr [RSP + 0x30]\nJMP 0x0040f439\nMOV R14,qword ptr [RSP + 0x30]\nMOV RDX,qword ptr [RSP + 0x38]\nMOV RAX,qword ptr [R15 + 0x30]\nSUB RAX,RDX\nADD R12,RDX\nJC 0x0040f718\nMOV qword ptr [RSP + 0x50],RAX\nMOV RAX,qword ptr [RSP + 0x68]\nMOV qword ptr [R13 + 0x58],RAX\nMOV RAX,qword ptr [R15]\nMOV qword ptr [R13 + 0x8],RAX\nMOV qword ptr [R13 + 0x48],R12\nMOV RAX,qword ptr [RBP]\nMOV qword ptr [0x80 + R13],RAX\nTEST byte ptr [R15 + 0x48],0x4\nJNZ 0x0040f490\nLEA RAX,[0x108 + R13]\nMOV qword ptr [R13 + 0x30],RAX\nJMP 0x0040f4b0\nMOV RAX,qword ptr [R13 + 0x38]\nMOV qword ptr [R13 + 0x30],RAX\nLEA RSI,[0x108 + R13]\nMOV RDX,qword ptr [R13 + 0x60]\nINC RDX\nMOV RDI,qword ptr [RSP + 0x20]\nCALL 0x00402630\nMOV EAX,dword ptr [R15 + 0x48]\nCMP qword ptr [R15 + 0x40],0x0\nJZ 0x0040f4e0\nMOV ECX,EAX\nAND ECX,0x400\nJNZ 0x0040f4e0\nXOR EDX,EDX\nMOV RDI,R15\nMOV RSI,R13\nCALL 0x0040e3b0\nMOV word ptr [R13 + 0x70],AX\nJMP 0x0040f525\nMOV RDI,R13\nADD RDI,0x78\nAND EAX,0x18\nCMP EAX,0x18\nJNZ 0x0040f500\nMOV AL,byte ptr [RBP + 0x12]\nCMP AL,0x4\nSETNZ CL\nTEST AL,AL\nSETNZ BL\nAND BL,CL\nJMP 0x0040f502\nXOR EBX,EBX\nMOV word ptr [R13 + 0x70],0xb\nMOVZX ESI,byte ptr [RBP + 0x12]\nCALL 0x0040fc60\nXOR BL,0x1\nMOVZX ESI,BL\nMOV RDI,R13\nCALL 0x0040e390\nMOV R14,qword ptr [RSP + 0x30]\nMOV qword ptr [R13 + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x18]\nTEST RAX,RAX\nMOV R12,R13\nJZ 0x0040f546\nMOV RCX,qword ptr [RSP + 0x48]\nMOV qword ptr [RCX + 0x10],R13\nMOV R12,RAX\nINC R14\nCMP qword ptr [RSP + 0x70],R14\nMOV qword ptr [RSP + 0x48],R13\nMOV RAX,R12\nMOV R13,qword ptr [RSP + 0x38]\nMOV RBX,qword ptr [RSP + 0x8]\nJA 0x0040f329\nJMP 0x0040f583\nMOV RDI,qword ptr [RBX + 0x18]\nTEST RDI,RDI\nJZ 0x0040f57e\nCALL 0x004023e0\nMOV qword ptr [RBX + 0x18],0x0\nMOV R12,qword ptr [RSP + 0x18]\nTEST byte ptr [RSP + 0x40],0x1\nJZ 0x0040f595\nMOV RDI,R15\nMOV RSI,R12\nCALL 0x0040fc80\nTEST byte ptr [R15 + 0x48],0x4\nJZ 0x0040f5ba\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,RAX\nLEA RAX,[RCX + -0x1]\nCMP R13,qword ptr [R15 + 0x30]\nCMOVZ RCX,RAX\nTEST R14,R14\nCMOVZ RCX,RAX\nMOV byte ptr [RCX],0x0\nCMP qword ptr [RSP + 0x60],0x0\nSETNZ AL\nOR AL,byte ptr [RSP + 0x14]\nJZ 0x0040f5e4\nTEST R14,R14\nJNZ 0x0040f5f0\nCMP dword ptr [RSP + 0x2c],0x3\nJNZ 0x0040f698\nMOV word ptr [RBX + 0x70],0x6\nJMP 0x0040f698\nCMP dword ptr [RSP + 0x2c],0x1\nJZ 0x0040f657\nTEST R14,R14\nJZ 0x0040f657\nCMP R14,0x2711\nJC 0x0040f635\nCMP qword ptr [R15 + 0x40],0x0\nJNZ 0x0040f635\nTEST byte ptr [R15 + 0x49],0x2\nJZ 0x0040f635\nMOV EDI,dword ptr [R15 + 0x2c]\nCALL 0x0040fd00\nTEST AL,AL\nJZ 0x0040f635\nMOV qword ptr [R15 + 0x40],0x40fd40\nMOV RDI,R15\nMOV RSI,R12\nMOV RDX,R14\nCALL 0x0040e520\nMOV R12,RAX\nMOV qword ptr [R15 + 0x40],0x0\nCMP R14,0x2\nJC 0x0040f6a3\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nJZ 0x0040f6a3\nMOV RDI,R15\nMOV RSI,R12\nMOV RDX,R14\nCALL 0x0040e520\nMOV R12,RAX\nJMP 0x0040f6a3\nCMP qword ptr [RBX + 0x58],0x0\nJZ 0x0040f67d\nMOV RSI,qword ptr [RBX + 0x8]\nMOV EDX,0xffffffff\nMOV ECX,0x4124df\nMOV RDI,R15\nCALL 0x0040eee0\nTEST EAX,EAX\nJNZ 0x0040f68d\nJMP 0x0040f5c9\nMOV RDI,R15\nCALL 0x0040f760\nTEST EAX,EAX\nJZ 0x0040f5c9\nMOV word ptr [RBX + 0x70],0x7\nOR byte ptr [R15 + 0x49],0x40\nMOV RDI,R12\nCALL 0x0040e6e0\nXOR R12D,R12D\nMOV RAX,R12\nADD RSP,0x78\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV R12,RAX\nTEST byte ptr [RSP + 0x40],0x1\nJNZ 0x0040f58a\nJMP 0x0040f595\nCALL 0x00402100\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV RDI,R13\nCALL 0x004020c0\nMOV RDI,qword ptr [RSP + 0x18]\nCALL 0x0040e6e0\nMOV RBP,qword ptr [RSP + 0x8]\nMOV RDI,qword ptr [RBP + 0x18]\nCALL 0x004023e0\nMOV qword ptr [RBP + 0x18],0x0\nMOV word ptr [RBP + 0x70],0x7\nOR byte ptr [R15 + 0x49],0x40\nMOV dword ptr [RBX],R14D\nJMP 0x0040f6a0\nCALL 0x00402100\nMOV dword ptr [RAX],0xc\nJMP 0x0040f6a0\nMOV RDI,R13\nCALL 0x004020c0\nMOV RDI,qword ptr [RSP + 0x18]\nCALL 0x0040e6e0\nMOV RBX,qword ptr [RSP + 0x8]\nMOV RDI,qword ptr [RBX + 0x18]\nCALL 0x004023e0\nMOV qword ptr [RBX + 0x18],0x0\nMOV word ptr [RBX + 0x70],0x7\nOR byte ptr [R15 + 0x49],0x40\nCALL 0x00402100\nMOV dword ptr [RAX],0x24\nJMP 0x0040f6a0\n'
p2678
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 78\n41 89 f4\n49 89 ff\n49 8b 1f\n4c 8b 73 18\n4d 85 f6\n74 34\n4c 89 f7\ne8 f8 33 ff ff\n89 44 24 04\n85 c0\n0f 89 e6 00 00 00\n48 8b 7b 18\ne8 33 33 ff ff\n48 c7 43 18 00 00 00 00\n41 83 fc 03\n0f 84 84 00 00 00\ne9 dc 05 00 00\n41 8b 4f 48\n89 c8\n25 04 02 00 00\nbf 9c ff ff ff\n3d 00 02 00 00\n75 04\n41 8b 7f 2c\n48 8b 73 30\n31 c0\nf6 c1 10\n74 11\nf6 c1 01\n74 07\n48 83 7b 58 00\n74 05\nb8 00 00 02 00\n41 8b 57 48\nc1 e2 07\n81 e2 00 00 04 00\n09 c2\n48 8d 4c 24 04\ne8 ec 0a 00 00\n48 89 43 18\n48 85 c0\n74 1c\n0f b7 43 70\n83 f8 0b\n75 32\n31 d2\n4c 89 ff\n48 89 de\ne8 7d f2 ff ff\n66 89 43 70\neb 51\n41 83 fc 03\n0f 85 5d 05 00 00\n66 c7 43 70 04 00\ne8 b2 2f ff ff\n8b 00\n89 43 40\ne9 48 05 00 00\n41 f6 47 49 01\n74 2b\n4c 89 ff\n48 89 de\ne8 e6 fc ff ff\n31 d2\n4c 89 ff\n48 89 de\ne8 39 f2 ff ff\n4c 89 ff\n48 89 de\ne8 9e 07 00 00\n84 c0\n0f 84 81 05 00 00\n48 89 5c 24 08\n49 83 7f 40 01\n48 19 ed\n41 83 fc 02\n75 0a\n45 31 ed\n4d 85 f6\n75 33\neb 43\n41 8b 47 48\n89 c1\n83 e1 18\n49 c7 c5 ff ff ff ff\n83 f9 18\n75 17\n48 8b 4c 24 08\n4c 8b a9 88 00 00 00\nc1 e8 04\nf7 d0\n83 e0 02\n49 29 c5\n4d 85 f6\n74 12\nc7 44 24 14 00 00 00 00\n48 8b 5c 24 08\ne9 b2 00 00 00\n41 83 fc 03\n74 15\n4d 85 ed\n75 10\nb0 01\n89 44 24 14\n48 8b 5c 24 08\ne9 97 00 00 00\nb0 01\n89 44 24 14\n41 f6 47 49 02\n74 1d\n8b 7c 24 04\ne8 f5 d4 ff ff\n89 44 24 04\n85 c0\n78 27\nbe 01 00 00 00\n89 c7\ne8 b1 14 00 00\n8b 54 24 04\n85 d2\n78 13\n31 c9\n4c 89 ff\n48 8b 74 24 08\ne8 9a fc ff ff\n85 c0\n74 8e\n41 83 fc 03\n75 14\n4d 85 ed\n74 0f\ne8 a6 2e ff ff\n8b 00\n48 8b 4c 24 08\n89 41 40\n48 8b 5c 24 08\n80 4b 72 01\n48 8b 7b 18\ne8 6a 31 ff ff\n48 c7 43 18 00 00 00 00\n41 8b 47 48\nf6 c4 02\n74 0d\n8b 7c 24 04\n85 ff\n78 05\ne8 2c 31 ff ff\n48 c7 43 18 00 00 00 00\n48 f7 d5\n48 8b 43 38\n48 8b 4b 48\n80 7c 08 ff 2f\n48 8d 51 ff\n48 0f 45 d1\n41 f6 47 48 04\n44 89 64 24 2c\n4c 89 74 24 60\n75 09\n31 c0\n48 89 44 24 20\neb 12\n49 8b 47 20\n48 8d 4c 10 01\n48 89 4c 24 20\nc6 04 10 2f\n48 81 cd a0 86 01 00\n48 89 6c 24 70\n4c 8d 6a 01\n49 8b 47 30\n4c 29 e8\n48 89 44 24 50\n48 8b 43 58\n48 ff c0\n48 89 44 24 68\n48 83 c2 02\n48 89 54 24 58\n31 c0\n48 89 44 24 40\n31 c0\n48 89 44 24 48\n45 31 f6\n31 c0\n4c 89 6c 24 38\n48 8b 7b 18\n48 85 ff\n0f 84 7f 03 00 00\n48 89 44 24 18\n0f 1f 44 00 00\ne8 db 31 ff ff\n48 89 c5\n48 85 ed\n0f 84 17 02 00 00\n41 f6 47 48 20\n75 38\n80 7d 13 2e\n75 32\n0f b6 45 14\n3c 2e\n74 0a\n84 c0\n74 0c\neb 24\n80 7d 15 00\n75 1a\n48 8b 7b 18\n48 85 ff\n75 c1\ne9 fa 01 00 00\n4c 89 74 24 30\n48 89 eb\n48 83 c3 13\n48 89 df\ne8 ec 2e ff ff\n49 89 c4\n4c 89 ff\n48 89 de\n4c 89 e2\ne8 4b ef ff ff\n49 89 c5\n4d 85 ed\n0f 84 07 03 00 00\n48 8b 44 24 50\n49 39 c4\n73 15\n4c 8b 74 24 30\n48 8b 54 24 38\n49 01 d4\n73 6f\ne9 39 03 00 00\n49 8b 5f 20\n48 8b 44 24 58\n4a 8d 34 20\n4c 89 ff\ne8 ab ee ff ff\n84 c0\n0f 84 cb 02 00 00\n49 8b 47 20\n48 39 c3\n74 29\n48 8b 54 24 38\n48 01 d0\n41 f6 47 48 04\n48 8b 4c 24 20\n48 0f 45 c8\n48 89 4c 24 20\nb0 01\n48 89 44 24 40\n4c 8b 74 24 30\neb 0a\n4c 8b 74 24 30\n48 8b 54 24 38\n49 8b 47 30\n48 29 d0\n49 01 d4\n0f 82 cf 02 00 00\n48 89 44 24 50\n48 8b 44 24 68\n49 89 45 58\n49 8b 07\n49 89 45 08\n4d 89 65 48\n48 8b 45 00\n49 89 85 80 00 00 00\n41 f6 47 48 04\n75 1c\n49 8d 85 08 01 00 00\n49 89 45 30\neb 2f\n49 8b 45 38\n49 89 45 30\n49 8d b5 08 01 00 00\n49 8b 55 60\n48 ff c2\n48 8b 7c 24 20\ne8 80 31 ff ff\n41 8b 47 48\n49 83 7f 40 00\n74 25\n89 c1\n81 e1 00 04 00 00\n75 1b\n31 d2\n4c 89 ff\n4c 89 ee\ne8 de ee ff ff\n66 41 89 45 70\neb 4c\n4c 89 ef\n48 83 c7 78\n83 e0 18\n83 f8 18\n75 11\n8a 45 12\n3c 04\n0f 95 c1\n84 c0\n0f 95 c3\n20 cb\neb 02\n31 db\n66 41 c7 45 70 0b 00\n0f b6 75 12\ne8 4e 07 00 00\n80 f3 01\n0f b6 f3\n4c 89 ef\ne8 70 ee ff ff\n4c 8b 74 24 30\n49 c7 45 10 00 00 00 00\n48 8b 44 24 18\n48 85 c0\n4d 89 ec\n74 0c\n48 8b 4c 24 48\n4c 89 69 10\n49 89 c4\n49 ff c6\n4c 39 74 24 70\n4c 89 6c 24 48\n4c 89 e0\n4c 8b 6c 24 38\n48 8b 5c 24 08\n0f 87 c3 fd ff ff\neb 1b\n48 8b 7b 18\n48 85 ff\n74 0d\ne8 6a 2e ff ff\n48 c7 43 18 00 00 00 00\n4c 8b 64 24 18\nf6 44 24 40 01\n74 0b\n4c 89 ff\n4c 89 e6\ne8 eb 06 00 00\n41 f6 47 48 04\n74 1e\n48 8b 44 24 20\n48 89 c1\n48 8d 41 ff\n4d 3b 6f 30\n48 0f 44 c8\n4d 85 f6\n48 0f 44 c8\nc6 01 00\n48 83 7c 24 60 00\n0f 95 c0\n0a 44 24 14\n74 1b\n4d 85 f6\n75 22\n83 7c 24 2c 03\n0f 85 bf 00 00 00\n66 c7 43 70 06 00\ne9 b4 00 00 00\n83 7c 24 2c 01\n74 6c\n4d 85 f6\n74 67\n49 81 fe 11 27 00 00\n72 3c\n49 83 7f 40 00\n75 35\n41 f6 47 49 02\n74 2e\n41 8b 7f 2c\ne8 f0 06 00 00\n84 c0\n74 21\n49 c7 47 40 40 fd 40 00\n4c 89 ff\n4c 89 e6\n4c 89 f2\ne8 f6 ee ff ff\n49 89 c4\n49 c7 47 40 00 00 00 00\n49 83 fe 02\n72 68\n49 8b 47 40\n48 85 c0\n74 5f\n4c 89 ff\n4c 89 e6\n4c 89 f2\ne8 ce ee ff ff\n49 89 c4\neb 4c\n48 83 7b 58 00\n74 1f\n48 8b 73 08\nba ff ff ff ff\nb9 df 24 41 00\n4c 89 ff\ne8 6c f8 ff ff\n85 c0\n75 15\ne9 4c ff ff ff\n4c 89 ff\ne8 db 00 00 00\n85 c0\n0f 84 3c ff ff ff\n66 c7 43 70 07 00\n41 80 4f 49 40\n4c 89 e7\ne8 40 f0 ff ff\n45 31 e4\n4c 89 e0\n48 83 c4 78\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n49 89 c4\nf6 44 24 40 01\n0f 85 c7 fe ff ff\ne9 cd fe ff ff\ne8 33 2a ff ff\n48 89 c3\n44 8b 33\n4c 89 ef\ne8 e5 29 ff ff\n48 8b 7c 24 18\ne8 fb ef ff ff\n48 8b 6c 24 08\n48 8b 7d 18\ne8 ed 2c ff ff\n48 c7 45 18 00 00 00 00\n66 c7 45 70 07 00\n41 80 4f 49 40\n44 89 33\neb 95\ne8 f0 29 ff ff\nc7 00 0c 00 00 00\neb 88\n4c 89 ef\ne8 a0 29 ff ff\n48 8b 7c 24 18\ne8 b6 ef ff ff\n48 8b 5c 24 08\n48 8b 7b 18\ne8 a8 2c ff ff\n48 c7 43 18 00 00 00 00\n66 c7 43 70 07 00\n41 80 4f 49 40\ne8 b0 29 ff ff\nc7 00 24 00 00 00\ne9 45 ff ff ff\n'
p2679
S'.text:000000000040f070\n.text:000000000040f071\n.text:000000000040f073\n.text:000000000040f075\n.text:000000000040f077\n.text:000000000040f079\n.text:000000000040f07a\n.text:000000000040f07e\n.text:000000000040f081\n.text:000000000040f084\n.text:000000000040f087\n.text:000000000040f08b\n.text:000000000040f08e\n.text:000000000040f090\n.text:000000000040f093\n.text:000000000040f098\n.text:000000000040f09c\n.text:000000000040f09e\n.text:000000000040f0a4\n.text:000000000040f0a8\n.text:000000000040f0ad\n.text:000000000040f0b5\n.text:000000000040f0b9\n.text:000000000040f0bf\n.text:000000000040f0c4\n.text:000000000040f0c8\n.text:000000000040f0ca\n.text:000000000040f0cf\n.text:000000000040f0d4\n.text:000000000040f0d9\n.text:000000000040f0db\n.text:000000000040f0df\n.text:000000000040f0e3\n.text:000000000040f0e5\n.text:000000000040f0e8\n.text:000000000040f0ea\n.text:000000000040f0ed\n.text:000000000040f0ef\n.text:000000000040f0f4\n.text:000000000040f0f6\n.text:000000000040f0fb\n.text:000000000040f0ff\n.text:000000000040f102\n.text:000000000040f108\n.text:000000000040f10a\n.text:000000000040f10f\n.text:000000000040f114\n.text:000000000040f118\n.text:000000000040f11b\n.text:000000000040f11d\n.text:000000000040f121\n.text:000000000040f124\n.text:000000000040f126\n.text:000000000040f128\n.text:000000000040f12b\n.text:000000000040f12e\n.text:000000000040f133\n.text:000000000040f137\n.text:000000000040f139\n.text:000000000040f13d\n.text:000000000040f143\n.text:000000000040f149\n.text:000000000040f14e\n.text:000000000040f150\n.text:000000000040f153\n.text:000000000040f158\n.text:000000000040f15d\n.text:000000000040f15f\n.text:000000000040f162\n.text:000000000040f165\n.text:000000000040f16a\n.text:000000000040f16c\n.text:000000000040f16f\n.text:000000000040f172\n.text:000000000040f177\n.text:000000000040f17a\n.text:000000000040f17d\n.text:000000000040f182\n.text:000000000040f184\n.text:000000000040f18a\n.text:000000000040f18f\n.text:000000000040f194\n.text:000000000040f197\n.text:000000000040f19b\n.text:000000000040f19d\n.text:000000000040f1a0\n.text:000000000040f1a3\n.text:000000000040f1a5\n.text:000000000040f1a7\n.text:000000000040f1ab\n.text:000000000040f1ad\n.text:000000000040f1b0\n.text:000000000040f1b7\n.text:000000000040f1ba\n.text:000000000040f1bc\n.text:000000000040f1c1\n.text:000000000040f1c8\n.text:000000000040f1cb\n.text:000000000040f1cd\n.text:000000000040f1d0\n.text:000000000040f1d3\n.text:000000000040f1d6\n.text:000000000040f1d8\n.text:000000000040f1e0\n.text:000000000040f1e5\n.text:000000000040f1ea\n.text:000000000040f1ee\n.text:000000000040f1f0\n.text:000000000040f1f3\n.text:000000000040f1f5\n.text:000000000040f1f7\n.text:000000000040f1fb\n.text:000000000040f200\n.text:000000000040f205\n.text:000000000040f207\n.text:000000000040f20b\n.text:000000000040f210\n.text:000000000040f212\n.text:000000000040f216\n.text:000000000040f21b\n.text:000000000040f21f\n.text:000000000040f221\n.text:000000000040f223\n.text:000000000040f228\n.text:000000000040f22a\n.text:000000000040f22f\n.text:000000000040f233\n.text:000000000040f235\n.text:000000000040f237\n.text:000000000040f239\n.text:000000000040f23c\n.text:000000000040f241\n.text:000000000040f246\n.text:000000000040f248\n.text:000000000040f24a\n.text:000000000040f24e\n.text:000000000040f250\n.text:000000000040f253\n.text:000000000040f255\n.text:000000000040f25a\n.text:000000000040f25c\n.text:000000000040f261\n.text:000000000040f264\n.text:000000000040f269\n.text:000000000040f26d\n.text:000000000040f271\n.text:000000000040f276\n.text:000000000040f27e\n.text:000000000040f282\n.text:000000000040f285\n.text:000000000040f287\n.text:000000000040f28b\n.text:000000000040f28d\n.text:000000000040f28f\n.text:000000000040f294\n.text:000000000040f29c\n.text:000000000040f29f\n.text:000000000040f2a3\n.text:000000000040f2a7\n.text:000000000040f2ac\n.text:000000000040f2b0\n.text:000000000040f2b4\n.text:000000000040f2b9\n.text:000000000040f2be\n.text:000000000040f2c3\n.text:000000000040f2c5\n.text:000000000040f2c7\n.text:000000000040f2cc\n.text:000000000040f2ce\n.text:000000000040f2d2\n.text:000000000040f2d7\n.text:000000000040f2dc\n.text:000000000040f2e0\n.text:000000000040f2e7\n.text:000000000040f2ec\n.text:000000000040f2f0\n.text:000000000040f2f4\n.text:000000000040f2f7\n.text:000000000040f2fc\n.text:000000000040f300\n.text:000000000040f303\n.text:000000000040f308\n.text:000000000040f30c\n.text:000000000040f311\n.text:000000000040f313\n.text:000000000040f318\n.text:000000000040f31a\n.text:000000000040f31f\n.text:000000000040f322\n.text:000000000040f324\n.text:000000000040f329\n.text:000000000040f32d\n.text:000000000040f330\n.text:000000000040f336\n.text:000000000040f33b\n.text:000000000040f340\n.text:000000000040f345\n.text:000000000040f348\n.text:000000000040f34b\n.text:000000000040f351\n.text:000000000040f356\n.text:000000000040f358\n.text:000000000040f35c\n.text:000000000040f35e\n.text:000000000040f362\n.text:000000000040f364\n.text:000000000040f366\n.text:000000000040f368\n.text:000000000040f36a\n.text:000000000040f370\n.text:000000000040f374\n.text:000000000040f376\n.text:000000000040f37a\n.text:000000000040f37d\n.text:000000000040f37f\n.text:000000000040f390\n.text:000000000040f395\n.text:000000000040f398\n.text:000000000040f39c\n.text:000000000040f39f\n.text:000000000040f3a4\n.text:000000000040f3a7\n.text:000000000040f3aa\n.text:000000000040f3ad\n.text:000000000040f3b0\n.text:000000000040f3b5\n.text:000000000040f3b8\n.text:000000000040f3bb\n.text:000000000040f3c1\n.text:000000000040f3c6\n.text:000000000040f3c9\n.text:000000000040f3cb\n.text:000000000040f3d0\n.text:000000000040f3d5\n.text:000000000040f3d8\n.text:000000000040f3da\n.text:000000000040f3e0\n.text:000000000040f3e4\n.text:000000000040f3e9\n.text:000000000040f3ed\n.text:000000000040f3f0\n.text:000000000040f3f5\n.text:000000000040f3f7\n.text:000000000040f3fd\n.text:000000000040f401\n.text:000000000040f404\n.text:000000000040f406\n.text:000000000040f40b\n.text:000000000040f40e\n.text:000000000040f413\n.text:000000000040f418\n.text:000000000040f41c\n.text:000000000040f421\n.text:000000000040f423\n.text:000000000040f428\n.text:000000000040f42d\n.text:000000000040f42f\n.text:000000000040f434\n.text:000000000040f439\n.text:000000000040f43d\n.text:000000000040f440\n.text:000000000040f443\n.text:000000000040f449\n.text:000000000040f44e\n.text:000000000040f453\n.text:000000000040f457\n.text:000000000040f45a\n.text:000000000040f45e\n.text:000000000040f462\n.text:000000000040f466\n.text:000000000040f46d\n.text:000000000040f472\n.text:000000000040f474\n.text:000000000040f47b\n.text:000000000040f47f\n.text:000000000040f490\n.text:000000000040f494\n.text:000000000040f498\n.text:000000000040f49f\n.text:000000000040f4a3\n.text:000000000040f4a6\n.text:000000000040f4ab\n.text:000000000040f4b0\n.text:000000000040f4b4\n.text:000000000040f4b9\n.text:000000000040f4bb\n.text:000000000040f4bd\n.text:000000000040f4c3\n.text:000000000040f4c5\n.text:000000000040f4c7\n.text:000000000040f4ca\n.text:000000000040f4cd\n.text:000000000040f4d2\n.text:000000000040f4d7\n.text:000000000040f4e0\n.text:000000000040f4e3\n.text:000000000040f4e7\n.text:000000000040f4ea\n.text:000000000040f4ed\n.text:000000000040f4ef\n.text:000000000040f4f2\n.text:000000000040f4f4\n.text:000000000040f4f7\n.text:000000000040f4f9\n.text:000000000040f4fc\n.text:000000000040f4fe\n.text:000000000040f500\n.text:000000000040f502\n.text:000000000040f509\n.text:000000000040f50d\n.text:000000000040f512\n.text:000000000040f515\n.text:000000000040f518\n.text:000000000040f51b\n.text:000000000040f520\n.text:000000000040f525\n.text:000000000040f52d\n.text:000000000040f532\n.text:000000000040f535\n.text:000000000040f538\n.text:000000000040f53a\n.text:000000000040f53f\n.text:000000000040f543\n.text:000000000040f546\n.text:000000000040f549\n.text:000000000040f54e\n.text:000000000040f553\n.text:000000000040f556\n.text:000000000040f55b\n.text:000000000040f560\n.text:000000000040f566\n.text:000000000040f568\n.text:000000000040f56c\n.text:000000000040f56f\n.text:000000000040f571\n.text:000000000040f576\n.text:000000000040f57e\n.text:000000000040f583\n.text:000000000040f588\n.text:000000000040f58a\n.text:000000000040f58d\n.text:000000000040f590\n.text:000000000040f595\n.text:000000000040f59a\n.text:000000000040f59c\n.text:000000000040f5a1\n.text:000000000040f5a4\n.text:000000000040f5a8\n.text:000000000040f5ac\n.text:000000000040f5b0\n.text:000000000040f5b3\n.text:000000000040f5b7\n.text:000000000040f5ba\n.text:000000000040f5c0\n.text:000000000040f5c3\n.text:000000000040f5c7\n.text:000000000040f5c9\n.text:000000000040f5cc\n.text:000000000040f5ce\n.text:000000000040f5d3\n.text:000000000040f5d9\n.text:000000000040f5df\n.text:000000000040f5e4\n.text:000000000040f5e9\n.text:000000000040f5eb\n.text:000000000040f5ee\n.text:000000000040f5f0\n.text:000000000040f5f7\n.text:000000000040f5f9\n.text:000000000040f5fe\n.text:000000000040f600\n.text:000000000040f605\n.text:000000000040f607\n.text:000000000040f60b\n.text:000000000040f610\n.text:000000000040f612\n.text:000000000040f614\n.text:000000000040f61c\n.text:000000000040f61f\n.text:000000000040f622\n.text:000000000040f625\n.text:000000000040f62a\n.text:000000000040f62d\n.text:000000000040f635\n.text:000000000040f639\n.text:000000000040f63b\n.text:000000000040f63f\n.text:000000000040f642\n.text:000000000040f644\n.text:000000000040f647\n.text:000000000040f64a\n.text:000000000040f64d\n.text:000000000040f652\n.text:000000000040f655\n.text:000000000040f657\n.text:000000000040f65c\n.text:000000000040f65e\n.text:000000000040f662\n.text:000000000040f667\n.text:000000000040f66c\n.text:000000000040f66f\n.text:000000000040f674\n.text:000000000040f676\n.text:000000000040f678\n.text:000000000040f67d\n.text:000000000040f680\n.text:000000000040f685\n.text:000000000040f687\n.text:000000000040f68d\n.text:000000000040f693\n.text:000000000040f698\n.text:000000000040f69b\n.text:000000000040f6a0\n.text:000000000040f6a3\n.text:000000000040f6a6\n.text:000000000040f6aa\n.text:000000000040f6ab\n.text:000000000040f6ad\n.text:000000000040f6af\n.text:000000000040f6b1\n.text:000000000040f6b3\n.text:000000000040f6b4\n.text:000000000040f6b5\n.text:000000000040f6b8\n.text:000000000040f6bd\n.text:000000000040f6c3\n.text:000000000040f6c8\n.text:000000000040f6cd\n.text:000000000040f6d0\n.text:000000000040f6d3\n.text:000000000040f6d6\n.text:000000000040f6db\n.text:000000000040f6e0\n.text:000000000040f6e5\n.text:000000000040f6ea\n.text:000000000040f6ee\n.text:000000000040f6f3\n.text:000000000040f6fb\n.text:000000000040f701\n.text:000000000040f706\n.text:000000000040f709\n.text:000000000040f70b\n.text:000000000040f710\n.text:000000000040f716\n.text:000000000040f718\n.text:000000000040f71b\n.text:000000000040f720\n.text:000000000040f725\n.text:000000000040f72a\n.text:000000000040f72f\n.text:000000000040f733\n.text:000000000040f738\n.text:000000000040f740\n.text:000000000040f746\n.text:000000000040f74b\n.text:000000000040f750\n.text:000000000040f756\n'
p2680
tp2681
sS'areadlink_with_size'
p2682
(S'\n__stdcall areadlink_with_size(char * file, size_t size)\n'
p2683
V\u000achar * areadlink_with_size(char *file,size_t size)\u000a\u000a{\u000a  int iVar1;\u000a  char *__buf;\u000a  ulong uVar2;\u000a  int *piVar3;\u000a  ulong __size;\u000a  bool bVar4;\u000a  \u000a  __size = 0x401;\u000a  if (size < 0x401) {\u000a    __size = size + 1;\u000a  }\u000a  while( true ) {\u000a    __buf = (char *)malloc(__size);\u000a    if (__buf == (char *)0x0) {\u000a      return (char *)0x0;\u000a    }\u000a    uVar2 = readlink(file,__buf,__size);\u000a    if ((long)uVar2 < 0) {\u000a      piVar3 = __errno_location();\u000a      iVar1 = *piVar3;\u000a      if (iVar1 != 0x22) {\u000a        free(__buf);\u000a        *piVar3 = iVar1;\u000a        return (char *)0x0;\u000a      }\u000a    }\u000a    if (uVar2 < __size) break;\u000a    free(__buf);\u000a    if (__size >> 0x3e == 0) {\u000a      __size = __size * 2;\u000a    }\u000a    else {\u000a      bVar4 = 0x7ffffffffffffffe < __size;\u000a      __size = 0x7fffffffffffffff;\u000a      if (bVar4) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = 0xc;\u000a        return (char *)0x0;\u000a      }\u000a    }\u000a  }\u000a  __buf[uVar2] = 0;\u000a  return __buf;\u000a}\u000a\u000a
p2684
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCMP RSI,0x401\nLEA RAX,[RSI + 0x1]\nMOV EBX,0x401\nCMOVC RBX,RAX\nJMP 0x00408763\nADD RBX,RBX\nMOV RDI,RBX\nCALL 0x00402540\nMOV R15,RAX\nTEST R15,R15\nJZ 0x004087e2\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,RBX\nCALL 0x004021c0\nMOV R12,RAX\nTEST R12,R12\nJNS 0x0040879a\nCALL 0x00402100\nMOV R13,RAX\nMOV EBP,dword ptr [R13]\nCMP EBP,0x22\nJNZ 0x004087d6\nCMP R12,RBX\nJC 0x004087cf\nMOV RDI,R15\nCALL 0x004020c0\nMOV RAX,RBX\nSHR RAX,0x3e\nJZ 0x00408760\nMOV RAX,0x7fffffffffffffff\nCMP RBX,RAX\nMOV RBX,RAX\nJC 0x00408763\nCALL 0x00402100\nMOV dword ptr [RAX],0xc\nJMP 0x004087e2\nMOV byte ptr [R15 + R12*0x1],0x0\nJMP 0x004087e5\nMOV RDI,R15\nCALL 0x004020c0\nMOV dword ptr [R13],EBP\nXOR R15D,R15D\nMOV RAX,R15\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2685
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 fe\n48 81 fe 01 04 00 00\n48 8d 46 01\nbb 01 04 00 00\n48 0f 42 d8\neb 0f\n48 01 db\n48 89 df\ne8 d5 9d ff ff\n49 89 c7\n4d 85 ff\n74 6f\n4c 89 f7\n4c 89 fe\n48 89 da\ne8 3f 9a ff ff\n49 89 c4\n4d 85 e4\n79 11\ne8 72 99 ff ff\n49 89 c5\n41 8b 6d 00\n83 fd 22\n75 3c\n49 39 dc\n72 30\n4c 89 ff\ne8 19 99 ff ff\n48 89 d8\n48 c1 e8 3e\n74 b0\n48 b8 ff ff ff ff ff ff ff 7f\n48 39 c3\n48 89 c3\n72 a1\ne8 39 99 ff ff\nc7 00 0c 00 00 00\neb 13\n43 c6 04 27 00\neb 0f\n4c 89 ff\ne8 e2 98 ff ff\n41 89 6d 00\n45 31 ff\n4c 89 f8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2686
S'.text:0000000000408730\n.text:0000000000408731\n.text:0000000000408733\n.text:0000000000408735\n.text:0000000000408737\n.text:0000000000408739\n.text:000000000040873a\n.text:000000000040873b\n.text:000000000040873e\n.text:0000000000408745\n.text:0000000000408749\n.text:000000000040874e\n.text:0000000000408752\n.text:0000000000408760\n.text:0000000000408763\n.text:0000000000408766\n.text:000000000040876b\n.text:000000000040876e\n.text:0000000000408771\n.text:0000000000408773\n.text:0000000000408776\n.text:0000000000408779\n.text:000000000040877c\n.text:0000000000408781\n.text:0000000000408784\n.text:0000000000408787\n.text:0000000000408789\n.text:000000000040878e\n.text:0000000000408791\n.text:0000000000408795\n.text:0000000000408798\n.text:000000000040879a\n.text:000000000040879d\n.text:000000000040879f\n.text:00000000004087a2\n.text:00000000004087a7\n.text:00000000004087aa\n.text:00000000004087ae\n.text:00000000004087b0\n.text:00000000004087ba\n.text:00000000004087bd\n.text:00000000004087c0\n.text:00000000004087c2\n.text:00000000004087c7\n.text:00000000004087cd\n.text:00000000004087cf\n.text:00000000004087d4\n.text:00000000004087d6\n.text:00000000004087d9\n.text:00000000004087de\n.text:00000000004087e2\n.text:00000000004087e5\n.text:00000000004087e8\n.text:00000000004087ec\n.text:00000000004087ed\n.text:00000000004087ef\n.text:00000000004087f1\n.text:00000000004087f3\n.text:00000000004087f5\n.text:00000000004087f6\n'
p2687
tp2688
sS'quotearg_style'
p2689
(S'\n__stdcall quotearg_style(char * arg)\n'
p2690
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p2691
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x0040b880\n'
p2692
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p2693
S'.text:000000000040b960\n.text:000000000040b963\n.text:000000000040b965\n.text:000000000040b967\n.text:000000000040b969\n.text:000000000040b96c\n'
p2694
tp2695
sS'is_ancestor'
p2696
(S'\n__stdcall is_ancestor(stat * sb, dir_list * ancestors)\n'
p2697
V\u000a_Bool is_ancestor(stat *sb,dir_list *ancestors)\u000a\u000a{\u000a  if (ancestors != (dir_list *)0x0) {\u000a    do {\u000a      if ((ancestors->ino == sb->st_ino) && (ancestors->dev == sb->st_dev)) {\u000a        return true;\u000a      }\u000a      ancestors = ancestors->parent;\u000a    } while (ancestors != (dir_list *)0x0);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p2698
S'TEST RSI,RSI\nJZ 0x004066c7\nMOV RAX,qword ptr [RDI + 0x8]\nNOP dword ptr [RAX]\nCMP qword ptr [RSI + 0x8],RAX\nJNZ 0x004066bf\nMOV RCX,qword ptr [RSI + 0x10]\nCMP RCX,qword ptr [RDI]\nJZ 0x004066ca\nMOV RSI,qword ptr [RSI]\nTEST RSI,RSI\nJNZ 0x004066b0\nXOR EAX,EAX\nRET\nMOV AL,0x1\nRET\n'
p2699
S'48 85 f6\n74 22\n48 8b 47 08\n0f 1f 80 00 00 00 00\n48 39 46 08\n75 09\n48 8b 4e 10\n48 3b 0f\n74 0b\n48 8b 36\n48 85 f6\n75 e9\n31 c0\nc3\nb0 01\nc3\n'
p2700
S'.text:00000000004066a0\n.text:00000000004066a3\n.text:00000000004066a5\n.text:00000000004066a9\n.text:00000000004066b0\n.text:00000000004066b4\n.text:00000000004066b6\n.text:00000000004066ba\n.text:00000000004066bd\n.text:00000000004066bf\n.text:00000000004066c2\n.text:00000000004066c5\n.text:00000000004066c7\n.text:00000000004066c9\n.text:00000000004066ca\n.text:00000000004066cc\n'
p2701
tp2702
sS'__argmatch_die'
p2703
(S'\n__stdcall __argmatch_die()\n'
p2704
V\u000avoid __argmatch_die(void)\u000a\u000a{\u000a  usage(1);\u000a  return;\u000a}\u000a\u000a
p2705
S'MOV EDI,0x1\nJMP 0x004028a0\n'
p2706
S'bf 01 00 00 00\ne9 36 27 ff ff\n'
p2707
S'.text:0000000000410160\n.text:0000000000410165\n'
p2708
tp2709
sS'emit_try_help'
p2710
(S'\n__stdcall emit_try_help()\n'
p2711
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p2712
S'PUSH RBX\nMOV RBX,qword ptr [0x00619460]\nXOR EDI,EDI\nMOV ESI,0x412121\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDX,RAX\nMOV RCX,qword ptr [0x006198d0]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00402740\n'
p2713
S'53\n48 8b 1d 58 6a 21 00\n31 ff\nbe 21 21 41 00\nba 05 00 00 00\ne8 57 f8 ff ff\n48 89 c2\n48 8b 0d ad 6e 21 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 0d fd ff ff\n'
p2714
S'.text:0000000000402a00\n.text:0000000000402a01\n.text:0000000000402a08\n.text:0000000000402a0a\n.text:0000000000402a0f\n.text:0000000000402a14\n.text:0000000000402a19\n.text:0000000000402a1c\n.text:0000000000402a23\n.text:0000000000402a28\n.text:0000000000402a2a\n.text:0000000000402a2d\n.text:0000000000402a2e\n'
p2715
tp2716
sS'rename'
p2717
(S'\n__stdcall rename(char * __old, char * __new)\n'
p2718
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint rename(char *__old,char *__new)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_rename_00619310)();\u000a  return iVar1;\u000a}\u000a\u000a
p2719
S'JMP qword ptr [0x00619310]\n'
p2720
S'ff 25 6a 6c 21 00\n'
p2721
S'.plt:00000000004026a0\n'
p2722
tp2723
sS'strrchr'
p2724
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p2725
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_00619148)();\u000a  return pcVar1;\u000a}\u000a\u000a
p2726
S'JMP qword ptr [0x00619148]\n'
p2727
S'ff 25 32 6e 21 00\n'
p2728
S'.plt:0000000000402310\n'
p2729
tp2730
sS'quotearg_alloc_mem'
p2731
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p2732
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p2733
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x6198e0\nCMOVNZ R12,RCX\nCALL 0x00402100\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x0040a8b0\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x0040da20\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x0040a8b0\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x0040b5da\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2734
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc e0 98 61 00\n4c 0f 45 e1\ne8 c8 6b ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 91 24 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2735
S'.text:000000000040b500\n.text:000000000040b501\n.text:000000000040b503\n.text:000000000040b505\n.text:000000000040b507\n.text:000000000040b509\n.text:000000000040b50a\n.text:000000000040b50e\n.text:000000000040b511\n.text:000000000040b516\n.text:000000000040b519\n.text:000000000040b51e\n.text:000000000040b521\n.text:000000000040b526\n.text:000000000040b529\n.text:000000000040b52f\n.text:000000000040b533\n.text:000000000040b538\n.text:000000000040b53d\n.text:000000000040b53f\n.text:000000000040b543\n.text:000000000040b545\n.text:000000000040b548\n.text:000000000040b54c\n.text:000000000040b551\n.text:000000000040b555\n.text:000000000040b55a\n.text:000000000040b55e\n.text:000000000040b560\n.text:000000000040b562\n.text:000000000040b565\n.text:000000000040b568\n.text:000000000040b56b\n.text:000000000040b570\n.text:000000000040b575\n.text:000000000040b577\n.text:000000000040b57c\n.text:000000000040b580\n.text:000000000040b583\n.text:000000000040b587\n.text:000000000040b58a\n.text:000000000040b58f\n.text:000000000040b592\n.text:000000000040b596\n.text:000000000040b59a\n.text:000000000040b59d\n.text:000000000040b5a0\n.text:000000000040b5a5\n.text:000000000040b5aa\n.text:000000000040b5ad\n.text:000000000040b5b2\n.text:000000000040b5b7\n.text:000000000040b5b9\n.text:000000000040b5be\n.text:000000000040b5c3\n.text:000000000040b5c7\n.text:000000000040b5ca\n.text:000000000040b5ce\n.text:000000000040b5d3\n.text:000000000040b5d5\n.text:000000000040b5d7\n.text:000000000040b5da\n.text:000000000040b5dd\n.text:000000000040b5e1\n.text:000000000040b5e2\n.text:000000000040b5e4\n.text:000000000040b5e6\n.text:000000000040b5e8\n.text:000000000040b5ea\n.text:000000000040b5eb\n'
p2736
tp2737
sS'valid_options'
p2738
(S'\n__stdcall valid_options()\n'
p2739
V\u000a_Bool valid_options(void)\u000a\u000a{\u000a  undefined in_AL;\u000a  uint *in_RDI;\u000a  \u000a  if (in_RDI == (uint *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("co != NULL","src/copy.c",0xb50,"_Bool valid_options(const struct cp_options *)");\u000a  }\u000a  if (3 < *in_RDI) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("VALID_BACKUP_TYPE (co->backup_type)","src/copy.c",0xb51,\u000a                  "_Bool valid_options(const struct cp_options *)");\u000a  }\u000a  if (2 < in_RDI[3] - 1) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("VALID_SPARSE_MODE (co->sparse_mode)","src/copy.c",0xb52,\u000a                  "_Bool valid_options(const struct cp_options *)");\u000a  }\u000a  if (in_RDI[0xc] < 3) {\u000a    if ((*(char *)((long)in_RDI + 0x17) != 0) && (*(char *)((long)in_RDI + 0x2b) != 0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("!(co->hard_link && co->symbolic_link)","src/copy.c",0xb54,\u000a                    "_Bool valid_options(const struct cp_options *)");\u000a    }\u000a    if ((in_RDI[0xc] == 2) && (in_RDI[3] != 2)) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("! (co->reflink_mode == REFLINK_ALWAYS && co->sparse_mode != SPARSE_AUTO)",\u000a                    "src/copy.c",0xb57,"_Bool valid_options(const struct cp_options *)");\u000a    }\u000a    return (_Bool)in_AL;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("VALID_REFLINK_MODE (co->reflink_mode)","src/copy.c",0xb53,\u000a                "_Bool valid_options(const struct cp_options *)");\u000a}\u000a\u000a
p2740
S'PUSH RAX\nTEST RDI,RDI\nJZ 0x004040c5\nCMP dword ptr [RDI],0x4\nJNC 0x004040de\nMOV EAX,dword ptr [RDI + 0xc]\nDEC EAX\nCMP EAX,0x3\nJNC 0x004040f7\nCMP dword ptr [RDI + 0x30],0x3\nJNC 0x00404110\nCMP byte ptr [RDI + 0x17],0x0\nJZ 0x004040b7\nCMP byte ptr [RDI + 0x2b],0x0\nJNZ 0x00404129\nCMP dword ptr [RDI + 0x30],0x2\nJNZ 0x004040c3\nCMP dword ptr [RDI + 0xc],0x2\nJNZ 0x00404142\nPOP RAX\nRET\nMOV EDI,0x4127db\nMOV ESI,0x4127d0\nMOV EDX,0xb50\nMOV ECX,0x4127e6\nCALL 0x00402350\nMOV EDI,0x412815\nMOV ESI,0x4127d0\nMOV EDX,0xb51\nMOV ECX,0x4127e6\nCALL 0x00402350\nMOV EDI,0x412839\nMOV ESI,0x4127d0\nMOV EDX,0xb52\nMOV ECX,0x4127e6\nCALL 0x00402350\nMOV EDI,0x41285d\nMOV ESI,0x4127d0\nMOV EDX,0xb53\nMOV ECX,0x4127e6\nCALL 0x00402350\nMOV EDI,0x412883\nMOV ESI,0x4127d0\nMOV EDX,0xb54\nMOV ECX,0x4127e6\nCALL 0x00402350\nMOV EDI,0x4128a9\nMOV ESI,0x4127d0\nMOV EDX,0xb57\nMOV ECX,0x4127e6\nCALL 0x00402350\n'
p2741
S'50\n48 85 ff\n74 2f\n83 3f 04\n73 43\n8b 47 0c\nff c8\n83 f8 03\n73 52\n83 7f 30 03\n73 65\n80 7f 17 00\n74 06\n80 7f 2b 00\n75 72\n83 7f 30 02\n75 06\n83 7f 0c 02\n75 7f\n58\nc3\nbf db 27 41 00\nbe d0 27 41 00\nba 50 0b 00 00\nb9 e6 27 41 00\ne8 72 e2 ff ff\nbf 15 28 41 00\nbe d0 27 41 00\nba 51 0b 00 00\nb9 e6 27 41 00\ne8 59 e2 ff ff\nbf 39 28 41 00\nbe d0 27 41 00\nba 52 0b 00 00\nb9 e6 27 41 00\ne8 40 e2 ff ff\nbf 5d 28 41 00\nbe d0 27 41 00\nba 53 0b 00 00\nb9 e6 27 41 00\ne8 27 e2 ff ff\nbf 83 28 41 00\nbe d0 27 41 00\nba 54 0b 00 00\nb9 e6 27 41 00\ne8 0e e2 ff ff\nbf a9 28 41 00\nbe d0 27 41 00\nba 57 0b 00 00\nb9 e6 27 41 00\ne8 f5 e1 ff ff\n'
p2742
S'.text:0000000000404090\n.text:0000000000404091\n.text:0000000000404094\n.text:0000000000404096\n.text:0000000000404099\n.text:000000000040409b\n.text:000000000040409e\n.text:00000000004040a0\n.text:00000000004040a3\n.text:00000000004040a5\n.text:00000000004040a9\n.text:00000000004040ab\n.text:00000000004040af\n.text:00000000004040b1\n.text:00000000004040b5\n.text:00000000004040b7\n.text:00000000004040bb\n.text:00000000004040bd\n.text:00000000004040c1\n.text:00000000004040c3\n.text:00000000004040c4\n.text:00000000004040c5\n.text:00000000004040ca\n.text:00000000004040cf\n.text:00000000004040d4\n.text:00000000004040d9\n.text:00000000004040de\n.text:00000000004040e3\n.text:00000000004040e8\n.text:00000000004040ed\n.text:00000000004040f2\n.text:00000000004040f7\n.text:00000000004040fc\n.text:0000000000404101\n.text:0000000000404106\n.text:000000000040410b\n.text:0000000000404110\n.text:0000000000404115\n.text:000000000040411a\n.text:000000000040411f\n.text:0000000000404124\n.text:0000000000404129\n.text:000000000040412e\n.text:0000000000404133\n.text:0000000000404138\n.text:000000000040413d\n.text:0000000000404142\n.text:0000000000404147\n.text:000000000040414c\n.text:0000000000404151\n.text:0000000000404156\n'
p2743
tp2744
sS'__sprintf_chk'
p2745
(S'\n__stdcall __sprintf_chk()\n'
p2746
V\u000avoid __sprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___sprintf_chk_00619388)();\u000a  return;\u000a}\u000a\u000a
p2747
S'JMP qword ptr [0x00619388]\n'
p2748
S'ff 25 f2 6b 21 00\n'
p2749
S'.plt:0000000000402790\n'
p2750
tp2751
sS'mkfifo'
p2752
(S'\n__stdcall mkfifo(char * __path, __mode_t __mode)\n'
p2753
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mkfifo(char *__path,__mode_t __mode)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mkfifo_00619218)();\u000a  return iVar1;\u000a}\u000a\u000a
p2754
S'JMP qword ptr [0x00619218]\n'
p2755
S'ff 25 62 6d 21 00\n'
p2756
S'.plt:00000000004024b0\n'
p2757
tp2758
sS'strip_trailing_slashes'
p2759
(S'\n__stdcall strip_trailing_slashes(char * file)\n'
p2760
V\u000a_Bool strip_trailing_slashes(char *file)\u000a\u000a{\u000a  char cVar1;\u000a  char *name;\u000a  size_t sVar2;\u000a  \u000a  name = last_component(file);\u000a  if (*name == 0) {\u000a    name = file;\u000a  }\u000a  sVar2 = base_len(name);\u000a  cVar1 = name[sVar2];\u000a  name[sVar2] = 0;\u000a  return (_Bool)(cVar1 != 0);\u000a}\u000a\u000a
p2761
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00409000\nMOV RBX,RAX\nCMP byte ptr [RBX],0x0\nCMOVZ RBX,R14\nMOV RDI,RBX\nCALL 0x00409060\nCMP byte ptr [RBX + RAX*0x1],0x0\nSETNZ CL\nMOV byte ptr [RBX + RAX*0x1],0x0\nMOV EAX,ECX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p2762
S'41 56\n53\n50\n49 89 fe\ne8 64 ff ff ff\n48 89 c3\n80 3b 00\n49 0f 44 de\n48 89 df\ne8 b2 ff ff ff\n80 3c 03 00\n0f 95 c1\nc6 04 03 00\n89 c8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p2763
S'.text:0000000000409090\n.text:0000000000409092\n.text:0000000000409093\n.text:0000000000409094\n.text:0000000000409097\n.text:000000000040909c\n.text:000000000040909f\n.text:00000000004090a2\n.text:00000000004090a6\n.text:00000000004090a9\n.text:00000000004090ae\n.text:00000000004090b2\n.text:00000000004090b5\n.text:00000000004090b9\n.text:00000000004090bb\n.text:00000000004090bf\n.text:00000000004090c0\n.text:00000000004090c2\n'
p2764
tp2765
sS'fts_alloc'
p2766
(S'\n__stdcall fts_alloc(FTS * sp, char * name, size_t namelen)\n'
p2767
V\u000aFTSENT * fts_alloc(FTS *sp,char *name,size_t namelen)\u000a\u000a{\u000a  FTSENT *pFVar1;\u000a  \u000a  pFVar1 = (FTSENT *)malloc(namelen + 0x118 & 0xfffffffffffffff0);\u000a  if (pFVar1 == (FTSENT *)0x0) {\u000a    pFVar1 = (FTSENT *)0x0;\u000a  }\u000a  else {\u000a    memcpy(pFVar1 + 1,name,namelen);\u000a    *(undefined *)((long)&pFVar1[1].fts_cycle + namelen) = 0;\u000a    pFVar1->fts_namelen = namelen;\u000a    pFVar1->fts_fts = sp;\u000a    pFVar1->fts_path = sp->fts_path;\u000a    pFVar1->fts_errno = 0;\u000a    pFVar1->fts_dirp = (DIR *)0x0;\u000a    pFVar1->fts_flags = 0;\u000a    pFVar1->fts_instr = 3;\u000a    *(undefined4 *)&pFVar1->fts_number = 0;\u000a    *(undefined4 *)((long)&pFVar1->fts_number + 4) = 0;\u000a    *(undefined4 *)&pFVar1->fts_pointer = 0;\u000a    *(undefined4 *)((long)&pFVar1->fts_pointer + 4) = 0;\u000a  }\u000a  return pFVar1;\u000a}\u000a\u000a
p2768
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDX\nMOV R12,RSI\nMOV R14,RDI\nLEA RDI,[0x118 + R15]\nAND RDI,-0x10\nCALL 0x00402540\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040e37b\nMOV RDI,RBX\nADD RDI,0x108\nMOV RSI,R12\nMOV RDX,R15\nCALL 0x004024d0\nMOV byte ptr [0x108 + RBX + R15*0x1],0x0\nMOV qword ptr [RBX + 0x60],R15\nMOV qword ptr [RBX + 0x50],R14\nMOV RAX,qword ptr [R14 + 0x20]\nMOV qword ptr [RBX + 0x38],RAX\nMOV dword ptr [RBX + 0x40],0x0\nMOV qword ptr [RBX + 0x18],0x0\nMOV word ptr [RBX + 0x72],0x0\nMOV word ptr [RBX + 0x74],0x3\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX + 0x20],XMM0\nJMP 0x0040e37d\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p2769
S'41 57\n41 56\n41 54\n53\n50\n49 89 d7\n49 89 f4\n49 89 fe\n49 8d bf 18 01 00 00\n48 83 e7 f0\ne8 1f 42 ff ff\n48 89 c3\n48 85 db\n74 52\n48 89 df\n48 81 c7 08 01 00 00\n4c 89 e6\n4c 89 fa\ne8 92 41 ff ff\n42 c6 84 3b 08 01 00 00 00\n4c 89 7b 60\n4c 89 73 50\n49 8b 46 20\n48 89 43 38\nc7 43 40 00 00 00 00\n48 c7 43 18 00 00 00 00\n66 c7 43 72 00 00\n66 c7 43 74 03 00\n0f 57 c0\n0f 11 43 20\neb 02\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p2770
S'.text:000000000040e300\n.text:000000000040e302\n.text:000000000040e304\n.text:000000000040e306\n.text:000000000040e307\n.text:000000000040e308\n.text:000000000040e30b\n.text:000000000040e30e\n.text:000000000040e311\n.text:000000000040e318\n.text:000000000040e31c\n.text:000000000040e321\n.text:000000000040e324\n.text:000000000040e327\n.text:000000000040e329\n.text:000000000040e32c\n.text:000000000040e333\n.text:000000000040e336\n.text:000000000040e339\n.text:000000000040e33e\n.text:000000000040e347\n.text:000000000040e34b\n.text:000000000040e34f\n.text:000000000040e353\n.text:000000000040e357\n.text:000000000040e35e\n.text:000000000040e366\n.text:000000000040e36c\n.text:000000000040e372\n.text:000000000040e375\n.text:000000000040e379\n.text:000000000040e37b\n.text:000000000040e37d\n.text:000000000040e380\n.text:000000000040e384\n.text:000000000040e385\n.text:000000000040e387\n.text:000000000040e389\n.text:000000000040e38b\n'
p2771
tp2772
sS'__freading'
p2773
(S'\n__stdcall __freading()\n'
p2774
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_00619290)();\u000a  return;\u000a}\u000a\u000a
p2775
S'JMP qword ptr [0x00619290]\n'
p2776
S'ff 25 ea 6c 21 00\n'
p2777
S'.plt:00000000004025a0\n'
p2778
tp2779
sS'clone_file'
p2780
(S'\n__stdcall clone_file()\n'
p2781
V\u000aint clone_file(void)\u000a\u000a{\u000a  int iVar1;\u000a  ulong in_RSI;\u000a  int __fd;\u000a  \u000a  iVar1 = ioctl(__fd,0x40049409,in_RSI & 0xffffffff,in_RSI & 0xffffffff);\u000a  return iVar1;\u000a}\u000a\u000a
p2782
S'MOV ECX,ESI\nMOV ESI,0x40049409\nXOR EAX,EAX\nMOV EDX,ECX\nJMP 0x00402390\n'
p2783
S'89 f1\nbe 09 94 04 40\n31 c0\n89 ca\ne9 50 ac ff ff\n'
p2784
S'.text:0000000000407730\n.text:0000000000407732\n.text:0000000000407737\n.text:0000000000407739\n.text:000000000040773b\n'
p2785
tp2786
sS'fputs_unlocked'
p2787
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p2788
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_006191e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p2789
S'JMP qword ptr [0x006191e0]\n'
p2790
S'ff 25 9a 6d 21 00\n'
p2791
S'.plt:0000000000402440\n'
p2792
tp2793
sS'xcharalloc'
p2794
(S'\n__stdcall xcharalloc(size_t n)\n'
p2795
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p2796
S'JMP 0x0040d950\n'
p2797
S'e9 2b ff ff ff\n'
p2798
S'.text:000000000040da20\n'
p2799
tp2800
sS'isatty'
p2801
(S'\n__stdcall isatty(int __fd)\n'
p2802
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint isatty(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_isatty_00619090)();\u000a  return iVar1;\u000a}\u000a\u000a
p2803
S'JMP qword ptr [0x00619090]\n'
p2804
S'ff 25 ea 6e 21 00\n'
p2805
S'.plt:00000000004021a0\n'
p2806
tp2807
sS'fts_skip_tree'
p2808
(S'\n__stdcall fts_skip_tree(FTS * fts, FTSENT * ent)\n'
p2809
V\u000avoid fts_skip_tree(FTS *fts,FTSENT *ent)\u000a\u000a{\u000a  fts_set(fts,ent);\u000a  fts_read(fts);\u000a  return;\u000a}\u000a\u000a
p2810
S'PUSH RBX\nMOV RBX,RDI\nMOV EDX,0x4\nCALL 0x0040fa10\nMOV RDI,RBX\nPOP RBX\nJMP 0x0040e8a0\n'
p2811
S'53\n48 89 fb\nba 04 00 00 00\ne8 22 c0 00 00\n48 89 df\n5b\ne9 a9 ae 00 00\n'
p2812
S'.text:00000000004039e0\n.text:00000000004039e1\n.text:00000000004039e4\n.text:00000000004039e9\n.text:00000000004039ee\n.text:00000000004039f1\n.text:00000000004039f2\n'
p2813
tp2814
sS'c_isalnum'
p2815
(S'\n__stdcall c_isalnum()\n'
p2816
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p2817
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x004105ab\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x004105ab\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x004105aa\nXOR EAX,EAX\nRET\n'
p2818
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p2819
S'.text:0000000000410590\n.text:0000000000410592\n.text:0000000000410595\n.text:0000000000410598\n.text:000000000041059a\n.text:00000000004105a4\n.text:00000000004105a8\n.text:00000000004105aa\n.text:00000000004105ab\n.text:00000000004105ae\n.text:00000000004105b1\n.text:00000000004105b3\n.text:00000000004105b5\n'
p2820
tp2821
sS'dev_info_compare'
p2822
(S'\n__stdcall dev_info_compare(void * x, void * y)\n'
p2823
V\u000a_Bool dev_info_compare(void *x,void *y)\u000a\u000a{\u000a  return (_Bool)(*(long *)x == *(long *)y);\u000a}\u000a\u000a
p2824
S'MOV RAX,qword ptr [RDI]\nCMP RAX,qword ptr [RSI]\nSETZ AL\nRET\n'
p2825
S'48 8b 07\n48 3b 06\n0f 94 c0\nc3\n'
p2826
S'.text:000000000040cd10\n.text:000000000040cd13\n.text:000000000040cd16\n.text:000000000040cd19\n'
p2827
tp2828
sS'freecon'
p2829
(S'\n__stdcall freecon(security_context_t con)\n'
p2830
V\u000avoid freecon(security_context_t con)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p2831
S'RET\n'
p2832
S'c3\n'
p2833
S'.text:000000000040c490\n'
p2834
tp2835
sS'i_ring_init'
p2836
(S'\n__stdcall i_ring_init(I_ring * ir)\n'
p2837
V\u000avoid i_ring_init(I_ring *ir)\u000a\u000a{\u000a  long lVar1;\u000a  int in_ESI;\u000a  \u000a  ir->ir_empty = true;\u000a  *(undefined8 *)&ir->ir_front = 0;\u000a  lVar1 = 0;\u000a  do {\u000a    ir->ir_data[lVar1] = in_ESI;\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 4);\u000a  ir->ir_default_val = in_ESI;\u000a  return;\u000a}\u000a\u000a
p2838
S'MOV byte ptr [RDI + 0x1c],0x1\nMOV qword ptr [RDI + 0x14],0x0\nXOR EAX,EAX\nNOP\nMOV dword ptr [RDI + RAX*0x4],ESI\nINC RAX\nCMP RAX,0x4\nJNZ 0x004108f0\nMOV dword ptr [RDI + 0x10],ESI\nRET\n'
p2839
S'c6 47 1c 01\n48 c7 47 14 00 00 00 00\n31 c0\n66 90\n89 34 87\n48 ff c0\n48 83 f8 04\n75 f4\n89 77 10\nc3\n'
p2840
S'.text:00000000004108e0\n.text:00000000004108e4\n.text:00000000004108ec\n.text:00000000004108ee\n.text:00000000004108f0\n.text:00000000004108f3\n.text:00000000004108f6\n.text:00000000004108fa\n.text:00000000004108fc\n.text:00000000004108ff\n'
p2841
tp2842
sS'__errno_location'
p2843
(S'\n__stdcall __errno_location()\n'
p2844
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_00619040)();\u000a  return piVar1;\u000a}\u000a\u000a
p2845
S'JMP qword ptr [0x00619040]\n'
p2846
S'ff 25 3a 6f 21 00\n'
p2847
S'.plt:0000000000402100\n'
p2848
tp2849
sS'x2nrealloc'
p2850
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p2851
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p2852
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x0040d9ec\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x0040da19\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x0040da0a\nTEST RCX,RCX\nJNZ 0x0040da0a\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x0040d990\nPUSH RAX\nCALL 0x0040dae0\n'
p2853
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p2854
S'.text:000000000040d9c0\n.text:000000000040d9c3\n.text:000000000040d9c6\n.text:000000000040d9c9\n.text:000000000040d9cb\n.text:000000000040d9d5\n.text:000000000040d9d7\n.text:000000000040d9da\n.text:000000000040d9dd\n.text:000000000040d9df\n.text:000000000040d9e2\n.text:000000000040d9e5\n.text:000000000040d9ea\n.text:000000000040d9ec\n.text:000000000040d9ef\n.text:000000000040d9f1\n.text:000000000040d9f6\n.text:000000000040d9f8\n.text:000000000040d9fb\n.text:000000000040d9fd\n.text:000000000040da04\n.text:000000000040da07\n.text:000000000040da0a\n.text:000000000040da0d\n.text:000000000040da11\n.text:000000000040da14\n.text:000000000040da19\n.text:000000000040da1a\n'
p2855
tp2856
sS'quotearg_n_options'
p2857
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p2858
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p2859
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00402100\nTEST R12D,R12D\nJS 0x0040b841\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x006193c0]\nCMP dword ptr [0x006193c8],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x0040b75b\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x6193d0\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x0040d990\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x006193c0],R15\nJNZ 0x0040b722\nMOVUPS XMM0,xmmword ptr [0x006193d0]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x006193c8]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00402360\nMOV dword ptr [0x006193c8],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x0040a8b0\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x0040b7bd\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x0040b82b\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x619920\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x0040b7e8\nCALL 0x004020c0\nMOV RDI,R15\nCALL 0x0040da20\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x0040a8b0\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x004020f0\n'
p2860
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 51 6a ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 f6 dc 20 00\n44 39 25 f7 dc 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd d0 93 61 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 88 22 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d ab dc 20 00\n75 0b\n0f 10 05 b2 dc 20 00\n41 0f 11 07\n8b 05 a0 dc 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 1d 6c ff ff\n89 1d 7f dc 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 20 99 61 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 d8 68 ff ff\n4c 89 ff\ne8 30 22 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 aa 68 ff ff\n'
p2861
S'.text:000000000040b690\n.text:000000000040b691\n.text:000000000040b693\n.text:000000000040b695\n.text:000000000040b697\n.text:000000000040b699\n.text:000000000040b69a\n.text:000000000040b69e\n.text:000000000040b6a1\n.text:000000000040b6a4\n.text:000000000040b6a7\n.text:000000000040b6aa\n.text:000000000040b6af\n.text:000000000040b6b2\n.text:000000000040b6b8\n.text:000000000040b6bd\n.text:000000000040b6bf\n.text:000000000040b6c3\n.text:000000000040b6ca\n.text:000000000040b6d1\n.text:000000000040b6d6\n.text:000000000040b6db\n.text:000000000040b6e0\n.text:000000000040b6e2\n.text:000000000040b6e7\n.text:000000000040b6ea\n.text:000000000040b6ed\n.text:000000000040b6f3\n.text:000000000040b6f5\n.text:000000000040b6f8\n.text:000000000040b6fc\n.text:000000000040b6ff\n.text:000000000040b703\n.text:000000000040b708\n.text:000000000040b70b\n.text:000000000040b70e\n.text:000000000040b715\n.text:000000000040b717\n.text:000000000040b71e\n.text:000000000040b722\n.text:000000000040b728\n.text:000000000040b72b\n.text:000000000040b72f\n.text:000000000040b732\n.text:000000000040b735\n.text:000000000040b739\n.text:000000000040b73b\n.text:000000000040b73e\n.text:000000000040b743\n.text:000000000040b749\n.text:000000000040b74c\n.text:000000000040b751\n.text:000000000040b756\n.text:000000000040b75b\n.text:000000000040b75e\n.text:000000000040b762\n.text:000000000040b766\n.text:000000000040b76b\n.text:000000000040b76f\n.text:000000000040b773\n.text:000000000040b777\n.text:000000000040b77b\n.text:000000000040b77f\n.text:000000000040b784\n.text:000000000040b787\n.text:000000000040b78a\n.text:000000000040b78d\n.text:000000000040b792\n.text:000000000040b795\n.text:000000000040b798\n.text:000000000040b79b\n.text:000000000040b79c\n.text:000000000040b7a1\n.text:000000000040b7a5\n.text:000000000040b7a8\n.text:000000000040b7ab\n.text:000000000040b7ad\n.text:000000000040b7b2\n.text:000000000040b7b6\n.text:000000000040b7bb\n.text:000000000040b7bd\n.text:000000000040b7c1\n.text:000000000040b7c6\n.text:000000000040b7c9\n.text:000000000040b7cc\n.text:000000000040b7d1\n.text:000000000040b7d6\n.text:000000000040b7d9\n.text:000000000040b7de\n.text:000000000040b7e1\n.text:000000000040b7e3\n.text:000000000040b7e8\n.text:000000000040b7eb\n.text:000000000040b7f0\n.text:000000000040b7f3\n.text:000000000040b7f6\n.text:000000000040b7fb\n.text:000000000040b7fe\n.text:000000000040b802\n.text:000000000040b805\n.text:000000000040b808\n.text:000000000040b80d\n.text:000000000040b812\n.text:000000000040b817\n.text:000000000040b81a\n.text:000000000040b81d\n.text:000000000040b81e\n.text:000000000040b823\n.text:000000000040b827\n.text:000000000040b82b\n.text:000000000040b82f\n.text:000000000040b832\n.text:000000000040b836\n.text:000000000040b837\n.text:000000000040b839\n.text:000000000040b83b\n.text:000000000040b83d\n.text:000000000040b83f\n.text:000000000040b840\n.text:000000000040b841\n'
p2862
tp2863
sS'strcmp'
p2864
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p2865
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_00619200)();\u000a  return iVar1;\u000a}\u000a\u000a
p2866
S'JMP qword ptr [0x00619200]\n'
p2867
S'ff 25 7a 6d 21 00\n'
p2868
S'.plt:0000000000402480\n'
p2869
tp2870
sS'quotearg_custom_mem'
p2871
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p2872
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p2873
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x0040baa0\n'
p2874
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p2875
S'.text:000000000040bb30\n.text:000000000040bb33\n.text:000000000040bb36\n.text:000000000040bb39\n.text:000000000040bb3c\n.text:000000000040bb3e\n.text:000000000040bb41\n'
p2876
tp2877
sS'full_write'
p2878
(S'\n__stdcall full_write(void * buf, size_t count)\n'
p2879
V\u000asize_t full_write(void *buf,size_t count)\u000a\u000a{\u000a  size_t sVar1;\u000a  int *piVar2;\u000a  long in_RDX;\u000a  size_t sVar3;\u000a  \u000a  sVar3 = 0;\u000a  if (in_RDX != 0) {\u000a    do {\u000a      sVar1 = safe_write((void *)((ulong)buf & 0xffffffff),count);\u000a      if (sVar1 == 0xffffffffffffffff) {\u000a        return sVar3;\u000a      }\u000a      if (sVar1 == 0) {\u000a        piVar2 = __errno_location();\u000a        *piVar2 = 0x1c;\u000a        return sVar3;\u000a      }\u000a      sVar3 = sVar3 + sVar1;\u000a      count = count + sVar1;\u000a      in_RDX = in_RDX - sVar1;\u000a    } while (in_RDX != 0);\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p2880
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R15,RDX\nMOV RBX,RSI\nMOV EBP,EDI\nXOR R14D,R14D\nTEST R15,R15\nJZ 0x00409590\nNOP word ptr [RAX + RAX*0x1]\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R15\nCALL 0x0040bfd0\nCMP RAX,-0x1\nJZ 0x00409590\nTEST RAX,RAX\nJZ 0x00409585\nADD R14,RAX\nADD RBX,RAX\nSUB R15,RAX\nJNZ 0x00409560\nJMP 0x00409590\nCALL 0x00402100\nMOV dword ptr [RAX],0x1c\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2881
S'55\n41 57\n41 56\n53\n50\n49 89 d7\n48 89 f3\n89 fd\n45 31 f6\n4d 85 ff\n74 39\n66 0f 1f 84 00 00 00 00 00\n89 ef\n48 89 de\n4c 89 fa\ne8 63 2a 00 00\n48 83 f8 ff\n74 1d\n48 85 c0\n74 0d\n49 01 c6\n48 01 c3\n49 29 c7\n75 dd\neb 0b\ne8 76 8b ff ff\nc7 00 1c 00 00 00\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p2882
S'.text:0000000000409540\n.text:0000000000409541\n.text:0000000000409543\n.text:0000000000409545\n.text:0000000000409546\n.text:0000000000409547\n.text:000000000040954a\n.text:000000000040954d\n.text:000000000040954f\n.text:0000000000409552\n.text:0000000000409555\n.text:0000000000409557\n.text:0000000000409560\n.text:0000000000409562\n.text:0000000000409565\n.text:0000000000409568\n.text:000000000040956d\n.text:0000000000409571\n.text:0000000000409573\n.text:0000000000409576\n.text:0000000000409578\n.text:000000000040957b\n.text:000000000040957e\n.text:0000000000409581\n.text:0000000000409583\n.text:0000000000409585\n.text:000000000040958a\n.text:0000000000409590\n.text:0000000000409593\n.text:0000000000409597\n.text:0000000000409598\n.text:000000000040959a\n.text:000000000040959c\n.text:000000000040959d\n'
p2883
tp2884
sS'hash_get_max_bucket_length'
p2885
(S'\n__stdcall hash_get_max_bucket_length(Hash_table * table)\n'
p2886
V\u000asize_t hash_get_max_bucket_length(Hash_table *table)\u000a\u000a{\u000a  ulong uVar1;\u000a  hash_entry *phVar2;\u000a  ulong uVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar2 = table->bucket;\u000a  if (phVar2 < table->bucket_limit) {\u000a    uVar1 = 0;\u000a    do {\u000a      if (phVar2->data != (void *)0x0) {\u000a        uVar3 = 0;\u000a        phVar4 = phVar2;\u000a        do {\u000a          phVar4 = phVar4->next;\u000a          uVar3 = uVar3 + 1;\u000a        } while (phVar4 != (hash_entry *)0x0);\u000a        if (uVar1 < uVar3) {\u000a          uVar1 = uVar3;\u000a        }\u000a      }\u000a      phVar2 = phVar2 + 1;\u000a    } while (phVar2 < table->bucket_limit);\u000a    return uVar1;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p2887
S'MOV RCX,qword ptr [RDI]\nCMP RCX,qword ptr [RDI + 0x8]\nJNC 0x0040960d\nMOV RDX,qword ptr [RDI + 0x8]\nXOR EAX,EAX\nNOP\nCMP qword ptr [RCX],0x0\nJZ 0x00409603\nXOR ESI,ESI\nMOV RDI,RCX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RDI + 0x8]\nINC RSI\nTEST RDI,RDI\nJNZ 0x004095f0\nCMP RSI,RAX\nCMOVA RAX,RSI\nADD RCX,0x10\nCMP RCX,RDX\nJC 0x004095e0\nRET\nXOR EAX,EAX\nRET\n'
p2888
S'48 8b 0f\n48 3b 4f 08\n73 34\n48 8b 57 08\n31 c0\n90\n48 83 39 00\n74 1d\n31 f6\n48 89 cf\n0f 1f 44 00 00\n48 8b 7f 08\n48 ff c6\n48 85 ff\n75 f4\n48 39 c6\n48 0f 47 c6\n48 83 c1 10\n48 39 d1\n72 d4\nc3\n31 c0\nc3\n'
p2889
S'.text:00000000004095d0\n.text:00000000004095d3\n.text:00000000004095d7\n.text:00000000004095d9\n.text:00000000004095dd\n.text:00000000004095df\n.text:00000000004095e0\n.text:00000000004095e4\n.text:00000000004095e6\n.text:00000000004095e8\n.text:00000000004095eb\n.text:00000000004095f0\n.text:00000000004095f4\n.text:00000000004095f7\n.text:00000000004095fa\n.text:00000000004095fc\n.text:00000000004095ff\n.text:0000000000409603\n.text:0000000000409607\n.text:000000000040960a\n.text:000000000040960c\n.text:000000000040960d\n.text:000000000040960f\n'
p2890
tp2891
sS'chdir'
p2892
(S'\n__stdcall chdir(char * __path)\n'
p2893
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint chdir(char *__path)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_chdir_00619120)();\u000a  return iVar1;\u000a}\u000a\u000a
p2894
S'JMP qword ptr [0x00619120]\n'
p2895
S'ff 25 5a 6e 21 00\n'
p2896
S'.plt:00000000004022c0\n'
p2897
tp2898
sS'setfscreatecon'
p2899
(S'\n__stdcall setfscreatecon(security_context_t con)\n'
p2900
V\u000aint setfscreatecon(security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p2901
S'PUSH RAX\nCALL 0x00402100\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p2902
S'50\ne8 3a 5c ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p2903
S'.text:000000000040c4c0\n.text:000000000040c4c1\n.text:000000000040c4c6\n.text:000000000040c4cc\n.text:000000000040c4d1\n.text:000000000040c4d2\n'
p2904
tp2905
sS'getc_unlocked'
p2906
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p2907
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_00619080)();\u000a  return iVar1;\u000a}\u000a\u000a
p2908
S'JMP qword ptr [0x00619080]\n'
p2909
S'ff 25 fa 6e 21 00\n'
p2910
S'.plt:0000000000402180\n'
p2911
tp2912
sS'memmove'
p2913
(S'\n__stdcall memmove(void * __dest, void * __src, size_t __n)\n'
p2914
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memmove(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memmove_006192d8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p2915
S'JMP qword ptr [0x006192d8]\n'
p2916
S'ff 25 a2 6c 21 00\n'
p2917
S'.plt:0000000000402630\n'
p2918
tp2919
sS'hash_insert_if_absent'
p2920
(S'\n__stdcall hash_insert_if_absent(Hash_table * table, void * entry, void * * matched_ent)\n'
p2921
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000aint hash_insert_if_absent(Hash_table *table,void *entry,void **matched_ent)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  Hash_tuning *pHVar3;\u000a  _Bool _Var4;\u000a  hash_entry *in_RAX;\u000a  void *pvVar5;\u000a  hash_entry *phVar6;\u000a  size_t candidate;\u000a  float fVar7;\u000a  float fVar8;\u000a  hash_entry *local_28;\u000a  \u000a  if (entry != (void *)0x0) {\u000a    local_28 = in_RAX;\u000a    pvVar5 = hash_find_entry(table,entry,&local_28);\u000a    if (pvVar5 != (void *)0x0) {\u000a      if (matched_ent == (void **)0x0) {\u000a        return 0;\u000a      }\u000a      *matched_ent = pvVar5;\u000a      return 0;\u000a    }\u000a    uVar1 = table->n_buckets;\u000a    uVar2 = table->n_buckets_used;\u000a    if ((long)uVar2 < 0) {\u000a      fVar7 = (float)((ulong)((uint)uVar2 & 1) | uVar2 >> 1);\u000a      fVar7 = fVar7 + fVar7;\u000a    }\u000a    else {\u000a      fVar7 = (float)uVar2;\u000a    }\u000a    if ((long)uVar1 < 0) {\u000a      fVar8 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a      fVar8 = fVar8 + fVar8;\u000a    }\u000a    else {\u000a      fVar8 = (float)uVar1;\u000a    }\u000a    if (fVar8 * table->tuning->growth_threshold < fVar7) {\u000a      check_tuning(table);\u000a      uVar1 = table->n_buckets;\u000a      uVar2 = table->n_buckets_used;\u000a      if ((long)uVar2 < 0) {\u000a        fVar7 = (float)((ulong)((uint)uVar2 & 1) | uVar2 >> 1);\u000a        fVar7 = fVar7 + fVar7;\u000a      }\u000a      else {\u000a        fVar7 = (float)uVar2;\u000a      }\u000a      pHVar3 = table->tuning;\u000a      if ((long)uVar1 < 0) {\u000a        fVar8 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a        fVar8 = fVar8 + fVar8;\u000a      }\u000a      else {\u000a        fVar8 = (float)uVar1;\u000a      }\u000a      if (pHVar3->growth_threshold * fVar8 < fVar7) {\u000a        fVar8 = fVar8 * pHVar3->growth_factor;\u000a        if (pHVar3->is_n_buckets == false) {\u000a          fVar8 = fVar8 * pHVar3->growth_threshold;\u000a        }\u000a        if (_DAT_004133ec <= fVar8) {\u000a          return -1;\u000a        }\u000a        candidate = (long)fVar8;\u000a        if (DAT_004133e8 <= fVar8) {\u000a          candidate = (long)(fVar8 - DAT_004133e8) ^ 0x8000000000000000;\u000a        }\u000a        _Var4 = hash_rehash(table,candidate);\u000a        if (_Var4 == false) {\u000a          return -1;\u000a        }\u000a        pvVar5 = hash_find_entry(table,entry,&local_28);\u000a        if (pvVar5 != (void *)0x0) goto LAB_0040a19d;\u000a      }\u000a    }\u000a    if (local_28->data == (void *)0x0) {\u000a      local_28->data = entry;\u000a      table->n_entries = table->n_entries + 1;\u000a      table->n_buckets_used = table->n_buckets_used + 1;\u000a    }\u000a    else {\u000a      phVar6 = allocate_entry(table);\u000a      if (phVar6 == (hash_entry *)0x0) {\u000a        return -1;\u000a      }\u000a      phVar6->data = entry;\u000a      phVar6->next = local_28->next;\u000a      local_28->next = phVar6;\u000a      table->n_entries = table->n_entries + 1;\u000a    }\u000a    return 1;\u000a  }\u000aLAB_0040a19d:\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p2922
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV R14,RSI\nMOV R15,RDI\nTEST R14,R14\nJZ 0x0040a19d\nMOV RDX,RSP\nXOR EBP,EBP\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x0040a1b0\nTEST RAX,RAX\nJZ 0x0040a011\nTEST RBX,RBX\nJZ 0x0040a190\nMOV qword ptr [RBX],RAX\nJMP 0x0040a190\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x0040a025\nCVTSI2SS XMM0,RCX\nJMP 0x0040a03a\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM0,RCX\nADDSS XMM0,XMM0\nMOV RCX,qword ptr [R15 + 0x28]\nTEST RAX,RAX\nJS 0x0040a04a\nCVTSI2SS XMM1,RAX\nJMP 0x0040a05f\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nCVTSI2SS XMM1,RAX\nADDSS XMM1,XMM1\nMULSS XMM1,dword ptr [RCX + 0x8]\nUCOMISS XMM0,XMM1\nJBE 0x0040a149\nMOV RDI,R15\nCALL 0x00409ae0\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x0040a089\nCVTSI2SS XMM2,RCX\nJMP 0x0040a09e\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM2,RCX\nADDSS XMM2,XMM2\nMOV RCX,qword ptr [R15 + 0x28]\nMOVSS XMM1,dword ptr [RCX + 0x8]\nTEST RAX,RAX\nJS 0x0040a0b6\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nJMP 0x0040a0ce\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOVAPS XMM3,XMM1\nMULSS XMM3,XMM0\nUCOMISS XMM2,XMM3\nJBE 0x0040a149\nCMP byte ptr [RCX + 0x10],0x0\nMULSS XMM0,dword ptr [RCX + 0xc]\nJNZ 0x0040a0e9\nMULSS XMM0,XMM1\nMOV EBP,0xffffffff\nUCOMISS XMM0,dword ptr [0x004133ec]\nJNC 0x0040a190\nMOVSS XMM1,dword ptr [0x004133e8]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RSI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RSI,RCX\nMOV RDI,R15\nCALL 0x00409d80\nTEST AL,AL\nJZ 0x0040a190\nMOV RDX,RSP\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x0040a1b0\nTEST RAX,RAX\nJNZ 0x0040a19d\nMOV RAX,qword ptr [RSP]\nCMP qword ptr [RAX],0x0\nJZ 0x0040a179\nMOV RDI,R15\nCALL 0x0040a270\nTEST RAX,RAX\nJZ 0x0040a18b\nMOV qword ptr [RAX],R14\nMOV RCX,qword ptr [RSP]\nMOV RDX,qword ptr [RCX + 0x8]\nMOV qword ptr [RAX + 0x8],RDX\nMOV qword ptr [RCX + 0x8],RAX\nINC qword ptr [R15 + 0x20]\nJMP 0x0040a184\nMOV qword ptr [RAX],R14\nINC qword ptr [R15 + 0x20]\nINC qword ptr [R15 + 0x18]\nMOV EBP,0x1\nJMP 0x0040a190\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x004020f0\n'
p2923
S'55\n41 57\n41 56\n53\n50\n48 89 d3\n49 89 f6\n49 89 ff\n4d 85 f6\n0f 84 b4 01 00 00\n48 89 e2\n31 ed\n31 c9\n4c 89 ff\n4c 89 f6\ne8 b5 01 00 00\n48 85 c0\n74 11\n48 85 db\n0f 84 87 01 00 00\n48 89 03\ne9 7f 01 00 00\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 07\nf3 48 0f 2a c1\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a c1\nf3 0f 58 c0\n49 8b 4f 28\n48 85 c0\n78 07\nf3 48 0f 2a c8\neb 15\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\nf3 48 0f 2a c8\nf3 0f 58 c9\nf3 0f 59 49 08\n0f 2e c1\n0f 86 dc 00 00 00\n4c 89 ff\ne8 6b fa ff ff\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 07\nf3 48 0f 2a d1\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a d1\nf3 0f 58 d2\n49 8b 4f 28\nf3 0f 10 49 08\n48 85 c0\n78 0a\n0f 57 c0\nf3 48 0f 2a c0\neb 18\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\n0f 57 c0\nf3 48 0f 2a c0\nf3 0f 58 c0\n0f 28 d9\nf3 0f 59 d8\n0f 2e d3\n76 6f\n80 79 10 00\nf3 0f 59 41 0c\n75 04\nf3 0f 59 c1\nbd ff ff ff ff\n0f 2e 05 f7 92 00 00\n0f 83 95 00 00 00\nf3 0f 10 0d e5 92 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f0\n0f 2e c1\n48 0f 43 f1\n4c 89 ff\ne8 50 fc ff ff\n84 c0\n74 5c\n48 89 e2\n31 c9\n4c 89 ff\n4c 89 f6\ne8 6c 00 00 00\n48 85 c0\n75 54\n48 8b 04 24\n48 83 38 00\n74 26\n4c 89 ff\ne8 15 01 00 00\n48 85 c0\n74 2b\n4c 89 30\n48 8b 0c 24\n48 8b 51 08\n48 89 50 08\n48 89 41 08\n49 ff 47 20\neb 0b\n4c 89 30\n49 ff 47 20\n49 ff 47 18\nbd 01 00 00 00\neb 05\nbd ff ff ff ff\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\ne8 4e 7f ff ff\n'
p2924
S'.text:0000000000409fd0\n.text:0000000000409fd1\n.text:0000000000409fd3\n.text:0000000000409fd5\n.text:0000000000409fd6\n.text:0000000000409fd7\n.text:0000000000409fda\n.text:0000000000409fdd\n.text:0000000000409fe0\n.text:0000000000409fe3\n.text:0000000000409fe9\n.text:0000000000409fec\n.text:0000000000409fee\n.text:0000000000409ff0\n.text:0000000000409ff3\n.text:0000000000409ff6\n.text:0000000000409ffb\n.text:0000000000409ffe\n.text:000000000040a000\n.text:000000000040a003\n.text:000000000040a009\n.text:000000000040a00c\n.text:000000000040a011\n.text:000000000040a015\n.text:000000000040a019\n.text:000000000040a01c\n.text:000000000040a01e\n.text:000000000040a023\n.text:000000000040a025\n.text:000000000040a028\n.text:000000000040a02b\n.text:000000000040a02e\n.text:000000000040a031\n.text:000000000040a036\n.text:000000000040a03a\n.text:000000000040a03e\n.text:000000000040a041\n.text:000000000040a043\n.text:000000000040a048\n.text:000000000040a04a\n.text:000000000040a04d\n.text:000000000040a050\n.text:000000000040a053\n.text:000000000040a056\n.text:000000000040a05b\n.text:000000000040a05f\n.text:000000000040a064\n.text:000000000040a067\n.text:000000000040a06d\n.text:000000000040a070\n.text:000000000040a075\n.text:000000000040a079\n.text:000000000040a07d\n.text:000000000040a080\n.text:000000000040a082\n.text:000000000040a087\n.text:000000000040a089\n.text:000000000040a08c\n.text:000000000040a08f\n.text:000000000040a092\n.text:000000000040a095\n.text:000000000040a09a\n.text:000000000040a09e\n.text:000000000040a0a2\n.text:000000000040a0a7\n.text:000000000040a0aa\n.text:000000000040a0ac\n.text:000000000040a0af\n.text:000000000040a0b4\n.text:000000000040a0b6\n.text:000000000040a0b9\n.text:000000000040a0bc\n.text:000000000040a0bf\n.text:000000000040a0c2\n.text:000000000040a0c5\n.text:000000000040a0ca\n.text:000000000040a0ce\n.text:000000000040a0d1\n.text:000000000040a0d5\n.text:000000000040a0d8\n.text:000000000040a0da\n.text:000000000040a0de\n.text:000000000040a0e3\n.text:000000000040a0e5\n.text:000000000040a0e9\n.text:000000000040a0ee\n.text:000000000040a0f5\n.text:000000000040a0fb\n.text:000000000040a103\n.text:000000000040a106\n.text:000000000040a10a\n.text:000000000040a10f\n.text:000000000040a119\n.text:000000000040a11c\n.text:000000000040a121\n.text:000000000040a124\n.text:000000000040a128\n.text:000000000040a12b\n.text:000000000040a130\n.text:000000000040a132\n.text:000000000040a134\n.text:000000000040a137\n.text:000000000040a139\n.text:000000000040a13c\n.text:000000000040a13f\n.text:000000000040a144\n.text:000000000040a147\n.text:000000000040a149\n.text:000000000040a14d\n.text:000000000040a151\n.text:000000000040a153\n.text:000000000040a156\n.text:000000000040a15b\n.text:000000000040a15e\n.text:000000000040a160\n.text:000000000040a163\n.text:000000000040a167\n.text:000000000040a16b\n.text:000000000040a16f\n.text:000000000040a173\n.text:000000000040a177\n.text:000000000040a179\n.text:000000000040a17c\n.text:000000000040a180\n.text:000000000040a184\n.text:000000000040a189\n.text:000000000040a18b\n.text:000000000040a190\n.text:000000000040a192\n.text:000000000040a196\n.text:000000000040a197\n.text:000000000040a199\n.text:000000000040a19b\n.text:000000000040a19c\n.text:000000000040a19d\n'
p2925
tp2926
sS'c_isascii'
p2927
(S'\n__stdcall c_isascii()\n'
p2928
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p2929
S'CMP EDI,0x80\nSETC AL\nRET\n'
p2930
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p2931
S'.text:00000000004105e0\n.text:00000000004105e6\n.text:00000000004105e9\n'
p2932
tp2933
sS'dot_or_dotdot'
p2934
(S'\n__stdcall dot_or_dotdot(char * file_name)\n'
p2935
V\u000a_Bool dot_or_dotdot(char *file_name)\u000a\u000a{\u000a  if (*file_name == '.') {\u000a    return (_Bool)(file_name[(ulong)(file_name[1] == '.') + 1] == '/' ||\u000a                  file_name[(ulong)(file_name[1] == '.') + 1] == 0);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p2936
S'CMP byte ptr [RDI],0x2e\nJNZ 0x004063af\nXOR EAX,EAX\nCMP byte ptr [RDI + 0x1],0x2e\nSETZ AL\nMOV AL,byte ptr [RDI + RAX*0x1 + 0x1]\nTEST AL,AL\nSETZ CL\nCMP AL,0x2f\nSETZ AL\nOR AL,CL\nRET\nXOR EAX,EAX\nRET\n'
p2937
S'80 3f 2e\n75 1a\n31 c0\n80 7f 01 2e\n0f 94 c0\n8a 44 07 01\n84 c0\n0f 94 c1\n3c 2f\n0f 94 c0\n08 c8\nc3\n31 c0\nc3\n'
p2938
S'.text:0000000000406390\n.text:0000000000406393\n.text:0000000000406395\n.text:0000000000406397\n.text:000000000040639b\n.text:000000000040639e\n.text:00000000004063a2\n.text:00000000004063a4\n.text:00000000004063a7\n.text:00000000004063a9\n.text:00000000004063ac\n.text:00000000004063ae\n.text:00000000004063af\n.text:00000000004063b1\n'
p2939
tp2940
sS'should_dereference'
p2941
(S'\n__stdcall should_dereference(cp_options * x)\n'
p2942
V\u000a_Bool should_dereference(cp_options *x)\u000a\u000a{\u000a  _Bool _Var1;\u000a  byte in_SIL;\u000a  \u000a  _Var1 = true;\u000a  if (x->dereference != DEREF_ALWAYS) {\u000a    _Var1 = (_Bool)(x->dereference == DEREF_COMMAND_LINE_ARGUMENTS & in_SIL);\u000a  }\u000a  return _Var1;\u000a}\u000a\u000a
p2943
S'MOV ECX,dword ptr [RDI + 0x4]\nMOV AL,0x1\nCMP ECX,0x4\nJZ 0x00405c83\nCMP ECX,0x3\nSETZ AL\nAND AL,SIL\nRET\n'
p2944
S'8b 4f 04\nb0 01\n83 f9 04\n74 09\n83 f9 03\n0f 94 c0\n40 20 f0\nc3\n'
p2945
S'.text:0000000000405c70\n.text:0000000000405c73\n.text:0000000000405c75\n.text:0000000000405c78\n.text:0000000000405c7a\n.text:0000000000405c7d\n.text:0000000000405c80\n.text:0000000000405c83\n'
p2946
tp2947
sS'cdb_advance_fd'
p2948
(S'\n__stdcall cdb_advance_fd(cd_buf * cdb, char * dir)\n'
p2949
V\u000aint cdb_advance_fd(cd_buf *cdb,char *dir)\u000a\u000a{\u000a  cd_buf cVar1;\u000a  int iVar2;\u000a  \u000a  iVar2 = 0;\u000a  cVar1 = (cd_buf)openat((int)*cdb,dir,0x10900);\u000a  if ((int)cVar1 < 0) {\u000a    iVar2 = -1;\u000a  }\u000a  else {\u000a    cdb_free(cdb);\u000a    *cdb = cVar1;\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p2950
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nMOV EDI,dword ptr [RBX]\nXOR R14D,R14D\nMOV EDX,0x10900\nXOR EAX,EAX\nCALL 0x004022b0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0041112a\nMOV RDI,RBX\nCALL 0x00411170\nMOV dword ptr [RBX],EBP\nJMP 0x00411130\nMOV R14D,0xffffffff\nMOV EAX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p2951
S'55\n41 56\n53\n48 89 fb\n8b 3b\n45 31 f6\nba 00 09 01 00\n31 c0\ne8 98 11 ff ff\n89 c5\n85 ed\n78 0c\n48 89 df\ne8 4a 00 00 00\n89 2b\neb 06\n41 be ff ff ff ff\n44 89 f0\n5b\n41 5e\n5d\nc3\n'
p2952
S'.text:0000000000411100\n.text:0000000000411101\n.text:0000000000411103\n.text:0000000000411104\n.text:0000000000411107\n.text:0000000000411109\n.text:000000000041110c\n.text:0000000000411111\n.text:0000000000411113\n.text:0000000000411118\n.text:000000000041111a\n.text:000000000041111c\n.text:000000000041111e\n.text:0000000000411121\n.text:0000000000411126\n.text:0000000000411128\n.text:000000000041112a\n.text:0000000000411130\n.text:0000000000411133\n.text:0000000000411134\n.text:0000000000411136\n.text:0000000000411137\n'
p2953
tp2954
sS'dirfd'
p2955
(S'\n__stdcall dirfd(DIR * __dirp)\n'
p2956
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint dirfd(DIR *__dirp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_dirfd_00619208)();\u000a  return iVar1;\u000a}\u000a\u000a
p2957
S'JMP qword ptr [0x00619208]\n'
p2958
S'ff 25 72 6d 21 00\n'
p2959
S'.plt:0000000000402490\n'
p2960
tp2961
sS'owner_failure_ok'
p2962
(S'\n__stdcall owner_failure_ok(cp_options * x)\n'
p2963
V\u000a_Bool owner_failure_ok(cp_options *x)\u000a\u000a{\u000a  int *piVar1;\u000a  bool bVar2;\u000a  \u000a  piVar1 = __errno_location();\u000a  if ((*piVar1 == 0x16) || (*piVar1 == 1)) {\u000a    bVar2 = x->owner_privileges == false;\u000a  }\u000a  else {\u000a    bVar2 = false;\u000a  }\u000a  return (_Bool)bVar2;\u000a}\u000a\u000a
p2964
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00402100\nMOV EAX,dword ptr [RAX]\nCMP EAX,0x16\nJZ 0x004081e5\nCMP EAX,0x1\nJNZ 0x004081ee\nCMP byte ptr [RBX + 0x1a],0x0\nSETZ AL\nJMP 0x004081f0\nXOR EAX,EAX\nPOP RBX\nRET\n'
p2965
S'53\n48 89 fb\ne8 27 9f ff ff\n8b 00\n83 f8 16\n74 05\n83 f8 01\n75 09\n80 7b 1a 00\n0f 94 c0\neb 02\n31 c0\n5b\nc3\n'
p2966
S'.text:00000000004081d0\n.text:00000000004081d1\n.text:00000000004081d4\n.text:00000000004081d9\n.text:00000000004081db\n.text:00000000004081de\n.text:00000000004081e0\n.text:00000000004081e3\n.text:00000000004081e5\n.text:00000000004081e9\n.text:00000000004081ec\n.text:00000000004081ee\n.text:00000000004081f0\n.text:00000000004081f1\n'
p2967
tp2968
sS'set_owner'
p2969
(S'\n__stdcall set_owner(cp_options * x, char * dst_name, stat * src_sb, stat * dst_sb)\n'
p2970
V\u000aint set_owner(cp_options *x,char *dst_name,stat *src_sb,stat *dst_sb)\u000a\u000a{\u000a  __uid_t __owner;\u000a  __gid_t __group;\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  int __fd;\u000a  undefined8 uVar3;\u000a  char *pcVar4;\u000a  int *piVar5;\u000a  uint *puVar6;\u000a  uint uVar7;\u000a  char in_R8B;\u000a  long in_R9;\u000a  \u000a  __fd = (int)src_sb;\u000a  __owner = dst_sb->st_uid;\u000a  __group = dst_sb->st_gid;\u000a  if (in_R8B == 0) {\u000a    if (x->preserve_mode == false) {\u000a      if ((x->move_mode == false) && (x->set_mode == false)) goto LAB_004075cb;\u000a      uVar7 = *(uint *)(in_R9 + 0x18);\u000a      if (x->move_mode == false) {\u000a        puVar6 = &x->mode;\u000a      }\u000a      else {\u000a        puVar6 = &dst_sb->st_mode;\u000a      }\u000a    }\u000a    else {\u000a      uVar7 = *(uint *)(in_R9 + 0x18);\u000a      puVar6 = &dst_sb->st_mode;\u000a    }\u000a    if (((((*puVar6 | 0xe00) ^ 0x1ff) & uVar7 & 0xfff) != 0) &&\u000a       (iVar2 = qset_acl(dst_name), iVar2 != 0)) {\u000a      _Var1 = owner_failure_ok(x);\u000a      if (_Var1 == false) {\u000a        puVar6 = (uint *)__errno_location();\u000a        uVar7 = *puVar6;\u000a        uVar3 = dcgettext(0,"clearing permissions for %s",5);\u000a        pcVar4 = quotearg_style((char *)0x4);\u000a        error(0,(ulong)uVar7,uVar3,pcVar4);\u000a      }\u000a      return -(uint)x->require_preserve;\u000a    }\u000a  }\u000aLAB_004075cb:\u000a  if (__fd == -1) {\u000a    __fd = lchown(dst_name,__owner,__group);\u000a    if (__fd == 0) {\u000a      return 1;\u000a    }\u000a    piVar5 = __errno_location();\u000a    __fd = *piVar5;\u000a    if ((__fd == 0x16) || (__fd == 1)) {\u000a      lchown(dst_name,0xffffffff,__group);\u000a      *piVar5 = __fd;\u000a    }\u000a  }\u000a  else {\u000a    iVar2 = fchown(__fd,__owner,__group);\u000a    if (iVar2 == 0) {\u000a      return 1;\u000a    }\u000a    piVar5 = __errno_location();\u000a    iVar2 = *piVar5;\u000a    if ((iVar2 == 0x16) || (iVar2 == 1)) {\u000a      fchown(__fd,0xffffffff,__group);\u000a      *piVar5 = iVar2;\u000a    }\u000a  }\u000a  _Var1 = chown_failure_ok(x);\u000a  if (_Var1 == false) {\u000a    puVar6 = (uint *)__errno_location();\u000a    uVar7 = *puVar6;\u000a    uVar3 = dcgettext(0,"failed to preserve ownership for %s",5);\u000a    pcVar4 = quotearg_style((char *)0x4);\u000a    error(0,(ulong)uVar7,uVar3,pcVar4);\u000a    if (x->require_preserve != false) {\u000a      return -1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p2971
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R14,RSI\nMOV R15,RDI\nMOV EBP,dword ptr [RCX + 0x1c]\nMOV R12D,dword ptr [RCX + 0x20]\nTEST R8B,R8B\nJNZ 0x004075cb\nCMP byte ptr [R15 + 0x1d],0x0\nJZ 0x00407524\nMOV EDX,dword ptr [R9 + 0x18]\nADD RCX,0x18\nJMP 0x0040754b\nCMP byte ptr [R15 + 0x18],0x0\nJNZ 0x00407536\nCMP byte ptr [R15 + 0x2a],0x0\nJZ 0x004075cb\nMOV EDX,dword ptr [R9 + 0x18]\nCMP byte ptr [R15 + 0x18],0x0\nJZ 0x00407547\nADD RCX,0x18\nJMP 0x0040754b\nLEA RCX,[R15 + 0x10]\nMOV EAX,dword ptr [RCX]\nMOV ECX,EAX\nOR ECX,0xe00\nXOR ECX,0x1ff\nAND ECX,EDX\nTEST CX,0xfff\nJZ 0x004075cb\nAND EDX,EAX\nAND EDX,0x1c0\nMOV RDI,R14\nMOV ESI,EBX\nCALL 0x0040a720\nTEST EAX,EAX\nJZ 0x004075cb\nMOV RDI,R15\nCALL 0x004081d0\nTEST AL,AL\nJNZ 0x004075bf\nCALL 0x00402100\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x413115\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,R14\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00402640\nMOVZX EAX,byte ptr [R15 + 0x23]\nNEG EAX\nJMP 0x004076a0\nCMP EBX,-0x1\nJZ 0x0040760f\nMOV EDI,EBX\nMOV ESI,EBP\nMOV EDX,R12D\nCALL 0x00402690\nTEST EAX,EAX\nJZ 0x0040769b\nCALL 0x00402100\nMOV R13,RAX\nMOV EBP,dword ptr [R13]\nCMP EBP,0x16\nJZ 0x004075fa\nCMP EBP,0x1\nJNZ 0x00407646\nMOV ESI,0xffffffff\nMOV EDI,EBX\nMOV EDX,R12D\nCALL 0x00402690\nMOV dword ptr [R13],EBP\nJMP 0x00407646\nMOV RDI,R14\nMOV ESI,EBP\nMOV EDX,R12D\nCALL 0x00402590\nTEST EAX,EAX\nJZ 0x0040769b\nCALL 0x00402100\nMOV RBX,RAX\nMOV EBP,dword ptr [RBX]\nCMP EBP,0x16\nJZ 0x00407634\nCMP EBP,0x1\nJNZ 0x00407646\nMOV ESI,0xffffffff\nMOV RDI,R14\nMOV EDX,R12D\nCALL 0x00402590\nMOV dword ptr [RBX],EBP\nMOV RDI,R15\nCALL 0x00405c10\nTEST AL,AL\nJNZ 0x00407697\nCALL 0x00402100\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x412d0c\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,R14\nCALL 0x0040b960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00402640\nMOV EAX,0xffffffff\nCMP byte ptr [R15 + 0x23],0x0\nJNZ 0x004076a0\nXOR EAX,EAX\nJMP 0x004076a0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2972
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n89 d3\n49 89 f6\n49 89 ff\n8b 69 1c\n44 8b 61 20\n45 84 c0\n0f 85 b8 00 00 00\n41 80 7f 1d 00\n74 0a\n41 8b 51 18\n48 83 c1 18\neb 27\n41 80 7f 18 00\n75 0b\n41 80 7f 2a 00\n0f 84 95 00 00 00\n41 8b 51 18\n41 80 7f 18 00\n74 06\n48 83 c1 18\neb 04\n49 8d 4f 10\n8b 01\n89 c1\n81 c9 00 0e 00 00\n81 f1 ff 01 00 00\n21 d1\n66 f7 c1 ff 0f\n74 67\n21 c2\n81 e2 c0 01 00 00\n4c 89 f7\n89 de\ne8 aa 31 00 00\n85 c0\n74 51\n4c 89 ff\ne8 4e 0c 00 00\n84 c0\n75 39\ne8 75 ab ff ff\n8b 18\n31 ff\nbe 15 31 41 00\nba 05 00 00 00\ne8 d2 ac ff ff\n48 89 c5\nbf 04 00 00 00\n4c 89 f6\ne8 b2 43 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 81 b0 ff ff\n41 0f b6 47 23\nf7 d8\ne9 d5 00 00 00\n83 fb ff\n74 3f\n89 df\n89 ee\n44 89 e2\ne8 b4 b0 ff ff\n85 c0\n0f 84 b7 00 00 00\ne8 17 ab ff ff\n49 89 c5\n41 8b 6d 00\n83 fd 16\n74 05\n83 fd 01\n75 4c\nbe ff ff ff ff\n89 df\n44 89 e2\ne8 87 b0 ff ff\n41 89 6d 00\neb 37\n4c 89 f7\n89 ee\n44 89 e2\ne8 74 af ff ff\n85 c0\n74 7b\ne8 db aa ff ff\n48 89 c3\n8b 2b\n83 fd 16\n74 05\n83 fd 01\n75 12\nbe ff ff ff ff\n4c 89 f7\n44 89 e2\ne8 4c af ff ff\n89 2b\n4c 89 ff\ne8 c2 e5 ff ff\n84 c0\n75 45\ne8 a9 aa ff ff\n8b 18\n31 ff\nbe 0c 2d 41 00\nba 05 00 00 00\ne8 06 ac ff ff\n48 89 c5\nbf 04 00 00 00\n4c 89 f6\ne8 e6 42 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 b5 af ff ff\nb8 ff ff ff ff\n41 80 7f 23 00\n75 09\n31 c0\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2973
S'.text:00000000004074f0\n.text:00000000004074f1\n.text:00000000004074f3\n.text:00000000004074f5\n.text:00000000004074f7\n.text:00000000004074f9\n.text:00000000004074fa\n.text:00000000004074fb\n.text:00000000004074fd\n.text:0000000000407500\n.text:0000000000407503\n.text:0000000000407506\n.text:000000000040750a\n.text:000000000040750d\n.text:0000000000407513\n.text:0000000000407518\n.text:000000000040751a\n.text:000000000040751e\n.text:0000000000407522\n.text:0000000000407524\n.text:0000000000407529\n.text:000000000040752b\n.text:0000000000407530\n.text:0000000000407536\n.text:000000000040753a\n.text:000000000040753f\n.text:0000000000407541\n.text:0000000000407545\n.text:0000000000407547\n.text:000000000040754b\n.text:000000000040754d\n.text:000000000040754f\n.text:0000000000407555\n.text:000000000040755b\n.text:000000000040755d\n.text:0000000000407562\n.text:0000000000407564\n.text:0000000000407566\n.text:000000000040756c\n.text:000000000040756f\n.text:0000000000407571\n.text:0000000000407576\n.text:0000000000407578\n.text:000000000040757a\n.text:000000000040757d\n.text:0000000000407582\n.text:0000000000407584\n.text:0000000000407586\n.text:000000000040758b\n.text:000000000040758d\n.text:000000000040758f\n.text:0000000000407594\n.text:0000000000407599\n.text:000000000040759e\n.text:00000000004075a1\n.text:00000000004075a6\n.text:00000000004075a9\n.text:00000000004075ae\n.text:00000000004075b1\n.text:00000000004075b3\n.text:00000000004075b5\n.text:00000000004075b7\n.text:00000000004075ba\n.text:00000000004075bf\n.text:00000000004075c4\n.text:00000000004075c6\n.text:00000000004075cb\n.text:00000000004075ce\n.text:00000000004075d0\n.text:00000000004075d2\n.text:00000000004075d4\n.text:00000000004075d7\n.text:00000000004075dc\n.text:00000000004075de\n.text:00000000004075e4\n.text:00000000004075e9\n.text:00000000004075ec\n.text:00000000004075f0\n.text:00000000004075f3\n.text:00000000004075f5\n.text:00000000004075f8\n.text:00000000004075fa\n.text:00000000004075ff\n.text:0000000000407601\n.text:0000000000407604\n.text:0000000000407609\n.text:000000000040760d\n.text:000000000040760f\n.text:0000000000407612\n.text:0000000000407614\n.text:0000000000407617\n.text:000000000040761c\n.text:000000000040761e\n.text:0000000000407620\n.text:0000000000407625\n.text:0000000000407628\n.text:000000000040762a\n.text:000000000040762d\n.text:000000000040762f\n.text:0000000000407632\n.text:0000000000407634\n.text:0000000000407639\n.text:000000000040763c\n.text:000000000040763f\n.text:0000000000407644\n.text:0000000000407646\n.text:0000000000407649\n.text:000000000040764e\n.text:0000000000407650\n.text:0000000000407652\n.text:0000000000407657\n.text:0000000000407659\n.text:000000000040765b\n.text:0000000000407660\n.text:0000000000407665\n.text:000000000040766a\n.text:000000000040766d\n.text:0000000000407672\n.text:0000000000407675\n.text:000000000040767a\n.text:000000000040767d\n.text:000000000040767f\n.text:0000000000407681\n.text:0000000000407683\n.text:0000000000407686\n.text:000000000040768b\n.text:0000000000407690\n.text:0000000000407695\n.text:0000000000407697\n.text:0000000000407699\n.text:000000000040769b\n.text:00000000004076a0\n.text:00000000004076a4\n.text:00000000004076a5\n.text:00000000004076a7\n.text:00000000004076a9\n.text:00000000004076ab\n.text:00000000004076ad\n.text:00000000004076ae\n'
p2974
tp2975
sS'diropen'
p2976
(S'\n__stdcall diropen(FTS * sp, char * dir)\n'
p2977
V\u000aint diropen(FTS *sp,char *dir)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  uint uVar3;\u000a  uint uVar4;\u000a  \u000a  uVar1 = sp->fts_options;\u000a  uVar3 = (uVar1 & 0x10) * 0x2000;\u000a  uVar4 = (uVar1 & 0x800) * 0x80 + 0x10900 + uVar3;\u000a  if ((uVar1 & 0x200) == 0) {\u000a    iVar2 = open_safer(dir,(ulong)uVar4);\u000a  }\u000a  else {\u000a    iVar2 = openat_safer((char *)(ulong)(uint)sp->fts_cwd_fd,dir,(ulong)uVar4,(ulong)uVar3);\u000a  }\u000a  if (-1 < iVar2) {\u000a    set_cloexec_flag();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p2978
S'PUSH RBX\nMOV EAX,dword ptr [RDI + 0x48]\nMOV ECX,EAX\nAND ECX,0x10\nSHL ECX,0xd\nMOV EDX,EAX\nSHL EDX,0x7\nAND EDX,0x40000\nLEA EDX,[0x10900 + RDX + RCX*0x1]\nTEST AH,0x2\nJNZ 0x0040e6b1\nXOR EAX,EAX\nMOV RDI,RSI\nMOV ESI,EDX\nCALL 0x00409100\nJMP 0x0040e6bb\nMOV EDI,dword ptr [RDI + 0x2c]\nXOR EAX,EAX\nCALL 0x00410d40\nMOV EBX,EAX\nTEST EBX,EBX\nJS 0x0040e6cd\nMOV ESI,0x1\nMOV EDI,EBX\nCALL 0x004106e0\nMOV EAX,EBX\nPOP RBX\nRET\n'
p2979
S'53\n8b 47 48\n89 c1\n83 e1 10\nc1 e1 0d\n89 c2\nc1 e2 07\n81 e2 00 00 04 00\n8d 94 0a 00 09 01 00\nf6 c4 02\n75 0e\n31 c0\n48 89 f7\n89 d6\ne8 51 aa ff ff\neb 0a\n8b 7f 2c\n31 c0\ne8 85 26 00 00\n89 c3\n85 db\n78 0c\nbe 01 00 00 00\n89 df\ne8 13 20 00 00\n89 d8\n5b\nc3\n'
p2980
S'.text:000000000040e680\n.text:000000000040e681\n.text:000000000040e684\n.text:000000000040e686\n.text:000000000040e689\n.text:000000000040e68c\n.text:000000000040e68e\n.text:000000000040e691\n.text:000000000040e697\n.text:000000000040e69e\n.text:000000000040e6a1\n.text:000000000040e6a3\n.text:000000000040e6a5\n.text:000000000040e6a8\n.text:000000000040e6aa\n.text:000000000040e6af\n.text:000000000040e6b1\n.text:000000000040e6b4\n.text:000000000040e6b6\n.text:000000000040e6bb\n.text:000000000040e6bd\n.text:000000000040e6bf\n.text:000000000040e6c1\n.text:000000000040e6c6\n.text:000000000040e6c8\n.text:000000000040e6cd\n.text:000000000040e6cf\n.text:000000000040e6d0\n'
p2981
tp2982
sS'do_move'
p2983
(S'\n__stdcall do_move(char * source, char * dest, cp_options * x)\n'
p2984
V\u000a_Bool do_move(char *source,char *dest,cp_options *x)\u000a\u000a{\u000a  _Bool _Var1;\u000a  RM_status RVar2;\u000a  _Bool copy_into_self;\u000a  char *dir [2];\u000a  rm_options rm_options;\u000a  char local_5a;\u000a  _Bool local_59;\u000a  char *local_58;\u000a  undefined8 local_50;\u000a  rm_options local_40;\u000a  \u000a  _Var1 = copy(source,dest,(cp_options *)0x0,(_Bool *)x,&local_59);\u000a  if (_Var1 == false) {\u000a    return false;\u000a  }\u000a  if (local_59 == false) {\u000a    if (source == (char *)0x0) {\u000a      return _Var1;\u000a    }\u000a    if (local_5a != 0) {\u000a      return _Var1;\u000a    }\u000a    rm_option_init(&local_40);\u000a    local_40.verbose = x->verbose;\u000a    local_50 = 0;\u000a    local_58 = source;\u000a    RVar2 = rm(&local_58,&local_40);\u000a    if (RVar2 + 0xfffffffe < 2) {\u000a      return _Var1;\u000a    }\u000a    if (RVar2 != RM_ERROR) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("VALID_STATUS (status)","src/mv.c",0xea,\u000a                    "_Bool do_move(const char *, const char *, const struct cp_options *)");\u000a    }\u000a  }\u000a  return false;\u000a}\u000a\u000a
p2985
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x48\nMOV R15,RDX\nMOV R14,RDI\nLEA R8,[RSP + 0xf]\nLEA R9,[RSP + 0xe]\nXOR EDX,EDX\nMOV RCX,R15\nCALL 0x00404040\nMOV BL,AL\nTEST BL,BL\nJZ 0x004032e4\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x004032f2\nXOR EBX,EBX\nMOV EAX,EBX\nADD RSP,0x48\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nTEST R14,R14\nJZ 0x004032e4\nMOV AL,byte ptr [RSP + 0xe]\nTEST AL,AL\nJNZ 0x004032e4\nLEA R12,[RSP + 0x28]\nMOV RDI,R12\nCALL 0x00403360\nMOV AL,byte ptr [R15 + 0x2d]\nMOV byte ptr [RSP + 0x41],AL\nMOV qword ptr [RSP + 0x10],R14\nMOV qword ptr [RSP + 0x18],0x0\nLEA RDI,[RSP + 0x10]\nMOV RSI,R12\nCALL 0x004033f0\nLEA ECX,[RAX + -0x2]\nCMP ECX,0x2\nJC 0x004032e4\nCMP EAX,0x4\nJZ 0x004032e2\nMOV EDI,0x41233d\nMOV ESI,0x4120bc\nMOV EDX,0xea\nMOV ECX,0x412353\nCALL 0x00402350\n'
p2986
S'41 57\n41 56\n41 54\n53\n48 83 ec 48\n49 89 d7\n49 89 fe\n4c 8d 44 24 0f\n4c 8d 4c 24 0e\n31 d2\n4c 89 f9\ne8 6b 0d 00 00\n88 c3\n84 db\n74 09\n80 7c 24 0f 00\n74 10\n31 db\n89 d8\n48 83 c4 48\n5b\n41 5c\n41 5e\n41 5f\nc3\n4d 85 f6\n74 ed\n8a 44 24 0e\n84 c0\n75 e5\n4c 8d 64 24 28\n4c 89 e7\ne8 54 00 00 00\n41 8a 47 2d\n88 44 24 41\n4c 89 74 24 10\n48 c7 44 24 18 00 00 00 00\n48 8d 7c 24 10\n4c 89 e6\ne8 c1 00 00 00\n8d 48 fe\n83 f9 02\n72 ad\n83 f8 04\n74 a6\nbf 3d 23 41 00\nbe bc 20 41 00\nba ea 00 00 00\nb9 53 23 41 00\ne8 fb ef ff ff\n'
p2987
S'.text:00000000004032b0\n.text:00000000004032b2\n.text:00000000004032b4\n.text:00000000004032b6\n.text:00000000004032b7\n.text:00000000004032bb\n.text:00000000004032be\n.text:00000000004032c1\n.text:00000000004032c6\n.text:00000000004032cb\n.text:00000000004032cd\n.text:00000000004032d0\n.text:00000000004032d5\n.text:00000000004032d7\n.text:00000000004032d9\n.text:00000000004032db\n.text:00000000004032e0\n.text:00000000004032e2\n.text:00000000004032e4\n.text:00000000004032e6\n.text:00000000004032ea\n.text:00000000004032eb\n.text:00000000004032ed\n.text:00000000004032ef\n.text:00000000004032f1\n.text:00000000004032f2\n.text:00000000004032f5\n.text:00000000004032f7\n.text:00000000004032fb\n.text:00000000004032fd\n.text:00000000004032ff\n.text:0000000000403304\n.text:0000000000403307\n.text:000000000040330c\n.text:0000000000403310\n.text:0000000000403314\n.text:0000000000403319\n.text:0000000000403322\n.text:0000000000403327\n.text:000000000040332a\n.text:000000000040332f\n.text:0000000000403332\n.text:0000000000403335\n.text:0000000000403337\n.text:000000000040333a\n.text:000000000040333c\n.text:0000000000403341\n.text:0000000000403346\n.text:000000000040334b\n.text:0000000000403350\n'
p2988
tp2989
sS'_start'
p2990
(S'\n__stdcall _start()\n'
p2991
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00618ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p2992
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x4113a0\nMOV RCX,0x411330\nMOV RDI,0x402ba0\nCALL qword ptr [0x00618ff0]\nHLT\n'
p2993
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 a0 13 41 00\n48 c7 c1 30 13 41 00\n48 c7 c7 a0 2b 40 00\nff 15 26 68 21 00\nf4\n'
p2994
S'.text:00000000004027a0\n.text:00000000004027a2\n.text:00000000004027a5\n.text:00000000004027a6\n.text:00000000004027a9\n.text:00000000004027ad\n.text:00000000004027ae\n.text:00000000004027af\n.text:00000000004027b6\n.text:00000000004027bd\n.text:00000000004027c4\n.text:00000000004027ca\n'
p2995
tp2996
sS'overwrite_ok'
p2997
(S'\n__stdcall overwrite_ok(cp_options * x, char * dst_name, stat * dst_sb)\n'
p2998
V\u000a_Bool overwrite_ok(cp_options *x,char *dst_name,stat *dst_sb)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  _Bool _Var2;\u000a  undefined8 uVar3;\u000a  char *pcVar4;\u000a  char *pcVar5;\u000a  char perms [12];\u000a  undefined local_33 [9];\u000a  undefined local_2a;\u000a  \u000a  _Var2 = writable_destination(dst_name);\u000a  uVar1 = stderr;\u000a  if (_Var2 == false) {\u000a    strmode((char *)(ulong)dst_sb->st_mode);\u000a    uVar1 = stderr;\u000a    local_2a = 0;\u000a    if (((x->move_mode == false) && (x->unlink_dest_before_opening == false)) &&\u000a       (x->unlink_dest_after_failed_open == false)) {\u000a      pcVar5 = "%s: unwritable %s (mode %04lo, %s); try anyway? ";\u000a    }\u000a    else {\u000a      pcVar5 = "%s: replace %s, overriding mode %04lo (%s)? ";\u000a    }\u000a    uVar3 = dcgettext(0,pcVar5,5);\u000a    pcVar5 = program_name;\u000a    pcVar4 = quotearg_style((char *)0x4);\u000a    __fprintf_chk(uVar1,1,uVar3,pcVar5,pcVar4,(ulong)(dst_sb->st_mode & 0xfff),local_33);\u000a  }\u000a  else {\u000a    uVar3 = dcgettext(0,"%s: overwrite %s? ",5);\u000a    pcVar5 = program_name;\u000a    pcVar4 = quotearg_style((char *)0x4);\u000a    __fprintf_chk(uVar1,1,uVar3,pcVar5,pcVar4);\u000a  }\u000a  _Var2 = yesno();\u000a  return _Var2;\u000a}\u000a\u000a
p2999
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x20\nMOV RBX,RDX\nMOV R14,RSI\nMOV R12,RDI\nMOV ESI,dword ptr [RBX + 0x18]\nMOV RDI,R14\nCALL 0x004076b0\nTEST AL,AL\nJZ 0x004062e4\nMOV R15,qword ptr [0x00619460]\nXOR EDI,EDI\nMOV ESI,0x412e85\nMOV EDX,0x5\nCALL 0x00402270\nMOV R12,RAX\nMOV R13,qword ptr [0x006198d0]\nMOV EDI,0x4\nMOV RSI,R14\nCALL 0x0040b960\nMOV RBX,RAX\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R15\nMOV RDX,R12\nMOV RCX,R13\nMOV R8,RBX\nCALL 0x00402740\nJMP 0x00406369\nMOV EDI,dword ptr [RBX + 0x18]\nLEA RSI,[RSP + 0x14]\nCALL 0x00409300\nMOV byte ptr [RSP + 0x1e],0x0\nMOV R15,qword ptr [0x00619460]\nCMP byte ptr [R12 + 0x18],0x0\nJNZ 0x00406315\nCMP byte ptr [R12 + 0x15],0x0\nJNZ 0x00406315\nCMP byte ptr [R12 + 0x16],0x0\nJZ 0x0040637c\nMOV ESI,0x412e27\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00402270\nMOV R12,RAX\nMOV R13,qword ptr [0x006198d0]\nMOV EDI,0x4\nMOV RSI,R14\nCALL 0x0040b960\nMOV R8,RAX\nMOV R9D,dword ptr [RBX + 0x18]\nAND R9D,0xfff\nLEA RAX,[RSP + 0x15]\nMOV qword ptr [RSP],RAX\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R15\nMOV RDX,R12\nMOV RCX,R13\nCALL 0x00402740\nCALL 0x0040db70\nADD RSP,0x20\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\nMOV ESI,0x412e54\nJMP 0x0040631a\n'
p3000
S'41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 20\n48 89 d3\n49 89 f6\n49 89 fc\n8b 73 18\n4c 89 f7\ne8 1f 14 00 00\n84 c0\n74 4f\n4c 8b 3d c4 31 21 00\n31 ff\nbe 85 2e 41 00\nba 05 00 00 00\ne8 c3 bf ff ff\n49 89 c4\n4c 8b 2d 19 36 21 00\nbf 04 00 00 00\n4c 89 f6\ne8 9c 56 00 00\n48 89 c3\nbe 01 00 00 00\n31 c0\n4c 89 ff\n4c 89 e2\n4c 89 e9\n49 89 d8\ne8 61 c4 ff ff\ne9 85 00 00 00\n8b 7b 18\n48 8d 74 24 14\ne8 0f 30 00 00\nc6 44 24 1e 00\n4c 8b 3d 63 31 21 00\n41 80 7c 24 18 00\n75 10\n41 80 7c 24 15 00\n75 08\n41 80 7c 24 16 00\n74 67\nbe 27 2e 41 00\n31 ff\nba 05 00 00 00\ne8 4a bf ff ff\n49 89 c4\n4c 8b 2d a0 35 21 00\nbf 04 00 00 00\n4c 89 f6\ne8 23 56 00 00\n49 89 c0\n44 8b 4b 18\n41 81 e1 ff 0f 00 00\n48 8d 44 24 15\n48 89 04 24\nbe 01 00 00 00\n31 c0\n4c 89 ff\n4c 89 e2\n4c 89 e9\ne8 d7 c3 ff ff\ne8 02 78 00 00\n48 83 c4 20\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\nbe 54 2e 41 00\neb 97\n'
p3001
S'.text:0000000000406270\n.text:0000000000406272\n.text:0000000000406274\n.text:0000000000406276\n.text:0000000000406278\n.text:0000000000406279\n.text:000000000040627d\n.text:0000000000406280\n.text:0000000000406283\n.text:0000000000406286\n.text:0000000000406289\n.text:000000000040628c\n.text:0000000000406291\n.text:0000000000406293\n.text:0000000000406295\n.text:000000000040629c\n.text:000000000040629e\n.text:00000000004062a3\n.text:00000000004062a8\n.text:00000000004062ad\n.text:00000000004062b0\n.text:00000000004062b7\n.text:00000000004062bc\n.text:00000000004062bf\n.text:00000000004062c4\n.text:00000000004062c7\n.text:00000000004062cc\n.text:00000000004062ce\n.text:00000000004062d1\n.text:00000000004062d4\n.text:00000000004062d7\n.text:00000000004062da\n.text:00000000004062df\n.text:00000000004062e4\n.text:00000000004062e7\n.text:00000000004062ec\n.text:00000000004062f1\n.text:00000000004062f6\n.text:00000000004062fd\n.text:0000000000406303\n.text:0000000000406305\n.text:000000000040630b\n.text:000000000040630d\n.text:0000000000406313\n.text:0000000000406315\n.text:000000000040631a\n.text:000000000040631c\n.text:0000000000406321\n.text:0000000000406326\n.text:0000000000406329\n.text:0000000000406330\n.text:0000000000406335\n.text:0000000000406338\n.text:000000000040633d\n.text:0000000000406340\n.text:0000000000406344\n.text:000000000040634b\n.text:0000000000406350\n.text:0000000000406354\n.text:0000000000406359\n.text:000000000040635b\n.text:000000000040635e\n.text:0000000000406361\n.text:0000000000406364\n.text:0000000000406369\n.text:000000000040636e\n.text:0000000000406372\n.text:0000000000406373\n.text:0000000000406375\n.text:0000000000406377\n.text:0000000000406379\n.text:000000000040637b\n.text:000000000040637c\n.text:0000000000406381\n'
p3002
tp3003
sS'lgetfilecon'
p3004
(S'\n__stdcall lgetfilecon(char * file, security_context_t * con)\n'
p3005
V\u000aint lgetfilecon(char *file,security_context_t *con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p3006
S'PUSH RAX\nCALL 0x00402100\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p3007
S'50\ne8 da 5b ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p3008
S'.text:000000000040c520\n.text:000000000040c521\n.text:000000000040c526\n.text:000000000040c52c\n.text:000000000040c531\n.text:000000000040c532\n'
p3009
tp3010
sS'validate_timespec'
p3011
(S'\n__stdcall validate_timespec(timespec * timespec)\n'
p3012
V\u000aint validate_timespec(timespec *timespec)\u000a\u000a{\u000a  int *piVar1;\u000a  bool bVar2;\u000a  uint uVar3;\u000a  bool bVar4;\u000a  \u000a  if ((((ulong)timespec->tv_nsec < 1000000000) ||\u000a      ((timespec->tv_nsec & 0xfffffffffffffffeU) == 0x3ffffffe)) &&\u000a     (((ulong)timespec[1].tv_nsec < 1000000000 ||\u000a      ((timespec[1].tv_nsec & 0xfffffffffffffffeU) == 0x3ffffffe)))) {\u000a    bVar4 = (timespec->tv_nsec & 0xfffffffffffffffeU) == 0x3ffffffe;\u000a    if (bVar4) {\u000a      timespec->tv_sec = 0;\u000a    }\u000a    bVar2 = bVar4 && timespec->tv_nsec == 0x3ffffffe;\u000a    uVar3 = (uint)bVar4;\u000a    if ((timespec[1].tv_nsec & 0xfffffffffffffffeU) == 0x3ffffffe) {\u000a      timespec[1].tv_sec = 0;\u000a      bVar2 = (bool)(bVar2 + (timespec[1].tv_nsec == 0x3ffffffeU));\u000a      uVar3 = 1;\u000a    }\u000a    return (int)((uint)(bVar2 == true) + uVar3);\u000a  }\u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x16;\u000a  return -1;\u000a}\u000a\u000a
p3013
S'MOV RAX,qword ptr [RDI + 0x8]\nCMP RAX,0x3b9aca00\nJC 0x0040d0d8\nAND RAX,-0x2\nCMP RAX,0x3ffffffe\nJNZ 0x0040d0f0\nMOV RAX,qword ptr [RDI + 0x18]\nCMP RAX,0x3b9aca00\nJC 0x0040d106\nAND RAX,-0x2\nCMP RAX,0x3ffffffe\nJZ 0x0040d106\nPUSH RAX\nCALL 0x00402100\nMOV dword ptr [RAX],0x16\nMOV EAX,0xffffffff\nADD RSP,0x8\nRET\nMOV RAX,qword ptr [RDI + 0x8]\nMOV RCX,RAX\nAND RCX,-0x2\nXOR EDX,EDX\nCMP RCX,0x3ffffffe\nMOV ECX,0x0\nJNZ 0x0040d138\nXOR ECX,ECX\nCMP RAX,0x3ffffffe\nSETZ CL\nMOV qword ptr [RDI],0x0\nMOV EDX,0x1\nMOV RAX,qword ptr [RDI + 0x18]\nMOV RSI,RAX\nAND RSI,-0x2\nCMP RSI,0x3ffffffe\nJNZ 0x0040d166\nXOR EDX,EDX\nCMP RAX,0x3ffffffe\nSETZ DL\nMOV qword ptr [RDI + 0x10],0x0\nADD ECX,EDX\nMOV EDX,0x1\nXOR EAX,EAX\nCMP ECX,0x1\nSETZ AL\nADD EAX,EDX\nRET\n'
p3014
S'48 8b 47 08\n48 3d 00 ca 9a 3b\n72 0c\n48 83 e0 fe\n48 3d fe ff ff 3f\n75 18\n48 8b 47 18\n48 3d 00 ca 9a 3b\n72 22\n48 83 e0 fe\n48 3d fe ff ff 3f\n74 16\n50\ne8 0a 50 ff ff\nc7 00 16 00 00 00\nb8 ff ff ff ff\n48 83 c4 08\nc3\n48 8b 47 08\n48 89 c1\n48 83 e1 fe\n31 d2\n48 81 f9 fe ff ff 3f\nb9 00 00 00 00\n75 17\n31 c9\n48 3d fe ff ff 3f\n0f 94 c1\n48 c7 07 00 00 00 00\nba 01 00 00 00\n48 8b 47 18\n48 89 c6\n48 83 e6 fe\n48 81 fe fe ff ff 3f\n75 1a\n31 d2\n48 3d fe ff ff 3f\n0f 94 c2\n48 c7 47 10 00 00 00 00\n01 d1\nba 01 00 00 00\n31 c0\n83 f9 01\n0f 94 c0\n01 d0\nc3\n'
p3015
S'.text:000000000040d0c0\n.text:000000000040d0c4\n.text:000000000040d0ca\n.text:000000000040d0cc\n.text:000000000040d0d0\n.text:000000000040d0d6\n.text:000000000040d0d8\n.text:000000000040d0dc\n.text:000000000040d0e2\n.text:000000000040d0e4\n.text:000000000040d0e8\n.text:000000000040d0ee\n.text:000000000040d0f0\n.text:000000000040d0f1\n.text:000000000040d0f6\n.text:000000000040d0fc\n.text:000000000040d101\n.text:000000000040d105\n.text:000000000040d106\n.text:000000000040d10a\n.text:000000000040d10d\n.text:000000000040d111\n.text:000000000040d113\n.text:000000000040d11a\n.text:000000000040d11f\n.text:000000000040d121\n.text:000000000040d123\n.text:000000000040d129\n.text:000000000040d12c\n.text:000000000040d133\n.text:000000000040d138\n.text:000000000040d13c\n.text:000000000040d13f\n.text:000000000040d143\n.text:000000000040d14a\n.text:000000000040d14c\n.text:000000000040d14e\n.text:000000000040d154\n.text:000000000040d157\n.text:000000000040d15f\n.text:000000000040d161\n.text:000000000040d166\n.text:000000000040d168\n.text:000000000040d16b\n.text:000000000040d16e\n.text:000000000040d170\n'
p3016
tp3017
sS'set_permissions'
p3018
(S'\n__stdcall set_permissions(permission_context * ctx, char * name)\n'
p3019
V\u000aint set_permissions(permission_context *ctx,char *name)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = chmod_or_fchmod(name);\u000a  return (int)-(uint)(iVar1 != 0);\u000a}\u000a\u000a
p3020
S'PUSH RAX\nMOV EAX,dword ptr [RDI]\nMOV RDI,RSI\nMOV ESI,EDX\nMOV EDX,EAX\nCALL 0x00410120\nNEG EAX\nSBB EAX,EAX\nPOP RCX\nRET\n'
p3021
S'50\n8b 07\n48 89 f7\n89 d6\n89 c2\ne8 d1 ff ff ff\nf7 d8\n19 c0\n59\nc3\n'
p3022
S'.text:0000000000410140\n.text:0000000000410141\n.text:0000000000410143\n.text:0000000000410146\n.text:0000000000410148\n.text:000000000041014a\n.text:000000000041014f\n.text:0000000000410151\n.text:0000000000410153\n.text:0000000000410154\n'
p3023
tp3024
sS'stpcpy'
p3025
(S'\n__stdcall stpcpy(char * __dest, char * __src)\n'
p3026
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * stpcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_stpcpy_006190e8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p3027
S'JMP qword ptr [0x006190e8]\n'
p3028
S'ff 25 92 6e 21 00\n'
p3029
S'.plt:0000000000402250\n'
p3030
tp3031
sS'atexit'
p3032
(S'\n__stdcall atexit(__func * __func)\n'
p3033
V\u000a/* WARNING: Removing unreachable block (ram,0x004113d0) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_00619338)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p3034
S'MOV RAX,0x619398\nTEST RAX,RAX\nJZ 0x004113d0\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x004026f0\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x004026f0\n'
p3035
S'48 c7 c0 98 93 61 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 2a 13 ff ff\n31 d2\n31 f6\ne9 17 13 ff ff\n'
p3036
S'.text:00000000004113b0\n.text:00000000004113b7\n.text:00000000004113ba\n.text:00000000004113bc\n.text:00000000004113bf\n.text:00000000004113c1\n.text:00000000004113d0\n.text:00000000004113d2\n.text:00000000004113d4\n'
p3037
tp3038
sS'can_write_any_file'
p3039
(S'\n__stdcall can_write_any_file()\n'
p3040
V\u000a_Bool can_write_any_file(void)\u000a\u000a{\u000a  _Bool can_write;\u000a  __uid_t _Var1;\u000a  \u000a  if (can_write_any_file_initialized == 0) {\u000a    _Var1 = geteuid();\u000a    can_write = (_Bool)(_Var1 == 0);\u000a    can_write_any_file_initialized = 1;\u000a  }\u000a  return can_write;\u000a}\u000a\u000a
p3041
S'MOV AL,byte ptr [0x00619a38]\nTEST AL,AL\nJNZ 0x0040d924\nPUSH RAX\nCALL 0x00402370\nTEST EAX,EAX\nSETZ byte ptr [0x00619a39]\nMOV byte ptr [0x00619a38],0x1\nADD RSP,0x8\nMOV AL,byte ptr [0x00619a39]\nRET\n'
p3042
S'8a 05 32 c1 20 00\n84 c0\n75 1a\n50\ne8 60 4a ff ff\n85 c0\n0f 94 05 20 c1 20 00\nc6 05 18 c1 20 00 01\n48 83 c4 08\n8a 05 0f c1 20 00\nc3\n'
p3043
S'.text:000000000040d900\n.text:000000000040d906\n.text:000000000040d908\n.text:000000000040d90a\n.text:000000000040d90b\n.text:000000000040d910\n.text:000000000040d912\n.text:000000000040d919\n.text:000000000040d920\n.text:000000000040d924\n.text:000000000040d92a\n'
p3044
tp3045
sS'fdopen'
p3046
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p3047
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_006192a8)();\u000a  return pFVar1;\u000a}\u000a\u000a
p3048
S'JMP qword ptr [0x006192a8]\n'
p3049
S'ff 25 d2 6c 21 00\n'
p3050
S'.plt:00000000004025d0\n'
p3051
tp3052
sS'hash_find_entry'
p3053
(S'\n__stdcall hash_find_entry(Hash_table * table, void * entry, hash_entry * * bucket_head)\n'
p3054
V\u000avoid * hash_find_entry(Hash_table *table,void *entry,hash_entry **bucket_head)\u000a\u000a{\u000a  undefined4 uVar1;\u000a  undefined4 uVar2;\u000a  undefined4 uVar3;\u000a  _Bool _Var4;\u000a  hash_entry *phVar5;\u000a  hash_entry *entry_00;\u000a  char in_CL;\u000a  hash_entry **pphVar6;\u000a  void *pvVar7;\u000a  \u000a  phVar5 = safe_hasher(table,entry);\u000a  *bucket_head = phVar5;\u000a  pvVar7 = phVar5->data;\u000a  if (pvVar7 == (void *)0x0) {\u000a    return (void *)0x0;\u000a  }\u000a  if ((pvVar7 == entry) || (_Var4 = (*table->comparator)(entry,pvVar7), _Var4 != false)) {\u000a    pvVar7 = phVar5->data;\u000a    if (in_CL == 0) {\u000a      return pvVar7;\u000a    }\u000a    entry_00 = phVar5->next;\u000a    if (entry_00 == (hash_entry *)0x0) {\u000a      phVar5->data = (void *)0x0;\u000a      return pvVar7;\u000a    }\u000a    uVar1 = *(undefined4 *)((long)&entry_00->data + 4);\u000a    uVar2 = *(undefined4 *)&entry_00->next;\u000a    uVar3 = *(undefined4 *)((long)&entry_00->next + 4);\u000a    *(undefined4 *)&phVar5->data = *(undefined4 *)&entry_00->data;\u000a    *(undefined4 *)((long)&phVar5->data + 4) = uVar1;\u000a    *(undefined4 *)&phVar5->next = uVar2;\u000a    *(undefined4 *)((long)&phVar5->next + 4) = uVar3;\u000a  }\u000a  else {\u000a    entry_00 = phVar5->next;\u000a    if (entry_00 == (hash_entry *)0x0) {\u000a      return (void *)0x0;\u000a    }\u000a    while( true ) {\u000a      pphVar6 = &phVar5->next;\u000a      if ((entry_00->data == entry) ||\u000a         (_Var4 = (*table->comparator)(entry,entry_00->data), _Var4 != false)) break;\u000a      phVar5 = *pphVar6;\u000a      entry_00 = phVar5->next;\u000a      if (entry_00 == (hash_entry *)0x0) {\u000a        return (void *)0x0;\u000a      }\u000a    }\u000a    entry_00 = *pphVar6;\u000a    pvVar7 = entry_00->data;\u000a    if (in_CL == 0) {\u000a      return pvVar7;\u000a    }\u000a    *pphVar6 = entry_00->next;\u000a  }\u000a  free_entry(table,entry_00);\u000a  return pvVar7;\u000a}\u000a\u000a
p3055
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R12D,ECX\nMOV R14,RDX\nMOV RBP,RSI\nMOV R15,RDI\nCALL 0x004097c0\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RSI,qword ptr [RBX]\nTEST RSI,RSI\nJZ 0x0040a235\nCMP RSI,RBP\nJZ 0x0040a1e7\nMOV RDI,RBP\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJZ 0x0040a200\nMOV R14,qword ptr [RBX]\nTEST R12B,R12B\nJZ 0x0040a25d\nMOV RSI,qword ptr [RBX + 0x8]\nTEST RSI,RSI\nJZ 0x0040a23a\nMOVUPS XMM0,xmmword ptr [RSI]\nMOVUPS xmmword ptr [RBX],XMM0\nJMP 0x0040a255\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nJZ 0x0040a235\nADD RBX,0x8\nXOR R14D,R14D\nMOV RSI,qword ptr [RAX]\nCMP RSI,RBP\nJZ 0x0040a243\nMOV RDI,RBP\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJNZ 0x0040a243\nMOV RBX,qword ptr [RBX]\nMOV RAX,qword ptr [RBX + 0x8]\nADD RBX,0x8\nTEST RAX,RAX\nJNZ 0x0040a210\nJMP 0x0040a25d\nXOR R14D,R14D\nJMP 0x0040a25d\nMOV qword ptr [RBX],0x0\nJMP 0x0040a25d\nMOV RSI,qword ptr [RBX]\nMOV R14,qword ptr [RSI]\nTEST R12B,R12B\nJZ 0x0040a25d\nMOV RAX,qword ptr [RSI + 0x8]\nMOV qword ptr [RBX],RAX\nMOV RDI,R15\nCALL 0x0040a530\nMOV RAX,R14\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p3056
S'55\n41 57\n41 56\n41 54\n53\n41 89 cc\n49 89 d6\n48 89 f5\n49 89 ff\ne8 f7 f5 ff ff\n48 89 c3\n49 89 1e\n48 8b 33\n48 85 f6\n74 5e\n48 39 ee\n74 0b\n48 89 ef\n41 ff 57 38\n84 c0\n74 19\n4c 8b 33\n45 84 e4\n74 6e\n48 8b 73 08\n48 85 f6\n74 42\n0f 10 06\n0f 11 03\neb 55\n48 8b 43 08\n48 85 c0\n74 2c\n48 83 c3 08\n45 31 f6\n48 8b 30\n48 39 ee\n74 2b\n48 89 ef\n41 ff 57 38\n84 c0\n75 20\n48 8b 1b\n48 8b 43 08\n48 83 c3 08\n48 85 c0\n75 dd\neb 28\n45 31 f6\neb 23\n48 c7 03 00 00 00 00\neb 1a\n48 8b 33\n4c 8b 36\n45 84 e4\n74 0f\n48 8b 46 08\n48 89 03\n4c 89 ff\ne8 d3 02 00 00\n4c 89 f0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p3057
S'.text:000000000040a1b0\n.text:000000000040a1b1\n.text:000000000040a1b3\n.text:000000000040a1b5\n.text:000000000040a1b7\n.text:000000000040a1b8\n.text:000000000040a1bb\n.text:000000000040a1be\n.text:000000000040a1c1\n.text:000000000040a1c4\n.text:000000000040a1c9\n.text:000000000040a1cc\n.text:000000000040a1cf\n.text:000000000040a1d2\n.text:000000000040a1d5\n.text:000000000040a1d7\n.text:000000000040a1da\n.text:000000000040a1dc\n.text:000000000040a1df\n.text:000000000040a1e3\n.text:000000000040a1e5\n.text:000000000040a1e7\n.text:000000000040a1ea\n.text:000000000040a1ed\n.text:000000000040a1ef\n.text:000000000040a1f3\n.text:000000000040a1f6\n.text:000000000040a1f8\n.text:000000000040a1fb\n.text:000000000040a1fe\n.text:000000000040a200\n.text:000000000040a204\n.text:000000000040a207\n.text:000000000040a209\n.text:000000000040a20d\n.text:000000000040a210\n.text:000000000040a213\n.text:000000000040a216\n.text:000000000040a218\n.text:000000000040a21b\n.text:000000000040a21f\n.text:000000000040a221\n.text:000000000040a223\n.text:000000000040a226\n.text:000000000040a22a\n.text:000000000040a22e\n.text:000000000040a231\n.text:000000000040a233\n.text:000000000040a235\n.text:000000000040a238\n.text:000000000040a23a\n.text:000000000040a241\n.text:000000000040a243\n.text:000000000040a246\n.text:000000000040a249\n.text:000000000040a24c\n.text:000000000040a24e\n.text:000000000040a252\n.text:000000000040a255\n.text:000000000040a258\n.text:000000000040a25d\n.text:000000000040a260\n.text:000000000040a261\n.text:000000000040a263\n.text:000000000040a265\n.text:000000000040a267\n.text:000000000040a268\n'
p3058
tp3059
sS'error'
p3060
(S'\n__stdcall error()\n'
p3061
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_006192e0)();\u000a  return;\u000a}\u000a\u000a
p3062
S'JMP qword ptr [0x006192e0]\n'
p3063
S'ff 25 9a 6c 21 00\n'
p3064
S'.plt:0000000000402640\n'
p3065
tp3066
sS'writable_destination'
p3067
(S'\n__stdcall writable_destination(char * file)\n'
p3068
V\u000a_Bool writable_destination(char *file)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  undefined8 in_RSI;\u000a  bool bVar3;\u000a  \u000a  bVar3 = true;\u000a  if (((uint)in_RSI & 0xf000) != 0xa000) {\u000a    _Var1 = can_write_any_file();\u000a    if (_Var1 == false) {\u000a      iVar2 = euidaccess(file,2);\u000a      bVar3 = iVar2 == 0;\u000a    }\u000a  }\u000a  return (_Bool)bVar3;\u000a}\u000a\u000a
p3069
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nAND ESI,0xf000\nMOV BL,0x1\nCMP ESI,0xa000\nJZ 0x004076e2\nCALL 0x0040d900\nTEST AL,AL\nJNZ 0x004076e2\nMOV ESI,0x2\nMOV RDI,R14\nCALL 0x004026d0\nTEST EAX,EAX\nSETZ BL\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p3070
S'41 56\n53\n50\n49 89 fe\n81 e6 00 f0 00 00\nb3 01\n81 fe 00 a0 00 00\n74 1b\ne8 34 62 00 00\n84 c0\n75 12\nbe 02 00 00 00\n4c 89 f7\ne8 f3 af ff ff\n85 c0\n0f 94 c3\n89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p3071
S'.text:00000000004076b0\n.text:00000000004076b2\n.text:00000000004076b3\n.text:00000000004076b4\n.text:00000000004076b7\n.text:00000000004076bd\n.text:00000000004076bf\n.text:00000000004076c5\n.text:00000000004076c7\n.text:00000000004076cc\n.text:00000000004076ce\n.text:00000000004076d0\n.text:00000000004076d5\n.text:00000000004076d8\n.text:00000000004076dd\n.text:00000000004076df\n.text:00000000004076e2\n.text:00000000004076e4\n.text:00000000004076e8\n.text:00000000004076e9\n.text:00000000004076eb\n'
p3072
tp3073
sS'hash_init'
p3074
(S'\n__stdcall hash_init()\n'
p3075
V\u000aundefined8 hash_init(void)\u000a\u000a{\u000a  undefined8 in_RAX;\u000a  \u000a  src_to_dest = hash_initialize(0x67,(Hash_tuning *)0x0,src_to_dest_hash,src_to_dest_compare,\u000a                                src_to_dest_free);\u000a  if (src_to_dest != (Hash_table *)0x0) {\u000a    return in_RAX;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p3076
S'PUSH RAX\nMOV EDI,0x67\nXOR ESI,ESI\nMOV EDX,0x408340\nMOV ECX,0x408350\nMOV R8D,0x408240\nCALL 0x004099d0\nMOV qword ptr [0x006198b0],RAX\nTEST RAX,RAX\nJZ 0x0040833b\nPOP RAX\nRET\nCALL 0x0040dae0\n'
p3077
S'50\nbf 67 00 00 00\n31 f6\nba 40 83 40 00\nb9 50 83 40 00\n41 b8 40 82 40 00\ne8 a3 16 00 00\n48 89 05 7c 15 21 00\n48 85 c0\n74 02\n58\nc3\ne8 a0 57 00 00\n'
p3078
S'.text:0000000000408310\n.text:0000000000408311\n.text:0000000000408316\n.text:0000000000408318\n.text:000000000040831d\n.text:0000000000408322\n.text:0000000000408328\n.text:000000000040832d\n.text:0000000000408334\n.text:0000000000408337\n.text:0000000000408339\n.text:000000000040833a\n.text:000000000040833b\n'
p3079
tp3080
sS'raw_comparator'
p3081
(S'\n__stdcall raw_comparator(void * a, void * b)\n'
p3082
V\u000a_Bool raw_comparator(void *a,void *b)\u000a\u000a{\u000a  return (_Bool)(a == b);\u000a}\u000a\u000a
p3083
S'CMP RDI,RSI\nSETZ AL\nRET\n'
p3084
S'48 39 f7\n0f 94 c0\nc3\n'
p3085
S'.text:0000000000409ad0\n.text:0000000000409ad3\n.text:0000000000409ad6\n'
p3086
tp3087
sS'strcaseeq6'
p3088
(S'\n__stdcall strcaseeq6()\n'
p3089
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p3090
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00410690\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x0040bf22\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040bf29\nJMP 0x0040bf3e\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040bf3e\nTEST BPL,BPL\nJZ 0x0040bf39\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x0040bf50\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p3091
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 81 47 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p3092
S'.text:000000000040bf00\n.text:000000000040bf01\n.text:000000000040bf02\n.text:000000000040bf03\n.text:000000000040bf05\n.text:000000000040bf08\n.text:000000000040bf0a\n.text:000000000040bf0f\n.text:000000000040bf13\n.text:000000000040bf15\n.text:000000000040bf17\n.text:000000000040bf1a\n.text:000000000040bf1c\n.text:000000000040bf1e\n.text:000000000040bf20\n.text:000000000040bf22\n.text:000000000040bf24\n.text:000000000040bf27\n.text:000000000040bf29\n.text:000000000040bf2c\n.text:000000000040bf2e\n.text:000000000040bf31\n.text:000000000040bf35\n.text:000000000040bf36\n.text:000000000040bf37\n.text:000000000040bf39\n.text:000000000040bf3e\n.text:000000000040bf42\n.text:000000000040bf43\n.text:000000000040bf44\n'
p3093
tp3094
sS'strcaseeq5'
p3095
(S'\n__stdcall strcaseeq5()\n'
p3096
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p3097
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00410690\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x0040bed6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040bedd\nJMP 0x0040bef4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040bef4\nTEST BPL,BPL\nJZ 0x0040beef\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x0040bf00\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p3098
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 cd 47 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p3099
S'.text:000000000040beb0\n.text:000000000040beb1\n.text:000000000040beb3\n.text:000000000040beb4\n.text:000000000040beb7\n.text:000000000040beb9\n.text:000000000040bebc\n.text:000000000040bebe\n.text:000000000040bec3\n.text:000000000040bec7\n.text:000000000040bec9\n.text:000000000040becb\n.text:000000000040bece\n.text:000000000040bed0\n.text:000000000040bed2\n.text:000000000040bed4\n.text:000000000040bed6\n.text:000000000040bed8\n.text:000000000040bedb\n.text:000000000040bedd\n.text:000000000040bee0\n.text:000000000040bee2\n.text:000000000040bee6\n.text:000000000040bee9\n.text:000000000040beea\n.text:000000000040beec\n.text:000000000040beed\n.text:000000000040beef\n.text:000000000040bef4\n.text:000000000040bef5\n.text:000000000040bef7\n.text:000000000040bef8\n'
p3100
tp3101
sS'defaultcon'
p3102
(S'\n__stdcall defaultcon()\n'
p3103
V\u000aint defaultcon(void)\u000a\u000a{\u000a  int in_EAX;\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return in_EAX;\u000a}\u000a\u000a
p3104
S'PUSH RAX\nCALL 0x00402100\nMOV dword ptr [RAX],0x5f\nPOP RAX\nRET\n'
p3105
S'50\ne8 ea a9 ff ff\nc7 00 5f 00 00 00\n58\nc3\n'
p3106
S'.text:0000000000407710\n.text:0000000000407711\n.text:0000000000407716\n.text:000000000040771c\n.text:000000000040771d\n'
p3107
tp3108
sS'strcaseeq7'
p3109
(S'\n__stdcall strcaseeq7()\n'
p3110
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p3111
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00410690\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x0040bf72\nTEST ECX,0xffffffdf\nJNZ 0x0040bf76\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x0040bf7a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p3112
S'53\n48 89 fb\n31 ff\ne8 35 47 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p3113
S'.text:000000000040bf50\n.text:000000000040bf51\n.text:000000000040bf54\n.text:000000000040bf56\n.text:000000000040bf5b\n.text:000000000040bf5f\n.text:000000000040bf61\n.text:000000000040bf63\n.text:000000000040bf69\n.text:000000000040bf6b\n.text:000000000040bf70\n.text:000000000040bf71\n.text:000000000040bf72\n.text:000000000040bf74\n.text:000000000040bf76\n.text:000000000040bf78\n.text:000000000040bf79\n.text:000000000040bf7a\n.text:000000000040bf7f\n.text:000000000040bf80\n'
p3114
tp3115
sS'fdutimens'
p3116
(S'\n__stdcall fdutimens(char * file, timespec * timespec)\n'
p3117
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000aint fdutimens(char *file,timespec *timespec)\u000a\u000a{\u000a  long lVar1;\u000a  long lVar2;\u000a  timespec *ptVar3;\u000a  _Bool _Var4;\u000a  int iVar5;\u000a  int iVar6;\u000a  int __fd;\u000a  int *piVar7;\u000a  long lVar8;\u000a  timespec *in_RDX;\u000a  timeval *__tvp;\u000a  timeval *__tvp_00;\u000a  timespec tVar9;\u000a  timeval truncated_timeval [2];\u000a  timeval timeval [2];\u000a  timespec adjusted_timespec [2];\u000a  timespec *local_120;\u000a  undefined4 local_118;\u000a  undefined4 uStack276;\u000a  __suseconds_t local_110;\u000a  undefined4 local_108;\u000a  undefined4 uStack260;\u000a  __suseconds_t local_100;\u000a  timeval local_f8;\u000a  __time_t local_e8;\u000a  long local_e0;\u000a  undefined4 local_d8;\u000a  undefined4 uStack212;\u000a  undefined4 uStack208;\u000a  undefined4 uStack204;\u000a  undefined4 local_c8;\u000a  undefined4 uStack196;\u000a  undefined4 uStack192;\u000a  undefined4 uStack188;\u000a  stat local_b8;\u000a  \u000a  __fd = (int)file;\u000a  local_120 = (timespec *)&local_d8;\u000a  if (in_RDX == (timespec *)0x0) {\u000a    iVar5 = 0;\u000a    local_120 = in_RDX;\u000a  }\u000a  else {\u000a    local_d8 = *(undefined4 *)&in_RDX->tv_sec;\u000a    uStack212 = *(undefined4 *)((long)&in_RDX->tv_sec + 4);\u000a    uStack208 = *(undefined4 *)&in_RDX->tv_nsec;\u000a    uStack204 = *(undefined4 *)((long)&in_RDX->tv_nsec + 4);\u000a    local_c8 = *(undefined4 *)&in_RDX[1].tv_sec;\u000a    uStack196 = *(undefined4 *)((long)&in_RDX[1].tv_sec + 4);\u000a    uStack192 = *(undefined4 *)&in_RDX[1].tv_nsec;\u000a    uStack188 = *(undefined4 *)((long)&in_RDX[1].tv_nsec + 4);\u000a    iVar5 = validate_timespec(local_120);\u000a    if (iVar5 < 0) {\u000a      return -1;\u000a    }\u000a  }\u000a  if ((__fd < 0) && (timespec == (timespec *)0x0)) {\u000a    piVar7 = __errno_location();\u000a    *piVar7 = 9;\u000a    return -1;\u000a  }\u000a  if (utimensat_works_really < 0) goto LAB_0040cea5;\u000a  if (iVar5 == 2) {\u000a    if (__fd < 0) {\u000a      iVar5 = stat((char *)timespec,(stat *)&local_b8);\u000a    }\u000a    else {\u000a      iVar5 = fstat(__fd,(stat *)&local_b8);\u000a    }\u000a    ptVar3 = local_120;\u000a    if (iVar5 != 0) {\u000a      return -1;\u000a    }\u000a    if (local_120->tv_nsec == 0x3ffffffe) {\u000a      tVar9 = get_stat_atime(&local_b8);\u000a      lVar8 = 0;\u000a    }\u000a    else {\u000a      iVar5 = 3;\u000a      if (local_120[1].tv_nsec != 0x3ffffffe) goto LAB_0040ce2d;\u000a      tVar9 = get_stat_mtime(&local_b8);\u000a      lVar8 = 1;\u000a    }\u000a    ptVar3[lVar8].tv_sec = SUB168((undefined  [16])tVar9,0);\u000a    ptVar3[lVar8].tv_nsec = SUB168((undefined  [16])tVar9 >> 0x40,0);\u000a    iVar5 = 3;\u000a  }\u000aLAB_0040ce2d:\u000a  if (__fd < 0) {\u000a    iVar6 = utimensat(-100,(char *)timespec,(timespec *)local_120,0);\u000a    if (iVar6 < 1) {\u000a      if (iVar6 == 0) {\u000a        utimensat_works_really = 1;\u000a        return 0;\u000a      }\u000a    }\u000a    else {\u000a      piVar7 = __errno_location();\u000a      *piVar7 = 0x26;\u000a    }\u000a    piVar7 = __errno_location();\u000a    if (*piVar7 != 0x26) {\u000a      utimensat_works_really = 1;\u000a      return iVar6;\u000a    }\u000a  }\u000a  if (-1 < __fd) {\u000a    iVar6 = futimens(__fd,(timespec *)local_120);\u000a    if (iVar6 < 1) {\u000a      if (iVar6 == 0) {\u000a        utimensat_works_really = 1;\u000a        return 0;\u000a      }\u000a    }\u000a    else {\u000a      piVar7 = __errno_location();\u000a      *piVar7 = 0x26;\u000a    }\u000a    piVar7 = __errno_location();\u000a    if (*piVar7 != 0x26) {\u000a      utimensat_works_really = 1;\u000a      return iVar6;\u000a    }\u000a  }\u000aLAB_0040cea5:\u000a  utimensat_works_really = -1;\u000a  lutimensat_works_really = -1;\u000a  if (iVar5 != 0) {\u000a    if (iVar5 != 3) {\u000a      if (__fd < 0) {\u000a        iVar5 = stat((char *)timespec,(stat *)&local_b8);\u000a      }\u000a      else {\u000a        iVar5 = fstat(__fd,(stat *)&local_b8);\u000a      }\u000a      if (iVar5 != 0) {\u000a        return -1;\u000a      }\u000a    }\u000a    if ((local_120 != (timespec *)0x0) &&\u000a       (_Var4 = update_timespec(&local_b8,&local_120), _Var4 != false)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (local_120 == (timespec *)0x0) {\u000a    __tvp = (timeval *)0x0;\u000a  }\u000a  else {\u000a    local_f8.tv_sec = local_120->tv_sec;\u000a    local_f8.tv_usec = SUB168(SEXT816(0x20c49ba5e353f7cf) * SEXT816(local_120->tv_nsec) >> 0x47,0);\u000a    local_e8 = local_120[1].tv_sec;\u000a    local_e0 = SUB168(SEXT816(0x20c49ba5e353f7cf) * SEXT816(local_120[1].tv_nsec) >> 0x47,0);\u000a    __tvp = &local_f8;\u000a  }\u000a  if (-1 < __fd) {\u000a    iVar5 = futimesat(__fd,(char *)0x0,__tvp);\u000a    if (iVar5 != 0) {\u000a      if (timespec == (timespec *)0x0) {\u000a        return -1;\u000a      }\u000a      __fd = utimes((char *)timespec,__tvp);\u000a      return __fd;\u000a    }\u000a    if (__tvp != (timeval *)0x0) {\u000a      lVar8 = __tvp->tv_usec;\u000a      lVar1 = __tvp[1].tv_usec;\u000a      if ((lVar8 < 500000) && (lVar1 < 500000)) {\u000a        return 0;\u000a      }\u000a      iVar5 = fstat(__fd,(stat *)&local_b8);\u000a      if (iVar5 != 0) {\u000a        return 0;\u000a      }\u000a      lVar2 = __tvp[1].tv_sec;\u000a      local_118 = *(undefined4 *)&__tvp->tv_sec;\u000a      uStack276 = *(undefined4 *)((long)&__tvp->tv_sec + 4);\u000a      local_110 = __tvp->tv_usec;\u000a      local_108 = *(undefined4 *)&__tvp[1].tv_sec;\u000a      uStack260 = *(undefined4 *)((long)&__tvp[1].tv_sec + 4);\u000a      local_100 = __tvp[1].tv_usec;\u000a      __tvp_00 = (timeval *)0x0;\u000a      if ((499999 < lVar8) && (local_b8.st_atim.tv_sec - __tvp->tv_sec == 1)) {\u000a        lVar8 = get_stat_atime_ns(&local_b8);\u000a        if (lVar8 == 0) {\u000a          __tvp_00 = (timeval *)&local_118;\u000a          local_110 = 0;\u000a        }\u000a        else {\u000a          __tvp_00 = (timeval *)0x0;\u000a        }\u000a      }\u000a      if (((lVar1 < 500000) || (local_b8.st_mtim.tv_sec - lVar2 != 1)) ||\u000a         (lVar8 = get_stat_mtime_ns(&local_b8), lVar8 != 0)) {\u000a        if (__tvp_00 == (timeval *)0x0) {\u000a          return 0;\u000a        }\u000a      }\u000a      else {\u000a        __tvp_00 = (timeval *)&local_118;\u000a        local_100 = 0;\u000a      }\u000a      futimesat(__fd,(char *)0x0,__tvp_00);\u000a      return 0;\u000a    }\u000a    return 0;\u000a  }\u000a  __fd = futimesat(-100,(char *)timespec,__tvp);\u000a  return __fd;\u000a}\u000a\u000a
p3118
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x100\nMOV R14,RSI\nMOV R15D,EDI\nTEST RDX,RDX\nLEA RAX,[RSP + 0x50]\nCMOVZ RAX,RDX\nMOV qword ptr [RSP + 0x8],RAX\nJZ 0x0040cd7b\nMOVUPS XMM0,xmmword ptr [RDX]\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVUPS XMM0,xmmword ptr [RDX + 0x10]\nMOVAPS xmmword ptr [RSP + 0x60],XMM0\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x0040d0c0\nMOV EBP,EAX\nTEST EBP,EBP\nJNS 0x0040cd7d\nJMP 0x0040cd92\nXOR EBP,EBP\nTEST R15D,R15D\nJNS 0x0040cda9\nTEST R14,R14\nJNZ 0x0040cda9\nCALL 0x00402100\nMOV dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nMOV EAX,EBX\nADD RSP,0x100\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP dword ptr [0x00619a30],0x0\nJS 0x0040cea5\nCMP EBP,0x2\nJNZ 0x0040ce2d\nLEA RSI,[RSP + 0x70]\nTEST R15D,R15D\nJS 0x0040cdcf\nMOV EDI,R15D\nCALL 0x004113f0\nJMP 0x0040cdd7\nMOV RDI,R14\nCALL 0x004113e0\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x0040cd97\nMOV RBX,qword ptr [RSP + 0x8]\nCMP qword ptr [RBX + 0x8],0x3ffffffe\nJNZ 0x0040cdfd\nLEA RDI,[RSP + 0x70]\nCALL 0x0040c6b0\nXOR ECX,ECX\nJMP 0x0040ce1b\nMOV EBP,0x3\nCMP qword ptr [RBX + 0x18],0x3ffffffe\nJNZ 0x0040ce2d\nLEA RDI,[RSP + 0x70]\nCALL 0x0040c6d0\nMOV ECX,0x1\nSHL RCX,0x4\nMOV qword ptr [RBX + RCX*0x1],RAX\nMOV qword ptr [RBX + RCX*0x1 + 0x8],RDX\nMOV EBP,0x3\nTEST R15D,R15D\nJNS 0x0040ce65\nMOV RDX,qword ptr [RSP + 0x8]\nMOV EDI,0xffffff9c\nXOR ECX,ECX\nMOV RSI,R14\nCALL 0x004020d0\nMOV EBX,EAX\nTEST EBX,EBX\nJLE 0x0040ce59\nCALL 0x00402100\nMOV dword ptr [RAX],0x26\nJMP 0x0040ce5b\nJZ 0x0040ce8a\nCALL 0x00402100\nCMP dword ptr [RAX],0x26\nJNZ 0x0040ce8a\nTEST R15D,R15D\nJS 0x0040cea5\nMOV RSI,qword ptr [RSP + 0x8]\nMOV EDI,R15D\nCALL 0x004026c0\nMOV EBX,EAX\nTEST EBX,EBX\nJLE 0x0040ce99\nCALL 0x00402100\nMOV dword ptr [RAX],0x26\nJMP 0x0040ce9b\nMOV dword ptr [0x00619a30],0x1\nJMP 0x0040cd97\nJZ 0x0040ced6\nCALL 0x00402100\nCMP dword ptr [RAX],0x26\nJNZ 0x0040ced6\nMOV dword ptr [0x00619a30],0xffffffff\nMOV dword ptr [0x00619a34],0xffffffff\nTEST EBP,EBP\nJZ 0x0040cf1b\nCMP EBP,0x3\nJZ 0x0040cefa\nLEA RSI,[RSP + 0x70]\nTEST R15D,R15D\nJS 0x0040cee5\nMOV EDI,R15D\nCALL 0x004113f0\nJMP 0x0040ceed\nMOV dword ptr [0x00619a30],0x1\nJMP 0x0040cd97\nMOV RDI,R14\nCALL 0x004113e0\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x0040cd97\nCMP qword ptr [RSP + 0x8],0x0\nJZ 0x0040cf1b\nLEA RDI,[RSP + 0x70]\nLEA RSI,[RSP + 0x8]\nCALL 0x0040d180\nXOR EBX,EBX\nTEST AL,AL\nJNZ 0x0040cd97\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040cf85\nMOV RAX,qword ptr [RAX]\nMOV qword ptr [RSP + 0x30],RAX\nMOV RSI,qword ptr [RSP + 0x8]\nMOV RCX,0x20c49ba5e353f7cf\nMOV RAX,RCX\nIMUL qword ptr [RSI + 0x8]\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0x7\nADD RDX,RAX\nMOV qword ptr [RSP + 0x38],RDX\nMOV RAX,qword ptr [RSI + 0x10]\nMOV qword ptr [RSP + 0x40],RAX\nMOV RAX,RCX\nIMUL qword ptr [RSI + 0x18]\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0x7\nADD RDX,RAX\nMOV qword ptr [RSP + 0x48],RDX\nLEA RBP,[RSP + 0x30]\nTEST R15D,R15D\nJNS 0x0040cf8c\nJMP 0x0040cfb5\nXOR EBP,EBP\nTEST R15D,R15D\nJS 0x0040cfb5\nXOR EBX,EBX\nXOR ESI,ESI\nMOV EDI,R15D\nMOV RDX,RBP\nCALL 0x00402770\nTEST EAX,EAX\nJZ 0x0040cfcc\nTEST R14,R14\nJZ 0x0040cd92\nMOV RDI,R14\nMOV RSI,RBP\nCALL 0x00402450\nJMP 0x0040cfc5\nMOV EDI,0xffffff9c\nMOV RSI,R14\nMOV RDX,RBP\nCALL 0x00402770\nMOV EBX,EAX\nJMP 0x0040cd97\nTEST RBP,RBP\nJZ 0x0040cd97\nMOV R12,qword ptr [RBP + 0x8]\nMOV R14,qword ptr [RBP + 0x18]\nCMP R12,0x7a11f\nJG 0x0040cff3\nCMP R14,0x7a120\nJL 0x0040cd97\nLEA RSI,[RSP + 0x70]\nMOV EDI,R15D\nCALL 0x004113f0\nTEST EAX,EAX\nJNZ 0x0040cd97\nLEA RCX,[RBP + 0x10]\nMOV RAX,qword ptr [0xb8 + RSP]\nMOV RBX,qword ptr [0xc8 + RSP]\nSUB RAX,qword ptr [RBP]\nSUB RBX,qword ptr [RBP + 0x10]\nMOVUPS XMM0,xmmword ptr [RBP]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [RCX]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nXOR EBP,EBP\nCMP R12,0x7a120\nJL 0x0040d070\nCMP RAX,0x1\nJNZ 0x0040d070\nLEA RDI,[RSP + 0x70]\nCALL 0x0040c670\nTEST RAX,RAX\nJZ 0x0040d062\nXOR EBP,EBP\nCMP R14,0x7a120\nJGE 0x0040d079\nJMP 0x0040d08e\nLEA RBP,[RSP + 0x10]\nMOV qword ptr [RSP + 0x18],0x0\nCMP R14,0x7a120\nJL 0x0040d08e\nCMP RBX,0x1\nJNZ 0x0040d08e\nLEA RDI,[RSP + 0x70]\nCALL 0x0040c690\nTEST RAX,RAX\nJZ 0x0040d095\nTEST RBP,RBP\nJNZ 0x0040d0a3\nJMP 0x0040d0b0\nLEA RBP,[RSP + 0x10]\nMOV qword ptr [RSP + 0x28],0x0\nXOR ESI,ESI\nMOV EDI,R15D\nMOV RDX,RBP\nCALL 0x00402770\nXOR EBX,EBX\nJMP 0x0040cd97\n'
p3119
S'55\n41 57\n41 56\n41 54\n53\n48 81 ec 00 01 00 00\n49 89 f6\n41 89 ff\n48 85 d2\n48 8d 44 24 50\n48 0f 44 c2\n48 89 44 24 08\n74 23\n0f 10 02\n0f 29 44 24 50\n0f 10 42 10\n0f 29 44 24 60\n48 8b 7c 24 08\ne8 4d 03 00 00\n89 c5\n85 ed\n79 04\neb 17\n31 ed\n45 85 ff\n79 27\n4d 85 f6\n75 22\ne8 74 53 ff ff\nc7 00 09 00 00 00\nbb ff ff ff ff\n89 d8\n48 81 c4 00 01 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n83 3d 80 cc 20 00 00\n0f 88 ef 00 00 00\n83 fd 02\n75 72\n48 8d 74 24 70\n45 85 ff\n78 0a\n44 89 ff\ne8 23 46 00 00\neb 08\n4c 89 f7\ne8 09 46 00 00\nbb ff ff ff ff\n85 c0\n75 b7\n48 8b 5c 24 08\n48 81 7b 08 fe ff ff 3f\n75 0e\n48 8d 7c 24 70\ne8 b7 f8 ff ff\n31 c9\neb 1e\nbd 03 00 00 00\n48 81 7b 18 fe ff ff 3f\n75 21\n48 8d 7c 24 70\ne8 ba f8 ff ff\nb9 01 00 00 00\n48 c1 e1 04\n48 89 04 0b\n48 89 54 0b 08\nbd 03 00 00 00\n45 85 ff\n79 33\n48 8b 54 24 08\nbf 9c ff ff ff\n31 c9\n4c 89 f6\ne8 8a 52 ff ff\n89 c3\n85 db\n7e 0d\ne8 af 52 ff ff\nc7 00 26 00 00 00\neb 02\n74 2f\ne8 a0 52 ff ff\n83 38 26\n75 25\n45 85 ff\n78 3b\n48 8b 74 24 08\n44 89 ff\ne8 49 58 ff ff\n89 c3\n85 db\n7e 1c\ne8 7e 52 ff ff\nc7 00 26 00 00 00\neb 11\nc7 05 9c cb 20 00 01 00 00 00\ne9 fe fe ff ff\n74 3b\ne8 60 52 ff ff\n83 38 26\n75 31\nc7 05 81 cb 20 00 ff ff ff ff\nc7 05 7b cb 20 00 ff ff ff ff\n85 ed\n74 5e\n83 fd 03\n74 38\n48 8d 74 24 70\n45 85 ff\n78 19\n44 89 ff\ne8 1c 45 00 00\neb 17\nc7 05 50 cb 20 00 01 00 00 00\ne9 b2 fe ff ff\n4c 89 f7\ne8 f3 44 00 00\nbb ff ff ff ff\n85 c0\n0f 85 9d fe ff ff\n48 83 7c 24 08 00\n74 19\n48 8d 7c 24 70\n48 8d 74 24 08\ne8 6f 02 00 00\n31 db\n84 c0\n0f 85 7c fe ff ff\n48 8b 44 24 08\n48 85 c0\n74 60\n48 8b 00\n48 89 44 24 30\n48 8b 74 24 08\n48 b9 cf f7 53 e3 a5 9b c4 20\n48 89 c8\n48 f7 6e 08\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 07\n48 01 c2\n48 89 54 24 38\n48 8b 46 10\n48 89 44 24 40\n48 89 c8\n48 f7 6e 18\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 07\n48 01 c2\n48 89 54 24 48\n48 8d 6c 24 30\n45 85 ff\n79 09\neb 30\n31 ed\n45 85 ff\n78 29\n31 db\n31 f6\n44 89 ff\n48 89 ea\ne8 d5 57 ff ff\n85 c0\n74 2d\n4d 85 f6\n0f 84 ea fd ff ff\n4c 89 f7\n48 89 ee\ne8 9d 54 ff ff\neb 10\nbf 9c ff ff ff\n4c 89 f6\n48 89 ea\ne8 ab 57 ff ff\n89 c3\ne9 cb fd ff ff\n48 85 ed\n0f 84 c2 fd ff ff\n4c 8b 65 08\n4c 8b 75 18\n49 81 fc 1f a1 07 00\n7f 0d\n49 81 fe 20 a1 07 00\n0f 8c a4 fd ff ff\n48 8d 74 24 70\n44 89 ff\ne8 f0 43 00 00\n85 c0\n0f 85 8f fd ff ff\n48 8d 4d 10\n48 8b 84 24 b8 00 00 00\n48 8b 9c 24 c8 00 00 00\n48 2b 45 00\n48 2b 5d 10\n0f 10 45 00\n0f 29 44 24 10\n0f 10 01\n0f 29 44 24 20\n31 ed\n49 81 fc 20 a1 07 00\n7c 30\n48 83 f8 01\n75 2a\n48 8d 7c 24 70\ne8 20 f6 ff ff\n48 85 c0\n74 0d\n31 ed\n49 81 fe 20 a1 07 00\n7d 19\neb 2c\n48 8d 6c 24 10\n48 c7 44 24 18 00 00 00 00\n49 81 fe 20 a1 07 00\n7c 15\n48 83 fb 01\n75 0f\n48 8d 7c 24 70\ne8 07 f6 ff ff\n48 85 c0\n74 07\n48 85 ed\n75 10\neb 1b\n48 8d 6c 24 10\n48 c7 44 24 28 00 00 00 00\n31 f6\n44 89 ff\n48 89 ea\ne8 c0 56 ff ff\n31 db\ne9 e0 fc ff ff\n'
p3120
S'.text:000000000040cd30\n.text:000000000040cd31\n.text:000000000040cd33\n.text:000000000040cd35\n.text:000000000040cd37\n.text:000000000040cd38\n.text:000000000040cd3f\n.text:000000000040cd42\n.text:000000000040cd45\n.text:000000000040cd48\n.text:000000000040cd4d\n.text:000000000040cd51\n.text:000000000040cd56\n.text:000000000040cd58\n.text:000000000040cd5b\n.text:000000000040cd60\n.text:000000000040cd64\n.text:000000000040cd69\n.text:000000000040cd6e\n.text:000000000040cd73\n.text:000000000040cd75\n.text:000000000040cd77\n.text:000000000040cd79\n.text:000000000040cd7b\n.text:000000000040cd7d\n.text:000000000040cd80\n.text:000000000040cd82\n.text:000000000040cd85\n.text:000000000040cd87\n.text:000000000040cd8c\n.text:000000000040cd92\n.text:000000000040cd97\n.text:000000000040cd99\n.text:000000000040cda0\n.text:000000000040cda1\n.text:000000000040cda3\n.text:000000000040cda5\n.text:000000000040cda7\n.text:000000000040cda8\n.text:000000000040cda9\n.text:000000000040cdb0\n.text:000000000040cdb6\n.text:000000000040cdb9\n.text:000000000040cdbb\n.text:000000000040cdc0\n.text:000000000040cdc3\n.text:000000000040cdc5\n.text:000000000040cdc8\n.text:000000000040cdcd\n.text:000000000040cdcf\n.text:000000000040cdd2\n.text:000000000040cdd7\n.text:000000000040cddc\n.text:000000000040cdde\n.text:000000000040cde0\n.text:000000000040cde5\n.text:000000000040cded\n.text:000000000040cdef\n.text:000000000040cdf4\n.text:000000000040cdf9\n.text:000000000040cdfb\n.text:000000000040cdfd\n.text:000000000040ce02\n.text:000000000040ce0a\n.text:000000000040ce0c\n.text:000000000040ce11\n.text:000000000040ce16\n.text:000000000040ce1b\n.text:000000000040ce1f\n.text:000000000040ce23\n.text:000000000040ce28\n.text:000000000040ce2d\n.text:000000000040ce30\n.text:000000000040ce32\n.text:000000000040ce37\n.text:000000000040ce3c\n.text:000000000040ce3e\n.text:000000000040ce41\n.text:000000000040ce46\n.text:000000000040ce48\n.text:000000000040ce4a\n.text:000000000040ce4c\n.text:000000000040ce51\n.text:000000000040ce57\n.text:000000000040ce59\n.text:000000000040ce5b\n.text:000000000040ce60\n.text:000000000040ce63\n.text:000000000040ce65\n.text:000000000040ce68\n.text:000000000040ce6a\n.text:000000000040ce6f\n.text:000000000040ce72\n.text:000000000040ce77\n.text:000000000040ce79\n.text:000000000040ce7b\n.text:000000000040ce7d\n.text:000000000040ce82\n.text:000000000040ce88\n.text:000000000040ce8a\n.text:000000000040ce94\n.text:000000000040ce99\n.text:000000000040ce9b\n.text:000000000040cea0\n.text:000000000040cea3\n.text:000000000040cea5\n.text:000000000040ceaf\n.text:000000000040ceb9\n.text:000000000040cebb\n.text:000000000040cebd\n.text:000000000040cec0\n.text:000000000040cec2\n.text:000000000040cec7\n.text:000000000040ceca\n.text:000000000040cecc\n.text:000000000040cecf\n.text:000000000040ced4\n.text:000000000040ced6\n.text:000000000040cee0\n.text:000000000040cee5\n.text:000000000040cee8\n.text:000000000040ceed\n.text:000000000040cef2\n.text:000000000040cef4\n.text:000000000040cefa\n.text:000000000040cf00\n.text:000000000040cf02\n.text:000000000040cf07\n.text:000000000040cf0c\n.text:000000000040cf11\n.text:000000000040cf13\n.text:000000000040cf15\n.text:000000000040cf1b\n.text:000000000040cf20\n.text:000000000040cf23\n.text:000000000040cf25\n.text:000000000040cf28\n.text:000000000040cf2d\n.text:000000000040cf32\n.text:000000000040cf3c\n.text:000000000040cf3f\n.text:000000000040cf43\n.text:000000000040cf46\n.text:000000000040cf4a\n.text:000000000040cf4e\n.text:000000000040cf51\n.text:000000000040cf56\n.text:000000000040cf5a\n.text:000000000040cf5f\n.text:000000000040cf62\n.text:000000000040cf66\n.text:000000000040cf69\n.text:000000000040cf6d\n.text:000000000040cf71\n.text:000000000040cf74\n.text:000000000040cf79\n.text:000000000040cf7e\n.text:000000000040cf81\n.text:000000000040cf83\n.text:000000000040cf85\n.text:000000000040cf87\n.text:000000000040cf8a\n.text:000000000040cf8c\n.text:000000000040cf8e\n.text:000000000040cf90\n.text:000000000040cf93\n.text:000000000040cf96\n.text:000000000040cf9b\n.text:000000000040cf9d\n.text:000000000040cf9f\n.text:000000000040cfa2\n.text:000000000040cfa8\n.text:000000000040cfab\n.text:000000000040cfae\n.text:000000000040cfb3\n.text:000000000040cfb5\n.text:000000000040cfba\n.text:000000000040cfbd\n.text:000000000040cfc0\n.text:000000000040cfc5\n.text:000000000040cfc7\n.text:000000000040cfcc\n.text:000000000040cfcf\n.text:000000000040cfd5\n.text:000000000040cfd9\n.text:000000000040cfdd\n.text:000000000040cfe4\n.text:000000000040cfe6\n.text:000000000040cfed\n.text:000000000040cff3\n.text:000000000040cff8\n.text:000000000040cffb\n.text:000000000040d000\n.text:000000000040d002\n.text:000000000040d008\n.text:000000000040d00c\n.text:000000000040d014\n.text:000000000040d01c\n.text:000000000040d020\n.text:000000000040d024\n.text:000000000040d028\n.text:000000000040d02d\n.text:000000000040d030\n.text:000000000040d035\n.text:000000000040d037\n.text:000000000040d03e\n.text:000000000040d040\n.text:000000000040d044\n.text:000000000040d046\n.text:000000000040d04b\n.text:000000000040d050\n.text:000000000040d053\n.text:000000000040d055\n.text:000000000040d057\n.text:000000000040d05e\n.text:000000000040d060\n.text:000000000040d062\n.text:000000000040d067\n.text:000000000040d070\n.text:000000000040d077\n.text:000000000040d079\n.text:000000000040d07d\n.text:000000000040d07f\n.text:000000000040d084\n.text:000000000040d089\n.text:000000000040d08c\n.text:000000000040d08e\n.text:000000000040d091\n.text:000000000040d093\n.text:000000000040d095\n.text:000000000040d09a\n.text:000000000040d0a3\n.text:000000000040d0a5\n.text:000000000040d0a8\n.text:000000000040d0ab\n.text:000000000040d0b0\n.text:000000000040d0b2\n'
p3121
tp3122
sS'hash_pjw'
p3123
(S'\n__stdcall hash_pjw(void * x, size_t tablesize)\n'
p3124
V\u000asize_t hash_pjw(void *x,size_t tablesize)\u000a\u000a{\u000a  ulong uVar1;\u000a  char cVar2;\u000a  char *pcVar3;\u000a  \u000a  cVar2 = *(char *)x;\u000a  if (cVar2 == 0) {\u000a    uVar1 = 0;\u000a  }\u000a  else {\u000a    pcVar3 = (char *)((long)x + 1);\u000a    uVar1 = 0;\u000a    do {\u000a      uVar1 = (uVar1 << 9 | uVar1 >> 0x37) + (long)cVar2;\u000a      cVar2 = *pcVar3;\u000a      pcVar3 = pcVar3 + 1;\u000a    } while (cVar2 != 0);\u000a  }\u000a  return uVar1 % tablesize;\u000a}\u000a\u000a
p3125
S'MOV CL,byte ptr [RDI]\nTEST CL,CL\nJZ 0x004108c7\nINC RDI\nXOR EAX,EAX\nNOP dword ptr [RAX + RAX*0x1]\nMOVSX RCX,CL\nROL RAX,0x9\nADD RAX,RCX\nMOVZX ECX,byte ptr [RDI]\nINC RDI\nTEST CL,CL\nJNZ 0x004108b0\nJMP 0x004108c9\nXOR EAX,EAX\nXOR EDX,EDX\nDIV RSI\nMOV RAX,RDX\nRET\n'
p3126
S'8a 0f\n84 c9\n74 21\n48 ff c7\n31 c0\n0f 1f 44 00 00\n48 0f be c9\n48 c1 c0 09\n48 01 c8\n0f b6 0f\n48 ff c7\n84 c9\n75 eb\neb 02\n31 c0\n31 d2\n48 f7 f6\n48 89 d0\nc3\n'
p3127
S'.text:00000000004108a0\n.text:00000000004108a2\n.text:00000000004108a4\n.text:00000000004108a6\n.text:00000000004108a9\n.text:00000000004108ab\n.text:00000000004108b0\n.text:00000000004108b4\n.text:00000000004108b8\n.text:00000000004108bb\n.text:00000000004108be\n.text:00000000004108c1\n.text:00000000004108c3\n.text:00000000004108c5\n.text:00000000004108c7\n.text:00000000004108c9\n.text:00000000004108cb\n.text:00000000004108ce\n.text:00000000004108d1\n'
p3128
tp3129
sS'link_count_optimize_ok'
p3130
(S'\n__stdcall link_count_optimize_ok(FTSENT * p)\n'
p3131
V\u000a_Bool link_count_optimize_ok(FTSENT *p)\u000a\u000a{\u000a  FTS *pFVar1;\u000a  _Bool _Var2;\u000a  void *pvVar3;\u000a  __dev_t *entry;\u000a  __dev_t *p_Var4;\u000a  hash_table *table;\u000a  __dev_t local_38 [2];\u000a  \u000a  pFVar1 = p->fts_fts;\u000a  if ((*(byte *)((long)&pFVar1->fts_options + 1) & 2) == 0) {\u000a    _Var2 = false;\u000a  }\u000a  else {\u000a    table = pFVar1->fts_leaf_optimization_works_ht;\u000a    if (table == (hash_table *)0x0) {\u000a      table = (hash_table *)hash_initialize(0xd,(Hash_tuning *)0x0,LCO_hash,LCO_compare,free);\u000a      pFVar1->fts_leaf_optimization_works_ht = table;\u000a      if (table == (hash_table *)0x0) {\u000a        return false;\u000a      }\u000a    }\u000a    local_38[0] = p->fts_statp[0].st_dev;\u000a    pvVar3 = hash_lookup((Hash_table *)table,local_38);\u000a    if (pvVar3 == (void *)0x0) {\u000a      entry = (__dev_t *)malloc(0x10);\u000a      if (entry == (__dev_t *)0x0) {\u000a        _Var2 = false;\u000a      }\u000a      else {\u000a        _Var2 = leaf_optimization_applies();\u000a        *(_Bool *)(entry + 1) = _Var2;\u000a        *entry = p->fts_statp[0].st_dev;\u000a        p_Var4 = (__dev_t *)hash_insert((Hash_table *)table,entry);\u000a        if (p_Var4 == (__dev_t *)0x0) {\u000a          free(entry);\u000a          _Var2 = false;\u000a        }\u000a        else {\u000a          if (p_Var4 != entry) {\u000a                    /* WARNING: Subroutine does not return */\u000a            abort();\u000a          }\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      _Var2 = (_Bool)(*(char *)((long)pvVar3 + 8) != 0);\u000a    }\u000a  }\u000a  return _Var2;\u000a}\u000a\u000a
p3132
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV R14,RDI\nMOV RBX,qword ptr [R14 + 0x50]\nTEST byte ptr [RBX + 0x49],0x2\nJNZ 0x0040f85f\nXOR R15D,R15D\nJMP 0x0040f8b3\nMOV R13,qword ptr [RBX + 0x50]\nTEST R13,R13\nJNZ 0x0040f893\nXOR R15D,R15D\nMOV EDI,0xd\nXOR ESI,ESI\nMOV EDX,0x40fba0\nMOV ECX,0x40fbb0\nMOV R8D,0x4020c0\nCALL 0x004099d0\nMOV R13,RAX\nMOV qword ptr [RBX + 0x50],R13\nTEST R13,R13\nJZ 0x0040f8b3\nMOV RAX,qword ptr [R14 + 0x78]\nMOV qword ptr [RSP],RAX\nMOV RSI,RSP\nMOV RDI,R13\nCALL 0x00409760\nTEST RAX,RAX\nJZ 0x0040f8c4\nCMP byte ptr [RAX + 0x8],0x0\nSETNZ R15B\nMOV EAX,R15D\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\nMOV EDI,0x10\nCALL 0x00402540\nMOV R12,RAX\nTEST R12,R12\nJZ 0x0040f908\nMOV EDI,dword ptr [RBX + 0x2c]\nCALL 0x0040fbc0\nMOV R15B,AL\nMOV byte ptr [R12 + 0x8],R15B\nMOV RAX,qword ptr [R14 + 0x78]\nMOV qword ptr [R12],RAX\nMOV RDI,R13\nMOV RSI,R12\nCALL 0x0040a2a0\nTEST RAX,RAX\nJZ 0x0040f90d\nCMP RAX,R12\nJZ 0x0040f8b3\nCALL 0x004020f0\nXOR R15D,R15D\nJMP 0x0040f8b3\nMOV RDI,R12\nCALL 0x004020c0\nXOR R15D,R15D\nJMP 0x0040f8b3\n'
p3133
S'41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 10\n49 89 fe\n49 8b 5e 50\nf6 43 49 02\n75 05\n45 31 ff\neb 54\n4c 8b 6b 50\n4d 85 ed\n75 2b\n45 31 ff\nbf 0d 00 00 00\n31 f6\nba a0 fb 40 00\nb9 b0 fb 40 00\n41 b8 c0 20 40 00\ne8 49 a1 ff ff\n49 89 c5\n4c 89 6b 50\n4d 85 ed\n74 20\n49 8b 46 78\n48 89 04 24\n48 89 e6\n4c 89 ef\ne8 ba 9e ff ff\n48 85 c0\n74 19\n80 78 08 00\n41 0f 95 c7\n44 89 f8\n48 83 c4 10\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\nbf 10 00 00 00\ne8 72 2c ff ff\n49 89 c4\n4d 85 e4\n74 32\n8b 7b 2c\ne8 e2 02 00 00\n41 88 c7\n45 88 7c 24 08\n49 8b 46 78\n49 89 04 24\n4c 89 ef\n4c 89 e6\ne8 a7 a9 ff ff\n48 85 c0\n74 0f\n4c 39 e0\n74 b0\ne8 e8 27 ff ff\n45 31 ff\neb a6\n4c 89 e7\ne8 ab 27 ff ff\n45 31 ff\neb 99\n'
p3134
S'.text:000000000040f840\n.text:000000000040f842\n.text:000000000040f844\n.text:000000000040f846\n.text:000000000040f848\n.text:000000000040f849\n.text:000000000040f84d\n.text:000000000040f850\n.text:000000000040f854\n.text:000000000040f858\n.text:000000000040f85a\n.text:000000000040f85d\n.text:000000000040f85f\n.text:000000000040f863\n.text:000000000040f866\n.text:000000000040f868\n.text:000000000040f86b\n.text:000000000040f870\n.text:000000000040f872\n.text:000000000040f877\n.text:000000000040f87c\n.text:000000000040f882\n.text:000000000040f887\n.text:000000000040f88a\n.text:000000000040f88e\n.text:000000000040f891\n.text:000000000040f893\n.text:000000000040f897\n.text:000000000040f89b\n.text:000000000040f89e\n.text:000000000040f8a1\n.text:000000000040f8a6\n.text:000000000040f8a9\n.text:000000000040f8ab\n.text:000000000040f8af\n.text:000000000040f8b3\n.text:000000000040f8b6\n.text:000000000040f8ba\n.text:000000000040f8bb\n.text:000000000040f8bd\n.text:000000000040f8bf\n.text:000000000040f8c1\n.text:000000000040f8c3\n.text:000000000040f8c4\n.text:000000000040f8c9\n.text:000000000040f8ce\n.text:000000000040f8d1\n.text:000000000040f8d4\n.text:000000000040f8d6\n.text:000000000040f8d9\n.text:000000000040f8de\n.text:000000000040f8e1\n.text:000000000040f8e6\n.text:000000000040f8ea\n.text:000000000040f8ee\n.text:000000000040f8f1\n.text:000000000040f8f4\n.text:000000000040f8f9\n.text:000000000040f8fc\n.text:000000000040f8fe\n.text:000000000040f901\n.text:000000000040f903\n.text:000000000040f908\n.text:000000000040f90b\n.text:000000000040f90d\n.text:000000000040f910\n.text:000000000040f915\n.text:000000000040f918\n'
p3135
tp3136
sS'priv_set_restore_linkdir'
p3137
(S'\n__stdcall priv_set_restore_linkdir()\n'
p3138
V\u000aint priv_set_restore_linkdir(void)\u000a\u000a{\u000a  return -1;\u000a}\u000a\u000a
p3139
S'MOV EAX,0xffffffff\nRET\n'
p3140
S'b8 ff ff ff ff\nc3\n'
p3141
S'.text:000000000040a620\n.text:000000000040a625\n'
p3142
tp3143
sS'getline'
p3144
(S'\n__stdcall getline(char * * __lineptr, size_t * __n, FILE * __stream)\n'
p3145
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__ssize_t getline(char **__lineptr,size_t *__n,FILE *__stream)\u000a\u000a{\u000a  __ssize_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_getline_00619340)();\u000a  return _Var1;\u000a}\u000a\u000a
p3146
S'JMP qword ptr [0x00619340]\n'
p3147
S'ff 25 3a 6c 21 00\n'
p3148
S'.plt:0000000000402700\n'
p3149
tp3150
sS'emit_mandatory_arg_note'
p3151
(S'\n__stdcall emit_mandatory_arg_note()\n'
p3152
V\u000avoid emit_mandatory_arg_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnMandatory arguments to long options are mandatory for short options too.\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p3153
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x412148\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x00619428]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00402440\n'
p3154
S'50\n31 ff\nbe 48 21 41 00\nba 05 00 00 00\ne8 1e f8 ff ff\n48 8b 35 cf 69 21 00\n48 89 c7\n58\ne9 de f9 ff ff\n'
p3155
S'.text:0000000000402a40\n.text:0000000000402a41\n.text:0000000000402a43\n.text:0000000000402a48\n.text:0000000000402a4d\n.text:0000000000402a52\n.text:0000000000402a59\n.text:0000000000402a5c\n.text:0000000000402a5d\n'
p3156
tp3157
sS'strcaseeq0'
p3158
(S'\n__stdcall strcaseeq0()\n'
p3159
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p3160
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00410690\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x0040bc85\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040bc8c\nJMP 0x0040bcc0\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040bcc0\nTEST BPL,BPL\nJZ 0x0040bcbb\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x0040bcd0\nJMP 0x0040bcc0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p3161
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 1d 4a 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p3162
S'.text:000000000040bc50\n.text:000000000040bc51\n.text:000000000040bc53\n.text:000000000040bc55\n.text:000000000040bc57\n.text:000000000040bc59\n.text:000000000040bc5a\n.text:000000000040bc5b\n.text:000000000040bc5e\n.text:000000000040bc61\n.text:000000000040bc64\n.text:000000000040bc67\n.text:000000000040bc69\n.text:000000000040bc6c\n.text:000000000040bc6e\n.text:000000000040bc73\n.text:000000000040bc76\n.text:000000000040bc78\n.text:000000000040bc7a\n.text:000000000040bc7d\n.text:000000000040bc7f\n.text:000000000040bc81\n.text:000000000040bc83\n.text:000000000040bc85\n.text:000000000040bc87\n.text:000000000040bc8a\n.text:000000000040bc8c\n.text:000000000040bc8f\n.text:000000000040bc91\n.text:000000000040bc95\n.text:000000000040bc9a\n.text:000000000040bc9d\n.text:000000000040bca1\n.text:000000000040bca5\n.text:000000000040bca9\n.text:000000000040bcad\n.text:000000000040bcb1\n.text:000000000040bcb4\n.text:000000000040bcb9\n.text:000000000040bcbb\n.text:000000000040bcc0\n.text:000000000040bcc4\n.text:000000000040bcc5\n.text:000000000040bcc7\n.text:000000000040bcc9\n.text:000000000040bccb\n.text:000000000040bccd\n.text:000000000040bcce\n'
p3163
tp3164
sS'get_stat_mtime'
p3165
(S'\n__stdcall get_stat_mtime(stat * st)\n'
p3166
V\u000atimespec get_stat_mtime(stat *st)\u000a\u000a{\u000a  return st->st_mtim;\u000a}\u000a\u000a
p3167
S'MOV RAX,qword ptr [RDI + 0x58]\nMOV RDX,qword ptr [RDI + 0x60]\nRET\n'
p3168
S'48 8b 47 58\n48 8b 57 60\nc3\n'
p3169
S'.text:000000000040c6d0\n.text:000000000040c6d4\n.text:000000000040c6d8\n'
p3170
tp3171
sS'hash_table_ok'
p3172
(S'\n__stdcall hash_table_ok(Hash_table * table)\n'
p3173
V\u000a_Bool hash_table_ok(Hash_table *table)\u000a\u000a{\u000a  hash_entry **pphVar1;\u000a  undefined uVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  hash_entry *phVar5;\u000a  hash_entry *phVar6;\u000a  \u000a  phVar6 = table->bucket;\u000a  if (phVar6 < table->bucket_limit) {\u000a    sVar4 = 0;\u000a    sVar3 = 0;\u000a    do {\u000a      phVar5 = phVar6;\u000a      if (phVar6->data != (void *)0x0) {\u000a        do {\u000a          sVar4 = sVar4 + 1;\u000a          pphVar1 = &phVar5->next;\u000a          phVar5 = *pphVar1;\u000a        } while (*pphVar1 != (hash_entry *)0x0);\u000a        sVar3 = sVar3 + 1;\u000a      }\u000a      phVar6 = phVar6 + 1;\u000a    } while (phVar6 < table->bucket_limit);\u000a  }\u000a  else {\u000a    sVar3 = 0;\u000a    sVar4 = 0;\u000a  }\u000a  if ((sVar3 != table->n_buckets_used) || (uVar2 = 1, sVar4 != table->n_entries)) {\u000a    uVar2 = 0;\u000a  }\u000a  return (_Bool)uVar2;\u000a}\u000a\u000a
p3174
S'MOV RSI,qword ptr [RDI]\nCMP RSI,qword ptr [RDI + 0x8]\nJNC 0x0040965a\nMOV R8,qword ptr [RDI + 0x8]\nXOR ECX,ECX\nXOR EAX,EAX\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP qword ptr [RSI],0x0\nJZ 0x0040964f\nMOV RDX,RSI\nNOP dword ptr [RAX]\nINC RCX\nMOV RDX,qword ptr [RDX + 0x8]\nTEST RDX,RDX\nJNZ 0x00409640\nINC RAX\nADD RSI,0x10\nCMP RSI,R8\nJC 0x00409630\nJMP 0x0040965e\nXOR EAX,EAX\nXOR ECX,ECX\nCMP RAX,qword ptr [RDI + 0x18]\nJNZ 0x0040966c\nMOV AL,0x1\nCMP RCX,qword ptr [RDI + 0x20]\nJZ 0x0040966e\nXOR EAX,EAX\nRET\n'
p3175
S'48 8b 37\n48 3b 77 08\n73 41\n4c 8b 47 08\n31 c9\n31 c0\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 83 3e 00\n74 19\n48 89 f2\n0f 1f 80 00 00 00 00\n48 ff c1\n48 8b 52 08\n48 85 d2\n75 f4\n48 ff c0\n48 83 c6 10\n4c 39 c6\n72 d8\neb 04\n31 c0\n31 c9\n48 3b 47 18\n75 08\nb0 01\n48 3b 4f 20\n74 02\n31 c0\nc3\n'
p3176
S'.text:0000000000409610\n.text:0000000000409613\n.text:0000000000409617\n.text:0000000000409619\n.text:000000000040961d\n.text:000000000040961f\n.text:0000000000409621\n.text:0000000000409630\n.text:0000000000409634\n.text:0000000000409636\n.text:0000000000409639\n.text:0000000000409640\n.text:0000000000409643\n.text:0000000000409647\n.text:000000000040964a\n.text:000000000040964c\n.text:000000000040964f\n.text:0000000000409653\n.text:0000000000409656\n.text:0000000000409658\n.text:000000000040965a\n.text:000000000040965c\n.text:000000000040965e\n.text:0000000000409662\n.text:0000000000409664\n.text:0000000000409666\n.text:000000000040966a\n.text:000000000040966c\n.text:000000000040966e\n'
p3177
tp3178
sS'strcaseeq2'
p3179
(S'\n__stdcall strcaseeq2()\n'
p3180
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p3181
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00410690\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x0040bd96\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040bd9d\nJMP 0x0040bdca\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040bdca\nTEST BPL,BPL\nJZ 0x0040bdc5\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x0040bde0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p3182
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 0d 49 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p3183
S'.text:000000000040bd60\n.text:000000000040bd61\n.text:000000000040bd63\n.text:000000000040bd65\n.text:000000000040bd67\n.text:000000000040bd69\n.text:000000000040bd6a\n.text:000000000040bd6b\n.text:000000000040bd6e\n.text:000000000040bd71\n.text:000000000040bd74\n.text:000000000040bd77\n.text:000000000040bd79\n.text:000000000040bd7c\n.text:000000000040bd7e\n.text:000000000040bd83\n.text:000000000040bd87\n.text:000000000040bd89\n.text:000000000040bd8b\n.text:000000000040bd8e\n.text:000000000040bd90\n.text:000000000040bd92\n.text:000000000040bd94\n.text:000000000040bd96\n.text:000000000040bd98\n.text:000000000040bd9b\n.text:000000000040bd9d\n.text:000000000040bda0\n.text:000000000040bda2\n.text:000000000040bda6\n.text:000000000040bdaa\n.text:000000000040bdae\n.text:000000000040bdb2\n.text:000000000040bdb5\n.text:000000000040bdb9\n.text:000000000040bdba\n.text:000000000040bdbc\n.text:000000000040bdbe\n.text:000000000040bdc0\n.text:000000000040bdc2\n.text:000000000040bdc3\n.text:000000000040bdc5\n.text:000000000040bdca\n.text:000000000040bdce\n.text:000000000040bdcf\n.text:000000000040bdd1\n.text:000000000040bdd3\n.text:000000000040bdd5\n.text:000000000040bdd7\n.text:000000000040bdd8\n'
p3184
tp3185
sS'strcaseeq1'
p3186
(S'\n__stdcall strcaseeq1()\n'
p3187
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p3188
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00410690\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x0040bd0d\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040bd14\nJMP 0x0040bd47\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040bd47\nTEST BPL,BPL\nJZ 0x0040bd42\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x0040bd60\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p3189
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 96 49 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p3190
S'.text:000000000040bcd0\n.text:000000000040bcd1\n.text:000000000040bcd3\n.text:000000000040bcd5\n.text:000000000040bcd7\n.text:000000000040bcd9\n.text:000000000040bcda\n.text:000000000040bcdb\n.text:000000000040bce0\n.text:000000000040bce3\n.text:000000000040bce6\n.text:000000000040bce9\n.text:000000000040bceb\n.text:000000000040bcee\n.text:000000000040bcf3\n.text:000000000040bcf5\n.text:000000000040bcfa\n.text:000000000040bcfe\n.text:000000000040bd00\n.text:000000000040bd02\n.text:000000000040bd05\n.text:000000000040bd07\n.text:000000000040bd09\n.text:000000000040bd0b\n.text:000000000040bd0d\n.text:000000000040bd0f\n.text:000000000040bd12\n.text:000000000040bd14\n.text:000000000040bd17\n.text:000000000040bd19\n.text:000000000040bd1d\n.text:000000000040bd21\n.text:000000000040bd25\n.text:000000000040bd2b\n.text:000000000040bd2f\n.text:000000000040bd32\n.text:000000000040bd36\n.text:000000000040bd37\n.text:000000000040bd39\n.text:000000000040bd3b\n.text:000000000040bd3d\n.text:000000000040bd3f\n.text:000000000040bd40\n.text:000000000040bd42\n.text:000000000040bd47\n.text:000000000040bd4b\n.text:000000000040bd4c\n.text:000000000040bd4e\n.text:000000000040bd50\n.text:000000000040bd52\n.text:000000000040bd54\n.text:000000000040bd55\n'
p3191
tp3192
sS'strcaseeq4'
p3193
(S'\n__stdcall strcaseeq4()\n'
p3194
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p3195
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00410690\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x0040be7c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040be83\nJMP 0x0040bea4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040bea4\nTEST BPL,BPL\nJZ 0x0040be9f\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x0040beb0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p3196
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 27 48 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p3197
S'.text:000000000040be50\n.text:000000000040be51\n.text:000000000040be53\n.text:000000000040be55\n.text:000000000040be56\n.text:000000000040be57\n.text:000000000040be5a\n.text:000000000040be5d\n.text:000000000040be5f\n.text:000000000040be62\n.text:000000000040be64\n.text:000000000040be69\n.text:000000000040be6d\n.text:000000000040be6f\n.text:000000000040be71\n.text:000000000040be74\n.text:000000000040be76\n.text:000000000040be78\n.text:000000000040be7a\n.text:000000000040be7c\n.text:000000000040be7e\n.text:000000000040be81\n.text:000000000040be83\n.text:000000000040be86\n.text:000000000040be88\n.text:000000000040be8c\n.text:000000000040be90\n.text:000000000040be93\n.text:000000000040be97\n.text:000000000040be98\n.text:000000000040be9a\n.text:000000000040be9c\n.text:000000000040be9d\n.text:000000000040be9f\n.text:000000000040bea4\n.text:000000000040bea8\n.text:000000000040bea9\n.text:000000000040beab\n.text:000000000040bead\n.text:000000000040beae\n'
p3198
tp3199
sS'strcaseeq3'
p3200
(S'\n__stdcall strcaseeq3()\n'
p3201
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p3202
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00410690\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x0040be10\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040be17\nJMP 0x0040be3a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040be3a\nTEST BPL,BPL\nJZ 0x0040be35\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x0040be50\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p3203
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 93 48 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p3204
S'.text:000000000040bde0\n.text:000000000040bde1\n.text:000000000040bde3\n.text:000000000040bde5\n.text:000000000040bde7\n.text:000000000040bde8\n.text:000000000040bdeb\n.text:000000000040bdee\n.text:000000000040bdf1\n.text:000000000040bdf3\n.text:000000000040bdf6\n.text:000000000040bdf8\n.text:000000000040bdfd\n.text:000000000040be01\n.text:000000000040be03\n.text:000000000040be05\n.text:000000000040be08\n.text:000000000040be0a\n.text:000000000040be0c\n.text:000000000040be0e\n.text:000000000040be10\n.text:000000000040be12\n.text:000000000040be15\n.text:000000000040be17\n.text:000000000040be1a\n.text:000000000040be1c\n.text:000000000040be20\n.text:000000000040be24\n.text:000000000040be28\n.text:000000000040be2b\n.text:000000000040be2c\n.text:000000000040be2e\n.text:000000000040be30\n.text:000000000040be32\n.text:000000000040be33\n.text:000000000040be35\n.text:000000000040be3a\n.text:000000000040be3b\n.text:000000000040be3d\n.text:000000000040be3f\n.text:000000000040be41\n.text:000000000040be42\n'
p3205
tp3206
sS'last_component'
p3207
(S'\n__stdcall last_component(char * name)\n'
p3208
V\u000achar * last_component(char *name)\u000a\u000a{\u000a  bool bVar1;\u000a  bool bVar2;\u000a  char *pcVar3;\u000a  \u000a  name = name + -1;\u000a  do {\u000a    pcVar3 = name + 1;\u000a    name = name + 1;\u000a  } while (*pcVar3 == '/');\u000a  bVar2 = false;\u000a  pcVar3 = name;\u000a  do {\u000a    bVar1 = true;\u000a    if (*name != '/') {\u000a      if (*name == 0) {\u000a        return pcVar3;\u000a      }\u000a      bVar1 = bVar2;\u000a      if (bVar2) {\u000a        pcVar3 = name;\u000a        bVar1 = false;\u000a      }\u000a    }\u000a    bVar2 = bVar1;\u000a    name = name + 1;\u000a  } while( true );\u000a}\u000a\u000a
p3209
S'DEC RDI\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP byte ptr [RDI + 0x1],0x2f\nLEA RDI,[RDI + 0x1]\nJZ 0x00409010\nXOR ESI,ESI\nMOV RAX,RDI\nJMP 0x00409036\nINC RAX\nMOV SIL,DL\nMOVZX ECX,byte ptr [RAX]\nMOV DL,0x1\nCMP CL,0x2f\nJZ 0x00409030\nTEST CL,CL\nJZ 0x00409057\nMOV EDX,ESI\nAND DL,0x1\nJZ 0x0040904d\nXOR ESI,ESI\nTEST DL,DL\nCMOVNZ RDI,RAX\nMOV EDX,ESI\nJMP 0x00409030\nMOV RAX,RDI\nRET\n'
p3210
S'48 ff cf\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n80 7f 01 2f\n48 8d 7f 01\n74 f6\n31 f6\n48 89 f8\neb 15\n48 ff c0\n40 88 d6\n0f b6 08\nb2 01\n80 f9 2f\n74 f0\n84 c9\n74 13\n89 f2\n80 e2 01\n74 02\n31 f6\n84 d2\n48 0f 45 f8\n89 f2\neb d9\n48 89 f8\nc3\n'
p3211
S'.text:0000000000409000\n.text:0000000000409003\n.text:0000000000409010\n.text:0000000000409014\n.text:0000000000409018\n.text:000000000040901a\n.text:000000000040901c\n.text:000000000040901f\n.text:0000000000409030\n.text:0000000000409033\n.text:0000000000409036\n.text:0000000000409039\n.text:000000000040903b\n.text:000000000040903e\n.text:0000000000409040\n.text:0000000000409042\n.text:0000000000409044\n.text:0000000000409046\n.text:0000000000409049\n.text:000000000040904b\n.text:000000000040904d\n.text:000000000040904f\n.text:0000000000409053\n.text:0000000000409055\n.text:0000000000409057\n.text:000000000040905a\n'
p3212
tp3213
sS'qsort'
p3214
(S'\n__stdcall qsort(void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)\n'
p3215
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\u000a\u000a{\u000a  (*(code *)PTR_qsort_00619088)();\u000a  return;\u000a}\u000a\u000a
p3216
S'JMP qword ptr [0x00619088]\n'
p3217
S'ff 25 f2 6e 21 00\n'
p3218
S'.plt:0000000000402190\n'
p3219
tp3220
sS'register_tm_clones'
p3221
(S'\n__stdcall register_tm_clones()\n'
p3222
V\u000a/* WARNING: Removing unreachable block (ram,0x00402833) */\u000a/* WARNING: Removing unreachable block (ram,0x0040283d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p3223
S'MOV ESI,0x619420\nPUSH RBP\nSUB RSI,0x619420\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00402848\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00402848\nPOP RBP\nMOV EDI,0x619420\nJMP RAX\nPOP RBP\nRET\n'
p3224
S'be 20 94 61 00\n55\n48 81 ee 20 94 61 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 20 94 61 00\nff e0\n5d\nc3\n'
p3225
S'.text:0000000000402810\n.text:0000000000402815\n.text:0000000000402816\n.text:000000000040281d\n.text:0000000000402821\n.text:0000000000402824\n.text:0000000000402827\n.text:000000000040282b\n.text:000000000040282e\n.text:0000000000402831\n.text:0000000000402833\n.text:0000000000402838\n.text:000000000040283b\n.text:000000000040283d\n.text:000000000040283e\n.text:0000000000402843\n.text:0000000000402848\n.text:0000000000402849\n'
p3226
tp3227
sS'mark_ancestor_dirs'
p3228
(S'\n__stdcall mark_ancestor_dirs(FTSENT * ent)\n'
p3229
V\u000avoid mark_ancestor_dirs(FTSENT *ent)\u000a\u000a{\u000a  _ftsent *p_Var1;\u000a  long lVar2;\u000a  \u000a  p_Var1 = ent->fts_parent;\u000a  lVar2 = p_Var1->fts_level;\u000a  while ((-1 < lVar2 && (p_Var1->fts_number == 0))) {\u000a    p_Var1->fts_number = 1;\u000a    p_Var1 = p_Var1->fts_parent;\u000a    lVar2 = p_Var1->fts_level;\u000a  }\u000a  return;\u000a}\u000a\u000a
p3230
S'MOV RAX,qword ptr [RDI + 0x8]\nCMP qword ptr [RAX + 0x58],0x0\nJNS 0x004039d3\nJMP 0x004039da\nMOV qword ptr [RAX + 0x20],0x1\nMOV RAX,qword ptr [RAX + 0x8]\nCMP qword ptr [RAX + 0x58],0x0\nJS 0x004039da\nCMP qword ptr [RAX + 0x20],0x0\nJZ 0x004039c0\nRET\n'
p3231
S'48 8b 47 08\n48 83 78 58 00\n79 18\neb 1d\n48 c7 40 20 01 00 00 00\n48 8b 40 08\n48 83 78 58 00\n78 07\n48 83 78 20 00\n74 e6\nc3\n'
p3232
S'.text:00000000004039b0\n.text:00000000004039b4\n.text:00000000004039b9\n.text:00000000004039bb\n.text:00000000004039c0\n.text:00000000004039c8\n.text:00000000004039cc\n.text:00000000004039d1\n.text:00000000004039d3\n.text:00000000004039d8\n.text:00000000004039da\n'
p3233
tp3234
sS'c_islower'
p3235
(S'\n__stdcall c_islower()\n'
p3236
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p3237
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p3238
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p3239
S'.text:0000000000410630\n.text:0000000000410633\n.text:0000000000410636\n.text:0000000000410639\n'
p3240
tp3241
sS'getcon'
p3242
(S'\n__stdcall getcon(security_context_t * con)\n'
p3243
V\u000aint getcon(security_context_t *con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p3244
S'PUSH RAX\nCALL 0x00402100\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p3245
S'50\ne8 8a 5c ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p3246
S'.text:000000000040c470\n.text:000000000040c471\n.text:000000000040c476\n.text:000000000040c47c\n.text:000000000040c481\n.text:000000000040c482\n'
p3247
tp3248
sS'fstatat'
p3249
(S'\n__stdcall fstatat(int __fd, char * __file, stat * __buf, int __flag)\n'
p3250
V\u000aint fstatat(int __fd,char *__file,stat *__buf,int __flag)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___fxstatat_00619140)(1,(ulong)(uint)__fd,__file,__buf,(ulong)(uint)__flag);\u000a  return iVar1;\u000a}\u000a\u000a
p3251
S'MOV R8D,ECX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV ESI,EDI\nMOV EDI,0x1\nJMP 0x00402300\n'
p3252
S'41 89 c8\n48 89 d1\n48 89 f2\n89 fe\nbf 01 00 00 00\ne9 db 0e ff ff\n'
p3253
S'.text:0000000000411410\n.text:0000000000411413\n.text:0000000000411416\n.text:0000000000411419\n.text:000000000041141b\n.text:0000000000411420\n'
p3254
tp3255
sS'extent_scan_free'
p3256
(S'\n__stdcall extent_scan_free(extent_scan * scan)\n'
p3257
V\u000avoid extent_scan_free(extent_scan *scan)\u000a\u000a{\u000a  free(scan->ext_info);\u000a  scan->ext_info = (extent_info *)0x0;\u000a  scan->ei_count = 0;\u000a  return;\u000a}\u000a\u000a
p3258
S'PUSH RBX\nMOV RBX,RDI\nMOV RDI,qword ptr [RBX + 0x28]\nCALL 0x004020c0\nMOV qword ptr [RBX + 0x28],0x0\nMOV qword ptr [RBX + 0x18],0x0\nPOP RBX\nRET\n'
p3259
S'53\n48 89 fb\n48 8b 7b 28\ne8 03 a1 ff ff\n48 c7 43 28 00 00 00 00\n48 c7 43 18 00 00 00 00\n5b\nc3\n'
p3260
S'.text:0000000000407fb0\n.text:0000000000407fb1\n.text:0000000000407fb4\n.text:0000000000407fb8\n.text:0000000000407fbd\n.text:0000000000407fc5\n.text:0000000000407fcd\n.text:0000000000407fce\n'
p3261
tp3262
sS'fchown'
p3263
(S'\n__stdcall fchown(int __fd, __uid_t __owner, __gid_t __group)\n'
p3264
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fchown(int __fd,__uid_t __owner,__gid_t __group)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fchown_00619308)();\u000a  return iVar1;\u000a}\u000a\u000a
p3265
S'JMP qword ptr [0x00619308]\n'
p3266
S'ff 25 72 6c 21 00\n'
p3267
S'.plt:0000000000402690\n'
p3268
tp3269
sS'fwrite'
p3270
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p3271
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_00619358)();\u000a  return sVar1;\u000a}\u000a\u000a
p3272
S'JMP qword ptr [0x00619358]\n'
p3273
S'ff 25 22 6c 21 00\n'
p3274
S'.plt:0000000000402730\n'
p3275
tp3276
sS'linkat'
p3277
(S'\n__stdcall linkat(int __fromfd, char * __from, int __tofd, char * __to, int __flags)\n'
p3278
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint linkat(int __fromfd,char *__from,int __tofd,char *__to,int __flags)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_linkat_006192b0)();\u000a  return iVar1;\u000a}\u000a\u000a
p3279
S'JMP qword ptr [0x006192b0]\n'
p3280
S'ff 25 ca 6c 21 00\n'
p3281
S'.plt:00000000004025e0\n'
p3282
tp3283
sS'src_to_dest_lookup'
p3284
(S'\n__stdcall src_to_dest_lookup(ino_t ino, dev_t dev)\n'
p3285
V\u000achar * src_to_dest_lookup(ino_t ino,dev_t dev)\u000a\u000a{\u000a  void *pvVar1;\u000a  ino_t local_18;\u000a  dev_t local_10;\u000a  \u000a  local_18 = ino;\u000a  local_10 = dev;\u000a  pvVar1 = hash_lookup(src_to_dest,&local_18);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return *(char **)((long)pvVar1 + 0x10);\u000a  }\u000a  return (char *)0x0;\u000a}\u000a\u000a
p3286
S'SUB RSP,0x18\nMOV qword ptr [RSP],RDI\nMOV qword ptr [RSP + 0x8],RSI\nMOV RDI,qword ptr [0x006198b0]\nMOV RSI,RSP\nCALL 0x00409760\nTEST RAX,RAX\nJZ 0x0040828a\nMOV RAX,qword ptr [RAX + 0x10]\nADD RSP,0x18\nRET\nXOR EAX,EAX\nADD RSP,0x18\nRET\n'
p3287
S'48 83 ec 18\n48 89 3c 24\n48 89 74 24 08\n48 8b 3d 3c 16 21 00\n48 89 e6\ne8 e4 14 00 00\n48 85 c0\n74 09\n48 8b 40 10\n48 83 c4 18\nc3\n31 c0\n48 83 c4 18\nc3\n'
p3288
S'.text:0000000000408260\n.text:0000000000408264\n.text:0000000000408268\n.text:000000000040826d\n.text:0000000000408274\n.text:0000000000408277\n.text:000000000040827c\n.text:000000000040827f\n.text:0000000000408281\n.text:0000000000408285\n.text:0000000000408289\n.text:000000000040828a\n.text:000000000040828c\n.text:0000000000408290\n'
p3289
tp3290
sS'triple_compare'
p3291
(S'\n__stdcall triple_compare(void * x, void * y)\n'
p3292
V\u000a_Bool triple_compare(void *x,void *y)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  if ((*(long *)((long)x + 8) == *(long *)((long)y + 8)) &&\u000a     (*(long *)((long)x + 0x10) == *(long *)((long)y + 0x10))) {\u000a    _Var1 = same_name(*(char **)x,*(char **)y);\u000a    return _Var1;\u000a  }\u000a  return false;\u000a}\u000a\u000a
p3293
S'MOV RAX,qword ptr [RDI + 0x8]\nCMP RAX,qword ptr [RSI + 0x8]\nJNZ 0x0040a5af\nMOV RAX,qword ptr [RDI + 0x10]\nCMP RAX,qword ptr [RSI + 0x10]\nJNZ 0x0040a5af\nMOV RDI,qword ptr [RDI]\nMOV RSI,qword ptr [RSI]\nJMP 0x0040c060\nXOR EAX,EAX\nRET\n'
p3294
S'48 8b 47 08\n48 3b 46 08\n75 15\n48 8b 47 10\n48 3b 46 10\n75 0b\n48 8b 3f\n48 8b 36\ne9 b1 1a 00 00\n31 c0\nc3\n'
p3295
S'.text:000000000040a590\n.text:000000000040a594\n.text:000000000040a598\n.text:000000000040a59a\n.text:000000000040a59e\n.text:000000000040a5a2\n.text:000000000040a5a4\n.text:000000000040a5a7\n.text:000000000040a5aa\n.text:000000000040a5af\n.text:000000000040a5b1\n'
p3296
tp3297
sS'setexeccon'
p3298
(S'\n__stdcall setexeccon(security_context_t con)\n'
p3299
V\u000aint setexeccon(security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p3300
S'PUSH RAX\nCALL 0x00402100\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p3301
S'50\ne8 fa 5a ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p3302
S'.text:000000000040c600\n.text:000000000040c601\n.text:000000000040c606\n.text:000000000040c60c\n.text:000000000040c611\n.text:000000000040c612\n'
p3303
tp3304
sS'lutimensat'
p3305
(S'\n__stdcall lutimensat(char * file, timespec * times)\n'
p3306
V\u000aint lutimensat(char *file,timespec *times)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = rpl_utimensat(file,times);\u000a  return iVar1;\u000a}\u000a\u000a
p3307
S'MOV ECX,0x100\nJMP 0x0040fdb0\n'
p3308
S'b9 00 01 00 00\ne9 86 30 00 00\n'
p3309
S'.text:000000000040cd20\n.text:000000000040cd25\n'
p3310
tp3311
sS'unlink'
p3312
(S'\n__stdcall unlink(char * __name)\n'
p3313
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint unlink(char *__name)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_unlink_00619048)();\u000a  return iVar1;\u000a}\u000a\u000a
p3314
S'JMP qword ptr [0x00619048]\n'
p3315
S'ff 25 32 6f 21 00\n'
p3316
S'.plt:0000000000402110\n'
p3317
tp3318
sS'rotl_sz'
p3319
(S'\n__stdcall rotl_sz(size_t x)\n'
p3320
V\u000asize_t rotl_sz(size_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x << bVar1 | x >> 0x40 - bVar1;\u000a}\u000a\u000a
p3321
S'MOV ECX,ESI\nROL RDI,CL\nMOV RAX,RDI\nRET\n'
p3322
S'89 f1\n48 d3 c7\n48 89 f8\nc3\n'
p3323
S'.text:00000000004104f0\n.text:00000000004104f2\n.text:00000000004104f5\n.text:00000000004104f8\n'
p3324
tp3325
sS'same_file_ok'
p3326
(S'\n__stdcall same_file_ok(char * src_name, stat * src_sb, char * dst_name, stat * dst_sb, cp_options * x, _Bool * return_now)\n'
p3327
V\u000a_Bool same_file_ok(char *src_name,stat *src_sb,char *dst_name,stat *dst_sb,cp_options *x,\u000a                  _Bool *return_now)\u000a\u000a{\u000a  backup_type bVar1;\u000a  bool bVar2;\u000a  bool bVar3;\u000a  _Bool _Var4;\u000a  int iVar5;\u000a  char *source;\u000a  stat *__src;\u000a  bool bVar6;\u000a  stat local_150;\u000a  stat local_c0;\u000a  \u000a  if (src_sb->st_ino == dst_sb->st_ino) {\u000a    bVar6 = src_sb->st_dev == dst_sb->st_dev;\u000a    *return_now = false;\u000a    if (!bVar6) goto LAB_00405ce0;\u000a    if (x->hard_link != false) {\u000a      *return_now = true;\u000a      return true;\u000a    }\u000a    bVar2 = true;\u000a    bVar3 = true;\u000a    if (x->dereference == DEREF_NEVER) goto LAB_00405cea;\u000aLAB_00405d57:\u000a    if (!bVar2) {\u000a      return true;\u000a    }\u000a    dst_sb = &local_c0;\u000a    iVar5 = lstat(dst_name,(stat *)dst_sb);\u000a    if (iVar5 != 0) {\u000a      return true;\u000a    }\u000a    __src = &local_150;\u000a    iVar5 = lstat(src_name,(stat *)__src);\u000a    if (iVar5 != 0) {\u000a      return true;\u000a    }\u000a    bVar6 = local_150.st_ino == local_c0.st_ino && local_150.st_dev == local_c0.st_dev;\u000a    if ((local_150.st_mode & 0xf000) == 0xa000) {\u000a      if (((local_c0.st_mode & 0xf000) == 0xa000) && (x->unlink_dest_before_opening != false)) {\u000a        return true;\u000a      }\u000a      goto LAB_00405d27;\u000a    }\u000a    bVar1 = x->backup_type;\u000a  }\u000a  else {\u000a    *return_now = false;\u000a    bVar6 = false;\u000aLAB_00405ce0:\u000a    bVar2 = false;\u000a    bVar3 = bVar2;\u000a    if (x->dereference != DEREF_NEVER) goto LAB_00405d57;\u000aLAB_00405cea:\u000a    __src = src_sb;\u000a    if (((src_sb->st_mode & 0xf000) == 0xa000) &&\u000a       (__src = src_sb, (dst_sb->st_mode & 0xf000) == 0xa000)) {\u000a      _Var4 = same_name(src_name,dst_name);\u000a      if (_Var4 != false) {\u000aLAB_00405d1a:\u000a        return (_Bool)(_Var4 ^ 1);\u000a      }\u000a      if (x->backup_type != no_backups) {\u000a        return true;\u000a      }\u000a      if (!bVar3) goto LAB_00405d1a;\u000a      *return_now = true;\u000a      goto LAB_00405f9a;\u000a    }\u000aLAB_00405d27:\u000a    bVar1 = x->backup_type;\u000a  }\u000a  if (bVar1 == no_backups) {\u000a    if ((x->move_mode != false) || (x->unlink_dest_before_opening != false)) {\u000a      if ((dst_sb->st_mode & 0xf000) == 0xa000) {\u000a        return true;\u000a      }\u000a      if (((bVar6) && (1 < dst_sb->st_nlink)) &&\u000a         (_Var4 = same_name(src_name,dst_name), _Var4 == false)) {\u000aLAB_00405f9a:\u000a        return (_Bool)(x->move_mode == false);\u000a      }\u000a    }\u000a    if (((__src->st_mode & 0xf000) != 0xa000) && ((dst_sb->st_mode & 0xf000) != 0xa000)) {\u000a      if (__src->st_ino != dst_sb->st_ino) {\u000a        return true;\u000a      }\u000a      if (__src->st_dev != dst_sb->st_dev) {\u000a        return true;\u000a      }\u000a      if (x->hard_link != false) goto LAB_00406045;\u000a    }\u000a    if (((x->move_mode != false) && ((src_sb->st_mode & 0xf000) == 0xa000)) &&\u000a       ((1 < dst_sb->st_nlink && (source = canonicalize_file_name(src_name), source != (char *)0x0))\u000a       )) {\u000a      _Var4 = same_name(source,dst_name);\u000a      free(source);\u000a      return (_Bool)(_Var4 ^ 1);\u000a    }\u000a    if ((x->unlink_dest_before_opening != false) && ((dst_sb->st_mode & 0xf000) == 0xa000)) {\u000a      return (_Bool)(dst_sb->st_dev == __src->st_dev);\u000a    }\u000a    if (x->dereference == DEREF_NEVER) {\u000a      if ((__src->st_mode & 0xf000) == 0xa000) {\u000a        iVar5 = stat(src_name,(stat *)&local_150);\u000a        if (iVar5 != 0) {\u000a          return true;\u000a        }\u000a      }\u000a      else {\u000a        memcpy(&local_150,__src,0x90);\u000a      }\u000a      if ((dst_sb->st_mode & 0xf000) == 0xa000) {\u000a        iVar5 = stat(dst_name,(stat *)&local_c0);\u000a        if (iVar5 != 0) {\u000a          return true;\u000a        }\u000a      }\u000a      else {\u000a        memcpy(&local_c0,dst_sb,0x90);\u000a      }\u000a      if (local_150.st_ino != local_c0.st_ino) {\u000a        return true;\u000a      }\u000a      if (local_150.st_dev != local_c0.st_dev) {\u000a        return true;\u000a      }\u000a      if (x->hard_link != false) {\u000aLAB_00406045:\u000a        *return_now = true;\u000a        return true;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    if (bVar6) {\u000a      _Var4 = same_name(src_name,dst_name);\u000a      return (_Bool)(_Var4 ^ 1);\u000a    }\u000a    if ((((x->move_mode != false) || (x->dereference == DEREF_NEVER)) ||\u000a        ((__src->st_mode & 0xf000) != 0xa000)) || ((dst_sb->st_mode & 0xf000) == 0xa000)) {\u000a      return true;\u000a    }\u000a  }\u000a  return false;\u000a}\u000a\u000a
p3328
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x138\nMOV R14,R9\nMOV R15,R8\nMOV RBX,RCX\nMOV RBP,RSI\nMOV RAX,qword ptr [RBP + 0x8]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00405cda\nMOV RAX,qword ptr [RBP]\nCMP RAX,qword ptr [RBX]\nSETZ AL\nMOV byte ptr [R14],0x0\nJNZ 0x00405ce0\nCMP byte ptr [R15 + 0x17],0x0\nJZ 0x00405d4d\nMOV byte ptr [R14],0x1\nMOV R12B,0x1\nJMP 0x0040604e\nMOV byte ptr [R14],0x0\nXOR EAX,EAX\nXOR R13D,R13D\nCMP dword ptr [R15 + 0x4],0x2\nJNZ 0x00405d57\nMOV ECX,0xf000\nMOV ESI,dword ptr [RBP + 0x18]\nAND ESI,ECX\nCMP ESI,0xa000\nJNZ 0x00405d24\nAND ECX,dword ptr [RBX + 0x18]\nCMP ECX,0xa000\nMOV RSI,RBP\nJNZ 0x00405d27\nMOV RSI,RDX\nCALL 0x0040c060\nTEST AL,AL\nJZ 0x00405dfc\nXOR AL,0x1\nMOV R12B,AL\nJMP 0x0040604e\nMOV RSI,RBP\nCMP dword ptr [R15],0x0\nJZ 0x00405e6d\nTEST AL,AL\nJZ 0x00405dc6\nMOV RSI,RDX\nCALL 0x0040c060\nMOV R12B,AL\nXOR R12B,0x1\nJMP 0x0040604e\nMOV R13B,0x1\nCMP dword ptr [R15 + 0x4],0x2\nJZ 0x00405cea\nMOV R12B,0x1\nTEST R13B,R13B\nJZ 0x0040604e\nMOV qword ptr [RSP + 0x8],RDI\nLEA RBX,[0xa8 + RSP]\nMOV RDI,RDX\nMOV RSI,RBX\nMOV R13,RDX\nCALL 0x00411400\nTEST EAX,EAX\nJNZ 0x0040604e\nMOV qword ptr [RSP + 0x10],R13\nLEA R13,[RSP + 0x18]\nMOV RDI,qword ptr [RSP + 0x8]\nMOV RSI,R13\nCALL 0x00411400\nTEST EAX,EAX\nJNZ 0x0040604e\nMOV RAX,qword ptr [RSP + 0x20]\nCMP RAX,qword ptr [0xb0 + RSP]\nJNZ 0x00405e1b\nMOV RAX,qword ptr [RSP + 0x18]\nCMP RAX,qword ptr [0xa8 + RSP]\nSETZ AL\nJMP 0x00405e1d\nCMP byte ptr [R15 + 0x18],0x0\nJNZ 0x00405df4\nCMP dword ptr [R15 + 0x4],0x2\nJZ 0x00405df4\nMOV EAX,0xf000\nMOV ECX,dword ptr [RSI + 0x18]\nAND ECX,EAX\nCMP ECX,0xa000\nJNZ 0x00405df4\nAND EAX,dword ptr [RBX + 0x18]\nCMP EAX,0xa000\nJNZ 0x0040604b\nMOV R12B,0x1\nJMP 0x0040604e\nMOV R12B,0x1\nCMP dword ptr [R15],0x0\nJNZ 0x0040604e\nTEST R13B,R13B\nJZ 0x00405d1a\nMOV byte ptr [R14],0x1\nJMP 0x00405f9a\nXOR EAX,EAX\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RDI,qword ptr [RSP + 0x8]\nMOV ECX,0xf000\nMOV ESI,dword ptr [RSP + 0x30]\nAND ESI,ECX\nCMP ESI,0xa000\nJNZ 0x00405e60\nAND ECX,dword ptr [0xc0 + RSP]\nCMP ECX,0xa000\nMOV RSI,R13\nJNZ 0x00405d27\nCMP byte ptr [R15 + 0x15],0x0\nJNZ 0x0040604e\nJMP 0x00405d27\nMOV RSI,R13\nCMP dword ptr [R15],0x0\nJNZ 0x00405d31\nCMP byte ptr [R15 + 0x18],0x0\nJNZ 0x00405e7b\nCMP byte ptr [R15 + 0x15],0x0\nJZ 0x00405ec3\nMOV ECX,0xf000\nAND ECX,dword ptr [RBX + 0x18]\nMOV R12B,0x1\nCMP ECX,0xa000\nJZ 0x0040604e\nTEST AL,AL\nJZ 0x00405ec3\nCMP qword ptr [RBX + 0x10],0x2\nJC 0x00405ec3\nMOV R13,RDI\nMOV qword ptr [RSP + 0x8],RSI\nMOV RSI,RDX\nMOV R12,RDX\nCALL 0x0040c060\nMOV RSI,qword ptr [RSP + 0x8]\nMOV RDI,R13\nMOV RDX,R12\nTEST AL,AL\nJZ 0x00405f9a\nMOV EAX,0xf000\nMOV ECX,dword ptr [RSI + 0x18]\nAND ECX,EAX\nCMP ECX,0xa000\nJZ 0x00405ee3\nAND EAX,dword ptr [RBX + 0x18]\nCMP EAX,0xa000\nJNZ 0x00405fa8\nCMP byte ptr [R15 + 0x18],0x0\nJZ 0x00405f3e\nMOV EAX,0xf000\nAND EAX,dword ptr [RBP + 0x18]\nCMP EAX,0xa000\nJNZ 0x00405f3e\nCMP qword ptr [RBX + 0x10],0x2\nJC 0x00405f3e\nMOV RBP,RDI\nMOV R12,RDX\nMOV R13,RSI\nCALL 0x004023b0\nMOV RSI,R13\nMOV RDI,RBP\nMOV RDX,R12\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00405f3e\nMOV RDI,RBP\nMOV RSI,RDX\nCALL 0x0040c060\nMOV R12B,AL\nXOR R12B,0x1\nMOV RDI,RBP\nCALL 0x004020c0\nJMP 0x0040604e\nCMP byte ptr [R15 + 0x15],0x0\nJZ 0x00405f63\nMOV EAX,0xf000\nAND EAX,dword ptr [RBX + 0x18]\nCMP EAX,0xa000\nJNZ 0x00405f63\nMOV RAX,qword ptr [RBX]\nCMP RAX,qword ptr [RSI]\nSETZ R12B\nJMP 0x0040604e\nCMP dword ptr [R15 + 0x4],0x2\nJNZ 0x0040604b\nMOV RBP,RDX\nMOV EAX,0xf000\nAND EAX,dword ptr [RSI + 0x18]\nCMP EAX,0xa000\nJNZ 0x00405fd1\nLEA RSI,[RSP + 0x18]\nCALL 0x004113e0\nMOV R12B,0x1\nTEST EAX,EAX\nMOV RDI,RBP\nJNZ 0x0040604e\nJMP 0x00405fe3\nCMP byte ptr [R15 + 0x18],0x0\nSETZ R12B\nJMP 0x0040604e\nMOV RAX,qword ptr [RSI + 0x8]\nMOV R12B,0x1\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x0040604e\nMOV RAX,qword ptr [RSI]\nCMP RAX,qword ptr [RBX]\nJNZ 0x0040604e\nCMP byte ptr [R15 + 0x17],0x0\nJNZ 0x00406045\nJMP 0x00405ee3\nLEA RDI,[RSP + 0x18]\nMOV EDX,0x90\nCALL 0x004024d0\nMOV RDI,RBP\nMOV EAX,0xf000\nAND EAX,dword ptr [RBX + 0x18]\nCMP EAX,0xa000\nJNZ 0x00406008\nLEA RSI,[0xa8 + RSP]\nCALL 0x004113e0\nMOV R12B,0x1\nTEST EAX,EAX\nJNZ 0x0040604e\nJMP 0x0040601d\nLEA RDI,[0xa8 + RSP]\nMOV EDX,0x90\nMOV RSI,RBX\nCALL 0x004024d0\nMOV RAX,qword ptr [RSP + 0x20]\nMOV R12B,0x1\nCMP RAX,qword ptr [0xb0 + RSP]\nJNZ 0x0040604e\nMOV RAX,qword ptr [RSP + 0x18]\nCMP RAX,qword ptr [0xa8 + RSP]\nJNZ 0x0040604e\nCMP byte ptr [R15 + 0x17],0x0\nJZ 0x0040604b\nMOV byte ptr [R14],0x1\nJMP 0x0040604e\nXOR R12D,R12D\nMOV EAX,R12D\nADD RSP,0x138\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p3329
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 38 01 00 00\n4d 89 ce\n4d 89 c7\n48 89 cb\n48 89 f5\n48 8b 45 08\n48 3b 43 08\n75 23\n48 8b 45 00\n48 3b 03\n0f 94 c0\n41 c6 06 00\n75 19\n41 80 7f 17 00\n74 7f\n41 c6 06 01\n41 b4 01\ne9 74 03 00 00\n41 c6 06 00\n31 c0\n45 31 ed\n41 83 7f 04 02\n75 6d\nb9 00 f0 00 00\n8b 75 18\n21 ce\n81 fe 00 a0 00 00\n75 28\n23 4b 18\n81 f9 00 a0 00 00\n48 89 ee\n75 1d\n48 89 d6\ne8 4e 63 00 00\n84 c0\n0f 84 e2 00 00 00\n34 01\n41 88 c4\ne9 2a 03 00 00\n48 89 ee\n41 83 3f 00\n0f 84 3c 01 00 00\n84 c0\n0f 84 8d 00 00 00\n48 89 d6\ne8 1f 63 00 00\n41 88 c4\n41 80 f4 01\ne9 01 03 00 00\n41 b5 01\n41 83 7f 04 02\n74 93\n41 b4 01\n45 84 ed\n0f 84 eb 02 00 00\n48 89 7c 24 08\n48 8d 9c 24 a8 00 00 00\n48 89 d7\n48 89 de\n49 89 d5\ne8 82 b6 00 00\n85 c0\n0f 85 c8 02 00 00\n4c 89 6c 24 10\n4c 8d 6c 24 18\n48 8b 7c 24 08\n4c 89 ee\ne8 63 b6 00 00\n85 c0\n0f 85 a9 02 00 00\n48 8b 44 24 20\n48 3b 84 24 b0 00 00 00\n75 67\n48 8b 44 24 18\n48 3b 84 24 a8 00 00 00\n0f 94 c0\neb 57\n41 80 7f 18 00\n75 27\n41 83 7f 04 02\n74 20\nb8 00 f0 00 00\n8b 4e 18\n21 c1\n81 f9 00 a0 00 00\n75 0e\n23 43 18\n3d 00 a0 00 00\n0f 85 57 02 00 00\n41 b4 01\ne9 52 02 00 00\n41 b4 01\n41 83 3f 00\n0f 85 45 02 00 00\n45 84 ed\n0f 84 08 ff ff ff\n41 c6 06 01\ne9 7f 01 00 00\n31 c0\n48 8b 54 24 10\n48 8b 7c 24 08\nb9 00 f0 00 00\n8b 74 24 30\n21 ce\n81 fe 00 a0 00 00\n75 26\n23 8c 24 c0 00 00 00\n81 f9 00 a0 00 00\n4c 89 ee\n0f 85 d7 fe ff ff\n41 80 7f 15 00\n0f 85 f3 01 00 00\ne9 c7 fe ff ff\n4c 89 ee\n41 83 3f 00\n0f 85 c4 fe ff ff\n41 80 7f 18 00\n75 07\n41 80 7f 15 00\n74 48\nb9 00 f0 00 00\n23 4b 18\n41 b4 01\n81 f9 00 a0 00 00\n0f 84 bc 01 00 00\n84 c0\n74 2d\n48 83 7b 10 02\n72 26\n49 89 fd\n48 89 74 24 08\n48 89 d6\n49 89 d4\ne8 b0 61 00 00\n48 8b 74 24 08\n4c 89 ef\n4c 89 e2\n84 c0\n0f 84 d7 00 00 00\nb8 00 f0 00 00\n8b 4e 18\n21 c1\n81 f9 00 a0 00 00\n74 0e\n23 43 18\n3d 00 a0 00 00\n0f 85 c5 00 00 00\n41 80 7f 18 00\n74 54\nb8 00 f0 00 00\n23 45 18\n3d 00 a0 00 00\n75 45\n48 83 7b 10 02\n72 3e\n48 89 fd\n49 89 d4\n49 89 f5\ne8 a2 c4 ff ff\n4c 89 ee\n48 89 ef\n4c 89 e2\n48 89 c5\n48 85 ed\n74 1f\n48 89 ef\n48 89 d6\ne8 36 61 00 00\n41 88 c4\n41 80 f4 01\n48 89 ef\ne8 87 c1 ff ff\ne9 10 01 00 00\n41 80 7f 15 00\n74 1e\nb8 00 f0 00 00\n23 43 18\n3d 00 a0 00 00\n75 0f\n48 8b 03\n48 3b 06\n41 0f 94 c4\ne9 eb 00 00 00\n41 83 7f 04 02\n0f 85 dd 00 00 00\n48 89 d5\nb8 00 f0 00 00\n23 46 18\n3d 00 a0 00 00\n75 51\n48 8d 74 24 18\ne8 56 b4 00 00\n41 b4 01\n85 c0\n48 89 ef\n0f 85 b6 00 00 00\neb 49\n41 80 7f 18 00\n41 0f 94 c4\ne9 a6 00 00 00\n48 8b 46 08\n41 b4 01\n48 3b 43 08\n0f 85 95 00 00 00\n48 8b 06\n48 3b 03\n0f 85 89 00 00 00\n41 80 7f 17 00\n75 79\ne9 12 ff ff ff\n48 8d 7c 24 18\nba 90 00 00 00\ne8 f0 c4 ff ff\n48 89 ef\nb8 00 f0 00 00\n23 43 18\n3d 00 a0 00 00\n75 16\n48 8d b4 24 a8 00 00 00\ne8 e1 b3 00 00\n41 b4 01\n85 c0\n75 48\neb 15\n48 8d bc 24 a8 00 00 00\nba 90 00 00 00\n48 89 de\ne8 b3 c4 ff ff\n48 8b 44 24 20\n41 b4 01\n48 3b 84 24 b0 00 00 00\n75 1f\n48 8b 44 24 18\n48 3b 84 24 a8 00 00 00\n75 10\n41 80 7f 17 00\n74 06\n41 c6 06 01\neb 03\n45 31 e4\n44 89 e0\n48 81 c4 38 01 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p3330
S'.text:0000000000405c90\n.text:0000000000405c91\n.text:0000000000405c93\n.text:0000000000405c95\n.text:0000000000405c97\n.text:0000000000405c99\n.text:0000000000405c9a\n.text:0000000000405ca1\n.text:0000000000405ca4\n.text:0000000000405ca7\n.text:0000000000405caa\n.text:0000000000405cad\n.text:0000000000405cb1\n.text:0000000000405cb5\n.text:0000000000405cb7\n.text:0000000000405cbb\n.text:0000000000405cbe\n.text:0000000000405cc1\n.text:0000000000405cc5\n.text:0000000000405cc7\n.text:0000000000405ccc\n.text:0000000000405cce\n.text:0000000000405cd2\n.text:0000000000405cd5\n.text:0000000000405cda\n.text:0000000000405cde\n.text:0000000000405ce0\n.text:0000000000405ce3\n.text:0000000000405ce8\n.text:0000000000405cea\n.text:0000000000405cef\n.text:0000000000405cf2\n.text:0000000000405cf4\n.text:0000000000405cfa\n.text:0000000000405cfc\n.text:0000000000405cff\n.text:0000000000405d05\n.text:0000000000405d08\n.text:0000000000405d0a\n.text:0000000000405d0d\n.text:0000000000405d12\n.text:0000000000405d14\n.text:0000000000405d1a\n.text:0000000000405d1c\n.text:0000000000405d1f\n.text:0000000000405d24\n.text:0000000000405d27\n.text:0000000000405d2b\n.text:0000000000405d31\n.text:0000000000405d33\n.text:0000000000405d39\n.text:0000000000405d3c\n.text:0000000000405d41\n.text:0000000000405d44\n.text:0000000000405d48\n.text:0000000000405d4d\n.text:0000000000405d50\n.text:0000000000405d55\n.text:0000000000405d57\n.text:0000000000405d5a\n.text:0000000000405d5d\n.text:0000000000405d63\n.text:0000000000405d68\n.text:0000000000405d70\n.text:0000000000405d73\n.text:0000000000405d76\n.text:0000000000405d79\n.text:0000000000405d7e\n.text:0000000000405d80\n.text:0000000000405d86\n.text:0000000000405d8b\n.text:0000000000405d90\n.text:0000000000405d95\n.text:0000000000405d98\n.text:0000000000405d9d\n.text:0000000000405d9f\n.text:0000000000405da5\n.text:0000000000405daa\n.text:0000000000405db2\n.text:0000000000405db4\n.text:0000000000405db9\n.text:0000000000405dc1\n.text:0000000000405dc4\n.text:0000000000405dc6\n.text:0000000000405dcb\n.text:0000000000405dcd\n.text:0000000000405dd2\n.text:0000000000405dd4\n.text:0000000000405dd9\n.text:0000000000405ddc\n.text:0000000000405dde\n.text:0000000000405de4\n.text:0000000000405de6\n.text:0000000000405de9\n.text:0000000000405dee\n.text:0000000000405df4\n.text:0000000000405df7\n.text:0000000000405dfc\n.text:0000000000405dff\n.text:0000000000405e03\n.text:0000000000405e09\n.text:0000000000405e0c\n.text:0000000000405e12\n.text:0000000000405e16\n.text:0000000000405e1b\n.text:0000000000405e1d\n.text:0000000000405e22\n.text:0000000000405e27\n.text:0000000000405e2c\n.text:0000000000405e30\n.text:0000000000405e32\n.text:0000000000405e38\n.text:0000000000405e3a\n.text:0000000000405e41\n.text:0000000000405e47\n.text:0000000000405e4a\n.text:0000000000405e50\n.text:0000000000405e55\n.text:0000000000405e5b\n.text:0000000000405e60\n.text:0000000000405e63\n.text:0000000000405e67\n.text:0000000000405e6d\n.text:0000000000405e72\n.text:0000000000405e74\n.text:0000000000405e79\n.text:0000000000405e7b\n.text:0000000000405e80\n.text:0000000000405e83\n.text:0000000000405e86\n.text:0000000000405e8c\n.text:0000000000405e92\n.text:0000000000405e94\n.text:0000000000405e96\n.text:0000000000405e9b\n.text:0000000000405e9d\n.text:0000000000405ea0\n.text:0000000000405ea5\n.text:0000000000405ea8\n.text:0000000000405eab\n.text:0000000000405eb0\n.text:0000000000405eb5\n.text:0000000000405eb8\n.text:0000000000405ebb\n.text:0000000000405ebd\n.text:0000000000405ec3\n.text:0000000000405ec8\n.text:0000000000405ecb\n.text:0000000000405ecd\n.text:0000000000405ed3\n.text:0000000000405ed5\n.text:0000000000405ed8\n.text:0000000000405edd\n.text:0000000000405ee3\n.text:0000000000405ee8\n.text:0000000000405eea\n.text:0000000000405eef\n.text:0000000000405ef2\n.text:0000000000405ef7\n.text:0000000000405ef9\n.text:0000000000405efe\n.text:0000000000405f00\n.text:0000000000405f03\n.text:0000000000405f06\n.text:0000000000405f09\n.text:0000000000405f0e\n.text:0000000000405f11\n.text:0000000000405f14\n.text:0000000000405f17\n.text:0000000000405f1a\n.text:0000000000405f1d\n.text:0000000000405f1f\n.text:0000000000405f22\n.text:0000000000405f25\n.text:0000000000405f2a\n.text:0000000000405f2d\n.text:0000000000405f31\n.text:0000000000405f34\n.text:0000000000405f39\n.text:0000000000405f3e\n.text:0000000000405f43\n.text:0000000000405f45\n.text:0000000000405f4a\n.text:0000000000405f4d\n.text:0000000000405f52\n.text:0000000000405f54\n.text:0000000000405f57\n.text:0000000000405f5a\n.text:0000000000405f5e\n.text:0000000000405f63\n.text:0000000000405f68\n.text:0000000000405f6e\n.text:0000000000405f71\n.text:0000000000405f76\n.text:0000000000405f79\n.text:0000000000405f7e\n.text:0000000000405f80\n.text:0000000000405f85\n.text:0000000000405f8a\n.text:0000000000405f8d\n.text:0000000000405f8f\n.text:0000000000405f92\n.text:0000000000405f98\n.text:0000000000405f9a\n.text:0000000000405f9f\n.text:0000000000405fa3\n.text:0000000000405fa8\n.text:0000000000405fac\n.text:0000000000405faf\n.text:0000000000405fb3\n.text:0000000000405fb9\n.text:0000000000405fbc\n.text:0000000000405fbf\n.text:0000000000405fc5\n.text:0000000000405fca\n.text:0000000000405fcc\n.text:0000000000405fd1\n.text:0000000000405fd6\n.text:0000000000405fdb\n.text:0000000000405fe0\n.text:0000000000405fe3\n.text:0000000000405fe8\n.text:0000000000405feb\n.text:0000000000405ff0\n.text:0000000000405ff2\n.text:0000000000405ffa\n.text:0000000000405fff\n.text:0000000000406002\n.text:0000000000406004\n.text:0000000000406006\n.text:0000000000406008\n.text:0000000000406010\n.text:0000000000406015\n.text:0000000000406018\n.text:000000000040601d\n.text:0000000000406022\n.text:0000000000406025\n.text:000000000040602d\n.text:000000000040602f\n.text:0000000000406034\n.text:000000000040603c\n.text:000000000040603e\n.text:0000000000406043\n.text:0000000000406045\n.text:0000000000406049\n.text:000000000040604b\n.text:000000000040604e\n.text:0000000000406051\n.text:0000000000406058\n.text:0000000000406059\n.text:000000000040605b\n.text:000000000040605d\n.text:000000000040605f\n.text:0000000000406061\n.text:0000000000406062\n'
p3331
tp3332
sS'__do_global_dtors_aux'
p3333
(S'\n__stdcall __do_global_dtors_aux()\n'
p3334
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p3335
S'CMP byte ptr [0x00619468],0x0\nJNZ 0x0040286a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x004027d0\nPOP RBP\nMOV byte ptr [0x00619468],0x1\nRET\n'
p3336
S'80 3d 11 6c 21 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 fe 6b 21 00 01\nf3 c3\n'
p3337
S'.text:0000000000402850\n.text:0000000000402857\n.text:0000000000402859\n.text:000000000040285a\n.text:000000000040285d\n.text:0000000000402862\n.text:0000000000402863\n.text:000000000040286a\n'
p3338
tp3339
sS'c_isprint'
p3340
(S'\n__stdcall c_isprint()\n'
p3341
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p3342
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p3343
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p3344
S'.text:0000000000410640\n.text:0000000000410643\n.text:0000000000410646\n.text:0000000000410649\n'
p3345
tp3346
sS'_fini'
p3347
(S'\n__stdcall _fini()\n'
p3348
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p3349
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p3350
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p3351
S'.fini:0000000000411450\n.fini:0000000000411454\n.fini:0000000000411458\n'
p3352
tp3353
sS'utimensat'
p3354
(S'\n__stdcall utimensat(int __fd, char * __path, timespec * __times, int __flags)\n'
p3355
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint utimensat(int __fd,char *__path,timespec *__times,int __flags)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_utimensat_00619028)();\u000a  return iVar1;\u000a}\u000a\u000a
p3356
S'JMP qword ptr [0x00619028]\n'
p3357
S'ff 25 52 6f 21 00\n'
p3358
S'.plt:00000000004020d0\n'
p3359
tp3360
sS'fd_ring_clear'
p3361
(S'\n__stdcall fd_ring_clear(I_ring * fd_ring)\n'
p3362
V\u000avoid fd_ring_clear(I_ring *fd_ring)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int __fd;\u000a  \u000a  while (_Var1 = i_ring_empty(fd_ring), _Var1 == false) {\u000a    __fd = i_ring_pop(fd_ring);\u000a    if (-1 < __fd) {\u000a      close(__fd);\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p3363
S'PUSH RBX\nMOV RBX,RDI\nJMP 0x0040e847\nMOV EDI,EAX\nCALL 0x004023c0\nMOV RDI,RBX\nCALL 0x00410900\nTEST AL,AL\nJNZ 0x0040e861\nMOV RDI,RBX\nCALL 0x00410950\nTEST EAX,EAX\nJNS 0x0040e840\nJMP 0x0040e847\nPOP RBX\nRET\n'
p3364
S'53\n48 89 fb\neb 11\n89 c7\ne8 79 3b ff ff\n48 89 df\ne8 b1 20 00 00\n84 c0\n75 0e\n48 89 df\ne8 f5 20 00 00\n85 c0\n79 e1\neb e6\n5b\nc3\n'
p3365
S'.text:000000000040e830\n.text:000000000040e831\n.text:000000000040e834\n.text:000000000040e840\n.text:000000000040e842\n.text:000000000040e847\n.text:000000000040e84a\n.text:000000000040e84f\n.text:000000000040e851\n.text:000000000040e853\n.text:000000000040e856\n.text:000000000040e85b\n.text:000000000040e85d\n.text:000000000040e85f\n.text:000000000040e861\n.text:000000000040e862\n'
p3366
tp3367
s.