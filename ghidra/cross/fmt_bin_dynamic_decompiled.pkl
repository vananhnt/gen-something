(dp0
S'__libc_csu_init'
p1
(S'\n__stdcall __libc_csu_init()\n'
p2
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p3
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x608e08]\nPUSH RBP\nLEA RBP,[0x608e10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401318\nTEST RBP,RBP\nJZ 0x004056f6\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x004056e0\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p4
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 56 37 20 00\n55\n48 8d 2d 56 37 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 47 bc ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p5
S'.text:00000000004056a0\n.text:00000000004056a2\n.text:00000000004056a4\n.text:00000000004056a7\n.text:00000000004056a9\n.text:00000000004056ab\n.text:00000000004056b2\n.text:00000000004056b3\n.text:00000000004056ba\n.text:00000000004056bb\n.text:00000000004056be\n.text:00000000004056c1\n.text:00000000004056c4\n.text:00000000004056c8\n.text:00000000004056cc\n.text:00000000004056d1\n.text:00000000004056d4\n.text:00000000004056d6\n.text:00000000004056d8\n.text:00000000004056e0\n.text:00000000004056e3\n.text:00000000004056e6\n.text:00000000004056e9\n.text:00000000004056ed\n.text:00000000004056f1\n.text:00000000004056f4\n.text:00000000004056f6\n.text:00000000004056fa\n.text:00000000004056fb\n.text:00000000004056fc\n.text:00000000004056fe\n.text:0000000000405700\n.text:0000000000405702\n.text:0000000000405704\n'
p6
tp7
sS'get_prefix'
p8
(S'\n__stdcall get_prefix(FILE * f)\n'
p9
V\u000aint get_prefix(FILE *f)\u000a\u000a{\u000a  byte bVar1;\u000a  uint uVar2;\u000a  int iVar3;\u000a  byte *pbVar4;\u000a  \u000a  in_column = 0;\u000a  getc_unlocked((FILE *)f);\u000a  uVar2 = get_space(f);\u000a  if (prefix_length == 0) {\u000a    next_prefix_indent = in_column;\u000a    if (prefix_lead_space <= in_column) {\u000a      next_prefix_indent = prefix_lead_space;\u000a    }\u000a  }\u000a  else {\u000a    bVar1 = *prefix;\u000a    next_prefix_indent = in_column;\u000a    pbVar4 = (byte *)prefix;\u000a    while( true ) {\u000a      if (bVar1 == 0) {\u000a        iVar3 = get_space(f);\u000a        return iVar3;\u000a      }\u000a      pbVar4 = pbVar4 + 1;\u000a      if (uVar2 != (uint)bVar1) break;\u000a      in_column = in_column + 1;\u000a      uVar2 = getc_unlocked((FILE *)f);\u000a      bVar1 = *pbVar4;\u000a    }\u000a  }\u000a  return uVar2;\u000a}\u000a\u000a
p10
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV dword ptr [0x006092e8],0x0\nCALL 0x004013c0\nMOV RDI,R14\nMOV ESI,EAX\nCALL 0x004022f0\nMOV ECX,dword ptr [0x006092e8]\nCMP dword ptr [0x006092c8],0x0\nJZ 0x00401fa0\nMOV dword ptr [0x006092ec],ECX\nMOV RBX,qword ptr [0x006092b8]\nMOV CL,byte ptr [RBX]\nTEST CL,CL\nJZ 0x00401f8f\nINC RBX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX ECX,CL\nCMP EAX,ECX\nJNZ 0x00401fb1\nINC dword ptr [0x006092e8]\nMOV RDI,R14\nCALL 0x004013c0\nMOVZX ECX,byte ptr [RBX]\nINC RBX\nTEST CL,CL\nJNZ 0x00401f70\nMOV RDI,R14\nMOV ESI,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x004022f0\nMOV EDX,dword ptr [0x006092c4]\nCMP EDX,ECX\nCMOVLE ECX,EDX\nMOV dword ptr [0x006092ec],ECX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p11
S'41 56\n53\n50\n49 89 fe\nc7 05 b7 73 20 00 00 00 00 00\ne8 8a f4 ff ff\n4c 89 f7\n89 c6\ne8 b0 03 00 00\n8b 0d a2 73 20 00\n83 3d 7b 73 20 00 00\n74 51\n89 0d 97 73 20 00\n48 8b 1d 5c 73 20 00\n8a 0b\n84 c9\n74 2d\n48 ff c3\n66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 c9\n39 c8\n75 3a\nff 05 6b 73 20 00\n4c 89 f7\ne8 3b f4 ff ff\n0f b6 0b\n48 ff c3\n84 c9\n75 e1\n4c 89 f7\n89 c6\n48 83 c4 08\n5b\n41 5e\ne9 50 03 00 00\n8b 15 1e 73 20 00\n39 ca\n0f 4e ca\n89 0d 3b 73 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n'
p12
S'.text:0000000000401f20\n.text:0000000000401f22\n.text:0000000000401f23\n.text:0000000000401f24\n.text:0000000000401f27\n.text:0000000000401f31\n.text:0000000000401f36\n.text:0000000000401f39\n.text:0000000000401f3b\n.text:0000000000401f40\n.text:0000000000401f46\n.text:0000000000401f4d\n.text:0000000000401f4f\n.text:0000000000401f55\n.text:0000000000401f5c\n.text:0000000000401f5e\n.text:0000000000401f60\n.text:0000000000401f62\n.text:0000000000401f65\n.text:0000000000401f70\n.text:0000000000401f73\n.text:0000000000401f75\n.text:0000000000401f77\n.text:0000000000401f7d\n.text:0000000000401f80\n.text:0000000000401f85\n.text:0000000000401f88\n.text:0000000000401f8b\n.text:0000000000401f8d\n.text:0000000000401f8f\n.text:0000000000401f92\n.text:0000000000401f94\n.text:0000000000401f98\n.text:0000000000401f99\n.text:0000000000401f9b\n.text:0000000000401fa0\n.text:0000000000401fa6\n.text:0000000000401fa8\n.text:0000000000401fab\n.text:0000000000401fb1\n.text:0000000000401fb5\n.text:0000000000401fb6\n.text:0000000000401fb8\n'
p13
tp14
sS'ungetc'
p15
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p16
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_00609140)();\u000a  return iVar1;\u000a}\u000a\u000a
p17
S'JMP qword ptr [0x00609140]\n'
p18
S'ff 25 aa 7b 20 00\n'
p19
S'.plt:0000000000401590\n'
p20
tp21
sS'c_isdigit'
p22
(S'\n__stdcall c_isdigit()\n'
p23
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p24
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p25
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p26
S'.text:0000000000405230\n.text:0000000000405233\n.text:0000000000405236\n.text:0000000000405239\n'
p27
tp28
sS'put_space'
p29
(S'\n__stdcall put_space()\n'
p30
V\u000avoid put_space(int iParm1)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  \u000a  iParm1 = iParm1 + out_column;\u000a  if (tabs == 1) {\u000a    iVar1 = iParm1 / 8;\u000a    iVar2 = iVar1 * 8;\u000a    if ((SBORROW4(out_column + 1,iVar2) != out_column + 1 + iVar1 * -8 < 0) &&\u000a       (SBORROW4(out_column,iVar2) != out_column + iVar1 * -8 < 0)) {\u000a      do {\u000a        putchar_unlocked(9);\u000a        out_column = (out_column / 8) * 8 + 8;\u000a      } while (SBORROW4(out_column,iVar2) != out_column + iVar1 * -8 < 0);\u000a    }\u000a  }\u000a  while (out_column < iParm1) {\u000a    putchar_unlocked(0x20);\u000a    out_column = out_column + 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p31
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBX,EDI\nMOV EAX,dword ptr [0x006142d0]\nADD EBX,EAX\nCMP byte ptr [0x006092d0],0x1\nJNZ 0x004026fa\nMOV EBP,EBX\nSAR EBP,0x1f\nSHR EBP,0x1d\nADD EBP,EBX\nAND EBP,0xfffffff8\nLEA ECX,[RAX + 0x1]\nCMP ECX,EBP\nJGE 0x004026fa\nCMP EAX,EBP\nJGE 0x004026fa\nNOP\nMOV EDI,0x9\nCALL 0x00401540\nMOV EAX,dword ptr [0x006142d0]\nMOV ECX,EAX\nSAR ECX,0x1f\nSHR ECX,0x1d\nADD ECX,EAX\nAND ECX,0xfffffff8\nADD ECX,0x8\nMOV dword ptr [0x006142d0],ECX\nCMP ECX,EBP\nJL 0x004026d0\nCMP dword ptr [0x006142d0],EBX\nJGE 0x0040272c\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV EDI,0x20\nCALL 0x00401540\nMOV EAX,dword ptr [0x006142d0]\nINC EAX\nMOV dword ptr [0x006142d0],EAX\nCMP EAX,EBX\nJL 0x00402710\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p32
S'55\n53\n50\n89 fb\n8b 05 25 1c 21 00\n01 c3\n80 3d 1c 6c 20 00 01\n75 44\n89 dd\nc1 fd 1f\nc1 ed 1d\n01 dd\n83 e5 f8\n8d 48 01\n39 e9\n7d 30\n39 e8\n7d 2c\n66 90\nbf 09 00 00 00\ne8 66 ee ff ff\n8b 05 f0 1b 21 00\n89 c1\nc1 f9 1f\nc1 e9 1d\n01 c1\n83 e1 f8\n83 c1 08\n89 0d da 1b 21 00\n39 e9\n7c d6\n39 1d d0 1b 21 00\n7d 2a\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\nbf 20 00 00 00\ne8 26 ee ff ff\n8b 05 b0 1b 21 00\nff c0\n89 05 a8 1b 21 00\n39 d8\n7c e4\n48 83 c4 08\n5b\n5d\nc3\n'
p33
S'.text:00000000004026a0\n.text:00000000004026a1\n.text:00000000004026a2\n.text:00000000004026a3\n.text:00000000004026a5\n.text:00000000004026ab\n.text:00000000004026ad\n.text:00000000004026b4\n.text:00000000004026b6\n.text:00000000004026b8\n.text:00000000004026bb\n.text:00000000004026be\n.text:00000000004026c0\n.text:00000000004026c3\n.text:00000000004026c6\n.text:00000000004026c8\n.text:00000000004026ca\n.text:00000000004026cc\n.text:00000000004026ce\n.text:00000000004026d0\n.text:00000000004026d5\n.text:00000000004026da\n.text:00000000004026e0\n.text:00000000004026e2\n.text:00000000004026e5\n.text:00000000004026e8\n.text:00000000004026ea\n.text:00000000004026ed\n.text:00000000004026f0\n.text:00000000004026f6\n.text:00000000004026f8\n.text:00000000004026fa\n.text:0000000000402700\n.text:0000000000402702\n.text:0000000000402710\n.text:0000000000402715\n.text:000000000040271a\n.text:0000000000402720\n.text:0000000000402722\n.text:0000000000402728\n.text:000000000040272a\n.text:000000000040272c\n.text:0000000000402730\n.text:0000000000402731\n.text:0000000000402732\n'
p34
tp35
sS'set_prefix'
p36
(S'\n__stdcall set_prefix(char * p)\n'
p37
V\u000avoid set_prefix(char *p)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t sVar2;\u000a  char *pcVar3;\u000a  \u000a  prefix_lead_space = 0;\u000a  if (*p == ' ') {\u000a    prefix_lead_space = 0;\u000a    do {\u000a      prefix_lead_space = prefix_lead_space + 1;\u000a      pcVar1 = p + 1;\u000a      p = p + 1;\u000a    } while (*pcVar1 == ' ');\u000a  }\u000a  prefix = p;\u000a  sVar2 = strlen(p);\u000a  prefix_full_length = (int)sVar2;\u000a  pcVar1 = p + (long)prefix_full_length;\u000a  do {\u000a    pcVar3 = pcVar1;\u000a    if (pcVar3 <= p) break;\u000a    pcVar1 = pcVar3 + -1;\u000a  } while (pcVar3[-1] == ' ');\u000a  *pcVar3 = 0;\u000a  prefix_length = (int)pcVar3 - (int)p;\u000a  return;\u000a}\u000a\u000a
p38
S'PUSH RBX\nMOV RBX,RDI\nMOV dword ptr [0x006092c4],0x0\nCMP byte ptr [RBX],0x20\nJNZ 0x00401e92\nMOV EAX,dword ptr [0x006092c4]\nNOP dword ptr [RAX]\nINC EAX\nCMP byte ptr [RBX + 0x1],0x20\nLEA RBX,[RBX + 0x1]\nJZ 0x00401e80\nMOV dword ptr [0x006092c4],EAX\nMOV qword ptr [0x006092b8],RBX\nMOV RDI,RBX\nCALL 0x00401420\nMOV dword ptr [0x006092c0],EAX\nMOVSXD RCX,EAX\nADD RCX,RBX\nNOP dword ptr [RAX]\nMOV RAX,RCX\nCMP RAX,RBX\nJBE 0x00401ec2\nLEA RCX,[RAX + -0x1]\nCMP byte ptr [RAX + -0x1],0x20\nJZ 0x00401eb0\nMOV byte ptr [RAX],0x0\nSUB EAX,EBX\nMOV dword ptr [0x006092c8],EAX\nPOP RBX\nRET\n'
p39
S'53\n48 89 fb\nc7 05 56 74 20 00 00 00 00 00\n80 3b 20\n75 1f\n8b 05 4b 74 20 00\n0f 1f 80 00 00 00 00\nff c0\n80 7b 01 20\n48 8d 5b 01\n74 f4\n89 05 32 74 20 00\n48 89 1d 1f 74 20 00\n48 89 df\ne8 7f f5 ff ff\n89 05 19 74 20 00\n48 63 c8\n48 01 d9\n0f 1f 00\n48 89 c8\n48 39 d8\n76 0a\n48 8d 48 ff\n80 78 ff 20\n74 ee\nc6 00 00\n29 d8\n89 05 fb 73 20 00\n5b\nc3\n'
p40
S'.text:0000000000401e60\n.text:0000000000401e61\n.text:0000000000401e64\n.text:0000000000401e6e\n.text:0000000000401e71\n.text:0000000000401e73\n.text:0000000000401e79\n.text:0000000000401e80\n.text:0000000000401e82\n.text:0000000000401e86\n.text:0000000000401e8a\n.text:0000000000401e8c\n.text:0000000000401e92\n.text:0000000000401e99\n.text:0000000000401e9c\n.text:0000000000401ea1\n.text:0000000000401ea7\n.text:0000000000401eaa\n.text:0000000000401ead\n.text:0000000000401eb0\n.text:0000000000401eb3\n.text:0000000000401eb6\n.text:0000000000401eb8\n.text:0000000000401ebc\n.text:0000000000401ec0\n.text:0000000000401ec2\n.text:0000000000401ec5\n.text:0000000000401ec7\n.text:0000000000401ecd\n.text:0000000000401ece\n'
p41
tp42
sS'version_etc_arn'
p43
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p44
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_0040666b,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x404707;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x404788;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x40481c;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p45
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00404598\nMOV EDX,0x406658\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401690\nJMP 0x004045ad\nMOV EDX,0x406664\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401690\nXOR EDI,EDI\nMOV ESI,0x40666b\nMOV EDX,0x5\nCALL 0x00401400\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x406940\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401690\nXOR EDI,EDI\nMOV ESI,0x40666f\nMOV EDX,0x5\nCALL 0x00401400\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x004014f0\nCMP R12,0x9\nJA 0x00404636\nJMP qword ptr [0x406608 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x40673a\nMOV EDX,0x5\nCALL 0x00401400\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401690\nXOR EDI,EDI\nMOV ESI,0x406879\nMOV EDX,0x5\nCALL 0x00401400\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401690\nADD RSP,0x38\nJMP 0x004048a7\nXOR EDI,EDI\nMOV ESI,0x40674a\nMOV EDX,0x5\nCALL 0x00401400\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401690\nXOR EDI,EDI\nMOV ESI,0x406761\nMOV EDX,0x5\nCALL 0x00401400\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401690\nXOR EDI,EDI\nMOV ESI,0x40677d\nMOV EDX,0x5\nCALL 0x00401400\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401690\nADD RSP,0x18\nJMP 0x004048a7\nXOR EDI,EDI\nMOV ESI,0x40679d\nMOV EDX,0x5\nCALL 0x00401400\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401690\nADD RSP,0x18\nJMP 0x004048a7\nXOR EDI,EDI\nMOV ESI,0x4067c1\nMOV EDX,0x5\nCALL 0x00401400\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401690\nADD RSP,0x28\nJMP 0x004048a7\nXOR EDI,EDI\nMOV ESI,0x4067e9\nMOV EDX,0x5\nCALL 0x00401400\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401690\nADD RSP,0x28\nJMP 0x004048a7\nXOR EDI,EDI\nMOV ESI,0x406815\nMOV EDX,0x5\nCALL 0x00401400\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401690\nADD RSP,0x38\nJMP 0x004048a7\nXOR EDI,EDI\nMOV ESI,0x406845\nMOV EDX,0x5\nCALL 0x00401400\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401690\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401360\n'
p46
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba 58 66 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 fa d0 ff ff\neb 15\nba 64 66 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 e3 d0 ff ff\n31 ff\nbe 6b 66 40 00\nba 05 00 00 00\ne8 42 ce ff ff\n48 89 c1\nbe 01 00 00 00\nba 40 69 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 b5 d0 ff ff\n31 ff\nbe 6f 66 40 00\nba 05 00 00 00\ne8 14 ce ff ff\n48 89 c7\n4c 89 f6\ne8 f9 ce ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 08 66 40 00\n31 ff\nbe 3a 67 40 00\nba 05 00 00 00\ne8 ea cd ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 5a d0 ff ff\n31 ff\nbe 79 68 40 00\nba 05 00 00 00\ne8 b9 cd ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 11 d0 ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe 4a 67 40 00\nba 05 00 00 00\ne8 67 cd ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 d3 cf ff ff\n31 ff\nbe 61 67 40 00\nba 05 00 00 00\ne8 32 cd ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 9a cf ff ff\n31 ff\nbe 7d 67 40 00\nba 05 00 00 00\ne8 f9 cc ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 64 cf ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe 9d 67 40 00\nba 05 00 00 00\ne8 ba cc ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 22 cf ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe c1 67 40 00\nba 05 00 00 00\ne8 78 cc ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 d8 ce ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe e9 67 40 00\nba 05 00 00 00\ne8 2e cc ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 8e ce ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe 15 68 40 00\nba 05 00 00 00\ne8 e4 cb ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 3c ce ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe 45 68 40 00\nba 05 00 00 00\ne8 95 cb ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 ed cd ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 ac ca ff ff\n'
p47
S'.text:0000000000404560\n.text:0000000000404562\n.text:0000000000404564\n.text:0000000000404566\n.text:0000000000404567\n.text:0000000000404568\n.text:000000000040456b\n.text:000000000040456e\n.text:0000000000404571\n.text:0000000000404574\n.text:0000000000404577\n.text:000000000040457a\n.text:000000000040457f\n.text:0000000000404582\n.text:0000000000404584\n.text:0000000000404589\n.text:000000000040458b\n.text:000000000040458e\n.text:0000000000404591\n.text:0000000000404596\n.text:0000000000404598\n.text:000000000040459d\n.text:000000000040459f\n.text:00000000004045a2\n.text:00000000004045a5\n.text:00000000004045a8\n.text:00000000004045ad\n.text:00000000004045af\n.text:00000000004045b4\n.text:00000000004045b9\n.text:00000000004045be\n.text:00000000004045c1\n.text:00000000004045c6\n.text:00000000004045cb\n.text:00000000004045d1\n.text:00000000004045d3\n.text:00000000004045d6\n.text:00000000004045db\n.text:00000000004045dd\n.text:00000000004045e2\n.text:00000000004045e7\n.text:00000000004045ec\n.text:00000000004045ef\n.text:00000000004045f2\n.text:00000000004045f7\n.text:00000000004045fb\n.text:00000000004045fd\n.text:0000000000404605\n.text:0000000000404607\n.text:000000000040460c\n.text:0000000000404611\n.text:0000000000404616\n.text:0000000000404619\n.text:000000000040461c\n.text:0000000000404621\n.text:0000000000404623\n.text:0000000000404626\n.text:000000000040462a\n.text:000000000040462b\n.text:000000000040462d\n.text:000000000040462f\n.text:0000000000404631\n.text:0000000000404636\n.text:0000000000404638\n.text:000000000040463d\n.text:0000000000404642\n.text:0000000000404647\n.text:000000000040464a\n.text:000000000040464d\n.text:0000000000404651\n.text:0000000000404655\n.text:000000000040465a\n.text:000000000040465f\n.text:0000000000404662\n.text:0000000000404666\n.text:000000000040466a\n.text:000000000040466e\n.text:0000000000404672\n.text:0000000000404676\n.text:000000000040467a\n.text:000000000040467f\n.text:0000000000404683\n.text:0000000000404688\n.text:000000000040468a\n.text:000000000040468f\n.text:0000000000404694\n.text:0000000000404699\n.text:000000000040469c\n.text:000000000040469f\n.text:00000000004046a3\n.text:00000000004046a8\n.text:00000000004046aa\n.text:00000000004046ad\n.text:00000000004046b1\n.text:00000000004046b2\n.text:00000000004046b4\n.text:00000000004046b6\n.text:00000000004046b8\n.text:00000000004046bd\n.text:00000000004046bf\n.text:00000000004046c4\n.text:00000000004046c9\n.text:00000000004046ce\n.text:00000000004046d1\n.text:00000000004046d4\n.text:00000000004046d8\n.text:00000000004046dc\n.text:00000000004046e1\n.text:00000000004046e3\n.text:00000000004046e6\n.text:00000000004046ea\n.text:00000000004046eb\n.text:00000000004046ed\n.text:00000000004046ef\n.text:00000000004046f1\n.text:00000000004046f6\n.text:00000000004046f8\n.text:00000000004046fd\n.text:0000000000404702\n.text:0000000000404707\n.text:000000000040470a\n.text:000000000040470d\n.text:0000000000404711\n.text:0000000000404715\n.text:0000000000404719\n.text:000000000040471e\n.text:0000000000404720\n.text:0000000000404723\n.text:0000000000404727\n.text:000000000040472c\n.text:0000000000404730\n.text:0000000000404735\n.text:0000000000404737\n.text:000000000040473c\n.text:0000000000404741\n.text:0000000000404746\n.text:0000000000404749\n.text:000000000040474c\n.text:0000000000404750\n.text:0000000000404754\n.text:0000000000404759\n.text:000000000040475e\n.text:0000000000404761\n.text:0000000000404765\n.text:0000000000404769\n.text:000000000040476e\n.text:0000000000404772\n.text:0000000000404777\n.text:0000000000404779\n.text:000000000040477e\n.text:0000000000404783\n.text:0000000000404788\n.text:000000000040478b\n.text:000000000040478e\n.text:0000000000404792\n.text:0000000000404796\n.text:000000000040479a\n.text:000000000040479f\n.text:00000000004047a4\n.text:00000000004047a7\n.text:00000000004047ab\n.text:00000000004047af\n.text:00000000004047b3\n.text:00000000004047b8\n.text:00000000004047bc\n.text:00000000004047c1\n.text:00000000004047c3\n.text:00000000004047c8\n.text:00000000004047cd\n.text:00000000004047d2\n.text:00000000004047d5\n.text:00000000004047d8\n.text:00000000004047dc\n.text:00000000004047e0\n.text:00000000004047e5\n.text:00000000004047ea\n.text:00000000004047ed\n.text:00000000004047f1\n.text:00000000004047f5\n.text:00000000004047f9\n.text:00000000004047fd\n.text:0000000000404802\n.text:0000000000404806\n.text:000000000040480b\n.text:000000000040480d\n.text:0000000000404812\n.text:0000000000404817\n.text:000000000040481c\n.text:000000000040481f\n.text:0000000000404822\n.text:0000000000404826\n.text:000000000040482a\n.text:000000000040482e\n.text:0000000000404833\n.text:0000000000404838\n.text:000000000040483b\n.text:000000000040483f\n.text:0000000000404843\n.text:0000000000404847\n.text:000000000040484b\n.text:000000000040484f\n.text:0000000000404854\n.text:0000000000404858\n.text:000000000040485a\n.text:000000000040485c\n.text:0000000000404861\n.text:0000000000404866\n.text:000000000040486b\n.text:000000000040486e\n.text:0000000000404871\n.text:0000000000404875\n.text:0000000000404879\n.text:000000000040487e\n.text:0000000000404883\n.text:0000000000404886\n.text:000000000040488a\n.text:000000000040488e\n.text:0000000000404892\n.text:0000000000404896\n.text:000000000040489a\n.text:000000000040489e\n.text:00000000004048a3\n.text:00000000004048a7\n.text:00000000004048a8\n.text:00000000004048aa\n.text:00000000004048ac\n.text:00000000004048ae\n.text:00000000004048af\n'
p48
tp49
sS'usage'
p50
(S'\n__stdcall usage()\n'
p51
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,"Usage: %s [-WIDTH] [OPTION]... [FILE]...\u005cn",5);\u000a    __printf_chk(1,uVar1,program_name,uVar1);\u000a    __s = (char *)dcgettext(0,\u000a                            "Reformat each paragraph in the FILE(s), writing to standard output.\u005cnThe option -WIDTH is an abbreviated form of --width=DIGITS.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_stdin_note();\u000a    emit_mandatory_arg_note();\u000a    __s = (char *)dcgettext(0,\u000a                            "  -c, --crown-margin        preserve indentation of first two lines\u005cn  -p, --prefix=STRING       reformat only lines beginning with STRING,\u005cn                              reattaching the prefix to reformatted lines\u005cn  -s, --split-only          split long lines, but do not refill\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -t, --tagged-paragraph    indentation of first line different from second\u005cn  -u, --uniform-spacing     one space between words, two after sentences\u005cn  -w, --width=WIDTH         maximum line width (default of 75 columns)\u005cn  -g, --goal=WIDTH          goal width (default of 93% of width)\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p52
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x004018bb\nXOR EDI,EDI\nMOV ESI,0x4059d0\nMOV EDX,0x5\nCALL 0x00401400\nMOV RCX,RAX\nMOV RDX,qword ptr [0x006142e8]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004015f0\nXOR EDI,EDI\nMOV ESI,0x4059fa\nMOV EDX,0x5\nCALL 0x00401400\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x004014f0\nCALL 0x00401910\nCALL 0x00401940\nXOR EDI,EDI\nMOV ESI,0x405a7b\nMOV EDX,0x5\nCALL 0x00401400\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x004014f0\nXOR EDI,EDI\nMOV ESI,0x405b91\nMOV EDX,0x5\nCALL 0x00401400\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x004014f0\nXOR EDI,EDI\nMOV ESI,0x405caf\nMOV EDX,0x5\nCALL 0x00401400\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x004014f0\nXOR EDI,EDI\nMOV ESI,0x405cdc\nMOV EDX,0x5\nCALL 0x00401400\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x004014f0\nCALL 0x00401970\nMOV EDI,EBX\nCALL 0x00401670\nCALL 0x004018d0\nMOV EDI,EBX\nCALL 0x00401670\n'
p53
S'53\n89 fb\n85 db\n0f 85 e0 00 00 00\n31 ff\nbe d0 59 40 00\nba 05 00 00 00\ne8 14 fc ff ff\n48 89 c1\n48 8b 15 f2 2a 21 00\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 eb fd ff ff\n31 ff\nbe fa 59 40 00\nba 05 00 00 00\ne8 ea fb ff ff\n48 8b 35 4b 7a 20 00\n48 89 c7\ne8 cb fc ff ff\ne8 e6 00 00 00\ne8 11 01 00 00\n31 ff\nbe 7b 5a 40 00\nba 05 00 00 00\ne8 c0 fb ff ff\n48 8b 35 21 7a 20 00\n48 89 c7\ne8 a1 fc ff ff\n31 ff\nbe 91 5b 40 00\nba 05 00 00 00\ne8 a0 fb ff ff\n48 8b 35 01 7a 20 00\n48 89 c7\ne8 81 fc ff ff\n31 ff\nbe af 5c 40 00\nba 05 00 00 00\ne8 80 fb ff ff\n48 8b 35 e1 79 20 00\n48 89 c7\ne8 61 fc ff ff\n31 ff\nbe dc 5c 40 00\nba 05 00 00 00\ne8 60 fb ff ff\n48 8b 35 c1 79 20 00\n48 89 c7\ne8 41 fc ff ff\ne8 bc 00 00 00\n89 df\ne8 b5 fd ff ff\ne8 10 00 00 00\n89 df\ne8 a9 fd ff ff\n'
p54
S'.text:00000000004017d0\n.text:00000000004017d1\n.text:00000000004017d3\n.text:00000000004017d5\n.text:00000000004017db\n.text:00000000004017dd\n.text:00000000004017e2\n.text:00000000004017e7\n.text:00000000004017ec\n.text:00000000004017ef\n.text:00000000004017f6\n.text:00000000004017fb\n.text:00000000004017fd\n.text:0000000000401800\n.text:0000000000401805\n.text:0000000000401807\n.text:000000000040180c\n.text:0000000000401811\n.text:0000000000401816\n.text:000000000040181d\n.text:0000000000401820\n.text:0000000000401825\n.text:000000000040182a\n.text:000000000040182f\n.text:0000000000401831\n.text:0000000000401836\n.text:000000000040183b\n.text:0000000000401840\n.text:0000000000401847\n.text:000000000040184a\n.text:000000000040184f\n.text:0000000000401851\n.text:0000000000401856\n.text:000000000040185b\n.text:0000000000401860\n.text:0000000000401867\n.text:000000000040186a\n.text:000000000040186f\n.text:0000000000401871\n.text:0000000000401876\n.text:000000000040187b\n.text:0000000000401880\n.text:0000000000401887\n.text:000000000040188a\n.text:000000000040188f\n.text:0000000000401891\n.text:0000000000401896\n.text:000000000040189b\n.text:00000000004018a0\n.text:00000000004018a7\n.text:00000000004018aa\n.text:00000000004018af\n.text:00000000004018b4\n.text:00000000004018b6\n.text:00000000004018bb\n.text:00000000004018c0\n.text:00000000004018c2\n'
p55
tp56
sS'quoting_options_from_style'
p57
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p58
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p59
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x00403edd\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00401360\n'
p60
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 7e d4 ff ff\n'
p61
S'.text:0000000000403e90\n.text:0000000000403e94\n.text:0000000000403e97\n.text:0000000000403e9c\n.text:0000000000403ea1\n.text:0000000000403ea5\n.text:0000000000403ead\n.text:0000000000403eb0\n.text:0000000000403eb2\n.text:0000000000403eb4\n.text:0000000000403eb8\n.text:0000000000403ebb\n.text:0000000000403ebf\n.text:0000000000403ec4\n.text:0000000000403ec9\n.text:0000000000403ecd\n.text:0000000000403ed1\n.text:0000000000403ed5\n.text:0000000000403ed8\n.text:0000000000403edc\n.text:0000000000403edd\n'
p62
tp63
sS'strchr'
p64
(S'\n__stdcall strchr(char * __s, int __c)\n'
p65
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_006090a0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p66
S'JMP qword ptr [0x006090a0]\n'
p67
S'ff 25 4a 7c 20 00\n'
p68
S'.plt:0000000000401450\n'
p69
tp70
sS'rpl_fclose'
p71
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p72
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_004050d9;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_004050d9:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p73
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x00401550\nTEST EAX,EAX\nJS 0x004050d9\nMOV RDI,RBX\nCALL 0x004015a0\nTEST EAX,EAX\nJZ 0x004050a7\nMOV RDI,RBX\nCALL 0x00401550\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x00401470\nCMP RAX,-0x1\nJZ 0x004050d9\nMOV RDI,RBX\nCALL 0x004050f0\nTEST EAX,EAX\nJZ 0x004050d9\nCALL 0x00401370\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x004013e0\nTEST EBP,EBP\nJZ 0x004050d2\nCALL 0x00401370\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x004013e0\n'
p74
S'55\n53\n50\n48 89 fb\ne8 d5 c4 ff ff\n85 c0\n78 5a\n48 89 df\ne8 19 c5 ff ff\n85 c0\n74 1c\n48 89 df\ne8 bd c4 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 cf c3 ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 b8 c2 ff ff\n8b 28\n48 89 df\ne8 1e c3 ff ff\n85 ed\n74 0c\ne8 a5 c2 ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 f9 c2 ff ff\n'
p75
S'.text:0000000000405070\n.text:0000000000405071\n.text:0000000000405072\n.text:0000000000405073\n.text:0000000000405076\n.text:000000000040507b\n.text:000000000040507d\n.text:000000000040507f\n.text:0000000000405082\n.text:0000000000405087\n.text:0000000000405089\n.text:000000000040508b\n.text:000000000040508e\n.text:0000000000405093\n.text:0000000000405095\n.text:000000000040509a\n.text:000000000040509c\n.text:00000000004050a1\n.text:00000000004050a5\n.text:00000000004050a7\n.text:00000000004050aa\n.text:00000000004050af\n.text:00000000004050b1\n.text:00000000004050b3\n.text:00000000004050b8\n.text:00000000004050ba\n.text:00000000004050bd\n.text:00000000004050c2\n.text:00000000004050c4\n.text:00000000004050c6\n.text:00000000004050cb\n.text:00000000004050cd\n.text:00000000004050d2\n.text:00000000004050d6\n.text:00000000004050d7\n.text:00000000004050d8\n.text:00000000004050d9\n.text:00000000004050dc\n.text:00000000004050e0\n.text:00000000004050e1\n.text:00000000004050e2\n'
p76
tp77
sS'strcpy'
p78
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p79
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_00609048)();\u000a  return pcVar1;\u000a}\u000a\u000a
p80
S'JMP qword ptr [0x00609048]\n'
p81
S'ff 25 a2 7c 20 00\n'
p82
S'.plt:00000000004013a0\n'
p83
tp84
sS'fwrite_unlocked'
p85
(S'\n__stdcall fwrite_unlocked(void * __ptr, size_t __size, size_t __n, FILE * __stream)\n'
p86
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite_unlocked(void *__ptr,size_t __size,size_t __n,FILE *__stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_unlocked_00609150)();\u000a  return sVar1;\u000a}\u000a\u000a
p87
S'JMP qword ptr [0x00609150]\n'
p88
S'ff 25 9a 7b 20 00\n'
p89
S'.plt:00000000004015b0\n'
p90
tp91
sS'strncmp'
p92
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p93
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_00609038)();\u000a  return iVar1;\u000a}\u000a\u000a
p94
S'JMP qword ptr [0x00609038]\n'
p95
S'ff 25 b2 7c 20 00\n'
p96
S'.plt:0000000000401380\n'
p97
tp98
sS'xnrealloc'
p99
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p100
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p101
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00404ab4\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00404ac0\nPUSH RAX\nCALL 0x00404c10\n'
p102
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p103
S'.text:0000000000404aa0\n.text:0000000000404aa3\n.text:0000000000404aa6\n.text:0000000000404aa9\n.text:0000000000404aab\n.text:0000000000404aaf\n.text:0000000000404ab2\n.text:0000000000404ab4\n.text:0000000000404ab5\n'
p104
tp105
sS'quote'
p106
(S'\n__stdcall quote(char * arg)\n'
p107
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p108
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00404140\n'
p109
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p110
S'.text:0000000000404150\n.text:0000000000404153\n.text:0000000000404155\n.text:0000000000404158\n'
p111
tp112
sS'emit_bug_reporting_address'
p113
(S'\n__stdcall emit_bug_reporting_address()\n'
p114
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p115
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x4068b5\nMOV EDX,0x5\nCALL 0x00401400\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x4068ca\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004015f0\nXOR EDI,EDI\nMOV ESI,0x4068e0\nMOV EDX,0x5\nCALL 0x00401400\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x405da1\nMOV ECX,0x405f06\nXOR EAX,EAX\nCALL 0x004015f0\nXOR EDI,EDI\nMOV ESI,0x4068f4\nMOV EDX,0x5\nCALL 0x00401400\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004014f0\n'
p116
S'50\n31 ff\nbe b5 68 40 00\nba 05 00 00 00\ne8 0e ca ff ff\n48 89 c1\nbf 01 00 00 00\nba ca 68 40 00\n31 c0\n48 89 ce\ne8 e7 cb ff ff\n31 ff\nbe e0 68 40 00\nba 05 00 00 00\ne8 e6 c9 ff ff\n48 89 c6\nbf 01 00 00 00\nba a1 5d 40 00\nb9 06 5f 40 00\n31 c0\ne8 bd cb ff ff\n31 ff\nbe f4 68 40 00\nba 05 00 00 00\ne8 bc c9 ff ff\n48 8b 35 1d 48 20 00\n48 89 c7\n58\ne9 9c ca ff ff\n'
p117
S'.text:00000000004049e0\n.text:00000000004049e1\n.text:00000000004049e3\n.text:00000000004049e8\n.text:00000000004049ed\n.text:00000000004049f2\n.text:00000000004049f5\n.text:00000000004049fa\n.text:00000000004049ff\n.text:0000000000404a01\n.text:0000000000404a04\n.text:0000000000404a09\n.text:0000000000404a0b\n.text:0000000000404a10\n.text:0000000000404a15\n.text:0000000000404a1a\n.text:0000000000404a1d\n.text:0000000000404a22\n.text:0000000000404a27\n.text:0000000000404a2c\n.text:0000000000404a2e\n.text:0000000000404a33\n.text:0000000000404a35\n.text:0000000000404a3a\n.text:0000000000404a3f\n.text:0000000000404a44\n.text:0000000000404a4b\n.text:0000000000404a4e\n.text:0000000000404a4f\n'
p118
tp119
sS'clone_quoting_options'
p120
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p121
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p122
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401370\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x6142f0\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00404bc0\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p123
S'55\n41 56\n53\n48 89 fb\ne8 54 e6 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 f0 42 61 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 85 1e 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p124
S'.text:0000000000402d10\n.text:0000000000402d11\n.text:0000000000402d13\n.text:0000000000402d14\n.text:0000000000402d17\n.text:0000000000402d1c\n.text:0000000000402d1f\n.text:0000000000402d22\n.text:0000000000402d25\n.text:0000000000402d2a\n.text:0000000000402d2e\n.text:0000000000402d33\n.text:0000000000402d36\n.text:0000000000402d3b\n.text:0000000000402d3e\n.text:0000000000402d3f\n.text:0000000000402d41\n.text:0000000000402d42\n'
p125
tp126
sS'xmalloc'
p127
(S'\n__stdcall xmalloc(size_t n)\n'
p128
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p129
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401560\nTEST RBX,RBX\nJZ 0x00404a93\nTEST RAX,RAX\nJZ 0x00404a95\nPOP RBX\nRET\nCALL 0x00404c10\n'
p130
S'53\n48 89 fb\ne8 d7 ca ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p131
S'.text:0000000000404a80\n.text:0000000000404a81\n.text:0000000000404a84\n.text:0000000000404a89\n.text:0000000000404a8c\n.text:0000000000404a8e\n.text:0000000000404a91\n.text:0000000000404a93\n.text:0000000000404a94\n.text:0000000000404a95\n'
p132
tp133
sS'quotearg_char_mem'
p134
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p135
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p136
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x00614320]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x00614310]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x00614300]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x006142f0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00402d70\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403c60\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p137
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d 98 03 21 00\n48 89 4c 24 30\n0f 10 05 7c 03 21 00\n0f 29 44 24 20\n0f 10 05 60 03 21 00\n0f 29 44 24 10\n0f 10 05 44 03 21 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p138
S'.text:0000000000403f70\n.text:0000000000403f72\n.text:0000000000403f74\n.text:0000000000403f75\n.text:0000000000403f79\n.text:0000000000403f7b\n.text:0000000000403f7e\n.text:0000000000403f81\n.text:0000000000403f88\n.text:0000000000403f8d\n.text:0000000000403f94\n.text:0000000000403f99\n.text:0000000000403fa0\n.text:0000000000403fa5\n.text:0000000000403fac\n.text:0000000000403fb0\n.text:0000000000403fb3\n.text:0000000000403fb8\n.text:0000000000403fbb\n.text:0000000000403fbd\n.text:0000000000403fc2\n.text:0000000000403fc4\n.text:0000000000403fc7\n.text:0000000000403fca\n.text:0000000000403fcd\n.text:0000000000403fd2\n.text:0000000000403fd6\n.text:0000000000403fd7\n.text:0000000000403fd9\n.text:0000000000403fdb\n'
p139
tp140
sS'get_paragraph'
p141
(S'\n__stdcall get_paragraph(FILE * f)\n'
p142
V\u000a_Bool get_paragraph(FILE *f)\u000a\u000a{\u000a  char cVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  last_line_length = 0;\u000a  iVar3 = next_char;\u000a  if (next_char != -1) goto LAB_00401ff9;\u000a  do {\u000a    do {\u000a      iVar3 = copy_rest(f);\u000a      if (iVar3 == -1) {\u000a        next_char = -1;\u000a        return false;\u000a      }\u000a      putchar_unlocked(10);\u000a      iVar3 = get_prefix(f);\u000a    } while (iVar3 == -1);\u000aLAB_00401ff9:\u000a  } while (((iVar3 == 10) || (next_prefix_indent < prefix_lead_space)) ||\u000a          (in_column < prefix_full_length + next_prefix_indent));\u000a  prefix_indent = next_prefix_indent;\u000a  first_indent = in_column;\u000a  wptr = parabuf;\u000a  word_limit = (WORD *)unused_word_type;\u000a  iVar3 = get_line(f);\u000a  _Var2 = same_para();\u000a  set_other_indent((ulong)_Var2);\u000a  cVar1 = tagged;\u000a  if (split == 0) {\u000a    if (crown == 1) {\u000a      _Var2 = same_para();\u000a      if (_Var2 != false) {\u000a        do {\u000a          iVar3 = get_line(f);\u000a          _Var2 = same_para();\u000a          if (_Var2 == false) break;\u000a        } while (in_column == other_indent);\u000a      }\u000a    }\u000a    else {\u000a      _Var2 = same_para();\u000a      if (cVar1 == 0) {\u000a        while ((_Var2 != false && (in_column == other_indent))) {\u000a          iVar3 = get_line(f);\u000a          _Var2 = same_para();\u000a        }\u000a      }\u000a      else {\u000a        if ((_Var2 != false) && (in_column != first_indent)) {\u000a          do {\u000a            iVar3 = get_line(f);\u000a            _Var2 = same_para();\u000a            if (_Var2 == false) break;\u000a          } while (in_column == other_indent);\u000a        }\u000a      }\u000a    }\u000a  }\u000a  if ((WORD *)((long)&unused_word_type[0].text + 1U) <= word_limit) {\u000a    *(byte *)&word_limit[-1].next_break = *(byte *)&word_limit[-1].next_break | 8;\u000a    *(byte *)&word_limit[-1].next_break = *(byte *)&word_limit[-1].next_break | 2;\u000a    next_char = iVar3;\u000a    return true;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("word < word_limit","src/fmt.c",0x25e,"_Bool get_paragraph(FILE *)");\u000a}\u000a\u000a
p143
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nMOV dword ptr [0x006092f0],0x0\nMOV ESI,dword ptr [0x006092d8]\nCMP ESI,-0x1\nJNZ 0x00401ff9\nJMP 0x00402020\nMOV EDI,0xa\nCALL 0x00401540\nMOV RDI,RBX\nCALL 0x00401f20\nMOV ESI,EAX\nCMP ESI,-0x1\nJZ 0x00402020\nCMP ESI,0xa\nJZ 0x00402020\nMOV EAX,dword ptr [0x006092ec]\nCMP EAX,dword ptr [0x006092c4]\nJL 0x00402020\nMOV ECX,dword ptr [0x006092e8]\nMOV EDX,dword ptr [0x006092c0]\nADD EDX,EAX\nCMP ECX,EDX\nJGE 0x0040203f\nNOP\nMOV RDI,RBX\nCALL 0x00402360\nCMP EAX,-0x1\nJNZ 0x00401fe0\nMOV EBP,0xffffffff\nXOR EAX,EAX\nMOV dword ptr [0x006092d8],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\nMOV dword ptr [0x006092f4],EAX\nMOV dword ptr [0x006092f8],ECX\nMOV qword ptr [0x0060a688],0x609300\nMOV qword ptr [0x006092e0],0x60a690\nMOV RDI,RBX\nCALL 0x00402460\nMOV EBP,EAX\nMOV EDI,EBP\nCALL 0x00402660\nMOVZX EDI,AL\nCALL 0x004025f0\nMOV AL,byte ptr [0x006092b1]\nTEST AL,AL\nJNZ 0x0040213c\nCMP byte ptr [0x006092b3],0x1\nJNZ 0x004020cb\nMOV EDI,EBP\nCALL 0x00402660\nTEST AL,AL\nJZ 0x0040213c\nMOV RDI,RBX\nMOV ESI,EBP\nCALL 0x00402460\nMOV EBP,EAX\nMOV EDI,EBP\nCALL 0x00402660\nTEST AL,AL\nJZ 0x0040213c\nMOV EAX,dword ptr [0x006092e8]\nCMP EAX,dword ptr [0x006092d4]\nJZ 0x004020a0\nJMP 0x0040213c\nMOV R14B,byte ptr [0x006092b2]\nMOV EDI,EBP\nCALL 0x00402660\nTEST R14B,R14B\nJZ 0x0040212a\nTEST AL,AL\nJZ 0x0040213c\nMOV EAX,dword ptr [0x006092e8]\nCMP EAX,dword ptr [0x006092f8]\nJZ 0x0040213c\nMOV RDI,RBX\nMOV ESI,EBP\nCALL 0x00402460\nMOV EBP,EAX\nMOV EDI,EBP\nCALL 0x00402660\nTEST AL,AL\nJZ 0x0040213c\nMOV EAX,dword ptr [0x006092e8]\nCMP EAX,dword ptr [0x006092d4]\nJZ 0x004020f0\nJMP 0x0040213c\nMOV RDI,RBX\nMOV ESI,EBP\nCALL 0x00402460\nMOV EBP,EAX\nMOV EDI,EBP\nCALL 0x00402660\nTEST AL,AL\nJZ 0x0040213c\nMOV EAX,dword ptr [0x006092e8]\nCMP EAX,dword ptr [0x006092d4]\nJZ 0x00402117\nMOV RAX,qword ptr [0x006092e0]\nMOV ECX,0x60a690\nCMP RAX,RCX\nJBE 0x00402163\nOR byte ptr [RAX + -0x18],0x8\nMOV RAX,qword ptr [0x006092e0]\nOR byte ptr [RAX + -0x18],0x2\nMOV AL,0x1\nJMP 0x00402034\nMOV EDI,0x40601a\nMOV ESI,0x40602c\nMOV EDX,0x25e\nMOV ECX,0x406036\nCALL 0x00401480\n'
p144
S'55\n41 56\n53\n48 89 fb\nc7 05 1f 73 20 00 00 00 00 00\n8b 35 01 73 20 00\n83 fe ff\n75 1d\neb 42\nbf 0a 00 00 00\ne8 56 f5 ff ff\n48 89 df\ne8 2e ff ff ff\n89 c6\n83 fe ff\n74 27\n83 fe 0a\n74 22\n8b 05 e8 72 20 00\n3b 05 ba 72 20 00\n7c 14\n8b 0d d6 72 20 00\n8b 15 a8 72 20 00\n01 c2\n39 d1\n7d 21\n66 90\n48 89 df\ne8 38 03 00 00\n83 f8 ff\n75 b3\nbd ff ff ff ff\n31 c0\n89 2d 9e 72 20 00\n5b\n41 5e\n5d\nc3\n89 05 af 72 20 00\n89 0d ad 72 20 00\n48 c7 05 32 86 20 00 00 93 60 00\n48 c7 05 7f 72 20 00 90 a6 60 00\n48 89 df\ne8 f7 03 00 00\n89 c5\n89 ef\ne8 ee 05 00 00\n0f b6 f8\ne8 76 05 00 00\n8a 05 31 72 20 00\n84 c0\n0f 85 b4 00 00 00\n80 3d 24 72 20 00 01\n75 3a\n89 ef\ne8 c8 05 00 00\n84 c0\n0f 84 9c 00 00 00\n48 89 df\n89 ee\ne8 b6 03 00 00\n89 c5\n89 ef\ne8 ad 05 00 00\n84 c0\n0f 84 81 00 00 00\n8b 05 27 72 20 00\n3b 05 0d 72 20 00\n74 d7\neb 71\n44 8a 35 e0 71 20 00\n89 ef\ne8 87 05 00 00\n45 84 f6\n74 4c\n84 c0\n74 5a\n8b 05 00 72 20 00\n3b 05 0a 72 20 00\n74 4c\n48 89 df\n89 ee\ne8 66 03 00 00\n89 c5\n89 ef\ne8 5d 05 00 00\n84 c0\n74 35\n8b 05 db 71 20 00\n3b 05 c1 71 20 00\n74 db\neb 25\n48 89 df\n89 ee\ne8 3f 03 00 00\n89 c5\n89 ef\ne8 36 05 00 00\n84 c0\n74 0e\n8b 05 b4 71 20 00\n3b 05 9a 71 20 00\n74 db\n48 8b 05 9d 71 20 00\nb9 90 a6 60 00\n48 39 c8\n76 16\n80 48 e8 08\n48 8b 05 88 71 20 00\n80 48 e8 02\nb0 01\ne9 d1 fe ff ff\nbf 1a 60 40 00\nbe 2c 60 40 00\nba 5e 02 00 00\nb9 36 60 40 00\ne8 04 f3 ff ff\n'
p145
S'.text:0000000000401fc0\n.text:0000000000401fc1\n.text:0000000000401fc3\n.text:0000000000401fc4\n.text:0000000000401fc7\n.text:0000000000401fd1\n.text:0000000000401fd7\n.text:0000000000401fda\n.text:0000000000401fdc\n.text:0000000000401fe0\n.text:0000000000401fe5\n.text:0000000000401fea\n.text:0000000000401fed\n.text:0000000000401ff2\n.text:0000000000401ff4\n.text:0000000000401ff7\n.text:0000000000401ff9\n.text:0000000000401ffc\n.text:0000000000401ffe\n.text:0000000000402004\n.text:000000000040200a\n.text:000000000040200c\n.text:0000000000402012\n.text:0000000000402018\n.text:000000000040201a\n.text:000000000040201c\n.text:000000000040201e\n.text:0000000000402020\n.text:0000000000402023\n.text:0000000000402028\n.text:000000000040202b\n.text:000000000040202d\n.text:0000000000402032\n.text:0000000000402034\n.text:000000000040203a\n.text:000000000040203b\n.text:000000000040203d\n.text:000000000040203e\n.text:000000000040203f\n.text:0000000000402045\n.text:000000000040204b\n.text:0000000000402056\n.text:0000000000402061\n.text:0000000000402064\n.text:0000000000402069\n.text:000000000040206b\n.text:000000000040206d\n.text:0000000000402072\n.text:0000000000402075\n.text:000000000040207a\n.text:0000000000402080\n.text:0000000000402082\n.text:0000000000402088\n.text:000000000040208f\n.text:0000000000402091\n.text:0000000000402093\n.text:0000000000402098\n.text:000000000040209a\n.text:00000000004020a0\n.text:00000000004020a3\n.text:00000000004020a5\n.text:00000000004020aa\n.text:00000000004020ac\n.text:00000000004020ae\n.text:00000000004020b3\n.text:00000000004020b5\n.text:00000000004020bb\n.text:00000000004020c1\n.text:00000000004020c7\n.text:00000000004020c9\n.text:00000000004020cb\n.text:00000000004020d2\n.text:00000000004020d4\n.text:00000000004020d9\n.text:00000000004020dc\n.text:00000000004020de\n.text:00000000004020e0\n.text:00000000004020e2\n.text:00000000004020e8\n.text:00000000004020ee\n.text:00000000004020f0\n.text:00000000004020f3\n.text:00000000004020f5\n.text:00000000004020fa\n.text:00000000004020fc\n.text:00000000004020fe\n.text:0000000000402103\n.text:0000000000402105\n.text:0000000000402107\n.text:000000000040210d\n.text:0000000000402113\n.text:0000000000402115\n.text:0000000000402117\n.text:000000000040211a\n.text:000000000040211c\n.text:0000000000402121\n.text:0000000000402123\n.text:0000000000402125\n.text:000000000040212a\n.text:000000000040212c\n.text:000000000040212e\n.text:0000000000402134\n.text:000000000040213a\n.text:000000000040213c\n.text:0000000000402143\n.text:0000000000402148\n.text:000000000040214b\n.text:000000000040214d\n.text:0000000000402151\n.text:0000000000402158\n.text:000000000040215c\n.text:000000000040215e\n.text:0000000000402163\n.text:0000000000402168\n.text:000000000040216d\n.text:0000000000402172\n.text:0000000000402177\n'
p146
tp147
sS'c_isgraph'
p148
(S'\n__stdcall c_isgraph()\n'
p149
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p150
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p151
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p152
S'.text:0000000000405240\n.text:0000000000405243\n.text:0000000000405246\n.text:0000000000405249\n'
p153
tp154
sS'put_word'
p155
(S'\n__stdcall put_word(WORD * w)\n'
p156
V\u000avoid put_word(WORD *w)\u000a\u000a{\u000a  char cVar1;\u000a  char *pcVar2;\u000a  int iVar3;\u000a  \u000a  iVar3 = w->length;\u000a  if (iVar3 != 0) {\u000a    pcVar2 = w->text;\u000a    do {\u000a      cVar1 = *pcVar2;\u000a      pcVar2 = pcVar2 + 1;\u000a      putchar_unlocked((int)cVar1);\u000a      iVar3 = iVar3 + -1;\u000a    } while (iVar3 != 0);\u000a  }\u000a  out_column = out_column + w->length;\u000a  return;\u000a}\u000a\u000a
p157
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RDI\nMOV EBP,dword ptr [R14 + 0x8]\nTEST EBP,EBP\nJZ 0x00402b3f\nMOV RBX,qword ptr [R14]\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVSX EDI,byte ptr [RBX]\nINC RBX\nCALL 0x00401540\nDEC EBP\nJNZ 0x00402b30\nMOV EAX,dword ptr [R14 + 0x8]\nADD dword ptr [0x006142d0],EAX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p158
S'55\n41 56\n53\n49 89 fe\n41 8b 6e 08\n85 ed\n74 20\n49 8b 1e\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f be 3b\n48 ff c3\ne8 05 ea ff ff\nff cd\n75 f1\n41 8b 46 08\n01 05 87 17 21 00\n5b\n41 5e\n5d\nc3\n'
p159
S'.text:0000000000402b10\n.text:0000000000402b11\n.text:0000000000402b13\n.text:0000000000402b14\n.text:0000000000402b17\n.text:0000000000402b1b\n.text:0000000000402b1d\n.text:0000000000402b1f\n.text:0000000000402b22\n.text:0000000000402b30\n.text:0000000000402b33\n.text:0000000000402b36\n.text:0000000000402b3b\n.text:0000000000402b3d\n.text:0000000000402b3f\n.text:0000000000402b43\n.text:0000000000402b49\n.text:0000000000402b4a\n.text:0000000000402b4c\n.text:0000000000402b4d\n'
p160
tp161
sS'frame_dummy'
p162
(S'\n__stdcall frame_dummy()\n'
p163
V\u000a/* WARNING: Removing unreachable block (ram,0x004017ba) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p164
S'MOV EDI,0x608e18\nCMP qword ptr [RDI],0x0\nJNZ 0x004017b0\nJMP 0x00401740\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004017ab\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401740\n'
p165
S'bf 18 8e 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p166
S'.text:00000000004017a0\n.text:00000000004017a5\n.text:00000000004017a9\n.text:00000000004017ab\n.text:00000000004017b0\n.text:00000000004017b5\n.text:00000000004017b8\n.text:00000000004017ba\n.text:00000000004017bb\n.text:00000000004017be\n.text:00000000004017c0\n.text:00000000004017c1\n'
p167
tp168
sS'quotearg_buffer_restyled'
p169
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p170
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_00402f0c_caseD_7;\u000a  case 2:\u000a    goto switchD_00402f0c_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_00402f0c_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_00402f0c_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_00402f0c_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_00402f0c_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_00402f0c_caseD_7;\u000aswitchD_00402f0c_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_00402f0c_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_00402f0c_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_004039d0;\u000aLAB_004030f0:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_004039d9:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_004039e8:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_004030fb:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_0040313f:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_0040313f;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_004039e8;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00403915;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00403820;\u000a    }\u000a    goto LAB_004039e8;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_0040394a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_004039e8;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00403979;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00403438;\u000a  case '\u005ca':\u000a    goto joined_r0x00403328;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00403328;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00403156_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00403328;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00403328;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00403156_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00403328:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_0040388e;\u000a    }\u000a    goto LAB_004039e8;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_004039e8;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_004039e8;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_004039e8;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_004039e8;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_004039e8;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00403156_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_004038e6;\u000a      goto joined_r0x004038d8;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x004033e1:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x004038d8;\u000a      goto LAB_004038e6;\u000a    }\u000a    goto LAB_004039e8;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_004039e8;\u000a  }\u000a  goto joined_r0x00403820;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_0040394a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00403979;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00403979:\u000a  if (1 < uVar10) {\u000aLAB_00403456:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00403512;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x004033e1;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00403512:\u000a        if (bVar6 != 0) goto LAB_004039e8;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00403438:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00403456;\u000ajoined_r0x00403820:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00403820:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00403847;\u000aLAB_00403880:\u000a    if (bVar22) goto LAB_00403885;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00403880;\u000aLAB_00403847:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00403885:\u000a      if (bVar6 != 0) goto LAB_004039e8;\u000aLAB_0040388e:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x004038d8;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_004038e6:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x004038d8:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00403915:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_004030f0;\u000aLAB_004039d0:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_004039d9;\u000a  goto LAB_004030fb;\u000a}\u000a\u000a
p171
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x00401410\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00403ab5\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x4060c0 + RAX*0x8]\nMOV EDI,0x4065e4\nMOV ESI,R15D\nCALL 0x00404160\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x4065e6\nMOV ESI,R15D\nCALL 0x00404160\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x00402f6d\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00402f70\nNOP\nCMP R12,RSI\nJNC 0x00402f5e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00402f50\nJMP 0x00402f70\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x00401420\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x0040303c\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x0040303c\nMOV ECX,0x40605b\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00403036\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00402fd7\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00403004\nTEST RSI,RSI\nJZ 0x00402ff1\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x4065e6\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x00403012\nMOV ECX,0x4065e6\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x0040303c\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x00403a8c\nMOV ECX,0x40605b\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x004039d0\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x004039d9\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x0040313f\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x0040313a\nCMP R11,-0x1\nJNZ 0x0040313a\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x00401420\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00403190\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x004033ec\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x406118 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x004039e8\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00403840\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00403847\nJMP 0x00403880\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x004014e0\nTEST EAX,EAX\nSETZ AL\nJNZ 0x004031dd\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00403141\nJMP 0x004039e8\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00403141\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x0040316b\nCMP EBX,0x2\nJNZ 0x0040316b\nTEST R13,R13\nJNZ 0x0040316b\nJMP 0x004039e8\nCMP R11,-0x1\nJZ 0x004035c3\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x004035e3\nJMP 0x0040316b\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004035f4\nTEST R8B,R8B\nJNZ 0x004039e8\nCMP EBX,0x2\nJNZ 0x00403298\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403298\nCMP R12,RSI\nJNC 0x00403273\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403282\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403291\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x004032a2\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00403768\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00403768\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00403768\nCMP RCX,RSI\nJNC 0x004032dc\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x004032eb\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403176\nJMP 0x00403840\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403169\nJMP 0x0040334a\nMOV DL,0x74\nJMP 0x00403332\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403169\nJMP 0x0040334a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403169\nJMP 0x0040334a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x004039e8\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403169\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x0040388e\nJMP 0x004039e8\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00403169\nTEST R8B,R8B\nJNZ 0x004039e8\nCMP R12,RSI\nJNC 0x0040337a\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403389\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403398\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00403169\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x0040377b\nCMP EBX,0x2\nJNZ 0x00403169\nTEST R8B,R8B\nJZ 0x00403169\nJMP 0x004039e8\nCMP EBX,0x2\nJNZ 0x00403614\nTEST R8B,R8B\nJNZ 0x004039e8\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x004038e6\nJMP 0x00403909\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00403635\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x004016c0\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403828\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00403828\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00403512\nJMP 0x004034e0\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x004034c9\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x004034c6\nCMP R12,RSI\nJNC 0x004034ab\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x004034ba\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00403500\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00403500\nTEST BPL,0x1\nJZ 0x004035a3\nCMP R12,RSI\nJNC 0x004034f4\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x004035a3\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x004034e0\nTEST R8B,R8B\nJNZ 0x004039e8\nCMP EBX,0x2\nJNZ 0x0040355a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x0040355a\nCMP R12,RSI\nJNC 0x00403532\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403541\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403550\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00403564\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040357b\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403595\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00403490\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x004038e6\nJMP 0x00403909\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x0040316b\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x0040316b\nJMP 0x004039e8\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00403915\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403176\nJMP 0x00403840\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00403332\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x004038e6\nJMP 0x00403909\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00403657\nMOV RDI,R10\nCALL 0x00401420\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00401440\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0040392f\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00403927\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403936\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x0040371e\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00403716\nBT RDI,RDX\nJC 0x00403a82\nINC RCX\nCMP RCX,R14\nJC 0x00403700\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x004016b0\nTEST EAX,EAX\nJNZ 0x00403733\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x004016a0\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403675\nJMP 0x00403979\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403176\nJMP 0x00403840\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00403169\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00403169\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00403169\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x0040316b\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x004039b2\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x004039e8\nCMP R12,RSI\nJNC 0x004037de\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x004037f1\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403800\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x0040380f\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403176\nJMP 0x00403840\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403176\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00403880\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00403885\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x004038e0\nJMP 0x00403885\nTEST BPL,BPL\nJZ 0x004038e0\nTEST R8B,R8B\nJNZ 0x004039e8\nCMP EBX,0x2\nJNZ 0x004038c8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x004038c8\nCMP R12,RSI\nJNC 0x004038a3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004038b2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004038c1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x004038d2\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00403912\nJMP 0x0040390e\nTEST DIL,0x1\nJZ 0x00403909\nAND AL,0x1\nJNZ 0x00403909\nCMP R12,RSI\nJNC 0x004038f4\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403903\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00403912\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x004039d0\nJMP 0x004030f0\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00403974\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x0040396c\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x004039a8\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x0040394a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403979\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00403438\nJMP 0x00403456\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403979\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403176\nJMP 0x00403840\nCMP R13,R11\nJNZ 0x004030fb\nTEST R8B,R8B\nJZ 0x00403a42\nCMP EBX,0x2\nJNZ 0x00403a42\nTEST R12,R12\nJNZ 0x00403a42\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00402e80\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00403a76\nTEST R8B,R8B\nJNZ 0x00403a76\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00403a76\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00403a69\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00403a60\nCMP R12,RSI\nJNC 0x00403a2d\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x00403a2d\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x004039e8\nTEST RSI,RSI\nJZ 0x00403a99\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x40605b\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x0040303c\nCALL 0x00401360\n'
p172
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 62 e5 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 c0 60 40 00\nbf e4 65 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf e6 65 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 a3 e4 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 5b 60 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 e6 65 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 e6 65 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 5b 60 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 03 e3 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd 18 61 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 37 e3 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 b7 e2 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 d1 dd ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 a3 dd ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 89 df ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 52 df ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 5b 60 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 a6 d8 ff ff\n'
p173
S'.text:0000000000402e80\n.text:0000000000402e81\n.text:0000000000402e83\n.text:0000000000402e85\n.text:0000000000402e87\n.text:0000000000402e89\n.text:0000000000402e8a\n.text:0000000000402e91\n.text:0000000000402e94\n.text:0000000000402e97\n.text:0000000000402e9a\n.text:0000000000402e9f\n.text:0000000000402ea4\n.text:0000000000402ea9\n.text:0000000000402eae\n.text:0000000000402eb6\n.text:0000000000402eba\n.text:0000000000402ec0\n.text:0000000000402ec8\n.text:0000000000402ecd\n.text:0000000000402ed5\n.text:0000000000402eda\n.text:0000000000402ede\n.text:0000000000402ee0\n.text:0000000000402ee3\n.text:0000000000402ee6\n.text:0000000000402ee9\n.text:0000000000402eee\n.text:0000000000402ef1\n.text:0000000000402ef4\n.text:0000000000402ef7\n.text:0000000000402efa\n.text:0000000000402efc\n.text:0000000000402eff\n.text:0000000000402f04\n.text:0000000000402f07\n.text:0000000000402f0c\n.text:0000000000402f13\n.text:0000000000402f18\n.text:0000000000402f1b\n.text:0000000000402f20\n.text:0000000000402f25\n.text:0000000000402f2a\n.text:0000000000402f2d\n.text:0000000000402f32\n.text:0000000000402f37\n.text:0000000000402f3c\n.text:0000000000402f3e\n.text:0000000000402f40\n.text:0000000000402f45\n.text:0000000000402f47\n.text:0000000000402f4a\n.text:0000000000402f4c\n.text:0000000000402f4e\n.text:0000000000402f50\n.text:0000000000402f53\n.text:0000000000402f55\n.text:0000000000402f5a\n.text:0000000000402f5e\n.text:0000000000402f64\n.text:0000000000402f67\n.text:0000000000402f69\n.text:0000000000402f6b\n.text:0000000000402f6d\n.text:0000000000402f70\n.text:0000000000402f75\n.text:0000000000402f78\n.text:0000000000402f7d\n.text:0000000000402f82\n.text:0000000000402f85\n.text:0000000000402f88\n.text:0000000000402f8b\n.text:0000000000402f8e\n.text:0000000000402f93\n.text:0000000000402f96\n.text:0000000000402f99\n.text:0000000000402f9e\n.text:0000000000402fa1\n.text:0000000000402fa3\n.text:0000000000402fa6\n.text:0000000000402fa8\n.text:0000000000402faa\n.text:0000000000402fad\n.text:0000000000402fb2\n.text:0000000000402fb7\n.text:0000000000402fbc\n.text:0000000000402fbf\n.text:0000000000402fc5\n.text:0000000000402fc7\n.text:0000000000402fca\n.text:0000000000402fcd\n.text:0000000000402fd0\n.text:0000000000402fd2\n.text:0000000000402fd4\n.text:0000000000402fd7\n.text:0000000000402fda\n.text:0000000000402fdf\n.text:0000000000402fe2\n.text:0000000000402fe4\n.text:0000000000402fe7\n.text:0000000000402fe9\n.text:0000000000402fee\n.text:0000000000402ff1\n.text:0000000000402ff6\n.text:0000000000402ffc\n.text:0000000000403002\n.text:0000000000403004\n.text:0000000000403009\n.text:000000000040300f\n.text:0000000000403012\n.text:0000000000403015\n.text:0000000000403018\n.text:000000000040301a\n.text:000000000040301f\n.text:0000000000403022\n.text:0000000000403028\n.text:000000000040302d\n.text:0000000000403033\n.text:0000000000403036\n.text:0000000000403039\n.text:000000000040303c\n.text:0000000000403044\n.text:0000000000403046\n.text:0000000000403048\n.text:000000000040304b\n.text:000000000040304f\n.text:0000000000403051\n.text:0000000000403054\n.text:0000000000403058\n.text:000000000040305a\n.text:000000000040305d\n.text:0000000000403060\n.text:0000000000403063\n.text:0000000000403065\n.text:0000000000403069\n.text:000000000040306b\n.text:000000000040306f\n.text:0000000000403072\n.text:0000000000403075\n.text:0000000000403078\n.text:000000000040307a\n.text:000000000040307e\n.text:0000000000403087\n.text:000000000040308a\n.text:000000000040308c\n.text:0000000000403090\n.text:0000000000403092\n.text:0000000000403096\n.text:0000000000403098\n.text:000000000040309b\n.text:000000000040309f\n.text:00000000004030a1\n.text:00000000004030a4\n.text:00000000004030a8\n.text:00000000004030ad\n.text:00000000004030b0\n.text:00000000004030b4\n.text:00000000004030bc\n.text:00000000004030bf\n.text:00000000004030c2\n.text:00000000004030c4\n.text:00000000004030c8\n.text:00000000004030cb\n.text:00000000004030cd\n.text:00000000004030d2\n.text:00000000004030d6\n.text:00000000004030db\n.text:00000000004030e0\n.text:00000000004030e4\n.text:00000000004030ea\n.text:00000000004030f0\n.text:00000000004030f5\n.text:00000000004030fb\n.text:0000000000403100\n.text:0000000000403102\n.text:0000000000403107\n.text:000000000040310b\n.text:000000000040310d\n.text:0000000000403111\n.text:0000000000403113\n.text:0000000000403115\n.text:0000000000403118\n.text:000000000040311d\n.text:000000000040311f\n.text:0000000000403124\n.text:0000000000403129\n.text:000000000040312d\n.text:0000000000403132\n.text:0000000000403137\n.text:000000000040313a\n.text:000000000040313d\n.text:000000000040313f\n.text:0000000000403141\n.text:0000000000403146\n.text:000000000040314a\n.text:0000000000403150\n.text:0000000000403152\n.text:0000000000403154\n.text:0000000000403156\n.text:000000000040315e\n.text:0000000000403163\n.text:0000000000403169\n.text:000000000040316b\n.text:0000000000403170\n.text:0000000000403176\n.text:000000000040317f\n.text:0000000000403185\n.text:0000000000403190\n.text:0000000000403192\n.text:0000000000403195\n.text:0000000000403199\n.text:00000000004031a1\n.text:00000000004031a4\n.text:00000000004031a9\n.text:00000000004031ab\n.text:00000000004031ae\n.text:00000000004031b0\n.text:00000000004031b5\n.text:00000000004031b8\n.text:00000000004031bd\n.text:00000000004031c0\n.text:00000000004031c5\n.text:00000000004031c9\n.text:00000000004031ce\n.text:00000000004031d0\n.text:00000000004031d2\n.text:00000000004031d8\n.text:00000000004031dd\n.text:00000000004031e2\n.text:00000000004031e5\n.text:00000000004031ea\n.text:00000000004031ee\n.text:00000000004031f3\n.text:00000000004031f8\n.text:00000000004031fa\n.text:00000000004031fc\n.text:0000000000403201\n.text:0000000000403203\n.text:0000000000403206\n.text:000000000040320c\n.text:000000000040320f\n.text:0000000000403215\n.text:0000000000403218\n.text:000000000040321e\n.text:0000000000403223\n.text:0000000000403227\n.text:000000000040322d\n.text:0000000000403230\n.text:0000000000403233\n.text:0000000000403237\n.text:000000000040323a\n.text:000000000040323c\n.text:000000000040323f\n.text:0000000000403245\n.text:000000000040324a\n.text:000000000040324f\n.text:0000000000403255\n.text:0000000000403258\n.text:000000000040325e\n.text:0000000000403261\n.text:0000000000403263\n.text:0000000000403265\n.text:0000000000403267\n.text:0000000000403269\n.text:000000000040326c\n.text:000000000040326e\n.text:0000000000403273\n.text:0000000000403278\n.text:000000000040327b\n.text:000000000040327d\n.text:0000000000403282\n.text:0000000000403287\n.text:000000000040328a\n.text:000000000040328c\n.text:0000000000403291\n.text:0000000000403295\n.text:0000000000403298\n.text:000000000040329b\n.text:000000000040329d\n.text:00000000004032a2\n.text:00000000004032a7\n.text:00000000004032a9\n.text:00000000004032ac\n.text:00000000004032af\n.text:00000000004032b5\n.text:00000000004032b9\n.text:00000000004032bc\n.text:00000000004032c2\n.text:00000000004032c6\n.text:00000000004032c9\n.text:00000000004032cc\n.text:00000000004032d2\n.text:00000000004032d5\n.text:00000000004032d7\n.text:00000000004032dc\n.text:00000000004032e1\n.text:00000000004032e4\n.text:00000000004032e6\n.text:00000000004032eb\n.text:00000000004032ef\n.text:00000000004032f4\n.text:00000000004032fa\n.text:00000000004032ff\n.text:0000000000403301\n.text:0000000000403306\n.text:000000000040330c\n.text:000000000040330e\n.text:0000000000403310\n.text:0000000000403312\n.text:0000000000403314\n.text:0000000000403319\n.text:000000000040331f\n.text:0000000000403321\n.text:0000000000403323\n.text:0000000000403328\n.text:000000000040332e\n.text:0000000000403330\n.text:0000000000403332\n.text:0000000000403337\n.text:0000000000403339\n.text:000000000040333f\n.text:0000000000403344\n.text:000000000040334a\n.text:000000000040334d\n.text:0000000000403350\n.text:0000000000403356\n.text:000000000040335b\n.text:000000000040335e\n.text:0000000000403361\n.text:0000000000403367\n.text:000000000040336a\n.text:0000000000403370\n.text:0000000000403373\n.text:0000000000403375\n.text:000000000040337a\n.text:000000000040337f\n.text:0000000000403382\n.text:0000000000403384\n.text:0000000000403389\n.text:000000000040338e\n.text:0000000000403391\n.text:0000000000403393\n.text:0000000000403398\n.text:000000000040339c\n.text:000000000040339e\n.text:00000000004033a3\n.text:00000000004033a6\n.text:00000000004033a9\n.text:00000000004033af\n.text:00000000004033b2\n.text:00000000004033b8\n.text:00000000004033bb\n.text:00000000004033c1\n.text:00000000004033c6\n.text:00000000004033c9\n.text:00000000004033cf\n.text:00000000004033d2\n.text:00000000004033d8\n.text:00000000004033db\n.text:00000000004033dd\n.text:00000000004033e1\n.text:00000000004033e7\n.text:00000000004033ec\n.text:00000000004033f0\n.text:00000000004033f9\n.text:00000000004033ff\n.text:0000000000403404\n.text:0000000000403409\n.text:000000000040340e\n.text:0000000000403411\n.text:0000000000403416\n.text:0000000000403419\n.text:000000000040341c\n.text:0000000000403421\n.text:0000000000403426\n.text:000000000040342a\n.text:000000000040342f\n.text:0000000000403434\n.text:0000000000403438\n.text:000000000040343a\n.text:000000000040343f\n.text:0000000000403445\n.text:0000000000403448\n.text:000000000040344a\n.text:000000000040344d\n.text:0000000000403450\n.text:0000000000403456\n.text:000000000040345b\n.text:000000000040345e\n.text:0000000000403461\n.text:0000000000403464\n.text:0000000000403467\n.text:0000000000403469\n.text:000000000040346d\n.text:000000000040346f\n.text:0000000000403474\n.text:0000000000403479\n.text:000000000040347f\n.text:0000000000403490\n.text:0000000000403495\n.text:0000000000403497\n.text:000000000040349a\n.text:000000000040349c\n.text:000000000040349f\n.text:00000000004034a1\n.text:00000000004034a4\n.text:00000000004034a6\n.text:00000000004034ab\n.text:00000000004034b0\n.text:00000000004034b3\n.text:00000000004034b5\n.text:00000000004034ba\n.text:00000000004034be\n.text:00000000004034c6\n.text:00000000004034c9\n.text:00000000004034cc\n.text:00000000004034ce\n.text:00000000004034d2\n.text:00000000004034e0\n.text:00000000004034e4\n.text:00000000004034ea\n.text:00000000004034ed\n.text:00000000004034ef\n.text:00000000004034f4\n.text:00000000004034f7\n.text:00000000004034f9\n.text:0000000000403500\n.text:0000000000403503\n.text:0000000000403508\n.text:000000000040350b\n.text:0000000000403510\n.text:0000000000403512\n.text:0000000000403515\n.text:000000000040351b\n.text:000000000040351e\n.text:0000000000403520\n.text:0000000000403524\n.text:0000000000403526\n.text:0000000000403528\n.text:000000000040352b\n.text:000000000040352d\n.text:0000000000403532\n.text:0000000000403537\n.text:000000000040353a\n.text:000000000040353c\n.text:0000000000403541\n.text:0000000000403546\n.text:0000000000403549\n.text:000000000040354b\n.text:0000000000403550\n.text:0000000000403554\n.text:0000000000403556\n.text:000000000040355a\n.text:000000000040355d\n.text:000000000040355f\n.text:0000000000403564\n.text:0000000000403569\n.text:000000000040356c\n.text:000000000040356e\n.text:0000000000403571\n.text:0000000000403574\n.text:0000000000403577\n.text:000000000040357b\n.text:0000000000403580\n.text:0000000000403583\n.text:0000000000403585\n.text:0000000000403588\n.text:000000000040358b\n.text:000000000040358e\n.text:0000000000403591\n.text:0000000000403595\n.text:0000000000403599\n.text:000000000040359d\n.text:00000000004035a1\n.text:00000000004035a3\n.text:00000000004035a7\n.text:00000000004035aa\n.text:00000000004035b0\n.text:00000000004035b4\n.text:00000000004035b8\n.text:00000000004035be\n.text:00000000004035c3\n.text:00000000004035c6\n.text:00000000004035c9\n.text:00000000004035ce\n.text:00000000004035d1\n.text:00000000004035d3\n.text:00000000004035d6\n.text:00000000004035dd\n.text:00000000004035e3\n.text:00000000004035e5\n.text:00000000004035e9\n.text:00000000004035ef\n.text:00000000004035f4\n.text:00000000004035f9\n.text:00000000004035ff\n.text:0000000000403602\n.text:0000000000403604\n.text:0000000000403609\n.text:000000000040360f\n.text:0000000000403614\n.text:0000000000403616\n.text:000000000040361b\n.text:0000000000403621\n.text:0000000000403623\n.text:0000000000403626\n.text:000000000040362a\n.text:0000000000403630\n.text:0000000000403635\n.text:0000000000403641\n.text:0000000000403645\n.text:0000000000403647\n.text:000000000040364a\n.text:000000000040364f\n.text:0000000000403654\n.text:0000000000403657\n.text:000000000040365b\n.text:0000000000403660\n.text:0000000000403662\n.text:0000000000403666\n.text:0000000000403668\n.text:0000000000403670\n.text:0000000000403675\n.text:000000000040367a\n.text:000000000040367e\n.text:0000000000403682\n.text:000000000040368a\n.text:000000000040368d\n.text:0000000000403692\n.text:0000000000403695\n.text:0000000000403698\n.text:000000000040369d\n.text:00000000004036a0\n.text:00000000004036a3\n.text:00000000004036a9\n.text:00000000004036ad\n.text:00000000004036b7\n.text:00000000004036bd\n.text:00000000004036c1\n.text:00000000004036c6\n.text:00000000004036cc\n.text:00000000004036d0\n.text:00000000004036d3\n.text:00000000004036d7\n.text:00000000004036d9\n.text:00000000004036de\n.text:00000000004036e3\n.text:00000000004036e7\n.text:00000000004036e9\n.text:00000000004036ee\n.text:00000000004036f3\n.text:00000000004036f7\n.text:00000000004036fc\n.text:0000000000403700\n.text:0000000000403704\n.text:0000000000403707\n.text:000000000040370a\n.text:000000000040370c\n.text:0000000000403710\n.text:0000000000403716\n.text:0000000000403719\n.text:000000000040371c\n.text:000000000040371e\n.text:0000000000403722\n.text:0000000000403727\n.text:0000000000403729\n.text:000000000040372b\n.text:0000000000403733\n.text:0000000000403738\n.text:000000000040373b\n.text:0000000000403743\n.text:0000000000403746\n.text:0000000000403749\n.text:000000000040374e\n.text:0000000000403751\n.text:0000000000403753\n.text:0000000000403758\n.text:000000000040375d\n.text:0000000000403763\n.text:0000000000403768\n.text:000000000040376b\n.text:0000000000403770\n.text:0000000000403776\n.text:000000000040377b\n.text:0000000000403780\n.text:0000000000403786\n.text:000000000040378a\n.text:000000000040378d\n.text:0000000000403793\n.text:0000000000403799\n.text:000000000040379f\n.text:00000000004037a4\n.text:00000000004037a6\n.text:00000000004037a9\n.text:00000000004037af\n.text:00000000004037b3\n.text:00000000004037b5\n.text:00000000004037bf\n.text:00000000004037c3\n.text:00000000004037c9\n.text:00000000004037cc\n.text:00000000004037ce\n.text:00000000004037d4\n.text:00000000004037d7\n.text:00000000004037d9\n.text:00000000004037de\n.text:00000000004037e3\n.text:00000000004037e6\n.text:00000000004037ea\n.text:00000000004037ec\n.text:00000000004037f1\n.text:00000000004037f6\n.text:00000000004037f9\n.text:00000000004037fb\n.text:0000000000403800\n.text:0000000000403805\n.text:0000000000403808\n.text:000000000040380a\n.text:000000000040380f\n.text:0000000000403813\n.text:0000000000403815\n.text:0000000000403818\n.text:000000000040381b\n.text:0000000000403820\n.text:0000000000403826\n.text:0000000000403828\n.text:000000000040382d\n.text:0000000000403832\n.text:0000000000403838\n.text:0000000000403840\n.text:0000000000403845\n.text:0000000000403847\n.text:000000000040384c\n.text:000000000040384f\n.text:0000000000403851\n.text:0000000000403854\n.text:0000000000403856\n.text:0000000000403859\n.text:000000000040385c\n.text:000000000040385f\n.text:0000000000403861\n.text:0000000000403869\n.text:000000000040386c\n.text:000000000040386e\n.text:0000000000403870\n.text:0000000000403880\n.text:0000000000403883\n.text:0000000000403885\n.text:0000000000403888\n.text:000000000040388e\n.text:0000000000403891\n.text:0000000000403893\n.text:0000000000403895\n.text:0000000000403897\n.text:0000000000403899\n.text:000000000040389c\n.text:000000000040389e\n.text:00000000004038a3\n.text:00000000004038a8\n.text:00000000004038ab\n.text:00000000004038ad\n.text:00000000004038b2\n.text:00000000004038b7\n.text:00000000004038ba\n.text:00000000004038bc\n.text:00000000004038c1\n.text:00000000004038c5\n.text:00000000004038c8\n.text:00000000004038cb\n.text:00000000004038cd\n.text:00000000004038d2\n.text:00000000004038d5\n.text:00000000004038d8\n.text:00000000004038da\n.text:00000000004038e0\n.text:00000000004038e4\n.text:00000000004038e6\n.text:00000000004038e8\n.text:00000000004038ea\n.text:00000000004038ed\n.text:00000000004038ef\n.text:00000000004038f4\n.text:00000000004038f9\n.text:00000000004038fc\n.text:00000000004038fe\n.text:0000000000403903\n.text:0000000000403907\n.text:0000000000403909\n.text:000000000040390c\n.text:000000000040390e\n.text:0000000000403912\n.text:0000000000403915\n.text:0000000000403918\n.text:000000000040391c\n.text:0000000000403922\n.text:0000000000403927\n.text:000000000040392f\n.text:0000000000403934\n.text:0000000000403936\n.text:000000000040393e\n.text:0000000000403943\n.text:0000000000403945\n.text:000000000040394a\n.text:000000000040394f\n.text:0000000000403953\n.text:0000000000403955\n.text:000000000040395a\n.text:000000000040395d\n.text:0000000000403960\n.text:0000000000403962\n.text:000000000040396a\n.text:000000000040396c\n.text:0000000000403974\n.text:0000000000403979\n.text:000000000040397d\n.text:0000000000403982\n.text:0000000000403987\n.text:000000000040398b\n.text:0000000000403990\n.text:0000000000403995\n.text:0000000000403999\n.text:000000000040399d\n.text:00000000004039a3\n.text:00000000004039a8\n.text:00000000004039b0\n.text:00000000004039b2\n.text:00000000004039b4\n.text:00000000004039b8\n.text:00000000004039bd\n.text:00000000004039c3\n.text:00000000004039d0\n.text:00000000004039d3\n.text:00000000004039d9\n.text:00000000004039dc\n.text:00000000004039de\n.text:00000000004039e1\n.text:00000000004039e3\n.text:00000000004039e6\n.text:00000000004039e8\n.text:00000000004039f0\n.text:00000000004039f6\n.text:00000000004039fa\n.text:00000000004039fd\n.text:0000000000403a01\n.text:0000000000403a06\n.text:0000000000403a0a\n.text:0000000000403a0e\n.text:0000000000403a11\n.text:0000000000403a14\n.text:0000000000403a17\n.text:0000000000403a1b\n.text:0000000000403a1f\n.text:0000000000403a21\n.text:0000000000403a26\n.text:0000000000403a2a\n.text:0000000000403a2d\n.text:0000000000403a30\n.text:0000000000403a37\n.text:0000000000403a38\n.text:0000000000403a3a\n.text:0000000000403a3c\n.text:0000000000403a3e\n.text:0000000000403a40\n.text:0000000000403a41\n.text:0000000000403a42\n.text:0000000000403a4a\n.text:0000000000403a4d\n.text:0000000000403a4f\n.text:0000000000403a52\n.text:0000000000403a54\n.text:0000000000403a56\n.text:0000000000403a58\n.text:0000000000403a5a\n.text:0000000000403a5d\n.text:0000000000403a60\n.text:0000000000403a63\n.text:0000000000403a65\n.text:0000000000403a69\n.text:0000000000403a6c\n.text:0000000000403a6f\n.text:0000000000403a72\n.text:0000000000403a74\n.text:0000000000403a76\n.text:0000000000403a79\n.text:0000000000403a7b\n.text:0000000000403a80\n.text:0000000000403a82\n.text:0000000000403a87\n.text:0000000000403a8c\n.text:0000000000403a8f\n.text:0000000000403a91\n.text:0000000000403a96\n.text:0000000000403a99\n.text:0000000000403a9e\n.text:0000000000403aa1\n.text:0000000000403aa7\n.text:0000000000403aad\n.text:0000000000403ab0\n.text:0000000000403ab5\n'
p174
tp175
sS'set_quoting_style'
p176
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p177
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p178
S'TEST RDI,RDI\nMOV EAX,0x6142f0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p179
S'48 85 ff\nb8 f0 42 61 00\n48 0f 45 c7\n89 30\nc3\n'
p180
S'.text:0000000000402d60\n.text:0000000000402d63\n.text:0000000000402d68\n.text:0000000000402d6c\n.text:0000000000402d6e\n'
p181
tp182
sS'quotearg_n_style_colon'
p183
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p184
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p185
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00403e90\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00402d70\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00403c60\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p186
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p187
S'.text:0000000000404010\n.text:0000000000404011\n.text:0000000000404013\n.text:0000000000404014\n.text:0000000000404018\n.text:000000000040401b\n.text:000000000040401d\n.text:0000000000404022\n.text:0000000000404025\n.text:000000000040402a\n.text:000000000040402f\n.text:0000000000404034\n.text:0000000000404037\n.text:000000000040403c\n.text:0000000000404043\n.text:0000000000404045\n.text:0000000000404048\n.text:000000000040404b\n.text:0000000000404050\n.text:0000000000404054\n.text:0000000000404055\n.text:0000000000404057\n.text:0000000000404058\n'
p188
tp189
sS'textdomain'
p190
(S'\n__stdcall textdomain()\n'
p191
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_00609060)();\u000a  return;\u000a}\u000a\u000a
p192
S'JMP qword ptr [0x00609060]\n'
p193
S'ff 25 8a 7c 20 00\n'
p194
S'.plt:00000000004013d0\n'
p195
tp196
sS'xmemdup'
p197
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p198
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p199
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00404a80\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00401530\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p200
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 4c c9 ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p201
S'.text:0000000000404bc0\n.text:0000000000404bc2\n.text:0000000000404bc4\n.text:0000000000404bc5\n.text:0000000000404bc8\n.text:0000000000404bcb\n.text:0000000000404bce\n.text:0000000000404bd3\n.text:0000000000404bd6\n.text:0000000000404bd9\n.text:0000000000404bdc\n.text:0000000000404bdf\n.text:0000000000404be4\n.text:0000000000404be7\n.text:0000000000404be8\n.text:0000000000404bea\n.text:0000000000404bec\n'
p202
tp203
sS'get_quoting_style'
p204
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p205
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p206
S'TEST RDI,RDI\nMOV EAX,0x6142f0\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p207
S'48 85 ff\nb8 f0 42 61 00\n48 0f 45 c7\n8b 00\nc3\n'
p208
S'.text:0000000000402d50\n.text:0000000000402d53\n.text:0000000000402d58\n.text:0000000000402d5c\n.text:0000000000402d5e\n'
p209
tp210
sS'ferror_unlocked'
p211
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p212
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_006090f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p213
S'JMP qword ptr [0x006090f8]\n'
p214
S'ff 25 f2 7b 20 00\n'
p215
S'.plt:0000000000401500\n'
p216
tp217
sS'exit'
p218
(S'\n__stdcall exit(int __status)\n'
p219
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_006091b0)();\u000a  return;\u000a}\u000a\u000a
p220
S'JMP qword ptr [0x006091b0]\n'
p221
S'ff 25 3a 7b 20 00\n'
p222
S'.plt:0000000000401670\n'
p223
tp224
sS'quote_mem'
p225
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p226
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p227
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00404120\n'
p228
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p229
S'.text:0000000000404130\n.text:0000000000404133\n.text:0000000000404136\n.text:0000000000404138\n.text:000000000040413b\n.text:000000000040413e\n'
p230
tp231
sS'locale_charset'
p232
(S'\n__stdcall locale_charset()\n'
p233
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_004053ed:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_004053ed;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p234
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401580\nTEST RAX,RAX\nMOV R14D,0x406739\nCMOVNZ R14,RAX\nCALL 0x00405400\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x004053c5\nJMP 0x004053ed\nMOV RDI,RBX\nCALL 0x00401420\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00401420\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x004053ed\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00401520\nTEST EAX,EAX\nJZ 0x004053e0\nCMP BPL,0x2a\nJNZ 0x004053a0\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x004053a0\nMOV RDI,RBX\nCALL 0x00401420\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x406fd0\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p235
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 02 c2 ff ff\n48 85 c0\n41 be 39 67 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 78 c0 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 6a c0 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 50 c1 ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 38 c0 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 d0 6f 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p236
S'.text:0000000000405370\n.text:0000000000405371\n.text:0000000000405373\n.text:0000000000405374\n.text:0000000000405379\n.text:000000000040537e\n.text:0000000000405381\n.text:0000000000405387\n.text:000000000040538b\n.text:0000000000405390\n.text:0000000000405393\n.text:0000000000405396\n.text:0000000000405399\n.text:000000000040539b\n.text:00000000004053a0\n.text:00000000004053a3\n.text:00000000004053a8\n.text:00000000004053ac\n.text:00000000004053b1\n.text:00000000004053b6\n.text:00000000004053bb\n.text:00000000004053c0\n.text:00000000004053c3\n.text:00000000004053c5\n.text:00000000004053c8\n.text:00000000004053cb\n.text:00000000004053d0\n.text:00000000004053d2\n.text:00000000004053d4\n.text:00000000004053d8\n.text:00000000004053da\n.text:00000000004053de\n.text:00000000004053e0\n.text:00000000004053e3\n.text:00000000004053e8\n.text:00000000004053ed\n.text:00000000004053f1\n.text:00000000004053f6\n.text:00000000004053fa\n.text:00000000004053fb\n.text:00000000004053fd\n.text:00000000004053fe\n'
p237
tp238
sS'fadvise'
p239
(S'\n__stdcall fadvise(FILE * fp)\n'
p240
V\u000avoid fadvise(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int __advise;\u000a  \u000a  if (fp != (FILE *)0x0) {\u000a    __fd = fileno((FILE *)fp);\u000a    fdadvise(__fd,0,0,__advise);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p241
S'PUSH RBX\nMOV EBX,ESI\nTEST RDI,RDI\nJZ 0x00402c58\nCALL 0x00401550\nXOR ESI,ESI\nXOR EDX,EDX\nMOV EDI,EAX\nMOV ECX,EBX\nPOP RBX\nJMP 0x00402c30\nPOP RBX\nRET\n'
p242
S'53\n89 f3\n48 85 ff\n74 10\ne8 03 e9 ff ff\n31 f6\n31 d2\n89 c7\n89 d9\n5b\neb d8\n5b\nc3\n'
p243
S'.text:0000000000402c40\n.text:0000000000402c41\n.text:0000000000402c43\n.text:0000000000402c46\n.text:0000000000402c48\n.text:0000000000402c4d\n.text:0000000000402c4f\n.text:0000000000402c51\n.text:0000000000402c53\n.text:0000000000402c55\n.text:0000000000402c56\n.text:0000000000402c58\n.text:0000000000402c59\n'
p244
tp245
sS'set_program_name'
p246
(S'\n__stdcall set_program_name(char * argv0)\n'
p247
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p248
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00402ce1\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00401460\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x00402ccb\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x4060b1\nMOV EDX,0x7\nCALL 0x00401380\nTEST EAX,EAX\nJNZ 0x00402ccb\nMOV ESI,0x4060b9\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401380\nTEST EAX,EAX\nJNZ 0x00402cc8\nADD R14,0x3\nMOV qword ptr [0x00609260],R14\nMOV RBX,R14\nMOV qword ptr [0x006142e8],RBX\nMOV qword ptr [0x00609288],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x006092a0]\nMOV EDI,0x406079\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401680\nCALL 0x00401360\n'
p249
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 e7 e7 ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe b1 60 40 00\nba 07 00 00 00\ne8 dd e6 ff ff\n85 c0\n75 24\nbe b9 60 40 00\nba 03 00 00 00\n4c 89 f7\ne8 c7 e6 ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 98 65 20 00\n4c 89 f3\n48 89 1d 16 16 21 00\n48 89 1d af 65 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d b8 65 20 00\nbf 79 60 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 84 e9 ff ff\ne8 5f e6 ff ff\n'
p250
S'.text:0000000000402c60\n.text:0000000000402c62\n.text:0000000000402c63\n.text:0000000000402c64\n.text:0000000000402c67\n.text:0000000000402c6a\n.text:0000000000402c6c\n.text:0000000000402c71\n.text:0000000000402c74\n.text:0000000000402c79\n.text:0000000000402c7c\n.text:0000000000402c80\n.text:0000000000402c84\n.text:0000000000402c87\n.text:0000000000402c8a\n.text:0000000000402c8e\n.text:0000000000402c90\n.text:0000000000402c94\n.text:0000000000402c99\n.text:0000000000402c9e\n.text:0000000000402ca3\n.text:0000000000402ca5\n.text:0000000000402ca7\n.text:0000000000402cac\n.text:0000000000402cb1\n.text:0000000000402cb4\n.text:0000000000402cb9\n.text:0000000000402cbb\n.text:0000000000402cbd\n.text:0000000000402cc1\n.text:0000000000402cc8\n.text:0000000000402ccb\n.text:0000000000402cd2\n.text:0000000000402cd9\n.text:0000000000402cdd\n.text:0000000000402cde\n.text:0000000000402ce0\n.text:0000000000402ce1\n.text:0000000000402ce8\n.text:0000000000402ced\n.text:0000000000402cf2\n.text:0000000000402cf7\n.text:0000000000402cfc\n'
p251
tp252
sS'fileno'
p253
(S'\n__stdcall fileno(FILE * __stream)\n'
p254
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_00609120)();\u000a  return iVar1;\u000a}\u000a\u000a
p255
S'JMP qword ptr [0x00609120]\n'
p256
S'ff 25 ca 7b 20 00\n'
p257
S'.plt:0000000000401550\n'
p258
tp259
sS'quotearg_buffer'
p260
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p261
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p262
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x6142f0\nCMOVNZ RBP,R8\nCALL 0x00401370\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00402e80\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p263
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd f0 42 61 00\n49 0f 45 e8\ne8 48 e5 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p264
S'.text:0000000000402e00\n.text:0000000000402e01\n.text:0000000000402e03\n.text:0000000000402e05\n.text:0000000000402e07\n.text:0000000000402e09\n.text:0000000000402e0a\n.text:0000000000402e0b\n.text:0000000000402e0e\n.text:0000000000402e11\n.text:0000000000402e14\n.text:0000000000402e17\n.text:0000000000402e1a\n.text:0000000000402e1f\n.text:0000000000402e23\n.text:0000000000402e28\n.text:0000000000402e2b\n.text:0000000000402e2d\n.text:0000000000402e31\n.text:0000000000402e35\n.text:0000000000402e39\n.text:0000000000402e3d\n.text:0000000000402e40\n.text:0000000000402e43\n.text:0000000000402e46\n.text:0000000000402e49\n.text:0000000000402e4c\n.text:0000000000402e4f\n.text:0000000000402e53\n.text:0000000000402e54\n.text:0000000000402e59\n.text:0000000000402e5d\n.text:0000000000402e61\n.text:0000000000402e63\n.text:0000000000402e67\n.text:0000000000402e68\n.text:0000000000402e6a\n.text:0000000000402e6c\n.text:0000000000402e6e\n.text:0000000000402e70\n.text:0000000000402e71\n'
p265
tp266
sS'check_punctuation'
p267
(S'\n__stdcall check_punctuation(WORD * w)\n'
p268
V\u000avoid check_punctuation(WORD *w)\u000a\u000a{\u000a  byte bVar1;\u000a  byte bVar2;\u000a  char *pcVar3;\u000a  void *pvVar4;\u000a  ushort **ppuVar5;\u000a  long lVar6;\u000a  char *pcVar7;\u000a  \u000a  pcVar3 = w->text;\u000a  lVar6 = (long)w->length;\u000a  bVar2 = pcVar3[lVar6 + -1];\u000a  pvVar4 = memchr("([\u005c'`\u005c"",(int)*pcVar3,6);\u000a  bVar1 = *(byte *)&w->paren_bitfield;\u000a  *(byte *)&w->paren_bitfield = bVar1 & 0xfe | pvVar4 != (void *)0x0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pcVar7 = pcVar3 + lVar6 + -1;\u000a  *(byte *)&w->paren_bitfield =\u000a       bVar1 & 0xfa | pvVar4 != (void *)0x0 | *(byte *)(*ppuVar5 + (ulong)bVar2) & 4;\u000a  if (1 < lVar6) {\u000a    do {\u000a      pvVar4 = memchr(&DAT_00406058,(int)*pcVar7,5);\u000a      if (pvVar4 == (void *)0x0) break;\u000a      pcVar7 = pcVar7 + -1;\u000a    } while (pcVar3 < pcVar7);\u000a  }\u000a  *(byte *)&w->paren_bitfield =\u000a       *(byte *)&w->paren_bitfield & 0xfd |\u000a       (-((0x8000400200000001U >> ((ulong)(uint)(int)*pcVar7 & 0x1f) & 1) != 0) &\u000a        -((uint)(int)*pcVar7 < 0x40) & 1U) * 2;\u000a  return;\u000a}\u000a\u000a
p269
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14,RDI\nMOV R15,qword ptr [R14]\nMOVSXD RBX,dword ptr [R14 + 0x8]\nMOVSX ESI,byte ptr [R15]\nMOVZX R12D,byte ptr [R15 + RBX*0x1 + -0x1]\nMOV EDI,0x406052\nMOV EDX,0x6\nCALL 0x004014d0\nTEST RAX,RAX\nSETNZ AL\nMOV BPL,byte ptr [R14 + 0x10]\nAND BPL,0xfe\nOR BPL,AL\nMOV byte ptr [R14 + 0x10],BPL\nCALL 0x004016c0\nMOV RAX,qword ptr [RAX]\nMOV AL,byte ptr [RAX + R12*0x2]\nAND AL,0x4\nAND BPL,0xfb\nOR BPL,AL\nCMP RBX,0x2\nLEA RBX,[R15 + RBX*0x1 + -0x1]\nMOV byte ptr [R14 + 0x10],BPL\nJL 0x0040292f\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVSX ESI,byte ptr [RBX]\nMOV EDI,0x406058\nMOV EDX,0x5\nCALL 0x004014d0\nTEST RAX,RAX\nJZ 0x0040292f\nDEC RBX\nCMP R15,RBX\nJC 0x00402910\nMOVSX RAX,byte ptr [RBX]\nMOV EAX,EAX\nCMP RAX,0x40\nSBB CL,CL\nMOV RDX,-0x7fffbffdffffffff\nBT RDX,RAX\nSBB AL,AL\nAND AL,CL\nAND AL,0x1\nMOV CL,byte ptr [R14 + 0x10]\nADD AL,AL\nAND CL,0xfd\nOR CL,AL\nMOV byte ptr [R14 + 0x10],CL\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p270
S'55\n41 57\n41 56\n41 54\n53\n49 89 fe\n4d 8b 3e\n49 63 5e 08\n41 0f be 37\n45 0f b6 64 1f ff\nbf 52 60 40 00\nba 06 00 00 00\ne8 05 ec ff ff\n48 85 c0\n0f 95 c0\n41 8a 6e 10\n40 80 e5 fe\n40 08 c5\n41 88 6e 10\ne8 db ed ff ff\n48 8b 00\n42 8a 04 60\n24 04\n40 80 e5 fb\n40 08 c5\n48 83 fb 02\n49 8d 5c 1f ff\n41 88 6e 10\n7c 2b\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f be 33\nbf 58 60 40 00\nba 05 00 00 00\ne8 ae eb ff ff\n48 85 c0\n74 08\n48 ff cb\n49 39 df\n72 e1\n48 0f be 03\n89 c0\n48 83 f8 40\n18 c9\n48 ba 01 00 00 00 02 40 00 80\n48 0f a3 c2\n18 c0\n20 c8\n24 01\n41 8a 4e 10\n00 c0\n80 e1 fd\n08 c1\n41 88 4e 10\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p271
S'.text:00000000004028a0\n.text:00000000004028a1\n.text:00000000004028a3\n.text:00000000004028a5\n.text:00000000004028a7\n.text:00000000004028a8\n.text:00000000004028ab\n.text:00000000004028ae\n.text:00000000004028b2\n.text:00000000004028b6\n.text:00000000004028bc\n.text:00000000004028c1\n.text:00000000004028c6\n.text:00000000004028cb\n.text:00000000004028ce\n.text:00000000004028d1\n.text:00000000004028d5\n.text:00000000004028d9\n.text:00000000004028dc\n.text:00000000004028e0\n.text:00000000004028e5\n.text:00000000004028e8\n.text:00000000004028ec\n.text:00000000004028ee\n.text:00000000004028f2\n.text:00000000004028f5\n.text:00000000004028f9\n.text:00000000004028fe\n.text:0000000000402902\n.text:0000000000402904\n.text:0000000000402910\n.text:0000000000402913\n.text:0000000000402918\n.text:000000000040291d\n.text:0000000000402922\n.text:0000000000402925\n.text:0000000000402927\n.text:000000000040292a\n.text:000000000040292d\n.text:000000000040292f\n.text:0000000000402933\n.text:0000000000402935\n.text:0000000000402939\n.text:000000000040293b\n.text:0000000000402945\n.text:0000000000402949\n.text:000000000040294b\n.text:000000000040294d\n.text:000000000040294f\n.text:0000000000402953\n.text:0000000000402955\n.text:0000000000402958\n.text:000000000040295a\n.text:000000000040295e\n.text:000000000040295f\n.text:0000000000402961\n.text:0000000000402963\n.text:0000000000402965\n.text:0000000000402966\n'
p272
tp273
sS'put_line'
p274
(S'\n__stdcall put_line(WORD * w)\n'
p275
V\u000avoid put_line(WORD *w)\u000a\u000a{\u000a  WORD *pWVar1;\u000a  int in_ESI;\u000a  \u000a  out_column = 0;\u000a  put_space((ulong)(uint)prefix_indent);\u000a  fputs_unlocked(prefix,stdout);\u000a  out_column = out_column + prefix_length;\u000a  put_space((ulong)(uint)(in_ESI - out_column));\u000a  pWVar1 = w->next_break;\u000a  put_word(w);\u000a  if ((WORD *)&pWVar1[-1].paren_bitfield != w) {\u000a    w = w + 1;\u000a    do {\u000a      put_space((ulong)*(uint *)((long)&w[-1].best_cost + 4));\u000a      put_word(w);\u000a      w = w + 1;\u000a    } while (pWVar1 != w);\u000a  }\u000a  last_line_length = out_column;\u000a  putchar_unlocked(10);\u000a  return;\u000a}\u000a\u000a
p276
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV dword ptr [0x006142d0],0x0\nMOV EDI,dword ptr [0x006092f4]\nCALL 0x004026a0\nMOV RDI,qword ptr [0x006092b8]\nMOV RSI,qword ptr [0x00609268]\nCALL 0x004014f0\nMOV EAX,dword ptr [0x006142d0]\nADD EAX,dword ptr [0x006092c8]\nMOV dword ptr [0x006142d0],EAX\nSUB EBP,EAX\nMOV EDI,EBP\nCALL 0x004026a0\nMOV RBP,qword ptr [RBX + 0x20]\nLEA R14,[RBP + -0x28]\nMOV RDI,RBX\nCALL 0x00402b10\nCMP R14,RBX\nJZ 0x00402ae9\nADD RBX,0x28\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV EDI,dword ptr [RBX + -0x1c]\nCALL 0x004026a0\nMOV RDI,RBX\nCALL 0x00402b10\nADD RBX,0x28\nCMP RBP,RBX\nJNZ 0x00402ad0\nMOV EAX,dword ptr [0x006142d0]\nMOV dword ptr [0x006092f0],EAX\nMOV EDI,0xa\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401540\n'
p277
S'55\n41 56\n53\n89 f5\n48 89 fb\nc7 05 5d 18 21 00 00 00 00 00\n8b 3d 7b 68 20 00\ne8 22 fc ff ff\n48 8b 3d 33 68 20 00\n48 8b 35 dc 67 20 00\ne8 5f ea ff ff\n8b 05 39 18 21 00\n03 05 2b 68 20 00\n89 05 2d 18 21 00\n29 c5\n89 ef\ne8 f4 fb ff ff\n48 8b 6b 20\n4c 8d 75 d8\n48 89 df\ne8 54 00 00 00\n49 39 de\n74 28\n48 83 c3 28\n66 66 2e 0f 1f 84 00 00 00 00 00\n8b 7b e4\ne8 c8 fb ff ff\n48 89 df\ne8 30 00 00 00\n48 83 c3 28\n48 39 dd\n75 e7\n8b 05 e1 17 21 00\n89 05 fb 67 20 00\nbf 0a 00 00 00\n5b\n41 5e\n5d\ne9 3d ea ff ff\n'
p278
S'.text:0000000000402a60\n.text:0000000000402a61\n.text:0000000000402a63\n.text:0000000000402a64\n.text:0000000000402a66\n.text:0000000000402a69\n.text:0000000000402a73\n.text:0000000000402a79\n.text:0000000000402a7e\n.text:0000000000402a85\n.text:0000000000402a8c\n.text:0000000000402a91\n.text:0000000000402a97\n.text:0000000000402a9d\n.text:0000000000402aa3\n.text:0000000000402aa5\n.text:0000000000402aa7\n.text:0000000000402aac\n.text:0000000000402ab0\n.text:0000000000402ab4\n.text:0000000000402ab7\n.text:0000000000402abc\n.text:0000000000402abf\n.text:0000000000402ac1\n.text:0000000000402ac5\n.text:0000000000402ad0\n.text:0000000000402ad3\n.text:0000000000402ad8\n.text:0000000000402adb\n.text:0000000000402ae0\n.text:0000000000402ae4\n.text:0000000000402ae7\n.text:0000000000402ae9\n.text:0000000000402aef\n.text:0000000000402af5\n.text:0000000000402afa\n.text:0000000000402afb\n.text:0000000000402afd\n.text:0000000000402afe\n'
p279
tp280
sS'quotearg_colon'
p281
(S'\n__stdcall quotearg_colon(char * arg)\n'
p282
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p283
S'MOV ESI,0x3a\nJMP 0x00403fe0\n'
p284
S'be 3a 00 00 00\neb e9\n'
p285
S'.text:0000000000403ff0\n.text:0000000000403ff5\n'
p286
tp287
sS'mbrtowc'
p288
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p289
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_00609098)();\u000a  return sVar1;\u000a}\u000a\u000a
p290
S'JMP qword ptr [0x00609098]\n'
p291
S'ff 25 52 7c 20 00\n'
p292
S'.plt:0000000000401440\n'
p293
tp294
sS'xstrtoumax'
p295
(S'\n__stdcall xstrtoumax(char * s, char * * ptr, uintmax_t * val, char * valid_suffixes)\n'
p296
V\u000astrtol_error xstrtoumax(char *s,char **ptr,uintmax_t *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  byte *pbVar8;\u000a  strtol_error sVar9;\u000a  strtol_error sVar10;\u000a  long lVar11;\u000a  char *__s;\u000a  char **__endptr;\u000a  uintmax_t local_48;\u000a  uintmax_t *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)");\u000a  }\u000a  local_40 = (uintmax_t *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar8 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar8;\u000a    pbVar8 = pbVar8 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoumax(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar9 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar9 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar9 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar10 = sVar9;\u000a    if (__s == (char *)0x0) goto LAB_00404f76;\u000a  }\u000a  pcVar6 = *__endptr;\u000a  sVar10 = sVar9;\u000a  if (*pcVar6 == 0) goto LAB_00404f76;\u000a  pcVar7 = strchr(__s,(int)*pcVar6);\u000a  if (pcVar7 == (char *)0x0) goto switchD_00404ea5_caseD_43;\u000a  pcVar7 = strchr(__s,0x30);\u000a  if (pcVar7 == (char *)0x0) {\u000aLAB_00404e83:\u000a    lVar11 = 1;\u000a  }\u000a  else {\u000a    cVar2 = pcVar6[1];\u000a    if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a      lVar11 = 2;\u000a    }\u000a    else {\u000a      if (cVar2 != 'i') goto LAB_00404e83;\u000a      lVar11 = (ulong)(pcVar6[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_00404f57;\u000a  default:\u000aswitchD_00404ea5_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'P':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Y':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Z':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'b':\u000a    goto LAB_00404f57;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_00404f57:\u000a    sVar3 = bkm_scale(&local_48);\u000a  }\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar10 = sVar3 | sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar10 = sVar3 | sVar9;\u000a  }\u000aLAB_00404f76:\u000a  *local_40 = local_48;\u000a  return sVar10;\u000a}\u000a\u000a
p297
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x00404f93\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x00401370\nMOV R15,RAX\nMOV dword ptr [R15],0x0\nCALL 0x004016c0\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x00404d90\nTEST RBX,RBX\nLEA R13,[RSP + 0x10]\nCMOVNZ R13,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x00404f82\nMOV RDI,RBP\nMOV RSI,R13\nMOV EDX,R14D\nCALL 0x00401650\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R13]\nCMP RAX,RBP\nJZ 0x00404df0\nMOV EAX,dword ptr [R15]\nTEST EAX,EAX\nJZ 0x00404e21\nCMP EAX,0x22\nJNZ 0x00404f82\nMOV EBX,0x1\nTEST R12,R12\nJNZ 0x00404e2c\nJMP 0x00404f76\nTEST R12,R12\nJZ 0x00404f82\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x00404f82\nMOV RDI,R12\nCALL 0x00401450\nTEST RAX,RAX\nJZ 0x00404f82\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x00404e2c\nXOR EBX,EBX\nTEST R12,R12\nJZ 0x00404f76\nMOV RBP,qword ptr [R13]\nMOVSX ESI,byte ptr [RBP]\nTEST ESI,ESI\nJZ 0x00404f76\nMOV RDI,R12\nCALL 0x00401450\nTEST RAX,RAX\nJZ 0x00404ebe\nMOV ESI,0x30\nMOV RDI,R12\nCALL 0x00401450\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x00404e83\nMOVSX EAX,byte ptr [RBP + 0x1]\nCMP EAX,0x42\nJZ 0x00404e8a\nCMP EAX,0x44\nJZ 0x00404e8a\nCMP EAX,0x69\nJNZ 0x00404e83\nXOR EAX,EAX\nCMP byte ptr [RBP + 0x2],0x42\nSETZ AL\nLEA RBP,[RAX + RAX*0x1 + 0x1]\nJMP 0x00404e94\nMOV EBP,0x1\nJMP 0x00404e94\nMOV ESI,0x3e8\nMOV EBP,0x2\nMOV RAX,qword ptr [R13]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x00404ebe\nXOR EAX,EAX\nJMP qword ptr [0x406980 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nCALL 0x00404fe0\nJMP 0x00404f5c\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x00404f82\nMOV RDI,RSP\nMOV EDX,0x1\nCALL 0x00404fe0\nJMP 0x00404f5c\nMOV RDI,RSP\nMOV EDX,0x2\nCALL 0x00404fe0\nJMP 0x00404f5c\nMOV RDI,RSP\nMOV EDX,0x4\nCALL 0x00404fe0\nJMP 0x00404f5c\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x00404f57\nMOV RDI,RSP\nMOV EDX,0x6\nCALL 0x00404fe0\nJMP 0x00404f5c\nMOV RDI,RSP\nMOV EDX,0x5\nCALL 0x00404fe0\nJMP 0x00404f5c\nMOV RDI,RSP\nMOV EDX,0x8\nCALL 0x00404fe0\nJMP 0x00404f5c\nMOV RDI,RSP\nMOV EDX,0x7\nCALL 0x00404fe0\nJMP 0x00404f5c\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x00404f57\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x00404fb0\nOR EAX,EBX\nMOV RCX,qword ptr [R13]\nLEA RDX,[RCX + RBP*0x1]\nMOV qword ptr [R13],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + RBP*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x406b30\nMOV ESI,0x406b56\nMOV EDX,0x60\nMOV ECX,0x406b66\nCALL 0x00401480\n'
p298
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c4\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 2f 02 00 00\n48 89 4c 24 08\ne8 02 c6 ff ff\n49 89 c7\n41 c7 07 00 00 00 00\ne8 43 c9 ff ff\n48 8b 08\n48 89 ea\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 6c 24 10\n4c 0f 45 eb\nbb 04 00 00 00\n3c 2d\n0f 84 cc 01 00 00\n48 89 ef\n4c 89 ee\n44 89 f2\ne8 8c c8 ff ff\n48 89 04 24\n49 8b 45 00\n48 39 e8\n74 1f\n41 8b 07\n85 c0\n74 49\n83 f8 22\n0f 85 a1 01 00 00\nbb 01 00 00 00\n4d 85 e4\n75 41\ne9 86 01 00 00\n4d 85 e4\n0f 84 89 01 00 00\n0f be 30\n85 f6\n0f 84 7e 01 00 00\n4c 89 e7\ne8 44 c6 ff ff\n48 85 c0\n0f 84 6d 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 e4\n0f 84 4a 01 00 00\n49 8b 6d 00\n0f be 75 00\n85 f6\n0f 84 3a 01 00 00\n4c 89 e7\ne8 0c c6 ff ff\n48 85 c0\n74 75\nbe 30 00 00 00\n4c 89 e7\ne8 fa c5 ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 45 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7d 02 42\n0f 94 c0\n48 8d 6c 00 01\neb 11\nbd 01 00 00 00\neb 0a\nbe e8 03 00 00\nbd 02 00 00 00\n49 8b 45 00\n0f be 08\n83 c1 be\n83 f9 35\n77 1b\n31 c0\nff 24 cd 80 69 40 00\n48 89 e7\nba 03 00 00 00\ne8 27 01 00 00\ne9 9e 00 00 00\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 b0 00 00 00\n48 89 e7\nba 01 00 00 00\ne8 01 01 00 00\neb 7b\n48 89 e7\nba 02 00 00 00\ne8 f2 00 00 00\neb 6c\n48 89 e7\nba 04 00 00 00\ne8 e3 00 00 00\neb 5d\n48 89 e7\nbe 00 04 00 00\neb 4e\n48 89 e7\nba 06 00 00 00\ne8 ca 00 00 00\neb 44\n48 89 e7\nba 05 00 00 00\ne8 bb 00 00 00\neb 35\n48 89 e7\nba 08 00 00 00\ne8 ac 00 00 00\neb 26\n48 89 e7\nba 07 00 00 00\ne8 9d 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 54 00 00 00\n09 d8\n49 8b 4d 00\n48 8d 14 29\n49 89 55 00\n89 c3\n83 cb 02\n80 3c 29 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 30 6b 40 00\nbe 56 6b 40 00\nba 60 00 00 00\nb9 66 6b 40 00\ne8 d4 c4 ff ff\n'
p299
S'.text:0000000000404d40\n.text:0000000000404d41\n.text:0000000000404d43\n.text:0000000000404d45\n.text:0000000000404d47\n.text:0000000000404d49\n.text:0000000000404d4a\n.text:0000000000404d4e\n.text:0000000000404d51\n.text:0000000000404d54\n.text:0000000000404d57\n.text:0000000000404d5a\n.text:0000000000404d5e\n.text:0000000000404d64\n.text:0000000000404d69\n.text:0000000000404d6e\n.text:0000000000404d71\n.text:0000000000404d78\n.text:0000000000404d7d\n.text:0000000000404d80\n.text:0000000000404d83\n.text:0000000000404d90\n.text:0000000000404d93\n.text:0000000000404d96\n.text:0000000000404d9b\n.text:0000000000404d9d\n.text:0000000000404da0\n.text:0000000000404da5\n.text:0000000000404da9\n.text:0000000000404dae\n.text:0000000000404db0\n.text:0000000000404db6\n.text:0000000000404db9\n.text:0000000000404dbc\n.text:0000000000404dbf\n.text:0000000000404dc4\n.text:0000000000404dc8\n.text:0000000000404dcc\n.text:0000000000404dcf\n.text:0000000000404dd1\n.text:0000000000404dd4\n.text:0000000000404dd6\n.text:0000000000404dd8\n.text:0000000000404ddb\n.text:0000000000404de1\n.text:0000000000404de6\n.text:0000000000404de9\n.text:0000000000404deb\n.text:0000000000404df0\n.text:0000000000404df3\n.text:0000000000404df9\n.text:0000000000404dfc\n.text:0000000000404dfe\n.text:0000000000404e04\n.text:0000000000404e07\n.text:0000000000404e0c\n.text:0000000000404e0f\n.text:0000000000404e15\n.text:0000000000404e1d\n.text:0000000000404e1f\n.text:0000000000404e21\n.text:0000000000404e23\n.text:0000000000404e26\n.text:0000000000404e2c\n.text:0000000000404e30\n.text:0000000000404e34\n.text:0000000000404e36\n.text:0000000000404e3c\n.text:0000000000404e3f\n.text:0000000000404e44\n.text:0000000000404e47\n.text:0000000000404e49\n.text:0000000000404e4e\n.text:0000000000404e51\n.text:0000000000404e56\n.text:0000000000404e5b\n.text:0000000000404e5e\n.text:0000000000404e60\n.text:0000000000404e64\n.text:0000000000404e67\n.text:0000000000404e69\n.text:0000000000404e6c\n.text:0000000000404e6e\n.text:0000000000404e71\n.text:0000000000404e73\n.text:0000000000404e75\n.text:0000000000404e79\n.text:0000000000404e7c\n.text:0000000000404e81\n.text:0000000000404e83\n.text:0000000000404e88\n.text:0000000000404e8a\n.text:0000000000404e8f\n.text:0000000000404e94\n.text:0000000000404e98\n.text:0000000000404e9b\n.text:0000000000404e9e\n.text:0000000000404ea1\n.text:0000000000404ea3\n.text:0000000000404ea5\n.text:0000000000404eac\n.text:0000000000404eaf\n.text:0000000000404eb4\n.text:0000000000404eb9\n.text:0000000000404ebe\n.text:0000000000404ec2\n.text:0000000000404ec7\n.text:0000000000404eca\n.text:0000000000404ecd\n.text:0000000000404ed2\n.text:0000000000404ed5\n.text:0000000000404eda\n.text:0000000000404edf\n.text:0000000000404ee1\n.text:0000000000404ee4\n.text:0000000000404ee9\n.text:0000000000404eee\n.text:0000000000404ef0\n.text:0000000000404ef3\n.text:0000000000404ef8\n.text:0000000000404efd\n.text:0000000000404eff\n.text:0000000000404f02\n.text:0000000000404f07\n.text:0000000000404f09\n.text:0000000000404f0c\n.text:0000000000404f11\n.text:0000000000404f16\n.text:0000000000404f18\n.text:0000000000404f1b\n.text:0000000000404f20\n.text:0000000000404f25\n.text:0000000000404f27\n.text:0000000000404f2a\n.text:0000000000404f2f\n.text:0000000000404f34\n.text:0000000000404f36\n.text:0000000000404f39\n.text:0000000000404f3e\n.text:0000000000404f43\n.text:0000000000404f45\n.text:0000000000404f48\n.text:0000000000404f4d\n.text:0000000000404f4f\n.text:0000000000404f52\n.text:0000000000404f57\n.text:0000000000404f5c\n.text:0000000000404f5e\n.text:0000000000404f62\n.text:0000000000404f66\n.text:0000000000404f6a\n.text:0000000000404f6c\n.text:0000000000404f6f\n.text:0000000000404f73\n.text:0000000000404f76\n.text:0000000000404f7a\n.text:0000000000404f7f\n.text:0000000000404f82\n.text:0000000000404f84\n.text:0000000000404f88\n.text:0000000000404f89\n.text:0000000000404f8b\n.text:0000000000404f8d\n.text:0000000000404f8f\n.text:0000000000404f91\n.text:0000000000404f92\n.text:0000000000404f93\n.text:0000000000404f98\n.text:0000000000404f9d\n.text:0000000000404fa2\n.text:0000000000404fa7\n'
p300
tp301
sS'rpl_fflush'
p302
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p303
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_00609130)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p304
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0040510d\nMOV RDI,RBX\nCALL 0x004015a0\nTEST EAX,EAX\nJZ 0x0040510d\nMOV RDI,RBX\nCALL 0x00405120\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401570\n'
p305
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 9f c4 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 5a c4 ff ff\n'
p306
S'.text:00000000004050f0\n.text:00000000004050f1\n.text:00000000004050f4\n.text:00000000004050f7\n.text:00000000004050f9\n.text:00000000004050fc\n.text:0000000000405101\n.text:0000000000405103\n.text:0000000000405105\n.text:0000000000405108\n.text:000000000040510d\n.text:0000000000405110\n.text:0000000000405111\n'
p307
tp308
sS'__assert_fail'
p309
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p310
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_006090b8)();\u000a  return;\u000a}\u000a\u000a
p311
S'JMP qword ptr [0x006090b8]\n'
p312
S'ff 25 32 7c 20 00\n'
p313
S'.plt:0000000000401480\n'
p314
tp315
sS'setlocale'
p316
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p317
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_00609168)();\u000a  return pcVar1;\u000a}\u000a\u000a
p318
S'JMP qword ptr [0x00609168]\n'
p319
S'ff 25 82 7b 20 00\n'
p320
S'.plt:00000000004015e0\n'
p321
tp322
sS'c_toupper'
p323
(S'\n__stdcall c_toupper()\n'
p324
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p325
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p326
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p327
S'.text:00000000004052f0\n.text:00000000004052f3\n.text:00000000004052f6\n.text:00000000004052f9\n.text:00000000004052fc\n'
p328
tp329
sS'bindtextdomain'
p330
(S'\n__stdcall bindtextdomain()\n'
p331
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_00609070)();\u000a  return;\u000a}\u000a\u000a
p332
S'JMP qword ptr [0x00609070]\n'
p333
S'ff 25 7a 7c 20 00\n'
p334
S'.plt:00000000004013f0\n'
p335
tp336
sS'set_char_quoting'
p337
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p338
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p339
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x6142f0\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p340
S'89 f1\n48 85 ff\nbe f0 42 61 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p341
S'.text:0000000000402d70\n.text:0000000000402d72\n.text:0000000000402d75\n.text:0000000000402d7a\n.text:0000000000402d7e\n.text:0000000000402d80\n.text:0000000000402d83\n.text:0000000000402d87\n.text:0000000000402d8c\n.text:0000000000402d8f\n.text:0000000000402d91\n.text:0000000000402d93\n.text:0000000000402d96\n.text:0000000000402d98\n.text:0000000000402d9b\n.text:0000000000402d9d\n.text:0000000000402da0\n.text:0000000000402da5\n'
p342
tp343
sS'quotearg_n'
p344
(S'\n__stdcall quotearg_n(char * arg)\n'
p345
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p346
S'MOV RDX,-0x1\nMOV ECX,0x6142f0\nJMP 0x00403c60\n'
p347
S'48 c7 c2 ff ff ff ff\nb9 f0 42 61 00\neb 02\n'
p348
S'.text:0000000000403c50\n.text:0000000000403c57\n.text:0000000000403c5c\n'
p349
tp350
sS'mbsinit'
p351
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p352
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_006091c8)();\u000a  return iVar1;\u000a}\u000a\u000a
p353
S'JMP qword ptr [0x006091c8]\n'
p354
S'ff 25 22 7b 20 00\n'
p355
S'.plt:00000000004016a0\n'
p356
tp357
sS'dcgettext'
p358
(S'\n__stdcall dcgettext()\n'
p359
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_00609078)();\u000a  return;\u000a}\u000a\u000a
p360
S'JMP qword ptr [0x00609078]\n'
p361
S'ff 25 72 7c 20 00\n'
p362
S'.plt:0000000000401400\n'
p363
tp364
sS'close_stream'
p365
(S'\n__stdcall close_stream(FILE * stream)\n'
p366
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p367
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x004013b0\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00401500\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00405070\nTEST EBP,EBP\nJZ 0x0040533b\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x0040535f\nCALL 0x00401370\nMOV dword ptr [RAX],0x0\nJMP 0x0040535f\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x0040535f\nTEST CL,CL\nJNZ 0x0040535f\nCALL 0x00401370\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p368
S'55\n41 56\n53\n48 89 fb\ne8 a4 c0 ff ff\n49 89 c6\n48 89 df\ne8 e9 c1 ff ff\n89 c5\n48 89 df\ne8 4f fd ff ff\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 3d c0 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 1e c0 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p369
S'.text:0000000000405300\n.text:0000000000405301\n.text:0000000000405303\n.text:0000000000405304\n.text:0000000000405307\n.text:000000000040530c\n.text:000000000040530f\n.text:0000000000405312\n.text:0000000000405317\n.text:0000000000405319\n.text:000000000040531c\n.text:0000000000405321\n.text:0000000000405323\n.text:0000000000405325\n.text:000000000040532a\n.text:000000000040532c\n.text:000000000040532e\n.text:0000000000405333\n.text:0000000000405339\n.text:000000000040533b\n.text:000000000040533d\n.text:0000000000405340\n.text:0000000000405342\n.text:0000000000405344\n.text:0000000000405347\n.text:0000000000405349\n.text:000000000040534b\n.text:000000000040534d\n.text:0000000000405352\n.text:0000000000405354\n.text:0000000000405357\n.text:000000000040535c\n.text:000000000040535f\n.text:0000000000405361\n.text:0000000000405362\n.text:0000000000405364\n.text:0000000000405365\n'
p370
tp371
sS'quotearg_colon_mem'
p372
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p373
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p374
S'MOV EDX,0x3a\nJMP 0x00403f70\n'
p375
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p376
S'.text:0000000000404000\n.text:0000000000404005\n'
p377
tp378
sS'quotearg_free'
p379
(S'\n__stdcall quotearg_free()\n'
p380
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p381
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x00609200]\nCMP dword ptr [0x00609208],0x2\nJC 0x00403bfa\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00401350\nINC RBX\nMOV EAX,dword ptr [0x00609208]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00403be0\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x614330\nCMP RDI,RAX\nJZ 0x00403c23\nCALL 0x00401350\nMOV qword ptr [0x00609210],0x100\nMOV qword ptr [0x00609218],0x614330\nMOV EAX,0x609210\nCMP R14,RAX\nJZ 0x00403c40\nMOV RDI,R14\nCALL 0x00401350\nMOV qword ptr [0x00609200],0x609210\nMOV dword ptr [0x00609208],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p382
S'41 57\n41 56\n53\n4c 8b 35 34 56 20 00\n83 3d 35 56 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 68 d7 ff ff\n48 ff c3\n8b 05 17 56 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 30 43 61 00\n48 39 c7\n74 1b\ne8 43 d7 ff ff\n48 c7 05 f8 55 20 00 00 01 00 00\n48 c7 05 f5 55 20 00 30 43 61 00\nb8 10 92 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 1b d7 ff ff\n48 c7 05 c0 55 20 00 10 92 60 00\nc7 05 be 55 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p383
S'.text:0000000000403bc0\n.text:0000000000403bc2\n.text:0000000000403bc4\n.text:0000000000403bc5\n.text:0000000000403bcc\n.text:0000000000403bd3\n.text:0000000000403bd5\n.text:0000000000403bd9\n.text:0000000000403bde\n.text:0000000000403be0\n.text:0000000000403be3\n.text:0000000000403be8\n.text:0000000000403beb\n.text:0000000000403bf1\n.text:0000000000403bf5\n.text:0000000000403bf8\n.text:0000000000403bfa\n.text:0000000000403bfe\n.text:0000000000403c03\n.text:0000000000403c06\n.text:0000000000403c08\n.text:0000000000403c0d\n.text:0000000000403c18\n.text:0000000000403c23\n.text:0000000000403c28\n.text:0000000000403c2b\n.text:0000000000403c2d\n.text:0000000000403c30\n.text:0000000000403c35\n.text:0000000000403c40\n.text:0000000000403c4a\n.text:0000000000403c4b\n.text:0000000000403c4d\n.text:0000000000403c4f\n'
p384
tp385
sS'quotearg_mem'
p386
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p387
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p388
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00403e20\n'
p389
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p390
S'.text:0000000000403e40\n.text:0000000000403e43\n.text:0000000000403e46\n.text:0000000000403e48\n.text:0000000000403e4b\n.text:0000000000403e4e\n'
p391
tp392
sS'xcalloc'
p393
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p394
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p395
S'PUSH RAX\nCALL 0x00405020\nTEST RAX,RAX\nJZ 0x00404bad\nPOP RCX\nRET\nCALL 0x00404c10\n'
p396
S'50\ne8 7a 04 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p397
S'.text:0000000000404ba0\n.text:0000000000404ba1\n.text:0000000000404ba6\n.text:0000000000404ba9\n.text:0000000000404bab\n.text:0000000000404bac\n.text:0000000000404bad\n'
p398
tp399
sS'deregister_tm_clones'
p400
(S'\n__stdcall deregister_tm_clones()\n'
p401
V\u000a/* WARNING: Removing unreachable block (ram,0x00401715) */\u000a/* WARNING: Removing unreachable block (ram,0x0040171f) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p402
S'MOV EAX,0x60925f\nPUSH RBP\nSUB RAX,0x609258\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00401730\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401730\nPOP RBP\nMOV EDI,0x609258\nJMP RAX\nPOP RBP\nRET\n'
p403
S'b8 5f 92 60 00\n55\n48 2d 58 92 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 58 92 60 00\nff e0\n5d\nc3\n'
p404
S'.text:0000000000401700\n.text:0000000000401705\n.text:0000000000401706\n.text:000000000040170c\n.text:0000000000401710\n.text:0000000000401713\n.text:0000000000401715\n.text:000000000040171a\n.text:000000000040171d\n.text:000000000040171f\n.text:0000000000401720\n.text:0000000000401725\n.text:0000000000401730\n.text:0000000000401731\n'
p405
tp406
sS'xnumtoumax'
p407
(S'\n__stdcall xnumtoumax(char * n_str, uintmax_t min, uintmax_t max, char * suffixes, char * err)\n'
p408
V\u000auintmax_t xnumtoumax(char *n_str,uintmax_t min,uintmax_t max,char *suffixes,char *err)\u000a\u000a{\u000a  char *pcVar1;\u000a  strtol_error sVar2;\u000a  char *in_RAX;\u000a  int *piVar3;\u000a  uint *puVar4;\u000a  int iVar5;\u000a  uint uVar6;\u000a  uint uVar7;\u000a  uint in_stack_00000008;\u000a  char *local_38;\u000a  \u000a  local_38 = in_RAX;\u000a  sVar2 = xstrtoumax(n_str,(char **)0x0,(uintmax_t *)(min & 0xffffffff),(char *)&local_38);\u000a  pcVar1 = local_38;\u000a  if (sVar2 == LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW) {\u000a    piVar3 = __errno_location();\u000a    *piVar3 = 0;\u000a  }\u000a  else {\u000a    if (sVar2 == LONGINT_OVERFLOW) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0x4b;\u000a    }\u000a    else {\u000a      if (sVar2 == LONGINT_OK) {\u000a        if ((max <= local_38) && (local_38 <= suffixes)) {\u000a          return (uintmax_t)local_38;\u000a        }\u000a        piVar3 = __errno_location();\u000a        iVar5 = 0x22;\u000a        if ((char *)0x3fffffff < pcVar1) {\u000a          iVar5 = 0x4b;\u000a        }\u000a        *piVar3 = iVar5;\u000a      }\u000a    }\u000a  }\u000a  uVar7 = 1;\u000a  if (in_stack_00000008 != 0) {\u000a    uVar7 = in_stack_00000008;\u000a  }\u000a  puVar4 = (uint *)__errno_location();\u000a  uVar6 = *puVar4;\u000a  if (uVar6 == 0x16) {\u000a    uVar6 = 0;\u000a  }\u000a  quote(n_str);\u000a  error((ulong)uVar7,(ulong)uVar6,"%s: %s");\u000a  return (uintmax_t)local_38;\u000a}\u000a\u000a
p409
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,R9\nMOV R15,RCX\nMOV R12,RDX\nMOV EAX,ESI\nMOV R13,RDI\nMOV RCX,RSP\nXOR ESI,ESI\nMOV EDX,EAX\nCALL 0x00404d40\nCMP EAX,0x3\nJZ 0x00404c9e\nCMP EAX,0x1\nJZ 0x00404cab\nTEST EAX,EAX\nJNZ 0x00404cb6\nMOV RBX,qword ptr [RSP]\nCMP RBX,R12\nJC 0x00404c81\nCMP RBX,R15\nJBE 0x00404cf1\nCALL 0x00401370\nCMP RBX,0x3fffffff\nMOV ECX,0x4b\nMOV EDX,0x22\nCMOVA EDX,ECX\nMOV dword ptr [RAX],EDX\nJMP 0x00404cb6\nCALL 0x00401370\nMOV dword ptr [RAX],0x0\nJMP 0x00404cb6\nCALL 0x00401370\nMOV dword ptr [RAX],0x4b\nMOV EAX,dword ptr [RSP + 0x40]\nTEST EAX,EAX\nMOV EBP,0x1\nCMOVNZ EBP,EAX\nCALL 0x00401370\nMOV EBX,dword ptr [RAX]\nXOR EAX,EAX\nCMP EBX,0x16\nCMOVZ EBX,EAX\nMOV RDI,R13\nCALL 0x00404150\nMOV R8,RAX\nMOV EDX,0x406072\nXOR EAX,EAX\nMOV EDI,EBP\nMOV ESI,EBX\nMOV RCX,R14\nCALL 0x00401610\nMOV RAX,qword ptr [RSP]\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p410
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 ce\n49 89 cf\n49 89 d4\n89 f0\n49 89 fd\n48 89 e1\n31 f6\n89 c2\ne8 db 00 00 00\n83 f8 03\n74 34\n83 f8 01\n74 3c\n85 c0\n75 43\n48 8b 1c 24\n4c 39 e3\n72 05\n4c 39 fb\n76 70\ne8 ea c6 ff ff\n48 81 fb ff ff ff 3f\nb9 4b 00 00 00\nba 22 00 00 00\n0f 47 d1\n89 10\neb 18\ne8 cd c6 ff ff\nc7 00 00 00 00 00\neb 0b\ne8 c0 c6 ff ff\nc7 00 4b 00 00 00\n8b 44 24 40\n85 c0\nbd 01 00 00 00\n0f 45 e8\ne8 a7 c6 ff ff\n8b 18\n31 c0\n83 fb 16\n0f 44 d8\n4c 89 ef\ne8 75 f4 ff ff\n49 89 c0\nba 72 60 40 00\n31 c0\n89 ef\n89 de\n4c 89 f1\ne8 1f c9 ff ff\n48 8b 04 24\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p411
S'.text:0000000000404c40\n.text:0000000000404c41\n.text:0000000000404c43\n.text:0000000000404c45\n.text:0000000000404c47\n.text:0000000000404c49\n.text:0000000000404c4a\n.text:0000000000404c4b\n.text:0000000000404c4e\n.text:0000000000404c51\n.text:0000000000404c54\n.text:0000000000404c56\n.text:0000000000404c59\n.text:0000000000404c5c\n.text:0000000000404c5e\n.text:0000000000404c60\n.text:0000000000404c65\n.text:0000000000404c68\n.text:0000000000404c6a\n.text:0000000000404c6d\n.text:0000000000404c6f\n.text:0000000000404c71\n.text:0000000000404c73\n.text:0000000000404c77\n.text:0000000000404c7a\n.text:0000000000404c7c\n.text:0000000000404c7f\n.text:0000000000404c81\n.text:0000000000404c86\n.text:0000000000404c8d\n.text:0000000000404c92\n.text:0000000000404c97\n.text:0000000000404c9a\n.text:0000000000404c9c\n.text:0000000000404c9e\n.text:0000000000404ca3\n.text:0000000000404ca9\n.text:0000000000404cab\n.text:0000000000404cb0\n.text:0000000000404cb6\n.text:0000000000404cba\n.text:0000000000404cbc\n.text:0000000000404cc1\n.text:0000000000404cc4\n.text:0000000000404cc9\n.text:0000000000404ccb\n.text:0000000000404ccd\n.text:0000000000404cd0\n.text:0000000000404cd3\n.text:0000000000404cd6\n.text:0000000000404cdb\n.text:0000000000404cde\n.text:0000000000404ce3\n.text:0000000000404ce5\n.text:0000000000404ce7\n.text:0000000000404ce9\n.text:0000000000404cec\n.text:0000000000404cf1\n.text:0000000000404cf5\n.text:0000000000404cf9\n.text:0000000000404cfa\n.text:0000000000404cfc\n.text:0000000000404cfe\n.text:0000000000404d00\n.text:0000000000404d02\n.text:0000000000404d03\n'
p412
tp413
sS'clear_ungetc_buffer_preserving_position'
p414
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p415
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p416
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00405127\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00405140\n'
p417
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p418
S'.text:0000000000405120\n.text:0000000000405124\n.text:0000000000405126\n.text:0000000000405127\n.text:0000000000405129\n.text:000000000040512e\n'
p419
tp420
sS'xnmalloc'
p421
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p422
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p423
S'MOV RAX,RDI\nMUL RSI\nJO 0x00404a71\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00404a80\nPUSH RAX\nCALL 0x00404c10\n'
p424
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p425
S'.text:0000000000404a60\n.text:0000000000404a63\n.text:0000000000404a66\n.text:0000000000404a68\n.text:0000000000404a6c\n.text:0000000000404a6f\n.text:0000000000404a71\n.text:0000000000404a72\n'
p426
tp427
sS'quotearg_custom'
p428
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p429
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p430
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00404060\n'
p431
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p432
S'.text:00000000004040e0\n.text:00000000004040e3\n.text:00000000004040e6\n.text:00000000004040e9\n.text:00000000004040eb\n.text:00000000004040ee\n.text:00000000004040f1\n.text:00000000004040f4\n'
p433
tp434
sS'free'
p435
(S'\n__stdcall free(void * __ptr)\n'
p436
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_00609020)();\u000a  return;\u000a}\u000a\u000a
p437
S'JMP qword ptr [0x00609020]\n'
p438
S'ff 25 ca 7c 20 00\n'
p439
S'.plt:0000000000401350\n'
p440
tp441
sS'close'
p442
(S'\n__stdcall close(int __fd)\n'
p443
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_006090d0)();\u000a  return iVar1;\u000a}\u000a\u000a
p444
S'JMP qword ptr [0x006090d0]\n'
p445
S'ff 25 1a 7c 20 00\n'
p446
S'.plt:00000000004014b0\n'
p447
tp448
sS'getenv'
p449
(S'\n__stdcall getenv(char * __name)\n'
p450
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_00609018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p451
S'JMP qword ptr [0x00609018]\n'
p452
S'ff 25 d2 7c 20 00\n'
p453
S'.plt:0000000000401340\n'
p454
tp455
sS'putchar_unlocked'
p456
(S'\n__stdcall putchar_unlocked(int __c)\n'
p457
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint putchar_unlocked(int __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_putchar_unlocked_00609118)();\u000a  return iVar1;\u000a}\u000a\u000a
p458
S'JMP qword ptr [0x00609118]\n'
p459
S'ff 25 d2 7b 20 00\n'
p460
S'.plt:0000000000401540\n'
p461
tp462
sS'quotearg_char'
p463
(S'\n__stdcall quotearg_char(char * arg)\n'
p464
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p465
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00403f70\n'
p466
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p467
S'.text:0000000000403fe0\n.text:0000000000403fe2\n.text:0000000000403fe9\n.text:0000000000403feb\n'
p468
tp469
sS'fopen'
p470
(S'\n__stdcall fopen(char * __filename, char * __modes)\n'
p471
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fopen(char *__filename,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fopen_00609198)();\u000a  return pFVar1;\u000a}\u000a\u000a
p472
S'JMP qword ptr [0x00609198]\n'
p473
S'ff 25 52 7b 20 00\n'
p474
S'.plt:0000000000401640\n'
p475
tp476
sS'malloc'
p477
(S'\n__stdcall malloc(size_t __size)\n'
p478
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_00609128)();\u000a  return pvVar1;\u000a}\u000a\u000a
p479
S'JMP qword ptr [0x00609128]\n'
p480
S'ff 25 c2 7b 20 00\n'
p481
S'.plt:0000000000401560\n'
p482
tp483
sS'c_tolower'
p484
(S'\n__stdcall c_tolower()\n'
p485
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p486
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p487
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p488
S'.text:00000000004052e0\n.text:00000000004052e3\n.text:00000000004052e6\n.text:00000000004052e9\n.text:00000000004052ec\n'
p489
tp490
sS'rpl_fseeko'
p491
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p492
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_00609190)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p493
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00405168\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00405168\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x0040517a\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401630\nMOV RDI,RBX\nCALL 0x00401550\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00401470\nCMP RAX,-0x1\nJZ 0x004051a3\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x004051a8\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p494
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 b6 c4 ff ff\n48 89 df\ne8 ce c3 ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 e1 c2 ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p495
S'.text:0000000000405140\n.text:0000000000405141\n.text:0000000000405143\n.text:0000000000405144\n.text:0000000000405147\n.text:000000000040514a\n.text:000000000040514d\n.text:0000000000405151\n.text:0000000000405155\n.text:0000000000405157\n.text:000000000040515b\n.text:000000000040515f\n.text:0000000000405161\n.text:0000000000405166\n.text:0000000000405168\n.text:000000000040516b\n.text:000000000040516e\n.text:0000000000405171\n.text:0000000000405172\n.text:0000000000405174\n.text:0000000000405175\n.text:000000000040517a\n.text:000000000040517d\n.text:0000000000405182\n.text:0000000000405184\n.text:0000000000405187\n.text:000000000040518a\n.text:000000000040518f\n.text:0000000000405193\n.text:0000000000405195\n.text:0000000000405198\n.text:000000000040519f\n.text:00000000004051a1\n.text:00000000004051a3\n.text:00000000004051a8\n.text:00000000004051a9\n.text:00000000004051ab\n.text:00000000004051ac\n'
p496
tp497
sS'getopt_long'
p498
(S'\n__stdcall getopt_long()\n'
p499
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_00609090)();\u000a  return;\u000a}\u000a\u000a
p500
S'JMP qword ptr [0x00609090]\n'
p501
S'ff 25 5a 7c 20 00\n'
p502
S'.plt:0000000000401430\n'
p503
tp504
sS'quote_n_mem'
p505
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p506
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p507
S'MOV ECX,0x609220\nJMP 0x00403c60\n'
p508
S'b9 20 92 60 00\ne9 36 fb ff ff\n'
p509
S'.text:0000000000404120\n.text:0000000000404125\n'
p510
tp511
sS'xstrdup'
p512
(S'\n__stdcall xstrdup(char * string)\n'
p513
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p514
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401420\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00404bc0\n'
p515
S'53\n48 89 fb\ne8 27 c8 ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p516
S'.text:0000000000404bf0\n.text:0000000000404bf1\n.text:0000000000404bf4\n.text:0000000000404bf9\n.text:0000000000404bfd\n.text:0000000000404c00\n.text:0000000000404c01\n'
p517
tp518
sS'c_ispunct'
p519
(S'\n__stdcall c_ispunct()\n'
p520
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p521
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00405282\nMOV AL,0x1\nJMP qword ptr [0x406bb8 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p522
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd b8 6b 40 00\nc3\n31 c0\nc3\n'
p523
S'.text:0000000000405270\n.text:0000000000405273\n.text:0000000000405276\n.text:0000000000405278\n.text:000000000040527a\n.text:0000000000405281\n.text:0000000000405282\n.text:0000000000405284\n'
p524
tp525
sS'quotearg_style'
p526
(S'\n__stdcall quotearg_style(char * arg)\n'
p527
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p528
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00403e50\n'
p529
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p530
S'.text:0000000000403f30\n.text:0000000000403f33\n.text:0000000000403f35\n.text:0000000000403f37\n.text:0000000000403f39\n.text:0000000000403f3c\n'
p531
tp532
sS'fscanf'
p533
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p534
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_006090c8)();\u000a  return iVar1;\u000a}\u000a\u000a
p535
S'JMP qword ptr [0x006090c8]\n'
p536
S'ff 25 22 7c 20 00\n'
p537
S'.plt:00000000004014a0\n'
p538
tp539
sS'emit_try_help'
p540
(S'\n__stdcall emit_try_help()\n'
p541
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p542
S'PUSH RBX\nMOV RBX,qword ptr [0x006092a0]\nXOR EDI,EDI\nMOV ESI,0x405de6\nMOV EDX,0x5\nCALL 0x00401400\nMOV RDX,RAX\nMOV RCX,qword ptr [0x006142e8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401690\n'
p543
S'53\n48 8b 1d c8 79 20 00\n31 ff\nbe e6 5d 40 00\nba 05 00 00 00\ne8 17 fb ff ff\n48 89 c2\n48 8b 0d f5 29 21 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 8d fd ff ff\n'
p544
S'.text:00000000004018d0\n.text:00000000004018d1\n.text:00000000004018d8\n.text:00000000004018da\n.text:00000000004018df\n.text:00000000004018e4\n.text:00000000004018e9\n.text:00000000004018ec\n.text:00000000004018f3\n.text:00000000004018f8\n.text:00000000004018fa\n.text:00000000004018fd\n.text:00000000004018fe\n'
p545
tp546
sS'memcpy'
p547
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p548
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_00609110)();\u000a  return pvVar1;\u000a}\u000a\u000a
p549
S'JMP qword ptr [0x00609110]\n'
p550
S'ff 25 da 7b 20 00\n'
p551
S'.plt:0000000000401530\n'
p552
tp553
sS'strrchr'
p554
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p555
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_006090a8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p556
S'JMP qword ptr [0x006090a8]\n'
p557
S'ff 25 42 7c 20 00\n'
p558
S'.plt:0000000000401460\n'
p559
tp560
sS'close_stdout_set_ignore_EPIPE'
p561
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p562
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p563
S'MOV byte ptr [0x006142e0],DIL\nRET\n'
p564
S'40 88 3d 79 17 21 00\nc3\n'
p565
S'.text:0000000000402b60\n.text:0000000000402b67\n'
p566
tp567
sS'quotearg_alloc_mem'
p568
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p569
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p570
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x6142f0\nCMOVNZ R12,RCX\nCALL 0x00401370\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00402e80\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00404b50\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00402e80\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x00403baa\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p571
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc f0 42 61 00\n4c 0f 45 e1\ne8 68 d8 ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 f1 0f 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p572
S'.text:0000000000403ad0\n.text:0000000000403ad1\n.text:0000000000403ad3\n.text:0000000000403ad5\n.text:0000000000403ad7\n.text:0000000000403ad9\n.text:0000000000403ada\n.text:0000000000403ade\n.text:0000000000403ae1\n.text:0000000000403ae6\n.text:0000000000403ae9\n.text:0000000000403aee\n.text:0000000000403af1\n.text:0000000000403af6\n.text:0000000000403af9\n.text:0000000000403aff\n.text:0000000000403b03\n.text:0000000000403b08\n.text:0000000000403b0d\n.text:0000000000403b0f\n.text:0000000000403b13\n.text:0000000000403b15\n.text:0000000000403b18\n.text:0000000000403b1c\n.text:0000000000403b21\n.text:0000000000403b25\n.text:0000000000403b2a\n.text:0000000000403b2e\n.text:0000000000403b30\n.text:0000000000403b32\n.text:0000000000403b35\n.text:0000000000403b38\n.text:0000000000403b3b\n.text:0000000000403b40\n.text:0000000000403b45\n.text:0000000000403b47\n.text:0000000000403b4c\n.text:0000000000403b50\n.text:0000000000403b53\n.text:0000000000403b57\n.text:0000000000403b5a\n.text:0000000000403b5f\n.text:0000000000403b62\n.text:0000000000403b66\n.text:0000000000403b6a\n.text:0000000000403b6d\n.text:0000000000403b70\n.text:0000000000403b75\n.text:0000000000403b7a\n.text:0000000000403b7d\n.text:0000000000403b82\n.text:0000000000403b87\n.text:0000000000403b89\n.text:0000000000403b8e\n.text:0000000000403b93\n.text:0000000000403b97\n.text:0000000000403b9a\n.text:0000000000403b9e\n.text:0000000000403ba3\n.text:0000000000403ba5\n.text:0000000000403ba7\n.text:0000000000403baa\n.text:0000000000403bad\n.text:0000000000403bb1\n.text:0000000000403bb2\n.text:0000000000403bb4\n.text:0000000000403bb6\n.text:0000000000403bb8\n.text:0000000000403bba\n.text:0000000000403bbb\n'
p573
tp574
sS'FUN_00401330'
p575
(S'\n__stdcall FUN_00401330()\n'
p576
V\u000avoid FUN_00401330(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_00609010)();\u000a  return;\u000a}\u000a\u000a
p577
S'PUSH qword ptr [0x00609008]\nJMP qword ptr [0x00609010]\n'
p578
S'ff 35 d2 7c 20 00\nff 25 d4 7c 20 00\n'
p579
S'.plt:0000000000401330\n.plt:0000000000401336\n'
p580
tp581
sS'iswprint'
p582
(S'\n__stdcall iswprint(wint_t __wc)\n'
p583
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_006091d0)();\u000a  return iVar1;\u000a}\u000a\u000a
p584
S'JMP qword ptr [0x006091d0]\n'
p585
S'ff 25 1a 7b 20 00\n'
p586
S'.plt:00000000004016b0\n'
p587
tp588
sS'bkm_scale'
p589
(S'\n__stdcall bkm_scale(uintmax_t * x)\n'
p590
V\u000astrtol_error bkm_scale(uintmax_t *x)\u000a\u000a{\u000a  ulong uVar1;\u000a  uintmax_t uVar2;\u000a  int in_ESI;\u000a  bool bVar3;\u000a  \u000a  uVar1 = *x;\u000a  uVar2 = (long)in_ESI * uVar1;\u000a  bVar3 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816((ulong)(long)in_ESI),0\u000a                ) < uVar1;\u000a  if (bVar3) {\u000a    uVar2 = 0xffffffffffffffff;\u000a  }\u000a  *x = uVar2;\u000a  return -(uint)bVar3 & LONGINT_OVERFLOW;\u000a}\u000a\u000a
p591
S'MOVSXD RCX,ESI\nMOV RSI,-0x1\nMOV RAX,-0x1\nXOR EDX,EDX\nDIV RCX\nMOV RDX,qword ptr [RDI]\nIMUL RCX,RDX\nCMP RAX,RDX\nCMOVC RCX,RSI\nSBB EAX,EAX\nAND EAX,0x1\nMOV qword ptr [RDI],RCX\nRET\n'
p592
S'48 63 ce\n48 c7 c6 ff ff ff ff\n48 c7 c0 ff ff ff ff\n31 d2\n48 f7 f1\n48 8b 17\n48 0f af ca\n48 39 d0\n48 0f 42 ce\n19 c0\n83 e0 01\n48 89 0f\nc3\n'
p593
S'.text:0000000000404fb0\n.text:0000000000404fb3\n.text:0000000000404fba\n.text:0000000000404fc1\n.text:0000000000404fc3\n.text:0000000000404fc6\n.text:0000000000404fc9\n.text:0000000000404fcd\n.text:0000000000404fd0\n.text:0000000000404fd4\n.text:0000000000404fd6\n.text:0000000000404fd9\n.text:0000000000404fdc\n'
p594
tp595
sS'memchr'
p596
(S'\n__stdcall memchr(void * __s, int __c, size_t __n)\n'
p597
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memchr(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memchr_006090e0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p598
S'JMP qword ptr [0x006090e0]\n'
p599
S'ff 25 0a 7c 20 00\n'
p600
S'.plt:00000000004014d0\n'
p601
tp602
sS'quotearg_style_mem'
p603
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p604
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p605
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00403ef0\n'
p606
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p607
S'.text:0000000000403f50\n.text:0000000000403f53\n.text:0000000000403f56\n.text:0000000000403f58\n.text:0000000000403f5a\n.text:0000000000403f5c\n.text:0000000000403f5f\n.text:0000000000403f62\n'
p608
tp609
sS'xalloc_die'
p610
(S'\n__stdcall xalloc_die()\n'
p611
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x406076,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p612
S'PUSH RBX\nMOV EBX,dword ptr [0x006091f8]\nXOR EDI,EDI\nMOV ESI,0x40696f\nMOV EDX,0x5\nCALL 0x00401400\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x406076\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00401610\nCALL 0x00401360\n'
p613
S'53\n8b 1d e1 45 20 00\n31 ff\nbe 6f 69 40 00\nba 05 00 00 00\ne8 d8 c7 ff ff\n48 89 c1\n31 f6\nba 76 60 40 00\n31 c0\n89 df\ne8 d5 c9 ff ff\ne8 20 c7 ff ff\n'
p614
S'.text:0000000000404c10\n.text:0000000000404c11\n.text:0000000000404c17\n.text:0000000000404c19\n.text:0000000000404c1e\n.text:0000000000404c23\n.text:0000000000404c28\n.text:0000000000404c2b\n.text:0000000000404c2d\n.text:0000000000404c32\n.text:0000000000404c34\n.text:0000000000404c36\n.text:0000000000404c3b\n'
p615
tp616
sS'c_isspace'
p617
(S'\n__stdcall c_isspace()\n'
p618
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p619
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x004052a5\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p620
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p621
S'.text:0000000000405290\n.text:0000000000405293\n.text:0000000000405296\n.text:0000000000405298\n.text:000000000040529d\n.text:000000000040529f\n.text:00000000004052a1\n.text:00000000004052a4\n.text:00000000004052a5\n.text:00000000004052a7\n'
p622
tp623
sS'quotearg_n_custom'
p624
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p625
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p626
S'MOV R8,-0x1\nJMP 0x00404070\n'
p627
S'49 c7 c0 ff ff ff ff\neb 07\n'
p628
S'.text:0000000000404060\n.text:0000000000404067\n'
p629
tp630
sS'open'
p631
(S'\n__stdcall open(char * __file, int __oflag)\n'
p632
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_00609188)();\u000a  return iVar1;\u000a}\u000a\u000a
p633
S'JMP qword ptr [0x00609188]\n'
p634
S'ff 25 62 7b 20 00\n'
p635
S'.plt:0000000000401620\n'
p636
tp637
sS'quotearg_n_custom_mem'
p638
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p639
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p640
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x00614320]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x00614310]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x00614300]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x006142f0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00402dd0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403c60\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p641
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 97 02 21 00\n48 89 44 24 30\n0f 10 05 7b 02 21 00\n0f 29 44 24 20\n0f 10 05 5f 02 21 00\n0f 29 44 24 10\n0f 10 05 43 02 21 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p642
S'.text:0000000000404070\n.text:0000000000404071\n.text:0000000000404073\n.text:0000000000404075\n.text:0000000000404076\n.text:000000000040407a\n.text:000000000040407d\n.text:0000000000404080\n.text:0000000000404082\n.text:0000000000404089\n.text:000000000040408e\n.text:0000000000404095\n.text:000000000040409a\n.text:00000000004040a1\n.text:00000000004040a6\n.text:00000000004040ad\n.text:00000000004040b1\n.text:00000000004040b4\n.text:00000000004040b7\n.text:00000000004040bc\n.text:00000000004040be\n.text:00000000004040c1\n.text:00000000004040c4\n.text:00000000004040c7\n.text:00000000004040cc\n.text:00000000004040d0\n.text:00000000004040d1\n.text:00000000004040d3\n.text:00000000004040d5\n.text:00000000004040d6\n'
p643
tp644
sS'_init'
p645
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p646
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00608ff8;\u000a  if (PTR___gmon_start___00608ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00608ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p647
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00608ff8]\nTEST RAX,RAX\nJZ 0x0040132a\nCALL RAX\nADD RSP,0x8\nRET\n'
p648
S'48 83 ec 08\n48 8b 05 d5 7c 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p649
S'.init:0000000000401318\n.init:000000000040131c\n.init:0000000000401323\n.init:0000000000401326\n.init:0000000000401328\n.init:000000000040132a\n.init:000000000040132e\n'
p650
tp651
sS'__freading'
p652
(S'\n__stdcall __freading()\n'
p653
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_00609148)();\u000a  return;\u000a}\u000a\u000a
p654
S'JMP qword ptr [0x00609148]\n'
p655
S'ff 25 a2 7b 20 00\n'
p656
S'.plt:00000000004015a0\n'
p657
tp658
sS'set_quoting_flags'
p659
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p660
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p661
S'TEST RDI,RDI\nMOV ECX,0x6142f0\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p662
S'48 85 ff\nb9 f0 42 61 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p663
S'.text:0000000000402db0\n.text:0000000000402db3\n.text:0000000000402db8\n.text:0000000000402dbc\n.text:0000000000402dbf\n.text:0000000000402dc2\n'
p664
tp665
sS'fputs_unlocked'
p666
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p667
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_006090f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p668
S'JMP qword ptr [0x006090f0]\n'
p669
S'ff 25 fa 7b 20 00\n'
p670
S'.plt:00000000004014f0\n'
p671
tp672
sS'main'
p673
(S'\n__stdcall main(char * * argv)\n'
p674
V\u000aint main(char **argv)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  uintmax_t max;\u000a  FILE *f;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  size_t sVar5;\u000a  char *err;\u000a  undefined8 uVar6;\u000a  char **in_RSI;\u000a  int iVar7;\u000a  ulong uVar8;\u000a  char *n_str;\u000a  byte bVar9;\u000a  char *n_str_00;\u000a  \u000a  uVar8 = (ulong)argv & 0xffffffff;\u000a  set_program_name(*in_RSI);\u000a  setlocale(6,\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  bindtextdomain(0x405da5,"/usr/local/share/locale");\u000a  textdomain(0x405da5);\u000a  atexit(close_stdout);\u000a  uniform = 0;\u000a  split = 0;\u000a  tagged = 0;\u000a  crown = 0;\u000a  max_width = 0x4b;\u000a  prefix = \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  prefix_full_length = 0;\u000a  prefix_lead_space = 0;\u000a  prefix_length = 0;\u000a  if ((((int)uVar8 < 2) || (n_str = in_RSI[1], *n_str != '-')) || (9 < (int)n_str[1] - 0x30U)) {\u000a    n_str = (char *)0x0;\u000a  }\u000a  else {\u000a    n_str = n_str + 1;\u000a    in_RSI[1] = *in_RSI;\u000a    in_RSI = in_RSI + 1;\u000a    uVar8 = (ulong)((int)uVar8 - 1);\u000a  }\u000a  n_str_00 = (char *)0x0;\u000a  while( true ) {\u000a    iVar7 = (int)uVar8;\u000a    uVar1 = getopt_long(uVar8,in_RSI,"0123456789cstuw:p:g:",long_options,0);\u000a    if ((int)uVar1 < 99) break;\u000a    switch(uVar1) {\u000a    case 99:\u000a      crown = 1;\u000a      break;\u000a    default:\u000a      goto switchD_00401bbb_caseD_64;\u000a    case 0x67:\u000a      n_str_00 = optarg;\u000a      break;\u000a    case 0x70:\u000a      set_prefix(optarg);\u000a      break;\u000a    case 0x73:\u000a      split = 1;\u000a      break;\u000a    case 0x74:\u000a      tagged = 1;\u000a      break;\u000a    case 0x75:\u000a      uniform = 1;\u000a      break;\u000a    case 0x77:\u000a      n_str = optarg;\u000a    }\u000a  }\u000a  if (uVar1 == 0xffffffff) {\u000a    if (n_str != (char *)0x0) {\u000a      err = (char *)dcgettext(0,"invalid width",5);\u000a      max = xdectoumax(n_str,0,0x9c4,\u000a                                              \u000a                       "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                       + 0xca,err);\u000a      max_width = (int)max;\u000a    }\u000a    max = SEXT48(max_width);\u000a    if (n_str_00 == (char *)0x0) {\u000a      iVar2 = max_width * 0xbb;\u000a      goal_width = iVar2 / 200 + (iVar2 >> 0x1f) + (uint)((ulong)((long)iVar2 * 0x51eb851f) >> 0x3f)\u000a      ;\u000a    }\u000a    else {\u000a      err = (char *)dcgettext(0,"invalid width",5);\u000a      max = xdectoumax(n_str_00,0,max,\u000a                                              \u000a                       "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                       + 0xca,err);\u000a      goal_width = (int)max;\u000a      if (n_str == (char *)0x0) {\u000a        max_width = goal_width + 10;\u000a      }\u000a    }\u000a    if (optind == iVar7) {\u000a      fmt(stdin);\u000a      bVar9 = 1;\u000a    }\u000a    else {\u000a      bVar9 = 1;\u000a      if (optind < iVar7) {\u000a        uVar4 = 1;\u000a        do {\u000a          n_str = in_RSI[(long)optind];\u000a          if ((*n_str == '-') && (n_str[1] == 0)) {\u000a            fmt(stdin);\u000a          }\u000a          else {\u000a            f = (FILE *)fopen(n_str,"r");\u000a            if (f == (FILE *)0x0) {\u000a              puVar3 = (uint *)__errno_location();\u000a              uVar1 = *puVar3;\u000a              uVar6 = dcgettext(0,"cannot open %s for reading",5);\u000a              n_str = quotearg_style((char *)0x4);\u000a            }\u000a            else {\u000a              fmt(f);\u000a              iVar2 = rpl_fclose(f);\u000a              if (iVar2 != -1) goto LAB_00401db0;\u000a              puVar3 = (uint *)__errno_location();\u000a              uVar1 = *puVar3;\u000a              n_str = quotearg_n_style_colon((char *)0x0);\u000a              uVar6 = 0x406076;\u000a            }\u000a            uVar4 = 0;\u000a            error(0,(ulong)uVar1,uVar6,n_str);\u000a          }\u000aLAB_00401db0:\u000a          bVar9 = (byte)uVar4;\u000a          optind = optind + 1;\u000a        } while (optind < iVar7);\u000a      }\u000a    }\u000a    return (int)(uint)(~bVar9 & 1);\u000a  }\u000a  if (uVar1 != 0xffffff7d) {\u000a    if (uVar1 != 0xffffff7e) {\u000aswitchD_00401bbb_caseD_64:\u000a      if (uVar1 - 0x30 < 10) {\u000a        uVar4 = dcgettext(0,\u000a                          "invalid option -- %c; -WIDTH is recognized only when it is the first\u005cnoption; use -w N instead"\u000a                          ,5);\u000a        error(0,0,uVar4,(ulong)uVar1);\u000a      }\u000a      n_str = (char *)0x1;\u000a      usage();\u000a      prefix_lead_space = 0;\u000a      if (*n_str == ' ') {\u000a        prefix_lead_space = 0;\u000a        do {\u000a          prefix_lead_space = prefix_lead_space + 1;\u000a          n_str_00 = n_str + 1;\u000a          n_str = n_str + 1;\u000a        } while (*n_str_00 == ' ');\u000a      }\u000a      prefix = n_str;\u000a      sVar5 = strlen(n_str);\u000a      prefix_full_length = (int)sVar5;\u000a      n_str_00 = n_str + (long)prefix_full_length;\u000a      do {\u000a        err = n_str_00;\u000a        if (err <= n_str) break;\u000a        n_str_00 = err + -1;\u000a      } while (err[-1] == ' ');\u000a      *err = 0;\u000a      prefix_length = (int)err - (int)n_str;\u000a      return prefix_length;\u000a    }\u000a    usage(0);\u000a  }\u000a  version_etc(stdout,"fmt","GNU coreutils",Version,"Ross Paterson",0);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(0);\u000a}\u000a\u000a
p675
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,RSI\nMOV R13D,EDI\nMOV RDI,qword ptr [R12]\nCALL 0x00402c60\nMOV EDI,0x6\nMOV ESI,0x406739\nCALL 0x004015e0\nMOV EDI,0x405da5\nMOV ESI,0x405d16\nCALL 0x004013f0\nMOV EDI,0x405da5\nCALL 0x004013d0\nMOV EDI,0x402b70\nCALL 0x00405720\nMOV byte ptr [0x006092b0],0x0\nMOV byte ptr [0x006092b1],0x0\nMOV byte ptr [0x006092b2],0x0\nMOV byte ptr [0x006092b3],0x0\nMOV dword ptr [0x006092b4],0x4b\nMOV qword ptr [0x006092b8],0x406739\nMOV dword ptr [0x006092c0],0x0\nMOV dword ptr [0x006092c4],0x0\nMOV dword ptr [0x006092c8],0x0\nCMP R13D,0x2\nJL 0x00401b6f\nMOV R14,qword ptr [R12 + 0x8]\nCMP byte ptr [R14],0x2d\nJNZ 0x00401b6f\nMOVSX EAX,byte ptr [R14 + 0x1]\nADD EAX,-0x30\nCMP EAX,0x9\nJA 0x00401b6f\nINC R14\nMOV RAX,qword ptr [R12]\nMOV qword ptr [R12 + 0x8],RAX\nLEA R12,[R12 + 0x8]\nDEC R13D\nJMP 0x00401b72\nXOR R14D,R14D\nXOR R15D,R15D\nJMP 0x00401b90\nMOV RDI,qword ptr [0x00609280]\nCALL 0x00401e60\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV EDX,0x405d2e\nMOV ECX,0x405820\nXOR R8D,R8D\nMOV EDI,R13D\nMOV RSI,R12\nCALL 0x00401430\nMOV EBX,EAX\nCMP EBX,0x62\nJLE 0x00401bf8\nLEA EAX,[RBX + -0x63]\nCMP EAX,0x14\nJA 0x00401e27\nJMP qword ptr [0x405770 + RAX*0x8]\nMOV byte ptr [0x006092b3],0x1\nJMP 0x00401b90\nMOV R15,qword ptr [0x00609280]\nJMP 0x00401b90\nMOV byte ptr [0x006092b1],0x1\nJMP 0x00401b90\nMOV byte ptr [0x006092b2],0x1\nJMP 0x00401b90\nMOV byte ptr [0x006092b0],0x1\nJMP 0x00401b90\nMOV R14,qword ptr [0x00609280]\nJMP 0x00401b90\nCMP EBX,-0x1\nJNZ 0x00401de1\nTEST R14,R14\nJZ 0x00401c3a\nXOR EDI,EDI\nMOV ESI,0x405dbd\nMOV EDX,0x5\nCALL 0x00401400\nMOV ESI,0x0\nMOV EDX,0x9c4\nMOV ECX,0x406739\nXOR R9D,R9D\nMOV RDI,R14\nMOV R8,RAX\nCALL 0x00404d10\nMOV dword ptr [0x006092b4],EAX\nTEST R15,R15\nMOVSXD RBX,dword ptr [0x006092b4]\nJZ 0x00401c8e\nXOR EDI,EDI\nMOV ESI,0x405dbd\nMOV EDX,0x5\nCALL 0x00401400\nXOR ESI,ESI\nMOV ECX,0x406739\nXOR R9D,R9D\nMOV RDI,R15\nMOV RDX,RBX\nMOV R8,RAX\nCALL 0x00404d10\nMOV dword ptr [0x006092cc],EAX\nTEST R14,R14\nJNZ 0x00401cb0\nADD EAX,0xa\nMOV dword ptr [0x006092b4],EAX\nCMP dword ptr [0x00609278],R13D\nJZ 0x00401cb9\nJMP 0x00401ccd\nIMUL EAX,EBX,0xbb\nCDQE\nIMUL RAX,RAX,0x51eb851f\nMOV RCX,RAX\nSHR RCX,0x3f\nSAR RAX,0x26\nADD EAX,ECX\nMOV dword ptr [0x006092cc],EAX\nCMP dword ptr [0x00609278],R13D\nJNZ 0x00401ccd\nMOV RDI,qword ptr [0x00609270]\nCALL 0x00401ed0\nMOV R15B,0x1\nJMP 0x00401dc7\nMOV EAX,dword ptr [0x00609278]\nMOV R15B,0x1\nCMP EAX,R13D\nJGE 0x00401dc7\nMOV R15B,0x1\nNOP word ptr CS:[RAX + RAX*0x1]\nCDQE\nMOV RBX,qword ptr [R12 + RAX*0x8]\nCMP byte ptr [RBX],0x2d\nJNZ 0x00401d05\nCMP byte ptr [RBX + 0x1],0x0\nJZ 0x00401da0\nMOV ESI,0x406070\nMOV RDI,RBX\nCALL 0x00401640\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00401d60\nMOV RDI,RBP\nCALL 0x00401ed0\nMOV RDI,RBP\nCALL 0x00405070\nCMP EAX,-0x1\nJNZ 0x00401db0\nCALL 0x00401370\nMOV EBP,dword ptr [RAX]\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,RBX\nCALL 0x00404010\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x406076\nXOR EAX,EAX\nMOV ESI,EBP\nJMP 0x00401d99\nCALL 0x00401370\nMOV R14D,dword ptr [RAX]\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x405dcb\nMOV EDX,0x5\nCALL 0x00401400\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,RBX\nCALL 0x00403f30\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,RBP\nCALL 0x00401610\nJMP 0x00401db0\nMOV RDI,qword ptr [0x00609270]\nCALL 0x00401ed0\nNOP dword ptr [RAX]\nMOV EAX,dword ptr [0x00609278]\nINC EAX\nMOV dword ptr [0x00609278],EAX\nCMP EAX,R13D\nJL 0x00401cf0\nNOT R15B\nAND R15B,0x1\nMOVZX EAX,R15B\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP EBX,0xffffff7d\nJZ 0x00401df8\nCMP EBX,0xffffff7e\nJNZ 0x00401e27\nXOR EDI,EDI\nCALL 0x004017d0\nMOV RDI,qword ptr [0x00609268]\nMOV RCX,qword ptr [0x006091f0]\nMOV ESI,0x405d12\nMOV EDX,0x405da1\nMOV R8D,0x405daf\nXOR R9D,R9D\nXOR EAX,EAX\nCALL 0x00404950\nXOR EDI,EDI\nCALL 0x00401670\nLEA EAX,[RBX + -0x30]\nCMP EAX,0x9\nJA 0x00401e53\nXOR EDI,EDI\nMOV ESI,0x405d43\nMOV EDX,0x5\nCALL 0x00401400\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV ECX,EBX\nCALL 0x00401610\nMOV EDI,0x1\nCALL 0x004017d0\nNOP dword ptr [RAX]\n'
p676
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f4\n41 89 fd\n49 8b 3c 24\ne8 a6 11 00 00\nbf 06 00 00 00\nbe 39 67 40 00\ne8 17 fb ff ff\nbf a5 5d 40 00\nbe 16 5d 40 00\ne8 18 f9 ff ff\nbf a5 5d 40 00\ne8 ee f8 ff ff\nbf 70 2b 40 00\ne8 34 3c 00 00\nc6 05 bd 77 20 00 00\nc6 05 b7 77 20 00 00\nc6 05 b1 77 20 00 00\nc6 05 ab 77 20 00 00\nc7 05 a2 77 20 00 4b 00 00 00\n48 c7 05 9b 77 20 00 39 67 40 00\nc7 05 99 77 20 00 00 00 00 00\nc7 05 93 77 20 00 00 00 00 00\nc7 05 8d 77 20 00 00 00 00 00\n41 83 fd 02\n7c 2e\n4d 8b 74 24 08\n41 80 3e 2d\n75 23\n41 0f be 46 01\n83 c0 d0\n83 f8 09\n77 16\n49 ff c6\n49 8b 04 24\n49 89 44 24 08\n4d 8d 64 24 08\n41 ff cd\neb 03\n45 31 f6\n45 31 ff\neb 19\n48 8b 3d 02 77 20 00\ne8 dd 02 00 00\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\nba 2e 5d 40 00\nb9 20 58 40 00\n45 31 c0\n44 89 ef\n4c 89 e6\ne8 88 f8 ff ff\n89 c3\n83 fb 62\n7e 49\n8d 43 9d\n83 f8 14\n0f 87 6c 02 00 00\nff 24 c5 70 57 40 00\nc6 05 ea 76 20 00 01\neb c5\n4c 8b 3d ae 76 20 00\neb bc\nc6 05 d6 76 20 00 01\neb b3\nc6 05 ce 76 20 00 01\neb aa\nc6 05 c3 76 20 00 01\neb a1\n4c 8b 35 8a 76 20 00\neb 98\n83 fb ff\n0f 85 e0 01 00 00\n4d 85 f6\n74 34\n31 ff\nbe bd 5d 40 00\nba 05 00 00 00\ne8 e9 f7 ff ff\nbe 00 00 00 00\nba c4 09 00 00\nb9 39 67 40 00\n45 31 c9\n4c 89 f7\n49 89 c0\ne8 dc 30 00 00\n89 05 7a 76 20 00\n4d 85 ff\n48 63 1d 70 76 20 00\n74 48\n31 ff\nbe bd 5d 40 00\nba 05 00 00 00\ne8 a9 f7 ff ff\n31 f6\nb9 39 67 40 00\n45 31 c9\n4c 89 ff\n48 89 da\n49 89 c0\ne8 a1 30 00 00\n89 05 57 76 20 00\n4d 85 f6\n75 36\n83 c0 0a\n89 05 31 76 20 00\n44 39 2d ee 75 20 00\n74 2d\neb 3f\n69 c3 bb 00 00 00\n48 98\n48 69 c0 1f 85 eb 51\n48 89 c1\n48 c1 e9 3f\n48 c1 f8 26\n01 c8\n89 05 1c 76 20 00\n44 39 2d c1 75 20 00\n75 14\n48 8b 3d b0 75 20 00\ne8 0b 02 00 00\n41 b7 01\ne9 fa 00 00 00\n8b 05 a5 75 20 00\n41 b7 01\n44 39 e8\n0f 8d e8 00 00 00\n41 b7 01\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 98\n49 8b 1c c4\n80 3b 2d\n75 0a\n80 7b 01 00\n0f 84 9b 00 00 00\nbe 70 60 40 00\n48 89 df\ne8 2e f9 ff ff\n48 89 c5\n48 85 ed\n74 46\n48 89 ef\ne8 ae 01 00 00\n48 89 ef\ne8 46 33 00 00\n83 f8 ff\n0f 85 7d 00 00 00\ne8 38 f6 ff ff\n8b 28\n45 31 ff\n31 ff\nbe 03 00 00 00\n48 89 da\ne8 c4 22 00 00\n48 89 c1\n31 ff\nba 76 60 40 00\n31 c0\n89 ee\neb 3d\ne8 0b f6 ff ff\n44 8b 30\n45 31 ff\n31 ff\nbe cb 5d 40 00\nba 05 00 00 00\ne8 84 f6 ff ff\n48 89 c5\nbf 04 00 00 00\n48 89 de\ne8 a4 21 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 f6\n48 89 ea\ne8 72 f8 ff ff\neb 10\n48 8b 3d c9 74 20 00\ne8 24 01 00 00\n0f 1f 40 00\n8b 05 c2 74 20 00\nff c0\n89 05 ba 74 20 00\n44 39 e8\n0f 8c 29 ff ff ff\n41 f6 d7\n41 80 e7 01\n41 0f b6 c7\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n81 fb 7d ff ff ff\n74 0f\n81 fb 7e ff ff ff\n75 36\n31 ff\ne8 d8 f9 ff ff\n48 8b 3d 69 74 20 00\n48 8b 0d ea 73 20 00\nbe 12 5d 40 00\nba a1 5d 40 00\n41 b8 af 5d 40 00\n45 31 c9\n31 c0\ne8 30 2b 00 00\n31 ff\ne8 49 f8 ff ff\n8d 43 d0\n83 f8 09\n77 24\n31 ff\nbe 43 5d 40 00\nba 05 00 00 00\ne8 c0 f5 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\n89 d9\ne8 bd f7 ff ff\nbf 01 00 00 00\ne8 73 f9 ff ff\n0f 1f 00\n'
p677
S'.text:0000000000401aa0\n.text:0000000000401aa1\n.text:0000000000401aa3\n.text:0000000000401aa5\n.text:0000000000401aa7\n.text:0000000000401aa9\n.text:0000000000401aaa\n.text:0000000000401aab\n.text:0000000000401aae\n.text:0000000000401ab1\n.text:0000000000401ab5\n.text:0000000000401aba\n.text:0000000000401abf\n.text:0000000000401ac4\n.text:0000000000401ac9\n.text:0000000000401ace\n.text:0000000000401ad3\n.text:0000000000401ad8\n.text:0000000000401add\n.text:0000000000401ae2\n.text:0000000000401ae7\n.text:0000000000401aec\n.text:0000000000401af3\n.text:0000000000401afa\n.text:0000000000401b01\n.text:0000000000401b08\n.text:0000000000401b12\n.text:0000000000401b1d\n.text:0000000000401b27\n.text:0000000000401b31\n.text:0000000000401b3b\n.text:0000000000401b3f\n.text:0000000000401b41\n.text:0000000000401b46\n.text:0000000000401b4a\n.text:0000000000401b4c\n.text:0000000000401b51\n.text:0000000000401b54\n.text:0000000000401b57\n.text:0000000000401b59\n.text:0000000000401b5c\n.text:0000000000401b60\n.text:0000000000401b65\n.text:0000000000401b6a\n.text:0000000000401b6d\n.text:0000000000401b6f\n.text:0000000000401b72\n.text:0000000000401b75\n.text:0000000000401b77\n.text:0000000000401b7e\n.text:0000000000401b83\n.text:0000000000401b90\n.text:0000000000401b95\n.text:0000000000401b9a\n.text:0000000000401b9d\n.text:0000000000401ba0\n.text:0000000000401ba3\n.text:0000000000401ba8\n.text:0000000000401baa\n.text:0000000000401bad\n.text:0000000000401baf\n.text:0000000000401bb2\n.text:0000000000401bb5\n.text:0000000000401bbb\n.text:0000000000401bc2\n.text:0000000000401bc9\n.text:0000000000401bcb\n.text:0000000000401bd2\n.text:0000000000401bd4\n.text:0000000000401bdb\n.text:0000000000401bdd\n.text:0000000000401be4\n.text:0000000000401be6\n.text:0000000000401bed\n.text:0000000000401bef\n.text:0000000000401bf6\n.text:0000000000401bf8\n.text:0000000000401bfb\n.text:0000000000401c01\n.text:0000000000401c04\n.text:0000000000401c06\n.text:0000000000401c08\n.text:0000000000401c0d\n.text:0000000000401c12\n.text:0000000000401c17\n.text:0000000000401c1c\n.text:0000000000401c21\n.text:0000000000401c26\n.text:0000000000401c29\n.text:0000000000401c2c\n.text:0000000000401c2f\n.text:0000000000401c34\n.text:0000000000401c3a\n.text:0000000000401c3d\n.text:0000000000401c44\n.text:0000000000401c46\n.text:0000000000401c48\n.text:0000000000401c4d\n.text:0000000000401c52\n.text:0000000000401c57\n.text:0000000000401c59\n.text:0000000000401c5e\n.text:0000000000401c61\n.text:0000000000401c64\n.text:0000000000401c67\n.text:0000000000401c6a\n.text:0000000000401c6f\n.text:0000000000401c75\n.text:0000000000401c78\n.text:0000000000401c7a\n.text:0000000000401c7d\n.text:0000000000401c83\n.text:0000000000401c8a\n.text:0000000000401c8c\n.text:0000000000401c8e\n.text:0000000000401c94\n.text:0000000000401c96\n.text:0000000000401c9d\n.text:0000000000401ca0\n.text:0000000000401ca4\n.text:0000000000401ca8\n.text:0000000000401caa\n.text:0000000000401cb0\n.text:0000000000401cb7\n.text:0000000000401cb9\n.text:0000000000401cc0\n.text:0000000000401cc5\n.text:0000000000401cc8\n.text:0000000000401ccd\n.text:0000000000401cd3\n.text:0000000000401cd6\n.text:0000000000401cd9\n.text:0000000000401cdf\n.text:0000000000401ce2\n.text:0000000000401cf0\n.text:0000000000401cf2\n.text:0000000000401cf6\n.text:0000000000401cf9\n.text:0000000000401cfb\n.text:0000000000401cff\n.text:0000000000401d05\n.text:0000000000401d0a\n.text:0000000000401d0d\n.text:0000000000401d12\n.text:0000000000401d15\n.text:0000000000401d18\n.text:0000000000401d1a\n.text:0000000000401d1d\n.text:0000000000401d22\n.text:0000000000401d25\n.text:0000000000401d2a\n.text:0000000000401d2d\n.text:0000000000401d33\n.text:0000000000401d38\n.text:0000000000401d3a\n.text:0000000000401d3d\n.text:0000000000401d3f\n.text:0000000000401d44\n.text:0000000000401d47\n.text:0000000000401d4c\n.text:0000000000401d4f\n.text:0000000000401d51\n.text:0000000000401d56\n.text:0000000000401d58\n.text:0000000000401d5a\n.text:0000000000401d60\n.text:0000000000401d65\n.text:0000000000401d68\n.text:0000000000401d6b\n.text:0000000000401d6d\n.text:0000000000401d72\n.text:0000000000401d77\n.text:0000000000401d7c\n.text:0000000000401d7f\n.text:0000000000401d84\n.text:0000000000401d87\n.text:0000000000401d8c\n.text:0000000000401d8f\n.text:0000000000401d91\n.text:0000000000401d93\n.text:0000000000401d96\n.text:0000000000401d99\n.text:0000000000401d9e\n.text:0000000000401da0\n.text:0000000000401da7\n.text:0000000000401dac\n.text:0000000000401db0\n.text:0000000000401db6\n.text:0000000000401db8\n.text:0000000000401dbe\n.text:0000000000401dc1\n.text:0000000000401dc7\n.text:0000000000401dca\n.text:0000000000401dce\n.text:0000000000401dd2\n.text:0000000000401dd6\n.text:0000000000401dd7\n.text:0000000000401dd9\n.text:0000000000401ddb\n.text:0000000000401ddd\n.text:0000000000401ddf\n.text:0000000000401de0\n.text:0000000000401de1\n.text:0000000000401de7\n.text:0000000000401de9\n.text:0000000000401def\n.text:0000000000401df1\n.text:0000000000401df3\n.text:0000000000401df8\n.text:0000000000401dff\n.text:0000000000401e06\n.text:0000000000401e0b\n.text:0000000000401e10\n.text:0000000000401e16\n.text:0000000000401e19\n.text:0000000000401e1b\n.text:0000000000401e20\n.text:0000000000401e22\n.text:0000000000401e27\n.text:0000000000401e2a\n.text:0000000000401e2d\n.text:0000000000401e2f\n.text:0000000000401e31\n.text:0000000000401e36\n.text:0000000000401e3b\n.text:0000000000401e40\n.text:0000000000401e43\n.text:0000000000401e45\n.text:0000000000401e47\n.text:0000000000401e49\n.text:0000000000401e4c\n.text:0000000000401e4e\n.text:0000000000401e53\n.text:0000000000401e58\n.text:0000000000401e5d\n'
p678
tp679
sS'get_space'
p680
(S'\n__stdcall get_space(FILE * f)\n'
p681
V\u000aint get_space(FILE *f)\u000a\u000a{\u000a  int in_ESI;\u000a  \u000a  if (in_ESI != 9) goto LAB_00402313;\u000a  do {\u000a    tabs = 1;\u000a    in_column = (in_column / 8) * 8 + 8;\u000a    while (in_ESI = getc_unlocked((FILE *)f), in_ESI != 9) {\u000aLAB_00402313:\u000a      if (in_ESI != 0x20) {\u000a        return in_ESI;\u000a      }\u000a      in_column = in_column + 1;\u000a    }\u000a  } while( true );\u000a}\u000a\u000a
p682
S'PUSH RBX\nMOV EAX,ESI\nMOV RBX,RDI\nCMP EAX,0x9\nJNZ 0x00402313\nJMP 0x00402330\nMOV dword ptr [0x006092e8],EAX\nMOV RDI,RBX\nCALL 0x004013c0\nCMP EAX,0x9\nJZ 0x00402330\nCMP EAX,0x20\nJNZ 0x0040234f\nMOV EAX,dword ptr [0x006092e8]\nINC EAX\nJMP 0x00402300\nMOV byte ptr [0x006092d0],0x1\nMOV ECX,dword ptr [0x006092e8]\nMOV EAX,ECX\nSAR EAX,0x1f\nSHR EAX,0x1d\nADD EAX,ECX\nAND EAX,0xfffffff8\nADD EAX,0x8\nJMP 0x00402300\nPOP RBX\nRET\n'
p683
S'53\n89 f0\n48 89 fb\n83 f8 09\n75 18\neb 33\n89 05 e2 6f 20 00\n48 89 df\ne8 b2 f0 ff ff\n83 f8 09\n74 1d\n83 f8 20\n75 37\n8b 05 ca 6f 20 00\nff c0\neb de\nc6 05 99 6f 20 00 01\n8b 0d ab 6f 20 00\n89 c8\nc1 f8 1f\nc1 e8 1d\n01 c8\n83 e0 f8\n83 c0 08\neb b1\n5b\nc3\n'
p684
S'.text:00000000004022f0\n.text:00000000004022f1\n.text:00000000004022f3\n.text:00000000004022f6\n.text:00000000004022f9\n.text:00000000004022fb\n.text:0000000000402300\n.text:0000000000402306\n.text:0000000000402309\n.text:000000000040230e\n.text:0000000000402311\n.text:0000000000402313\n.text:0000000000402316\n.text:0000000000402318\n.text:000000000040231e\n.text:0000000000402320\n.text:0000000000402330\n.text:0000000000402337\n.text:000000000040233d\n.text:000000000040233f\n.text:0000000000402342\n.text:0000000000402345\n.text:0000000000402347\n.text:000000000040234a\n.text:000000000040234d\n.text:000000000040234f\n.text:0000000000402350\n'
p685
tp686
sS'realloc'
p687
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p688
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_00609158)();\u000a  return pvVar1;\u000a}\u000a\u000a
p689
S'JMP qword ptr [0x00609158]\n'
p690
S'ff 25 92 7b 20 00\n'
p691
S'.plt:00000000004015c0\n'
p692
tp693
sS'xcharalloc'
p694
(S'\n__stdcall xcharalloc(size_t n)\n'
p695
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p696
S'JMP 0x00404a80\n'
p697
S'e9 2b ff ff ff\n'
p698
S'.text:0000000000404b50\n'
p699
tp700
sS'c_isupper'
p701
(S'\n__stdcall c_isupper()\n'
p702
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p703
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p704
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p705
S'.text:00000000004052b0\n.text:00000000004052b3\n.text:00000000004052b6\n.text:00000000004052b9\n'
p706
tp707
sS'__fprintf_chk'
p708
(S'\n__stdcall __fprintf_chk()\n'
p709
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_006091c0)();\u000a  return;\u000a}\u000a\u000a
p710
S'JMP qword ptr [0x006091c0]\n'
p711
S'ff 25 2a 7b 20 00\n'
p712
S'.plt:0000000000401690\n'
p713
tp714
sS'fmt'
p715
(S'\n__stdcall fmt(FILE * f)\n'
p716
V\u000avoid fmt(FILE *f)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  fadvise(f);\u000a  tabs = 0;\u000a  other_indent = 0;\u000a  next_char = get_prefix(f);\u000a  while( true ) {\u000a    _Var1 = get_paragraph(f);\u000a    if (_Var1 == false) break;\u000a    fmt_paragraph();\u000a    put_paragraph(word_limit);\u000a  }\u000a  return;\u000a}\u000a\u000a
p717
S'PUSH RBX\nMOV RBX,RDI\nMOV ESI,0x2\nCALL 0x00402c40\nMOV byte ptr [0x006092d0],0x0\nMOV dword ptr [0x006092d4],0x0\nMOV RDI,RBX\nCALL 0x00401f20\nMOV dword ptr [0x006092d8],EAX\nJMP 0x00401f11\nCALL 0x00402180\nMOV RDI,qword ptr [0x006092e0]\nCALL 0x004022a0\nMOV RDI,RBX\nCALL 0x00401fc0\nTEST AL,AL\nJNZ 0x00401f00\nPOP RBX\nRET\n'
p718
S'53\n48 89 fb\nbe 02 00 00 00\ne8 62 0d 00 00\nc6 05 eb 73 20 00 00\nc7 05 e5 73 20 00 00 00 00 00\n48 89 df\ne8 29 00 00 00\n89 05 db 73 20 00\neb 12\ne8 7b 02 00 00\n48 8b 3d d4 73 20 00\ne8 8f 03 00 00\n48 89 df\ne8 a7 00 00 00\n84 c0\n75 e3\n5b\nc3\n'
p719
S'.text:0000000000401ed0\n.text:0000000000401ed1\n.text:0000000000401ed4\n.text:0000000000401ed9\n.text:0000000000401ede\n.text:0000000000401ee5\n.text:0000000000401eef\n.text:0000000000401ef2\n.text:0000000000401ef7\n.text:0000000000401efd\n.text:0000000000401f00\n.text:0000000000401f05\n.text:0000000000401f0c\n.text:0000000000401f11\n.text:0000000000401f14\n.text:0000000000401f19\n.text:0000000000401f1b\n.text:0000000000401f1d\n.text:0000000000401f1e\n'
p720
tp721
sS'get_charset_aliases'
p722
(S'\n__stdcall get_charset_aliases()\n'
p723
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00405614_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00405614_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00405614_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00405614_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_00405614_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00405614_caseD_9;\u000a      case -1:\u000a        goto switchD_00405614_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_0040566d:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_00405673:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00405614_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00405673;\u000a  }\u000a  goto LAB_0040566d;\u000a}\u000a\u000a
p724
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x00614430]\nTEST R15,R15\nJNZ 0x00405682\nMOV EDI,0x406fe4\nCALL 0x00401340\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405438\nCMP byte ptr [RBX],0x0\nJNZ 0x0040543d\nMOV EBX,0x406ff4\nMOV RDI,RBX\nCALL 0x00401420\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00405457\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00405459\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401560\nMOV R13,RAX\nTEST R13,R13\nJZ 0x004054ad\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00401530\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x004054b8\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x004054d5\nMOV R15D,0x406739\nJMP 0x0040567b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00401620\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0040566d\nMOV ESI,0x406070\nMOV EDI,EBP\nCALL 0x004015d0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405634\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00405600\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x004013a0\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x004013a0\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00405600\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401590\nMOV ESI,0x407003\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x004014a0\nCMP EAX,0x2\nJL 0x00405654\nMOV RDI,R12\nCALL 0x00401420\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x00401420\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x004055dd\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x004015c0\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00405524\nJMP 0x0040563d\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401560\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00405524\nJMP 0x0040563d\nMOV RDI,RBX\nCALL 0x004013c0\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00405567\nJMP qword ptr [0x406ea8 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x004013c0\nCMP EAX,-0x1\nJZ 0x00405654\nCMP EAX,0xa\nJNZ 0x00405620\nJMP 0x00405600\nMOV EDI,EBP\nCALL 0x004014b0\nJMP 0x0040566d\nMOV RDI,R15\nCALL 0x00401350\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00405070\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040566d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00405673\nMOV R15D,0x406739\nMOV RDI,R13\nCALL 0x00401350\nMOV qword ptr [0x00614430],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p725
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 18 f0 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf e4 6f 40 00\ne8 15 bf ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb f4 6f 40 00\n48 89 df\ne8 db bf ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 f9 c0 ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 b3 c0 ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf 39 67 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 3c c1 ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 70 60 40 00\n89 ef\ne8 d6 c0 ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 5b be ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 4b be ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 1f c0 ff ff\nbe 03 70 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 1a bf ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 89 be ff ff\n49 89 c4\n48 89 ef\ne8 7e be ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 f6 bf ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 75 bf ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 b8 bd ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd a8 6e 40 00\n48 89 df\ne8 98 bd ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 75 be ff ff\neb 30\n4c 89 ff\ne8 0b bd ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 14 fa ff ff\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf 39 67 40 00\n4c 89 ef\ne8 d5 bc ff ff\n4c 89 3d ae ed 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p726
S'.text:0000000000405400\n.text:0000000000405401\n.text:0000000000405403\n.text:0000000000405405\n.text:0000000000405407\n.text:0000000000405409\n.text:000000000040540a\n.text:0000000000405411\n.text:0000000000405418\n.text:000000000040541b\n.text:0000000000405421\n.text:0000000000405426\n.text:000000000040542b\n.text:000000000040542e\n.text:0000000000405431\n.text:0000000000405433\n.text:0000000000405436\n.text:0000000000405438\n.text:000000000040543d\n.text:0000000000405440\n.text:0000000000405445\n.text:0000000000405448\n.text:000000000040544b\n.text:000000000040544d\n.text:0000000000405452\n.text:0000000000405455\n.text:0000000000405457\n.text:0000000000405459\n.text:000000000040545d\n.text:0000000000405462\n.text:0000000000405467\n.text:000000000040546a\n.text:000000000040546d\n.text:000000000040546f\n.text:0000000000405472\n.text:0000000000405475\n.text:0000000000405478\n.text:000000000040547d\n.text:0000000000405480\n.text:0000000000405483\n.text:0000000000405486\n.text:0000000000405488\n.text:000000000040548e\n.text:0000000000405498\n.text:000000000040549d\n.text:00000000004054a7\n.text:00000000004054ab\n.text:00000000004054ad\n.text:00000000004054b3\n.text:00000000004054b8\n.text:00000000004054c2\n.text:00000000004054c7\n.text:00000000004054d1\n.text:00000000004054d5\n.text:00000000004054da\n.text:00000000004054dc\n.text:00000000004054df\n.text:00000000004054e4\n.text:00000000004054e6\n.text:00000000004054e8\n.text:00000000004054ee\n.text:00000000004054f3\n.text:00000000004054f5\n.text:00000000004054fa\n.text:00000000004054fd\n.text:0000000000405500\n.text:0000000000405506\n.text:000000000040550b\n.text:0000000000405510\n.text:0000000000405512\n.text:0000000000405517\n.text:000000000040551a\n.text:000000000040551f\n.text:0000000000405524\n.text:0000000000405529\n.text:000000000040552c\n.text:000000000040552f\n.text:0000000000405532\n.text:0000000000405535\n.text:0000000000405538\n.text:000000000040553d\n.text:0000000000405540\n.text:0000000000405545\n.text:0000000000405548\n.text:000000000040554d\n.text:0000000000405550\n.text:0000000000405555\n.text:000000000040555a\n.text:000000000040555d\n.text:0000000000405562\n.text:0000000000405567\n.text:0000000000405569\n.text:000000000040556c\n.text:0000000000405571\n.text:0000000000405576\n.text:0000000000405578\n.text:000000000040557b\n.text:000000000040557e\n.text:0000000000405581\n.text:0000000000405586\n.text:0000000000405589\n.text:000000000040558f\n.text:0000000000405592\n.text:0000000000405597\n.text:000000000040559a\n.text:000000000040559d\n.text:00000000004055a2\n.text:00000000004055a5\n.text:00000000004055aa\n.text:00000000004055af\n.text:00000000004055b2\n.text:00000000004055b4\n.text:00000000004055b8\n.text:00000000004055bd\n.text:00000000004055c2\n.text:00000000004055c5\n.text:00000000004055ca\n.text:00000000004055cd\n.text:00000000004055d2\n.text:00000000004055d5\n.text:00000000004055db\n.text:00000000004055dd\n.text:00000000004055e2\n.text:00000000004055e6\n.text:00000000004055eb\n.text:00000000004055ee\n.text:00000000004055f1\n.text:00000000004055f7\n.text:0000000000405600\n.text:0000000000405603\n.text:0000000000405608\n.text:000000000040560b\n.text:000000000040560e\n.text:0000000000405614\n.text:0000000000405620\n.text:0000000000405623\n.text:0000000000405628\n.text:000000000040562b\n.text:000000000040562d\n.text:0000000000405630\n.text:0000000000405632\n.text:0000000000405634\n.text:0000000000405636\n.text:000000000040563b\n.text:000000000040563d\n.text:0000000000405640\n.text:0000000000405645\n.text:0000000000405647\n.text:000000000040564c\n.text:000000000040564f\n.text:0000000000405654\n.text:0000000000405657\n.text:000000000040565c\n.text:0000000000405661\n.text:0000000000405664\n.text:0000000000405666\n.text:000000000040566b\n.text:000000000040566d\n.text:0000000000405673\n.text:0000000000405676\n.text:000000000040567b\n.text:0000000000405682\n.text:0000000000405685\n.text:000000000040568c\n.text:000000000040568d\n.text:000000000040568f\n.text:0000000000405691\n.text:0000000000405693\n.text:0000000000405695\n.text:0000000000405696\n'
p727
tp728
sS'nl_langinfo'
p729
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p730
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_00609138)();\u000a  return pcVar1;\u000a}\u000a\u000a
p731
S'JMP qword ptr [0x00609138]\n'
p732
S'ff 25 b2 7b 20 00\n'
p733
S'.plt:0000000000401580\n'
p734
tp735
sS'c_isalnum'
p736
(S'\n__stdcall c_isalnum()\n'
p737
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p738
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x004051cb\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x004051cb\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x004051ca\nXOR EAX,EAX\nRET\n'
p739
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p740
S'.text:00000000004051b0\n.text:00000000004051b2\n.text:00000000004051b5\n.text:00000000004051b8\n.text:00000000004051ba\n.text:00000000004051c4\n.text:00000000004051c8\n.text:00000000004051ca\n.text:00000000004051cb\n.text:00000000004051ce\n.text:00000000004051d1\n.text:00000000004051d3\n.text:00000000004051d5\n'
p741
tp742
sS'x2realloc'
p743
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p744
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p745
S'MOV EDX,0x1\nJMP 0x00404af0\n'
p746
S'ba 01 00 00 00\neb 89\n'
p747
S'.text:0000000000404b60\n.text:0000000000404b65\n'
p748
tp749
sS'strlen'
p750
(S'\n__stdcall strlen(char * __s)\n'
p751
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_00609088)();\u000a  return sVar1;\u000a}\u000a\u000a
p752
S'JMP qword ptr [0x00609088]\n'
p753
S'ff 25 62 7c 20 00\n'
p754
S'.plt:0000000000401420\n'
p755
tp756
sS'memcmp'
p757
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p758
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_006090e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p759
S'JMP qword ptr [0x006090e8]\n'
p760
S'ff 25 02 7c 20 00\n'
p761
S'.plt:00000000004014e0\n'
p762
tp763
sS'quotearg_n_style_mem'
p764
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p765
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p766
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00403e90\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403c60\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p767
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p768
S'.text:0000000000403ef0\n.text:0000000000403ef1\n.text:0000000000403ef3\n.text:0000000000403ef5\n.text:0000000000403ef6\n.text:0000000000403efa\n.text:0000000000403efd\n.text:0000000000403f00\n.text:0000000000403f02\n.text:0000000000403f05\n.text:0000000000403f08\n.text:0000000000403f0d\n.text:0000000000403f0f\n.text:0000000000403f12\n.text:0000000000403f15\n.text:0000000000403f18\n.text:0000000000403f1d\n.text:0000000000403f21\n.text:0000000000403f22\n.text:0000000000403f24\n.text:0000000000403f26\n.text:0000000000403f27\n'
p769
tp770
sS'_exit'
p771
(S'\n__stdcall _exit(int __status)\n'
p772
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_00609040)();\u000a  return;\u000a}\u000a\u000a
p773
S'JMP qword ptr [0x00609040]\n'
p774
S'ff 25 aa 7c 20 00\n'
p775
S'.plt:0000000000401390\n'
p776
tp777
sS'emit_stdin_note'
p778
(S'\n__stdcall emit_stdin_note()\n'
p779
V\u000avoid emit_stdin_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,"\u005cnWith no FILE, or when FILE is -, read standard input.\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p780
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x405e0d\nMOV EDX,0x5\nCALL 0x00401400\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004014f0\n'
p781
S'50\n31 ff\nbe 0d 5e 40 00\nba 05 00 00 00\ne8 de fa ff ff\n48 8b 35 3f 79 20 00\n48 89 c7\n58\ne9 be fb ff ff\n'
p782
S'.text:0000000000401910\n.text:0000000000401911\n.text:0000000000401913\n.text:0000000000401918\n.text:000000000040191d\n.text:0000000000401922\n.text:0000000000401929\n.text:000000000040192c\n.text:000000000040192d\n'
p783
tp784
sS'xdectoumax'
p785
(S'\n__stdcall xdectoumax(char * n_str, uintmax_t min, uintmax_t max, char * suffixes, char * err)\n'
p786
V\u000auintmax_t xdectoumax(char *n_str,uintmax_t min,uintmax_t max,char *suffixes,char *err)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  \u000a  uVar1 = xnumtoumax(n_str,10,min,(char *)max,suffixes);\u000a  return uVar1;\u000a}\u000a\u000a
p787
S'PUSH RAX\nMOV R10,R8\nMOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV dword ptr [RSP],R9D\nMOV ESI,0xa\nMOV R8,RAX\nMOV R9,R10\nCALL 0x00404c40\nPOP RCX\nRET\n'
p788
S'50\n4d 89 c2\n48 89 c8\n48 89 d1\n48 89 f2\n44 89 0c 24\nbe 0a 00 00 00\n49 89 c0\n4d 89 d1\ne8 0f ff ff ff\n59\nc3\n'
p789
S'.text:0000000000404d10\n.text:0000000000404d11\n.text:0000000000404d14\n.text:0000000000404d17\n.text:0000000000404d1a\n.text:0000000000404d1d\n.text:0000000000404d21\n.text:0000000000404d26\n.text:0000000000404d29\n.text:0000000000404d2c\n.text:0000000000404d31\n.text:0000000000404d32\n'
p790
tp791
sS'__errno_location'
p792
(S'\n__stdcall __errno_location()\n'
p793
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_00609030)();\u000a  return piVar1;\u000a}\u000a\u000a
p794
S'JMP qword ptr [0x00609030]\n'
p795
S'ff 25 ba 7c 20 00\n'
p796
S'.plt:0000000000401370\n'
p797
tp798
sS'bkm_scale_by_power'
p799
(S'\n__stdcall bkm_scale_by_power(uintmax_t * x)\n'
p800
V\u000astrtol_error bkm_scale_by_power(uintmax_t *x)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  int in_EDX;\u000a  strtol_error sVar2;\u000a  \u000a  sVar2 = LONGINT_OK;\u000a  if (in_EDX != 0) {\u000a    do {\u000a      sVar1 = bkm_scale(x);\u000a      sVar2 = sVar2 | sVar1;\u000a      in_EDX = in_EDX + -1;\u000a    } while (in_EDX != 0);\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p801
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R14D,ESI\nMOV R15,RDI\nXOR EBP,EBP\nTEST EBX,EBX\nJZ 0x00405011\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nMOV ESI,R14D\nCALL 0x00404fb0\nOR EBP,EAX\nDEC EBX\nJNZ 0x00405000\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p802
S'55\n41 57\n41 56\n53\n50\n89 d3\n41 89 f6\n49 89 ff\n31 ed\n85 db\n74 1c\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\n44 89 f6\ne8 a5 ff ff ff\n09 c5\nff cb\n75 ef\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p803
S'.text:0000000000404fe0\n.text:0000000000404fe1\n.text:0000000000404fe3\n.text:0000000000404fe5\n.text:0000000000404fe6\n.text:0000000000404fe7\n.text:0000000000404fe9\n.text:0000000000404fec\n.text:0000000000404fef\n.text:0000000000404ff1\n.text:0000000000404ff3\n.text:0000000000404ff5\n.text:0000000000405000\n.text:0000000000405003\n.text:0000000000405006\n.text:000000000040500b\n.text:000000000040500d\n.text:000000000040500f\n.text:0000000000405011\n.text:0000000000405013\n.text:0000000000405017\n.text:0000000000405018\n.text:000000000040501a\n.text:000000000040501c\n.text:000000000040501d\n'
p804
tp805
sS'x2nrealloc'
p806
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p807
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p808
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x00404b1c\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00404b49\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x00404b3a\nTEST RCX,RCX\nJNZ 0x00404b3a\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00404ac0\nPUSH RAX\nCALL 0x00404c10\n'
p809
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p810
S'.text:0000000000404af0\n.text:0000000000404af3\n.text:0000000000404af6\n.text:0000000000404af9\n.text:0000000000404afb\n.text:0000000000404b05\n.text:0000000000404b07\n.text:0000000000404b0a\n.text:0000000000404b0d\n.text:0000000000404b0f\n.text:0000000000404b12\n.text:0000000000404b15\n.text:0000000000404b1a\n.text:0000000000404b1c\n.text:0000000000404b1f\n.text:0000000000404b21\n.text:0000000000404b26\n.text:0000000000404b28\n.text:0000000000404b2b\n.text:0000000000404b2d\n.text:0000000000404b34\n.text:0000000000404b37\n.text:0000000000404b3a\n.text:0000000000404b3d\n.text:0000000000404b41\n.text:0000000000404b44\n.text:0000000000404b49\n.text:0000000000404b4a\n'
p811
tp812
sS'xrealloc'
p813
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p814
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p815
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00404ad7\nTEST RBX,RBX\nJNZ 0x00404ad7\nCALL 0x00401350\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x004015c0\nTEST RBX,RBX\nJZ 0x00404ae9\nTEST RAX,RAX\nJZ 0x00404aeb\nPOP RBX\nRET\nCALL 0x00404c10\n'
p816
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 7d c8 ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 e1 ca ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p817
S'.text:0000000000404ac0\n.text:0000000000404ac1\n.text:0000000000404ac4\n.text:0000000000404ac7\n.text:0000000000404ac9\n.text:0000000000404acc\n.text:0000000000404ace\n.text:0000000000404ad3\n.text:0000000000404ad5\n.text:0000000000404ad6\n.text:0000000000404ad7\n.text:0000000000404ada\n.text:0000000000404adf\n.text:0000000000404ae2\n.text:0000000000404ae4\n.text:0000000000404ae7\n.text:0000000000404ae9\n.text:0000000000404aea\n.text:0000000000404aeb\n'
p818
tp819
sS'quotearg_n_options'
p820
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p821
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p822
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401370\nTEST R12D,R12D\nJS 0x00403e11\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x00609200]\nCMP dword ptr [0x00609208],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x00403d2b\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x609210\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00404ac0\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x00609200],R15\nJNZ 0x00403cf2\nMOVUPS XMM0,xmmword ptr [0x00609210]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x00609208]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00401490\nMOV dword ptr [0x00609208],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00402e80\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x00403d8d\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x00403dfb\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x614330\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00403db8\nCALL 0x00401350\nMOV RDI,R15\nCALL 0x00404b50\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00402e80\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401360\n'
p823
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 f1 d6 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 66 55 20 00\n44 39 25 67 55 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 10 92 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 e8 0d 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 1b 55 20 00\n75 0b\n0f 10 05 22 55 20 00\n41 0f 11 07\n8b 05 10 55 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 7d d7 ff ff\n89 1d ef 54 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 30 43 61 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 98 d5 ff ff\n4c 89 ff\ne8 90 0d 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 4a d5 ff ff\n'
p824
S'.text:0000000000403c60\n.text:0000000000403c61\n.text:0000000000403c63\n.text:0000000000403c65\n.text:0000000000403c67\n.text:0000000000403c69\n.text:0000000000403c6a\n.text:0000000000403c6e\n.text:0000000000403c71\n.text:0000000000403c74\n.text:0000000000403c77\n.text:0000000000403c7a\n.text:0000000000403c7f\n.text:0000000000403c82\n.text:0000000000403c88\n.text:0000000000403c8d\n.text:0000000000403c8f\n.text:0000000000403c93\n.text:0000000000403c9a\n.text:0000000000403ca1\n.text:0000000000403ca6\n.text:0000000000403cab\n.text:0000000000403cb0\n.text:0000000000403cb2\n.text:0000000000403cb7\n.text:0000000000403cba\n.text:0000000000403cbd\n.text:0000000000403cc3\n.text:0000000000403cc5\n.text:0000000000403cc8\n.text:0000000000403ccc\n.text:0000000000403ccf\n.text:0000000000403cd3\n.text:0000000000403cd8\n.text:0000000000403cdb\n.text:0000000000403cde\n.text:0000000000403ce5\n.text:0000000000403ce7\n.text:0000000000403cee\n.text:0000000000403cf2\n.text:0000000000403cf8\n.text:0000000000403cfb\n.text:0000000000403cff\n.text:0000000000403d02\n.text:0000000000403d05\n.text:0000000000403d09\n.text:0000000000403d0b\n.text:0000000000403d0e\n.text:0000000000403d13\n.text:0000000000403d19\n.text:0000000000403d1c\n.text:0000000000403d21\n.text:0000000000403d26\n.text:0000000000403d2b\n.text:0000000000403d2e\n.text:0000000000403d32\n.text:0000000000403d36\n.text:0000000000403d3b\n.text:0000000000403d3f\n.text:0000000000403d43\n.text:0000000000403d47\n.text:0000000000403d4b\n.text:0000000000403d4f\n.text:0000000000403d54\n.text:0000000000403d57\n.text:0000000000403d5a\n.text:0000000000403d5d\n.text:0000000000403d62\n.text:0000000000403d65\n.text:0000000000403d68\n.text:0000000000403d6b\n.text:0000000000403d6c\n.text:0000000000403d71\n.text:0000000000403d75\n.text:0000000000403d78\n.text:0000000000403d7b\n.text:0000000000403d7d\n.text:0000000000403d82\n.text:0000000000403d86\n.text:0000000000403d8b\n.text:0000000000403d8d\n.text:0000000000403d91\n.text:0000000000403d96\n.text:0000000000403d99\n.text:0000000000403d9c\n.text:0000000000403da1\n.text:0000000000403da6\n.text:0000000000403da9\n.text:0000000000403dae\n.text:0000000000403db1\n.text:0000000000403db3\n.text:0000000000403db8\n.text:0000000000403dbb\n.text:0000000000403dc0\n.text:0000000000403dc3\n.text:0000000000403dc6\n.text:0000000000403dcb\n.text:0000000000403dce\n.text:0000000000403dd2\n.text:0000000000403dd5\n.text:0000000000403dd8\n.text:0000000000403ddd\n.text:0000000000403de2\n.text:0000000000403de7\n.text:0000000000403dea\n.text:0000000000403ded\n.text:0000000000403dee\n.text:0000000000403df3\n.text:0000000000403df7\n.text:0000000000403dfb\n.text:0000000000403dff\n.text:0000000000403e02\n.text:0000000000403e06\n.text:0000000000403e07\n.text:0000000000403e09\n.text:0000000000403e0b\n.text:0000000000403e0d\n.text:0000000000403e0f\n.text:0000000000403e10\n.text:0000000000403e11\n'
p825
tp826
sS'strcmp'
p827
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p828
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_00609108)();\u000a  return iVar1;\u000a}\u000a\u000a
p829
S'JMP qword ptr [0x00609108]\n'
p830
S'ff 25 e2 7b 20 00\n'
p831
S'.plt:0000000000401520\n'
p832
tp833
sS'set_custom_quoting'
p834
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p835
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p836
S'TEST RDI,RDI\nMOV EAX,0x6142f0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00402df5\nTEST RDX,RDX\nJZ 0x00402df5\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00401360\n'
p837
S'48 85 ff\nb8 f0 42 61 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 65 e5 ff ff\n'
p838
S'.text:0000000000402dd0\n.text:0000000000402dd3\n.text:0000000000402dd8\n.text:0000000000402ddc\n.text:0000000000402de2\n.text:0000000000402de5\n.text:0000000000402de7\n.text:0000000000402dea\n.text:0000000000402dec\n.text:0000000000402df0\n.text:0000000000402df4\n.text:0000000000402df5\n.text:0000000000402df6\n'
p839
tp840
sS'c_isalpha'
p841
(S'\n__stdcall c_isalpha()\n'
p842
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p843
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x004051fb\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p844
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p845
S'.text:00000000004051e0\n.text:00000000004051e3\n.text:00000000004051e6\n.text:00000000004051e8\n.text:00000000004051f2\n.text:00000000004051f4\n.text:00000000004051f7\n.text:00000000004051fa\n.text:00000000004051fb\n.text:00000000004051fd\n'
p846
tp847
sS'quotearg_custom_mem'
p848
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p849
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p850
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00404070\n'
p851
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p852
S'.text:0000000000404100\n.text:0000000000404103\n.text:0000000000404106\n.text:0000000000404109\n.text:000000000040410c\n.text:000000000040410e\n.text:0000000000404111\n'
p853
tp854
sS'close_stdout'
p855
(S'\n__stdcall close_stdout()\n'
p856
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00402b97;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x406076,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00402b97:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p857
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x00609268]\nCALL 0x00405300\nTEST EAX,EAX\nJZ 0x00402b97\nCMP byte ptr [0x006142e0],0x0\nJZ 0x00402bac\nCALL 0x00401370\nCMP dword ptr [RAX],0x20\nJNZ 0x00402bac\nMOV RDI,qword ptr [0x006092a0]\nCALL 0x00405300\nTEST EAX,EAX\nJNZ 0x00402bf1\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x406066\nMOV EDX,0x5\nCALL 0x00401400\nMOV R14,RAX\nMOV RBX,qword ptr [0x006142d8]\nCALL 0x00401370\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x00402bfc\nXOR EDI,EDI\nMOV EDX,0x406076\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00401610\nMOV EDI,dword ptr [0x006091f8]\nCALL 0x00401390\nMOV EDI,dword ptr [0x006091f8]\nCALL 0x00401390\nMOV RDI,RBX\nCALL 0x00403ff0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x406072\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00401610\nMOV EDI,dword ptr [0x006091f8]\nCALL 0x00401390\n'
p858
S'55\n41 56\n53\n48 8b 3d ed 66 20 00\ne8 80 27 00 00\n85 c0\n74 13\n80 3d 55 17 21 00 00\n74 1f\ne8 de e7 ff ff\n83 38 20\n75 15\n48 8b 3d 02 67 20 00\ne8 5d 27 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe 66 60 40 00\nba 05 00 00 00\ne8 43 e8 ff ff\n49 89 c6\n48 8b 1d 11 17 21 00\ne8 a4 e7 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 76 60 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 2a ea ff ff\n8b 3d 0c 66 20 00\ne8 9f e7 ff ff\n8b 3d 01 66 20 00\ne8 94 e7 ff ff\n48 89 df\ne8 ec 13 00 00\n48 89 c1\n31 ff\nba 72 60 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 f6 e9 ff ff\n8b 3d d8 65 20 00\ne8 6b e7 ff ff\n'
p859
S'.text:0000000000402b70\n.text:0000000000402b71\n.text:0000000000402b73\n.text:0000000000402b74\n.text:0000000000402b7b\n.text:0000000000402b80\n.text:0000000000402b82\n.text:0000000000402b84\n.text:0000000000402b8b\n.text:0000000000402b8d\n.text:0000000000402b92\n.text:0000000000402b95\n.text:0000000000402b97\n.text:0000000000402b9e\n.text:0000000000402ba3\n.text:0000000000402ba5\n.text:0000000000402ba7\n.text:0000000000402ba8\n.text:0000000000402baa\n.text:0000000000402bab\n.text:0000000000402bac\n.text:0000000000402bae\n.text:0000000000402bb3\n.text:0000000000402bb8\n.text:0000000000402bbd\n.text:0000000000402bc0\n.text:0000000000402bc7\n.text:0000000000402bcc\n.text:0000000000402bcf\n.text:0000000000402bd1\n.text:0000000000402bd3\n.text:0000000000402bd5\n.text:0000000000402bda\n.text:0000000000402bdc\n.text:0000000000402bde\n.text:0000000000402be1\n.text:0000000000402be6\n.text:0000000000402bec\n.text:0000000000402bf1\n.text:0000000000402bf7\n.text:0000000000402bfc\n.text:0000000000402bff\n.text:0000000000402c04\n.text:0000000000402c07\n.text:0000000000402c09\n.text:0000000000402c0e\n.text:0000000000402c10\n.text:0000000000402c12\n.text:0000000000402c15\n.text:0000000000402c1a\n.text:0000000000402c20\n'
p860
tp861
sS'version_etc_ar'
p862
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p863
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p864
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x004048d0\nJMP 0x00404560\n'
p865
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p866
S'.text:00000000004048c0\n.text:00000000004048c7\n.text:00000000004048d0\n.text:00000000004048d6\n.text:00000000004048da\n.text:00000000004048dc\n'
p867
tp868
sS'strtoumax'
p869
(S'\n__stdcall strtoumax(char * __nptr, char * * __endptr, int __base)\n'
p870
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000auintmax_t strtoumax(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoumax_006091a0)();\u000a  return uVar1;\u000a}\u000a\u000a
p871
S'JMP qword ptr [0x006091a0]\n'
p872
S'ff 25 4a 7b 20 00\n'
p873
S'.plt:0000000000401650\n'
p874
tp875
sS'put_paragraph'
p876
(S'\n__stdcall put_paragraph(WORD * finish)\n'
p877
V\u000avoid put_paragraph(WORD *finish)\u000a\u000a{\u000a  WORD *w;\u000a  \u000a  put_line((WORD *)unused_word_type);\u000a  w = unused_word_type[0].next_break;\u000a  while (w != finish) {\u000a    put_line(w);\u000a    w = w->next_break;\u000a  }\u000a  return;\u000a}\u000a\u000a
p878
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV ESI,dword ptr [0x006092f8]\nMOV EDI,0x60a690\nCALL 0x00402a60\nMOV RBX,qword ptr [0x0060a6b0]\nCMP RBX,R14\nJZ 0x004022e7\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV ESI,dword ptr [0x006092d4]\nMOV RDI,RBX\nCALL 0x00402a60\nMOV RBX,qword ptr [RBX + 0x20]\nCMP RBX,R14\nJNZ 0x004022d0\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p879
S'41 56\n53\n50\n49 89 fe\n8b 35 4b 70 20 00\nbf 90 a6 60 00\ne8 a9 07 00 00\n48 8b 1d f2 83 20 00\n4c 39 f3\n74 24\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n8b 35 fe 6f 20 00\n48 89 df\ne8 82 07 00 00\n48 8b 5b 20\n4c 39 f3\n75 e9\n48 83 c4 08\n5b\n41 5e\nc3\n'
p880
S'.text:00000000004022a0\n.text:00000000004022a2\n.text:00000000004022a3\n.text:00000000004022a4\n.text:00000000004022a7\n.text:00000000004022ad\n.text:00000000004022b2\n.text:00000000004022b7\n.text:00000000004022be\n.text:00000000004022c1\n.text:00000000004022c3\n.text:00000000004022d0\n.text:00000000004022d6\n.text:00000000004022d9\n.text:00000000004022de\n.text:00000000004022e2\n.text:00000000004022e5\n.text:00000000004022e7\n.text:00000000004022eb\n.text:00000000004022ec\n.text:00000000004022ee\n'
p881
tp882
sS'set_other_indent'
p883
(S'\n__stdcall set_other_indent()\n'
p884
V\u000avoid set_other_indent(char cParm1)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  \u000a  iVar1 = first_indent;\u000a  if (split != 1) {\u000a    if (crown == 1) {\u000a      piVar2 = &first_indent;\u000a      if (cParm1 != 0) {\u000a        piVar2 = &in_column;\u000a      }\u000a      iVar1 = *piVar2;\u000a    }\u000a    else {\u000a      iVar1 = first_indent;\u000a      if ((tagged == 1) &&\u000a         (((cParm1 == 0 || (iVar1 = in_column, in_column == first_indent)) &&\u000a          (iVar1 = other_indent, other_indent == first_indent)))) {\u000a        iVar1 = (uint)(first_indent == 0) * 3;\u000a      }\u000a    }\u000a  }\u000a  other_indent = iVar1;\u000a  return;\u000a}\u000a\u000a
p885
S'CMP byte ptr [0x006092b1],0x1\nJNZ 0x00402601\nMOV ECX,dword ptr [0x006092f8]\nJMP 0x00402653\nCMP byte ptr [0x006092b3],0x1\nJNZ 0x0040261f\nMOV EAX,0x6092e8\nMOV ECX,0x6092f8\nTEST DIL,DIL\nCMOVNZ RCX,RAX\nMOV ECX,dword ptr [RCX]\nJMP 0x00402653\nMOV EAX,dword ptr [0x006092f8]\nCMP byte ptr [0x006092b2],0x1\nJNZ 0x00402651\nTEST DIL,DIL\nJZ 0x0040263d\nMOV ECX,dword ptr [0x006092e8]\nCMP ECX,EAX\nJNZ 0x00402653\nCMP dword ptr [0x006092d4],EAX\nJNZ 0x00402659\nXOR ECX,ECX\nTEST EAX,EAX\nSETZ CL\nLEA ECX,[RCX + RCX*0x2]\nJMP 0x00402653\nMOV ECX,EAX\nMOV dword ptr [0x006092d4],ECX\nRET\n'
p886
S'80 3d ba 6c 20 00 01\n75 08\n8b 0d f9 6c 20 00\neb 52\n80 3d ab 6c 20 00 01\n75 15\nb8 e8 92 60 00\nb9 f8 92 60 00\n40 84 ff\n48 0f 45 c8\n8b 09\neb 34\n8b 05 d3 6c 20 00\n80 3d 86 6c 20 00 01\n75 23\n40 84 ff\n74 0a\n8b 0d af 6c 20 00\n39 c1\n75 16\n39 05 91 6c 20 00\n75 14\n31 c9\n85 c0\n0f 94 c1\n8d 0c 49\neb 02\n89 c1\n89 0d 7b 6c 20 00\nc3\n'
p887
S'.text:00000000004025f0\n.text:00000000004025f7\n.text:00000000004025f9\n.text:00000000004025ff\n.text:0000000000402601\n.text:0000000000402608\n.text:000000000040260a\n.text:000000000040260f\n.text:0000000000402614\n.text:0000000000402617\n.text:000000000040261b\n.text:000000000040261d\n.text:000000000040261f\n.text:0000000000402625\n.text:000000000040262c\n.text:000000000040262e\n.text:0000000000402631\n.text:0000000000402633\n.text:0000000000402639\n.text:000000000040263b\n.text:000000000040263d\n.text:0000000000402643\n.text:0000000000402645\n.text:0000000000402647\n.text:0000000000402649\n.text:000000000040264c\n.text:000000000040264f\n.text:0000000000402651\n.text:0000000000402653\n.text:0000000000402659\n'
p888
tp889
sS'rpl_calloc'
p890
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p891
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_00609100)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p892
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x0040505b\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00405060\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00405060\nPUSH RAX\nCALL 0x00401370\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x00401510\n'
p893
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 1f c3 ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 a5 c4 ff ff\n'
p894
S'.text:0000000000405020\n.text:0000000000405023\n.text:0000000000405028\n.text:000000000040502a\n.text:000000000040502d\n.text:0000000000405032\n.text:0000000000405034\n.text:0000000000405037\n.text:000000000040503b\n.text:000000000040503d\n.text:0000000000405040\n.text:0000000000405043\n.text:0000000000405046\n.text:0000000000405049\n.text:000000000040504b\n.text:000000000040504c\n.text:0000000000405051\n.text:0000000000405057\n.text:0000000000405059\n.text:000000000040505a\n.text:000000000040505b\n.text:0000000000405060\n.text:0000000000405063\n.text:0000000000405066\n'
p895
tp896
sS'memset'
p897
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p898
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_006090c0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p899
S'JMP qword ptr [0x006090c0]\n'
p900
S'ff 25 2a 7c 20 00\n'
p901
S'.plt:0000000000401490\n'
p902
tp903
sS'c_isxdigit'
p904
(S'\n__stdcall c_isxdigit()\n'
p905
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p906
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x004052db\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p907
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p908
S'.text:00000000004052c0\n.text:00000000004052c3\n.text:00000000004052c6\n.text:00000000004052c8\n.text:00000000004052d2\n.text:00000000004052d4\n.text:00000000004052d7\n.text:00000000004052da\n.text:00000000004052db\n.text:00000000004052dd\n'
p909
tp910
sS'__libc_csu_fini'
p911
(S'\n__stdcall __libc_csu_fini()\n'
p912
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p913
S'RET\n'
p914
S'f3 c3\n'
p915
S'.text:0000000000405710\n'
p916
tp917
sS'getc_unlocked'
p918
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p919
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_00609058)();\u000a  return iVar1;\u000a}\u000a\u000a
p920
S'JMP qword ptr [0x00609058]\n'
p921
S'ff 25 92 7c 20 00\n'
p922
S'.plt:00000000004013c0\n'
p923
tp924
sS'abort'
p925
(S'\n__stdcall abort()\n'
p926
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_00609028)();\u000a  return;\u000a}\u000a\u000a
p927
S'JMP qword ptr [0x00609028]\n'
p928
S'ff 25 c2 7c 20 00\n'
p929
S'.plt:0000000000401360\n'
p930
tp931
sS'memmove'
p932
(S'\n__stdcall memmove(void * __dest, void * __src, size_t __n)\n'
p933
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memmove(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memmove_00609178)();\u000a  return pvVar1;\u000a}\u000a\u000a
p934
S'JMP qword ptr [0x00609178]\n'
p935
S'ff 25 72 7b 20 00\n'
p936
S'.plt:0000000000401600\n'
p937
tp938
sS'c_isascii'
p939
(S'\n__stdcall c_isascii()\n'
p940
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p941
S'CMP EDI,0x80\nSETC AL\nRET\n'
p942
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p943
S'.text:0000000000405200\n.text:0000000000405206\n.text:0000000000405209\n'
p944
tp945
sS'version_etc'
p946
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p947
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p948
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00404992\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x004048f0\nADD RSP,0xd8\nRET\n'
p949
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p950
S'.text:0000000000404950\n.text:0000000000404957\n.text:0000000000404959\n.text:000000000040495b\n.text:0000000000404960\n.text:0000000000404965\n.text:000000000040496a\n.text:0000000000404972\n.text:000000000040497a\n.text:0000000000404982\n.text:000000000040498a\n.text:0000000000404992\n.text:0000000000404997\n.text:000000000040499c\n.text:00000000004049a1\n.text:00000000004049a6\n.text:00000000004049ae\n.text:00000000004049b3\n.text:00000000004049bb\n.text:00000000004049c2\n.text:00000000004049c5\n.text:00000000004049ca\n.text:00000000004049d1\n'
p951
tp952
sS'posix_fadvise'
p953
(S'\n__stdcall posix_fadvise(int __fd, __off_t __offset, __off_t __len, int __advise)\n'
p954
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint posix_fadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_posix_fadvise_006090d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p955
S'JMP qword ptr [0x006090d8]\n'
p956
S'ff 25 12 7c 20 00\n'
p957
S'.plt:00000000004014c0\n'
p958
tp959
sS'__ctype_b_loc'
p960
(S'\n__stdcall __ctype_b_loc()\n'
p961
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_006091d8)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p962
S'JMP qword ptr [0x006091d8]\n'
p963
S'ff 25 12 7b 20 00\n'
p964
S'.plt:00000000004016c0\n'
p965
tp966
sS'lseek'
p967
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p968
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_006090b0)();\u000a  return _Var1;\u000a}\u000a\u000a
p969
S'JMP qword ptr [0x006090b0]\n'
p970
S'ff 25 3a 7c 20 00\n'
p971
S'.plt:0000000000401470\n'
p972
tp973
sS'fdadvise'
p974
(S'\n__stdcall fdadvise(int __fd, __off_t __offset, __off_t __len, int __advise)\n'
p975
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fdadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_posix_fadvise_006090d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p976
S'JMP 0x004014c0\n'
p977
S'e9 8b e8 ff ff\n'
p978
S'.text:0000000000402c30\n'
p979
tp980
sS'quotearg'
p981
(S'\n__stdcall quotearg(char * arg)\n'
p982
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p983
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00403c50\n'
p984
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p985
S'.text:0000000000403e30\n.text:0000000000403e33\n.text:0000000000403e35\n.text:0000000000403e38\n'
p986
tp987
sS'_start'
p988
(S'\n__stdcall _start()\n'
p989
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00608ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p990
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x405710\nMOV RCX,0x4056a0\nMOV RDI,0x401aa0\nCALL qword ptr [0x00608ff0]\nHLT\n'
p991
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 10 57 40 00\n48 c7 c1 a0 56 40 00\n48 c7 c7 a0 1a 40 00\nff 15 f6 78 20 00\nf4\n'
p992
S'.text:00000000004016d0\n.text:00000000004016d2\n.text:00000000004016d5\n.text:00000000004016d6\n.text:00000000004016d9\n.text:00000000004016dd\n.text:00000000004016de\n.text:00000000004016df\n.text:00000000004016e6\n.text:00000000004016ed\n.text:00000000004016f4\n.text:00000000004016fa\n'
p993
tp994
sS'c_iscntrl'
p995
(S'\n__stdcall c_iscntrl()\n'
p996
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p997
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00405228\nRET\nCMP EDI,0x7f\nJZ 0x00405227\nXOR EAX,EAX\nRET\n'
p998
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p999
S'.text:0000000000405220\n.text:0000000000405222\n.text:0000000000405225\n.text:0000000000405227\n.text:0000000000405228\n.text:000000000040522b\n.text:000000000040522d\n.text:000000000040522f\n'
p1000
tp1001
sS'same_para'
p1002
(S'\n__stdcall same_para()\n'
p1003
V\u000a_Bool same_para(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (next_prefix_indent == prefix_indent) {\u000a    return (_Bool)((in_EDI != -1 && in_EDI != 10) &&\u000a                  next_prefix_indent + prefix_full_length <= in_column);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1004
S'MOV EAX,dword ptr [0x006092ec]\nCMP EAX,dword ptr [0x006092f4]\nJNZ 0x0040268e\nADD EAX,dword ptr [0x006092c0]\nCMP dword ptr [0x006092e8],EAX\nSETGE CL\nCMP EDI,0xa\nSETNZ DL\nCMP EDI,-0x1\nSETNZ AL\nAND AL,DL\nAND AL,CL\nRET\nXOR EAX,EAX\nRET\n'
p1005
S'8b 05 86 6c 20 00\n3b 05 88 6c 20 00\n75 20\n03 05 4c 6c 20 00\n39 05 6e 6c 20 00\n0f 9d c1\n83 ff 0a\n0f 95 c2\n83 ff ff\n0f 95 c0\n20 d0\n20 c8\nc3\n31 c0\nc3\n'
p1006
S'.text:0000000000402660\n.text:0000000000402666\n.text:000000000040266c\n.text:000000000040266e\n.text:0000000000402674\n.text:000000000040267a\n.text:000000000040267d\n.text:0000000000402680\n.text:0000000000402683\n.text:0000000000402686\n.text:0000000000402689\n.text:000000000040268b\n.text:000000000040268d\n.text:000000000040268e\n.text:0000000000402690\n'
p1007
tp1008
sS'c_isblank'
p1009
(S'\n__stdcall c_isblank()\n'
p1010
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1011
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1012
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1013
S'.text:0000000000405210\n.text:0000000000405213\n.text:0000000000405216\n.text:0000000000405219\n.text:000000000040521c\n.text:000000000040521e\n'
p1014
tp1015
sS'base_cost'
p1016
(S'\n__stdcall base_cost(void * this)\n'
p1017
V\u000aCOST __thiscall base_cost(void *this)\u000a\u000a{\u000a  byte bVar1;\u000a  COST CVar2;\u000a  \u000a  if (unused_word_type < this) {\u000a    bVar1 = *(byte *)((long)this + -0x18);\u000a    if ((bVar1 & 2) != 0) {\u000a      CVar2 = 0x960;\u000a      if ((bVar1 & 8) == 0) {\u000a        CVar2 = 0x59164;\u000a      }\u000a      goto LAB_00402a28;\u000a    }\u000a    if ((bVar1 & 4) != 0) {\u000a      CVar2 = 0xce4;\u000a      goto LAB_00402a28;\u000a    }\u000a    if (this < (void *)((long)&unused_word_type[1].text + 1U)) {\u000a      CVar2 = 0x1324;\u000a      goto LAB_00402a28;\u000a    }\u000a    if ((*(byte *)((long)this + -0x40) & 8) != 0) {\u000a      CVar2 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(40000)) /\u000a                     SEXT816((long)*(int *)((long)this + -0x20) + 2),0) + 0x1324;\u000a      goto LAB_00402a28;\u000a    }\u000a  }\u000a  CVar2 = 0x1324;\u000aLAB_00402a28:\u000a  if ((*(byte *)((long)this + 0x10) & 1) != 0) {\u000a    return CVar2 + 0xfffff9c0;\u000a  }\u000a  if ((*(byte *)((long)this + 0x10) & 8) != 0) {\u000a    CVar2 = CVar2 + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x57e4)) /\u000a                           SEXT816((long)*(int *)((long)this + 8) + 2),0);\u000a  }\u000a  return CVar2;\u000a}\u000a\u000a
p1018
S'MOV EAX,0x60a690\nCMP RDI,RAX\nJBE 0x004029e5\nMOV AL,byte ptr [RDI + -0x18]\nTEST AL,0x2\nJNZ 0x004029ec\nTEST AL,0x4\nJNZ 0x004029fe\nMOV EAX,0x60a6b8\nCMP RDI,RAX\nJBE 0x00402a05\nTEST byte ptr [RDI + -0x40],0x8\nJNZ 0x00402a0c\nMOV ECX,0x1324\nJMP 0x00402a28\nTEST AL,0x8\nMOV EAX,0x59164\nMOV ECX,0x960\nCMOVZ RCX,RAX\nJMP 0x00402a28\nMOV ECX,0xce4\nJMP 0x00402a28\nMOV ECX,0x1324\nJMP 0x00402a28\nMOVSXD RCX,dword ptr [RDI + -0x20]\nADD RCX,0x2\nMOV EAX,0x9c40\nXOR EDX,EDX\nIDIV RCX\nMOV RCX,RAX\nADD RCX,0x1324\nMOV AL,byte ptr [RDI + 0x10]\nTEST AL,0x1\nJNZ 0x00402a4c\nTEST AL,0x8\nJZ 0x00402a48\nMOVSXD RSI,dword ptr [RDI + 0x8]\nADD RSI,0x2\nMOV EAX,0x57e4\nXOR EDX,EDX\nIDIV RSI\nADD RCX,RAX\nMOV RAX,RCX\nRET\nADD RCX,0xfffff9c0\nMOV RAX,RCX\nRET\n'
p1019
S'b8 90 a6 60 00\n48 39 c7\n76 1b\n8a 47 e8\na8 02\n75 1b\na8 04\n75 29\nb8 b8 a6 60 00\n48 39 c7\n76 26\nf6 47 c0 08\n75 27\nb9 24 13 00 00\neb 3c\na8 08\nb8 64 91 05 00\nb9 60 09 00 00\n48 0f 44 c8\neb 2a\nb9 e4 0c 00 00\neb 23\nb9 24 13 00 00\neb 1c\n48 63 4f e0\n48 83 c1 02\nb8 40 9c 00 00\n31 d2\n48 f7 f9\n48 89 c1\n48 81 c1 24 13 00 00\n8a 47 10\na8 01\n75 1d\na8 08\n74 15\n48 63 77 08\n48 83 c6 02\nb8 e4 57 00 00\n31 d2\n48 f7 fe\n48 01 c1\n48 89 c8\nc3\n48 81 c1 c0 f9 ff ff\n48 89 c8\nc3\n'
p1020
S'.text:00000000004029c0\n.text:00000000004029c5\n.text:00000000004029c8\n.text:00000000004029ca\n.text:00000000004029cd\n.text:00000000004029cf\n.text:00000000004029d1\n.text:00000000004029d3\n.text:00000000004029d5\n.text:00000000004029da\n.text:00000000004029dd\n.text:00000000004029df\n.text:00000000004029e3\n.text:00000000004029e5\n.text:00000000004029ea\n.text:00000000004029ec\n.text:00000000004029ee\n.text:00000000004029f3\n.text:00000000004029f8\n.text:00000000004029fc\n.text:00000000004029fe\n.text:0000000000402a03\n.text:0000000000402a05\n.text:0000000000402a0a\n.text:0000000000402a0c\n.text:0000000000402a10\n.text:0000000000402a14\n.text:0000000000402a19\n.text:0000000000402a1b\n.text:0000000000402a1e\n.text:0000000000402a21\n.text:0000000000402a28\n.text:0000000000402a2b\n.text:0000000000402a2d\n.text:0000000000402a2f\n.text:0000000000402a31\n.text:0000000000402a33\n.text:0000000000402a37\n.text:0000000000402a3b\n.text:0000000000402a40\n.text:0000000000402a42\n.text:0000000000402a45\n.text:0000000000402a48\n.text:0000000000402a4b\n.text:0000000000402a4c\n.text:0000000000402a53\n.text:0000000000402a56\n'
p1021
tp1022
sS'quotearg_n_mem'
p1023
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p1024
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p1025
S'MOV ECX,0x6142f0\nJMP 0x00403c60\n'
p1026
S'b9 f0 42 61 00\ne9 36 fe ff ff\n'
p1027
S'.text:0000000000403e20\n.text:0000000000403e25\n'
p1028
tp1029
sS'atexit'
p1030
(S'\n__stdcall atexit(__func * __func)\n'
p1031
V\u000a/* WARNING: Removing unreachable block (ram,0x00405740) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_006091a8)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1032
S'MOV RAX,0x6091e8\nTEST RAX,RAX\nJZ 0x00405740\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401660\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401660\n'
p1033
S'48 c7 c0 e8 91 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 2a bf ff ff\n31 d2\n31 f6\ne9 17 bf ff ff\n'
p1034
S'.text:0000000000405720\n.text:0000000000405727\n.text:000000000040572a\n.text:000000000040572c\n.text:000000000040572f\n.text:0000000000405731\n.text:0000000000405740\n.text:0000000000405742\n.text:0000000000405744\n'
p1035
tp1036
sS'__printf_chk'
p1037
(S'\n__stdcall __printf_chk()\n'
p1038
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_00609170)();\u000a  return;\u000a}\u000a\u000a
p1039
S'JMP qword ptr [0x00609170]\n'
p1040
S'ff 25 7a 7b 20 00\n'
p1041
S'.plt:00000000004015f0\n'
p1042
tp1043
sS'fdopen'
p1044
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1045
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_00609160)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1046
S'JMP qword ptr [0x00609160]\n'
p1047
S'ff 25 8a 7b 20 00\n'
p1048
S'.plt:00000000004015d0\n'
p1049
tp1050
sS'error'
p1051
(S'\n__stdcall error()\n'
p1052
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_00609180)();\u000a  return;\u000a}\u000a\u000a
p1053
S'JMP qword ptr [0x00609180]\n'
p1054
S'ff 25 6a 7b 20 00\n'
p1055
S'.plt:0000000000401610\n'
p1056
tp1057
sS'strcaseeq6'
p1058
(S'\n__stdcall strcaseeq6()\n'
p1059
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1060
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004052b0\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x004044f2\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004044f9\nJMP 0x0040450e\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040450e\nTEST BPL,BPL\nJZ 0x00404509\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00404520\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1061
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 d1 0d 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1062
S'.text:00000000004044d0\n.text:00000000004044d1\n.text:00000000004044d2\n.text:00000000004044d3\n.text:00000000004044d5\n.text:00000000004044d8\n.text:00000000004044da\n.text:00000000004044df\n.text:00000000004044e3\n.text:00000000004044e5\n.text:00000000004044e7\n.text:00000000004044ea\n.text:00000000004044ec\n.text:00000000004044ee\n.text:00000000004044f0\n.text:00000000004044f2\n.text:00000000004044f4\n.text:00000000004044f7\n.text:00000000004044f9\n.text:00000000004044fc\n.text:00000000004044fe\n.text:0000000000404501\n.text:0000000000404505\n.text:0000000000404506\n.text:0000000000404507\n.text:0000000000404509\n.text:000000000040450e\n.text:0000000000404512\n.text:0000000000404513\n.text:0000000000404514\n'
p1063
tp1064
sS'strcaseeq5'
p1065
(S'\n__stdcall strcaseeq5()\n'
p1066
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1067
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004052b0\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x004044a6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004044ad\nJMP 0x004044c4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004044c4\nTEST BPL,BPL\nJZ 0x004044bf\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004044d0\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1068
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 1d 0e 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1069
S'.text:0000000000404480\n.text:0000000000404481\n.text:0000000000404483\n.text:0000000000404484\n.text:0000000000404487\n.text:0000000000404489\n.text:000000000040448c\n.text:000000000040448e\n.text:0000000000404493\n.text:0000000000404497\n.text:0000000000404499\n.text:000000000040449b\n.text:000000000040449e\n.text:00000000004044a0\n.text:00000000004044a2\n.text:00000000004044a4\n.text:00000000004044a6\n.text:00000000004044a8\n.text:00000000004044ab\n.text:00000000004044ad\n.text:00000000004044b0\n.text:00000000004044b2\n.text:00000000004044b6\n.text:00000000004044b9\n.text:00000000004044ba\n.text:00000000004044bc\n.text:00000000004044bd\n.text:00000000004044bf\n.text:00000000004044c4\n.text:00000000004044c5\n.text:00000000004044c7\n.text:00000000004044c8\n'
p1070
tp1071
sS'emit_ancillary_info'
p1072
(S'\n__stdcall emit_ancillary_info()\n'
p1073
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x00405960;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("fmt",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "fmt";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,&DAT_00405d12,uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/",&DAT_00405d12);\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x406739;\u000a  if (__s2 == "fmt") {\u000a    uVar3 = 0x405eac;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p1074
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x405960\nMOV ESI,0x405e90\nNOP\nMOV EDI,0x405d12\nCALL 0x00401520\nTEST EAX,EAX\nJZ 0x0040199b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401980\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x405d12\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x405eef\nMOV EDX,0x5\nCALL 0x00401400\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x405da1\nMOV ECX,0x405f06\nXOR EAX,EAX\nCALL 0x004015f0\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x004015e0\nTEST RAX,RAX\nJZ 0x00401a24\nMOV ESI,0x405f2d\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00401380\nTEST EAX,EAX\nJZ 0x00401a24\nXOR EDI,EDI\nMOV ESI,0x405f31\nMOV EDX,0x5\nCALL 0x00401400\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x405d12\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004015f0\nXOR EDI,EDI\nMOV ESI,0x405f76\nMOV EDX,0x5\nCALL 0x00401400\nMOV RSI,RAX\nMOV R14D,0x405d12\nMOV EDI,0x1\nMOV EDX,0x405f06\nMOV ECX,0x405d12\nXOR EAX,EAX\nCALL 0x004015f0\nXOR EDI,EDI\nMOV ESI,0x405f95\nMOV EDX,0x5\nCALL 0x00401400\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x405eac\nMOV ECX,0x406739\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x004015f0\n'
p1075
S'41 56\n53\n50\nbb 60 59 40 00\nbe 90 5e 40 00\n66 90\nbf 12 5d 40 00\ne8 96 fb ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 12 5d 40 00\n48 0f 45 d8\n31 ff\nbe ef 5e 40 00\nba 05 00 00 00\ne8 44 fa ff ff\n48 89 c6\nbf 01 00 00 00\nba a1 5d 40 00\nb9 06 5f 40 00\n31 c0\ne8 1b fc ff ff\nbf 05 00 00 00\n31 f6\ne8 ff fb ff ff\n48 85 c0\n74 3e\nbe 2d 5f 40 00\nba 03 00 00 00\n48 89 c7\ne8 88 f9 ff ff\n85 c0\n74 28\n31 ff\nbe 31 5f 40 00\nba 05 00 00 00\ne8 f3 f9 ff ff\n48 89 c1\nbf 01 00 00 00\nba 12 5d 40 00\n31 c0\n48 89 ce\ne8 cc fb ff ff\n31 ff\nbe 76 5f 40 00\nba 05 00 00 00\ne8 cb f9 ff ff\n48 89 c6\n41 be 12 5d 40 00\nbf 01 00 00 00\nba 06 5f 40 00\nb9 12 5d 40 00\n31 c0\ne8 9c fb ff ff\n31 ff\nbe 95 5f 40 00\nba 05 00 00 00\ne8 9b f9 ff ff\n48 89 c2\n4c 39 f3\nb8 ac 5e 40 00\nb9 39 67 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 5e fb ff ff\n'
p1076
S'.text:0000000000401970\n.text:0000000000401972\n.text:0000000000401973\n.text:0000000000401974\n.text:0000000000401979\n.text:000000000040197e\n.text:0000000000401980\n.text:0000000000401985\n.text:000000000040198a\n.text:000000000040198c\n.text:000000000040198e\n.text:0000000000401992\n.text:0000000000401996\n.text:0000000000401999\n.text:000000000040199b\n.text:000000000040199f\n.text:00000000004019a2\n.text:00000000004019a7\n.text:00000000004019ab\n.text:00000000004019ad\n.text:00000000004019b2\n.text:00000000004019b7\n.text:00000000004019bc\n.text:00000000004019bf\n.text:00000000004019c4\n.text:00000000004019c9\n.text:00000000004019ce\n.text:00000000004019d0\n.text:00000000004019d5\n.text:00000000004019da\n.text:00000000004019dc\n.text:00000000004019e1\n.text:00000000004019e4\n.text:00000000004019e6\n.text:00000000004019eb\n.text:00000000004019f0\n.text:00000000004019f3\n.text:00000000004019f8\n.text:00000000004019fa\n.text:00000000004019fc\n.text:00000000004019fe\n.text:0000000000401a03\n.text:0000000000401a08\n.text:0000000000401a0d\n.text:0000000000401a10\n.text:0000000000401a15\n.text:0000000000401a1a\n.text:0000000000401a1c\n.text:0000000000401a1f\n.text:0000000000401a24\n.text:0000000000401a26\n.text:0000000000401a2b\n.text:0000000000401a30\n.text:0000000000401a35\n.text:0000000000401a38\n.text:0000000000401a3e\n.text:0000000000401a43\n.text:0000000000401a48\n.text:0000000000401a4d\n.text:0000000000401a4f\n.text:0000000000401a54\n.text:0000000000401a56\n.text:0000000000401a5b\n.text:0000000000401a60\n.text:0000000000401a65\n.text:0000000000401a68\n.text:0000000000401a6b\n.text:0000000000401a70\n.text:0000000000401a75\n.text:0000000000401a79\n.text:0000000000401a7e\n.text:0000000000401a80\n.text:0000000000401a83\n.text:0000000000401a86\n.text:0000000000401a8a\n.text:0000000000401a8b\n.text:0000000000401a8d\n'
p1077
tp1078
sS'line_cost'
p1079
(S'\n__stdcall line_cost(WORD * next)\n'
p1080
V\u000aCOST line_cost(WORD *next)\u000a\u000a{\u000a  long lVar1;\u000a  COST CVar2;\u000a  int in_ESI;\u000a  \u000a  if (word_limit != next) {\u000a    lVar1 = ((long)goal_width - (long)in_ESI) * 10;\u000a    CVar2 = lVar1 * lVar1;\u000a    if (next->next_break != word_limit) {\u000a      lVar1 = ((long)in_ESI - (long)next->line_length) * 10;\u000a      CVar2 = CVar2 + ((ulong)(lVar1 * lVar1) >> 1);\u000a    }\u000a    return CVar2;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1081
S'MOV RDX,qword ptr [0x006092e0]\nCMP RDX,RDI\nJZ 0x004029b3\nMOVSXD RAX,dword ptr [0x006092cc]\nMOVSXD RCX,ESI\nSUB RAX,RCX\nADD RAX,RAX\nLEA RAX,[RAX + RAX*0x4]\nIMUL RAX,RAX\nCMP qword ptr [RDI + 0x20],RDX\nJZ 0x004029b2\nMOVSXD RDX,dword ptr [RDI + 0x14]\nSUB RCX,RDX\nADD RCX,RCX\nLEA RCX,[RCX + RCX*0x4]\nIMUL RCX,RCX\nSHR RCX,1\nADD RAX,RCX\nRET\nXOR EAX,EAX\nRET\n'
p1082
S'48 8b 15 69 69 20 00\n48 39 fa\n74 37\n48 63 05 49 69 20 00\n48 63 ce\n48 29 c8\n48 01 c0\n48 8d 04 80\n48 0f af c0\n48 39 57 20\n74 18\n48 63 57 14\n48 29 d1\n48 01 c9\n48 8d 0c 89\n48 0f af c9\n48 d1 e9\n48 01 c8\nc3\n31 c0\nc3\n'
p1083
S'.text:0000000000402970\n.text:0000000000402977\n.text:000000000040297a\n.text:000000000040297c\n.text:0000000000402983\n.text:0000000000402986\n.text:0000000000402989\n.text:000000000040298c\n.text:0000000000402990\n.text:0000000000402994\n.text:0000000000402998\n.text:000000000040299a\n.text:000000000040299e\n.text:00000000004029a1\n.text:00000000004029a4\n.text:00000000004029a8\n.text:00000000004029ac\n.text:00000000004029af\n.text:00000000004029b2\n.text:00000000004029b3\n.text:00000000004029b5\n'
p1084
tp1085
sS'strcaseeq7'
p1086
(S'\n__stdcall strcaseeq7()\n'
p1087
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1088
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x004052b0\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00404542\nTEST ECX,0xffffffdf\nJNZ 0x00404546\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x0040454a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1089
S'53\n48 89 fb\n31 ff\ne8 85 0d 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1090
S'.text:0000000000404520\n.text:0000000000404521\n.text:0000000000404524\n.text:0000000000404526\n.text:000000000040452b\n.text:000000000040452f\n.text:0000000000404531\n.text:0000000000404533\n.text:0000000000404539\n.text:000000000040453b\n.text:0000000000404540\n.text:0000000000404541\n.text:0000000000404542\n.text:0000000000404544\n.text:0000000000404546\n.text:0000000000404548\n.text:0000000000404549\n.text:000000000040454a\n.text:000000000040454f\n.text:0000000000404550\n'
p1091
tp1092
sS'fmt_paragraph'
p1093
(S'\n__stdcall fmt_paragraph()\n'
p1094
V\u000avoid fmt_paragraph(void)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  COST CVar3;\u000a  long lVar4;\u000a  long lVar5;\u000a  WORD *next;\u000a  int iVar6;\u000a  WORD *pWVar7;\u000a  WORD *this;\u000a  long lVar8;\u000a  int saved_length;\u000a  \u000a  pWVar7 = word_limit;\u000a  word_limit->best_cost = 0;\u000a  iVar1 = pWVar7->length;\u000a  pWVar7->length = max_width;\u000a  this = (WORD *)&pWVar7[-1].paren_bitfield;\u000a  if ((WORD *)((long)&wptr + 7U) < this) {\u000a    do {\u000a      piVar2 = &other_indent;\u000a      if (this == unused_word_type) {\u000a        piVar2 = &first_indent;\u000a      }\u000a      iVar6 = *piVar2 + *(int *)&pWVar7[-1].best_cost;\u000a      lVar8 = 0x7fffffffffffffff;\u000a      next = pWVar7;\u000a      do {\u000a        CVar3 = line_cost(next);\u000a        lVar4 = CVar3 + next->best_cost;\u000a        if ((this == unused_word_type) && (0 < last_line_length)) {\u000a          lVar5 = (long)((iVar6 - last_line_length) * 10);\u000a          lVar4 = lVar4 + ((ulong)(lVar5 * lVar5) >> 1);\u000a        }\u000a        if (lVar4 < lVar8) {\u000a          *(WORD **)&pWVar7->length = next;\u000a          *(int *)((long)&pWVar7[-1].next_break + 4) = iVar6;\u000a          lVar8 = lVar4;\u000a        }\u000a        if (next == word_limit) break;\u000a        iVar6 = iVar6 + *(int *)((long)&next[-1].best_cost + 4) + next->length;\u000a        next = next + 1;\u000a      } while (iVar6 < max_width);\u000a      CVar3 = base_cost(this);\u000a                    /* WARNING: ptrarith problems */\u000a      ((WORD *)((long)pWVar7 + -0x10))->text = (char *)(CVar3 + lVar8);\u000a      pWVar7 = (WORD *)&pWVar7[-1].paren_bitfield;\u000a      this = (WORD *)&this[-1].paren_bitfield;\u000a    } while ((WORD *)((long)&wptr + 7U) < this);\u000a  }\u000a  word_limit->length = iVar1;\u000a  return;\u000a}\u000a\u000a
p1095
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,qword ptr [0x006092e0]\nMOV qword ptr [R12 + 0x18],0x0\nMOV EAX,dword ptr [R12 + 0x8]\nMOV dword ptr [RSP + 0x4],EAX\nMOV EAX,dword ptr [0x006092b4]\nMOV dword ptr [R12 + 0x8],EAX\nLEA R14,[R12 + -0x28]\nMOV EAX,0x60a690\nCMP R14,RAX\nJC 0x00402281\nMOV R13D,0x60a690\nNOP dword ptr [RAX + RAX*0x1]\nCMP R14,R13\nMOV EAX,0x6092d4\nMOV ECX,0x6092f8\nCMOVZ RAX,RCX\nMOV EBP,dword ptr [RAX]\nADD EBP,dword ptr [R12 + -0x20]\nMOV RBX,R12\nMOV R15,0x7fffffffffffffff\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,RBX\nMOV ESI,EBP\nCALL 0x00402970\nADD RAX,qword ptr [RBX + 0x18]\nCMP R14,R13\nJNZ 0x00402233\nMOV ECX,dword ptr [0x006092f0]\nTEST ECX,ECX\nJLE 0x00402233\nMOV EDX,EBP\nSUB EDX,ECX\nADD EDX,EDX\nLEA ECX,[RDX + RDX*0x4]\nMOVSXD RCX,ECX\nIMUL RCX,RCX\nSHR RCX,1\nADD RAX,RCX\nCMP RAX,R15\nJGE 0x00402245\nMOV qword ptr [R12 + -0x8],RBX\nMOV dword ptr [R12 + -0x14],EBP\nMOV R15,RAX\nCMP RBX,qword ptr [0x006092e0]\nJZ 0x00402260\nADD EBP,dword ptr [RBX + -0x1c]\nADD EBP,dword ptr [RBX + 0x8]\nADD RBX,0x28\nCMP EBP,dword ptr [0x006092b4]\nJL 0x00402200\nMOV RDI,R14\nCALL 0x004029c0\nADD RAX,R15\nMOV qword ptr [R12 + -0x10],RAX\nADD R12,-0x28\nADD R14,-0x28\nCMP R14,R13\nJNC 0x004021d0\nMOV RAX,qword ptr [0x006092e0]\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RAX + 0x8],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1096
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4c 8b 25 4e 71 20 00\n49 c7 44 24 18 00 00 00 00\n41 8b 44 24 08\n89 44 24 04\n8b 05 0a 71 20 00\n41 89 44 24 08\n4d 8d 74 24 d8\nb8 90 a6 60 00\n49 39 c6\n0f 82 bf 00 00 00\n41 bd 90 a6 60 00\n0f 1f 84 00 00 00 00 00\n4d 39 ee\nb8 d4 92 60 00\nb9 f8 92 60 00\n48 0f 44 c1\n8b 28\n41 03 6c 24 e0\n4c 89 e3\n49 bf ff ff ff ff ff ff ff 7f\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 df\n89 ee\ne8 66 07 00 00\n48 03 43 18\n4d 39 ee\n75 20\n8b 0d d7 70 20 00\n85 c9\n7e 16\n89 ea\n29 ca\n01 d2\n8d 0c 92\n48 63 c9\n48 0f af c9\n48 d1 e9\n48 01 c8\n4c 39 f8\n7d 0d\n49 89 5c 24 f8\n41 89 6c 24 ec\n49 89 c7\n48 3b 1d 94 70 20 00\n74 12\n03 6b e4\n03 6b 08\n48 83 c3 28\n3b 2d 56 70 20 00\n7c a0\n4c 89 f7\ne8 58 07 00 00\n4c 01 f8\n49 89 44 24 f0\n49 83 c4 d8\n49 83 c6 d8\n4d 39 ee\n0f 83 4f ff ff ff\n48 8b 05 58 70 20 00\n8b 4c 24 04\n89 48 08\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1097
S'.text:0000000000402180\n.text:0000000000402181\n.text:0000000000402183\n.text:0000000000402185\n.text:0000000000402187\n.text:0000000000402189\n.text:000000000040218a\n.text:000000000040218b\n.text:0000000000402192\n.text:000000000040219b\n.text:00000000004021a0\n.text:00000000004021a4\n.text:00000000004021aa\n.text:00000000004021af\n.text:00000000004021b4\n.text:00000000004021b9\n.text:00000000004021bc\n.text:00000000004021c2\n.text:00000000004021c8\n.text:00000000004021d0\n.text:00000000004021d3\n.text:00000000004021d8\n.text:00000000004021dd\n.text:00000000004021e1\n.text:00000000004021e3\n.text:00000000004021e8\n.text:00000000004021eb\n.text:00000000004021f5\n.text:0000000000402200\n.text:0000000000402203\n.text:0000000000402205\n.text:000000000040220a\n.text:000000000040220e\n.text:0000000000402211\n.text:0000000000402213\n.text:0000000000402219\n.text:000000000040221b\n.text:000000000040221d\n.text:000000000040221f\n.text:0000000000402221\n.text:0000000000402223\n.text:0000000000402226\n.text:0000000000402229\n.text:000000000040222d\n.text:0000000000402230\n.text:0000000000402233\n.text:0000000000402236\n.text:0000000000402238\n.text:000000000040223d\n.text:0000000000402242\n.text:0000000000402245\n.text:000000000040224c\n.text:000000000040224e\n.text:0000000000402251\n.text:0000000000402254\n.text:0000000000402258\n.text:000000000040225e\n.text:0000000000402260\n.text:0000000000402263\n.text:0000000000402268\n.text:000000000040226b\n.text:0000000000402270\n.text:0000000000402274\n.text:0000000000402278\n.text:000000000040227b\n.text:0000000000402281\n.text:0000000000402288\n.text:000000000040228c\n.text:000000000040228f\n.text:0000000000402293\n.text:0000000000402294\n.text:0000000000402296\n.text:0000000000402298\n.text:000000000040229a\n.text:000000000040229c\n.text:000000000040229d\n'
p1098
tp1099
sS'version_etc_va'
p1100
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p1101
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p1102
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x00404920\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x0040492c\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00404941\nINC R9\nCMP R9,0xa\nJC 0x00404900\nMOV R8,RSP\nCALL 0x00404560\nADD RSP,0x58\nRET\n'
p1103
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p1104
S'.text:00000000004048f0\n.text:00000000004048f4\n.text:00000000004048f7\n.text:0000000000404900\n.text:0000000000404903\n.text:0000000000404907\n.text:0000000000404909\n.text:000000000040490c\n.text:0000000000404910\n.text:0000000000404914\n.text:0000000000404917\n.text:0000000000404920\n.text:0000000000404924\n.text:0000000000404928\n.text:000000000040492c\n.text:000000000040492f\n.text:0000000000404933\n.text:0000000000404936\n.text:0000000000404938\n.text:000000000040493b\n.text:000000000040493f\n.text:0000000000404941\n.text:0000000000404944\n.text:0000000000404949\n.text:000000000040494d\n'
p1105
tp1106
sS'xzalloc'
p1107
(S'\n__stdcall xzalloc(size_t s)\n'
p1108
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p1109
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00404a80\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00401490\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1110
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 04 c9 ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1111
S'.text:0000000000404b70\n.text:0000000000404b72\n.text:0000000000404b73\n.text:0000000000404b74\n.text:0000000000404b77\n.text:0000000000404b7c\n.text:0000000000404b7f\n.text:0000000000404b81\n.text:0000000000404b84\n.text:0000000000404b87\n.text:0000000000404b8c\n.text:0000000000404b8f\n.text:0000000000404b93\n.text:0000000000404b94\n.text:0000000000404b96\n'
p1112
tp1113
sS'emit_mandatory_arg_note'
p1114
(S'\n__stdcall emit_mandatory_arg_note()\n'
p1115
V\u000avoid emit_mandatory_arg_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnMandatory arguments to long options are mandatory for short options too.\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p1116
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x405e45\nMOV EDX,0x5\nCALL 0x00401400\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004014f0\n'
p1117
S'50\n31 ff\nbe 45 5e 40 00\nba 05 00 00 00\ne8 ae fa ff ff\n48 8b 35 0f 79 20 00\n48 89 c7\n58\ne9 8e fb ff ff\n'
p1118
S'.text:0000000000401940\n.text:0000000000401941\n.text:0000000000401943\n.text:0000000000401948\n.text:000000000040194d\n.text:0000000000401952\n.text:0000000000401959\n.text:000000000040195c\n.text:000000000040195d\n'
p1119
tp1120
sS'strcaseeq0'
p1121
(S'\n__stdcall strcaseeq0()\n'
p1122
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1123
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004052b0\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00404255\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040425c\nJMP 0x00404290\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404290\nTEST BPL,BPL\nJZ 0x0040428b\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x004042a0\nJMP 0x00404290\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1124
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 6d 10 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1125
S'.text:0000000000404220\n.text:0000000000404221\n.text:0000000000404223\n.text:0000000000404225\n.text:0000000000404227\n.text:0000000000404229\n.text:000000000040422a\n.text:000000000040422b\n.text:000000000040422e\n.text:0000000000404231\n.text:0000000000404234\n.text:0000000000404237\n.text:0000000000404239\n.text:000000000040423c\n.text:000000000040423e\n.text:0000000000404243\n.text:0000000000404246\n.text:0000000000404248\n.text:000000000040424a\n.text:000000000040424d\n.text:000000000040424f\n.text:0000000000404251\n.text:0000000000404253\n.text:0000000000404255\n.text:0000000000404257\n.text:000000000040425a\n.text:000000000040425c\n.text:000000000040425f\n.text:0000000000404261\n.text:0000000000404265\n.text:000000000040426a\n.text:000000000040426d\n.text:0000000000404271\n.text:0000000000404275\n.text:0000000000404279\n.text:000000000040427d\n.text:0000000000404281\n.text:0000000000404284\n.text:0000000000404289\n.text:000000000040428b\n.text:0000000000404290\n.text:0000000000404294\n.text:0000000000404295\n.text:0000000000404297\n.text:0000000000404299\n.text:000000000040429b\n.text:000000000040429d\n.text:000000000040429e\n'
p1126
tp1127
sS'strcaseeq2'
p1128
(S'\n__stdcall strcaseeq2()\n'
p1129
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1130
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004052b0\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00404366\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040436d\nJMP 0x0040439a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040439a\nTEST BPL,BPL\nJZ 0x00404395\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004043b0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1131
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 5d 0f 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1132
S'.text:0000000000404330\n.text:0000000000404331\n.text:0000000000404333\n.text:0000000000404335\n.text:0000000000404337\n.text:0000000000404339\n.text:000000000040433a\n.text:000000000040433b\n.text:000000000040433e\n.text:0000000000404341\n.text:0000000000404344\n.text:0000000000404347\n.text:0000000000404349\n.text:000000000040434c\n.text:000000000040434e\n.text:0000000000404353\n.text:0000000000404357\n.text:0000000000404359\n.text:000000000040435b\n.text:000000000040435e\n.text:0000000000404360\n.text:0000000000404362\n.text:0000000000404364\n.text:0000000000404366\n.text:0000000000404368\n.text:000000000040436b\n.text:000000000040436d\n.text:0000000000404370\n.text:0000000000404372\n.text:0000000000404376\n.text:000000000040437a\n.text:000000000040437e\n.text:0000000000404382\n.text:0000000000404385\n.text:0000000000404389\n.text:000000000040438a\n.text:000000000040438c\n.text:000000000040438e\n.text:0000000000404390\n.text:0000000000404392\n.text:0000000000404393\n.text:0000000000404395\n.text:000000000040439a\n.text:000000000040439e\n.text:000000000040439f\n.text:00000000004043a1\n.text:00000000004043a3\n.text:00000000004043a5\n.text:00000000004043a7\n.text:00000000004043a8\n'
p1133
tp1134
sS'strcaseeq1'
p1135
(S'\n__stdcall strcaseeq1()\n'
p1136
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1137
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x004052b0\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x004042dd\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004042e4\nJMP 0x00404317\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404317\nTEST BPL,BPL\nJZ 0x00404312\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404330\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1138
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 e6 0f 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1139
S'.text:00000000004042a0\n.text:00000000004042a1\n.text:00000000004042a3\n.text:00000000004042a5\n.text:00000000004042a7\n.text:00000000004042a9\n.text:00000000004042aa\n.text:00000000004042ab\n.text:00000000004042b0\n.text:00000000004042b3\n.text:00000000004042b6\n.text:00000000004042b9\n.text:00000000004042bb\n.text:00000000004042be\n.text:00000000004042c3\n.text:00000000004042c5\n.text:00000000004042ca\n.text:00000000004042ce\n.text:00000000004042d0\n.text:00000000004042d2\n.text:00000000004042d5\n.text:00000000004042d7\n.text:00000000004042d9\n.text:00000000004042db\n.text:00000000004042dd\n.text:00000000004042df\n.text:00000000004042e2\n.text:00000000004042e4\n.text:00000000004042e7\n.text:00000000004042e9\n.text:00000000004042ed\n.text:00000000004042f1\n.text:00000000004042f5\n.text:00000000004042fb\n.text:00000000004042ff\n.text:0000000000404302\n.text:0000000000404306\n.text:0000000000404307\n.text:0000000000404309\n.text:000000000040430b\n.text:000000000040430d\n.text:000000000040430f\n.text:0000000000404310\n.text:0000000000404312\n.text:0000000000404317\n.text:000000000040431b\n.text:000000000040431c\n.text:000000000040431e\n.text:0000000000404320\n.text:0000000000404322\n.text:0000000000404324\n.text:0000000000404325\n'
p1140
tp1141
sS'strcaseeq4'
p1142
(S'\n__stdcall strcaseeq4()\n'
p1143
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1144
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004052b0\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x0040444c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404453\nJMP 0x00404474\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404474\nTEST BPL,BPL\nJZ 0x0040446f\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404480\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1145
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 77 0e 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1146
S'.text:0000000000404420\n.text:0000000000404421\n.text:0000000000404423\n.text:0000000000404425\n.text:0000000000404426\n.text:0000000000404427\n.text:000000000040442a\n.text:000000000040442d\n.text:000000000040442f\n.text:0000000000404432\n.text:0000000000404434\n.text:0000000000404439\n.text:000000000040443d\n.text:000000000040443f\n.text:0000000000404441\n.text:0000000000404444\n.text:0000000000404446\n.text:0000000000404448\n.text:000000000040444a\n.text:000000000040444c\n.text:000000000040444e\n.text:0000000000404451\n.text:0000000000404453\n.text:0000000000404456\n.text:0000000000404458\n.text:000000000040445c\n.text:0000000000404460\n.text:0000000000404463\n.text:0000000000404467\n.text:0000000000404468\n.text:000000000040446a\n.text:000000000040446c\n.text:000000000040446d\n.text:000000000040446f\n.text:0000000000404474\n.text:0000000000404478\n.text:0000000000404479\n.text:000000000040447b\n.text:000000000040447d\n.text:000000000040447e\n'
p1147
tp1148
sS'strcaseeq3'
p1149
(S'\n__stdcall strcaseeq3()\n'
p1150
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1151
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004052b0\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x004043e0\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004043e7\nJMP 0x0040440a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040440a\nTEST BPL,BPL\nJZ 0x00404405\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404420\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1152
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 e3 0e 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1153
S'.text:00000000004043b0\n.text:00000000004043b1\n.text:00000000004043b3\n.text:00000000004043b5\n.text:00000000004043b7\n.text:00000000004043b8\n.text:00000000004043bb\n.text:00000000004043be\n.text:00000000004043c1\n.text:00000000004043c3\n.text:00000000004043c6\n.text:00000000004043c8\n.text:00000000004043cd\n.text:00000000004043d1\n.text:00000000004043d3\n.text:00000000004043d5\n.text:00000000004043d8\n.text:00000000004043da\n.text:00000000004043dc\n.text:00000000004043de\n.text:00000000004043e0\n.text:00000000004043e2\n.text:00000000004043e5\n.text:00000000004043e7\n.text:00000000004043ea\n.text:00000000004043ec\n.text:00000000004043f0\n.text:00000000004043f4\n.text:00000000004043f8\n.text:00000000004043fb\n.text:00000000004043fc\n.text:00000000004043fe\n.text:0000000000404400\n.text:0000000000404402\n.text:0000000000404403\n.text:0000000000404405\n.text:000000000040440a\n.text:000000000040440b\n.text:000000000040440d\n.text:000000000040440f\n.text:0000000000404411\n.text:0000000000404412\n'
p1154
tp1155
sS'register_tm_clones'
p1156
(S'\n__stdcall register_tm_clones()\n'
p1157
V\u000a/* WARNING: Removing unreachable block (ram,0x00401763) */\u000a/* WARNING: Removing unreachable block (ram,0x0040176d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1158
S'MOV ESI,0x609258\nPUSH RBP\nSUB RSI,0x609258\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401778\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401778\nPOP RBP\nMOV EDI,0x609258\nJMP RAX\nPOP RBP\nRET\n'
p1159
S'be 58 92 60 00\n55\n48 81 ee 58 92 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 58 92 60 00\nff e0\n5d\nc3\n'
p1160
S'.text:0000000000401740\n.text:0000000000401745\n.text:0000000000401746\n.text:000000000040174d\n.text:0000000000401751\n.text:0000000000401754\n.text:0000000000401757\n.text:000000000040175b\n.text:000000000040175e\n.text:0000000000401761\n.text:0000000000401763\n.text:0000000000401768\n.text:000000000040176b\n.text:000000000040176d\n.text:000000000040176e\n.text:0000000000401773\n.text:0000000000401778\n.text:0000000000401779\n'
p1161
tp1162
sS'gettext_quote'
p1163
(S'\n__stdcall gettext_quote(char * msgid)\n'
p1164
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_004065fe;\u000a        pcVar2 = &DAT_00406602;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p1165
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x00401400\nCMP RAX,RBX\nJNZ 0x00404218\nCALL 0x00405370\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00404220\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x004041c8\nCMP byte ptr [RBX],0x60\nMOV ECX,0x4065ee\nMOV EAX,0x4065f2\nJMP 0x00404214\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00404220\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00404206\nCMP byte ptr [RBX],0x60\nMOV ECX,0x4065fe\nMOV EAX,0x406602\nJMP 0x00404214\nCMP R14D,0x9\nMOV ECX,0x40605b\nMOV EAX,0x4065e6\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1166
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 87 d2 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 e9 11 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 ee 65 40 00\nb8 f2 65 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 fe 65 40 00\nb8 02 66 40 00\neb 0e\n41 83 fe 09\nb9 5b 60 40 00\nb8 e6 65 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p1167
S'.text:0000000000404160\n.text:0000000000404161\n.text:0000000000404163\n.text:0000000000404164\n.text:0000000000404167\n.text:000000000040416a\n.text:000000000040416c\n.text:0000000000404171\n.text:0000000000404174\n.text:0000000000404179\n.text:000000000040417c\n.text:0000000000404182\n.text:0000000000404187\n.text:000000000040418a\n.text:000000000040418f\n.text:0000000000404194\n.text:0000000000404199\n.text:000000000040419f\n.text:00000000004041a5\n.text:00000000004041a8\n.text:00000000004041aa\n.text:00000000004041ac\n.text:00000000004041b1\n.text:00000000004041b5\n.text:00000000004041b7\n.text:00000000004041b9\n.text:00000000004041bc\n.text:00000000004041c1\n.text:00000000004041c6\n.text:00000000004041c8\n.text:00000000004041cd\n.text:00000000004041d2\n.text:00000000004041d7\n.text:00000000004041dd\n.text:00000000004041e3\n.text:00000000004041e6\n.text:00000000004041e8\n.text:00000000004041ea\n.text:00000000004041ef\n.text:00000000004041f3\n.text:00000000004041f5\n.text:00000000004041f7\n.text:00000000004041fa\n.text:00000000004041ff\n.text:0000000000404204\n.text:0000000000404206\n.text:000000000040420a\n.text:000000000040420f\n.text:0000000000404214\n.text:0000000000404218\n.text:0000000000404219\n.text:000000000040421b\n.text:000000000040421c\n'
p1168
tp1169
sS'copy_rest'
p1170
(S'\n__stdcall copy_rest(FILE * f)\n'
p1171
V\u000aint copy_rest(FILE *f)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  int __c;\u000a  \u000a  out_column = 0;\u000a  if ((next_prefix_indent < in_column) || ((__c != -1 && (__c != 10)))) {\u000a    put_space();\u000a    pcVar2 = prefix;\u000a    if (in_column != out_column) {\u000a      do {\u000a        if (*pcVar2 == 0) break;\u000a        putchar_unlocked((int)*pcVar2);\u000a        out_column = out_column + 1;\u000a        pcVar2 = pcVar2 + 1;\u000a      } while (in_column != out_column);\u000a    }\u000a    if (__c == -1) {\u000a      iVar1 = -1;\u000a      if (in_column < prefix_length + next_prefix_indent) goto LAB_00402441;\u000a      putchar_unlocked(10);\u000a      return -1;\u000a    }\u000a    iVar1 = 10;\u000a    if (__c == 10) goto LAB_00402441;\u000a    put_space();\u000a  }\u000a  if (__c != -1) {\u000a    do {\u000a      if (__c == 10) {\u000a        return 10;\u000a      }\u000a      putchar_unlocked(__c);\u000a      iVar1 = getc_unlocked((FILE *)f);\u000aLAB_00402441:\u000a      __c = iVar1;\u000a    } while (__c != -1);\u000a  }\u000a  return __c;\u000a}\u000a\u000a
p1172
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nMOV dword ptr [0x006142d0],0x0\nMOV EDI,dword ptr [0x006092ec]\nCMP dword ptr [0x006092e8],EDI\nJG 0x0040238e\nCMP R14D,-0x1\nJZ 0x004023f2\nCMP R14D,0xa\nJZ 0x004023f2\nCALL 0x004026a0\nMOV ECX,dword ptr [0x006142d0]\nMOV EDI,dword ptr [0x006092e8]\nCMP EDI,ECX\nJZ 0x004023da\nMOV RBP,qword ptr [0x006092b8]\nNOP word ptr [RAX + RAX*0x1]\nMOVSX EAX,byte ptr [RBP]\nTEST EAX,EAX\nJZ 0x004023da\nINC RBP\nMOV EDI,EAX\nCALL 0x00401540\nMOV ECX,dword ptr [0x006142d0]\nINC ECX\nMOV dword ptr [0x006142d0],ECX\nMOV EDI,dword ptr [0x006092e8]\nCMP EDI,ECX\nJNZ 0x004023b0\nCMP R14D,-0x1\nJZ 0x004023fc\nMOV EBP,0xa\nCMP R14D,0xa\nJZ 0x00402441\nSUB EDI,ECX\nCALL 0x004026a0\nMOV EBP,R14D\nCMP EBP,-0x1\nJNZ 0x00402446\nJMP 0x0040244b\nMOV EAX,dword ptr [0x006092c8]\nADD EAX,dword ptr [0x006092ec]\nMOV EBP,0xffffffff\nCMP dword ptr [0x006092e8],EAX\nJL 0x00402441\nMOV EDI,0xa\nCALL 0x00401540\nCMP EBP,-0x1\nJNZ 0x00402446\nJMP 0x0040244b\nMOV EDI,EBP\nCALL 0x00401540\nMOV RDI,RBX\nCALL 0x004013c0\nMOV EBP,EAX\nCMP EBP,-0x1\nJZ 0x0040244b\nCMP EBP,0xa\nJNZ 0x00402430\nMOV EAX,EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1173
S'55\n41 56\n53\n41 89 f6\n48 89 fb\nc7 05 5c 1f 21 00 00 00 00 00\n8b 3d 72 6f 20 00\n39 3d 68 6f 20 00\n7f 0c\n41 83 fe ff\n74 6a\n41 83 fe 0a\n74 64\ne8 0d 03 00 00\n8b 0d 37 1f 21 00\n8b 3d 49 6f 20 00\n39 cf\n74 37\n48 8b 2d 0e 6f 20 00\n66 0f 1f 44 00 00\n0f be 45 00\n85 c0\n74 22\n48 ff c5\n89 c7\ne8 7e f1 ff ff\n8b 0d 08 1f 21 00\nff c1\n89 0d 00 1f 21 00\n8b 3d 12 6f 20 00\n39 cf\n75 d6\n41 83 fe ff\n74 1c\nbd 0a 00 00 00\n41 83 fe 0a\n74 56\n29 cf\ne8 ae 02 00 00\n44 89 f5\n83 fd ff\n75 4c\neb 4f\n8b 05 c6 6e 20 00\n03 05 e4 6e 20 00\nbd ff ff ff ff\n39 05 d5 6e 20 00\n7c 2c\nbf 0a 00 00 00\ne8 21 f1 ff ff\n83 fd ff\n75 22\neb 25\n89 ef\ne8 09 f1 ff ff\n48 89 df\ne8 81 ef ff ff\n89 c5\n83 fd ff\n74 05\n83 fd 0a\n75 e5\n89 e8\n5b\n41 5e\n5d\nc3\n'
p1174
S'.text:0000000000402360\n.text:0000000000402361\n.text:0000000000402363\n.text:0000000000402364\n.text:0000000000402367\n.text:000000000040236a\n.text:0000000000402374\n.text:000000000040237a\n.text:0000000000402380\n.text:0000000000402382\n.text:0000000000402386\n.text:0000000000402388\n.text:000000000040238c\n.text:000000000040238e\n.text:0000000000402393\n.text:0000000000402399\n.text:000000000040239f\n.text:00000000004023a1\n.text:00000000004023a3\n.text:00000000004023aa\n.text:00000000004023b0\n.text:00000000004023b4\n.text:00000000004023b6\n.text:00000000004023b8\n.text:00000000004023bb\n.text:00000000004023bd\n.text:00000000004023c2\n.text:00000000004023c8\n.text:00000000004023ca\n.text:00000000004023d0\n.text:00000000004023d6\n.text:00000000004023d8\n.text:00000000004023da\n.text:00000000004023de\n.text:00000000004023e0\n.text:00000000004023e5\n.text:00000000004023e9\n.text:00000000004023eb\n.text:00000000004023ed\n.text:00000000004023f2\n.text:00000000004023f5\n.text:00000000004023f8\n.text:00000000004023fa\n.text:00000000004023fc\n.text:0000000000402402\n.text:0000000000402408\n.text:000000000040240d\n.text:0000000000402413\n.text:0000000000402415\n.text:000000000040241a\n.text:000000000040241f\n.text:0000000000402422\n.text:0000000000402424\n.text:0000000000402430\n.text:0000000000402432\n.text:0000000000402437\n.text:000000000040243a\n.text:000000000040243f\n.text:0000000000402441\n.text:0000000000402444\n.text:0000000000402446\n.text:0000000000402449\n.text:000000000040244b\n.text:000000000040244d\n.text:000000000040244e\n.text:0000000000402450\n.text:0000000000402451\n'
p1175
tp1176
sS'c_islower'
p1177
(S'\n__stdcall c_islower()\n'
p1178
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1179
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1180
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1181
S'.text:0000000000405250\n.text:0000000000405253\n.text:0000000000405256\n.text:0000000000405259\n'
p1182
tp1183
sS'fclose'
p1184
(S'\n__stdcall fclose(FILE * __stream)\n'
p1185
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_00609068)();\u000a  return iVar1;\u000a}\u000a\u000a
p1186
S'JMP qword ptr [0x00609068]\n'
p1187
S'ff 25 82 7c 20 00\n'
p1188
S'.plt:00000000004013e0\n'
p1189
tp1190
sS'__ctype_get_mb_cur_max'
p1191
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p1192
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_00609080)();\u000a  return sVar1;\u000a}\u000a\u000a
p1193
S'JMP qword ptr [0x00609080]\n'
p1194
S'ff 25 6a 7c 20 00\n'
p1195
S'.plt:0000000000401410\n'
p1196
tp1197
sS'quotearg_n_style'
p1198
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p1199
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1200
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00403e90\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00403c60\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1201
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p1202
S'.text:0000000000403e50\n.text:0000000000403e51\n.text:0000000000403e53\n.text:0000000000403e54\n.text:0000000000403e58\n.text:0000000000403e5b\n.text:0000000000403e5d\n.text:0000000000403e62\n.text:0000000000403e65\n.text:0000000000403e6a\n.text:0000000000403e71\n.text:0000000000403e73\n.text:0000000000403e76\n.text:0000000000403e79\n.text:0000000000403e7e\n.text:0000000000403e82\n.text:0000000000403e83\n.text:0000000000403e85\n.text:0000000000403e86\n'
p1203
tp1204
sS'fwrite'
p1205
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1206
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_006091b8)();\u000a  return sVar1;\u000a}\u000a\u000a
p1207
S'JMP qword ptr [0x006091b8]\n'
p1208
S'ff 25 32 7b 20 00\n'
p1209
S'.plt:0000000000401680\n'
p1210
tp1211
sS'get_line'
p1212
(S'\n__stdcall get_line(FILE * f)\n'
p1213
V\u000aint get_line(FILE *f)\u000a\u000a{\u000a  WORD *w;\u000a  char *pcVar1;\u000a  uint uVar2;\u000a  int iVar3;\u000a  ushort **ppuVar4;\u000a  bool bVar5;\u000a  ulong uVar6;\u000a  ulong in_RSI;\u000a  \u000a  uVar6 = in_RSI & 0xffffffff;\u000a  do {\u000a    word_limit->text = wptr;\u000a    do {\u000a      if ((char **)wptr == &wptr) {\u000a        set_other_indent(1);\u000a        flush_paragraph();\u000a      }\u000a      pcVar1 = wptr + 1;\u000a      *wptr = (char)uVar6;\u000a      wptr = pcVar1;\u000a      uVar2 = getc_unlocked((FILE *)f);\u000a      uVar6 = (ulong)uVar2;\u000a    } while ((uVar2 != 0xffffffff) &&\u000a            (ppuVar4 = __ctype_b_loc(),\u000a            (*(byte *)((long)*ppuVar4 + (long)(int)uVar2 * 2 + 1) & 0x20) == 0));\u000a    w = word_limit;\u000a    wptr._0_4_ = (int)wptr - *(int *)&word_limit->text;\u000a    word_limit->length = (int)wptr;\u000a    wptr._0_4_ = (int)wptr + in_column;\u000a    in_column = (int)wptr;\u000a    check_punctuation(w);\u000a    uVar2 = get_space(f);\u000a    uVar6 = (ulong)uVar2;\u000a    word_limit->space = in_column - (int)wptr;\u000a    w = word_limit;\u000a    if (uVar2 == 0xffffffff) {\u000aLAB_00402555:\u000a      *(byte *)&word_limit->paren_bitfield = *(byte *)&word_limit->paren_bitfield | 8;\u000aLAB_004025a0:\u000a      w->space = (((uint)*(byte *)&w->paren_bitfield & 8) >> 3) + 1;\u000a    }\u000a    else {\u000a      if ((*(byte *)&word_limit->paren_bitfield & 2) == 0) {\u000a        bVar5 = false;\u000a      }\u000a      else {\u000a        if (uVar2 == 10) goto LAB_00402555;\u000a        bVar5 = 1 < word_limit->space;\u000a      }\u000a      *(byte *)&word_limit->paren_bitfield =\u000a           *(byte *)&word_limit->paren_bitfield & 0xf7 | bVar5 << 3;\u000a      if ((uVar2 == 10) || (uniform == 1)) goto LAB_004025a0;\u000a    }\u000a    if (w == (WORD *)(unused_word_type + 0x3e6)) {\u000a      set_other_indent(1);\u000a      flush_paragraph();\u000a    }\u000a    word_limit = word_limit + 1;\u000a    if ((uVar2 == 10) || (uVar2 == 0xffffffff)) {\u000a      iVar3 = get_prefix(f);\u000a      return iVar3;\u000a    }\u000a  } while( true );\u000a}\u000a\u000a
p1214
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV EBP,ESI\nMOV R12,RDI\nMOV R14D,0x60a688\nMOV R15D,0x614280\nNOP dword ptr [RAX]\nMOV RAX,qword ptr [0x0060a688]\nMOV RCX,qword ptr [0x006092e0]\nMOV qword ptr [RCX],RAX\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP qword ptr [0x0060a688],R14\nJNZ 0x004024b8\nMOV EDI,0x1\nCALL 0x004025f0\nCALL 0x00402740\nMOV RAX,qword ptr [0x0060a688]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [0x0060a688],RCX\nMOV byte ptr [RAX],BPL\nMOV RDI,R12\nCALL 0x004013c0\nMOV EBP,EAX\nCMP EBP,-0x1\nJZ 0x004024ee\nCALL 0x004016c0\nMOV RAX,qword ptr [RAX]\nMOVSXD RCX,EBP\nTEST byte ptr [RAX + RCX*0x2 + 0x1],0x20\nJZ 0x004024a0\nMOV EBX,dword ptr [0x0060a688]\nMOV RDI,qword ptr [0x006092e0]\nSUB EBX,dword ptr [RDI]\nMOV dword ptr [RDI + 0x8],EBX\nADD EBX,dword ptr [0x006092e8]\nMOV dword ptr [0x006092e8],EBX\nCALL 0x004028a0\nMOV RDI,R12\nMOV ESI,EBP\nCALL 0x004022f0\nMOV EBP,EAX\nMOV EAX,dword ptr [0x006092e8]\nSUB EAX,EBX\nMOV RCX,qword ptr [0x006092e0]\nMOV dword ptr [RCX + 0xc],EAX\nCMP EBP,-0x1\nJZ 0x00402555\nMOV RAX,qword ptr [0x006092e0]\nTEST byte ptr [RAX + 0x10],0x2\nJNZ 0x00402550\nXOR EDX,EDX\nJMP 0x0040256d\nCMP EBP,0xa\nJNZ 0x00402566\nMOV RAX,qword ptr [0x006092e0]\nLEA RCX,[RAX + 0x10]\nOR byte ptr [RAX + 0x10],0x8\nJMP 0x004025a0\nCMP dword ptr [RAX + 0xc],0x1\nSETG DL\nMOV RAX,qword ptr [0x006092e0]\nLEA RCX,[RAX + 0x10]\nMOV BL,byte ptr [RAX + 0x10]\nSHL DL,0x3\nAND BL,0xf7\nOR BL,DL\nMOV byte ptr [RAX + 0x10],BL\nCMP EBP,0xa\nJZ 0x004025a0\nCMP byte ptr [0x006092b0],0x1\nJNZ 0x004025ae\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVZX ECX,byte ptr [RCX]\nAND ECX,0x8\nSHR ECX,0x3\nINC ECX\nMOV dword ptr [RAX + 0xc],ECX\nCMP RAX,R15\nJNZ 0x004025c2\nMOV EDI,0x1\nCALL 0x004025f0\nCALL 0x00402740\nADD qword ptr [0x006092e0],0x28\nCMP EBP,0xa\nJZ 0x004025d8\nCMP EBP,-0x1\nJNZ 0x00402480\nMOV RDI,R12\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00401f20\n'
p1215
S'55\n41 57\n41 56\n41 54\n53\n89 f5\n49 89 fc\n41 be 88 a6 60 00\n41 bf 80 42 61 00\n0f 1f 80 00 00 00 00\n48 8b 05 01 82 20 00\n48 8b 0d 52 6e 20 00\n48 89 01\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 39 35 e1 81 20 00\n75 0f\nbf 01 00 00 00\ne8 3d 01 00 00\ne8 88 02 00 00\n48 8b 05 c9 81 20 00\n48 8d 48 01\n48 89 0d be 81 20 00\n40 88 28\n4c 89 e7\ne8 eb ee ff ff\n89 c5\n83 fd ff\n74 12\ne8 df f1 ff ff\n48 8b 00\n48 63 cd\nf6 44 48 01 20\n74 b2\n8b 1d 94 81 20 00\n48 8b 3d e5 6d 20 00\n2b 1f\n89 5f 08\n03 1d e2 6d 20 00\n89 1d dc 6d 20 00\ne8 8f 03 00 00\n4c 89 e7\n89 ee\ne8 d5 fd ff ff\n89 c5\n8b 05 c5 6d 20 00\n29 d8\n48 8b 0d b4 6d 20 00\n89 41 0c\n83 fd ff\n74 21\n48 8b 05 a5 6d 20 00\nf6 40 10 02\n75 0f\n31 d2\neb 28\n83 fd 0a\n75 11\n48 8b 05 84 6d 20 00\n48 8d 48 10\n80 48 10 08\neb 3a\n83 78 0c 01\n0f 9f c2\n48 8b 05 6c 6d 20 00\n48 8d 48 10\n8a 58 10\nc0 e2 03\n80 e3 f7\n08 d3\n88 58 10\n83 fd 0a\n74 15\n80 3d 1e 6d 20 00 01\n75 1a\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 09\n83 e1 08\nc1 e9 03\nff c1\n89 48 0c\n4c 39 f8\n75 0f\nbf 01 00 00 00\ne8 33 00 00 00\ne8 7e 01 00 00\n48 83 05 16 6d 20 00 28\n83 fd 0a\n74 09\n83 fd ff\n0f 85 a8 fe ff ff\n4c 89 e7\n5b\n41 5c\n41 5e\n41 5f\n5d\ne9 38 f9 ff ff\n'
p1216
S'.text:0000000000402460\n.text:0000000000402461\n.text:0000000000402463\n.text:0000000000402465\n.text:0000000000402467\n.text:0000000000402468\n.text:000000000040246a\n.text:000000000040246d\n.text:0000000000402473\n.text:0000000000402479\n.text:0000000000402480\n.text:0000000000402487\n.text:000000000040248e\n.text:0000000000402491\n.text:00000000004024a0\n.text:00000000004024a7\n.text:00000000004024a9\n.text:00000000004024ae\n.text:00000000004024b3\n.text:00000000004024b8\n.text:00000000004024bf\n.text:00000000004024c3\n.text:00000000004024ca\n.text:00000000004024cd\n.text:00000000004024d0\n.text:00000000004024d5\n.text:00000000004024d7\n.text:00000000004024da\n.text:00000000004024dc\n.text:00000000004024e1\n.text:00000000004024e4\n.text:00000000004024e7\n.text:00000000004024ec\n.text:00000000004024ee\n.text:00000000004024f4\n.text:00000000004024fb\n.text:00000000004024fd\n.text:0000000000402500\n.text:0000000000402506\n.text:000000000040250c\n.text:0000000000402511\n.text:0000000000402514\n.text:0000000000402516\n.text:000000000040251b\n.text:000000000040251d\n.text:0000000000402523\n.text:0000000000402525\n.text:000000000040252c\n.text:000000000040252f\n.text:0000000000402532\n.text:0000000000402534\n.text:000000000040253b\n.text:000000000040253f\n.text:0000000000402541\n.text:0000000000402543\n.text:0000000000402550\n.text:0000000000402553\n.text:0000000000402555\n.text:000000000040255c\n.text:0000000000402560\n.text:0000000000402564\n.text:0000000000402566\n.text:000000000040256a\n.text:000000000040256d\n.text:0000000000402574\n.text:0000000000402578\n.text:000000000040257b\n.text:000000000040257e\n.text:0000000000402581\n.text:0000000000402583\n.text:0000000000402586\n.text:0000000000402589\n.text:000000000040258b\n.text:0000000000402592\n.text:0000000000402594\n.text:00000000004025a0\n.text:00000000004025a3\n.text:00000000004025a6\n.text:00000000004025a9\n.text:00000000004025ab\n.text:00000000004025ae\n.text:00000000004025b1\n.text:00000000004025b3\n.text:00000000004025b8\n.text:00000000004025bd\n.text:00000000004025c2\n.text:00000000004025ca\n.text:00000000004025cd\n.text:00000000004025cf\n.text:00000000004025d2\n.text:00000000004025d8\n.text:00000000004025db\n.text:00000000004025dc\n.text:00000000004025de\n.text:00000000004025e0\n.text:00000000004025e2\n.text:00000000004025e3\n'
p1217
tp1218
sS'quote_n'
p1219
(S'\n__stdcall quote_n(char * arg)\n'
p1220
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1221
S'MOV RDX,-0x1\nJMP 0x00404120\n'
p1222
S'48 c7 c2 ff ff ff ff\neb d7\n'
p1223
S'.text:0000000000404140\n.text:0000000000404147\n'
p1224
tp1225
sS'flush_paragraph'
p1226
(S'\n__stdcall flush_paragraph()\n'
p1227
V\u000avoid flush_paragraph(void)\u000a\u000a{\u000a  WORD *pWVar1;\u000a  long lVar2;\u000a  WORD *pWVar3;\u000a  ulong uVar4;\u000a  WORD *finish;\u000a  long lVar5;\u000a  \u000a  if (word_limit == (WORD *)unused_word_type) {\u000a    fwrite_unlocked(parabuf,1,(size_t)(wptr + -0x609300),stdout);\u000a    wptr = parabuf;\u000a  }\u000a  else {\u000a    fmt_paragraph();\u000a    finish = word_limit;\u000a    if (unused_word_type[0].next_break != word_limit) {\u000a      lVar2 = 0x7fffffffffffffff;\u000a      finish = word_limit;\u000a      pWVar3 = unused_word_type[0].next_break;\u000a      do {\u000a        pWVar1 = pWVar3->next_break;\u000a        lVar5 = pWVar3->best_cost - pWVar1->best_cost;\u000a        if (lVar5 < lVar2) {\u000a          finish = pWVar3;\u000a        }\u000a        if (lVar2 < lVar5) {\u000a          lVar5 = lVar2;\u000a        }\u000a        lVar2 = lVar5 + 9;\u000a        if (0x7ffffffffffffff6 < lVar5) {\u000a          lVar2 = lVar5;\u000a        }\u000a        pWVar3 = pWVar1;\u000a      } while (pWVar1 != word_limit);\u000a    }\u000a    put_paragraph(finish);\u000a    memmove(parabuf,finish->text,(size_t)(wptr + -(long)finish->text));\u000a    lVar2 = (long)(*(int *)&finish->text + -0x609300);\u000a    wptr = wptr + -lVar2;\u000a    if (finish <= word_limit) {\u000a      pWVar3 = finish;\u000a      do {\u000a        pWVar3->text = pWVar3->text + -lVar2;\u000a        pWVar3 = pWVar3 + 1;\u000a      } while (pWVar3 <= word_limit);\u000a    }\u000a    memmove(unused_word_type,finish,(0x28 - (long)finish) + (long)word_limit);\u000a    uVar4 = SUB168(SEXT816((long)(finish + -0x26a90)) * SEXT816(-0x6666666666666667) >> 0x40,0);\u000a    word_limit = word_limit + ((long)uVar4 >> 4) + (uVar4 >> 0x3f);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1228
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EAX,0x60a690\nCMP qword ptr [0x006092e0],RAX\nJZ 0x00402863\nCALL 0x00402180\nMOV RBX,qword ptr [0x006092e0]\nMOV RSI,qword ptr [0x0060a6b0]\nCMP RSI,RBX\nJZ 0x004027ba\nMOV R8,0x7ffffffffffffff7\nMOV RCX,qword ptr [0x006092e0]\nLEA RDX,[R8 + 0x8]\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,qword ptr [RSI + 0x18]\nMOV RAX,qword ptr [RSI + 0x20]\nSUB RDI,qword ptr [RAX + 0x18]\nCMP RDI,RDX\nCMOVL RBX,RSI\nCMOVG RDI,RDX\nLEA RDX,[RDI + 0x9]\nCMP RDI,R8\nCMOVGE RDX,RDI\nCMP RAX,RCX\nMOV RSI,RAX\nJNZ 0x00402790\nMOV RDI,RBX\nCALL 0x004022a0\nMOV RSI,qword ptr [RBX]\nMOV RDX,qword ptr [0x0060a688]\nSUB RDX,RSI\nMOV R14D,0x609300\nMOV EDI,0x609300\nCALL 0x00401600\nMOV EAX,dword ptr [RBX]\nSUB EAX,R14D\nCDQE\nSUB qword ptr [0x0060a688],RAX\nMOV RCX,qword ptr [0x006092e0]\nCMP RBX,RCX\nJA 0x00402813\nNEG RAX\nMOV RDX,RBX\nNOP\nADD qword ptr [RDX],RAX\nADD RDX,0x28\nMOV RCX,qword ptr [0x006092e0]\nCMP RDX,RCX\nJBE 0x00402800\nMOV EDX,0x28\nSUB RDX,RBX\nADD RDX,RCX\nMOV R14D,0x60a690\nMOV EDI,0x60a690\nMOV RSI,RBX\nCALL 0x00401600\nSUB RBX,R14\nMOV RCX,-0x6666666666666667\nMOV RAX,RBX\nIMUL RCX\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0x4\nADD RDX,RAX\nLEA RAX,[RDX + RDX*0x4]\nSHL RAX,0x3\nADD qword ptr [0x006092e0],RAX\nJMP 0x00402893\nMOV RDX,qword ptr [0x0060a688]\nMOV EAX,0x609300\nSUB RDX,RAX\nMOV RCX,qword ptr [0x00609268]\nMOV EDI,0x609300\nMOV ESI,0x1\nCALL 0x004015b0\nMOV qword ptr [0x0060a688],0x609300\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1229
S'41 56\n53\n50\nb8 90 a6 60 00\n48 39 05 90 6b 20 00\n0f 84 0d 01 00 00\ne8 25 fa ff ff\n48 8b 1d 7e 6b 20 00\n48 8b 35 47 7f 20 00\n48 39 de\n74 4c\n49 b8 f7 ff ff ff ff ff ff 7f\n48 8b 0d 61 6b 20 00\n49 8d 50 08\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 7e 18\n48 8b 46 20\n48 2b 78 18\n48 39 d7\n48 0f 4c de\n48 0f 4f fa\n48 8d 57 09\n4c 39 c7\n48 0f 4d d7\n48 39 c8\n48 89 c6\n75 d6\n48 89 df\ne8 de fa ff ff\n48 8b 33\n48 8b 15 bc 7e 20 00\n48 29 f2\n41 be 00 93 60 00\nbf 00 93 60 00\ne8 21 ee ff ff\n8b 03\n44 29 f0\n48 98\n48 29 05 9b 7e 20 00\n48 8b 0d ec 6a 20 00\n48 39 cb\n77 1a\n48 f7 d8\n48 89 da\n90\n48 01 02\n48 83 c2 28\n48 8b 0d d2 6a 20 00\n48 39 ca\n76 ed\nba 28 00 00 00\n48 29 da\n48 01 ca\n41 be 90 a6 60 00\nbf 90 a6 60 00\n48 89 de\ne8 cf ed ff ff\n4c 29 f3\n48 b9 99 99 99 99 99 99 99 99\n48 89 d8\n48 f7 e9\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 04\n48 01 c2\n48 8d 04 92\n48 c1 e0 03\n48 01 05 7f 6a 20 00\neb 30\n48 8b 15 1e 7e 20 00\nb8 00 93 60 00\n48 29 c2\n48 8b 0d ef 69 20 00\nbf 00 93 60 00\nbe 01 00 00 00\ne8 28 ed ff ff\n48 c7 05 f5 7d 20 00 00 93 60 00\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1230
S'.text:0000000000402740\n.text:0000000000402742\n.text:0000000000402743\n.text:0000000000402744\n.text:0000000000402749\n.text:0000000000402750\n.text:0000000000402756\n.text:000000000040275b\n.text:0000000000402762\n.text:0000000000402769\n.text:000000000040276c\n.text:000000000040276e\n.text:0000000000402778\n.text:000000000040277f\n.text:0000000000402783\n.text:0000000000402790\n.text:0000000000402794\n.text:0000000000402798\n.text:000000000040279c\n.text:000000000040279f\n.text:00000000004027a3\n.text:00000000004027a7\n.text:00000000004027ab\n.text:00000000004027ae\n.text:00000000004027b2\n.text:00000000004027b5\n.text:00000000004027b8\n.text:00000000004027ba\n.text:00000000004027bd\n.text:00000000004027c2\n.text:00000000004027c5\n.text:00000000004027cc\n.text:00000000004027cf\n.text:00000000004027d5\n.text:00000000004027da\n.text:00000000004027df\n.text:00000000004027e1\n.text:00000000004027e4\n.text:00000000004027e6\n.text:00000000004027ed\n.text:00000000004027f4\n.text:00000000004027f7\n.text:00000000004027f9\n.text:00000000004027fc\n.text:00000000004027ff\n.text:0000000000402800\n.text:0000000000402803\n.text:0000000000402807\n.text:000000000040280e\n.text:0000000000402811\n.text:0000000000402813\n.text:0000000000402818\n.text:000000000040281b\n.text:000000000040281e\n.text:0000000000402824\n.text:0000000000402829\n.text:000000000040282c\n.text:0000000000402831\n.text:0000000000402834\n.text:000000000040283e\n.text:0000000000402841\n.text:0000000000402844\n.text:0000000000402847\n.text:000000000040284b\n.text:000000000040284f\n.text:0000000000402852\n.text:0000000000402856\n.text:000000000040285a\n.text:0000000000402861\n.text:0000000000402863\n.text:000000000040286a\n.text:000000000040286f\n.text:0000000000402872\n.text:0000000000402879\n.text:000000000040287e\n.text:0000000000402883\n.text:0000000000402888\n.text:0000000000402893\n.text:0000000000402897\n.text:0000000000402898\n.text:000000000040289a\n'
p1231
tp1232
sS'quotearg_alloc'
p1233
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p1234
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p1235
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00403ad0\n'
p1236
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p1237
S'.text:0000000000403ac0\n.text:0000000000403ac3\n.text:0000000000403ac5\n.text:0000000000403ac8\n'
p1238
tp1239
sS'__do_global_dtors_aux'
p1240
(S'\n__stdcall __do_global_dtors_aux()\n'
p1241
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1242
S'CMP byte ptr [0x006092a8],0x0\nJNZ 0x0040179a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00401700\nPOP RBP\nMOV byte ptr [0x006092a8],0x1\nRET\n'
p1243
S'80 3d 21 7b 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 0e 7b 20 00 01\nf3 c3\n'
p1244
S'.text:0000000000401780\n.text:0000000000401787\n.text:0000000000401789\n.text:000000000040178a\n.text:000000000040178d\n.text:0000000000401792\n.text:0000000000401793\n.text:000000000040179a\n'
p1245
tp1246
sS'close_stdout_set_file_name'
p1247
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p1248
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p1249
S'MOV qword ptr [0x006142d8],RDI\nRET\n'
p1250
S'48 89 3d 81 17 21 00\nc3\n'
p1251
S'.text:0000000000402b50\n.text:0000000000402b57\n'
p1252
tp1253
sS'c_isprint'
p1254
(S'\n__stdcall c_isprint()\n'
p1255
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1256
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1257
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1258
S'.text:0000000000405260\n.text:0000000000405263\n.text:0000000000405266\n.text:0000000000405269\n'
p1259
tp1260
sS'_fini'
p1261
(S'\n__stdcall _fini()\n'
p1262
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1263
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1264
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1265
S'.fini:000000000040574c\n.fini:0000000000405750\n.fini:0000000000405754\n'
p1266
tp1267
sS'__fpending'
p1268
(S'\n__stdcall __fpending()\n'
p1269
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_00609050)();\u000a  return;\u000a}\u000a\u000a
p1270
S'JMP qword ptr [0x00609050]\n'
p1271
S'ff 25 9a 7c 20 00\n'
p1272
S'.plt:00000000004013b0\n'
p1273
tp1274
s.