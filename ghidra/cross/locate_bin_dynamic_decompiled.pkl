(dp0
S'looking_at_gnu_locatedb'
p1
(S'\n__stdcall looking_at_gnu_locatedb(char * data, size_t len)\n'
p2
V\u000aint looking_at_gnu_locatedb(char *data,size_t len)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  \u000a  uVar1 = 0;\u000a  if (9 < len) {\u000a    iVar2 = memcmp(data,&DAT_0040a645,10);\u000a    uVar1 = (uint)(iVar2 == 0);\u000a  }\u000a  return (int)uVar1;\u000a}\u000a\u000a
p3
S'XOR EAX,EAX\nCMP RSI,0xa\nJC 0x00403765\nPUSH RAX\nMOV ESI,0x40a645\nMOV EDX,0xa\nCALL 0x00401db0\nMOV ECX,EAX\nXOR EAX,EAX\nTEST ECX,ECX\nSETZ AL\nADD RSP,0x8\nRET\n'
p4
S'31 c0\n48 83 fe 0a\n72 1d\n50\nbe 45 a6 40 00\nba 0a 00 00 00\ne8 58 e6 ff ff\n89 c1\n31 c0\n85 c9\n0f 94 c0\n48 83 c4 08\nc3\n'
p5
S'.text:0000000000403740\n.text:0000000000403742\n.text:0000000000403746\n.text:0000000000403748\n.text:0000000000403749\n.text:000000000040374e\n.text:0000000000403753\n.text:0000000000403758\n.text:000000000040375a\n.text:000000000040375c\n.text:000000000040375e\n.text:0000000000403761\n.text:0000000000403765\n'
p6
tp7
sS'print_stats'
p8
(S'\n__stdcall print_stats(size_t database_file_size, timespec * database_mtime)\n'
p9
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000avoid print_stats(size_t database_file_size,timespec *database_mtime)\u000a\u000a{\u000a  tm *__tp;\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  char *pcVar4;\u000a  char *pcVar5;\u000a  undefined8 uVar6;\u000a  time_t *__timer;\u000a  char *__format;\u000a  undefined4 uVar7;\u000a  undefined auVar8 [16];\u000a  undefined auVar9 [16];\u000a  char hbuf1 [652];\u000a  char hbuf4 [652];\u000a  char hbuf3 [652];\u000a  char hbuf2 [652];\u000a  char local_a78 [18];\u000a  char local_a66;\u000a  char local_a65;\u000a  char local_7e8 [656];\u000a  char local_558 [656];\u000a  char local_2c8 [664];\u000a  \u000a  if (__timer != (time_t *)0x0) {\u000a    __tp = localtime(__timer);\u000a    if (__tp != (tm *)0x0) {\u000a      sVar1 = strftime(local_a78,0x14,"%Y:%m:%d %H:%M:%S",__tp);\u000a      if (sVar1 != 0x13) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("printed == TIME_BUF_LEN-1","locate.c",0x362,\u000a                      "void print_stats(int, size_t, const struct timespec *)");\u000a      }\u000a      if (local_a65 != 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("whenbuf[TIME_BUF_LEN-1] == 0","locate.c",0x363,\u000a                      "void print_stats(int, size_t, const struct timespec *)");\u000a      }\u000a      if (local_a66 == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("whenbuf[TIME_BUF_LEN-2] != 0","locate.c",0x364,\u000a                      "void print_stats(int, size_t, const struct timespec *)");\u000a      }\u000a      __format = (char *)dcgettext(0,"Database was last modified at %s.%09ld",5);\u000a      printf(__format,local_a78,__timer[1]);\u000a      sVar1 = strftime(local_a78,0x14,"%z",__tp);\u000a      if (sVar1 != 5) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("printed == 5","locate.c",0x368,\u000a                      "void print_stats(int, size_t, const struct timespec *)");\u000a      }\u000a      printf(" %s\u005cn",local_a78);\u000a    }\u000a  }\u000a  __format = (char *)dcngettext(0,"Locate database size: %s byte\u005cn",\u000a                                "Locate database size: %s bytes\u005cn",database_mtime,5);\u000a  pcVar2 = human_readable((uintmax_t)database_mtime,local_a78,0,1);\u000a  printf(__format,pcVar2);\u000a  __format = "All Filenames: %s\u005cn";\u000a  if (results_were_filtered != 0) {\u000a    __format = "Matching Filenames: %s\u005cn";\u000a  }\u000a  __format = (char *)dcgettext(0,__format,5,"Matching Filenames: %s\u005cn");\u000a  pcVar2 = human_readable(statistics.total_filename_count,local_a78,0,1);\u000a  printf(__format,pcVar2);\u000a  __format = (char *)dcgettext(0,\u000a                               "File names have a cumulative length of %s bytes.\u005cnOf those file names,\u005cn\u005cn\u005ct%s contain whitespace, \u005cn\u005ct%s contain newline characters, \u005cn\u005ctand %s contain characters with the high bit set.\u005cn"\u000a                               ,5);\u000a  pcVar2 = human_readable(statistics.total_filename_length,local_a78,0,1);\u000a  pcVar3 = human_readable(statistics.whitespace_count,local_2c8,0,1);\u000a  pcVar4 = human_readable(statistics.newline_count,local_558,0,1);\u000a  pcVar5 = human_readable(statistics.highbit_filename_count,local_7e8,0,1);\u000a  printf(__format,pcVar2,pcVar3,pcVar4,pcVar5);\u000a  if ((int)database_file_size == 0) {\u000a    if (results_were_filtered == 1) {\u000a      __format = \u000a      "Some filenames may have been filtered out, so we cannot compute the compression ratio.\u005cn";\u000a    }\u000a    else {\u000a      if (statistics.total_filename_length != 0) {\u000a        uVar6 = dcgettext(0,"Compression ratio %4.2f%% (higher is better)\u005cn",5);\u000a        uVar7 = SUB164(_DAT_0040a650 >> 0x20,0);\u000a        auVar8 = subpd(CONCAT88(SUB168(CONCAT412(uVar7,ZEXT812(statistics.total_filename_length) &\u000a                                                       (undefined  [12])0xffffffffffffffff |\u000a                                                       ZEXT412(SUB164(ZEXT816(statistics.\u000a                                                                              total_filename_length)\u000a                                                                      >> 0x20,0)) << 0x40) >> 0x40,0\u000a                                      ),CONCAT44(SUB164(_DAT_0040a650,0),\u000a                                                 SUB124(ZEXT812(statistics.total_filename_length) &\u000a                                                        (undefined  [12])0xffffffffffffffff,0))),\u000a                       CONCAT88(DAT_0040a668,DAT_0040a660));\u000a        auVar9 = addpd(CONCAT412(SUB164(auVar8 >> 0x20,0),\u000a                                 CONCAT48(SUB164(auVar8,0),SUB168(auVar8 >> 0x40,0))),auVar8);\u000a        auVar8 = subpd(CONCAT88(SUB168(CONCAT412(uVar7,ZEXT812(database_mtime) &\u000a                                                       (undefined  [12])0xffffffffffffffff |\u000a                                                       (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                                CONCAT44(SUB164(_DAT_0040a650,0),\u000a                                         SUB124(ZEXT812(database_mtime) &\u000a                                                (undefined  [12])0xffffffffffffffff,0))),\u000a                       CONCAT88(DAT_0040a668,DAT_0040a660));\u000a        auVar8 = addpd(CONCAT412(SUB164(auVar8 >> 0x20,0),\u000a                                 CONCAT48(SUB164(auVar8,0),SUB168(auVar8 >> 0x40,0))),auVar8);\u000a        printf((char *)CONCAT88(SUB168(auVar9 >> 0x40,0),\u000a                                ((SUB168(auVar9,0) - SUB168(auVar8,0)) * _DAT_00409f10) /\u000a                                SUB168(auVar9,0)),uVar6);\u000a        goto LAB_004040a4;\u000a      }\u000a      __format = "Compression ratio is undefined\u005cn";\u000a    }\u000a    __format = (char *)dcgettext(0,__format,5);\u000a    printf(__format);\u000a  }\u000aLAB_004040a4:\u000a  putchar(10);\u000a  return;\u000a}\u000a\u000a
p10
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa58\nMOV RBX,RDX\nMOV R15,RSI\nMOV dword ptr [RSP + 0xc],EDI\nTEST RBX,RBX\nJZ 0x00403e99\nMOV RDI,RBX\nCALL 0x00401b20\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00403e99\nLEA RDI,[RSP + 0x10]\nMOV ESI,0x14\nMOV EDX,0x40b0cb\nMOV RCX,RBP\nCALL 0x00401f50\nCMP RAX,0x13\nJNZ 0x004040c0\nCMP byte ptr [RSP + 0x23],0x0\nJNZ 0x004040d9\nCMP byte ptr [RSP + 0x22],0x0\nJZ 0x004040f2\nXOR EDI,EDI\nMOV ESI,0x40b168\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RCX,RAX\nMOV RDX,qword ptr [RBX + 0x8]\nLEA RBX,[RSP + 0x10]\nXOR EAX,EAX\nMOV RDI,RCX\nMOV RSI,RBX\nCALL 0x00401cb0\nMOV ESI,0x14\nMOV EDX,0x40b18f\nMOV RDI,RBX\nMOV RCX,RBP\nCALL 0x00401f50\nCMP RAX,0x5\nJNZ 0x0040410b\nLEA RSI,[RSP + 0x10]\nMOV EDI,0x40c01f\nXOR EAX,EAX\nCALL 0x00401cb0\nXOR EDI,EDI\nMOV ESI,0x40b19f\nMOV EDX,0x40b1be\nMOV R8D,0x5\nMOV RCX,R15\nCALL 0x00401fb0\nMOV RBX,RAX\nLEA RBP,[RSP + 0x10]\nXOR EDX,EDX\nMOV ECX,0x1\nMOV R8D,0x1\nMOV RDI,R15\nMOV RSI,RBP\nCALL 0x00404b50\nMOV RCX,RAX\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RSI,RCX\nCALL 0x00401cb0\nMOV AL,byte ptr [0x0060f530]\nMOV ECX,0x40b1de\nMOV ESI,0x40b1f6\nTEST AL,AL\nCMOVNZ RSI,RCX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RBX,RAX\nMOV RDI,qword ptr [0x0060f4f0]\nXOR EDX,EDX\nMOV ECX,0x1\nMOV R8D,0x1\nMOV RSI,RBP\nCALL 0x00404b50\nMOV RCX,RAX\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RSI,RCX\nCALL 0x00401cb0\nXOR EDI,EDI\nMOV ESI,0x40b209\nMOV EDX,0x5\nCALL 0x00401c30\nMOV R12,RAX\nMOV RDI,qword ptr [0x0060f4f8]\nXOR EDX,EDX\nMOV ECX,0x1\nMOV R8D,0x1\nMOV RSI,RBP\nCALL 0x00404b50\nMOV R13,RAX\nMOV RDI,qword ptr [0x0060f500]\nLEA RSI,[0x7c0 + RSP]\nXOR EDX,EDX\nMOV ECX,0x1\nMOV R8D,0x1\nCALL 0x00404b50\nMOV R14,RAX\nMOV RDI,qword ptr [0x0060f508]\nLEA RSI,[0x530 + RSP]\nXOR EDX,EDX\nMOV ECX,0x1\nMOV R8D,0x1\nCALL 0x00404b50\nMOV RBP,RAX\nMOV RDI,qword ptr [0x0060f510]\nLEA RSI,[0x2a0 + RSP]\nXOR EDX,EDX\nMOV ECX,0x1\nMOV R8D,0x1\nCALL 0x00404b50\nMOV RBX,RAX\nXOR EAX,EAX\nMOV RDI,R12\nMOV RSI,R13\nMOV RDX,R14\nMOV RCX,RBP\nMOV R8,RBX\nCALL 0x00401cb0\nCMP dword ptr [RSP + 0xc],0x0\nJNZ 0x004040a4\nCMP byte ptr [0x0060f530],0x1\nJNZ 0x00404009\nXOR EDI,EDI\nMOV ESI,0x40b2bd\nJMP 0x0040408d\nCMP qword ptr [0x0060f4f8],0x0\nJZ 0x00404086\nXOR EDI,EDI\nMOV ESI,0x40b315\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RCX,RAX\nMOVDQA XMM0,xmmword ptr [0x0040a650]\nMOVQ XMM1,qword ptr [0x0060f4f8]\nPUNPCKLDQ XMM1,XMM0\nMOVAPD XMM2,xmmword ptr [0x0040a660]\nSUBPD XMM1,XMM2\nPSHUFD XMM3,XMM1,0x4e\nADDPD XMM3,XMM1\nMOVQ XMM1,R15\nPUNPCKLDQ XMM1,XMM0\nSUBPD XMM1,XMM2\nPSHUFD XMM2,XMM1,0x4e\nADDPD XMM2,XMM1\nMOVAPD XMM0,XMM3\nSUBSD XMM0,XMM2\nMULSD XMM0,qword ptr [0x00409f10]\nDIVSD XMM0,XMM3\nMOV AL,0x1\nMOV RDI,RCX\nCALL 0x00401cb0\nJMP 0x004040a4\nXOR EDI,EDI\nMOV ESI,0x40b343\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RCX,RAX\nXOR EAX,EAX\nMOV RDI,RCX\nCALL 0x00401cb0\nMOV EDI,0xa\nCALL 0x00401b10\nADD RSP,0xa58\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x40b0dd\nMOV ESI,0x40a797\nMOV EDX,0x362\nMOV ECX,0x40b0f7\nCALL 0x00401d00\nMOV EDI,0x40b12e\nMOV ESI,0x40a797\nMOV EDX,0x363\nMOV ECX,0x40b0f7\nCALL 0x00401d00\nMOV EDI,0x40b14b\nMOV ESI,0x40a797\nMOV EDX,0x364\nMOV ECX,0x40b0f7\nCALL 0x00401d00\nMOV EDI,0x40b192\nMOV ESI,0x40a797\nMOV EDX,0x368\nMOV ECX,0x40b0f7\nCALL 0x00401d00\n'
p11
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 58 0a 00 00\n48 89 d3\n49 89 f7\n89 7c 24 0c\n48 85 db\n0f 84 a5 00 00 00\n48 89 df\ne8 24 dd ff ff\n48 89 c5\n48 85 ed\n0f 84 91 00 00 00\n48 8d 7c 24 10\nbe 14 00 00 00\nba cb b0 40 00\n48 89 e9\ne8 31 e1 ff ff\n48 83 f8 13\n0f 85 97 02 00 00\n80 7c 24 23 00\n0f 85 a5 02 00 00\n80 7c 24 22 00\n0f 84 b3 02 00 00\n31 ff\nbe 68 b1 40 00\nba 05 00 00 00\ne8 e0 dd ff ff\n48 89 c1\n48 8b 53 08\n48 8d 5c 24 10\n31 c0\n48 89 cf\n48 89 de\ne8 47 de ff ff\nbe 14 00 00 00\nba 8f b1 40 00\n48 89 df\n48 89 e9\ne8 d2 e0 ff ff\n48 83 f8 05\n0f 85 83 02 00 00\n48 8d 74 24 10\nbf 1f c0 40 00\n31 c0\ne8 17 de ff ff\n31 ff\nbe 9f b1 40 00\nba be b1 40 00\n41 b8 05 00 00 00\n4c 89 f9\ne8 fd e0 ff ff\n48 89 c3\n48 8d 6c 24 10\n31 d2\nb9 01 00 00 00\n41 b8 01 00 00 00\n4c 89 ff\n48 89 ee\ne8 7d 0c 00 00\n48 89 c1\n31 c0\n48 89 df\n48 89 ce\ne8 cd dd ff ff\n8a 05 47 b6 20 00\nb9 de b1 40 00\nbe f6 b1 40 00\n84 c0\n48 0f 45 f1\n31 ff\nba 05 00 00 00\ne8 2b dd ff ff\n48 89 c3\n48 8b 3d e1 b5 20 00\n31 d2\nb9 01 00 00 00\n41 b8 01 00 00 00\n48 89 ee\ne8 2c 0c 00 00\n48 89 c1\n31 c0\n48 89 df\n48 89 ce\ne8 7c dd ff ff\n31 ff\nbe 09 b2 40 00\nba 05 00 00 00\ne8 eb dc ff ff\n49 89 c4\n48 8b 3d a9 b5 20 00\n31 d2\nb9 01 00 00 00\n41 b8 01 00 00 00\n48 89 ee\ne8 ec 0b 00 00\n49 89 c5\n48 8b 3d 92 b5 20 00\n48 8d b4 24 c0 07 00 00\n31 d2\nb9 01 00 00 00\n41 b8 01 00 00 00\ne8 c8 0b 00 00\n49 89 c6\n48 8b 3d 76 b5 20 00\n48 8d b4 24 30 05 00 00\n31 d2\nb9 01 00 00 00\n41 b8 01 00 00 00\ne8 a4 0b 00 00\n48 89 c5\n48 8b 3d 5a b5 20 00\n48 8d b4 24 a0 02 00 00\n31 d2\nb9 01 00 00 00\n41 b8 01 00 00 00\ne8 80 0b 00 00\n48 89 c3\n31 c0\n4c 89 e7\n4c 89 ee\n4c 89 f2\n48 89 e9\n49 89 d8\ne8 c7 dc ff ff\n83 7c 24 0c 00\n0f 85 b0 00 00 00\n80 3d 35 b5 20 00 01\n75 0c\n31 ff\nbe bd b2 40 00\ne9 84 00 00 00\n48 83 3d e7 b4 20 00 00\n74 73\n31 ff\nbe 15 b3 40 00\nba 05 00 00 00\ne8 0c dc ff ff\n48 89 c1\n66 0f 6f 05 21 66 00 00\nf3 0f 7e 0d c1 b4 20 00\n66 0f 62 c8\n66 0f 28 15 1d 66 00 00\n66 0f 5c ca\n66 0f 70 d9 4e\n66 0f 58 d9\n66 49 0f 6e cf\n66 0f 62 c8\n66 0f 5c ca\n66 0f 70 d1 4e\n66 0f 58 d1\n66 0f 28 c3\nf2 0f 5c c2\nf2 0f 59 05 9a 5e 00 00\nf2 0f 5e c3\nb0 01\n48 89 cf\ne8 2c dc ff ff\neb 1e\n31 ff\nbe 43 b3 40 00\nba 05 00 00 00\ne8 99 db ff ff\n48 89 c1\n31 c0\n48 89 cf\ne8 0c dc ff ff\nbf 0a 00 00 00\ne8 62 da ff ff\n48 81 c4 58 0a 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf dd b0 40 00\nbe 97 a7 40 00\nba 62 03 00 00\nb9 f7 b0 40 00\ne8 27 dc ff ff\nbf 2e b1 40 00\nbe 97 a7 40 00\nba 63 03 00 00\nb9 f7 b0 40 00\ne8 0e dc ff ff\nbf 4b b1 40 00\nbe 97 a7 40 00\nba 64 03 00 00\nb9 f7 b0 40 00\ne8 f5 db ff ff\nbf 92 b1 40 00\nbe 97 a7 40 00\nba 68 03 00 00\nb9 f7 b0 40 00\ne8 dc db ff ff\n'
p12
S'.text:0000000000403dd0\n.text:0000000000403dd1\n.text:0000000000403dd3\n.text:0000000000403dd5\n.text:0000000000403dd7\n.text:0000000000403dd9\n.text:0000000000403dda\n.text:0000000000403de1\n.text:0000000000403de4\n.text:0000000000403de7\n.text:0000000000403deb\n.text:0000000000403dee\n.text:0000000000403df4\n.text:0000000000403df7\n.text:0000000000403dfc\n.text:0000000000403dff\n.text:0000000000403e02\n.text:0000000000403e08\n.text:0000000000403e0d\n.text:0000000000403e12\n.text:0000000000403e17\n.text:0000000000403e1a\n.text:0000000000403e1f\n.text:0000000000403e23\n.text:0000000000403e29\n.text:0000000000403e2e\n.text:0000000000403e34\n.text:0000000000403e39\n.text:0000000000403e3f\n.text:0000000000403e41\n.text:0000000000403e46\n.text:0000000000403e4b\n.text:0000000000403e50\n.text:0000000000403e53\n.text:0000000000403e57\n.text:0000000000403e5c\n.text:0000000000403e5e\n.text:0000000000403e61\n.text:0000000000403e64\n.text:0000000000403e69\n.text:0000000000403e6e\n.text:0000000000403e73\n.text:0000000000403e76\n.text:0000000000403e79\n.text:0000000000403e7e\n.text:0000000000403e82\n.text:0000000000403e88\n.text:0000000000403e8d\n.text:0000000000403e92\n.text:0000000000403e94\n.text:0000000000403e99\n.text:0000000000403e9b\n.text:0000000000403ea0\n.text:0000000000403ea5\n.text:0000000000403eab\n.text:0000000000403eae\n.text:0000000000403eb3\n.text:0000000000403eb6\n.text:0000000000403ebb\n.text:0000000000403ebd\n.text:0000000000403ec2\n.text:0000000000403ec8\n.text:0000000000403ecb\n.text:0000000000403ece\n.text:0000000000403ed3\n.text:0000000000403ed6\n.text:0000000000403ed8\n.text:0000000000403edb\n.text:0000000000403ede\n.text:0000000000403ee3\n.text:0000000000403ee9\n.text:0000000000403eee\n.text:0000000000403ef3\n.text:0000000000403ef5\n.text:0000000000403ef9\n.text:0000000000403efb\n.text:0000000000403f00\n.text:0000000000403f05\n.text:0000000000403f08\n.text:0000000000403f0f\n.text:0000000000403f11\n.text:0000000000403f16\n.text:0000000000403f1c\n.text:0000000000403f1f\n.text:0000000000403f24\n.text:0000000000403f27\n.text:0000000000403f29\n.text:0000000000403f2c\n.text:0000000000403f2f\n.text:0000000000403f34\n.text:0000000000403f36\n.text:0000000000403f3b\n.text:0000000000403f40\n.text:0000000000403f45\n.text:0000000000403f48\n.text:0000000000403f4f\n.text:0000000000403f51\n.text:0000000000403f56\n.text:0000000000403f5c\n.text:0000000000403f5f\n.text:0000000000403f64\n.text:0000000000403f67\n.text:0000000000403f6e\n.text:0000000000403f76\n.text:0000000000403f78\n.text:0000000000403f7d\n.text:0000000000403f83\n.text:0000000000403f88\n.text:0000000000403f8b\n.text:0000000000403f92\n.text:0000000000403f9a\n.text:0000000000403f9c\n.text:0000000000403fa1\n.text:0000000000403fa7\n.text:0000000000403fac\n.text:0000000000403faf\n.text:0000000000403fb6\n.text:0000000000403fbe\n.text:0000000000403fc0\n.text:0000000000403fc5\n.text:0000000000403fcb\n.text:0000000000403fd0\n.text:0000000000403fd3\n.text:0000000000403fd5\n.text:0000000000403fd8\n.text:0000000000403fdb\n.text:0000000000403fde\n.text:0000000000403fe1\n.text:0000000000403fe4\n.text:0000000000403fe9\n.text:0000000000403fee\n.text:0000000000403ff4\n.text:0000000000403ffb\n.text:0000000000403ffd\n.text:0000000000403fff\n.text:0000000000404004\n.text:0000000000404009\n.text:0000000000404011\n.text:0000000000404013\n.text:0000000000404015\n.text:000000000040401a\n.text:000000000040401f\n.text:0000000000404024\n.text:0000000000404027\n.text:000000000040402f\n.text:0000000000404037\n.text:000000000040403b\n.text:0000000000404043\n.text:0000000000404047\n.text:000000000040404c\n.text:0000000000404050\n.text:0000000000404055\n.text:0000000000404059\n.text:000000000040405d\n.text:0000000000404062\n.text:0000000000404066\n.text:000000000040406a\n.text:000000000040406e\n.text:0000000000404076\n.text:000000000040407a\n.text:000000000040407c\n.text:000000000040407f\n.text:0000000000404084\n.text:0000000000404086\n.text:0000000000404088\n.text:000000000040408d\n.text:0000000000404092\n.text:0000000000404097\n.text:000000000040409a\n.text:000000000040409c\n.text:000000000040409f\n.text:00000000004040a4\n.text:00000000004040a9\n.text:00000000004040ae\n.text:00000000004040b5\n.text:00000000004040b6\n.text:00000000004040b8\n.text:00000000004040ba\n.text:00000000004040bc\n.text:00000000004040be\n.text:00000000004040bf\n.text:00000000004040c0\n.text:00000000004040c5\n.text:00000000004040ca\n.text:00000000004040cf\n.text:00000000004040d4\n.text:00000000004040d9\n.text:00000000004040de\n.text:00000000004040e3\n.text:00000000004040e8\n.text:00000000004040ed\n.text:00000000004040f2\n.text:00000000004040f7\n.text:00000000004040fc\n.text:0000000000404101\n.text:0000000000404106\n.text:000000000040410b\n.text:0000000000404110\n.text:0000000000404115\n.text:000000000040411a\n.text:000000000040411f\n'
p13
tp14
sS'ungetc'
p15
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p16
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_0060f208)();\u000a  return iVar1;\u000a}\u000a\u000a
p17
S'JMP qword ptr [0x0060f208]\n'
p18
S'ff 25 32 d3 20 00\n'
p19
S'.plt:0000000000401ed0\n'
p20
tp21
sS'version_etc_arn'
p22
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p23
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    fprintf((FILE *)stream,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    fprintf((FILE *)stream,"%s (%s) %s\u005cn",command_name,package,version);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_0040c02b,5);\u000a  fprintf((FILE *)stream,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    __s = (char *)dcgettext(0,"Written by %s.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors);\u000a    return;\u000a  case 2:\u000a    __s = (char *)dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    __s = (char *)dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    __s = (char *)dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors,authors[1],authors[2],authors[3]);\u000a    return;\u000a  case 5:\u000a    uVar1 = 0x4088c7;\u000a    __s = (char *)dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors,authors[1],authors[2],authors[3],authors[4],uVar1);\u000a    break;\u000a  case 6:\u000a    __s = (char *)dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors,authors[1],authors[2],authors[3],authors[4],authors[5]);\u000a    break;\u000a  case 7:\u000a    uVar1 = 0x408946;\u000a    __s = (char *)dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a            authors[6],uVar1);\u000a    break;\u000a  case 8:\u000a    __s = (char *)dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a            authors[6],authors[7]);\u000a    break;\u000a  case 9:\u000a    uVar1 = 0x4089d5;\u000a    __s = (char *)dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a            authors[6],authors[7],authors[8],uVar1);\u000a    break;\u000a  default:\u000a    uVar1 = 0x4087da;\u000a    __s = (char *)dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a            authors[6],authors[7],authors[8],uVar1);\u000a  }\u000a  return;\u000a}\u000a\u000a
p24
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV RBX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV R14,RDI\nTEST RDX,RDX\nJZ 0x00408733\nMOV ESI,0x40c018\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401df0\nJMP 0x00408748\nMOV ESI,0x40c024\nXOR EAX,EAX\nMOV RDI,R14\nMOV RDX,RCX\nMOV RCX,RBX\nCALL 0x00401df0\nXOR EDI,EDI\nMOV ESI,0x40c02b\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RDX,RAX\nMOV ESI,0x40c2e0\nMOV ECX,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401df0\nXOR EDI,EDI\nMOV ESI,0x40c02f\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00401d10\nCMP R12,0x9\nJA 0x004087c9\nJMP qword ptr [0x40bfc8 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x40c0fa\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RCX,RAX\nMOV RDX,qword ptr [R15]\nXOR EAX,EAX\nMOV RDI,R14\nMOV RSI,RCX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401df0\nXOR EDI,EDI\nMOV ESI,0x40c239\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RSI,RAX\nMOV RDX,qword ptr [R15]\nMOV RCX,qword ptr [R15 + 0x8]\nMOV R8,qword ptr [R15 + 0x10]\nMOV R9,qword ptr [R15 + 0x18]\nSUB RSP,0x8\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nCALL 0x00401df0\nADD RSP,0x38\nJMP 0x00408a10\nXOR EDI,EDI\nMOV ESI,0x40c10a\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RSI,RAX\nMOV RDX,qword ptr [R15]\nMOV RCX,qword ptr [R15 + 0x8]\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401df0\nXOR EDI,EDI\nMOV ESI,0x40c121\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RSI,RAX\nMOV RDX,qword ptr [R15]\nMOV RCX,qword ptr [R15 + 0x8]\nMOV R8,qword ptr [R15 + 0x10]\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401df0\nXOR EDI,EDI\nMOV ESI,0x40c13d\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RSI,RAX\nMOV RDX,qword ptr [R15]\nMOV RCX,qword ptr [R15 + 0x8]\nMOV R8,qword ptr [R15 + 0x10]\nMOV R9,qword ptr [R15 + 0x18]\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401df0\nXOR EDI,EDI\nMOV ESI,0x40c15d\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RSI,RAX\nMOV RDX,qword ptr [R15]\nMOV RCX,qword ptr [R15 + 0x8]\nMOV R8,qword ptr [R15 + 0x10]\nMOV R9,qword ptr [R15 + 0x18]\nSUB RSP,0x8\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nCALL 0x00401df0\nADD RSP,0x18\nJMP 0x00408a10\nXOR EDI,EDI\nMOV ESI,0x40c181\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RSI,RAX\nMOV RDX,qword ptr [R15]\nMOV RCX,qword ptr [R15 + 0x8]\nMOV R8,qword ptr [R15 + 0x10]\nMOV R9,qword ptr [R15 + 0x18]\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nCALL 0x00401df0\nADD RSP,0x18\nJMP 0x00408a10\nXOR EDI,EDI\nMOV ESI,0x40c1a9\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RSI,RAX\nMOV RDX,qword ptr [R15]\nMOV RCX,qword ptr [R15 + 0x8]\nMOV R8,qword ptr [R15 + 0x10]\nMOV R9,qword ptr [R15 + 0x18]\nSUB RSP,0x8\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nCALL 0x00401df0\nADD RSP,0x28\nJMP 0x00408a10\nXOR EDI,EDI\nMOV ESI,0x40c1d5\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RSI,RAX\nMOV RDX,qword ptr [R15]\nMOV RCX,qword ptr [R15 + 0x8]\nMOV R8,qword ptr [R15 + 0x10]\nMOV R9,qword ptr [R15 + 0x18]\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nCALL 0x00401df0\nADD RSP,0x28\nJMP 0x00408a10\nXOR EDI,EDI\nMOV ESI,0x40c205\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RSI,RAX\nMOV RDX,qword ptr [R15]\nMOV RCX,qword ptr [R15 + 0x8]\nMOV R8,qword ptr [R15 + 0x10]\nMOV R9,qword ptr [R15 + 0x18]\nSUB RSP,0x8\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nCALL 0x00401df0\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401b30\n'
p25
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n48 89 cb\n48 89 d1\n48 89 f2\n49 89 fe\n48 85 d2\n74 14\nbe 18 c0 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 bf 96 ff ff\neb 15\nbe 24 c0 40 00\n31 c0\n4c 89 f7\n48 89 ca\n48 89 d9\ne8 a8 96 ff ff\n31 ff\nbe 2b c0 40 00\nba 05 00 00 00\ne8 d7 94 ff ff\n48 89 c2\nbe e0 c2 40 00\nb9 e0 07 00 00\n31 c0\n4c 89 f7\ne8 80 96 ff ff\n31 ff\nbe 2f c0 40 00\nba 05 00 00 00\ne8 af 94 ff ff\n48 89 c7\n4c 89 f6\ne8 84 95 ff ff\n49 83 fc 09\n77 37\n42 ff 24 e5 c8 bf 40 00\n31 ff\nbe fa c0 40 00\nba 05 00 00 00\ne8 85 94 ff ff\n48 89 c1\n49 8b 17\n31 c0\n4c 89 f7\n48 89 ce\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 27 96 ff ff\n31 ff\nbe 39 c2 40 00\nba 05 00 00 00\ne8 56 94 ff ff\n48 89 c6\n49 8b 17\n49 8b 4f 08\n4d 8b 47 10\n4d 8b 4f 18\n48 83 ec 08\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\ne8 df 95 ff ff\n48 83 c4 38\ne9 f6 01 00 00\n31 ff\nbe 0a c1 40 00\nba 05 00 00 00\ne8 05 94 ff ff\n48 89 c6\n49 8b 17\n49 8b 4f 08\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 a6 95 ff ff\n31 ff\nbe 21 c1 40 00\nba 05 00 00 00\ne8 d5 93 ff ff\n48 89 c6\n49 8b 17\n49 8b 4f 08\n4d 8b 47 10\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 72 95 ff ff\n31 ff\nbe 3d c1 40 00\nba 05 00 00 00\ne8 a1 93 ff ff\n48 89 c6\n49 8b 17\n49 8b 4f 08\n4d 8b 47 10\n4d 8b 4f 18\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 3a 95 ff ff\n31 ff\nbe 5d c1 40 00\nba 05 00 00 00\ne8 69 93 ff ff\n48 89 c6\n49 8b 17\n49 8b 4f 08\n4d 8b 47 10\n4d 8b 4f 18\n48 83 ec 08\n31 c0\n4c 89 f7\n41 ff 77 20\ne8 05 95 ff ff\n48 83 c4 18\ne9 1c 01 00 00\n31 ff\nbe 81 c1 40 00\nba 05 00 00 00\ne8 2b 93 ff ff\n48 89 c6\n49 8b 17\n49 8b 4f 08\n4d 8b 47 10\n4d 8b 4f 18\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\ne8 c4 94 ff ff\n48 83 c4 18\ne9 db 00 00 00\n31 ff\nbe a9 c1 40 00\nba 05 00 00 00\ne8 ea 92 ff ff\n48 89 c6\n49 8b 17\n49 8b 4f 08\n4d 8b 47 10\n4d 8b 4f 18\n48 83 ec 08\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\ne8 7b 94 ff ff\n48 83 c4 28\ne9 92 00 00 00\n31 ff\nbe d5 c1 40 00\nba 05 00 00 00\ne8 a1 92 ff ff\n48 89 c6\n49 8b 17\n49 8b 4f 08\n4d 8b 47 10\n4d 8b 4f 18\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\ne8 32 94 ff ff\n48 83 c4 28\neb 4c\n31 ff\nbe 05 c2 40 00\nba 05 00 00 00\ne8 5b 92 ff ff\n48 89 c6\n49 8b 17\n49 8b 4f 08\n4d 8b 47 10\n4d 8b 4f 18\n48 83 ec 08\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\ne8 e4 93 ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 13 91 ff ff\n'
p26
S'.text:0000000000408700\n.text:0000000000408702\n.text:0000000000408704\n.text:0000000000408706\n.text:0000000000408707\n.text:0000000000408708\n.text:000000000040870b\n.text:000000000040870e\n.text:0000000000408711\n.text:0000000000408714\n.text:0000000000408717\n.text:000000000040871a\n.text:000000000040871d\n.text:000000000040871f\n.text:0000000000408724\n.text:0000000000408726\n.text:0000000000408729\n.text:000000000040872c\n.text:0000000000408731\n.text:0000000000408733\n.text:0000000000408738\n.text:000000000040873a\n.text:000000000040873d\n.text:0000000000408740\n.text:0000000000408743\n.text:0000000000408748\n.text:000000000040874a\n.text:000000000040874f\n.text:0000000000408754\n.text:0000000000408759\n.text:000000000040875c\n.text:0000000000408761\n.text:0000000000408766\n.text:0000000000408768\n.text:000000000040876b\n.text:0000000000408770\n.text:0000000000408772\n.text:0000000000408777\n.text:000000000040877c\n.text:0000000000408781\n.text:0000000000408784\n.text:0000000000408787\n.text:000000000040878c\n.text:0000000000408790\n.text:0000000000408792\n.text:000000000040879a\n.text:000000000040879c\n.text:00000000004087a1\n.text:00000000004087a6\n.text:00000000004087ab\n.text:00000000004087ae\n.text:00000000004087b1\n.text:00000000004087b3\n.text:00000000004087b6\n.text:00000000004087b9\n.text:00000000004087bd\n.text:00000000004087be\n.text:00000000004087c0\n.text:00000000004087c2\n.text:00000000004087c4\n.text:00000000004087c9\n.text:00000000004087cb\n.text:00000000004087d0\n.text:00000000004087d5\n.text:00000000004087da\n.text:00000000004087dd\n.text:00000000004087e0\n.text:00000000004087e4\n.text:00000000004087e8\n.text:00000000004087ec\n.text:00000000004087f0\n.text:00000000004087f5\n.text:00000000004087f8\n.text:00000000004087fc\n.text:0000000000408800\n.text:0000000000408804\n.text:0000000000408808\n.text:000000000040880c\n.text:0000000000408811\n.text:0000000000408815\n.text:000000000040881a\n.text:000000000040881c\n.text:0000000000408821\n.text:0000000000408826\n.text:000000000040882b\n.text:000000000040882e\n.text:0000000000408831\n.text:0000000000408835\n.text:0000000000408837\n.text:000000000040883a\n.text:000000000040883e\n.text:000000000040883f\n.text:0000000000408841\n.text:0000000000408843\n.text:0000000000408845\n.text:000000000040884a\n.text:000000000040884c\n.text:0000000000408851\n.text:0000000000408856\n.text:000000000040885b\n.text:000000000040885e\n.text:0000000000408861\n.text:0000000000408865\n.text:0000000000408869\n.text:000000000040886b\n.text:000000000040886e\n.text:0000000000408872\n.text:0000000000408873\n.text:0000000000408875\n.text:0000000000408877\n.text:0000000000408879\n.text:000000000040887e\n.text:0000000000408880\n.text:0000000000408885\n.text:000000000040888a\n.text:000000000040888f\n.text:0000000000408892\n.text:0000000000408895\n.text:0000000000408899\n.text:000000000040889d\n.text:00000000004088a1\n.text:00000000004088a3\n.text:00000000004088a6\n.text:00000000004088aa\n.text:00000000004088ab\n.text:00000000004088ad\n.text:00000000004088af\n.text:00000000004088b1\n.text:00000000004088b6\n.text:00000000004088b8\n.text:00000000004088bd\n.text:00000000004088c2\n.text:00000000004088c7\n.text:00000000004088ca\n.text:00000000004088cd\n.text:00000000004088d1\n.text:00000000004088d5\n.text:00000000004088d9\n.text:00000000004088dd\n.text:00000000004088df\n.text:00000000004088e2\n.text:00000000004088e6\n.text:00000000004088eb\n.text:00000000004088ef\n.text:00000000004088f4\n.text:00000000004088f6\n.text:00000000004088fb\n.text:0000000000408900\n.text:0000000000408905\n.text:0000000000408908\n.text:000000000040890b\n.text:000000000040890f\n.text:0000000000408913\n.text:0000000000408917\n.text:000000000040891c\n.text:000000000040891f\n.text:0000000000408923\n.text:0000000000408927\n.text:000000000040892c\n.text:0000000000408930\n.text:0000000000408935\n.text:0000000000408937\n.text:000000000040893c\n.text:0000000000408941\n.text:0000000000408946\n.text:0000000000408949\n.text:000000000040894c\n.text:0000000000408950\n.text:0000000000408954\n.text:0000000000408958\n.text:000000000040895c\n.text:0000000000408961\n.text:0000000000408964\n.text:0000000000408968\n.text:000000000040896c\n.text:0000000000408970\n.text:0000000000408975\n.text:0000000000408979\n.text:000000000040897e\n.text:0000000000408980\n.text:0000000000408985\n.text:000000000040898a\n.text:000000000040898f\n.text:0000000000408992\n.text:0000000000408995\n.text:0000000000408999\n.text:000000000040899d\n.text:00000000004089a1\n.text:00000000004089a6\n.text:00000000004089a9\n.text:00000000004089ad\n.text:00000000004089b1\n.text:00000000004089b5\n.text:00000000004089b9\n.text:00000000004089be\n.text:00000000004089c2\n.text:00000000004089c4\n.text:00000000004089c6\n.text:00000000004089cb\n.text:00000000004089d0\n.text:00000000004089d5\n.text:00000000004089d8\n.text:00000000004089db\n.text:00000000004089df\n.text:00000000004089e3\n.text:00000000004089e7\n.text:00000000004089eb\n.text:00000000004089f0\n.text:00000000004089f3\n.text:00000000004089f7\n.text:00000000004089fb\n.text:00000000004089ff\n.text:0000000000408a03\n.text:0000000000408a07\n.text:0000000000408a0c\n.text:0000000000408a10\n.text:0000000000408a11\n.text:0000000000408a13\n.text:0000000000408a15\n.text:0000000000408a17\n.text:0000000000408a18\n'
p27
tp28
sS'get_short'
p29
(S'\n__stdcall get_short(FILE * fp)\n'
p30
V\u000ashort get_short(FILE *fp)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  \u000a  iVar1 = fgetc((FILE *)fp);\u000a  iVar2 = fgetc((FILE *)fp);\u000a  return (short)((ushort)(iVar1 << 8) | (ushort)iVar2 & 0xff);\u000a}\u000a\u000a
p31
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x00401d70\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00401d70\nMOVZX EAX,AL\nSHL EBP,0x8\nOR EBP,EAX\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p32
S'55\n53\n50\n48 89 fb\ne8 35 dc ff ff\n89 c5\n48 89 df\ne8 2b dc ff ff\n0f b6 c0\nc1 e5 08\n09 c5\n89 e8\n48 83 c4 08\n5b\n5d\nc3\n'
p33
S'.text:0000000000404130\n.text:0000000000404131\n.text:0000000000404132\n.text:0000000000404133\n.text:0000000000404136\n.text:000000000040413b\n.text:000000000040413d\n.text:0000000000404140\n.text:0000000000404145\n.text:0000000000404148\n.text:000000000040414b\n.text:000000000040414d\n.text:000000000040414f\n.text:0000000000404153\n.text:0000000000404154\n.text:0000000000404155\n'
p34
tp35
sS'strchr'
p36
(S'\n__stdcall strchr(char * __s, int __c)\n'
p37
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_0060f0f0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p38
S'JMP qword ptr [0x0060f0f0]\n'
p39
S'ff 25 4a d4 20 00\n'
p40
S'.plt:0000000000401ca0\n'
p41
tp42
sS'visit_existing_follow'
p43
(S'\n__stdcall visit_existing_follow(process_data * procdata, void * context)\n'
p44
V\u000aint visit_existing_follow(process_data *procdata,void *context)\u000a\u000a{\u000a  int iVar1;\u000a  stat st;\u000a  stat local_90;\u000a  \u000a  iVar1 = stat(procdata->original_filename,&local_90);\u000a  return (int)((uint)(iVar1 != 0) * 3 + 1);\u000a}\u000a\u000a
p45
S'SUB RSP,0x98\nMOV RDI,qword ptr [RDI + 0x10]\nLEA RSI,[RSP + 0x8]\nCALL 0x00409ec0\nXOR ECX,ECX\nTEST EAX,EAX\nSETNZ CL\nLEA EAX,[RCX + RCX*0x2 + 0x1]\nADD RSP,0x98\nRET\n'
p46
S'48 81 ec 98 00 00 00\n48 8b 7f 10\n48 8d 74 24 08\ne8 eb 63 00 00\n31 c9\n85 c0\n0f 95 c1\n8d 44 49 01\n48 81 c4 98 00 00 00\nc3\n'
p47
S'.text:0000000000403ac0\n.text:0000000000403ac7\n.text:0000000000403acb\n.text:0000000000403ad0\n.text:0000000000403ad5\n.text:0000000000403ad7\n.text:0000000000403ad9\n.text:0000000000403adc\n.text:0000000000403ae0\n.text:0000000000403ae7\n'
p48
tp49
sS'to_uchar'
p50
(S'\n__stdcall to_uchar()\n'
p51
V\u000auchar to_uchar(void)\u000a\u000a{\u000a  uchar in_DIL;\u000a  \u000a  return in_DIL;\u000a}\u000a\u000a
p52
S'MOV EAX,EDI\nRET\n'
p53
S'89 f8\nc3\n'
p54
S'.text:0000000000404750\n.text:0000000000404752\n'
p55
tp56
sS'strncmp'
p57
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p58
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_0060f048)();\u000a  return iVar1;\u000a}\u000a\u000a
p59
S'JMP qword ptr [0x0060f048]\n'
p60
S'ff 25 f2 d4 20 00\n'
p61
S'.plt:0000000000401b50\n'
p62
tp63
sS'process_and'
p64
(S'\n__stdcall process_and(process_data * procdata)\n'
p65
V\u000aint process_and(process_data *procdata)\u000a\u000a{\u000a  uint uVar1;\u000a  uint uVar2;\u000a  \u000a  uVar1 = visit(inspectors,(process_data *)0x3,(visitor *)procdata);\u000a  uVar2 = 4;\u000a  if (uVar1 != 1) {\u000a    uVar2 = uVar1;\u000a  }\u000a  if ((uVar2 & 0xc) == 0) {\u000a    uVar1 = visit(past_pat_inspector,(process_data *)0x1,(visitor *)procdata);\u000a    uVar2 = 2;\u000a    if (uVar1 != 1) {\u000a      uVar2 = uVar1;\u000a    }\u000a  }\u000a  return (int)uVar2;\u000a}\u000a\u000a
p66
S'PUSH RBX\nMOV RBX,RDI\nMOV RDI,qword ptr [0x0060f518]\nMOV RCX,qword ptr [0x0060f528]\nMOV ESI,0x3\nMOV RDX,RBX\nCALL 0x00404260\nMOV ECX,EAX\nCMP ECX,0x1\nMOV EAX,0x4\nCMOVNZ EAX,ECX\nTEST AL,0xc\nJNZ 0x00403d43\nMOV RDI,qword ptr [0x0060f528]\nMOV ESI,0x1\nXOR ECX,ECX\nMOV RDX,RBX\nCALL 0x00404260\nMOV ECX,EAX\nCMP ECX,0x1\nMOV EAX,0x2\nCMOVNZ EAX,ECX\nPOP RBX\nRET\n'
p67
S'53\n48 89 fb\n48 8b 3d 1d b8 20 00\n48 8b 0d 26 b8 20 00\nbe 03 00 00 00\n48 89 da\ne8 51 05 00 00\n89 c1\n83 f9 01\nb8 04 00 00 00\n0f 45 c1\na8 0c\n75 23\n48 8b 3d 01 b8 20 00\nbe 01 00 00 00\n31 c9\n48 89 da\ne8 2a 05 00 00\n89 c1\n83 f9 01\nb8 02 00 00 00\n0f 45 c1\n5b\nc3\n'
p68
S'.text:0000000000403cf0\n.text:0000000000403cf1\n.text:0000000000403cf4\n.text:0000000000403cfb\n.text:0000000000403d02\n.text:0000000000403d07\n.text:0000000000403d0a\n.text:0000000000403d0f\n.text:0000000000403d11\n.text:0000000000403d14\n.text:0000000000403d19\n.text:0000000000403d1c\n.text:0000000000403d1e\n.text:0000000000403d20\n.text:0000000000403d27\n.text:0000000000403d2c\n.text:0000000000403d2e\n.text:0000000000403d31\n.text:0000000000403d36\n.text:0000000000403d38\n.text:0000000000403d3b\n.text:0000000000403d40\n.text:0000000000403d43\n.text:0000000000403d44\n'
p69
tp70
sS'xnrealloc'
p71
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p72
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p73
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00408c04\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00408c10\nPUSH RAX\nCALL 0x00408d60\n'
p74
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p75
S'.text:0000000000408bf0\n.text:0000000000408bf3\n.text:0000000000408bf6\n.text:0000000000408bf9\n.text:0000000000408bfb\n.text:0000000000408bff\n.text:0000000000408c02\n.text:0000000000408c04\n.text:0000000000408c05\n'
p76
tp77
sS'quote'
p78
(S'\n__stdcall quote(char * arg)\n'
p79
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p80
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00408220\n'
p81
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p82
S'.text:0000000000408230\n.text:0000000000408233\n.text:0000000000408235\n.text:0000000000408238\n'
p83
tp84
sS'emit_bug_reporting_address'
p85
(S'\n__stdcall emit_bug_reporting_address()\n'
p86
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  char *__format;\u000a  \u000a  __format = (char *)dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  printf(__format,"bug-findutils@gnu.org");\u000a  __format = (char *)dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  printf(__format,"GNU findutils","http://www.gnu.org/software/findutils/");\u000a  __format = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",\u000a                               5);\u000a  fputs(__format,stdout);\u000a  return;\u000a}\u000a\u000a
p87
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x40c275\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RCX,RAX\nMOV ESI,0x40b8e0\nXOR EAX,EAX\nMOV RDI,RCX\nCALL 0x00401cb0\nXOR EDI,EDI\nMOV ESI,0x40c28a\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RCX,RAX\nMOV ESI,0x40b3e1\nMOV EDX,0x40b88a\nXOR EAX,EAX\nMOV RDI,RCX\nCALL 0x00401cb0\nXOR EDI,EDI\nMOV ESI,0x40c29e\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RSI,qword ptr [0x0060f468]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401d10\n'
p88
S'50\n31 ff\nbe 75 c2 40 00\nba 05 00 00 00\ne8 de 90 ff ff\n48 89 c1\nbe e0 b8 40 00\n31 c0\n48 89 cf\ne8 4c 91 ff ff\n31 ff\nbe 8a c2 40 00\nba 05 00 00 00\ne8 bb 90 ff ff\n48 89 c1\nbe e1 b3 40 00\nba 8a b8 40 00\n31 c0\n48 89 cf\ne8 24 91 ff ff\n31 ff\nbe 9e c2 40 00\nba 05 00 00 00\ne8 93 90 ff ff\n48 8b 35 c4 68 20 00\n48 89 c7\n58\ne9 63 91 ff ff\n'
p89
S'.text:0000000000408b40\n.text:0000000000408b41\n.text:0000000000408b43\n.text:0000000000408b48\n.text:0000000000408b4d\n.text:0000000000408b52\n.text:0000000000408b55\n.text:0000000000408b5a\n.text:0000000000408b5c\n.text:0000000000408b5f\n.text:0000000000408b64\n.text:0000000000408b66\n.text:0000000000408b6b\n.text:0000000000408b70\n.text:0000000000408b75\n.text:0000000000408b78\n.text:0000000000408b7d\n.text:0000000000408b82\n.text:0000000000408b84\n.text:0000000000408b87\n.text:0000000000408b8c\n.text:0000000000408b8e\n.text:0000000000408b93\n.text:0000000000408b98\n.text:0000000000408b9d\n.text:0000000000408ba4\n.text:0000000000408ba7\n.text:0000000000408ba8\n'
p90
tp91
sS'clone_quoting_options'
p92
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p93
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p94
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401b40\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x60f560\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00408d10\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p95
S'55\n41 56\n53\n48 89 fb\ne8 44 ad ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 60 f5 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 f5 1e 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p96
S'.text:0000000000406df0\n.text:0000000000406df1\n.text:0000000000406df3\n.text:0000000000406df4\n.text:0000000000406df7\n.text:0000000000406dfc\n.text:0000000000406dff\n.text:0000000000406e02\n.text:0000000000406e05\n.text:0000000000406e0a\n.text:0000000000406e0e\n.text:0000000000406e13\n.text:0000000000406e16\n.text:0000000000406e1b\n.text:0000000000406e1e\n.text:0000000000406e1f\n.text:0000000000406e21\n.text:0000000000406e22\n'
p97
tp98
sS'get_stat_atime'
p99
(S'\n__stdcall get_stat_atime(stat * st)\n'
p100
V\u000atimespec get_stat_atime(stat *st)\u000a\u000a{\u000a  return st->st_atim;\u000a}\u000a\u000a
p101
S'MOV RAX,qword ptr [RDI + 0x48]\nMOV RDX,qword ptr [RDI + 0x50]\nRET\n'
p102
S'48 8b 47 48\n48 8b 57 50\nc3\n'
p103
S'.text:0000000000408680\n.text:0000000000408684\n.text:0000000000408688\n'
p104
tp105
sS'xmalloc'
p106
(S'\n__stdcall xmalloc(size_t n)\n'
p107
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p108
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401e90\nTEST RBX,RBX\nJZ 0x00408be3\nTEST RAX,RAX\nJZ 0x00408be5\nPOP RBX\nRET\nCALL 0x00408d60\n'
p109
S'53\n48 89 fb\ne8 b7 92 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p110
S'.text:0000000000408bd0\n.text:0000000000408bd1\n.text:0000000000408bd4\n.text:0000000000408bd9\n.text:0000000000408bdc\n.text:0000000000408bde\n.text:0000000000408be1\n.text:0000000000408be3\n.text:0000000000408be4\n.text:0000000000408be5\n'
p111
tp112
sS'putchar'
p113
(S'\n__stdcall putchar(int __c)\n'
p114
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint putchar(int __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_putchar_0060f028)();\u000a  return iVar1;\u000a}\u000a\u000a
p115
S'JMP qword ptr [0x0060f028]\n'
p116
S'ff 25 12 d5 20 00\n'
p117
S'.plt:0000000000401b10\n'
p118
tp119
sS'difftime'
p120
(S'\n__stdcall difftime(time_t __time1, time_t __time0)\n'
p121
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000adouble difftime(time_t __time1,time_t __time0)\u000a\u000a{\u000a  double dVar1;\u000a  \u000a  dVar1 = (double)(*(code *)PTR_difftime_0060f100)();\u000a  return dVar1;\u000a}\u000a\u000a
p122
S'JMP qword ptr [0x0060f100]\n'
p123
S'ff 25 3a d4 20 00\n'
p124
S'.plt:0000000000401cc0\n'
p125
tp126
sS'visit_justprint_unquoted'
p127
(S'\n__stdcall visit_justprint_unquoted(process_data * procdata, void * context)\n'
p128
V\u000aint visit_justprint_unquoted(process_data *procdata,void *context)\u000a\u000a{\u000a  int __c;\u000a  \u000a  fputs(procdata->original_filename,stdout);\u000a  __c = 10;\u000a  if (separator != 0) {\u000a    __c = 0;\u000a  }\u000a  putchar(__c);\u000a  return 1;\u000a}\u000a\u000a
p129
S'PUSH RAX\nMOV RDI,qword ptr [RDI + 0x10]\nMOV RSI,qword ptr [0x0060f468]\nCALL 0x00401d10\nMOV AL,byte ptr [0x0060f4dc]\nXOR ECX,ECX\nTEST AL,AL\nMOV EDI,0xa\nCMOVNZ EDI,ECX\nCALL 0x00401b10\nMOV EAX,0x1\nPOP RCX\nRET\n'
p130
S'50\n48 8b 7f 10\n48 8b 35 cc b7 20 00\ne8 6f e0 ff ff\n8a 05 35 b8 20 00\n31 c9\n84 c0\nbf 0a 00 00 00\n0f 45 f9\ne8 58 de ff ff\nb8 01 00 00 00\n59\nc3\n'
p131
S'.text:0000000000403c90\n.text:0000000000403c91\n.text:0000000000403c95\n.text:0000000000403c9c\n.text:0000000000403ca1\n.text:0000000000403ca7\n.text:0000000000403ca9\n.text:0000000000403cab\n.text:0000000000403cb0\n.text:0000000000403cb3\n.text:0000000000403cb8\n.text:0000000000403cbd\n.text:0000000000403cbe\n'
p132
tp133
sS'quotearg_char_mem'
p134
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p135
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p136
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x0060f590]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x0060f580]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060f570]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060f560]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00406e50\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00407d40\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p137
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d 28 75 20 00\n48 89 4c 24 30\n0f 10 05 0c 75 20 00\n0f 29 44 24 20\n0f 10 05 f0 74 20 00\n0f 29 44 24 10\n0f 10 05 d4 74 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p138
S'.text:0000000000408050\n.text:0000000000408052\n.text:0000000000408054\n.text:0000000000408055\n.text:0000000000408059\n.text:000000000040805b\n.text:000000000040805e\n.text:0000000000408061\n.text:0000000000408068\n.text:000000000040806d\n.text:0000000000408074\n.text:0000000000408079\n.text:0000000000408080\n.text:0000000000408085\n.text:000000000040808c\n.text:0000000000408090\n.text:0000000000408093\n.text:0000000000408098\n.text:000000000040809b\n.text:000000000040809d\n.text:00000000004080a2\n.text:00000000004080a4\n.text:00000000004080a7\n.text:00000000004080aa\n.text:00000000004080ad\n.text:00000000004080b2\n.text:00000000004080b6\n.text:00000000004080b7\n.text:00000000004080b9\n.text:00000000004080bb\n'
p139
tp140
sS'frame_dummy'
p141
(S'\n__stdcall frame_dummy()\n'
p142
V\u000a/* WARNING: Removing unreachable block (ram,0x004021aa) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p143
S'MOV EDI,0x60ee18\nCMP qword ptr [RDI],0x0\nJNZ 0x004021a0\nJMP 0x00402130\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x0040219b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00402130\n'
p144
S'bf 18 ee 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p145
S'.text:0000000000402190\n.text:0000000000402195\n.text:0000000000402199\n.text:000000000040219b\n.text:00000000004021a0\n.text:00000000004021a5\n.text:00000000004021a8\n.text:00000000004021aa\n.text:00000000004021ab\n.text:00000000004021ae\n.text:00000000004021b0\n.text:00000000004021b1\n'
p146
tp147
sS'unibyte_qmark_chars'
p148
(S'\n__stdcall unibyte_qmark_chars(char * buf, size_t len)\n'
p149
V\u000asize_t unibyte_qmark_chars(char *buf,size_t len)\u000a\u000a{\u000a  char *pcVar1;\u000a  ushort *puVar2;\u000a  byte bVar3;\u000a  ushort **ppuVar4;\u000a  \u000a  if (0 < (long)len) {\u000a    ppuVar4 = __ctype_b_loc();\u000a    pcVar1 = buf + len;\u000a    do {\u000a      puVar2 = *ppuVar4;\u000a      bVar3 = to_uchar();\u000a      if ((*(byte *)((long)puVar2 + (ulong)bVar3 * 2 + 1) & 0x40) == 0) {\u000a        *buf = '?';\u000a      }\u000a      buf = buf + 1;\u000a    } while (buf < pcVar1);\u000a  }\u000a  return len;\u000a}\u000a\u000a
p150
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R14,RSI\nMOV RBX,RDI\nTEST R14,R14\nJLE 0x00404741\nCALL 0x004020b0\nMOV R15,RAX\nLEA R12,[RBX + R14*0x1]\nMOV R13,qword ptr [R15]\nMOVSX EDI,byte ptr [RBX]\nCALL 0x00404750\nMOVZX EAX,AL\nTEST byte ptr [R13 + RAX*0x2 + 0x1],0x40\nJNZ 0x00404739\nMOV byte ptr [RBX],0x3f\nINC RBX\nCMP RBX,R12\nJC 0x00404720\nMOV RAX,R14\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p151
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 f6\n48 89 fb\n4d 85 f6\n7e 2d\ne8 97 d9 ff ff\n49 89 c7\n4e 8d 24 33\n4d 8b 2f\n0f be 3b\ne8 25 00 00 00\n0f b6 c0\n41 f6 44 45 01 40\n75 03\nc6 03 3f\n48 ff c3\n4c 39 e3\n72 df\n4c 89 f0\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p152
S'.text:0000000000404700\n.text:0000000000404702\n.text:0000000000404704\n.text:0000000000404706\n.text:0000000000404708\n.text:0000000000404709\n.text:000000000040470c\n.text:000000000040470f\n.text:0000000000404712\n.text:0000000000404714\n.text:0000000000404719\n.text:000000000040471c\n.text:0000000000404720\n.text:0000000000404723\n.text:0000000000404726\n.text:000000000040472b\n.text:000000000040472e\n.text:0000000000404734\n.text:0000000000404736\n.text:0000000000404739\n.text:000000000040473c\n.text:000000000040473f\n.text:0000000000404741\n.text:0000000000404744\n.text:0000000000404745\n.text:0000000000404747\n.text:0000000000404749\n.text:000000000040474b\n.text:000000000040474d\n'
p153
tp154
sS'setgid'
p155
(S'\n__stdcall setgid(__gid_t __gid)\n'
p156
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint setgid(__gid_t __gid)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_setgid_0060f260)();\u000a  return iVar1;\u000a}\u000a\u000a
p157
S'JMP qword ptr [0x0060f260]\n'
p158
S'ff 25 da d2 20 00\n'
p159
S'.plt:0000000000401f80\n'
p160
tp161
sS'visit_substring_match_casefold_narrow'
p162
(S'\n__stdcall visit_substring_match_casefold_narrow(process_data * procdata, void * context)\n'
p163
V\u000aint visit_substring_match_casefold_narrow(process_data *procdata,void *context)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = __ctype_get_mb_cur_max();\u000a  if (sVar1 == 1) {\u000a    pcVar2 = strcasestr(procdata->munged_filename,(char *)context);\u000a    return (int)((uint)(pcVar2 == (char *)0x0) + 2 + (uint)(pcVar2 == (char *)0x0));\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("MB_CUR_MAX == 1","locate.c",0x2df,\u000a                "int visit_substring_match_casefold_narrow(struct process_data *, void *)");\u000a}\u000a\u000a
p164
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nCALL 0x00401c40\nCMP RAX,0x1\nJNZ 0x00403a15\nMOV RDI,qword ptr [RBX + 0x20]\nMOV RSI,R14\nCALL 0x00401fc0\nXOR ECX,ECX\nTEST RAX,RAX\nSETZ CL\nLEA EAX,[RCX + RCX*0x1 + 0x2]\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV EDI,0x40b027\nMOV ESI,0x40a797\nMOV EDX,0x2df\nMOV ECX,0x40b037\nCALL 0x00401d00\n'
p165
S'41 56\n53\n50\n49 89 f6\n48 89 fb\ne8 51 e2 ff ff\n48 83 f8 01\n75 20\n48 8b 7b 20\n4c 89 f6\ne8 bf e5 ff ff\n31 c9\n48 85 c0\n0f 94 c1\n8d 44 09 02\n48 83 c4 08\n5b\n41 5e\nc3\nbf 27 b0 40 00\nbe 97 a7 40 00\nba df 02 00 00\nb9 37 b0 40 00\ne8 d2 e2 ff ff\n'
p166
S'.text:00000000004039e0\n.text:00000000004039e2\n.text:00000000004039e3\n.text:00000000004039e4\n.text:00000000004039e7\n.text:00000000004039ea\n.text:00000000004039ef\n.text:00000000004039f3\n.text:00000000004039f5\n.text:00000000004039f9\n.text:00000000004039fc\n.text:0000000000403a01\n.text:0000000000403a03\n.text:0000000000403a06\n.text:0000000000403a09\n.text:0000000000403a0d\n.text:0000000000403a11\n.text:0000000000403a12\n.text:0000000000403a14\n.text:0000000000403a15\n.text:0000000000403a1a\n.text:0000000000403a1f\n.text:0000000000403a24\n.text:0000000000403a29\n'
p167
tp168
sS'quotearg_n_style_colon'
p169
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p170
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p171
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00407f70\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00406e50\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00407d40\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p172
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p173
S'.text:00000000004080f0\n.text:00000000004080f1\n.text:00000000004080f3\n.text:00000000004080f4\n.text:00000000004080f8\n.text:00000000004080fb\n.text:00000000004080fd\n.text:0000000000408102\n.text:0000000000408105\n.text:000000000040810a\n.text:000000000040810f\n.text:0000000000408114\n.text:0000000000408117\n.text:000000000040811c\n.text:0000000000408123\n.text:0000000000408125\n.text:0000000000408128\n.text:000000000040812b\n.text:0000000000408130\n.text:0000000000408134\n.text:0000000000408135\n.text:0000000000408137\n.text:0000000000408138\n'
p174
tp175
sS'get_stat_birthtime_ns'
p176
(S'\n__stdcall get_stat_birthtime_ns(stat * st)\n'
p177
V\u000along get_stat_birthtime_ns(stat *st)\u000a\u000a{\u000a  return 0;\u000a}\u000a\u000a
p178
S'XOR EAX,EAX\nRET\n'
p179
S'31 c0\nc3\n'
p180
S'.text:0000000000408670\n.text:0000000000408672\n'
p181
tp182
sS'field_length'
p183
(S'\n__stdcall field_length(char * str, char * separators)\n'
p184
V\u000asize_t field_length(char *str,char *separators)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t sVar2;\u000a  \u000a  if (*separators != 0) {\u000a    pcVar1 = strpbrk(str,separators);\u000a    if (pcVar1 != (char *)0x0) {\u000a      return (size_t)(pcVar1 + -(long)str);\u000a    }\u000a  }\u000a  sVar2 = strlen(str);\u000a  return sVar2;\u000a}\u000a\u000a
p185
S'PUSH RBX\nMOV RBX,RDI\nCMP byte ptr [RSI],0x0\nJZ 0x0040497b\nMOV RDI,RBX\nCALL 0x00401ef0\nTEST RAX,RAX\nJZ 0x0040497b\nSUB RAX,RBX\nPOP RBX\nRET\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401c50\n'
p186
S'53\n48 89 fb\n80 3e 00\n74 12\n48 89 df\ne8 7f d5 ff ff\n48 85 c0\n74 05\n48 29 d8\n5b\nc3\n48 89 df\n5b\ne9 cc d2 ff ff\n'
p187
S'.text:0000000000404960\n.text:0000000000404961\n.text:0000000000404964\n.text:0000000000404967\n.text:0000000000404969\n.text:000000000040496c\n.text:0000000000404971\n.text:0000000000404974\n.text:0000000000404976\n.text:0000000000404979\n.text:000000000040497a\n.text:000000000040497b\n.text:000000000040497e\n.text:000000000040497f\n'
p188
tp189
sS'mbuiter_multi_next'
p190
(S'\n__stdcall mbuiter_multi_next(mbuiter_multi * iter)\n'
p191
V\u000avoid mbuiter_multi_next(mbuiter_multi *iter)\u000a\u000a{\u000a  wchar_t *pwc;\u000a  char *string;\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  size_t maxlen;\u000a  size_t n;\u000a  \u000a  if (iter->next_done != false) {\u000a    return;\u000a  }\u000a  if (iter->in_shift == false) {\u000a    _Var1 = is_basic();\u000a    if (_Var1 != false) {\u000a      (iter->cur).bytes = 1;\u000a      (iter->cur).wc = (int)*(iter->cur).ptr;\u000a      (iter->cur).wc_valid = true;\u000a      goto LAB_00406c96;\u000a    }\u000a    iVar2 = mbsinit((mbstate_t *)&iter->state);\u000a    if (iVar2 == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("mbsinit (&iter->state)","./mbuiter.h",0x96,\u000a                    "void mbuiter_multi_next(struct mbuiter_multi *)");\u000a    }\u000a    iter->in_shift = true;\u000a  }\u000a  pwc = &(iter->cur).wc;\u000a  string = (iter->cur).ptr;\u000a  maxlen = __ctype_get_mb_cur_max();\u000a  n = strnlen1(string,maxlen);\u000a  n = rpl_mbrtowc(pwc,string,n,(mbstate_t *)(mbstate_t *)&iter->state);\u000a  (iter->cur).bytes = n;\u000a  if (n == 0xfffffffffffffffe) {\u000a    maxlen = strlen((iter->cur).ptr);\u000a    (iter->cur).bytes = maxlen;\u000a    (iter->cur).wc_valid = false;\u000a  }\u000a  else {\u000a    if (n == 0) {\u000a      (iter->cur).bytes = 1;\u000a      if (*(iter->cur).ptr != 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("*iter->cur.ptr == \u005c'\u005c\u005c0\u005c'","./mbuiter.h",0xb2,\u000a                      "void mbuiter_multi_next(struct mbuiter_multi *)");\u000a      }\u000a      if (*pwc != 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("iter->cur.wc == 0","./mbuiter.h",0xb3,\u000a                      "void mbuiter_multi_next(struct mbuiter_multi *)");\u000a      }\u000a    }\u000a    else {\u000a      if (n == 0xffffffffffffffff) {\u000a        (iter->cur).bytes = 1;\u000a        (iter->cur).wc_valid = false;\u000a        goto LAB_00406c96;\u000a      }\u000a    }\u000a    (iter->cur).wc_valid = true;\u000a    iVar2 = mbsinit((mbstate_t *)&iter->state);\u000a    if (iVar2 != 0) {\u000a      iter->in_shift = false;\u000a    }\u000a  }\u000aLAB_00406c96:\u000a  iter->next_done = true;\u000a  return;\u000a}\u000a\u000a
p192
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCMP byte ptr [RBX + 0xc],0x0\nJNZ 0x00406c9a\nCMP byte ptr [RBX],0x0\nJNZ 0x00406c09\nMOV RAX,qword ptr [RBX + 0x10]\nMOVSX EDI,byte ptr [RAX]\nCALL 0x00409df0\nTEST AL,AL\nJZ 0x00406bf5\nMOV qword ptr [RBX + 0x18],0x1\nMOV RAX,qword ptr [RBX + 0x10]\nMOVSX EAX,byte ptr [RAX]\nMOV dword ptr [RBX + 0x24],EAX\nMOV byte ptr [RBX + 0x20],0x1\nJMP 0x00406c96\nLEA RDI,[RBX + 0x4]\nCALL 0x00402060\nTEST EAX,EAX\nJZ 0x00406ca6\nMOV byte ptr [RBX],0x1\nLEA R14,[RBX + 0x24]\nMOV R12,qword ptr [RBX + 0x10]\nCALL 0x00401c40\nMOV RDI,R12\nMOV RSI,RAX\nCALL 0x004086c0\nLEA R15,[RBX + 0x4]\nMOV RDI,R14\nMOV RSI,R12\nMOV RDX,RAX\nMOV RCX,R15\nCALL 0x004093a0\nMOV qword ptr [RBX + 0x18],RAX\nCMP RAX,-0x2\nJZ 0x00406c59\nTEST RAX,RAX\nJZ 0x00406c6c\nCMP RAX,-0x1\nJNZ 0x00406c83\nMOV qword ptr [RBX + 0x18],0x1\nMOV byte ptr [RBX + 0x20],0x0\nJMP 0x00406c96\nMOV RDI,qword ptr [RBX + 0x10]\nCALL 0x00401c50\nMOV qword ptr [RBX + 0x18],RAX\nMOV byte ptr [RBX + 0x20],0x0\nJMP 0x00406c96\nMOV qword ptr [RBX + 0x18],0x1\nMOV RAX,qword ptr [RBX + 0x10]\nCMP byte ptr [RAX],0x0\nJNZ 0x00406cbf\nCMP dword ptr [R14],0x0\nJNZ 0x00406cd8\nMOV byte ptr [RBX + 0x20],0x1\nMOV RDI,R15\nCALL 0x00402060\nTEST EAX,EAX\nJZ 0x00406c96\nMOV byte ptr [RBX],0x0\nMOV byte ptr [RBX + 0xc],0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nMOV EDI,0x40b9c0\nMOV ESI,0x40b9d7\nMOV EDX,0x96\nMOV ECX,0x40b9e3\nCALL 0x00401d00\nMOV EDI,0x40ba13\nMOV ESI,0x40b9d7\nMOV EDX,0xb2\nMOV ECX,0x40b9e3\nCALL 0x00401d00\nMOV EDI,0x40ba2a\nMOV ESI,0x40b9d7\nMOV EDX,0xb3\nMOV ECX,0x40b9e3\nCALL 0x00401d00\n'
p193
S'41 57\n41 56\n41 54\n53\n50\n48 89 fb\n80 7b 0c 00\n0f 85 d5 00 00 00\n80 3b 00\n75 3f\n48 8b 43 10\n0f be 38\ne8 1a 32 00 00\n84 c0\n74 1b\n48 c7 43 18 01 00 00 00\n48 8b 43 10\n0f be 00\n89 43 24\nc6 43 20 01\ne9 a1 00 00 00\n48 8d 7b 04\ne8 62 b4 ff ff\n85 c0\n0f 84 a0 00 00 00\nc6 03 01\n4c 8d 73 24\n4c 8b 63 10\ne8 2a b0 ff ff\n4c 89 e7\n48 89 c6\ne8 9f 1a 00 00\n4c 8d 7b 04\n4c 89 f7\n4c 89 e6\n48 89 c2\n4c 89 f9\ne8 6a 27 00 00\n48 89 43 18\n48 83 f8 fe\n74 19\n48 85 c0\n74 27\n48 83 f8 ff\n75 38\n48 c7 43 18 01 00 00 00\nc6 43 20 00\neb 3d\n48 8b 7b 10\ne8 ee af ff ff\n48 89 43 18\nc6 43 20 00\neb 2a\n48 c7 43 18 01 00 00 00\n48 8b 43 10\n80 38 00\n75 42\n41 83 3e 00\n75 55\nc6 43 20 01\n4c 89 ff\ne8 d1 b3 ff ff\n85 c0\n74 03\nc6 03 00\nc6 43 0c 01\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\nbf c0 b9 40 00\nbe d7 b9 40 00\nba 96 00 00 00\nb9 e3 b9 40 00\ne8 41 b0 ff ff\nbf 13 ba 40 00\nbe d7 b9 40 00\nba b2 00 00 00\nb9 e3 b9 40 00\ne8 28 b0 ff ff\nbf 2a ba 40 00\nbe d7 b9 40 00\nba b3 00 00 00\nb9 e3 b9 40 00\ne8 0f b0 ff ff\n'
p194
S'.text:0000000000406bb0\n.text:0000000000406bb2\n.text:0000000000406bb4\n.text:0000000000406bb6\n.text:0000000000406bb7\n.text:0000000000406bb8\n.text:0000000000406bbb\n.text:0000000000406bbf\n.text:0000000000406bc5\n.text:0000000000406bc8\n.text:0000000000406bca\n.text:0000000000406bce\n.text:0000000000406bd1\n.text:0000000000406bd6\n.text:0000000000406bd8\n.text:0000000000406bda\n.text:0000000000406be2\n.text:0000000000406be6\n.text:0000000000406be9\n.text:0000000000406bec\n.text:0000000000406bf0\n.text:0000000000406bf5\n.text:0000000000406bf9\n.text:0000000000406bfe\n.text:0000000000406c00\n.text:0000000000406c06\n.text:0000000000406c09\n.text:0000000000406c0d\n.text:0000000000406c11\n.text:0000000000406c16\n.text:0000000000406c19\n.text:0000000000406c1c\n.text:0000000000406c21\n.text:0000000000406c25\n.text:0000000000406c28\n.text:0000000000406c2b\n.text:0000000000406c2e\n.text:0000000000406c31\n.text:0000000000406c36\n.text:0000000000406c3a\n.text:0000000000406c3e\n.text:0000000000406c40\n.text:0000000000406c43\n.text:0000000000406c45\n.text:0000000000406c49\n.text:0000000000406c4b\n.text:0000000000406c53\n.text:0000000000406c57\n.text:0000000000406c59\n.text:0000000000406c5d\n.text:0000000000406c62\n.text:0000000000406c66\n.text:0000000000406c6a\n.text:0000000000406c6c\n.text:0000000000406c74\n.text:0000000000406c78\n.text:0000000000406c7b\n.text:0000000000406c7d\n.text:0000000000406c81\n.text:0000000000406c83\n.text:0000000000406c87\n.text:0000000000406c8a\n.text:0000000000406c8f\n.text:0000000000406c91\n.text:0000000000406c93\n.text:0000000000406c96\n.text:0000000000406c9a\n.text:0000000000406c9e\n.text:0000000000406c9f\n.text:0000000000406ca1\n.text:0000000000406ca3\n.text:0000000000406ca5\n.text:0000000000406ca6\n.text:0000000000406cab\n.text:0000000000406cb0\n.text:0000000000406cb5\n.text:0000000000406cba\n.text:0000000000406cbf\n.text:0000000000406cc4\n.text:0000000000406cc9\n.text:0000000000406cce\n.text:0000000000406cd3\n.text:0000000000406cd8\n.text:0000000000406cdd\n.text:0000000000406ce2\n.text:0000000000406ce7\n.text:0000000000406cec\n'
p195
tp196
sS'extend'
p197
(S'\n__stdcall extend(process_data * procdata, size_t siz1, size_t siz2)\n'
p198
V\u000avoid extend(process_data *procdata,size_t siz1,size_t siz2)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  if (~siz1 < siz2) {\u000a    toolong(procdata);\u000a    return;\u000a  }\u000a  if (procdata->pathsize < siz2 + siz1) {\u000a    procdata->pathsize = siz2 + siz1;\u000a    pcVar1 = (char *)x2nrealloc(procdata->original_filename,&procdata->pathsize,1);\u000a    procdata->original_filename = pcVar1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p199
S'PUSH RBX\nMOV RBX,RDI\nMOV RAX,RSI\nNOT RAX\nCMP RAX,RDX\nJNC 0x00403718\nMOV RDI,RBX\nPOP RBX\nJMP 0x00404230\nADD RDX,RSI\nCMP qword ptr [RBX + 0x18],RDX\nJNC 0x0040373b\nLEA RSI,[RBX + 0x18]\nMOV qword ptr [RBX + 0x18],RDX\nMOV RDI,qword ptr [RBX + 0x10]\nMOV EDX,0x1\nCALL 0x00408c40\nMOV qword ptr [RBX + 0x10],RAX\nPOP RBX\nRET\n'
p200
S'53\n48 89 fb\n48 89 f0\n48 f7 d0\n48 39 d0\n73 09\n48 89 df\n5b\ne9 18 0b 00 00\n48 01 f2\n48 39 53 18\n73 1a\n48 8d 73 18\n48 89 53 18\n48 8b 7b 10\nba 01 00 00 00\ne8 09 55 00 00\n48 89 43 10\n5b\nc3\n'
p201
S'.text:0000000000403700\n.text:0000000000403701\n.text:0000000000403704\n.text:0000000000403707\n.text:000000000040370a\n.text:000000000040370d\n.text:000000000040370f\n.text:0000000000403712\n.text:0000000000403713\n.text:0000000000403718\n.text:000000000040371b\n.text:000000000040371f\n.text:0000000000403721\n.text:0000000000403725\n.text:0000000000403729\n.text:000000000040372d\n.text:0000000000403732\n.text:0000000000403737\n.text:000000000040373b\n.text:000000000040373c\n'
p202
tp203
sS'quote_mem'
p204
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p205
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p206
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00408200\n'
p207
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p208
S'.text:0000000000408210\n.text:0000000000408213\n.text:0000000000408216\n.text:0000000000408218\n.text:000000000040821b\n.text:000000000040821e\n'
p209
tp210
sS'fileno'
p211
(S'\n__stdcall fileno(FILE * __stream)\n'
p212
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_0060f1c0)();\u000a  return iVar1;\u000a}\u000a\u000a
p213
S'JMP qword ptr [0x0060f1c0]\n'
p214
S'ff 25 7a d3 20 00\n'
p215
S'.plt:0000000000401e40\n'
p216
tp217
sS'xstrtol_error'
p218
(S'\n__stdcall xstrtol_error(option * long_options, char * arg)\n'
p219
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000avoid xstrtol_error(option *long_options,char *arg)\u000a\u000a{\u000a  int iVar1;\u000a  ulong in_RAX;\u000a  undefined8 uVar2;\u000a  long in_RCX;\u000a  undefined in_DL;\u000a  long lVar3;\u000a  undefined *puVar4;\u000a  uint uVar5;\u000a  ulong in_R9;\u000a  char option_buffer [2];\u000a  ulong uStack40;\u000a  \u000a  iVar1 = (int)arg;\u000a  uVar5 = (int)long_options - 1;\u000a  if (uVar5 < 4) {\u000a    if (iVar1 < 0) {\u000a      lVar3 = (long)&uStack40 + 6;\u000a      puVar4 = &DAT_0040c320 + -(long)iVar1;\u000a      uStack40 = (ulong)CONCAT16(in_DL,(int6)in_RAX);\u000a    }\u000a    else {\u000a      lVar3 = *(long *)(in_RCX + (long)iVar1 * 0x20);\u000a      puVar4 = &DAT_0040c320;\u000a      uStack40 = in_RAX;\u000a    }\u000a    uVar2 = dcgettext(0,(&PTR_s__s_s_argument___s__too_large_0040c380)[(long)(int)uVar5],5);\u000a    error(in_R9 & 0xffffffff,0,uVar2,puVar4,lVar3);\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p220
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R15D,R9D\nMOV R14,R8\nMOV EAX,ESI\nDEC EDI\nCMP EDI,0x4\nJNC 0x00408e2e\nMOVSXD RSI,EDI\nMOV RSI,qword ptr [0x40c380 + RSI*0x8]\nCDQE\nTEST EAX,EAX\nJS 0x00408de6\nSHL RAX,0x5\nMOV RBX,qword ptr [RCX + RAX*0x1]\nMOV EBP,0x40c320\nJMP 0x00408dfc\nLEA RBX,[RSP + 0x6]\nMOV EBP,0x40c320\nSUB RBP,RAX\nMOV byte ptr [RSP + 0x6],DL\nMOV byte ptr [RSP + 0x7],0x0\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RCX,RAX\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R15D\nMOV RDX,RCX\nMOV RCX,RBP\nMOV R8,RBX\nMOV R9,R14\nCALL 0x00401f70\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401b30\n'
p221
S'55\n41 57\n41 56\n53\n50\n45 89 cf\n4d 89 c6\n89 f0\nff cf\n83 ff 04\n73 68\n48 63 f7\n48 8b 34 f5 80 c3 40 00\n48 98\n85 c0\n78 0f\n48 c1 e0 05\n48 8b 1c 01\nbd 20 c3 40 00\neb 16\n48 8d 5c 24 06\nbd 20 c3 40 00\n48 29 c5\n88 54 24 06\nc6 44 24 07 00\n31 ff\nba 05 00 00 00\ne8 28 8e ff ff\n48 89 c1\n31 f6\n31 c0\n44 89 ff\n48 89 ca\n48 89 e9\n49 89 d8\n4d 89 f1\ne8 4d 91 ff ff\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\ne8 fd 8c ff ff\n'
p222
S'.text:0000000000408db0\n.text:0000000000408db1\n.text:0000000000408db3\n.text:0000000000408db5\n.text:0000000000408db6\n.text:0000000000408db7\n.text:0000000000408dba\n.text:0000000000408dbd\n.text:0000000000408dbf\n.text:0000000000408dc1\n.text:0000000000408dc4\n.text:0000000000408dc6\n.text:0000000000408dc9\n.text:0000000000408dd1\n.text:0000000000408dd3\n.text:0000000000408dd5\n.text:0000000000408dd7\n.text:0000000000408ddb\n.text:0000000000408ddf\n.text:0000000000408de4\n.text:0000000000408de6\n.text:0000000000408deb\n.text:0000000000408df0\n.text:0000000000408df3\n.text:0000000000408df7\n.text:0000000000408dfc\n.text:0000000000408dfe\n.text:0000000000408e03\n.text:0000000000408e08\n.text:0000000000408e0b\n.text:0000000000408e0d\n.text:0000000000408e0f\n.text:0000000000408e12\n.text:0000000000408e15\n.text:0000000000408e18\n.text:0000000000408e1b\n.text:0000000000408e1e\n.text:0000000000408e23\n.text:0000000000408e27\n.text:0000000000408e28\n.text:0000000000408e2a\n.text:0000000000408e2c\n.text:0000000000408e2d\n.text:0000000000408e2e\n'
p223
tp224
sS'visit_stats'
p225
(S'\n__stdcall visit_stats(process_data * procdata, void * context)\n'
p226
V\u000aint visit_stats(process_data *procdata,void *context)\u000a\u000a{\u000a  bool bVar1;\u000a  bool bVar2;\u000a  bool bVar3;\u000a  bool bVar4;\u000a  bool bVar5;\u000a  size_t sVar6;\u000a  ushort **ppuVar7;\u000a  byte bVar8;\u000a  byte *__s;\u000a  \u000a  __s = (byte *)procdata->original_filename;\u000a  sVar6 = strlen((char *)__s);\u000a  *(long *)((long)context + 8) = *(long *)((long)context + 8) + 1;\u000a  *(long *)((long)context + 0x10) = *(long *)((long)context + 0x10) + sVar6;\u000a  bVar8 = *__s;\u000a  if (bVar8 != 0) {\u000a    bVar1 = false;\u000a    bVar3 = false;\u000a    bVar5 = false;\u000a    do {\u000a      __s = __s + 1;\u000a      if ((char)bVar8 < 0) {\u000a        bVar1 = true;\u000a      }\u000a      bVar2 = true;\u000a      bVar4 = true;\u000a      if ((bVar8 != 10) &&\u000a         (ppuVar7 = __ctype_b_loc(), bVar2 = bVar3, bVar4 = bVar5,\u000a         (*(byte *)((long)*ppuVar7 + (ulong)bVar8 * 2 + 1) & 0x20) != 0)) {\u000a        bVar2 = true;\u000a        bVar4 = bVar5;\u000a      }\u000a      bVar8 = *__s;\u000a      bVar3 = bVar2;\u000a      bVar5 = bVar4;\u000a    } while (bVar8 != 0);\u000a    if (bVar1) {\u000a      *(long *)((long)context + 0x28) = *(long *)((long)context + 0x28) + 1;\u000a    }\u000a    if (bVar2) {\u000a      *(long *)((long)context + 0x18) = *(long *)((long)context + 0x18) + 1;\u000a    }\u000a    if (bVar4) {\u000a      *(long *)((long)context + 0x20) = *(long *)((long)context + 0x20) + 1;\u000a    }\u000a  }\u000a  return 1;\u000a}\u000a\u000a
p227
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBP,qword ptr [RDI + 0x10]\nMOV RDI,RBP\nCALL 0x00401c50\nINC qword ptr [R14 + 0x8]\nADD qword ptr [R14 + 0x10],RAX\nMOV BL,byte ptr [RBP]\nTEST BL,BL\nJZ 0x00403c1d\nMOV qword ptr [RSP],R14\nINC RBP\nXOR R13D,R13D\nMOV R15D,0x1\nXOR R14D,R14D\nXOR R12D,R12D\nNOP\nTEST BL,BL\nCMOVS R12D,R15D\nCMP BL,0xa\nMOV ECX,0x1\nMOV EAX,0x1\nJZ 0x00403bef\nCALL 0x004020b0\nMOV RAX,qword ptr [RAX]\nMOVZX ECX,BL\nTEST byte ptr [RAX + RCX*0x2 + 0x1],0x20\nCMOVNZ R14D,R15D\nMOV ECX,R14D\nMOV EAX,R13D\nMOVZX EBX,byte ptr [RBP]\nINC RBP\nTEST BL,BL\nMOV R13D,EAX\nMOV R14D,ECX\nJNZ 0x00403bc0\nTEST R12D,R12D\nMOV RDX,qword ptr [RSP]\nJZ 0x00403c0d\nINC qword ptr [RDX + 0x28]\nTEST ECX,ECX\nJZ 0x00403c15\nINC qword ptr [RDX + 0x18]\nTEST EAX,EAX\nJZ 0x00403c1d\nINC qword ptr [RDX + 0x20]\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p228
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f6\n48 8b 6f 10\n48 89 ef\ne8 b6 e0 ff ff\n49 ff 46 08\n49 01 46 10\n8a 5d 00\n84 db\n74 74\n4c 89 34 24\n48 ff c5\n45 31 ed\n41 bf 01 00 00 00\n45 31 f6\n45 31 e4\n90\n84 db\n45 0f 48 e7\n80 fb 0a\nb9 01 00 00 00\nb8 01 00 00 00\n74 1a\ne8 d6 e4 ff ff\n48 8b 00\n0f b6 cb\nf6 44 48 01 20\n45 0f 45 f7\n44 89 f1\n44 89 e8\n0f b6 5d 00\n48 ff c5\n84 db\n41 89 c5\n41 89 ce\n75 c0\n45 85 e4\n48 8b 14 24\n74 04\n48 ff 42 28\n85 c9\n74 04\n48 ff 42 18\n85 c0\n74 04\n48 ff 42 20\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p229
S'.text:0000000000403b80\n.text:0000000000403b81\n.text:0000000000403b83\n.text:0000000000403b85\n.text:0000000000403b87\n.text:0000000000403b89\n.text:0000000000403b8a\n.text:0000000000403b8b\n.text:0000000000403b8e\n.text:0000000000403b92\n.text:0000000000403b95\n.text:0000000000403b9a\n.text:0000000000403b9e\n.text:0000000000403ba2\n.text:0000000000403ba5\n.text:0000000000403ba7\n.text:0000000000403ba9\n.text:0000000000403bad\n.text:0000000000403bb0\n.text:0000000000403bb3\n.text:0000000000403bb9\n.text:0000000000403bbc\n.text:0000000000403bbf\n.text:0000000000403bc0\n.text:0000000000403bc2\n.text:0000000000403bc6\n.text:0000000000403bc9\n.text:0000000000403bce\n.text:0000000000403bd3\n.text:0000000000403bd5\n.text:0000000000403bda\n.text:0000000000403bdd\n.text:0000000000403be0\n.text:0000000000403be5\n.text:0000000000403be9\n.text:0000000000403bec\n.text:0000000000403bef\n.text:0000000000403bf3\n.text:0000000000403bf6\n.text:0000000000403bf8\n.text:0000000000403bfb\n.text:0000000000403bfe\n.text:0000000000403c00\n.text:0000000000403c03\n.text:0000000000403c07\n.text:0000000000403c09\n.text:0000000000403c0d\n.text:0000000000403c0f\n.text:0000000000403c11\n.text:0000000000403c15\n.text:0000000000403c17\n.text:0000000000403c19\n.text:0000000000403c1d\n.text:0000000000403c22\n.text:0000000000403c26\n.text:0000000000403c27\n.text:0000000000403c29\n.text:0000000000403c2b\n.text:0000000000403c2d\n.text:0000000000403c2f\n.text:0000000000403c30\n'
p230
tp231
sS'towlower'
p232
(S'\n__stdcall towlower(wint_t __wc)\n'
p233
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000awint_t towlower(wint_t __wc)\u000a\u000a{\u000a  wint_t wVar1;\u000a  \u000a  wVar1 = (*(code *)PTR_towlower_0060f288)();\u000a  return wVar1;\u000a}\u000a\u000a
p234
S'JMP qword ptr [0x0060f288]\n'
p235
S'ff 25 b2 d2 20 00\n'
p236
S'.plt:0000000000401fd0\n'
p237
tp238
sS'mbrtowc'
p239
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p240
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_0060f0e8)();\u000a  return sVar1;\u000a}\u000a\u000a
p241
S'JMP qword ptr [0x0060f0e8]\n'
p242
S'ff 25 52 d4 20 00\n'
p243
S'.plt:0000000000401c90\n'
p244
tp245
sS'search_one_database'
p246
(S'\n__stdcall search_one_database(locate_limits * plimit)\n'
p247
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000aulong search_one_database(locate_limits *plimit)\u000a\u000a{\u000a  ExistenceCheckType EVar1;\u000a  visitor *pvVar2;\u000a  int iVar3;\u000a  size_t __length;\u000a  undefined8 uVar4;\u000a  char *data;\u000a  size_t sVar5;\u000a  long lVar6;\u000a  re_pattern_buffer *__buffer;\u000a  uchar *puVar7;\u000a  code *fn;\u000a  undefined8 uVar8;\u000a  undefined8 uVar9;\u000a  uint *puVar10;\u000a  FILE *in_RCX;\u000a  char *in_RDX;\u000a  uintmax_t uVar11;\u000a  re_pattern_buffer **in_RSI;\u000a  re_pattern_buffer *context;\u000a  int (*fn_00)(process_data *,void *);\u000a  timespec *in_R8;\u000a  long in_R9;\u000a  int iVar12;\u000a  size_t len;\u000a  ulong uVar13;\u000a  uint uVar14;\u000a  int in_stack_00000008;\u000a  uint in_stack_00000010;\u000a  char *format_name;\u000a  int in_stack_00000020;\u000a  uint in_stack_00000028;\u000a  int in_stack_00000030;\u000a  int in_stack_00000038;\u000a  uint in_stack_00000040;\u000a  ExistenceCheckType local_1b4;\u000a  uint local_1ac;\u000a  undefined8 local_1a8;\u000a  char *local_1a0;\u000a  undefined8 local_198;\u000a  long local_190;\u000a  timespec *local_188;\u000a  code *local_180;\u000a  code *local_178;\u000a  process_data local_170;\u000a  \u000a  EVar1 = check_existence;\u000a  local_1b4 = check_existence;\u000a  uVar14 = in_stack_00000040 | 0x400000;\u000a  if (in_stack_00000008 == 0) {\u000a    uVar14 = in_stack_00000040;\u000a  }\u000a  local_170.endian_state = GetwordEndianStateInitial;\u000a  local_170.count = 0;\u000a  local_170.len = 0;\u000a  inspectors = (visitor *)0x0;\u000a  lastinspector = (visitor *)0x0;\u000a  past_pat_inspector = (visitor *)0x0;\u000a  results_were_filtered = 0;\u000a  local_170.pathsize = 0x80;\u000a  local_190 = in_R9;\u000a  local_188 = in_R8;\u000a  local_170.fp = in_RCX;\u000a  local_170.dbfile = in_RDX;\u000a  data = (char *)xmalloc(0x80);\u000a  local_170.original_filename = data;\u000a  __length = fread(data,1,2,(FILE *)local_170.fp);\u000a  local_1ac = 0;\u000a  len = SEXT48((int)__length);\u000a  iVar3 = looking_at_slocate_locatedb(local_170.dbfile,data,len,(int *)&local_1ac);\u000a  if (iVar3 == 0) {\u000a    local_1a8 = 0;\u000a    extend(&local_170,10,0);\u000a    sVar5 = fread(local_170.original_filename + len,1,10 - len,(FILE *)local_170.fp);\u000a    iVar12 = (int)sVar5 + (int)__length;\u000a    iVar3 = looking_at_gnu_locatedb(local_170.original_filename,(long)iVar12);\u000a    if (iVar3 == 0) {\u000a      extend(&local_170,0x100,0);\u000a      if ((iVar12 < 0x100) &&\u000a         (__length = fread(local_170.original_filename + (long)iVar12,1,(long)(0x100 - iVar12),\u000a                           (FILE *)local_170.fp), (int)__length + iVar12 != 0x100)) {\u000a        uVar4 = dcgettext(0,"Old-format locate database %s is too short to be valid",5);\u000a        data = quotearg_n_style((char *)0x0);\u000a        error(1,0,uVar4,data);\u000a      }\u000a      lVar6 = 0;\u000a      do {\u000a        local_170.bigram1[lVar6] = local_170.original_filename[lVar6 * 2];\u000a        local_170.bigram2[lVar6] = local_170.original_filename[lVar6 * 2 + 1];\u000a        lVar6 = lVar6 + 1;\u000a      } while (lVar6 != 0x80);\u000a      local_1a8 = 0;\u000a      add_visitor(visit_old_format,(void *)0x0);\u000a      local_1a0 = "old";\u000a      local_198 = 1;\u000a    }\u000a    else {\u000a      add_visitor(visit_locate02_format,(void *)0x0);\u000a      local_1a0 = "GNU LOCATE02";\u000a      local_198 = 0;\u000a    }\u000a  }\u000a  else {\u000a    uVar4 = dcgettext(0,\u000a                      "%s is an slocate database.  Support for these is new, expect problems for now."\u000a                      ,5);\u000a    data = quotearg_n_style((char *)0x0);\u000a    error(0,0,uVar4,data);\u000a    if (1 < (int)local_1ac) {\u000a      uVar4 = dcgettext(0,"%s is an slocate database of unsupported security level %d; skipping it."\u000a                        ,5);\u000a      data = quotearg_n_style((char *)0x0);\u000a      error(0,0,uVar4,data,(ulong)local_1ac);\u000a      return 0;\u000a    }\u000a    local_1b4 = EVar1;\u000a    if (local_1ac == 1) {\u000a      if (check_existence == ACCEPT_NON_EXISTING) {\u000a        uVar4 = dcgettext(0,\u000a                          "You specified the -E option, but that option cannot be used with slocate-format databases with a non-zero security level.  No results will be generated for this database.\u005cn"\u000a                          ,5);\u000a        error(0,0,uVar4,uVar4);\u000a        return 0;\u000a      }\u000a      local_1b4 = ACCEPT_EXISTING;\u000a      if (((in_stack_00000028 | in_stack_00000010) != 0) && (EVar1 != ACCEPT_EXISTING)) {\u000a        uVar4 = dcgettext(0,"%s is an slocate database.  Turning on the \u005c'-e\u005c' option.",5);\u000a        data = quotearg_n_style((char *)0x0);\u000a        error(0,0,uVar4,data);\u000a      }\u000a    }\u000a    local_198 = 0;\u000a    add_visitor(visit_locate02_format,(void *)0x0);\u000a    local_1a0 = "slocate";\u000a    local_1a8 = 1;\u000a  }\u000a  if ((int)format_name != 0) {\u000a    add_visitor(visit_basename,(void *)0x0);\u000a  }\u000a  if (0 < (int)plimit) {\u000a    local_178 = visit_substring_match_nocasefold_narrow;\u000a    if (in_stack_00000008 != 0) {\u000a      local_178 = visit_substring_match_casefold_narrow;\u000a    }\u000a    local_180 = visit_substring_match_nocasefold_wide;\u000a    if (in_stack_00000008 != 0) {\u000a      local_180 = visit_substring_match_casefold_wide;\u000a    }\u000a    uVar13 = (ulong)plimit & 0xffffffff;\u000a    do {\u000a      results_were_filtered = 1;\u000a      context = *in_RSI;\u000a      if (in_stack_00000038 == 0) {\u000a        iVar3 = contains_metacharacter((char *)context);\u000a        if (iVar3 == 0) {\u000a          __length = __ctype_get_mb_cur_max();\u000a          fn_00 = local_180;\u000a          if (__length == 1) {\u000a            fn_00 = local_178;\u000a          }\u000a        }\u000a        else {\u000a          if (in_stack_00000008 == 0) {\u000a            fn_00 = visit_globmatch_nofold;\u000a          }\u000a          else {\u000a            fn_00 = visit_globmatch_casefold;\u000a          }\u000a        }\u000aLAB_00403198:\u000a        add_visitor(fn_00,context);\u000a      }\u000a      else {\u000a        __buffer = (re_pattern_buffer *)xmalloc(0x40);\u000a        *(undefined4 *)&__buffer->re_nsub = 0;\u000a        *(undefined4 *)((long)&__buffer->re_nsub + 4) = 0;\u000a        __buffer->field_0x38 = 0;\u000a        *(undefined4 *)&__buffer->field_0x3c = 0;\u000a        *(undefined4 *)&__buffer->fastmap = 0;\u000a        *(undefined4 *)((long)&__buffer->fastmap + 4) = 0;\u000a        *(undefined4 *)&__buffer->translate = 0;\u000a        *(undefined4 *)((long)&__buffer->translate + 4) = 0;\u000a        *(undefined4 *)&__buffer->used = 0;\u000a        *(undefined4 *)((long)&__buffer->used + 4) = 0;\u000a        *(undefined4 *)&__buffer->syntax = 0;\u000a        *(undefined4 *)((long)&__buffer->syntax + 4) = 0;\u000a        *(undefined4 *)&__buffer->buffer = 0;\u000a        *(undefined4 *)((long)&__buffer->buffer + 4) = 0;\u000a        *(undefined4 *)&__buffer->allocated = 0;\u000a        *(undefined4 *)((long)&__buffer->allocated + 4) = 0;\u000a        re_set_syntax((long)(int)uVar14);\u000a        __buffer->allocated = 100;\u000a        puVar7 = (uchar *)xmalloc(100);\u000a        __buffer->buffer = puVar7;\u000a        __buffer->fastmap = (char *)0x0;\u000a        __buffer->syntax = (long)(int)uVar14;\u000a        __buffer->translate = (uchar *)0x0;\u000a        __length = strlen((char *)context);\u000a        data = re_compile_pattern((char *)context,__length,__buffer);\u000a        if (data == (char *)0x0) {\u000a          context = __buffer;\u000a          fn_00 = visit_regex;\u000a          goto LAB_00403198;\u000a        }\u000a        error(1,0,&DAT_0040c628);\u000a      }\u000a      in_RSI = in_RSI + 1;\u000a      uVar13 = uVar13 - 1;\u000a    } while (uVar13 != 0);\u000a  }\u000a  pvVar2 = lastinspector;\u000a  if (local_1b4 == ACCEPT_NON_EXISTING) {\u000a    if (follow_symlinks == 0) {\u000a      fn = visit_non_existing_follow;\u000a    }\u000a    else {\u000a      fn = visit_non_existing_nofollow;\u000a    }\u000aLAB_0040320b:\u000a    results_were_filtered = 1;\u000a    add_visitor(fn,(void *)0x0);\u000a  }\u000a  else {\u000a    if (local_1b4 == ACCEPT_EXISTING) {\u000a      if (follow_symlinks == 0) {\u000a        fn = visit_existing_follow;\u000a      }\u000a      else {\u000a        fn = visit_existing_nofollow;\u000a      }\u000a      goto LAB_0040320b;\u000a    }\u000a  }\u000a  if (in_stack_00000028 != 0) {\u000a    add_visitor(visit_stats,&statistics);\u000a  }\u000a  if (in_stack_00000010 != 0) {\u000a    if (print_quoted_filename == 1) {\u000a      fn = visit_justprint_quoted;\u000a    }\u000a    else {\u000a      fn = visit_justprint_unquoted;\u000a    }\u000a    add_visitor(fn,(void *)0x0);\u000a  }\u000a  if (in_stack_00000020 == 0) {\u000a    fn = visit_count;\u000a  }\u000a  else {\u000a    fn = visit_limit;\u000a  }\u000a  add_visitor(fn,&limits);\u000a  uVar4 = local_1a8;\u000a  if ((int)plimit < 2) {\u000a    fn = process_simple;\u000a  }\u000a  else {\u000a    past_pat_inspector = pvVar2->next;\u000a    fn = process_or;\u000a    if (in_stack_00000030 != 0) {\u000a      fn = process_and;\u000a    }\u000a  }\u000a  mainprocessor = fn;\u000a  if (in_stack_00000028 != 0) {\u000a    mainprocessor = fn;\u000a    data = (char *)dcgettext(0,"Database %s is in the %s format.\u005cn",5);\u000a    printf(data,local_170.dbfile,local_1a0);\u000a  }\u000a  local_170.c = _IO_getc((_IO_FILE *)local_170.fp);\u000a  if (((int)uVar4 == 0) || (local_170.c == -1)) {\u000a    if (local_170.c == -1) goto LAB_00403325;\u000a  }\u000a  else {\u000a    ungetc(local_170.c,(FILE *)local_170.fp);\u000a    local_170.c = 0;\u000a  }\u000a  do {\u000a    iVar3 = (*mainprocessor)(&local_170);\u000a    if (iVar3 == 8) break;\u000a  } while (local_170.c != -1);\u000aLAB_00403325:\u000a  if (in_stack_00000028 != 0) {\u000a    if ((int)local_198 != 0) {\u000a      uVar8 = dcgettext(0,"The database has little-endian machine-word encoding.\u005cn",5);\u000a      uVar9 = dcgettext(0,"The database has big-endian machine-word encoding.\u005cn",5);\u000a      uVar4 = uVar9;\u000a      if ((local_170.endian_state == GetwordEndianStateSwab) ||\u000a         (uVar4 = uVar8, local_170.endian_state == GetwordEndianStateNative)) {\u000a        printf("%s",uVar4);\u000a      }\u000a      else {\u000a        data = (char *)dcgettext(0,"The database machine-word encoding order is not obvious.\u005cn",5,\u000a                                 uVar9);\u000a        printf(data);\u000a      }\u000a    }\u000a    if ((local_188 != (timespec *)0x0) || (local_190 != 0)) {\u000a      print_stats((ulong)plimit & 0xffffffff,local_188);\u000a    }\u000a  }\u000a  iVar3 = ferror((FILE *)local_170.fp);\u000a  uVar11 = limits.items_accepted;\u000a  if (iVar3 != 0) {\u000a    puVar10 = (uint *)__errno_location();\u000a    uVar14 = *puVar10;\u000a    data = quotearg_n_style((char *)0x0);\u000a    error(0,(ulong)uVar14,&DAT_0040c628,data);\u000a    uVar11 = 0;\u000a  }\u000a  return uVar11;\u000a}\u000a\u000a
p248
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x188\nMOV qword ptr [RSP + 0x28],R9\nMOV qword ptr [RSP + 0x30],R8\nMOV R13,RDX\nMOV RBX,RSI\nMOV dword ptr [RSP + 0x8],EDI\nMOV EAX,dword ptr [0x1f8 + RSP]\nMOV EDX,dword ptr [0x0060f4b0]\nMOV dword ptr [RSP + 0x4],EDX\nMOV R14D,EAX\nOR R14D,0x400000\nCMP dword ptr [0x1c0 + RSP],0x0\nCMOVZ R14D,EAX\nMOV dword ptr [0x80 + RSP],0x0\nMOV dword ptr [RSP + 0x4c],0x0\nMOV dword ptr [RSP + 0x50],0x0\nMOV qword ptr [RSP + 0x78],R13\nMOV qword ptr [RSP + 0x70],RCX\nMOV qword ptr [0x0060f518],0x0\nMOV qword ptr [0x0060f520],0x0\nMOV qword ptr [0x0060f528],0x0\nMOV byte ptr [0x0060f530],0x0\nMOV qword ptr [RSP + 0x60],0x80\nMOV EDI,0x80\nCALL 0x00408bd0\nMOV RBP,RAX\nMOV qword ptr [RSP + 0x58],RBP\nMOV RCX,qword ptr [RSP + 0x70]\nMOV ESI,0x1\nMOV EDX,0x2\nMOV RDI,RBP\nCALL 0x00401bc0\nMOV R15,RAX\nMOV dword ptr [RSP + 0xc],0x0\nMOV RDI,qword ptr [RSP + 0x78]\nMOVSXD R12,R15D\nLEA RCX,[RSP + 0xc]\nMOV RSI,RBP\nMOV RDX,R12\nCALL 0x00403490\nTEST EAX,EAX\nJZ 0x00402e9b\nXOR EDI,EDI\nMOV ESI,0x40ab4e\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RBP,RAX\nMOV RDX,qword ptr [RSP + 0x78]\nXOR EDI,EDI\nMOV ESI,0x8\nCALL 0x00407f30\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x00401f70\nMOV EAX,dword ptr [RSP + 0xc]\nCMP EAX,0x2\nJL 0x00402f10\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x40ab9d\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RBP,RAX\nMOV RDX,qword ptr [RSP + 0x78]\nXOR EDI,EDI\nMOV ESI,0x8\nCALL 0x00407f30\nMOV RCX,RAX\nMOV R8D,dword ptr [RSP + 0xc]\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x00401f70\nJMP 0x00403418\nMOV EBP,0xa\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nLEA RDI,[RSP + 0x48]\nMOV ESI,0xa\nXOR EDX,EDX\nCALL 0x00403700\nSUB RBP,R12\nADD R12,qword ptr [RSP + 0x58]\nMOV RCX,qword ptr [RSP + 0x70]\nMOV ESI,0x1\nMOV RDI,R12\nMOV RDX,RBP\nCALL 0x00401bc0\nMOV R12,RAX\nMOV RDI,qword ptr [RSP + 0x58]\nADD R12D,R15D\nMOVSXD RBP,R12D\nMOV RSI,RBP\nCALL 0x00403740\nTEST EAX,EAX\nJZ 0x00402f7f\nMOV EDI,0x403590\nXOR ESI,ESI\nCALL 0x00403540\nMOV EAX,0x40acd2\nMOV qword ptr [RSP + 0x18],RAX\nXOR EAX,EAX\nJMP 0x00403049\nCMP EAX,0x1\nJNZ 0x00402f4b\nCMP dword ptr [0x0060f4b0],0x2\nJNZ 0x0040342d\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x40abe6\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401f70\nJMP 0x00403418\nMOV EBP,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x20],RAX\nMOV EDI,0x403590\nXOR ESI,ESI\nCALL 0x00403540\nMOV EAX,0x40acca\nMOV qword ptr [RSP + 0x18],RAX\nMOV EAX,0x1\nMOV qword ptr [RSP + 0x10],RAX\nMOV dword ptr [RSP + 0x4],EBP\nJMP 0x0040304e\nLEA RDI,[RSP + 0x48]\nMOV ESI,0x100\nXOR EDX,EDX\nCALL 0x00403700\nCMP R12D,0xff\nJG 0x00402ffc\nADD RBP,qword ptr [RSP + 0x58]\nMOV EAX,0x100\nSUB EAX,R12D\nMOVSXD RDX,EAX\nMOV RCX,qword ptr [RSP + 0x70]\nMOV ESI,0x1\nMOV RDI,RBP\nCALL 0x00401bc0\nADD EAX,R12D\nCMP EAX,0x100\nJZ 0x00402ffc\nXOR EDI,EDI\nMOV ESI,0x40acdf\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RBP,RAX\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,R13\nCALL 0x00407f30\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x00401f70\nXOR EAX,EAX\nNOP\nMOV RCX,qword ptr [RSP + 0x58]\nMOVZX EDX,byte ptr [RCX + RAX*0x2]\nMOV byte ptr [0x84 + RSP + RAX*0x1],DL\nMOVZX ECX,byte ptr [RCX + RAX*0x2 + 0x1]\nMOV byte ptr [0x104 + RSP + RAX*0x1],CL\nINC RAX\nCMP RAX,0x80\nJNZ 0x00403000\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nMOV EDI,0x403770\nXOR ESI,ESI\nCALL 0x00403540\nMOV EAX,0x40ad16\nMOV qword ptr [RSP + 0x18],RAX\nMOV EAX,0x1\nMOV qword ptr [RSP + 0x20],RAX\nMOV EAX,dword ptr [0x1d0 + RSP]\nTEST EAX,EAX\nJZ 0x00403065\nMOV EDI,0x403910\nXOR ESI,ESI\nCALL 0x00403540\nCMP dword ptr [RSP + 0x8],0x0\nJLE 0x004031aa\nMOV R12D,dword ptr [0x1f0 + RSP]\nCMP dword ptr [0x1c0 + RSP],0x0\nMOV EAX,0x4039e0\nMOV ECX,0x403a30\nCMOVNZ RCX,RAX\nMOV qword ptr [RSP + 0x40],RCX\nMOV EAX,0x403a80\nMOV ECX,0x403aa0\nCMOVNZ RCX,RAX\nMOV qword ptr [RSP + 0x38],RCX\nMOVSXD RBP,R14D\nMOV R13D,dword ptr [RSP + 0x8]\nNOP\nTEST R12D,R12D\nMOV byte ptr [0x0060f530],0x1\nMOV R14,qword ptr [RBX]\nJZ 0x00403150\nMOV EDI,0x40\nCALL 0x00408bd0\nMOV R15,RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R15 + 0x30],XMM0\nMOVUPS xmmword ptr [R15 + 0x20],XMM0\nMOVUPS xmmword ptr [R15 + 0x10],XMM0\nMOVUPS xmmword ptr [R15],XMM0\nMOV RDI,RBP\nCALL 0x00401e80\nMOV qword ptr [R15 + 0x8],0x64\nMOV EDI,0x64\nCALL 0x00408bd0\nMOV qword ptr [R15],RAX\nMOV qword ptr [R15 + 0x20],0x0\nMOV qword ptr [R15 + 0x18],RBP\nMOV qword ptr [R15 + 0x28],0x0\nMOV RDI,R14\nCALL 0x00401c50\nMOV RDI,R14\nMOV RSI,RAX\nMOV RDX,R15\nCALL 0x00402050\nMOV RCX,RAX\nTEST RCX,RCX\nJZ 0x00403170\nMOV EDI,0x1\nXOR ESI,ESI\nMOV EDX,0x40c628\nXOR EAX,EAX\nCALL 0x00401f70\nJMP 0x0040319d\nMOV RDI,R14\nCALL 0x00403970\nTEST EAX,EAX\nJZ 0x0040317a\nCMP dword ptr [0x1c0 + RSP],0x0\nJZ 0x00403190\nMOV EDI,0x403990\nJMP 0x00403195\nMOV EDI,0x403930\nMOV RSI,R15\nJMP 0x00403198\nCALL 0x00401c40\nCMP RAX,0x1\nMOV RDI,qword ptr [RSP + 0x38]\nCMOVZ RDI,qword ptr [RSP + 0x40]\nJMP 0x00403195\nMOV EDI,0x4039c0\nMOV RSI,R14\nCALL 0x00403540\nADD RBX,0x8\nDEC R13\nJNZ 0x004030b0\nMOV RBX,qword ptr [0x0060f520]\nMOV EAX,dword ptr [RSP + 0x4]\nCMP EAX,0x2\nJZ 0x004031df\nCMP EAX,0x1\nMOV R14D,dword ptr [0x1e0 + RSP]\nJNZ 0x00403212\nMOV byte ptr [0x0060f530],0x1\nMOV AL,byte ptr [0x0060f4e0]\nTEST AL,AL\nJZ 0x004031ff\nMOV EDI,0x403af0\nJMP 0x0040320b\nMOV byte ptr [0x0060f530],0x1\nMOV AL,byte ptr [0x0060f4e0]\nTEST AL,AL\nMOV R14D,dword ptr [0x1e0 + RSP]\nJZ 0x00403206\nMOV EDI,0x403b50\nJMP 0x0040320b\nMOV EDI,0x403ac0\nJMP 0x0040320b\nMOV EDI,0x403b20\nXOR ESI,ESI\nCALL 0x00403540\nTEST R14D,R14D\nJZ 0x00403226\nMOV EDI,0x403b80\nMOV ESI,0x60f4e8\nCALL 0x00403540\nMOV EBP,dword ptr [0x1d8 + RSP]\nCMP dword ptr [0x1c8 + RSP],0x0\nJZ 0x00403253\nCMP byte ptr [0x0060f4d8],0x1\nJNZ 0x00403247\nMOV EDI,0x403c40\nJMP 0x0040324c\nMOV EDI,0x403c90\nXOR ESI,ESI\nCALL 0x00403540\nTEST EBP,EBP\nJZ 0x0040325e\nMOV EDI,0x403cc0\nJMP 0x00403263\nMOV EDI,0x403ce0\nMOV ESI,0x60f4c8\nCALL 0x00403540\nCMP dword ptr [RSP + 0x8],0x2\nJL 0x00403298\nMOV EAX,dword ptr [0x1e8 + RSP]\nMOV RCX,qword ptr [RBX + 0x10]\nMOV qword ptr [0x0060f528],RCX\nTEST EAX,EAX\nMOV ECX,0x403cf0\nMOV EAX,0x403d50\nCMOVNZ RAX,RCX\nJMP 0x0040329d\nMOV EAX,0x403db0\nMOV RBX,qword ptr [RSP + 0x10]\nMOV qword ptr [0x0060f538],RAX\nTEST R14D,R14D\nJZ 0x004032d6\nXOR EDI,EDI\nMOV ESI,0x40ad1a\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RCX,RAX\nMOV RSI,qword ptr [RSP + 0x78]\nXOR EAX,EAX\nMOV RDI,RCX\nMOV RDX,qword ptr [RSP + 0x18]\nCALL 0x00401cb0\nMOV RDI,qword ptr [RSP + 0x70]\nCALL 0x00401eb0\nMOV dword ptr [RSP + 0x48],EAX\nTEST EBX,EBX\nJZ 0x00403303\nCMP EAX,-0x1\nJZ 0x00403303\nMOV RSI,qword ptr [RSP + 0x70]\nMOV EDI,EAX\nCALL 0x00401ed0\nMOV dword ptr [RSP + 0x48],0x0\nJMP 0x00403308\nCMP EAX,-0x1\nJZ 0x00403325\nLEA RBX,[RSP + 0x48]\nNOP dword ptr [RAX]\nMOV RDI,RBX\nCALL qword ptr [0x0060f538]\nCMP EAX,0x8\nJZ 0x00403325\nCMP dword ptr [RSP + 0x48],-0x1\nJNZ 0x00403310\nTEST R14D,R14D\nJZ 0x004033d4\nCMP dword ptr [RSP + 0x20],0x0\nJZ 0x004033b1\nXOR EDI,EDI\nMOV ESI,0x40ad3c\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x40ad73\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RCX,RAX\nMOV EAX,dword ptr [0x80 + RSP]\nCMP EAX,0x2\nJZ 0x0040337a\nCMP EAX,0x1\nJNZ 0x00403393\nMOV EDI,0x40c628\nXOR EAX,EAX\nMOV RSI,RBX\nJMP 0x00403384\nMOV EDI,0x40c628\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401cb0\nCMP qword ptr [RSP + 0x30],0x0\nJZ 0x004033b9\nJMP 0x004033c1\nXOR EDI,EDI\nMOV ESI,0x40ada7\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RCX,RAX\nXOR EAX,EAX\nMOV RDI,RCX\nCALL 0x00401cb0\nCMP qword ptr [RSP + 0x30],0x0\nJNZ 0x004033c1\nCMP qword ptr [RSP + 0x28],0x0\nJZ 0x004033d4\nMOV EDI,dword ptr [RSP + 0x8]\nMOV RSI,qword ptr [RSP + 0x30]\nMOV RDX,qword ptr [RSP + 0x28]\nCALL 0x00403dd0\nMOV RDI,qword ptr [RSP + 0x70]\nCALL 0x00401b90\nTEST EAX,EAX\nJZ 0x00403411\nCALL 0x00401b40\nMOV EBP,dword ptr [RAX]\nMOV RDX,qword ptr [RSP + 0x78]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x8\nCALL 0x00407f30\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40c628\nXOR EAX,EAX\nMOV ESI,EBP\nCALL 0x00401f70\nJMP 0x00403418\nMOV RBX,qword ptr [0x0060f4d0]\nMOV RAX,RBX\nADD RSP,0x188\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EAX,dword ptr [0x1e0 + RSP]\nOR EAX,dword ptr [0x1c8 + RSP]\nMOV EBP,0x1\nJZ 0x00402f4f\nCMP dword ptr [RSP + 0x4],0x1\nJZ 0x00402f4f\nXOR EDI,EDI\nMOV ESI,0x40ac92\nMOV EDX,0x5\nCALL 0x00401c30\nMOV R15,RAX\nMOV RDX,qword ptr [RSP + 0x78]\nXOR EDI,EDI\nMOV ESI,0x8\nCALL 0x00407f30\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R15\nCALL 0x00401f70\nJMP 0x00402f4f\n'
p249
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 88 01 00 00\n4c 89 4c 24 28\n4c 89 44 24 30\n49 89 d5\n48 89 f3\n89 7c 24 08\n8b 84 24 f8 01 00 00\n8b 15 5e c7 20 00\n89 54 24 04\n41 89 c6\n41 81 ce 00 00 40 00\n83 bc 24 c0 01 00 00 00\n44 0f 44 f0\nc7 84 24 80 00 00 00 00 00 00 00\nc7 44 24 4c 00 00 00 00\nc7 44 24 50 00 00 00 00\n4c 89 6c 24 78\n48 89 4c 24 70\n48 c7 05 7c c7 20 00 00 00 00 00\n48 c7 05 79 c7 20 00 00 00 00 00\n48 c7 05 76 c7 20 00 00 00 00 00\nc6 05 77 c7 20 00 00\n48 c7 44 24 60 80 00 00 00\nbf 80 00 00 00\ne8 04 5e 00 00\n48 89 c5\n48 89 6c 24 58\n48 8b 4c 24 70\nbe 01 00 00 00\nba 02 00 00 00\n48 89 ef\ne8 d5 ed ff ff\n49 89 c7\nc7 44 24 0c 00 00 00 00\n48 8b 7c 24 78\n4d 63 e7\n48 8d 4c 24 0c\n48 89 ee\n4c 89 e2\ne8 82 06 00 00\n85 c0\n0f 84 85 00 00 00\n31 ff\nbe 4e ab 40 00\nba 05 00 00 00\ne8 09 ee ff ff\n48 89 c5\n48 8b 54 24 78\n31 ff\nbe 08 00 00 00\ne8 f5 50 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ea\ne8 24 f1 ff ff\n8b 44 24 0c\n83 f8 02\n0f 8c b7 00 00 00\n31 db\n31 ff\nbe 9d ab 40 00\nba 05 00 00 00\ne8 c4 ed ff ff\n48 89 c5\n48 8b 54 24 78\n31 ff\nbe 08 00 00 00\ne8 b0 50 00 00\n48 89 c1\n44 8b 44 24 0c\n31 ff\n31 f6\n31 c0\n48 89 ea\ne8 da f0 ff ff\ne9 7d 05 00 00\nbd 0a 00 00 00\n31 c0\n48 89 44 24 10\n48 8d 7c 24 48\nbe 0a 00 00 00\n31 d2\ne8 48 08 00 00\n4c 29 e5\n4c 03 64 24 58\n48 8b 4c 24 70\nbe 01 00 00 00\n4c 89 e7\n48 89 ea\ne8 eb ec ff ff\n49 89 c4\n48 8b 7c 24 58\n45 01 fc\n49 63 ec\n48 89 ee\ne8 55 08 00 00\n85 c0\n0f 84 8c 00 00 00\nbf 90 35 40 00\n31 f6\ne8 41 06 00 00\nb8 d2 ac 40 00\n48 89 44 24 18\n31 c0\ne9 39 01 00 00\n83 f8 01\n75 36\n83 3d 94 c5 20 00 02\n0f 85 0b 05 00 00\n31 db\n31 ff\nbe e6 ab 40 00\nba 05 00 00 00\ne8 fb ec ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 2a f0 ff ff\ne9 cd 04 00 00\n8b 6c 24 04\n31 c0\n48 89 44 24 20\nbf 90 35 40 00\n31 f6\ne8 de 05 00 00\nb8 ca ac 40 00\n48 89 44 24 18\nb8 01 00 00 00\n48 89 44 24 10\n89 6c 24 04\ne9 cf 00 00 00\n48 8d 7c 24 48\nbe 00 01 00 00\n31 d2\ne8 70 07 00 00\n41 81 fc ff 00 00 00\n7f 63\n48 03 6c 24 58\nb8 00 01 00 00\n44 29 e0\n48 63 d0\n48 8b 4c 24 70\nbe 01 00 00 00\n48 89 ef\ne8 05 ec ff ff\n44 01 e0\n3d 00 01 00 00\n74 37\n31 ff\nbe df ac 40 00\nba 05 00 00 00\ne8 5a ec ff ff\n48 89 c5\n31 ff\nbe 08 00 00 00\n4c 89 ea\ne8 48 4f 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ea\ne8 74 ef ff ff\n31 c0\n66 90\n48 8b 4c 24 58\n0f b6 14 41\n88 94 04 84 00 00 00\n0f b6 4c 41 01\n88 8c 04 04 01 00 00\n48 ff c0\n48 3d 80 00 00 00\n75 d9\n31 c0\n48 89 44 24 10\nbf 70 37 40 00\n31 f6\ne8 06 05 00 00\nb8 16 ad 40 00\n48 89 44 24 18\nb8 01 00 00 00\n48 89 44 24 20\n8b 84 24 d0 01 00 00\n85 c0\n74 0c\nbf 10 39 40 00\n31 f6\ne8 db 04 00 00\n83 7c 24 08 00\n0f 8e 3a 01 00 00\n44 8b a4 24 f0 01 00 00\n83 bc 24 c0 01 00 00 00\nb8 e0 39 40 00\nb9 30 3a 40 00\n48 0f 45 c8\n48 89 4c 24 40\nb8 80 3a 40 00\nb9 a0 3a 40 00\n48 0f 45 c8\n48 89 4c 24 38\n49 63 ee\n44 8b 6c 24 08\n66 90\n45 85 e4\nc6 05 76 c4 20 00 01\n4c 8b 33\n0f 84 8d 00 00 00\nbf 40 00 00 00\ne8 03 5b 00 00\n49 89 c7\n0f 57 c0\n41 0f 11 47 30\n41 0f 11 47 20\n41 0f 11 47 10\n41 0f 11 07\n48 89 ef\ne8 92 ed ff ff\n49 c7 47 08 64 00 00 00\nbf 64 00 00 00\ne8 d0 5a 00 00\n49 89 07\n49 c7 47 20 00 00 00 00\n49 89 6f 18\n49 c7 47 28 00 00 00 00\n4c 89 f7\ne8 31 eb ff ff\n4c 89 f7\n48 89 c6\n4c 89 fa\ne8 23 ef ff ff\n48 89 c1\n48 85 c9\n74 3b\nbf 01 00 00 00\n31 f6\nba 28 c6 40 00\n31 c0\ne8 28 ee ff ff\neb 53\n4c 89 f7\ne8 18 08 00 00\n85 c0\n74 1e\n83 bc 24 c0 01 00 00 00\n74 2a\nbf 90 39 40 00\neb 28\nbf 30 39 40 00\n4c 89 fe\neb 1e\ne8 c1 ea ff ff\n48 83 f8 01\n48 8b 7c 24 38\n48 0f 44 7c 24 40\neb 05\nbf c0 39 40 00\n4c 89 f6\ne8 a3 03 00 00\n48 83 c3 08\n49 ff cd\n0f 85 06 ff ff ff\n48 8b 1d 6f c3 20 00\n8b 44 24 04\n83 f8 02\n74 25\n83 f8 01\n44 8b b4 24 e0 01 00 00\n75 4b\nc6 05 62 c3 20 00 01\n8a 05 0c c3 20 00\n84 c0\n74 27\nbf f0 3a 40 00\neb 2c\nc6 05 4a c3 20 00 01\n8a 05 f4 c2 20 00\n84 c0\n44 8b b4 24 e0 01 00 00\n74 0e\nbf 50 3b 40 00\neb 0c\nbf c0 3a 40 00\neb 05\nbf 20 3b 40 00\n31 f6\ne8 2e 03 00 00\n45 85 f6\n74 0f\nbf 80 3b 40 00\nbe e8 f4 60 00\ne8 1a 03 00 00\n8b ac 24 d8 01 00 00\n83 bc 24 c8 01 00 00 00\n74 1c\n80 3d 9a c2 20 00 01\n75 07\nbf 40 3c 40 00\neb 05\nbf 90 3c 40 00\n31 f6\ne8 ed 02 00 00\n85 ed\n74 07\nbf c0 3c 40 00\neb 05\nbf e0 3c 40 00\nbe c8 f4 60 00\ne8 d3 02 00 00\n83 7c 24 08 02\n7c 24\n8b 84 24 e8 01 00 00\n48 8b 4b 10\n48 89 0d a2 c2 20 00\n85 c0\nb9 f0 3c 40 00\nb8 50 3d 40 00\n48 0f 45 c1\neb 05\nb8 b0 3d 40 00\n48 8b 5c 24 10\n48 89 05 8f c2 20 00\n45 85 f6\n74 28\n31 ff\nbe 1a ad 40 00\nba 05 00 00 00\ne8 71 e9 ff ff\n48 89 c1\n48 8b 74 24 78\n31 c0\n48 89 cf\n48 8b 54 24 18\ne8 da e9 ff ff\n48 8b 7c 24 70\ne8 d0 eb ff ff\n89 44 24 48\n85 db\n74 1b\n83 f8 ff\n74 16\n48 8b 74 24 70\n89 c7\ne8 d7 eb ff ff\nc7 44 24 48 00 00 00 00\neb 05\n83 f8 ff\n74 1d\n48 8d 5c 24 48\n0f 1f 00\n48 89 df\nff 15 1f c2 20 00\n83 f8 08\n74 07\n83 7c 24 48 ff\n75 eb\n45 85 f6\n0f 84 a6 00 00 00\n83 7c 24 20 00\n74 7c\n31 ff\nbe 3c ad 40 00\nba 05 00 00 00\ne8 ea e8 ff ff\n48 89 c3\n31 ff\nbe 73 ad 40 00\nba 05 00 00 00\ne8 d6 e8 ff ff\n48 89 c1\n8b 84 24 80 00 00 00\n83 f8 02\n74 11\n83 f8 01\n75 25\nbf 28 c6 40 00\n31 c0\n48 89 de\neb 0a\nbf 28 c6 40 00\n31 c0\n48 89 ce\ne8 27 e9 ff ff\n48 83 7c 24 30 00\n74 28\neb 2e\n31 ff\nbe a7 ad 40 00\nba 05 00 00 00\ne8 8c e8 ff ff\n48 89 c1\n31 c0\n48 89 cf\ne8 ff e8 ff ff\n48 83 7c 24 30 00\n75 08\n48 83 7c 24 28 00\n74 13\n8b 7c 24 08\n48 8b 74 24 30\n48 8b 54 24 28\ne8 fc 09 00 00\n48 8b 7c 24 70\ne8 b2 e7 ff ff\n85 c0\n74 2f\ne8 59 e7 ff ff\n8b 28\n48 8b 54 24 78\n31 db\n31 ff\nbe 08 00 00 00\ne8 34 4b 00 00\n48 89 c1\n31 ff\nba 28 c6 40 00\n31 c0\n89 ee\ne8 61 eb ff ff\neb 07\n48 8b 1d b8 c0 20 00\n48 89 d8\n48 81 c4 88 01 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n8b 84 24 e0 01 00 00\n0b 84 24 c8 01 00 00\nbd 01 00 00 00\n0f 84 09 fb ff ff\n83 7c 24 04 01\n0f 84 fe fa ff ff\n31 ff\nbe 92 ac 40 00\nba 05 00 00 00\ne8 ce e7 ff ff\n49 89 c7\n48 8b 54 24 78\n31 ff\nbe 08 00 00 00\ne8 ba 4a 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n4c 89 fa\ne8 e9 ea ff ff\ne9 c3 fa ff ff\n'
p250
S'.text:0000000000402d20\n.text:0000000000402d21\n.text:0000000000402d23\n.text:0000000000402d25\n.text:0000000000402d27\n.text:0000000000402d29\n.text:0000000000402d2a\n.text:0000000000402d31\n.text:0000000000402d36\n.text:0000000000402d3b\n.text:0000000000402d3e\n.text:0000000000402d41\n.text:0000000000402d45\n.text:0000000000402d4c\n.text:0000000000402d52\n.text:0000000000402d56\n.text:0000000000402d59\n.text:0000000000402d60\n.text:0000000000402d68\n.text:0000000000402d6c\n.text:0000000000402d77\n.text:0000000000402d7f\n.text:0000000000402d87\n.text:0000000000402d8c\n.text:0000000000402d91\n.text:0000000000402d9c\n.text:0000000000402da7\n.text:0000000000402db2\n.text:0000000000402db9\n.text:0000000000402dc2\n.text:0000000000402dc7\n.text:0000000000402dcc\n.text:0000000000402dcf\n.text:0000000000402dd4\n.text:0000000000402dd9\n.text:0000000000402dde\n.text:0000000000402de3\n.text:0000000000402de6\n.text:0000000000402deb\n.text:0000000000402dee\n.text:0000000000402df6\n.text:0000000000402dfb\n.text:0000000000402dfe\n.text:0000000000402e03\n.text:0000000000402e06\n.text:0000000000402e09\n.text:0000000000402e0e\n.text:0000000000402e10\n.text:0000000000402e16\n.text:0000000000402e18\n.text:0000000000402e1d\n.text:0000000000402e22\n.text:0000000000402e27\n.text:0000000000402e2a\n.text:0000000000402e2f\n.text:0000000000402e31\n.text:0000000000402e36\n.text:0000000000402e3b\n.text:0000000000402e3e\n.text:0000000000402e40\n.text:0000000000402e42\n.text:0000000000402e44\n.text:0000000000402e47\n.text:0000000000402e4c\n.text:0000000000402e50\n.text:0000000000402e53\n.text:0000000000402e59\n.text:0000000000402e5b\n.text:0000000000402e5d\n.text:0000000000402e62\n.text:0000000000402e67\n.text:0000000000402e6c\n.text:0000000000402e6f\n.text:0000000000402e74\n.text:0000000000402e76\n.text:0000000000402e7b\n.text:0000000000402e80\n.text:0000000000402e83\n.text:0000000000402e88\n.text:0000000000402e8a\n.text:0000000000402e8c\n.text:0000000000402e8e\n.text:0000000000402e91\n.text:0000000000402e96\n.text:0000000000402e9b\n.text:0000000000402ea0\n.text:0000000000402ea2\n.text:0000000000402ea7\n.text:0000000000402eac\n.text:0000000000402eb1\n.text:0000000000402eb3\n.text:0000000000402eb8\n.text:0000000000402ebb\n.text:0000000000402ec0\n.text:0000000000402ec5\n.text:0000000000402eca\n.text:0000000000402ecd\n.text:0000000000402ed0\n.text:0000000000402ed5\n.text:0000000000402ed8\n.text:0000000000402edd\n.text:0000000000402ee0\n.text:0000000000402ee3\n.text:0000000000402ee6\n.text:0000000000402eeb\n.text:0000000000402eed\n.text:0000000000402ef3\n.text:0000000000402ef8\n.text:0000000000402efa\n.text:0000000000402eff\n.text:0000000000402f04\n.text:0000000000402f09\n.text:0000000000402f0b\n.text:0000000000402f10\n.text:0000000000402f13\n.text:0000000000402f15\n.text:0000000000402f1c\n.text:0000000000402f22\n.text:0000000000402f24\n.text:0000000000402f26\n.text:0000000000402f2b\n.text:0000000000402f30\n.text:0000000000402f35\n.text:0000000000402f38\n.text:0000000000402f3a\n.text:0000000000402f3c\n.text:0000000000402f3e\n.text:0000000000402f41\n.text:0000000000402f46\n.text:0000000000402f4b\n.text:0000000000402f4f\n.text:0000000000402f51\n.text:0000000000402f56\n.text:0000000000402f5b\n.text:0000000000402f5d\n.text:0000000000402f62\n.text:0000000000402f67\n.text:0000000000402f6c\n.text:0000000000402f71\n.text:0000000000402f76\n.text:0000000000402f7a\n.text:0000000000402f7f\n.text:0000000000402f84\n.text:0000000000402f89\n.text:0000000000402f8b\n.text:0000000000402f90\n.text:0000000000402f97\n.text:0000000000402f99\n.text:0000000000402f9e\n.text:0000000000402fa3\n.text:0000000000402fa6\n.text:0000000000402fa9\n.text:0000000000402fae\n.text:0000000000402fb3\n.text:0000000000402fb6\n.text:0000000000402fbb\n.text:0000000000402fbe\n.text:0000000000402fc3\n.text:0000000000402fc5\n.text:0000000000402fc7\n.text:0000000000402fcc\n.text:0000000000402fd1\n.text:0000000000402fd6\n.text:0000000000402fd9\n.text:0000000000402fdb\n.text:0000000000402fe0\n.text:0000000000402fe3\n.text:0000000000402fe8\n.text:0000000000402feb\n.text:0000000000402ff0\n.text:0000000000402ff2\n.text:0000000000402ff4\n.text:0000000000402ff7\n.text:0000000000402ffc\n.text:0000000000402ffe\n.text:0000000000403000\n.text:0000000000403005\n.text:0000000000403009\n.text:0000000000403010\n.text:0000000000403015\n.text:000000000040301c\n.text:000000000040301f\n.text:0000000000403025\n.text:0000000000403027\n.text:0000000000403029\n.text:000000000040302e\n.text:0000000000403033\n.text:0000000000403035\n.text:000000000040303a\n.text:000000000040303f\n.text:0000000000403044\n.text:0000000000403049\n.text:000000000040304e\n.text:0000000000403055\n.text:0000000000403057\n.text:0000000000403059\n.text:000000000040305e\n.text:0000000000403060\n.text:0000000000403065\n.text:000000000040306a\n.text:0000000000403070\n.text:0000000000403078\n.text:0000000000403080\n.text:0000000000403085\n.text:000000000040308a\n.text:000000000040308e\n.text:0000000000403093\n.text:0000000000403098\n.text:000000000040309d\n.text:00000000004030a1\n.text:00000000004030a6\n.text:00000000004030a9\n.text:00000000004030ae\n.text:00000000004030b0\n.text:00000000004030b3\n.text:00000000004030ba\n.text:00000000004030bd\n.text:00000000004030c3\n.text:00000000004030c8\n.text:00000000004030cd\n.text:00000000004030d0\n.text:00000000004030d3\n.text:00000000004030d8\n.text:00000000004030dd\n.text:00000000004030e2\n.text:00000000004030e6\n.text:00000000004030e9\n.text:00000000004030ee\n.text:00000000004030f6\n.text:00000000004030fb\n.text:0000000000403100\n.text:0000000000403103\n.text:000000000040310b\n.text:000000000040310f\n.text:0000000000403117\n.text:000000000040311a\n.text:000000000040311f\n.text:0000000000403122\n.text:0000000000403125\n.text:0000000000403128\n.text:000000000040312d\n.text:0000000000403130\n.text:0000000000403133\n.text:0000000000403135\n.text:000000000040313a\n.text:000000000040313c\n.text:0000000000403141\n.text:0000000000403143\n.text:0000000000403148\n.text:0000000000403150\n.text:0000000000403153\n.text:0000000000403158\n.text:000000000040315a\n.text:000000000040315c\n.text:0000000000403164\n.text:0000000000403166\n.text:000000000040316b\n.text:0000000000403170\n.text:0000000000403175\n.text:0000000000403178\n.text:000000000040317a\n.text:000000000040317f\n.text:0000000000403183\n.text:0000000000403188\n.text:000000000040318e\n.text:0000000000403190\n.text:0000000000403195\n.text:0000000000403198\n.text:000000000040319d\n.text:00000000004031a1\n.text:00000000004031a4\n.text:00000000004031aa\n.text:00000000004031b1\n.text:00000000004031b5\n.text:00000000004031b8\n.text:00000000004031ba\n.text:00000000004031bd\n.text:00000000004031c5\n.text:00000000004031c7\n.text:00000000004031ce\n.text:00000000004031d4\n.text:00000000004031d6\n.text:00000000004031d8\n.text:00000000004031dd\n.text:00000000004031df\n.text:00000000004031e6\n.text:00000000004031ec\n.text:00000000004031ee\n.text:00000000004031f6\n.text:00000000004031f8\n.text:00000000004031fd\n.text:00000000004031ff\n.text:0000000000403204\n.text:0000000000403206\n.text:000000000040320b\n.text:000000000040320d\n.text:0000000000403212\n.text:0000000000403215\n.text:0000000000403217\n.text:000000000040321c\n.text:0000000000403221\n.text:0000000000403226\n.text:000000000040322d\n.text:0000000000403235\n.text:0000000000403237\n.text:000000000040323e\n.text:0000000000403240\n.text:0000000000403245\n.text:0000000000403247\n.text:000000000040324c\n.text:000000000040324e\n.text:0000000000403253\n.text:0000000000403255\n.text:0000000000403257\n.text:000000000040325c\n.text:000000000040325e\n.text:0000000000403263\n.text:0000000000403268\n.text:000000000040326d\n.text:0000000000403272\n.text:0000000000403274\n.text:000000000040327b\n.text:000000000040327f\n.text:0000000000403286\n.text:0000000000403288\n.text:000000000040328d\n.text:0000000000403292\n.text:0000000000403296\n.text:0000000000403298\n.text:000000000040329d\n.text:00000000004032a2\n.text:00000000004032a9\n.text:00000000004032ac\n.text:00000000004032ae\n.text:00000000004032b0\n.text:00000000004032b5\n.text:00000000004032ba\n.text:00000000004032bf\n.text:00000000004032c2\n.text:00000000004032c7\n.text:00000000004032c9\n.text:00000000004032cc\n.text:00000000004032d1\n.text:00000000004032d6\n.text:00000000004032db\n.text:00000000004032e0\n.text:00000000004032e4\n.text:00000000004032e6\n.text:00000000004032e8\n.text:00000000004032eb\n.text:00000000004032ed\n.text:00000000004032f2\n.text:00000000004032f4\n.text:00000000004032f9\n.text:0000000000403301\n.text:0000000000403303\n.text:0000000000403306\n.text:0000000000403308\n.text:000000000040330d\n.text:0000000000403310\n.text:0000000000403313\n.text:0000000000403319\n.text:000000000040331c\n.text:000000000040331e\n.text:0000000000403323\n.text:0000000000403325\n.text:0000000000403328\n.text:000000000040332e\n.text:0000000000403333\n.text:0000000000403335\n.text:0000000000403337\n.text:000000000040333c\n.text:0000000000403341\n.text:0000000000403346\n.text:0000000000403349\n.text:000000000040334b\n.text:0000000000403350\n.text:0000000000403355\n.text:000000000040335a\n.text:000000000040335d\n.text:0000000000403364\n.text:0000000000403367\n.text:0000000000403369\n.text:000000000040336c\n.text:000000000040336e\n.text:0000000000403373\n.text:0000000000403375\n.text:0000000000403378\n.text:000000000040337a\n.text:000000000040337f\n.text:0000000000403381\n.text:0000000000403384\n.text:0000000000403389\n.text:000000000040338f\n.text:0000000000403391\n.text:0000000000403393\n.text:0000000000403395\n.text:000000000040339a\n.text:000000000040339f\n.text:00000000004033a4\n.text:00000000004033a7\n.text:00000000004033a9\n.text:00000000004033ac\n.text:00000000004033b1\n.text:00000000004033b7\n.text:00000000004033b9\n.text:00000000004033bf\n.text:00000000004033c1\n.text:00000000004033c5\n.text:00000000004033ca\n.text:00000000004033cf\n.text:00000000004033d4\n.text:00000000004033d9\n.text:00000000004033de\n.text:00000000004033e0\n.text:00000000004033e2\n.text:00000000004033e7\n.text:00000000004033e9\n.text:00000000004033ee\n.text:00000000004033f0\n.text:00000000004033f2\n.text:00000000004033f7\n.text:00000000004033fc\n.text:00000000004033ff\n.text:0000000000403401\n.text:0000000000403406\n.text:0000000000403408\n.text:000000000040340a\n.text:000000000040340f\n.text:0000000000403411\n.text:0000000000403418\n.text:000000000040341b\n.text:0000000000403422\n.text:0000000000403423\n.text:0000000000403425\n.text:0000000000403427\n.text:0000000000403429\n.text:000000000040342b\n.text:000000000040342c\n.text:000000000040342d\n.text:0000000000403434\n.text:000000000040343b\n.text:0000000000403440\n.text:0000000000403446\n.text:000000000040344b\n.text:0000000000403451\n.text:0000000000403453\n.text:0000000000403458\n.text:000000000040345d\n.text:0000000000403462\n.text:0000000000403465\n.text:000000000040346a\n.text:000000000040346c\n.text:0000000000403471\n.text:0000000000403476\n.text:0000000000403479\n.text:000000000040347b\n.text:000000000040347d\n.text:000000000040347f\n.text:0000000000403482\n.text:0000000000403487\n'
p251
tp252
sS'xstrtoumax'
p253
(S'\n__stdcall xstrtoumax(char * s, char * * ptr, uintmax_t * val, char * valid_suffixes)\n'
p254
V\u000astrtol_error xstrtoumax(char *s,char **ptr,uintmax_t *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  byte *pbVar7;\u000a  strtol_error sVar8;\u000a  strtol_error sVar9;\u000a  uint uVar10;\u000a  char *__s;\u000a  long lVar11;\u000a  char **__endptr;\u000a  uintmax_t local_48;\u000a  uintmax_t *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./xstrtol.c",0x60,\u000a                  "strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)");\u000a  }\u000a  local_40 = (uintmax_t *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar7 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar7;\u000a    pbVar7 = pbVar7 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoumax(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar8 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar8 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar8 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar9 = sVar8;\u000a    if (__s == (char *)0x0) goto LAB_0040907a;\u000a  }\u000a  cVar2 = **__endptr;\u000a  sVar9 = sVar8;\u000a  if (cVar2 == 0) goto LAB_0040907a;\u000a  pcVar6 = strchr(__s,(int)cVar2);\u000a  if (pcVar6 == (char *)0x0) goto switchD_00408fcd_caseD_43;\u000a  lVar11 = 1;\u000a  uVar10 = (int)cVar2 - 0x45;\u000a  if ((uVar10 < 0x30) && ((0x814400308945U >> ((ulong)uVar10 & 0x1f) & 1) != 0)) {\u000a    pcVar6 = strchr(__s,0x30);\u000a    if (pcVar6 == (char *)0x0) {\u000aLAB_00408fa9:\u000a      lVar11 = 1;\u000a    }\u000a    else {\u000a      cVar2 = (*__endptr)[1];\u000a      if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a        lVar11 = 2;\u000a      }\u000a      else {\u000a        if (cVar2 != 'i') goto LAB_00408fa9;\u000a        lVar11 = (ulong)((*__endptr)[2] == 'B') * 2 + 1;\u000a      }\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_0040905c;\u000a  default:\u000aswitchD_00408fcd_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar8 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    break;\u000a  case 'P':\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    break;\u000a  case 'Y':\u000a    break;\u000a  case 'Z':\u000a    break;\u000a  case 'b':\u000a    goto LAB_0040905c;\u000a  case 'c':\u000a    goto switchD_00408fcd_caseD_63;\u000a  case 'w':\u000aLAB_0040905c:\u000a    sVar3 = bkm_scale(&local_48);\u000a    goto switchD_00408fcd_caseD_63;\u000a  }\u000a  sVar3 = bkm_scale_by_power(&local_48);\u000aswitchD_00408fcd_caseD_63:\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar9 = sVar3 | sVar8 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar9 = sVar3 | sVar8;\u000a  }\u000aLAB_0040907a:\u000a  *local_40 = local_48;\u000a  return sVar9;\u000a}\u000a\u000a
p255
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R13,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x00409097\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x00401b40\nMOV R12,RAX\nMOV dword ptr [R12],0x0\nCALL 0x004020b0\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x00408e90\nTEST RBX,RBX\nLEA R15,[RSP + 0x10]\nCMOVNZ R15,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x00409086\nMOV RDI,RBP\nMOV RSI,R15\nMOV EDX,R14D\nCALL 0x00401fe0\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R15]\nCMP RAX,RBP\nJZ 0x00408ef0\nMOV EAX,dword ptr [R12]\nTEST EAX,EAX\nJZ 0x00408f21\nCMP EAX,0x22\nJNZ 0x00409086\nMOV EBX,0x1\nTEST R13,R13\nJNZ 0x00408f2c\nJMP 0x0040907a\nTEST R13,R13\nJZ 0x00409086\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x00409086\nMOV RDI,R13\nCALL 0x00401ca0\nTEST RAX,RAX\nJZ 0x00409086\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x00408f2c\nXOR EBX,EBX\nTEST R13,R13\nJZ 0x0040907a\nMOV RAX,qword ptr [R15]\nMOVSX EBP,byte ptr [RAX]\nTEST EBP,EBP\nJZ 0x0040907a\nMOV RDI,R13\nMOV ESI,EBP\nCALL 0x00401ca0\nTEST RAX,RAX\nJZ 0x00408fde\nMOV R14D,0x400\nMOV R12D,0x1\nADD EBP,-0x45\nCMP EBP,0x2f\nJA 0x00408fbd\nMOV RAX,0x814400308945\nBT RAX,RBP\nJNC 0x00408fbd\nMOV ESI,0x30\nMOV RDI,R13\nCALL 0x00401ca0\nTEST RAX,RAX\nJZ 0x00408fa9\nMOV RAX,qword ptr [R15]\nMOVSX ECX,byte ptr [RAX + 0x1]\nCMP ECX,0x42\nJZ 0x00408fb1\nCMP ECX,0x44\nJZ 0x00408fb1\nCMP ECX,0x69\nJNZ 0x00408fa9\nXOR ECX,ECX\nCMP byte ptr [RAX + 0x2],0x42\nSETZ CL\nLEA R12,[RCX + RCX*0x1 + 0x1]\nJMP 0x00408fbd\nMOV R12D,0x1\nJMP 0x00408fbd\nMOV R14D,0x3e8\nMOV R12D,0x2\nMOV RAX,qword ptr [R15]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x00408fde\nXOR EAX,EAX\nJMP qword ptr [0x40c3a0 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nJMP 0x00409040\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x00409086\nMOV RDI,RSP\nMOV EDX,0x1\nJMP 0x00409040\nMOV RDI,RSP\nMOV EDX,0x2\nJMP 0x00409040\nMOV RDI,RSP\nMOV EDX,0x4\nJMP 0x00409040\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x0040905c\nMOV RDI,RSP\nMOV EDX,0x6\nJMP 0x00409040\nMOV RDI,RSP\nMOV EDX,0x5\nJMP 0x00409040\nMOV RDI,RSP\nMOV EDX,0x8\nJMP 0x00409040\nMOV RDI,RSP\nMOV EDX,0x7\nMOV ESI,R14D\nCALL 0x004090e0\nJMP 0x00409061\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x0040905c\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x004090b0\nOR EAX,EBX\nMOV RCX,qword ptr [R15]\nLEA RDX,[RCX + R12*0x1]\nMOV qword ptr [R15],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + R12*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x40c550\nMOV ESI,0x40c576\nMOV EDX,0x60\nMOV ECX,0x40c582\nCALL 0x00401d00\n'
p256
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c5\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 33 02 00 00\n48 89 4c 24 08\ne8 d2 8c ff ff\n49 89 c4\n41 c7 04 24 00 00 00 00\ne8 32 92 ff ff\n48 8b 08\n48 89 ea\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 7c 24 10\n4c 0f 45 fb\nbb 04 00 00 00\n3c 2d\n0f 84 d0 01 00 00\n48 89 ef\n4c 89 fe\n44 89 f2\ne8 1c 91 ff ff\n48 89 04 24\n49 8b 07\n48 39 e8\n74 20\n41 8b 04 24\n85 c0\n74 49\n83 f8 22\n0f 85 a5 01 00 00\nbb 01 00 00 00\n4d 85 ed\n75 41\ne9 8a 01 00 00\n4d 85 ed\n0f 84 8d 01 00 00\n0f be 30\n85 f6\n0f 84 82 01 00 00\n4c 89 ef\ne8 94 8d ff ff\n48 85 c0\n0f 84 71 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 ed\n0f 84 4e 01 00 00\n49 8b 07\n0f be 28\n85 ed\n0f 84 40 01 00 00\n4c 89 ef\n89 ee\ne8 5c 8d ff ff\n48 85 c0\n0f 84 91 00 00 00\n41 be 00 04 00 00\n41 bc 01 00 00 00\n83 c5 bb\n83 fd 2f\n77 5c\n48 b8 45 89 30 00 44 81 00 00\n48 0f a3 e8\n73 4c\nbe 30 00 00 00\n4c 89 ef\ne8 22 8d ff ff\n48 85 c0\n74 26\n49 8b 07\n0f be 48 01\n83 f9 42\n74 22\n83 f9 44\n74 1d\n83 f9 69\n75 10\n31 c9\n80 78 02 42\n0f 94 c1\n4c 8d 64 09 01\neb 14\n41 bc 01 00 00 00\neb 0c\n41 be e8 03 00 00\n41 bc 02 00 00 00\n49 8b 07\n0f be 08\n83 c1 be\n83 f9 35\n77 13\n31 c0\nff 24 cd a0 c3 40 00\n48 89 e7\nba 03 00 00 00\neb 62\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 94 00 00 00\n48 89 e7\nba 01 00 00 00\neb 44\n48 89 e7\nba 02 00 00 00\neb 3a\n48 89 e7\nba 04 00 00 00\neb 30\n48 89 e7\nbe 00 04 00 00\neb 42\n48 89 e7\nba 06 00 00 00\neb 1c\n48 89 e7\nba 05 00 00 00\neb 12\n48 89 e7\nba 08 00 00 00\neb 08\n48 89 e7\nba 07 00 00 00\n44 89 f6\ne8 98 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 4f 00 00 00\n09 d8\n49 8b 0f\n4a 8d 14 21\n49 89 17\n89 c3\n83 cb 02\n42 80 3c 21 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 50 c5 40 00\nbe 76 c5 40 00\nba 60 00 00 00\nb9 82 c5 40 00\ne8 50 8c ff ff\n'
p257
S'.text:0000000000408e40\n.text:0000000000408e41\n.text:0000000000408e43\n.text:0000000000408e45\n.text:0000000000408e47\n.text:0000000000408e49\n.text:0000000000408e4a\n.text:0000000000408e4e\n.text:0000000000408e51\n.text:0000000000408e54\n.text:0000000000408e57\n.text:0000000000408e5a\n.text:0000000000408e5e\n.text:0000000000408e64\n.text:0000000000408e69\n.text:0000000000408e6e\n.text:0000000000408e71\n.text:0000000000408e79\n.text:0000000000408e7e\n.text:0000000000408e81\n.text:0000000000408e84\n.text:0000000000408e90\n.text:0000000000408e93\n.text:0000000000408e96\n.text:0000000000408e9b\n.text:0000000000408e9d\n.text:0000000000408ea0\n.text:0000000000408ea5\n.text:0000000000408ea9\n.text:0000000000408eae\n.text:0000000000408eb0\n.text:0000000000408eb6\n.text:0000000000408eb9\n.text:0000000000408ebc\n.text:0000000000408ebf\n.text:0000000000408ec4\n.text:0000000000408ec8\n.text:0000000000408ecb\n.text:0000000000408ece\n.text:0000000000408ed0\n.text:0000000000408ed4\n.text:0000000000408ed6\n.text:0000000000408ed8\n.text:0000000000408edb\n.text:0000000000408ee1\n.text:0000000000408ee6\n.text:0000000000408ee9\n.text:0000000000408eeb\n.text:0000000000408ef0\n.text:0000000000408ef3\n.text:0000000000408ef9\n.text:0000000000408efc\n.text:0000000000408efe\n.text:0000000000408f04\n.text:0000000000408f07\n.text:0000000000408f0c\n.text:0000000000408f0f\n.text:0000000000408f15\n.text:0000000000408f1d\n.text:0000000000408f1f\n.text:0000000000408f21\n.text:0000000000408f23\n.text:0000000000408f26\n.text:0000000000408f2c\n.text:0000000000408f2f\n.text:0000000000408f32\n.text:0000000000408f34\n.text:0000000000408f3a\n.text:0000000000408f3d\n.text:0000000000408f3f\n.text:0000000000408f44\n.text:0000000000408f47\n.text:0000000000408f4d\n.text:0000000000408f53\n.text:0000000000408f59\n.text:0000000000408f5c\n.text:0000000000408f5f\n.text:0000000000408f61\n.text:0000000000408f6b\n.text:0000000000408f6f\n.text:0000000000408f71\n.text:0000000000408f76\n.text:0000000000408f79\n.text:0000000000408f7e\n.text:0000000000408f81\n.text:0000000000408f83\n.text:0000000000408f86\n.text:0000000000408f8a\n.text:0000000000408f8d\n.text:0000000000408f8f\n.text:0000000000408f92\n.text:0000000000408f94\n.text:0000000000408f97\n.text:0000000000408f99\n.text:0000000000408f9b\n.text:0000000000408f9f\n.text:0000000000408fa2\n.text:0000000000408fa7\n.text:0000000000408fa9\n.text:0000000000408faf\n.text:0000000000408fb1\n.text:0000000000408fb7\n.text:0000000000408fbd\n.text:0000000000408fc0\n.text:0000000000408fc3\n.text:0000000000408fc6\n.text:0000000000408fc9\n.text:0000000000408fcb\n.text:0000000000408fcd\n.text:0000000000408fd4\n.text:0000000000408fd7\n.text:0000000000408fdc\n.text:0000000000408fde\n.text:0000000000408fe2\n.text:0000000000408fe7\n.text:0000000000408fea\n.text:0000000000408fed\n.text:0000000000408ff2\n.text:0000000000408ff5\n.text:0000000000408ffa\n.text:0000000000408ffc\n.text:0000000000408fff\n.text:0000000000409004\n.text:0000000000409006\n.text:0000000000409009\n.text:000000000040900e\n.text:0000000000409010\n.text:0000000000409013\n.text:0000000000409018\n.text:000000000040901a\n.text:000000000040901d\n.text:0000000000409022\n.text:0000000000409024\n.text:0000000000409027\n.text:000000000040902c\n.text:000000000040902e\n.text:0000000000409031\n.text:0000000000409036\n.text:0000000000409038\n.text:000000000040903b\n.text:0000000000409040\n.text:0000000000409043\n.text:0000000000409048\n.text:000000000040904a\n.text:000000000040904d\n.text:0000000000409052\n.text:0000000000409054\n.text:0000000000409057\n.text:000000000040905c\n.text:0000000000409061\n.text:0000000000409063\n.text:0000000000409066\n.text:000000000040906a\n.text:000000000040906d\n.text:000000000040906f\n.text:0000000000409072\n.text:0000000000409077\n.text:000000000040907a\n.text:000000000040907e\n.text:0000000000409083\n.text:0000000000409086\n.text:0000000000409088\n.text:000000000040908c\n.text:000000000040908d\n.text:000000000040908f\n.text:0000000000409091\n.text:0000000000409093\n.text:0000000000409095\n.text:0000000000409096\n.text:0000000000409097\n.text:000000000040909c\n.text:00000000004090a1\n.text:00000000004090a6\n.text:00000000004090ab\n'
p258
tp259
sS'setlocale'
p260
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p261
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_0060f240)();\u000a  return pcVar1;\u000a}\u000a\u000a
p262
S'JMP qword ptr [0x0060f240]\n'
p263
S'ff 25 fa d2 20 00\n'
p264
S'.plt:0000000000401f40\n'
p265
tp266
sS'open_secure_db'
p267
(S'\n__stdcall open_secure_db()\n'
p268
V\u000aint open_secure_db(void)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  ulong uVar3;\u000a  char *name;\u000a  \u000a  name = "/usr/local/var/locatedb";\u000a  uVar3 = 1;\u000a  do {\u000a    iVar1 = opendb(name);\u000a    if (-1 < iVar1) {\u000a      selected_secure_db = name;\u000a      return iVar1;\u000a    }\u000a    name = (&PTR_s__usr_local_var_locatedb_0040a340)[uVar3];\u000a    uVar2 = uVar3 | 1;\u000a    uVar3 = uVar3 + 1;\u000a  } while (uVar2 == 1);\u000a  return -1;\u000a}\u000a\u000a
p269
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,0x40a676\nMOV EBX,0x1\nNOP\nMOV RDI,R14\nCALL 0x00402b40\nTEST EAX,EAX\nJNS 0x0040222b\nMOV R14,qword ptr [0x40a340 + RBX*0x8]\nMOV RAX,RBX\nOR RAX,0x1\nINC RBX\nCMP RAX,0x1\nJZ 0x00402200\nMOV EAX,0xffffffff\nJMP 0x00402232\nMOV qword ptr [0x0060f4b8],R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p270
S'41 56\n53\n50\n41 be 76 a6 40 00\nbb 01 00 00 00\n90\n4c 89 f7\ne8 38 09 00 00\n85 c0\n79 1f\n4c 8b 34 dd 40 a3 40 00\n48 89 d8\n48 83 c8 01\n48 ff c3\n48 83 f8 01\n74 dc\nb8 ff ff ff ff\neb 07\n4c 89 35 86 d2 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n'
p271
S'.text:00000000004021f0\n.text:00000000004021f2\n.text:00000000004021f3\n.text:00000000004021f4\n.text:00000000004021fa\n.text:00000000004021ff\n.text:0000000000402200\n.text:0000000000402203\n.text:0000000000402208\n.text:000000000040220a\n.text:000000000040220c\n.text:0000000000402214\n.text:0000000000402217\n.text:000000000040221b\n.text:000000000040221e\n.text:0000000000402222\n.text:0000000000402224\n.text:0000000000402229\n.text:000000000040222b\n.text:0000000000402232\n.text:0000000000402236\n.text:0000000000402237\n.text:0000000000402239\n'
p272
tp273
sS'c_toupper'
p274
(S'\n__stdcall c_toupper()\n'
p275
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p276
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p277
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p278
S'.text:0000000000409890\n.text:0000000000409893\n.text:0000000000409896\n.text:0000000000409899\n.text:000000000040989c\n'
p279
tp280
sS'fcntl'
p281
(S'\n__stdcall fcntl(int __fd, int __cmd)\n'
p282
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fcntl(int __fd,int __cmd,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fcntl_0060f098)();\u000a  return iVar1;\u000a}\u000a\u000a
p283
S'JMP qword ptr [0x0060f098]\n'
p284
S'ff 25 a2 d4 20 00\n'
p285
S'.plt:0000000000401bf0\n'
p286
tp287
sS'mbsinit'
p288
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p289
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_0060f2d0)();\u000a  return iVar1;\u000a}\u000a\u000a
p290
S'JMP qword ptr [0x0060f2d0]\n'
p291
S'ff 25 6a d2 20 00\n'
p292
S'.plt:0000000000402060\n'
p293
tp294
sS'dcgettext'
p295
(S'\n__stdcall dcgettext()\n'
p296
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_0060f0b8)();\u000a  return;\u000a}\u000a\u000a
p297
S'JMP qword ptr [0x0060f0b8]\n'
p298
S'ff 25 82 d4 20 00\n'
p299
S'.plt:0000000000401c30\n'
p300
tp301
sS'human_readable'
p302
(S'\n__stdcall human_readable(uintmax_t n, char * buf, uintmax_t from_block_size, uintmax_t to_block_size)\n'
p303
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000achar * human_readable(uintmax_t n,char *buf,uintmax_t from_block_size,uintmax_t to_block_size)\u000a\u000a{\u000a  uint uVar1;\u000a  char *grouping;\u000a  undefined auVar2 [16];\u000a  undefined auVar3 [16];\u000a  float fVar4;\u000a  uint uVar5;\u000a  lconv *plVar6;\u000a  size_t __n;\u000a  char *__src;\u000a  ulong uVar7;\u000a  ulong uVar8;\u000a  char cVar9;\u000a  uint uVar10;\u000a  uint uVar11;\u000a  size_t __n_00;\u000a  char *thousands_sep;\u000a  ulong uVar12;\u000a  uint uVar13;\u000a  uint uVar14;\u000a  char *number;\u000a  uint uVar15;\u000a  ulong in_R8;\u000a  ulong uVar16;\u000a  ulong uVar17;\u000a  char *__s;\u000a  long lVar18;\u000a  char *pcVar19;\u000a  bool bVar20;\u000a  longdouble damt;\u000a  \u000a  uVar13 = (uint)from_block_size;\u000a  uVar5 = 1000;\u000a  if ((from_block_size & 0x20) != 0) {\u000a    uVar5 = 0x400;\u000a  }\u000a  plVar6 = localeconv();\u000a  __s = plVar6->decimal_point;\u000a  __n = strlen(__s);\u000a  bVar20 = __n - 1 < 0x10;\u000a  __n_00 = 1;\u000a  if (bVar20) {\u000a    __n_00 = __n;\u000a  }\u000a  __src = ".";\u000a  if (bVar20) {\u000a    __src = __s;\u000a  }\u000a  __s = plVar6->thousands_sep;\u000a  grouping = plVar6->grouping;\u000a  __n = strlen(__s);\u000a  thousands_sep =\u000a              \u000a       "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a       + 0xca;\u000a  if (__n < 0x11) {\u000a    thousands_sep = __s;\u000a  }\u000a  __s = buf + 0x287;\u000a  if (to_block_size < in_R8) {\u000a    if ((to_block_size != 0) && (in_R8 % to_block_size == 0)) {\u000a      auVar3 = ZEXT816(in_R8) / ZEXT816(to_block_size);\u000a      uVar7 = SUB168(ZEXT816(n) / (auVar3 & (undefined  [16])0xffffffffffffffff),0);\u000a      auVar2 = ZEXT816((ulong)(SUB168(ZEXT816(n) % (auVar3 & (undefined  [16])0xffffffffffffffff),0)\u000a                              * 10));\u000a      uVar8 = SUB168(auVar2 / (auVar3 & (undefined  [16])0xffffffffffffffff),0);\u000a      uVar16 = SUB168(auVar2 % (auVar3 & (undefined  [16])0xffffffffffffffff),0) * 2;\u000a      uVar12 = (ulong)(uVar16 != 0);\u000a      if (SUB168(auVar3,0) <= uVar16) {\u000a        uVar12 = (ulong)(-(uint)(SUB168(auVar3,0) < uVar16) & 1 | 2);\u000a      }\u000aLAB_00404ca5:\u000a      uVar11 = (uint)uVar8;\u000a      uVar10 = (uint)uVar12;\u000a      uVar15 = 0xffffffff;\u000a      number = __s;\u000a      if ((from_block_size & 0x10) != 0) {\u000a        uVar16 = (ulong)uVar5;\u000a        uVar15 = 0;\u000a        number = __s;\u000a        if (uVar16 <= uVar7) {\u000a          uVar15 = 0;\u000a          uVar17 = uVar7;\u000a          do {\u000a            uVar7 = uVar17 / uVar16;\u000a            uVar10 = (int)uVar8 + (int)(uVar17 % uVar16) * 10;\u000a            uVar11 = uVar10 / uVar5;\u000a            uVar1 = ((int)uVar12 >> 1) + (uVar10 % uVar5) * 2;\u000a            uVar14 = (int)uVar12 + uVar1;\u000a            uVar10 = (uint)(uVar14 != 0);\u000a            if (uVar5 <= uVar1) {\u000a              uVar10 = -(uint)(uVar5 < uVar14) & 1 | 2;\u000a            }\u000a            uVar12 = (ulong)uVar10;\u000a            uVar15 = uVar15 + 1;\u000a            uVar8 = (ulong)uVar11;\u000a          } while (((int)uVar15 < 8) && (uVar17 = uVar7, uVar16 <= uVar7));\u000a          number = __s;\u000a          if (uVar7 < 10) {\u000a            if ((uVar13 & 3) == 1) {\u000a              if ((uVar11 & 1) + uVar10 < 3) goto LAB_00404f16;\u000aLAB_00404f00:\u000a              uVar11 = uVar11 + 1;\u000a              uVar10 = 0;\u000a              if (uVar11 != 10) goto LAB_00404f16;\u000a              uVar7 = uVar7 + 1;\u000a              uVar10 = 0;\u000a              if (uVar7 < 10) {\u000a                uVar11 = 0;\u000a                goto LAB_00404f16;\u000a              }\u000a              uVar7 = 10;\u000a              number = __s;\u000a            }\u000a            else {\u000a              if (((from_block_size & 3) == 0) && (uVar10 != 0)) goto LAB_00404f00;\u000aLAB_00404f16:\u000a              if (((from_block_size & 8) != 0) && (number = __s, uVar11 == 0)) goto LAB_00404f67;\u000a              buf[0x286] = (char)uVar11 + '0';\u000a              memcpy(buf + (0x286 - __n_00),__src,__n_00);\u000a              number = buf + (0x286 - __n_00);\u000a            }\u000a            uVar10 = 0;\u000a            uVar11 = 0;\u000a          }\u000a        }\u000a      }\u000aLAB_00404f67:\u000a      if ((from_block_size & 3) == 0) {\u000a        pcVar19 = number;\u000a        if (uVar11 + uVar10 != 0 && SCARRY4(uVar11,uVar10) == (int)(uVar11 + uVar10) < 0)\u000a        goto LAB_00404f91;\u000a      }\u000a      else {\u000a        pcVar19 = number;\u000a        if ((((byte)from_block_size & 3) == 1) &&\u000a           (pcVar19 = number, 5 < (int)((uint)(((uint)uVar7 & 1) + uVar10 != 0) + uVar11))) {\u000aLAB_00404f91:\u000a          uVar7 = uVar7 + 1;\u000a          pcVar19 = number;\u000a          if (((int)uVar15 < 8) &&\u000a             ((pcVar19 = number, (from_block_size & 0x10) != 0 &&\u000a              (pcVar19 = number, uVar7 == (ulong)uVar5)))) {\u000a            uVar15 = uVar15 + 1;\u000a            if ((from_block_size & 8) == 0) {\u000a              number[-1] = '0';\u000a              number = number + (-1 - __n_00);\u000a              memcpy(number,__src,__n_00);\u000a            }\u000a            uVar7 = 1;\u000a            pcVar19 = number;\u000a          }\u000a        }\u000a      }\u000a      do {\u000a        number[-1] = (char)uVar7 +\u000a                     ((byte)((SUB168(ZEXT816(uVar7) * ZEXT816(0xcccccccccccccccd) >> 0x40,0) &\u000a                             0xffffffff) >> 2) & 0xfe) * -5 | 0x30;\u000a        number = number + -1;\u000a        bVar20 = 9 < uVar7;\u000a        uVar7 = uVar7 / 10;\u000a      } while (bVar20);\u000a      goto joined_r0x00404e6a;\u000a    }\u000a  }\u000a  else {\u000a    if (to_block_size % in_R8 == 0) {\u000a      uVar12 = 0;\u000a      uVar7 = SUB168(ZEXT816(to_block_size) / ZEXT816(in_R8),0) * n;\u000a      uVar8 = 0;\u000a      if (SUB168(ZEXT816(uVar7) /\u000a                 (ZEXT816(to_block_size) / ZEXT816(in_R8) & (undefined  [16])0xffffffffffffffff),0)\u000a          == n) goto LAB_00404ca5;\u000a    }\u000a  }\u000a  if ((from_block_size & 0x10) == 0) {\u000a    adjust_value();\u000a    lVar18 = 0;\u000a    sprintf(buf,"%.0Lf");\u000a    __n = strlen(buf);\u000a    uVar15 = 0xffffffff;\u000a  }\u000a  else {\u000a    fVar4 = 1.00000000;\u000a    uVar15 = 0;\u000a    do {\u000a      fVar4 = fVar4 * (float)(ulong)uVar5;\u000a      uVar15 = uVar15 + 1;\u000a      if (7 < (int)uVar15) break;\u000a    } while ((float)(ulong)uVar5 * fVar4 <=\u000a             ((float)n + *(float *)(&DAT_0040b910 + (ulong)(-1 < (long)n) * 4)) *\u000a             (((float)in_R8 + *(float *)(&DAT_0040b910 + (ulong)(-1 < (long)in_R8) * 4)) /\u000a             ((float)to_block_size +\u000a             *(float *)(&DAT_0040b910 + (ulong)(-1 < (long)to_block_size) * 4))));\u000a    adjust_value();\u000a    sprintf(buf,"%.1Lf");\u000a    __n = strlen(buf);\u000a    if ((((ulong)((uVar13 & 0x20) >> 5) ^ 3) + __n_00 < __n) ||\u000a       ((lVar18 = __n_00 + 1, (from_block_size & 8) != 0 && (buf[__n - 1] == '0')))) {\u000a      adjust_value();\u000a      lVar18 = 0;\u000a      sprintf(buf,"%.0Lf");\u000a      __n = strlen(buf);\u000a    }\u000a  }\u000a  number = __s + -__n;\u000a  memmove(number,buf,__n);\u000a  pcVar19 = __s + -lVar18;\u000ajoined_r0x00404e6a:\u000a  if ((from_block_size & 4) != 0) {\u000a    number = group_number(number,(size_t)(pcVar19 + -(long)number),grouping,thousands_sep);\u000a  }\u000a  if ((char)(byte)from_block_size < 0) {\u000a    if (((int)uVar15 < 0) && (uVar15 = 0, 1 < in_R8)) {\u000a      uVar15 = 0;\u000a      uVar12 = 1;\u000a      do {\u000a        if (uVar15 == 7) {\u000a          uVar15 = 8;\u000a          break;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar12 = uVar12 * (ulong)uVar5;\u000a      } while (uVar12 < in_R8);\u000a    }\u000a    if (((from_block_size & 0x40) != 0) && ((uVar15 | uVar13 & 0x100) != 0)) {\u000a      buf[0x287] = ' ';\u000a      __s = buf + 0x288;\u000a    }\u000a    if (uVar15 != 0) {\u000a      if (((from_block_size & 0x20) != 0) || (cVar9 = 'k', uVar15 != 1)) {\u000a        cVar9 = ""[(long)(int)uVar15];\u000a      }\u000a      *__s = cVar9;\u000a      __s = __s + 1;\u000a    }\u000a    if ((from_block_size & 0x100) != 0) {\u000a      if (((from_block_size & 0x20) != 0) && (uVar15 != 0)) {\u000a        *__s = 'i';\u000a        __s = __s + 1;\u000a      }\u000a      *__s = 'B';\u000a      __s = __s + 1;\u000a    }\u000a  }\u000a  *__s = 0;\u000a  return number;\u000a}\u000a\u000a
p304
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x88\nMOV R14,R8\nMOV R15,RCX\nMOV R12,RSI\nMOV R13,RDI\nMOV EAX,EDX\nAND EAX,0x3\nMOV dword ptr [RSP + 0x24],EAX\nMOV dword ptr [RSP + 0x18],EDX\nMOV EAX,EDX\nAND EAX,0x20\nMOV dword ptr [RSP + 0x20],EAX\nMOV EAX,0x400\nMOV ECX,0x3e8\nCMOVNZ ECX,EAX\nMOV dword ptr [RSP + 0x1c],ECX\nCALL 0x00401be0\nMOV RBX,RAX\nMOV RBP,qword ptr [RBX]\nMOV RDI,RBP\nCALL 0x00401c50\nLEA RCX,[RAX + -0x1]\nCMP RCX,0x10\nMOV ECX,0x1\nCMOVC RCX,RAX\nMOV qword ptr [RSP + 0x40],RCX\nMOV EAX,0x40a817\nCMOVC RAX,RBP\nMOV qword ptr [RSP + 0x30],RAX\nMOV RBP,qword ptr [RBX + 0x8]\nMOV RBX,qword ptr [RBX + 0x10]\nMOV RDI,RBP\nCALL 0x00401c50\nCMP RAX,0x11\nMOV ECX,0x40c0f9\nCMOVC RCX,RBP\nLEA RAX,[0x287 + R12]\nMOV qword ptr [RSP + 0x10],RAX\nCMP R14,R15\nMOV qword ptr [RSP + 0x50],R14\nMOV qword ptr [RSP + 0x28],R12\nMOV qword ptr [RSP + 0x60],RBX\nMOV qword ptr [RSP + 0x58],RCX\nJBE 0x00404c6d\nTEST R15,R15\nMOV R8D,dword ptr [RSP + 0x18]\nJZ 0x00404cd3\nXOR EDX,EDX\nMOV RAX,R14\nDIV R15\nTEST RDX,RDX\nJNZ 0x00404cd3\nXOR EDX,EDX\nMOV RAX,R14\nDIV R15\nMOV RSI,RAX\nXOR EDX,EDX\nMOV RAX,R13\nDIV RSI\nMOV R12,RAX\nADD RDX,RDX\nLEA RAX,[RDX + RDX*0x4]\nXOR EDX,EDX\nDIV RSI\nMOV RCX,RAX\nXOR EBX,EBX\nADD RDX,RDX\nSETNZ BL\nCMP RSI,RDX\nSBB EAX,EAX\nAND EAX,0x1\nOR EAX,0x2\nCMP RDX,RSI\nCMOVNC EBX,EAX\nJMP 0x00404ca5\nXOR EDX,EDX\nMOV RAX,R15\nDIV R14\nTEST RDX,RDX\nMOV R8D,dword ptr [RSP + 0x18]\nJNZ 0x00404cd3\nXOR EBX,EBX\nXOR EDX,EDX\nMOV RAX,R15\nDIV R14\nMOV RCX,RAX\nMOV R12,RCX\nIMUL R12,R13\nXOR EDX,EDX\nMOV RAX,R12\nDIV RCX\nCMP RAX,R13\nMOV ECX,0x0\nJNZ 0x00404cd3\nMOV R13D,R8D\nAND R13D,0x10\nMOV EBP,0xffffffff\nJZ 0x00404e75\nMOV ESI,dword ptr [RSP + 0x1c]\nMOV R9D,ESI\nXOR EBP,EBP\nCMP R9,R12\nJBE 0x00404e7f\nMOV R15,qword ptr [RSP + 0x10]\nJMP 0x00404f67\nMOV qword ptr [RSP + 0x70],R14\nXOR EAX,EAX\nTEST R14,R14\nSETNS AL\nFILD qword ptr [RSP + 0x70]\nFADD dword ptr [0x40b910 + RAX*0x4]\nMOV qword ptr [RSP + 0x78],R13\nXOR EAX,EAX\nTEST R13,R13\nSETNS AL\nFILD qword ptr [RSP + 0x78]\nFADD dword ptr [0x40b910 + RAX*0x4]\nMOV qword ptr [0x80 + RSP],R15\nXOR EAX,EAX\nTEST R15,R15\nSETNS AL\nFILD qword ptr [0x80 + RSP]\nFADD dword ptr [0x40b910 + RAX*0x4]\nFDIVRP ST2,ST0\nFMULP\nTEST R8B,0x10\nJNZ 0x00404d68\nFSTP tword ptr [RSP]\nMOV EDI,dword ptr [RSP + 0x24]\nCALL 0x00405120\nFSTP tword ptr [RSP]\nXOR R14D,R14D\nMOV ESI,0x40b930\nXOR EAX,EAX\nMOV R12,qword ptr [RSP + 0x28]\nMOV RDI,R12\nCALL 0x00402010\nMOV RDI,R12\nCALL 0x00401c50\nMOV EBP,0xffffffff\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00404e47\nMOV EAX,dword ptr [RSP + 0x1c]\nMOV qword ptr [RSP + 0x68],RAX\nFLD1\nXOR EBP,EBP\nFILD qword ptr [RSP + 0x68]\nFLDZ\nNOP dword ptr [RAX + RAX*0x1]\nFSTP ST0\nFMUL ST1\nINC EBP\nFLD ST0\nFMUL ST2\nCMP EBP,0x7\nJG 0x00404d99\nFXCH ST3\nFUCOMI ST0,ST3\nFSTP ST3\nFLDZ\nJNC 0x00404d80\nFSTP ST1\nFSTP ST0\nFDIVP\nFLD ST0\nFSTP tword ptr [RSP + 0x30]\nFSTP tword ptr [RSP]\nMOV EBX,dword ptr [RSP + 0x24]\nMOV EDI,EBX\nCALL 0x00405120\nFSTP tword ptr [RSP]\nMOV ESI,0x40b936\nXOR EAX,EAX\nMOV R12,qword ptr [RSP + 0x28]\nMOV RDI,R12\nCALL 0x00402010\nMOV RDI,R12\nCALL 0x00401c50\nMOV ECX,dword ptr [RSP + 0x20]\nSHR RCX,0x5\nXOR RCX,0x3\nMOV R14,qword ptr [RSP + 0x40]\nADD RCX,R14\nCMP RCX,RAX\nMOV R13,qword ptr [RSP + 0x10]\nJC 0x00404e08\nFLD tword ptr [RSP + 0x30]\nFSTP ST0\nINC R14\nTEST byte ptr [RSP + 0x18],0x8\nJZ 0x00404e47\nCMP byte ptr [R12 + RAX*0x1 + -0x1],0x30\nJNZ 0x00404e47\nFLD dword ptr [0x0040b918]\nFLD ST0\nFSTP tword ptr [RSP + 0x40]\nFLD tword ptr [RSP + 0x30]\nFMULP\nFSTP tword ptr [RSP]\nMOV EDI,EBX\nCALL 0x00405120\nFLD tword ptr [RSP + 0x40]\nFDIVP\nFSTP tword ptr [RSP]\nXOR R14D,R14D\nMOV ESI,0x40b930\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x00402010\nMOV RDI,R12\nCALL 0x00401c50\nMOV RBX,R13\nSUB RBX,RAX\nMOV RDI,RBX\nMOV RSI,R12\nMOV RDX,RAX\nCALL 0x00401f60\nMOV R15,R13\nSUB R15,R14\nMOV R8D,dword ptr [RSP + 0x18]\nTEST R8B,0x4\nJNZ 0x0040502b\nJMP 0x0040504b\nMOV R15,qword ptr [RSP + 0x10]\nJMP 0x00404f67\nXOR EBP,EBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nXOR EDX,EDX\nMOV RAX,R12\nDIV R9\nLEA EDX,[RDX + RDX*0x4]\nLEA ECX,[RCX + RDX*0x2]\nMOV EDI,EBX\nSAR EDI,1\nXOR EDX,EDX\nMOV R12,RAX\nMOV EAX,ECX\nDIV ESI\nLEA ECX,[RDI + RDX*0x2]\nXOR EDX,EDX\nADD EBX,ECX\nSETNZ DL\nCMP ESI,EBX\nSBB EDI,EDI\nAND EDI,0x1\nOR EDI,0x2\nCMP ECX,ESI\nMOV EBX,EDX\nCMOVNC EBX,EDI\nINC EBP\nCMP EBP,0x7\nMOV ECX,EAX\nJG 0x00404ed4\nCMP R9,R12\nJBE 0x00404e90\nCMP R12,0x9\nMOV EAX,dword ptr [RSP + 0x24]\nJA 0x00404ef1\nCMP EAX,0x1\nJNZ 0x00404ef8\nMOV EAX,ECX\nAND EAX,0x1\nADD EAX,EBX\nCMP EAX,0x2\nJA 0x00404f00\nJMP 0x00404f16\nMOV R15,qword ptr [RSP + 0x10]\nJMP 0x00404f67\nTEST EAX,EAX\nJNZ 0x00404f16\nTEST EBX,EBX\nJZ 0x00404f16\nINC ECX\nXOR EBX,EBX\nCMP ECX,0xa\nJNZ 0x00404f16\nINC R12\nXOR EBX,EBX\nCMP R12,0x9\nJA 0x00404f5a\nXOR ECX,ECX\nTEST R8B,0x8\nJZ 0x00404f27\nTEST ECX,ECX\nJNZ 0x00404f27\nMOV R15,qword ptr [RSP + 0x10]\nJMP 0x00404f67\nADD ECX,0x30\nMOV RAX,qword ptr [RSP + 0x28]\nLEA R15,[0x286 + RAX]\nMOV byte ptr [0x286 + RAX],CL\nMOV RDX,qword ptr [RSP + 0x40]\nSUB R15,RDX\nMOV RDI,R15\nMOV RSI,qword ptr [RSP + 0x30]\nCALL 0x00401e20\nMOV R8D,dword ptr [RSP + 0x18]\nXOR EBX,EBX\nJMP 0x00404f65\nMOV R12D,0xa\nMOV R15,qword ptr [RSP + 0x10]\nXOR ECX,ECX\nMOV EAX,R8D\nAND AL,0x3\nJZ 0x00404f8d\nCMP AL,0x1\nJNZ 0x00404fd7\nMOVSXD RAX,EBX\nMOV EDX,R12D\nAND EDX,0x1\nXOR ESI,ESI\nADD RDX,RAX\nSETNZ SIL\nADD ESI,ECX\nCMP ESI,0x5\nJG 0x00404f91\nJMP 0x00404fd7\nADD ECX,EBX\nJLE 0x00404fd7\nINC R12\nCMP EBP,0x7\nJG 0x00404fd7\nTEST R13D,R13D\nJZ 0x00404fd7\nMOV EAX,dword ptr [RSP + 0x1c]\nCMP R12,RAX\nJNZ 0x00404fd7\nINC EBP\nTEST R8B,0x8\nJNZ 0x00404fd1\nMOV byte ptr [R15 + -0x1],0x30\nDEC R15\nMOV RDX,qword ptr [RSP + 0x40]\nSUB R15,RDX\nMOV RDI,R15\nMOV RSI,qword ptr [RSP + 0x30]\nCALL 0x00401e20\nMOV R8D,dword ptr [RSP + 0x18]\nMOV R12D,0x1\nMOV R13,qword ptr [RSP + 0x10]\nMOV RCX,-0x3333333333333333\nMOV RBX,R15\nNOP dword ptr [RAX]\nMOV RAX,R12\nMUL RCX\nMOV EAX,EDX\nSHR EAX,0x2\nAND EAX,0x3ffffffe\nLEA EAX,[RAX + RAX*0x4]\nMOV ESI,R12D\nSUB ESI,EAX\nOR SIL,0x30\nMOV byte ptr [RBX + -0x1],SIL\nDEC RBX\nSHR RDX,0x3\nCMP R12,0x9\nMOV R12,RDX\nJA 0x00404ff0\nMOV R12,qword ptr [RSP + 0x28]\nTEST R8B,0x4\nJZ 0x0040504b\nSUB R15,RBX\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x60]\nMOV RCX,qword ptr [RSP + 0x58]\nCALL 0x004051f0\nMOV R8D,dword ptr [RSP + 0x18]\nMOV RBX,RAX\nMOV R14,qword ptr [RSP + 0x50]\nMOV EAX,dword ptr [RSP + 0x1c]\nTEST R8B,R8B\nJNS 0x004050ff\nTEST EBP,EBP\nJNS 0x00405097\nXOR EBP,EBP\nCMP R14,0x2\nJC 0x00405097\nMOV EAX,EAX\nXOR EBP,EBP\nMOV ECX,0x1\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP EBP,0x7\nJZ 0x00405092\nINC EBP\nIMUL RCX,RAX\nCMP RCX,R14\nJC 0x00405080\nJMP 0x00405097\nMOV EBP,0x8\nMOV EAX,R8D\nAND EAX,0x100\nTEST R8B,0x40\nJZ 0x004050be\nMOV ECX,EBP\nOR ECX,EAX\nJZ 0x004050be\nMOV byte ptr [0x287 + R12],0x20\nADD R12,0x288\nMOV R13,R12\nTEST EBP,EBP\nJZ 0x004050e0\nCMP dword ptr [RSP + 0x20],0x0\nJNZ 0x004050d0\nMOV CL,0x6b\nCMP EBP,0x1\nJZ 0x004050d9\nMOVSXD RCX,EBP\nMOV CL,byte ptr [0x40b990 + RCX]\nMOV byte ptr [R13],CL\nINC R13\nTEST EAX,EAX\nJZ 0x004050ff\nCMP dword ptr [RSP + 0x20],0x0\nJZ 0x004050f7\nTEST EBP,EBP\nJZ 0x004050f7\nMOV byte ptr [R13],0x69\nINC R13\nMOV byte ptr [R13],0x42\nINC R13\nMOV byte ptr [R13],0x0\nMOV RAX,RBX\nADD RSP,0x88\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p305
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 88 00 00 00\n4d 89 c6\n49 89 cf\n49 89 f4\n49 89 fd\n89 d0\n83 e0 03\n89 44 24 24\n89 54 24 18\n89 d0\n83 e0 20\n89 44 24 20\nb8 00 04 00 00\nb9 e8 03 00 00\n0f 45 c8\n89 4c 24 1c\ne8 47 d0 ff ff\n48 89 c3\n48 8b 2b\n48 89 ef\ne8 a9 d0 ff ff\n48 8d 48 ff\n48 83 f9 10\nb9 01 00 00 00\n48 0f 42 c8\n48 89 4c 24 40\nb8 17 a8 40 00\n48 0f 42 c5\n48 89 44 24 30\n48 8b 6b 08\n48 8b 5b 10\n48 89 ef\ne8 75 d0 ff ff\n48 83 f8 11\nb9 f9 c0 40 00\n48 0f 42 cd\n49 8d 84 24 87 02 00 00\n48 89 44 24 10\n4d 39 fe\n4c 89 74 24 50\n4c 89 64 24 28\n48 89 5c 24 60\n48 89 4c 24 58\n76 5f\n4d 85 ff\n44 8b 44 24 18\n0f 84 b7 00 00 00\n31 d2\n4c 89 f0\n49 f7 f7\n48 85 d2\n0f 85 a6 00 00 00\n31 d2\n4c 89 f0\n49 f7 f7\n48 89 c6\n31 d2\n4c 89 e8\n48 f7 f6\n49 89 c4\n48 01 d2\n48 8d 04 92\n31 d2\n48 f7 f6\n48 89 c1\n31 db\n48 01 d2\n0f 95 c3\n48 39 d6\n19 c0\n83 e0 01\n83 c8 02\n48 39 f2\n0f 43 d8\neb 38\n31 d2\n4c 89 f8\n49 f7 f6\n48 85 d2\n44 8b 44 24 18\n75 54\n31 db\n31 d2\n4c 89 f8\n49 f7 f6\n48 89 c1\n49 89 cc\n4d 0f af e5\n31 d2\n4c 89 e0\n48 f7 f1\n4c 39 e8\nb9 00 00 00 00\n75 2e\n45 89 c5\n41 83 e5 10\nbd ff ff ff ff\n0f 84 be 01 00 00\n8b 74 24 1c\n41 89 f1\n31 ed\n4d 39 e1\n0f 86 b6 01 00 00\n4c 8b 7c 24 10\ne9 94 02 00 00\n4c 89 74 24 70\n31 c0\n4d 85 f6\n0f 99 c0\ndf 6c 24 70\nd8 04 85 10 b9 40 00\n4c 89 6c 24 78\n31 c0\n4d 85 ed\n0f 99 c0\ndf 6c 24 78\nd8 04 85 10 b9 40 00\n4c 89 bc 24 80 00 00 00\n31 c0\n4d 85 ff\n0f 99 c0\ndf ac 24 80 00 00 00\nd8 04 85 10 b9 40 00\nde f2\nde c9\n41 f6 c0 10\n75 3d\ndb 3c 24\n8b 7c 24 24\ne8 e9 03 00 00\ndb 3c 24\n45 31 f6\nbe 30 b9 40 00\n31 c0\n4c 8b 64 24 28\n4c 89 e7\ne8 bf d2 ff ff\n4c 89 e7\ne8 f7 ce ff ff\nbd ff ff ff ff\n4c 8b 6c 24 10\ne9 df 00 00 00\n8b 44 24 1c\n48 89 44 24 68\nd9 e8\n31 ed\ndf 6c 24 68\nd9 ee\n0f 1f 44 00 00\ndd d8\ndc c9\nff c5\nd9 c0\nd8 ca\n83 fd 07\n7f 0a\nd9 cb\ndb eb\ndd db\nd9 ee\n73 e7\ndd d9\ndd d8\nde f9\nd9 c0\ndb 7c 24 30\ndb 3c 24\n8b 5c 24 24\n89 df\ne8 6d 03 00 00\ndb 3c 24\nbe 36 b9 40 00\n31 c0\n4c 8b 64 24 28\n4c 89 e7\ne8 46 d2 ff ff\n4c 89 e7\ne8 7e ce ff ff\n8b 4c 24 20\n48 c1 e9 05\n48 83 f1 03\n4c 8b 74 24 40\n4c 01 f1\n48 39 c1\n4c 8b 6c 24 10\n72 18\ndb 6c 24 30\ndd d8\n49 ff c6\nf6 44 24 18 08\n74 47\n41 80 7c 04 ff 30\n75 3f\nd9 05 0a 6b 00 00\nd9 c0\ndb 7c 24 40\ndb 6c 24 30\nde c9\ndb 3c 24\n89 df\ne8 fc 02 00 00\ndb 6c 24 40\nde f9\ndb 3c 24\n45 31 f6\nbe 30 b9 40 00\n31 c0\n4c 89 e7\ne8 d1 d1 ff ff\n4c 89 e7\ne8 09 ce ff ff\n4c 89 eb\n48 29 c3\n48 89 df\n4c 89 e6\n48 89 c2\ne8 05 d1 ff ff\n4d 89 ef\n4d 29 f7\n44 8b 44 24 18\n41 f6 c0 04\n0f 85 bb 01 00 00\ne9 d6 01 00 00\n4c 8b 7c 24 10\ne9 e8 00 00 00\n31 ed\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n31 d2\n4c 89 e0\n49 f7 f1\n8d 14 92\n8d 0c 51\n89 df\nd1 ff\n31 d2\n49 89 c4\n89 c8\nf7 f6\n8d 0c 57\n31 d2\n01 cb\n0f 95 c2\n39 de\n19 ff\n83 e7 01\n83 cf 02\n39 f1\n89 d3\n0f 43 df\nff c5\n83 fd 07\n89 c1\n7f 05\n4d 39 e1\n76 bc\n49 83 fc 09\n8b 44 24 24\n77 13\n83 f8 01\n75 15\n89 c8\n83 e0 01\n01 d8\n83 f8 02\n77 11\neb 25\n4c 8b 7c 24 10\neb 6f\n85 c0\n75 1a\n85 db\n74 16\nff c1\n31 db\n83 f9 0a\n75 0d\n49 ff c4\n31 db\n49 83 fc 09\n77 46\n31 c9\n41 f6 c0 08\n74 0b\n85 c9\n75 07\n4c 8b 7c 24 10\neb 40\n83 c1 30\n48 8b 44 24 28\n4c 8d b8 86 02 00 00\n88 88 86 02 00 00\n48 8b 54 24 40\n49 29 d7\n4c 89 ff\n48 8b 74 24 30\ne8 cf ce ff ff\n44 8b 44 24 18\n31 db\neb 0b\n41 bc 0a 00 00 00\n4c 8b 7c 24 10\n31 c9\n44 89 c0\n24 03\n74 1f\n3c 01\n75 65\n48 63 c3\n44 89 e2\n83 e2 01\n31 f6\n48 01 c2\n40 0f 95 c6\n01 ce\n83 fe 05\n7f 06\neb 4a\n01 d9\n7e 46\n49 ff c4\n83 fd 07\n7f 3e\n45 85 ed\n74 39\n8b 44 24 1c\n49 39 c4\n75 30\nff c5\n41 f6 c0 08\n75 22\n41 c6 47 ff 30\n49 ff cf\n48 8b 54 24 40\n49 29 d7\n4c 89 ff\n48 8b 74 24 30\ne8 54 ce ff ff\n44 8b 44 24 18\n41 bc 01 00 00 00\n4c 8b 6c 24 10\n48 b9 cd cc cc cc cc cc cc cc\n4c 89 fb\n0f 1f 80 00 00 00 00\n4c 89 e0\n48 f7 e1\n89 d0\nc1 e8 02\n25 fe ff ff 3f\n8d 04 80\n44 89 e6\n29 c6\n40 80 ce 30\n40 88 73 ff\n48 ff cb\n48 c1 ea 03\n49 83 fc 09\n49 89 d4\n77 d0\n4c 8b 64 24 28\n41 f6 c0 04\n74 20\n49 29 df\n48 89 df\n4c 89 fe\n48 8b 54 24 60\n48 8b 4c 24 58\ne8 ad 01 00 00\n44 8b 44 24 18\n48 89 c3\n4c 8b 74 24 50\n8b 44 24 1c\n45 84 c0\n0f 89 a2 00 00 00\n85 ed\n79 36\n31 ed\n49 83 fe 02\n72 2e\n89 c0\n31 ed\nb9 01 00 00 00\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n83 fd 07\n74 0d\nff c5\n48 0f af c8\n4c 39 f1\n72 f0\neb 05\nbd 08 00 00 00\n44 89 c0\n25 00 01 00 00\n41 f6 c0 40\n74 19\n89 e9\n09 c1\n74 13\n41 c6 84 24 87 02 00 00 20\n49 81 c4 88 02 00 00\n4d 89 e5\n85 ed\n74 1e\n83 7c 24 20 00\n75 07\nb1 6b\n83 fd 01\n74 09\n48 63 cd\n8a 89 90 b9 40 00\n41 88 4d 00\n49 ff c5\n85 c0\n74 1b\n83 7c 24 20 00\n74 0c\n85 ed\n74 08\n41 c6 45 00 69\n49 ff c5\n41 c6 45 00 42\n49 ff c5\n41 c6 45 00 00\n48 89 d8\n48 81 c4 88 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p306
S'.text:0000000000404b50\n.text:0000000000404b51\n.text:0000000000404b53\n.text:0000000000404b55\n.text:0000000000404b57\n.text:0000000000404b59\n.text:0000000000404b5a\n.text:0000000000404b61\n.text:0000000000404b64\n.text:0000000000404b67\n.text:0000000000404b6a\n.text:0000000000404b6d\n.text:0000000000404b6f\n.text:0000000000404b72\n.text:0000000000404b76\n.text:0000000000404b7a\n.text:0000000000404b7c\n.text:0000000000404b7f\n.text:0000000000404b83\n.text:0000000000404b88\n.text:0000000000404b8d\n.text:0000000000404b90\n.text:0000000000404b94\n.text:0000000000404b99\n.text:0000000000404b9c\n.text:0000000000404b9f\n.text:0000000000404ba2\n.text:0000000000404ba7\n.text:0000000000404bab\n.text:0000000000404baf\n.text:0000000000404bb4\n.text:0000000000404bb8\n.text:0000000000404bbd\n.text:0000000000404bc2\n.text:0000000000404bc6\n.text:0000000000404bcb\n.text:0000000000404bcf\n.text:0000000000404bd3\n.text:0000000000404bd6\n.text:0000000000404bdb\n.text:0000000000404bdf\n.text:0000000000404be4\n.text:0000000000404be8\n.text:0000000000404bf0\n.text:0000000000404bf5\n.text:0000000000404bf8\n.text:0000000000404bfd\n.text:0000000000404c02\n.text:0000000000404c07\n.text:0000000000404c0c\n.text:0000000000404c0e\n.text:0000000000404c11\n.text:0000000000404c16\n.text:0000000000404c1c\n.text:0000000000404c1e\n.text:0000000000404c21\n.text:0000000000404c24\n.text:0000000000404c27\n.text:0000000000404c2d\n.text:0000000000404c2f\n.text:0000000000404c32\n.text:0000000000404c35\n.text:0000000000404c38\n.text:0000000000404c3a\n.text:0000000000404c3d\n.text:0000000000404c40\n.text:0000000000404c43\n.text:0000000000404c46\n.text:0000000000404c4a\n.text:0000000000404c4c\n.text:0000000000404c4f\n.text:0000000000404c52\n.text:0000000000404c54\n.text:0000000000404c57\n.text:0000000000404c5a\n.text:0000000000404c5d\n.text:0000000000404c5f\n.text:0000000000404c62\n.text:0000000000404c65\n.text:0000000000404c68\n.text:0000000000404c6b\n.text:0000000000404c6d\n.text:0000000000404c6f\n.text:0000000000404c72\n.text:0000000000404c75\n.text:0000000000404c78\n.text:0000000000404c7d\n.text:0000000000404c7f\n.text:0000000000404c81\n.text:0000000000404c83\n.text:0000000000404c86\n.text:0000000000404c89\n.text:0000000000404c8c\n.text:0000000000404c8f\n.text:0000000000404c93\n.text:0000000000404c95\n.text:0000000000404c98\n.text:0000000000404c9b\n.text:0000000000404c9e\n.text:0000000000404ca3\n.text:0000000000404ca5\n.text:0000000000404ca8\n.text:0000000000404cac\n.text:0000000000404cb1\n.text:0000000000404cb7\n.text:0000000000404cbb\n.text:0000000000404cbe\n.text:0000000000404cc0\n.text:0000000000404cc3\n.text:0000000000404cc9\n.text:0000000000404cce\n.text:0000000000404cd3\n.text:0000000000404cd8\n.text:0000000000404cda\n.text:0000000000404cdd\n.text:0000000000404ce0\n.text:0000000000404ce4\n.text:0000000000404ceb\n.text:0000000000404cf0\n.text:0000000000404cf2\n.text:0000000000404cf5\n.text:0000000000404cf8\n.text:0000000000404cfc\n.text:0000000000404d03\n.text:0000000000404d0b\n.text:0000000000404d0d\n.text:0000000000404d10\n.text:0000000000404d13\n.text:0000000000404d1a\n.text:0000000000404d21\n.text:0000000000404d23\n.text:0000000000404d25\n.text:0000000000404d29\n.text:0000000000404d2b\n.text:0000000000404d2e\n.text:0000000000404d32\n.text:0000000000404d37\n.text:0000000000404d3a\n.text:0000000000404d3d\n.text:0000000000404d42\n.text:0000000000404d44\n.text:0000000000404d49\n.text:0000000000404d4c\n.text:0000000000404d51\n.text:0000000000404d54\n.text:0000000000404d59\n.text:0000000000404d5e\n.text:0000000000404d63\n.text:0000000000404d68\n.text:0000000000404d6c\n.text:0000000000404d71\n.text:0000000000404d73\n.text:0000000000404d75\n.text:0000000000404d79\n.text:0000000000404d7b\n.text:0000000000404d80\n.text:0000000000404d82\n.text:0000000000404d84\n.text:0000000000404d86\n.text:0000000000404d88\n.text:0000000000404d8a\n.text:0000000000404d8d\n.text:0000000000404d8f\n.text:0000000000404d91\n.text:0000000000404d93\n.text:0000000000404d95\n.text:0000000000404d97\n.text:0000000000404d99\n.text:0000000000404d9b\n.text:0000000000404d9d\n.text:0000000000404d9f\n.text:0000000000404da1\n.text:0000000000404da5\n.text:0000000000404da8\n.text:0000000000404dac\n.text:0000000000404dae\n.text:0000000000404db3\n.text:0000000000404db6\n.text:0000000000404dbb\n.text:0000000000404dbd\n.text:0000000000404dc2\n.text:0000000000404dc5\n.text:0000000000404dca\n.text:0000000000404dcd\n.text:0000000000404dd2\n.text:0000000000404dd6\n.text:0000000000404dda\n.text:0000000000404dde\n.text:0000000000404de3\n.text:0000000000404de6\n.text:0000000000404de9\n.text:0000000000404dee\n.text:0000000000404df0\n.text:0000000000404df4\n.text:0000000000404df6\n.text:0000000000404df9\n.text:0000000000404dfe\n.text:0000000000404e00\n.text:0000000000404e06\n.text:0000000000404e08\n.text:0000000000404e0e\n.text:0000000000404e10\n.text:0000000000404e14\n.text:0000000000404e18\n.text:0000000000404e1a\n.text:0000000000404e1d\n.text:0000000000404e1f\n.text:0000000000404e24\n.text:0000000000404e28\n.text:0000000000404e2a\n.text:0000000000404e2d\n.text:0000000000404e30\n.text:0000000000404e35\n.text:0000000000404e37\n.text:0000000000404e3a\n.text:0000000000404e3f\n.text:0000000000404e42\n.text:0000000000404e47\n.text:0000000000404e4a\n.text:0000000000404e4d\n.text:0000000000404e50\n.text:0000000000404e53\n.text:0000000000404e56\n.text:0000000000404e5b\n.text:0000000000404e5e\n.text:0000000000404e61\n.text:0000000000404e66\n.text:0000000000404e6a\n.text:0000000000404e70\n.text:0000000000404e75\n.text:0000000000404e7a\n.text:0000000000404e7f\n.text:0000000000404e81\n.text:0000000000404e90\n.text:0000000000404e92\n.text:0000000000404e95\n.text:0000000000404e98\n.text:0000000000404e9b\n.text:0000000000404e9e\n.text:0000000000404ea0\n.text:0000000000404ea2\n.text:0000000000404ea4\n.text:0000000000404ea7\n.text:0000000000404ea9\n.text:0000000000404eab\n.text:0000000000404eae\n.text:0000000000404eb0\n.text:0000000000404eb2\n.text:0000000000404eb5\n.text:0000000000404eb7\n.text:0000000000404eb9\n.text:0000000000404ebc\n.text:0000000000404ebf\n.text:0000000000404ec1\n.text:0000000000404ec3\n.text:0000000000404ec6\n.text:0000000000404ec8\n.text:0000000000404ecb\n.text:0000000000404ecd\n.text:0000000000404ecf\n.text:0000000000404ed2\n.text:0000000000404ed4\n.text:0000000000404ed8\n.text:0000000000404edc\n.text:0000000000404ede\n.text:0000000000404ee1\n.text:0000000000404ee3\n.text:0000000000404ee5\n.text:0000000000404ee8\n.text:0000000000404eea\n.text:0000000000404eed\n.text:0000000000404eef\n.text:0000000000404ef1\n.text:0000000000404ef6\n.text:0000000000404ef8\n.text:0000000000404efa\n.text:0000000000404efc\n.text:0000000000404efe\n.text:0000000000404f00\n.text:0000000000404f02\n.text:0000000000404f04\n.text:0000000000404f07\n.text:0000000000404f09\n.text:0000000000404f0c\n.text:0000000000404f0e\n.text:0000000000404f12\n.text:0000000000404f14\n.text:0000000000404f16\n.text:0000000000404f1a\n.text:0000000000404f1c\n.text:0000000000404f1e\n.text:0000000000404f20\n.text:0000000000404f25\n.text:0000000000404f27\n.text:0000000000404f2a\n.text:0000000000404f2f\n.text:0000000000404f36\n.text:0000000000404f3c\n.text:0000000000404f41\n.text:0000000000404f44\n.text:0000000000404f47\n.text:0000000000404f4c\n.text:0000000000404f51\n.text:0000000000404f56\n.text:0000000000404f58\n.text:0000000000404f5a\n.text:0000000000404f60\n.text:0000000000404f65\n.text:0000000000404f67\n.text:0000000000404f6a\n.text:0000000000404f6c\n.text:0000000000404f6e\n.text:0000000000404f70\n.text:0000000000404f72\n.text:0000000000404f75\n.text:0000000000404f78\n.text:0000000000404f7b\n.text:0000000000404f7d\n.text:0000000000404f80\n.text:0000000000404f84\n.text:0000000000404f86\n.text:0000000000404f89\n.text:0000000000404f8b\n.text:0000000000404f8d\n.text:0000000000404f8f\n.text:0000000000404f91\n.text:0000000000404f94\n.text:0000000000404f97\n.text:0000000000404f99\n.text:0000000000404f9c\n.text:0000000000404f9e\n.text:0000000000404fa2\n.text:0000000000404fa5\n.text:0000000000404fa7\n.text:0000000000404fa9\n.text:0000000000404fad\n.text:0000000000404faf\n.text:0000000000404fb4\n.text:0000000000404fb7\n.text:0000000000404fbc\n.text:0000000000404fbf\n.text:0000000000404fc2\n.text:0000000000404fc7\n.text:0000000000404fcc\n.text:0000000000404fd1\n.text:0000000000404fd7\n.text:0000000000404fdc\n.text:0000000000404fe6\n.text:0000000000404fe9\n.text:0000000000404ff0\n.text:0000000000404ff3\n.text:0000000000404ff6\n.text:0000000000404ff8\n.text:0000000000404ffb\n.text:0000000000405000\n.text:0000000000405003\n.text:0000000000405006\n.text:0000000000405008\n.text:000000000040500c\n.text:0000000000405010\n.text:0000000000405013\n.text:0000000000405017\n.text:000000000040501b\n.text:000000000040501e\n.text:0000000000405020\n.text:0000000000405025\n.text:0000000000405029\n.text:000000000040502b\n.text:000000000040502e\n.text:0000000000405031\n.text:0000000000405034\n.text:0000000000405039\n.text:000000000040503e\n.text:0000000000405043\n.text:0000000000405048\n.text:000000000040504b\n.text:0000000000405050\n.text:0000000000405054\n.text:0000000000405057\n.text:000000000040505d\n.text:000000000040505f\n.text:0000000000405061\n.text:0000000000405063\n.text:0000000000405067\n.text:0000000000405069\n.text:000000000040506b\n.text:000000000040506d\n.text:0000000000405072\n.text:0000000000405080\n.text:0000000000405083\n.text:0000000000405085\n.text:0000000000405087\n.text:000000000040508b\n.text:000000000040508e\n.text:0000000000405090\n.text:0000000000405092\n.text:0000000000405097\n.text:000000000040509a\n.text:000000000040509f\n.text:00000000004050a3\n.text:00000000004050a5\n.text:00000000004050a7\n.text:00000000004050a9\n.text:00000000004050ab\n.text:00000000004050b4\n.text:00000000004050bb\n.text:00000000004050be\n.text:00000000004050c0\n.text:00000000004050c2\n.text:00000000004050c7\n.text:00000000004050c9\n.text:00000000004050cb\n.text:00000000004050ce\n.text:00000000004050d0\n.text:00000000004050d3\n.text:00000000004050d9\n.text:00000000004050dd\n.text:00000000004050e0\n.text:00000000004050e2\n.text:00000000004050e4\n.text:00000000004050e9\n.text:00000000004050eb\n.text:00000000004050ed\n.text:00000000004050ef\n.text:00000000004050f4\n.text:00000000004050f7\n.text:00000000004050fc\n.text:00000000004050ff\n.text:0000000000405104\n.text:0000000000405107\n.text:000000000040510e\n.text:000000000040510f\n.text:0000000000405111\n.text:0000000000405113\n.text:0000000000405115\n.text:0000000000405117\n.text:0000000000405118\n'
p307
tp308
sS'mbslen'
p309
(S'\n__stdcall mbslen(char * string)\n'
p310
V\u000asize_t mbslen(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  mbuiter_multi local_50;\u000a  \u000a  sVar1 = __ctype_get_mb_cur_max();\u000a  if (1 < sVar1) {\u000a    local_50.in_shift = false;\u000a    local_50.state = 0;\u000a    local_50.next_done = false;\u000a    local_50.cur.ptr = string;\u000a    mbuiter_multi_next(&local_50);\u000a    if ((local_50.cur.wc_valid == false) || (local_50.cur.wc != 0)) {\u000a      sVar2 = 0;\u000a      do {\u000a        do {\u000a          sVar2 = sVar2 + 1;\u000a          local_50.cur.ptr = local_50.cur.ptr + local_50.cur.bytes;\u000a          local_50.next_done = false;\u000a          mbuiter_multi_next(&local_50);\u000a        } while (local_50.cur.wc_valid == false);\u000a      } while (local_50.cur.wc != 0);\u000a    }\u000a    else {\u000a      sVar2 = 0;\u000a    }\u000a    return sVar2;\u000a  }\u000a  sVar1 = strlen(string);\u000a  return sVar1;\u000a}\u000a\u000a
p311
S'PUSH R14\nPUSH RBX\nSUB RSP,0x48\nMOV RBX,RDI\nCALL 0x00401c40\nCMP RAX,0x2\nJC 0x0040611a\nMOV qword ptr [RSP + 0x18],RBX\nMOV byte ptr [RSP + 0x8],0x0\nMOV qword ptr [RSP + 0xc],0x0\nMOV byte ptr [RSP + 0x14],0x0\nLEA RDI,[RSP + 0x8]\nCALL 0x00406bb0\nCMP byte ptr [RSP + 0x28],0x0\nJZ 0x00406129\nMOV EAX,dword ptr [RSP + 0x2c]\nTEST EAX,EAX\nJNZ 0x00406129\nXOR EBX,EBX\nJMP 0x00406159\nMOV RDI,RBX\nADD RSP,0x48\nPOP RBX\nPOP R14\nJMP 0x00401c50\nXOR EBX,EBX\nLEA R14,[RSP + 0x8]\nINC RBX\nMOV RAX,qword ptr [RSP + 0x20]\nADD qword ptr [RSP + 0x18],RAX\nMOV byte ptr [RSP + 0x14],0x0\nMOV RDI,R14\nCALL 0x00406bb0\nMOV EAX,dword ptr [RSP + 0x2c]\nCMP byte ptr [RSP + 0x28],0x0\nJZ 0x00406130\nTEST EAX,EAX\nJNZ 0x00406130\nMOV RAX,RBX\nADD RSP,0x48\nPOP RBX\nPOP R14\nRET\n'
p312
S'41 56\n53\n48 83 ec 48\n48 89 fb\ne8 61 bb ff ff\n48 83 f8 02\n72 35\n48 89 5c 24 18\nc6 44 24 08 00\n48 c7 44 24 0c 00 00 00 00\nc6 44 24 14 00\n48 8d 7c 24 08\ne8 a9 0a 00 00\n80 7c 24 28 00\n74 1b\n8b 44 24 2c\n85 c0\n75 13\n31 db\neb 3f\n48 89 df\n48 83 c4 48\n5b\n41 5e\ne9 27 bb ff ff\n31 db\n4c 8d 74 24 08\n48 ff c3\n48 8b 44 24 20\n48 01 44 24 18\nc6 44 24 14 00\n4c 89 f7\ne8 66 0a 00 00\n8b 44 24 2c\n80 7c 24 28 00\n74 db\n85 c0\n75 d7\n48 89 d8\n48 83 c4 48\n5b\n41 5e\nc3\n'
p313
S'.text:00000000004060d0\n.text:00000000004060d2\n.text:00000000004060d3\n.text:00000000004060d7\n.text:00000000004060da\n.text:00000000004060df\n.text:00000000004060e3\n.text:00000000004060e5\n.text:00000000004060ea\n.text:00000000004060ef\n.text:00000000004060f8\n.text:00000000004060fd\n.text:0000000000406102\n.text:0000000000406107\n.text:000000000040610c\n.text:000000000040610e\n.text:0000000000406112\n.text:0000000000406114\n.text:0000000000406116\n.text:0000000000406118\n.text:000000000040611a\n.text:000000000040611d\n.text:0000000000406121\n.text:0000000000406122\n.text:0000000000406124\n.text:0000000000406129\n.text:000000000040612b\n.text:0000000000406130\n.text:0000000000406133\n.text:0000000000406138\n.text:000000000040613d\n.text:0000000000406142\n.text:0000000000406145\n.text:000000000040614a\n.text:000000000040614e\n.text:0000000000406153\n.text:0000000000406155\n.text:0000000000406157\n.text:0000000000406159\n.text:000000000040615c\n.text:0000000000406160\n.text:0000000000406161\n.text:0000000000406163\n'
p314
tp315
sS'quotearg_free'
p316
(S'\n__stdcall quotearg_free()\n'
p317
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p318
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x0060f3f8]\nCMP dword ptr [0x0060f400],0x2\nJC 0x00407cda\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00401b00\nINC RBX\nMOV EAX,dword ptr [0x0060f400]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00407cc0\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x60f5a0\nCMP RDI,RAX\nJZ 0x00407d03\nCALL 0x00401b00\nMOV qword ptr [0x0060f408],0x100\nMOV qword ptr [0x0060f410],0x60f5a0\nMOV EAX,0x60f408\nCMP R14,RAX\nJZ 0x00407d20\nMOV RDI,R14\nCALL 0x00401b00\nMOV qword ptr [0x0060f3f8],0x60f408\nMOV dword ptr [0x0060f400],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p319
S'41 57\n41 56\n53\n4c 8b 35 4c 77 20 00\n83 3d 4d 77 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 38 9e ff ff\n48 ff c3\n8b 05 2f 77 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 a0 f5 60 00\n48 39 c7\n74 1b\ne8 13 9e ff ff\n48 c7 05 10 77 20 00 00 01 00 00\n48 c7 05 0d 77 20 00 a0 f5 60 00\nb8 08 f4 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 eb 9d ff ff\n48 c7 05 d8 76 20 00 08 f4 60 00\nc7 05 d6 76 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p320
S'.text:0000000000407ca0\n.text:0000000000407ca2\n.text:0000000000407ca4\n.text:0000000000407ca5\n.text:0000000000407cac\n.text:0000000000407cb3\n.text:0000000000407cb5\n.text:0000000000407cb9\n.text:0000000000407cbe\n.text:0000000000407cc0\n.text:0000000000407cc3\n.text:0000000000407cc8\n.text:0000000000407ccb\n.text:0000000000407cd1\n.text:0000000000407cd5\n.text:0000000000407cd8\n.text:0000000000407cda\n.text:0000000000407cde\n.text:0000000000407ce3\n.text:0000000000407ce6\n.text:0000000000407ce8\n.text:0000000000407ced\n.text:0000000000407cf8\n.text:0000000000407d03\n.text:0000000000407d08\n.text:0000000000407d0b\n.text:0000000000407d0d\n.text:0000000000407d10\n.text:0000000000407d15\n.text:0000000000407d20\n.text:0000000000407d2a\n.text:0000000000407d2b\n.text:0000000000407d2d\n.text:0000000000407d2f\n'
p321
tp322
sS'quotearg_mem'
p323
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p324
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p325
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00407f00\n'
p326
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p327
S'.text:0000000000407f20\n.text:0000000000407f23\n.text:0000000000407f26\n.text:0000000000407f28\n.text:0000000000407f2b\n.text:0000000000407f2e\n'
p328
tp329
sS'deregister_tm_clones'
p330
(S'\n__stdcall deregister_tm_clones()\n'
p331
V\u000a/* WARNING: Removing unreachable block (ram,0x00402105) */\u000a/* WARNING: Removing unreachable block (ram,0x0040210f) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p332
S'MOV EAX,0x60f45f\nPUSH RBP\nSUB RAX,0x60f458\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00402120\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00402120\nPOP RBP\nMOV EDI,0x60f458\nJMP RAX\nPOP RBP\nRET\n'
p333
S'b8 5f f4 60 00\n55\n48 2d 58 f4 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 58 f4 60 00\nff e0\n5d\nc3\n'
p334
S'.text:00000000004020f0\n.text:00000000004020f5\n.text:00000000004020f6\n.text:00000000004020fc\n.text:0000000000402100\n.text:0000000000402103\n.text:0000000000402105\n.text:000000000040210a\n.text:000000000040210d\n.text:000000000040210f\n.text:0000000000402110\n.text:0000000000402115\n.text:0000000000402120\n.text:0000000000402121\n'
p335
tp336
sS'adjust_value'
p337
(S'\n__stdcall adjust_value()\n'
p338
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000alongdouble adjust_value(void)\u000a\u000a{\u000a  longdouble in_XMM0;\u000a  \u000a  return in_XMM0;\u000a}\u000a\u000a
p339
S'FLD tword ptr [RSP + 0x8]\nCMP EDI,0x1\nJZ 0x004051ec\nFLD tword ptr [0x0040b920]\nFUCOMIP ST0,ST1\nJBE 0x004051ec\nFLD dword ptr [0x0040b91c]\nFLD ST1\nFSUB ST0,ST1\nFNSTCW word ptr [RSP + -0x22]\nMOVZX EAX,word ptr [RSP + -0x22]\nMOV word ptr [RSP + -0x22],0xc7f\nFLDCW word ptr [RSP + -0x22]\nMOV word ptr [RSP + -0x22],AX\nFISTP qword ptr [RSP + -0x18]\nFLDCW word ptr [RSP + -0x22]\nFNSTCW word ptr [RSP + -0x24]\nMOVZX EAX,word ptr [RSP + -0x24]\nMOV word ptr [RSP + -0x24],0xc7f\nFLDCW word ptr [RSP + -0x24]\nMOV word ptr [RSP + -0x24],AX\nFLD ST1\nFISTP qword ptr [RSP + -0x20]\nFLDCW word ptr [RSP + -0x24]\nMOV RAX,-0x8000000000000000\nXOR RAX,qword ptr [RSP + -0x18]\nFXCH\nFUCOMI ST0,ST1\nFSTP ST1\nCMOVC RAX,qword ptr [RSP + -0x20]\nTEST EDI,EDI\nSETZ SIL\nMOV qword ptr [RSP + -0x10],RAX\nXOR EDX,EDX\nTEST RAX,RAX\nSETNS DL\nFILD qword ptr [RSP + -0x10]\nFADD dword ptr [0x40b910 + RDX*0x4]\nFUCOMIP ST0,ST1\nFSTP ST0\nSETP DL\nSETNZ CL\nOR CL,DL\nAND CL,SIL\nMOVZX ECX,CL\nXOR EDX,EDX\nADD RCX,RAX\nMOV qword ptr [RSP + -0x8],RCX\nSETNS DL\nFILD qword ptr [RSP + -0x8]\nFADD dword ptr [0x40b910 + RDX*0x4]\nRET\n'
p340
S'db 6c 24 08\n83 ff 01\n0f 84 bf 00 00 00\ndb 2d ed 67 00 00\ndf e9\n0f 86 b1 00 00 00\nd9 05 db 67 00 00\nd9 c1\nd8 e1\nd9 7c 24 de\n0f b7 44 24 de\n66 c7 44 24 de 7f 0c\nd9 6c 24 de\n66 89 44 24 de\ndf 7c 24 e8\nd9 6c 24 de\nd9 7c 24 dc\n0f b7 44 24 dc\n66 c7 44 24 dc 7f 0c\nd9 6c 24 dc\n66 89 44 24 dc\nd9 c1\ndf 7c 24 e0\nd9 6c 24 dc\n48 b8 00 00 00 00 00 00 00 80\n48 33 44 24 e8\nd9 c9\ndb e9\ndd d9\n48 0f 42 44 24 e0\n85 ff\n40 0f 94 c6\n48 89 44 24 f0\n31 d2\n48 85 c0\n0f 99 c2\ndf 6c 24 f0\nd8 04 95 10 b9 40 00\ndf e9\ndd d8\n0f 9a c2\n0f 95 c1\n08 d1\n40 20 f1\n0f b6 c9\n31 d2\n48 01 c1\n48 89 4c 24 f8\n0f 99 c2\ndf 6c 24 f8\nd8 04 95 10 b9 40 00\nc3\n'
p341
S'.text:0000000000405120\n.text:0000000000405124\n.text:0000000000405127\n.text:000000000040512d\n.text:0000000000405133\n.text:0000000000405135\n.text:000000000040513b\n.text:0000000000405141\n.text:0000000000405143\n.text:0000000000405145\n.text:0000000000405149\n.text:000000000040514e\n.text:0000000000405155\n.text:0000000000405159\n.text:000000000040515e\n.text:0000000000405162\n.text:0000000000405166\n.text:000000000040516a\n.text:000000000040516f\n.text:0000000000405176\n.text:000000000040517a\n.text:000000000040517f\n.text:0000000000405181\n.text:0000000000405185\n.text:0000000000405189\n.text:0000000000405193\n.text:0000000000405198\n.text:000000000040519a\n.text:000000000040519c\n.text:000000000040519e\n.text:00000000004051a4\n.text:00000000004051a6\n.text:00000000004051aa\n.text:00000000004051af\n.text:00000000004051b1\n.text:00000000004051b4\n.text:00000000004051b7\n.text:00000000004051bb\n.text:00000000004051c2\n.text:00000000004051c4\n.text:00000000004051c6\n.text:00000000004051c9\n.text:00000000004051cc\n.text:00000000004051ce\n.text:00000000004051d1\n.text:00000000004051d4\n.text:00000000004051d6\n.text:00000000004051d9\n.text:00000000004051de\n.text:00000000004051e1\n.text:00000000004051e5\n.text:00000000004051ec\n'
p342
tp343
sS'quotearg_custom'
p344
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p345
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p346
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00408140\n'
p347
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p348
S'.text:00000000004081c0\n.text:00000000004081c3\n.text:00000000004081c6\n.text:00000000004081c9\n.text:00000000004081cb\n.text:00000000004081ce\n.text:00000000004081d1\n.text:00000000004081d4\n'
p349
tp350
sS'free'
p351
(S'\n__stdcall free(void * __ptr)\n'
p352
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_0060f020)();\u000a  return;\u000a}\u000a\u000a
p353
S'JMP qword ptr [0x0060f020]\n'
p354
S'ff 25 1a d5 20 00\n'
p355
S'.plt:0000000000401b00\n'
p356
tp357
sS'close'
p358
(S'\n__stdcall close(int __fd)\n'
p359
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_0060f160)();\u000a  return iVar1;\u000a}\u000a\u000a
p360
S'JMP qword ptr [0x0060f160]\n'
p361
S'ff 25 da d3 20 00\n'
p362
S'.plt:0000000000401d80\n'
p363
tp364
sS'display_findutils_version'
p365
(S'\n__stdcall display_findutils_version(char * official_name)\n'
p366
V\u000avoid display_findutils_version(char *official_name)\u000a\u000a{\u000a  char *version;\u000a  FILE *stream;\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  undefined8 uVar3;\u000a  \u000a  rpl_fflush(stderr);\u000a  stream = stdout;\u000a  version = version_string;\u000a  uVar1 = dcgettext(0,"Eric B. Decker",5);\u000a  uVar2 = dcgettext(0,"James Youngman",5);\u000a  uVar3 = dcgettext(0,"Kevin Dalley",5);\u000a  version_etc(stream,official_name,"GNU findutils",version,uVar1,uVar2,uVar3,0);\u000a  return;\u000a}\u000a\u000a
p367
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV RDI,qword ptr [0x0060f4a0]\nCALL 0x004092e0\nMOV R12,qword ptr [0x0060f468]\nMOV R15,qword ptr [0x0060f318]\nXOR EDI,EDI\nMOV ESI,0x40b3ef\nMOV EDX,0x5\nCALL 0x00401c30\nMOV R13,RAX\nXOR EDI,EDI\nMOV ESI,0x40b3fe\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RBP,RAX\nXOR EDI,EDI\nMOV ESI,0x40b40d\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RBX,RAX\nMOV EDX,0x40b3e1\nMOV EAX,0x0\nMOV RDI,R12\nMOV RSI,R14\nMOV RCX,R15\nMOV R8,R13\nMOV R9,RBP\nPUSH 0x0\nPUSH RBX\nCALL 0x00408ab0\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p368
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 fe\n48 8b 3d 8b b0 20 00\ne8 c6 4e 00 00\n4c 8b 25 47 b0 20 00\n4c 8b 3d f0 ae 20 00\n31 ff\nbe ef b3 40 00\nba 05 00 00 00\ne8 f7 d7 ff ff\n49 89 c5\n31 ff\nbe fe b3 40 00\nba 05 00 00 00\ne8 e3 d7 ff ff\n48 89 c5\n31 ff\nbe 0d b4 40 00\nba 05 00 00 00\ne8 cf d7 ff ff\n48 89 c3\nba e1 b3 40 00\nb8 00 00 00 00\n4c 89 e7\n4c 89 f6\n4c 89 f9\n4d 89 e8\n49 89 e9\n6a 00\n53\ne8 2b 46 00 00\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p369
S'.text:0000000000404400\n.text:0000000000404401\n.text:0000000000404403\n.text:0000000000404405\n.text:0000000000404407\n.text:0000000000404409\n.text:000000000040440a\n.text:000000000040440b\n.text:000000000040440e\n.text:0000000000404415\n.text:000000000040441a\n.text:0000000000404421\n.text:0000000000404428\n.text:000000000040442a\n.text:000000000040442f\n.text:0000000000404434\n.text:0000000000404439\n.text:000000000040443c\n.text:000000000040443e\n.text:0000000000404443\n.text:0000000000404448\n.text:000000000040444d\n.text:0000000000404450\n.text:0000000000404452\n.text:0000000000404457\n.text:000000000040445c\n.text:0000000000404461\n.text:0000000000404464\n.text:0000000000404469\n.text:000000000040446e\n.text:0000000000404471\n.text:0000000000404474\n.text:0000000000404477\n.text:000000000040447a\n.text:000000000040447d\n.text:000000000040447f\n.text:0000000000404480\n.text:0000000000404485\n.text:0000000000404489\n.text:000000000040448a\n.text:000000000040448c\n.text:000000000040448e\n.text:0000000000404490\n.text:0000000000404492\n.text:0000000000404493\n'
p370
tp371
sS'getenv'
p372
(S'\n__stdcall getenv(char * __name)\n'
p373
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_0060f018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p374
S'JMP qword ptr [0x0060f018]\n'
p375
S'ff 25 22 d5 20 00\n'
p376
S'.plt:0000000000401af0\n'
p377
tp378
sS'stat'
p379
(S'\n__stdcall stat(char * __file, stat * __buf)\n'
p380
V\u000aint stat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___xstat_0060f1d0)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p381
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x00401e60\n'
p382
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 90 7f ff ff\n'
p383
S'.text:0000000000409ec0\n.text:0000000000409ec3\n.text:0000000000409ec6\n.text:0000000000409ecb\n'
p384
tp385
sS'fnmatch'
p386
(S'\n__stdcall fnmatch(char * __pattern, char * __name, int __flags)\n'
p387
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fnmatch(char *__pattern,char *__name,int __flags)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fnmatch_0060f130)();\u000a  return iVar1;\u000a}\u000a\u000a
p388
S'JMP qword ptr [0x0060f130]\n'
p389
S'ff 25 0a d4 20 00\n'
p390
S'.plt:0000000000401d20\n'
p391
tp392
sS'rpl_fseeko'
p393
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p394
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_0060f270)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p395
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00409358\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00409358\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x0040936a\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401fa0\nMOV RDI,RBX\nCALL 0x00401e40\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00401cf0\nCMP RAX,-0x1\nJZ 0x00409393\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x00409398\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p396
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 36 8c ff ff\n48 89 df\ne8 ce 8a ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 71 89 ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p397
S'.text:0000000000409330\n.text:0000000000409331\n.text:0000000000409333\n.text:0000000000409334\n.text:0000000000409337\n.text:000000000040933a\n.text:000000000040933d\n.text:0000000000409341\n.text:0000000000409345\n.text:0000000000409347\n.text:000000000040934b\n.text:000000000040934f\n.text:0000000000409351\n.text:0000000000409356\n.text:0000000000409358\n.text:000000000040935b\n.text:000000000040935e\n.text:0000000000409361\n.text:0000000000409362\n.text:0000000000409364\n.text:0000000000409365\n.text:000000000040936a\n.text:000000000040936d\n.text:0000000000409372\n.text:0000000000409374\n.text:0000000000409377\n.text:000000000040937a\n.text:000000000040937f\n.text:0000000000409383\n.text:0000000000409385\n.text:0000000000409388\n.text:000000000040938f\n.text:0000000000409391\n.text:0000000000409393\n.text:0000000000409398\n.text:0000000000409399\n.text:000000000040939b\n.text:000000000040939c\n'
p398
tp399
sS'quote_n_mem'
p400
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p401
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p402
S'MOV ECX,0x60f418\nJMP 0x00407d40\n'
p403
S'b9 18 f4 60 00\ne9 36 fb ff ff\n'
p404
S'.text:0000000000408200\n.text:0000000000408205\n'
p405
tp406
sS'xstrdup'
p407
(S'\n__stdcall xstrdup(char * string)\n'
p408
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p409
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401c50\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00408d10\n'
p410
S'53\n48 89 fb\ne8 07 8f ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p411
S'.text:0000000000408d40\n.text:0000000000408d41\n.text:0000000000408d44\n.text:0000000000408d49\n.text:0000000000408d4d\n.text:0000000000408d50\n.text:0000000000408d51\n'
p412
tp413
sS'c_ispunct'
p414
(S'\n__stdcall c_ispunct()\n'
p415
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p416
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00409822\nMOV AL,0x1\nJMP qword ptr [0x40c630 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p417
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 30 c6 40 00\nc3\n31 c0\nc3\n'
p418
S'.text:0000000000409810\n.text:0000000000409813\n.text:0000000000409816\n.text:0000000000409818\n.text:000000000040981a\n.text:0000000000409821\n.text:0000000000409822\n.text:0000000000409824\n'
p419
tp420
sS'mbsstr'
p421
(S'\n__stdcall mbsstr(char * haystack, char * needle)\n'
p422
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000achar * mbsstr(char *haystack,char *needle)\u000a\u000a{\u000a  uchar *puVar1;\u000a  uchar *puVar2;\u000a  uchar uVar3;\u000a  _Bool _Var4;\u000a  int iVar5;\u000a  size_t needle_len;\u000a  ulong uVar6;\u000a  ulong uVar7;\u000a  char *__string;\u000a  bool bVar8;\u000a  ulong uVar9;\u000a  long lVar10;\u000a  ulong uVar11;\u000a  char *result;\u000a  mbui_iterator_t iter_needle;\u000a  mbuiter_multi local_178;\u000a  uint local_138;\u000a  undefined8 local_134;\u000a  uint local_12c;\u000a  char *local_128;\u000a  undefined4 local_120;\u000a  undefined4 uStack284;\u000a  undefined4 local_118;\u000a  int local_114;\u000a  undefined4 uStack272;\u000a  undefined4 uStack268;\u000a  undefined4 local_108;\u000a  undefined4 uStack260;\u000a  undefined4 uStack256;\u000a  undefined4 uStack252;\u000a  uint local_f8;\u000a  int iStack244;\u000a  undefined4 uStack240;\u000a  uint local_ec;\u000a  char *local_e8;\u000a  undefined4 local_e0;\u000a  undefined4 uStack220;\u000a  undefined4 local_d8;\u000a  int local_d4;\u000a  undefined4 uStack208;\u000a  undefined4 uStack204;\u000a  undefined4 local_c8;\u000a  undefined4 uStack196;\u000a  undefined4 uStack192;\u000a  undefined4 uStack188;\u000a  char *local_b8;\u000a  uint local_b0;\u000a  int iStack172;\u000a  undefined4 uStack168;\u000a  _Bool local_a4;\u000a  char *local_a0;\u000a  size_t local_98;\u000a  _Bool local_90;\u000a  int local_8c;\u000a  mbuiter_multi local_70;\u000a  \u000a  needle_len = __ctype_get_mb_cur_max();\u000a  if (needle_len < 2) {\u000a    uVar3 = *needle;\u000a    if (uVar3 != 0) {\u000a      if (*haystack != 0) {\u000a        bVar8 = true;\u000a        uVar9 = 0;\u000a        uVar7 = 0;\u000a        uVar6 = 0;\u000a        __string = needle;\u000a        do {\u000a          if ((((9 < uVar6) && (bVar8)) && (uVar6 * 5 <= uVar7)) &&\u000a             (((__string == (char *)0x0 ||\u000a               (local_b8 = __string, needle_len = strnlen(__string,uVar7 - uVar9), uVar9 = uVar7,\u000a               local_b8[needle_len] == 0)) ||\u000a              (__string = local_b8 + needle_len, uVar9 = uVar7, __string == (char *)0x0)))) {\u000a            needle_len = strlen(needle);\u000a            _Var4 = knuth_morris_pratt((uchar *)haystack,(uchar *)needle,needle_len,\u000a                                       (uchar **)&local_b0);\u000a            if (_Var4 != false) {\u000a              return (char *)CONCAT44(iStack172,local_b0);\u000a            }\u000a            bVar8 = false;\u000a            __string = (char *)0x0;\u000a          }\u000a          if (*haystack == uVar3) {\u000a            lVar10 = 1;\u000a            do {\u000a              puVar1 = (uchar *)(needle + lVar10);\u000a              if (*puVar1 == 0) {\u000a                return (char *)(uchar *)haystack;\u000a              }\u000a              puVar2 = (uchar *)haystack + lVar10;\u000a              if (*puVar2 == 0) {\u000a                return (char *)0x0;\u000a              }\u000a              lVar10 = lVar10 + 1;\u000a            } while (*puVar2 == *puVar1);\u000a            uVar7 = uVar7 + lVar10;\u000a          }\u000a          else {\u000a            uVar7 = uVar7 + 1;\u000a          }\u000a          uVar6 = uVar6 + 1;\u000a          puVar1 = (uchar *)haystack + 1;\u000a          haystack = (char *)((uchar *)haystack + 1);\u000a          if (*puVar1 == 0) {\u000a            return (char *)0x0;\u000a          }\u000a        } while( true );\u000a      }\u000a      haystack = (char *)0x0;\u000a    }\u000a  }\u000a  else {\u000a    local_b0 = local_b0 & 0xffffff00;\u000a    iStack172 = 0;\u000a    uStack168 = 0;\u000a    local_a4 = false;\u000a    local_a0 = needle;\u000a    mbuiter_multi_next((mbuiter_multi *)&local_b0);\u000a    if ((local_90 == false) || (local_8c != 0)) {\u000a      local_70.in_shift = false;\u000a      local_70.state = 0;\u000a      local_70.next_done = false;\u000a      local_138 = local_138 & 0xffffff00;\u000a      local_134 = 0;\u000a      local_12c = local_12c & 0xffffff00;\u000a      local_128 = haystack;\u000a      local_70.cur.ptr = needle;\u000a      mbuiter_multi_next((mbuiter_multi *)&local_138);\u000a      if ((local_118._0_1_ == false) || (local_114 != 0)) {\u000a        bVar8 = true;\u000a        uVar9 = 0;\u000a        uVar6 = 0;\u000a        uVar7 = 0;\u000a        do {\u000a          if (((9 < uVar6) && (bVar8)) && (uVar6 * 5 <= uVar7)) {\u000a            if (uVar7 != uVar9) {\u000a              lVar10 = uVar9 - uVar7;\u000a              do {\u000a                mbuiter_multi_next(&local_70);\u000a                if ((local_70.cur.wc_valid != false) && (local_70.cur.wc == 0)) break;\u000a                local_70.cur.ptr = local_70.cur.ptr + local_70.cur.bytes;\u000a                local_70.next_done = false;\u000a                lVar10 = lVar10 + 1;\u000a              } while (lVar10 != 0);\u000a            }\u000a            mbuiter_multi_next(&local_70);\u000a            uVar9 = uVar7;\u000a            if ((local_70.cur.wc_valid != false) && (uVar9 = uVar7, local_70.cur.wc == 0)) {\u000a              _Var4 = knuth_morris_pratt_multibyte(haystack,needle,(char **)&local_f8);\u000a              if (_Var4 != false) {\u000a                return (char *)CONCAT44(iStack244,local_f8);\u000a              }\u000a              bVar8 = false;\u000a              uVar9 = uVar7;\u000a            }\u000a          }\u000a          uVar11 = uVar7 + 1;\u000a          if ((local_118._0_1_ == false) || (local_90 == false)) {\u000a            if ((CONCAT44(uStack284,local_120) == local_98) &&\u000a               (iVar5 = memcmp(local_128,local_a0,CONCAT44(uStack284,local_120)), iVar5 == 0))\u000a            goto LAB_0040637d;\u000a          }\u000a          else {\u000a            if (local_114 == local_8c) {\u000aLAB_0040637d:\u000a              local_c8 = local_108;\u000a              uStack196 = uStack260;\u000a              uStack192 = uStack256;\u000a              uStack188 = uStack252;\u000a              local_d8 = local_118;\u000a              local_d4 = local_114;\u000a              uStack208 = uStack272;\u000a              uStack204 = uStack268;\u000a              local_e0 = local_120;\u000a              uStack220 = uStack284;\u000a              local_f8 = local_138;\u000a              iStack244 = (int)local_134;\u000a              uStack240 = local_134._4_4_;\u000a              local_e8 = local_128 + CONCAT44(uStack284,local_120);\u000a              local_ec = local_12c & 0xffffff00;\u000a              local_178.in_shift = false;\u000a              local_178.state = 0;\u000a              local_178.next_done = false;\u000a              local_178.cur.ptr = needle;\u000a              mbuiter_multi_next(&local_178);\u000a              if ((local_178.cur.wc_valid != false) && (local_178.cur.wc == 0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a                abort();\u000a              }\u000a              local_178.cur.ptr = local_178.cur.ptr + local_178.cur.bytes;\u000a              local_178.next_done = false;\u000a              mbuiter_multi_next(&local_178);\u000a              if ((local_178.cur.wc_valid != false) && (local_178.cur.wc == 0)) {\u000a                return local_128;\u000a              }\u000a              uVar11 = uVar7 + 2;\u000a              do {\u000a                mbuiter_multi_next((mbuiter_multi *)&local_f8);\u000a                if ((local_d8._0_1_ != false) && (local_d4 == 0)) goto LAB_00406543;\u000a                if ((local_178.cur.wc_valid == false) || (local_d8._0_1_ == false)) {\u000a                  if ((CONCAT44(uStack220,local_e0) != local_178.cur.bytes) ||\u000a                     (iVar5 = memcmp(local_e8,local_178.cur.ptr,CONCAT44(uStack220,local_e0)),\u000a                     iVar5 != 0)) break;\u000a                }\u000a                else {\u000a                  if (local_d4 != local_178.cur.wc) break;\u000a                }\u000a                local_e8 = local_e8 + CONCAT44(uStack220,local_e0);\u000a                local_ec = local_ec & 0xffffff00;\u000a                local_178.cur.ptr = local_178.cur.ptr + local_178.cur.bytes;\u000a                local_178.next_done = false;\u000a                mbuiter_multi_next(&local_178);\u000a                uVar11 = uVar11 + 1;\u000a                if ((local_178.cur.wc_valid != false) && (local_178.cur.wc == 0)) {\u000a                  return local_128;\u000a                }\u000a              } while( true );\u000a            }\u000a          }\u000a          uVar6 = uVar6 + 1;\u000a          local_128 = local_128 + CONCAT44(uStack284,local_120);\u000a          local_12c = local_12c & 0xffffff00;\u000a          mbuiter_multi_next((mbuiter_multi *)&local_138);\u000a          uVar7 = uVar11;\u000a        } while ((local_118._0_1_ == false) || (uVar7 = uVar11, local_114 != 0));\u000a      }\u000aLAB_00406543:\u000a      haystack = (char *)0x0;\u000a    }\u000a  }\u000a  return haystack;\u000a}\u000a\u000a
p423
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x158\nMOV RBX,RSI\nMOV R14,RDI\nCALL 0x00401c40\nCMP RAX,0x2\nJC 0x0040654b\nMOV qword ptr [0xe8 + RSP],RBX\nMOV byte ptr [0xd8 + RSP],0x0\nMOV qword ptr [0xdc + RSP],0x0\nMOV byte ptr [0xe4 + RSP],0x0\nLEA RDI,[0xd8 + RSP]\nCALL 0x00406bb0\nCMP byte ptr [0xf8 + RSP],0x0\nJZ 0x004061e0\nMOV EAX,dword ptr [0xfc + RSP]\nTEST EAX,EAX\nJZ 0x00406651\nMOV qword ptr [0x128 + RSP],RBX\nMOV byte ptr [0x118 + RSP],0x0\nMOV qword ptr [0x11c + RSP],0x0\nMOV byte ptr [0x124 + RSP],0x0\nMOV qword ptr [RSP + 0x60],R14\nMOV byte ptr [RSP + 0x50],0x0\nMOV qword ptr [RSP + 0x54],0x0\nMOV byte ptr [RSP + 0x5c],0x0\nLEA RDI,[RSP + 0x50]\nCALL 0x00406bb0\nCMP byte ptr [RSP + 0x70],0x0\nJZ 0x00406239\nMOV EAX,dword ptr [RSP + 0x74]\nTEST EAX,EAX\nJZ 0x00406543\nMOV AL,0x1\nMOV dword ptr [RSP + 0xc],EAX\nXOR R12D,R12D\nXOR R15D,R15D\nXOR EBP,EBP\nMOV R13,R15\nCMP RBP,0xa\nJC 0x00406321\nMOV R15,RBX\nMOV RBX,RBP\nMOV EAX,dword ptr [RSP + 0xc]\nAND AL,0x1\nLEA RBP,[0x118 + RSP]\nJZ 0x0040631b\nLEA RAX,[RBX + RBX*0x4]\nCMP R13,RAX\nJC 0x0040631b\nCMP R13,R12\nJZ 0x004062ca\nSUB R12,R13\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,RBP\nCALL 0x00406bb0\nCMP byte ptr [0x138 + RSP],0x0\nJZ 0x004062ad\nMOV EAX,dword ptr [0x13c + RSP]\nTEST EAX,EAX\nJZ 0x004062ca\nMOV RAX,qword ptr [0x130 + RSP]\nADD qword ptr [0x128 + RSP],RAX\nMOV byte ptr [0x124 + RSP],0x0\nINC R12\nJNZ 0x00406290\nMOV RDI,RBP\nCALL 0x00406bb0\nCMP byte ptr [0x138 + RSP],0x0\nJZ 0x00406318\nMOV EAX,dword ptr [0x13c + RSP]\nTEST EAX,EAX\nMOV R12,R13\nMOV RBP,RBX\nMOV RBX,R15\nJNZ 0x00406321\nMOV RDI,R14\nMOV RSI,RBX\nLEA RDX,[0x90 + RSP]\nCALL 0x00406690\nTEST AL,AL\nJNZ 0x00406673\nMOV dword ptr [RSP + 0xc],0x0\nMOV R12,R13\nJMP 0x00406321\nMOV R12,R13\nMOV RBP,RBX\nMOV RBX,R15\nLEA R15,[R13 + 0x1]\nCMP byte ptr [RSP + 0x70],0x0\nJZ 0x00406350\nMOV AL,byte ptr [0xf8 + RSP]\nTEST AL,AL\nJZ 0x00406350\nMOV EAX,dword ptr [RSP + 0x74]\nCMP EAX,dword ptr [0xfc + RSP]\nJZ 0x0040637d\nJMP 0x00406510\nMOV RDX,qword ptr [RSP + 0x68]\nCMP RDX,qword ptr [0xf0 + RSP]\nJNZ 0x00406510\nMOV RDI,qword ptr [RSP + 0x60]\nMOV RSI,qword ptr [0xe8 + RSP]\nCALL 0x00401db0\nTEST EAX,EAX\nJNZ 0x00406510\nMOVUPS XMM0,xmmword ptr [RSP + 0x50]\nMOVUPS XMM1,xmmword ptr [RSP + 0x60]\nMOVUPS XMM2,xmmword ptr [RSP + 0x70]\nMOVUPS XMM3,xmmword ptr [0x80 + RSP]\nMOVAPS xmmword ptr [0xc0 + RSP],XMM3\nMOVAPS xmmword ptr [0xb0 + RSP],XMM2\nMOVAPS xmmword ptr [0xa0 + RSP],XMM1\nMOVAPS xmmword ptr [0x90 + RSP],XMM0\nMOV RAX,qword ptr [0xa8 + RSP]\nADD qword ptr [0xa0 + RSP],RAX\nMOV byte ptr [0x9c + RSP],0x0\nMOV qword ptr [RSP + 0x20],RBX\nMOV byte ptr [RSP + 0x10],0x0\nMOV qword ptr [RSP + 0x14],0x0\nMOV byte ptr [RSP + 0x1c],0x0\nLEA RDI,[RSP + 0x10]\nCALL 0x00406bb0\nCMP byte ptr [RSP + 0x30],0x0\nJZ 0x00406401\nMOV EAX,dword ptr [RSP + 0x34]\nTEST EAX,EAX\nJZ 0x0040667d\nMOV RAX,qword ptr [RSP + 0x28]\nADD qword ptr [RSP + 0x20],RAX\nMOV byte ptr [RSP + 0x1c],0x0\nLEA RDI,[RSP + 0x10]\nCALL 0x00406bb0\nCMP byte ptr [RSP + 0x30],0x0\nJZ 0x0040642d\nMOV EAX,dword ptr [RSP + 0x34]\nTEST EAX,EAX\nJZ 0x0040664c\nADD R13,0x2\nMOV R15,R13\nNOP word ptr CS:[RAX + RAX*0x1]\nLEA RDI,[0x90 + RSP]\nCALL 0x00406bb0\nMOVZX ECX,byte ptr [0xb0 + RSP]\nMOV EAX,dword ptr [0xb4 + RSP]\nTEST CL,CL\nJZ 0x00406468\nTEST EAX,EAX\nJZ 0x00406543\nTEST CL,CL\nSETZ CL\nCMP byte ptr [RSP + 0x30],0x0\nJZ 0x00406490\nTEST CL,CL\nJNZ 0x00406490\nCMP EAX,dword ptr [RSP + 0x34]\nJZ 0x004064b5\nJMP 0x00406510\nMOV RDX,qword ptr [0xa8 + RSP]\nCMP RDX,qword ptr [RSP + 0x28]\nJNZ 0x00406510\nMOV RDI,qword ptr [0xa0 + RSP]\nMOV RSI,qword ptr [RSP + 0x20]\nCALL 0x00401db0\nTEST EAX,EAX\nJNZ 0x00406510\nMOV RAX,qword ptr [0xa8 + RSP]\nADD qword ptr [0xa0 + RSP],RAX\nMOV byte ptr [0x9c + RSP],0x0\nMOV RAX,qword ptr [RSP + 0x28]\nADD qword ptr [RSP + 0x20],RAX\nMOV byte ptr [RSP + 0x1c],0x0\nLEA RDI,[RSP + 0x10]\nCALL 0x00406bb0\nINC R15\nCMP byte ptr [RSP + 0x30],0x0\nJZ 0x00406440\nMOV EAX,dword ptr [RSP + 0x34]\nTEST EAX,EAX\nJNZ 0x00406440\nJMP 0x0040664c\nINC RBP\nMOV RAX,qword ptr [RSP + 0x68]\nADD qword ptr [RSP + 0x60],RAX\nMOV byte ptr [RSP + 0x5c],0x0\nLEA RDI,[RSP + 0x50]\nCALL 0x00406bb0\nCMP byte ptr [RSP + 0x70],0x0\nJZ 0x00406247\nMOV EAX,dword ptr [RSP + 0x74]\nTEST EAX,EAX\nJNZ 0x00406247\nXOR R14D,R14D\nJMP 0x00406651\nMOV R12B,byte ptr [RBX]\nTEST R12B,R12B\nJZ 0x00406651\nCMP byte ptr [R14],0x0\nJZ 0x00406647\nMOV R8B,0x1\nXOR R15D,R15D\nMOV RDI,RBX\nXOR R9D,R9D\nXOR EBP,EBP\nXOR R13D,R13D\nCMP R13,0xa\nJC 0x004065fe\nMOV EAX,R8D\nAND AL,0x1\nJZ 0x004065fe\nLEA RAX,[R13 + R13*0x4]\nCMP RBP,RAX\nJC 0x004065fe\nTEST RDI,RDI\nJZ 0x004065ce\nMOV byte ptr [RSP + 0xc],R12B\nMOV RSI,RBP\nSUB RSI,R9\nMOV R12,R8\nMOV qword ptr [0xd0 + RSP],RDI\nCALL 0x00401d60\nMOV RDI,qword ptr [0xd0 + RSP]\nMOV R8,R12\nMOV R12B,byte ptr [RSP + 0xc]\nCMP byte ptr [RDI + RAX*0x1],0x0\nMOV R9,RBP\nJZ 0x004065ce\nADD RDI,RAX\nMOV R9,RBP\nJNZ 0x004065fe\nMOV R15,R9\nMOV RDI,RBX\nCALL 0x00401c50\nMOV RDI,R14\nMOV RSI,RBX\nMOV RDX,RAX\nLEA RCX,[0xd8 + RSP]\nCALL 0x00406a50\nTEST AL,AL\nJNZ 0x00406669\nXOR R8D,R8D\nXOR EDI,EDI\nMOV R9,R15\nXOR R15D,R15D\nCMP byte ptr [R14],R12B\nJNZ 0x00406630\nMOV EAX,0x1\nNOP dword ptr [RAX + RAX*0x1]\nMOVZX ECX,byte ptr [RBX + RAX*0x1]\nTEST CL,CL\nJZ 0x00406651\nMOVZX EDX,byte ptr [R14 + RAX*0x1]\nTEST DL,DL\nJZ 0x00406654\nINC RAX\nCMP DL,CL\nJZ 0x00406610\nADD RBP,RAX\nJMP 0x00406633\nINC RBP\nINC R13\nCMP byte ptr [R14 + 0x1],0x0\nLEA R14,[R14 + 0x1]\nJNZ 0x00406572\nJMP 0x00406654\nXOR R15D,R15D\nJMP 0x00406654\nMOV R14,qword ptr [RSP + 0x60]\nMOV R15,R14\nMOV RAX,R15\nADD RSP,0x158\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV R15,qword ptr [0xd8 + RSP]\nJMP 0x00406654\nMOV R14,qword ptr [0x90 + RSP]\nJMP 0x00406651\nCALL 0x00401b30\n'
p424
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 58 01 00 00\n48 89 f3\n49 89 fe\ne8 b4 ba ff ff\n48 83 f8 02\n0f 82 b5 03 00 00\n48 89 9c 24 e8 00 00 00\nc6 84 24 d8 00 00 00 00\n48 c7 84 24 dc 00 00 00 00 00 00 00\nc6 84 24 e4 00 00 00 00\n48 8d bc 24 d8 00 00 00\ne8 e9 09 00 00\n80 bc 24 f8 00 00 00 00\n74 0f\n8b 84 24 fc 00 00 00\n85 c0\n0f 84 71 04 00 00\n48 89 9c 24 28 01 00 00\nc6 84 24 18 01 00 00 00\n48 c7 84 24 1c 01 00 00 00 00 00 00\nc6 84 24 24 01 00 00 00\n4c 89 74 24 60\nc6 44 24 50 00\n48 c7 44 24 54 00 00 00 00\nc6 44 24 5c 00\n48 8d 7c 24 50\ne8 8a 09 00 00\n80 7c 24 70 00\n74 0c\n8b 44 24 74\n85 c0\n0f 84 0a 03 00 00\nb0 01\n89 44 24 0c\n45 31 e4\n45 31 ff\n31 ed\n4d 89 fd\n48 83 fd 0a\n0f 82 cd 00 00 00\n49 89 df\n48 89 eb\n8b 44 24 0c\n24 01\n48 8d ac 24 18 01 00 00\n0f 84 ad 00 00 00\n48 8d 04 9b\n49 39 c5\n0f 82 a0 00 00 00\n4d 39 e5\n74 4a\n4d 29 ec\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 ef\ne8 18 09 00 00\n80 bc 24 38 01 00 00 00\n74 0b\n8b 84 24 3c 01 00 00\n85 c0\n74 1d\n48 8b 84 24 30 01 00 00\n48 01 84 24 28 01 00 00\nc6 84 24 24 01 00 00 00\n49 ff c4\n75 c6\n48 89 ef\ne8 de 08 00 00\n80 bc 24 38 01 00 00 00\n74 3c\n8b 84 24 3c 01 00 00\n85 c0\n4d 89 ec\n48 89 dd\n4c 89 fb\n75 31\n4c 89 f7\n48 89 de\n48 8d 94 24 90 00 00 00\ne8 8d 03 00 00\n84 c0\n0f 85 68 03 00 00\nc7 44 24 0c 00 00 00 00\n4d 89 ec\neb 09\n4d 89 ec\n48 89 dd\n4c 89 fb\n4d 8d 7d 01\n80 7c 24 70 00\n74 24\n8a 84 24 f8 00 00 00\n84 c0\n74 19\n8b 44 24 74\n3b 84 24 fc 00 00 00\n74 39\ne9 c7 01 00 00\n48 8b 54 24 68\n48 3b 94 24 f0 00 00 00\n0f 85 ad 01 00 00\n48 8b 7c 24 60\n48 8b b4 24 e8 00 00 00\ne8 3b ba ff ff\n85 c0\n0f 85 93 01 00 00\n0f 10 44 24 50\n0f 10 4c 24 60\n0f 10 54 24 70\n0f 10 9c 24 80 00 00 00\n0f 29 9c 24 c0 00 00 00\n0f 29 94 24 b0 00 00 00\n0f 29 8c 24 a0 00 00 00\n0f 29 84 24 90 00 00 00\n48 8b 84 24 a8 00 00 00\n48 01 84 24 a0 00 00 00\nc6 84 24 9c 00 00 00 00\n48 89 5c 24 20\nc6 44 24 10 00\n48 c7 44 24 14 00 00 00 00\nc6 44 24 1c 00\n48 8d 7c 24 10\ne8 c2 07 00 00\n80 7c 24 30 00\n74 0c\n8b 44 24 34\n85 c0\n0f 84 7c 02 00 00\n48 8b 44 24 28\n48 01 44 24 20\nc6 44 24 1c 00\n48 8d 7c 24 10\ne8 96 07 00 00\n80 7c 24 30 00\n74 0c\n8b 44 24 34\n85 c0\n0f 84 1f 02 00 00\n49 83 c5 02\n4d 89 ef\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8d bc 24 90 00 00 00\ne8 63 07 00 00\n0f b6 8c 24 b0 00 00 00\n8b 84 24 b4 00 00 00\n84 c9\n74 08\n85 c0\n0f 84 db 00 00 00\n84 c9\n0f 94 c1\n80 7c 24 30 00\n74 1c\n84 c9\n75 18\n3b 44 24 34\n74 37\ne9 8d 00 00 00\n48 8b 94 24 a8 00 00 00\n48 3b 54 24 28\n75 71\n48 8b bc 24 a0 00 00 00\n48 8b 74 24 20\ne8 ff b8 ff ff\n85 c0\n75 5b\n48 8b 84 24 a8 00 00 00\n48 01 84 24 a0 00 00 00\nc6 84 24 9c 00 00 00 00\n48 8b 44 24 28\n48 01 44 24 20\nc6 44 24 1c 00\n48 8d 7c 24 10\ne8 ca 06 00 00\n49 ff c7\n80 7c 24 30 00\n0f 84 4c ff ff ff\n8b 44 24 34\n85 c0\n0f 85 40 ff ff ff\ne9 47 01 00 00\n48 ff c5\n48 8b 44 24 68\n48 01 44 24 60\nc6 44 24 5c 00\n48 8d 7c 24 50\ne8 84 06 00 00\n80 7c 24 70 00\n0f 84 10 fd ff ff\n8b 44 24 74\n85 c0\n0f 85 04 fd ff ff\n45 31 f6\ne9 06 01 00 00\n44 8a 23\n45 84 e4\n0f 84 fa 00 00 00\n41 80 3e 00\n0f 84 e6 00 00 00\n41 b0 01\n45 31 ff\n48 89 df\n45 31 c9\n31 ed\n45 31 ed\n49 83 fd 0a\n0f 82 82 00 00 00\n44 89 c0\n24 01\n74 7b\n4b 8d 44 ad 00\n48 39 c5\n72 71\n48 85 ff\n74 3c\n44 88 64 24 0c\n48 89 ee\n4c 29 ce\n4d 89 c4\n48 89 bc 24 d0 00 00 00\ne8 b3 b7 ff ff\n48 8b bc 24 d0 00 00 00\n4d 89 e0\n44 8a 64 24 0c\n80 3c 07 00\n49 89 e9\n74 08\n48 01 c7\n49 89 e9\n75 30\n4d 89 cf\n48 89 df\ne8 77 b6 ff ff\n4c 89 f7\n48 89 de\n48 89 c2\n48 8d 8c 24 d8 00 00 00\ne8 61 04 00 00\n84 c0\n75 76\n45 31 c0\n31 ff\n4d 89 f9\n45 31 ff\n45 38 26\n75 2d\nb8 01 00 00 00\n0f 1f 84 00 00 00 00 00\n0f b6 0c 03\n84 c9\n74 39\n41 0f b6 14 06\n84 d2\n74 33\n48 ff c0\n38 ca\n74 e8\n48 01 c5\neb 06\n48 ff c5\n49 ff c5\n41 80 7e 01 00\n4d 8d 76 01\n0f 85 2d ff ff ff\neb 0d\n45 31 ff\neb 08\n4c 8b 74 24 60\n4d 89 f7\n4c 89 f8\n48 81 c4 58 01 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n4c 8b bc 24 d8 00 00 00\neb e1\n4c 8b b4 24 90 00 00 00\neb d4\ne8 ae b4 ff ff\n'
p425
S'.text:0000000000406170\n.text:0000000000406171\n.text:0000000000406173\n.text:0000000000406175\n.text:0000000000406177\n.text:0000000000406179\n.text:000000000040617a\n.text:0000000000406181\n.text:0000000000406184\n.text:0000000000406187\n.text:000000000040618c\n.text:0000000000406190\n.text:0000000000406196\n.text:000000000040619e\n.text:00000000004061a6\n.text:00000000004061b2\n.text:00000000004061ba\n.text:00000000004061c2\n.text:00000000004061c7\n.text:00000000004061cf\n.text:00000000004061d1\n.text:00000000004061d8\n.text:00000000004061da\n.text:00000000004061e0\n.text:00000000004061e8\n.text:00000000004061f0\n.text:00000000004061fc\n.text:0000000000406204\n.text:0000000000406209\n.text:000000000040620e\n.text:0000000000406217\n.text:000000000040621c\n.text:0000000000406221\n.text:0000000000406226\n.text:000000000040622b\n.text:000000000040622d\n.text:0000000000406231\n.text:0000000000406233\n.text:0000000000406239\n.text:000000000040623b\n.text:000000000040623f\n.text:0000000000406242\n.text:0000000000406245\n.text:0000000000406247\n.text:000000000040624a\n.text:000000000040624e\n.text:0000000000406254\n.text:0000000000406257\n.text:000000000040625a\n.text:000000000040625e\n.text:0000000000406260\n.text:0000000000406268\n.text:000000000040626e\n.text:0000000000406272\n.text:0000000000406275\n.text:000000000040627b\n.text:000000000040627e\n.text:0000000000406280\n.text:0000000000406283\n.text:0000000000406290\n.text:0000000000406293\n.text:0000000000406298\n.text:00000000004062a0\n.text:00000000004062a2\n.text:00000000004062a9\n.text:00000000004062ab\n.text:00000000004062ad\n.text:00000000004062b5\n.text:00000000004062bd\n.text:00000000004062c5\n.text:00000000004062c8\n.text:00000000004062ca\n.text:00000000004062cd\n.text:00000000004062d2\n.text:00000000004062da\n.text:00000000004062dc\n.text:00000000004062e3\n.text:00000000004062e5\n.text:00000000004062e8\n.text:00000000004062eb\n.text:00000000004062ee\n.text:00000000004062f0\n.text:00000000004062f3\n.text:00000000004062f6\n.text:00000000004062fe\n.text:0000000000406303\n.text:0000000000406305\n.text:000000000040630b\n.text:0000000000406313\n.text:0000000000406316\n.text:0000000000406318\n.text:000000000040631b\n.text:000000000040631e\n.text:0000000000406321\n.text:0000000000406325\n.text:000000000040632a\n.text:000000000040632c\n.text:0000000000406333\n.text:0000000000406335\n.text:0000000000406337\n.text:000000000040633b\n.text:0000000000406342\n.text:0000000000406344\n.text:0000000000406350\n.text:0000000000406355\n.text:000000000040635d\n.text:0000000000406363\n.text:0000000000406368\n.text:0000000000406370\n.text:0000000000406375\n.text:0000000000406377\n.text:000000000040637d\n.text:0000000000406382\n.text:0000000000406387\n.text:000000000040638c\n.text:0000000000406394\n.text:000000000040639c\n.text:00000000004063a4\n.text:00000000004063ac\n.text:00000000004063b4\n.text:00000000004063bc\n.text:00000000004063c4\n.text:00000000004063cc\n.text:00000000004063d1\n.text:00000000004063d6\n.text:00000000004063df\n.text:00000000004063e4\n.text:00000000004063e9\n.text:00000000004063ee\n.text:00000000004063f3\n.text:00000000004063f5\n.text:00000000004063f9\n.text:00000000004063fb\n.text:0000000000406401\n.text:0000000000406406\n.text:000000000040640b\n.text:0000000000406410\n.text:0000000000406415\n.text:000000000040641a\n.text:000000000040641f\n.text:0000000000406421\n.text:0000000000406425\n.text:0000000000406427\n.text:000000000040642d\n.text:0000000000406431\n.text:0000000000406434\n.text:0000000000406440\n.text:0000000000406448\n.text:000000000040644d\n.text:0000000000406455\n.text:000000000040645c\n.text:000000000040645e\n.text:0000000000406460\n.text:0000000000406462\n.text:0000000000406468\n.text:000000000040646a\n.text:000000000040646d\n.text:0000000000406472\n.text:0000000000406474\n.text:0000000000406476\n.text:0000000000406478\n.text:000000000040647c\n.text:000000000040647e\n.text:0000000000406490\n.text:0000000000406498\n.text:000000000040649d\n.text:000000000040649f\n.text:00000000004064a7\n.text:00000000004064ac\n.text:00000000004064b1\n.text:00000000004064b3\n.text:00000000004064b5\n.text:00000000004064bd\n.text:00000000004064c5\n.text:00000000004064cd\n.text:00000000004064d2\n.text:00000000004064d7\n.text:00000000004064dc\n.text:00000000004064e1\n.text:00000000004064e6\n.text:00000000004064e9\n.text:00000000004064ee\n.text:00000000004064f4\n.text:00000000004064f8\n.text:00000000004064fa\n.text:0000000000406500\n.text:0000000000406510\n.text:0000000000406513\n.text:0000000000406518\n.text:000000000040651d\n.text:0000000000406522\n.text:0000000000406527\n.text:000000000040652c\n.text:0000000000406531\n.text:0000000000406537\n.text:000000000040653b\n.text:000000000040653d\n.text:0000000000406543\n.text:0000000000406546\n.text:000000000040654b\n.text:000000000040654e\n.text:0000000000406551\n.text:0000000000406557\n.text:000000000040655b\n.text:0000000000406561\n.text:0000000000406564\n.text:0000000000406567\n.text:000000000040656a\n.text:000000000040656d\n.text:000000000040656f\n.text:0000000000406572\n.text:0000000000406576\n.text:000000000040657c\n.text:000000000040657f\n.text:0000000000406581\n.text:0000000000406583\n.text:0000000000406588\n.text:000000000040658b\n.text:000000000040658d\n.text:0000000000406590\n.text:0000000000406592\n.text:0000000000406597\n.text:000000000040659a\n.text:000000000040659d\n.text:00000000004065a0\n.text:00000000004065a8\n.text:00000000004065ad\n.text:00000000004065b5\n.text:00000000004065b8\n.text:00000000004065bd\n.text:00000000004065c1\n.text:00000000004065c4\n.text:00000000004065c6\n.text:00000000004065c9\n.text:00000000004065cc\n.text:00000000004065ce\n.text:00000000004065d1\n.text:00000000004065d4\n.text:00000000004065d9\n.text:00000000004065dc\n.text:00000000004065df\n.text:00000000004065e2\n.text:00000000004065ea\n.text:00000000004065ef\n.text:00000000004065f1\n.text:00000000004065f3\n.text:00000000004065f6\n.text:00000000004065f8\n.text:00000000004065fb\n.text:00000000004065fe\n.text:0000000000406601\n.text:0000000000406603\n.text:0000000000406608\n.text:0000000000406610\n.text:0000000000406614\n.text:0000000000406616\n.text:0000000000406618\n.text:000000000040661d\n.text:000000000040661f\n.text:0000000000406621\n.text:0000000000406624\n.text:0000000000406626\n.text:0000000000406628\n.text:000000000040662b\n.text:0000000000406630\n.text:0000000000406633\n.text:0000000000406636\n.text:000000000040663b\n.text:000000000040663f\n.text:0000000000406645\n.text:0000000000406647\n.text:000000000040664a\n.text:000000000040664c\n.text:0000000000406651\n.text:0000000000406654\n.text:0000000000406657\n.text:000000000040665e\n.text:000000000040665f\n.text:0000000000406661\n.text:0000000000406663\n.text:0000000000406665\n.text:0000000000406667\n.text:0000000000406668\n.text:0000000000406669\n.text:0000000000406671\n.text:0000000000406673\n.text:000000000040667b\n.text:000000000040667d\n'
p426
tp427
sS'fstat'
p428
(S'\n__stdcall fstat(int __fd, stat * __buf)\n'
p429
V\u000aint fstat(int __fd,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___fxstat_0060f210)(1,(ulong)(uint)__fd,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p430
S'MOV RDX,RSI\nMOV ESI,EDI\nMOV EDI,0x1\nJMP 0x00401ee0\n'
p431
S'48 89 f2\n89 fe\nbf 01 00 00 00\ne9 01 80 ff ff\n'
p432
S'.text:0000000000409ed0\n.text:0000000000409ed3\n.text:0000000000409ed5\n.text:0000000000409eda\n'
p433
tp434
sS'knuth_morris_pratt_multibyte'
p435
(S'\n__stdcall knuth_morris_pratt_multibyte(char * haystack, char * needle, char * * resultp)\n'
p436
V\u000a_Bool knuth_morris_pratt_multibyte(char *haystack,char *needle,char **resultp)\u000a\u000a{\u000a  undefined8 *puVar1;\u000a  char cVar2;\u000a  long __n;\u000a  undefined8 __s1;\u000a  undefined8 __s2;\u000a  bool bVar3;\u000a  undefined uVar4;\u000a  int iVar5;\u000a  ulong uVar6;\u000a  long lVar7;\u000a  undefined *puVar8;\u000a  size_t n;\u000a  ulong uVar9;\u000a  undefined *new_mbc;\u000a  undefined *p;\u000a  undefined auStack216 [8];\u000a  char *local_d0;\u000a  undefined local_c8 [4];\u000a  undefined8 local_c4;\u000a  undefined local_bc;\u000a  char *local_b8;\u000a  long local_b0;\u000a  char local_a8;\u000a  int local_a4;\u000a  undefined *local_88;\u000a  char **local_80;\u000a  undefined local_78 [4];\u000a  undefined8 local_74;\u000a  undefined local_6c;\u000a  char *local_68;\u000a  long local_60;\u000a  char local_58;\u000a  int local_54;\u000a  ulong local_38;\u000a  \u000a  puVar8 = auStack216;\u000a  local_38 = mbslen(needle);\u000a  if (local_38 < 0x492492492492493) {\u000a    n = local_38 * 0x38;\u000a    if (n < 0xfb0) {\u000a      uVar9 = n + 0x1f & 0xfffffffffffffff0;\u000a      puVar8 = auStack216 + -uVar9;\u000a      p = local_c8 + -uVar9;\u000a    }\u000a    else {\u000a      p = (undefined *)mmalloca(n);\u000a      if (p == (undefined *)0x0) {\u000a        return false;\u000a      }\u000a    }\u000a    lVar7 = local_38 * 0x30;\u000a    local_78[0] = 0;\u000a    local_74 = 0;\u000a    local_6c = 0;\u000a    *(undefined8 *)(puVar8 + -8) = 0x40673e;\u000a    local_d0 = haystack;\u000a    local_80 = resultp;\u000a    local_68 = needle;\u000a    mbuiter_multi_next(local_78,puVar8[-8]);\u000a    if ((local_58 == 0) || (local_54 != 0)) {\u000a      new_mbc = p;\u000a      do {\u000a        do {\u000a          *(undefined8 *)(puVar8 + -8) = 0x40676b;\u000a          mb_copy(new_mbc,&local_68,puVar8[-8]);\u000a          local_68 = local_68 + local_60;\u000a          local_6c = 0;\u000a          *(undefined8 *)(puVar8 + -8) = 0x40677f;\u000a          mbuiter_multi_next(local_78,puVar8[-8]);\u000a          new_mbc = new_mbc + 0x30;\u000a        } while (local_58 == 0);\u000a      } while (local_54 != 0);\u000a    }\u000a    new_mbc = p + lVar7;\u000a    *(undefined8 *)(p + lVar7 + 8) = 1;\u000a    local_88 = new_mbc;\u000a    if (2 < local_38) {\u000a      uVar9 = 2;\u000a      lVar7 = 0;\u000a      local_88 = new_mbc;\u000a      do {\u000a        puVar1 = (undefined8 *)(p + uVar9 * 0x30 + -0x30);\u000a        cVar2 = p[uVar9 * 0x30 + -0x20];\u000a        if (cVar2 != 0) goto LAB_004067e9;\u000aLAB_00406810:\u000a        __n = puVar1[1];\u000a        if (__n != *(long *)(p + lVar7 * 0x30 + 8)) goto LAB_00406838;\u000a        __s1 = *puVar1;\u000a        __s2 = *(undefined8 *)(p + lVar7 * 0x30);\u000a        *(undefined8 *)(puVar8 + -8) = 0x406830;\u000a        iVar5 = memcmp(__s1,__s2,__n,puVar8[-8]);\u000a        new_mbc = local_88;\u000a        if (iVar5 != 0) goto LAB_00406838;\u000aLAB_00406850:\u000a        lVar7 = lVar7 + 1;\u000a        uVar6 = uVar9 - lVar7;\u000aLAB_00406859:\u000a        *(ulong *)(new_mbc + uVar9 * 8) = uVar6;\u000a        uVar9 = uVar9 + 1;\u000a        if (uVar9 == local_38) break;\u000a      } while( true );\u000a    }\u000a    *local_80 = (char *)0x0;\u000a    local_68 = local_d0;\u000a    local_78[0] = 0;\u000a    local_74 = 0;\u000a    local_6c = 0;\u000a    local_b8 = local_d0;\u000a    local_c8[0] = 0;\u000a    local_c4 = 0;\u000a    local_bc = 0;\u000a    *(undefined8 *)(puVar8 + -8) = 0x4068bc;\u000a    mbuiter_multi_next(local_c8,puVar8[-8]);\u000a    bVar3 = local_a8 != 0;\u000a    if ((local_a8 == 0) || (local_a4 != 0)) {\u000a      uVar9 = 0;\u000a      do {\u000a        lVar7 = uVar9 * 0x30;\u000a        if ((p[lVar7 + 0x10] == 0) || ((bool)(bVar3 ^ 1))) {\u000a          __n = *(long *)(p + lVar7 + 8);\u000a          if (__n == local_b0) {\u000a            __s1 = *(undefined8 *)(p + lVar7);\u000a            *(undefined8 *)(puVar8 + -8) = 0x40693e;\u000a            iVar5 = memcmp(__s1,local_b8,__n,puVar8[-8]);\u000a            if (iVar5 == 0) goto LAB_00406990;\u000a          }\u000aLAB_00406942:\u000a          if (uVar9 == 0) {\u000a            *(undefined8 *)(puVar8 + -8) = 0x4069b8;\u000a            mbuiter_multi_next(local_78,puVar8[-8]);\u000a            if ((local_58 != 0) && (local_54 == 0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a              *(undefined8 *)(puVar8 + -8) = 0x406a43;\u000a              abort(puVar8[-8]);\u000a            }\u000a            local_68 = local_68 + local_60;\u000a            local_6c = 0;\u000a            local_b8 = local_b8 + local_b0;\u000a            local_bc = 0;\u000a            uVar9 = 0;\u000a          }\u000a          else {\u000a            lVar7 = *(long *)(local_88 + uVar9 * 8);\u000a            uVar9 = uVar9 - lVar7;\u000a            while (lVar7 != 0) {\u000a              *(undefined8 *)(puVar8 + -8) = 0x406968;\u000a              mbuiter_multi_next(local_78,puVar8[-8]);\u000a              if ((local_58 != 0) && (local_54 == 0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a                *(undefined8 *)(puVar8 + -8) = 0x406a3e;\u000a                abort(puVar8[-8]);\u000a              }\u000a              local_68 = local_68 + local_60;\u000a              local_6c = 0;\u000a              lVar7 = lVar7 + -1;\u000a            }\u000a          }\u000a        }\u000a        else {\u000a          if (*(int *)(p + lVar7 + 0x14) != local_a4) goto LAB_00406942;\u000aLAB_00406990:\u000a          uVar9 = uVar9 + 1;\u000a          local_b8 = local_b8 + local_b0;\u000a          local_bc = 0;\u000a          if (uVar9 == local_38) {\u000a            *local_80 = local_68;\u000a            break;\u000a          }\u000a        }\u000a        *(undefined8 *)(puVar8 + -8) = 0x4069f1;\u000a        mbuiter_multi_next(local_c8,puVar8[-8]);\u000a        bVar3 = local_a8 != 0;\u000a      } while ((local_a8 == 0) || (local_a4 != 0));\u000a    }\u000a    *(undefined8 *)(puVar8 + -8) = 0x406a28;\u000a    freea(p,puVar8[-8]);\u000a    uVar4 = 1;\u000a  }\u000a  else {\u000a    uVar4 = 0;\u000a  }\u000a  return (_Bool)uVar4;\u000aLAB_00406838:\u000a  while( true ) {\u000a    if (lVar7 == 0) {\u000a      lVar7 = 0;\u000a      uVar6 = uVar9;\u000a      goto LAB_00406859;\u000a    }\u000a    lVar7 = lVar7 - *(long *)(new_mbc + lVar7 * 8);\u000a    if (cVar2 == 0) break;\u000aLAB_004067e9:\u000a    if (p[lVar7 * 0x30 + 0x10] == 0) break;\u000a    if (*(int *)((long)puVar1 + 0x14) == *(int *)(p + lVar7 * 0x30 + 0x14)) goto LAB_00406850;\u000a  }\u000a  goto LAB_00406810;\u000a}\u000a\u000a
p437
S'PUSH RBP\nMOV RBP,RSP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV R14,RDX\nMOV R13,RSI\nMOV R12,RDI\nMOV RDI,R13\nCALL 0x004060d0\nMOV RBX,RAX\nMOV RAX,0x492492492492492\nCMP RBX,RAX\nJBE 0x004066ce\nXOR EAX,EAX\nJMP 0x00406a2a\nIMUL RDI,RBX,0x38\nCMP RDI,0xfaf\nJA 0x004066f9\nMOV RAX,RSP\nADD RDI,0x1f\nAND RDI,-0x10\nMOV RCX,RAX\nSUB RCX,RDI\nMOV RSP,RCX\nNEG RDI\nLEA R15,[RAX + RDI*0x1 + 0x10]\nJMP 0x0040670a\nCALL 0x00409c80\nMOV R15,RAX\nTEST R15,R15\nJZ 0x00406a11\nMOV qword ptr [-0xc8 + RBP],R12\nMOV qword ptr [RBP + -0x78],R14\nMOV qword ptr [RBP + -0x30],RBX\nLEA RBX,[RBX + RBX*0x2]\nSHL RBX,0x4\nMOV qword ptr [RBP + -0x60],R13\nMOV byte ptr [RBP + -0x70],0x0\nMOV qword ptr [RBP + -0x6c],0x0\nMOV byte ptr [RBP + -0x64],0x0\nLEA RDI,[RBP + -0x70]\nCALL 0x00406bb0\nCMP byte ptr [RBP + -0x50],0x0\nJZ 0x0040674b\nMOV EAX,dword ptr [RBP + -0x4c]\nTEST EAX,EAX\nJZ 0x00406790\nLEA R13,[RBP + -0x60]\nLEA R14,[RBP + -0x70]\nMOV R12,R15\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RDI,R12\nMOV RSI,R13\nCALL 0x00409da0\nMOV RAX,qword ptr [RBP + -0x58]\nADD qword ptr [RBP + -0x60],RAX\nMOV byte ptr [RBP + -0x64],0x0\nMOV RDI,R14\nCALL 0x00406bb0\nMOV EAX,dword ptr [RBP + -0x4c]\nADD R12,0x30\nCMP byte ptr [RBP + -0x50],0x0\nJZ 0x00406760\nTEST EAX,EAX\nJNZ 0x00406760\nLEA RSI,[R15 + RBX*0x1]\nMOV qword ptr [R15 + RBX*0x1 + 0x8],0x1\nCMP qword ptr [RBP + -0x30],0x3\nMOV qword ptr [RBP + -0x80],RSI\nJC 0x0040686a\nMOV R12D,0x2\nXOR EBX,EBX\nNOP word ptr CS:[RAX + RAX*0x1]\nLEA RAX,[R12 + R12*0x2]\nSHL RAX,0x4\nLEA R13,[R15 + RAX*0x1 + -0x30]\nMOVZX R14D,byte ptr [R15 + RAX*0x1 + -0x20]\nTEST R14B,R14B\nJNZ 0x004067e9\nJMP 0x00406810\nSUB RBX,qword ptr [RSI + RBX*0x8]\nTEST R14B,R14B\nJZ 0x00406810\nLEA RAX,[RBX + RBX*0x2]\nSHL RAX,0x4\nCMP byte ptr [R15 + RAX*0x1 + 0x10],0x0\nJZ 0x00406810\nMOV ECX,dword ptr [R13 + 0x14]\nCMP ECX,dword ptr [R15 + RAX*0x1 + 0x14]\nJNZ 0x00406838\nJMP 0x00406850\nMOV RDX,qword ptr [R13 + 0x8]\nLEA RAX,[RBX + RBX*0x2]\nSHL RAX,0x4\nCMP RDX,qword ptr [R15 + RAX*0x1 + 0x8]\nJNZ 0x00406838\nMOV RDI,qword ptr [R13]\nMOV RSI,qword ptr [R15 + RAX*0x1]\nCALL 0x00401db0\nMOV RSI,qword ptr [RBP + -0x80]\nTEST EAX,EAX\nJZ 0x00406850\nTEST RBX,RBX\nJNZ 0x004067e0\nXOR EBX,EBX\nMOV RAX,R12\nJMP 0x00406859\nINC RBX\nMOV RAX,R12\nSUB RAX,RBX\nMOV qword ptr [RSI + R12*0x8],RAX\nINC R12\nCMP R12,qword ptr [RBP + -0x30]\nJNZ 0x004067c0\nMOV RAX,qword ptr [RBP + -0x78]\nMOV qword ptr [RAX],0x0\nMOV RAX,qword ptr [-0xc8 + RBP]\nMOV qword ptr [RBP + -0x60],RAX\nMOV byte ptr [RBP + -0x70],0x0\nMOV qword ptr [RBP + -0x6c],0x0\nMOV byte ptr [RBP + -0x64],0x0\nMOV qword ptr [-0xb0 + RBP],RAX\nMOV byte ptr [-0xc0 + RBP],0x0\nMOV qword ptr [-0xbc + RBP],0x0\nMOV byte ptr [-0xb4 + RBP],0x0\nLEA RDI,[-0xc0 + RBP]\nCALL 0x00406bb0\nCMP byte ptr [-0xa0 + RBP],0x0\nSETNZ CL\nMOV EAX,dword ptr [-0x9c + RBP]\nJZ 0x004068d6\nTEST EAX,EAX\nJZ 0x00406a20\nXOR R12D,R12D\nLEA R14,[-0xc0 + RBP]\nLEA R13,[RBP + -0x70]\nNOP word ptr CS:[RAX + RAX*0x1]\nLEA RSI,[R12 + R12*0x2]\nSHL RSI,0x4\nCMP byte ptr [R15 + RSI*0x1 + 0x10],0x0\nJZ 0x00406920\nXOR CL,0x1\nTEST CL,0x1\nJNZ 0x00406920\nCMP dword ptr [R15 + RSI*0x1 + 0x14],EAX\nJNZ 0x00406942\nJMP 0x00406990\nMOV RDX,qword ptr [R15 + RSI*0x1 + 0x8]\nCMP RDX,qword ptr [-0xa8 + RBP]\nJNZ 0x00406942\nMOV RDI,qword ptr [R15 + RSI*0x1]\nMOV RSI,qword ptr [-0xb0 + RBP]\nCALL 0x00401db0\nTEST EAX,EAX\nJZ 0x00406990\nTEST R12,R12\nJZ 0x004069b0\nMOV RAX,qword ptr [RBP + -0x80]\nMOV RBX,qword ptr [RAX + R12*0x8]\nSUB R12,RBX\nTEST RBX,RBX\nJZ 0x004069e9\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,R13\nCALL 0x00406bb0\nCMP byte ptr [RBP + -0x50],0x0\nJZ 0x00406979\nMOV EAX,dword ptr [RBP + -0x4c]\nTEST EAX,EAX\nJZ 0x00406a39\nMOV RAX,qword ptr [RBP + -0x58]\nADD qword ptr [RBP + -0x60],RAX\nMOV byte ptr [RBP + -0x64],0x0\nDEC RBX\nJNZ 0x00406960\nJMP 0x004069e9\nINC R12\nMOV RAX,qword ptr [-0xa8 + RBP]\nADD qword ptr [-0xb0 + RBP],RAX\nMOV byte ptr [-0xb4 + RBP],0x0\nCMP R12,qword ptr [RBP + -0x30]\nJNZ 0x004069e9\nJMP 0x00406a15\nMOV RDI,R13\nCALL 0x00406bb0\nCMP byte ptr [RBP + -0x50],0x0\nJZ 0x004069c5\nMOV EAX,dword ptr [RBP + -0x4c]\nTEST EAX,EAX\nJZ 0x00406a3e\nMOV RAX,qword ptr [RBP + -0x58]\nADD qword ptr [RBP + -0x60],RAX\nMOV byte ptr [RBP + -0x64],0x0\nMOV RAX,qword ptr [-0xa8 + RBP]\nADD qword ptr [-0xb0 + RBP],RAX\nMOV byte ptr [-0xb4 + RBP],0x0\nXOR R12D,R12D\nMOV RDI,R14\nCALL 0x00406bb0\nCMP byte ptr [-0xa0 + RBP],0x0\nSETNZ CL\nMOV EAX,dword ptr [-0x9c + RBP]\nJZ 0x004068f0\nTEST EAX,EAX\nJNZ 0x004068f0\nJMP 0x00406a20\nXOR EAX,EAX\nJMP 0x00406a2a\nMOV RAX,qword ptr [RBP + -0x60]\nMOV RCX,qword ptr [RBP + -0x78]\nMOV qword ptr [RCX],RAX\nMOV RDI,R15\nCALL 0x00409d00\nMOV AL,0x1\nLEA RSP,[RBP + -0x28]\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401b30\nCALL 0x00401b30\n'
p438
S'55\n48 89 e5\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n49 89 d6\n49 89 f5\n49 89 fc\n4c 89 ef\ne8 1b fa ff ff\n48 89 c3\n48 b8 92 24 49 92 24 49 92 04\n48 39 c3\n76 07\n31 c0\ne9 5c 03 00 00\n48 6b fb 38\n48 81 ff af 0f 00 00\n77 1e\n48 89 e0\n48 83 c7 1f\n48 83 e7 f0\n48 89 c1\n48 29 f9\n48 89 cc\n48 f7 df\n4c 8d 7c 38 10\neb 11\ne8 82 35 00 00\n49 89 c7\n4d 85 ff\n0f 84 07 03 00 00\n4c 89 a5 38 ff ff ff\n4c 89 75 88\n48 89 5d d0\n48 8d 1c 5b\n48 c1 e3 04\n4c 89 6d a0\nc6 45 90 00\n48 c7 45 94 00 00 00 00\nc6 45 9c 00\n48 8d 7d 90\ne8 72 04 00 00\n80 7d b0 00\n74 07\n8b 45 b4\n85 c0\n74 45\n4c 8d 6d a0\n4c 8d 75 90\n4d 89 fc\n66 2e 0f 1f 84 00 00 00 00 00\n4c 89 e7\n4c 89 ee\ne8 35 36 00 00\n48 8b 45 a8\n48 01 45 a0\nc6 45 9c 00\n4c 89 f7\ne8 31 04 00 00\n8b 45 b4\n49 83 c4 30\n80 7d b0 00\n74 d4\n85 c0\n75 d0\n49 8d 34 1f\n49 c7 44 1f 08 01 00 00 00\n48 83 7d d0 03\n48 89 75 80\n0f 82 be 00 00 00\n41 bc 02 00 00 00\n31 db\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n4b 8d 04 64\n48 c1 e0 04\n4d 8d 6c 07 d0\n45 0f b6 74 07 e0\n45 84 f6\n75 11\neb 36\n48 2b 1c de\n45 84 f6\n74 27\n48 8d 04 5b\n48 c1 e0 04\n41 80 7c 07 10 00\n74 17\n41 8b 4d 14\n41 3b 4c 07 14\n75 34\neb 4a\n49 8b 55 08\n48 8d 04 5b\n48 c1 e0 04\n49 3b 54 07 08\n75 15\n49 8b 7d 00\n49 8b 34 07\ne8 80 b5 ff ff\n48 8b 75 80\n85 c0\n74 18\n48 85 db\n75 a3\n31 db\n4c 89 e0\neb 15\n48 ff c3\n4c 89 e0\n48 29 d8\n4a 89 04 e6\n49 ff c4\n4c 3b 65 d0\n0f 85 56 ff ff ff\n48 8b 45 88\n48 c7 00 00 00 00 00\n48 8b 85 38 ff ff ff\n48 89 45 a0\nc6 45 90 00\n48 c7 45 94 00 00 00 00\nc6 45 9c 00\n48 89 85 50 ff ff ff\nc6 85 40 ff ff ff 00\n48 c7 85 44 ff ff ff 00 00 00 00\nc6 85 4c ff ff ff 00\n48 8d bd 40 ff ff ff\ne8 f4 02 00 00\n80 bd 60 ff ff ff 00\n0f 95 c1\n8b 85 64 ff ff ff\n74 08\n85 c0\n0f 84 4a 01 00 00\n45 31 e4\n4c 8d b5 40 ff ff ff\n4c 8d 6d 90\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n4b 8d 34 64\n48 c1 e6 04\n41 80 7c 37 10 00\n74 20\n80 f1 01\nf6 c1 01\n75 18\n41 39 44 37 14\n75 33\neb 7f\n49 8b 54 37 08\n48 3b 95 58 ff ff ff\n75 14\n49 8b 3c 37\n48 8b b5 50 ff ff ff\ne8 72 b4 ff ff\n85 c0\n74 4e\n4d 85 e4\n74 69\n48 8b 45 80\n4a 8b 1c e0\n49 29 dc\n48 85 db\n0f 84 8e 00 00 00\n0f 1f 44 00 00\n4c 89 ef\ne8 48 02 00 00\n80 7d b0 00\n74 0b\n8b 45 b4\n85 c0\n0f 84 c0 00 00 00\n48 8b 45 a8\n48 01 45 a0\nc6 45 9c 00\n48 ff cb\n75 d6\neb 5d\n49 ff c4\n48 8b 85 58 ff ff ff\n48 01 85 50 ff ff ff\nc6 85 4c ff ff ff 00\n4c 3b 65 d0\n75 3b\neb 65\n4c 89 ef\ne8 f8 01 00 00\n80 7d b0 00\n74 07\n8b 45 b4\n85 c0\n74 79\n48 8b 45 a8\n48 01 45 a0\nc6 45 9c 00\n48 8b 85 58 ff ff ff\n48 01 85 50 ff ff ff\nc6 85 4c ff ff ff 00\n45 31 e4\n4c 89 f7\ne8 bf 01 00 00\n80 bd 60 ff ff ff 00\n0f 95 c1\n8b 85 64 ff ff ff\n0f 84 e9 fe ff ff\n85 c0\n0f 85 e1 fe ff ff\neb 0f\n31 c0\neb 15\n48 8b 45 a0\n48 8b 4d 88\n48 89 01\n4c 89 ff\ne8 d8 32 00 00\nb0 01\n48 8d 65 d8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 f2 b0 ff ff\ne8 ed b0 ff ff\n'
p439
S'.text:0000000000406690\n.text:0000000000406691\n.text:0000000000406694\n.text:0000000000406696\n.text:0000000000406698\n.text:000000000040669a\n.text:000000000040669c\n.text:000000000040669d\n.text:00000000004066a4\n.text:00000000004066a7\n.text:00000000004066aa\n.text:00000000004066ad\n.text:00000000004066b0\n.text:00000000004066b5\n.text:00000000004066b8\n.text:00000000004066c2\n.text:00000000004066c5\n.text:00000000004066c7\n.text:00000000004066c9\n.text:00000000004066ce\n.text:00000000004066d2\n.text:00000000004066d9\n.text:00000000004066db\n.text:00000000004066de\n.text:00000000004066e2\n.text:00000000004066e6\n.text:00000000004066e9\n.text:00000000004066ec\n.text:00000000004066ef\n.text:00000000004066f2\n.text:00000000004066f7\n.text:00000000004066f9\n.text:00000000004066fe\n.text:0000000000406701\n.text:0000000000406704\n.text:000000000040670a\n.text:0000000000406711\n.text:0000000000406715\n.text:0000000000406719\n.text:000000000040671d\n.text:0000000000406721\n.text:0000000000406725\n.text:0000000000406729\n.text:0000000000406731\n.text:0000000000406735\n.text:0000000000406739\n.text:000000000040673e\n.text:0000000000406742\n.text:0000000000406744\n.text:0000000000406747\n.text:0000000000406749\n.text:000000000040674b\n.text:000000000040674f\n.text:0000000000406753\n.text:0000000000406756\n.text:0000000000406760\n.text:0000000000406763\n.text:0000000000406766\n.text:000000000040676b\n.text:000000000040676f\n.text:0000000000406773\n.text:0000000000406777\n.text:000000000040677a\n.text:000000000040677f\n.text:0000000000406782\n.text:0000000000406786\n.text:000000000040678a\n.text:000000000040678c\n.text:000000000040678e\n.text:0000000000406790\n.text:0000000000406794\n.text:000000000040679d\n.text:00000000004067a2\n.text:00000000004067a6\n.text:00000000004067ac\n.text:00000000004067b2\n.text:00000000004067b4\n.text:00000000004067c0\n.text:00000000004067c4\n.text:00000000004067c8\n.text:00000000004067cd\n.text:00000000004067d3\n.text:00000000004067d6\n.text:00000000004067d8\n.text:00000000004067e0\n.text:00000000004067e4\n.text:00000000004067e7\n.text:00000000004067e9\n.text:00000000004067ed\n.text:00000000004067f1\n.text:00000000004067f7\n.text:00000000004067f9\n.text:00000000004067fd\n.text:0000000000406802\n.text:0000000000406804\n.text:0000000000406810\n.text:0000000000406814\n.text:0000000000406818\n.text:000000000040681c\n.text:0000000000406821\n.text:0000000000406823\n.text:0000000000406827\n.text:000000000040682b\n.text:0000000000406830\n.text:0000000000406834\n.text:0000000000406836\n.text:0000000000406838\n.text:000000000040683b\n.text:000000000040683d\n.text:000000000040683f\n.text:0000000000406842\n.text:0000000000406850\n.text:0000000000406853\n.text:0000000000406856\n.text:0000000000406859\n.text:000000000040685d\n.text:0000000000406860\n.text:0000000000406864\n.text:000000000040686a\n.text:000000000040686e\n.text:0000000000406875\n.text:000000000040687c\n.text:0000000000406880\n.text:0000000000406884\n.text:000000000040688c\n.text:0000000000406890\n.text:0000000000406897\n.text:000000000040689e\n.text:00000000004068a9\n.text:00000000004068b0\n.text:00000000004068b7\n.text:00000000004068bc\n.text:00000000004068c3\n.text:00000000004068c6\n.text:00000000004068cc\n.text:00000000004068ce\n.text:00000000004068d0\n.text:00000000004068d6\n.text:00000000004068d9\n.text:00000000004068e0\n.text:00000000004068e4\n.text:00000000004068f0\n.text:00000000004068f4\n.text:00000000004068f8\n.text:00000000004068fe\n.text:0000000000406900\n.text:0000000000406903\n.text:0000000000406906\n.text:0000000000406908\n.text:000000000040690d\n.text:000000000040690f\n.text:0000000000406920\n.text:0000000000406925\n.text:000000000040692c\n.text:000000000040692e\n.text:0000000000406932\n.text:0000000000406939\n.text:000000000040693e\n.text:0000000000406940\n.text:0000000000406942\n.text:0000000000406945\n.text:0000000000406947\n.text:000000000040694b\n.text:000000000040694f\n.text:0000000000406952\n.text:0000000000406955\n.text:000000000040695b\n.text:0000000000406960\n.text:0000000000406963\n.text:0000000000406968\n.text:000000000040696c\n.text:000000000040696e\n.text:0000000000406971\n.text:0000000000406973\n.text:0000000000406979\n.text:000000000040697d\n.text:0000000000406981\n.text:0000000000406985\n.text:0000000000406988\n.text:000000000040698a\n.text:0000000000406990\n.text:0000000000406993\n.text:000000000040699a\n.text:00000000004069a1\n.text:00000000004069a8\n.text:00000000004069ac\n.text:00000000004069ae\n.text:00000000004069b0\n.text:00000000004069b3\n.text:00000000004069b8\n.text:00000000004069bc\n.text:00000000004069be\n.text:00000000004069c1\n.text:00000000004069c3\n.text:00000000004069c5\n.text:00000000004069c9\n.text:00000000004069cd\n.text:00000000004069d1\n.text:00000000004069d8\n.text:00000000004069df\n.text:00000000004069e6\n.text:00000000004069e9\n.text:00000000004069ec\n.text:00000000004069f1\n.text:00000000004069f8\n.text:00000000004069fb\n.text:0000000000406a01\n.text:0000000000406a07\n.text:0000000000406a09\n.text:0000000000406a0f\n.text:0000000000406a11\n.text:0000000000406a13\n.text:0000000000406a15\n.text:0000000000406a19\n.text:0000000000406a1d\n.text:0000000000406a20\n.text:0000000000406a23\n.text:0000000000406a28\n.text:0000000000406a2a\n.text:0000000000406a2e\n.text:0000000000406a2f\n.text:0000000000406a31\n.text:0000000000406a33\n.text:0000000000406a35\n.text:0000000000406a37\n.text:0000000000406a38\n.text:0000000000406a39\n.text:0000000000406a3e\n'
p440
tp441
sS'fprintf'
p442
(S'\n__stdcall fprintf(FILE * __stream, char * __format)\n'
p443
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fprintf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fprintf_0060f198)();\u000a  return iVar1;\u000a}\u000a\u000a
p444
S'JMP qword ptr [0x0060f198]\n'
p445
S'ff 25 a2 d3 20 00\n'
p446
S'.plt:0000000000401df0\n'
p447
tp448
sS'fscanf'
p449
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p450
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_0060f148)();\u000a  return iVar1;\u000a}\u000a\u000a
p451
S'JMP qword ptr [0x0060f148]\n'
p452
S'ff 25 f2 d3 20 00\n'
p453
S'.plt:0000000000401d50\n'
p454
tp455
sS'contains_metacharacter'
p456
(S'\n__stdcall contains_metacharacter(char * s)\n'
p457
V\u000aint contains_metacharacter(char *s)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = strpbrk(s,"*?[]\u005c\u005c");\u000a  return (int)(uint)(pcVar1 != (char *)0x0);\u000a}\u000a\u000a
p458
S'PUSH RAX\nMOV ESI,0x40a670\nCALL 0x00401ef0\nXOR ECX,ECX\nTEST RAX,RAX\nSETNZ CL\nMOV EAX,ECX\nPOP RCX\nRET\n'
p459
S'50\nbe 70 a6 40 00\ne8 75 e5 ff ff\n31 c9\n48 85 c0\n0f 95 c1\n89 c8\n59\nc3\n'
p460
S'.text:0000000000403970\n.text:0000000000403971\n.text:0000000000403976\n.text:000000000040397b\n.text:000000000040397d\n.text:0000000000403980\n.text:0000000000403983\n.text:0000000000403985\n.text:0000000000403986\n'
p461
tp462
sS'strftime'
p463
(S'\n__stdcall strftime(char * __s, size_t __maxsize, char * __format, tm * __tp)\n'
p464
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strftime(char *__s,size_t __maxsize,char *__format,tm *__tp)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strftime_0060f248)();\u000a  return sVar1;\u000a}\u000a\u000a
p465
S'JMP qword ptr [0x0060f248]\n'
p466
S'ff 25 f2 d2 20 00\n'
p467
S'.plt:0000000000401f50\n'
p468
tp469
sS'memcpy'
p470
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p471
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_0060f1b0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p472
S'JMP qword ptr [0x0060f1b0]\n'
p473
S'ff 25 8a d3 20 00\n'
p474
S'.plt:0000000000401e20\n'
p475
tp476
sS'close_stdout_set_ignore_EPIPE'
p477
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p478
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p479
S'MOV byte ptr [0x0060f548],DIL\nRET\n'
p480
S'40 88 3d 51 ab 20 00\nc3\n'
p481
S'.text:00000000004049f0\n.text:00000000004049f7\n'
p482
tp483
sS'_IO_getc'
p484
(S'\n__stdcall _IO_getc(_IO_FILE * __fp)\n'
p485
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint _IO_getc(_IO_FILE *__fp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR__IO_getc_0060f1f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p486
S'JMP qword ptr [0x0060f1f8]\n'
p487
S'ff 25 42 d3 20 00\n'
p488
S'.plt:0000000000401eb0\n'
p489
tp490
sS'iswprint'
p491
(S'\n__stdcall iswprint(wint_t __wc)\n'
p492
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_0060f2d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p493
S'JMP qword ptr [0x0060f2d8]\n'
p494
S'ff 25 62 d2 20 00\n'
p495
S'.plt:0000000000402070\n'
p496
tp497
sS'c_isspace'
p498
(S'\n__stdcall c_isspace()\n'
p499
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p500
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00409845\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p501
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p502
S'.text:0000000000409830\n.text:0000000000409833\n.text:0000000000409836\n.text:0000000000409838\n.text:000000000040983d\n.text:000000000040983f\n.text:0000000000409841\n.text:0000000000409844\n.text:0000000000409845\n.text:0000000000409847\n'
p503
tp504
sS'visit_substring_match_nocasefold_wide'
p505
(S'\n__stdcall visit_substring_match_nocasefold_wide(process_data * procdata, void * context)\n'
p506
V\u000aint visit_substring_match_nocasefold_wide(process_data *procdata,void *context)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = mbsstr(procdata->munged_filename,(char *)context);\u000a  return (int)((uint)(pcVar1 == (char *)0x0) + 2 + (uint)(pcVar1 == (char *)0x0));\u000a}\u000a\u000a
p507
S'PUSH RAX\nMOV RDI,qword ptr [RDI + 0x20]\nCALL 0x00406170\nXOR ECX,ECX\nTEST RAX,RAX\nSETZ CL\nLEA EAX,[RCX + RCX*0x1 + 0x2]\nPOP RCX\nRET\n'
p508
S'50\n48 8b 7f 20\ne8 c6 26 00 00\n31 c9\n48 85 c0\n0f 94 c1\n8d 44 09 02\n59\nc3\n'
p509
S'.text:0000000000403aa0\n.text:0000000000403aa1\n.text:0000000000403aa5\n.text:0000000000403aaa\n.text:0000000000403aac\n.text:0000000000403aaf\n.text:0000000000403ab2\n.text:0000000000403ab6\n.text:0000000000403ab7\n'
p510
tp511
sS'open'
p512
(S'\n__stdcall open(char * __file, int __oflag)\n'
p513
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_0060f268)();\u000a  return iVar1;\u000a}\u000a\u000a
p514
S'JMP qword ptr [0x0060f268]\n'
p515
S'ff 25 d2 d2 20 00\n'
p516
S'.plt:0000000000401f90\n'
p517
tp518
sS'quotearg_n_custom_mem'
p519
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p520
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p521
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x0060f590]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x0060f580]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060f570]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060f560]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00406eb0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00407d40\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p522
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 27 74 20 00\n48 89 44 24 30\n0f 10 05 0b 74 20 00\n0f 29 44 24 20\n0f 10 05 ef 73 20 00\n0f 29 44 24 10\n0f 10 05 d3 73 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p523
S'.text:0000000000408150\n.text:0000000000408151\n.text:0000000000408153\n.text:0000000000408155\n.text:0000000000408156\n.text:000000000040815a\n.text:000000000040815d\n.text:0000000000408160\n.text:0000000000408162\n.text:0000000000408169\n.text:000000000040816e\n.text:0000000000408175\n.text:000000000040817a\n.text:0000000000408181\n.text:0000000000408186\n.text:000000000040818d\n.text:0000000000408191\n.text:0000000000408194\n.text:0000000000408197\n.text:000000000040819c\n.text:000000000040819e\n.text:00000000004081a1\n.text:00000000004081a4\n.text:00000000004081a7\n.text:00000000004081ac\n.text:00000000004081b0\n.text:00000000004081b1\n.text:00000000004081b3\n.text:00000000004081b5\n.text:00000000004081b6\n'
p524
tp525
sS'localtime'
p526
(S'\n__stdcall localtime(time_t * __timer)\n'
p527
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000atm * localtime(time_t *__timer)\u000a\u000a{\u000a  tm *ptVar1;\u000a  \u000a  ptVar1 = (tm *)(*(code *)PTR_localtime_0060f030)();\u000a  return ptVar1;\u000a}\u000a\u000a
p528
S'JMP qword ptr [0x0060f030]\n'
p529
S'ff 25 0a d5 20 00\n'
p530
S'.plt:0000000000401b20\n'
p531
tp532
sS'_init'
p533
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p534
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___0060eff8;\u000a  if (PTR___gmon_start___0060eff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___0060eff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p535
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x0060eff8]\nTEST RAX,RAX\nJZ 0x00401ada\nCALL RAX\nADD RSP,0x8\nRET\n'
p536
S'48 83 ec 08\n48 8b 05 25 d5 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p537
S'.init:0000000000401ac8\n.init:0000000000401acc\n.init:0000000000401ad3\n.init:0000000000401ad6\n.init:0000000000401ad8\n.init:0000000000401ada\n.init:0000000000401ade\n'
p538
tp539
sS'strpbrk'
p540
(S'\n__stdcall strpbrk(char * __s, char * __accept)\n'
p541
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strpbrk(char *__s,char *__accept)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strpbrk_0060f218)();\u000a  return pcVar1;\u000a}\u000a\u000a
p542
S'JMP qword ptr [0x0060f218]\n'
p543
S'ff 25 22 d3 20 00\n'
p544
S'.plt:0000000000401ef0\n'
p545
tp546
sS'cleanup_quote_opts'
p547
(S'\n__stdcall cleanup_quote_opts()\n'
p548
V\u000avoid cleanup_quote_opts(void)\u000a\u000a{\u000a  free(quote_opts);\u000a  return;\u000a}\u000a\u000a
p549
S'MOV RDI,qword ptr [0x0060f4c0]\nJMP 0x00401b00\n'
p550
S'48 8b 3d 39 c9 20 00\ne9 74 ef ff ff\n'
p551
S'.text:0000000000402b80\n.text:0000000000402b87\n'
p552
tp553
sS'set_quoting_flags'
p554
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p555
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p556
S'TEST RDI,RDI\nMOV ECX,0x60f560\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p557
S'48 85 ff\nb9 60 f5 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p558
S'.text:0000000000406e90\n.text:0000000000406e93\n.text:0000000000406e98\n.text:0000000000406e9c\n.text:0000000000406e9f\n.text:0000000000406ea2\n'
p559
tp560
sS'get_stat_birthtime'
p561
(S'\n__stdcall get_stat_birthtime(stat * st)\n'
p562
V\u000atimespec get_stat_birthtime(stat *st)\u000a\u000a{\u000a  return (timespec)CONCAT88(0xffffffffffffffff,0xffffffffffffffff);\u000a}\u000a\u000a
p563
S'MOV RAX,-0x1\nMOV RDX,-0x1\nRET\n'
p564
S'48 c7 c0 ff ff ff ff\n48 c7 c2 ff ff ff ff\nc3\n'
p565
S'.text:00000000004086b0\n.text:00000000004086b7\n.text:00000000004086be\n'
p566
tp567
sS'realloc'
p568
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p569
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_0060f230)();\u000a  return pvVar1;\u000a}\u000a\u000a
p570
S'JMP qword ptr [0x0060f230]\n'
p571
S'ff 25 0a d3 20 00\n'
p572
S'.plt:0000000000401f20\n'
p573
tp574
sS'localeconv'
p575
(S'\n__stdcall localeconv()\n'
p576
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000alconv * localeconv(void)\u000a\u000a{\u000a  lconv *plVar1;\u000a  \u000a  plVar1 = (lconv *)(*(code *)PTR_localeconv_0060f090)();\u000a  return plVar1;\u000a}\u000a\u000a
p577
S'JMP qword ptr [0x0060f090]\n'
p578
S'ff 25 aa d4 20 00\n'
p579
S'.plt:0000000000401be0\n'
p580
tp581
sS'get_charset_aliases'
p582
(S'\n__stdcall get_charset_aliases()\n'
p583
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *__stream;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    __stream = fdopen(__fd,"r");\u000a    if (__stream != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00409bf4_caseD_9:\u000a      __fd = getc_unlocked(__stream);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,__stream);\u000a        __fd = fscanf(__stream,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00409bf4_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00409bf4_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00409bf4_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked(__stream);\u000a          if (__fd == -1) goto switchD_00409bf4_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00409bf4_caseD_9;\u000a      case -1:\u000a        goto switchD_00409bf4_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_00409c4d:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_00409c53:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00409bf4_caseD_ffffffff:\u000a  fclose(__stream);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00409c53;\u000a  }\u000a  goto LAB_00409c4d;\u000a}\u000a\u000a
p584
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x0060f6a8]\nTEST R15,R15\nJNZ 0x00409c62\nMOV EDI,0x40ca64\nCALL 0x00401af0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00409a18\nCMP byte ptr [RBX],0x0\nJNZ 0x00409a1d\nMOV EBX,0x40ca74\nMOV RDI,RBX\nCALL 0x00401c50\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00409a37\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00409a39\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401e90\nMOV R13,RAX\nTEST R13,R13\nJZ 0x00409a8d\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00401e20\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00409a98\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00409ab5\nMOV R15D,0x40c0f9\nJMP 0x00409c5b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00401f90\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00409c4d\nMOV ESI,0x40b3d5\nMOV EDI,EBP\nCALL 0x00401f30\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00409c14\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00409be0\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x00401b70\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x00401b70\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00409be0\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401ed0\nMOV ESI,0x40ca83\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00401d50\nCMP EAX,0x2\nJL 0x00409c34\nMOV RDI,R12\nCALL 0x00401c50\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x00401c50\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00409bbd\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401f20\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00409b04\nJMP 0x00409c1d\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401e90\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00409b04\nJMP 0x00409c1d\nMOV RDI,RBX\nCALL 0x00401ba0\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00409b47\nJMP qword ptr [0x40c928 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x00401ba0\nCMP EAX,-0x1\nJZ 0x00409c34\nCMP EAX,0xa\nJNZ 0x00409c00\nJMP 0x00409be0\nMOV EDI,EBP\nCALL 0x00401d80\nJMP 0x00409c4d\nMOV RDI,R15\nCALL 0x00401b00\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00401c10\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00409c4d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00409c53\nMOV R15D,0x40c0f9\nMOV RDI,R13\nCALL 0x00401b00\nMOV qword ptr [0x0060f6a8],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p585
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d b0 5c 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 64 ca 40 00\ne8 e5 80 ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb 74 ca 40 00\n48 89 df\ne8 2b 82 ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 49 84 ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 c3 83 ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf f9 c0 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 cc 84 ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe d5 b3 40 00\n89 ef\ne8 56 84 ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 4b 80 ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 3b 80 ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 7f 83 ff ff\nbe 83 ca 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 ea 81 ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 d9 80 ff ff\n49 89 c4\n48 89 ef\ne8 ce 80 ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 76 83 ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 c5 82 ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 b8 7f ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 28 c9 40 00\n48 89 df\ne8 98 7f ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 65 81 ff ff\neb 30\n4c 89 ff\ne8 db 7e ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 d4 7f ff ff\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf f9 c0 40 00\n4c 89 ef\ne8 a5 7e ff ff\n4c 89 3d 46 5a 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p586
S'.text:00000000004099e0\n.text:00000000004099e1\n.text:00000000004099e3\n.text:00000000004099e5\n.text:00000000004099e7\n.text:00000000004099e9\n.text:00000000004099ea\n.text:00000000004099f1\n.text:00000000004099f8\n.text:00000000004099fb\n.text:0000000000409a01\n.text:0000000000409a06\n.text:0000000000409a0b\n.text:0000000000409a0e\n.text:0000000000409a11\n.text:0000000000409a13\n.text:0000000000409a16\n.text:0000000000409a18\n.text:0000000000409a1d\n.text:0000000000409a20\n.text:0000000000409a25\n.text:0000000000409a28\n.text:0000000000409a2b\n.text:0000000000409a2d\n.text:0000000000409a32\n.text:0000000000409a35\n.text:0000000000409a37\n.text:0000000000409a39\n.text:0000000000409a3d\n.text:0000000000409a42\n.text:0000000000409a47\n.text:0000000000409a4a\n.text:0000000000409a4d\n.text:0000000000409a4f\n.text:0000000000409a52\n.text:0000000000409a55\n.text:0000000000409a58\n.text:0000000000409a5d\n.text:0000000000409a60\n.text:0000000000409a63\n.text:0000000000409a66\n.text:0000000000409a68\n.text:0000000000409a6e\n.text:0000000000409a78\n.text:0000000000409a7d\n.text:0000000000409a87\n.text:0000000000409a8b\n.text:0000000000409a8d\n.text:0000000000409a93\n.text:0000000000409a98\n.text:0000000000409aa2\n.text:0000000000409aa7\n.text:0000000000409ab1\n.text:0000000000409ab5\n.text:0000000000409aba\n.text:0000000000409abc\n.text:0000000000409abf\n.text:0000000000409ac4\n.text:0000000000409ac6\n.text:0000000000409ac8\n.text:0000000000409ace\n.text:0000000000409ad3\n.text:0000000000409ad5\n.text:0000000000409ada\n.text:0000000000409add\n.text:0000000000409ae0\n.text:0000000000409ae6\n.text:0000000000409aeb\n.text:0000000000409af0\n.text:0000000000409af2\n.text:0000000000409af7\n.text:0000000000409afa\n.text:0000000000409aff\n.text:0000000000409b04\n.text:0000000000409b09\n.text:0000000000409b0c\n.text:0000000000409b0f\n.text:0000000000409b12\n.text:0000000000409b15\n.text:0000000000409b18\n.text:0000000000409b1d\n.text:0000000000409b20\n.text:0000000000409b25\n.text:0000000000409b28\n.text:0000000000409b2d\n.text:0000000000409b30\n.text:0000000000409b35\n.text:0000000000409b3a\n.text:0000000000409b3d\n.text:0000000000409b42\n.text:0000000000409b47\n.text:0000000000409b49\n.text:0000000000409b4c\n.text:0000000000409b51\n.text:0000000000409b56\n.text:0000000000409b58\n.text:0000000000409b5b\n.text:0000000000409b5e\n.text:0000000000409b61\n.text:0000000000409b66\n.text:0000000000409b69\n.text:0000000000409b6f\n.text:0000000000409b72\n.text:0000000000409b77\n.text:0000000000409b7a\n.text:0000000000409b7d\n.text:0000000000409b82\n.text:0000000000409b85\n.text:0000000000409b8a\n.text:0000000000409b8f\n.text:0000000000409b92\n.text:0000000000409b94\n.text:0000000000409b98\n.text:0000000000409b9d\n.text:0000000000409ba2\n.text:0000000000409ba5\n.text:0000000000409baa\n.text:0000000000409bad\n.text:0000000000409bb2\n.text:0000000000409bb5\n.text:0000000000409bbb\n.text:0000000000409bbd\n.text:0000000000409bc2\n.text:0000000000409bc6\n.text:0000000000409bcb\n.text:0000000000409bce\n.text:0000000000409bd1\n.text:0000000000409bd7\n.text:0000000000409be0\n.text:0000000000409be3\n.text:0000000000409be8\n.text:0000000000409beb\n.text:0000000000409bee\n.text:0000000000409bf4\n.text:0000000000409c00\n.text:0000000000409c03\n.text:0000000000409c08\n.text:0000000000409c0b\n.text:0000000000409c0d\n.text:0000000000409c10\n.text:0000000000409c12\n.text:0000000000409c14\n.text:0000000000409c16\n.text:0000000000409c1b\n.text:0000000000409c1d\n.text:0000000000409c20\n.text:0000000000409c25\n.text:0000000000409c27\n.text:0000000000409c2c\n.text:0000000000409c2f\n.text:0000000000409c34\n.text:0000000000409c37\n.text:0000000000409c3c\n.text:0000000000409c41\n.text:0000000000409c44\n.text:0000000000409c46\n.text:0000000000409c4b\n.text:0000000000409c4d\n.text:0000000000409c53\n.text:0000000000409c56\n.text:0000000000409c5b\n.text:0000000000409c62\n.text:0000000000409c65\n.text:0000000000409c6c\n.text:0000000000409c6d\n.text:0000000000409c6f\n.text:0000000000409c71\n.text:0000000000409c73\n.text:0000000000409c75\n.text:0000000000409c76\n'
p587
tp588
sS'nl_langinfo'
p589
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p590
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_0060f200)();\u000a  return pcVar1;\u000a}\u000a\u000a
p591
S'JMP qword ptr [0x0060f200]\n'
p592
S'ff 25 3a d3 20 00\n'
p593
S'.plt:0000000000401ec0\n'
p594
tp595
sS're_search'
p596
(S'\n__stdcall re_search(re_pattern_buffer * __buffer, char * __string, int __length, int __start, int __range, re_registers * __regs)\n'
p597
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint re_search(re_pattern_buffer *__buffer,char *__string,int __length,int __start,int __range,\u000a             re_registers *__regs)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_re_search_0060f220)();\u000a  return iVar1;\u000a}\u000a\u000a
p598
S'JMP qword ptr [0x0060f220]\n'
p599
S'ff 25 1a d3 20 00\n'
p600
S'.plt:0000000000401f00\n'
p601
tp602
sS'sprintf'
p603
(S'\n__stdcall sprintf(char * __s, char * __format)\n'
p604
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sprintf(char *__s,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sprintf_0060f2a8)();\u000a  return iVar1;\u000a}\u000a\u000a
p605
S'JMP qword ptr [0x0060f2a8]\n'
p606
S'ff 25 92 d2 20 00\n'
p607
S'.plt:0000000000402010\n'
p608
tp609
sS'x2realloc'
p610
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p611
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p612
S'MOV EDX,0x1\nJMP 0x00408c40\n'
p613
S'ba 01 00 00 00\neb 89\n'
p614
S'.text:0000000000408cb0\n.text:0000000000408cb5\n'
p615
tp616
sS'strlen'
p617
(S'\n__stdcall strlen(char * __s)\n'
p618
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_0060f0c8)();\u000a  return sVar1;\u000a}\u000a\u000a
p619
S'JMP qword ptr [0x0060f0c8]\n'
p620
S'ff 25 72 d4 20 00\n'
p621
S'.plt:0000000000401c50\n'
p622
tp623
sS'memcmp'
p624
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p625
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_0060f178)();\u000a  return iVar1;\u000a}\u000a\u000a
p626
S'JMP qword ptr [0x0060f178]\n'
p627
S'ff 25 c2 d3 20 00\n'
p628
S'.plt:0000000000401db0\n'
p629
tp630
sS'quotearg_n_style_mem'
p631
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p632
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p633
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00407f70\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00407d40\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p634
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p635
S'.text:0000000000407fd0\n.text:0000000000407fd1\n.text:0000000000407fd3\n.text:0000000000407fd5\n.text:0000000000407fd6\n.text:0000000000407fda\n.text:0000000000407fdd\n.text:0000000000407fe0\n.text:0000000000407fe2\n.text:0000000000407fe5\n.text:0000000000407fe8\n.text:0000000000407fed\n.text:0000000000407fef\n.text:0000000000407ff2\n.text:0000000000407ff5\n.text:0000000000407ff8\n.text:0000000000407ffd\n.text:0000000000408001\n.text:0000000000408002\n.text:0000000000408004\n.text:0000000000408006\n.text:0000000000408007\n'
p636
tp637
sS'_exit'
p638
(S'\n__stdcall _exit(int __status)\n'
p639
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_0060f050)();\u000a  return;\u000a}\u000a\u000a
p640
S'JMP qword ptr [0x0060f050]\n'
p641
S'ff 25 ea d4 20 00\n'
p642
S'.plt:0000000000401b60\n'
p643
tp644
sS'visit_non_existing_nofollow'
p645
(S'\n__stdcall visit_non_existing_nofollow(process_data * procdata, void * context)\n'
p646
V\u000aint visit_non_existing_nofollow(process_data *procdata,void *context)\u000a\u000a{\u000a  int iVar1;\u000a  stat st;\u000a  stat local_90;\u000a  \u000a  iVar1 = lstat(procdata->original_filename,&local_90);\u000a  return (int)((uint)(iVar1 == 0) * 3 + 1);\u000a}\u000a\u000a
p647
S'SUB RSP,0x98\nMOV RDI,qword ptr [RDI + 0x10]\nLEA RSI,[RSP + 0x8]\nCALL 0x00409ee0\nXOR ECX,ECX\nTEST EAX,EAX\nSETZ CL\nLEA EAX,[RCX + RCX*0x2 + 0x1]\nADD RSP,0x98\nRET\n'
p648
S'48 81 ec 98 00 00 00\n48 8b 7f 10\n48 8d 74 24 08\ne8 7b 63 00 00\n31 c9\n85 c0\n0f 94 c1\n8d 44 49 01\n48 81 c4 98 00 00 00\nc3\n'
p649
S'.text:0000000000403b50\n.text:0000000000403b57\n.text:0000000000403b5b\n.text:0000000000403b60\n.text:0000000000403b65\n.text:0000000000403b67\n.text:0000000000403b69\n.text:0000000000403b6c\n.text:0000000000403b70\n.text:0000000000403b77\n'
p650
tp651
sS'process_or'
p652
(S'\n__stdcall process_or(process_data * procdata)\n'
p653
V\u000aint process_or(process_data *procdata)\u000a\u000a{\u000a  uint uVar1;\u000a  uint uVar2;\u000a  \u000a  uVar1 = visit(inspectors,(process_data *)0x5,(visitor *)procdata);\u000a  uVar2 = 4;\u000a  if (uVar1 != 1) {\u000a    uVar2 = uVar1;\u000a  }\u000a  if ((uVar2 & 0xc) == 0) {\u000a    uVar1 = visit(past_pat_inspector,(process_data *)0x1,(visitor *)procdata);\u000a    uVar2 = 2;\u000a    if (uVar1 != 1) {\u000a      uVar2 = uVar1;\u000a    }\u000a  }\u000a  return (int)uVar2;\u000a}\u000a\u000a
p654
S'PUSH RBX\nMOV RBX,RDI\nMOV RDI,qword ptr [0x0060f518]\nMOV RCX,qword ptr [0x0060f528]\nMOV ESI,0x5\nMOV RDX,RBX\nCALL 0x00404260\nMOV ECX,EAX\nCMP ECX,0x1\nMOV EAX,0x4\nCMOVNZ EAX,ECX\nTEST AL,0xc\nJNZ 0x00403da3\nMOV RDI,qword ptr [0x0060f528]\nMOV ESI,0x1\nXOR ECX,ECX\nMOV RDX,RBX\nCALL 0x00404260\nMOV ECX,EAX\nCMP ECX,0x1\nMOV EAX,0x2\nCMOVNZ EAX,ECX\nPOP RBX\nRET\n'
p655
S'53\n48 89 fb\n48 8b 3d bd b7 20 00\n48 8b 0d c6 b7 20 00\nbe 05 00 00 00\n48 89 da\ne8 f1 04 00 00\n89 c1\n83 f9 01\nb8 04 00 00 00\n0f 45 c1\na8 0c\n75 23\n48 8b 3d a1 b7 20 00\nbe 01 00 00 00\n31 c9\n48 89 da\ne8 ca 04 00 00\n89 c1\n83 f9 01\nb8 02 00 00 00\n0f 45 c1\n5b\nc3\n'
p656
S'.text:0000000000403d50\n.text:0000000000403d51\n.text:0000000000403d54\n.text:0000000000403d5b\n.text:0000000000403d62\n.text:0000000000403d67\n.text:0000000000403d6a\n.text:0000000000403d6f\n.text:0000000000403d71\n.text:0000000000403d74\n.text:0000000000403d79\n.text:0000000000403d7c\n.text:0000000000403d7e\n.text:0000000000403d80\n.text:0000000000403d87\n.text:0000000000403d8c\n.text:0000000000403d8e\n.text:0000000000403d91\n.text:0000000000403d96\n.text:0000000000403d98\n.text:0000000000403d9b\n.text:0000000000403da0\n.text:0000000000403da3\n.text:0000000000403da4\n'
p657
tp658
sS'bkm_scale_by_power'
p659
(S'\n__stdcall bkm_scale_by_power(uintmax_t * x)\n'
p660
V\u000astrtol_error bkm_scale_by_power(uintmax_t *x)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  int in_EDX;\u000a  strtol_error sVar2;\u000a  \u000a  sVar2 = LONGINT_OK;\u000a  if (in_EDX != 0) {\u000a    do {\u000a      sVar1 = bkm_scale(x);\u000a      sVar2 = sVar2 | sVar1;\u000a      in_EDX = in_EDX + -1;\u000a    } while (in_EDX != 0);\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p661
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R14D,ESI\nMOV R15,RDI\nXOR EBP,EBP\nTEST EBX,EBX\nJZ 0x00409111\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nMOV ESI,R14D\nCALL 0x004090b0\nOR EBP,EAX\nDEC EBX\nJNZ 0x00409100\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p662
S'55\n41 57\n41 56\n53\n50\n89 d3\n41 89 f6\n49 89 ff\n31 ed\n85 db\n74 1c\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\n44 89 f6\ne8 a5 ff ff ff\n09 c5\nff cb\n75 ef\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p663
S'.text:00000000004090e0\n.text:00000000004090e1\n.text:00000000004090e3\n.text:00000000004090e5\n.text:00000000004090e6\n.text:00000000004090e7\n.text:00000000004090e9\n.text:00000000004090ec\n.text:00000000004090ef\n.text:00000000004090f1\n.text:00000000004090f3\n.text:00000000004090f5\n.text:0000000000409100\n.text:0000000000409103\n.text:0000000000409106\n.text:000000000040910b\n.text:000000000040910d\n.text:000000000040910f\n.text:0000000000409111\n.text:0000000000409113\n.text:0000000000409117\n.text:0000000000409118\n.text:000000000040911a\n.text:000000000040911c\n.text:000000000040911d\n'
p664
tp665
sS'argmatch_valid'
p666
(S'\n__stdcall argmatch_valid(char * * arglist, char * vallist, size_t valsize)\n'
p667
V\u000avoid argmatch_valid(char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  FILE *__stream;\u000a  int iVar1;\u000a  char *__s;\u000a  char *__s1;\u000a  long lVar2;\u000a  \u000a  __s = (char *)dcgettext(0,"Valid arguments are:",5);\u000a  fputs(__s,stderr);\u000a  __s = *arglist;\u000a  if (__s != (char *)0x0) {\u000a    __s1 = (char *)0x0;\u000a    lVar2 = 0;\u000a    do {\u000a      __stream = stderr;\u000a      if ((lVar2 == 0) || (iVar1 = memcmp(__s1,vallist,valsize), iVar1 != 0)) {\u000a        __s = quote(__s);\u000a        fprintf(__stream,"\u005cn  - %s",__s,__s);\u000a        __s1 = vallist;\u000a      }\u000a      else {\u000a        __s = quote(__s);\u000a        fprintf(__stream,", %s",__s,__s);\u000a      }\u000a      __s = arglist[lVar2 + 1];\u000a      lVar2 = lVar2 + 1;\u000a      vallist = vallist + valsize;\u000a    } while (__s != (char *)0x0);\u000a  }\u000a  (*(code *)PTR__IO_putc_0060f108)(10,stderr);\u000a  return;\u000a}\u000a\u000a
p668
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBP,RDX\nMOV R13,RSI\nMOV R15,RDI\nXOR EDI,EDI\nMOV ESI,0x40c609\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RSI,qword ptr [0x0060f4a0]\nMOV RDI,RAX\nCALL 0x00401d10\nMOV RBX,qword ptr [R15]\nTEST RBX,RBX\nMOV R12,qword ptr [0x0060f4a0]\nJNZ 0x004095de\nMOV EDI,0xa\nMOV RSI,R12\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00401cd0\nMOV qword ptr [RSP],RBP\nXOR EBP,EBP\nXOR R14D,R14D\nNOP word ptr [RAX + RAX*0x1]\nTEST R14,R14\nJZ 0x00409630\nMOV RDI,RBP\nMOV RSI,R13\nMOV RDX,qword ptr [RSP]\nCALL 0x00401db0\nTEST EAX,EAX\nJNZ 0x00409630\nMOV RDI,RBX\nCALL 0x00408230\nMOV RCX,RAX\nMOV ESI,0x40c626\nXOR EAX,EAX\nMOV RDI,R12\nMOV RDX,RCX\nCALL 0x00401df0\nJMP 0x00409650\nMOV RDI,RBX\nCALL 0x00408230\nMOV RCX,RAX\nMOV ESI,0x40c61e\nXOR EAX,EAX\nMOV RDI,R12\nMOV RDX,RCX\nCALL 0x00401df0\nMOV RBP,R13\nMOV RBX,qword ptr [R15 + R14*0x8 + 0x8]\nINC R14\nMOV R12,qword ptr [0x0060f4a0]\nADD R13,qword ptr [RSP]\nTEST RBX,RBX\nJNZ 0x004095f0\nJMP 0x004095c3\n'
p669
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n48 89 d5\n49 89 f5\n49 89 ff\n31 ff\nbe 09 c6 40 00\nba 05 00 00 00\ne8 8b 86 ff ff\n48 8b 35 f4 5e 20 00\n48 89 c7\ne8 5c 87 ff ff\n49 8b 1f\n48 85 db\n4c 8b 25 df 5e 20 00\n75 1b\nbf 0a 00 00 00\n4c 89 e6\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 f2 86 ff ff\n48 89 2c 24\n31 ed\n45 31 f6\n66 0f 1f 84 00 00 00 00 00\n4d 85 f6\n74 3b\n48 89 ef\n4c 89 ee\n48 8b 14 24\ne8 ac 87 ff ff\n85 c0\n75 28\n48 89 df\ne8 20 ec ff ff\n48 89 c1\nbe 26 c6 40 00\n31 c0\n4c 89 e7\n48 89 ca\ne8 cb 87 ff ff\neb 29\n48 89 df\ne8 f8 eb ff ff\n48 89 c1\nbe 1e c6 40 00\n31 c0\n4c 89 e7\n48 89 ca\ne8 a3 87 ff ff\n4c 89 ed\n4b 8b 5c f7 08\n49 ff c6\n4c 8b 25 41 5e 20 00\n4c 03 2c 24\n48 85 db\n75 88\ne9 56 ff ff ff\n'
p670
S'.text:0000000000409580\n.text:0000000000409581\n.text:0000000000409583\n.text:0000000000409585\n.text:0000000000409587\n.text:0000000000409589\n.text:000000000040958a\n.text:000000000040958b\n.text:000000000040958e\n.text:0000000000409591\n.text:0000000000409594\n.text:0000000000409596\n.text:000000000040959b\n.text:00000000004095a0\n.text:00000000004095a5\n.text:00000000004095ac\n.text:00000000004095af\n.text:00000000004095b4\n.text:00000000004095b7\n.text:00000000004095ba\n.text:00000000004095c1\n.text:00000000004095c3\n.text:00000000004095c8\n.text:00000000004095cb\n.text:00000000004095cf\n.text:00000000004095d0\n.text:00000000004095d2\n.text:00000000004095d4\n.text:00000000004095d6\n.text:00000000004095d8\n.text:00000000004095d9\n.text:00000000004095de\n.text:00000000004095e2\n.text:00000000004095e4\n.text:00000000004095e7\n.text:00000000004095f0\n.text:00000000004095f3\n.text:00000000004095f5\n.text:00000000004095f8\n.text:00000000004095fb\n.text:00000000004095ff\n.text:0000000000409604\n.text:0000000000409606\n.text:0000000000409608\n.text:000000000040960b\n.text:0000000000409610\n.text:0000000000409613\n.text:0000000000409618\n.text:000000000040961a\n.text:000000000040961d\n.text:0000000000409620\n.text:0000000000409625\n.text:0000000000409630\n.text:0000000000409633\n.text:0000000000409638\n.text:000000000040963b\n.text:0000000000409640\n.text:0000000000409642\n.text:0000000000409645\n.text:0000000000409648\n.text:000000000040964d\n.text:0000000000409650\n.text:0000000000409655\n.text:0000000000409658\n.text:000000000040965f\n.text:0000000000409663\n.text:0000000000409666\n.text:0000000000409668\n'
p671
tp672
sS'xrealloc'
p673
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p674
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p675
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00408c27\nTEST RBX,RBX\nJNZ 0x00408c27\nCALL 0x00401b00\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401f20\nTEST RBX,RBX\nJZ 0x00408c39\nTEST RAX,RAX\nJZ 0x00408c3b\nPOP RBX\nRET\nCALL 0x00408d60\n'
p676
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 dd 8e ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 f1 92 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p677
S'.text:0000000000408c10\n.text:0000000000408c11\n.text:0000000000408c14\n.text:0000000000408c17\n.text:0000000000408c19\n.text:0000000000408c1c\n.text:0000000000408c1e\n.text:0000000000408c23\n.text:0000000000408c25\n.text:0000000000408c26\n.text:0000000000408c27\n.text:0000000000408c2a\n.text:0000000000408c2f\n.text:0000000000408c32\n.text:0000000000408c34\n.text:0000000000408c37\n.text:0000000000408c39\n.text:0000000000408c3a\n.text:0000000000408c3b\n'
p678
tp679
sS'visit_count'
p680
(S'\n__stdcall visit_count(process_data * procdata, void * context)\n'
p681
V\u000aint visit_count(process_data *procdata,void *context)\u000a\u000a{\u000a  *(long *)((long)context + 8) = *(long *)((long)context + 8) + 1;\u000a  return 1;\u000a}\u000a\u000a
p682
S'INC qword ptr [RSI + 0x8]\nMOV EAX,0x1\nRET\n'
p683
S'48 ff 46 08\nb8 01 00 00 00\nc3\n'
p684
S'.text:0000000000403ce0\n.text:0000000000403ce4\n.text:0000000000403ce9\n'
p685
tp686
sS'get_regex_type_context'
p687
(S'\n__stdcall get_regex_type_context()\n'
p688
V\u000auint get_regex_type_context(void)\u000a\u000a{\u000a  uint uVar1;\u000a  uint in_EDI;\u000a  \u000a  uVar1 = 0;\u000a  if (in_EDI < 0xd) {\u000a    uVar1 = regex_map[(ulong)in_EDI].context;\u000a  }\u000a  return uVar1;\u000a}\u000a\u000a
p689
S'XOR EAX,EAX\nCMP EDI,0xc\nJA 0x004048c3\nMOV EAX,EDI\nSHL RAX,0x4\nMOV EAX,dword ptr [0x60f328 + RAX]\nRET\n'
p690
S'31 c0\n83 ff 0c\n77 0c\n89 f8\n48 c1 e0 04\n8b 80 28 f3 60 00\nc3\n'
p691
S'.text:00000000004048b0\n.text:00000000004048b2\n.text:00000000004048b5\n.text:00000000004048b7\n.text:00000000004048b9\n.text:00000000004048bd\n.text:00000000004048c3\n'
p692
tp693
sS'add_visitor'
p694
(S'\n__stdcall add_visitor(visitfunc * fn, void * context)\n'
p695
V\u000avoid add_visitor(int (*fn)(process_data *,void *),void *context)\u000a\u000a{\u000a  visitor *pvVar1;\u000a  visitor **ppvVar2;\u000a  \u000a  pvVar1 = (visitor *)xmalloc(0x18);\u000a  pvVar1->inspector = fn;\u000a  pvVar1->context = context;\u000a  pvVar1->next = (visitor *)0x0;\u000a  ppvVar2 = &inspectors;\u000a  if (lastinspector != (visitor *)0x0) {\u000a    ppvVar2 = &lastinspector->next;\u000a  }\u000a  *ppvVar2 = pvVar1;\u000a  lastinspector = pvVar1;\u000a  return;\u000a}\u000a\u000a
p696
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nMOV EDI,0x18\nCALL 0x00408bd0\nMOV qword ptr [RAX],RBX\nMOV qword ptr [RAX + 0x8],R14\nMOV qword ptr [RAX + 0x10],0x0\nMOV RCX,qword ptr [0x0060f520]\nTEST RCX,RCX\nLEA RCX,[RCX + 0x10]\nMOV EDX,0x60f518\nCMOVNZ RDX,RCX\nMOV qword ptr [RDX],RAX\nMOV qword ptr [0x0060f520],RAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p697
S'41 56\n53\n50\n49 89 f6\n48 89 fb\nbf 18 00 00 00\ne8 7c 56 00 00\n48 89 18\n4c 89 70 08\n48 c7 40 10 00 00 00 00\n48 8b 0d b6 bf 20 00\n48 85 c9\n48 8d 49 10\nba 18 f5 60 00\n48 0f 45 d1\n48 89 02\n48 89 05 9c bf 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n'
p698
S'.text:0000000000403540\n.text:0000000000403542\n.text:0000000000403543\n.text:0000000000403544\n.text:0000000000403547\n.text:000000000040354a\n.text:000000000040354f\n.text:0000000000403554\n.text:0000000000403557\n.text:000000000040355b\n.text:0000000000403563\n.text:000000000040356a\n.text:000000000040356d\n.text:0000000000403571\n.text:0000000000403576\n.text:000000000040357a\n.text:000000000040357d\n.text:0000000000403584\n.text:0000000000403588\n.text:0000000000403589\n.text:000000000040358b\n'
p699
tp700
sS'decode_value'
p701
(S'\n__stdcall decode_value(uchar * data, GetwordEndianState * endian_state_flag, char * filename)\n'
p702
V\u000aint decode_value(uchar *data,GetwordEndianState *endian_state_flag,char *filename)\u000a\u000a{\u000a  uint uVar1;\u000a  uint uVar2;\u000a  undefined8 uVar3;\u000a  char *pcVar4;\u000a  uint uVar5;\u000a  int iVar6;\u000a  \u000a  uVar1 = *(uint *)data;\u000a  uVar5 = uVar1 >> 0x18 | (uVar1 & 0xff0000) >> 8 | (uVar1 & 0xff00) << 8 | uVar1 << 0x18;\u000a  uVar2 = uVar5;\u000a  if ((*(int *)filename != 2) && (uVar2 = uVar1, *(int *)filename == 0)) {\u000a    iVar6 = (int)endian_state_flag;\u000a    if (iVar6 < (int)uVar1) {\u000a      uVar2 = uVar1;\u000a      if ((int)uVar5 <= iVar6) {\u000a        uVar3 = dcgettext(0,"WARNING: locate database %s was built with a different byte order",5);\u000a        pcVar4 = quotearg_n_style((char *)0x0);\u000a        error(0,0,uVar3,pcVar4);\u000a        *(undefined4 *)filename = 2;\u000a        uVar2 = uVar5;\u000a      }\u000a    }\u000a    else {\u000a      uVar2 = uVar1;\u000a      if (iVar6 < (int)uVar5) {\u000a        *(undefined4 *)filename = 1;\u000a        uVar2 = uVar1;\u000a      }\u000a    }\u000a  }\u000a  return (int)uVar2;\u000a}\u000a\u000a
p703
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV RBX,RDX\nMOV EAX,dword ptr [RDI]\nMOV EBP,EAX\nBSWAP EBP\nMOV ECX,dword ptr [RBX]\nCMP ECX,0x2\nJZ 0x004043e0\nTEST ECX,ECX\nJNZ 0x004043e2\nCMP EAX,ESI\nJLE 0x004043ed\nCMP EBP,ESI\nJG 0x004043e2\nXOR EDI,EDI\nMOV ESI,0x40b395\nMOV EDX,0x5\nCALL 0x00401c30\nMOV R15,RAX\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,R14\nCALL 0x00407f30\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R15\nCALL 0x00401f70\nMOV dword ptr [RBX],0x2\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP EBP,ESI\nJLE 0x004043e2\nMOV dword ptr [RBX],0x1\nJMP 0x004043e2\n'
p704
S'55\n41 57\n41 56\n53\n50\n49 89 ce\n48 89 d3\n8b 07\n89 c5\n0f cd\n8b 0b\n83 f9 02\n74 46\n85 c9\n75 44\n39 f0\n7e 4b\n39 f5\n7f 3c\n31 ff\nbe 95 b3 40 00\nba 05 00 00 00\ne8 79 d8 ff ff\n49 89 c7\n31 ff\nbe 08 00 00 00\n4c 89 f2\ne8 67 3b 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n4c 89 fa\ne8 96 db ff ff\nc7 03 02 00 00 00\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n39 f5\n7e f1\nc7 03 01 00 00 00\neb e9\n'
p705
S'.text:0000000000404380\n.text:0000000000404381\n.text:0000000000404383\n.text:0000000000404385\n.text:0000000000404386\n.text:0000000000404387\n.text:000000000040438a\n.text:000000000040438d\n.text:000000000040438f\n.text:0000000000404391\n.text:0000000000404393\n.text:0000000000404395\n.text:0000000000404398\n.text:000000000040439a\n.text:000000000040439c\n.text:000000000040439e\n.text:00000000004043a0\n.text:00000000004043a2\n.text:00000000004043a4\n.text:00000000004043a6\n.text:00000000004043a8\n.text:00000000004043ad\n.text:00000000004043b2\n.text:00000000004043b7\n.text:00000000004043ba\n.text:00000000004043bc\n.text:00000000004043c1\n.text:00000000004043c4\n.text:00000000004043c9\n.text:00000000004043cc\n.text:00000000004043ce\n.text:00000000004043d0\n.text:00000000004043d2\n.text:00000000004043d5\n.text:00000000004043da\n.text:00000000004043e0\n.text:00000000004043e2\n.text:00000000004043e6\n.text:00000000004043e7\n.text:00000000004043e9\n.text:00000000004043eb\n.text:00000000004043ec\n.text:00000000004043ed\n.text:00000000004043ef\n.text:00000000004043f1\n.text:00000000004043f7\n'
p706
tp707
sS'freea'
p708
(S'\n__stdcall freea(void * p)\n'
p709
V\u000avoid freea(void *p)\u000a\u000a{\u000a  void **ppvVar1;\u000a  void *pvVar2;\u000a  void **ppvVar3;\u000a  \u000a  if ((p != (void *)0x0) && (*(int *)((long)p + -4) == 0x1415fb4a)) {\u000a    if (mmalloca_results[(ulong)p % 0x101] != (void *)0x0) {\u000a      ppvVar3 = mmalloca_results + (ulong)p % 0x101;\u000a      pvVar2 = mmalloca_results[(ulong)p % 0x101];\u000a      do {\u000a        if (pvVar2 == p) {\u000a          *ppvVar3 = *(void **)((long)p + -0x10);\u000a          free((void *)((long)p + -0x10));\u000a          return;\u000a        }\u000a        ppvVar1 = (void **)((long)pvVar2 + -0x10);\u000a        ppvVar3 = (void **)((long)pvVar2 + -0x10);\u000a        pvVar2 = *ppvVar1;\u000a      } while (*ppvVar1 != (void *)0x0);\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p710
S'TEST RDI,RDI\nJZ 0x00409d65\nCMP dword ptr [RDI + -0x4],0x1415fb4a\nJNZ 0x00409d65\nMOV RCX,-0xff00ff00ff00ff\nMOV RAX,RDI\nMUL RCX\nSHR RDX,0x8\nMOV RAX,RDX\nSHL RAX,0x8\nADD RAX,RDX\nMOV RCX,RDI\nSUB RCX,RAX\nMOV RAX,qword ptr [0x60f6b0 + RCX*0x8]\nTEST RAX,RAX\nJZ 0x00409d65\nLEA RCX,[0x60f6b0 + RCX*0x8]\nNOP word ptr [RAX + RAX*0x1]\nCMP RAX,RDI\nJZ 0x00409d66\nMOV RCX,RAX\nMOV RAX,qword ptr [RAX + -0x10]\nADD RCX,-0x10\nTEST RAX,RAX\nJNZ 0x00409d50\nRET\nMOV RAX,qword ptr [RDI + -0x10]\nADD RDI,-0x10\nMOV qword ptr [RCX],RAX\nJMP 0x00401b00\n'
p711
S'48 85 ff\n74 60\n81 7f fc 4a fb 15 14\n75 57\n48 b9 01 ff 00 ff 00 ff 00 ff\n48 89 f8\n48 f7 e1\n48 c1 ea 08\n48 89 d0\n48 c1 e0 08\n48 01 d0\n48 89 f9\n48 29 c1\n48 8b 04 cd b0 f6 60 00\n48 85 c0\n74 26\n48 8d 0c cd b0 f6 60 00\n66 0f 1f 84 00 00 00 00 00\n48 39 f8\n74 11\n48 89 c1\n48 8b 40 f0\n48 83 c1 f0\n48 85 c0\n75 eb\nc3\n48 8b 47 f0\n48 83 c7 f0\n48 89 01\ne9 8a 7d ff ff\n'
p712
S'.text:0000000000409d00\n.text:0000000000409d03\n.text:0000000000409d05\n.text:0000000000409d0c\n.text:0000000000409d0e\n.text:0000000000409d18\n.text:0000000000409d1b\n.text:0000000000409d1e\n.text:0000000000409d22\n.text:0000000000409d25\n.text:0000000000409d29\n.text:0000000000409d2c\n.text:0000000000409d2f\n.text:0000000000409d32\n.text:0000000000409d3a\n.text:0000000000409d3d\n.text:0000000000409d3f\n.text:0000000000409d47\n.text:0000000000409d50\n.text:0000000000409d53\n.text:0000000000409d55\n.text:0000000000409d58\n.text:0000000000409d5c\n.text:0000000000409d60\n.text:0000000000409d63\n.text:0000000000409d65\n.text:0000000000409d66\n.text:0000000000409d6a\n.text:0000000000409d6e\n.text:0000000000409d71\n'
p713
tp714
sS'close_stdout'
p715
(S'\n__stdcall close_stdout()\n'
p716
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00404a27;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,&DAT_0040c628,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00404a27:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p717
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x0060f468]\nCALL 0x004098a0\nTEST EAX,EAX\nJZ 0x00404a27\nCMP byte ptr [0x0060f548],0x0\nJZ 0x00404a3c\nCALL 0x00401b40\nCMP dword ptr [RAX],0x20\nJNZ 0x00404a3c\nMOV RDI,qword ptr [0x0060f4a0]\nCALL 0x004098a0\nTEST EAX,EAX\nJNZ 0x00404a81\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x40b8f6\nMOV EDX,0x5\nCALL 0x00401c30\nMOV R14,RAX\nMOV RBX,qword ptr [0x0060f540]\nCALL 0x00401b40\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x00404a8c\nXOR EDI,EDI\nMOV EDX,0x40c628\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00401f70\nMOV EDI,dword ptr [0x0060f3f0]\nCALL 0x00401b60\nMOV EDI,dword ptr [0x0060f3f0]\nCALL 0x00401b60\nMOV RDI,RBX\nCALL 0x004080d0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40b902\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00401f70\nMOV EDI,dword ptr [0x0060f3f0]\nCALL 0x00401b60\n'
p718
S'55\n41 56\n53\n48 8b 3d 5d aa 20 00\ne8 90 4e 00 00\n85 c0\n74 13\n80 3d 2d ab 20 00 00\n74 1f\ne8 1e d1 ff ff\n83 38 20\n75 15\n48 8b 3d 72 aa 20 00\ne8 6d 4e 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe f6 b8 40 00\nba 05 00 00 00\ne8 e3 d1 ff ff\n49 89 c6\n48 8b 1d e9 aa 20 00\ne8 e4 d0 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 28 c6 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 fa d4 ff ff\n8b 3d 74 a9 20 00\ne8 df d0 ff ff\n8b 3d 69 a9 20 00\ne8 d4 d0 ff ff\n48 89 df\ne8 3c 36 00 00\n48 89 c1\n31 ff\nba 02 b9 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 c6 d4 ff ff\n8b 3d 40 a9 20 00\ne8 ab d0 ff ff\n'
p719
S'.text:0000000000404a00\n.text:0000000000404a01\n.text:0000000000404a03\n.text:0000000000404a04\n.text:0000000000404a0b\n.text:0000000000404a10\n.text:0000000000404a12\n.text:0000000000404a14\n.text:0000000000404a1b\n.text:0000000000404a1d\n.text:0000000000404a22\n.text:0000000000404a25\n.text:0000000000404a27\n.text:0000000000404a2e\n.text:0000000000404a33\n.text:0000000000404a35\n.text:0000000000404a37\n.text:0000000000404a38\n.text:0000000000404a3a\n.text:0000000000404a3b\n.text:0000000000404a3c\n.text:0000000000404a3e\n.text:0000000000404a43\n.text:0000000000404a48\n.text:0000000000404a4d\n.text:0000000000404a50\n.text:0000000000404a57\n.text:0000000000404a5c\n.text:0000000000404a5f\n.text:0000000000404a61\n.text:0000000000404a63\n.text:0000000000404a65\n.text:0000000000404a6a\n.text:0000000000404a6c\n.text:0000000000404a6e\n.text:0000000000404a71\n.text:0000000000404a76\n.text:0000000000404a7c\n.text:0000000000404a81\n.text:0000000000404a87\n.text:0000000000404a8c\n.text:0000000000404a8f\n.text:0000000000404a94\n.text:0000000000404a97\n.text:0000000000404a99\n.text:0000000000404a9e\n.text:0000000000404aa0\n.text:0000000000404aa2\n.text:0000000000404aa5\n.text:0000000000404aaa\n.text:0000000000404ab0\n'
p720
tp721
sS'version_etc_ar'
p722
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p723
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p724
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00408a30\nJMP 0x00408700\n'
p725
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 bf fc ff ff\n'
p726
S'.text:0000000000408a20\n.text:0000000000408a27\n.text:0000000000408a30\n.text:0000000000408a36\n.text:0000000000408a3a\n.text:0000000000408a3c\n'
p727
tp728
sS'strtoumax'
p729
(S'\n__stdcall strtoumax(char * __nptr, char * * __endptr, int __base)\n'
p730
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000auintmax_t strtoumax(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoumax_0060f290)();\u000a  return uVar1;\u000a}\u000a\u000a
p731
S'JMP qword ptr [0x0060f290]\n'
p732
S'ff 25 aa d2 20 00\n'
p733
S'.plt:0000000000401fe0\n'
p734
tp735
sS'__ctype_tolower_loc'
p736
(S'\n__stdcall __ctype_tolower_loc()\n'
p737
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__int32_t ** __ctype_tolower_loc(void)\u000a\u000a{\u000a  __int32_t **pp_Var1;\u000a  \u000a  pp_Var1 = (__int32_t **)(*(code *)PTR___ctype_tolower_loc_0060f2f0)();\u000a  return pp_Var1;\u000a}\u000a\u000a
p738
S'JMP qword ptr [0x0060f2f0]\n'
p739
S'ff 25 4a d2 20 00\n'
p740
S'.plt:00000000004020a0\n'
p741
tp742
sS'setuid'
p743
(S'\n__stdcall setuid(__uid_t __uid)\n'
p744
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint setuid(__uid_t __uid)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_setuid_0060f2c0)();\u000a  return iVar1;\u000a}\u000a\u000a
p745
S'JMP qword ptr [0x0060f2c0]\n'
p746
S'ff 25 7a d2 20 00\n'
p747
S'.plt:0000000000402040\n'
p748
tp749
sS'mbuiter_multi_copy'
p750
(S'\n__stdcall mbuiter_multi_copy(mbuiter_multi * new_iter, mbuiter_multi * old_iter)\n'
p751
V\u000avoid mbuiter_multi_copy(mbuiter_multi *new_iter,mbuiter_multi *old_iter)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = old_iter->in_shift;\u000a  new_iter->in_shift = _Var1;\u000a  if (_Var1 == false) {\u000a    new_iter->state = (mbstate_t)0x0;\u000a  }\u000a  else {\u000a    new_iter->state = old_iter->state;\u000a  }\u000a  new_iter->next_done = old_iter->next_done;\u000a  mb_copy((mbchar_t *)&new_iter->cur,(mbchar_t *)&old_iter->cur);\u000a  return;\u000a}\u000a\u000a
p752
S'MOV AL,byte ptr [RSI]\nTEST AL,AL\nMOV byte ptr [RDI],AL\nJZ 0x00406d22\nMOV RAX,qword ptr [RSI + 0x4]\nMOV qword ptr [RDI + 0x4],RAX\nJMP 0x00406d2a\nMOV qword ptr [RDI + 0x4],0x0\nMOV AL,byte ptr [RSI + 0xc]\nMOV byte ptr [RDI + 0xc],AL\nADD RDI,0x10\nADD RSI,0x10\nJMP 0x00409da0\n'
p753
S'8a 06\n84 c0\n88 07\n74 0a\n48 8b 46 04\n48 89 47 04\neb 08\n48 c7 47 04 00 00 00 00\n8a 46 0c\n88 47 0c\n48 83 c7 10\n48 83 c6 10\ne9 63 30 00 00\n'
p754
S'.text:0000000000406d10\n.text:0000000000406d12\n.text:0000000000406d14\n.text:0000000000406d16\n.text:0000000000406d18\n.text:0000000000406d1c\n.text:0000000000406d20\n.text:0000000000406d22\n.text:0000000000406d2a\n.text:0000000000406d2d\n.text:0000000000406d30\n.text:0000000000406d34\n.text:0000000000406d38\n'
p755
tp756
sS'is_basic'
p757
(S'\n__stdcall is_basic()\n'
p758
V\u000a_Bool is_basic(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)((*(uint *)((long)is_basic_table + (ulong)(in_EDI >> 3 & 0x1c)) >> (in_EDI & 0x1f) &\u000a                 1) != 0);\u000a}\u000a\u000a
p759
S'MOV EAX,EDI\nSHR EAX,0x3\nAND EAX,0x1c\nMOV EAX,dword ptr [0x40ca90 + RAX]\nBT EAX,EDI\nSETC AL\nRET\n'
p760
S'89 f8\nc1 e8 03\n83 e0 1c\n8b 80 90 ca 40 00\n0f a3 f8\n0f 92 c0\nc3\n'
p761
S'.text:0000000000409df0\n.text:0000000000409df2\n.text:0000000000409df5\n.text:0000000000409df8\n.text:0000000000409dfe\n.text:0000000000409e01\n.text:0000000000409e04\n'
p762
tp763
sS'c_isxdigit'
p764
(S'\n__stdcall c_isxdigit()\n'
p765
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p766
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x0040987b\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p767
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p768
S'.text:0000000000409860\n.text:0000000000409863\n.text:0000000000409866\n.text:0000000000409868\n.text:0000000000409872\n.text:0000000000409874\n.text:0000000000409877\n.text:000000000040987a\n.text:000000000040987b\n.text:000000000040987d\n'
p769
tp770
sS'ferror'
p771
(S'\n__stdcall ferror(FILE * __stream)\n'
p772
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_0060f068)();\u000a  return iVar1;\u000a}\u000a\u000a
p773
S'JMP qword ptr [0x0060f068]\n'
p774
S'ff 25 d2 d4 20 00\n'
p775
S'.plt:0000000000401b90\n'
p776
tp777
sS'__libc_csu_fini'
p778
(S'\n__stdcall __libc_csu_fini()\n'
p779
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p780
S'RET\n'
p781
S'f3 c3\n'
p782
S'.text:0000000000409e80\n'
p783
tp784
sS'getuid'
p785
(S'\n__stdcall getuid()\n'
p786
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__uid_t getuid(void)\u000a\u000a{\u000a  __uid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_getuid_0060f0d8)();\u000a  return _Var1;\u000a}\u000a\u000a
p787
S'JMP qword ptr [0x0060f0d8]\n'
p788
S'ff 25 62 d4 20 00\n'
p789
S'.plt:0000000000401c70\n'
p790
tp791
sS'abort'
p792
(S'\n__stdcall abort()\n'
p793
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_0060f038)();\u000a  return;\u000a}\u000a\u000a
p794
S'JMP qword ptr [0x0060f038]\n'
p795
S'ff 25 02 d5 20 00\n'
p796
S'.plt:0000000000401b30\n'
p797
tp798
sS'strstr'
p799
(S'\n__stdcall strstr(char * __haystack, char * __needle)\n'
p800
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strstr(char *__haystack,char *__needle)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strstr_0060f2e8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p801
S'JMP qword ptr [0x0060f2e8]\n'
p802
S'ff 25 52 d2 20 00\n'
p803
S'.plt:0000000000402090\n'
p804
tp805
sS'group_number'
p806
(S'\n__stdcall group_number(char * number, size_t numberlen, char * grouping, char * thousands_sep)\n'
p807
V\u000achar * group_number(char *number,size_t numberlen,char *grouping,char *thousands_sep)\u000a\u000a{\u000a  byte bVar1;\u000a  size_t __n;\u000a  ulong __n_00;\u000a  char buf [41];\u000a  undefined local_68 [56];\u000a  \u000a  __n = strlen(thousands_sep);\u000a  memcpy(local_68,number,numberlen);\u000a  number = number + numberlen;\u000a  __n_00 = 0xffffffffffffffff;\u000a  while( true ) {\u000a    bVar1 = *grouping;\u000a    if (bVar1 != 0) {\u000a      __n_00 = (ulong)bVar1;\u000a      if (0x7e < bVar1) {\u000a        __n_00 = numberlen;\u000a      }\u000a      grouping = (char *)((byte *)grouping + 1);\u000a    }\u000a    if (numberlen < __n_00) {\u000a      __n_00 = numberlen;\u000a    }\u000a    number = number + -__n_00;\u000a    memcpy(number,local_68 + (numberlen - __n_00),__n_00);\u000a    numberlen = numberlen - __n_00;\u000a    if (numberlen == 0) break;\u000a    number = number + -__n;\u000a    memcpy(number,thousands_sep,__n);\u000a  }\u000a  return number;\u000a}\u000a\u000a
p808
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x48\nMOV R15,RDX\nMOV R12,RSI\nMOV RBX,RDI\nMOV qword ptr [RSP + 0x8],RCX\nMOV RDI,RCX\nCALL 0x00401c50\nMOV R14,RAX\nLEA RDI,[RSP + 0x10]\nMOV RSI,RBX\nMOV RDX,R12\nCALL 0x00401e20\nADD RBX,R12\nMOV R13,R14\nNEG R13\nMOV RBP,-0x1\nJMP 0x00405253\nADD RBX,R13\nMOV RDI,RBX\nMOV RSI,qword ptr [RSP + 0x8]\nMOV RDX,R14\nCALL 0x00401e20\nMOVZX EAX,byte ptr [R15]\nTEST RAX,RAX\nJZ 0x00405268\nCMP AL,0x7f\nCMOVNC RAX,R12\nINC R15\nMOV RBP,RAX\nCMP R12,RBP\nCMOVC RBP,R12\nSUB RBX,RBP\nMOV RAX,R12\nSUB RAX,RBP\nLEA RSI,[RSP + RAX*0x1 + 0x10]\nMOV RDI,RBX\nMOV RDX,RBP\nCALL 0x00401e20\nSUB R12,RBP\nJNZ 0x00405240\nMOV RAX,RBX\nADD RSP,0x48\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p809
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 48\n49 89 d7\n49 89 f4\n48 89 fb\n48 89 4c 24 08\n48 89 cf\ne8 3c ca ff ff\n49 89 c6\n48 8d 7c 24 10\n48 89 de\n4c 89 e2\ne8 f9 cb ff ff\n4c 01 e3\n4d 89 f5\n49 f7 dd\n48 c7 c5 ff ff ff ff\neb 1a\n4c 01 eb\n48 89 df\n48 8b 74 24 08\n4c 89 f2\ne8 cd cb ff ff\n41 0f b6 07\n48 85 c0\n74 0c\n3c 7f\n49 0f 43 c4\n49 ff c7\n48 89 c5\n49 39 ec\n49 0f 42 ec\n48 29 eb\n4c 89 e0\n48 29 e8\n48 8d 74 04 10\n48 89 df\n48 89 ea\ne8 98 cb ff ff\n49 29 ec\n75 b3\n48 89 d8\n48 83 c4 48\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p810
S'.text:00000000004051f0\n.text:00000000004051f1\n.text:00000000004051f3\n.text:00000000004051f5\n.text:00000000004051f7\n.text:00000000004051f9\n.text:00000000004051fa\n.text:00000000004051fe\n.text:0000000000405201\n.text:0000000000405204\n.text:0000000000405207\n.text:000000000040520c\n.text:000000000040520f\n.text:0000000000405214\n.text:0000000000405217\n.text:000000000040521c\n.text:000000000040521f\n.text:0000000000405222\n.text:0000000000405227\n.text:000000000040522a\n.text:000000000040522d\n.text:0000000000405230\n.text:0000000000405237\n.text:0000000000405240\n.text:0000000000405243\n.text:0000000000405246\n.text:000000000040524b\n.text:000000000040524e\n.text:0000000000405253\n.text:0000000000405257\n.text:000000000040525a\n.text:000000000040525c\n.text:000000000040525e\n.text:0000000000405262\n.text:0000000000405265\n.text:0000000000405268\n.text:000000000040526b\n.text:000000000040526f\n.text:0000000000405272\n.text:0000000000405275\n.text:0000000000405278\n.text:000000000040527d\n.text:0000000000405280\n.text:0000000000405283\n.text:0000000000405288\n.text:000000000040528b\n.text:000000000040528d\n.text:0000000000405290\n.text:0000000000405294\n.text:0000000000405295\n.text:0000000000405297\n.text:0000000000405299\n.text:000000000040529b\n.text:000000000040529d\n.text:000000000040529e\n'
p811
tp812
sS'version_etc'
p813
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p814
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p815
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00408af2\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00408a50\nADD RSP,0xd8\nRET\n'
p816
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p817
S'.text:0000000000408ab0\n.text:0000000000408ab7\n.text:0000000000408ab9\n.text:0000000000408abb\n.text:0000000000408ac0\n.text:0000000000408ac5\n.text:0000000000408aca\n.text:0000000000408ad2\n.text:0000000000408ada\n.text:0000000000408ae2\n.text:0000000000408aea\n.text:0000000000408af2\n.text:0000000000408af7\n.text:0000000000408afc\n.text:0000000000408b01\n.text:0000000000408b06\n.text:0000000000408b0e\n.text:0000000000408b13\n.text:0000000000408b1b\n.text:0000000000408b22\n.text:0000000000408b25\n.text:0000000000408b2a\n.text:0000000000408b31\n'
p818
tp819
sS'mb_width_aux'
p820
(S'\n__stdcall mb_width_aux()\n'
p821
V\u000aint mb_width_aux(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  wint_t __wc;\u000a  \u000a  uVar1 = wcwidth(__wc);\u000a  if ((int)uVar1 < 0) {\u000a    iVar2 = iswcntrl(__wc);\u000a    uVar1 = (uint)(iVar2 == 0);\u000a  }\u000a  return (int)uVar1;\u000a}\u000a\u000a
p822
S'PUSH RBX\nMOV EBX,EDI\nCALL 0x00401e70\nTEST EAX,EAX\nJNS 0x00409d9c\nMOV EDI,EBX\nCALL 0x00401bd0\nMOV ECX,EAX\nXOR EAX,EAX\nTEST ECX,ECX\nSETZ AL\nPOP RBX\nRET\n'
p823
S'53\n89 fb\ne8 e8 80 ff ff\n85 c0\n79 10\n89 df\ne8 3d 7e ff ff\n89 c1\n31 c0\n85 c9\n0f 94 c0\n5b\nc3\n'
p824
S'.text:0000000000409d80\n.text:0000000000409d81\n.text:0000000000409d83\n.text:0000000000409d88\n.text:0000000000409d8a\n.text:0000000000409d8c\n.text:0000000000409d8e\n.text:0000000000409d93\n.text:0000000000409d95\n.text:0000000000409d97\n.text:0000000000409d99\n.text:0000000000409d9c\n.text:0000000000409d9d\n'
p825
tp826
sS'default_block_size'
p827
(S'\n__stdcall default_block_size()\n'
p828
V\u000auintmax_t default_block_size(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  uintmax_t uVar2;\u000a  \u000a  pcVar1 = getenv("POSIXLY_CORRECT");\u000a  uVar2 = 0x400;\u000a  if (pcVar1 != (char *)0x0) {\u000a    uVar2 = 0x200;\u000a  }\u000a  return uVar2;\u000a}\u000a\u000a
p829
S'PUSH RAX\nMOV EDI,0x40b975\nCALL 0x00401af0\nTEST RAX,RAX\nMOV ECX,0x200\nMOV EAX,0x400\nCMOVNZ RAX,RCX\nPOP RCX\nRET\n'
p830
S'50\nbf 75 b9 40 00\ne8 05 c7 ff ff\n48 85 c0\nb9 00 02 00 00\nb8 00 04 00 00\n48 0f 45 c1\n59\nc3\n'
p831
S'.text:00000000004053e0\n.text:00000000004053e1\n.text:00000000004053e6\n.text:00000000004053eb\n.text:00000000004053ee\n.text:00000000004053f3\n.text:00000000004053f8\n.text:00000000004053fc\n.text:00000000004053fd\n'
p832
tp833
sS'lseek'
p834
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p835
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_0060f118)();\u000a  return _Var1;\u000a}\u000a\u000a
p836
S'JMP qword ptr [0x0060f118]\n'
p837
S'ff 25 22 d4 20 00\n'
p838
S'.plt:0000000000401cf0\n'
p839
tp840
sS'xstrtol_fatal'
p841
(S'\n__stdcall xstrtol_fatal(option * long_options, char * arg)\n'
p842
V\u000avoid xstrtol_fatal(option *long_options,char *arg)\u000a\u000a{\u000a  xstrtol_error(long_options,arg);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p843
S'PUSH RAX\nMOV R9D,dword ptr [0x0060f3f0]\nCALL 0x00408db0\nCALL 0x00401b30\n'
p844
S'50\n44 8b 0d 58 66 20 00\ne8 13 00 00 00\ne8 8e 8d ff ff\n'
p845
S'.text:0000000000408d90\n.text:0000000000408d91\n.text:0000000000408d98\n.text:0000000000408d9d\n'
p846
tp847
sS'getdelim'
p848
(S'\n__stdcall getdelim(char * * __lineptr, size_t * __n, int __delimiter, FILE * __stream)\n'
p849
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__ssize_t getdelim(char **__lineptr,size_t *__n,int __delimiter,FILE *__stream)\u000a\u000a{\u000a  __ssize_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_getdelim_0060f2e0)();\u000a  return _Var1;\u000a}\u000a\u000a
p850
S'JMP qword ptr [0x0060f2e0]\n'
p851
S'ff 25 5a d2 20 00\n'
p852
S'.plt:0000000000402080\n'
p853
tp854
sS'wcwidth'
p855
(S'\n__stdcall wcwidth(wchar_t __c)\n'
p856
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint wcwidth(wchar_t __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_wcwidth_0060f1d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p857
S'JMP qword ptr [0x0060f1d8]\n'
p858
S'ff 25 62 d3 20 00\n'
p859
S'.plt:0000000000401e70\n'
p860
tp861
sS'quotearg_n_mem'
p862
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p863
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p864
S'MOV ECX,0x60f560\nJMP 0x00407d40\n'
p865
S'b9 60 f5 60 00\ne9 36 fe ff ff\n'
p866
S'.text:0000000000407f00\n.text:0000000000407f05\n'
p867
tp868
sS'calloc'
p869
(S'\n__stdcall calloc(size_t __nmemb, size_t __size)\n'
p870
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * calloc(size_t __nmemb,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_calloc_0060f180)();\u000a  return pvVar1;\u000a}\u000a\u000a
p871
S'JMP qword ptr [0x0060f180]\n'
p872
S'ff 25 ba d3 20 00\n'
p873
S'.plt:0000000000401dc0\n'
p874
tp875
sS'base_len'
p876
(S'\n__stdcall base_len(char * name)\n'
p877
V\u000asize_t base_len(char *name)\u000a\u000a{\u000a  long lVar1;\u000a  size_t sVar2;\u000a  size_t sVar3;\u000a  \u000a  sVar2 = strlen(name);\u000a  do {\u000a    sVar3 = sVar2;\u000a    if (sVar2 < 2) {\u000a      return sVar3;\u000a    }\u000a    lVar1 = sVar2 - 1;\u000a    sVar2 = sVar2 - 1;\u000a  } while (name[lVar1] == '/');\u000a  return sVar3;\u000a}\u000a\u000a
p878
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401c50\nMOV RCX,RAX\nNOP dword ptr [RAX]\nMOV RAX,RCX\nCMP RAX,0x2\nJC 0x00404b44\nLEA RCX,[RAX + -0x1]\nCMP byte ptr [RBX + RAX*0x1 + -0x1],0x2f\nJZ 0x00404b30\nPOP RBX\nRET\n'
p879
S'53\n48 89 fb\ne8 27 d1 ff ff\n48 89 c1\n0f 1f 40 00\n48 89 c8\n48 83 f8 02\n72 0b\n48 8d 48 ff\n80 7c 03 ff 2f\n74 ec\n5b\nc3\n'
p880
S'.text:0000000000404b20\n.text:0000000000404b21\n.text:0000000000404b24\n.text:0000000000404b29\n.text:0000000000404b2c\n.text:0000000000404b30\n.text:0000000000404b33\n.text:0000000000404b37\n.text:0000000000404b39\n.text:0000000000404b3d\n.text:0000000000404b42\n.text:0000000000404b44\n.text:0000000000404b45\n'
p881
tp882
sS'printf'
p883
(S'\n__stdcall printf(char * __format)\n'
p884
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint printf(char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_printf_0060f0f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p885
S'JMP qword ptr [0x0060f0f8]\n'
p886
S'ff 25 42 d4 20 00\n'
p887
S'.plt:0000000000401cb0\n'
p888
tp889
sS'version_etc_va'
p890
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p891
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p892
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x00408a80\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x00408a8c\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00408aa1\nINC R9\nCMP R9,0xa\nJC 0x00408a60\nMOV R8,RSP\nCALL 0x00408700\nADD RSP,0x58\nRET\n'
p893
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 57 fc ff ff\n48 83 c4 58\nc3\n'
p894
S'.text:0000000000408a50\n.text:0000000000408a54\n.text:0000000000408a57\n.text:0000000000408a60\n.text:0000000000408a63\n.text:0000000000408a67\n.text:0000000000408a69\n.text:0000000000408a6c\n.text:0000000000408a70\n.text:0000000000408a74\n.text:0000000000408a77\n.text:0000000000408a80\n.text:0000000000408a84\n.text:0000000000408a88\n.text:0000000000408a8c\n.text:0000000000408a8f\n.text:0000000000408a93\n.text:0000000000408a96\n.text:0000000000408a98\n.text:0000000000408a9b\n.text:0000000000408a9f\n.text:0000000000408aa1\n.text:0000000000408aa4\n.text:0000000000408aa9\n.text:0000000000408aad\n'
p895
tp896
sS'xzalloc'
p897
(S'\n__stdcall xzalloc(size_t s)\n'
p898
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p899
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00408bd0\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00401d30\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p900
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 54 90 ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p901
S'.text:0000000000408cc0\n.text:0000000000408cc2\n.text:0000000000408cc3\n.text:0000000000408cc4\n.text:0000000000408cc7\n.text:0000000000408ccc\n.text:0000000000408ccf\n.text:0000000000408cd1\n.text:0000000000408cd4\n.text:0000000000408cd7\n.text:0000000000408cdc\n.text:0000000000408cdf\n.text:0000000000408ce3\n.text:0000000000408ce4\n.text:0000000000408ce6\n'
p902
tp903
sS'visit_regex'
p904
(S'\n__stdcall visit_regex(process_data * procdata, void * context)\n'
p905
V\u000aint visit_regex(process_data *procdata,void *context)\u000a\u000a{\u000a  char *__s;\u000a  uint uVar1;\u000a  size_t sVar2;\u000a  \u000a  __s = procdata->munged_filename;\u000a  sVar2 = strlen(__s);\u000a  uVar1 = re_search((re_pattern_buffer *)context,__s,(int)sVar2,0,(int)sVar2,(re_registers *)0x0);\u000a  return (int)((uVar1 >> 0x1f) * 2 + 2);\u000a}\u000a\u000a
p906
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,qword ptr [RDI + 0x20]\nMOV RDI,RBX\nCALL 0x00401c50\nXOR ECX,ECX\nXOR R9D,R9D\nMOV RDI,R14\nMOV RSI,RBX\nMOV EDX,EAX\nMOV R8D,EAX\nCALL 0x00401f00\nSHR EAX,0x1f\nLEA EAX,[RAX + RAX*0x1 + 0x2]\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p907
S'41 56\n53\n50\n49 89 f6\n48 8b 5f 20\n48 89 df\ne8 0d e3 ff ff\n31 c9\n45 31 c9\n4c 89 f7\n48 89 de\n89 c2\n41 89 c0\ne8 a8 e5 ff ff\nc1 e8 1f\n8d 44 00 02\n48 83 c4 08\n5b\n41 5e\nc3\n'
p908
S'.text:0000000000403930\n.text:0000000000403932\n.text:0000000000403933\n.text:0000000000403934\n.text:0000000000403937\n.text:000000000040393b\n.text:000000000040393e\n.text:0000000000403943\n.text:0000000000403945\n.text:0000000000403948\n.text:000000000040394b\n.text:000000000040394e\n.text:0000000000403950\n.text:0000000000403953\n.text:0000000000403958\n.text:000000000040395b\n.text:000000000040395f\n.text:0000000000403963\n.text:0000000000403964\n.text:0000000000403966\n'
p909
tp910
sS'process_simple'
p911
(S'\n__stdcall process_simple(process_data * procdata)\n'
p912
V\u000aint process_simple(process_data *procdata)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = visit(inspectors,(process_data *)0x3,(visitor *)procdata);\u000a  return iVar1;\u000a}\u000a\u000a
p913
S'MOV RAX,RDI\nMOV RDI,qword ptr [0x0060f518]\nMOV ESI,0x3\nXOR ECX,ECX\nMOV RDX,RAX\nJMP 0x00404260\n'
p914
S'48 89 f8\n48 8b 3d 5e b7 20 00\nbe 03 00 00 00\n31 c9\n48 89 c2\ne9 97 04 00 00\n'
p915
S'.text:0000000000403db0\n.text:0000000000403db3\n.text:0000000000403dba\n.text:0000000000403dbf\n.text:0000000000403dc1\n.text:0000000000403dc4\n'
p916
tp917
sS'set_max_db_age'
p918
(S'\n__stdcall set_max_db_age(char * s)\n'
p919
V\u000avoid set_max_db_age(char *s)\u000a\u000a{\u000a  uint uVar1;\u000a  undefined8 uVar2;\u000a  uint *puVar3;\u000a  ulong uVar4;\u000a  char *pcVar5;\u000a  char *local_20;\u000a  \u000a  if (*s == 0) {\u000a    uVar2 = dcgettext(0,"The argument for option --max-database-age must not be empty",5);\u000a    error(1,0,uVar2,uVar2);\u000a  }\u000a  puVar3 = (uint *)__errno_location();\u000a  *puVar3 = 0;\u000a  uVar4 = strtoul(s,&local_20,10);\u000a  if (uVar4 == 0) {\u000a    if (*puVar3 != 0x16) goto LAB_00402cc0;\u000a  }\u000a  else {\u000a    if ((uVar4 != 0xffffffffffffffff) || (*puVar3 != 0x22)) {\u000aLAB_00402cc0:\u000a      if (*local_20 == 0) {\u000a        warn_number_units = (uint)uVar4;\u000a        return;\u000a      }\u000a      uVar2 = dcgettext(0,"Invalid argument %s for option --max-database-age",5);\u000a      pcVar5 = quotearg_n_style((char *)0x0);\u000a      uVar4 = 0;\u000a      goto LAB_00402cf9;\u000a    }\u000a  }\u000a  uVar1 = *puVar3;\u000a  uVar2 = dcgettext(0,"Invalid argument %s for option --max-database-age",5);\u000a  pcVar5 = quotearg_n_style((char *)0x0);\u000a  uVar4 = (ulong)uVar1;\u000aLAB_00402cf9:\u000a  error(1,uVar4,uVar2,pcVar5);\u000a  return;\u000a}\u000a\u000a
p920
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV R14,RDI\nCMP byte ptr [R14],0x0\nJNZ 0x00402c56\nXOR EDI,EDI\nMOV ESI,0x40aadf\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401f70\nCALL 0x00401b40\nMOV RBX,RAX\nMOV dword ptr [RBX],0x0\nLEA RSI,[RSP + 0x8]\nMOV EDX,0xa\nMOV RDI,R14\nCALL 0x00401ff0\nTEST RAX,RAX\nJZ 0x00402c88\nCMP RAX,-0x1\nJNZ 0x00402cc0\nCMP dword ptr [RBX],0x22\nJZ 0x00402c8d\nJMP 0x00402cc0\nCMP dword ptr [RBX],0x16\nJNZ 0x00402cc0\nMOV EBP,dword ptr [RBX]\nXOR EDI,EDI\nMOV ESI,0x40ab1c\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,R14\nCALL 0x00407f30\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBP\nJMP 0x00402cf9\nMOV RCX,qword ptr [RSP + 0x8]\nCMP byte ptr [RCX],0x0\nJZ 0x00402d03\nXOR EDI,EDI\nMOV ESI,0x40ab1c\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,R14\nCALL 0x00407f30\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401f70\nJMP 0x00402d09\nMOV dword ptr [0x0060f310],EAX\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p921
S'55\n41 56\n53\n48 83 ec 10\n49 89 fe\n41 80 3e 00\n75 25\n31 ff\nbe df aa 40 00\nba 05 00 00 00\ne8 ee ef ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 1a f3 ff ff\ne8 e5 ee ff ff\n48 89 c3\nc7 03 00 00 00 00\n48 8d 74 24 08\nba 0a 00 00 00\n4c 89 f7\ne8 7a f3 ff ff\n48 85 c0\n74 0d\n48 83 f8 ff\n75 3f\n83 3b 22\n74 07\neb 38\n83 3b 16\n75 33\n8b 2b\n31 ff\nbe 1c ab 40 00\nba 05 00 00 00\ne8 90 ef ff ff\n48 89 c3\n31 ff\nbe 08 00 00 00\n4c 89 f2\ne8 7e 52 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 ee\neb 39\n48 8b 4c 24 08\n80 39 00\n74 39\n31 ff\nbe 1c ab 40 00\nba 05 00 00 00\ne8 55 ef ff ff\n48 89 c3\n31 ff\nbe 08 00 00 00\n4c 89 f2\ne8 43 52 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 da\ne8 6f f2 ff ff\neb 06\n89 05 07 c6 20 00\n48 83 c4 10\n5b\n41 5e\n5d\nc3\n'
p922
S'.text:0000000000402c20\n.text:0000000000402c21\n.text:0000000000402c23\n.text:0000000000402c24\n.text:0000000000402c28\n.text:0000000000402c2b\n.text:0000000000402c2f\n.text:0000000000402c31\n.text:0000000000402c33\n.text:0000000000402c38\n.text:0000000000402c3d\n.text:0000000000402c42\n.text:0000000000402c45\n.text:0000000000402c4a\n.text:0000000000402c4c\n.text:0000000000402c4e\n.text:0000000000402c51\n.text:0000000000402c56\n.text:0000000000402c5b\n.text:0000000000402c5e\n.text:0000000000402c64\n.text:0000000000402c69\n.text:0000000000402c6e\n.text:0000000000402c71\n.text:0000000000402c76\n.text:0000000000402c79\n.text:0000000000402c7b\n.text:0000000000402c7f\n.text:0000000000402c81\n.text:0000000000402c84\n.text:0000000000402c86\n.text:0000000000402c88\n.text:0000000000402c8b\n.text:0000000000402c8d\n.text:0000000000402c8f\n.text:0000000000402c91\n.text:0000000000402c96\n.text:0000000000402c9b\n.text:0000000000402ca0\n.text:0000000000402ca3\n.text:0000000000402ca5\n.text:0000000000402caa\n.text:0000000000402cad\n.text:0000000000402cb2\n.text:0000000000402cb5\n.text:0000000000402cba\n.text:0000000000402cbc\n.text:0000000000402cbe\n.text:0000000000402cc0\n.text:0000000000402cc5\n.text:0000000000402cc8\n.text:0000000000402cca\n.text:0000000000402ccc\n.text:0000000000402cd1\n.text:0000000000402cd6\n.text:0000000000402cdb\n.text:0000000000402cde\n.text:0000000000402ce0\n.text:0000000000402ce5\n.text:0000000000402ce8\n.text:0000000000402ced\n.text:0000000000402cf0\n.text:0000000000402cf5\n.text:0000000000402cf7\n.text:0000000000402cf9\n.text:0000000000402cfc\n.text:0000000000402d01\n.text:0000000000402d03\n.text:0000000000402d09\n.text:0000000000402d0d\n.text:0000000000402d0e\n.text:0000000000402d10\n.text:0000000000402d11\n'
p923
tp924
sS'gettext_quote'
p925
(S'\n__stdcall gettext_quote(char * msgid)\n'
p926
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_0040bfbe;\u000a        pcVar2 = &DAT_0040bfc2;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p927
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x00401c30\nCMP RAX,RBX\nJNZ 0x004082f8\nCALL 0x00409950\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00408300\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x004082a8\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40bfae\nMOV EAX,0x40bfb2\nJMP 0x004082f4\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00408300\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x004082e6\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40bfbe\nMOV EAX,0x40bfc2\nJMP 0x004082f4\nCMP R14D,0x9\nMOV ECX,0x40bfa4\nMOV EAX,0x40aef2\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p928
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 d7 99 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 e9 16 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 ae bf 40 00\nb8 b2 bf 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 be bf 40 00\nb8 c2 bf 40 00\neb 0e\n41 83 fe 09\nb9 a4 bf 40 00\nb8 f2 ae 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p929
S'.text:0000000000408240\n.text:0000000000408241\n.text:0000000000408243\n.text:0000000000408244\n.text:0000000000408247\n.text:000000000040824a\n.text:000000000040824c\n.text:0000000000408251\n.text:0000000000408254\n.text:0000000000408259\n.text:000000000040825c\n.text:0000000000408262\n.text:0000000000408267\n.text:000000000040826a\n.text:000000000040826f\n.text:0000000000408274\n.text:0000000000408279\n.text:000000000040827f\n.text:0000000000408285\n.text:0000000000408288\n.text:000000000040828a\n.text:000000000040828c\n.text:0000000000408291\n.text:0000000000408295\n.text:0000000000408297\n.text:0000000000408299\n.text:000000000040829c\n.text:00000000004082a1\n.text:00000000004082a6\n.text:00000000004082a8\n.text:00000000004082ad\n.text:00000000004082b2\n.text:00000000004082b7\n.text:00000000004082bd\n.text:00000000004082c3\n.text:00000000004082c6\n.text:00000000004082c8\n.text:00000000004082ca\n.text:00000000004082cf\n.text:00000000004082d3\n.text:00000000004082d5\n.text:00000000004082d7\n.text:00000000004082da\n.text:00000000004082df\n.text:00000000004082e4\n.text:00000000004082e6\n.text:00000000004082ea\n.text:00000000004082ef\n.text:00000000004082f4\n.text:00000000004082f8\n.text:00000000004082f9\n.text:00000000004082fb\n.text:00000000004082fc\n'
p930
tp931
sS'clearerr'
p932
(S'\n__stdcall clearerr(FILE * __stream)\n'
p933
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid clearerr(FILE *__stream)\u000a\u000a{\u000a  (*(code *)PTR_clearerr_0060f1a8)();\u000a  return;\u000a}\u000a\u000a
p934
S'JMP qword ptr [0x0060f1a8]\n'
p935
S'ff 25 92 d3 20 00\n'
p936
S'.plt:0000000000401e10\n'
p937
tp938
sS'fclose'
p939
(S'\n__stdcall fclose(FILE * __stream)\n'
p940
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_0060f0a8)();\u000a  return iVar1;\u000a}\u000a\u000a
p941
S'JMP qword ptr [0x0060f0a8]\n'
p942
S'ff 25 92 d4 20 00\n'
p943
S'.plt:0000000000401c10\n'
p944
tp945
sS'__ctype_get_mb_cur_max'
p946
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p947
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_0060f0c0)();\u000a  return sVar1;\u000a}\u000a\u000a
p948
S'JMP qword ptr [0x0060f0c0]\n'
p949
S'ff 25 7a d4 20 00\n'
p950
S'.plt:0000000000401c40\n'
p951
tp952
sS'lstat'
p953
(S'\n__stdcall lstat(char * __file, stat * __buf)\n'
p954
V\u000aint lstat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___lxstat_0060f0d0)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p955
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x00401c60\n'
p956
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 70 7d ff ff\n'
p957
S'.text:0000000000409ee0\n.text:0000000000409ee3\n.text:0000000000409ee6\n.text:0000000000409eeb\n'
p958
tp959
sS'quotearg_n_style'
p960
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p961
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p962
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00407f70\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00407d40\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p963
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p964
S'.text:0000000000407f30\n.text:0000000000407f31\n.text:0000000000407f33\n.text:0000000000407f34\n.text:0000000000407f38\n.text:0000000000407f3b\n.text:0000000000407f3d\n.text:0000000000407f42\n.text:0000000000407f45\n.text:0000000000407f4a\n.text:0000000000407f51\n.text:0000000000407f53\n.text:0000000000407f56\n.text:0000000000407f59\n.text:0000000000407f5e\n.text:0000000000407f62\n.text:0000000000407f63\n.text:0000000000407f65\n.text:0000000000407f66\n'
p965
tp966
sS'strcasestr'
p967
(S'\n__stdcall strcasestr(char * __haystack, char * __needle)\n'
p968
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcasestr(char *__haystack,char *__needle)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcasestr_0060f280)();\u000a  return pcVar1;\u000a}\u000a\u000a
p969
S'JMP qword ptr [0x0060f280]\n'
p970
S'ff 25 ba d2 20 00\n'
p971
S'.plt:0000000000401fc0\n'
p972
tp973
sS'visit_old_format'
p974
(S'\n__stdcall visit_old_format(process_data * procdata, void * context)\n'
p975
V\u000aint visit_old_format(process_data *procdata,void *context)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  int iVar3;\u000a  uint uVar4;\u000a  size_t sVar5;\u000a  char cVar6;\u000a  long lVar7;\u000a  size_t siz1;\u000a  \u000a  iVar3 = procdata->c;\u000a  if (iVar3 == -1) {\u000a    iVar3 = 8;\u000a  }\u000a  else {\u000a    if (iVar3 == 0x1e) {\u000a      iVar1 = procdata->count;\u000a      iVar3 = iVar1 + -0xe;\u000a      procdata->count = iVar3;\u000a      iVar2 = 0;\u000a      if (-1 < iVar3) {\u000a        iVar2 = iVar3;\u000a      }\u000a      iVar3 = getword(procdata->fp,procdata->dbfile,(long)procdata->len - (long)iVar2,\u000a                      &procdata->endian_state);\u000a      if (iVar3 < 0xe - iVar1) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("word >= minval","locate.c",499,\u000a                      "int visit_old_format(struct process_data *, void *)");\u000a      }\u000a      iVar3 = iVar3 + procdata->count;\u000a      procdata->count = iVar3;\u000a      if (iVar3 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("procdata->count >= 0","locate.c",0x1f5,\u000a                      "int visit_old_format(struct process_data *, void *)");\u000a      }\u000a    }\u000a    else {\u000a      iVar3 = iVar3 + procdata->count + -0xe;\u000a      procdata->count = iVar3;\u000a      if (iVar3 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("procdata->count >= 0","locate.c",0x1fa,\u000a                      "int visit_old_format(struct process_data *, void *)");\u000a      }\u000a    }\u000a    siz1 = SEXT48(procdata->count);\u000a    iVar3 = _IO_getc((_IO_FILE *)procdata->fp);\u000a    procdata->c = iVar3;\u000a    while (0x1e < iVar3) {\u000a      if (iVar3 < 0x80) {\u000a        extend(procdata,siz1,1);\u000a        cVar6 = *(char *)&procdata->c;\u000a        lVar7 = 1;\u000a        sVar5 = siz1;\u000a      }\u000a      else {\u000a        extend(procdata,siz1,2);\u000a        uVar4 = procdata->c & 0x7f;\u000a        procdata->c = uVar4;\u000a        sVar5 = siz1 + 1;\u000a        procdata->original_filename[siz1] = procdata->bigram1[(ulong)uVar4];\u000a        cVar6 = procdata->bigram2[(long)procdata->c];\u000a        lVar7 = 2;\u000a      }\u000a      siz1 = siz1 + lVar7;\u000a      procdata->original_filename[sVar5] = cVar6;\u000a      iVar3 = _IO_getc((_IO_FILE *)procdata->fp);\u000a      procdata->c = iVar3;\u000a    }\u000a    extend(procdata,siz1,1);\u000a    procdata->original_filename[siz1] = 0;\u000a    procdata->len = (int)siz1;\u000a    procdata->munged_filename = procdata->original_filename;\u000a    iVar3 = 1;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p976
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV EAX,dword ptr [R14]\nCMP EAX,-0x1\nJZ 0x004037e2\nCMP EAX,0x1e\nJNZ 0x004037ec\nMOV EAX,dword ptr [R14 + 0x4]\nLEA ECX,[RAX + -0xe]\nMOV dword ptr [R14 + 0x4],ECX\nMOV EBX,0xe\nSUB EBX,EAX\nMOVSXD RDX,dword ptr [R14 + 0x8]\nXOR EAX,EAX\nTEST ECX,ECX\nCMOVNS EAX,ECX\nCDQE\nSUB RDX,RAX\nMOV RDI,qword ptr [R14 + 0x28]\nMOV RSI,qword ptr [R14 + 0x30]\nLEA RCX,[R14 + 0x38]\nCALL 0x004042b0\nCMP EAX,EBX\nJL 0x004038db\nADD EAX,dword ptr [R14 + 0x4]\nMOV dword ptr [R14 + 0x4],EAX\nJNS 0x004037fd\nMOV EDI,0x40b012\nMOV ESI,0x40a797\nMOV EDX,0x1f5\nMOV ECX,0x40afde\nCALL 0x00401d00\nMOV EAX,0x8\nJMP 0x004038d3\nADD EAX,dword ptr [R14 + 0x4]\nADD EAX,-0xe\nMOV dword ptr [R14 + 0x4],EAX\nJS 0x004038f4\nMOVSXD RBX,dword ptr [R14 + 0x4]\nMOV RDI,qword ptr [R14 + 0x28]\nCALL 0x00401eb0\nMOV dword ptr [R14],EAX\nCMP EAX,0x1f\nJL 0x004038aa\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP EAX,0x7f\nJG 0x00403850\nMOV EDX,0x1\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00403700\nMOVZX ECX,byte ptr [R14]\nMOV EDX,0x1\nMOV RAX,RBX\nJMP 0x0040388b\nMOV EDX,0x2\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00403700\nMOV EAX,dword ptr [R14]\nAND EAX,0x7f\nMOV dword ptr [R14],EAX\nMOVZX ECX,byte ptr [R14 + RAX*0x1 + 0x3c]\nMOV RDX,qword ptr [R14 + 0x10]\nLEA RAX,[RBX + 0x1]\nMOV byte ptr [RDX + RBX*0x1],CL\nMOVSXD RCX,dword ptr [R14]\nMOVZX ECX,byte ptr [0xbc + R14 + RCX*0x1]\nMOV EDX,0x2\nMOV RSI,qword ptr [R14 + 0x10]\nADD RBX,RDX\nMOV byte ptr [RSI + RAX*0x1],CL\nMOV RDI,qword ptr [R14 + 0x28]\nCALL 0x00401eb0\nMOV dword ptr [R14],EAX\nCMP EAX,0x1e\nJG 0x00403820\nMOV EDX,0x1\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00403700\nMOV RAX,qword ptr [R14 + 0x10]\nMOV byte ptr [RAX + RBX*0x1],0x0\nMOV dword ptr [R14 + 0x8],EBX\nMOV RAX,qword ptr [R14 + 0x10]\nMOV qword ptr [R14 + 0x20],RAX\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV EDI,0x40afcf\nMOV ESI,0x40a797\nMOV EDX,0x1f3\nMOV ECX,0x40afde\nCALL 0x00401d00\nMOV EDI,0x40b012\nMOV ESI,0x40a797\nMOV EDX,0x1fa\nMOV ECX,0x40afde\nCALL 0x00401d00\n'
p977
S'41 56\n53\n50\n49 89 fe\n41 8b 06\n83 f8 ff\n74 63\n83 f8 1e\n75 68\n41 8b 46 04\n8d 48 f2\n41 89 4e 04\nbb 0e 00 00 00\n29 c3\n49 63 56 08\n31 c0\n85 c9\n0f 49 c1\n48 98\n48 29 c2\n49 8b 7e 28\n49 8b 76 30\n49 8d 4e 38\ne8 f9 0a 00 00\n39 d8\n0f 8c 1c 01 00 00\n41 03 46 04\n41 89 46 04\n79 34\nbf 12 b0 40 00\nbe 97 a7 40 00\nba f5 01 00 00\nb9 de af 40 00\ne8 1e e5 ff ff\nb8 08 00 00 00\ne9 e7 00 00 00\n41 03 46 04\n83 c0 f2\n41 89 46 04\n0f 88 f7 00 00 00\n49 63 5e 04\n49 8b 7e 28\ne8 a6 e6 ff ff\n41 89 06\n83 f8 1f\n0f 8c 94 00 00 00\n66 2e 0f 1f 84 00 00 00 00 00\n83 f8 7f\n7f 2b\nba 01 00 00 00\n4c 89 f7\n48 89 de\ne8 cb fe ff ff\n41 0f b6 0e\nba 01 00 00 00\n48 89 d8\neb 48\nba 02 00 00 00\n4c 89 f7\n48 89 de\ne8 a0 fe ff ff\n41 8b 06\n83 e0 7f\n41 89 06\n41 0f b6 4c 06 3c\n49 8b 56 10\n48 8d 43 01\n88 0c 1a\n49 63 0e\n41 0f b6 8c 0e bc 00 00 00\nba 02 00 00 00\n49 8b 76 10\n48 01 d3\n88 0c 06\n49 8b 7e 28\ne8 12 e6 ff ff\n41 89 06\n83 f8 1e\n0f 8f 76 ff ff ff\nba 01 00 00 00\n4c 89 f7\n48 89 de\ne8 46 fe ff ff\n49 8b 46 10\nc6 04 18 00\n41 89 5e 08\n49 8b 46 10\n49 89 46 20\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\nc3\nbf cf af 40 00\nbe 97 a7 40 00\nba f3 01 00 00\nb9 de af 40 00\ne8 0c e4 ff ff\nbf 12 b0 40 00\nbe 97 a7 40 00\nba fa 01 00 00\nb9 de af 40 00\ne8 f3 e3 ff ff\n'
p978
S'.text:0000000000403770\n.text:0000000000403772\n.text:0000000000403773\n.text:0000000000403774\n.text:0000000000403777\n.text:000000000040377a\n.text:000000000040377d\n.text:000000000040377f\n.text:0000000000403782\n.text:0000000000403784\n.text:0000000000403788\n.text:000000000040378b\n.text:000000000040378f\n.text:0000000000403794\n.text:0000000000403796\n.text:000000000040379a\n.text:000000000040379c\n.text:000000000040379e\n.text:00000000004037a1\n.text:00000000004037a3\n.text:00000000004037a6\n.text:00000000004037aa\n.text:00000000004037ae\n.text:00000000004037b2\n.text:00000000004037b7\n.text:00000000004037b9\n.text:00000000004037bf\n.text:00000000004037c3\n.text:00000000004037c7\n.text:00000000004037c9\n.text:00000000004037ce\n.text:00000000004037d3\n.text:00000000004037d8\n.text:00000000004037dd\n.text:00000000004037e2\n.text:00000000004037e7\n.text:00000000004037ec\n.text:00000000004037f0\n.text:00000000004037f3\n.text:00000000004037f7\n.text:00000000004037fd\n.text:0000000000403801\n.text:0000000000403805\n.text:000000000040380a\n.text:000000000040380d\n.text:0000000000403810\n.text:0000000000403816\n.text:0000000000403820\n.text:0000000000403823\n.text:0000000000403825\n.text:000000000040382a\n.text:000000000040382d\n.text:0000000000403830\n.text:0000000000403835\n.text:0000000000403839\n.text:000000000040383e\n.text:0000000000403841\n.text:0000000000403850\n.text:0000000000403855\n.text:0000000000403858\n.text:000000000040385b\n.text:0000000000403860\n.text:0000000000403863\n.text:0000000000403866\n.text:0000000000403869\n.text:000000000040386f\n.text:0000000000403873\n.text:0000000000403877\n.text:000000000040387a\n.text:000000000040387d\n.text:0000000000403886\n.text:000000000040388b\n.text:000000000040388f\n.text:0000000000403892\n.text:0000000000403895\n.text:0000000000403899\n.text:000000000040389e\n.text:00000000004038a1\n.text:00000000004038a4\n.text:00000000004038aa\n.text:00000000004038af\n.text:00000000004038b2\n.text:00000000004038b5\n.text:00000000004038ba\n.text:00000000004038be\n.text:00000000004038c2\n.text:00000000004038c6\n.text:00000000004038ca\n.text:00000000004038ce\n.text:00000000004038d3\n.text:00000000004038d7\n.text:00000000004038d8\n.text:00000000004038da\n.text:00000000004038db\n.text:00000000004038e0\n.text:00000000004038e5\n.text:00000000004038ea\n.text:00000000004038ef\n.text:00000000004038f4\n.text:00000000004038f9\n.text:00000000004038fe\n.text:0000000000403903\n.text:0000000000403908\n'
p979
tp980
sS'visit_substring_match_casefold_wide'
p981
(S'\n__stdcall visit_substring_match_casefold_wide(process_data * procdata, void * context)\n'
p982
V\u000aint visit_substring_match_casefold_wide(process_data *procdata,void *context)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = mbscasestr(procdata->munged_filename,(char *)context);\u000a  return (int)((uint)(pcVar1 == (char *)0x0) + 2 + (uint)(pcVar1 == (char *)0x0));\u000a}\u000a\u000a
p983
S'PUSH RAX\nMOV RDI,qword ptr [RDI + 0x20]\nCALL 0x00405400\nXOR ECX,ECX\nTEST RAX,RAX\nSETZ CL\nLEA EAX,[RCX + RCX*0x1 + 0x2]\nPOP RCX\nRET\n'
p984
S'50\n48 8b 7f 20\ne8 76 19 00 00\n31 c9\n48 85 c0\n0f 94 c1\n8d 44 09 02\n59\nc3\n'
p985
S'.text:0000000000403a80\n.text:0000000000403a81\n.text:0000000000403a85\n.text:0000000000403a8a\n.text:0000000000403a8c\n.text:0000000000403a8f\n.text:0000000000403a92\n.text:0000000000403a96\n.text:0000000000403a97\n'
p986
tp987
sS'quote_n'
p988
(S'\n__stdcall quote_n(char * arg)\n'
p989
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p990
S'MOV RDX,-0x1\nJMP 0x00408200\n'
p991
S'48 c7 c2 ff ff ff ff\neb d7\n'
p992
S'.text:0000000000408220\n.text:0000000000408227\n'
p993
tp994
sS'getword'
p995
(S'\n__stdcall getword(FILE * fp, char * filename, size_t maxvalue, GetwordEndianState * endian_state_flag)\n'
p996
V\u000aint getword(FILE *fp,char *filename,size_t maxvalue,GetwordEndianState *endian_state_flag)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  size_t sVar3;\u000a  char *pcVar4;\u000a  uint *puVar5;\u000a  undefined8 uVar6;\u000a  ulong uVar7;\u000a  uchar data [4];\u000a  uchar local_24 [4];\u000a  \u000a  clearerr((FILE *)fp);\u000a  sVar3 = fread(local_24,4,1,(FILE *)fp);\u000a  if (sVar3 == 1) {\u000a    iVar2 = decode_value(local_24,(GetwordEndianState *)(maxvalue & 0xffffffff),\u000a                         (char *)endian_state_flag);\u000a    return iVar2;\u000a  }\u000a  pcVar4 = quotearg_n_style((char *)0x0);\u000a  iVar2 = feof((FILE *)fp);\u000a  if (iVar2 == 0) {\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    uVar6 = dcgettext(0,"error reading a word from %s",5);\u000a    uVar7 = (ulong)uVar1;\u000a  }\u000a  else {\u000a    uVar6 = dcgettext(0,"unexpected EOF in %s",5);\u000a    uVar7 = 0;\u000a  }\u000a  error(1,uVar7,uVar6,pcVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p997
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RCX\nMOV R12,RDX\nMOV R14,RSI\nMOV RBX,RDI\nCALL 0x00401e10\nLEA RDI,[RSP + 0x4]\nMOV ESI,0x4\nMOV EDX,0x1\nMOV RCX,RBX\nCALL 0x00401bc0\nCMP RAX,0x1\nJNZ 0x00404305\nLEA RDI,[RSP + 0x4]\nMOV ESI,R12D\nMOV RDX,R15\nMOV RCX,R14\nCALL 0x00404380\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,R14\nCALL 0x00407f30\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00401e00\nTEST EAX,EAX\nJNZ 0x00404349\nCALL 0x00401b40\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40b378\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nJMP 0x00404366\nXOR EDI,EDI\nMOV ESI,0x40b363\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,R14\nCALL 0x00401f70\nCALL 0x00401b30\n'
p998
S'41 57\n41 56\n41 54\n53\n50\n49 89 cf\n49 89 d4\n49 89 f6\n48 89 fb\ne8 47 db ff ff\n48 8d 7c 24 04\nbe 04 00 00 00\nba 01 00 00 00\n48 89 d9\ne8 e0 d8 ff ff\n48 83 f8 01\n75 1f\n48 8d 7c 24 04\n44 89 e6\n4c 89 fa\n4c 89 f1\ne8 87 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n31 ff\nbe 08 00 00 00\n4c 89 f2\ne8 1c 3c 00 00\n49 89 c6\n48 89 df\ne8 e1 da ff ff\n85 c0\n75 26\ne8 18 d8 ff ff\n8b 18\n31 ff\nbe 78 b3 40 00\nba 05 00 00 00\ne8 f5 d8 ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\neb 1d\n31 ff\nbe 63 b3 40 00\nba 05 00 00 00\ne8 d6 d8 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\n4c 89 f1\ne8 ff db ff ff\ne8 ba d7 ff ff\n'
p999
S'.text:00000000004042b0\n.text:00000000004042b2\n.text:00000000004042b4\n.text:00000000004042b6\n.text:00000000004042b7\n.text:00000000004042b8\n.text:00000000004042bb\n.text:00000000004042be\n.text:00000000004042c1\n.text:00000000004042c4\n.text:00000000004042c9\n.text:00000000004042ce\n.text:00000000004042d3\n.text:00000000004042d8\n.text:00000000004042db\n.text:00000000004042e0\n.text:00000000004042e4\n.text:00000000004042e6\n.text:00000000004042eb\n.text:00000000004042ee\n.text:00000000004042f1\n.text:00000000004042f4\n.text:00000000004042f9\n.text:00000000004042fd\n.text:00000000004042fe\n.text:0000000000404300\n.text:0000000000404302\n.text:0000000000404304\n.text:0000000000404305\n.text:0000000000404307\n.text:000000000040430c\n.text:000000000040430f\n.text:0000000000404314\n.text:0000000000404317\n.text:000000000040431a\n.text:000000000040431f\n.text:0000000000404321\n.text:0000000000404323\n.text:0000000000404328\n.text:000000000040432a\n.text:000000000040432c\n.text:0000000000404331\n.text:0000000000404336\n.text:000000000040433b\n.text:000000000040433e\n.text:0000000000404343\n.text:0000000000404345\n.text:0000000000404347\n.text:0000000000404349\n.text:000000000040434b\n.text:0000000000404350\n.text:0000000000404355\n.text:000000000040435a\n.text:000000000040435d\n.text:0000000000404362\n.text:0000000000404364\n.text:0000000000404366\n.text:0000000000404369\n.text:000000000040436c\n.text:0000000000404371\n'
p1000
tp1001
sS'quotearg_alloc'
p1002
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p1003
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p1004
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00407bb0\n'
p1005
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p1006
S'.text:0000000000407ba0\n.text:0000000000407ba3\n.text:0000000000407ba5\n.text:0000000000407ba8\n'
p1007
tp1008
sS'get_regex_type_flags'
p1009
(S'\n__stdcall get_regex_type_flags()\n'
p1010
V\u000aint get_regex_type_flags(void)\u000a\u000a{\u000a  int iVar1;\u000a  uint in_EDI;\u000a  \u000a  iVar1 = -1;\u000a  if (in_EDI < 0xd) {\u000a    iVar1 = regex_map[(ulong)in_EDI].option_val;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1011
S'MOV EAX,0xffffffff\nCMP EDI,0xc\nJA 0x004048a6\nMOV EAX,EDI\nSHL RAX,0x4\nMOV EAX,dword ptr [0x60f32c + RAX]\nRET\n'
p1012
S'b8 ff ff ff ff\n83 ff 0c\n77 0c\n89 f8\n48 c1 e0 04\n8b 80 2c f3 60 00\nc3\n'
p1013
S'.text:0000000000404890\n.text:0000000000404895\n.text:0000000000404898\n.text:000000000040489a\n.text:000000000040489c\n.text:00000000004048a0\n.text:00000000004048a6\n'
p1014
tp1015
sS'close_stdout_set_file_name'
p1016
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p1017
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p1018
S'MOV qword ptr [0x0060f540],RDI\nRET\n'
p1019
S'48 89 3d 59 ab 20 00\nc3\n'
p1020
S'.text:00000000004049e0\n.text:00000000004049e7\n'
p1021
tp1022
sS'feof'
p1023
(S'\n__stdcall feof(FILE * __stream)\n'
p1024
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint feof(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_feof_0060f1a0)();\u000a  return iVar1;\u000a}\u000a\u000a
p1025
S'JMP qword ptr [0x0060f1a0]\n'
p1026
S'ff 25 9a d3 20 00\n'
p1027
S'.plt:0000000000401e00\n'
p1028
tp1029
sS'time'
p1030
(S'\n__stdcall time(time_t * __timer)\n'
p1031
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000atime_t time(time_t *__timer)\u000a\u000a{\u000a  time_t tVar1;\u000a  \u000a  tVar1 = (*(code *)PTR_time_0060f1b8)();\u000a  return tVar1;\u000a}\u000a\u000a
p1032
S'JMP qword ptr [0x0060f1b8]\n'
p1033
S'ff 25 82 d3 20 00\n'
p1034
S'.plt:0000000000401e30\n'
p1035
tp1036
sS'fgetc'
p1037
(S'\n__stdcall fgetc(FILE * __stream)\n'
p1038
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fgetc(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fgetc_0060f158)();\u000a  return iVar1;\u000a}\u000a\u000a
p1039
S'JMP qword ptr [0x0060f158]\n'
p1040
S'ff 25 e2 d3 20 00\n'
p1041
S'.plt:0000000000401d70\n'
p1042
tp1043
sS'__libc_csu_init'
p1044
(S'\n__stdcall __libc_csu_init()\n'
p1045
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p1046
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x60ee08]\nPUSH RBP\nLEA RBP,[0x60ee10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401ac8\nTEST RBP,RBP\nJZ 0x00409e66\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00409e50\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p1047
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 e6 4f 20 00\n55\n48 8d 2d e6 4f 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 87 7c ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p1048
S'.text:0000000000409e10\n.text:0000000000409e12\n.text:0000000000409e14\n.text:0000000000409e17\n.text:0000000000409e19\n.text:0000000000409e1b\n.text:0000000000409e22\n.text:0000000000409e23\n.text:0000000000409e2a\n.text:0000000000409e2b\n.text:0000000000409e2e\n.text:0000000000409e31\n.text:0000000000409e34\n.text:0000000000409e38\n.text:0000000000409e3c\n.text:0000000000409e41\n.text:0000000000409e44\n.text:0000000000409e46\n.text:0000000000409e48\n.text:0000000000409e50\n.text:0000000000409e53\n.text:0000000000409e56\n.text:0000000000409e59\n.text:0000000000409e5d\n.text:0000000000409e61\n.text:0000000000409e64\n.text:0000000000409e66\n.text:0000000000409e6a\n.text:0000000000409e6b\n.text:0000000000409e6c\n.text:0000000000409e6e\n.text:0000000000409e70\n.text:0000000000409e72\n.text:0000000000409e74\n'
p1049
tp1050
sS'argmatch_to_argument'
p1051
(S'\n__stdcall argmatch_to_argument(char * value, char * * arglist, char * vallist, size_t valsize)\n'
p1052
V\u000achar * argmatch_to_argument(char *value,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  \u000a  pcVar2 = *arglist;\u000a  if (pcVar2 != (char *)0x0) {\u000a    arglist = arglist + 1;\u000a    do {\u000a      iVar1 = memcmp(value,vallist,valsize);\u000a      if (iVar1 == 0) {\u000a        return pcVar2;\u000a      }\u000a      pcVar2 = *arglist;\u000a      arglist = arglist + 1;\u000a      vallist = vallist + valsize;\u000a    } while (pcVar2 != (char *)0x0);\u000a  }\u000a  return (char *)0x0;\u000a}\u000a\u000a
p1053
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R14,RCX\nMOV R12,RDX\nMOV RBX,RSI\nMOV R13,RDI\nMOV R15,qword ptr [RBX]\nTEST R15,R15\nJZ 0x00409731\nADD RBX,0x8\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R14\nCALL 0x00401db0\nTEST EAX,EAX\nJZ 0x00409734\nMOV R15,qword ptr [RBX]\nADD RBX,0x8\nADD R12,R14\nTEST R15,R15\nJNZ 0x00409710\nXOR R15D,R15D\nMOV RAX,R15\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p1054
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 ce\n49 89 d4\n48 89 f3\n49 89 fd\n4c 8b 3b\n4d 85 ff\n74 34\n48 83 c3 08\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ef\n4c 89 e6\n4c 89 f2\ne8 92 86 ff ff\n85 c0\n74 12\n4c 8b 3b\n48 83 c3 08\n4d 01 f4\n4d 85 ff\n75 df\n45 31 ff\n4c 89 f8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p1055
S'.text:00000000004096e0\n.text:00000000004096e2\n.text:00000000004096e4\n.text:00000000004096e6\n.text:00000000004096e8\n.text:00000000004096e9\n.text:00000000004096ec\n.text:00000000004096ef\n.text:00000000004096f2\n.text:00000000004096f5\n.text:00000000004096f8\n.text:00000000004096fb\n.text:00000000004096fd\n.text:0000000000409701\n.text:0000000000409710\n.text:0000000000409713\n.text:0000000000409716\n.text:0000000000409719\n.text:000000000040971e\n.text:0000000000409720\n.text:0000000000409722\n.text:0000000000409725\n.text:0000000000409729\n.text:000000000040972c\n.text:000000000040972f\n.text:0000000000409731\n.text:0000000000409734\n.text:0000000000409737\n.text:0000000000409738\n.text:000000000040973a\n.text:000000000040973c\n.text:000000000040973e\n.text:0000000000409740\n'
p1056
tp1057
sS'c_isdigit'
p1058
(S'\n__stdcall c_isdigit()\n'
p1059
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p1060
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p1061
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p1062
S'.text:00000000004097d0\n.text:00000000004097d3\n.text:00000000004097d6\n.text:00000000004097d9\n'
p1063
tp1064
sS'usage'
p1065
(S'\n__stdcall usage()\n'
p1066
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  FILE *__stream;\u000a  FILE *__stream_00;\u000a  char *__format;\u000a  \u000a  __stream_00 = stderr;\u000a  __stream = stdout;\u000a  if (iParm1 == 0) {\u000a    __format = (char *)dcgettext(0,\u000a                                 "Usage: %s [-d path | --database=path] [-e | -E | --[non-]existing]\u005cn      [-i | --ignore-case] [-w | --wholename] [-b | --basename] \u005cn      [--limit=N | -l N] [-S | --statistics] [-0 | --null] [-c | --count]\u005cn      [-P | -H | --nofollow] [-L | --follow] [-m | --mmap] [-s | --stdio]\u005cn      [-A | --all] [-p | --print] [-r | --regex] [--regextype=TYPE]\u005cn      [--max-database-age D] [--version] [--help]\u005cn      pattern...\u005cn"\u000a                                 ,5);\u000a    fprintf((FILE *)__stream,__format,program_name);\u000a    explain_how_to_report_bugs(stdout,program_name);\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  __format = (char *)dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  fprintf(__stream_00,__format,program_name);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p1067
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x00402be3\nMOV R14,qword ptr [0x0060f468]\nXOR EDI,EDI\nMOV ESI,0x40a93f\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060f550]\nXOR EAX,EAX\nMOV RDI,R14\nMOV RSI,RCX\nCALL 0x00401df0\nMOV RDI,qword ptr [0x0060f468]\nMOV RSI,qword ptr [0x0060f550]\nCALL 0x00404990\nMOV EDI,EBX\nCALL 0x00402020\nMOV R14,qword ptr [0x0060f4a0]\nXOR EDI,EDI\nMOV ESI,0x40a918\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060f550]\nXOR EAX,EAX\nMOV RDI,R14\nMOV RSI,RCX\nCALL 0x00401df0\nMOV EDI,EBX\nCALL 0x00402020\n'
p1068
S'41 56\n53\n50\n89 fb\n85 db\n75 49\n4c 8b 35 c7 c8 20 00\n31 ff\nbe 3f a9 40 00\nba 05 00 00 00\ne8 7e f0 ff ff\n48 89 c1\n48 8b 15 94 c9 20 00\n31 c0\n4c 89 f7\n48 89 ce\ne8 27 f2 ff ff\n48 8b 3d 98 c8 20 00\n48 8b 35 79 c9 20 00\ne8 b4 1d 00 00\n89 df\ne8 3d f4 ff ff\n4c 8b 35 b6 c8 20 00\n31 ff\nbe 18 a9 40 00\nba 05 00 00 00\ne8 35 f0 ff ff\n48 89 c1\n48 8b 15 4b c9 20 00\n31 c0\n4c 89 f7\n48 89 ce\ne8 de f1 ff ff\n89 df\ne8 07 f4 ff ff\n'
p1069
S'.text:0000000000402b90\n.text:0000000000402b92\n.text:0000000000402b93\n.text:0000000000402b94\n.text:0000000000402b96\n.text:0000000000402b98\n.text:0000000000402b9a\n.text:0000000000402ba1\n.text:0000000000402ba3\n.text:0000000000402ba8\n.text:0000000000402bad\n.text:0000000000402bb2\n.text:0000000000402bb5\n.text:0000000000402bbc\n.text:0000000000402bbe\n.text:0000000000402bc1\n.text:0000000000402bc4\n.text:0000000000402bc9\n.text:0000000000402bd0\n.text:0000000000402bd7\n.text:0000000000402bdc\n.text:0000000000402bde\n.text:0000000000402be3\n.text:0000000000402bea\n.text:0000000000402bec\n.text:0000000000402bf1\n.text:0000000000402bf6\n.text:0000000000402bfb\n.text:0000000000402bfe\n.text:0000000000402c05\n.text:0000000000402c07\n.text:0000000000402c0a\n.text:0000000000402c0d\n.text:0000000000402c12\n.text:0000000000402c14\n'
p1070
tp1071
sS'get_stat_ctime_ns'
p1072
(S'\n__stdcall get_stat_ctime_ns(stat * st)\n'
p1073
V\u000along get_stat_ctime_ns(stat *st)\u000a\u000a{\u000a  return (st->st_ctim).tv_nsec;\u000a}\u000a\u000a
p1074
S'MOV RAX,qword ptr [RDI + 0x70]\nRET\n'
p1075
S'48 8b 47 70\nc3\n'
p1076
S'.text:0000000000408650\n.text:0000000000408654\n'
p1077
tp1078
sS'quoting_options_from_style'
p1079
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p1080
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1081
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x00407fbd\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00401b30\n'
p1082
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 6e 9b ff ff\n'
p1083
S'.text:0000000000407f70\n.text:0000000000407f74\n.text:0000000000407f77\n.text:0000000000407f7c\n.text:0000000000407f81\n.text:0000000000407f85\n.text:0000000000407f8d\n.text:0000000000407f90\n.text:0000000000407f92\n.text:0000000000407f94\n.text:0000000000407f98\n.text:0000000000407f9b\n.text:0000000000407f9f\n.text:0000000000407fa4\n.text:0000000000407fa9\n.text:0000000000407fad\n.text:0000000000407fb1\n.text:0000000000407fb5\n.text:0000000000407fb8\n.text:0000000000407fbc\n.text:0000000000407fbd\n'
p1084
tp1085
sS'strcpy'
p1086
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p1087
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_0060f058)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1088
S'JMP qword ptr [0x0060f058]\n'
p1089
S'ff 25 e2 d4 20 00\n'
p1090
S'.plt:0000000000401b70\n'
p1091
tp1092
sS'get_stat_mtime_ns'
p1093
(S'\n__stdcall get_stat_mtime_ns(stat * st)\n'
p1094
V\u000along get_stat_mtime_ns(stat *st)\u000a\u000a{\u000a  return (st->st_mtim).tv_nsec;\u000a}\u000a\u000a
p1095
S'MOV RAX,qword ptr [RDI + 0x60]\nRET\n'
p1096
S'48 8b 47 60\nc3\n'
p1097
S'.text:0000000000408660\n.text:0000000000408664\n'
p1098
tp1099
sS'rpl_mbrtowc'
p1100
(S'\n__stdcall rpl_mbrtowc(wchar_t * pwc, char * s, size_t n, mbstate_t * ps)\n'
p1101
V\u000asize_t rpl_mbrtowc(wchar_t *pwc,char *s,size_t n,mbstate_t *ps)\u000a\u000a{\u000a  _Bool _Var1;\u000a  size_t sVar2;\u000a  uint *__pwc;\u000a  uint local_24;\u000a  \u000a  __pwc = &local_24;\u000a  if (pwc != (wchar_t *)0x0) {\u000a    __pwc = (uint *)pwc;\u000a  }\u000a  sVar2 = mbrtowc((wchar_t *)__pwc,s,n,(mbstate_t *)ps);\u000a  if ((n != 0) && (0xfffffffffffffffd < sVar2)) {\u000a    _Var1 = hard_locale();\u000a    if (_Var1 == false) {\u000a      *__pwc = (uint)(byte)*s;\u000a      sVar2 = 1;\u000a    }\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p1102
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,RDX\nMOV R14,RSI\nTEST RDI,RDI\nLEA RBX,[RSP + 0x4]\nCMOVNZ RBX,RDI\nMOV RDI,RBX\nCALL 0x00401c90\nMOV R15,RAX\nTEST R12,R12\nJZ 0x004093e7\nCMP R15,-0x2\nJC 0x004093e7\nXOR EDI,EDI\nCALL 0x00409910\nTEST AL,AL\nJNZ 0x004093e7\nMOVZX EAX,byte ptr [R14]\nMOV dword ptr [RBX],EAX\nMOV R15D,0x1\nMOV RAX,R15\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p1103
S'41 57\n41 56\n41 54\n53\n50\n49 89 d4\n49 89 f6\n48 85 ff\n48 8d 5c 24 04\n48 0f 45 df\n48 89 df\ne8 ce 88 ff ff\n49 89 c7\n4d 85 e4\n74 1d\n49 83 ff fe\n72 17\n31 ff\ne8 39 05 00 00\n84 c0\n75 0c\n41 0f b6 06\n89 03\n41 bf 01 00 00 00\n4c 89 f8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p1104
S'.text:00000000004093a0\n.text:00000000004093a2\n.text:00000000004093a4\n.text:00000000004093a6\n.text:00000000004093a7\n.text:00000000004093a8\n.text:00000000004093ab\n.text:00000000004093ae\n.text:00000000004093b1\n.text:00000000004093b6\n.text:00000000004093ba\n.text:00000000004093bd\n.text:00000000004093c2\n.text:00000000004093c5\n.text:00000000004093c8\n.text:00000000004093ca\n.text:00000000004093ce\n.text:00000000004093d0\n.text:00000000004093d2\n.text:00000000004093d7\n.text:00000000004093d9\n.text:00000000004093db\n.text:00000000004093df\n.text:00000000004093e1\n.text:00000000004093e7\n.text:00000000004093ea\n.text:00000000004093ee\n.text:00000000004093ef\n.text:00000000004093f1\n.text:00000000004093f3\n.text:00000000004093f5\n'
p1105
tp1106
sS'get_stat_atime_ns'
p1107
(S'\n__stdcall get_stat_atime_ns(stat * st)\n'
p1108
V\u000along get_stat_atime_ns(stat *st)\u000a\u000a{\u000a  return (st->st_atim).tv_nsec;\u000a}\u000a\u000a
p1109
S'MOV RAX,qword ptr [RDI + 0x50]\nRET\n'
p1110
S'48 8b 47 50\nc3\n'
p1111
S'.text:0000000000408640\n.text:0000000000408644\n'
p1112
tp1113
sS'c_isgraph'
p1114
(S'\n__stdcall c_isgraph()\n'
p1115
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p1116
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p1117
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p1118
S'.text:00000000004097e0\n.text:00000000004097e3\n.text:00000000004097e6\n.text:00000000004097e9\n'
p1119
tp1120
sS'get_regex_type'
p1121
(S'\n__stdcall get_regex_type(char * s)\n'
p1122
V\u000aint get_regex_type(char *s)\u000a\u000a{\u000a  int iVar1;\u000a  char *__s1;\u000a  size_t sVar2;\u000a  undefined2 *puVar3;\u000a  undefined8 uVar4;\u000a  undefined2 *__dest;\u000a  ulong uVar5;\u000a  long lVar6;\u000a  tagRegexTypeMap *ptVar7;\u000a  \u000a  ptVar7 = regex_map;\u000a  uVar5 = 0;\u000a  lVar6 = 0;\u000a  do {\u000a    __s1 = ptVar7->name;\u000a    iVar1 = strcmp(__s1,s);\u000a    if (iVar1 == 0) {\u000a      return ptVar7->option_val;\u000a    }\u000a    __s1 = quote(__s1);\u000a    sVar2 = strlen(__s1);\u000a    lVar6 = lVar6 + 2 + sVar2;\u000a    uVar5 = uVar5 + 1;\u000a    ptVar7 = ptVar7 + 1;\u000a  } while (uVar5 < 0xd);\u000a  puVar3 = (undefined2 *)xmalloc(lVar6 + 1);\u000a  lVar6 = 0;\u000a  __dest = puVar3;\u000a  do {\u000a    if (lVar6 != 0) {\u000a      *(undefined *)(__dest + 1) = 0;\u000a      *__dest = 0x202c;\u000a      __dest = __dest + 1;\u000a    }\u000a    __s1 = quote(*(char **)((long)&regex_map[0].name + lVar6));\u000a    sVar2 = strlen(__s1);\u000a    memcpy(__dest,__s1,sVar2 + 1);\u000a    __dest = (undefined2 *)((long)__dest + (long)(int)sVar2);\u000a    lVar6 = lVar6 + 0x10;\u000a  } while (lVar6 != 0xd0);\u000a  uVar4 = dcgettext(0,"Unknown regular expression type %s; valid types are %s.",5);\u000a  __s1 = quote(s);\u000a  error(1,0,uVar4,__s1,puVar3);\u000a  return -1;\u000a}\u000a\u000a
p1123
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDI\nMOV R12D,0x60f320\nXOR EBP,EBP\nXOR R14D,R14D\nNOP dword ptr [RAX]\nMOV RBX,qword ptr [R12]\nMOV RDI,RBX\nMOV RSI,R15\nCALL 0x00401dd0\nTEST EAX,EAX\nJZ 0x00404858\nMOV RDI,RBX\nCALL 0x00408230\nMOV RDI,RAX\nCALL 0x00401c50\nLEA R14,[R14 + RAX*0x1 + 0x2]\nINC RBP\nADD R12,0x10\nCMP RBP,0xd\nJC 0x00404780\nINC R14\nMOV RDI,R14\nCALL 0x00408bd0\nMOV R14,RAX\nXOR EBP,EBP\nMOV RBX,R14\nNOP dword ptr [RAX]\nTEST RBP,RBP\nJZ 0x004047e2\nMOV byte ptr [RBX + 0x2],0x0\nMOV word ptr [RBX],0x202c\nADD RBX,0x2\nMOV RDI,qword ptr [0x60f320 + RBP]\nCALL 0x00408230\nMOV R12,RAX\nMOV RDI,R12\nCALL 0x00401c50\nMOV R13,RAX\nLEA RDX,[R13 + 0x1]\nMOV RDI,RBX\nMOV RSI,R12\nCALL 0x00401e20\nMOVSXD RAX,R13D\nADD RBX,RAX\nADD RBP,0x10\nCMP RBP,0xd0\nJNZ 0x004047d0\nXOR EDI,EDI\nMOV ESI,0x40b784\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RBX,RAX\nMOV RDI,R15\nCALL 0x00408230\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nMOV R8,R14\nCALL 0x00401f70\nMOV EAX,0xffffffff\nJMP 0x0040485d\nMOV EAX,dword ptr [R12 + 0xc]\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1124
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ff\n41 bc 20 f3 60 00\n31 ed\n45 31 f6\n0f 1f 80 00 00 00 00\n49 8b 1c 24\n48 89 df\n4c 89 fe\ne8 41 d6 ff ff\n85 c0\n0f 84 c1 00 00 00\n48 89 df\ne8 91 3a 00 00\n48 89 c7\ne8 a9 d4 ff ff\n4d 8d 74 06 02\n48 ff c5\n49 83 c4 10\n48 83 fd 0d\n72 c7\n49 ff c6\n4c 89 f7\ne8 0c 44 00 00\n49 89 c6\n31 ed\n4c 89 f3\n0f 1f 40 00\n48 85 ed\n74 0d\nc6 43 02 00\n66 c7 03 2c 20\n48 83 c3 02\n48 8b bd 20 f3 60 00\ne8 42 3a 00 00\n49 89 c4\n4c 89 e7\ne8 57 d4 ff ff\n49 89 c5\n49 8d 55 01\n48 89 df\n4c 89 e6\ne8 15 d6 ff ff\n49 63 c5\n48 01 c3\n48 83 c5 10\n48 81 fd d0 00 00 00\n75 b2\n31 ff\nbe 84 b7 40 00\nba 05 00 00 00\ne8 01 d4 ff ff\n48 89 c3\n4c 89 ff\ne8 f6 39 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 da\n4d 89 f0\ne8 1f d7 ff ff\nb8 ff ff ff ff\neb 05\n41 8b 44 24 0c\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1125
S'.text:0000000000404760\n.text:0000000000404761\n.text:0000000000404763\n.text:0000000000404765\n.text:0000000000404767\n.text:0000000000404769\n.text:000000000040476a\n.text:000000000040476b\n.text:000000000040476e\n.text:0000000000404774\n.text:0000000000404776\n.text:0000000000404779\n.text:0000000000404780\n.text:0000000000404784\n.text:0000000000404787\n.text:000000000040478a\n.text:000000000040478f\n.text:0000000000404791\n.text:0000000000404797\n.text:000000000040479a\n.text:000000000040479f\n.text:00000000004047a2\n.text:00000000004047a7\n.text:00000000004047ac\n.text:00000000004047af\n.text:00000000004047b3\n.text:00000000004047b7\n.text:00000000004047b9\n.text:00000000004047bc\n.text:00000000004047bf\n.text:00000000004047c4\n.text:00000000004047c7\n.text:00000000004047c9\n.text:00000000004047cc\n.text:00000000004047d0\n.text:00000000004047d3\n.text:00000000004047d5\n.text:00000000004047d9\n.text:00000000004047de\n.text:00000000004047e2\n.text:00000000004047e9\n.text:00000000004047ee\n.text:00000000004047f1\n.text:00000000004047f4\n.text:00000000004047f9\n.text:00000000004047fc\n.text:0000000000404800\n.text:0000000000404803\n.text:0000000000404806\n.text:000000000040480b\n.text:000000000040480e\n.text:0000000000404811\n.text:0000000000404815\n.text:000000000040481c\n.text:000000000040481e\n.text:0000000000404820\n.text:0000000000404825\n.text:000000000040482a\n.text:000000000040482f\n.text:0000000000404832\n.text:0000000000404835\n.text:000000000040483a\n.text:000000000040483d\n.text:0000000000404842\n.text:0000000000404844\n.text:0000000000404846\n.text:0000000000404849\n.text:000000000040484c\n.text:0000000000404851\n.text:0000000000404856\n.text:0000000000404858\n.text:000000000040485d\n.text:0000000000404861\n.text:0000000000404862\n.text:0000000000404864\n.text:0000000000404866\n.text:0000000000404868\n.text:000000000040486a\n.text:000000000040486b\n'
p1126
tp1127
sS'quotearg_buffer_restyled'
p1128
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p1129
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_00406fec_caseD_7;\u000a  case 2:\u000a    goto switchD_00406fec_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_00406fec_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_00406fec_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_00406fec_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_00406fec_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_00406fec_caseD_7;\u000aswitchD_00406fec_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_00406fec_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_00406fec_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00407ab0;\u000aLAB_004071d0:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00407ab9:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00407ac8:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_004071db:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_0040721f:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_0040721f;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00407ac8;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_004079f5;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00407900;\u000a    }\u000a    goto LAB_00407ac8;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = rpl_mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_00407a2a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00407ac8;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit((mbstate_t *)&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00407a59;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00407518;\u000a  case '\u005ca':\u000a    goto joined_r0x00407408;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00407408;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00407236_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00407408;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00407408;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00407236_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00407408:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_0040796e;\u000a    }\u000a    goto LAB_00407ac8;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00407ac8;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00407ac8;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00407ac8;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00407ac8;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00407ac8;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00407236_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_004079c6;\u000a      goto joined_r0x004079b8;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x004074c1:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x004079b8;\u000a      goto LAB_004079c6;\u000a    }\u000a    goto LAB_00407ac8;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00407ac8;\u000a  }\u000a  goto joined_r0x00407900;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_00407a2a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00407a59;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00407a59:\u000a  if (1 < uVar10) {\u000aLAB_00407536:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_004075f2;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x004074c1;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_004075f2:\u000a        if (bVar6 != 0) goto LAB_00407ac8;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00407518:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00407536;\u000ajoined_r0x00407900:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00407900:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00407927;\u000aLAB_00407960:\u000a    if (bVar22) goto LAB_00407965;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00407960;\u000aLAB_00407927:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00407965:\u000a      if (bVar6 != 0) goto LAB_00407ac8;\u000aLAB_0040796e:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x004079b8;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_004079c6:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x004079b8:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_004079f5:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_004071d0;\u000aLAB_00407ab0:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00407ab9;\u000a  goto LAB_004071db;\u000a}\u000a\u000a
p1130
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x00401c40\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00407b95\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x40ba80 + RAX*0x8]\nMOV EDI,0x40bfa6\nMOV ESI,R15D\nCALL 0x00408240\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x40aef2\nMOV ESI,R15D\nCALL 0x00408240\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x0040704d\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00407050\nNOP\nCMP R12,RSI\nJNC 0x0040703e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00407030\nJMP 0x00407050\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x00401c50\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x0040711c\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x0040711c\nMOV ECX,0x40bfa4\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00407116\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x004070b7\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x004070e4\nTEST RSI,RSI\nJZ 0x004070d1\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x40aef2\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x004070f2\nMOV ECX,0x40aef2\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x0040711c\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x00407b6c\nMOV ECX,0x40bfa4\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00407ab0\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00407ab9\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x0040721f\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x0040721a\nCMP R11,-0x1\nJNZ 0x0040721a\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x00401c50\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00407270\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x004074cc\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x40bad8 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00407ac8\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00407920\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00407927\nJMP 0x00407960\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00401db0\nTEST EAX,EAX\nSETZ AL\nJNZ 0x004072bd\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00407221\nJMP 0x00407ac8\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00407221\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x0040724b\nCMP EBX,0x2\nJNZ 0x0040724b\nTEST R13,R13\nJNZ 0x0040724b\nJMP 0x00407ac8\nCMP R11,-0x1\nJZ 0x004076a3\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x004076c3\nJMP 0x0040724b\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004076d4\nTEST R8B,R8B\nJNZ 0x00407ac8\nCMP EBX,0x2\nJNZ 0x00407378\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00407378\nCMP R12,RSI\nJNC 0x00407353\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00407362\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00407371\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00407382\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00407848\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00407848\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00407848\nCMP RCX,RSI\nJNC 0x004073bc\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x004073cb\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00407256\nJMP 0x00407920\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00407249\nJMP 0x0040742a\nMOV DL,0x74\nJMP 0x00407412\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00407249\nJMP 0x0040742a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00407249\nJMP 0x0040742a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00407ac8\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00407249\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x0040796e\nJMP 0x00407ac8\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00407249\nTEST R8B,R8B\nJNZ 0x00407ac8\nCMP R12,RSI\nJNC 0x0040745a\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00407469\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00407478\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00407249\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x0040785b\nCMP EBX,0x2\nJNZ 0x00407249\nTEST R8B,R8B\nJZ 0x00407249\nJMP 0x00407ac8\nCMP EBX,0x2\nJNZ 0x004076f4\nTEST R8B,R8B\nJNZ 0x00407ac8\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x004079c6\nJMP 0x004079e9\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00407715\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x004020b0\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00407908\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00407908\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x004075f2\nJMP 0x004075c0\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x004075a9\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x004075a6\nCMP R12,RSI\nJNC 0x0040758b\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x0040759a\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x004075e0\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x004075e0\nTEST BPL,0x1\nJZ 0x00407683\nCMP R12,RSI\nJNC 0x004075d4\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00407683\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x004075c0\nTEST R8B,R8B\nJNZ 0x00407ac8\nCMP EBX,0x2\nJNZ 0x0040763a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x0040763a\nCMP R12,RSI\nJNC 0x00407612\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00407621\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00407630\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00407644\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040765b\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00407675\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00407570\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x004079c6\nJMP 0x004079e9\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x0040724b\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x0040724b\nJMP 0x00407ac8\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x004079f5\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00407256\nJMP 0x00407920\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00407412\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x004079c6\nJMP 0x004079e9\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00407737\nMOV RDI,R10\nCALL 0x00401c50\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x004093a0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00407a0f\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00407a07\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00407a16\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x004077fe\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x004077f6\nBT RDI,RDX\nJC 0x00407b62\nINC RCX\nCMP RCX,R14\nJC 0x004077e0\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00402070\nTEST EAX,EAX\nJNZ 0x00407813\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00402060\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00407755\nJMP 0x00407a59\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00407256\nJMP 0x00407920\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00407249\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00407249\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00407249\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x0040724b\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00407a92\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00407ac8\nCMP R12,RSI\nJNC 0x004078be\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x004078d1\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004078e0\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x004078ef\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00407256\nJMP 0x00407920\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00407256\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00407960\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00407965\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x004079c0\nJMP 0x00407965\nTEST BPL,BPL\nJZ 0x004079c0\nTEST R8B,R8B\nJNZ 0x00407ac8\nCMP EBX,0x2\nJNZ 0x004079a8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x004079a8\nCMP R12,RSI\nJNC 0x00407983\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00407992\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004079a1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x004079b2\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x004079f2\nJMP 0x004079ee\nTEST DIL,0x1\nJZ 0x004079e9\nAND AL,0x1\nJNZ 0x004079e9\nCMP R12,RSI\nJNC 0x004079d4\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004079e3\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x004079f2\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00407ab0\nJMP 0x004071d0\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00407a54\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x00407a4c\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00407a88\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x00407a2a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00407a59\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00407518\nJMP 0x00407536\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00407a59\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00407256\nJMP 0x00407920\nCMP R13,R11\nJNZ 0x004071db\nTEST R8B,R8B\nJZ 0x00407b22\nCMP EBX,0x2\nJNZ 0x00407b22\nTEST R12,R12\nJNZ 0x00407b22\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00406f60\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00407b56\nTEST R8B,R8B\nJNZ 0x00407b56\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00407b56\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00407b49\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00407b40\nCMP R12,RSI\nJNC 0x00407b0d\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x00407b0d\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00407ac8\nTEST RSI,RSI\nJZ 0x00407b79\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x40bfa4\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x0040711c\nCALL 0x00401b30\n'
p1131
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 b2 ac ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 80 ba 40 00\nbf a6 bf 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf f2 ae 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 f3 ab ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 a4 bf 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 f2 ae 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 f2 ae 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 a4 bf 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 53 aa ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd d8 ba 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 27 ab ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 c7 ab ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 21 a5 ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 23 1c 00 00\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 69 a8 ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 32 a8 ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 a4 bf 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 96 9f ff ff\n'
p1132
S'.text:0000000000406f60\n.text:0000000000406f61\n.text:0000000000406f63\n.text:0000000000406f65\n.text:0000000000406f67\n.text:0000000000406f69\n.text:0000000000406f6a\n.text:0000000000406f71\n.text:0000000000406f74\n.text:0000000000406f77\n.text:0000000000406f7a\n.text:0000000000406f7f\n.text:0000000000406f84\n.text:0000000000406f89\n.text:0000000000406f8e\n.text:0000000000406f96\n.text:0000000000406f9a\n.text:0000000000406fa0\n.text:0000000000406fa8\n.text:0000000000406fad\n.text:0000000000406fb5\n.text:0000000000406fba\n.text:0000000000406fbe\n.text:0000000000406fc0\n.text:0000000000406fc3\n.text:0000000000406fc6\n.text:0000000000406fc9\n.text:0000000000406fce\n.text:0000000000406fd1\n.text:0000000000406fd4\n.text:0000000000406fd7\n.text:0000000000406fda\n.text:0000000000406fdc\n.text:0000000000406fdf\n.text:0000000000406fe4\n.text:0000000000406fe7\n.text:0000000000406fec\n.text:0000000000406ff3\n.text:0000000000406ff8\n.text:0000000000406ffb\n.text:0000000000407000\n.text:0000000000407005\n.text:000000000040700a\n.text:000000000040700d\n.text:0000000000407012\n.text:0000000000407017\n.text:000000000040701c\n.text:000000000040701e\n.text:0000000000407020\n.text:0000000000407025\n.text:0000000000407027\n.text:000000000040702a\n.text:000000000040702c\n.text:000000000040702e\n.text:0000000000407030\n.text:0000000000407033\n.text:0000000000407035\n.text:000000000040703a\n.text:000000000040703e\n.text:0000000000407044\n.text:0000000000407047\n.text:0000000000407049\n.text:000000000040704b\n.text:000000000040704d\n.text:0000000000407050\n.text:0000000000407055\n.text:0000000000407058\n.text:000000000040705d\n.text:0000000000407062\n.text:0000000000407065\n.text:0000000000407068\n.text:000000000040706b\n.text:000000000040706e\n.text:0000000000407073\n.text:0000000000407076\n.text:0000000000407079\n.text:000000000040707e\n.text:0000000000407081\n.text:0000000000407083\n.text:0000000000407086\n.text:0000000000407088\n.text:000000000040708a\n.text:000000000040708d\n.text:0000000000407092\n.text:0000000000407097\n.text:000000000040709c\n.text:000000000040709f\n.text:00000000004070a5\n.text:00000000004070a7\n.text:00000000004070aa\n.text:00000000004070ad\n.text:00000000004070b0\n.text:00000000004070b2\n.text:00000000004070b4\n.text:00000000004070b7\n.text:00000000004070ba\n.text:00000000004070bf\n.text:00000000004070c2\n.text:00000000004070c4\n.text:00000000004070c7\n.text:00000000004070c9\n.text:00000000004070ce\n.text:00000000004070d1\n.text:00000000004070d6\n.text:00000000004070dc\n.text:00000000004070e2\n.text:00000000004070e4\n.text:00000000004070e9\n.text:00000000004070ef\n.text:00000000004070f2\n.text:00000000004070f5\n.text:00000000004070f8\n.text:00000000004070fa\n.text:00000000004070ff\n.text:0000000000407102\n.text:0000000000407108\n.text:000000000040710d\n.text:0000000000407113\n.text:0000000000407116\n.text:0000000000407119\n.text:000000000040711c\n.text:0000000000407124\n.text:0000000000407126\n.text:0000000000407128\n.text:000000000040712b\n.text:000000000040712f\n.text:0000000000407131\n.text:0000000000407134\n.text:0000000000407138\n.text:000000000040713a\n.text:000000000040713d\n.text:0000000000407140\n.text:0000000000407143\n.text:0000000000407145\n.text:0000000000407149\n.text:000000000040714b\n.text:000000000040714f\n.text:0000000000407152\n.text:0000000000407155\n.text:0000000000407158\n.text:000000000040715a\n.text:000000000040715e\n.text:0000000000407167\n.text:000000000040716a\n.text:000000000040716c\n.text:0000000000407170\n.text:0000000000407172\n.text:0000000000407176\n.text:0000000000407178\n.text:000000000040717b\n.text:000000000040717f\n.text:0000000000407181\n.text:0000000000407184\n.text:0000000000407188\n.text:000000000040718d\n.text:0000000000407190\n.text:0000000000407194\n.text:000000000040719c\n.text:000000000040719f\n.text:00000000004071a2\n.text:00000000004071a4\n.text:00000000004071a8\n.text:00000000004071ab\n.text:00000000004071ad\n.text:00000000004071b2\n.text:00000000004071b6\n.text:00000000004071bb\n.text:00000000004071c0\n.text:00000000004071c4\n.text:00000000004071ca\n.text:00000000004071d0\n.text:00000000004071d5\n.text:00000000004071db\n.text:00000000004071e0\n.text:00000000004071e2\n.text:00000000004071e7\n.text:00000000004071eb\n.text:00000000004071ed\n.text:00000000004071f1\n.text:00000000004071f3\n.text:00000000004071f5\n.text:00000000004071f8\n.text:00000000004071fd\n.text:00000000004071ff\n.text:0000000000407204\n.text:0000000000407209\n.text:000000000040720d\n.text:0000000000407212\n.text:0000000000407217\n.text:000000000040721a\n.text:000000000040721d\n.text:000000000040721f\n.text:0000000000407221\n.text:0000000000407226\n.text:000000000040722a\n.text:0000000000407230\n.text:0000000000407232\n.text:0000000000407234\n.text:0000000000407236\n.text:000000000040723e\n.text:0000000000407243\n.text:0000000000407249\n.text:000000000040724b\n.text:0000000000407250\n.text:0000000000407256\n.text:000000000040725f\n.text:0000000000407265\n.text:0000000000407270\n.text:0000000000407272\n.text:0000000000407275\n.text:0000000000407279\n.text:0000000000407281\n.text:0000000000407284\n.text:0000000000407289\n.text:000000000040728b\n.text:000000000040728e\n.text:0000000000407290\n.text:0000000000407295\n.text:0000000000407298\n.text:000000000040729d\n.text:00000000004072a0\n.text:00000000004072a5\n.text:00000000004072a9\n.text:00000000004072ae\n.text:00000000004072b0\n.text:00000000004072b2\n.text:00000000004072b8\n.text:00000000004072bd\n.text:00000000004072c2\n.text:00000000004072c5\n.text:00000000004072ca\n.text:00000000004072ce\n.text:00000000004072d3\n.text:00000000004072d8\n.text:00000000004072da\n.text:00000000004072dc\n.text:00000000004072e1\n.text:00000000004072e3\n.text:00000000004072e6\n.text:00000000004072ec\n.text:00000000004072ef\n.text:00000000004072f5\n.text:00000000004072f8\n.text:00000000004072fe\n.text:0000000000407303\n.text:0000000000407307\n.text:000000000040730d\n.text:0000000000407310\n.text:0000000000407313\n.text:0000000000407317\n.text:000000000040731a\n.text:000000000040731c\n.text:000000000040731f\n.text:0000000000407325\n.text:000000000040732a\n.text:000000000040732f\n.text:0000000000407335\n.text:0000000000407338\n.text:000000000040733e\n.text:0000000000407341\n.text:0000000000407343\n.text:0000000000407345\n.text:0000000000407347\n.text:0000000000407349\n.text:000000000040734c\n.text:000000000040734e\n.text:0000000000407353\n.text:0000000000407358\n.text:000000000040735b\n.text:000000000040735d\n.text:0000000000407362\n.text:0000000000407367\n.text:000000000040736a\n.text:000000000040736c\n.text:0000000000407371\n.text:0000000000407375\n.text:0000000000407378\n.text:000000000040737b\n.text:000000000040737d\n.text:0000000000407382\n.text:0000000000407387\n.text:0000000000407389\n.text:000000000040738c\n.text:000000000040738f\n.text:0000000000407395\n.text:0000000000407399\n.text:000000000040739c\n.text:00000000004073a2\n.text:00000000004073a6\n.text:00000000004073a9\n.text:00000000004073ac\n.text:00000000004073b2\n.text:00000000004073b5\n.text:00000000004073b7\n.text:00000000004073bc\n.text:00000000004073c1\n.text:00000000004073c4\n.text:00000000004073c6\n.text:00000000004073cb\n.text:00000000004073cf\n.text:00000000004073d4\n.text:00000000004073da\n.text:00000000004073df\n.text:00000000004073e1\n.text:00000000004073e6\n.text:00000000004073ec\n.text:00000000004073ee\n.text:00000000004073f0\n.text:00000000004073f2\n.text:00000000004073f4\n.text:00000000004073f9\n.text:00000000004073ff\n.text:0000000000407401\n.text:0000000000407403\n.text:0000000000407408\n.text:000000000040740e\n.text:0000000000407410\n.text:0000000000407412\n.text:0000000000407417\n.text:0000000000407419\n.text:000000000040741f\n.text:0000000000407424\n.text:000000000040742a\n.text:000000000040742d\n.text:0000000000407430\n.text:0000000000407436\n.text:000000000040743b\n.text:000000000040743e\n.text:0000000000407441\n.text:0000000000407447\n.text:000000000040744a\n.text:0000000000407450\n.text:0000000000407453\n.text:0000000000407455\n.text:000000000040745a\n.text:000000000040745f\n.text:0000000000407462\n.text:0000000000407464\n.text:0000000000407469\n.text:000000000040746e\n.text:0000000000407471\n.text:0000000000407473\n.text:0000000000407478\n.text:000000000040747c\n.text:000000000040747e\n.text:0000000000407483\n.text:0000000000407486\n.text:0000000000407489\n.text:000000000040748f\n.text:0000000000407492\n.text:0000000000407498\n.text:000000000040749b\n.text:00000000004074a1\n.text:00000000004074a6\n.text:00000000004074a9\n.text:00000000004074af\n.text:00000000004074b2\n.text:00000000004074b8\n.text:00000000004074bb\n.text:00000000004074bd\n.text:00000000004074c1\n.text:00000000004074c7\n.text:00000000004074cc\n.text:00000000004074d0\n.text:00000000004074d9\n.text:00000000004074df\n.text:00000000004074e4\n.text:00000000004074e9\n.text:00000000004074ee\n.text:00000000004074f1\n.text:00000000004074f6\n.text:00000000004074f9\n.text:00000000004074fc\n.text:0000000000407501\n.text:0000000000407506\n.text:000000000040750a\n.text:000000000040750f\n.text:0000000000407514\n.text:0000000000407518\n.text:000000000040751a\n.text:000000000040751f\n.text:0000000000407525\n.text:0000000000407528\n.text:000000000040752a\n.text:000000000040752d\n.text:0000000000407530\n.text:0000000000407536\n.text:000000000040753b\n.text:000000000040753e\n.text:0000000000407541\n.text:0000000000407544\n.text:0000000000407547\n.text:0000000000407549\n.text:000000000040754d\n.text:000000000040754f\n.text:0000000000407554\n.text:0000000000407559\n.text:000000000040755f\n.text:0000000000407570\n.text:0000000000407575\n.text:0000000000407577\n.text:000000000040757a\n.text:000000000040757c\n.text:000000000040757f\n.text:0000000000407581\n.text:0000000000407584\n.text:0000000000407586\n.text:000000000040758b\n.text:0000000000407590\n.text:0000000000407593\n.text:0000000000407595\n.text:000000000040759a\n.text:000000000040759e\n.text:00000000004075a6\n.text:00000000004075a9\n.text:00000000004075ac\n.text:00000000004075ae\n.text:00000000004075b2\n.text:00000000004075c0\n.text:00000000004075c4\n.text:00000000004075ca\n.text:00000000004075cd\n.text:00000000004075cf\n.text:00000000004075d4\n.text:00000000004075d7\n.text:00000000004075d9\n.text:00000000004075e0\n.text:00000000004075e3\n.text:00000000004075e8\n.text:00000000004075eb\n.text:00000000004075f0\n.text:00000000004075f2\n.text:00000000004075f5\n.text:00000000004075fb\n.text:00000000004075fe\n.text:0000000000407600\n.text:0000000000407604\n.text:0000000000407606\n.text:0000000000407608\n.text:000000000040760b\n.text:000000000040760d\n.text:0000000000407612\n.text:0000000000407617\n.text:000000000040761a\n.text:000000000040761c\n.text:0000000000407621\n.text:0000000000407626\n.text:0000000000407629\n.text:000000000040762b\n.text:0000000000407630\n.text:0000000000407634\n.text:0000000000407636\n.text:000000000040763a\n.text:000000000040763d\n.text:000000000040763f\n.text:0000000000407644\n.text:0000000000407649\n.text:000000000040764c\n.text:000000000040764e\n.text:0000000000407651\n.text:0000000000407654\n.text:0000000000407657\n.text:000000000040765b\n.text:0000000000407660\n.text:0000000000407663\n.text:0000000000407665\n.text:0000000000407668\n.text:000000000040766b\n.text:000000000040766e\n.text:0000000000407671\n.text:0000000000407675\n.text:0000000000407679\n.text:000000000040767d\n.text:0000000000407681\n.text:0000000000407683\n.text:0000000000407687\n.text:000000000040768a\n.text:0000000000407690\n.text:0000000000407694\n.text:0000000000407698\n.text:000000000040769e\n.text:00000000004076a3\n.text:00000000004076a6\n.text:00000000004076a9\n.text:00000000004076ae\n.text:00000000004076b1\n.text:00000000004076b3\n.text:00000000004076b6\n.text:00000000004076bd\n.text:00000000004076c3\n.text:00000000004076c5\n.text:00000000004076c9\n.text:00000000004076cf\n.text:00000000004076d4\n.text:00000000004076d9\n.text:00000000004076df\n.text:00000000004076e2\n.text:00000000004076e4\n.text:00000000004076e9\n.text:00000000004076ef\n.text:00000000004076f4\n.text:00000000004076f6\n.text:00000000004076fb\n.text:0000000000407701\n.text:0000000000407703\n.text:0000000000407706\n.text:000000000040770a\n.text:0000000000407710\n.text:0000000000407715\n.text:0000000000407721\n.text:0000000000407725\n.text:0000000000407727\n.text:000000000040772a\n.text:000000000040772f\n.text:0000000000407734\n.text:0000000000407737\n.text:000000000040773b\n.text:0000000000407740\n.text:0000000000407742\n.text:0000000000407746\n.text:0000000000407748\n.text:0000000000407750\n.text:0000000000407755\n.text:000000000040775a\n.text:000000000040775e\n.text:0000000000407762\n.text:000000000040776a\n.text:000000000040776d\n.text:0000000000407772\n.text:0000000000407775\n.text:0000000000407778\n.text:000000000040777d\n.text:0000000000407780\n.text:0000000000407783\n.text:0000000000407789\n.text:000000000040778d\n.text:0000000000407797\n.text:000000000040779d\n.text:00000000004077a1\n.text:00000000004077a6\n.text:00000000004077ac\n.text:00000000004077b0\n.text:00000000004077b3\n.text:00000000004077b7\n.text:00000000004077b9\n.text:00000000004077be\n.text:00000000004077c3\n.text:00000000004077c7\n.text:00000000004077c9\n.text:00000000004077ce\n.text:00000000004077d3\n.text:00000000004077d7\n.text:00000000004077dc\n.text:00000000004077e0\n.text:00000000004077e4\n.text:00000000004077e7\n.text:00000000004077ea\n.text:00000000004077ec\n.text:00000000004077f0\n.text:00000000004077f6\n.text:00000000004077f9\n.text:00000000004077fc\n.text:00000000004077fe\n.text:0000000000407802\n.text:0000000000407807\n.text:0000000000407809\n.text:000000000040780b\n.text:0000000000407813\n.text:0000000000407818\n.text:000000000040781b\n.text:0000000000407823\n.text:0000000000407826\n.text:0000000000407829\n.text:000000000040782e\n.text:0000000000407831\n.text:0000000000407833\n.text:0000000000407838\n.text:000000000040783d\n.text:0000000000407843\n.text:0000000000407848\n.text:000000000040784b\n.text:0000000000407850\n.text:0000000000407856\n.text:000000000040785b\n.text:0000000000407860\n.text:0000000000407866\n.text:000000000040786a\n.text:000000000040786d\n.text:0000000000407873\n.text:0000000000407879\n.text:000000000040787f\n.text:0000000000407884\n.text:0000000000407886\n.text:0000000000407889\n.text:000000000040788f\n.text:0000000000407893\n.text:0000000000407895\n.text:000000000040789f\n.text:00000000004078a3\n.text:00000000004078a9\n.text:00000000004078ac\n.text:00000000004078ae\n.text:00000000004078b4\n.text:00000000004078b7\n.text:00000000004078b9\n.text:00000000004078be\n.text:00000000004078c3\n.text:00000000004078c6\n.text:00000000004078ca\n.text:00000000004078cc\n.text:00000000004078d1\n.text:00000000004078d6\n.text:00000000004078d9\n.text:00000000004078db\n.text:00000000004078e0\n.text:00000000004078e5\n.text:00000000004078e8\n.text:00000000004078ea\n.text:00000000004078ef\n.text:00000000004078f3\n.text:00000000004078f5\n.text:00000000004078f8\n.text:00000000004078fb\n.text:0000000000407900\n.text:0000000000407906\n.text:0000000000407908\n.text:000000000040790d\n.text:0000000000407912\n.text:0000000000407918\n.text:0000000000407920\n.text:0000000000407925\n.text:0000000000407927\n.text:000000000040792c\n.text:000000000040792f\n.text:0000000000407931\n.text:0000000000407934\n.text:0000000000407936\n.text:0000000000407939\n.text:000000000040793c\n.text:000000000040793f\n.text:0000000000407941\n.text:0000000000407949\n.text:000000000040794c\n.text:000000000040794e\n.text:0000000000407950\n.text:0000000000407960\n.text:0000000000407963\n.text:0000000000407965\n.text:0000000000407968\n.text:000000000040796e\n.text:0000000000407971\n.text:0000000000407973\n.text:0000000000407975\n.text:0000000000407977\n.text:0000000000407979\n.text:000000000040797c\n.text:000000000040797e\n.text:0000000000407983\n.text:0000000000407988\n.text:000000000040798b\n.text:000000000040798d\n.text:0000000000407992\n.text:0000000000407997\n.text:000000000040799a\n.text:000000000040799c\n.text:00000000004079a1\n.text:00000000004079a5\n.text:00000000004079a8\n.text:00000000004079ab\n.text:00000000004079ad\n.text:00000000004079b2\n.text:00000000004079b5\n.text:00000000004079b8\n.text:00000000004079ba\n.text:00000000004079c0\n.text:00000000004079c4\n.text:00000000004079c6\n.text:00000000004079c8\n.text:00000000004079ca\n.text:00000000004079cd\n.text:00000000004079cf\n.text:00000000004079d4\n.text:00000000004079d9\n.text:00000000004079dc\n.text:00000000004079de\n.text:00000000004079e3\n.text:00000000004079e7\n.text:00000000004079e9\n.text:00000000004079ec\n.text:00000000004079ee\n.text:00000000004079f2\n.text:00000000004079f5\n.text:00000000004079f8\n.text:00000000004079fc\n.text:0000000000407a02\n.text:0000000000407a07\n.text:0000000000407a0f\n.text:0000000000407a14\n.text:0000000000407a16\n.text:0000000000407a1e\n.text:0000000000407a23\n.text:0000000000407a25\n.text:0000000000407a2a\n.text:0000000000407a2f\n.text:0000000000407a33\n.text:0000000000407a35\n.text:0000000000407a3a\n.text:0000000000407a3d\n.text:0000000000407a40\n.text:0000000000407a42\n.text:0000000000407a4a\n.text:0000000000407a4c\n.text:0000000000407a54\n.text:0000000000407a59\n.text:0000000000407a5d\n.text:0000000000407a62\n.text:0000000000407a67\n.text:0000000000407a6b\n.text:0000000000407a70\n.text:0000000000407a75\n.text:0000000000407a79\n.text:0000000000407a7d\n.text:0000000000407a83\n.text:0000000000407a88\n.text:0000000000407a90\n.text:0000000000407a92\n.text:0000000000407a94\n.text:0000000000407a98\n.text:0000000000407a9d\n.text:0000000000407aa3\n.text:0000000000407ab0\n.text:0000000000407ab3\n.text:0000000000407ab9\n.text:0000000000407abc\n.text:0000000000407abe\n.text:0000000000407ac1\n.text:0000000000407ac3\n.text:0000000000407ac6\n.text:0000000000407ac8\n.text:0000000000407ad0\n.text:0000000000407ad6\n.text:0000000000407ada\n.text:0000000000407add\n.text:0000000000407ae1\n.text:0000000000407ae6\n.text:0000000000407aea\n.text:0000000000407aee\n.text:0000000000407af1\n.text:0000000000407af4\n.text:0000000000407af7\n.text:0000000000407afb\n.text:0000000000407aff\n.text:0000000000407b01\n.text:0000000000407b06\n.text:0000000000407b0a\n.text:0000000000407b0d\n.text:0000000000407b10\n.text:0000000000407b17\n.text:0000000000407b18\n.text:0000000000407b1a\n.text:0000000000407b1c\n.text:0000000000407b1e\n.text:0000000000407b20\n.text:0000000000407b21\n.text:0000000000407b22\n.text:0000000000407b2a\n.text:0000000000407b2d\n.text:0000000000407b2f\n.text:0000000000407b32\n.text:0000000000407b34\n.text:0000000000407b36\n.text:0000000000407b38\n.text:0000000000407b3a\n.text:0000000000407b3d\n.text:0000000000407b40\n.text:0000000000407b43\n.text:0000000000407b45\n.text:0000000000407b49\n.text:0000000000407b4c\n.text:0000000000407b4f\n.text:0000000000407b52\n.text:0000000000407b54\n.text:0000000000407b56\n.text:0000000000407b59\n.text:0000000000407b5b\n.text:0000000000407b60\n.text:0000000000407b62\n.text:0000000000407b67\n.text:0000000000407b6c\n.text:0000000000407b6f\n.text:0000000000407b71\n.text:0000000000407b76\n.text:0000000000407b79\n.text:0000000000407b7e\n.text:0000000000407b81\n.text:0000000000407b87\n.text:0000000000407b8d\n.text:0000000000407b90\n.text:0000000000407b95\n'
p1133
tp1134
sS'hard_locale'
p1135
(S'\n__stdcall hard_locale()\n'
p1136
V\u000a_Bool hard_locale(void)\u000a\u000a{\u000a  int iVar1;\u000a  char *__s1;\u000a  undefined uVar2;\u000a  int __category;\u000a  \u000a  __s1 = setlocale(__category,(char *)0x0);\u000a  uVar2 = 1;\u000a  if (__s1 != (char *)0x0) {\u000a    if (((*__s1 != 'C') || (__s1[1] != 0)) && (iVar1 = strcmp(__s1,"POSIX"), iVar1 != 0)) {\u000a      return true;\u000a    }\u000a    uVar2 = 0;\u000a  }\u000a  return (_Bool)uVar2;\u000a}\u000a\u000a
p1137
S'PUSH RBX\nXOR ESI,ESI\nCALL 0x00401f40\nMOV BL,0x1\nTEST RAX,RAX\nJZ 0x0040993d\nCMP byte ptr [RAX],0x43\nJNZ 0x0040992a\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x0040993b\nMOV ESI,0x40c922\nMOV RDI,RAX\nCALL 0x00401dd0\nTEST EAX,EAX\nJNZ 0x0040993d\nXOR EBX,EBX\nMOV EAX,EBX\nPOP RBX\nRET\n'
p1138
S'53\n31 f6\ne8 28 86 ff ff\nb3 01\n48 85 c0\n74 1e\n80 38 43\n75 06\n80 78 01 00\n74 11\nbe 22 c9 40 00\n48 89 c7\ne8 99 84 ff ff\n85 c0\n75 02\n31 db\n89 d8\n5b\nc3\n'
p1139
S'.text:0000000000409910\n.text:0000000000409911\n.text:0000000000409913\n.text:0000000000409918\n.text:000000000040991a\n.text:000000000040991d\n.text:000000000040991f\n.text:0000000000409922\n.text:0000000000409924\n.text:0000000000409928\n.text:000000000040992a\n.text:000000000040992f\n.text:0000000000409932\n.text:0000000000409937\n.text:0000000000409939\n.text:000000000040993b\n.text:000000000040993d\n.text:000000000040993f\n.text:0000000000409940\n'
p1140
tp1141
sS'getgid'
p1142
(S'\n__stdcall getgid()\n'
p1143
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__gid_t getgid(void)\u000a\u000a{\u000a  __gid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_getgid_0060f1c8)();\u000a  return _Var1;\u000a}\u000a\u000a
p1144
S'JMP qword ptr [0x0060f1c8]\n'
p1145
S'ff 25 72 d3 20 00\n'
p1146
S'.plt:0000000000401e50\n'
p1147
tp1148
sS'set_quoting_style'
p1149
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p1150
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p1151
S'TEST RDI,RDI\nMOV EAX,0x60f560\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p1152
S'48 85 ff\nb8 60 f5 60 00\n48 0f 45 c7\n89 30\nc3\n'
p1153
S'.text:0000000000406e40\n.text:0000000000406e43\n.text:0000000000406e48\n.text:0000000000406e4c\n.text:0000000000406e4e\n'
p1154
tp1155
sS'textdomain'
p1156
(S'\n__stdcall textdomain()\n'
p1157
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_0060f0a0)();\u000a  return;\u000a}\u000a\u000a
p1158
S'JMP qword ptr [0x0060f0a0]\n'
p1159
S'ff 25 9a d4 20 00\n'
p1160
S'.plt:0000000000401c00\n'
p1161
tp1162
sS'xmemdup'
p1163
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p1164
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p1165
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00408bd0\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00401e20\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1166
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 ec 90 ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p1167
S'.text:0000000000408d10\n.text:0000000000408d12\n.text:0000000000408d14\n.text:0000000000408d15\n.text:0000000000408d18\n.text:0000000000408d1b\n.text:0000000000408d1e\n.text:0000000000408d23\n.text:0000000000408d26\n.text:0000000000408d29\n.text:0000000000408d2c\n.text:0000000000408d2f\n.text:0000000000408d34\n.text:0000000000408d37\n.text:0000000000408d38\n.text:0000000000408d3a\n.text:0000000000408d3c\n'
p1168
tp1169
sS'explain_how_to_report_bugs'
p1170
(S'\n__stdcall explain_how_to_report_bugs(FILE * f, char * program_name)\n'
p1171
V\u000aint explain_how_to_report_bugs(FILE *f,char *program_name)\u000a\u000a{\u000a  int iVar1;\u000a  char *__format;\u000a  \u000a  __format = (char *)dcgettext(0,\u000a                               "Please see also the documentation at %s.\u005cnYou can report (and track progress on fixing) bugs in the \u005c"%s\u005c"\u005cnprogram via the %s bug-reporting page at\u005cn%s or, if\u005cnyou have no web access, by sending email to <%s>.\u005cn"\u000a                               ,5);\u000a  iVar1 = fprintf((FILE *)f,__format,"http://www.gnu.org/software/findutils/",program_name,\u000a                  "GNU findutils","https://savannah.gnu.org/bugs/?group=findutils",\u000a                  "bug-findutils@gnu.org");\u000a  return iVar1;\u000a}\u000a\u000a
p1172
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV ESI,0x40b7bc\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RCX,RAX\nMOV qword ptr [RSP],0x40b8e0\nMOV EDX,0x40b88a\nMOV R8D,0x40b3e1\nMOV R9D,0x40b8b1\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RSI,RCX\nMOV RCX,R14\nCALL 0x00401df0\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1173
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n31 ff\nbe bc b7 40 00\nba 05 00 00 00\ne8 85 d2 ff ff\n48 89 c1\n48 c7 04 24 e0 b8 40 00\nba 8a b8 40 00\n41 b8 e1 b3 40 00\n41 b9 b1 b8 40 00\n31 c0\n48 89 df\n48 89 ce\n4c 89 f1\ne8 19 d4 ff ff\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1174
S'.text:0000000000404990\n.text:0000000000404992\n.text:0000000000404993\n.text:0000000000404994\n.text:0000000000404997\n.text:000000000040499a\n.text:000000000040499c\n.text:00000000004049a1\n.text:00000000004049a6\n.text:00000000004049ab\n.text:00000000004049ae\n.text:00000000004049b6\n.text:00000000004049bb\n.text:00000000004049c1\n.text:00000000004049c7\n.text:00000000004049c9\n.text:00000000004049cc\n.text:00000000004049cf\n.text:00000000004049d2\n.text:00000000004049d7\n.text:00000000004049db\n.text:00000000004049dc\n.text:00000000004049de\n'
p1175
tp1176
sS'fread'
p1177
(S'\n__stdcall fread(void * __ptr, size_t __size, size_t __n, FILE * __stream)\n'
p1178
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fread_0060f080)();\u000a  return sVar1;\u000a}\u000a\u000a
p1179
S'JMP qword ptr [0x0060f080]\n'
p1180
S'ff 25 ba d4 20 00\n'
p1181
S'.plt:0000000000401bc0\n'
p1182
tp1183
sS'get_regex_type_name'
p1184
(S'\n__stdcall get_regex_type_name()\n'
p1185
V\u000achar * get_regex_type_name(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if (in_EDI < 0xd) {\u000a    return regex_map[(ulong)in_EDI].name;\u000a  }\u000a  return (char *)0x0;\u000a}\u000a\u000a
p1186
S'CMP EDI,0xc\nJA 0x00404883\nMOV EAX,EDI\nSHL RAX,0x4\nMOV RAX,qword ptr [0x60f320 + RAX]\nRET\nXOR EAX,EAX\nRET\n'
p1187
S'83 ff 0c\n77 0e\n89 f8\n48 c1 e0 04\n48 8b 80 20 f3 60 00\nc3\n31 c0\nc3\n'
p1188
S'.text:0000000000404870\n.text:0000000000404873\n.text:0000000000404875\n.text:0000000000404877\n.text:000000000040487b\n.text:0000000000404882\n.text:0000000000404883\n.text:0000000000404885\n'
p1189
tp1190
sS'get_quoting_style'
p1191
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p1192
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p1193
S'TEST RDI,RDI\nMOV EAX,0x60f560\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p1194
S'48 85 ff\nb8 60 f5 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p1195
S'.text:0000000000406e30\n.text:0000000000406e33\n.text:0000000000406e38\n.text:0000000000406e3c\n.text:0000000000406e3e\n'
p1196
tp1197
sS're_set_syntax'
p1198
(S'\n__stdcall re_set_syntax(reg_syntax_t __syntax)\n'
p1199
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000areg_syntax_t re_set_syntax(reg_syntax_t __syntax)\u000a\u000a{\u000a  reg_syntax_t rVar1;\u000a  \u000a  rVar1 = (*(code *)PTR_re_set_syntax_0060f1e0)();\u000a  return rVar1;\u000a}\u000a\u000a
p1200
S'JMP qword ptr [0x0060f1e0]\n'
p1201
S'ff 25 5a d3 20 00\n'
p1202
S'.plt:0000000000401e80\n'
p1203
tp1204
sS'exit'
p1205
(S'\n__stdcall exit(int __status)\n'
p1206
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_0060f2b0)();\u000a  return;\u000a}\u000a\u000a
p1207
S'JMP qword ptr [0x0060f2b0]\n'
p1208
S'ff 25 8a d2 20 00\n'
p1209
S'.plt:0000000000402020\n'
p1210
tp1211
sS'locale_charset'
p1212
(S'\n__stdcall locale_charset()\n'
p1213
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_004099cd:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_004099cd;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p1214
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401ec0\nTEST RAX,RAX\nMOV R14D,0x40c0f9\nCMOVNZ R14,RAX\nCALL 0x004099e0\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x004099a5\nJMP 0x004099cd\nMOV RDI,RBX\nCALL 0x00401c50\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00401c50\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x004099cd\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00401dd0\nTEST EAX,EAX\nJZ 0x004099c0\nCMP BPL,0x2a\nJNZ 0x00409980\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00409980\nMOV RDI,RBX\nCALL 0x00401c50\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x40ca50\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1215
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 62 85 ff ff\n48 85 c0\n41 be f9 c0 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 c8 82 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 ba 82 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 20 84 ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 88 82 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 50 ca 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p1216
S'.text:0000000000409950\n.text:0000000000409951\n.text:0000000000409953\n.text:0000000000409954\n.text:0000000000409959\n.text:000000000040995e\n.text:0000000000409961\n.text:0000000000409967\n.text:000000000040996b\n.text:0000000000409970\n.text:0000000000409973\n.text:0000000000409976\n.text:0000000000409979\n.text:000000000040997b\n.text:0000000000409980\n.text:0000000000409983\n.text:0000000000409988\n.text:000000000040998c\n.text:0000000000409991\n.text:0000000000409996\n.text:000000000040999b\n.text:00000000004099a0\n.text:00000000004099a3\n.text:00000000004099a5\n.text:00000000004099a8\n.text:00000000004099ab\n.text:00000000004099b0\n.text:00000000004099b2\n.text:00000000004099b4\n.text:00000000004099b8\n.text:00000000004099ba\n.text:00000000004099be\n.text:00000000004099c0\n.text:00000000004099c3\n.text:00000000004099c8\n.text:00000000004099cd\n.text:00000000004099d1\n.text:00000000004099d6\n.text:00000000004099da\n.text:00000000004099db\n.text:00000000004099dd\n.text:00000000004099de\n'
p1217
tp1218
sS'FUN_00401ae0'
p1219
(S'\n__stdcall FUN_00401ae0()\n'
p1220
V\u000avoid FUN_00401ae0(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_0060f010)();\u000a  return;\u000a}\u000a\u000a
p1221
S'PUSH qword ptr [0x0060f008]\nJMP qword ptr [0x0060f010]\n'
p1222
S'ff 35 22 d5 20 00\nff 25 24 d5 20 00\n'
p1223
S'.plt:0000000000401ae0\n.plt:0000000000401ae6\n'
p1224
tp1225
sS'set_program_name'
p1226
(S'\n__stdcall set_program_name(char * argv0)\n'
p1227
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p1228
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00406dc1\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00401ce0\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x00406dab\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x40ba74\nMOV EDX,0x7\nCALL 0x00401b50\nTEST EAX,EAX\nJNZ 0x00406dab\nMOV ESI,0x40ba7c\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401b50\nTEST EAX,EAX\nJNZ 0x00406da8\nADD R14,0x3\nMOV qword ptr [0x0060f460],R14\nMOV RBX,R14\nMOV qword ptr [0x0060f550],RBX\nMOV qword ptr [0x0060f480],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x0060f4a0]\nMOV EDI,0x40ba3c\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00402030\nCALL 0x00401b30\n'
p1229
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 87 af ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 74 ba 40 00\nba 07 00 00 00\ne8 cd ad ff ff\n85 c0\n75 24\nbe 7c ba 40 00\nba 03 00 00 00\n4c 89 f7\ne8 b7 ad ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 b8 86 20 00\n4c 89 f3\n48 89 1d 9e 87 20 00\n48 89 1d c7 86 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d d8 86 20 00\nbf 3c ba 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 54 b2 ff ff\ne8 4f ad ff ff\n'
p1230
S'.text:0000000000406d40\n.text:0000000000406d42\n.text:0000000000406d43\n.text:0000000000406d44\n.text:0000000000406d47\n.text:0000000000406d4a\n.text:0000000000406d4c\n.text:0000000000406d51\n.text:0000000000406d54\n.text:0000000000406d59\n.text:0000000000406d5c\n.text:0000000000406d60\n.text:0000000000406d64\n.text:0000000000406d67\n.text:0000000000406d6a\n.text:0000000000406d6e\n.text:0000000000406d70\n.text:0000000000406d74\n.text:0000000000406d79\n.text:0000000000406d7e\n.text:0000000000406d83\n.text:0000000000406d85\n.text:0000000000406d87\n.text:0000000000406d8c\n.text:0000000000406d91\n.text:0000000000406d94\n.text:0000000000406d99\n.text:0000000000406d9b\n.text:0000000000406d9d\n.text:0000000000406da1\n.text:0000000000406da8\n.text:0000000000406dab\n.text:0000000000406db2\n.text:0000000000406db9\n.text:0000000000406dbd\n.text:0000000000406dbe\n.text:0000000000406dc0\n.text:0000000000406dc1\n.text:0000000000406dc8\n.text:0000000000406dcd\n.text:0000000000406dd2\n.text:0000000000406dd7\n.text:0000000000406ddc\n'
p1231
tp1232
sS'quotearg_buffer'
p1233
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p1234
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p1235
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x60f560\nCMOVNZ RBP,R8\nCALL 0x00401b40\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00406f60\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1236
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd 60 f5 60 00\n49 0f 45 e8\ne8 38 ac ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1237
S'.text:0000000000406ee0\n.text:0000000000406ee1\n.text:0000000000406ee3\n.text:0000000000406ee5\n.text:0000000000406ee7\n.text:0000000000406ee9\n.text:0000000000406eea\n.text:0000000000406eeb\n.text:0000000000406eee\n.text:0000000000406ef1\n.text:0000000000406ef4\n.text:0000000000406ef7\n.text:0000000000406efa\n.text:0000000000406eff\n.text:0000000000406f03\n.text:0000000000406f08\n.text:0000000000406f0b\n.text:0000000000406f0d\n.text:0000000000406f11\n.text:0000000000406f15\n.text:0000000000406f19\n.text:0000000000406f1d\n.text:0000000000406f20\n.text:0000000000406f23\n.text:0000000000406f26\n.text:0000000000406f29\n.text:0000000000406f2c\n.text:0000000000406f2f\n.text:0000000000406f33\n.text:0000000000406f34\n.text:0000000000406f39\n.text:0000000000406f3d\n.text:0000000000406f41\n.text:0000000000406f43\n.text:0000000000406f47\n.text:0000000000406f48\n.text:0000000000406f4a\n.text:0000000000406f4c\n.text:0000000000406f4e\n.text:0000000000406f50\n.text:0000000000406f51\n'
p1238
tp1239
sS'quotearg_colon'
p1240
(S'\n__stdcall quotearg_colon(char * arg)\n'
p1241
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1242
S'MOV ESI,0x3a\nJMP 0x004080c0\n'
p1243
S'be 3a 00 00 00\neb e9\n'
p1244
S'.text:00000000004080d0\n.text:00000000004080d5\n'
p1245
tp1246
sS'get_stat_ctime'
p1247
(S'\n__stdcall get_stat_ctime(stat * st)\n'
p1248
V\u000atimespec get_stat_ctime(stat *st)\u000a\u000a{\u000a  return st->st_ctim;\u000a}\u000a\u000a
p1249
S'MOV RAX,qword ptr [RDI + 0x68]\nMOV RDX,qword ptr [RDI + 0x70]\nRET\n'
p1250
S'48 8b 47 68\n48 8b 57 70\nc3\n'
p1251
S'.text:0000000000408690\n.text:0000000000408694\n.text:0000000000408698\n'
p1252
tp1253
sS'print_quoted'
p1254
(S'\n__stdcall print_quoted(FILE * fp, quoting_options * qopts, char * format, char * s)\n'
p1255
V\u000aint print_quoted(FILE *fp,quoting_options *qopts,char *format,char *s)\u000a\u000a{\u000a  int iVar1;\u000a  size_t len;\u000a  char *buffer;\u000a  char *arg;\u000a  char smallbuf [8192];\u000a  char local_2038 [8200];\u000a  \u000a  if ((char)format != 0) {\u000a    buffer = local_2038;\u000a    len = quotearg_buffer(buffer,0x2000,arg,0xffffffffffffffff,qopts);\u000a    if (0x1fff < len) {\u000a      buffer = (char *)xmalloc(len + 1);\u000a      quotearg_buffer(buffer,len + 1,arg,0xffffffffffffffff,qopts);\u000a    }\u000a    qmark_chars(buffer,len);\u000a    iVar1 = fprintf((FILE *)fp,s,buffer);\u000a    if (buffer != local_2038) {\u000a      free(buffer);\u000a    }\u000a    return iVar1;\u000a  }\u000a  iVar1 = fprintf((FILE *)fp,s);\u000a  return iVar1;\u000a}\u000a\u000a
p1256
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x2018\nMOV R12,R8\nMOV RBX,RCX\nMOV R13,RSI\nMOV R14,RDI\nTEST DL,DL\nJZ 0x00404566\nLEA RBP,[RSP + 0x10]\nMOV ESI,0x2000\nMOV RCX,-0x1\nMOV RDI,RBP\nMOV RDX,R12\nMOV R8,R13\nCALL 0x00406ee0\nMOV R15,RAX\nCMP R15,0x2000\nJC 0x00404523\nMOV qword ptr [RSP + 0x8],R14\nMOV R14,R15\nINC R14\nMOV RDI,R14\nCALL 0x00408bd0\nMOV RBP,RAX\nMOV RCX,-0x1\nMOV RDI,RBP\nMOV RSI,R14\nMOV R14,qword ptr [RSP + 0x8]\nMOV RDX,R12\nMOV R8,R13\nCALL 0x00406ee0\nMOV RDI,RBP\nMOV RSI,R15\nCALL 0x00404590\nXOR EAX,EAX\nMOV RDI,R14\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00401df0\nMOV EBX,EAX\nLEA RAX,[RSP + 0x10]\nCMP RBP,RAX\nJZ 0x00404552\nMOV RDI,RBP\nCALL 0x00401b00\nMOV EAX,EBX\nADD RSP,0x2018\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EAX,EAX\nMOV RDI,R14\nMOV RSI,RBX\nMOV RDX,R12\nADD RSP,0x2018\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00401df0\n'
p1257
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 18 20 00 00\n4d 89 c4\n48 89 cb\n49 89 f5\n49 89 fe\n84 d2\n0f 84 a1 00 00 00\n48 8d 6c 24 10\nbe 00 20 00 00\n48 c7 c1 ff ff ff ff\n48 89 ef\n4c 89 e2\n4d 89 e8\ne8 fc 29 00 00\n49 89 c7\n49 81 ff 00 20 00 00\n72 33\n4c 89 74 24 08\n4d 89 fe\n49 ff c6\n4c 89 f7\ne8 cd 46 00 00\n48 89 c5\n48 c7 c1 ff ff ff ff\n48 89 ef\n4c 89 f6\n4c 8b 74 24 08\n4c 89 e2\n4d 89 e8\ne8 bd 29 00 00\n48 89 ef\n4c 89 fe\ne8 62 00 00 00\n31 c0\n4c 89 f7\n48 89 de\n48 89 ea\ne8 b2 d8 ff ff\n89 c3\n48 8d 44 24 10\n48 39 c5\n74 08\n48 89 ef\ne8 ae d5 ff ff\n89 d8\n48 81 c4 18 20 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 c0\n4c 89 f7\n48 89 de\n4c 89 e2\n48 81 c4 18 20 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 69 d8 ff ff\n'
p1258
S'.text:00000000004044a0\n.text:00000000004044a1\n.text:00000000004044a3\n.text:00000000004044a5\n.text:00000000004044a7\n.text:00000000004044a9\n.text:00000000004044aa\n.text:00000000004044b1\n.text:00000000004044b4\n.text:00000000004044b7\n.text:00000000004044ba\n.text:00000000004044bd\n.text:00000000004044bf\n.text:00000000004044c5\n.text:00000000004044ca\n.text:00000000004044cf\n.text:00000000004044d6\n.text:00000000004044d9\n.text:00000000004044dc\n.text:00000000004044df\n.text:00000000004044e4\n.text:00000000004044e7\n.text:00000000004044ee\n.text:00000000004044f0\n.text:00000000004044f5\n.text:00000000004044f8\n.text:00000000004044fb\n.text:00000000004044fe\n.text:0000000000404503\n.text:0000000000404506\n.text:000000000040450d\n.text:0000000000404510\n.text:0000000000404513\n.text:0000000000404518\n.text:000000000040451b\n.text:000000000040451e\n.text:0000000000404523\n.text:0000000000404526\n.text:0000000000404529\n.text:000000000040452e\n.text:0000000000404530\n.text:0000000000404533\n.text:0000000000404536\n.text:0000000000404539\n.text:000000000040453e\n.text:0000000000404540\n.text:0000000000404545\n.text:0000000000404548\n.text:000000000040454a\n.text:000000000040454d\n.text:0000000000404552\n.text:0000000000404554\n.text:000000000040455b\n.text:000000000040455c\n.text:000000000040455e\n.text:0000000000404560\n.text:0000000000404562\n.text:0000000000404564\n.text:0000000000404565\n.text:0000000000404566\n.text:0000000000404568\n.text:000000000040456b\n.text:000000000040456e\n.text:0000000000404571\n.text:0000000000404578\n.text:0000000000404579\n.text:000000000040457b\n.text:000000000040457d\n.text:000000000040457f\n.text:0000000000404581\n.text:0000000000404582\n'
p1259
tp1260
sS'rpl_fflush'
p1261
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p1262
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_0060f1f0)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p1263
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x004092fd\nMOV RDI,RBX\nCALL 0x00401f10\nTEST EAX,EAX\nJZ 0x004092fd\nMOV RDI,RBX\nCALL 0x00409310\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401ea0\n'
p1264
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 1f 8c ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 9a 8b ff ff\n'
p1265
S'.text:00000000004092e0\n.text:00000000004092e1\n.text:00000000004092e4\n.text:00000000004092e7\n.text:00000000004092e9\n.text:00000000004092ec\n.text:00000000004092f1\n.text:00000000004092f3\n.text:00000000004092f5\n.text:00000000004092f8\n.text:00000000004092fd\n.text:0000000000409300\n.text:0000000000409301\n'
p1266
tp1267
sS'__assert_fail'
p1268
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p1269
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_0060f120)();\u000a  return;\u000a}\u000a\u000a
p1270
S'JMP qword ptr [0x0060f120]\n'
p1271
S'ff 25 1a d4 20 00\n'
p1272
S'.plt:0000000000401d00\n'
p1273
tp1274
sS'strnlen'
p1275
(S'\n__stdcall strnlen(char * __string, size_t __maxlen)\n'
p1276
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strnlen(char *__string,size_t __maxlen)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strnlen_0060f150)();\u000a  return sVar1;\u000a}\u000a\u000a
p1277
S'JMP qword ptr [0x0060f150]\n'
p1278
S'ff 25 ea d3 20 00\n'
p1279
S'.plt:0000000000401d60\n'
p1280
tp1281
sS'bindtextdomain'
p1282
(S'\n__stdcall bindtextdomain()\n'
p1283
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_0060f0b0)();\u000a  return;\u000a}\u000a\u000a
p1284
S'JMP qword ptr [0x0060f0b0]\n'
p1285
S'ff 25 8a d4 20 00\n'
p1286
S'.plt:0000000000401c20\n'
p1287
tp1288
sS'set_char_quoting'
p1289
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p1290
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p1291
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x60f560\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p1292
S'89 f1\n48 85 ff\nbe 60 f5 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p1293
S'.text:0000000000406e50\n.text:0000000000406e52\n.text:0000000000406e55\n.text:0000000000406e5a\n.text:0000000000406e5e\n.text:0000000000406e60\n.text:0000000000406e63\n.text:0000000000406e67\n.text:0000000000406e6c\n.text:0000000000406e6f\n.text:0000000000406e71\n.text:0000000000406e73\n.text:0000000000406e76\n.text:0000000000406e78\n.text:0000000000406e7b\n.text:0000000000406e7d\n.text:0000000000406e80\n.text:0000000000406e85\n'
p1294
tp1295
sS'quotearg_n'
p1296
(S'\n__stdcall quotearg_n(char * arg)\n'
p1297
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1298
S'MOV RDX,-0x1\nMOV ECX,0x60f560\nJMP 0x00407d40\n'
p1299
S'48 c7 c2 ff ff ff ff\nb9 60 f5 60 00\neb 02\n'
p1300
S'.text:0000000000407d30\n.text:0000000000407d37\n.text:0000000000407d3c\n'
p1301
tp1302
sS'close_stream'
p1303
(S'\n__stdcall close_stream(FILE * stream)\n'
p1304
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror((FILE *)stream);\u000a  iVar2 = fclose((FILE *)stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1305
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401b80\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00401b90\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00401c10\nTEST EBP,EBP\nJZ 0x004098db\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x004098ff\nCALL 0x00401b40\nMOV dword ptr [RAX],0x0\nJMP 0x004098ff\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x004098ff\nTEST CL,CL\nJNZ 0x004098ff\nCALL 0x00401b40\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1306
S'55\n41 56\n53\n48 89 fb\ne8 d4 82 ff ff\n49 89 c6\n48 89 df\ne8 d9 82 ff ff\n89 c5\n48 89 df\ne8 4f 83 ff ff\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 6d 82 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 4e 82 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p1307
S'.text:00000000004098a0\n.text:00000000004098a1\n.text:00000000004098a3\n.text:00000000004098a4\n.text:00000000004098a7\n.text:00000000004098ac\n.text:00000000004098af\n.text:00000000004098b2\n.text:00000000004098b7\n.text:00000000004098b9\n.text:00000000004098bc\n.text:00000000004098c1\n.text:00000000004098c3\n.text:00000000004098c5\n.text:00000000004098ca\n.text:00000000004098cc\n.text:00000000004098ce\n.text:00000000004098d3\n.text:00000000004098d9\n.text:00000000004098db\n.text:00000000004098dd\n.text:00000000004098e0\n.text:00000000004098e2\n.text:00000000004098e4\n.text:00000000004098e7\n.text:00000000004098e9\n.text:00000000004098eb\n.text:00000000004098ed\n.text:00000000004098f2\n.text:00000000004098f4\n.text:00000000004098f7\n.text:00000000004098fc\n.text:00000000004098ff\n.text:0000000000409901\n.text:0000000000409902\n.text:0000000000409904\n.text:0000000000409905\n'
p1308
tp1309
sS'quotearg_colon_mem'
p1310
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p1311
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1312
S'MOV EDX,0x3a\nJMP 0x00408050\n'
p1313
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p1314
S'.text:00000000004080e0\n.text:00000000004080e5\n'
p1315
tp1316
sS'visit_globmatch_nofold'
p1317
(S'\n__stdcall visit_globmatch_nofold(process_data * procdata, void * context)\n'
p1318
V\u000aint visit_globmatch_nofold(process_data *procdata,void *context)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = fnmatch((char *)context,procdata->munged_filename,0);\u000a  return (int)((uint)(iVar1 != 0) + 2 + (uint)(iVar1 != 0));\u000a}\u000a\u000a
p1319
S'PUSH RAX\nMOV RAX,qword ptr [RDI + 0x20]\nXOR EDX,EDX\nMOV RDI,RSI\nMOV RSI,RAX\nCALL 0x00401d20\nXOR ECX,ECX\nTEST EAX,EAX\nSETNZ CL\nLEA EAX,[RCX + RCX*0x1 + 0x2]\nPOP RCX\nRET\n'
p1320
S'50\n48 8b 47 20\n31 d2\n48 89 f7\n48 89 c6\ne8 4e e3 ff ff\n31 c9\n85 c0\n0f 95 c1\n8d 44 09 02\n59\nc3\n'
p1321
S'.text:00000000004039c0\n.text:00000000004039c1\n.text:00000000004039c5\n.text:00000000004039c7\n.text:00000000004039ca\n.text:00000000004039cd\n.text:00000000004039d2\n.text:00000000004039d4\n.text:00000000004039d6\n.text:00000000004039d9\n.text:00000000004039dd\n.text:00000000004039de\n'
p1322
tp1323
sS'xcalloc'
p1324
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p1325
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1326
S'PUSH RAX\nCALL 0x00401dc0\nTEST RAX,RAX\nJZ 0x00408cfd\nPOP RCX\nRET\nCALL 0x00408d60\n'
p1327
S'50\ne8 ca 90 ff ff\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p1328
S'.text:0000000000408cf0\n.text:0000000000408cf1\n.text:0000000000408cf6\n.text:0000000000408cf9\n.text:0000000000408cfb\n.text:0000000000408cfc\n.text:0000000000408cfd\n'
p1329
tp1330
sS'locate_read_str'
p1331
(S'\n__stdcall locate_read_str()\n'
p1332
V\u000aint locate_read_str(void)\u000a\u000a{\u000a  __ssize_t _Var1;\u000a  void *pvVar2;\u000a  int in_ECX;\u000a  FILE *__stream;\u000a  int iVar3;\u000a  ulong *in_RSI;\u000a  void **in_RDI;\u000a  ulong __size;\u000a  char *local_38;\u000a  size_t local_30;\u000a  \u000a  local_38 = (char *)0x0;\u000a  local_30 = 0;\u000a  _Var1 = getdelim(&local_38,&local_30,0,__stream);\u000a  iVar3 = (int)_Var1;\u000a  if (-1 < iVar3) {\u000a    if (local_38 == (char *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("p != NULL","locate.c",0x10a,\u000a                    "int locate_read_str(char **, size_t *, FILE *, int, int)");\u000a    }\u000a    __size = (ulong)(uint)(in_ECX + 1 + iVar3);\u000a    if (*in_RSI <= __size && __size != *in_RSI) {\u000a      pvVar2 = realloc(*in_RDI,__size);\u000a      if (pvVar2 == (void *)0x0) {\u000a        return -1;\u000a      }\u000a      *in_RSI = __size;\u000a      *in_RDI = pvVar2;\u000a    }\u000a    memcpy((void *)((long)in_ECX + (long)*in_RDI),local_38,(_Var1 << 0x20) + 0x100000000 >> 0x20);\u000a    free(local_38);\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p1333
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV R14D,ECX\nMOV RAX,RDX\nMOV R12,RSI\nMOV R15,RDI\nMOV qword ptr [RSP],0x0\nMOV qword ptr [RSP + 0x8],0x0\nMOV RDI,RSP\nLEA RSI,[RSP + 0x8]\nXOR EDX,EDX\nMOV RCX,RAX\nCALL 0x00402080\nMOV RBX,RAX\nTEST EBX,EBX\nJS 0x004041fc\nCMP qword ptr [RSP],0x0\nJZ 0x00404213\nLEA R13D,[R14 + RBX*0x1 + 0x1]\nCMP R13,qword ptr [R12]\nJBE 0x004041cc\nMOV RDI,qword ptr [R15]\nMOV RSI,R13\nCALL 0x00401f20\nTEST RAX,RAX\nJZ 0x0040420c\nMOV qword ptr [R12],R13\nMOV qword ptr [R15],RAX\nMOVSXD RDI,R14D\nADD RDI,qword ptr [R15]\nMOV RSI,qword ptr [RSP]\nMOV RAX,RBX\nSHL RAX,0x20\nMOV RDX,0x100000000\nADD RDX,RAX\nSAR RDX,0x20\nCALL 0x00401e20\nMOV RDI,qword ptr [RSP]\nCALL 0x00401b00\nMOV EAX,EBX\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\nMOV EBX,0xffffffff\nJMP 0x004041fc\nMOV EDI,0x40af47\nMOV ESI,0x40a797\nMOV EDX,0x10a\nMOV ECX,0x40af51\nCALL 0x00401d00\n'
p1334
S'41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 10\n41 89 ce\n48 89 d0\n49 89 f4\n49 89 ff\n48 c7 04 24 00 00 00 00\n48 c7 44 24 08 00 00 00 00\n48 89 e7\n48 8d 74 24 08\n31 d2\n48 89 c1\ne8 e4 de ff ff\n48 89 c3\n85 db\n78 59\n48 83 3c 24 00\n74 69\n45 8d 6c 1e 01\n4d 3b 2c 24\n76 17\n49 8b 3f\n4c 89 ee\ne8 60 dd ff ff\n48 85 c0\n74 47\n4d 89 2c 24\n49 89 07\n49 63 fe\n49 03 3f\n48 8b 34 24\n48 89 d8\n48 c1 e0 20\n48 ba 00 00 00 00 01 00 00 00\n48 01 c2\n48 c1 fa 20\ne8 2d dc ff ff\n48 8b 3c 24\ne8 04 d9 ff ff\n89 d8\n48 83 c4 10\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\nbb ff ff ff ff\neb e9\nbf 47 af 40 00\nbe 97 a7 40 00\nba 0a 01 00 00\nb9 51 af 40 00\ne8 d4 da ff ff\n'
p1335
S'.text:0000000000404160\n.text:0000000000404162\n.text:0000000000404164\n.text:0000000000404166\n.text:0000000000404168\n.text:0000000000404169\n.text:000000000040416d\n.text:0000000000404170\n.text:0000000000404173\n.text:0000000000404176\n.text:0000000000404179\n.text:0000000000404181\n.text:000000000040418a\n.text:000000000040418d\n.text:0000000000404192\n.text:0000000000404194\n.text:0000000000404197\n.text:000000000040419c\n.text:000000000040419f\n.text:00000000004041a1\n.text:00000000004041a3\n.text:00000000004041a8\n.text:00000000004041aa\n.text:00000000004041af\n.text:00000000004041b3\n.text:00000000004041b5\n.text:00000000004041b8\n.text:00000000004041bb\n.text:00000000004041c0\n.text:00000000004041c3\n.text:00000000004041c5\n.text:00000000004041c9\n.text:00000000004041cc\n.text:00000000004041cf\n.text:00000000004041d2\n.text:00000000004041d6\n.text:00000000004041d9\n.text:00000000004041dd\n.text:00000000004041e7\n.text:00000000004041ea\n.text:00000000004041ee\n.text:00000000004041f3\n.text:00000000004041f7\n.text:00000000004041fc\n.text:00000000004041fe\n.text:0000000000404202\n.text:0000000000404203\n.text:0000000000404205\n.text:0000000000404207\n.text:0000000000404209\n.text:000000000040420b\n.text:000000000040420c\n.text:0000000000404211\n.text:0000000000404213\n.text:0000000000404218\n.text:000000000040421d\n.text:0000000000404222\n.text:0000000000404227\n'
p1336
tp1337
sS'visit_justprint_quoted'
p1338
(S'\n__stdcall visit_justprint_quoted(process_data * procdata, void * context)\n'
p1339
V\u000aint visit_justprint_quoted(process_data *procdata,void *context)\u000a\u000a{\u000a  int __c;\u000a  \u000a  print_quoted(stdout,quote_opts,(char *)(ulong)stdout_is_a_tty,"%s");\u000a  __c = 10;\u000a  if (separator != 0) {\u000a    __c = 0;\u000a  }\u000a  putchar(__c);\u000a  return 1;\u000a}\u000a\u000a
p1340
S'PUSH RAX\nMOV RAX,qword ptr [0x0060f468]\nMOV RSI,qword ptr [0x0060f4c0]\nMOV R8,qword ptr [RDI + 0x10]\nMOVZX EDX,byte ptr [0x0060f4e1]\nMOV ECX,0x40c628\nMOV RDI,RAX\nCALL 0x004044a0\nMOV AL,byte ptr [0x0060f4dc]\nXOR ECX,ECX\nTEST AL,AL\nMOV EDI,0xa\nCMOVNZ EDI,ECX\nCALL 0x00401b10\nMOV EAX,0x1\nPOP RCX\nRET\n'
p1341
S'50\n48 8b 05 20 b8 20 00\n48 8b 35 71 b8 20 00\n4c 8b 47 10\n0f b6 15 87 b8 20 00\nb9 28 c6 40 00\n48 89 c7\ne8 39 08 00 00\n8a 05 6f b8 20 00\n31 c9\n84 c0\nbf 0a 00 00 00\n0f 45 f9\ne8 92 de ff ff\nb8 01 00 00 00\n59\nc3\n'
p1342
S'.text:0000000000403c40\n.text:0000000000403c41\n.text:0000000000403c48\n.text:0000000000403c4f\n.text:0000000000403c53\n.text:0000000000403c5a\n.text:0000000000403c5f\n.text:0000000000403c62\n.text:0000000000403c67\n.text:0000000000403c6d\n.text:0000000000403c6f\n.text:0000000000403c71\n.text:0000000000403c76\n.text:0000000000403c79\n.text:0000000000403c7e\n.text:0000000000403c83\n.text:0000000000403c84\n'
p1343
tp1344
sS'drop_privs'
p1345
(S'\n__stdcall drop_privs()\n'
p1346
V\u000aint drop_privs(void)\u000a\u000a{\u000a  uint uVar1;\u000a  __uid_t __uid;\u000a  __uid_t _Var2;\u000a  __gid_t __gid;\u000a  int iVar3;\u000a  ulong in_RAX;\u000a  int *piVar4;\u000a  uint *puVar5;\u000a  char *pcVar6;\u000a  gid_t groups [1];\u000a  ulong uStack40;\u000a  \u000a  uStack40 = in_RAX;\u000a  __uid = geteuid();\u000a  _Var2 = getuid();\u000a  __gid = getgid();\u000a  if (__uid == 0) {\u000a    uStack40 = uStack40 & 0xffffffff | (ulong)__gid << 0x20;\u000a    iVar3 = setgroups(1,(__gid_t *)((long)&uStack40 + 4));\u000a    if (iVar3 == 0) goto LAB_0040227d;\u000a    pcVar6 = "failed to drop group privileges";\u000a  }\u000a  else {\u000aLAB_0040227d:\u000a    if ((_Var2 != __uid) && (_Var2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a      __uid = getuid();\u000a      iVar3 = setuid(__uid);\u000a      if (iVar3 != 0) {\u000a        pcVar6 = "failed to drop setuid privileges";\u000a        goto LAB_00402307;\u000a      }\u000a      iVar3 = setuid(0);\u000a      if (iVar3 == 0) {\u000a        dcgettext(0,"Failed to fully drop privileges",5);\u000a        *piVar4 = 0;\u000a        goto LAB_00402314;\u000a      }\u000a    }\u000a    piVar4 = __errno_location();\u000a    *piVar4 = 0;\u000a    iVar3 = setgid(__gid);\u000a    if (iVar3 == 0) {\u000a      return 0;\u000a    }\u000a    pcVar6 = "failed to drop setgid privileges";\u000a  }\u000aLAB_00402307:\u000a  dcgettext(0,pcVar6,5);\u000aLAB_00402314:\u000a  puVar5 = (uint *)__errno_location();\u000a  uVar1 = *puVar5;\u000a  pcVar6 = quotearg_n_style((char *)0x0);\u000a  error(1,(ulong)uVar1,&DAT_0040c628,pcVar6);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1347
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nCALL 0x00401d40\nMOV EBP,EAX\nCALL 0x00401c70\nMOV EBX,EAX\nCALL 0x00401e50\nMOV R15D,EAX\nTEST EBP,EBP\nJNZ 0x0040227d\nMOV dword ptr [RSP + 0x4],R15D\nLEA RSI,[RSP + 0x4]\nMOV EDI,0x1\nCALL 0x00401d90\nTEST EAX,EAX\nJNZ 0x00402300\nCMP EBX,EBP\nJZ 0x004022af\nTEST EBX,EBX\nJZ 0x004022af\nCALL 0x00401b40\nMOV R14,RAX\nMOV dword ptr [R14],0x0\nCALL 0x00401c70\nMOV EDI,EAX\nCALL 0x00402040\nTEST EAX,EAX\nJNZ 0x004022da\nXOR EDI,EDI\nCALL 0x00402040\nTEST EAX,EAX\nJZ 0x004022e3\nCALL 0x00401b40\nMOV dword ptr [RAX],0x0\nMOV EDI,R15D\nCALL 0x00401f80\nTEST EAX,EAX\nJNZ 0x004022d1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x40a70b\nJMP 0x00402307\nXOR EDI,EDI\nMOV ESI,0x40a6ca\nJMP 0x00402307\nXOR EDI,EDI\nMOV ESI,0x40a6eb\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RBX,RAX\nMOV dword ptr [R14],0x0\nJMP 0x00402314\nXOR EDI,EDI\nMOV ESI,0x40a6aa\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RBX,RAX\nCALL 0x00401b40\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,RBX\nCALL 0x00407f30\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40c628\nXOR EAX,EAX\nMOV ESI,EBP\nCALL 0x00401f70\nCALL 0x00401b30\n'
p1348
S'55\n41 57\n41 56\n53\n50\ne8 f4 fa ff ff\n89 c5\ne8 1d fa ff ff\n89 c3\ne8 f6 fb ff ff\n41 89 c7\n85 ed\n75 1c\n44 89 7c 24 04\n48 8d 74 24 04\nbf 01 00 00 00\ne8 1b fb ff ff\n85 c0\n0f 85 83 00 00 00\n39 eb\n74 2e\n85 db\n74 2a\ne8 b6 f8 ff ff\n49 89 c6\n41 c7 06 00 00 00 00\ne8 d7 f9 ff ff\n89 c7\ne8 a0 fd ff ff\n85 c0\n75 36\n31 ff\ne8 95 fd ff ff\n85 c0\n74 34\ne8 8c f8 ff ff\nc7 00 00 00 00 00\n44 89 ff\ne8 be fc ff ff\n85 c0\n75 0b\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n31 ff\nbe 0b a7 40 00\neb 2d\n31 ff\nbe ca a6 40 00\neb 24\n31 ff\nbe eb a6 40 00\nba 05 00 00 00\ne8 3c f9 ff ff\n48 89 c3\n41 c7 06 00 00 00 00\neb 14\n31 ff\nbe aa a6 40 00\nba 05 00 00 00\ne8 1f f9 ff ff\n48 89 c3\ne8 27 f8 ff ff\n8b 28\n31 ff\nbe 08 00 00 00\n48 89 da\ne8 06 5c 00 00\n48 89 c1\nbf 01 00 00 00\nba 28 c6 40 00\n31 c0\n89 ee\ne8 30 fc ff ff\ne8 eb f7 ff ff\n'
p1349
S'.text:0000000000402240\n.text:0000000000402241\n.text:0000000000402243\n.text:0000000000402245\n.text:0000000000402246\n.text:0000000000402247\n.text:000000000040224c\n.text:000000000040224e\n.text:0000000000402253\n.text:0000000000402255\n.text:000000000040225a\n.text:000000000040225d\n.text:000000000040225f\n.text:0000000000402261\n.text:0000000000402266\n.text:000000000040226b\n.text:0000000000402270\n.text:0000000000402275\n.text:0000000000402277\n.text:000000000040227d\n.text:000000000040227f\n.text:0000000000402281\n.text:0000000000402283\n.text:0000000000402285\n.text:000000000040228a\n.text:000000000040228d\n.text:0000000000402294\n.text:0000000000402299\n.text:000000000040229b\n.text:00000000004022a0\n.text:00000000004022a2\n.text:00000000004022a4\n.text:00000000004022a6\n.text:00000000004022ab\n.text:00000000004022ad\n.text:00000000004022af\n.text:00000000004022b4\n.text:00000000004022ba\n.text:00000000004022bd\n.text:00000000004022c2\n.text:00000000004022c4\n.text:00000000004022c6\n.text:00000000004022ca\n.text:00000000004022cb\n.text:00000000004022cd\n.text:00000000004022cf\n.text:00000000004022d0\n.text:00000000004022d1\n.text:00000000004022d3\n.text:00000000004022d8\n.text:00000000004022da\n.text:00000000004022dc\n.text:00000000004022e1\n.text:00000000004022e3\n.text:00000000004022e5\n.text:00000000004022ea\n.text:00000000004022ef\n.text:00000000004022f4\n.text:00000000004022f7\n.text:00000000004022fe\n.text:0000000000402300\n.text:0000000000402302\n.text:0000000000402307\n.text:000000000040230c\n.text:0000000000402311\n.text:0000000000402314\n.text:0000000000402319\n.text:000000000040231b\n.text:000000000040231d\n.text:0000000000402322\n.text:0000000000402325\n.text:000000000040232a\n.text:000000000040232d\n.text:0000000000402332\n.text:0000000000402337\n.text:0000000000402339\n.text:000000000040233b\n.text:0000000000402340\n'
p1350
tp1351
sS'looking_at_slocate_locatedb'
p1352
(S'\n__stdcall looking_at_slocate_locatedb(char * filename, char * data, size_t len, int * seclevel)\n'
p1353
V\u000aint looking_at_slocate_locatedb(char *filename,char *data,size_t len,int *seclevel)\u000a\u000a{\u000a  int iVar1;\u000a  ushort **ppuVar2;\u000a  undefined8 uVar3;\u000a  char *pcVar4;\u000a  int iVar5;\u000a  \u000a  if (len < 3) {\u000a    iVar5 = 0;\u000a    if ((len == 2) && (iVar5 = 0, data[1] == 0)) {\u000a      ppuVar2 = __ctype_b_loc();\u000a      iVar5 = 0;\u000a      if ((*(byte *)((long)*ppuVar2 + (ulong)(byte)*data * 2 + 1) & 8) != 0) {\u000a        iVar1 = (int)*data + -0x30;\u000a        *seclevel = iVar1;\u000a        iVar5 = 1;\u000a        if (1 < iVar1) {\u000a          uVar3 = dcgettext(0,\u000a                            "locate database %s looks like an slocate database but it seems to have security level %c, which GNU findutils does not currently support"\u000a                            ,5);\u000a          pcVar4 = quotearg_n_style((char *)0x0);\u000a          error(0,0,uVar3,pcVar4,(ulong)(uint)(int)data[1]);\u000a        }\u000a      }\u000a    }\u000a    return iVar5;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("len <= 2","locate.c",0x3bc,\u000a                "int looking_at_slocate_locatedb(const char *, const char *, size_t, int *)");\u000a}\u000a\u000a
p1354
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,RCX\nMOV R14,RSI\nMOV R15,RDI\nCMP RDX,0x3\nJNC 0x00403524\nXOR EBX,EBX\nCMP RDX,0x2\nJNZ 0x00403516\nCMP byte ptr [R14 + 0x1],0x0\nJNZ 0x00403516\nCALL 0x004020b0\nMOV RCX,qword ptr [RAX]\nMOVZX EAX,byte ptr [R14]\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x8\nJZ 0x00403516\nMOVSX EAX,AL\nADD EAX,-0x30\nMOV dword ptr [R12],EAX\nMOV EBX,0x1\nCMP EAX,0x2\nJL 0x00403516\nXOR EDI,EDI\nMOV ESI,0x40ae35\nMOV EDX,0x5\nCALL 0x00401c30\nMOV R12,RAX\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,R15\nCALL 0x00407f30\nMOV RCX,RAX\nMOVSX R8D,byte ptr [R14 + 0x1]\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R12\nCALL 0x00401f70\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nMOV EDI,0x40ade1\nMOV ESI,0x40a797\nMOV EDX,0x3bc\nMOV ECX,0x40adea\nCALL 0x00401d00\n'
p1355
S'41 57\n41 56\n41 54\n53\n50\n49 89 cc\n49 89 f6\n49 89 ff\n48 83 fa 03\n73 7d\n31 db\n48 83 fa 02\n75 67\n41 80 7e 01 00\n75 60\ne8 f5 eb ff ff\n48 8b 08\n41 0f b6 06\nf6 44 41 01 08\n74 4d\n0f be c0\n83 c0 d0\n41 89 04 24\nbb 01 00 00 00\n83 f8 02\n7c 39\n31 ff\nbe 35 ae 40 00\nba 05 00 00 00\ne8 42 e7 ff ff\n49 89 c4\n31 ff\nbe 08 00 00 00\n4c 89 fa\ne8 30 4a 00 00\n48 89 c1\n45 0f be 46 01\n31 ff\n31 f6\n31 c0\n4c 89 e2\ne8 5a ea ff ff\n89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\nbf e1 ad 40 00\nbe 97 a7 40 00\nba bc 03 00 00\nb9 ea ad 40 00\ne8 c3 e7 ff ff\n'
p1356
S'.text:0000000000403490\n.text:0000000000403492\n.text:0000000000403494\n.text:0000000000403496\n.text:0000000000403497\n.text:0000000000403498\n.text:000000000040349b\n.text:000000000040349e\n.text:00000000004034a1\n.text:00000000004034a5\n.text:00000000004034a7\n.text:00000000004034a9\n.text:00000000004034ad\n.text:00000000004034af\n.text:00000000004034b4\n.text:00000000004034b6\n.text:00000000004034bb\n.text:00000000004034be\n.text:00000000004034c2\n.text:00000000004034c7\n.text:00000000004034c9\n.text:00000000004034cc\n.text:00000000004034cf\n.text:00000000004034d3\n.text:00000000004034d8\n.text:00000000004034db\n.text:00000000004034dd\n.text:00000000004034df\n.text:00000000004034e4\n.text:00000000004034e9\n.text:00000000004034ee\n.text:00000000004034f1\n.text:00000000004034f3\n.text:00000000004034f8\n.text:00000000004034fb\n.text:0000000000403500\n.text:0000000000403503\n.text:0000000000403508\n.text:000000000040350a\n.text:000000000040350c\n.text:000000000040350e\n.text:0000000000403511\n.text:0000000000403516\n.text:0000000000403518\n.text:000000000040351c\n.text:000000000040351d\n.text:000000000040351f\n.text:0000000000403521\n.text:0000000000403523\n.text:0000000000403524\n.text:0000000000403529\n.text:000000000040352e\n.text:0000000000403533\n.text:0000000000403538\n'
p1357
tp1358
sS'clear_ungetc_buffer_preserving_position'
p1359
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p1360
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p1361
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00409317\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00409330\n'
p1362
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p1363
S'.text:0000000000409310\n.text:0000000000409314\n.text:0000000000409316\n.text:0000000000409317\n.text:0000000000409319\n.text:000000000040931e\n'
p1364
tp1365
sS'xnmalloc'
p1366
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p1367
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1368
S'MOV RAX,RDI\nMUL RSI\nJO 0x00408bc1\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00408bd0\nPUSH RAX\nCALL 0x00408d60\n'
p1369
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p1370
S'.text:0000000000408bb0\n.text:0000000000408bb3\n.text:0000000000408bb6\n.text:0000000000408bb8\n.text:0000000000408bbc\n.text:0000000000408bbf\n.text:0000000000408bc1\n.text:0000000000408bc2\n'
p1371
tp1372
sS'quotearg_char'
p1373
(S'\n__stdcall quotearg_char(char * arg)\n'
p1374
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1375
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00408050\n'
p1376
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p1377
S'.text:00000000004080c0\n.text:00000000004080c2\n.text:00000000004080c9\n.text:00000000004080cb\n'
p1378
tp1379
sS'malloc'
p1380
(S'\n__stdcall malloc(size_t __size)\n'
p1381
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_0060f1e8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1382
S'JMP qword ptr [0x0060f1e8]\n'
p1383
S'ff 25 52 d3 20 00\n'
p1384
S'.plt:0000000000401e90\n'
p1385
tp1386
sS'argmatch_invalid'
p1387
(S'\n__stdcall argmatch_invalid(char * context, char * value, ptrdiff_t problem)\n'
p1388
V\u000avoid argmatch_invalid(char *context,char *value,ptrdiff_t problem)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  \u000a  pcVar2 = "ambiguous argument %s for %s";\u000a  if (problem == -1) {\u000a    pcVar2 = "invalid argument %s for %s";\u000a  }\u000a  uVar1 = dcgettext(0,pcVar2,5);\u000a  pcVar2 = quotearg_n_style((char *)0x0);\u000a  pcVar3 = quote_n((char *)0x1);\u000a  error(0,0,uVar1,pcVar2,pcVar3);\u000a  return;\u000a}\u000a\u000a
p1389
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RSI\nMOV R14,RDI\nCMP RDX,-0x1\nMOV EAX,0x40c5d1\nMOV ESI,0x40c5ec\nCMOVZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00401c30\nMOV R12,RAX\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,R15\nCALL 0x00407f30\nMOV R15,RAX\nMOV EDI,0x1\nMOV RSI,R14\nCALL 0x00408220\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R12\nMOV RCX,R15\nMOV R8,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401f70\n'
p1390
S'41 57\n41 56\n41 54\n53\n50\n49 89 f7\n49 89 fe\n48 83 fa ff\nb8 d1 c5 40 00\nbe ec c5 40 00\n48 0f 44 f0\n31 ff\nba 05 00 00 00\ne8 f4 86 ff ff\n49 89 c4\n31 ff\nbe 08 00 00 00\n4c 89 fa\ne8 e2 e9 ff ff\n49 89 c7\nbf 01 00 00 00\n4c 89 f6\ne8 c2 ec ff ff\n48 89 c3\n31 ff\n31 f6\n31 c0\n4c 89 e2\n4c 89 f9\n49 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 f0 89 ff ff\n'
p1391
S'.text:0000000000409510\n.text:0000000000409512\n.text:0000000000409514\n.text:0000000000409516\n.text:0000000000409517\n.text:0000000000409518\n.text:000000000040951b\n.text:000000000040951e\n.text:0000000000409522\n.text:0000000000409527\n.text:000000000040952c\n.text:0000000000409530\n.text:0000000000409532\n.text:0000000000409537\n.text:000000000040953c\n.text:000000000040953f\n.text:0000000000409541\n.text:0000000000409546\n.text:0000000000409549\n.text:000000000040954e\n.text:0000000000409551\n.text:0000000000409556\n.text:0000000000409559\n.text:000000000040955e\n.text:0000000000409561\n.text:0000000000409563\n.text:0000000000409565\n.text:0000000000409567\n.text:000000000040956a\n.text:000000000040956d\n.text:0000000000409570\n.text:0000000000409574\n.text:0000000000409575\n.text:0000000000409577\n.text:0000000000409579\n.text:000000000040957b\n'
p1392
tp1393
sS'c_tolower'
p1394
(S'\n__stdcall c_tolower()\n'
p1395
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1396
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p1397
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p1398
S'.text:0000000000409880\n.text:0000000000409883\n.text:0000000000409886\n.text:0000000000409889\n.text:000000000040988c\n'
p1399
tp1400
sS'getopt_long'
p1401
(S'\n__stdcall getopt_long()\n'
p1402
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_0060f0e0)();\u000a  return;\u000a}\u000a\u000a
p1403
S'JMP qword ptr [0x0060f0e0]\n'
p1404
S'ff 25 5a d4 20 00\n'
p1405
S'.plt:0000000000401c80\n'
p1406
tp1407
sS'mbuiter_multi_reloc'
p1408
(S'\n__stdcall mbuiter_multi_reloc(mbuiter_multi * iter, ptrdiff_t ptrdiff)\n'
p1409
V\u000avoid mbuiter_multi_reloc(mbuiter_multi *iter,ptrdiff_t ptrdiff)\u000a\u000a{\u000a  (iter->cur).ptr = (iter->cur).ptr + ptrdiff;\u000a  return;\u000a}\u000a\u000a
p1410
S'ADD qword ptr [RDI + 0x10],RSI\nRET\n'
p1411
S'48 01 77 10\nc3\n'
p1412
S'.text:0000000000406d00\n.text:0000000000406d04\n'
p1413
tp1414
sS'quotearg_style'
p1415
(S'\n__stdcall quotearg_style(char * arg)\n'
p1416
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1417
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00407f30\n'
p1418
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p1419
S'.text:0000000000408010\n.text:0000000000408013\n.text:0000000000408015\n.text:0000000000408017\n.text:0000000000408019\n.text:000000000040801c\n'
p1420
tp1421
sS'__strndup'
p1422
(S'\n__stdcall __strndup()\n'
p1423
V\u000avoid __strndup(void)\u000a\u000a{\u000a  (*(code *)PTR___strndup_0060f190)();\u000a  return;\u000a}\u000a\u000a
p1424
S'JMP qword ptr [0x0060f190]\n'
p1425
S'ff 25 aa d3 20 00\n'
p1426
S'.plt:0000000000401de0\n'
p1427
tp1428
sS'__argmatch_die'
p1429
(S'\n__stdcall __argmatch_die()\n'
p1430
V\u000avoid __argmatch_die(void)\u000a\u000a{\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(exit_failure);\u000a}\u000a\u000a
p1431
S'PUSH RAX\nMOV EDI,dword ptr [0x0060f3f0]\nCALL 0x00402020\n'
p1432
S'50\n8b 3d e9 5f 20 00\ne8 14 8c ff ff\n'
p1433
S'.text:0000000000409400\n.text:0000000000409401\n.text:0000000000409407\n'
p1434
tp1435
sS'mbscasestr'
p1436
(S'\n__stdcall mbscasestr(char * haystack, char * needle)\n'
p1437
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000achar * mbscasestr(char *haystack,char *needle)\u000a\u000a{\u000a  byte *pbVar1;\u000a  byte bVar2;\u000a  ushort *puVar3;\u000a  _Bool _Var4;\u000a  bool bVar5;\u000a  wint_t wVar6;\u000a  wint_t wVar7;\u000a  int iVar8;\u000a  size_t needle_len;\u000a  ushort **ppuVar9;\u000a  __int32_t **pp_Var10;\u000a  ulong uVar11;\u000a  uint uVar12;\u000a  ulong uVar13;\u000a  ulong uVar14;\u000a  long lVar15;\u000a  uint uVar16;\u000a  ulong uVar17;\u000a  char *result;\u000a  mbchar_t c;\u000a  mbchar_t b;\u000a  mbui_iterator_t iter_needle;\u000a  char *local_208;\u000a  ulong local_1f0;\u000a  mbuiter_multi local_1d8;\u000a  uint local_198;\u000a  undefined8 local_194;\u000a  uint local_18c;\u000a  char *local_188;\u000a  undefined4 local_180;\u000a  undefined4 uStack380;\u000a  undefined4 local_178;\u000a  wint_t local_174;\u000a  undefined4 uStack368;\u000a  undefined4 uStack364;\u000a  undefined4 local_168;\u000a  undefined4 uStack356;\u000a  undefined4 uStack352;\u000a  undefined4 uStack348;\u000a  uint local_158;\u000a  int iStack340;\u000a  undefined4 uStack336;\u000a  uint local_14c;\u000a  char *local_148;\u000a  undefined4 local_140;\u000a  undefined4 uStack316;\u000a  undefined4 local_138;\u000a  wint_t local_134;\u000a  undefined4 uStack304;\u000a  undefined4 uStack300;\u000a  undefined4 local_128;\u000a  undefined4 uStack292;\u000a  undefined4 uStack288;\u000a  undefined4 uStack284;\u000a  ulong local_118;\u000a  mbuiter_multi local_110;\u000a  mbchar_t local_d0;\u000a  mbchar_t local_a0;\u000a  uint local_70;\u000a  int iStack108;\u000a  undefined4 uStack104;\u000a  _Bool local_64;\u000a  mbchar_t local_60;\u000a  \u000a  needle_len = __ctype_get_mb_cur_max();\u000a  if (needle_len < 2) {\u000a    uVar14 = (ulong)(byte)*needle;\u000a    if (*needle != 0) {\u000a      ppuVar9 = __ctype_b_loc();\u000a      if ((*(byte *)((long)*ppuVar9 + uVar14 * 2 + 1) & 1) != 0) {\u000a        pp_Var10 = __ctype_tolower_loc();\u000a        uVar14 = (ulong)*(byte *)(*pp_Var10 + uVar14);\u000a      }\u000a      if (*haystack != 0) {\u000a        bVar5 = true;\u000a        local_1f0 = 0;\u000a        uVar11 = 0;\u000a        uVar13 = 0;\u000a        local_208 = needle;\u000a        local_118 = uVar14;\u000a        do {\u000a          if ((((uVar13 * 5 <= uVar11) && (9 < uVar13)) && (bVar5)) &&\u000a             (((local_208 == (char *)0x0 ||\u000a               (needle_len = strnlen(local_208,uVar11 - local_1f0), local_1f0 = uVar11,\u000a               local_208[needle_len] == 0)) ||\u000a              (local_208 = local_208 + needle_len, local_1f0 = uVar11, local_208 == (char *)0x0))))\u000a          {\u000a            needle_len = strlen(needle);\u000a            _Var4 = knuth_morris_pratt((uchar *)haystack,(uchar *)needle,needle_len,\u000a                                       (uchar **)&local_70);\u000a            if (_Var4 != false) {\u000a              return (char *)CONCAT44(iStack108,local_70);\u000a            }\u000a            local_208 = (char *)0x0;\u000a            bVar5 = false;\u000a          }\u000a          bVar2 = *haystack;\u000a          uVar12 = (uint)bVar2;\u000a          if ((*(byte *)((long)*ppuVar9 + (ulong)bVar2 * 2 + 1) & 1) != 0) {\u000a            pp_Var10 = __ctype_tolower_loc();\u000a            uVar12 = (*pp_Var10)[(ulong)bVar2];\u000a          }\u000a          if (uVar12 == (uint)uVar14) {\u000a            lVar15 = 1;\u000a            do {\u000a              if (needle[lVar15] == 0) {\u000a                return (char *)(byte *)haystack;\u000a              }\u000a              bVar2 = ((byte *)haystack)[lVar15];\u000a              uVar12 = (uint)bVar2;\u000a              if (bVar2 == 0) goto LAB_00405a1c;\u000a              puVar3 = *ppuVar9;\u000a              if ((*(byte *)((long)puVar3 + (ulong)bVar2 * 2 + 1) & 1) != 0) {\u000a                pp_Var10 = __ctype_tolower_loc();\u000a                uVar12 = (*pp_Var10)[(ulong)bVar2];\u000a              }\u000a              bVar2 = needle[lVar15];\u000a              uVar16 = (uint)bVar2;\u000a              if ((*(byte *)((long)puVar3 + (ulong)bVar2 * 2 + 1) & 1) != 0) {\u000a                pp_Var10 = __ctype_tolower_loc();\u000a                uVar16 = (*pp_Var10)[(ulong)bVar2];\u000a              }\u000a              lVar15 = lVar15 + 1;\u000a            } while (uVar12 == uVar16);\u000a            uVar11 = uVar11 + lVar15;\u000a            uVar14 = local_118;\u000a          }\u000a          else {\u000a            uVar11 = uVar11 + 1;\u000a          }\u000a          uVar13 = uVar13 + 1;\u000a          pbVar1 = (byte *)haystack + 1;\u000a          haystack = (char *)((byte *)haystack + 1);\u000a          if (*pbVar1 == 0) {\u000a            return (char *)0x0;\u000a          }\u000a        } while( true );\u000a      }\u000aLAB_00405a1c:\u000a      haystack = (char *)0x0;\u000a    }\u000a  }\u000a  else {\u000a    local_70 = local_70 & 0xffffff00;\u000a    iStack108 = 0;\u000a    uStack104 = 0;\u000a    local_64 = false;\u000a    local_60.ptr = needle;\u000a    mbuiter_multi_next((mbuiter_multi *)&local_70);\u000a    if ((local_60.wc_valid == false) || (local_60.wc != 0)) {\u000a      local_110.in_shift = false;\u000a      local_110.state = 0;\u000a      local_110.next_done = false;\u000a      local_110.cur.ptr = needle;\u000a      mb_copy(&local_a0,&local_60);\u000a      if (local_a0.wc_valid != false) {\u000a        local_a0.wc = towlower(local_a0.wc);\u000a      }\u000a      local_198 = local_198 & 0xffffff00;\u000a      local_194 = 0;\u000a      local_18c = local_18c & 0xffffff00;\u000a      local_188 = haystack;\u000a      mbuiter_multi_next((mbuiter_multi *)&local_198);\u000a      if ((local_178._0_1_ == false) || (local_174 != 0)) {\u000a        bVar5 = true;\u000a        uVar13 = 0;\u000a        uVar14 = 0;\u000a        uVar11 = 0;\u000a        do {\u000a          if (((uVar13 * 5 <= uVar11) && (9 < uVar13)) && (bVar5)) {\u000a            if (uVar11 != uVar14) {\u000a              lVar15 = uVar14 - uVar11;\u000a              do {\u000a                mbuiter_multi_next(&local_110);\u000a                if ((local_110.cur.wc_valid != false) && (local_110.cur.wc == 0)) break;\u000a                local_110.cur.ptr = local_110.cur.ptr + local_110.cur.bytes;\u000a                local_110.next_done = false;\u000a                lVar15 = lVar15 + 1;\u000a              } while (lVar15 != 0);\u000a            }\u000a            mbuiter_multi_next(&local_110);\u000a            uVar14 = uVar11;\u000a            if ((local_110.cur.wc_valid != false) && (uVar14 = uVar11, local_110.cur.wc == 0)) {\u000a              _Var4 = knuth_morris_pratt_multibyte\u000a                                (haystack,needle,(char **)(mbuiter_multi *)&local_158);\u000a              if (_Var4 != false) {\u000a                return (char *)CONCAT44(iStack340,local_158);\u000a              }\u000a              bVar5 = false;\u000a              uVar14 = uVar11;\u000a            }\u000a          }\u000a          mb_copy(&local_d0,(mbchar_t *)&local_188);\u000a          if (local_d0.wc_valid != false) {\u000a            local_d0.wc = towlower(local_d0.wc);\u000a          }\u000a          uVar17 = uVar11 + 1;\u000a          if ((local_d0.wc_valid == false) || (local_a0.wc_valid == false)) {\u000a            if ((local_d0.bytes == local_a0.bytes) &&\u000a               (iVar8 = memcmp(local_d0.ptr,local_a0.ptr,local_d0.bytes), iVar8 == 0))\u000a            goto LAB_00405673;\u000a          }\u000a          else {\u000a            if (local_d0.wc == local_a0.wc) {\u000aLAB_00405673:\u000a              local_128 = local_168;\u000a              uStack292 = uStack356;\u000a              uStack288 = uStack352;\u000a              uStack284 = uStack348;\u000a              local_138 = local_178;\u000a              local_134 = local_174;\u000a              uStack304 = uStack368;\u000a              uStack300 = uStack364;\u000a              local_140 = local_180;\u000a              uStack316 = uStack380;\u000a              local_158 = local_198;\u000a              iStack340 = (int)local_194;\u000a              uStack336 = local_194._4_4_;\u000a              local_148 = local_188 + CONCAT44(uStack380,local_180);\u000a              local_14c = local_18c & 0xffffff00;\u000a              local_1d8.in_shift = false;\u000a              local_1d8.state = 0;\u000a              local_1d8.next_done = false;\u000a              local_1d8.cur.ptr = needle;\u000a              mbuiter_multi_next(&local_1d8);\u000a              if ((local_1d8.cur.wc_valid != false) && (local_1d8.cur.wc == 0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a                abort();\u000a              }\u000a              local_1d8.cur.ptr = local_1d8.cur.ptr + local_1d8.cur.bytes;\u000a              local_1d8.next_done = false;\u000a              mbuiter_multi_next(&local_1d8);\u000a              if ((local_1d8.cur.wc_valid != false) && (local_1d8.cur.wc == 0)) {\u000a                return local_188;\u000a              }\u000a              uVar17 = uVar11 + 2;\u000a              do {\u000a                mbuiter_multi_next((mbuiter_multi *)&local_158);\u000a                if ((local_138._0_1_ != false) && (local_134 == 0)) goto LAB_00405857;\u000a                if ((local_1d8.cur.wc_valid == false) || (local_138._0_1_ == false)) {\u000a                  if ((CONCAT44(uStack316,local_140) != local_1d8.cur.bytes) ||\u000a                     (iVar8 = memcmp(local_148,local_1d8.cur.ptr,CONCAT44(uStack316,local_140)),\u000a                     iVar8 != 0)) break;\u000a                }\u000a                else {\u000a                  wVar6 = towlower(local_134);\u000a                  wVar7 = towlower(local_1d8.cur.wc);\u000a                  if (wVar6 != wVar7) break;\u000a                }\u000a                local_148 = local_148 + CONCAT44(uStack316,local_140);\u000a                local_14c = local_14c & 0xffffff00;\u000a                local_1d8.cur.ptr = local_1d8.cur.ptr + local_1d8.cur.bytes;\u000a                local_1d8.next_done = false;\u000a                mbuiter_multi_next(&local_1d8);\u000a                uVar17 = uVar17 + 1;\u000a                if ((local_1d8.cur.wc_valid != false) && (local_1d8.cur.wc == 0)) {\u000a                  return local_188;\u000a                }\u000a              } while( true );\u000a            }\u000a          }\u000a          uVar13 = uVar13 + 1;\u000a          local_188 = local_188 + CONCAT44(uStack380,local_180);\u000a          local_18c = local_18c & 0xffffff00;\u000a          mbuiter_multi_next((mbuiter_multi *)&local_198);\u000a          uVar11 = uVar17;\u000a        } while ((local_178._0_1_ == false) || (uVar11 = uVar17, local_174 != 0));\u000a      }\u000aLAB_00405857:\u000a      haystack = (char *)0x0;\u000a    }\u000a  }\u000a  return haystack;\u000a}\u000a\u000a
p1438
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x1d8\nMOV R14,RSI\nMOV R15,RDI\nCALL 0x00401c40\nCMP RAX,0x2\nJC 0x0040585f\nMOV qword ptr [0x1a8 + RSP],R14\nMOV byte ptr [0x198 + RSP],0x0\nMOV qword ptr [0x19c + RSP],0x0\nMOV byte ptr [0x1a4 + RSP],0x0\nLEA RDI,[0x198 + RSP]\nCALL 0x00406bb0\nCMP byte ptr [0x1b8 + RSP],0x0\nJZ 0x00405470\nMOV EAX,dword ptr [0x1bc + RSP]\nTEST EAX,EAX\nJZ 0x00405a29\nLEA RSI,[0x1a8 + RSP]\nMOV qword ptr [0x108 + RSP],R14\nMOV byte ptr [0xf8 + RSP],0x0\nMOV qword ptr [0xfc + RSP],0x0\nMOV byte ptr [0x104 + RSP],0x0\nLEA RDI,[0x168 + RSP]\nCALL 0x00409da0\nCMP byte ptr [0x178 + RSP],0x0\nJZ 0x004054c6\nMOV EDI,dword ptr [0x17c + RSP]\nCALL 0x00401fd0\nMOV dword ptr [0x17c + RSP],EAX\nMOV qword ptr [0x80 + RSP],R15\nMOV byte ptr [RSP + 0x70],0x0\nMOV qword ptr [RSP + 0x74],0x0\nMOV byte ptr [RSP + 0x7c],0x0\nLEA RDI,[RSP + 0x70]\nCALL 0x00406bb0\nCMP byte ptr [0x90 + RSP],0x0\nJZ 0x00405504\nMOV EAX,dword ptr [0x94 + RSP]\nTEST EAX,EAX\nJZ 0x00405857\nMOV qword ptr [RSP],R14\nMOV AL,0x1\nMOV dword ptr [RSP + 0x8],EAX\nLEA RBP,[RSP + 0x30]\nLEA R12,[0xb0 + RSP]\nXOR ECX,ECX\nXOR R14D,R14D\nXOR R13D,R13D\nLEA RAX,[RCX + RCX*0x4]\nCMP R14,RAX\nMOV qword ptr [RSP + 0x10],RCX\nJC 0x004055dc\nCMP RCX,0xa\nLEA RBX,[0xf8 + RSP]\nJC 0x004055dc\nMOV EAX,dword ptr [RSP + 0x8]\nAND AL,0x1\nJZ 0x004055dc\nCMP R14,R13\nJZ 0x0040559a\nSUB R13,R14\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,RBX\nCALL 0x00406bb0\nCMP byte ptr [0x118 + RSP],0x0\nJZ 0x0040557d\nMOV EAX,dword ptr [0x11c + RSP]\nTEST EAX,EAX\nJZ 0x0040559a\nMOV RAX,qword ptr [0x110 + RSP]\nADD qword ptr [0x108 + RSP],RAX\nMOV byte ptr [0x104 + RSP],0x0\nINC R13\nJNZ 0x00405560\nMOV RDI,RBX\nCALL 0x00406bb0\nCMP byte ptr [0x118 + RSP],0x0\nJZ 0x004055d9\nMOV EAX,dword ptr [0x11c + RSP]\nTEST EAX,EAX\nMOV R13,R14\nJNZ 0x004055dc\nMOV RDI,R15\nMOV RSI,qword ptr [RSP]\nMOV RDX,R12\nCALL 0x00405a60\nTEST AL,AL\nJNZ 0x00405a4b\nMOV dword ptr [RSP + 0x8],0x0\nMOV R13,R14\nLEA RDI,[0x138 + RSP]\nLEA RSI,[0x80 + RSP]\nCALL 0x00409da0\nCMP byte ptr [0x148 + RSP],0x0\nJZ 0x0040560e\nMOV EDI,dword ptr [0x14c + RSP]\nCALL 0x00401fd0\nMOV dword ptr [0x14c + RSP],EAX\nMOV RBX,R14\nINC R14\nCMP byte ptr [0x148 + RSP],0x0\nJZ 0x00405640\nMOV AL,byte ptr [0x178 + RSP]\nTEST AL,AL\nJZ 0x00405640\nMOV EAX,dword ptr [0x14c + RSP]\nCMP EAX,dword ptr [0x17c + RSP]\nJZ 0x00405673\nJMP 0x00405810\nMOV RDX,qword ptr [0x140 + RSP]\nCMP RDX,qword ptr [0x170 + RSP]\nJNZ 0x00405810\nMOV RDI,qword ptr [0x138 + RSP]\nMOV RSI,qword ptr [0x168 + RSP]\nCALL 0x00401db0\nTEST EAX,EAX\nJNZ 0x00405810\nMOVUPS XMM0,xmmword ptr [RSP + 0x70]\nMOVUPS XMM1,xmmword ptr [0x80 + RSP]\nMOVUPS XMM2,xmmword ptr [0x90 + RSP]\nMOVUPS XMM3,xmmword ptr [0xa0 + RSP]\nMOVAPS xmmword ptr [0xe0 + RSP],XMM3\nMOVAPS xmmword ptr [0xd0 + RSP],XMM2\nMOVAPS xmmword ptr [0xc0 + RSP],XMM1\nMOVAPS xmmword ptr [0xb0 + RSP],XMM0\nMOV RAX,qword ptr [0xc8 + RSP]\nADD qword ptr [0xc0 + RSP],RAX\nMOV byte ptr [0xbc + RSP],0x0\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RSP + 0x40],RAX\nMOV byte ptr [RSP + 0x30],0x0\nMOV qword ptr [RSP + 0x34],0x0\nMOV byte ptr [RSP + 0x3c],0x0\nMOV RDI,RBP\nCALL 0x00406bb0\nCMP byte ptr [RSP + 0x50],0x0\nJZ 0x004056ff\nMOV EAX,dword ptr [RSP + 0x54]\nTEST EAX,EAX\nJZ 0x00405a55\nMOV RAX,qword ptr [RSP + 0x48]\nADD qword ptr [RSP + 0x40],RAX\nMOV byte ptr [RSP + 0x3c],0x0\nMOV RDI,RBP\nCALL 0x00406bb0\nCMP byte ptr [RSP + 0x50],0x0\nJZ 0x00405729\nMOV EAX,dword ptr [RSP + 0x54]\nTEST EAX,EAX\nJZ 0x00405a21\nADD RBX,0x2\nMOV R14,RBX\nMOV RDI,R12\nCALL 0x00406bb0\nMOVZX EAX,byte ptr [0xd0 + RSP]\nMOV EDI,dword ptr [0xd4 + RSP]\nTEST AL,AL\nJZ 0x00405753\nTEST EDI,EDI\nJZ 0x00405857\nTEST AL,AL\nSETZ AL\nCMP byte ptr [RSP + 0x50],0x0\nJZ 0x00405790\nTEST AL,AL\nJNZ 0x00405790\nCALL 0x00401fd0\nMOV RBX,R12\nMOV R12D,EAX\nMOV EDI,dword ptr [RSP + 0x54]\nCALL 0x00401fd0\nCMP R12D,EAX\nMOV R12,RBX\nJZ 0x004057b5\nJMP 0x00405810\nMOV RDX,qword ptr [0xc8 + RSP]\nCMP RDX,qword ptr [RSP + 0x48]\nJNZ 0x00405810\nMOV RDI,qword ptr [0xc0 + RSP]\nMOV RSI,qword ptr [RSP + 0x40]\nCALL 0x00401db0\nTEST EAX,EAX\nJNZ 0x00405810\nMOV RAX,qword ptr [0xc8 + RSP]\nADD qword ptr [0xc0 + RSP],RAX\nMOV byte ptr [0xbc + RSP],0x0\nMOV RAX,qword ptr [RSP + 0x48]\nADD qword ptr [RSP + 0x40],RAX\nMOV byte ptr [RSP + 0x3c],0x0\nMOV RDI,RBP\nCALL 0x00406bb0\nINC R14\nCMP byte ptr [RSP + 0x50],0x0\nJZ 0x00405730\nMOV EAX,dword ptr [RSP + 0x54]\nTEST EAX,EAX\nJNZ 0x00405730\nJMP 0x00405a21\nMOV RBX,qword ptr [RSP + 0x10]\nINC RBX\nMOV RAX,qword ptr [0x88 + RSP]\nADD qword ptr [0x80 + RSP],RAX\nMOV byte ptr [RSP + 0x7c],0x0\nLEA RDI,[RSP + 0x70]\nCALL 0x00406bb0\nMOV RCX,RBX\nCMP byte ptr [0x90 + RSP],0x0\nJZ 0x00405523\nMOV EAX,dword ptr [0x94 + RSP]\nTEST EAX,EAX\nJNZ 0x00405523\nXOR R15D,R15D\nJMP 0x00405a29\nMOVZX R13D,byte ptr [R14]\nTEST R13,R13\nJZ 0x00405a29\nCALL 0x004020b0\nMOV qword ptr [RSP + 0x10],RAX\nMOV RAX,qword ptr [RAX]\nTEST byte ptr [RAX + R13*0x2 + 0x1],0x1\nJZ 0x0040588e\nCALL 0x004020a0\nMOV RAX,qword ptr [RAX]\nMOVZX R13D,byte ptr [RAX + R13*0x4]\nCMP byte ptr [R15],0x0\nJZ 0x00405a1c\nMOV AL,0x1\nMOV qword ptr [RSP + 0x20],RAX\nXOR R12D,R12D\nMOV RAX,R14\nMOV qword ptr [RSP],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x18],RAX\nXOR EBX,EBX\nXOR EBP,EBP\nMOV qword ptr [0xf0 + RSP],R13\nLEA RAX,[RBP + RBP*0x4]\nCMP RBX,RAX\nJC 0x0040593c\nCMP RBP,0xa\nJC 0x0040593c\nMOV RAX,qword ptr [RSP + 0x20]\nAND AL,0x1\nJZ 0x0040593c\nMOV RDI,qword ptr [RSP]\nTEST RDI,RDI\nJZ 0x00405909\nMOV RSI,RBX\nSUB RSI,qword ptr [RSP + 0x18]\nMOV qword ptr [RSP],RDI\nCALL 0x00401d60\nMOV RCX,qword ptr [RSP]\nCMP byte ptr [RCX + RAX*0x1],0x0\nMOV qword ptr [RSP + 0x18],RBX\nJZ 0x00405909\nADD qword ptr [RSP],RAX\nMOV qword ptr [RSP + 0x18],RBX\nJNZ 0x0040593c\nMOV RDI,R14\nCALL 0x00401c50\nMOV RDI,R15\nMOV RSI,R14\nMOV RDX,RAX\nLEA RCX,[0x198 + RSP]\nCALL 0x00405e60\nTEST AL,AL\nJNZ 0x00405a41\nXOR EAX,EAX\nMOV qword ptr [RSP],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x20],RAX\nMOV qword ptr [RSP + 0x28],RBX\nMOV RAX,qword ptr [RSP + 0x10]\nMOV RAX,qword ptr [RAX]\nMOVZX EBX,byte ptr [R15]\nTEST byte ptr [RAX + RBX*0x2 + 0x1],0x1\nJZ 0x0040595f\nCALL 0x004020a0\nMOV RAX,qword ptr [RAX]\nMOV EBX,dword ptr [RAX + RBX*0x4]\nCMP EBX,R13D\nJNZ 0x00405a00\nMOV EBX,0x1\nMOV qword ptr [RSP + 0x8],R15\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP byte ptr [R14 + RBX*0x1],0x0\nJZ 0x00405a29\nMOVZX R13D,byte ptr [R15 + RBX*0x1]\nTEST R13,R13\nJZ 0x00405a1c\nMOV RAX,qword ptr [RSP + 0x10]\nMOV R15,qword ptr [RAX]\nTEST byte ptr [R15 + R13*0x2 + 0x1],0x1\nJZ 0x004059b5\nCALL 0x004020a0\nMOV RAX,qword ptr [RAX]\nMOV R13D,dword ptr [RAX + R13*0x4]\nMOV R12,R14\nMOVZX R14D,byte ptr [R14 + RBX*0x1]\nTEST byte ptr [R15 + R14*0x2 + 0x1],0x1\nJZ 0x004059d1\nCALL 0x004020a0\nMOV RAX,qword ptr [RAX]\nMOV R14D,dword ptr [RAX + R14*0x4]\nINC RBX\nCMP R13D,R14D\nMOV R15,qword ptr [RSP + 0x8]\nMOV R14,R12\nJZ 0x00405980\nMOV RAX,qword ptr [RSP + 0x28]\nADD RAX,RBX\nMOV RBX,RAX\nMOV R13,qword ptr [0xf0 + RSP]\nXOR R12D,R12D\nJMP 0x00405a08\nMOV RBX,qword ptr [RSP + 0x28]\nINC RBX\nINC RBP\nCMP byte ptr [R15 + 0x1],0x0\nLEA R15,[R15 + 0x1]\nJNZ 0x004058bc\nJMP 0x00405a2c\nXOR R12D,R12D\nJMP 0x00405a2c\nMOV R15,qword ptr [0x80 + RSP]\nMOV R12,R15\nMOV RAX,R12\nADD RSP,0x1d8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV R12,qword ptr [0x198 + RSP]\nJMP 0x00405a2c\nMOV R15,qword ptr [0xb0 + RSP]\nJMP 0x00405a29\nCALL 0x00401b30\n'
p1439
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec d8 01 00 00\n49 89 f6\n49 89 ff\ne8 24 c8 ff ff\n48 83 f8 02\n0f 82 39 04 00 00\n4c 89 b4 24 a8 01 00 00\nc6 84 24 98 01 00 00 00\n48 c7 84 24 9c 01 00 00 00 00 00 00\nc6 84 24 a4 01 00 00 00\n48 8d bc 24 98 01 00 00\ne8 59 17 00 00\n80 bc 24 b8 01 00 00 00\n74 0f\n8b 84 24 bc 01 00 00\n85 c0\n0f 84 b9 05 00 00\n48 8d b4 24 a8 01 00 00\n4c 89 b4 24 08 01 00 00\nc6 84 24 f8 00 00 00 00\n48 c7 84 24 fc 00 00 00 00 00 00 00\nc6 84 24 04 01 00 00 00\n48 8d bc 24 68 01 00 00\ne8 f7 48 00 00\n80 bc 24 78 01 00 00 00\n74 13\n8b bc 24 7c 01 00 00\ne8 11 cb ff ff\n89 84 24 7c 01 00 00\n4c 89 bc 24 80 00 00 00\nc6 44 24 70 00\n48 c7 44 24 74 00 00 00 00\nc6 44 24 7c 00\n48 8d 7c 24 70\ne8 c5 16 00 00\n80 bc 24 90 00 00 00 00\n74 0f\n8b 84 24 94 00 00 00\n85 c0\n0f 84 53 03 00 00\n4c 89 34 24\nb0 01\n89 44 24 08\n48 8d 6c 24 30\n4c 8d a4 24 b0 00 00 00\n31 c9\n45 31 f6\n45 31 ed\n48 8d 04 89\n49 39 c6\n48 89 4c 24 10\n0f 82 a7 00 00 00\n48 83 f9 0a\n48 8d 9c 24 f8 00 00 00\n0f 82 95 00 00 00\n8b 44 24 08\n24 01\n0f 84 89 00 00 00\n4d 39 ee\n74 42\n4d 29 f5\n0f 1f 44 00 00\n48 89 df\ne8 48 16 00 00\n80 bc 24 18 01 00 00 00\n74 0b\n8b 84 24 1c 01 00 00\n85 c0\n74 1d\n48 8b 84 24 10 01 00 00\n48 01 84 24 08 01 00 00\nc6 84 24 04 01 00 00 00\n49 ff c5\n75 c6\n48 89 df\ne8 0e 16 00 00\n80 bc 24 18 01 00 00 00\n74 2d\n8b 84 24 1c 01 00 00\n85 c0\n4d 89 f5\n75 22\n4c 89 ff\n48 8b 34 24\n4c 89 e2\ne8 97 04 00 00\n84 c0\n0f 85 7a 04 00 00\nc7 44 24 08 00 00 00 00\n4d 89 f5\n48 8d bc 24 38 01 00 00\n48 8d b4 24 80 00 00 00\ne8 af 47 00 00\n80 bc 24 48 01 00 00 00\n74 13\n8b bc 24 4c 01 00 00\ne8 c9 c9 ff ff\n89 84 24 4c 01 00 00\n4c 89 f3\n49 ff c6\n80 bc 24 48 01 00 00 00\n74 22\n8a 84 24 78 01 00 00\n84 c0\n74 17\n8b 84 24 4c 01 00 00\n3b 84 24 7c 01 00 00\n74 3a\ne9 d2 01 00 00\n48 8b 94 24 40 01 00 00\n48 3b 94 24 70 01 00 00\n0f 85 ba 01 00 00\n48 8b bc 24 38 01 00 00\n48 8b b4 24 68 01 00 00\ne8 45 c7 ff ff\n85 c0\n0f 85 9d 01 00 00\n0f 10 44 24 70\n0f 10 8c 24 80 00 00 00\n0f 10 94 24 90 00 00 00\n0f 10 9c 24 a0 00 00 00\n0f 29 9c 24 e0 00 00 00\n0f 29 94 24 d0 00 00 00\n0f 29 8c 24 c0 00 00 00\n0f 29 84 24 b0 00 00 00\n48 8b 84 24 c8 00 00 00\n48 01 84 24 c0 00 00 00\nc6 84 24 bc 00 00 00 00\n48 8b 04 24\n48 89 44 24 40\nc6 44 24 30 00\n48 c7 44 24 34 00 00 00 00\nc6 44 24 3c 00\n48 89 ef\ne8 c4 14 00 00\n80 7c 24 50 00\n74 0c\n8b 44 24 54\n85 c0\n0f 84 56 03 00 00\n48 8b 44 24 48\n48 01 44 24 40\nc6 44 24 3c 00\n48 89 ef\ne8 9a 14 00 00\n80 7c 24 50 00\n74 0c\n8b 44 24 54\n85 c0\n0f 84 f8 02 00 00\n48 83 c3 02\n49 89 de\n4c 89 e7\ne8 78 14 00 00\n0f b6 84 24 d0 00 00 00\n8b bc 24 d4 00 00 00\n84 c0\n74 08\n85 ff\n0f 84 04 01 00 00\n84 c0\n0f 94 c0\n80 7c 24 50 00\n74 31\n84 c0\n75 2d\ne8 68 c8 ff ff\n4c 89 e3\n41 89 c4\n8b 7c 24 54\ne8 59 c8 ff ff\n41 39 c4\n49 89 dc\n74 36\ne9 8c 00 00 00\n48 8b 94 24 c8 00 00 00\n48 3b 54 24 48\n75 71\n48 8b bc 24 c0 00 00 00\n48 8b 74 24 40\ne8 ff c5 ff ff\n85 c0\n75 5b\n48 8b 84 24 c8 00 00 00\n48 01 84 24 c0 00 00 00\nc6 84 24 bc 00 00 00 00\n48 8b 44 24 48\n48 01 44 24 40\nc6 44 24 3c 00\n48 89 ef\ne8 cc 13 00 00\n49 ff c6\n80 7c 24 50 00\n0f 84 3e ff ff ff\n8b 44 24 54\n85 c0\n0f 85 32 ff ff ff\ne9 1e 02 00 00\n48 8b 5c 24 10\n48 ff c3\n48 8b 84 24 88 00 00 00\n48 01 84 24 80 00 00 00\nc6 44 24 7c 00\n48 8d 7c 24 70\ne8 79 13 00 00\n48 89 d9\n80 bc 24 90 00 00 00 00\n0f 84 db fc ff ff\n8b 84 24 94 00 00 00\n85 c0\n0f 85 cc fc ff ff\n45 31 ff\ne9 ca 01 00 00\n45 0f b6 2e\n4d 85 ed\n0f 84 bd 01 00 00\ne8 3f c8 ff ff\n48 89 44 24 10\n48 8b 00\n42 f6 44 68 01 01\n74 0d\ne8 1a c8 ff ff\n48 8b 00\n46 0f b6 2c a8\n41 80 3f 00\n0f 84 84 01 00 00\nb0 01\n48 89 44 24 20\n45 31 e4\n4c 89 f0\n48 89 04 24\n31 c0\n48 89 44 24 18\n31 db\n31 ed\n4c 89 ac 24 f0 00 00 00\n48 8d 44 ad 00\n48 39 c3\n72 76\n48 83 fd 0a\n72 70\n48 8b 44 24 20\n24 01\n74 67\n48 8b 3c 24\n48 85 ff\n74 2b\n48 89 de\n48 2b 74 24 18\n48 89 3c 24\ne8 71 c4 ff ff\n48 8b 0c 24\n80 3c 01 00\n48 89 5c 24 18\n74 0b\n48 01 04 24\n48 89 5c 24 18\n75 33\n4c 89 f7\ne8 3f c3 ff ff\n4c 89 ff\n4c 89 f6\n48 89 c2\n48 8d 8c 24 98 01 00 00\ne8 39 05 00 00\n84 c0\n0f 85 12 01 00 00\n31 c0\n48 89 04 24\n31 c0\n48 89 44 24 20\n48 89 5c 24 28\n48 8b 44 24 10\n48 8b 00\n41 0f b6 1f\nf6 44 58 01 01\n74 0b\ne8 47 c7 ff ff\n48 8b 00\n8b 1c 98\n44 39 eb\n0f 85 98 00 00 00\nbb 01 00 00 00\n4c 89 7c 24 08\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n41 80 3c 1e 00\n0f 84 9e 00 00 00\n45 0f b6 2c 1f\n4d 85 ed\n0f 84 83 00 00 00\n48 8b 44 24 10\n4c 8b 38\n43 f6 44 6f 01 01\n74 0c\ne8 f2 c6 ff ff\n48 8b 00\n46 8b 2c a8\n4d 89 f4\n45 0f b6 34 1e\n43 f6 44 77 01 01\n74 0c\ne8 d6 c6 ff ff\n48 8b 00\n46 8b 34 b0\n48 ff c3\n45 39 f5\n4c 8b 7c 24 08\n4d 89 e6\n74 9f\n48 8b 44 24 28\n48 01 d8\n48 89 c3\n4c 8b ac 24 f0 00 00 00\n45 31 e4\neb 0f\n48 8b 5c 24 28\n48 ff c3\n48 ff c5\n41 80 7f 01 00\n4d 8d 7f 01\n0f 85 a2 fe ff ff\neb 10\n45 31 e4\neb 0b\n4c 8b bc 24 80 00 00 00\n4d 89 fc\n4c 89 e0\n48 81 c4 d8 01 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n4c 8b a4 24 98 01 00 00\neb e1\n4c 8b bc 24 b0 00 00 00\neb d4\ne8 d6 c0 ff ff\n'
p1440
S'.text:0000000000405400\n.text:0000000000405401\n.text:0000000000405403\n.text:0000000000405405\n.text:0000000000405407\n.text:0000000000405409\n.text:000000000040540a\n.text:0000000000405411\n.text:0000000000405414\n.text:0000000000405417\n.text:000000000040541c\n.text:0000000000405420\n.text:0000000000405426\n.text:000000000040542e\n.text:0000000000405436\n.text:0000000000405442\n.text:000000000040544a\n.text:0000000000405452\n.text:0000000000405457\n.text:000000000040545f\n.text:0000000000405461\n.text:0000000000405468\n.text:000000000040546a\n.text:0000000000405470\n.text:0000000000405478\n.text:0000000000405480\n.text:0000000000405488\n.text:0000000000405494\n.text:000000000040549c\n.text:00000000004054a4\n.text:00000000004054a9\n.text:00000000004054b1\n.text:00000000004054b3\n.text:00000000004054ba\n.text:00000000004054bf\n.text:00000000004054c6\n.text:00000000004054ce\n.text:00000000004054d3\n.text:00000000004054dc\n.text:00000000004054e1\n.text:00000000004054e6\n.text:00000000004054eb\n.text:00000000004054f3\n.text:00000000004054f5\n.text:00000000004054fc\n.text:00000000004054fe\n.text:0000000000405504\n.text:0000000000405508\n.text:000000000040550a\n.text:000000000040550e\n.text:0000000000405513\n.text:000000000040551b\n.text:000000000040551d\n.text:0000000000405520\n.text:0000000000405523\n.text:0000000000405527\n.text:000000000040552a\n.text:000000000040552f\n.text:0000000000405535\n.text:0000000000405539\n.text:0000000000405541\n.text:0000000000405547\n.text:000000000040554b\n.text:000000000040554d\n.text:0000000000405553\n.text:0000000000405556\n.text:0000000000405558\n.text:000000000040555b\n.text:0000000000405560\n.text:0000000000405563\n.text:0000000000405568\n.text:0000000000405570\n.text:0000000000405572\n.text:0000000000405579\n.text:000000000040557b\n.text:000000000040557d\n.text:0000000000405585\n.text:000000000040558d\n.text:0000000000405595\n.text:0000000000405598\n.text:000000000040559a\n.text:000000000040559d\n.text:00000000004055a2\n.text:00000000004055aa\n.text:00000000004055ac\n.text:00000000004055b3\n.text:00000000004055b5\n.text:00000000004055b8\n.text:00000000004055ba\n.text:00000000004055bd\n.text:00000000004055c1\n.text:00000000004055c4\n.text:00000000004055c9\n.text:00000000004055cb\n.text:00000000004055d1\n.text:00000000004055d9\n.text:00000000004055dc\n.text:00000000004055e4\n.text:00000000004055ec\n.text:00000000004055f1\n.text:00000000004055f9\n.text:00000000004055fb\n.text:0000000000405602\n.text:0000000000405607\n.text:000000000040560e\n.text:0000000000405611\n.text:0000000000405614\n.text:000000000040561c\n.text:000000000040561e\n.text:0000000000405625\n.text:0000000000405627\n.text:0000000000405629\n.text:0000000000405630\n.text:0000000000405637\n.text:0000000000405639\n.text:0000000000405640\n.text:0000000000405648\n.text:0000000000405650\n.text:0000000000405656\n.text:000000000040565e\n.text:0000000000405666\n.text:000000000040566b\n.text:000000000040566d\n.text:0000000000405673\n.text:0000000000405678\n.text:0000000000405680\n.text:0000000000405688\n.text:0000000000405690\n.text:0000000000405698\n.text:00000000004056a0\n.text:00000000004056a8\n.text:00000000004056b0\n.text:00000000004056b8\n.text:00000000004056c0\n.text:00000000004056c8\n.text:00000000004056cc\n.text:00000000004056d1\n.text:00000000004056d6\n.text:00000000004056df\n.text:00000000004056e4\n.text:00000000004056e7\n.text:00000000004056ec\n.text:00000000004056f1\n.text:00000000004056f3\n.text:00000000004056f7\n.text:00000000004056f9\n.text:00000000004056ff\n.text:0000000000405704\n.text:0000000000405709\n.text:000000000040570e\n.text:0000000000405711\n.text:0000000000405716\n.text:000000000040571b\n.text:000000000040571d\n.text:0000000000405721\n.text:0000000000405723\n.text:0000000000405729\n.text:000000000040572d\n.text:0000000000405730\n.text:0000000000405733\n.text:0000000000405738\n.text:0000000000405740\n.text:0000000000405747\n.text:0000000000405749\n.text:000000000040574b\n.text:000000000040574d\n.text:0000000000405753\n.text:0000000000405755\n.text:0000000000405758\n.text:000000000040575d\n.text:000000000040575f\n.text:0000000000405761\n.text:0000000000405763\n.text:0000000000405768\n.text:000000000040576b\n.text:000000000040576e\n.text:0000000000405772\n.text:0000000000405777\n.text:000000000040577a\n.text:000000000040577d\n.text:000000000040577f\n.text:0000000000405790\n.text:0000000000405798\n.text:000000000040579d\n.text:000000000040579f\n.text:00000000004057a7\n.text:00000000004057ac\n.text:00000000004057b1\n.text:00000000004057b3\n.text:00000000004057b5\n.text:00000000004057bd\n.text:00000000004057c5\n.text:00000000004057cd\n.text:00000000004057d2\n.text:00000000004057d7\n.text:00000000004057dc\n.text:00000000004057df\n.text:00000000004057e4\n.text:00000000004057e7\n.text:00000000004057ec\n.text:00000000004057f2\n.text:00000000004057f6\n.text:00000000004057f8\n.text:00000000004057fe\n.text:0000000000405810\n.text:0000000000405815\n.text:0000000000405818\n.text:0000000000405820\n.text:0000000000405828\n.text:000000000040582d\n.text:0000000000405832\n.text:0000000000405837\n.text:000000000040583a\n.text:0000000000405842\n.text:0000000000405848\n.text:000000000040584f\n.text:0000000000405851\n.text:0000000000405857\n.text:000000000040585a\n.text:000000000040585f\n.text:0000000000405863\n.text:0000000000405866\n.text:000000000040586c\n.text:0000000000405871\n.text:0000000000405876\n.text:0000000000405879\n.text:000000000040587f\n.text:0000000000405881\n.text:0000000000405886\n.text:0000000000405889\n.text:000000000040588e\n.text:0000000000405892\n.text:0000000000405898\n.text:000000000040589a\n.text:000000000040589f\n.text:00000000004058a2\n.text:00000000004058a5\n.text:00000000004058a9\n.text:00000000004058ab\n.text:00000000004058b0\n.text:00000000004058b2\n.text:00000000004058b4\n.text:00000000004058bc\n.text:00000000004058c1\n.text:00000000004058c4\n.text:00000000004058c6\n.text:00000000004058ca\n.text:00000000004058cc\n.text:00000000004058d1\n.text:00000000004058d3\n.text:00000000004058d5\n.text:00000000004058d9\n.text:00000000004058dc\n.text:00000000004058de\n.text:00000000004058e1\n.text:00000000004058e6\n.text:00000000004058ea\n.text:00000000004058ef\n.text:00000000004058f3\n.text:00000000004058f7\n.text:00000000004058fc\n.text:00000000004058fe\n.text:0000000000405902\n.text:0000000000405907\n.text:0000000000405909\n.text:000000000040590c\n.text:0000000000405911\n.text:0000000000405914\n.text:0000000000405917\n.text:000000000040591a\n.text:0000000000405922\n.text:0000000000405927\n.text:0000000000405929\n.text:000000000040592f\n.text:0000000000405931\n.text:0000000000405935\n.text:0000000000405937\n.text:000000000040593c\n.text:0000000000405941\n.text:0000000000405946\n.text:0000000000405949\n.text:000000000040594d\n.text:0000000000405952\n.text:0000000000405954\n.text:0000000000405959\n.text:000000000040595c\n.text:000000000040595f\n.text:0000000000405962\n.text:0000000000405968\n.text:000000000040596d\n.text:0000000000405972\n.text:0000000000405980\n.text:0000000000405985\n.text:000000000040598b\n.text:0000000000405990\n.text:0000000000405993\n.text:0000000000405999\n.text:000000000040599e\n.text:00000000004059a1\n.text:00000000004059a7\n.text:00000000004059a9\n.text:00000000004059ae\n.text:00000000004059b1\n.text:00000000004059b5\n.text:00000000004059b8\n.text:00000000004059bd\n.text:00000000004059c3\n.text:00000000004059c5\n.text:00000000004059ca\n.text:00000000004059cd\n.text:00000000004059d1\n.text:00000000004059d4\n.text:00000000004059d7\n.text:00000000004059dc\n.text:00000000004059df\n.text:00000000004059e1\n.text:00000000004059e6\n.text:00000000004059e9\n.text:00000000004059ec\n.text:00000000004059f4\n.text:00000000004059f7\n.text:0000000000405a00\n.text:0000000000405a05\n.text:0000000000405a08\n.text:0000000000405a0b\n.text:0000000000405a10\n.text:0000000000405a14\n.text:0000000000405a1a\n.text:0000000000405a1c\n.text:0000000000405a1f\n.text:0000000000405a21\n.text:0000000000405a29\n.text:0000000000405a2c\n.text:0000000000405a2f\n.text:0000000000405a36\n.text:0000000000405a37\n.text:0000000000405a39\n.text:0000000000405a3b\n.text:0000000000405a3d\n.text:0000000000405a3f\n.text:0000000000405a40\n.text:0000000000405a41\n.text:0000000000405a49\n.text:0000000000405a4b\n.text:0000000000405a53\n.text:0000000000405a55\n'
p1441
tp1442
sS'mb_copy'
p1443
(S'\n__stdcall mb_copy(mbchar_t * new_mbc, mbchar_t * old_mbc)\n'
p1444
V\u000avoid mb_copy(mbchar_t *new_mbc,mbchar_t *old_mbc)\u000a\u000a{\u000a  _Bool _Var1;\u000a  char *__dest;\u000a  \u000a  __dest = old_mbc->ptr;\u000a  if (__dest == old_mbc->buf) {\u000a    __dest = new_mbc->buf;\u000a    memcpy(__dest,old_mbc->buf,old_mbc->bytes);\u000a  }\u000a  new_mbc->ptr = __dest;\u000a  new_mbc->bytes = old_mbc->bytes;\u000a  _Var1 = old_mbc->wc_valid;\u000a  new_mbc->wc_valid = _Var1;\u000a  if (_Var1 != false) {\u000a    new_mbc->wc = old_mbc->wc;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1445
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV RBX,RSI\nMOV R14,RDI\nMOV R15,qword ptr [RBX]\nLEA RSI,[RBX + 0x18]\nCMP R15,RSI\nJNZ 0x00409dc7\nLEA R15,[R14 + 0x18]\nMOV RDX,qword ptr [RBX + 0x8]\nMOV RDI,R15\nCALL 0x00401e20\nMOV qword ptr [R14],R15\nMOV RAX,qword ptr [RBX + 0x8]\nMOV qword ptr [R14 + 0x8],RAX\nMOV AL,byte ptr [RBX + 0x10]\nTEST AL,AL\nMOV byte ptr [R14 + 0x10],AL\nJZ 0x00409de4\nMOV EAX,dword ptr [RBX + 0x14]\nMOV dword ptr [R14 + 0x14],EAX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1446
S'41 57\n41 56\n53\n48 89 f3\n49 89 fe\n4c 8b 3b\n48 8d 73 18\n49 39 f7\n75 10\n4d 8d 7e 18\n48 8b 53 08\n4c 89 ff\ne8 59 80 ff ff\n4d 89 3e\n48 8b 43 08\n49 89 46 08\n8a 43 10\n84 c0\n41 88 46 10\n74 07\n8b 43 14\n41 89 46 14\n5b\n41 5e\n41 5f\nc3\n'
p1447
S'.text:0000000000409da0\n.text:0000000000409da2\n.text:0000000000409da4\n.text:0000000000409da5\n.text:0000000000409da8\n.text:0000000000409dab\n.text:0000000000409dae\n.text:0000000000409db2\n.text:0000000000409db5\n.text:0000000000409db7\n.text:0000000000409dbb\n.text:0000000000409dbf\n.text:0000000000409dc2\n.text:0000000000409dc7\n.text:0000000000409dca\n.text:0000000000409dce\n.text:0000000000409dd2\n.text:0000000000409dd5\n.text:0000000000409dd7\n.text:0000000000409ddb\n.text:0000000000409ddd\n.text:0000000000409de0\n.text:0000000000409de4\n.text:0000000000409de5\n.text:0000000000409de7\n.text:0000000000409de9\n'
p1448
tp1449
sS'strrchr'
p1450
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p1451
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_0060f110)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1452
S'JMP qword ptr [0x0060f110]\n'
p1453
S'ff 25 2a d4 20 00\n'
p1454
S'.plt:0000000000401ce0\n'
p1455
tp1456
sS'quotearg_alloc_mem'
p1457
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p1458
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p1459
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x60f560\nCMOVNZ R12,RCX\nCALL 0x00401b40\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00406f60\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00408ca0\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00406f60\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x00407c8a\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1460
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc 60 f5 60 00\n4c 0f 45 e1\ne8 58 9f ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 61 10 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1461
S'.text:0000000000407bb0\n.text:0000000000407bb1\n.text:0000000000407bb3\n.text:0000000000407bb5\n.text:0000000000407bb7\n.text:0000000000407bb9\n.text:0000000000407bba\n.text:0000000000407bbe\n.text:0000000000407bc1\n.text:0000000000407bc6\n.text:0000000000407bc9\n.text:0000000000407bce\n.text:0000000000407bd1\n.text:0000000000407bd6\n.text:0000000000407bd9\n.text:0000000000407bdf\n.text:0000000000407be3\n.text:0000000000407be8\n.text:0000000000407bed\n.text:0000000000407bef\n.text:0000000000407bf3\n.text:0000000000407bf5\n.text:0000000000407bf8\n.text:0000000000407bfc\n.text:0000000000407c01\n.text:0000000000407c05\n.text:0000000000407c0a\n.text:0000000000407c0e\n.text:0000000000407c10\n.text:0000000000407c12\n.text:0000000000407c15\n.text:0000000000407c18\n.text:0000000000407c1b\n.text:0000000000407c20\n.text:0000000000407c25\n.text:0000000000407c27\n.text:0000000000407c2c\n.text:0000000000407c30\n.text:0000000000407c33\n.text:0000000000407c37\n.text:0000000000407c3a\n.text:0000000000407c3f\n.text:0000000000407c42\n.text:0000000000407c46\n.text:0000000000407c4a\n.text:0000000000407c4d\n.text:0000000000407c50\n.text:0000000000407c55\n.text:0000000000407c5a\n.text:0000000000407c5d\n.text:0000000000407c62\n.text:0000000000407c67\n.text:0000000000407c69\n.text:0000000000407c6e\n.text:0000000000407c73\n.text:0000000000407c77\n.text:0000000000407c7a\n.text:0000000000407c7e\n.text:0000000000407c83\n.text:0000000000407c85\n.text:0000000000407c87\n.text:0000000000407c8a\n.text:0000000000407c8d\n.text:0000000000407c91\n.text:0000000000407c92\n.text:0000000000407c94\n.text:0000000000407c96\n.text:0000000000407c98\n.text:0000000000407c9a\n.text:0000000000407c9b\n'
p1462
tp1463
sS'fputs'
p1464
(S'\n__stdcall fputs(char * __s, FILE * __stream)\n'
p1465
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_0060f128)();\u000a  return iVar1;\u000a}\u000a\u000a
p1466
S'JMP qword ptr [0x0060f128]\n'
p1467
S'ff 25 12 d4 20 00\n'
p1468
S'.plt:0000000000401d10\n'
p1469
tp1470
sS'bkm_scale'
p1471
(S'\n__stdcall bkm_scale(uintmax_t * x)\n'
p1472
V\u000astrtol_error bkm_scale(uintmax_t *x)\u000a\u000a{\u000a  ulong uVar1;\u000a  uintmax_t uVar2;\u000a  int in_ESI;\u000a  bool bVar3;\u000a  \u000a  uVar1 = *x;\u000a  uVar2 = (long)in_ESI * uVar1;\u000a  bVar3 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816((ulong)(long)in_ESI),0\u000a                ) < uVar1;\u000a  if (bVar3) {\u000a    uVar2 = 0xffffffffffffffff;\u000a  }\u000a  *x = uVar2;\u000a  return -(uint)bVar3 & LONGINT_OVERFLOW;\u000a}\u000a\u000a
p1473
S'MOVSXD RCX,ESI\nMOV RSI,-0x1\nMOV RAX,-0x1\nXOR EDX,EDX\nDIV RCX\nMOV RDX,qword ptr [RDI]\nIMUL RCX,RDX\nCMP RAX,RDX\nCMOVC RCX,RSI\nSBB EAX,EAX\nAND EAX,0x1\nMOV qword ptr [RDI],RCX\nRET\n'
p1474
S'48 63 ce\n48 c7 c6 ff ff ff ff\n48 c7 c0 ff ff ff ff\n31 d2\n48 f7 f1\n48 8b 17\n48 0f af ca\n48 39 d0\n48 0f 42 ce\n19 c0\n83 e0 01\n48 89 0f\nc3\n'
p1475
S'.text:00000000004090b0\n.text:00000000004090b3\n.text:00000000004090ba\n.text:00000000004090c1\n.text:00000000004090c3\n.text:00000000004090c6\n.text:00000000004090c9\n.text:00000000004090cd\n.text:00000000004090d0\n.text:00000000004090d4\n.text:00000000004090d6\n.text:00000000004090d9\n.text:00000000004090dc\n'
p1476
tp1477
sS'memchr'
p1478
(S'\n__stdcall memchr(void * __s, int __c, size_t __n)\n'
p1479
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memchr(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memchr_0060f170)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1480
S'JMP qword ptr [0x0060f170]\n'
p1481
S'ff 25 ca d3 20 00\n'
p1482
S'.plt:0000000000401da0\n'
p1483
tp1484
sS'quotearg_style_mem'
p1485
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p1486
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1487
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00407fd0\n'
p1488
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p1489
S'.text:0000000000408030\n.text:0000000000408033\n.text:0000000000408036\n.text:0000000000408038\n.text:000000000040803a\n.text:000000000040803c\n.text:000000000040803f\n.text:0000000000408042\n'
p1490
tp1491
sS'xalloc_die'
p1492
(S'\n__stdcall xalloc_die()\n'
p1493
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,&DAT_0040c628,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1494
S'PUSH RBX\nMOV EBX,dword ptr [0x0060f3f0]\nXOR EDI,EDI\nMOV ESI,0x40c30f\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x40c628\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00401f70\nCALL 0x00401b30\n'
p1495
S'53\n8b 1d 89 66 20 00\n31 ff\nbe 0f c3 40 00\nba 05 00 00 00\ne8 b8 8e ff ff\n48 89 c1\n31 f6\nba 28 c6 40 00\n31 c0\n89 df\ne8 e5 91 ff ff\ne8 a0 8d ff ff\n'
p1496
S'.text:0000000000408d60\n.text:0000000000408d61\n.text:0000000000408d67\n.text:0000000000408d69\n.text:0000000000408d6e\n.text:0000000000408d73\n.text:0000000000408d78\n.text:0000000000408d7b\n.text:0000000000408d7d\n.text:0000000000408d82\n.text:0000000000408d84\n.text:0000000000408d86\n.text:0000000000408d8b\n'
p1497
tp1498
sS'qmark_chars'
p1499
(S'\n__stdcall qmark_chars(char * buf, size_t len)\n'
p1500
V\u000asize_t qmark_chars(char *buf,size_t len)\u000a\u000a{\u000a  char cVar1;\u000a  int iVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  size_t sVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  char *s;\u000a  char *pcVar8;\u000a  char *pcVar9;\u000a  wchar_t local_44;\u000a  char *local_40;\u000a  mbstate_t local_38;\u000a  \u000a  sVar3 = __ctype_get_mb_cur_max();\u000a  if (sVar3 < 2) {\u000a    sVar4 = unibyte_qmark_chars(buf,len);\u000a    return sVar4;\u000a  }\u000a  pcVar8 = buf;\u000a  local_40 = buf;\u000a  if (0 < (long)len) {\u000a    pcVar9 = buf + len;\u000a    pcVar8 = buf;\u000a    local_40 = buf;\u000aLAB_004045f0:\u000a    do {\u000a      cVar1 = *buf;\u000a      switch(cVar1) {\u000a      case ' ':\u000a      case '!':\u000a      case '\u005c"':\u000a      case '#':\u000a      case '%':\u000a      case '&':\u000a      case '\u005c'':\u000a      case '(':\u000a      case ')':\u000a      case '*':\u000a      case '+':\u000a      case ',':\u000a      case '-':\u000a      case '.':\u000a      case '/':\u000a      case '0':\u000a      case '1':\u000a      case '2':\u000a      case '3':\u000a      case '4':\u000a      case '5':\u000a      case '6':\u000a      case '7':\u000a      case '8':\u000a      case '9':\u000a      case ':':\u000a      case ';':\u000a      case '<':\u000a      case '=':\u000a      case '>':\u000a      case '?':\u000a      case 'A':\u000a      case 'B':\u000a      case 'C':\u000a      case 'D':\u000a      case 'E':\u000a      case 'F':\u000a      case 'G':\u000a      case 'H':\u000a      case 'I':\u000a      case 'J':\u000a      case 'K':\u000a      case 'L':\u000a      case 'M':\u000a      case 'N':\u000a      case 'O':\u000a      case 'P':\u000a      case 'Q':\u000a      case 'R':\u000a      case 'S':\u000a      case 'T':\u000a      case 'U':\u000a      case 'V':\u000a      case 'W':\u000a      case 'X':\u000a      case 'Y':\u000a      case 'Z':\u000a      case '[':\u000a      case '\u005c\u005c':\u000a      case ']':\u000a      case '^':\u000a      case '_':\u000a      case 'a':\u000a      case 'b':\u000a      case 'c':\u000a      case 'd':\u000a      case 'e':\u000a      case 'f':\u000a      case 'g':\u000a      case 'h':\u000a      case 'i':\u000a      case 'j':\u000a      case 'k':\u000a      case 'l':\u000a      case 'm':\u000a      case 'n':\u000a      case 'o':\u000a      case 'p':\u000a      case 'q':\u000a      case 'r':\u000a      case 's':\u000a      case 't':\u000a      case 'u':\u000a      case 'v':\u000a      case 'w':\u000a      case 'x':\u000a      case 'y':\u000a      case 'z':\u000a      case '{':\u000a      case '|':\u000a      case '}':\u000a      case '~':\u000a        buf = buf + 1;\u000a        *pcVar8 = cVar1;\u000a        pcVar8 = pcVar8 + 1;\u000a        if (pcVar9 <= buf) goto LAB_004046de;\u000a        goto LAB_004045f0;\u000a      }\u000a      local_38 = (mbstate_t)0x0;\u000a      s = buf;\u000a      do {\u000a        sVar4 = rpl_mbrtowc(&local_44,s,(size_t)(pcVar9 + -(long)s),(mbstate_t *)&local_38);\u000a        if (sVar4 != 0) {\u000a          buf = pcVar9;\u000a          if (sVar4 != 0xfffffffffffffffe) {\u000a            if (sVar4 != 0xffffffffffffffff) goto LAB_00404666;\u000a            buf = s + 1;\u000a          }\u000a          *pcVar8 = '?';\u000a          pcVar8 = pcVar8 + 1;\u000a          break;\u000a        }\u000a        sVar4 = 1;\u000aLAB_00404666:\u000a        iVar2 = wcwidth(local_44);\u000a        sVar5 = sVar4;\u000a        pcVar6 = pcVar8;\u000a        pcVar7 = s;\u000a        if (iVar2 < 0) {\u000a          *pcVar8 = '?';\u000a          pcVar8 = pcVar8 + 1;\u000a        }\u000a        else {\u000a          do {\u000a            cVar1 = *pcVar7;\u000a            pcVar7 = pcVar7 + 1;\u000a            *pcVar6 = cVar1;\u000a            pcVar6 = pcVar6 + 1;\u000a            sVar5 = sVar5 - 1;\u000a          } while (sVar5 != 0);\u000a          pcVar8 = pcVar8 + sVar4;\u000a        }\u000a        buf = s + sVar4;\u000a        iVar2 = mbsinit(&local_38);\u000a        s = buf;\u000a      } while (iVar2 == 0);\u000a    } while (buf < pcVar9);\u000a  }\u000aLAB_004046de:\u000a  return (size_t)(pcVar8 + -(long)local_40);\u000a}\u000a\u000a
p1501
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R15,RSI\nMOV R14,RDI\nCALL 0x00401c40\nCMP RAX,0x1\nJA 0x004045c8\nMOV RDI,R14\nMOV RSI,R15\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404700\nTEST R15,R15\nMOV R13,R14\nJLE 0x004046de\nADD R15,R14\nLEA RBX,[RSP + 0x10]\nMOV R13,R14\nMOV RBP,R14\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVSX EAX,byte ptr [RBP]\nLEA ECX,[RAX + -0x20]\nCMP ECX,0x5e\nJA 0x00404617\nJMP qword ptr [0x40b420 + RCX*0x8]\nINC RBP\nMOV byte ptr [R13],AL\nINC R13\nCMP RBP,R15\nJC 0x004045f0\nJMP 0x004046de\nMOV qword ptr [RSP + 0x8],R14\nMOV qword ptr [RSP + 0x10],0x0\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDX,R15\nSUB RDX,RBP\nLEA RDI,[RSP + 0x4]\nMOV RSI,RBP\nMOV RCX,RBX\nCALL 0x004093a0\nMOV R12,RAX\nTEST R12,R12\nJZ 0x00404660\nCMP R12,-0x2\nJZ 0x004046c0\nCMP R12,-0x1\nJNZ 0x00404666\nJMP 0x004046c5\nMOV R12D,0x1\nMOV R14,RBX\nMOV EDI,dword ptr [RSP + 0x4]\nCALL 0x00401e70\nTEST EAX,EAX\nMOV RAX,R12\nMOV RCX,R13\nMOV RDX,RBP\nJS 0x004046a0\nNOP\nMOVZX EBX,byte ptr [RDX]\nINC RDX\nMOV byte ptr [RCX],BL\nINC RCX\nDEC RAX\nJNZ 0x00404680\nADD R13,R12\nJMP 0x004046a8\nMOV byte ptr [R13],0x3f\nINC R13\nADD RBP,R12\nMOV RBX,R14\nMOV RDI,RBX\nCALL 0x00402060\nTEST EAX,EAX\nJZ 0x00404630\nJMP 0x004046d0\nMOV RBP,R15\nJMP 0x004046c8\nINC RBP\nMOV byte ptr [R13],0x3f\nINC R13\nMOV R14,qword ptr [RSP + 0x8]\nCMP RBP,R15\nJC 0x004045f0\nSUB R13,R14\nMOV RAX,R13\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1502
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 f7\n49 89 fe\ne8 97 d6 ff ff\n48 83 f8 01\n77 19\n4c 89 f7\n4c 89 fe\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 38 01 00 00\n4d 85 ff\n4d 89 f5\n0f 8e 0a 01 00 00\n4d 01 f7\n48 8d 5c 24 10\n4d 89 f5\n4c 89 f5\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f be 45 00\n8d 48 e0\n83 f9 5e\n77 1b\nff 24 cd 20 b4 40 00\n48 ff c5\n41 88 45 00\n49 ff c5\n4c 39 fd\n72 de\ne9 c7 00 00 00\n4c 89 74 24 08\n48 c7 44 24 10 00 00 00 00\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 fa\n48 29 ea\n48 8d 7c 24 04\n48 89 ee\n48 89 d9\ne8 5a 4d 00 00\n49 89 c4\n4d 85 e4\n74 12\n49 83 fc fe\n74 6c\n49 83 fc ff\n75 0c\neb 69\n41 bc 01 00 00 00\n49 89 de\n8b 7c 24 04\ne8 fe d7 ff ff\n85 c0\n4c 89 e0\n4c 89 e9\n48 89 ea\n78 21\n90\n0f b6 1a\n48 ff c2\n88 19\n48 ff c1\n48 ff c8\n75 f0\n4d 01 e5\neb 13\n41 c6 45 00 3f\n49 ff c5\n4c 01 e5\n4c 89 f3\n48 89 df\ne8 aa d9 ff ff\n85 c0\n0f 84 72 ff ff ff\neb 10\n4c 89 fd\neb 03\n48 ff c5\n41 c6 45 00 3f\n49 ff c5\n4c 8b 74 24 08\n4c 39 fd\n0f 82 12 ff ff ff\n4d 29 f5\n4c 89 e8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1503
S'.text:0000000000404590\n.text:0000000000404591\n.text:0000000000404593\n.text:0000000000404595\n.text:0000000000404597\n.text:0000000000404599\n.text:000000000040459a\n.text:000000000040459e\n.text:00000000004045a1\n.text:00000000004045a4\n.text:00000000004045a9\n.text:00000000004045ad\n.text:00000000004045af\n.text:00000000004045b2\n.text:00000000004045b5\n.text:00000000004045b9\n.text:00000000004045ba\n.text:00000000004045bc\n.text:00000000004045be\n.text:00000000004045c0\n.text:00000000004045c2\n.text:00000000004045c3\n.text:00000000004045c8\n.text:00000000004045cb\n.text:00000000004045ce\n.text:00000000004045d4\n.text:00000000004045d7\n.text:00000000004045dc\n.text:00000000004045df\n.text:00000000004045e2\n.text:00000000004045f0\n.text:00000000004045f4\n.text:00000000004045f7\n.text:00000000004045fa\n.text:00000000004045fc\n.text:0000000000404603\n.text:0000000000404606\n.text:000000000040460a\n.text:000000000040460d\n.text:0000000000404610\n.text:0000000000404612\n.text:0000000000404617\n.text:000000000040461c\n.text:0000000000404625\n.text:0000000000404630\n.text:0000000000404633\n.text:0000000000404636\n.text:000000000040463b\n.text:000000000040463e\n.text:0000000000404641\n.text:0000000000404646\n.text:0000000000404649\n.text:000000000040464c\n.text:000000000040464e\n.text:0000000000404652\n.text:0000000000404654\n.text:0000000000404658\n.text:000000000040465a\n.text:0000000000404660\n.text:0000000000404666\n.text:0000000000404669\n.text:000000000040466d\n.text:0000000000404672\n.text:0000000000404674\n.text:0000000000404677\n.text:000000000040467a\n.text:000000000040467d\n.text:000000000040467f\n.text:0000000000404680\n.text:0000000000404683\n.text:0000000000404686\n.text:0000000000404688\n.text:000000000040468b\n.text:000000000040468e\n.text:0000000000404690\n.text:0000000000404693\n.text:00000000004046a0\n.text:00000000004046a5\n.text:00000000004046a8\n.text:00000000004046ab\n.text:00000000004046ae\n.text:00000000004046b1\n.text:00000000004046b6\n.text:00000000004046b8\n.text:00000000004046be\n.text:00000000004046c0\n.text:00000000004046c3\n.text:00000000004046c5\n.text:00000000004046c8\n.text:00000000004046cd\n.text:00000000004046d0\n.text:00000000004046d5\n.text:00000000004046d8\n.text:00000000004046de\n.text:00000000004046e1\n.text:00000000004046e4\n.text:00000000004046e8\n.text:00000000004046e9\n.text:00000000004046eb\n.text:00000000004046ed\n.text:00000000004046ef\n.text:00000000004046f1\n.text:00000000004046f2\n'
p1504
tp1505
sS'quotearg_n_custom'
p1506
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p1507
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1508
S'MOV R8,-0x1\nJMP 0x00408150\n'
p1509
S'49 c7 c0 ff ff ff ff\neb 07\n'
p1510
S'.text:0000000000408140\n.text:0000000000408147\n'
p1511
tp1512
sS'visit_existing_nofollow'
p1513
(S'\n__stdcall visit_existing_nofollow(process_data * procdata, void * context)\n'
p1514
V\u000aint visit_existing_nofollow(process_data *procdata,void *context)\u000a\u000a{\u000a  int iVar1;\u000a  stat st;\u000a  stat local_90;\u000a  \u000a  iVar1 = lstat(procdata->original_filename,&local_90);\u000a  return (int)((uint)(iVar1 != 0) * 3 + 1);\u000a}\u000a\u000a
p1515
S'SUB RSP,0x98\nMOV RDI,qword ptr [RDI + 0x10]\nLEA RSI,[RSP + 0x8]\nCALL 0x00409ee0\nXOR ECX,ECX\nTEST EAX,EAX\nSETNZ CL\nLEA EAX,[RCX + RCX*0x2 + 0x1]\nADD RSP,0x98\nRET\n'
p1516
S'48 81 ec 98 00 00 00\n48 8b 7f 10\n48 8d 74 24 08\ne8 db 63 00 00\n31 c9\n85 c0\n0f 95 c1\n8d 44 49 01\n48 81 c4 98 00 00 00\nc3\n'
p1517
S'.text:0000000000403af0\n.text:0000000000403af7\n.text:0000000000403afb\n.text:0000000000403b00\n.text:0000000000403b05\n.text:0000000000403b07\n.text:0000000000403b09\n.text:0000000000403b0c\n.text:0000000000403b10\n.text:0000000000403b17\n'
p1518
tp1519
sS'visit_locate02_format'
p1520
(S'\n__stdcall visit_locate02_format(process_data * procdata, void * context)\n'
p1521
V\u000aint visit_locate02_format(process_data *procdata,void *context)\u000a\u000a{\u000a  short sVar1;\u000a  int iVar2;\u000a  int iVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  long lVar6;\u000a  \u000a  iVar3 = procdata->c;\u000a  if (iVar3 == 0x80) {\u000a    sVar1 = get_short(procdata->fp);\u000a    iVar2 = (int)sVar1;\u000a  }\u000a  else {\u000a    iVar2 = iVar3 + -0x100;\u000a    if (iVar3 < 0x80) {\u000a      iVar2 = iVar3;\u000a    }\u000a  }\u000a  iVar2 = iVar2 + procdata->count;\u000a  procdata->count = iVar2;\u000a  if ((iVar2 < 0) || (procdata->len < iVar2)) {\u000a    uVar4 = dcgettext(0,"locate database %s is corrupt or invalid",5);\u000a    quotearg_n_style((char *)0x0);\u000a    error(1,0,uVar4);\u000a  }\u000a  iVar3 = locate_read_str();\u000a  if (iVar3 < 1) {\u000a    iVar3 = 8;\u000a  }\u000a  else {\u000a    iVar2 = _IO_getc((_IO_FILE *)procdata->fp);\u000a    procdata->c = iVar2;\u000a    procdata->len = procdata->count + -1 + iVar3;\u000a    if (iVar3 + procdata->count < 2) {\u000a      uVar4 = dcgettext(0,"locate database %s is corrupt or invalid",5);\u000a      pcVar5 = quotearg_n_style((char *)0x0);\u000a      error(1,0,uVar4,pcVar5);\u000a    }\u000a    pcVar5 = procdata->original_filename;\u000a    lVar6 = (long)procdata->len;\u000a    if (pcVar5[lVar6 + -1] == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("s[0] != \u005c'\u005c\u005c0\u005c'","locate.c",0x24d,\u000a                    "int visit_locate02_format(struct process_data *, void *)");\u000a    }\u000a    if (pcVar5[lVar6] != 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("s[1] == \u005c'\u005c\u005c0\u005c'","locate.c",0x24e,\u000a                    "int visit_locate02_format(struct process_data *, void *)");\u000a    }\u000a    if (pcVar5[lVar6 + 1] != 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("s[2] == \u005c'\u005c\u005c0\u005c'","locate.c",0x24f,\u000a                    "int visit_locate02_format(struct process_data *, void *)");\u000a    }\u000a    procdata->munged_filename = pcVar5;\u000a    iVar3 = 1;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p1522
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV ECX,dword ptr [RBX]\nCMP ECX,0x80\nJNZ 0x004035ad\nMOV RDI,qword ptr [RBX + 0x28]\nCALL 0x00404130\nCWDE\nJMP 0x004035b9\nLEA EAX,[-0x100 + RCX]\nCMP ECX,0x7f\nCMOVLE EAX,ECX\nADD EAX,dword ptr [RBX + 0x4]\nMOV dword ptr [RBX + 0x4],EAX\nJS 0x004035c6\nCMP EAX,dword ptr [RBX + 0x8]\nJLE 0x004035fe\nXOR EDI,EDI\nMOV ESI,0x40aebe\nMOV EDX,0x5\nCALL 0x00401c30\nMOV R14,RAX\nMOV RDX,qword ptr [RBX + 0x30]\nXOR EDI,EDI\nMOV ESI,0x8\nCALL 0x00407f30\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R14\nCALL 0x00401f70\nLEA RDI,[RBX + 0x10]\nLEA RSI,[RBX + 0x18]\nMOV RDX,qword ptr [RBX + 0x28]\nMOV ECX,dword ptr [RBX + 0x4]\nCALL 0x00404160\nMOV R14D,EAX\nTEST R14D,R14D\nJLE 0x00403699\nMOV RDI,qword ptr [RBX + 0x28]\nCALL 0x00401eb0\nMOV dword ptr [RBX],EAX\nMOV EAX,dword ptr [RBX + 0x4]\nMOV ECX,R14D\nADD ECX,EAX\nLEA EAX,[RAX + R14*0x1 + -0x1]\nMOV dword ptr [RBX + 0x8],EAX\nCMP ECX,0x1\nJG 0x00403672\nXOR EDI,EDI\nMOV ESI,0x40aebe\nMOV EDX,0x5\nCALL 0x00401c30\nMOV R14,RAX\nMOV RDX,qword ptr [RBX + 0x30]\nXOR EDI,EDI\nMOV ESI,0x8\nCALL 0x00407f30\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R14\nCALL 0x00401f70\nMOV RAX,qword ptr [RBX + 0x10]\nMOVSXD RCX,dword ptr [RBX + 0x8]\nCMP byte ptr [RAX + RCX*0x1 + -0x1],0x0\nJZ 0x004036a6\nCMP byte ptr [RAX + RCX*0x1],0x0\nJNZ 0x004036bf\nCMP byte ptr [RAX + RCX*0x1 + 0x1],0x0\nJNZ 0x004036d8\nMOV qword ptr [RBX + 0x20],RAX\nMOV EAX,0x1\nJMP 0x0040369e\nMOV EAX,0x8\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV EDI,0x40aee7\nMOV ESI,0x40a797\nMOV EDX,0x24d\nMOV ECX,0x40aef4\nCALL 0x00401d00\nMOV EDI,0x40af2d\nMOV ESI,0x40a797\nMOV EDX,0x24e\nMOV ECX,0x40aef4\nCALL 0x00401d00\nMOV EDI,0x40af3a\nMOV ESI,0x40a797\nMOV EDX,0x24f\nMOV ECX,0x40aef4\nCALL 0x00401d00\n'
p1523
S'41 56\n53\n50\n48 89 fb\n8b 0b\n81 f9 80 00 00 00\n75 0c\n48 8b 7b 28\ne8 86 0b 00 00\n98\neb 0c\n8d 81 00 ff ff ff\n83 f9 7f\n0f 4e c1\n03 43 04\n89 43 04\n78 05\n3b 43 08\n7e 38\n31 ff\nbe be ae 40 00\nba 05 00 00 00\ne8 59 e6 ff ff\n49 89 c6\n48 8b 53 30\n31 ff\nbe 08 00 00 00\ne8 46 49 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n4c 89 f2\ne8 72 e9 ff ff\n48 8d 7b 10\n48 8d 73 18\n48 8b 53 28\n8b 4b 04\ne8 4e 0b 00 00\n41 89 c6\n45 85 f6\n7e 7f\n48 8b 7b 28\ne8 8d e8 ff ff\n89 03\n8b 43 04\n44 89 f1\n01 c1\n42 8d 44 30 ff\n89 43 08\n83 f9 01\n7f 38\n31 ff\nbe be ae 40 00\nba 05 00 00 00\ne8 e5 e5 ff ff\n49 89 c6\n48 8b 53 30\n31 ff\nbe 08 00 00 00\ne8 d2 48 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n4c 89 f2\ne8 fe e8 ff ff\n48 8b 43 10\n48 63 4b 08\n80 7c 08 ff 00\n74 25\n80 3c 08 00\n75 38\n80 7c 08 01 00\n75 4a\n48 89 43 20\nb8 01 00 00 00\neb 05\nb8 08 00 00 00\n48 83 c4 08\n5b\n41 5e\nc3\nbf e7 ae 40 00\nbe 97 a7 40 00\nba 4d 02 00 00\nb9 f4 ae 40 00\ne8 41 e6 ff ff\nbf 2d af 40 00\nbe 97 a7 40 00\nba 4e 02 00 00\nb9 f4 ae 40 00\ne8 28 e6 ff ff\nbf 3a af 40 00\nbe 97 a7 40 00\nba 4f 02 00 00\nb9 f4 ae 40 00\ne8 0f e6 ff ff\n'
p1524
S'.text:0000000000403590\n.text:0000000000403592\n.text:0000000000403593\n.text:0000000000403594\n.text:0000000000403597\n.text:0000000000403599\n.text:000000000040359f\n.text:00000000004035a1\n.text:00000000004035a5\n.text:00000000004035aa\n.text:00000000004035ab\n.text:00000000004035ad\n.text:00000000004035b3\n.text:00000000004035b6\n.text:00000000004035b9\n.text:00000000004035bc\n.text:00000000004035bf\n.text:00000000004035c1\n.text:00000000004035c4\n.text:00000000004035c6\n.text:00000000004035c8\n.text:00000000004035cd\n.text:00000000004035d2\n.text:00000000004035d7\n.text:00000000004035da\n.text:00000000004035de\n.text:00000000004035e0\n.text:00000000004035e5\n.text:00000000004035ea\n.text:00000000004035ed\n.text:00000000004035f2\n.text:00000000004035f4\n.text:00000000004035f6\n.text:00000000004035f9\n.text:00000000004035fe\n.text:0000000000403602\n.text:0000000000403606\n.text:000000000040360a\n.text:000000000040360d\n.text:0000000000403612\n.text:0000000000403615\n.text:0000000000403618\n.text:000000000040361a\n.text:000000000040361e\n.text:0000000000403623\n.text:0000000000403625\n.text:0000000000403628\n.text:000000000040362b\n.text:000000000040362d\n.text:0000000000403632\n.text:0000000000403635\n.text:0000000000403638\n.text:000000000040363a\n.text:000000000040363c\n.text:0000000000403641\n.text:0000000000403646\n.text:000000000040364b\n.text:000000000040364e\n.text:0000000000403652\n.text:0000000000403654\n.text:0000000000403659\n.text:000000000040365e\n.text:0000000000403661\n.text:0000000000403666\n.text:0000000000403668\n.text:000000000040366a\n.text:000000000040366d\n.text:0000000000403672\n.text:0000000000403676\n.text:000000000040367a\n.text:000000000040367f\n.text:0000000000403681\n.text:0000000000403685\n.text:0000000000403687\n.text:000000000040368c\n.text:000000000040368e\n.text:0000000000403692\n.text:0000000000403697\n.text:0000000000403699\n.text:000000000040369e\n.text:00000000004036a2\n.text:00000000004036a3\n.text:00000000004036a5\n.text:00000000004036a6\n.text:00000000004036ab\n.text:00000000004036b0\n.text:00000000004036b5\n.text:00000000004036ba\n.text:00000000004036bf\n.text:00000000004036c4\n.text:00000000004036c9\n.text:00000000004036ce\n.text:00000000004036d3\n.text:00000000004036d8\n.text:00000000004036dd\n.text:00000000004036e2\n.text:00000000004036e7\n.text:00000000004036ec\n'
p1525
tp1526
sS'__freading'
p1527
(S'\n__stdcall __freading()\n'
p1528
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_0060f228)();\u000a  return;\u000a}\u000a\u000a
p1529
S'JMP qword ptr [0x0060f228]\n'
p1530
S'ff 25 12 d3 20 00\n'
p1531
S'.plt:0000000000401f10\n'
p1532
tp1533
sS'iswcntrl'
p1534
(S'\n__stdcall iswcntrl(wint_t __wc)\n'
p1535
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswcntrl(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswcntrl_0060f088)();\u000a  return iVar1;\u000a}\u000a\u000a
p1536
S'JMP qword ptr [0x0060f088]\n'
p1537
S'ff 25 b2 d4 20 00\n'
p1538
S'.plt:0000000000401bd0\n'
p1539
tp1540
sS'main'
p1541
(S'\n__stdcall main(char * * argv)\n'
p1542
V\u000aint main(char **argv)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  open_secure_db();\u000a  drop_privs();\u000a  iVar1 = dolocate((char **)((ulong)argv & 0xffffffff));\u000a  return iVar1;\u000a}\u000a\u000a
p1543
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV EBP,EDI\nCALL 0x004021f0\nMOV EBX,EAX\nCALL 0x00402240\nMOV EDI,EBP\nMOV RSI,R14\nMOV EDX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00402350\n'
p1544
S'55\n41 56\n53\n49 89 f6\n89 fd\ne8 22 00 00 00\n89 c3\ne8 6b 00 00 00\n89 ef\n4c 89 f6\n89 da\n5b\n41 5e\n5d\ne9 6b 01 00 00\n'
p1545
S'.text:00000000004021c0\n.text:00000000004021c1\n.text:00000000004021c3\n.text:00000000004021c4\n.text:00000000004021c7\n.text:00000000004021c9\n.text:00000000004021ce\n.text:00000000004021d0\n.text:00000000004021d5\n.text:00000000004021d7\n.text:00000000004021da\n.text:00000000004021dc\n.text:00000000004021dd\n.text:00000000004021df\n.text:00000000004021e0\n'
p1546
tp1547
sS'opendb'
p1548
(S'\n__stdcall opendb(char * name)\n'
p1549
V\u000aint opendb(char *name)\u000a\u000a{\u000a  uint __fd;\u000a  int iVar1;\u000a  \u000a  __fd = open(name,0);\u000a  if (-1 < (int)__fd) {\u000a    iVar1 = rpl_fcntl((ulong)__fd,2,1);\u000a    if (iVar1 != 0) {\u000a      close(__fd);\u000a      __fd = 0xffffffff;\u000a    }\u000a  }\u000a  return (int)__fd;\u000a}\u000a\u000a
p1550
S'PUSH RBX\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00401f90\nMOV EBX,EAX\nTEST EBX,EBX\nJS 0x00402b73\nMOV ESI,0x2\nMOV EDX,0x1\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00409120\nTEST EAX,EAX\nJZ 0x00402b73\nMOV EDI,EBX\nCALL 0x00401d80\nMOV EBX,0xffffffff\nMOV EAX,EBX\nPOP RBX\nRET\n'
p1551
S'53\n31 f6\n31 c0\ne8 46 f4 ff ff\n89 c3\n85 db\n78 23\nbe 02 00 00 00\nba 01 00 00 00\n31 c0\n89 df\ne8 bd 65 00 00\n85 c0\n74 0c\n89 df\ne8 12 f2 ff ff\nbb ff ff ff ff\n89 d8\n5b\nc3\n'
p1552
S'.text:0000000000402b40\n.text:0000000000402b41\n.text:0000000000402b43\n.text:0000000000402b45\n.text:0000000000402b4a\n.text:0000000000402b4c\n.text:0000000000402b4e\n.text:0000000000402b50\n.text:0000000000402b55\n.text:0000000000402b5a\n.text:0000000000402b5c\n.text:0000000000402b5e\n.text:0000000000402b63\n.text:0000000000402b65\n.text:0000000000402b67\n.text:0000000000402b69\n.text:0000000000402b6e\n.text:0000000000402b73\n.text:0000000000402b75\n.text:0000000000402b76\n'
p1553
tp1554
sS'xcharalloc'
p1555
(S'\n__stdcall xcharalloc(size_t n)\n'
p1556
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p1557
S'JMP 0x00408bd0\n'
p1558
S'e9 2b ff ff ff\n'
p1559
S'.text:0000000000408ca0\n'
p1560
tp1561
sS'c_isupper'
p1562
(S'\n__stdcall c_isupper()\n'
p1563
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p1564
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1565
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p1566
S'.text:0000000000409850\n.text:0000000000409853\n.text:0000000000409856\n.text:0000000000409859\n'
p1567
tp1568
sS'isatty'
p1569
(S'\n__stdcall isatty(int __fd)\n'
p1570
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint isatty(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_isatty_0060f078)();\u000a  return iVar1;\u000a}\u000a\u000a
p1571
S'JMP qword ptr [0x0060f078]\n'
p1572
S'ff 25 c2 d4 20 00\n'
p1573
S'.plt:0000000000401bb0\n'
p1574
tp1575
sS'get_regex_type_synonym'
p1576
(S'\n__stdcall get_regex_type_synonym()\n'
p1577
V\u000aint get_regex_type_synonym(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int *piVar2;\u000a  uint in_EDI;\u000a  \u000a  if ((in_EDI < 0xd) && (in_EDI != 0)) {\u000a    uVar1 = 0;\u000a    piVar2 = &regex_map[0].option_val;\u000a    do {\u000a      if (regex_map[(ulong)in_EDI].option_val == *piVar2) {\u000a        return (int)uVar1;\u000a      }\u000a      uVar1 = uVar1 + 1;\u000a      piVar2 = piVar2 + 4;\u000a    } while (uVar1 < in_EDI);\u000a  }\u000a  return -1;\u000a}\u000a\u000a
p1578
S'MOV EAX,0xffffffff\nCMP EDI,0xc\nJA 0x0040490e\nTEST EDI,EDI\nJZ 0x0040490e\nMOV ECX,EDI\nSHL RCX,0x4\nMOV EDX,dword ptr [0x60f32c + RCX]\nXOR ECX,ECX\nMOV ESI,0x60f32c\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP EDX,dword ptr [RSI]\nJZ 0x0040490f\nINC ECX\nADD RSI,0x10\nCMP ECX,EDI\nJC 0x00404900\nRET\nMOV EAX,ECX\nRET\n'
p1579
S'b8 ff ff ff ff\n83 ff 0c\n77 34\n85 ff\n74 30\n89 f9\n48 c1 e1 04\n8b 91 2c f3 60 00\n31 c9\nbe 2c f3 60 00\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n3b 16\n74 0b\nff c1\n48 83 c6 10\n39 f9\n72 f2\nc3\n89 c8\nc3\n'
p1580
S'.text:00000000004048d0\n.text:00000000004048d5\n.text:00000000004048d8\n.text:00000000004048da\n.text:00000000004048dc\n.text:00000000004048de\n.text:00000000004048e0\n.text:00000000004048e4\n.text:00000000004048ea\n.text:00000000004048ec\n.text:00000000004048f1\n.text:0000000000404900\n.text:0000000000404902\n.text:0000000000404904\n.text:0000000000404906\n.text:000000000040490a\n.text:000000000040490c\n.text:000000000040490e\n.text:000000000040490f\n.text:0000000000404911\n'
p1581
tp1582
sS'c_isalnum'
p1583
(S'\n__stdcall c_isalnum()\n'
p1584
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1585
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x0040976b\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x0040976b\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x0040976a\nXOR EAX,EAX\nRET\n'
p1586
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p1587
S'.text:0000000000409750\n.text:0000000000409752\n.text:0000000000409755\n.text:0000000000409758\n.text:000000000040975a\n.text:0000000000409764\n.text:0000000000409768\n.text:000000000040976a\n.text:000000000040976b\n.text:000000000040976e\n.text:0000000000409771\n.text:0000000000409773\n.text:0000000000409775\n'
p1588
tp1589
sS'human_options'
p1590
(S'\n__stdcall human_options(char * spec, int * opts, uintmax_t * block_size)\n'
p1591
V\u000astrtol_error human_options(char *spec,int *opts,uintmax_t *block_size)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  uintmax_t uVar2;\u000a  \u000a  sVar1 = humblock(spec,block_size,opts);\u000a  if (*block_size == 0) {\u000a    uVar2 = default_block_size();\u000a    *block_size = uVar2;\u000a    sVar1 = LONGINT_INVALID;\u000a  }\u000a  return sVar1;\u000a}\u000a\u000a
p1592
S'PUSH RBX\nMOV RBX,RDX\nMOV RAX,RSI\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x004052d0\nCMP qword ptr [RBX],0x0\nJNZ 0x004052c5\nCALL 0x004053e0\nMOV qword ptr [RBX],RAX\nMOV EAX,0x4\nPOP RBX\nRET\n'
p1593
S'53\n48 89 d3\n48 89 f0\n48 89 de\n48 89 c2\ne8 1e 00 00 00\n48 83 3b 00\n75 0d\ne8 23 01 00 00\n48 89 03\nb8 04 00 00 00\n5b\nc3\n'
p1594
S'.text:00000000004052a0\n.text:00000000004052a1\n.text:00000000004052a4\n.text:00000000004052a7\n.text:00000000004052aa\n.text:00000000004052ad\n.text:00000000004052b2\n.text:00000000004052b6\n.text:00000000004052b8\n.text:00000000004052bd\n.text:00000000004052c0\n.text:00000000004052c5\n.text:00000000004052c6\n'
p1595
tp1596
sS'setgroups'
p1597
(S'\n__stdcall setgroups(size_t __n, __gid_t * __groups)\n'
p1598
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint setgroups(size_t __n,__gid_t *__groups)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_setgroups_0060f168)();\u000a  return iVar1;\u000a}\u000a\u000a
p1599
S'JMP qword ptr [0x0060f168]\n'
p1600
S'ff 25 d2 d3 20 00\n'
p1601
S'.plt:0000000000401d90\n'
p1602
tp1603
sS'__errno_location'
p1604
(S'\n__stdcall __errno_location()\n'
p1605
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_0060f040)();\u000a  return piVar1;\u000a}\u000a\u000a
p1606
S'JMP qword ptr [0x0060f040]\n'
p1607
S'ff 25 fa d4 20 00\n'
p1608
S'.plt:0000000000401b40\n'
p1609
tp1610
sS'x2nrealloc'
p1611
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p1612
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p1613
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x00408c6c\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00408c99\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x00408c8a\nTEST RCX,RCX\nJNZ 0x00408c8a\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00408c10\nPUSH RAX\nCALL 0x00408d60\n'
p1614
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p1615
S'.text:0000000000408c40\n.text:0000000000408c43\n.text:0000000000408c46\n.text:0000000000408c49\n.text:0000000000408c4b\n.text:0000000000408c55\n.text:0000000000408c57\n.text:0000000000408c5a\n.text:0000000000408c5d\n.text:0000000000408c5f\n.text:0000000000408c62\n.text:0000000000408c65\n.text:0000000000408c6a\n.text:0000000000408c6c\n.text:0000000000408c6f\n.text:0000000000408c71\n.text:0000000000408c76\n.text:0000000000408c78\n.text:0000000000408c7b\n.text:0000000000408c7d\n.text:0000000000408c84\n.text:0000000000408c87\n.text:0000000000408c8a\n.text:0000000000408c8d\n.text:0000000000408c91\n.text:0000000000408c94\n.text:0000000000408c99\n.text:0000000000408c9a\n'
p1616
tp1617
sS'quotearg_n_options'
p1618
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p1619
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p1620
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401b40\nTEST R12D,R12D\nJS 0x00407ef1\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x0060f3f8]\nCMP dword ptr [0x0060f400],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x00407e0b\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x60f408\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00408c10\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x0060f3f8],R15\nJNZ 0x00407dd2\nMOVUPS XMM0,xmmword ptr [0x0060f408]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x0060f400]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00401d30\nMOV dword ptr [0x0060f400],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00406f60\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x00407e6d\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x00407edb\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x60f5a0\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00407e98\nCALL 0x00401b00\nMOV RDI,R15\nCALL 0x00408ca0\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00406f60\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401b30\n'
p1621
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 e1 9d ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 7e 76 20 00\n44 39 25 7f 76 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 08 f4 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 58 0e 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 33 76 20 00\n75 0b\n0f 10 05 3a 76 20 00\n41 0f 11 07\n8b 05 28 76 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 3d 9f ff ff\n89 1d 07 76 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 a0 f5 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 68 9c ff ff\n4c 89 ff\ne8 00 0e 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 3a 9c ff ff\n'
p1622
S'.text:0000000000407d40\n.text:0000000000407d41\n.text:0000000000407d43\n.text:0000000000407d45\n.text:0000000000407d47\n.text:0000000000407d49\n.text:0000000000407d4a\n.text:0000000000407d4e\n.text:0000000000407d51\n.text:0000000000407d54\n.text:0000000000407d57\n.text:0000000000407d5a\n.text:0000000000407d5f\n.text:0000000000407d62\n.text:0000000000407d68\n.text:0000000000407d6d\n.text:0000000000407d6f\n.text:0000000000407d73\n.text:0000000000407d7a\n.text:0000000000407d81\n.text:0000000000407d86\n.text:0000000000407d8b\n.text:0000000000407d90\n.text:0000000000407d92\n.text:0000000000407d97\n.text:0000000000407d9a\n.text:0000000000407d9d\n.text:0000000000407da3\n.text:0000000000407da5\n.text:0000000000407da8\n.text:0000000000407dac\n.text:0000000000407daf\n.text:0000000000407db3\n.text:0000000000407db8\n.text:0000000000407dbb\n.text:0000000000407dbe\n.text:0000000000407dc5\n.text:0000000000407dc7\n.text:0000000000407dce\n.text:0000000000407dd2\n.text:0000000000407dd8\n.text:0000000000407ddb\n.text:0000000000407ddf\n.text:0000000000407de2\n.text:0000000000407de5\n.text:0000000000407de9\n.text:0000000000407deb\n.text:0000000000407dee\n.text:0000000000407df3\n.text:0000000000407df9\n.text:0000000000407dfc\n.text:0000000000407e01\n.text:0000000000407e06\n.text:0000000000407e0b\n.text:0000000000407e0e\n.text:0000000000407e12\n.text:0000000000407e16\n.text:0000000000407e1b\n.text:0000000000407e1f\n.text:0000000000407e23\n.text:0000000000407e27\n.text:0000000000407e2b\n.text:0000000000407e2f\n.text:0000000000407e34\n.text:0000000000407e37\n.text:0000000000407e3a\n.text:0000000000407e3d\n.text:0000000000407e42\n.text:0000000000407e45\n.text:0000000000407e48\n.text:0000000000407e4b\n.text:0000000000407e4c\n.text:0000000000407e51\n.text:0000000000407e55\n.text:0000000000407e58\n.text:0000000000407e5b\n.text:0000000000407e5d\n.text:0000000000407e62\n.text:0000000000407e66\n.text:0000000000407e6b\n.text:0000000000407e6d\n.text:0000000000407e71\n.text:0000000000407e76\n.text:0000000000407e79\n.text:0000000000407e7c\n.text:0000000000407e81\n.text:0000000000407e86\n.text:0000000000407e89\n.text:0000000000407e8e\n.text:0000000000407e91\n.text:0000000000407e93\n.text:0000000000407e98\n.text:0000000000407e9b\n.text:0000000000407ea0\n.text:0000000000407ea3\n.text:0000000000407ea6\n.text:0000000000407eab\n.text:0000000000407eae\n.text:0000000000407eb2\n.text:0000000000407eb5\n.text:0000000000407eb8\n.text:0000000000407ebd\n.text:0000000000407ec2\n.text:0000000000407ec7\n.text:0000000000407eca\n.text:0000000000407ecd\n.text:0000000000407ece\n.text:0000000000407ed3\n.text:0000000000407ed7\n.text:0000000000407edb\n.text:0000000000407edf\n.text:0000000000407ee2\n.text:0000000000407ee6\n.text:0000000000407ee7\n.text:0000000000407ee9\n.text:0000000000407eeb\n.text:0000000000407eed\n.text:0000000000407eef\n.text:0000000000407ef0\n.text:0000000000407ef1\n'
p1623
tp1624
sS'strcmp'
p1625
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p1626
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_0060f188)();\u000a  return iVar1;\u000a}\u000a\u000a
p1627
S'JMP qword ptr [0x0060f188]\n'
p1628
S'ff 25 b2 d3 20 00\n'
p1629
S'.plt:0000000000401dd0\n'
p1630
tp1631
sS'knuth_morris_pratt'
p1632
(S'\n__stdcall knuth_morris_pratt(uchar * haystack, uchar * needle, size_t needle_len, uchar * * resultp)\n'
p1633
V\u000a_Bool knuth_morris_pratt(uchar *haystack,uchar *needle,size_t needle_len,uchar **resultp)\u000a\u000a{\u000a  uchar uVar1;\u000a  size_t n;\u000a  long lVar2;\u000a  size_t sVar3;\u000a  long lVar4;\u000a  undefined *puVar5;\u000a  ulong uVar6;\u000a  undefined *p;\u000a  uchar *puVar7;\u000a  \u000a  puVar5 = &stack0xffffffffffffffd8;\u000a  if (needle_len >> 0x3d != 0) {\u000a    return false;\u000a  }\u000a  n = needle_len * 8;\u000a  if (n < 0xfb0) {\u000a    uVar6 = n + 0x1f & 0xfffffffffffffff0;\u000a    puVar5 = &stack0xffffffffffffffd8 + -uVar6;\u000a    p = &stack0xffffffffffffffe8 + -uVar6;\u000a  }\u000a  else {\u000a    p = (undefined *)mmalloca(n);\u000a    if (p == (undefined *)0x0) {\u000a      return false;\u000a    }\u000a  }\u000a  *(undefined8 *)(p + 8) = 1;\u000a  if (2 < needle_len) {\u000a    n = 2;\u000a    lVar2 = 0;\u000a    do {\u000a      uVar1 = needle[lVar2];\u000a      while (needle[n - 1] != uVar1) {\u000a        if (lVar2 == 0) {\u000a          lVar2 = 0;\u000a          sVar3 = n;\u000a          goto LAB_00406b09;\u000a        }\u000a        lVar2 = lVar2 - *(long *)(p + lVar2 * 8);\u000a        uVar1 = needle[lVar2];\u000a      }\u000a      lVar2 = lVar2 + 1;\u000a      sVar3 = n - lVar2;\u000aLAB_00406b09:\u000a      *(size_t *)(p + n * 8) = sVar3;\u000a      n = n + 1;\u000a    } while (n != needle_len);\u000a  }\u000a  *resultp = (uchar *)0x0;\u000a  lVar2 = 0;\u000a  puVar7 = haystack;\u000a  do {\u000a    lVar4 = 0;\u000a    while( true ) {\u000a      if (haystack[lVar4] == 0) goto LAB_00406b93;\u000a      if (needle[lVar4 + lVar2] != haystack[lVar4]) break;\u000a      lVar4 = lVar4 + 1;\u000a      if ((lVar2 - needle_len) + lVar4 == 0) {\u000a        *resultp = puVar7;\u000aLAB_00406b93:\u000a        *(undefined8 *)(puVar5 + -8) = 0x406b98;\u000a        freea(p,puVar5[-8]);\u000a        return true;\u000a      }\u000a    }\u000a    if (lVar2 + lVar4 == 0) {\u000a      puVar7 = puVar7 + 1;\u000a      haystack = haystack + lVar4 + 1;\u000a      lVar2 = 0;\u000a    }\u000a    else {\u000a      haystack = haystack + lVar4;\u000a      puVar7 = puVar7 + *(long *)(p + lVar4 * 8 + lVar2 * 8);\u000a      lVar2 = (lVar2 - *(long *)(p + lVar4 * 8 + lVar2 * 8)) + lVar4;\u000a    }\u000a  } while( true );\u000a}\u000a\u000a
p1634
S'PUSH RBP\nMOV RBP,RSP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14,RCX\nMOV R12,RDX\nMOV RBX,RSI\nMOV R15,RDI\nMOV RAX,R12\nSHR RAX,0x3d\nJZ 0x00406a77\nXOR EAX,EAX\nJMP 0x00406b9a\nLEA RDI,[R12*0x8]\nCMP RDI,0xfaf\nJA 0x00406aa6\nMOV RAX,RSP\nADD RDI,0x1f\nAND RDI,-0x10\nMOV RCX,RAX\nSUB RCX,RDI\nMOV RSP,RCX\nNEG RDI\nLEA RDI,[RAX + RDI*0x1 + 0x10]\nJMP 0x00406ab7\nCALL 0x00409c80\nMOV RDI,RAX\nTEST RDI,RDI\nJZ 0x00406ba7\nMOV qword ptr [RDI + 0x8],0x1\nCMP R12,0x3\nJC 0x00406b15\nMOV EAX,0x2\nXOR ECX,ECX\nNOP dword ptr [RAX]\nMOV DL,byte ptr [RBX + RAX*0x1 + -0x1]\nCMP DL,byte ptr [RBX + RCX*0x1]\nJNZ 0x00406ae9\nJMP 0x00406b00\nSUB RCX,qword ptr [RDI + RCX*0x8]\nCMP DL,byte ptr [RBX + RCX*0x1]\nJZ 0x00406b00\nTEST RCX,RCX\nJNZ 0x00406ae0\nXOR ECX,ECX\nMOV RDX,RAX\nJMP 0x00406b09\nINC RCX\nMOV RDX,RAX\nSUB RDX,RCX\nMOV qword ptr [RDI + RAX*0x8],RDX\nINC RAX\nCMP RAX,R12\nJNZ 0x00406ad0\nMOV qword ptr [R14],0x0\nNEG R12\nXOR R8D,R8D\nMOV R9,R15\nJMP 0x00406b69\nINC RDX\nMOV RAX,RSI\nADD RAX,RDX\nJNZ 0x00406b80\nJMP 0x00406b90\nMOV RAX,R8\nADD RAX,RDX\nJNZ 0x00406b55\nINC R15\nLEA R9,[R9 + RDX*0x1 + 0x1]\nXOR R8D,R8D\nJMP 0x00406b69\nADD R9,RDX\nLEA RAX,[RDI + R8*0x8]\nMOV RAX,qword ptr [RAX + RDX*0x8]\nADD R15,RAX\nSUB R8,RAX\nADD R8,RDX\nLEA RSI,[R12 + R8*0x1]\nLEA RCX,[RBX + R8*0x1]\nXOR EDX,EDX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [R9 + RDX*0x1]\nTEST AL,AL\nJZ 0x00406b93\nCMP byte ptr [RCX + RDX*0x1],AL\nJZ 0x00406b30\nJMP 0x00406b40\nMOV qword ptr [R14],R15\nCALL 0x00409d00\nMOV AL,0x1\nLEA RSP,[RBP + -0x20]\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EAX,EAX\nJMP 0x00406b9a\n'
p1635
S'55\n48 89 e5\n41 57\n41 56\n41 54\n53\n49 89 ce\n49 89 d4\n48 89 f3\n49 89 ff\n4c 89 e0\n48 c1 e8 3d\n74 07\n31 c0\ne9 23 01 00 00\n4a 8d 3c e5 00 00 00 00\n48 81 ff af 0f 00 00\n77 1e\n48 89 e0\n48 83 c7 1f\n48 83 e7 f0\n48 89 c1\n48 29 f9\n48 89 cc\n48 f7 df\n48 8d 7c 38 10\neb 11\ne8 d5 31 00 00\n48 89 c7\n48 85 ff\n0f 84 f0 00 00 00\n48 c7 47 08 01 00 00 00\n49 83 fc 03\n72 50\nb8 02 00 00 00\n31 c9\n0f 1f 40 00\n8a 54 03 ff\n3a 14 0b\n75 10\neb 25\n48 2b 0c cf\n3a 14 0b\n74 17\n48 85 c9\n75 f2\n31 c9\n48 89 c2\neb 14\n48 ff c1\n48 89 c2\n48 29 ca\n48 89 14 c7\n48 ff c0\n4c 39 e0\n75 bb\n49 c7 06 00 00 00 00\n49 f7 dc\n45 31 c0\n4d 89 f9\neb 42\n48 ff c2\n48 89 f0\n48 01 d0\n75 45\neb 53\n4c 89 c0\n48 01 d0\n75 0d\n49 ff c7\n4d 8d 4c 11 01\n45 31 c0\neb 14\n49 01 d1\n4a 8d 04 c7\n48 8b 04 d0\n49 01 c7\n49 29 c0\n49 01 d0\n4b 8d 34 04\n4a 8d 0c 03\n31 d2\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n41 0f b6 04 11\n84 c0\n74 0a\n38 04 11\n74 a2\neb b0\n4d 89 3e\ne8 68 31 00 00\nb0 01\n48 8d 65 e0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n31 c0\neb ef\n'
p1636
S'.text:0000000000406a50\n.text:0000000000406a51\n.text:0000000000406a54\n.text:0000000000406a56\n.text:0000000000406a58\n.text:0000000000406a5a\n.text:0000000000406a5b\n.text:0000000000406a5e\n.text:0000000000406a61\n.text:0000000000406a64\n.text:0000000000406a67\n.text:0000000000406a6a\n.text:0000000000406a6e\n.text:0000000000406a70\n.text:0000000000406a72\n.text:0000000000406a77\n.text:0000000000406a7f\n.text:0000000000406a86\n.text:0000000000406a88\n.text:0000000000406a8b\n.text:0000000000406a8f\n.text:0000000000406a93\n.text:0000000000406a96\n.text:0000000000406a99\n.text:0000000000406a9c\n.text:0000000000406a9f\n.text:0000000000406aa4\n.text:0000000000406aa6\n.text:0000000000406aab\n.text:0000000000406aae\n.text:0000000000406ab1\n.text:0000000000406ab7\n.text:0000000000406abf\n.text:0000000000406ac3\n.text:0000000000406ac5\n.text:0000000000406aca\n.text:0000000000406acc\n.text:0000000000406ad0\n.text:0000000000406ad4\n.text:0000000000406ad7\n.text:0000000000406ad9\n.text:0000000000406ae0\n.text:0000000000406ae4\n.text:0000000000406ae7\n.text:0000000000406ae9\n.text:0000000000406aec\n.text:0000000000406aee\n.text:0000000000406af0\n.text:0000000000406af3\n.text:0000000000406b00\n.text:0000000000406b03\n.text:0000000000406b06\n.text:0000000000406b09\n.text:0000000000406b0d\n.text:0000000000406b10\n.text:0000000000406b13\n.text:0000000000406b15\n.text:0000000000406b1c\n.text:0000000000406b1f\n.text:0000000000406b22\n.text:0000000000406b25\n.text:0000000000406b30\n.text:0000000000406b33\n.text:0000000000406b36\n.text:0000000000406b39\n.text:0000000000406b3b\n.text:0000000000406b40\n.text:0000000000406b43\n.text:0000000000406b46\n.text:0000000000406b48\n.text:0000000000406b4b\n.text:0000000000406b50\n.text:0000000000406b53\n.text:0000000000406b55\n.text:0000000000406b58\n.text:0000000000406b5c\n.text:0000000000406b60\n.text:0000000000406b63\n.text:0000000000406b66\n.text:0000000000406b69\n.text:0000000000406b6d\n.text:0000000000406b71\n.text:0000000000406b73\n.text:0000000000406b80\n.text:0000000000406b85\n.text:0000000000406b87\n.text:0000000000406b89\n.text:0000000000406b8c\n.text:0000000000406b8e\n.text:0000000000406b90\n.text:0000000000406b93\n.text:0000000000406b98\n.text:0000000000406b9a\n.text:0000000000406b9e\n.text:0000000000406b9f\n.text:0000000000406ba1\n.text:0000000000406ba3\n.text:0000000000406ba5\n.text:0000000000406ba6\n.text:0000000000406ba7\n.text:0000000000406ba9\n'
p1637
tp1638
sS'set_custom_quoting'
p1639
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p1640
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1641
S'TEST RDI,RDI\nMOV EAX,0x60f560\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00406ed5\nTEST RDX,RDX\nJZ 0x00406ed5\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00401b30\n'
p1642
S'48 85 ff\nb8 60 f5 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 55 ac ff ff\n'
p1643
S'.text:0000000000406eb0\n.text:0000000000406eb3\n.text:0000000000406eb8\n.text:0000000000406ebc\n.text:0000000000406ec2\n.text:0000000000406ec5\n.text:0000000000406ec7\n.text:0000000000406eca\n.text:0000000000406ecc\n.text:0000000000406ed0\n.text:0000000000406ed4\n.text:0000000000406ed5\n.text:0000000000406ed6\n'
p1644
tp1645
sS'c_isalpha'
p1646
(S'\n__stdcall c_isalpha()\n'
p1647
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1648
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x0040979b\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1649
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1650
S'.text:0000000000409780\n.text:0000000000409783\n.text:0000000000409786\n.text:0000000000409788\n.text:0000000000409792\n.text:0000000000409794\n.text:0000000000409797\n.text:000000000040979a\n.text:000000000040979b\n.text:000000000040979d\n'
p1651
tp1652
sS'quotearg_custom_mem'
p1653
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p1654
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1655
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00408150\n'
p1656
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p1657
S'.text:00000000004081e0\n.text:00000000004081e3\n.text:00000000004081e6\n.text:00000000004081e9\n.text:00000000004081ec\n.text:00000000004081ee\n.text:00000000004081f1\n'
p1658
tp1659
sS'dcngettext'
p1660
(S'\n__stdcall dcngettext()\n'
p1661
V\u000avoid dcngettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcngettext_0060f278)();\u000a  return;\u000a}\u000a\u000a
p1662
S'JMP qword ptr [0x0060f278]\n'
p1663
S'ff 25 c2 d2 20 00\n'
p1664
S'.plt:0000000000401fb0\n'
p1665
tp1666
sS'geteuid'
p1667
(S'\n__stdcall geteuid()\n'
p1668
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__uid_t geteuid(void)\u000a\u000a{\u000a  __uid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_geteuid_0060f140)();\u000a  return _Var1;\u000a}\u000a\u000a
p1669
S'JMP qword ptr [0x0060f140]\n'
p1670
S'ff 25 fa d3 20 00\n'
p1671
S'.plt:0000000000401d40\n'
p1672
tp1673
sS're_compile_pattern'
p1674
(S'\n__stdcall re_compile_pattern(char * __pattern, size_t __length, re_pattern_buffer * __buffer)\n'
p1675
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * re_compile_pattern(char *__pattern,size_t __length,re_pattern_buffer *__buffer)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_re_compile_pattern_0060f2c8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1676
S'JMP qword ptr [0x0060f2c8]\n'
p1677
S'ff 25 72 d2 20 00\n'
p1678
S'.plt:0000000000402050\n'
p1679
tp1680
sS'memset'
p1681
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p1682
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_0060f138)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1683
S'JMP qword ptr [0x0060f138]\n'
p1684
S'ff 25 02 d4 20 00\n'
p1685
S'.plt:0000000000401d30\n'
p1686
tp1687
sS'getc_unlocked'
p1688
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p1689
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_0060f070)();\u000a  return iVar1;\u000a}\u000a\u000a
p1690
S'JMP qword ptr [0x0060f070]\n'
p1691
S'ff 25 ca d4 20 00\n'
p1692
S'.plt:0000000000401ba0\n'
p1693
tp1694
sS'memmove'
p1695
(S'\n__stdcall memmove(void * __dest, void * __src, size_t __n)\n'
p1696
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memmove(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memmove_0060f250)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1697
S'JMP qword ptr [0x0060f250]\n'
p1698
S'ff 25 ea d2 20 00\n'
p1699
S'.plt:0000000000401f60\n'
p1700
tp1701
sS'c_isascii'
p1702
(S'\n__stdcall c_isascii()\n'
p1703
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p1704
S'CMP EDI,0x80\nSETC AL\nRET\n'
p1705
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p1706
S'.text:00000000004097a0\n.text:00000000004097a6\n.text:00000000004097a9\n'
p1707
tp1708
sS'__xargmatch_internal'
p1709
(S'\n__stdcall __xargmatch_internal(char * context, char * arg, char * * arglist, char * vallist, size_t valsize, argmatch_exit_fn * exit_fn)\n'
p1710
V\u000aptrdiff_t __xargmatch_internal\u000a                    (char *context,char *arg,char **arglist,char *vallist,size_t valsize,\u000a                    void (*exit_fn)())\u000a\u000a{\u000a  ptrdiff_t problem;\u000a  \u000a  problem = argmatch(arg,arglist,vallist,valsize);\u000a  if (problem < 0) {\u000a    argmatch_invalid(context,arg,problem);\u000a    argmatch_valid(arglist,vallist,valsize);\u000a    (*exit_fn)();\u000a    problem = -1;\u000a  }\u000a  return problem;\u000a}\u000a\u000a
p1711
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,R9\nMOV R15,R8\nMOV R12,RCX\nMOV R13,RDX\nMOV RBX,RSI\nMOV RBP,RDI\nMOV RDI,RBX\nMOV RSI,R13\nMOV RDX,R12\nMOV RCX,R15\nCALL 0x00409410\nTEST RAX,RAX\nJNS 0x004096c9\nMOV RDI,RBP\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x00409510\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nCALL 0x00409580\nCALL R14\nMOV RAX,-0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1712
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 ce\n4d 89 c7\n49 89 cc\n49 89 d5\n48 89 f3\n48 89 fd\n48 89 df\n4c 89 ee\n4c 89 e2\n4c 89 f9\ne8 72 fd ff ff\n48 85 c0\n79 26\n48 89 ef\n48 89 de\n48 89 c2\ne8 5f fe ff ff\n4c 89 ef\n4c 89 e6\n4c 89 fa\ne8 c1 fe ff ff\n41 ff d6\n48 c7 c0 ff ff ff ff\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1713
S'.text:0000000000409670\n.text:0000000000409671\n.text:0000000000409673\n.text:0000000000409675\n.text:0000000000409677\n.text:0000000000409679\n.text:000000000040967a\n.text:000000000040967b\n.text:000000000040967e\n.text:0000000000409681\n.text:0000000000409684\n.text:0000000000409687\n.text:000000000040968a\n.text:000000000040968d\n.text:0000000000409690\n.text:0000000000409693\n.text:0000000000409696\n.text:0000000000409699\n.text:000000000040969e\n.text:00000000004096a1\n.text:00000000004096a3\n.text:00000000004096a6\n.text:00000000004096a9\n.text:00000000004096ac\n.text:00000000004096b1\n.text:00000000004096b4\n.text:00000000004096b7\n.text:00000000004096ba\n.text:00000000004096bf\n.text:00000000004096c2\n.text:00000000004096c9\n.text:00000000004096cd\n.text:00000000004096ce\n.text:00000000004096d0\n.text:00000000004096d2\n.text:00000000004096d4\n.text:00000000004096d6\n.text:00000000004096d7\n'
p1714
tp1715
sS'visit_substring_match_nocasefold_narrow'
p1716
(S'\n__stdcall visit_substring_match_nocasefold_narrow(process_data * procdata, void * context)\n'
p1717
V\u000aint visit_substring_match_nocasefold_narrow(process_data *procdata,void *context)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = __ctype_get_mb_cur_max();\u000a  if (sVar1 == 1) {\u000a    pcVar2 = strstr(procdata->munged_filename,(char *)context);\u000a    return (int)((uint)(pcVar2 == (char *)0x0) + 2 + (uint)(pcVar2 == (char *)0x0));\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("MB_CUR_MAX == 1","locate.c",0x2c7,\u000a                "int visit_substring_match_nocasefold_narrow(struct process_data *, void *)");\u000a}\u000a\u000a
p1718
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nCALL 0x00401c40\nCMP RAX,0x1\nJNZ 0x00403a65\nMOV RDI,qword ptr [RBX + 0x20]\nMOV RSI,R14\nCALL 0x00402090\nXOR ECX,ECX\nTEST RAX,RAX\nSETZ CL\nLEA EAX,[RCX + RCX*0x1 + 0x2]\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV EDI,0x40b027\nMOV ESI,0x40a797\nMOV EDX,0x2c7\nMOV ECX,0x40b080\nCALL 0x00401d00\n'
p1719
S'41 56\n53\n50\n49 89 f6\n48 89 fb\ne8 01 e2 ff ff\n48 83 f8 01\n75 20\n48 8b 7b 20\n4c 89 f6\ne8 3f e6 ff ff\n31 c9\n48 85 c0\n0f 94 c1\n8d 44 09 02\n48 83 c4 08\n5b\n41 5e\nc3\nbf 27 b0 40 00\nbe 97 a7 40 00\nba c7 02 00 00\nb9 80 b0 40 00\ne8 82 e2 ff ff\n'
p1720
S'.text:0000000000403a30\n.text:0000000000403a32\n.text:0000000000403a33\n.text:0000000000403a34\n.text:0000000000403a37\n.text:0000000000403a3a\n.text:0000000000403a3f\n.text:0000000000403a43\n.text:0000000000403a45\n.text:0000000000403a49\n.text:0000000000403a4c\n.text:0000000000403a51\n.text:0000000000403a53\n.text:0000000000403a56\n.text:0000000000403a59\n.text:0000000000403a5d\n.text:0000000000403a61\n.text:0000000000403a62\n.text:0000000000403a64\n.text:0000000000403a65\n.text:0000000000403a6a\n.text:0000000000403a6f\n.text:0000000000403a74\n.text:0000000000403a79\n'
p1721
tp1722
sS'__ctype_b_loc'
p1723
(S'\n__stdcall __ctype_b_loc()\n'
p1724
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_0060f2f8)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p1725
S'JMP qword ptr [0x0060f2f8]\n'
p1726
S'ff 25 42 d2 20 00\n'
p1727
S'.plt:00000000004020b0\n'
p1728
tp1729
sS'dolocate'
p1730
(S'\n__stdcall dolocate(char * * argv)\n'
p1731
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000aint dolocate(char **argv)\u000a\u000a{\u000a  bool bVar1;\u000a  bool bVar2;\u000a  _Bool _Var3;\u000a  int iVar4;\u000a  undefined4 uVar5;\u000a  int __fd;\u000a  strtol_error sVar6;\u000a  uint __fd_00;\u000a  uint *puVar7;\u000a  undefined8 uVar8;\u000a  char *argv0;\u000a  undefined4 extraout_var;\u000a  time_t tVar9;\u000a  undefined8 uVar10;\u000a  undefined8 uVar11;\u000a  FILE *__stream;\u000a  ulong uVar12;\u000a  int __fd_01;\u000a  char *pcVar13;\u000a  char **in_RSI;\u000a  double dVar14;\u000a  timespec tVar15;\u000a  char *end;\u000a  undefined8 uVar16;\u000a  int local_164;\u000a  size_t local_150;\u000a  double local_148;\u000a  undefined8 local_140;\u000a  long local_138;\u000a  uint local_130;\u000a  int local_12c;\u000a  ulong local_128;\u000a  undefined8 local_120;\u000a  undefined8 local_118;\u000a  undefined8 local_110;\u000a  undefined8 local_108;\u000a  undefined local_100 [16];\u000a  char *local_f0;\u000a  char *local_e8;\u000a  undefined8 local_e0;\u000a  char *local_d0;\u000a  time_t local_c8;\u000a  stat local_c0;\u000a  \u000a  local_12c = (int)argv;\u000a  argv0 = *in_RSI;\u000a  if (argv0 == (char *)0x0) {\u000a    argv0 = "locate";\u000a  }\u000a  set_program_name(argv0);\u000a  setlocale(6,\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  bindtextdomain(0x40b3e5,"/usr/local/share/locale");\u000a  textdomain();\u000a  quote_opts = clone_quoting_options((quoting_options *)0x0);\u000a  iVar4 = atexit(close_stdout);\u000a  if ((iVar4 != 0) || (iVar4 = atexit(cleanup_quote_opts), iVar4 != 0)) {\u000a    puVar7 = (uint *)__errno_location();\u000a    __fd_00 = *puVar7;\u000a    uVar8 = dcgettext(0,"The atexit library function failed",5);\u000a    error(1,(ulong)__fd_00,uVar8,uVar8);\u000a  }\u000a  limits.limit = 0;\u000a  limits.items_accepted = 0;\u000a  print_quoted_filename = 1;\u000a  argv0 = getenv("LOCATE_PATH");\u000a  check_existence = ACCEPT_EITHER;\u000a  bVar1 = false;\u000a  local_140 = 0;\u000a  uVar8 = 0;\u000a  local_108 = 0;\u000a  local_120 = 0;\u000a  bVar2 = false;\u000a  local_110 = 0;\u000a  local_118 = 0;\u000aswitchD_004024c2_caseD_6d:\u000a  local_100._0_8_ = CONCAT44(local_100._4_4_,0xffffffff);\u000a  uVar5 = getopt_long();\u000a  switch(uVar5) {\u000a  default:\u000a    usage();\u000a  case 0x68:\u000a    sVar6 = usage();\u000aLAB_00402ae0:\u000a    xstrtol_fatal((option *)(ulong)sVar6,(char *)(local_100._0_8_ & 0xffffffff));\u000aLAB_00402afa:\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("optarg != NULL","locate.c",0x667,"int dolocate(int, char **, int)");\u000a  case 0x30:\u000a    separator = 1;\u000a    print_quoted_filename = 0;\u000a    goto switchD_004024c2_caseD_6d;\u000a  case 0x41:\u000a    local_110 = 1;\u000a    goto switchD_004024c2_caseD_6d;\u000a  case 0x45:\u000a    check_existence = ACCEPT_NON_EXISTING;\u000a    goto switchD_004024c2_caseD_6d;\u000a  case 0x48:\u000a  case 0x50:\u000a    follow_symlinks = 1;\u000a    goto switchD_004024c2_caseD_6d;\u000a  case 0x4c:\u000a    follow_symlinks = 0;\u000a    goto switchD_004024c2_caseD_6d;\u000a  case 0x53:\u000a    bVar2 = true;\u000a    goto switchD_004024c2_caseD_6d;\u000a  case 0x62:\u000a    local_140 = 1;\u000a    goto switchD_004024c2_caseD_6d;\u000a  case 99:\u000a    bVar1 = true;\u000a    goto switchD_004024c2_caseD_6d;\u000a  case 100:\u000a    argv0 = optarg;\u000a    if (optarg == (char *)0x0) goto LAB_00402afa;\u000a    goto switchD_004024c2_caseD_6d;\u000a  case 0x65:\u000a    check_existence = ACCEPT_EXISTING;\u000a    goto switchD_004024c2_caseD_6d;\u000a  case 0x69:\u000a    local_118 = 1;\u000a    goto switchD_004024c2_caseD_6d;\u000a  case 0x6c:\u000a    local_c0.st_dev = optarg;\u000a    sVar6 = xstrtoumax(optarg,(char **)&local_c0,(uintmax_t *)0xa,(char *)&limits);\u000a    if (sVar6 != LONGINT_OK) goto LAB_00402ae0;\u000a    uVar8 = 1;\u000a    goto switchD_004024c2_caseD_6d;\u000a  case 0x70:\u000a    goto switchD_004024c2_caseD_6d;\u000a  case 0x72:\u000a    local_108 = 1;\u000a    goto switchD_004024c2_caseD_6d;\u000a  case 0x76:\u000a    display_findutils_version("locate");\u000a    return 0;\u000a  case 0x77:\u000a    local_140 = 0;\u000a    goto switchD_004024c2_caseD_6d;\u000a  case 0x80:\u000a    iVar4 = get_regex_type(optarg);\u000a    local_120 = CONCAT44(extraout_var,iVar4);\u000a    goto switchD_004024c2_caseD_6d;\u000a  case 0x81:\u000a    goto switchD_004024c2_caseD_81;\u000a  case 0xffffffff:\u000a    local_164 = __fd_01;\u000a    if ((-1 < __fd_01) && (local_164 = __fd_01, argv0 != (char *)0x0)) {\u000a      close(__fd_01);\u000a      local_164 = -1;\u000a    }\u000a    if (bVar2) {\u000a      if (optind == local_12c) {\u000a        uVar8 = 0;\u000a      }\u000a    }\u000a    else {\u000a      if ((optind == local_12c) && (!bVar1)) {\u000a        uVar8 = dcgettext(0,"pattern argument expected",5);\u000a        error(0,0,uVar8,uVar8);\u000a        argv0 = (char *)0x1;\u000a        usage();\u000a        __fd_00 = open(argv0,0);\u000a        if ((-1 < (int)__fd_00) && (iVar4 = rpl_fcntl((ulong)__fd_00,2,1), iVar4 != 0)) {\u000a          close(__fd_00);\u000a          __fd_00 = 0xffffffff;\u000a        }\u000a        return (int)__fd_00;\u000a      }\u000a    }\u000a    iVar4 = isatty(1);\u000a    stdout_is_a_tty = (_Bool)(iVar4 == 1);\u000a    if (argv0 != (char *)0x0) {\u000a      splitstring(argv0,":",(size_t *)0x1,&local_150);\u000a    }\u000a    local_128 = 0;\u000a    uVar12 = 0;\u000a    local_e8 = argv0;\u000a    local_e0 = uVar8;\u000a  }\u000a  do {\u000a    __fd = local_164;\u000a    iVar4 = (int)uVar8;\u000a    if ((iVar4 != 0) && (limits.limit <= limits.items_accepted)) break;\u000a    statistics.newline_count = 0;\u000a    statistics.highbit_filename_count = 0;\u000a    statistics.total_filename_length = 0;\u000a    statistics.whitespace_count = 0;\u000a    statistics.compressed_bytes = 0;\u000a    statistics.total_filename_count = 0;\u000a    if (argv0 == (char *)0x0) {\u000a      if (local_164 == -1) break;\u000a      pcVar13 = (char *)0x0;\u000a      local_164 = -1;\u000a    }\u000a    else {\u000a      if (local_138 == 0) {\u000a        argv0 = "/usr/local/var/locatedb";\u000a        pcVar13 = (char *)0x0;\u000a      }\u000a      else {\u000a        if (local_138 == 1) {\u000a          if (argv0[local_150] == '-') {\u000a            if ((local_128 & 1) != 0) {\u000a              uVar8 = dcgettext(0,"warning: the locate database can only be read from stdin once.",5\u000a                               );\u000a              error(0,0,uVar8,uVar8);\u000a              return 0;\u000a            }\u000a            __fd = 0;\u000a            local_128 = CONCAT71((int7)(local_150 >> 8),1);\u000a            pcVar13 = (char *)0x0;\u000a            goto LAB_004027d7;\u000a          }\u000a          if (argv0[local_150] == '.') {\u000a            pcVar13 = (char *)0x0;\u000a            argv0 = "/usr/local/var/locatedb";\u000a            goto LAB_004027c3;\u000a          }\u000a        }\u000a        pcVar13 = (char *)__strndup(argv0 + local_150,local_138);\u000a        argv0 = pcVar13;\u000a      }\u000aLAB_004027c3:\u000a      __fd = opendb(argv0);\u000a      if (__fd < 0) goto LAB_00402a6e;\u000a    }\u000aLAB_004027d7:\u000a    iVar4 = fstat(__fd,(stat *)&local_c0);\u000a    if (iVar4 == 0) {\u000a      local_d0 = pcVar13;\u000a      tVar15 = get_stat_mtime(&local_c0);\u000a      local_100 = tVar15;\u000a      tVar9 = time(&local_c8);\u000a      if (tVar9 == -1) {\u000a        puVar7 = (uint *)__errno_location();\u000a        __fd_00 = *puVar7;\u000a        uVar8 = dcgettext(0,"time system call failed",5);\u000a        error(0,(ulong)__fd_00,uVar8,uVar8);\u000a      }\u000a      else {\u000a        dVar14 = difftime(local_c8,local_c0.st_mtim.tv_sec);\u000a        if ((double)(ulong)(warn_number_units * 0x15180) < dVar14) {\u000a          local_148 = dVar14;\u000a          uVar8 = dcgettext(0,"warning: database %s is more than %d %s old (actual age is %.1f %s)",\u000a                            5);\u000a          local_f0 = quotearg_n_style((char *)0x0);\u000a          local_130 = warn_number_units;\u000a          uVar10 = dcgettext(0,"days",5);\u000a          local_148 = local_148 / _DAT_00409f08;\u000a          uVar16 = 0x402900;\u000a          uVar11 = dcgettext(0,"days",5);\u000a          error(local_148,0,0,uVar8,local_f0,(ulong)local_130,uVar10,uVar11,uVar16);\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      local_d0 = pcVar13;\u000a      puVar7 = (uint *)__errno_location();\u000a      __fd_00 = *puVar7;\u000a      argv0 = quotearg_n_style((char *)0x0);\u000a      error(0,(ulong)__fd_00,&DAT_0040c628,argv0);\u000a    }\u000a    __stream = fdopen(__fd,"r");\u000a    uVar8 = local_e0;\u000a    if (__stream == (FILE *)0x0) {\u000aLAB_00402a6e:\u000a      puVar7 = (uint *)__errno_location();\u000a      __fd_00 = *puVar7;\u000a      argv0 = quotearg_n_style((char *)0x0);\u000a      error(0,(ulong)__fd_00,&DAT_0040c628,argv0);\u000a      return 0;\u000a    }\u000a    iVar4 = (int)local_e0;\u000a    uVar12 = search_one_database((locate_limits *)(ulong)(uint)(local_12c - optind));\u000a    __fd = fclose(__stream);\u000a    if (__fd == -1) goto LAB_00402a6e;\u000a    if (local_d0 != (char *)0x0) {\u000a      free(local_d0);\u000a    }\u000a    argv0 = local_e8;\u000a    if (local_e8 == (char *)0x0) break;\u000a    _Var3 = splitstring(local_e8,":",(size_t *)0x0,&local_150);\u000a  } while (_Var3 != false);\u000a  if (bVar1) {\u000a    printf("%ld\u005cn",uVar12);\u000a  }\u000a  __fd_00 = 0;\u000a  if (uVar12 == 0) {\u000a    __fd_00 = (uint)((limits.limit != 0 || iVar4 == 0) && !bVar2);\u000a  }\u000a  return (int)__fd_00;\u000aswitchD_004024c2_caseD_81:\u000a  set_max_db_age(optarg);\u000a  goto switchD_004024c2_caseD_6d;\u000a}\u000a\u000a
p1732
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x138\nMOV dword ptr [RSP + 0x4],EDX\nMOV R12,RSI\nMOV R14D,EDI\nMOV RDI,qword ptr [R12]\nTEST RDI,RDI\nJNZ 0x00402379\nMOV EDI,0x40accb\nCALL 0x00406d40\nMOV EDI,0x6\nMOV ESI,0x40c0f9\nCALL 0x00401f40\nMOV EDI,0x40b3e5\nMOV ESI,0x40a72c\nCALL 0x00401c20\nMOV EDI,0x40b3e5\nCALL 0x00401c00\nXOR EDI,EDI\nCALL 0x00406df0\nMOV qword ptr [0x0060f4c0],RAX\nMOV EDI,0x404a00\nCALL 0x00409e90\nTEST EAX,EAX\nJNZ 0x004023d0\nMOV EDI,0x402b80\nCALL 0x00409e90\nTEST EAX,EAX\nJZ 0x004023fc\nCALL 0x00401b40\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a744\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401f70\nXORPD XMM0,XMM0\nMOVUPD xmmword ptr [0x0060f4c8],XMM0\nMOV byte ptr [0x0060f4d8],0x1\nMOV EDI,0x40a767\nCALL 0x00401af0\nMOV RBP,RAX\nMOV dword ptr [0x0060f4b0],0x0\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nLEA R13,[0xa8 + RSP]\nMOV dword ptr [RSP],0x0\nMOV EAX,0x0\nMOV qword ptr [RSP + 0x28],RAX\nMOV R15D,0x0\nMOV EAX,0x0\nMOV qword ptr [RSP + 0x60],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x48],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x58],RAX\nXOR EAX,EAX\nJMP 0x00402475\nMOV EAX,0x1\nMOV qword ptr [RSP + 0x50],RAX\nJMP 0x00402490\nMOV byte ptr [0x0060f4e0],0x1\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV dword ptr [RSP + 0x68],0xffffffff\nMOV EDX,0x40a773\nMOV ECX,0x40a360\nMOV EDI,R14D\nMOV RSI,R12\nLEA R8,[RSP + 0x68]\nCALL 0x00401c80\nMOV EBX,EAX\nLEA EAX,[RBX + 0x1]\nCMP EAX,0x82\nJA 0x00402acf\nJMP qword ptr [0x409f20 + RAX*0x8]\nMOV byte ptr [0x0060f4dc],0x1\nMOV byte ptr [0x0060f4d8],0x0\nJMP 0x00402490\nMOV RDI,qword ptr [0x0060f478]\nMOV qword ptr [0xa8 + RSP],RDI\nMOV EDX,0xa\nMOV ECX,0x60f4c8\nXOR R8D,R8D\nMOV RSI,R13\nCALL 0x00408e40\nTEST EAX,EAX\nJNZ 0x00402ae0\nMOV R15D,0x1\nJMP 0x00402490\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x28],RAX\nJMP 0x00402490\nMOV EAX,0x1\nMOV qword ptr [RSP + 0x58],RAX\nJMP 0x00402490\nMOV dword ptr [0x0060f4b0],0x2\nJMP 0x00402490\nMOV byte ptr [0x0060f4e0],0x0\nJMP 0x00402490\nMOV EAX,0x1\nMOV qword ptr [RSP + 0x8],RAX\nJMP 0x00402490\nMOV EAX,0x1\nMOV qword ptr [RSP + 0x28],RAX\nJMP 0x00402490\nMOV dword ptr [RSP],0x1\nJMP 0x00402490\nMOV RBP,qword ptr [0x0060f478]\nTEST RBP,RBP\nJNZ 0x00402490\nJMP 0x00402afa\nMOV dword ptr [0x0060f4b0],0x1\nJMP 0x00402490\nMOV EAX,0x1\nMOV qword ptr [RSP + 0x10],RAX\nJMP 0x00402490\nMOV EAX,0x1\nMOV qword ptr [RSP + 0x60],RAX\nJMP 0x00402490\nMOV RDI,qword ptr [0x0060f478]\nCALL 0x00404760\nMOV qword ptr [RSP + 0x48],RAX\nJMP 0x00402490\nMOV RDI,qword ptr [0x0060f478]\nCALL 0x00402c20\nJMP 0x00402490\nMOV EDI,dword ptr [RSP + 0x4]\nTEST EDI,EDI\nJS 0x004025f0\nTEST RBP,RBP\nJZ 0x004025f0\nCALL 0x00401d80\nMOV dword ptr [RSP + 0x4],0xffffffff\nMOV EDX,dword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV EAX,ECX\nOR EAX,EDX\nMOV EAX,0x1\nMOV RSI,qword ptr [RSP + 0x10]\nCMOVZ ESI,EAX\nMOV qword ptr [RSP + 0x10],RSI\nTEST ECX,ECX\nJZ 0x00402630\nXOR EAX,EAX\nCMP dword ptr [0x0060f470],R14D\nCMOVZ R15D,EAX\nJMP 0x00402646\nMOV EDI,0x40accb\nCALL 0x00404400\nJMP 0x00402a97\nTEST EDX,EDX\nSETZ AL\nCMP dword ptr [0x0060f470],R14D\nJNZ 0x00402646\nTEST AL,AL\nJNZ 0x00402b13\nMOV EDI,0x1\nCALL 0x00401bb0\nCMP EAX,0x1\nSETZ byte ptr [0x0060f4e1]\nTEST RBP,RBP\nJZ 0x0040267b\nLEA RCX,[RSP + 0x18]\nLEA R8,[RSP + 0x30]\nMOV ESI,0x40c61c\nMOV EDX,0x1\nMOV RDI,RBP\nCALL 0x00404920\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x40],RAX\nXOR EBX,EBX\nMOV qword ptr [0x90 + RSP],R12\nMOV dword ptr [RSP + 0x3c],R14D\nMOV qword ptr [0x80 + RSP],RBP\nMOV qword ptr [0x88 + RSP],R15\nNOP dword ptr CS:[RAX + RAX*0x1]\nTEST R15D,R15D\nJZ 0x004026c9\nMOV RAX,qword ptr [0x0060f4c8]\nCMP RAX,qword ptr [0x0060f4d0]\nJBE 0x00402a30\nXORPD XMM0,XMM0\nMOVUPD xmmword ptr [0x0060f508],XMM0\nMOVUPD xmmword ptr [0x0060f4f8],XMM0\nMOVUPD xmmword ptr [0x0060f4e8],XMM0\nTEST RBP,RBP\nJZ 0x00402740\nMOV RAX,qword ptr [RSP + 0x30]\nTEST RAX,RAX\nJZ 0x00402770\nCMP RAX,0x1\nLEA RBX,[0xa8 + RSP]\nJNZ 0x00402790\nMOV RAX,qword ptr [RSP + 0x18]\nCMP byte ptr [RBP + RAX*0x1],0x2d\nJNZ 0x00402797\nTEST byte ptr [RSP + 0x40],0x1\nJNZ 0x00402aab\nXOR R12D,R12D\nMOV AL,0x1\nMOV qword ptr [RSP + 0x40],RAX\nMOV R13D,0x40a819\nXOR EBP,EBP\nJMP 0x004027d7\nMOV EAX,dword ptr [RSP + 0x4]\nCMP EAX,-0x1\nJZ 0x00402a30\nMOV R13,qword ptr [0x0060f4b8]\nMOV R12D,EAX\nXOR EBP,EBP\nMOV dword ptr [RSP + 0x4],0xffffffff\nLEA RBX,[0xa8 + RSP]\nJMP 0x004027d7\nMOV R13D,0x40a676\nXOR EBP,EBP\nLEA RBX,[0xa8 + RSP]\nJMP 0x004027c3\nMOV RDI,qword ptr [RSP + 0x18]\nJMP 0x004027b0\nMOV RDI,qword ptr [RSP + 0x18]\nCMP byte ptr [RBP + RDI*0x1],0x2e\nJNZ 0x004027b0\nMOV R13D,0x40a676\nXOR EBP,EBP\nJMP 0x004027c3\nADD RDI,RBP\nMOV RSI,qword ptr [RSP + 0x30]\nCALL 0x00401de0\nMOV R13,RAX\nMOV RBP,R13\nMOV RDI,R13\nCALL 0x00402b40\nMOV R12D,EAX\nTEST R12D,R12D\nJS 0x00402a6e\nMOV EDI,R12D\nMOV RSI,RBX\nCALL 0x00409ed0\nTEST EAX,EAX\nMOV qword ptr [0x98 + RSP],RBP\nJZ 0x00402830\nCALL 0x00401b40\nMOV EBX,dword ptr [RAX]\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,R13\nCALL 0x00407f30\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40c628\nXOR EAX,EAX\nMOV ESI,EBX\nCALL 0x00401f70\nXOR R15D,R15D\nJMP 0x00402961\nMOV R15,qword ptr [0xd8 + RSP]\nMOV RDI,RBX\nCALL 0x004086a0\nMOV qword ptr [RSP + 0x68],RAX\nMOV qword ptr [RSP + 0x70],RDX\nLEA RDI,[0xa0 + RSP]\nCALL 0x00401e30\nCMP RAX,-0x1\nJZ 0x00402932\nMOV RDI,qword ptr [0xa0 + RSP]\nMOV RSI,qword ptr [0x100 + RSP]\nCALL 0x00401cc0\nIMUL EAX,dword ptr [0x0060f310],0x15180\nCVTSI2SD XMM1,RAX\nUCOMISD XMM0,XMM1\nJBE 0x0040295b\nXOR EDI,EDI\nMOV ESI,0x40a839\nMOV EDX,0x5\nMOVSD qword ptr [RSP + 0x20],XMM0\nCALL 0x00401c30\nMOV R14,RAX\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,R13\nCALL 0x00407f30\nMOV qword ptr [RSP + 0x78],RAX\nMOV EAX,dword ptr [0x0060f310]\nMOV dword ptr [RSP + 0x38],EAX\nXOR EDI,EDI\nMOV ESI,0x40a640\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RBP,RAX\nMOVSD XMM0,qword ptr [RSP + 0x20]\nDIVSD XMM0,qword ptr [0x00409f08]\nMOVSD qword ptr [RSP + 0x20],XMM0\nXOR EDI,EDI\nMOV ESI,0x40a640\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RBX,RAX\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV AL,0x1\nMOV R8D,dword ptr [RSP + 0x40]\nMOV RDX,R14\nMOV RCX,qword ptr [0x80 + RSP]\nMOV R9,RBP\nMOVSD XMM0,qword ptr [RSP + 0x28]\nPUSH RBX\nCALL 0x00401f70\nADD RSP,0x10\nJMP 0x0040295b\nCALL 0x00401b40\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a821\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401f70\nMOV R14D,0x1\nMOV ESI,0x40b3d5\nMOV EDI,R12D\nCALL 0x00401f30\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00402a6e\nMOVSXD RAX,dword ptr [0x0060f470]\nMOV EDI,dword ptr [RSP + 0x3c]\nSUB EDI,EAX\nMOV RCX,qword ptr [0x90 + RSP]\nLEA RSI,[RCX + RAX*0x8]\nTEST R14D,R14D\nMOV R9D,0x0\nLEA RAX,[RSP + 0x68]\nCMOVNZ R9,RAX\nMOV RDX,R13\nMOV RCX,RBP\nMOV R8,R15\nPUSH qword ptr [RSP + 0x48]\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x20]\nMOV R15,qword ptr [0xa8 + RSP]\nPUSH R15\nPUSH qword ptr [RSP + 0x50]\nPUSH qword ptr [RSP + 0x40]\nPUSH qword ptr [0x88 + RSP]\nCALL 0x00402d20\nADD RSP,0x40\nMOV RBX,RAX\nMOV RDI,RBP\nCALL 0x00401c10\nCMP EAX,-0x1\nJZ 0x00402a6e\nMOV RDI,qword ptr [0x98 + RSP]\nTEST RDI,RDI\nJZ 0x00402a02\nCALL 0x00401b00\nMOV RBP,qword ptr [0x80 + RSP]\nTEST RBP,RBP\nJZ 0x00402a30\nMOV ESI,0x40c61c\nXOR EDX,EDX\nMOV RDI,RBP\nLEA RCX,[RSP + 0x18]\nLEA R8,[RSP + 0x30]\nCALL 0x00404920\nTEST AL,AL\nJNZ 0x004026b0\nCMP dword ptr [RSP],0x0\nJZ 0x00402a45\nMOV EDI,0x40a87d\nXOR EAX,EAX\nMOV RSI,RBX\nCALL 0x00401cb0\nXOR EAX,EAX\nTEST RBX,RBX\nJNZ 0x00402a99\nTEST R15D,R15D\nSETZ AL\nCMP dword ptr [RSP + 0x8],0x0\nSETZ CL\nCMP qword ptr [0x0060f4c8],0x0\nSETNZ DL\nOR DL,AL\nAND DL,CL\nMOVZX EAX,DL\nJMP 0x00402a99\nCALL 0x00401b40\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,R13\nCALL 0x00407f30\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40c628\nXOR EAX,EAX\nMOV ESI,EBX\nCALL 0x00401f70\nXOR EAX,EAX\nADD RSP,0x138\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x40a7da\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401f70\nJMP 0x00402a97\nMOV EDI,0x1\nCALL 0x00402b90\nXOR EDI,EDI\nCALL 0x00402b90\nMOV ESI,dword ptr [RSP + 0x68]\nMOV R8,qword ptr [0x0060f478]\nMOVSX EDX,BL\nMOV ECX,0x40a360\nMOV EDI,EAX\nCALL 0x00408d90\nMOV EDI,0x40a788\nMOV ESI,0x40a797\nMOV EDX,0x667\nMOV ECX,0x40a7a0\nCALL 0x00401d00\nXOR EDI,EDI\nMOV ESI,0x40a7c0\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401f70\nMOV EDI,0x1\nCALL 0x00402b90\nNOP\n'
p1733
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 38 01 00 00\n89 54 24 04\n49 89 f4\n41 89 fe\n49 8b 3c 24\n48 85 ff\n75 05\nbf cb ac 40 00\ne8 c2 49 00 00\nbf 06 00 00 00\nbe f9 c0 40 00\ne8 b3 fb ff ff\nbf e5 b3 40 00\nbe 2c a7 40 00\ne8 84 f8 ff ff\nbf e5 b3 40 00\ne8 5a f8 ff ff\n31 ff\ne8 43 4a 00 00\n48 89 05 0c d1 20 00\nbf 00 4a 40 00\ne8 d2 7a 00 00\n85 c0\n75 0e\nbf 80 2b 40 00\ne8 c4 7a 00 00\n85 c0\n74 2c\ne8 6b f7 ff ff\n8b 18\n31 ff\nbe 44 a7 40 00\nba 05 00 00 00\ne8 48 f8 ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ca\ne8 74 fb ff ff\n66 0f 57 c0\n66 0f 11 05 c0 d0 20 00\nc6 05 c9 d0 20 00 01\nbf 67 a7 40 00\ne8 d7 f6 ff ff\n48 89 c5\nc7 05 8a d0 20 00 00 00 00 00\n31 c0\n48 89 44 24 10\n4c 8d ac 24 a8 00 00 00\nc7 04 24 00 00 00 00\nb8 00 00 00 00\n48 89 44 24 28\n41 bf 00 00 00 00\nb8 00 00 00 00\n48 89 44 24 60\n31 c0\n48 89 44 24 48\n31 c0\n48 89 44 24 08\n31 c0\n48 89 44 24 58\n31 c0\neb 06\nb8 01 00 00 00\n48 89 44 24 50\neb 14\nc6 05 5d d0 20 00 01\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\nc7 44 24 68 ff ff ff ff\nba 73 a7 40 00\nb9 60 a3 40 00\n44 89 f7\n4c 89 e6\n4c 8d 44 24 68\ne8 ce f7 ff ff\n89 c3\n8d 43 01\n3d 82 00 00 00\n0f 87 0d 06 00 00\nff 24 c5 20 9f 40 00\nc6 05 0c d0 20 00 01\nc6 05 01 d0 20 00 00\neb b7\n48 8b 3d 98 cf 20 00\n48 89 bc 24 a8 00 00 00\nba 0a 00 00 00\nb9 c8 f4 60 00\n45 31 c0\n4c 89 ee\ne8 43 69 00 00\n85 c0\n0f 85 db 05 00 00\n41 bf 01 00 00 00\neb 83\n31 c0\n48 89 44 24 28\ne9 77 ff ff ff\nb8 01 00 00 00\n48 89 44 24 58\ne9 68 ff ff ff\nc7 05 7e cf 20 00 02 00 00 00\ne9 59 ff ff ff\nc6 05 a2 cf 20 00 00\ne9 4d ff ff ff\nb8 01 00 00 00\n48 89 44 24 08\ne9 3e ff ff ff\nb8 01 00 00 00\n48 89 44 24 28\ne9 2f ff ff ff\nc7 04 24 01 00 00 00\ne9 23 ff ff ff\n48 8b 2d 04 cf 20 00\n48 85 ed\n0f 85 13 ff ff ff\ne9 78 05 00 00\nc7 05 24 cf 20 00 01 00 00 00\ne9 ff fe ff ff\nb8 01 00 00 00\n48 89 44 24 10\ne9 f0 fe ff ff\nb8 01 00 00 00\n48 89 44 24 60\ne9 e1 fe ff ff\n48 8b 3d c2 ce 20 00\ne8 a5 21 00 00\n48 89 44 24 48\ne9 cb fe ff ff\n48 8b 3d ac ce 20 00\ne8 4f 06 00 00\ne9 ba fe ff ff\n8b 7c 24 04\n85 ff\n78 12\n48 85 ed\n74 0d\ne8 98 f7 ff ff\nc7 44 24 04 ff ff ff ff\n8b 14 24\n48 8b 4c 24 08\n89 c8\n09 d0\nb8 01 00 00 00\n48 8b 74 24 10\n0f 44 f0\n48 89 74 24 10\n85 c9\n74 1e\n31 c0\n44 39 35 55 ce 20 00\n44 0f 44 f8\neb 25\nbf cb ac 40 00\ne8 d5 1d 00 00\ne9 67 04 00 00\n85 d2\n0f 94 c0\n44 39 35 34 ce 20 00\n75 08\n84 c0\n0f 85 cd 04 00 00\nbf 01 00 00 00\ne8 60 f5 ff ff\n83 f8 01\n0f 94 05 87 ce 20 00\n48 85 ed\n74 1c\n48 8d 4c 24 18\n4c 8d 44 24 30\nbe 1c c6 40 00\nba 01 00 00 00\n48 89 ef\ne8 a5 22 00 00\n31 c0\n48 89 44 24 40\n31 db\n4c 89 a4 24 90 00 00 00\n44 89 74 24 3c\n48 89 ac 24 80 00 00 00\n4c 89 bc 24 88 00 00 00\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n45 85 ff\n74 14\n48 8b 05 0c ce 20 00\n48 3b 05 0d ce 20 00\n0f 86 67 03 00 00\n66 0f 57 c0\n66 0f 11 05 33 ce 20 00\n66 0f 11 05 1b ce 20 00\n66 0f 11 05 03 ce 20 00\n48 85 ed\n74 56\n48 8b 44 24 30\n48 85 c0\n74 7c\n48 83 f8 01\n48 8d 9c 24 a8 00 00 00\n0f 85 8a 00 00 00\n48 8b 44 24 18\n80 7c 05 00 2d\n0f 85 81 00 00 00\nf6 44 24 40 01\n0f 85 8a 03 00 00\n45 31 e4\nb0 01\n48 89 44 24 40\n41 bd 19 a8 40 00\n31 ed\ne9 9f 00 00 00\n8b 44 24 04\n83 f8 ff\n0f 84 e3 02 00 00\n4c 8b 2d 64 cd 20 00\n41 89 c4\n31 ed\nc7 44 24 04 ff ff ff ff\n48 8d 9c 24 a8 00 00 00\neb 6c\n41 bd 76 a6 40 00\n31 ed\n48 8d 9c 24 a8 00 00 00\neb 41\n48 8b 7c 24 18\neb 19\n48 8b 7c 24 18\n80 7c 3d 00 2e\n75 0d\n41 bd 76 a6 40 00\n31 ed\neb 16\n48 01 ef\n48 8b 74 24 30\ne8 23 f6 ff ff\n49 89 c5\n4c 89 ed\n4c 89 ef\ne8 75 03 00 00\n41 89 c4\n45 85 e4\n0f 88 97 02 00 00\n44 89 e7\n48 89 de\ne8 ee 76 00 00\n85 c0\n48 89 ac 24 98 00 00 00\n74 42\ne8 4d f3 ff ff\n8b 18\n45 31 f6\n31 ff\nbe 08 00 00 00\n4c 89 ea\ne8 29 57 00 00\n48 89 c1\n31 ff\nba 28 c6 40 00\n31 c0\n89 de\ne8 56 f7 ff ff\n45 31 ff\ne9 3f 01 00 00\n4c 8b bc 24 d8 00 00 00\n48 89 df\ne8 60 5e 00 00\n48 89 44 24 68\n48 89 54 24 70\n48 8d bc 24 a0 00 00 00\ne8 d9 f5 ff ff\n48 83 f8 ff\n0f 84 d1 00 00 00\n48 8b bc 24 a0 00 00 00\n48 8b b4 24 00 01 00 00\ne8 4a f4 ff ff\n69 05 90 ca 20 00 80 51 01 00\nf2 48 0f 2a c8\n66 0f 2e c1\n0f 86 cc 00 00 00\n31 ff\nbe 39 a8 40 00\nba 05 00 00 00\nf2 0f 11 44 24 20\ne8 8a f3 ff ff\n49 89 c6\n31 ff\nbe 08 00 00 00\n4c 89 ea\ne8 78 56 00 00\n48 89 44 24 78\n8b 05 4d ca 20 00\n89 44 24 38\n31 ff\nbe 40 a6 40 00\nba 05 00 00 00\ne8 58 f3 ff ff\n48 89 c5\nf2 0f 10 44 24 20\nf2 0f 5e 05 1f 76 00 00\nf2 0f 11 44 24 20\n31 ff\nbe 40 a6 40 00\nba 05 00 00 00\ne8 30 f3 ff ff\n48 89 c3\n48 83 ec 08\n31 ff\n31 f6\nb0 01\n44 8b 44 24 40\n4c 89 f2\n48 8b 8c 24 80 00 00 00\n49 89 e9\nf2 0f 10 44 24 28\n53\ne8 44 f6 ff ff\n48 83 c4 10\neb 29\ne8 09 f2 ff ff\n8b 18\n31 ff\nbe 21 a8 40 00\nba 05 00 00 00\ne8 e6 f2 ff ff\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ca\ne8 15 f6 ff ff\n41 be 01 00 00 00\nbe d5 b3 40 00\n44 89 e7\ne8 c2 f5 ff ff\n48 89 c5\n48 85 ed\n0f 84 f4 00 00 00\n48 63 05 ef ca 20 00\n8b 7c 24 3c\n29 c7\n48 8b 8c 24 90 00 00 00\n48 8d 34 c1\n45 85 f6\n41 b9 00 00 00 00\n48 8d 44 24 68\n4c 0f 45 c8\n4c 89 ea\n48 89 e9\n4d 89 f8\nff 74 24 48\nff 74 24 68\nff 74 24 68\nff 74 24 20\n4c 8b bc 24 a8 00 00 00\n41 57\nff 74 24 50\nff 74 24 40\nff b4 24 88 00 00 00\ne8 44 03 00 00\n48 83 c4 40\n48 89 c3\n48 89 ef\ne8 25 f2 ff ff\n83 f8 ff\n74 7e\n48 8b bc 24 98 00 00 00\n48 85 ff\n74 05\ne8 fe f0 ff ff\n48 8b ac 24 80 00 00 00\n48 85 ed\n74 21\nbe 1c c6 40 00\n31 d2\n48 89 ef\n48 8d 4c 24 18\n4c 8d 44 24 30\ne8 f8 1e 00 00\n84 c0\n0f 85 80 fc ff ff\n83 3c 24 00\n74 0f\nbf 7d a8 40 00\n31 c0\n48 89 de\ne8 6b f2 ff ff\n31 c0\n48 85 db\n75 4d\n45 85 ff\n0f 94 c0\n83 7c 24 08 00\n0f 94 c1\n48 83 3d 66 ca 20 00 00\n0f 95 c2\n08 c2\n20 ca\n0f b6 c2\neb 2b\ne8 cd f0 ff ff\n8b 18\n31 ff\nbe 08 00 00 00\n4c 89 ea\ne8 ac 54 00 00\n48 89 c1\n31 ff\nba 28 c6 40 00\n31 c0\n89 de\ne8 d9 f4 ff ff\n31 c0\n48 81 c4 38 01 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 ff\nbe da a7 40 00\nba 05 00 00 00\ne8 74 f1 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 a3 f4 ff ff\neb c8\nbf 01 00 00 00\ne8 b7 00 00 00\n31 ff\ne8 b0 00 00 00\n8b 74 24 68\n4c 8b 05 8d c9 20 00\n0f be d3\nb9 60 a3 40 00\n89 c7\ne8 96 62 00 00\nbf 88 a7 40 00\nbe 97 a7 40 00\nba 67 06 00 00\nb9 a0 a7 40 00\ne8 ed f1 ff ff\n31 ff\nbe c0 a7 40 00\nba 05 00 00 00\ne8 0c f1 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 3b f4 ff ff\nbf 01 00 00 00\ne8 51 00 00 00\n90\n'
p1734
S'.text:0000000000402350\n.text:0000000000402351\n.text:0000000000402353\n.text:0000000000402355\n.text:0000000000402357\n.text:0000000000402359\n.text:000000000040235a\n.text:0000000000402361\n.text:0000000000402365\n.text:0000000000402368\n.text:000000000040236b\n.text:000000000040236f\n.text:0000000000402372\n.text:0000000000402374\n.text:0000000000402379\n.text:000000000040237e\n.text:0000000000402383\n.text:0000000000402388\n.text:000000000040238d\n.text:0000000000402392\n.text:0000000000402397\n.text:000000000040239c\n.text:00000000004023a1\n.text:00000000004023a6\n.text:00000000004023a8\n.text:00000000004023ad\n.text:00000000004023b4\n.text:00000000004023b9\n.text:00000000004023be\n.text:00000000004023c0\n.text:00000000004023c2\n.text:00000000004023c7\n.text:00000000004023cc\n.text:00000000004023ce\n.text:00000000004023d0\n.text:00000000004023d5\n.text:00000000004023d7\n.text:00000000004023d9\n.text:00000000004023de\n.text:00000000004023e3\n.text:00000000004023e8\n.text:00000000004023eb\n.text:00000000004023f0\n.text:00000000004023f2\n.text:00000000004023f4\n.text:00000000004023f7\n.text:00000000004023fc\n.text:0000000000402400\n.text:0000000000402408\n.text:000000000040240f\n.text:0000000000402414\n.text:0000000000402419\n.text:000000000040241c\n.text:0000000000402426\n.text:0000000000402428\n.text:000000000040242d\n.text:0000000000402435\n.text:000000000040243c\n.text:0000000000402441\n.text:0000000000402446\n.text:000000000040244c\n.text:0000000000402451\n.text:0000000000402456\n.text:0000000000402458\n.text:000000000040245d\n.text:000000000040245f\n.text:0000000000402464\n.text:0000000000402466\n.text:000000000040246b\n.text:000000000040246d\n.text:0000000000402470\n.text:0000000000402475\n.text:000000000040247a\n.text:000000000040247c\n.text:0000000000402483\n.text:0000000000402490\n.text:0000000000402498\n.text:000000000040249d\n.text:00000000004024a2\n.text:00000000004024a5\n.text:00000000004024a8\n.text:00000000004024ad\n.text:00000000004024b2\n.text:00000000004024b4\n.text:00000000004024b7\n.text:00000000004024bc\n.text:00000000004024c2\n.text:00000000004024c9\n.text:00000000004024d0\n.text:00000000004024d7\n.text:00000000004024d9\n.text:00000000004024e0\n.text:00000000004024e8\n.text:00000000004024ed\n.text:00000000004024f2\n.text:00000000004024f5\n.text:00000000004024f8\n.text:00000000004024fd\n.text:00000000004024ff\n.text:0000000000402505\n.text:000000000040250b\n.text:000000000040250d\n.text:000000000040250f\n.text:0000000000402514\n.text:0000000000402519\n.text:000000000040251e\n.text:0000000000402523\n.text:0000000000402528\n.text:0000000000402532\n.text:0000000000402537\n.text:000000000040253e\n.text:0000000000402543\n.text:0000000000402548\n.text:000000000040254d\n.text:0000000000402552\n.text:0000000000402557\n.text:000000000040255c\n.text:0000000000402561\n.text:0000000000402568\n.text:000000000040256d\n.text:0000000000402574\n.text:0000000000402577\n.text:000000000040257d\n.text:0000000000402582\n.text:000000000040258c\n.text:0000000000402591\n.text:0000000000402596\n.text:000000000040259b\n.text:00000000004025a0\n.text:00000000004025a5\n.text:00000000004025aa\n.text:00000000004025af\n.text:00000000004025b6\n.text:00000000004025bb\n.text:00000000004025c0\n.text:00000000004025c5\n.text:00000000004025cc\n.text:00000000004025d1\n.text:00000000004025d6\n.text:00000000004025da\n.text:00000000004025dc\n.text:00000000004025de\n.text:00000000004025e1\n.text:00000000004025e3\n.text:00000000004025e8\n.text:00000000004025f0\n.text:00000000004025f3\n.text:00000000004025f8\n.text:00000000004025fa\n.text:00000000004025fc\n.text:0000000000402601\n.text:0000000000402606\n.text:0000000000402609\n.text:000000000040260e\n.text:0000000000402610\n.text:0000000000402612\n.text:0000000000402614\n.text:000000000040261b\n.text:000000000040261f\n.text:0000000000402621\n.text:0000000000402626\n.text:000000000040262b\n.text:0000000000402630\n.text:0000000000402632\n.text:0000000000402635\n.text:000000000040263c\n.text:000000000040263e\n.text:0000000000402640\n.text:0000000000402646\n.text:000000000040264b\n.text:0000000000402650\n.text:0000000000402653\n.text:000000000040265a\n.text:000000000040265d\n.text:000000000040265f\n.text:0000000000402664\n.text:0000000000402669\n.text:000000000040266e\n.text:0000000000402673\n.text:0000000000402676\n.text:000000000040267b\n.text:000000000040267d\n.text:0000000000402682\n.text:0000000000402684\n.text:000000000040268c\n.text:0000000000402691\n.text:0000000000402699\n.text:00000000004026a1\n.text:00000000004026b0\n.text:00000000004026b3\n.text:00000000004026b5\n.text:00000000004026bc\n.text:00000000004026c3\n.text:00000000004026c9\n.text:00000000004026cd\n.text:00000000004026d5\n.text:00000000004026dd\n.text:00000000004026e5\n.text:00000000004026e8\n.text:00000000004026ea\n.text:00000000004026ef\n.text:00000000004026f2\n.text:00000000004026f4\n.text:00000000004026f8\n.text:0000000000402700\n.text:0000000000402706\n.text:000000000040270b\n.text:0000000000402710\n.text:0000000000402716\n.text:000000000040271b\n.text:0000000000402721\n.text:0000000000402724\n.text:0000000000402726\n.text:000000000040272b\n.text:0000000000402731\n.text:0000000000402733\n.text:0000000000402740\n.text:0000000000402744\n.text:0000000000402747\n.text:000000000040274d\n.text:0000000000402754\n.text:0000000000402757\n.text:0000000000402759\n.text:0000000000402761\n.text:0000000000402769\n.text:0000000000402770\n.text:0000000000402776\n.text:0000000000402778\n.text:0000000000402780\n.text:0000000000402790\n.text:0000000000402795\n.text:0000000000402797\n.text:000000000040279c\n.text:00000000004027a1\n.text:00000000004027a3\n.text:00000000004027a9\n.text:00000000004027ab\n.text:00000000004027b0\n.text:00000000004027b3\n.text:00000000004027b8\n.text:00000000004027bd\n.text:00000000004027c0\n.text:00000000004027c3\n.text:00000000004027c6\n.text:00000000004027cb\n.text:00000000004027ce\n.text:00000000004027d1\n.text:00000000004027d7\n.text:00000000004027da\n.text:00000000004027dd\n.text:00000000004027e2\n.text:00000000004027e4\n.text:00000000004027ec\n.text:00000000004027ee\n.text:00000000004027f3\n.text:00000000004027f5\n.text:00000000004027f8\n.text:00000000004027fa\n.text:00000000004027ff\n.text:0000000000402802\n.text:0000000000402807\n.text:000000000040280a\n.text:000000000040280c\n.text:0000000000402811\n.text:0000000000402813\n.text:0000000000402815\n.text:000000000040281a\n.text:000000000040281d\n.text:0000000000402830\n.text:0000000000402838\n.text:000000000040283b\n.text:0000000000402840\n.text:0000000000402845\n.text:000000000040284a\n.text:0000000000402852\n.text:0000000000402857\n.text:000000000040285b\n.text:0000000000402861\n.text:0000000000402869\n.text:0000000000402871\n.text:0000000000402876\n.text:0000000000402880\n.text:0000000000402885\n.text:0000000000402889\n.text:000000000040288f\n.text:0000000000402891\n.text:0000000000402896\n.text:000000000040289b\n.text:00000000004028a1\n.text:00000000004028a6\n.text:00000000004028a9\n.text:00000000004028ab\n.text:00000000004028b0\n.text:00000000004028b3\n.text:00000000004028b8\n.text:00000000004028bd\n.text:00000000004028c3\n.text:00000000004028c7\n.text:00000000004028c9\n.text:00000000004028ce\n.text:00000000004028d3\n.text:00000000004028d8\n.text:00000000004028db\n.text:00000000004028e1\n.text:00000000004028e9\n.text:00000000004028ef\n.text:00000000004028f1\n.text:00000000004028f6\n.text:00000000004028fb\n.text:0000000000402900\n.text:0000000000402903\n.text:0000000000402907\n.text:0000000000402909\n.text:000000000040290b\n.text:000000000040290d\n.text:0000000000402912\n.text:0000000000402915\n.text:000000000040291d\n.text:0000000000402920\n.text:0000000000402926\n.text:0000000000402927\n.text:000000000040292c\n.text:0000000000402930\n.text:0000000000402932\n.text:0000000000402937\n.text:0000000000402939\n.text:000000000040293b\n.text:0000000000402940\n.text:0000000000402945\n.text:000000000040294a\n.text:000000000040294d\n.text:000000000040294f\n.text:0000000000402951\n.text:0000000000402953\n.text:0000000000402956\n.text:000000000040295b\n.text:0000000000402961\n.text:0000000000402966\n.text:0000000000402969\n.text:000000000040296e\n.text:0000000000402971\n.text:0000000000402974\n.text:000000000040297a\n.text:0000000000402981\n.text:0000000000402985\n.text:0000000000402987\n.text:000000000040298f\n.text:0000000000402993\n.text:0000000000402996\n.text:000000000040299c\n.text:00000000004029a1\n.text:00000000004029a5\n.text:00000000004029a8\n.text:00000000004029ab\n.text:00000000004029ae\n.text:00000000004029b2\n.text:00000000004029b6\n.text:00000000004029ba\n.text:00000000004029be\n.text:00000000004029c6\n.text:00000000004029c8\n.text:00000000004029cc\n.text:00000000004029d0\n.text:00000000004029d7\n.text:00000000004029dc\n.text:00000000004029e0\n.text:00000000004029e3\n.text:00000000004029e6\n.text:00000000004029eb\n.text:00000000004029ee\n.text:00000000004029f0\n.text:00000000004029f8\n.text:00000000004029fb\n.text:00000000004029fd\n.text:0000000000402a02\n.text:0000000000402a0a\n.text:0000000000402a0d\n.text:0000000000402a0f\n.text:0000000000402a14\n.text:0000000000402a16\n.text:0000000000402a19\n.text:0000000000402a1e\n.text:0000000000402a23\n.text:0000000000402a28\n.text:0000000000402a2a\n.text:0000000000402a30\n.text:0000000000402a34\n.text:0000000000402a36\n.text:0000000000402a3b\n.text:0000000000402a3d\n.text:0000000000402a40\n.text:0000000000402a45\n.text:0000000000402a47\n.text:0000000000402a4a\n.text:0000000000402a4c\n.text:0000000000402a4f\n.text:0000000000402a52\n.text:0000000000402a57\n.text:0000000000402a5a\n.text:0000000000402a62\n.text:0000000000402a65\n.text:0000000000402a67\n.text:0000000000402a69\n.text:0000000000402a6c\n.text:0000000000402a6e\n.text:0000000000402a73\n.text:0000000000402a75\n.text:0000000000402a77\n.text:0000000000402a7c\n.text:0000000000402a7f\n.text:0000000000402a84\n.text:0000000000402a87\n.text:0000000000402a89\n.text:0000000000402a8e\n.text:0000000000402a90\n.text:0000000000402a92\n.text:0000000000402a97\n.text:0000000000402a99\n.text:0000000000402aa0\n.text:0000000000402aa1\n.text:0000000000402aa3\n.text:0000000000402aa5\n.text:0000000000402aa7\n.text:0000000000402aa9\n.text:0000000000402aaa\n.text:0000000000402aab\n.text:0000000000402aad\n.text:0000000000402ab2\n.text:0000000000402ab7\n.text:0000000000402abc\n.text:0000000000402abf\n.text:0000000000402ac1\n.text:0000000000402ac3\n.text:0000000000402ac5\n.text:0000000000402ac8\n.text:0000000000402acd\n.text:0000000000402acf\n.text:0000000000402ad4\n.text:0000000000402ad9\n.text:0000000000402adb\n.text:0000000000402ae0\n.text:0000000000402ae4\n.text:0000000000402aeb\n.text:0000000000402aee\n.text:0000000000402af3\n.text:0000000000402af5\n.text:0000000000402afa\n.text:0000000000402aff\n.text:0000000000402b04\n.text:0000000000402b09\n.text:0000000000402b0e\n.text:0000000000402b13\n.text:0000000000402b15\n.text:0000000000402b1a\n.text:0000000000402b1f\n.text:0000000000402b24\n.text:0000000000402b27\n.text:0000000000402b29\n.text:0000000000402b2b\n.text:0000000000402b2d\n.text:0000000000402b30\n.text:0000000000402b35\n.text:0000000000402b3a\n.text:0000000000402b3f\n'
p1735
tp1736
sS'visit_globmatch_casefold'
p1737
(S'\n__stdcall visit_globmatch_casefold(process_data * procdata, void * context)\n'
p1738
V\u000aint visit_globmatch_casefold(process_data *procdata,void *context)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = fnmatch((char *)context,procdata->munged_filename,0x10);\u000a  return (int)((uint)(iVar1 != 0) + 2 + (uint)(iVar1 != 0));\u000a}\u000a\u000a
p1739
S'PUSH RAX\nMOV RAX,qword ptr [RDI + 0x20]\nMOV EDX,0x10\nMOV RDI,RSI\nMOV RSI,RAX\nCALL 0x00401d20\nXOR ECX,ECX\nTEST EAX,EAX\nSETNZ CL\nLEA EAX,[RCX + RCX*0x1 + 0x2]\nPOP RCX\nRET\n'
p1740
S'50\n48 8b 47 20\nba 10 00 00 00\n48 89 f7\n48 89 c6\ne8 7b e3 ff ff\n31 c9\n85 c0\n0f 95 c1\n8d 44 09 02\n59\nc3\n'
p1741
S'.text:0000000000403990\n.text:0000000000403991\n.text:0000000000403995\n.text:000000000040399a\n.text:000000000040399d\n.text:00000000004039a0\n.text:00000000004039a5\n.text:00000000004039a7\n.text:00000000004039a9\n.text:00000000004039ac\n.text:00000000004039b0\n.text:00000000004039b1\n'
p1742
tp1743
sS'quotearg'
p1744
(S'\n__stdcall quotearg(char * arg)\n'
p1745
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1746
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00407d30\n'
p1747
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1748
S'.text:0000000000407f10\n.text:0000000000407f13\n.text:0000000000407f15\n.text:0000000000407f18\n'
p1749
tp1750
sS'_start'
p1751
(S'\n__stdcall _start()\n'
p1752
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_0060eff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1753
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x409e80\nMOV RCX,0x409e10\nMOV RDI,0x4021c0\nCALL qword ptr [0x0060eff0]\nHLT\n'
p1754
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 80 9e 40 00\n48 c7 c1 10 9e 40 00\n48 c7 c7 c0 21 40 00\nff 15 06 cf 20 00\nf4\n'
p1755
S'.text:00000000004020c0\n.text:00000000004020c2\n.text:00000000004020c5\n.text:00000000004020c6\n.text:00000000004020c9\n.text:00000000004020cd\n.text:00000000004020ce\n.text:00000000004020cf\n.text:00000000004020d6\n.text:00000000004020dd\n.text:00000000004020e4\n.text:00000000004020ea\n'
p1756
tp1757
sS'c_iscntrl'
p1758
(S'\n__stdcall c_iscntrl()\n'
p1759
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1760
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x004097c8\nRET\nCMP EDI,0x7f\nJZ 0x004097c7\nXOR EAX,EAX\nRET\n'
p1761
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1762
S'.text:00000000004097c0\n.text:00000000004097c2\n.text:00000000004097c5\n.text:00000000004097c7\n.text:00000000004097c8\n.text:00000000004097cb\n.text:00000000004097cd\n.text:00000000004097cf\n'
p1763
tp1764
sS'humblock'
p1765
(S'\n__stdcall humblock(char * spec, uintmax_t * block_size, int * options)\n'
p1766
V\u000astrtol_error humblock(char *spec,uintmax_t *block_size,int *options)\u000a\u000a{\u000a  char cVar1;\u000a  strtol_error sVar2;\u000a  char *in_RAX;\u000a  ptrdiff_t pVar3;\u000a  uintmax_t uVar4;\u000a  uint uVar5;\u000a  char *arg;\u000a  uint uVar6;\u000a  char *local_28;\u000a  \u000a  local_28 = in_RAX;\u000a  if (((spec == (char *)0x0) &&\u000a      (local_28 = in_RAX, spec = getenv("BLOCK_SIZE"), spec == (char *)0x0)) &&\u000a     (spec = getenv("BLOCKSIZE"), spec == (char *)0x0)) {\u000a    uVar6 = 0;\u000a    uVar4 = default_block_size();\u000a  }\u000a  else {\u000a    arg = spec + 1;\u000a    if (*spec != '\u005c'') {\u000a      arg = spec;\u000a    }\u000a    uVar6 = (uint)(*spec == '\u005c'') << 2;\u000a    pVar3 = argmatch(arg,block_size_args,(char *)block_size_opts,4);\u000a    if ((int)pVar3 < 0) {\u000a      sVar2 = xstrtoumax(arg,&local_28,(uintmax_t *)0x0,(char *)block_size);\u000a      if (sVar2 != LONGINT_OK) {\u000a        *options = 0;\u000a        return sVar2;\u000a      }\u000a      cVar1 = *arg;\u000a      while (9 < (byte)(cVar1 - 0x30U)) {\u000a        if (local_28 == arg) {\u000a          uVar5 = uVar6 | 0x80;\u000a          uVar6 = uVar6 | 0x180;\u000a          if ((local_28[-1] != 'B') || (uVar5 = uVar6, local_28[-2] == 'i')) {\u000a            uVar6 = uVar5 | 0x20;\u000a          }\u000a          break;\u000a        }\u000a        cVar1 = arg[1];\u000a        arg = arg + 1;\u000a      }\u000a      goto LAB_0040534a;\u000a    }\u000a    uVar6 = uVar6 | block_size_opts[(long)(int)pVar3];\u000a    uVar4 = 1;\u000a  }\u000a  *block_size = uVar4;\u000aLAB_0040534a:\u000a  *options = uVar6;\u000a  return LONGINT_OK;\u000a}\u000a\u000a
p1767
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R15,RSI\nTEST RDI,RDI\nJNZ 0x0040530a\nMOV EDI,0x40b93c\nCALL 0x00401af0\nMOV RDI,RAX\nTEST RDI,RDI\nJNZ 0x0040530a\nMOV EDI,0x40b947\nCALL 0x00401af0\nMOV RDI,RAX\nTEST RDI,RDI\nJZ 0x004053a6\nXOR EBP,EBP\nCMP byte ptr [RDI],0x27\nLEA RBX,[RDI + 0x1]\nSETZ BPL\nCMOVNZ RBX,RDI\nSHL EBP,0x2\nMOV ESI,0x40b9a0\nMOV EDX,0x40b9b8\nMOV ECX,0x4\nMOV RDI,RBX\nCALL 0x00409410\nTEST EAX,EAX\nJS 0x00405351\nCDQE\nOR EBP,dword ptr [0x40b9b8 + RAX*0x4]\nMOV EAX,0x1\nMOV qword ptr [R15],RAX\nMOV dword ptr [R14],EBP\nXOR EAX,EAX\nJMP 0x00405372\nMOV RSI,RSP\nXOR EDX,EDX\nMOV R8D,0x40b951\nMOV RDI,RBX\nMOV RCX,R15\nCALL 0x00408e40\nTEST EAX,EAX\nJZ 0x0040537d\nMOV dword ptr [R14],0x0\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV AL,byte ptr [RBX]\nADD AL,0xd0\nCMP AL,0xa\nJC 0x0040534a\nMOV RAX,qword ptr [RSP]\nNOP dword ptr [RAX]\nCMP RAX,RBX\nJZ 0x004053af\nMOVZX ECX,byte ptr [RBX + 0x1]\nINC RBX\nADD CL,0xd0\nCMP CL,0xa\nJNC 0x00405390\nJMP 0x0040534a\nXOR EBP,EBP\nCALL 0x004053e0\nJMP 0x00405347\nMOV ECX,EBP\nOR ECX,0x80\nOR EBP,0x180\nCMP byte ptr [RAX + -0x1],0x42\nCMOVZ ECX,EBP\nJNZ 0x004053d0\nCMP byte ptr [RAX + -0x2],0x69\nJNZ 0x0040534a\nOR ECX,0x20\nMOV EBP,ECX\nJMP 0x0040534a\n'
p1768
S'55\n41 57\n41 56\n53\n50\n49 89 d6\n49 89 f7\n48 85 ff\n75 28\nbf 3c b9 40 00\ne8 04 c8 ff ff\n48 89 c7\n48 85 ff\n75 16\nbf 47 b9 40 00\ne8 f2 c7 ff ff\n48 89 c7\n48 85 ff\n0f 84 9c 00 00 00\n31 ed\n80 3f 27\n48 8d 5f 01\n40 0f 94 c5\n48 0f 45 df\nc1 e5 02\nbe a0 b9 40 00\nba b8 b9 40 00\nb9 04 00 00 00\n48 89 df\ne8 db 40 00 00\n85 c0\n78 18\n48 98\n0b 2c 85 b8 b9 40 00\nb8 01 00 00 00\n49 89 07\n41 89 2e\n31 c0\neb 21\n48 89 e6\n31 d2\n41 b8 51 b9 40 00\n48 89 df\n4c 89 f9\ne8 d9 3a 00 00\n85 c0\n74 12\n41 c7 06 00 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n8a 03\n04 d0\n3c 0a\n72 c5\n48 8b 04 24\n0f 1f 80 00 00 00 00\n48 39 d8\n74 1a\n0f b6 4b 01\n48 ff c3\n80 c1 d0\n80 f9 0a\n73 ec\neb a4\n31 ed\ne8 33 00 00 00\neb 98\n89 e9\n81 c9 80 00 00 00\n81 cd 80 01 00 00\n80 78 ff 42\n0f 44 cd\n75 0a\n80 78 fe 69\n0f 85 7a ff ff ff\n83 c9 20\n89 cd\ne9 70 ff ff ff\n'
p1769
S'.text:00000000004052d0\n.text:00000000004052d1\n.text:00000000004052d3\n.text:00000000004052d5\n.text:00000000004052d6\n.text:00000000004052d7\n.text:00000000004052da\n.text:00000000004052dd\n.text:00000000004052e0\n.text:00000000004052e2\n.text:00000000004052e7\n.text:00000000004052ec\n.text:00000000004052ef\n.text:00000000004052f2\n.text:00000000004052f4\n.text:00000000004052f9\n.text:00000000004052fe\n.text:0000000000405301\n.text:0000000000405304\n.text:000000000040530a\n.text:000000000040530c\n.text:000000000040530f\n.text:0000000000405313\n.text:0000000000405317\n.text:000000000040531b\n.text:000000000040531e\n.text:0000000000405323\n.text:0000000000405328\n.text:000000000040532d\n.text:0000000000405330\n.text:0000000000405335\n.text:0000000000405337\n.text:0000000000405339\n.text:000000000040533b\n.text:0000000000405342\n.text:0000000000405347\n.text:000000000040534a\n.text:000000000040534d\n.text:000000000040534f\n.text:0000000000405351\n.text:0000000000405354\n.text:0000000000405356\n.text:000000000040535c\n.text:000000000040535f\n.text:0000000000405362\n.text:0000000000405367\n.text:0000000000405369\n.text:000000000040536b\n.text:0000000000405372\n.text:0000000000405376\n.text:0000000000405377\n.text:0000000000405379\n.text:000000000040537b\n.text:000000000040537c\n.text:000000000040537d\n.text:000000000040537f\n.text:0000000000405381\n.text:0000000000405383\n.text:0000000000405385\n.text:0000000000405389\n.text:0000000000405390\n.text:0000000000405393\n.text:0000000000405395\n.text:0000000000405399\n.text:000000000040539c\n.text:000000000040539f\n.text:00000000004053a2\n.text:00000000004053a4\n.text:00000000004053a6\n.text:00000000004053a8\n.text:00000000004053ad\n.text:00000000004053af\n.text:00000000004053b1\n.text:00000000004053b7\n.text:00000000004053bd\n.text:00000000004053c1\n.text:00000000004053c4\n.text:00000000004053c6\n.text:00000000004053ca\n.text:00000000004053d0\n.text:00000000004053d3\n.text:00000000004053d5\n'
p1770
tp1771
sS'c_isblank'
p1772
(S'\n__stdcall c_isblank()\n'
p1773
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1774
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1775
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1776
S'.text:00000000004097b0\n.text:00000000004097b3\n.text:00000000004097b6\n.text:00000000004097b9\n.text:00000000004097bc\n.text:00000000004097be\n'
p1777
tp1778
sS'atexit'
p1779
(S'\n__stdcall atexit(__func * __func)\n'
p1780
V\u000a/* WARNING: Removing unreachable block (ram,0x00409eb0) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_0060f2a0)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1781
S'MOV RAX,0x60f308\nTEST RAX,RAX\nJZ 0x00409eb0\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00402000\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00402000\n'
p1782
S'48 c7 c0 08 f3 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 5a 81 ff ff\n31 d2\n31 f6\ne9 47 81 ff ff\n'
p1783
S'.text:0000000000409e90\n.text:0000000000409e97\n.text:0000000000409e9a\n.text:0000000000409e9c\n.text:0000000000409e9f\n.text:0000000000409ea1\n.text:0000000000409eb0\n.text:0000000000409eb2\n.text:0000000000409eb4\n'
p1784
tp1785
sS'fdopen'
p1786
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1787
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_0060f238)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1788
S'JMP qword ptr [0x0060f238]\n'
p1789
S'ff 25 02 d3 20 00\n'
p1790
S'.plt:0000000000401f30\n'
p1791
tp1792
sS'error'
p1793
(S'\n__stdcall error()\n'
p1794
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_0060f258)();\u000a  return;\u000a}\u000a\u000a
p1795
S'JMP qword ptr [0x0060f258]\n'
p1796
S'ff 25 e2 d2 20 00\n'
p1797
S'.plt:0000000000401f70\n'
p1798
tp1799
sS'strcaseeq6'
p1800
(S'\n__stdcall strcaseeq6()\n'
p1801
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1802
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00409850\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x004085d2\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004085d9\nJMP 0x004085ee\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004085ee\nTEST BPL,BPL\nJZ 0x004085e9\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00408600\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1803
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 91 12 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1804
S'.text:00000000004085b0\n.text:00000000004085b1\n.text:00000000004085b2\n.text:00000000004085b3\n.text:00000000004085b5\n.text:00000000004085b8\n.text:00000000004085ba\n.text:00000000004085bf\n.text:00000000004085c3\n.text:00000000004085c5\n.text:00000000004085c7\n.text:00000000004085ca\n.text:00000000004085cc\n.text:00000000004085ce\n.text:00000000004085d0\n.text:00000000004085d2\n.text:00000000004085d4\n.text:00000000004085d7\n.text:00000000004085d9\n.text:00000000004085dc\n.text:00000000004085de\n.text:00000000004085e1\n.text:00000000004085e5\n.text:00000000004085e6\n.text:00000000004085e7\n.text:00000000004085e9\n.text:00000000004085ee\n.text:00000000004085f2\n.text:00000000004085f3\n.text:00000000004085f4\n'
p1805
tp1806
sS'strcaseeq5'
p1807
(S'\n__stdcall strcaseeq5()\n'
p1808
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1809
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00409850\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00408586\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040858d\nJMP 0x004085a4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004085a4\nTEST BPL,BPL\nJZ 0x0040859f\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004085b0\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1810
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 dd 12 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1811
S'.text:0000000000408560\n.text:0000000000408561\n.text:0000000000408563\n.text:0000000000408564\n.text:0000000000408567\n.text:0000000000408569\n.text:000000000040856c\n.text:000000000040856e\n.text:0000000000408573\n.text:0000000000408577\n.text:0000000000408579\n.text:000000000040857b\n.text:000000000040857e\n.text:0000000000408580\n.text:0000000000408582\n.text:0000000000408584\n.text:0000000000408586\n.text:0000000000408588\n.text:000000000040858b\n.text:000000000040858d\n.text:0000000000408590\n.text:0000000000408592\n.text:0000000000408596\n.text:0000000000408599\n.text:000000000040859a\n.text:000000000040859c\n.text:000000000040859d\n.text:000000000040859f\n.text:00000000004085a4\n.text:00000000004085a5\n.text:00000000004085a7\n.text:00000000004085a8\n'
p1812
tp1813
sS'strcaseeq7'
p1814
(S'\n__stdcall strcaseeq7()\n'
p1815
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1816
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00409850\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00408622\nTEST ECX,0xffffffdf\nJNZ 0x00408626\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x0040862a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1817
S'53\n48 89 fb\n31 ff\ne8 45 12 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1818
S'.text:0000000000408600\n.text:0000000000408601\n.text:0000000000408604\n.text:0000000000408606\n.text:000000000040860b\n.text:000000000040860f\n.text:0000000000408611\n.text:0000000000408613\n.text:0000000000408619\n.text:000000000040861b\n.text:0000000000408620\n.text:0000000000408621\n.text:0000000000408622\n.text:0000000000408624\n.text:0000000000408626\n.text:0000000000408628\n.text:0000000000408629\n.text:000000000040862a\n.text:000000000040862f\n.text:0000000000408630\n'
p1819
tp1820
sS'strtoul'
p1821
(S'\n__stdcall strtoul(char * __nptr, char * * __endptr, int __base)\n'
p1822
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aulong strtoul(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  ulong uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoul_0060f298)();\u000a  return uVar1;\u000a}\u000a\u000a
p1823
S'JMP qword ptr [0x0060f298]\n'
p1824
S'ff 25 a2 d2 20 00\n'
p1825
S'.plt:0000000000401ff0\n'
p1826
tp1827
sS'strcaseeq0'
p1828
(S'\n__stdcall strcaseeq0()\n'
p1829
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1830
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00409850\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00408335\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040833c\nJMP 0x00408370\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00408370\nTEST BPL,BPL\nJZ 0x0040836b\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00408380\nJMP 0x00408370\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1831
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 2d 15 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1832
S'.text:0000000000408300\n.text:0000000000408301\n.text:0000000000408303\n.text:0000000000408305\n.text:0000000000408307\n.text:0000000000408309\n.text:000000000040830a\n.text:000000000040830b\n.text:000000000040830e\n.text:0000000000408311\n.text:0000000000408314\n.text:0000000000408317\n.text:0000000000408319\n.text:000000000040831c\n.text:000000000040831e\n.text:0000000000408323\n.text:0000000000408326\n.text:0000000000408328\n.text:000000000040832a\n.text:000000000040832d\n.text:000000000040832f\n.text:0000000000408331\n.text:0000000000408333\n.text:0000000000408335\n.text:0000000000408337\n.text:000000000040833a\n.text:000000000040833c\n.text:000000000040833f\n.text:0000000000408341\n.text:0000000000408345\n.text:000000000040834a\n.text:000000000040834d\n.text:0000000000408351\n.text:0000000000408355\n.text:0000000000408359\n.text:000000000040835d\n.text:0000000000408361\n.text:0000000000408364\n.text:0000000000408369\n.text:000000000040836b\n.text:0000000000408370\n.text:0000000000408374\n.text:0000000000408375\n.text:0000000000408377\n.text:0000000000408379\n.text:000000000040837b\n.text:000000000040837d\n.text:000000000040837e\n'
p1833
tp1834
sS'get_stat_mtime'
p1835
(S'\n__stdcall get_stat_mtime(stat * st)\n'
p1836
V\u000atimespec get_stat_mtime(stat *st)\u000a\u000a{\u000a  return st->st_mtim;\u000a}\u000a\u000a
p1837
S'MOV RAX,qword ptr [RDI + 0x58]\nMOV RDX,qword ptr [RDI + 0x60]\nRET\n'
p1838
S'48 8b 47 58\n48 8b 57 60\nc3\n'
p1839
S'.text:00000000004086a0\n.text:00000000004086a4\n.text:00000000004086a8\n'
p1840
tp1841
sS'strnlen1'
p1842
(S'\n__stdcall strnlen1(char * string, size_t maxlen)\n'
p1843
V\u000asize_t strnlen1(char *string,size_t maxlen)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  \u000a  pvVar1 = memchr(string,0,maxlen);\u000a  sVar2 = (1 - (long)string) + (long)pvVar1;\u000a  if (pvVar1 == (void *)0x0) {\u000a    sVar2 = maxlen;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p1844
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nXOR ESI,ESI\nMOV RDX,R14\nCALL 0x00401da0\nMOV ECX,0x1\nSUB RCX,RBX\nADD RCX,RAX\nTEST RAX,RAX\nCMOVZ RCX,R14\nMOV RAX,RCX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1845
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n31 f6\n4c 89 f2\ne8 cc 96 ff ff\nb9 01 00 00 00\n48 29 d9\n48 01 c1\n48 85 c0\n49 0f 44 ce\n48 89 c8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1846
S'.text:00000000004086c0\n.text:00000000004086c2\n.text:00000000004086c3\n.text:00000000004086c4\n.text:00000000004086c7\n.text:00000000004086ca\n.text:00000000004086cc\n.text:00000000004086cf\n.text:00000000004086d4\n.text:00000000004086d9\n.text:00000000004086dc\n.text:00000000004086df\n.text:00000000004086e2\n.text:00000000004086e6\n.text:00000000004086e9\n.text:00000000004086ed\n.text:00000000004086ee\n.text:00000000004086f0\n'
p1847
tp1848
sS'toolong'
p1849
(S'\n__stdcall toolong(process_data * procdata)\n'
p1850
V\u000avoid toolong(process_data *procdata)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  \u000a  uVar1 = dcgettext(0,"locate database %s contains a filename longer than locate can handle",5);\u000a  error(1,0,uVar1,procdata->dbfile);\u000a  return;\u000a}\u000a\u000a
p1851
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nMOV ESI,0x40af8a\nMOV EDX,0x5\nCALL 0x00401c30\nMOV RDX,RAX\nMOV RCX,qword ptr [RBX + 0x30]\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nPOP RBX\nJMP 0x00401f70\n'
p1852
S'53\n48 89 fb\n31 ff\nbe 8a af 40 00\nba 05 00 00 00\ne8 eb d9 ff ff\n48 89 c2\n48 8b 4b 30\nbf 01 00 00 00\n31 f6\n31 c0\n5b\ne9 15 dd ff ff\n'
p1853
S'.text:0000000000404230\n.text:0000000000404231\n.text:0000000000404234\n.text:0000000000404236\n.text:000000000040423b\n.text:0000000000404240\n.text:0000000000404245\n.text:0000000000404248\n.text:000000000040424c\n.text:0000000000404251\n.text:0000000000404253\n.text:0000000000404255\n.text:0000000000404256\n'
p1854
tp1855
sS'strcaseeq2'
p1856
(S'\n__stdcall strcaseeq2()\n'
p1857
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1858
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00409850\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00408446\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040844d\nJMP 0x0040847a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040847a\nTEST BPL,BPL\nJZ 0x00408475\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00408490\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1859
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 1d 14 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1860
S'.text:0000000000408410\n.text:0000000000408411\n.text:0000000000408413\n.text:0000000000408415\n.text:0000000000408417\n.text:0000000000408419\n.text:000000000040841a\n.text:000000000040841b\n.text:000000000040841e\n.text:0000000000408421\n.text:0000000000408424\n.text:0000000000408427\n.text:0000000000408429\n.text:000000000040842c\n.text:000000000040842e\n.text:0000000000408433\n.text:0000000000408437\n.text:0000000000408439\n.text:000000000040843b\n.text:000000000040843e\n.text:0000000000408440\n.text:0000000000408442\n.text:0000000000408444\n.text:0000000000408446\n.text:0000000000408448\n.text:000000000040844b\n.text:000000000040844d\n.text:0000000000408450\n.text:0000000000408452\n.text:0000000000408456\n.text:000000000040845a\n.text:000000000040845e\n.text:0000000000408462\n.text:0000000000408465\n.text:0000000000408469\n.text:000000000040846a\n.text:000000000040846c\n.text:000000000040846e\n.text:0000000000408470\n.text:0000000000408472\n.text:0000000000408473\n.text:0000000000408475\n.text:000000000040847a\n.text:000000000040847e\n.text:000000000040847f\n.text:0000000000408481\n.text:0000000000408483\n.text:0000000000408485\n.text:0000000000408487\n.text:0000000000408488\n'
p1861
tp1862
sS'strcaseeq1'
p1863
(S'\n__stdcall strcaseeq1()\n'
p1864
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1865
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00409850\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x004083bd\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004083c4\nJMP 0x004083f7\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004083f7\nTEST BPL,BPL\nJZ 0x004083f2\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00408410\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1866
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 a6 14 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1867
S'.text:0000000000408380\n.text:0000000000408381\n.text:0000000000408383\n.text:0000000000408385\n.text:0000000000408387\n.text:0000000000408389\n.text:000000000040838a\n.text:000000000040838b\n.text:0000000000408390\n.text:0000000000408393\n.text:0000000000408396\n.text:0000000000408399\n.text:000000000040839b\n.text:000000000040839e\n.text:00000000004083a3\n.text:00000000004083a5\n.text:00000000004083aa\n.text:00000000004083ae\n.text:00000000004083b0\n.text:00000000004083b2\n.text:00000000004083b5\n.text:00000000004083b7\n.text:00000000004083b9\n.text:00000000004083bb\n.text:00000000004083bd\n.text:00000000004083bf\n.text:00000000004083c2\n.text:00000000004083c4\n.text:00000000004083c7\n.text:00000000004083c9\n.text:00000000004083cd\n.text:00000000004083d1\n.text:00000000004083d5\n.text:00000000004083db\n.text:00000000004083df\n.text:00000000004083e2\n.text:00000000004083e6\n.text:00000000004083e7\n.text:00000000004083e9\n.text:00000000004083eb\n.text:00000000004083ed\n.text:00000000004083ef\n.text:00000000004083f0\n.text:00000000004083f2\n.text:00000000004083f7\n.text:00000000004083fb\n.text:00000000004083fc\n.text:00000000004083fe\n.text:0000000000408400\n.text:0000000000408402\n.text:0000000000408404\n.text:0000000000408405\n'
p1868
tp1869
sS'strcaseeq4'
p1870
(S'\n__stdcall strcaseeq4()\n'
p1871
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1872
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00409850\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x0040852c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00408533\nJMP 0x00408554\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00408554\nTEST BPL,BPL\nJZ 0x0040854f\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00408560\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1873
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 37 13 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1874
S'.text:0000000000408500\n.text:0000000000408501\n.text:0000000000408503\n.text:0000000000408505\n.text:0000000000408506\n.text:0000000000408507\n.text:000000000040850a\n.text:000000000040850d\n.text:000000000040850f\n.text:0000000000408512\n.text:0000000000408514\n.text:0000000000408519\n.text:000000000040851d\n.text:000000000040851f\n.text:0000000000408521\n.text:0000000000408524\n.text:0000000000408526\n.text:0000000000408528\n.text:000000000040852a\n.text:000000000040852c\n.text:000000000040852e\n.text:0000000000408531\n.text:0000000000408533\n.text:0000000000408536\n.text:0000000000408538\n.text:000000000040853c\n.text:0000000000408540\n.text:0000000000408543\n.text:0000000000408547\n.text:0000000000408548\n.text:000000000040854a\n.text:000000000040854c\n.text:000000000040854d\n.text:000000000040854f\n.text:0000000000408554\n.text:0000000000408558\n.text:0000000000408559\n.text:000000000040855b\n.text:000000000040855d\n.text:000000000040855e\n'
p1875
tp1876
sS'strcaseeq3'
p1877
(S'\n__stdcall strcaseeq3()\n'
p1878
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1879
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00409850\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x004084c0\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004084c7\nJMP 0x004084ea\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004084ea\nTEST BPL,BPL\nJZ 0x004084e5\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00408500\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1880
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 a3 13 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1881
S'.text:0000000000408490\n.text:0000000000408491\n.text:0000000000408493\n.text:0000000000408495\n.text:0000000000408497\n.text:0000000000408498\n.text:000000000040849b\n.text:000000000040849e\n.text:00000000004084a1\n.text:00000000004084a3\n.text:00000000004084a6\n.text:00000000004084a8\n.text:00000000004084ad\n.text:00000000004084b1\n.text:00000000004084b3\n.text:00000000004084b5\n.text:00000000004084b8\n.text:00000000004084ba\n.text:00000000004084bc\n.text:00000000004084be\n.text:00000000004084c0\n.text:00000000004084c2\n.text:00000000004084c5\n.text:00000000004084c7\n.text:00000000004084ca\n.text:00000000004084cc\n.text:00000000004084d0\n.text:00000000004084d4\n.text:00000000004084d8\n.text:00000000004084db\n.text:00000000004084dc\n.text:00000000004084de\n.text:00000000004084e0\n.text:00000000004084e2\n.text:00000000004084e3\n.text:00000000004084e5\n.text:00000000004084ea\n.text:00000000004084eb\n.text:00000000004084ed\n.text:00000000004084ef\n.text:00000000004084f1\n.text:00000000004084f2\n'
p1882
tp1883
sS'last_component'
p1884
(S'\n__stdcall last_component(char * name)\n'
p1885
V\u000achar * last_component(char *name)\u000a\u000a{\u000a  bool bVar1;\u000a  bool bVar2;\u000a  char *pcVar3;\u000a  \u000a  name = name + -1;\u000a  do {\u000a    pcVar3 = name + 1;\u000a    name = name + 1;\u000a  } while (*pcVar3 == '/');\u000a  bVar2 = false;\u000a  pcVar3 = name;\u000a  do {\u000a    bVar1 = true;\u000a    if (*name != '/') {\u000a      if (*name == 0) {\u000a        return pcVar3;\u000a      }\u000a      bVar1 = bVar2;\u000a      if (bVar2) {\u000a        pcVar3 = name;\u000a        bVar1 = false;\u000a      }\u000a    }\u000a    bVar2 = bVar1;\u000a    name = name + 1;\u000a  } while( true );\u000a}\u000a\u000a
p1886
S'DEC RDI\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP byte ptr [RDI + 0x1],0x2f\nLEA RDI,[RDI + 0x1]\nJZ 0x00404ad0\nXOR ESI,ESI\nMOV RAX,RDI\nJMP 0x00404af6\nINC RAX\nMOV SIL,DL\nMOVZX ECX,byte ptr [RAX]\nMOV DL,0x1\nCMP CL,0x2f\nJZ 0x00404af0\nTEST CL,CL\nJZ 0x00404b17\nMOV EDX,ESI\nAND DL,0x1\nJZ 0x00404b0d\nXOR ESI,ESI\nTEST DL,DL\nCMOVNZ RDI,RAX\nMOV EDX,ESI\nJMP 0x00404af0\nMOV RAX,RDI\nRET\n'
p1887
S'48 ff cf\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n80 7f 01 2f\n48 8d 7f 01\n74 f6\n31 f6\n48 89 f8\neb 15\n48 ff c0\n40 88 d6\n0f b6 08\nb2 01\n80 f9 2f\n74 f0\n84 c9\n74 13\n89 f2\n80 e2 01\n74 02\n31 f6\n84 d2\n48 0f 45 f8\n89 f2\neb d9\n48 89 f8\nc3\n'
p1888
S'.text:0000000000404ac0\n.text:0000000000404ac3\n.text:0000000000404ad0\n.text:0000000000404ad4\n.text:0000000000404ad8\n.text:0000000000404ada\n.text:0000000000404adc\n.text:0000000000404adf\n.text:0000000000404af0\n.text:0000000000404af3\n.text:0000000000404af6\n.text:0000000000404af9\n.text:0000000000404afb\n.text:0000000000404afe\n.text:0000000000404b00\n.text:0000000000404b02\n.text:0000000000404b04\n.text:0000000000404b06\n.text:0000000000404b09\n.text:0000000000404b0b\n.text:0000000000404b0d\n.text:0000000000404b0f\n.text:0000000000404b13\n.text:0000000000404b15\n.text:0000000000404b17\n.text:0000000000404b1a\n'
p1889
tp1890
sS'register_tm_clones'
p1891
(S'\n__stdcall register_tm_clones()\n'
p1892
V\u000a/* WARNING: Removing unreachable block (ram,0x00402153) */\u000a/* WARNING: Removing unreachable block (ram,0x0040215d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1893
S'MOV ESI,0x60f458\nPUSH RBP\nSUB RSI,0x60f458\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00402168\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00402168\nPOP RBP\nMOV EDI,0x60f458\nJMP RAX\nPOP RBP\nRET\n'
p1894
S'be 58 f4 60 00\n55\n48 81 ee 58 f4 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 58 f4 60 00\nff e0\n5d\nc3\n'
p1895
S'.text:0000000000402130\n.text:0000000000402135\n.text:0000000000402136\n.text:000000000040213d\n.text:0000000000402141\n.text:0000000000402144\n.text:0000000000402147\n.text:000000000040214b\n.text:000000000040214e\n.text:0000000000402151\n.text:0000000000402153\n.text:0000000000402158\n.text:000000000040215b\n.text:000000000040215d\n.text:000000000040215e\n.text:0000000000402163\n.text:0000000000402168\n.text:0000000000402169\n'
p1896
tp1897
sS'visit_non_existing_follow'
p1898
(S'\n__stdcall visit_non_existing_follow(process_data * procdata, void * context)\n'
p1899
V\u000aint visit_non_existing_follow(process_data *procdata,void *context)\u000a\u000a{\u000a  int iVar1;\u000a  stat st;\u000a  stat local_90;\u000a  \u000a  iVar1 = stat(procdata->original_filename,&local_90);\u000a  return (int)((uint)(iVar1 == 0) * 3 + 1);\u000a}\u000a\u000a
p1900
S'SUB RSP,0x98\nMOV RDI,qword ptr [RDI + 0x10]\nLEA RSI,[RSP + 0x8]\nCALL 0x00409ec0\nXOR ECX,ECX\nTEST EAX,EAX\nSETZ CL\nLEA EAX,[RCX + RCX*0x2 + 0x1]\nADD RSP,0x98\nRET\n'
p1901
S'48 81 ec 98 00 00 00\n48 8b 7f 10\n48 8d 74 24 08\ne8 8b 63 00 00\n31 c9\n85 c0\n0f 94 c1\n8d 44 49 01\n48 81 c4 98 00 00 00\nc3\n'
p1902
S'.text:0000000000403b20\n.text:0000000000403b27\n.text:0000000000403b2b\n.text:0000000000403b30\n.text:0000000000403b35\n.text:0000000000403b37\n.text:0000000000403b39\n.text:0000000000403b3c\n.text:0000000000403b40\n.text:0000000000403b47\n'
p1903
tp1904
sS'c_islower'
p1905
(S'\n__stdcall c_islower()\n'
p1906
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1907
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1908
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1909
S'.text:00000000004097f0\n.text:00000000004097f3\n.text:00000000004097f6\n.text:00000000004097f9\n'
p1910
tp1911
sS'argmatch'
p1912
(S'\n__stdcall argmatch(char * arg, char * * arglist, char * vallist, size_t valsize)\n'
p1913
V\u000aptrdiff_t argmatch(char *arg,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  bool bVar1;\u000a  long lVar2;\u000a  int iVar3;\u000a  size_t __n;\u000a  size_t sVar4;\u000a  long lVar5;\u000a  ptrdiff_t pVar6;\u000a  char *__s2;\u000a  char *__s1;\u000a  long local_50;\u000a  \u000a  __n = strlen(arg);\u000a  __s1 = *arglist;\u000a  if (__s1 == (char *)0x0) {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a  }\u000a  else {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a    lVar5 = 0;\u000a    __s2 = vallist;\u000a    do {\u000a      iVar3 = strncmp(__s1,arg,__n);\u000a      lVar2 = local_50;\u000a      if (iVar3 == 0) {\u000a        sVar4 = strlen(__s1);\u000a        if (sVar4 == __n) {\u000a          return lVar5;\u000a        }\u000a        lVar2 = lVar5;\u000a        if ((local_50 != -1) &&\u000a           ((vallist == (char *)0x0 ||\u000a            (iVar3 = memcmp(vallist + local_50 * valsize,__s2,valsize), lVar2 = local_50, iVar3 != 0\u000a            )))) {\u000a          bVar1 = true;\u000a          lVar2 = local_50;\u000a        }\u000a      }\u000a      local_50 = lVar2;\u000a      __s1 = arglist[lVar5 + 1];\u000a      lVar5 = lVar5 + 1;\u000a      __s2 = __s2 + valsize;\u000a    } while (__s1 != (char *)0x0);\u000a  }\u000a  pVar6 = -2;\u000a  if (!bVar1) {\u000a    pVar6 = local_50;\u000a  }\u000a  return pVar6;\u000a}\u000a\u000a
p1914
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R13,RCX\nMOV R14,RDX\nMOV RBP,RSI\nMOV R12,RDI\nCALL 0x00401c50\nMOV RBX,RAX\nMOV qword ptr [RSP + 0x20],RBP\nMOV R15,qword ptr [RBP]\nTEST R15,R15\nJZ 0x004094d7\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nMOV qword ptr [RSP + 0x18],R14\nXOR EBP,EBP\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,R15\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x00401b50\nTEST EAX,EAX\nJNZ 0x004094c0\nMOV RDI,R15\nCALL 0x00401c50\nCMP RAX,RBX\nJZ 0x004094f9\nCMP qword ptr [RSP + 0x8],-0x1\nJZ 0x004094b5\nMOV RAX,qword ptr [RSP + 0x18]\nTEST RAX,RAX\nJZ 0x004094ac\nMOV RDI,qword ptr [RSP + 0x8]\nIMUL RDI,R13\nADD RDI,RAX\nMOV RSI,R14\nMOV RDX,R13\nCALL 0x00401db0\nTEST EAX,EAX\nJZ 0x004094c0\nMOV AL,0x1\nMOV qword ptr [RSP + 0x10],RAX\nJMP 0x004094c0\nMOV qword ptr [RSP + 0x8],RBP\nNOP word ptr [RAX + RAX*0x1]\nMOV RAX,qword ptr [RSP + 0x20]\nMOV R15,qword ptr [RAX + RBP*0x8 + 0x8]\nINC RBP\nADD R14,R13\nTEST R15,R15\nJNZ 0x00409460\nJMP 0x004094e7\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nTEST byte ptr [RSP + 0x10],0x1\nMOV RBP,-0x2\nCMOVZ RBP,qword ptr [RSP + 0x8]\nMOV RAX,RBP\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1915
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 cd\n49 89 d6\n48 89 f5\n49 89 fc\ne8 21 88 ff ff\n48 89 c3\n48 89 6c 24 20\n4c 8b 7d 00\n4d 85 ff\n0f 84 93 00 00 00\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\n4c 89 74 24 18\n31 ed\n0f 1f 44 00 00\n4c 89 ff\n4c 89 e6\n48 89 da\ne8 e2 86 ff ff\n85 c0\n75 4e\n4c 89 ff\ne8 d6 87 ff ff\n48 39 d8\n74 7a\n48 83 7c 24 08 ff\n74 2e\n48 8b 44 24 18\n48 85 c0\n74 1b\n48 8b 7c 24 08\n49 0f af fd\n48 01 c7\n4c 89 f6\n4c 89 ea\ne8 08 89 ff ff\n85 c0\n74 14\nb0 01\n48 89 44 24 10\neb 0b\n48 89 6c 24 08\n66 0f 1f 44 00 00\n48 8b 44 24 20\n4c 8b 7c e8 08\n48 ff c5\n4d 01 ee\n4d 85 ff\n75 8b\neb 10\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\nf6 44 24 10 01\n48 c7 c5 fe ff ff ff\n48 0f 44 6c 24 08\n48 89 e8\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1916
S'.text:0000000000409410\n.text:0000000000409411\n.text:0000000000409413\n.text:0000000000409415\n.text:0000000000409417\n.text:0000000000409419\n.text:000000000040941a\n.text:000000000040941e\n.text:0000000000409421\n.text:0000000000409424\n.text:0000000000409427\n.text:000000000040942a\n.text:000000000040942f\n.text:0000000000409432\n.text:0000000000409437\n.text:000000000040943b\n.text:000000000040943e\n.text:0000000000409444\n.text:000000000040944d\n.text:000000000040944f\n.text:0000000000409454\n.text:0000000000409459\n.text:000000000040945b\n.text:0000000000409460\n.text:0000000000409463\n.text:0000000000409466\n.text:0000000000409469\n.text:000000000040946e\n.text:0000000000409470\n.text:0000000000409472\n.text:0000000000409475\n.text:000000000040947a\n.text:000000000040947d\n.text:000000000040947f\n.text:0000000000409485\n.text:0000000000409487\n.text:000000000040948c\n.text:000000000040948f\n.text:0000000000409491\n.text:0000000000409496\n.text:000000000040949a\n.text:000000000040949d\n.text:00000000004094a0\n.text:00000000004094a3\n.text:00000000004094a8\n.text:00000000004094aa\n.text:00000000004094ac\n.text:00000000004094ae\n.text:00000000004094b3\n.text:00000000004094b5\n.text:00000000004094ba\n.text:00000000004094c0\n.text:00000000004094c5\n.text:00000000004094ca\n.text:00000000004094cd\n.text:00000000004094d0\n.text:00000000004094d3\n.text:00000000004094d5\n.text:00000000004094d7\n.text:00000000004094e0\n.text:00000000004094e2\n.text:00000000004094e7\n.text:00000000004094ec\n.text:00000000004094f3\n.text:00000000004094f9\n.text:00000000004094fc\n.text:0000000000409500\n.text:0000000000409501\n.text:0000000000409503\n.text:0000000000409505\n.text:0000000000409507\n.text:0000000000409509\n.text:000000000040950a\n'
p1917
tp1918
sS'fwrite'
p1919
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1920
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_0060f2b8)();\u000a  return sVar1;\u000a}\u000a\u000a
p1921
S'JMP qword ptr [0x0060f2b8]\n'
p1922
S'ff 25 82 d2 20 00\n'
p1923
S'.plt:0000000000402030\n'
p1924
tp1925
sS'splitstring'
p1926
(S'\n__stdcall splitstring(char * s, char * separators, size_t * pos, size_t * len)\n'
p1927
V\u000a_Bool splitstring(char *s,char *separators,size_t *pos,size_t *len)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t *in_R8;\u000a  \u000a  if ((char)pos == 0) {\u000a    sVar1 = *len + *in_R8;\u000a    *len = sVar1;\u000a    if (s[sVar1] == 0) {\u000a      return false;\u000a    }\u000a    *len = sVar1 + 1;\u000a  }\u000a  else {\u000a    *len = 0;\u000a    *in_R8 = 0;\u000a  }\u000a  sVar1 = field_length(s + *len,separators);\u000a  *in_R8 = sVar1;\u000a  return true;\u000a}\u000a\u000a
p1928
S'PUSH RBX\nMOV RBX,R8\nTEST DL,DL\nJZ 0x00404938\nMOV qword ptr [RCX],0x0\nMOV qword ptr [RBX],0x0\nJMP 0x0040494d\nMOV RAX,qword ptr [RCX]\nADD RAX,qword ptr [RBX]\nMOV qword ptr [RCX],RAX\nCMP byte ptr [RDI + RAX*0x1],0x0\nJZ 0x0040495c\nINC RAX\nMOV qword ptr [RCX],RAX\nADD RDI,qword ptr [RCX]\nCALL 0x00404960\nMOV qword ptr [RBX],RAX\nMOV AL,0x1\nJMP 0x0040495e\nXOR EAX,EAX\nPOP RBX\nRET\n'
p1929
S'53\n4c 89 c3\n84 d2\n74 10\n48 c7 01 00 00 00 00\n48 c7 03 00 00 00 00\neb 15\n48 8b 01\n48 03 03\n48 89 01\n80 3c 07 00\n74 15\n48 ff c0\n48 89 01\n48 03 39\ne8 0b 00 00 00\n48 89 03\nb0 01\neb 02\n31 c0\n5b\nc3\n'
p1930
S'.text:0000000000404920\n.text:0000000000404921\n.text:0000000000404924\n.text:0000000000404926\n.text:0000000000404928\n.text:000000000040492f\n.text:0000000000404936\n.text:0000000000404938\n.text:000000000040493b\n.text:000000000040493e\n.text:0000000000404941\n.text:0000000000404945\n.text:0000000000404947\n.text:000000000040494a\n.text:000000000040494d\n.text:0000000000404950\n.text:0000000000404955\n.text:0000000000404958\n.text:000000000040495a\n.text:000000000040495c\n.text:000000000040495e\n.text:000000000040495f\n'
p1931
tp1932
sS'visit_limit'
p1933
(S'\n__stdcall visit_limit(process_data * procdata, void * context)\n'
p1934
V\u000aint visit_limit(process_data *procdata,void *context)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  \u000a  uVar2 = *(long *)((long)context + 8) + 1;\u000a  *(ulong *)((long)context + 8) = uVar2;\u000a  iVar1 = 8;\u000a  if (uVar2 < *(ulong *)context) {\u000a    iVar1 = 1;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1935
S'MOV RAX,qword ptr [RSI + 0x8]\nINC RAX\nMOV qword ptr [RSI + 0x8],RAX\nCMP RAX,qword ptr [RSI]\nMOV ECX,0x1\nMOV EAX,0x8\nCMOVC EAX,ECX\nRET\n'
p1936
S'48 8b 46 08\n48 ff c0\n48 89 46 08\n48 3b 06\nb9 01 00 00 00\nb8 08 00 00 00\n0f 42 c1\nc3\n'
p1937
S'.text:0000000000403cc0\n.text:0000000000403cc4\n.text:0000000000403cc7\n.text:0000000000403ccb\n.text:0000000000403cce\n.text:0000000000403cd3\n.text:0000000000403cd8\n.text:0000000000403cdb\n'
p1938
tp1939
sS'__do_global_dtors_aux'
p1940
(S'\n__stdcall __do_global_dtors_aux()\n'
p1941
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1942
S'CMP byte ptr [0x0060f4a8],0x0\nJNZ 0x0040218a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x004020f0\nPOP RBP\nMOV byte ptr [0x0060f4a8],0x1\nRET\n'
p1943
S'80 3d 31 d3 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 1e d3 20 00 01\nf3 c3\n'
p1944
S'.text:0000000000402170\n.text:0000000000402177\n.text:0000000000402179\n.text:000000000040217a\n.text:000000000040217d\n.text:0000000000402182\n.text:0000000000402183\n.text:000000000040218a\n'
p1945
tp1946
sS'c_isprint'
p1947
(S'\n__stdcall c_isprint()\n'
p1948
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1949
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1950
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1951
S'.text:0000000000409800\n.text:0000000000409803\n.text:0000000000409806\n.text:0000000000409809\n'
p1952
tp1953
sS'_fini'
p1954
(S'\n__stdcall _fini()\n'
p1955
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1956
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1957
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1958
S'.fini:0000000000409ef0\n.fini:0000000000409ef4\n.fini:0000000000409ef8\n'
p1959
tp1960
sS'visit'
p1961
(S'\n__stdcall visit(visitor * p, process_data * procdata, visitor * stop)\n'
p1962
V\u000aint visit(visitor *p,process_data *procdata,visitor *stop)\u000a\u000a{\u000a  uint uVar1;\u000a  uint uVar2;\u000a  uint uVar3;\u000a  visitor *in_RCX;\u000a  \u000a  uVar1 = (uint)procdata;\u000a  uVar3 = uVar1;\u000a  uVar2 = uVar1;\u000a  if (p != in_RCX) {\u000a    while (uVar2 != 0) {\u000a      uVar3 = (*p->inspector)((process_data *)stop,p->context);\u000a      p = p->next;\u000a      if (p == in_RCX) {\u000a        return uVar3;\u000a      }\u000a      uVar2 = uVar3 & uVar1;\u000a    }\u000a  }\u000a  return (int)uVar3;\u000a}\u000a\u000a
p1963
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RCX\nMOV R14,RDX\nMOV R15D,ESI\nMOV RBP,RDI\nCMP RBP,RBX\nJZ 0x0040429c\nTEST R15D,R15D\nJZ 0x0040429c\nNOP dword ptr [RAX]\nMOV RSI,qword ptr [RBP + 0x8]\nMOV RDI,R14\nCALL qword ptr [RBP]\nMOV RBP,qword ptr [RBP + 0x10]\nCMP RBP,RBX\nJZ 0x0040429f\nMOV ECX,EAX\nAND ECX,R15D\nJNZ 0x00404280\nJMP 0x0040429f\nMOV EAX,R15D\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1964
S'55\n41 57\n41 56\n53\n50\n48 89 cb\n49 89 d6\n41 89 f7\n48 89 fd\n48 39 dd\n74 24\n45 85 ff\n74 1f\n0f 1f 00\n48 8b 75 08\n4c 89 f7\nff 55 00\n48 8b 6d 10\n48 39 dd\n74 0c\n89 c1\n44 21 f9\n75 e6\neb 03\n44 89 f8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1965
S'.text:0000000000404260\n.text:0000000000404261\n.text:0000000000404263\n.text:0000000000404265\n.text:0000000000404266\n.text:0000000000404267\n.text:000000000040426a\n.text:000000000040426d\n.text:0000000000404270\n.text:0000000000404273\n.text:0000000000404276\n.text:0000000000404278\n.text:000000000040427b\n.text:000000000040427d\n.text:0000000000404280\n.text:0000000000404284\n.text:0000000000404287\n.text:000000000040428a\n.text:000000000040428e\n.text:0000000000404291\n.text:0000000000404293\n.text:0000000000404295\n.text:0000000000404298\n.text:000000000040429a\n.text:000000000040429c\n.text:000000000040429f\n.text:00000000004042a3\n.text:00000000004042a4\n.text:00000000004042a6\n.text:00000000004042a8\n.text:00000000004042a9\n'
p1966
tp1967
sS'rpl_fcntl'
p1968
(S'\n__stdcall rpl_fcntl()\n'
p1969
V\u000a/* WARNING: Removing unreachable block (ram,0x004091db) */\u000a/* WARNING: Removing unreachable block (ram,0x00409244) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff38 : 0x004091e9 */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint rpl_fcntl(void...)\u000a\u000a{\u000a  int have_dupfd_cloexec;\u000a  int __fd;\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  int __cmd;\u000a  uint __fd_00;\u000a  va_list arg;\u000a  ulong local_c8;\u000a  \u000a  if (__cmd == 0x406) {\u000a    if (have_dupfd_cloexec < 0) {\u000a      __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a    }\u000a    else {\u000a      __fd = fcntl(__fd_00,0x406,local_c8 & 0xffffffff);\u000a      have_dupfd_cloexec = 1;\u000a      if ((__fd < 0) && (piVar3 = __errno_location(), *piVar3 == 0x16)) {\u000a        __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a        have_dupfd_cloexec = -1;\u000a        if (__fd < 0) {\u000a          return __fd;\u000a        }\u000a      }\u000a    }\u000a    if (((-1 < __fd) && (have_dupfd_cloexec == -1)) &&\u000a       ((uVar1 = fcntl(__fd,1), (int)uVar1 < 0 ||\u000a        (iVar2 = fcntl(__fd,2,(ulong)(uVar1 | 1),(ulong)(uVar1 | 1)), iVar2 == -1)))) {\u000a      piVar3 = __errno_location();\u000a      iVar2 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar2;\u000a      __fd = -1;\u000a    }\u000a  }\u000a  else {\u000a    __fd = fcntl(__fd_00,__cmd,local_c8);\u000a  }\u000a  return __fd;\u000a}\u000a\u000a
p1970
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0xd8\nMOV R14D,EDI\nTEST AL,AL\nJZ 0x0040916b\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0x100 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RAX,dword ptr [RSP]\nCMP ESI,0x406\nJNZ 0x004091c6\nCMP EAX,0x28\nJA 0x004091db\nMOV RCX,qword ptr [RSP + 0x10]\nADD RCX,RAX\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x004091e9\nCMP EAX,0x28\nJA 0x00409244\nMOV RCX,RAX\nADD RCX,qword ptr [RSP + 0x10]\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x00409252\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV EBX,dword ptr [RCX]\nCMP dword ptr [0x0060f6a0],0x0\nJS 0x00409263\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00401bf0\nMOV EBP,EAX\nMOV R15D,0x1\nTEST EBP,EBP\nJNS 0x00409234\nCALL 0x00401b40\nCMP dword ptr [RAX],0x16\nJNZ 0x00409234\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00409120\nMOV EBP,EAX\nMOV R15D,0xffffffff\nTEST EBP,EBP\nJS 0x004092c6\nMOV dword ptr [0x0060f6a0],R15D\nTEST EBP,EBP\nJNS 0x00409277\nJMP 0x004092c6\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RDX,qword ptr [RCX]\nXOR EAX,EAX\nMOV EDI,R14D\nCALL 0x00401bf0\nMOV EBP,EAX\nJMP 0x004092c6\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00409120\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x004092c6\nCMP dword ptr [0x0060f6a0],-0x1\nJNZ 0x004092c6\nMOV ESI,0x1\nXOR EAX,EAX\nMOV EDI,EBP\nCALL 0x00401bf0\nMOV ECX,EAX\nTEST ECX,ECX\nJS 0x004092ac\nOR ECX,0x1\nMOV ESI,0x2\nXOR EAX,EAX\nMOV EDI,EBP\nMOV EDX,ECX\nCALL 0x00401bf0\nCMP EAX,-0x1\nJNZ 0x004092c6\nCALL 0x00401b40\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x00401d80\nMOV dword ptr [RBX],R14D\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0xd8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1971
S'55\n41 57\n41 56\n53\n48 81 ec d8 00 00 00\n41 89 fe\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 00 01 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 04 24\n81 fe 06 04 00 00\n75 15\n83 f8 28\n77 25\n48 8b 4c 24 10\n48 01 c1\n8d 40 08\n89 04 24\neb 23\n83 f8 28\n77 79\n48 89 c1\n48 03 4c 24 10\n8d 40 08\n89 04 24\neb 77\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n8b 19\n83 3d ae 64 20 00 00\n78 6f\n31 c0\n44 89 f7\n89 da\ne8 f0 89 ff ff\n89 c5\n41 bf 01 00 00 00\n85 ed\n79 28\ne8 2f 89 ff ff\n83 38 16\n75 1e\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 fc fe ff ff\n89 c5\n41 bf ff ff ff ff\n85 ed\n0f 88 92 00 00 00\n44 89 3d 65 64 20 00\n85 ed\n79 38\ne9 82 00 00 00\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n48 8b 11\n31 c0\n44 89 f7\ne8 91 89 ff ff\n89 c5\neb 63\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 af fe ff ff\n89 c5\n85 ed\n78 4f\n83 3d 22 64 20 00 ff\n75 46\nbe 01 00 00 00\n31 c0\n89 ef\ne8 62 89 ff ff\n89 c1\n85 c9\n78 18\n83 c9 01\nbe 02 00 00 00\n31 c0\n89 ef\n89 ca\ne8 49 89 ff ff\n83 f8 ff\n75 1a\ne8 8f 88 ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 c2 8a ff ff\n44 89 33\nbd ff ff ff ff\n89 e8\n48 81 c4 d8 00 00 00\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1972
S'.text:0000000000409120\n.text:0000000000409121\n.text:0000000000409123\n.text:0000000000409125\n.text:0000000000409126\n.text:000000000040912d\n.text:0000000000409130\n.text:0000000000409132\n.text:0000000000409134\n.text:0000000000409139\n.text:000000000040913e\n.text:0000000000409143\n.text:000000000040914b\n.text:0000000000409153\n.text:000000000040915b\n.text:0000000000409163\n.text:000000000040916b\n.text:0000000000409170\n.text:0000000000409175\n.text:000000000040917a\n.text:000000000040917f\n.text:0000000000409184\n.text:0000000000409189\n.text:0000000000409191\n.text:0000000000409196\n.text:000000000040919e\n.text:00000000004091a5\n.text:00000000004091a9\n.text:00000000004091af\n.text:00000000004091b1\n.text:00000000004091b4\n.text:00000000004091b6\n.text:00000000004091bb\n.text:00000000004091be\n.text:00000000004091c1\n.text:00000000004091c4\n.text:00000000004091c6\n.text:00000000004091c9\n.text:00000000004091cb\n.text:00000000004091ce\n.text:00000000004091d3\n.text:00000000004091d6\n.text:00000000004091d9\n.text:00000000004091db\n.text:00000000004091e0\n.text:00000000004091e4\n.text:00000000004091e9\n.text:00000000004091eb\n.text:00000000004091f2\n.text:00000000004091f4\n.text:00000000004091f6\n.text:00000000004091f9\n.text:00000000004091fb\n.text:0000000000409200\n.text:0000000000409202\n.text:0000000000409208\n.text:000000000040920a\n.text:000000000040920c\n.text:0000000000409211\n.text:0000000000409214\n.text:0000000000409216\n.text:0000000000409218\n.text:000000000040921a\n.text:000000000040921d\n.text:000000000040921f\n.text:0000000000409224\n.text:0000000000409226\n.text:000000000040922c\n.text:000000000040922e\n.text:0000000000409234\n.text:000000000040923b\n.text:000000000040923d\n.text:000000000040923f\n.text:0000000000409244\n.text:0000000000409249\n.text:000000000040924d\n.text:0000000000409252\n.text:0000000000409255\n.text:0000000000409257\n.text:000000000040925a\n.text:000000000040925f\n.text:0000000000409261\n.text:0000000000409263\n.text:0000000000409265\n.text:0000000000409267\n.text:000000000040926a\n.text:000000000040926c\n.text:0000000000409271\n.text:0000000000409273\n.text:0000000000409275\n.text:0000000000409277\n.text:000000000040927e\n.text:0000000000409280\n.text:0000000000409285\n.text:0000000000409287\n.text:0000000000409289\n.text:000000000040928e\n.text:0000000000409290\n.text:0000000000409292\n.text:0000000000409294\n.text:0000000000409297\n.text:000000000040929c\n.text:000000000040929e\n.text:00000000004092a0\n.text:00000000004092a2\n.text:00000000004092a7\n.text:00000000004092aa\n.text:00000000004092ac\n.text:00000000004092b1\n.text:00000000004092b4\n.text:00000000004092b7\n.text:00000000004092b9\n.text:00000000004092be\n.text:00000000004092c1\n.text:00000000004092c6\n.text:00000000004092c8\n.text:00000000004092cf\n.text:00000000004092d0\n.text:00000000004092d2\n.text:00000000004092d4\n.text:00000000004092d5\n'
p1973
tp1974
sS'mmalloca'
p1975
(S'\n__stdcall mmalloca(size_t n)\n'
p1976
V\u000avoid * mmalloca(size_t n)\u000a\u000a{\u000a  void **ppvVar1;\u000a  long lVar2;\u000a  void **ppvVar3;\u000a  \u000a  if (0xffffffffffffffef < n) {\u000a    return (void *)0x0;\u000a  }\u000a  ppvVar3 = (void **)malloc(n + 0x10);\u000a  if (ppvVar3 != (void **)0x0) {\u000a    ppvVar1 = ppvVar3 + 2;\u000a    *(undefined4 *)((long)ppvVar3 + 0xc) = 0x1415fb4a;\u000a    lVar2 = (long)ppvVar3 + ((ulong)ppvVar1 / 0x101) * -0x101 + 0x10;\u000a    *ppvVar3 = mmalloca_results[lVar2];\u000a    *(void ***)(mmalloca_results + lVar2) = ppvVar1;\u000a    return ppvVar1;\u000a  }\u000a  return (void *)0x0;\u000a}\u000a\u000a
p1977
S'CMP RDI,-0x11\nJA 0x00409ce5\nPUSH RAX\nADD RDI,0x10\nCALL 0x00401e90\nMOV RSI,RAX\nTEST RSI,RSI\nLEA RSP,[RSP + 0x8]\nJZ 0x00409ceb\nLEA RCX,[RSI + 0x10]\nMOV dword ptr [RSI + 0xc],0x1415fb4a\nMOV RDX,-0xff00ff00ff00ff\nMOV RAX,RCX\nMUL RDX\nSHR RDX,0x8\nMOV RAX,RDX\nSHL RAX,0x8\nADD RAX,RDX\nNEG RAX\nLEA RAX,[RSI + RAX*0x1 + 0x10]\nMOV RDX,qword ptr [0x60f6b0 + RAX*0x8]\nMOV qword ptr [RSI],RDX\nMOV qword ptr [0x60f6b0 + RAX*0x8],RCX\nMOV RAX,RCX\nRET\nXOR ECX,ECX\nMOV RAX,RCX\nRET\nXOR ECX,ECX\nMOV RAX,RCX\nRET\n'
p1978
S'48 83 ff ef\n77 5f\n50\n48 83 c7 10\ne8 00 82 ff ff\n48 89 c6\n48 85 f6\n48 8d 64 24 08\n74 4e\n48 8d 4e 10\nc7 46 0c 4a fb 15 14\n48 ba 01 ff 00 ff 00 ff 00 ff\n48 89 c8\n48 f7 e2\n48 c1 ea 08\n48 89 d0\n48 c1 e0 08\n48 01 d0\n48 f7 d8\n48 8d 44 06 10\n48 8b 14 c5 b0 f6 60 00\n48 89 16\n48 89 0c c5 b0 f6 60 00\n48 89 c8\nc3\n31 c9\n48 89 c8\nc3\n31 c9\n48 89 c8\nc3\n'
p1979
S'.text:0000000000409c80\n.text:0000000000409c84\n.text:0000000000409c86\n.text:0000000000409c87\n.text:0000000000409c8b\n.text:0000000000409c90\n.text:0000000000409c93\n.text:0000000000409c96\n.text:0000000000409c9b\n.text:0000000000409c9d\n.text:0000000000409ca1\n.text:0000000000409ca8\n.text:0000000000409cb2\n.text:0000000000409cb5\n.text:0000000000409cb8\n.text:0000000000409cbc\n.text:0000000000409cbf\n.text:0000000000409cc3\n.text:0000000000409cc6\n.text:0000000000409cc9\n.text:0000000000409cce\n.text:0000000000409cd6\n.text:0000000000409cd9\n.text:0000000000409ce1\n.text:0000000000409ce4\n.text:0000000000409ce5\n.text:0000000000409ce7\n.text:0000000000409cea\n.text:0000000000409ceb\n.text:0000000000409ced\n.text:0000000000409cf0\n'
p1980
tp1981
sS'__fpending'
p1982
(S'\n__stdcall __fpending()\n'
p1983
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_0060f060)();\u000a  return;\u000a}\u000a\u000a
p1984
S'JMP qword ptr [0x0060f060]\n'
p1985
S'ff 25 da d4 20 00\n'
p1986
S'.plt:0000000000401b80\n'
p1987
tp1988
sS'visit_basename'
p1989
(S'\n__stdcall visit_basename(process_data * procdata, void * context)\n'
p1990
V\u000aint visit_basename(process_data *procdata,void *context)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = last_component(procdata->original_filename);\u000a  procdata->munged_filename = pcVar1;\u000a  return 1;\u000a}\u000a\u000a
p1991
S'PUSH RBX\nMOV RBX,RDI\nMOV RDI,qword ptr [RBX + 0x10]\nCALL 0x00404ac0\nMOV qword ptr [RBX + 0x20],RAX\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1992
S'53\n48 89 fb\n48 8b 7b 10\ne8 a3 11 00 00\n48 89 43 20\nb8 01 00 00 00\n5b\nc3\n'
p1993
S'.text:0000000000403910\n.text:0000000000403911\n.text:0000000000403914\n.text:0000000000403918\n.text:000000000040391d\n.text:0000000000403921\n.text:0000000000403926\n.text:0000000000403927\n'
p1994
tp1995
s.