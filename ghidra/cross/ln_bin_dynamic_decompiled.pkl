(dp0
S'ungetc'
p1
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p2
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_0060d1a0)();\u000a  return iVar1;\u000a}\u000a\u000a
p3
S'JMP qword ptr [0x0060d1a0]\n'
p4
S'ff 25 5a b8 20 00\n'
p5
S'.plt:0000000000401940\n'
p6
tp7
sS'version_etc_arn'
p8
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p9
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_00409e1b,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x406c07;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x406c88;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x406d1c;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p10
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00406a98\nMOV EDX,0x409e08\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401a50\nJMP 0x00406aad\nMOV EDX,0x409e14\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401a50\nXOR EDI,EDI\nMOV ESI,0x409e1b\nMOV EDX,0x5\nCALL 0x00401750\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x40a0f0\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401a50\nXOR EDI,EDI\nMOV ESI,0x409e1f\nMOV EDX,0x5\nCALL 0x00401750\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00401850\nCMP R12,0x9\nJA 0x00406b36\nJMP qword ptr [0x409db8 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x409eea\nMOV EDX,0x5\nCALL 0x00401750\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401a50\nXOR EDI,EDI\nMOV ESI,0x40a029\nMOV EDX,0x5\nCALL 0x00401750\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401a50\nADD RSP,0x38\nJMP 0x00406da7\nXOR EDI,EDI\nMOV ESI,0x409efa\nMOV EDX,0x5\nCALL 0x00401750\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401a50\nXOR EDI,EDI\nMOV ESI,0x409f11\nMOV EDX,0x5\nCALL 0x00401750\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401a50\nXOR EDI,EDI\nMOV ESI,0x409f2d\nMOV EDX,0x5\nCALL 0x00401750\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401a50\nADD RSP,0x18\nJMP 0x00406da7\nXOR EDI,EDI\nMOV ESI,0x409f4d\nMOV EDX,0x5\nCALL 0x00401750\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401a50\nADD RSP,0x18\nJMP 0x00406da7\nXOR EDI,EDI\nMOV ESI,0x409f71\nMOV EDX,0x5\nCALL 0x00401750\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401a50\nADD RSP,0x28\nJMP 0x00406da7\nXOR EDI,EDI\nMOV ESI,0x409f99\nMOV EDX,0x5\nCALL 0x00401750\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401a50\nADD RSP,0x28\nJMP 0x00406da7\nXOR EDI,EDI\nMOV ESI,0x409fc5\nMOV EDX,0x5\nCALL 0x00401750\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401a50\nADD RSP,0x38\nJMP 0x00406da7\nXOR EDI,EDI\nMOV ESI,0x409ff5\nMOV EDX,0x5\nCALL 0x00401750\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401a50\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401660\n'
p11
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba 08 9e 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 ba af ff ff\neb 15\nba 14 9e 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 a3 af ff ff\n31 ff\nbe 1b 9e 40 00\nba 05 00 00 00\ne8 92 ac ff ff\n48 89 c1\nbe 01 00 00 00\nba f0 a0 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 75 af ff ff\n31 ff\nbe 1f 9e 40 00\nba 05 00 00 00\ne8 64 ac ff ff\n48 89 c7\n4c 89 f6\ne8 59 ad ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 b8 9d 40 00\n31 ff\nbe ea 9e 40 00\nba 05 00 00 00\ne8 3a ac ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 1a af ff ff\n31 ff\nbe 29 a0 40 00\nba 05 00 00 00\ne8 09 ac ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 d1 ae ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe fa 9e 40 00\nba 05 00 00 00\ne8 b7 ab ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 93 ae ff ff\n31 ff\nbe 11 9f 40 00\nba 05 00 00 00\ne8 82 ab ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 5a ae ff ff\n31 ff\nbe 2d 9f 40 00\nba 05 00 00 00\ne8 49 ab ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 24 ae ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe 4d 9f 40 00\nba 05 00 00 00\ne8 0a ab ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 e2 ad ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 71 9f 40 00\nba 05 00 00 00\ne8 c8 aa ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 98 ad ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe 99 9f 40 00\nba 05 00 00 00\ne8 7e aa ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 4e ad ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe c5 9f 40 00\nba 05 00 00 00\ne8 34 aa ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 fc ac ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe f5 9f 40 00\nba 05 00 00 00\ne8 e5 a9 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 ad ac ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 ac a8 ff ff\n'
p12
S'.text:0000000000406a60\n.text:0000000000406a62\n.text:0000000000406a64\n.text:0000000000406a66\n.text:0000000000406a67\n.text:0000000000406a68\n.text:0000000000406a6b\n.text:0000000000406a6e\n.text:0000000000406a71\n.text:0000000000406a74\n.text:0000000000406a77\n.text:0000000000406a7a\n.text:0000000000406a7f\n.text:0000000000406a82\n.text:0000000000406a84\n.text:0000000000406a89\n.text:0000000000406a8b\n.text:0000000000406a8e\n.text:0000000000406a91\n.text:0000000000406a96\n.text:0000000000406a98\n.text:0000000000406a9d\n.text:0000000000406a9f\n.text:0000000000406aa2\n.text:0000000000406aa5\n.text:0000000000406aa8\n.text:0000000000406aad\n.text:0000000000406aaf\n.text:0000000000406ab4\n.text:0000000000406ab9\n.text:0000000000406abe\n.text:0000000000406ac1\n.text:0000000000406ac6\n.text:0000000000406acb\n.text:0000000000406ad1\n.text:0000000000406ad3\n.text:0000000000406ad6\n.text:0000000000406adb\n.text:0000000000406add\n.text:0000000000406ae2\n.text:0000000000406ae7\n.text:0000000000406aec\n.text:0000000000406aef\n.text:0000000000406af2\n.text:0000000000406af7\n.text:0000000000406afb\n.text:0000000000406afd\n.text:0000000000406b05\n.text:0000000000406b07\n.text:0000000000406b0c\n.text:0000000000406b11\n.text:0000000000406b16\n.text:0000000000406b19\n.text:0000000000406b1c\n.text:0000000000406b21\n.text:0000000000406b23\n.text:0000000000406b26\n.text:0000000000406b2a\n.text:0000000000406b2b\n.text:0000000000406b2d\n.text:0000000000406b2f\n.text:0000000000406b31\n.text:0000000000406b36\n.text:0000000000406b38\n.text:0000000000406b3d\n.text:0000000000406b42\n.text:0000000000406b47\n.text:0000000000406b4a\n.text:0000000000406b4d\n.text:0000000000406b51\n.text:0000000000406b55\n.text:0000000000406b5a\n.text:0000000000406b5f\n.text:0000000000406b62\n.text:0000000000406b66\n.text:0000000000406b6a\n.text:0000000000406b6e\n.text:0000000000406b72\n.text:0000000000406b76\n.text:0000000000406b7a\n.text:0000000000406b7f\n.text:0000000000406b83\n.text:0000000000406b88\n.text:0000000000406b8a\n.text:0000000000406b8f\n.text:0000000000406b94\n.text:0000000000406b99\n.text:0000000000406b9c\n.text:0000000000406b9f\n.text:0000000000406ba3\n.text:0000000000406ba8\n.text:0000000000406baa\n.text:0000000000406bad\n.text:0000000000406bb1\n.text:0000000000406bb2\n.text:0000000000406bb4\n.text:0000000000406bb6\n.text:0000000000406bb8\n.text:0000000000406bbd\n.text:0000000000406bbf\n.text:0000000000406bc4\n.text:0000000000406bc9\n.text:0000000000406bce\n.text:0000000000406bd1\n.text:0000000000406bd4\n.text:0000000000406bd8\n.text:0000000000406bdc\n.text:0000000000406be1\n.text:0000000000406be3\n.text:0000000000406be6\n.text:0000000000406bea\n.text:0000000000406beb\n.text:0000000000406bed\n.text:0000000000406bef\n.text:0000000000406bf1\n.text:0000000000406bf6\n.text:0000000000406bf8\n.text:0000000000406bfd\n.text:0000000000406c02\n.text:0000000000406c07\n.text:0000000000406c0a\n.text:0000000000406c0d\n.text:0000000000406c11\n.text:0000000000406c15\n.text:0000000000406c19\n.text:0000000000406c1e\n.text:0000000000406c20\n.text:0000000000406c23\n.text:0000000000406c27\n.text:0000000000406c2c\n.text:0000000000406c30\n.text:0000000000406c35\n.text:0000000000406c37\n.text:0000000000406c3c\n.text:0000000000406c41\n.text:0000000000406c46\n.text:0000000000406c49\n.text:0000000000406c4c\n.text:0000000000406c50\n.text:0000000000406c54\n.text:0000000000406c59\n.text:0000000000406c5e\n.text:0000000000406c61\n.text:0000000000406c65\n.text:0000000000406c69\n.text:0000000000406c6e\n.text:0000000000406c72\n.text:0000000000406c77\n.text:0000000000406c79\n.text:0000000000406c7e\n.text:0000000000406c83\n.text:0000000000406c88\n.text:0000000000406c8b\n.text:0000000000406c8e\n.text:0000000000406c92\n.text:0000000000406c96\n.text:0000000000406c9a\n.text:0000000000406c9f\n.text:0000000000406ca4\n.text:0000000000406ca7\n.text:0000000000406cab\n.text:0000000000406caf\n.text:0000000000406cb3\n.text:0000000000406cb8\n.text:0000000000406cbc\n.text:0000000000406cc1\n.text:0000000000406cc3\n.text:0000000000406cc8\n.text:0000000000406ccd\n.text:0000000000406cd2\n.text:0000000000406cd5\n.text:0000000000406cd8\n.text:0000000000406cdc\n.text:0000000000406ce0\n.text:0000000000406ce5\n.text:0000000000406cea\n.text:0000000000406ced\n.text:0000000000406cf1\n.text:0000000000406cf5\n.text:0000000000406cf9\n.text:0000000000406cfd\n.text:0000000000406d02\n.text:0000000000406d06\n.text:0000000000406d0b\n.text:0000000000406d0d\n.text:0000000000406d12\n.text:0000000000406d17\n.text:0000000000406d1c\n.text:0000000000406d1f\n.text:0000000000406d22\n.text:0000000000406d26\n.text:0000000000406d2a\n.text:0000000000406d2e\n.text:0000000000406d33\n.text:0000000000406d38\n.text:0000000000406d3b\n.text:0000000000406d3f\n.text:0000000000406d43\n.text:0000000000406d47\n.text:0000000000406d4b\n.text:0000000000406d4f\n.text:0000000000406d54\n.text:0000000000406d58\n.text:0000000000406d5a\n.text:0000000000406d5c\n.text:0000000000406d61\n.text:0000000000406d66\n.text:0000000000406d6b\n.text:0000000000406d6e\n.text:0000000000406d71\n.text:0000000000406d75\n.text:0000000000406d79\n.text:0000000000406d7e\n.text:0000000000406d83\n.text:0000000000406d86\n.text:0000000000406d8a\n.text:0000000000406d8e\n.text:0000000000406d92\n.text:0000000000406d96\n.text:0000000000406d9a\n.text:0000000000406d9e\n.text:0000000000406da3\n.text:0000000000406da7\n.text:0000000000406da8\n.text:0000000000406daa\n.text:0000000000406dac\n.text:0000000000406dae\n.text:0000000000406daf\n'
p13
tp14
sS'transfer_entries'
p15
(S'\n__stdcall transfer_entries(Hash_table * dst, Hash_table * src)\n'
p16
V\u000a_Bool transfer_entries(Hash_table *dst,Hash_table *src)\u000a\u000a{\u000a  void *key;\u000a  hash_entry *phVar1;\u000a  hash_entry *entry;\u000a  hash_entry *phVar2;\u000a  char in_DL;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar3 = src->bucket;\u000a  if (phVar3 < src->bucket_limit) {\u000a    do {\u000a      if (phVar3->data != (void *)0x0) {\u000a        entry = phVar3->next;\u000a        while (entry != (hash_entry *)0x0) {\u000a          key = entry->data;\u000a          phVar1 = safe_hasher(dst,key);\u000a          phVar2 = entry->next;\u000a          if (phVar1->data == (void *)0x0) {\u000a            phVar1->data = key;\u000a            dst->n_buckets_used = dst->n_buckets_used + 1;\u000a            free_entry(dst,entry);\u000a            entry = phVar2;\u000a          }\u000a          else {\u000a            entry->next = phVar1->next;\u000a            phVar1->next = entry;\u000a            entry = phVar2;\u000a          }\u000a        }\u000a        key = phVar3->data;\u000a        phVar3->next = (hash_entry *)0x0;\u000a        if (in_DL == 0) {\u000a          entry = safe_hasher(dst,key);\u000a          if (entry->data == (void *)0x0) {\u000a            entry->data = key;\u000a            dst->n_buckets_used = dst->n_buckets_used + 1;\u000a          }\u000a          else {\u000a            phVar2 = allocate_entry(dst);\u000a            if (phVar2 == (hash_entry *)0x0) {\u000a              return false;\u000a            }\u000a            phVar2->data = key;\u000a            phVar2->next = entry->next;\u000a            entry->next = phVar2;\u000a          }\u000a          phVar3->data = (void *)0x0;\u000a          src->n_buckets_used = src->n_buckets_used - 1;\u000a        }\u000a      }\u000a      phVar3 = phVar3 + 1;\u000a    } while (phVar3 < src->bucket_limit);\u000a  }\u000a  return true;\u000a}\u000a\u000a
p17
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12D,EDX\nMOV RBP,RSI\nMOV R14,RDI\nMOV R15,qword ptr [RBP]\nMOV AL,0x1\nCMP R15,qword ptr [RBP + 0x8]\nJNC 0x004049e2\nMOV qword ptr [RSP],RBP\nNOP dword ptr [RAX + RAX*0x1]\nCMP qword ptr [R15],0x0\nJZ 0x004049d2\nMOV RBX,qword ptr [R15 + 0x8]\nTEST RBX,RBX\nJZ 0x0040497a\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV R13,qword ptr [RBX]\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x004041f0\nMOV RBP,qword ptr [RBX + 0x8]\nCMP qword ptr [RAX],0x0\nJZ 0x00404960\nMOV RCX,qword ptr [RAX + 0x8]\nMOV qword ptr [RBX + 0x8],RCX\nMOV qword ptr [RAX + 0x8],RBX\nJMP 0x00404972\nMOV qword ptr [RAX],R13\nINC qword ptr [R14 + 0x18]\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00404f60\nTEST RBP,RBP\nMOV RBX,RBP\nJNZ 0x00404930\nMOV R13,qword ptr [R15]\nMOV qword ptr [R15 + 0x8],0x0\nTEST R12B,R12B\nMOV RBP,qword ptr [RSP]\nJNZ 0x004049d2\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x004041f0\nMOV RBX,RAX\nCMP qword ptr [RBX],0x0\nJZ 0x004049c0\nMOV RDI,R14\nCALL 0x00404ca0\nTEST RAX,RAX\nJZ 0x004049f1\nMOV qword ptr [RAX],R13\nMOV RCX,qword ptr [RBX + 0x8]\nMOV qword ptr [RAX + 0x8],RCX\nMOV qword ptr [RBX + 0x8],RAX\nJMP 0x004049c7\nMOV qword ptr [RBX],R13\nINC qword ptr [R14 + 0x18]\nMOV qword ptr [R15],0x0\nDEC qword ptr [RBP + 0x18]\nADD R15,0x10\nCMP R15,qword ptr [RBP + 0x8]\nJC 0x00404910\nMOV AL,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EAX,EAX\nJMP 0x004049e2\n'
p18
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n41 89 d4\n48 89 f5\n49 89 fe\n4c 8b 7d 00\nb0 01\n4c 3b 7d 08\n0f 83 de 00 00 00\n48 89 2c 24\n0f 1f 84 00 00 00 00 00\n49 83 3f 00\n0f 84 b8 00 00 00\n49 8b 5f 08\n48 85 db\n74 57\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 8b 2b\n4c 89 f7\n4c 89 ee\ne8 b2 f8 ff ff\n48 8b 6b 08\n48 83 38 00\n74 18\n48 8b 48 08\n48 89 4b 08\n48 89 58 08\neb 1c\n4c 89 28\n49 ff 46 18\n4c 89 f7\n48 89 de\ne8 ee 05 00 00\n48 85 ed\n48 89 eb\n75 b6\n4d 8b 2f\n49 c7 47 08 00 00 00 00\n45 84 e4\n48 8b 2c 24\n75 44\n4c 89 f7\n4c 89 ee\ne8 57 f8 ff ff\n48 89 c3\n48 83 3b 00\n74 1e\n4c 89 f7\ne8 f6 02 00 00\n48 85 c0\n74 42\n4c 89 28\n48 8b 4b 08\n48 89 48 08\n48 89 43 08\neb 07\n4c 89 2b\n49 ff 46 18\n49 c7 07 00 00 00 00\n48 ff 4d 18\n49 83 c7 10\n4c 3b 7d 08\n0f 82 30 ff ff ff\nb0 01\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 c0\neb ed\n'
p19
S'.text:00000000004048e0\n.text:00000000004048e1\n.text:00000000004048e3\n.text:00000000004048e5\n.text:00000000004048e7\n.text:00000000004048e9\n.text:00000000004048ea\n.text:00000000004048eb\n.text:00000000004048ee\n.text:00000000004048f1\n.text:00000000004048f4\n.text:00000000004048f8\n.text:00000000004048fa\n.text:00000000004048fe\n.text:0000000000404904\n.text:0000000000404908\n.text:0000000000404910\n.text:0000000000404914\n.text:000000000040491a\n.text:000000000040491e\n.text:0000000000404921\n.text:0000000000404923\n.text:0000000000404930\n.text:0000000000404933\n.text:0000000000404936\n.text:0000000000404939\n.text:000000000040493e\n.text:0000000000404942\n.text:0000000000404946\n.text:0000000000404948\n.text:000000000040494c\n.text:0000000000404950\n.text:0000000000404954\n.text:0000000000404960\n.text:0000000000404963\n.text:0000000000404967\n.text:000000000040496a\n.text:000000000040496d\n.text:0000000000404972\n.text:0000000000404975\n.text:0000000000404978\n.text:000000000040497a\n.text:000000000040497d\n.text:0000000000404985\n.text:0000000000404988\n.text:000000000040498c\n.text:000000000040498e\n.text:0000000000404991\n.text:0000000000404994\n.text:0000000000404999\n.text:000000000040499c\n.text:00000000004049a0\n.text:00000000004049a2\n.text:00000000004049a5\n.text:00000000004049aa\n.text:00000000004049ad\n.text:00000000004049af\n.text:00000000004049b2\n.text:00000000004049b6\n.text:00000000004049ba\n.text:00000000004049be\n.text:00000000004049c0\n.text:00000000004049c3\n.text:00000000004049c7\n.text:00000000004049ce\n.text:00000000004049d2\n.text:00000000004049d6\n.text:00000000004049da\n.text:00000000004049e0\n.text:00000000004049e2\n.text:00000000004049e6\n.text:00000000004049e7\n.text:00000000004049e9\n.text:00000000004049eb\n.text:00000000004049ed\n.text:00000000004049ef\n.text:00000000004049f0\n.text:00000000004049f1\n.text:00000000004049f3\n'
p20
tp21
sS'file_name_concat'
p22
(S'\n__stdcall file_name_concat(char * dir, char * abase, char * * base_in_result)\n'
p23
V\u000achar * file_name_concat(char *dir,char *abase,char **base_in_result)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = mfile_name_concat(dir,abase,base_in_result);\u000a  if (pcVar1 != (char *)0x0) {\u000a    return pcVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p24
S'PUSH RAX\nCALL 0x00403ec0\nTEST RAX,RAX\nJZ 0x00403ead\nPOP RCX\nRET\nCALL 0x00407110\n'
p25
S'50\ne8 1a 00 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 32 00 00\n'
p26
S'.text:0000000000403ea0\n.text:0000000000403ea1\n.text:0000000000403ea6\n.text:0000000000403ea9\n.text:0000000000403eab\n.text:0000000000403eac\n.text:0000000000403ead\n'
p27
tp28
sS'rpl_fclose'
p29
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p30
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00407f79;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00407f79:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p31
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x004018c0\nTEST EAX,EAX\nJS 0x00407f79\nMOV RDI,RBX\nCALL 0x00401950\nTEST EAX,EAX\nJZ 0x00407f47\nMOV RDI,RBX\nCALL 0x004018c0\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x004017d0\nCMP RAX,-0x1\nJZ 0x00407f79\nMOV RDI,RBX\nCALL 0x004073f0\nTEST EAX,EAX\nJZ 0x00407f79\nCALL 0x00401670\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x00401720\nTEST EBP,EBP\nJZ 0x00407f72\nCALL 0x00401670\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00401720\n'
p32
S'55\n53\n50\n48 89 fb\ne8 a5 99 ff ff\n85 c0\n78 5a\n48 89 df\ne8 29 9a ff ff\n85 c0\n74 1c\n48 89 df\ne8 8d 99 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 8f 98 ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 a1 f4 ff ff\n85 c0\n74 26\ne8 18 97 ff ff\n8b 28\n48 89 df\ne8 be 97 ff ff\n85 ed\n74 0c\ne8 05 97 ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 99 97 ff ff\n'
p33
S'.text:0000000000407f10\n.text:0000000000407f11\n.text:0000000000407f12\n.text:0000000000407f13\n.text:0000000000407f16\n.text:0000000000407f1b\n.text:0000000000407f1d\n.text:0000000000407f1f\n.text:0000000000407f22\n.text:0000000000407f27\n.text:0000000000407f29\n.text:0000000000407f2b\n.text:0000000000407f2e\n.text:0000000000407f33\n.text:0000000000407f35\n.text:0000000000407f3a\n.text:0000000000407f3c\n.text:0000000000407f41\n.text:0000000000407f45\n.text:0000000000407f47\n.text:0000000000407f4a\n.text:0000000000407f4f\n.text:0000000000407f51\n.text:0000000000407f53\n.text:0000000000407f58\n.text:0000000000407f5a\n.text:0000000000407f5d\n.text:0000000000407f62\n.text:0000000000407f64\n.text:0000000000407f66\n.text:0000000000407f6b\n.text:0000000000407f6d\n.text:0000000000407f72\n.text:0000000000407f76\n.text:0000000000407f77\n.text:0000000000407f78\n.text:0000000000407f79\n.text:0000000000407f7c\n.text:0000000000407f80\n.text:0000000000407f81\n.text:0000000000407f82\n'
p34
tp35
sS'strncmp'
p36
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p37
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_0060d048)();\u000a  return iVar1;\u000a}\u000a\u000a
p38
S'JMP qword ptr [0x0060d048]\n'
p39
S'ff 25 b2 b9 20 00\n'
p40
S'.plt:0000000000401690\n'
p41
tp42
sS'xnrealloc'
p43
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p44
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p45
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00406fb4\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00406fc0\nPUSH RAX\nCALL 0x00407110\n'
p46
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p47
S'.text:0000000000406fa0\n.text:0000000000406fa3\n.text:0000000000406fa6\n.text:0000000000406fa9\n.text:0000000000406fab\n.text:0000000000406faf\n.text:0000000000406fb2\n.text:0000000000406fb4\n.text:0000000000406fb5\n'
p48
tp49
sS'mfile_name_concat'
p50
(S'\n__stdcall mfile_name_concat(char * dir, char * abase, char * * base_in_result)\n'
p51
V\u000achar * mfile_name_concat(char *dir,char *abase,char **base_in_result)\u000a\u000a{\u000a  char *name;\u000a  size_t sVar1;\u000a  char *__s;\u000a  size_t sVar2;\u000a  undefined *puVar3;\u000a  long lVar4;\u000a  char *pcVar5;\u000a  bool bVar6;\u000a  \u000a  name = last_component(dir);\u000a  sVar1 = base_len(name);\u000a  if (sVar1 == 0) {\u000a    bVar6 = false;\u000a  }\u000a  else {\u000a    bVar6 = name[sVar1 - 1] != '/';\u000a  }\u000a  __s = longest_relative_suffix(abase);\u000a  sVar2 = strlen(__s);\u000a  pcVar5 = (char *)malloc((size_t)(name + (sVar1 - (long)dir) + sVar2 + 1 + (ulong)bVar6));\u000a  if (pcVar5 == (char *)0x0) {\u000a    pcVar5 = (char *)0x0;\u000a  }\u000a  else {\u000a    puVar3 = (undefined *)__mempcpy_chk(pcVar5,dir,name + (sVar1 - (long)dir),0xffffffffffffffff);\u000a    *puVar3 = 0x2f;\u000a    if (base_in_result != (char **)0x0) {\u000a      lVar4 = 0;\u000a      if (*abase == '/') {\u000a        lVar4 = -1;\u000a      }\u000a      *base_in_result = puVar3 + (ulong)bVar6 + lVar4;\u000a    }\u000a    puVar3 = (undefined *)__mempcpy_chk(puVar3 + (ulong)bVar6,__s,sVar2,0xffffffffffffffff);\u000a    *puVar3 = 0;\u000a  }\u000a  return pcVar5;\u000a}\u000a\u000a
p52
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV qword ptr [RSP + 0x10],RDX\nMOV R14,RSI\nMOV R12,RDI\nCALL 0x00403d10\nMOV RBP,RAX\nMOV RDI,RBP\nCALL 0x00403d70\nMOV RBX,RBP\nSUB RBX,R12\nADD RBX,RAX\nTEST RAX,RAX\nJZ 0x00403f01\nCMP byte ptr [RBP + RAX*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00403f03\nXOR EAX,EAX\nMOVZX R13D,AL\nMOV qword ptr [RSP + 0x8],R14\nMOV RDI,R14\nCALL 0x00403fb0\nMOV RBP,RAX\nMOV RDI,RBP\nCALL 0x00401770\nMOV R15,RAX\nLEA RAX,[RBX + R13*0x1]\nLEA RDI,[R15 + RAX*0x1 + 0x1]\nCALL 0x00401910\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00403f92\nMOV RCX,-0x1\nMOV RDI,R14\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x00401650\nMOV byte ptr [RAX],0x2f\nADD R13,RAX\nMOV RCX,qword ptr [RSP + 0x10]\nTEST RCX,RCX\nJZ 0x00403f78\nXOR EAX,EAX\nMOV RDX,qword ptr [RSP + 0x8]\nCMP byte ptr [RDX],0x2f\nMOV RDX,-0x1\nCMOVZ RAX,RDX\nADD RAX,R13\nMOV qword ptr [RCX],RAX\nMOV RCX,-0x1\nMOV RDI,R13\nMOV RSI,RBP\nMOV RDX,R15\nCALL 0x00401650\nMOV byte ptr [RAX],0x0\nJMP 0x00403f95\nXOR R14D,R14D\nMOV RAX,R14\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p53
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n48 89 54 24 10\n49 89 f6\n49 89 fc\ne8 32 fe ff ff\n48 89 c5\n48 89 ef\ne8 87 fe ff ff\n48 89 eb\n4c 29 e3\n48 01 c3\n48 85 c0\n74 0a\n80 7c 05 ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 e8\n4c 89 74 24 08\n4c 89 f7\ne8 9c 00 00 00\n48 89 c5\n48 89 ef\ne8 51 d8 ff ff\n49 89 c7\n4a 8d 04 2b\n49 8d 7c 07 01\ne8 e0 d9 ff ff\n49 89 c6\n4d 85 f6\n74 5a\n48 c7 c1 ff ff ff ff\n4c 89 f7\n4c 89 e6\n48 89 da\ne8 03 d7 ff ff\nc6 00 2f\n49 01 c5\n48 8b 4c 24 10\n48 85 c9\n74 1b\n31 c0\n48 8b 54 24 08\n80 3a 2f\n48 c7 c2 ff ff ff ff\n48 0f 44 c2\n4c 01 e8\n48 89 01\n48 c7 c1 ff ff ff ff\n4c 89 ef\n48 89 ee\n4c 89 fa\ne8 c3 d6 ff ff\nc6 00 00\neb 03\n45 31 f6\n4c 89 f0\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p54
S'.text:0000000000403ec0\n.text:0000000000403ec1\n.text:0000000000403ec3\n.text:0000000000403ec5\n.text:0000000000403ec7\n.text:0000000000403ec9\n.text:0000000000403eca\n.text:0000000000403ece\n.text:0000000000403ed3\n.text:0000000000403ed6\n.text:0000000000403ed9\n.text:0000000000403ede\n.text:0000000000403ee1\n.text:0000000000403ee4\n.text:0000000000403ee9\n.text:0000000000403eec\n.text:0000000000403eef\n.text:0000000000403ef2\n.text:0000000000403ef5\n.text:0000000000403ef7\n.text:0000000000403efc\n.text:0000000000403eff\n.text:0000000000403f01\n.text:0000000000403f03\n.text:0000000000403f07\n.text:0000000000403f0c\n.text:0000000000403f0f\n.text:0000000000403f14\n.text:0000000000403f17\n.text:0000000000403f1a\n.text:0000000000403f1f\n.text:0000000000403f22\n.text:0000000000403f26\n.text:0000000000403f2b\n.text:0000000000403f30\n.text:0000000000403f33\n.text:0000000000403f36\n.text:0000000000403f38\n.text:0000000000403f3f\n.text:0000000000403f42\n.text:0000000000403f45\n.text:0000000000403f48\n.text:0000000000403f4d\n.text:0000000000403f50\n.text:0000000000403f53\n.text:0000000000403f58\n.text:0000000000403f5b\n.text:0000000000403f5d\n.text:0000000000403f5f\n.text:0000000000403f64\n.text:0000000000403f67\n.text:0000000000403f6e\n.text:0000000000403f72\n.text:0000000000403f75\n.text:0000000000403f78\n.text:0000000000403f7f\n.text:0000000000403f82\n.text:0000000000403f85\n.text:0000000000403f88\n.text:0000000000403f8d\n.text:0000000000403f90\n.text:0000000000403f92\n.text:0000000000403f95\n.text:0000000000403f98\n.text:0000000000403f9c\n.text:0000000000403f9d\n.text:0000000000403f9f\n.text:0000000000403fa1\n.text:0000000000403fa3\n.text:0000000000403fa5\n.text:0000000000403fa6\n'
p55
tp56
sS'quote'
p57
(S'\n__stdcall quote(char * arg)\n'
p58
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p59
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00406520\n'
p60
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p61
S'.text:0000000000406530\n.text:0000000000406533\n.text:0000000000406535\n.text:0000000000406538\n'
p62
tp63
sS'emit_bug_reporting_address'
p64
(S'\n__stdcall emit_bug_reporting_address()\n'
p65
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p66
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x40a065\nMOV EDX,0x5\nCALL 0x00401750\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40a07a\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004019a0\nXOR EDI,EDI\nMOV ESI,0x40a090\nMOV EDX,0x5\nCALL 0x00401750\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x4091ca\nMOV ECX,0x40939c\nXOR EAX,EAX\nCALL 0x004019a0\nXOR EDI,EDI\nMOV ESI,0x40a0a4\nMOV EDX,0x5\nCALL 0x00401750\nMOV RSI,qword ptr [0x0060d2e8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401850\n'
p67
S'50\n31 ff\nbe 65 a0 40 00\nba 05 00 00 00\ne8 5e a8 ff ff\n48 89 c1\nbf 01 00 00 00\nba 7a a0 40 00\n31 c0\n48 89 ce\ne8 97 aa ff ff\n31 ff\nbe 90 a0 40 00\nba 05 00 00 00\ne8 36 a8 ff ff\n48 89 c6\nbf 01 00 00 00\nba ca 91 40 00\nb9 9c 93 40 00\n31 c0\ne8 6d aa ff ff\n31 ff\nbe a4 a0 40 00\nba 05 00 00 00\ne8 0c a8 ff ff\n48 8b 35 9d 63 20 00\n48 89 c7\n58\ne9 fc a8 ff ff\n'
p68
S'.text:0000000000406ee0\n.text:0000000000406ee1\n.text:0000000000406ee3\n.text:0000000000406ee8\n.text:0000000000406eed\n.text:0000000000406ef2\n.text:0000000000406ef5\n.text:0000000000406efa\n.text:0000000000406eff\n.text:0000000000406f01\n.text:0000000000406f04\n.text:0000000000406f09\n.text:0000000000406f0b\n.text:0000000000406f10\n.text:0000000000406f15\n.text:0000000000406f1a\n.text:0000000000406f1d\n.text:0000000000406f22\n.text:0000000000406f27\n.text:0000000000406f2c\n.text:0000000000406f2e\n.text:0000000000406f33\n.text:0000000000406f35\n.text:0000000000406f3a\n.text:0000000000406f3f\n.text:0000000000406f44\n.text:0000000000406f4b\n.text:0000000000406f4e\n.text:0000000000406f4f\n'
p69
tp70
sS'clone_quoting_options'
p71
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p72
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p73
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401670\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x60d370\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x004070c0\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p74
S'55\n41 56\n53\n48 89 fb\ne8 74 c5 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 70 d3 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 a5 1f 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p75
S'.text:00000000004050f0\n.text:00000000004050f1\n.text:00000000004050f3\n.text:00000000004050f4\n.text:00000000004050f7\n.text:00000000004050fc\n.text:00000000004050ff\n.text:0000000000405102\n.text:0000000000405105\n.text:000000000040510a\n.text:000000000040510e\n.text:0000000000405113\n.text:0000000000405116\n.text:000000000040511b\n.text:000000000040511e\n.text:000000000040511f\n.text:0000000000405121\n.text:0000000000405122\n'
p76
tp77
sS'xmalloc'
p78
(S'\n__stdcall xmalloc(size_t n)\n'
p79
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p80
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401910\nTEST RBX,RBX\nJZ 0x00406f93\nTEST RAX,RAX\nJZ 0x00406f95\nPOP RBX\nRET\nCALL 0x00407110\n'
p81
S'53\n48 89 fb\ne8 87 a9 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p82
S'.text:0000000000406f80\n.text:0000000000406f81\n.text:0000000000406f84\n.text:0000000000406f89\n.text:0000000000406f8c\n.text:0000000000406f8e\n.text:0000000000406f91\n.text:0000000000406f93\n.text:0000000000406f94\n.text:0000000000406f95\n'
p83
tp84
sS'quotearg_char_mem'
p85
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p86
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p87
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x0060d3a0]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x0060d390]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060d380]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060d370]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00405150\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00406040\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p88
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d 38 70 20 00\n48 89 4c 24 30\n0f 10 05 1c 70 20 00\n0f 29 44 24 20\n0f 10 05 00 70 20 00\n0f 29 44 24 10\n0f 10 05 e4 6f 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p89
S'.text:0000000000406350\n.text:0000000000406352\n.text:0000000000406354\n.text:0000000000406355\n.text:0000000000406359\n.text:000000000040635b\n.text:000000000040635e\n.text:0000000000406361\n.text:0000000000406368\n.text:000000000040636d\n.text:0000000000406374\n.text:0000000000406379\n.text:0000000000406380\n.text:0000000000406385\n.text:000000000040638c\n.text:0000000000406390\n.text:0000000000406393\n.text:0000000000406398\n.text:000000000040639b\n.text:000000000040639d\n.text:00000000004063a2\n.text:00000000004063a4\n.text:00000000004063a7\n.text:00000000004063aa\n.text:00000000004063ad\n.text:00000000004063b2\n.text:00000000004063b6\n.text:00000000004063b7\n.text:00000000004063b9\n.text:00000000004063bb\n'
p90
tp91
sS'same_name'
p92
(S'\n__stdcall same_name(char * source, char * dest)\n'
p93
V\u000a_Bool same_name(char *source,char *dest)\u000a\u000a{\u000a  int iVar1;\u000a  char *name;\u000a  char *name_00;\u000a  size_t sVar2;\u000a  size_t __n;\u000a  uint *puVar3;\u000a  bool bVar4;\u000a  stat source_dir_stats;\u000a  stat local_148;\u000a  stat local_b8;\u000a  \u000a  name = last_component(source);\u000a  name_00 = last_component(dest);\u000a  sVar2 = base_len(name);\u000a  __n = base_len(name_00);\u000a  if ((sVar2 == __n) && (iVar1 = memcmp(name,name_00,__n), iVar1 == 0)) {\u000a    name = dir_name(source);\u000a    name_00 = dir_name(dest);\u000a    iVar1 = stat(name,&local_b8);\u000a    if (iVar1 != 0) {\u000a      puVar3 = (uint *)__errno_location();\u000a      error(1,(ulong)*puVar3,&DAT_0040a187,name);\u000a    }\u000a    iVar1 = stat(name_00,&local_148);\u000a    if (iVar1 != 0) {\u000a      puVar3 = (uint *)__errno_location();\u000a      error(1,(ulong)*puVar3,&DAT_0040a187,name_00);\u000a    }\u000a    bVar4 = local_b8.st_ino == local_148.st_ino && local_b8.st_dev == local_148.st_dev;\u000a    free(name);\u000a    free(name_00);\u000a  }\u000a  else {\u000a    bVar4 = false;\u000a  }\u000a  return (_Bool)bVar4;\u000a}\u000a\u000a
p94
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x120\nMOV R15,RSI\nMOV R14,RDI\nCALL 0x00403d10\nMOV R12,RAX\nMOV RDI,R15\nCALL 0x00403d10\nMOV RBX,RAX\nMOV RDI,R12\nCALL 0x00403d70\nMOV RBP,RAX\nMOV RDI,RBX\nCALL 0x00403d70\nCMP RBP,RAX\nJNZ 0x00406992\nMOV RDI,R12\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x00401840\nTEST EAX,EAX\nJZ 0x004069a6\nXOR EBP,EBP\nMOV EAX,EBP\nADD RSP,0x120\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RDI,R14\nCALL 0x00403c50\nMOV R14,RAX\nMOV RDI,R15\nCALL 0x00403c50\nMOV RBX,RAX\nLEA RSI,[0x90 + RSP]\nMOV RDI,R14\nCALL 0x00408040\nTEST EAX,EAX\nJZ 0x004069eb\nCALL 0x00401670\nMOV ESI,dword ptr [RAX]\nMOV EDI,0x1\nMOV EDX,0x40a187\nXOR EAX,EAX\nMOV RCX,R14\nCALL 0x004019c0\nMOV RSI,RSP\nMOV RDI,RBX\nCALL 0x00408040\nTEST EAX,EAX\nJZ 0x00406a15\nCALL 0x00401670\nMOV ESI,dword ptr [RAX]\nMOV EDI,0x1\nMOV EDX,0x40a187\nXOR EAX,EAX\nMOV RCX,RBX\nCALL 0x004019c0\nMOV RAX,qword ptr [0x98 + RSP]\nCMP RAX,qword ptr [RSP + 0x8]\nJNZ 0x00406a36\nMOV RAX,qword ptr [0x90 + RSP]\nCMP RAX,qword ptr [RSP]\nSETZ BPL\nJMP 0x00406a38\nXOR EBP,EBP\nMOV RDI,R14\nCALL 0x00401640\nMOV RDI,RBX\nCALL 0x00401640\nJMP 0x00406994\n'
p95
S'55\n41 57\n41 56\n41 54\n53\n48 81 ec 20 01 00 00\n49 89 f7\n49 89 fe\ne8 b6 d3 ff ff\n49 89 c4\n4c 89 ff\ne8 ab d3 ff ff\n48 89 c3\n4c 89 e7\ne8 00 d4 ff ff\n48 89 c5\n48 89 df\ne8 f5 d3 ff ff\n48 39 c5\n75 12\n4c 89 e7\n48 89 de\n48 89 c2\ne8 b2 ae ff ff\n85 c0\n74 14\n31 ed\n89 e8\n48 81 c4 20 01 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n4c 89 f7\ne8 a2 d2 ff ff\n49 89 c6\n4c 89 ff\ne8 97 d2 ff ff\n48 89 c3\n48 8d b4 24 90 00 00 00\n4c 89 f7\ne8 74 16 00 00\n85 c0\n74 1b\ne8 9b ac ff ff\n8b 30\nbf 01 00 00 00\nba 87 a1 40 00\n31 c0\n4c 89 f1\ne8 d5 af ff ff\n48 89 e6\n48 89 df\ne8 4a 16 00 00\n85 c0\n74 1b\ne8 71 ac ff ff\n8b 30\nbf 01 00 00 00\nba 87 a1 40 00\n31 c0\n48 89 d9\ne8 ab af ff ff\n48 8b 84 24 98 00 00 00\n48 3b 44 24 08\n75 12\n48 8b 84 24 90 00 00 00\n48 3b 04 24\n40 0f 94 c5\neb 02\n31 ed\n4c 89 f7\ne8 00 ac ff ff\n48 89 df\ne8 f8 ab ff ff\ne9 47 ff ff ff\n'
p96
S'.text:0000000000406940\n.text:0000000000406941\n.text:0000000000406943\n.text:0000000000406945\n.text:0000000000406947\n.text:0000000000406948\n.text:000000000040694f\n.text:0000000000406952\n.text:0000000000406955\n.text:000000000040695a\n.text:000000000040695d\n.text:0000000000406960\n.text:0000000000406965\n.text:0000000000406968\n.text:000000000040696b\n.text:0000000000406970\n.text:0000000000406973\n.text:0000000000406976\n.text:000000000040697b\n.text:000000000040697e\n.text:0000000000406980\n.text:0000000000406983\n.text:0000000000406986\n.text:0000000000406989\n.text:000000000040698e\n.text:0000000000406990\n.text:0000000000406992\n.text:0000000000406994\n.text:0000000000406996\n.text:000000000040699d\n.text:000000000040699e\n.text:00000000004069a0\n.text:00000000004069a2\n.text:00000000004069a4\n.text:00000000004069a5\n.text:00000000004069a6\n.text:00000000004069a9\n.text:00000000004069ae\n.text:00000000004069b1\n.text:00000000004069b4\n.text:00000000004069b9\n.text:00000000004069bc\n.text:00000000004069c4\n.text:00000000004069c7\n.text:00000000004069cc\n.text:00000000004069ce\n.text:00000000004069d0\n.text:00000000004069d5\n.text:00000000004069d7\n.text:00000000004069dc\n.text:00000000004069e1\n.text:00000000004069e3\n.text:00000000004069e6\n.text:00000000004069eb\n.text:00000000004069ee\n.text:00000000004069f1\n.text:00000000004069f6\n.text:00000000004069f8\n.text:00000000004069fa\n.text:00000000004069ff\n.text:0000000000406a01\n.text:0000000000406a06\n.text:0000000000406a0b\n.text:0000000000406a0d\n.text:0000000000406a10\n.text:0000000000406a15\n.text:0000000000406a1d\n.text:0000000000406a22\n.text:0000000000406a24\n.text:0000000000406a2c\n.text:0000000000406a30\n.text:0000000000406a34\n.text:0000000000406a36\n.text:0000000000406a38\n.text:0000000000406a3b\n.text:0000000000406a40\n.text:0000000000406a43\n.text:0000000000406a48\n'
p97
tp98
sS'frame_dummy'
p99
(S'\n__stdcall frame_dummy()\n'
p100
V\u000a/* WARNING: Removing unreachable block (ram,0x00401b7a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p101
S'MOV EDI,0x60ce18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401b70\nJMP 0x00401b00\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401b6b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401b00\n'
p102
S'bf 18 ce 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p103
S'.text:0000000000401b60\n.text:0000000000401b65\n.text:0000000000401b69\n.text:0000000000401b6b\n.text:0000000000401b70\n.text:0000000000401b75\n.text:0000000000401b78\n.text:0000000000401b7a\n.text:0000000000401b7b\n.text:0000000000401b7e\n.text:0000000000401b80\n.text:0000000000401b81\n'
p104
tp105
sS'quotearg_n_style_colon'
p106
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p107
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p108
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00406270\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00405150\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00406040\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p109
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p110
S'.text:00000000004063f0\n.text:00000000004063f1\n.text:00000000004063f3\n.text:00000000004063f4\n.text:00000000004063f8\n.text:00000000004063fb\n.text:00000000004063fd\n.text:0000000000406402\n.text:0000000000406405\n.text:000000000040640a\n.text:000000000040640f\n.text:0000000000406414\n.text:0000000000406417\n.text:000000000040641c\n.text:0000000000406423\n.text:0000000000406425\n.text:0000000000406428\n.text:000000000040642b\n.text:0000000000406430\n.text:0000000000406434\n.text:0000000000406435\n.text:0000000000406437\n.text:0000000000406438\n'
p111
tp112
sS'rotl64'
p113
(S'\n__stdcall rotl64(uint64_t x)\n'
p114
V\u000auint64_t rotl64(uint64_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x << bVar1 | x >> 0x40 - bVar1;\u000a}\u000a\u000a
p115
S'MOV ECX,ESI\nROL RDI,CL\nMOV RAX,RDI\nRET\n'
p116
S'89 f1\n48 d3 c7\n48 89 f8\nc3\n'
p117
S'.text:0000000000407900\n.text:0000000000407902\n.text:0000000000407905\n.text:0000000000407908\n'
p118
tp119
sS'record_file'
p120
(S'\n__stdcall record_file(Hash_table * ht, char * file, stat * stats)\n'
p121
V\u000avoid record_file(Hash_table *ht,char *file,stat *stats)\u000a\u000a{\u000a  char **entry;\u000a  char *pcVar1;\u000a  char **ppcVar2;\u000a  \u000a  if (ht != (Hash_table *)0x0) {\u000a    entry = (char **)xmalloc(0x18);\u000a    pcVar1 = xstrdup(file);\u000a    *entry = pcVar1;\u000a    entry[1] = (char *)stats->st_ino;\u000a    entry[2] = (char *)stats->st_dev;\u000a    ppcVar2 = (char **)hash_insert(ht,entry);\u000a    if (ppcVar2 == (char **)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die();\u000a    }\u000a    if (ppcVar2 != entry) {\u000a      triple_free(entry);\u000a      return;\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p122
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDX\nMOV R12,RSI\nMOV R14,RDI\nTEST R14,R14\nJZ 0x00403e45\nMOV EDI,0x18\nCALL 0x00406f80\nMOV RBX,RAX\nMOV RDI,R12\nCALL 0x004070f0\nMOV qword ptr [RBX],RAX\nMOV RAX,qword ptr [R15 + 0x8]\nMOV qword ptr [RBX + 0x8],RAX\nMOV RAX,qword ptr [R15]\nMOV qword ptr [RBX + 0x10],RAX\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00404cd0\nTEST RAX,RAX\nJZ 0x00403e51\nCMP RAX,RBX\nJZ 0x00403e45\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00405020\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00407110\n'
p123
S'41 57\n41 56\n41 54\n53\n50\n49 89 d7\n49 89 f4\n49 89 fe\n4d 85 f6\n74 4f\nbf 18 00 00 00\ne8 80 31 00 00\n48 89 c3\n4c 89 e7\ne8 e5 32 00 00\n48 89 03\n49 8b 47 08\n48 89 43 08\n49 8b 07\n48 89 43 10\n4c 89 f7\n48 89 de\ne8 a8 0e 00 00\n48 85 c0\n74 24\n48 39 d8\n74 13\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 db 11 00 00\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 ba 32 00 00\n'
p124
S'.text:0000000000403de0\n.text:0000000000403de2\n.text:0000000000403de4\n.text:0000000000403de6\n.text:0000000000403de7\n.text:0000000000403de8\n.text:0000000000403deb\n.text:0000000000403dee\n.text:0000000000403df1\n.text:0000000000403df4\n.text:0000000000403df6\n.text:0000000000403dfb\n.text:0000000000403e00\n.text:0000000000403e03\n.text:0000000000403e06\n.text:0000000000403e0b\n.text:0000000000403e0e\n.text:0000000000403e12\n.text:0000000000403e16\n.text:0000000000403e19\n.text:0000000000403e1d\n.text:0000000000403e20\n.text:0000000000403e23\n.text:0000000000403e28\n.text:0000000000403e2b\n.text:0000000000403e2d\n.text:0000000000403e30\n.text:0000000000403e32\n.text:0000000000403e35\n.text:0000000000403e39\n.text:0000000000403e3a\n.text:0000000000403e3c\n.text:0000000000403e3e\n.text:0000000000403e40\n.text:0000000000403e45\n.text:0000000000403e49\n.text:0000000000403e4a\n.text:0000000000403e4c\n.text:0000000000403e4e\n.text:0000000000403e50\n.text:0000000000403e51\n'
p125
tp126
sS'yesno'
p127
(S'\n__stdcall yesno()\n'
p128
V\u000a_Bool yesno(void)\u000a\u000a{\u000a  int iVar1;\u000a  __ssize_t _Var2;\u000a  bool bVar3;\u000a  char *local_18;\u000a  size_t local_10;\u000a  \u000a  local_18 = (char *)0x0;\u000a  local_10 = 0;\u000a  _Var2 = getline(&local_18,&local_10,stdin);\u000a  if (_Var2 < 1) {\u000a    bVar3 = false;\u000a  }\u000a  else {\u000a    if (local_18[_Var2 + -1] == '\u005cn') {\u000a      local_18[_Var2 + -1] = 0;\u000a    }\u000a    iVar1 = rpmatch(local_18);\u000a    bVar3 = 0 < iVar1;\u000a  }\u000a  free(local_18);\u000a  return (_Bool)bVar3;\u000a}\u000a\u000a
p129
S'PUSH RBX\nSUB RSP,0x10\nMOV qword ptr [RSP],0x0\nMOV qword ptr [RSP + 0x8],0x0\nMOV RDX,qword ptr [0x0060d2f0]\nMOV RDI,RSP\nLEA RSI,[RSP + 0x8]\nCALL 0x00401a20\nTEST RAX,RAX\nJLE 0x004071bf\nMOV RCX,qword ptr [RSP]\nCMP byte ptr [RCX + RAX*0x1 + -0x1],0xa\nJNZ 0x004071af\nMOV byte ptr [RCX + RAX*0x1 + -0x1],0x0\nMOV RDI,qword ptr [RSP]\nCALL 0x004018a0\nTEST EAX,EAX\nSETG BL\nJMP 0x004071c1\nXOR EBX,EBX\nMOV RDI,qword ptr [RSP]\nCALL 0x00401640\nMOV EAX,EBX\nADD RSP,0x10\nPOP RBX\nRET\n'
p130
S'53\n48 83 ec 10\n48 c7 04 24 00 00 00 00\n48 c7 44 24 08 00 00 00 00\n48 8b 15 63 61 20 00\n48 89 e7\n48 8d 74 24 08\ne8 86 a8 ff ff\n48 85 c0\n7e 20\n48 8b 0c 24\n80 7c 01 ff 0a\n75 05\nc6 44 01 ff 00\n48 8b 3c 24\ne8 e8 a6 ff ff\n85 c0\n0f 9f c3\neb 02\n31 db\n48 8b 3c 24\ne8 76 a4 ff ff\n89 d8\n48 83 c4 10\n5b\nc3\n'
p131
S'.text:0000000000407170\n.text:0000000000407171\n.text:0000000000407175\n.text:000000000040717d\n.text:0000000000407186\n.text:000000000040718d\n.text:0000000000407190\n.text:0000000000407195\n.text:000000000040719a\n.text:000000000040719d\n.text:000000000040719f\n.text:00000000004071a3\n.text:00000000004071a8\n.text:00000000004071aa\n.text:00000000004071af\n.text:00000000004071b3\n.text:00000000004071b8\n.text:00000000004071ba\n.text:00000000004071bd\n.text:00000000004071bf\n.text:00000000004071c1\n.text:00000000004071c5\n.text:00000000004071ca\n.text:00000000004071cc\n.text:00000000004071d0\n.text:00000000004071d1\n'
p132
tp133
sS'quote_mem'
p134
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p135
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p136
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00406500\n'
p137
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p138
S'.text:0000000000406510\n.text:0000000000406513\n.text:0000000000406516\n.text:0000000000406518\n.text:000000000040651b\n.text:000000000040651e\n'
p139
tp140
sS'fileno'
p141
(S'\n__stdcall fileno(FILE * __stream)\n'
p142
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_0060d160)();\u000a  return iVar1;\u000a}\u000a\u000a
p143
S'JMP qword ptr [0x0060d160]\n'
p144
S'ff 25 9a b8 20 00\n'
p145
S'.plt:00000000004018c0\n'
p146
tp147
sS'mbrtowc'
p148
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p149
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_0060d0d0)();\u000a  return sVar1;\u000a}\u000a\u000a
p150
S'JMP qword ptr [0x0060d0d0]\n'
p151
S'ff 25 2a b9 20 00\n'
p152
S'.plt:00000000004017a0\n'
p153
tp154
sS'rotr16'
p155
(S'\n__stdcall rotr16()\n'
p156
V\u000auint16_t rotr16(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint16_t)\u000a         ((ushort)(in_EDI << (0x10 - (byte)in_ESI & 0x1f)) |\u000a         (ushort)(in_EDI >> ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p157
S'MOV EAX,EDI\nMOV ECX,ESI\nSHR EAX,CL\nMOV ECX,0x10\nSUB ECX,ESI\nSHL EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p158
S'89 f8\n89 f1\nd3 e8\nb9 10 00 00 00\n29 f1\nd3 e7\n09 c7\n89 f8\nc3\n'
p159
S'.text:0000000000407980\n.text:0000000000407982\n.text:0000000000407984\n.text:0000000000407986\n.text:000000000040798b\n.text:000000000040798d\n.text:000000000040798f\n.text:0000000000407991\n.text:0000000000407993\n'
p160
tp161
sS'setlocale'
p162
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p163
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_0060d1c8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p164
S'JMP qword ptr [0x0060d1c8]\n'
p165
S'ff 25 32 b8 20 00\n'
p166
S'.plt:0000000000401990\n'
p167
tp168
sS'c_toupper'
p169
(S'\n__stdcall c_toupper()\n'
p170
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p171
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p172
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p173
S'.text:0000000000407b20\n.text:0000000000407b23\n.text:0000000000407b26\n.text:0000000000407b29\n.text:0000000000407b2c\n'
p174
tp175
sS'fcntl'
p176
(S'\n__stdcall fcntl(int __fd, int __cmd)\n'
p177
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fcntl(int __fd,int __cmd,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fcntl_0060d078)();\u000a  return iVar1;\u000a}\u000a\u000a
p178
S'JMP qword ptr [0x0060d078]\n'
p179
S'ff 25 82 b9 20 00\n'
p180
S'.plt:00000000004016f0\n'
p181
tp182
sS'mbsinit'
p183
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p184
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_0060d230)();\u000a  return iVar1;\u000a}\u000a\u000a
p185
S'JMP qword ptr [0x0060d230]\n'
p186
S'ff 25 ca b7 20 00\n'
p187
S'.plt:0000000000401a60\n'
p188
tp189
sS'dcgettext'
p190
(S'\n__stdcall dcgettext()\n'
p191
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_0060d0a8)();\u000a  return;\u000a}\u000a\u000a
p192
S'JMP qword ptr [0x0060d0a8]\n'
p193
S'ff 25 52 b9 20 00\n'
p194
S'.plt:0000000000401750\n'
p195
tp196
sS'seen_file'
p197
(S'\n__stdcall seen_file(Hash_table * ht, char * file, stat * stats)\n'
p198
V\u000a_Bool seen_file(Hash_table *ht,char *file,stat *stats)\u000a\u000a{\u000a  void *pvVar1;\u000a  char *local_18;\u000a  __ino_t local_10;\u000a  __dev_t local_8;\u000a  \u000a  if (ht != (Hash_table *)0x0) {\u000a    local_10 = stats->st_ino;\u000a    local_8 = stats->st_dev;\u000a    local_18 = file;\u000a    pvVar1 = hash_lookup(ht,&local_18);\u000a    return (_Bool)(pvVar1 != (void *)0x0);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p199
S'TEST RDI,RDI\nJZ 0x00403e91\nSUB RSP,0x18\nMOV qword ptr [RSP],RSI\nMOV RAX,qword ptr [RDX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RAX,qword ptr [RDX]\nMOV qword ptr [RSP + 0x10],RAX\nMOV RSI,RSP\nCALL 0x00404190\nTEST RAX,RAX\nSETNZ AL\nADD RSP,0x18\nRET\nXOR EAX,EAX\nRET\n'
p200
S'48 85 ff\n74 2c\n48 83 ec 18\n48 89 34 24\n48 8b 42 08\n48 89 44 24 08\n48 8b 02\n48 89 44 24 10\n48 89 e6\ne8 0a 03 00 00\n48 85 c0\n0f 95 c0\n48 83 c4 18\nc3\n31 c0\nc3\n'
p201
S'.text:0000000000403e60\n.text:0000000000403e63\n.text:0000000000403e65\n.text:0000000000403e69\n.text:0000000000403e6d\n.text:0000000000403e71\n.text:0000000000403e76\n.text:0000000000403e79\n.text:0000000000403e7e\n.text:0000000000403e81\n.text:0000000000403e86\n.text:0000000000403e89\n.text:0000000000403e8c\n.text:0000000000403e90\n.text:0000000000403e91\n.text:0000000000403e93\n'
p202
tp203
sS'quotearg_free'
p204
(S'\n__stdcall quotearg_free()\n'
p205
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p206
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x0060d270]\nCMP dword ptr [0x0060d278],0x2\nJC 0x00405fda\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00401640\nINC RBX\nMOV EAX,dword ptr [0x0060d278]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00405fc0\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x60d3b0\nCMP RDI,RAX\nJZ 0x00406003\nCALL 0x00401640\nMOV qword ptr [0x0060d280],0x100\nMOV qword ptr [0x0060d288],0x60d3b0\nMOV EAX,0x60d280\nCMP R14,RAX\nJZ 0x00406020\nMOV RDI,R14\nCALL 0x00401640\nMOV qword ptr [0x0060d270],0x60d280\nMOV dword ptr [0x0060d278],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p207
S'41 57\n41 56\n53\n4c 8b 35 c4 72 20 00\n83 3d c5 72 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 78 b6 ff ff\n48 ff c3\n8b 05 a7 72 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 b0 d3 60 00\n48 39 c7\n74 1b\ne8 53 b6 ff ff\n48 c7 05 88 72 20 00 00 01 00 00\n48 c7 05 85 72 20 00 b0 d3 60 00\nb8 80 d2 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 2b b6 ff ff\n48 c7 05 50 72 20 00 80 d2 60 00\nc7 05 4e 72 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p208
S'.text:0000000000405fa0\n.text:0000000000405fa2\n.text:0000000000405fa4\n.text:0000000000405fa5\n.text:0000000000405fac\n.text:0000000000405fb3\n.text:0000000000405fb5\n.text:0000000000405fb9\n.text:0000000000405fbe\n.text:0000000000405fc0\n.text:0000000000405fc3\n.text:0000000000405fc8\n.text:0000000000405fcb\n.text:0000000000405fd1\n.text:0000000000405fd5\n.text:0000000000405fd8\n.text:0000000000405fda\n.text:0000000000405fde\n.text:0000000000405fe3\n.text:0000000000405fe6\n.text:0000000000405fe8\n.text:0000000000405fed\n.text:0000000000405ff8\n.text:0000000000406003\n.text:0000000000406008\n.text:000000000040600b\n.text:000000000040600d\n.text:0000000000406010\n.text:0000000000406015\n.text:0000000000406020\n.text:000000000040602a\n.text:000000000040602b\n.text:000000000040602d\n.text:000000000040602f\n'
p209
tp210
sS'quotearg_mem'
p211
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p212
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p213
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00406200\n'
p214
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p215
S'.text:0000000000406220\n.text:0000000000406223\n.text:0000000000406226\n.text:0000000000406228\n.text:000000000040622b\n.text:000000000040622e\n'
p216
tp217
sS'rotl32'
p218
(S'\n__stdcall rotl32()\n'
p219
V\u000auint32_t rotl32(void)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x1f;\u000a  return (uint32_t)(in_EDI << bVar1 | in_EDI >> 0x20 - bVar1);\u000a}\u000a\u000a
p220
S'MOV ECX,ESI\nROL EDI,CL\nMOV EAX,EDI\nRET\n'
p221
S'89 f1\nd3 c7\n89 f8\nc3\n'
p222
S'.text:0000000000407920\n.text:0000000000407922\n.text:0000000000407924\n.text:0000000000407926\n'
p223
tp224
sS'deregister_tm_clones'
p225
(S'\n__stdcall deregister_tm_clones()\n'
p226
V\u000a/* WARNING: Removing unreachable block (ram,0x00401ad5) */\u000a/* WARNING: Removing unreachable block (ram,0x00401adf) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p227
S'MOV EAX,0x60d2d7\nPUSH RBP\nSUB RAX,0x60d2d0\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00401af0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401af0\nPOP RBP\nMOV EDI,0x60d2d0\nJMP RAX\nPOP RBP\nRET\n'
p228
S'b8 d7 d2 60 00\n55\n48 2d d0 d2 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf d0 d2 60 00\nff e0\n5d\nc3\n'
p229
S'.text:0000000000401ac0\n.text:0000000000401ac5\n.text:0000000000401ac6\n.text:0000000000401acc\n.text:0000000000401ad0\n.text:0000000000401ad3\n.text:0000000000401ad5\n.text:0000000000401ada\n.text:0000000000401add\n.text:0000000000401adf\n.text:0000000000401ae0\n.text:0000000000401ae5\n.text:0000000000401af0\n.text:0000000000401af1\n'
p230
tp231
sS'quotearg_custom'
p232
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p233
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p234
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00406440\n'
p235
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p236
S'.text:00000000004064c0\n.text:00000000004064c3\n.text:00000000004064c6\n.text:00000000004064c9\n.text:00000000004064cb\n.text:00000000004064ce\n.text:00000000004064d1\n.text:00000000004064d4\n'
p237
tp238
sS'free'
p239
(S'\n__stdcall free(void * __ptr)\n'
p240
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_0060d020)();\u000a  return;\u000a}\u000a\u000a
p241
S'JMP qword ptr [0x0060d020]\n'
p242
S'ff 25 da b9 20 00\n'
p243
S'.plt:0000000000401640\n'
p244
tp245
sS'close'
p246
(S'\n__stdcall close(int __fd)\n'
p247
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_0060d108)();\u000a  return iVar1;\u000a}\u000a\u000a
p248
S'JMP qword ptr [0x0060d108]\n'
p249
S'ff 25 f2 b8 20 00\n'
p250
S'.plt:0000000000401810\n'
p251
tp252
sS'getenv'
p253
(S'\n__stdcall getenv(char * __name)\n'
p254
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_0060d018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p255
S'JMP qword ptr [0x0060d018]\n'
p256
S'ff 25 e2 b9 20 00\n'
p257
S'.plt:0000000000401630\n'
p258
tp259
sS'triple_free'
p260
(S'\n__stdcall triple_free(void * x)\n'
p261
V\u000avoid triple_free(void *x)\u000a\u000a{\u000a  free(*(void **)x);\u000a  free(x);\u000a  return;\u000a}\u000a\u000a
p262
S'PUSH RBX\nMOV RBX,RDI\nMOV RDI,qword ptr [RBX]\nCALL 0x00401640\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401640\n'
p263
S'53\n48 89 fb\n48 8b 3b\ne8 14 c6 ff ff\n48 89 df\n5b\ne9 0b c6 ff ff\n'
p264
S'.text:0000000000405020\n.text:0000000000405021\n.text:0000000000405024\n.text:0000000000405027\n.text:000000000040502c\n.text:000000000040502f\n.text:0000000000405030\n'
p265
tp266
sS'stat'
p267
(S'\n__stdcall stat(char * __file, stat * __buf)\n'
p268
V\u000aint stat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___xstat_0060d168)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p269
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x004018d0\n'
p270
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 80 98 ff ff\n'
p271
S'.text:0000000000408040\n.text:0000000000408043\n.text:0000000000408046\n.text:000000000040804b\n'
p272
tp273
sS'rpl_fseeko'
p274
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p275
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_0060d1f0)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p276
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00407498\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00407498\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x004074aa\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004019e0\nMOV RDI,RBX\nCALL 0x004018c0\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x004017d0\nCMP RAX,-0x1\nJZ 0x004074d3\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x004074d8\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p277
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 36 a5 ff ff\n48 89 df\ne8 0e a4 ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 11 a3 ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p278
S'.text:0000000000407470\n.text:0000000000407471\n.text:0000000000407473\n.text:0000000000407474\n.text:0000000000407477\n.text:000000000040747a\n.text:000000000040747d\n.text:0000000000407481\n.text:0000000000407485\n.text:0000000000407487\n.text:000000000040748b\n.text:000000000040748f\n.text:0000000000407491\n.text:0000000000407496\n.text:0000000000407498\n.text:000000000040749b\n.text:000000000040749e\n.text:00000000004074a1\n.text:00000000004074a2\n.text:00000000004074a4\n.text:00000000004074a5\n.text:00000000004074aa\n.text:00000000004074ad\n.text:00000000004074b2\n.text:00000000004074b4\n.text:00000000004074b7\n.text:00000000004074ba\n.text:00000000004074bf\n.text:00000000004074c3\n.text:00000000004074c5\n.text:00000000004074c8\n.text:00000000004074cf\n.text:00000000004074d1\n.text:00000000004074d3\n.text:00000000004074d8\n.text:00000000004074d9\n.text:00000000004074db\n.text:00000000004074dc\n'
p279
tp280
sS'check_extension'
p281
(S'\n__stdcall check_extension()\n'
p282
V\u000avoid check_extension(char *pcParm1,long lParm2)\u000a\u000a{\u000a  undefined2 uVar1;\u000a  undefined2 *name;\u000a  int *piVar2;\u000a  char *pcVar3;\u000a  char *pcVar4;\u000a  \u000a  name = (undefined2 *)last_component(pcParm1);\u000a  pcVar4 = (char *)base_len((char *)name);\u000a  if (pcVar4 < (char *)0xf) {\u000a    pcVar3 = (char *)0xff;\u000a    if (pcVar4 < (char *)0x100) {\u000a      return;\u000a    }\u000a  }\u000a  else {\u000a    uVar1 = *name;\u000a    *name = 0x2e;\u000a    piVar2 = __errno_location();\u000a    *piVar2 = 0;\u000a    pcVar3 = (char *)pathconf(pcParm1,3);\u000a    if (((long)pcVar3 < 0) && (*piVar2 != 0)) {\u000a      pcVar3 = (char *)0xff;\u000a    }\u000a    *name = uVar1;\u000a    if (pcVar4 <= pcVar3) {\u000a      return;\u000a    }\u000a  }\u000a  pcVar4 = pcVar3 + -1;\u000a  if (pcParm1 + (lParm2 - (long)name) < pcVar3) {\u000a    pcVar4 = pcParm1 + (lParm2 - (long)name);\u000a  }\u000a  *(undefined2 *)((long)name + (long)pcVar4) = 0x7e;\u000a  return;\u000a}\u000a\u000a
p283
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RSI\nMOV RBX,RDI\nCALL 0x00403d10\nMOV R14,RAX\nMOV RDI,R14\nCALL 0x00403d70\nMOV R12,RAX\nCMP R12,0xf\nJC 0x0040337d\nMOVZX EBP,word ptr [R14]\nMOV word ptr [R14],0x2e\nCALL 0x00401670\nMOV R13,RAX\nMOV dword ptr [R13],0x0\nMOV ESI,0x3\nMOV RDI,RBX\nCALL 0x00401710\nTEST RAX,RAX\nJNS 0x00403372\nCMP dword ptr [R13],0x0\nJZ 0x00403372\nMOV EAX,0xff\nMOV word ptr [R14],BP\nCMP RAX,R12\nJC 0x00403387\nJMP 0x0040339f\nMOV EAX,0xff\nCMP RAX,R12\nJNC 0x0040339f\nADD RBX,R15\nSUB RBX,R14\nCMP RAX,RBX\nLEA RAX,[RAX + -0x1]\nCMOVA RAX,RBX\nMOV word ptr [R14 + RAX*0x1],0x7e\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p284
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f7\n48 89 fb\ne8 ea 09 00 00\n49 89 c6\n4c 89 f7\ne8 3f 0a 00 00\n49 89 c4\n49 83 fc 0f\n72 43\n41 0f b7 2e\n66 41 c7 06 2e 00\ne8 27 e3 ff ff\n49 89 c5\n41 c7 45 00 00 00 00 00\nbe 03 00 00 00\n48 89 df\ne8 af e3 ff ff\n48 85 c0\n79 0c\n41 83 7d 00 00\n74 05\nb8 ff 00 00 00\n66 41 89 2e\n4c 39 e0\n72 0c\neb 22\nb8 ff 00 00 00\n4c 39 e0\n73 18\n4c 01 fb\n4c 29 f3\n48 39 d8\n48 8d 40 ff\n48 0f 47 c3\n66 41 c7 04 06 7e 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p285
S'.text:0000000000403310\n.text:0000000000403311\n.text:0000000000403313\n.text:0000000000403315\n.text:0000000000403317\n.text:0000000000403319\n.text:000000000040331a\n.text:000000000040331b\n.text:000000000040331e\n.text:0000000000403321\n.text:0000000000403326\n.text:0000000000403329\n.text:000000000040332c\n.text:0000000000403331\n.text:0000000000403334\n.text:0000000000403338\n.text:000000000040333a\n.text:000000000040333e\n.text:0000000000403344\n.text:0000000000403349\n.text:000000000040334c\n.text:0000000000403354\n.text:0000000000403359\n.text:000000000040335c\n.text:0000000000403361\n.text:0000000000403364\n.text:0000000000403366\n.text:000000000040336b\n.text:000000000040336d\n.text:0000000000403372\n.text:0000000000403376\n.text:0000000000403379\n.text:000000000040337b\n.text:000000000040337d\n.text:0000000000403382\n.text:0000000000403385\n.text:0000000000403387\n.text:000000000040338a\n.text:000000000040338d\n.text:0000000000403390\n.text:0000000000403394\n.text:0000000000403398\n.text:000000000040339f\n.text:00000000004033a3\n.text:00000000004033a4\n.text:00000000004033a6\n.text:00000000004033a8\n.text:00000000004033aa\n.text:00000000004033ac\n.text:00000000004033ad\n'
p286
tp287
sS'quote_n_mem'
p288
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p289
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p290
S'MOV ECX,0x60d290\nJMP 0x00406040\n'
p291
S'b9 90 d2 60 00\ne9 36 fb ff ff\n'
p292
S'.text:0000000000406500\n.text:0000000000406505\n'
p293
tp294
sS'xstrdup'
p295
(S'\n__stdcall xstrdup(char * string)\n'
p296
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p297
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401770\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x004070c0\n'
p298
S'53\n48 89 fb\ne8 77 a6 ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p299
S'.text:00000000004070f0\n.text:00000000004070f1\n.text:00000000004070f4\n.text:00000000004070f9\n.text:00000000004070fd\n.text:0000000000407100\n.text:0000000000407101\n'
p300
tp301
sS'rotr8'
p302
(S'\n__stdcall rotr8()\n'
p303
V\u000auint8_t rotr8(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint8_t)((byte)(in_EDI << (8 - (byte)in_ESI & 0x1f)) |\u000a                  (byte)(in_EDI >> ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p304
S'MOV EAX,EDI\nMOV ECX,ESI\nSHR EAX,CL\nMOV ECX,0x8\nSUB ECX,ESI\nSHL EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p305
S'89 f8\n89 f1\nd3 e8\nb9 08 00 00 00\n29 f1\nd3 e7\n09 c7\n89 f8\nc3\n'
p306
S'.text:00000000004079c0\n.text:00000000004079c2\n.text:00000000004079c4\n.text:00000000004079c6\n.text:00000000004079cb\n.text:00000000004079cd\n.text:00000000004079cf\n.text:00000000004079d1\n.text:00000000004079d3\n'
p307
tp308
sS'c_ispunct'
p309
(S'\n__stdcall c_ispunct()\n'
p310
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p311
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00407ab2\nMOV AL,0x1\nJMP qword ptr [0x40a190 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p312
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 90 a1 40 00\nc3\n31 c0\nc3\n'
p313
S'.text:0000000000407aa0\n.text:0000000000407aa3\n.text:0000000000407aa6\n.text:0000000000407aa8\n.text:0000000000407aaa\n.text:0000000000407ab1\n.text:0000000000407ab2\n.text:0000000000407ab4\n'
p314
tp315
sS'fdopendir'
p316
(S'\n__stdcall fdopendir(int __fd)\n'
p317
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aDIR * fdopendir(int __fd)\u000a\u000a{\u000a  DIR *pDVar1;\u000a  \u000a  pDVar1 = (DIR *)(*(code *)PTR_fdopendir_0060d200)();\u000a  return pDVar1;\u000a}\u000a\u000a
p318
S'JMP qword ptr [0x0060d200]\n'
p319
S'ff 25 fa b7 20 00\n'
p320
S'.plt:0000000000401a00\n'
p321
tp322
sS'convert_abs_rel'
p323
(S'\n__stdcall convert_abs_rel(char * from, char * target)\n'
p324
V\u000achar * convert_abs_rel(char *from,char *target)\u000a\u000a{\u000a  _Bool _Var1;\u000a  char *name;\u000a  char *can_reldir;\u000a  char *can_fname;\u000a  char *buf;\u000a  \u000a  name = dir_name(target);\u000a  can_reldir = canonicalize_filename_mode(name);\u000a  can_fname = canonicalize_filename_mode(from);\u000a  buf = (char *)0x0;\u000a  if ((can_reldir != (char *)0x0) && (can_fname != (char *)0x0)) {\u000a    buf = (char *)xmalloc(0x1000);\u000a    _Var1 = relpath(can_fname,can_reldir,buf,0x1000);\u000a    if (_Var1 == false) {\u000a      free(buf);\u000a      buf = (char *)0x0;\u000a    }\u000a  }\u000a  free(name);\u000a  free(can_reldir);\u000a  free(can_fname);\u000a  if (buf != (char *)0x0) {\u000a    return buf;\u000a  }\u000a  name = xstrdup(from);\u000a  return name;\u000a}\u000a\u000a
p325
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R14,RDI\nMOV RDI,RSI\nCALL 0x00403c50\nMOV R15,RAX\nMOV ESI,0x2\nMOV RDI,R15\nCALL 0x00403420\nMOV R13,RAX\nMOV ESI,0x2\nMOV RDI,R14\nCALL 0x00403420\nMOV R12,RAX\nXOR EBX,EBX\nTEST R13,R13\nJZ 0x00402cf1\nTEST R12,R12\nJZ 0x00402cf1\nMOV EDI,0x1000\nCALL 0x00406f80\nMOV RBX,RAX\nMOV ECX,0x1000\nMOV RDI,R12\nMOV RSI,R13\nMOV RDX,RBX\nCALL 0x00402d30\nTEST AL,AL\nJNZ 0x00402cf1\nMOV RDI,RBX\nCALL 0x00401640\nXOR EBX,EBX\nMOV RDI,R15\nCALL 0x00401640\nMOV RDI,R13\nCALL 0x00401640\nMOV RDI,R12\nCALL 0x00401640\nTEST RBX,RBX\nJZ 0x00402d1b\nMOV RAX,RBX\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\nMOV RDI,R14\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nJMP 0x004070f0\n'
p326
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 fe\n48 89 f7\ne8 bc 0f 00 00\n49 89 c7\nbe 02 00 00 00\n4c 89 ff\ne8 7c 07 00 00\n49 89 c5\nbe 02 00 00 00\n4c 89 f7\ne8 6c 07 00 00\n49 89 c4\n31 db\n4d 85 ed\n74 33\n4d 85 e4\n74 2e\nbf 00 10 00 00\ne8 b3 42 00 00\n48 89 c3\nb9 00 10 00 00\n4c 89 e7\n4c 89 ee\n48 89 da\ne8 4d 00 00 00\n84 c0\n75 0a\n48 89 df\ne8 51 e9 ff ff\n31 db\n4c 89 ff\ne8 47 e9 ff ff\n4c 89 ef\ne8 3f e9 ff ff\n4c 89 e7\ne8 37 e9 ff ff\n48 85 db\n74 0d\n48 89 d8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n4c 89 f7\n5b\n41 5c\n41 5d\n41 5e\n41 5f\ne9 c4 43 00 00\n'
p327
S'.text:0000000000402c80\n.text:0000000000402c82\n.text:0000000000402c84\n.text:0000000000402c86\n.text:0000000000402c88\n.text:0000000000402c89\n.text:0000000000402c8c\n.text:0000000000402c8f\n.text:0000000000402c94\n.text:0000000000402c97\n.text:0000000000402c9c\n.text:0000000000402c9f\n.text:0000000000402ca4\n.text:0000000000402ca7\n.text:0000000000402cac\n.text:0000000000402caf\n.text:0000000000402cb4\n.text:0000000000402cb7\n.text:0000000000402cb9\n.text:0000000000402cbc\n.text:0000000000402cbe\n.text:0000000000402cc1\n.text:0000000000402cc3\n.text:0000000000402cc8\n.text:0000000000402ccd\n.text:0000000000402cd0\n.text:0000000000402cd5\n.text:0000000000402cd8\n.text:0000000000402cdb\n.text:0000000000402cde\n.text:0000000000402ce3\n.text:0000000000402ce5\n.text:0000000000402ce7\n.text:0000000000402cea\n.text:0000000000402cef\n.text:0000000000402cf1\n.text:0000000000402cf4\n.text:0000000000402cf9\n.text:0000000000402cfc\n.text:0000000000402d01\n.text:0000000000402d04\n.text:0000000000402d09\n.text:0000000000402d0c\n.text:0000000000402d0e\n.text:0000000000402d11\n.text:0000000000402d12\n.text:0000000000402d14\n.text:0000000000402d16\n.text:0000000000402d18\n.text:0000000000402d1a\n.text:0000000000402d1b\n.text:0000000000402d1e\n.text:0000000000402d1f\n.text:0000000000402d21\n.text:0000000000402d23\n.text:0000000000402d25\n.text:0000000000402d27\n'
p328
tp329
sS'is_prime'
p330
(S'\n__stdcall is_prime(size_t candidate)\n'
p331
V\u000a_Bool is_prime(size_t candidate)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  long lVar3;\u000a  bool bVar4;\u000a  \u000a  bVar4 = candidate != (candidate / 3) * 3;\u000a  if ((9 < candidate) && (bVar4)) {\u000a    uVar2 = 9;\u000a    lVar3 = 0x10;\u000a    uVar1 = 5;\u000a    do {\u000a      uVar2 = uVar2 + lVar3;\u000a      bVar4 = candidate % uVar1 != 0;\u000a      if (candidate <= uVar2) {\u000a        return (_Bool)bVar4;\u000a      }\u000a      lVar3 = lVar3 + 8;\u000a      uVar1 = uVar1 + 2;\u000a    } while (bVar4);\u000a  }\u000a  return (_Bool)bVar4;\u000a}\u000a\u000a
p332
S'MOV R8,RDI\nMOV RCX,-0x5555555555555555\nMOV RAX,R8\nMUL RCX\nSHR RDX,1\nLEA RAX,[RDX + RDX*0x2]\nCMP R8,RAX\nSETNZ AL\nSETZ CL\nCMP R8,0xa\nJC 0x00404f55\nTEST CL,CL\nJNZ 0x00404f55\nMOV ESI,0x9\nMOV EDI,0x10\nMOV ECX,0x5\nNOP dword ptr [RAX]\nADD RSI,RDI\nXOR EDX,EDX\nMOV RAX,R8\nDIV RCX\nTEST RDX,RDX\nSETNZ AL\nSETZ DL\nCMP RSI,R8\nJNC 0x00404f55\nADD RDI,0x8\nADD RCX,0x2\nTEST DL,DL\nJZ 0x00404f30\nRET\n'
p333
S'49 89 f8\n48 b9 ab aa aa aa aa aa aa aa\n4c 89 c0\n48 f7 e1\n48 d1 ea\n48 8d 04 52\n49 39 c0\n0f 95 c0\n0f 94 c1\n49 83 f8 0a\n72 3c\n84 c9\n75 38\nbe 09 00 00 00\nbf 10 00 00 00\nb9 05 00 00 00\n0f 1f 40 00\n48 01 fe\n31 d2\n4c 89 c0\n48 f7 f1\n48 85 d2\n0f 95 c0\n0f 94 c2\n4c 39 c6\n73 0c\n48 83 c7 08\n48 83 c1 02\n84 d2\n74 db\nc3\n'
p334
S'.text:0000000000404ef0\n.text:0000000000404ef3\n.text:0000000000404efd\n.text:0000000000404f00\n.text:0000000000404f03\n.text:0000000000404f06\n.text:0000000000404f0a\n.text:0000000000404f0d\n.text:0000000000404f10\n.text:0000000000404f13\n.text:0000000000404f17\n.text:0000000000404f19\n.text:0000000000404f1b\n.text:0000000000404f1d\n.text:0000000000404f22\n.text:0000000000404f27\n.text:0000000000404f2c\n.text:0000000000404f30\n.text:0000000000404f33\n.text:0000000000404f35\n.text:0000000000404f38\n.text:0000000000404f3b\n.text:0000000000404f3e\n.text:0000000000404f41\n.text:0000000000404f44\n.text:0000000000404f47\n.text:0000000000404f49\n.text:0000000000404f4d\n.text:0000000000404f51\n.text:0000000000404f53\n.text:0000000000404f55\n'
p335
tp336
sS'fscanf'
p337
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p338
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_0060d0f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p339
S'JMP qword ptr [0x0060d0f8]\n'
p340
S'ff 25 02 b9 20 00\n'
p341
S'.plt:00000000004017f0\n'
p342
tp343
sS'memcpy'
p344
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p345
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_0060d158)();\u000a  return pvVar1;\u000a}\u000a\u000a
p346
S'JMP qword ptr [0x0060d158]\n'
p347
S'ff 25 a2 b8 20 00\n'
p348
S'.plt:00000000004018b0\n'
p349
tp350
sS'hash_get_n_buckets_used'
p351
(S'\n__stdcall hash_get_n_buckets_used(Hash_table * table)\n'
p352
V\u000asize_t hash_get_n_buckets_used(Hash_table *table)\u000a\u000a{\u000a  return table->n_buckets_used;\u000a}\u000a\u000a
p353
S'MOV RAX,qword ptr [RDI + 0x18]\nRET\n'
p354
S'48 8b 47 18\nc3\n'
p355
S'.text:0000000000403fe0\n.text:0000000000403fe4\n'
p356
tp357
sS'close_stdout_set_ignore_EPIPE'
p358
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p359
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p360
S'MOV byte ptr [0x0060d358],DIL\nRET\n'
p361
S'40 88 3d 51 98 20 00\nc3\n'
p362
S'.text:0000000000403b00\n.text:0000000000403b07\n'
p363
tp364
sS'iswprint'
p365
(S'\n__stdcall iswprint(wint_t __wc)\n'
p366
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_0060d238)();\u000a  return iVar1;\u000a}\u000a\u000a
p367
S'JMP qword ptr [0x0060d238]\n'
p368
S'ff 25 c2 b7 20 00\n'
p369
S'.plt:0000000000401a70\n'
p370
tp371
sS'c_isspace'
p372
(S'\n__stdcall c_isspace()\n'
p373
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p374
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00407ad5\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p375
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p376
S'.text:0000000000407ac0\n.text:0000000000407ac3\n.text:0000000000407ac6\n.text:0000000000407ac8\n.text:0000000000407acd\n.text:0000000000407acf\n.text:0000000000407ad1\n.text:0000000000407ad4\n.text:0000000000407ad5\n.text:0000000000407ad7\n'
p377
tp378
sS'open'
p379
(S'\n__stdcall open(char * __file, int __oflag)\n'
p380
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_0060d1e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p381
S'JMP qword ptr [0x0060d1e8]\n'
p382
S'ff 25 12 b8 20 00\n'
p383
S'.plt:00000000004019d0\n'
p384
tp385
sS'quotearg_n_custom_mem'
p386
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p387
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p388
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x0060d3a0]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x0060d390]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060d380]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060d370]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x004051b0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00406040\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p389
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 37 6f 20 00\n48 89 44 24 30\n0f 10 05 1b 6f 20 00\n0f 29 44 24 20\n0f 10 05 ff 6e 20 00\n0f 29 44 24 10\n0f 10 05 e3 6e 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p390
S'.text:0000000000406450\n.text:0000000000406451\n.text:0000000000406453\n.text:0000000000406455\n.text:0000000000406456\n.text:000000000040645a\n.text:000000000040645d\n.text:0000000000406460\n.text:0000000000406462\n.text:0000000000406469\n.text:000000000040646e\n.text:0000000000406475\n.text:000000000040647a\n.text:0000000000406481\n.text:0000000000406486\n.text:000000000040648d\n.text:0000000000406491\n.text:0000000000406494\n.text:0000000000406497\n.text:000000000040649c\n.text:000000000040649e\n.text:00000000004064a1\n.text:00000000004064a4\n.text:00000000004064a7\n.text:00000000004064ac\n.text:00000000004064b0\n.text:00000000004064b1\n.text:00000000004064b3\n.text:00000000004064b5\n.text:00000000004064b6\n'
p391
tp392
sS'rotl16'
p393
(S'\n__stdcall rotl16()\n'
p394
V\u000auint16_t rotl16(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint16_t)\u000a         ((ushort)(in_EDI >> (0x10 - (byte)in_ESI & 0x1f)) |\u000a         (ushort)(in_EDI << ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p395
S'MOV EAX,EDI\nMOV ECX,ESI\nSHL EAX,CL\nMOV ECX,0x10\nSUB ECX,ESI\nSHR EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p396
S'89 f8\n89 f1\nd3 e0\nb9 10 00 00 00\n29 f1\nd3 ef\n09 c7\n89 f8\nc3\n'
p397
S'.text:0000000000407960\n.text:0000000000407962\n.text:0000000000407964\n.text:0000000000407966\n.text:000000000040796b\n.text:000000000040796d\n.text:000000000040796f\n.text:0000000000407971\n.text:0000000000407973\n'
p398
tp399
sS'_init'
p400
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p401
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___0060cff8;\u000a  if (PTR___gmon_start___0060cff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___0060cff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p402
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x0060cff8]\nTEST RAX,RAX\nJZ 0x0040161a\nCALL RAX\nADD RSP,0x8\nRET\n'
p403
S'48 83 ec 08\n48 8b 05 e5 b9 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p404
S'.init:0000000000401608\n.init:000000000040160c\n.init:0000000000401613\n.init:0000000000401616\n.init:0000000000401618\n.init:000000000040161a\n.init:000000000040161e\n'
p405
tp406
sS'close_stdin_set_file_name'
p407
(S'\n__stdcall close_stdin_set_file_name(char * file)\n'
p408
V\u000avoid close_stdin_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p409
S'MOV qword ptr [0x0060d348],RDI\nRET\n'
p410
S'48 89 3d 31 99 20 00\nc3\n'
p411
S'.text:0000000000403a10\n.text:0000000000403a17\n'
p412
tp413
sS'set_quoting_flags'
p414
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p415
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p416
S'TEST RDI,RDI\nMOV ECX,0x60d370\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p417
S'48 85 ff\nb9 70 d3 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p418
S'.text:0000000000405190\n.text:0000000000405193\n.text:0000000000405198\n.text:000000000040519c\n.text:000000000040519f\n.text:00000000004051a2\n'
p419
tp420
sS'realloc'
p421
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p422
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_0060d1b0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p423
S'JMP qword ptr [0x0060d1b0]\n'
p424
S'ff 25 4a b8 20 00\n'
p425
S'.plt:0000000000401960\n'
p426
tp427
sS'__fprintf_chk'
p428
(S'\n__stdcall __fprintf_chk()\n'
p429
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_0060d228)();\u000a  return;\u000a}\u000a\u000a
p430
S'JMP qword ptr [0x0060d228]\n'
p431
S'ff 25 d2 b7 20 00\n'
p432
S'.plt:0000000000401a50\n'
p433
tp434
sS'get_charset_aliases'
p435
(S'\n__stdcall get_charset_aliases()\n'
p436
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00407e84_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00407e84_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00407e84_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00407e84_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_00407e84_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00407e84_caseD_9;\u000a      case -1:\u000a        goto switchD_00407e84_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_00407edd:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_00407ee3:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00407e84_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00407ee3;\u000a  }\u000a  goto LAB_00407edd;\u000a}\u000a\u000a
p437
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x0060d4b8]\nTEST R15,R15\nJNZ 0x00407ef2\nMOV EDI,0x40a5bc\nCALL 0x00401630\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00407ca8\nCMP byte ptr [RBX],0x0\nJNZ 0x00407cad\nMOV EBX,0x40a5cc\nMOV RDI,RBX\nCALL 0x00401770\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00407cc7\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00407cc9\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401910\nMOV R13,RAX\nTEST R13,R13\nJZ 0x00407d1d\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x004018b0\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00407d28\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00407d45\nMOV R15D,0x409ee9\nJMP 0x00407eeb\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x004019d0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00407edd\nMOV ESI,0x4091e2\nMOV EDI,EBP\nCALL 0x00401970\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00407ea4\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00407e70\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x004016b0\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x004016b0\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00407e70\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401940\nMOV ESI,0x40a5db\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x004017f0\nCMP EAX,0x2\nJL 0x00407ec4\nMOV RDI,R12\nCALL 0x00401770\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x00401770\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00407e4d\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401960\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00407d94\nJMP 0x00407ead\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401910\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00407d94\nJMP 0x00407ead\nMOV RDI,RBX\nCALL 0x004016d0\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00407dd7\nJMP qword ptr [0x40a480 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x004016d0\nCMP EAX,-0x1\nJZ 0x00407ec4\nCMP EAX,0xa\nJNZ 0x00407e90\nJMP 0x00407e70\nMOV EDI,EBP\nCALL 0x00401810\nJMP 0x00407edd\nMOV RDI,R15\nCALL 0x00401640\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00407f10\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00407edd\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00407ee3\nMOV R15D,0x409ee9\nMOV RDI,R13\nCALL 0x00401640\nMOV qword ptr [0x0060d4b8],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p438
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 30 58 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf bc a5 40 00\ne8 95 99 ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb cc a5 40 00\n48 89 df\ne8 bb 9a ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 39 9c ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 c3 9b ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf e9 9e 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 7c 9c ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe e2 91 40 00\n89 ef\ne8 06 9c ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 fb 98 ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 eb 98 ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 5f 9b ff ff\nbe db a5 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 fa 99 ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 69 99 ff ff\n49 89 c4\n48 89 ef\ne8 5e 99 ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 26 9b ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 b5 9a ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 58 98 ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 80 a4 40 00\n48 89 df\ne8 38 98 ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 65 99 ff ff\neb 30\n4c 89 ff\ne8 8b 97 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 44 00 00 00\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf e9 9e 40 00\n4c 89 ef\ne8 55 97 ff ff\n4c 89 3d c6 55 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p439
S'.text:0000000000407c70\n.text:0000000000407c71\n.text:0000000000407c73\n.text:0000000000407c75\n.text:0000000000407c77\n.text:0000000000407c79\n.text:0000000000407c7a\n.text:0000000000407c81\n.text:0000000000407c88\n.text:0000000000407c8b\n.text:0000000000407c91\n.text:0000000000407c96\n.text:0000000000407c9b\n.text:0000000000407c9e\n.text:0000000000407ca1\n.text:0000000000407ca3\n.text:0000000000407ca6\n.text:0000000000407ca8\n.text:0000000000407cad\n.text:0000000000407cb0\n.text:0000000000407cb5\n.text:0000000000407cb8\n.text:0000000000407cbb\n.text:0000000000407cbd\n.text:0000000000407cc2\n.text:0000000000407cc5\n.text:0000000000407cc7\n.text:0000000000407cc9\n.text:0000000000407ccd\n.text:0000000000407cd2\n.text:0000000000407cd7\n.text:0000000000407cda\n.text:0000000000407cdd\n.text:0000000000407cdf\n.text:0000000000407ce2\n.text:0000000000407ce5\n.text:0000000000407ce8\n.text:0000000000407ced\n.text:0000000000407cf0\n.text:0000000000407cf3\n.text:0000000000407cf6\n.text:0000000000407cf8\n.text:0000000000407cfe\n.text:0000000000407d08\n.text:0000000000407d0d\n.text:0000000000407d17\n.text:0000000000407d1b\n.text:0000000000407d1d\n.text:0000000000407d23\n.text:0000000000407d28\n.text:0000000000407d32\n.text:0000000000407d37\n.text:0000000000407d41\n.text:0000000000407d45\n.text:0000000000407d4a\n.text:0000000000407d4c\n.text:0000000000407d4f\n.text:0000000000407d54\n.text:0000000000407d56\n.text:0000000000407d58\n.text:0000000000407d5e\n.text:0000000000407d63\n.text:0000000000407d65\n.text:0000000000407d6a\n.text:0000000000407d6d\n.text:0000000000407d70\n.text:0000000000407d76\n.text:0000000000407d7b\n.text:0000000000407d80\n.text:0000000000407d82\n.text:0000000000407d87\n.text:0000000000407d8a\n.text:0000000000407d8f\n.text:0000000000407d94\n.text:0000000000407d99\n.text:0000000000407d9c\n.text:0000000000407d9f\n.text:0000000000407da2\n.text:0000000000407da5\n.text:0000000000407da8\n.text:0000000000407dad\n.text:0000000000407db0\n.text:0000000000407db5\n.text:0000000000407db8\n.text:0000000000407dbd\n.text:0000000000407dc0\n.text:0000000000407dc5\n.text:0000000000407dca\n.text:0000000000407dcd\n.text:0000000000407dd2\n.text:0000000000407dd7\n.text:0000000000407dd9\n.text:0000000000407ddc\n.text:0000000000407de1\n.text:0000000000407de6\n.text:0000000000407de8\n.text:0000000000407deb\n.text:0000000000407dee\n.text:0000000000407df1\n.text:0000000000407df6\n.text:0000000000407df9\n.text:0000000000407dff\n.text:0000000000407e02\n.text:0000000000407e07\n.text:0000000000407e0a\n.text:0000000000407e0d\n.text:0000000000407e12\n.text:0000000000407e15\n.text:0000000000407e1a\n.text:0000000000407e1f\n.text:0000000000407e22\n.text:0000000000407e24\n.text:0000000000407e28\n.text:0000000000407e2d\n.text:0000000000407e32\n.text:0000000000407e35\n.text:0000000000407e3a\n.text:0000000000407e3d\n.text:0000000000407e42\n.text:0000000000407e45\n.text:0000000000407e4b\n.text:0000000000407e4d\n.text:0000000000407e52\n.text:0000000000407e56\n.text:0000000000407e5b\n.text:0000000000407e5e\n.text:0000000000407e61\n.text:0000000000407e67\n.text:0000000000407e70\n.text:0000000000407e73\n.text:0000000000407e78\n.text:0000000000407e7b\n.text:0000000000407e7e\n.text:0000000000407e84\n.text:0000000000407e90\n.text:0000000000407e93\n.text:0000000000407e98\n.text:0000000000407e9b\n.text:0000000000407e9d\n.text:0000000000407ea0\n.text:0000000000407ea2\n.text:0000000000407ea4\n.text:0000000000407ea6\n.text:0000000000407eab\n.text:0000000000407ead\n.text:0000000000407eb0\n.text:0000000000407eb5\n.text:0000000000407eb7\n.text:0000000000407ebc\n.text:0000000000407ebf\n.text:0000000000407ec4\n.text:0000000000407ec7\n.text:0000000000407ecc\n.text:0000000000407ed1\n.text:0000000000407ed4\n.text:0000000000407ed6\n.text:0000000000407edb\n.text:0000000000407edd\n.text:0000000000407ee3\n.text:0000000000407ee6\n.text:0000000000407eeb\n.text:0000000000407ef2\n.text:0000000000407ef5\n.text:0000000000407efc\n.text:0000000000407efd\n.text:0000000000407eff\n.text:0000000000407f01\n.text:0000000000407f03\n.text:0000000000407f05\n.text:0000000000407f06\n'
p440
tp441
sS'nl_langinfo'
p442
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p443
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_0060d198)();\u000a  return pcVar1;\u000a}\u000a\u000a
p444
S'JMP qword ptr [0x0060d198]\n'
p445
S'ff 25 62 b8 20 00\n'
p446
S'.plt:0000000000401930\n'
p447
tp448
sS'x2realloc'
p449
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p450
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p451
S'MOV EDX,0x1\nJMP 0x00406ff0\n'
p452
S'ba 01 00 00 00\neb 89\n'
p453
S'.text:0000000000407060\n.text:0000000000407065\n'
p454
tp455
sS'__mempcpy_chk'
p456
(S'\n__stdcall __mempcpy_chk()\n'
p457
V\u000avoid __mempcpy_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___mempcpy_chk_0060d028)();\u000a  return;\u000a}\u000a\u000a
p458
S'JMP qword ptr [0x0060d028]\n'
p459
S'ff 25 d2 b9 20 00\n'
p460
S'.plt:0000000000401650\n'
p461
tp462
sS'strlen'
p463
(S'\n__stdcall strlen(char * __s)\n'
p464
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_0060d0b8)();\u000a  return sVar1;\u000a}\u000a\u000a
p465
S'JMP qword ptr [0x0060d0b8]\n'
p466
S'ff 25 42 b9 20 00\n'
p467
S'.plt:0000000000401770\n'
p468
tp469
sS'memcmp'
p470
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p471
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_0060d120)();\u000a  return iVar1;\u000a}\u000a\u000a
p472
S'JMP qword ptr [0x0060d120]\n'
p473
S'ff 25 da b8 20 00\n'
p474
S'.plt:0000000000401840\n'
p475
tp476
sS'hash_free'
p477
(S'\n__stdcall hash_free(Hash_table * table)\n'
p478
V\u000avoid hash_free(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  hash_entry *__ptr;\u000a  hash_entry *__ptr_00;\u000a  \u000a  if (((table->data_freer != (void (*)(void *))0x0) && (table->n_entries != 0)) &&\u000a     (__ptr_00 = table->bucket, __ptr_00 < table->bucket_limit)) {\u000a    do {\u000a      __ptr = __ptr_00;\u000a      if (__ptr_00->data != (void *)0x0) {\u000a        while (__ptr != (hash_entry *)0x0) {\u000a          (*table->data_freer)(__ptr->data);\u000a          __ptr = __ptr->next;\u000a        }\u000a      }\u000a      __ptr_00 = __ptr_00 + 1;\u000a    } while (__ptr_00 < table->bucket_limit);\u000a  }\u000a  __ptr_00 = table->bucket;\u000a  if (__ptr_00 < table->bucket_limit) {\u000a    do {\u000a      __ptr = __ptr_00->next;\u000a      while (__ptr != (hash_entry *)0x0) {\u000a        phVar1 = __ptr->next;\u000a        free(__ptr);\u000a        __ptr = phVar1;\u000a      }\u000a      __ptr_00 = __ptr_00 + 1;\u000a    } while (__ptr_00 < table->bucket_limit);\u000a  }\u000a  __ptr_00 = table->free_entry_list;\u000a  while (__ptr_00 != (hash_entry *)0x0) {\u000a    __ptr = __ptr_00->next;\u000a    free(__ptr_00);\u000a    __ptr_00 = __ptr;\u000a  }\u000a  free(table->bucket);\u000a  free(table);\u000a  return;\u000a}\u000a\u000a
p479
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nCMP qword ptr [R15 + 0x40],0x0\nJZ 0x00404732\nCMP qword ptr [R15 + 0x20],0x0\nJZ 0x00404732\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x0040470a\nJMP 0x00404732\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x00404732\nCMP qword ptr [R14],0x0\nJZ 0x00404700\nTEST R14,R14\nJZ 0x00404700\nMOV RBX,R14\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RBX]\nCALL qword ptr [R15 + 0x40]\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x00404720\nJMP 0x00404700\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x0040474a\nJMP 0x00404773\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x00404773\nMOV RDI,qword ptr [R14 + 0x8]\nTEST RDI,RDI\nJZ 0x00404740\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x00401640\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x00404760\nJMP 0x00404740\nMOV RDI,qword ptr [R15 + 0x48]\nTEST RDI,RDI\nJZ 0x00404791\nNOP dword ptr [RAX]\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x00401640\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x00404780\nMOV RDI,qword ptr [R15]\nCALL 0x00401640\nMOV RDI,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00401640\n'
p480
S'41 57\n41 56\n53\n49 89 ff\n49 83 7f 40 00\n74 53\n49 83 7f 20 00\n74 4c\n4d 8b 37\n4d 3b 77 08\n72 1b\neb 41\n49 83 c6 10\n4d 3b 77 08\n73 28\n49 83 3e 00\n74 f0\n4d 85 f6\n74 eb\n4c 89 f3\n0f 1f 84 00 00 00 00 00\n48 8b 3b\n41 ff 57 40\n48 8b 5b 08\n48 85 db\n75 f0\neb ce\n4d 8b 37\n4d 3b 77 08\n72 0f\neb 36\n49 83 c6 10\n4d 3b 77 08\n73 29\n49 8b 7e 08\n48 85 ff\n74 ed\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 5f 08\ne8 d7 ce ff ff\n48 85 db\n48 89 df\n75 ef\neb cd\n49 8b 7f 48\n48 85 ff\n74 15\n0f 1f 40 00\n48 8b 5f 08\ne8 b7 ce ff ff\n48 85 db\n48 89 df\n75 ef\n49 8b 3f\ne8 a7 ce ff ff\n4c 89 ff\n5b\n41 5e\n41 5f\ne9 9a ce ff ff\n'
p481
S'.text:00000000004046d0\n.text:00000000004046d2\n.text:00000000004046d4\n.text:00000000004046d5\n.text:00000000004046d8\n.text:00000000004046dd\n.text:00000000004046df\n.text:00000000004046e4\n.text:00000000004046e6\n.text:00000000004046e9\n.text:00000000004046ed\n.text:00000000004046ef\n.text:0000000000404700\n.text:0000000000404704\n.text:0000000000404708\n.text:000000000040470a\n.text:000000000040470e\n.text:0000000000404710\n.text:0000000000404713\n.text:0000000000404715\n.text:0000000000404718\n.text:0000000000404720\n.text:0000000000404723\n.text:0000000000404727\n.text:000000000040472b\n.text:000000000040472e\n.text:0000000000404730\n.text:0000000000404732\n.text:0000000000404735\n.text:0000000000404739\n.text:000000000040473b\n.text:0000000000404740\n.text:0000000000404744\n.text:0000000000404748\n.text:000000000040474a\n.text:000000000040474e\n.text:0000000000404751\n.text:0000000000404753\n.text:0000000000404760\n.text:0000000000404764\n.text:0000000000404769\n.text:000000000040476c\n.text:000000000040476f\n.text:0000000000404771\n.text:0000000000404773\n.text:0000000000404777\n.text:000000000040477a\n.text:000000000040477c\n.text:0000000000404780\n.text:0000000000404784\n.text:0000000000404789\n.text:000000000040478c\n.text:000000000040478f\n.text:0000000000404791\n.text:0000000000404794\n.text:0000000000404799\n.text:000000000040479c\n.text:000000000040479d\n.text:000000000040479f\n.text:00000000004047a1\n'
p482
tp483
sS'quotearg_n_style_mem'
p484
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p485
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p486
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00406270\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00406040\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p487
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p488
S'.text:00000000004062d0\n.text:00000000004062d1\n.text:00000000004062d3\n.text:00000000004062d5\n.text:00000000004062d6\n.text:00000000004062da\n.text:00000000004062dd\n.text:00000000004062e0\n.text:00000000004062e2\n.text:00000000004062e5\n.text:00000000004062e8\n.text:00000000004062ed\n.text:00000000004062ef\n.text:00000000004062f2\n.text:00000000004062f5\n.text:00000000004062f8\n.text:00000000004062fd\n.text:0000000000406301\n.text:0000000000406302\n.text:0000000000406304\n.text:0000000000406306\n.text:0000000000406307\n'
p489
tp490
sS'_exit'
p491
(S'\n__stdcall _exit(int __status)\n'
p492
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_0060d050)();\u000a  return;\u000a}\u000a\u000a
p493
S'JMP qword ptr [0x0060d050]\n'
p494
S'ff 25 aa b9 20 00\n'
p495
S'.plt:00000000004016a0\n'
p496
tp497
sS'free_entry'
p498
(S'\n__stdcall free_entry(Hash_table * table, hash_entry * entry)\n'
p499
V\u000avoid free_entry(Hash_table *table,hash_entry *entry)\u000a\u000a{\u000a  entry->data = (void *)0x0;\u000a  entry->next = table->free_entry_list;\u000a  table->free_entry_list = entry;\u000a  return;\u000a}\u000a\u000a
p500
S'MOV qword ptr [RSI],0x0\nMOV RAX,qword ptr [RDI + 0x48]\nMOV qword ptr [RSI + 0x8],RAX\nMOV qword ptr [RDI + 0x48],RSI\nRET\n'
p501
S'48 c7 06 00 00 00 00\n48 8b 47 48\n48 89 46 08\n48 89 77 48\nc3\n'
p502
S'.text:0000000000404f60\n.text:0000000000404f67\n.text:0000000000404f6b\n.text:0000000000404f6f\n.text:0000000000404f73\n'
p503
tp504
sS'argmatch_valid'
p505
(S'\n__stdcall argmatch_valid(char * * arglist, char * vallist, size_t valsize)\n'
p506
V\u000avoid argmatch_valid(char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  int iVar2;\u000a  char *__s;\u000a  char *__s1;\u000a  long lVar3;\u000a  \u000a  __s = (char *)dcgettext(0,"Valid arguments are:",5);\u000a  fputs_unlocked(__s,stderr);\u000a  __s = *arglist;\u000a  if (__s != (char *)0x0) {\u000a    __s1 = (char *)0x0;\u000a    lVar3 = 0;\u000a    do {\u000a      pFVar1 = stderr;\u000a      if (lVar3 == 0) {\u000aLAB_00407797:\u000a        __s = quote(__s);\u000a        __fprintf_chk(pFVar1,1,"\u005cn  - %s",__s);\u000a        __s1 = vallist;\u000a      }\u000a      else {\u000a        iVar2 = memcmp(__s1,vallist,valsize);\u000a        if (iVar2 != 0) goto LAB_00407797;\u000a        __s = quote(__s);\u000a        __fprintf_chk(pFVar1,1,&DAT_0040a185,__s);\u000a      }\u000a      __s = arglist[lVar3 + 1];\u000a      lVar3 = lVar3 + 1;\u000a      vallist = vallist + valsize;\u000a    } while (__s != (char *)0x0);\u000a  }\u000a  (*(code *)PTR_putc_unlocked_0060d178)(10,stderr);\u000a  return;\u000a}\u000a\u000a
p507
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R13,RSI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV ESI,0x40a168\nMOV EDX,0x5\nCALL 0x00401750\nMOV RSI,qword ptr [0x0060d320]\nMOV RDI,RAX\nCALL 0x00401850\nMOV qword ptr [RSP],RBX\nMOV RBX,qword ptr [RBX]\nTEST RBX,RBX\nMOV R12,qword ptr [0x0060d320]\nJZ 0x004077fa\nXOR EBP,EBP\nXOR R15D,R15D\nTEST R15,R15\nJZ 0x00407797\nMOV RDI,RBP\nMOV RSI,R13\nMOV RDX,R14\nCALL 0x00401840\nTEST EAX,EAX\nJZ 0x004077c0\nMOV RDI,RBX\nCALL 0x00406530\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x40a17d\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x00401a50\nMOV RBP,R13\nJMP 0x004077df\nMOV RDI,RBX\nCALL 0x00406530\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x40a185\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x00401a50\nMOV RAX,qword ptr [RSP]\nMOV RBX,qword ptr [RAX + R15*0x8 + 0x8]\nINC R15\nMOV R12,qword ptr [0x0060d320]\nADD R13,R14\nTEST RBX,RBX\nJNZ 0x00407780\nMOV EDI,0xa\nMOV RSI,R12\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004018f0\n'
p508
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f5\n48 89 fb\n31 ff\nbe 68 a1 40 00\nba 05 00 00 00\ne8 fb 9f ff ff\n48 8b 35 c4 5b 20 00\n48 89 c7\ne8 ec a0 ff ff\n48 89 1c 24\n48 8b 1b\n48 85 db\n4c 8b 25 ab 5b 20 00\n0f 84 7f 00 00 00\n31 ed\n45 31 ff\n4d 85 ff\n74 12\n48 89 ef\n4c 89 ee\n4c 89 f2\ne8 ad a0 ff ff\n85 c0\n74 29\n48 89 df\ne8 91 ed ff ff\n48 89 c1\nbe 01 00 00 00\nba 7d a1 40 00\n31 c0\n4c 89 e7\ne8 9a a2 ff ff\n4c 89 ed\neb 24\n48 89 df\ne8 68 ed ff ff\n48 89 c1\nbe 01 00 00 00\nba 85 a1 40 00\n31 c0\n4c 89 e7\ne8 71 a2 ff ff\n48 8b 04 24\n4a 8b 5c f8 08\n49 ff c7\n4c 8b 25 2e 5b 20 00\n4d 01 f5\n48 85 db\n75 86\nbf 0a 00 00 00\n4c 89 e6\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 db a0 ff ff\n'
p509
S'.text:0000000000407730\n.text:0000000000407731\n.text:0000000000407733\n.text:0000000000407735\n.text:0000000000407737\n.text:0000000000407739\n.text:000000000040773a\n.text:000000000040773b\n.text:000000000040773e\n.text:0000000000407741\n.text:0000000000407744\n.text:0000000000407746\n.text:000000000040774b\n.text:0000000000407750\n.text:0000000000407755\n.text:000000000040775c\n.text:000000000040775f\n.text:0000000000407764\n.text:0000000000407768\n.text:000000000040776b\n.text:000000000040776e\n.text:0000000000407775\n.text:000000000040777b\n.text:000000000040777d\n.text:0000000000407780\n.text:0000000000407783\n.text:0000000000407785\n.text:0000000000407788\n.text:000000000040778b\n.text:000000000040778e\n.text:0000000000407793\n.text:0000000000407795\n.text:0000000000407797\n.text:000000000040779a\n.text:000000000040779f\n.text:00000000004077a2\n.text:00000000004077a7\n.text:00000000004077ac\n.text:00000000004077ae\n.text:00000000004077b1\n.text:00000000004077b6\n.text:00000000004077b9\n.text:00000000004077c0\n.text:00000000004077c3\n.text:00000000004077c8\n.text:00000000004077cb\n.text:00000000004077d0\n.text:00000000004077d5\n.text:00000000004077d7\n.text:00000000004077da\n.text:00000000004077df\n.text:00000000004077e3\n.text:00000000004077e8\n.text:00000000004077eb\n.text:00000000004077f2\n.text:00000000004077f5\n.text:00000000004077f8\n.text:00000000004077fa\n.text:00000000004077ff\n.text:0000000000407802\n.text:0000000000407806\n.text:0000000000407807\n.text:0000000000407809\n.text:000000000040780b\n.text:000000000040780d\n.text:000000000040780f\n.text:0000000000407810\n'
p510
tp511
sS'hash_initialize'
p512
(S'\n__stdcall hash_initialize(size_t candidate, Hash_tuning * tuning, Hash_hasher * hasher, Hash_comparator * comparator, Hash_data_freer * data_freer)\n'
p513
V\u000aHash_table *\u000ahash_initialize(size_t candidate,Hash_tuning *tuning,size_t (*hasher)(void *,size_t),\u000a               _Bool (*comparator)(void *,void *),void (*data_freer)(void *))\u000a\u000a{\u000a  _Bool _Var1;\u000a  Hash_table *table;\u000a  size_t n;\u000a  hash_entry *phVar2;\u000a  code *pcVar3;\u000a  Hash_tuning *tuning_00;\u000a  code *pcVar4;\u000a  \u000a  pcVar3 = raw_hasher;\u000a  if (hasher != (size_t (*)(void *,size_t))0x0) {\u000a    pcVar3 = hasher;\u000a  }\u000a  pcVar4 = raw_comparator;\u000a  if (comparator != (_Bool (*)(void *,void *))0x0) {\u000a    pcVar4 = comparator;\u000a  }\u000a  table = (Hash_table *)malloc(0x50);\u000a  if (table != (Hash_table *)0x0) {\u000a    tuning_00 = &default_tuning;\u000a    if (tuning != (Hash_tuning *)0x0) {\u000a      tuning_00 = tuning;\u000a    }\u000a    table->tuning = tuning_00;\u000a    _Var1 = check_tuning(table);\u000a    if (_Var1 != false) {\u000a      n = compute_bucket_size(candidate,tuning_00);\u000a      table->n_buckets = n;\u000a      if (n != 0) {\u000a        phVar2 = (hash_entry *)rpl_calloc(n,0x10);\u000a        table->bucket = phVar2;\u000a        if (phVar2 != (hash_entry *)0x0) {\u000a          table->bucket_limit = phVar2 + table->n_buckets;\u000a          *(undefined4 *)&table->n_buckets_used = 0;\u000a          *(undefined4 *)((long)&table->n_buckets_used + 4) = 0;\u000a          *(undefined4 *)&table->n_entries = 0;\u000a          *(undefined4 *)((long)&table->n_entries + 4) = 0;\u000a          table->hasher = pcVar3;\u000a          table->comparator = pcVar4;\u000a          table->data_freer = data_freer;\u000a          table->free_entry_list = (hash_entry *)0x0;\u000a          return table;\u000a        }\u000a      }\u000a    }\u000a    free(table);\u000a  }\u000a  return (Hash_table *)0x0;\u000a}\u000a\u000a
p514
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R13,R8\nMOV R12,RSI\nMOV R15,RDI\nTEST RDX,RDX\nMOV EBP,0x4044e0\nCMOVNZ RBP,RDX\nTEST RCX,RCX\nMOV R14D,0x404500\nCMOVNZ R14,RCX\nMOV EDI,0x50\nCALL 0x00401910\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004044c5\nMOV qword ptr [RSP],R13\nTEST R12,R12\nMOV R13D,0x40980c\nCMOVNZ R13,R12\nMOV qword ptr [RBX + 0x28],R13\nMOV RDI,RBX\nCALL 0x00404510\nTEST AL,AL\nJZ 0x004044bd\nMOV RDI,R15\nMOV RSI,R13\nCALL 0x00404590\nMOV qword ptr [RBX + 0x10],RAX\nTEST RAX,RAX\nJZ 0x004044bd\nMOV ESI,0x10\nMOV RDI,RAX\nCALL 0x004071e0\nMOV qword ptr [RBX],RAX\nTEST RAX,RAX\nJZ 0x004044bd\nMOV RCX,qword ptr [RBX + 0x10]\nSHL RCX,0x4\nADD RAX,RCX\nMOV qword ptr [RBX + 0x8],RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX + 0x18],XMM0\nMOV qword ptr [RBX + 0x30],RBP\nMOV qword ptr [RBX + 0x38],R14\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX + 0x40],RAX\nMOV qword ptr [RBX + 0x48],0x0\nJMP 0x004044c7\nMOV RDI,RBX\nCALL 0x00401640\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p515
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 c5\n49 89 f4\n49 89 ff\n48 85 d2\nbd e0 44 40 00\n48 0f 45 ea\n48 85 c9\n41 be 00 45 40 00\n4c 0f 45 f1\nbf 50 00 00 00\ne8 d9 d4 ff ff\n48 89 c3\n48 85 db\n0f 84 82 00 00 00\n4c 89 2c 24\n4d 85 e4\n41 bd 0c 98 40 00\n4d 0f 45 ec\n4c 89 6b 28\n48 89 df\ne8 b0 00 00 00\n84 c0\n74 59\n4c 89 ff\n4c 89 ee\ne8 21 01 00 00\n48 89 43 10\n48 85 c0\n74 45\nbe 10 00 00 00\n48 89 c7\ne8 5b 2d 00 00\n48 89 03\n48 85 c0\n74 30\n48 8b 4b 10\n48 c1 e1 04\n48 01 c8\n48 89 43 08\n0f 57 c0\n0f 11 43 18\n48 89 6b 30\n4c 89 73 38\n48 8b 04 24\n48 89 43 40\n48 c7 43 48 00 00 00 00\neb 0a\n48 89 df\ne8 7b d1 ff ff\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p516
S'.text:0000000000404400\n.text:0000000000404401\n.text:0000000000404403\n.text:0000000000404405\n.text:0000000000404407\n.text:0000000000404409\n.text:000000000040440a\n.text:000000000040440b\n.text:000000000040440e\n.text:0000000000404411\n.text:0000000000404414\n.text:0000000000404417\n.text:000000000040441c\n.text:0000000000404420\n.text:0000000000404423\n.text:0000000000404429\n.text:000000000040442d\n.text:0000000000404432\n.text:0000000000404437\n.text:000000000040443a\n.text:000000000040443d\n.text:0000000000404443\n.text:0000000000404447\n.text:000000000040444a\n.text:0000000000404450\n.text:0000000000404454\n.text:0000000000404458\n.text:000000000040445b\n.text:0000000000404460\n.text:0000000000404462\n.text:0000000000404464\n.text:0000000000404467\n.text:000000000040446a\n.text:000000000040446f\n.text:0000000000404473\n.text:0000000000404476\n.text:0000000000404478\n.text:000000000040447d\n.text:0000000000404480\n.text:0000000000404485\n.text:0000000000404488\n.text:000000000040448b\n.text:000000000040448d\n.text:0000000000404491\n.text:0000000000404495\n.text:0000000000404498\n.text:000000000040449c\n.text:000000000040449f\n.text:00000000004044a3\n.text:00000000004044a7\n.text:00000000004044ab\n.text:00000000004044af\n.text:00000000004044b3\n.text:00000000004044bb\n.text:00000000004044bd\n.text:00000000004044c0\n.text:00000000004044c5\n.text:00000000004044c7\n.text:00000000004044ca\n.text:00000000004044ce\n.text:00000000004044cf\n.text:00000000004044d1\n.text:00000000004044d3\n.text:00000000004044d5\n.text:00000000004044d7\n.text:00000000004044d8\n'
p517
tp518
sS'xrealloc'
p519
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p520
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p521
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00406fd7\nTEST RBX,RBX\nJNZ 0x00406fd7\nCALL 0x00401640\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401960\nTEST RBX,RBX\nJZ 0x00406fe9\nTEST RAX,RAX\nJZ 0x00406feb\nPOP RBX\nRET\nCALL 0x00407110\n'
p522
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 6d a6 ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 81 a9 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p523
S'.text:0000000000406fc0\n.text:0000000000406fc1\n.text:0000000000406fc4\n.text:0000000000406fc7\n.text:0000000000406fc9\n.text:0000000000406fcc\n.text:0000000000406fce\n.text:0000000000406fd3\n.text:0000000000406fd5\n.text:0000000000406fd6\n.text:0000000000406fd7\n.text:0000000000406fda\n.text:0000000000406fdf\n.text:0000000000406fe2\n.text:0000000000406fe4\n.text:0000000000406fe7\n.text:0000000000406fe9\n.text:0000000000406fea\n.text:0000000000406feb\n'
p524
tp525
sS'xgetcwd'
p526
(S'\n__stdcall xgetcwd()\n'
p527
V\u000achar * xgetcwd(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  int *piVar2;\u000a  \u000a  pcVar1 = getcwd((char *)0x0,0);\u000a  if (pcVar1 == (char *)0x0) {\u000a    piVar2 = __errno_location();\u000a    if (*piVar2 == 0xc) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die();\u000a    }\u000a  }\u000a  return pcVar1;\u000a}\u000a\u000a
p528
S'PUSH RBX\nXOR EDI,EDI\nXOR ESI,ESI\nCALL 0x00401800\nMOV RBX,RAX\nTEST RBX,RBX\nJNZ 0x0040715c\nCALL 0x00401670\nCMP dword ptr [RAX],0xc\nJZ 0x00407161\nMOV RAX,RBX\nPOP RBX\nRET\nCALL 0x00407110\n'
p529
S'53\n31 ff\n31 f6\ne8 b6 a6 ff ff\n48 89 c3\n48 85 db\n75 0a\ne8 19 a5 ff ff\n83 38 0c\n74 05\n48 89 d8\n5b\nc3\ne8 aa ff ff ff\n'
p530
S'.text:0000000000407140\n.text:0000000000407141\n.text:0000000000407143\n.text:0000000000407145\n.text:000000000040714a\n.text:000000000040714d\n.text:0000000000407150\n.text:0000000000407152\n.text:0000000000407157\n.text:000000000040715a\n.text:000000000040715c\n.text:000000000040715f\n.text:0000000000407160\n.text:0000000000407161\n'
p531
tp532
sS'dir_name'
p533
(S'\n__stdcall dir_name(char * file)\n'
p534
V\u000achar * dir_name(char *file)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = mdir_name(file);\u000a  if (pcVar1 != (char *)0x0) {\u000a    return pcVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p535
S'PUSH RAX\nCALL 0x00403cb0\nTEST RAX,RAX\nJZ 0x00403c5d\nPOP RCX\nRET\nCALL 0x00407110\n'
p536
S'50\ne8 5a 00 00 00\n48 85 c0\n74 02\n59\nc3\ne8 ae 34 00 00\n'
p537
S'.text:0000000000403c50\n.text:0000000000403c51\n.text:0000000000403c56\n.text:0000000000403c59\n.text:0000000000403c5b\n.text:0000000000403c5c\n.text:0000000000403c5d\n'
p538
tp539
sS'close_stdout'
p540
(S'\n__stdcall close_stdout()\n'
p541
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00403b37;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,&DAT_0040a187,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00403b37:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p542
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x0060d2e8]\nCALL 0x00407b30\nTEST EAX,EAX\nJZ 0x00403b37\nCMP byte ptr [0x0060d358],0x0\nJZ 0x00403b4c\nCALL 0x00401670\nCMP dword ptr [RAX],0x20\nJNZ 0x00403b4c\nMOV RDI,qword ptr [0x0060d320]\nCALL 0x00407b30\nTEST EAX,EAX\nJNZ 0x00403b91\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x409742\nMOV EDX,0x5\nCALL 0x00401750\nMOV R14,RAX\nMOV RBX,qword ptr [0x0060d350]\nCALL 0x00401670\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x00403b9c\nXOR EDI,EDI\nMOV EDX,0x40a187\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x004019c0\nMOV EDI,dword ptr [0x0060d268]\nCALL 0x004016a0\nMOV EDI,dword ptr [0x0060d268]\nCALL 0x004016a0\nMOV RDI,RBX\nCALL 0x004063d0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40973b\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x004019c0\nMOV EDI,dword ptr [0x0060d268]\nCALL 0x004016a0\n'
p543
S'55\n41 56\n53\n48 8b 3d cd 97 20 00\ne8 10 40 00 00\n85 c0\n74 13\n80 3d 2d 98 20 00 00\n74 1f\ne8 3e db ff ff\n83 38 20\n75 15\n48 8b 3d e2 97 20 00\ne8 ed 3f 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe 42 97 40 00\nba 05 00 00 00\ne8 f3 db ff ff\n49 89 c6\n48 8b 1d e9 97 20 00\ne8 04 db ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 87 a1 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 3a de ff ff\n8b 3d dc 96 20 00\ne8 0f db ff ff\n8b 3d d1 96 20 00\ne8 04 db ff ff\n48 89 df\ne8 2c 28 00 00\n48 89 c1\n31 ff\nba 3b 97 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 06 de ff ff\n8b 3d a8 96 20 00\ne8 db da ff ff\n'
p544
S'.text:0000000000403b10\n.text:0000000000403b11\n.text:0000000000403b13\n.text:0000000000403b14\n.text:0000000000403b1b\n.text:0000000000403b20\n.text:0000000000403b22\n.text:0000000000403b24\n.text:0000000000403b2b\n.text:0000000000403b2d\n.text:0000000000403b32\n.text:0000000000403b35\n.text:0000000000403b37\n.text:0000000000403b3e\n.text:0000000000403b43\n.text:0000000000403b45\n.text:0000000000403b47\n.text:0000000000403b48\n.text:0000000000403b4a\n.text:0000000000403b4b\n.text:0000000000403b4c\n.text:0000000000403b4e\n.text:0000000000403b53\n.text:0000000000403b58\n.text:0000000000403b5d\n.text:0000000000403b60\n.text:0000000000403b67\n.text:0000000000403b6c\n.text:0000000000403b6f\n.text:0000000000403b71\n.text:0000000000403b73\n.text:0000000000403b75\n.text:0000000000403b7a\n.text:0000000000403b7c\n.text:0000000000403b7e\n.text:0000000000403b81\n.text:0000000000403b86\n.text:0000000000403b8c\n.text:0000000000403b91\n.text:0000000000403b97\n.text:0000000000403b9c\n.text:0000000000403b9f\n.text:0000000000403ba4\n.text:0000000000403ba7\n.text:0000000000403ba9\n.text:0000000000403bae\n.text:0000000000403bb0\n.text:0000000000403bb2\n.text:0000000000403bb5\n.text:0000000000403bba\n.text:0000000000403bc0\n'
p545
tp546
sS'version_etc_ar'
p547
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p548
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p549
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00406dd0\nJMP 0x00406a60\n'
p550
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p551
S'.text:0000000000406dc0\n.text:0000000000406dc7\n.text:0000000000406dd0\n.text:0000000000406dd6\n.text:0000000000406dda\n.text:0000000000406ddc\n'
p552
tp553
sS'c_isxdigit'
p554
(S'\n__stdcall c_isxdigit()\n'
p555
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p556
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x00407b0b\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p557
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p558
S'.text:0000000000407af0\n.text:0000000000407af3\n.text:0000000000407af6\n.text:0000000000407af8\n.text:0000000000407b02\n.text:0000000000407b04\n.text:0000000000407b07\n.text:0000000000407b0a\n.text:0000000000407b0b\n.text:0000000000407b0d\n'
p559
tp560
sS'__libc_csu_fini'
p561
(S'\n__stdcall __libc_csu_fini()\n'
p562
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p563
S'RET\n'
p564
S'f3 c3\n'
p565
S'.text:0000000000408000\n'
p566
tp567
sS'__rawmemchr'
p568
(S'\n__stdcall __rawmemchr()\n'
p569
V\u000avoid __rawmemchr(void)\u000a\u000a{\u000a  (*(code *)PTR___rawmemchr_0060d180)();\u000a  return;\u000a}\u000a\u000a
p570
S'JMP qword ptr [0x0060d180]\n'
p571
S'ff 25 7a b8 20 00\n'
p572
S'.plt:0000000000401900\n'
p573
tp574
sS'abort'
p575
(S'\n__stdcall abort()\n'
p576
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_0060d030)();\u000a  return;\u000a}\u000a\u000a
p577
S'JMP qword ptr [0x0060d030]\n'
p578
S'ff 25 ca b9 20 00\n'
p579
S'.plt:0000000000401660\n'
p580
tp581
sS'opendir'
p582
(S'\n__stdcall opendir(char * __name)\n'
p583
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aDIR * opendir(char *__name)\u000a\u000a{\u000a  DIR *pDVar1;\u000a  \u000a  pDVar1 = (DIR *)(*(code *)PTR_opendir_0060d098)();\u000a  return pDVar1;\u000a}\u000a\u000a
p584
S'JMP qword ptr [0x0060d098]\n'
p585
S'ff 25 62 b9 20 00\n'
p586
S'.plt:0000000000401730\n'
p587
tp588
sS'closedir'
p589
(S'\n__stdcall closedir(DIR * __dirp)\n'
p590
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint closedir(DIR *__dirp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_closedir_0060d118)();\u000a  return iVar1;\u000a}\u000a\u000a
p591
S'JMP qword ptr [0x0060d118]\n'
p592
S'ff 25 e2 b8 20 00\n'
p593
S'.plt:0000000000401830\n'
p594
tp595
sS'compute_bucket_size'
p596
(S'\n__stdcall compute_bucket_size(size_t candidate, Hash_tuning * tuning)\n'
p597
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000asize_t compute_bucket_size(size_t candidate,Hash_tuning *tuning)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  float fVar3;\u000a  \u000a  if (tuning->is_n_buckets == false) {\u000a    if ((long)candidate < 0) {\u000a      fVar3 = (float)((ulong)((uint)candidate & 1) | candidate >> 1);\u000a      fVar3 = fVar3 + fVar3;\u000a    }\u000a    else {\u000a      fVar3 = (float)candidate;\u000a    }\u000a    fVar3 = fVar3 / tuning->growth_threshold;\u000a    candidate = (long)fVar3;\u000a    if (DAT_00409798 <= fVar3) {\u000a      candidate = (long)(fVar3 - DAT_00409798) ^ 0x8000000000000000;\u000a    }\u000a    if (_DAT_0040979c <= fVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  sVar1 = next_prime(candidate);\u000a  sVar2 = 0;\u000a  if (SUB168(ZEXT816(sVar1) * ZEXT816(8) >> 0x40,0) == 0) {\u000a    sVar2 = sVar1;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p598
S'CMP byte ptr [RSI + 0x10],0x0\nJNZ 0x004045f2\nTEST RDI,RDI\nJS 0x004045a2\nCVTSI2SS XMM0,RDI\nJMP 0x004045b7\nMOV RAX,RDI\nSHR RAX,1\nAND EDI,0x1\nOR RDI,RAX\nCVTSI2SS XMM0,RDI\nADDSS XMM0,XMM0\nDIVSS XMM0,dword ptr [RSI + 0x8]\nMOVSS XMM1,dword ptr [0x00409798]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RDI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RDI,RCX\nUCOMISS XMM0,dword ptr [0x0040979c]\nJNC 0x00404611\nPUSH RAX\nCALL 0x00404e90\nMOV RSI,RAX\nMOV EDX,0x8\nXOR ECX,ECX\nMUL RDX\nCMOVNO RCX,RSI\nADD RSP,0x8\nMOV RAX,RCX\nRET\nXOR ECX,ECX\nMOV RAX,RCX\nRET\n'
p599
S'80 7e 10 00\n75 5c\n48 85 ff\n78 07\nf3 48 0f 2a c7\neb 15\n48 89 f8\n48 d1 e8\n83 e7 01\n48 09 c7\nf3 48 0f 2a c7\nf3 0f 58 c0\nf3 0f 5e 46 08\nf3 0f 10 0d d4 51 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f8\n0f 2e c1\n48 0f 43 f9\n0f 2e 05 ac 51 00 00\n73 1f\n50\ne8 98 08 00 00\n48 89 c6\nba 08 00 00 00\n31 c9\n48 f7 e2\n48 0f 41 ce\n48 83 c4 08\n48 89 c8\nc3\n31 c9\n48 89 c8\nc3\n'
p600
S'.text:0000000000404590\n.text:0000000000404594\n.text:0000000000404596\n.text:0000000000404599\n.text:000000000040459b\n.text:00000000004045a0\n.text:00000000004045a2\n.text:00000000004045a5\n.text:00000000004045a8\n.text:00000000004045ab\n.text:00000000004045ae\n.text:00000000004045b3\n.text:00000000004045b7\n.text:00000000004045bc\n.text:00000000004045c4\n.text:00000000004045c7\n.text:00000000004045cb\n.text:00000000004045d0\n.text:00000000004045da\n.text:00000000004045dd\n.text:00000000004045e2\n.text:00000000004045e5\n.text:00000000004045e9\n.text:00000000004045f0\n.text:00000000004045f2\n.text:00000000004045f3\n.text:00000000004045f8\n.text:00000000004045fb\n.text:0000000000404600\n.text:0000000000404602\n.text:0000000000404605\n.text:0000000000404609\n.text:000000000040460d\n.text:0000000000404610\n.text:0000000000404611\n.text:0000000000404613\n.text:0000000000404616\n'
p601
tp602
sS'longest_relative_suffix'
p603
(S'\n__stdcall longest_relative_suffix(char * f)\n'
p604
V\u000achar * longest_relative_suffix(char *f)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  f = f + -1;\u000a  do {\u000a    pcVar1 = f + 1;\u000a    f = f + 1;\u000a  } while (*pcVar1 == '/');\u000a  return f;\u000a}\u000a\u000a
p605
S'DEC RDI\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP byte ptr [RDI + 0x1],0x2f\nLEA RDI,[RDI + 0x1]\nJZ 0x00403fc0\nMOV RAX,RDI\nRET\n'
p606
S'48 ff cf\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n80 7f 01 2f\n48 8d 7f 01\n74 f6\n48 89 f8\nc3\n'
p607
S'.text:0000000000403fb0\n.text:0000000000403fb3\n.text:0000000000403fc0\n.text:0000000000403fc4\n.text:0000000000403fc8\n.text:0000000000403fca\n.text:0000000000403fcd\n'
p608
tp609
sS'version_etc'
p610
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p611
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p612
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00406e92\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00406df0\nADD RSP,0xd8\nRET\n'
p613
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p614
S'.text:0000000000406e50\n.text:0000000000406e57\n.text:0000000000406e59\n.text:0000000000406e5b\n.text:0000000000406e60\n.text:0000000000406e65\n.text:0000000000406e6a\n.text:0000000000406e72\n.text:0000000000406e7a\n.text:0000000000406e82\n.text:0000000000406e8a\n.text:0000000000406e92\n.text:0000000000406e97\n.text:0000000000406e9c\n.text:0000000000406ea1\n.text:0000000000406ea6\n.text:0000000000406eae\n.text:0000000000406eb3\n.text:0000000000406ebb\n.text:0000000000406ec2\n.text:0000000000406ec5\n.text:0000000000406eca\n.text:0000000000406ed1\n'
p615
tp616
sS'numbered_backup'
p617
(S'\n__stdcall numbered_backup(char * * buffer, size_t buffer_size, size_t filelen)\n'
p618
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000anumbered_backup_result numbered_backup(char **buffer,size_t buffer_size,size_t filelen)\u000a\u000a{\u000a  size_t s;\u000a  char *__dest;\u000a  char cVar1;\u000a  undefined2 uVar2;\u000a  long lVar3;\u000a  int iVar4;\u000a  undefined2 *name;\u000a  size_t sVar5;\u000a  DIR *__dirp;\u000a  dirent *pdVar6;\u000a  char *name_00;\u000a  char *__s2;\u000a  size_t sVar7;\u000a  long lVar8;\u000a  ulong __n;\u000a  bool bVar9;\u000a  ulong local_78;\u000a  ulong local_68;\u000a  ulong local_60;\u000a  \u000a  name_00 = *buffer;\u000a  name = (undefined2 *)last_component(name_00);\u000a  sVar5 = base_len((char *)name);\u000a  uVar2 = *name;\u000a  *name = 0x2e;\u000a  __dirp = opendir_safer(name_00);\u000a  *name = uVar2;\u000a  *(undefined *)((long)name + sVar5 + 4) = 0;\u000a  *(undefined4 *)((long)name + sVar5) = 0x7e317e2e;\u000a  if (__dirp == (DIR *)0x0) {\u000a    local_78._0_4_ = BACKUP_IS_NEW;\u000a  }\u000a  else {\u000a    pdVar6 = readdir((DIR *)__dirp);\u000a    if (pdVar6 == (dirent *)0x0) {\u000a      local_78._0_4_ = BACKUP_IS_NEW;\u000a    }\u000a    else {\u000a      name = (undefined2 *)((long)name - (long)name_00);\u000a      local_78 = 2;\u000a      local_68 = 1;\u000a      local_60 = buffer_size;\u000a      do {\u000a        if (pdVar6->d_ino != 0) {\u000a          sVar7 = strlen(pdVar6->d_name);\u000a          if (((sVar5 + 4 <= sVar7) &&\u000a              (iVar4 = memcmp(name_00 + (long)name,pdVar6->d_name,sVar5 + 2), iVar4 == 0)) &&\u000a             ((byte)(pdVar6->d_name[sVar5 + 2] - 0x31U) < 9)) {\u000a            bVar9 = pdVar6->d_name[sVar5 + 2] == '9';\u000a            cVar1 = pdVar6->d_name[sVar5 + 3];\u000a            iVar4 = (int)cVar1;\u000a            if (iVar4 - 0x30U < 10) {\u000a              lVar3 = 0;\u000a              do {\u000a                lVar8 = lVar3;\u000a                bVar9 = (bool)(bVar9 & (char)iVar4 == '9');\u000a                cVar1 = pdVar6->d_name[lVar8 + sVar5 + 4];\u000a                iVar4 = (int)cVar1;\u000a                lVar3 = lVar8 + 1;\u000a              } while (iVar4 - 0x30U < 10);\u000a              __n = lVar8 + 2;\u000a            }\u000a            else {\u000a              __n = 1;\u000a            }\u000a            if (((cVar1 == '~') && (__s2 = pdVar6->d_name + sVar5 + 2, __s2[__n + 1] == 0)) &&\u000a               ((local_68 < __n ||\u000a                ((local_68 == __n && (iVar4 = memcmp(name_00 + filelen + 2,__s2,__n), iVar4 < 1)))))\u000a               ) {\u000a              local_78 = (ulong)bVar9;\u000a              local_68 = local_78 + __n;\u000a              s = filelen + 3 + local_68;\u000a              if (local_60 <= s) {\u000a                name_00 = (char *)xnrealloc(name_00,2,s);\u000a                local_60 = s * 2;\u000a              }\u000a              *(undefined2 *)(name_00 + filelen) = 0x7e2e;\u000a              name_00[filelen + 2] = '0';\u000a              __dest = name_00 + local_78 + 2 + filelen;\u000a              memcpy(__dest,__s2,__n + 2);\u000a              __s2 = __dest + (__n - 1);\u000a              cVar1 = __dest[__n - 1];\u000a              while (cVar1 == '9') {\u000a                *__s2 = '0';\u000a                cVar1 = __s2[-1];\u000a                __s2 = __s2 + -1;\u000a              }\u000a              *__s2 = cVar1 + 1;\u000a            }\u000a          }\u000a        }\u000a        pdVar6 = readdir((DIR *)__dirp);\u000a      } while (pdVar6 != (dirent *)0x0);\u000a    }\u000a    closedir((DIR *)__dirp);\u000a    *buffer = name_00;\u000a  }\u000a  return (numbered_backup_result)local_78;\u000a}\u000a\u000a
p619
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x58\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV R14,RDI\nMOV R15,qword ptr [R14]\nMOV RDI,R15\nCALL 0x00403d10\nMOV R13,RAX\nMOV RDI,R13\nCALL 0x00403d70\nMOV RBP,RAX\nMOVZX EBX,word ptr [R13]\nMOV word ptr [R13],0x2e\nMOV RDI,R15\nCALL 0x00403bd0\nMOV R12,RAX\nMOV word ptr [R13],BX\nMOV RBX,RBP\nMOV byte ptr [R13 + RBX*0x1 + 0x4],0x0\nMOV dword ptr [R13 + RBX*0x1],0x7e317e2e\nTEST R12,R12\nJZ 0x00403116\nMOV qword ptr [RSP + 0x40],R14\nMOV RDI,R12\nCALL 0x004018e0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00403120\nSUB R13,R15\nLEA RAX,[RBX + 0x4]\nMOV qword ptr [RSP + 0x50],RAX\nLEA RAX,[RBX + 0x2]\nMOV qword ptr [RSP + 0x48],RAX\nMOV RAX,qword ptr [RSP + 0x18]\nLEA RAX,[RAX + 0x3]\nMOV qword ptr [RSP + 0x30],RAX\nLEA RAX,[RBX + 0x17]\nMOV qword ptr [RSP + 0x38],RAX\nMOV EAX,0x2\nMOV qword ptr [RSP + 0x10],RAX\nMOV EAX,0x1\nMOV qword ptr [RSP + 0x20],RAX\nMOV qword ptr [RSP + 0x8],RBX\nJMP 0x00403200\nMOV EAX,0x2\nJMP 0x004032f9\nMOV EAX,0x2\nMOV qword ptr [RSP + 0x10],RAX\nJMP 0x004032e4\nCMP qword ptr [RSP + 0x20],R15\nJNC 0x00403157\nMOVZX ESI,BL\nLEA RCX,[RSI + R15*0x1]\nMOV RAX,qword ptr [RSP + 0x30]\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RAX + RCX*0x1]\nCMP qword ptr [RSP + 0x28],RAX\nJBE 0x0040317c\nMOV RAX,RBP\nJMP 0x0040319d\nJNZ 0x004032c2\nMOV RAX,qword ptr [RSP + 0x18]\nLEA RDI,[RBP + RAX*0x1 + 0x2]\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00401840\nTEST EAX,EAX\nJG 0x004032c2\nJMP 0x00403136\nMOV RBX,RSI\nMOV ESI,0x2\nMOV RDI,RBP\nMOV RBP,RAX\nMOV RDX,RBP\nCALL 0x00406fa0\nMOV RSI,RBX\nADD RBP,RBP\nMOV qword ptr [RSP + 0x28],RBP\nMOV RDX,qword ptr [RSP + 0x18]\nLEA RCX,[RAX + RDX*0x1]\nMOV word ptr [RAX + RDX*0x1],0x7e2e\nMOV RBX,RAX\nMOV byte ptr [RAX + RDX*0x1 + 0x2],0x30\nMOV qword ptr [RSP + 0x10],RSI\nLEA RBP,[RSI + RCX*0x1 + 0x2]\nLEA RDX,[R15 + 0x2]\nMOV RDI,RBP\nMOV RSI,R14\nCALL 0x004018b0\nLEA RAX,[R15 + RBP*0x1 + -0x1]\nMOV CL,byte ptr [R15 + RBP*0x1 + -0x1]\nCMP CL,0x39\nJNZ 0x004031ef\nNOP dword ptr [RAX]\nMOV byte ptr [RAX],0x30\nMOVZX ECX,byte ptr [RAX + -0x1]\nDEC RAX\nCMP CL,0x39\nJZ 0x004031e0\nINC CL\nMOV byte ptr [RAX],CL\nMOV R15,RBX\nJMP 0x004032c5\nCMP qword ptr [R14],0x0\nJZ 0x004032d0\nLEA RBP,[R14 + 0x13]\nMOV RDI,RBP\nCALL 0x00401770\nCMP RAX,qword ptr [RSP + 0x50]\nJC 0x004032d0\nLEA RDI,[R15 + R13*0x1]\nMOV RSI,RBP\nMOV RDX,qword ptr [RSP + 0x48]\nCALL 0x00401840\nTEST EAX,EAX\nJNZ 0x004032d0\nMOV AL,byte ptr [R14 + RBX*0x1 + 0x15]\nMOV ECX,EAX\nADD CL,0xcf\nCMP CL,0x8\nJA 0x004032d0\nLEA RCX,[R14 + RBX*0x1 + 0x13]\nCMP AL,0x39\nSETZ BL\nMOVSX EAX,byte ptr [RCX + 0x3]\nMOV ECX,EAX\nADD ECX,-0x30\nMOV RBP,R15\nCMP ECX,0x9\nJA 0x004032a2\nMOV RCX,qword ptr [RSP + 0x38]\nLEA RCX,[R14 + RCX*0x1]\nXOR R15D,R15D\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP AL,0x39\nSETZ AL\nAND BL,AL\nMOVSX EAX,byte ptr [RCX + R15*0x1]\nMOV EDX,EAX\nADD EDX,-0x30\nINC R15\nCMP EDX,0xa\nJC 0x00403280\nINC R15\nCMP AL,0x7e\nJZ 0x004032ac\nJMP 0x004032c2\nMOV R15D,0x1\nCMP AL,0x7e\nJNZ 0x004032c2\nMOV RAX,qword ptr [RSP + 0x8]\nLEA R14,[R14 + RAX*0x1 + 0x15]\nCMP byte ptr [R14 + R15*0x1 + 0x1],0x0\nJZ 0x0040312f\nMOV R15,RBP\nMOV RBX,qword ptr [RSP + 0x8]\nNOP word ptr [RAX + RAX*0x1]\nMOV RDI,R12\nCALL 0x004018e0\nMOV R14,RAX\nTEST R14,R14\nJNZ 0x00403200\nMOV RDI,R12\nCALL 0x00401830\nMOV RAX,qword ptr [RSP + 0x40]\nMOV qword ptr [RAX],R15\nMOV RAX,qword ptr [RSP + 0x10]\nADD RSP,0x58\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p620
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 58\n48 89 54 24 18\n48 89 74 24 28\n49 89 fe\n4d 8b 3e\n4c 89 ff\ne8 9a 0c 00 00\n49 89 c5\n4c 89 ef\ne8 ef 0c 00 00\n48 89 c5\n41 0f b7 5d 00\n66 41 c7 45 00 2e 00\n4c 89 ff\ne8 38 0b 00 00\n49 89 c4\n66 41 89 5d 00\n48 89 eb\n41 c6 44 1d 04 00\n41 c7 44 1d 00 2e 7e 31 7e\n4d 85 e4\n74 5f\n4c 89 74 24 40\n4c 89 e7\ne8 1c e8 ff ff\n49 89 c6\n4d 85 f6\n74 54\n4d 29 fd\n48 8d 43 04\n48 89 44 24 50\n48 8d 43 02\n48 89 44 24 48\n48 8b 44 24 18\n48 8d 40 03\n48 89 44 24 30\n48 8d 43 17\n48 89 44 24 38\nb8 02 00 00 00\n48 89 44 24 10\nb8 01 00 00 00\n48 89 44 24 20\n48 89 5c 24 08\ne9 ea 00 00 00\nb8 02 00 00 00\ne9 d9 01 00 00\nb8 02 00 00 00\n48 89 44 24 10\ne9 b5 01 00 00\n4c 39 7c 24 20\n73 21\n0f b6 f3\n4a 8d 0c 3e\n48 8b 44 24 30\n48 89 4c 24 20\n48 8d 04 08\n48 39 44 24 28\n76 2a\n48 89 e8\neb 46\n0f 85 65 01 00 00\n48 8b 44 24 18\n48 8d 7c 05 02\n4c 89 f6\n4c 89 fa\ne8 ce e6 ff ff\n85 c0\n0f 8f 48 01 00 00\neb ba\n48 89 f3\nbe 02 00 00 00\n48 89 ef\n48 89 c5\n48 89 ea\ne8 0e 3e 00 00\n48 89 de\n48 01 ed\n48 89 6c 24 28\n48 8b 54 24 18\n48 8d 0c 10\n66 c7 04 10 2e 7e\n48 89 c3\nc6 44 10 02 30\n48 89 74 24 10\n48 8d 6c 0e 02\n49 8d 57 02\n48 89 ef\n4c 89 f6\ne8 e3 e6 ff ff\n49 8d 44 2f ff\n41 8a 4c 2f ff\n80 f9 39\n75 13\n0f 1f 40 00\nc6 00 30\n0f b6 48 ff\n48 ff c8\n80 f9 39\n74 f1\nfe c1\n88 08\n49 89 df\ne9 ca 00 00 00\n49 83 3e 00\n0f 84 c6 00 00 00\n49 8d 6e 13\n48 89 ef\ne8 5a e5 ff ff\n48 3b 44 24 50\n0f 82 af 00 00 00\n4b 8d 3c 2f\n48 89 ee\n48 8b 54 24 48\ne8 0e e6 ff ff\n85 c0\n0f 85 96 00 00 00\n41 8a 44 1e 15\n89 c1\n80 c1 cf\n80 f9 08\n0f 87 83 00 00 00\n49 8d 4c 1e 13\n3c 39\n0f 94 c3\n0f be 41 03\n89 c1\n83 c1 d0\n4c 89 fd\n83 f9 09\n77 3a\n48 8b 4c 24 38\n49 8d 0c 0e\n45 31 ff\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n3c 39\n0f 94 c0\n20 c3\n42 0f be 04 39\n89 c2\n83 c2 d0\n49 ff c7\n83 fa 0a\n72 e7\n49 ff c7\n3c 7e\n74 0c\neb 20\n41 bf 01 00 00 00\n3c 7e\n75 16\n48 8b 44 24 08\n4d 8d 74 06 15\n43 80 7c 3e 01 00\n0f 84 6d fe ff ff\n49 89 ef\n48 8b 5c 24 08\n66 0f 1f 44 00 00\n4c 89 e7\ne8 08 e6 ff ff\n49 89 c6\n4d 85 f6\n0f 85 1c ff ff ff\n4c 89 e7\ne8 44 e5 ff ff\n48 8b 44 24 40\n4c 89 38\n48 8b 44 24 10\n48 83 c4 58\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p621
S'.text:0000000000403050\n.text:0000000000403051\n.text:0000000000403053\n.text:0000000000403055\n.text:0000000000403057\n.text:0000000000403059\n.text:000000000040305a\n.text:000000000040305e\n.text:0000000000403063\n.text:0000000000403068\n.text:000000000040306b\n.text:000000000040306e\n.text:0000000000403071\n.text:0000000000403076\n.text:0000000000403079\n.text:000000000040307c\n.text:0000000000403081\n.text:0000000000403084\n.text:0000000000403089\n.text:0000000000403090\n.text:0000000000403093\n.text:0000000000403098\n.text:000000000040309b\n.text:00000000004030a0\n.text:00000000004030a3\n.text:00000000004030a9\n.text:00000000004030b2\n.text:00000000004030b5\n.text:00000000004030b7\n.text:00000000004030bc\n.text:00000000004030bf\n.text:00000000004030c4\n.text:00000000004030c7\n.text:00000000004030ca\n.text:00000000004030cc\n.text:00000000004030cf\n.text:00000000004030d3\n.text:00000000004030d8\n.text:00000000004030dc\n.text:00000000004030e1\n.text:00000000004030e6\n.text:00000000004030ea\n.text:00000000004030ef\n.text:00000000004030f3\n.text:00000000004030f8\n.text:00000000004030fd\n.text:0000000000403102\n.text:0000000000403107\n.text:000000000040310c\n.text:0000000000403111\n.text:0000000000403116\n.text:000000000040311b\n.text:0000000000403120\n.text:0000000000403125\n.text:000000000040312a\n.text:000000000040312f\n.text:0000000000403134\n.text:0000000000403136\n.text:0000000000403139\n.text:000000000040313d\n.text:0000000000403142\n.text:0000000000403147\n.text:000000000040314b\n.text:0000000000403150\n.text:0000000000403152\n.text:0000000000403155\n.text:0000000000403157\n.text:000000000040315d\n.text:0000000000403162\n.text:0000000000403167\n.text:000000000040316a\n.text:000000000040316d\n.text:0000000000403172\n.text:0000000000403174\n.text:000000000040317a\n.text:000000000040317c\n.text:000000000040317f\n.text:0000000000403184\n.text:0000000000403187\n.text:000000000040318a\n.text:000000000040318d\n.text:0000000000403192\n.text:0000000000403195\n.text:0000000000403198\n.text:000000000040319d\n.text:00000000004031a2\n.text:00000000004031a6\n.text:00000000004031ac\n.text:00000000004031af\n.text:00000000004031b4\n.text:00000000004031b9\n.text:00000000004031be\n.text:00000000004031c2\n.text:00000000004031c5\n.text:00000000004031c8\n.text:00000000004031cd\n.text:00000000004031d2\n.text:00000000004031d7\n.text:00000000004031da\n.text:00000000004031dc\n.text:00000000004031e0\n.text:00000000004031e3\n.text:00000000004031e7\n.text:00000000004031ea\n.text:00000000004031ed\n.text:00000000004031ef\n.text:00000000004031f1\n.text:00000000004031f3\n.text:00000000004031f6\n.text:0000000000403200\n.text:0000000000403204\n.text:000000000040320a\n.text:000000000040320e\n.text:0000000000403211\n.text:0000000000403216\n.text:000000000040321b\n.text:0000000000403221\n.text:0000000000403225\n.text:0000000000403228\n.text:000000000040322d\n.text:0000000000403232\n.text:0000000000403234\n.text:000000000040323a\n.text:000000000040323f\n.text:0000000000403241\n.text:0000000000403244\n.text:0000000000403247\n.text:000000000040324d\n.text:0000000000403252\n.text:0000000000403254\n.text:0000000000403257\n.text:000000000040325b\n.text:000000000040325d\n.text:0000000000403260\n.text:0000000000403263\n.text:0000000000403266\n.text:0000000000403268\n.text:000000000040326d\n.text:0000000000403271\n.text:0000000000403274\n.text:0000000000403280\n.text:0000000000403282\n.text:0000000000403285\n.text:0000000000403287\n.text:000000000040328c\n.text:000000000040328e\n.text:0000000000403291\n.text:0000000000403294\n.text:0000000000403297\n.text:0000000000403299\n.text:000000000040329c\n.text:000000000040329e\n.text:00000000004032a0\n.text:00000000004032a2\n.text:00000000004032a8\n.text:00000000004032aa\n.text:00000000004032ac\n.text:00000000004032b1\n.text:00000000004032b6\n.text:00000000004032bc\n.text:00000000004032c2\n.text:00000000004032c5\n.text:00000000004032ca\n.text:00000000004032d0\n.text:00000000004032d3\n.text:00000000004032d8\n.text:00000000004032db\n.text:00000000004032de\n.text:00000000004032e4\n.text:00000000004032e7\n.text:00000000004032ec\n.text:00000000004032f1\n.text:00000000004032f4\n.text:00000000004032f9\n.text:00000000004032fd\n.text:00000000004032fe\n.text:0000000000403300\n.text:0000000000403302\n.text:0000000000403304\n.text:0000000000403306\n.text:0000000000403307\n'
p622
tp623
sS'freadahead'
p624
(S'\n__stdcall freadahead(FILE * fp)\n'
p625
V\u000asize_t freadahead(FILE *fp)\u000a\u000a{\u000a  if (fp->_IO_write_base <= fp->_IO_write_ptr && fp->_IO_write_ptr != fp->_IO_write_base) {\u000a    return 0;\u000a  }\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return (size_t)(fp->_IO_read_end + -(long)fp->_IO_read_ptr);\u000a  }\u000a  return (size_t)(fp->_IO_read_end + -(long)fp->_IO_read_ptr +\u000a                 (long)(fp->_IO_save_end + -(long)fp->_IO_save_base));\u000a}\u000a\u000a
p626
S'MOV RAX,qword ptr [RDI + 0x28]\nCMP RAX,qword ptr [RDI + 0x20]\nJBE 0x0040744d\nXOR EAX,EAX\nRET\nMOV RAX,qword ptr [RDI + 0x10]\nSUB RAX,qword ptr [RDI + 0x8]\nTEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00407461\nXOR ECX,ECX\nADD RAX,RCX\nRET\nMOV RCX,qword ptr [RDI + 0x58]\nSUB RCX,qword ptr [RDI + 0x48]\nADD RAX,RCX\nRET\n'
p627
S'48 8b 47 28\n48 3b 47 20\n76 03\n31 c0\nc3\n48 8b 47 10\n48 2b 47 08\nf6 47 01 01\n75 06\n31 c9\n48 01 c8\nc3\n48 8b 4f 58\n48 2b 4f 48\n48 01 c8\nc3\n'
p628
S'.text:0000000000407440\n.text:0000000000407444\n.text:0000000000407448\n.text:000000000040744a\n.text:000000000040744c\n.text:000000000040744d\n.text:0000000000407451\n.text:0000000000407455\n.text:0000000000407459\n.text:000000000040745b\n.text:000000000040745d\n.text:0000000000407460\n.text:0000000000407461\n.text:0000000000407465\n.text:0000000000407469\n.text:000000000040746c\n'
p629
tp630
sS'hash_rehash'
p631
(S'\n__stdcall hash_rehash(Hash_table * table, size_t candidate)\n'
p632
V\u000a_Bool hash_rehash(Hash_table *table,size_t candidate)\u000a\u000a{\u000a  _Bool _Var1;\u000a  hash_entry *local_68;\u000a  hash_entry *local_60;\u000a  size_t local_58;\u000a  undefined4 local_50;\u000a  undefined4 uStack76;\u000a  undefined4 uStack72;\u000a  undefined4 uStack68;\u000a  Hash_tuning *local_40;\u000a  size_t (*local_38)(void *,size_t);\u000a  _Bool (*local_30)(void *,void *);\u000a  void (*local_28)(void *);\u000a  hash_entry *local_20;\u000a  \u000a  local_58 = compute_bucket_size(candidate,table->tuning);\u000a  if (local_58 != 0) {\u000a    if (local_58 == table->n_buckets) {\u000a      return true;\u000a    }\u000a    local_68 = (hash_entry *)rpl_calloc(local_58,0x10);\u000a    if (local_68 != (hash_entry *)0x0) {\u000a      local_60 = local_68 + local_58;\u000a      local_50 = 0;\u000a      uStack76 = 0;\u000a      uStack72 = 0;\u000a      uStack68 = 0;\u000a      local_40 = table->tuning;\u000a      local_38 = table->hasher;\u000a      local_30 = table->comparator;\u000a      local_28 = table->data_freer;\u000a      local_20 = table->free_entry_list;\u000a      _Var1 = transfer_entries((Hash_table *)&local_68,table);\u000a      if (_Var1 != false) {\u000a        free(table->bucket);\u000a        table->bucket = local_68;\u000a        table->bucket_limit = local_60;\u000a        table->n_buckets = local_58;\u000a        table->n_buckets_used = CONCAT44(uStack76,local_50);\u000a        table->free_entry_list = local_20;\u000a        return true;\u000a      }\u000a      table->free_entry_list = local_20;\u000a      _Var1 = transfer_entries(table,(Hash_table *)&local_68);\u000a      if ((_Var1 == false) ||\u000a         (_Var1 = transfer_entries(table,(Hash_table *)&local_68), _Var1 == false)) {\u000a                    /* WARNING: Subroutine does not return */\u000a        abort();\u000a      }\u000a      free(local_68);\u000a    }\u000a  }\u000a  return false;\u000a}\u000a\u000a
p633
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x50\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x28]\nMOV RDI,RSI\nMOV RSI,RAX\nCALL 0x00404590\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x004048c1\nMOV R14B,0x1\nCMP RBP,qword ptr [RBX + 0x10]\nJZ 0x004048c4\nMOV ESI,0x10\nMOV RDI,RBP\nCALL 0x004071e0\nMOV qword ptr [RSP],RAX\nTEST RAX,RAX\nJZ 0x004048c1\nMOV qword ptr [RSP + 0x10],RBP\nSHL RBP,0x4\nADD RBP,qword ptr [RSP]\nMOV qword ptr [RSP + 0x8],RBP\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RSP + 0x18],XMM0\nMOV RAX,qword ptr [RBX + 0x28]\nMOV qword ptr [RSP + 0x28],RAX\nMOV RAX,qword ptr [RBX + 0x30]\nMOV qword ptr [RSP + 0x30],RAX\nMOV RAX,qword ptr [RBX + 0x38]\nMOV qword ptr [RSP + 0x38],RAX\nMOV RAX,qword ptr [RBX + 0x40]\nMOV qword ptr [RSP + 0x40],RAX\nMOV RAX,qword ptr [RBX + 0x48]\nMOV qword ptr [RSP + 0x48],RAX\nMOV RDI,RSP\nXOR EDX,EDX\nMOV RSI,RBX\nCALL 0x004048e0\nTEST AL,AL\nJZ 0x0040488a\nMOV RDI,qword ptr [RBX]\nCALL 0x00401640\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX],RAX\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [RBX + 0x8],RAX\nMOV RAX,qword ptr [RSP + 0x10]\nMOV qword ptr [RBX + 0x10],RAX\nMOV RAX,qword ptr [RSP + 0x18]\nMOV qword ptr [RBX + 0x18],RAX\nMOV RAX,qword ptr [RSP + 0x48]\nMOV qword ptr [RBX + 0x48],RAX\nJMP 0x004048c4\nMOV RAX,qword ptr [RSP + 0x48]\nMOV qword ptr [RBX + 0x48],RAX\nMOV RSI,RSP\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x004048e0\nTEST AL,AL\nJZ 0x004048d0\nMOV RSI,RSP\nXOR EDX,EDX\nMOV RDI,RBX\nCALL 0x004048e0\nTEST AL,AL\nJZ 0x004048d0\nMOV RDI,qword ptr [RSP]\nCALL 0x00401640\nXOR R14D,R14D\nMOV EAX,R14D\nADD RSP,0x50\nPOP RBX\nPOP R14\nPOP RBP\nRET\nCALL 0x00401660\n'
p634
S'55\n41 56\n53\n48 83 ec 50\n48 89 fb\n48 8b 43 28\n48 89 f7\n48 89 c6\ne8 c6 fd ff ff\n48 89 c5\n48 85 ed\n0f 84 eb 00 00 00\n41 b6 01\n48 3b 6b 10\n0f 84 e1 00 00 00\nbe 10 00 00 00\n48 89 ef\ne8 f0 29 00 00\n48 89 04 24\n48 85 c0\n0f 84 c4 00 00 00\n48 89 6c 24 10\n48 c1 e5 04\n48 03 2c 24\n48 89 6c 24 08\n0f 57 c0\n0f 11 44 24 18\n48 8b 43 28\n48 89 44 24 28\n48 8b 43 30\n48 89 44 24 30\n48 8b 43 38\n48 89 44 24 38\n48 8b 43 40\n48 89 44 24 40\n48 8b 43 48\n48 89 44 24 48\n48 89 e7\n31 d2\n48 89 de\ne8 8f 00 00 00\n84 c0\n74 35\n48 8b 3b\ne8 e3 cd ff ff\n48 8b 04 24\n48 89 03\n48 8b 44 24 08\n48 89 43 08\n48 8b 44 24 10\n48 89 43 10\n48 8b 44 24 18\n48 89 43 18\n48 8b 44 24 48\n48 89 43 48\neb 3a\n48 8b 44 24 48\n48 89 43 48\n48 89 e6\nba 01 00 00 00\n48 89 df\ne8 3d 00 00 00\n84 c0\n74 29\n48 89 e6\n31 d2\n48 89 df\ne8 2c 00 00 00\n84 c0\n74 18\n48 8b 3c 24\ne8 7f cd ff ff\n45 31 f6\n44 89 f0\n48 83 c4 50\n5b\n41 5e\n5d\nc3\ne8 8b cd ff ff\n'
p635
S'.text:00000000004047b0\n.text:00000000004047b1\n.text:00000000004047b3\n.text:00000000004047b4\n.text:00000000004047b8\n.text:00000000004047bb\n.text:00000000004047bf\n.text:00000000004047c2\n.text:00000000004047c5\n.text:00000000004047ca\n.text:00000000004047cd\n.text:00000000004047d0\n.text:00000000004047d6\n.text:00000000004047d9\n.text:00000000004047dd\n.text:00000000004047e3\n.text:00000000004047e8\n.text:00000000004047eb\n.text:00000000004047f0\n.text:00000000004047f4\n.text:00000000004047f7\n.text:00000000004047fd\n.text:0000000000404802\n.text:0000000000404806\n.text:000000000040480a\n.text:000000000040480f\n.text:0000000000404812\n.text:0000000000404817\n.text:000000000040481b\n.text:0000000000404820\n.text:0000000000404824\n.text:0000000000404829\n.text:000000000040482d\n.text:0000000000404832\n.text:0000000000404836\n.text:000000000040483b\n.text:000000000040483f\n.text:0000000000404844\n.text:0000000000404847\n.text:0000000000404849\n.text:000000000040484c\n.text:0000000000404851\n.text:0000000000404853\n.text:0000000000404855\n.text:0000000000404858\n.text:000000000040485d\n.text:0000000000404861\n.text:0000000000404864\n.text:0000000000404869\n.text:000000000040486d\n.text:0000000000404872\n.text:0000000000404876\n.text:000000000040487b\n.text:000000000040487f\n.text:0000000000404884\n.text:0000000000404888\n.text:000000000040488a\n.text:000000000040488f\n.text:0000000000404893\n.text:0000000000404896\n.text:000000000040489b\n.text:000000000040489e\n.text:00000000004048a3\n.text:00000000004048a5\n.text:00000000004048a7\n.text:00000000004048aa\n.text:00000000004048ac\n.text:00000000004048af\n.text:00000000004048b4\n.text:00000000004048b6\n.text:00000000004048b8\n.text:00000000004048bc\n.text:00000000004048c1\n.text:00000000004048c4\n.text:00000000004048c7\n.text:00000000004048cb\n.text:00000000004048cc\n.text:00000000004048ce\n.text:00000000004048cf\n.text:00000000004048d0\n'
p636
tp637
sS'lseek'
p638
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p639
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_0060d0e8)();\u000a  return _Var1;\u000a}\u000a\u000a
p640
S'JMP qword ptr [0x0060d0e8]\n'
p641
S'ff 25 12 b9 20 00\n'
p642
S'.plt:00000000004017d0\n'
p643
tp644
sS'opendir_safer'
p645
(S'\n__stdcall opendir_safer(char * name)\n'
p646
V\u000aDIR * opendir_safer(char *name)\u000a\u000a{\u000a  uint uVar1;\u000a  int __fd;\u000a  DIR *__dirp;\u000a  DIR *pDVar2;\u000a  int *piVar3;\u000a  int iVar4;\u000a  \u000a  __dirp = opendir(name);\u000a  if (__dirp == (DIR *)0x0) {\u000a    return (DIR *)0x0;\u000a  }\u000a  uVar1 = dirfd(__dirp);\u000a  if (2 < uVar1) {\u000a    return (DIR *)__dirp;\u000a  }\u000a  __fd = dup_safer();\u000a  if (__fd < 0) {\u000a    piVar3 = __errno_location();\u000a    iVar4 = *piVar3;\u000a  }\u000a  else {\u000a    pDVar2 = fdopendir(__fd);\u000a    piVar3 = __errno_location();\u000a    iVar4 = *piVar3;\u000a    if (pDVar2 != (DIR *)0x0) goto LAB_00403c2d;\u000a    close(__fd);\u000a  }\u000a  pDVar2 = (DIR *)0x0;\u000aLAB_00403c2d:\u000a  closedir(__dirp);\u000a  piVar3 = __errno_location();\u000a  *piVar3 = iVar4;\u000a  return (DIR *)pDVar2;\u000a}\u000a\u000a
p647
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nCALL 0x00401730\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00403c1e\nMOV RDI,RBX\nCALL 0x00401890\nCMP EAX,0x2\nJA 0x00403c40\nMOV EDI,EAX\nCALL 0x00406a50\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00403c22\nMOV EDI,EBP\nCALL 0x00401a00\nMOV R14,RAX\nCALL 0x00401670\nMOV R15D,dword ptr [RAX]\nTEST R14,R14\nJNZ 0x00403c2d\nMOV EDI,EBP\nCALL 0x00401810\nJMP 0x00403c2a\nXOR EBX,EBX\nJMP 0x00403c40\nCALL 0x00401670\nMOV R15D,dword ptr [RAX]\nXOR R14D,R14D\nMOV RDI,RBX\nCALL 0x00401830\nCALL 0x00401670\nMOV dword ptr [RAX],R15D\nMOV RBX,R14\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p648
S'55\n41 57\n41 56\n53\n50\ne8 54 db ff ff\n48 89 c3\n48 85 db\n74 3a\n48 89 df\ne8 a4 dc ff ff\n83 f8 02\n77 4f\n89 c7\ne8 58 2e 00 00\n89 c5\n85 ed\n78 24\n89 ef\ne8 fb dd ff ff\n49 89 c6\ne8 63 da ff ff\n44 8b 38\n4d 85 f6\n75 18\n89 ef\ne8 f4 db ff ff\neb 0c\n31 db\neb 1e\ne8 49 da ff ff\n44 8b 38\n45 31 f6\n48 89 df\ne8 fb db ff ff\ne8 36 da ff ff\n44 89 38\n4c 89 f3\n48 89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p649
S'.text:0000000000403bd0\n.text:0000000000403bd1\n.text:0000000000403bd3\n.text:0000000000403bd5\n.text:0000000000403bd6\n.text:0000000000403bd7\n.text:0000000000403bdc\n.text:0000000000403bdf\n.text:0000000000403be2\n.text:0000000000403be4\n.text:0000000000403be7\n.text:0000000000403bec\n.text:0000000000403bef\n.text:0000000000403bf1\n.text:0000000000403bf3\n.text:0000000000403bf8\n.text:0000000000403bfa\n.text:0000000000403bfc\n.text:0000000000403bfe\n.text:0000000000403c00\n.text:0000000000403c05\n.text:0000000000403c08\n.text:0000000000403c0d\n.text:0000000000403c10\n.text:0000000000403c13\n.text:0000000000403c15\n.text:0000000000403c17\n.text:0000000000403c1c\n.text:0000000000403c1e\n.text:0000000000403c20\n.text:0000000000403c22\n.text:0000000000403c27\n.text:0000000000403c2a\n.text:0000000000403c2d\n.text:0000000000403c30\n.text:0000000000403c35\n.text:0000000000403c3a\n.text:0000000000403c3d\n.text:0000000000403c40\n.text:0000000000403c43\n.text:0000000000403c47\n.text:0000000000403c48\n.text:0000000000403c4a\n.text:0000000000403c4c\n.text:0000000000403c4d\n'
p650
tp651
sS'hash_get_first'
p652
(S'\n__stdcall hash_get_first(Hash_table * table)\n'
p653
V\u000avoid * hash_get_first(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  \u000a  if (table->n_entries == 0) {\u000a    return (void *)0x0;\u000a  }\u000a  phVar1 = table->bucket;\u000a  if (phVar1 < table->bucket_limit) {\u000a    do {\u000a      if (phVar1->data != (void *)0x0) {\u000a        return phVar1->data;\u000a      }\u000a      phVar1 = phVar1 + 1;\u000a    } while (phVar1 < table->bucket_limit);\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p654
S'CMP qword ptr [RDI + 0x20],0x0\nJZ 0x00404253\nMOV RCX,qword ptr [RDI]\nCMP RCX,qword ptr [RDI + 0x8]\nJC 0x0040424a\nJMP 0x00404256\nADD RCX,0x10\nCMP RCX,qword ptr [RDI + 0x8]\nJNC 0x00404256\nMOV RAX,qword ptr [RCX]\nTEST RAX,RAX\nJZ 0x00404240\nRET\nXOR EAX,EAX\nRET\nPUSH RAX\nCALL 0x00401660\n'
p655
S'48 83 7f 20 00\n74 2c\n48 8b 0f\n48 3b 4f 08\n72 1a\neb 24\n48 83 c1 10\n48 3b 4f 08\n73 0c\n48 8b 01\n48 85 c0\n74 ee\nc3\n31 c0\nc3\n50\ne8 04 d4 ff ff\n'
p656
S'.text:0000000000404220\n.text:0000000000404225\n.text:0000000000404227\n.text:000000000040422a\n.text:000000000040422e\n.text:0000000000404230\n.text:0000000000404240\n.text:0000000000404244\n.text:0000000000404248\n.text:000000000040424a\n.text:000000000040424d\n.text:0000000000404250\n.text:0000000000404252\n.text:0000000000404253\n.text:0000000000404255\n.text:0000000000404256\n.text:0000000000404257\n'
p657
tp658
sS'readlink'
p659
(S'\n__stdcall readlink(char * __path, char * __buf, size_t __len)\n'
p660
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000assize_t readlink(char *__path,char *__buf,size_t __len)\u000a\u000a{\u000a  ssize_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_readlink_0060d070)();\u000a  return sVar1;\u000a}\u000a\u000a
p661
S'JMP qword ptr [0x0060d070]\n'
p662
S'ff 25 8a b9 20 00\n'
p663
S'.plt:00000000004016e0\n'
p664
tp665
sS'hash_get_n_entries'
p666
(S'\n__stdcall hash_get_n_entries(Hash_table * table)\n'
p667
V\u000asize_t hash_get_n_entries(Hash_table *table)\u000a\u000a{\u000a  return table->n_entries;\u000a}\u000a\u000a
p668
S'MOV RAX,qword ptr [RDI + 0x20]\nRET\n'
p669
S'48 8b 47 20\nc3\n'
p670
S'.text:0000000000403ff0\n.text:0000000000403ff4\n'
p671
tp672
sS'quotearg_n_mem'
p673
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p674
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p675
S'MOV ECX,0x60d370\nJMP 0x00406040\n'
p676
S'b9 70 d3 60 00\ne9 36 fe ff ff\n'
p677
S'.text:0000000000406200\n.text:0000000000406205\n'
p678
tp679
sS'__printf_chk'
p680
(S'\n__stdcall __printf_chk()\n'
p681
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_0060d1d0)();\u000a  return;\u000a}\u000a\u000a
p682
S'JMP qword ptr [0x0060d1d0]\n'
p683
S'ff 25 2a b8 20 00\n'
p684
S'.plt:00000000004019a0\n'
p685
tp686
sS'hash_lookup'
p687
(S'\n__stdcall hash_lookup(Hash_table * table, void * entry)\n'
p688
V\u000avoid * hash_lookup(Hash_table *table,void *entry)\u000a\u000a{\u000a  _Bool _Var1;\u000a  hash_entry *phVar2;\u000a  \u000a  phVar2 = safe_hasher(table,entry);\u000a  if (phVar2->data != (void *)0x0) {\u000a    while (phVar2 != (hash_entry *)0x0) {\u000a      if ((phVar2->data == entry) ||\u000a         (_Var1 = (*table->comparator)(entry,phVar2->data), _Var1 != false)) {\u000a        return phVar2->data;\u000a      }\u000a      phVar2 = phVar2->next;\u000a    }\u000a  }\u000a  return (void *)0x0;\u000a}\u000a\u000a
p689
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,RSI\nMOV R15,RDI\nCALL 0x004041f0\nMOV RBX,RAX\nXOR R14D,R14D\nCMP qword ptr [RBX],0x0\nJZ 0x004041e1\nTEST RBX,RBX\nJZ 0x004041e1\nXOR R14D,R14D\nNOP word ptr [RAX + RAX*0x1]\nMOV RSI,qword ptr [RBX]\nCMP RSI,R12\nJZ 0x004041de\nMOV RDI,R12\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJNZ 0x004041de\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x004041c0\nJMP 0x004041e1\nMOV R14,qword ptr [RBX]\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p690
S'41 57\n41 56\n41 54\n53\n50\n49 89 f4\n49 89 ff\ne8 4d 00 00 00\n48 89 c3\n45 31 f6\n48 83 3b 00\n74 32\n48 85 db\n74 2d\n45 31 f6\n66 0f 1f 84 00 00 00 00 00\n48 8b 33\n4c 39 e6\n74 16\n4c 89 e7\n41 ff 57 38\n84 c0\n75 0b\n48 8b 5b 08\n48 85 db\n75 e4\neb 03\n4c 8b 33\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p691
S'.text:0000000000404190\n.text:0000000000404192\n.text:0000000000404194\n.text:0000000000404196\n.text:0000000000404197\n.text:0000000000404198\n.text:000000000040419b\n.text:000000000040419e\n.text:00000000004041a3\n.text:00000000004041a6\n.text:00000000004041a9\n.text:00000000004041ad\n.text:00000000004041af\n.text:00000000004041b2\n.text:00000000004041b4\n.text:00000000004041b7\n.text:00000000004041c0\n.text:00000000004041c3\n.text:00000000004041c6\n.text:00000000004041c8\n.text:00000000004041cb\n.text:00000000004041cf\n.text:00000000004041d1\n.text:00000000004041d3\n.text:00000000004041d7\n.text:00000000004041da\n.text:00000000004041dc\n.text:00000000004041de\n.text:00000000004041e1\n.text:00000000004041e4\n.text:00000000004041e8\n.text:00000000004041e9\n.text:00000000004041eb\n.text:00000000004041ed\n.text:00000000004041ef\n'
p692
tp693
sS'buffer_or_output'
p694
(S'\n__stdcall buffer_or_output(char * str, char * * pbuf, size_t * plen)\n'
p695
V\u000a_Bool buffer_or_output(char *str,char **pbuf,size_t *plen)\u000a\u000a{\u000a  char *__dest;\u000a  size_t sVar1;\u000a  \u000a  __dest = *pbuf;\u000a  if (__dest == (char *)0x0) {\u000a    fputs_unlocked(str,stdout);\u000a  }\u000a  else {\u000a    sVar1 = strlen(str);\u000a    if (*plen <= sVar1) {\u000a      return true;\u000a    }\u000a    memcpy(__dest,str,sVar1 + 1);\u000a    *pbuf = *pbuf + sVar1;\u000a    *plen = *plen - sVar1;\u000a  }\u000a  return false;\u000a}\u000a\u000a
p696
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R14,RDX\nMOV R15,RSI\nMOV R12,RDI\nMOV R13,qword ptr [R15]\nTEST R13,R13\nJZ 0x00402f75\nMOV RDI,R12\nCALL 0x00401770\nMOV RBX,RAX\nMOV AL,0x1\nCMP RBX,qword ptr [R14]\nJNC 0x00402f86\nMOV RDX,RBX\nINC RDX\nMOV RDI,R13\nMOV RSI,R12\nCALL 0x004018b0\nADD qword ptr [R15],RBX\nSUB qword ptr [R14],RBX\nJMP 0x00402f84\nMOV RSI,qword ptr [0x0060d2e8]\nMOV RDI,R12\nCALL 0x00401850\nXOR EAX,EAX\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p697
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 d6\n49 89 f7\n49 89 fc\n4d 8b 2f\n4d 85 ed\n74 2b\n4c 89 e7\ne8 1e e8 ff ff\n48 89 c3\nb0 01\n49 3b 1e\n73 2a\n48 89 da\n48 ff c2\n4c 89 ef\n4c 89 e6\ne8 43 e9 ff ff\n49 01 1f\n49 29 1e\neb 0f\n48 8b 35 6c a3 20 00\n4c 89 e7\ne8 cc e8 ff ff\n31 c0\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p698
S'.text:0000000000402f30\n.text:0000000000402f32\n.text:0000000000402f34\n.text:0000000000402f36\n.text:0000000000402f38\n.text:0000000000402f39\n.text:0000000000402f3c\n.text:0000000000402f3f\n.text:0000000000402f42\n.text:0000000000402f45\n.text:0000000000402f48\n.text:0000000000402f4a\n.text:0000000000402f4d\n.text:0000000000402f52\n.text:0000000000402f55\n.text:0000000000402f57\n.text:0000000000402f5a\n.text:0000000000402f5c\n.text:0000000000402f5f\n.text:0000000000402f62\n.text:0000000000402f65\n.text:0000000000402f68\n.text:0000000000402f6d\n.text:0000000000402f70\n.text:0000000000402f73\n.text:0000000000402f75\n.text:0000000000402f7c\n.text:0000000000402f7f\n.text:0000000000402f84\n.text:0000000000402f86\n.text:0000000000402f87\n.text:0000000000402f89\n.text:0000000000402f8b\n.text:0000000000402f8d\n.text:0000000000402f8f\n'
p699
tp700
sS'base_len'
p701
(S'\n__stdcall base_len(char * name)\n'
p702
V\u000asize_t base_len(char *name)\u000a\u000a{\u000a  long lVar1;\u000a  size_t sVar2;\u000a  size_t sVar3;\u000a  \u000a  sVar2 = strlen(name);\u000a  do {\u000a    sVar3 = sVar2;\u000a    if (sVar2 < 2) {\u000a      return sVar3;\u000a    }\u000a    lVar1 = sVar2 - 1;\u000a    sVar2 = sVar2 - 1;\u000a  } while (name[lVar1] == '/');\u000a  return sVar3;\u000a}\u000a\u000a
p703
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401770\nMOV RCX,RAX\nNOP dword ptr [RAX]\nMOV RAX,RCX\nCMP RAX,0x2\nJC 0x00403d94\nLEA RCX,[RAX + -0x1]\nCMP byte ptr [RBX + RAX*0x1 + -0x1],0x2f\nJZ 0x00403d80\nPOP RBX\nRET\n'
p704
S'53\n48 89 fb\ne8 f7 d9 ff ff\n48 89 c1\n0f 1f 40 00\n48 89 c8\n48 83 f8 02\n72 0b\n48 8d 48 ff\n80 7c 03 ff 2f\n74 ec\n5b\nc3\n'
p705
S'.text:0000000000403d70\n.text:0000000000403d71\n.text:0000000000403d74\n.text:0000000000403d79\n.text:0000000000403d7c\n.text:0000000000403d80\n.text:0000000000403d83\n.text:0000000000403d87\n.text:0000000000403d89\n.text:0000000000403d8d\n.text:0000000000403d92\n.text:0000000000403d94\n.text:0000000000403d95\n'
p706
tp707
sS'getcwd'
p708
(S'\n__stdcall getcwd(char * __buf, size_t __size)\n'
p709
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getcwd(char *__buf,size_t __size)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getcwd_0060d100)();\u000a  return pcVar1;\u000a}\u000a\u000a
p710
S'JMP qword ptr [0x0060d100]\n'
p711
S'ff 25 fa b8 20 00\n'
p712
S'.plt:0000000000401800\n'
p713
tp714
sS'emit_ancillary_info'
p715
(S'\n__stdcall emit_ancillary_info()\n'
p716
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x00408640;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("ln",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "ln";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,&DAT_00409132,uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/",&DAT_00409132);\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x409ee9;\u000a  if (__s2 == "ln") {\u000a    uVar3 = 0x409342;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p717
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x408640\nMOV ESI,0x409326\nNOP\nMOV EDI,0x409132\nCALL 0x00401880\nTEST EAX,EAX\nJZ 0x00401dbb\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401da0\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x409132\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x409385\nMOV EDX,0x5\nCALL 0x00401750\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x4091ca\nMOV ECX,0x40939c\nXOR EAX,EAX\nCALL 0x004019a0\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x00401990\nTEST RAX,RAX\nJZ 0x00401e44\nMOV ESI,0x4093c3\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00401690\nTEST EAX,EAX\nJZ 0x00401e44\nXOR EDI,EDI\nMOV ESI,0x4093c7\nMOV EDX,0x5\nCALL 0x00401750\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x409132\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004019a0\nXOR EDI,EDI\nMOV ESI,0x40940c\nMOV EDX,0x5\nCALL 0x00401750\nMOV RSI,RAX\nMOV R14D,0x409132\nMOV EDI,0x1\nMOV EDX,0x40939c\nMOV ECX,0x409132\nXOR EAX,EAX\nCALL 0x004019a0\nXOR EDI,EDI\nMOV ESI,0x40942b\nMOV EDX,0x5\nCALL 0x00401750\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x409342\nMOV ECX,0x409ee9\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x004019a0\n'
p718
S'41 56\n53\n50\nbb 40 86 40 00\nbe 26 93 40 00\n66 90\nbf 32 91 40 00\ne8 d6 fa ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 32 91 40 00\n48 0f 45 d8\n31 ff\nbe 85 93 40 00\nba 05 00 00 00\ne8 74 f9 ff ff\n48 89 c6\nbf 01 00 00 00\nba ca 91 40 00\nb9 9c 93 40 00\n31 c0\ne8 ab fb ff ff\nbf 05 00 00 00\n31 f6\ne8 8f fb ff ff\n48 85 c0\n74 3e\nbe c3 93 40 00\nba 03 00 00 00\n48 89 c7\ne8 78 f8 ff ff\n85 c0\n74 28\n31 ff\nbe c7 93 40 00\nba 05 00 00 00\ne8 23 f9 ff ff\n48 89 c1\nbf 01 00 00 00\nba 32 91 40 00\n31 c0\n48 89 ce\ne8 5c fb ff ff\n31 ff\nbe 0c 94 40 00\nba 05 00 00 00\ne8 fb f8 ff ff\n48 89 c6\n41 be 32 91 40 00\nbf 01 00 00 00\nba 9c 93 40 00\nb9 32 91 40 00\n31 c0\ne8 2c fb ff ff\n31 ff\nbe 2b 94 40 00\nba 05 00 00 00\ne8 cb f8 ff ff\n48 89 c2\n4c 39 f3\nb8 42 93 40 00\nb9 e9 9e 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 ee fa ff ff\n'
p719
S'.text:0000000000401d90\n.text:0000000000401d92\n.text:0000000000401d93\n.text:0000000000401d94\n.text:0000000000401d99\n.text:0000000000401d9e\n.text:0000000000401da0\n.text:0000000000401da5\n.text:0000000000401daa\n.text:0000000000401dac\n.text:0000000000401dae\n.text:0000000000401db2\n.text:0000000000401db6\n.text:0000000000401db9\n.text:0000000000401dbb\n.text:0000000000401dbf\n.text:0000000000401dc2\n.text:0000000000401dc7\n.text:0000000000401dcb\n.text:0000000000401dcd\n.text:0000000000401dd2\n.text:0000000000401dd7\n.text:0000000000401ddc\n.text:0000000000401ddf\n.text:0000000000401de4\n.text:0000000000401de9\n.text:0000000000401dee\n.text:0000000000401df0\n.text:0000000000401df5\n.text:0000000000401dfa\n.text:0000000000401dfc\n.text:0000000000401e01\n.text:0000000000401e04\n.text:0000000000401e06\n.text:0000000000401e0b\n.text:0000000000401e10\n.text:0000000000401e13\n.text:0000000000401e18\n.text:0000000000401e1a\n.text:0000000000401e1c\n.text:0000000000401e1e\n.text:0000000000401e23\n.text:0000000000401e28\n.text:0000000000401e2d\n.text:0000000000401e30\n.text:0000000000401e35\n.text:0000000000401e3a\n.text:0000000000401e3c\n.text:0000000000401e3f\n.text:0000000000401e44\n.text:0000000000401e46\n.text:0000000000401e4b\n.text:0000000000401e50\n.text:0000000000401e55\n.text:0000000000401e58\n.text:0000000000401e5e\n.text:0000000000401e63\n.text:0000000000401e68\n.text:0000000000401e6d\n.text:0000000000401e6f\n.text:0000000000401e74\n.text:0000000000401e76\n.text:0000000000401e7b\n.text:0000000000401e80\n.text:0000000000401e85\n.text:0000000000401e88\n.text:0000000000401e8b\n.text:0000000000401e90\n.text:0000000000401e95\n.text:0000000000401e99\n.text:0000000000401e9e\n.text:0000000000401ea0\n.text:0000000000401ea3\n.text:0000000000401ea6\n.text:0000000000401eaa\n.text:0000000000401eab\n.text:0000000000401ead\n'
p720
tp721
sS'version_etc_va'
p722
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p723
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p724
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x00406e20\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x00406e2c\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00406e41\nINC R9\nCMP R9,0xa\nJC 0x00406e00\nMOV R8,RSP\nCALL 0x00406a60\nADD RSP,0x58\nRET\n'
p725
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p726
S'.text:0000000000406df0\n.text:0000000000406df4\n.text:0000000000406df7\n.text:0000000000406e00\n.text:0000000000406e03\n.text:0000000000406e07\n.text:0000000000406e09\n.text:0000000000406e0c\n.text:0000000000406e10\n.text:0000000000406e14\n.text:0000000000406e17\n.text:0000000000406e20\n.text:0000000000406e24\n.text:0000000000406e28\n.text:0000000000406e2c\n.text:0000000000406e2f\n.text:0000000000406e33\n.text:0000000000406e36\n.text:0000000000406e38\n.text:0000000000406e3b\n.text:0000000000406e3f\n.text:0000000000406e41\n.text:0000000000406e44\n.text:0000000000406e49\n.text:0000000000406e4d\n'
p727
tp728
sS'hash_print_statistics'
p729
(S'\n__stdcall hash_print_statistics(Hash_table * table, FILE * stream)\n'
p730
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000avoid hash_print_statistics(Hash_table *table,FILE *stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  undefined auVar5 [16];\u000a  undefined auVar6 [16];\u000a  undefined4 uVar7;\u000a  \u000a  sVar1 = hash_get_n_entries(table);\u000a  sVar2 = hash_get_n_buckets(table);\u000a  sVar3 = hash_get_n_buckets_used(table);\u000a  sVar4 = hash_get_max_bucket_length(table);\u000a  __fprintf_chk(stream,1,0x4097a0,sVar1);\u000a  __fprintf_chk(stream,1,"# buckets:         %lu\u005cn",sVar2);\u000a  uVar7 = SUB164(_DAT_00409750 >> 0x20,0);\u000a  auVar5 = subpd(CONCAT88(SUB168(CONCAT412(uVar7,ZEXT812(sVar3) &\u000a                                                 (undefined  [12])0xffffffffffffffff |\u000a                                                 (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                          CONCAT44(SUB164(_DAT_00409750,0),\u000a                                   SUB124(ZEXT812(sVar3) & (undefined  [12])0xffffffffffffffff,0))),\u000a                 CONCAT88(DAT_00409768,DAT_00409760));\u000a  auVar5 = addpd(CONCAT412(SUB164(auVar5 >> 0x20,0),\u000a                           CONCAT48(SUB164(auVar5,0),SUB168(auVar5 >> 0x40,0))),auVar5);\u000a  auVar6 = subpd(CONCAT88(SUB168(CONCAT412(uVar7,ZEXT812(sVar2) &\u000a                                                 (undefined  [12])0xffffffffffffffff |\u000a                                                 (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                          CONCAT44(SUB164(_DAT_00409750,0),\u000a                                   SUB124(ZEXT812(sVar2) & (undefined  [12])0xffffffffffffffff,0))),\u000a                 CONCAT88(DAT_00409768,DAT_00409760));\u000a  auVar6 = addpd(CONCAT412(SUB164(auVar6 >> 0x20,0),\u000a                           CONCAT48(SUB164(auVar6,0),SUB168(auVar6 >> 0x40,0))),auVar6);\u000a  __fprintf_chk(CONCAT88(SUB168(auVar5 >> 0x40,0),\u000a                         (SUB168(auVar5,0) * _DAT_00409780) / SUB168(auVar6,0)),stream,1,\u000a                "# buckets used:    %lu (%.2f%%)\u005cn",sVar3);\u000a  __fprintf_chk(stream,1,"max bucket length: %lu\u005cn",sVar4);\u000a  return;\u000a}\u000a\u000a
p731
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R13,RSI\nMOV RBX,RDI\nCALL 0x00403ff0\nMOV RBP,RAX\nMOV RDI,RBX\nCALL 0x00403fd0\nMOV R12,RAX\nMOV RDI,RBX\nCALL 0x00403fe0\nMOV R15,RAX\nMOV RDI,RBX\nCALL 0x00404000\nMOV R14,RAX\nMOV ESI,0x1\nMOV EDX,0x4097a0\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,RBP\nCALL 0x00401a50\nMOV ESI,0x1\nMOV EDX,0x4097b8\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,R12\nCALL 0x00401a50\nMOVQ XMM1,R15\nMOVDQA XMM2,xmmword ptr [0x00409750]\nPUNPCKLDQ XMM1,XMM2\nMOVAPD XMM3,xmmword ptr [0x00409760]\nSUBPD XMM1,XMM3\nPSHUFD XMM0,XMM1,0x4e\nADDPD XMM0,XMM1\nMULSD XMM0,qword ptr [0x00409780]\nMOVQ XMM1,R12\nPUNPCKLDQ XMM1,XMM2\nSUBPD XMM1,XMM3\nPSHUFD XMM2,XMM1,0x4e\nADDPD XMM2,XMM1\nDIVSD XMM0,XMM2\nMOV ESI,0x1\nMOV EDX,0x4097d0\nMOV AL,0x1\nMOV RDI,R13\nMOV RCX,R15\nCALL 0x00401a50\nMOV ESI,0x1\nMOV EDX,0x4097f1\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00401a50\n'
p732
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f5\n48 89 fb\ne8 3a ff ff ff\n48 89 c5\n48 89 df\ne8 0f ff ff ff\n49 89 c4\n48 89 df\ne8 14 ff ff ff\n49 89 c7\n48 89 df\ne8 29 ff ff ff\n49 89 c6\nbe 01 00 00 00\nba a0 97 40 00\n31 c0\n4c 89 ef\n48 89 e9\ne8 5f d9 ff ff\nbe 01 00 00 00\nba b8 97 40 00\n31 c0\n4c 89 ef\n4c 89 e1\ne8 48 d9 ff ff\n66 49 0f 6e cf\n66 0f 6f 15 3b 56 00 00\n66 0f 62 ca\n66 0f 28 1d 3f 56 00 00\n66 0f 5c cb\n66 0f 70 c1 4e\n66 0f 58 c1\nf2 0f 59 05 4a 56 00 00\n66 49 0f 6e cc\n66 0f 62 ca\n66 0f 5c cb\n66 0f 70 d1 4e\n66 0f 58 d1\nf2 0f 5e c2\nbe 01 00 00 00\nba d0 97 40 00\nb0 01\n4c 89 ef\n4c 89 f9\ne8 e9 d8 ff ff\nbe 01 00 00 00\nba f1 97 40 00\n31 c0\n4c 89 ef\n4c 89 f1\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 c4 d8 ff ff\n'
p733
S'.text:00000000004040a0\n.text:00000000004040a1\n.text:00000000004040a3\n.text:00000000004040a5\n.text:00000000004040a7\n.text:00000000004040a9\n.text:00000000004040aa\n.text:00000000004040ab\n.text:00000000004040ae\n.text:00000000004040b1\n.text:00000000004040b6\n.text:00000000004040b9\n.text:00000000004040bc\n.text:00000000004040c1\n.text:00000000004040c4\n.text:00000000004040c7\n.text:00000000004040cc\n.text:00000000004040cf\n.text:00000000004040d2\n.text:00000000004040d7\n.text:00000000004040da\n.text:00000000004040df\n.text:00000000004040e4\n.text:00000000004040e6\n.text:00000000004040e9\n.text:00000000004040ec\n.text:00000000004040f1\n.text:00000000004040f6\n.text:00000000004040fb\n.text:00000000004040fd\n.text:0000000000404100\n.text:0000000000404103\n.text:0000000000404108\n.text:000000000040410d\n.text:0000000000404115\n.text:0000000000404119\n.text:0000000000404121\n.text:0000000000404125\n.text:000000000040412a\n.text:000000000040412e\n.text:0000000000404136\n.text:000000000040413b\n.text:000000000040413f\n.text:0000000000404143\n.text:0000000000404148\n.text:000000000040414c\n.text:0000000000404150\n.text:0000000000404155\n.text:000000000040415a\n.text:000000000040415c\n.text:000000000040415f\n.text:0000000000404162\n.text:0000000000404167\n.text:000000000040416c\n.text:0000000000404171\n.text:0000000000404173\n.text:0000000000404176\n.text:0000000000404179\n.text:000000000040417d\n.text:000000000040417e\n.text:0000000000404180\n.text:0000000000404182\n.text:0000000000404184\n.text:0000000000404186\n.text:0000000000404187\n'
p734
tp735
sS'xzalloc'
p736
(S'\n__stdcall xzalloc(size_t s)\n'
p737
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p738
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00406f80\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x004017e0\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p739
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 54 a7 ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p740
S'.text:0000000000407070\n.text:0000000000407072\n.text:0000000000407073\n.text:0000000000407074\n.text:0000000000407077\n.text:000000000040707c\n.text:000000000040707f\n.text:0000000000407081\n.text:0000000000407084\n.text:0000000000407087\n.text:000000000040708c\n.text:000000000040708f\n.text:0000000000407093\n.text:0000000000407094\n.text:0000000000407096\n'
p741
tp742
sS'next_prime'
p743
(S'\n__stdcall next_prime(size_t candidate)\n'
p744
V\u000asize_t next_prime(size_t candidate)\u000a\u000a{\u000a  _Bool _Var1;\u000a  size_t candidate_00;\u000a  size_t sVar2;\u000a  \u000a  candidate_00 = 10;\u000a  if (10 < candidate) {\u000a    candidate_00 = candidate;\u000a  }\u000a  candidate_00 = candidate_00 | 1;\u000a  while ((sVar2 = 0xffffffffffffffff, candidate_00 != 0xffffffffffffffff &&\u000a         (_Var1 = is_prime(candidate_00), sVar2 = candidate_00, _Var1 == false))) {\u000a    candidate_00 = candidate_00 + 2;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p745
S'PUSH R14\nPUSH RBX\nPUSH RAX\nCMP RDI,0xa\nMOV EBX,0xa\nCMOVA RBX,RDI\nOR RBX,0x1\nMOV R14,-0x1\nCMP RBX,-0x1\nJNZ 0x00404eca\nJMP 0x00404ed9\nADD RBX,0x2\nCMP RBX,-0x1\nJZ 0x00404ed9\nMOV RDI,RBX\nCALL 0x00404ef0\nTEST AL,AL\nJZ 0x00404ec0\nMOV R14,RBX\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p746
S'41 56\n53\n50\n48 83 ff 0a\nbb 0a 00 00 00\n48 0f 47 df\n48 83 cb 01\n49 c7 c6 ff ff ff ff\n48 83 fb ff\n75 18\neb 25\n48 83 c3 02\n48 83 fb ff\n74 0f\n48 89 df\ne8 1e 00 00 00\n84 c0\n74 ea\n49 89 de\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p747
S'.text:0000000000404e90\n.text:0000000000404e92\n.text:0000000000404e93\n.text:0000000000404e94\n.text:0000000000404e98\n.text:0000000000404e9d\n.text:0000000000404ea1\n.text:0000000000404ea5\n.text:0000000000404eac\n.text:0000000000404eb0\n.text:0000000000404eb2\n.text:0000000000404ec0\n.text:0000000000404ec4\n.text:0000000000404ec8\n.text:0000000000404eca\n.text:0000000000404ecd\n.text:0000000000404ed2\n.text:0000000000404ed4\n.text:0000000000404ed6\n.text:0000000000404ed9\n.text:0000000000404edc\n.text:0000000000404ee0\n.text:0000000000404ee1\n.text:0000000000404ee3\n'
p748
tp749
sS'hash_insert'
p750
(S'\n__stdcall hash_insert(Hash_table * table, void * entry)\n'
p751
V\u000avoid * hash_insert(Hash_table *table,void *entry)\u000a\u000a{\u000a  int iVar1;\u000a  void *matched_ent;\u000a  void *local_10;\u000a  \u000a  iVar1 = hash_insert_if_absent(table,entry,&local_10);\u000a  if (iVar1 == -1) {\u000a    entry = (void *)0x0;\u000a  }\u000a  else {\u000a    if (iVar1 == 0) {\u000a      entry = local_10;\u000a    }\u000a  }\u000a  return entry;\u000a}\u000a\u000a
p752
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RSI\nLEA RDX,[RSP + 0x8]\nCALL 0x00404a00\nCMP EAX,-0x1\nJZ 0x00404cf1\nTEST EAX,EAX\nCMOVZ RBX,qword ptr [RSP + 0x8]\nJMP 0x00404cf3\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x10\nPOP RBX\nRET\n'
p753
S'53\n48 83 ec 10\n48 89 f3\n48 8d 54 24 08\ne8 1e fd ff ff\n83 f8 ff\n74 0a\n85 c0\n48 0f 44 5c 24 08\neb 02\n31 db\n48 89 d8\n48 83 c4 10\n5b\nc3\n'
p754
S'.text:0000000000404cd0\n.text:0000000000404cd1\n.text:0000000000404cd5\n.text:0000000000404cd8\n.text:0000000000404cdd\n.text:0000000000404ce2\n.text:0000000000404ce5\n.text:0000000000404ce7\n.text:0000000000404ce9\n.text:0000000000404cef\n.text:0000000000404cf1\n.text:0000000000404cf3\n.text:0000000000404cf6\n.text:0000000000404cfa\n.text:0000000000404cfb\n'
p755
tp756
sS'gettext_quote'
p757
(S'\n__stdcall gettext_quote(char * msgid)\n'
p758
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_00409db0;\u000a        pcVar2 = &DAT_00409db4;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p759
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x00401750\nCMP RAX,RBX\nJNZ 0x004065f8\nCALL 0x00407be0\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00406600\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x004065a8\nCMP byte ptr [RBX],0x60\nMOV ECX,0x409da0\nMOV EAX,0x409da4\nJMP 0x004065f4\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00406600\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x004065e6\nCMP byte ptr [RBX],0x60\nMOV ECX,0x409db0\nMOV EAX,0x409db4\nJMP 0x004065f4\nCMP R14D,0x9\nMOV ECX,0x409d94\nMOV EAX,0x409d98\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p760
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 f7 b1 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 79 16 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 a0 9d 40 00\nb8 a4 9d 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 b0 9d 40 00\nb8 b4 9d 40 00\neb 0e\n41 83 fe 09\nb9 94 9d 40 00\nb8 98 9d 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p761
S'.text:0000000000406540\n.text:0000000000406541\n.text:0000000000406543\n.text:0000000000406544\n.text:0000000000406547\n.text:000000000040654a\n.text:000000000040654c\n.text:0000000000406551\n.text:0000000000406554\n.text:0000000000406559\n.text:000000000040655c\n.text:0000000000406562\n.text:0000000000406567\n.text:000000000040656a\n.text:000000000040656f\n.text:0000000000406574\n.text:0000000000406579\n.text:000000000040657f\n.text:0000000000406585\n.text:0000000000406588\n.text:000000000040658a\n.text:000000000040658c\n.text:0000000000406591\n.text:0000000000406595\n.text:0000000000406597\n.text:0000000000406599\n.text:000000000040659c\n.text:00000000004065a1\n.text:00000000004065a6\n.text:00000000004065a8\n.text:00000000004065ad\n.text:00000000004065b2\n.text:00000000004065b7\n.text:00000000004065bd\n.text:00000000004065c3\n.text:00000000004065c6\n.text:00000000004065c8\n.text:00000000004065ca\n.text:00000000004065cf\n.text:00000000004065d3\n.text:00000000004065d5\n.text:00000000004065d7\n.text:00000000004065da\n.text:00000000004065df\n.text:00000000004065e4\n.text:00000000004065e6\n.text:00000000004065ea\n.text:00000000004065ef\n.text:00000000004065f4\n.text:00000000004065f8\n.text:00000000004065f9\n.text:00000000004065fb\n.text:00000000004065fc\n'
p762
tp763
sS'fclose'
p764
(S'\n__stdcall fclose(FILE * __stream)\n'
p765
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_0060d090)();\u000a  return iVar1;\u000a}\u000a\u000a
p766
S'JMP qword ptr [0x0060d090]\n'
p767
S'ff 25 6a b9 20 00\n'
p768
S'.plt:0000000000401720\n'
p769
tp770
sS'__ctype_get_mb_cur_max'
p771
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p772
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_0060d0b0)();\u000a  return sVar1;\u000a}\u000a\u000a
p773
S'JMP qword ptr [0x0060d0b0]\n'
p774
S'ff 25 4a b9 20 00\n'
p775
S'.plt:0000000000401760\n'
p776
tp777
sS'lstat'
p778
(S'\n__stdcall lstat(char * __file, stat * __buf)\n'
p779
V\u000aint lstat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___lxstat_0060d0c0)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p780
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x00401780\n'
p781
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 20 97 ff ff\n'
p782
S'.text:0000000000408050\n.text:0000000000408053\n.text:0000000000408056\n.text:000000000040805b\n'
p783
tp784
sS'quotearg_n_style'
p785
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p786
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p787
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00406270\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00406040\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p788
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p789
S'.text:0000000000406230\n.text:0000000000406231\n.text:0000000000406233\n.text:0000000000406234\n.text:0000000000406238\n.text:000000000040623b\n.text:000000000040623d\n.text:0000000000406242\n.text:0000000000406245\n.text:000000000040624a\n.text:0000000000406251\n.text:0000000000406253\n.text:0000000000406256\n.text:0000000000406259\n.text:000000000040625e\n.text:0000000000406262\n.text:0000000000406263\n.text:0000000000406265\n.text:0000000000406266\n'
p790
tp791
sS'hash_clear'
p792
(S'\n__stdcall hash_clear(Hash_table * table)\n'
p793
V\u000avoid hash_clear(Hash_table *table)\u000a\u000a{\u000a  void (*pVar1)(void *);\u000a  hash_entry *phVar2;\u000a  hash_entry *phVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar4 = table->bucket;\u000a  if (phVar4 < table->bucket_limit) {\u000a    do {\u000a      if (phVar4->data != (void *)0x0) {\u000a        pVar1 = table->data_freer;\u000a        phVar3 = phVar4->next;\u000a        while (phVar3 != (hash_entry *)0x0) {\u000a          if (pVar1 != (void (*)(void *))0x0) {\u000a            (*pVar1)(phVar3->data);\u000a          }\u000a          phVar3->data = (void *)0x0;\u000a          phVar2 = phVar3->next;\u000a          phVar3->next = table->free_entry_list;\u000a          table->free_entry_list = phVar3;\u000a          pVar1 = table->data_freer;\u000a          phVar3 = phVar2;\u000a        }\u000a        if (pVar1 != (void (*)(void *))0x0) {\u000a          (*pVar1)(phVar4->data);\u000a        }\u000a        *(undefined4 *)&phVar4->data = 0;\u000a        *(undefined4 *)((long)&phVar4->data + 4) = 0;\u000a        *(undefined4 *)&phVar4->next = 0;\u000a        *(undefined4 *)((long)&phVar4->next + 4) = 0;\u000a      }\u000a      phVar4 = phVar4 + 1;\u000a    } while (phVar4 < table->bucket_limit);\u000a  }\u000a  *(undefined4 *)&table->n_buckets_used = 0;\u000a  *(undefined4 *)((long)&table->n_buckets_used + 4) = 0;\u000a  *(undefined4 *)&table->n_entries = 0;\u000a  *(undefined4 *)((long)&table->n_entries + 4) = 0;\u000a  return;\u000a}\u000a\u000a
p794
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x0040465a\nJMP 0x004046b5\nTEST CL,CL\nJZ 0x00404649\nMOV RDI,qword ptr [R14]\nCALL RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R14],XMM0\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x004046b5\nCMP qword ptr [R14],0x0\nJZ 0x00404650\nMOV RBX,qword ptr [R14 + 0x8]\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nSETNZ CL\nTEST RBX,RBX\nJZ 0x00404640\nNOP dword ptr CS:[RAX + RAX*0x1]\nTEST CL,0x1\nJZ 0x0040468a\nMOV RDI,qword ptr [RBX]\nCALL RAX\nMOV qword ptr [RBX],0x0\nMOV RDX,qword ptr [RBX + 0x8]\nMOV RAX,qword ptr [R15 + 0x48]\nMOV qword ptr [RBX + 0x8],RAX\nMOV qword ptr [R15 + 0x48],RBX\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nSETNZ CL\nTEST RDX,RDX\nMOV RBX,RDX\nJNZ 0x00404680\nJMP 0x00404640\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R15 + 0x18],XMM0\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p795
S'41 57\n41 56\n53\n49 89 ff\n4d 8b 37\n4d 3b 77 08\n72 29\ne9 7f 00 00 00\n84 c9\n74 05\n49 8b 3e\nff d0\n0f 57 c0\n41 0f 11 06\n49 83 c6 10\n4d 3b 77 08\n73 5b\n49 83 3e 00\n74 f0\n49 8b 5e 08\n49 8b 47 40\n48 85 c0\n0f 95 c1\n48 85 db\n74 cd\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\nf6 c1 01\n74 05\n48 8b 3b\nff d0\n48 c7 03 00 00 00 00\n48 8b 53 08\n49 8b 47 48\n48 89 43 08\n49 89 5f 48\n49 8b 47 40\n48 85 c0\n0f 95 c1\n48 85 d2\n48 89 d3\n75 cd\neb 8b\n0f 57 c0\n41 0f 11 47 18\n5b\n41 5e\n41 5f\nc3\n'
p796
S'.text:0000000000404620\n.text:0000000000404622\n.text:0000000000404624\n.text:0000000000404625\n.text:0000000000404628\n.text:000000000040462b\n.text:000000000040462f\n.text:0000000000404631\n.text:0000000000404640\n.text:0000000000404642\n.text:0000000000404644\n.text:0000000000404647\n.text:0000000000404649\n.text:000000000040464c\n.text:0000000000404650\n.text:0000000000404654\n.text:0000000000404658\n.text:000000000040465a\n.text:000000000040465e\n.text:0000000000404660\n.text:0000000000404664\n.text:0000000000404668\n.text:000000000040466b\n.text:000000000040466e\n.text:0000000000404671\n.text:0000000000404673\n.text:0000000000404680\n.text:0000000000404683\n.text:0000000000404685\n.text:0000000000404688\n.text:000000000040468a\n.text:0000000000404691\n.text:0000000000404695\n.text:0000000000404699\n.text:000000000040469d\n.text:00000000004046a1\n.text:00000000004046a5\n.text:00000000004046a8\n.text:00000000004046ab\n.text:00000000004046ae\n.text:00000000004046b1\n.text:00000000004046b3\n.text:00000000004046b5\n.text:00000000004046b8\n.text:00000000004046bd\n.text:00000000004046be\n.text:00000000004046c0\n.text:00000000004046c2\n'
p797
tp798
sS'dir_len'
p799
(S'\n__stdcall dir_len(char * file)\n'
p800
V\u000asize_t dir_len(char *file)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  char *pcVar3;\u000a  char *pcVar4;\u000a  \u000a  cVar2 = *file;\u000a  pcVar3 = last_component(file);\u000a  pcVar3 = pcVar3 + -(long)file;\u000a  do {\u000a    pcVar4 = pcVar3;\u000a    if (pcVar3 <= (char *)(ulong)(cVar2 == '/')) {\u000a      return (size_t)pcVar4;\u000a    }\u000a    pcVar1 = pcVar3 + (long)(file + -1);\u000a    pcVar3 = pcVar3 + -1;\u000a  } while (*pcVar1 == '/');\u000a  return (size_t)pcVar4;\u000a}\u000a\u000a
p801
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nXOR R14D,R14D\nCMP byte ptr [RBX],0x2f\nSETZ R14B\nCALL 0x00403d10\nMOV RCX,RAX\nSUB RCX,RBX\nNOP dword ptr [RAX]\nMOV RAX,RCX\nCMP R14,RAX\nJNC 0x00403ca3\nLEA RCX,[RAX + -0x1]\nCMP byte ptr [RBX + RAX*0x1 + -0x1],0x2f\nJZ 0x00403c90\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p802
S'41 56\n53\n50\n48 89 fb\n45 31 f6\n80 3b 2f\n41 0f 94 c6\ne8 8a 00 00 00\n48 89 c1\n48 29 d9\n0f 1f 40 00\n48 89 c8\n49 39 c6\n73 0b\n48 8d 48 ff\n80 7c 03 ff 2f\n74 ed\n48 83 c4 08\n5b\n41 5e\nc3\n'
p803
S'.text:0000000000403c70\n.text:0000000000403c72\n.text:0000000000403c73\n.text:0000000000403c74\n.text:0000000000403c77\n.text:0000000000403c7a\n.text:0000000000403c7d\n.text:0000000000403c81\n.text:0000000000403c86\n.text:0000000000403c89\n.text:0000000000403c8c\n.text:0000000000403c90\n.text:0000000000403c93\n.text:0000000000403c96\n.text:0000000000403c98\n.text:0000000000403c9c\n.text:0000000000403ca1\n.text:0000000000403ca3\n.text:0000000000403ca7\n.text:0000000000403ca8\n.text:0000000000403caa\n'
p804
tp805
sS'find_backup_file_name'
p806
(S'\n__stdcall find_backup_file_name(char * file)\n'
p807
V\u000achar * find_backup_file_name(char *file)\u000a\u000a{\u000a  size_t n;\u000a  numbered_backup_result nVar1;\u000a  size_t filelen;\u000a  size_t sVar2;\u000a  ulong uVar3;\u000a  ulong __n;\u000a  int in_ESI;\u000a  char *local_38;\u000a  \u000a  filelen = strlen(file);\u000a  sVar2 = strlen(simple_backup_suffix);\u000a  __n = sVar2 + 1;\u000a  uVar3 = 9;\u000a  if (9 < __n) {\u000a    uVar3 = __n;\u000a  }\u000a  n = filelen + 1 + uVar3;\u000a  local_38 = (char *)xmalloc(n);\u000a  memcpy(local_38,file,filelen + 1);\u000a  if (in_ESI != 1) {\u000a    nVar1 = numbered_backup(&local_38,n,filelen);\u000a    if (nVar1 == BACKUP_IS_SAME_LENGTH) {\u000a      return local_38;\u000a    }\u000a    if ((nVar1 == BACKUP_IS_LONGER) || ((nVar1 == BACKUP_IS_NEW && (in_ESI != 2))))\u000a    goto LAB_00403029;\u000a  }\u000a  memcpy(local_38 + filelen,simple_backup_suffix,__n);\u000aLAB_00403029:\u000a  check_extension(local_38,filelen);\u000a  return local_38;\u000a}\u000a\u000a
p808
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,ESI\nMOV R13,RDI\nCALL 0x00401770\nMOV R15,RAX\nMOV RDI,qword ptr [0x0060d260]\nCALL 0x00401770\nMOV RBP,RAX\nINC RBP\nCMP RBP,0x9\nMOV EAX,0x9\nCMOVA RAX,RBP\nLEA R12,[R15 + RAX*0x1 + 0x1]\nLEA RBX,[R15 + 0x1]\nMOV RDI,R12\nCALL 0x00406f80\nMOV qword ptr [RSP],RAX\nMOV RDI,RAX\nMOV RSI,R13\nMOV RDX,RBX\nCALL 0x004018b0\nCMP R14D,0x1\nJZ 0x00403013\nMOV RDI,RSP\nMOV RSI,R12\nMOV RDX,R15\nCALL 0x00403050\nTEST EAX,EAX\nJZ 0x00403035\nCMP EAX,0x1\nJZ 0x00403029\nCMP EAX,0x2\nJNZ 0x00403013\nCMP R14D,0x2\nJNZ 0x00403029\nMOV RDI,qword ptr [RSP]\nADD RDI,R15\nMOV RSI,qword ptr [0x0060d260]\nMOV RDX,RBP\nCALL 0x004018b0\nMOV RDI,qword ptr [RSP]\nMOV RSI,R15\nCALL 0x00403310\nMOV RAX,qword ptr [RSP]\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p809
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n41 89 f6\n49 89 fd\ne8 ca e7 ff ff\n49 89 c7\n48 8b 3d b0 a2 20 00\ne8 bb e7 ff ff\n48 89 c5\n48 ff c5\n48 83 fd 09\nb8 09 00 00 00\n48 0f 47 c5\n4d 8d 64 07 01\n49 8d 5f 01\n4c 89 e7\ne8 a7 3f 00 00\n48 89 04 24\n48 89 c7\n4c 89 ee\n48 89 da\ne8 c5 e8 ff ff\n41 83 fe 01\n74 22\n48 89 e7\n4c 89 e6\n4c 89 fa\ne8 51 00 00 00\n85 c0\n74 32\n83 f8 01\n74 21\n83 f8 02\n75 06\n41 83 fe 02\n75 16\n48 8b 3c 24\n4c 01 ff\n48 8b 35 3f a2 20 00\n48 89 ea\ne8 87 e8 ff ff\n48 8b 3c 24\n4c 89 fe\ne8 db 02 00 00\n48 8b 04 24\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p810
S'.text:0000000000402f90\n.text:0000000000402f91\n.text:0000000000402f93\n.text:0000000000402f95\n.text:0000000000402f97\n.text:0000000000402f99\n.text:0000000000402f9a\n.text:0000000000402f9b\n.text:0000000000402f9e\n.text:0000000000402fa1\n.text:0000000000402fa6\n.text:0000000000402fa9\n.text:0000000000402fb0\n.text:0000000000402fb5\n.text:0000000000402fb8\n.text:0000000000402fbb\n.text:0000000000402fbf\n.text:0000000000402fc4\n.text:0000000000402fc8\n.text:0000000000402fcd\n.text:0000000000402fd1\n.text:0000000000402fd4\n.text:0000000000402fd9\n.text:0000000000402fdd\n.text:0000000000402fe0\n.text:0000000000402fe3\n.text:0000000000402fe6\n.text:0000000000402feb\n.text:0000000000402fef\n.text:0000000000402ff1\n.text:0000000000402ff4\n.text:0000000000402ff7\n.text:0000000000402ffa\n.text:0000000000402fff\n.text:0000000000403001\n.text:0000000000403003\n.text:0000000000403006\n.text:0000000000403008\n.text:000000000040300b\n.text:000000000040300d\n.text:0000000000403011\n.text:0000000000403013\n.text:0000000000403017\n.text:000000000040301a\n.text:0000000000403021\n.text:0000000000403024\n.text:0000000000403029\n.text:000000000040302d\n.text:0000000000403030\n.text:0000000000403035\n.text:0000000000403039\n.text:000000000040303d\n.text:000000000040303e\n.text:0000000000403040\n.text:0000000000403042\n.text:0000000000403044\n.text:0000000000403046\n.text:0000000000403047\n'
p811
tp812
sS'raw_hasher'
p813
(S'\n__stdcall raw_hasher(void * data, size_t n)\n'
p814
V\u000asize_t raw_hasher(void *data,size_t n)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = rotr_sz((size_t)data);\u000a  return sVar1 % n;\u000a}\u000a\u000a
p815
S'PUSH RBX\nMOV RBX,RSI\nMOV ESI,0x3\nCALL 0x00407950\nXOR EDX,EDX\nDIV RBX\nMOV RAX,RDX\nPOP RBX\nRET\n'
p816
S'53\n48 89 f3\nbe 03 00 00 00\ne8 62 34 00 00\n31 d2\n48 f7 f3\n48 89 d0\n5b\nc3\n'
p817
S'.text:00000000004044e0\n.text:00000000004044e1\n.text:00000000004044e4\n.text:00000000004044e9\n.text:00000000004044ee\n.text:00000000004044f0\n.text:00000000004044f3\n.text:00000000004044f6\n.text:00000000004044f7\n'
p818
tp819
sS'quote_n'
p820
(S'\n__stdcall quote_n(char * arg)\n'
p821
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p822
S'MOV RDX,-0x1\nJMP 0x00406500\n'
p823
S'48 c7 c2 ff ff ff ff\neb d7\n'
p824
S'.text:0000000000406520\n.text:0000000000406527\n'
p825
tp826
sS'quotearg_alloc'
p827
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p828
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p829
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00405eb0\n'
p830
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p831
S'.text:0000000000405ea0\n.text:0000000000405ea3\n.text:0000000000405ea5\n.text:0000000000405ea8\n'
p832
tp833
sS'close_stdout_set_file_name'
p834
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p835
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p836
S'MOV qword ptr [0x0060d350],RDI\nRET\n'
p837
S'48 89 3d 59 98 20 00\nc3\n'
p838
S'.text:0000000000403af0\n.text:0000000000403af7\n'
p839
tp840
sS'check_tuning'
p841
(S'\n__stdcall check_tuning(Hash_table * table)\n'
p842
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000a_Bool check_tuning(Hash_table *table)\u000a\u000a{\u000a  float fVar1;\u000a  Hash_tuning *pHVar2;\u000a  undefined uVar3;\u000a  float fVar4;\u000a  \u000a  pHVar2 = table->tuning;\u000a  uVar3 = 1;\u000a  if ((pHVar2 != &default_tuning) &&\u000a     ((((fVar1 = pHVar2->growth_threshold, fVar1 <= _DAT_00409788 || (DAT_0040978c <= fVar1)) ||\u000a       (pHVar2->growth_factor <= _DAT_00409790)) ||\u000a      (((pHVar2->shrink_threshold < 0.00000000 ||\u000a        (fVar4 = pHVar2->shrink_threshold + _DAT_00409788, fVar1 <= fVar4)) ||\u000a       ((DAT_00409794 < pHVar2->shrink_factor || (pHVar2->shrink_factor <= fVar4)))))))) {\u000a    table->tuning = &default_tuning;\u000a    uVar3 = 0;\u000a  }\u000a  return (_Bool)uVar3;\u000a}\u000a\u000a
p843
S'MOV RCX,qword ptr [RDI + 0x28]\nMOV EDX,0x40980c\nMOV AL,0x1\nCMP RCX,RDX\nJZ 0x00404583\nMOVSS XMM0,dword ptr [RCX + 0x8]\nUCOMISS XMM0,dword ptr [0x00409788]\nJBE 0x00404579\nMOVSS XMM1,dword ptr [0x0040978c]\nUCOMISS XMM1,XMM0\nJBE 0x00404579\nMOVSS XMM1,dword ptr [RCX + 0xc]\nUCOMISS XMM1,dword ptr [0x00409790]\nJBE 0x00404579\nMOVSS XMM1,dword ptr [RCX]\nXORPS XMM2,XMM2\nUCOMISS XMM1,XMM2\nJC 0x00404579\nADDSS XMM1,dword ptr [0x00409788]\nUCOMISS XMM0,XMM1\nJBE 0x00404579\nMOVSS XMM0,dword ptr [RCX + 0x4]\nMOVSS XMM2,dword ptr [0x00409794]\nUCOMISS XMM2,XMM0\nJC 0x00404579\nUCOMISS XMM0,XMM1\nJA 0x00404583\nMOV qword ptr [RDI + 0x28],0x40980c\nXOR EAX,EAX\nRET\n'
p844
S'48 8b 4f 28\nba 0c 98 40 00\nb0 01\n48 39 d1\n74 63\nf3 0f 10 41 08\n0f 2e 05 5c 52 00 00\n76 4b\nf3 0f 10 0d 56 52 00 00\n0f 2e c8\n76 3e\nf3 0f 10 49 0c\n0f 2e 0d 49 52 00 00\n76 30\nf3 0f 10 09\n0f 57 d2\n0f 2e ca\n72 24\nf3 0f 58 0d 2b 52 00 00\n0f 2e c1\n76 17\nf3 0f 10 41 04\nf3 0f 10 15 25 52 00 00\n0f 2e d0\n72 05\n0f 2e c1\n77 0a\n48 c7 47 28 0c 98 40 00\n31 c0\nc3\n'
p845
S'.text:0000000000404510\n.text:0000000000404514\n.text:0000000000404519\n.text:000000000040451b\n.text:000000000040451e\n.text:0000000000404520\n.text:0000000000404525\n.text:000000000040452c\n.text:000000000040452e\n.text:0000000000404536\n.text:0000000000404539\n.text:000000000040453b\n.text:0000000000404540\n.text:0000000000404547\n.text:0000000000404549\n.text:000000000040454d\n.text:0000000000404550\n.text:0000000000404553\n.text:0000000000404555\n.text:000000000040455d\n.text:0000000000404560\n.text:0000000000404562\n.text:0000000000404567\n.text:000000000040456f\n.text:0000000000404572\n.text:0000000000404574\n.text:0000000000404577\n.text:0000000000404579\n.text:0000000000404581\n.text:0000000000404583\n'
p846
tp847
sS'__libc_csu_init'
p848
(S'\n__stdcall __libc_csu_init()\n'
p849
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p850
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x60ce08]\nPUSH RBP\nLEA RBP,[0x60ce10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401608\nTEST RBP,RBP\nJZ 0x00407fe6\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00407fd0\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p851
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 66 4e 20 00\n55\n48 8d 2d 66 4e 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 47 96 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p852
S'.text:0000000000407f90\n.text:0000000000407f92\n.text:0000000000407f94\n.text:0000000000407f97\n.text:0000000000407f99\n.text:0000000000407f9b\n.text:0000000000407fa2\n.text:0000000000407fa3\n.text:0000000000407faa\n.text:0000000000407fab\n.text:0000000000407fae\n.text:0000000000407fb1\n.text:0000000000407fb4\n.text:0000000000407fb8\n.text:0000000000407fbc\n.text:0000000000407fc1\n.text:0000000000407fc4\n.text:0000000000407fc6\n.text:0000000000407fc8\n.text:0000000000407fd0\n.text:0000000000407fd3\n.text:0000000000407fd6\n.text:0000000000407fd9\n.text:0000000000407fdd\n.text:0000000000407fe1\n.text:0000000000407fe4\n.text:0000000000407fe6\n.text:0000000000407fea\n.text:0000000000407feb\n.text:0000000000407fec\n.text:0000000000407fee\n.text:0000000000407ff0\n.text:0000000000407ff2\n.text:0000000000407ff4\n'
p853
tp854
sS'argmatch_to_argument'
p855
(S'\n__stdcall argmatch_to_argument(char * value, char * * arglist, char * vallist, size_t valsize)\n'
p856
V\u000achar * argmatch_to_argument(char *value,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  \u000a  pcVar2 = *arglist;\u000a  if (pcVar2 != (char *)0x0) {\u000a    arglist = arglist + 1;\u000a    do {\u000a      iVar1 = memcmp(value,vallist,valsize);\u000a      if (iVar1 == 0) {\u000a        return pcVar2;\u000a      }\u000a      pcVar2 = *arglist;\u000a      arglist = arglist + 1;\u000a      vallist = vallist + valsize;\u000a    } while (pcVar2 != (char *)0x0);\u000a  }\u000a  return (char *)0x0;\u000a}\u000a\u000a
p857
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R14,RCX\nMOV R12,RDX\nMOV RBX,RSI\nMOV R13,RDI\nMOV R15,qword ptr [RBX]\nTEST R15,R15\nJZ 0x004078e1\nADD RBX,0x8\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R14\nCALL 0x00401840\nTEST EAX,EAX\nJZ 0x004078e4\nMOV R15,qword ptr [RBX]\nADD RBX,0x8\nADD R12,R14\nTEST R15,R15\nJNZ 0x004078c0\nXOR R15D,R15D\nMOV RAX,R15\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p858
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 ce\n49 89 d4\n48 89 f3\n49 89 fd\n4c 8b 3b\n4d 85 ff\n74 34\n48 83 c3 08\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ef\n4c 89 e6\n4c 89 f2\ne8 72 9f ff ff\n85 c0\n74 12\n4c 8b 3b\n48 83 c3 08\n4d 01 f4\n4d 85 ff\n75 df\n45 31 ff\n4c 89 f8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p859
S'.text:0000000000407890\n.text:0000000000407892\n.text:0000000000407894\n.text:0000000000407896\n.text:0000000000407898\n.text:0000000000407899\n.text:000000000040789c\n.text:000000000040789f\n.text:00000000004078a2\n.text:00000000004078a5\n.text:00000000004078a8\n.text:00000000004078ab\n.text:00000000004078ad\n.text:00000000004078b1\n.text:00000000004078c0\n.text:00000000004078c3\n.text:00000000004078c6\n.text:00000000004078c9\n.text:00000000004078ce\n.text:00000000004078d0\n.text:00000000004078d2\n.text:00000000004078d5\n.text:00000000004078d9\n.text:00000000004078dc\n.text:00000000004078df\n.text:00000000004078e1\n.text:00000000004078e4\n.text:00000000004078e7\n.text:00000000004078e8\n.text:00000000004078ea\n.text:00000000004078ec\n.text:00000000004078ee\n.text:00000000004078f0\n'
p860
tp861
sS'c_isdigit'
p862
(S'\n__stdcall c_isdigit()\n'
p863
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p864
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p865
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p866
S'.text:0000000000407a60\n.text:0000000000407a63\n.text:0000000000407a66\n.text:0000000000407a69\n'
p867
tp868
sS'hash_do_for_each'
p869
(S'\n__stdcall hash_do_for_each(Hash_table * table, Hash_processor * processor, void * processor_data)\n'
p870
V\u000asize_t hash_do_for_each(Hash_table *table,_Bool (*processor)(void *,void *),void *processor_data)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  _Bool _Var2;\u000a  size_t sVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar4 = table->bucket;\u000a  if (phVar4 < table->bucket_limit) {\u000a    sVar3 = 0;\u000a    do {\u000a      phVar1 = phVar4;\u000a      if (phVar4->data != (void *)0x0) {\u000a        while (phVar1 != (hash_entry *)0x0) {\u000a          _Var2 = (*processor)(phVar1->data,processor_data);\u000a          if (_Var2 == false) {\u000a            return sVar3;\u000a          }\u000a          sVar3 = sVar3 + 1;\u000a          phVar1 = phVar1->next;\u000a        }\u000a      }\u000a      phVar4 = phVar4 + 1;\u000a    } while (phVar4 < table->bucket_limit);\u000a  }\u000a  else {\u000a    sVar3 = 0;\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p871
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R15,RSI\nMOV R12,RDI\nMOV R13,qword ptr [R12]\nCMP R13,qword ptr [R12 + 0x8]\nJNC 0x00404387\nXOR EBX,EBX\nCMP qword ptr [R13],0x0\nJZ 0x0040437a\nTEST R13,R13\nJZ 0x0040437a\nMOV RBP,R13\nMOV RDI,qword ptr [RBP]\nMOV RSI,R14\nCALL R15\nTEST AL,AL\nJZ 0x00404389\nINC RBX\nMOV RBP,qword ptr [RBP + 0x8]\nTEST RBP,RBP\nJNZ 0x00404360\nADD R13,0x10\nCMP R13,qword ptr [R12 + 0x8]\nJC 0x00404351\nJMP 0x00404389\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p872
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f7\n49 89 fc\n4d 8b 2c 24\n4d 3b 6c 24 08\n73 38\n31 db\n49 83 7d 00 00\n74 22\n4d 85 ed\n74 1d\n4c 89 ed\n48 8b 7d 00\n4c 89 f6\n41 ff d7\n84 c0\n74 1b\n48 ff c3\n48 8b 6d 08\n48 85 ed\n75 e6\n49 83 c5 10\n4d 3b 6c 24 08\n72 cc\neb 02\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p873
S'.text:0000000000404330\n.text:0000000000404331\n.text:0000000000404333\n.text:0000000000404335\n.text:0000000000404337\n.text:0000000000404339\n.text:000000000040433a\n.text:000000000040433b\n.text:000000000040433e\n.text:0000000000404341\n.text:0000000000404344\n.text:0000000000404348\n.text:000000000040434d\n.text:000000000040434f\n.text:0000000000404351\n.text:0000000000404356\n.text:0000000000404358\n.text:000000000040435b\n.text:000000000040435d\n.text:0000000000404360\n.text:0000000000404364\n.text:0000000000404367\n.text:000000000040436a\n.text:000000000040436c\n.text:000000000040436e\n.text:0000000000404371\n.text:0000000000404375\n.text:0000000000404378\n.text:000000000040437a\n.text:000000000040437e\n.text:0000000000404383\n.text:0000000000404385\n.text:0000000000404387\n.text:0000000000404389\n.text:000000000040438c\n.text:0000000000404390\n.text:0000000000404391\n.text:0000000000404393\n.text:0000000000404395\n.text:0000000000404397\n.text:0000000000404399\n.text:000000000040439a\n'
p874
tp875
sS'usage'
p876
(S'\n__stdcall usage()\n'
p877
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,\u000a                      "Usage: %s [OPTION]... [-T] TARGET LINK_NAME   (1st form)\u005cn  or:  %s [OPTION]... TARGET                  (2nd form)\u005cn  or:  %s [OPTION]... TARGET... DIRECTORY     (3rd form)\u005cn  or:  %s [OPTION]... -t DIRECTORY TARGET...  (4th form)\u005cn"\u000a                      ,5);\u000a    __printf_chk(1,uVar1,program_name,program_name,program_name,program_name);\u000a    __s = (char *)dcgettext(0,\u000a                            "In the 1st form, create a link to TARGET with the name LINK_NAME.\u005cnIn the 2nd form, create a link to TARGET in the current directory.\u005cnIn the 3rd and 4th forms, create links to each TARGET in DIRECTORY.\u005cnCreate hard links by default, symbolic links with --symbolic.\u005cnBy default, each destination (name of new link) should not already exist.\u005cnWhen creating hard links, each TARGET must exist.  Symbolic links\u005cncan hold arbitrary text; if later resolved, a relative link is\u005cninterpreted in relation to its parent directory.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_mandatory_arg_note();\u000a    __s = (char *)dcgettext(0,\u000a                            "      --backup[=CONTROL]      make a backup of each existing destination file\u005cn  -b                          like --backup but does not accept an argument\u005cn  -d, -F, --directory         allow the superuser to attempt to hard link\u005cn                                directories (note: will probably fail due to\u005cn                                system restrictions, even for the superuser)\u005cn  -f, --force                 remove existing destination files\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -i, --interactive           prompt whether to remove destinations\u005cn  -L, --logical               dereference TARGETs that are symbolic links\u005cn  -n, --no-dereference        treat LINK_NAME as a normal file if\u005cn                                it is a symbolic link to a directory\u005cn  -P, --physical              make hard links directly to symbolic links\u005cn  -r, --relative              create symbolic links relative to link location\u005cn  -s, --symbolic              make symbolic links instead of hard links\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -S, --suffix=SUFFIX         override the usual backup suffix\u005cn  -t, --target-directory=DIRECTORY  specify the DIRECTORY in which to create\u005cn                                the links\u005cn  -T, --no-target-directory   treat LINK_NAME as a normal file always\u005cn  -v, --verbose               print name of each linked file\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnThe backup suffix is \u005c'~\u005c', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.\u005cnThe version control method may be selected via the --backup option or through\u005cnthe VERSION_CONTROL environment variable.  Here are the values:\u005cn\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  none, off       never make backups (even if --backup is given)\u005cn  numbered, t     make numbered backups\u005cn  existing, nil   numbered if numbered backups exist, simple otherwise\u005cn  simple, never   always make simple backups\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    uVar1 = dcgettext(0,\u000a                      "\u005cnUsing -s ignores -L and -P.  Otherwise, the last option specified controls\u005cnbehavior when a TARGET is a symbolic link, defaulting to %s.\u005cn"\u000a                      ,5);\u000a    __printf_chk(1,uVar1,&DAT_0040912f,uVar1);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p878
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x00401d07\nXOR EDI,EDI\nMOV ESI,0x4086b0\nMOV EDX,0x5\nCALL 0x00401750\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060d360]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nMOV RCX,RDX\nMOV R8,RDX\nMOV R9,RDX\nCALL 0x004019a0\nXOR EDI,EDI\nMOV ESI,0x408795\nMOV EDX,0x5\nCALL 0x00401750\nMOV RSI,qword ptr [0x0060d2e8]\nMOV RDI,RAX\nCALL 0x00401850\nCALL 0x00401d60\nXOR EDI,EDI\nMOV ESI,0x408999\nMOV EDX,0x5\nCALL 0x00401750\nMOV RSI,qword ptr [0x0060d2e8]\nMOV RDI,RAX\nCALL 0x00401850\nXOR EDI,EDI\nMOV ESI,0x408b58\nMOV EDX,0x5\nCALL 0x00401750\nMOV RSI,qword ptr [0x0060d2e8]\nMOV RDI,RAX\nCALL 0x00401850\nXOR EDI,EDI\nMOV ESI,0x408d4d\nMOV EDX,0x5\nCALL 0x00401750\nMOV RSI,qword ptr [0x0060d2e8]\nMOV RDI,RAX\nCALL 0x00401850\nXOR EDI,EDI\nMOV ESI,0x408e87\nMOV EDX,0x5\nCALL 0x00401750\nMOV RSI,qword ptr [0x0060d2e8]\nMOV RDI,RAX\nCALL 0x00401850\nXOR EDI,EDI\nMOV ESI,0x408eb4\nMOV EDX,0x5\nCALL 0x00401750\nMOV RSI,qword ptr [0x0060d2e8]\nMOV RDI,RAX\nCALL 0x00401850\nXOR EDI,EDI\nMOV ESI,0x408eea\nMOV EDX,0x5\nCALL 0x00401750\nMOV RSI,qword ptr [0x0060d2e8]\nMOV RDI,RAX\nCALL 0x00401850\nXOR EDI,EDI\nMOV ESI,0x408fc7\nMOV EDX,0x5\nCALL 0x00401750\nMOV RSI,qword ptr [0x0060d2e8]\nMOV RDI,RAX\nCALL 0x00401850\nXOR EDI,EDI\nMOV ESI,0x4090a5\nMOV EDX,0x5\nCALL 0x00401750\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40912f\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004019a0\nCALL 0x00401d90\nMOV EDI,EBX\nCALL 0x00401a30\nCALL 0x00401d20\nMOV EDI,EBX\nCALL 0x00401a30\n'
p879
S'53\n89 fb\n85 db\n0f 85 6c 01 00 00\n31 ff\nbe b0 86 40 00\nba 05 00 00 00\ne8 a4 fb ff ff\n48 89 c1\n48 8b 15 aa b7 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\n48 89 d1\n49 89 d0\n49 89 d1\ne8 d2 fd ff ff\n31 ff\nbe 95 87 40 00\nba 05 00 00 00\ne8 71 fb ff ff\n48 8b 35 02 b7 20 00\n48 89 c7\ne8 62 fc ff ff\ne8 6d 01 00 00\n31 ff\nbe 99 89 40 00\nba 05 00 00 00\ne8 4c fb ff ff\n48 8b 35 dd b6 20 00\n48 89 c7\ne8 3d fc ff ff\n31 ff\nbe 58 8b 40 00\nba 05 00 00 00\ne8 2c fb ff ff\n48 8b 35 bd b6 20 00\n48 89 c7\ne8 1d fc ff ff\n31 ff\nbe 4d 8d 40 00\nba 05 00 00 00\ne8 0c fb ff ff\n48 8b 35 9d b6 20 00\n48 89 c7\ne8 fd fb ff ff\n31 ff\nbe 87 8e 40 00\nba 05 00 00 00\ne8 ec fa ff ff\n48 8b 35 7d b6 20 00\n48 89 c7\ne8 dd fb ff ff\n31 ff\nbe b4 8e 40 00\nba 05 00 00 00\ne8 cc fa ff ff\n48 8b 35 5d b6 20 00\n48 89 c7\ne8 bd fb ff ff\n31 ff\nbe ea 8e 40 00\nba 05 00 00 00\ne8 ac fa ff ff\n48 8b 35 3d b6 20 00\n48 89 c7\ne8 9d fb ff ff\n31 ff\nbe c7 8f 40 00\nba 05 00 00 00\ne8 8c fa ff ff\n48 8b 35 1d b6 20 00\n48 89 c7\ne8 7d fb ff ff\n31 ff\nbe a5 90 40 00\nba 05 00 00 00\ne8 6c fa ff ff\n48 89 c1\nbf 01 00 00 00\nba 2f 91 40 00\n31 c0\n48 89 ce\ne8 a5 fc ff ff\ne8 90 00 00 00\n89 df\ne8 29 fd ff ff\ne8 14 00 00 00\n89 df\ne8 1d fd ff ff\n'
p880
S'.text:0000000000401b90\n.text:0000000000401b91\n.text:0000000000401b93\n.text:0000000000401b95\n.text:0000000000401b9b\n.text:0000000000401b9d\n.text:0000000000401ba2\n.text:0000000000401ba7\n.text:0000000000401bac\n.text:0000000000401baf\n.text:0000000000401bb6\n.text:0000000000401bbb\n.text:0000000000401bbd\n.text:0000000000401bc0\n.text:0000000000401bc3\n.text:0000000000401bc6\n.text:0000000000401bc9\n.text:0000000000401bce\n.text:0000000000401bd0\n.text:0000000000401bd5\n.text:0000000000401bda\n.text:0000000000401bdf\n.text:0000000000401be6\n.text:0000000000401be9\n.text:0000000000401bee\n.text:0000000000401bf3\n.text:0000000000401bf5\n.text:0000000000401bfa\n.text:0000000000401bff\n.text:0000000000401c04\n.text:0000000000401c0b\n.text:0000000000401c0e\n.text:0000000000401c13\n.text:0000000000401c15\n.text:0000000000401c1a\n.text:0000000000401c1f\n.text:0000000000401c24\n.text:0000000000401c2b\n.text:0000000000401c2e\n.text:0000000000401c33\n.text:0000000000401c35\n.text:0000000000401c3a\n.text:0000000000401c3f\n.text:0000000000401c44\n.text:0000000000401c4b\n.text:0000000000401c4e\n.text:0000000000401c53\n.text:0000000000401c55\n.text:0000000000401c5a\n.text:0000000000401c5f\n.text:0000000000401c64\n.text:0000000000401c6b\n.text:0000000000401c6e\n.text:0000000000401c73\n.text:0000000000401c75\n.text:0000000000401c7a\n.text:0000000000401c7f\n.text:0000000000401c84\n.text:0000000000401c8b\n.text:0000000000401c8e\n.text:0000000000401c93\n.text:0000000000401c95\n.text:0000000000401c9a\n.text:0000000000401c9f\n.text:0000000000401ca4\n.text:0000000000401cab\n.text:0000000000401cae\n.text:0000000000401cb3\n.text:0000000000401cb5\n.text:0000000000401cba\n.text:0000000000401cbf\n.text:0000000000401cc4\n.text:0000000000401ccb\n.text:0000000000401cce\n.text:0000000000401cd3\n.text:0000000000401cd5\n.text:0000000000401cda\n.text:0000000000401cdf\n.text:0000000000401ce4\n.text:0000000000401ce7\n.text:0000000000401cec\n.text:0000000000401cf1\n.text:0000000000401cf3\n.text:0000000000401cf6\n.text:0000000000401cfb\n.text:0000000000401d00\n.text:0000000000401d02\n.text:0000000000401d07\n.text:0000000000401d0c\n.text:0000000000401d0e\n'
p881
tp882
sS'quoting_options_from_style'
p883
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p884
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p885
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x004062bd\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00401660\n'
p886
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 9e b3 ff ff\n'
p887
S'.text:0000000000406270\n.text:0000000000406274\n.text:0000000000406277\n.text:000000000040627c\n.text:0000000000406281\n.text:0000000000406285\n.text:000000000040628d\n.text:0000000000406290\n.text:0000000000406292\n.text:0000000000406294\n.text:0000000000406298\n.text:000000000040629b\n.text:000000000040629f\n.text:00000000004062a4\n.text:00000000004062a9\n.text:00000000004062ad\n.text:00000000004062b1\n.text:00000000004062b5\n.text:00000000004062b8\n.text:00000000004062bc\n.text:00000000004062bd\n'
p888
tp889
sS'strcpy'
p890
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p891
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_0060d058)();\u000a  return pcVar1;\u000a}\u000a\u000a
p892
S'JMP qword ptr [0x0060d058]\n'
p893
S'ff 25 a2 b9 20 00\n'
p894
S'.plt:00000000004016b0\n'
p895
tp896
sS'triple_compare_ino_str'
p897
(S'\n__stdcall triple_compare_ino_str(void * x, void * y)\n'
p898
V\u000a_Bool triple_compare_ino_str(void *x,void *y)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (*(long *)((long)x + 8) != *(long *)((long)y + 8)) {\u000a    return false;\u000a  }\u000a  if (*(long *)((long)x + 0x10) == *(long *)((long)y + 0x10)) {\u000a    iVar1 = strcmp(*(char **)x,*(char **)y);\u000a    return (_Bool)(iVar1 == 0);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p899
S'MOV RAX,qword ptr [RDI + 0x8]\nCMP RAX,qword ptr [RSI + 0x8]\nJNZ 0x0040501a\nMOV RAX,qword ptr [RDI + 0x10]\nCMP RAX,qword ptr [RSI + 0x10]\nJNZ 0x0040501d\nPUSH RAX\nMOV RDI,qword ptr [RDI]\nMOV RSI,qword ptr [RSI]\nCALL 0x00401880\nTEST EAX,EAX\nSETZ AL\nADD RSP,0x8\nRET\nXOR EAX,EAX\nRET\nXOR EAX,EAX\nRET\n'
p900
S'48 8b 47 08\n48 3b 46 08\n75 20\n48 8b 47 10\n48 3b 46 10\n75 19\n50\n48 8b 3f\n48 8b 36\ne8 70 c8 ff ff\n85 c0\n0f 94 c0\n48 83 c4 08\nc3\n31 c0\nc3\n31 c0\nc3\n'
p901
S'.text:0000000000404ff0\n.text:0000000000404ff4\n.text:0000000000404ff8\n.text:0000000000404ffa\n.text:0000000000404ffe\n.text:0000000000405002\n.text:0000000000405004\n.text:0000000000405005\n.text:0000000000405008\n.text:000000000040500b\n.text:0000000000405010\n.text:0000000000405012\n.text:0000000000405015\n.text:0000000000405019\n.text:000000000040501a\n.text:000000000040501c\n.text:000000000040501d\n.text:000000000040501f\n'
p902
tp903
sS'triple_hash_no_name'
p904
(S'\n__stdcall triple_hash_no_name(void * x, size_t table_size)\n'
p905
V\u000asize_t triple_hash_no_name(void *x,size_t table_size)\u000a\u000a{\u000a  return *(ulong *)((long)x + 8) % table_size;\u000a}\u000a\u000a
p906
S'MOV RAX,qword ptr [RDI + 0x8]\nXOR EDX,EDX\nDIV RSI\nMOV RAX,RDX\nRET\n'
p907
S'48 8b 47 08\n31 d2\n48 f7 f6\n48 89 d0\nc3\n'
p908
S'.text:0000000000404fb0\n.text:0000000000404fb4\n.text:0000000000404fb6\n.text:0000000000404fb9\n.text:0000000000404fbc\n'
p909
tp910
sS'mdir_name'
p911
(S'\n__stdcall mdir_name(char * file)\n'
p912
V\u000achar * mdir_name(char *file)\u000a\u000a{\u000a  size_t __n;\u000a  char *__dest;\u000a  \u000a  __n = dir_len(file);\u000a  __dest = (char *)malloc(__n + 1 + (ulong)(__n == 0));\u000a  if (__dest == (char *)0x0) {\u000a    __dest = (char *)0x0;\u000a  }\u000a  else {\u000a    memcpy(__dest,file,__n);\u000a    if (__n == 0) {\u000a      *__dest = '.';\u000a      __n = 1;\u000a    }\u000a    __dest[__n] = 0;\u000a  }\u000a  return __dest;\u000a}\u000a\u000a
p913
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nCALL 0x00403c70\nMOV RBX,RAX\nXOR EAX,EAX\nTEST RBX,RBX\nSETZ AL\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00401910\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00403cfe\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,RBX\nCALL 0x004018b0\nTEST RBX,RBX\nJNZ 0x00403cf7\nMOV byte ptr [R14 + RBX*0x1],0x2e\nMOV EBX,0x1\nMOV byte ptr [R14 + RBX*0x1],0x0\nJMP 0x00403d01\nXOR R14D,R14D\nMOV RAX,R14\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p914
S'41 57\n41 56\n53\n49 89 ff\ne8 b3 ff ff ff\n48 89 c3\n31 c0\n48 85 db\n0f 94 c0\n48 8d 7c 03 01\ne8 3e dc ff ff\n49 89 c6\n4d 85 f6\n74 24\n4c 89 f7\n4c 89 fe\n48 89 da\ne8 c8 db ff ff\n48 85 db\n75 0a\n41 c6 04 1e 2e\nbb 01 00 00 00\n41 c6 04 1e 00\neb 03\n45 31 f6\n4c 89 f0\n5b\n41 5e\n41 5f\nc3\n'
p915
S'.text:0000000000403cb0\n.text:0000000000403cb2\n.text:0000000000403cb4\n.text:0000000000403cb5\n.text:0000000000403cb8\n.text:0000000000403cbd\n.text:0000000000403cc0\n.text:0000000000403cc2\n.text:0000000000403cc5\n.text:0000000000403cc8\n.text:0000000000403ccd\n.text:0000000000403cd2\n.text:0000000000403cd5\n.text:0000000000403cd8\n.text:0000000000403cda\n.text:0000000000403cdd\n.text:0000000000403ce0\n.text:0000000000403ce3\n.text:0000000000403ce8\n.text:0000000000403ceb\n.text:0000000000403ced\n.text:0000000000403cf2\n.text:0000000000403cf7\n.text:0000000000403cfc\n.text:0000000000403cfe\n.text:0000000000403d01\n.text:0000000000403d04\n.text:0000000000403d05\n.text:0000000000403d07\n.text:0000000000403d09\n'
p916
tp917
sS'rotl8'
p918
(S'\n__stdcall rotl8()\n'
p919
V\u000auint8_t rotl8(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint8_t)((byte)(in_EDI >> (8 - (byte)in_ESI & 0x1f)) |\u000a                  (byte)(in_EDI << ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p920
S'MOV EAX,EDI\nMOV ECX,ESI\nSHL EAX,CL\nMOV ECX,0x8\nSUB ECX,ESI\nSHR EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p921
S'89 f8\n89 f1\nd3 e0\nb9 08 00 00 00\n29 f1\nd3 ef\n09 c7\n89 f8\nc3\n'
p922
S'.text:00000000004079a0\n.text:00000000004079a2\n.text:00000000004079a4\n.text:00000000004079a6\n.text:00000000004079ab\n.text:00000000004079ad\n.text:00000000004079af\n.text:00000000004079b1\n.text:00000000004079b3\n'
p923
tp924
sS'c_isgraph'
p925
(S'\n__stdcall c_isgraph()\n'
p926
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p927
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p928
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p929
S'.text:0000000000407a70\n.text:0000000000407a73\n.text:0000000000407a76\n.text:0000000000407a79\n'
p930
tp931
sS'target_directory_operand'
p932
(S'\n__stdcall target_directory_operand(char * file)\n'
p933
V\u000a_Bool target_directory_operand(char *file)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char *__s;\u000a  size_t sVar3;\u000a  uint *puVar4;\u000a  undefined8 uVar5;\u000a  ulong uVar6;\u000a  bool bVar7;\u000a  bool bVar8;\u000a  stat sStack184;\u000a  \u000a  __s = last_component(file);\u000a  sVar3 = strlen(__s);\u000a  if (sVar3 == 0) {\u000a    bVar7 = true;\u000a  }\u000a  else {\u000a    bVar7 = __s[sVar3 - 1] == '/';\u000a  }\u000a  if (dereference_dest_dir_symlinks == 0) {\u000a    iVar2 = stat(file,&sStack184);\u000a  }\u000a  else {\u000a    iVar2 = lstat(file,&sStack184);\u000a  }\u000a  if (iVar2 != 0) {\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar6 = (ulong)*puVar4;\u000a    if (*puVar4 != 0) {\u000a      __errno_location();\u000a      _Var1 = errno_nonexisting();\u000a      bVar8 = false;\u000a      if (_Var1 == false) {\u000a        uVar5 = dcgettext(0,"failed to access %s",5);\u000a        __s = quotearg_style((char *)0x4);\u000a        error(1,uVar6,uVar5,__s);\u000a      }\u000a      goto LAB_00402523;\u000a    }\u000a  }\u000a  bVar8 = (sStack184.st_mode & 0xf000) == 0x4000;\u000a  uVar6 = 0;\u000aLAB_00402523:\u000a  if ((bVar7 & (bVar8 ^ 1U)) == 1) {\u000a    uVar5 = dcgettext(0,"target %s is not a directory",5);\u000a    __s = quotearg_style((char *)0x4);\u000a    error(1,uVar6,uVar5,__s);\u000a  }\u000a  return (_Bool)bVar8;\u000a}\u000a\u000a
p934
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x90\nMOV R12,RDI\nCALL 0x00403d10\nMOV RBP,RAX\nMOV RDI,RBP\nCALL 0x00401770\nTEST RAX,RAX\nJZ 0x00402491\nCMP byte ptr [RBP + RAX*0x1 + -0x1],0x2f\nSETZ BL\nJMP 0x00402493\nMOV BL,0x1\nMOV AL,byte ptr [0x0060d336]\nMOV RSI,RSP\nMOV RDI,R12\nTEST AL,AL\nJZ 0x004024ae\nCALL 0x00408050\nTEST EAX,EAX\nJNZ 0x004024b7\nJMP 0x0040250e\nCALL 0x00408040\nTEST EAX,EAX\nJZ 0x0040250e\nCALL 0x00401670\nMOV R14D,dword ptr [RAX]\nTEST R14D,R14D\nJZ 0x0040250e\nCALL 0x00401670\nMOV EDI,dword ptr [RAX]\nCALL 0x00402c60\nXOR EBP,EBP\nTEST AL,AL\nJNZ 0x00402523\nXOR EDI,EDI\nMOV ESI,0x409199\nMOV EDX,0x5\nCALL 0x00401750\nMOV R15,RAX\nMOV EDI,0x4\nMOV RSI,R12\nCALL 0x00406310\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,R15\nCALL 0x004019c0\nJMP 0x00402523\nMOV EAX,0xf000\nAND EAX,dword ptr [RSP + 0x18]\nCMP EAX,0x4000\nSETZ BPL\nXOR R14D,R14D\nMOV EAX,EBP\nXOR AL,0x1\nAND BL,AL\nCMP BL,0x1\nJNZ 0x00402564\nXOR EDI,EDI\nMOV ESI,0x4091ad\nMOV EDX,0x5\nCALL 0x00401750\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,R12\nCALL 0x00406310\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,RBX\nCALL 0x004019c0\nMOV EAX,EBP\nADD RSP,0x90\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p935
S'55\n41 57\n41 56\n41 54\n53\n48 81 ec 90 00 00 00\n49 89 fc\ne8 99 18 00 00\n48 89 c5\n48 89 ef\ne8 ee f2 ff ff\n48 85 c0\n74 0a\n80 7c 05 ff 2f\n0f 94 c3\neb 02\nb3 01\n8a 05 9d ae 20 00\n48 89 e6\n4c 89 e7\n84 c0\n74 0b\ne8 a8 5b 00 00\n85 c0\n75 0b\neb 60\ne8 8d 5b 00 00\n85 c0\n74 57\ne8 b4 f1 ff ff\n44 8b 30\n45 85 f6\n74 4a\ne8 a7 f1 ff ff\n8b 38\ne8 90 07 00 00\n31 ed\n84 c0\n75 4d\n31 ff\nbe 99 91 40 00\nba 05 00 00 00\ne8 69 f2 ff ff\n49 89 c7\nbf 04 00 00 00\n4c 89 e6\ne8 19 3e 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n44 89 f6\n4c 89 fa\ne8 b4 f4 ff ff\neb 15\nb8 00 f0 00 00\n23 44 24 18\n3d 00 40 00 00\n40 0f 94 c5\n45 31 f6\n89 e8\n34 01\n20 c3\n80 fb 01\n75 36\n31 ff\nbe ad 91 40 00\nba 05 00 00 00\ne8 11 f2 ff ff\n48 89 c3\nbf 04 00 00 00\n4c 89 e6\ne8 c1 3d 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n44 89 f6\n48 89 da\ne8 5c f4 ff ff\n89 e8\n48 81 c4 90 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p936
S'.text:0000000000402460\n.text:0000000000402461\n.text:0000000000402463\n.text:0000000000402465\n.text:0000000000402467\n.text:0000000000402468\n.text:000000000040246f\n.text:0000000000402472\n.text:0000000000402477\n.text:000000000040247a\n.text:000000000040247d\n.text:0000000000402482\n.text:0000000000402485\n.text:0000000000402487\n.text:000000000040248c\n.text:000000000040248f\n.text:0000000000402491\n.text:0000000000402493\n.text:0000000000402499\n.text:000000000040249c\n.text:000000000040249f\n.text:00000000004024a1\n.text:00000000004024a3\n.text:00000000004024a8\n.text:00000000004024aa\n.text:00000000004024ac\n.text:00000000004024ae\n.text:00000000004024b3\n.text:00000000004024b5\n.text:00000000004024b7\n.text:00000000004024bc\n.text:00000000004024bf\n.text:00000000004024c2\n.text:00000000004024c4\n.text:00000000004024c9\n.text:00000000004024cb\n.text:00000000004024d0\n.text:00000000004024d2\n.text:00000000004024d4\n.text:00000000004024d6\n.text:00000000004024d8\n.text:00000000004024dd\n.text:00000000004024e2\n.text:00000000004024e7\n.text:00000000004024ea\n.text:00000000004024ef\n.text:00000000004024f2\n.text:00000000004024f7\n.text:00000000004024fa\n.text:00000000004024ff\n.text:0000000000402501\n.text:0000000000402504\n.text:0000000000402507\n.text:000000000040250c\n.text:000000000040250e\n.text:0000000000402513\n.text:0000000000402517\n.text:000000000040251c\n.text:0000000000402520\n.text:0000000000402523\n.text:0000000000402525\n.text:0000000000402527\n.text:0000000000402529\n.text:000000000040252c\n.text:000000000040252e\n.text:0000000000402530\n.text:0000000000402535\n.text:000000000040253a\n.text:000000000040253f\n.text:0000000000402542\n.text:0000000000402547\n.text:000000000040254a\n.text:000000000040254f\n.text:0000000000402552\n.text:0000000000402557\n.text:0000000000402559\n.text:000000000040255c\n.text:000000000040255f\n.text:0000000000402564\n.text:0000000000402566\n.text:000000000040256d\n.text:000000000040256e\n.text:0000000000402570\n.text:0000000000402572\n.text:0000000000402574\n.text:0000000000402575\n'
p937
tp938
sS'hash_get_next'
p939
(S'\n__stdcall hash_get_next(Hash_table * table, void * entry)\n'
p940
V\u000avoid * hash_get_next(Hash_table *table,void *entry)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  hash_entry *phVar2;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar2 = safe_hasher(table,entry);\u000a  phVar3 = phVar2;\u000a  while( true ) {\u000a    phVar1 = phVar3->next;\u000a    if ((phVar3->data == entry) && (phVar1 != (hash_entry *)0x0)) break;\u000a    phVar3 = phVar1;\u000a    if (phVar1 == (hash_entry *)0x0) {\u000a      do {\u000a        phVar2 = phVar2 + 1;\u000a        if (table->bucket_limit <= phVar2) {\u000a          return (void *)0x0;\u000a        }\u000a      } while (phVar2->data == (void *)0x0);\u000a      return phVar2->data;\u000a    }\u000a  }\u000a  return phVar1->data;\u000a}\u000a\u000a
p941
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nCALL 0x004041f0\nMOV RCX,RAX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RSI,RCX\nMOV RCX,qword ptr [RSI + 0x8]\nTEST RCX,RCX\nSETZ DL\nCMP qword ptr [RSI],RBX\nJNZ 0x00404296\nTEST DL,DL\nJZ 0x004042c3\nTEST RCX,RCX\nJNZ 0x00404280\nMOV RDX,qword ptr [R14 + 0x8]\nADD RAX,0x10\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP RAX,RDX\nJNC 0x004042c8\nMOV RCX,qword ptr [RAX]\nADD RAX,0x10\nTEST RCX,RCX\nJZ 0x004042b0\nJMP 0x004042ca\nMOV RCX,qword ptr [RCX]\nJMP 0x004042ca\nXOR ECX,ECX\nMOV RAX,RCX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p942
S'41 56\n53\n50\n48 89 f3\n49 89 fe\ne8 81 ff ff ff\n48 89 c1\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 ce\n48 8b 4e 08\n48 85 c9\n0f 94 c2\n48 39 1e\n75 04\n84 d2\n74 2d\n48 85 c9\n75 e5\n49 8b 56 08\n48 83 c0 10\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 39 d0\n73 13\n48 8b 08\n48 83 c0 10\n48 85 c9\n74 ef\neb 07\n48 8b 09\neb 02\n31 c9\n48 89 c8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p943
S'.text:0000000000404260\n.text:0000000000404262\n.text:0000000000404263\n.text:0000000000404264\n.text:0000000000404267\n.text:000000000040426a\n.text:000000000040426f\n.text:0000000000404272\n.text:0000000000404280\n.text:0000000000404283\n.text:0000000000404287\n.text:000000000040428a\n.text:000000000040428d\n.text:0000000000404290\n.text:0000000000404292\n.text:0000000000404294\n.text:0000000000404296\n.text:0000000000404299\n.text:000000000040429b\n.text:000000000040429f\n.text:00000000004042a3\n.text:00000000004042b0\n.text:00000000004042b3\n.text:00000000004042b5\n.text:00000000004042b8\n.text:00000000004042bc\n.text:00000000004042bf\n.text:00000000004042c1\n.text:00000000004042c3\n.text:00000000004042c6\n.text:00000000004042c8\n.text:00000000004042ca\n.text:00000000004042cd\n.text:00000000004042d1\n.text:00000000004042d2\n.text:00000000004042d4\n'
p944
tp945
sS'quotearg_buffer_restyled'
p946
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p947
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_004052ec_caseD_7;\u000a  case 2:\u000a    goto switchD_004052ec_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_004052ec_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_004052ec_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_004052ec_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_004052ec_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_004052ec_caseD_7;\u000aswitchD_004052ec_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_004052ec_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_004052ec_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00405db0;\u000aLAB_004054d0:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00405db9:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00405dc8:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_004054db:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_0040551f:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_0040551f;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00405dc8;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00405cf5;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00405c00;\u000a    }\u000a    goto LAB_00405dc8;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_00405d2a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00405dc8;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00405d59;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00405818;\u000a  case '\u005ca':\u000a    goto joined_r0x00405708;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00405708;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00405536_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00405708;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00405708;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00405536_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00405708:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_00405c6e;\u000a    }\u000a    goto LAB_00405dc8;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00405dc8;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00405dc8;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00405dc8;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00405dc8;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00405dc8;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00405536_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00405cc6;\u000a      goto joined_r0x00405cb8;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x004057c1:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00405cb8;\u000a      goto LAB_00405cc6;\u000a    }\u000a    goto LAB_00405dc8;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00405dc8;\u000a  }\u000a  goto joined_r0x00405c00;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_00405d2a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00405d59;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00405d59:\u000a  if (1 < uVar10) {\u000aLAB_00405836:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_004058f2;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x004057c1;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_004058f2:\u000a        if (bVar6 != 0) goto LAB_00405dc8;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00405818:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00405836;\u000ajoined_r0x00405c00:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00405c00:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00405c27;\u000aLAB_00405c60:\u000a    if (bVar22) goto LAB_00405c65;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00405c60;\u000aLAB_00405c27:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00405c65:\u000a      if (bVar6 != 0) goto LAB_00405dc8;\u000aLAB_00405c6e:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00405cb8;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00405cc6:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00405cb8:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00405cf5:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_004054d0;\u000aLAB_00405db0:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00405db9;\u000a  goto LAB_004054db;\u000a}\u000a\u000a
p948
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x00401760\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00405e95\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x409870 + RAX*0x8]\nMOV EDI,0x409d96\nMOV ESI,R15D\nCALL 0x00406540\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x409d98\nMOV ESI,R15D\nCALL 0x00406540\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x0040534d\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00405350\nNOP\nCMP R12,RSI\nJNC 0x0040533e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00405330\nJMP 0x00405350\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x00401770\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x0040541c\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x0040541c\nMOV ECX,0x409d94\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00405416\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x004053b7\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x004053e4\nTEST RSI,RSI\nJZ 0x004053d1\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x409d98\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x004053f2\nMOV ECX,0x409d98\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x0040541c\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x00405e6c\nMOV ECX,0x409d94\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00405db0\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00405db9\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x0040551f\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x0040551a\nCMP R11,-0x1\nJNZ 0x0040551a\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x00401770\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00405570\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x004057cc\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x4098c8 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00405dc8\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00405c20\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00405c27\nJMP 0x00405c60\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00401840\nTEST EAX,EAX\nSETZ AL\nJNZ 0x004055bd\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00405521\nJMP 0x00405dc8\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00405521\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x0040554b\nCMP EBX,0x2\nJNZ 0x0040554b\nTEST R13,R13\nJNZ 0x0040554b\nJMP 0x00405dc8\nCMP R11,-0x1\nJZ 0x004059a3\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x004059c3\nJMP 0x0040554b\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004059d4\nTEST R8B,R8B\nJNZ 0x00405dc8\nCMP EBX,0x2\nJNZ 0x00405678\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00405678\nCMP R12,RSI\nJNC 0x00405653\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00405662\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00405671\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00405682\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00405b48\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00405b48\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00405b48\nCMP RCX,RSI\nJNC 0x004056bc\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x004056cb\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00405556\nJMP 0x00405c20\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00405549\nJMP 0x0040572a\nMOV DL,0x74\nJMP 0x00405712\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00405549\nJMP 0x0040572a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00405549\nJMP 0x0040572a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00405dc8\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00405549\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x00405c6e\nJMP 0x00405dc8\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00405549\nTEST R8B,R8B\nJNZ 0x00405dc8\nCMP R12,RSI\nJNC 0x0040575a\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00405769\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00405778\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00405549\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x00405b5b\nCMP EBX,0x2\nJNZ 0x00405549\nTEST R8B,R8B\nJZ 0x00405549\nJMP 0x00405dc8\nCMP EBX,0x2\nJNZ 0x004059f4\nTEST R8B,R8B\nJNZ 0x00405dc8\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00405cc6\nJMP 0x00405ce9\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00405a15\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401a80\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00405c08\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00405c08\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x004058f2\nJMP 0x004058c0\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x004058a9\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x004058a6\nCMP R12,RSI\nJNC 0x0040588b\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x0040589a\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x004058e0\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x004058e0\nTEST BPL,0x1\nJZ 0x00405983\nCMP R12,RSI\nJNC 0x004058d4\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00405983\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x004058c0\nTEST R8B,R8B\nJNZ 0x00405dc8\nCMP EBX,0x2\nJNZ 0x0040593a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x0040593a\nCMP R12,RSI\nJNC 0x00405912\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00405921\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00405930\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00405944\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040595b\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00405975\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00405870\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00405cc6\nJMP 0x00405ce9\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x0040554b\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x0040554b\nJMP 0x00405dc8\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00405cf5\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00405556\nJMP 0x00405c20\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00405712\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00405cc6\nJMP 0x00405ce9\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00405a37\nMOV RDI,R10\nCALL 0x00401770\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x004017a0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00405d0f\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00405d07\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00405d16\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x00405afe\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00405af6\nBT RDI,RDX\nJC 0x00405e62\nINC RCX\nCMP RCX,R14\nJC 0x00405ae0\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401a70\nTEST EAX,EAX\nJNZ 0x00405b13\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00401a60\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00405a55\nJMP 0x00405d59\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00405556\nJMP 0x00405c20\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00405549\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00405549\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00405549\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x0040554b\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00405d92\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00405dc8\nCMP R12,RSI\nJNC 0x00405bbe\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00405bd1\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00405be0\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x00405bef\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00405556\nJMP 0x00405c20\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00405556\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00405c60\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00405c65\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00405cc0\nJMP 0x00405c65\nTEST BPL,BPL\nJZ 0x00405cc0\nTEST R8B,R8B\nJNZ 0x00405dc8\nCMP EBX,0x2\nJNZ 0x00405ca8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00405ca8\nCMP R12,RSI\nJNC 0x00405c83\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00405c92\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00405ca1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00405cb2\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00405cf2\nJMP 0x00405cee\nTEST DIL,0x1\nJZ 0x00405ce9\nAND AL,0x1\nJNZ 0x00405ce9\nCMP R12,RSI\nJNC 0x00405cd4\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00405ce3\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00405cf2\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00405db0\nJMP 0x004054d0\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00405d54\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x00405d4c\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00405d88\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x00405d2a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00405d59\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00405818\nJMP 0x00405836\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00405d59\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00405556\nJMP 0x00405c20\nCMP R13,R11\nJNZ 0x004054db\nTEST R8B,R8B\nJZ 0x00405e22\nCMP EBX,0x2\nJNZ 0x00405e22\nTEST R12,R12\nJNZ 0x00405e22\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00405260\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00405e56\nTEST R8B,R8B\nJNZ 0x00405e56\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00405e56\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00405e49\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00405e40\nCMP R12,RSI\nJNC 0x00405e0d\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x00405e0d\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00405dc8\nTEST RSI,RSI\nJZ 0x00405e79\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x409d94\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x0040541c\nCALL 0x00401660\n'
p949
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 d2 c4 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 70 98 40 00\nbf 96 9d 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf 98 9d 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 13 c4 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 94 9d 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 98 9d 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 98 9d 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 94 9d 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 73 c2 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd c8 98 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 b7 c2 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 97 c2 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 41 bd ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 23 bd ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 69 bf ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 32 bf ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 94 9d 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 c6 b7 ff ff\n'
p950
S'.text:0000000000405260\n.text:0000000000405261\n.text:0000000000405263\n.text:0000000000405265\n.text:0000000000405267\n.text:0000000000405269\n.text:000000000040526a\n.text:0000000000405271\n.text:0000000000405274\n.text:0000000000405277\n.text:000000000040527a\n.text:000000000040527f\n.text:0000000000405284\n.text:0000000000405289\n.text:000000000040528e\n.text:0000000000405296\n.text:000000000040529a\n.text:00000000004052a0\n.text:00000000004052a8\n.text:00000000004052ad\n.text:00000000004052b5\n.text:00000000004052ba\n.text:00000000004052be\n.text:00000000004052c0\n.text:00000000004052c3\n.text:00000000004052c6\n.text:00000000004052c9\n.text:00000000004052ce\n.text:00000000004052d1\n.text:00000000004052d4\n.text:00000000004052d7\n.text:00000000004052da\n.text:00000000004052dc\n.text:00000000004052df\n.text:00000000004052e4\n.text:00000000004052e7\n.text:00000000004052ec\n.text:00000000004052f3\n.text:00000000004052f8\n.text:00000000004052fb\n.text:0000000000405300\n.text:0000000000405305\n.text:000000000040530a\n.text:000000000040530d\n.text:0000000000405312\n.text:0000000000405317\n.text:000000000040531c\n.text:000000000040531e\n.text:0000000000405320\n.text:0000000000405325\n.text:0000000000405327\n.text:000000000040532a\n.text:000000000040532c\n.text:000000000040532e\n.text:0000000000405330\n.text:0000000000405333\n.text:0000000000405335\n.text:000000000040533a\n.text:000000000040533e\n.text:0000000000405344\n.text:0000000000405347\n.text:0000000000405349\n.text:000000000040534b\n.text:000000000040534d\n.text:0000000000405350\n.text:0000000000405355\n.text:0000000000405358\n.text:000000000040535d\n.text:0000000000405362\n.text:0000000000405365\n.text:0000000000405368\n.text:000000000040536b\n.text:000000000040536e\n.text:0000000000405373\n.text:0000000000405376\n.text:0000000000405379\n.text:000000000040537e\n.text:0000000000405381\n.text:0000000000405383\n.text:0000000000405386\n.text:0000000000405388\n.text:000000000040538a\n.text:000000000040538d\n.text:0000000000405392\n.text:0000000000405397\n.text:000000000040539c\n.text:000000000040539f\n.text:00000000004053a5\n.text:00000000004053a7\n.text:00000000004053aa\n.text:00000000004053ad\n.text:00000000004053b0\n.text:00000000004053b2\n.text:00000000004053b4\n.text:00000000004053b7\n.text:00000000004053ba\n.text:00000000004053bf\n.text:00000000004053c2\n.text:00000000004053c4\n.text:00000000004053c7\n.text:00000000004053c9\n.text:00000000004053ce\n.text:00000000004053d1\n.text:00000000004053d6\n.text:00000000004053dc\n.text:00000000004053e2\n.text:00000000004053e4\n.text:00000000004053e9\n.text:00000000004053ef\n.text:00000000004053f2\n.text:00000000004053f5\n.text:00000000004053f8\n.text:00000000004053fa\n.text:00000000004053ff\n.text:0000000000405402\n.text:0000000000405408\n.text:000000000040540d\n.text:0000000000405413\n.text:0000000000405416\n.text:0000000000405419\n.text:000000000040541c\n.text:0000000000405424\n.text:0000000000405426\n.text:0000000000405428\n.text:000000000040542b\n.text:000000000040542f\n.text:0000000000405431\n.text:0000000000405434\n.text:0000000000405438\n.text:000000000040543a\n.text:000000000040543d\n.text:0000000000405440\n.text:0000000000405443\n.text:0000000000405445\n.text:0000000000405449\n.text:000000000040544b\n.text:000000000040544f\n.text:0000000000405452\n.text:0000000000405455\n.text:0000000000405458\n.text:000000000040545a\n.text:000000000040545e\n.text:0000000000405467\n.text:000000000040546a\n.text:000000000040546c\n.text:0000000000405470\n.text:0000000000405472\n.text:0000000000405476\n.text:0000000000405478\n.text:000000000040547b\n.text:000000000040547f\n.text:0000000000405481\n.text:0000000000405484\n.text:0000000000405488\n.text:000000000040548d\n.text:0000000000405490\n.text:0000000000405494\n.text:000000000040549c\n.text:000000000040549f\n.text:00000000004054a2\n.text:00000000004054a4\n.text:00000000004054a8\n.text:00000000004054ab\n.text:00000000004054ad\n.text:00000000004054b2\n.text:00000000004054b6\n.text:00000000004054bb\n.text:00000000004054c0\n.text:00000000004054c4\n.text:00000000004054ca\n.text:00000000004054d0\n.text:00000000004054d5\n.text:00000000004054db\n.text:00000000004054e0\n.text:00000000004054e2\n.text:00000000004054e7\n.text:00000000004054eb\n.text:00000000004054ed\n.text:00000000004054f1\n.text:00000000004054f3\n.text:00000000004054f5\n.text:00000000004054f8\n.text:00000000004054fd\n.text:00000000004054ff\n.text:0000000000405504\n.text:0000000000405509\n.text:000000000040550d\n.text:0000000000405512\n.text:0000000000405517\n.text:000000000040551a\n.text:000000000040551d\n.text:000000000040551f\n.text:0000000000405521\n.text:0000000000405526\n.text:000000000040552a\n.text:0000000000405530\n.text:0000000000405532\n.text:0000000000405534\n.text:0000000000405536\n.text:000000000040553e\n.text:0000000000405543\n.text:0000000000405549\n.text:000000000040554b\n.text:0000000000405550\n.text:0000000000405556\n.text:000000000040555f\n.text:0000000000405565\n.text:0000000000405570\n.text:0000000000405572\n.text:0000000000405575\n.text:0000000000405579\n.text:0000000000405581\n.text:0000000000405584\n.text:0000000000405589\n.text:000000000040558b\n.text:000000000040558e\n.text:0000000000405590\n.text:0000000000405595\n.text:0000000000405598\n.text:000000000040559d\n.text:00000000004055a0\n.text:00000000004055a5\n.text:00000000004055a9\n.text:00000000004055ae\n.text:00000000004055b0\n.text:00000000004055b2\n.text:00000000004055b8\n.text:00000000004055bd\n.text:00000000004055c2\n.text:00000000004055c5\n.text:00000000004055ca\n.text:00000000004055ce\n.text:00000000004055d3\n.text:00000000004055d8\n.text:00000000004055da\n.text:00000000004055dc\n.text:00000000004055e1\n.text:00000000004055e3\n.text:00000000004055e6\n.text:00000000004055ec\n.text:00000000004055ef\n.text:00000000004055f5\n.text:00000000004055f8\n.text:00000000004055fe\n.text:0000000000405603\n.text:0000000000405607\n.text:000000000040560d\n.text:0000000000405610\n.text:0000000000405613\n.text:0000000000405617\n.text:000000000040561a\n.text:000000000040561c\n.text:000000000040561f\n.text:0000000000405625\n.text:000000000040562a\n.text:000000000040562f\n.text:0000000000405635\n.text:0000000000405638\n.text:000000000040563e\n.text:0000000000405641\n.text:0000000000405643\n.text:0000000000405645\n.text:0000000000405647\n.text:0000000000405649\n.text:000000000040564c\n.text:000000000040564e\n.text:0000000000405653\n.text:0000000000405658\n.text:000000000040565b\n.text:000000000040565d\n.text:0000000000405662\n.text:0000000000405667\n.text:000000000040566a\n.text:000000000040566c\n.text:0000000000405671\n.text:0000000000405675\n.text:0000000000405678\n.text:000000000040567b\n.text:000000000040567d\n.text:0000000000405682\n.text:0000000000405687\n.text:0000000000405689\n.text:000000000040568c\n.text:000000000040568f\n.text:0000000000405695\n.text:0000000000405699\n.text:000000000040569c\n.text:00000000004056a2\n.text:00000000004056a6\n.text:00000000004056a9\n.text:00000000004056ac\n.text:00000000004056b2\n.text:00000000004056b5\n.text:00000000004056b7\n.text:00000000004056bc\n.text:00000000004056c1\n.text:00000000004056c4\n.text:00000000004056c6\n.text:00000000004056cb\n.text:00000000004056cf\n.text:00000000004056d4\n.text:00000000004056da\n.text:00000000004056df\n.text:00000000004056e1\n.text:00000000004056e6\n.text:00000000004056ec\n.text:00000000004056ee\n.text:00000000004056f0\n.text:00000000004056f2\n.text:00000000004056f4\n.text:00000000004056f9\n.text:00000000004056ff\n.text:0000000000405701\n.text:0000000000405703\n.text:0000000000405708\n.text:000000000040570e\n.text:0000000000405710\n.text:0000000000405712\n.text:0000000000405717\n.text:0000000000405719\n.text:000000000040571f\n.text:0000000000405724\n.text:000000000040572a\n.text:000000000040572d\n.text:0000000000405730\n.text:0000000000405736\n.text:000000000040573b\n.text:000000000040573e\n.text:0000000000405741\n.text:0000000000405747\n.text:000000000040574a\n.text:0000000000405750\n.text:0000000000405753\n.text:0000000000405755\n.text:000000000040575a\n.text:000000000040575f\n.text:0000000000405762\n.text:0000000000405764\n.text:0000000000405769\n.text:000000000040576e\n.text:0000000000405771\n.text:0000000000405773\n.text:0000000000405778\n.text:000000000040577c\n.text:000000000040577e\n.text:0000000000405783\n.text:0000000000405786\n.text:0000000000405789\n.text:000000000040578f\n.text:0000000000405792\n.text:0000000000405798\n.text:000000000040579b\n.text:00000000004057a1\n.text:00000000004057a6\n.text:00000000004057a9\n.text:00000000004057af\n.text:00000000004057b2\n.text:00000000004057b8\n.text:00000000004057bb\n.text:00000000004057bd\n.text:00000000004057c1\n.text:00000000004057c7\n.text:00000000004057cc\n.text:00000000004057d0\n.text:00000000004057d9\n.text:00000000004057df\n.text:00000000004057e4\n.text:00000000004057e9\n.text:00000000004057ee\n.text:00000000004057f1\n.text:00000000004057f6\n.text:00000000004057f9\n.text:00000000004057fc\n.text:0000000000405801\n.text:0000000000405806\n.text:000000000040580a\n.text:000000000040580f\n.text:0000000000405814\n.text:0000000000405818\n.text:000000000040581a\n.text:000000000040581f\n.text:0000000000405825\n.text:0000000000405828\n.text:000000000040582a\n.text:000000000040582d\n.text:0000000000405830\n.text:0000000000405836\n.text:000000000040583b\n.text:000000000040583e\n.text:0000000000405841\n.text:0000000000405844\n.text:0000000000405847\n.text:0000000000405849\n.text:000000000040584d\n.text:000000000040584f\n.text:0000000000405854\n.text:0000000000405859\n.text:000000000040585f\n.text:0000000000405870\n.text:0000000000405875\n.text:0000000000405877\n.text:000000000040587a\n.text:000000000040587c\n.text:000000000040587f\n.text:0000000000405881\n.text:0000000000405884\n.text:0000000000405886\n.text:000000000040588b\n.text:0000000000405890\n.text:0000000000405893\n.text:0000000000405895\n.text:000000000040589a\n.text:000000000040589e\n.text:00000000004058a6\n.text:00000000004058a9\n.text:00000000004058ac\n.text:00000000004058ae\n.text:00000000004058b2\n.text:00000000004058c0\n.text:00000000004058c4\n.text:00000000004058ca\n.text:00000000004058cd\n.text:00000000004058cf\n.text:00000000004058d4\n.text:00000000004058d7\n.text:00000000004058d9\n.text:00000000004058e0\n.text:00000000004058e3\n.text:00000000004058e8\n.text:00000000004058eb\n.text:00000000004058f0\n.text:00000000004058f2\n.text:00000000004058f5\n.text:00000000004058fb\n.text:00000000004058fe\n.text:0000000000405900\n.text:0000000000405904\n.text:0000000000405906\n.text:0000000000405908\n.text:000000000040590b\n.text:000000000040590d\n.text:0000000000405912\n.text:0000000000405917\n.text:000000000040591a\n.text:000000000040591c\n.text:0000000000405921\n.text:0000000000405926\n.text:0000000000405929\n.text:000000000040592b\n.text:0000000000405930\n.text:0000000000405934\n.text:0000000000405936\n.text:000000000040593a\n.text:000000000040593d\n.text:000000000040593f\n.text:0000000000405944\n.text:0000000000405949\n.text:000000000040594c\n.text:000000000040594e\n.text:0000000000405951\n.text:0000000000405954\n.text:0000000000405957\n.text:000000000040595b\n.text:0000000000405960\n.text:0000000000405963\n.text:0000000000405965\n.text:0000000000405968\n.text:000000000040596b\n.text:000000000040596e\n.text:0000000000405971\n.text:0000000000405975\n.text:0000000000405979\n.text:000000000040597d\n.text:0000000000405981\n.text:0000000000405983\n.text:0000000000405987\n.text:000000000040598a\n.text:0000000000405990\n.text:0000000000405994\n.text:0000000000405998\n.text:000000000040599e\n.text:00000000004059a3\n.text:00000000004059a6\n.text:00000000004059a9\n.text:00000000004059ae\n.text:00000000004059b1\n.text:00000000004059b3\n.text:00000000004059b6\n.text:00000000004059bd\n.text:00000000004059c3\n.text:00000000004059c5\n.text:00000000004059c9\n.text:00000000004059cf\n.text:00000000004059d4\n.text:00000000004059d9\n.text:00000000004059df\n.text:00000000004059e2\n.text:00000000004059e4\n.text:00000000004059e9\n.text:00000000004059ef\n.text:00000000004059f4\n.text:00000000004059f6\n.text:00000000004059fb\n.text:0000000000405a01\n.text:0000000000405a03\n.text:0000000000405a06\n.text:0000000000405a0a\n.text:0000000000405a10\n.text:0000000000405a15\n.text:0000000000405a21\n.text:0000000000405a25\n.text:0000000000405a27\n.text:0000000000405a2a\n.text:0000000000405a2f\n.text:0000000000405a34\n.text:0000000000405a37\n.text:0000000000405a3b\n.text:0000000000405a40\n.text:0000000000405a42\n.text:0000000000405a46\n.text:0000000000405a48\n.text:0000000000405a50\n.text:0000000000405a55\n.text:0000000000405a5a\n.text:0000000000405a5e\n.text:0000000000405a62\n.text:0000000000405a6a\n.text:0000000000405a6d\n.text:0000000000405a72\n.text:0000000000405a75\n.text:0000000000405a78\n.text:0000000000405a7d\n.text:0000000000405a80\n.text:0000000000405a83\n.text:0000000000405a89\n.text:0000000000405a8d\n.text:0000000000405a97\n.text:0000000000405a9d\n.text:0000000000405aa1\n.text:0000000000405aa6\n.text:0000000000405aac\n.text:0000000000405ab0\n.text:0000000000405ab3\n.text:0000000000405ab7\n.text:0000000000405ab9\n.text:0000000000405abe\n.text:0000000000405ac3\n.text:0000000000405ac7\n.text:0000000000405ac9\n.text:0000000000405ace\n.text:0000000000405ad3\n.text:0000000000405ad7\n.text:0000000000405adc\n.text:0000000000405ae0\n.text:0000000000405ae4\n.text:0000000000405ae7\n.text:0000000000405aea\n.text:0000000000405aec\n.text:0000000000405af0\n.text:0000000000405af6\n.text:0000000000405af9\n.text:0000000000405afc\n.text:0000000000405afe\n.text:0000000000405b02\n.text:0000000000405b07\n.text:0000000000405b09\n.text:0000000000405b0b\n.text:0000000000405b13\n.text:0000000000405b18\n.text:0000000000405b1b\n.text:0000000000405b23\n.text:0000000000405b26\n.text:0000000000405b29\n.text:0000000000405b2e\n.text:0000000000405b31\n.text:0000000000405b33\n.text:0000000000405b38\n.text:0000000000405b3d\n.text:0000000000405b43\n.text:0000000000405b48\n.text:0000000000405b4b\n.text:0000000000405b50\n.text:0000000000405b56\n.text:0000000000405b5b\n.text:0000000000405b60\n.text:0000000000405b66\n.text:0000000000405b6a\n.text:0000000000405b6d\n.text:0000000000405b73\n.text:0000000000405b79\n.text:0000000000405b7f\n.text:0000000000405b84\n.text:0000000000405b86\n.text:0000000000405b89\n.text:0000000000405b8f\n.text:0000000000405b93\n.text:0000000000405b95\n.text:0000000000405b9f\n.text:0000000000405ba3\n.text:0000000000405ba9\n.text:0000000000405bac\n.text:0000000000405bae\n.text:0000000000405bb4\n.text:0000000000405bb7\n.text:0000000000405bb9\n.text:0000000000405bbe\n.text:0000000000405bc3\n.text:0000000000405bc6\n.text:0000000000405bca\n.text:0000000000405bcc\n.text:0000000000405bd1\n.text:0000000000405bd6\n.text:0000000000405bd9\n.text:0000000000405bdb\n.text:0000000000405be0\n.text:0000000000405be5\n.text:0000000000405be8\n.text:0000000000405bea\n.text:0000000000405bef\n.text:0000000000405bf3\n.text:0000000000405bf5\n.text:0000000000405bf8\n.text:0000000000405bfb\n.text:0000000000405c00\n.text:0000000000405c06\n.text:0000000000405c08\n.text:0000000000405c0d\n.text:0000000000405c12\n.text:0000000000405c18\n.text:0000000000405c20\n.text:0000000000405c25\n.text:0000000000405c27\n.text:0000000000405c2c\n.text:0000000000405c2f\n.text:0000000000405c31\n.text:0000000000405c34\n.text:0000000000405c36\n.text:0000000000405c39\n.text:0000000000405c3c\n.text:0000000000405c3f\n.text:0000000000405c41\n.text:0000000000405c49\n.text:0000000000405c4c\n.text:0000000000405c4e\n.text:0000000000405c50\n.text:0000000000405c60\n.text:0000000000405c63\n.text:0000000000405c65\n.text:0000000000405c68\n.text:0000000000405c6e\n.text:0000000000405c71\n.text:0000000000405c73\n.text:0000000000405c75\n.text:0000000000405c77\n.text:0000000000405c79\n.text:0000000000405c7c\n.text:0000000000405c7e\n.text:0000000000405c83\n.text:0000000000405c88\n.text:0000000000405c8b\n.text:0000000000405c8d\n.text:0000000000405c92\n.text:0000000000405c97\n.text:0000000000405c9a\n.text:0000000000405c9c\n.text:0000000000405ca1\n.text:0000000000405ca5\n.text:0000000000405ca8\n.text:0000000000405cab\n.text:0000000000405cad\n.text:0000000000405cb2\n.text:0000000000405cb5\n.text:0000000000405cb8\n.text:0000000000405cba\n.text:0000000000405cc0\n.text:0000000000405cc4\n.text:0000000000405cc6\n.text:0000000000405cc8\n.text:0000000000405cca\n.text:0000000000405ccd\n.text:0000000000405ccf\n.text:0000000000405cd4\n.text:0000000000405cd9\n.text:0000000000405cdc\n.text:0000000000405cde\n.text:0000000000405ce3\n.text:0000000000405ce7\n.text:0000000000405ce9\n.text:0000000000405cec\n.text:0000000000405cee\n.text:0000000000405cf2\n.text:0000000000405cf5\n.text:0000000000405cf8\n.text:0000000000405cfc\n.text:0000000000405d02\n.text:0000000000405d07\n.text:0000000000405d0f\n.text:0000000000405d14\n.text:0000000000405d16\n.text:0000000000405d1e\n.text:0000000000405d23\n.text:0000000000405d25\n.text:0000000000405d2a\n.text:0000000000405d2f\n.text:0000000000405d33\n.text:0000000000405d35\n.text:0000000000405d3a\n.text:0000000000405d3d\n.text:0000000000405d40\n.text:0000000000405d42\n.text:0000000000405d4a\n.text:0000000000405d4c\n.text:0000000000405d54\n.text:0000000000405d59\n.text:0000000000405d5d\n.text:0000000000405d62\n.text:0000000000405d67\n.text:0000000000405d6b\n.text:0000000000405d70\n.text:0000000000405d75\n.text:0000000000405d79\n.text:0000000000405d7d\n.text:0000000000405d83\n.text:0000000000405d88\n.text:0000000000405d90\n.text:0000000000405d92\n.text:0000000000405d94\n.text:0000000000405d98\n.text:0000000000405d9d\n.text:0000000000405da3\n.text:0000000000405db0\n.text:0000000000405db3\n.text:0000000000405db9\n.text:0000000000405dbc\n.text:0000000000405dbe\n.text:0000000000405dc1\n.text:0000000000405dc3\n.text:0000000000405dc6\n.text:0000000000405dc8\n.text:0000000000405dd0\n.text:0000000000405dd6\n.text:0000000000405dda\n.text:0000000000405ddd\n.text:0000000000405de1\n.text:0000000000405de6\n.text:0000000000405dea\n.text:0000000000405dee\n.text:0000000000405df1\n.text:0000000000405df4\n.text:0000000000405df7\n.text:0000000000405dfb\n.text:0000000000405dff\n.text:0000000000405e01\n.text:0000000000405e06\n.text:0000000000405e0a\n.text:0000000000405e0d\n.text:0000000000405e10\n.text:0000000000405e17\n.text:0000000000405e18\n.text:0000000000405e1a\n.text:0000000000405e1c\n.text:0000000000405e1e\n.text:0000000000405e20\n.text:0000000000405e21\n.text:0000000000405e22\n.text:0000000000405e2a\n.text:0000000000405e2d\n.text:0000000000405e2f\n.text:0000000000405e32\n.text:0000000000405e34\n.text:0000000000405e36\n.text:0000000000405e38\n.text:0000000000405e3a\n.text:0000000000405e3d\n.text:0000000000405e40\n.text:0000000000405e43\n.text:0000000000405e45\n.text:0000000000405e49\n.text:0000000000405e4c\n.text:0000000000405e4f\n.text:0000000000405e52\n.text:0000000000405e54\n.text:0000000000405e56\n.text:0000000000405e59\n.text:0000000000405e5b\n.text:0000000000405e60\n.text:0000000000405e62\n.text:0000000000405e67\n.text:0000000000405e6c\n.text:0000000000405e6f\n.text:0000000000405e71\n.text:0000000000405e76\n.text:0000000000405e79\n.text:0000000000405e7e\n.text:0000000000405e81\n.text:0000000000405e87\n.text:0000000000405e8d\n.text:0000000000405e90\n.text:0000000000405e95\n'
p951
tp952
sS'rotr_sz'
p953
(S'\n__stdcall rotr_sz(size_t x)\n'
p954
V\u000asize_t rotr_sz(size_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x >> bVar1 | x << 0x40 - bVar1;\u000a}\u000a\u000a
p955
S'MOV ECX,ESI\nROR RDI,CL\nMOV RAX,RDI\nRET\n'
p956
S'89 f1\n48 d3 cf\n48 89 f8\nc3\n'
p957
S'.text:0000000000407950\n.text:0000000000407952\n.text:0000000000407955\n.text:0000000000407958\n'
p958
tp959
sS'set_quoting_style'
p960
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p961
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p962
S'TEST RDI,RDI\nMOV EAX,0x60d370\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p963
S'48 85 ff\nb8 70 d3 60 00\n48 0f 45 c7\n89 30\nc3\n'
p964
S'.text:0000000000405140\n.text:0000000000405143\n.text:0000000000405148\n.text:000000000040514c\n.text:000000000040514e\n'
p965
tp966
sS'hash_get_entries'
p967
(S'\n__stdcall hash_get_entries(Hash_table * table, void * * buffer, size_t buffer_size)\n'
p968
V\u000asize_t hash_get_entries(Hash_table *table,void **buffer,size_t buffer_size)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  ulong uVar2;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar3 = table->bucket;\u000a  if (table->bucket_limit <= phVar3) {\u000a    return 0;\u000a  }\u000a  uVar2 = 0;\u000a  do {\u000a    phVar1 = phVar3;\u000a    if (phVar3->data != (void *)0x0) {\u000a      while (phVar1 != (hash_entry *)0x0) {\u000a        if (buffer_size <= uVar2) {\u000a          return uVar2;\u000a        }\u000a        buffer[uVar2] = phVar1->data;\u000a        uVar2 = uVar2 + 1;\u000a        phVar1 = phVar1->next;\u000a      }\u000a    }\u000a    phVar3 = phVar3 + 1;\u000a  } while (phVar3 < table->bucket_limit);\u000a  return uVar2;\u000a}\u000a\u000a
p969
S'MOV R8,qword ptr [RDI]\nCMP R8,qword ptr [RDI + 0x8]\nJNC 0x00404323\nXOR EAX,EAX\nCMP qword ptr [R8],0x0\nJZ 0x00404318\nTEST R8,R8\nJZ 0x00404318\nMOV R9,R8\nNOP dword ptr [RAX]\nCMP RAX,RDX\nJNC 0x00404322\nMOV RCX,qword ptr [R9]\nMOV qword ptr [RSI + RAX*0x8],RCX\nINC RAX\nMOV R9,qword ptr [R9 + 0x8]\nTEST R9,R9\nJNZ 0x00404300\nADD R8,0x10\nCMP R8,qword ptr [RDI + 0x8]\nJC 0x004042eb\nRET\nXOR EAX,EAX\nRET\n'
p970
S'4c 8b 07\n4c 3b 47 08\n73 3a\n31 c0\n49 83 38 00\n74 27\n4d 85 c0\n74 22\n4d 89 c1\n0f 1f 80 00 00 00 00\n48 39 d0\n73 1d\n49 8b 09\n48 89 0c c6\n48 ff c0\n4d 8b 49 08\n4d 85 c9\n75 e8\n49 83 c0 10\n4c 3b 47 08\n72 c9\nc3\n31 c0\nc3\n'
p971
S'.text:00000000004042e0\n.text:00000000004042e3\n.text:00000000004042e7\n.text:00000000004042e9\n.text:00000000004042eb\n.text:00000000004042ef\n.text:00000000004042f1\n.text:00000000004042f4\n.text:00000000004042f6\n.text:00000000004042f9\n.text:0000000000404300\n.text:0000000000404303\n.text:0000000000404305\n.text:0000000000404308\n.text:000000000040430c\n.text:000000000040430f\n.text:0000000000404313\n.text:0000000000404316\n.text:0000000000404318\n.text:000000000040431c\n.text:0000000000404320\n.text:0000000000404322\n.text:0000000000404323\n.text:0000000000404325\n'
p972
tp973
sS'textdomain'
p974
(S'\n__stdcall textdomain()\n'
p975
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_0060d080)();\u000a  return;\u000a}\u000a\u000a
p976
S'JMP qword ptr [0x0060d080]\n'
p977
S'ff 25 7a b9 20 00\n'
p978
S'.plt:0000000000401700\n'
p979
tp980
sS'xmemdup'
p981
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p982
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p983
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00406f80\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x004018b0\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p984
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 cc a7 ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p985
S'.text:00000000004070c0\n.text:00000000004070c2\n.text:00000000004070c4\n.text:00000000004070c5\n.text:00000000004070c8\n.text:00000000004070cb\n.text:00000000004070ce\n.text:00000000004070d3\n.text:00000000004070d6\n.text:00000000004070d9\n.text:00000000004070dc\n.text:00000000004070df\n.text:00000000004070e4\n.text:00000000004070e7\n.text:00000000004070e8\n.text:00000000004070ea\n.text:00000000004070ec\n'
p986
tp987
sS'get_quoting_style'
p988
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p989
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p990
S'TEST RDI,RDI\nMOV EAX,0x60d370\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p991
S'48 85 ff\nb8 70 d3 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p992
S'.text:0000000000405130\n.text:0000000000405133\n.text:0000000000405138\n.text:000000000040513c\n.text:000000000040513e\n'
p993
tp994
sS'ferror_unlocked'
p995
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p996
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_0060d130)();\u000a  return iVar1;\u000a}\u000a\u000a
p997
S'JMP qword ptr [0x0060d130]\n'
p998
S'ff 25 ca b8 20 00\n'
p999
S'.plt:0000000000401860\n'
p1000
tp1001
sS'exit'
p1002
(S'\n__stdcall exit(int __status)\n'
p1003
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_0060d218)();\u000a  return;\u000a}\u000a\u000a
p1004
S'JMP qword ptr [0x0060d218]\n'
p1005
S'ff 25 e2 b7 20 00\n'
p1006
S'.plt:0000000000401a30\n'
p1007
tp1008
sS'safe_hasher'
p1009
(S'\n__stdcall safe_hasher(Hash_table * table, void * key)\n'
p1010
V\u000ahash_entry * safe_hasher(Hash_table *table,void *key)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*table->hasher)(key,table->n_buckets);\u000a  if (sVar1 < table->n_buckets) {\u000a    return table->bucket + sVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1011
S'PUSH RBX\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nMOV RDI,RSI\nMOV RSI,RAX\nCALL qword ptr [RBX + 0x30]\nCMP RAX,qword ptr [RBX + 0x10]\nJNC 0x00404210\nSHL RAX,0x4\nADD RAX,qword ptr [RBX]\nPOP RBX\nRET\nCALL 0x00401660\n'
p1012
S'53\n48 89 fb\n48 8b 43 10\n48 89 f7\n48 89 c6\nff 53 30\n48 3b 43 10\n73 09\n48 c1 e0 04\n48 03 03\n5b\nc3\ne8 4b d4 ff ff\n'
p1013
S'.text:00000000004041f0\n.text:00000000004041f1\n.text:00000000004041f4\n.text:00000000004041f8\n.text:00000000004041fb\n.text:00000000004041fe\n.text:0000000000404201\n.text:0000000000404205\n.text:0000000000404207\n.text:000000000040420b\n.text:000000000040420e\n.text:000000000040420f\n.text:0000000000404210\n'
p1014
tp1015
sS'locale_charset'
p1016
(S'\n__stdcall locale_charset()\n'
p1017
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_00407c5d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_00407c5d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p1018
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401930\nTEST RAX,RAX\nMOV R14D,0x409ee9\nCMOVNZ R14,RAX\nCALL 0x00407c70\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00407c35\nJMP 0x00407c5d\nMOV RDI,RBX\nCALL 0x00401770\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00401770\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x00407c5d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00401880\nTEST EAX,EAX\nJZ 0x00407c50\nCMP BPL,0x2a\nJNZ 0x00407c10\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00407c10\nMOV RDI,RBX\nCALL 0x00401770\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x40a5a8\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1019
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 42 9d ff ff\n48 85 c0\n41 be e9 9e 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 58 9b ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 4a 9b ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 40 9c ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 18 9b ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 a8 a5 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p1020
S'.text:0000000000407be0\n.text:0000000000407be1\n.text:0000000000407be3\n.text:0000000000407be4\n.text:0000000000407be9\n.text:0000000000407bee\n.text:0000000000407bf1\n.text:0000000000407bf7\n.text:0000000000407bfb\n.text:0000000000407c00\n.text:0000000000407c03\n.text:0000000000407c06\n.text:0000000000407c09\n.text:0000000000407c0b\n.text:0000000000407c10\n.text:0000000000407c13\n.text:0000000000407c18\n.text:0000000000407c1c\n.text:0000000000407c21\n.text:0000000000407c26\n.text:0000000000407c2b\n.text:0000000000407c30\n.text:0000000000407c33\n.text:0000000000407c35\n.text:0000000000407c38\n.text:0000000000407c3b\n.text:0000000000407c40\n.text:0000000000407c42\n.text:0000000000407c44\n.text:0000000000407c48\n.text:0000000000407c4a\n.text:0000000000407c4e\n.text:0000000000407c50\n.text:0000000000407c53\n.text:0000000000407c58\n.text:0000000000407c5d\n.text:0000000000407c61\n.text:0000000000407c66\n.text:0000000000407c6a\n.text:0000000000407c6b\n.text:0000000000407c6d\n.text:0000000000407c6e\n'
p1021
tp1022
sS'set_program_name'
p1023
(S'\n__stdcall set_program_name(char * argv0)\n'
p1024
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p1025
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x004050c1\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x004017c0\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x004050ab\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x409858\nMOV EDX,0x7\nCALL 0x00401690\nTEST EAX,EAX\nJNZ 0x004050ab\nMOV ESI,0x409860\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401690\nTEST EAX,EAX\nJNZ 0x004050a8\nADD R14,0x3\nMOV qword ptr [0x0060d2e0],R14\nMOV RBX,R14\nMOV qword ptr [0x0060d360],RBX\nMOV qword ptr [0x0060d308],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x0060d320]\nMOV EDI,0x409820\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401a40\nCALL 0x00401660\n'
p1026
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 67 c7 ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 58 98 40 00\nba 07 00 00 00\ne8 0d c6 ff ff\n85 c0\n75 24\nbe 60 98 40 00\nba 03 00 00 00\n4c 89 f7\ne8 f7 c5 ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 38 82 20 00\n4c 89 f3\n48 89 1d ae 82 20 00\n48 89 1d 4f 82 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 58 82 20 00\nbf 20 98 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 64 c9 ff ff\ne8 7f c5 ff ff\n'
p1027
S'.text:0000000000405040\n.text:0000000000405042\n.text:0000000000405043\n.text:0000000000405044\n.text:0000000000405047\n.text:000000000040504a\n.text:000000000040504c\n.text:0000000000405051\n.text:0000000000405054\n.text:0000000000405059\n.text:000000000040505c\n.text:0000000000405060\n.text:0000000000405064\n.text:0000000000405067\n.text:000000000040506a\n.text:000000000040506e\n.text:0000000000405070\n.text:0000000000405074\n.text:0000000000405079\n.text:000000000040507e\n.text:0000000000405083\n.text:0000000000405085\n.text:0000000000405087\n.text:000000000040508c\n.text:0000000000405091\n.text:0000000000405094\n.text:0000000000405099\n.text:000000000040509b\n.text:000000000040509d\n.text:00000000004050a1\n.text:00000000004050a8\n.text:00000000004050ab\n.text:00000000004050b2\n.text:00000000004050b9\n.text:00000000004050bd\n.text:00000000004050be\n.text:00000000004050c0\n.text:00000000004050c1\n.text:00000000004050c8\n.text:00000000004050cd\n.text:00000000004050d2\n.text:00000000004050d7\n.text:00000000004050dc\n'
p1028
tp1029
sS'strspn'
p1030
(S'\n__stdcall strspn(char * __s, char * __accept)\n'
p1031
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strspn(char *__s,char *__accept)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strspn_0060d110)();\u000a  return sVar1;\u000a}\u000a\u000a
p1032
S'JMP qword ptr [0x0060d110]\n'
p1033
S'ff 25 ea b8 20 00\n'
p1034
S'.plt:0000000000401820\n'
p1035
tp1036
sS'hash_delete'
p1037
(S'\n__stdcall hash_delete(Hash_table * table, void * entry)\n'
p1038
V\u000avoid * hash_delete(Hash_table *table,void *entry)\u000a\u000a{\u000a  ulong uVar1;\u000a  Hash_tuning *pHVar2;\u000a  hash_entry *phVar3;\u000a  hash_entry *__ptr;\u000a  _Bool _Var4;\u000a  void *pvVar5;\u000a  ulong uVar6;\u000a  size_t candidate;\u000a  float fVar7;\u000a  float fVar8;\u000a  hash_entry *local_20;\u000a  \u000a  pvVar5 = hash_find_entry(table,entry,&local_20);\u000a  if (pvVar5 == (void *)0x0) {\u000a    pvVar5 = (void *)0x0;\u000a  }\u000a  else {\u000a    table->n_entries = table->n_entries - 1;\u000a    if (local_20->data == (void *)0x0) {\u000a      uVar6 = table->n_buckets_used - 1;\u000a      table->n_buckets_used = uVar6;\u000a      if ((long)uVar6 < 0) {\u000a        fVar7 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a        fVar7 = fVar7 + fVar7;\u000a      }\u000a      else {\u000a        fVar7 = (float)uVar6;\u000a      }\u000a      uVar6 = table->n_buckets;\u000a      if ((long)uVar6 < 0) {\u000a        fVar8 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a        fVar8 = fVar8 + fVar8;\u000a      }\u000a      else {\u000a        fVar8 = (float)uVar6;\u000a      }\u000a      if (fVar7 < fVar8 * table->tuning->shrink_threshold) {\u000a        check_tuning(table);\u000a        uVar6 = table->n_buckets;\u000a        uVar1 = table->n_buckets_used;\u000a        if ((long)uVar1 < 0) {\u000a          fVar7 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a          fVar7 = fVar7 + fVar7;\u000a        }\u000a        else {\u000a          fVar7 = (float)uVar1;\u000a        }\u000a        pHVar2 = table->tuning;\u000a        if ((long)uVar6 < 0) {\u000a          fVar8 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a          fVar8 = fVar8 + fVar8;\u000a        }\u000a        else {\u000a          fVar8 = (float)uVar6;\u000a        }\u000a        if (fVar7 < pHVar2->shrink_threshold * fVar8) {\u000a          fVar8 = fVar8 * pHVar2->shrink_factor;\u000a          if (pHVar2->is_n_buckets == false) {\u000a            fVar8 = fVar8 * pHVar2->growth_threshold;\u000a          }\u000a          candidate = (long)fVar8;\u000a          if (DAT_00409798 <= fVar8) {\u000a            candidate = (long)(fVar8 - DAT_00409798) ^ 0x8000000000000000;\u000a          }\u000a          _Var4 = hash_rehash(table,candidate);\u000a          if (_Var4 == false) {\u000a            __ptr = table->free_entry_list;\u000a            while (__ptr != (hash_entry *)0x0) {\u000a              phVar3 = __ptr->next;\u000a              free(__ptr);\u000a              __ptr = phVar3;\u000a            }\u000a            table->free_entry_list = (hash_entry *)0x0;\u000a          }\u000a        }\u000a      }\u000a    }\u000a  }\u000a  return pvVar5;\u000a}\u000a\u000a
p1039
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV R15,RDI\nLEA RDX,[RSP + 0x8]\nMOV ECX,0x1\nCALL 0x00404be0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00404d4a\nDEC qword ptr [R15 + 0x20]\nMOV RAX,qword ptr [RSP + 0x8]\nCMP qword ptr [RAX],0x0\nJNZ 0x00404e79\nMOV RAX,qword ptr [R15 + 0x18]\nDEC RAX\nMOV qword ptr [R15 + 0x18],RAX\nJS 0x00404d52\nCVTSI2SS XMM0,RAX\nJMP 0x00404d67\nXOR R14D,R14D\nJMP 0x00404e79\nMOV RCX,RAX\nSHR RCX,1\nAND EAX,0x1\nOR RAX,RCX\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOV RCX,qword ptr [R15 + 0x10]\nMOV RAX,qword ptr [R15 + 0x28]\nTEST RCX,RCX\nJS 0x00404d7b\nCVTSI2SS XMM1,RCX\nJMP 0x00404d90\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM1,RCX\nADDSS XMM1,XMM1\nMULSS XMM1,dword ptr [RAX]\nUCOMISS XMM1,XMM0\nJBE 0x00404e79\nMOV RDI,R15\nCALL 0x00404510\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x00404dbc\nXORPS XMM1,XMM1\nCVTSI2SS XMM1,RCX\nJMP 0x00404dd4\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nXORPS XMM1,XMM1\nCVTSI2SS XMM1,RCX\nADDSS XMM1,XMM1\nMOV RCX,qword ptr [R15 + 0x28]\nTEST RAX,RAX\nJS 0x00404de7\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nJMP 0x00404dff\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOVSS XMM2,dword ptr [RCX]\nMULSS XMM2,XMM0\nUCOMISS XMM2,XMM1\nJBE 0x00404e79\nMULSS XMM0,dword ptr [RCX + 0x4]\nCMP byte ptr [RCX + 0x10],0x0\nJNZ 0x00404e1c\nMULSS XMM0,dword ptr [RCX + 0x8]\nMOVSS XMM1,dword ptr [0x00409798]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RSI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RSI,RCX\nMOV RDI,R15\nCALL 0x004047b0\nTEST AL,AL\nJNZ 0x00404e79\nMOV RDI,qword ptr [R15 + 0x48]\nTEST RDI,RDI\nJZ 0x00404e71\nNOP\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x00401640\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x00404e60\nMOV qword ptr [R15 + 0x48],0x0\nMOV RAX,R14\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1040
S'41 57\n41 56\n53\n48 83 ec 10\n49 89 ff\n48 8d 54 24 08\nb9 01 00 00 00\ne8 c5 fe ff ff\n49 89 c6\n4d 85 f6\n74 27\n49 ff 4f 20\n48 8b 44 24 08\n48 83 38 00\n0f 85 43 01 00 00\n49 8b 47 18\n48 ff c8\n49 89 47 18\n78 0f\nf3 48 0f 2a c0\neb 1d\n45 31 f6\ne9 27 01 00 00\n48 89 c1\n48 d1 e9\n83 e0 01\n48 09 c8\nf3 48 0f 2a c0\nf3 0f 58 c0\n49 8b 4f 10\n49 8b 47 28\n48 85 c9\n78 07\nf3 48 0f 2a c9\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a c9\nf3 0f 58 c9\nf3 0f 59 08\n0f 2e c8\n0f 86 dc 00 00 00\n4c 89 ff\ne8 6b f7 ff ff\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 0a\n0f 57 c9\nf3 48 0f 2a c9\neb 18\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\n0f 57 c9\nf3 48 0f 2a c9\nf3 0f 58 c9\n49 8b 4f 28\n48 85 c0\n78 0a\n0f 57 c0\nf3 48 0f 2a c0\neb 18\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\n0f 57 c0\nf3 48 0f 2a c0\nf3 0f 58 c0\nf3 0f 10 11\nf3 0f 59 d0\n0f 2e d1\n76 6d\nf3 0f 59 41 04\n80 79 10 00\n75 05\nf3 0f 59 41 08\nf3 0f 10 0d 74 49 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f0\n0f 2e c1\n48 0f 43 f1\n4c 89 ff\ne8 5f f9 ff ff\n84 c0\n75 24\n49 8b 7f 48\n48 85 ff\n74 13\n66 90\n48 8b 5f 08\ne8 d7 c7 ff ff\n48 85 db\n48 89 df\n75 ef\n49 c7 47 48 00 00 00 00\n4c 89 f0\n48 83 c4 10\n5b\n41 5e\n41 5f\nc3\n'
p1041
S'.text:0000000000404d00\n.text:0000000000404d02\n.text:0000000000404d04\n.text:0000000000404d05\n.text:0000000000404d09\n.text:0000000000404d0c\n.text:0000000000404d11\n.text:0000000000404d16\n.text:0000000000404d1b\n.text:0000000000404d1e\n.text:0000000000404d21\n.text:0000000000404d23\n.text:0000000000404d27\n.text:0000000000404d2c\n.text:0000000000404d30\n.text:0000000000404d36\n.text:0000000000404d3a\n.text:0000000000404d3d\n.text:0000000000404d41\n.text:0000000000404d43\n.text:0000000000404d48\n.text:0000000000404d4a\n.text:0000000000404d4d\n.text:0000000000404d52\n.text:0000000000404d55\n.text:0000000000404d58\n.text:0000000000404d5b\n.text:0000000000404d5e\n.text:0000000000404d63\n.text:0000000000404d67\n.text:0000000000404d6b\n.text:0000000000404d6f\n.text:0000000000404d72\n.text:0000000000404d74\n.text:0000000000404d79\n.text:0000000000404d7b\n.text:0000000000404d7e\n.text:0000000000404d81\n.text:0000000000404d84\n.text:0000000000404d87\n.text:0000000000404d8c\n.text:0000000000404d90\n.text:0000000000404d94\n.text:0000000000404d97\n.text:0000000000404d9d\n.text:0000000000404da0\n.text:0000000000404da5\n.text:0000000000404da9\n.text:0000000000404dad\n.text:0000000000404db0\n.text:0000000000404db2\n.text:0000000000404db5\n.text:0000000000404dba\n.text:0000000000404dbc\n.text:0000000000404dbf\n.text:0000000000404dc2\n.text:0000000000404dc5\n.text:0000000000404dc8\n.text:0000000000404dcb\n.text:0000000000404dd0\n.text:0000000000404dd4\n.text:0000000000404dd8\n.text:0000000000404ddb\n.text:0000000000404ddd\n.text:0000000000404de0\n.text:0000000000404de5\n.text:0000000000404de7\n.text:0000000000404dea\n.text:0000000000404ded\n.text:0000000000404df0\n.text:0000000000404df3\n.text:0000000000404df6\n.text:0000000000404dfb\n.text:0000000000404dff\n.text:0000000000404e03\n.text:0000000000404e07\n.text:0000000000404e0a\n.text:0000000000404e0c\n.text:0000000000404e11\n.text:0000000000404e15\n.text:0000000000404e17\n.text:0000000000404e1c\n.text:0000000000404e24\n.text:0000000000404e27\n.text:0000000000404e2b\n.text:0000000000404e30\n.text:0000000000404e3a\n.text:0000000000404e3d\n.text:0000000000404e42\n.text:0000000000404e45\n.text:0000000000404e49\n.text:0000000000404e4c\n.text:0000000000404e51\n.text:0000000000404e53\n.text:0000000000404e55\n.text:0000000000404e59\n.text:0000000000404e5c\n.text:0000000000404e5e\n.text:0000000000404e60\n.text:0000000000404e64\n.text:0000000000404e69\n.text:0000000000404e6c\n.text:0000000000404e6f\n.text:0000000000404e71\n.text:0000000000404e79\n.text:0000000000404e7c\n.text:0000000000404e80\n.text:0000000000404e81\n.text:0000000000404e83\n.text:0000000000404e85\n'
p1042
tp1043
sS'quotearg_buffer'
p1044
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p1045
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p1046
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x60d370\nCMOVNZ RBP,R8\nCALL 0x00401670\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00405260\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1047
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd 70 d3 60 00\n49 0f 45 e8\ne8 68 c4 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1048
S'.text:00000000004051e0\n.text:00000000004051e1\n.text:00000000004051e3\n.text:00000000004051e5\n.text:00000000004051e7\n.text:00000000004051e9\n.text:00000000004051ea\n.text:00000000004051eb\n.text:00000000004051ee\n.text:00000000004051f1\n.text:00000000004051f4\n.text:00000000004051f7\n.text:00000000004051fa\n.text:00000000004051ff\n.text:0000000000405203\n.text:0000000000405208\n.text:000000000040520b\n.text:000000000040520d\n.text:0000000000405211\n.text:0000000000405215\n.text:0000000000405219\n.text:000000000040521d\n.text:0000000000405220\n.text:0000000000405223\n.text:0000000000405226\n.text:0000000000405229\n.text:000000000040522c\n.text:000000000040522f\n.text:0000000000405233\n.text:0000000000405234\n.text:0000000000405239\n.text:000000000040523d\n.text:0000000000405241\n.text:0000000000405243\n.text:0000000000405247\n.text:0000000000405248\n.text:000000000040524a\n.text:000000000040524c\n.text:000000000040524e\n.text:0000000000405250\n.text:0000000000405251\n'
p1049
tp1050
sS'relpath'
p1051
(S'\n__stdcall relpath(char * can_fname, char * can_reldir, char * buf, size_t len)\n'
p1052
V\u000a_Bool relpath(char *can_fname,char *can_reldir,char *buf,size_t len)\u000a\u000a{\u000a  long lVar1;\u000a  _Bool _Var2;\u000a  _Bool _Var3;\u000a  _Bool _Var4;\u000a  int iVar5;\u000a  long lVar6;\u000a  undefined8 uVar7;\u000a  char *str;\u000a  size_t local_38;\u000a  char *local_30;\u000a  \u000a  local_38 = len;\u000a  local_30 = buf;\u000a  iVar5 = path_common_prefix(can_reldir,can_fname);\u000a  if (iVar5 == 0) {\u000a    return false;\u000a  }\u000a  lVar6 = (long)iVar5;\u000a  lVar1 = lVar6;\u000a  if (can_reldir[lVar6] == '/') {\u000a    lVar1 = lVar6 + 1;\u000a  }\u000a  can_reldir = can_reldir + lVar1;\u000a  lVar1 = lVar6 + 1;\u000a  if (can_fname[lVar6] != '/') {\u000a    lVar1 = lVar6;\u000a  }\u000a  can_fname = can_fname + lVar1;\u000a  if (*can_reldir != 0) {\u000a    _Var2 = buffer_or_output("..",&local_30,&local_38);\u000a    do {\u000a      if (*can_reldir == '/') {\u000a        _Var3 = buffer_or_output("/..",&local_30,&local_38);\u000a        _Var2 = (_Bool)(_Var2 & 1U | _Var3);\u000a      }\u000a      else {\u000a        if (*can_reldir == 0) goto LAB_00402dd9;\u000a      }\u000a      can_reldir = can_reldir + 1;\u000a    } while( true );\u000a  }\u000a  str = ".";\u000a  if (*can_fname != 0) {\u000a    str = can_fname;\u000a  }\u000a  _Var2 = buffer_or_output(str,&local_30,&local_38);\u000ajoined_r0x00402e13:\u000a  if ((_Var2 & 1U) != 0) {\u000a    uVar7 = dcgettext(0,"generating relative path",5);\u000a    error(0,0x24,&DAT_0040a187,uVar7);\u000a  }\u000a  return (_Bool)((_Var2 & 1U) == 0);\u000aLAB_00402dd9:\u000a  if (*can_fname != 0) {\u000a    _Var3 = buffer_or_output("/",&local_30,&local_38);\u000a    _Var4 = buffer_or_output(can_fname,&local_30,&local_38);\u000a    _Var2 = (_Bool)(_Var2 & 1U | _Var3 | _Var4);\u000a  }\u000a  goto joined_r0x00402e13;\u000a}\u000a\u000a
p1053
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV RBX,RSI\nMOV R14,RDI\nMOV qword ptr [RSP + 0x8],RDX\nMOV qword ptr [RSP],RCX\nMOV RDI,RBX\nMOV RSI,R14\nCALL 0x00402e80\nTEST EAX,EAX\nJZ 0x00402e17\nCDQE\nLEA RCX,[R14 + RAX*0x1]\nCMP byte ptr [RBX + RAX*0x1],0x2f\nLEA RDX,[RBX + RAX*0x1 + 0x1]\nLEA RBX,[RBX + RAX*0x1]\nCMOVZ RBX,RDX\nCMP byte ptr [R14 + RAX*0x1],0x2f\nLEA R14,[R14 + RAX*0x1 + 0x1]\nCMOVNZ R14,RCX\nCMP byte ptr [RBX],0x0\nJZ 0x00402e1b\nLEA R15,[RSP + 0x8]\nMOV R12,RSP\nMOV EDI,0x409654\nMOV RSI,R15\nMOV RDX,R12\nCALL 0x00402f30\nMOV EBP,EAX\nJMP 0x00402db3\nINC RBX\nMOVZX EAX,byte ptr [RBX]\nCMP AL,0x2f\nJZ 0x00402dc0\nTEST AL,AL\nJNZ 0x00402db0\nJMP 0x00402dd9\nMOV EDI,0x409653\nMOV RSI,R15\nMOV RDX,R12\nCALL 0x00402f30\nAND BPL,0x1\nOR BPL,AL\nJMP 0x00402db0\nCMP byte ptr [R14],0x0\nJZ 0x00402e37\nLEA R15,[RSP + 0x8]\nMOV R12,RSP\nMOV EDI,0x40985e\nMOV RSI,R15\nMOV RDX,R12\nCALL 0x00402f30\nAND BPL,0x1\nOR BPL,AL\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,R12\nCALL 0x00402f30\nOR BPL,AL\nAND BPL,0x1\nJNZ 0x00402e3d\nJMP 0x00402e64\nXOR EAX,EAX\nJMP 0x00402e6a\nCMP byte ptr [R14],0x0\nMOV EDI,0x409655\nCMOVNZ RDI,R14\nLEA RSI,[RSP + 0x8]\nMOV RDX,RSP\nCALL 0x00402f30\nMOV EBP,EAX\nAND BPL,0x1\nJZ 0x00402e64\nXOR EDI,EDI\nMOV ESI,0x409657\nMOV EDX,0x5\nCALL 0x00401750\nMOV RCX,RAX\nXOR EDI,EDI\nMOV ESI,0x24\nMOV EDX,0x40a187\nXOR EAX,EAX\nCALL 0x004019c0\nTEST BPL,BPL\nSETZ AL\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1054
S'55\n41 57\n41 56\n41 54\n53\n48 83 ec 10\n48 89 f3\n49 89 fe\n48 89 54 24 08\n48 89 0c 24\n48 89 df\n4c 89 f6\ne8 2a 01 00 00\n85 c0\n0f 84 b9 00 00 00\n48 98\n49 8d 0c 06\n80 3c 03 2f\n48 8d 54 03 01\n48 8d 1c 03\n48 0f 44 da\n41 80 3c 06 2f\n4d 8d 74 06 01\n4c 0f 45 f1\n80 3b 00\n0f 84 8f 00 00 00\n4c 8d 7c 24 08\n49 89 e4\nbf 54 96 40 00\n4c 89 fe\n4c 89 e2\ne8 8c 01 00 00\n89 c5\neb 0b\n48 ff c3\n0f b6 03\n3c 2f\n74 06\n84 c0\n75 f2\neb 19\nbf 53 96 40 00\n4c 89 fe\n4c 89 e2\ne8 60 01 00 00\n40 80 e5 01\n40 08 c5\neb d7\n41 80 3e 00\n74 58\n4c 8d 7c 24 08\n49 89 e4\nbf 5e 98 40 00\n4c 89 fe\n4c 89 e2\ne8 39 01 00 00\n40 80 e5 01\n40 08 c5\n4c 89 f7\n4c 89 fe\n4c 89 e2\ne8 24 01 00 00\n40 08 c5\n40 80 e5 01\n75 28\neb 4d\n31 c0\neb 4f\n41 80 3e 00\nbf 55 96 40 00\n49 0f 45 fe\n48 8d 74 24 08\n48 89 e2\ne8 fb 00 00 00\n89 c5\n40 80 e5 01\n74 27\n31 ff\nbe 57 96 40 00\nba 05 00 00 00\ne8 02 e9 ff ff\n48 89 c1\n31 ff\nbe 24 00 00 00\nba 87 a1 40 00\n31 c0\ne8 5c eb ff ff\n40 84 ed\n0f 94 c0\n48 83 c4 10\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1055
S'.text:0000000000402d30\n.text:0000000000402d31\n.text:0000000000402d33\n.text:0000000000402d35\n.text:0000000000402d37\n.text:0000000000402d38\n.text:0000000000402d3c\n.text:0000000000402d3f\n.text:0000000000402d42\n.text:0000000000402d47\n.text:0000000000402d4b\n.text:0000000000402d4e\n.text:0000000000402d51\n.text:0000000000402d56\n.text:0000000000402d58\n.text:0000000000402d5e\n.text:0000000000402d60\n.text:0000000000402d64\n.text:0000000000402d68\n.text:0000000000402d6d\n.text:0000000000402d71\n.text:0000000000402d75\n.text:0000000000402d7a\n.text:0000000000402d7f\n.text:0000000000402d83\n.text:0000000000402d86\n.text:0000000000402d8c\n.text:0000000000402d91\n.text:0000000000402d94\n.text:0000000000402d99\n.text:0000000000402d9c\n.text:0000000000402d9f\n.text:0000000000402da4\n.text:0000000000402da6\n.text:0000000000402db0\n.text:0000000000402db3\n.text:0000000000402db6\n.text:0000000000402db8\n.text:0000000000402dba\n.text:0000000000402dbc\n.text:0000000000402dbe\n.text:0000000000402dc0\n.text:0000000000402dc5\n.text:0000000000402dc8\n.text:0000000000402dcb\n.text:0000000000402dd0\n.text:0000000000402dd4\n.text:0000000000402dd7\n.text:0000000000402dd9\n.text:0000000000402ddd\n.text:0000000000402ddf\n.text:0000000000402de4\n.text:0000000000402de7\n.text:0000000000402dec\n.text:0000000000402def\n.text:0000000000402df2\n.text:0000000000402df7\n.text:0000000000402dfb\n.text:0000000000402dfe\n.text:0000000000402e01\n.text:0000000000402e04\n.text:0000000000402e07\n.text:0000000000402e0c\n.text:0000000000402e0f\n.text:0000000000402e13\n.text:0000000000402e15\n.text:0000000000402e17\n.text:0000000000402e19\n.text:0000000000402e1b\n.text:0000000000402e1f\n.text:0000000000402e24\n.text:0000000000402e28\n.text:0000000000402e2d\n.text:0000000000402e30\n.text:0000000000402e35\n.text:0000000000402e37\n.text:0000000000402e3b\n.text:0000000000402e3d\n.text:0000000000402e3f\n.text:0000000000402e44\n.text:0000000000402e49\n.text:0000000000402e4e\n.text:0000000000402e51\n.text:0000000000402e53\n.text:0000000000402e58\n.text:0000000000402e5d\n.text:0000000000402e5f\n.text:0000000000402e64\n.text:0000000000402e67\n.text:0000000000402e6a\n.text:0000000000402e6e\n.text:0000000000402e6f\n.text:0000000000402e71\n.text:0000000000402e73\n.text:0000000000402e75\n.text:0000000000402e76\n'
p1056
tp1057
sS'quotearg_colon'
p1058
(S'\n__stdcall quotearg_colon(char * arg)\n'
p1059
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1060
S'MOV ESI,0x3a\nJMP 0x004063c0\n'
p1061
S'be 3a 00 00 00\neb e9\n'
p1062
S'.text:00000000004063d0\n.text:00000000004063d5\n'
p1063
tp1064
sS'canonicalize_filename_mode'
p1065
(S'\n__stdcall canonicalize_filename_mode(char * name)\n'
p1066
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000achar * canonicalize_filename_mode(char *name)\u000a\u000a{\u000a  char *__src;\u000a  long lVar1;\u000a  long lVar2;\u000a  _Bool _Var3;\u000a  byte bVar4;\u000a  int iVar5;\u000a  int *piVar6;\u000a  char *__file;\u000a  uint *puVar7;\u000a  size_t __n;\u000a  size_t sVar8;\u000a  char *__s;\u000a  ulong n;\u000a  char *__n_00;\u000a  ulong in_RSI;\u000a  uint uVar9;\u000a  char *pcVar10;\u000a  uint local_124;\u000a  ulong local_120;\u000a  char *local_118;\u000a  char *local_110;\u000a  char *local_108;\u000a  Hash_table *local_100;\u000a  int local_f4;\u000a  uint local_f0;\u000a  uint local_ec;\u000a  char *local_e8;\u000a  char *local_e0;\u000a  char *local_d8;\u000a  ulong local_d0;\u000a  ulong local_c8;\u000a  stat local_c0;\u000a  \u000a  local_ec = (uint)in_RSI;\u000a  local_100 = (Hash_table *)0x0;\u000a  uVar9 = local_ec & 3;\u000a  if (((local_ec + 3 & uVar9) != 0) || (name == (char *)0x0)) {\u000a    piVar6 = __errno_location();\u000a    *piVar6 = 0x16;\u000a    return (char *)0x0;\u000a  }\u000a  if (*name == '/') {\u000a    __file = (char *)xmalloc(0x1000);\u000a    *__file = '/';\u000a    pcVar10 = __file + 1;\u000a    local_108 = __file + 0x1000;\u000a  }\u000a  else {\u000a    if (*name == 0) {\u000a      piVar6 = __errno_location();\u000a      *piVar6 = 2;\u000a      return (char *)0x0;\u000a    }\u000a    __file = xgetcwd();\u000a    if (__file == (char *)0x0) {\u000a      return (char *)0x0;\u000a    }\u000a    pcVar10 = (char *)__rawmemchr(__file,0);\u000a    lVar1 = -(long)__file;\u000a    local_108 = pcVar10;\u000a    if ((long)(pcVar10 + lVar1) < 0x1000) {\u000a      __file = (char *)xrealloc(__file,0x1000);\u000a      pcVar10 = pcVar10 + lVar1 + (long)__file;\u000a      local_108 = __file + 0x1000;\u000a    }\u000a  }\u000a  local_f0 = local_ec & 4;\u000a  local_ec = local_ec & 7;\u000a  local_c8 = (ulong)(uVar9 != 2);\u000a  local_f4 = (uint)(uVar9 != 2) * 9 + 4;\u000a  local_120 = 0;\u000a  n = in_RSI & 0xffffff03;\u000a  local_118 = (char *)0x0;\u000a  local_d0 = n;\u000a  local_110 = name;\u000aLAB_00403581:\u000a  __s = pcVar10;\u000a  if (*name == 0) {\u000aLAB_004038f7:\u000a    if ((__file + 1 < __s) && (__s[-1] == '/')) {\u000a      __s = __s + -1;\u000a    }\u000a    *__s = 0;\u000a    if (local_108 != __s + 1) {\u000a      __file = (char *)xrealloc(__file,(size_t)(__s + (1 - (long)__file)));\u000a    }\u000a    free(local_118);\u000a    if (local_100 != (Hash_table *)0x0) {\u000a      hash_free(local_100);\u000a      return __file;\u000a    }\u000a    return __file;\u000a  }\u000a  local_124 = (uint)n;\u000a  __s = pcVar10;\u000aLAB_004035a0:\u000a  __src = name + -1;\u000a  do {\u000a    pcVar10 = __src;\u000a    __src = pcVar10 + 1;\u000a    name = __src;\u000a  } while (pcVar10[1] == '/');\u000a  while ((*name != 0 && (*name != '/'))) {\u000a    name = name + 1;\u000a  }\u000a  __n_00 = name + -(long)__src;\u000a  if (__n_00 == (char *)0x1) {\u000a    if (*__src != '.') goto LAB_0040363f;\u000aLAB_00403626:\u000a    if (*name == 0) goto LAB_004038f7;\u000a    goto LAB_004035a0;\u000a  }\u000a  if (__n_00 == (char *)0x2) {\u000a    if ((*__src != '.') || (pcVar10[2] != '.')) goto LAB_0040363f;\u000a    pcVar10 = __s;\u000a    if (__file + 1 < __s) {\u000a      do {\u000a        __s = pcVar10 + -1;\u000a        if (__s <= __file) break;\u000a        __src = pcVar10 + -2;\u000a        pcVar10 = __s;\u000a      } while (*__src != '/');\u000a    }\u000a    goto LAB_00403626;\u000a  }\u000a  if (__n_00 == (char *)0x0) goto LAB_004038f7;\u000aLAB_0040363f:\u000a  if (__s[-1] != '/') {\u000a    *__s = '/';\u000a    __s = __s + 1;\u000a  }\u000a  if (local_108 <= __s + (long)__n_00) {\u000a    lVar1 = -(long)__file;\u000a    lVar2 = -(long)__file;\u000a    pcVar10 = __n_00 + 1;\u000a    if ((long)__n_00 < 0x1000) {\u000a      pcVar10 = (char *)0x1000;\u000a    }\u000a    __file = (char *)xrealloc(__file,(size_t)(pcVar10 + (long)(local_108 + lVar2)));\u000a    local_108 = __file + (long)(pcVar10 + (long)(local_108 + lVar2));\u000a    __s = __s + lVar1 + (long)__file;\u000a  }\u000a  memcpy(__s,__src,(size_t)__n_00);\u000a  pcVar10 = __s + (long)__n_00;\u000a  __s[(long)__n_00] = 0;\u000a  local_d8 = __s;\u000a  if (local_ec == 6) {\u000aLAB_00403704:\u000a    local_c0.st_mode = 0;\u000aLAB_0040370f:\u000a    if ((local_c0.st_mode & 0xf000) != 0xa000) {\u000a      if ((local_c0.st_mode & 0xf000) == 0x4000) {\u000a        n = (ulong)local_124;\u000a      }\u000a      else {\u000a        n = (ulong)local_124;\u000a        if ((uVar9 != 2) && (*name != 0)) {\u000a          local_124 = 0x14;\u000aLAB_00403964:\u000a          free(local_118);\u000a          free(__file);\u000a          if (local_100 != (Hash_table *)0x0) {\u000a            hash_free(local_100);\u000a          }\u000a          puVar7 = (uint *)__errno_location();\u000a          *puVar7 = local_124;\u000a          return (char *)0x0;\u000a        }\u000a      }\u000a      goto LAB_00403581;\u000a    }\u000a    _Var3 = seen_triple(&local_100,local_110,&local_c0);\u000a    if (_Var3 == false) {\u000a      __s = areadlink_with_size(__file,local_c0.st_size);\u000a      if (__s == (char *)0x0) {\u000a        puVar7 = (uint *)__errno_location();\u000a        local_c8._0_1_ = *puVar7 == 0xc | (byte)local_c8;\u000a        if ((byte)local_c8 != 0) {\u000a          local_124 = *puVar7;\u000a        }\u000a        n = (ulong)local_124;\u000a        bVar4 = (byte)local_c8 * '\u005ct' + 4;\u000a        goto LAB_004037b7;\u000a      }\u000a      local_e8 = __s;\u000a      __n = strlen(__s);\u000a      sVar8 = strlen(name);\u000a      n = __n + 1 + sVar8;\u000a      if (local_120 == 0) {\u000a        if (n < 0x1001) {\u000a          n = 0x1000;\u000a        }\u000a        local_e0 = __file;\u000a        local_118 = (char *)xmalloc(n);\u000a        local_120 = n;\u000a      }\u000a      else {\u000a        local_e0 = __file;\u000a        if (local_120 < n) {\u000a          local_e0 = __file;\u000a          local_118 = (char *)xrealloc(local_118,n);\u000a          local_120 = n;\u000a        }\u000a      }\u000a      memmove(local_118 + __n,name,sVar8 + 1);\u000a      __s = local_e8;\u000a      memcpy(local_118,local_e8,__n);\u000a      __file = local_e0;\u000a      if (*__s == '/') {\u000a        *local_e0 = '/';\u000a        pcVar10 = local_e0 + 1;\u000a      }\u000a      else {\u000a        if (local_e0 + 1 < pcVar10) {\u000a          __src = name + (long)(local_d8 + (-1 - (long)__src));\u000a          do {\u000a            pcVar10 = __src;\u000a            if (pcVar10 <= local_e0) break;\u000a            __src = pcVar10 + -1;\u000a          } while (pcVar10[-1] != '/');\u000a        }\u000a      }\u000a      free(__s);\u000a      n = (ulong)local_124;\u000a      name = local_118;\u000a      local_110 = local_118;\u000a      goto LAB_00403581;\u000a    }\u000a    n = (ulong)local_124;\u000a    if (uVar9 != 2) {\u000a      n = 0x28;\u000a    }\u000a    bVar4 = (byte)local_f4;\u000a  }\u000a  else {\u000a    if (local_f0 != 0) {\u000a      local_d8 = __s;\u000a      iVar5 = stat(__file,(stat *)&local_c0);\u000a      if (iVar5 != 0) goto LAB_004036e4;\u000a      goto LAB_0040370f;\u000a    }\u000a    local_d8 = __s;\u000a    iVar5 = lstat(__file,(stat *)&local_c0);\u000a    if (iVar5 == 0) goto LAB_0040370f;\u000aLAB_004036e4:\u000a    puVar7 = (uint *)__errno_location();\u000a    local_124 = *puVar7;\u000a    if ((char)local_d0 != 1) {\u000a      if ((char)local_d0 != 0) goto LAB_00403704;\u000a      goto LAB_00403964;\u000a    }\u000a    __n = strspn(name,"/");\u000a    bVar4 = (name[__n] != 0) * '\u005ct' + 4;\u000a    if (local_124 != 2) {\u000a      bVar4 = 0xd;\u000a    }\u000a    n = (ulong)local_124;\u000a  }\u000aLAB_004037b7:\u000a  local_124 = (uint)n;\u000a  if ((bVar4 & 0xf) != 4) {\u000a    if ((bVar4 & 0xf) != 0xd) {\u000a      return __file;\u000a    }\u000a    goto LAB_00403964;\u000a  }\u000a  goto LAB_00403581;\u000a}\u000a\u000a
p1067
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xf8\nMOV EBP,ESI\nMOV R13,RDI\nMOV qword ptr [RSP + 0x28],0x0\nMOV R14D,EBP\nAND R14D,0x3\nLEA EAX,[RBP + 0x3]\nTEST EAX,R14D\nJZ 0x00403471\nCALL 0x00401670\nMOV dword ptr [RAX],0x16\nXOR R13D,R13D\nMOV RAX,R13\nADD RSP,0xf8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nTEST R13,R13\nJZ 0x0040344e\nMOV AL,byte ptr [R13]\nCMP AL,0x2f\nJZ 0x0040348f\nTEST AL,AL\nJNZ 0x004034b1\nCALL 0x00401670\nMOV dword ptr [RAX],0x2\nJMP 0x00403459\nMOV EDI,0x1000\nCALL 0x00406f80\nMOV byte ptr [RAX],0x2f\nLEA RCX,[0x1000 + RAX]\nMOV qword ptr [RSP + 0x20],RCX\nMOV RBX,RAX\nLEA R15,[RAX + 0x1]\nJMP 0x004034ff\nCALL 0x00407140\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00403459\nXOR ESI,ESI\nMOV RDI,RBX\nCALL 0x00401900\nMOV R15,RAX\nSUB R15,RBX\nCMP R15,0xfff\nJG 0x004034f7\nMOV ESI,0x1000\nMOV RDI,RBX\nCALL 0x00406fc0\nADD R15,RAX\nMOV RBX,RAX\nADD RAX,0x1000\nMOV qword ptr [RSP + 0x20],RAX\nJMP 0x004034ff\nMOV qword ptr [RSP + 0x20],RAX\nMOV R15,RAX\nMOV EAX,EBP\nAND EAX,0x4\nMOV dword ptr [RSP + 0x38],EAX\nMOV EAX,EBP\nAND EAX,0x7\nMOV dword ptr [RSP + 0x3c],EAX\nXOR EAX,EAX\nCMP R14D,0x2\nSETNZ AL\nMOV qword ptr [RSP + 0x60],RAX\nLEA EAX,[RAX + RAX*0x8 + 0x4]\nMOV dword ptr [RSP + 0x34],EAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nAND BPL,0x3\nMOV qword ptr [RSP + 0x58],RBP\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nMOV qword ptr [RSP + 0x18],R13\nJMP 0x0040357b\nCALL 0x00401640\nMOV RAX,R13\nMOV qword ptr [RSP + 0x10],RAX\nMOV qword ptr [RSP + 0x18],R13\nMOV EBP,dword ptr [RSP + 0x4]\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nJMP 0x0040357b\nMOV RBX,R13\nMOV RAX,qword ptr [RSP + 0x8]\nMOV R13,R12\nMOV EBP,dword ptr [RSP + 0x4]\nMOV qword ptr [RSP + 0x8],RAX\nMOV R12,R13\nMOV R13,RBX\nCMP byte ptr [R12],0x0\nJZ 0x004038f7\nMOV dword ptr [RSP + 0x4],EBP\nLEA RAX,[R13 + 0x1]\nNOP word ptr CS:[RAX + RAX*0x1]\nDEC R12\nMOV RBP,R12\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP byte ptr [RBP + 0x1],0x2f\nLEA RBP,[RBP + 0x1]\nJZ 0x004035b0\nMOV R12,RBP\nJMP 0x004035c3\nINC R12\nMOVZX ECX,byte ptr [R12]\nTEST CL,CL\nJZ 0x004035d1\nCMP CL,0x2f\nJNZ 0x004035c0\nMOV RBX,R12\nSUB RBX,RBP\nCMP RBX,0x1\nJZ 0x00403620\nCMP RBX,0x2\nJNZ 0x00403636\nCMP byte ptr [RBP],0x2e\nJNZ 0x0040363f\nCMP byte ptr [RBP + 0x1],0x2e\nJNZ 0x0040363f\nCMP R15,RAX\nJBE 0x00403626\nDEC R15\nMOV RCX,R15\nNOP word ptr [RAX + RAX*0x1]\nMOV R15,RCX\nCMP R15,R13\nJBE 0x00403626\nLEA RCX,[R15 + -0x1]\nCMP byte ptr [R15 + -0x1],0x2f\nJNZ 0x00403600\nJMP 0x00403626\nCMP byte ptr [RBP],0x2e\nJNZ 0x0040363f\nCMP byte ptr [R12],0x0\nJNZ 0x004035a0\nJMP 0x004038f7\nTEST RBX,RBX\nJZ 0x004038f7\nCMP byte ptr [R15 + -0x1],0x2f\nJZ 0x0040364d\nMOV byte ptr [R15],0x2f\nINC R15\nLEA RAX,[R15 + RBX*0x1]\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RAX,RCX\nMOV RAX,RCX\nJC 0x00403694\nSUB R15,R13\nSUB RAX,R13\nMOV RDI,R13\nLEA R13,[RBX + 0x1]\nCMP RBX,0xfff\nMOV ECX,0x1000\nCMOVLE R13,RCX\nADD R13,RAX\nMOV RSI,R13\nCALL 0x00406fc0\nADD R13,RAX\nADD R15,RAX\nMOV qword ptr [RSP + 0x20],R13\nMOV R13,RAX\nMOV RDI,R15\nMOV RSI,RBP\nMOV RDX,RBX\nCALL 0x004018b0\nMOV RAX,R15\nLEA R15,[RAX + RBX*0x1]\nCMP dword ptr [RSP + 0x3c],0x6\nMOV qword ptr [RSP + 0x50],RAX\nMOV byte ptr [RAX + RBX*0x1],0x0\nJZ 0x00403704\nCMP dword ptr [RSP + 0x38],0x0\nJNZ 0x004036d3\nMOV RDI,R13\nLEA RSI,[RSP + 0x68]\nCALL 0x00408050\nTEST EAX,EAX\nJNZ 0x004036e4\nJMP 0x0040370f\nMOV RDI,R13\nLEA RSI,[RSP + 0x68]\nCALL 0x00408040\nTEST EAX,EAX\nJZ 0x0040370f\nCALL 0x00401670\nMOV EBX,dword ptr [RAX]\nMOV RAX,qword ptr [RSP + 0x58]\nCMP AL,0x1\nJZ 0x0040378f\nMOV dword ptr [RSP + 0x4],EBX\nTEST AL,AL\nJZ 0x00403960\nMOV dword ptr [0x80 + RSP],0x0\nMOVZX EAX,word ptr [0x80 + RSP]\nAND EAX,0xf000\nCMP EAX,0xa000\nJNZ 0x004037c6\nLEA RDI,[RSP + 0x28]\nMOV RSI,qword ptr [RSP + 0x18]\nLEA RDX,[RSP + 0x68]\nCALL 0x004039a0\nTEST AL,AL\nJZ 0x00403755\nCMP R14D,0x2\nMOV EBP,dword ptr [RSP + 0x4]\nMOV EAX,0x28\nCMOVNZ EBP,EAX\nMOV EAX,dword ptr [RSP + 0x34]\nJMP 0x004037b7\nMOV RSI,qword ptr [0x98 + RSP]\nMOV RDI,R13\nCALL 0x004074e0\nTEST RAX,RAX\nJNZ 0x004037ff\nCALL 0x00401670\nMOV EAX,dword ptr [RAX]\nCMP EAX,0xc\nSETZ CL\nOR CL,byte ptr [RSP + 0x60]\nMOV EBP,dword ptr [RSP + 0x4]\nCMOVNZ EBP,EAX\nMOVZX EAX,CL\nLEA EAX,[RAX + RAX*0x8 + 0x4]\nJMP 0x004037b7\nMOV ESI,0x40985e\nMOV RDI,R12\nCALL 0x00401820\nXOR ECX,ECX\nCMP byte ptr [RAX + R12*0x1],0x0\nSETNZ CL\nCMP EBX,0x2\nLEA EAX,[RCX + RCX*0x8 + 0x4]\nMOV ECX,0xd\nCMOVNZ EAX,ECX\nMOV EBP,EBX\nAND AL,0xf\nCMP AL,0x4\nJZ 0x00403581\nJMP 0x00403957\nMOVZX EAX,AX\nCMP EAX,0x4000\nJZ 0x00403567\nCMP R14D,0x2\nMOV EBP,dword ptr [RSP + 0x4]\nJZ 0x004037ea\nMOV AL,byte ptr [R12]\nTEST AL,AL\nJNZ 0x00403991\nMOV RBX,R13\nMOV RAX,qword ptr [RSP + 0x8]\nMOV R13,R12\nMOV qword ptr [RSP + 0x8],RAX\nJMP 0x0040357b\nMOV qword ptr [RSP + 0x40],RAX\nMOV RDI,RAX\nCALL 0x00401770\nMOV RBX,RAX\nMOV RDI,R12\nCALL 0x00401770\nMOV qword ptr [RSP + 0x18],RBX\nLEA RCX,[RBX + RAX*0x1 + 0x1]\nMOV RBX,RAX\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nMOV qword ptr [RSP + 0x48],R13\nJZ 0x0040384c\nCMP RCX,RAX\nJBE 0x0040386e\nMOV RDI,qword ptr [RSP + 0x10]\nMOV qword ptr [RSP + 0x8],RCX\nMOV RSI,RCX\nCALL 0x00406fc0\nJMP 0x00403869\nCMP RCX,0x1000\nMOV EAX,0x1000\nCMOVBE RCX,RAX\nMOV qword ptr [RSP + 0x8],RCX\nMOV RDI,RCX\nCALL 0x00406f80\nMOV R13,RAX\nJMP 0x00403878\nMOV qword ptr [RSP + 0x8],RAX\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,qword ptr [RSP + 0x18]\nADD RDI,R13\nINC RBX\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x004019b0\nMOV RDI,R13\nMOV RBX,qword ptr [RSP + 0x40]\nMOV RSI,RBX\nMOV RDX,qword ptr [RSP + 0x18]\nCALL 0x004018b0\nMOV RDI,RBX\nMOV RCX,qword ptr [RSP + 0x48]\nLEA RAX,[RCX + 0x1]\nCMP byte ptr [RDI],0x2f\nJNZ 0x004038c2\nMOV RBX,RCX\nMOV byte ptr [RCX],0x2f\nMOV R15,RAX\nJMP 0x00403545\nMOV RBX,RCX\nCMP R15,RAX\nJBE 0x00403545\nMOV RAX,qword ptr [RSP + 0x50]\nSUB RAX,RBP\nLEA RAX,[RAX + R12*0x1 + -0x1]\nMOV R15,RAX\nCMP R15,RBX\nJBE 0x00403545\nLEA RAX,[R15 + -0x1]\nCMP byte ptr [R15 + -0x1],0x2f\nJNZ 0x004038db\nJMP 0x00403545\nLEA RAX,[R13 + 0x1]\nCMP R15,RAX\nJBE 0x0040390d\nLEA RAX,[R15 + -0x1]\nCMP byte ptr [R15 + -0x1],0x2f\nCMOVZ R15,RAX\nMOV RBX,qword ptr [RSP + 0x10]\nMOV byte ptr [R15],0x0\nLEA RAX,[R15 + 0x1]\nCMP qword ptr [RSP + 0x20],RAX\nJZ 0x00403937\nMOV ESI,0x1\nSUB RSI,R13\nADD RSI,R15\nMOV RDI,R13\nCALL 0x00406fc0\nMOV R13,RAX\nMOV RDI,RBX\nCALL 0x00401640\nMOV RDI,qword ptr [RSP + 0x28]\nTEST RDI,RDI\nJZ 0x0040345c\nCALL 0x004046d0\nJMP 0x0040345c\nCMP AL,0xd\nJZ 0x00403964\nJMP 0x0040345c\nMOV EBP,dword ptr [RSP + 0x4]\nMOV RDI,qword ptr [RSP + 0x10]\nCALL 0x00401640\nMOV RDI,R13\nCALL 0x00401640\nMOV RDI,qword ptr [RSP + 0x28]\nTEST RDI,RDI\nJZ 0x00403985\nCALL 0x004046d0\nCALL 0x00401670\nMOV dword ptr [RAX],EBP\nJMP 0x00403459\nMOV EBP,0x14\nJMP 0x00403964\n'
p1068
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec f8 00 00 00\n89 f5\n49 89 fd\n48 c7 44 24 28 00 00 00 00\n41 89 ee\n41 83 e6 03\n8d 45 03\n44 85 f0\n74 23\ne8 1d e2 ff ff\nc7 00 16 00 00 00\n45 31 ed\n4c 89 e8\n48 81 c4 f8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n4d 85 ed\n74 d8\n41 8a 45 00\n3c 2f\n74 11\n84 c0\n75 2f\ne8 e9 e1 ff ff\nc7 00 02 00 00 00\neb ca\nbf 00 10 00 00\ne8 e7 3a 00 00\nc6 00 2f\n48 8d 88 00 10 00 00\n48 89 4c 24 20\n48 89 c3\n4c 8d 78 01\neb 4e\ne8 8a 3c 00 00\n48 89 c3\n48 85 db\n74 9b\n31 f6\n48 89 df\ne8 38 e4 ff ff\n49 89 c7\n49 29 df\n49 81 ff ff 0f 00 00\n7f 20\nbe 00 10 00 00\n48 89 df\ne8 dc 3a 00 00\n49 01 c7\n48 89 c3\n48 05 00 10 00 00\n48 89 44 24 20\neb 08\n48 89 44 24 20\n49 89 c7\n89 e8\n83 e0 04\n89 44 24 38\n89 e8\n83 e0 07\n89 44 24 3c\n31 c0\n41 83 fe 02\n0f 95 c0\n48 89 44 24 60\n8d 44 c0 04\n89 44 24 34\n31 c0\n48 89 44 24 08\n40 80 e5 03\n48 89 6c 24 58\n31 c0\n48 89 44 24 10\n4c 89 6c 24 18\neb 36\ne8 f6 e0 ff ff\n4c 89 e8\n48 89 44 24 10\n4c 89 6c 24 18\n8b 6c 24 04\n48 8b 44 24 08\n48 89 44 24 08\neb 14\n4c 89 eb\n48 8b 44 24 08\n4d 89 e5\n8b 6c 24 04\n48 89 44 24 08\n4d 89 ec\n49 89 dd\n41 80 3c 24 00\n0f 84 6b 03 00 00\n89 6c 24 04\n49 8d 45 01\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 ff cc\n4c 89 e5\n66 2e 0f 1f 84 00 00 00 00 00\n80 7d 01 2f\n48 8d 6d 01\n74 f6\n49 89 ec\neb 04\n49 ff c4\n41 0f b6 0c 24\n84 c9\n74 05\n80 f9 2f\n75 ef\n4c 89 e3\n48 29 eb\n48 83 fb 01\n74 43\n48 83 fb 02\n75 53\n80 7d 00 2e\n75 56\n80 7d 01 2e\n75 50\n49 39 c7\n76 32\n49 ff cf\n4c 89 f9\n66 0f 1f 44 00 00\n49 89 cf\n4d 39 ef\n76 1e\n49 8d 4f ff\n41 80 7f ff 2f\n75 ed\neb 11\n80 7d 00 2e\n75 19\n41 80 3c 24 00\n0f 85 6f ff ff ff\ne9 c1 02 00 00\n48 85 db\n0f 84 b8 02 00 00\n41 80 7f ff 2f\n74 07\n41 c6 07 2f\n49 ff c7\n49 8d 04 1f\n48 8b 4c 24 20\n48 39 c8\n48 89 c8\n72 36\n4d 29 ef\n4c 29 e8\n4c 89 ef\n4c 8d 6b 01\n48 81 fb ff 0f 00 00\nb9 00 10 00 00\n4c 0f 4e e9\n49 01 c5\n4c 89 ee\ne8 3a 39 00 00\n49 01 c5\n49 01 c7\n4c 89 6c 24 20\n49 89 c5\n4c 89 ff\n48 89 ee\n48 89 da\ne8 0e e2 ff ff\n4c 89 f8\n4c 8d 3c 18\n83 7c 24 3c 06\n48 89 44 24 50\nc6 04 18 00\n74 4b\n83 7c 24 38 00\n75 13\n4c 89 ef\n48 8d 74 24 68\ne8 83 49 00 00\n85 c0\n75 13\neb 3c\n4c 89 ef\n48 8d 74 24 68\ne8 60 49 00 00\n85 c0\n74 2b\ne8 87 df ff ff\n8b 18\n48 8b 44 24 58\n3c 01\n0f 84 97 00 00 00\n89 5c 24 04\n84 c0\n0f 84 5c 02 00 00\nc7 84 24 80 00 00 00 00 00 00 00\n0f b7 84 24 80 00 00 00\n25 00 f0 00 00\n3d 00 a0 00 00\n0f 85 9f 00 00 00\n48 8d 7c 24 28\n48 8b 74 24 18\n48 8d 54 24 68\ne8 65 02 00 00\n84 c0\n74 16\n41 83 fe 02\n8b 6c 24 04\nb8 28 00 00 00\n0f 45 e8\n8b 44 24 34\neb 62\n48 8b b4 24 98 00 00 00\n4c 89 ef\ne8 7b 3d 00 00\n48 85 c0\n0f 85 91 00 00 00\ne8 fd de ff ff\n8b 00\n83 f8 0c\n0f 94 c1\n0a 4c 24 60\n8b 6c 24 04\n0f 45 e8\n0f b6 c1\n8d 44 c0 04\neb 28\nbe 5e 98 40 00\n4c 89 e7\ne8 84 e0 ff ff\n31 c9\n42 80 3c 20 00\n0f 95 c1\n83 fb 02\n8d 44 c9 04\nb9 0d 00 00 00\n0f 45 c1\n89 dd\n24 0f\n3c 04\n0f 84 c0 fd ff ff\ne9 91 01 00 00\n0f b7 c0\n3d 00 40 00 00\n0f 84 93 fd ff ff\n41 83 fe 02\n8b 6c 24 04\n74 0c\n41 8a 04 24\n84 c0\n0f 85 a7 01 00 00\n4c 89 eb\n48 8b 44 24 08\n4d 89 e5\n48 89 44 24 08\ne9 7c fd ff ff\n48 89 44 24 40\n48 89 c7\ne8 64 df ff ff\n48 89 c3\n4c 89 e7\ne8 59 df ff ff\n48 89 5c 24 18\n48 8d 4c 03 01\n48 89 c3\n48 8b 44 24 08\n48 85 c0\n4c 89 6c 24 48\n74 19\n48 39 c1\n76 36\n48 8b 7c 24 10\n48 89 4c 24 08\n48 89 ce\ne8 76 37 00 00\neb 1d\n48 81 f9 00 10 00 00\nb8 00 10 00 00\n48 0f 46 c8\n48 89 4c 24 08\n48 89 cf\ne8 17 37 00 00\n49 89 c5\neb 0a\n48 89 44 24 08\n4c 8b 6c 24 10\n48 8b 7c 24 18\n4c 01 ef\n48 ff c3\n4c 89 e6\n48 89 da\ne8 22 e1 ff ff\n4c 89 ef\n48 8b 5c 24 40\n48 89 de\n48 8b 54 24 18\ne8 0d e0 ff ff\n48 89 df\n48 8b 4c 24 48\n48 8d 41 01\n80 3f 2f\n75 0e\n48 89 cb\nc6 01 2f\n49 89 c7\ne9 83 fc ff ff\n48 89 cb\n49 39 c7\n0f 86 77 fc ff ff\n48 8b 44 24 50\n48 29 e8\n4a 8d 44 20 ff\n49 89 c7\n49 39 df\n0f 86 5e fc ff ff\n49 8d 47 ff\n41 80 7f ff 2f\n75 e9\ne9 4e fc ff ff\n49 8d 45 01\n49 39 c7\n76 0d\n49 8d 47 ff\n41 80 7f ff 2f\n4c 0f 44 f8\n48 8b 5c 24 10\n41 c6 07 00\n49 8d 47 01\n48 39 44 24 20\n74 16\nbe 01 00 00 00\n4c 29 ee\n4c 01 fe\n4c 89 ef\ne8 8c 36 00 00\n49 89 c5\n48 89 df\ne8 01 dd ff ff\n48 8b 7c 24 28\n48 85 ff\n0f 84 0f fb ff ff\ne8 7e 0d 00 00\ne9 05 fb ff ff\n3c 0d\n74 09\ne9 fc fa ff ff\n8b 6c 24 04\n48 8b 7c 24 10\ne8 d2 dc ff ff\n4c 89 ef\ne8 ca dc ff ff\n48 8b 7c 24 28\n48 85 ff\n74 05\ne8 4b 0d 00 00\ne8 e6 dc ff ff\n89 28\ne9 c8 fa ff ff\nbd 14 00 00 00\neb cc\n'
p1069
S'.text:0000000000403420\n.text:0000000000403421\n.text:0000000000403423\n.text:0000000000403425\n.text:0000000000403427\n.text:0000000000403429\n.text:000000000040342a\n.text:0000000000403431\n.text:0000000000403433\n.text:0000000000403436\n.text:000000000040343f\n.text:0000000000403442\n.text:0000000000403446\n.text:0000000000403449\n.text:000000000040344c\n.text:000000000040344e\n.text:0000000000403453\n.text:0000000000403459\n.text:000000000040345c\n.text:000000000040345f\n.text:0000000000403466\n.text:0000000000403467\n.text:0000000000403469\n.text:000000000040346b\n.text:000000000040346d\n.text:000000000040346f\n.text:0000000000403470\n.text:0000000000403471\n.text:0000000000403474\n.text:0000000000403476\n.text:000000000040347a\n.text:000000000040347c\n.text:000000000040347e\n.text:0000000000403480\n.text:0000000000403482\n.text:0000000000403487\n.text:000000000040348d\n.text:000000000040348f\n.text:0000000000403494\n.text:0000000000403499\n.text:000000000040349c\n.text:00000000004034a3\n.text:00000000004034a8\n.text:00000000004034ab\n.text:00000000004034af\n.text:00000000004034b1\n.text:00000000004034b6\n.text:00000000004034b9\n.text:00000000004034bc\n.text:00000000004034be\n.text:00000000004034c0\n.text:00000000004034c3\n.text:00000000004034c8\n.text:00000000004034cb\n.text:00000000004034ce\n.text:00000000004034d5\n.text:00000000004034d7\n.text:00000000004034dc\n.text:00000000004034df\n.text:00000000004034e4\n.text:00000000004034e7\n.text:00000000004034ea\n.text:00000000004034f0\n.text:00000000004034f5\n.text:00000000004034f7\n.text:00000000004034fc\n.text:00000000004034ff\n.text:0000000000403501\n.text:0000000000403504\n.text:0000000000403508\n.text:000000000040350a\n.text:000000000040350d\n.text:0000000000403511\n.text:0000000000403513\n.text:0000000000403517\n.text:000000000040351a\n.text:000000000040351f\n.text:0000000000403523\n.text:0000000000403527\n.text:0000000000403529\n.text:000000000040352e\n.text:0000000000403532\n.text:0000000000403537\n.text:0000000000403539\n.text:000000000040353e\n.text:0000000000403543\n.text:0000000000403545\n.text:000000000040354a\n.text:000000000040354d\n.text:0000000000403552\n.text:0000000000403557\n.text:000000000040355b\n.text:0000000000403560\n.text:0000000000403565\n.text:0000000000403567\n.text:000000000040356a\n.text:000000000040356f\n.text:0000000000403572\n.text:0000000000403576\n.text:000000000040357b\n.text:000000000040357e\n.text:0000000000403581\n.text:0000000000403586\n.text:000000000040358c\n.text:0000000000403590\n.text:0000000000403594\n.text:00000000004035a0\n.text:00000000004035a3\n.text:00000000004035a6\n.text:00000000004035b0\n.text:00000000004035b4\n.text:00000000004035b8\n.text:00000000004035ba\n.text:00000000004035bd\n.text:00000000004035c0\n.text:00000000004035c3\n.text:00000000004035c8\n.text:00000000004035ca\n.text:00000000004035cc\n.text:00000000004035cf\n.text:00000000004035d1\n.text:00000000004035d4\n.text:00000000004035d7\n.text:00000000004035db\n.text:00000000004035dd\n.text:00000000004035e1\n.text:00000000004035e3\n.text:00000000004035e7\n.text:00000000004035e9\n.text:00000000004035ed\n.text:00000000004035ef\n.text:00000000004035f2\n.text:00000000004035f4\n.text:00000000004035f7\n.text:00000000004035fa\n.text:0000000000403600\n.text:0000000000403603\n.text:0000000000403606\n.text:0000000000403608\n.text:000000000040360c\n.text:0000000000403611\n.text:0000000000403613\n.text:0000000000403620\n.text:0000000000403624\n.text:0000000000403626\n.text:000000000040362b\n.text:0000000000403631\n.text:0000000000403636\n.text:0000000000403639\n.text:000000000040363f\n.text:0000000000403644\n.text:0000000000403646\n.text:000000000040364a\n.text:000000000040364d\n.text:0000000000403651\n.text:0000000000403656\n.text:0000000000403659\n.text:000000000040365c\n.text:000000000040365e\n.text:0000000000403661\n.text:0000000000403664\n.text:0000000000403667\n.text:000000000040366b\n.text:0000000000403672\n.text:0000000000403677\n.text:000000000040367b\n.text:000000000040367e\n.text:0000000000403681\n.text:0000000000403686\n.text:0000000000403689\n.text:000000000040368c\n.text:0000000000403691\n.text:0000000000403694\n.text:0000000000403697\n.text:000000000040369a\n.text:000000000040369d\n.text:00000000004036a2\n.text:00000000004036a5\n.text:00000000004036a9\n.text:00000000004036ae\n.text:00000000004036b3\n.text:00000000004036b7\n.text:00000000004036b9\n.text:00000000004036be\n.text:00000000004036c0\n.text:00000000004036c3\n.text:00000000004036c8\n.text:00000000004036cd\n.text:00000000004036cf\n.text:00000000004036d1\n.text:00000000004036d3\n.text:00000000004036d6\n.text:00000000004036db\n.text:00000000004036e0\n.text:00000000004036e2\n.text:00000000004036e4\n.text:00000000004036e9\n.text:00000000004036eb\n.text:00000000004036f0\n.text:00000000004036f2\n.text:00000000004036f8\n.text:00000000004036fc\n.text:00000000004036fe\n.text:0000000000403704\n.text:000000000040370f\n.text:0000000000403717\n.text:000000000040371c\n.text:0000000000403721\n.text:0000000000403727\n.text:000000000040372c\n.text:0000000000403731\n.text:0000000000403736\n.text:000000000040373b\n.text:000000000040373d\n.text:000000000040373f\n.text:0000000000403743\n.text:0000000000403747\n.text:000000000040374c\n.text:000000000040374f\n.text:0000000000403753\n.text:0000000000403755\n.text:000000000040375d\n.text:0000000000403760\n.text:0000000000403765\n.text:0000000000403768\n.text:000000000040376e\n.text:0000000000403773\n.text:0000000000403775\n.text:0000000000403778\n.text:000000000040377b\n.text:000000000040377f\n.text:0000000000403783\n.text:0000000000403786\n.text:0000000000403789\n.text:000000000040378d\n.text:000000000040378f\n.text:0000000000403794\n.text:0000000000403797\n.text:000000000040379c\n.text:000000000040379e\n.text:00000000004037a3\n.text:00000000004037a6\n.text:00000000004037a9\n.text:00000000004037ad\n.text:00000000004037b2\n.text:00000000004037b5\n.text:00000000004037b7\n.text:00000000004037b9\n.text:00000000004037bb\n.text:00000000004037c1\n.text:00000000004037c6\n.text:00000000004037c9\n.text:00000000004037ce\n.text:00000000004037d4\n.text:00000000004037d8\n.text:00000000004037dc\n.text:00000000004037de\n.text:00000000004037e2\n.text:00000000004037e4\n.text:00000000004037ea\n.text:00000000004037ed\n.text:00000000004037f2\n.text:00000000004037f5\n.text:00000000004037fa\n.text:00000000004037ff\n.text:0000000000403804\n.text:0000000000403807\n.text:000000000040380c\n.text:000000000040380f\n.text:0000000000403812\n.text:0000000000403817\n.text:000000000040381c\n.text:0000000000403821\n.text:0000000000403824\n.text:0000000000403829\n.text:000000000040382c\n.text:0000000000403831\n.text:0000000000403833\n.text:0000000000403836\n.text:0000000000403838\n.text:000000000040383d\n.text:0000000000403842\n.text:0000000000403845\n.text:000000000040384a\n.text:000000000040384c\n.text:0000000000403853\n.text:0000000000403858\n.text:000000000040385c\n.text:0000000000403861\n.text:0000000000403864\n.text:0000000000403869\n.text:000000000040386c\n.text:000000000040386e\n.text:0000000000403873\n.text:0000000000403878\n.text:000000000040387d\n.text:0000000000403880\n.text:0000000000403883\n.text:0000000000403886\n.text:0000000000403889\n.text:000000000040388e\n.text:0000000000403891\n.text:0000000000403896\n.text:0000000000403899\n.text:000000000040389e\n.text:00000000004038a3\n.text:00000000004038a6\n.text:00000000004038ab\n.text:00000000004038af\n.text:00000000004038b2\n.text:00000000004038b4\n.text:00000000004038b7\n.text:00000000004038ba\n.text:00000000004038bd\n.text:00000000004038c2\n.text:00000000004038c5\n.text:00000000004038c8\n.text:00000000004038ce\n.text:00000000004038d3\n.text:00000000004038d6\n.text:00000000004038db\n.text:00000000004038de\n.text:00000000004038e1\n.text:00000000004038e7\n.text:00000000004038eb\n.text:00000000004038f0\n.text:00000000004038f2\n.text:00000000004038f7\n.text:00000000004038fb\n.text:00000000004038fe\n.text:0000000000403900\n.text:0000000000403904\n.text:0000000000403909\n.text:000000000040390d\n.text:0000000000403912\n.text:0000000000403916\n.text:000000000040391a\n.text:000000000040391f\n.text:0000000000403921\n.text:0000000000403926\n.text:0000000000403929\n.text:000000000040392c\n.text:000000000040392f\n.text:0000000000403934\n.text:0000000000403937\n.text:000000000040393a\n.text:000000000040393f\n.text:0000000000403944\n.text:0000000000403947\n.text:000000000040394d\n.text:0000000000403952\n.text:0000000000403957\n.text:0000000000403959\n.text:000000000040395b\n.text:0000000000403960\n.text:0000000000403964\n.text:0000000000403969\n.text:000000000040396e\n.text:0000000000403971\n.text:0000000000403976\n.text:000000000040397b\n.text:000000000040397e\n.text:0000000000403980\n.text:0000000000403985\n.text:000000000040398a\n.text:000000000040398c\n.text:0000000000403991\n.text:0000000000403996\n'
p1070
tp1071
sS'close_stdin'
p1072
(S'\n__stdcall close_stdin()\n'
p1073
V\u000avoid close_stdin(void)\u000a\u000a{\u000a  uint uVar1;\u000a  FILE *fp;\u000a  int iVar2;\u000a  size_t sVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  bool bVar6;\u000a  \u000a  fp = stdin;\u000a  sVar3 = freadahead(stdin);\u000a  bVar6 = false;\u000a  if (sVar3 != 0) {\u000a    iVar2 = rpl_fseeko(fp,0);\u000a    bVar6 = false;\u000a    if (iVar2 == 0) {\u000a      iVar2 = rpl_fflush(stdin);\u000a      bVar6 = iVar2 != 0;\u000a    }\u000a  }\u000a  iVar2 = close_stream(stdin);\u000a  if ((!bVar6) && (iVar2 == 0)) {\u000a    close_stdout();\u000a    return;\u000a  }\u000a  uVar4 = dcgettext(0,"error closing file",5);\u000a  arg = file_name;\u000a  puVar5 = (uint *)__errno_location();\u000a  uVar1 = *puVar5;\u000a  if (arg == (char *)0x0) {\u000a    error(0,(ulong)uVar1,&DAT_0040a187,uVar4);\u000a  }\u000a  else {\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a  }\u000a  close_stdout();\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p1074
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,qword ptr [0x0060d2f0]\nMOV RDI,RBX\nCALL 0x00407440\nXOR EBP,EBP\nTEST RAX,RAX\nJZ 0x00403a5f\nXOR ESI,ESI\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00407470\nTEST EAX,EAX\nJNZ 0x00403a5f\nMOV RDI,qword ptr [0x0060d2f0]\nCALL 0x004073f0\nTEST EAX,EAX\nSETNZ BPL\nMOV RDI,qword ptr [0x0060d2f0]\nCALL 0x00407b30\nTEST BPL,BPL\nJNZ 0x00403a7d\nTEST EAX,EAX\nJNZ 0x00403a7d\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00403b10\nXOR EDI,EDI\nMOV ESI,0x409728\nMOV EDX,0x5\nCALL 0x00401750\nMOV R14,RAX\nMOV RBX,qword ptr [0x0060d348]\nCALL 0x00401670\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x00403ab9\nXOR EDI,EDI\nMOV EDX,0x40a187\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x004019c0\nJMP 0x00403ad7\nMOV RDI,RBX\nCALL 0x004063d0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40973b\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x004019c0\nCALL 0x00403b10\nMOV EDI,dword ptr [0x0060d268]\nCALL 0x004016a0\n'
p1075
S'55\n41 56\n53\n48 8b 1d c5 98 20 00\n48 89 df\ne8 0d 3a 00 00\n31 ed\n48 85 c0\n74 25\n31 f6\nba 01 00 00 00\n48 89 df\ne8 27 3a 00 00\n85 c0\n75 12\n48 8b 3d 9c 98 20 00\ne8 97 39 00 00\n85 c0\n40 0f 95 c5\n48 8b 3d 8a 98 20 00\ne8 c5 40 00 00\n40 84 ed\n75 0d\n85 c0\n75 09\n5b\n41 5e\n5d\ne9 93 00 00 00\n31 ff\nbe 28 97 40 00\nba 05 00 00 00\ne8 c2 dc ff ff\n49 89 c6\n48 8b 1d b0 98 20 00\ne8 d3 db ff ff\n48 85 db\n8b 28\n75 15\n31 ff\nba 87 a1 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 09 df ff ff\neb 1e\n48 89 df\ne8 0f 29 00 00\n48 89 c1\n31 ff\nba 3b 97 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 e9 de ff ff\ne8 34 00 00 00\n8b 3d 86 97 20 00\ne8 b9 db ff ff\n'
p1076
S'.text:0000000000403a20\n.text:0000000000403a21\n.text:0000000000403a23\n.text:0000000000403a24\n.text:0000000000403a2b\n.text:0000000000403a2e\n.text:0000000000403a33\n.text:0000000000403a35\n.text:0000000000403a38\n.text:0000000000403a3a\n.text:0000000000403a3c\n.text:0000000000403a41\n.text:0000000000403a44\n.text:0000000000403a49\n.text:0000000000403a4b\n.text:0000000000403a4d\n.text:0000000000403a54\n.text:0000000000403a59\n.text:0000000000403a5b\n.text:0000000000403a5f\n.text:0000000000403a66\n.text:0000000000403a6b\n.text:0000000000403a6e\n.text:0000000000403a70\n.text:0000000000403a72\n.text:0000000000403a74\n.text:0000000000403a75\n.text:0000000000403a77\n.text:0000000000403a78\n.text:0000000000403a7d\n.text:0000000000403a7f\n.text:0000000000403a84\n.text:0000000000403a89\n.text:0000000000403a8e\n.text:0000000000403a91\n.text:0000000000403a98\n.text:0000000000403a9d\n.text:0000000000403aa0\n.text:0000000000403aa2\n.text:0000000000403aa4\n.text:0000000000403aa6\n.text:0000000000403aab\n.text:0000000000403aad\n.text:0000000000403aaf\n.text:0000000000403ab2\n.text:0000000000403ab7\n.text:0000000000403ab9\n.text:0000000000403abc\n.text:0000000000403ac1\n.text:0000000000403ac4\n.text:0000000000403ac6\n.text:0000000000403acb\n.text:0000000000403acd\n.text:0000000000403acf\n.text:0000000000403ad2\n.text:0000000000403ad7\n.text:0000000000403adc\n.text:0000000000403ae2\n'
p1077
tp1078
sS'rpl_fflush'
p1079
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p1080
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_0060d190)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p1081
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0040740d\nMOV RDI,RBX\nCALL 0x00401950\nTEST EAX,EAX\nJZ 0x0040740d\nMOV RDI,RBX\nCALL 0x00407420\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401920\n'
p1082
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 4f a5 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 0a a5 ff ff\n'
p1083
S'.text:00000000004073f0\n.text:00000000004073f1\n.text:00000000004073f4\n.text:00000000004073f7\n.text:00000000004073f9\n.text:00000000004073fc\n.text:0000000000407401\n.text:0000000000407403\n.text:0000000000407405\n.text:0000000000407408\n.text:000000000040740d\n.text:0000000000407410\n.text:0000000000407411\n'
p1084
tp1085
sS'bindtextdomain'
p1086
(S'\n__stdcall bindtextdomain()\n'
p1087
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_0060d0a0)();\u000a  return;\u000a}\u000a\u000a
p1088
S'JMP qword ptr [0x0060d0a0]\n'
p1089
S'ff 25 5a b9 20 00\n'
p1090
S'.plt:0000000000401740\n'
p1091
tp1092
sS'set_char_quoting'
p1093
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p1094
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p1095
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x60d370\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p1096
S'89 f1\n48 85 ff\nbe 70 d3 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p1097
S'.text:0000000000405150\n.text:0000000000405152\n.text:0000000000405155\n.text:000000000040515a\n.text:000000000040515e\n.text:0000000000405160\n.text:0000000000405163\n.text:0000000000405167\n.text:000000000040516c\n.text:000000000040516f\n.text:0000000000405171\n.text:0000000000405173\n.text:0000000000405176\n.text:0000000000405178\n.text:000000000040517b\n.text:000000000040517d\n.text:0000000000405180\n.text:0000000000405185\n'
p1098
tp1099
sS'quotearg_n'
p1100
(S'\n__stdcall quotearg_n(char * arg)\n'
p1101
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1102
S'MOV RDX,-0x1\nMOV ECX,0x60d370\nJMP 0x00406040\n'
p1103
S'48 c7 c2 ff ff ff ff\nb9 70 d3 60 00\neb 02\n'
p1104
S'.text:0000000000406030\n.text:0000000000406037\n.text:000000000040603c\n'
p1105
tp1106
sS'close_stream'
p1107
(S'\n__stdcall close_stream(FILE * stream)\n'
p1108
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1109
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x004016c0\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00401860\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00407f10\nTEST EBP,EBP\nJZ 0x00407b6b\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x00407b8f\nCALL 0x00401670\nMOV dword ptr [RAX],0x0\nJMP 0x00407b8f\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x00407b8f\nTEST CL,CL\nJNZ 0x00407b8f\nCALL 0x00401670\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1110
S'55\n41 56\n53\n48 89 fb\ne8 84 9b ff ff\n49 89 c6\n48 89 df\ne8 19 9d ff ff\n89 c5\n48 89 df\ne8 bf 03 00 00\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 0d 9b ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 ee 9a ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p1111
S'.text:0000000000407b30\n.text:0000000000407b31\n.text:0000000000407b33\n.text:0000000000407b34\n.text:0000000000407b37\n.text:0000000000407b3c\n.text:0000000000407b3f\n.text:0000000000407b42\n.text:0000000000407b47\n.text:0000000000407b49\n.text:0000000000407b4c\n.text:0000000000407b51\n.text:0000000000407b53\n.text:0000000000407b55\n.text:0000000000407b5a\n.text:0000000000407b5c\n.text:0000000000407b5e\n.text:0000000000407b63\n.text:0000000000407b69\n.text:0000000000407b6b\n.text:0000000000407b6d\n.text:0000000000407b70\n.text:0000000000407b72\n.text:0000000000407b74\n.text:0000000000407b77\n.text:0000000000407b79\n.text:0000000000407b7b\n.text:0000000000407b7d\n.text:0000000000407b82\n.text:0000000000407b84\n.text:0000000000407b87\n.text:0000000000407b8c\n.text:0000000000407b8f\n.text:0000000000407b91\n.text:0000000000407b92\n.text:0000000000407b94\n.text:0000000000407b95\n'
p1112
tp1113
sS'quotearg_colon_mem'
p1114
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p1115
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1116
S'MOV EDX,0x3a\nJMP 0x00406350\n'
p1117
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p1118
S'.text:00000000004063e0\n.text:00000000004063e5\n'
p1119
tp1120
sS'path_common_prefix'
p1121
(S'\n__stdcall path_common_prefix(char * path1, char * path2)\n'
p1122
V\u000aint path_common_prefix(char *path1,char *path2)\u000a\u000a{\u000a  int iVar1;\u000a  long lVar2;\u000a  int iVar3;\u000a  int iVar4;\u000a  byte bVar5;\u000a  byte bVar6;\u000a  bool bVar7;\u000a  bool bVar8;\u000a  \u000a  if ((path2[1] == '/') == (path1[1] == '/')) {\u000a    bVar5 = *path1;\u000a    bVar7 = bVar5 == 0;\u000a    bVar6 = *path2;\u000a    bVar8 = bVar6 == 0;\u000a    iVar1 = 0;\u000a    if ((bVar5 != bVar6) || (bVar7 || bVar8)) {\u000a      iVar3 = 0;\u000a    }\u000a    else {\u000a      lVar2 = 0;\u000a      iVar3 = 0;\u000a      do {\u000a        bVar8 = bVar5 != 0x2f;\u000a        bVar5 = path1[lVar2 + 1];\u000a        bVar6 = path2[lVar2 + 1];\u000a        lVar2 = lVar2 + 1;\u000a        iVar1 = (int)lVar2;\u000a        iVar4 = iVar1;\u000a        if (bVar8) {\u000a          iVar4 = iVar3;\u000a        }\u000a        iVar3 = iVar4;\u000a        bVar7 = bVar5 == 0;\u000a        bVar8 = bVar6 == 0;\u000a      } while ((bVar5 == bVar6) && (!bVar7 && !bVar8));\u000a    }\u000a    iVar4 = iVar3;\u000a    if (bVar6 == 0x2f) {\u000a      iVar4 = iVar1;\u000a    }\u000a    if (!bVar7) {\u000a      iVar4 = iVar3;\u000a    }\u000a    if ((bVar6 | bVar5) == 0) {\u000a      iVar4 = iVar1;\u000a    }\u000a    if (!bVar8) {\u000a      iVar1 = iVar4;\u000a    }\u000a    if (bVar5 != 0x2f) {\u000a      iVar1 = iVar4;\u000a    }\u000a    return iVar1;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1123
S'CMP byte ptr [RDI + 0x1],0x2f\nSETZ AL\nCMP byte ptr [RSI + 0x1],0x2f\nSETZ CL\nXOR CL,AL\nJZ 0x00402e95\nXOR EAX,EAX\nRET\nMOV R10B,byte ptr [RDI]\nTEST R10B,R10B\nSETZ R9B\nMOV R11B,byte ptr [RSI]\nTEST R11B,R11B\nSETZ R8B\nXOR EAX,EAX\nCMP R10B,R11B\nJNZ 0x00402efd\nMOV ECX,R9D\nOR CL,R8B\nXOR CL,0x1\nJZ 0x00402efd\nXOR EAX,EAX\nXOR ECX,ECX\nNOP\nMOV R8D,ECX\nCMP R10B,0x2f\nMOVZX R10D,byte ptr [RDI + RAX*0x1 + 0x1]\nMOVZX R11D,byte ptr [RSI + RAX*0x1 + 0x1]\nLEA RAX,[RAX + 0x1]\nMOV ECX,EAX\nCMOVNZ ECX,R8D\nTEST R10B,R10B\nSETZ R9B\nTEST R11B,R11B\nSETZ R8B\nCMP R10B,R11B\nJNZ 0x00402eff\nMOV EDX,R9D\nOR DL,R8B\nXOR DL,0x1\nJNZ 0x00402ec0\nJMP 0x00402eff\nXOR ECX,ECX\nCMP R11B,0x2f\nMOV EDX,ECX\nCMOVZ EDX,EAX\nTEST R9B,R9B\nCMOVZ EDX,ECX\nOR R11B,R10B\nCMOVZ EDX,EAX\nTEST R8B,R8B\nCMOVZ EAX,EDX\nCMP R10B,0x2f\nCMOVNZ EAX,EDX\nRET\n'
p1124
S'80 7f 01 2f\n0f 94 c0\n80 7e 01 2f\n0f 94 c1\n30 c1\n74 03\n31 c0\nc3\n44 8a 17\n45 84 d2\n41 0f 94 c1\n44 8a 1e\n45 84 db\n41 0f 94 c0\n31 c0\n45 38 da\n75 4d\n44 89 c9\n44 08 c1\n80 f1 01\n74 42\n31 c0\n31 c9\n90\n41 89 c8\n41 80 fa 2f\n44 0f b6 54 07 01\n44 0f b6 5c 06 01\n48 8d 40 01\n89 c1\n41 0f 45 c8\n45 84 d2\n41 0f 94 c1\n45 84 db\n41 0f 94 c0\n45 38 da\n75 0f\n44 89 ca\n44 08 c2\n80 f2 01\n75 c5\neb 02\n31 c9\n41 80 fb 2f\n89 ca\n0f 44 d0\n45 84 c9\n0f 44 d1\n45 08 d3\n0f 44 d0\n45 84 c0\n0f 44 c2\n41 80 fa 2f\n0f 45 c2\nc3\n'
p1125
S'.text:0000000000402e80\n.text:0000000000402e84\n.text:0000000000402e87\n.text:0000000000402e8b\n.text:0000000000402e8e\n.text:0000000000402e90\n.text:0000000000402e92\n.text:0000000000402e94\n.text:0000000000402e95\n.text:0000000000402e98\n.text:0000000000402e9b\n.text:0000000000402e9f\n.text:0000000000402ea2\n.text:0000000000402ea5\n.text:0000000000402ea9\n.text:0000000000402eab\n.text:0000000000402eae\n.text:0000000000402eb0\n.text:0000000000402eb3\n.text:0000000000402eb6\n.text:0000000000402eb9\n.text:0000000000402ebb\n.text:0000000000402ebd\n.text:0000000000402ebf\n.text:0000000000402ec0\n.text:0000000000402ec3\n.text:0000000000402ec7\n.text:0000000000402ecd\n.text:0000000000402ed3\n.text:0000000000402ed7\n.text:0000000000402ed9\n.text:0000000000402edd\n.text:0000000000402ee0\n.text:0000000000402ee4\n.text:0000000000402ee7\n.text:0000000000402eeb\n.text:0000000000402eee\n.text:0000000000402ef0\n.text:0000000000402ef3\n.text:0000000000402ef6\n.text:0000000000402ef9\n.text:0000000000402efb\n.text:0000000000402efd\n.text:0000000000402eff\n.text:0000000000402f03\n.text:0000000000402f05\n.text:0000000000402f08\n.text:0000000000402f0b\n.text:0000000000402f0e\n.text:0000000000402f11\n.text:0000000000402f14\n.text:0000000000402f17\n.text:0000000000402f1a\n.text:0000000000402f1e\n.text:0000000000402f21\n'
p1126
tp1127
sS'xcalloc'
p1128
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p1129
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1130
S'PUSH RAX\nCALL 0x004071e0\nTEST RAX,RAX\nJZ 0x004070ad\nPOP RCX\nRET\nCALL 0x00407110\n'
p1131
S'50\ne8 3a 01 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p1132
S'.text:00000000004070a0\n.text:00000000004070a1\n.text:00000000004070a6\n.text:00000000004070a9\n.text:00000000004070ab\n.text:00000000004070ac\n.text:00000000004070ad\n'
p1133
tp1134
sS'readdir'
p1135
(S'\n__stdcall readdir(DIR * __dirp)\n'
p1136
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000adirent * readdir(DIR *__dirp)\u000a\u000a{\u000a  dirent *pdVar1;\u000a  \u000a  pdVar1 = (dirent *)(*(code *)PTR_readdir_0060d170)();\u000a  return pdVar1;\u000a}\u000a\u000a
p1137
S'JMP qword ptr [0x0060d170]\n'
p1138
S'ff 25 8a b8 20 00\n'
p1139
S'.plt:00000000004018e0\n'
p1140
tp1141
sS'pathconf'
p1142
(S'\n__stdcall pathconf(char * __path, int __name)\n'
p1143
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000along pathconf(char *__path,int __name)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  lVar1 = (*(code *)PTR_pathconf_0060d088)();\u000a  return lVar1;\u000a}\u000a\u000a
p1144
S'JMP qword ptr [0x0060d088]\n'
p1145
S'ff 25 72 b9 20 00\n'
p1146
S'.plt:0000000000401710\n'
p1147
tp1148
sS'clear_ungetc_buffer_preserving_position'
p1149
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p1150
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p1151
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00407427\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00407470\n'
p1152
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 3d 00 00 00\n'
p1153
S'.text:0000000000407420\n.text:0000000000407424\n.text:0000000000407426\n.text:0000000000407427\n.text:0000000000407429\n.text:000000000040742e\n'
p1154
tp1155
sS'symlink'
p1156
(S'\n__stdcall symlink(char * __from, char * __to)\n'
p1157
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint symlink(char *__from,char *__to)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_symlink_0060d0d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p1158
S'JMP qword ptr [0x0060d0d8]\n'
p1159
S'ff 25 22 b9 20 00\n'
p1160
S'.plt:00000000004017b0\n'
p1161
tp1162
sS'xnmalloc'
p1163
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p1164
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1165
S'MOV RAX,RDI\nMUL RSI\nJO 0x00406f71\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00406f80\nPUSH RAX\nCALL 0x00407110\n'
p1166
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p1167
S'.text:0000000000406f60\n.text:0000000000406f63\n.text:0000000000406f66\n.text:0000000000406f68\n.text:0000000000406f6c\n.text:0000000000406f6f\n.text:0000000000406f71\n.text:0000000000406f72\n'
p1168
tp1169
sS'hash_string'
p1170
(S'\n__stdcall hash_string(char * string, size_t n_buckets)\n'
p1171
V\u000asize_t hash_string(char *string,size_t n_buckets)\u000a\u000a{\u000a  byte bVar1;\u000a  ulong uVar2;\u000a  byte *pbVar3;\u000a  \u000a  bVar1 = *string;\u000a  if (bVar1 != 0) {\u000a    pbVar3 = (byte *)(string + 1);\u000a    uVar2 = 0;\u000a    do {\u000a      uVar2 = ((ulong)bVar1 + uVar2 * 0x1f) % n_buckets;\u000a      bVar1 = *pbVar3;\u000a      pbVar3 = pbVar3 + 1;\u000a    } while (bVar1 != 0);\u000a    return uVar2;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1172
S'MOV AL,byte ptr [RDI]\nTEST AL,AL\nJZ 0x004043d3\nINC RDI\nXOR EDX,EDX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RCX,RDX\nSHL RCX,0x5\nSUB RCX,RDX\nMOVZX EAX,AL\nADD RAX,RCX\nXOR EDX,EDX\nDIV RSI\nMOVZX EAX,byte ptr [RDI]\nINC RDI\nTEST AL,AL\nJNZ 0x004043b0\nMOV RAX,RDX\nRET\nXOR EDX,EDX\nMOV RAX,RDX\nRET\n'
p1173
S'8a 07\n84 c0\n74 2d\n48 ff c7\n31 d2\n0f 1f 44 00 00\n48 89 d1\n48 c1 e1 05\n48 29 d1\n0f b6 c0\n48 01 c8\n31 d2\n48 f7 f6\n0f b6 07\n48 ff c7\n84 c0\n75 e1\n48 89 d0\nc3\n31 d2\n48 89 d0\nc3\n'
p1174
S'.text:00000000004043a0\n.text:00000000004043a2\n.text:00000000004043a4\n.text:00000000004043a6\n.text:00000000004043a9\n.text:00000000004043ab\n.text:00000000004043b0\n.text:00000000004043b3\n.text:00000000004043b7\n.text:00000000004043ba\n.text:00000000004043bd\n.text:00000000004043c0\n.text:00000000004043c2\n.text:00000000004043c5\n.text:00000000004043c8\n.text:00000000004043cb\n.text:00000000004043cd\n.text:00000000004043cf\n.text:00000000004043d2\n.text:00000000004043d3\n.text:00000000004043d5\n.text:00000000004043d8\n'
p1175
tp1176
sS'FUN_00401620'
p1177
(S'\n__stdcall FUN_00401620()\n'
p1178
V\u000avoid FUN_00401620(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_0060d010)();\u000a  return;\u000a}\u000a\u000a
p1179
S'PUSH qword ptr [0x0060d008]\nJMP qword ptr [0x0060d010]\n'
p1180
S'ff 35 e2 b9 20 00\nff 25 e4 b9 20 00\n'
p1181
S'.plt:0000000000401620\n.plt:0000000000401626\n'
p1182
tp1183
sS'quotearg_char'
p1184
(S'\n__stdcall quotearg_char(char * arg)\n'
p1185
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1186
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00406350\n'
p1187
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p1188
S'.text:00000000004063c0\n.text:00000000004063c2\n.text:00000000004063c9\n.text:00000000004063cb\n'
p1189
tp1190
sS'malloc'
p1191
(S'\n__stdcall malloc(size_t __size)\n'
p1192
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_0060d188)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1193
S'JMP qword ptr [0x0060d188]\n'
p1194
S'ff 25 72 b8 20 00\n'
p1195
S'.plt:0000000000401910\n'
p1196
tp1197
sS'argmatch_invalid'
p1198
(S'\n__stdcall argmatch_invalid(char * context, char * value, ptrdiff_t problem)\n'
p1199
V\u000avoid argmatch_invalid(char *context,char *value,ptrdiff_t problem)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  \u000a  pcVar2 = "ambiguous argument %s for %s";\u000a  if (problem == -1) {\u000a    pcVar2 = "invalid argument %s for %s";\u000a  }\u000a  uVar1 = dcgettext(0,pcVar2,5);\u000a  pcVar2 = quotearg_n_style((char *)0x0);\u000a  pcVar3 = quote_n((char *)0x1);\u000a  error(0,0,uVar1,pcVar2,pcVar3);\u000a  return;\u000a}\u000a\u000a
p1200
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RSI\nMOV R14,RDI\nCMP RDX,-0x1\nMOV EAX,0x40a130\nMOV ESI,0x40a14b\nCMOVZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00401750\nMOV R12,RAX\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,R15\nCALL 0x00406230\nMOV R15,RAX\nMOV EDI,0x1\nMOV RSI,R14\nCALL 0x00406520\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R12\nMOV RCX,R15\nMOV R8,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004019c0\n'
p1201
S'41 57\n41 56\n41 54\n53\n50\n49 89 f7\n49 89 fe\n48 83 fa ff\nb8 30 a1 40 00\nbe 4b a1 40 00\n48 0f 44 f0\n31 ff\nba 05 00 00 00\ne8 64 a0 ff ff\n49 89 c4\n31 ff\nbe 08 00 00 00\n4c 89 fa\ne8 32 eb ff ff\n49 89 c7\nbf 01 00 00 00\n4c 89 f6\ne8 12 ee ff ff\n48 89 c3\n31 ff\n31 f6\n31 c0\n4c 89 e2\n4c 89 f9\n49 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 90 a2 ff ff\n'
p1202
S'.text:00000000004076c0\n.text:00000000004076c2\n.text:00000000004076c4\n.text:00000000004076c6\n.text:00000000004076c7\n.text:00000000004076c8\n.text:00000000004076cb\n.text:00000000004076ce\n.text:00000000004076d2\n.text:00000000004076d7\n.text:00000000004076dc\n.text:00000000004076e0\n.text:00000000004076e2\n.text:00000000004076e7\n.text:00000000004076ec\n.text:00000000004076ef\n.text:00000000004076f1\n.text:00000000004076f6\n.text:00000000004076f9\n.text:00000000004076fe\n.text:0000000000407701\n.text:0000000000407706\n.text:0000000000407709\n.text:000000000040770e\n.text:0000000000407711\n.text:0000000000407713\n.text:0000000000407715\n.text:0000000000407717\n.text:000000000040771a\n.text:000000000040771d\n.text:0000000000407720\n.text:0000000000407724\n.text:0000000000407725\n.text:0000000000407727\n.text:0000000000407729\n.text:000000000040772b\n'
p1203
tp1204
sS'c_tolower'
p1205
(S'\n__stdcall c_tolower()\n'
p1206
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1207
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p1208
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p1209
S'.text:0000000000407b10\n.text:0000000000407b13\n.text:0000000000407b16\n.text:0000000000407b19\n.text:0000000000407b1c\n'
p1210
tp1211
sS'getopt_long'
p1212
(S'\n__stdcall getopt_long()\n'
p1213
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_0060d0c8)();\u000a  return;\u000a}\u000a\u000a
p1214
S'JMP qword ptr [0x0060d0c8]\n'
p1215
S'ff 25 32 b9 20 00\n'
p1216
S'.plt:0000000000401790\n'
p1217
tp1218
sS'quotearg_style'
p1219
(S'\n__stdcall quotearg_style(char * arg)\n'
p1220
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1221
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00406230\n'
p1222
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p1223
S'.text:0000000000406310\n.text:0000000000406313\n.text:0000000000406315\n.text:0000000000406317\n.text:0000000000406319\n.text:000000000040631c\n'
p1224
tp1225
sS'areadlink_with_size'
p1226
(S'\n__stdcall areadlink_with_size(char * file, size_t size)\n'
p1227
V\u000achar * areadlink_with_size(char *file,size_t size)\u000a\u000a{\u000a  int iVar1;\u000a  char *__buf;\u000a  ulong uVar2;\u000a  int *piVar3;\u000a  ulong __size;\u000a  bool bVar4;\u000a  \u000a  __size = 0x401;\u000a  if (size < 0x401) {\u000a    __size = size + 1;\u000a  }\u000a  while( true ) {\u000a    __buf = (char *)malloc(__size);\u000a    if (__buf == (char *)0x0) {\u000a      return (char *)0x0;\u000a    }\u000a    uVar2 = readlink(file,__buf,__size);\u000a    if ((long)uVar2 < 0) {\u000a      piVar3 = __errno_location();\u000a      iVar1 = *piVar3;\u000a      if (iVar1 != 0x22) {\u000a        free(__buf);\u000a        *piVar3 = iVar1;\u000a        return (char *)0x0;\u000a      }\u000a    }\u000a    if (uVar2 < __size) break;\u000a    free(__buf);\u000a    if (__size >> 0x3e == 0) {\u000a      __size = __size * 2;\u000a    }\u000a    else {\u000a      bVar4 = 0x7ffffffffffffffe < __size;\u000a      __size = 0x7fffffffffffffff;\u000a      if (bVar4) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = 0xc;\u000a        return (char *)0x0;\u000a      }\u000a    }\u000a  }\u000a  __buf[uVar2] = 0;\u000a  return __buf;\u000a}\u000a\u000a
p1228
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCMP RSI,0x401\nLEA RAX,[RSI + 0x1]\nMOV EBX,0x401\nCMOVC RBX,RAX\nJMP 0x00407513\nADD RBX,RBX\nMOV RDI,RBX\nCALL 0x00401910\nMOV R15,RAX\nTEST R15,R15\nJZ 0x00407592\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,RBX\nCALL 0x004016e0\nMOV R12,RAX\nTEST R12,R12\nJNS 0x0040754a\nCALL 0x00401670\nMOV R13,RAX\nMOV EBP,dword ptr [R13]\nCMP EBP,0x22\nJNZ 0x00407586\nCMP R12,RBX\nJC 0x0040757f\nMOV RDI,R15\nCALL 0x00401640\nMOV RAX,RBX\nSHR RAX,0x3e\nJZ 0x00407510\nMOV RAX,0x7fffffffffffffff\nCMP RBX,RAX\nMOV RBX,RAX\nJC 0x00407513\nCALL 0x00401670\nMOV dword ptr [RAX],0xc\nJMP 0x00407592\nMOV byte ptr [R15 + R12*0x1],0x0\nJMP 0x00407595\nMOV RDI,R15\nCALL 0x00401640\nMOV dword ptr [R13],EBP\nXOR R15D,R15D\nMOV RAX,R15\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1229
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 fe\n48 81 fe 01 04 00 00\n48 8d 46 01\nbb 01 04 00 00\n48 0f 42 d8\neb 0f\n48 01 db\n48 89 df\ne8 f5 a3 ff ff\n49 89 c7\n4d 85 ff\n74 6f\n4c 89 f7\n4c 89 fe\n48 89 da\ne8 af a1 ff ff\n49 89 c4\n4d 85 e4\n79 11\ne8 32 a1 ff ff\n49 89 c5\n41 8b 6d 00\n83 fd 22\n75 3c\n49 39 dc\n72 30\n4c 89 ff\ne8 e9 a0 ff ff\n48 89 d8\n48 c1 e8 3e\n74 b0\n48 b8 ff ff ff ff ff ff ff 7f\n48 39 c3\n48 89 c3\n72 a1\ne8 f9 a0 ff ff\nc7 00 0c 00 00 00\neb 13\n43 c6 04 27 00\neb 0f\n4c 89 ff\ne8 b2 a0 ff ff\n41 89 6d 00\n45 31 ff\n4c 89 f8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1230
S'.text:00000000004074e0\n.text:00000000004074e1\n.text:00000000004074e3\n.text:00000000004074e5\n.text:00000000004074e7\n.text:00000000004074e9\n.text:00000000004074ea\n.text:00000000004074eb\n.text:00000000004074ee\n.text:00000000004074f5\n.text:00000000004074f9\n.text:00000000004074fe\n.text:0000000000407502\n.text:0000000000407510\n.text:0000000000407513\n.text:0000000000407516\n.text:000000000040751b\n.text:000000000040751e\n.text:0000000000407521\n.text:0000000000407523\n.text:0000000000407526\n.text:0000000000407529\n.text:000000000040752c\n.text:0000000000407531\n.text:0000000000407534\n.text:0000000000407537\n.text:0000000000407539\n.text:000000000040753e\n.text:0000000000407541\n.text:0000000000407545\n.text:0000000000407548\n.text:000000000040754a\n.text:000000000040754d\n.text:000000000040754f\n.text:0000000000407552\n.text:0000000000407557\n.text:000000000040755a\n.text:000000000040755e\n.text:0000000000407560\n.text:000000000040756a\n.text:000000000040756d\n.text:0000000000407570\n.text:0000000000407572\n.text:0000000000407577\n.text:000000000040757d\n.text:000000000040757f\n.text:0000000000407584\n.text:0000000000407586\n.text:0000000000407589\n.text:000000000040758e\n.text:0000000000407592\n.text:0000000000407595\n.text:0000000000407598\n.text:000000000040759c\n.text:000000000040759d\n.text:000000000040759f\n.text:00000000004075a1\n.text:00000000004075a3\n.text:00000000004075a5\n.text:00000000004075a6\n'
p1231
tp1232
sS'get_version'
p1233
(S'\n__stdcall get_version(char * context, char * version)\n'
p1234
V\u000abackup_type get_version(char *context,char *version)\u000a\u000a{\u000a  backup_type bVar1;\u000a  ptrdiff_t pVar2;\u000a  \u000a  bVar1 = numbered_existing_backups;\u000a  if ((version != (char *)0x0) && (*version != 0)) {\u000a    pVar2 = __xargmatch_internal(context,version,backup_args,(char *)backup_types,4,argmatch_die);\u000a    bVar1 = backup_types[pVar2];\u000a  }\u000a  return bVar1;\u000a}\u000a\u000a
p1235
S'MOV EAX,0x2\nTEST RSI,RSI\nJZ 0x004033e7\nCMP byte ptr [RSI],0x0\nJZ 0x004033e7\nPUSH RAX\nMOV R9,qword ptr [0x0060d2c8]\nMOV EDX,0x4096e0\nMOV ECX,0x4096c0\nMOV R8D,0x4\nCALL 0x00407820\nMOV EAX,dword ptr [0x4096c0 + RAX*0x4]\nADD RSP,0x8\nRET\n'
p1236
S'b8 02 00 00 00\n48 85 f6\n74 2d\n80 3e 00\n74 28\n50\n4c 8b 0d 01 9f 20 00\nba e0 96 40 00\nb9 c0 96 40 00\n41 b8 04 00 00 00\ne8 44 44 00 00\n8b 04 85 c0 96 40 00\n48 83 c4 08\nc3\n'
p1237
S'.text:00000000004033b0\n.text:00000000004033b5\n.text:00000000004033b8\n.text:00000000004033ba\n.text:00000000004033bd\n.text:00000000004033bf\n.text:00000000004033c0\n.text:00000000004033c7\n.text:00000000004033cc\n.text:00000000004033d1\n.text:00000000004033d7\n.text:00000000004033dc\n.text:00000000004033e3\n.text:00000000004033e7\n'
p1238
tp1239
sS'__argmatch_die'
p1240
(S'\n__stdcall __argmatch_die()\n'
p1241
V\u000avoid __argmatch_die(void)\u000a\u000a{\u000a  usage(1);\u000a  return;\u000a}\u000a\u000a
p1242
S'MOV EDI,0x1\nJMP 0x00401b90\n'
p1243
S'bf 01 00 00 00\ne9 d6 a5 ff ff\n'
p1244
S'.text:00000000004075b0\n.text:00000000004075b5\n'
p1245
tp1246
sS'hash_get_n_buckets'
p1247
(S'\n__stdcall hash_get_n_buckets(Hash_table * table)\n'
p1248
V\u000asize_t hash_get_n_buckets(Hash_table *table)\u000a\u000a{\u000a  return table->n_buckets;\u000a}\u000a\u000a
p1249
S'MOV RAX,qword ptr [RDI + 0x10]\nRET\n'
p1250
S'48 8b 47 10\nc3\n'
p1251
S'.text:0000000000403fd0\n.text:0000000000403fd4\n'
p1252
tp1253
sS'emit_try_help'
p1254
(S'\n__stdcall emit_try_help()\n'
p1255
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p1256
S'PUSH RBX\nMOV RBX,qword ptr [0x0060d320]\nXOR EDI,EDI\nMOV ESI,0x4092b4\nMOV EDX,0x5\nCALL 0x00401750\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060d360]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401a50\n'
p1257
S'53\n48 8b 1d f8 b5 20 00\n31 ff\nbe b4 92 40 00\nba 05 00 00 00\ne8 17 fa ff ff\n48 89 c2\n48 8b 0d 1d b6 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 fd fc ff ff\n'
p1258
S'.text:0000000000401d20\n.text:0000000000401d21\n.text:0000000000401d28\n.text:0000000000401d2a\n.text:0000000000401d2f\n.text:0000000000401d34\n.text:0000000000401d39\n.text:0000000000401d3c\n.text:0000000000401d43\n.text:0000000000401d48\n.text:0000000000401d4a\n.text:0000000000401d4d\n.text:0000000000401d4e\n'
p1259
tp1260
sS'rename'
p1261
(S'\n__stdcall rename(char * __old, char * __new)\n'
p1262
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint rename(char *__old,char *__new)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_rename_0060d1f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p1263
S'JMP qword ptr [0x0060d1f8]\n'
p1264
S'ff 25 02 b8 20 00\n'
p1265
S'.plt:00000000004019f0\n'
p1266
tp1267
sS'strrchr'
p1268
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p1269
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_0060d0e0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1270
S'JMP qword ptr [0x0060d0e0]\n'
p1271
S'ff 25 1a b9 20 00\n'
p1272
S'.plt:00000000004017c0\n'
p1273
tp1274
sS'quotearg_alloc_mem'
p1275
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p1276
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p1277
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x60d370\nCMOVNZ R12,RCX\nCALL 0x00401670\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00405260\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00407050\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00405260\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x00405f8a\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1278
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc 70 d3 60 00\n4c 0f 45 e1\ne8 88 b7 ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 11 11 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1279
S'.text:0000000000405eb0\n.text:0000000000405eb1\n.text:0000000000405eb3\n.text:0000000000405eb5\n.text:0000000000405eb7\n.text:0000000000405eb9\n.text:0000000000405eba\n.text:0000000000405ebe\n.text:0000000000405ec1\n.text:0000000000405ec6\n.text:0000000000405ec9\n.text:0000000000405ece\n.text:0000000000405ed1\n.text:0000000000405ed6\n.text:0000000000405ed9\n.text:0000000000405edf\n.text:0000000000405ee3\n.text:0000000000405ee8\n.text:0000000000405eed\n.text:0000000000405eef\n.text:0000000000405ef3\n.text:0000000000405ef5\n.text:0000000000405ef8\n.text:0000000000405efc\n.text:0000000000405f01\n.text:0000000000405f05\n.text:0000000000405f0a\n.text:0000000000405f0e\n.text:0000000000405f10\n.text:0000000000405f12\n.text:0000000000405f15\n.text:0000000000405f18\n.text:0000000000405f1b\n.text:0000000000405f20\n.text:0000000000405f25\n.text:0000000000405f27\n.text:0000000000405f2c\n.text:0000000000405f30\n.text:0000000000405f33\n.text:0000000000405f37\n.text:0000000000405f3a\n.text:0000000000405f3f\n.text:0000000000405f42\n.text:0000000000405f46\n.text:0000000000405f4a\n.text:0000000000405f4d\n.text:0000000000405f50\n.text:0000000000405f55\n.text:0000000000405f5a\n.text:0000000000405f5d\n.text:0000000000405f62\n.text:0000000000405f67\n.text:0000000000405f69\n.text:0000000000405f6e\n.text:0000000000405f73\n.text:0000000000405f77\n.text:0000000000405f7a\n.text:0000000000405f7e\n.text:0000000000405f83\n.text:0000000000405f85\n.text:0000000000405f87\n.text:0000000000405f8a\n.text:0000000000405f8d\n.text:0000000000405f91\n.text:0000000000405f92\n.text:0000000000405f94\n.text:0000000000405f96\n.text:0000000000405f98\n.text:0000000000405f9a\n.text:0000000000405f9b\n'
p1280
tp1281
sS'quotearg_style_mem'
p1282
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p1283
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1284
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x004062d0\n'
p1285
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p1286
S'.text:0000000000406330\n.text:0000000000406333\n.text:0000000000406336\n.text:0000000000406338\n.text:000000000040633a\n.text:000000000040633c\n.text:000000000040633f\n.text:0000000000406342\n'
p1287
tp1288
sS'xalloc_die'
p1289
(S'\n__stdcall xalloc_die()\n'
p1290
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,&DAT_0040a187,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1291
S'PUSH RBX\nMOV EBX,dword ptr [0x0060d268]\nXOR EDI,EDI\nMOV ESI,0x40a11f\nMOV EDX,0x5\nCALL 0x00401750\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x40a187\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x004019c0\nCALL 0x00401660\n'
p1292
S'53\n8b 1d 51 61 20 00\n31 ff\nbe 1f a1 40 00\nba 05 00 00 00\ne8 28 a6 ff ff\n48 89 c1\n31 f6\nba 87 a1 40 00\n31 c0\n89 df\ne8 85 a8 ff ff\ne8 20 a5 ff ff\n'
p1293
S'.text:0000000000407110\n.text:0000000000407111\n.text:0000000000407117\n.text:0000000000407119\n.text:000000000040711e\n.text:0000000000407123\n.text:0000000000407128\n.text:000000000040712b\n.text:000000000040712d\n.text:0000000000407132\n.text:0000000000407134\n.text:0000000000407136\n.text:000000000040713b\n'
p1294
tp1295
sS'quotearg_n_custom'
p1296
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p1297
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1298
S'MOV R8,-0x1\nJMP 0x00406450\n'
p1299
S'49 c7 c0 ff ff ff ff\neb 07\n'
p1300
S'.text:0000000000406440\n.text:0000000000406447\n'
p1301
tp1302
sS'strip_trailing_slashes'
p1303
(S'\n__stdcall strip_trailing_slashes(char * file)\n'
p1304
V\u000a_Bool strip_trailing_slashes(char *file)\u000a\u000a{\u000a  char cVar1;\u000a  char *name;\u000a  size_t sVar2;\u000a  \u000a  name = last_component(file);\u000a  if (*name == 0) {\u000a    name = file;\u000a  }\u000a  sVar2 = base_len(name);\u000a  cVar1 = name[sVar2];\u000a  name[sVar2] = 0;\u000a  return (_Bool)(cVar1 != 0);\u000a}\u000a\u000a
p1305
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00403d10\nMOV RBX,RAX\nCMP byte ptr [RBX],0x0\nCMOVZ RBX,R14\nMOV RDI,RBX\nCALL 0x00403d70\nCMP byte ptr [RBX + RAX*0x1],0x0\nSETNZ CL\nMOV byte ptr [RBX + RAX*0x1],0x0\nMOV EAX,ECX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1306
S'41 56\n53\n50\n49 89 fe\ne8 64 ff ff ff\n48 89 c3\n80 3b 00\n49 0f 44 de\n48 89 df\ne8 b2 ff ff ff\n80 3c 03 00\n0f 95 c1\nc6 04 03 00\n89 c8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1307
S'.text:0000000000403da0\n.text:0000000000403da2\n.text:0000000000403da3\n.text:0000000000403da4\n.text:0000000000403da7\n.text:0000000000403dac\n.text:0000000000403daf\n.text:0000000000403db2\n.text:0000000000403db6\n.text:0000000000403db9\n.text:0000000000403dbe\n.text:0000000000403dc2\n.text:0000000000403dc5\n.text:0000000000403dc9\n.text:0000000000403dcb\n.text:0000000000403dcf\n.text:0000000000403dd0\n.text:0000000000403dd2\n'
p1308
tp1309
sS'__freading'
p1310
(S'\n__stdcall __freading()\n'
p1311
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_0060d1a8)();\u000a  return;\u000a}\u000a\u000a
p1312
S'JMP qword ptr [0x0060d1a8]\n'
p1313
S'ff 25 52 b8 20 00\n'
p1314
S'.plt:0000000000401950\n'
p1315
tp1316
sS'fputs_unlocked'
p1317
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p1318
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_0060d128)();\u000a  return iVar1;\u000a}\u000a\u000a
p1319
S'JMP qword ptr [0x0060d128]\n'
p1320
S'ff 25 d2 b8 20 00\n'
p1321
S'.plt:0000000000401850\n'
p1322
tp1323
sS'main'
p1324
(S'\n__stdcall main(char * * argv)\n'
p1325
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000aint main(char **argv)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  char *name;\u000a  char *pcVar4;\u000a  ulong uVar5;\u000a  undefined8 uVar6;\u000a  uint *puVar7;\u000a  char *context;\u000a  size_t sVar8;\u000a  uint uVar9;\u000a  uint uVar10;\u000a  ulong uVar11;\u000a  char **in_RSI;\u000a  char **ppcVar12;\u000a  bool bVar13;\u000a  stat st;\u000a  stat sStack416;\u000a  undefined8 uStack272;\u000a  char *pcStack264;\u000a  long lStack256;\u000a  ulong uStack248;\u000a  ulong uStack240;\u000a  undefined8 local_e8;\u000a  char *local_d8;\u000a  undefined8 local_d0;\u000a  char *local_c8;\u000a  stat local_c0;\u000a  \u000a  uVar11 = (ulong)argv & 0xffffffff;\u000a  uStack240 = 0x401ede;\u000a  set_program_name(*in_RSI);\u000a  uStack240 = 0x401eed;\u000a  setlocale(6,\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  uStack240 = 0x401efc;\u000a  bindtextdomain(0x4091ce,"/usr/local/share/locale");\u000a  uStack240 = 0x401f06;\u000a  textdomain(0x4091ce);\u000a  uStack240 = 0x401f10;\u000a  atexit(close_stdin);\u000a  uStack240 = 0x401f1a;\u000a  name = getenv("SIMPLE_BACKUP_SUFFIX");\u000a  hard_dir_link = 0;\u000a  verbose = 0;\u000a  interactive = 0;\u000a  remove_existing_files = 0;\u000a  symbolic_link = 0;\u000a  local_d0 = 0;\u000a  local_c8 = (char *)0x0;\u000a  context = (char *)0x0;\u000a  pcStack264 = (char *)0x0;\u000aswitchD_00401f88_caseD_54:\u000a  pcVar4 = context;\u000a  uStack248 = (ulong)pcVar4 & 0xffffffff;\u000a  uStack240 = 0x401f7a;\u000a  uVar5 = getopt_long(uVar11);\u000a  iVar3 = (int)uVar5;\u000a  if (iVar3 + 1U < 0x78) goto code_r0x00401f86;\u000a  if (iVar3 == -0x83) goto LAB_004023b0;\u000a  if (iVar3 == -0x82) {\u000a    uStack240 = 0x4023a6;\u000a    usage(0);\u000a  }\u000a  goto switchD_00401f88_caseD_0;\u000acode_r0x00401f86:\u000a  context = (char *)CONCAT71((int7)(uVar5 >> 8),1);\u000a  switch(iVar3) {\u000a  default:\u000aswitchD_00401f88_caseD_0:\u000a    uStack240 = 0x4023b0;\u000a    usage(1);\u000aLAB_004023b0:\u000a    local_e8 = 0;\u000a    uStack240 = 0x4023e3;\u000a    version_etc(stdout,"ln","GNU coreutils",Version,"Mike Parker","David MacKenzie");\u000a                    /* WARNING: Subroutine does not return */\u000a    uStack240 = 0x4023ea;\u000a    exit(0);\u000a  case 0x46:\u000a  case 100:\u000a    hard_dir_link = 1;\u000a    context = (char *)(uVar5 & 0xffffffffffffff00 | (ulong)pcVar4 & 0xff);\u000a    goto switchD_00401f88_caseD_54;\u000a  case 0x4c:\u000a    logical = 1;\u000a    context = (char *)(uVar5 & 0xffffffffffffff00 | (ulong)pcVar4 & 0xff);\u000a    goto switchD_00401f88_caseD_54;\u000a  case 0x50:\u000a    logical = 0;\u000a    context = (char *)(uVar5 & 0xffffffffffffff00 | (ulong)pcVar4 & 0xff);\u000a    goto switchD_00401f88_caseD_54;\u000a  case 0x53:\u000a    name = optarg;\u000a    break;\u000a  case 0x54:\u000a    goto switchD_00401f88_caseD_54;\u000a  case 0x62:\u000a    context = optarg;\u000a    if (optarg != (char *)0x0) {\u000a      context = optarg;\u000a      local_c8 = optarg;\u000a    }\u000a    break;\u000a  case 0x66:\u000a    remove_existing_files = 1;\u000a    interactive = 0;\u000a    context = (char *)(uVar5 & 0xffffffffffffff00 | (ulong)pcVar4 & 0xff);\u000a    goto switchD_00401f88_caseD_54;\u000a  case 0x69:\u000a    remove_existing_files = 0;\u000a    interactive = 1;\u000a    context = (char *)(uVar5 & 0xffffffffffffff00 | (ulong)pcVar4 & 0xff);\u000a    goto switchD_00401f88_caseD_54;\u000a  case 0x6e:\u000a    dereference_dest_dir_symlinks = 1;\u000a    context = (char *)(uVar5 & 0xffffffffffffff00 | (ulong)pcVar4 & 0xff);\u000a    goto switchD_00401f88_caseD_54;\u000a  case 0x72:\u000a    relative = 1;\u000a    context = (char *)(uVar5 & 0xffffffffffffff00 | (ulong)pcVar4 & 0xff);\u000a    goto switchD_00401f88_caseD_54;\u000a  case 0x73:\u000a    symbolic_link = 1;\u000a    context = (char *)(uVar5 & 0xffffffffffffff00 | (ulong)pcVar4 & 0xff);\u000a    goto switchD_00401f88_caseD_54;\u000a  case 0x74:\u000a    if (pcStack264 == (char *)0x0) {\u000a      uStack240 = 0x402079;\u000a      iVar3 = stat(optarg,&local_c0);\u000a      if (iVar3 != 0) {\u000a        uStack240 = 0x402082;\u000a        puVar7 = (uint *)__errno_location();\u000a        local_d8 = (char *)((ulong)local_d8 & 0xffffffff00000000 | (ulong)*puVar7);\u000a        uStack240 = 0x402099;\u000a        uVar6 = dcgettext(0,"failed to access %s",5);\u000a        uStack240 = 0x4020b0;\u000a        context = quotearg_style((char *)0x4);\u000a        uStack240 = 0x4020c9;\u000a        error(1,(ulong)local_d8 & 0xffffffff,uVar6,context);\u000a      }\u000a      uVar5 = (ulong)(local_c0.st_mode & 0xf000);\u000a      if ((local_c0.st_mode & 0xf000) != 0x4000) {\u000a        uStack240 = 0x4020ec;\u000a        uVar6 = dcgettext(0,"target %s is not a directory",5);\u000a        uStack240 = 0x402100;\u000a        context = quotearg_style((char *)0x4);\u000a        uStack240 = 0x402114;\u000a        uVar5 = error(1,0,uVar6,context);\u000a      }\u000a    }\u000a    else {\u000a      uStack240 = 0x401fc1;\u000a      uVar6 = dcgettext(0,"multiple target directories specified",5);\u000a      uStack240 = 0x401fd5;\u000a      uVar5 = error(1,0,uVar6,uVar6);\u000a    }\u000a    context = (char *)(uVar5 & 0xffffffffffffff00 | (ulong)pcVar4 & 0xff);\u000a    pcStack264 = optarg;\u000a    goto switchD_00401f88_caseD_54;\u000a  case 0x76:\u000a    verbose = 1;\u000a    context = (char *)(uVar5 & 0xffffffffffffff00 | (ulong)pcVar4 & 0xff);\u000a    goto switchD_00401f88_caseD_54;\u000a  case -1:\u000a    goto switchD_00401f88_caseD_ffffffff;\u000a  }\u000a  local_d0 = CONCAT71((int7)((ulong)context >> 8),1);\u000a  context = (char *)((ulong)context & 0xffffffffffffff00 | (ulong)pcVar4 & 0xff);\u000a  goto switchD_00401f88_caseD_54;\u000aswitchD_00401f88_caseD_ffffffff:\u000a  lStack256 = (long)(int)uVar11 - (long)optind;\u000a  uVar10 = (uint)lStack256;\u000a  if (0 < (int)uVar10) {\u000a    ppcVar12 = in_RSI + (long)optind;\u000a    if ((char)uStack248 == 0) {\u000a      uVar9 = uVar10;\u000a      local_d8 = name;\u000a      if (pcStack264 == (char *)0x0) {\u000a        if ((int)uVar10 < 2) {\u000a          pcStack264 = ".";\u000a          uVar9 = 1;\u000a          local_d8 = name;\u000a        }\u000a        else {\u000a          uStack240 = 0x40232e;\u000a          local_d8 = name;\u000a          _Var2 = target_directory_operand(ppcVar12[lStack256 + -1]);\u000a          if (_Var2 == false) {\u000a            if ((int)uVar10 < 3) {\u000a              pcStack264 = (char *)0x0;\u000a              uVar9 = 2;\u000a            }\u000a            else {\u000a              pcStack264 = (char *)0x0;\u000a              uStack240 = 0x402359;\u000a              uVar6 = dcgettext(0,"target %s is not a directory",5);\u000a              uStack240 = 0x40236b;\u000a              context = quotearg_style((char *)0x4);\u000a              uStack240 = 0x40237f;\u000a              error(1,0,uVar6,context);\u000a              uVar9 = uVar10;\u000a            }\u000a          }\u000a          else {\u000a            pcStack264 = ppcVar12[lStack256 + -1];\u000a            uVar9 = uVar10 - 1;\u000a          }\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      local_d8 = name;\u000a      if (pcStack264 != (char *)0x0) {\u000a        uStack240 = 0x402162;\u000a        local_d8 = name;\u000a        uVar6 = dcgettext(0,"cannot combine --target-directory and --no-target-directory",5);\u000a        uStack240 = 0x402176;\u000a        error(1,0,uVar6,uVar6);\u000a      }\u000a      uVar11 = 2;\u000a      uVar9 = 2;\u000a      if (uVar10 != 2) {\u000a        if (1 < (int)uVar10) goto LAB_00402416;\u000a        uStack240 = 0x40219c;\u000a        uStack272 = dcgettext(0,"missing destination file operand after %s",5);\u000a        goto LAB_0040242c;\u000a      }\u000a    }\u000a    if (local_d8 != (char *)0x0) {\u000a      uStack240 = 0x4021c3;\u000a      simple_backup_suffix = xstrdup(local_d8);\u000a    }\u000a    if ((char)local_d0 == 0) {\u000a      backup_type = no_backups;\u000a    }\u000a    else {\u000a      uStack240 = 0x4021e2;\u000a      context = (char *)dcgettext(0,"backup type",5);\u000a      uStack240 = 0x4021ef;\u000a      backup_type = xget_version(context,local_c8);\u000a    }\u000a    if ((relative == 1) && (symbolic_link == 0)) {\u000a      uStack240 = 0x40221d;\u000a      uVar6 = dcgettext(0,"cannot do --relative without --symbolic",5);\u000a      uStack240 = 0x402231;\u000a      error(1,0,uVar6,uVar6);\u000a    }\u000a    if (pcStack264 == (char *)0x0) {\u000a      uStack240 = 0x402293;\u000a      _Var2 = do_link(*ppcVar12,ppcVar12[1]);\u000a    }\u000a    else {\u000a      if ((int)uVar9 < 2) {\u000a        _Var2 = true;\u000a        if (uVar9 != 1) goto LAB_004022f4;\u000a      }\u000a      else {\u000a        if (((remove_existing_files == 1) && (backup_type != numbered_backups)) &&\u000a           (((symbolic_link ^ 1) & 1) != 0)) {\u000a          uStack240 = 0x402275;\u000a          dest_set = hash_initialize(0x3d,(Hash_tuning *)0x0,triple_hash,triple_compare,triple_free)\u000a          ;\u000a          if (dest_set == (Hash_table *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a            uStack240 = 0x402286;\u000a            xalloc_die();\u000a          }\u000a        }\u000a      }\u000a      uVar11 = (ulong)uVar9;\u000a      _Var2 = true;\u000a      do {\u000a        uStack240 = 0x4022b9;\u000a        context = last_component(*ppcVar12);\u000a        uStack240 = 0x4022c7;\u000a        context = file_name_concat(pcStack264,context,(char **)&local_c0);\u000a        uStack240 = 0x4022d4;\u000a        strip_trailing_slashes(local_c0.st_dev);\u000a        uStack240 = 0x4022e0;\u000a        _Var1 = do_link(*ppcVar12,context);\u000a        _Var2 = (_Bool)(_Var2 & _Var1);\u000a        uStack240 = 0x4022eb;\u000a        free(context);\u000a        ppcVar12 = ppcVar12 + 1;\u000a        uVar11 = uVar11 - 1;\u000a      } while (uVar11 != 0);\u000a    }\u000aLAB_004022f4:\u000a    return (int)(uint)(_Var2 ^ 1);\u000a  }\u000a  uStack240 = 0x4023fb;\u000a  local_d8 = name;\u000a  uVar6 = dcgettext(0,"missing file operand",5);\u000a  uStack240 = 0x40240c;\u000a  error(0,0,uVar6,uVar6);\u000a  uStack240 = 0x402416;\u000a  usage(1);\u000aLAB_00402416:\u000a  uStack240 = 0x402425;\u000a  uStack272 = dcgettext();\u000aLAB_0040242c:\u000a  uStack240 = 0x402436;\u000a  context = quotearg_style((char *)0x4);\u000a  uStack240 = 0x402447;\u000a  error(0,0,uStack272,context);\u000a  name = (char *)0x1;\u000a  uStack240 = 0x402451;\u000a  usage();\u000a  uStack240 = uVar11;\u000a  context = last_component(name);\u000a  sVar8 = strlen(context);\u000a  if (sVar8 == 0) {\u000a    bVar13 = true;\u000a  }\u000a  else {\u000a    bVar13 = context[sVar8 - 1] == '/';\u000a  }\u000a  if (dereference_dest_dir_symlinks == 0) {\u000a    iVar3 = stat(name,&sStack416);\u000a  }\u000a  else {\u000a    iVar3 = lstat(name,&sStack416);\u000a  }\u000a  if (iVar3 != 0) {\u000a    puVar7 = (uint *)__errno_location();\u000a    uVar11 = (ulong)*puVar7;\u000a    if (*puVar7 != 0) {\u000a      __errno_location();\u000a      _Var2 = errno_nonexisting();\u000a      uVar10 = 0;\u000a      if (_Var2 == false) {\u000a        uVar6 = dcgettext(0,"failed to access %s",5);\u000a        context = quotearg_style((char *)0x4);\u000a        error(1,uVar11,uVar6,context);\u000a      }\u000a      goto LAB_00402523;\u000a    }\u000a  }\u000a  uVar10 = (uint)context & 0xffffff00 | (uint)((sStack416.st_mode & 0xf000) == 0x4000);\u000a  uVar11 = 0;\u000aLAB_00402523:\u000a  if ((bVar13 & ((byte)uVar10 ^ 1)) == 1) {\u000a    uVar6 = dcgettext(0,"target %s is not a directory",5);\u000a    context = quotearg_style((char *)0x4);\u000a    error(1,uVar11,uVar6,context);\u000a  }\u000a  return (int)uVar10;\u000a}\u000a\u000a
p1326
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xb8\nMOV RBX,RSI\nMOV EBP,EDI\nMOV RDI,qword ptr [RBX]\nCALL 0x00405040\nMOV EDI,0x6\nMOV ESI,0x409ee9\nCALL 0x00401990\nMOV EDI,0x4091ce\nMOV ESI,0x409135\nCALL 0x00401740\nMOV EDI,0x4091ce\nCALL 0x00401700\nMOV EDI,0x403a20\nCALL 0x00408010\nMOV EDI,0x40914d\nCALL 0x00401630\nMOV R14,RAX\nMOV byte ptr [0x0060d330],0x0\nMOV byte ptr [0x0060d331],0x0\nMOV byte ptr [0x0060d332],0x0\nMOV byte ptr [0x0060d333],0x0\nMOV byte ptr [0x0060d334],0x0\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x18],RAX\nXOR R13D,R13D\nXOR R12D,R12D\nXOR EAX,EAX\nJMP 0x00401f60\nMOV byte ptr [0x0060d330],0x1\nMOV AL,R15B\nNOP dword ptr [RAX + RAX*0x1]\nMOV R15D,EAX\nMOV EDX,0x409162\nMOV ECX,0x408440\nXOR R8D,R8D\nMOV EDI,EBP\nMOV RSI,RBX\nCALL 0x00401790\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x77\nJA 0x00402391\nMOV AL,0x1\nJMP qword ptr [0x408080 + RCX*0x8]\nMOV byte ptr [0x0060d335],0x1\nMOV AL,R15B\nJMP 0x00401f60\nMOV byte ptr [0x0060d336],0x1\nMOV AL,R15B\nJMP 0x00401f60\nTEST R12,R12\nJZ 0x00402068\nXOR EDI,EDI\nMOV ESI,0x409173\nMOV EDX,0x5\nCALL 0x00401750\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004019c0\nJMP 0x00402114\nMOV byte ptr [0x0060d335],0x0\nMOV AL,R15B\nJMP 0x00401f60\nMOV R14,qword ptr [0x0060d300]\nJMP 0x00402000\nMOV RAX,qword ptr [0x0060d300]\nTEST RAX,RAX\nCMOVNZ R13,RAX\nMOV AL,0x1\nMOV qword ptr [RSP + 0x18],RAX\nMOV AL,R15B\nJMP 0x00401f60\nMOV byte ptr [0x0060d333],0x1\nMOV byte ptr [0x0060d332],0x0\nMOV AL,R15B\nJMP 0x00401f60\nMOV byte ptr [0x0060d333],0x0\nMOV byte ptr [0x0060d332],0x1\nMOV AL,R15B\nJMP 0x00401f60\nMOV byte ptr [0x0060d337],0x1\nMOV AL,R15B\nJMP 0x00401f60\nMOV byte ptr [0x0060d334],0x1\nMOV AL,R15B\nJMP 0x00401f60\nMOV byte ptr [0x0060d331],0x1\nMOV AL,R15B\nJMP 0x00401f60\nMOV RDI,qword ptr [0x0060d300]\nLEA RSI,[RSP + 0x28]\nCALL 0x00408040\nTEST EAX,EAX\nJZ 0x004020c9\nCALL 0x00401670\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x10],EAX\nXOR EDI,EDI\nMOV ESI,0x409199\nMOV EDX,0x5\nCALL 0x00401750\nMOV R12,R13\nMOV R13,RAX\nMOV RSI,qword ptr [0x0060d300]\nMOV EDI,0x4\nCALL 0x00406310\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,dword ptr [RSP + 0x10]\nMOV RDX,R13\nMOV R13,R12\nCALL 0x004019c0\nMOV EAX,dword ptr [RSP + 0x40]\nMOV ECX,0xf000\nAND EAX,ECX\nCMP EAX,0x4000\nJZ 0x00402114\nXOR EDI,EDI\nMOV ESI,0x4091ad\nMOV EDX,0x5\nCALL 0x00401750\nMOV R12,RAX\nMOV RSI,qword ptr [0x0060d300]\nMOV EDI,0x4\nCALL 0x00406310\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R12\nCALL 0x004019c0\nMOV R12,qword ptr [0x0060d300]\nMOV AL,R15B\nJMP 0x00401f60\nMOV qword ptr [RSP + 0x20],R13\nMOV qword ptr [RSP + 0x10],R14\nMOVSXD RAX,dword ptr [0x0060d2f8]\nMOVSXD R14,EBP\nSUB R14,RAX\nTEST R14D,R14D\nJLE 0x004023ea\nLEA R13,[RBX + RAX*0x8]\nTEST R15B,R15B\nJZ 0x004021a8\nTEST R12,R12\nJZ 0x00402176\nXOR EDI,EDI\nMOV ESI,0x409209\nMOV EDX,0x5\nCALL 0x00401750\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004019c0\nMOV EBP,0x2\nCMP R14D,0x2\nJZ 0x004021b4\nXOR EDI,EDI\nCMP R14D,0x1\nJG 0x00402416\nMOV ESI,0x409245\nMOV EDX,0x5\nCALL 0x00401750\nMOV RBX,RAX\nMOV RSI,qword ptr [R13]\nJMP 0x0040242c\nTEST R12,R12\nJZ 0x0040230e\nMOV EBP,R14D\nMOV RDI,qword ptr [RSP + 0x10]\nTEST RDI,RDI\nJZ 0x004021ca\nCALL 0x004070f0\nMOV qword ptr [0x0060d260],RAX\nCMP byte ptr [RSP + 0x18],0x0\nJZ 0x004021f1\nXOR EDI,EDI\nMOV ESI,0x409280\nMOV EDX,0x5\nCALL 0x00401750\nMOV RDI,RAX\nMOV RSI,qword ptr [RSP + 0x20]\nCALL 0x004033f0\nJMP 0x004021f3\nXOR EAX,EAX\nMOV dword ptr [0x0060d338],EAX\nCMP byte ptr [0x0060d337],0x1\nJNZ 0x00402231\nMOV AL,byte ptr [0x0060d334]\nTEST AL,AL\nJNZ 0x00402231\nXOR EDI,EDI\nMOV ESI,0x40928c\nMOV EDX,0x5\nCALL 0x00401750\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004019c0\nTEST R12,R12\nJZ 0x00402286\nCMP EBP,0x1\nJLE 0x00402298\nCMP byte ptr [0x0060d333],0x1\nJNZ 0x0040229d\nCMP dword ptr [0x0060d338],0x3\nJZ 0x0040229d\nMOV AL,byte ptr [0x0060d334]\nXOR AL,0x1\nTEST AL,0x1\nJZ 0x0040229d\nMOV EDI,0x3d\nXOR ESI,ESI\nMOV EDX,0x404f80\nMOV ECX,0x404fc0\nMOV R8D,0x405020\nCALL 0x00404400\nMOV qword ptr [0x0060d340],RAX\nTEST RAX,RAX\nJNZ 0x0040229d\nCALL 0x00407110\nMOV RDI,qword ptr [R13]\nMOV RSI,qword ptr [R13 + 0x8]\nCALL 0x00402580\nMOV R15D,EAX\nJMP 0x004022f4\nMOV R15B,0x1\nJNZ 0x004022f4\nMOV EBX,EBP\nMOV R15B,0x1\nLEA R14,[RSP + 0x28]\nNOP word ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [R13]\nCALL 0x00403d10\nMOV RDI,R12\nMOV RSI,RAX\nMOV RDX,R14\nCALL 0x00403ea0\nMOV RBP,RAX\nMOV RDI,qword ptr [RSP + 0x28]\nCALL 0x00403da0\nMOV RDI,qword ptr [R13]\nMOV RSI,RBP\nCALL 0x00402580\nAND R15B,AL\nMOV RDI,RBP\nCALL 0x00401640\nADD R13,0x8\nDEC RBX\nJNZ 0x004022b0\nXOR R15B,0x1\nMOVZX EAX,R15B\nADD RSP,0xb8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP R14D,0x2\nJGE 0x00402324\nMOV R12D,0x409655\nMOV EBP,0x1\nJMP 0x004021b4\nMOV RDI,qword ptr [R13 + R14*0x8 + -0x8]\nCALL 0x00402460\nTEST AL,AL\nJZ 0x0040233f\nMOV R12,qword ptr [R13 + R14*0x8 + -0x8]\nDEC R14\nJMP 0x004021b1\nCMP R14D,0x3\nJL 0x00402384\nXOR R12D,R12D\nXOR EDI,EDI\nMOV ESI,0x4091ad\nMOV EDX,0x5\nCALL 0x00401750\nMOV RBX,RAX\nMOV RSI,qword ptr [R13 + R14*0x8 + -0x8]\nMOV EDI,0x4\nCALL 0x00406310\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x004019c0\nJMP 0x004021b1\nMOV EBP,0x2\nXOR R12D,R12D\nJMP 0x004021b4\nCMP EAX,0xffffff7d\nJZ 0x004023b0\nCMP EAX,0xffffff7e\nJNZ 0x004023a6\nXOR EDI,EDI\nCALL 0x00401b90\nMOV EDI,0x1\nCALL 0x00401b90\nMOV RDI,qword ptr [0x0060d2e8]\nMOV RCX,qword ptr [0x0060d258]\nMOV qword ptr [RSP],0x0\nMOV ESI,0x409132\nMOV EDX,0x4091ca\nMOV R8D,0x4091d8\nMOV R9D,0x4091e4\nXOR EAX,EAX\nCALL 0x00406e50\nXOR EDI,EDI\nCALL 0x00401a30\nXOR EDI,EDI\nMOV ESI,0x4091f4\nMOV EDX,0x5\nCALL 0x00401750\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004019c0\nMOV EDI,0x1\nCALL 0x00401b90\nMOV ESI,0x40926f\nMOV EDX,0x5\nCALL 0x00401750\nMOV RBX,RAX\nMOV RSI,qword ptr [R13 + 0x10]\nMOV EDI,0x4\nCALL 0x00406310\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x004019c0\nMOV EDI,0x1\nCALL 0x00401b90\nNOP dword ptr CS:[RAX + RAX*0x1]\n'
p1327
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec b8 00 00 00\n48 89 f3\n89 fd\n48 8b 3b\ne8 62 31 00 00\nbf 06 00 00 00\nbe e9 9e 40 00\ne8 a3 fa ff ff\nbf ce 91 40 00\nbe 35 91 40 00\ne8 44 f8 ff ff\nbf ce 91 40 00\ne8 fa f7 ff ff\nbf 20 3a 40 00\ne8 00 61 00 00\nbf 4d 91 40 00\ne8 16 f7 ff ff\n49 89 c6\nc6 05 0c b4 20 00 00\nc6 05 06 b4 20 00 00\nc6 05 00 b4 20 00 00\nc6 05 fa b3 20 00 00\nc6 05 f4 b3 20 00 00\n31 c0\n48 89 44 24 18\n45 31 ed\n45 31 e4\n31 c0\neb 0f\nc6 05 d8 b3 20 00 01\n44 88 f8\n0f 1f 44 00 00\n41 89 c7\nba 62 91 40 00\nb9 40 84 40 00\n45 31 c0\n89 ef\n48 89 de\ne8 16 f8 ff ff\n8d 48 01\n83 f9 77\n0f 87 0b 04 00 00\nb0 01\nff 24 cd 80 80 40 00\nc6 05 9f b3 20 00 01\n44 88 f8\neb c5\nc6 05 94 b3 20 00 01\n44 88 f8\neb b9\n4d 85 e4\n0f 84 b8 00 00 00\n31 ff\nbe 73 91 40 00\nba 05 00 00 00\ne8 8f f7 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 eb f9 ff ff\ne9 3a 01 00 00\nc6 05 54 b3 20 00 00\n44 88 f8\ne9 77 ff ff ff\n4c 8b 35 10 b3 20 00\neb 0e\n48 8b 05 07 b3 20 00\n48 85 c0\n4c 0f 45 e8\nb0 01\n48 89 44 24 18\n44 88 f8\ne9 51 ff ff ff\nc6 05 1d b3 20 00 01\nc6 05 15 b3 20 00 00\n44 88 f8\ne9 3b ff ff ff\nc6 05 07 b3 20 00 00\nc6 05 ff b2 20 00 01\n44 88 f8\ne9 25 ff ff ff\nc6 05 f5 b2 20 00 01\n44 88 f8\ne9 16 ff ff ff\nc6 05 e3 b2 20 00 01\n44 88 f8\ne9 07 ff ff ff\nc6 05 d1 b2 20 00 01\n44 88 f8\ne9 f8 fe ff ff\n48 8b 3d 91 b2 20 00\n48 8d 74 24 28\ne8 c7 5f 00 00\n85 c0\n74 4c\ne8 ee f5 ff ff\n8b 00\n89 44 24 10\n31 ff\nbe 99 91 40 00\nba 05 00 00 00\ne8 b7 f6 ff ff\n4d 89 ec\n49 89 c5\n48 8b 35 5a b2 20 00\nbf 04 00 00 00\ne8 60 42 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n8b 74 24 10\n4c 89 ea\n4d 89 e5\ne8 f7 f8 ff ff\n8b 44 24 40\nb9 00 f0 00 00\n21 c8\n3d 00 40 00 00\n74 39\n31 ff\nbe ad 91 40 00\nba 05 00 00 00\ne8 64 f6 ff ff\n49 89 c4\n48 8b 35 0a b2 20 00\nbf 04 00 00 00\ne8 10 42 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n4c 89 e2\ne8 ac f8 ff ff\n4c 8b 25 e5 b1 20 00\n44 88 f8\ne9 3d fe ff ff\n4c 89 6c 24 20\n4c 89 74 24 10\n48 63 05 c4 b1 20 00\n4c 63 f5\n49 29 c6\n45 85 f6\n0f 8e a7 02 00 00\n4c 8d 2c c3\n45 84 ff\n74 5c\n4d 85 e4\n74 25\n31 ff\nbe 09 92 40 00\nba 05 00 00 00\ne8 ee f5 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 4a f8 ff ff\nbd 02 00 00 00\n41 83 fe 02\n74 33\n31 ff\n41 83 fe 01\n0f 8f 89 02 00 00\nbe 45 92 40 00\nba 05 00 00 00\ne8 b4 f5 ff ff\n48 89 c3\n49 8b 75 00\ne9 84 02 00 00\n4d 85 e4\n0f 84 5d 01 00 00\n44 89 f5\n48 8b 7c 24 10\n48 85 ff\n74 0c\ne8 2d 4f 00 00\n48 89 05 96 b0 20 00\n80 7c 24 18 00\n74 20\n31 ff\nbe 80 92 40 00\nba 05 00 00 00\ne8 6e f5 ff ff\n48 89 c7\n48 8b 74 24 20\ne8 01 12 00 00\neb 02\n31 c0\n89 05 3f b1 20 00\n80 3d 37 b1 20 00 01\n75 2f\n8a 05 2c b1 20 00\n84 c0\n75 25\n31 ff\nbe 8c 92 40 00\nba 05 00 00 00\ne8 33 f5 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 8f f7 ff ff\n4d 85 e4\n74 50\n83 fd 01\n7e 5d\n80 3d f1 b0 20 00 01\n75 59\n83 3d ed b0 20 00 03\n74 50\n8a 05 e1 b0 20 00\n34 01\na8 01\n74 44\nbf 3d 00 00 00\n31 f6\nba 80 4f 40 00\nb9 c0 4f 40 00\n41 b8 20 50 40 00\ne8 8b 21 00 00\n48 89 05 c4 b0 20 00\n48 85 c0\n75 1c\ne8 8a 4e 00 00\n49 8b 7d 00\n49 8b 75 08\ne8 ed 02 00 00\n41 89 c7\neb 5c\n41 b7 01\n75 57\n89 eb\n41 b7 01\n4c 8d 74 24 28\n66 0f 1f 84 00 00 00 00 00\n49 8b 7d 00\ne8 57 1a 00 00\n4c 89 e7\n48 89 c6\n4c 89 f2\ne8 d9 1b 00 00\n48 89 c5\n48 8b 7c 24 28\ne8 cc 1a 00 00\n49 8b 7d 00\n48 89 ee\ne8 a0 02 00 00\n41 20 c7\n48 89 ef\ne8 55 f3 ff ff\n49 83 c5 08\n48 ff cb\n75 bc\n41 80 f7 01\n41 0f b6 c7\n48 81 c4 b8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n41 83 fe 02\n7d 10\n41 bc 55 96 40 00\nbd 01 00 00 00\ne9 90 fe ff ff\n4b 8b 7c f5 f8\ne8 32 01 00 00\n84 c0\n74 0d\n4f 8b 64 f5 f8\n49 ff ce\ne9 72 fe ff ff\n41 83 fe 03\n7c 3f\n45 31 e4\n31 ff\nbe ad 91 40 00\nba 05 00 00 00\ne8 f7 f3 ff ff\n48 89 c3\n4b 8b 74 f5 f8\nbf 04 00 00 00\ne8 a5 3f 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 da\ne8 41 f6 ff ff\ne9 2d fe ff ff\nbd 02 00 00 00\n45 31 e4\ne9 23 fe ff ff\n3d 7d ff ff ff\n74 18\n3d 7e ff ff ff\n75 07\n31 ff\ne8 ea f7 ff ff\nbf 01 00 00 00\ne8 e0 f7 ff ff\n48 8b 3d 31 af 20 00\n48 8b 0d 9a ae 20 00\n48 c7 04 24 00 00 00 00\nbe 32 91 40 00\nba ca 91 40 00\n41 b8 d8 91 40 00\n41 b9 e4 91 40 00\n31 c0\ne8 6d 4a 00 00\n31 ff\ne8 46 f6 ff ff\n31 ff\nbe f4 91 40 00\nba 05 00 00 00\ne8 55 f3 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 b4 f5 ff ff\nbf 01 00 00 00\ne8 7a f7 ff ff\nbe 6f 92 40 00\nba 05 00 00 00\ne8 2b f3 ff ff\n48 89 c3\n49 8b 75 10\nbf 04 00 00 00\ne8 da 3e 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 79 f5 ff ff\nbf 01 00 00 00\ne8 3f f7 ff ff\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n'
p1328
S'.text:0000000000401ec0\n.text:0000000000401ec1\n.text:0000000000401ec3\n.text:0000000000401ec5\n.text:0000000000401ec7\n.text:0000000000401ec9\n.text:0000000000401eca\n.text:0000000000401ed1\n.text:0000000000401ed4\n.text:0000000000401ed6\n.text:0000000000401ed9\n.text:0000000000401ede\n.text:0000000000401ee3\n.text:0000000000401ee8\n.text:0000000000401eed\n.text:0000000000401ef2\n.text:0000000000401ef7\n.text:0000000000401efc\n.text:0000000000401f01\n.text:0000000000401f06\n.text:0000000000401f0b\n.text:0000000000401f10\n.text:0000000000401f15\n.text:0000000000401f1a\n.text:0000000000401f1d\n.text:0000000000401f24\n.text:0000000000401f2b\n.text:0000000000401f32\n.text:0000000000401f39\n.text:0000000000401f40\n.text:0000000000401f42\n.text:0000000000401f47\n.text:0000000000401f4a\n.text:0000000000401f4d\n.text:0000000000401f4f\n.text:0000000000401f51\n.text:0000000000401f58\n.text:0000000000401f5b\n.text:0000000000401f60\n.text:0000000000401f63\n.text:0000000000401f68\n.text:0000000000401f6d\n.text:0000000000401f70\n.text:0000000000401f72\n.text:0000000000401f75\n.text:0000000000401f7a\n.text:0000000000401f7d\n.text:0000000000401f80\n.text:0000000000401f86\n.text:0000000000401f88\n.text:0000000000401f8f\n.text:0000000000401f96\n.text:0000000000401f99\n.text:0000000000401f9b\n.text:0000000000401fa2\n.text:0000000000401fa5\n.text:0000000000401fa7\n.text:0000000000401faa\n.text:0000000000401fb0\n.text:0000000000401fb2\n.text:0000000000401fb7\n.text:0000000000401fbc\n.text:0000000000401fc1\n.text:0000000000401fc4\n.text:0000000000401fc9\n.text:0000000000401fcb\n.text:0000000000401fcd\n.text:0000000000401fd0\n.text:0000000000401fd5\n.text:0000000000401fda\n.text:0000000000401fe1\n.text:0000000000401fe4\n.text:0000000000401fe9\n.text:0000000000401ff0\n.text:0000000000401ff2\n.text:0000000000401ff9\n.text:0000000000401ffc\n.text:0000000000402000\n.text:0000000000402002\n.text:0000000000402007\n.text:000000000040200a\n.text:000000000040200f\n.text:0000000000402016\n.text:000000000040201d\n.text:0000000000402020\n.text:0000000000402025\n.text:000000000040202c\n.text:0000000000402033\n.text:0000000000402036\n.text:000000000040203b\n.text:0000000000402042\n.text:0000000000402045\n.text:000000000040204a\n.text:0000000000402051\n.text:0000000000402054\n.text:0000000000402059\n.text:0000000000402060\n.text:0000000000402063\n.text:0000000000402068\n.text:000000000040206f\n.text:0000000000402074\n.text:0000000000402079\n.text:000000000040207b\n.text:000000000040207d\n.text:0000000000402082\n.text:0000000000402084\n.text:0000000000402088\n.text:000000000040208a\n.text:000000000040208f\n.text:0000000000402094\n.text:0000000000402099\n.text:000000000040209c\n.text:000000000040209f\n.text:00000000004020a6\n.text:00000000004020ab\n.text:00000000004020b0\n.text:00000000004020b3\n.text:00000000004020b8\n.text:00000000004020ba\n.text:00000000004020be\n.text:00000000004020c1\n.text:00000000004020c4\n.text:00000000004020c9\n.text:00000000004020cd\n.text:00000000004020d2\n.text:00000000004020d4\n.text:00000000004020d9\n.text:00000000004020db\n.text:00000000004020dd\n.text:00000000004020e2\n.text:00000000004020e7\n.text:00000000004020ec\n.text:00000000004020ef\n.text:00000000004020f6\n.text:00000000004020fb\n.text:0000000000402100\n.text:0000000000402103\n.text:0000000000402108\n.text:000000000040210a\n.text:000000000040210c\n.text:000000000040210f\n.text:0000000000402114\n.text:000000000040211b\n.text:000000000040211e\n.text:0000000000402123\n.text:0000000000402128\n.text:000000000040212d\n.text:0000000000402134\n.text:0000000000402137\n.text:000000000040213a\n.text:000000000040213d\n.text:0000000000402143\n.text:0000000000402147\n.text:000000000040214a\n.text:000000000040214c\n.text:000000000040214f\n.text:0000000000402151\n.text:0000000000402153\n.text:0000000000402158\n.text:000000000040215d\n.text:0000000000402162\n.text:0000000000402165\n.text:000000000040216a\n.text:000000000040216c\n.text:000000000040216e\n.text:0000000000402171\n.text:0000000000402176\n.text:000000000040217b\n.text:000000000040217f\n.text:0000000000402181\n.text:0000000000402183\n.text:0000000000402187\n.text:000000000040218d\n.text:0000000000402192\n.text:0000000000402197\n.text:000000000040219c\n.text:000000000040219f\n.text:00000000004021a3\n.text:00000000004021a8\n.text:00000000004021ab\n.text:00000000004021b1\n.text:00000000004021b4\n.text:00000000004021b9\n.text:00000000004021bc\n.text:00000000004021be\n.text:00000000004021c3\n.text:00000000004021ca\n.text:00000000004021cf\n.text:00000000004021d1\n.text:00000000004021d3\n.text:00000000004021d8\n.text:00000000004021dd\n.text:00000000004021e2\n.text:00000000004021e5\n.text:00000000004021ea\n.text:00000000004021ef\n.text:00000000004021f1\n.text:00000000004021f3\n.text:00000000004021f9\n.text:0000000000402200\n.text:0000000000402202\n.text:0000000000402208\n.text:000000000040220a\n.text:000000000040220c\n.text:000000000040220e\n.text:0000000000402213\n.text:0000000000402218\n.text:000000000040221d\n.text:0000000000402220\n.text:0000000000402225\n.text:0000000000402227\n.text:0000000000402229\n.text:000000000040222c\n.text:0000000000402231\n.text:0000000000402234\n.text:0000000000402236\n.text:0000000000402239\n.text:000000000040223b\n.text:0000000000402242\n.text:0000000000402244\n.text:000000000040224b\n.text:000000000040224d\n.text:0000000000402253\n.text:0000000000402255\n.text:0000000000402257\n.text:0000000000402259\n.text:000000000040225e\n.text:0000000000402260\n.text:0000000000402265\n.text:000000000040226a\n.text:0000000000402270\n.text:0000000000402275\n.text:000000000040227c\n.text:000000000040227f\n.text:0000000000402281\n.text:0000000000402286\n.text:000000000040228a\n.text:000000000040228e\n.text:0000000000402293\n.text:0000000000402296\n.text:0000000000402298\n.text:000000000040229b\n.text:000000000040229d\n.text:000000000040229f\n.text:00000000004022a2\n.text:00000000004022a7\n.text:00000000004022b0\n.text:00000000004022b4\n.text:00000000004022b9\n.text:00000000004022bc\n.text:00000000004022bf\n.text:00000000004022c2\n.text:00000000004022c7\n.text:00000000004022ca\n.text:00000000004022cf\n.text:00000000004022d4\n.text:00000000004022d8\n.text:00000000004022db\n.text:00000000004022e0\n.text:00000000004022e3\n.text:00000000004022e6\n.text:00000000004022eb\n.text:00000000004022ef\n.text:00000000004022f2\n.text:00000000004022f4\n.text:00000000004022f8\n.text:00000000004022fc\n.text:0000000000402303\n.text:0000000000402304\n.text:0000000000402306\n.text:0000000000402308\n.text:000000000040230a\n.text:000000000040230c\n.text:000000000040230d\n.text:000000000040230e\n.text:0000000000402312\n.text:0000000000402314\n.text:000000000040231a\n.text:000000000040231f\n.text:0000000000402324\n.text:0000000000402329\n.text:000000000040232e\n.text:0000000000402330\n.text:0000000000402332\n.text:0000000000402337\n.text:000000000040233a\n.text:000000000040233f\n.text:0000000000402343\n.text:0000000000402345\n.text:0000000000402348\n.text:000000000040234a\n.text:000000000040234f\n.text:0000000000402354\n.text:0000000000402359\n.text:000000000040235c\n.text:0000000000402361\n.text:0000000000402366\n.text:000000000040236b\n.text:000000000040236e\n.text:0000000000402373\n.text:0000000000402375\n.text:0000000000402377\n.text:000000000040237a\n.text:000000000040237f\n.text:0000000000402384\n.text:0000000000402389\n.text:000000000040238c\n.text:0000000000402391\n.text:0000000000402396\n.text:0000000000402398\n.text:000000000040239d\n.text:000000000040239f\n.text:00000000004023a1\n.text:00000000004023a6\n.text:00000000004023ab\n.text:00000000004023b0\n.text:00000000004023b7\n.text:00000000004023be\n.text:00000000004023c6\n.text:00000000004023cb\n.text:00000000004023d0\n.text:00000000004023d6\n.text:00000000004023dc\n.text:00000000004023de\n.text:00000000004023e3\n.text:00000000004023e5\n.text:00000000004023ea\n.text:00000000004023ec\n.text:00000000004023f1\n.text:00000000004023f6\n.text:00000000004023fb\n.text:00000000004023fe\n.text:0000000000402400\n.text:0000000000402402\n.text:0000000000402404\n.text:0000000000402407\n.text:000000000040240c\n.text:0000000000402411\n.text:0000000000402416\n.text:000000000040241b\n.text:0000000000402420\n.text:0000000000402425\n.text:0000000000402428\n.text:000000000040242c\n.text:0000000000402431\n.text:0000000000402436\n.text:0000000000402439\n.text:000000000040243b\n.text:000000000040243d\n.text:000000000040243f\n.text:0000000000402442\n.text:0000000000402447\n.text:000000000040244c\n.text:0000000000402451\n'
p1329
tp1330
sS'xcharalloc'
p1331
(S'\n__stdcall xcharalloc(size_t n)\n'
p1332
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p1333
S'JMP 0x00406f80\n'
p1334
S'e9 2b ff ff ff\n'
p1335
S'.text:0000000000407050\n'
p1336
tp1337
sS'c_isupper'
p1338
(S'\n__stdcall c_isupper()\n'
p1339
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p1340
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1341
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p1342
S'.text:0000000000407ae0\n.text:0000000000407ae3\n.text:0000000000407ae6\n.text:0000000000407ae9\n'
p1343
tp1344
sS'allocate_entry'
p1345
(S'\n__stdcall allocate_entry(Hash_table * table)\n'
p1346
V\u000ahash_entry * allocate_entry(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  \u000a  phVar1 = table->free_entry_list;\u000a  if (phVar1 != (hash_entry *)0x0) {\u000a    table->free_entry_list = phVar1->next;\u000a    return phVar1;\u000a  }\u000a  phVar1 = (hash_entry *)malloc(0x10);\u000a  return phVar1;\u000a}\u000a\u000a
p1347
S'MOV RAX,qword ptr [RDI + 0x48]\nTEST RAX,RAX\nJZ 0x00404cb2\nMOV RCX,qword ptr [RAX + 0x8]\nMOV qword ptr [RDI + 0x48],RCX\nRET\nPUSH RAX\nMOV EDI,0x10\nCALL 0x00401910\nADD RSP,0x8\nRET\n'
p1348
S'48 8b 47 48\n48 85 c0\n74 09\n48 8b 48 08\n48 89 4f 48\nc3\n50\nbf 10 00 00 00\ne8 53 cc ff ff\n48 83 c4 08\nc3\n'
p1349
S'.text:0000000000404ca0\n.text:0000000000404ca4\n.text:0000000000404ca7\n.text:0000000000404ca9\n.text:0000000000404cad\n.text:0000000000404cb1\n.text:0000000000404cb2\n.text:0000000000404cb3\n.text:0000000000404cb8\n.text:0000000000404cbd\n.text:0000000000404cc1\n'
p1350
tp1351
sS'c_isalnum'
p1352
(S'\n__stdcall c_isalnum()\n'
p1353
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1354
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x004079fb\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x004079fb\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x004079fa\nXOR EAX,EAX\nRET\n'
p1355
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p1356
S'.text:00000000004079e0\n.text:00000000004079e2\n.text:00000000004079e5\n.text:00000000004079e8\n.text:00000000004079ea\n.text:00000000004079f4\n.text:00000000004079f8\n.text:00000000004079fa\n.text:00000000004079fb\n.text:00000000004079fe\n.text:0000000000407a01\n.text:0000000000407a03\n.text:0000000000407a05\n'
p1357
tp1358
sS'rpmatch'
p1359
(S'\n__stdcall rpmatch(char * __response)\n'
p1360
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint rpmatch(char *__response)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_rpmatch_0060d150)();\u000a  return iVar1;\u000a}\u000a\u000a
p1361
S'JMP qword ptr [0x0060d150]\n'
p1362
S'ff 25 aa b8 20 00\n'
p1363
S'.plt:00000000004018a0\n'
p1364
tp1365
sS'__errno_location'
p1366
(S'\n__stdcall __errno_location()\n'
p1367
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_0060d038)();\u000a  return piVar1;\u000a}\u000a\u000a
p1368
S'JMP qword ptr [0x0060d038]\n'
p1369
S'ff 25 c2 b9 20 00\n'
p1370
S'.plt:0000000000401670\n'
p1371
tp1372
sS'x2nrealloc'
p1373
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p1374
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p1375
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x0040701c\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00407049\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x0040703a\nTEST RCX,RCX\nJNZ 0x0040703a\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00406fc0\nPUSH RAX\nCALL 0x00407110\n'
p1376
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p1377
S'.text:0000000000406ff0\n.text:0000000000406ff3\n.text:0000000000406ff6\n.text:0000000000406ff9\n.text:0000000000406ffb\n.text:0000000000407005\n.text:0000000000407007\n.text:000000000040700a\n.text:000000000040700d\n.text:000000000040700f\n.text:0000000000407012\n.text:0000000000407015\n.text:000000000040701a\n.text:000000000040701c\n.text:000000000040701f\n.text:0000000000407021\n.text:0000000000407026\n.text:0000000000407028\n.text:000000000040702b\n.text:000000000040702d\n.text:0000000000407034\n.text:0000000000407037\n.text:000000000040703a\n.text:000000000040703d\n.text:0000000000407041\n.text:0000000000407044\n.text:0000000000407049\n.text:000000000040704a\n'
p1378
tp1379
sS'triple_hash'
p1380
(S'\n__stdcall triple_hash(void * x, size_t table_size)\n'
p1381
V\u000asize_t triple_hash(void *x,size_t table_size)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = hash_pjw(*(void **)x,table_size);\u000a  return (sVar1 ^ *(ulong *)((long)x + 8)) % table_size;\u000a}\u000a\u000a
p1382
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RDI,qword ptr [RBX]\nCALL 0x00407ba0\nXOR RAX,qword ptr [RBX + 0x8]\nXOR EDX,EDX\nDIV R14\nMOV RAX,RDX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1383
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n48 8b 3b\ne8 0e 2c 00 00\n48 33 43 08\n31 d2\n49 f7 f6\n48 89 d0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1384
S'.text:0000000000404f80\n.text:0000000000404f82\n.text:0000000000404f83\n.text:0000000000404f84\n.text:0000000000404f87\n.text:0000000000404f8a\n.text:0000000000404f8d\n.text:0000000000404f92\n.text:0000000000404f96\n.text:0000000000404f98\n.text:0000000000404f9b\n.text:0000000000404f9e\n.text:0000000000404fa2\n.text:0000000000404fa3\n.text:0000000000404fa5\n'
p1385
tp1386
sS'quotearg_n_options'
p1387
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p1388
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p1389
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401670\nTEST R12D,R12D\nJS 0x004061f1\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x0060d270]\nCMP dword ptr [0x0060d278],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x0040610b\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x60d280\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00406fc0\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x0060d270],R15\nJNZ 0x004060d2\nMOVUPS XMM0,xmmword ptr [0x0060d280]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x0060d278]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x004017e0\nMOV dword ptr [0x0060d278],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00405260\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x0040616d\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x004061db\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x60d3b0\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00406198\nCALL 0x00401640\nMOV RDI,R15\nCALL 0x00407050\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00405260\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401660\n'
p1390
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 11 b6 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 f6 71 20 00\n44 39 25 f7 71 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 80 d2 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 08 0f 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d ab 71 20 00\n75 0b\n0f 10 05 b2 71 20 00\n41 0f 11 07\n8b 05 a0 71 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 ed b6 ff ff\n89 1d 7f 71 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 b0 d3 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 a8 b4 ff ff\n4c 89 ff\ne8 b0 0e 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 6a b4 ff ff\n'
p1391
S'.text:0000000000406040\n.text:0000000000406041\n.text:0000000000406043\n.text:0000000000406045\n.text:0000000000406047\n.text:0000000000406049\n.text:000000000040604a\n.text:000000000040604e\n.text:0000000000406051\n.text:0000000000406054\n.text:0000000000406057\n.text:000000000040605a\n.text:000000000040605f\n.text:0000000000406062\n.text:0000000000406068\n.text:000000000040606d\n.text:000000000040606f\n.text:0000000000406073\n.text:000000000040607a\n.text:0000000000406081\n.text:0000000000406086\n.text:000000000040608b\n.text:0000000000406090\n.text:0000000000406092\n.text:0000000000406097\n.text:000000000040609a\n.text:000000000040609d\n.text:00000000004060a3\n.text:00000000004060a5\n.text:00000000004060a8\n.text:00000000004060ac\n.text:00000000004060af\n.text:00000000004060b3\n.text:00000000004060b8\n.text:00000000004060bb\n.text:00000000004060be\n.text:00000000004060c5\n.text:00000000004060c7\n.text:00000000004060ce\n.text:00000000004060d2\n.text:00000000004060d8\n.text:00000000004060db\n.text:00000000004060df\n.text:00000000004060e2\n.text:00000000004060e5\n.text:00000000004060e9\n.text:00000000004060eb\n.text:00000000004060ee\n.text:00000000004060f3\n.text:00000000004060f9\n.text:00000000004060fc\n.text:0000000000406101\n.text:0000000000406106\n.text:000000000040610b\n.text:000000000040610e\n.text:0000000000406112\n.text:0000000000406116\n.text:000000000040611b\n.text:000000000040611f\n.text:0000000000406123\n.text:0000000000406127\n.text:000000000040612b\n.text:000000000040612f\n.text:0000000000406134\n.text:0000000000406137\n.text:000000000040613a\n.text:000000000040613d\n.text:0000000000406142\n.text:0000000000406145\n.text:0000000000406148\n.text:000000000040614b\n.text:000000000040614c\n.text:0000000000406151\n.text:0000000000406155\n.text:0000000000406158\n.text:000000000040615b\n.text:000000000040615d\n.text:0000000000406162\n.text:0000000000406166\n.text:000000000040616b\n.text:000000000040616d\n.text:0000000000406171\n.text:0000000000406176\n.text:0000000000406179\n.text:000000000040617c\n.text:0000000000406181\n.text:0000000000406186\n.text:0000000000406189\n.text:000000000040618e\n.text:0000000000406191\n.text:0000000000406193\n.text:0000000000406198\n.text:000000000040619b\n.text:00000000004061a0\n.text:00000000004061a3\n.text:00000000004061a6\n.text:00000000004061ab\n.text:00000000004061ae\n.text:00000000004061b2\n.text:00000000004061b5\n.text:00000000004061b8\n.text:00000000004061bd\n.text:00000000004061c2\n.text:00000000004061c7\n.text:00000000004061ca\n.text:00000000004061cd\n.text:00000000004061ce\n.text:00000000004061d3\n.text:00000000004061d7\n.text:00000000004061db\n.text:00000000004061df\n.text:00000000004061e2\n.text:00000000004061e6\n.text:00000000004061e7\n.text:00000000004061e9\n.text:00000000004061eb\n.text:00000000004061ed\n.text:00000000004061ef\n.text:00000000004061f0\n.text:00000000004061f1\n'
p1392
tp1393
sS'strcmp'
p1394
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p1395
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_0060d140)();\u000a  return iVar1;\u000a}\u000a\u000a
p1396
S'JMP qword ptr [0x0060d140]\n'
p1397
S'ff 25 ba b8 20 00\n'
p1398
S'.plt:0000000000401880\n'
p1399
tp1400
sS'rotr64'
p1401
(S'\n__stdcall rotr64(uint64_t x)\n'
p1402
V\u000auint64_t rotr64(uint64_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x >> bVar1 | x << 0x40 - bVar1;\u000a}\u000a\u000a
p1403
S'MOV ECX,ESI\nROR RDI,CL\nMOV RAX,RDI\nRET\n'
p1404
S'89 f1\n48 d3 cf\n48 89 f8\nc3\n'
p1405
S'.text:0000000000407910\n.text:0000000000407912\n.text:0000000000407915\n.text:0000000000407918\n'
p1406
tp1407
sS'set_custom_quoting'
p1408
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p1409
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1410
S'TEST RDI,RDI\nMOV EAX,0x60d370\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x004051d5\nTEST RDX,RDX\nJZ 0x004051d5\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00401660\n'
p1411
S'48 85 ff\nb8 70 d3 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 85 c4 ff ff\n'
p1412
S'.text:00000000004051b0\n.text:00000000004051b3\n.text:00000000004051b8\n.text:00000000004051bc\n.text:00000000004051c2\n.text:00000000004051c5\n.text:00000000004051c7\n.text:00000000004051ca\n.text:00000000004051cc\n.text:00000000004051d0\n.text:00000000004051d4\n.text:00000000004051d5\n.text:00000000004051d6\n'
p1413
tp1414
sS'c_isalpha'
p1415
(S'\n__stdcall c_isalpha()\n'
p1416
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1417
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x00407a2b\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1418
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1419
S'.text:0000000000407a10\n.text:0000000000407a13\n.text:0000000000407a16\n.text:0000000000407a18\n.text:0000000000407a22\n.text:0000000000407a24\n.text:0000000000407a27\n.text:0000000000407a2a\n.text:0000000000407a2b\n.text:0000000000407a2d\n'
p1420
tp1421
sS'quotearg_custom_mem'
p1422
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p1423
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1424
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00406450\n'
p1425
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p1426
S'.text:00000000004064e0\n.text:00000000004064e3\n.text:00000000004064e6\n.text:00000000004064e9\n.text:00000000004064ec\n.text:00000000004064ee\n.text:00000000004064f1\n'
p1427
tp1428
sS'hash_get_max_bucket_length'
p1429
(S'\n__stdcall hash_get_max_bucket_length(Hash_table * table)\n'
p1430
V\u000asize_t hash_get_max_bucket_length(Hash_table *table)\u000a\u000a{\u000a  ulong uVar1;\u000a  hash_entry *phVar2;\u000a  ulong uVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar2 = table->bucket;\u000a  if (phVar2 < table->bucket_limit) {\u000a    uVar1 = 0;\u000a    do {\u000a      if (phVar2->data != (void *)0x0) {\u000a        uVar3 = 0;\u000a        phVar4 = phVar2;\u000a        do {\u000a          phVar4 = phVar4->next;\u000a          uVar3 = uVar3 + 1;\u000a        } while (phVar4 != (hash_entry *)0x0);\u000a        if (uVar1 < uVar3) {\u000a          uVar1 = uVar3;\u000a        }\u000a      }\u000a      phVar2 = phVar2 + 1;\u000a    } while (phVar2 < table->bucket_limit);\u000a    return uVar1;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1431
S'MOV RCX,qword ptr [RDI]\nCMP RCX,qword ptr [RDI + 0x8]\nJNC 0x0040403d\nMOV RDX,qword ptr [RDI + 0x8]\nXOR EAX,EAX\nNOP\nCMP qword ptr [RCX],0x0\nJZ 0x00404033\nXOR ESI,ESI\nMOV RDI,RCX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RDI + 0x8]\nINC RSI\nTEST RDI,RDI\nJNZ 0x00404020\nCMP RSI,RAX\nCMOVA RAX,RSI\nADD RCX,0x10\nCMP RCX,RDX\nJC 0x00404010\nRET\nXOR EAX,EAX\nRET\n'
p1432
S'48 8b 0f\n48 3b 4f 08\n73 34\n48 8b 57 08\n31 c0\n90\n48 83 39 00\n74 1d\n31 f6\n48 89 cf\n0f 1f 44 00 00\n48 8b 7f 08\n48 ff c6\n48 85 ff\n75 f4\n48 39 c6\n48 0f 47 c6\n48 83 c1 10\n48 39 d1\n72 d4\nc3\n31 c0\nc3\n'
p1433
S'.text:0000000000404000\n.text:0000000000404003\n.text:0000000000404007\n.text:0000000000404009\n.text:000000000040400d\n.text:000000000040400f\n.text:0000000000404010\n.text:0000000000404014\n.text:0000000000404016\n.text:0000000000404018\n.text:000000000040401b\n.text:0000000000404020\n.text:0000000000404024\n.text:0000000000404027\n.text:000000000040402a\n.text:000000000040402c\n.text:000000000040402f\n.text:0000000000404033\n.text:0000000000404037\n.text:000000000040403a\n.text:000000000040403c\n.text:000000000040403d\n.text:000000000040403f\n'
p1434
tp1435
sS'rpl_calloc'
p1436
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p1437
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_0060d138)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p1438
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x0040721b\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00407220\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00407220\nPUSH RAX\nCALL 0x00401670\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x00401870\n'
p1439
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 5f a4 ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 45 a6 ff ff\n'
p1440
S'.text:00000000004071e0\n.text:00000000004071e3\n.text:00000000004071e8\n.text:00000000004071ea\n.text:00000000004071ed\n.text:00000000004071f2\n.text:00000000004071f4\n.text:00000000004071f7\n.text:00000000004071fb\n.text:00000000004071fd\n.text:0000000000407200\n.text:0000000000407203\n.text:0000000000407206\n.text:0000000000407209\n.text:000000000040720b\n.text:000000000040720c\n.text:0000000000407211\n.text:0000000000407217\n.text:0000000000407219\n.text:000000000040721a\n.text:000000000040721b\n.text:0000000000407220\n.text:0000000000407223\n.text:0000000000407226\n'
p1441
tp1442
sS'memset'
p1443
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p1444
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_0060d0f0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1445
S'JMP qword ptr [0x0060d0f0]\n'
p1446
S'ff 25 0a b9 20 00\n'
p1447
S'.plt:00000000004017e0\n'
p1448
tp1449
sS'getc_unlocked'
p1450
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p1451
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_0060d068)();\u000a  return iVar1;\u000a}\u000a\u000a
p1452
S'JMP qword ptr [0x0060d068]\n'
p1453
S'ff 25 92 b9 20 00\n'
p1454
S'.plt:00000000004016d0\n'
p1455
tp1456
sS'memmove'
p1457
(S'\n__stdcall memmove(void * __dest, void * __src, size_t __n)\n'
p1458
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memmove(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memmove_0060d1d8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1459
S'JMP qword ptr [0x0060d1d8]\n'
p1460
S'ff 25 22 b8 20 00\n'
p1461
S'.plt:00000000004019b0\n'
p1462
tp1463
sS'hash_insert_if_absent'
p1464
(S'\n__stdcall hash_insert_if_absent(Hash_table * table, void * entry, void * * matched_ent)\n'
p1465
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000aint hash_insert_if_absent(Hash_table *table,void *entry,void **matched_ent)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  Hash_tuning *pHVar3;\u000a  _Bool _Var4;\u000a  hash_entry *in_RAX;\u000a  void *pvVar5;\u000a  hash_entry *phVar6;\u000a  size_t candidate;\u000a  float fVar7;\u000a  float fVar8;\u000a  hash_entry *local_28;\u000a  \u000a  if (entry != (void *)0x0) {\u000a    local_28 = in_RAX;\u000a    pvVar5 = hash_find_entry(table,entry,&local_28);\u000a    if (pvVar5 != (void *)0x0) {\u000a      if (matched_ent == (void **)0x0) {\u000a        return 0;\u000a      }\u000a      *matched_ent = pvVar5;\u000a      return 0;\u000a    }\u000a    uVar1 = table->n_buckets;\u000a    uVar2 = table->n_buckets_used;\u000a    if ((long)uVar2 < 0) {\u000a      fVar7 = (float)((ulong)((uint)uVar2 & 1) | uVar2 >> 1);\u000a      fVar7 = fVar7 + fVar7;\u000a    }\u000a    else {\u000a      fVar7 = (float)uVar2;\u000a    }\u000a    if ((long)uVar1 < 0) {\u000a      fVar8 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a      fVar8 = fVar8 + fVar8;\u000a    }\u000a    else {\u000a      fVar8 = (float)uVar1;\u000a    }\u000a    if (fVar8 * table->tuning->growth_threshold < fVar7) {\u000a      check_tuning(table);\u000a      uVar1 = table->n_buckets;\u000a      uVar2 = table->n_buckets_used;\u000a      if ((long)uVar2 < 0) {\u000a        fVar7 = (float)((ulong)((uint)uVar2 & 1) | uVar2 >> 1);\u000a        fVar7 = fVar7 + fVar7;\u000a      }\u000a      else {\u000a        fVar7 = (float)uVar2;\u000a      }\u000a      pHVar3 = table->tuning;\u000a      if ((long)uVar1 < 0) {\u000a        fVar8 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a        fVar8 = fVar8 + fVar8;\u000a      }\u000a      else {\u000a        fVar8 = (float)uVar1;\u000a      }\u000a      if (pHVar3->growth_threshold * fVar8 < fVar7) {\u000a        fVar8 = fVar8 * pHVar3->growth_factor;\u000a        if (pHVar3->is_n_buckets == false) {\u000a          fVar8 = fVar8 * pHVar3->growth_threshold;\u000a        }\u000a        if (_DAT_0040979c <= fVar8) {\u000a          return -1;\u000a        }\u000a        candidate = (long)fVar8;\u000a        if (DAT_00409798 <= fVar8) {\u000a          candidate = (long)(fVar8 - DAT_00409798) ^ 0x8000000000000000;\u000a        }\u000a        _Var4 = hash_rehash(table,candidate);\u000a        if (_Var4 == false) {\u000a          return -1;\u000a        }\u000a        pvVar5 = hash_find_entry(table,entry,&local_28);\u000a        if (pvVar5 != (void *)0x0) goto LAB_00404bcd;\u000a      }\u000a    }\u000a    if (local_28->data == (void *)0x0) {\u000a      local_28->data = entry;\u000a      table->n_entries = table->n_entries + 1;\u000a      table->n_buckets_used = table->n_buckets_used + 1;\u000a    }\u000a    else {\u000a      phVar6 = allocate_entry(table);\u000a      if (phVar6 == (hash_entry *)0x0) {\u000a        return -1;\u000a      }\u000a      phVar6->data = entry;\u000a      phVar6->next = local_28->next;\u000a      local_28->next = phVar6;\u000a      table->n_entries = table->n_entries + 1;\u000a    }\u000a    return 1;\u000a  }\u000aLAB_00404bcd:\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1466
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV R14,RSI\nMOV R15,RDI\nTEST R14,R14\nJZ 0x00404bcd\nMOV RDX,RSP\nXOR EBP,EBP\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x00404be0\nTEST RAX,RAX\nJZ 0x00404a41\nTEST RBX,RBX\nJZ 0x00404bc0\nMOV qword ptr [RBX],RAX\nJMP 0x00404bc0\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x00404a55\nCVTSI2SS XMM0,RCX\nJMP 0x00404a6a\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM0,RCX\nADDSS XMM0,XMM0\nMOV RCX,qword ptr [R15 + 0x28]\nTEST RAX,RAX\nJS 0x00404a7a\nCVTSI2SS XMM1,RAX\nJMP 0x00404a8f\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nCVTSI2SS XMM1,RAX\nADDSS XMM1,XMM1\nMULSS XMM1,dword ptr [RCX + 0x8]\nUCOMISS XMM0,XMM1\nJBE 0x00404b79\nMOV RDI,R15\nCALL 0x00404510\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x00404ab9\nCVTSI2SS XMM2,RCX\nJMP 0x00404ace\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM2,RCX\nADDSS XMM2,XMM2\nMOV RCX,qword ptr [R15 + 0x28]\nMOVSS XMM1,dword ptr [RCX + 0x8]\nTEST RAX,RAX\nJS 0x00404ae6\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nJMP 0x00404afe\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOVAPS XMM3,XMM1\nMULSS XMM3,XMM0\nUCOMISS XMM2,XMM3\nJBE 0x00404b79\nCMP byte ptr [RCX + 0x10],0x0\nMULSS XMM0,dword ptr [RCX + 0xc]\nJNZ 0x00404b19\nMULSS XMM0,XMM1\nMOV EBP,0xffffffff\nUCOMISS XMM0,dword ptr [0x0040979c]\nJNC 0x00404bc0\nMOVSS XMM1,dword ptr [0x00409798]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RSI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RSI,RCX\nMOV RDI,R15\nCALL 0x004047b0\nTEST AL,AL\nJZ 0x00404bc0\nMOV RDX,RSP\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x00404be0\nTEST RAX,RAX\nJNZ 0x00404bcd\nMOV RAX,qword ptr [RSP]\nCMP qword ptr [RAX],0x0\nJZ 0x00404ba9\nMOV RDI,R15\nCALL 0x00404ca0\nTEST RAX,RAX\nJZ 0x00404bbb\nMOV qword ptr [RAX],R14\nMOV RCX,qword ptr [RSP]\nMOV RDX,qword ptr [RCX + 0x8]\nMOV qword ptr [RAX + 0x8],RDX\nMOV qword ptr [RCX + 0x8],RAX\nINC qword ptr [R15 + 0x20]\nJMP 0x00404bb4\nMOV qword ptr [RAX],R14\nINC qword ptr [R15 + 0x20]\nINC qword ptr [R15 + 0x18]\nMOV EBP,0x1\nJMP 0x00404bc0\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401660\n'
p1467
S'55\n41 57\n41 56\n53\n50\n48 89 d3\n49 89 f6\n49 89 ff\n4d 85 f6\n0f 84 b4 01 00 00\n48 89 e2\n31 ed\n31 c9\n4c 89 ff\n4c 89 f6\ne8 b5 01 00 00\n48 85 c0\n74 11\n48 85 db\n0f 84 87 01 00 00\n48 89 03\ne9 7f 01 00 00\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 07\nf3 48 0f 2a c1\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a c1\nf3 0f 58 c0\n49 8b 4f 28\n48 85 c0\n78 07\nf3 48 0f 2a c8\neb 15\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\nf3 48 0f 2a c8\nf3 0f 58 c9\nf3 0f 59 49 08\n0f 2e c1\n0f 86 dc 00 00 00\n4c 89 ff\ne8 6b fa ff ff\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 07\nf3 48 0f 2a d1\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a d1\nf3 0f 58 d2\n49 8b 4f 28\nf3 0f 10 49 08\n48 85 c0\n78 0a\n0f 57 c0\nf3 48 0f 2a c0\neb 18\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\n0f 57 c0\nf3 48 0f 2a c0\nf3 0f 58 c0\n0f 28 d9\nf3 0f 59 d8\n0f 2e d3\n76 6f\n80 79 10 00\nf3 0f 59 41 0c\n75 04\nf3 0f 59 c1\nbd ff ff ff ff\n0f 2e 05 77 4c 00 00\n0f 83 95 00 00 00\nf3 0f 10 0d 65 4c 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f0\n0f 2e c1\n48 0f 43 f1\n4c 89 ff\ne8 50 fc ff ff\n84 c0\n74 5c\n48 89 e2\n31 c9\n4c 89 ff\n4c 89 f6\ne8 6c 00 00 00\n48 85 c0\n75 54\n48 8b 04 24\n48 83 38 00\n74 26\n4c 89 ff\ne8 15 01 00 00\n48 85 c0\n74 2b\n4c 89 30\n48 8b 0c 24\n48 8b 51 08\n48 89 50 08\n48 89 41 08\n49 ff 47 20\neb 0b\n4c 89 30\n49 ff 47 20\n49 ff 47 18\nbd 01 00 00 00\neb 05\nbd ff ff ff ff\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\ne8 8e ca ff ff\n'
p1468
S'.text:0000000000404a00\n.text:0000000000404a01\n.text:0000000000404a03\n.text:0000000000404a05\n.text:0000000000404a06\n.text:0000000000404a07\n.text:0000000000404a0a\n.text:0000000000404a0d\n.text:0000000000404a10\n.text:0000000000404a13\n.text:0000000000404a19\n.text:0000000000404a1c\n.text:0000000000404a1e\n.text:0000000000404a20\n.text:0000000000404a23\n.text:0000000000404a26\n.text:0000000000404a2b\n.text:0000000000404a2e\n.text:0000000000404a30\n.text:0000000000404a33\n.text:0000000000404a39\n.text:0000000000404a3c\n.text:0000000000404a41\n.text:0000000000404a45\n.text:0000000000404a49\n.text:0000000000404a4c\n.text:0000000000404a4e\n.text:0000000000404a53\n.text:0000000000404a55\n.text:0000000000404a58\n.text:0000000000404a5b\n.text:0000000000404a5e\n.text:0000000000404a61\n.text:0000000000404a66\n.text:0000000000404a6a\n.text:0000000000404a6e\n.text:0000000000404a71\n.text:0000000000404a73\n.text:0000000000404a78\n.text:0000000000404a7a\n.text:0000000000404a7d\n.text:0000000000404a80\n.text:0000000000404a83\n.text:0000000000404a86\n.text:0000000000404a8b\n.text:0000000000404a8f\n.text:0000000000404a94\n.text:0000000000404a97\n.text:0000000000404a9d\n.text:0000000000404aa0\n.text:0000000000404aa5\n.text:0000000000404aa9\n.text:0000000000404aad\n.text:0000000000404ab0\n.text:0000000000404ab2\n.text:0000000000404ab7\n.text:0000000000404ab9\n.text:0000000000404abc\n.text:0000000000404abf\n.text:0000000000404ac2\n.text:0000000000404ac5\n.text:0000000000404aca\n.text:0000000000404ace\n.text:0000000000404ad2\n.text:0000000000404ad7\n.text:0000000000404ada\n.text:0000000000404adc\n.text:0000000000404adf\n.text:0000000000404ae4\n.text:0000000000404ae6\n.text:0000000000404ae9\n.text:0000000000404aec\n.text:0000000000404aef\n.text:0000000000404af2\n.text:0000000000404af5\n.text:0000000000404afa\n.text:0000000000404afe\n.text:0000000000404b01\n.text:0000000000404b05\n.text:0000000000404b08\n.text:0000000000404b0a\n.text:0000000000404b0e\n.text:0000000000404b13\n.text:0000000000404b15\n.text:0000000000404b19\n.text:0000000000404b1e\n.text:0000000000404b25\n.text:0000000000404b2b\n.text:0000000000404b33\n.text:0000000000404b36\n.text:0000000000404b3a\n.text:0000000000404b3f\n.text:0000000000404b49\n.text:0000000000404b4c\n.text:0000000000404b51\n.text:0000000000404b54\n.text:0000000000404b58\n.text:0000000000404b5b\n.text:0000000000404b60\n.text:0000000000404b62\n.text:0000000000404b64\n.text:0000000000404b67\n.text:0000000000404b69\n.text:0000000000404b6c\n.text:0000000000404b6f\n.text:0000000000404b74\n.text:0000000000404b77\n.text:0000000000404b79\n.text:0000000000404b7d\n.text:0000000000404b81\n.text:0000000000404b83\n.text:0000000000404b86\n.text:0000000000404b8b\n.text:0000000000404b8e\n.text:0000000000404b90\n.text:0000000000404b93\n.text:0000000000404b97\n.text:0000000000404b9b\n.text:0000000000404b9f\n.text:0000000000404ba3\n.text:0000000000404ba7\n.text:0000000000404ba9\n.text:0000000000404bac\n.text:0000000000404bb0\n.text:0000000000404bb4\n.text:0000000000404bb9\n.text:0000000000404bbb\n.text:0000000000404bc0\n.text:0000000000404bc2\n.text:0000000000404bc6\n.text:0000000000404bc7\n.text:0000000000404bc9\n.text:0000000000404bcb\n.text:0000000000404bcc\n.text:0000000000404bcd\n'
p1469
tp1470
sS'c_isascii'
p1471
(S'\n__stdcall c_isascii()\n'
p1472
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p1473
S'CMP EDI,0x80\nSETC AL\nRET\n'
p1474
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p1475
S'.text:0000000000407a30\n.text:0000000000407a36\n.text:0000000000407a39\n'
p1476
tp1477
sS'__xargmatch_internal'
p1478
(S'\n__stdcall __xargmatch_internal(char * context, char * arg, char * * arglist, char * vallist, size_t valsize, argmatch_exit_fn * exit_fn)\n'
p1479
V\u000aptrdiff_t __xargmatch_internal\u000a                    (char *context,char *arg,char **arglist,char *vallist,size_t valsize,\u000a                    void (*exit_fn)())\u000a\u000a{\u000a  ptrdiff_t problem;\u000a  \u000a  problem = argmatch(arg,arglist,vallist,valsize);\u000a  if (problem < 0) {\u000a    argmatch_invalid(context,arg,problem);\u000a    argmatch_valid(arglist,vallist,valsize);\u000a    (*exit_fn)();\u000a    problem = -1;\u000a  }\u000a  return problem;\u000a}\u000a\u000a
p1480
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,R9\nMOV R15,R8\nMOV R12,RCX\nMOV R13,RDX\nMOV RBX,RSI\nMOV RBP,RDI\nMOV RDI,RBX\nMOV RSI,R13\nMOV RDX,R12\nMOV RCX,R15\nCALL 0x004075c0\nTEST RAX,RAX\nJNS 0x00407879\nMOV RDI,RBP\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x004076c0\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nCALL 0x00407730\nCALL R14\nMOV RAX,-0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1481
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 ce\n4d 89 c7\n49 89 cc\n49 89 d5\n48 89 f3\n48 89 fd\n48 89 df\n4c 89 ee\n4c 89 e2\n4c 89 f9\ne8 72 fd ff ff\n48 85 c0\n79 26\n48 89 ef\n48 89 de\n48 89 c2\ne8 5f fe ff ff\n4c 89 ef\n4c 89 e6\n4c 89 fa\ne8 c1 fe ff ff\n41 ff d6\n48 c7 c0 ff ff ff ff\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1482
S'.text:0000000000407820\n.text:0000000000407821\n.text:0000000000407823\n.text:0000000000407825\n.text:0000000000407827\n.text:0000000000407829\n.text:000000000040782a\n.text:000000000040782b\n.text:000000000040782e\n.text:0000000000407831\n.text:0000000000407834\n.text:0000000000407837\n.text:000000000040783a\n.text:000000000040783d\n.text:0000000000407840\n.text:0000000000407843\n.text:0000000000407846\n.text:0000000000407849\n.text:000000000040784e\n.text:0000000000407851\n.text:0000000000407853\n.text:0000000000407856\n.text:0000000000407859\n.text:000000000040785c\n.text:0000000000407861\n.text:0000000000407864\n.text:0000000000407867\n.text:000000000040786a\n.text:000000000040786f\n.text:0000000000407872\n.text:0000000000407879\n.text:000000000040787d\n.text:000000000040787e\n.text:0000000000407880\n.text:0000000000407882\n.text:0000000000407884\n.text:0000000000407886\n.text:0000000000407887\n'
p1483
tp1484
sS'dup_safer'
p1485
(S'\n__stdcall dup_safer()\n'
p1486
V\u000aint dup_safer(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 in_RDI;\u000a  \u000a  iVar1 = rpl_fcntl(in_RDI,0,3);\u000a  return iVar1;\u000a}\u000a\u000a
p1487
S'XOR ESI,ESI\nMOV EDX,0x3\nXOR EAX,EAX\nJMP 0x00407230\n'
p1488
S'31 f6\nba 03 00 00 00\n31 c0\ne9 d2 07 00 00\n'
p1489
S'.text:0000000000406a50\n.text:0000000000406a52\n.text:0000000000406a57\n.text:0000000000406a59\n'
p1490
tp1491
sS'dirfd'
p1492
(S'\n__stdcall dirfd(DIR * __dirp)\n'
p1493
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint dirfd(DIR *__dirp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_dirfd_0060d148)();\u000a  return iVar1;\u000a}\u000a\u000a
p1494
S'JMP qword ptr [0x0060d148]\n'
p1495
S'ff 25 b2 b8 20 00\n'
p1496
S'.plt:0000000000401890\n'
p1497
tp1498
sS'xget_version'
p1499
(S'\n__stdcall xget_version(char * context, char * version)\n'
p1500
V\u000abackup_type xget_version(char *context,char *version)\u000a\u000a{\u000a  backup_type bVar1;\u000a  char *version_00;\u000a  \u000a  if ((version != (char *)0x0) && (*version != 0)) {\u000a    bVar1 = get_version(context,version);\u000a    return bVar1;\u000a  }\u000a  version_00 = getenv("VERSION_CONTROL");\u000a  bVar1 = get_version("$VERSION_CONTROL",version_00);\u000a  return bVar1;\u000a}\u000a\u000a
p1501
S'TEST RSI,RSI\nJZ 0x004033fc\nCMP byte ptr [RSI],0x0\nJZ 0x004033fc\nJMP 0x004033b0\nPUSH RAX\nMOV EDI,0x409676\nCALL 0x00401630\nMOV EDI,0x409675\nMOV RSI,RAX\nPOP RAX\nJMP 0x004033b0\n'
p1502
S'48 85 f6\n74 07\n80 3e 00\n74 02\neb b4\n50\nbf 76 96 40 00\ne8 29 e2 ff ff\nbf 75 96 40 00\n48 89 c6\n58\neb 9e\n'
p1503
S'.text:00000000004033f0\n.text:00000000004033f3\n.text:00000000004033f5\n.text:00000000004033f8\n.text:00000000004033fa\n.text:00000000004033fc\n.text:00000000004033fd\n.text:0000000000403402\n.text:0000000000403407\n.text:000000000040340c\n.text:000000000040340f\n.text:0000000000403410\n'
p1504
tp1505
sS'rotr32'
p1506
(S'\n__stdcall rotr32()\n'
p1507
V\u000auint32_t rotr32(void)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x1f;\u000a  return (uint32_t)(in_EDI >> bVar1 | in_EDI << 0x20 - bVar1);\u000a}\u000a\u000a
p1508
S'MOV ECX,ESI\nROR EDI,CL\nMOV EAX,EDI\nRET\n'
p1509
S'89 f1\nd3 cf\n89 f8\nc3\n'
p1510
S'.text:0000000000407930\n.text:0000000000407932\n.text:0000000000407934\n.text:0000000000407936\n'
p1511
tp1512
sS'__ctype_b_loc'
p1513
(S'\n__stdcall __ctype_b_loc()\n'
p1514
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_0060d240)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p1515
S'JMP qword ptr [0x0060d240]\n'
p1516
S'ff 25 ba b7 20 00\n'
p1517
S'.plt:0000000000401a80\n'
p1518
tp1519
sS'quotearg'
p1520
(S'\n__stdcall quotearg(char * arg)\n'
p1521
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1522
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00406030\n'
p1523
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1524
S'.text:0000000000406210\n.text:0000000000406213\n.text:0000000000406215\n.text:0000000000406218\n'
p1525
tp1526
sS'_start'
p1527
(S'\n__stdcall _start()\n'
p1528
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_0060cff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1529
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x408000\nMOV RCX,0x407f90\nMOV RDI,0x401ec0\nCALL qword ptr [0x0060cff0]\nHLT\n'
p1530
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 00 80 40 00\n48 c7 c1 90 7f 40 00\n48 c7 c7 c0 1e 40 00\nff 15 36 b5 20 00\nf4\n'
p1531
S'.text:0000000000401a90\n.text:0000000000401a92\n.text:0000000000401a95\n.text:0000000000401a96\n.text:0000000000401a99\n.text:0000000000401a9d\n.text:0000000000401a9e\n.text:0000000000401a9f\n.text:0000000000401aa6\n.text:0000000000401aad\n.text:0000000000401ab4\n.text:0000000000401aba\n'
p1532
tp1533
sS'c_iscntrl'
p1534
(S'\n__stdcall c_iscntrl()\n'
p1535
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1536
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00407a58\nRET\nCMP EDI,0x7f\nJZ 0x00407a57\nXOR EAX,EAX\nRET\n'
p1537
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1538
S'.text:0000000000407a50\n.text:0000000000407a52\n.text:0000000000407a55\n.text:0000000000407a57\n.text:0000000000407a58\n.text:0000000000407a5b\n.text:0000000000407a5d\n.text:0000000000407a5f\n'
p1539
tp1540
sS'hash_reset_tuning'
p1541
(S'\n__stdcall hash_reset_tuning(Hash_tuning * tuning)\n'
p1542
V\u000avoid hash_reset_tuning(Hash_tuning *tuning)\u000a\u000a{\u000a  float fVar1;\u000a  float fVar2;\u000a  float fVar3;\u000a  \u000a  *(undefined4 *)&tuning->is_n_buckets = default_tuning._16_4_;\u000a  fVar3 = default_tuning.growth_factor;\u000a  fVar2 = default_tuning.growth_threshold;\u000a  fVar1 = default_tuning.shrink_factor;\u000a  tuning->shrink_threshold = default_tuning.shrink_threshold;\u000a  tuning->shrink_factor = fVar1;\u000a  tuning->growth_threshold = fVar2;\u000a  tuning->growth_factor = fVar3;\u000a  return;\u000a}\u000a\u000a
p1543
S'MOV EAX,dword ptr [0x0040981c]\nMOV dword ptr [RDI + 0x10],EAX\nMOVUPS XMM0,xmmword ptr [0x0040980c]\nMOVUPS xmmword ptr [RDI],XMM0\nRET\n'
p1544
S'8b 05 36 54 00 00\n89 47 10\n0f 10 05 1c 54 00 00\n0f 11 07\nc3\n'
p1545
S'.text:00000000004043e0\n.text:00000000004043e6\n.text:00000000004043e9\n.text:00000000004043f0\n.text:00000000004043f3\n'
p1546
tp1547
sS'c_isblank'
p1548
(S'\n__stdcall c_isblank()\n'
p1549
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1550
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1551
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1552
S'.text:0000000000407a40\n.text:0000000000407a43\n.text:0000000000407a46\n.text:0000000000407a49\n.text:0000000000407a4c\n.text:0000000000407a4e\n'
p1553
tp1554
sS'errno_nonexisting'
p1555
(S'\n__stdcall errno_nonexisting()\n'
p1556
V\u000a_Bool errno_nonexisting(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 2U < 0x27) {\u000a    return (_Bool)((byte)(0x4400040001 >> ((byte)(in_EDI - 2U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1557
S'ADD EDI,-0x2\nCMP EDI,0x26\nJA 0x00402c7b\nMOV RAX,0x4400040001\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1558
S'83 c7 fe\n83 ff 26\n77 13\n48 b8 01 00 04 00 44 00 00 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1559
S'.text:0000000000402c60\n.text:0000000000402c63\n.text:0000000000402c66\n.text:0000000000402c68\n.text:0000000000402c72\n.text:0000000000402c74\n.text:0000000000402c77\n.text:0000000000402c7a\n.text:0000000000402c7b\n.text:0000000000402c7d\n'
p1560
tp1561
sS'atexit'
p1562
(S'\n__stdcall atexit(__func * __func)\n'
p1563
V\u000a/* WARNING: Removing unreachable block (ram,0x00408030) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_0060d208)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1564
S'MOV RAX,0x60d250\nTEST RAX,RAX\nJZ 0x00408030\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401a10\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401a10\n'
p1565
S'48 c7 c0 50 d2 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 ea 99 ff ff\n31 d2\n31 f6\ne9 d7 99 ff ff\n'
p1566
S'.text:0000000000408010\n.text:0000000000408017\n.text:000000000040801a\n.text:000000000040801c\n.text:000000000040801f\n.text:0000000000408021\n.text:0000000000408030\n.text:0000000000408032\n.text:0000000000408034\n'
p1567
tp1568
sS'fdopen'
p1569
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1570
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_0060d1b8)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1571
S'JMP qword ptr [0x0060d1b8]\n'
p1572
S'ff 25 42 b8 20 00\n'
p1573
S'.plt:0000000000401970\n'
p1574
tp1575
sS'hash_find_entry'
p1576
(S'\n__stdcall hash_find_entry(Hash_table * table, void * entry, hash_entry * * bucket_head)\n'
p1577
V\u000avoid * hash_find_entry(Hash_table *table,void *entry,hash_entry **bucket_head)\u000a\u000a{\u000a  undefined4 uVar1;\u000a  undefined4 uVar2;\u000a  undefined4 uVar3;\u000a  _Bool _Var4;\u000a  hash_entry *phVar5;\u000a  hash_entry *entry_00;\u000a  char in_CL;\u000a  hash_entry **pphVar6;\u000a  void *pvVar7;\u000a  \u000a  phVar5 = safe_hasher(table,entry);\u000a  *bucket_head = phVar5;\u000a  pvVar7 = phVar5->data;\u000a  if (pvVar7 == (void *)0x0) {\u000a    return (void *)0x0;\u000a  }\u000a  if ((pvVar7 == entry) || (_Var4 = (*table->comparator)(entry,pvVar7), _Var4 != false)) {\u000a    pvVar7 = phVar5->data;\u000a    if (in_CL == 0) {\u000a      return pvVar7;\u000a    }\u000a    entry_00 = phVar5->next;\u000a    if (entry_00 == (hash_entry *)0x0) {\u000a      phVar5->data = (void *)0x0;\u000a      return pvVar7;\u000a    }\u000a    uVar1 = *(undefined4 *)((long)&entry_00->data + 4);\u000a    uVar2 = *(undefined4 *)&entry_00->next;\u000a    uVar3 = *(undefined4 *)((long)&entry_00->next + 4);\u000a    *(undefined4 *)&phVar5->data = *(undefined4 *)&entry_00->data;\u000a    *(undefined4 *)((long)&phVar5->data + 4) = uVar1;\u000a    *(undefined4 *)&phVar5->next = uVar2;\u000a    *(undefined4 *)((long)&phVar5->next + 4) = uVar3;\u000a  }\u000a  else {\u000a    entry_00 = phVar5->next;\u000a    if (entry_00 == (hash_entry *)0x0) {\u000a      return (void *)0x0;\u000a    }\u000a    while( true ) {\u000a      pphVar6 = &phVar5->next;\u000a      if ((entry_00->data == entry) ||\u000a         (_Var4 = (*table->comparator)(entry,entry_00->data), _Var4 != false)) break;\u000a      phVar5 = *pphVar6;\u000a      entry_00 = phVar5->next;\u000a      if (entry_00 == (hash_entry *)0x0) {\u000a        return (void *)0x0;\u000a      }\u000a    }\u000a    entry_00 = *pphVar6;\u000a    pvVar7 = entry_00->data;\u000a    if (in_CL == 0) {\u000a      return pvVar7;\u000a    }\u000a    *pphVar6 = entry_00->next;\u000a  }\u000a  free_entry(table,entry_00);\u000a  return pvVar7;\u000a}\u000a\u000a
p1578
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R12D,ECX\nMOV R14,RDX\nMOV RBP,RSI\nMOV R15,RDI\nCALL 0x004041f0\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RSI,qword ptr [RBX]\nTEST RSI,RSI\nJZ 0x00404c65\nCMP RSI,RBP\nJZ 0x00404c17\nMOV RDI,RBP\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJZ 0x00404c30\nMOV R14,qword ptr [RBX]\nTEST R12B,R12B\nJZ 0x00404c8d\nMOV RSI,qword ptr [RBX + 0x8]\nTEST RSI,RSI\nJZ 0x00404c6a\nMOVUPS XMM0,xmmword ptr [RSI]\nMOVUPS xmmword ptr [RBX],XMM0\nJMP 0x00404c85\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nJZ 0x00404c65\nADD RBX,0x8\nXOR R14D,R14D\nMOV RSI,qword ptr [RAX]\nCMP RSI,RBP\nJZ 0x00404c73\nMOV RDI,RBP\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJNZ 0x00404c73\nMOV RBX,qword ptr [RBX]\nMOV RAX,qword ptr [RBX + 0x8]\nADD RBX,0x8\nTEST RAX,RAX\nJNZ 0x00404c40\nJMP 0x00404c8d\nXOR R14D,R14D\nJMP 0x00404c8d\nMOV qword ptr [RBX],0x0\nJMP 0x00404c8d\nMOV RSI,qword ptr [RBX]\nMOV R14,qword ptr [RSI]\nTEST R12B,R12B\nJZ 0x00404c8d\nMOV RAX,qword ptr [RSI + 0x8]\nMOV qword ptr [RBX],RAX\nMOV RDI,R15\nCALL 0x00404f60\nMOV RAX,R14\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1579
S'55\n41 57\n41 56\n41 54\n53\n41 89 cc\n49 89 d6\n48 89 f5\n49 89 ff\ne8 f7 f5 ff ff\n48 89 c3\n49 89 1e\n48 8b 33\n48 85 f6\n74 5e\n48 39 ee\n74 0b\n48 89 ef\n41 ff 57 38\n84 c0\n74 19\n4c 8b 33\n45 84 e4\n74 6e\n48 8b 73 08\n48 85 f6\n74 42\n0f 10 06\n0f 11 03\neb 55\n48 8b 43 08\n48 85 c0\n74 2c\n48 83 c3 08\n45 31 f6\n48 8b 30\n48 39 ee\n74 2b\n48 89 ef\n41 ff 57 38\n84 c0\n75 20\n48 8b 1b\n48 8b 43 08\n48 83 c3 08\n48 85 c0\n75 dd\neb 28\n45 31 f6\neb 23\n48 c7 03 00 00 00 00\neb 1a\n48 8b 33\n4c 8b 36\n45 84 e4\n74 0f\n48 8b 46 08\n48 89 03\n4c 89 ff\ne8 d3 02 00 00\n4c 89 f0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1580
S'.text:0000000000404be0\n.text:0000000000404be1\n.text:0000000000404be3\n.text:0000000000404be5\n.text:0000000000404be7\n.text:0000000000404be8\n.text:0000000000404beb\n.text:0000000000404bee\n.text:0000000000404bf1\n.text:0000000000404bf4\n.text:0000000000404bf9\n.text:0000000000404bfc\n.text:0000000000404bff\n.text:0000000000404c02\n.text:0000000000404c05\n.text:0000000000404c07\n.text:0000000000404c0a\n.text:0000000000404c0c\n.text:0000000000404c0f\n.text:0000000000404c13\n.text:0000000000404c15\n.text:0000000000404c17\n.text:0000000000404c1a\n.text:0000000000404c1d\n.text:0000000000404c1f\n.text:0000000000404c23\n.text:0000000000404c26\n.text:0000000000404c28\n.text:0000000000404c2b\n.text:0000000000404c2e\n.text:0000000000404c30\n.text:0000000000404c34\n.text:0000000000404c37\n.text:0000000000404c39\n.text:0000000000404c3d\n.text:0000000000404c40\n.text:0000000000404c43\n.text:0000000000404c46\n.text:0000000000404c48\n.text:0000000000404c4b\n.text:0000000000404c4f\n.text:0000000000404c51\n.text:0000000000404c53\n.text:0000000000404c56\n.text:0000000000404c5a\n.text:0000000000404c5e\n.text:0000000000404c61\n.text:0000000000404c63\n.text:0000000000404c65\n.text:0000000000404c68\n.text:0000000000404c6a\n.text:0000000000404c71\n.text:0000000000404c73\n.text:0000000000404c76\n.text:0000000000404c79\n.text:0000000000404c7c\n.text:0000000000404c7e\n.text:0000000000404c82\n.text:0000000000404c85\n.text:0000000000404c88\n.text:0000000000404c8d\n.text:0000000000404c90\n.text:0000000000404c91\n.text:0000000000404c93\n.text:0000000000404c95\n.text:0000000000404c97\n.text:0000000000404c98\n'
p1581
tp1582
sS'error'
p1583
(S'\n__stdcall error()\n'
p1584
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_0060d1e0)();\u000a  return;\u000a}\u000a\u000a
p1585
S'JMP qword ptr [0x0060d1e0]\n'
p1586
S'ff 25 1a b8 20 00\n'
p1587
S'.plt:00000000004019c0\n'
p1588
tp1589
sS'raw_comparator'
p1590
(S'\n__stdcall raw_comparator(void * a, void * b)\n'
p1591
V\u000a_Bool raw_comparator(void *a,void *b)\u000a\u000a{\u000a  return (_Bool)(a == b);\u000a}\u000a\u000a
p1592
S'CMP RDI,RSI\nSETZ AL\nRET\n'
p1593
S'48 39 f7\n0f 94 c0\nc3\n'
p1594
S'.text:0000000000404500\n.text:0000000000404503\n.text:0000000000404506\n'
p1595
tp1596
sS'strcaseeq6'
p1597
(S'\n__stdcall strcaseeq6()\n'
p1598
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1599
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407ae0\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x004068d2\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004068d9\nJMP 0x004068ee\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004068ee\nTEST BPL,BPL\nJZ 0x004068e9\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00406900\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1600
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 21 12 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1601
S'.text:00000000004068b0\n.text:00000000004068b1\n.text:00000000004068b2\n.text:00000000004068b3\n.text:00000000004068b5\n.text:00000000004068b8\n.text:00000000004068ba\n.text:00000000004068bf\n.text:00000000004068c3\n.text:00000000004068c5\n.text:00000000004068c7\n.text:00000000004068ca\n.text:00000000004068cc\n.text:00000000004068ce\n.text:00000000004068d0\n.text:00000000004068d2\n.text:00000000004068d4\n.text:00000000004068d7\n.text:00000000004068d9\n.text:00000000004068dc\n.text:00000000004068de\n.text:00000000004068e1\n.text:00000000004068e5\n.text:00000000004068e6\n.text:00000000004068e7\n.text:00000000004068e9\n.text:00000000004068ee\n.text:00000000004068f2\n.text:00000000004068f3\n.text:00000000004068f4\n'
p1602
tp1603
sS'strcaseeq5'
p1604
(S'\n__stdcall strcaseeq5()\n'
p1605
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1606
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407ae0\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00406886\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040688d\nJMP 0x004068a4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004068a4\nTEST BPL,BPL\nJZ 0x0040689f\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004068b0\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1607
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 6d 12 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1608
S'.text:0000000000406860\n.text:0000000000406861\n.text:0000000000406863\n.text:0000000000406864\n.text:0000000000406867\n.text:0000000000406869\n.text:000000000040686c\n.text:000000000040686e\n.text:0000000000406873\n.text:0000000000406877\n.text:0000000000406879\n.text:000000000040687b\n.text:000000000040687e\n.text:0000000000406880\n.text:0000000000406882\n.text:0000000000406884\n.text:0000000000406886\n.text:0000000000406888\n.text:000000000040688b\n.text:000000000040688d\n.text:0000000000406890\n.text:0000000000406892\n.text:0000000000406896\n.text:0000000000406899\n.text:000000000040689a\n.text:000000000040689c\n.text:000000000040689d\n.text:000000000040689f\n.text:00000000004068a4\n.text:00000000004068a5\n.text:00000000004068a7\n.text:00000000004068a8\n'
p1609
tp1610
sS'strcaseeq7'
p1611
(S'\n__stdcall strcaseeq7()\n'
p1612
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1613
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00407ae0\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00406922\nTEST ECX,0xffffffdf\nJNZ 0x00406926\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x0040692a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1614
S'53\n48 89 fb\n31 ff\ne8 d5 11 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1615
S'.text:0000000000406900\n.text:0000000000406901\n.text:0000000000406904\n.text:0000000000406906\n.text:000000000040690b\n.text:000000000040690f\n.text:0000000000406911\n.text:0000000000406913\n.text:0000000000406919\n.text:000000000040691b\n.text:0000000000406920\n.text:0000000000406921\n.text:0000000000406922\n.text:0000000000406924\n.text:0000000000406926\n.text:0000000000406928\n.text:0000000000406929\n.text:000000000040692a\n.text:000000000040692f\n.text:0000000000406930\n'
p1616
tp1617
sS'hash_pjw'
p1618
(S'\n__stdcall hash_pjw(void * x, size_t tablesize)\n'
p1619
V\u000asize_t hash_pjw(void *x,size_t tablesize)\u000a\u000a{\u000a  ulong uVar1;\u000a  char cVar2;\u000a  char *pcVar3;\u000a  \u000a  cVar2 = *(char *)x;\u000a  if (cVar2 == 0) {\u000a    uVar1 = 0;\u000a  }\u000a  else {\u000a    pcVar3 = (char *)((long)x + 1);\u000a    uVar1 = 0;\u000a    do {\u000a      uVar1 = (uVar1 << 9 | uVar1 >> 0x37) + (long)cVar2;\u000a      cVar2 = *pcVar3;\u000a      pcVar3 = pcVar3 + 1;\u000a    } while (cVar2 != 0);\u000a  }\u000a  return uVar1 % tablesize;\u000a}\u000a\u000a
p1620
S'MOV CL,byte ptr [RDI]\nTEST CL,CL\nJZ 0x00407bc7\nINC RDI\nXOR EAX,EAX\nNOP dword ptr [RAX + RAX*0x1]\nMOVSX RCX,CL\nROL RAX,0x9\nADD RAX,RCX\nMOVZX ECX,byte ptr [RDI]\nINC RDI\nTEST CL,CL\nJNZ 0x00407bb0\nJMP 0x00407bc9\nXOR EAX,EAX\nXOR EDX,EDX\nDIV RSI\nMOV RAX,RDX\nRET\n'
p1621
S'8a 0f\n84 c9\n74 21\n48 ff c7\n31 c0\n0f 1f 44 00 00\n48 0f be c9\n48 c1 c0 09\n48 01 c8\n0f b6 0f\n48 ff c7\n84 c9\n75 eb\neb 02\n31 c0\n31 d2\n48 f7 f6\n48 89 d0\nc3\n'
p1622
S'.text:0000000000407ba0\n.text:0000000000407ba2\n.text:0000000000407ba4\n.text:0000000000407ba6\n.text:0000000000407ba9\n.text:0000000000407bab\n.text:0000000000407bb0\n.text:0000000000407bb4\n.text:0000000000407bb8\n.text:0000000000407bbb\n.text:0000000000407bbe\n.text:0000000000407bc1\n.text:0000000000407bc3\n.text:0000000000407bc5\n.text:0000000000407bc7\n.text:0000000000407bc9\n.text:0000000000407bcb\n.text:0000000000407bce\n.text:0000000000407bd1\n'
p1623
tp1624
sS'getline'
p1625
(S'\n__stdcall getline(char * * __lineptr, size_t * __n, FILE * __stream)\n'
p1626
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__ssize_t getline(char **__lineptr,size_t *__n,FILE *__stream)\u000a\u000a{\u000a  __ssize_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_getline_0060d210)();\u000a  return _Var1;\u000a}\u000a\u000a
p1627
S'JMP qword ptr [0x0060d210]\n'
p1628
S'ff 25 ea b7 20 00\n'
p1629
S'.plt:0000000000401a20\n'
p1630
tp1631
sS'emit_mandatory_arg_note'
p1632
(S'\n__stdcall emit_mandatory_arg_note()\n'
p1633
V\u000avoid emit_mandatory_arg_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnMandatory arguments to long options are mandatory for short options too.\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p1634
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x4092db\nMOV EDX,0x5\nCALL 0x00401750\nMOV RSI,qword ptr [0x0060d2e8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401850\n'
p1635
S'50\n31 ff\nbe db 92 40 00\nba 05 00 00 00\ne8 de f9 ff ff\n48 8b 35 6f b5 20 00\n48 89 c7\n58\ne9 ce fa ff ff\n'
p1636
S'.text:0000000000401d60\n.text:0000000000401d61\n.text:0000000000401d63\n.text:0000000000401d68\n.text:0000000000401d6d\n.text:0000000000401d72\n.text:0000000000401d79\n.text:0000000000401d7c\n.text:0000000000401d7d\n'
p1637
tp1638
sS'strcaseeq0'
p1639
(S'\n__stdcall strcaseeq0()\n'
p1640
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1641
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407ae0\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00406635\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040663c\nJMP 0x00406670\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00406670\nTEST BPL,BPL\nJZ 0x0040666b\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00406680\nJMP 0x00406670\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1642
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 bd 14 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1643
S'.text:0000000000406600\n.text:0000000000406601\n.text:0000000000406603\n.text:0000000000406605\n.text:0000000000406607\n.text:0000000000406609\n.text:000000000040660a\n.text:000000000040660b\n.text:000000000040660e\n.text:0000000000406611\n.text:0000000000406614\n.text:0000000000406617\n.text:0000000000406619\n.text:000000000040661c\n.text:000000000040661e\n.text:0000000000406623\n.text:0000000000406626\n.text:0000000000406628\n.text:000000000040662a\n.text:000000000040662d\n.text:000000000040662f\n.text:0000000000406631\n.text:0000000000406633\n.text:0000000000406635\n.text:0000000000406637\n.text:000000000040663a\n.text:000000000040663c\n.text:000000000040663f\n.text:0000000000406641\n.text:0000000000406645\n.text:000000000040664a\n.text:000000000040664d\n.text:0000000000406651\n.text:0000000000406655\n.text:0000000000406659\n.text:000000000040665d\n.text:0000000000406661\n.text:0000000000406664\n.text:0000000000406669\n.text:000000000040666b\n.text:0000000000406670\n.text:0000000000406674\n.text:0000000000406675\n.text:0000000000406677\n.text:0000000000406679\n.text:000000000040667b\n.text:000000000040667d\n.text:000000000040667e\n'
p1644
tp1645
sS'hash_table_ok'
p1646
(S'\n__stdcall hash_table_ok(Hash_table * table)\n'
p1647
V\u000a_Bool hash_table_ok(Hash_table *table)\u000a\u000a{\u000a  hash_entry **pphVar1;\u000a  undefined uVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  hash_entry *phVar5;\u000a  hash_entry *phVar6;\u000a  \u000a  phVar6 = table->bucket;\u000a  if (phVar6 < table->bucket_limit) {\u000a    sVar4 = 0;\u000a    sVar3 = 0;\u000a    do {\u000a      phVar5 = phVar6;\u000a      if (phVar6->data != (void *)0x0) {\u000a        do {\u000a          sVar4 = sVar4 + 1;\u000a          pphVar1 = &phVar5->next;\u000a          phVar5 = *pphVar1;\u000a        } while (*pphVar1 != (hash_entry *)0x0);\u000a        sVar3 = sVar3 + 1;\u000a      }\u000a      phVar6 = phVar6 + 1;\u000a    } while (phVar6 < table->bucket_limit);\u000a  }\u000a  else {\u000a    sVar3 = 0;\u000a    sVar4 = 0;\u000a  }\u000a  if ((sVar3 != table->n_buckets_used) || (uVar2 = 1, sVar4 != table->n_entries)) {\u000a    uVar2 = 0;\u000a  }\u000a  return (_Bool)uVar2;\u000a}\u000a\u000a
p1648
S'MOV RSI,qword ptr [RDI]\nCMP RSI,qword ptr [RDI + 0x8]\nJNC 0x0040408a\nMOV R8,qword ptr [RDI + 0x8]\nXOR ECX,ECX\nXOR EAX,EAX\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP qword ptr [RSI],0x0\nJZ 0x0040407f\nMOV RDX,RSI\nNOP dword ptr [RAX]\nINC RCX\nMOV RDX,qword ptr [RDX + 0x8]\nTEST RDX,RDX\nJNZ 0x00404070\nINC RAX\nADD RSI,0x10\nCMP RSI,R8\nJC 0x00404060\nJMP 0x0040408e\nXOR EAX,EAX\nXOR ECX,ECX\nCMP RAX,qword ptr [RDI + 0x18]\nJNZ 0x0040409c\nMOV AL,0x1\nCMP RCX,qword ptr [RDI + 0x20]\nJZ 0x0040409e\nXOR EAX,EAX\nRET\n'
p1649
S'48 8b 37\n48 3b 77 08\n73 41\n4c 8b 47 08\n31 c9\n31 c0\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 83 3e 00\n74 19\n48 89 f2\n0f 1f 80 00 00 00 00\n48 ff c1\n48 8b 52 08\n48 85 d2\n75 f4\n48 ff c0\n48 83 c6 10\n4c 39 c6\n72 d8\neb 04\n31 c0\n31 c9\n48 3b 47 18\n75 08\nb0 01\n48 3b 4f 20\n74 02\n31 c0\nc3\n'
p1650
S'.text:0000000000404040\n.text:0000000000404043\n.text:0000000000404047\n.text:0000000000404049\n.text:000000000040404d\n.text:000000000040404f\n.text:0000000000404051\n.text:0000000000404060\n.text:0000000000404064\n.text:0000000000404066\n.text:0000000000404069\n.text:0000000000404070\n.text:0000000000404073\n.text:0000000000404077\n.text:000000000040407a\n.text:000000000040407c\n.text:000000000040407f\n.text:0000000000404083\n.text:0000000000404086\n.text:0000000000404088\n.text:000000000040408a\n.text:000000000040408c\n.text:000000000040408e\n.text:0000000000404092\n.text:0000000000404094\n.text:0000000000404096\n.text:000000000040409a\n.text:000000000040409c\n.text:000000000040409e\n'
p1651
tp1652
sS'strcaseeq2'
p1653
(S'\n__stdcall strcaseeq2()\n'
p1654
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1655
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407ae0\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00406746\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040674d\nJMP 0x0040677a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040677a\nTEST BPL,BPL\nJZ 0x00406775\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00406790\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1656
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 ad 13 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1657
S'.text:0000000000406710\n.text:0000000000406711\n.text:0000000000406713\n.text:0000000000406715\n.text:0000000000406717\n.text:0000000000406719\n.text:000000000040671a\n.text:000000000040671b\n.text:000000000040671e\n.text:0000000000406721\n.text:0000000000406724\n.text:0000000000406727\n.text:0000000000406729\n.text:000000000040672c\n.text:000000000040672e\n.text:0000000000406733\n.text:0000000000406737\n.text:0000000000406739\n.text:000000000040673b\n.text:000000000040673e\n.text:0000000000406740\n.text:0000000000406742\n.text:0000000000406744\n.text:0000000000406746\n.text:0000000000406748\n.text:000000000040674b\n.text:000000000040674d\n.text:0000000000406750\n.text:0000000000406752\n.text:0000000000406756\n.text:000000000040675a\n.text:000000000040675e\n.text:0000000000406762\n.text:0000000000406765\n.text:0000000000406769\n.text:000000000040676a\n.text:000000000040676c\n.text:000000000040676e\n.text:0000000000406770\n.text:0000000000406772\n.text:0000000000406773\n.text:0000000000406775\n.text:000000000040677a\n.text:000000000040677e\n.text:000000000040677f\n.text:0000000000406781\n.text:0000000000406783\n.text:0000000000406785\n.text:0000000000406787\n.text:0000000000406788\n'
p1658
tp1659
sS'strcaseeq1'
p1660
(S'\n__stdcall strcaseeq1()\n'
p1661
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1662
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00407ae0\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x004066bd\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004066c4\nJMP 0x004066f7\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004066f7\nTEST BPL,BPL\nJZ 0x004066f2\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00406710\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1663
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 36 14 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1664
S'.text:0000000000406680\n.text:0000000000406681\n.text:0000000000406683\n.text:0000000000406685\n.text:0000000000406687\n.text:0000000000406689\n.text:000000000040668a\n.text:000000000040668b\n.text:0000000000406690\n.text:0000000000406693\n.text:0000000000406696\n.text:0000000000406699\n.text:000000000040669b\n.text:000000000040669e\n.text:00000000004066a3\n.text:00000000004066a5\n.text:00000000004066aa\n.text:00000000004066ae\n.text:00000000004066b0\n.text:00000000004066b2\n.text:00000000004066b5\n.text:00000000004066b7\n.text:00000000004066b9\n.text:00000000004066bb\n.text:00000000004066bd\n.text:00000000004066bf\n.text:00000000004066c2\n.text:00000000004066c4\n.text:00000000004066c7\n.text:00000000004066c9\n.text:00000000004066cd\n.text:00000000004066d1\n.text:00000000004066d5\n.text:00000000004066db\n.text:00000000004066df\n.text:00000000004066e2\n.text:00000000004066e6\n.text:00000000004066e7\n.text:00000000004066e9\n.text:00000000004066eb\n.text:00000000004066ed\n.text:00000000004066ef\n.text:00000000004066f0\n.text:00000000004066f2\n.text:00000000004066f7\n.text:00000000004066fb\n.text:00000000004066fc\n.text:00000000004066fe\n.text:0000000000406700\n.text:0000000000406702\n.text:0000000000406704\n.text:0000000000406705\n'
p1665
tp1666
sS'strcaseeq4'
p1667
(S'\n__stdcall strcaseeq4()\n'
p1668
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1669
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407ae0\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x0040682c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00406833\nJMP 0x00406854\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00406854\nTEST BPL,BPL\nJZ 0x0040684f\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00406860\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1670
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 c7 12 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1671
S'.text:0000000000406800\n.text:0000000000406801\n.text:0000000000406803\n.text:0000000000406805\n.text:0000000000406806\n.text:0000000000406807\n.text:000000000040680a\n.text:000000000040680d\n.text:000000000040680f\n.text:0000000000406812\n.text:0000000000406814\n.text:0000000000406819\n.text:000000000040681d\n.text:000000000040681f\n.text:0000000000406821\n.text:0000000000406824\n.text:0000000000406826\n.text:0000000000406828\n.text:000000000040682a\n.text:000000000040682c\n.text:000000000040682e\n.text:0000000000406831\n.text:0000000000406833\n.text:0000000000406836\n.text:0000000000406838\n.text:000000000040683c\n.text:0000000000406840\n.text:0000000000406843\n.text:0000000000406847\n.text:0000000000406848\n.text:000000000040684a\n.text:000000000040684c\n.text:000000000040684d\n.text:000000000040684f\n.text:0000000000406854\n.text:0000000000406858\n.text:0000000000406859\n.text:000000000040685b\n.text:000000000040685d\n.text:000000000040685e\n'
p1672
tp1673
sS'strcaseeq3'
p1674
(S'\n__stdcall strcaseeq3()\n'
p1675
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1676
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407ae0\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x004067c0\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004067c7\nJMP 0x004067ea\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004067ea\nTEST BPL,BPL\nJZ 0x004067e5\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00406800\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1677
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 33 13 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1678
S'.text:0000000000406790\n.text:0000000000406791\n.text:0000000000406793\n.text:0000000000406795\n.text:0000000000406797\n.text:0000000000406798\n.text:000000000040679b\n.text:000000000040679e\n.text:00000000004067a1\n.text:00000000004067a3\n.text:00000000004067a6\n.text:00000000004067a8\n.text:00000000004067ad\n.text:00000000004067b1\n.text:00000000004067b3\n.text:00000000004067b5\n.text:00000000004067b8\n.text:00000000004067ba\n.text:00000000004067bc\n.text:00000000004067be\n.text:00000000004067c0\n.text:00000000004067c2\n.text:00000000004067c5\n.text:00000000004067c7\n.text:00000000004067ca\n.text:00000000004067cc\n.text:00000000004067d0\n.text:00000000004067d4\n.text:00000000004067d8\n.text:00000000004067db\n.text:00000000004067dc\n.text:00000000004067de\n.text:00000000004067e0\n.text:00000000004067e2\n.text:00000000004067e3\n.text:00000000004067e5\n.text:00000000004067ea\n.text:00000000004067eb\n.text:00000000004067ed\n.text:00000000004067ef\n.text:00000000004067f1\n.text:00000000004067f2\n'
p1679
tp1680
sS'last_component'
p1681
(S'\n__stdcall last_component(char * name)\n'
p1682
V\u000achar * last_component(char *name)\u000a\u000a{\u000a  bool bVar1;\u000a  bool bVar2;\u000a  char *pcVar3;\u000a  \u000a  name = name + -1;\u000a  do {\u000a    pcVar3 = name + 1;\u000a    name = name + 1;\u000a  } while (*pcVar3 == '/');\u000a  bVar2 = false;\u000a  pcVar3 = name;\u000a  do {\u000a    bVar1 = true;\u000a    if (*name != '/') {\u000a      if (*name == 0) {\u000a        return pcVar3;\u000a      }\u000a      bVar1 = bVar2;\u000a      if (bVar2) {\u000a        pcVar3 = name;\u000a        bVar1 = false;\u000a      }\u000a    }\u000a    bVar2 = bVar1;\u000a    name = name + 1;\u000a  } while( true );\u000a}\u000a\u000a
p1683
S'DEC RDI\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP byte ptr [RDI + 0x1],0x2f\nLEA RDI,[RDI + 0x1]\nJZ 0x00403d20\nXOR ESI,ESI\nMOV RAX,RDI\nJMP 0x00403d46\nINC RAX\nMOV SIL,DL\nMOVZX ECX,byte ptr [RAX]\nMOV DL,0x1\nCMP CL,0x2f\nJZ 0x00403d40\nTEST CL,CL\nJZ 0x00403d67\nMOV EDX,ESI\nAND DL,0x1\nJZ 0x00403d5d\nXOR ESI,ESI\nTEST DL,DL\nCMOVNZ RDI,RAX\nMOV EDX,ESI\nJMP 0x00403d40\nMOV RAX,RDI\nRET\n'
p1684
S'48 ff cf\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n80 7f 01 2f\n48 8d 7f 01\n74 f6\n31 f6\n48 89 f8\neb 15\n48 ff c0\n40 88 d6\n0f b6 08\nb2 01\n80 f9 2f\n74 f0\n84 c9\n74 13\n89 f2\n80 e2 01\n74 02\n31 f6\n84 d2\n48 0f 45 f8\n89 f2\neb d9\n48 89 f8\nc3\n'
p1685
S'.text:0000000000403d10\n.text:0000000000403d13\n.text:0000000000403d20\n.text:0000000000403d24\n.text:0000000000403d28\n.text:0000000000403d2a\n.text:0000000000403d2c\n.text:0000000000403d2f\n.text:0000000000403d40\n.text:0000000000403d43\n.text:0000000000403d46\n.text:0000000000403d49\n.text:0000000000403d4b\n.text:0000000000403d4e\n.text:0000000000403d50\n.text:0000000000403d52\n.text:0000000000403d54\n.text:0000000000403d56\n.text:0000000000403d59\n.text:0000000000403d5b\n.text:0000000000403d5d\n.text:0000000000403d5f\n.text:0000000000403d63\n.text:0000000000403d65\n.text:0000000000403d67\n.text:0000000000403d6a\n'
p1686
tp1687
sS'register_tm_clones'
p1688
(S'\n__stdcall register_tm_clones()\n'
p1689
V\u000a/* WARNING: Removing unreachable block (ram,0x00401b23) */\u000a/* WARNING: Removing unreachable block (ram,0x00401b2d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1690
S'MOV ESI,0x60d2d0\nPUSH RBP\nSUB RSI,0x60d2d0\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401b38\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401b38\nPOP RBP\nMOV EDI,0x60d2d0\nJMP RAX\nPOP RBP\nRET\n'
p1691
S'be d0 d2 60 00\n55\n48 81 ee d0 d2 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf d0 d2 60 00\nff e0\n5d\nc3\n'
p1692
S'.text:0000000000401b00\n.text:0000000000401b05\n.text:0000000000401b06\n.text:0000000000401b0d\n.text:0000000000401b11\n.text:0000000000401b14\n.text:0000000000401b17\n.text:0000000000401b1b\n.text:0000000000401b1e\n.text:0000000000401b21\n.text:0000000000401b23\n.text:0000000000401b28\n.text:0000000000401b2b\n.text:0000000000401b2d\n.text:0000000000401b2e\n.text:0000000000401b33\n.text:0000000000401b38\n.text:0000000000401b39\n'
p1693
tp1694
sS'c_islower'
p1695
(S'\n__stdcall c_islower()\n'
p1696
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1697
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1698
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1699
S'.text:0000000000407a80\n.text:0000000000407a83\n.text:0000000000407a86\n.text:0000000000407a89\n'
p1700
tp1701
sS'argmatch'
p1702
(S'\n__stdcall argmatch(char * arg, char * * arglist, char * vallist, size_t valsize)\n'
p1703
V\u000aptrdiff_t argmatch(char *arg,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  bool bVar1;\u000a  long lVar2;\u000a  int iVar3;\u000a  size_t __n;\u000a  size_t sVar4;\u000a  long lVar5;\u000a  ptrdiff_t pVar6;\u000a  char *__s2;\u000a  char *__s1;\u000a  long local_50;\u000a  \u000a  __n = strlen(arg);\u000a  __s1 = *arglist;\u000a  if (__s1 == (char *)0x0) {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a  }\u000a  else {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a    lVar5 = 0;\u000a    __s2 = vallist;\u000a    do {\u000a      iVar3 = strncmp(__s1,arg,__n);\u000a      lVar2 = local_50;\u000a      if (iVar3 == 0) {\u000a        sVar4 = strlen(__s1);\u000a        if (sVar4 == __n) {\u000a          return lVar5;\u000a        }\u000a        lVar2 = lVar5;\u000a        if ((local_50 != -1) &&\u000a           ((vallist == (char *)0x0 ||\u000a            (iVar3 = memcmp(vallist + local_50 * valsize,__s2,valsize), lVar2 = local_50, iVar3 != 0\u000a            )))) {\u000a          bVar1 = true;\u000a          lVar2 = local_50;\u000a        }\u000a      }\u000a      local_50 = lVar2;\u000a      __s1 = arglist[lVar5 + 1];\u000a      lVar5 = lVar5 + 1;\u000a      __s2 = __s2 + valsize;\u000a    } while (__s1 != (char *)0x0);\u000a  }\u000a  pVar6 = -2;\u000a  if (!bVar1) {\u000a    pVar6 = local_50;\u000a  }\u000a  return pVar6;\u000a}\u000a\u000a
p1704
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R13,RCX\nMOV R14,RDX\nMOV RBP,RSI\nMOV R12,RDI\nCALL 0x00401770\nMOV RBX,RAX\nMOV qword ptr [RSP + 0x20],RBP\nMOV R15,qword ptr [RBP]\nTEST R15,R15\nJZ 0x00407687\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nMOV qword ptr [RSP + 0x18],R14\nXOR EBP,EBP\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,R15\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x00401690\nTEST EAX,EAX\nJNZ 0x00407670\nMOV RDI,R15\nCALL 0x00401770\nCMP RAX,RBX\nJZ 0x004076a9\nCMP qword ptr [RSP + 0x8],-0x1\nJZ 0x00407665\nMOV RAX,qword ptr [RSP + 0x18]\nTEST RAX,RAX\nJZ 0x0040765c\nMOV RDI,qword ptr [RSP + 0x8]\nIMUL RDI,R13\nADD RDI,RAX\nMOV RSI,R14\nMOV RDX,R13\nCALL 0x00401840\nTEST EAX,EAX\nJZ 0x00407670\nMOV AL,0x1\nMOV qword ptr [RSP + 0x10],RAX\nJMP 0x00407670\nMOV qword ptr [RSP + 0x8],RBP\nNOP word ptr [RAX + RAX*0x1]\nMOV RAX,qword ptr [RSP + 0x20]\nMOV R15,qword ptr [RAX + RBP*0x8 + 0x8]\nINC RBP\nADD R14,R13\nTEST R15,R15\nJNZ 0x00407610\nJMP 0x00407697\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nTEST byte ptr [RSP + 0x10],0x1\nMOV RBP,-0x2\nCMOVZ RBP,qword ptr [RSP + 0x8]\nMOV RAX,RBP\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1705
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 cd\n49 89 d6\n48 89 f5\n49 89 fc\ne8 91 a1 ff ff\n48 89 c3\n48 89 6c 24 20\n4c 8b 7d 00\n4d 85 ff\n0f 84 93 00 00 00\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\n4c 89 74 24 18\n31 ed\n0f 1f 44 00 00\n4c 89 ff\n4c 89 e6\n48 89 da\ne8 72 a0 ff ff\n85 c0\n75 4e\n4c 89 ff\ne8 46 a1 ff ff\n48 39 d8\n74 7a\n48 83 7c 24 08 ff\n74 2e\n48 8b 44 24 18\n48 85 c0\n74 1b\n48 8b 7c 24 08\n49 0f af fd\n48 01 c7\n4c 89 f6\n4c 89 ea\ne8 e8 a1 ff ff\n85 c0\n74 14\nb0 01\n48 89 44 24 10\neb 0b\n48 89 6c 24 08\n66 0f 1f 44 00 00\n48 8b 44 24 20\n4c 8b 7c e8 08\n48 ff c5\n4d 01 ee\n4d 85 ff\n75 8b\neb 10\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\nf6 44 24 10 01\n48 c7 c5 fe ff ff ff\n48 0f 44 6c 24 08\n48 89 e8\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1706
S'.text:00000000004075c0\n.text:00000000004075c1\n.text:00000000004075c3\n.text:00000000004075c5\n.text:00000000004075c7\n.text:00000000004075c9\n.text:00000000004075ca\n.text:00000000004075ce\n.text:00000000004075d1\n.text:00000000004075d4\n.text:00000000004075d7\n.text:00000000004075da\n.text:00000000004075df\n.text:00000000004075e2\n.text:00000000004075e7\n.text:00000000004075eb\n.text:00000000004075ee\n.text:00000000004075f4\n.text:00000000004075fd\n.text:00000000004075ff\n.text:0000000000407604\n.text:0000000000407609\n.text:000000000040760b\n.text:0000000000407610\n.text:0000000000407613\n.text:0000000000407616\n.text:0000000000407619\n.text:000000000040761e\n.text:0000000000407620\n.text:0000000000407622\n.text:0000000000407625\n.text:000000000040762a\n.text:000000000040762d\n.text:000000000040762f\n.text:0000000000407635\n.text:0000000000407637\n.text:000000000040763c\n.text:000000000040763f\n.text:0000000000407641\n.text:0000000000407646\n.text:000000000040764a\n.text:000000000040764d\n.text:0000000000407650\n.text:0000000000407653\n.text:0000000000407658\n.text:000000000040765a\n.text:000000000040765c\n.text:000000000040765e\n.text:0000000000407663\n.text:0000000000407665\n.text:000000000040766a\n.text:0000000000407670\n.text:0000000000407675\n.text:000000000040767a\n.text:000000000040767d\n.text:0000000000407680\n.text:0000000000407683\n.text:0000000000407685\n.text:0000000000407687\n.text:0000000000407690\n.text:0000000000407692\n.text:0000000000407697\n.text:000000000040769c\n.text:00000000004076a3\n.text:00000000004076a9\n.text:00000000004076ac\n.text:00000000004076b0\n.text:00000000004076b1\n.text:00000000004076b3\n.text:00000000004076b5\n.text:00000000004076b7\n.text:00000000004076b9\n.text:00000000004076ba\n'
p1707
tp1708
sS'do_link'
p1709
(S'\n__stdcall do_link(char * source, char * dest)\n'
p1710
V\u000a_Bool do_link(char *source,char *dest)\u000a\u000a{\u000a  byte bVar1;\u000a  byte bVar2;\u000a  _Bool _Var3;\u000a  int iVar4;\u000a  uint uVar5;\u000a  undefined8 uVar6;\u000a  uint *puVar7;\u000a  char *__ptr;\u000a  undefined8 uVar8;\u000a  char *pcVar9;\u000a  char *pcVar10;\u000a  ulong uVar11;\u000a  bool bVar12;\u000a  bool bVar13;\u000a  char *local_170;\u000a  stat local_150;\u000a  stat local_c0;\u000a  \u000a  if (symbolic_link == 0) {\u000a    if (logical != 1) {\u000a      iVar4 = lstat(source,(stat *)&local_150);\u000a      if (iVar4 != 0) goto LAB_00402656;\u000aLAB_004026d1:\u000a      if ((local_150.st_mode & 0xf000) != 0x4000) goto LAB_004025a1;\u000a      bVar1 = 1;\u000a      if (hard_dir_link != 0) goto LAB_004025a4;\u000a      uVar6 = dcgettext(0,"%s: hard link not allowed for directory",5);\u000aLAB_00402868:\u000a      __ptr = quotearg_n_style_colon((char *)0x0);\u000a      uVar11 = 0;\u000a      goto LAB_00402876;\u000a    }\u000a    iVar4 = stat(source,(stat *)&local_150);\u000a    if (iVar4 == 0) goto LAB_004026d1;\u000aLAB_00402656:\u000a    puVar7 = (uint *)__errno_location();\u000a    uVar5 = *puVar7;\u000a    uVar6 = dcgettext(0,"failed to access %s",5);\u000a  }\u000a  else {\u000aLAB_004025a1:\u000a    bVar1 = 0;\u000aLAB_004025a4:\u000a    if (((remove_existing_files == 0) && (interactive == 0)) && (backup_type == no_backups)) {\u000aLAB_00402629:\u000a      bVar13 = false;\u000aLAB_0040262b:\u000a      if (remove_existing_files == 0) {\u000a        if (((symbolic_link == 0) && (backup_type != no_backups)) && (bVar13)) goto LAB_004026b6;\u000a        goto LAB_0040282c;\u000a      }\u000a      if (bVar13) {\u000aLAB_004026b6:\u000a        if (backup_type == no_backups) {\u000a          if (((symbolic_link & 1) == 0) || (iVar4 = stat(source,(stat *)&local_150), iVar4 == 0))\u000a          goto LAB_004027a0;\u000a        }\u000a        else {\u000a          if ((symbolic_link & 1) == 0) {\u000aLAB_004027a0:\u000a            if (((local_150.st_ino == local_c0.st_ino) && (local_150.st_dev == local_c0.st_dev)) &&\u000a               ((local_150.st_nlink == 1 || (_Var3 = same_name(source,dest), _Var3 != false)))) {\u000a              uVar6 = dcgettext(0,"%s and %s are the same file",5);\u000a              __ptr = quotearg_n_style((char *)0x0);\u000aLAB_0040280b:\u000a              pcVar9 = quotearg_n_style((char *)0x1);\u000a              error(0,0,uVar6,__ptr,pcVar9);\u000a              return false;\u000a            }\u000a          }\u000a        }\u000aLAB_0040282c:\u000a        uVar6 = stderr;\u000a        if (!bVar13) goto LAB_00402930;\u000a        if ((local_c0.st_mode & 0xf000) == 0x4000) {\u000a          uVar6 = dcgettext(0,"%s: cannot overwrite directory",5);\u000a          goto LAB_00402868;\u000a        }\u000a        if (interactive == 1) {\u000a          uVar8 = dcgettext(0,"%s: replace %s? ",5);\u000a          quotearg_style((char *)0x4);\u000a          __fprintf_chk(uVar6,1,uVar8);\u000a          _Var3 = yesno();\u000a          if (_Var3 == false) {\u000a            return true;\u000a          }\u000a          remove_existing_files = 1;\u000a        }\u000a        if (backup_type == no_backups) goto LAB_00402930;\u000a        local_170 = find_backup_file_name(dest);\u000a        iVar4 = rename(dest,local_170);\u000a        if (iVar4 != 0) {\u000a          puVar7 = (uint *)__errno_location();\u000a          uVar5 = *puVar7;\u000a          free(local_170);\u000a          if (uVar5 != 2) {\u000a            __ptr = "cannot backup %s";\u000a            goto LAB_004025dc;\u000a          }\u000a          goto LAB_00402930;\u000a        }\u000a        if (relative != 1) goto LAB_0040295e;\u000aLAB_00402940:\u000a        __ptr = convert_abs_rel(source,dest);\u000a        source = __ptr;\u000a      }\u000a      else {\u000aLAB_00402930:\u000a        local_170 = (char *)0x0;\u000a        if (relative == 1) goto LAB_00402940;\u000aLAB_0040295e:\u000a        __ptr = (char *)0x0;\u000a      }\u000a      if (symbolic_link == 1) {\u000a        iVar4 = symlink(source,dest);\u000a      }\u000a      else {\u000a        iVar4 = linkat(-100,source,-100,dest,(uint)logical << 10);\u000a      }\u000a      bVar13 = iVar4 == 0;\u000a      if (((!bVar13) && (puVar7 = (uint *)__errno_location(), *puVar7 == 0x11)) &&\u000a         ((local_170 != (char *)0x0 || ((remove_existing_files & 1) != 0)))) {\u000a        iVar4 = unlink(dest);\u000a        if (iVar4 != 0) {\u000a          uVar5 = *puVar7;\u000a          bVar12 = false;\u000a          uVar6 = dcgettext(0,"cannot remove %s",5);\u000a          pcVar9 = quotearg_style((char *)0x4);\u000a          error(0,(ulong)uVar5,uVar6,pcVar9);\u000a          goto LAB_00402c32;\u000a        }\u000a        if (symbolic_link == 1) {\u000a          iVar4 = symlink(source,dest);\u000a        }\u000a        else {\u000a          iVar4 = linkat(-100,source,-100,dest,(uint)logical << 10);\u000a        }\u000a        bVar13 = iVar4 == 0;\u000a      }\u000a      bVar2 = symbolic_link;\u000a      bVar12 = bVar13;\u000a      if (!bVar13) {\u000a        puVar7 = (uint *)__errno_location();\u000a        uVar5 = *puVar7;\u000a        if ((bVar2 & 1) == 0) {\u000a          if ((bool)(bVar1 | uVar5 != 0x1f)) {\u000a            if (((uVar5 < 0x1f) && ((0x50020000U >> (uVar5 & 0x1f) & 1) != 0)) || (uVar5 == 0x7a)) {\u000a              pcVar9 = "failed to create hard link %s";\u000a            }\u000a            else {\u000a              pcVar9 = "failed to create hard link %s => %s";\u000a            }\u000a          }\u000a          else {\u000a            pcVar9 = "failed to create hard link to %.0s%s";\u000a          }\u000a        }\u000a        else {\u000a          if (uVar5 == 0x24) {\u000a            pcVar9 = "failed to create symbolic link %s -> %s";\u000a          }\u000a          else {\u000a            pcVar9 = "failed to create symbolic link %s -> %s";\u000a            if (*source != 0) {\u000a              pcVar9 = "failed to create symbolic link %s";\u000a            }\u000a          }\u000a        }\u000a        uVar6 = dcgettext(0,pcVar9,5);\u000a        pcVar9 = quotearg_n_style((char *)0x0);\u000a        pcVar10 = quotearg_n_style((char *)0x1);\u000a        error(0,(ulong)uVar5,uVar6,pcVar9,pcVar10);\u000a        if ((local_170 != (char *)0x0) && (iVar4 = rename(local_170,dest), iVar4 != 0)) {\u000a          uVar5 = *puVar7;\u000a          uVar6 = dcgettext(0,"cannot un-backup %s",5);\u000a          pcVar9 = quotearg_style((char *)0x4);\u000a          error(0,(ulong)uVar5,uVar6,pcVar9);\u000a        }\u000a      }\u000a      else {\u000a        if ((symbolic_link & 1) == 0) {\u000a          record_file(dest_set,dest,&local_150);\u000a        }\u000a        if (verbose == 1) {\u000a          if (local_170 != (char *)0x0) {\u000a            pcVar9 = quotearg_style((char *)0x4);\u000a            __printf_chk(1,"%s ~ ",pcVar9,pcVar9);\u000a          }\u000a          pcVar9 = quotearg_n_style((char *)0x0);\u000a          uVar5 = 0x3d;\u000a          if (symbolic_link != 0) {\u000a            uVar5 = 0x2d;\u000a          }\u000a          pcVar10 = quotearg_n_style((char *)0x1);\u000a          __printf_chk(1,"%s %c> %s\u005cn",pcVar9,(ulong)uVar5,pcVar10);\u000a        }\u000a      }\u000aLAB_00402c32:\u000a      free(local_170);\u000a      free(__ptr);\u000a      return (_Bool)bVar12;\u000a    }\u000a    iVar4 = lstat(dest,(stat *)&local_c0);\u000a    if (iVar4 == 0) {\u000a      bVar13 = true;\u000a      if (((iVar4 == 0) && (dest_set != (Hash_table *)0x0)) &&\u000a         (_Var3 = seen_file(dest_set,dest,&local_c0), _Var3 != false)) {\u000a        uVar6 = dcgettext(0,"will not overwrite just-created %s with %s",5);\u000a        __ptr = quotearg_n_style((char *)0x0);\u000a        goto LAB_0040280b;\u000a      }\u000a      goto LAB_0040262b;\u000a    }\u000a    puVar7 = (uint *)__errno_location();\u000a    uVar5 = *puVar7;\u000a    if (uVar5 == 2) goto LAB_00402629;\u000a    __ptr = "failed to access %s";\u000aLAB_004025dc:\u000a    uVar6 = dcgettext(0,__ptr,5);\u000a  }\u000a  __ptr = quotearg_style((char *)0x4);\u000a  uVar11 = (ulong)uVar5;\u000aLAB_00402876:\u000a  error(0,uVar11,uVar6,__ptr);\u000a  return false;\u000a}\u000a\u000a
p1711
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x148\nMOV R14,RSI\nMOV R12,RDI\nMOV AL,byte ptr [0x0060d334]\nTEST AL,AL\nJZ 0x004025f6\nXOR R13D,R13D\nMOV AL,byte ptr [0x0060d333]\nTEST AL,AL\nJZ 0x00402615\nLEA RSI,[0xb8 + RSP]\nMOV RDI,R14\nCALL 0x00408050\nTEST EAX,EAX\nJZ 0x0040271c\nCALL 0x00401670\nMOV EBP,dword ptr [RAX]\nCMP EBP,0x2\nJZ 0x00402629\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x409199\nMOV EDX,0x5\nCALL 0x00401750\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,R14\nJMP 0x0040267c\nCMP byte ptr [0x0060d335],0x1\nJNZ 0x00402645\nLEA RSI,[RSP + 0x28]\nMOV RDI,R12\nCALL 0x00408040\nTEST EAX,EAX\nJNZ 0x00402656\nJMP 0x004026d1\nMOV AL,byte ptr [0x0060d332]\nTEST AL,AL\nJNZ 0x004025ae\nMOV EAX,dword ptr [0x0060d338]\nTEST EAX,EAX\nJNZ 0x004025ae\nXOR EBX,EBX\nMOV AL,byte ptr [0x0060d333]\nTEST AL,AL\nJZ 0x0040268f\nTEST BL,BL\nJZ 0x00402930\nMOV EAX,dword ptr [0x0060d338]\nJMP 0x004026b6\nLEA RSI,[RSP + 0x28]\nMOV RDI,R12\nCALL 0x00408050\nTEST EAX,EAX\nJZ 0x004026d1\nCALL 0x00401670\nMOV EBP,dword ptr [RAX]\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x409199\nMOV EDX,0x5\nCALL 0x00401750\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,R12\nCALL 0x00406310\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nJMP 0x00402876\nMOV AL,byte ptr [0x0060d334]\nTEST AL,AL\nJNZ 0x0040282c\nMOV EAX,dword ptr [0x0060d338]\nTEST EAX,EAX\nJZ 0x0040282c\nMOV ECX,EBX\nXOR CL,0x1\nJNZ 0x0040282c\nTEST EAX,EAX\nMOV AL,byte ptr [0x0060d334]\nJZ 0x00402787\nTEST AL,0x1\nJZ 0x004027a0\nJMP 0x0040282c\nMOV EAX,0xf000\nAND EAX,dword ptr [RSP + 0x40]\nCMP EAX,0x4000\nJNZ 0x004025a1\nMOV R13B,0x1\nMOV AL,byte ptr [0x0060d330]\nTEST AL,AL\nJNZ 0x004025a4\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x4094bc\nMOV EDX,0x5\nCALL 0x00401750\nMOV RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R12\nJMP 0x00402868\nMOV BL,0x1\nJNZ 0x0040262b\nMOV RDI,qword ptr [0x0060d340]\nTEST RDI,RDI\nJZ 0x0040262b\nLEA RDX,[0xb8 + RSP]\nMOV RSI,R14\nCALL 0x00403e60\nTEST AL,AL\nJZ 0x0040262b\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x4094e4\nMOV EDX,0x5\nCALL 0x00401750\nMOV R13,RAX\nXOR EDI,EDI\nMOV ESI,0x4\nMOV RDX,R14\nCALL 0x00406230\nMOV RBP,RAX\nMOV EDI,0x1\nMOV ESI,0x4\nMOV RDX,R12\nJMP 0x0040280b\nTEST AL,0x1\nJZ 0x004027a0\nLEA RSI,[RSP + 0x28]\nMOV RDI,R12\nCALL 0x00408040\nTEST EAX,EAX\nJNZ 0x0040282c\nMOV RAX,qword ptr [RSP + 0x30]\nCMP RAX,qword ptr [0xc0 + RSP]\nJNZ 0x0040282c\nMOV RAX,qword ptr [RSP + 0x28]\nCMP RAX,qword ptr [0xb8 + RSP]\nJNZ 0x0040282c\nCMP qword ptr [RSP + 0x38],0x1\nJZ 0x004027d5\nMOV RDI,R12\nMOV RSI,R14\nCALL 0x00406940\nTEST AL,AL\nJZ 0x0040282c\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x40950f\nMOV EDX,0x5\nCALL 0x00401750\nMOV R13,RAX\nXOR EDI,EDI\nMOV ESI,0x4\nMOV RDX,R12\nCALL 0x00406230\nMOV RBP,RAX\nMOV EDI,0x1\nMOV ESI,0x4\nMOV RDX,R14\nCALL 0x00406230\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R13\nMOV RCX,RBP\nMOV R8,RBX\nCALL 0x004019c0\nJMP 0x00402c41\nTEST BL,BL\nJZ 0x00402930\nMOV EAX,0xf000\nAND EAX,dword ptr [0xd0 + RSP]\nCMP EAX,0x4000\nJNZ 0x00402883\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x40952b\nMOV EDX,0x5\nCALL 0x00401750\nMOV RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R14\nCALL 0x004063f0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x004019c0\nJMP 0x00402c41\nCMP byte ptr [0x0060d332],0x1\nJNZ 0x004028f4\nMOV RAX,qword ptr [0x0060d320]\nMOV qword ptr [RSP + 0x8],RAX\nXOR EDI,EDI\nMOV ESI,0x40954a\nMOV EDX,0x5\nCALL 0x00401750\nMOV R15,RAX\nMOV RBX,qword ptr [0x0060d360]\nMOV EDI,0x4\nMOV RSI,R14\nCALL 0x00406310\nMOV RBP,RAX\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,qword ptr [RSP + 0x8]\nMOV RDX,R15\nMOV RCX,RBX\nMOV R8,RBP\nCALL 0x00401a50\nMOV R15B,0x1\nCALL 0x00407170\nTEST AL,AL\nJZ 0x00402c41\nMOV byte ptr [0x0060d333],0x1\nMOV ESI,dword ptr [0x0060d338]\nTEST ESI,ESI\nJZ 0x00402930\nMOV RDI,R14\nCALL 0x00402f90\nMOV RBX,RAX\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x004019f0\nTEST EAX,EAX\nJZ 0x00402950\nCALL 0x00401670\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x00401640\nCMP EBP,0x2\nJNZ 0x00402a34\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nCMP byte ptr [0x0060d337],0x1\nJNZ 0x0040295e\nMOV RDI,R12\nMOV RSI,R14\nCALL 0x00402c80\nMOV R12,RAX\nJMP 0x00402960\nMOV qword ptr [RSP + 0x8],RBX\nCMP byte ptr [0x0060d337],0x1\nJZ 0x00402940\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nCMP byte ptr [0x0060d334],0x1\nJNZ 0x0040297b\nMOV RDI,R12\nMOV RSI,R14\nCALL 0x004017b0\nJMP 0x0040299c\nMOVZX R8D,byte ptr [0x0060d335]\nSHL R8D,0xa\nMOV EDI,0xffffff9c\nMOV EDX,0xffffff9c\nMOV RSI,R12\nMOV RCX,R14\nCALL 0x00401980\nTEST EAX,EAX\nSETZ BL\nJZ 0x00402a69\nCALL 0x00401670\nMOV RBP,RAX\nCMP dword ptr [RBP],0x11\nJNZ 0x00402a69\nCMP qword ptr [RSP + 0x8],0x0\nJNZ 0x004029ce\nTEST byte ptr [0x0060d333],0x1\nJZ 0x00402a69\nMOV RDI,R14\nCALL 0x00401680\nTEST EAX,EAX\nJZ 0x00402a1e\nMOV R12D,dword ptr [RBP]\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x40956c\nMOV EDX,0x5\nCALL 0x00401750\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,R14\nCALL 0x00406310\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R12D\nMOV RDX,RBP\nCALL 0x004019c0\nMOV RDI,qword ptr [RSP + 0x8]\nJMP 0x00402c32\nCMP byte ptr [0x0060d334],0x1\nJNZ 0x00402a43\nMOV RDI,R12\nMOV RSI,R14\nCALL 0x004017b0\nJMP 0x00402a64\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x40955b\nJMP 0x004025dc\nMOVZX R8D,byte ptr [0x0060d335]\nSHL R8D,0xa\nMOV EDI,0xffffff9c\nMOV EDX,0xffffff9c\nMOV RSI,R12\nMOV RCX,R14\nCALL 0x00401980\nTEST EAX,EAX\nSETZ BL\nTEST BL,BL\nSETNZ R15B\nMOV BL,byte ptr [0x0060d334]\nJZ 0x00402b26\nTEST BL,0x1\nJNZ 0x00402a94\nMOV RDI,qword ptr [0x0060d340]\nLEA RDX,[RSP + 0x28]\nMOV RSI,R14\nCALL 0x00403de0\nCMP byte ptr [0x0060d331],0x1\nMOV RBP,qword ptr [RSP + 0x8]\nJNZ 0x00402c2f\nTEST RBP,RBP\nJZ 0x00402acf\nMOV EDI,0x4\nMOV RSI,RBP\nCALL 0x00406310\nMOV RCX,RAX\nMOV EDI,0x1\nMOV ESI,0x40957d\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004019a0\nXOR EDI,EDI\nMOV ESI,0x4\nMOV RDX,R14\nCALL 0x00406230\nMOV R14,RAX\nMOV AL,byte ptr [0x0060d334]\nTEST AL,AL\nMOV EAX,0x2d\nMOV EBX,0x3d\nCMOVNZ EBX,EAX\nMOV EDI,0x1\nMOV ESI,0x4\nMOV RDX,R12\nCALL 0x00406230\nMOV R8,RAX\nMOV EDI,0x1\nMOV ESI,0x409583\nXOR EAX,EAX\nMOV RDX,R14\nMOV ECX,EBX\nCALL 0x004019a0\nJMP 0x00402c2f\nCALL 0x00401670\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nTEST BL,0x1\nMOV dword ptr [RSP + 0x1c],ECX\nJZ 0x00402b47\nCMP ECX,0x24\nJNZ 0x00402b75\nMOV ESI,0x4095b0\nJMP 0x00402b8f\nCMP ECX,0x1f\nSETNZ AL\nOR R13B,AL\nCMP R13B,0x1\nJNZ 0x00402b8a\nCMP ECX,0x1e\nJA 0x00402b65\nMOV EAX,0x50020000\nBT EAX,ECX\nJC 0x00402b6e\nCMP ECX,0x7a\nJNZ 0x00402c56\nMOV ESI,0x4095fd\nJMP 0x00402b8f\nCMP byte ptr [R12],0x0\nMOV EAX,0x40958e\nMOV ESI,0x4095b0\nCMOVNZ RSI,RAX\nJMP 0x00402b8f\nMOV ESI,0x4095d8\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00401750\nMOV R13,RAX\nXOR EDI,EDI\nMOV ESI,0x4\nMOV RDX,R14\nCALL 0x00406230\nMOV RBP,RAX\nMOV EDI,0x1\nMOV ESI,0x4\nMOV RDX,R12\nCALL 0x00406230\nMOV RBX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,dword ptr [RSP + 0x1c]\nMOV RDX,R13\nMOV RCX,RBP\nMOV R8,RBX\nCALL 0x004019c0\nMOV RBP,qword ptr [RSP + 0x8]\nTEST RBP,RBP\nJZ 0x00402c2f\nMOV RDI,RBP\nMOV RSI,R14\nCALL 0x004019f0\nTEST EAX,EAX\nJZ 0x00402c2f\nMOV RAX,qword ptr [RSP + 0x20]\nMOV R12D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40963f\nMOV EDX,0x5\nCALL 0x00401750\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,R14\nCALL 0x00406310\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R12D\nMOV RDX,RBX\nCALL 0x004019c0\nMOV RDI,RBP\nCALL 0x00401640\nMOV RDI,qword ptr [RSP + 0x10]\nCALL 0x00401640\nMOV EAX,R15D\nADD RSP,0x148\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV ESI,0x40961b\nJMP 0x00402b8f\n'
p1712
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 48 01 00 00\n49 89 f6\n49 89 fc\n8a 05 97 ad 20 00\n84 c0\n74 55\n45 31 ed\n8a 05 89 ad 20 00\n84 c0\n74 67\n48 8d b4 24 b8 00 00 00\n4c 89 f7\ne8 92 5a 00 00\n85 c0\n0f 84 56 01 00 00\ne8 a5 f0 ff ff\n8b 28\n83 fd 02\n74 57\n45 31 ff\n31 ff\nbe 99 91 40 00\nba 05 00 00 00\ne8 6a f1 ff ff\n48 89 c3\nbf 04 00 00 00\n4c 89 f6\ne9 86 00 00 00\n80 3d 38 ad 20 00 01\n75 46\n48 8d 74 24 28\n4c 89 e7\ne8 34 5a 00 00\n85 c0\n75 46\ne9 bc 00 00 00\n8a 05 17 ad 20 00\n84 c0\n75 8f\n8b 05 13 ad 20 00\n85 c0\n75 85\n31 db\n8a 05 02 ad 20 00\n84 c0\n74 5a\n84 db\n0f 84 f3 02 00 00\n8b 05 f5 ac 20 00\neb 71\n48 8d 74 24 28\n4c 89 e7\ne8 fe 59 00 00\n85 c0\n74 7b\ne8 15 f0 ff ff\n8b 28\n45 31 ff\n31 ff\nbe 99 91 40 00\nba 05 00 00 00\ne8 df f0 ff ff\n48 89 c3\nbf 04 00 00 00\n4c 89 e6\ne8 8f 3c 00 00\n48 89 c1\n31 ff\n31 c0\n89 ee\ne9 e7 01 00 00\n8a 05 9f ac 20 00\n84 c0\n0f 85 8f 01 00 00\n8b 05 95 ac 20 00\n85 c0\n0f 84 81 01 00 00\n89 d9\n80 f1 01\n0f 85 76 01 00 00\n85 c0\n8a 05 76 ac 20 00\n0f 84 c3 00 00 00\na8 01\n0f 84 d4 00 00 00\ne9 5b 01 00 00\nb8 00 f0 00 00\n23 44 24 40\n3d 00 40 00 00\n0f 85 bc fe ff ff\n41 b5 01\n8a 05 42 ac 20 00\n84 c0\n0f 85 ae fe ff ff\n45 31 ff\n31 ff\nbe bc 94 40 00\nba 05 00 00 00\ne8 46 f0 ff ff\n48 89 c3\n31 ff\nbe 03 00 00 00\n4c 89 e2\ne9 4c 01 00 00\nb3 01\n0f 85 07 ff ff ff\n48 8b 3d 15 ac 20 00\n48 85 ff\n0f 84 f7 fe ff ff\n48 8d 94 24 b8 00 00 00\n4c 89 f6\ne8 1c 17 00 00\n84 c0\n0f 84 df fe ff ff\n45 31 ff\n31 ff\nbe e4 94 40 00\nba 05 00 00 00\ne8 f0 ef ff ff\n49 89 c5\n31 ff\nbe 04 00 00 00\n4c 89 f2\ne8 be 3a 00 00\n48 89 c5\nbf 01 00 00 00\nbe 04 00 00 00\n4c 89 e2\ne9 84 00 00 00\na8 01\n74 15\n48 8d 74 24 28\n4c 89 e7\ne8 a8 58 00 00\n85 c0\n0f 85 8c 00 00 00\n48 8b 44 24 30\n48 3b 84 24 c0 00 00 00\n75 7d\n48 8b 44 24 28\n48 3b 84 24 b8 00 00 00\n75 6e\n48 83 7c 24 38 01\n74 0f\n4c 89 e7\n4c 89 f6\ne8 6f 41 00 00\n84 c0\n74 57\n45 31 ff\n31 ff\nbe 0f 95 40 00\nba 05 00 00 00\ne8 67 ef ff ff\n49 89 c5\n31 ff\nbe 04 00 00 00\n4c 89 e2\ne8 35 3a 00 00\n48 89 c5\nbf 01 00 00 00\nbe 04 00 00 00\n4c 89 f2\ne8 20 3a 00 00\n48 89 c3\n31 ff\n31 f6\n31 c0\n4c 89 ea\n48 89 e9\n49 89 d8\ne8 99 f1 ff ff\ne9 15 04 00 00\n84 db\n0f 84 fc 00 00 00\nb8 00 f0 00 00\n23 84 24 d0 00 00 00\n3d 00 40 00 00\n75 3c\n45 31 ff\n31 ff\nbe 2b 95 40 00\nba 05 00 00 00\ne8 f5 ee ff ff\n48 89 c3\n31 ff\nbe 03 00 00 00\n4c 89 f2\ne8 83 3b 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 42 f1 ff ff\ne9 be 03 00 00\n80 3d a8 aa 20 00 01\n75 68\n48 8b 05 8d aa 20 00\n48 89 44 24 08\n31 ff\nbe 4a 95 40 00\nba 05 00 00 00\ne8 a7 ee ff ff\n49 89 c7\n48 8b 1d ad aa 20 00\nbf 04 00 00 00\n4c 89 f6\ne8 50 3a 00 00\n48 89 c5\nbe 01 00 00 00\n31 c0\n48 8b 7c 24 08\n4c 89 fa\n48 89 d9\n49 89 e8\ne8 73 f1 ff ff\n41 b7 01\ne8 8b 48 00 00\n84 c0\n0f 84 54 03 00 00\nc6 05 3f aa 20 00 01\n8b 35 3e aa 20 00\n85 f6\n74 32\n4c 89 f7\ne8 8a 06 00 00\n48 89 c3\n4c 89 f7\n48 89 de\ne8 dc f0 ff ff\n85 c0\n74 38\ne8 53 ed ff ff\n8b 28\n48 89 df\ne8 19 ed ff ff\n83 fd 02\n0f 85 04 01 00 00\n31 c0\n48 89 44 24 08\n80 3d f9 a9 20 00 01\n75 1e\n4c 89 e7\n4c 89 f6\ne8 35 03 00 00\n49 89 c4\neb 10\n48 89 5c 24 08\n80 3d db a9 20 00 01\n74 e2\n31 c0\n48 89 44 24 10\n80 3d c8 a9 20 00 01\n75 0d\n4c 89 e7\n4c 89 f6\ne8 37 ee ff ff\neb 21\n44 0f b6 05 b2 a9 20 00\n41 c1 e0 0a\nbf 9c ff ff ff\nba 9c ff ff ff\n4c 89 e6\n4c 89 f1\ne8 e4 ef ff ff\n85 c0\n0f 94 c3\n0f 84 c2 00 00 00\ne8 c4 ec ff ff\n48 89 c5\n83 7d 00 11\n0f 85 b0 00 00 00\n48 83 7c 24 08 00\n75 0d\nf6 05 6b a9 20 00 01\n0f 84 9b 00 00 00\n4c 89 f7\ne8 aa ec ff ff\n85 c0\n74 44\n44 8b 65 00\n45 31 ff\n31 ff\nbe 6c 95 40 00\nba 05 00 00 00\ne8 5e ed ff ff\n48 89 c5\nbf 04 00 00 00\n4c 89 f6\ne8 0e 39 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 e6\n48 89 ea\ne8 ac ef ff ff\n48 8b 7c 24 08\ne9 14 02 00 00\n80 3d 0f a9 20 00 01\n75 1c\n4c 89 e7\n4c 89 f6\ne8 7e ed ff ff\neb 30\n45 31 ff\n31 ff\nbe 5b 95 40 00\ne9 99 fb ff ff\n44 0f b6 05 ea a8 20 00\n41 c1 e0 0a\nbf 9c ff ff ff\nba 9c ff ff ff\n4c 89 e6\n4c 89 f1\ne8 1c ef ff ff\n85 c0\n0f 94 c3\n84 db\n41 0f 95 c7\n8a 1d bf a8 20 00\n0f 84 ab 00 00 00\nf6 c3 01\n75 14\n48 8b 3d b9 a8 20 00\n48 8d 54 24 28\n4c 89 f6\ne8 4c 13 00 00\n80 3d 96 a8 20 00 01\n48 8b 6c 24 08\n0f 85 89 01 00 00\n48 85 ed\n74 24\nbf 04 00 00 00\n48 89 ee\ne8 58 38 00 00\n48 89 c1\nbf 01 00 00 00\nbe 7d 95 40 00\n31 c0\n48 89 ca\ne8 d1 ee ff ff\n31 ff\nbe 04 00 00 00\n4c 89 f2\ne8 52 37 00 00\n49 89 c6\n8a 05 4d a8 20 00\n84 c0\nb8 2d 00 00 00\nbb 3d 00 00 00\n0f 45 d8\nbf 01 00 00 00\nbe 04 00 00 00\n4c 89 e2\ne8 28 37 00 00\n49 89 c0\nbf 01 00 00 00\nbe 83 95 40 00\n31 c0\n4c 89 f2\n89 d9\ne8 7f ee ff ff\ne9 09 01 00 00\ne8 45 eb ff ff\n48 89 44 24 20\n8b 08\nf6 c3 01\n89 4c 24 1c\n74 0c\n83 f9 24\n75 35\nbe b0 95 40 00\neb 48\n83 f9 1f\n0f 95 c0\n41 08 c5\n41 80 fd 01\n75 34\n83 f9 1e\n77 0a\nb8 00 00 02 50\n0f a3 c8\n72 09\n83 f9 7a\n0f 85 e8 00 00 00\nbe fd 95 40 00\neb 1a\n41 80 3c 24 00\nb8 8e 95 40 00\nbe b0 95 40 00\n48 0f 45 f0\neb 05\nbe d8 95 40 00\n31 ff\nba 05 00 00 00\ne8 b5 eb ff ff\n49 89 c5\n31 ff\nbe 04 00 00 00\n4c 89 f2\ne8 83 36 00 00\n48 89 c5\nbf 01 00 00 00\nbe 04 00 00 00\n4c 89 e2\ne8 6e 36 00 00\n48 89 c3\n31 ff\n31 c0\n8b 74 24 1c\n4c 89 ea\n48 89 e9\n49 89 d8\ne8 e5 ed ff ff\n48 8b 6c 24 08\n48 85 ed\n74 4a\n48 89 ef\n4c 89 f6\ne8 00 ee ff ff\n85 c0\n74 3b\n48 8b 44 24 20\n44 8b 20\n31 ff\nbe 3f 96 40 00\nba 05 00 00 00\ne8 43 eb ff ff\n48 89 c3\nbf 04 00 00 00\n4c 89 f6\ne8 f3 36 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 e6\n48 89 da\ne8 91 ed ff ff\n48 89 ef\ne8 09 ea ff ff\n48 8b 7c 24 10\ne8 ff e9 ff ff\n44 89 f8\n48 81 c4 48 01 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbe 1b 96 40 00\ne9 2f ff ff ff\n'
p1713
S'.text:0000000000402580\n.text:0000000000402581\n.text:0000000000402583\n.text:0000000000402585\n.text:0000000000402587\n.text:0000000000402589\n.text:000000000040258a\n.text:0000000000402591\n.text:0000000000402594\n.text:0000000000402597\n.text:000000000040259d\n.text:000000000040259f\n.text:00000000004025a1\n.text:00000000004025a4\n.text:00000000004025aa\n.text:00000000004025ac\n.text:00000000004025ae\n.text:00000000004025b6\n.text:00000000004025b9\n.text:00000000004025be\n.text:00000000004025c0\n.text:00000000004025c6\n.text:00000000004025cb\n.text:00000000004025cd\n.text:00000000004025d0\n.text:00000000004025d2\n.text:00000000004025d5\n.text:00000000004025d7\n.text:00000000004025dc\n.text:00000000004025e1\n.text:00000000004025e6\n.text:00000000004025e9\n.text:00000000004025ee\n.text:00000000004025f1\n.text:00000000004025f6\n.text:00000000004025fd\n.text:00000000004025ff\n.text:0000000000402604\n.text:0000000000402607\n.text:000000000040260c\n.text:000000000040260e\n.text:0000000000402610\n.text:0000000000402615\n.text:000000000040261b\n.text:000000000040261d\n.text:000000000040261f\n.text:0000000000402625\n.text:0000000000402627\n.text:0000000000402629\n.text:000000000040262b\n.text:0000000000402631\n.text:0000000000402633\n.text:0000000000402635\n.text:0000000000402637\n.text:000000000040263d\n.text:0000000000402643\n.text:0000000000402645\n.text:000000000040264a\n.text:000000000040264d\n.text:0000000000402652\n.text:0000000000402654\n.text:0000000000402656\n.text:000000000040265b\n.text:000000000040265d\n.text:0000000000402660\n.text:0000000000402662\n.text:0000000000402667\n.text:000000000040266c\n.text:0000000000402671\n.text:0000000000402674\n.text:0000000000402679\n.text:000000000040267c\n.text:0000000000402681\n.text:0000000000402684\n.text:0000000000402686\n.text:0000000000402688\n.text:000000000040268a\n.text:000000000040268f\n.text:0000000000402695\n.text:0000000000402697\n.text:000000000040269d\n.text:00000000004026a3\n.text:00000000004026a5\n.text:00000000004026ab\n.text:00000000004026ad\n.text:00000000004026b0\n.text:00000000004026b6\n.text:00000000004026b8\n.text:00000000004026be\n.text:00000000004026c4\n.text:00000000004026c6\n.text:00000000004026cc\n.text:00000000004026d1\n.text:00000000004026d6\n.text:00000000004026da\n.text:00000000004026df\n.text:00000000004026e5\n.text:00000000004026e8\n.text:00000000004026ee\n.text:00000000004026f0\n.text:00000000004026f6\n.text:00000000004026f9\n.text:00000000004026fb\n.text:0000000000402700\n.text:0000000000402705\n.text:000000000040270a\n.text:000000000040270d\n.text:000000000040270f\n.text:0000000000402714\n.text:0000000000402717\n.text:000000000040271c\n.text:000000000040271e\n.text:0000000000402724\n.text:000000000040272b\n.text:000000000040272e\n.text:0000000000402734\n.text:000000000040273c\n.text:000000000040273f\n.text:0000000000402744\n.text:0000000000402746\n.text:000000000040274c\n.text:000000000040274f\n.text:0000000000402751\n.text:0000000000402756\n.text:000000000040275b\n.text:0000000000402760\n.text:0000000000402763\n.text:0000000000402765\n.text:000000000040276a\n.text:000000000040276d\n.text:0000000000402772\n.text:0000000000402775\n.text:000000000040277a\n.text:000000000040277f\n.text:0000000000402782\n.text:0000000000402787\n.text:0000000000402789\n.text:000000000040278b\n.text:0000000000402790\n.text:0000000000402793\n.text:0000000000402798\n.text:000000000040279a\n.text:00000000004027a0\n.text:00000000004027a5\n.text:00000000004027ad\n.text:00000000004027af\n.text:00000000004027b4\n.text:00000000004027bc\n.text:00000000004027be\n.text:00000000004027c4\n.text:00000000004027c6\n.text:00000000004027c9\n.text:00000000004027cc\n.text:00000000004027d1\n.text:00000000004027d3\n.text:00000000004027d5\n.text:00000000004027d8\n.text:00000000004027da\n.text:00000000004027df\n.text:00000000004027e4\n.text:00000000004027e9\n.text:00000000004027ec\n.text:00000000004027ee\n.text:00000000004027f3\n.text:00000000004027f6\n.text:00000000004027fb\n.text:00000000004027fe\n.text:0000000000402803\n.text:0000000000402808\n.text:000000000040280b\n.text:0000000000402810\n.text:0000000000402813\n.text:0000000000402815\n.text:0000000000402817\n.text:0000000000402819\n.text:000000000040281c\n.text:000000000040281f\n.text:0000000000402822\n.text:0000000000402827\n.text:000000000040282c\n.text:000000000040282e\n.text:0000000000402834\n.text:0000000000402839\n.text:0000000000402840\n.text:0000000000402845\n.text:0000000000402847\n.text:000000000040284a\n.text:000000000040284c\n.text:0000000000402851\n.text:0000000000402856\n.text:000000000040285b\n.text:000000000040285e\n.text:0000000000402860\n.text:0000000000402865\n.text:0000000000402868\n.text:000000000040286d\n.text:0000000000402870\n.text:0000000000402872\n.text:0000000000402874\n.text:0000000000402876\n.text:0000000000402879\n.text:000000000040287e\n.text:0000000000402883\n.text:000000000040288a\n.text:000000000040288c\n.text:0000000000402893\n.text:0000000000402898\n.text:000000000040289a\n.text:000000000040289f\n.text:00000000004028a4\n.text:00000000004028a9\n.text:00000000004028ac\n.text:00000000004028b3\n.text:00000000004028b8\n.text:00000000004028bb\n.text:00000000004028c0\n.text:00000000004028c3\n.text:00000000004028c8\n.text:00000000004028ca\n.text:00000000004028cf\n.text:00000000004028d2\n.text:00000000004028d5\n.text:00000000004028d8\n.text:00000000004028dd\n.text:00000000004028e0\n.text:00000000004028e5\n.text:00000000004028e7\n.text:00000000004028ed\n.text:00000000004028f4\n.text:00000000004028fa\n.text:00000000004028fc\n.text:00000000004028fe\n.text:0000000000402901\n.text:0000000000402906\n.text:0000000000402909\n.text:000000000040290c\n.text:000000000040290f\n.text:0000000000402914\n.text:0000000000402916\n.text:0000000000402918\n.text:000000000040291d\n.text:000000000040291f\n.text:0000000000402922\n.text:0000000000402927\n.text:000000000040292a\n.text:0000000000402930\n.text:0000000000402932\n.text:0000000000402937\n.text:000000000040293e\n.text:0000000000402940\n.text:0000000000402943\n.text:0000000000402946\n.text:000000000040294b\n.text:000000000040294e\n.text:0000000000402950\n.text:0000000000402955\n.text:000000000040295c\n.text:000000000040295e\n.text:0000000000402960\n.text:0000000000402965\n.text:000000000040296c\n.text:000000000040296e\n.text:0000000000402971\n.text:0000000000402974\n.text:0000000000402979\n.text:000000000040297b\n.text:0000000000402983\n.text:0000000000402987\n.text:000000000040298c\n.text:0000000000402991\n.text:0000000000402994\n.text:0000000000402997\n.text:000000000040299c\n.text:000000000040299e\n.text:00000000004029a1\n.text:00000000004029a7\n.text:00000000004029ac\n.text:00000000004029af\n.text:00000000004029b3\n.text:00000000004029b9\n.text:00000000004029bf\n.text:00000000004029c1\n.text:00000000004029c8\n.text:00000000004029ce\n.text:00000000004029d1\n.text:00000000004029d6\n.text:00000000004029d8\n.text:00000000004029da\n.text:00000000004029de\n.text:00000000004029e1\n.text:00000000004029e3\n.text:00000000004029e8\n.text:00000000004029ed\n.text:00000000004029f2\n.text:00000000004029f5\n.text:00000000004029fa\n.text:00000000004029fd\n.text:0000000000402a02\n.text:0000000000402a05\n.text:0000000000402a07\n.text:0000000000402a09\n.text:0000000000402a0c\n.text:0000000000402a0f\n.text:0000000000402a14\n.text:0000000000402a19\n.text:0000000000402a1e\n.text:0000000000402a25\n.text:0000000000402a27\n.text:0000000000402a2a\n.text:0000000000402a2d\n.text:0000000000402a32\n.text:0000000000402a34\n.text:0000000000402a37\n.text:0000000000402a39\n.text:0000000000402a3e\n.text:0000000000402a43\n.text:0000000000402a4b\n.text:0000000000402a4f\n.text:0000000000402a54\n.text:0000000000402a59\n.text:0000000000402a5c\n.text:0000000000402a5f\n.text:0000000000402a64\n.text:0000000000402a66\n.text:0000000000402a69\n.text:0000000000402a6b\n.text:0000000000402a6f\n.text:0000000000402a75\n.text:0000000000402a7b\n.text:0000000000402a7e\n.text:0000000000402a80\n.text:0000000000402a87\n.text:0000000000402a8c\n.text:0000000000402a8f\n.text:0000000000402a94\n.text:0000000000402a9b\n.text:0000000000402aa0\n.text:0000000000402aa6\n.text:0000000000402aa9\n.text:0000000000402aab\n.text:0000000000402ab0\n.text:0000000000402ab3\n.text:0000000000402ab8\n.text:0000000000402abb\n.text:0000000000402ac0\n.text:0000000000402ac5\n.text:0000000000402ac7\n.text:0000000000402aca\n.text:0000000000402acf\n.text:0000000000402ad1\n.text:0000000000402ad6\n.text:0000000000402ad9\n.text:0000000000402ade\n.text:0000000000402ae1\n.text:0000000000402ae7\n.text:0000000000402ae9\n.text:0000000000402aee\n.text:0000000000402af3\n.text:0000000000402af6\n.text:0000000000402afb\n.text:0000000000402b00\n.text:0000000000402b03\n.text:0000000000402b08\n.text:0000000000402b0b\n.text:0000000000402b10\n.text:0000000000402b15\n.text:0000000000402b17\n.text:0000000000402b1a\n.text:0000000000402b1c\n.text:0000000000402b21\n.text:0000000000402b26\n.text:0000000000402b2b\n.text:0000000000402b30\n.text:0000000000402b32\n.text:0000000000402b35\n.text:0000000000402b39\n.text:0000000000402b3b\n.text:0000000000402b3e\n.text:0000000000402b40\n.text:0000000000402b45\n.text:0000000000402b47\n.text:0000000000402b4a\n.text:0000000000402b4d\n.text:0000000000402b50\n.text:0000000000402b54\n.text:0000000000402b56\n.text:0000000000402b59\n.text:0000000000402b5b\n.text:0000000000402b60\n.text:0000000000402b63\n.text:0000000000402b65\n.text:0000000000402b68\n.text:0000000000402b6e\n.text:0000000000402b73\n.text:0000000000402b75\n.text:0000000000402b7a\n.text:0000000000402b7f\n.text:0000000000402b84\n.text:0000000000402b88\n.text:0000000000402b8a\n.text:0000000000402b8f\n.text:0000000000402b91\n.text:0000000000402b96\n.text:0000000000402b9b\n.text:0000000000402b9e\n.text:0000000000402ba0\n.text:0000000000402ba5\n.text:0000000000402ba8\n.text:0000000000402bad\n.text:0000000000402bb0\n.text:0000000000402bb5\n.text:0000000000402bba\n.text:0000000000402bbd\n.text:0000000000402bc2\n.text:0000000000402bc5\n.text:0000000000402bc7\n.text:0000000000402bc9\n.text:0000000000402bcd\n.text:0000000000402bd0\n.text:0000000000402bd3\n.text:0000000000402bd6\n.text:0000000000402bdb\n.text:0000000000402be0\n.text:0000000000402be3\n.text:0000000000402be5\n.text:0000000000402be8\n.text:0000000000402beb\n.text:0000000000402bf0\n.text:0000000000402bf2\n.text:0000000000402bf4\n.text:0000000000402bf9\n.text:0000000000402bfc\n.text:0000000000402bfe\n.text:0000000000402c03\n.text:0000000000402c08\n.text:0000000000402c0d\n.text:0000000000402c10\n.text:0000000000402c15\n.text:0000000000402c18\n.text:0000000000402c1d\n.text:0000000000402c20\n.text:0000000000402c22\n.text:0000000000402c24\n.text:0000000000402c27\n.text:0000000000402c2a\n.text:0000000000402c2f\n.text:0000000000402c32\n.text:0000000000402c37\n.text:0000000000402c3c\n.text:0000000000402c41\n.text:0000000000402c44\n.text:0000000000402c4b\n.text:0000000000402c4c\n.text:0000000000402c4e\n.text:0000000000402c50\n.text:0000000000402c52\n.text:0000000000402c54\n.text:0000000000402c55\n.text:0000000000402c56\n.text:0000000000402c5b\n'
p1714
tp1715
sS'fwrite'
p1716
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1717
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_0060d220)();\u000a  return sVar1;\u000a}\u000a\u000a
p1718
S'JMP qword ptr [0x0060d220]\n'
p1719
S'ff 25 da b7 20 00\n'
p1720
S'.plt:0000000000401a40\n'
p1721
tp1722
sS'linkat'
p1723
(S'\n__stdcall linkat(int __fromfd, char * __from, int __tofd, char * __to, int __flags)\n'
p1724
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint linkat(int __fromfd,char *__from,int __tofd,char *__to,int __flags)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_linkat_0060d1c0)();\u000a  return iVar1;\u000a}\u000a\u000a
p1725
S'JMP qword ptr [0x0060d1c0]\n'
p1726
S'ff 25 3a b8 20 00\n'
p1727
S'.plt:0000000000401980\n'
p1728
tp1729
sS'triple_compare'
p1730
(S'\n__stdcall triple_compare(void * x, void * y)\n'
p1731
V\u000a_Bool triple_compare(void *x,void *y)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  if ((*(long *)((long)x + 8) == *(long *)((long)y + 8)) &&\u000a     (*(long *)((long)x + 0x10) == *(long *)((long)y + 0x10))) {\u000a    _Var1 = same_name(*(char **)x,*(char **)y);\u000a    return _Var1;\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1732
S'MOV RAX,qword ptr [RDI + 0x8]\nCMP RAX,qword ptr [RSI + 0x8]\nJNZ 0x00404fdf\nMOV RAX,qword ptr [RDI + 0x10]\nCMP RAX,qword ptr [RSI + 0x10]\nJNZ 0x00404fdf\nMOV RDI,qword ptr [RDI]\nMOV RSI,qword ptr [RSI]\nJMP 0x00406940\nXOR EAX,EAX\nRET\n'
p1733
S'48 8b 47 08\n48 3b 46 08\n75 15\n48 8b 47 10\n48 3b 46 10\n75 0b\n48 8b 3f\n48 8b 36\ne9 61 19 00 00\n31 c0\nc3\n'
p1734
S'.text:0000000000404fc0\n.text:0000000000404fc4\n.text:0000000000404fc8\n.text:0000000000404fca\n.text:0000000000404fce\n.text:0000000000404fd2\n.text:0000000000404fd4\n.text:0000000000404fd7\n.text:0000000000404fda\n.text:0000000000404fdf\n.text:0000000000404fe1\n'
p1735
tp1736
sS'seen_triple'
p1737
(S'\n__stdcall seen_triple(Hash_table * * ht, char * filename, stat * st)\n'
p1738
V\u000a_Bool seen_triple(Hash_table **ht,char *filename,stat *st)\u000a\u000a{\u000a  _Bool _Var1;\u000a  Hash_table *pHVar2;\u000a  \u000a  if (*ht == (Hash_table *)0x0) {\u000a    pHVar2 = hash_initialize(7,(Hash_tuning *)0x0,triple_hash,triple_compare_ino_str,triple_free);\u000a    *ht = pHVar2;\u000a    if (pHVar2 == (Hash_table *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die();\u000a    }\u000a  }\u000a  _Var1 = seen_file(*ht,filename,st);\u000a  if (_Var1 == false) {\u000a    record_file(*ht,filename,st);\u000a  }\u000a  return (_Bool)(_Var1 != false);\u000a}\u000a\u000a
p1739
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RDX\nMOV R15,RSI\nMOV RBX,RDI\nCMP qword ptr [RBX],0x0\nJNZ 0x004039d8\nMOV EDI,0x7\nXOR ESI,ESI\nMOV EDX,0x404f80\nMOV ECX,0x404ff0\nMOV R8D,0x405020\nCALL 0x00404400\nMOV qword ptr [RBX],RAX\nTEST RAX,RAX\nJZ 0x00403a04\nMOV RDI,qword ptr [RBX]\nMOV RSI,R15\nMOV RDX,R14\nCALL 0x00403e60\nMOV ECX,EAX\nMOV AL,0x1\nTEST CL,CL\nJNZ 0x004039fe\nMOV RDI,qword ptr [RBX]\nMOV RSI,R15\nMOV RDX,R14\nCALL 0x00403de0\nXOR EAX,EAX\nPOP RBX\nPOP R14\nPOP R15\nRET\nCALL 0x00407110\n'
p1740
S'41 57\n41 56\n53\n49 89 d6\n49 89 f7\n48 89 fb\n48 83 3b 00\n75 24\nbf 07 00 00 00\n31 f6\nba 80 4f 40 00\nb9 f0 4f 40 00\n41 b8 20 50 40 00\ne8 30 0a 00 00\n48 89 03\n48 85 c0\n74 2c\n48 8b 3b\n4c 89 fe\n4c 89 f2\ne8 7a 04 00 00\n89 c1\nb0 01\n84 c9\n75 10\n48 8b 3b\n4c 89 fe\n4c 89 f2\ne8 e4 03 00 00\n31 c0\n5b\n41 5e\n41 5f\nc3\ne8 07 37 00 00\n'
p1741
S'.text:00000000004039a0\n.text:00000000004039a2\n.text:00000000004039a4\n.text:00000000004039a5\n.text:00000000004039a8\n.text:00000000004039ab\n.text:00000000004039ae\n.text:00000000004039b2\n.text:00000000004039b4\n.text:00000000004039b9\n.text:00000000004039bb\n.text:00000000004039c0\n.text:00000000004039c5\n.text:00000000004039cb\n.text:00000000004039d0\n.text:00000000004039d3\n.text:00000000004039d6\n.text:00000000004039d8\n.text:00000000004039db\n.text:00000000004039de\n.text:00000000004039e1\n.text:00000000004039e6\n.text:00000000004039e8\n.text:00000000004039ea\n.text:00000000004039ec\n.text:00000000004039ee\n.text:00000000004039f1\n.text:00000000004039f4\n.text:00000000004039f7\n.text:00000000004039fc\n.text:00000000004039fe\n.text:00000000004039ff\n.text:0000000000403a01\n.text:0000000000403a03\n.text:0000000000403a04\n'
p1742
tp1743
sS'unlink'
p1744
(S'\n__stdcall unlink(char * __name)\n'
p1745
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint unlink(char *__name)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_unlink_0060d040)();\u000a  return iVar1;\u000a}\u000a\u000a
p1746
S'JMP qword ptr [0x0060d040]\n'
p1747
S'ff 25 ba b9 20 00\n'
p1748
S'.plt:0000000000401680\n'
p1749
tp1750
sS'rotl_sz'
p1751
(S'\n__stdcall rotl_sz(size_t x)\n'
p1752
V\u000asize_t rotl_sz(size_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x << bVar1 | x >> 0x40 - bVar1;\u000a}\u000a\u000a
p1753
S'MOV ECX,ESI\nROL RDI,CL\nMOV RAX,RDI\nRET\n'
p1754
S'89 f1\n48 d3 c7\n48 89 f8\nc3\n'
p1755
S'.text:0000000000407940\n.text:0000000000407942\n.text:0000000000407945\n.text:0000000000407948\n'
p1756
tp1757
sS'__do_global_dtors_aux'
p1758
(S'\n__stdcall __do_global_dtors_aux()\n'
p1759
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1760
S'CMP byte ptr [0x0060d328],0x0\nJNZ 0x00401b5a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00401ac0\nPOP RBP\nMOV byte ptr [0x0060d328],0x1\nRET\n'
p1761
S'80 3d e1 b7 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 ce b7 20 00 01\nf3 c3\n'
p1762
S'.text:0000000000401b40\n.text:0000000000401b47\n.text:0000000000401b49\n.text:0000000000401b4a\n.text:0000000000401b4d\n.text:0000000000401b52\n.text:0000000000401b53\n.text:0000000000401b5a\n'
p1763
tp1764
sS'c_isprint'
p1765
(S'\n__stdcall c_isprint()\n'
p1766
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1767
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1768
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1769
S'.text:0000000000407a90\n.text:0000000000407a93\n.text:0000000000407a96\n.text:0000000000407a99\n'
p1770
tp1771
sS'_fini'
p1772
(S'\n__stdcall _fini()\n'
p1773
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1774
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1775
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1776
S'.fini:0000000000408060\n.fini:0000000000408064\n.fini:0000000000408068\n'
p1777
tp1778
sS'rpl_fcntl'
p1779
(S'\n__stdcall rpl_fcntl()\n'
p1780
V\u000a/* WARNING: Removing unreachable block (ram,0x004072eb) */\u000a/* WARNING: Removing unreachable block (ram,0x00407354) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff38 : 0x004072f9 */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint rpl_fcntl(void...)\u000a\u000a{\u000a  int have_dupfd_cloexec;\u000a  int __fd;\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  int __cmd;\u000a  uint __fd_00;\u000a  va_list arg;\u000a  ulong local_c8;\u000a  \u000a  if (__cmd == 0x406) {\u000a    if (have_dupfd_cloexec < 0) {\u000a      __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a    }\u000a    else {\u000a      __fd = fcntl(__fd_00,0x406,local_c8 & 0xffffffff);\u000a      have_dupfd_cloexec = 1;\u000a      if ((__fd < 0) && (piVar3 = __errno_location(), *piVar3 == 0x16)) {\u000a        __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a        have_dupfd_cloexec = -1;\u000a        if (__fd < 0) {\u000a          return __fd;\u000a        }\u000a      }\u000a    }\u000a    if (((-1 < __fd) && (have_dupfd_cloexec == -1)) &&\u000a       ((uVar1 = fcntl(__fd,1), (int)uVar1 < 0 ||\u000a        (iVar2 = fcntl(__fd,2,(ulong)(uVar1 | 1),(ulong)(uVar1 | 1)), iVar2 == -1)))) {\u000a      piVar3 = __errno_location();\u000a      iVar2 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar2;\u000a      __fd = -1;\u000a    }\u000a  }\u000a  else {\u000a    __fd = fcntl(__fd_00,__cmd,local_c8);\u000a  }\u000a  return __fd;\u000a}\u000a\u000a
p1781
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0xd8\nMOV R14D,EDI\nTEST AL,AL\nJZ 0x0040727b\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0x100 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RAX,dword ptr [RSP]\nCMP ESI,0x406\nJNZ 0x004072d6\nCMP EAX,0x28\nJA 0x004072eb\nMOV RCX,qword ptr [RSP + 0x10]\nADD RCX,RAX\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x004072f9\nCMP EAX,0x28\nJA 0x00407354\nMOV RCX,RAX\nADD RCX,qword ptr [RSP + 0x10]\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x00407362\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV EBX,dword ptr [RCX]\nCMP dword ptr [0x0060d4b0],0x0\nJS 0x00407373\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x004016f0\nMOV EBP,EAX\nMOV R15D,0x1\nTEST EBP,EBP\nJNS 0x00407344\nCALL 0x00401670\nCMP dword ptr [RAX],0x16\nJNZ 0x00407344\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00407230\nMOV EBP,EAX\nMOV R15D,0xffffffff\nTEST EBP,EBP\nJS 0x004073d6\nMOV dword ptr [0x0060d4b0],R15D\nTEST EBP,EBP\nJNS 0x00407387\nJMP 0x004073d6\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RDX,qword ptr [RCX]\nXOR EAX,EAX\nMOV EDI,R14D\nCALL 0x004016f0\nMOV EBP,EAX\nJMP 0x004073d6\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00407230\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x004073d6\nCMP dword ptr [0x0060d4b0],-0x1\nJNZ 0x004073d6\nMOV ESI,0x1\nXOR EAX,EAX\nMOV EDI,EBP\nCALL 0x004016f0\nMOV ECX,EAX\nTEST ECX,ECX\nJS 0x004073bc\nOR ECX,0x1\nMOV ESI,0x2\nXOR EAX,EAX\nMOV EDI,EBP\nMOV EDX,ECX\nCALL 0x004016f0\nCMP EAX,-0x1\nJNZ 0x004073d6\nCALL 0x00401670\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x00401810\nMOV dword ptr [RBX],R14D\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0xd8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1782
S'55\n41 57\n41 56\n53\n48 81 ec d8 00 00 00\n41 89 fe\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 00 01 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 04 24\n81 fe 06 04 00 00\n75 15\n83 f8 28\n77 25\n48 8b 4c 24 10\n48 01 c1\n8d 40 08\n89 04 24\neb 23\n83 f8 28\n77 79\n48 89 c1\n48 03 4c 24 10\n8d 40 08\n89 04 24\neb 77\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n8b 19\n83 3d ae 61 20 00 00\n78 6f\n31 c0\n44 89 f7\n89 da\ne8 e0 a3 ff ff\n89 c5\n41 bf 01 00 00 00\n85 ed\n79 28\ne8 4f a3 ff ff\n83 38 16\n75 1e\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 fc fe ff ff\n89 c5\n41 bf ff ff ff ff\n85 ed\n0f 88 92 00 00 00\n44 89 3d 65 61 20 00\n85 ed\n79 38\ne9 82 00 00 00\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n48 8b 11\n31 c0\n44 89 f7\ne8 81 a3 ff ff\n89 c5\neb 63\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 af fe ff ff\n89 c5\n85 ed\n78 4f\n83 3d 22 61 20 00 ff\n75 46\nbe 01 00 00 00\n31 c0\n89 ef\ne8 52 a3 ff ff\n89 c1\n85 c9\n78 18\n83 c9 01\nbe 02 00 00 00\n31 c0\n89 ef\n89 ca\ne8 39 a3 ff ff\n83 f8 ff\n75 1a\ne8 af a2 ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 42 a4 ff ff\n44 89 33\nbd ff ff ff ff\n89 e8\n48 81 c4 d8 00 00 00\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1783
S'.text:0000000000407230\n.text:0000000000407231\n.text:0000000000407233\n.text:0000000000407235\n.text:0000000000407236\n.text:000000000040723d\n.text:0000000000407240\n.text:0000000000407242\n.text:0000000000407244\n.text:0000000000407249\n.text:000000000040724e\n.text:0000000000407253\n.text:000000000040725b\n.text:0000000000407263\n.text:000000000040726b\n.text:0000000000407273\n.text:000000000040727b\n.text:0000000000407280\n.text:0000000000407285\n.text:000000000040728a\n.text:000000000040728f\n.text:0000000000407294\n.text:0000000000407299\n.text:00000000004072a1\n.text:00000000004072a6\n.text:00000000004072ae\n.text:00000000004072b5\n.text:00000000004072b9\n.text:00000000004072bf\n.text:00000000004072c1\n.text:00000000004072c4\n.text:00000000004072c6\n.text:00000000004072cb\n.text:00000000004072ce\n.text:00000000004072d1\n.text:00000000004072d4\n.text:00000000004072d6\n.text:00000000004072d9\n.text:00000000004072db\n.text:00000000004072de\n.text:00000000004072e3\n.text:00000000004072e6\n.text:00000000004072e9\n.text:00000000004072eb\n.text:00000000004072f0\n.text:00000000004072f4\n.text:00000000004072f9\n.text:00000000004072fb\n.text:0000000000407302\n.text:0000000000407304\n.text:0000000000407306\n.text:0000000000407309\n.text:000000000040730b\n.text:0000000000407310\n.text:0000000000407312\n.text:0000000000407318\n.text:000000000040731a\n.text:000000000040731c\n.text:0000000000407321\n.text:0000000000407324\n.text:0000000000407326\n.text:0000000000407328\n.text:000000000040732a\n.text:000000000040732d\n.text:000000000040732f\n.text:0000000000407334\n.text:0000000000407336\n.text:000000000040733c\n.text:000000000040733e\n.text:0000000000407344\n.text:000000000040734b\n.text:000000000040734d\n.text:000000000040734f\n.text:0000000000407354\n.text:0000000000407359\n.text:000000000040735d\n.text:0000000000407362\n.text:0000000000407365\n.text:0000000000407367\n.text:000000000040736a\n.text:000000000040736f\n.text:0000000000407371\n.text:0000000000407373\n.text:0000000000407375\n.text:0000000000407377\n.text:000000000040737a\n.text:000000000040737c\n.text:0000000000407381\n.text:0000000000407383\n.text:0000000000407385\n.text:0000000000407387\n.text:000000000040738e\n.text:0000000000407390\n.text:0000000000407395\n.text:0000000000407397\n.text:0000000000407399\n.text:000000000040739e\n.text:00000000004073a0\n.text:00000000004073a2\n.text:00000000004073a4\n.text:00000000004073a7\n.text:00000000004073ac\n.text:00000000004073ae\n.text:00000000004073b0\n.text:00000000004073b2\n.text:00000000004073b7\n.text:00000000004073ba\n.text:00000000004073bc\n.text:00000000004073c1\n.text:00000000004073c4\n.text:00000000004073c7\n.text:00000000004073c9\n.text:00000000004073ce\n.text:00000000004073d1\n.text:00000000004073d6\n.text:00000000004073d8\n.text:00000000004073df\n.text:00000000004073e0\n.text:00000000004073e2\n.text:00000000004073e4\n.text:00000000004073e5\n'
p1784
tp1785
sS'__fpending'
p1786
(S'\n__stdcall __fpending()\n'
p1787
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_0060d060)();\u000a  return;\u000a}\u000a\u000a
p1788
S'JMP qword ptr [0x0060d060]\n'
p1789
S'ff 25 9a b9 20 00\n'
p1790
S'.plt:00000000004016c0\n'
p1791
tp1792
s.