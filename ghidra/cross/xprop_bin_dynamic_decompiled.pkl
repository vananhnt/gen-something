(dp0
S'XFetchName'
p1
(S'\n__stdcall XFetchName()\n'
p2
V\u000avoid XFetchName(void)\u000a\u000a{\u000a  (*(code *)PTR_XFetchName_006080d0)();\u000a  return;\u000a}\u000a\u000a
p3
S'JMP qword ptr [0x006080d0]\n'
p4
S'ff 25 aa 6b 20 00\n'
p5
S'.plt:0000000000401520\n'
p6
tp7
sS'__libc_csu_init'
p8
(S'\n__stdcall __libc_csu_init()\n'
p9
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p10
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x607df8]\nPUSH RBP\nLEA RBP,[0x607e00]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401380\nTEST RBP,RBP\nJZ 0x00404e16\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00404e00\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p11
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 26 30 20 00\n55\n48 8d 2d 26 30 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 8f c5 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p12
S'.text:0000000000404dc0\n.text:0000000000404dc2\n.text:0000000000404dc4\n.text:0000000000404dc7\n.text:0000000000404dc9\n.text:0000000000404dcb\n.text:0000000000404dd2\n.text:0000000000404dd3\n.text:0000000000404dda\n.text:0000000000404ddb\n.text:0000000000404dde\n.text:0000000000404de1\n.text:0000000000404de4\n.text:0000000000404de8\n.text:0000000000404dec\n.text:0000000000404df1\n.text:0000000000404df4\n.text:0000000000404df6\n.text:0000000000404df8\n.text:0000000000404e00\n.text:0000000000404e03\n.text:0000000000404e06\n.text:0000000000404e09\n.text:0000000000404e0d\n.text:0000000000404e11\n.text:0000000000404e14\n.text:0000000000404e16\n.text:0000000000404e1a\n.text:0000000000404e1b\n.text:0000000000404e1c\n.text:0000000000404e1e\n.text:0000000000404e20\n.text:0000000000404e22\n.text:0000000000404e24\n'
p13
tp14
sS'ungetc'
p15
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p16
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_00608150)();\u000a  return iVar1;\u000a}\u000a\u000a
p17
S'JMP qword ptr [0x00608150]\n'
p18
S'ff 25 2a 6b 20 00\n'
p19
S'.plt:0000000000401620\n'
p20
tp21
sS'mbtowc'
p22
(S'\n__stdcall mbtowc(wchar_t * __pwc, char * __s, size_t __n)\n'
p23
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbtowc(wchar_t *__pwc,char *__s,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbtowc_006080f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p24
S'JMP qword ptr [0x006080f0]\n'
p25
S'ff 25 8a 6b 20 00\n'
p26
S'.plt:0000000000401560\n'
p27
tp28
sS'usage'
p29
(S'\n__stdcall usage()\n'
p30
V\u000avoid usage(void)\u000a\u000a{\u000a  char \u000a       "where options include:\u005cn    -grammar                       print out full grammar for command line\u005cn    -display host:dpy              the X server to contact\u005cn    -id id                         resource id of window to examine\u005cn    -name name                     name of window to examine\u005cn    -font name                     name of font to examine\u005cn    -remove propname               remove a property\u005cn    -set propname value            set a property to a given value\u005cn    -root                          examine the root window\u005cn    -len n                         display at most n bytes of any property\u005cn    -notype                        do not display the type field\u005cn    -fs filename                   where to look for formats for properties\u005cn    -frame                         don\u005c't ignore window manager frames\u005cn    -f propname format [dformat]   formats to use for property of given name\u005cn    -spy                           examine window properties forever\u005cn"\u000a       [957];\u000a  \u000a  fflush(stdout);\u000a  fprintf(stderr,"usage:  %s [-options ...] [[format [dformat]] atom] ...\u005cn\u005cn",program_name);\u000a  fprintf(stderr,"%s\u005cn",\u000a                    \u000a          "where options include:\u005cn    -grammar                       print out full grammar for command line\u005cn    -display host:dpy              the X server to contact\u005cn    -id id                         resource id of window to examine\u005cn    -name name                     name of window to examine\u005cn    -font name                     name of font to examine\u005cn    -remove propname               remove a property\u005cn    -set propname value            set a property to a given value\u005cn    -root                          examine the root window\u005cn    -len n                         display at most n bytes of any property\u005cn    -notype                        do not display the type field\u005cn    -fs filename                   where to look for formats for properties\u005cn    -frame                         don\u005c't ignore window manager frames\u005cn    -f propname format [dformat]   formats to use for property of given name\u005cn    -spy                           examine window properties forever\u005cn"\u000a         );\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(1);\u000a}\u000a\u000a
p31
S'PUSH RAX\nMOV RDI,qword ptr [0x00608b60]\nCALL 0x004015d0\nMOV RDI,qword ptr [0x00608b80]\nMOV RDX,qword ptr [0x00608210]\nMOV ESI,0x405548\nXOR EAX,EAX\nCALL 0x00401550\nMOV RDI,qword ptr [0x00608b80]\nMOV ESI,0x405582\nMOV EDX,0x405110\nXOR EAX,EAX\nCALL 0x00401550\nMOV EDI,0x1\nCALL 0x00401730\n'
p32
S'50\n48 8b 3d c8 67 20 00\ne8 33 f2 ff ff\n48 8b 3d dc 67 20 00\n48 8b 15 65 5e 20 00\nbe 48 55 40 00\n31 c0\ne8 99 f1 ff ff\n48 8b 3d c2 67 20 00\nbe 82 55 40 00\nba 10 51 40 00\n31 c0\ne8 81 f1 ff ff\nbf 01 00 00 00\ne8 57 f3 ff ff\n'
p33
S'.text:0000000000402390\n.text:0000000000402391\n.text:0000000000402398\n.text:000000000040239d\n.text:00000000004023a4\n.text:00000000004023ab\n.text:00000000004023b0\n.text:00000000004023b2\n.text:00000000004023b7\n.text:00000000004023be\n.text:00000000004023c3\n.text:00000000004023c8\n.text:00000000004023ca\n.text:00000000004023cf\n.text:00000000004023d4\n'
p34
tp35
sS'_format_char'
p36
(S'\n__stdcall _format_char()\n'
p37
V\u000avoid _format_char(ulong uParm1,int iParm2)\u000a\u000a{\u000a  char cVar1;\u000a  int iVar2;\u000a  \u000a  iVar2 = (int)(uParm1 & 0xffffffff);\u000a  cVar1 = (char)(uParm1 & 0xffffffff);\u000a  if (iVar2 < 0x22) {\u000a    if (iVar2 == 9) {\u000a      _put_char(0x5c);\u000a      _put_char(0x74);\u000a      return;\u000a    }\u000a    if (iVar2 == 10) {\u000a      _put_char(0x5c);\u000a      _put_char(0x6e);\u000a      return;\u000a    }\u000a  }\u000a  else {\u000a    if ((iVar2 == 0x5c) || (iVar2 == 0x22)) {\u000a      _put_char(0x5c);\u000a      goto LAB_004048e8;\u000a    }\u000a  }\u000a  if (((cVar1 < ' ') || (cVar1 == 0x7f)) && ((-1 < cVar1 || (iParm2 == 0)))) {\u000a    _put_char(0x5c);\u000a    snprintf(_buf_ptr,(long)_buf_len,"%03o",uParm1 & 0xff);\u000a    _buf_ptr = _buf_ptr + 3;\u000a    _buf_len = _buf_len + -3;\u000a    return;\u000a  }\u000aLAB_004048e8:\u000a  _put_char((ulong)(uint)(int)cVar1);\u000a  return;\u000a}\u000a\u000a
p38
S'PUSH RBX\nMOV EBX,EDI\nCMP EBX,0x21\nJG 0x004048d4\nCMP EBX,0x9\nJZ 0x004048ee\nCMP EBX,0xa\nJNZ 0x00404900\nMOV EDI,0x5c\nCALL 0x00404880\nMOV EDI,0x6e\nPOP RBX\nJMP 0x00404880\nCMP EBX,0x5c\nJZ 0x004048de\nCMP EBX,0x22\nJNZ 0x00404900\nMOV EDI,0x5c\nCALL 0x00404880\nMOVSX EDI,BL\nPOP RBX\nJMP 0x00404880\nMOV EDI,0x5c\nCALL 0x00404880\nMOV EDI,0x74\nPOP RBX\nJMP 0x00404880\nCMP BL,0x20\nJL 0x0040490a\nCMP BL,0x7f\nJNZ 0x004048e8\nTEST BL,BL\nJNS 0x00404912\nTEST ESI,ESI\nJNZ 0x004048e8\nMOV EDI,0x5c\nCALL 0x00404880\nMOV RDI,qword ptr [0x006fd438]\nMOVSXD RSI,dword ptr [0x006fd440]\nMOVZX ECX,BL\nMOV EDX,0x40672f\nXOR EAX,EAX\nCALL 0x004014a0\nADD qword ptr [0x006fd438],0x3\nADD dword ptr [0x006fd440],-0x3\nPOP RBX\nRET\n'
p39
S'53\n89 fb\n83 fb 21\n7f 1c\n83 fb 09\n74 31\n83 fb 0a\n75 3e\nbf 5c 00 00 00\ne8 b4 ff ff ff\nbf 6e 00 00 00\n5b\neb ac\n83 fb 5c\n74 05\n83 fb 22\n75 22\nbf 5c 00 00 00\ne8 98 ff ff ff\n0f be fb\n5b\neb 92\nbf 5c 00 00 00\ne8 88 ff ff ff\nbf 74 00 00 00\n5b\neb 80\n80 fb 20\n7c 05\n80 fb 7f\n75 de\n84 db\n79 04\n85 f6\n75 d6\nbf 5c 00 00 00\ne8 64 ff ff ff\n48 8b 3d 15 8b 2f 00\n48 63 35 16 8b 2f 00\n0f b6 cb\nba 2f 67 40 00\n31 c0\ne8 67 cb ff ff\n48 83 05 f7 8a 2f 00 03\n83 05 f8 8a 2f 00 fd\n5b\nc3\n'
p40
S'.text:00000000004048b0\n.text:00000000004048b1\n.text:00000000004048b3\n.text:00000000004048b6\n.text:00000000004048b8\n.text:00000000004048bb\n.text:00000000004048bd\n.text:00000000004048c0\n.text:00000000004048c2\n.text:00000000004048c7\n.text:00000000004048cc\n.text:00000000004048d1\n.text:00000000004048d2\n.text:00000000004048d4\n.text:00000000004048d7\n.text:00000000004048d9\n.text:00000000004048dc\n.text:00000000004048de\n.text:00000000004048e3\n.text:00000000004048e8\n.text:00000000004048eb\n.text:00000000004048ec\n.text:00000000004048ee\n.text:00000000004048f3\n.text:00000000004048f8\n.text:00000000004048fd\n.text:00000000004048fe\n.text:0000000000404900\n.text:0000000000404903\n.text:0000000000404905\n.text:0000000000404908\n.text:000000000040490a\n.text:000000000040490c\n.text:000000000040490e\n.text:0000000000404910\n.text:0000000000404912\n.text:0000000000404917\n.text:000000000040491c\n.text:0000000000404923\n.text:000000000040492a\n.text:000000000040492d\n.text:0000000000404932\n.text:0000000000404934\n.text:0000000000404939\n.text:0000000000404941\n.text:0000000000404948\n.text:0000000000404949\n'
p41
tp42
sS'grammar'
p43
(S'\n__stdcall grammar()\n'
p44
V\u000avoid grammar(void)\u000a\u000a{\u000a  puts("Grammar for xprop:\u005cn");\u000a  printf("\u005ct%s [<disp>] [<select option>] <option>* <mapping>* <spec>*",program_name);\u000a  puts(\u000a      "\u005cn\u005cn\u005ctdisp ::= -display host:dpy\u005cn\u005ctselect option ::= -root | -id <id> | -font <font> | -name <name>\u005cn\u005ctoption ::= -len <n> | -notype | -spy | {-formats|-fs} <format file>\u005cn\u005ctmapping ::= {-f|-format} <atom> <format> [<dformat>]\u005cn\u005ct            | -remove <propname>\u005cn\u005ct            | -set <propname> <value>\u005cn\u005ctspec ::= [<format> [<dformat>]] <atom>\u005cn\u005ctformat ::= {0|8|16|32}{a|b|c|i|m|s|t|x}*\u005cn\u005ctdformat ::= <unit><unit>*             (can\u005c't start with a letter or \u005c'-\u005c')\u005cn\u005ctunit ::= ?<exp>(<unit>*) | $<n> | <display char>\u005cn\u005ctexp ::= <term> | <term>=<exp> | !<exp>\u005cn\u005ctterm ::= <n> | $<n> | m<n>\u005cn\u005ctdisplay char ::= <normal char> | \u005c\u005c<non digit char> | \u005c\u005c<octal number>\u005cn\u005ctnormal char ::= <any char except a digit, $, ?, \u005c\u005c, or )>\u005cn"\u000a      );\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(0);\u000a}\u000a\u000a
p45
S'PUSH RAX\nMOV EDI,0x4068f0\nCALL 0x00401410\nMOV RSI,qword ptr [0x00608210]\nMOV EDI,0x406155\nXOR EAX,EAX\nCALL 0x00401470\nMOV EDI,0x406910\nCALL 0x00401410\nXOR EDI,EDI\nCALL 0x00401730\n'
p46
S'50\nbf f0 68 40 00\ne8 25 e8 ff ff\n48 8b 35 1e 56 20 00\nbf 55 61 40 00\n31 c0\ne8 72 e8 ff ff\nbf 10 69 40 00\ne8 08 e8 ff ff\n31 ff\ne8 21 eb ff ff\n'
p47
S'.text:0000000000402be0\n.text:0000000000402be1\n.text:0000000000402be6\n.text:0000000000402beb\n.text:0000000000402bf2\n.text:0000000000402bf7\n.text:0000000000402bf9\n.text:0000000000402bfe\n.text:0000000000402c03\n.text:0000000000402c08\n.text:0000000000402c0a\n'
p48
tp49
sS'vfprintf'
p50
(S'\n__stdcall vfprintf(FILE * __s, char * __format, __gnuc_va_list __arg)\n'
p51
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_vfprintf_006081a8)();\u000a  return iVar1;\u000a}\u000a\u000a
p52
S'JMP qword ptr [0x006081a8]\n'
p53
S'ff 25 d2 6a 20 00\n'
p54
S'.plt:00000000004016d0\n'
p55
tp56
sS'putchar'
p57
(S'\n__stdcall putchar(int __c)\n'
p58
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint putchar(int __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_putchar_00608028)();\u000a  return iVar1;\u000a}\u000a\u000a
p59
S'JMP qword ptr [0x00608028]\n'
p60
S'ff 25 52 6c 20 00\n'
p61
S'.plt:00000000004013d0\n'
p62
tp63
sS'XFree'
p64
(S'\n__stdcall XFree()\n'
p65
V\u000avoid XFree(void)\u000a\u000a{\u000a  (*(code *)PTR_XFree_00608080)();\u000a  return;\u000a}\u000a\u000a
p66
S'JMP qword ptr [0x00608080]\n'
p67
S'ff 25 fa 6b 20 00\n'
p68
S'.plt:0000000000401480\n'
p69
tp70
sS'frame_dummy'
p71
(S'\n__stdcall frame_dummy()\n'
p72
V\u000a/* WARNING: Removing unreachable block (ram,0x0040186a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p73
S'MOV EDI,0x607e08\nCMP qword ptr [RDI],0x0\nJNZ 0x00401860\nJMP 0x004017f0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x0040185b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x004017f0\n'
p74
S'bf 08 7e 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p75
S'.text:0000000000401850\n.text:0000000000401855\n.text:0000000000401859\n.text:000000000040185b\n.text:0000000000401860\n.text:0000000000401865\n.text:0000000000401868\n.text:000000000040186a\n.text:000000000040186b\n.text:000000000040186e\n.text:0000000000401870\n.text:0000000000401871\n'
p76
tp77
sS'Scan_Octal'
p78
(S'\n__stdcall Scan_Octal(char * string, ulong * value)\n'
p79
V\u000achar * Scan_Octal(char *string,ulong *value)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  \u000a  iVar1 = __isoc99_sscanf(string,&DAT_004066fc,value,value);\u000a  if (iVar1 == 1) {\u000a    pcVar2 = Skip_Digits(string);\u000a    return pcVar2;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  Fatal_Error("Bad octal number: %s.",string);\u000a}\u000a\u000a
p80
S'PUSH RBX\nMOV RCX,RSI\nMOV RBX,RDI\nMOV ESI,0x4066fc\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401610\nCMP EAX,0x1\nJNZ 0x00404004\nMOV RDI,RBX\nPOP RBX\nJMP 0x00403910\nMOV EDI,0x406700\nXOR EAX,EAX\nMOV RSI,RBX\nCALL 0x00401a80\n'
p81
S'53\n48 89 f1\n48 89 fb\nbe fc 66 40 00\n31 c0\n48 89 ca\ne8 1a d6 ff ff\n83 f8 01\n75 09\n48 89 df\n5b\ne9 0c f9 ff ff\nbf 00 67 40 00\n31 c0\n48 89 de\ne8 6d da ff ff\n'
p82
S'.text:0000000000403fe0\n.text:0000000000403fe1\n.text:0000000000403fe4\n.text:0000000000403fe7\n.text:0000000000403fec\n.text:0000000000403fee\n.text:0000000000403ff1\n.text:0000000000403ff6\n.text:0000000000403ff9\n.text:0000000000403ffb\n.text:0000000000403ffe\n.text:0000000000403fff\n.text:0000000000404004\n.text:0000000000404009\n.text:000000000040400b\n.text:000000000040400e\n'
p83
tp84
sS'spy_error_handler'
p85
(S'\n__stdcall spy_error_handler(Display * dpy, XErrorEvent * ev)\n'
p86
V\u000a/* WARNING: Exceeded maximum restarts with more pending */\u000a\u000aint spy_error_handler(Display *dpy,XErrorEvent *ev)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if ((ev->error_code != '\u005cb') && (ev->error_code != 3)) {\u000a    if (old_error_handler != (int (*)(Display *,XErrorEvent *))0x0) {\u000a                    /* WARNING: Could not recover jumptable at 0x00403377. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a      iVar1 = (*old_error_handler)();\u000a      return iVar1;\u000a    }\u000a    return 0;\u000a  }\u000a  putchar(10);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(0);\u000a}\u000a\u000a
p87
S'MOV AL,byte ptr [RSI + 0x20]\nCMP AL,0x8\nJZ 0x0040337c\nCMP AL,0x3\nJZ 0x0040337c\nMOV RAX,qword ptr [0x00608bd0]\nTEST RAX,RAX\nJZ 0x00403379\nJMP RAX\nXOR EAX,EAX\nRET\nPUSH RAX\nMOV EDI,0xa\nCALL 0x004013d0\nXOR EDI,EDI\nCALL 0x00401730\n'
p88
S'8a 46 20\n3c 08\n74 15\n3c 03\n74 11\n48 8b 05 5e 58 20 00\n48 85 c0\n74 02\nff e0\n31 c0\nc3\n50\nbf 0a 00 00 00\ne8 49 e0 ff ff\n31 ff\ne8 a2 e3 ff ff\n'
p89
S'.text:0000000000403360\n.text:0000000000403363\n.text:0000000000403365\n.text:0000000000403367\n.text:0000000000403369\n.text:000000000040336b\n.text:0000000000403372\n.text:0000000000403375\n.text:0000000000403377\n.text:0000000000403379\n.text:000000000040337b\n.text:000000000040337c\n.text:000000000040337d\n.text:0000000000403382\n.text:0000000000403387\n.text:0000000000403389\n'
p90
tp91
sS'XSetErrorHandler'
p92
(S'\n__stdcall XSetErrorHandler()\n'
p93
V\u000avoid XSetErrorHandler(void)\u000a\u000a{\u000a  (*(code *)PTR_XSetErrorHandler_00608110)();\u000a  return;\u000a}\u000a\u000a
p94
S'JMP qword ptr [0x00608110]\n'
p95
S'ff 25 6a 6b 20 00\n'
p96
S'.plt:00000000004015a0\n'
p97
tp98
sS'Window_Is_Viewable'
p99
(S'\n__stdcall Window_Is_Viewable(Display * dpy, Window win)\n'
p100
V\u000aint Window_Is_Viewable(Display *dpy,Window win)\u000a\u000a{\u000a  undefined auStack136 [40];\u000a  int local_60;\u000a  int local_2c;\u000a  \u000a  XGetWindowAttributes(dpy,win,auStack136);\u000a  return (int)(uint)(local_2c == 2 && local_60 == 1);\u000a}\u000a\u000a
p101
S'SUB RSP,0x88\nMOV RDX,RSP\nCALL 0x004016a0\nCMP dword ptr [RSP + 0x28],0x1\nSETZ AL\nCMP dword ptr [RSP + 0x5c],0x2\nSETZ CL\nAND CL,AL\nMOVZX EAX,CL\nADD RSP,0x88\nRET\n'
p102
S'48 81 ec 88 00 00 00\n48 89 e2\ne8 31 f3 ff ff\n83 7c 24 28 01\n0f 94 c0\n83 7c 24 5c 02\n0f 94 c1\n20 c1\n0f b6 c1\n48 81 c4 88 00 00 00\nc3\n'
p103
S'.text:0000000000402360\n.text:0000000000402367\n.text:000000000040236a\n.text:000000000040236f\n.text:0000000000402374\n.text:0000000000402377\n.text:000000000040237c\n.text:000000000040237f\n.text:0000000000402381\n.text:0000000000402384\n.text:000000000040238b\n'
p104
tp105
sS'Is_A_DFormat'
p106
(S'\n__stdcall Is_A_DFormat(char * string)\n'
p107
V\u000aint Is_A_DFormat(char *string)\u000a\u000a{\u000a  byte bVar1;\u000a  bool bVar2;\u000a  ushort **ppuVar3;\u000a  \u000a  bVar1 = *string;\u000a  bVar2 = false;\u000a  if ((bVar1 != 0) && (bVar2 = false, bVar1 != 0x2d)) {\u000a    ppuVar3 = __ctype_b_loc();\u000a    bVar2 = bVar1 != 0x5f && (*(byte *)((long)*ppuVar3 + (ulong)bVar1 * 2 + 1) & 4) == 0;\u000a  }\u000a  return (int)(uint)bVar2;\u000a}\u000a\u000a
p108
S'PUSH RBX\nMOVZX EBX,byte ptr [RDI]\nXOR EAX,EAX\nTEST RBX,RBX\nJZ 0x004037c8\nCMP BL,0x2d\nJZ 0x004037c8\nCALL 0x00401770\nMOV RAX,qword ptr [RAX]\nTEST byte ptr [RAX + RBX*0x2 + 0x1],0x4\nSETZ CL\nCMP BL,0x5f\nSETNZ AL\nAND AL,CL\nMOVZX EAX,AL\nPOP RBX\nRET\n'
p109
S'53\n0f b6 1f\n31 c0\n48 85 db\n74 1d\n80 fb 2d\n74 18\ne8 bb df ff ff\n48 8b 00\nf6 44 58 01 04\n0f 94 c1\n80 fb 5f\n0f 95 c0\n20 c8\n0f b6 c0\n5b\nc3\n'
p110
S'.text:00000000004037a0\n.text:00000000004037a1\n.text:00000000004037a4\n.text:00000000004037a6\n.text:00000000004037a9\n.text:00000000004037ab\n.text:00000000004037ae\n.text:00000000004037b0\n.text:00000000004037b5\n.text:00000000004037b8\n.text:00000000004037bd\n.text:00000000004037c0\n.text:00000000004037c3\n.text:00000000004037c6\n.text:00000000004037c8\n.text:00000000004037cb\n.text:00000000004037cc\n'
p111
tp112
sS'XmbTextPropertyToTextList'
p113
(S'\n__stdcall XmbTextPropertyToTextList()\n'
p114
V\u000avoid XmbTextPropertyToTextList(void)\u000a\u000a{\u000a  (*(code *)PTR_XmbTextPropertyToTextList_006080b8)();\u000a  return;\u000a}\u000a\u000a
p115
S'JMP qword ptr [0x006080b8]\n'
p116
S'ff 25 c2 6b 20 00\n'
p117
S'.plt:00000000004014f0\n'
p118
tp119
sS'Find_Child_At_Pointer'
p120
(S'\n__stdcall Find_Child_At_Pointer(Display * dpy, Window win)\n'
p121
V\u000aWindow Find_Child_At_Pointer(Display *dpy,Window win)\u000a\u000a{\u000a  uint dummyu;\u000a  int dummyi;\u000a  Window root_return;\u000a  Window local_18;\u000a  undefined local_10 [4];\u000a  undefined local_c [4];\u000a  undefined local_8 [8];\u000a  \u000a  XQueryPointer(dpy,win,local_8,&local_18,local_c,local_c,local_c,local_c,local_10);\u000a  return local_18;\u000a}\u000a\u000a
p122
S'SUB RSP,0x18\nSUB RSP,0x8\nLEA RAX,[RSP + 0x10]\nLEA R8,[RSP + 0x14]\nLEA RDX,[RSP + 0x18]\nLEA RCX,[RSP + 0x8]\nMOV R9,R8\nPUSH RAX\nPUSH R8\nPUSH R8\nCALL 0x00401580\nADD RSP,0x20\nMOV RAX,qword ptr [RSP]\nADD RSP,0x18\nRET\n'
p123
S'48 83 ec 18\n48 83 ec 08\n48 8d 44 24 10\n4c 8d 44 24 14\n48 8d 54 24 18\n48 8d 4c 24 08\n4d 89 c1\n50\n41 50\n41 50\ne8 b7 f3 ff ff\n48 83 c4 20\n48 8b 04 24\n48 83 c4 18\nc3\n'
p124
S'.text:00000000004021a0\n.text:00000000004021a4\n.text:00000000004021a8\n.text:00000000004021ad\n.text:00000000004021b2\n.text:00000000004021b7\n.text:00000000004021bc\n.text:00000000004021bf\n.text:00000000004021c0\n.text:00000000004021c2\n.text:00000000004021c4\n.text:00000000004021c9\n.text:00000000004021cd\n.text:00000000004021d1\n.text:00000000004021d5\n'
p125
tp126
sS'exit'
p127
(S'\n__stdcall exit(int __status)\n'
p128
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_006081d8)();\u000a  return;\u000a}\u000a\u000a
p129
S'JMP qword ptr [0x006081d8]\n'
p130
S'ff 25 a2 6a 20 00\n'
p131
S'.plt:0000000000401730\n'
p132
tp133
sS'XGetWindowProperty'
p134
(S'\n__stdcall XGetWindowProperty()\n'
p135
V\u000avoid XGetWindowProperty(void)\u000a\u000a{\u000a  (*(code *)PTR_XGetWindowProperty_006081e0)();\u000a  return;\u000a}\u000a\u000a
p136
S'JMP qword ptr [0x006081e0]\n'
p137
S'ff 25 9a 6a 20 00\n'
p138
S'.plt:0000000000401740\n'
p139
tp140
sS'Get_Format_Size'
p141
(S'\n__stdcall Get_Format_Size(char * format)\n'
p142
V\u000aint Get_Format_Size(char *format)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong local_10;\u000a  \u000a  Scan_Long(format,(long *)&local_10);\u000a  uVar1 = local_10 << 0x3d | local_10 >> 3;\u000a  if ((uVar1 < 5) && (uVar1 != 3)) {\u000a    return (int)local_10;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  Fatal_Error("bad format: %s",format);\u000a}\u000a\u000a
p143
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RDI\nLEA RSI,[RSP + 0x8]\nCALL 0x004038c0\nMOV RAX,qword ptr [RSP + 0x8]\nMOV RCX,RAX\nROL RCX,0x3d\nCMP RCX,0x4\nJA 0x00403860\nCMP RCX,0x3\nJZ 0x00403860\nADD RSP,0x10\nPOP RBX\nRET\nMOV EDI,0x4065f4\nXOR EAX,EAX\nMOV RSI,RBX\nCALL 0x00401a80\n'
p144
S'53\n48 83 ec 10\n48 89 fb\n48 8d 74 24 08\ne8 7e 00 00 00\n48 8b 44 24 08\n48 89 c1\n48 c1 c1 3d\n48 83 f9 04\n77 0c\n48 83 f9 03\n74 06\n48 83 c4 10\n5b\nc3\nbf f4 65 40 00\n31 c0\n48 89 de\ne8 11 e2 ff ff\n'
p145
S'.text:0000000000403830\n.text:0000000000403831\n.text:0000000000403835\n.text:0000000000403838\n.text:000000000040383d\n.text:0000000000403842\n.text:0000000000403847\n.text:000000000040384a\n.text:000000000040384e\n.text:0000000000403852\n.text:0000000000403854\n.text:0000000000403858\n.text:000000000040385a\n.text:000000000040385e\n.text:000000000040385f\n.text:0000000000403860\n.text:0000000000403865\n.text:0000000000403867\n.text:000000000040386a\n'
p146
tp147
sS'__isoc99_sscanf'
p148
(S'\n__stdcall __isoc99_sscanf()\n'
p149
V\u000avoid __isoc99_sscanf(void)\u000a\u000a{\u000a  (*(code *)PTR___isoc99_sscanf_00608148)();\u000a  return;\u000a}\u000a\u000a
p150
S'JMP qword ptr [0x00608148]\n'
p151
S'ff 25 32 6b 20 00\n'
p152
S'.plt:0000000000401610\n'
p153
tp154
sS'XQueryPointer'
p155
(S'\n__stdcall XQueryPointer()\n'
p156
V\u000avoid XQueryPointer(void)\u000a\u000a{\u000a  (*(code *)PTR_XQueryPointer_00608100)();\u000a  return;\u000a}\u000a\u000a
p157
S'JMP qword ptr [0x00608100]\n'
p158
S'ff 25 7a 6b 20 00\n'
p159
S'.plt:0000000000401580\n'
p160
tp161
sS'Mask_Word'
p162
(S'\n__stdcall Mask_Word(thunk * thunks, char * format)\n'
p163
V\u000along Mask_Word(thunk *thunks,char *format)\u000a\u000a{\u000a  char cVar1;\u000a  size_t sVar2;\u000a  long *plVar3;\u000a  int iVar4;\u000a  \u000a  sVar2 = strlen(format);\u000a  if (0 < (int)sVar2) {\u000a    plVar3 = &thunks->value;\u000a    iVar4 = 0;\u000a    do {\u000a      cVar1 = Get_Format_Char(format);\u000a      if (cVar1 == 'm') {\u000a        return *plVar3;\u000a      }\u000a      iVar4 = iVar4 + 1;\u000a      sVar2 = strlen(format);\u000a      plVar3 = plVar3 + 7;\u000a    } while (iVar4 < (int)sVar2);\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p164
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R15,RSI\nMOV RBX,RDI\nMOV RDI,R15\nCALL 0x00401460\nXOR R14D,R14D\nTEST EAX,EAX\nJLE 0x00404d45\nADD RBX,0x10\nXOR EBP,EBP\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nMOV ESI,EBP\nCALL 0x00403870\nCMP AL,0x6d\nJZ 0x00404d42\nINC EBP\nMOV RDI,R15\nCALL 0x00401460\nADD RBX,0x38\nCMP EBP,EAX\nJL 0x00404d20\nJMP 0x00404d45\nMOV R14,qword ptr [RBX]\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p165
S'55\n41 57\n41 56\n53\n50\n49 89 f7\n48 89 fb\n4c 89 ff\ne8 5b c7 ff ff\n45 31 f6\n85 c0\n7e 39\n48 83 c3 10\n31 ed\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\n89 ee\ne8 46 eb ff ff\n3c 6d\n74 14\nff c5\n4c 89 ff\ne8 28 c7 ff ff\n48 83 c3 38\n39 c5\n7c e0\neb 03\n4c 8b 33\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p166
S'.text:0000000000404cf0\n.text:0000000000404cf1\n.text:0000000000404cf3\n.text:0000000000404cf5\n.text:0000000000404cf6\n.text:0000000000404cf7\n.text:0000000000404cfa\n.text:0000000000404cfd\n.text:0000000000404d00\n.text:0000000000404d05\n.text:0000000000404d08\n.text:0000000000404d0a\n.text:0000000000404d0c\n.text:0000000000404d10\n.text:0000000000404d12\n.text:0000000000404d20\n.text:0000000000404d23\n.text:0000000000404d25\n.text:0000000000404d2a\n.text:0000000000404d2c\n.text:0000000000404d2e\n.text:0000000000404d30\n.text:0000000000404d33\n.text:0000000000404d38\n.text:0000000000404d3c\n.text:0000000000404d3e\n.text:0000000000404d40\n.text:0000000000404d42\n.text:0000000000404d45\n.text:0000000000404d48\n.text:0000000000404d4c\n.text:0000000000404d4d\n.text:0000000000404d4f\n.text:0000000000404d51\n.text:0000000000404d52\n'
p167
tp168
sS'Extract_Icon'
p169
(S'\n__stdcall Extract_Icon(char * * pointer, int * length, char * * icon)\n'
p170
V\u000along Extract_Icon(char **pointer,int *length,char **icon)\u000a\u000a{\u000a  int iVar1;\u000a  char **in_RCX;\u000a  \u000a  if ((int)icon == 0x20) {\u000a    iVar1 = *length;\u000a    *in_RCX = *pointer;\u000a    *length = 0;\u000a    return (long)iVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  Fatal_Error("can\u005c't use format character \u005c'o\u005c' with any size except 32.");\u000a}\u000a\u000a
p171
S'CMP EDX,0x20\nJNZ 0x00403df5\nMOV RDX,qword ptr [RDI]\nMOVSXD RAX,dword ptr [RSI]\nMOV qword ptr [RCX],RDX\nMOV dword ptr [RSI],0x0\nRET\nPUSH RAX\nMOV EDI,0x4066c4\nXOR EAX,EAX\nCALL 0x00401a80\n'
p172
S'83 fa 20\n75 10\n48 8b 17\n48 63 06\n48 89 11\nc7 06 00 00 00 00\nc3\n50\nbf c4 66 40 00\n31 c0\ne8 7e dc ff ff\n'
p173
S'.text:0000000000403de0\n.text:0000000000403de3\n.text:0000000000403de5\n.text:0000000000403de8\n.text:0000000000403deb\n.text:0000000000403dee\n.text:0000000000403df4\n.text:0000000000403df5\n.text:0000000000403df6\n.text:0000000000403dfb\n.text:0000000000403dfd\n'
p174
tp175
sS'Remove_Property'
p176
(S'\n__stdcall Remove_Property(Display * dpy, Window w, char * propname)\n'
p177
V\u000avoid Remove_Property(Display *dpy,Window w,char *propname)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  lVar1 = XInternAtom(dpy,propname,1);\u000a  if (lVar1 != 0) {\u000a    (*(code *)PTR_XDeleteProperty_00608088)(dpy,w,lVar1);\u000a    return;\u000a  }\u000a  fprintf(stderr,"%s:  no such property \u005c"%s\u005c"\u005cn",program_name,propname);\u000a  return;\u000a}\u000a\u000a
p178
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV EDX,0x1\nMOV RSI,R15\nCALL 0x004015f0\nTEST RAX,RAX\nJZ 0x00402d83\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,RAX\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00401490\nMOV RDI,qword ptr [0x00608b80]\nMOV RDX,qword ptr [0x00608210]\nMOV ESI,0x406459\nXOR EAX,EAX\nMOV RCX,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00401550\n'
p179
S'41 57\n41 56\n53\n49 89 d7\n49 89 f6\n48 89 fb\nba 01 00 00 00\n4c 89 fe\ne8 85 e8 ff ff\n48 85 c0\n74 13\n48 89 df\n4c 89 f6\n48 89 c2\n5b\n41 5e\n41 5f\ne9 0d e7 ff ff\n48 8b 3d f6 5d 20 00\n48 8b 15 7f 54 20 00\nbe 59 64 40 00\n31 c0\n4c 89 f9\n5b\n41 5e\n41 5f\ne9 ab e7 ff ff\n'
p180
S'.text:0000000000402d50\n.text:0000000000402d52\n.text:0000000000402d54\n.text:0000000000402d55\n.text:0000000000402d58\n.text:0000000000402d5b\n.text:0000000000402d5e\n.text:0000000000402d63\n.text:0000000000402d66\n.text:0000000000402d6b\n.text:0000000000402d6e\n.text:0000000000402d70\n.text:0000000000402d73\n.text:0000000000402d76\n.text:0000000000402d79\n.text:0000000000402d7a\n.text:0000000000402d7c\n.text:0000000000402d7e\n.text:0000000000402d83\n.text:0000000000402d8a\n.text:0000000000402d91\n.text:0000000000402d96\n.text:0000000000402d98\n.text:0000000000402d9b\n.text:0000000000402d9c\n.text:0000000000402d9e\n.text:0000000000402da0\n'
p181
tp182
sS'XWindowEvent'
p183
(S'\n__stdcall XWindowEvent()\n'
p184
V\u000avoid XWindowEvent(void)\u000a\u000a{\u000a  (*(code *)PTR_XWindowEvent_006081b0)();\u000a  return;\u000a}\u000a\u000a
p185
S'JMP qword ptr [0x006081b0]\n'
p186
S'ff 25 ca 6a 20 00\n'
p187
S'.plt:00000000004016e0\n'
p188
tp189
sS'Fatal_Error'
p190
(S'\n__stdcall Fatal_Error(char * msg)\n'
p191
V\u000avoid Fatal_Error(char *msg,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_RCX;\u000a  undefined8 in_RDX;\u000a  undefined8 in_RSI;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list args;\u000a  undefined4 local_d8;\u000a  undefined4 local_d4;\u000a  void **local_d0;\u000a  undefined *local_c8;\u000a  undefined local_b8 [8];\u000a  undefined8 local_b0;\u000a  undefined8 local_a8;\u000a  undefined8 local_a0;\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_b0 = in_RSI;\u000a  local_a8 = in_RDX;\u000a  local_a0 = in_RCX;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  fflush(stdout);\u000a  fflush(stderr);\u000a  fprintf(stderr,"%s: error: ",program_name);\u000a  local_c8 = local_b8;\u000a  local_d0 = &args[0].overflow_arg_area;\u000a  local_d4 = 0x30;\u000a  local_d8 = 8;\u000a  vfprintf(stderr,msg,&local_d8);\u000a  fputc(10,stderr);\u000a  Close_Display();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(1);\u000a}\u000a\u000a
p192
S'PUSH RBX\nSUB RSP,0xd0\nMOV RBX,RDI\nTEST AL,AL\nJZ 0x00401ac6\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV RDI,qword ptr [0x00608b60]\nCALL 0x004015d0\nMOV RDI,qword ptr [0x00608b80]\nCALL 0x004015d0\nMOV RDI,qword ptr [0x00608b80]\nMOV RDX,qword ptr [0x00608210]\nMOV ESI,0x404f03\nXOR EAX,EAX\nCALL 0x00401550\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x8\nMOV RDI,qword ptr [0x00608b80]\nMOV RDX,RSP\nMOV RSI,RBX\nCALL 0x004016d0\nMOV RSI,qword ptr [0x00608b80]\nMOV EDI,0xa\nCALL 0x00401500\nCALL 0x00401a20\nMOV EDI,0x1\nCALL 0x00401730\n'
p193
S'53\n48 81 ec d0 00 00 00\n48 89 fb\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 89 74 24 28\n48 8b 3d 7a 70 20 00\ne8 e5 fa ff ff\n48 8b 3d 8e 70 20 00\ne8 d9 fa ff ff\n48 8b 3d 82 70 20 00\n48 8b 15 0b 67 20 00\nbe 03 4f 40 00\n31 c0\ne8 3f fa ff ff\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 08 00 00 00\n48 8b 3d 42 70 20 00\n48 89 e2\n48 89 de\ne8 87 fb ff ff\n48 8b 35 30 70 20 00\nbf 0a 00 00 00\ne8 a6 f9 ff ff\ne8 c1 fe ff ff\nbf 01 00 00 00\ne8 c7 fb ff ff\n'
p194
S'.text:0000000000401a80\n.text:0000000000401a81\n.text:0000000000401a88\n.text:0000000000401a8b\n.text:0000000000401a8d\n.text:0000000000401a8f\n.text:0000000000401a94\n.text:0000000000401a99\n.text:0000000000401a9e\n.text:0000000000401aa6\n.text:0000000000401aae\n.text:0000000000401ab6\n.text:0000000000401abe\n.text:0000000000401ac6\n.text:0000000000401acb\n.text:0000000000401ad0\n.text:0000000000401ad5\n.text:0000000000401ada\n.text:0000000000401adf\n.text:0000000000401ae6\n.text:0000000000401aeb\n.text:0000000000401af2\n.text:0000000000401af7\n.text:0000000000401afe\n.text:0000000000401b05\n.text:0000000000401b0a\n.text:0000000000401b0c\n.text:0000000000401b11\n.text:0000000000401b16\n.text:0000000000401b1b\n.text:0000000000401b23\n.text:0000000000401b28\n.text:0000000000401b30\n.text:0000000000401b37\n.text:0000000000401b3e\n.text:0000000000401b41\n.text:0000000000401b44\n.text:0000000000401b49\n.text:0000000000401b50\n.text:0000000000401b55\n.text:0000000000401b5a\n.text:0000000000401b5f\n.text:0000000000401b64\n'
p195
tp196
sS'XNextEvent'
p197
(S'\n__stdcall XNextEvent()\n'
p198
V\u000avoid XNextEvent(void)\u000a\u000a{\u000a  (*(code *)PTR_XNextEvent_00608118)();\u000a  return;\u000a}\u000a\u000a
p199
S'JMP qword ptr [0x00608118]\n'
p200
S'ff 25 62 6b 20 00\n'
p201
S'.plt:00000000004015b0\n'
p202
tp203
sS'Format_Len_Text'
p204
(S'\n__stdcall Format_Len_Text(char * string)\n'
p205
V\u000achar * Format_Len_Text(char *string)\u000a\u000a{\u000a  char *pcVar1;\u000a  bool bVar2;\u000a  int iVar3;\u000a  int iVar4;\u000a  char *__s;\u000a  size_t __n;\u000a  int iVar5;\u000a  uint uVar6;\u000a  int in_ESI;\u000a  XTextProperty textprop;\u000a  int local_60;\u000a  wint_t local_5c;\u000a  char **local_58;\u000a  char *local_50 [2];\u000a  undefined4 local_40;\u000a  long local_38;\u000a  \u000a  local_40 = 8;\u000a  local_38 = (long)in_ESI;\u000a  local_50[0] = string;\u000a  iVar3 = XmbTextPropertyToTextList(dpy,local_50,&local_58,&local_60);\u000a  if (iVar3 == 0) {\u000a    _buf_len = 500000;\u000a    _buf_ptr = _formatting_buffer + 1;\u000a    _formatting_buffer[0] = '\u005c"';\u000a    while (__s = _buf_ptr, 0 < local_60) {\u000a      __s = *local_58;\u000a      local_58 = local_58 + 1;\u000a      __n = strlen(__s);\u000a      uVar6 = (uint)__n;\u000a      while (0 < (int)uVar6) {\u000a        while( true ) {\u000a          iVar5 = (int)__n;\u000a          iVar3 = mbtowc((wchar_t *)&local_5c,__s,(long)iVar5);\u000a          if ((0 < iVar3) && (iVar4 = iswprint(local_5c), pcVar1 = _buf_ptr, iVar4 != 0)) break;\u000a          _put_char(0x5c);\u000a          snprintf(_buf_ptr,(long)_buf_len,"%03o");\u000a          _buf_ptr = _buf_ptr + 3;\u000a          _buf_len = _buf_len + -3;\u000a          __s = __s + 1;\u000a          __n = (size_t)(iVar5 - 1U);\u000a          if ((int)(iVar5 - 1U) < 1) goto LAB_004043cb;\u000a        }\u000a        __n = SEXT48(iVar3);\u000a        if (iVar3 <= _buf_len) {\u000a          memcpy(_buf_ptr,__s,__n);\u000a          _buf_ptr = pcVar1 + __n;\u000a          _buf_len = _buf_len - iVar3;\u000a        }\u000a        __s = __s + __n;\u000a        uVar6 = iVar5 - iVar3;\u000a        __n = (size_t)uVar6;\u000a      }\u000aLAB_004043cb:\u000a      iVar3 = local_60 + -1;\u000a      bVar2 = 1 < local_60;\u000a      local_60 = iVar3;\u000a      if (bVar2) {\u000a        local_60 = iVar3;\u000a        snprintf(_buf_ptr,(long)_buf_len,"\u005c\u005c000");\u000a        _buf_ptr = _buf_ptr + 4;\u000a        _buf_len = _buf_len + -4;\u000a      }\u000a    }\u000a    *_buf_ptr = '\u005c"';\u000a    pcVar1 = _buf_ptr + 1;\u000a    _buf_ptr = _buf_ptr + 2;\u000a    *pcVar1 = 0;\u000a  }\u000a  else {\u000a    __s = Format_Len_String();\u000a  }\u000a  return __s;\u000a}\u000a\u000a
p206
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV EBX,ESI\nMOV RBP,RDI\nMOV qword ptr [RSP + 0x20],RDX\nMOV dword ptr [RSP + 0x28],0x8\nMOV qword ptr [RSP + 0x18],RBP\nMOVSXD RAX,EBX\nMOV qword ptr [RSP + 0x30],RAX\nMOV RDI,qword ptr [0x00608b90]\nLEA RSI,[RSP + 0x18]\nLEA RDX,[RSP + 0x10]\nLEA RCX,[RSP + 0x8]\nCALL 0x004014f0\nTEST EAX,EAX\nJZ 0x004042ad\nXOR EDX,EDX\nMOV RDI,RBP\nMOV ESI,EBX\nCALL 0x00404140\nJMP 0x004043fd\nMOV dword ptr [0x006fd440],0x7a120\nMOV qword ptr [0x006fd438],0x6832b1\nMOV byte ptr [0x006832b0],0x22\nLEA R14,[RSP + 0xc]\nJMP 0x004042f9\nMOV RDI,qword ptr [0x006fd438]\nMOVSXD RSI,dword ptr [0x006fd440]\nMOV EDX,0x406803\nXOR EAX,EAX\nCALL 0x004014a0\nADD qword ptr [0x006fd438],0x4\nADD dword ptr [0x006fd440],-0x4\nMOV EAX,dword ptr [RSP + 0x8]\nNOP dword ptr [RAX]\nTEST EAX,EAX\nJLE 0x004043e4\nMOV RAX,qword ptr [RSP + 0x10]\nLEA RCX,[RAX + 0x8]\nMOV qword ptr [RSP + 0x10],RCX\nMOV R15,qword ptr [RAX]\nMOV RDI,R15\nCALL 0x00401460\nMOV RBX,RAX\nTEST EBX,EBX\nJG 0x00404370\nJMP 0x004043cb\nMOV EDI,0x5c\nCALL 0x00404880\nMOV RDI,qword ptr [0x006fd438]\nMOVSXD RSI,dword ptr [0x006fd440]\nMOVZX ECX,byte ptr [R15]\nMOV EDX,0x40672f\nXOR EAX,EAX\nCALL 0x004014a0\nADD qword ptr [0x006fd438],0x3\nADD dword ptr [0x006fd440],-0x3\nINC R15\nDEC EBX\nTEST EBX,EBX\nJLE 0x004043cb\nMOVSXD RDX,EBX\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x00401560\nMOV EBP,EAX\nTEST EBP,EBP\nJLE 0x00404330\nMOV EDI,dword ptr [RSP + 0xc]\nCALL 0x00401760\nTEST EAX,EAX\nJZ 0x00404330\nCMP dword ptr [0x006fd440],EBP\nMOVSXD R12,EBP\nJL 0x004043c2\nMOV R13,qword ptr [0x006fd438]\nMOV RDI,R13\nMOV RSI,R15\nMOV RDX,R12\nCALL 0x00401570\nADD R13,R12\nMOV qword ptr [0x006fd438],R13\nSUB dword ptr [0x006fd440],R12D\nADD R15,R12\nSUB EBX,EBP\nTEST EBX,EBX\nJG 0x00404370\nMOV ECX,dword ptr [RSP + 0x8]\nLEA EAX,[RCX + -0x1]\nMOV dword ptr [RSP + 0x8],EAX\nCMP ECX,0x2\nJL 0x00404300\nJMP 0x004042d0\nMOV RAX,qword ptr [0x006fd438]\nMOV byte ptr [RAX],0x22\nLEA RCX,[RAX + 0x2]\nMOV qword ptr [0x006fd438],RCX\nMOV byte ptr [RAX + 0x1],0x0\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p207
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n89 f3\n48 89 fd\n48 89 54 24 20\nc7 44 24 28 08 00 00 00\n48 89 6c 24 18\n48 63 c3\n48 89 44 24 30\n48 8b 3d 0c 49 20 00\n48 8d 74 24 18\n48 8d 54 24 10\n48 8d 4c 24 08\ne8 58 d2 ff ff\n85 c0\n74 11\n31 d2\n48 89 ef\n89 de\ne8 98 fe ff ff\ne9 50 01 00 00\nc7 05 89 91 2f 00 20 a1 07 00\n48 c7 05 76 91 2f 00 b1 32 68 00\nc6 05 e7 ef 27 00 22\n4c 8d 74 24 0c\neb 29\n48 8b 3d 61 91 2f 00\n48 63 35 62 91 2f 00\nba 03 68 40 00\n31 c0\ne8 b6 d1 ff ff\n48 83 05 46 91 2f 00 04\n83 05 47 91 2f 00 fc\n8b 44 24 08\n0f 1f 00\n85 c0\n0f 8e dc 00 00 00\n48 8b 44 24 10\n48 8d 48 08\n48 89 4c 24 10\n4c 8b 38\n4c 89 ff\ne8 3f d1 ff ff\n48 89 c3\n85 db\n7f 48\ne9 9e 00 00 00\nbf 5c 00 00 00\ne8 46 05 00 00\n48 8b 3d f7 90 2f 00\n48 63 35 f8 90 2f 00\n41 0f b6 0f\nba 2f 67 40 00\n31 c0\ne8 48 d1 ff ff\n48 83 05 d8 90 2f 00 03\n83 05 d9 90 2f 00 fd\n49 ff c7\nff cb\n85 db\n7e 5b\n48 63 d3\n4c 89 f7\n4c 89 fe\ne8 e2 d1 ff ff\n89 c5\n85 ed\n7e ac\n8b 7c 24 0c\ne8 d3 d3 ff ff\n85 c0\n74 9f\n39 2d a9 90 2f 00\n4c 63 e5\n7c 26\n4c 8b 2d 95 90 2f 00\n4c 89 ef\n4c 89 fe\n4c 89 e2\ne8 bf d1 ff ff\n4d 01 e5\n4c 89 2d 7d 90 2f 00\n44 29 25 7e 90 2f 00\n4d 01 e7\n29 eb\n85 db\n7f a5\n8b 4c 24 08\n8d 41 ff\n89 44 24 08\n83 f9 02\n0f 8c 21 ff ff ff\ne9 ec fe ff ff\n48 8b 05 4d 90 2f 00\nc6 00 22\n48 8d 48 02\n48 89 0d 3f 90 2f 00\nc6 40 01 00\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p208
S'.text:0000000000404250\n.text:0000000000404251\n.text:0000000000404253\n.text:0000000000404255\n.text:0000000000404257\n.text:0000000000404259\n.text:000000000040425a\n.text:000000000040425e\n.text:0000000000404260\n.text:0000000000404263\n.text:0000000000404268\n.text:0000000000404270\n.text:0000000000404275\n.text:0000000000404278\n.text:000000000040427d\n.text:0000000000404284\n.text:0000000000404289\n.text:000000000040428e\n.text:0000000000404293\n.text:0000000000404298\n.text:000000000040429a\n.text:000000000040429c\n.text:000000000040429e\n.text:00000000004042a1\n.text:00000000004042a3\n.text:00000000004042a8\n.text:00000000004042ad\n.text:00000000004042b7\n.text:00000000004042c2\n.text:00000000004042c9\n.text:00000000004042ce\n.text:00000000004042d0\n.text:00000000004042d7\n.text:00000000004042de\n.text:00000000004042e3\n.text:00000000004042e5\n.text:00000000004042ea\n.text:00000000004042f2\n.text:00000000004042f9\n.text:00000000004042fd\n.text:0000000000404300\n.text:0000000000404302\n.text:0000000000404308\n.text:000000000040430d\n.text:0000000000404311\n.text:0000000000404316\n.text:0000000000404319\n.text:000000000040431c\n.text:0000000000404321\n.text:0000000000404324\n.text:0000000000404326\n.text:0000000000404328\n.text:0000000000404330\n.text:0000000000404335\n.text:000000000040433a\n.text:0000000000404341\n.text:0000000000404348\n.text:000000000040434c\n.text:0000000000404351\n.text:0000000000404353\n.text:0000000000404358\n.text:0000000000404360\n.text:0000000000404367\n.text:000000000040436a\n.text:000000000040436c\n.text:000000000040436e\n.text:0000000000404370\n.text:0000000000404373\n.text:0000000000404376\n.text:0000000000404379\n.text:000000000040437e\n.text:0000000000404380\n.text:0000000000404382\n.text:0000000000404384\n.text:0000000000404388\n.text:000000000040438d\n.text:000000000040438f\n.text:0000000000404391\n.text:0000000000404397\n.text:000000000040439a\n.text:000000000040439c\n.text:00000000004043a3\n.text:00000000004043a6\n.text:00000000004043a9\n.text:00000000004043ac\n.text:00000000004043b1\n.text:00000000004043b4\n.text:00000000004043bb\n.text:00000000004043c2\n.text:00000000004043c5\n.text:00000000004043c7\n.text:00000000004043c9\n.text:00000000004043cb\n.text:00000000004043cf\n.text:00000000004043d2\n.text:00000000004043d6\n.text:00000000004043d9\n.text:00000000004043df\n.text:00000000004043e4\n.text:00000000004043eb\n.text:00000000004043ee\n.text:00000000004043f2\n.text:00000000004043f9\n.text:00000000004043fd\n.text:0000000000404401\n.text:0000000000404402\n.text:0000000000404404\n.text:0000000000404406\n.text:0000000000404408\n.text:000000000040440a\n.text:000000000040440b\n'
p209
tp210
sS'setlocale'
p211
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p212
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_00608180)();\u000a  return pcVar1;\u000a}\u000a\u000a
p213
S'JMP qword ptr [0x00608180]\n'
p214
S'ff 25 fa 6a 20 00\n'
p215
S'.plt:0000000000401680\n'
p216
tp217
sS'XLoadQueryFont'
p218
(S'\n__stdcall XLoadQueryFont()\n'
p219
V\u000avoid XLoadQueryFont(void)\u000a\u000a{\u000a  (*(code *)PTR_XLoadQueryFont_006080a0)();\u000a  return;\u000a}\u000a\u000a
p220
S'JMP qword ptr [0x006080a0]\n'
p221
S'ff 25 da 6b 20 00\n'
p222
S'.plt:00000000004014c0\n'
p223
tp224
sS'Format_Mask_Word'
p225
(S'\n__stdcall Format_Mask_Word()\n'
p226
V\u000achar * Format_Mask_Word(void)\u000a\u000a{\u000a  bool bVar1;\u000a  size_t sVar2;\u000a  char *pcVar3;\u000a  long lVar4;\u000a  ulong in_RDI;\u000a  ulong uVar5;\u000a  \u000a  _formatting_buffer._0_8_ = 0x203a4b53414d7b;\u000a  bVar1 = false;\u000a  uVar5 = 1;\u000a  lVar4 = 0;\u000a  do {\u000a    if ((uVar5 & in_RDI) != 0) {\u000a      if (bVar1) {\u000a        sVar2 = strlen(_formatting_buffer);\u000a        _formatting_buffer[sVar2 + 2] = 0;\u000a        *(undefined2 *)(_formatting_buffer + sVar2) = 0x202c;\u000a      }\u000a      Format_Unsigned();\u000a      strcat(_formatting_buffer,_formatting_buffer2);\u000a      bVar1 = true;\u000a    }\u000a    lVar4 = lVar4 + 1;\u000a    uVar5 = uVar5 * 2;\u000a  } while (lVar4 != 0x41);\u000a  pcVar3 = (char *)strlen(_formatting_buffer);\u000a  *(undefined2 *)(pcVar3 + 0x6832b0) = 0x7d;\u000a  return pcVar3;\u000a}\u000a\u000a
p227
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RDI\nMOV RAX,0x203a4b53414d7b\nMOV qword ptr [0x006832b0],RAX\nXOR EAX,EAX\nMOV R15D,0x1\nXOR EBX,EBX\nNOP dword ptr CS:[RAX + RAX*0x1]\nTEST R15,R14\nJZ 0x004044ff\nTEST EAX,EAX\nJZ 0x004044e3\nMOV EDI,0x6832b0\nCALL 0x00401460\nMOV byte ptr [0x6832b2 + RAX],0x0\nMOV word ptr [0x6832b0 + RAX],0x202c\nMOV RDI,RBX\nCALL 0x00404430\nMOV EDI,0x6832b0\nMOV ESI,0x6fd450\nCALL 0x00401710\nMOV EAX,0x1\nINC RBX\nADD R15,R15\nCMP RBX,0x41\nJNZ 0x004044c0\nMOV EDI,0x6832b0\nCALL 0x00401460\nMOV word ptr [0x6832b0 + RAX],0x7d\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p228
S'41 57\n41 56\n53\n49 89 fe\n48 b8 7b 4d 41 53 4b 3a 20 00\n48 89 05 07 ee 27 00\n31 c0\n41 bf 01 00 00 00\n31 db\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4d 85 f7\n74 3a\n85 c0\n74 1a\nbf b0 32 68 00\ne8 8d cf ff ff\nc6 80 b2 32 68 00 00\n66 c7 80 b0 32 68 00 2c 20\n48 89 df\ne8 45 ff ff ff\nbf b0 32 68 00\nbe 50 d4 6f 00\ne8 16 d2 ff ff\nb8 01 00 00 00\n48 ff c3\n4d 01 ff\n48 83 fb 41\n75 b5\nbf b0 32 68 00\ne8 4b cf ff ff\n66 c7 80 b0 32 68 00 7d 00\n5b\n41 5e\n41 5f\nc3\n'
p229
S'.text:0000000000404490\n.text:0000000000404492\n.text:0000000000404494\n.text:0000000000404495\n.text:0000000000404498\n.text:00000000004044a2\n.text:00000000004044a9\n.text:00000000004044ab\n.text:00000000004044b1\n.text:00000000004044b3\n.text:00000000004044c0\n.text:00000000004044c3\n.text:00000000004044c5\n.text:00000000004044c7\n.text:00000000004044c9\n.text:00000000004044ce\n.text:00000000004044d3\n.text:00000000004044da\n.text:00000000004044e3\n.text:00000000004044e6\n.text:00000000004044eb\n.text:00000000004044f0\n.text:00000000004044f5\n.text:00000000004044fa\n.text:00000000004044ff\n.text:0000000000404502\n.text:0000000000404505\n.text:0000000000404509\n.text:000000000040450b\n.text:0000000000404510\n.text:0000000000404515\n.text:000000000040451e\n.text:000000000040451f\n.text:0000000000404521\n.text:0000000000404523\n'
p230
tp231
sS'fputc'
p232
(S'\n__stdcall fputc(int __c, FILE * __stream)\n'
p233
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputc_006080c0)();\u000a  return iVar1;\u000a}\u000a\u000a
p234
S'JMP qword ptr [0x006080c0]\n'
p235
S'ff 25 ba 6b 20 00\n'
p236
S'.plt:0000000000401500\n'
p237
tp238
sS'is_utf8_locale'
p239
(S'\n__stdcall is_utf8_locale()\n'
p240
V\u000aint is_utf8_locale(void)\u000a\u000a{\u000a  int iVar1;\u000a  char *__s1;\u000a  bool bVar2;\u000a  \u000a  __s1 = nl_langinfo(0xe);\u000a  if (__s1 == (char *)0x0) {\u000a    bVar2 = false;\u000a  }\u000a  else {\u000a    iVar1 = strcmp(__s1,"UTF-8");\u000a    bVar2 = iVar1 == 0;\u000a  }\u000a  return (int)(uint)bVar2;\u000a}\u000a\u000a
p241
S'PUSH RAX\nMOV EDI,0xe\nCALL 0x00401600\nTEST RAX,RAX\nJZ 0x00404ab4\nMOV ESI,0x4067fd\nMOV RDI,RAX\nCALL 0x00401530\nTEST EAX,EAX\nSETZ AL\nJMP 0x00404ab6\nXOR EAX,EAX\nMOVZX EAX,AL\nPOP RCX\nRET\n'
p242
S'50\nbf 0e 00 00 00\ne8 65 cb ff ff\n48 85 c0\n74 14\nbe fd 67 40 00\n48 89 c7\ne8 83 ca ff ff\n85 c0\n0f 94 c0\neb 02\n31 c0\n0f b6 c0\n59\nc3\n'
p243
S'.text:0000000000404a90\n.text:0000000000404a91\n.text:0000000000404a96\n.text:0000000000404a9b\n.text:0000000000404a9e\n.text:0000000000404aa0\n.text:0000000000404aa5\n.text:0000000000404aa8\n.text:0000000000404aad\n.text:0000000000404aaf\n.text:0000000000404ab2\n.text:0000000000404ab4\n.text:0000000000404ab6\n.text:0000000000404ab9\n.text:0000000000404aba\n'
p244
tp245
sS'deregister_tm_clones'
p246
(S'\n__stdcall deregister_tm_clones()\n'
p247
V\u000a/* WARNING: Removing unreachable block (ram,0x004017c5) */\u000a/* WARNING: Removing unreachable block (ram,0x004017cf) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p248
S'MOV EAX,0x608b57\nPUSH RBP\nSUB RAX,0x608b50\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x004017e0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004017e0\nPOP RBP\nMOV EDI,0x608b50\nJMP RAX\nPOP RBP\nRET\n'
p249
S'b8 57 8b 60 00\n55\n48 2d 50 8b 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 50 8b 60 00\nff e0\n5d\nc3\n'
p250
S'.text:00000000004017b0\n.text:00000000004017b5\n.text:00000000004017b6\n.text:00000000004017bc\n.text:00000000004017c0\n.text:00000000004017c3\n.text:00000000004017c5\n.text:00000000004017ca\n.text:00000000004017cd\n.text:00000000004017cf\n.text:00000000004017d0\n.text:00000000004017d5\n.text:00000000004017e0\n.text:00000000004017e1\n'
p251
tp252
sS'XDisplayName'
p253
(S'\n__stdcall XDisplayName()\n'
p254
V\u000avoid XDisplayName(void)\u000a\u000a{\u000a  (*(code *)PTR_XDisplayName_00608160)();\u000a  return;\u000a}\u000a\u000a
p255
S'JMP qword ptr [0x00608160]\n'
p256
S'ff 25 1a 6b 20 00\n'
p257
S'.plt:0000000000401640\n'
p258
tp259
sS'Extract_Len_String'
p260
(S'\n__stdcall Extract_Len_String(char * * pointer, int * length, char * * string)\n'
p261
V\u000along Extract_Len_String(char **pointer,int *length,char **string)\u000a\u000a{\u000a  char *pcVar1;\u000a  int iVar2;\u000a  int iVar3;\u000a  char **in_RCX;\u000a  \u000a  if ((int)string != 8) {\u000a                    /* WARNING: Subroutine does not return */\u000a    Fatal_Error("can\u005c't use format character \u005c's\u005c' with any size except 8.");\u000a  }\u000a  *in_RCX = *pointer;\u000a  iVar2 = 1;\u000a  do {\u000a    iVar3 = iVar2;\u000a    *length = *length + -1;\u000a    pcVar1 = *pointer;\u000a    *pointer = pcVar1 + 1;\u000a    if (*pcVar1 == 0) break;\u000a    iVar2 = iVar3 + 1;\u000a  } while (0 < *length);\u000a  return (long)iVar3;\u000a}\u000a\u000a
p262
S'CMP EDX,0x8\nJNZ 0x00403dce\nMOV RAX,qword ptr [RDI]\nMOV qword ptr [RCX],RAX\nMOV ECX,0x1\nMOV EAX,ECX\nDEC dword ptr [RSI]\nMOV RCX,qword ptr [RDI]\nLEA RDX,[RCX + 0x1]\nMOV qword ptr [RDI],RDX\nCMP byte ptr [RCX],0x0\nJZ 0x00403dcb\nLEA ECX,[RAX + 0x1]\nCMP dword ptr [RSI],0x0\nJG 0x00403db0\nCDQE\nRET\nPUSH RAX\nMOV EDI,0x406493\nXOR EAX,EAX\nCALL 0x00401a80\n'
p263
S'83 fa 08\n75 29\n48 8b 07\n48 89 01\nb9 01 00 00 00\n89 c8\nff 0e\n48 8b 0f\n48 8d 51 01\n48 89 17\n80 39 00\n74 08\n8d 48 01\n83 3e 00\n7f e5\n48 98\nc3\n50\nbf 93 64 40 00\n31 c0\ne8 a5 dc ff ff\n'
p264
S'.text:0000000000403da0\n.text:0000000000403da3\n.text:0000000000403da5\n.text:0000000000403da8\n.text:0000000000403dab\n.text:0000000000403db0\n.text:0000000000403db2\n.text:0000000000403db4\n.text:0000000000403db7\n.text:0000000000403dbb\n.text:0000000000403dbe\n.text:0000000000403dc1\n.text:0000000000403dc3\n.text:0000000000403dc6\n.text:0000000000403dc9\n.text:0000000000403dcb\n.text:0000000000403dcd\n.text:0000000000403dce\n.text:0000000000403dcf\n.text:0000000000403dd4\n.text:0000000000403dd6\n'
p265
tp266
sS'Read_Quoted'
p267
(S'\n__stdcall Read_Quoted(FILE * stream)\n'
p268
V\u000achar * Read_Quoted(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  int iVar3;\u000a  char *pcVar4;\u000a  \u000a  Read_White_Space(stream);\u000a  iVar1 = Read_Char(stream);\u000a  if (iVar1 != 0x27) {\u000a                    /* WARNING: Subroutine does not return */\u000a    Fatal_Error("Bad format file format: missing dformat.");\u000a  }\u000a  pcVar4 = _large_buffer;\u000a  iVar1 = 500000;\u000a  do {\u000a    iVar2 = Read_Char(stream);\u000a    if (iVar2 == 0x27) {\u000a      *pcVar4 = 0;\u000a      pcVar4 = (char *)__strdup(_large_buffer);\u000a      if (pcVar4 == (char *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        Fatal_Error("Out of memory!");\u000a      }\u000a      return pcVar4;\u000a    }\u000a    *pcVar4 = (char)iVar2;\u000a    iVar3 = iVar1 + -1;\u000a    if (iVar2 == 0x5c) {\u000a      iVar2 = Read_Char(stream);\u000a      if (iVar2 != 10) {\u000a        pcVar4[1] = (char)iVar2;\u000a        pcVar4 = pcVar4 + 2;\u000a        iVar1 = iVar3;\u000a      }\u000a      iVar3 = iVar1 + -1;\u000a    }\u000a    else {\u000a      pcVar4 = pcVar4 + 1;\u000a    }\u000a    iVar1 = iVar3;\u000a  } while (-1 < iVar3);\u000a                    /* WARNING: Subroutine does not return */\u000a  Fatal_Error("Bad format file format: dformat too long.");\u000a}\u000a\u000a
p269
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00403640\nMOV RDI,R14\nCALL 0x00403760\nCMP EAX,0x27\nJNZ 0x0040373a\nMOV R15D,0x608be0\nMOV EBX,0x7a120\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,R14\nCALL 0x00403760\nCMP EAX,0x27\nJZ 0x0040371c\nMOV byte ptr [R15],AL\nLEA EBP,[RBX + -0x1]\nCMP EAX,0x5c\nJNZ 0x004036f0\nMOV RDI,R14\nCALL 0x00403760\nCMP EAX,0xa\nJNZ 0x00403700\nMOV EBP,EBX\nJMP 0x00403708\nINC R15\nJMP 0x0040370a\nMOV byte ptr [R15 + 0x1],AL\nADD R15,0x2\nDEC EBP\nTEST EBP,EBP\nMOV EBX,EBP\nJNS 0x004036c0\nMOV EDI,0x4060f5\nXOR EAX,EAX\nCALL 0x00401a80\nMOV byte ptr [R15],0x0\nMOV EDI,0x608be0\nCALL 0x00401510\nTEST RAX,RAX\nJZ 0x00403746\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x4060cc\nXOR EAX,EAX\nCALL 0x00401a80\nMOV EDI,0x4060b5\nXOR EAX,EAX\nCALL 0x00401a80\n'
p270
S'55\n41 57\n41 56\n53\n50\n49 89 fe\ne8 a1 ff ff ff\n4c 89 f7\ne8 b9 00 00 00\n83 f8 27\n0f 85 8a 00 00 00\n41 bf e0 8b 60 00\nbb 20 a1 07 00\n0f 1f 44 00 00\n4c 89 f7\ne8 98 00 00 00\n83 f8 27\n74 4f\n41 88 07\n8d 6b ff\n83 f8 5c\n75 18\n4c 89 f7\ne8 80 00 00 00\n83 f8 0a\n75 1b\n89 dd\neb 1f\n49 ff c7\neb 15\n41 88 47 01\n49 83 c7 02\nff cd\n85 ed\n89 eb\n79 b0\nbf f5 60 40 00\n31 c0\ne8 64 e3 ff ff\n41 c6 07 00\nbf e0 8b 60 00\ne8 e6 dd ff ff\n48 85 c0\n74 17\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\nbf cc 60 40 00\n31 c0\ne8 3a e3 ff ff\nbf b5 60 40 00\n31 c0\ne8 2e e3 ff ff\n'
p271
S'.text:0000000000403690\n.text:0000000000403691\n.text:0000000000403693\n.text:0000000000403695\n.text:0000000000403696\n.text:0000000000403697\n.text:000000000040369a\n.text:000000000040369f\n.text:00000000004036a2\n.text:00000000004036a7\n.text:00000000004036aa\n.text:00000000004036b0\n.text:00000000004036b6\n.text:00000000004036bb\n.text:00000000004036c0\n.text:00000000004036c3\n.text:00000000004036c8\n.text:00000000004036cb\n.text:00000000004036cd\n.text:00000000004036d0\n.text:00000000004036d3\n.text:00000000004036d6\n.text:00000000004036d8\n.text:00000000004036db\n.text:00000000004036e0\n.text:00000000004036e3\n.text:00000000004036e5\n.text:00000000004036e7\n.text:00000000004036f0\n.text:00000000004036f3\n.text:0000000000403700\n.text:0000000000403704\n.text:0000000000403708\n.text:000000000040370a\n.text:000000000040370c\n.text:000000000040370e\n.text:0000000000403710\n.text:0000000000403715\n.text:0000000000403717\n.text:000000000040371c\n.text:0000000000403720\n.text:0000000000403725\n.text:000000000040372a\n.text:000000000040372d\n.text:000000000040372f\n.text:0000000000403733\n.text:0000000000403734\n.text:0000000000403736\n.text:0000000000403738\n.text:0000000000403739\n.text:000000000040373a\n.text:000000000040373f\n.text:0000000000403741\n.text:0000000000403746\n.text:000000000040374b\n.text:000000000040374d\n'
p272
tp273
sS'Format_Icons'
p274
(S'\n__stdcall Format_Icons(ulong * icon)\n'
p275
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000achar * Format_Icons(ulong *icon)\u000a\u000a{\u000a  ulong *puVar1;\u000a  uint uVar2;\u000a  ulong uVar3;\u000a  ulong uVar4;\u000a  char palette [5] [4];\u000a  char " .\u005c'`,^:\u005c";~-_+<>i!lI?/\u005c\u005c|()1{}[]rcvunxzjftLCJUYXZO0Qoahkbdpqwm*WMB8&%$#@" [71];\u000a  int iVar5;\u000a  size_t sVar6;\u000a  char *pcVar7;\u000a  ulong uVar8;\u000a  long lVar9;\u000a  ulong uVar10;\u000a  int in_ESI;\u000a  ulong uVar11;\u000a  undefined2 *__dest;\u000a  undefined8 *puVar12;\u000a  char *__ptr;\u000a  double dVar13;\u000a  \u000a  if ((ulong)(long)in_ESI >> 3 == 0) {\u000a    pcVar7 = (char *)0x0;\u000a  }\u000a  else {\u000a    puVar1 = (ulong *)((long)icon + ((long)in_ESI & 0xfffffffffffffff8U));\u000a    __dest = (undefined2 *)0x0;\u000a    lVar9 = 0;\u000a    __ptr = (char *)0x0;\u000a    do {\u000a      uVar3 = *icon;\u000a      uVar4 = icon[1];\u000a      lVar9 = ((lVar9 << 0x20) + 0x5000000000 >> 0x20) + (uVar3 * 4 + 8) * uVar4;\u000a      pcVar7 = (char *)realloc(__ptr,(long)(int)lVar9);\u000a      if (pcVar7 == (char *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        Fatal_Error("Out of memory!");\u000a      }\u000a      icon = icon + 2;\u000a      if ((ulong)((long)((long)puVar1 - (long)icon) >> 3) < uVar4 * uVar3) {\u000a        return pcVar7;\u000a      }\u000a      iVar5 = sprintf(pcVar7 + (long)((int)__dest - (int)__ptr),"\u005ctIcon (%lu x %lu):\u005cn",uVar3,uVar4)\u000a      ;\u000a      puVar12 = (undefined8 *)(pcVar7 + (long)((int)__dest - (int)__ptr) + (long)iVar5);\u000a      if ((uVar3 < 0x91) && (uVar4 < 0x91)) {\u000a        if (uVar4 != 0) {\u000a          uVar8 = 0;\u000a          do {\u000a            __dest = (undefined2 *)((long)puVar12 + 1);\u000a            *(undefined2 *)puVar12 = 9;\u000a            if (uVar3 != 0) {\u000a              uVar11 = 0;\u000a              do {\u000a                uVar2 = *(uint *)icon;\u000a                dVar13 = (DAT_00405538 -\u000a                         (((double)(uVar2 & 0xff) / DAT_00405518) * _DAT_00405530 +\u000a                         ((double)(uint)(byte)((ulong)uVar2 >> 8) / DAT_00405518) * _DAT_00405528 +\u000a                         ((double)(uVar2 >> 0x10 & 0xff) / DAT_00405518) * _DAT_00405520)) *\u000a                         ((double)(uVar2 >> 0x18) / DAT_00405518);\u000a                uVar10 = (long)dVar13;\u000a                if (_DAT_00405540 <= dVar13) {\u000a                  uVar10 = (long)(dVar13 - _DAT_00405540) ^ 0x8000000000000000;\u000a                }\u000a                iVar5 = is_utf8_locale();\u000a                if (iVar5 == 0) {\u000a                  *(char *)__dest =\u000a                       " .\u005c'`,^:\u005c";~-_+<>i!lI?/\u005c\u005c|()1{}[]rcvunxzjftLCJUYXZO0Qoahkbdpqwm*WMB8&%$#@"\u000a                       [(long)(int)((uVar10 * 0x45 >> 3) / 0x7d)];\u000a                  __dest = (undefined2 *)((long)__dest + 1);\u000a                }\u000a                else {\u000a                  sVar6 = strlen(" " + (long)(int)(((uVar10 << 2) >> 3) / 0x7d) * 4);\u000a                  memcpy(__dest," " + (long)(int)(((uVar10 << 2) >> 3) / 0x7d) * 4,sVar6 + 1);\u000a                  __dest = (undefined2 *)((long)__dest + (long)(int)sVar6);\u000a                }\u000a                icon = icon + 1;\u000a                uVar11 = uVar11 + 1;\u000a              } while (uVar11 < uVar3);\u000a            }\u000a            *__dest = 10;\u000a            puVar12 = (undefined8 *)((long)__dest + 1);\u000a            uVar8 = uVar8 + 1;\u000a          } while (uVar8 < uVar4);\u000a        }\u000a        *(undefined2 *)puVar12 = 10;\u000a        __dest = (undefined2 *)((long)puVar12 + 1);\u000a      }\u000a      else {\u000a        *(undefined8 *)((long)puVar12 + 5) = 0x296e776f687320;\u000a        *puVar12 = 0x687320746f6e2809;\u000a        __dest = (undefined2 *)((long)puVar12 + 0xc);\u000a        icon = icon + uVar4 * uVar3;\u000a      }\u000a      __ptr = pcVar7;\u000a    } while (icon < puVar1);\u000a  }\u000a  return pcVar7;\u000a}\u000a\u000a
p276
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDI\nMOVSXD RAX,ESI\nSHR RAX,0x3\nJZ 0x004047ef\nLEA RBP,[RBX + RAX*0x8]\nXOR R15D,R15D\nXOR R14D,R14D\nXOR EDX,EDX\nMOV qword ptr [RSP],RBP\nNOP\nMOV R12,qword ptr [RBX]\nMOV R13,qword ptr [RBX + 0x8]\nLEA RAX,[0x8 + R12*0x4]\nIMUL RAX,R13\nSHL RDX,0x20\nMOV RCX,0x5000000000\nADD RDX,RCX\nSAR RDX,0x20\nADD RDX,RAX\nMOV qword ptr [RSP + 0x18],RDX\nMOVSXD RSI,EDX\nMOV RDI,R15\nCALL 0x00401670\nTEST RAX,RAX\nJZ 0x00404800\nADD RBX,0x10\nMOV RCX,RBP\nSUB RCX,RBX\nSAR RCX,0x3\nMOV RBP,R13\nIMUL RBP,R12\nCMP RCX,RBP\nJC 0x004047f1\nSUB R14D,R15D\nMOVSXD RDX,R14D\nMOV qword ptr [RSP + 0x10],RAX\nMOV R15,RAX\nADD R15,RDX\nMOV ESI,0x406816\nXOR EAX,EAX\nMOV RDI,R15\nMOV RDX,R12\nMOV RCX,R13\nMOV qword ptr [RSP + 0x8],R13\nCALL 0x00401720\nMOV RCX,qword ptr [RSP + 0x8]\nMOVSXD R14,EAX\nADD R14,R15\nCMP R12,0x90\nJA 0x004047b0\nCMP RCX,0x90\nJA 0x004047b0\nTEST RCX,RCX\nJZ 0x00404798\nXOR ECX,ECX\nMOV RAX,R14\nMOV qword ptr [RSP + 0x20],RCX\nINC R14\nTEST R12,R12\nMOV word ptr [RAX],0x9\nJZ 0x00404779\nXOR R13D,R13D\nNOP dword ptr [RAX]\nMOV EAX,dword ptr [RBX]\nMOV ECX,EAX\nMOVZX EDX,AH\nMOVZX ESI,AL\nSHR EAX,0x18\nXORPS XMM0,XMM0\nCVTSI2SD XMM0,EAX\nSHR ECX,0x10\nMOVSD XMM1,qword ptr [0x00405518]\nMOVAPD XMM3,XMM1\nDIVSD XMM0,XMM3\nMOVZX EAX,CL\nXORPS XMM1,XMM1\nCVTSI2SD XMM1,EAX\nDIVSD XMM1,XMM3\nMULSD XMM1,qword ptr [0x00405520]\nXORPS XMM2,XMM2\nCVTSI2SD XMM2,EDX\nDIVSD XMM2,XMM3\nMULSD XMM2,qword ptr [0x00405528]\nADDSD XMM2,XMM1\nXORPS XMM1,XMM1\nCVTSI2SD XMM1,ESI\nDIVSD XMM1,XMM3\nMULSD XMM1,qword ptr [0x00405530]\nADDSD XMM1,XMM2\nMOVSD XMM2,qword ptr [0x00405538]\nSUBSD XMM2,XMM1\nMULSD XMM2,XMM0\nMOVAPD XMM0,XMM2\nMOVSD XMM1,qword ptr [0x00405540]\nSUBSD XMM0,XMM1\nCVTTSD2SI RAX,XMM0\nMOV RCX,-0x8000000000000000\nXOR RAX,RCX\nCVTTSD2SI RBP,XMM2\nUCOMISD XMM2,XMM1\nCMOVNC RBP,RAX\nCALL 0x00404a90\nTEST EAX,EAX\nJZ 0x00404740\nSHL RBP,0x2\nSHR RBP,0x3\nMOV RAX,RBP\nMOV RCX,0x20c49ba5e353f7cf\nMUL RCX\nSHR RDX,0x4\nMOVSXD RAX,EDX\nLEA RBP,[0x4054d0 + RAX*0x4]\nMOV RDI,RBP\nCALL 0x00401460\nMOV R15,RAX\nLEA RDX,[R15 + 0x1]\nMOV RDI,R14\nMOV RSI,RBP\nCALL 0x00401570\nMOVSXD RAX,R15D\nADD R14,RAX\nJMP 0x00404769\nIMUL RAX,RBP,0x45\nSHR RAX,0x3\nMOV RCX,0x20c49ba5e353f7cf\nMUL RCX\nSHR RDX,0x4\nMOVSXD RAX,EDX\nMOVZX EAX,byte ptr [0x4068a0 + RAX]\nMOV byte ptr [R14],AL\nINC R14\nADD RBX,0x8\nINC R13\nCMP R13,R12\nJC 0x00404640\nMOV word ptr [R14],0xa\nINC R14\nMOV RCX,qword ptr [RSP + 0x20]\nINC RCX\nCMP RCX,qword ptr [RSP + 0x8]\nMOV RAX,R14\nJC 0x00404620\nMOV word ptr [R14],0xa\nINC R14\nJMP 0x004047d3\nMOV RAX,0x296e776f687320\nMOV qword ptr [R14 + 0x5],RAX\nMOV RAX,0x687320746f6e2809\nMOV qword ptr [R14],RAX\nADD R14,0xc\nLEA RBX,[RBX + RBP*0x8]\nMOV RBP,qword ptr [RSP]\nCMP RBX,RBP\nMOV RAX,qword ptr [RSP + 0x10]\nMOV R15,RAX\nMOV RDX,qword ptr [RSP + 0x18]\nJC 0x00404560\nJMP 0x004047f1\nXOR EAX,EAX\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x4060b5\nXOR EAX,EAX\nCALL 0x00401a80\n'
p277
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 fb\n48 63 c6\n48 c1 e8 03\n0f 84 a1 02 00 00\n48 8d 2c c3\n45 31 ff\n45 31 f6\n31 d2\n48 89 2c 24\n66 90\n4c 8b 23\n4c 8b 6b 08\n4a 8d 04 a5 08 00 00 00\n49 0f af c5\n48 c1 e2 20\n48 b9 00 00 00 00 50 00 00 00\n48 01 ca\n48 c1 fa 20\n48 01 c2\n48 89 54 24 18\n48 63 f2\n4c 89 ff\ne8 d5 d0 ff ff\n48 85 c0\n0f 84 5c 02 00 00\n48 83 c3 10\n48 89 e9\n48 29 d9\n48 c1 f9 03\n4c 89 ed\n49 0f af ec\n48 39 e9\n0f 82 2f 02 00 00\n45 29 fe\n49 63 d6\n48 89 44 24 10\n49 89 c7\n49 01 d7\nbe 16 68 40 00\n31 c0\n4c 89 ff\n4c 89 e2\n4c 89 e9\n4c 89 6c 24 08\ne8 33 d1 ff ff\n48 8b 4c 24 08\n4c 63 f0\n4d 01 fe\n49 81 fc 90 00 00 00\n0f 87 ab 01 00 00\n48 81 f9 90 00 00 00\n0f 87 9e 01 00 00\n48 85 c9\n0f 84 7d 01 00 00\n31 c9\n4c 89 f0\n48 89 4c 24 20\n49 ff c6\n4d 85 e4\n66 c7 00 09 00\n0f 84 43 01 00 00\n45 31 ed\n0f 1f 80 00 00 00 00\n8b 03\n89 c1\n0f b6 d4\n0f b6 f0\nc1 e8 18\n0f 57 c0\nf2 0f 2a c0\nc1 e9 10\nf2 0f 10 0d b9 0e 00 00\n66 0f 28 d9\nf2 0f 5e c3\n0f b6 c1\n0f 57 c9\nf2 0f 2a c8\nf2 0f 5e cb\nf2 0f 59 0d a3 0e 00 00\n0f 57 d2\nf2 0f 2a d2\nf2 0f 5e d3\nf2 0f 59 15 98 0e 00 00\nf2 0f 58 d1\n0f 57 c9\nf2 0f 2a ce\nf2 0f 5e cb\nf2 0f 59 0d 89 0e 00 00\nf2 0f 58 ca\nf2 0f 10 15 85 0e 00 00\nf2 0f 5c d1\nf2 0f 59 d0\n66 0f 28 c2\nf2 0f 10 0d 79 0e 00 00\nf2 0f 5c c1\nf2 48 0f 2c c0\n48 b9 00 00 00 00 00 00 00 80\n48 31 c8\nf2 48 0f 2c ea\n66 0f 2e d1\n48 0f 43 e8\ne8 a1 03 00 00\n85 c0\n74 4d\n48 c1 e5 02\n48 c1 ed 03\n48 89 e8\n48 b9 cf f7 53 e3 a5 9b c4 20\n48 f7 e1\n48 c1 ea 04\n48 63 c2\n48 8d 2c 85 d0 54 40 00\n48 89 ef\ne8 3e cd ff ff\n49 89 c7\n49 8d 57 01\n4c 89 f7\n48 89 ee\ne8 3c ce ff ff\n49 63 c7\n49 01 c6\neb 2d\n48 6b c5 45\n48 c1 e8 03\n48 b9 cf f7 53 e3 a5 9b c4 20\n48 f7 e1\n48 c1 ea 04\n48 63 c2\n0f b6 80 a0 68 40 00\n41 88 06\n49 ff c6\n48 83 c3 08\n49 ff c5\n4d 39 e5\n0f 82 c7 fe ff ff\n66 41 c7 06 0a 00\n49 ff c6\n48 8b 4c 24 20\n48 ff c1\n48 3b 4c 24 08\n4c 89 f0\n0f 82 88 fe ff ff\n66 41 c7 06 0a 00\n49 ff c6\neb 30\n48 b8 20 73 68 6f 77 6e 29 00\n49 89 46 05\n48 b8 09 28 6e 6f 74 20 73 68\n49 89 06\n49 83 c6 0c\n48 8d 1c eb\n48 8b 2c 24\n48 39 eb\n48 8b 44 24 10\n49 89 c7\n48 8b 54 24 18\n0f 82 73 fd ff ff\neb 02\n31 c0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf b5 60 40 00\n31 c0\ne8 74 d2 ff ff\n'
p278
S'.text:0000000000404530\n.text:0000000000404531\n.text:0000000000404533\n.text:0000000000404535\n.text:0000000000404537\n.text:0000000000404539\n.text:000000000040453a\n.text:000000000040453e\n.text:0000000000404541\n.text:0000000000404544\n.text:0000000000404548\n.text:000000000040454e\n.text:0000000000404552\n.text:0000000000404555\n.text:0000000000404558\n.text:000000000040455a\n.text:000000000040455e\n.text:0000000000404560\n.text:0000000000404563\n.text:0000000000404567\n.text:000000000040456f\n.text:0000000000404573\n.text:0000000000404577\n.text:0000000000404581\n.text:0000000000404584\n.text:0000000000404588\n.text:000000000040458b\n.text:0000000000404590\n.text:0000000000404593\n.text:0000000000404596\n.text:000000000040459b\n.text:000000000040459e\n.text:00000000004045a4\n.text:00000000004045a8\n.text:00000000004045ab\n.text:00000000004045ae\n.text:00000000004045b2\n.text:00000000004045b5\n.text:00000000004045b9\n.text:00000000004045bc\n.text:00000000004045c2\n.text:00000000004045c5\n.text:00000000004045c8\n.text:00000000004045cd\n.text:00000000004045d0\n.text:00000000004045d3\n.text:00000000004045d8\n.text:00000000004045da\n.text:00000000004045dd\n.text:00000000004045e0\n.text:00000000004045e3\n.text:00000000004045e8\n.text:00000000004045ed\n.text:00000000004045f2\n.text:00000000004045f5\n.text:00000000004045f8\n.text:00000000004045ff\n.text:0000000000404605\n.text:000000000040460c\n.text:0000000000404612\n.text:0000000000404615\n.text:000000000040461b\n.text:000000000040461d\n.text:0000000000404620\n.text:0000000000404625\n.text:0000000000404628\n.text:000000000040462b\n.text:0000000000404630\n.text:0000000000404636\n.text:0000000000404639\n.text:0000000000404640\n.text:0000000000404642\n.text:0000000000404644\n.text:0000000000404647\n.text:000000000040464a\n.text:000000000040464d\n.text:0000000000404650\n.text:0000000000404654\n.text:0000000000404657\n.text:000000000040465f\n.text:0000000000404663\n.text:0000000000404667\n.text:000000000040466a\n.text:000000000040466d\n.text:0000000000404671\n.text:0000000000404675\n.text:000000000040467d\n.text:0000000000404680\n.text:0000000000404684\n.text:0000000000404688\n.text:0000000000404690\n.text:0000000000404694\n.text:0000000000404697\n.text:000000000040469b\n.text:000000000040469f\n.text:00000000004046a7\n.text:00000000004046ab\n.text:00000000004046b3\n.text:00000000004046b7\n.text:00000000004046bb\n.text:00000000004046bf\n.text:00000000004046c7\n.text:00000000004046cb\n.text:00000000004046d0\n.text:00000000004046da\n.text:00000000004046dd\n.text:00000000004046e2\n.text:00000000004046e6\n.text:00000000004046ea\n.text:00000000004046ef\n.text:00000000004046f1\n.text:00000000004046f3\n.text:00000000004046f7\n.text:00000000004046fb\n.text:00000000004046fe\n.text:0000000000404708\n.text:000000000040470b\n.text:000000000040470f\n.text:0000000000404712\n.text:000000000040471a\n.text:000000000040471d\n.text:0000000000404722\n.text:0000000000404725\n.text:0000000000404729\n.text:000000000040472c\n.text:000000000040472f\n.text:0000000000404734\n.text:0000000000404737\n.text:000000000040473a\n.text:0000000000404740\n.text:0000000000404744\n.text:0000000000404748\n.text:0000000000404752\n.text:0000000000404755\n.text:0000000000404759\n.text:000000000040475c\n.text:0000000000404763\n.text:0000000000404766\n.text:0000000000404769\n.text:000000000040476d\n.text:0000000000404770\n.text:0000000000404773\n.text:0000000000404779\n.text:000000000040477f\n.text:0000000000404782\n.text:0000000000404787\n.text:000000000040478a\n.text:000000000040478f\n.text:0000000000404792\n.text:0000000000404798\n.text:000000000040479e\n.text:00000000004047a1\n.text:00000000004047b0\n.text:00000000004047ba\n.text:00000000004047be\n.text:00000000004047c8\n.text:00000000004047cb\n.text:00000000004047cf\n.text:00000000004047d3\n.text:00000000004047d7\n.text:00000000004047da\n.text:00000000004047df\n.text:00000000004047e2\n.text:00000000004047e7\n.text:00000000004047ed\n.text:00000000004047ef\n.text:00000000004047f1\n.text:00000000004047f5\n.text:00000000004047f6\n.text:00000000004047f8\n.text:00000000004047fa\n.text:00000000004047fc\n.text:00000000004047fe\n.text:00000000004047ff\n.text:0000000000404800\n.text:0000000000404805\n.text:0000000000404807\n'
p279
tp280
sS'XAllowEvents'
p281
(S'\n__stdcall XAllowEvents()\n'
p282
V\u000avoid XAllowEvents(void)\u000a\u000a{\u000a  (*(code *)PTR_XAllowEvents_00608040)();\u000a  return;\u000a}\u000a\u000a
p283
S'JMP qword ptr [0x00608040]\n'
p284
S'ff 25 3a 6c 20 00\n'
p285
S'.plt:0000000000401400\n'
p286
tp287
sS'free'
p288
(S'\n__stdcall free(void * __ptr)\n'
p289
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_00608020)();\u000a  return;\u000a}\u000a\u000a
p290
S'JMP qword ptr [0x00608020]\n'
p291
S'ff 25 5a 6c 20 00\n'
p292
S'.plt:00000000004013c0\n'
p293
tp294
sS'Format_Unsigned'
p295
(S'\n__stdcall Format_Unsigned()\n'
p296
V\u000achar * Format_Unsigned(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined4 extraout_var;\u000a  \u000a  iVar1 = snprintf(_formatting_buffer2,0x15,"%lu");\u000a  return (char *)CONCAT44(extraout_var,iVar1);\u000a}\u000a\u000a
p297
S'MOV RCX,RDI\nMOV EDI,0x6fd450\nMOV ESI,0x15\nMOV EDX,0x404ecb\nXOR EAX,EAX\nJMP 0x004014a0\n'
p298
S'48 89 f9\nbf 50 d4 6f 00\nbe 15 00 00 00\nba cb 4e 40 00\n31 c0\ne9 57 d0 ff ff\n'
p299
S'.text:0000000000404430\n.text:0000000000404433\n.text:0000000000404438\n.text:000000000040443d\n.text:0000000000404442\n.text:0000000000404444\n'
p300
tp301
sS'getenv'
p302
(S'\n__stdcall getenv(char * __name)\n'
p303
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_00608018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p304
S'JMP qword ptr [0x00608018]\n'
p305
S'ff 25 62 6c 20 00\n'
p306
S'.plt:00000000004013b0\n'
p307
tp308
sS'atoi'
p309
(S'\n__stdcall atoi(char * __nptr)\n'
p310
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint atoi(char *__nptr)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_atoi_006081c0)();\u000a  return iVar1;\u000a}\u000a\u000a
p311
S'JMP qword ptr [0x006081c0]\n'
p312
S'ff 25 ba 6a 20 00\n'
p313
S'.plt:0000000000401700\n'
p314
tp315
sS'Get_Property_Data_And_Type'
p316
(S'\n__stdcall Get_Property_Data_And_Type(Atom atom, long * length, Atom * type, int * size)\n'
p317
V\u000achar * Get_Property_Data_And_Type(Atom atom,long *length,Atom *type,int *size)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  if (target_win != 0xffffffffffffffff) {\u000a    pcVar1 = Get_Window_Property_Data_And_Type(atom,length,type,size);\u000a    return pcVar1;\u000a  }\u000a  pcVar1 = Get_Font_Property_Data_And_Type(atom,length,type,size);\u000a  return pcVar1;\u000a}\u000a\u000a
p318
S'CMP qword ptr [0x00608bb0],-0x1\nJZ 0x004039ff\nJMP 0x00403c90\nJMP 0x00403c10\n'
p319
S'48 83 3d b8 51 20 00 ff\n74 05\ne9 91 02 00 00\ne9 0c 02 00 00\n'
p320
S'.text:00000000004039f0\n.text:00000000004039f8\n.text:00000000004039fa\n.text:00000000004039ff\n'
p321
tp322
sS'fopen'
p323
(S'\n__stdcall fopen(char * __filename, char * __modes)\n'
p324
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fopen(char *__filename,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fopen_00608198)();\u000a  return pFVar1;\u000a}\u000a\u000a
p325
S'JMP qword ptr [0x00608198]\n'
p326
S'ff 25 e2 6a 20 00\n'
p327
S'.plt:00000000004016b0\n'
p328
tp329
sS'malloc'
p330
(S'\n__stdcall malloc(size_t __size)\n'
p331
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_00608120)();\u000a  return pvVar1;\u000a}\u000a\u000a
p332
S'JMP qword ptr [0x00608120]\n'
p333
S'ff 25 5a 6b 20 00\n'
p334
S'.plt:00000000004015c0\n'
p335
tp336
sS'Find_Roots'
p337
(S'\n__stdcall Find_Roots(Display * dpy, Window root, uint * num)\n'
p338
V\u000aulong * Find_Roots(Display *dpy,Window root,uint *num)\u000a\u000a{\u000a  int iVar1;\u000a  long lVar2;\u000a  ulong *puVar3;\u000a  int format_ret;\u000a  ulong num_ret;\u000a  ulong bytes_after;\u000a  int local_54;\u000a  ulong *local_50;\u000a  long local_48;\u000a  uint local_40 [2];\u000a  undefined local_38 [8];\u000a  \u000a  *num = 0;\u000a  lVar2 = XInternAtom(dpy,"_NET_VIRTUAL_ROOTS",0);\u000a  puVar3 = (ulong *)0x0;\u000a  if (lVar2 != 0) {\u000a    local_48 = 0;\u000a    local_50 = (ulong *)0x0;\u000a    iVar1 = XGetWindowProperty(dpy,root,lVar2,0,0x7fffffff,0,0x21,&local_48,&local_54,local_40,\u000a                               local_38,&local_50);\u000a    puVar3 = (ulong *)0x0;\u000a    if (iVar1 == 0) {\u000a      if (((local_50 == (ulong *)0x0) || (local_48 != 0x21)) || (local_54 != 0x20)) {\u000a        if (local_50 != (ulong *)0x0) {\u000a          XFree(local_50);\u000a        }\u000a        puVar3 = (ulong *)0x0;\u000a      }\u000a      else {\u000a        *num = local_40[0];\u000a        puVar3 = local_50;\u000a      }\u000a    }\u000a  }\u000a  return puVar3;\u000a}\u000a\u000a
p339
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R14,RDX\nMOV R15,RSI\nMOV RBX,RDI\nMOV dword ptr [R14],0x0\nXOR R12D,R12D\nMOV ESI,0x404f18\nXOR EDX,EDX\nCALL 0x004015f0\nTEST RAX,RAX\nJZ 0x00402187\nMOV qword ptr [RSP + 0x10],0x0\nMOV qword ptr [RSP + 0x8],0x0\nLEA R10,[RSP + 0x8]\nLEA R11,[RSP + 0x20]\nLEA R13,[RSP + 0x18]\nLEA RBP,[RSP + 0x4]\nXOR R12D,R12D\nMOV ECX,0x0\nMOV R8D,0x7fffffff\nMOV R9D,0x0\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,RAX\nPUSH R10\nPUSH R11\nPUSH R13\nPUSH RBP\nLEA RAX,[RSP + 0x30]\nPUSH RAX\nPUSH 0x21\nCALL 0x00401740\nADD RSP,0x30\nTEST EAX,EAX\nJNZ 0x00402187\nMOV R12,qword ptr [RSP + 0x8]\nTEST R12,R12\nJZ 0x00402177\nCMP qword ptr [RSP + 0x10],0x21\nJNZ 0x00402177\nCMP dword ptr [RSP + 0x4],0x20\nJNZ 0x00402177\nMOV EAX,dword ptr [RSP + 0x18]\nMOV dword ptr [R14],EAX\nJMP 0x00402187\nTEST R12,R12\nJZ 0x00402184\nMOV RDI,R12\nCALL 0x00401480\nXOR R12D,R12D\nMOV RAX,R12\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p340
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 d6\n49 89 f7\n48 89 fb\n41 c7 06 00 00 00 00\n45 31 e4\nbe 18 4f 40 00\n31 d2\ne8 03 f5 ff ff\n48 85 c0\n0f 84 91 00 00 00\n48 c7 44 24 10 00 00 00 00\n48 c7 44 24 08 00 00 00 00\n4c 8d 54 24 08\n4c 8d 5c 24 20\n4c 8d 6c 24 18\n48 8d 6c 24 04\n45 31 e4\nb9 00 00 00 00\n41 b8 ff ff ff 7f\n41 b9 00 00 00 00\n48 89 df\n4c 89 fe\n48 89 c2\n41 52\n41 53\n41 55\n55\n48 8d 44 24 30\n50\n6a 21\ne8 f3 f5 ff ff\n48 83 c4 30\n85 c0\n75 32\n4c 8b 64 24 08\n4d 85 e4\n74 18\n48 83 7c 24 10 21\n75 10\n83 7c 24 04 20\n75 09\n8b 44 24 18\n41 89 06\neb 10\n4d 85 e4\n74 08\n4c 89 e7\ne8 fc f2 ff ff\n45 31 e4\n4c 89 e0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p341
S'.text:00000000004020c0\n.text:00000000004020c1\n.text:00000000004020c3\n.text:00000000004020c5\n.text:00000000004020c7\n.text:00000000004020c9\n.text:00000000004020ca\n.text:00000000004020ce\n.text:00000000004020d1\n.text:00000000004020d4\n.text:00000000004020d7\n.text:00000000004020de\n.text:00000000004020e1\n.text:00000000004020e6\n.text:00000000004020e8\n.text:00000000004020ed\n.text:00000000004020f0\n.text:00000000004020f6\n.text:00000000004020ff\n.text:0000000000402108\n.text:000000000040210d\n.text:0000000000402112\n.text:0000000000402117\n.text:000000000040211c\n.text:000000000040211f\n.text:0000000000402124\n.text:000000000040212a\n.text:0000000000402130\n.text:0000000000402133\n.text:0000000000402136\n.text:0000000000402139\n.text:000000000040213b\n.text:000000000040213d\n.text:000000000040213f\n.text:0000000000402140\n.text:0000000000402145\n.text:0000000000402146\n.text:0000000000402148\n.text:000000000040214d\n.text:0000000000402151\n.text:0000000000402153\n.text:0000000000402155\n.text:000000000040215a\n.text:000000000040215d\n.text:000000000040215f\n.text:0000000000402165\n.text:0000000000402167\n.text:000000000040216c\n.text:000000000040216e\n.text:0000000000402172\n.text:0000000000402175\n.text:0000000000402177\n.text:000000000040217a\n.text:000000000040217c\n.text:000000000040217f\n.text:0000000000402184\n.text:0000000000402187\n.text:000000000040218a\n.text:000000000040218e\n.text:000000000040218f\n.text:0000000000402191\n.text:0000000000402193\n.text:0000000000402195\n.text:0000000000402197\n.text:0000000000402198\n'
p342
tp343
sS'XDefaultScreen'
p344
(S'\n__stdcall XDefaultScreen()\n'
p345
V\u000avoid XDefaultScreen(void)\u000a\u000a{\u000a  (*(code *)PTR_XDefaultScreen_006080b0)();\u000a  return;\u000a}\u000a\u000a
p346
S'JMP qword ptr [0x006080b0]\n'
p347
S'ff 25 ca 6b 20 00\n'
p348
S'.plt:00000000004014e0\n'
p349
tp350
sS'Open_Display'
p351
(S'\n__stdcall Open_Display(char * display_name)\n'
p352
V\u000aDisplay * Open_Display(char *display_name)\u000a\u000a{\u000a  char *pcVar1;\u000a  FILE *__stream;\u000a  Display *pDVar2;\u000a  undefined8 uVar3;\u000a  \u000a  pDVar2 = (Display *)XOpenDisplay();\u000a  __stream = stderr;\u000a  pcVar1 = program_name;\u000a  if (pDVar2 != (Display *)0x0) {\u000a    return pDVar2;\u000a  }\u000a  uVar3 = XDisplayName(display_name);\u000a  fprintf(__stream,"%s:  unable to open display \u005c'%s\u005c'\u005cn",pcVar1,uVar3);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(1);\u000a}\u000a\u000a
p353
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401540\nTEST RAX,RAX\nJZ 0x004019b8\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOV R14,qword ptr [0x00608b80]\nMOV R15,qword ptr [0x00608210]\nMOV RDI,RBX\nCALL 0x00401640\nMOV RCX,RAX\nMOV ESI,0x404e62\nXOR EAX,EAX\nMOV RDI,R14\nMOV RDX,R15\nCALL 0x00401550\nMOV EDI,0x1\nCALL 0x00401730\n'
p354
S'41 57\n41 56\n53\n48 89 fb\ne8 93 fb ff ff\n48 85 c0\n74 06\n5b\n41 5e\n41 5f\nc3\n4c 8b 35 c1 71 20 00\n4c 8b 3d 4a 68 20 00\n48 89 df\ne8 72 fc ff ff\n48 89 c1\nbe 62 4e 40 00\n31 c0\n4c 89 f7\n4c 89 fa\ne8 6d fb ff ff\nbf 01 00 00 00\ne8 43 fd ff ff\n'
p355
S'.text:00000000004019a0\n.text:00000000004019a2\n.text:00000000004019a4\n.text:00000000004019a5\n.text:00000000004019a8\n.text:00000000004019ad\n.text:00000000004019b0\n.text:00000000004019b2\n.text:00000000004019b3\n.text:00000000004019b5\n.text:00000000004019b7\n.text:00000000004019b8\n.text:00000000004019bf\n.text:00000000004019c6\n.text:00000000004019c9\n.text:00000000004019ce\n.text:00000000004019d1\n.text:00000000004019d6\n.text:00000000004019d8\n.text:00000000004019db\n.text:00000000004019de\n.text:00000000004019e3\n.text:00000000004019e8\n'
p356
tp357
sS'XChangeProperty'
p358
(S'\n__stdcall XChangeProperty()\n'
p359
V\u000avoid XChangeProperty(void)\u000a\u000a{\u000a  (*(code *)PTR_XChangeProperty_00608158)();\u000a  return;\u000a}\u000a\u000a
p360
S'JMP qword ptr [0x00608158]\n'
p361
S'ff 25 22 6b 20 00\n'
p362
S'.plt:0000000000401630\n'
p363
tp364
sS'Handle_Question_Mark'
p365
(S'\n__stdcall Handle_Question_Mark(char * dformat, thunk * thunks, char * format)\n'
p366
V\u000achar * Handle_Question_Mark(char *dformat,thunk *thunks,char *format)\u000a\u000a{\u000a  long in_RAX;\u000a  char *string;\u000a  long local_8;\u000a  \u000a  local_8 = in_RAX;\u000a  string = Scan_Exp(dformat,thunks,format,&local_8);\u000a  if (*string == '(') {\u000a    string = string + 1;\u000a    if (local_8 == 0) {\u000a      string = Skip_Past_Right_Paren(string);\u000a    }\u000a    return string;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  Fatal_Error("Bad conditional: \u005c'(\u005c' expected: %s.",string);\u000a}\u000a\u000a
p367
S'PUSH RAX\nMOV RCX,RSP\nCALL 0x00404ac0\nMOV RCX,RAX\nCMP byte ptr [RCX],0x28\nJNZ 0x00403fcb\nINC RCX\nCMP qword ptr [RSP],0x0\nJNZ 0x00403fc6\nMOV RDI,RCX\nCALL 0x00404b70\nMOV RCX,RAX\nMOV RAX,RCX\nPOP RCX\nRET\nMOV EDI,0x406839\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401a80\n'
p368
S'50\n48 89 e1\ne8 17 0b 00 00\n48 89 c1\n80 39 28\n75 1a\n48 ff c1\n48 83 3c 24 00\n75 0b\n48 89 cf\ne8 ad 0b 00 00\n48 89 c1\n48 89 c8\n59\nc3\nbf 39 68 40 00\n31 c0\n48 89 ce\ne8 a6 da ff ff\n'
p369
S'.text:0000000000403fa0\n.text:0000000000403fa1\n.text:0000000000403fa4\n.text:0000000000403fa9\n.text:0000000000403fac\n.text:0000000000403faf\n.text:0000000000403fb1\n.text:0000000000403fb4\n.text:0000000000403fb9\n.text:0000000000403fbb\n.text:0000000000403fbe\n.text:0000000000403fc3\n.text:0000000000403fc6\n.text:0000000000403fc9\n.text:0000000000403fca\n.text:0000000000403fcb\n.text:0000000000403fd0\n.text:0000000000403fd2\n.text:0000000000403fd5\n'
p370
tp371
sS'Handle_Dollar_sign'
p372
(S'\n__stdcall Handle_Dollar_sign(char * dformat, thunk * thunks, char * format)\n'
p373
V\u000achar * Handle_Dollar_sign(char *dformat,thunk *thunks,char *format)\u000a\u000a{\u000a  char *pcVar1;\u000a  char *pcVar2;\u000a  bool bVar3;\u000a  long local_30;\u000a  \u000a  pcVar1 = Scan_Long(dformat,&local_30);\u000a  if (*pcVar1 == '+') {\u000a    pcVar1 = pcVar1 + 1;\u000a    if (local_30 < (long)thunks->thunk_count) {\u000a      bVar3 = true;\u000a      do {\u000a        if (!bVar3) {\u000a          printf(", ");\u000a        }\u000a        pcVar2 = Format_Thunk_I(thunks,format);\u000a        bVar3 = false;\u000a        printf("%s",pcVar2);\u000a        local_30 = local_30 + 1;\u000a      } while (local_30 < (long)thunks->thunk_count);\u000a    }\u000a  }\u000a  else {\u000a    pcVar2 = Format_Thunk_I(thunks,format);\u000a    printf("%s",pcVar2);\u000a  }\u000a  return pcVar1;\u000a}\u000a\u000a
p374
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV R15,RDX\nMOV R12,RSI\nLEA RSI,[RSP + 0x8]\nCALL 0x004038c0\nMOV R14,RAX\nCMP byte ptr [R14],0x2b\nJNZ 0x00403f66\nINC R14\nMOVSXD RAX,dword ptr [R12]\nCMP qword ptr [RSP + 0x8],RAX\nJGE 0x00403f87\nMOV BPL,0x1\nMOV RBX,qword ptr [RSP + 0x8]\nNOP dword ptr [RAX + RAX*0x1]\nTEST BPL,0x1\nJNZ 0x00403f32\nMOV EDI,0x406716\nXOR EAX,EAX\nCALL 0x00401470\nMOV RDI,R12\nMOV RSI,R15\nMOV EDX,EBX\nCALL 0x00404020\nMOV RCX,RAX\nXOR EBP,EBP\nMOV EDI,0x406600\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401470\nINC RBX\nMOVSXD RAX,dword ptr [R12]\nCMP RBX,RAX\nJL 0x00403f20\nMOV qword ptr [RSP + 0x8],RBX\nJMP 0x00403f87\nMOV EDX,dword ptr [RSP + 0x8]\nMOV RDI,R12\nMOV RSI,R15\nCALL 0x00404020\nMOV RCX,RAX\nMOV EDI,0x406600\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401470\nMOV RAX,R14\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p375
S'55\n41 57\n41 56\n41 54\n53\n48 83 ec 10\n49 89 d7\n49 89 f4\n48 8d 74 24 08\ne8 c4 f9 ff ff\n49 89 c6\n41 80 3e 2b\n75 61\n49 ff c6\n49 63 04 24\n48 39 44 24 08\n7d 74\n40 b5 01\n48 8b 5c 24 08\n0f 1f 44 00 00\n40 f6 c5 01\n75 0c\nbf 16 67 40 00\n31 c0\ne8 3e d5 ff ff\n4c 89 e7\n4c 89 fe\n89 da\ne8 e1 00 00 00\n48 89 c1\n31 ed\nbf 00 66 40 00\n31 c0\n48 89 ce\ne8 1d d5 ff ff\n48 ff c3\n49 63 04 24\n48 39 c3\n7c c1\n48 89 5c 24 08\neb 21\n8b 54 24 08\n4c 89 e7\n4c 89 fe\ne8 ab 00 00 00\n48 89 c1\nbf 00 66 40 00\n31 c0\n48 89 ce\ne8 e9 d4 ff ff\n4c 89 f0\n48 83 c4 10\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p376
S'.text:0000000000403ee0\n.text:0000000000403ee1\n.text:0000000000403ee3\n.text:0000000000403ee5\n.text:0000000000403ee7\n.text:0000000000403ee8\n.text:0000000000403eec\n.text:0000000000403eef\n.text:0000000000403ef2\n.text:0000000000403ef7\n.text:0000000000403efc\n.text:0000000000403eff\n.text:0000000000403f03\n.text:0000000000403f05\n.text:0000000000403f08\n.text:0000000000403f0c\n.text:0000000000403f11\n.text:0000000000403f13\n.text:0000000000403f16\n.text:0000000000403f1b\n.text:0000000000403f20\n.text:0000000000403f24\n.text:0000000000403f26\n.text:0000000000403f2b\n.text:0000000000403f2d\n.text:0000000000403f32\n.text:0000000000403f35\n.text:0000000000403f38\n.text:0000000000403f3a\n.text:0000000000403f3f\n.text:0000000000403f42\n.text:0000000000403f44\n.text:0000000000403f49\n.text:0000000000403f4b\n.text:0000000000403f4e\n.text:0000000000403f53\n.text:0000000000403f56\n.text:0000000000403f5a\n.text:0000000000403f5d\n.text:0000000000403f5f\n.text:0000000000403f64\n.text:0000000000403f66\n.text:0000000000403f6a\n.text:0000000000403f6d\n.text:0000000000403f70\n.text:0000000000403f75\n.text:0000000000403f78\n.text:0000000000403f7d\n.text:0000000000403f7f\n.text:0000000000403f82\n.text:0000000000403f87\n.text:0000000000403f8a\n.text:0000000000403f8e\n.text:0000000000403f8f\n.text:0000000000403f91\n.text:0000000000403f93\n.text:0000000000403f95\n.text:0000000000403f96\n'
p377
tp378
sS'Parse_Format_Mapping'
p379
(S'\n__stdcall Parse_Format_Mapping(int * argc, char * * * argv)\n'
p380
V\u000avoid Parse_Format_Mapping(int *argc,char ***argv)\u000a\u000a{\u000a  char *name;\u000a  char **ppcVar1;\u000a  char *string;\u000a  int iVar2;\u000a  Atom atom;\u000a  char *dformat;\u000a  int iVar3;\u000a  \u000a  *argv = *argv + 1;\u000a  *argc = *argc + -1;\u000a  if (*argc == 0) {\u000aLAB_00402d34:\u000a                    /* WARNING: Subroutine does not return */\u000a    usage();\u000a  }\u000a  name = **argv;\u000a  *argv = *argv + 1;\u000a  iVar3 = *argc + -1;\u000a  *argc = iVar3;\u000a  if (iVar3 == 0) goto LAB_00402d34;\u000a  ppcVar1 = *argv;\u000a  string = *ppcVar1;\u000a  iVar2 = Is_A_Format(string);\u000a  if (iVar2 == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    Fatal_Error("Bad format: %s.",string);\u000a  }\u000a  if (1 < iVar3) {\u000a    iVar3 = Is_A_DFormat(ppcVar1[1]);\u000a    if (iVar3 != 0) {\u000a      *argv = ppcVar1 + 1;\u000a      *argc = *argc + -1;\u000a      dformat = **argv;\u000a      goto LAB_00402d0e;\u000a    }\u000a  }\u000a  dformat = (char *)0x0;\u000aLAB_00402d0e:\u000a  atom = Parse_Atom(name);\u000a  Add_Mapping(atom,string,dformat);\u000a  return;\u000a}\u000a\u000a
p381
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R12,RDI\nADD qword ptr [RBX],0x8\nDEC dword ptr [R12]\nJZ 0x00402d34\nMOV RAX,qword ptr [RBX]\nMOV R14,qword ptr [RAX]\nADD RAX,0x8\nMOV qword ptr [RBX],RAX\nMOV EBP,dword ptr [R12]\nDEC EBP\nMOV dword ptr [R12],EBP\nJZ 0x00402d34\nMOV R13,qword ptr [RBX]\nMOV R15,qword ptr [R13]\nMOV RDI,R15\nCALL 0x00403780\nTEST EAX,EAX\nJZ 0x00402d39\nCMP EBP,0x2\nJL 0x00402d0c\nMOV RDI,qword ptr [R13 + 0x8]\nCALL 0x004037a0\nTEST EAX,EAX\nJZ 0x00402d0c\nADD R13,0x8\nMOV qword ptr [RBX],R13\nDEC dword ptr [R12]\nMOV RAX,qword ptr [RBX]\nMOV RBX,qword ptr [RAX]\nJMP 0x00402d0e\nXOR EBX,EBX\nXOR ESI,ESI\nMOV RDI,R14\nCALL 0x00403620\nMOV RDI,RAX\nMOV RSI,R15\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00403580\nCALL 0x00402390\nMOV EDI,0x406449\nXOR EAX,EAX\nMOV RSI,R15\nCALL 0x00401a80\n'
p382
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n48 89 f3\n49 89 fc\n48 83 03 08\n41 ff 0c 24\n74 79\n48 8b 03\n4c 8b 30\n48 83 c0 08\n48 89 03\n41 8b 2c 24\nff cd\n41 89 2c 24\n74 60\n4c 8b 2b\n4d 8b 7d 00\n4c 89 ff\ne8 9d 0a 00 00\n85 c0\n74 52\n83 fd 02\n7c 20\n49 8b 7d 08\ne8 ab 0a 00 00\n85 c0\n74 13\n49 83 c5 08\n4c 89 2b\n41 ff 0c 24\n48 8b 03\n48 8b 18\neb 02\n31 db\n31 f6\n4c 89 f7\ne8 08 09 00 00\n48 89 c7\n4c 89 fe\n48 89 da\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 4c 08 00 00\ne8 57 f6 ff ff\nbf 49 64 40 00\n31 c0\n4c 89 fe\ne8 38 ed ff ff\n'
p383
S'.text:0000000000402ca0\n.text:0000000000402ca1\n.text:0000000000402ca3\n.text:0000000000402ca5\n.text:0000000000402ca7\n.text:0000000000402ca9\n.text:0000000000402caa\n.text:0000000000402cab\n.text:0000000000402cae\n.text:0000000000402cb1\n.text:0000000000402cb5\n.text:0000000000402cb9\n.text:0000000000402cbb\n.text:0000000000402cbe\n.text:0000000000402cc1\n.text:0000000000402cc5\n.text:0000000000402cc8\n.text:0000000000402ccc\n.text:0000000000402cce\n.text:0000000000402cd2\n.text:0000000000402cd4\n.text:0000000000402cd7\n.text:0000000000402cdb\n.text:0000000000402cde\n.text:0000000000402ce3\n.text:0000000000402ce5\n.text:0000000000402ce7\n.text:0000000000402cea\n.text:0000000000402cec\n.text:0000000000402cf0\n.text:0000000000402cf5\n.text:0000000000402cf7\n.text:0000000000402cf9\n.text:0000000000402cfd\n.text:0000000000402d00\n.text:0000000000402d04\n.text:0000000000402d07\n.text:0000000000402d0a\n.text:0000000000402d0c\n.text:0000000000402d0e\n.text:0000000000402d10\n.text:0000000000402d13\n.text:0000000000402d18\n.text:0000000000402d1b\n.text:0000000000402d1e\n.text:0000000000402d21\n.text:0000000000402d25\n.text:0000000000402d26\n.text:0000000000402d28\n.text:0000000000402d2a\n.text:0000000000402d2c\n.text:0000000000402d2e\n.text:0000000000402d2f\n.text:0000000000402d34\n.text:0000000000402d39\n.text:0000000000402d3e\n.text:0000000000402d40\n.text:0000000000402d43\n'
p384
tp385
sS'Scan_Long'
p386
(S'\n__stdcall Scan_Long(char * string, long * value)\n'
p387
V\u000achar * Scan_Long(char *string,long *value)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  long lVar2;\u000a  char *pcVar3;\u000a  \u000a  ppuVar1 = __ctype_b_loc();\u000a  if ((*(byte *)((long)*ppuVar1 + (ulong)(byte)*string * 2 + 1) & 8) != 0) {\u000a    lVar2 = atol(string);\u000a    *value = lVar2;\u000a    pcVar3 = Skip_Digits(string);\u000a    return pcVar3;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  Fatal_Error("Bad number: %s.",string);\u000a}\u000a\u000a
p388
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nCALL 0x00401770\nMOV RAX,qword ptr [RAX]\nMOVZX ECX,byte ptr [RBX]\nTEST byte ptr [RAX + RCX*0x2 + 0x1],0x8\nJZ 0x004038f3\nMOV RDI,RBX\nCALL 0x00401690\nMOV qword ptr [R14],RAX\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00403910\nMOV EDI,0x406603\nXOR EAX,EAX\nMOV RSI,RBX\nCALL 0x00401a80\n'
p389
S'41 56\n53\n50\n49 89 f6\n48 89 fb\ne8 a1 de ff ff\n48 8b 00\n0f b6 0b\nf6 44 48 01 08\n74 17\n48 89 df\ne8 ac dd ff ff\n49 89 06\n48 89 df\n48 83 c4 08\n5b\n41 5e\neb 1d\nbf 03 66 40 00\n31 c0\n48 89 de\ne8 7e e1 ff ff\n'
p390
S'.text:00000000004038c0\n.text:00000000004038c2\n.text:00000000004038c3\n.text:00000000004038c4\n.text:00000000004038c7\n.text:00000000004038ca\n.text:00000000004038cf\n.text:00000000004038d2\n.text:00000000004038d5\n.text:00000000004038da\n.text:00000000004038dc\n.text:00000000004038df\n.text:00000000004038e4\n.text:00000000004038e7\n.text:00000000004038ea\n.text:00000000004038ee\n.text:00000000004038ef\n.text:00000000004038f1\n.text:00000000004038f3\n.text:00000000004038f8\n.text:00000000004038fa\n.text:00000000004038fd\n'
p391
tp392
sS'XCloseDisplay'
p393
(S'\n__stdcall XCloseDisplay()\n'
p394
V\u000avoid XCloseDisplay(void)\u000a\u000a{\u000a  (*(code *)PTR_XCloseDisplay_006081e8)();\u000a  return;\u000a}\u000a\u000a
p395
S'JMP qword ptr [0x006081e8]\n'
p396
S'ff 25 92 6a 20 00\n'
p397
S'.plt:0000000000401750\n'
p398
tp399
sS'fprintf'
p400
(S'\n__stdcall fprintf(FILE * __stream, char * __format)\n'
p401
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fprintf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fprintf_006080e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p402
S'JMP qword ptr [0x006080e8]\n'
p403
S'ff 25 92 6b 20 00\n'
p404
S'.plt:0000000000401550\n'
p405
tp406
sS'puts'
p407
(S'\n__stdcall puts(char * __s)\n'
p408
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint puts(char *__s)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_puts_00608048)();\u000a  return iVar1;\u000a}\u000a\u000a
p409
S'JMP qword ptr [0x00608048]\n'
p410
S'ff 25 32 6c 20 00\n'
p411
S'.plt:0000000000401410\n'
p412
tp413
sS'Apply_Default_Formats'
p414
(S'\n__stdcall Apply_Default_Formats(char * * format, char * * dformat)\n'
p415
V\u000avoid Apply_Default_Formats(char **format,char **dformat)\u000a\u000a{\u000a  if (*format == (char *)0x0) {\u000a    *format = "0x";\u000a  }\u000a  if (*dformat == (char *)0x0) {\u000a    *dformat = " = $0+\u005cn";\u000a  }\u000a  return;\u000a}\u000a\u000a
p416
S'CMP qword ptr [RDI],0x0\nJNZ 0x00403a1d\nMOV qword ptr [RDI],0x4066c1\nCMP qword ptr [RSI],0x0\nJNZ 0x00403a2a\nMOV qword ptr [RSI],0x4060c4\nRET\n'
p417
S'48 83 3f 00\n75 07\n48 c7 07 c1 66 40 00\n48 83 3e 00\n75 07\n48 c7 06 c4 60 40 00\nc3\n'
p418
S'.text:0000000000403a10\n.text:0000000000403a14\n.text:0000000000403a16\n.text:0000000000403a1d\n.text:0000000000403a21\n.text:0000000000403a23\n.text:0000000000403a2a\n'
p419
tp420
sS'Format_Bool'
p421
(S'\n__stdcall Format_Bool(long value)\n'
p422
V\u000achar * Format_Bool(long value)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = "True";\u000a  if (value == 0) {\u000a    pcVar1 = "False";\u000a  }\u000a  return pcVar1;\u000a}\u000a\u000a
p423
S'TEST RDI,RDI\nMOV ECX,0x4065b1\nMOV EAX,0x4065ac\nCMOVZ RAX,RCX\nRET\n'
p424
S'48 85 ff\nb9 b1 65 40 00\nb8 ac 65 40 00\n48 0f 44 c1\nc3\n'
p425
S'.text:0000000000404470\n.text:0000000000404473\n.text:0000000000404478\n.text:000000000040447d\n.text:0000000000404481\n'
p426
tp427
sS'__isoc99_fscanf'
p428
(S'\n__stdcall __isoc99_fscanf()\n'
p429
V\u000avoid __isoc99_fscanf(void)\u000a\u000a{\u000a  (*(code *)PTR___isoc99_fscanf_00608038)();\u000a  return;\u000a}\u000a\u000a
p430
S'JMP qword ptr [0x00608038]\n'
p431
S'ff 25 42 6c 20 00\n'
p432
S'.plt:00000000004013f0\n'
p433
tp434
sS'XGrabPointer'
p435
(S'\n__stdcall XGrabPointer()\n'
p436
V\u000avoid XGrabPointer(void)\u000a\u000a{\u000a  (*(code *)PTR_XGrabPointer_006080a8)();\u000a  return;\u000a}\u000a\u000a
p437
S'JMP qword ptr [0x006080a8]\n'
p438
S'ff 25 d2 6b 20 00\n'
p439
S'.plt:00000000004014d0\n'
p440
tp441
sS'XInternAtom'
p442
(S'\n__stdcall XInternAtom()\n'
p443
V\u000avoid XInternAtom(void)\u000a\u000a{\u000a  (*(code *)PTR_XInternAtom_00608138)();\u000a  return;\u000a}\u000a\u000a
p444
S'JMP qword ptr [0x00608138]\n'
p445
S'ff 25 42 6b 20 00\n'
p446
S'.plt:00000000004015f0\n'
p447
tp448
sS'memcpy'
p449
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p450
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_006080f8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p451
S'JMP qword ptr [0x006080f8]\n'
p452
S'ff 25 82 6b 20 00\n'
p453
S'.plt:0000000000401570\n'
p454
tp455
sS'Set_Property'
p456
(S'\n__stdcall Set_Property(char * value)\n'
p457
V\u000avoid Set_Property(char *value)\u000a\u000a{\u000a  uchar data8 [64];\u000a  unsigned_short data16 [64];\u000a  ulong data32 [64];\u000a  uchar data8 [64];\u000a  unsigned_short data16 [64];\u000a  ulong data32 [64];\u000a  uchar data8;\u000a  unsigned_short data16;\u000a  ulong data32;\u000a  Atom avalue;\u000a  char cVar1;\u000a  unsigned_short uVar2;\u000a  uint uVar3;\u000a  int iVar4;\u000a  Atom atom;\u000a  char *__nptr;\u000a  ulong uVar5;\u000a  char *in_RDX;\u000a  size_t sVar6;\u000a  char *name;\u000a  char *__s;\u000a  char *dformat;\u000a  XTextProperty textprop;\u000a  char *local_68;\u000a  char *local_60;\u000a  char *local_58;\u000a  char *local_50;\u000a  undefined8 local_48;\u000a  uint local_38;\u000a  \u000a  local_68 = in_RDX;\u000a  atom = Parse_Atom(name);\u000a  local_58 = (char *)0x0;\u000a  local_60 = (char *)0x0;\u000a  Lookup_Formats(atom,&local_60,&local_58);\u000a  if (local_60 == (char *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    Fatal_Error("unsupported conversion for %s");\u000a  }\u000a  uVar3 = Get_Format_Size(local_60);\u000a  cVar1 = Get_Format_Char(local_60);\u000a  switch(cVar1) {\u000a  case 'a':\u000a    avalue = Parse_Atom(local_68);\u000a    local_68 = (char *)0x6832a0;\u000a    sVar6 = 1;\u000a    local_48 = 4;\u000a    break;\u000a  case 'b':\u000a    iVar4 = strcmp(local_68,"True");\u000a    if (iVar4 == 0) {\u000a      uVar5 = 1;\u000a      uVar2 = 1;\u000a      if (uVar3 == 0x10) goto LAB_0040309e;\u000aLAB_0040308b:\u000a      if (uVar3 == 8) {\u000a        data8 = (uchar)uVar5;\u000a        local_68 = (char *)0x683290;\u000a      }\u000a      else {\u000a        local_68 = (char *)0x683298;\u000a        data32 = uVar5;\u000a      }\u000a    }\u000a    else {\u000a      iVar4 = strcmp(local_68,"False");\u000a      if (iVar4 != 0) {\u000a        __s = "cannot convert %s argument to Bool\u005cn";\u000a        goto LAB_004031ca;\u000a      }\u000a      uVar5 = 0;\u000a      uVar2 = 0;\u000a      if (uVar3 != 0x10) goto LAB_0040308b;\u000aLAB_0040309e:\u000a      local_68 = (char *)0x683292;\u000a      data16 = uVar2;\u000a    }\u000a    sVar6 = 1;\u000a    goto LAB_00403176;\u000a  case 'c':\u000a  case 'x':\u000a    __s = (char *)__strdup(local_68);\u000a    __nptr = strtok(__s,",");\u000a    local_68 = (char *)0x0;\u000a    uVar5 = strtoul(__nptr,(char **)0x0,0);\u000a    if (uVar3 == 0x20) {\u000a      local_68 = (char *)0x682dd0;\u000a      data32[0] = uVar5;\u000a    }\u000a    else {\u000a      if (uVar3 == 0x10) {\u000a        data16[0] = (unsigned_short)uVar5;\u000a        local_68 = (char *)0x682d50;\u000a      }\u000a      else {\u000a        if (uVar3 == 8) {\u000a          data8[0] = (uchar)uVar5;\u000a          local_68 = (char *)0x682d10;\u000a        }\u000a      }\u000a    }\u000a    sVar6 = 1;\u000a    do {\u000a      __nptr = strtok((char *)0x0,",");\u000a      if (__nptr == (char *)0x0) goto LAB_0040306e;\u000a      uVar5 = strtoul(__nptr,(char **)0x0,0);\u000a      if (uVar3 == 0x20) {\u000a        *(ulong *)(sVar6 * 8 + 0x682dd0) = uVar5;\u000a      }\u000a      else {\u000a        if (uVar3 == 0x10) {\u000a          *(undefined2 *)(sVar6 * 2 + 0x682d50) = (short)uVar5;\u000a        }\u000a        else {\u000a          if (uVar3 == 8) {\u000a            *(undefined *)(sVar6 + 0x682d10) = (char)uVar5;\u000a          }\u000a        }\u000a      }\u000a      sVar6 = sVar6 + 1;\u000a    } while (sVar6 != 0x40);\u000a    sVar6 = 0x40;\u000a    fprintf(stderr,"Maximum number of elements reached (%d). List truncated.\u005cn",0x40);\u000aLAB_0040306e:\u000a    free(__s);\u000a    local_48 = 6;\u000a    break;\u000a  default:\u000a                    /* WARNING: Subroutine does not return */\u000a    Fatal_Error("bad format character: %c");\u000a  case 'i':\u000a    __s = (char *)__strdup(local_68);\u000a    __nptr = strtok(__s,",");\u000a    local_68 = (char *)0x0;\u000a    uVar5 = strtoul(__nptr,(char **)0x0,0);\u000a    if (uVar3 == 0x20) {\u000a      local_68 = (char *)0x683090;\u000a      data32[0] = uVar5;\u000a    }\u000a    else {\u000a      if (uVar3 == 0x10) {\u000a        data16[0] = (unsigned_short)uVar5;\u000a        local_68 = (char *)0x683010;\u000a      }\u000a      else {\u000a        if (uVar3 == 8) {\u000a          data8[0] = (uchar)uVar5;\u000a          local_68 = (char *)0x682fd0;\u000a        }\u000a      }\u000a    }\u000a    sVar6 = 1;\u000a    do {\u000a      __nptr = strtok((char *)0x0,",");\u000a      if (__nptr == (char *)0x0) goto LAB_0040316e;\u000a      uVar5 = strtoul(__nptr,(char **)0x0,0);\u000a      if (uVar3 == 0x20) {\u000a        *(ulong *)(sVar6 * 8 + 0x683090) = uVar5;\u000a      }\u000a      else {\u000a        if (uVar3 == 0x10) {\u000a          *(undefined2 *)(sVar6 * 2 + 0x683010) = (short)uVar5;\u000a        }\u000a        else {\u000a          if (uVar3 == 8) {\u000a            *(undefined *)(sVar6 + 0x682fd0) = (char)uVar5;\u000a          }\u000a        }\u000a      }\u000a      sVar6 = sVar6 + 1;\u000a    } while (sVar6 != 0x40);\u000a    sVar6 = 0x40;\u000a    fprintf(stderr,"Maximum number of elements reached (%d). List truncated.\u005cn",0x40);\u000aLAB_0040316e:\u000a    free(__s);\u000aLAB_00403176:\u000a    local_48 = 0x13;\u000a    break;\u000a  case 's':\u000a    if (uVar3 != 8) {\u000a                    /* WARNING: Subroutine does not return */\u000a      Fatal_Error("can\u005c't use format character \u005c's\u005c' with any size except 8.");\u000a    }\u000a    sVar6 = strlen(local_68);\u000a    local_48 = 0x1f;\u000a    break;\u000a  case 't':\u000a    if (uVar3 != 8) {\u000a                    /* WARNING: Subroutine does not return */\u000a      Fatal_Error("can\u005c't use format character \u005c't\u005c' with any size except 8.");\u000a    }\u000a    iVar4 = XmbTextListToTextProperty(value,&local_68,1,3,&local_50);\u000a    if (iVar4 != 0) {\u000a      __s = "cannot convert %s argument to STRING or COMPOUND_TEXT.\u005cn";\u000aLAB_004031ca:\u000a      fprintf(stderr,__s);\u000a      return;\u000a    }\u000a    sVar6 = (size_t)local_38;\u000a    local_68 = local_50;\u000a    break;\u000a  case 'u':\u000a    if (uVar3 != 8) {\u000a                    /* WARNING: Subroutine does not return */\u000a      Fatal_Error("can\u005c't use format character \u005c'u\u005c' with any size except 8.");\u000a    }\u000a    local_48 = XInternAtom(value,"UTF8_STRING",0);\u000a    sVar6 = strlen(local_68);\u000a  }\u000a  XChangeProperty(value,target_win,atom,local_48,(ulong)uVar3,0,local_68,sVar6);\u000a  return;\u000a}\u000a\u000a
p458
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBX,RSI\nMOV R14,RDI\nMOV qword ptr [RSP],RDX\nXOR ESI,ESI\nMOV RDI,RBX\nCALL 0x00403620\nMOV R15,RAX\nMOV qword ptr [RSP + 0x10],0x0\nMOV qword ptr [RSP + 0x8],0x0\nLEA RSI,[RSP + 0x8]\nLEA RDX,[RSP + 0x10]\nMOV RDI,R15\nCALL 0x004037d0\nMOV RDI,qword ptr [RSP + 0x8]\nTEST RDI,RDI\nJZ 0x004031d6\nCALL 0x00403830\nMOV EBP,EAX\nMOV RDI,qword ptr [RSP + 0x8]\nXOR ESI,ESI\nCALL 0x00403870\nMOVSX ESI,AL\nLEA EAX,[RSI + -0x61]\nCMP EAX,0x17\nJA 0x004031e5\nJMP qword ptr [0x404f30 + RAX*0x8]\nMOV RDI,qword ptr [RSP]\nCALL 0x00401510\nMOV R13,RAX\nMOV ESI,0x406570\nMOV RDI,R13\nCALL 0x004016c0\nXOR R12D,R12D\nXOR ESI,ESI\nXOR EDX,EDX\nMOV RDI,RAX\nCALL 0x004016f0\nCMP EBP,0x20\nJZ 0x00402fce\nCMP EBP,0x10\nJZ 0x00402fdd\nCMP EBP,0x8\nJNZ 0x00402fea\nMOV byte ptr [0x00682d10],AL\nMOV R12D,0x682d10\nJMP 0x00402fea\nMOV RDI,qword ptr [RSP]\nXOR ESI,ESI\nCALL 0x00403620\nMOV qword ptr [0x006832a0],RAX\nMOV R12D,0x6832a0\nMOV EBX,0x1\nMOV R13D,0x4\nJMP 0x0040317c\nMOV R12,qword ptr [RSP]\nMOV ESI,0x4065ac\nMOV RDI,R12\nCALL 0x00401530\nTEST EAX,EAX\nJZ 0x00403081\nMOV ESI,0x4065b1\nMOV RDI,R12\nCALL 0x00401530\nTEST EAX,EAX\nJNZ 0x004031be\nXOR EAX,EAX\nCMP EBP,0x10\nJNZ 0x0040308b\nJMP 0x0040309e\nMOV RDI,qword ptr [RSP]\nCALL 0x00401510\nMOV R13,RAX\nMOV ESI,0x406570\nMOV RDI,R13\nCALL 0x004016c0\nXOR R12D,R12D\nXOR ESI,ESI\nXOR EDX,EDX\nMOV RDI,RAX\nCALL 0x004016f0\nCMP EBP,0x20\nJZ 0x004030c4\nCMP EBP,0x10\nJZ 0x004030d3\nCMP EBP,0x8\nJNZ 0x004030e0\nMOV byte ptr [0x00682fd0],AL\nMOV R12D,0x682fd0\nJMP 0x004030e0\nCMP EBP,0x8\nJNZ 0x004031f1\nMOV R12,qword ptr [RSP]\nMOV RDI,R12\nCALL 0x00401460\nMOV RBX,RAX\nMOV R13D,0x1f\nJMP 0x0040317c\nCMP EBP,0x8\nJNZ 0x004031fd\nMOV ESI,0x40587a\nXOR EDX,EDX\nMOV RDI,R14\nCALL 0x004015f0\nMOV R13,RAX\nMOV R12,qword ptr [RSP]\nMOV RDI,R12\nCALL 0x00401460\nMOV RBX,RAX\nJMP 0x0040317c\nCMP EBP,0x8\nJNZ 0x00403209\nMOV RSI,RSP\nLEA R8,[RSP + 0x18]\nMOV EDX,0x1\nMOV ECX,0x3\nMOV RDI,R14\nCALL 0x00401430\nTEST EAX,EAX\nJNZ 0x004031b0\nMOV R12,qword ptr [RSP + 0x18]\nMOV R13,qword ptr [RSP + 0x20]\nMOV EBX,dword ptr [RSP + 0x30]\nJMP 0x0040317c\nMOV qword ptr [0x00682dd0],RAX\nMOV R12D,0x682dd0\nJMP 0x00402fea\nMOV word ptr [0x00682d50],AX\nMOV R12D,0x682d50\nMOV EBX,0x1\nNOP\nXOR EDI,EDI\nMOV ESI,0x406570\nCALL 0x004016c0\nTEST RAX,RAX\nJZ 0x0040306e\nXOR ESI,ESI\nXOR EDX,EDX\nMOV RDI,RAX\nCALL 0x004016f0\nCMP EBP,0x20\nJZ 0x00403030\nCMP EBP,0x10\nJZ 0x00403040\nCMP EBP,0x8\nJNZ 0x00403048\nMOV byte ptr [0x682d10 + RBX],AL\nJMP 0x00403048\nMOV qword ptr [0x682dd0 + RBX*0x8],RAX\nJMP 0x00403048\nMOV word ptr [0x682d50 + RBX + RBX*0x1],AX\nINC RBX\nCMP RBX,0x40\nJNZ 0x00402ff0\nMOV RDI,qword ptr [0x00608b80]\nMOV EBX,0x40\nMOV ESI,0x406572\nMOV EDX,0x40\nXOR EAX,EAX\nCALL 0x00401550\nMOV RDI,R13\nCALL 0x004013c0\nMOV R13D,0x6\nJMP 0x0040317c\nMOV EAX,0x1\nCMP EBP,0x10\nJZ 0x0040309e\nCMP EBP,0x8\nJNZ 0x004030ad\nMOV byte ptr [0x00683290],AL\nMOV R12D,0x683290\nJMP 0x004030ba\nMOV word ptr [0x00683292],AX\nMOV R12D,0x683292\nJMP 0x004030ba\nMOV qword ptr [0x00683298],RAX\nMOV R12D,0x683298\nMOV EBX,0x1\nJMP 0x00403176\nMOV qword ptr [0x00683090],RAX\nMOV R12D,0x683090\nJMP 0x004030e0\nMOV word ptr [0x00683010],AX\nMOV R12D,0x683010\nMOV EBX,0x1\nNOP dword ptr CS:[RAX + RAX*0x1]\nXOR EDI,EDI\nMOV ESI,0x406570\nCALL 0x004016c0\nTEST RAX,RAX\nJZ 0x0040316e\nXOR ESI,ESI\nXOR EDX,EDX\nMOV RDI,RAX\nCALL 0x004016f0\nCMP EBP,0x20\nJZ 0x00403130\nCMP EBP,0x10\nJZ 0x00403140\nCMP EBP,0x8\nJNZ 0x00403148\nMOV byte ptr [0x682fd0 + RBX],AL\nJMP 0x00403148\nMOV qword ptr [0x683090 + RBX*0x8],RAX\nJMP 0x00403148\nMOV word ptr [0x683010 + RBX + RBX*0x1],AX\nINC RBX\nCMP RBX,0x40\nJNZ 0x004030f0\nMOV RDI,qword ptr [0x00608b80]\nMOV EBX,0x40\nMOV ESI,0x406572\nMOV EDX,0x40\nXOR EAX,EAX\nCALL 0x00401550\nMOV RDI,R13\nCALL 0x004013c0\nMOV R13D,0x13\nMOV RSI,qword ptr [0x00608bb0]\nMOV R9D,0x0\nMOV RDI,R14\nMOV RDX,R15\nMOV RCX,R13\nMOV R8D,EBP\nPUSH RBX\nPUSH R12\nCALL 0x00401630\nADD RSP,0x10\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RDI,qword ptr [0x00608b80]\nMOV ESI,0x406538\nJMP 0x004031ca\nMOV RDI,qword ptr [0x00608b80]\nMOV ESI,0x4065b7\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401550\nJMP 0x004031a1\nMOV EDI,0x406475\nXOR EAX,EAX\nMOV RSI,RBX\nCALL 0x00401a80\nMOV EDI,0x4065db\nXOR EAX,EAX\nCALL 0x00401a80\nMOV EDI,0x406493\nXOR EAX,EAX\nCALL 0x00401a80\nMOV EDI,0x4064ca\nXOR EAX,EAX\nCALL 0x00401a80\nMOV EDI,0x406501\nXOR EAX,EAX\nCALL 0x00401a80\n'
p459
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 f3\n49 89 fe\n48 89 14 24\n31 f6\n48 89 df\ne8 4e 08 00 00\n49 89 c7\n48 c7 44 24 10 00 00 00 00\n48 c7 44 24 08 00 00 00 00\n48 8d 74 24 08\n48 8d 54 24 10\n4c 89 ff\ne8 d7 09 00 00\n48 8b 7c 24 08\n48 85 ff\n0f 84 cf 03 00 00\ne8 24 0a 00 00\n89 c5\n48 8b 7c 24 08\n31 f6\ne8 56 0a 00 00\n0f be f0\n8d 46 9f\n83 f8 17\n0f 87 bc 03 00 00\nff 24 c5 30 4f 40 00\n48 8b 3c 24\ne8 d7 e6 ff ff\n49 89 c5\nbe 70 65 40 00\n4c 89 ef\ne8 77 e8 ff ff\n45 31 e4\n31 f6\n31 d2\n48 89 c7\ne8 98 e8 ff ff\n83 fd 20\n0f 84 6d 01 00 00\n83 fd 10\n0f 84 73 01 00 00\n83 fd 08\n0f 85 77 01 00 00\n88 05 97 fe 27 00\n41 bc 10 2d 68 00\ne9 66 01 00 00\n48 8b 3c 24\n31 f6\ne8 91 07 00 00\n48 89 05 0a 04 28 00\n41 bc a0 32 68 00\nbb 01 00 00 00\n41 bd 04 00 00 00\ne9 d0 02 00 00\n4c 8b 24 24\nbe ac 65 40 00\n4c 89 e7\ne8 73 e6 ff ff\n85 c0\n0f 84 bc 01 00 00\nbe b1 65 40 00\n4c 89 e7\ne8 5e e6 ff ff\n85 c0\n0f 85 e4 02 00 00\n31 c0\n83 fd 10\n0f 85 a6 01 00 00\ne9 b4 01 00 00\n48 8b 3c 24\ne8 1d e6 ff ff\n49 89 c5\nbe 70 65 40 00\n4c 89 ef\ne8 bd e7 ff ff\n45 31 e4\n31 f6\n31 d2\n48 89 c7\ne8 de e7 ff ff\n83 fd 20\n0f 84 a9 01 00 00\n83 fd 10\n0f 84 af 01 00 00\n83 fd 08\n0f 85 b3 01 00 00\n88 05 9d 00 28 00\n41 bc d0 2f 68 00\ne9 a2 01 00 00\n83 fd 08\n0f 85 aa 02 00 00\n4c 8b 24 24\n4c 89 e7\ne8 0d e5 ff ff\n48 89 c3\n41 bd 1f 00 00 00\ne9 1b 02 00 00\n83 fd 08\n0f 85 93 02 00 00\nbe 7a 58 40 00\n31 d2\n4c 89 f7\ne8 77 e6 ff ff\n49 89 c5\n4c 8b 24 24\n4c 89 e7\ne8 d8 e4 ff ff\n48 89 c3\ne9 ec 01 00 00\n83 fd 08\n0f 85 70 02 00 00\n48 89 e6\n4c 8d 44 24 18\nba 01 00 00 00\nb9 03 00 00 00\n4c 89 f7\ne8 7d e4 ff ff\n85 c0\n0f 85 f5 01 00 00\n4c 8b 64 24 18\n4c 8b 6c 24 20\n8b 5c 24 30\ne9 ae 01 00 00\n48 89 05 fb fd 27 00\n41 bc d0 2d 68 00\neb 0d\n66 89 05 6c fd 27 00\n41 bc 50 2d 68 00\nbb 01 00 00 00\n90\n31 ff\nbe 70 65 40 00\ne8 c4 e6 ff ff\n48 85 c0\n74 6d\n31 f6\n31 d2\n48 89 c7\ne8 e3 e6 ff ff\n83 fd 20\n74 1e\n83 fd 10\n74 29\n83 fd 08\n75 2c\n88 83 10 2d 68 00\neb 24\n48 89 04 dd d0 2d 68 00\neb 0e\n66 89 84 1b 50 2d 68 00\n48 ff c3\n48 83 fb 40\n75 9f\n48 8b 3d 28 5b 20 00\nbb 40 00 00 00\nbe 72 65 40 00\nba 40 00 00 00\n31 c0\ne8 e2 e4 ff ff\n4c 89 ef\ne8 4a e3 ff ff\n41 bd 06 00 00 00\ne9 fb 00 00 00\nb8 01 00 00 00\n83 fd 10\n74 13\n83 fd 08\n75 1d\n88 05 fa 01 28 00\n41 bc 90 32 68 00\neb 1c\n66 89 05 ed 01 28 00\n41 bc 92 32 68 00\neb 0d\n48 89 05 e4 01 28 00\n41 bc 98 32 68 00\nbb 01 00 00 00\ne9 b2 00 00 00\n48 89 05 c5 ff 27 00\n41 bc 90 30 68 00\neb 0d\n66 89 05 36 ff 27 00\n41 bc 10 30 68 00\nbb 01 00 00 00\n66 66 2e 0f 1f 84 00 00 00 00 00\n31 ff\nbe 70 65 40 00\ne8 c4 e5 ff ff\n48 85 c0\n74 6d\n31 f6\n31 d2\n48 89 c7\ne8 e3 e5 ff ff\n83 fd 20\n74 1e\n83 fd 10\n74 29\n83 fd 08\n75 2c\n88 83 d0 2f 68 00\neb 24\n48 89 04 dd 90 30 68 00\neb 0e\n66 89 84 1b 10 30 68 00\n48 ff c3\n48 83 fb 40\n75 9f\n48 8b 3d 28 5a 20 00\nbb 40 00 00 00\nbe 72 65 40 00\nba 40 00 00 00\n31 c0\ne8 e2 e3 ff ff\n4c 89 ef\ne8 4a e2 ff ff\n41 bd 13 00 00 00\n48 8b 35 2d 5a 20 00\n41 b9 00 00 00 00\n4c 89 f7\n4c 89 fa\n4c 89 e9\n41 89 e8\n53\n41 54\ne8 93 e4 ff ff\n48 83 c4 10\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 3d c9 59 20 00\nbe 38 65 40 00\neb 0c\n48 8b 3d bb 59 20 00\nbe b7 65 40 00\n31 c0\n48 89 da\ne8 7c e3 ff ff\neb cb\nbf 75 64 40 00\n31 c0\n48 89 de\ne8 9b e8 ff ff\nbf db 65 40 00\n31 c0\ne8 8f e8 ff ff\nbf 93 64 40 00\n31 c0\ne8 83 e8 ff ff\nbf ca 64 40 00\n31 c0\ne8 77 e8 ff ff\nbf 01 65 40 00\n31 c0\ne8 6b e8 ff ff\n'
p460
S'.text:0000000000402db0\n.text:0000000000402db1\n.text:0000000000402db3\n.text:0000000000402db5\n.text:0000000000402db7\n.text:0000000000402db9\n.text:0000000000402dba\n.text:0000000000402dbe\n.text:0000000000402dc1\n.text:0000000000402dc4\n.text:0000000000402dc8\n.text:0000000000402dca\n.text:0000000000402dcd\n.text:0000000000402dd2\n.text:0000000000402dd5\n.text:0000000000402dde\n.text:0000000000402de7\n.text:0000000000402dec\n.text:0000000000402df1\n.text:0000000000402df4\n.text:0000000000402df9\n.text:0000000000402dfe\n.text:0000000000402e01\n.text:0000000000402e07\n.text:0000000000402e0c\n.text:0000000000402e0e\n.text:0000000000402e13\n.text:0000000000402e15\n.text:0000000000402e1a\n.text:0000000000402e1d\n.text:0000000000402e20\n.text:0000000000402e23\n.text:0000000000402e29\n.text:0000000000402e30\n.text:0000000000402e34\n.text:0000000000402e39\n.text:0000000000402e3c\n.text:0000000000402e41\n.text:0000000000402e44\n.text:0000000000402e49\n.text:0000000000402e4c\n.text:0000000000402e4e\n.text:0000000000402e50\n.text:0000000000402e53\n.text:0000000000402e58\n.text:0000000000402e5b\n.text:0000000000402e61\n.text:0000000000402e64\n.text:0000000000402e6a\n.text:0000000000402e6d\n.text:0000000000402e73\n.text:0000000000402e79\n.text:0000000000402e7f\n.text:0000000000402e84\n.text:0000000000402e88\n.text:0000000000402e8a\n.text:0000000000402e8f\n.text:0000000000402e96\n.text:0000000000402e9c\n.text:0000000000402ea1\n.text:0000000000402ea7\n.text:0000000000402eac\n.text:0000000000402eb0\n.text:0000000000402eb5\n.text:0000000000402eb8\n.text:0000000000402ebd\n.text:0000000000402ebf\n.text:0000000000402ec5\n.text:0000000000402eca\n.text:0000000000402ecd\n.text:0000000000402ed2\n.text:0000000000402ed4\n.text:0000000000402eda\n.text:0000000000402edc\n.text:0000000000402edf\n.text:0000000000402ee5\n.text:0000000000402eea\n.text:0000000000402eee\n.text:0000000000402ef3\n.text:0000000000402ef6\n.text:0000000000402efb\n.text:0000000000402efe\n.text:0000000000402f03\n.text:0000000000402f06\n.text:0000000000402f08\n.text:0000000000402f0a\n.text:0000000000402f0d\n.text:0000000000402f12\n.text:0000000000402f15\n.text:0000000000402f1b\n.text:0000000000402f1e\n.text:0000000000402f24\n.text:0000000000402f27\n.text:0000000000402f2d\n.text:0000000000402f33\n.text:0000000000402f39\n.text:0000000000402f3e\n.text:0000000000402f41\n.text:0000000000402f47\n.text:0000000000402f4b\n.text:0000000000402f4e\n.text:0000000000402f53\n.text:0000000000402f56\n.text:0000000000402f5c\n.text:0000000000402f61\n.text:0000000000402f64\n.text:0000000000402f6a\n.text:0000000000402f6f\n.text:0000000000402f71\n.text:0000000000402f74\n.text:0000000000402f79\n.text:0000000000402f7c\n.text:0000000000402f80\n.text:0000000000402f83\n.text:0000000000402f88\n.text:0000000000402f8b\n.text:0000000000402f90\n.text:0000000000402f93\n.text:0000000000402f99\n.text:0000000000402f9c\n.text:0000000000402fa1\n.text:0000000000402fa6\n.text:0000000000402fab\n.text:0000000000402fae\n.text:0000000000402fb3\n.text:0000000000402fb5\n.text:0000000000402fbb\n.text:0000000000402fc0\n.text:0000000000402fc5\n.text:0000000000402fc9\n.text:0000000000402fce\n.text:0000000000402fd5\n.text:0000000000402fdb\n.text:0000000000402fdd\n.text:0000000000402fe4\n.text:0000000000402fea\n.text:0000000000402fef\n.text:0000000000402ff0\n.text:0000000000402ff2\n.text:0000000000402ff7\n.text:0000000000402ffc\n.text:0000000000402fff\n.text:0000000000403001\n.text:0000000000403003\n.text:0000000000403005\n.text:0000000000403008\n.text:000000000040300d\n.text:0000000000403010\n.text:0000000000403012\n.text:0000000000403015\n.text:0000000000403017\n.text:000000000040301a\n.text:000000000040301c\n.text:0000000000403022\n.text:0000000000403030\n.text:0000000000403038\n.text:0000000000403040\n.text:0000000000403048\n.text:000000000040304b\n.text:000000000040304f\n.text:0000000000403051\n.text:0000000000403058\n.text:000000000040305d\n.text:0000000000403062\n.text:0000000000403067\n.text:0000000000403069\n.text:000000000040306e\n.text:0000000000403071\n.text:0000000000403076\n.text:000000000040307c\n.text:0000000000403081\n.text:0000000000403086\n.text:0000000000403089\n.text:000000000040308b\n.text:000000000040308e\n.text:0000000000403090\n.text:0000000000403096\n.text:000000000040309c\n.text:000000000040309e\n.text:00000000004030a5\n.text:00000000004030ab\n.text:00000000004030ad\n.text:00000000004030b4\n.text:00000000004030ba\n.text:00000000004030bf\n.text:00000000004030c4\n.text:00000000004030cb\n.text:00000000004030d1\n.text:00000000004030d3\n.text:00000000004030da\n.text:00000000004030e0\n.text:00000000004030e5\n.text:00000000004030f0\n.text:00000000004030f2\n.text:00000000004030f7\n.text:00000000004030fc\n.text:00000000004030ff\n.text:0000000000403101\n.text:0000000000403103\n.text:0000000000403105\n.text:0000000000403108\n.text:000000000040310d\n.text:0000000000403110\n.text:0000000000403112\n.text:0000000000403115\n.text:0000000000403117\n.text:000000000040311a\n.text:000000000040311c\n.text:0000000000403122\n.text:0000000000403130\n.text:0000000000403138\n.text:0000000000403140\n.text:0000000000403148\n.text:000000000040314b\n.text:000000000040314f\n.text:0000000000403151\n.text:0000000000403158\n.text:000000000040315d\n.text:0000000000403162\n.text:0000000000403167\n.text:0000000000403169\n.text:000000000040316e\n.text:0000000000403171\n.text:0000000000403176\n.text:000000000040317c\n.text:0000000000403183\n.text:0000000000403189\n.text:000000000040318c\n.text:000000000040318f\n.text:0000000000403192\n.text:0000000000403195\n.text:0000000000403196\n.text:0000000000403198\n.text:000000000040319d\n.text:00000000004031a1\n.text:00000000004031a5\n.text:00000000004031a6\n.text:00000000004031a8\n.text:00000000004031aa\n.text:00000000004031ac\n.text:00000000004031ae\n.text:00000000004031af\n.text:00000000004031b0\n.text:00000000004031b7\n.text:00000000004031bc\n.text:00000000004031be\n.text:00000000004031c5\n.text:00000000004031ca\n.text:00000000004031cc\n.text:00000000004031cf\n.text:00000000004031d4\n.text:00000000004031d6\n.text:00000000004031db\n.text:00000000004031dd\n.text:00000000004031e0\n.text:00000000004031e5\n.text:00000000004031ea\n.text:00000000004031ec\n.text:00000000004031f1\n.text:00000000004031f6\n.text:00000000004031f8\n.text:00000000004031fd\n.text:0000000000403202\n.text:0000000000403204\n.text:0000000000403209\n.text:000000000040320e\n.text:0000000000403210\n'
p461
tp462
sS'Scan_Term'
p463
(S'\n__stdcall Scan_Term(char * string, thunk * thunks, char * format, long * value)\n'
p464
V\u000achar * Scan_Term(char *string,thunk *thunks,char *format,long *value)\u000a\u000a{\u000a  byte bVar1;\u000a  int iVar2;\u000a  long in_RAX;\u000a  ushort **ppuVar3;\u000a  char *pcVar4;\u000a  long lVar5;\u000a  long local_28;\u000a  \u000a  *value = 0;\u000a  local_28 = in_RAX;\u000a  ppuVar3 = __ctype_b_loc();\u000a  bVar1 = *string;\u000a  if ((*(byte *)((long)*ppuVar3 + (ulong)bVar1 * 2 + 1) & 8) == 0) {\u000a    if (bVar1 == 0x6d) {\u000a      pcVar4 = Scan_Long(string + 1,&local_28);\u000a      iVar2 = Mask_Bit_I(thunks,format);\u000a      lVar5 = (long)iVar2;\u000a    }\u000a    else {\u000a      if (bVar1 != 0x24) {\u000a                    /* WARNING: Subroutine does not return */\u000a        Fatal_Error("Bad term: %s.",string);\u000a      }\u000a      pcVar4 = Scan_Long(string + 1,&local_28);\u000a      if ((long)thunks->thunk_count <= local_28) {\u000a        local_28 = (long)thunks->thunk_count;\u000a      }\u000a      lVar5 = thunks[local_28].value;\u000a    }\u000a    *value = lVar5;\u000a  }\u000a  else {\u000a    pcVar4 = Scan_Long(string,value);\u000a  }\u000a  return pcVar4;\u000a}\u000a\u000a
p465
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RCX\nMOV R12,RDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV qword ptr [R15],0x0\nCALL 0x00401770\nMOV RCX,qword ptr [RAX]\nMOVZX EAX,byte ptr [RBX]\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x8\nJNZ 0x00404c6f\nCMP AL,0x6d\nJZ 0x00404c7f\nCMP AL,0x24\nJNZ 0x00404cb2\nINC RBX\nMOV RSI,RSP\nMOV RDI,RBX\nCALL 0x004038c0\nMOV RBX,RAX\nMOVSXD RAX,dword ptr [R14]\nCMP qword ptr [RSP],RAX\nJL 0x00404c63\nMOV qword ptr [RSP],RAX\nIMUL RAX,qword ptr [RSP],0x38\nMOV RAX,qword ptr [R14 + RAX*0x1 + 0x10]\nJMP 0x00404ca0\nMOV RDI,RBX\nMOV RSI,R15\nCALL 0x004038c0\nMOV RBX,RAX\nJMP 0x00404ca3\nINC RBX\nMOV RSI,RSP\nMOV RDI,RBX\nCALL 0x004038c0\nMOV RBX,RAX\nMOV EDX,dword ptr [RSP]\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00404cd0\nCDQE\nMOV qword ptr [R15],RAX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nMOV EDI,0x406868\nXOR EAX,EAX\nMOV RSI,RBX\nCALL 0x00401a80\n'
p466
S'41 57\n41 56\n41 54\n53\n50\n49 89 cf\n49 89 d4\n49 89 f6\n48 89 fb\n49 c7 07 00 00 00 00\ne8 40 cb ff ff\n48 8b 08\n0f b6 03\nf6 44 41 01 08\n75 32\n3c 6d\n74 3e\n3c 24\n75 6d\n48 ff c3\n48 89 e6\n48 89 df\ne8 6d ec ff ff\n48 89 c3\n49 63 06\n48 39 04 24\n7c 04\n48 89 04 24\n48 6b 04 24 38\n49 8b 44 06 10\neb 31\n48 89 df\n4c 89 fe\ne8 46 ec ff ff\n48 89 c3\neb 24\n48 ff c3\n48 89 e6\n48 89 df\ne8 33 ec ff ff\n48 89 c3\n8b 14 24\n4c 89 f7\n4c 89 e6\ne8 32 00 00 00\n48 98\n49 89 07\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\nbf 68 68 40 00\n31 c0\n48 89 de\ne8 bf cd ff ff\n'
p467
S'.text:0000000000404c10\n.text:0000000000404c12\n.text:0000000000404c14\n.text:0000000000404c16\n.text:0000000000404c17\n.text:0000000000404c18\n.text:0000000000404c1b\n.text:0000000000404c1e\n.text:0000000000404c21\n.text:0000000000404c24\n.text:0000000000404c2b\n.text:0000000000404c30\n.text:0000000000404c33\n.text:0000000000404c36\n.text:0000000000404c3b\n.text:0000000000404c3d\n.text:0000000000404c3f\n.text:0000000000404c41\n.text:0000000000404c43\n.text:0000000000404c45\n.text:0000000000404c48\n.text:0000000000404c4b\n.text:0000000000404c4e\n.text:0000000000404c53\n.text:0000000000404c56\n.text:0000000000404c59\n.text:0000000000404c5d\n.text:0000000000404c5f\n.text:0000000000404c63\n.text:0000000000404c68\n.text:0000000000404c6d\n.text:0000000000404c6f\n.text:0000000000404c72\n.text:0000000000404c75\n.text:0000000000404c7a\n.text:0000000000404c7d\n.text:0000000000404c7f\n.text:0000000000404c82\n.text:0000000000404c85\n.text:0000000000404c88\n.text:0000000000404c8d\n.text:0000000000404c90\n.text:0000000000404c93\n.text:0000000000404c96\n.text:0000000000404c99\n.text:0000000000404c9e\n.text:0000000000404ca0\n.text:0000000000404ca3\n.text:0000000000404ca6\n.text:0000000000404caa\n.text:0000000000404cab\n.text:0000000000404cad\n.text:0000000000404caf\n.text:0000000000404cb1\n.text:0000000000404cb2\n.text:0000000000404cb7\n.text:0000000000404cb9\n.text:0000000000404cbc\n'
p468
tp469
sS'_IO_getc'
p470
(S'\n__stdcall _IO_getc(_IO_FILE * __fp)\n'
p471
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint _IO_getc(_IO_FILE *__fp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR__IO_getc_00608130)();\u000a  return iVar1;\u000a}\u000a\u000a
p472
S'JMP qword ptr [0x00608130]\n'
p473
S'ff 25 4a 6b 20 00\n'
p474
S'.plt:00000000004015e0\n'
p475
tp476
sS'iswprint'
p477
(S'\n__stdcall iswprint(wint_t __wc)\n'
p478
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_006081f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p479
S'JMP qword ptr [0x006081f0]\n'
p480
S'ff 25 8a 6a 20 00\n'
p481
S'.plt:0000000000401760\n'
p482
tp483
sS'Skip_Digits'
p484
(S'\n__stdcall Skip_Digits(char * string)\n'
p485
V\u000achar * Skip_Digits(char *string)\u000a\u000a{\u000a  byte *pbVar1;\u000a  ushort **ppuVar2;\u000a  \u000a  ppuVar2 = __ctype_b_loc();\u000a  string = string + -1;\u000a  do {\u000a    pbVar1 = (byte *)(string + 1);\u000a    string = string + 1;\u000a  } while ((*(byte *)((long)*ppuVar2 + (ulong)*pbVar1 * 2 + 1) & 8) != 0);\u000a  return string;\u000a}\u000a\u000a
p486
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401770\nMOV RAX,qword ptr [RAX]\nDEC RBX\nNOP\nMOVZX ECX,byte ptr [RBX + 0x1]\nINC RBX\nTEST byte ptr [RAX + RCX*0x2 + 0x1],0x8\nJNZ 0x00403920\nMOV RAX,RBX\nPOP RBX\nRET\n'
p487
S'53\n48 89 fb\ne8 57 de ff ff\n48 8b 00\n48 ff cb\n90\n0f b6 4b 01\n48 ff c3\nf6 44 48 01 08\n75 f2\n48 89 d8\n5b\nc3\n'
p488
S'.text:0000000000403910\n.text:0000000000403911\n.text:0000000000403914\n.text:0000000000403919\n.text:000000000040391c\n.text:000000000040391f\n.text:0000000000403920\n.text:0000000000403924\n.text:0000000000403927\n.text:000000000040392c\n.text:000000000040392e\n.text:0000000000403931\n.text:0000000000403932\n'
p489
tp490
sS'Format_Len_Unicode'
p491
(S'\n__stdcall Format_Len_Unicode()\n'
p492
V\u000achar * Format_Len_Unicode(void)\u000a\u000a{\u000a  uint uVar1;\u000a  char *__s;\u000a  char *__src;\u000a  size_t sVar2;\u000a  char *extraout_RAX;\u000a  char *string;\u000a  \u000a  uVar1 = is_valid_utf8(string);\u000a  if (uVar1 < 5) {\u000a    __s = "<Invalid UTF-8 string: Forbidden value> ";\u000a    switch(uVar1) {\u000a    case 0:\u000a      is_utf8_locale();\u000a      __s = Format_Len_String();\u000a      return __s;\u000a    case 2:\u000a      __s = "<Invalid UTF-8 string: Overlong encoding> ";\u000a      break;\u000a    case 3:\u000a      __s = "<Invalid UTF-8 string: Tail too short> ";\u000a      break;\u000a    case 4:\u000a      __s = "<Invalid UTF-8 string: Tail too long> ";\u000a    }\u000a  }\u000a  else {\u000a    __s = "<Invalid UTF-8 string: Unknown error>";\u000a  }\u000a  Format_Len_String();\u000a  __src = (char *)__strdup(_formatting_buffer);\u000a  if (__src != (char *)0x0) {\u000a    sVar2 = strlen(__s);\u000a    memcpy(_formatting_buffer,__s,sVar2 + 1);\u000a    strcat(_formatting_buffer,__src);\u000a    free(__src);\u000a    return extraout_RAX;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  Fatal_Error("Out of memory!");\u000a}\u000a\u000a
p493
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBP,RDI\nCALL 0x00404950\nCMP EAX,0x4\nJA 0x004041d8\nMOV EBX,0x406734\nMOV EAX,EAX\nJMP qword ptr [0x4050e8 + RAX*0x8]\nCALL 0x00404a90\nMOV RDI,RBP\nMOV ESI,R14D\nMOV EDX,EAX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00404140\nMOV EBX,0x4067d7\nJMP 0x004041f2\nMOV EBX,0x40675d\nJMP 0x004041f2\nMOV EBX,0x406788\nJMP 0x004041f2\nMOV EBX,0x4067b0\nXOR EDX,EDX\nMOV RDI,RBP\nMOV ESI,R14D\nCALL 0x00404140\nMOV EDI,0x6832b0\nCALL 0x00401510\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00404243\nMOV RDI,RBX\nCALL 0x00401460\nLEA RDX,[RAX + 0x1]\nMOV EDI,0x6832b0\nMOV RSI,RBX\nCALL 0x00401570\nMOV EDI,0x6832b0\nMOV RSI,RBP\nCALL 0x00401710\nMOV RDI,RBP\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004013c0\nMOV EDI,0x4060b5\nXOR EAX,EAX\nCALL 0x00401a80\n'
p494
S'55\n41 56\n53\n41 89 f6\n48 89 fd\ne8 a1 07 00 00\n83 f8 04\n77 24\nbb 34 67 40 00\n89 c0\nff 24 c5 e8 50 40 00\ne8 c9 08 00 00\n48 89 ef\n44 89 f6\n89 c2\n5b\n41 5e\n5d\ne9 68 ff ff ff\nbb d7 67 40 00\neb 13\nbb 5d 67 40 00\neb 0c\nbb 88 67 40 00\neb 05\nbb b0 67 40 00\n31 d2\n48 89 ef\n44 89 f6\ne8 41 ff ff ff\nbf b0 32 68 00\ne8 07 d3 ff ff\n48 89 c5\n48 85 ed\n74 32\n48 89 df\ne8 47 d2 ff ff\n48 8d 50 01\nbf b0 32 68 00\n48 89 de\ne8 46 d3 ff ff\nbf b0 32 68 00\n48 89 ee\ne8 d9 d4 ff ff\n48 89 ef\n5b\n41 5e\n5d\ne9 7d d1 ff ff\nbf b5 60 40 00\n31 c0\ne8 31 d8 ff ff\n'
p495
S'.text:00000000004041a0\n.text:00000000004041a1\n.text:00000000004041a3\n.text:00000000004041a4\n.text:00000000004041a7\n.text:00000000004041aa\n.text:00000000004041af\n.text:00000000004041b2\n.text:00000000004041b4\n.text:00000000004041b9\n.text:00000000004041bb\n.text:00000000004041c2\n.text:00000000004041c7\n.text:00000000004041ca\n.text:00000000004041cd\n.text:00000000004041cf\n.text:00000000004041d0\n.text:00000000004041d2\n.text:00000000004041d3\n.text:00000000004041d8\n.text:00000000004041dd\n.text:00000000004041df\n.text:00000000004041e4\n.text:00000000004041e6\n.text:00000000004041eb\n.text:00000000004041ed\n.text:00000000004041f2\n.text:00000000004041f4\n.text:00000000004041f7\n.text:00000000004041fa\n.text:00000000004041ff\n.text:0000000000404204\n.text:0000000000404209\n.text:000000000040420c\n.text:000000000040420f\n.text:0000000000404211\n.text:0000000000404214\n.text:0000000000404219\n.text:000000000040421d\n.text:0000000000404222\n.text:0000000000404225\n.text:000000000040422a\n.text:000000000040422f\n.text:0000000000404232\n.text:0000000000404237\n.text:000000000040423a\n.text:000000000040423b\n.text:000000000040423d\n.text:000000000040423e\n.text:0000000000404243\n.text:0000000000404248\n.text:000000000040424a\n'
p496
tp497
sS'XmbTextListToTextProperty'
p498
(S'\n__stdcall XmbTextListToTextProperty()\n'
p499
V\u000avoid XmbTextListToTextProperty(void)\u000a\u000a{\u000a  (*(code *)PTR_XmbTextListToTextProperty_00608058)();\u000a  return;\u000a}\u000a\u000a
p500
S'JMP qword ptr [0x00608058]\n'
p501
S'ff 25 22 6c 20 00\n'
p502
S'.plt:0000000000401430\n'
p503
tp504
sS'atol'
p505
(S'\n__stdcall atol(char * __nptr)\n'
p506
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000along atol(char *__nptr)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  lVar1 = (*(code *)PTR_atol_00608188)();\u000a  return lVar1;\u000a}\u000a\u000a
p507
S'JMP qword ptr [0x00608188]\n'
p508
S'ff 25 f2 6a 20 00\n'
p509
S'.plt:0000000000401690\n'
p510
tp511
sS'fflush'
p512
(S'\n__stdcall fflush(FILE * __stream)\n'
p513
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fflush(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fflush_00608128)();\u000a  return iVar1;\u000a}\u000a\u000a
p514
S'JMP qword ptr [0x00608128]\n'
p515
S'ff 25 52 6b 20 00\n'
p516
S'.plt:00000000004015d0\n'
p517
tp518
sS'Break_Down_Property'
p519
(S'\n__stdcall Break_Down_Property(char * pointer, Atom type, char * format)\n'
p520
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000athunk * Break_Down_Property(char *pointer,Atom type,char *format)\u000a\u000a{\u000a  char cVar1;\u000a  thunk *list;\u000a  char *format_00;\u000a  uint in_R8D;\u000a  int iVar2;\u000a  int local_7c;\u000a  char *local_78;\u000a  char *local_70;\u000a  undefined4 local_68;\u000a  undefined4 uStack100;\u000a  undefined4 uStack96;\u000a  undefined4 uStack92;\u000a  undefined8 local_58;\u000a  undefined8 local_50;\u000a  undefined4 local_48;\u000a  undefined4 uStack68;\u000a  undefined4 uStack64;\u000a  undefined4 uStack60;\u000a  undefined8 local_38;\u000a  \u000a  local_48 = 0;\u000a  uStack68 = 0;\u000a  uStack64 = 0;\u000a  uStack60 = 0;\u000a  local_58 = 0;\u000a  local_50 = (char *)0x0;\u000a  local_68 = 0;\u000a  uStack100 = 0;\u000a  uStack96 = 0;\u000a  uStack92 = 0;\u000a  local_38 = 0;\u000a  local_7c = (int)type;\u000a  local_78 = pointer;\u000a  local_70 = format;\u000a  list = Create_Thunk_List();\u000a  iVar2 = (int)(((uint)((int)in_R8D >> 0x1f) >> 0x1d) + in_R8D) >> 3;\u000a  if (iVar2 <= (int)type) {\u000a    do {\u000a      cVar1 = Get_Format_Char(format_00);\u000a      switch(cVar1) {\u000a      case 'o':\u000a        local_58 = Extract_Icon(&local_78,&local_7c,(char **)(ulong)in_R8D);\u000a        break;\u000a      default:\u000a        local_58 = Extract_Value(&local_78,&local_7c);\u000a        break;\u000a      case 't':\u000a        local_50 = local_70;\u000a      case 's':\u000a      case 'u':\u000a        local_58 = Extract_Len_String(&local_78,&local_7c,(char **)(ulong)in_R8D);\u000a      }\u000a      local_58._4_4_ = (undefined4)((ulong)local_58 >> 0x20);\u000a      list = Add_Thunk(list,(thunk)CONCAT848(local_38,CONCAT444(uStack60,CONCAT440(uStack64,\u000a                                                  CONCAT436(uStack68,CONCAT432(local_48,CONCAT428(\u000a                                                  local_50._4_4_,\u000a                                                  CONCAT424((undefined4)local_50,\u000a                                                            CONCAT420(local_58._4_4_,\u000a                                                                      CONCAT416((undefined4)local_58\u000a                                                                                ,CONCAT412(uStack92,\u000a                                                  CONCAT48(uStack96,CONCAT44(uStack100,local_68)))))\u000a                                                  ))))))));\u000a    } while (iVar2 <= local_7c);\u000a  }\u000a  return list;\u000a}\u000a\u000a
p521
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x88\nMOV R15D,R8D\nMOV R14,RCX\nMOV qword ptr [RSP + 0x48],RDX\nMOV EBP,ESI\nMOV qword ptr [RSP + 0x40],RDI\nMOV dword ptr [RSP + 0x3c],EBP\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x70],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM0\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOV qword ptr [0x80 + RSP],0x0\nCALL 0x00402c10\nMOV RBX,RAX\nMOV R13D,R15D\nSAR R13D,0x1f\nSHR R13D,0x1d\nADD R13D,R15D\nSAR R13D,0x3\nCMP R13D,EBP\nJG 0x00403b66\nXOR EBP,EBP\nLEA R12,[RSP + 0x3c]\nNOP\nMOV RDI,R14\nMOV ESI,EBP\nCALL 0x00403870\nMOV ECX,EAX\nADD CL,0x91\nCMP CL,0x6\nJA 0x00403ae0\nMOVZX ECX,CL\nJMP qword ptr [0x404ff0 + RCX*0x8]\nLEA RDI,[RSP + 0x40]\nMOV RSI,R12\nMOV EDX,R15D\nLEA RCX,[RSP + 0x70]\nCALL 0x00403de0\nJMP 0x00403b1f\nXOR ECX,ECX\nCMP AL,0x69\nSETZ CL\nLEA RDI,[RSP + 0x40]\nMOV RSI,R12\nMOV EDX,R15D\nCALL 0x00403e10\nJMP 0x00403b1f\nMOV RAX,qword ptr [RSP + 0x48]\nMOV qword ptr [RSP + 0x68],RAX\nLEA RDI,[RSP + 0x40]\nMOV RSI,R12\nMOV EDX,R15D\nLEA RCX,[RSP + 0x70]\nCALL 0x00403da0\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0x80 + RSP]\nMOV qword ptr [RSP + 0x30],RAX\nMOVAPS XMM0,xmmword ptr [RSP + 0x50]\nMOVAPS XMM1,xmmword ptr [RSP + 0x60]\nMOVAPS XMM2,xmmword ptr [RSP + 0x70]\nMOVUPS xmmword ptr [RSP + 0x20],XMM2\nMOVUPS xmmword ptr [RSP + 0x10],XMM1\nMOVUPS xmmword ptr [RSP],XMM0\nMOV RDI,RBX\nCALL 0x00402c40\nMOV RBX,RAX\nINC EBP\nCMP dword ptr [RSP + 0x3c],R13D\nJGE 0x00403aa0\nMOV RAX,RBX\nADD RSP,0x88\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p522
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 88 00 00 00\n45 89 c7\n49 89 ce\n48 89 54 24 48\n89 f5\n48 89 7c 24 40\n89 6c 24 3c\n0f 57 c0\n0f 29 44 24 70\n0f 29 44 24 60\n0f 29 44 24 50\n48 c7 84 24 80 00 00 00 00 00 00 00\ne8 96 f1 ff ff\n48 89 c3\n45 89 fd\n41 c1 fd 1f\n41 c1 ed 1d\n45 01 fd\n41 c1 fd 03\n41 39 ed\n0f 8f ce 00 00 00\n31 ed\n4c 8d 64 24 3c\n90\n4c 89 f7\n89 ee\ne8 c6 fd ff ff\n89 c1\n80 c1 91\n80 f9 06\n77 2c\n0f b6 c9\nff 24 cd f0 4f 40 00\n48 8d 7c 24 40\n4c 89 e6\n44 89 fa\n48 8d 4c 24 70\ne8 0d 03 00 00\neb 4a\n31 c9\n3c 69\n0f 94 c1\n48 8d 7c 24 40\n4c 89 e6\n44 89 fa\ne8 19 03 00 00\neb 26\n48 8b 44 24 48\n48 89 44 24 68\n48 8d 7c 24 40\n4c 89 e6\n44 89 fa\n48 8d 4c 24 70\ne8 81 02 00 00\n48 89 44 24 60\n48 8b 84 24 80 00 00 00\n48 89 44 24 30\n0f 28 44 24 50\n0f 28 4c 24 60\n0f 28 54 24 70\n0f 11 54 24 20\n0f 11 4c 24 10\n0f 11 04 24\n48 89 df\ne8 ea f0 ff ff\n48 89 c3\nff c5\n44 39 6c 24 3c\n0f 8d 3a ff ff ff\n48 89 d8\n48 81 c4 88 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p523
S'.text:0000000000403a30\n.text:0000000000403a31\n.text:0000000000403a33\n.text:0000000000403a35\n.text:0000000000403a37\n.text:0000000000403a39\n.text:0000000000403a3a\n.text:0000000000403a41\n.text:0000000000403a44\n.text:0000000000403a47\n.text:0000000000403a4c\n.text:0000000000403a4e\n.text:0000000000403a53\n.text:0000000000403a57\n.text:0000000000403a5a\n.text:0000000000403a5f\n.text:0000000000403a64\n.text:0000000000403a69\n.text:0000000000403a75\n.text:0000000000403a7a\n.text:0000000000403a7d\n.text:0000000000403a80\n.text:0000000000403a84\n.text:0000000000403a88\n.text:0000000000403a8b\n.text:0000000000403a8f\n.text:0000000000403a92\n.text:0000000000403a98\n.text:0000000000403a9a\n.text:0000000000403a9f\n.text:0000000000403aa0\n.text:0000000000403aa3\n.text:0000000000403aa5\n.text:0000000000403aaa\n.text:0000000000403aac\n.text:0000000000403aaf\n.text:0000000000403ab2\n.text:0000000000403ab4\n.text:0000000000403ab7\n.text:0000000000403abe\n.text:0000000000403ac3\n.text:0000000000403ac6\n.text:0000000000403ac9\n.text:0000000000403ace\n.text:0000000000403ad3\n.text:0000000000403ae0\n.text:0000000000403ae2\n.text:0000000000403ae4\n.text:0000000000403ae7\n.text:0000000000403aec\n.text:0000000000403aef\n.text:0000000000403af2\n.text:0000000000403af7\n.text:0000000000403b00\n.text:0000000000403b05\n.text:0000000000403b0a\n.text:0000000000403b0f\n.text:0000000000403b12\n.text:0000000000403b15\n.text:0000000000403b1a\n.text:0000000000403b1f\n.text:0000000000403b24\n.text:0000000000403b2c\n.text:0000000000403b31\n.text:0000000000403b36\n.text:0000000000403b3b\n.text:0000000000403b40\n.text:0000000000403b45\n.text:0000000000403b4a\n.text:0000000000403b4e\n.text:0000000000403b51\n.text:0000000000403b56\n.text:0000000000403b59\n.text:0000000000403b5b\n.text:0000000000403b60\n.text:0000000000403b66\n.text:0000000000403b69\n.text:0000000000403b70\n.text:0000000000403b71\n.text:0000000000403b73\n.text:0000000000403b75\n.text:0000000000403b77\n.text:0000000000403b79\n.text:0000000000403b7a\n'
p524
tp525
sS'_init'
p526
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p527
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00607ff8;\u000a  if (PTR___gmon_start___00607ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00607ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p528
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00607ff8]\nTEST RAX,RAX\nJZ 0x00401392\nCALL RAX\nADD RSP,0x8\nRET\n'
p529
S'48 83 ec 08\n48 8b 05 6d 6c 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p530
S'.init:0000000000401380\n.init:0000000000401384\n.init:000000000040138b\n.init:000000000040138e\n.init:0000000000401390\n.init:0000000000401392\n.init:0000000000401396\n'
p531
tp532
sS'Show_All_Props'
p533
(S'\n__stdcall Show_All_Props()\n'
p534
V\u000avoid Show_All_Props(void)\u000a\u000a{\u000a  undefined8 in_RAX;\u000a  long lVar1;\u000a  char *prop;\u000a  long lVar2;\u000a  int count;\u000a  undefined8 uStack24;\u000a  \u000a  if (target_win == 0xffffffffffffffff) {\u000a    if (0 < font->n_properties) {\u000a      lVar2 = 0;\u000a      lVar1 = 0;\u000a      do {\u000a        prop = Format_Atom(*(Atom *)((long)&font->properties->name + lVar2));\u000a        Show_Prop((char *)0x0,(char *)0x0,prop);\u000a        lVar1 = lVar1 + 1;\u000a        lVar2 = lVar2 + 0x10;\u000a      } while (lVar1 < (long)font->n_properties);\u000a    }\u000a  }\u000a  else {\u000a    uStack24 = in_RAX;\u000a    lVar1 = XListProperties(dpy,target_win,(long)&uStack24 + 4);\u000a    if (0 < uStack24._4_4_) {\u000a      lVar2 = 0;\u000a      do {\u000a        prop = Format_Atom(*(Atom *)(lVar1 + lVar2 * 8));\u000a        Show_Prop((char *)0x0,(char *)0x0,prop);\u000a        lVar2 = lVar2 + 1;\u000a      } while (lVar2 < (long)uStack24._4_4_);\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p535
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RSI,qword ptr [0x00608bb0]\nCMP RSI,-0x1\nJZ 0x00403994\nMOV RDI,qword ptr [0x00608b90]\nLEA RDX,[RSP + 0x4]\nCALL 0x004014b0\nMOV R14,RAX\nCMP dword ptr [RSP + 0x4],0x0\nJLE 0x004039e0\nXOR EBX,EBX\nNOP\nMOV RDI,qword ptr [R14 + RBX*0x8]\nCALL 0x004034d0\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,RAX\nCALL 0x00403390\nINC RBX\nMOVSXD RAX,dword ptr [RSP + 0x4]\nCMP RBX,RAX\nJL 0x00403970\nJMP 0x004039e0\nMOV RAX,qword ptr [0x00608bc8]\nCMP dword ptr [RAX + 0x2c],0x0\nJLE 0x004039e0\nXOR R14D,R14D\nXOR EBX,EBX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RAX,qword ptr [RAX + 0x30]\nMOV RDI,qword ptr [RAX + R14*0x1]\nCALL 0x004034d0\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,RAX\nCALL 0x00403390\nINC RBX\nMOV RAX,qword ptr [0x00608bc8]\nMOVSXD RCX,dword ptr [RAX + 0x2c]\nADD R14,0x10\nCMP RBX,RCX\nJL 0x004039b0\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p536
S'41 56\n53\n50\n48 8b 35 65 52 20 00\n48 83 fe ff\n74 43\n48 8b 3d 38 52 20 00\n48 8d 54 24 04\ne8 4e db ff ff\n49 89 c6\n83 7c 24 04 00\n7e 74\n31 db\n66 90\n49 8b 3c de\ne8 57 fb ff ff\n31 ff\n31 f6\n48 89 c2\ne8 0b fa ff ff\n48 ff c3\n48 63 44 24 04\n48 39 c3\n7c de\neb 4c\n48 8b 05 2d 52 20 00\n83 78 2c 00\n7e 3f\n45 31 f6\n31 db\n66 2e 0f 1f 84 00 00 00 00 00\n48 8b 40 30\n4a 8b 3c 30\ne8 13 fb ff ff\n31 ff\n31 f6\n48 89 c2\ne8 c7 f9 ff ff\n48 ff c3\n48 8b 05 f5 51 20 00\n48 63 48 2c\n49 83 c6 10\n48 39 cb\n7c d0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p537
S'.text:0000000000403940\n.text:0000000000403942\n.text:0000000000403943\n.text:0000000000403944\n.text:000000000040394b\n.text:000000000040394f\n.text:0000000000403951\n.text:0000000000403958\n.text:000000000040395d\n.text:0000000000403962\n.text:0000000000403965\n.text:000000000040396a\n.text:000000000040396c\n.text:000000000040396e\n.text:0000000000403970\n.text:0000000000403974\n.text:0000000000403979\n.text:000000000040397b\n.text:000000000040397d\n.text:0000000000403980\n.text:0000000000403985\n.text:0000000000403988\n.text:000000000040398d\n.text:0000000000403990\n.text:0000000000403992\n.text:0000000000403994\n.text:000000000040399b\n.text:000000000040399f\n.text:00000000004039a1\n.text:00000000004039a4\n.text:00000000004039a6\n.text:00000000004039b0\n.text:00000000004039b4\n.text:00000000004039b8\n.text:00000000004039bd\n.text:00000000004039bf\n.text:00000000004039c1\n.text:00000000004039c4\n.text:00000000004039c9\n.text:00000000004039cc\n.text:00000000004039d3\n.text:00000000004039d7\n.text:00000000004039db\n.text:00000000004039de\n.text:00000000004039e0\n.text:00000000004039e4\n.text:00000000004039e5\n.text:00000000004039e7\n'
p538
tp539
sS'Create_Thunk_List'
p540
(S'\n__stdcall Create_Thunk_List()\n'
p541
V\u000athunk * Create_Thunk_List(void)\u000a\u000a{\u000a  thunk *ptVar1;\u000a  \u000a  ptVar1 = (thunk *)malloc(0x38);\u000a  if (ptVar1 != (thunk *)0x0) {\u000a    ptVar1->thunk_count = 0;\u000a    return ptVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  Fatal_Error("Out of memory!");\u000a}\u000a\u000a
p542
S'PUSH RAX\nMOV EDI,0x38\nCALL 0x004015c0\nTEST RAX,RAX\nJZ 0x00402c28\nMOV dword ptr [RAX],0x0\nPOP RCX\nRET\nMOV EDI,0x4060b5\nXOR EAX,EAX\nCALL 0x00401a80\n'
p543
S'50\nbf 38 00 00 00\ne8 a5 e9 ff ff\n48 85 c0\n74 08\nc7 00 00 00 00 00\n59\nc3\nbf b5 60 40 00\n31 c0\ne8 4c ee ff ff\n'
p544
S'.text:0000000000402c10\n.text:0000000000402c11\n.text:0000000000402c16\n.text:0000000000402c1b\n.text:0000000000402c1e\n.text:0000000000402c20\n.text:0000000000402c26\n.text:0000000000402c27\n.text:0000000000402c28\n.text:0000000000402c2d\n.text:0000000000402c2f\n'
p545
tp546
sS'Get_Font_Property_Data_And_Type'
p547
(S'\n__stdcall Get_Font_Property_Data_And_Type(Atom atom, long * length, Atom * type, int * size)\n'
p548
V\u000achar * Get_Font_Property_Data_And_Type(Atom atom,long *length,Atom *type,int *size)\u000a\u000a{\u000a  long lVar1;\u000a  long lVar2;\u000a  \u000a  *type = 0;\u000a  if (0 < font->n_properties) {\u000a    lVar2 = 0;\u000a    lVar1 = 8;\u000a    do {\u000a      if (*(Atom *)((long)&font->properties[-1].card32 + lVar1) == atom) {\u000a        _font_prop = *(ulong *)((long)&font->properties->name + lVar1);\u000a        *length = 8;\u000a        *size = 0x20;\u000a        return (char *)&_font_prop;\u000a      }\u000a      lVar2 = lVar2 + 1;\u000a      lVar1 = lVar1 + 0x10;\u000a    } while (lVar2 < (long)font->n_properties);\u000a  }\u000a  *size = 0;\u000a  return (char *)0x0;\u000a}\u000a\u000a
p549
S'MOV qword ptr [RDX],0x0\nMOV R9,qword ptr [0x00608bc8]\nCMP dword ptr [R9 + 0x2c],0x0\nJLE 0x00403c5e\nMOV R8,qword ptr [0x00608bc8]\nXOR R10D,R10D\nMOV EAX,0x8\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RDX,qword ptr [R9 + 0x30]\nCMP qword ptr [RDX + RAX*0x1 + -0x8],RDI\nJZ 0x00403c65\nINC R10\nMOVSXD RDX,dword ptr [R8 + 0x2c]\nADD RAX,0x10\nCMP R10,RDX\nMOV R9,R8\nJL 0x00403c40\nXOR EDX,EDX\nXOR EAX,EAX\nMOV dword ptr [RCX],EDX\nRET\nMOV RAX,qword ptr [RDX + RAX*0x1]\nMOV qword ptr [0x006832a8],RAX\nMOV EAX,0x6832a8\nMOV qword ptr [RSI],0x8\nMOV EDX,0x20\nMOV dword ptr [RCX],EDX\nRET\n'
p550
S'48 c7 02 00 00 00 00\n4c 8b 0d aa 4f 20 00\n41 83 79 2c 00\n7e 39\n4c 8b 05 9c 4f 20 00\n45 31 d2\nb8 08 00 00 00\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 8b 51 30\n48 39 7c 02 f8\n74 1a\n49 ff c2\n49 63 50 2c\n48 83 c0 10\n49 39 d2\n4d 89 c1\n7c e2\n31 d2\n31 c0\n89 11\nc3\n48 8b 04 02\n48 89 05 38 f6 27 00\nb8 a8 32 68 00\n48 c7 06 08 00 00 00\nba 20 00 00 00\n89 11\nc3\n'
p551
S'.text:0000000000403c10\n.text:0000000000403c17\n.text:0000000000403c1e\n.text:0000000000403c23\n.text:0000000000403c25\n.text:0000000000403c2c\n.text:0000000000403c2f\n.text:0000000000403c34\n.text:0000000000403c40\n.text:0000000000403c44\n.text:0000000000403c49\n.text:0000000000403c4b\n.text:0000000000403c4e\n.text:0000000000403c52\n.text:0000000000403c56\n.text:0000000000403c59\n.text:0000000000403c5c\n.text:0000000000403c5e\n.text:0000000000403c60\n.text:0000000000403c62\n.text:0000000000403c64\n.text:0000000000403c65\n.text:0000000000403c69\n.text:0000000000403c70\n.text:0000000000403c75\n.text:0000000000403c7c\n.text:0000000000403c81\n.text:0000000000403c83\n'
p552
tp553
sS'main'
p554
(S'\n__stdcall main(char * * argv)\n'
p555
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000aint main(char **argv)\u000a\u000a{\u000a  bool bVar1;\u000a  int iVar2;\u000a  char *__filename;\u000a  FILE *stream;\u000a  thunk *list;\u000a  thunk *list_00;\u000a  char *prop;\u000a  long lVar3;\u000a  long *plVar4;\u000a  uint uVar5;\u000a  char **ppcVar6;\u000a  char *dformat;\u000a  char **argv_00;\u000a  long lVar7;\u000a  XEvent event;\u000a  uint local_104;\u000a  char **local_100;\u000a  int local_f8;\u000a  undefined4 uStack244;\u000a  undefined8 local_f0;\u000a  undefined4 local_e8;\u000a  undefined4 uStack228;\u000a  undefined4 uStack224;\u000a  undefined4 uStack220;\u000a  undefined8 local_d8;\u000a  undefined4 local_d0;\u000a  undefined4 uStack204;\u000a  undefined8 local_c8;\u000a  \u000a  local_104 = (uint)argv;\u000a  program_name = *argv_00;\u000a  local_100 = argv_00;\u000a  setlocale(0,"");\u000a  Setup_Display_And_Screen((int *)&local_104,argv_00);\u000a  target_win = Select_Window_Args((int *)&local_104,local_100);\u000a  XpropMode = 0;\u000a  uVar5 = local_104;\u000a  ppcVar6 = local_100;\u000a  while (uVar5 != 0) {\u000a    iVar2 = strcmp(*ppcVar6,"-font");\u000a    if (iVar2 == 0) {\u000a      XpropMode = 1;\u000a      break;\u000a    }\u000a    ppcVar6 = ppcVar6 + 1;\u000a    uVar5 = uVar5 - 1;\u000a  }\u000a  Setup_Mapping();\u000a  __filename = getenv("XPROPFORMATS");\u000a  if (__filename != (char *)0x0) {\u000a    stream = (FILE *)fopen(__filename,"r");\u000a    if (stream == (FILE *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      Fatal_Error("unable to open file %s for reading.",__filename);\u000a    }\u000a    Read_Mappings(stream);\u000a    fclose((FILE *)stream);\u000a  }\u000a  local_100 = local_100 + 1;\u000a  if ((int)local_104 < 2) {\u000a    list = (thunk *)0x0;\u000a    list_00 = (thunk *)0x0;\u000a    local_104 = local_104 - 1;\u000a  }\u000a  else {\u000a    list_00 = (thunk *)0x0;\u000a    list = (thunk *)0x0;\u000a    local_104 = local_104 - 1;\u000a    do {\u000a      ppcVar6 = local_100;\u000a      if (**local_100 != '-') break;\u000a      if ((*local_100)[1] != 0) {\u000a        __filename = *local_100;\u000a        iVar2 = strcmp(__filename,"-grammar");\u000a        if (iVar2 == 0) {\u000a          grammar();\u000a          goto LAB_00402a29;\u000a        }\u000a        iVar2 = strcmp(__filename,"-notype");\u000a        if (iVar2 == 0) {\u000a          notype = 1;\u000a        }\u000a        else {\u000a          iVar2 = strcmp(__filename,"-spy");\u000a          if (iVar2 == 0) {\u000a            spy = 1;\u000a          }\u000a          else {\u000a            iVar2 = strcmp(__filename,"-len");\u000a            if (iVar2 == 0) {\u000a              local_100 = ppcVar6 + 1;\u000a              local_104 = local_104 - 1;\u000a              if (local_104 == 0) {\u000aLAB_00402a29:\u000a                    /* WARNING: Subroutine does not return */\u000a                usage();\u000a              }\u000a              max_len = atoi(*local_100);\u000a            }\u000a            else {\u000a              iVar2 = strcmp(__filename,"-formats");\u000a              ppcVar6 = local_100;\u000a              if ((iVar2 == 0) ||\u000a                 ((((*__filename == '-' && (__filename[1] == 'f')) && (__filename[2] == 's')) &&\u000a                  (__filename[3] == 0)))) {\u000a                local_100 = local_100 + 1;\u000a                local_104 = local_104 - 1;\u000a                if (local_104 == 0) goto LAB_00402a29;\u000a                stream = (FILE *)fopen(*local_100,"r");\u000a                if (stream == (FILE *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a                  Fatal_Error("unable to open file %s for reading.",*local_100);\u000a                }\u000a                Read_Mappings(stream);\u000a                fclose((FILE *)stream);\u000a              }\u000a              else {\u000a                __filename = *local_100;\u000a                iVar2 = strcmp(__filename,"-font");\u000a                if (iVar2 == 0) {\u000a                  local_100 = ppcVar6 + 1;\u000a                  local_104 = local_104 - 1;\u000a                  if (local_104 == 0) {\u000aLAB_00402a5a:\u000a                    /* WARNING: Subroutine does not return */\u000a                    usage();\u000a                  }\u000a                  font = Open_Font(*local_100);\u000a                  target_win = 0xffffffffffffffff;\u000a                }\u000a                else {\u000a                  iVar2 = strcmp(__filename,"-remove");\u000a                  if (iVar2 == 0) {\u000a                    local_d8 = (char *)0x0;\u000a                    local_d0 = 0;\u000a                    uStack204 = 0;\u000a                    local_e8 = 0;\u000a                    uStack228 = 0;\u000a                    uStack224 = 0;\u000a                    uStack220 = 0;\u000a                    local_f8 = 0;\u000a                    uStack244 = 0;\u000a                    local_f0 = (char *)0x0;\u000a                    local_c8 = 0;\u000a                    local_100 = local_100 + 1;\u000a                    local_104 = local_104 - 1;\u000a                    if (local_104 == 0) goto LAB_00402a5a;\u000a                    local_f0 = *local_100;\u000a                    if (list_00 == (thunk *)0x0) {\u000a                      list_00 = Create_Thunk_List();\u000a                    }\u000a                    list_00 = Add_Thunk(list_00,(thunk)CONCAT848(local_c8,CONCAT444(uStack204,\u000a                                                                                    CONCAT440(\u000a                                                  local_d0,CONCAT436(local_d8._4_4_,\u000a                                                                     CONCAT432((undefined4)local_d8,\u000a                                                                               CONCAT428(uStack220,\u000a                                                                                         CONCAT424(\u000a                                                  uStack224,\u000a                                                  CONCAT420(uStack228,\u000a                                                            CONCAT416(local_e8,CONCAT412(local_f0.\u000a                                                  _4_4_,CONCAT48((undefined4)local_f0,\u000a                                                                 CONCAT44(uStack244,local_f8))))))))\u000a                                                  )))));\u000a                  }\u000a                  else {\u000a                    iVar2 = strcmp(__filename,"-set");\u000a                    if (iVar2 == 0) {\u000a                      local_d8 = (char *)0x0;\u000a                      local_d0 = 0;\u000a                      uStack204 = 0;\u000a                      local_e8 = 0;\u000a                      uStack228 = 0;\u000a                      uStack224 = 0;\u000a                      uStack220 = 0;\u000a                      local_f8 = 0;\u000a                      uStack244 = 0;\u000a                      local_f0 = (char *)0x0;\u000a                      local_c8 = 0;\u000a                      if ((int)local_104 < 3) goto LAB_00402a5a;\u000a                      local_f0 = local_100[1];\u000a                      local_d8 = local_100[2];\u000a                      local_100 = local_100 + 3;\u000a                      local_104 = local_104 - 3;\u000a                      if (list == (thunk *)0x0) {\u000a                        list = Create_Thunk_List();\u000a                      }\u000a                      list = Add_Thunk(list,(thunk)CONCAT848(local_c8,CONCAT444(uStack204,\u000a                                                                                CONCAT440(local_d0,\u000a                                                  CONCAT436(local_d8._4_4_,\u000a                                                            CONCAT432((undefined4)local_d8,\u000a                                                                      CONCAT428(uStack220,\u000a                                                                                CONCAT424(uStack224,\u000a                                                                                          CONCAT420(\u000a                                                  uStack228,\u000a                                                  CONCAT416(local_e8,CONCAT412(local_f0._4_4_,\u000a                                                                               CONCAT48((undefined4)\u000a                                                                                        local_f0,\u000a                                                  CONCAT44(uStack244,local_f8)))))))))))));\u000a                    }\u000a                    else {\u000a                      iVar2 = strcmp(__filename,"-frame");\u000a                      if (iVar2 != 0) {\u000a                        if ((((*__filename != '-') || (__filename[1] != 'f')) ||\u000a                            (__filename[2] != 0)) &&\u000a                           (iVar2 = strcmp(*local_100,"-format"), iVar2 != 0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a                          usage();\u000a                        }\u000a                        Parse_Format_Mapping((int *)&local_104,&local_100);\u000a                      }\u000a                    }\u000a                  }\u000a                }\u000a              }\u000a            }\u000a          }\u000a        }\u000a      }\u000a      local_100 = local_100 + 1;\u000a      uVar5 = local_104 - 1;\u000a      bVar1 = 1 < (int)local_104;\u000a      local_104 = uVar5;\u000a    } while (bVar1);\u000a  }\u000a  if ((((ulong)list | (ulong)list_00) != 0) && (0 < (int)local_104)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    usage();\u000a  }\u000a  if (target_win == 0) {\u000a    target_win = Select_Window(dpy);\u000a  }\u000a  if (list_00 == (thunk *)0x0) {\u000a    list_00 = (thunk *)0x0;\u000a  }\u000a  else {\u000a    if (target_win == 0xffffffffffffffff) {\u000a                    /* WARNING: Subroutine does not return */\u000a      Fatal_Error("-remove works only on windows, not fonts");\u000a    }\u000a    if (0 < list_00->thunk_count) {\u000a      iVar2 = list_00->thunk_count + 1;\u000a      do {\u000a        Remove_Property(dpy,target_win,list_00->propname);\u000a        list_00 = list_00 + 1;\u000a        iVar2 = iVar2 + -1;\u000a      } while (1 < iVar2);\u000a    }\u000a  }\u000a  if (list == (thunk *)0x0) {\u000a    if (list_00 == (thunk *)0x0) {\u000a      list_00 = Handle_Prop_Requests((char **)(ulong)local_104);\u000a      if ((spy == 1) && (target_win != 0xffffffffffffffff)) {\u000a        XSelectInput(dpy,target_win,0x420000);\u000a        old_error_handler = (int (*)(Display *,XErrorEvent *))XSetErrorHandler(spy_error_handler);\u000a        do {\u000a          while( true ) {\u000a            fflush(stdout);\u000a            XNextEvent();\u000a            if (local_f8 != 0x1c) break;\u000a            if (list_00 == (thunk *)0x0) {\u000a              __filename = (char *)0x0;\u000a              dformat = (char *)0x0;\u000aLAB_00402999:\u000a              prop = Format_Atom(CONCAT44(uStack204,local_d0));\u000a              Show_Prop(__filename,dformat,prop);\u000a            }\u000a            else {\u000a              if (0 < list_00->thunk_count) {\u000a                lVar3 = 0;\u000a                lVar7 = 0;\u000a                plVar4 = &list_00->value;\u000a                do {\u000a                  if (*plVar4 == CONCAT44(uStack204,local_d0)) {\u000a                    __filename = list_00[lVar3 >> 0x20].format;\u000a                    dformat = list_00[lVar3 >> 0x20].dformat;\u000a                    goto LAB_00402999;\u000a                  }\u000a                  lVar7 = lVar7 + 1;\u000a                  lVar3 = lVar3 + 0x100000000;\u000a                  plVar4 = plVar4 + 7;\u000a                } while (lVar7 < (long)list_00->thunk_count);\u000a              }\u000a            }\u000a          }\u000a        } while (local_f8 != 0x11);\u000a      }\u000a                    /* WARNING: Subroutine does not return */\u000a      exit(0);\u000a    }\u000a  }\u000a  else {\u000a    if (target_win == 0xffffffffffffffff) {\u000a                    /* WARNING: Subroutine does not return */\u000a      Fatal_Error("-set works only on windows, not fonts");\u000a    }\u000a    if (0 < list->thunk_count) {\u000a      iVar2 = list->thunk_count + 1;\u000a      do {\u000a        Set_Property((char *)dpy);\u000a        iVar2 = iVar2 + -1;\u000a      } while (1 < iVar2);\u000a    }\u000a  }\u000a  XCloseDisplay();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(0);\u000a}\u000a\u000a
p556
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x118\nMOV RBX,RSI\nMOV dword ptr [RSP + 0x44],EDI\nMOV qword ptr [RSP + 0x48],RBX\nMOV RAX,qword ptr [RBX]\nMOV qword ptr [0x00608210],RAX\nXOR EDI,EDI\nMOV ESI,0x406838\nCALL 0x00401680\nLEA RBP,[RSP + 0x44]\nMOV RDI,RBP\nMOV RSI,RBX\nCALL 0x004019f0\nMOV RSI,qword ptr [RSP + 0x48]\nMOV RDI,RBP\nCALL 0x00401b70\nMOV qword ptr [0x00608bb0],RAX\nMOV byte ptr [0x00608bb8],0x0\nMOV EBX,dword ptr [RSP + 0x44]\nTEST EBX,EBX\nJZ 0x00402473\nMOV RBP,qword ptr [RSP + 0x48]\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RBP]\nMOV ESI,0x405586\nCALL 0x00401530\nTEST EAX,EAX\nJZ 0x0040246c\nADD RBP,0x8\nDEC EBX\nJNZ 0x00402450\nJMP 0x00402473\nMOV byte ptr [0x00608bb8],0x1\nCALL 0x00402a80\nMOV EDI,0x40558c\nCALL 0x004013b0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004024b3\nMOV ESI,0x4055c4\nMOV RDI,RBX\nCALL 0x004016b0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00402a33\nMOV RDI,RBP\nCALL 0x00402b00\nMOV RDI,RBP\nCALL 0x00401440\nADD qword ptr [RSP + 0x48],0x8\nMOV EAX,dword ptr [RSP + 0x44]\nLEA ECX,[RAX + -0x1]\nMOV dword ptr [RSP + 0x44],ECX\nCMP EAX,0x2\nJL 0x0040282c\nXOR R14D,R14D\nLEA R13,[RSP + 0x48]\nXOR EBX,EBX\nXOR R15D,R15D\nNOP word ptr [RAX + RAX*0x1]\nMOV RAX,qword ptr [RSP + 0x48]\nMOV RAX,qword ptr [RAX]\nCMP byte ptr [RAX],0x2d\nJNZ 0x00402834\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x00402810\nMOV R12,qword ptr [RSP + 0x48]\nMOV RBP,qword ptr [R12]\nMOV ESI,0x4055bd\nMOV RDI,RBP\nCALL 0x00401530\nTEST EAX,EAX\nJZ 0x00402a24\nMOV ESI,0x4055c6\nMOV RDI,RBP\nCALL 0x00401530\nTEST EAX,EAX\nJZ 0x00402630\nMOV ESI,0x4055ce\nMOV RDI,RBP\nCALL 0x00401530\nTEST EAX,EAX\nJZ 0x0040263c\nMOV ESI,0x4055d3\nMOV RDI,RBP\nCALL 0x00401530\nTEST EAX,EAX\nJZ 0x00402648\nMOV ESI,0x4055d8\nMOV RDI,RBP\nCALL 0x00401530\nTEST EAX,EAX\nJZ 0x00402673\nCMP byte ptr [RBP],0x2d\nJNZ 0x00402589\nCMP byte ptr [RBP + 0x1],0x66\nJNZ 0x00402589\nCMP byte ptr [RBP + 0x2],0x73\nJNZ 0x00402589\nCMP byte ptr [RBP + 0x3],0x0\nJZ 0x00402673\nMOV RBP,qword ptr [RSP + 0x48]\nMOV R12,qword ptr [RBP]\nMOV ESI,0x405586\nMOV RDI,R12\nCALL 0x00401530\nTEST EAX,EAX\nJZ 0x004026b6\nMOV ESI,0x4055e5\nMOV RDI,R12\nCALL 0x00401530\nTEST EAX,EAX\nJZ 0x004026ed\nMOV ESI,0x4055ed\nMOV RDI,R12\nCALL 0x00401530\nTEST EAX,EAX\nJZ 0x0040276f\nMOV ESI,0x4055f2\nMOV RDI,R12\nCALL 0x00401530\nTEST EAX,EAX\nJZ 0x00402801\nCMP byte ptr [R12],0x2d\nJNZ 0x004025fd\nCMP byte ptr [R12 + 0x1],0x66\nJNZ 0x004025fd\nCMP byte ptr [R12 + 0x2],0x0\nJZ 0x00402617\nMOV RAX,qword ptr [RSP + 0x48]\nMOV RDI,qword ptr [RAX]\nMOV ESI,0x4055fc\nCALL 0x00401530\nTEST EAX,EAX\nJNZ 0x00402a73\nLEA RDI,[RSP + 0x44]\nMOV RSI,R13\nCALL 0x00402ca0\nJMP 0x00402810\nMOV byte ptr [0x00608bbc],0x1\nJMP 0x00402810\nMOV byte ptr [0x00608bc0],0x1\nJMP 0x00402810\nADD R12,0x8\nMOV qword ptr [RSP + 0x48],R12\nDEC dword ptr [RSP + 0x44]\nJZ 0x00402a29\nMOV RAX,qword ptr [RSP + 0x48]\nMOV RDI,qword ptr [RAX]\nCALL 0x00401700\nMOV dword ptr [0x00608220],EAX\nJMP 0x00402810\nADD qword ptr [RSP + 0x48],0x8\nDEC dword ptr [RSP + 0x44]\nJZ 0x00402a29\nMOV RAX,qword ptr [RSP + 0x48]\nMOV RDI,qword ptr [RAX]\nMOV ESI,0x4055c4\nCALL 0x004016b0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00402a5f\nMOV RDI,RBP\nCALL 0x00402b00\nMOV RDI,RBP\nCALL 0x00401440\nJMP 0x00402810\nADD RBP,0x8\nMOV qword ptr [RSP + 0x48],RBP\nDEC dword ptr [RSP + 0x44]\nJZ 0x00402a5a\nMOV RAX,qword ptr [RSP + 0x48]\nMOV RDI,qword ptr [RAX]\nCALL 0x00401a50\nMOV qword ptr [0x00608bc8],RAX\nMOV qword ptr [0x00608bb0],-0x1\nJMP 0x00402810\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x70],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM0\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOV qword ptr [0x80 + RSP],0x0\nADD qword ptr [RSP + 0x48],0x8\nDEC dword ptr [RSP + 0x44]\nJZ 0x00402a5a\nMOV RAX,qword ptr [RSP + 0x48]\nMOV RAX,qword ptr [RAX]\nMOV qword ptr [RSP + 0x58],RAX\nTEST R14,R14\nJNZ 0x00402735\nCALL 0x00402c10\nMOV R14,RAX\nMOV RAX,qword ptr [0x80 + RSP]\nMOV qword ptr [RSP + 0x30],RAX\nMOVAPS XMM0,xmmword ptr [RSP + 0x50]\nMOVAPS XMM1,xmmword ptr [RSP + 0x60]\nMOVAPS XMM2,xmmword ptr [RSP + 0x70]\nMOVUPS xmmword ptr [RSP + 0x20],XMM2\nMOVUPS xmmword ptr [RSP + 0x10],XMM1\nMOVUPS xmmword ptr [RSP],XMM0\nMOV RDI,R14\nCALL 0x00402c40\nMOV R14,RAX\nJMP 0x00402810\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x70],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM0\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOV qword ptr [0x80 + RSP],0x0\nCMP dword ptr [RSP + 0x44],0x2\nJLE 0x00402a5a\nMOV RAX,qword ptr [RSP + 0x48]\nMOV RCX,qword ptr [RAX + 0x8]\nMOV qword ptr [RSP + 0x58],RCX\nMOV RCX,qword ptr [RAX + 0x10]\nMOV qword ptr [RSP + 0x70],RCX\nADD RAX,0x18\nMOV qword ptr [RSP + 0x48],RAX\nADD dword ptr [RSP + 0x44],-0x3\nTEST RBX,RBX\nJNZ 0x004027ca\nCALL 0x00402c10\nMOV RBX,RAX\nMOV RAX,qword ptr [0x80 + RSP]\nMOV qword ptr [RSP + 0x30],RAX\nMOVAPS XMM0,xmmword ptr [RSP + 0x50]\nMOVAPS XMM1,xmmword ptr [RSP + 0x60]\nMOVAPS XMM2,xmmword ptr [RSP + 0x70]\nMOVUPS xmmword ptr [RSP + 0x20],XMM2\nMOVUPS xmmword ptr [RSP + 0x10],XMM1\nMOVUPS xmmword ptr [RSP],XMM0\nMOV RDI,RBX\nCALL 0x00402c40\nMOV RBX,RAX\nJMP 0x00402810\nMOV R15D,0x1\nNOP word ptr [RAX + RAX*0x1]\nADD qword ptr [RSP + 0x48],0x8\nMOV EAX,dword ptr [RSP + 0x44]\nLEA ECX,[RAX + -0x1]\nMOV dword ptr [RSP + 0x44],ECX\nCMP EAX,0x1\nJG 0x004024e0\nJMP 0x00402834\nXOR R15D,R15D\nXOR EBX,EBX\nXOR R14D,R14D\nMOV RAX,RBX\nOR RAX,R14\nJZ 0x00402848\nMOV EAX,dword ptr [RSP + 0x44]\nTEST EAX,EAX\nJG 0x00402a2e\nCMP qword ptr [0x00608bb0],0x0\nJNZ 0x0040286c\nMOV RDI,qword ptr [0x00608b90]\nXOR R15D,0x1\nMOV ESI,R15D\nCALL 0x00401e80\nMOV qword ptr [0x00608bb0],RAX\nTEST R14,R14\nJZ 0x004028b4\nCMP qword ptr [0x00608bb0],-0x1\nJZ 0x00402a42\nMOV EBP,dword ptr [R14]\nTEST EBP,EBP\nJLE 0x004028b7\nINC EBP\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [0x00608b90]\nMOV RSI,qword ptr [0x00608bb0]\nMOV RDX,qword ptr [R14 + 0x8]\nCALL 0x00402d50\nADD R14,0x38\nDEC EBP\nCMP EBP,0x1\nJG 0x00402890\nJMP 0x004028b7\nXOR R14D,R14D\nTEST RBX,RBX\nJZ 0x00402911\nCMP qword ptr [0x00608bb0],-0x1\nJZ 0x00402a4e\nMOV EBP,dword ptr [RBX]\nTEST EBP,EBP\nJLE 0x004028fe\nINC EBP\nADD RBX,0x20\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RDI,qword ptr [0x00608b90]\nMOV RSI,qword ptr [RBX + -0x18]\nMOV RDX,qword ptr [RBX]\nCALL 0x00402db0\nDEC EBP\nADD RBX,0x38\nCMP EBP,0x1\nJG 0x004028e0\nMOV RDI,qword ptr [0x00608b90]\nCALL 0x00401750\nXOR EDI,EDI\nCALL 0x00401730\nTEST R14,R14\nJNZ 0x004028fe\nMOV EDI,dword ptr [RSP + 0x44]\nMOV RSI,qword ptr [RSP + 0x48]\nCALL 0x00403220\nMOV RBX,RAX\nCMP byte ptr [0x00608bc0],0x1\nJNZ 0x00402a1d\nCMP qword ptr [0x00608bb0],-0x1\nJZ 0x00402a1d\nMOV RDI,qword ptr [0x00608b90]\nMOV RSI,qword ptr [0x00608bb0]\nMOV EDX,0x420000\nCALL 0x00401660\nMOV EDI,0x403360\nCALL 0x004015a0\nMOV qword ptr [0x00608bd0],RAX\nLEA R12,[RBX + 0x10]\nLEA R14,[RSP + 0x50]\nMOV R13,0x100000000\nJMP 0x004029b1\nXOR R15D,R15D\nXOR EBP,EBP\nJMP 0x00402999\nSAR RAX,0x20\nIMUL RAX,RAX,0x38\nMOV R15,qword ptr [RBX + RAX*0x1 + 0x28]\nMOV RBP,qword ptr [RBX + RAX*0x1 + 0x30]\nMOV RDI,qword ptr [RSP + 0x78]\nCALL 0x004034d0\nMOV RDI,R15\nMOV RSI,RBP\nMOV RDX,RAX\nCALL 0x00403390\nMOV RDI,qword ptr [0x00608b60]\nCALL 0x004015d0\nMOV RDI,qword ptr [0x00608b90]\nMOV RSI,R14\nCALL 0x004015b0\nMOV EAX,dword ptr [RSP + 0x50]\nCMP EAX,0x1c\nJZ 0x004029e0\nCMP EAX,0x11\nJNZ 0x004029b1\nJMP 0x00402a1d\nTEST RBX,RBX\nJZ 0x00402980\nCMP dword ptr [RBX],0x0\nJLE 0x004029b1\nMOV RCX,qword ptr [RSP + 0x78]\nMOV RDX,R12\nXOR EAX,EAX\nXOR ESI,ESI\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP qword ptr [RDX],RCX\nJZ 0x00402987\nINC RSI\nMOVSXD RDI,dword ptr [RBX]\nADD RAX,R13\nADD RDX,0x38\nCMP RSI,RDI\nJL 0x00402a00\nJMP 0x004029b1\nXOR EDI,EDI\nCALL 0x00401730\nCALL 0x00402be0\nCALL 0x00402390\nCALL 0x00402390\nMOV EDI,0x405599\nXOR EAX,EAX\nMOV RSI,RBX\nCALL 0x00401a80\nMOV EDI,0x405604\nXOR EAX,EAX\nCALL 0x00401a80\nMOV EDI,0x40562d\nXOR EAX,EAX\nCALL 0x00401a80\nCALL 0x00402390\nMOV RAX,qword ptr [RSP + 0x48]\nMOV RSI,qword ptr [RAX]\nMOV EDI,0x405599\nXOR EAX,EAX\nCALL 0x00401a80\nCALL 0x00402390\n'
p557
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 18 01 00 00\n48 89 f3\n89 7c 24 44\n48 89 5c 24 48\n48 8b 03\n48 89 05 09 5e 20 00\n31 ff\nbe 38 68 40 00\ne8 6d f2 ff ff\n48 8d 6c 24 44\n48 89 ef\n48 89 de\ne8 cd f5 ff ff\n48 8b 74 24 48\n48 89 ef\ne8 40 f7 ff ff\n48 89 05 79 67 20 00\nc6 05 7a 67 20 00 00\n8b 5c 24 44\n85 db\n74 2d\n48 8b 6c 24 48\n0f 1f 44 00 00\n48 8b 7d 00\nbe 86 55 40 00\ne8 d2 f0 ff ff\n85 c0\n74 0a\n48 83 c5 08\nff cb\n75 e6\neb 07\nc6 05 45 67 20 00 01\ne8 08 06 00 00\nbf 8c 55 40 00\ne8 2e ef ff ff\n48 89 c3\n48 85 db\n74 29\nbe c4 55 40 00\n48 89 df\ne8 19 f2 ff ff\n48 89 c5\n48 85 ed\n0f 84 90 05 00 00\n48 89 ef\ne8 55 06 00 00\n48 89 ef\ne8 8d ef ff ff\n48 83 44 24 48 08\n8b 44 24 44\n8d 48 ff\n89 4c 24 44\n83 f8 02\n0f 8c 5f 03 00 00\n45 31 f6\n4c 8d 6c 24 48\n31 db\n45 31 ff\n66 0f 1f 44 00 00\n48 8b 44 24 48\n48 8b 00\n80 38 2d\n0f 85 43 03 00 00\n80 78 01 00\n0f 84 15 03 00 00\n4c 8b 64 24 48\n49 8b 2c 24\nbe bd 55 40 00\n48 89 ef\ne8 1f f0 ff ff\n85 c0\n0f 84 0b 05 00 00\nbe c6 55 40 00\n48 89 ef\ne8 0a f0 ff ff\n85 c0\n0f 84 02 01 00 00\nbe ce 55 40 00\n48 89 ef\ne8 f5 ef ff ff\n85 c0\n0f 84 f9 00 00 00\nbe d3 55 40 00\n48 89 ef\ne8 e0 ef ff ff\n85 c0\n0f 84 f0 00 00 00\nbe d8 55 40 00\n48 89 ef\ne8 cb ef ff ff\n85 c0\n0f 84 06 01 00 00\n80 7d 00 2d\n75 16\n80 7d 01 66\n75 10\n80 7d 02 73\n75 0a\n80 7d 03 00\n0f 84 ea 00 00 00\n48 8b 6c 24 48\n4c 8b 65 00\nbe 86 55 40 00\n4c 89 e7\ne8 91 ef ff ff\n85 c0\n0f 84 0f 01 00 00\nbe e5 55 40 00\n4c 89 e7\ne8 7c ef ff ff\n85 c0\n0f 84 31 01 00 00\nbe ed 55 40 00\n4c 89 e7\ne8 67 ef ff ff\n85 c0\n0f 84 9e 01 00 00\nbe f2 55 40 00\n4c 89 e7\ne8 52 ef ff ff\n85 c0\n0f 84 1b 02 00 00\n41 80 3c 24 2d\n75 10\n41 80 7c 24 01 66\n75 08\n41 80 7c 24 02 00\n74 1a\n48 8b 44 24 48\n48 8b 38\nbe fc 55 40 00\ne8 21 ef ff ff\n85 c0\n0f 85 5c 04 00 00\n48 8d 7c 24 44\n4c 89 ee\ne8 7c 06 00 00\ne9 e7 01 00 00\nc6 05 85 65 20 00 01\ne9 d4 01 00 00\nc6 05 7d 65 20 00 01\ne9 c8 01 00 00\n49 83 c4 08\n4c 89 64 24 48\nff 4c 24 44\n0f 84 ce 03 00 00\n48 8b 44 24 48\n48 8b 38\ne8 98 f0 ff ff\n89 05 b2 5b 20 00\ne9 9d 01 00 00\n48 83 44 24 48 08\nff 4c 24 44\n0f 84 a6 03 00 00\n48 8b 44 24 48\n48 8b 38\nbe c4 55 40 00\ne8 1b f0 ff ff\n48 89 c5\n48 85 ed\n0f 84 be 03 00 00\n48 89 ef\ne8 57 04 00 00\n48 89 ef\ne8 8f ed ff ff\ne9 5a 01 00 00\n48 83 c5 08\n48 89 6c 24 48\nff 4c 24 44\n0f 84 91 03 00 00\n48 8b 44 24 48\n48 8b 38\ne8 7a f3 ff ff\n48 89 05 eb 64 20 00\n48 c7 05 c8 64 20 00 ff ff ff ff\ne9 23 01 00 00\n0f 57 c0\n0f 29 44 24 70\n0f 29 44 24 60\n0f 29 44 24 50\n48 c7 84 24 80 00 00 00 00 00 00 00\n48 83 44 24 48 08\nff 4c 24 44\n0f 84 3f 03 00 00\n48 8b 44 24 48\n48 8b 00\n48 89 44 24 58\n4d 85 f6\n75 08\ne8 de 04 00 00\n49 89 c6\n48 8b 84 24 80 00 00 00\n48 89 44 24 30\n0f 28 44 24 50\n0f 28 4c 24 60\n0f 28 54 24 70\n0f 11 54 24 20\n0f 11 4c 24 10\n0f 11 04 24\n4c 89 f7\ne8 d9 04 00 00\n49 89 c6\ne9 a1 00 00 00\n0f 57 c0\n0f 29 44 24 70\n0f 29 44 24 60\n0f 29 44 24 50\n48 c7 84 24 80 00 00 00 00 00 00 00\n83 7c 24 44 02\n0f 8e c2 02 00 00\n48 8b 44 24 48\n48 8b 48 08\n48 89 4c 24 58\n48 8b 48 10\n48 89 4c 24 70\n48 83 c0 18\n48 89 44 24 48\n83 44 24 44 fd\n48 85 db\n75 08\ne8 49 04 00 00\n48 89 c3\n48 8b 84 24 80 00 00 00\n48 89 44 24 30\n0f 28 44 24 50\n0f 28 4c 24 60\n0f 28 54 24 70\n0f 11 54 24 20\n0f 11 4c 24 10\n0f 11 04 24\n48 89 df\ne8 44 04 00 00\n48 89 c3\neb 0f\n41 bf 01 00 00 00\n66 0f 1f 84 00 00 00 00 00\n48 83 44 24 48 08\n8b 44 24 44\n8d 48 ff\n89 4c 24 44\n83 f8 01\n0f 8f b6 fc ff ff\neb 08\n45 31 ff\n31 db\n45 31 f6\n48 89 d8\n4c 09 f0\n74 0c\n8b 44 24 44\n85 c0\n0f 8f e6 01 00 00\n48 83 3d 60 63 20 00 00\n75 1a\n48 8b 3d 37 63 20 00\n41 83 f7 01\n44 89 fe\ne8 1b f6 ff ff\n48 89 05 44 63 20 00\n4d 85 f6\n74 43\n48 83 3d 37 63 20 00 ff\n0f 84 c3 01 00 00\n41 8b 2e\n85 ed\n7e 31\nff c5\n0f 1f 84 00 00 00 00 00\n48 8b 3d f9 62 20 00\n48 8b 35 12 63 20 00\n49 8b 56 08\ne8 a9 04 00 00\n49 83 c6 38\nff cd\n83 fd 01\n7f de\neb 03\n45 31 f6\n48 85 db\n74 55\n48 83 3d ec 62 20 00 ff\n0f 84 84 01 00 00\n8b 2b\n85 ed\n7e 2e\nff c5\n48 83 c3 20\n66 2e 0f 1f 84 00 00 00 00 00\n48 8b 3d a9 62 20 00\n48 8b 73 e8\n48 8b 13\ne8 bd 04 00 00\nff cd\n48 83 c3 38\n83 fd 01\n7f e2\n48 8b 3d 8b 62 20 00\ne8 46 ee ff ff\n31 ff\ne8 1f ee ff ff\n4d 85 f6\n75 e8\n8b 7c 24 44\n48 8b 74 24 48\ne8 fc 08 00 00\n48 89 c3\n80 3d 92 62 20 00 01\n0f 85 e9 00 00 00\n48 83 3d 74 62 20 00 ff\n0f 84 db 00 00 00\n48 8b 3d 47 62 20 00\n48 8b 35 60 62 20 00\nba 00 00 42 00\ne8 06 ed ff ff\nbf 60 33 40 00\ne8 3c ec ff ff\n48 89 05 65 62 20 00\n4c 8d 63 10\n4c 8d 74 24 50\n49 bd 00 00 00 00 01 00 00 00\neb 31\n45 31 ff\n31 ed\neb 12\n48 c1 f8 20\n48 6b c0 38\n4c 8b 7c 03 28\n48 8b 6c 03 30\n48 8b 7c 24 78\ne8 2d 0b 00 00\n4c 89 ff\n48 89 ee\n48 89 c2\ne8 df 09 00 00\n48 8b 3d a8 61 20 00\ne8 13 ec ff ff\n48 8b 3d cc 61 20 00\n4c 89 f6\ne8 e4 eb ff ff\n8b 44 24 50\n83 f8 1c\n74 0b\n83 f8 11\n75 d7\neb 41\n48 85 db\n74 9b\n83 3b 00\n7e c7\n48 8b 4c 24 78\n4c 89 e2\n31 c0\n31 f6\n66 2e 0f 1f 84 00 00 00 00 00\n48 39 0a\n0f 84 7e ff ff ff\n48 ff c6\n48 63 3b\n4c 01 e8\n48 83 c2 38\n48 39 fe\n7c e5\neb 94\n31 ff\ne8 0c ed ff ff\ne8 b7 01 00 00\ne8 62 f9 ff ff\ne8 5d f9 ff ff\nbf 99 55 40 00\n31 c0\n48 89 de\ne8 3e f0 ff ff\nbf 04 56 40 00\n31 c0\ne8 32 f0 ff ff\nbf 2d 56 40 00\n31 c0\ne8 26 f0 ff ff\ne8 31 f9 ff ff\n48 8b 44 24 48\n48 8b 30\nbf 99 55 40 00\n31 c0\ne8 0d f0 ff ff\ne8 18 f9 ff ff\n'
p558
S'.text:00000000004023e0\n.text:00000000004023e1\n.text:00000000004023e3\n.text:00000000004023e5\n.text:00000000004023e7\n.text:00000000004023e9\n.text:00000000004023ea\n.text:00000000004023f1\n.text:00000000004023f4\n.text:00000000004023f8\n.text:00000000004023fd\n.text:0000000000402400\n.text:0000000000402407\n.text:0000000000402409\n.text:000000000040240e\n.text:0000000000402413\n.text:0000000000402418\n.text:000000000040241b\n.text:000000000040241e\n.text:0000000000402423\n.text:0000000000402428\n.text:000000000040242b\n.text:0000000000402430\n.text:0000000000402437\n.text:000000000040243e\n.text:0000000000402442\n.text:0000000000402444\n.text:0000000000402446\n.text:000000000040244b\n.text:0000000000402450\n.text:0000000000402454\n.text:0000000000402459\n.text:000000000040245e\n.text:0000000000402460\n.text:0000000000402462\n.text:0000000000402466\n.text:0000000000402468\n.text:000000000040246a\n.text:000000000040246c\n.text:0000000000402473\n.text:0000000000402478\n.text:000000000040247d\n.text:0000000000402482\n.text:0000000000402485\n.text:0000000000402488\n.text:000000000040248a\n.text:000000000040248f\n.text:0000000000402492\n.text:0000000000402497\n.text:000000000040249a\n.text:000000000040249d\n.text:00000000004024a3\n.text:00000000004024a6\n.text:00000000004024ab\n.text:00000000004024ae\n.text:00000000004024b3\n.text:00000000004024b9\n.text:00000000004024bd\n.text:00000000004024c0\n.text:00000000004024c4\n.text:00000000004024c7\n.text:00000000004024cd\n.text:00000000004024d0\n.text:00000000004024d5\n.text:00000000004024d7\n.text:00000000004024da\n.text:00000000004024e0\n.text:00000000004024e5\n.text:00000000004024e8\n.text:00000000004024eb\n.text:00000000004024f1\n.text:00000000004024f5\n.text:00000000004024fb\n.text:0000000000402500\n.text:0000000000402504\n.text:0000000000402509\n.text:000000000040250c\n.text:0000000000402511\n.text:0000000000402513\n.text:0000000000402519\n.text:000000000040251e\n.text:0000000000402521\n.text:0000000000402526\n.text:0000000000402528\n.text:000000000040252e\n.text:0000000000402533\n.text:0000000000402536\n.text:000000000040253b\n.text:000000000040253d\n.text:0000000000402543\n.text:0000000000402548\n.text:000000000040254b\n.text:0000000000402550\n.text:0000000000402552\n.text:0000000000402558\n.text:000000000040255d\n.text:0000000000402560\n.text:0000000000402565\n.text:0000000000402567\n.text:000000000040256d\n.text:0000000000402571\n.text:0000000000402573\n.text:0000000000402577\n.text:0000000000402579\n.text:000000000040257d\n.text:000000000040257f\n.text:0000000000402583\n.text:0000000000402589\n.text:000000000040258e\n.text:0000000000402592\n.text:0000000000402597\n.text:000000000040259a\n.text:000000000040259f\n.text:00000000004025a1\n.text:00000000004025a7\n.text:00000000004025ac\n.text:00000000004025af\n.text:00000000004025b4\n.text:00000000004025b6\n.text:00000000004025bc\n.text:00000000004025c1\n.text:00000000004025c4\n.text:00000000004025c9\n.text:00000000004025cb\n.text:00000000004025d1\n.text:00000000004025d6\n.text:00000000004025d9\n.text:00000000004025de\n.text:00000000004025e0\n.text:00000000004025e6\n.text:00000000004025eb\n.text:00000000004025ed\n.text:00000000004025f3\n.text:00000000004025f5\n.text:00000000004025fb\n.text:00000000004025fd\n.text:0000000000402602\n.text:0000000000402605\n.text:000000000040260a\n.text:000000000040260f\n.text:0000000000402611\n.text:0000000000402617\n.text:000000000040261c\n.text:000000000040261f\n.text:0000000000402624\n.text:0000000000402630\n.text:0000000000402637\n.text:000000000040263c\n.text:0000000000402643\n.text:0000000000402648\n.text:000000000040264c\n.text:0000000000402651\n.text:0000000000402655\n.text:000000000040265b\n.text:0000000000402660\n.text:0000000000402663\n.text:0000000000402668\n.text:000000000040266e\n.text:0000000000402673\n.text:0000000000402679\n.text:000000000040267d\n.text:0000000000402683\n.text:0000000000402688\n.text:000000000040268b\n.text:0000000000402690\n.text:0000000000402695\n.text:0000000000402698\n.text:000000000040269b\n.text:00000000004026a1\n.text:00000000004026a4\n.text:00000000004026a9\n.text:00000000004026ac\n.text:00000000004026b1\n.text:00000000004026b6\n.text:00000000004026ba\n.text:00000000004026bf\n.text:00000000004026c3\n.text:00000000004026c9\n.text:00000000004026ce\n.text:00000000004026d1\n.text:00000000004026d6\n.text:00000000004026dd\n.text:00000000004026e8\n.text:00000000004026ed\n.text:00000000004026f0\n.text:00000000004026f5\n.text:00000000004026fa\n.text:00000000004026ff\n.text:000000000040270b\n.text:0000000000402711\n.text:0000000000402715\n.text:000000000040271b\n.text:0000000000402720\n.text:0000000000402723\n.text:0000000000402728\n.text:000000000040272b\n.text:000000000040272d\n.text:0000000000402732\n.text:0000000000402735\n.text:000000000040273d\n.text:0000000000402742\n.text:0000000000402747\n.text:000000000040274c\n.text:0000000000402751\n.text:0000000000402756\n.text:000000000040275b\n.text:000000000040275f\n.text:0000000000402762\n.text:0000000000402767\n.text:000000000040276a\n.text:000000000040276f\n.text:0000000000402772\n.text:0000000000402777\n.text:000000000040277c\n.text:0000000000402781\n.text:000000000040278d\n.text:0000000000402792\n.text:0000000000402798\n.text:000000000040279d\n.text:00000000004027a1\n.text:00000000004027a6\n.text:00000000004027aa\n.text:00000000004027af\n.text:00000000004027b3\n.text:00000000004027b8\n.text:00000000004027bd\n.text:00000000004027c0\n.text:00000000004027c2\n.text:00000000004027c7\n.text:00000000004027ca\n.text:00000000004027d2\n.text:00000000004027d7\n.text:00000000004027dc\n.text:00000000004027e1\n.text:00000000004027e6\n.text:00000000004027eb\n.text:00000000004027f0\n.text:00000000004027f4\n.text:00000000004027f7\n.text:00000000004027fc\n.text:00000000004027ff\n.text:0000000000402801\n.text:0000000000402807\n.text:0000000000402810\n.text:0000000000402816\n.text:000000000040281a\n.text:000000000040281d\n.text:0000000000402821\n.text:0000000000402824\n.text:000000000040282a\n.text:000000000040282c\n.text:000000000040282f\n.text:0000000000402831\n.text:0000000000402834\n.text:0000000000402837\n.text:000000000040283a\n.text:000000000040283c\n.text:0000000000402840\n.text:0000000000402842\n.text:0000000000402848\n.text:0000000000402850\n.text:0000000000402852\n.text:0000000000402859\n.text:000000000040285d\n.text:0000000000402860\n.text:0000000000402865\n.text:000000000040286c\n.text:000000000040286f\n.text:0000000000402871\n.text:0000000000402879\n.text:000000000040287f\n.text:0000000000402882\n.text:0000000000402884\n.text:0000000000402886\n.text:0000000000402888\n.text:0000000000402890\n.text:0000000000402897\n.text:000000000040289e\n.text:00000000004028a2\n.text:00000000004028a7\n.text:00000000004028ab\n.text:00000000004028ad\n.text:00000000004028b0\n.text:00000000004028b2\n.text:00000000004028b4\n.text:00000000004028b7\n.text:00000000004028ba\n.text:00000000004028bc\n.text:00000000004028c4\n.text:00000000004028ca\n.text:00000000004028cc\n.text:00000000004028ce\n.text:00000000004028d0\n.text:00000000004028d2\n.text:00000000004028d6\n.text:00000000004028e0\n.text:00000000004028e7\n.text:00000000004028eb\n.text:00000000004028ee\n.text:00000000004028f3\n.text:00000000004028f5\n.text:00000000004028f9\n.text:00000000004028fc\n.text:00000000004028fe\n.text:0000000000402905\n.text:000000000040290a\n.text:000000000040290c\n.text:0000000000402911\n.text:0000000000402914\n.text:0000000000402916\n.text:000000000040291a\n.text:000000000040291f\n.text:0000000000402924\n.text:0000000000402927\n.text:000000000040292e\n.text:0000000000402934\n.text:000000000040293c\n.text:0000000000402942\n.text:0000000000402949\n.text:0000000000402950\n.text:0000000000402955\n.text:000000000040295a\n.text:000000000040295f\n.text:0000000000402964\n.text:000000000040296b\n.text:000000000040296f\n.text:0000000000402974\n.text:000000000040297e\n.text:0000000000402980\n.text:0000000000402983\n.text:0000000000402985\n.text:0000000000402987\n.text:000000000040298b\n.text:000000000040298f\n.text:0000000000402994\n.text:0000000000402999\n.text:000000000040299e\n.text:00000000004029a3\n.text:00000000004029a6\n.text:00000000004029a9\n.text:00000000004029ac\n.text:00000000004029b1\n.text:00000000004029b8\n.text:00000000004029bd\n.text:00000000004029c4\n.text:00000000004029c7\n.text:00000000004029cc\n.text:00000000004029d0\n.text:00000000004029d3\n.text:00000000004029d5\n.text:00000000004029d8\n.text:00000000004029da\n.text:00000000004029e0\n.text:00000000004029e3\n.text:00000000004029e5\n.text:00000000004029e8\n.text:00000000004029ea\n.text:00000000004029ef\n.text:00000000004029f2\n.text:00000000004029f4\n.text:00000000004029f6\n.text:0000000000402a00\n.text:0000000000402a03\n.text:0000000000402a09\n.text:0000000000402a0c\n.text:0000000000402a0f\n.text:0000000000402a12\n.text:0000000000402a16\n.text:0000000000402a19\n.text:0000000000402a1b\n.text:0000000000402a1d\n.text:0000000000402a1f\n.text:0000000000402a24\n.text:0000000000402a29\n.text:0000000000402a2e\n.text:0000000000402a33\n.text:0000000000402a38\n.text:0000000000402a3a\n.text:0000000000402a3d\n.text:0000000000402a42\n.text:0000000000402a47\n.text:0000000000402a49\n.text:0000000000402a4e\n.text:0000000000402a53\n.text:0000000000402a55\n.text:0000000000402a5a\n.text:0000000000402a5f\n.text:0000000000402a64\n.text:0000000000402a67\n.text:0000000000402a6c\n.text:0000000000402a6e\n.text:0000000000402a73\n'
p559
tp560
sS'Show_Prop'
p561
(S'\n__stdcall Show_Prop(char * format, char * dformat, char * prop)\n'
p562
V\u000avoid Show_Prop(char *format,char *dformat,char *prop)\u000a\u000a{\u000a  uint uVar1;\u000a  Atom atom;\u000a  char *pointer;\u000a  char *format_00;\u000a  thunk *thunks;\u000a  long length;\u000a  char *local_38;\u000a  uint local_2c;\u000a  char *local_28;\u000a  char *local_20;\u000a  uint local_18 [2];\u000a  \u000a  local_38 = format;\u000a  local_28 = dformat;\u000a  printf("%s",prop);\u000a  atom = Parse_Atom(prop);\u000a  if (atom == 0) {\u000a    puts(":  no such atom on any window.");\u000a  }\u000a  else {\u000a    pointer = Get_Property_Data_And_Type(atom,(long *)local_18,(Atom *)&local_20,(int *)&local_2c);\u000a    if (local_2c == 0) {\u000a      puts(":  not found.");\u000a    }\u000a    else {\u000a      if ((local_20 != (char *)0x0) && (((notype ^ 1) & 1) != 0)) {\u000a        format_00 = Format_Atom((Atom)local_20);\u000a        printf("(%s)",format_00);\u000a      }\u000a      Lookup_Formats(atom,&local_38,&local_28);\u000a      if (local_20 != (char *)0x0) {\u000a        Lookup_Formats((Atom)local_20,&local_38,&local_28);\u000a      }\u000a      Apply_Default_Formats(&local_38,&local_28);\u000a      uVar1 = Get_Format_Size(local_38);\u000a      format_00 = local_38;\u000a      if ((uVar1 == 0) || (uVar1 == local_2c)) {\u000a        thunks = Break_Down_Property(pointer,(ulong)local_18[0],local_20);\u000a        Display_Property(thunks,local_28,format_00);\u000a      }\u000a      else {\u000a        printf(": Type mismatch: assumed size %d bits, actual size %d bits.\u005cn",(ulong)uVar1,\u000a               (ulong)local_2c);\u000a      }\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p563
S'PUSH R14\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP],RDI\nMOV qword ptr [RSP + 0x10],RSI\nMOV EDI,0x406600\nXOR EAX,EAX\nMOV RSI,RBX\nCALL 0x00401470\nMOV ESI,0x1\nMOV RDI,RBX\nCALL 0x00403620\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040347d\nLEA RSI,[RSP + 0x20]\nLEA RDX,[RSP + 0x18]\nLEA RCX,[RSP + 0xc]\nMOV RDI,RBX\nCALL 0x004039f0\nMOV R14,RAX\nCMP dword ptr [RSP + 0xc],0x0\nJZ 0x00403489\nMOV RDI,qword ptr [RSP + 0x18]\nTEST RDI,RDI\nJZ 0x0040341d\nMOV AL,byte ptr [0x00608bbc]\nXOR AL,0x1\nTEST AL,0x1\nJZ 0x0040341d\nCALL 0x004034d0\nMOV RCX,RAX\nMOV EDI,0x406641\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401470\nMOV RSI,RSP\nLEA RDX,[RSP + 0x10]\nMOV RDI,RBX\nCALL 0x004037d0\nMOV RDI,qword ptr [RSP + 0x18]\nTEST RDI,RDI\nJZ 0x00403444\nMOV RSI,RSP\nLEA RDX,[RSP + 0x10]\nCALL 0x004037d0\nMOV RDI,RSP\nLEA RSI,[RSP + 0x10]\nCALL 0x00403a10\nMOV RDI,qword ptr [RSP]\nCALL 0x00403830\nMOV ECX,EAX\nMOV R8D,dword ptr [RSP + 0xc]\nTEST ECX,ECX\nJZ 0x00403495\nCMP ECX,R8D\nJZ 0x00403495\nMOV EDI,0x406646\nXOR EAX,EAX\nMOV ESI,ECX\nMOV EDX,R8D\nCALL 0x00401470\nJMP 0x004034bd\nMOV EDI,0x406bd0\nCALL 0x00401410\nJMP 0x004034bd\nMOV EDI,0x406633\nCALL 0x00401410\nJMP 0x004034bd\nMOV ESI,dword ptr [RSP + 0x20]\nMOV RDX,qword ptr [RSP + 0x18]\nMOV RBX,qword ptr [RSP]\nMOV RDI,R14\nMOV RCX,RBX\nCALL 0x00403a30\nMOV RSI,qword ptr [RSP + 0x10]\nMOV RDI,RAX\nMOV RDX,RBX\nCALL 0x00403b80\nADD RSP,0x28\nPOP RBX\nPOP R14\nRET\n'
p564
S'41 56\n53\n48 83 ec 28\n48 89 d3\n48 89 3c 24\n48 89 74 24 10\nbf 00 66 40 00\n31 c0\n48 89 de\ne8 be e0 ff ff\nbe 01 00 00 00\n48 89 df\ne8 61 02 00 00\n48 89 c3\n48 85 db\n0f 84 b2 00 00 00\n48 8d 74 24 20\n48 8d 54 24 18\n48 8d 4c 24 0c\n48 89 df\ne8 0e 06 00 00\n49 89 c6\n83 7c 24 0c 00\n0f 84 99 00 00 00\n48 8b 7c 24 18\n48 85 ff\n74 23\n8a 05 bc 57 20 00\n34 01\na8 01\n74 17\ne8 c5 00 00 00\n48 89 c1\nbf 41 66 40 00\n31 c0\n48 89 ce\ne8 53 e0 ff ff\n48 89 e6\n48 8d 54 24 10\n48 89 df\ne8 a3 03 00 00\n48 8b 7c 24 18\n48 85 ff\n74 0d\n48 89 e6\n48 8d 54 24 10\ne8 8c 03 00 00\n48 89 e7\n48 8d 74 24 10\ne8 bf 05 00 00\n48 8b 3c 24\ne8 d6 03 00 00\n89 c1\n44 8b 44 24 0c\n85 c9\n74 30\n44 39 c1\n74 2b\nbf 46 66 40 00\n31 c0\n89 ce\n44 89 c2\ne8 f5 df ff ff\neb 40\nbf d0 6b 40 00\ne8 89 df ff ff\neb 34\nbf 33 66 40 00\ne8 7d df ff ff\neb 28\n8b 74 24 20\n48 8b 54 24 18\n48 8b 1c 24\n4c 89 f7\n48 89 d9\ne8 83 05 00 00\n48 8b 74 24 10\n48 89 c7\n48 89 da\ne8 c3 06 00 00\n48 83 c4 28\n5b\n41 5e\nc3\n'
p565
S'.text:0000000000403390\n.text:0000000000403392\n.text:0000000000403393\n.text:0000000000403397\n.text:000000000040339a\n.text:000000000040339e\n.text:00000000004033a3\n.text:00000000004033a8\n.text:00000000004033aa\n.text:00000000004033ad\n.text:00000000004033b2\n.text:00000000004033b7\n.text:00000000004033ba\n.text:00000000004033bf\n.text:00000000004033c2\n.text:00000000004033c5\n.text:00000000004033cb\n.text:00000000004033d0\n.text:00000000004033d5\n.text:00000000004033da\n.text:00000000004033dd\n.text:00000000004033e2\n.text:00000000004033e5\n.text:00000000004033ea\n.text:00000000004033f0\n.text:00000000004033f5\n.text:00000000004033f8\n.text:00000000004033fa\n.text:0000000000403400\n.text:0000000000403402\n.text:0000000000403404\n.text:0000000000403406\n.text:000000000040340b\n.text:000000000040340e\n.text:0000000000403413\n.text:0000000000403415\n.text:0000000000403418\n.text:000000000040341d\n.text:0000000000403420\n.text:0000000000403425\n.text:0000000000403428\n.text:000000000040342d\n.text:0000000000403432\n.text:0000000000403435\n.text:0000000000403437\n.text:000000000040343a\n.text:000000000040343f\n.text:0000000000403444\n.text:0000000000403447\n.text:000000000040344c\n.text:0000000000403451\n.text:0000000000403455\n.text:000000000040345a\n.text:000000000040345c\n.text:0000000000403461\n.text:0000000000403463\n.text:0000000000403465\n.text:0000000000403468\n.text:000000000040346a\n.text:000000000040346f\n.text:0000000000403471\n.text:0000000000403473\n.text:0000000000403476\n.text:000000000040347b\n.text:000000000040347d\n.text:0000000000403482\n.text:0000000000403487\n.text:0000000000403489\n.text:000000000040348e\n.text:0000000000403493\n.text:0000000000403495\n.text:0000000000403499\n.text:000000000040349e\n.text:00000000004034a2\n.text:00000000004034a5\n.text:00000000004034a8\n.text:00000000004034ad\n.text:00000000004034b2\n.text:00000000004034b5\n.text:00000000004034b8\n.text:00000000004034bd\n.text:00000000004034c1\n.text:00000000004034c2\n.text:00000000004034c4\n'
p566
tp567
sS'realloc'
p568
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p569
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_00608178)();\u000a  return pvVar1;\u000a}\u000a\u000a
p570
S'JMP qword ptr [0x00608178]\n'
p571
S'ff 25 02 6b 20 00\n'
p572
S'.plt:0000000000401670\n'
p573
tp574
sS'nl_langinfo'
p575
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p576
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_00608140)();\u000a  return pcVar1;\u000a}\u000a\u000a
p577
S'JMP qword ptr [0x00608140]\n'
p578
S'ff 25 3a 6b 20 00\n'
p579
S'.plt:0000000000401600\n'
p580
tp581
sS'sprintf'
p582
(S'\n__stdcall sprintf(char * __s, char * __format)\n'
p583
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sprintf(char *__s,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sprintf_006081d0)();\u000a  return iVar1;\u000a}\u000a\u000a
p584
S'JMP qword ptr [0x006081d0]\n'
p585
S'ff 25 aa 6a 20 00\n'
p586
S'.plt:0000000000401720\n'
p587
tp588
sS'Format_Thunk'
p589
(S'\n__stdcall Format_Thunk(thunk t)\n'
p590
V\u000achar * Format_Thunk(thunk t)\u000a\u000a{\u000a  char *pcVar1;\u000a  ulong in_RDI;\u000a  \u000a  switch((int)(in_RDI & 0xffffffff)) {\u000a  case 0x61:\u000a    pcVar1 = Format_Atom(t.value);\u000a    return pcVar1;\u000a  case 0x62:\u000a    pcVar1 = Format_Bool(t.value);\u000a    return pcVar1;\u000a  case 99:\u000a    Format_Unsigned();\u000a    return _formatting_buffer2;\u000a  default:\u000a                    /* WARNING: Subroutine does not return */\u000a    Fatal_Error("bad format character: %c",in_RDI & 0xffffffff);\u000a  case 0x69:\u000a    Format_Signed();\u000a    return _formatting_buffer2;\u000a  case 0x6d:\u000a    Format_Mask_Word();\u000a    break;\u000a  case 0x6f:\u000a    pcVar1 = Format_Icons((ulong *)t.extra_value);\u000a    return pcVar1;\u000a  case 0x73:\u000a    Format_Len_String();\u000a    break;\u000a  case 0x74:\u000a    Format_Len_Text(t.extra_value);\u000a    break;\u000a  case 0x75:\u000a    Format_Len_Unicode();\u000a    break;\u000a  case 0x78:\u000a    Format_Hex();\u000a    return _formatting_buffer2;\u000a  }\u000a  return _formatting_buffer;\u000a}\u000a\u000a
p591
S'PUSH RAX\nMOV ECX,EDI\nLEA EDX,[RCX + -0x61]\nCMP EDX,0x17\nJA 0x00404127\nLEA RSI,[RSP + 0x10]\nMOV RAX,qword ptr [RSP + 0x20]\nJMP qword ptr [0x405028 + RDX*0x8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004034d0\nMOV RDI,RAX\nPOP RAX\nJMP 0x00404470\nMOV RDI,RAX\nCALL 0x00404430\nMOV EAX,0x6fd450\nPOP RCX\nRET\nMOV RDI,RAX\nCALL 0x00404450\nMOV EAX,0x6fd450\nPOP RCX\nRET\nMOV RDI,RAX\nCALL 0x00404490\nJMP 0x00404111\nMOV RDI,qword ptr [RSI + 0x20]\nMOV ESI,EAX\nPOP RAX\nJMP 0x00404530\nMOV RDI,qword ptr [RSI + 0x20]\nXOR EDX,EDX\nMOV ESI,EAX\nCALL 0x00404140\nJMP 0x00404111\nMOV RDX,qword ptr [RSI + 0x18]\nMOV RDI,qword ptr [RSI + 0x20]\nMOV ESI,EAX\nCALL 0x00404250\nJMP 0x00404111\nMOV RDI,qword ptr [RSI + 0x20]\nMOV ESI,EAX\nCALL 0x004041a0\nMOV EAX,0x6832b0\nPOP RCX\nRET\nMOV RDI,RAX\nCALL 0x00404410\nMOV EAX,0x6fd450\nPOP RCX\nRET\nMOV EDI,0x4065db\nXOR EAX,EAX\nMOV ESI,ECX\nCALL 0x00401a80\n'
p592
S'50\n89 f9\n8d 51 9f\n83 fa 17\n0f 87 98 00 00 00\n48 8d 74 24 10\n48 8b 44 24 20\nff 24 d5 28 50 40 00\n48 89 c7\n58\ne9 27 f4 ff ff\n48 89 c7\n58\ne9 be 03 00 00\n48 89 c7\ne8 76 03 00 00\nb8 50 d4 6f 00\n59\nc3\n48 89 c7\ne8 87 03 00 00\nb8 50 d4 6f 00\n59\nc3\n48 89 c7\ne8 b8 03 00 00\neb 37\n48 8b 7e 20\n89 c6\n58\ne9 4a 04 00 00\n48 8b 7e 20\n31 d2\n89 c6\ne8 4d 00 00 00\neb 1c\n48 8b 56 18\n48 8b 7e 20\n89 c6\ne8 4c 01 00 00\neb 0b\n48 8b 7e 20\n89 c6\ne8 8f 00 00 00\nb8 b0 32 68 00\n59\nc3\n48 89 c7\ne8 f0 02 00 00\nb8 50 d4 6f 00\n59\nc3\nbf db 65 40 00\n31 c0\n89 ce\ne8 4b d9 ff ff\n'
p593
S'.text:0000000000404080\n.text:0000000000404081\n.text:0000000000404083\n.text:0000000000404086\n.text:0000000000404089\n.text:000000000040408f\n.text:0000000000404094\n.text:0000000000404099\n.text:00000000004040a0\n.text:00000000004040a3\n.text:00000000004040a4\n.text:00000000004040a9\n.text:00000000004040ac\n.text:00000000004040ad\n.text:00000000004040b2\n.text:00000000004040b5\n.text:00000000004040ba\n.text:00000000004040bf\n.text:00000000004040c0\n.text:00000000004040c1\n.text:00000000004040c4\n.text:00000000004040c9\n.text:00000000004040ce\n.text:00000000004040cf\n.text:00000000004040d0\n.text:00000000004040d3\n.text:00000000004040d8\n.text:00000000004040da\n.text:00000000004040de\n.text:00000000004040e0\n.text:00000000004040e1\n.text:00000000004040e6\n.text:00000000004040ea\n.text:00000000004040ec\n.text:00000000004040ee\n.text:00000000004040f3\n.text:00000000004040f5\n.text:00000000004040f9\n.text:00000000004040fd\n.text:00000000004040ff\n.text:0000000000404104\n.text:0000000000404106\n.text:000000000040410a\n.text:000000000040410c\n.text:0000000000404111\n.text:0000000000404116\n.text:0000000000404117\n.text:0000000000404118\n.text:000000000040411b\n.text:0000000000404120\n.text:0000000000404125\n.text:0000000000404126\n.text:0000000000404127\n.text:000000000040412c\n.text:000000000040412e\n.text:0000000000404130\n'
p594
tp595
sS'strlen'
p596
(S'\n__stdcall strlen(char * __s)\n'
p597
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_00608070)();\u000a  return sVar1;\u000a}\u000a\u000a
p598
S'JMP qword ptr [0x00608070]\n'
p599
S'ff 25 0a 6c 20 00\n'
p600
S'.plt:0000000000401460\n'
p601
tp602
sS'Scan_Exp'
p603
(S'\n__stdcall Scan_Exp(char * string, thunk * thunks, char * format, long * value)\n'
p604
V\u000achar * Scan_Exp(char *string,thunk *thunks,char *format,long *value)\u000a\u000a{\u000a  char *pcVar1;\u000a  long temp;\u000a  long local_20;\u000a  \u000a  if (*string == '!') {\u000a    pcVar1 = Scan_Exp(string + 1,thunks,format,value);\u000a    *value = (ulong)(*value == 0);\u000a  }\u000a  else {\u000a    if (*string == '(') {\u000a      pcVar1 = Scan_Exp(string + 1,thunks,format,value);\u000a      if (*pcVar1 != ')') {\u000a                    /* WARNING: Subroutine does not return */\u000a        Fatal_Error("Missing \u005c')\u005c'");\u000a      }\u000a      pcVar1 = pcVar1 + 1;\u000a    }\u000a    else {\u000a      pcVar1 = Scan_Term(string,thunks,format,value);\u000a      if (*pcVar1 == '=') {\u000a        pcVar1 = Scan_Exp(pcVar1 + 1,thunks,format,&local_20);\u000a        *value = (ulong)(*value == local_20);\u000a      }\u000a    }\u000a  }\u000a  return pcVar1;\u000a}\u000a\u000a
p605
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV R14,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV AL,byte ptr [RDI]\nCMP AL,0x21\nJZ 0x00404af7\nCMP AL,0x28\nJNZ 0x00404b16\nINC RDI\nMOV RSI,RBX\nMOV RDX,R15\nMOV RCX,R14\nCALL 0x00404ac0\nCMP byte ptr [RAX],0x29\nJNZ 0x00404b59\nINC RAX\nJMP 0x00404b4f\nINC RDI\nMOV RSI,RBX\nMOV RDX,R15\nMOV RCX,R14\nCALL 0x00404ac0\nXOR ECX,ECX\nCMP qword ptr [R14],0x0\nSETZ CL\nMOV qword ptr [R14],RCX\nJMP 0x00404b4f\nMOV RSI,RBX\nMOV RDX,R15\nMOV RCX,R14\nCALL 0x00404c10\nCMP byte ptr [RAX],0x3d\nJNZ 0x00404b4f\nINC RAX\nLEA RCX,[RSP + 0x8]\nMOV RDI,RAX\nMOV RSI,RBX\nMOV RDX,R15\nCALL 0x00404ac0\nMOV RCX,qword ptr [R14]\nXOR EDX,EDX\nCMP RCX,qword ptr [RSP + 0x8]\nSETZ DL\nMOV qword ptr [R14],RDX\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOV EDI,0x40685c\nXOR EAX,EAX\nCALL 0x00401a80\n'
p606
S'41 57\n41 56\n53\n48 83 ec 10\n49 89 ce\n49 89 d7\n48 89 f3\n8a 07\n3c 21\n74 1f\n3c 28\n75 3a\n48 ff c7\n48 89 de\n4c 89 fa\n4c 89 f1\ne8 d3 ff ff ff\n80 38 29\n75 67\n48 ff c0\neb 58\n48 ff c7\n48 89 de\n4c 89 fa\n4c 89 f1\ne8 b8 ff ff ff\n31 c9\n49 83 3e 00\n0f 94 c1\n49 89 0e\neb 39\n48 89 de\n4c 89 fa\n4c 89 f1\ne8 ec 00 00 00\n80 38 3d\n75 26\n48 ff c0\n48 8d 4c 24 08\n48 89 c7\n48 89 de\n4c 89 fa\ne8 81 ff ff ff\n49 8b 0e\n31 d2\n48 3b 4c 24 08\n0f 94 c2\n49 89 16\n48 83 c4 10\n5b\n41 5e\n41 5f\nc3\nbf 5c 68 40 00\n31 c0\ne8 1b cf ff ff\n'
p607
S'.text:0000000000404ac0\n.text:0000000000404ac2\n.text:0000000000404ac4\n.text:0000000000404ac5\n.text:0000000000404ac9\n.text:0000000000404acc\n.text:0000000000404acf\n.text:0000000000404ad2\n.text:0000000000404ad4\n.text:0000000000404ad6\n.text:0000000000404ad8\n.text:0000000000404ada\n.text:0000000000404adc\n.text:0000000000404adf\n.text:0000000000404ae2\n.text:0000000000404ae5\n.text:0000000000404ae8\n.text:0000000000404aed\n.text:0000000000404af0\n.text:0000000000404af2\n.text:0000000000404af5\n.text:0000000000404af7\n.text:0000000000404afa\n.text:0000000000404afd\n.text:0000000000404b00\n.text:0000000000404b03\n.text:0000000000404b08\n.text:0000000000404b0a\n.text:0000000000404b0e\n.text:0000000000404b11\n.text:0000000000404b14\n.text:0000000000404b16\n.text:0000000000404b19\n.text:0000000000404b1c\n.text:0000000000404b1f\n.text:0000000000404b24\n.text:0000000000404b27\n.text:0000000000404b29\n.text:0000000000404b2c\n.text:0000000000404b31\n.text:0000000000404b34\n.text:0000000000404b37\n.text:0000000000404b3a\n.text:0000000000404b3f\n.text:0000000000404b42\n.text:0000000000404b44\n.text:0000000000404b49\n.text:0000000000404b4c\n.text:0000000000404b4f\n.text:0000000000404b53\n.text:0000000000404b54\n.text:0000000000404b56\n.text:0000000000404b58\n.text:0000000000404b59\n.text:0000000000404b5e\n.text:0000000000404b60\n'
p608
tp609
sS'ignore_errors'
p610
(S'\n__stdcall ignore_errors(Display * dpy, XErrorEvent * ev)\n'
p611
V\u000aint ignore_errors(Display *dpy,XErrorEvent *ev)\u000a\u000a{\u000a  return 0;\u000a}\u000a\u000a
p612
S'XOR EAX,EAX\nRET\n'
p613
S'31 c0\nc3\n'
p614
S'.text:0000000000404db0\n.text:0000000000404db2\n'
p615
tp616
sS'Add_Thunk'
p617
(S'\n__stdcall Add_Thunk(thunk * list, thunk t)\n'
p618
V\u000athunk * Add_Thunk(thunk *list,thunk t)\u000a\u000a{\u000a  thunk *ptVar1;\u000a  long lVar2;\u000a  \u000a  lVar2 = (long)list->thunk_count;\u000a  ptVar1 = (thunk *)realloc(list,(lVar2 + 1) * 0x38);\u000a  if (ptVar1 != (thunk *)0x0) {\u000a    ptVar1[lVar2].dformat = t.dformat;\u000a    *(undefined4 *)&ptVar1[lVar2].extra_value = t.extra_value._0_4_;\u000a    *(undefined4 *)((long)&ptVar1[lVar2].extra_value + 4) = t.extra_value._4_4_;\u000a    *(undefined4 *)&ptVar1[lVar2].format = t.format._0_4_;\u000a    *(undefined4 *)((long)&ptVar1[lVar2].format + 4) = t.format._4_4_;\u000a    *(undefined4 *)&ptVar1[lVar2].value = (undefined4)t.value;\u000a    *(undefined4 *)((long)&ptVar1[lVar2].value + 4) = t.value._4_4_;\u000a    *(undefined4 *)&ptVar1[lVar2].extra_encoding = (undefined4)t.extra_encoding;\u000a    *(undefined4 *)((long)&ptVar1[lVar2].extra_encoding + 4) = t.extra_encoding._4_4_;\u000a    ptVar1[lVar2].thunk_count = t.thunk_count;\u000a    *(undefined4 *)&ptVar1[lVar2].field_0x4 = t._4_4_;\u000a    *(undefined4 *)&ptVar1[lVar2].propname = t.propname._0_4_;\u000a    *(undefined4 *)((long)&ptVar1[lVar2].propname + 4) = t.propname._4_4_;\u000a    ptVar1->thunk_count = (int)(lVar2 + 1);\u000a    return ptVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  Fatal_Error("Out of memory!");\u000a}\u000a\u000a
p619
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOVSXD RBX,dword ptr [RDI]\nLEA R14,[RBX + 0x1]\nIMUL RSI,R14,0x38\nCALL 0x00401670\nTEST RAX,RAX\nJZ 0x00402c8f\nLEA RCX,[RSP + 0x20]\nIMUL RDX,RBX,0x38\nMOV RSI,qword ptr [RCX + 0x30]\nMOV qword ptr [RAX + RDX*0x1 + 0x30],RSI\nMOVUPS XMM0,xmmword ptr [RCX]\nMOVUPS XMM1,xmmword ptr [RCX + 0x10]\nMOVUPS XMM2,xmmword ptr [RCX + 0x20]\nMOVUPS xmmword ptr [RAX + RDX*0x1 + 0x20],XMM2\nMOVUPS xmmword ptr [RAX + RDX*0x1 + 0x10],XMM1\nMOVUPS xmmword ptr [RAX + RDX*0x1],XMM0\nMOV dword ptr [RAX],R14D\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV EDI,0x4060b5\nXOR EAX,EAX\nCALL 0x00401a80\n'
p620
S'41 56\n53\n50\n48 63 1f\n4c 8d 73 01\n49 6b f6 38\ne8 1c ea ff ff\n48 85 c0\n74 36\n48 8d 4c 24 20\n48 6b d3 38\n48 8b 71 30\n48 89 74 10 30\n0f 10 01\n0f 10 49 10\n0f 10 51 20\n0f 11 54 10 20\n0f 11 4c 10 10\n0f 11 04 10\n44 89 30\n48 83 c4 08\n5b\n41 5e\nc3\nbf b5 60 40 00\n31 c0\ne8 e5 ed ff ff\n'
p621
S'.text:0000000000402c40\n.text:0000000000402c42\n.text:0000000000402c43\n.text:0000000000402c44\n.text:0000000000402c47\n.text:0000000000402c4b\n.text:0000000000402c4f\n.text:0000000000402c54\n.text:0000000000402c57\n.text:0000000000402c59\n.text:0000000000402c5e\n.text:0000000000402c62\n.text:0000000000402c66\n.text:0000000000402c6b\n.text:0000000000402c6e\n.text:0000000000402c72\n.text:0000000000402c76\n.text:0000000000402c7b\n.text:0000000000402c80\n.text:0000000000402c84\n.text:0000000000402c87\n.text:0000000000402c8b\n.text:0000000000402c8c\n.text:0000000000402c8e\n.text:0000000000402c8f\n.text:0000000000402c94\n.text:0000000000402c96\n'
p622
tp623
sS'Get_Window_Property_Data_And_Type'
p624
(S'\n__stdcall Get_Window_Property_Data_And_Type(Atom atom, long * length, Atom * type, int * size)\n'
p625
V\u000achar * Get_Window_Property_Data_And_Type(Atom atom,long *length,Atom *type,int *size)\u000a\u000a{\u000a  int iVar1;\u000a  uint uVar2;\u000a  ulong uVar3;\u000a  ulong bytes_after;\u000a  uint local_54;\u000a  char *local_50;\u000a  long local_48;\u000a  Atom local_40;\u000a  undefined local_38 [8];\u000a  \u000a  iVar1 = XGetWindowProperty(dpy,target_win,atom,0,\u000a                             (long)((int)(max_len + 3 + ((uint)(max_len + 3 >> 0x1f) >> 0x1e)) >> 2)\u000a                             ,0,0,&local_40,&local_54,&local_48,local_38,&local_50);\u000a  if (iVar1 != 0) {\u000a    if (iVar1 == 3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      Fatal_Error("window id # 0x%lx does not exists!",target_win);\u000a    }\u000a                    /* WARNING: Subroutine does not return */\u000a    Fatal_Error("XGetWindowProperty failed!");\u000a  }\u000a  uVar2 = local_54 << 0x1d | local_54 >> 3;\u000a  if ((uVar2 < 5) && ((0x17U >> (local_54 >> 3 & 0x1f) & 1) != 0)) {\u000a    uVar3 = local_48 * *(long *)(&DAT_004054f0 + (long)(int)uVar2 * 8);\u000a    if ((ulong)(long)max_len <= (ulong)(local_48 * *(long *)(&DAT_004054f0 + (long)(int)uVar2 * 8)))\u000a    {\u000a      uVar3 = (long)max_len;\u000a    }\u000a    *length = uVar3;\u000a    *type = local_40;\u000a    *size = local_54;\u000a    return local_50;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p626
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV RAX,RDI\nMOV RDI,qword ptr [0x00608b90]\nMOV RSI,qword ptr [0x00608bb0]\nMOV ECX,dword ptr [0x00608220]\nLEA EDX,[RCX + 0x3]\nSAR EDX,0x1f\nSHR EDX,0x1e\nLEA ECX,[RCX + RDX*0x1 + 0x3]\nSAR ECX,0x2\nMOVSXD R8,ECX\nLEA RBX,[RSP + 0x8]\nLEA R10,[RSP + 0x20]\nLEA R11,[RSP + 0x10]\nLEA R13,[RSP + 0x4]\nLEA RBP,[RSP + 0x18]\nMOV ECX,0x0\nMOV R9D,0x0\nMOV RDX,RAX\nPUSH RBX\nPUSH R10\nPUSH R11\nPUSH R13\nPUSH RBP\nPUSH 0x0\nCALL 0x00401740\nADD RSP,0x30\nTEST EAX,EAX\nJNZ 0x00403d74\nMOV ECX,dword ptr [RSP + 0x4]\nMOV EAX,ECX\nROL EAX,0x1d\nCMP EAX,0x5\nJNC 0x00403d6f\nSHR ECX,0x3\nMOV EDX,0x17\nBT EDX,ECX\nJNC 0x00403d6f\nCDQE\nMOV RCX,qword ptr [RSP + 0x10]\nIMUL RCX,qword ptr [0x4054f0 + RAX*0x8]\nMOVSXD RAX,dword ptr [0x00608220]\nCMP RCX,RAX\nCMOVNC RCX,RAX\nMOV qword ptr [R12],RCX\nMOV RAX,qword ptr [RSP + 0x18]\nMOV qword ptr [R15],RAX\nMOV EAX,dword ptr [RSP + 0x4]\nMOV dword ptr [R14],EAX\nMOV RAX,qword ptr [RSP + 0x8]\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x004013e0\nCMP EAX,0x3\nJNZ 0x00403d8c\nMOV RSI,qword ptr [0x00608bb0]\nMOV EDI,0x406683\nXOR EAX,EAX\nCALL 0x00401a80\nMOV EDI,0x4066a6\nXOR EAX,EAX\nCALL 0x00401a80\n'
p627
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 ce\n49 89 d7\n49 89 f4\n48 89 f8\n48 8b 3d df 4e 20 00\n48 8b 35 f8 4e 20 00\n8b 0d 62 45 20 00\n8d 51 03\nc1 fa 1f\nc1 ea 1e\n8d 4c 11 03\nc1 f9 02\n4c 63 c1\n48 8d 5c 24 08\n4c 8d 54 24 20\n4c 8d 5c 24 10\n4c 8d 6c 24 04\n48 8d 6c 24 18\nb9 00 00 00 00\n41 b9 00 00 00 00\n48 89 c2\n53\n41 52\n41 53\n41 55\n55\n6a 00\ne8 39 da ff ff\n48 83 c4 30\n85 c0\n75 65\n8b 4c 24 04\n89 c8\nc1 c0 1d\n83 f8 05\n73 52\nc1 e9 03\nba 17 00 00 00\n0f a3 ca\n73 45\n48 98\n48 8b 4c 24 10\n48 0f af 0c c5 f0 54 40 00\n48 63 05 df 44 20 00\n48 39 c1\n48 0f 43 c8\n49 89 0c 24\n48 8b 44 24 18\n49 89 07\n8b 44 24 04\n41 89 06\n48 8b 44 24 08\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 6c d6 ff ff\n83 f8 03\n75 13\n48 8b 35 30 4e 20 00\nbf 83 66 40 00\n31 c0\ne8 f4 dc ff ff\nbf a6 66 40 00\n31 c0\ne8 e8 dc ff ff\n'
p628
S'.text:0000000000403c90\n.text:0000000000403c91\n.text:0000000000403c93\n.text:0000000000403c95\n.text:0000000000403c97\n.text:0000000000403c99\n.text:0000000000403c9a\n.text:0000000000403c9e\n.text:0000000000403ca1\n.text:0000000000403ca4\n.text:0000000000403ca7\n.text:0000000000403caa\n.text:0000000000403cb1\n.text:0000000000403cb8\n.text:0000000000403cbe\n.text:0000000000403cc1\n.text:0000000000403cc4\n.text:0000000000403cc7\n.text:0000000000403ccb\n.text:0000000000403cce\n.text:0000000000403cd1\n.text:0000000000403cd6\n.text:0000000000403cdb\n.text:0000000000403ce0\n.text:0000000000403ce5\n.text:0000000000403cea\n.text:0000000000403cef\n.text:0000000000403cf5\n.text:0000000000403cf8\n.text:0000000000403cf9\n.text:0000000000403cfb\n.text:0000000000403cfd\n.text:0000000000403cff\n.text:0000000000403d00\n.text:0000000000403d02\n.text:0000000000403d07\n.text:0000000000403d0b\n.text:0000000000403d0d\n.text:0000000000403d0f\n.text:0000000000403d13\n.text:0000000000403d15\n.text:0000000000403d18\n.text:0000000000403d1b\n.text:0000000000403d1d\n.text:0000000000403d20\n.text:0000000000403d25\n.text:0000000000403d28\n.text:0000000000403d2a\n.text:0000000000403d2c\n.text:0000000000403d31\n.text:0000000000403d3a\n.text:0000000000403d41\n.text:0000000000403d44\n.text:0000000000403d48\n.text:0000000000403d4c\n.text:0000000000403d51\n.text:0000000000403d54\n.text:0000000000403d58\n.text:0000000000403d5b\n.text:0000000000403d60\n.text:0000000000403d64\n.text:0000000000403d65\n.text:0000000000403d67\n.text:0000000000403d69\n.text:0000000000403d6b\n.text:0000000000403d6d\n.text:0000000000403d6e\n.text:0000000000403d6f\n.text:0000000000403d74\n.text:0000000000403d77\n.text:0000000000403d79\n.text:0000000000403d80\n.text:0000000000403d85\n.text:0000000000403d87\n.text:0000000000403d8c\n.text:0000000000403d91\n.text:0000000000403d93\n'
p629
tp630
sS'Format_Signed'
p631
(S'\n__stdcall Format_Signed()\n'
p632
V\u000achar * Format_Signed(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined4 extraout_var;\u000a  \u000a  iVar1 = snprintf(_formatting_buffer2,0x15,"%ld");\u000a  return (char *)CONCAT44(extraout_var,iVar1);\u000a}\u000a\u000a
p633
S'MOV RCX,RDI\nMOV EDI,0x6fd450\nMOV ESI,0x15\nMOV EDX,0x406808\nXOR EAX,EAX\nJMP 0x004014a0\n'
p634
S'48 89 f9\nbf 50 d4 6f 00\nbe 15 00 00 00\nba 08 68 40 00\n31 c0\ne9 37 d0 ff ff\n'
p635
S'.text:0000000000404450\n.text:0000000000404453\n.text:0000000000404458\n.text:000000000040445d\n.text:0000000000404462\n.text:0000000000404464\n'
p636
tp637
sS'_put_char'
p638
(S'\n__stdcall _put_char()\n'
p639
V\u000avoid _put_char(char cParm1)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  if (0 < _buf_len) {\u000a    pcVar1 = _buf_ptr + 1;\u000a    *_buf_ptr = cParm1;\u000a    _buf_ptr = pcVar1;\u000a    _buf_len = _buf_len + -1;\u000a    return;\u000a  }\u000a  *_buf_ptr = 0;\u000a  return;\u000a}\u000a\u000a
p640
S'MOV RAX,qword ptr [0x006fd438]\nCMP dword ptr [0x006fd440],0x0\nJLE 0x004048a5\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [0x006fd438],RCX\nMOV byte ptr [RAX],DIL\nDEC dword ptr [0x006fd440]\nRET\nMOV byte ptr [RAX],0x0\nRET\n'
p641
S'48 8b 05 b1 8b 2f 00\n83 3d b2 8b 2f 00 00\n7e 15\n48 8d 48 01\n48 89 0d 9d 8b 2f 00\n40 88 38\nff 0d 9c 8b 2f 00\nc3\nc6 00 00\nc3\n'
p642
S'.text:0000000000404880\n.text:0000000000404887\n.text:000000000040488e\n.text:0000000000404890\n.text:0000000000404894\n.text:000000000040489b\n.text:000000000040489e\n.text:00000000004048a4\n.text:00000000004048a5\n.text:00000000004048a8\n'
p643
tp644
sS'Window_With_Name'
p645
(S'\n__stdcall Window_With_Name(Display * dpy, Window top, char * name)\n'
p646
V\u000aWindow Window_With_Name(Display *dpy,Window top,char *name)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  ulong uVar3;\u000a  uint nchildren;\u000a  Window dummy;\u000a  uint local_3c;\u000a  long local_38;\u000a  char *local_30;\u000a  undefined local_28 [8];\u000a  \u000a  iVar1 = XFetchName(dpy,top,&local_30);\u000a  if ((iVar1 == 0) || (iVar1 = strcmp(local_30,name), iVar1 != 0)) {\u000a    iVar1 = XQueryTree(dpy,top,local_28,local_28,&local_38,&local_3c);\u000a    if (iVar1 == 0) {\u000a      top = 0;\u000a    }\u000a    else {\u000a      if (local_3c == 0) {\u000a        top = 0;\u000a      }\u000a      else {\u000a        uVar3 = 0;\u000a        do {\u000a          top = Window_With_Name(dpy,*(Window *)(local_38 + uVar3 * 8),name);\u000a          if (top != 0) break;\u000a          uVar2 = uVar3 + 1;\u000a          uVar3 = uVar2 & 0xffffffff;\u000a          top = 0;\u000a        } while ((uint)uVar2 < local_3c);\u000a      }\u000a      if (local_38 != 0) {\u000a        XFree();\u000a      }\u000a    }\u000a  }\u000a  return top;\u000a}\u000a\u000a
p647
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R15,RDX\nMOV R14,RSI\nMOV R12,RDI\nLEA RDX,[RSP + 0x18]\nCALL 0x00401520\nTEST EAX,EAX\nJZ 0x00401e03\nMOV RDI,qword ptr [RSP + 0x18]\nMOV RSI,R15\nCALL 0x00401530\nTEST EAX,EAX\nJZ 0x00401e70\nLEA RDX,[RSP + 0x20]\nLEA R8,[RSP + 0x10]\nLEA R9,[RSP + 0xc]\nMOV RDI,R12\nMOV RSI,R14\nMOV RCX,RDX\nCALL 0x00401450\nTEST EAX,EAX\nJZ 0x00401e54\nCMP dword ptr [RSP + 0xc],0x0\nJZ 0x00401e59\nXOR R14D,R14D\nXOR EBX,EBX\nMOV RAX,qword ptr [RSP + 0x10]\nMOV RSI,qword ptr [RAX + RBX*0x8]\nMOV RDI,R12\nMOV RDX,R15\nCALL 0x00401dd0\nTEST RAX,RAX\nJNZ 0x00401e5e\nINC RBX\nCMP EBX,dword ptr [RSP + 0xc]\nJC 0x00401e30\nJMP 0x00401e61\nXOR R14D,R14D\nJMP 0x00401e70\nXOR R14D,R14D\nJMP 0x00401e61\nMOV R14,RAX\nMOV RDI,qword ptr [RSP + 0x10]\nTEST RDI,RDI\nJZ 0x00401e70\nCALL 0x00401480\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p648
S'41 57\n41 56\n41 54\n53\n48 83 ec 28\n49 89 d7\n49 89 f6\n49 89 fc\n48 8d 54 24 18\ne8 32 f7 ff ff\n85 c0\n74 11\n48 8b 7c 24 18\n4c 89 fe\ne8 31 f7 ff ff\n85 c0\n74 6d\n48 8d 54 24 20\n4c 8d 44 24 10\n4c 8d 4c 24 0c\n4c 89 e7\n4c 89 f6\n48 89 d1\ne8 30 f6 ff ff\n85 c0\n74 30\n83 7c 24 0c 00\n74 2e\n45 31 f6\n31 db\n48 8b 44 24 10\n48 8b 34 d8\n4c 89 e7\n4c 89 fa\ne8 8c ff ff ff\n48 85 c0\n75 15\n48 ff c3\n3b 5c 24 0c\n72 de\neb 0d\n45 31 f6\neb 17\n45 31 f6\neb 03\n49 89 c6\n48 8b 7c 24 10\n48 85 ff\n74 05\ne8 10 f6 ff ff\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p649
S'.text:0000000000401dd0\n.text:0000000000401dd2\n.text:0000000000401dd4\n.text:0000000000401dd6\n.text:0000000000401dd7\n.text:0000000000401ddb\n.text:0000000000401dde\n.text:0000000000401de1\n.text:0000000000401de4\n.text:0000000000401de9\n.text:0000000000401dee\n.text:0000000000401df0\n.text:0000000000401df2\n.text:0000000000401df7\n.text:0000000000401dfa\n.text:0000000000401dff\n.text:0000000000401e01\n.text:0000000000401e03\n.text:0000000000401e08\n.text:0000000000401e0d\n.text:0000000000401e12\n.text:0000000000401e15\n.text:0000000000401e18\n.text:0000000000401e1b\n.text:0000000000401e20\n.text:0000000000401e22\n.text:0000000000401e24\n.text:0000000000401e29\n.text:0000000000401e2b\n.text:0000000000401e2e\n.text:0000000000401e30\n.text:0000000000401e35\n.text:0000000000401e39\n.text:0000000000401e3c\n.text:0000000000401e3f\n.text:0000000000401e44\n.text:0000000000401e47\n.text:0000000000401e49\n.text:0000000000401e4c\n.text:0000000000401e50\n.text:0000000000401e52\n.text:0000000000401e54\n.text:0000000000401e57\n.text:0000000000401e59\n.text:0000000000401e5c\n.text:0000000000401e5e\n.text:0000000000401e61\n.text:0000000000401e66\n.text:0000000000401e69\n.text:0000000000401e6b\n.text:0000000000401e70\n.text:0000000000401e73\n.text:0000000000401e77\n.text:0000000000401e78\n.text:0000000000401e7a\n.text:0000000000401e7c\n.text:0000000000401e7e\n'
p650
tp651
sS'strcmp'
p652
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p653
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_006080d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p654
S'JMP qword ptr [0x006080d8]\n'
p655
S'ff 25 a2 6b 20 00\n'
p656
S'.plt:0000000000401530\n'
p657
tp658
sS'Read_Char'
p659
(S'\n__stdcall Read_Char(FILE * stream)\n'
p660
V\u000aint Read_Char(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = _IO_getc((_IO_FILE *)stream);\u000a  if (iVar1 != -1) {\u000a    return iVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  Fatal_Error("Bad format file: Unexpected EOF.");\u000a}\u000a\u000a
p661
S'PUSH RAX\nCALL 0x004015e0\nCMP EAX,-0x1\nJZ 0x0040376d\nPOP RCX\nRET\nMOV EDI,0x40611f\nXOR EAX,EAX\nCALL 0x00401a80\n'
p662
S'50\ne8 7a de ff ff\n83 f8 ff\n74 02\n59\nc3\nbf 1f 61 40 00\n31 c0\ne8 07 e3 ff ff\n'
p663
S'.text:0000000000403760\n.text:0000000000403761\n.text:0000000000403766\n.text:0000000000403769\n.text:000000000040376b\n.text:000000000040376c\n.text:000000000040376d\n.text:0000000000403772\n.text:0000000000403774\n'
p664
tp665
sS'Setup_Display_And_Screen'
p666
(S'\n__stdcall Setup_Display_And_Screen(int * argc, char * * argv)\n'
p667
V\u000avoid Setup_Display_And_Screen(int *argc,char **argv)\u000a\u000a{\u000a  char *display_name;\u000a  \u000a  display_name = Get_Display_Name(argc,argv);\u000a  dpy = Open_Display(display_name);\u000a  screen = XDefaultScreen(dpy);\u000a  return;\u000a}\u000a\u000a
p668
S'PUSH RAX\nCALL 0x00401880\nMOV RDI,RAX\nCALL 0x004019a0\nMOV qword ptr [0x00608b90],RAX\nMOV RDI,RAX\nCALL 0x004014e0\nMOV dword ptr [0x00608b98],EAX\nPOP RAX\nRET\n'
p669
S'50\ne8 8a fe ff ff\n48 89 c7\ne8 a2 ff ff ff\n48 89 05 8b 71 20 00\n48 89 c7\ne8 d3 fa ff ff\n89 05 85 71 20 00\n58\nc3\n'
p670
S'.text:00000000004019f0\n.text:00000000004019f1\n.text:00000000004019f6\n.text:00000000004019f9\n.text:00000000004019fe\n.text:0000000000401a05\n.text:0000000000401a08\n.text:0000000000401a0d\n.text:0000000000401a13\n.text:0000000000401a14\n'
p671
tp672
sS'GetAtomName'
p673
(S'\n__stdcall GetAtomName(Atom atom)\n'
p674
V\u000achar * GetAtomName(Atom atom)\u000a\u000a{\u000a  bool bVar1;\u000a  propertyRec *ppVar2;\u000a  Atom *pAVar3;\u000a  int iVar4;\u000a  int iVar5;\u000a  \u000a  ppVar2 = windowPropTable;\u000a  if (XpropMode != 0) {\u000a    ppVar2 = fontPropTable;\u000a  }\u000a  iVar4 = 0x1a;\u000a  if (XpropMode != 0) {\u000a    iVar4 = 0x2d;\u000a  }\u000a  pAVar3 = &ppVar2->atom;\u000a  iVar4 = iVar4 + 1;\u000a  do {\u000a    if (*pAVar3 == atom) {\u000a      return (char *)pAVar3[-1];\u000a    }\u000a    pAVar3 = pAVar3 + 4;\u000a    iVar5 = iVar4 + -1;\u000a    bVar1 = 0 < iVar4;\u000a    iVar4 = iVar5;\u000a  } while (iVar5 != 0 && bVar1);\u000a  return (char *)0x0;\u000a}\u000a\u000a
p675
S'MOV AL,byte ptr [0x00608bb8]\nMOV EDX,0x608590\nMOV ECX,0x608230\nTEST AL,AL\nCMOVNZ RCX,RDX\nMOV EAX,0x2d\nMOV EDX,0x1a\nCMOVNZ EDX,EAX\nINC EDX\nADD RCX,0x8\nXOR EAX,EAX\nNOP dword ptr [RAX + RAX*0x1]\nCMP qword ptr [RCX],RDI\nJZ 0x00404d9e\nADD RCX,0x20\nDEC EDX\nJG 0x00404d90\nRET\nMOV RAX,qword ptr [RCX + -0x8]\nRET\n'
p676
S'8a 05 52 3e 20 00\nba 90 85 60 00\nb9 30 82 60 00\n84 c0\n48 0f 45 ca\nb8 2d 00 00 00\nba 1a 00 00 00\n0f 45 d0\nff c2\n48 83 c1 08\n31 c0\n0f 1f 44 00 00\n48 39 39\n74 09\n48 83 c1 20\nff ca\n7f f3\nc3\n48 8b 41 f8\nc3\n'
p677
S'.text:0000000000404d60\n.text:0000000000404d66\n.text:0000000000404d6b\n.text:0000000000404d70\n.text:0000000000404d72\n.text:0000000000404d76\n.text:0000000000404d7b\n.text:0000000000404d80\n.text:0000000000404d83\n.text:0000000000404d85\n.text:0000000000404d89\n.text:0000000000404d8b\n.text:0000000000404d90\n.text:0000000000404d93\n.text:0000000000404d95\n.text:0000000000404d99\n.text:0000000000404d9b\n.text:0000000000404d9d\n.text:0000000000404d9e\n.text:0000000000404da2\n'
p678
tp679
sS'strtok'
p680
(S'\n__stdcall strtok(char * __s, char * __delim)\n'
p681
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strtok(char *__s,char *__delim)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strtok_006081a0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p682
S'JMP qword ptr [0x006081a0]\n'
p683
S'ff 25 da 6a 20 00\n'
p684
S'.plt:00000000004016c0\n'
p685
tp686
sS'Setup_Mapping'
p687
(S'\n__stdcall Setup_Mapping()\n'
p688
V\u000avoid Setup_Mapping(void)\u000a\u000a{\u000a  bool bVar1;\u000a  int iVar2;\u000a  char *pcVar3;\u000a  propertyRec *ppVar4;\u000a  char **ppcVar5;\u000a  int iVar6;\u000a  \u000a  ppVar4 = windowPropTable;\u000a  if (XpropMode != 0) {\u000a    ppVar4 = fontPropTable;\u000a  }\u000a  iVar2 = 0x1a;\u000a  if (XpropMode != 0) {\u000a    iVar2 = 0x2d;\u000a  }\u000a  ppcVar5 = &ppVar4->dformat;\u000a  iVar2 = iVar2 + 1;\u000a  do {\u000a    if (ppcVar5[-2] == (char *)0x0) {\u000a      pcVar3 = (char *)XInternAtom(dpy,ppcVar5[-3],1);\u000a      ppcVar5[-2] = pcVar3;\u000a      if (pcVar3 != (char *)0x0) goto LAB_00402ad5;\u000a    }\u000a    else {\u000aLAB_00402ad5:\u000a      Add_Mapping((Atom)ppcVar5[-2],ppcVar5[-1],*ppcVar5);\u000a    }\u000a    ppcVar5 = ppcVar5 + 4;\u000a    iVar6 = iVar2 + -1;\u000a    bVar1 = iVar2 < 1;\u000a    iVar2 = iVar6;\u000a    if (iVar6 == 0 || bVar1) {\u000a      return;\u000a    }\u000a  } while( true );\u000a}\u000a\u000a
p689
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV AL,byte ptr [0x00608bb8]\nMOV ECX,0x608590\nMOV EBX,0x608230\nTEST AL,AL\nCMOVNZ RBX,RCX\nMOV EAX,0x2d\nMOV EBP,0x1a\nCMOVNZ EBP,EAX\nINC EBP\nADD RBX,0x18\nNOP dword ptr [RAX]\nCMP qword ptr [RBX + -0x10],0x0\nJNZ 0x00402ad5\nMOV RDI,qword ptr [0x00608b90]\nMOV RSI,qword ptr [RBX + -0x18]\nMOV EDX,0x1\nCALL 0x004015f0\nMOV qword ptr [RBX + -0x10],RAX\nTEST RAX,RAX\nJZ 0x00402ae5\nMOV RDI,qword ptr [RBX + -0x10]\nMOV RSI,qword ptr [RBX + -0x8]\nMOV RDX,qword ptr [RBX]\nCALL 0x00403580\nADD RBX,0x20\nDEC EBP\nJG 0x00402ab0\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p690
S'55\n53\n50\n8a 05 2f 61 20 00\nb9 90 85 60 00\nbb 30 82 60 00\n84 c0\n48 0f 45 d9\nb8 2d 00 00 00\nbd 1a 00 00 00\n0f 45 e8\nff c5\n48 83 c3 18\n0f 1f 40 00\n48 83 7b f0 00\n75 1e\n48 8b 3d d2 60 20 00\n48 8b 73 e8\nba 01 00 00 00\ne8 24 eb ff ff\n48 89 43 f0\n48 85 c0\n74 10\n48 8b 7b f0\n48 8b 73 f8\n48 8b 13\ne8 9b 0a 00 00\n48 83 c3 20\nff cd\n7f c3\n48 83 c4 08\n5b\n5d\nc3\n'
p691
S'.text:0000000000402a80\n.text:0000000000402a81\n.text:0000000000402a82\n.text:0000000000402a83\n.text:0000000000402a89\n.text:0000000000402a8e\n.text:0000000000402a93\n.text:0000000000402a95\n.text:0000000000402a99\n.text:0000000000402a9e\n.text:0000000000402aa3\n.text:0000000000402aa6\n.text:0000000000402aa8\n.text:0000000000402aac\n.text:0000000000402ab0\n.text:0000000000402ab5\n.text:0000000000402ab7\n.text:0000000000402abe\n.text:0000000000402ac2\n.text:0000000000402ac7\n.text:0000000000402acc\n.text:0000000000402ad0\n.text:0000000000402ad3\n.text:0000000000402ad5\n.text:0000000000402ad9\n.text:0000000000402add\n.text:0000000000402ae0\n.text:0000000000402ae5\n.text:0000000000402ae9\n.text:0000000000402aeb\n.text:0000000000402aed\n.text:0000000000402af1\n.text:0000000000402af2\n.text:0000000000402af3\n'
p692
tp693
sS'Open_Font'
p694
(S'\n__stdcall Open_Font(char * name)\n'
p695
V\u000aXFontStruct * Open_Font(char *name)\u000a\u000a{\u000a  XFontStruct *pXVar1;\u000a  \u000a  pXVar1 = (XFontStruct *)XLoadQueryFont(dpy,name);\u000a  if (pXVar1 != (XFontStruct *)0x0) {\u000a    return pXVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  Fatal_Error("Unable to open font %s!",name);\u000a}\u000a\u000a
p696
S'PUSH RBX\nMOV RBX,RDI\nMOV RDI,qword ptr [0x00608b90]\nMOV RSI,RBX\nCALL 0x004014c0\nTEST RAX,RAX\nJZ 0x00401a6a\nPOP RBX\nRET\nMOV EDI,0x404e84\nXOR EAX,EAX\nMOV RSI,RBX\nCALL 0x00401a80\n'
p697
S'53\n48 89 fb\n48 8b 3d 35 71 20 00\n48 89 de\ne8 5d fa ff ff\n48 85 c0\n74 02\n5b\nc3\nbf 84 4e 40 00\n31 c0\n48 89 de\ne8 07 00 00 00\n'
p698
S'.text:0000000000401a50\n.text:0000000000401a51\n.text:0000000000401a54\n.text:0000000000401a5b\n.text:0000000000401a5e\n.text:0000000000401a63\n.text:0000000000401a66\n.text:0000000000401a68\n.text:0000000000401a69\n.text:0000000000401a6a\n.text:0000000000401a6f\n.text:0000000000401a71\n.text:0000000000401a74\n'
p699
tp700
sS'XGetWindowAttributes'
p701
(S'\n__stdcall XGetWindowAttributes()\n'
p702
V\u000avoid XGetWindowAttributes(void)\u000a\u000a{\u000a  (*(code *)PTR_XGetWindowAttributes_00608190)();\u000a  return;\u000a}\u000a\u000a
p703
S'JMP qword ptr [0x00608190]\n'
p704
S'ff 25 ea 6a 20 00\n'
p705
S'.plt:00000000004016a0\n'
p706
tp707
sS'XSelectInput'
p708
(S'\n__stdcall XSelectInput()\n'
p709
V\u000avoid XSelectInput(void)\u000a\u000a{\u000a  (*(code *)PTR_XSelectInput_00608170)();\u000a  return;\u000a}\u000a\u000a
p710
S'JMP qword ptr [0x00608170]\n'
p711
S'ff 25 0a 6b 20 00\n'
p712
S'.plt:0000000000401660\n'
p713
tp714
sS'Handle_Backslash'
p715
(S'\n__stdcall Handle_Backslash(char * dformat)\n'
p716
V\u000achar * Handle_Backslash(char *dformat)\u000a\u000a{\u000a  char *string;\u000a  int __c;\u000a  ulong i;\u000a  int local_10 [2];\u000a  \u000a  __c = (int)*dformat;\u000a  string = dformat + 1;\u000a  if (*dformat != 0) {\u000a    if (__c - 0x30U < 8) {\u000a      string = Scan_Octal(string,(ulong *)local_10);\u000a      __c = local_10[0];\u000a    }\u000a    else {\u000a      if (__c == 0x74) {\u000a        __c = 9;\u000a      }\u000a      else {\u000a        if (__c == 0x6e) {\u000a          __c = 10;\u000a        }\u000a      }\u000a    }\u000a    putchar(__c);\u000a  }\u000a  return string;\u000a}\u000a\u000a
p717
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RDI\nMOVSX EDI,byte ptr [RBX]\nINC RBX\nTEST EDI,EDI\nJZ 0x00403eb3\nLEA EAX,[RDI + -0x30]\nCMP EAX,0x8\nJNC 0x00403ebc\nLEA RSI,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00403fe0\nMOV RBX,RAX\nMOV EDI,dword ptr [RSP + 0x8]\nCALL 0x004013d0\nMOV RAX,RBX\nADD RSP,0x10\nPOP RBX\nRET\nCMP EDI,0x74\nJZ 0x00403ecd\nCMP EDI,0x6e\nJNZ 0x00403ed4\nMOV EDI,0xa\nJMP 0x00403eae\nMOV EDI,0x9\nJMP 0x00403eae\nJMP 0x00403eae\n'
p718
S'53\n48 83 ec 10\n48 89 fb\n0f be 3b\n48 ff c3\n85 ff\n74 21\n8d 47 d0\n83 f8 08\n73 22\n48 8d 74 24 08\n48 89 df\ne8 39 01 00 00\n48 89 c3\n8b 7c 24 08\ne8 1d d5 ff ff\n48 89 d8\n48 83 c4 10\n5b\nc3\n83 ff 74\n74 0c\n83 ff 6e\n75 0e\nbf 0a 00 00 00\neb e1\nbf 09 00 00 00\neb da\neb d8\n'
p719
S'.text:0000000000403e80\n.text:0000000000403e81\n.text:0000000000403e85\n.text:0000000000403e88\n.text:0000000000403e8b\n.text:0000000000403e8e\n.text:0000000000403e90\n.text:0000000000403e92\n.text:0000000000403e95\n.text:0000000000403e98\n.text:0000000000403e9a\n.text:0000000000403e9f\n.text:0000000000403ea2\n.text:0000000000403ea7\n.text:0000000000403eaa\n.text:0000000000403eae\n.text:0000000000403eb3\n.text:0000000000403eb6\n.text:0000000000403eba\n.text:0000000000403ebb\n.text:0000000000403ebc\n.text:0000000000403ebf\n.text:0000000000403ec1\n.text:0000000000403ec4\n.text:0000000000403ec6\n.text:0000000000403ecb\n.text:0000000000403ecd\n.text:0000000000403ed2\n.text:0000000000403ed4\n'
p720
tp721
sS'__libc_csu_fini'
p722
(S'\n__stdcall __libc_csu_fini()\n'
p723
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p724
S'RET\n'
p725
S'f3 c3\n'
p726
S'.text:0000000000404e30\n'
p727
tp728
sS'Get_Display_Name'
p729
(S'\n__stdcall Get_Display_Name(int * pargc, char * * argv)\n'
p730
V\u000achar * Get_Display_Name(int *pargc,char **argv)\u000a\u000a{\u000a  int iVar1;\u000a  char *__s1;\u000a  int iVar2;\u000a  char **ppcVar3;\u000a  char **ppcVar4;\u000a  int iVar5;\u000a  long lVar6;\u000a  char *local_40;\u000a  \u000a  iVar1 = *pargc;\u000a  ppcVar4 = argv + 1;\u000a  if ((long)iVar1 < 2) {\u000a    local_40 = (char *)0x0;\u000a  }\u000a  else {\u000a    iVar5 = 1;\u000a    local_40 = (char *)0x0;\u000a    do {\u000a      lVar6 = (long)iVar5;\u000a      __s1 = argv[lVar6];\u000a      iVar2 = strcmp(__s1,"-display");\u000a      if ((iVar2 == 0) || (((*__s1 == '-' && (__s1[1] == 'd')) && (__s1[2] == 0)))) {\u000a        iVar5 = iVar5 + 1;\u000a        if (iVar1 <= iVar5) {\u000a                    /* WARNING: Subroutine does not return */\u000a          usage();\u000a        }\u000a        local_40 = argv[(long)iVar5];\u000a        *pargc = *pargc + -2;\u000a      }\u000a      else {\u000a        if ((*__s1 == '-') && (__s1[1] == 0)) {\u000a          if (iVar5 < iVar1) {\u000a            argv = argv + lVar6;\u000a            lVar6 = (long)iVar1 - lVar6;\u000a            ppcVar3 = ppcVar4;\u000a            do {\u000a              *ppcVar3 = *argv;\u000a              ppcVar3 = ppcVar3 + 1;\u000a              argv = argv + 1;\u000a              lVar6 = lVar6 + -1;\u000a            } while (lVar6 != 0);\u000a            ppcVar4 = ppcVar4 + (ulong)(uint)((iVar1 + -1) - iVar5) + 1;\u000a          }\u000a          break;\u000a        }\u000a        *ppcVar4 = __s1;\u000a        ppcVar4 = ppcVar4 + 1;\u000a      }\u000a      iVar5 = iVar5 + 1;\u000a    } while (iVar5 < iVar1);\u000a  }\u000a  *ppcVar4 = (char *)0x0;\u000a  return local_40;\u000a}\u000a\u000a
p731
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,RSI\nMOV qword ptr [RSP + 0x10],RDI\nMOVSXD RBP,dword ptr [RDI]\nLEA R13,[R12 + 0x8]\nCMP RBP,0x2\nJL 0x0040193a\nMOV R14D,0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVSXD R15,R14D\nMOV RBX,qword ptr [R12 + R15*0x8]\nMOV ESI,0x404e54\nMOV RDI,RBX\nCALL 0x00401530\nTEST EAX,EAX\nJZ 0x00401910\nCMP byte ptr [RBX],0x2d\nJNZ 0x004018f0\nCMP byte ptr [RBX + 0x1],0x64\nJNZ 0x004018f0\nCMP byte ptr [RBX + 0x2],0x0\nJZ 0x00401910\nNOP dword ptr [RAX]\nCMP byte ptr [RBX],0x2d\nJNZ 0x004018fb\nCMP byte ptr [RBX + 0x1],0x0\nJZ 0x0040195d\nMOV qword ptr [R13],RBX\nADD R13,0x8\nJMP 0x00401930\nINC R14D\nCMP R14D,EBP\nJGE 0x0040199a\nMOVSXD RAX,R14D\nMOV RAX,qword ptr [R12 + RAX*0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RAX,qword ptr [RSP + 0x10]\nADD dword ptr [RAX],-0x2\nINC R14D\nCMP R14D,EBP\nJL 0x004018c0\nJMP 0x00401941\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nMOV qword ptr [R13],0x0\nMOV RAX,qword ptr [RSP + 0x8]\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP R14D,EBP\nJGE 0x00401941\nLEA EAX,[RBP + -0x1]\nSUB EAX,R14D\nINC RAX\nLEA RCX,[R12 + R15*0x8]\nSUB RBP,R15\nMOV RDX,R13\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RSI,qword ptr [RCX]\nMOV qword ptr [RDX],RSI\nADD RDX,0x8\nADD RCX,0x8\nDEC RBP\nJNZ 0x00401980\nLEA R13,[R13 + RAX*0x8]\nJMP 0x00401941\nCALL 0x00402390\n'
p732
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 f4\n48 89 7c 24 10\n48 63 2f\n4d 8d 6c 24 08\n48 83 fd 02\n0f 8c 92 00 00 00\n41 be 01 00 00 00\n31 c0\n48 89 44 24 08\n66 66 2e 0f 1f 84 00 00 00 00 00\n4d 63 fe\n4b 8b 1c fc\nbe 54 4e 40 00\n48 89 df\ne8 5c fc ff ff\n85 c0\n74 38\n80 3b 2d\n75 13\n80 7b 01 64\n75 0d\n80 7b 02 00\n74 27\n0f 1f 80 00 00 00 00\n80 3b 2d\n75 06\n80 7b 01 00\n74 62\n49 89 5d 00\n49 83 c5 08\neb 2b\n41 ff c6\n41 39 ee\n0f 8d 7e 00 00 00\n49 63 c6\n49 8b 04 c4\n48 89 44 24 08\n48 8b 44 24 10\n83 00 fe\n41 ff c6\n41 39 ee\n7c 88\neb 07\n31 c0\n48 89 44 24 08\n49 c7 45 00 00 00 00 00\n48 8b 44 24 08\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n41 39 ee\n7d df\n8d 45 ff\n44 29 f0\n48 ff c0\n4b 8d 0c fc\n4c 29 fd\n4c 89 ea\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 31\n48 89 32\n48 83 c2 08\n48 83 c1 08\n48 ff cd\n75 ed\n4d 8d 6c c5 00\neb a7\ne8 f1 09 00 00\n'
p733
S'.text:0000000000401880\n.text:0000000000401881\n.text:0000000000401883\n.text:0000000000401885\n.text:0000000000401887\n.text:0000000000401889\n.text:000000000040188a\n.text:000000000040188e\n.text:0000000000401891\n.text:0000000000401896\n.text:0000000000401899\n.text:000000000040189e\n.text:00000000004018a2\n.text:00000000004018a8\n.text:00000000004018ae\n.text:00000000004018b0\n.text:00000000004018b5\n.text:00000000004018c0\n.text:00000000004018c3\n.text:00000000004018c7\n.text:00000000004018cc\n.text:00000000004018cf\n.text:00000000004018d4\n.text:00000000004018d6\n.text:00000000004018d8\n.text:00000000004018db\n.text:00000000004018dd\n.text:00000000004018e1\n.text:00000000004018e3\n.text:00000000004018e7\n.text:00000000004018e9\n.text:00000000004018f0\n.text:00000000004018f3\n.text:00000000004018f5\n.text:00000000004018f9\n.text:00000000004018fb\n.text:00000000004018ff\n.text:0000000000401903\n.text:0000000000401910\n.text:0000000000401913\n.text:0000000000401916\n.text:000000000040191c\n.text:000000000040191f\n.text:0000000000401923\n.text:0000000000401928\n.text:000000000040192d\n.text:0000000000401930\n.text:0000000000401933\n.text:0000000000401936\n.text:0000000000401938\n.text:000000000040193a\n.text:000000000040193c\n.text:0000000000401941\n.text:0000000000401949\n.text:000000000040194e\n.text:0000000000401952\n.text:0000000000401953\n.text:0000000000401955\n.text:0000000000401957\n.text:0000000000401959\n.text:000000000040195b\n.text:000000000040195c\n.text:000000000040195d\n.text:0000000000401960\n.text:0000000000401962\n.text:0000000000401965\n.text:0000000000401968\n.text:000000000040196b\n.text:000000000040196f\n.text:0000000000401972\n.text:0000000000401975\n.text:0000000000401980\n.text:0000000000401983\n.text:0000000000401986\n.text:000000000040198a\n.text:000000000040198e\n.text:0000000000401991\n.text:0000000000401993\n.text:0000000000401998\n.text:000000000040199a\n'
p734
tp735
sS'abort'
p736
(S'\n__stdcall abort()\n'
p737
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_00608030)();\u000a  return;\u000a}\u000a\u000a
p738
S'JMP qword ptr [0x00608030]\n'
p739
S'ff 25 4a 6c 20 00\n'
p740
S'.plt:00000000004013e0\n'
p741
tp742
sS'Extract_Value'
p743
(S'\n__stdcall Extract_Value(char * * pointer, int * length)\n'
p744
V\u000along Extract_Value(char **pointer,int *length)\u000a\u000a{\u000a  byte bVar1;\u000a  ushort uVar2;\u000a  ulong uVar3;\u000a  ulong uVar4;\u000a  int in_ECX;\u000a  ulong *puVar5;\u000a  int in_EDX;\u000a  int iVar6;\u000a  \u000a  if (in_EDX == 0x20) {\u000a    uVar3 = *(ulong *)*pointer;\u000a    uVar4 = uVar3 & 0xffffffff;\u000a    if (in_ECX != 0) {\u000a      uVar4 = uVar3;\u000a    }\u000a    puVar5 = (ulong *)(*pointer + 1);\u000a    iVar6 = -8;\u000a  }\u000a  else {\u000a    if (in_EDX == 0x10) {\u000a      uVar2 = *(ushort *)*pointer;\u000a      uVar4 = (long)(short)uVar2;\u000a      if (in_ECX == 0) {\u000a        uVar4 = (ulong)uVar2;\u000a      }\u000a      puVar5 = (ulong *)(*pointer + 1);\u000a      iVar6 = -2;\u000a    }\u000a    else {\u000a      if (in_EDX != 8) {\u000a                    /* WARNING: Subroutine does not return */\u000a        abort();\u000a      }\u000a      bVar1 = **pointer;\u000a      uVar4 = (long)(char)bVar1;\u000a      if (in_ECX == 0) {\u000a        uVar4 = (ulong)bVar1;\u000a      }\u000a      puVar5 = (ulong *)(*pointer + 1);\u000a      iVar6 = -1;\u000a    }\u000a  }\u000a  *(ulong **)pointer = puVar5;\u000a  *length = *length + iVar6;\u000a  return uVar4;\u000a}\u000a\u000a
p745
S'CMP EDX,0x20\nJZ 0x00403e39\nCMP EDX,0x10\nJZ 0x00403e52\nCMP EDX,0x8\nJNZ 0x00403e71\nTEST ECX,ECX\nMOV RCX,qword ptr [RDI]\nMOVZX EDX,byte ptr [RCX]\nMOVSX RAX,DL\nCMOVZ RAX,RDX\nINC RCX\nMOV EDX,0xffffffff\nJMP 0x00403e6b\nTEST ECX,ECX\nMOV RCX,qword ptr [RDI]\nMOV RDX,qword ptr [RCX]\nMOV EAX,EDX\nCMOVNZ RAX,RDX\nADD RCX,0x8\nMOV EDX,0xfffffff8\nJMP 0x00403e6b\nTEST ECX,ECX\nMOV RCX,qword ptr [RDI]\nMOVZX EDX,word ptr [RCX]\nMOVSX RAX,DX\nCMOVZ RAX,RDX\nADD RCX,0x2\nMOV EDX,0xfffffffe\nMOV qword ptr [RDI],RCX\nADD dword ptr [RSI],EDX\nRET\nPUSH RAX\nCALL 0x004013e0\n'
p746
S'83 fa 20\n74 24\n83 fa 10\n74 38\n83 fa 08\n75 52\n85 c9\n48 8b 0f\n0f b6 11\n48 0f be c2\n48 0f 44 c2\n48 ff c1\nba ff ff ff ff\neb 32\n85 c9\n48 8b 0f\n48 8b 11\n89 d0\n48 0f 45 c2\n48 83 c1 08\nba f8 ff ff ff\neb 19\n85 c9\n48 8b 0f\n0f b7 11\n48 0f bf c2\n48 0f 44 c2\n48 83 c1 02\nba fe ff ff ff\n48 89 0f\n01 16\nc3\n50\ne8 69 d5 ff ff\n'
p747
S'.text:0000000000403e10\n.text:0000000000403e13\n.text:0000000000403e15\n.text:0000000000403e18\n.text:0000000000403e1a\n.text:0000000000403e1d\n.text:0000000000403e1f\n.text:0000000000403e21\n.text:0000000000403e24\n.text:0000000000403e27\n.text:0000000000403e2b\n.text:0000000000403e2f\n.text:0000000000403e32\n.text:0000000000403e37\n.text:0000000000403e39\n.text:0000000000403e3b\n.text:0000000000403e3e\n.text:0000000000403e41\n.text:0000000000403e43\n.text:0000000000403e47\n.text:0000000000403e4b\n.text:0000000000403e50\n.text:0000000000403e52\n.text:0000000000403e54\n.text:0000000000403e57\n.text:0000000000403e5a\n.text:0000000000403e5e\n.text:0000000000403e62\n.text:0000000000403e66\n.text:0000000000403e6b\n.text:0000000000403e6e\n.text:0000000000403e70\n.text:0000000000403e71\n.text:0000000000403e72\n'
p748
tp749
sS'Lookup_Formats'
p750
(S'\n__stdcall Lookup_Formats(Atom atom, char * * format, char * * dformat)\n'
p751
V\u000avoid Lookup_Formats(Atom atom,char **format,char **dformat)\u000a\u000a{\u000a  long lVar1;\u000a  long lVar2;\u000a  long lVar3;\u000a  \u000a  if (_property_formats != (thunk *)0x0) {\u000a    lVar1 = (long)_property_formats->thunk_count * 0x38;\u000a    lVar3 = (long)_property_formats->thunk_count + 1;\u000a    do {\u000a      lVar2 = lVar1;\u000a      if (lVar3 + -1 == 0 || lVar3 < 1) {\u000a        return;\u000a      }\u000a      lVar1 = lVar2 + -0x38;\u000a      lVar3 = lVar3 + -1;\u000a    } while (*(Atom *)((long)&_property_formats[-1].extra_value + lVar2) != atom);\u000a    if (*format == (char *)0x0) {\u000a      *format = *(char **)((long)&_property_formats->thunk_count + lVar2);\u000a    }\u000a    if (*dformat == (char *)0x0) {\u000a      *dformat = *(char **)((long)&_property_formats->propname + lVar2);\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p752
S'MOV R8,qword ptr [0x00608bd8]\nTEST R8,R8\nJZ 0x00403823\nMOVSXD RCX,dword ptr [R8]\nIMUL RAX,RCX,0x38\nINC RCX\nNOP word ptr CS:[RAX + RAX*0x1]\nDEC RCX\nJLE 0x00403823\nCMP qword ptr [R8 + RAX*0x1 + -0x28],RDI\nLEA RAX,[RAX + -0x38]\nJNZ 0x004037f0\nCMP qword ptr [RSI],0x0\nJNZ 0x0040380e\nMOV RCX,qword ptr [R8 + RAX*0x1 + 0x28]\nMOV qword ptr [RSI],RCX\nCMP qword ptr [RDX],0x0\nJNZ 0x00403823\nMOV RCX,qword ptr [0x00608bd8]\nMOV RAX,qword ptr [RCX + RAX*0x1 + 0x30]\nMOV qword ptr [RDX],RAX\nRET\n'
p753
S'4c 8b 05 01 54 20 00\n4d 85 c0\n74 47\n49 63 08\n48 6b c1 38\n48 ff c1\n66 2e 0f 1f 84 00 00 00 00 00\n48 ff c9\n7e 2e\n49 39 7c 00 d8\n48 8d 40 c8\n75 f0\n48 83 3e 00\n75 08\n49 8b 4c 00 28\n48 89 0e\n48 83 3a 00\n75 0f\n48 8b 0d bd 53 20 00\n48 8b 44 01 30\n48 89 02\nc3\n'
p754
S'.text:00000000004037d0\n.text:00000000004037d7\n.text:00000000004037da\n.text:00000000004037dc\n.text:00000000004037df\n.text:00000000004037e3\n.text:00000000004037e6\n.text:00000000004037f0\n.text:00000000004037f3\n.text:00000000004037f5\n.text:00000000004037fa\n.text:00000000004037fe\n.text:0000000000403800\n.text:0000000000403804\n.text:0000000000403806\n.text:000000000040380b\n.text:000000000040380e\n.text:0000000000403812\n.text:0000000000403814\n.text:000000000040381b\n.text:0000000000403820\n.text:0000000000403823\n'
p755
tp756
sS'is_valid_utf8'
p757
(S'\n__stdcall is_valid_utf8(char * string)\n'
p758
V\u000aint is_valid_utf8(char *string)\u000a\u000a{\u000a  byte bVar1;\u000a  uint uVar2;\u000a  ulong uVar3;\u000a  int in_ESI;\u000a  long lVar4;\u000a  int iVar5;\u000a  \u000a  if (0 < in_ESI) {\u000a    lVar4 = 0;\u000a    iVar5 = 0;\u000a    uVar3 = 0;\u000a    do {\u000a      bVar1 = string[lVar4];\u000a      if ((char)bVar1 < 0) {\u000a        uVar2 = (uint)bVar1;\u000a        if ((bVar1 & 0xc0) == 0x80) {\u000a          if (iVar5 == 0) {\u000a            return 4;\u000a          }\u000a          uVar3 = (long)(int)((uVar2 & 0x3f) << (((char)iVar5 * 2 + -2) * 3 & 0x1fU)) | uVar3;\u000a          if (uVar3 == 0) {\u000a            return 2;\u000a          }\u000a          iVar5 = iVar5 + -1;\u000a        }\u000a        else {\u000a          if ((bVar1 & 0xe0) == 0xc0) {\u000a            if (0 < iVar5) {\u000a              return 3;\u000a            }\u000a            uVar3 = (ulong)(((uint)bVar1 & 0x1f) << 6);\u000a            if ((bVar1 & 0x1f) == 0) {\u000a              return 2;\u000a            }\u000a            iVar5 = 1;\u000a          }\u000a          else {\u000a            if ((bVar1 & 0xf0) == 0xe0) {\u000a              if (0 < iVar5) {\u000a                return 3;\u000a              }\u000a              uVar3 = (ulong)((uVar2 & 0xf) << 0xc);\u000a              iVar5 = 2;\u000a            }\u000a            else {\u000a              if ((bVar1 & 0xf8) != 0xf0) {\u000a                return 1;\u000a              }\u000a              if (0 < iVar5) {\u000a                return 3;\u000a              }\u000a              uVar2 = (uVar2 & 7) << 0x12;\u000a              uVar3 = (ulong)uVar2;\u000a              if (0x10ffff < uVar2) {\u000a                return 1;\u000a              }\u000a              iVar5 = 3;\u000a            }\u000a          }\u000a        }\u000a      }\u000a      else {\u000a        if (0 < iVar5) {\u000a          return 3;\u000a        }\u000a        iVar5 = 0;\u000a        uVar3 = (ulong)bVar1;\u000a      }\u000a      lVar4 = lVar4 + 1;\u000a    } while (lVar4 < (long)in_ESI);\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p759
S'TEST ESI,ESI\nJLE 0x00404a5f\nMOVSXD R8,ESI\nXOR ESI,ESI\nXOR R9D,R9D\nXOR EAX,EAX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVZX EDX,byte ptr [RDI + RSI*0x1]\nTEST DL,DL\nJS 0x00404990\nTEST R9D,R9D\nJG 0x00404a62\nXOR R9D,R9D\nJMP 0x00404a50\nMOV ECX,EDX\nAND ECX,0xc0\nCMP ECX,0x80\nJNZ 0x004049ca\nTEST R9D,R9D\nJZ 0x00404a68\nAND EDX,0x3f\nLEA ECX,[R9 + R9*0x1 + -0x2]\nLEA ECX,[RCX + RCX*0x2]\nSHL EDX,CL\nMOVSXD RDX,EDX\nOR RDX,RAX\nJZ 0x00404a6e\nDEC R9D\nJMP 0x00404a50\nMOV EAX,EDX\nAND EAX,0xe0\nCMP EAX,0xc0\nJNZ 0x004049f8\nTEST R9D,R9D\nJG 0x00404a74\nSHL EDX,0x6\nAND EDX,0x7c0\nJZ 0x00404a7a\nMOV R9D,0x1\nJMP 0x00404a50\nMOV EAX,EDX\nAND EAX,0xf0\nCMP EAX,0xe0\nJNZ 0x00404a19\nTEST R9D,R9D\nJG 0x00404a80\nAND EDX,0xf\nSHL EDX,0xc\nMOV R9D,0x2\nJMP 0x00404a50\nMOV ECX,EDX\nAND ECX,0xf8\nMOV EAX,0x1\nCMP ECX,0xf0\nJNZ 0x00404a61\nTEST R9D,R9D\nJG 0x00404a86\nAND EDX,0x7\nSHL EDX,0x12\nCMP EDX,0x10ffff\nJA 0x00404a61\nMOV R9D,0x3\nNOP word ptr [RAX + RAX*0x1]\nINC RSI\nCMP RSI,R8\nMOV RAX,RDX\nJL 0x00404970\nXOR EAX,EAX\nRET\nMOV EAX,0x3\nRET\nMOV EAX,0x4\nRET\nMOV EAX,0x2\nRET\nMOV EAX,0x3\nRET\nMOV EAX,0x2\nRET\nMOV EAX,0x3\nRET\nMOV EAX,0x3\nRET\n'
p760
S'85 f6\n0f 8e 07 01 00 00\n4c 63 c6\n31 f6\n45 31 c9\n31 c0\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 14 37\n84 d2\n78 18\n45 85 c9\n0f 8f e1 00 00 00\n45 31 c9\ne9 c7 00 00 00\n89 d1\n81 e1 c0 00 00 00\n81 f9 80 00 00 00\n75 2a\n45 85 c9\n0f 84 bf 00 00 00\n83 e2 3f\n43 8d 4c 09 fe\n8d 0c 49\nd3 e2\n48 63 d2\n48 09 c2\n0f 84 ac 00 00 00\n41 ff c9\ne9 86 00 00 00\n89 d0\n25 e0 00 00 00\n3d c0 00 00 00\n75 20\n45 85 c9\n0f 8f 93 00 00 00\nc1 e2 06\n81 e2 c0 07 00 00\n0f 84 8a 00 00 00\n41 b9 01 00 00 00\neb 58\n89 d0\n25 f0 00 00 00\n3d e0 00 00 00\n75 13\n45 85 c9\n7f 75\n83 e2 0f\nc1 e2 0c\n41 b9 02 00 00 00\neb 37\n89 d1\n81 e1 f8 00 00 00\nb8 01 00 00 00\n81 f9 f0 00 00 00\n75 33\n45 85 c9\n7f 53\n83 e2 07\nc1 e2 12\n81 fa ff ff 10 00\n77 20\n41 b9 03 00 00 00\n66 0f 1f 84 00 00 00 00 00\n48 ff c6\n4c 39 c6\n48 89 d0\n0f 8c 11 ff ff ff\n31 c0\nc3\nb8 03 00 00 00\nc3\nb8 04 00 00 00\nc3\nb8 02 00 00 00\nc3\nb8 03 00 00 00\nc3\nb8 02 00 00 00\nc3\nb8 03 00 00 00\nc3\nb8 03 00 00 00\nc3\n'
p761
S'.text:0000000000404950\n.text:0000000000404952\n.text:0000000000404958\n.text:000000000040495b\n.text:000000000040495d\n.text:0000000000404960\n.text:0000000000404962\n.text:0000000000404970\n.text:0000000000404974\n.text:0000000000404976\n.text:0000000000404978\n.text:000000000040497b\n.text:0000000000404981\n.text:0000000000404984\n.text:0000000000404990\n.text:0000000000404992\n.text:0000000000404998\n.text:000000000040499e\n.text:00000000004049a0\n.text:00000000004049a3\n.text:00000000004049a9\n.text:00000000004049ac\n.text:00000000004049b1\n.text:00000000004049b4\n.text:00000000004049b6\n.text:00000000004049b9\n.text:00000000004049bc\n.text:00000000004049c2\n.text:00000000004049c5\n.text:00000000004049ca\n.text:00000000004049cc\n.text:00000000004049d1\n.text:00000000004049d6\n.text:00000000004049d8\n.text:00000000004049db\n.text:00000000004049e1\n.text:00000000004049e4\n.text:00000000004049ea\n.text:00000000004049f0\n.text:00000000004049f6\n.text:00000000004049f8\n.text:00000000004049fa\n.text:00000000004049ff\n.text:0000000000404a04\n.text:0000000000404a06\n.text:0000000000404a09\n.text:0000000000404a0b\n.text:0000000000404a0e\n.text:0000000000404a11\n.text:0000000000404a17\n.text:0000000000404a19\n.text:0000000000404a1b\n.text:0000000000404a21\n.text:0000000000404a26\n.text:0000000000404a2c\n.text:0000000000404a2e\n.text:0000000000404a31\n.text:0000000000404a33\n.text:0000000000404a36\n.text:0000000000404a39\n.text:0000000000404a3f\n.text:0000000000404a41\n.text:0000000000404a47\n.text:0000000000404a50\n.text:0000000000404a53\n.text:0000000000404a56\n.text:0000000000404a59\n.text:0000000000404a5f\n.text:0000000000404a61\n.text:0000000000404a62\n.text:0000000000404a67\n.text:0000000000404a68\n.text:0000000000404a6d\n.text:0000000000404a6e\n.text:0000000000404a73\n.text:0000000000404a74\n.text:0000000000404a79\n.text:0000000000404a7a\n.text:0000000000404a7f\n.text:0000000000404a80\n.text:0000000000404a85\n.text:0000000000404a86\n.text:0000000000404a8b\n'
p762
tp763
sS'Add_Mapping'
p764
(S'\n__stdcall Add_Mapping(Atom atom, char * format, char * dformat)\n'
p765
V\u000avoid Add_Mapping(Atom atom,char *format,char *dformat)\u000a\u000a{\u000a  undefined4 local_48;\u000a  undefined4 uStack68;\u000a  undefined4 local_30;\u000a  undefined4 uStack44;\u000a  \u000a  if (_property_formats == (thunk *)0x0) {\u000a    _property_formats = Create_Thunk_List();\u000a  }\u000a  local_48 = (undefined4)atom;\u000a  uStack68 = (undefined4)(atom >> 0x20);\u000a  local_30 = SUB84(format,0);\u000a  uStack44 = (undefined4)((ulong)format >> 0x20);\u000a  _property_formats =\u000a       Add_Thunk(_property_formats,\u000a                 (thunk)CONCAT848(dformat,CONCAT444(uStack44,CONCAT440(local_30,ZEXT2440(CONCAT420(\u000a                                                  uStack68,CONCAT416(local_48,ZEXT816(0))))))));\u000a  return;\u000a}\u000a\u000a
p766
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x80\nMOV R14,RDX\nMOV R15,RSI\nMOV RBX,RDI\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM0\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x40],XMM0\nMOV qword ptr [RSP + 0x70],0x0\nCMP qword ptr [0x00608bd8],0x0\nJNZ 0x004035c6\nCALL 0x00402c10\nMOV qword ptr [0x00608bd8],RAX\nMOV qword ptr [RSP + 0x50],RBX\nMOV qword ptr [RSP + 0x68],R15\nMOV qword ptr [RSP + 0x70],R14\nMOV RDI,qword ptr [0x00608bd8]\nMOV RAX,qword ptr [RSP + 0x70]\nMOV qword ptr [RSP + 0x30],RAX\nMOVAPS XMM0,xmmword ptr [RSP + 0x40]\nMOVAPS XMM1,xmmword ptr [RSP + 0x50]\nMOVAPS XMM2,xmmword ptr [RSP + 0x60]\nMOVUPS xmmword ptr [RSP + 0x20],XMM2\nMOVUPS xmmword ptr [RSP + 0x10],XMM1\nMOVUPS xmmword ptr [RSP],XMM0\nCALL 0x00402c40\nMOV qword ptr [0x00608bd8],RAX\nADD RSP,0x80\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p767
S'41 57\n41 56\n53\n48 81 ec 80 00 00 00\n49 89 d6\n49 89 f7\n48 89 fb\n0f 57 c0\n0f 29 44 24 60\n0f 29 44 24 50\n0f 29 44 24 40\n48 c7 44 24 70 00 00 00 00\n48 83 3d 20 56 20 00 00\n75 0c\ne8 51 f6 ff ff\n48 89 05 12 56 20 00\n48 89 5c 24 50\n4c 89 7c 24 68\n4c 89 74 24 70\n48 8b 3d fc 55 20 00\n48 8b 44 24 70\n48 89 44 24 30\n0f 28 44 24 40\n0f 28 4c 24 50\n0f 28 54 24 60\n0f 11 54 24 20\n0f 11 4c 24 10\n0f 11 04 24\ne8 38 f6 ff ff\n48 89 05 c9 55 20 00\n48 81 c4 80 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p768
S'.text:0000000000403580\n.text:0000000000403582\n.text:0000000000403584\n.text:0000000000403585\n.text:000000000040358c\n.text:000000000040358f\n.text:0000000000403592\n.text:0000000000403595\n.text:0000000000403598\n.text:000000000040359d\n.text:00000000004035a2\n.text:00000000004035a7\n.text:00000000004035b0\n.text:00000000004035b8\n.text:00000000004035ba\n.text:00000000004035bf\n.text:00000000004035c6\n.text:00000000004035cb\n.text:00000000004035d0\n.text:00000000004035d5\n.text:00000000004035dc\n.text:00000000004035e1\n.text:00000000004035e6\n.text:00000000004035eb\n.text:00000000004035f0\n.text:00000000004035f5\n.text:00000000004035fa\n.text:00000000004035ff\n.text:0000000000403603\n.text:0000000000403608\n.text:000000000040360f\n.text:0000000000403616\n.text:0000000000403617\n.text:0000000000403619\n.text:000000000040361b\n'
p769
tp770
sS'__ctype_b_loc'
p771
(S'\n__stdcall __ctype_b_loc()\n'
p772
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_006081f8)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p773
S'JMP qword ptr [0x006081f8]\n'
p774
S'ff 25 82 6a 20 00\n'
p775
S'.plt:0000000000401770\n'
p776
tp777
sS'XOpenDisplay'
p778
(S'\n__stdcall XOpenDisplay()\n'
p779
V\u000avoid XOpenDisplay(void)\u000a\u000a{\u000a  (*(code *)PTR_XOpenDisplay_006080e0)();\u000a  return;\u000a}\u000a\u000a
p780
S'JMP qword ptr [0x006080e0]\n'
p781
S'ff 25 9a 6b 20 00\n'
p782
S'.plt:0000000000401540\n'
p783
tp784
sS'_start'
p785
(S'\n__stdcall _start()\n'
p786
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00607ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p787
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x404e30\nMOV RCX,0x404dc0\nMOV RDI,0x4023e0\nCALL qword ptr [0x00607ff0]\nHLT\n'
p788
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 30 4e 40 00\n48 c7 c1 c0 4d 40 00\n48 c7 c7 e0 23 40 00\nff 15 46 68 20 00\nf4\n'
p789
S'.text:0000000000401780\n.text:0000000000401782\n.text:0000000000401785\n.text:0000000000401786\n.text:0000000000401789\n.text:000000000040178d\n.text:000000000040178e\n.text:000000000040178f\n.text:0000000000401796\n.text:000000000040179d\n.text:00000000004017a4\n.text:00000000004017aa\n'
p790
tp791
sS'Handle_Prop_Requests'
p792
(S'\n__stdcall Handle_Prop_Requests(char * * argv)\n'
p793
V\u000athunk * Handle_Prop_Requests(char **argv)\u000a\u000a{\u000a  char *name;\u000a  int iVar1;\u000a  Atom AVar2;\u000a  int iVar3;\u000a  ulong uVar4;\u000a  char **in_RSI;\u000a  char *string;\u000a  char *string_00;\u000a  thunk *local_70;\u000a  undefined4 local_58;\u000a  undefined4 uStack84;\u000a  undefined4 local_40;\u000a  undefined4 uStack60;\u000a  \u000a  uVar4 = (ulong)argv & 0xffffffff;\u000a  if ((int)uVar4 == 0) {\u000a    Show_All_Props();\u000a    local_70 = (thunk *)0x0;\u000a  }\u000a  else {\u000a    local_70 = Create_Thunk_List();\u000a    if (0 < (int)uVar4) {\u000a      do {\u000a        iVar3 = (int)uVar4;\u000a        string = *in_RSI;\u000a        iVar1 = Is_A_Format(string);\u000a        if (iVar1 == 0) {\u000a          string = (char *)0x0;\u000a        }\u000a        else {\u000a          iVar3 = iVar3 + -1;\u000a          if (iVar3 == 0) goto LAB_00403356;\u000a          in_RSI = in_RSI + 1;\u000a        }\u000a        string_00 = *in_RSI;\u000a        iVar1 = Is_A_DFormat(string_00);\u000a        if (iVar1 == 0) {\u000a          string_00 = (char *)0x0;\u000a        }\u000a        else {\u000a          iVar3 = iVar3 + -1;\u000a          if (iVar3 == 0) {\u000aLAB_00403356:\u000a                    /* WARNING: Subroutine does not return */\u000a            usage();\u000a          }\u000a          in_RSI = in_RSI + 1;\u000a        }\u000a        name = *in_RSI;\u000a        AVar2 = Parse_Atom(name);\u000a        if (AVar2 != 0) {\u000a          local_58 = (undefined4)AVar2;\u000a          uStack84 = (undefined4)(AVar2 >> 0x20);\u000a          local_40 = SUB84(string,0);\u000a          uStack60 = (undefined4)((ulong)string >> 0x20);\u000a          local_70 = Add_Thunk(local_70,(thunk)CONCAT848(string_00,\u000a                                                         CONCAT444(uStack60,CONCAT440(local_40,\u000a                                                  ZEXT1640(CONCAT412(uStack84,CONCAT48(local_58,name\u000a                                                                                      ))) << 0x40)))\u000a                              );\u000a        }\u000a        in_RSI = in_RSI + 1;\u000a        Show_Prop(string,string_00,name);\u000a        uVar4 = (ulong)(iVar3 - 1);\u000a      } while (1 < iVar3);\u000a    }\u000a  }\u000a  return local_70;\u000a}\u000a\u000a
p794
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x78\nMOV R14,RSI\nMOV EBX,EDI\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM0\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x40],XMM0\nMOV qword ptr [RSP + 0x70],0x0\nTEST EBX,EBX\nJZ 0x00403336\nCALL 0x00402c10\nMOV qword ptr [RSP + 0x38],RAX\nTEST EBX,EBX\nJLE 0x00403342\nNOP dword ptr [RAX + RAX*0x1]\nMOV R12,qword ptr [R14]\nMOV RDI,R12\nCALL 0x00403780\nTEST EAX,EAX\nJZ 0x00403290\nDEC EBX\nJZ 0x00403356\nADD R14,0x8\nJMP 0x00403293\nXOR R12D,R12D\nMOV R13,qword ptr [R14]\nMOV RDI,R13\nCALL 0x004037a0\nTEST EAX,EAX\nJZ 0x004032b0\nDEC EBX\nJZ 0x00403356\nADD R14,0x8\nJMP 0x004032b3\nXOR R13D,R13D\nMOV RBP,qword ptr [R14]\nMOV qword ptr [RSP + 0x48],RBP\nMOV ESI,0x1\nMOV RDI,RBP\nCALL 0x00403620\nMOV qword ptr [RSP + 0x50],RAX\nMOV qword ptr [RSP + 0x68],R12\nMOV qword ptr [RSP + 0x70],R13\nTEST RAX,RAX\nJZ 0x00403312\nMOV RAX,qword ptr [RSP + 0x70]\nMOV qword ptr [RSP + 0x30],RAX\nMOVAPS XMM0,xmmword ptr [RSP + 0x40]\nMOVAPS XMM1,xmmword ptr [RSP + 0x50]\nMOVAPS XMM2,xmmword ptr [RSP + 0x60]\nMOVUPS xmmword ptr [RSP + 0x20],XMM2\nMOVUPS xmmword ptr [RSP + 0x10],XMM1\nMOVUPS xmmword ptr [RSP],XMM0\nMOV RDI,qword ptr [RSP + 0x38]\nCALL 0x00402c40\nMOV qword ptr [RSP + 0x38],RAX\nADD R14,0x8\nLEA R15D,[RBX + -0x1]\nMOV RDI,R12\nMOV RSI,R13\nMOV RDX,RBP\nCALL 0x00403390\nCMP EBX,0x1\nMOV EBX,R15D\nJG 0x00403270\nJMP 0x00403342\nCALL 0x00403940\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x38],RAX\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x78\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00402390\n'
p795
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 78\n49 89 f6\n89 fb\n0f 57 c0\n0f 29 44 24 60\n0f 29 44 24 50\n0f 29 44 24 40\n48 c7 44 24 70 00 00 00 00\n85 db\n0f 84 e0 00 00 00\ne8 b5 f9 ff ff\n48 89 44 24 38\n85 db\n0f 8e da 00 00 00\n0f 1f 84 00 00 00 00 00\n4d 8b 26\n4c 89 e7\ne8 05 05 00 00\n85 c0\n74 11\nff cb\n0f 84 cf 00 00 00\n49 83 c6 08\neb 06\n45 31 e4\n4d 8b 2e\n4c 89 ef\ne8 02 05 00 00\n85 c0\n74 0e\nff cb\n0f 84 ac 00 00 00\n49 83 c6 08\neb 03\n45 31 ed\n49 8b 2e\n48 89 6c 24 48\nbe 01 00 00 00\n48 89 ef\ne8 58 03 00 00\n48 89 44 24 50\n4c 89 64 24 68\n4c 89 6c 24 70\n48 85 c0\n74 36\n48 8b 44 24 70\n48 89 44 24 30\n0f 28 44 24 40\n0f 28 4c 24 50\n0f 28 54 24 60\n0f 11 54 24 20\n0f 11 4c 24 10\n0f 11 04 24\n48 8b 7c 24 38\ne8 33 f9 ff ff\n48 89 44 24 38\n49 83 c6 08\n44 8d 7b ff\n4c 89 e7\n4c 89 ee\n48 89 ea\ne8 68 00 00 00\n83 fb 01\n44 89 fb\n0f 8f 3c ff ff ff\neb 0c\ne8 05 06 00 00\n31 c0\n48 89 44 24 38\n48 8b 44 24 38\n48 83 c4 78\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 35 f0 ff ff\n'
p796
S'.text:0000000000403220\n.text:0000000000403221\n.text:0000000000403223\n.text:0000000000403225\n.text:0000000000403227\n.text:0000000000403229\n.text:000000000040322a\n.text:000000000040322e\n.text:0000000000403231\n.text:0000000000403233\n.text:0000000000403236\n.text:000000000040323b\n.text:0000000000403240\n.text:0000000000403245\n.text:000000000040324e\n.text:0000000000403250\n.text:0000000000403256\n.text:000000000040325b\n.text:0000000000403260\n.text:0000000000403262\n.text:0000000000403268\n.text:0000000000403270\n.text:0000000000403273\n.text:0000000000403276\n.text:000000000040327b\n.text:000000000040327d\n.text:000000000040327f\n.text:0000000000403281\n.text:0000000000403287\n.text:000000000040328b\n.text:0000000000403290\n.text:0000000000403293\n.text:0000000000403296\n.text:0000000000403299\n.text:000000000040329e\n.text:00000000004032a0\n.text:00000000004032a2\n.text:00000000004032a4\n.text:00000000004032aa\n.text:00000000004032ae\n.text:00000000004032b0\n.text:00000000004032b3\n.text:00000000004032b6\n.text:00000000004032bb\n.text:00000000004032c0\n.text:00000000004032c3\n.text:00000000004032c8\n.text:00000000004032cd\n.text:00000000004032d2\n.text:00000000004032d7\n.text:00000000004032da\n.text:00000000004032dc\n.text:00000000004032e1\n.text:00000000004032e6\n.text:00000000004032eb\n.text:00000000004032f0\n.text:00000000004032f5\n.text:00000000004032fa\n.text:00000000004032ff\n.text:0000000000403303\n.text:0000000000403308\n.text:000000000040330d\n.text:0000000000403312\n.text:0000000000403316\n.text:000000000040331a\n.text:000000000040331d\n.text:0000000000403320\n.text:0000000000403323\n.text:0000000000403328\n.text:000000000040332b\n.text:000000000040332e\n.text:0000000000403334\n.text:0000000000403336\n.text:000000000040333b\n.text:000000000040333d\n.text:0000000000403342\n.text:0000000000403347\n.text:000000000040334b\n.text:000000000040334c\n.text:000000000040334e\n.text:0000000000403350\n.text:0000000000403352\n.text:0000000000403354\n.text:0000000000403355\n.text:0000000000403356\n'
p797
tp798
sS'Select_Window_Args'
p799
(S'\n__stdcall Select_Window_Args(int * rargc, char * * argv)\n'
p800
V\u000aWindow Select_Window_Args(int *rargc,char **argv)\u000a\u000a{\u000a  char *__s1;\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  char **ppcVar4;\u000a  char **ppcVar5;\u000a  int iVar6;\u000a  int iVar7;\u000a  Window local_48;\u000a  int *local_40;\u000a  char **local_38;\u000a  \u000a  local_48 = 0;\u000a  iVar7 = *rargc;\u000a  iVar2 = 1;\u000a  if (iVar7 < 2) {\u000aLAB_00401d79:\u000a    *rargc = iVar2;\u000a    return local_48;\u000a  }\u000a  iVar2 = 1;\u000a  ppcVar4 = argv;\u000a  local_40 = rargc;\u000aLAB_00401ba9:\u000a  local_38 = argv + 1;\u000a  iVar6 = iVar7;\u000a  do {\u000a    ppcVar5 = ppcVar4 + 1;\u000a    iVar7 = iVar6 + -1;\u000a    if ((*ppcVar4[1] == '-') && (ppcVar4[1][1] == 0)) {\u000a      *local_38 = *ppcVar5;\u000a      if (iVar7 < 2) {\u000a        iVar2 = iVar2 + 1;\u000a        rargc = local_40;\u000a      }\u000a      else {\u000a        iVar2 = iVar2 + iVar7;\u000a        lVar3 = 2;\u000a        do {\u000a          argv[lVar3] = ppcVar4[lVar3];\u000a          lVar3 = lVar3 + 1;\u000a          rargc = local_40;\u000a        } while (iVar6 != (int)lVar3);\u000a      }\u000a      goto LAB_00401d79;\u000a    }\u000a    __s1 = *ppcVar5;\u000a    iVar1 = strcmp(__s1,"-root");\u000a    if (iVar1 == 0) {\u000a      local_48 = *(Window *)(*(long *)(dpy + 0xe8) + 0x10 + (long)screen * 0x80);\u000a      ppcVar4 = ppcVar5;\u000a    }\u000a    else {\u000a      iVar1 = strcmp(__s1,"-name");\u000a      if (iVar1 == 0) {\u000a        if (iVar6 == 2) goto LAB_00401d9c;\u000a        local_48 = Window_With_Name(dpy,*(Window *)\u000a                                         (*(long *)(dpy + 0xe8) + 0x10 + (long)screen * 0x80),\u000a                                    ppcVar4[2]);\u000a        if (local_48 == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a          Fatal_Error("No window with name %s exists!",ppcVar4[2]);\u000a        }\u000a      }\u000a      else {\u000a        if ((((*__s1 != '-') || (__s1[1] != 'i')) || (__s1[2] != 'd')) || (__s1[3] != 0)) break;\u000a        if (iVar6 == 2) {\u000aLAB_00401d9c:\u000a                    /* WARNING: Subroutine does not return */\u000a          usage();\u000a        }\u000a        ppcVar5 = ppcVar4 + 2;\u000a        local_48 = 0;\u000a        __isoc99_sscanf(*ppcVar5,0x406894,&local_48);\u000a        if ((local_48 == 0) && (__isoc99_sscanf(*ppcVar5,&DAT_00404ecb,&local_48), local_48 == 0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a          Fatal_Error("Invalid window id format: %s.",*ppcVar5);\u000a        }\u000a      }\u000a      iVar7 = iVar6 + -2;\u000a      ppcVar4 = ppcVar4 + 2;\u000a    }\u000a    rargc = local_40;\u000a    iVar6 = iVar7;\u000a    if (iVar7 < 2) goto LAB_00401d79;\u000a  } while( true );\u000a  *local_38 = *ppcVar5;\u000a  iVar2 = iVar2 + 1;\u000a  argv = local_38;\u000a  rargc = local_40;\u000a  ppcVar4 = ppcVar5;\u000a  if (iVar7 < 2) goto LAB_00401d79;\u000a  goto LAB_00401ba9;\u000a}\u000a\u000a
p801
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R15,RSI\nMOV qword ptr [RSP + 0x10],0x0\nMOV R13D,dword ptr [RDI]\nMOV EAX,0x1\nCMP R13D,0x2\nJL 0x00401d79\nMOV EAX,0x1\nMOV RCX,R15\nMOV qword ptr [RSP + 0x18],RDI\nMOV dword ptr [RSP + 0xc],EAX\nMOV RBP,RCX\nLEA RAX,[RBP + 0x8]\nMOV qword ptr [RSP + 0x20],RAX\nMOV R14D,R13D\nMOV R12,R15\nNOP\nLEA R15,[R12 + 0x8]\nLEA R13D,[R14 + -0x1]\nMOV RAX,qword ptr [R12 + 0x8]\nCMP byte ptr [RAX],0x2d\nJNZ 0x00401bdd\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x00401d42\nMOV RBX,qword ptr [R15]\nMOV ESI,0x404e9c\nMOV RDI,RBX\nCALL 0x00401530\nTEST EAX,EAX\nJZ 0x00401c90\nMOV ESI,0x404ea2\nMOV RDI,RBX\nCALL 0x00401530\nTEST EAX,EAX\nJZ 0x00401cc0\nCMP byte ptr [RBX],0x2d\nJNZ 0x00401d20\nCMP byte ptr [RBX + 0x1],0x69\nJNZ 0x00401d20\nCMP byte ptr [RBX + 0x2],0x64\nJNZ 0x00401d20\nCMP byte ptr [RBX + 0x3],0x0\nJNZ 0x00401d20\nADD R14D,-0x2\nJZ 0x00401d9c\nADD R12,0x10\nMOV qword ptr [RSP + 0x10],0x0\nMOV RDI,qword ptr [R12]\nMOV ESI,0x406894\nXOR EAX,EAX\nLEA RBX,[RSP + 0x10]\nMOV RDX,RBX\nCALL 0x00401610\nCMP qword ptr [RSP + 0x10],0x0\nJNZ 0x00401d03\nMOV RDI,qword ptr [R12]\nMOV ESI,0x404ecb\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401610\nCMP qword ptr [RSP + 0x10],0x0\nJNZ 0x00401d03\nJMP 0x00401db1\nMOV RAX,qword ptr [0x00608b90]\nMOV RAX,qword ptr [0xe8 + RAX]\nMOVSXD RCX,dword ptr [0x00608b98]\nSHL RCX,0x7\nMOV RAX,qword ptr [RAX + RCX*0x1 + 0x10]\nMOV qword ptr [RSP + 0x10],RAX\nJMP 0x00401d09\nADD R14D,-0x2\nJZ 0x00401d9c\nADD R12,0x10\nMOV RDI,qword ptr [0x00608b90]\nMOV RAX,qword ptr [0xe8 + RDI]\nMOVSXD RCX,dword ptr [0x00608b98]\nSHL RCX,0x7\nMOV RSI,qword ptr [RAX + RCX*0x1 + 0x10]\nMOV RDX,qword ptr [R12]\nCALL 0x00401dd0\nMOV qword ptr [RSP + 0x10],RAX\nTEST RAX,RAX\nJZ 0x00401da1\nMOV R13D,R14D\nMOV R15,R12\nCMP R13D,0x1\nMOV R14D,R13D\nMOV R12,R15\nJG 0x00401bc0\nJMP 0x00401d70\nMOV RAX,qword ptr [R15]\nMOV RCX,qword ptr [RSP + 0x20]\nMOV qword ptr [RCX],RAX\nMOV EAX,dword ptr [RSP + 0xc]\nINC EAX\nCMP R13D,0x1\nMOV RDI,qword ptr [RSP + 0x18]\nJG 0x00401ba9\nJMP 0x00401d79\nMOV RAX,qword ptr [R15]\nMOV RCX,qword ptr [RSP + 0x20]\nMOV qword ptr [RCX],RAX\nCMP R13D,0x2\nJL 0x00401d8f\nADD dword ptr [RSP + 0xc],R13D\nMOV EAX,R14D\nMOV ECX,0x2\nMOV RDX,qword ptr [R12 + RCX*0x8]\nMOV qword ptr [RBP + RCX*0x8],RDX\nINC RCX\nCMP EAX,ECX\nJNZ 0x00401d60\nMOV RDI,qword ptr [RSP + 0x18]\nMOV EAX,dword ptr [RSP + 0xc]\nMOV dword ptr [RDI],EAX\nMOV RAX,qword ptr [RSP + 0x10]\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EAX,dword ptr [RSP + 0xc]\nINC EAX\nMOV RDI,qword ptr [RSP + 0x18]\nJMP 0x00401d79\nCALL 0x00402390\nMOV RSI,qword ptr [R12]\nMOV EDI,0x404ea8\nXOR EAX,EAX\nCALL 0x00401a80\nMOV RSI,qword ptr [R12]\nMOV EDI,0x404ecf\nXOR EAX,EAX\nCALL 0x00401a80\n'
p802
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 f7\n48 c7 44 24 10 00 00 00 00\n44 8b 2f\nb8 01 00 00 00\n41 83 fd 02\n0f 8c dd 01 00 00\nb8 01 00 00 00\n4c 89 f9\n48 89 7c 24 18\n89 44 24 0c\n48 89 cd\n48 8d 45 08\n48 89 44 24 20\n45 89 ee\n4d 89 fc\n90\n4d 8d 7c 24 08\n45 8d 6e ff\n49 8b 44 24 08\n80 38 2d\n75 0a\n80 78 01 00\n0f 84 65 01 00 00\n49 8b 1f\nbe 9c 4e 40 00\n48 89 df\ne8 43 f9 ff ff\n85 c0\n0f 84 9b 00 00 00\nbe a2 4e 40 00\n48 89 df\ne8 2e f9 ff ff\n85 c0\n0f 84 b6 00 00 00\n80 3b 2d\n0f 85 0d 01 00 00\n80 7b 01 69\n0f 85 03 01 00 00\n80 7b 02 64\n0f 85 f9 00 00 00\n80 7b 03 00\n0f 85 ef 00 00 00\n41 83 c6 fe\n0f 84 61 01 00 00\n49 83 c4 10\n48 c7 44 24 10 00 00 00 00\n49 8b 3c 24\nbe 94 68 40 00\n31 c0\n48 8d 5c 24 10\n48 89 da\ne8 b0 f9 ff ff\n48 83 7c 24 10 00\n0f 85 97 00 00 00\n49 8b 3c 24\nbe cb 4e 40 00\n31 c0\n48 89 da\ne8 91 f9 ff ff\n48 83 7c 24 10 00\n75 7c\ne9 25 01 00 00\n48 8b 05 f9 6e 20 00\n48 8b 80 e8 00 00 00\n48 63 0d f3 6e 20 00\n48 c1 e1 07\n48 8b 44 08 10\n48 89 44 24 10\neb 54\n41 83 c6 fe\n0f 84 d2 00 00 00\n49 83 c4 10\n48 8b 3d bb 6e 20 00\n48 8b 87 e8 00 00 00\n48 63 0d b5 6e 20 00\n48 c1 e1 07\n48 8b 74 08 10\n49 8b 14 24\ne8 db 00 00 00\n48 89 44 24 10\n48 85 c0\n0f 84 9e 00 00 00\n45 89 f5\n4d 89 e7\n41 83 fd 01\n45 89 ee\n4d 89 fc\n0f 8f a7 fe ff ff\neb 55\n49 8b 07\n48 8b 4c 24 20\n48 89 01\n8b 44 24 0c\nff c0\n41 83 fd 01\n48 8b 7c 24 18\n0f 8f 69 fe ff ff\neb 37\n49 8b 07\n48 8b 4c 24 20\n48 89 01\n41 83 fd 02\n7c 3c\n44 01 6c 24 0c\n44 89 f0\nb9 02 00 00 00\n49 8b 14 cc\n48 89 54 cd 00\n48 ff c1\n39 c8\n75 f0\n48 8b 7c 24 18\n8b 44 24 0c\n89 07\n48 8b 44 24 10\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n8b 44 24 0c\nff c0\n48 8b 7c 24 18\neb dd\ne8 ef 05 00 00\n49 8b 34 24\nbf a8 4e 40 00\n31 c0\ne8 cf fc ff ff\n49 8b 34 24\nbf cf 4e 40 00\n31 c0\ne8 bf fc ff ff\n'
p803
S'.text:0000000000401b70\n.text:0000000000401b71\n.text:0000000000401b73\n.text:0000000000401b75\n.text:0000000000401b77\n.text:0000000000401b79\n.text:0000000000401b7a\n.text:0000000000401b7e\n.text:0000000000401b81\n.text:0000000000401b8a\n.text:0000000000401b8d\n.text:0000000000401b92\n.text:0000000000401b96\n.text:0000000000401b9c\n.text:0000000000401ba1\n.text:0000000000401ba4\n.text:0000000000401ba9\n.text:0000000000401bad\n.text:0000000000401bb0\n.text:0000000000401bb4\n.text:0000000000401bb9\n.text:0000000000401bbc\n.text:0000000000401bbf\n.text:0000000000401bc0\n.text:0000000000401bc5\n.text:0000000000401bc9\n.text:0000000000401bce\n.text:0000000000401bd1\n.text:0000000000401bd3\n.text:0000000000401bd7\n.text:0000000000401bdd\n.text:0000000000401be0\n.text:0000000000401be5\n.text:0000000000401be8\n.text:0000000000401bed\n.text:0000000000401bef\n.text:0000000000401bf5\n.text:0000000000401bfa\n.text:0000000000401bfd\n.text:0000000000401c02\n.text:0000000000401c04\n.text:0000000000401c0a\n.text:0000000000401c0d\n.text:0000000000401c13\n.text:0000000000401c17\n.text:0000000000401c1d\n.text:0000000000401c21\n.text:0000000000401c27\n.text:0000000000401c2b\n.text:0000000000401c31\n.text:0000000000401c35\n.text:0000000000401c3b\n.text:0000000000401c3f\n.text:0000000000401c48\n.text:0000000000401c4c\n.text:0000000000401c51\n.text:0000000000401c53\n.text:0000000000401c58\n.text:0000000000401c5b\n.text:0000000000401c60\n.text:0000000000401c66\n.text:0000000000401c6c\n.text:0000000000401c70\n.text:0000000000401c75\n.text:0000000000401c77\n.text:0000000000401c7a\n.text:0000000000401c7f\n.text:0000000000401c85\n.text:0000000000401c87\n.text:0000000000401c90\n.text:0000000000401c97\n.text:0000000000401c9e\n.text:0000000000401ca5\n.text:0000000000401ca9\n.text:0000000000401cae\n.text:0000000000401cb3\n.text:0000000000401cc0\n.text:0000000000401cc4\n.text:0000000000401cca\n.text:0000000000401cce\n.text:0000000000401cd5\n.text:0000000000401cdc\n.text:0000000000401ce3\n.text:0000000000401ce7\n.text:0000000000401cec\n.text:0000000000401cf0\n.text:0000000000401cf5\n.text:0000000000401cfa\n.text:0000000000401cfd\n.text:0000000000401d03\n.text:0000000000401d06\n.text:0000000000401d09\n.text:0000000000401d0d\n.text:0000000000401d10\n.text:0000000000401d13\n.text:0000000000401d19\n.text:0000000000401d20\n.text:0000000000401d23\n.text:0000000000401d28\n.text:0000000000401d2b\n.text:0000000000401d2f\n.text:0000000000401d31\n.text:0000000000401d35\n.text:0000000000401d3a\n.text:0000000000401d40\n.text:0000000000401d42\n.text:0000000000401d45\n.text:0000000000401d4a\n.text:0000000000401d4d\n.text:0000000000401d51\n.text:0000000000401d53\n.text:0000000000401d58\n.text:0000000000401d5b\n.text:0000000000401d60\n.text:0000000000401d64\n.text:0000000000401d69\n.text:0000000000401d6c\n.text:0000000000401d6e\n.text:0000000000401d70\n.text:0000000000401d75\n.text:0000000000401d79\n.text:0000000000401d7b\n.text:0000000000401d80\n.text:0000000000401d84\n.text:0000000000401d85\n.text:0000000000401d87\n.text:0000000000401d89\n.text:0000000000401d8b\n.text:0000000000401d8d\n.text:0000000000401d8e\n.text:0000000000401d8f\n.text:0000000000401d93\n.text:0000000000401d95\n.text:0000000000401d9a\n.text:0000000000401d9c\n.text:0000000000401da1\n.text:0000000000401da5\n.text:0000000000401daa\n.text:0000000000401dac\n.text:0000000000401db1\n.text:0000000000401db5\n.text:0000000000401dba\n.text:0000000000401dbc\n'
p804
tp805
sS'FUN_004013a0'
p806
(S'\n__stdcall FUN_004013a0()\n'
p807
V\u000avoid FUN_004013a0(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_00608010)();\u000a  return;\u000a}\u000a\u000a
p808
S'PUSH qword ptr [0x00608008]\nJMP qword ptr [0x00608010]\n'
p809
S'ff 35 62 6c 20 00\nff 25 64 6c 20 00\n'
p810
S'.plt:00000000004013a0\n.plt:00000000004013a6\n'
p811
tp812
sS'Format_String'
p813
(S'\n__stdcall Format_String(char * string)\n'
p814
V\u000achar * Format_String(char *string)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  char *pcVar3;\u000a  ulong in_RSI;\u000a  \u000a  _buf_ptr = _formatting_buffer;\u000a  _buf_len = 500000;\u000a  _put_char(0x22);\u000a  cVar2 = *string;\u000a  if (cVar2 != 0) {\u000a    string = string + 1;\u000a    do {\u000a      _format_char((ulong)(uint)(int)cVar2,in_RSI & 0xffffffff);\u000a      cVar2 = *string;\u000a      string = string + 1;\u000a    } while (cVar2 != 0);\u000a  }\u000a  pcVar3 = _buf_ptr;\u000a  *_buf_ptr = '\u005c"';\u000a  pcVar1 = _buf_ptr + 1;\u000a  _buf_ptr = _buf_ptr + 2;\u000a  *pcVar1 = 0;\u000a  return pcVar3;\u000a}\u000a\u000a
p815
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV qword ptr [0x006fd438],0x6832b0\nMOV dword ptr [0x006fd440],0x7a120\nMOV EDI,0x22\nCALL 0x00404880\nMOV AL,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00404854\nINC RBX\nMOVSX EDI,AL\nMOV ESI,EBP\nCALL 0x004048b0\nMOVZX EAX,byte ptr [RBX]\nINC RBX\nTEST AL,AL\nJNZ 0x00404840\nMOV RAX,qword ptr [0x006fd438]\nMOV byte ptr [RAX],0x22\nLEA RCX,[RAX + 0x2]\nMOV qword ptr [0x006fd438],RCX\nMOV byte ptr [RAX + 0x1],0x0\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p816
S'55\n53\n50\n89 f5\n48 89 fb\n48 c7 05 15 8c 2f 00 b0 32 68 00\nc7 05 13 8c 2f 00 20 a1 07 00\nbf 22 00 00 00\ne8 49 00 00 00\n8a 03\n84 c0\n74 17\n48 ff c3\n0f be f8\n89 ee\ne8 66 00 00 00\n0f b6 03\n48 ff c3\n84 c0\n75 ec\n48 8b 05 dd 8b 2f 00\nc6 00 22\n48 8d 48 02\n48 89 0d cf 8b 2f 00\nc6 40 01 00\n48 83 c4 08\n5b\n5d\nc3\n'
p817
S'.text:0000000000404810\n.text:0000000000404811\n.text:0000000000404812\n.text:0000000000404813\n.text:0000000000404815\n.text:0000000000404818\n.text:0000000000404823\n.text:000000000040482d\n.text:0000000000404832\n.text:0000000000404837\n.text:0000000000404839\n.text:000000000040483b\n.text:000000000040483d\n.text:0000000000404840\n.text:0000000000404843\n.text:0000000000404845\n.text:000000000040484a\n.text:000000000040484d\n.text:0000000000404850\n.text:0000000000404852\n.text:0000000000404854\n.text:000000000040485b\n.text:000000000040485e\n.text:0000000000404862\n.text:0000000000404869\n.text:000000000040486d\n.text:0000000000404871\n.text:0000000000404872\n.text:0000000000404873\n'
p818
tp819
sS'printf'
p820
(S'\n__stdcall printf(char * __format)\n'
p821
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint printf(char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_printf_00608078)();\u000a  return iVar1;\u000a}\u000a\u000a
p822
S'JMP qword ptr [0x00608078]\n'
p823
S'ff 25 02 6c 20 00\n'
p824
S'.plt:0000000000401470\n'
p825
tp826
sS'strcat'
p827
(S'\n__stdcall strcat(char * __dest, char * __src)\n'
p828
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcat(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcat_006081c8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p829
S'JMP qword ptr [0x006081c8]\n'
p830
S'ff 25 b2 6a 20 00\n'
p831
S'.plt:0000000000401710\n'
p832
tp833
sS'Window_Has_Property'
p834
(S'\n__stdcall Window_Has_Property(Display * dpy, Window win, Atom atom)\n'
p835
V\u000a/* WARNING: Removing unreachable block (ram,0x0040223c) */\u000a\u000aint Window_Has_Property(Display *dpy,Window win,Atom atom)\u000a\u000a{\u000a  int format_ret;\u000a  ulong num_ret;\u000a  ulong bytes_after;\u000a  \u000a  XGetWindowProperty();\u000a  return 0;\u000a}\u000a\u000a
p836
S'PUSH R14\nPUSH RBX\nSUB RSP,0x28\nMOV qword ptr [RSP + 0x8],0x0\nMOV qword ptr [RSP],0x0\nMOV RAX,RSP\nLEA R10,[RSP + 0x20]\nLEA R11,[RSP + 0x18]\nLEA RBX,[RSP + 0x14]\nLEA R14,[RSP + 0x8]\nMOV ECX,0x0\nMOV R8D,0x0\nMOV R9D,0x0\nPUSH RAX\nPUSH R10\nPUSH R11\nPUSH RBX\nPUSH R14\nPUSH 0x0\nCALL 0x00401740\nADD RSP,0x30\nMOV RDI,qword ptr [RSP]\nTEST RDI,RDI\nJZ 0x00402241\nCALL 0x00401480\nXOR EAX,EAX\nCMP qword ptr [RSP + 0x8],0x0\nSETNZ AL\nADD RSP,0x28\nPOP RBX\nPOP R14\nRET\n'
p837
S'41 56\n53\n48 83 ec 28\n48 c7 44 24 08 00 00 00 00\n48 c7 04 24 00 00 00 00\n48 89 e0\n4c 8d 54 24 20\n4c 8d 5c 24 18\n48 8d 5c 24 14\n4c 8d 74 24 08\nb9 00 00 00 00\n41 b8 00 00 00 00\n41 b9 00 00 00 00\n50\n41 52\n41 53\n53\n41 56\n6a 00\ne8 11 f5 ff ff\n48 83 c4 30\n48 8b 3c 24\n48 85 ff\n74 05\ne8 3f f2 ff ff\n31 c0\n48 83 7c 24 08 00\n0f 95 c0\n48 83 c4 28\n5b\n41 5e\nc3\n'
p838
S'.text:00000000004021e0\n.text:00000000004021e2\n.text:00000000004021e3\n.text:00000000004021e7\n.text:00000000004021f0\n.text:00000000004021f8\n.text:00000000004021fb\n.text:0000000000402200\n.text:0000000000402205\n.text:000000000040220a\n.text:000000000040220f\n.text:0000000000402214\n.text:000000000040221a\n.text:0000000000402220\n.text:0000000000402221\n.text:0000000000402223\n.text:0000000000402225\n.text:0000000000402226\n.text:0000000000402228\n.text:000000000040222a\n.text:000000000040222f\n.text:0000000000402233\n.text:0000000000402237\n.text:000000000040223a\n.text:000000000040223c\n.text:0000000000402241\n.text:0000000000402243\n.text:0000000000402249\n.text:000000000040224c\n.text:0000000000402250\n.text:0000000000402251\n.text:0000000000402253\n'
p839
tp840
sS'Is_A_Format'
p841
(S'\n__stdcall Is_A_Format(char * string)\n'
p842
V\u000aint Is_A_Format(char *string)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = __ctype_b_loc();\u000a  return (int)((uint)(*ppuVar1)[(ulong)(byte)*string] & 0x800);\u000a}\u000a\u000a
p843
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401770\nMOV RAX,qword ptr [RAX]\nMOVZX ECX,byte ptr [RBX]\nMOVZX EAX,word ptr [RAX + RCX*0x2]\nAND EAX,0x800\nPOP RBX\nRET\n'
p844
S'53\n48 89 fb\ne8 e7 df ff ff\n48 8b 00\n0f b6 0b\n0f b7 04 48\n25 00 08 00 00\n5b\nc3\n'
p845
S'.text:0000000000403780\n.text:0000000000403781\n.text:0000000000403784\n.text:0000000000403789\n.text:000000000040378c\n.text:000000000040378f\n.text:0000000000403793\n.text:0000000000403798\n.text:0000000000403799\n'
p846
tp847
sS'Read_Mappings'
p848
(S'\n__stdcall Read_Mappings(FILE * stream)\n'
p849
V\u000avoid Read_Mappings(FILE *stream)\u000a\u000a{\u000a  int __c;\u000a  Atom atom;\u000a  char *format;\u000a  char *dformat;\u000a  char format_buffer [100];\u000a  char name [1000];\u000a  undefined auStack1160 [112];\u000a  char local_418 [1000];\u000a  \u000a  while( true ) {\u000a    __c = __isoc99_fscanf(stream," %990s %90s ",local_418,auStack1160);\u000a    if (__c == -1) {\u000a      return;\u000a    }\u000a    if (__c != 2) break;\u000a    atom = Parse_Atom(local_418);\u000a    format = (char *)__strdup(auStack1160);\u000a    if (format == (char *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      Fatal_Error("Out of memory!");\u000a    }\u000a    Read_White_Space(stream);\u000a    __c = _IO_getc((_IO_FILE *)stream);\u000a    ungetc(__c,(FILE *)stream);\u000a    if (__c == 0x27) {\u000a      dformat = Read_Quoted(stream);\u000a    }\u000a    else {\u000a      dformat = " = $0+\u005cn";\u000a    }\u000a    Add_Mapping(atom,format,dformat);\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  Fatal_Error("Bad format file format.");\u000a}\u000a\u000a
p850
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x458\nMOV R13,RDI\nLEA R14,[RSP + 0x70]\nMOV R15,RSP\nJMP 0x00402b2b\nMOV RDI,R12\nMOV RSI,RBX\nCALL 0x00403580\nMOV ESI,0x406090\nXOR EAX,EAX\nMOV RDI,R13\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004013f0\nCMP EAX,-0x1\nJZ 0x00402baa\nCMP EAX,0x2\nJNZ 0x00402bbc\nXOR ESI,ESI\nMOV RDI,R14\nCALL 0x00403620\nMOV R12,RAX\nMOV RDI,R15\nCALL 0x00401510\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00402bc8\nMOV RDI,R13\nCALL 0x00403640\nMOV RDI,R13\nCALL 0x004015e0\nMOV EBP,EAX\nMOV EDI,EBP\nMOV RSI,R13\nCALL 0x00401620\nCMP EBP,0x27\nJNZ 0x00402ba0\nMOV RDI,R13\nCALL 0x00403690\nMOV RDX,RAX\nJMP 0x00402b20\nMOV EDX,0x4060c4\nJMP 0x00402b20\nADD RSP,0x458\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x40609d\nXOR EAX,EAX\nCALL 0x00401a80\nMOV EDI,0x4060b5\nXOR EAX,EAX\nCALL 0x00401a80\n'
p851
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 58 04 00 00\n49 89 fd\n4c 8d 74 24 70\n49 89 e7\neb 0d\n4c 89 e7\n48 89 de\ne8 55 0a 00 00\nbe 90 60 40 00\n31 c0\n4c 89 ef\n4c 89 f2\n4c 89 f9\ne8 b0 e8 ff ff\n83 f8 ff\n74 65\n83 f8 02\n75 72\n31 f6\n4c 89 f7\ne8 cc 0a 00 00\n49 89 c4\n4c 89 ff\ne8 b1 e9 ff ff\n48 89 c3\n48 85 db\n74 61\n4c 89 ef\ne8 d1 0a 00 00\n4c 89 ef\ne8 69 ea ff ff\n89 c5\n89 ef\n4c 89 ee\ne8 9d ea ff ff\n83 fd 27\n75 18\n4c 89 ef\ne8 00 0b 00 00\n48 89 c2\neb 8b\nba c4 60 40 00\ne9 76 ff ff ff\n48 81 c4 58 04 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 9d 60 40 00\n31 c0\ne8 b8 ee ff ff\nbf b5 60 40 00\n31 c0\ne8 ac ee ff ff\n'
p852
S'.text:0000000000402b00\n.text:0000000000402b01\n.text:0000000000402b03\n.text:0000000000402b05\n.text:0000000000402b07\n.text:0000000000402b09\n.text:0000000000402b0a\n.text:0000000000402b11\n.text:0000000000402b14\n.text:0000000000402b19\n.text:0000000000402b1c\n.text:0000000000402b20\n.text:0000000000402b23\n.text:0000000000402b26\n.text:0000000000402b2b\n.text:0000000000402b30\n.text:0000000000402b32\n.text:0000000000402b35\n.text:0000000000402b38\n.text:0000000000402b3b\n.text:0000000000402b40\n.text:0000000000402b43\n.text:0000000000402b45\n.text:0000000000402b48\n.text:0000000000402b4a\n.text:0000000000402b4c\n.text:0000000000402b4f\n.text:0000000000402b54\n.text:0000000000402b57\n.text:0000000000402b5a\n.text:0000000000402b5f\n.text:0000000000402b62\n.text:0000000000402b65\n.text:0000000000402b67\n.text:0000000000402b6a\n.text:0000000000402b6f\n.text:0000000000402b72\n.text:0000000000402b77\n.text:0000000000402b79\n.text:0000000000402b7b\n.text:0000000000402b7e\n.text:0000000000402b83\n.text:0000000000402b86\n.text:0000000000402b88\n.text:0000000000402b8b\n.text:0000000000402b90\n.text:0000000000402b93\n.text:0000000000402ba0\n.text:0000000000402ba5\n.text:0000000000402baa\n.text:0000000000402bb1\n.text:0000000000402bb2\n.text:0000000000402bb4\n.text:0000000000402bb6\n.text:0000000000402bb8\n.text:0000000000402bba\n.text:0000000000402bbb\n.text:0000000000402bbc\n.text:0000000000402bc1\n.text:0000000000402bc3\n.text:0000000000402bc8\n.text:0000000000402bcd\n.text:0000000000402bcf\n'
p853
tp854
sS'Mask_Bit_I'
p855
(S'\n__stdcall Mask_Bit_I(thunk * thunks, char * format)\n'
p856
V\u000aint Mask_Bit_I(thunk *thunks,char *format)\u000a\u000a{\u000a  ulong uVar1;\u000a  uint in_EDX;\u000a  \u000a  uVar1 = Mask_Word(thunks,format);\u000a  return (int)(-(uint)((uVar1 >> ((ulong)in_EDX & 0x1f) & 1) != 0) & 1);\u000a}\u000a\u000a
p857
S'PUSH RBX\nMOV EBX,EDX\nCALL 0x00404cf0\nBT RAX,RBX\nSBB EAX,EAX\nAND EAX,0x1\nPOP RBX\nRET\n'
p858
S'53\n89 d3\ne8 18 00 00 00\n48 0f a3 d8\n19 c0\n83 e0 01\n5b\nc3\n'
p859
S'.text:0000000000404cd0\n.text:0000000000404cd1\n.text:0000000000404cd3\n.text:0000000000404cd8\n.text:0000000000404cdc\n.text:0000000000404cde\n.text:0000000000404ce1\n.text:0000000000404ce2\n'
p860
tp861
sS'strtoul'
p862
(S'\n__stdcall strtoul(char * __nptr, char * * __endptr, int __base)\n'
p863
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aulong strtoul(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  ulong uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoul_006081b8)();\u000a  return uVar1;\u000a}\u000a\u000a
p864
S'JMP qword ptr [0x006081b8]\n'
p865
S'ff 25 c2 6a 20 00\n'
p866
S'.plt:00000000004016f0\n'
p867
tp868
sS'__strdup'
p869
(S'\n__stdcall __strdup()\n'
p870
V\u000avoid __strdup(void)\u000a\u000a{\u000a  (*(code *)PTR___strdup_006080c8)();\u000a  return;\u000a}\u000a\u000a
p871
S'JMP qword ptr [0x006080c8]\n'
p872
S'ff 25 b2 6b 20 00\n'
p873
S'.plt:0000000000401510\n'
p874
tp875
sS'Format_Atom'
p876
(S'\n__stdcall Format_Atom(Atom atom)\n'
p877
V\u000achar * Format_Atom(Atom atom)\u000a\u000a{\u000a  char *pcVar1;\u000a  undefined8 uVar2;\u000a  char *__s;\u000a  size_t sVar3;\u000a  size_t __n;\u000a  \u000a  pcVar1 = GetAtomName(atom);\u000a  if (pcVar1 == (char *)0x0) {\u000a    uVar2 = XSetErrorHandler(ignore_errors);\u000a    __s = (char *)XGetAtomName(dpy,atom);\u000a    XSetErrorHandler(uVar2);\u000a    if (__s == (char *)0x0) {\u000a      pcVar1 = _formatting_buffer;\u000a      snprintf(_formatting_buffer,0x7a184,"undefined atom # 0x%lx",atom);\u000a    }\u000a    else {\u000a      sVar3 = strlen(__s);\u000a      __n = 500000;\u000a      if ((int)sVar3 < 500000) {\u000a        __n = (long)(int)sVar3;\u000a      }\u000a      pcVar1 = _formatting_buffer;\u000a      memcpy(_formatting_buffer,__s,__n);\u000a      _formatting_buffer[__n] = 0;\u000a      XFree(__s);\u000a    }\u000a  }\u000a  return pcVar1;\u000a}\u000a\u000a
p878
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RDI\nCALL 0x00404d60\nMOV RBX,RAX\nTEST RBX,RBX\nJNZ 0x00403573\nMOV EDI,0x404db0\nCALL 0x004015a0\nMOV RBX,RAX\nMOV RDI,qword ptr [0x00608b90]\nMOV RSI,R14\nCALL 0x00401650\nMOV R15,RAX\nMOV RDI,RBX\nCALL 0x004015a0\nTEST R15,R15\nJZ 0x00403555\nMOV RDI,R15\nCALL 0x00401460\nCMP EAX,0x7a120\nCDQE\nMOV R14D,0x7a120\nCMOVL R14,RAX\nMOV EBX,0x6832b0\nMOV EDI,0x6832b0\nMOV RSI,R15\nMOV RDX,R14\nCALL 0x00401570\nMOV byte ptr [0x6832b0 + R14],0x0\nMOV RDI,R15\nCALL 0x00401480\nJMP 0x00403573\nMOV EBX,0x6832b0\nMOV EDI,0x6832b0\nMOV ESI,0x7a184\nMOV EDX,0x406883\nXOR EAX,EAX\nMOV RCX,R14\nCALL 0x004014a0\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p879
S'41 57\n41 56\n53\n49 89 fe\ne8 83 18 00 00\n48 89 c3\n48 85 db\n0f 85 8a 00 00 00\nbf b0 4d 40 00\ne8 ad e0 ff ff\n48 89 c3\n48 8b 3d 93 56 20 00\n4c 89 f6\ne8 4b e1 ff ff\n49 89 c7\n48 89 df\ne8 90 e0 ff ff\n4d 85 ff\n74 40\n4c 89 ff\ne8 43 df ff ff\n3d 20 a1 07 00\n48 98\n41 be 20 a1 07 00\n4c 0f 4c f0\nbb b0 32 68 00\nbf b0 32 68 00\n4c 89 fe\n4c 89 f2\ne8 2d e0 ff ff\n41 c6 86 b0 32 68 00 00\n4c 89 ff\ne8 2d df ff ff\neb 1e\nbb b0 32 68 00\nbf b0 32 68 00\nbe 84 a1 07 00\nba 83 68 40 00\n31 c0\n4c 89 f1\ne8 2d df ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p880
S'.text:00000000004034d0\n.text:00000000004034d2\n.text:00000000004034d4\n.text:00000000004034d5\n.text:00000000004034d8\n.text:00000000004034dd\n.text:00000000004034e0\n.text:00000000004034e3\n.text:00000000004034e9\n.text:00000000004034ee\n.text:00000000004034f3\n.text:00000000004034f6\n.text:00000000004034fd\n.text:0000000000403500\n.text:0000000000403505\n.text:0000000000403508\n.text:000000000040350b\n.text:0000000000403510\n.text:0000000000403513\n.text:0000000000403515\n.text:0000000000403518\n.text:000000000040351d\n.text:0000000000403522\n.text:0000000000403524\n.text:000000000040352a\n.text:000000000040352e\n.text:0000000000403533\n.text:0000000000403538\n.text:000000000040353b\n.text:000000000040353e\n.text:0000000000403543\n.text:000000000040354b\n.text:000000000040354e\n.text:0000000000403553\n.text:0000000000403555\n.text:000000000040355a\n.text:000000000040355f\n.text:0000000000403564\n.text:0000000000403569\n.text:000000000040356b\n.text:000000000040356e\n.text:0000000000403573\n.text:0000000000403576\n.text:0000000000403577\n.text:0000000000403579\n.text:000000000040357b\n'
p881
tp882
sS'Parse_Atom'
p883
(S'\n__stdcall Parse_Atom(char * name)\n'
p884
V\u000aAtom Parse_Atom(char *name)\u000a\u000a{\u000a  Atom AVar1;\u000a  uint in_ESI;\u000a  \u000a  AVar1 = XInternAtom(dpy,name,(ulong)in_ESI,name);\u000a  return AVar1;\u000a}\u000a\u000a
p885
S'MOV EAX,ESI\nMOV RCX,RDI\nMOV RDI,qword ptr [0x00608b90]\nMOV RSI,RCX\nMOV EDX,EAX\nJMP 0x004015f0\n'
p886
S'89 f0\n48 89 f9\n48 8b 3d 64 55 20 00\n48 89 ce\n89 c2\ne9 ba df ff ff\n'
p887
S'.text:0000000000403620\n.text:0000000000403622\n.text:0000000000403625\n.text:000000000040362c\n.text:000000000040362f\n.text:0000000000403631\n'
p888
tp889
sS'snprintf'
p890
(S'\n__stdcall snprintf(char * __s, size_t __maxlen, char * __format)\n'
p891
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint snprintf(char *__s,size_t __maxlen,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_snprintf_00608090)();\u000a  return iVar1;\u000a}\u000a\u000a
p892
S'JMP qword ptr [0x00608090]\n'
p893
S'ff 25 ea 6b 20 00\n'
p894
S'.plt:00000000004014a0\n'
p895
tp896
sS'register_tm_clones'
p897
(S'\n__stdcall register_tm_clones()\n'
p898
V\u000a/* WARNING: Removing unreachable block (ram,0x00401813) */\u000a/* WARNING: Removing unreachable block (ram,0x0040181d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p899
S'MOV ESI,0x608b50\nPUSH RBP\nSUB RSI,0x608b50\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401828\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401828\nPOP RBP\nMOV EDI,0x608b50\nJMP RAX\nPOP RBP\nRET\n'
p900
S'be 50 8b 60 00\n55\n48 81 ee 50 8b 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 50 8b 60 00\nff e0\n5d\nc3\n'
p901
S'.text:00000000004017f0\n.text:00000000004017f5\n.text:00000000004017f6\n.text:00000000004017fd\n.text:0000000000401801\n.text:0000000000401804\n.text:0000000000401807\n.text:000000000040180b\n.text:000000000040180e\n.text:0000000000401811\n.text:0000000000401813\n.text:0000000000401818\n.text:000000000040181b\n.text:000000000040181d\n.text:000000000040181e\n.text:0000000000401823\n.text:0000000000401828\n.text:0000000000401829\n'
p902
tp903
sS'XUngrabPointer'
p904
(S'\n__stdcall XUngrabPointer()\n'
p905
V\u000avoid XUngrabPointer(void)\u000a\u000a{\u000a  (*(code *)PTR_XUngrabPointer_00608108)();\u000a  return;\u000a}\u000a\u000a
p906
S'JMP qword ptr [0x00608108]\n'
p907
S'ff 25 72 6b 20 00\n'
p908
S'.plt:0000000000401590\n'
p909
tp910
sS'fclose'
p911
(S'\n__stdcall fclose(FILE * __stream)\n'
p912
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_00608060)();\u000a  return iVar1;\u000a}\u000a\u000a
p913
S'JMP qword ptr [0x00608060]\n'
p914
S'ff 25 1a 6c 20 00\n'
p915
S'.plt:0000000000401440\n'
p916
tp917
sS'XListProperties'
p918
(S'\n__stdcall XListProperties()\n'
p919
V\u000avoid XListProperties(void)\u000a\u000a{\u000a  (*(code *)PTR_XListProperties_00608098)();\u000a  return;\u000a}\u000a\u000a
p920
S'JMP qword ptr [0x00608098]\n'
p921
S'ff 25 e2 6b 20 00\n'
p922
S'.plt:00000000004014b0\n'
p923
tp924
sS'Read_White_Space'
p925
(S'\n__stdcall Read_White_Space(FILE * stream)\n'
p926
V\u000avoid Read_White_Space(FILE *stream)\u000a\u000a{\u000a  uint __c;\u000a  ulong in_RSI;\u000a  \u000a  do {\u000a    __c = _IO_getc((_IO_FILE *)stream);\u000a    if (0x20 < __c) break;\u000a  } while ((in_RSI >> ((ulong)__c & 0x1f) & 1) != 0);\u000a  ungetc(__c,(FILE *)stream);\u000a  return;\u000a}\u000a\u000a
p927
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV R14,0x100000600\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,RBX\nCALL 0x004015e0\nCMP EAX,0x20\nJA 0x00403675\nMOV ECX,EAX\nBT RSI,RCX\nJC 0x00403660\nMOV EDI,EAX\nMOV RSI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401620\n'
p928
S'41 56\n53\n50\n48 89 fb\n49 be 00 06 00 00 01 00 00 00\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 df\ne8 78 df ff ff\n83 f8 20\n77 08\n89 c1\n49 0f a3 ce\n72 eb\n89 c7\n48 89 de\n48 83 c4 08\n5b\n41 5e\ne9 9a df ff ff\n'
p929
S'.text:0000000000403640\n.text:0000000000403642\n.text:0000000000403643\n.text:0000000000403644\n.text:0000000000403647\n.text:0000000000403651\n.text:0000000000403660\n.text:0000000000403663\n.text:0000000000403668\n.text:000000000040366b\n.text:000000000040366d\n.text:000000000040366f\n.text:0000000000403673\n.text:0000000000403675\n.text:0000000000403677\n.text:000000000040367a\n.text:000000000040367e\n.text:000000000040367f\n.text:0000000000403681\n'
p930
tp931
sS'Close_Display'
p932
(S'\n__stdcall Close_Display()\n'
p933
V\u000avoid Close_Display(void)\u000a\u000a{\u000a  if (dpy != (Display *)0x0) {\u000a    XCloseDisplay();\u000a    dpy = (Display *)0x0;\u000a  }\u000a  return;\u000a}\u000a\u000a
p934
S'MOV RDI,qword ptr [0x00608b90]\nTEST RDI,RDI\nJZ 0x00401a41\nPUSH RAX\nCALL 0x00401750\nMOV qword ptr [0x00608b90],0x0\nADD RSP,0x8\nRET\n'
p935
S'48 8b 3d 69 71 20 00\n48 85 ff\n74 15\n50\ne8 1e fd ff ff\n48 c7 05 53 71 20 00 00 00 00 00\n48 83 c4 08\nc3\n'
p936
S'.text:0000000000401a20\n.text:0000000000401a27\n.text:0000000000401a2a\n.text:0000000000401a2c\n.text:0000000000401a2d\n.text:0000000000401a32\n.text:0000000000401a3d\n.text:0000000000401a41\n'
p937
tp938
sS'XCreateFontCursor'
p939
(S'\n__stdcall XCreateFontCursor()\n'
p940
V\u000avoid XCreateFontCursor(void)\u000a\u000a{\u000a  (*(code *)PTR_XCreateFontCursor_00608050)();\u000a  return;\u000a}\u000a\u000a
p941
S'JMP qword ptr [0x00608050]\n'
p942
S'ff 25 2a 6c 20 00\n'
p943
S'.plt:0000000000401420\n'
p944
tp945
sS'XQueryTree'
p946
(S'\n__stdcall XQueryTree()\n'
p947
V\u000avoid XQueryTree(void)\u000a\u000a{\u000a  (*(code *)PTR_XQueryTree_00608068)();\u000a  return;\u000a}\u000a\u000a
p948
S'JMP qword ptr [0x00608068]\n'
p949
S'ff 25 12 6c 20 00\n'
p950
S'.plt:0000000000401450\n'
p951
tp952
sS'Format_Hex'
p953
(S'\n__stdcall Format_Hex()\n'
p954
V\u000achar * Format_Hex(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined4 extraout_var;\u000a  \u000a  iVar1 = snprintf(_formatting_buffer2,0x15,"0x%lx");\u000a  return (char *)CONCAT44(extraout_var,iVar1);\u000a}\u000a\u000a
p955
S'MOV RCX,RDI\nMOV EDI,0x6fd450\nMOV ESI,0x15\nMOV EDX,0x406894\nXOR EAX,EAX\nJMP 0x004014a0\n'
p956
S'48 89 f9\nbf 50 d4 6f 00\nbe 15 00 00 00\nba 94 68 40 00\n31 c0\ne9 77 d0 ff ff\n'
p957
S'.text:0000000000404410\n.text:0000000000404413\n.text:0000000000404418\n.text:000000000040441d\n.text:0000000000404422\n.text:0000000000404424\n'
p958
tp959
sS'XGetAtomName'
p960
(S'\n__stdcall XGetAtomName()\n'
p961
V\u000avoid XGetAtomName(void)\u000a\u000a{\u000a  (*(code *)PTR_XGetAtomName_00608168)();\u000a  return;\u000a}\u000a\u000a
p962
S'JMP qword ptr [0x00608168]\n'
p963
S'ff 25 12 6b 20 00\n'
p964
S'.plt:0000000000401650\n'
p965
tp966
sS'Find_Client_In_Children'
p967
(S'\n__stdcall Find_Client_In_Children(Display * dpy, Window win)\n'
p968
V\u000aWindow Find_Client_In_Children(Display *dpy,Window win)\u000a\u000a{\u000a  int iVar1;\u000a  Window win_00;\u000a  long lVar2;\u000a  uint n_children;\u000a  Window parent;\u000a  Window root;\u000a  long local_38;\u000a  int local_2c;\u000a  undefined local_28 [8];\u000a  undefined local_20 [8];\u000a  \u000a  iVar1 = XQueryTree(dpy,win,local_20,local_28,&local_38,&local_2c);\u000a  win_00 = 0;\u000a  if ((iVar1 != 0) && (local_38 != 0)) {\u000a    if (0 < (long)local_2c) {\u000a      lVar2 = (long)local_2c + 1;\u000a      do {\u000a        iVar1 = Window_Is_Viewable(dpy,*(Window *)(local_38 + -0x10 + lVar2 * 8));\u000a        if (iVar1 == 0) {\u000a          *(undefined8 *)(local_38 + -0x10 + lVar2 * 8) = 0;\u000a        }\u000a        else {\u000a          iVar1 = Window_Has_Property(dpy,*(Window *)(local_38 + -0x10 + lVar2 * 8),atom_wm_state);\u000a          if (iVar1 != 0) {\u000a            win_00 = *(Window *)(local_38 + -0x10 + lVar2 * 8);\u000a            goto LAB_00402345;\u000a          }\u000a        }\u000a        lVar2 = lVar2 + -1;\u000a      } while (1 < lVar2);\u000a      if (0 < (long)local_2c) {\u000a        lVar2 = (long)local_2c + 1;\u000a        do {\u000a          win_00 = *(Window *)(local_38 + -0x10 + lVar2 * 8);\u000a          if (win_00 != 0) {\u000a            win_00 = Find_Client_In_Children(dpy,win_00);\u000a            if (win_00 != 0) goto LAB_00402345;\u000a          }\u000a          lVar2 = lVar2 + -1;\u000a        } while (1 < lVar2);\u000a      }\u000a    }\u000a    win_00 = 0;\u000aLAB_00402345:\u000a    XFree(local_38);\u000a  }\u000a  return win_00;\u000a}\u000a\u000a
p969
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x20\nMOV R14,RDI\nLEA RDX,[RSP + 0x18]\nLEA RCX,[RSP + 0x10]\nMOV R8,RSP\nLEA R9,[RSP + 0xc]\nCALL 0x00401450\nXOR R15D,R15D\nTEST EAX,EAX\nJZ 0x0040234e\nMOV RAX,qword ptr [RSP]\nTEST RAX,RAX\nJZ 0x0040234e\nMOVSXD RBX,dword ptr [RSP + 0xc]\nTEST RBX,RBX\nJLE 0x00402337\nINC RBX\nNOP dword ptr [RAX]\nMOV RAX,qword ptr [RSP]\nMOV RSI,qword ptr [RAX + RBX*0x8 + -0x10]\nMOV RDI,R14\nCALL 0x00402360\nMOV RCX,qword ptr [RSP]\nTEST EAX,EAX\nJZ 0x004022f0\nMOV RSI,qword ptr [RCX + RBX*0x8 + -0x10]\nMOV RDX,qword ptr [0x00608ba0]\nMOV RDI,R14\nCALL 0x004021e0\nTEST EAX,EAX\nJZ 0x004022f9\nJMP 0x0040233c\nMOV qword ptr [RCX + RBX*0x8 + -0x10],0x0\nDEC RBX\nCMP RBX,0x1\nJG 0x004022b0\nMOVSXD RBX,dword ptr [RSP + 0xc]\nTEST RBX,RBX\nJLE 0x00402337\nINC RBX\nNOP\nMOV RAX,qword ptr [RSP]\nMOV RSI,qword ptr [RAX + RBX*0x8 + -0x10]\nTEST RSI,RSI\nJZ 0x0040232e\nMOV RDI,R14\nCALL 0x00402260\nMOV R15,RAX\nTEST R15,R15\nJNZ 0x00402345\nDEC RBX\nCMP RBX,0x1\nJG 0x00402310\nXOR R15D,R15D\nJMP 0x00402345\nMOV RAX,qword ptr [RSP]\nMOV R15,qword ptr [RAX + RBX*0x8 + -0x10]\nMOV RDI,qword ptr [RSP]\nCALL 0x00401480\nMOV RAX,R15\nADD RSP,0x20\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p970
S'41 57\n41 56\n53\n48 83 ec 20\n49 89 fe\n48 8d 54 24 18\n48 8d 4c 24 10\n49 89 e0\n4c 8d 4c 24 0c\ne8 cd f1 ff ff\n45 31 ff\n85 c0\n0f 84 c0 00 00 00\n48 8b 04 24\n48 85 c0\n0f 84 b3 00 00 00\n48 63 5c 24 0c\n48 85 db\n0f 8e 8e 00 00 00\n48 ff c3\n0f 1f 40 00\n48 8b 04 24\n48 8b 74 d8 f0\n4c 89 f7\ne8 9f 00 00 00\n48 8b 0c 24\n85 c0\n74 27\n48 8b 74 d9 f0\n48 8b 15 cb 68 20 00\n4c 89 f7\ne8 03 ff ff ff\n85 c0\n74 18\neb 59\n48 c7 44 d9 f0 00 00 00 00\n48 ff cb\n48 83 fb 01\n7f ae\n48 63 5c 24 0c\n48 85 db\n7e 2b\n48 ff c3\n90\n48 8b 04 24\n48 8b 74 d8 f0\n48 85 f6\n74 10\n4c 89 f7\ne8 3a ff ff ff\n49 89 c7\n4d 85 ff\n75 17\n48 ff cb\n48 83 fb 01\n7f d9\n45 31 ff\neb 09\n48 8b 04 24\n4c 8b 7c d8 f0\n48 8b 3c 24\ne8 32 f1 ff ff\n4c 89 f8\n48 83 c4 20\n5b\n41 5e\n41 5f\nc3\n'
p971
S'.text:0000000000402260\n.text:0000000000402262\n.text:0000000000402264\n.text:0000000000402265\n.text:0000000000402269\n.text:000000000040226c\n.text:0000000000402271\n.text:0000000000402276\n.text:0000000000402279\n.text:000000000040227e\n.text:0000000000402283\n.text:0000000000402286\n.text:0000000000402288\n.text:000000000040228e\n.text:0000000000402292\n.text:0000000000402295\n.text:000000000040229b\n.text:00000000004022a0\n.text:00000000004022a3\n.text:00000000004022a9\n.text:00000000004022ac\n.text:00000000004022b0\n.text:00000000004022b4\n.text:00000000004022b9\n.text:00000000004022bc\n.text:00000000004022c1\n.text:00000000004022c5\n.text:00000000004022c7\n.text:00000000004022c9\n.text:00000000004022ce\n.text:00000000004022d5\n.text:00000000004022d8\n.text:00000000004022dd\n.text:00000000004022df\n.text:00000000004022e1\n.text:00000000004022f0\n.text:00000000004022f9\n.text:00000000004022fc\n.text:0000000000402300\n.text:0000000000402302\n.text:0000000000402307\n.text:000000000040230a\n.text:000000000040230c\n.text:000000000040230f\n.text:0000000000402310\n.text:0000000000402314\n.text:0000000000402319\n.text:000000000040231c\n.text:000000000040231e\n.text:0000000000402321\n.text:0000000000402326\n.text:0000000000402329\n.text:000000000040232c\n.text:000000000040232e\n.text:0000000000402331\n.text:0000000000402335\n.text:0000000000402337\n.text:000000000040233a\n.text:000000000040233c\n.text:0000000000402340\n.text:0000000000402345\n.text:0000000000402349\n.text:000000000040234e\n.text:0000000000402351\n.text:0000000000402355\n.text:0000000000402356\n.text:0000000000402358\n.text:000000000040235a\n'
p972
tp973
sS'Format_Len_String'
p974
(S'\n__stdcall Format_Len_String()\n'
p975
V\u000achar * Format_Len_String(void)\u000a\u000a{\u000a  char *string;\u000a  char *extraout_RAX;\u000a  int in_ESI;\u000a  void *__src;\u000a  \u000a  string = (char *)malloc((long)(in_ESI + 1));\u000a  if (string != (char *)0x0) {\u000a    memcpy(string,__src,(long)in_ESI);\u000a    string[(long)in_ESI] = 0;\u000a    Format_String(string);\u000a    free(string);\u000a    return extraout_RAX;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  Fatal_Error("Out of memory!");\u000a}\u000a\u000a
p976
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV R15,RDI\nLEA EAX,[RBP + 0x1]\nMOVSXD RDI,EAX\nCALL 0x004015c0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00404194\nMOVSXD RBP,EBP\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,RBP\nCALL 0x00401570\nMOV byte ptr [RBX + RBP*0x1],0x0\nMOV RDI,RBX\nMOV ESI,R14D\nCALL 0x00404810\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004013c0\nMOV EDI,0x4060b5\nXOR EAX,EAX\nCALL 0x00401a80\n'
p977
S'55\n41 57\n41 56\n53\n50\n41 89 d6\n89 f5\n49 89 ff\n8d 45 01\n48 63 f8\ne8 66 d4 ff ff\n48 89 c3\n48 85 db\n74 32\n48 63 ed\n48 89 df\n4c 89 fe\n48 89 ea\ne8 fd d3 ff ff\nc6 04 2b 00\n48 89 df\n44 89 f6\ne8 8e 06 00 00\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\ne9 2c d2 ff ff\nbf b5 60 40 00\n31 c0\ne8 e0 d8 ff ff\n'
p978
S'.text:0000000000404140\n.text:0000000000404141\n.text:0000000000404143\n.text:0000000000404145\n.text:0000000000404146\n.text:0000000000404147\n.text:000000000040414a\n.text:000000000040414c\n.text:000000000040414f\n.text:0000000000404152\n.text:0000000000404155\n.text:000000000040415a\n.text:000000000040415d\n.text:0000000000404160\n.text:0000000000404162\n.text:0000000000404165\n.text:0000000000404168\n.text:000000000040416b\n.text:000000000040416e\n.text:0000000000404173\n.text:0000000000404177\n.text:000000000040417a\n.text:000000000040417d\n.text:0000000000404182\n.text:0000000000404185\n.text:0000000000404189\n.text:000000000040418a\n.text:000000000040418c\n.text:000000000040418e\n.text:000000000040418f\n.text:0000000000404194\n.text:0000000000404199\n.text:000000000040419b\n'
p979
tp980
sS'Skip_Past_Right_Paren'
p981
(S'\n__stdcall Skip_Past_Right_Paren(char * string)\n'
p982
V\u000achar * Skip_Past_Right_Paren(char *string)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *pcVar4;\u000a  int iVar5;\u000a  bool bVar6;\u000a  \u000a  cVar2 = *string;\u000a  if (cVar2 == ')') {\u000a    return string + 1;\u000a  }\u000a  bVar6 = false;\u000a  iVar5 = 0;\u000a  pcVar1 = string + 1;\u000a  do {\u000a    while (pcVar4 = pcVar1, cVar2 < ')') {\u000a      if (cVar2 != '(') {\u000a        if (cVar2 == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a          Fatal_Error("Missing \u005c')\u005c'.");\u000a        }\u000a        goto LAB_00404bb6;\u000a      }\u000a      iVar3 = 1;\u000aLAB_00404be5:\u000a      pcVar1 = pcVar4 + 1;\u000a      iVar5 = iVar5 + iVar3;\u000a      bVar6 = iVar5 != 0;\u000a      cVar2 = *pcVar4;\u000a      string = pcVar4;\u000a      if ((!bVar6) && (string = pcVar4, cVar2 == ')')) {\u000a        return pcVar1;\u000a      }\u000a    }\u000a    if (cVar2 == ')') {\u000a      iVar3 = -1;\u000a      goto LAB_00404be5;\u000a    }\u000a    if (cVar2 == '\u005c\u005c') {\u000a      pcVar4 = string + 2;\u000a    }\u000aLAB_00404bb6:\u000a    cVar2 = *pcVar4;\u000a    pcVar1 = pcVar4 + 1;\u000a    string = pcVar4;\u000a    if (!(bool)(cVar2 != ')' | bVar6)) {\u000a      return pcVar4 + 1;\u000a    }\u000a  } while( true );\u000a}\u000a\u000a
p983
S'LEA RSI,[RDI + 0x1]\nMOV CL,byte ptr [RDI]\nCMP CL,0x29\nJNZ 0x00404b7f\nMOV RAX,RSI\nRET\nXOR R9D,R9D\nXOR R8D,R8D\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RAX,RSI\nMOVSX ECX,CL\nCMP ECX,0x28\nJLE 0x00404bb0\nCMP ECX,0x29\nJZ 0x00404bd0\nCMP ECX,0x5c\nJNZ 0x00404bb6\nADD RDI,0x2\nMOV RAX,RDI\nJMP 0x00404bb6\nJZ 0x00404be0\nTEST ECX,ECX\nJZ 0x00404c03\nMOV RDI,RAX\nLEA RAX,[RDI + 0x1]\nMOVZX ECX,byte ptr [RDI]\nCMP CL,0x29\nSETNZ DL\nOR DL,R9B\nTEST DL,0x1\nJNZ 0x00404b93\nJMP 0x00404c02\nMOV ECX,0xffffffff\nJMP 0x00404be5\nMOV ECX,0x1\nLEA RSI,[RAX + 0x1]\nADD R8D,ECX\nMOV CL,byte ptr [RAX]\nSETNZ R9B\nMOV RDI,RAX\nJNZ 0x00404b90\nCMP CL,0x29\nMOV RDI,RAX\nMOV RAX,RSI\nJNZ 0x00404b90\nRET\nPUSH RAX\nMOV EDI,0x406876\nXOR EAX,EAX\nCALL 0x00401a80\n'
p984
S'48 8d 77 01\n8a 0f\n80 f9 29\n75 04\n48 89 f0\nc3\n45 31 c9\n45 31 c0\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 f0\n0f be c9\n83 f9 28\n7e 15\n83 f9 29\n74 30\n83 f9 5c\n75 11\n48 83 c7 02\n48 89 f8\neb 08\n74 2e\n85 c9\n74 4d\n48 89 c7\n48 8d 47 01\n0f b6 0f\n80 f9 29\n0f 95 c2\n44 08 ca\nf6 c2 01\n75 c5\neb 32\nb9 ff ff ff ff\neb 0e\nb9 01 00 00 00\n48 8d 70 01\n41 01 c8\n8a 08\n41 0f 95 c1\n48 89 c7\n75 99\n80 f9 29\n48 89 c7\n48 89 f0\n75 8e\nc3\n50\nbf 76 68 40 00\n31 c0\ne8 70 ce ff ff\n'
p985
S'.text:0000000000404b70\n.text:0000000000404b74\n.text:0000000000404b76\n.text:0000000000404b79\n.text:0000000000404b7b\n.text:0000000000404b7e\n.text:0000000000404b7f\n.text:0000000000404b82\n.text:0000000000404b85\n.text:0000000000404b90\n.text:0000000000404b93\n.text:0000000000404b96\n.text:0000000000404b99\n.text:0000000000404b9b\n.text:0000000000404b9e\n.text:0000000000404ba0\n.text:0000000000404ba3\n.text:0000000000404ba5\n.text:0000000000404ba9\n.text:0000000000404bac\n.text:0000000000404bb0\n.text:0000000000404bb2\n.text:0000000000404bb4\n.text:0000000000404bb6\n.text:0000000000404bb9\n.text:0000000000404bbd\n.text:0000000000404bc0\n.text:0000000000404bc3\n.text:0000000000404bc6\n.text:0000000000404bc9\n.text:0000000000404bcc\n.text:0000000000404bce\n.text:0000000000404bd0\n.text:0000000000404bd5\n.text:0000000000404be0\n.text:0000000000404be5\n.text:0000000000404be9\n.text:0000000000404bec\n.text:0000000000404bee\n.text:0000000000404bf2\n.text:0000000000404bf5\n.text:0000000000404bf7\n.text:0000000000404bfa\n.text:0000000000404bfd\n.text:0000000000404c00\n.text:0000000000404c02\n.text:0000000000404c03\n.text:0000000000404c04\n.text:0000000000404c09\n.text:0000000000404c0b\n'
p986
tp987
sS'Select_Window'
p988
(S'\n__stdcall Select_Window(Display * dpy)\n'
p989
V\u000aWindow Select_Window(Display *dpy)\u000a\u000a{\u000a  Window root;\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  Window subwin;\u000a  int in_ESI;\u000a  int iVar3;\u000a  XEvent event;\u000a  undefined8 uVar4;\u000a  int local_f0 [12];\u000a  Window local_c0;\u000a  \u000a  root = *(Window *)(*(long *)(dpy + 0xe8) + 0x10 + (long)screen * 0x80);\u000a  uVar4 = 0x401eb9;\u000a  uVar2 = XCreateFontCursor(dpy,0x22);\u000a  iVar3 = 0;\u000a  iVar1 = XGrabPointer(dpy,root,0,0xc,0,1,root,uVar2,0,uVar4);\u000a  if (iVar1 != 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    Fatal_Error("Can\u005c't grab the mouse.");\u000a  }\u000a  subwin = 0;\u000aLAB_00401f2b:\u000a  do {\u000a    do {\u000a      if (iVar3 == 0 && subwin != 0) {\u000a        XUngrabPointer(dpy,0);\u000a        if ((in_ESI != 0) && (subwin != root)) {\u000a          subwin = Find_Client(dpy,root,subwin);\u000a        }\u000a        return subwin;\u000a      }\u000a      XAllowEvents(dpy,1,0);\u000a      XWindowEvent(dpy,root,0xc,local_f0);\u000a      if (local_f0[0] == 5) {\u000a        iVar3 = iVar3 - (uint)(0 < iVar3);\u000a        goto LAB_00401f2b;\u000a      }\u000a    } while (local_f0[0] != 4);\u000a    if ((subwin == 0) && (subwin = local_c0, local_c0 == 0)) {\u000a      subwin = root;\u000a    }\u000a    iVar3 = iVar3 + 1;\u000a  } while( true );\u000a}\u000a\u000a
p990
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xc8\nMOV dword ptr [RSP + 0x4],ESI\nMOV RBX,RDI\nMOV RAX,qword ptr [0xe8 + RBX]\nMOVSXD RCX,dword ptr [0x00608b98]\nSHL RCX,0x7\nMOV R14,qword ptr [RAX + RCX*0x1 + 0x10]\nMOV ESI,0x22\nCALL 0x00401420\nSUB RSP,0x8\nXOR R13D,R13D\nMOV EDX,0x0\nMOV ECX,0xc\nMOV R8D,0x0\nMOV R9D,0x1\nMOV RDI,RBX\nMOV RSI,R14\nPUSH 0x0\nPUSH RAX\nPUSH R14\nCALL 0x004014d0\nADD RSP,0x20\nTEST EAX,EAX\nJNZ 0x00401fd6\nLEA RBP,[RSP + 0x8]\nXOR R12D,R12D\nJMP 0x00401f2b\nTEST R12,R12\nJNZ 0x00401f50\nMOV R12,qword ptr [RSP + 0x38]\nTEST R12,R12\nCMOVZ R12,R14\nJMP 0x00401f50\nXOR EAX,EAX\nTEST R13D,R13D\nSETG AL\nSUB R13D,EAX\nTEST R12,R12\nSETZ AL\nTEST R13D,R13D\nSETNZ R15B\nOR R15B,AL\nTEST R15B,R15B\nJNZ 0x00401f65\nJMP 0x00401f9a\nINC R13D\nJMP 0x00401f2b\nTEST R15B,R15B\nJZ 0x00401f9a\nMOV ESI,0x1\nXOR EDX,EDX\nMOV RDI,RBX\nCALL 0x00401400\nMOV EDX,0xc\nMOV RDI,RBX\nMOV RSI,R14\nMOV RCX,RBP\nCALL 0x004016e0\nMOV EAX,dword ptr [RSP + 0x8]\nCMP EAX,0x5\nJZ 0x00401f20\nCMP EAX,0x4\nJNZ 0x00401f60\nJMP 0x00401f00\nXOR ESI,ESI\nMOV RDI,RBX\nCALL 0x00401590\nCMP dword ptr [RSP + 0x4],0x0\nJZ 0x00401fc1\nCMP R12,R14\nJZ 0x00401fc1\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R12\nCALL 0x00401ff0\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xc8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x404eed\nXOR EAX,EAX\nCALL 0x00401a80\n'
p991
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec c8 00 00 00\n89 74 24 04\n48 89 fb\n48 8b 83 e8 00 00 00\n48 63 0d f2 6c 20 00\n48 c1 e1 07\n4c 8b 74 08 10\nbe 22 00 00 00\ne8 67 f5 ff ff\n48 83 ec 08\n45 31 ed\nba 00 00 00 00\nb9 0c 00 00 00\n41 b8 00 00 00 00\n41 b9 01 00 00 00\n48 89 df\n4c 89 f6\n6a 00\n50\n41 56\ne8 ea f5 ff ff\n48 83 c4 20\n85 c0\n0f 85 e4 00 00 00\n48 8d 6c 24 08\n45 31 e4\neb 2f\n4d 85 e4\n75 4b\n4c 8b 64 24 38\n4d 85 e4\n4d 0f 44 e6\neb 3d\n31 c0\n45 85 ed\n0f 9f c0\n41 29 c5\n4d 85 e4\n0f 94 c0\n45 85 ed\n41 0f 95 c7\n41 08 c7\n45 84 ff\n75 25\neb 58\n41 ff c5\neb d6\n45 84 ff\n74 35\nbe 01 00 00 00\n31 d2\n48 89 df\ne8 8c f4 ff ff\nba 0c 00 00 00\n48 89 df\n4c 89 f6\n48 89 e9\ne8 59 f7 ff ff\n8b 44 24 08\n83 f8 05\n74 90\n83 f8 04\n75 cb\ne9 66 ff ff ff\n31 f6\n48 89 df\ne8 ec f5 ff ff\n83 7c 24 04 00\n74 16\n4d 39 f4\n74 11\n48 89 df\n4c 89 f6\n4c 89 e2\ne8 32 00 00 00\n49 89 c4\n4c 89 e0\n48 81 c4 c8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf ed 4e 40 00\n31 c0\ne8 9e fa ff ff\n'
p992
S'.text:0000000000401e80\n.text:0000000000401e81\n.text:0000000000401e83\n.text:0000000000401e85\n.text:0000000000401e87\n.text:0000000000401e89\n.text:0000000000401e8a\n.text:0000000000401e91\n.text:0000000000401e95\n.text:0000000000401e98\n.text:0000000000401e9f\n.text:0000000000401ea6\n.text:0000000000401eaa\n.text:0000000000401eaf\n.text:0000000000401eb4\n.text:0000000000401eb9\n.text:0000000000401ebd\n.text:0000000000401ec0\n.text:0000000000401ec5\n.text:0000000000401eca\n.text:0000000000401ed0\n.text:0000000000401ed6\n.text:0000000000401ed9\n.text:0000000000401edc\n.text:0000000000401ede\n.text:0000000000401edf\n.text:0000000000401ee1\n.text:0000000000401ee6\n.text:0000000000401eea\n.text:0000000000401eec\n.text:0000000000401ef2\n.text:0000000000401ef7\n.text:0000000000401efa\n.text:0000000000401f00\n.text:0000000000401f03\n.text:0000000000401f05\n.text:0000000000401f0a\n.text:0000000000401f0d\n.text:0000000000401f11\n.text:0000000000401f20\n.text:0000000000401f22\n.text:0000000000401f25\n.text:0000000000401f28\n.text:0000000000401f2b\n.text:0000000000401f2e\n.text:0000000000401f31\n.text:0000000000401f34\n.text:0000000000401f38\n.text:0000000000401f3b\n.text:0000000000401f3e\n.text:0000000000401f40\n.text:0000000000401f50\n.text:0000000000401f53\n.text:0000000000401f60\n.text:0000000000401f63\n.text:0000000000401f65\n.text:0000000000401f6a\n.text:0000000000401f6c\n.text:0000000000401f6f\n.text:0000000000401f74\n.text:0000000000401f79\n.text:0000000000401f7c\n.text:0000000000401f7f\n.text:0000000000401f82\n.text:0000000000401f87\n.text:0000000000401f8b\n.text:0000000000401f8e\n.text:0000000000401f90\n.text:0000000000401f93\n.text:0000000000401f95\n.text:0000000000401f9a\n.text:0000000000401f9c\n.text:0000000000401f9f\n.text:0000000000401fa4\n.text:0000000000401fa9\n.text:0000000000401fab\n.text:0000000000401fae\n.text:0000000000401fb0\n.text:0000000000401fb3\n.text:0000000000401fb6\n.text:0000000000401fb9\n.text:0000000000401fbe\n.text:0000000000401fc1\n.text:0000000000401fc4\n.text:0000000000401fcb\n.text:0000000000401fcc\n.text:0000000000401fce\n.text:0000000000401fd0\n.text:0000000000401fd2\n.text:0000000000401fd4\n.text:0000000000401fd5\n.text:0000000000401fd6\n.text:0000000000401fdb\n.text:0000000000401fdd\n'
p993
tp994
sS'__do_global_dtors_aux'
p995
(S'\n__stdcall __do_global_dtors_aux()\n'
p996
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p997
S'CMP byte ptr [0x00608b88],0x0\nJNZ 0x0040184a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x004017b0\nPOP RBP\nMOV byte ptr [0x00608b88],0x1\nRET\n'
p998
S'80 3d 51 73 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 3e 73 20 00 01\nf3 c3\n'
p999
S'.text:0000000000401830\n.text:0000000000401837\n.text:0000000000401839\n.text:000000000040183a\n.text:000000000040183d\n.text:0000000000401842\n.text:0000000000401843\n.text:000000000040184a\n'
p1000
tp1001
sS'_fini'
p1002
(S'\n__stdcall _fini()\n'
p1003
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1004
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1005
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1006
S'.fini:0000000000404e34\n.fini:0000000000404e38\n.fini:0000000000404e3c\n'
p1007
tp1008
sS'Find_Client'
p1009
(S'\n__stdcall Find_Client(Display * dpy, Window root, Window subwin)\n'
p1010
V\u000aWindow Find_Client(Display *dpy,Window root,Window subwin)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 in_RAX;\u000a  ulong *puVar2;\u000a  Window WVar3;\u000a  ulong uVar4;\u000a  uint n_roots;\u000a  uint local_24;\u000a  \u000a  local_24 = (uint)((ulong)in_RAX >> 0x20);\u000a  puVar2 = Find_Roots(dpy,root,&local_24);\u000a  if (local_24 == 0) {\u000a    WVar3 = subwin;\u000a    if (puVar2 == (ulong *)0x0) goto LAB_0040205b;\u000a  }\u000a  else {\u000a    uVar4 = 0;\u000a    do {\u000a      if (puVar2[uVar4] == subwin) {\u000a        WVar3 = Find_Child_At_Pointer(dpy,subwin);\u000a        if (WVar3 == 0) {\u000a          return subwin;\u000a        }\u000a        break;\u000a      }\u000a      uVar4 = uVar4 + 1;\u000a      WVar3 = subwin;\u000a    } while (uVar4 < (ulong)local_24);\u000a  }\u000a  XFree(puVar2);\u000a  subwin = WVar3;\u000aLAB_0040205b:\u000a  if ((((atom_wm_state != 0) || (atom_wm_state = XInternAtom(dpy,"WM_STATE",0), atom_wm_state != 0))\u000a      && (iVar1 = Window_Has_Property(dpy,subwin,atom_wm_state), iVar1 == 0)) &&\u000a     (WVar3 = Find_Client_In_Children(dpy,subwin), WVar3 != 0)) {\u000a    subwin = WVar3;\u000a  }\u000a  return subwin;\u000a}\u000a\u000a
p1011
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDX\nMOV R14,RDI\nLEA RDX,[RSP + 0x4]\nCALL 0x004020c0\nMOV RBX,RAX\nCMP dword ptr [RSP + 0x4],0x0\nJZ 0x00402033\nMOV EAX,dword ptr [RSP + 0x4]\nXOR ECX,ECX\nNOP dword ptr [RAX + RAX*0x1]\nCMP qword ptr [RBX + RCX*0x8],R15\nJZ 0x0040203d\nINC RCX\nCMP RCX,RAX\nJC 0x00402020\nMOV R12,R15\nJMP 0x00402050\nTEST RBX,RBX\nMOV R12,R15\nJNZ 0x00402050\nJMP 0x0040205b\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x004021a0\nMOV R12,RAX\nTEST R12,R12\nJZ 0x004020a8\nMOV RDI,RBX\nCALL 0x00401480\nMOV R15,R12\nCMP qword ptr [0x00608ba0],0x0\nJNZ 0x00402080\nMOV ESI,0x404f0f\nXOR EDX,EDX\nMOV RDI,R14\nCALL 0x004015f0\nMOV qword ptr [0x00608ba0],RAX\nTEST RAX,RAX\nJZ 0x004020a8\nMOV RDX,qword ptr [0x00608ba0]\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x004021e0\nTEST EAX,EAX\nJNZ 0x004020a8\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x00402260\nTEST RAX,RAX\nCMOVNZ R15,RAX\nMOV RAX,R15\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p1012
S'41 57\n41 56\n41 54\n53\n50\n49 89 d7\n49 89 fe\n48 8d 54 24 04\ne8 b8 00 00 00\n48 89 c3\n83 7c 24 04 00\n74 21\n8b 44 24 04\n31 c9\n0f 1f 84 00 00 00 00 00\n4c 39 3c cb\n74 17\n48 ff c1\n48 39 c1\n72 f2\n4d 89 fc\neb 1d\n48 85 db\n4d 89 fc\n75 15\neb 1e\n4c 89 f7\n4c 89 fe\ne8 58 01 00 00\n49 89 c4\n4d 85 e4\n74 58\n48 89 df\ne8 28 f4 ff ff\n4d 89 e7\n48 83 3d 3d 6b 20 00 00\n75 1b\nbe 0f 4f 40 00\n31 d2\n4c 89 f7\ne8 7c f5 ff ff\n48 89 05 25 6b 20 00\n48 85 c0\n74 28\n48 8b 15 19 6b 20 00\n4c 89 f7\n4c 89 fe\ne8 4e 01 00 00\n85 c0\n75 12\n4c 89 f7\n4c 89 fe\ne8 bf 01 00 00\n48 85 c0\n4c 0f 45 f8\n4c 89 f8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p1013
S'.text:0000000000401ff0\n.text:0000000000401ff2\n.text:0000000000401ff4\n.text:0000000000401ff6\n.text:0000000000401ff7\n.text:0000000000401ff8\n.text:0000000000401ffb\n.text:0000000000401ffe\n.text:0000000000402003\n.text:0000000000402008\n.text:000000000040200b\n.text:0000000000402010\n.text:0000000000402012\n.text:0000000000402016\n.text:0000000000402018\n.text:0000000000402020\n.text:0000000000402024\n.text:0000000000402026\n.text:0000000000402029\n.text:000000000040202c\n.text:000000000040202e\n.text:0000000000402031\n.text:0000000000402033\n.text:0000000000402036\n.text:0000000000402039\n.text:000000000040203b\n.text:000000000040203d\n.text:0000000000402040\n.text:0000000000402043\n.text:0000000000402048\n.text:000000000040204b\n.text:000000000040204e\n.text:0000000000402050\n.text:0000000000402053\n.text:0000000000402058\n.text:000000000040205b\n.text:0000000000402063\n.text:0000000000402065\n.text:000000000040206a\n.text:000000000040206c\n.text:000000000040206f\n.text:0000000000402074\n.text:000000000040207b\n.text:000000000040207e\n.text:0000000000402080\n.text:0000000000402087\n.text:000000000040208a\n.text:000000000040208d\n.text:0000000000402092\n.text:0000000000402094\n.text:0000000000402096\n.text:0000000000402099\n.text:000000000040209c\n.text:00000000004020a1\n.text:00000000004020a4\n.text:00000000004020a8\n.text:00000000004020ab\n.text:00000000004020af\n.text:00000000004020b0\n.text:00000000004020b2\n.text:00000000004020b4\n.text:00000000004020b6\n'
p1014
tp1015
sS'Display_Property'
p1016
(S'\n__stdcall Display_Property(thunk * thunks, char * dformat, char * format)\n'
p1017
V\u000avoid Display_Property(thunk *thunks,char *dformat,char *format)\u000a\u000a{\u000a  char cVar1;\u000a  int __c;\u000a  \u000a  do {\u000a    while( true ) {\u000a      while( true ) {\u000a        cVar1 = *dformat;\u000a        if (cVar1 == 0) {\u000a          return;\u000a        }\u000a        dformat = dformat + 1;\u000a        __c = (int)cVar1;\u000a        if (__c < 0x3f) break;\u000a        if (__c == 0x3f) {\u000a          dformat = Handle_Question_Mark(dformat,thunks,format);\u000a        }\u000a        else {\u000a          if (__c != 0x5c) goto LAB_00403b90;\u000a          dformat = Handle_Backslash(dformat);\u000a        }\u000a      }\u000a      if (__c == 0x24) break;\u000a      if (__c != 0x29) {\u000aLAB_00403b90:\u000a        putchar(__c);\u000a      }\u000a    }\u000a    dformat = Handle_Dollar_sign(dformat,thunks,format);\u000a  } while( true );\u000a}\u000a\u000a
p1018
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RDX\nMOV RBX,RSI\nMOV R15,RDI\nJMP 0x00403ba0\nCALL 0x004013d0\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00403bfd\nINC RBX\nMOVSX EDI,AL\nCMP EDI,0x3e\nJG 0x00403bc0\nCMP EDI,0x24\nJZ 0x00403bd7\nCMP EDI,0x29\nJZ 0x00403ba0\nJMP 0x00403b90\nCMP EDI,0x3f\nJZ 0x00403bea\nCMP EDI,0x5c\nJNZ 0x00403b90\nMOV RDI,RBX\nCALL 0x00403e80\nMOV RBX,RAX\nJMP 0x00403ba0\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,R14\nCALL 0x00403ee0\nMOV RBX,RAX\nJMP 0x00403ba0\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,R14\nCALL 0x00403fa0\nMOV RBX,RAX\nJMP 0x00403ba0\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1019
S'41 57\n41 56\n53\n49 89 d6\n48 89 f3\n49 89 ff\neb 10\ne8 3b d8 ff ff\n66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 03\n84 c0\n74 56\n48 ff c3\n0f be f8\n83 ff 3e\n7f 0e\n83 ff 24\n74 20\n83 ff 29\n74 e4\neb d2\n83 ff 3f\n74 25\n83 ff 5c\n75 c6\n48 89 df\ne8 ae 02 00 00\n48 89 c3\neb c9\n48 89 df\n4c 89 fe\n4c 89 f2\ne8 fb 02 00 00\n48 89 c3\neb b6\n48 89 df\n4c 89 fe\n4c 89 f2\ne8 a8 03 00 00\n48 89 c3\neb a3\n5b\n41 5e\n41 5f\nc3\n'
p1020
S'.text:0000000000403b80\n.text:0000000000403b82\n.text:0000000000403b84\n.text:0000000000403b85\n.text:0000000000403b88\n.text:0000000000403b8b\n.text:0000000000403b8e\n.text:0000000000403b90\n.text:0000000000403b95\n.text:0000000000403ba0\n.text:0000000000403ba3\n.text:0000000000403ba5\n.text:0000000000403ba7\n.text:0000000000403baa\n.text:0000000000403bad\n.text:0000000000403bb0\n.text:0000000000403bb2\n.text:0000000000403bb5\n.text:0000000000403bb7\n.text:0000000000403bba\n.text:0000000000403bbc\n.text:0000000000403bc0\n.text:0000000000403bc3\n.text:0000000000403bc5\n.text:0000000000403bc8\n.text:0000000000403bca\n.text:0000000000403bcd\n.text:0000000000403bd2\n.text:0000000000403bd5\n.text:0000000000403bd7\n.text:0000000000403bda\n.text:0000000000403bdd\n.text:0000000000403be0\n.text:0000000000403be5\n.text:0000000000403be8\n.text:0000000000403bea\n.text:0000000000403bed\n.text:0000000000403bf0\n.text:0000000000403bf3\n.text:0000000000403bf8\n.text:0000000000403bfb\n.text:0000000000403bfd\n.text:0000000000403bfe\n.text:0000000000403c00\n.text:0000000000403c02\n'
p1021
tp1022
sS'Format_Thunk_I'
p1023
(S'\n__stdcall Format_Thunk_I(thunk * thunks, char * format)\n'
p1024
V\u000achar * Format_Thunk_I(thunk *thunks,char *format)\u000a\u000a{\u000a  long lVar1;\u000a  char *pcVar2;\u000a  int in_EDX;\u000a  \u000a  if (thunks->thunk_count == in_EDX || thunks->thunk_count < in_EDX) {\u000a    pcVar2 = "<field not available>";\u000a  }\u000a  else {\u000a    lVar1 = (long)in_EDX;\u000a    Get_Format_Char(format);\u000a    pcVar2 = Format_Thunk((thunk)CONCAT848(thunks[lVar1].dformat,\u000a                                           CONCAT444(*(undefined4 *)\u000a                                                      ((long)&thunks[lVar1].format + 4),\u000a                                                     CONCAT440(*(undefined4 *)&thunks[lVar1].format,\u000a                                                               CONCAT436(*(undefined4 *)\u000a                                                                          ((long)&thunks[lVar1].\u000a                                                                                  extra_value + 4),\u000a                                                                         CONCAT432(*(undefined4 *)\u000a                                                                                    &thunks[lVar1].\u000a                                                                                     extra_value,\u000a                                                                                   CONCAT428(*(\u000a                                                  undefined4 *)\u000a                                                  ((long)&thunks[lVar1].extra_encoding + 4),\u000a                                                  CONCAT424(*(undefined4 *)\u000a                                                             &thunks[lVar1].extra_encoding,\u000a                                                            CONCAT420(*(undefined4 *)\u000a                                                                       ((long)&thunks[lVar1].value +\u000a                                                                       4),CONCAT416(*(undefined4 *)\u000a                                                                                     &thunks[lVar1].\u000a                                                                                      value,\u000a                                                  CONCAT412(*(undefined4 *)\u000a                                                             ((long)&thunks[lVar1].propname + 4),\u000a                                                            CONCAT48(*(undefined4 *)\u000a                                                                      &thunks[lVar1].propname,\u000a                                                                     CONCAT44(*(undefined4 *)\u000a                                                                               &thunks[lVar1].\u000a                                                                                field_0x4,\u000a                                                                              thunks[lVar1].\u000a                                                                              thunk_count)))))))))))\u000a                                          ));\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p1025
S'PUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV RBX,RDI\nCMP dword ptr [RBX],EDX\nJLE 0x00404072\nMOVSXD RAX,EDX\nIMUL R14,RAX,0x38\nMOV RDI,RSI\nMOV ESI,EAX\nCALL 0x00403870\nMOV RCX,qword ptr [RBX + R14*0x1 + 0x30]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [RBX + R14*0x1]\nMOVUPS XMM1,xmmword ptr [RBX + R14*0x1 + 0x10]\nMOVUPS XMM2,xmmword ptr [RBX + R14*0x1 + 0x20]\nMOVUPS xmmword ptr [RSP + 0x20],XMM2\nMOVUPS xmmword ptr [RSP + 0x10],XMM1\nMOVUPS xmmword ptr [RSP],XMM0\nMOVSX EDI,AL\nCALL 0x00404080\nJMP 0x00404077\nMOV EAX,0x406719\nADD RSP,0x38\nPOP RBX\nPOP R14\nRET\n'
p1026
S'41 56\n53\n48 83 ec 38\n48 89 fb\n39 13\n7e 44\n48 63 c2\n4c 6b f0 38\n48 89 f7\n89 c6\ne8 31 f8 ff ff\n4a 8b 4c 33 30\n48 89 4c 24 30\n42 0f 10 04 33\n42 0f 10 4c 33 10\n42 0f 10 54 33 20\n0f 11 54 24 20\n0f 11 4c 24 10\n0f 11 04 24\n0f be f8\ne8 10 00 00 00\neb 05\nb8 19 67 40 00\n48 83 c4 38\n5b\n41 5e\nc3\n'
p1027
S'.text:0000000000404020\n.text:0000000000404022\n.text:0000000000404023\n.text:0000000000404027\n.text:000000000040402a\n.text:000000000040402c\n.text:000000000040402e\n.text:0000000000404031\n.text:0000000000404035\n.text:0000000000404038\n.text:000000000040403a\n.text:000000000040403f\n.text:0000000000404044\n.text:0000000000404049\n.text:000000000040404e\n.text:0000000000404054\n.text:000000000040405a\n.text:000000000040405f\n.text:0000000000404064\n.text:0000000000404068\n.text:000000000040406b\n.text:0000000000404070\n.text:0000000000404072\n.text:0000000000404077\n.text:000000000040407b\n.text:000000000040407c\n.text:000000000040407e\n'
p1028
tp1029
sS'Get_Format_Char'
p1030
(S'\n__stdcall Get_Format_Char(char * format)\n'
p1031
V\u000achar Get_Format_Char(char *format)\u000a\u000a{\u000a  char *__s;\u000a  size_t sVar1;\u000a  int iVar2;\u000a  int in_ESI;\u000a  long lStack24;\u000a  \u000a  __s = Scan_Long(format,&lStack24);\u000a  if (*__s != 0) {\u000a    sVar1 = strlen(__s);\u000a    iVar2 = (int)sVar1 + -1;\u000a    if (in_ESI < (int)sVar1) {\u000a      iVar2 = in_ESI;\u000a    }\u000a    return __s[(long)iVar2];\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  Fatal_Error("bad format: %s",__s);\u000a}\u000a\u000a
p1032
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RSI,RSP\nCALL 0x004038c0\nMOV RBX,RAX\nCMP byte ptr [RBX],0x0\nJZ 0x004038a2\nMOV RDI,RBX\nCALL 0x00401460\nLEA ECX,[RAX + -0x1]\nCMP EAX,EBP\nCMOVG ECX,EBP\nMOVSXD RAX,ECX\nMOV AL,byte ptr [RBX + RAX*0x1]\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV EDI,0x4065f4\nXOR EAX,EAX\nMOV RSI,RBX\nCALL 0x00401a80\n'
p1033
S'55\n53\n50\n89 f5\n48 89 e6\ne8 43 00 00 00\n48 89 c3\n80 3b 00\n74 1d\n48 89 df\ne8 d3 db ff ff\n8d 48 ff\n39 e8\n0f 4f cd\n48 63 c1\n8a 04 03\n48 83 c4 08\n5b\n5d\nc3\nbf f4 65 40 00\n31 c0\n48 89 de\ne8 cf e1 ff ff\n'
p1034
S'.text:0000000000403870\n.text:0000000000403871\n.text:0000000000403872\n.text:0000000000403873\n.text:0000000000403875\n.text:0000000000403878\n.text:000000000040387d\n.text:0000000000403880\n.text:0000000000403883\n.text:0000000000403885\n.text:0000000000403888\n.text:000000000040388d\n.text:0000000000403890\n.text:0000000000403892\n.text:0000000000403895\n.text:0000000000403898\n.text:000000000040389b\n.text:000000000040389f\n.text:00000000004038a0\n.text:00000000004038a1\n.text:00000000004038a2\n.text:00000000004038a7\n.text:00000000004038a9\n.text:00000000004038ac\n'
p1035
tp1036
s.