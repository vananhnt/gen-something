(dp0
S'ungetc'
p1
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p2
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_0062d2f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p3
S'JMP qword ptr [0x0062d2f8]\n'
p4
S'ff 25 42 a6 22 00\n'
p5
S'.plt:0000000000402cb0\n'
p6
tp7
sS'version_etc_arn'
p8
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p9
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    fprintf((FILE *)stream,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    fprintf((FILE *)stream,"%s (%s) %s\u005cn",command_name,package,version);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_00424acb,5);\u000a  fprintf((FILE *)stream,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    __s = (char *)dcgettext(0,"Written by %s.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors);\u000a    return;\u000a  case 2:\u000a    __s = (char *)dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    __s = (char *)dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    __s = (char *)dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors,authors[1],authors[2],authors[3]);\u000a    return;\u000a  case 5:\u000a    uVar1 = 0x416f17;\u000a    __s = (char *)dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors,authors[1],authors[2],authors[3],authors[4],uVar1);\u000a    break;\u000a  case 6:\u000a    __s = (char *)dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors,authors[1],authors[2],authors[3],authors[4],authors[5]);\u000a    break;\u000a  case 7:\u000a    uVar1 = 0x416f96;\u000a    __s = (char *)dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a            authors[6],uVar1);\u000a    break;\u000a  case 8:\u000a    __s = (char *)dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a            authors[6],authors[7]);\u000a    break;\u000a  case 9:\u000a    uVar1 = 0x417025;\u000a    __s = (char *)dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a            authors[6],authors[7],authors[8],uVar1);\u000a    break;\u000a  default:\u000a    uVar1 = 0x416e2a;\u000a    __s = (char *)dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a            authors[6],authors[7],authors[8],uVar1);\u000a  }\u000a  return;\u000a}\u000a\u000a
p10
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV RBX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV R14,RDI\nTEST RDX,RDX\nJZ 0x00416d83\nMOV ESI,0x424ab8\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00402ba0\nJMP 0x00416d98\nMOV ESI,0x424ac4\nXOR EAX,EAX\nMOV RDI,R14\nMOV RDX,RCX\nMOV RCX,RBX\nCALL 0x00402ba0\nXOR EDI,EDI\nMOV ESI,0x424acb\nMOV EDX,0x5\nCALL 0x00402910\nMOV RDX,RAX\nMOV ESI,0x424d80\nMOV ECX,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00402ba0\nXOR EDI,EDI\nMOV ESI,0x424acf\nMOV EDX,0x5\nCALL 0x00402910\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00402a50\nCMP R12,0x9\nJA 0x00416e19\nJMP qword ptr [0x424a68 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x424b9a\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV RDX,qword ptr [R15]\nXOR EAX,EAX\nMOV RDI,R14\nMOV RSI,RCX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00402ba0\nXOR EDI,EDI\nMOV ESI,0x424cd9\nMOV EDX,0x5\nCALL 0x00402910\nMOV RSI,RAX\nMOV RDX,qword ptr [R15]\nMOV RCX,qword ptr [R15 + 0x8]\nMOV R8,qword ptr [R15 + 0x10]\nMOV R9,qword ptr [R15 + 0x18]\nSUB RSP,0x8\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nCALL 0x00402ba0\nADD RSP,0x38\nJMP 0x00417060\nXOR EDI,EDI\nMOV ESI,0x424baa\nMOV EDX,0x5\nCALL 0x00402910\nMOV RSI,RAX\nMOV RDX,qword ptr [R15]\nMOV RCX,qword ptr [R15 + 0x8]\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00402ba0\nXOR EDI,EDI\nMOV ESI,0x424bc1\nMOV EDX,0x5\nCALL 0x00402910\nMOV RSI,RAX\nMOV RDX,qword ptr [R15]\nMOV RCX,qword ptr [R15 + 0x8]\nMOV R8,qword ptr [R15 + 0x10]\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00402ba0\nXOR EDI,EDI\nMOV ESI,0x424bdd\nMOV EDX,0x5\nCALL 0x00402910\nMOV RSI,RAX\nMOV RDX,qword ptr [R15]\nMOV RCX,qword ptr [R15 + 0x8]\nMOV R8,qword ptr [R15 + 0x10]\nMOV R9,qword ptr [R15 + 0x18]\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00402ba0\nXOR EDI,EDI\nMOV ESI,0x424bfd\nMOV EDX,0x5\nCALL 0x00402910\nMOV RSI,RAX\nMOV RDX,qword ptr [R15]\nMOV RCX,qword ptr [R15 + 0x8]\nMOV R8,qword ptr [R15 + 0x10]\nMOV R9,qword ptr [R15 + 0x18]\nSUB RSP,0x8\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nCALL 0x00402ba0\nADD RSP,0x18\nJMP 0x00417060\nXOR EDI,EDI\nMOV ESI,0x424c21\nMOV EDX,0x5\nCALL 0x00402910\nMOV RSI,RAX\nMOV RDX,qword ptr [R15]\nMOV RCX,qword ptr [R15 + 0x8]\nMOV R8,qword ptr [R15 + 0x10]\nMOV R9,qword ptr [R15 + 0x18]\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nCALL 0x00402ba0\nADD RSP,0x18\nJMP 0x00417060\nXOR EDI,EDI\nMOV ESI,0x424c49\nMOV EDX,0x5\nCALL 0x00402910\nMOV RSI,RAX\nMOV RDX,qword ptr [R15]\nMOV RCX,qword ptr [R15 + 0x8]\nMOV R8,qword ptr [R15 + 0x10]\nMOV R9,qword ptr [R15 + 0x18]\nSUB RSP,0x8\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nCALL 0x00402ba0\nADD RSP,0x28\nJMP 0x00417060\nXOR EDI,EDI\nMOV ESI,0x424c75\nMOV EDX,0x5\nCALL 0x00402910\nMOV RSI,RAX\nMOV RDX,qword ptr [R15]\nMOV RCX,qword ptr [R15 + 0x8]\nMOV R8,qword ptr [R15 + 0x10]\nMOV R9,qword ptr [R15 + 0x18]\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nCALL 0x00402ba0\nADD RSP,0x28\nJMP 0x00417060\nXOR EDI,EDI\nMOV ESI,0x424ca5\nMOV EDX,0x5\nCALL 0x00402910\nMOV RSI,RAX\nMOV RDX,qword ptr [R15]\nMOV RCX,qword ptr [R15 + 0x8]\nMOV R8,qword ptr [R15 + 0x10]\nMOV R9,qword ptr [R15 + 0x18]\nSUB RSP,0x8\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nCALL 0x00402ba0\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00402750\n'
p11
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n48 89 cb\n48 89 d1\n48 89 f2\n49 89 fe\n48 85 d2\n74 14\nbe b8 4a 42 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 1f be fe ff\neb 15\nbe c4 4a 42 00\n31 c0\n4c 89 f7\n48 89 ca\n48 89 d9\ne8 08 be fe ff\n31 ff\nbe cb 4a 42 00\nba 05 00 00 00\ne8 67 bb fe ff\n48 89 c2\nbe 80 4d 42 00\nb9 e0 07 00 00\n31 c0\n4c 89 f7\ne8 e0 bd fe ff\n31 ff\nbe cf 4a 42 00\nba 05 00 00 00\ne8 3f bb fe ff\n48 89 c7\n4c 89 f6\ne8 74 bc fe ff\n49 83 fc 09\n77 37\n42 ff 24 e5 68 4a 42 00\n31 ff\nbe 9a 4b 42 00\nba 05 00 00 00\ne8 15 bb fe ff\n48 89 c1\n49 8b 17\n31 c0\n4c 89 f7\n48 89 ce\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 87 bd fe ff\n31 ff\nbe d9 4c 42 00\nba 05 00 00 00\ne8 e6 ba fe ff\n48 89 c6\n49 8b 17\n49 8b 4f 08\n4d 8b 47 10\n4d 8b 4f 18\n48 83 ec 08\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\ne8 3f bd fe ff\n48 83 c4 38\ne9 f6 01 00 00\n31 ff\nbe aa 4b 42 00\nba 05 00 00 00\ne8 95 ba fe ff\n48 89 c6\n49 8b 17\n49 8b 4f 08\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 06 bd fe ff\n31 ff\nbe c1 4b 42 00\nba 05 00 00 00\ne8 65 ba fe ff\n48 89 c6\n49 8b 17\n49 8b 4f 08\n4d 8b 47 10\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 d2 bc fe ff\n31 ff\nbe dd 4b 42 00\nba 05 00 00 00\ne8 31 ba fe ff\n48 89 c6\n49 8b 17\n49 8b 4f 08\n4d 8b 47 10\n4d 8b 4f 18\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 9a bc fe ff\n31 ff\nbe fd 4b 42 00\nba 05 00 00 00\ne8 f9 b9 fe ff\n48 89 c6\n49 8b 17\n49 8b 4f 08\n4d 8b 47 10\n4d 8b 4f 18\n48 83 ec 08\n31 c0\n4c 89 f7\n41 ff 77 20\ne8 65 bc fe ff\n48 83 c4 18\ne9 1c 01 00 00\n31 ff\nbe 21 4c 42 00\nba 05 00 00 00\ne8 bb b9 fe ff\n48 89 c6\n49 8b 17\n49 8b 4f 08\n4d 8b 47 10\n4d 8b 4f 18\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\ne8 24 bc fe ff\n48 83 c4 18\ne9 db 00 00 00\n31 ff\nbe 49 4c 42 00\nba 05 00 00 00\ne8 7a b9 fe ff\n48 89 c6\n49 8b 17\n49 8b 4f 08\n4d 8b 47 10\n4d 8b 4f 18\n48 83 ec 08\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\ne8 db bb fe ff\n48 83 c4 28\ne9 92 00 00 00\n31 ff\nbe 75 4c 42 00\nba 05 00 00 00\ne8 31 b9 fe ff\n48 89 c6\n49 8b 17\n49 8b 4f 08\n4d 8b 47 10\n4d 8b 4f 18\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\ne8 92 bb fe ff\n48 83 c4 28\neb 4c\n31 ff\nbe a5 4c 42 00\nba 05 00 00 00\ne8 eb b8 fe ff\n48 89 c6\n49 8b 17\n49 8b 4f 08\n4d 8b 47 10\n4d 8b 4f 18\n48 83 ec 08\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\ne8 44 bb fe ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 e3 b6 fe ff\n'
p12
S'.text:0000000000416d50\n.text:0000000000416d52\n.text:0000000000416d54\n.text:0000000000416d56\n.text:0000000000416d57\n.text:0000000000416d58\n.text:0000000000416d5b\n.text:0000000000416d5e\n.text:0000000000416d61\n.text:0000000000416d64\n.text:0000000000416d67\n.text:0000000000416d6a\n.text:0000000000416d6d\n.text:0000000000416d6f\n.text:0000000000416d74\n.text:0000000000416d76\n.text:0000000000416d79\n.text:0000000000416d7c\n.text:0000000000416d81\n.text:0000000000416d83\n.text:0000000000416d88\n.text:0000000000416d8a\n.text:0000000000416d8d\n.text:0000000000416d90\n.text:0000000000416d93\n.text:0000000000416d98\n.text:0000000000416d9a\n.text:0000000000416d9f\n.text:0000000000416da4\n.text:0000000000416da9\n.text:0000000000416dac\n.text:0000000000416db1\n.text:0000000000416db6\n.text:0000000000416db8\n.text:0000000000416dbb\n.text:0000000000416dc0\n.text:0000000000416dc2\n.text:0000000000416dc7\n.text:0000000000416dcc\n.text:0000000000416dd1\n.text:0000000000416dd4\n.text:0000000000416dd7\n.text:0000000000416ddc\n.text:0000000000416de0\n.text:0000000000416de2\n.text:0000000000416dea\n.text:0000000000416dec\n.text:0000000000416df1\n.text:0000000000416df6\n.text:0000000000416dfb\n.text:0000000000416dfe\n.text:0000000000416e01\n.text:0000000000416e03\n.text:0000000000416e06\n.text:0000000000416e09\n.text:0000000000416e0d\n.text:0000000000416e0e\n.text:0000000000416e10\n.text:0000000000416e12\n.text:0000000000416e14\n.text:0000000000416e19\n.text:0000000000416e1b\n.text:0000000000416e20\n.text:0000000000416e25\n.text:0000000000416e2a\n.text:0000000000416e2d\n.text:0000000000416e30\n.text:0000000000416e34\n.text:0000000000416e38\n.text:0000000000416e3c\n.text:0000000000416e40\n.text:0000000000416e45\n.text:0000000000416e48\n.text:0000000000416e4c\n.text:0000000000416e50\n.text:0000000000416e54\n.text:0000000000416e58\n.text:0000000000416e5c\n.text:0000000000416e61\n.text:0000000000416e65\n.text:0000000000416e6a\n.text:0000000000416e6c\n.text:0000000000416e71\n.text:0000000000416e76\n.text:0000000000416e7b\n.text:0000000000416e7e\n.text:0000000000416e81\n.text:0000000000416e85\n.text:0000000000416e87\n.text:0000000000416e8a\n.text:0000000000416e8e\n.text:0000000000416e8f\n.text:0000000000416e91\n.text:0000000000416e93\n.text:0000000000416e95\n.text:0000000000416e9a\n.text:0000000000416e9c\n.text:0000000000416ea1\n.text:0000000000416ea6\n.text:0000000000416eab\n.text:0000000000416eae\n.text:0000000000416eb1\n.text:0000000000416eb5\n.text:0000000000416eb9\n.text:0000000000416ebb\n.text:0000000000416ebe\n.text:0000000000416ec2\n.text:0000000000416ec3\n.text:0000000000416ec5\n.text:0000000000416ec7\n.text:0000000000416ec9\n.text:0000000000416ece\n.text:0000000000416ed0\n.text:0000000000416ed5\n.text:0000000000416eda\n.text:0000000000416edf\n.text:0000000000416ee2\n.text:0000000000416ee5\n.text:0000000000416ee9\n.text:0000000000416eed\n.text:0000000000416ef1\n.text:0000000000416ef3\n.text:0000000000416ef6\n.text:0000000000416efa\n.text:0000000000416efb\n.text:0000000000416efd\n.text:0000000000416eff\n.text:0000000000416f01\n.text:0000000000416f06\n.text:0000000000416f08\n.text:0000000000416f0d\n.text:0000000000416f12\n.text:0000000000416f17\n.text:0000000000416f1a\n.text:0000000000416f1d\n.text:0000000000416f21\n.text:0000000000416f25\n.text:0000000000416f29\n.text:0000000000416f2d\n.text:0000000000416f2f\n.text:0000000000416f32\n.text:0000000000416f36\n.text:0000000000416f3b\n.text:0000000000416f3f\n.text:0000000000416f44\n.text:0000000000416f46\n.text:0000000000416f4b\n.text:0000000000416f50\n.text:0000000000416f55\n.text:0000000000416f58\n.text:0000000000416f5b\n.text:0000000000416f5f\n.text:0000000000416f63\n.text:0000000000416f67\n.text:0000000000416f6c\n.text:0000000000416f6f\n.text:0000000000416f73\n.text:0000000000416f77\n.text:0000000000416f7c\n.text:0000000000416f80\n.text:0000000000416f85\n.text:0000000000416f87\n.text:0000000000416f8c\n.text:0000000000416f91\n.text:0000000000416f96\n.text:0000000000416f99\n.text:0000000000416f9c\n.text:0000000000416fa0\n.text:0000000000416fa4\n.text:0000000000416fa8\n.text:0000000000416fac\n.text:0000000000416fb1\n.text:0000000000416fb4\n.text:0000000000416fb8\n.text:0000000000416fbc\n.text:0000000000416fc0\n.text:0000000000416fc5\n.text:0000000000416fc9\n.text:0000000000416fce\n.text:0000000000416fd0\n.text:0000000000416fd5\n.text:0000000000416fda\n.text:0000000000416fdf\n.text:0000000000416fe2\n.text:0000000000416fe5\n.text:0000000000416fe9\n.text:0000000000416fed\n.text:0000000000416ff1\n.text:0000000000416ff6\n.text:0000000000416ff9\n.text:0000000000416ffd\n.text:0000000000417001\n.text:0000000000417005\n.text:0000000000417009\n.text:000000000041700e\n.text:0000000000417012\n.text:0000000000417014\n.text:0000000000417016\n.text:000000000041701b\n.text:0000000000417020\n.text:0000000000417025\n.text:0000000000417028\n.text:000000000041702b\n.text:000000000041702f\n.text:0000000000417033\n.text:0000000000417037\n.text:000000000041703b\n.text:0000000000417040\n.text:0000000000417043\n.text:0000000000417047\n.text:000000000041704b\n.text:000000000041704f\n.text:0000000000417053\n.text:0000000000417057\n.text:000000000041705c\n.text:0000000000417060\n.text:0000000000417061\n.text:0000000000417063\n.text:0000000000417065\n.text:0000000000417067\n.text:0000000000417068\n'
p13
tp14
sS'pred_delete'
p15
(S'\n__stdcall pred_delete(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p16
V\u000a_Bool pred_delete(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  uint uVar1;\u000a  _Bool _Var2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  undefined uVar6;\u000a  bool bVar7;\u000a  \u000a  if ((*state.rel_pathname == '.') && (state.rel_pathname[1] == 0)) {\u000a    uVar6 = 1;\u000a  }\u000a  else {\u000a    if (state.have_stat == false) {\u000a      bVar7 = false;\u000a    }\u000a    else {\u000a      bVar7 = (stat_buf->st_mode & 0xf000) == 0x4000;\u000a    }\u000a    _Var2 = perform_delete();\u000a    uVar6 = 1;\u000a    if (_Var2 == false) {\u000a      puVar3 = (uint *)__errno_location();\u000a      if (((!bVar7) && (*puVar3 == 0x15)) && (_Var2 = perform_delete(), _Var2 != false)) {\u000a        return true;\u000a      }\u000a      uVar1 = *puVar3;\u000a      uVar6 = 0;\u000a      uVar4 = dcgettext(0,"cannot delete %s",5);\u000a      pcVar5 = safely_quote_err_filename((char *)0x0);\u000a      error(0,(ulong)uVar1,uVar4,pcVar5);\u000a      state.exit_status = 1;\u000a    }\u000a  }\u000a  return (_Bool)uVar6;\u000a}\u000a\u000a
p17
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV RAX,qword ptr [0x0062f010]\nCMP byte ptr [RAX],0x2e\nJNZ 0x00403e50\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x00403ee1\nCMP byte ptr [0x0062f004],0x0\nJZ 0x00403e71\nMOV EAX,0xf000\nAND EAX,dword ptr [RSI + 0x18]\nXOR EBP,EBP\nCMP EAX,0x4000\nSETZ BPL\nSHL EBP,0x9\nJMP 0x00403e73\nXOR EBP,EBP\nMOV EDI,EBP\nCALL 0x00404af0\nMOV BL,0x1\nTEST AL,AL\nJNZ 0x00403ee3\nCALL 0x00402770\nMOV R15,RAX\nTEST EBP,EBP\nJNZ 0x00403ea0\nCMP dword ptr [R15],0x15\nJNZ 0x00403ea0\nMOV EDI,0x200\nCALL 0x00404af0\nTEST AL,AL\nJNZ 0x00403ee3\nMOV R15D,dword ptr [R15]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x41cd99\nMOV EDX,0x5\nCALL 0x00402910\nMOV RBP,RAX\nXOR EDI,EDI\nMOV RSI,R14\nCALL 0x00408920\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,RBP\nCALL 0x00402d90\nMOV dword ptr [0x0062f024],0x1\nJMP 0x00403ee3\nMOV BL,0x1\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p18
S'55\n41 57\n41 56\n53\n50\n49 89 fe\n48 8b 05 cf b1 22 00\n80 38 2e\n75 0a\n80 78 01 00\n0f 84 91 00 00 00\n80 3d ad b1 22 00 00\n74 18\nb8 00 f0 00 00\n23 46 18\n31 ed\n3d 00 40 00 00\n40 0f 94 c5\nc1 e5 09\neb 02\n31 ed\n89 ef\ne8 76 0c 00 00\nb3 01\n84 c0\n75 63\ne8 eb e8 ff ff\n49 89 c7\n85 ed\n75 14\n41 83 3f 15\n75 0e\nbf 00 02 00 00\ne8 54 0c 00 00\n84 c0\n75 43\n45 8b 3f\n31 db\n31 ff\nbe 99 cd 41 00\nba 05 00 00 00\ne8 5a ea ff ff\n48 89 c5\n31 ff\n4c 89 f6\ne8 5d 4a 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 fe\n48 89 ea\ne8 bb ee ff ff\nc7 05 45 b1 22 00 01 00 00 00\neb 02\nb3 01\n89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p19
S'.text:0000000000403e30\n.text:0000000000403e31\n.text:0000000000403e33\n.text:0000000000403e35\n.text:0000000000403e36\n.text:0000000000403e37\n.text:0000000000403e3a\n.text:0000000000403e41\n.text:0000000000403e44\n.text:0000000000403e46\n.text:0000000000403e4a\n.text:0000000000403e50\n.text:0000000000403e57\n.text:0000000000403e59\n.text:0000000000403e5e\n.text:0000000000403e61\n.text:0000000000403e63\n.text:0000000000403e68\n.text:0000000000403e6c\n.text:0000000000403e6f\n.text:0000000000403e71\n.text:0000000000403e73\n.text:0000000000403e75\n.text:0000000000403e7a\n.text:0000000000403e7c\n.text:0000000000403e7e\n.text:0000000000403e80\n.text:0000000000403e85\n.text:0000000000403e88\n.text:0000000000403e8a\n.text:0000000000403e8c\n.text:0000000000403e90\n.text:0000000000403e92\n.text:0000000000403e97\n.text:0000000000403e9c\n.text:0000000000403e9e\n.text:0000000000403ea0\n.text:0000000000403ea3\n.text:0000000000403ea5\n.text:0000000000403ea7\n.text:0000000000403eac\n.text:0000000000403eb1\n.text:0000000000403eb6\n.text:0000000000403eb9\n.text:0000000000403ebb\n.text:0000000000403ebe\n.text:0000000000403ec3\n.text:0000000000403ec6\n.text:0000000000403ec8\n.text:0000000000403eca\n.text:0000000000403ecd\n.text:0000000000403ed0\n.text:0000000000403ed5\n.text:0000000000403edf\n.text:0000000000403ee1\n.text:0000000000403ee3\n.text:0000000000403ee5\n.text:0000000000403ee9\n.text:0000000000403eea\n.text:0000000000403eec\n.text:0000000000403eee\n.text:0000000000403eef\n'
p20
tp21
sS'transfer_entries'
p22
(S'\n__stdcall transfer_entries(Hash_table * dst, Hash_table * src)\n'
p23
V\u000a_Bool transfer_entries(Hash_table *dst,Hash_table *src)\u000a\u000a{\u000a  void *key;\u000a  hash_entry *phVar1;\u000a  hash_entry *entry;\u000a  hash_entry *phVar2;\u000a  char in_DL;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar3 = src->bucket;\u000a  if (phVar3 < src->bucket_limit) {\u000a    do {\u000a      if (phVar3->data != (void *)0x0) {\u000a        entry = phVar3->next;\u000a        while (entry != (hash_entry *)0x0) {\u000a          key = entry->data;\u000a          phVar1 = safe_hasher(dst,key);\u000a          phVar2 = entry->next;\u000a          if (phVar1->data == (void *)0x0) {\u000a            phVar1->data = key;\u000a            dst->n_buckets_used = dst->n_buckets_used + 1;\u000a            free_entry(dst,entry);\u000a            entry = phVar2;\u000a          }\u000a          else {\u000a            entry->next = phVar1->next;\u000a            phVar1->next = entry;\u000a            entry = phVar2;\u000a          }\u000a        }\u000a        key = phVar3->data;\u000a        phVar3->next = (hash_entry *)0x0;\u000a        if (in_DL == 0) {\u000a          entry = safe_hasher(dst,key);\u000a          if (entry->data == (void *)0x0) {\u000a            entry->data = key;\u000a            dst->n_buckets_used = dst->n_buckets_used + 1;\u000a          }\u000a          else {\u000a            phVar2 = allocate_entry(dst);\u000a            if (phVar2 == (hash_entry *)0x0) {\u000a              return false;\u000a            }\u000a            phVar2->data = key;\u000a            phVar2->next = entry->next;\u000a            entry->next = phVar2;\u000a          }\u000a          phVar3->data = (void *)0x0;\u000a          src->n_buckets_used = src->n_buckets_used - 1;\u000a        }\u000a      }\u000a      phVar3 = phVar3 + 1;\u000a    } while (phVar3 < src->bucket_limit);\u000a  }\u000a  return true;\u000a}\u000a\u000a
p24
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12D,EDX\nMOV RBP,RSI\nMOV R14,RDI\nMOV R15,qword ptr [RBP]\nMOV AL,0x1\nCMP R15,qword ptr [RBP + 0x8]\nJNC 0x00410dd2\nMOV qword ptr [RSP],RBP\nNOP dword ptr [RAX + RAX*0x1]\nCMP qword ptr [R15],0x0\nJZ 0x00410dc2\nMOV RBX,qword ptr [R15 + 0x8]\nTEST RBX,RBX\nJZ 0x00410d6a\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV R13,qword ptr [RBX]\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x004105e0\nMOV RBP,qword ptr [RBX + 0x8]\nCMP qword ptr [RAX],0x0\nJZ 0x00410d50\nMOV RCX,qword ptr [RAX + 0x8]\nMOV qword ptr [RBX + 0x8],RCX\nMOV qword ptr [RAX + 0x8],RBX\nJMP 0x00410d62\nMOV qword ptr [RAX],R13\nINC qword ptr [R14 + 0x18]\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00411350\nTEST RBP,RBP\nMOV RBX,RBP\nJNZ 0x00410d20\nMOV R13,qword ptr [R15]\nMOV qword ptr [R15 + 0x8],0x0\nTEST R12B,R12B\nMOV RBP,qword ptr [RSP]\nJNZ 0x00410dc2\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x004105e0\nMOV RBX,RAX\nCMP qword ptr [RBX],0x0\nJZ 0x00410db0\nMOV RDI,R14\nCALL 0x00411090\nTEST RAX,RAX\nJZ 0x00410de1\nMOV qword ptr [RAX],R13\nMOV RCX,qword ptr [RBX + 0x8]\nMOV qword ptr [RAX + 0x8],RCX\nMOV qword ptr [RBX + 0x8],RAX\nJMP 0x00410db7\nMOV qword ptr [RBX],R13\nINC qword ptr [R14 + 0x18]\nMOV qword ptr [R15],0x0\nDEC qword ptr [RBP + 0x18]\nADD R15,0x10\nCMP R15,qword ptr [RBP + 0x8]\nJC 0x00410d00\nMOV AL,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EAX,EAX\nJMP 0x00410dd2\n'
p25
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n41 89 d4\n48 89 f5\n49 89 fe\n4c 8b 7d 00\nb0 01\n4c 3b 7d 08\n0f 83 de 00 00 00\n48 89 2c 24\n0f 1f 84 00 00 00 00 00\n49 83 3f 00\n0f 84 b8 00 00 00\n49 8b 5f 08\n48 85 db\n74 57\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 8b 2b\n4c 89 f7\n4c 89 ee\ne8 b2 f8 ff ff\n48 8b 6b 08\n48 83 38 00\n74 18\n48 8b 48 08\n48 89 4b 08\n48 89 58 08\neb 1c\n4c 89 28\n49 ff 46 18\n4c 89 f7\n48 89 de\ne8 ee 05 00 00\n48 85 ed\n48 89 eb\n75 b6\n4d 8b 2f\n49 c7 47 08 00 00 00 00\n45 84 e4\n48 8b 2c 24\n75 44\n4c 89 f7\n4c 89 ee\ne8 57 f8 ff ff\n48 89 c3\n48 83 3b 00\n74 1e\n4c 89 f7\ne8 f6 02 00 00\n48 85 c0\n74 42\n4c 89 28\n48 8b 4b 08\n48 89 48 08\n48 89 43 08\neb 07\n4c 89 2b\n49 ff 46 18\n49 c7 07 00 00 00 00\n48 ff 4d 18\n49 83 c7 10\n4c 3b 7d 08\n0f 82 30 ff ff ff\nb0 01\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 c0\neb ed\n'
p26
S'.text:0000000000410cd0\n.text:0000000000410cd1\n.text:0000000000410cd3\n.text:0000000000410cd5\n.text:0000000000410cd7\n.text:0000000000410cd9\n.text:0000000000410cda\n.text:0000000000410cdb\n.text:0000000000410cde\n.text:0000000000410ce1\n.text:0000000000410ce4\n.text:0000000000410ce8\n.text:0000000000410cea\n.text:0000000000410cee\n.text:0000000000410cf4\n.text:0000000000410cf8\n.text:0000000000410d00\n.text:0000000000410d04\n.text:0000000000410d0a\n.text:0000000000410d0e\n.text:0000000000410d11\n.text:0000000000410d13\n.text:0000000000410d20\n.text:0000000000410d23\n.text:0000000000410d26\n.text:0000000000410d29\n.text:0000000000410d2e\n.text:0000000000410d32\n.text:0000000000410d36\n.text:0000000000410d38\n.text:0000000000410d3c\n.text:0000000000410d40\n.text:0000000000410d44\n.text:0000000000410d50\n.text:0000000000410d53\n.text:0000000000410d57\n.text:0000000000410d5a\n.text:0000000000410d5d\n.text:0000000000410d62\n.text:0000000000410d65\n.text:0000000000410d68\n.text:0000000000410d6a\n.text:0000000000410d6d\n.text:0000000000410d75\n.text:0000000000410d78\n.text:0000000000410d7c\n.text:0000000000410d7e\n.text:0000000000410d81\n.text:0000000000410d84\n.text:0000000000410d89\n.text:0000000000410d8c\n.text:0000000000410d90\n.text:0000000000410d92\n.text:0000000000410d95\n.text:0000000000410d9a\n.text:0000000000410d9d\n.text:0000000000410d9f\n.text:0000000000410da2\n.text:0000000000410da6\n.text:0000000000410daa\n.text:0000000000410dae\n.text:0000000000410db0\n.text:0000000000410db3\n.text:0000000000410db7\n.text:0000000000410dbe\n.text:0000000000410dc2\n.text:0000000000410dc6\n.text:0000000000410dca\n.text:0000000000410dd0\n.text:0000000000410dd2\n.text:0000000000410dd6\n.text:0000000000410dd7\n.text:0000000000410dd9\n.text:0000000000410ddb\n.text:0000000000410ddd\n.text:0000000000410ddf\n.text:0000000000410de0\n.text:0000000000410de1\n.text:0000000000410de3\n'
p27
tp28
sS'pred_user'
p29
(S'\n__stdcall pred_user(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p30
V\u000a_Bool pred_user(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  return (_Bool)(*(__uid_t *)pred_ptr->args == stat_buf->st_uid);\u000a}\u000a\u000a
p31
S'MOV EAX,dword ptr [RDX + 0x38]\nCMP EAX,dword ptr [RSI + 0x1c]\nSETZ AL\nRET\n'
p32
S'8b 42 38\n3b 46 1c\n0f 94 c0\nc3\n'
p33
S'.text:00000000004048b0\n.text:00000000004048b3\n.text:00000000004048b6\n.text:00000000004048b9\n'
p34
tp35
sS'gnu_mbswidth'
p36
(S'\n__stdcall gnu_mbswidth(char * string)\n'
p37
V\u000aint gnu_mbswidth(char *string)\u000a\u000a{\u000a  int iVar1;\u000a  size_t nbytes;\u000a  \u000a  nbytes = strlen(string);\u000a  iVar1 = mbsnwidth(string,nbytes);\u000a  return iVar1;\u000a}\u000a\u000a
p38
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nCALL 0x00402930\nMOV RDI,RBX\nMOV RSI,RAX\nMOV EDX,EBP\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00412980\n'
p39
S'55\n53\n50\n89 f5\n48 89 fb\ne8 c3 ff fe ff\n48 89 df\n48 89 c6\n89 ea\n48 83 c4 08\n5b\n5d\neb 03\n'
p40
S'.text:0000000000412960\n.text:0000000000412961\n.text:0000000000412962\n.text:0000000000412963\n.text:0000000000412965\n.text:0000000000412968\n.text:000000000041296d\n.text:0000000000412970\n.text:0000000000412973\n.text:0000000000412975\n.text:0000000000412979\n.text:000000000041297a\n.text:000000000041297b\n'
p41
tp42
sS'to_uchar'
p43
(S'\n__stdcall to_uchar()\n'
p44
V\u000auchar to_uchar(void)\u000a\u000a{\u000a  uchar in_DIL;\u000a  \u000a  return in_DIL;\u000a}\u000a\u000a
p45
S'MOV EAX,EDI\nRET\n'
p46
S'89 f8\nc3\n'
p47
S'.text:0000000000414fe0\n.text:0000000000414fe2\n'
p48
tp49
sS'strncmp'
p50
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p51
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_0062d068)();\u000a  return iVar1;\u000a}\u000a\u000a
p52
S'JMP qword ptr [0x0062d068]\n'
p53
S'ff 25 d2 a8 22 00\n'
p54
S'.plt:0000000000402790\n'
p55
tp56
sS'quote'
p57
(S'\n__stdcall quote(char * arg)\n'
p58
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p59
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00416580\n'
p60
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p61
S'.text:0000000000416590\n.text:0000000000416593\n.text:0000000000416595\n.text:0000000000416598\n'
p62
tp63
sS'safely_quote_err_filename'
p64
(S'\n__stdcall safely_quote_err_filename(char * arg)\n'
p65
V\u000achar * safely_quote_err_filename(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p66
S'MOV RAX,RSI\nMOV ESI,dword ptr [0x0062f0ac]\nMOV RDX,RAX\nJMP 0x00416290\n'
p67
S'48 89 f0\n8b 35 83 67 22 00\n48 89 c2\ne9 5f d9 00 00\n'
p68
S'.text:0000000000408920\n.text:0000000000408923\n.text:0000000000408929\n.text:000000000040892c\n'
p69
tp70
sS'clone_quoting_options'
p71
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p72
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p73
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00402770\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x62e690\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00417360\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p74
S'55\n41 56\n53\n48 89 fb\ne8 14 d6 fe ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 90 e6 62 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 e5 21 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p75
S'.text:0000000000415150\n.text:0000000000415151\n.text:0000000000415153\n.text:0000000000415154\n.text:0000000000415157\n.text:000000000041515c\n.text:000000000041515f\n.text:0000000000415162\n.text:0000000000415165\n.text:000000000041516a\n.text:000000000041516e\n.text:0000000000415173\n.text:0000000000415176\n.text:000000000041517b\n.text:000000000041517e\n.text:000000000041517f\n.text:0000000000415181\n.text:0000000000415182\n'
p76
tp77
sS'clock_gettime'
p78
(S'\n__stdcall clock_gettime(clockid_t __clock_id, timespec * __tp)\n'
p79
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint clock_gettime(clockid_t __clock_id,timespec *__tp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_clock_gettime_0062d0e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p80
S'JMP qword ptr [0x0062d0e8]\n'
p81
S'ff 25 52 a8 22 00\n'
p82
S'.plt:0000000000402890\n'
p83
tp84
sS'frame_dummy'
p85
(S'\n__stdcall frame_dummy()\n'
p86
V\u000a/* WARNING: Removing unreachable block (ram,0x0040307a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p87
S'MOV EDI,0x62ce08\nCMP qword ptr [RDI],0x0\nJNZ 0x00403070\nJMP 0x00403000\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x0040306b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00403000\n'
p88
S'bf 08 ce 62 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p89
S'.text:0000000000403060\n.text:0000000000403065\n.text:0000000000403069\n.text:000000000040306b\n.text:0000000000403070\n.text:0000000000403075\n.text:0000000000403078\n.text:000000000040307a\n.text:000000000040307b\n.text:000000000040307e\n.text:0000000000403080\n.text:0000000000403081\n'
p90
tp91
sS'yylex'
p92
(S'\n__stdcall yylex(YYSTYPE * lvalp, parser_control * pc)\n'
p93
V\u000aint yylex(YYSTYPE *lvalp,parser_control *pc)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  bool bVar3;\u000a  _Bool _Var4;\u000a  byte bVar5;\u000a  int iVar6;\u000a  long lVar7;\u000a  table *ptVar8;\u000a  int iVar9;\u000a  char *pcVar10;\u000a  char *pcVar11;\u000a  ulong uVar12;\u000a  byte *pbVar13;\u000a  ulong uVar14;\u000a  byte bVar15;\u000a  uint uVar16;\u000a  int iVar17;\u000a  char buff [20];\u000a  byte local_48 [19];\u000a  byte local_35 [5];\u000a  \u000a  pbVar13 = local_48;\u000aLAB_00413e00:\u000a  do {\u000a    bVar5 = *pc->input;\u000a    while (_Var4 = c_isspace(), _Var4 != false) {\u000a      pcVar10 = pc->input;\u000a      pc->input = pcVar10 + 1;\u000a      bVar5 = pcVar10[1];\u000a    }\u000a    if ((uint)bVar5 - 0x30 < 10) {\u000a      if ((bVar5 != 0x2d) && (bVar5 != 0x2b)) {\u000a        iVar9 = 0;\u000a        bVar15 = bVar5;\u000a        break;\u000a      }\u000a    }\u000a    else {\u000a      if ((bVar5 != 0x2b) && (bVar5 != 0x2d)) {\u000a        _Var4 = c_isalpha();\u000a        if (_Var4 != false) {\u000a          do {\u000a            if (pbVar13 < local_35) {\u000a              *pbVar13 = bVar5;\u000a              pbVar13 = pbVar13 + 1;\u000a            }\u000a            pcVar10 = pc->input;\u000a            pc->input = pcVar10 + 1;\u000a            bVar5 = pcVar10[1];\u000a            _Var4 = c_isalpha();\u000a          } while ((_Var4 != false) || (bVar5 == 0x2e));\u000a          *pbVar13 = 0;\u000a          ptVar8 = lookup_word(pc,(char *)local_48);\u000a          if (ptVar8 == (table *)0x0) {\u000a            return 0x3f;\u000a          }\u000a          *(long *)*lvalp = (long)ptVar8->value;\u000a          return ptVar8->type;\u000a        }\u000a        if (bVar5 != 0x28) {\u000a          pc->input = pc->input + 1;\u000a          bVar5 = to_uchar();\u000a          return (uint)bVar5;\u000a        }\u000a        lVar7 = 0;\u000a        do {\u000a          pcVar10 = pc->input;\u000a          pc->input = pcVar10 + 1;\u000a          cVar1 = *pcVar10;\u000a          if (cVar1 == '(') {\u000a            lVar7 = lVar7 + 1;\u000a          }\u000a          else {\u000a            if (cVar1 == ')') {\u000a              lVar7 = lVar7 + -1;\u000a            }\u000a            else {\u000a              if (cVar1 == 0) {\u000a                return 0;\u000a              }\u000a            }\u000a          }\u000a        } while (lVar7 != 0);\u000a        goto LAB_00413e00;\u000a      }\u000a    }\u000a    do {\u000a      pcVar10 = pc->input;\u000a      pc->input = pcVar10 + 1;\u000a      bVar15 = pcVar10[1];\u000a      _Var4 = c_isspace();\u000a    } while (_Var4 != false);\u000a    iVar9 = 1;\u000a    if (bVar5 == 0x2d) {\u000a      iVar9 = -1;\u000a    }\u000a  } while (9 < (uint)bVar15 - 0x30);\u000a  pcVar10 = pc->input;\u000a  uVar14 = 0;\u000a  while (uVar12 = (uVar14 - 0x30) + (ulong)bVar15, uVar14 <= uVar12) {\u000a    bVar15 = pcVar10[1];\u000a    pcVar10 = pcVar10 + 1;\u000a    bVar2 = (uint)bVar15 - 0x30 < 10;\u000a    bVar3 = bVar2 && 0x1999999999999999 < uVar12;\u000a    if (bVar2 && 0x1999999999999999 < uVar12) goto LAB_00413f15;\u000a    uVar14 = uVar12 * 10;\u000a  }\u000a  bVar3 = true;\u000a  uVar12 = uVar14;\u000aLAB_00413f15:\u000a  if (bVar3 != true) {\u000a    return 0x3f;\u000a  }\u000a  if (((bVar15 | 2) != 0x2e) || (9 < (int)pcVar10[1] - 0x30U)) {\u000a    (*lvalp)[0] = (byte)((uint)iVar9 >> 0x1f);\u000a    if (iVar9 < 0) {\u000a      *(ulong *)(*lvalp + 8) = -uVar12;\u000a      if (-uVar12 != 0 && (long)uVar12 < 1) {\u000a        return 0x3f;\u000a      }\u000a    }\u000a    else {\u000a      *(ulong *)(*lvalp + 8) = uVar12;\u000a      if ((long)uVar12 < 0) {\u000a        return 0x3f;\u000a      }\u000a    }\u000a    *(char **)(*lvalp + 0x10) = pcVar10 + -(long)pc->input;\u000a    pc->input = pcVar10;\u000a    return (uint)(iVar9 == 0) | 0x112;\u000a  }\u000a  if (iVar9 < 0) {\u000a    uVar14 = -uVar12;\u000a    if (uVar14 != 0 && (long)uVar12 < 1) {\u000a      return 0x3f;\u000a    }\u000a  }\u000a  else {\u000a    uVar14 = uVar12;\u000a    if ((long)uVar12 < 0) {\u000a      return 0x3f;\u000a    }\u000a  }\u000a  pcVar11 = pcVar10 + 2;\u000a  iVar17 = (int)pcVar10[1] + -0x30;\u000a  iVar6 = 8;\u000a  do {\u000a    uVar16 = (int)*pcVar11 - 0x30;\u000a    pcVar10 = pcVar11 + 1;\u000a    if (9 < uVar16) {\u000a      uVar16 = 0;\u000a      pcVar10 = pcVar11;\u000a    }\u000a    pcVar11 = pcVar10;\u000a    iVar17 = uVar16 + iVar17 * 10;\u000a    iVar6 = iVar6 + -1;\u000a  } while (iVar6 != 0);\u000a  if (iVar9 < 0) {\u000a    cVar1 = *pcVar11;\u000a    while ((int)cVar1 - 0x30U < 10) {\u000a      if (cVar1 != '0') {\u000a        iVar17 = iVar17 + 1;\u000a        break;\u000a      }\u000a      cVar1 = pcVar11[1];\u000a      pcVar11 = pcVar11 + 1;\u000a    }\u000a  }\u000a  pcVar11 = pcVar11 + -1;\u000a  do {\u000a    pcVar10 = pcVar11 + 1;\u000a    pcVar11 = pcVar11 + 1;\u000a  } while ((int)*pcVar10 - 0x30U < 10);\u000a  if ((iVar9 < 0) && (iVar17 != 0)) {\u000a    if (0 < (long)uVar14) {\u000a      return 0x3f;\u000a    }\u000a    uVar14 = uVar14 - 1;\u000a    iVar17 = 1000000000 - iVar17;\u000a  }\u000a  *(ulong *)*lvalp = uVar14;\u000a  *(long *)(*lvalp + 8) = (long)iVar17;\u000a  pc->input = pcVar11;\u000a  return (uint)(iVar9 == 0) | 0x114;\u000a}\u000a\u000a
p94
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R15,RSI\nMOV R14,RDI\nMOV R13D,0xffffffff\nJMP 0x00413e00\nMOV EDI,EBX\nCALL 0x0041b970\nTEST AL,AL\nJNZ 0x00413f63\nCMP R12B,0x28\nJNZ 0x00413ffc\nXOR EAX,EAX\nNOP word ptr [RAX + RAX*0x1]\nMOV RCX,qword ptr [R15]\nLEA RDX,[RCX + 0x1]\nMOV qword ptr [R15],RDX\nMOVZX ECX,byte ptr [RCX]\nCMP CL,0x28\nJZ 0x00413de0\nCMP CL,0x29\nJZ 0x00413df0\nTEST CL,CL\nJNZ 0x00413df3\nJMP 0x00413e98\nINC RAX\nJMP 0x00413df3\nDEC RAX\nTEST RAX,RAX\nJNZ 0x00413dc0\nNOP dword ptr [RAX + RAX*0x1]\nMOV RAX,qword ptr [R15]\nMOV R12B,byte ptr [RAX]\nJMP 0x00413e1f\nMOV RAX,qword ptr [R15]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [R15],RCX\nMOVZX R12D,byte ptr [RAX + 0x1]\nMOVZX EBX,R12B\nMOV EDI,EBX\nCALL 0x0041ba20\nTEST AL,AL\nJNZ 0x00413e10\nLEA EAX,[RBX + -0x30]\nCMP EAX,0xa\nJNC 0x00413e50\nCMP R12B,0x2d\nJZ 0x00413e60\nCMP R12B,0x2b\nJZ 0x00413e60\nJMP 0x00413e9f\nCMP R12B,0x2b\nJZ 0x00413e60\nCMP R12B,0x2d\nJNZ 0x00413d9c\nMOV RAX,qword ptr [R15]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [R15],RCX\nMOV BPL,byte ptr [RAX + 0x1]\nMOVZX EBX,BPL\nMOV EDI,EBX\nCALL 0x0041ba20\nTEST AL,AL\nJNZ 0x00413e60\nCMP R12B,0x2d\nMOV ECX,0x1\nCMOVZ ECX,R13D\nADD EBX,-0x30\nCMP EBX,0x9\nJA 0x00413e00\nJMP 0x00413ea4\nXOR EAX,EAX\nJMP 0x004140d6\nXOR ECX,ECX\nMOV BPL,R12B\nMOV RDX,qword ptr [R15]\nXOR ESI,ESI\nMOV RAX,0x1999999999999999\nJMP 0x00413ec7\nADD RBX,RBX\nLEA RSI,[RBX + RBX*0x4]\nMOVZX EDI,BPL\nLEA RBX,[RSI + RDI*0x1 + -0x30]\nMOV EDI,0x1\nCMP RBX,RSI\nJNC 0x00413ef0\nMOV RBX,RSI\nAND DIL,0xf\nJZ 0x00413ec0\nJMP 0x00413f15\nMOVZX EBP,byte ptr [RDX + 0x1]\nINC RDX\nMOV ESI,EBP\nADD ESI,-0x30\nMOV EDI,0x8\nCMP ESI,0x9\nJA 0x00413f0f\nXOR EDI,EDI\nCMP RBX,RAX\nSETA DIL\nAND DIL,0xf\nJZ 0x00413ec0\nCMP DIL,0x8\nJNZ 0x00413fbf\nOR BPL,0x2\nCMP BPL,0x2e\nJNZ 0x00413f48\nMOVSX EAX,byte ptr [RDX + 0x1]\nADD EAX,-0x30\nCMP EAX,0x9\nJA 0x00413f48\nTEST ECX,ECX\nJS 0x00414016\nTEST RBX,RBX\nJNS 0x00414027\nJMP 0x00413fbf\nMOV EAX,ECX\nSHR EAX,0x1f\nMOV byte ptr [R14],AL\nTEST ECX,ECX\nJS 0x00413fc9\nMOV qword ptr [R14 + 0x8],RBX\nTEST RBX,RBX\nJNS 0x00413fde\nJMP 0x00413fbf\nMOV RBX,RSP\nLEA RBP,[RSP + 0x13]\nNOP dword ptr [RAX + RAX*0x1]\nCMP RBX,RBP\nJNC 0x00413f7b\nMOV byte ptr [RBX],R12B\nINC RBX\nMOV RAX,qword ptr [R15]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [R15],RCX\nMOVZX R12D,byte ptr [RAX + 0x1]\nMOVZX EDI,R12B\nCALL 0x0041b970\nTEST AL,AL\nJNZ 0x00413f70\nCMP R12B,0x2e\nJZ 0x00413f70\nMOV byte ptr [RBX],0x0\nMOV RSI,RSP\nMOV RDI,R15\nCALL 0x00414db0\nTEST RAX,RAX\nJZ 0x00413fbf\nMOVSXD RCX,dword ptr [RAX + 0xc]\nMOV qword ptr [R14],RCX\nMOV EAX,dword ptr [RAX + 0x8]\nJMP 0x004140d6\nMOV EAX,0x3f\nJMP 0x004140d6\nNEG RBX\nMOV qword ptr [R14 + 0x8],RBX\nMOV EAX,0x3f\nTEST RBX,RBX\nJG 0x004140d6\nMOV RAX,RDX\nSUB RAX,qword ptr [R15]\nMOV qword ptr [R14 + 0x10],RAX\nMOV qword ptr [R15],RDX\nXOR EAX,EAX\nTEST ECX,ECX\nSETZ AL\nOR EAX,0x112\nJMP 0x004140d6\nMOV RAX,qword ptr [R15]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [R15],RCX\nMOVSX EDI,byte ptr [RAX]\nCALL 0x00414fe0\nMOVZX EAX,AL\nJMP 0x004140d6\nNEG RBX\nMOV EAX,0x3f\nTEST RBX,RBX\nJG 0x004140d6\nMOVSX EDI,byte ptr [RDX + 0x1]\nADD RDX,0x2\nADD EDI,-0x30\nMOV EAX,0x8\nXOR R8D,R8D\nNOP word ptr [RAX + RAX*0x1]\nMOV RSI,RDX\nLEA EDI,[RDI + RDI*0x4]\nMOVSX EBP,byte ptr [RSI]\nADD EBP,-0x30\nLEA RDX,[RSI + 0x1]\nCMP EBP,0xa\nCMOVNC RDX,RSI\nCMOVNC EBP,R8D\nLEA EDI,[RBP + RDI*0x2]\nDEC EAX\nJNZ 0x00414040\nTEST ECX,ECX\nJNS 0x0041408b\nMOVSX EAX,byte ptr [RDX]\nLEA ESI,[RAX + -0x30]\nCMP ESI,0x9\nJA 0x0041408b\nCMP AL,0x30\nJNZ 0x00414089\nMOVSX EAX,byte ptr [RDX + 0x1]\nINC RDX\nMOV ESI,EAX\nADD ESI,-0x30\nCMP ESI,0xa\nJC 0x00414072\nJMP 0x0041408b\nINC EDI\nDEC RDX\nNOP\nMOVSX EAX,byte ptr [RDX + 0x1]\nINC RDX\nADD EAX,-0x30\nCMP EAX,0xa\nJC 0x00414090\nTEST ECX,ECX\nJNS 0x004140bd\nTEST EDI,EDI\nJZ 0x004140bd\nMOV EAX,0x3f\nTEST RBX,RBX\nJG 0x004140d6\nDEC RBX\nMOV EAX,0x3b9aca00\nSUB EAX,EDI\nMOV EDI,EAX\nMOV qword ptr [R14],RBX\nMOVSXD RAX,EDI\nMOV qword ptr [R14 + 0x8],RAX\nMOV qword ptr [R15],RDX\nXOR EAX,EAX\nTEST ECX,ECX\nSETZ AL\nOR EAX,0x114\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p95
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 f7\n49 89 fe\n41 bd ff ff ff ff\neb 64\n89 df\ne8 cd 7b 00 00\n84 c0\n0f 85 b8 01 00 00\n41 80 fc 28\n0f 85 47 02 00 00\n31 c0\n66 0f 1f 84 00 00 00 00 00\n49 8b 0f\n48 8d 51 01\n49 89 17\n0f b6 09\n80 f9 28\n74 0e\n80 f9 29\n74 19\n84 c9\n75 18\ne9 b8 00 00 00\n48 ff c0\neb 0e\n48 ff c8\n48 85 c0\n75 c8\n0f 1f 84 00 00 00 00 00\n49 8b 07\n44 8a 20\neb 17\n49 8b 07\n48 8d 48 01\n49 89 0f\n44 0f b6 60 01\n41 0f b6 dc\n89 df\ne8 f6 7b 00 00\n84 c0\n75 e2\n8d 43 d0\n83 f8 0a\n73 1a\n41 80 fc 2d\n74 24\n41 80 fc 2b\n74 1e\neb 5b\n41 80 fc 2b\n74 0a\n41 80 fc 2d\n0f 85 3c ff ff ff\n49 8b 07\n48 8d 48 01\n49 89 0f\n40 8a 68 01\n40 0f b6 dd\n89 df\ne8 a7 7b 00 00\n84 c0\n75 e3\n41 80 fc 2d\nb9 01 00 00 00\n41 0f 44 cd\n83 c3 d0\n83 fb 09\n0f 87 6a ff ff ff\neb 0c\n31 c0\ne9 37 02 00 00\n31 c9\n44 88 e5\n49 8b 17\n31 f6\n48 b8 99 99 99 99 99 99 99 19\neb 12\n48 01 db\n48 8d 34 9b\n40 0f b6 fd\n48 8d 5c 3e d0\nbf 01 00 00 00\n48 39 f3\n73 16\n48 89 f3\n40 80 e7 0f\n74 dd\neb 30\n0f b6 6a 01\n48 ff c2\n89 ee\n83 c6 d0\nbf 08 00 00 00\n83 fe 09\n77 09\n31 ff\n48 39 c3\n40 0f 97 c7\n40 80 e7 0f\n74 ab\n40 80 ff 08\n0f 85 a0 00 00 00\n40 80 cd 02\n40 80 fd 2e\n75 1f\n0f be 42 01\n83 c0 d0\n83 f8 09\n77 13\n85 c9\n0f 88 d9 00 00 00\n48 85 db\n0f 89 e1 00 00 00\neb 77\n89 c8\nc1 e8 1f\n41 88 06\n85 c9\n78 75\n49 89 5e 08\n48 85 db\n0f 89 7d 00 00 00\neb 5c\n48 89 e3\n48 8d 6c 24 13\n0f 1f 44 00 00\n48 39 eb\n73 06\n44 88 23\n48 ff c3\n49 8b 07\n48 8d 48 01\n49 89 0f\n44 0f b6 60 01\n41 0f b6 fc\ne8 dd 79 00 00\n84 c0\n75 d9\n41 80 fc 2e\n74 d3\nc6 03 00\n48 89 e6\n4c 89 ff\ne8 05 0e 00 00\n48 85 c0\n74 0f\n48 63 48 0c\n49 89 0e\n8b 40 08\ne9 17 01 00 00\nb8 3f 00 00 00\ne9 0d 01 00 00\n48 f7 db\n49 89 5e 08\nb8 3f 00 00 00\n48 85 db\n0f 8f f8 00 00 00\n48 89 d0\n49 2b 07\n49 89 46 10\n49 89 17\n31 c0\n85 c9\n0f 94 c0\n0d 12 01 00 00\ne9 da 00 00 00\n49 8b 07\n48 8d 48 01\n49 89 0f\n0f be 38\ne8 d2 0f 00 00\n0f b6 c0\ne9 c0 00 00 00\n48 f7 db\nb8 3f 00 00 00\n48 85 db\n0f 8f af 00 00 00\n0f be 7a 01\n48 83 c2 02\n83 c7 d0\nb8 08 00 00 00\n45 31 c0\n66 0f 1f 44 00 00\n48 89 d6\n8d 3c bf\n0f be 2e\n83 c5 d0\n48 8d 56 01\n83 fd 0a\n48 0f 43 d6\n41 0f 43 e8\n8d 7c 7d 00\nff c8\n75 dd\n85 c9\n79 24\n0f be 02\n8d 70 d0\n83 fe 09\n77 19\n3c 30\n75 13\n0f be 42 01\n48 ff c2\n89 c6\n83 c6 d0\n83 fe 0a\n72 eb\neb 02\nff c7\n48 ff ca\n66 90\n0f be 42 01\n48 ff c2\n83 c0 d0\n83 f8 0a\n72 f1\n85 c9\n79 1a\n85 ff\n74 16\nb8 3f 00 00 00\n48 85 db\n7f 25\n48 ff cb\nb8 00 ca 9a 3b\n29 f8\n89 c7\n49 89 1e\n48 63 c7\n49 89 46 08\n49 89 17\n31 c0\n85 c9\n0f 94 c0\n0d 14 01 00 00\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p96
S'.text:0000000000413d80\n.text:0000000000413d81\n.text:0000000000413d83\n.text:0000000000413d85\n.text:0000000000413d87\n.text:0000000000413d89\n.text:0000000000413d8a\n.text:0000000000413d8e\n.text:0000000000413d91\n.text:0000000000413d94\n.text:0000000000413d9a\n.text:0000000000413d9c\n.text:0000000000413d9e\n.text:0000000000413da3\n.text:0000000000413da5\n.text:0000000000413dab\n.text:0000000000413daf\n.text:0000000000413db5\n.text:0000000000413db7\n.text:0000000000413dc0\n.text:0000000000413dc3\n.text:0000000000413dc7\n.text:0000000000413dca\n.text:0000000000413dcd\n.text:0000000000413dd0\n.text:0000000000413dd2\n.text:0000000000413dd5\n.text:0000000000413dd7\n.text:0000000000413dd9\n.text:0000000000413ddb\n.text:0000000000413de0\n.text:0000000000413de3\n.text:0000000000413df0\n.text:0000000000413df3\n.text:0000000000413df6\n.text:0000000000413df8\n.text:0000000000413e00\n.text:0000000000413e03\n.text:0000000000413e06\n.text:0000000000413e10\n.text:0000000000413e13\n.text:0000000000413e17\n.text:0000000000413e1a\n.text:0000000000413e1f\n.text:0000000000413e23\n.text:0000000000413e25\n.text:0000000000413e2a\n.text:0000000000413e2c\n.text:0000000000413e2e\n.text:0000000000413e31\n.text:0000000000413e34\n.text:0000000000413e36\n.text:0000000000413e3a\n.text:0000000000413e3c\n.text:0000000000413e40\n.text:0000000000413e42\n.text:0000000000413e50\n.text:0000000000413e54\n.text:0000000000413e56\n.text:0000000000413e5a\n.text:0000000000413e60\n.text:0000000000413e63\n.text:0000000000413e67\n.text:0000000000413e6a\n.text:0000000000413e6e\n.text:0000000000413e72\n.text:0000000000413e74\n.text:0000000000413e79\n.text:0000000000413e7b\n.text:0000000000413e7d\n.text:0000000000413e81\n.text:0000000000413e86\n.text:0000000000413e8a\n.text:0000000000413e8d\n.text:0000000000413e90\n.text:0000000000413e96\n.text:0000000000413e98\n.text:0000000000413e9a\n.text:0000000000413e9f\n.text:0000000000413ea1\n.text:0000000000413ea4\n.text:0000000000413ea7\n.text:0000000000413ea9\n.text:0000000000413eb3\n.text:0000000000413ec0\n.text:0000000000413ec3\n.text:0000000000413ec7\n.text:0000000000413ecb\n.text:0000000000413ed0\n.text:0000000000413ed5\n.text:0000000000413ed8\n.text:0000000000413eda\n.text:0000000000413edd\n.text:0000000000413ee1\n.text:0000000000413ee3\n.text:0000000000413ef0\n.text:0000000000413ef4\n.text:0000000000413ef7\n.text:0000000000413ef9\n.text:0000000000413efc\n.text:0000000000413f01\n.text:0000000000413f04\n.text:0000000000413f06\n.text:0000000000413f08\n.text:0000000000413f0b\n.text:0000000000413f0f\n.text:0000000000413f13\n.text:0000000000413f15\n.text:0000000000413f19\n.text:0000000000413f1f\n.text:0000000000413f23\n.text:0000000000413f27\n.text:0000000000413f29\n.text:0000000000413f2d\n.text:0000000000413f30\n.text:0000000000413f33\n.text:0000000000413f35\n.text:0000000000413f37\n.text:0000000000413f3d\n.text:0000000000413f40\n.text:0000000000413f46\n.text:0000000000413f48\n.text:0000000000413f4a\n.text:0000000000413f4d\n.text:0000000000413f50\n.text:0000000000413f52\n.text:0000000000413f54\n.text:0000000000413f58\n.text:0000000000413f5b\n.text:0000000000413f61\n.text:0000000000413f63\n.text:0000000000413f66\n.text:0000000000413f6b\n.text:0000000000413f70\n.text:0000000000413f73\n.text:0000000000413f75\n.text:0000000000413f78\n.text:0000000000413f7b\n.text:0000000000413f7e\n.text:0000000000413f82\n.text:0000000000413f85\n.text:0000000000413f8a\n.text:0000000000413f8e\n.text:0000000000413f93\n.text:0000000000413f95\n.text:0000000000413f97\n.text:0000000000413f9b\n.text:0000000000413f9d\n.text:0000000000413fa0\n.text:0000000000413fa3\n.text:0000000000413fa6\n.text:0000000000413fab\n.text:0000000000413fae\n.text:0000000000413fb0\n.text:0000000000413fb4\n.text:0000000000413fb7\n.text:0000000000413fba\n.text:0000000000413fbf\n.text:0000000000413fc4\n.text:0000000000413fc9\n.text:0000000000413fcc\n.text:0000000000413fd0\n.text:0000000000413fd5\n.text:0000000000413fd8\n.text:0000000000413fde\n.text:0000000000413fe1\n.text:0000000000413fe4\n.text:0000000000413fe8\n.text:0000000000413feb\n.text:0000000000413fed\n.text:0000000000413fef\n.text:0000000000413ff2\n.text:0000000000413ff7\n.text:0000000000413ffc\n.text:0000000000413fff\n.text:0000000000414003\n.text:0000000000414006\n.text:0000000000414009\n.text:000000000041400e\n.text:0000000000414011\n.text:0000000000414016\n.text:0000000000414019\n.text:000000000041401e\n.text:0000000000414021\n.text:0000000000414027\n.text:000000000041402b\n.text:000000000041402f\n.text:0000000000414032\n.text:0000000000414037\n.text:000000000041403a\n.text:0000000000414040\n.text:0000000000414043\n.text:0000000000414046\n.text:0000000000414049\n.text:000000000041404c\n.text:0000000000414050\n.text:0000000000414053\n.text:0000000000414057\n.text:000000000041405b\n.text:000000000041405f\n.text:0000000000414061\n.text:0000000000414063\n.text:0000000000414065\n.text:0000000000414067\n.text:000000000041406a\n.text:000000000041406d\n.text:0000000000414070\n.text:0000000000414072\n.text:0000000000414074\n.text:0000000000414076\n.text:000000000041407a\n.text:000000000041407d\n.text:000000000041407f\n.text:0000000000414082\n.text:0000000000414085\n.text:0000000000414087\n.text:0000000000414089\n.text:000000000041408b\n.text:000000000041408e\n.text:0000000000414090\n.text:0000000000414094\n.text:0000000000414097\n.text:000000000041409a\n.text:000000000041409d\n.text:000000000041409f\n.text:00000000004140a1\n.text:00000000004140a3\n.text:00000000004140a5\n.text:00000000004140a7\n.text:00000000004140ac\n.text:00000000004140af\n.text:00000000004140b1\n.text:00000000004140b4\n.text:00000000004140b9\n.text:00000000004140bb\n.text:00000000004140bd\n.text:00000000004140c0\n.text:00000000004140c3\n.text:00000000004140c7\n.text:00000000004140ca\n.text:00000000004140cc\n.text:00000000004140ce\n.text:00000000004140d1\n.text:00000000004140d6\n.text:00000000004140da\n.text:00000000004140db\n.text:00000000004140dd\n.text:00000000004140df\n.text:00000000004140e1\n.text:00000000004140e3\n.text:00000000004140e4\n'
p97
tp98
sS'unibyte_qmark_chars'
p99
(S'\n__stdcall unibyte_qmark_chars(char * buf, size_t len)\n'
p100
V\u000asize_t unibyte_qmark_chars(char *buf,size_t len)\u000a\u000a{\u000a  char *pcVar1;\u000a  ushort *puVar2;\u000a  byte bVar3;\u000a  ushort **ppuVar4;\u000a  \u000a  if (0 < (long)len) {\u000a    ppuVar4 = __ctype_b_loc();\u000a    pcVar1 = buf + len;\u000a    do {\u000a      puVar2 = *ppuVar4;\u000a      bVar3 = to_uchar();\u000a      if ((*(byte *)((long)puVar2 + (ulong)bVar3 * 2 + 1) & 0x40) == 0) {\u000a        *buf = '?';\u000a      }\u000a      buf = buf + 1;\u000a    } while (buf < pcVar1);\u000a  }\u000a  return len;\u000a}\u000a\u000a
p101
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R14,RSI\nMOV RBX,RDI\nTEST R14,R14\nJLE 0x0040f851\nCALL 0x00402f80\nMOV R15,RAX\nLEA R12,[RBX + R14*0x1]\nMOV R13,qword ptr [R15]\nMOVSX EDI,byte ptr [RBX]\nCALL 0x0040f860\nMOVZX EAX,AL\nTEST byte ptr [R13 + RAX*0x2 + 0x1],0x40\nJNZ 0x0040f849\nMOV byte ptr [RBX],0x3f\nINC RBX\nCMP RBX,R12\nJC 0x0040f830\nMOV RAX,R14\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p102
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 f6\n48 89 fb\n4d 85 f6\n7e 2d\ne8 57 37 ff ff\n49 89 c7\n4e 8d 24 33\n4d 8b 2f\n0f be 3b\ne8 25 00 00 00\n0f b6 c0\n41 f6 44 45 01 40\n75 03\nc6 03 3f\n48 ff c3\n4c 39 e3\n72 df\n4c 89 f0\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p103
S'.text:000000000040f810\n.text:000000000040f812\n.text:000000000040f814\n.text:000000000040f816\n.text:000000000040f818\n.text:000000000040f819\n.text:000000000040f81c\n.text:000000000040f81f\n.text:000000000040f822\n.text:000000000040f824\n.text:000000000040f829\n.text:000000000040f82c\n.text:000000000040f830\n.text:000000000040f833\n.text:000000000040f836\n.text:000000000040f83b\n.text:000000000040f83e\n.text:000000000040f844\n.text:000000000040f846\n.text:000000000040f849\n.text:000000000040f84c\n.text:000000000040f84f\n.text:000000000040f851\n.text:000000000040f854\n.text:000000000040f855\n.text:000000000040f857\n.text:000000000040f859\n.text:000000000040f85b\n.text:000000000040f85d\n'
p104
tp105
sS'prec_name'
p106
(S'\n__stdcall prec_name()\n'
p107
V\u000achar * prec_name(void)\u000a\u000a{\u000a  long lVar1;\u000a  prec_assoc *ppVar2;\u000a  short in_DI;\u000a  \u000a  ppVar2 = prec_table;\u000a  lVar1 = 0;\u000a  do {\u000a    if (ppVar2->prec == in_DI) goto LAB_00406d47;\u000a    lVar1 = lVar1 + 1;\u000a    ppVar2 = ppVar2 + 1;\u000a  } while (lVar1 != 6);\u000a  lVar1 = 6;\u000aLAB_00406d47:\u000a  return prec_table[lVar1].prec_name;\u000a}\u000a\u000a
p108
S'MOV ECX,0x41d450\nXOR EAX,EAX\nNOP word ptr [RAX + RAX*0x1]\nCMP word ptr [RCX],DI\nJZ 0x00406d47\nINC RAX\nADD RCX,0x10\nCMP RAX,0x6\nJNZ 0x00406d30\nMOV EAX,0x6\nSHL RAX,0x4\nMOV RAX,qword ptr [0x41d458 + RAX]\nRET\n'
p109
S'b9 50 d4 41 00\n31 c0\n66 0f 1f 84 00 00 00 00 00\n66 39 39\n74 12\n48 ff c0\n48 83 c1 10\n48 83 f8 06\n75 ee\nb8 06 00 00 00\n48 c1 e0 04\n48 8b 80 58 d4 41 00\nc3\n'
p110
S'.text:0000000000406d20\n.text:0000000000406d25\n.text:0000000000406d27\n.text:0000000000406d30\n.text:0000000000406d33\n.text:0000000000406d35\n.text:0000000000406d38\n.text:0000000000406d3c\n.text:0000000000406d40\n.text:0000000000406d42\n.text:0000000000406d47\n.text:0000000000406d4b\n.text:0000000000406d52\n'
p111
tp112
sS'parse_or'
p113
(S'\n__stdcall parse_or(parser_table * entry, char * * argv, int * arg_ptr)\n'
p114
V\u000a_Bool parse_or(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  predicate *ppVar1;\u000a  \u000a  ppVar1 = get_new_pred_noarg(entry);\u000a  ppVar1->pred_func = pred_or;\u000a  ppVar1->p_type = BI_OP;\u000a  ppVar1->p_prec = OR_PREC;\u000a  *(undefined2 *)&ppVar1->need_stat = 0;\u000a  return true;\u000a}\u000a\u000a
p115
S'PUSH RAX\nCALL 0x00406b00\nMOV qword ptr [RAX],0x404500\nMOV dword ptr [RAX + 0x10],0x3\nMOV dword ptr [RAX + 0x14],0x2\nMOV word ptr [RAX + 0x1a],0x0\nMOV AL,0x1\nPOP RCX\nRET\n'
p116
S'50\ne8 1a ae ff ff\n48 c7 00 00 45 40 00\nc7 40 10 03 00 00 00\nc7 40 14 02 00 00 00\n66 c7 40 1a 00 00\nb0 01\n59\nc3\n'
p117
S'.text:000000000040bce0\n.text:000000000040bce1\n.text:000000000040bce6\n.text:000000000040bced\n.text:000000000040bcf4\n.text:000000000040bcfb\n.text:000000000040bd01\n.text:000000000040bd03\n.text:000000000040bd04\n'
p118
tp119
sS'parse_ok'
p120
(S'\n__stdcall parse_ok(parser_table * entry, char * * argv, int * arg_ptr)\n'
p121
V\u000a_Bool parse_ok(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = insert_exec_ok("-ok",entry,argv,arg_ptr);\u000a  return _Var1;\u000a}\u000a\u000a
p122
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nMOV EDI,0x41d1a8\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x0040ca60\n'
p123
S'48 89 d0\n48 89 f1\n48 89 fa\nbf a8 d1 41 00\n48 89 d6\n48 89 ca\n48 89 c1\ne9 34 0d 00 00\n'
p124
S'.text:000000000040bd10\n.text:000000000040bd13\n.text:000000000040bd16\n.text:000000000040bd19\n.text:000000000040bd1e\n.text:000000000040bd21\n.text:000000000040bd24\n.text:000000000040bd27\n'
p125
tp126
sS'pred_newerXY'
p127
(S'\n__stdcall pred_newerXY(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p128
V\u000a_Bool pred_newerXY(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *pcVar3;\u000a  timespec tVar4;\u000a  \u000a  if (*(int *)(pred_ptr->args + 4) != 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("COMP_GT == pred_ptr->args.reftime.kind","pred.c",0x2bd,\u000a                  "_Bool pred_newerXY(const char *, struct stat *, struct predicate *)");\u000a  }\u000a  switch(*(undefined4 *)pred_ptr->args) {\u000a  case 0:\u000a    get_stat_atime(stat_buf);\u000a    break;\u000a  case 1:\u000a    tVar4 = get_stat_birthtime(stat_buf);\u000a    if (SUB168((undefined  [16])tVar4 >> 0x40,0) < 0) {\u000a      uVar2 = dcgettext(0,"WARNING: cannot determine birth time of file %s",5);\u000a      pcVar3 = safely_quote_err_filename((char *)0x0);\u000a      error(0,0,uVar2,pcVar3);\u000a      return false;\u000a    }\u000a    break;\u000a  case 2:\u000a    get_stat_ctime(stat_buf);\u000a    break;\u000a  case 3:\u000a    get_stat_mtime(stat_buf);\u000a    break;\u000a  case 4:\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("pred_ptr->args.reftime.xval != XVAL_TIME","pred.c",0x2c2,\u000a                  "_Bool pred_newerXY(const char *, struct stat *, struct predicate *)");\u000a  default:\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("collected","pred.c",0x2e1,\u000a                  "_Bool pred_newerXY(const char *, struct stat *, struct predicate *)");\u000a  }\u000a  iVar1 = compare_ts();\u000a  return (_Bool)(0 < iVar1);\u000a}\u000a\u000a
p129
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDX\nMOV R14,RDI\nCMP dword ptr [R15 + 0x3c],0x0\nJNZ 0x004043ca\nMOV EAX,dword ptr [R15 + 0x38]\nCMP RAX,0x4\nJA 0x004043e3\nJMP qword ptr [0x41ca10 + RAX*0x8]\nMOV RDI,RSI\nCALL 0x00416c70\nJMP 0x004043a7\nMOV RDI,RSI\nCALL 0x00416c80\nJMP 0x004043a7\nMOV RDI,RSI\nCALL 0x00416ca0\nTEST RDX,RDX\nJNS 0x004043a7\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x41ceb0\nMOV EDX,0x5\nCALL 0x00402910\nMOV R15,RAX\nXOR EDI,EDI\nMOV RSI,R14\nCALL 0x00408920\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R15\nCALL 0x00402d90\nJMP 0x004043c2\nMOV RDI,RSI\nCALL 0x00416c90\nMOV RBX,qword ptr [R15 + 0x40]\nMOV RCX,qword ptr [R15 + 0x48]\nMOV RDI,RAX\nMOV RSI,RDX\nMOV RDX,RBX\nCALL 0x00404ac0\nTEST EAX,EAX\nSETG BL\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOV EDI,0x41cce5\nMOV ESI,0x41cd0c\nMOV EDX,0x2bd\nMOV ECX,0x41ce43\nCALL 0x00402a40\nMOV EDI,0x41cee0\nMOV ESI,0x41cd0c\nMOV EDX,0x2e1\nMOV ECX,0x41ce43\nCALL 0x00402a40\nMOV EDI,0x41ce87\nMOV ESI,0x41cd0c\nMOV EDX,0x2c2\nMOV ECX,0x41ce43\nCALL 0x00402a40\n'
p130
S'41 57\n41 56\n53\n49 89 d7\n49 89 fe\n41 83 7f 3c 00\n0f 85 94 00 00 00\n41 8b 47 38\n48 83 f8 04\n0f 87 9f 00 00 00\nff 24 c5 10 ca 41 00\n48 89 f7\ne8 1d 29 01 00\neb 52\n48 89 f7\ne8 23 29 01 00\neb 48\n48 89 f7\ne8 39 29 01 00\n48 85 d2\n79 3b\n31 db\n31 ff\nbe b0 ce 41 00\nba 05 00 00 00\ne8 91 e5 ff ff\n49 89 c7\n31 ff\n4c 89 f6\ne8 94 45 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n4c 89 fa\ne8 f3 e9 ff ff\neb 23\n48 89 f7\ne8 e9 28 01 00\n49 8b 5f 40\n49 8b 4f 48\n48 89 c7\n48 89 d6\n48 89 da\ne8 03 07 00 00\n85 c0\n0f 9f c3\n89 d8\n5b\n41 5e\n41 5f\nc3\nbf e5 cc 41 00\nbe 0c cd 41 00\nba bd 02 00 00\nb9 43 ce 41 00\ne8 5d e6 ff ff\nbf e0 ce 41 00\nbe 0c cd 41 00\nba e1 02 00 00\nb9 43 ce 41 00\ne8 44 e6 ff ff\nbf 87 ce 41 00\nbe 0c cd 41 00\nba c2 02 00 00\nb9 43 ce 41 00\ne8 2b e6 ff ff\n'
p131
S'.text:0000000000404320\n.text:0000000000404322\n.text:0000000000404324\n.text:0000000000404325\n.text:0000000000404328\n.text:000000000040432b\n.text:0000000000404330\n.text:0000000000404336\n.text:000000000040433a\n.text:000000000040433e\n.text:0000000000404344\n.text:000000000040434b\n.text:000000000040434e\n.text:0000000000404353\n.text:0000000000404355\n.text:0000000000404358\n.text:000000000040435d\n.text:000000000040435f\n.text:0000000000404362\n.text:0000000000404367\n.text:000000000040436a\n.text:000000000040436c\n.text:000000000040436e\n.text:0000000000404370\n.text:0000000000404375\n.text:000000000040437a\n.text:000000000040437f\n.text:0000000000404382\n.text:0000000000404384\n.text:0000000000404387\n.text:000000000040438c\n.text:000000000040438f\n.text:0000000000404391\n.text:0000000000404393\n.text:0000000000404395\n.text:0000000000404398\n.text:000000000040439d\n.text:000000000040439f\n.text:00000000004043a2\n.text:00000000004043a7\n.text:00000000004043ab\n.text:00000000004043af\n.text:00000000004043b2\n.text:00000000004043b5\n.text:00000000004043b8\n.text:00000000004043bd\n.text:00000000004043bf\n.text:00000000004043c2\n.text:00000000004043c4\n.text:00000000004043c5\n.text:00000000004043c7\n.text:00000000004043c9\n.text:00000000004043ca\n.text:00000000004043cf\n.text:00000000004043d4\n.text:00000000004043d9\n.text:00000000004043de\n.text:00000000004043e3\n.text:00000000004043e8\n.text:00000000004043ed\n.text:00000000004043f2\n.text:00000000004043f7\n.text:00000000004043fc\n.text:0000000000404401\n.text:0000000000404406\n.text:000000000040440b\n.text:0000000000404410\n'
p132
tp133
sS'get_stat_birthtime_ns'
p134
(S'\n__stdcall get_stat_birthtime_ns(stat * st)\n'
p135
V\u000along get_stat_birthtime_ns(stat *st)\u000a\u000a{\u000a  return 0;\u000a}\u000a\u000a
p136
S'XOR EAX,EAX\nRET\n'
p137
S'31 c0\nc3\n'
p138
S'.text:0000000000416c60\n.text:0000000000416c62\n'
p139
tp140
sS'LCO_compare'
p141
(S'\n__stdcall LCO_compare(void * x, void * y)\n'
p142
V\u000a_Bool LCO_compare(void *x,void *y)\u000a\u000a{\u000a  return (_Bool)(*(long *)x == *(long *)y);\u000a}\u000a\u000a
p143
S'MOV RAX,qword ptr [RDI]\nCMP RAX,qword ptr [RSI]\nSETZ AL\nRET\n'
p144
S'48 8b 07\n48 3b 06\n0f 94 c0\nc3\n'
p145
S'.text:0000000000419d80\n.text:0000000000419d83\n.text:0000000000419d86\n.text:0000000000419d89\n'
p146
tp147
sS'mbuiter_multi_next'
p148
(S'\n__stdcall mbuiter_multi_next(mbuiter_multi * iter)\n'
p149
V\u000avoid mbuiter_multi_next(mbuiter_multi *iter)\u000a\u000a{\u000a  wchar_t *pwc;\u000a  char *string;\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  size_t maxlen;\u000a  size_t n;\u000a  \u000a  if (iter->next_done != false) {\u000a    return;\u000a  }\u000a  if (iter->in_shift == false) {\u000a    _Var1 = is_basic();\u000a    if (_Var1 != false) {\u000a      (iter->cur).bytes = 1;\u000a      (iter->cur).wc = (int)*(iter->cur).ptr;\u000a      (iter->cur).wc_valid = true;\u000a      goto LAB_00412ca6;\u000a    }\u000a    iVar2 = mbsinit((mbstate_t *)&iter->state);\u000a    if (iVar2 == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("mbsinit (&iter->state)","./mbuiter.h",0x96,\u000a                    "void mbuiter_multi_next(struct mbuiter_multi *)");\u000a    }\u000a    iter->in_shift = true;\u000a  }\u000a  pwc = &(iter->cur).wc;\u000a  string = (iter->cur).ptr;\u000a  maxlen = __ctype_get_mb_cur_max();\u000a  n = strnlen1(string,maxlen);\u000a  n = rpl_mbrtowc(pwc,string,n,(mbstate_t *)(mbstate_t *)&iter->state);\u000a  (iter->cur).bytes = n;\u000a  if (n == 0xfffffffffffffffe) {\u000a    maxlen = strlen((iter->cur).ptr);\u000a    (iter->cur).bytes = maxlen;\u000a    (iter->cur).wc_valid = false;\u000a  }\u000a  else {\u000a    if (n == 0) {\u000a      (iter->cur).bytes = 1;\u000a      if (*(iter->cur).ptr != 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("*iter->cur.ptr == \u005c'\u005c\u005c0\u005c'","./mbuiter.h",0xb2,\u000a                      "void mbuiter_multi_next(struct mbuiter_multi *)");\u000a      }\u000a      if (*pwc != 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("iter->cur.wc == 0","./mbuiter.h",0xb3,\u000a                      "void mbuiter_multi_next(struct mbuiter_multi *)");\u000a      }\u000a    }\u000a    else {\u000a      if (n == 0xffffffffffffffff) {\u000a        (iter->cur).bytes = 1;\u000a        (iter->cur).wc_valid = false;\u000a        goto LAB_00412ca6;\u000a      }\u000a    }\u000a    (iter->cur).wc_valid = true;\u000a    iVar2 = mbsinit((mbstate_t *)&iter->state);\u000a    if (iVar2 != 0) {\u000a      iter->in_shift = false;\u000a    }\u000a  }\u000aLAB_00412ca6:\u000a  iter->next_done = true;\u000a  return;\u000a}\u000a\u000a
p150
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCMP byte ptr [RBX + 0xc],0x0\nJNZ 0x00412caa\nCMP byte ptr [RBX],0x0\nJNZ 0x00412c19\nMOV RAX,qword ptr [RBX + 0x10]\nMOVSX EDI,byte ptr [RAX]\nCALL 0x0041c170\nTEST AL,AL\nJZ 0x00412c05\nMOV qword ptr [RBX + 0x18],0x1\nMOV RAX,qword ptr [RBX + 0x10]\nMOVSX EAX,byte ptr [RAX]\nMOV dword ptr [RBX + 0x24],EAX\nMOV byte ptr [RBX + 0x20],0x1\nJMP 0x00412ca6\nLEA RDI,[RBX + 0x4]\nCALL 0x00402f20\nTEST EAX,EAX\nJZ 0x00412cb6\nMOV byte ptr [RBX],0x1\nLEA R14,[RBX + 0x24]\nMOV R12,qword ptr [RBX + 0x10]\nCALL 0x00402920\nMOV RDI,R12\nMOV RSI,RAX\nCALL 0x00416cb0\nLEA R15,[RBX + 0x4]\nMOV RDI,R14\nMOV RSI,R12\nMOV RDX,RAX\nMOV RCX,R15\nCALL 0x00419f50\nMOV qword ptr [RBX + 0x18],RAX\nCMP RAX,-0x2\nJZ 0x00412c69\nTEST RAX,RAX\nJZ 0x00412c7c\nCMP RAX,-0x1\nJNZ 0x00412c93\nMOV qword ptr [RBX + 0x18],0x1\nMOV byte ptr [RBX + 0x20],0x0\nJMP 0x00412ca6\nMOV RDI,qword ptr [RBX + 0x10]\nCALL 0x00402930\nMOV qword ptr [RBX + 0x18],RAX\nMOV byte ptr [RBX + 0x20],0x0\nJMP 0x00412ca6\nMOV qword ptr [RBX + 0x18],0x1\nMOV RAX,qword ptr [RBX + 0x10]\nCMP byte ptr [RAX],0x0\nJNZ 0x00412ccf\nCMP dword ptr [R14],0x0\nJNZ 0x00412ce8\nMOV byte ptr [RBX + 0x20],0x1\nMOV RDI,R15\nCALL 0x00402f20\nTEST EAX,EAX\nJZ 0x00412ca6\nMOV byte ptr [RBX],0x0\nMOV byte ptr [RBX + 0xc],0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nMOV EDI,0x422950\nMOV ESI,0x422967\nMOV EDX,0x96\nMOV ECX,0x422973\nCALL 0x00402a40\nMOV EDI,0x4229a3\nMOV ESI,0x422967\nMOV EDX,0xb2\nMOV ECX,0x422973\nCALL 0x00402a40\nMOV EDI,0x4229ba\nMOV ESI,0x422967\nMOV EDX,0xb3\nMOV ECX,0x422973\nCALL 0x00402a40\n'
p151
S'41 57\n41 56\n41 54\n53\n50\n48 89 fb\n80 7b 0c 00\n0f 85 d5 00 00 00\n80 3b 00\n75 3f\n48 8b 43 10\n0f be 38\ne8 8a 95 00 00\n84 c0\n74 1b\n48 c7 43 18 01 00 00 00\n48 8b 43 10\n0f be 00\n89 43 24\nc6 43 20 01\ne9 a1 00 00 00\n48 8d 7b 04\ne8 12 03 ff ff\n85 c0\n0f 84 a0 00 00 00\nc6 03 01\n4c 8d 73 24\n4c 8b 63 10\ne8 fa fc fe ff\n4c 89 e7\n48 89 c6\ne8 7f 40 00 00\n4c 8d 7b 04\n4c 89 f7\n4c 89 e6\n48 89 c2\n4c 89 f9\ne8 0a 73 00 00\n48 89 43 18\n48 83 f8 fe\n74 19\n48 85 c0\n74 27\n48 83 f8 ff\n75 38\n48 c7 43 18 01 00 00 00\nc6 43 20 00\neb 3d\n48 8b 7b 10\ne8 be fc fe ff\n48 89 43 18\nc6 43 20 00\neb 2a\n48 c7 43 18 01 00 00 00\n48 8b 43 10\n80 38 00\n75 42\n41 83 3e 00\n75 55\nc6 43 20 01\n4c 89 ff\ne8 81 02 ff ff\n85 c0\n74 03\nc6 03 00\nc6 43 0c 01\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\nbf 50 29 42 00\nbe 67 29 42 00\nba 96 00 00 00\nb9 73 29 42 00\ne8 71 fd fe ff\nbf a3 29 42 00\nbe 67 29 42 00\nba b2 00 00 00\nb9 73 29 42 00\ne8 58 fd fe ff\nbf ba 29 42 00\nbe 67 29 42 00\nba b3 00 00 00\nb9 73 29 42 00\ne8 3f fd fe ff\n'
p152
S'.text:0000000000412bc0\n.text:0000000000412bc2\n.text:0000000000412bc4\n.text:0000000000412bc6\n.text:0000000000412bc7\n.text:0000000000412bc8\n.text:0000000000412bcb\n.text:0000000000412bcf\n.text:0000000000412bd5\n.text:0000000000412bd8\n.text:0000000000412bda\n.text:0000000000412bde\n.text:0000000000412be1\n.text:0000000000412be6\n.text:0000000000412be8\n.text:0000000000412bea\n.text:0000000000412bf2\n.text:0000000000412bf6\n.text:0000000000412bf9\n.text:0000000000412bfc\n.text:0000000000412c00\n.text:0000000000412c05\n.text:0000000000412c09\n.text:0000000000412c0e\n.text:0000000000412c10\n.text:0000000000412c16\n.text:0000000000412c19\n.text:0000000000412c1d\n.text:0000000000412c21\n.text:0000000000412c26\n.text:0000000000412c29\n.text:0000000000412c2c\n.text:0000000000412c31\n.text:0000000000412c35\n.text:0000000000412c38\n.text:0000000000412c3b\n.text:0000000000412c3e\n.text:0000000000412c41\n.text:0000000000412c46\n.text:0000000000412c4a\n.text:0000000000412c4e\n.text:0000000000412c50\n.text:0000000000412c53\n.text:0000000000412c55\n.text:0000000000412c59\n.text:0000000000412c5b\n.text:0000000000412c63\n.text:0000000000412c67\n.text:0000000000412c69\n.text:0000000000412c6d\n.text:0000000000412c72\n.text:0000000000412c76\n.text:0000000000412c7a\n.text:0000000000412c7c\n.text:0000000000412c84\n.text:0000000000412c88\n.text:0000000000412c8b\n.text:0000000000412c8d\n.text:0000000000412c91\n.text:0000000000412c93\n.text:0000000000412c97\n.text:0000000000412c9a\n.text:0000000000412c9f\n.text:0000000000412ca1\n.text:0000000000412ca3\n.text:0000000000412ca6\n.text:0000000000412caa\n.text:0000000000412cae\n.text:0000000000412caf\n.text:0000000000412cb1\n.text:0000000000412cb3\n.text:0000000000412cb5\n.text:0000000000412cb6\n.text:0000000000412cbb\n.text:0000000000412cc0\n.text:0000000000412cc5\n.text:0000000000412cca\n.text:0000000000412ccf\n.text:0000000000412cd4\n.text:0000000000412cd9\n.text:0000000000412cde\n.text:0000000000412ce3\n.text:0000000000412ce8\n.text:0000000000412ced\n.text:0000000000412cf2\n.text:0000000000412cf7\n.text:0000000000412cfc\n'
p153
tp154
sS'cb_exec_noop'
p155
(S'\n__stdcall cb_exec_noop(buildcmd_control * ctl, void * usercontext, char * * argv)\n'
p156
V\u000aint cb_exec_noop(buildcmd_control *ctl,void *usercontext,char **argv)\u000a\u000a{\u000a  return 0;\u000a}\u000a\u000a
p157
S'XOR EAX,EAX\nRET\n'
p158
S'31 c0\nc3\n'
p159
S'.text:000000000040e2f0\n.text:000000000040e2f2\n'
p160
tp161
sS'fileno'
p162
(S'\n__stdcall fileno(FILE * __stream)\n'
p163
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_0062d2a8)();\u000a  return iVar1;\u000a}\u000a\u000a
p164
S'JMP qword ptr [0x0062d2a8]\n'
p165
S'ff 25 92 a6 22 00\n'
p166
S'.plt:0000000000402c10\n'
p167
tp168
sS'pred_used'
p169
(S'\n__stdcall pred_used(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p170
V\u000a_Bool pred_used(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  timespec tVar2;\u000a  timespec tVar3;\u000a  \u000a  tVar2 = get_stat_atime(stat_buf);\u000a  tVar3 = get_stat_ctime(stat_buf);\u000a  _Var1 = pred_timewindow((predicate *)\u000a                          ((SUB168((undefined  [16])tVar2 >> 0x40,0) -\u000a                            SUB168((undefined  [16])tVar3 >> 0x40,0) >> 0x3f) +\u000a                          (SUB168((undefined  [16])tVar2,0) - SUB168((undefined  [16])tVar3,0))));\u000a  return _Var1;\u000a}\u000a\u000a
p171
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R12,RSI\nMOV RDI,R12\nCALL 0x00416c70\nMOV R15,RAX\nMOV RBX,RDX\nMOV RDI,R12\nCALL 0x00416c80\nMOV RSI,RBX\nSUB RSI,RDX\nADD RSI,0x3b9aca00\nSUB RBX,RDX\nCMOVNS RSI,RBX\nSUB R15,RAX\nSAR RBX,0x3f\nLEA RDI,[RBX + R15*0x1]\nMOV ECX,0x15180\nMOV RDX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00404a30\n'
p172
S'41 57\n41 56\n41 54\n53\n50\n49 89 d6\n49 89 f4\n4c 89 e7\ne8 0a 24 01 00\n49 89 c7\n48 89 d3\n4c 89 e7\ne8 0c 24 01 00\n48 89 de\n48 29 d6\n48 81 c6 00 ca 9a 3b\n48 29 d3\n48 0f 49 f3\n49 29 c7\n48 c1 fb 3f\n4a 8d 3c 3b\nb9 80 51 01 00\n4c 89 f2\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 85 01 00 00\n'
p173
S'.text:0000000000404850\n.text:0000000000404852\n.text:0000000000404854\n.text:0000000000404856\n.text:0000000000404857\n.text:0000000000404858\n.text:000000000040485b\n.text:000000000040485e\n.text:0000000000404861\n.text:0000000000404866\n.text:0000000000404869\n.text:000000000040486c\n.text:000000000040486f\n.text:0000000000404874\n.text:0000000000404877\n.text:000000000040487a\n.text:0000000000404881\n.text:0000000000404884\n.text:0000000000404888\n.text:000000000040488b\n.text:000000000040488f\n.text:0000000000404893\n.text:0000000000404898\n.text:000000000040489b\n.text:000000000040489f\n.text:00000000004048a0\n.text:00000000004048a2\n.text:00000000004048a4\n.text:00000000004048a6\n'
p174
tp175
sS'xstrtoumax'
p176
(S'\n__stdcall xstrtoumax(char * s, char * * ptr, uintmax_t * val, char * valid_suffixes)\n'
p177
V\u000astrtol_error xstrtoumax(char *s,char **ptr,uintmax_t *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  byte *pbVar7;\u000a  strtol_error sVar8;\u000a  strtol_error sVar9;\u000a  uint uVar10;\u000a  char *__s;\u000a  long lVar11;\u000a  char **__endptr;\u000a  uintmax_t local_48;\u000a  uintmax_t *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./xstrtol.c",0x60,\u000a                  "strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)");\u000a  }\u000a  local_40 = (uintmax_t *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar7 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar7;\u000a    pbVar7 = pbVar7 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoumax(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar8 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar8 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar8 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar9 = sVar8;\u000a    if (__s == (char *)0x0) goto LAB_004179ba;\u000a  }\u000a  cVar2 = **__endptr;\u000a  sVar9 = sVar8;\u000a  if (cVar2 == 0) goto LAB_004179ba;\u000a  pcVar6 = strchr(__s,(int)cVar2);\u000a  if (pcVar6 == (char *)0x0) goto switchD_0041790d_caseD_43;\u000a  lVar11 = 1;\u000a  uVar10 = (int)cVar2 - 0x45;\u000a  if ((uVar10 < 0x30) && ((0x814400308945U >> ((ulong)uVar10 & 0x1f) & 1) != 0)) {\u000a    pcVar6 = strchr(__s,0x30);\u000a    if (pcVar6 == (char *)0x0) {\u000aLAB_004178e9:\u000a      lVar11 = 1;\u000a    }\u000a    else {\u000a      cVar2 = (*__endptr)[1];\u000a      if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a        lVar11 = 2;\u000a      }\u000a      else {\u000a        if (cVar2 != 'i') goto LAB_004178e9;\u000a        lVar11 = (ulong)((*__endptr)[2] == 'B') * 2 + 1;\u000a      }\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_0041799c;\u000a  default:\u000aswitchD_0041790d_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar8 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    break;\u000a  case 'P':\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    break;\u000a  case 'Y':\u000a    break;\u000a  case 'Z':\u000a    break;\u000a  case 'b':\u000a    goto LAB_0041799c;\u000a  case 'c':\u000a    goto switchD_0041790d_caseD_63;\u000a  case 'w':\u000aLAB_0041799c:\u000a    sVar3 = bkm_scale(&local_48);\u000a    goto switchD_0041790d_caseD_63;\u000a  }\u000a  sVar3 = bkm_scale_by_power(&local_48);\u000aswitchD_0041790d_caseD_63:\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar9 = sVar3 | sVar8 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar9 = sVar3 | sVar8;\u000a  }\u000aLAB_004179ba:\u000a  *local_40 = local_48;\u000a  return sVar9;\u000a}\u000a\u000a
p178
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R13,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x004179d7\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x00402770\nMOV R12,RAX\nMOV dword ptr [R12],0x0\nCALL 0x00402f80\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x004177d0\nTEST RBX,RBX\nLEA R15,[RSP + 0x10]\nCMOVNZ R15,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x004179c6\nMOV RDI,RBP\nMOV RSI,R15\nMOV EDX,R14D\nCALL 0x00402e10\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R15]\nCMP RAX,RBP\nJZ 0x00417830\nMOV EAX,dword ptr [R12]\nTEST EAX,EAX\nJZ 0x00417861\nCMP EAX,0x22\nJNZ 0x004179c6\nMOV EBX,0x1\nTEST R13,R13\nJNZ 0x0041786c\nJMP 0x004179ba\nTEST R13,R13\nJZ 0x004179c6\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x004179c6\nMOV RDI,R13\nCALL 0x00402980\nTEST RAX,RAX\nJZ 0x004179c6\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x0041786c\nXOR EBX,EBX\nTEST R13,R13\nJZ 0x004179ba\nMOV RAX,qword ptr [R15]\nMOVSX EBP,byte ptr [RAX]\nTEST EBP,EBP\nJZ 0x004179ba\nMOV RDI,R13\nMOV ESI,EBP\nCALL 0x00402980\nTEST RAX,RAX\nJZ 0x0041791e\nMOV R14D,0x400\nMOV R12D,0x1\nADD EBP,-0x45\nCMP EBP,0x2f\nJA 0x004178fd\nMOV RAX,0x814400308945\nBT RAX,RBP\nJNC 0x004178fd\nMOV ESI,0x30\nMOV RDI,R13\nCALL 0x00402980\nTEST RAX,RAX\nJZ 0x004178e9\nMOV RAX,qword ptr [R15]\nMOVSX ECX,byte ptr [RAX + 0x1]\nCMP ECX,0x42\nJZ 0x004178f1\nCMP ECX,0x44\nJZ 0x004178f1\nCMP ECX,0x69\nJNZ 0x004178e9\nXOR ECX,ECX\nCMP byte ptr [RAX + 0x2],0x42\nSETZ CL\nLEA R12,[RCX + RCX*0x1 + 0x1]\nJMP 0x004178fd\nMOV R12D,0x1\nJMP 0x004178fd\nMOV R14D,0x3e8\nMOV R12D,0x2\nMOV RAX,qword ptr [R15]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x0041791e\nXOR EAX,EAX\nJMP qword ptr [0x424fe8 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nJMP 0x00417980\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x004179c6\nMOV RDI,RSP\nMOV EDX,0x1\nJMP 0x00417980\nMOV RDI,RSP\nMOV EDX,0x2\nJMP 0x00417980\nMOV RDI,RSP\nMOV EDX,0x4\nJMP 0x00417980\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x0041799c\nMOV RDI,RSP\nMOV EDX,0x6\nJMP 0x00417980\nMOV RDI,RSP\nMOV EDX,0x5\nJMP 0x00417980\nMOV RDI,RSP\nMOV EDX,0x8\nJMP 0x00417980\nMOV RDI,RSP\nMOV EDX,0x7\nMOV ESI,R14D\nCALL 0x00417a20\nJMP 0x004179a1\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x0041799c\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x004179f0\nOR EAX,EBX\nMOV RCX,qword ptr [R15]\nLEA RDX,[RCX + R12*0x1]\nMOV qword ptr [R15],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + R12*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x424f60\nMOV ESI,0x424f86\nMOV EDX,0x60\nMOV ECX,0x425198\nCALL 0x00402a40\n'
p179
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c5\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 33 02 00 00\n48 89 4c 24 08\ne8 c2 af fe ff\n49 89 c4\n41 c7 04 24 00 00 00 00\ne8 c2 b7 fe ff\n48 8b 08\n48 89 ea\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 7c 24 10\n4c 0f 45 fb\nbb 04 00 00 00\n3c 2d\n0f 84 d0 01 00 00\n48 89 ef\n4c 89 fe\n44 89 f2\ne8 0c b6 fe ff\n48 89 04 24\n49 8b 07\n48 39 e8\n74 20\n41 8b 04 24\n85 c0\n74 49\n83 f8 22\n0f 85 a5 01 00 00\nbb 01 00 00 00\n4d 85 ed\n75 41\ne9 8a 01 00 00\n4d 85 ed\n0f 84 8d 01 00 00\n0f be 30\n85 f6\n0f 84 82 01 00 00\n4c 89 ef\ne8 34 b1 fe ff\n48 85 c0\n0f 84 71 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 ed\n0f 84 4e 01 00 00\n49 8b 07\n0f be 28\n85 ed\n0f 84 40 01 00 00\n4c 89 ef\n89 ee\ne8 fc b0 fe ff\n48 85 c0\n0f 84 91 00 00 00\n41 be 00 04 00 00\n41 bc 01 00 00 00\n83 c5 bb\n83 fd 2f\n77 5c\n48 b8 45 89 30 00 44 81 00 00\n48 0f a3 e8\n73 4c\nbe 30 00 00 00\n4c 89 ef\ne8 c2 b0 fe ff\n48 85 c0\n74 26\n49 8b 07\n0f be 48 01\n83 f9 42\n74 22\n83 f9 44\n74 1d\n83 f9 69\n75 10\n31 c9\n80 78 02 42\n0f 94 c1\n4c 8d 64 09 01\neb 14\n41 bc 01 00 00 00\neb 0c\n41 be e8 03 00 00\n41 bc 02 00 00 00\n49 8b 07\n0f be 08\n83 c1 be\n83 f9 35\n77 13\n31 c0\nff 24 cd e8 4f 42 00\n48 89 e7\nba 03 00 00 00\neb 62\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 94 00 00 00\n48 89 e7\nba 01 00 00 00\neb 44\n48 89 e7\nba 02 00 00 00\neb 3a\n48 89 e7\nba 04 00 00 00\neb 30\n48 89 e7\nbe 00 04 00 00\neb 42\n48 89 e7\nba 06 00 00 00\neb 1c\n48 89 e7\nba 05 00 00 00\neb 12\n48 89 e7\nba 08 00 00 00\neb 08\n48 89 e7\nba 07 00 00 00\n44 89 f6\ne8 98 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 4f 00 00 00\n09 d8\n49 8b 0f\n4a 8d 14 21\n49 89 17\n89 c3\n83 cb 02\n42 80 3c 21 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 60 4f 42 00\nbe 86 4f 42 00\nba 60 00 00 00\nb9 98 51 42 00\ne8 50 b0 fe ff\n'
p180
S'.text:0000000000417780\n.text:0000000000417781\n.text:0000000000417783\n.text:0000000000417785\n.text:0000000000417787\n.text:0000000000417789\n.text:000000000041778a\n.text:000000000041778e\n.text:0000000000417791\n.text:0000000000417794\n.text:0000000000417797\n.text:000000000041779a\n.text:000000000041779e\n.text:00000000004177a4\n.text:00000000004177a9\n.text:00000000004177ae\n.text:00000000004177b1\n.text:00000000004177b9\n.text:00000000004177be\n.text:00000000004177c1\n.text:00000000004177c4\n.text:00000000004177d0\n.text:00000000004177d3\n.text:00000000004177d6\n.text:00000000004177db\n.text:00000000004177dd\n.text:00000000004177e0\n.text:00000000004177e5\n.text:00000000004177e9\n.text:00000000004177ee\n.text:00000000004177f0\n.text:00000000004177f6\n.text:00000000004177f9\n.text:00000000004177fc\n.text:00000000004177ff\n.text:0000000000417804\n.text:0000000000417808\n.text:000000000041780b\n.text:000000000041780e\n.text:0000000000417810\n.text:0000000000417814\n.text:0000000000417816\n.text:0000000000417818\n.text:000000000041781b\n.text:0000000000417821\n.text:0000000000417826\n.text:0000000000417829\n.text:000000000041782b\n.text:0000000000417830\n.text:0000000000417833\n.text:0000000000417839\n.text:000000000041783c\n.text:000000000041783e\n.text:0000000000417844\n.text:0000000000417847\n.text:000000000041784c\n.text:000000000041784f\n.text:0000000000417855\n.text:000000000041785d\n.text:000000000041785f\n.text:0000000000417861\n.text:0000000000417863\n.text:0000000000417866\n.text:000000000041786c\n.text:000000000041786f\n.text:0000000000417872\n.text:0000000000417874\n.text:000000000041787a\n.text:000000000041787d\n.text:000000000041787f\n.text:0000000000417884\n.text:0000000000417887\n.text:000000000041788d\n.text:0000000000417893\n.text:0000000000417899\n.text:000000000041789c\n.text:000000000041789f\n.text:00000000004178a1\n.text:00000000004178ab\n.text:00000000004178af\n.text:00000000004178b1\n.text:00000000004178b6\n.text:00000000004178b9\n.text:00000000004178be\n.text:00000000004178c1\n.text:00000000004178c3\n.text:00000000004178c6\n.text:00000000004178ca\n.text:00000000004178cd\n.text:00000000004178cf\n.text:00000000004178d2\n.text:00000000004178d4\n.text:00000000004178d7\n.text:00000000004178d9\n.text:00000000004178db\n.text:00000000004178df\n.text:00000000004178e2\n.text:00000000004178e7\n.text:00000000004178e9\n.text:00000000004178ef\n.text:00000000004178f1\n.text:00000000004178f7\n.text:00000000004178fd\n.text:0000000000417900\n.text:0000000000417903\n.text:0000000000417906\n.text:0000000000417909\n.text:000000000041790b\n.text:000000000041790d\n.text:0000000000417914\n.text:0000000000417917\n.text:000000000041791c\n.text:000000000041791e\n.text:0000000000417922\n.text:0000000000417927\n.text:000000000041792a\n.text:000000000041792d\n.text:0000000000417932\n.text:0000000000417935\n.text:000000000041793a\n.text:000000000041793c\n.text:000000000041793f\n.text:0000000000417944\n.text:0000000000417946\n.text:0000000000417949\n.text:000000000041794e\n.text:0000000000417950\n.text:0000000000417953\n.text:0000000000417958\n.text:000000000041795a\n.text:000000000041795d\n.text:0000000000417962\n.text:0000000000417964\n.text:0000000000417967\n.text:000000000041796c\n.text:000000000041796e\n.text:0000000000417971\n.text:0000000000417976\n.text:0000000000417978\n.text:000000000041797b\n.text:0000000000417980\n.text:0000000000417983\n.text:0000000000417988\n.text:000000000041798a\n.text:000000000041798d\n.text:0000000000417992\n.text:0000000000417994\n.text:0000000000417997\n.text:000000000041799c\n.text:00000000004179a1\n.text:00000000004179a3\n.text:00000000004179a6\n.text:00000000004179aa\n.text:00000000004179ad\n.text:00000000004179af\n.text:00000000004179b2\n.text:00000000004179b7\n.text:00000000004179ba\n.text:00000000004179be\n.text:00000000004179c3\n.text:00000000004179c6\n.text:00000000004179c8\n.text:00000000004179cc\n.text:00000000004179cd\n.text:00000000004179cf\n.text:00000000004179d1\n.text:00000000004179d3\n.text:00000000004179d5\n.text:00000000004179d6\n.text:00000000004179d7\n.text:00000000004179dc\n.text:00000000004179e1\n.text:00000000004179e6\n.text:00000000004179eb\n'
p181
tp182
sS'get_statinfo'
p183
(S'\n__stdcall get_statinfo(char * pathname, char * name, stat * p)\n'
p184
V\u000aint get_statinfo(char *pathname,char *name,stat *p)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  \u000a  if (state.have_stat == false) {\u000a    iVar2 = (*options.xstat)(name,p);\u000a    _Var1 = options.ignore_readdir_race;\u000a    if (iVar2 != 0) {\u000a      puVar3 = (uint *)__errno_location();\u000a      if ((_Var1 != false) && (*puVar3 == 2)) {\u000a        return -1;\u000a      }\u000a      nonfatal_target_file_error((char *)(ulong)*puVar3);\u000a      return -1;\u000a    }\u000a    if (p->st_mode == 0) {\u000a      uVar4 = dcgettext(0,"WARNING: file %s appears to have mode 0000",5);\u000a      pcVar5 = quotearg_n_style((char *)0x0);\u000a      error(0,0,uVar4,pcVar5);\u000a      error_severity(1);\u000a    }\u000a  }\u000a  state._4_2_ = 0x101;\u000a  state.type = p->st_mode;\u000a  return 0;\u000a}\u000a\u000a
p185
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV RBX,RDX\nMOV R14,RSI\nMOV R15,RDI\nCMP byte ptr [0x0062f004],0x0\nJZ 0x00407a13\nMOV word ptr [0x0062f004],0x101\nMOV EAX,dword ptr [RBX + 0x18]\nMOV dword ptr [0x0062f008],EAX\nXOR EBX,EBX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOV RDI,R14\nMOV RSI,RBX\nCALL qword ptr [0x0062f090]\nTEST EAX,EAX\nJZ 0x00407a49\nMOV BL,byte ptr [0x0062f04e]\nCALL 0x00402770\nCMP BL,0x0\nMOV EDI,dword ptr [RAX]\nMOV EBX,0xffffffff\nJZ 0x00407a3f\nCMP EDI,0x2\nJZ 0x00407a0b\nMOV RSI,R15\nCALL 0x00407ab0\nJMP 0x00407a0b\nCMP dword ptr [RBX + 0x18],0x0\nJNZ 0x004079f7\nXOR EDI,EDI\nMOV ESI,0x41c847\nMOV EDX,0x5\nCALL 0x00402910\nMOV R15,RAX\nMOV ESI,dword ptr [0x0062f0ac]\nXOR EDI,EDI\nMOV RDX,R14\nCALL 0x00416290\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R15\nCALL 0x00402d90\nMOV EDI,0x1\nCALL 0x00407aa0\nJMP 0x004079f7\n'
p186
S'41 57\n41 56\n53\n48 89 d3\n49 89 f6\n49 89 ff\n80 3d 0f 76 22 00 00\n74 1c\n66 c7 05 04 76 22 00 01 01\n8b 43 18\n89 05 ff 75 22 00\n31 db\n89 d8\n5b\n41 5e\n41 5f\nc3\n4c 89 f7\n48 89 de\nff 15 71 76 22 00\n85 c0\n74 26\n8a 1d 25 76 22 00\ne8 42 ad ff ff\n80 fb 00\n8b 38\nbb ff ff ff ff\n74 05\n83 ff 02\n74 cc\n4c 89 fe\ne8 69 00 00 00\neb c2\n83 7b 18 00\n75 a8\n31 ff\nbe 47 c8 41 00\nba 05 00 00 00\ne8 b0 ae ff ff\n49 89 c7\n8b 35 43 76 22 00\n31 ff\n4c 89 f2\ne8 1d e8 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n4c 89 fa\ne8 0c b3 ff ff\nbf 01 00 00 00\ne8 12 00 00 00\ne9 64 ff ff ff\n'
p187
S'.text:00000000004079e0\n.text:00000000004079e2\n.text:00000000004079e4\n.text:00000000004079e5\n.text:00000000004079e8\n.text:00000000004079eb\n.text:00000000004079ee\n.text:00000000004079f5\n.text:00000000004079f7\n.text:0000000000407a00\n.text:0000000000407a03\n.text:0000000000407a09\n.text:0000000000407a0b\n.text:0000000000407a0d\n.text:0000000000407a0e\n.text:0000000000407a10\n.text:0000000000407a12\n.text:0000000000407a13\n.text:0000000000407a16\n.text:0000000000407a19\n.text:0000000000407a1f\n.text:0000000000407a21\n.text:0000000000407a23\n.text:0000000000407a29\n.text:0000000000407a2e\n.text:0000000000407a31\n.text:0000000000407a33\n.text:0000000000407a38\n.text:0000000000407a3a\n.text:0000000000407a3d\n.text:0000000000407a3f\n.text:0000000000407a42\n.text:0000000000407a47\n.text:0000000000407a49\n.text:0000000000407a4d\n.text:0000000000407a4f\n.text:0000000000407a51\n.text:0000000000407a56\n.text:0000000000407a5b\n.text:0000000000407a60\n.text:0000000000407a63\n.text:0000000000407a69\n.text:0000000000407a6b\n.text:0000000000407a6e\n.text:0000000000407a73\n.text:0000000000407a76\n.text:0000000000407a78\n.text:0000000000407a7a\n.text:0000000000407a7c\n.text:0000000000407a7f\n.text:0000000000407a84\n.text:0000000000407a89\n.text:0000000000407a8e\n'
p188
tp189
sS'AD_hash'
p190
(S'\n__stdcall AD_hash(void * x, size_t table_size)\n'
p191
V\u000asize_t AD_hash(void *x,size_t table_size)\u000a\u000a{\u000a  return *(ulong *)((long)x + 8) % table_size;\u000a}\u000a\u000a
p192
S'MOV RAX,qword ptr [RDI + 0x8]\nXOR EDX,EDX\nDIV RSI\nMOV RAX,RDX\nRET\n'
p193
S'48 8b 47 08\n31 d2\n48 f7 f6\n48 89 d0\nc3\n'
p194
S'.text:0000000000419d40\n.text:0000000000419d44\n.text:0000000000419d46\n.text:0000000000419d49\n.text:0000000000419d4c\n'
p195
tp196
sS'optionl_stat'
p197
(S'\n__stdcall optionl_stat(char * name, stat * p)\n'
p198
V\u000aint optionl_stat(char *name,stat *p)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if ((state.cwd_dir_fd != -100) && (state.cwd_dir_fd < 0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("state.cwd_dir_fd >= 0","util.c",0x29e,\u000a                  "int optionl_stat(const char *, struct stat *)");\u000a  }\u000a  iVar1 = fstatat(state.cwd_dir_fd,name,(stat *)p,0);\u000a  if (iVar1 != 0) {\u000a    iVar1 = fallback_stat(name,p);\u000a    return iVar1;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p199
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nMOV EDI,dword ptr [0x0062f018]\nCMP EDI,-0x64\nJZ 0x00408109\nTEST EDI,EDI\nJS 0x00408138\nXOR ECX,ECX\nMOV RSI,RBX\nMOV RDX,R14\nCALL 0x0041c4c0\nTEST EAX,EAX\nJZ 0x0040812e\nMOV RDI,RBX\nMOV RSI,R14\nMOV EDX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00408090\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV EDI,0x41e74a\nMOV ESI,0x41e01b\nMOV EDX,0x29e\nMOV ECX,0x41e78e\nCALL 0x00402a40\n'
p200
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n8b 3d 18 6f 22 00\n83 ff 9c\n74 04\n85 ff\n78 2f\n31 c9\n48 89 de\n4c 89 f2\ne8 aa 43 01 00\n85 c0\n74 14\n48 89 df\n4c 89 f6\n89 c2\n48 83 c4 08\n5b\n41 5e\ne9 62 ff ff ff\n31 c0\n48 83 c4 08\n5b\n41 5e\nc3\nbf 4a e7 41 00\nbe 1b e0 41 00\nba 9e 02 00 00\nb9 8e e7 41 00\ne8 ef a8 ff ff\n'
p201
S'.text:00000000004080f0\n.text:00000000004080f2\n.text:00000000004080f3\n.text:00000000004080f4\n.text:00000000004080f7\n.text:00000000004080fa\n.text:0000000000408100\n.text:0000000000408103\n.text:0000000000408105\n.text:0000000000408107\n.text:0000000000408109\n.text:000000000040810b\n.text:000000000040810e\n.text:0000000000408111\n.text:0000000000408116\n.text:0000000000408118\n.text:000000000040811a\n.text:000000000040811d\n.text:0000000000408120\n.text:0000000000408122\n.text:0000000000408126\n.text:0000000000408127\n.text:0000000000408129\n.text:000000000040812e\n.text:0000000000408130\n.text:0000000000408134\n.text:0000000000408135\n.text:0000000000408137\n.text:0000000000408138\n.text:000000000040813d\n.text:0000000000408142\n.text:0000000000408147\n.text:000000000040814c\n'
p202
tp203
sS'mbsinit'
p204
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p205
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_0062d430)();\u000a  return iVar1;\u000a}\u000a\u000a
p206
S'JMP qword ptr [0x0062d430]\n'
p207
S'ff 25 0a a5 22 00\n'
p208
S'.plt:0000000000402f20\n'
p209
tp210
sS'lookup_word'
p211
(S'\n__stdcall lookup_word(parser_control * pc, char * word)\n'
p212
V\u000atable * lookup_word(parser_control *pc,char *word)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  int iVar3;\u000a  size_t sVar4;\u000a  table *ptVar5;\u000a  char *pcVar6;\u000a  char *__s2;\u000a  bool bVar7;\u000a  \u000a  if (*word != 0) {\u000a    __s2 = word + 1;\u000a    do {\u000a      iVar3 = c_toupper();\u000a      __s2[-1] = (char)iVar3;\u000a      cVar1 = *__s2;\u000a      __s2 = __s2 + 1;\u000a    } while (cVar1 != 0);\u000a  }\u000a  ptVar5 = meridian_table;\u000a  __s2 = "AM";\u000a  do {\u000a    iVar3 = strcmp(word,__s2);\u000a    if (iVar3 == 0) {\u000a      return ptVar5;\u000a    }\u000a    __s2 = ptVar5[1].name;\u000a    ptVar5 = ptVar5 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  sVar4 = strlen(word);\u000a  if (sVar4 == 3) {\u000a    bVar7 = true;\u000a  }\u000a  else {\u000a    if (sVar4 == 4) {\u000a      bVar7 = word[3] == '.';\u000a    }\u000a    else {\u000a      bVar7 = false;\u000a    }\u000a  }\u000a  ptVar5 = month_and_day_table;\u000a  __s2 = "JANUARY";\u000a  do {\u000a    if (bVar7) {\u000a      iVar3 = strncmp(word,__s2,3);\u000a    }\u000a    else {\u000a      iVar3 = strcmp(word,__s2);\u000a    }\u000a    if (iVar3 == 0) {\u000a      return ptVar5;\u000a    }\u000a    __s2 = ptVar5[1].name;\u000a    ptVar5 = ptVar5 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  ptVar5 = lookup_zone(pc,word);\u000a  if (ptVar5 == (table *)0x0) {\u000a    iVar3 = strcmp(word,"DST");\u000a    if (iVar3 == 0) {\u000a      ptVar5 = dst_table;\u000a    }\u000a    else {\u000a      ptVar5 = time_units_table;\u000a      __s2 = "YEAR";\u000a      do {\u000a        iVar3 = strcmp(word,__s2);\u000a        if (iVar3 == 0) {\u000a          return ptVar5;\u000a        }\u000a        __s2 = ptVar5[1].name;\u000a        ptVar5 = ptVar5 + 1;\u000a      } while (__s2 != (char *)0x0);\u000a      if (word[sVar4 - 1] == 'S') {\u000a        word[sVar4 - 1] = 0;\u000a        ptVar5 = time_units_table;\u000a        __s2 = "YEAR";\u000a        do {\u000a          iVar3 = strcmp(word,__s2);\u000a          if (iVar3 == 0) {\u000a            return ptVar5;\u000a          }\u000a          __s2 = ptVar5[1].name;\u000a          ptVar5 = ptVar5 + 1;\u000a        } while (__s2 != (char *)0x0);\u000a        word[sVar4 - 1] = 'S';\u000a      }\u000a      ptVar5 = relative_time_table;\u000a      __s2 = "TOMORROW";\u000a      do {\u000a        iVar3 = strcmp(word,__s2);\u000a        if (iVar3 == 0) {\u000a          return ptVar5;\u000a        }\u000a        __s2 = ptVar5[1].name;\u000a        ptVar5 = ptVar5 + 1;\u000a      } while (__s2 != (char *)0x0);\u000a      if (sVar4 == 1) {\u000a        ptVar5 = military_table;\u000a        __s2 = "A";\u000a        do {\u000a          if (*word == *__s2) {\u000a            return ptVar5;\u000a          }\u000a          __s2 = ptVar5[1].name;\u000a          ptVar5 = ptVar5 + 1;\u000a        } while (__s2 != (char *)0x0);\u000a      }\u000a      if (*word != 0) {\u000a        __s2 = word + 1;\u000a        pcVar6 = word;\u000a        bVar7 = false;\u000a        do {\u000a          cVar1 = *__s2;\u000a          bVar2 = true;\u000a          if (__s2[-1] != '.') {\u000a            pcVar6 = pcVar6 + 1;\u000a            bVar2 = bVar7;\u000a          }\u000a          *pcVar6 = cVar1;\u000a          __s2 = __s2 + 1;\u000a          bVar7 = bVar2;\u000a        } while (cVar1 != 0);\u000a        if ((bVar2) && (ptVar5 = lookup_zone(pc,word), ptVar5 != (table *)0x0)) {\u000a          return ptVar5;\u000a        }\u000a      }\u000a      ptVar5 = (table *)0x0;\u000a    }\u000a  }\u000a  return ptVar5;\u000a}\u000a\u000a
p213
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV AL,byte ptr [R15]\nTEST AL,AL\nJZ 0x00414de5\nLEA RBX,[R15 + 0x1]\nNOP dword ptr [RAX]\nMOVZX EDI,AL\nCALL 0x0041ba80\nMOV byte ptr [RBX + -0x1],AL\nMOVZX EAX,byte ptr [RBX]\nINC RBX\nTEST AL,AL\nJNZ 0x00414dd0\nMOV EBX,0x423940\nMOV ESI,0x424294\nNOP\nMOV RDI,R15\nCALL 0x00402b40\nTEST EAX,EAX\nJZ 0x00414e8c\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00414df0\nMOV RDI,R15\nCALL 0x00402930\nMOV R12,RAX\nCMP R12,0x3\nJZ 0x00414e2f\nCMP R12,0x4\nJNZ 0x00414e34\nCMP byte ptr [R15 + 0x3],0x2e\nSETZ BPL\nJMP 0x00414e36\nMOV BPL,0x1\nJMP 0x00414e36\nXOR EBP,EBP\nMOV EBX,0x423990\nMOV ESI,0x4242a4\nTEST BPL,BPL\nJZ 0x00414e60\nMOV EDX,0x3\nMOV RDI,R15\nCALL 0x00402790\nTEST EAX,EAX\nJNZ 0x00414e6c\nJMP 0x00414e8c\nMOV RDI,R15\nCALL 0x00402b40\nTEST EAX,EAX\nJZ 0x00414e8c\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00414e40\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x00414ff0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00414e98\nMOV RAX,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV ESI,0x424414\nMOV RDI,R15\nCALL 0x00402b40\nTEST EAX,EAX\nJZ 0x00414fca\nMOV EBX,0x423b30\nMOV ESI,0x424418\nNOP word ptr [RAX + RAX*0x1]\nMOV RDI,R15\nCALL 0x00402b40\nTEST EAX,EAX\nJZ 0x00414e8c\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00414ec0\nCMP byte ptr [R15 + R12*0x1 + -0x1],0x53\nJNZ 0x00414f1f\nMOV byte ptr [R15 + R12*0x1 + -0x1],0x0\nMOV EBX,0x423b30\nMOV ESI,0x424418\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nCALL 0x00402b40\nTEST EAX,EAX\nJZ 0x00414e8c\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00414f00\nMOV byte ptr [R15 + R12*0x1 + -0x1],0x53\nMOV EBX,0x423be0\nMOV ESI,0x42444d\nNOP dword ptr [RAX]\nMOV RDI,R15\nCALL 0x00402b40\nTEST EAX,EAX\nJZ 0x00414e8c\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00414f30\nCMP R12,0x1\nJNZ 0x00414f75\nMOV EBX,0x423d30\nMOV ECX,0x4244ce\nMOV AL,byte ptr [R15]\nCMP AL,byte ptr [RCX]\nJZ 0x00414e8c\nMOV RCX,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RCX,RCX\nJNZ 0x00414f60\nCMP byte ptr [R15],0x0\nJZ 0x00414fc3\nLEA RAX,[R15 + 0x1]\nXOR EDX,EDX\nMOV RCX,R15\nLEA RDI,[RCX + 0x1]\nMOVZX EBX,byte ptr [RAX]\nCMP byte ptr [RAX + -0x1],0x2e\nMOV SIL,0x1\nJZ 0x00414f96\nMOV ESI,EDX\nCMOVNZ RCX,RDI\nMOV byte ptr [RCX],BL\nINC RAX\nTEST BL,BL\nMOV DL,SIL\nJNZ 0x00414f84\nTEST SIL,0x1\nJZ 0x00414fc3\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x00414ff0\nMOV RBX,RAX\nTEST RBX,RBX\nJNZ 0x00414e8c\nXOR EBX,EBX\nJMP 0x00414e8c\nMOV EBX,0x423b20\nJMP 0x00414e8c\n'
p214
S'55\n41 57\n41 56\n41 54\n53\n49 89 f7\n49 89 fe\n41 8a 07\n84 c0\n74 20\n49 8d 5f 01\n0f 1f 80 00 00 00 00\n0f b6 f8\ne8 a8 6c 00 00\n88 43 ff\n0f b6 03\n48 ff c3\n84 c0\n75 eb\nbb 40 39 42 00\nbe 94 42 42 00\n90\n4c 89 ff\ne8 48 dd fe ff\n85 c0\n0f 84 8c 00 00 00\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e3\n4c 89 ff\ne8 1b db fe ff\n49 89 c4\n49 83 fc 03\n74 11\n49 83 fc 04\n75 10\n41 80 7f 03 2e\n40 0f 94 c5\neb 07\n40 b5 01\neb 02\n31 ed\nbb 90 39 42 00\nbe a4 42 42 00\n40 84 ed\n74 1b\nba 03 00 00 00\n4c 89 ff\ne8 3e d9 fe ff\n85 c0\n75 16\neb 34\n4c 89 ff\ne8 d8 dc fe ff\n85 c0\n74 20\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 c7\n4c 89 f7\n4c 89 fe\ne8 6c 01 00 00\n48 89 c3\n48 85 db\n74 0c\n48 89 d8\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\nbe 14 44 42 00\n4c 89 ff\ne8 9b dc fe ff\n85 c0\n0f 84 1d 01 00 00\nbb 30 3b 42 00\nbe 18 44 42 00\n66 0f 1f 84 00 00 00 00 00\n4c 89 ff\ne8 78 dc fe ff\n85 c0\n74 c0\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e7\n43 80 7c 27 ff 53\n75 3e\n43 c6 44 27 ff 00\nbb 30 3b 42 00\nbe 18 44 42 00\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\ne8 38 dc fe ff\n85 c0\n74 80\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e7\n43 c6 44 27 ff 53\nbb e0 3b 42 00\nbe 4d 44 42 00\n0f 1f 80 00 00 00 00\n4c 89 ff\ne8 08 dc fe ff\n85 c0\n0f 84 4c ff ff ff\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e3\n49 83 fc 01\n75 22\nbb 30 3d 42 00\nb9 ce 44 42 00\n41 8a 07\n3a 01\n0f 84 24 ff ff ff\n48 8b 4b 10\n48 83 c3 10\n48 85 c9\n75 eb\n41 80 3f 00\n74 48\n49 8d 47 01\n31 d2\n4c 89 f9\n48 8d 79 01\n0f b6 18\n80 78 ff 2e\n40 b6 01\n74 02\n89 d6\n48 0f 45 cf\n88 19\n48 ff c0\n84 db\n40 88 f2\n75 de\n40 f6 c6 01\n74 17\n4c 89 f7\n4c 89 fe\ne8 39 00 00 00\n48 89 c3\n48 85 db\n0f 85 c9 fe ff ff\n31 db\ne9 c2 fe ff ff\nbb 20 3b 42 00\ne9 b8 fe ff ff\n'
p215
S'.text:0000000000414db0\n.text:0000000000414db1\n.text:0000000000414db3\n.text:0000000000414db5\n.text:0000000000414db7\n.text:0000000000414db8\n.text:0000000000414dbb\n.text:0000000000414dbe\n.text:0000000000414dc1\n.text:0000000000414dc3\n.text:0000000000414dc5\n.text:0000000000414dc9\n.text:0000000000414dd0\n.text:0000000000414dd3\n.text:0000000000414dd8\n.text:0000000000414ddb\n.text:0000000000414dde\n.text:0000000000414de1\n.text:0000000000414de3\n.text:0000000000414de5\n.text:0000000000414dea\n.text:0000000000414def\n.text:0000000000414df0\n.text:0000000000414df3\n.text:0000000000414df8\n.text:0000000000414dfa\n.text:0000000000414e00\n.text:0000000000414e04\n.text:0000000000414e08\n.text:0000000000414e0b\n.text:0000000000414e0d\n.text:0000000000414e10\n.text:0000000000414e15\n.text:0000000000414e18\n.text:0000000000414e1c\n.text:0000000000414e1e\n.text:0000000000414e22\n.text:0000000000414e24\n.text:0000000000414e29\n.text:0000000000414e2d\n.text:0000000000414e2f\n.text:0000000000414e32\n.text:0000000000414e34\n.text:0000000000414e36\n.text:0000000000414e3b\n.text:0000000000414e40\n.text:0000000000414e43\n.text:0000000000414e45\n.text:0000000000414e4a\n.text:0000000000414e4d\n.text:0000000000414e52\n.text:0000000000414e54\n.text:0000000000414e56\n.text:0000000000414e60\n.text:0000000000414e63\n.text:0000000000414e68\n.text:0000000000414e6a\n.text:0000000000414e6c\n.text:0000000000414e70\n.text:0000000000414e74\n.text:0000000000414e77\n.text:0000000000414e79\n.text:0000000000414e7c\n.text:0000000000414e7f\n.text:0000000000414e84\n.text:0000000000414e87\n.text:0000000000414e8a\n.text:0000000000414e8c\n.text:0000000000414e8f\n.text:0000000000414e90\n.text:0000000000414e92\n.text:0000000000414e94\n.text:0000000000414e96\n.text:0000000000414e97\n.text:0000000000414e98\n.text:0000000000414e9d\n.text:0000000000414ea0\n.text:0000000000414ea5\n.text:0000000000414ea7\n.text:0000000000414ead\n.text:0000000000414eb2\n.text:0000000000414eb7\n.text:0000000000414ec0\n.text:0000000000414ec3\n.text:0000000000414ec8\n.text:0000000000414eca\n.text:0000000000414ecc\n.text:0000000000414ed0\n.text:0000000000414ed4\n.text:0000000000414ed7\n.text:0000000000414ed9\n.text:0000000000414edf\n.text:0000000000414ee1\n.text:0000000000414ee7\n.text:0000000000414eec\n.text:0000000000414ef1\n.text:0000000000414f00\n.text:0000000000414f03\n.text:0000000000414f08\n.text:0000000000414f0a\n.text:0000000000414f0c\n.text:0000000000414f10\n.text:0000000000414f14\n.text:0000000000414f17\n.text:0000000000414f19\n.text:0000000000414f1f\n.text:0000000000414f24\n.text:0000000000414f29\n.text:0000000000414f30\n.text:0000000000414f33\n.text:0000000000414f38\n.text:0000000000414f3a\n.text:0000000000414f40\n.text:0000000000414f44\n.text:0000000000414f48\n.text:0000000000414f4b\n.text:0000000000414f4d\n.text:0000000000414f51\n.text:0000000000414f53\n.text:0000000000414f58\n.text:0000000000414f5d\n.text:0000000000414f60\n.text:0000000000414f62\n.text:0000000000414f68\n.text:0000000000414f6c\n.text:0000000000414f70\n.text:0000000000414f73\n.text:0000000000414f75\n.text:0000000000414f79\n.text:0000000000414f7b\n.text:0000000000414f7f\n.text:0000000000414f81\n.text:0000000000414f84\n.text:0000000000414f88\n.text:0000000000414f8b\n.text:0000000000414f8f\n.text:0000000000414f92\n.text:0000000000414f94\n.text:0000000000414f96\n.text:0000000000414f9a\n.text:0000000000414f9c\n.text:0000000000414f9f\n.text:0000000000414fa1\n.text:0000000000414fa4\n.text:0000000000414fa6\n.text:0000000000414faa\n.text:0000000000414fac\n.text:0000000000414faf\n.text:0000000000414fb2\n.text:0000000000414fb7\n.text:0000000000414fba\n.text:0000000000414fbd\n.text:0000000000414fc3\n.text:0000000000414fc5\n.text:0000000000414fca\n.text:0000000000414fcf\n'
p216
tp217
sS'human_readable'
p218
(S'\n__stdcall human_readable(uintmax_t n, char * buf, uintmax_t from_block_size, uintmax_t to_block_size)\n'
p219
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000achar * human_readable(uintmax_t n,char *buf,uintmax_t from_block_size,uintmax_t to_block_size)\u000a\u000a{\u000a  uint uVar1;\u000a  char *grouping;\u000a  undefined auVar2 [16];\u000a  undefined auVar3 [16];\u000a  float fVar4;\u000a  uint uVar5;\u000a  lconv *plVar6;\u000a  size_t __n;\u000a  char *__src;\u000a  ulong uVar7;\u000a  ulong uVar8;\u000a  char cVar9;\u000a  uint uVar10;\u000a  uint uVar11;\u000a  size_t __n_00;\u000a  char *thousands_sep;\u000a  ulong uVar12;\u000a  uint uVar13;\u000a  uint uVar14;\u000a  char *number;\u000a  uint uVar15;\u000a  ulong in_R8;\u000a  ulong uVar16;\u000a  ulong uVar17;\u000a  char *__s;\u000a  long lVar18;\u000a  char *pcVar19;\u000a  bool bVar20;\u000a  longdouble damt;\u000a  \u000a  uVar13 = (uint)from_block_size;\u000a  uVar5 = 1000;\u000a  if ((from_block_size & 0x20) != 0) {\u000a    uVar5 = 0x400;\u000a  }\u000a  plVar6 = localeconv();\u000a  __s = plVar6->decimal_point;\u000a  __n = strlen(__s);\u000a  bVar20 = __n - 1 < 0x10;\u000a  __n_00 = 1;\u000a  if (bVar20) {\u000a    __n_00 = __n;\u000a  }\u000a  __src = \u000a          "warning: Unix filenames usually don\u005c't contain slashes (though pathnames do).  That means that \u005c'%s %s\u005c' will probably evaluate to false all the time on this system.  You might find the \u005c'-wholename\u005c' test more useful, or perhaps \u005c'-samefile\u005c'.  Alternatively, if you are using GNU grep, you could use \u005c'find ... -print0 | grep -FzZ %s\u005c'."\u000a          + 0x148;\u000a  if (bVar20) {\u000a    __src = __s;\u000a  }\u000a  __s = plVar6->thousands_sep;\u000a  grouping = plVar6->grouping;\u000a  __n = strlen(__s);\u000a  thousands_sep = "";\u000a  if (__n < 0x11) {\u000a    thousands_sep = __s;\u000a  }\u000a  __s = buf + 0x287;\u000a  if (to_block_size < in_R8) {\u000a    if ((to_block_size != 0) && (in_R8 % to_block_size == 0)) {\u000a      auVar3 = ZEXT816(in_R8) / ZEXT816(to_block_size);\u000a      uVar7 = SUB168(ZEXT816(n) / (auVar3 & (undefined  [16])0xffffffffffffffff),0);\u000a      auVar2 = ZEXT816((ulong)(SUB168(ZEXT816(n) % (auVar3 & (undefined  [16])0xffffffffffffffff),0)\u000a                              * 10));\u000a      uVar8 = SUB168(auVar2 / (auVar3 & (undefined  [16])0xffffffffffffffff),0);\u000a      uVar16 = SUB168(auVar2 % (auVar3 & (undefined  [16])0xffffffffffffffff),0) * 2;\u000a      uVar12 = (ulong)(uVar16 != 0);\u000a      if (SUB168(auVar3,0) <= uVar16) {\u000a        uVar12 = (ulong)(-(uint)(SUB168(auVar3,0) < uVar16) & 1 | 2);\u000a      }\u000aLAB_004114c5:\u000a      uVar11 = (uint)uVar8;\u000a      uVar10 = (uint)uVar12;\u000a      uVar15 = 0xffffffff;\u000a      number = __s;\u000a      if ((from_block_size & 0x10) != 0) {\u000a        uVar16 = (ulong)uVar5;\u000a        uVar15 = 0;\u000a        number = __s;\u000a        if (uVar16 <= uVar7) {\u000a          uVar15 = 0;\u000a          uVar17 = uVar7;\u000a          do {\u000a            uVar7 = uVar17 / uVar16;\u000a            uVar10 = (int)uVar8 + (int)(uVar17 % uVar16) * 10;\u000a            uVar11 = uVar10 / uVar5;\u000a            uVar1 = ((int)uVar12 >> 1) + (uVar10 % uVar5) * 2;\u000a            uVar14 = (int)uVar12 + uVar1;\u000a            uVar10 = (uint)(uVar14 != 0);\u000a            if (uVar5 <= uVar1) {\u000a              uVar10 = -(uint)(uVar5 < uVar14) & 1 | 2;\u000a            }\u000a            uVar12 = (ulong)uVar10;\u000a            uVar15 = uVar15 + 1;\u000a            uVar8 = (ulong)uVar11;\u000a          } while (((int)uVar15 < 8) && (uVar17 = uVar7, uVar16 <= uVar7));\u000a          number = __s;\u000a          if (uVar7 < 10) {\u000a            if ((uVar13 & 3) == 1) {\u000a              if ((uVar11 & 1) + uVar10 < 3) goto LAB_00411736;\u000aLAB_00411720:\u000a              uVar11 = uVar11 + 1;\u000a              uVar10 = 0;\u000a              if (uVar11 != 10) goto LAB_00411736;\u000a              uVar7 = uVar7 + 1;\u000a              uVar10 = 0;\u000a              if (uVar7 < 10) {\u000a                uVar11 = 0;\u000a                goto LAB_00411736;\u000a              }\u000a              uVar7 = 10;\u000a              number = __s;\u000a            }\u000a            else {\u000a              if (((from_block_size & 3) == 0) && (uVar10 != 0)) goto LAB_00411720;\u000aLAB_00411736:\u000a              if (((from_block_size & 8) != 0) && (number = __s, uVar11 == 0)) goto LAB_00411787;\u000a              buf[0x286] = (char)uVar11 + '0';\u000a              memcpy(buf + (0x286 - __n_00),__src,__n_00);\u000a              number = buf + (0x286 - __n_00);\u000a            }\u000a            uVar10 = 0;\u000a            uVar11 = 0;\u000a          }\u000a        }\u000a      }\u000aLAB_00411787:\u000a      if ((from_block_size & 3) == 0) {\u000a        pcVar19 = number;\u000a        if (uVar11 + uVar10 != 0 && SCARRY4(uVar11,uVar10) == (int)(uVar11 + uVar10) < 0)\u000a        goto LAB_004117b1;\u000a      }\u000a      else {\u000a        pcVar19 = number;\u000a        if ((((byte)from_block_size & 3) == 1) &&\u000a           (pcVar19 = number, 5 < (int)((uint)(((uint)uVar7 & 1) + uVar10 != 0) + uVar11))) {\u000aLAB_004117b1:\u000a          uVar7 = uVar7 + 1;\u000a          pcVar19 = number;\u000a          if (((int)uVar15 < 8) &&\u000a             ((pcVar19 = number, (from_block_size & 0x10) != 0 &&\u000a              (pcVar19 = number, uVar7 == (ulong)uVar5)))) {\u000a            uVar15 = uVar15 + 1;\u000a            if ((from_block_size & 8) == 0) {\u000a              number[-1] = '0';\u000a              number = number + (-1 - __n_00);\u000a              memcpy(number,__src,__n_00);\u000a            }\u000a            uVar7 = 1;\u000a            pcVar19 = number;\u000a          }\u000a        }\u000a      }\u000a      do {\u000a        number[-1] = (char)uVar7 +\u000a                     ((byte)((SUB168(ZEXT816(uVar7) * ZEXT816(0xcccccccccccccccd) >> 0x40,0) &\u000a                             0xffffffff) >> 2) & 0xfe) * -5 | 0x30;\u000a        number = number + -1;\u000a        bVar20 = 9 < uVar7;\u000a        uVar7 = uVar7 / 10;\u000a      } while (bVar20);\u000a      goto joined_r0x0041168a;\u000a    }\u000a  }\u000a  else {\u000a    if (to_block_size % in_R8 == 0) {\u000a      uVar12 = 0;\u000a      uVar7 = SUB168(ZEXT816(to_block_size) / ZEXT816(in_R8),0) * n;\u000a      uVar8 = 0;\u000a      if (SUB168(ZEXT816(uVar7) /\u000a                 (ZEXT816(to_block_size) / ZEXT816(in_R8) & (undefined  [16])0xffffffffffffffff),0)\u000a          == n) goto LAB_004114c5;\u000a    }\u000a  }\u000a  if ((from_block_size & 0x10) == 0) {\u000a    adjust_value();\u000a    lVar18 = 0;\u000a    sprintf(buf,"%.0Lf");\u000a    __n = strlen(buf);\u000a    uVar15 = 0xffffffff;\u000a  }\u000a  else {\u000a    fVar4 = 1.00000000;\u000a    uVar15 = 0;\u000a    do {\u000a      fVar4 = fVar4 * (float)(ulong)uVar5;\u000a      uVar15 = uVar15 + 1;\u000a      if (7 < (int)uVar15) break;\u000a    } while ((float)(ulong)uVar5 * fVar4 <=\u000a             ((float)n + *(float *)(&DAT_004228b8 + (ulong)(-1 < (long)n) * 4)) *\u000a             (((float)in_R8 + *(float *)(&DAT_004228b8 + (ulong)(-1 < (long)in_R8) * 4)) /\u000a             ((float)to_block_size +\u000a             *(float *)(&DAT_004228b8 + (ulong)(-1 < (long)to_block_size) * 4))));\u000a    adjust_value();\u000a    sprintf(buf,"%.1Lf");\u000a    __n = strlen(buf);\u000a    if ((((ulong)((uVar13 & 0x20) >> 5) ^ 3) + __n_00 < __n) ||\u000a       ((lVar18 = __n_00 + 1, (from_block_size & 8) != 0 && (buf[__n - 1] == '0')))) {\u000a      adjust_value();\u000a      lVar18 = 0;\u000a      sprintf(buf,"%.0Lf");\u000a      __n = strlen(buf);\u000a    }\u000a  }\u000a  number = __s + -__n;\u000a  memmove(number,buf,__n);\u000a  pcVar19 = __s + -lVar18;\u000ajoined_r0x0041168a:\u000a  if ((from_block_size & 4) != 0) {\u000a    number = group_number(number,(size_t)(pcVar19 + -(long)number),grouping,thousands_sep);\u000a  }\u000a  if ((char)(byte)from_block_size < 0) {\u000a    if (((int)uVar15 < 0) && (uVar15 = 0, 1 < in_R8)) {\u000a      uVar15 = 0;\u000a      uVar12 = 1;\u000a      do {\u000a        if (uVar15 == 7) {\u000a          uVar15 = 8;\u000a          break;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar12 = uVar12 * (ulong)uVar5;\u000a      } while (uVar12 < in_R8);\u000a    }\u000a    if (((from_block_size & 0x40) != 0) && ((uVar15 | uVar13 & 0x100) != 0)) {\u000a      buf[0x287] = ' ';\u000a      __s = buf + 0x288;\u000a    }\u000a    if (uVar15 != 0) {\u000a      if (((from_block_size & 0x20) != 0) || (cVar9 = 'k', uVar15 != 1)) {\u000a        cVar9 = ""[(long)(int)uVar15];\u000a      }\u000a      *__s = cVar9;\u000a      __s = __s + 1;\u000a    }\u000a    if ((from_block_size & 0x100) != 0) {\u000a      if (((from_block_size & 0x20) != 0) && (uVar15 != 0)) {\u000a        *__s = 'i';\u000a        __s = __s + 1;\u000a      }\u000a      *__s = 'B';\u000a      __s = __s + 1;\u000a    }\u000a  }\u000a  *__s = 0;\u000a  return number;\u000a}\u000a\u000a
p220
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x88\nMOV R14,R8\nMOV R15,RCX\nMOV R12,RSI\nMOV R13,RDI\nMOV EAX,EDX\nAND EAX,0x3\nMOV dword ptr [RSP + 0x24],EAX\nMOV dword ptr [RSP + 0x18],EDX\nMOV EAX,EDX\nAND EAX,0x20\nMOV dword ptr [RSP + 0x20],EAX\nMOV EAX,0x400\nMOV ECX,0x3e8\nCMOVNZ ECX,EAX\nMOV dword ptr [RSP + 0x1c],ECX\nCALL 0x00402860\nMOV RBX,RAX\nMOV RBP,qword ptr [RBX]\nMOV RDI,RBP\nCALL 0x00402930\nLEA RCX,[RAX + -0x1]\nCMP RCX,0x10\nMOV ECX,0x1\nCMOVC RCX,RAX\nMOV qword ptr [RSP + 0x40],RCX\nMOV EAX,0x4217ea\nCMOVC RAX,RBP\nMOV qword ptr [RSP + 0x30],RAX\nMOV RBP,qword ptr [RBX + 0x8]\nMOV RBX,qword ptr [RBX + 0x10]\nMOV RDI,RBP\nCALL 0x00402930\nCMP RAX,0x11\nMOV ECX,0x41e69a\nCMOVC RCX,RBP\nLEA RAX,[0x287 + R12]\nMOV qword ptr [RSP + 0x10],RAX\nCMP R14,R15\nMOV qword ptr [RSP + 0x50],R14\nMOV qword ptr [RSP + 0x28],R12\nMOV qword ptr [RSP + 0x60],RBX\nMOV qword ptr [RSP + 0x58],RCX\nJBE 0x0041148d\nTEST R15,R15\nMOV R8D,dword ptr [RSP + 0x18]\nJZ 0x004114f3\nXOR EDX,EDX\nMOV RAX,R14\nDIV R15\nTEST RDX,RDX\nJNZ 0x004114f3\nXOR EDX,EDX\nMOV RAX,R14\nDIV R15\nMOV RSI,RAX\nXOR EDX,EDX\nMOV RAX,R13\nDIV RSI\nMOV R12,RAX\nADD RDX,RDX\nLEA RAX,[RDX + RDX*0x4]\nXOR EDX,EDX\nDIV RSI\nMOV RCX,RAX\nXOR EBX,EBX\nADD RDX,RDX\nSETNZ BL\nCMP RSI,RDX\nSBB EAX,EAX\nAND EAX,0x1\nOR EAX,0x2\nCMP RDX,RSI\nCMOVNC EBX,EAX\nJMP 0x004114c5\nXOR EDX,EDX\nMOV RAX,R15\nDIV R14\nTEST RDX,RDX\nMOV R8D,dword ptr [RSP + 0x18]\nJNZ 0x004114f3\nXOR EBX,EBX\nXOR EDX,EDX\nMOV RAX,R15\nDIV R14\nMOV RCX,RAX\nMOV R12,RCX\nIMUL R12,R13\nXOR EDX,EDX\nMOV RAX,R12\nDIV RCX\nCMP RAX,R13\nMOV ECX,0x0\nJNZ 0x004114f3\nMOV R13D,R8D\nAND R13D,0x10\nMOV EBP,0xffffffff\nJZ 0x00411695\nMOV ESI,dword ptr [RSP + 0x1c]\nMOV R9D,ESI\nXOR EBP,EBP\nCMP R9,R12\nJBE 0x0041169f\nMOV R15,qword ptr [RSP + 0x10]\nJMP 0x00411787\nMOV qword ptr [RSP + 0x70],R14\nXOR EAX,EAX\nTEST R14,R14\nSETNS AL\nFILD qword ptr [RSP + 0x70]\nFADD dword ptr [0x4228b8 + RAX*0x4]\nMOV qword ptr [RSP + 0x78],R13\nXOR EAX,EAX\nTEST R13,R13\nSETNS AL\nFILD qword ptr [RSP + 0x78]\nFADD dword ptr [0x4228b8 + RAX*0x4]\nMOV qword ptr [0x80 + RSP],R15\nXOR EAX,EAX\nTEST R15,R15\nSETNS AL\nFILD qword ptr [0x80 + RSP]\nFADD dword ptr [0x4228b8 + RAX*0x4]\nFDIVRP ST2,ST0\nFMULP\nTEST R8B,0x10\nJNZ 0x00411588\nFSTP tword ptr [RSP]\nMOV EDI,dword ptr [RSP + 0x24]\nCALL 0x00411940\nFSTP tword ptr [RSP]\nXOR R14D,R14D\nMOV ESI,0x4228e0\nXOR EAX,EAX\nMOV R12,qword ptr [RSP + 0x28]\nMOV RDI,R12\nCALL 0x00402ec0\nMOV RDI,R12\nCALL 0x00402930\nMOV EBP,0xffffffff\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00411667\nMOV EAX,dword ptr [RSP + 0x1c]\nMOV qword ptr [RSP + 0x68],RAX\nFLD1\nXOR EBP,EBP\nFILD qword ptr [RSP + 0x68]\nFLDZ\nNOP dword ptr [RAX + RAX*0x1]\nFSTP ST0\nFMUL ST1\nINC EBP\nFLD ST0\nFMUL ST2\nCMP EBP,0x7\nJG 0x004115b9\nFXCH ST3\nFUCOMI ST0,ST3\nFSTP ST3\nFLDZ\nJNC 0x004115a0\nFSTP ST1\nFSTP ST0\nFDIVP\nFLD ST0\nFSTP tword ptr [RSP + 0x30]\nFSTP tword ptr [RSP]\nMOV EBX,dword ptr [RSP + 0x24]\nMOV EDI,EBX\nCALL 0x00411940\nFSTP tword ptr [RSP]\nMOV ESI,0x4228e6\nXOR EAX,EAX\nMOV R12,qword ptr [RSP + 0x28]\nMOV RDI,R12\nCALL 0x00402ec0\nMOV RDI,R12\nCALL 0x00402930\nMOV ECX,dword ptr [RSP + 0x20]\nSHR RCX,0x5\nXOR RCX,0x3\nMOV R14,qword ptr [RSP + 0x40]\nADD RCX,R14\nCMP RCX,RAX\nMOV R13,qword ptr [RSP + 0x10]\nJC 0x00411628\nFLD tword ptr [RSP + 0x30]\nFSTP ST0\nINC R14\nTEST byte ptr [RSP + 0x18],0x8\nJZ 0x00411667\nCMP byte ptr [R12 + RAX*0x1 + -0x1],0x30\nJNZ 0x00411667\nFLD dword ptr [0x004228c0]\nFLD ST0\nFSTP tword ptr [RSP + 0x40]\nFLD tword ptr [RSP + 0x30]\nFMULP\nFSTP tword ptr [RSP]\nMOV EDI,EBX\nCALL 0x00411940\nFLD tword ptr [RSP + 0x40]\nFDIVP\nFSTP tword ptr [RSP]\nXOR R14D,R14D\nMOV ESI,0x4228e0\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x00402ec0\nMOV RDI,R12\nCALL 0x00402930\nMOV RBX,R13\nSUB RBX,RAX\nMOV RDI,RBX\nMOV RSI,R12\nMOV RDX,RAX\nCALL 0x00402d80\nMOV R15,R13\nSUB R15,R14\nMOV R8D,dword ptr [RSP + 0x18]\nTEST R8B,0x4\nJNZ 0x0041184b\nJMP 0x0041186b\nMOV R15,qword ptr [RSP + 0x10]\nJMP 0x00411787\nXOR EBP,EBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nXOR EDX,EDX\nMOV RAX,R12\nDIV R9\nLEA EDX,[RDX + RDX*0x4]\nLEA ECX,[RCX + RDX*0x2]\nMOV EDI,EBX\nSAR EDI,1\nXOR EDX,EDX\nMOV R12,RAX\nMOV EAX,ECX\nDIV ESI\nLEA ECX,[RDI + RDX*0x2]\nXOR EDX,EDX\nADD EBX,ECX\nSETNZ DL\nCMP ESI,EBX\nSBB EDI,EDI\nAND EDI,0x1\nOR EDI,0x2\nCMP ECX,ESI\nMOV EBX,EDX\nCMOVNC EBX,EDI\nINC EBP\nCMP EBP,0x7\nMOV ECX,EAX\nJG 0x004116f4\nCMP R9,R12\nJBE 0x004116b0\nCMP R12,0x9\nMOV EAX,dword ptr [RSP + 0x24]\nJA 0x00411711\nCMP EAX,0x1\nJNZ 0x00411718\nMOV EAX,ECX\nAND EAX,0x1\nADD EAX,EBX\nCMP EAX,0x2\nJA 0x00411720\nJMP 0x00411736\nMOV R15,qword ptr [RSP + 0x10]\nJMP 0x00411787\nTEST EAX,EAX\nJNZ 0x00411736\nTEST EBX,EBX\nJZ 0x00411736\nINC ECX\nXOR EBX,EBX\nCMP ECX,0xa\nJNZ 0x00411736\nINC R12\nXOR EBX,EBX\nCMP R12,0x9\nJA 0x0041177a\nXOR ECX,ECX\nTEST R8B,0x8\nJZ 0x00411747\nTEST ECX,ECX\nJNZ 0x00411747\nMOV R15,qword ptr [RSP + 0x10]\nJMP 0x00411787\nADD ECX,0x30\nMOV RAX,qword ptr [RSP + 0x28]\nLEA R15,[0x286 + RAX]\nMOV byte ptr [0x286 + RAX],CL\nMOV RDX,qword ptr [RSP + 0x40]\nSUB R15,RDX\nMOV RDI,R15\nMOV RSI,qword ptr [RSP + 0x30]\nCALL 0x00402bd0\nMOV R8D,dword ptr [RSP + 0x18]\nXOR EBX,EBX\nJMP 0x00411785\nMOV R12D,0xa\nMOV R15,qword ptr [RSP + 0x10]\nXOR ECX,ECX\nMOV EAX,R8D\nAND AL,0x3\nJZ 0x004117ad\nCMP AL,0x1\nJNZ 0x004117f7\nMOVSXD RAX,EBX\nMOV EDX,R12D\nAND EDX,0x1\nXOR ESI,ESI\nADD RDX,RAX\nSETNZ SIL\nADD ESI,ECX\nCMP ESI,0x5\nJG 0x004117b1\nJMP 0x004117f7\nADD ECX,EBX\nJLE 0x004117f7\nINC R12\nCMP EBP,0x7\nJG 0x004117f7\nTEST R13D,R13D\nJZ 0x004117f7\nMOV EAX,dword ptr [RSP + 0x1c]\nCMP R12,RAX\nJNZ 0x004117f7\nINC EBP\nTEST R8B,0x8\nJNZ 0x004117f1\nMOV byte ptr [R15 + -0x1],0x30\nDEC R15\nMOV RDX,qword ptr [RSP + 0x40]\nSUB R15,RDX\nMOV RDI,R15\nMOV RSI,qword ptr [RSP + 0x30]\nCALL 0x00402bd0\nMOV R8D,dword ptr [RSP + 0x18]\nMOV R12D,0x1\nMOV R13,qword ptr [RSP + 0x10]\nMOV RCX,-0x3333333333333333\nMOV RBX,R15\nNOP dword ptr [RAX]\nMOV RAX,R12\nMUL RCX\nMOV EAX,EDX\nSHR EAX,0x2\nAND EAX,0x3ffffffe\nLEA EAX,[RAX + RAX*0x4]\nMOV ESI,R12D\nSUB ESI,EAX\nOR SIL,0x30\nMOV byte ptr [RBX + -0x1],SIL\nDEC RBX\nSHR RDX,0x3\nCMP R12,0x9\nMOV R12,RDX\nJA 0x00411810\nMOV R12,qword ptr [RSP + 0x28]\nTEST R8B,0x4\nJZ 0x0041186b\nSUB R15,RBX\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x60]\nMOV RCX,qword ptr [RSP + 0x58]\nCALL 0x00411a10\nMOV R8D,dword ptr [RSP + 0x18]\nMOV RBX,RAX\nMOV R14,qword ptr [RSP + 0x50]\nMOV EAX,dword ptr [RSP + 0x1c]\nTEST R8B,R8B\nJNS 0x0041191f\nTEST EBP,EBP\nJNS 0x004118b7\nXOR EBP,EBP\nCMP R14,0x2\nJC 0x004118b7\nMOV EAX,EAX\nXOR EBP,EBP\nMOV ECX,0x1\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP EBP,0x7\nJZ 0x004118b2\nINC EBP\nIMUL RCX,RAX\nCMP RCX,R14\nJC 0x004118a0\nJMP 0x004118b7\nMOV EBP,0x8\nMOV EAX,R8D\nAND EAX,0x100\nTEST R8B,0x40\nJZ 0x004118de\nMOV ECX,EBP\nOR ECX,EAX\nJZ 0x004118de\nMOV byte ptr [0x287 + R12],0x20\nADD R12,0x288\nMOV R13,R12\nTEST EBP,EBP\nJZ 0x00411900\nCMP dword ptr [RSP + 0x20],0x0\nJNZ 0x004118f0\nMOV CL,0x6b\nCMP EBP,0x1\nJZ 0x004118f9\nMOVSXD RCX,EBP\nMOV CL,byte ptr [0x422920 + RCX]\nMOV byte ptr [R13],CL\nINC R13\nTEST EAX,EAX\nJZ 0x0041191f\nCMP dword ptr [RSP + 0x20],0x0\nJZ 0x00411917\nTEST EBP,EBP\nJZ 0x00411917\nMOV byte ptr [R13],0x69\nINC R13\nMOV byte ptr [R13],0x42\nINC R13\nMOV byte ptr [R13],0x0\nMOV RAX,RBX\nADD RSP,0x88\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p221
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 88 00 00 00\n4d 89 c6\n49 89 cf\n49 89 f4\n49 89 fd\n89 d0\n83 e0 03\n89 44 24 24\n89 54 24 18\n89 d0\n83 e0 20\n89 44 24 20\nb8 00 04 00 00\nb9 e8 03 00 00\n0f 45 c8\n89 4c 24 1c\ne8 a7 14 ff ff\n48 89 c3\n48 8b 2b\n48 89 ef\ne8 69 15 ff ff\n48 8d 48 ff\n48 83 f9 10\nb9 01 00 00 00\n48 0f 42 c8\n48 89 4c 24 40\nb8 ea 17 42 00\n48 0f 42 c5\n48 89 44 24 30\n48 8b 6b 08\n48 8b 5b 10\n48 89 ef\ne8 35 15 ff ff\n48 83 f8 11\nb9 9a e6 41 00\n48 0f 42 cd\n49 8d 84 24 87 02 00 00\n48 89 44 24 10\n4d 39 fe\n4c 89 74 24 50\n4c 89 64 24 28\n48 89 5c 24 60\n48 89 4c 24 58\n76 5f\n4d 85 ff\n44 8b 44 24 18\n0f 84 b7 00 00 00\n31 d2\n4c 89 f0\n49 f7 f7\n48 85 d2\n0f 85 a6 00 00 00\n31 d2\n4c 89 f0\n49 f7 f7\n48 89 c6\n31 d2\n4c 89 e8\n48 f7 f6\n49 89 c4\n48 01 d2\n48 8d 04 92\n31 d2\n48 f7 f6\n48 89 c1\n31 db\n48 01 d2\n0f 95 c3\n48 39 d6\n19 c0\n83 e0 01\n83 c8 02\n48 39 f2\n0f 43 d8\neb 38\n31 d2\n4c 89 f8\n49 f7 f6\n48 85 d2\n44 8b 44 24 18\n75 54\n31 db\n31 d2\n4c 89 f8\n49 f7 f6\n48 89 c1\n49 89 cc\n4d 0f af e5\n31 d2\n4c 89 e0\n48 f7 f1\n4c 39 e8\nb9 00 00 00 00\n75 2e\n45 89 c5\n41 83 e5 10\nbd ff ff ff ff\n0f 84 be 01 00 00\n8b 74 24 1c\n41 89 f1\n31 ed\n4d 39 e1\n0f 86 b6 01 00 00\n4c 8b 7c 24 10\ne9 94 02 00 00\n4c 89 74 24 70\n31 c0\n4d 85 f6\n0f 99 c0\ndf 6c 24 70\nd8 04 85 b8 28 42 00\n4c 89 6c 24 78\n31 c0\n4d 85 ed\n0f 99 c0\ndf 6c 24 78\nd8 04 85 b8 28 42 00\n4c 89 bc 24 80 00 00 00\n31 c0\n4d 85 ff\n0f 99 c0\ndf ac 24 80 00 00 00\nd8 04 85 b8 28 42 00\nde f2\nde c9\n41 f6 c0 10\n75 3d\ndb 3c 24\n8b 7c 24 24\ne8 e9 03 00 00\ndb 3c 24\n45 31 f6\nbe e0 28 42 00\n31 c0\n4c 8b 64 24 28\n4c 89 e7\ne8 4f 19 ff ff\n4c 89 e7\ne8 b7 13 ff ff\nbd ff ff ff ff\n4c 8b 6c 24 10\ne9 df 00 00 00\n8b 44 24 1c\n48 89 44 24 68\nd9 e8\n31 ed\ndf 6c 24 68\nd9 ee\n0f 1f 44 00 00\ndd d8\ndc c9\nff c5\nd9 c0\nd8 ca\n83 fd 07\n7f 0a\nd9 cb\ndb eb\ndd db\nd9 ee\n73 e7\ndd d9\ndd d8\nde f9\nd9 c0\ndb 7c 24 30\ndb 3c 24\n8b 5c 24 24\n89 df\ne8 6d 03 00 00\ndb 3c 24\nbe e6 28 42 00\n31 c0\n4c 8b 64 24 28\n4c 89 e7\ne8 d6 18 ff ff\n4c 89 e7\ne8 3e 13 ff ff\n8b 4c 24 20\n48 c1 e9 05\n48 83 f1 03\n4c 8b 74 24 40\n4c 01 f1\n48 39 c1\n4c 8b 6c 24 10\n72 18\ndb 6c 24 30\ndd d8\n49 ff c6\nf6 44 24 18 08\n74 47\n41 80 7c 04 ff 30\n75 3f\nd9 05 92 12 01 00\nd9 c0\ndb 7c 24 40\ndb 6c 24 30\nde c9\ndb 3c 24\n89 df\ne8 fc 02 00 00\ndb 6c 24 40\nde f9\ndb 3c 24\n45 31 f6\nbe e0 28 42 00\n31 c0\n4c 89 e7\ne8 61 18 ff ff\n4c 89 e7\ne8 c9 12 ff ff\n4c 89 eb\n48 29 c3\n48 89 df\n4c 89 e6\n48 89 c2\ne8 05 17 ff ff\n4d 89 ef\n4d 29 f7\n44 8b 44 24 18\n41 f6 c0 04\n0f 85 bb 01 00 00\ne9 d6 01 00 00\n4c 8b 7c 24 10\ne9 e8 00 00 00\n31 ed\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n31 d2\n4c 89 e0\n49 f7 f1\n8d 14 92\n8d 0c 51\n89 df\nd1 ff\n31 d2\n49 89 c4\n89 c8\nf7 f6\n8d 0c 57\n31 d2\n01 cb\n0f 95 c2\n39 de\n19 ff\n83 e7 01\n83 cf 02\n39 f1\n89 d3\n0f 43 df\nff c5\n83 fd 07\n89 c1\n7f 05\n4d 39 e1\n76 bc\n49 83 fc 09\n8b 44 24 24\n77 13\n83 f8 01\n75 15\n89 c8\n83 e0 01\n01 d8\n83 f8 02\n77 11\neb 25\n4c 8b 7c 24 10\neb 6f\n85 c0\n75 1a\n85 db\n74 16\nff c1\n31 db\n83 f9 0a\n75 0d\n49 ff c4\n31 db\n49 83 fc 09\n77 46\n31 c9\n41 f6 c0 08\n74 0b\n85 c9\n75 07\n4c 8b 7c 24 10\neb 40\n83 c1 30\n48 8b 44 24 28\n4c 8d b8 86 02 00 00\n88 88 86 02 00 00\n48 8b 54 24 40\n49 29 d7\n4c 89 ff\n48 8b 74 24 30\ne8 5f 14 ff ff\n44 8b 44 24 18\n31 db\neb 0b\n41 bc 0a 00 00 00\n4c 8b 7c 24 10\n31 c9\n44 89 c0\n24 03\n74 1f\n3c 01\n75 65\n48 63 c3\n44 89 e2\n83 e2 01\n31 f6\n48 01 c2\n40 0f 95 c6\n01 ce\n83 fe 05\n7f 06\neb 4a\n01 d9\n7e 46\n49 ff c4\n83 fd 07\n7f 3e\n45 85 ed\n74 39\n8b 44 24 1c\n49 39 c4\n75 30\nff c5\n41 f6 c0 08\n75 22\n41 c6 47 ff 30\n49 ff cf\n48 8b 54 24 40\n49 29 d7\n4c 89 ff\n48 8b 74 24 30\ne8 e4 13 ff ff\n44 8b 44 24 18\n41 bc 01 00 00 00\n4c 8b 6c 24 10\n48 b9 cd cc cc cc cc cc cc cc\n4c 89 fb\n0f 1f 80 00 00 00 00\n4c 89 e0\n48 f7 e1\n89 d0\nc1 e8 02\n25 fe ff ff 3f\n8d 04 80\n44 89 e6\n29 c6\n40 80 ce 30\n40 88 73 ff\n48 ff cb\n48 c1 ea 03\n49 83 fc 09\n49 89 d4\n77 d0\n4c 8b 64 24 28\n41 f6 c0 04\n74 20\n49 29 df\n48 89 df\n4c 89 fe\n48 8b 54 24 60\n48 8b 4c 24 58\ne8 ad 01 00 00\n44 8b 44 24 18\n48 89 c3\n4c 8b 74 24 50\n8b 44 24 1c\n45 84 c0\n0f 89 a2 00 00 00\n85 ed\n79 36\n31 ed\n49 83 fe 02\n72 2e\n89 c0\n31 ed\nb9 01 00 00 00\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n83 fd 07\n74 0d\nff c5\n48 0f af c8\n4c 39 f1\n72 f0\neb 05\nbd 08 00 00 00\n44 89 c0\n25 00 01 00 00\n41 f6 c0 40\n74 19\n89 e9\n09 c1\n74 13\n41 c6 84 24 87 02 00 00 20\n49 81 c4 88 02 00 00\n4d 89 e5\n85 ed\n74 1e\n83 7c 24 20 00\n75 07\nb1 6b\n83 fd 01\n74 09\n48 63 cd\n8a 89 20 29 42 00\n41 88 4d 00\n49 ff c5\n85 c0\n74 1b\n83 7c 24 20 00\n74 0c\n85 ed\n74 08\n41 c6 45 00 69\n49 ff c5\n41 c6 45 00 42\n49 ff c5\n41 c6 45 00 00\n48 89 d8\n48 81 c4 88 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p222
S'.text:0000000000411370\n.text:0000000000411371\n.text:0000000000411373\n.text:0000000000411375\n.text:0000000000411377\n.text:0000000000411379\n.text:000000000041137a\n.text:0000000000411381\n.text:0000000000411384\n.text:0000000000411387\n.text:000000000041138a\n.text:000000000041138d\n.text:000000000041138f\n.text:0000000000411392\n.text:0000000000411396\n.text:000000000041139a\n.text:000000000041139c\n.text:000000000041139f\n.text:00000000004113a3\n.text:00000000004113a8\n.text:00000000004113ad\n.text:00000000004113b0\n.text:00000000004113b4\n.text:00000000004113b9\n.text:00000000004113bc\n.text:00000000004113bf\n.text:00000000004113c2\n.text:00000000004113c7\n.text:00000000004113cb\n.text:00000000004113cf\n.text:00000000004113d4\n.text:00000000004113d8\n.text:00000000004113dd\n.text:00000000004113e2\n.text:00000000004113e6\n.text:00000000004113eb\n.text:00000000004113ef\n.text:00000000004113f3\n.text:00000000004113f6\n.text:00000000004113fb\n.text:00000000004113ff\n.text:0000000000411404\n.text:0000000000411408\n.text:0000000000411410\n.text:0000000000411415\n.text:0000000000411418\n.text:000000000041141d\n.text:0000000000411422\n.text:0000000000411427\n.text:000000000041142c\n.text:000000000041142e\n.text:0000000000411431\n.text:0000000000411436\n.text:000000000041143c\n.text:000000000041143e\n.text:0000000000411441\n.text:0000000000411444\n.text:0000000000411447\n.text:000000000041144d\n.text:000000000041144f\n.text:0000000000411452\n.text:0000000000411455\n.text:0000000000411458\n.text:000000000041145a\n.text:000000000041145d\n.text:0000000000411460\n.text:0000000000411463\n.text:0000000000411466\n.text:000000000041146a\n.text:000000000041146c\n.text:000000000041146f\n.text:0000000000411472\n.text:0000000000411474\n.text:0000000000411477\n.text:000000000041147a\n.text:000000000041147d\n.text:000000000041147f\n.text:0000000000411482\n.text:0000000000411485\n.text:0000000000411488\n.text:000000000041148b\n.text:000000000041148d\n.text:000000000041148f\n.text:0000000000411492\n.text:0000000000411495\n.text:0000000000411498\n.text:000000000041149d\n.text:000000000041149f\n.text:00000000004114a1\n.text:00000000004114a3\n.text:00000000004114a6\n.text:00000000004114a9\n.text:00000000004114ac\n.text:00000000004114af\n.text:00000000004114b3\n.text:00000000004114b5\n.text:00000000004114b8\n.text:00000000004114bb\n.text:00000000004114be\n.text:00000000004114c3\n.text:00000000004114c5\n.text:00000000004114c8\n.text:00000000004114cc\n.text:00000000004114d1\n.text:00000000004114d7\n.text:00000000004114db\n.text:00000000004114de\n.text:00000000004114e0\n.text:00000000004114e3\n.text:00000000004114e9\n.text:00000000004114ee\n.text:00000000004114f3\n.text:00000000004114f8\n.text:00000000004114fa\n.text:00000000004114fd\n.text:0000000000411500\n.text:0000000000411504\n.text:000000000041150b\n.text:0000000000411510\n.text:0000000000411512\n.text:0000000000411515\n.text:0000000000411518\n.text:000000000041151c\n.text:0000000000411523\n.text:000000000041152b\n.text:000000000041152d\n.text:0000000000411530\n.text:0000000000411533\n.text:000000000041153a\n.text:0000000000411541\n.text:0000000000411543\n.text:0000000000411545\n.text:0000000000411549\n.text:000000000041154b\n.text:000000000041154e\n.text:0000000000411552\n.text:0000000000411557\n.text:000000000041155a\n.text:000000000041155d\n.text:0000000000411562\n.text:0000000000411564\n.text:0000000000411569\n.text:000000000041156c\n.text:0000000000411571\n.text:0000000000411574\n.text:0000000000411579\n.text:000000000041157e\n.text:0000000000411583\n.text:0000000000411588\n.text:000000000041158c\n.text:0000000000411591\n.text:0000000000411593\n.text:0000000000411595\n.text:0000000000411599\n.text:000000000041159b\n.text:00000000004115a0\n.text:00000000004115a2\n.text:00000000004115a4\n.text:00000000004115a6\n.text:00000000004115a8\n.text:00000000004115aa\n.text:00000000004115ad\n.text:00000000004115af\n.text:00000000004115b1\n.text:00000000004115b3\n.text:00000000004115b5\n.text:00000000004115b7\n.text:00000000004115b9\n.text:00000000004115bb\n.text:00000000004115bd\n.text:00000000004115bf\n.text:00000000004115c1\n.text:00000000004115c5\n.text:00000000004115c8\n.text:00000000004115cc\n.text:00000000004115ce\n.text:00000000004115d3\n.text:00000000004115d6\n.text:00000000004115db\n.text:00000000004115dd\n.text:00000000004115e2\n.text:00000000004115e5\n.text:00000000004115ea\n.text:00000000004115ed\n.text:00000000004115f2\n.text:00000000004115f6\n.text:00000000004115fa\n.text:00000000004115fe\n.text:0000000000411603\n.text:0000000000411606\n.text:0000000000411609\n.text:000000000041160e\n.text:0000000000411610\n.text:0000000000411614\n.text:0000000000411616\n.text:0000000000411619\n.text:000000000041161e\n.text:0000000000411620\n.text:0000000000411626\n.text:0000000000411628\n.text:000000000041162e\n.text:0000000000411630\n.text:0000000000411634\n.text:0000000000411638\n.text:000000000041163a\n.text:000000000041163d\n.text:000000000041163f\n.text:0000000000411644\n.text:0000000000411648\n.text:000000000041164a\n.text:000000000041164d\n.text:0000000000411650\n.text:0000000000411655\n.text:0000000000411657\n.text:000000000041165a\n.text:000000000041165f\n.text:0000000000411662\n.text:0000000000411667\n.text:000000000041166a\n.text:000000000041166d\n.text:0000000000411670\n.text:0000000000411673\n.text:0000000000411676\n.text:000000000041167b\n.text:000000000041167e\n.text:0000000000411681\n.text:0000000000411686\n.text:000000000041168a\n.text:0000000000411690\n.text:0000000000411695\n.text:000000000041169a\n.text:000000000041169f\n.text:00000000004116a1\n.text:00000000004116b0\n.text:00000000004116b2\n.text:00000000004116b5\n.text:00000000004116b8\n.text:00000000004116bb\n.text:00000000004116be\n.text:00000000004116c0\n.text:00000000004116c2\n.text:00000000004116c4\n.text:00000000004116c7\n.text:00000000004116c9\n.text:00000000004116cb\n.text:00000000004116ce\n.text:00000000004116d0\n.text:00000000004116d2\n.text:00000000004116d5\n.text:00000000004116d7\n.text:00000000004116d9\n.text:00000000004116dc\n.text:00000000004116df\n.text:00000000004116e1\n.text:00000000004116e3\n.text:00000000004116e6\n.text:00000000004116e8\n.text:00000000004116eb\n.text:00000000004116ed\n.text:00000000004116ef\n.text:00000000004116f2\n.text:00000000004116f4\n.text:00000000004116f8\n.text:00000000004116fc\n.text:00000000004116fe\n.text:0000000000411701\n.text:0000000000411703\n.text:0000000000411705\n.text:0000000000411708\n.text:000000000041170a\n.text:000000000041170d\n.text:000000000041170f\n.text:0000000000411711\n.text:0000000000411716\n.text:0000000000411718\n.text:000000000041171a\n.text:000000000041171c\n.text:000000000041171e\n.text:0000000000411720\n.text:0000000000411722\n.text:0000000000411724\n.text:0000000000411727\n.text:0000000000411729\n.text:000000000041172c\n.text:000000000041172e\n.text:0000000000411732\n.text:0000000000411734\n.text:0000000000411736\n.text:000000000041173a\n.text:000000000041173c\n.text:000000000041173e\n.text:0000000000411740\n.text:0000000000411745\n.text:0000000000411747\n.text:000000000041174a\n.text:000000000041174f\n.text:0000000000411756\n.text:000000000041175c\n.text:0000000000411761\n.text:0000000000411764\n.text:0000000000411767\n.text:000000000041176c\n.text:0000000000411771\n.text:0000000000411776\n.text:0000000000411778\n.text:000000000041177a\n.text:0000000000411780\n.text:0000000000411785\n.text:0000000000411787\n.text:000000000041178a\n.text:000000000041178c\n.text:000000000041178e\n.text:0000000000411790\n.text:0000000000411792\n.text:0000000000411795\n.text:0000000000411798\n.text:000000000041179b\n.text:000000000041179d\n.text:00000000004117a0\n.text:00000000004117a4\n.text:00000000004117a6\n.text:00000000004117a9\n.text:00000000004117ab\n.text:00000000004117ad\n.text:00000000004117af\n.text:00000000004117b1\n.text:00000000004117b4\n.text:00000000004117b7\n.text:00000000004117b9\n.text:00000000004117bc\n.text:00000000004117be\n.text:00000000004117c2\n.text:00000000004117c5\n.text:00000000004117c7\n.text:00000000004117c9\n.text:00000000004117cd\n.text:00000000004117cf\n.text:00000000004117d4\n.text:00000000004117d7\n.text:00000000004117dc\n.text:00000000004117df\n.text:00000000004117e2\n.text:00000000004117e7\n.text:00000000004117ec\n.text:00000000004117f1\n.text:00000000004117f7\n.text:00000000004117fc\n.text:0000000000411806\n.text:0000000000411809\n.text:0000000000411810\n.text:0000000000411813\n.text:0000000000411816\n.text:0000000000411818\n.text:000000000041181b\n.text:0000000000411820\n.text:0000000000411823\n.text:0000000000411826\n.text:0000000000411828\n.text:000000000041182c\n.text:0000000000411830\n.text:0000000000411833\n.text:0000000000411837\n.text:000000000041183b\n.text:000000000041183e\n.text:0000000000411840\n.text:0000000000411845\n.text:0000000000411849\n.text:000000000041184b\n.text:000000000041184e\n.text:0000000000411851\n.text:0000000000411854\n.text:0000000000411859\n.text:000000000041185e\n.text:0000000000411863\n.text:0000000000411868\n.text:000000000041186b\n.text:0000000000411870\n.text:0000000000411874\n.text:0000000000411877\n.text:000000000041187d\n.text:000000000041187f\n.text:0000000000411881\n.text:0000000000411883\n.text:0000000000411887\n.text:0000000000411889\n.text:000000000041188b\n.text:000000000041188d\n.text:0000000000411892\n.text:00000000004118a0\n.text:00000000004118a3\n.text:00000000004118a5\n.text:00000000004118a7\n.text:00000000004118ab\n.text:00000000004118ae\n.text:00000000004118b0\n.text:00000000004118b2\n.text:00000000004118b7\n.text:00000000004118ba\n.text:00000000004118bf\n.text:00000000004118c3\n.text:00000000004118c5\n.text:00000000004118c7\n.text:00000000004118c9\n.text:00000000004118cb\n.text:00000000004118d4\n.text:00000000004118db\n.text:00000000004118de\n.text:00000000004118e0\n.text:00000000004118e2\n.text:00000000004118e7\n.text:00000000004118e9\n.text:00000000004118eb\n.text:00000000004118ee\n.text:00000000004118f0\n.text:00000000004118f3\n.text:00000000004118f9\n.text:00000000004118fd\n.text:0000000000411900\n.text:0000000000411902\n.text:0000000000411904\n.text:0000000000411909\n.text:000000000041190b\n.text:000000000041190d\n.text:000000000041190f\n.text:0000000000411914\n.text:0000000000411917\n.text:000000000041191c\n.text:000000000041191f\n.text:0000000000411924\n.text:0000000000411927\n.text:000000000041192e\n.text:000000000041192f\n.text:0000000000411931\n.text:0000000000411933\n.text:0000000000411935\n.text:0000000000411937\n.text:0000000000411938\n'
p223
tp224
sS'get_fts_info_name'
p225
(S'\n__stdcall get_fts_info_name()\n'
p226
V\u000achar * get_fts_info_name(void)\u000a\u000a{\u000a  char buf [10];\u000a  uint uVar1;\u000a  ulong in_RDI;\u000a  \u000a  uVar1 = (int)(in_RDI & 0xffffffff) - 1;\u000a  if (uVar1 < 0xe) {\u000a    return (&PTR_s_FTS_D_0041c570)[(long)(int)uVar1];\u000a  }\u000a  sprintf((char *)0x62de69,"[%d]",in_RDI & 0xffffffff);\u000a  return (char *)&ram0x0062de69;\u000a}\u000a\u000a
p227
S'MOV ECX,EDI\nLEA EAX,[RCX + -0x1]\nCMP EAX,0xe\nJNC 0x00403a85\nCDQE\nMOV RAX,qword ptr [0x41c570 + RAX*0x8]\nRET\nPUSH RAX\nMOV EDI,0x62de69\nMOV ESI,0x41c93d\nXOR EAX,EAX\nMOV EDX,ECX\nCALL 0x00402ec0\nMOV EAX,0x62de69\nPOP RCX\nRET\n'
p228
S'89 f9\n8d 41 ff\n83 f8 0e\n73 0b\n48 98\n48 8b 04 c5 70 c5 41 00\nc3\n50\nbf 69 de 62 00\nbe 3d c9 41 00\n31 c0\n89 ca\ne8 27 f4 ff ff\nb8 69 de 62 00\n59\nc3\n'
p229
S'.text:0000000000403a70\n.text:0000000000403a72\n.text:0000000000403a75\n.text:0000000000403a78\n.text:0000000000403a7a\n.text:0000000000403a7c\n.text:0000000000403a84\n.text:0000000000403a85\n.text:0000000000403a86\n.text:0000000000403a8b\n.text:0000000000403a90\n.text:0000000000403a92\n.text:0000000000403a94\n.text:0000000000403a99\n.text:0000000000403a9e\n.text:0000000000403a9f\n'
p230
tp231
sS'deregister_tm_clones'
p232
(S'\n__stdcall deregister_tm_clones()\n'
p233
V\u000a/* WARNING: Removing unreachable block (ram,0x00402fd5) */\u000a/* WARNING: Removing unreachable block (ram,0x00402fdf) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p234
S'MOV EAX,0x62de0f\nPUSH RBP\nSUB RAX,0x62de08\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00402ff0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00402ff0\nPOP RBP\nMOV EDI,0x62de08\nJMP RAX\nPOP RBP\nRET\n'
p235
S'b8 0f de 62 00\n55\n48 2d 08 de 62 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 08 de 62 00\nff e0\n5d\nc3\n'
p236
S'.text:0000000000402fc0\n.text:0000000000402fc5\n.text:0000000000402fc6\n.text:0000000000402fcc\n.text:0000000000402fd0\n.text:0000000000402fd3\n.text:0000000000402fd5\n.text:0000000000402fda\n.text:0000000000402fdd\n.text:0000000000402fdf\n.text:0000000000402fe0\n.text:0000000000402fe5\n.text:0000000000402ff0\n.text:0000000000402ff1\n'
p237
tp238
sS'parse_regex'
p239
(S'\n__stdcall parse_regex(parser_table * entry, char * * argv, int * arg_ptr)\n'
p240
V\u000a_Bool parse_regex(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = insert_regex(argv,arg_ptr,entry);\u000a  return _Var1;\u000a}\u000a\u000a
p241
S'MOV RAX,RDI\nMOV ECX,dword ptr [0x0062f09c]\nMOV RDI,RSI\nMOV RSI,RDX\nMOV RDX,RAX\nJMP 0x0040d6d0\n'
p242
S'48 89 f8\n8b 0d e3 30 22 00\n48 89 f7\n48 89 d6\n48 89 c2\ne9 09 17 00 00\n'
p243
S'.text:000000000040bfb0\n.text:000000000040bfb3\n.text:000000000040bfb9\n.text:000000000040bfbc\n.text:000000000040bfbf\n.text:000000000040bfc2\n'
p244
tp245
sS'do_arm_swaps'
p246
(S'\n__stdcall do_arm_swaps()\n'
p247
V\u000a_Bool do_arm_swaps(void)\u000a\u000a{\u000a  _Bool in_AL;\u000a  _Bool _Var1;\u000a  predicate *p;\u000a  \u000a  if (p != (predicate *)0x0) {\u000a    do {\u000a      do {\u000a        _Var1 = consider_arm_swap(p);\u000a      } while (_Var1 != false);\u000a      in_AL = do_arm_swaps();\u000a      p = p->pred_right;\u000a    } while (p != (predicate *)0x0);\u000a  }\u000a  return in_AL;\u000a}\u000a\u000a
p248
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJNZ 0x00406af0\nJMP 0x00406afe\nMOV RDI,qword ptr [0x110 + RBX]\nCALL 0x00406ac0\nMOV RBX,qword ptr [0x118 + RBX]\nTEST RBX,RBX\nJZ 0x00406afe\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,RBX\nCALL 0x00407400\nTEST AL,AL\nJNZ 0x00406af0\nJMP 0x00406acb\nPOP RBX\nRET\n'
p249
S'53\n48 89 fb\n48 85 db\n75 27\neb 33\n48 8b bb 10 01 00 00\ne8 e9 ff ff ff\n48 8b 9b 18 01 00 00\n48 85 db\n74 1b\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 df\ne8 08 09 00 00\n84 c0\n75 f4\neb cd\n5b\nc3\n'
p250
S'.text:0000000000406ac0\n.text:0000000000406ac1\n.text:0000000000406ac4\n.text:0000000000406ac7\n.text:0000000000406ac9\n.text:0000000000406acb\n.text:0000000000406ad2\n.text:0000000000406ad7\n.text:0000000000406ade\n.text:0000000000406ae1\n.text:0000000000406ae3\n.text:0000000000406af0\n.text:0000000000406af3\n.text:0000000000406af8\n.text:0000000000406afa\n.text:0000000000406afc\n.text:0000000000406afe\n.text:0000000000406aff\n'
p251
tp252
sS'quotearg_custom'
p253
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p254
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p255
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x004164a0\n'
p256
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p257
S'.text:0000000000416520\n.text:0000000000416523\n.text:0000000000416526\n.text:0000000000416529\n.text:000000000041652b\n.text:000000000041652e\n.text:0000000000416531\n.text:0000000000416534\n'
p258
tp259
sS'fts_palloc'
p260
(S'\n__stdcall fts_palloc(FTS * sp, size_t more)\n'
p261
V\u000a_Bool fts_palloc(FTS *sp,size_t more)\u000a\u000a{\u000a  int *piVar1;\u000a  char *pcVar2;\u000a  size_t __size;\u000a  \u000a  __size = more + 0x100 + sp->fts_pathlen;\u000a  if (CARRY8(more + 0x100,sp->fts_pathlen)) {\u000a    free(sp->fts_path);\u000a    sp->fts_path = (char *)0x0;\u000a    piVar1 = __errno_location();\u000a    *piVar1 = 0x24;\u000a  }\u000a  else {\u000a    sp->fts_pathlen = __size;\u000a    pcVar2 = (char *)realloc(sp->fts_path,__size);\u000a    if (pcVar2 != (char *)0x0) {\u000a      sp->fts_path = pcVar2;\u000a      return true;\u000a    }\u000a    free(sp->fts_path);\u000a    sp->fts_path = (char *)0x0;\u000a  }\u000a  return false;\u000a}\u000a\u000a
p262
S'PUSH RBX\nMOV RBX,RDI\nADD RSI,0x100\nADD RSI,qword ptr [RBX + 0x30]\nMOV RDI,qword ptr [RBX + 0x20]\nJNC 0x0041844f\nCALL 0x00402710\nMOV qword ptr [RBX + 0x20],0x0\nCALL 0x00402770\nMOV dword ptr [RAX],0x24\nJMP 0x00418476\nMOV qword ptr [RBX + 0x30],RSI\nCALL 0x00402d30\nTEST RAX,RAX\nJZ 0x00418465\nMOV qword ptr [RBX + 0x20],RAX\nMOV AL,0x1\nJMP 0x00418478\nMOV RDI,qword ptr [RBX + 0x20]\nCALL 0x00402710\nMOV qword ptr [RBX + 0x20],0x0\nXOR EAX,EAX\nPOP RBX\nRET\n'
p263
S'53\n48 89 fb\n48 81 c6 00 01 00 00\n48 03 73 30\n48 8b 7b 20\n73 1a\ne8 d6 a2 fe ff\n48 c7 43 20 00 00 00 00\ne8 29 a3 fe ff\nc7 00 24 00 00 00\neb 27\n48 89 73 30\ne8 d8 a8 fe ff\n48 85 c0\n74 08\n48 89 43 20\nb0 01\neb 13\n48 8b 7b 20\ne8 a2 a2 fe ff\n48 c7 43 20 00 00 00 00\n31 c0\n5b\nc3\n'
p264
S'.text:0000000000418420\n.text:0000000000418421\n.text:0000000000418424\n.text:000000000041842b\n.text:000000000041842f\n.text:0000000000418433\n.text:0000000000418435\n.text:000000000041843a\n.text:0000000000418442\n.text:0000000000418447\n.text:000000000041844d\n.text:000000000041844f\n.text:0000000000418453\n.text:0000000000418458\n.text:000000000041845b\n.text:000000000041845d\n.text:0000000000418461\n.text:0000000000418463\n.text:0000000000418465\n.text:0000000000418469\n.text:000000000041846e\n.text:0000000000418476\n.text:0000000000418478\n.text:0000000000418479\n'
p265
tp266
sS'close'
p267
(S'\n__stdcall close(int __fd)\n'
p268
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_0062d200)();\u000a  return iVar1;\u000a}\u000a\u000a
p269
S'JMP qword ptr [0x0062d200]\n'
p270
S'ff 25 3a a7 22 00\n'
p271
S'.plt:0000000000402ac0\n'
p272
tp273
sS'parse_ls'
p274
(S'\n__stdcall parse_ls(parser_table * entry, char * * argv, int * arg_ptr)\n'
p275
V\u000a_Bool parse_ls(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  insert_fls();\u000a  return true;\u000a}\u000a\u000a
p276
S'PUSH RAX\nXOR ESI,ESI\nCALL 0x0040d090\nMOV AL,0x1\nPOP RCX\nRET\n'
p277
S'50\n31 f6\ne8 e8 15 00 00\nb0 01\n59\nc3\n'
p278
S'.text:000000000040baa0\n.text:000000000040baa1\n.text:000000000040baa3\n.text:000000000040baa8\n.text:000000000040baaa\n.text:000000000040baab\n'
p279
tp280
sS'process_all_startpoints'
p281
(S'\n__stdcall process_all_startpoints(char * * argv)\n'
p282
V\u000a_Bool process_all_startpoints(char **argv)\u000a\u000a{\u000a  char *__s;\u000a  _Bool _Var1;\u000a  size_t sVar2;\u000a  long lVar3;\u000a  bool bVar4;\u000a  long in_RSI;\u000a  undefined2 local_2a;\u000a  \u000a  if ((int)argv < 1) {\u000aLAB_00403296:\u000a    local_2a = 0x2e;\u000a    _Var1 = find((char *)&local_2a);\u000a  }\u000a  else {\u000a    bVar4 = true;\u000a    lVar3 = 0;\u000a    do {\u000a      _Var1 = looks_like_expression(*(char **)(in_RSI + lVar3 * 8));\u000a      if (_Var1 != false) {\u000a        if (!bVar4) {\u000a          return true;\u000a        }\u000a        goto LAB_00403296;\u000a      }\u000a      __s = *(char **)(in_RSI + lVar3 * 8);\u000a      sVar2 = strlen(__s);\u000a      state.starting_path_length = (int)sVar2;\u000a      _Var1 = find(__s);\u000a      if (_Var1 == false) {\u000a        return false;\u000a      }\u000a      lVar3 = lVar3 + 1;\u000a      bVar4 = false;\u000a    } while (lVar3 < (long)(int)argv);\u000a    _Var1 = true;\u000a  }\u000a  return _Var1;\u000a}\u000a\u000a
p283
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV R14,RSI\nTEST EDI,EDI\nJLE 0x00403296\nMOVSXD R15,EDI\nMOV BPL,0x1\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [R14 + RBX*0x8]\nMOV ESI,0x1\nCALL 0x00408350\nTEST AL,AL\nJNZ 0x0040328e\nMOV R12,qword ptr [R14 + RBX*0x8]\nMOV RDI,R12\nCALL 0x00402930\nMOV dword ptr [0x0062f01c],EAX\nMOV RDI,R12\nCALL 0x004032d0\nTEST AL,AL\nJZ 0x004032a9\nINC RBX\nXOR EBP,EBP\nCMP RBX,R15\nJL 0x00403250\nMOV AL,0x1\nJMP 0x004032ab\nMOV AL,0x1\nTEST BPL,0x1\nJZ 0x004032ab\nMOV word ptr [RSP + 0xe],0x2e\nLEA RDI,[RSP + 0xe]\nCALL 0x004032d0\nJMP 0x004032ab\nXOR EAX,EAX\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p284
S'55\n41 57\n41 56\n41 54\n53\n48 83 ec 10\n49 89 f6\n85 ff\n7e 53\n4c 63 ff\n40 b5 01\n31 db\n0f 1f 44 00 00\n49 8b 3c de\nbe 01 00 00 00\ne8 f2 50 00 00\n84 c0\n75 2c\n4d 8b 24 de\n4c 89 e7\ne8 c2 f6 ff ff\n89 05 a8 bd 22 00\n4c 89 e7\ne8 54 00 00 00\n84 c0\n74 29\n48 ff c3\n31 ed\n4c 39 fb\n7c c6\nb0 01\neb 1d\nb0 01\n40 f6 c5 01\n74 15\n66 c7 44 24 0e 2e 00\n48 8d 7c 24 0e\ne8 29 00 00 00\neb 02\n31 c0\n48 83 c4 10\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p285
S'.text:0000000000403230\n.text:0000000000403231\n.text:0000000000403233\n.text:0000000000403235\n.text:0000000000403237\n.text:0000000000403238\n.text:000000000040323c\n.text:000000000040323f\n.text:0000000000403241\n.text:0000000000403243\n.text:0000000000403246\n.text:0000000000403249\n.text:000000000040324b\n.text:0000000000403250\n.text:0000000000403254\n.text:0000000000403259\n.text:000000000040325e\n.text:0000000000403260\n.text:0000000000403262\n.text:0000000000403266\n.text:0000000000403269\n.text:000000000040326e\n.text:0000000000403274\n.text:0000000000403277\n.text:000000000040327c\n.text:000000000040327e\n.text:0000000000403280\n.text:0000000000403283\n.text:0000000000403285\n.text:0000000000403288\n.text:000000000040328a\n.text:000000000040328c\n.text:000000000040328e\n.text:0000000000403290\n.text:0000000000403294\n.text:0000000000403296\n.text:000000000040329d\n.text:00000000004032a2\n.text:00000000004032a7\n.text:00000000004032a9\n.text:00000000004032ab\n.text:00000000004032af\n.text:00000000004032b0\n.text:00000000004032b2\n.text:00000000004032b4\n.text:00000000004032b6\n.text:00000000004032b7\n'
p286
tp287
sS'rotr8'
p288
(S'\n__stdcall rotr8()\n'
p289
V\u000auint8_t rotr8(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint8_t)((byte)(in_EDI << (8 - (byte)in_ESI & 0x1f)) |\u000a                  (byte)(in_EDI >> ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p290
S'MOV EAX,EDI\nMOV ECX,ESI\nSHR EAX,CL\nMOV ECX,0x8\nSUB ECX,ESI\nSHL EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p291
S'89 f8\n89 f1\nd3 e8\nb9 08 00 00 00\n29 f1\nd3 e7\n09 c7\n89 f8\nc3\n'
p292
S'.text:000000000041b920\n.text:000000000041b922\n.text:000000000041b924\n.text:000000000041b926\n.text:000000000041b92b\n.text:000000000041b92d\n.text:000000000041b92f\n.text:000000000041b931\n.text:000000000041b933\n'
p293
tp294
sS'mbsstr'
p295
(S'\n__stdcall mbsstr(char * haystack, char * needle)\n'
p296
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000achar * mbsstr(char *haystack,char *needle)\u000a\u000a{\u000a  uchar *puVar1;\u000a  uchar *puVar2;\u000a  uchar uVar3;\u000a  _Bool _Var4;\u000a  int iVar5;\u000a  size_t needle_len;\u000a  ulong uVar6;\u000a  ulong uVar7;\u000a  char *__string;\u000a  bool bVar8;\u000a  ulong uVar9;\u000a  long lVar10;\u000a  ulong uVar11;\u000a  char *result;\u000a  mbui_iterator_t iter_needle;\u000a  mbuiter_multi local_178;\u000a  uint local_138;\u000a  undefined8 local_134;\u000a  uint local_12c;\u000a  char *local_128;\u000a  undefined4 local_120;\u000a  undefined4 uStack284;\u000a  undefined4 local_118;\u000a  int local_114;\u000a  undefined4 uStack272;\u000a  undefined4 uStack268;\u000a  undefined4 local_108;\u000a  undefined4 uStack260;\u000a  undefined4 uStack256;\u000a  undefined4 uStack252;\u000a  uint local_f8;\u000a  int iStack244;\u000a  undefined4 uStack240;\u000a  uint local_ec;\u000a  char *local_e8;\u000a  undefined4 local_e0;\u000a  undefined4 uStack220;\u000a  undefined4 local_d8;\u000a  int local_d4;\u000a  undefined4 uStack208;\u000a  undefined4 uStack204;\u000a  undefined4 local_c8;\u000a  undefined4 uStack196;\u000a  undefined4 uStack192;\u000a  undefined4 uStack188;\u000a  char *local_b8;\u000a  uint local_b0;\u000a  int iStack172;\u000a  undefined4 uStack168;\u000a  _Bool local_a4;\u000a  char *local_a0;\u000a  size_t local_98;\u000a  _Bool local_90;\u000a  int local_8c;\u000a  mbuiter_multi local_70;\u000a  \u000a  needle_len = __ctype_get_mb_cur_max();\u000a  if (needle_len < 2) {\u000a    uVar3 = *needle;\u000a    if (uVar3 != 0) {\u000a      if (*haystack != 0) {\u000a        bVar8 = true;\u000a        uVar9 = 0;\u000a        uVar7 = 0;\u000a        uVar6 = 0;\u000a        __string = needle;\u000a        do {\u000a          if ((((9 < uVar6) && (bVar8)) && (uVar6 * 5 <= uVar7)) &&\u000a             (((__string == (char *)0x0 ||\u000a               (local_b8 = __string, needle_len = strnlen(__string,uVar7 - uVar9), uVar9 = uVar7,\u000a               local_b8[needle_len] == 0)) ||\u000a              (__string = local_b8 + needle_len, uVar9 = uVar7, __string == (char *)0x0)))) {\u000a            needle_len = strlen(needle);\u000a            _Var4 = knuth_morris_pratt((uchar *)haystack,(uchar *)needle,needle_len,\u000a                                       (uchar **)&local_b0);\u000a            if (_Var4 != false) {\u000a              return (char *)CONCAT44(iStack172,local_b0);\u000a            }\u000a            bVar8 = false;\u000a            __string = (char *)0x0;\u000a          }\u000a          if (*haystack == uVar3) {\u000a            lVar10 = 1;\u000a            do {\u000a              puVar1 = (uchar *)(needle + lVar10);\u000a              if (*puVar1 == 0) {\u000a                return (char *)(uchar *)haystack;\u000a              }\u000a              puVar2 = (uchar *)haystack + lVar10;\u000a              if (*puVar2 == 0) {\u000a                return (char *)0x0;\u000a              }\u000a              lVar10 = lVar10 + 1;\u000a            } while (*puVar2 == *puVar1);\u000a            uVar7 = uVar7 + lVar10;\u000a          }\u000a          else {\u000a            uVar7 = uVar7 + 1;\u000a          }\u000a          uVar6 = uVar6 + 1;\u000a          puVar1 = (uchar *)haystack + 1;\u000a          haystack = (char *)((uchar *)haystack + 1);\u000a          if (*puVar1 == 0) {\u000a            return (char *)0x0;\u000a          }\u000a        } while( true );\u000a      }\u000a      haystack = (char *)0x0;\u000a    }\u000a  }\u000a  else {\u000a    local_b0 = local_b0 & 0xffffff00;\u000a    iStack172 = 0;\u000a    uStack168 = 0;\u000a    local_a4 = false;\u000a    local_a0 = needle;\u000a    mbuiter_multi_next((mbuiter_multi *)&local_b0);\u000a    if ((local_90 == false) || (local_8c != 0)) {\u000a      local_70.in_shift = false;\u000a      local_70.state = 0;\u000a      local_70.next_done = false;\u000a      local_138 = local_138 & 0xffffff00;\u000a      local_134 = 0;\u000a      local_12c = local_12c & 0xffffff00;\u000a      local_128 = haystack;\u000a      local_70.cur.ptr = needle;\u000a      mbuiter_multi_next((mbuiter_multi *)&local_138);\u000a      if ((local_118._0_1_ == false) || (local_114 != 0)) {\u000a        bVar8 = true;\u000a        uVar9 = 0;\u000a        uVar6 = 0;\u000a        uVar7 = 0;\u000a        do {\u000a          if (((9 < uVar6) && (bVar8)) && (uVar6 * 5 <= uVar7)) {\u000a            if (uVar7 != uVar9) {\u000a              lVar10 = uVar9 - uVar7;\u000a              do {\u000a                mbuiter_multi_next(&local_70);\u000a                if ((local_70.cur.wc_valid != false) && (local_70.cur.wc == 0)) break;\u000a                local_70.cur.ptr = local_70.cur.ptr + local_70.cur.bytes;\u000a                local_70.next_done = false;\u000a                lVar10 = lVar10 + 1;\u000a              } while (lVar10 != 0);\u000a            }\u000a            mbuiter_multi_next(&local_70);\u000a            uVar9 = uVar7;\u000a            if ((local_70.cur.wc_valid != false) && (uVar9 = uVar7, local_70.cur.wc == 0)) {\u000a              _Var4 = knuth_morris_pratt_multibyte(haystack,needle,(char **)&local_f8);\u000a              if (_Var4 != false) {\u000a                return (char *)CONCAT44(iStack244,local_f8);\u000a              }\u000a              bVar8 = false;\u000a              uVar9 = uVar7;\u000a            }\u000a          }\u000a          uVar11 = uVar7 + 1;\u000a          if ((local_118._0_1_ == false) || (local_90 == false)) {\u000a            if ((CONCAT44(uStack284,local_120) == local_98) &&\u000a               (iVar5 = memcmp(local_128,local_a0,CONCAT44(uStack284,local_120)), iVar5 == 0))\u000a            goto LAB_0041212d;\u000a          }\u000a          else {\u000a            if (local_114 == local_8c) {\u000aLAB_0041212d:\u000a              local_c8 = local_108;\u000a              uStack196 = uStack260;\u000a              uStack192 = uStack256;\u000a              uStack188 = uStack252;\u000a              local_d8 = local_118;\u000a              local_d4 = local_114;\u000a              uStack208 = uStack272;\u000a              uStack204 = uStack268;\u000a              local_e0 = local_120;\u000a              uStack220 = uStack284;\u000a              local_f8 = local_138;\u000a              iStack244 = (int)local_134;\u000a              uStack240 = local_134._4_4_;\u000a              local_e8 = local_128 + CONCAT44(uStack284,local_120);\u000a              local_ec = local_12c & 0xffffff00;\u000a              local_178.in_shift = false;\u000a              local_178.state = 0;\u000a              local_178.next_done = false;\u000a              local_178.cur.ptr = needle;\u000a              mbuiter_multi_next(&local_178);\u000a              if ((local_178.cur.wc_valid != false) && (local_178.cur.wc == 0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a                abort();\u000a              }\u000a              local_178.cur.ptr = local_178.cur.ptr + local_178.cur.bytes;\u000a              local_178.next_done = false;\u000a              mbuiter_multi_next(&local_178);\u000a              if ((local_178.cur.wc_valid != false) && (local_178.cur.wc == 0)) {\u000a                return local_128;\u000a              }\u000a              uVar11 = uVar7 + 2;\u000a              do {\u000a                mbuiter_multi_next((mbuiter_multi *)&local_f8);\u000a                if ((local_d8._0_1_ != false) && (local_d4 == 0)) goto LAB_004122f3;\u000a                if ((local_178.cur.wc_valid == false) || (local_d8._0_1_ == false)) {\u000a                  if ((CONCAT44(uStack220,local_e0) != local_178.cur.bytes) ||\u000a                     (iVar5 = memcmp(local_e8,local_178.cur.ptr,CONCAT44(uStack220,local_e0)),\u000a                     iVar5 != 0)) break;\u000a                }\u000a                else {\u000a                  if (local_d4 != local_178.cur.wc) break;\u000a                }\u000a                local_e8 = local_e8 + CONCAT44(uStack220,local_e0);\u000a                local_ec = local_ec & 0xffffff00;\u000a                local_178.cur.ptr = local_178.cur.ptr + local_178.cur.bytes;\u000a                local_178.next_done = false;\u000a                mbuiter_multi_next(&local_178);\u000a                uVar11 = uVar11 + 1;\u000a                if ((local_178.cur.wc_valid != false) && (local_178.cur.wc == 0)) {\u000a                  return local_128;\u000a                }\u000a              } while( true );\u000a            }\u000a          }\u000a          uVar6 = uVar6 + 1;\u000a          local_128 = local_128 + CONCAT44(uStack284,local_120);\u000a          local_12c = local_12c & 0xffffff00;\u000a          mbuiter_multi_next((mbuiter_multi *)&local_138);\u000a          uVar7 = uVar11;\u000a        } while ((local_118._0_1_ == false) || (uVar7 = uVar11, local_114 != 0));\u000a      }\u000aLAB_004122f3:\u000a      haystack = (char *)0x0;\u000a    }\u000a  }\u000a  return haystack;\u000a}\u000a\u000a
p297
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x158\nMOV RBX,RSI\nMOV R14,RDI\nCALL 0x00402920\nCMP RAX,0x2\nJC 0x004122fb\nMOV qword ptr [0xe8 + RSP],RBX\nMOV byte ptr [0xd8 + RSP],0x0\nMOV qword ptr [0xdc + RSP],0x0\nMOV byte ptr [0xe4 + RSP],0x0\nLEA RDI,[0xd8 + RSP]\nCALL 0x00412bc0\nCMP byte ptr [0xf8 + RSP],0x0\nJZ 0x00411f90\nMOV EAX,dword ptr [0xfc + RSP]\nTEST EAX,EAX\nJZ 0x00412401\nMOV qword ptr [0x128 + RSP],RBX\nMOV byte ptr [0x118 + RSP],0x0\nMOV qword ptr [0x11c + RSP],0x0\nMOV byte ptr [0x124 + RSP],0x0\nMOV qword ptr [RSP + 0x60],R14\nMOV byte ptr [RSP + 0x50],0x0\nMOV qword ptr [RSP + 0x54],0x0\nMOV byte ptr [RSP + 0x5c],0x0\nLEA RDI,[RSP + 0x50]\nCALL 0x00412bc0\nCMP byte ptr [RSP + 0x70],0x0\nJZ 0x00411fe9\nMOV EAX,dword ptr [RSP + 0x74]\nTEST EAX,EAX\nJZ 0x004122f3\nMOV AL,0x1\nMOV dword ptr [RSP + 0xc],EAX\nXOR R12D,R12D\nXOR R15D,R15D\nXOR EBP,EBP\nMOV R13,R15\nCMP RBP,0xa\nJC 0x004120d1\nMOV R15,RBX\nMOV RBX,RBP\nMOV EAX,dword ptr [RSP + 0xc]\nAND AL,0x1\nLEA RBP,[0x118 + RSP]\nJZ 0x004120cb\nLEA RAX,[RBX + RBX*0x4]\nCMP R13,RAX\nJC 0x004120cb\nCMP R13,R12\nJZ 0x0041207a\nSUB R12,R13\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,RBP\nCALL 0x00412bc0\nCMP byte ptr [0x138 + RSP],0x0\nJZ 0x0041205d\nMOV EAX,dword ptr [0x13c + RSP]\nTEST EAX,EAX\nJZ 0x0041207a\nMOV RAX,qword ptr [0x130 + RSP]\nADD qword ptr [0x128 + RSP],RAX\nMOV byte ptr [0x124 + RSP],0x0\nINC R12\nJNZ 0x00412040\nMOV RDI,RBP\nCALL 0x00412bc0\nCMP byte ptr [0x138 + RSP],0x0\nJZ 0x004120c8\nMOV EAX,dword ptr [0x13c + RSP]\nTEST EAX,EAX\nMOV R12,R13\nMOV RBP,RBX\nMOV RBX,R15\nJNZ 0x004120d1\nMOV RDI,R14\nMOV RSI,RBX\nLEA RDX,[0x90 + RSP]\nCALL 0x00412440\nTEST AL,AL\nJNZ 0x00412423\nMOV dword ptr [RSP + 0xc],0x0\nMOV R12,R13\nJMP 0x004120d1\nMOV R12,R13\nMOV RBP,RBX\nMOV RBX,R15\nLEA R15,[R13 + 0x1]\nCMP byte ptr [RSP + 0x70],0x0\nJZ 0x00412100\nMOV AL,byte ptr [0xf8 + RSP]\nTEST AL,AL\nJZ 0x00412100\nMOV EAX,dword ptr [RSP + 0x74]\nCMP EAX,dword ptr [0xfc + RSP]\nJZ 0x0041212d\nJMP 0x004122c0\nMOV RDX,qword ptr [RSP + 0x68]\nCMP RDX,qword ptr [0xf0 + RSP]\nJNZ 0x004122c0\nMOV RDI,qword ptr [RSP + 0x60]\nMOV RSI,qword ptr [0xe8 + RSP]\nCALL 0x00402b20\nTEST EAX,EAX\nJNZ 0x004122c0\nMOVUPS XMM0,xmmword ptr [RSP + 0x50]\nMOVUPS XMM1,xmmword ptr [RSP + 0x60]\nMOVUPS XMM2,xmmword ptr [RSP + 0x70]\nMOVUPS XMM3,xmmword ptr [0x80 + RSP]\nMOVAPS xmmword ptr [0xc0 + RSP],XMM3\nMOVAPS xmmword ptr [0xb0 + RSP],XMM2\nMOVAPS xmmword ptr [0xa0 + RSP],XMM1\nMOVAPS xmmword ptr [0x90 + RSP],XMM0\nMOV RAX,qword ptr [0xa8 + RSP]\nADD qword ptr [0xa0 + RSP],RAX\nMOV byte ptr [0x9c + RSP],0x0\nMOV qword ptr [RSP + 0x20],RBX\nMOV byte ptr [RSP + 0x10],0x0\nMOV qword ptr [RSP + 0x14],0x0\nMOV byte ptr [RSP + 0x1c],0x0\nLEA RDI,[RSP + 0x10]\nCALL 0x00412bc0\nCMP byte ptr [RSP + 0x30],0x0\nJZ 0x004121b1\nMOV EAX,dword ptr [RSP + 0x34]\nTEST EAX,EAX\nJZ 0x0041242d\nMOV RAX,qword ptr [RSP + 0x28]\nADD qword ptr [RSP + 0x20],RAX\nMOV byte ptr [RSP + 0x1c],0x0\nLEA RDI,[RSP + 0x10]\nCALL 0x00412bc0\nCMP byte ptr [RSP + 0x30],0x0\nJZ 0x004121dd\nMOV EAX,dword ptr [RSP + 0x34]\nTEST EAX,EAX\nJZ 0x004123fc\nADD R13,0x2\nMOV R15,R13\nNOP word ptr CS:[RAX + RAX*0x1]\nLEA RDI,[0x90 + RSP]\nCALL 0x00412bc0\nMOVZX ECX,byte ptr [0xb0 + RSP]\nMOV EAX,dword ptr [0xb4 + RSP]\nTEST CL,CL\nJZ 0x00412218\nTEST EAX,EAX\nJZ 0x004122f3\nTEST CL,CL\nSETZ CL\nCMP byte ptr [RSP + 0x30],0x0\nJZ 0x00412240\nTEST CL,CL\nJNZ 0x00412240\nCMP EAX,dword ptr [RSP + 0x34]\nJZ 0x00412265\nJMP 0x004122c0\nMOV RDX,qword ptr [0xa8 + RSP]\nCMP RDX,qword ptr [RSP + 0x28]\nJNZ 0x004122c0\nMOV RDI,qword ptr [0xa0 + RSP]\nMOV RSI,qword ptr [RSP + 0x20]\nCALL 0x00402b20\nTEST EAX,EAX\nJNZ 0x004122c0\nMOV RAX,qword ptr [0xa8 + RSP]\nADD qword ptr [0xa0 + RSP],RAX\nMOV byte ptr [0x9c + RSP],0x0\nMOV RAX,qword ptr [RSP + 0x28]\nADD qword ptr [RSP + 0x20],RAX\nMOV byte ptr [RSP + 0x1c],0x0\nLEA RDI,[RSP + 0x10]\nCALL 0x00412bc0\nINC R15\nCMP byte ptr [RSP + 0x30],0x0\nJZ 0x004121f0\nMOV EAX,dword ptr [RSP + 0x34]\nTEST EAX,EAX\nJNZ 0x004121f0\nJMP 0x004123fc\nINC RBP\nMOV RAX,qword ptr [RSP + 0x68]\nADD qword ptr [RSP + 0x60],RAX\nMOV byte ptr [RSP + 0x5c],0x0\nLEA RDI,[RSP + 0x50]\nCALL 0x00412bc0\nCMP byte ptr [RSP + 0x70],0x0\nJZ 0x00411ff7\nMOV EAX,dword ptr [RSP + 0x74]\nTEST EAX,EAX\nJNZ 0x00411ff7\nXOR R14D,R14D\nJMP 0x00412401\nMOV R12B,byte ptr [RBX]\nTEST R12B,R12B\nJZ 0x00412401\nCMP byte ptr [R14],0x0\nJZ 0x004123f7\nMOV R8B,0x1\nXOR R15D,R15D\nMOV RDI,RBX\nXOR R9D,R9D\nXOR EBP,EBP\nXOR R13D,R13D\nCMP R13,0xa\nJC 0x004123ae\nMOV EAX,R8D\nAND AL,0x1\nJZ 0x004123ae\nLEA RAX,[R13 + R13*0x4]\nCMP RBP,RAX\nJC 0x004123ae\nTEST RDI,RDI\nJZ 0x0041237e\nMOV byte ptr [RSP + 0xc],R12B\nMOV RSI,RBP\nSUB RSI,R9\nMOV R12,R8\nMOV qword ptr [0xd0 + RSP],RDI\nCALL 0x00402aa0\nMOV RDI,qword ptr [0xd0 + RSP]\nMOV R8,R12\nMOV R12B,byte ptr [RSP + 0xc]\nCMP byte ptr [RDI + RAX*0x1],0x0\nMOV R9,RBP\nJZ 0x0041237e\nADD RDI,RAX\nMOV R9,RBP\nJNZ 0x004123ae\nMOV R15,R9\nMOV RDI,RBX\nCALL 0x00402930\nMOV RDI,R14\nMOV RSI,RBX\nMOV RDX,RAX\nLEA RCX,[0xd8 + RSP]\nCALL 0x00412800\nTEST AL,AL\nJNZ 0x00412419\nXOR R8D,R8D\nXOR EDI,EDI\nMOV R9,R15\nXOR R15D,R15D\nCMP byte ptr [R14],R12B\nJNZ 0x004123e0\nMOV EAX,0x1\nNOP dword ptr [RAX + RAX*0x1]\nMOVZX ECX,byte ptr [RBX + RAX*0x1]\nTEST CL,CL\nJZ 0x00412401\nMOVZX EDX,byte ptr [R14 + RAX*0x1]\nTEST DL,DL\nJZ 0x00412404\nINC RAX\nCMP DL,CL\nJZ 0x004123c0\nADD RBP,RAX\nJMP 0x004123e3\nINC RBP\nINC R13\nCMP byte ptr [R14 + 0x1],0x0\nLEA R14,[R14 + 0x1]\nJNZ 0x00412322\nJMP 0x00412404\nXOR R15D,R15D\nJMP 0x00412404\nMOV R14,qword ptr [RSP + 0x60]\nMOV R15,R14\nMOV RAX,R15\nADD RSP,0x158\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV R15,qword ptr [0xd8 + RSP]\nJMP 0x00412404\nMOV R14,qword ptr [0x90 + RSP]\nJMP 0x00412401\nCALL 0x00402750\n'
p298
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 58 01 00 00\n48 89 f3\n49 89 fe\ne8 e4 09 ff ff\n48 83 f8 02\n0f 82 b5 03 00 00\n48 89 9c 24 e8 00 00 00\nc6 84 24 d8 00 00 00 00\n48 c7 84 24 dc 00 00 00 00 00 00 00\nc6 84 24 e4 00 00 00 00\n48 8d bc 24 d8 00 00 00\ne8 49 0c 00 00\n80 bc 24 f8 00 00 00 00\n74 0f\n8b 84 24 fc 00 00 00\n85 c0\n0f 84 71 04 00 00\n48 89 9c 24 28 01 00 00\nc6 84 24 18 01 00 00 00\n48 c7 84 24 1c 01 00 00 00 00 00 00\nc6 84 24 24 01 00 00 00\n4c 89 74 24 60\nc6 44 24 50 00\n48 c7 44 24 54 00 00 00 00\nc6 44 24 5c 00\n48 8d 7c 24 50\ne8 ea 0b 00 00\n80 7c 24 70 00\n74 0c\n8b 44 24 74\n85 c0\n0f 84 0a 03 00 00\nb0 01\n89 44 24 0c\n45 31 e4\n45 31 ff\n31 ed\n4d 89 fd\n48 83 fd 0a\n0f 82 cd 00 00 00\n49 89 df\n48 89 eb\n8b 44 24 0c\n24 01\n48 8d ac 24 18 01 00 00\n0f 84 ad 00 00 00\n48 8d 04 9b\n49 39 c5\n0f 82 a0 00 00 00\n4d 39 e5\n74 4a\n4d 29 ec\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 ef\ne8 78 0b 00 00\n80 bc 24 38 01 00 00 00\n74 0b\n8b 84 24 3c 01 00 00\n85 c0\n74 1d\n48 8b 84 24 30 01 00 00\n48 01 84 24 28 01 00 00\nc6 84 24 24 01 00 00 00\n49 ff c4\n75 c6\n48 89 ef\ne8 3e 0b 00 00\n80 bc 24 38 01 00 00 00\n74 3c\n8b 84 24 3c 01 00 00\n85 c0\n4d 89 ec\n48 89 dd\n4c 89 fb\n75 31\n4c 89 f7\n48 89 de\n48 8d 94 24 90 00 00 00\ne8 8d 03 00 00\n84 c0\n0f 85 68 03 00 00\nc7 44 24 0c 00 00 00 00\n4d 89 ec\neb 09\n4d 89 ec\n48 89 dd\n4c 89 fb\n4d 8d 7d 01\n80 7c 24 70 00\n74 24\n8a 84 24 f8 00 00 00\n84 c0\n74 19\n8b 44 24 74\n3b 84 24 fc 00 00 00\n74 39\ne9 c7 01 00 00\n48 8b 54 24 68\n48 3b 94 24 f0 00 00 00\n0f 85 ad 01 00 00\n48 8b 7c 24 60\n48 8b b4 24 e8 00 00 00\ne8 fb 09 ff ff\n85 c0\n0f 85 93 01 00 00\n0f 10 44 24 50\n0f 10 4c 24 60\n0f 10 54 24 70\n0f 10 9c 24 80 00 00 00\n0f 29 9c 24 c0 00 00 00\n0f 29 94 24 b0 00 00 00\n0f 29 8c 24 a0 00 00 00\n0f 29 84 24 90 00 00 00\n48 8b 84 24 a8 00 00 00\n48 01 84 24 a0 00 00 00\nc6 84 24 9c 00 00 00 00\n48 89 5c 24 20\nc6 44 24 10 00\n48 c7 44 24 14 00 00 00 00\nc6 44 24 1c 00\n48 8d 7c 24 10\ne8 22 0a 00 00\n80 7c 24 30 00\n74 0c\n8b 44 24 34\n85 c0\n0f 84 7c 02 00 00\n48 8b 44 24 28\n48 01 44 24 20\nc6 44 24 1c 00\n48 8d 7c 24 10\ne8 f6 09 00 00\n80 7c 24 30 00\n74 0c\n8b 44 24 34\n85 c0\n0f 84 1f 02 00 00\n49 83 c5 02\n4d 89 ef\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8d bc 24 90 00 00 00\ne8 c3 09 00 00\n0f b6 8c 24 b0 00 00 00\n8b 84 24 b4 00 00 00\n84 c9\n74 08\n85 c0\n0f 84 db 00 00 00\n84 c9\n0f 94 c1\n80 7c 24 30 00\n74 1c\n84 c9\n75 18\n3b 44 24 34\n74 37\ne9 8d 00 00 00\n48 8b 94 24 a8 00 00 00\n48 3b 54 24 28\n75 71\n48 8b bc 24 a0 00 00 00\n48 8b 74 24 20\ne8 bf 08 ff ff\n85 c0\n75 5b\n48 8b 84 24 a8 00 00 00\n48 01 84 24 a0 00 00 00\nc6 84 24 9c 00 00 00 00\n48 8b 44 24 28\n48 01 44 24 20\nc6 44 24 1c 00\n48 8d 7c 24 10\ne8 2a 09 00 00\n49 ff c7\n80 7c 24 30 00\n0f 84 4c ff ff ff\n8b 44 24 34\n85 c0\n0f 85 40 ff ff ff\ne9 47 01 00 00\n48 ff c5\n48 8b 44 24 68\n48 01 44 24 60\nc6 44 24 5c 00\n48 8d 7c 24 50\ne8 e4 08 00 00\n80 7c 24 70 00\n0f 84 10 fd ff ff\n8b 44 24 74\n85 c0\n0f 85 04 fd ff ff\n45 31 f6\ne9 06 01 00 00\n44 8a 23\n45 84 e4\n0f 84 fa 00 00 00\n41 80 3e 00\n0f 84 e6 00 00 00\n41 b0 01\n45 31 ff\n48 89 df\n45 31 c9\n31 ed\n45 31 ed\n49 83 fd 0a\n0f 82 82 00 00 00\n44 89 c0\n24 01\n74 7b\n4b 8d 44 ad 00\n48 39 c5\n72 71\n48 85 ff\n74 3c\n44 88 64 24 0c\n48 89 ee\n4c 29 ce\n4d 89 c4\n48 89 bc 24 d0 00 00 00\ne8 43 07 ff ff\n48 8b bc 24 d0 00 00 00\n4d 89 e0\n44 8a 64 24 0c\n80 3c 07 00\n49 89 e9\n74 08\n48 01 c7\n49 89 e9\n75 30\n4d 89 cf\n48 89 df\ne8 a7 05 ff ff\n4c 89 f7\n48 89 de\n48 89 c2\n48 8d 8c 24 d8 00 00 00\ne8 61 04 00 00\n84 c0\n75 76\n45 31 c0\n31 ff\n4d 89 f9\n45 31 ff\n45 38 26\n75 2d\nb8 01 00 00 00\n0f 1f 84 00 00 00 00 00\n0f b6 0c 03\n84 c9\n74 39\n41 0f b6 14 06\n84 d2\n74 33\n48 ff c0\n38 ca\n74 e8\n48 01 c5\neb 06\n48 ff c5\n49 ff c5\n41 80 7e 01 00\n4d 8d 76 01\n0f 85 2d ff ff ff\neb 0d\n45 31 ff\neb 08\n4c 8b 74 24 60\n4d 89 f7\n4c 89 f8\n48 81 c4 58 01 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n4c 8b bc 24 d8 00 00 00\neb e1\n4c 8b b4 24 90 00 00 00\neb d4\ne8 1e 03 ff ff\n'
p299
S'.text:0000000000411f20\n.text:0000000000411f21\n.text:0000000000411f23\n.text:0000000000411f25\n.text:0000000000411f27\n.text:0000000000411f29\n.text:0000000000411f2a\n.text:0000000000411f31\n.text:0000000000411f34\n.text:0000000000411f37\n.text:0000000000411f3c\n.text:0000000000411f40\n.text:0000000000411f46\n.text:0000000000411f4e\n.text:0000000000411f56\n.text:0000000000411f62\n.text:0000000000411f6a\n.text:0000000000411f72\n.text:0000000000411f77\n.text:0000000000411f7f\n.text:0000000000411f81\n.text:0000000000411f88\n.text:0000000000411f8a\n.text:0000000000411f90\n.text:0000000000411f98\n.text:0000000000411fa0\n.text:0000000000411fac\n.text:0000000000411fb4\n.text:0000000000411fb9\n.text:0000000000411fbe\n.text:0000000000411fc7\n.text:0000000000411fcc\n.text:0000000000411fd1\n.text:0000000000411fd6\n.text:0000000000411fdb\n.text:0000000000411fdd\n.text:0000000000411fe1\n.text:0000000000411fe3\n.text:0000000000411fe9\n.text:0000000000411feb\n.text:0000000000411fef\n.text:0000000000411ff2\n.text:0000000000411ff5\n.text:0000000000411ff7\n.text:0000000000411ffa\n.text:0000000000411ffe\n.text:0000000000412004\n.text:0000000000412007\n.text:000000000041200a\n.text:000000000041200e\n.text:0000000000412010\n.text:0000000000412018\n.text:000000000041201e\n.text:0000000000412022\n.text:0000000000412025\n.text:000000000041202b\n.text:000000000041202e\n.text:0000000000412030\n.text:0000000000412033\n.text:0000000000412040\n.text:0000000000412043\n.text:0000000000412048\n.text:0000000000412050\n.text:0000000000412052\n.text:0000000000412059\n.text:000000000041205b\n.text:000000000041205d\n.text:0000000000412065\n.text:000000000041206d\n.text:0000000000412075\n.text:0000000000412078\n.text:000000000041207a\n.text:000000000041207d\n.text:0000000000412082\n.text:000000000041208a\n.text:000000000041208c\n.text:0000000000412093\n.text:0000000000412095\n.text:0000000000412098\n.text:000000000041209b\n.text:000000000041209e\n.text:00000000004120a0\n.text:00000000004120a3\n.text:00000000004120a6\n.text:00000000004120ae\n.text:00000000004120b3\n.text:00000000004120b5\n.text:00000000004120bb\n.text:00000000004120c3\n.text:00000000004120c6\n.text:00000000004120c8\n.text:00000000004120cb\n.text:00000000004120ce\n.text:00000000004120d1\n.text:00000000004120d5\n.text:00000000004120da\n.text:00000000004120dc\n.text:00000000004120e3\n.text:00000000004120e5\n.text:00000000004120e7\n.text:00000000004120eb\n.text:00000000004120f2\n.text:00000000004120f4\n.text:0000000000412100\n.text:0000000000412105\n.text:000000000041210d\n.text:0000000000412113\n.text:0000000000412118\n.text:0000000000412120\n.text:0000000000412125\n.text:0000000000412127\n.text:000000000041212d\n.text:0000000000412132\n.text:0000000000412137\n.text:000000000041213c\n.text:0000000000412144\n.text:000000000041214c\n.text:0000000000412154\n.text:000000000041215c\n.text:0000000000412164\n.text:000000000041216c\n.text:0000000000412174\n.text:000000000041217c\n.text:0000000000412181\n.text:0000000000412186\n.text:000000000041218f\n.text:0000000000412194\n.text:0000000000412199\n.text:000000000041219e\n.text:00000000004121a3\n.text:00000000004121a5\n.text:00000000004121a9\n.text:00000000004121ab\n.text:00000000004121b1\n.text:00000000004121b6\n.text:00000000004121bb\n.text:00000000004121c0\n.text:00000000004121c5\n.text:00000000004121ca\n.text:00000000004121cf\n.text:00000000004121d1\n.text:00000000004121d5\n.text:00000000004121d7\n.text:00000000004121dd\n.text:00000000004121e1\n.text:00000000004121e4\n.text:00000000004121f0\n.text:00000000004121f8\n.text:00000000004121fd\n.text:0000000000412205\n.text:000000000041220c\n.text:000000000041220e\n.text:0000000000412210\n.text:0000000000412212\n.text:0000000000412218\n.text:000000000041221a\n.text:000000000041221d\n.text:0000000000412222\n.text:0000000000412224\n.text:0000000000412226\n.text:0000000000412228\n.text:000000000041222c\n.text:000000000041222e\n.text:0000000000412240\n.text:0000000000412248\n.text:000000000041224d\n.text:000000000041224f\n.text:0000000000412257\n.text:000000000041225c\n.text:0000000000412261\n.text:0000000000412263\n.text:0000000000412265\n.text:000000000041226d\n.text:0000000000412275\n.text:000000000041227d\n.text:0000000000412282\n.text:0000000000412287\n.text:000000000041228c\n.text:0000000000412291\n.text:0000000000412296\n.text:0000000000412299\n.text:000000000041229e\n.text:00000000004122a4\n.text:00000000004122a8\n.text:00000000004122aa\n.text:00000000004122b0\n.text:00000000004122c0\n.text:00000000004122c3\n.text:00000000004122c8\n.text:00000000004122cd\n.text:00000000004122d2\n.text:00000000004122d7\n.text:00000000004122dc\n.text:00000000004122e1\n.text:00000000004122e7\n.text:00000000004122eb\n.text:00000000004122ed\n.text:00000000004122f3\n.text:00000000004122f6\n.text:00000000004122fb\n.text:00000000004122fe\n.text:0000000000412301\n.text:0000000000412307\n.text:000000000041230b\n.text:0000000000412311\n.text:0000000000412314\n.text:0000000000412317\n.text:000000000041231a\n.text:000000000041231d\n.text:000000000041231f\n.text:0000000000412322\n.text:0000000000412326\n.text:000000000041232c\n.text:000000000041232f\n.text:0000000000412331\n.text:0000000000412333\n.text:0000000000412338\n.text:000000000041233b\n.text:000000000041233d\n.text:0000000000412340\n.text:0000000000412342\n.text:0000000000412347\n.text:000000000041234a\n.text:000000000041234d\n.text:0000000000412350\n.text:0000000000412358\n.text:000000000041235d\n.text:0000000000412365\n.text:0000000000412368\n.text:000000000041236d\n.text:0000000000412371\n.text:0000000000412374\n.text:0000000000412376\n.text:0000000000412379\n.text:000000000041237c\n.text:000000000041237e\n.text:0000000000412381\n.text:0000000000412384\n.text:0000000000412389\n.text:000000000041238c\n.text:000000000041238f\n.text:0000000000412392\n.text:000000000041239a\n.text:000000000041239f\n.text:00000000004123a1\n.text:00000000004123a3\n.text:00000000004123a6\n.text:00000000004123a8\n.text:00000000004123ab\n.text:00000000004123ae\n.text:00000000004123b1\n.text:00000000004123b3\n.text:00000000004123b8\n.text:00000000004123c0\n.text:00000000004123c4\n.text:00000000004123c6\n.text:00000000004123c8\n.text:00000000004123cd\n.text:00000000004123cf\n.text:00000000004123d1\n.text:00000000004123d4\n.text:00000000004123d6\n.text:00000000004123d8\n.text:00000000004123db\n.text:00000000004123e0\n.text:00000000004123e3\n.text:00000000004123e6\n.text:00000000004123eb\n.text:00000000004123ef\n.text:00000000004123f5\n.text:00000000004123f7\n.text:00000000004123fa\n.text:00000000004123fc\n.text:0000000000412401\n.text:0000000000412404\n.text:0000000000412407\n.text:000000000041240e\n.text:000000000041240f\n.text:0000000000412411\n.text:0000000000412413\n.text:0000000000412415\n.text:0000000000412417\n.text:0000000000412418\n.text:0000000000412419\n.text:0000000000412421\n.text:0000000000412423\n.text:000000000041242b\n.text:000000000041242d\n'
p300
tp301
sS'free_dir'
p302
(S'\n__stdcall free_dir(FTS * sp)\n'
p303
V\u000avoid free_dir(FTS *sp)\u000a\u000a{\u000a  if ((*(ushort *)&sp->fts_options & 0x102) == 0) {\u000a    free((void *)sp->fts_cycle);\u000a    return;\u000a  }\u000a  if ((Hash_table *)sp->fts_cycle != (Hash_table *)0x0) {\u000a    hash_free((Hash_table *)sp->fts_cycle);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p304
S'MOVZX EAX,word ptr [RDI + 0x48]\nTEST AX,0x102\nJZ 0x00418a08\nMOV RDI,qword ptr [RDI + 0x58]\nTEST RDI,RDI\nJZ 0x00418a11\nJMP 0x00410ac0\nMOV RDI,qword ptr [RDI + 0x58]\nJMP 0x00402710\nRET\n'
p305
S'0f b7 47 48\n66 a9 02 01\n74 0e\n48 8b 7f 58\n48 85 ff\n74 0e\ne9 b8 80 ff ff\n48 8b 7f 58\ne9 ff 9c fe ff\nc3\n'
p306
S'.text:00000000004189f0\n.text:00000000004189f4\n.text:00000000004189f8\n.text:00000000004189fa\n.text:00000000004189fe\n.text:0000000000418a01\n.text:0000000000418a03\n.text:0000000000418a08\n.text:0000000000418a0c\n.text:0000000000418a11\n'
p307
tp308
sS'fdopendir'
p309
(S'\n__stdcall fdopendir(int __fd)\n'
p310
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aDIR * fdopendir(int __fd)\u000a\u000a{\u000a  DIR *pDVar1;\u000a  \u000a  pDVar1 = (DIR *)(*(code *)PTR_fdopendir_0062d3b8)();\u000a  return pDVar1;\u000a}\u000a\u000a
p311
S'JMP qword ptr [0x0062d3b8]\n'
p312
S'ff 25 82 a5 22 00\n'
p313
S'.plt:0000000000402e30\n'
p314
tp315
sS'convert_time'
p316
(S'\n__stdcall convert_time(anon_subr_tm_ptr_time_t_ptr_tm_ptr * convert, long_int t, tm * tm)\n'
p317
V\u000atm * convert_time(tm *(*convert)(time_t *,tm *),long_int t,tm *tm)\u000a\u000a{\u000a  tm *ptVar1;\u000a  long_int local_8;\u000a  \u000a  local_8 = t;\u000a  ptVar1 = (*convert)(&local_8,tm);\u000a  return ptVar1;\u000a}\u000a\u000a
p318
S'PUSH RAX\nMOV RAX,RDI\nMOV qword ptr [RSP],RSI\nMOV RDI,RSP\nMOV RSI,RDX\nCALL RAX\nPOP RCX\nRET\n'
p319
S'50\n48 89 f8\n48 89 34 24\n48 89 e7\n48 89 d6\nff d0\n59\nc3\n'
p320
S'.text:000000000041a6b0\n.text:000000000041a6b1\n.text:000000000041a6b4\n.text:000000000041a6b8\n.text:000000000041a6bb\n.text:000000000041a6be\n.text:000000000041a6c0\n.text:000000000041a6c1\n'
p321
tp322
sS'pred_fprint'
p323
(S'\n__stdcall pred_fprint(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p324
V\u000a_Bool pred_fprint(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  print_quoted(*(FILE **)(pred_ptr->args + 8),*(quoting_options **)(pred_ptr->args + 0x20),\u000a               (char *)(ulong)pred_ptr->args[0x18],"%s\u005cn");\u000a  return true;\u000a}\u000a\u000a
p325
S'PUSH RAX\nMOV RAX,RDI\nMOV RDI,qword ptr [RDX + 0x40]\nMOV RSI,qword ptr [RDX + 0x58]\nMOVZX EDX,byte ptr [RDX + 0x50]\nMOV ECX,0x424ac0\nMOV R8,RAX\nCALL 0x0040f5b0\nMOV AL,0x1\nPOP RCX\nRET\n'
p326
S'50\n48 89 f8\n48 8b 7a 40\n48 8b 72 58\n0f b6 52 50\nb9 c0 4a 42 00\n49 89 c0\ne8 03 b5 00 00\nb0 01\n59\nc3\n'
p327
S'.text:0000000000404090\n.text:0000000000404091\n.text:0000000000404094\n.text:0000000000404098\n.text:000000000040409c\n.text:00000000004040a0\n.text:00000000004040a5\n.text:00000000004040a8\n.text:00000000004040ad\n.text:00000000004040af\n.text:00000000004040b0\n'
p328
tp329
sS'memcpy'
p330
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p331
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_0062d288)();\u000a  return pvVar1;\u000a}\u000a\u000a
p332
S'JMP qword ptr [0x0062d288]\n'
p333
S'ff 25 b2 a6 22 00\n'
p334
S'.plt:0000000000402bd0\n'
p335
tp336
sS'pred_ilname'
p337
(S'\n__stdcall pred_ilname(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p338
V\u000a_Bool pred_ilname(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = match_lname(pathname,stat_buf,pred_ptr);\u000a  return _Var1;\u000a}\u000a\u000a
p339
S'MOV ECX,0x1\nJMP 0x00404b50\n'
p340
S'b9 01 00 00 00\ne9 e6 09 00 00\n'
p341
S'.text:0000000000404160\n.text:0000000000404165\n'
p342
tp343
sS'pred_negate'
p344
(S'\n__stdcall pred_negate(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p345
V\u000a_Bool pred_negate(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = apply_predicate(pathname,stat_buf,pred_ptr->pred_right);\u000a  return (_Bool)(_Var1 ^ 1);\u000a}\u000a\u000a
p346
S'PUSH RAX\nMOV RDX,qword ptr [0x118 + RDX]\nCALL 0x004088a0\nXOR AL,0x1\nPOP RCX\nRET\n'
p347
S'50\n48 8b 92 18 01 00 00\ne8 e3 45 00 00\n34 01\n59\nc3\n'
p348
S'.text:00000000004042b0\n.text:00000000004042b1\n.text:00000000004042b8\n.text:00000000004042bd\n.text:00000000004042bf\n.text:00000000004042c0\n'
p349
tp350
sS'insert_fls'
p351
(S'\n__stdcall insert_fls()\n'
p352
V\u000a_Bool insert_fls(void)\u000a\u000a{\u000a  undefined extraout_AL;\u000a  undefined extraout_AL_00;\u000a  undefined uVar1;\u000a  predicate *ppVar2;\u000a  char *path;\u000a  parser_table *entry;\u000a  \u000a  ppVar2 = insert_primary_noarg(entry);\u000a  if (path == (char *)0x0) {\u000a    open_stdout((format_val *)ppVar2->args);\u000a    uVar1 = extraout_AL_00;\u000a  }\u000a  else {\u000a    open_output_file(path,(format_val *)ppVar2->args);\u000a    uVar1 = extraout_AL;\u000a  }\u000a  ppVar2->no_default_print = true;\u000a  ppVar2->side_effects = true;\u000a  ppVar2->est_success_rate = 1.00000000;\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p353
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nCALL 0x00407760\nMOV RBX,RAX\nMOV RSI,RBX\nADD RSI,0x38\nTEST R14,R14\nJZ 0x0040d0b5\nMOV RDI,R14\nCALL 0x0040d0e0\nJMP 0x0040d0bd\nMOV RDI,RSI\nCALL 0x0040a980\nMOV byte ptr [RBX + 0x19],0x1\nMOV byte ptr [RBX + 0x18],0x1\nMOV dword ptr [RBX + 0x24],0x3f800000\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p354
S'41 56\n53\n50\n49 89 f6\ne8 c4 a6 ff ff\n48 89 c3\n48 89 de\n48 83 c6 38\n4d 85 f6\n74 0a\n4c 89 f7\ne8 2d 00 00 00\neb 08\n48 89 f7\ne8 c3 d8 ff ff\nc6 43 19 01\nc6 43 18 01\nc7 43 24 00 00 80 3f\n48 83 c4 08\n5b\n41 5e\nc3\n'
p355
S'.text:000000000040d090\n.text:000000000040d092\n.text:000000000040d093\n.text:000000000040d094\n.text:000000000040d097\n.text:000000000040d09c\n.text:000000000040d09f\n.text:000000000040d0a2\n.text:000000000040d0a6\n.text:000000000040d0a9\n.text:000000000040d0ab\n.text:000000000040d0ae\n.text:000000000040d0b3\n.text:000000000040d0b5\n.text:000000000040d0b8\n.text:000000000040d0bd\n.text:000000000040d0c1\n.text:000000000040d0c5\n.text:000000000040d0cc\n.text:000000000040d0d0\n.text:000000000040d0d1\n.text:000000000040d0d3\n'
p356
tp357
sS'quotearg_n_custom_mem'
p358
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p359
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p360
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x0062e6c0]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x0062e6b0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0062e6a0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0062e690]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00415210\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004160a0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p361
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 f7 81 21 00\n48 89 44 24 30\n0f 10 05 db 81 21 00\n0f 29 44 24 20\n0f 10 05 bf 81 21 00\n0f 29 44 24 10\n0f 10 05 a3 81 21 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p362
S'.text:00000000004164b0\n.text:00000000004164b1\n.text:00000000004164b3\n.text:00000000004164b5\n.text:00000000004164b6\n.text:00000000004164ba\n.text:00000000004164bd\n.text:00000000004164c0\n.text:00000000004164c2\n.text:00000000004164c9\n.text:00000000004164ce\n.text:00000000004164d5\n.text:00000000004164da\n.text:00000000004164e1\n.text:00000000004164e6\n.text:00000000004164ed\n.text:00000000004164f1\n.text:00000000004164f4\n.text:00000000004164f7\n.text:00000000004164fc\n.text:00000000004164fe\n.text:0000000000416501\n.text:0000000000416504\n.text:0000000000416507\n.text:000000000041650c\n.text:0000000000416510\n.text:0000000000416511\n.text:0000000000416513\n.text:0000000000416515\n.text:0000000000416516\n'
p363
tp364
sS'parse_print0'
p365
(S'\n__stdcall parse_print0(parser_table * entry, char * * argv, int * arg_ptr)\n'
p366
V\u000a_Bool parse_print0(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  insert_fprint();\u000a  return true;\u000a}\u000a\u000a
p367
S'PUSH RAX\nXOR ESI,ESI\nCALL 0x0040d1b0\nMOV AL,0x1\nPOP RCX\nRET\n'
p368
S'50\n31 f6\ne8 b8 12 00 00\nb0 01\n59\nc3\n'
p369
S'.text:000000000040bef0\n.text:000000000040bef1\n.text:000000000040bef3\n.text:000000000040bef8\n.text:000000000040befa\n.text:000000000040befb\n'
p370
tp371
sS'fts_compar'
p372
(S'\n__stdcall fts_compar(void * a, void * b)\n'
p373
V\u000aint fts_compar(void *a,void *b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (**(code **)(*(long *)(*(long *)a + 0x50) + 0x40))();\u000a  return iVar1;\u000a}\u000a\u000a
p374
S'PUSH RAX\nMOV RAX,qword ptr [RDI]\nMOV RAX,qword ptr [RAX + 0x50]\nCALL qword ptr [RAX + 0x40]\nPOP RCX\nRET\n'
p375
S'50\n48 8b 07\n48 8b 40 50\nff 50 40\n59\nc3\n'
p376
S'.text:0000000000419f40\n.text:0000000000419f41\n.text:0000000000419f44\n.text:0000000000419f48\n.text:0000000000419f4b\n.text:0000000000419f4c\n'
p377
tp378
sS'insert_false'
p379
(S'\n__stdcall insert_false()\n'
p380
V\u000a_Bool insert_false(void)\u000a\u000a{\u000a  undefined in_AL;\u000a  parser_table *entry;\u000a  predicate *ppVar1;\u000a  \u000a  entry = find_parser("false");\u000a  ppVar1 = insert_primary_noarg(entry);\u000a  ppVar1->est_success_rate = 0.00000000;\u000a  *(undefined4 *)&ppVar1->side_effects = 0;\u000a  return (_Bool)in_AL;\u000a}\u000a\u000a
p381
S'PUSH RAX\nMOV EDI,0x420f93\nCALL 0x0040a7f0\nMOV RDI,RAX\nCALL 0x00407760\nMOV dword ptr [RAX + 0x24],0x0\nMOV dword ptr [RAX + 0x18],0x0\nPOP RAX\nRET\n'
p382
S'50\nbf 93 0f 42 00\ne8 25 d5 ff ff\n48 89 c7\ne8 8d a4 ff ff\nc7 40 24 00 00 00 00\nc7 40 18 00 00 00 00\n58\nc3\n'
p383
S'.text:000000000040d2c0\n.text:000000000040d2c1\n.text:000000000040d2c6\n.text:000000000040d2cb\n.text:000000000040d2ce\n.text:000000000040d2d3\n.text:000000000040d2da\n.text:000000000040d2e1\n.text:000000000040d2e2\n'
p384
tp385
sS'fts_padjust'
p386
(S'\n__stdcall fts_padjust(FTS * sp, FTSENT * head)\n'
p387
V\u000avoid fts_padjust(FTS *sp,FTSENT *head)\u000a\u000a{\u000a  _ftsent *p_Var1;\u000a  char *pcVar2;\u000a  _ftsent **pp_Var3;\u000a  \u000a  p_Var1 = sp->fts_child;\u000a  pcVar2 = sp->fts_path;\u000a  while (p_Var1 != (_ftsent *)0x0) {\u000a    if ((_ftsent *)p_Var1->fts_accpath != p_Var1 + 1) {\u000a      p_Var1->fts_accpath =\u000a           pcVar2 + (long)&((_ftsent *)\u000a                           ((long)(_ftsent *)p_Var1->fts_accpath - (long)p_Var1->fts_path))->\u000a                           fts_cycle;\u000a    }\u000a    p_Var1->fts_path = pcVar2;\u000a    p_Var1 = p_Var1->fts_link;\u000a  }\u000a  while (-1 < head->fts_level) {\u000a    if ((FTSENT *)head->fts_accpath != head + 1) {\u000a      head->fts_accpath =\u000a           pcVar2 + (long)&((FTSENT *)((long)(FTSENT *)head->fts_accpath - (long)head->fts_path))->\u000a                           fts_cycle;\u000a    }\u000a    head->fts_path = pcVar2;\u000a    pp_Var3 = &head->fts_link;\u000a    if (head->fts_link == (_ftsent *)0x0) {\u000a      pp_Var3 = &head->fts_parent;\u000a    }\u000a    head = (FTSENT *)*pp_Var3;\u000a  }\u000a  return;\u000a}\u000a\u000a
p388
S'MOV RCX,qword ptr [RDI + 0x8]\nMOV RAX,qword ptr [RDI + 0x20]\nTEST RCX,RCX\nJNZ 0x00419e6d\nJMP 0x00419ea8\nMOV qword ptr [RCX + 0x38],RAX\nMOV RCX,qword ptr [RCX + 0x10]\nTEST RCX,RCX\nJZ 0x00419ea8\nMOV RDX,qword ptr [RCX + 0x30]\nLEA RDI,[0x108 + RCX]\nCMP RDX,RDI\nJZ 0x00419e60\nSUB RDX,qword ptr [RCX + 0x38]\nADD RDX,RAX\nMOV qword ptr [RCX + 0x30],RDX\nJMP 0x00419e60\nMOV qword ptr [RSI + 0x38],RAX\nCMP qword ptr [RSI + 0x10],0x0\nLEA RCX,[RSI + 0x10]\nLEA RDX,[RSI + 0x8]\nCMOVZ RCX,RDX\nMOV RSI,qword ptr [RCX]\nCMP qword ptr [RSI + 0x58],0x0\nJS 0x00419ecc\nMOV RCX,qword ptr [RSI + 0x30]\nLEA RDX,[0x108 + RSI]\nCMP RCX,RDX\nJZ 0x00419e90\nSUB RCX,qword ptr [RSI + 0x38]\nADD RCX,RAX\nMOV qword ptr [RSI + 0x30],RCX\nJMP 0x00419e90\nRET\n'
p389
S'48 8b 4f 08\n48 8b 47 20\n48 85 c9\n75 10\neb 49\n48 89 41 38\n48 8b 49 10\n48 85 c9\n74 3b\n48 8b 51 30\n48 8d b9 08 01 00 00\n48 39 fa\n74 e3\n48 2b 51 38\n48 01 c2\n48 89 51 30\neb d6\n48 89 46 38\n48 83 7e 10 00\n48 8d 4e 10\n48 8d 56 08\n48 0f 44 ca\n48 8b 31\n48 83 7e 58 00\n78 1d\n48 8b 4e 30\n48 8d 96 08 01 00 00\n48 39 d1\n74 d1\n48 2b 4e 38\n48 01 c1\n48 89 4e 30\neb c4\nc3\n'
p390
S'.text:0000000000419e50\n.text:0000000000419e54\n.text:0000000000419e58\n.text:0000000000419e5b\n.text:0000000000419e5d\n.text:0000000000419e60\n.text:0000000000419e64\n.text:0000000000419e68\n.text:0000000000419e6b\n.text:0000000000419e6d\n.text:0000000000419e71\n.text:0000000000419e78\n.text:0000000000419e7b\n.text:0000000000419e7d\n.text:0000000000419e81\n.text:0000000000419e84\n.text:0000000000419e88\n.text:0000000000419e90\n.text:0000000000419e94\n.text:0000000000419e99\n.text:0000000000419e9d\n.text:0000000000419ea1\n.text:0000000000419ea5\n.text:0000000000419ea8\n.text:0000000000419ead\n.text:0000000000419eaf\n.text:0000000000419eb3\n.text:0000000000419eba\n.text:0000000000419ebd\n.text:0000000000419ebf\n.text:0000000000419ec3\n.text:0000000000419ec6\n.text:0000000000419eca\n.text:0000000000419ecc\n'
p391
tp392
sS'_init'
p393
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p394
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___0062cff8;\u000a  if (PTR___gmon_start___0062cff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___0062cff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p395
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x0062cff8]\nTEST RAX,RAX\nJZ 0x004026d2\nCALL RAX\nADD RSP,0x8\nRET\n'
p396
S'48 83 ec 08\n48 8b 05 2d a9 22 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p397
S'.init:00000000004026c0\n.init:00000000004026c4\n.init:00000000004026cb\n.init:00000000004026ce\n.init:00000000004026d0\n.init:00000000004026d2\n.init:00000000004026d6\n'
p398
tp399
sS'parse_negate'
p400
(S'\n__stdcall parse_negate(parser_table * entry, char * * argv, int * arg_ptr)\n'
p401
V\u000a_Bool parse_negate(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  predicate *ppVar1;\u000a  \u000a  ppVar1 = get_new_pred_chk_op(entry,(char *)0x0);\u000a  ppVar1->pred_func = pred_negate;\u000a  ppVar1->p_type = UNI_OP;\u000a  ppVar1->p_prec = NEGATE_PREC;\u000a  *(undefined2 *)&ppVar1->need_stat = 0;\u000a  return true;\u000a}\u000a\u000a
p402
S'PUSH RAX\nXOR ESI,ESI\nCALL 0x00406c00\nMOV qword ptr [RAX],0x4042b0\nMOV dword ptr [RAX + 0x10],0x2\nMOV dword ptr [RAX + 0x14],0x4\nMOV word ptr [RAX + 0x1a],0x0\nMOV AL,0x1\nPOP RCX\nRET\n'
p403
S'50\n31 f6\ne8 98 bd ff ff\n48 c7 00 b0 42 40 00\nc7 40 10 02 00 00 00\nc7 40 14 04 00 00 00\n66 c7 40 1a 00 00\nb0 01\n59\nc3\n'
p404
S'.text:000000000040ae60\n.text:000000000040ae61\n.text:000000000040ae63\n.text:000000000040ae68\n.text:000000000040ae6f\n.text:000000000040ae76\n.text:000000000040ae7d\n.text:000000000040ae83\n.text:000000000040ae85\n.text:000000000040ae86\n'
p405
tp406
sS'parse_newerXY'
p407
(S'\n__stdcall parse_newerXY(parser_table * entry, char * * argv, int * arg_ptr)\n'
p408
V\u000a_Bool parse_newerXY(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  char cVar1;\u000a  char "aBcmt" [6];\u000a  _Bool _Var2;\u000a  int __c;\u000a  undefined4 uVar3;\u000a  int iVar4;\u000a  size_t sVar5;\u000a  undefined8 uVar6;\u000a  void *pvVar7;\u000a  predicate *ppVar8;\u000a  char *__s;\u000a  uint *puVar9;\u000a  float fVar10;\u000a  stat local_c0;\u000a  \u000a  if (argv == (char **)0x0) {\u000a    return false;\u000a  }\u000a  iVar4 = *arg_ptr;\u000a  __s = argv[(long)iVar4];\u000a  if (__s == (char *)0x0) {\u000a    return false;\u000a  }\u000a  sVar5 = strlen(__s);\u000a  if (sVar5 != 8) {\u000a    return false;\u000a  }\u000a  __c = strncmp("-newer",__s,6);\u000a  if (__c != 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 == strncmp (\u005c"-newer\u005c", argv[*arg_ptr], 6)","parser.c",0x633,\u000a                  "_Bool parse_newerXY(const struct parser_table *, char **, int *)");\u000a  }\u000a  __c = (int)__s[6];\u000a  if (__c == 0x42) {\u000aLAB_0040aa94:\u000a    uVar6 = dcgettext(0,"This system does not provide a way to find the birth time of a file.",5);\u000a    error(0,0,uVar6,uVar6);\u000a    return false;\u000a  }\u000a  cVar1 = __s[7];\u000a  if (cVar1 == 'B') goto LAB_0040aa94;\u000a  if (__s[6] == 't') {\u000a    return false;\u000a  }\u000a  pvVar7 = memchr((void *)0x420aa0,__c,6);\u000a  if (pvVar7 == (void *)0x0) {\u000a    return false;\u000a  }\u000a  pvVar7 = memchr((void *)0x420aa0,(int)cVar1,6);\u000a  if (pvVar7 == (void *)0x0) {\u000a    return false;\u000a  }\u000a  if (argv[(long)iVar4 + 1] == (char *)0x0) {\u000a    uVar6 = dcgettext(0,"The %s test needs an argument",5);\u000a    __s = quotearg_n_style((char *)0x0);\u000a    error(1,0,uVar6,__s);\u000a  }\u000a  else {\u000a    *arg_ptr = iVar4 + 1;\u000a  }\u000a  ppVar8 = insert_primary(entry,argv[(long)*arg_ptr]);\u000a  if (__c < 99) {\u000a    if (__c == 0x42) {\u000a      uVar3 = 1;\u000a    }\u000a    else {\u000a      uVar3 = 0;\u000a      if (__c != 0x61) {\u000aLAB_0040acd2:\u000a        pvVar7 = memchr((void *)0x420aa0,__c,6);\u000a        if (pvVar7 == (void *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a          __assert_fail("strchr (validchars, x)","parser.c",0x66b,\u000a                        "_Bool parse_newerXY(const struct parser_table *, char **, int *)");\u000a        }\u000a        goto LAB_0040ad47;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    if (__c == 99) {\u000a      uVar3 = 2;\u000a    }\u000a    else {\u000a      if (__c != 0x6d) goto LAB_0040acd2;\u000a      uVar3 = 3;\u000a    }\u000a  }\u000a  *(undefined4 *)ppVar8->args = uVar3;\u000a  if (cVar1 == 't') {\u000a    _Var2 = parse_datetime((timespec *)(ppVar8->args + 8),argv[(long)*arg_ptr],&options.start_time);\u000a    if (_Var2 != false) goto LAB_0040ac63;\u000a    uVar6 = dcgettext(0,"I cannot figure out how to interpret %s as a date or time",5);\u000a    __s = quotearg_n_style((char *)0x0);\u000a  }\u000a  else {\u000a    set_stat_placeholders(&local_c0);\u000a    iVar4 = (*options.xstat)(argv[(long)*arg_ptr],&local_c0);\u000a    if (iVar4 != 0) {\u000a      puVar9 = (uint *)__errno_location();\u000a      fatal_target_file_error((char *)(ulong)*puVar9);\u000aLAB_0040ad47:\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("0","parser.c",0x66c,\u000a                    "_Bool parse_newerXY(const struct parser_table *, char **, int *)");\u000a    }\u000a    iVar4 = get_stat_Ytime(&local_c0,(timespec *)(ulong)(uint)(int)cVar1);\u000a    if (iVar4 != 0) goto LAB_0040ac63;\u000a    uVar6 = dcgettext(0,"Cannot obtain birth time of file %s",5);\u000a    __s = safely_quote_err_filename((char *)0x0);\u000a  }\u000a  error(1,0,uVar6,__s);\u000aLAB_0040ac63:\u000a  *(undefined4 *)(ppVar8->args + 4) = 0;\u000a  fVar10 = estimate_timestamp_success_rate(*(time_t *)(ppVar8->args + 8));\u000a  ppVar8->est_success_rate = fVar10;\u000a  *arg_ptr = *arg_ptr + 1;\u000a  if (ppVar8->pred_func == (_Bool (*)(char *,stat *,predicate *))0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("our_pred->pred_func != NULL","parser.c",0x68f,\u000a                  "_Bool parse_newerXY(const struct parser_table *, char **, int *)");\u000a  }\u000a  if (ppVar8->pred_func != pred_newerXY) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("our_pred->pred_func == pred_newerXY","parser.c",0x690,\u000a                  "_Bool parse_newerXY(const struct parser_table *, char **, int *)");\u000a  }\u000a  if (ppVar8->need_stat == false) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("our_pred->need_stat","parser.c",0x691,\u000a                  "_Bool parse_newerXY(const struct parser_table *, char **, int *)");\u000a  }\u000a  return true;\u000a}\u000a\u000a
p409
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R14,RDX\nMOV RBX,RSI\nMOV R15,RDI\nTEST RBX,RBX\nJZ 0x0040aafd\nMOVSXD R12,dword ptr [R14]\nMOV RBP,qword ptr [RBX + R12*0x8]\nTEST RBP,RBP\nJZ 0x0040aafd\nMOV RDI,RBP\nCALL 0x00402930\nCMP RAX,0x8\nJNZ 0x0040aafd\nMOV EDI,0x420b52\nMOV EDX,0x6\nMOV RSI,RBP\nCALL 0x00402790\nTEST EAX,EAX\nJNZ 0x0040acb9\nMOVSX R13D,byte ptr [RBP + 0x6]\nCMP R13D,0x42\nJZ 0x0040aa94\nMOVSX EBP,byte ptr [RBP + 0x7]\nCMP BPL,0x42\nJNZ 0x0040aaba\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x420d01\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402d90\nJMP 0x0040aaff\nCMP R13B,0x74\nJZ 0x0040aafd\nMOV EDI,0x420aa0\nMOV EDX,0x6\nMOV ESI,R13D\nCALL 0x00402b10\nTEST RAX,RAX\nJZ 0x0040aafd\nMOV EDI,0x420aa0\nMOV EDX,0x6\nMOV ESI,EBP\nCALL 0x00402b10\nTEST RAX,RAX\nJZ 0x0040aafd\nCMP qword ptr [RBX + R12*0x8 + 0x8],0x0\nJZ 0x0040ab13\nINC R12\nMOV dword ptr [R14],R12D\nJMP 0x0040ab4f\nXOR EBX,EBX\nMOV EAX,EBX\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x420d46\nMOV EDX,0x5\nCALL 0x00402910\nMOV R12,RAX\nMOV ESI,dword ptr [0x0062f0ac]\nMOVSXD RAX,dword ptr [R14]\nMOV RDX,qword ptr [RBX + RAX*0x8]\nXOR EDI,EDI\nCALL 0x00416290\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R12\nCALL 0x00402d90\nMOVSXD RAX,dword ptr [R14]\nMOV RSI,qword ptr [RBX + RAX*0x8]\nMOV RDI,R15\nCALL 0x00407730\nMOV R15,RAX\nCMP R13D,0x62\nJG 0x0040ab7a\nCMP R13D,0x42\nJZ 0x0040ab91\nXOR EAX,EAX\nCMP R13D,0x61\nJZ 0x0040ab9d\nJMP 0x0040acd2\nCMP R13D,0x63\nJZ 0x0040ab98\nCMP R13D,0x6d\nJNZ 0x0040acd2\nMOV EAX,0x3\nJMP 0x0040ab9d\nMOV EAX,0x1\nJMP 0x0040ab9d\nMOV EAX,0x2\nMOV dword ptr [R15 + 0x38],EAX\nCMP BPL,0x74\nJNZ 0x0040abf1\nMOV RDI,R15\nADD RDI,0x40\nMOVSXD RAX,dword ptr [R14]\nMOV RSI,qword ptr [RBX + RAX*0x8]\nMOV EDX,0x62f058\nCALL 0x00414360\nTEST AL,AL\nJNZ 0x0040ac63\nXOR EDI,EDI\nMOV ESI,0x420d7b\nMOV EDX,0x5\nCALL 0x00402910\nMOV RBP,RAX\nMOV ESI,dword ptr [0x0062f0ac]\nMOVSXD RAX,dword ptr [R14]\nMOV RDX,qword ptr [RBX + RAX*0x8]\nXOR EDI,EDI\nCALL 0x00416290\nJMP 0x0040ac4f\nLEA R12,[RSP + 0x8]\nMOV RDI,R12\nCALL 0x004079d0\nMOVSXD RAX,dword ptr [R14]\nMOV RDI,qword ptr [RBX + RAX*0x8]\nMOV RSI,R12\nCALL qword ptr [0x0062f090]\nTEST EAX,EAX\nJNZ 0x0040ad34\nMOV RDX,R15\nADD RDX,0x40\nLEA RDI,[RSP + 0x8]\nMOV ESI,EBP\nCALL 0x0040ad60\nTEST EAX,EAX\nJNZ 0x0040ac63\nXOR EDI,EDI\nMOV ESI,0x420db5\nMOV EDX,0x5\nCALL 0x00402910\nMOV RBP,RAX\nMOVSXD RAX,dword ptr [R14]\nMOV RSI,qword ptr [RBX + RAX*0x8]\nXOR EDI,EDI\nCALL 0x00408920\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x00402d90\nMOV dword ptr [R15 + 0x3c],0x0\nMOV RDI,qword ptr [R15 + 0x40]\nCALL 0x0040ade0\nMOVSS dword ptr [R15 + 0x24],XMM0\nINC dword ptr [R14]\nMOV RAX,qword ptr [R15]\nTEST RAX,RAX\nJZ 0x0040ad02\nMOV ECX,0x404320\nCMP RAX,RCX\nJNZ 0x0040ad1b\nMOV BL,0x1\nCMP byte ptr [R15 + 0x1a],0x0\nJNZ 0x0040aaff\nMOV EDI,0x420e19\nMOV ESI,0x420cb7\nMOV EDX,0x691\nMOV ECX,0x420cc0\nCALL 0x00402a40\nMOV EDI,0x420c8c\nMOV ESI,0x420cb7\nMOV EDX,0x633\nMOV ECX,0x420cc0\nCALL 0x00402a40\nMOV EDI,0x420aa0\nMOV EDX,0x6\nMOV ESI,R13D\nCALL 0x00402b10\nTEST RAX,RAX\nJNZ 0x0040ad47\nMOV EDI,0x420d64\nMOV ESI,0x420cb7\nMOV EDX,0x66b\nMOV ECX,0x420cc0\nCALL 0x00402a40\nMOV EDI,0x420dd9\nMOV ESI,0x420cb7\nMOV EDX,0x68f\nMOV ECX,0x420cc0\nCALL 0x00402a40\nMOV EDI,0x420df5\nMOV ESI,0x420cb7\nMOV EDX,0x690\nMOV ECX,0x420cc0\nCALL 0x00402a40\nCALL 0x00402770\nMOV EDI,dword ptr [RAX]\nMOVSXD RAX,dword ptr [R14]\nMOV RSI,qword ptr [RBX + RAX*0x8]\nCALL 0x004089a0\nMOV EDI,0x41cdbe\nMOV ESI,0x420cb7\nMOV EDX,0x66c\nMOV ECX,0x420cc0\nCALL 0x00402a40\n'
p410
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n49 89 d6\n48 89 f3\n49 89 ff\n48 85 db\n0f 84 ba 00 00 00\n4d 63 26\n4a 8b 2c e3\n48 85 ed\n0f 84 aa 00 00 00\n48 89 ef\ne8 d5 7e ff ff\n48 83 f8 08\n0f 85 98 00 00 00\nbf 52 0b 42 00\nba 06 00 00 00\n48 89 ee\ne8 19 7d ff ff\n85 c0\n0f 85 3a 02 00 00\n44 0f be 6d 06\n41 83 fd 42\n74 0a\n0f be 6d 07\n40 80 fd 42\n75 26\n31 db\n31 ff\nbe 01 0d 42 00\nba 05 00 00 00\ne8 69 7e ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 d8 82 ff ff\neb 45\n41 80 fd 74\n74 3d\nbf a0 0a 42 00\nba 06 00 00 00\n44 89 ee\ne8 3e 80 ff ff\n48 85 c0\n74 26\nbf a0 0a 42 00\nba 06 00 00 00\n89 ee\ne8 28 80 ff ff\n48 85 c0\n74 10\n4a 83 7c e3 08 00\n74 1e\n49 ff c4\n45 89 26\neb 52\n31 db\n89 d8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 ff\nbe 46 0d 42 00\nba 05 00 00 00\ne8 ec 7d ff ff\n49 89 c4\n8b 35 7f 45 22 00\n49 63 06\n48 8b 14 c3\n31 ff\ne8 55 b7 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n4c 89 e2\ne8 41 82 ff ff\n49 63 06\n48 8b 34 c3\n4c 89 ff\ne8 d2 cb ff ff\n49 89 c7\n41 83 fd 62\n7f 13\n41 83 fd 42\n74 24\n31 c0\n41 83 fd 61\n74 28\ne9 58 01 00 00\n41 83 fd 63\n74 18\n41 83 fd 6d\n0f 85 48 01 00 00\nb8 03 00 00 00\neb 0c\nb8 01 00 00 00\neb 05\nb8 02 00 00 00\n41 89 47 38\n40 80 fd 74\n75 4a\n4c 89 ff\n48 83 c7 40\n49 63 06\n48 8b 34 c3\nba 58 f0 62 00\ne8 a1 97 00 00\n84 c0\n0f 85 9c 00 00 00\n31 ff\nbe 7b 0d 42 00\nba 05 00 00 00\ne8 38 7d ff ff\n48 89 c5\n8b 35 cb 44 22 00\n49 63 06\n48 8b 14 c3\n31 ff\ne8 a1 b6 00 00\neb 5e\n4c 8d 64 24 08\n4c 89 e7\ne8 d2 cd ff ff\n49 63 06\n48 8b 3c c3\n4c 89 e6\nff 15 82 44 22 00\n85 c0\n0f 85 1e 01 00 00\n4c 89 fa\n48 83 c2 40\n48 8d 7c 24 08\n89 ee\ne8 37 01 00 00\n85 c0\n75 36\n31 ff\nbe b5 0d 42 00\nba 05 00 00 00\ne8 d2 7c ff ff\n48 89 c5\n49 63 06\n48 8b 34 c3\n31 ff\ne8 d1 dc ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ea\ne8 2d 81 ff ff\n41 c7 47 3c 00 00 00 00\n49 8b 7f 40\ne8 6c 01 00 00\nf3 41 0f 11 47 24\n41 ff 06\n49 8b 07\n48 85 c0\n74 7d\nb9 20 43 40 00\n48 39 c8\n0f 85 88 00 00 00\nb3 01\n41 80 7f 1a 00\n0f 85 5f fe ff ff\nbf 19 0e 42 00\nbe b7 0c 42 00\nba 91 06 00 00\nb9 c0 0c 42 00\ne8 87 7d ff ff\nbf 8c 0c 42 00\nbe b7 0c 42 00\nba 33 06 00 00\nb9 c0 0c 42 00\ne8 6e 7d ff ff\nbf a0 0a 42 00\nba 06 00 00 00\n44 89 ee\ne8 2c 7e ff ff\n48 85 c0\n75 5e\nbf 64 0d 42 00\nbe b7 0c 42 00\nba 6b 06 00 00\nb9 c0 0c 42 00\ne8 3e 7d ff ff\nbf d9 0d 42 00\nbe b7 0c 42 00\nba 8f 06 00 00\nb9 c0 0c 42 00\ne8 25 7d ff ff\nbf f5 0d 42 00\nbe b7 0c 42 00\nba 90 06 00 00\nb9 c0 0c 42 00\ne8 0c 7d ff ff\ne8 37 7a ff ff\n8b 38\n49 63 06\n48 8b 34 c3\ne8 59 dc ff ff\nbf be cd 41 00\nbe b7 0c 42 00\nba 6c 06 00 00\nb9 c0 0c 42 00\ne8 e0 7c ff ff\n'
p411
S'.text:000000000040aa20\n.text:000000000040aa21\n.text:000000000040aa23\n.text:000000000040aa25\n.text:000000000040aa27\n.text:000000000040aa29\n.text:000000000040aa2a\n.text:000000000040aa31\n.text:000000000040aa34\n.text:000000000040aa37\n.text:000000000040aa3a\n.text:000000000040aa3d\n.text:000000000040aa43\n.text:000000000040aa46\n.text:000000000040aa4a\n.text:000000000040aa4d\n.text:000000000040aa53\n.text:000000000040aa56\n.text:000000000040aa5b\n.text:000000000040aa5f\n.text:000000000040aa65\n.text:000000000040aa6a\n.text:000000000040aa6f\n.text:000000000040aa72\n.text:000000000040aa77\n.text:000000000040aa79\n.text:000000000040aa7f\n.text:000000000040aa84\n.text:000000000040aa88\n.text:000000000040aa8a\n.text:000000000040aa8e\n.text:000000000040aa92\n.text:000000000040aa94\n.text:000000000040aa96\n.text:000000000040aa98\n.text:000000000040aa9d\n.text:000000000040aaa2\n.text:000000000040aaa7\n.text:000000000040aaaa\n.text:000000000040aaac\n.text:000000000040aaae\n.text:000000000040aab0\n.text:000000000040aab3\n.text:000000000040aab8\n.text:000000000040aaba\n.text:000000000040aabe\n.text:000000000040aac0\n.text:000000000040aac5\n.text:000000000040aaca\n.text:000000000040aacd\n.text:000000000040aad2\n.text:000000000040aad5\n.text:000000000040aad7\n.text:000000000040aadc\n.text:000000000040aae1\n.text:000000000040aae3\n.text:000000000040aae8\n.text:000000000040aaeb\n.text:000000000040aaed\n.text:000000000040aaf3\n.text:000000000040aaf5\n.text:000000000040aaf8\n.text:000000000040aafb\n.text:000000000040aafd\n.text:000000000040aaff\n.text:000000000040ab01\n.text:000000000040ab08\n.text:000000000040ab09\n.text:000000000040ab0b\n.text:000000000040ab0d\n.text:000000000040ab0f\n.text:000000000040ab11\n.text:000000000040ab12\n.text:000000000040ab13\n.text:000000000040ab15\n.text:000000000040ab1a\n.text:000000000040ab1f\n.text:000000000040ab24\n.text:000000000040ab27\n.text:000000000040ab2d\n.text:000000000040ab30\n.text:000000000040ab34\n.text:000000000040ab36\n.text:000000000040ab3b\n.text:000000000040ab3e\n.text:000000000040ab43\n.text:000000000040ab45\n.text:000000000040ab47\n.text:000000000040ab4a\n.text:000000000040ab4f\n.text:000000000040ab52\n.text:000000000040ab56\n.text:000000000040ab59\n.text:000000000040ab5e\n.text:000000000040ab61\n.text:000000000040ab65\n.text:000000000040ab67\n.text:000000000040ab6b\n.text:000000000040ab6d\n.text:000000000040ab6f\n.text:000000000040ab73\n.text:000000000040ab75\n.text:000000000040ab7a\n.text:000000000040ab7e\n.text:000000000040ab80\n.text:000000000040ab84\n.text:000000000040ab8a\n.text:000000000040ab8f\n.text:000000000040ab91\n.text:000000000040ab96\n.text:000000000040ab98\n.text:000000000040ab9d\n.text:000000000040aba1\n.text:000000000040aba5\n.text:000000000040aba7\n.text:000000000040abaa\n.text:000000000040abae\n.text:000000000040abb1\n.text:000000000040abb5\n.text:000000000040abba\n.text:000000000040abbf\n.text:000000000040abc1\n.text:000000000040abc7\n.text:000000000040abc9\n.text:000000000040abce\n.text:000000000040abd3\n.text:000000000040abd8\n.text:000000000040abdb\n.text:000000000040abe1\n.text:000000000040abe4\n.text:000000000040abe8\n.text:000000000040abea\n.text:000000000040abef\n.text:000000000040abf1\n.text:000000000040abf6\n.text:000000000040abf9\n.text:000000000040abfe\n.text:000000000040ac01\n.text:000000000040ac05\n.text:000000000040ac08\n.text:000000000040ac0e\n.text:000000000040ac10\n.text:000000000040ac16\n.text:000000000040ac19\n.text:000000000040ac1d\n.text:000000000040ac22\n.text:000000000040ac24\n.text:000000000040ac29\n.text:000000000040ac2b\n.text:000000000040ac2d\n.text:000000000040ac2f\n.text:000000000040ac34\n.text:000000000040ac39\n.text:000000000040ac3e\n.text:000000000040ac41\n.text:000000000040ac44\n.text:000000000040ac48\n.text:000000000040ac4a\n.text:000000000040ac4f\n.text:000000000040ac52\n.text:000000000040ac57\n.text:000000000040ac59\n.text:000000000040ac5b\n.text:000000000040ac5e\n.text:000000000040ac63\n.text:000000000040ac6b\n.text:000000000040ac6f\n.text:000000000040ac74\n.text:000000000040ac7a\n.text:000000000040ac7d\n.text:000000000040ac80\n.text:000000000040ac83\n.text:000000000040ac85\n.text:000000000040ac8a\n.text:000000000040ac8d\n.text:000000000040ac93\n.text:000000000040ac95\n.text:000000000040ac9a\n.text:000000000040aca0\n.text:000000000040aca5\n.text:000000000040acaa\n.text:000000000040acaf\n.text:000000000040acb4\n.text:000000000040acb9\n.text:000000000040acbe\n.text:000000000040acc3\n.text:000000000040acc8\n.text:000000000040accd\n.text:000000000040acd2\n.text:000000000040acd7\n.text:000000000040acdc\n.text:000000000040acdf\n.text:000000000040ace4\n.text:000000000040ace7\n.text:000000000040ace9\n.text:000000000040acee\n.text:000000000040acf3\n.text:000000000040acf8\n.text:000000000040acfd\n.text:000000000040ad02\n.text:000000000040ad07\n.text:000000000040ad0c\n.text:000000000040ad11\n.text:000000000040ad16\n.text:000000000040ad1b\n.text:000000000040ad20\n.text:000000000040ad25\n.text:000000000040ad2a\n.text:000000000040ad2f\n.text:000000000040ad34\n.text:000000000040ad39\n.text:000000000040ad3b\n.text:000000000040ad3e\n.text:000000000040ad42\n.text:000000000040ad47\n.text:000000000040ad4c\n.text:000000000040ad51\n.text:000000000040ad56\n.text:000000000040ad5b\n'
p412
tp413
sS'parse_and'
p414
(S'\n__stdcall parse_and(parser_table * entry, char * * argv, int * arg_ptr)\n'
p415
V\u000a_Bool parse_and(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  predicate *ppVar1;\u000a  \u000a  ppVar1 = get_new_pred_noarg(entry);\u000a  ppVar1->pred_func = pred_and;\u000a  ppVar1->p_type = BI_OP;\u000a  ppVar1->p_prec = AND_PREC;\u000a  *(undefined2 *)&ppVar1->need_stat = 0;\u000a  return true;\u000a}\u000a\u000a
p416
S'PUSH RAX\nCALL 0x00406b00\nMOV qword ptr [RAX],0x403c90\nMOV dword ptr [RAX + 0x10],0x3\nMOV dword ptr [RAX + 0x14],0x3\nMOV word ptr [RAX + 0x1a],0x0\nMOV AL,0x1\nPOP RCX\nRET\n'
p417
S'50\ne8 3a bc ff ff\n48 c7 00 90 3c 40 00\nc7 40 10 03 00 00 00\nc7 40 14 03 00 00 00\n66 c7 40 1a 00 00\nb0 01\n59\nc3\n'
p418
S'.text:000000000040aec0\n.text:000000000040aec1\n.text:000000000040aec6\n.text:000000000040aecd\n.text:000000000040aed4\n.text:000000000040aedb\n.text:000000000040aee1\n.text:000000000040aee3\n.text:000000000040aee4\n'
p419
tp420
sS'show_success_rates'
p421
(S'\n__stdcall show_success_rates(predicate * p)\n'
p422
V\u000avoid show_success_rates(predicate *p)\u000a\u000a{\u000a  if (((byte)options.debug_options & 0x40) == 0) {\u000a    return;\u000a  }\u000a  fwrite("Predicate success rates after completion:\u005cn",0x2a,1,(FILE *)stderr);\u000a  print_optlist(stderr,p);\u000a  fputc(10,(FILE *)stderr);\u000a  return;\u000a}\u000a\u000a
p423
S'PUSH RBX\nMOV RBX,RDI\nTEST byte ptr [0x0062f080],0x40\nJNZ 0x00404f8f\nPOP RBX\nRET\nMOV RCX,qword ptr [0x0062de60]\nMOV EDI,0x41d009\nMOV ESI,0x2a\nMOV EDX,0x1\nCALL 0x00402ee0\nMOV RDI,qword ptr [0x0062de60]\nMOV RSI,RBX\nCALL 0x00404d80\nMOV RSI,qword ptr [0x0062de60]\nMOV EDI,0xa\nPOP RBX\nJMP 0x00402af0\n'
p424
S'53\n48 89 fb\nf6 05 f5 a0 22 00 40\n75 02\n5b\nc3\n48 8b 0d ca 8e 22 00\nbf 09 d0 41 00\nbe 2a 00 00 00\nba 01 00 00 00\ne8 36 df ff ff\n48 8b 3d af 8e 22 00\n48 89 de\ne8 c7 fd ff ff\n48 8b 35 a0 8e 22 00\nbf 0a 00 00 00\n5b\ne9 25 db ff ff\n'
p425
S'.text:0000000000404f80\n.text:0000000000404f81\n.text:0000000000404f84\n.text:0000000000404f8b\n.text:0000000000404f8d\n.text:0000000000404f8e\n.text:0000000000404f8f\n.text:0000000000404f96\n.text:0000000000404f9b\n.text:0000000000404fa0\n.text:0000000000404fa5\n.text:0000000000404faa\n.text:0000000000404fb1\n.text:0000000000404fb4\n.text:0000000000404fb9\n.text:0000000000404fc0\n.text:0000000000404fc5\n.text:0000000000404fc6\n'
p426
tp427
sS'strmode'
p428
(S'\n__stdcall strmode(char * str)\n'
p429
V\u000avoid strmode(char *str)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  byte bVar3;\u000a  byte bVar4;\u000a  byte bVar5;\u000a  char cVar6;\u000a  uint uVar7;\u000a  undefined in_SIL;\u000a  char cVar8;\u000a  undefined7 in_register_00000031;\u000a  char cVar9;\u000a  byte bVar10;\u000a  \u000a  pcVar1 = (char *)CONCAT71(in_register_00000031,in_SIL);\u000a  cVar2 = ftypelet();\u000a  *pcVar1 = cVar2;\u000a  cVar8 = 'r';\u000a  cVar2 = 'r';\u000a  if (((ulong)str & 0x100) == 0) {\u000a    cVar2 = '-';\u000a  }\u000a  pcVar1[1] = cVar2;\u000a  uVar7 = (uint)((ulong)str & 0xffffffff);\u000a  bVar3 = (byte)((ulong)str & 0xffffffff);\u000a  pcVar1[2] = ((char)bVar3 >> 7 & 0x4aU) + 0x2d;\u000a  bVar10 = 0x78;\u000a  bVar4 = 0x78;\u000a  if (((ulong)str & 0x40) == 0) {\u000a    bVar4 = 0x2d;\u000a  }\u000a  bVar5 = (byte)((uVar7 & 0x40) >> 1) | 0x53;\u000a  if (((ulong)str & 0x800) == 0) {\u000a    bVar5 = bVar4;\u000a  }\u000a  pcVar1[3] = bVar5;\u000a  cVar2 = 'r';\u000a  if (((ulong)str & 0x20) == 0) {\u000a    cVar2 = '-';\u000a  }\u000a  pcVar1[4] = cVar2;\u000a  cVar6 = 'w';\u000a  cVar2 = 'w';\u000a  if (((ulong)str & 0x10) == 0) {\u000a    cVar2 = '-';\u000a  }\u000a  pcVar1[5] = cVar2;\u000a  cVar2 = 'x';\u000a  if (((ulong)str & 8) == 0) {\u000a    cVar2 = '-';\u000a  }\u000a  cVar9 = (bVar3 & 8) * 4 + 'S';\u000a  if (((ulong)str & 0x400) == 0) {\u000a    cVar9 = cVar2;\u000a  }\u000a  pcVar1[6] = cVar9;\u000a  if (((ulong)str & 4) == 0) {\u000a    cVar8 = '-';\u000a  }\u000a  pcVar1[7] = cVar8;\u000a  if (((ulong)str & 2) == 0) {\u000a    cVar6 = '-';\u000a  }\u000a  pcVar1[8] = cVar6;\u000a  if (((ulong)str & 1) == 0) {\u000a    bVar10 = 0x2d;\u000a  }\u000a  if (((ulong)str & 0x200) != 0) {\u000a    bVar10 = (byte)((uVar7 & 1) << 5) | 0x54;\u000a  }\u000a  pcVar1[9] = bVar10;\u000a  pcVar1[10] = ' ';\u000a  pcVar1[0xb] = 0;\u000a  return;\u000a}\u000a\u000a
p430
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV EBX,EDI\nCALL 0x00410300\nMOV byte ptr [R14],AL\nMOV AL,BH\nTEST AL,0x1\nMOV SIL,0x72\nMOV CL,0x72\nJNZ 0x0041024e\nMOV CL,0x2d\nMOV byte ptr [R14 + 0x1],CL\nMOV ECX,EBX\nSAR CL,0x7\nAND CL,0x4a\nADD CL,0x2d\nMOV byte ptr [R14 + 0x2],CL\nMOV ECX,EBX\nAND ECX,0x40\nMOV EDX,ECX\nSHR EDX,1\nOR EDX,0x53\nTEST ECX,ECX\nMOV R8B,0x78\nMOV CL,0x78\nJNZ 0x00410278\nMOV CL,0x2d\nTEST AL,0x8\nJNZ 0x0041027e\nMOV DL,CL\nMOV byte ptr [R14 + 0x3],DL\nTEST BL,0x20\nMOV CL,0x72\nJNZ 0x0041028b\nMOV CL,0x2d\nMOV byte ptr [R14 + 0x4],CL\nTEST BL,0x10\nMOV DL,0x77\nMOV CL,0x77\nJNZ 0x0041029a\nMOV CL,0x2d\nMOV byte ptr [R14 + 0x5],CL\nMOV ECX,EBX\nAND ECX,0x8\nLEA EDI,[0x53 + RCX*0x4]\nMOV CL,0x78\nJNZ 0x004102b0\nMOV CL,0x2d\nTEST AL,0x4\nJNZ 0x004102b7\nMOV DIL,CL\nMOV byte ptr [R14 + 0x6],DIL\nTEST BL,0x4\nJNZ 0x004102c3\nMOV SIL,0x2d\nMOV byte ptr [R14 + 0x7],SIL\nTEST BL,0x2\nJNZ 0x004102ce\nMOV DL,0x2d\nMOV byte ptr [R14 + 0x8],DL\nAND EBX,0x1\nJNZ 0x004102da\nMOV R8B,0x2d\nTEST AL,0x2\nJZ 0x004102e7\nSHL EBX,0x5\nOR EBX,0x54\nMOV R8D,EBX\nMOV byte ptr [R14 + 0x9],R8B\nMOV byte ptr [R14 + 0xa],0x20\nMOV byte ptr [R14 + 0xb],0x0\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p431
S'41 56\n53\n50\n49 89 f6\n89 fb\ne8 c2 00 00 00\n41 88 06\n88 f8\na8 01\n40 b6 72\nb1 72\n75 02\nb1 2d\n41 88 4e 01\n89 d9\nc0 f9 07\n80 e1 4a\n80 c1 2d\n41 88 4e 02\n89 d9\n83 e1 40\n89 ca\nd1 ea\n83 ca 53\n85 c9\n41 b0 78\nb1 78\n75 02\nb1 2d\na8 08\n75 02\n88 ca\n41 88 56 03\nf6 c3 20\nb1 72\n75 02\nb1 2d\n41 88 4e 04\nf6 c3 10\nb2 77\nb1 77\n75 02\nb1 2d\n41 88 4e 05\n89 d9\n83 e1 08\n8d 3c 8d 53 00 00 00\nb1 78\n75 02\nb1 2d\na8 04\n75 03\n40 88 cf\n41 88 7e 06\nf6 c3 04\n75 03\n40 b6 2d\n41 88 76 07\nf6 c3 02\n75 02\nb2 2d\n41 88 56 08\n83 e3 01\n75 03\n41 b0 2d\na8 02\n74 09\nc1 e3 05\n83 cb 54\n41 89 d8\n45 88 46 09\n41 c6 46 0a 20\n41 c6 46 0b 00\n48 83 c4 08\n5b\n41 5e\nc3\n'
p432
S'.text:0000000000410230\n.text:0000000000410232\n.text:0000000000410233\n.text:0000000000410234\n.text:0000000000410237\n.text:0000000000410239\n.text:000000000041023e\n.text:0000000000410241\n.text:0000000000410243\n.text:0000000000410245\n.text:0000000000410248\n.text:000000000041024a\n.text:000000000041024c\n.text:000000000041024e\n.text:0000000000410252\n.text:0000000000410254\n.text:0000000000410257\n.text:000000000041025a\n.text:000000000041025d\n.text:0000000000410261\n.text:0000000000410263\n.text:0000000000410266\n.text:0000000000410268\n.text:000000000041026a\n.text:000000000041026d\n.text:000000000041026f\n.text:0000000000410272\n.text:0000000000410274\n.text:0000000000410276\n.text:0000000000410278\n.text:000000000041027a\n.text:000000000041027c\n.text:000000000041027e\n.text:0000000000410282\n.text:0000000000410285\n.text:0000000000410287\n.text:0000000000410289\n.text:000000000041028b\n.text:000000000041028f\n.text:0000000000410292\n.text:0000000000410294\n.text:0000000000410296\n.text:0000000000410298\n.text:000000000041029a\n.text:000000000041029e\n.text:00000000004102a0\n.text:00000000004102a3\n.text:00000000004102aa\n.text:00000000004102ac\n.text:00000000004102ae\n.text:00000000004102b0\n.text:00000000004102b2\n.text:00000000004102b4\n.text:00000000004102b7\n.text:00000000004102bb\n.text:00000000004102be\n.text:00000000004102c0\n.text:00000000004102c3\n.text:00000000004102c7\n.text:00000000004102ca\n.text:00000000004102cc\n.text:00000000004102ce\n.text:00000000004102d2\n.text:00000000004102d5\n.text:00000000004102d7\n.text:00000000004102da\n.text:00000000004102dc\n.text:00000000004102de\n.text:00000000004102e1\n.text:00000000004102e4\n.text:00000000004102e7\n.text:00000000004102eb\n.text:00000000004102f0\n.text:00000000004102f5\n.text:00000000004102f9\n.text:00000000004102fa\n.text:00000000004102fc\n'
p433
tp434
sS'matchpathcon'
p435
(S'\n__stdcall matchpathcon(char * file, security_context_t * con)\n'
p436
V\u000aint matchpathcon(char *file,security_context_t *con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p437
S'PUSH RAX\nCALL 0x00402770\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p438
S'50\ne8 ca bc fe ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p439
S'.text:0000000000416aa0\n.text:0000000000416aa1\n.text:0000000000416aa6\n.text:0000000000416aac\n.text:0000000000416ab1\n.text:0000000000416ab2\n'
p440
tp441
sS'sprintf'
p442
(S'\n__stdcall sprintf(char * __s, char * __format)\n'
p443
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sprintf(char *__s,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sprintf_0062d400)();\u000a  return iVar1;\u000a}\u000a\u000a
p444
S'JMP qword ptr [0x0062d400]\n'
p445
S'ff 25 3a a5 22 00\n'
p446
S'.plt:0000000000402ec0\n'
p447
tp448
sS'strlen'
p449
(S'\n__stdcall strlen(char * __s)\n'
p450
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_0062d138)();\u000a  return sVar1;\u000a}\u000a\u000a
p451
S'JMP qword ptr [0x0062d138]\n'
p452
S'ff 25 02 a8 22 00\n'
p453
S'.plt:0000000000402930\n'
p454
tp455
sS'memcmp'
p456
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p457
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_0062d230)();\u000a  return iVar1;\u000a}\u000a\u000a
p458
S'JMP qword ptr [0x0062d230]\n'
p459
S'ff 25 0a a7 22 00\n'
p460
S'.plt:0000000000402b20\n'
p461
tp462
sS'fts_compare_ino'
p463
(S'\n__stdcall fts_compare_ino(_ftsent * * a, _ftsent * * b)\n'
p464
V\u000aint fts_compare_ino(_ftsent **a,_ftsent **b)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  uint uVar3;\u000a  \u000a  uVar1 = (*a)->fts_statp[0].st_ino;\u000a  uVar2 = (*b)->fts_statp[0].st_ino;\u000a  uVar3 = 0xffffffff;\u000a  if (uVar2 <= uVar1) {\u000a    uVar3 = -(uint)(uVar2 < uVar1) & 1;\u000a  }\u000a  return (int)uVar3;\u000a}\u000a\u000a
p465
S'MOV RAX,qword ptr [RDI]\nMOV RAX,qword ptr [0x80 + RAX]\nMOV RCX,qword ptr [RSI]\nMOV RCX,qword ptr [0x80 + RCX]\nCMP RCX,RAX\nSBB EDX,EDX\nAND EDX,0x1\nCMP RAX,RCX\nMOV EAX,0xffffffff\nCMOVNC EAX,EDX\nRET\n'
p466
S'48 8b 07\n48 8b 80 80 00 00 00\n48 8b 0e\n48 8b 89 80 00 00 00\n48 39 c1\n19 d2\n83 e2 01\n48 39 c8\nb8 ff ff ff ff\n0f 43 c2\nc3\n'
p467
S'.text:0000000000419f10\n.text:0000000000419f13\n.text:0000000000419f1a\n.text:0000000000419f1d\n.text:0000000000419f24\n.text:0000000000419f27\n.text:0000000000419f29\n.text:0000000000419f2c\n.text:0000000000419f2f\n.text:0000000000419f34\n.text:0000000000419f37\n'
p468
tp469
sS'parse_fprint'
p470
(S'\n__stdcall parse_fprint(parser_table * entry, char * * argv, int * arg_ptr)\n'
p471
V\u000a_Bool parse_fprint(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  predicate *ppVar2;\u000a  char *local_20;\u000a  \u000a  _Var1 = collect_arg(argv,arg_ptr,&local_20);\u000a  if (_Var1 != false) {\u000a    ppVar2 = insert_primary(entry,local_20);\u000a    open_output_file(local_20,(format_val *)ppVar2->args);\u000a    ppVar2->no_default_print = true;\u000a    ppVar2->side_effects = true;\u000a    ppVar2->need_type = false;\u000a    ppVar2->need_stat = false;\u000a    ppVar2->est_success_rate = 1.00000000;\u000a  }\u000a  return (_Bool)(_Var1 != false);\u000a}\u000a\u000a
p472
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV R14,RDI\nLEA RAX,[RSP + 0x8]\nMOV RDI,RSI\nMOV RSI,RDX\nMOV RDX,RAX\nCALL 0x0040c7f0\nTEST AL,AL\nJZ 0x0040b51d\nMOV R15,qword ptr [RSP + 0x8]\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x00407730\nMOV RBX,RAX\nLEA RSI,[RBX + 0x38]\nMOV RDI,R15\nCALL 0x0040d0e0\nMOV byte ptr [RBX + 0x19],0x1\nMOV byte ptr [RBX + 0x18],0x1\nMOV byte ptr [RBX + 0x1b],0x0\nMOV byte ptr [RBX + 0x1a],0x0\nMOV dword ptr [RBX + 0x24],0x3f800000\nMOV AL,0x1\nJMP 0x0040b51f\nXOR EAX,EAX\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p473
S'41 57\n41 56\n53\n48 83 ec 10\n49 89 fe\n48 8d 44 24 08\n48 89 f7\n48 89 d6\n48 89 c2\ne8 11 13 00 00\n84 c0\n74 3a\n4c 8b 7c 24 08\n4c 89 f7\n4c 89 fe\ne8 3d c2 ff ff\n48 89 c3\n48 8d 73 38\n4c 89 ff\ne8 de 1b 00 00\nc6 43 19 01\nc6 43 18 01\nc6 43 1b 00\nc6 43 1a 00\nc7 43 24 00 00 80 3f\nb0 01\neb 02\n31 c0\n48 83 c4 10\n5b\n41 5e\n41 5f\nc3\n'
p474
S'.text:000000000040b4c0\n.text:000000000040b4c2\n.text:000000000040b4c4\n.text:000000000040b4c5\n.text:000000000040b4c9\n.text:000000000040b4cc\n.text:000000000040b4d1\n.text:000000000040b4d4\n.text:000000000040b4d7\n.text:000000000040b4da\n.text:000000000040b4df\n.text:000000000040b4e1\n.text:000000000040b4e3\n.text:000000000040b4e8\n.text:000000000040b4eb\n.text:000000000040b4ee\n.text:000000000040b4f3\n.text:000000000040b4f6\n.text:000000000040b4fa\n.text:000000000040b4fd\n.text:000000000040b502\n.text:000000000040b506\n.text:000000000040b50a\n.text:000000000040b50e\n.text:000000000040b512\n.text:000000000040b519\n.text:000000000040b51b\n.text:000000000040b51d\n.text:000000000040b51f\n.text:000000000040b523\n.text:000000000040b524\n.text:000000000040b526\n.text:000000000040b528\n'
p475
tp476
sS'optionl_getfilecon'
p477
(S'\n__stdcall optionl_getfilecon(char * name, security_context_t * p)\n'
p478
V\u000aint optionl_getfilecon(char *name,security_context_t *p)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = getfileconat(name,p);\u000a  if (iVar1 != 0) {\u000a    iVar1 = fallback_getfilecon((char *)((ulong)name & 0xffffffff),p);\u000a    return iVar1;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p479
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RDX\nMOV RBX,RSI\nMOV EBP,EDI\nCALL 0x0041aed0\nTEST EAX,EAX\nJZ 0x0040a758\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV ECX,EAX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x0040a990\nXOR EAX,EAX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p480
S'55\n41 56\n53\n49 89 d6\n48 89 f3\n89 fd\ne8 8f 07 01 00\n85 c0\n74 13\n89 ef\n48 89 de\n4c 89 f2\n89 c1\n5b\n41 5e\n5d\ne9 38 02 00 00\n31 c0\n5b\n41 5e\n5d\nc3\n'
p481
S'.text:000000000040a730\n.text:000000000040a731\n.text:000000000040a733\n.text:000000000040a734\n.text:000000000040a737\n.text:000000000040a73a\n.text:000000000040a73c\n.text:000000000040a741\n.text:000000000040a743\n.text:000000000040a745\n.text:000000000040a747\n.text:000000000040a74a\n.text:000000000040a74d\n.text:000000000040a74f\n.text:000000000040a750\n.text:000000000040a752\n.text:000000000040a753\n.text:000000000040a758\n.text:000000000040a75a\n.text:000000000040a75b\n.text:000000000040a75d\n.text:000000000040a75e\n'
p482
tp483
sS'check_nofollow'
p484
(S'\n__stdcall check_nofollow()\n'
p485
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000a_Bool check_nofollow(void)\u000a\u000a{\u000a  int iVar1;\u000a  double dVar2;\u000a  float release;\u000a  utsname uts;\u000a  utsname local_188;\u000a  \u000a  iVar1 = uname(&local_188);\u000a  if (iVar1 == 0) {\u000a    dVar2 = atof(local_188.release);\u000a    iVar1 = strcmp("Linux",(char *)&local_188);\u000a    if (iVar1 == 0) {\u000a      return (_Bool)(_DAT_0041dec8 <= (float)dVar2);\u000a    }\u000a    iVar1 = strcmp("FreeBSD",(char *)&local_188);\u000a    if (iVar1 == 0) {\u000a      return (_Bool)(_DAT_0041dec4 <= (float)dVar2);\u000a    }\u000a  }\u000a  return true;\u000a}\u000a\u000a
p486
S'SUB RSP,0x198\nLEA RDI,[RSP + 0x10]\nCALL 0x00402a10\nTEST EAX,EAX\nJZ 0x00407baf\nMOV AL,0x1\nADD RSP,0x198\nRET\nLEA RDI,[0x92 + RSP]\nCALL 0x00402850\nCVTSD2SS XMM0,XMM0\nMOVSS dword ptr [RSP + 0xc],XMM0\nLEA RSI,[RSP + 0x10]\nMOV EDI,0x41e6e3\nCALL 0x00402b40\nTEST EAX,EAX\nJZ 0x00407c00\nLEA RSI,[RSP + 0x10]\nMOV EDI,0x41e6e9\nCALL 0x00402b40\nMOV ECX,EAX\nMOVSS XMM0,dword ptr [RSP + 0xc]\nUCOMISS XMM0,dword ptr [0x0041dec4]\nSETNC AL\nTEST ECX,ECX\nJNZ 0x00407ba5\nJMP 0x00407ba7\nMOVSS XMM0,dword ptr [RSP + 0xc]\nUCOMISS XMM0,dword ptr [0x0041dec8]\nSETNC AL\nADD RSP,0x198\nRET\n'
p487
S'48 81 ec 98 01 00 00\n48 8d 7c 24 10\ne8 6f ae ff ff\n85 c0\n74 0a\nb0 01\n48 81 c4 98 01 00 00\nc3\n48 8d bc 24 92 00 00 00\ne8 94 ac ff ff\nf2 0f 5a c0\nf3 0f 11 44 24 0c\n48 8d 74 24 10\nbf e3 e6 41 00\ne8 6b af ff ff\n85 c0\n74 27\n48 8d 74 24 10\nbf e9 e6 41 00\ne8 58 af ff ff\n89 c1\nf3 0f 10 44 24 0c\n0f 2e 05 cd 62 01 00\n0f 93 c0\n85 c9\n75 a7\neb a7\nf3 0f 10 44 24 0c\n0f 2e 05 bb 62 01 00\n0f 93 c0\n48 81 c4 98 01 00 00\nc3\n'
p488
S'.text:0000000000407b90\n.text:0000000000407b97\n.text:0000000000407b9c\n.text:0000000000407ba1\n.text:0000000000407ba3\n.text:0000000000407ba5\n.text:0000000000407ba7\n.text:0000000000407bae\n.text:0000000000407baf\n.text:0000000000407bb7\n.text:0000000000407bbc\n.text:0000000000407bc0\n.text:0000000000407bc6\n.text:0000000000407bcb\n.text:0000000000407bd0\n.text:0000000000407bd5\n.text:0000000000407bd7\n.text:0000000000407bd9\n.text:0000000000407bde\n.text:0000000000407be3\n.text:0000000000407be8\n.text:0000000000407bea\n.text:0000000000407bf0\n.text:0000000000407bf7\n.text:0000000000407bfa\n.text:0000000000407bfc\n.text:0000000000407bfe\n.text:0000000000407c00\n.text:0000000000407c06\n.text:0000000000407c0d\n.text:0000000000407c10\n.text:0000000000407c17\n'
p489
tp490
sS'insert_num'
p491
(S'\n__stdcall insert_num(char * * argv, int * arg_ptr, parser_table * entry)\n'
p492
V\u000apredicate * insert_num(char **argv,int *arg_ptr,parser_table *entry)\u000a\u000a{\u000a  _Bool _Var1;\u000a  predicate *ppVar2;\u000a  undefined *puVar3;\u000a  undefined *puVar4;\u000a  comparison_type local_1c;\u000a  char *local_18;\u000a  uintmax_t local_10;\u000a  \u000a  _Var1 = collect_arg(argv,arg_ptr,&local_18);\u000a  if ((_Var1 == false) || (_Var1 = get_num(local_18,&local_10,&local_1c), _Var1 == false)) {\u000a    return (predicate *)0x0;\u000a  }\u000a  ppVar2 = insert_primary(entry,local_18);\u000a  *(comparison_type *)ppVar2->args = local_1c;\u000a  *(uintmax_t *)(ppVar2->args + 8) = local_10;\u000a  if (((byte)options.debug_options & 1) == 0) {\u000a    return ppVar2;\u000a  }\u000a  fprintf(stderr,"inserting %s\u005cn",ppVar2->p_name);\u000a  if (local_1c == COMP_GT) {\u000a    puVar3 = &DAT_004210e7;\u000a    puVar4 = &DAT_004210e1;\u000a    goto LAB_0040d3cd;\u000a  }\u000a  if (local_1c == COMP_LT) {\u000a    puVar4 = (undefined *)0x4225ff;\u000a  }\u000a  else {\u000a    puVar4 = &DAT_004210f1;\u000a    if (local_1c == COMP_EQ) {\u000a      puVar4 = &DAT_004210e4;\u000a    }\u000a    if (local_1c == COMP_GT) {\u000a      puVar3 = &DAT_004210e7;\u000a      goto LAB_0040d3cd;\u000a    }\u000a    if (local_1c != COMP_LT) {\u000a      puVar3 = &DAT_004210f0;\u000a      if (local_1c == COMP_EQ) {\u000a        puVar3 = &DAT_00421568;\u000a      }\u000a      goto LAB_0040d3cd;\u000a    }\u000a  }\u000a  puVar3 = &DAT_004210ea;\u000aLAB_0040d3cd:\u000a  fprintf(stderr,"    type: %s    %s  ",puVar4,puVar3);\u000a  fprintf(stderr,"%ju\u005cn",*(undefined8 *)(ppVar2->args + 8));\u000a  return ppVar2;\u000a}\u000a\u000a
p493
S'PUSH RBX\nSUB RSP,0x20\nMOV RBX,RDX\nLEA RDX,[RSP + 0x10]\nCALL 0x0040c7f0\nTEST AL,AL\nJZ 0x0040d379\nMOV RDI,qword ptr [RSP + 0x10]\nLEA RSI,[RSP + 0x18]\nLEA RDX,[RSP + 0xc]\nCALL 0x0040d400\nTEST AL,AL\nJZ 0x0040d379\nMOV RSI,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00407730\nMOV RBX,RAX\nMOV EAX,dword ptr [RSP + 0xc]\nMOV dword ptr [RBX + 0x38],EAX\nMOV RAX,qword ptr [RSP + 0x18]\nMOV qword ptr [RBX + 0x40],RAX\nTEST byte ptr [0x0062f080],0x1\nJZ 0x0040d37b\nMOV RDI,qword ptr [0x0062de60]\nMOV RDX,qword ptr [RBX + 0x8]\nMOV ESI,0x4210be\nXOR EAX,EAX\nCALL 0x00402ba0\nMOV RDI,qword ptr [0x0062de60]\nMOV EAX,dword ptr [RSP + 0xc]\nTEST EAX,EAX\nJZ 0x0040d384\nCMP EAX,0x1\nJNZ 0x0040d390\nMOV EDX,0x4225ff\nJMP 0x0040d3ae\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x20\nPOP RBX\nRET\nMOV ECX,0x4210e7\nMOV EDX,0x4210e1\nJMP 0x0040d3cd\nCMP EAX,0x2\nMOV EAX,0x4210e4\nMOV EDX,0x4210f1\nCMOVZ RDX,RAX\nMOV EAX,dword ptr [RSP + 0xc]\nTEST EAX,EAX\nJZ 0x0040d3b5\nCMP EAX,0x1\nJNZ 0x0040d3bc\nMOV ECX,0x4210ea\nJMP 0x0040d3cd\nMOV ECX,0x4210e7\nJMP 0x0040d3cd\nCMP EAX,0x2\nMOV EAX,0x421568\nMOV ECX,0x4210f0\nCMOVZ RCX,RAX\nMOV ESI,0x4210cc\nXOR EAX,EAX\nCALL 0x00402ba0\nMOV RDI,qword ptr [0x0062de60]\nMOV RDX,qword ptr [RBX + 0x40]\nMOV ESI,0x42156b\nXOR EAX,EAX\nCALL 0x00402ba0\nJMP 0x0040d37b\n'
p494
S'53\n48 83 ec 20\n48 89 d3\n48 8d 54 24 10\ne8 ee f4 ff ff\n84 c0\n74 73\n48 8b 7c 24 10\n48 8d 74 24 18\n48 8d 54 24 0c\ne8 e6 00 00 00\n84 c0\n74 5b\n48 8b 74 24 10\n48 89 df\ne8 05 a4 ff ff\n48 89 c3\n8b 44 24 0c\n89 43 38\n48 8b 44 24 18\n48 89 43 40\nf6 05 3b 1d 22 00 01\n74 34\n48 8b 3d 12 0b 22 00\n48 8b 53 08\nbe be 10 42 00\n31 c0\ne8 42 58 ff ff\n48 8b 3d fb 0a 22 00\n8b 44 24 0c\n85 c0\n74 17\n83 f8 01\n75 1e\nba ff 25 42 00\neb 35\n31 db\n48 89 d8\n48 83 c4 20\n5b\nc3\nb9 e7 10 42 00\nba e1 10 42 00\neb 3d\n83 f8 02\nb8 e4 10 42 00\nba f1 10 42 00\n48 0f 44 d0\n8b 44 24 0c\n85 c0\n74 0c\n83 f8 01\n75 0e\nb9 ea 10 42 00\neb 18\nb9 e7 10 42 00\neb 11\n83 f8 02\nb8 68 15 42 00\nb9 f0 10 42 00\n48 0f 44 c8\nbe cc 10 42 00\n31 c0\ne8 c7 57 ff ff\n48 8b 3d 80 0a 22 00\n48 8b 53 40\nbe 6b 15 42 00\n31 c0\ne8 b0 57 ff ff\neb 89\n'
p495
S'.text:000000000040d2f0\n.text:000000000040d2f1\n.text:000000000040d2f5\n.text:000000000040d2f8\n.text:000000000040d2fd\n.text:000000000040d302\n.text:000000000040d304\n.text:000000000040d306\n.text:000000000040d30b\n.text:000000000040d310\n.text:000000000040d315\n.text:000000000040d31a\n.text:000000000040d31c\n.text:000000000040d31e\n.text:000000000040d323\n.text:000000000040d326\n.text:000000000040d32b\n.text:000000000040d32e\n.text:000000000040d332\n.text:000000000040d335\n.text:000000000040d33a\n.text:000000000040d33e\n.text:000000000040d345\n.text:000000000040d347\n.text:000000000040d34e\n.text:000000000040d352\n.text:000000000040d357\n.text:000000000040d359\n.text:000000000040d35e\n.text:000000000040d365\n.text:000000000040d369\n.text:000000000040d36b\n.text:000000000040d36d\n.text:000000000040d370\n.text:000000000040d372\n.text:000000000040d377\n.text:000000000040d379\n.text:000000000040d37b\n.text:000000000040d37e\n.text:000000000040d382\n.text:000000000040d383\n.text:000000000040d384\n.text:000000000040d389\n.text:000000000040d38e\n.text:000000000040d390\n.text:000000000040d393\n.text:000000000040d398\n.text:000000000040d39d\n.text:000000000040d3a1\n.text:000000000040d3a5\n.text:000000000040d3a7\n.text:000000000040d3a9\n.text:000000000040d3ac\n.text:000000000040d3ae\n.text:000000000040d3b3\n.text:000000000040d3b5\n.text:000000000040d3ba\n.text:000000000040d3bc\n.text:000000000040d3bf\n.text:000000000040d3c4\n.text:000000000040d3c9\n.text:000000000040d3cd\n.text:000000000040d3d2\n.text:000000000040d3d4\n.text:000000000040d3d9\n.text:000000000040d3e0\n.text:000000000040d3e4\n.text:000000000040d3e9\n.text:000000000040d3eb\n.text:000000000040d3f0\n'
p496
tp497
sS'pred_path'
p498
(S'\n__stdcall pred_path(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p499
V\u000a_Bool pred_path(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = fnmatch(*(char **)pred_ptr->args,pathname,0);\u000a  return (_Bool)(iVar1 == 0);\u000a}\u000a\u000a
p500
S'PUSH RAX\nMOV RAX,RDI\nMOV RDI,qword ptr [RDX + 0x38]\nXOR EDX,EDX\nMOV RSI,RAX\nCALL 0x00402a60\nTEST EAX,EAX\nSETZ AL\nPOP RCX\nRET\n'
p501
S'50\n48 89 f8\n48 8b 7a 38\n31 d2\n48 89 c6\ne8 fe e4 ff ff\n85 c0\n0f 94 c0\n59\nc3\n'
p502
S'.text:0000000000404550\n.text:0000000000404551\n.text:0000000000404554\n.text:0000000000404558\n.text:000000000040455a\n.text:000000000040455d\n.text:0000000000404562\n.text:0000000000404564\n.text:0000000000404567\n.text:0000000000404568\n'
p503
tp504
sS'record_exec_dir'
p505
(S'\n__stdcall record_exec_dir(exec_val * execp)\n'
p506
V\u000a_Bool record_exec_dir(exec_val *execp)\u000a\u000a{\u000a  _Bool _Var1;\u000a  char *pcVar2;\u000a  char *file;\u000a  \u000a  file = state.rel_pathname;\u000a  if ((execp->state).todo == 0) {\u000a    pcVar2 = strchr(state.rel_pathname,0x2f);\u000a    if (pcVar2 == (char *)0x0) {\u000a      _Var1 = initialize_wd_for_exec(execp,(char *)(ulong)(uint)state.cwd_dir_fd);\u000a      return _Var1;\u000a    }\u000a    file = mdir_name(file);\u000a    _Var1 = initialize_wd_for_exec(execp,(char *)(ulong)(uint)state.cwd_dir_fd);\u000a    free(file);\u000a  }\u000a  else {\u000a    _Var1 = true;\u000a  }\u000a  return _Var1;\u000a}\u000a\u000a
p507
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCMP dword ptr [0x98 + RBX],0x0\nJZ 0x00405404\nMOV AL,0x1\nJMP 0x00405445\nMOV R14,qword ptr [0x0062f010]\nMOV ESI,0x2f\nMOV RDI,R14\nCALL 0x00402980\nTEST RAX,RAX\nJZ 0x0040544d\nMOV RDI,R14\nCALL 0x00410030\nMOV R14,RAX\nMOV ESI,dword ptr [0x0062f018]\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00405790\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x00402710\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV ESI,dword ptr [0x0062f018]\nMOV EDX,0x4217ea\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00405790\n'
p508
S'41 56\n53\n50\n48 89 fb\n83 bb 98 00 00 00 00\n74 04\nb0 01\neb 41\n4c 8b 35 05 9c 22 00\nbe 2f 00 00 00\n4c 89 f7\ne8 68 d5 ff ff\n48 85 c0\n74 30\n4c 89 f7\ne8 0b ac 00 00\n49 89 c6\n8b 35 ea 9b 22 00\n48 89 df\n4c 89 f2\ne8 57 03 00 00\n89 c3\n4c 89 f7\ne8 cd d2 ff ff\n89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n8b 35 c5 9b 22 00\nba ea 17 42 00\n48 89 df\n48 83 c4 08\n5b\n41 5e\ne9 29 03 00 00\n'
p509
S'.text:00000000004053f0\n.text:00000000004053f2\n.text:00000000004053f3\n.text:00000000004053f4\n.text:00000000004053f7\n.text:00000000004053fe\n.text:0000000000405400\n.text:0000000000405402\n.text:0000000000405404\n.text:000000000040540b\n.text:0000000000405410\n.text:0000000000405413\n.text:0000000000405418\n.text:000000000040541b\n.text:000000000040541d\n.text:0000000000405420\n.text:0000000000405425\n.text:0000000000405428\n.text:000000000040542e\n.text:0000000000405431\n.text:0000000000405434\n.text:0000000000405439\n.text:000000000040543b\n.text:000000000040543e\n.text:0000000000405443\n.text:0000000000405445\n.text:0000000000405449\n.text:000000000040544a\n.text:000000000040544c\n.text:000000000040544d\n.text:0000000000405453\n.text:0000000000405458\n.text:000000000040545b\n.text:000000000040545f\n.text:0000000000405460\n.text:0000000000405462\n'
p510
tp511
sS'parse_cmin'
p512
(S'\n__stdcall parse_cmin(parser_table * entry, char * * argv, int * arg_ptr)\n'
p513
V\u000a_Bool parse_cmin(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = do_parse_xmin(entry,argv,arg_ptr);\u000a  return _Var1;\u000a}\u000a\u000a
p514
S'MOV ECX,0x2\nJMP 0x0040c740\n'
p515
S'b9 02 00 00 00\ne9 96 15 00 00\n'
p516
S'.text:000000000040b1a0\n.text:000000000040b1a5\n'
p517
tp518
sS'parse_ignore_race'
p519
(S'\n__stdcall parse_ignore_race(parser_table * entry, char * * argv, int * arg_ptr)\n'
p520
V\u000a_Bool parse_ignore_race(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  options.ignore_readdir_race = true;\u000a  parse_noop();\u000a  return true;\u000a}\u000a\u000a
p521
S'PUSH RAX\nMOV byte ptr [0x0062f04e],0x1\nMOV RDI,RSI\nMOV RSI,RDX\nCALL 0x0040ca00\nMOV AL,0x1\nPOP RCX\nRET\n'
p522
S'50\nc6 05 e6 37 22 00 01\n48 89 f7\n48 89 d6\ne8 8d 11 00 00\nb0 01\n59\nc3\n'
p523
S'.text:000000000040b860\n.text:000000000040b861\n.text:000000000040b868\n.text:000000000040b86b\n.text:000000000040b86e\n.text:000000000040b873\n.text:000000000040b875\n.text:000000000040b876\n'
p524
tp525
sS'get_relative_timestamp'
p526
(S'\n__stdcall get_relative_timestamp(char * str, time_val * result, double sec_per_unit, char * overflowmessage)\n'
p527
V\u000a_Bool get_relative_timestamp(char *str,time_val *result,double sec_per_unit,char *overflowmessage)\u000a\u000a{\u000a  _Bool _Var1;\u000a  comparison_type cVar2;\u000a  long lVar3;\u000a  long in_RCX;\u000a  undefined uVar4;\u000a  double dVar5;\u000a  double offset;\u000a  double local_38;\u000a  double local_30;\u000a  \u000a  get_comp_type();\u000a  if (result->kind == COMP_LT) {\u000a    cVar2 = COMP_GT;\u000a  }\u000a  else {\u000a    if (result->kind != COMP_GT) goto LAB_0040c85c;\u000a    cVar2 = COMP_LT;\u000a  }\u000a  result->kind = cVar2;\u000aLAB_0040c85c:\u000a  uVar4 = 0;\u000a  _Var1 = xstrtod(str,(char **)0x0,&local_30,strtod);\u000a  if (_Var1 != false) {\u000a    dVar5 = modf(sec_per_unit * local_30,&local_38);\u000a    dVar5 = dVar5 * DAT_0041fbf0;\u000a    if (DAT_0041fbf0 <= dVar5) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("nanosec < nanosec_per_sec","parser.c",0xc74,\u000a                                        \u000a                    "_Bool get_relative_timestamp(const char *, struct time_val *, struct timespec, double, const char *)"\u000a                   );\u000a    }\u000a    (result->ts).tv_sec = (long)((double)(long)overflowmessage - local_38);\u000a    if (local_38 < 0.00000000 !=\u000a        (long)overflowmessage < (long)((double)(long)overflowmessage - local_38)) {\u000a      error(1,0);\u000a    }\u000a    lVar3 = (long)((double)in_RCX - dVar5);\u000a    (result->ts).tv_nsec = lVar3;\u000a    uVar4 = 1;\u000a    if ((double)in_RCX < dVar5) {\u000a      (result->ts).tv_nsec = lVar3 + 1000000000;\u000a      (result->ts).tv_sec = (result->ts).tv_sec + -1;\u000a    }\u000a  }\u000a  return (_Bool)uVar4;\u000a}\u000a\u000a
p528
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x20\nMOV R15,R8\nMOVSD qword ptr [RSP],XMM0\nMOV R14,RCX\nMOV R12,RDX\nMOV R13,RSI\nMOV qword ptr [RSP + 0x8],RDI\nLEA RBX,[R13 + 0x4]\nLEA RDI,[RSP + 0x8]\nMOV RSI,RBX\nCALL 0x0040c980\nMOV EAX,dword ptr [R13 + 0x4]\nCMP EAX,0x1\nJZ 0x0040c858\nTEST EAX,EAX\nJNZ 0x0040c85c\nMOV EAX,0x1\nJMP 0x0040c85a\nXOR EAX,EAX\nMOV dword ptr [RBX],EAX\nMOV RDI,qword ptr [RSP + 0x8]\nXOR EBX,EBX\nLEA RDX,[RSP + 0x18]\nXOR ESI,ESI\nMOV ECX,0x402840\nCALL 0x00417400\nTEST AL,AL\nJZ 0x0040c926\nMOVSD XMM0,qword ptr [RSP]\nMULSD XMM0,qword ptr [RSP + 0x18]\nLEA RDI,[RSP + 0x10]\nCALL 0x004029f0\nMOVAPD XMM2,XMM0\nMOVSD XMM0,qword ptr [0x0041fbf0]\nMULSD XMM2,XMM0\nUCOMISD XMM0,XMM2\nJBE 0x0040c936\nXORPS XMM0,XMM0\nCVTSI2SD XMM0,R12\nMOVSD XMM1,qword ptr [RSP + 0x10]\nSUBSD XMM0,XMM1\nCVTTSD2SI RAX,XMM0\nMOV qword ptr [R13 + 0x8],RAX\nCMP RAX,R12\nSETG AL\nXORPD XMM0,XMM0\nUCOMISD XMM0,XMM1\nSETA CL\nCMP CL,AL\nJZ 0x0040c8fb\nMOV RCX,qword ptr [RSP + 0x8]\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R15\nMOVSD qword ptr [RSP],XMM2\nCALL 0x00402d90\nMOVSD XMM2,qword ptr [RSP]\nXORPS XMM0,XMM0\nCVTSI2SD XMM0,R14\nUCOMISD XMM2,XMM0\nSUBSD XMM0,XMM2\nCVTTSD2SI RAX,XMM0\nMOV qword ptr [R13 + 0x10],RAX\nMOV BL,0x1\nJBE 0x0040c926\nADD RAX,0x3b9aca00\nMOV qword ptr [R13 + 0x10],RAX\nDEC qword ptr [R13 + 0x8]\nMOV EAX,EBX\nADD RSP,0x20\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\nMOV EDI,0x420ffb\nMOV ESI,0x420cb7\nMOV EDX,0xc74\nMOV ECX,0x421015\nCALL 0x00402a40\n'
p529
S'41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 20\n4d 89 c7\nf2 0f 11 04 24\n49 89 ce\n49 89 d4\n49 89 f5\n48 89 7c 24 08\n49 8d 5d 04\n48 8d 7c 24 08\n48 89 de\ne8 3c 01 00 00\n41 8b 45 04\n83 f8 01\n74 0b\n85 c0\n75 0b\nb8 01 00 00 00\neb 02\n31 c0\n89 03\n48 8b 7c 24 08\n31 db\n48 8d 54 24 18\n31 f6\nb9 40 28 40 00\ne8 8c ab 00 00\n84 c0\n0f 84 aa 00 00 00\nf2 0f 10 04 24\nf2 0f 59 44 24 18\n48 8d 7c 24 10\ne8 5f 61 ff ff\n66 0f 28 d0\nf2 0f 10 05 53 33 01 00\nf2 0f 59 d0\n66 0f 2e c2\n0f 86 8b 00 00 00\n0f 57 c0\nf2 49 0f 2a c4\nf2 0f 10 4c 24 10\nf2 0f 5c c1\nf2 48 0f 2c c0\n49 89 45 08\n4c 39 e0\n0f 9f c0\n66 0f 57 c0\n66 0f 2e c1\n0f 97 c1\n38 c1\n74 20\n48 8b 4c 24 08\nbf 01 00 00 00\n31 f6\n31 c0\n4c 89 fa\nf2 0f 11 14 24\ne8 9a 64 ff ff\nf2 0f 10 14 24\n0f 57 c0\nf2 49 0f 2a c6\n66 0f 2e d0\nf2 0f 5c c2\nf2 48 0f 2c c0\n49 89 45 10\nb3 01\n76 0e\n48 05 00 ca 9a 3b\n49 89 45 10\n49 ff 4d 08\n89 d8\n48 83 c4 20\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\nbf fb 0f 42 00\nbe b7 0c 42 00\nba 74 0c 00 00\nb9 15 10 42 00\ne8 f1 60 ff ff\n'
p530
S'.text:000000000040c810\n.text:000000000040c812\n.text:000000000040c814\n.text:000000000040c816\n.text:000000000040c818\n.text:000000000040c819\n.text:000000000040c81d\n.text:000000000040c820\n.text:000000000040c825\n.text:000000000040c828\n.text:000000000040c82b\n.text:000000000040c82e\n.text:000000000040c833\n.text:000000000040c837\n.text:000000000040c83c\n.text:000000000040c83f\n.text:000000000040c844\n.text:000000000040c848\n.text:000000000040c84b\n.text:000000000040c84d\n.text:000000000040c84f\n.text:000000000040c851\n.text:000000000040c856\n.text:000000000040c858\n.text:000000000040c85a\n.text:000000000040c85c\n.text:000000000040c861\n.text:000000000040c863\n.text:000000000040c868\n.text:000000000040c86a\n.text:000000000040c86f\n.text:000000000040c874\n.text:000000000040c876\n.text:000000000040c87c\n.text:000000000040c881\n.text:000000000040c887\n.text:000000000040c88c\n.text:000000000040c891\n.text:000000000040c895\n.text:000000000040c89d\n.text:000000000040c8a1\n.text:000000000040c8a5\n.text:000000000040c8ab\n.text:000000000040c8ae\n.text:000000000040c8b3\n.text:000000000040c8b9\n.text:000000000040c8bd\n.text:000000000040c8c2\n.text:000000000040c8c6\n.text:000000000040c8c9\n.text:000000000040c8cc\n.text:000000000040c8d0\n.text:000000000040c8d4\n.text:000000000040c8d7\n.text:000000000040c8d9\n.text:000000000040c8db\n.text:000000000040c8e0\n.text:000000000040c8e5\n.text:000000000040c8e7\n.text:000000000040c8e9\n.text:000000000040c8ec\n.text:000000000040c8f1\n.text:000000000040c8f6\n.text:000000000040c8fb\n.text:000000000040c8fe\n.text:000000000040c903\n.text:000000000040c907\n.text:000000000040c90b\n.text:000000000040c910\n.text:000000000040c914\n.text:000000000040c916\n.text:000000000040c918\n.text:000000000040c91e\n.text:000000000040c922\n.text:000000000040c926\n.text:000000000040c928\n.text:000000000040c92c\n.text:000000000040c92d\n.text:000000000040c92f\n.text:000000000040c931\n.text:000000000040c933\n.text:000000000040c935\n.text:000000000040c936\n.text:000000000040c93b\n.text:000000000040c940\n.text:000000000040c945\n.text:000000000040c94a\n'
p531
tp532
sS'parse_links'
p533
(S'\n__stdcall parse_links(parser_table * entry, char * * argv, int * arg_ptr)\n'
p534
V\u000a_Bool parse_links(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  undefined uVar1;\u000a  predicate *ppVar2;\u000a  \u000a  ppVar2 = insert_num(argv,arg_ptr,entry);\u000a  if (ppVar2 == (predicate *)0x0) {\u000a    *arg_ptr = *arg_ptr + -1;\u000a    uVar1 = 0;\u000a  }\u000a  else {\u000a    if (*(long *)(ppVar2->args + 8) == 1) {\u000a      ppVar2->est_success_rate = 0.99000001;\u000a    }\u000a    else {\u000a      ppVar2->est_success_rate =\u000a           *(float *)(&DAT_0041fbd0 + (ulong)(*(long *)(ppVar2->args + 8) == 2) * 4);\u000a    }\u000a    uVar1 = 1;\u000a  }\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p535
S'PUSH RBX\nMOV RBX,RDX\nMOV RAX,RDI\nMOV RDI,RSI\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x0040d2f0\nTEST RAX,RAX\nJZ 0x0040ba0d\nMOV RCX,qword ptr [RAX + 0x40]\nCMP RCX,0x1\nJNZ 0x0040ba13\nMOV dword ptr [RAX + 0x24],0x3f7d70a4\nJMP 0x0040ba2a\nDEC dword ptr [RBX]\nXOR EAX,EAX\nJMP 0x0040ba2c\nXOR EDX,EDX\nCMP RCX,0x2\nSETZ DL\nMOVSS XMM0,dword ptr [0x41fbd0 + RDX*0x4]\nMOVSS dword ptr [RAX + 0x24],XMM0\nMOV AL,0x1\nPOP RBX\nRET\n'
p536
S'53\n48 89 d3\n48 89 f8\n48 89 f7\n48 89 de\n48 89 c2\ne8 fb 18 00 00\n48 85 c0\n74 13\n48 8b 48 40\n48 83 f9 01\n75 0f\nc7 40 24 a4 70 7d 3f\neb 1d\nff 0b\n31 c0\neb 19\n31 d2\n48 83 f9 02\n0f 94 c2\nf3 0f 10 04 95 d0 fb 41 00\nf3 0f 11 40 24\nb0 01\n5b\nc3\n'
p537
S'.text:000000000040b9e0\n.text:000000000040b9e1\n.text:000000000040b9e4\n.text:000000000040b9e7\n.text:000000000040b9ea\n.text:000000000040b9ed\n.text:000000000040b9f0\n.text:000000000040b9f5\n.text:000000000040b9f8\n.text:000000000040b9fa\n.text:000000000040b9fe\n.text:000000000040ba02\n.text:000000000040ba04\n.text:000000000040ba0b\n.text:000000000040ba0d\n.text:000000000040ba0f\n.text:000000000040ba11\n.text:000000000040ba13\n.text:000000000040ba15\n.text:000000000040ba19\n.text:000000000040ba1c\n.text:000000000040ba25\n.text:000000000040ba2a\n.text:000000000040ba2c\n.text:000000000040ba2d\n'
p538
tp539
sS'version_etc'
p540
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p541
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p542
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00417142\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x004170a0\nADD RSP,0xd8\nRET\n'
p543
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p544
S'.text:0000000000417100\n.text:0000000000417107\n.text:0000000000417109\n.text:000000000041710b\n.text:0000000000417110\n.text:0000000000417115\n.text:000000000041711a\n.text:0000000000417122\n.text:000000000041712a\n.text:0000000000417132\n.text:000000000041713a\n.text:0000000000417142\n.text:0000000000417147\n.text:000000000041714c\n.text:0000000000417151\n.text:0000000000417156\n.text:000000000041715e\n.text:0000000000417163\n.text:000000000041716b\n.text:0000000000417172\n.text:0000000000417175\n.text:000000000041717a\n.text:0000000000417181\n'
p545
tp546
sS'mktime_ok'
p547
(S'\n__stdcall mktime_ok(tm * tm0, tm * tm1, time_t t)\n'
p548
V\u000a_Bool mktime_ok(tm *tm0,tm *tm1,time_t t)\u000a\u000a{\u000a  time_t local_10;\u000a  \u000a  if ((t == -1) && (local_10 = t, tm1 = (tm *)localtime(&local_10), tm1 == (tm *)0x0)) {\u000a    return false;\u000a  }\u000a  return (_Bool)((((tm *)tm1)->tm_year ^ tm0->tm_year |\u000a                 ((tm *)tm1)->tm_mon ^ tm0->tm_mon |\u000a                 ((tm *)tm1)->tm_mday ^ tm0->tm_mday | ((tm *)tm1)->tm_hour ^ tm0->tm_hour |\u000a                 ((tm *)tm1)->tm_min ^ tm0->tm_min | ((tm *)tm1)->tm_sec ^ tm0->tm_sec) == 0);\u000a}\u000a\u000a
p549
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RDI\nMOV qword ptr [RSP + 0x8],RDX\nCMP RDX,-0x1\nJNZ 0x00414d75\nLEA RDI,[RSP + 0x8]\nCALL 0x00402740\nMOV RSI,RAX\nTEST RSI,RSI\nJZ 0x00414daa\nMOV EAX,dword ptr [RSI]\nMOV ECX,dword ptr [RSI + 0x4]\nXOR EAX,dword ptr [RBX]\nXOR ECX,dword ptr [RBX + 0x4]\nOR ECX,EAX\nMOV EAX,dword ptr [RSI + 0x8]\nXOR EAX,dword ptr [RBX + 0x8]\nMOV EDX,dword ptr [RSI + 0xc]\nXOR EDX,dword ptr [RBX + 0xc]\nOR EDX,EAX\nOR EDX,ECX\nMOV EAX,dword ptr [RSI + 0x10]\nXOR EAX,dword ptr [RBX + 0x10]\nOR EAX,EDX\nMOV ECX,dword ptr [RSI + 0x14]\nXOR ECX,dword ptr [RBX + 0x14]\nOR ECX,EAX\nSETZ AL\nADD RSP,0x10\nPOP RBX\nRET\nXOR EAX,EAX\nJMP 0x00414da4\n'
p550
S'53\n48 83 ec 10\n48 89 fb\n48 89 54 24 08\n48 83 fa ff\n75 12\n48 8d 7c 24 08\ne8 d3 d9 fe ff\n48 89 c6\n48 85 f6\n74 35\n8b 06\n8b 4e 04\n33 03\n33 4b 04\n09 c1\n8b 46 08\n33 43 08\n8b 56 0c\n33 53 0c\n09 c2\n09 ca\n8b 46 10\n33 43 10\n09 d0\n8b 4e 14\n33 4b 14\n09 c1\n0f 94 c0\n48 83 c4 10\n5b\nc3\n31 c0\neb f6\n'
p551
S'.text:0000000000414d50\n.text:0000000000414d51\n.text:0000000000414d55\n.text:0000000000414d58\n.text:0000000000414d5d\n.text:0000000000414d61\n.text:0000000000414d63\n.text:0000000000414d68\n.text:0000000000414d6d\n.text:0000000000414d70\n.text:0000000000414d73\n.text:0000000000414d75\n.text:0000000000414d77\n.text:0000000000414d7a\n.text:0000000000414d7c\n.text:0000000000414d7f\n.text:0000000000414d81\n.text:0000000000414d84\n.text:0000000000414d87\n.text:0000000000414d8a\n.text:0000000000414d8d\n.text:0000000000414d8f\n.text:0000000000414d91\n.text:0000000000414d94\n.text:0000000000414d97\n.text:0000000000414d99\n.text:0000000000414d9c\n.text:0000000000414d9f\n.text:0000000000414da1\n.text:0000000000414da4\n.text:0000000000414da8\n.text:0000000000414da9\n.text:0000000000414daa\n.text:0000000000414dac\n'
p552
tp553
sS'cdb_init'
p554
(S'\n__stdcall cdb_init(cd_buf * cdb)\n'
p555
V\u000avoid cdb_init(cd_buf *cdb)\u000a\u000a{\u000a  *cdb = (cd_buf)0xffffff9c;\u000a  return;\u000a}\u000a\u000a
p556
S'MOV dword ptr [RDI],0xffffff9c\nRET\n'
p557
S'c7 07 9c ff ff ff\nc3\n'
p558
S'.text:0000000000417d30\n.text:0000000000417d36\n'
p559
tp560
sS'hash_get_first'
p561
(S'\n__stdcall hash_get_first(Hash_table * table)\n'
p562
V\u000avoid * hash_get_first(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  \u000a  if (table->n_entries == 0) {\u000a    return (void *)0x0;\u000a  }\u000a  phVar1 = table->bucket;\u000a  if (phVar1 < table->bucket_limit) {\u000a    do {\u000a      if (phVar1->data != (void *)0x0) {\u000a        return phVar1->data;\u000a      }\u000a      phVar1 = phVar1 + 1;\u000a    } while (phVar1 < table->bucket_limit);\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p563
S'CMP qword ptr [RDI + 0x20],0x0\nJZ 0x00410643\nMOV RCX,qword ptr [RDI]\nCMP RCX,qword ptr [RDI + 0x8]\nJC 0x0041063a\nJMP 0x00410646\nADD RCX,0x10\nCMP RCX,qword ptr [RDI + 0x8]\nJNC 0x00410646\nMOV RAX,qword ptr [RCX]\nTEST RAX,RAX\nJZ 0x00410630\nRET\nXOR EAX,EAX\nRET\nPUSH RAX\nCALL 0x00402750\n'
p564
S'48 83 7f 20 00\n74 2c\n48 8b 0f\n48 3b 4f 08\n72 1a\neb 24\n48 83 c1 10\n48 3b 4f 08\n73 0c\n48 8b 01\n48 85 c0\n74 ee\nc3\n31 c0\nc3\n50\ne8 04 21 ff ff\n'
p565
S'.text:0000000000410610\n.text:0000000000410615\n.text:0000000000410617\n.text:000000000041061a\n.text:000000000041061e\n.text:0000000000410620\n.text:0000000000410630\n.text:0000000000410634\n.text:0000000000410638\n.text:000000000041063a\n.text:000000000041063d\n.text:0000000000410640\n.text:0000000000410642\n.text:0000000000410643\n.text:0000000000410645\n.text:0000000000410646\n.text:0000000000410647\n'
p566
tp567
sS'wcwidth'
p568
(S'\n__stdcall wcwidth(wchar_t __c)\n'
p569
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint wcwidth(wchar_t __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_wcwidth_0062d2c0)();\u000a  return iVar1;\u000a}\u000a\u000a
p570
S'JMP qword ptr [0x0062d2c0]\n'
p571
S'ff 25 7a a6 22 00\n'
p572
S'.plt:0000000000402c40\n'
p573
tp574
sS'parse_printf'
p575
(S'\n__stdcall parse_printf(parser_table * entry, char * * argv, int * arg_ptr)\n'
p576
V\u000a_Bool parse_printf(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  int iVar1;\u000a  _Bool _Var2;\u000a  format_val fmt;\u000a  char *local_50;\u000a  format_val local_48;\u000a  \u000a  iVar1 = *arg_ptr;\u000a  _Var2 = collect_arg_nonconst(argv,arg_ptr,&local_50);\u000a  if (_Var2 != false) {\u000a    open_stdout(&local_48);\u000a    _Var2 = insert_fprintf(&local_48,entry,local_50);\u000a    if (_Var2 != false) {\u000a      return true;\u000a    }\u000a    *arg_ptr = iVar1;\u000a  }\u000a  return false;\u000a}\u000a\u000a
p577
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV RBX,RDX\nMOV R14,RDI\nMOV EBP,dword ptr [RBX]\nLEA RDX,[RSP + 0x8]\nMOV RDI,RSI\nMOV RSI,RBX\nCALL 0x0040c950\nTEST AL,AL\nJZ 0x0040bf4d\nLEA R15,[RSP + 0x10]\nMOV RDI,R15\nCALL 0x0040a980\nMOV RDX,qword ptr [RSP + 0x8]\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x00408e80\nMOV ECX,EAX\nMOV AL,0x1\nTEST CL,CL\nJNZ 0x0040bf4f\nMOV dword ptr [RBX],EBP\nXOR EAX,EAX\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p578
S'55\n41 57\n41 56\n53\n48 83 ec 38\n48 89 d3\n49 89 fe\n8b 2b\n48 8d 54 24 08\n48 89 f7\n48 89 de\ne8 2e 0a 00 00\n84 c0\n74 27\n4c 8d 7c 24 10\n4c 89 ff\ne8 4d ea ff ff\n48 8b 54 24 08\n4c 89 ff\n4c 89 f6\ne8 3d cf ff ff\n89 c1\nb0 01\n84 c9\n75 04\n89 2b\n31 c0\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p579
S'.text:000000000040bf00\n.text:000000000040bf01\n.text:000000000040bf03\n.text:000000000040bf05\n.text:000000000040bf06\n.text:000000000040bf0a\n.text:000000000040bf0d\n.text:000000000040bf10\n.text:000000000040bf12\n.text:000000000040bf17\n.text:000000000040bf1a\n.text:000000000040bf1d\n.text:000000000040bf22\n.text:000000000040bf24\n.text:000000000040bf26\n.text:000000000040bf2b\n.text:000000000040bf2e\n.text:000000000040bf33\n.text:000000000040bf38\n.text:000000000040bf3b\n.text:000000000040bf3e\n.text:000000000040bf43\n.text:000000000040bf45\n.text:000000000040bf47\n.text:000000000040bf49\n.text:000000000040bf4b\n.text:000000000040bf4d\n.text:000000000040bf4f\n.text:000000000040bf53\n.text:000000000040bf54\n.text:000000000040bf56\n.text:000000000040bf58\n.text:000000000040bf59\n'
p580
tp581
sS'parse_prune'
p582
(S'\n__stdcall parse_prune(parser_table * entry, char * * argv, int * arg_ptr)\n'
p583
V\u000a_Bool parse_prune(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  predicate *ppVar1;\u000a  \u000a  ppVar1 = insert_primary_noarg(entry);\u000a  if (options.do_dir_first == false) {\u000a    *(undefined2 *)&ppVar1->need_stat = 0;\u000a  }\u000a  *(undefined2 *)&ppVar1->side_effects = 1;\u000a  return true;\u000a}\u000a\u000a
p584
S'PUSH RAX\nCALL 0x00407760\nCMP byte ptr [0x0062f040],0x0\nJNZ 0x0040bf75\nMOV word ptr [RAX + 0x1a],0x0\nMOV word ptr [RAX + 0x18],0x1\nMOV AL,0x1\nPOP RCX\nRET\n'
p585
S'50\ne8 fa b7 ff ff\n80 3d d3 30 22 00 00\n75 06\n66 c7 40 1a 00 00\n66 c7 40 18 01 00\nb0 01\n59\nc3\n'
p586
S'.text:000000000040bf60\n.text:000000000040bf61\n.text:000000000040bf66\n.text:000000000040bf6d\n.text:000000000040bf6f\n.text:000000000040bf75\n.text:000000000040bf7b\n.text:000000000040bf7d\n.text:000000000040bf7e\n'
p587
tp588
sS'parse_type'
p589
(S'\n__stdcall parse_type(parser_table * entry, char * * argv, int * arg_ptr)\n'
p590
V\u000a_Bool parse_type(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = insert_type(argv,arg_ptr,entry,pred_type);\u000a  return _Var1;\u000a}\u000a\u000a
p591
S'MOV RAX,RDI\nMOV ECX,0x404790\nMOV RDI,RSI\nMOV RSI,RDX\nMOV RDX,RAX\nJMP 0x0040d8a0\n'
p592
S'48 89 f8\nb9 90 47 40 00\n48 89 f7\n48 89 d6\n48 89 c2\ne9 da 14 00 00\n'
p593
S'.text:000000000040c3b0\n.text:000000000040c3b3\n.text:000000000040c3b8\n.text:000000000040c3bb\n.text:000000000040c3be\n.text:000000000040c3c1\n'
p594
tp595
sS'parse_help'
p596
(S'\n__stdcall parse_help(parser_table * entry, char * * argv, int * arg_ptr)\n'
p597
V\u000a_Bool parse_help(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  char *__format;\u000a  ulong auStack16 [2];\u000a  \u000a  auStack16[0] = 0x40c668;\u000a  auStack16[0] = usage(0);\u000a  display_findutils_version("find");\u000a  __format = (char *)dcgettext(0,"Features enabled: ",5);\u000a  printf(__format);\u000a  printf("D_TYPE ");\u000a  __format = "disabled";\u000a  if (options.open_nofollow_available != false) {\u000a    __format = "enabled";\u000a  }\u000a  printf("O_NOFOLLOW(%s) ",__format);\u000a  printf("LEAF_OPTIMISATION ");\u000a  auStack16[0] = auStack16[0] & 0xffffffff;\u000a  _Var1 = is_fts_enabled((int *)((long)auStack16 + 4));\u000a  if (_Var1 != false) {\u000a    printf("FTS(");\u000a    if ((auStack16[0] & 0x20000000000) != 0) {\u000a      printf("FTS_CWDFD");\u000a    }\u000a    printf(") ");\u000a  }\u000a  printf("CBO(level=%d) ",(ulong)options.optimisation_level);\u000a  putchar(10);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(0);\u000a}\u000a\u000a
p598
S'PUSH RAX\nXOR EDI,EDI\nCALL 0x00407770\nNOP dword ptr [RAX + RAX*0x1]\n'
p599
S'50\n31 ff\ne8 08 b1 ff ff\n0f 1f 84 00 00 00 00 00\n'
p600
S'.text:000000000040c660\n.text:000000000040c661\n.text:000000000040c663\n.text:000000000040c668\n'
p601
tp602
sS'parse_openparen'
p603
(S'\n__stdcall parse_openparen(parser_table * entry, char * * argv, int * arg_ptr)\n'
p604
V\u000a_Bool parse_openparen(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  predicate *ppVar1;\u000a  \u000a  ppVar1 = get_new_pred_chk_op(entry,(char *)0x0);\u000a  ppVar1->pred_func = pred_openparen;\u000a  ppVar1->p_type = OPEN_PAREN;\u000a  ppVar1->p_prec = NO_PREC;\u000a  *(undefined2 *)&ppVar1->need_stat = 0;\u000a  return true;\u000a}\u000a\u000a
p605
S'PUSH RAX\nXOR ESI,ESI\nCALL 0x00406c00\nMOV qword ptr [RAX],0x4044f0\nMOV dword ptr [RAX + 0x10],0x4\nMOV dword ptr [RAX + 0x14],0x0\nMOV word ptr [RAX + 0x1a],0x0\nMOV AL,0x1\nPOP RCX\nRET\n'
p606
S'50\n31 f6\ne8 c8 c2 ff ff\n48 c7 00 f0 44 40 00\nc7 40 10 04 00 00 00\nc7 40 14 00 00 00 00\n66 c7 40 1a 00 00\nb0 01\n59\nc3\n'
p607
S'.text:000000000040a930\n.text:000000000040a931\n.text:000000000040a933\n.text:000000000040a938\n.text:000000000040a93f\n.text:000000000040a946\n.text:000000000040a94d\n.text:000000000040a953\n.text:000000000040a955\n.text:000000000040a956\n'
p608
tp609
sS'parse_noignore_race'
p610
(S'\n__stdcall parse_noignore_race(parser_table * entry, char * * argv, int * arg_ptr)\n'
p611
V\u000a_Bool parse_noignore_race(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  options.ignore_readdir_race = false;\u000a  parse_noop();\u000a  return true;\u000a}\u000a\u000a
p612
S'PUSH RAX\nMOV byte ptr [0x0062f04e],0x0\nMOV RDI,RSI\nMOV RSI,RDX\nCALL 0x0040ca00\nMOV AL,0x1\nPOP RCX\nRET\n'
p613
S'50\nc6 05 c6 33 22 00 00\n48 89 f7\n48 89 d6\ne8 6d 0d 00 00\nb0 01\n59\nc3\n'
p614
S'.text:000000000040bc80\n.text:000000000040bc81\n.text:000000000040bc88\n.text:000000000040bc8b\n.text:000000000040bc8e\n.text:000000000040bc93\n.text:000000000040bc95\n.text:000000000040bc96\n'
p615
tp616
sS'make_segment'
p617
(S'\n__stdcall make_segment(segment * * segment, char * format, predicate * pred)\n'
p618
V\u000asegment ** make_segment(segment **segment,char *format,predicate *pred)\u000a\u000a{\u000a  segment *psVar1;\u000a  SegmentKind in_ECX;\u000a  uint uVar2;\u000a  char cVar3;\u000a  size_t __n;\u000a  undefined4 in_R8D;\u000a  char in_R9B;\u000a  char *__dest;\u000a  long in_stack_00000008;\u000a  \u000a  cVar3 = (char)in_R8D;\u000a  if (cVar3 == '(') {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("format_char != \u005c'(\u005c'","print.c",0x56,\u000a                                    \u000a                  "struct segment **make_segment(struct segment **, char *, int, int, char, char, struct predicate *)"\u000a                 );\u000a  }\u000a  if (cVar3 == '[') {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("format_char != \u005c'[\u005c'","print.c",0x55,\u000a                                    \u000a                  "struct segment **make_segment(struct segment **, char *, int, int, char, char, struct predicate *)"\u000a                 );\u000a  }\u000a  if (cVar3 == '{') {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("format_char != \u005c'{\u005c'","print.c",0x54,\u000a                                    \u000a                  "struct segment **make_segment(struct segment **, char *, int, int, char, char, struct predicate *)"\u000a                 );\u000a  }\u000a  psVar1 = (segment *)xmalloc(0x20);\u000a  *segment = psVar1;\u000a  psVar1->segkind = in_ECX;\u000a  psVar1->format_char[0] = cVar3;\u000a  psVar1->format_char[1] = in_R9B;\u000a  (*segment)->next = (segment *)0x0;\u000a  (*segment)->text_len = (int)pred;\u000a  __n = SEXT48((int)pred);\u000a  __dest = (char *)xmalloc(__n + 2);\u000a  (*segment)->text = __dest;\u000a  strncpy(__dest,format,__n);\u000a  __dest = __dest + __n;\u000a  if ((in_ECX | KIND_STOP) == KIND_STOP) {\u000a    if (cVar3 != 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("0 == format_char","print.c",0x67,\u000a                                        \u000a                    "struct segment **make_segment(struct segment **, char *, int, int, char, char, struct predicate *)"\u000a                   );\u000a    }\u000a    if (in_R9B != 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("0 == aux_format_char","print.c",0x68,\u000a                                        \u000a                    "struct segment **make_segment(struct segment **, char *, int, int, char, char, struct predicate *)"\u000a                   );\u000a    }\u000a    goto switchD_00408d49_caseD_26;\u000a  }\u000a  if (in_ECX != KIND_FORMAT) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("kind == KIND_FORMAT","print.c",0x6f,\u000a                                    \u000a                  "struct segment **make_segment(struct segment **, char *, int, int, char, char, struct predicate *)"\u000a                 );\u000a  }\u000a  cVar3 = 's';\u000a  switch(in_R8D) {\u000a  case 0x25:\u000a    cVar3 = '%';\u000a    goto switchD_00408d49_caseD_48;\u000a  default:\u000a    goto switchD_00408d49_caseD_26;\u000a  case 0x41:\u000a  case 0x42:\u000a  case 0x43:\u000a  case 0x44:\u000a  case 0x46:\u000a  case 0x47:\u000a  case 0x4d:\u000a  case 0x54:\u000a  case 0x55:\u000a  case 0x61:\u000a  case 0x62:\u000a  case 99:\u000a  case 0x67:\u000a  case 0x6b:\u000a  case 0x6e:\u000a  case 0x73:\u000a  case 0x74:\u000a  case 0x75:\u000a    *(undefined *)(in_stack_00000008 + 0x1a) = 1;\u000a    *__dest = 's';\u000a    goto LAB_00408d58;\u000a  case 0x48:\u000a  case 0x50:\u000a  case 0x66:\u000a  case 0x68:\u000a  case 0x70:\u000a    goto switchD_00408d49_caseD_48;\u000a  case 0x53:\u000a    *(undefined *)(in_stack_00000008 + 0x1a) = 1;\u000a    *__dest = 'g';\u000a    goto LAB_00408d58;\u000a  case 0x59:\u000a    *(undefined *)(in_stack_00000008 + 0x1a) = 1;\u000a    goto LAB_00408dd5;\u000a  case 0x5a:\u000a    *__dest = 's';\u000a    uVar2 = 5;\u000a    break;\u000a  case 100:\u000a    cVar3 = 'd';\u000a    goto switchD_00408d49_caseD_48;\u000a  case 0x69:\u000a    *(undefined *)(in_stack_00000008 + 0x1c) = 1;\u000a    *__dest = 's';\u000a    uVar2 = 1;\u000a    break;\u000a  case 0x6c:\u000a    *(undefined *)(in_stack_00000008 + 0x1a) = 1;\u000a    *__dest = 's';\u000a    uVar2 = 4;\u000a    break;\u000a  case 0x6d:\u000a    *__dest = 'o';\u000a    *(undefined *)(in_stack_00000008 + 0x1a) = 1;\u000aLAB_00408d58:\u000a    uVar2 = 3;\u000a    break;\u000a  case 0x79:\u000a    *(undefined *)(in_stack_00000008 + 0x1b) = 1;\u000aLAB_00408dd5:\u000a    *__dest = 's';\u000a    uVar2 = 2;\u000a  }\u000a  __dest[1] = 0;\u000a  if (*(uint *)(in_stack_00000008 + 0x20) <= uVar2 && uVar2 != *(uint *)(in_stack_00000008 + 0x20))\u000a  {\u000a    *(uint *)(in_stack_00000008 + 0x20) = uVar2;\u000a  }\u000aLAB_00408d6a:\u000a  return &(*segment)->next;\u000aswitchD_00408d49_caseD_48:\u000a  *__dest = cVar3;\u000a  __dest = __dest + 1;\u000aswitchD_00408d49_caseD_26:\u000a  *__dest = 0;\u000a  goto LAB_00408d6a;\u000a}\u000a\u000a
p619
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV EBP,R9D\nMOV EBX,R8D\nMOV R12D,ECX\nMOV R15D,EDX\nMOV R13,RSI\nMOV R14,RDI\nCMP BL,0x28\nJZ 0x00408e2e\nCMP BL,0x5b\nJZ 0x00408e47\nCMP BL,0x7b\nJZ 0x00408e60\nMOV EDI,0x20\nCALL 0x00417220\nMOV qword ptr [R14],RAX\nMOV dword ptr [RAX],R12D\nMOV byte ptr [RAX + 0x4],BL\nMOV dword ptr [RSP + 0x4],EBP\nMOV byte ptr [RAX + 0x5],BPL\nMOV RAX,qword ptr [R14]\nMOV qword ptr [RAX + 0x18],0x0\nMOV RAX,qword ptr [R14]\nMOV dword ptr [RAX + 0x10],R15D\nMOVSXD RBP,R15D\nLEA RDI,[RBP + 0x2]\nCALL 0x00417220\nMOV R15,RAX\nMOV RAX,qword ptr [R14]\nMOV qword ptr [RAX + 0x8],R15\nMOV RDI,R15\nMOV RSI,R13\nMOV RDX,RBP\nCALL 0x00402780\nADD R15,RBP\nMOV EAX,R12D\nOR EAX,0x1\nCMP EAX,0x1\nJNZ 0x00408d30\nTEST BL,BL\nJNZ 0x00408de3\nCMP byte ptr [RSP + 0x4],0x0\nJNZ 0x00408dfc\nMOV byte ptr [R15],0x0\nJMP 0x00408d6a\nCMP R12D,0x2\nJNZ 0x00408e15\nADD EBX,-0x25\nCMP EBX,0x54\nJA 0x00408d2a\nMOV RAX,qword ptr [RSP + 0x40]\nMOV CL,0x73\nJMP qword ptr [0x41ed40 + RBX*0x8]\nMOV byte ptr [RAX + 0x1a],0x1\nMOV byte ptr [R15],0x73\nMOV ECX,0x3\nMOV byte ptr [R15 + 0x1],0x0\nCMP ECX,dword ptr [RAX + 0x20]\nJBE 0x00408d6a\nMOV dword ptr [RAX + 0x20],ECX\nMOV RAX,qword ptr [R14]\nADD RAX,0x18\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV CL,0x25\nJMP 0x00408da1\nMOV byte ptr [RAX + 0x1a],0x1\nMOV byte ptr [R15],0x67\nJMP 0x00408d58\nMOV byte ptr [RAX + 0x1a],0x1\nJMP 0x00408dd5\nMOV byte ptr [R15],0x73\nMOV ECX,0x5\nJMP 0x00408d5d\nMOV CL,0x64\nMOV byte ptr [R15],CL\nINC R15\nJMP 0x00408d2a\nMOV byte ptr [RAX + 0x1c],0x1\nMOV byte ptr [R15],0x73\nMOV ECX,0x1\nJMP 0x00408d5d\nMOV byte ptr [RAX + 0x1a],0x1\nMOV byte ptr [R15],0x73\nMOV ECX,0x4\nJMP 0x00408d5d\nMOV byte ptr [R15],0x6f\nMOV byte ptr [RAX + 0x1a],0x1\nJMP 0x00408d58\nMOV byte ptr [RAX + 0x1b],0x1\nMOV byte ptr [R15],0x73\nMOV ECX,0x2\nJMP 0x00408d5d\nMOV EDI,0x41f6f4\nMOV ESI,0x41f663\nMOV EDX,0x67\nMOV ECX,0x41f66b\nCALL 0x00402a40\nMOV EDI,0x41f705\nMOV ESI,0x41f663\nMOV EDX,0x68\nMOV ECX,0x41f66b\nCALL 0x00402a40\nMOV EDI,0x41f71a\nMOV ESI,0x41f663\nMOV EDX,0x6f\nMOV ECX,0x41f66b\nCALL 0x00402a40\nMOV EDI,0x41f6e1\nMOV ESI,0x41f663\nMOV EDX,0x56\nMOV ECX,0x41f66b\nCALL 0x00402a40\nMOV EDI,0x41f6ce\nMOV ESI,0x41f663\nMOV EDX,0x55\nMOV ECX,0x41f66b\nCALL 0x00402a40\nMOV EDI,0x41f650\nMOV ESI,0x41f663\nMOV EDX,0x54\nMOV ECX,0x41f66b\nCALL 0x00402a40\n'
p620
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 cd\n44 89 c3\n41 89 cc\n41 89 d7\n49 89 f5\n49 89 fe\n80 fb 28\n0f 84 88 01 00 00\n80 fb 5b\n0f 84 98 01 00 00\n80 fb 7b\n0f 84 a8 01 00 00\nbf 20 00 00 00\ne8 5e e5 00 00\n49 89 06\n44 89 20\n88 58 04\n89 6c 24 04\n40 88 68 05\n49 8b 06\n48 c7 40 18 00 00 00 00\n49 8b 06\n44 89 78 10\n49 63 ef\n48 8d 7d 02\ne8 2f e5 00 00\n49 89 c7\n49 8b 06\n4c 89 78 08\n4c 89 ff\n4c 89 ee\n48 89 ea\ne8 77 9a ff ff\n49 01 ef\n44 89 e0\n83 c8 01\n83 f8 01\n75 19\n84 db\n0f 85 c4 00 00 00\n80 7c 24 04 00\n0f 85 d2 00 00 00\n41 c6 07 00\neb 3a\n41 83 fc 02\n0f 85 db 00 00 00\n83 c3 db\n83 fb 54\n77 e8\n48 8b 44 24 40\nb1 73\nff 24 dd 40 ed 41 00\nc6 40 1a 01\n41 c6 07 73\nb9 03 00 00 00\n41 c6 47 01 00\n3b 48 20\n76 03\n89 48 20\n49 8b 06\n48 83 c0 18\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nb1 25\neb 1d\nc6 40 1a 01\n41 c6 07 67\neb ca\nc6 40 1a 01\neb 41\n41 c6 07 73\nb9 05 00 00 00\neb be\nb1 64\n41 88 0f\n49 ff c7\neb 81\nc6 40 1c 01\n41 c6 07 73\nb9 01 00 00 00\neb a5\nc6 40 1a 01\n41 c6 07 73\nb9 04 00 00 00\neb 96\n41 c6 07 6f\nc6 40 1a 01\neb 87\nc6 40 1b 01\n41 c6 07 73\nb9 02 00 00 00\ne9 7a ff ff ff\nbf f4 f6 41 00\nbe 63 f6 41 00\nba 67 00 00 00\nb9 6b f6 41 00\ne8 44 9c ff ff\nbf 05 f7 41 00\nbe 63 f6 41 00\nba 68 00 00 00\nb9 6b f6 41 00\ne8 2b 9c ff ff\nbf 1a f7 41 00\nbe 63 f6 41 00\nba 6f 00 00 00\nb9 6b f6 41 00\ne8 12 9c ff ff\nbf e1 f6 41 00\nbe 63 f6 41 00\nba 56 00 00 00\nb9 6b f6 41 00\ne8 f9 9b ff ff\nbf ce f6 41 00\nbe 63 f6 41 00\nba 55 00 00 00\nb9 6b f6 41 00\ne8 e0 9b ff ff\nbf 50 f6 41 00\nbe 63 f6 41 00\nba 54 00 00 00\nb9 6b f6 41 00\ne8 c7 9b ff ff\n'
p621
S'.text:0000000000408c80\n.text:0000000000408c81\n.text:0000000000408c83\n.text:0000000000408c85\n.text:0000000000408c87\n.text:0000000000408c89\n.text:0000000000408c8a\n.text:0000000000408c8b\n.text:0000000000408c8e\n.text:0000000000408c91\n.text:0000000000408c94\n.text:0000000000408c97\n.text:0000000000408c9a\n.text:0000000000408c9d\n.text:0000000000408ca0\n.text:0000000000408ca6\n.text:0000000000408ca9\n.text:0000000000408caf\n.text:0000000000408cb2\n.text:0000000000408cb8\n.text:0000000000408cbd\n.text:0000000000408cc2\n.text:0000000000408cc5\n.text:0000000000408cc8\n.text:0000000000408ccb\n.text:0000000000408ccf\n.text:0000000000408cd3\n.text:0000000000408cd6\n.text:0000000000408cde\n.text:0000000000408ce1\n.text:0000000000408ce5\n.text:0000000000408ce8\n.text:0000000000408cec\n.text:0000000000408cf1\n.text:0000000000408cf4\n.text:0000000000408cf7\n.text:0000000000408cfb\n.text:0000000000408cfe\n.text:0000000000408d01\n.text:0000000000408d04\n.text:0000000000408d09\n.text:0000000000408d0c\n.text:0000000000408d0f\n.text:0000000000408d12\n.text:0000000000408d15\n.text:0000000000408d17\n.text:0000000000408d19\n.text:0000000000408d1f\n.text:0000000000408d24\n.text:0000000000408d2a\n.text:0000000000408d2e\n.text:0000000000408d30\n.text:0000000000408d34\n.text:0000000000408d3a\n.text:0000000000408d3d\n.text:0000000000408d40\n.text:0000000000408d42\n.text:0000000000408d47\n.text:0000000000408d49\n.text:0000000000408d50\n.text:0000000000408d54\n.text:0000000000408d58\n.text:0000000000408d5d\n.text:0000000000408d62\n.text:0000000000408d65\n.text:0000000000408d67\n.text:0000000000408d6a\n.text:0000000000408d6d\n.text:0000000000408d71\n.text:0000000000408d75\n.text:0000000000408d76\n.text:0000000000408d78\n.text:0000000000408d7a\n.text:0000000000408d7c\n.text:0000000000408d7e\n.text:0000000000408d7f\n.text:0000000000408d80\n.text:0000000000408d82\n.text:0000000000408d84\n.text:0000000000408d88\n.text:0000000000408d8c\n.text:0000000000408d8e\n.text:0000000000408d92\n.text:0000000000408d94\n.text:0000000000408d98\n.text:0000000000408d9d\n.text:0000000000408d9f\n.text:0000000000408da1\n.text:0000000000408da4\n.text:0000000000408da7\n.text:0000000000408da9\n.text:0000000000408dad\n.text:0000000000408db1\n.text:0000000000408db6\n.text:0000000000408db8\n.text:0000000000408dbc\n.text:0000000000408dc0\n.text:0000000000408dc5\n.text:0000000000408dc7\n.text:0000000000408dcb\n.text:0000000000408dcf\n.text:0000000000408dd1\n.text:0000000000408dd5\n.text:0000000000408dd9\n.text:0000000000408dde\n.text:0000000000408de3\n.text:0000000000408de8\n.text:0000000000408ded\n.text:0000000000408df2\n.text:0000000000408df7\n.text:0000000000408dfc\n.text:0000000000408e01\n.text:0000000000408e06\n.text:0000000000408e0b\n.text:0000000000408e10\n.text:0000000000408e15\n.text:0000000000408e1a\n.text:0000000000408e1f\n.text:0000000000408e24\n.text:0000000000408e29\n.text:0000000000408e2e\n.text:0000000000408e33\n.text:0000000000408e38\n.text:0000000000408e3d\n.text:0000000000408e42\n.text:0000000000408e47\n.text:0000000000408e4c\n.text:0000000000408e51\n.text:0000000000408e56\n.text:0000000000408e5b\n.text:0000000000408e60\n.text:0000000000408e65\n.text:0000000000408e6a\n.text:0000000000408e6f\n.text:0000000000408e74\n'
p622
tp623
sS'lsetfileconat'
p624
(S'\n__stdcall lsetfileconat(char * file, security_context_t con)\n'
p625
V\u000aint lsetfileconat(char *file,security_context_t con)\u000a\u000a{\u000a  uint uVar1;\u000a  int __fd;\u000a  int iVar2;\u000a  int iVar3;\u000a  saved_cwd *__ptr;\u000a  uint *puVar4;\u000a  int *piVar5;\u000a  security_context_t con_00;\u000a  char proc_buf [4032];\u000a  saved_cwd local_ff8 [252];\u000a  \u000a  __fd = (int)(char *)((ulong)file & 0xffffffff);\u000a  if ((__fd == -100) || (*con == '/')) {\u000a    __fd = lsetfilecon(con,con_00);\u000a    return __fd;\u000a  }\u000a  __ptr = (saved_cwd *)openat_proc_name((char *)local_ff8,(char *)((ulong)file & 0xffffffff));\u000a  if (__ptr != (saved_cwd *)0x0) {\u000a    iVar2 = lsetfilecon((char *)__ptr,con_00);\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar1 = *puVar4;\u000a    if (__ptr != local_ff8) {\u000a      free(__ptr);\u000a    }\u000a    if (iVar2 != -1) {\u000a      return iVar2;\u000a    }\u000a    if (((0x26 < uVar1) || ((0x4000102006U >> ((ulong)uVar1 & 0x1f) & 1) == 0)) && (uVar1 != 0x5f))\u000a    {\u000a      *puVar4 = uVar1;\u000a      return -1;\u000a    }\u000a  }\u000a  iVar2 = save_cwd(local_ff8);\u000a  if (iVar2 != 0) {\u000a    puVar4 = (uint *)__errno_location();\u000a    openat_save_fail((ulong)*puVar4);\u000aLAB_0041b504:\u000a    puVar4 = (uint *)__errno_location();\u000a                    /* WARNING: Subroutine does not return */\u000a    openat_restore_fail((ulong)*puVar4);\u000a  }\u000a  if ((__fd < 0) || (local_ff8[0].desc != __fd)) {\u000a    __fd = fchdir(__fd);\u000a    if (__fd == 0) {\u000a      iVar2 = lsetfilecon(con,con_00);\u000a      __fd = 0;\u000a      if (iVar2 == -1) {\u000a        piVar5 = __errno_location();\u000a        __fd = *piVar5;\u000a      }\u000a      iVar3 = restore_cwd(local_ff8);\u000a      if (iVar3 != 0) goto LAB_0041b504;\u000a      free_cwd(local_ff8);\u000a      if (__fd != 0) {\u000a        piVar5 = __errno_location();\u000a        *piVar5 = __fd;\u000a      }\u000a    }\u000a    else {\u000a      piVar5 = __errno_location();\u000a      __fd = *piVar5;\u000a      free_cwd(local_ff8);\u000a      *piVar5 = __fd;\u000a      iVar2 = -1;\u000a    }\u000a  }\u000a  else {\u000a    free_cwd(local_ff8);\u000a    piVar5 = __errno_location();\u000a    *piVar5 = 9;\u000a    iVar2 = -1;\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p626
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xfd8\nMOV R14,RDX\nMOV RBX,RSI\nMOV EBP,EDI\nCMP EBP,-0x64\nJZ 0x0041b3a3\nCMP byte ptr [RBX],0x2f\nJNZ 0x0041b3bf\nMOV RDI,RBX\nMOV RSI,R14\nADD RSP,0xfd8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00416b40\nLEA R13,[RSP + 0x10]\nMOV RDI,R13\nMOV ESI,EBP\nMOV RDX,RBX\nCALL 0x0041c2f0\nMOV R12,RAX\nTEST R12,R12\nJZ 0x0041b42f\nMOV RDI,R12\nMOV RSI,R14\nCALL 0x00416b40\nMOV R15D,EAX\nCALL 0x00402770\nMOV qword ptr [RSP + 0x8],RAX\nMOV EDX,dword ptr [RAX]\nCMP R12,R13\nJZ 0x0041b406\nMOV RDI,R12\nMOV R12D,EDX\nCALL 0x00402710\nMOV EDX,R12D\nCMP R15D,-0x1\nJNZ 0x0041b4e3\nCMP EDX,0x26\nJA 0x0041b4d3\nMOV EAX,EDX\nMOV RCX,0x4000102006\nBT RCX,RAX\nJNC 0x0041b4d3\nLEA RDI,[RSP + 0x10]\nCALL 0x004169a0\nTEST EAX,EAX\nJNZ 0x0041b4f8\nTEST EBP,EBP\nJS 0x0041b468\nCMP dword ptr [RSP + 0x10],EBP\nJNZ 0x0041b468\nLEA RDI,[RSP + 0x10]\nCALL 0x00416a10\nCALL 0x00402770\nMOV dword ptr [RAX],0x9\nMOV R15D,0xffffffff\nJMP 0x0041b4e3\nMOV EDI,EBP\nCALL 0x00402d10\nTEST EAX,EAX\nJZ 0x0041b491\nCALL 0x00402770\nMOV RBX,RAX\nMOV EBP,dword ptr [RBX]\nLEA RDI,[RSP + 0x10]\nCALL 0x00416a10\nMOV dword ptr [RBX],EBP\nMOV R15D,0xffffffff\nJMP 0x0041b4e3\nMOV RDI,RBX\nMOV RSI,R14\nCALL 0x00416b40\nMOV R15D,EAX\nXOR EBX,EBX\nCMP R15D,-0x1\nJNZ 0x0041b4ae\nCALL 0x00402770\nMOV EBX,dword ptr [RAX]\nLEA RDI,[RSP + 0x10]\nCALL 0x004169f0\nTEST EAX,EAX\nJNZ 0x0041b504\nLEA RDI,[RSP + 0x10]\nCALL 0x00416a10\nTEST EBX,EBX\nJZ 0x0041b4e3\nCALL 0x00402770\nMOV dword ptr [RAX],EBX\nJMP 0x0041b4e3\nCMP EDX,0x5f\nJZ 0x0041b42f\nMOV RAX,qword ptr [RSP + 0x8]\nMOV dword ptr [RAX],EDX\nMOV EAX,R15D\nADD RSP,0xfd8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00402770\nMOV EDI,dword ptr [RAX]\nCALL 0x00413210\nCALL 0x00402770\nMOV EDI,dword ptr [RAX]\nCALL 0x00413250\n'
p627
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec d8 0f 00 00\n49 89 d6\n48 89 f3\n89 fd\n83 fd 9c\n74 05\n80 3b 2f\n75 1c\n48 89 df\n4c 89 f6\n48 81 c4 d8 0f 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 81 b7 ff ff\n4c 8d 6c 24 10\n4c 89 ef\n89 ee\n48 89 da\ne8 1f 0f 00 00\n49 89 c4\n4d 85 e4\n74 56\n4c 89 e7\n4c 89 f6\ne8 5c b7 ff ff\n41 89 c7\ne8 84 73 fe ff\n48 89 44 24 08\n8b 10\n4d 39 ec\n74 0e\n4c 89 e7\n41 89 d4\ne8 0d 73 fe ff\n44 89 e2\n41 83 ff ff\n0f 85 d3 00 00 00\n83 fa 26\n0f 87 ba 00 00 00\n89 d0\n48 b9 06 20 10 00 40 00 00 00\n48 0f a3 c1\n0f 83 a4 00 00 00\n48 8d 7c 24 10\ne8 67 b5 ff ff\n85 c0\n0f 85 b7 00 00 00\n85 ed\n78 23\n39 6c 24 10\n75 1d\n48 8d 7c 24 10\ne8 bb b5 ff ff\ne8 16 73 fe ff\nc7 00 09 00 00 00\n41 bf ff ff ff ff\neb 7b\n89 ef\ne8 a1 78 fe ff\n85 c0\n74 1e\ne8 f8 72 fe ff\n48 89 c3\n8b 2b\n48 8d 7c 24 10\ne8 89 b5 ff ff\n89 2b\n41 bf ff ff ff ff\neb 52\n48 89 df\n4c 89 f6\ne8 a4 b6 ff ff\n41 89 c7\n31 db\n41 83 ff ff\n75 07\ne8 c4 72 fe ff\n8b 18\n48 8d 7c 24 10\ne8 38 b5 ff ff\n85 c0\n75 48\n48 8d 7c 24 10\ne8 4a b5 ff ff\n85 db\n74 19\ne8 a1 72 fe ff\n89 18\neb 10\n83 fa 5f\n0f 84 53 ff ff ff\n48 8b 44 24 08\n89 10\n44 89 f8\n48 81 c4 d8 0f 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 73 72 fe ff\n8b 38\ne8 0c 7d ff ff\ne8 67 72 fe ff\n8b 38\ne8 40 7d ff ff\n'
p628
S'.text:000000000041b380\n.text:000000000041b381\n.text:000000000041b383\n.text:000000000041b385\n.text:000000000041b387\n.text:000000000041b389\n.text:000000000041b38a\n.text:000000000041b391\n.text:000000000041b394\n.text:000000000041b397\n.text:000000000041b399\n.text:000000000041b39c\n.text:000000000041b39e\n.text:000000000041b3a1\n.text:000000000041b3a3\n.text:000000000041b3a6\n.text:000000000041b3a9\n.text:000000000041b3b0\n.text:000000000041b3b1\n.text:000000000041b3b3\n.text:000000000041b3b5\n.text:000000000041b3b7\n.text:000000000041b3b9\n.text:000000000041b3ba\n.text:000000000041b3bf\n.text:000000000041b3c4\n.text:000000000041b3c7\n.text:000000000041b3c9\n.text:000000000041b3cc\n.text:000000000041b3d1\n.text:000000000041b3d4\n.text:000000000041b3d7\n.text:000000000041b3d9\n.text:000000000041b3dc\n.text:000000000041b3df\n.text:000000000041b3e4\n.text:000000000041b3e7\n.text:000000000041b3ec\n.text:000000000041b3f1\n.text:000000000041b3f3\n.text:000000000041b3f6\n.text:000000000041b3f8\n.text:000000000041b3fb\n.text:000000000041b3fe\n.text:000000000041b403\n.text:000000000041b406\n.text:000000000041b40a\n.text:000000000041b410\n.text:000000000041b413\n.text:000000000041b419\n.text:000000000041b41b\n.text:000000000041b425\n.text:000000000041b429\n.text:000000000041b42f\n.text:000000000041b434\n.text:000000000041b439\n.text:000000000041b43b\n.text:000000000041b441\n.text:000000000041b443\n.text:000000000041b445\n.text:000000000041b449\n.text:000000000041b44b\n.text:000000000041b450\n.text:000000000041b455\n.text:000000000041b45a\n.text:000000000041b460\n.text:000000000041b466\n.text:000000000041b468\n.text:000000000041b46a\n.text:000000000041b46f\n.text:000000000041b471\n.text:000000000041b473\n.text:000000000041b478\n.text:000000000041b47b\n.text:000000000041b47d\n.text:000000000041b482\n.text:000000000041b487\n.text:000000000041b489\n.text:000000000041b48f\n.text:000000000041b491\n.text:000000000041b494\n.text:000000000041b497\n.text:000000000041b49c\n.text:000000000041b49f\n.text:000000000041b4a1\n.text:000000000041b4a5\n.text:000000000041b4a7\n.text:000000000041b4ac\n.text:000000000041b4ae\n.text:000000000041b4b3\n.text:000000000041b4b8\n.text:000000000041b4ba\n.text:000000000041b4bc\n.text:000000000041b4c1\n.text:000000000041b4c6\n.text:000000000041b4c8\n.text:000000000041b4ca\n.text:000000000041b4cf\n.text:000000000041b4d1\n.text:000000000041b4d3\n.text:000000000041b4d6\n.text:000000000041b4dc\n.text:000000000041b4e1\n.text:000000000041b4e3\n.text:000000000041b4e6\n.text:000000000041b4ed\n.text:000000000041b4ee\n.text:000000000041b4f0\n.text:000000000041b4f2\n.text:000000000041b4f4\n.text:000000000041b4f6\n.text:000000000041b4f7\n.text:000000000041b4f8\n.text:000000000041b4fd\n.text:000000000041b4ff\n.text:000000000041b504\n.text:000000000041b509\n.text:000000000041b50b\n'
p629
tp630
sS'save_cwd'
p631
(S'\n__stdcall save_cwd(saved_cwd * cwd)\n'
p632
V\u000aint save_cwd(saved_cwd *cwd)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  int iVar3;\u000a  \u000a  cwd->name = (char *)0x0;\u000a  iVar3 = 0;\u000a  iVar1 = open_safer(\u000a                     "warning: Unix filenames usually don\u005c't contain slashes (though pathnames do).  That means that \u005c'%s %s\u005c' will probably evaluate to false all the time on this system.  You might find the \u005c'-wholename\u005c' test more useful, or perhaps \u005c'-samefile\u005c'.  Alternatively, if you are using GNU grep, you could use \u005c'find ... -print0 | grep -FzZ %s\u005c'."\u000a                     + 0x148);\u000a  cwd->desc = iVar1;\u000a  if (iVar1 < 0) {\u000a    pcVar2 = getcwd((char *)0x0,0);\u000a    cwd->name = pcVar2;\u000a    iVar3 = -(uint)(pcVar2 == (char *)0x0);\u000a  }\u000a  else {\u000a    set_cloexec_flag();\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p633
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV qword ptr [RBX + 0x8],0x0\nXOR EBP,EBP\nMOV EDI,0x4217ea\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00410160\nMOV dword ptr [RBX],EAX\nTEST EAX,EAX\nJS 0x004169d2\nMOV ESI,0x1\nMOV EDI,EAX\nCALL 0x0040fdd0\nJMP 0x004169e5\nXOR EDI,EDI\nXOR ESI,ESI\nCALL 0x00402ab0\nMOV qword ptr [RBX + 0x8],RAX\nCMP RAX,0x1\nSBB EBP,EBP\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p634
S'55\n53\n50\n48 89 fb\n48 c7 43 08 00 00 00 00\n31 ed\nbf ea 17 42 00\n31 f6\n31 c0\ne8 a2 97 ff ff\n89 03\n85 c0\n78 0e\nbe 01 00 00 00\n89 c7\ne8 00 94 ff ff\neb 13\n31 ff\n31 f6\ne8 d5 c0 fe ff\n48 89 43 08\n48 83 f8 01\n19 ed\n89 e8\n48 83 c4 08\n5b\n5d\nc3\n'
p635
S'.text:00000000004169a0\n.text:00000000004169a1\n.text:00000000004169a2\n.text:00000000004169a3\n.text:00000000004169a6\n.text:00000000004169ae\n.text:00000000004169b0\n.text:00000000004169b5\n.text:00000000004169b7\n.text:00000000004169b9\n.text:00000000004169be\n.text:00000000004169c0\n.text:00000000004169c2\n.text:00000000004169c4\n.text:00000000004169c9\n.text:00000000004169cb\n.text:00000000004169d0\n.text:00000000004169d2\n.text:00000000004169d4\n.text:00000000004169d6\n.text:00000000004169db\n.text:00000000004169df\n.text:00000000004169e3\n.text:00000000004169e5\n.text:00000000004169e7\n.text:00000000004169eb\n.text:00000000004169ec\n.text:00000000004169ed\n'
p636
tp637
sS'insert_type'
p638
(S'\n__stdcall insert_type(char * * argv, int * arg_ptr, parser_table * entry, PRED_FUNC * which_pred)\n'
p639
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000a_Bool insert_type(char **argv,int *arg_ptr,parser_table *entry,\u000a                 _Bool (*which_pred)(char *,stat *,predicate *))\u000a\u000a{\u000a  char cVar1;\u000a  byte bVar2;\u000a  float fVar3;\u000a  _Bool _Var4;\u000a  predicate *ppVar5;\u000a  undefined8 uVar6;\u000a  long lVar7;\u000a  char *pcVar8;\u000a  undefined uVar9;\u000a  char *pcVar10;\u000a  float fVar11;\u000a  char *local_38;\u000a  float local_2c;\u000a  \u000a  pcVar10 = "-type";\u000a  if (which_pred == pred_xtype) {\u000a    pcVar10 = "-xtype";\u000a  }\u000a  _Var4 = collect_arg(argv,arg_ptr,&local_38);\u000a  if (_Var4 == false) {\u000a    uVar9 = 0;\u000a  }\u000a  else {\u000a    if (*local_38 == 0) {\u000a      pcVar8 = "Arguments to %s should contain at least one letter";\u000aLAB_0040db21:\u000a      uVar9 = 0;\u000a      uVar6 = dcgettext(0,pcVar8,5);\u000a      error(1,0,uVar6,pcVar10);\u000a    }\u000a    else {\u000a      ppVar5 = insert_primary_withpred(entry,which_pred,local_38);\u000a      ppVar5->est_success_rate = 0.00000000;\u000a      *(bool *)&ppVar5->need_stat = which_pred == pred_xtype;\u000a      *(bool *)&ppVar5->need_type = which_pred != pred_xtype;\u000a      cVar1 = *local_38;\u000a      uVar9 = 1;\u000a      pcVar8 = local_38;\u000a      while (cVar1 != 0) {\u000a        lVar7 = 0;\u000a        fVar11 = DAT_0041fb94;\u000a        switch(cVar1) {\u000a        case 'D':\u000a          uVar6 = dcgettext(0,\u000a                            "%s %c is not supported because Solaris doors are not supported on the platform find was compiled on."\u000a                            ,5);\u000a          error(1,0,uVar6,pcVar10,(ulong)(uint)(int)*pcVar8);\u000a          lVar7 = 0;\u000a          bVar2 = ppVar5->args[0];\u000a          fVar3 = local_2c;\u000a          local_2c = DAT_0041fb78;\u000a          break;\u000a        default:\u000a          local_38 = pcVar8;\u000a          uVar6 = dcgettext(0,"Unknown argument to %s: %c",5);\u000a          error(1,0,uVar6,pcVar10,(ulong)(uint)(int)*pcVar8);\u000a          return false;\u000a        case 'c':\u000a          lVar7 = 1;\u000a          bVar2 = ppVar5->args[1];\u000a          fVar3 = local_2c;\u000a          local_2c = DAT_0041fbac;\u000a          break;\u000a        case 'd':\u000a          lVar7 = 2;\u000a          bVar2 = ppVar5->args[2];\u000a          fVar3 = local_2c;\u000a          local_2c = DAT_0041fba8;\u000a          break;\u000a        case 'f':\u000a          lVar7 = 3;\u000a          bVar2 = ppVar5->args[3];\u000a          fVar3 = local_2c;\u000a          local_2c = DAT_0041fba4;\u000a          break;\u000a        case 'l':\u000a          lVar7 = 4;\u000a          bVar2 = ppVar5->args[4];\u000a          fVar3 = local_2c;\u000a          local_2c = DAT_0041fba0;\u000a          break;\u000a        case 'p':\u000a          lVar7 = 5;\u000a          bVar2 = ppVar5->args[5];\u000a          fVar3 = local_2c;\u000a          local_2c = DAT_0041fb9c;\u000a          break;\u000a        case 's':\u000a          lVar7 = 6;\u000a          fVar11 = DAT_0041fb98;\u000a        case 'b':\u000a          bVar2 = ppVar5->args[lVar7];\u000a          fVar3 = local_2c;\u000a          local_2c = fVar11;\u000a        }\u000a        fVar11 = local_2c;\u000a        if (bVar2 != 0) {\u000a          uVar6 = dcgettext(0,"Duplicate file type \u005c'%c\u005c' in the argument list to %s.",5);\u000a          error(1,0,uVar6,(ulong)(uint)(int)*pcVar8,pcVar10);\u000a          fVar11 = local_2c;\u000a          fVar3 = local_2c;\u000a        }\u000a        local_2c = fVar3;\u000a        ppVar5->est_success_rate = fVar11 + ppVar5->est_success_rate;\u000a        ppVar5->args[lVar7] = 1;\u000a        local_38 = pcVar8 + 1;\u000a        if (pcVar8[1] != 0) {\u000a          if (pcVar8[1] != ',') {\u000a            pcVar8 = "Must separate multiple arguments to %s using: \u005c',\u005c'";\u000a            goto LAB_0040db21;\u000a          }\u000a          local_38 = pcVar8 + 2;\u000a          if (pcVar8[2] == 0) {\u000a            pcVar8 = \u000a            "Last file type in list argument to %s is missing, i.e., list is ending on: \u005c',\u005c'";\u000a            goto LAB_0040db21;\u000a          }\u000a        }\u000a        cVar1 = *local_38;\u000a        pcVar8 = local_38;\u000a      }\u000a    }\u000a  }\u000a  return (_Bool)uVar9;\u000a}\u000a\u000a
p640
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV R14,RCX\nMOV RBX,RDX\nMOV EAX,0x4048f0\nCMP R14,RAX\nMOV EAX,0x4219e9\nMOV R15D,0x4219f0\nCMOVZ R15,RAX\nMOV RDX,RSP\nCALL 0x0040c7f0\nTEST AL,AL\nJZ 0x0040dab9\nMOV RDX,qword ptr [RSP]\nCMP byte ptr [RDX],0x0\nJZ 0x0040dac1\nMOV R13D,0x4048f0\nMOV RDI,RBX\nMOV RSI,R14\nCALL 0x004076f0\nMOV R12,RAX\nCMP R14,R13\nMOV dword ptr [R12 + 0x24],0x0\nSETZ byte ptr [R12 + 0x1a]\nSETNZ byte ptr [R12 + 0x1b]\nMOV RAX,qword ptr [RSP]\nMOV AL,byte ptr [RAX]\nMOV R14B,0x1\nTEST AL,AL\nJZ 0x0040db42\nMOV R13,qword ptr [RSP]\nNOP dword ptr [RAX + RAX*0x1]\nMOVSX EAX,AL\nADD EAX,-0x44\nCMP EAX,0x2f\nJA 0x0040dacd\nXOR EBX,EBX\nMOVSS XMM0,dword ptr [0x0041fb94]\nJMP qword ptr [0x41fe40 + RAX*0x8]\nXOR EDI,EDI\nMOV ESI,0x421a29\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOVSX R8D,byte ptr [R13]\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,R15\nCALL 0x00402d90\nXOR EBX,EBX\nMOVSS XMM0,dword ptr [0x0041fb78]\nCMP byte ptr [R12 + RBX*0x1 + 0x38],0x0\nJNZ 0x0040da28\nJMP 0x0040da5e\nMOV EBX,0x1\nMOVSS XMM0,dword ptr [0x0041fbac]\nCMP byte ptr [R12 + RBX*0x1 + 0x38],0x0\nJNZ 0x0040da28\nJMP 0x0040da5e\nMOV EBX,0x2\nMOVSS XMM0,dword ptr [0x0041fba8]\nCMP byte ptr [R12 + RBX*0x1 + 0x38],0x0\nJNZ 0x0040da28\nJMP 0x0040da5e\nMOV EBX,0x3\nMOVSS XMM0,dword ptr [0x0041fba4]\nCMP byte ptr [R12 + RBX*0x1 + 0x38],0x0\nJNZ 0x0040da28\nJMP 0x0040da5e\nMOV EBX,0x4\nMOVSS XMM0,dword ptr [0x0041fba0]\nCMP byte ptr [R12 + RBX*0x1 + 0x38],0x0\nJNZ 0x0040da28\nJMP 0x0040da5e\nMOV EBX,0x5\nMOVSS XMM0,dword ptr [0x0041fb9c]\nCMP byte ptr [R12 + RBX*0x1 + 0x38],0x0\nJNZ 0x0040da28\nJMP 0x0040da5e\nMOV EBX,0x6\nMOVSS XMM0,dword ptr [0x0041fb98]\nNOP\nCMP byte ptr [R12 + RBX*0x1 + 0x38],0x0\nJZ 0x0040da5e\nXOR EDI,EDI\nMOV ESI,0x421aa9\nMOV EDX,0x5\nMOVSS dword ptr [RSP + 0xc],XMM0\nCALL 0x00402910\nMOV RDX,RAX\nMOVSX ECX,byte ptr [R13]\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV R8,R15\nCALL 0x00402d90\nMOVSS XMM0,dword ptr [RSP + 0xc]\nADDSS XMM0,dword ptr [R12 + 0x24]\nMOVSS dword ptr [R12 + 0x24],XMM0\nMOV byte ptr [R12 + RBX*0x1 + 0x38],0x1\nLEA RAX,[R13 + 0x1]\nMOVZX ECX,byte ptr [R13 + 0x1]\nTEST CL,CL\nJZ 0x0040daa0\nCMP CL,0x2c\nJNZ 0x0040db03\nCMP byte ptr [R13 + 0x2],0x0\nLEA R13,[R13 + 0x2]\nJNZ 0x0040daa3\nJMP 0x0040db13\nMOV R13,RAX\nMOVZX EAX,byte ptr [R13]\nTEST AL,AL\nJNZ 0x0040d930\nMOV qword ptr [RSP],R13\nJMP 0x0040db42\nXOR R14D,R14D\nJMP 0x0040db42\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x4219f6\nJMP 0x0040db21\nMOV qword ptr [RSP],R13\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x421a8e\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOVSX R8D,byte ptr [R13]\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,R15\nCALL 0x00402d90\nJMP 0x0040db42\nMOV qword ptr [RSP],RAX\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x421ade\nJMP 0x0040db21\nMOV qword ptr [RSP],R13\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x421b10\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,R15\nCALL 0x00402d90\nMOV EAX,R14D\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p641
S'41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 10\n49 89 ce\n48 89 d3\nb8 f0 48 40 00\n49 39 c6\nb8 e9 19 42 00\n41 bf f0 19 42 00\n4c 0f 44 f8\n48 89 e2\ne8 1e ef ff ff\n84 c0\n0f 84 df 01 00 00\n48 8b 14 24\n80 3a 00\n0f 84 da 01 00 00\n41 bd f0 48 40 00\n48 89 df\n4c 89 f6\ne8 f8 9d ff ff\n49 89 c4\n4d 39 ee\n41 c7 44 24 24 00 00 00 00\n41 0f 94 44 24 1a\n41 0f 95 44 24 1b\n48 8b 04 24\n8a 00\n41 b6 01\n84 c0\n0f 84 1e 02 00 00\n4c 8b 2c 24\n0f 1f 84 00 00 00 00 00\n0f be c0\n83 c0 bc\n83 f8 2f\n0f 87 8e 01 00 00\n31 db\nf3 0f 10 05 4b 22 01 00\nff 24 c5 40 fe 41 00\n31 ff\nbe 29 1a 42 00\nba 05 00 00 00\ne8 af 4f ff ff\n48 89 c1\n45 0f be 45 00\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\n4c 89 f9\ne8 13 54 ff ff\n31 db\nf3 0f 10 05 f1 21 01 00\n41 80 7c 1c 38 00\n0f 85 95 00 00 00\ne9 c6 00 00 00\nbb 01 00 00 00\nf3 0f 10 05 07 22 01 00\n41 80 7c 1c 38 00\n75 7b\ne9 ac 00 00 00\nbb 02 00 00 00\nf3 0f 10 05 e9 21 01 00\n41 80 7c 1c 38 00\n75 61\ne9 92 00 00 00\nbb 03 00 00 00\nf3 0f 10 05 cb 21 01 00\n41 80 7c 1c 38 00\n75 47\neb 7b\nbb 04 00 00 00\nf3 0f 10 05 b0 21 01 00\n41 80 7c 1c 38 00\n75 30\neb 64\nbb 05 00 00 00\nf3 0f 10 05 95 21 01 00\n41 80 7c 1c 38 00\n75 19\neb 4d\nbb 06 00 00 00\nf3 0f 10 05 7a 21 01 00\n66 90\n41 80 7c 1c 38 00\n74 36\n31 ff\nbe a9 1a 42 00\nba 05 00 00 00\nf3 0f 11 44 24 0c\ne8 d1 4e ff ff\n48 89 c2\n41 0f be 4d 00\nbf 01 00 00 00\n31 f6\n31 c0\n4d 89 f8\ne8 38 53 ff ff\nf3 0f 10 44 24 0c\nf3 41 0f 58 44 24 24\nf3 41 0f 11 44 24 24\n41 c6 44 1c 38 01\n49 8d 45 01\n41 0f b6 4d 01\n84 c9\n74 21\n80 f9 2c\n75 7f\n41 80 7d 02 00\n4d 8d 6d 02\n75 14\ne9 7f 00 00 00\n49 89 c5\n41 0f b6 45 00\n84 c0\n0f 85 80 fe ff ff\n4c 89 2c 24\ne9 89 00 00 00\n45 31 f6\ne9 81 00 00 00\n45 31 f6\n31 ff\nbe f6 19 42 00\neb 54\n4c 89 2c 24\n45 31 f6\n31 ff\nbe 8e 1a 42 00\nba 05 00 00 00\ne8 2b 4e ff ff\n48 89 c1\n45 0f be 45 00\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\n4c 89 f9\ne8 8f 52 ff ff\neb 3f\n48 89 04 24\n45 31 f6\n31 ff\nbe de 1a 42 00\neb 0e\n4c 89 2c 24\n45 31 f6\n31 ff\nbe 10 1b 42 00\nba 05 00 00 00\ne8 e5 4d ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\n4c 89 f9\ne8 4e 52 ff ff\n44 89 f0\n48 83 c4 10\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p642
S'.text:000000000040d8a0\n.text:000000000040d8a2\n.text:000000000040d8a4\n.text:000000000040d8a6\n.text:000000000040d8a8\n.text:000000000040d8a9\n.text:000000000040d8ad\n.text:000000000040d8b0\n.text:000000000040d8b3\n.text:000000000040d8b8\n.text:000000000040d8bb\n.text:000000000040d8c0\n.text:000000000040d8c6\n.text:000000000040d8ca\n.text:000000000040d8cd\n.text:000000000040d8d2\n.text:000000000040d8d4\n.text:000000000040d8da\n.text:000000000040d8de\n.text:000000000040d8e1\n.text:000000000040d8e7\n.text:000000000040d8ed\n.text:000000000040d8f0\n.text:000000000040d8f3\n.text:000000000040d8f8\n.text:000000000040d8fb\n.text:000000000040d8fe\n.text:000000000040d907\n.text:000000000040d90d\n.text:000000000040d913\n.text:000000000040d917\n.text:000000000040d919\n.text:000000000040d91c\n.text:000000000040d91e\n.text:000000000040d924\n.text:000000000040d928\n.text:000000000040d930\n.text:000000000040d933\n.text:000000000040d936\n.text:000000000040d939\n.text:000000000040d93f\n.text:000000000040d941\n.text:000000000040d949\n.text:000000000040d950\n.text:000000000040d952\n.text:000000000040d957\n.text:000000000040d95c\n.text:000000000040d961\n.text:000000000040d964\n.text:000000000040d969\n.text:000000000040d96e\n.text:000000000040d970\n.text:000000000040d972\n.text:000000000040d975\n.text:000000000040d978\n.text:000000000040d97d\n.text:000000000040d97f\n.text:000000000040d987\n.text:000000000040d98d\n.text:000000000040d993\n.text:000000000040d998\n.text:000000000040d99d\n.text:000000000040d9a5\n.text:000000000040d9ab\n.text:000000000040d9ad\n.text:000000000040d9b2\n.text:000000000040d9b7\n.text:000000000040d9bf\n.text:000000000040d9c5\n.text:000000000040d9c7\n.text:000000000040d9cc\n.text:000000000040d9d1\n.text:000000000040d9d9\n.text:000000000040d9df\n.text:000000000040d9e1\n.text:000000000040d9e3\n.text:000000000040d9e8\n.text:000000000040d9f0\n.text:000000000040d9f6\n.text:000000000040d9f8\n.text:000000000040d9fa\n.text:000000000040d9ff\n.text:000000000040da07\n.text:000000000040da0d\n.text:000000000040da0f\n.text:000000000040da11\n.text:000000000040da16\n.text:000000000040da1e\n.text:000000000040da20\n.text:000000000040da26\n.text:000000000040da28\n.text:000000000040da2a\n.text:000000000040da2f\n.text:000000000040da34\n.text:000000000040da3a\n.text:000000000040da3f\n.text:000000000040da42\n.text:000000000040da47\n.text:000000000040da4c\n.text:000000000040da4e\n.text:000000000040da50\n.text:000000000040da53\n.text:000000000040da58\n.text:000000000040da5e\n.text:000000000040da65\n.text:000000000040da6c\n.text:000000000040da72\n.text:000000000040da76\n.text:000000000040da7b\n.text:000000000040da7d\n.text:000000000040da7f\n.text:000000000040da82\n.text:000000000040da84\n.text:000000000040da89\n.text:000000000040da8d\n.text:000000000040da8f\n.text:000000000040daa0\n.text:000000000040daa3\n.text:000000000040daa8\n.text:000000000040daaa\n.text:000000000040dab0\n.text:000000000040dab4\n.text:000000000040dab9\n.text:000000000040dabc\n.text:000000000040dac1\n.text:000000000040dac4\n.text:000000000040dac6\n.text:000000000040dacb\n.text:000000000040dacd\n.text:000000000040dad1\n.text:000000000040dad4\n.text:000000000040dad6\n.text:000000000040dadb\n.text:000000000040dae0\n.text:000000000040dae5\n.text:000000000040dae8\n.text:000000000040daed\n.text:000000000040daf2\n.text:000000000040daf4\n.text:000000000040daf6\n.text:000000000040daf9\n.text:000000000040dafc\n.text:000000000040db01\n.text:000000000040db03\n.text:000000000040db07\n.text:000000000040db0a\n.text:000000000040db0c\n.text:000000000040db11\n.text:000000000040db13\n.text:000000000040db17\n.text:000000000040db1a\n.text:000000000040db1c\n.text:000000000040db21\n.text:000000000040db26\n.text:000000000040db2b\n.text:000000000040db2e\n.text:000000000040db33\n.text:000000000040db35\n.text:000000000040db37\n.text:000000000040db3a\n.text:000000000040db3d\n.text:000000000040db42\n.text:000000000040db45\n.text:000000000040db49\n.text:000000000040db4a\n.text:000000000040db4c\n.text:000000000040db4e\n.text:000000000040db50\n.text:000000000040db52\n'
p643
tp644
sS'chdir_long'
p645
(S'\n__stdcall chdir_long(char * dir)\n'
p646
V\u000aint chdir_long(char *dir)\u000a\u000a{\u000a  char cVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  undefined *puVar5;\u000a  char *pcVar6;\u000a  cd_buf local_30 [2];\u000a  \u000a  iVar2 = chdir(dir);\u000a  if (iVar2 == 0) {\u000a    return 0;\u000a  }\u000a  piVar3 = __errno_location();\u000a  if (*piVar3 != 0x24) {\u000a    return iVar2;\u000a  }\u000a  sVar4 = strlen(dir);\u000a  cdb_init(local_30);\u000a  if (sVar4 == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 < len","chdir-long.c",0x7e,"int chdir_long(char *)");\u000a  }\u000a  if (sVar4 < 0x1000) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("4096 <= len","chdir-long.c",0x7f,"int chdir_long(char *)");\u000a  }\u000a  pcVar6 = dir + sVar4;\u000a  sVar4 = strspn(dir,"/");\u000a  if (sVar4 == 0) {\u000aLAB_00417bbf:\u000a    cVar1 = *dir;\u000a  }\u000a  else {\u000a    if (sVar4 != 2) {\u000a      iVar2 = cdb_advance_fd(local_30,"/");\u000a      if (iVar2 != 0) goto LAB_00417c73;\u000a      dir = dir + sVar4;\u000a      goto LAB_00417bbf;\u000a    }\u000a    puVar5 = (undefined *)memchr(dir + 3,0x2f,(size_t)(pcVar6 + -(long)(dir + 3)));\u000a    if (puVar5 == (undefined *)0x0) {\u000aLAB_00417c85:\u000a      *piVar3 = 0x24;\u000a      return -1;\u000a    }\u000a    *puVar5 = 0;\u000a    iVar2 = cdb_advance_fd(local_30,dir);\u000a    *puVar5 = 0x2f;\u000a    if (iVar2 != 0) goto LAB_00417c73;\u000a    dir = find_non_slash(puVar5 + 1);\u000a    cVar1 = *dir;\u000a  }\u000a  if (cVar1 == '/') {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("*dir != \u005c'/\u005c'","chdir-long.c",0xa2,"int chdir_long(char *)");\u000a  }\u000a  if (pcVar6 < dir) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("dir <= dir_end","chdir-long.c",0xa3,"int chdir_long(char *)");\u000a  }\u000a  if (0xfff < (long)(pcVar6 + -(long)dir)) {\u000a    do {\u000a      puVar5 = (undefined *)memrchr(dir,0x2f,0x1000);\u000a      if (puVar5 == (undefined *)0x0) goto LAB_00417c85;\u000a      *puVar5 = 0;\u000a      if (0xfff < (long)(puVar5 + -(long)dir)) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("slash - dir < 4096","chdir-long.c",0xb3,"int chdir_long(char *)");\u000a      }\u000a      iVar2 = cdb_advance_fd(local_30,dir);\u000a      *puVar5 = 0x2f;\u000a      if (iVar2 != 0) goto LAB_00417c73;\u000a      dir = find_non_slash(puVar5 + 1);\u000a    } while (0xfff < (long)(pcVar6 + -(long)dir));\u000a  }\u000a  if (((pcVar6 <= dir) || (iVar2 = cdb_advance_fd(local_30,dir), iVar2 == 0)) &&\u000a     (iVar2 = cdb_fchdir(local_30), iVar2 == 0)) {\u000a    cdb_free(local_30);\u000a    return 0;\u000a  }\u000aLAB_00417c73:\u000a  iVar2 = *piVar3;\u000a  cdb_free(local_30);\u000a  *piVar3 = iVar2;\u000a  return -1;\u000a}\u000a\u000a
p647
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV RBX,RDI\nCALL 0x00402960\nMOV EBP,EAX\nTEST EBP,EBP\nJZ 0x00417b9e\nCALL 0x00402770\nMOV R14,RAX\nCMP dword ptr [R14],0x24\nJNZ 0x00417c91\nMOV RDI,RBX\nCALL 0x00402930\nMOV R15,RAX\nLEA RDI,[RSP + 0x8]\nCALL 0x00417d30\nTEST R15,R15\nJZ 0x00417cc7\nCMP R15,0xfff\nJBE 0x00417ce0\nADD R15,RBX\nMOV ESI,0x41d1f6\nMOV RDI,RBX\nCALL 0x00402ad0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00417bbf\nCMP RBP,0x2\nJNZ 0x00417ba5\nLEA RDI,[RBX + 0x3]\nMOV RDX,R15\nSUB RDX,RDI\nMOV ESI,0x2f\nCALL 0x00402b10\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00417c85\nMOV byte ptr [RBP],0x0\nLEA RDI,[RSP + 0x8]\nMOV RSI,RBX\nCALL 0x00417d40\nMOV byte ptr [RBP],0x2f\nTEST EAX,EAX\nJNZ 0x00417c73\nINC RBP\nMOV RDI,RBP\nCALL 0x00417d80\nMOV RBX,RAX\nCMP byte ptr [RBX],0x2f\nJNZ 0x00417bc8\nJMP 0x00417cf9\nXOR EBP,EBP\nJMP 0x00417c91\nLEA RDI,[RSP + 0x8]\nMOV ESI,0x41d1f6\nCALL 0x00417d40\nTEST EAX,EAX\nJNZ 0x00417c73\nADD RBX,RBP\nCMP byte ptr [RBX],0x2f\nJZ 0x00417cf9\nCMP RBX,R15\nJA 0x00417d12\nMOV RAX,R15\nSUB RAX,RBX\nCMP RAX,0x1000\nJL 0x00417c4f\nLEA R12,[RSP + 0x8]\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV ESI,0x2f\nMOV EDX,0x1000\nMOV RDI,RBX\nCALL 0x00402da0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00417c85\nMOV byte ptr [RBP],0x0\nMOV RAX,RBP\nSUB RAX,RBX\nCMP RAX,0x1000\nJGE 0x00417cae\nMOV RDI,R12\nMOV RSI,RBX\nCALL 0x00417d40\nMOV byte ptr [RBP],0x2f\nTEST EAX,EAX\nJNZ 0x00417c73\nINC RBP\nMOV RDI,RBP\nCALL 0x00417d80\nMOV RBX,RAX\nMOV RAX,R15\nSUB RAX,RBX\nCMP RAX,0xfff\nJG 0x00417bf0\nCMP RBX,R15\nJNC 0x00417c65\nLEA RDI,[RSP + 0x8]\nMOV RSI,RBX\nCALL 0x00417d40\nTEST EAX,EAX\nJNZ 0x00417c73\nLEA RDI,[RSP + 0x8]\nCALL 0x00417da0\nTEST EAX,EAX\nJZ 0x00417ca0\nMOV EBX,dword ptr [R14]\nLEA RDI,[RSP + 0x8]\nCALL 0x00417db0\nMOV dword ptr [R14],EBX\nJMP 0x00417c8c\nMOV dword ptr [R14],0x24\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nLEA RDI,[RSP + 0x8]\nCALL 0x00417db0\nXOR EBP,EBP\nJMP 0x00417c91\nMOV EDI,0x42523a\nMOV ESI,0x4251ef\nMOV EDX,0xb3\nMOV ECX,0x4251fc\nCALL 0x00402a40\nMOV EDI,0x4251e7\nMOV ESI,0x4251ef\nMOV EDX,0x7e\nMOV ECX,0x4251fc\nCALL 0x00402a40\nMOV EDI,0x425213\nMOV ESI,0x4251ef\nMOV EDX,0x7f\nMOV ECX,0x4251fc\nCALL 0x00402a40\nMOV EDI,0x42521f\nMOV ESI,0x4251ef\nMOV EDX,0xa2\nMOV ECX,0x4251fc\nCALL 0x00402a40\nMOV EDI,0x42522b\nMOV ESI,0x4251ef\nMOV EDX,0xa3\nMOV ECX,0x4251fc\nCALL 0x00402a40\n'
p648
S'55\n41 57\n41 56\n41 54\n53\n48 83 ec 10\n48 89 fb\ne8 7c ae fe ff\n89 c5\n85 ed\n0f 84 b0 00 00 00\ne8 7d ac fe ff\n49 89 c6\n41 83 3e 24\n0f 85 91 01 00 00\n48 89 df\ne8 28 ae fe ff\n49 89 c7\n48 8d 7c 24 08\ne8 1b 02 00 00\n4d 85 ff\n0f 84 a9 01 00 00\n49 81 ff ff 0f 00 00\n0f 86 b5 01 00 00\n49 01 df\nbe f6 d1 41 00\n48 89 df\ne8 95 af fe ff\n48 89 c5\n48 85 ed\n74 7c\n48 83 fd 02\n75 5c\n48 8d 7b 03\n4c 89 fa\n48 29 fa\nbe 2f 00 00 00\ne8 b3 af fe ff\n48 89 c5\n48 85 ed\n0f 84 1c 01 00 00\nc6 45 00 00\n48 8d 7c 24 08\n48 89 de\ne8 c6 01 00 00\nc6 45 00 2f\n85 c0\n0f 85 ed 00 00 00\n48 ff c5\n48 89 ef\ne8 ef 01 00 00\n48 89 c3\n80 3b 2f\n75 2f\ne9 5b 01 00 00\n31 ed\ne9 ec 00 00 00\n48 8d 7c 24 08\nbe f6 d1 41 00\ne8 8c 01 00 00\n85 c0\n0f 85 b7 00 00 00\n48 01 eb\n80 3b 2f\n0f 84 31 01 00 00\n4c 39 fb\n0f 87 41 01 00 00\n4c 89 f8\n48 29 d8\n48 3d 00 10 00 00\n7c 70\n4c 8d 64 24 08\n66 66 66 2e 0f 1f 84 00 00 00 00 00\nbe 2f 00 00 00\nba 00 10 00 00\n48 89 df\ne8 9e b1 fe ff\n48 89 c5\n48 85 ed\n74 7b\nc6 45 00 00\n48 89 e8\n48 29 d8\n48 3d 00 10 00 00\n0f 8d 8e 00 00 00\n4c 89 e7\n48 89 de\ne8 15 01 00 00\nc6 45 00 2f\n85 c0\n75 40\n48 ff c5\n48 89 ef\ne8 42 01 00 00\n48 89 c3\n4c 89 f8\n48 29 d8\n48 3d ff 0f 00 00\n7f a1\n4c 39 fb\n73 11\n48 8d 7c 24 08\n48 89 de\ne8 df 00 00 00\n85 c0\n75 0e\n48 8d 7c 24 08\ne8 31 01 00 00\n85 c0\n74 2d\n41 8b 1e\n48 8d 7c 24 08\ne8 30 01 00 00\n41 89 1e\neb 07\n41 c7 06 24 00 00 00\nbd ff ff ff ff\n89 e8\n48 83 c4 10\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n48 8d 7c 24 08\ne8 06 01 00 00\n31 ed\neb e3\nbf 3a 52 42 00\nbe ef 51 42 00\nba b3 00 00 00\nb9 fc 51 42 00\ne8 79 ad fe ff\nbf e7 51 42 00\nbe ef 51 42 00\nba 7e 00 00 00\nb9 fc 51 42 00\ne8 60 ad fe ff\nbf 13 52 42 00\nbe ef 51 42 00\nba 7f 00 00 00\nb9 fc 51 42 00\ne8 47 ad fe ff\nbf 1f 52 42 00\nbe ef 51 42 00\nba a2 00 00 00\nb9 fc 51 42 00\ne8 2e ad fe ff\nbf 2b 52 42 00\nbe ef 51 42 00\nba a3 00 00 00\nb9 fc 51 42 00\ne8 15 ad fe ff\n'
p649
S'.text:0000000000417ad0\n.text:0000000000417ad1\n.text:0000000000417ad3\n.text:0000000000417ad5\n.text:0000000000417ad7\n.text:0000000000417ad8\n.text:0000000000417adc\n.text:0000000000417adf\n.text:0000000000417ae4\n.text:0000000000417ae6\n.text:0000000000417ae8\n.text:0000000000417aee\n.text:0000000000417af3\n.text:0000000000417af6\n.text:0000000000417afa\n.text:0000000000417b00\n.text:0000000000417b03\n.text:0000000000417b08\n.text:0000000000417b0b\n.text:0000000000417b10\n.text:0000000000417b15\n.text:0000000000417b18\n.text:0000000000417b1e\n.text:0000000000417b25\n.text:0000000000417b2b\n.text:0000000000417b2e\n.text:0000000000417b33\n.text:0000000000417b36\n.text:0000000000417b3b\n.text:0000000000417b3e\n.text:0000000000417b41\n.text:0000000000417b43\n.text:0000000000417b47\n.text:0000000000417b49\n.text:0000000000417b4d\n.text:0000000000417b50\n.text:0000000000417b53\n.text:0000000000417b58\n.text:0000000000417b5d\n.text:0000000000417b60\n.text:0000000000417b63\n.text:0000000000417b69\n.text:0000000000417b6d\n.text:0000000000417b72\n.text:0000000000417b75\n.text:0000000000417b7a\n.text:0000000000417b7e\n.text:0000000000417b80\n.text:0000000000417b86\n.text:0000000000417b89\n.text:0000000000417b8c\n.text:0000000000417b91\n.text:0000000000417b94\n.text:0000000000417b97\n.text:0000000000417b99\n.text:0000000000417b9e\n.text:0000000000417ba0\n.text:0000000000417ba5\n.text:0000000000417baa\n.text:0000000000417baf\n.text:0000000000417bb4\n.text:0000000000417bb6\n.text:0000000000417bbc\n.text:0000000000417bbf\n.text:0000000000417bc2\n.text:0000000000417bc8\n.text:0000000000417bcb\n.text:0000000000417bd1\n.text:0000000000417bd4\n.text:0000000000417bd7\n.text:0000000000417bdd\n.text:0000000000417bdf\n.text:0000000000417be4\n.text:0000000000417bf0\n.text:0000000000417bf5\n.text:0000000000417bfa\n.text:0000000000417bfd\n.text:0000000000417c02\n.text:0000000000417c05\n.text:0000000000417c08\n.text:0000000000417c0a\n.text:0000000000417c0e\n.text:0000000000417c11\n.text:0000000000417c14\n.text:0000000000417c1a\n.text:0000000000417c20\n.text:0000000000417c23\n.text:0000000000417c26\n.text:0000000000417c2b\n.text:0000000000417c2f\n.text:0000000000417c31\n.text:0000000000417c33\n.text:0000000000417c36\n.text:0000000000417c39\n.text:0000000000417c3e\n.text:0000000000417c41\n.text:0000000000417c44\n.text:0000000000417c47\n.text:0000000000417c4d\n.text:0000000000417c4f\n.text:0000000000417c52\n.text:0000000000417c54\n.text:0000000000417c59\n.text:0000000000417c5c\n.text:0000000000417c61\n.text:0000000000417c63\n.text:0000000000417c65\n.text:0000000000417c6a\n.text:0000000000417c6f\n.text:0000000000417c71\n.text:0000000000417c73\n.text:0000000000417c76\n.text:0000000000417c7b\n.text:0000000000417c80\n.text:0000000000417c83\n.text:0000000000417c85\n.text:0000000000417c8c\n.text:0000000000417c91\n.text:0000000000417c93\n.text:0000000000417c97\n.text:0000000000417c98\n.text:0000000000417c9a\n.text:0000000000417c9c\n.text:0000000000417c9e\n.text:0000000000417c9f\n.text:0000000000417ca0\n.text:0000000000417ca5\n.text:0000000000417caa\n.text:0000000000417cac\n.text:0000000000417cae\n.text:0000000000417cb3\n.text:0000000000417cb8\n.text:0000000000417cbd\n.text:0000000000417cc2\n.text:0000000000417cc7\n.text:0000000000417ccc\n.text:0000000000417cd1\n.text:0000000000417cd6\n.text:0000000000417cdb\n.text:0000000000417ce0\n.text:0000000000417ce5\n.text:0000000000417cea\n.text:0000000000417cef\n.text:0000000000417cf4\n.text:0000000000417cf9\n.text:0000000000417cfe\n.text:0000000000417d03\n.text:0000000000417d08\n.text:0000000000417d0d\n.text:0000000000417d12\n.text:0000000000417d17\n.text:0000000000417d1c\n.text:0000000000417d21\n.text:0000000000417d26\n'
p650
tp651
sS'parse_wholename'
p652
(S'\n__stdcall parse_wholename(parser_table * entry, char * * argv, int * arg_ptr)\n'
p653
V\u000a_Bool parse_wholename(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = insert_path_check(entry,argv,arg_ptr,"wholename",pred_path);\u000a  return _Var1;\u000a}\u000a\u000a
p654
S'MOV ECX,0x420ef8\nMOV R8D,0x404550\nJMP 0x0040d5b0\n'
p655
S'b9 f8 0e 42 00\n41 b8 50 45 40 00\ne9 a0 0f 00 00\n'
p656
S'.text:000000000040c600\n.text:000000000040c605\n.text:000000000040c60b\n'
p657
tp658
sS'parse_noop'
p659
(S'\n__stdcall parse_noop()\n'
p660
V\u000a_Bool parse_noop(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  parser_table *entry;\u000a  int *arg_ptr;\u000a  char **argv;\u000a  \u000a  entry = get_noop();\u000a  _Var1 = parse_true(entry,argv,arg_ptr);\u000a  return _Var1;\u000a}\u000a\u000a
p661
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nCALL 0x0040ca30\nMOV RDI,RAX\nMOV RSI,RBX\nMOV RDX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x0040c640\n'
p662
S'41 56\n53\n50\n49 89 f6\n48 89 fb\ne8 21 00 00 00\n48 89 c7\n48 89 de\n4c 89 f2\n48 83 c4 08\n5b\n41 5e\ne9 1c fc ff ff\n'
p663
S'.text:000000000040ca00\n.text:000000000040ca02\n.text:000000000040ca03\n.text:000000000040ca04\n.text:000000000040ca07\n.text:000000000040ca0a\n.text:000000000040ca0f\n.text:000000000040ca12\n.text:000000000040ca15\n.text:000000000040ca18\n.text:000000000040ca1c\n.text:000000000040ca1d\n.text:000000000040ca1f\n'
p664
tp665
sS'setfilecon'
p666
(S'\n__stdcall setfilecon(char * file, security_context_t con)\n'
p667
V\u000aint setfilecon(char *file,security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p668
S'PUSH RAX\nCALL 0x00402770\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p669
S'50\ne8 4a bc fe ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p670
S'.text:0000000000416b20\n.text:0000000000416b21\n.text:0000000000416b26\n.text:0000000000416b2c\n.text:0000000000416b31\n.text:0000000000416b32\n'
p671
tp672
sS'is_ok'
p673
(S'\n__stdcall is_ok(char * program, char * arg)\n'
p674
V\u000a_Bool is_ok(char *program,char *arg)\u000a\u000a{\u000a  uint uVar1;\u000a  FILE *__stream;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  char *__format;\u000a  uint *puVar4;\u000a  undefined8 uVar5;\u000a  \u000a  rpl_fflush(stdout);\u000a  __stream = stderr;\u000a  __format = (char *)dcgettext(0,"< %s ... %s > ? ",5);\u000a  iVar3 = fprintf((FILE *)__stream,__format,program,arg);\u000a  if (iVar3 < 0) {\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar1 = *puVar4;\u000a    uVar5 = dcgettext(0,"Failed to write prompt for -ok",5);\u000a    error(1,(ulong)uVar1,uVar5,uVar5);\u000a  }\u000a  rpl_fflush(stderr);\u000a  _Var2 = yesno();\u000a  return _Var2;\u000a}\u000a\u000a
p675
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nMOV RDI,qword ptr [0x0062de28]\nCALL 0x00417fa0\nMOV RBX,qword ptr [0x0062de60]\nXOR EDI,EDI\nMOV ESI,0x41d17c\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RSI,RCX\nMOV RDX,R15\nMOV RCX,R14\nCALL 0x00402ba0\nTEST EAX,EAX\nJNS 0x00404c95\nCALL 0x00402770\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x41d18d\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00402d90\nMOV RDI,qword ptr [0x0062de60]\nCALL 0x00417fa0\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00417a60\n'
p676
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\n48 8b 3d f6 91 22 00\ne8 69 33 01 00\n48 8b 1d 22 92 22 00\n31 ff\nbe 7c d1 41 00\nba 05 00 00 00\ne8 c1 dc ff ff\n48 89 c1\n31 c0\n48 89 df\n48 89 ce\n4c 89 fa\n4c 89 f1\ne8 3b df ff ff\n85 c0\n79 2c\ne8 02 db ff ff\n8b 18\n31 ff\nbe 8d d1 41 00\nba 05 00 00 00\ne8 8f dc ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ca\ne8 fb e0 ff ff\n48 8b 3d c4 91 22 00\ne8 ff 32 01 00\n5b\n41 5e\n41 5f\ne9 b5 2d 01 00\n'
p677
S'.text:0000000000404c20\n.text:0000000000404c22\n.text:0000000000404c24\n.text:0000000000404c25\n.text:0000000000404c28\n.text:0000000000404c2b\n.text:0000000000404c32\n.text:0000000000404c37\n.text:0000000000404c3e\n.text:0000000000404c40\n.text:0000000000404c45\n.text:0000000000404c4a\n.text:0000000000404c4f\n.text:0000000000404c52\n.text:0000000000404c54\n.text:0000000000404c57\n.text:0000000000404c5a\n.text:0000000000404c5d\n.text:0000000000404c60\n.text:0000000000404c65\n.text:0000000000404c67\n.text:0000000000404c69\n.text:0000000000404c6e\n.text:0000000000404c70\n.text:0000000000404c72\n.text:0000000000404c77\n.text:0000000000404c7c\n.text:0000000000404c81\n.text:0000000000404c84\n.text:0000000000404c89\n.text:0000000000404c8b\n.text:0000000000404c8d\n.text:0000000000404c90\n.text:0000000000404c95\n.text:0000000000404c9c\n.text:0000000000404ca1\n.text:0000000000404ca2\n.text:0000000000404ca4\n.text:0000000000404ca6\n'
p678
tp679
sS'parse_ipath'
p680
(S'\n__stdcall parse_ipath(parser_table * entry, char * * argv, int * arg_ptr)\n'
p681
V\u000a_Bool parse_ipath(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = insert_path_check(entry,argv,arg_ptr,"ipath",pred_ipath);\u000a  return _Var1;\u000a}\u000a\u000a
p682
S'MOV ECX,0x420eea\nMOV R8D,0x4041e0\nJMP 0x0040d5b0\n'
p683
S'b9 ea 0e 42 00\n41 b8 e0 41 40 00\ne9 00 1c 00 00\n'
p684
S'.text:000000000040b9a0\n.text:000000000040b9a5\n.text:000000000040b9ab\n'
p685
tp686
sS'prep_child_for_exec'
p687
(S'\n__stdcall prep_child_for_exec(saved_cwd * wd)\n'
p688
V\u000a_Bool prep_child_for_exec(saved_cwd *wd)\u000a\u000a{\u000a  uint uVar1;\u000a  char "/dev/null" [10];\u000a  int iVar2;\u000a  char *pcVar3;\u000a  uint *puVar4;\u000a  undefined8 uVar5;\u000a  undefined8 uVar6;\u000a  undefined uVar7;\u000a  saved_cwd *cwd;\u000a  \u000a  uVar7 = 1;\u000a  if ((char)wd != 0) {\u000a    iVar2 = close(0);\u000a    if (iVar2 < 0) {\u000a      puVar4 = (uint *)__errno_location();\u000a      uVar1 = *puVar4;\u000a      uVar7 = 0;\u000a      uVar5 = dcgettext(0,"Cannot close standard input",5);\u000a      error(0,(ulong)uVar1,uVar5,uVar5);\u000a    }\u000a    else {\u000a      iVar2 = open("/dev/null",0);\u000a      if (iVar2 < 0) {\u000a        puVar4 = (uint *)__errno_location();\u000a        uVar1 = *puVar4;\u000a        pcVar3 = safely_quote_err_filename((char *)0x0);\u000a        error(0,(ulong)uVar1,&DAT_0042542f,pcVar3);\u000a      }\u000a    }\u000a  }\u000a  iVar2 = restore_cwd(cwd);\u000a  if (iVar2 != 0) {\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar1 = *puVar4;\u000a    uVar5 = dcgettext(0,"Failed to change directory%s%s",5);\u000a    if (cwd->desc < 0) {\u000a      uVar6 = 0x421bd9;\u000a      if (cwd->name == (char *)0x0) {\u000a        uVar6 = 0x41e69a;\u000a      }\u000a      pcVar3 = "";\u000a      if (cwd->desc < 0) {\u000a        pcVar3 = "";\u000a        if (cwd->name != (char *)0x0) {\u000a          pcVar3 = cwd->name;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      uVar6 = 0x41e69a;\u000a      pcVar3 = "";\u000a    }\u000a    uVar7 = 0;\u000a    error(0,(ulong)uVar1,uVar5,uVar6,pcVar3);\u000a  }\u000a  return (_Bool)uVar7;\u000a}\u000a\u000a
p689
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV BL,0x1\nTEST DIL,DIL\nJZ 0x0040570e\nXOR EDI,EDI\nCALL 0x00402ac0\nTEST EAX,EAX\nJS 0x004056e3\nMOV EDI,0x41d33a\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00402dc0\nTEST EAX,EAX\nJNS 0x0040570e\nCALL 0x00402770\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x41d33a\nCALL 0x00408920\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x42542f\nXOR EAX,EAX\nMOV ESI,EBP\nCALL 0x00402d90\nJMP 0x0040570e\nCALL 0x00402770\nMOV EBP,dword ptr [RAX]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x41d2ff\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nCALL 0x00402d90\nMOV RDI,R14\nCALL 0x004169f0\nTEST EAX,EAX\nJZ 0x00405780\nCALL 0x00402770\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x41d31b\nMOV EDX,0x5\nCALL 0x00402910\nMOV RDX,RAX\nCMP dword ptr [R14],0x0\nJS 0x00405748\nMOV ECX,0x41e69a\nMOV R8D,0x41e69a\nJMP 0x00405773\nCMP qword ptr [R14 + 0x8],0x0\nMOV ECX,0x421bd9\nMOV R8D,0x41e69a\nCMOVZ RCX,R8\nCMP dword ptr [R14],0x0\nJNS 0x00405773\nMOV RAX,qword ptr [R14 + 0x8]\nTEST RAX,RAX\nMOV R8D,0x41e69a\nCMOVNZ R8,RAX\nXOR EBX,EBX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nCALL 0x00402d90\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p690
S'55\n41 56\n53\n49 89 f6\nb3 01\n40 84 ff\n74 70\n31 ff\ne8 1b d4 ff ff\n85 c0\n78 3a\nbf 3a d3 41 00\n31 f6\n31 c0\ne8 09 d7 ff ff\n85 c0\n79 53\ne8 b0 d0 ff ff\n8b 28\n31 ff\nbe 3a d3 41 00\ne8 52 32 00 00\n48 89 c1\n31 ff\nba 2f 54 42 00\n31 c0\n89 ee\ne8 af d6 ff ff\neb 2b\ne8 88 d0 ff ff\n8b 28\n31 db\n31 ff\nbe ff d2 41 00\nba 05 00 00 00\ne8 13 d2 ff ff\n48 89 c1\n31 ff\n31 c0\n89 ee\n48 89 ca\ne8 82 d6 ff ff\n4c 89 f7\ne8 da 12 01 00\n85 c0\n74 66\ne8 51 d0 ff ff\n8b 28\n31 ff\nbe 1b d3 41 00\nba 05 00 00 00\ne8 de d1 ff ff\n48 89 c2\n41 83 3e 00\n78 0d\nb9 9a e6 41 00\n41 b8 9a e6 41 00\neb 2b\n49 83 7e 08 00\nb9 d9 1b 42 00\n41 b8 9a e6 41 00\n49 0f 44 c8\n41 83 3e 00\n79 11\n49 8b 46 08\n48 85 c0\n41 b8 9a e6 41 00\n4c 0f 45 c0\n31 db\n31 ff\n31 c0\n89 ee\ne8 10 d6 ff ff\n89 d8\n5b\n41 5e\n5d\nc3\n'
p691
S'.text:0000000000405690\n.text:0000000000405691\n.text:0000000000405693\n.text:0000000000405694\n.text:0000000000405697\n.text:0000000000405699\n.text:000000000040569c\n.text:000000000040569e\n.text:00000000004056a0\n.text:00000000004056a5\n.text:00000000004056a7\n.text:00000000004056a9\n.text:00000000004056ae\n.text:00000000004056b0\n.text:00000000004056b2\n.text:00000000004056b7\n.text:00000000004056b9\n.text:00000000004056bb\n.text:00000000004056c0\n.text:00000000004056c2\n.text:00000000004056c4\n.text:00000000004056c9\n.text:00000000004056ce\n.text:00000000004056d1\n.text:00000000004056d3\n.text:00000000004056d8\n.text:00000000004056da\n.text:00000000004056dc\n.text:00000000004056e1\n.text:00000000004056e3\n.text:00000000004056e8\n.text:00000000004056ea\n.text:00000000004056ec\n.text:00000000004056ee\n.text:00000000004056f3\n.text:00000000004056f8\n.text:00000000004056fd\n.text:0000000000405700\n.text:0000000000405702\n.text:0000000000405704\n.text:0000000000405706\n.text:0000000000405709\n.text:000000000040570e\n.text:0000000000405711\n.text:0000000000405716\n.text:0000000000405718\n.text:000000000040571a\n.text:000000000040571f\n.text:0000000000405721\n.text:0000000000405723\n.text:0000000000405728\n.text:000000000040572d\n.text:0000000000405732\n.text:0000000000405735\n.text:0000000000405739\n.text:000000000040573b\n.text:0000000000405740\n.text:0000000000405746\n.text:0000000000405748\n.text:000000000040574d\n.text:0000000000405752\n.text:0000000000405758\n.text:000000000040575c\n.text:0000000000405760\n.text:0000000000405762\n.text:0000000000405766\n.text:0000000000405769\n.text:000000000040576f\n.text:0000000000405773\n.text:0000000000405775\n.text:0000000000405777\n.text:0000000000405779\n.text:000000000040577b\n.text:0000000000405780\n.text:0000000000405782\n.text:0000000000405783\n.text:0000000000405785\n.text:0000000000405786\n'
p692
tp693
sS'collect_arg_stat_info'
p694
(S'\n__stdcall collect_arg_stat_info(char * * argv, int * arg_ptr, stat * p, char * * argument)\n'
p695
V\u000a_Bool collect_arg_stat_info(char **argv,int *arg_ptr,stat *p,char **argument)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char *in_RAX;\u000a  uint *puVar3;\u000a  char *local_18;\u000a  \u000a  local_18 = in_RAX;\u000a  _Var1 = collect_arg(argv,arg_ptr,&local_18);\u000a  if (_Var1 != false) {\u000a    *argument = local_18;\u000a    iVar2 = (*options.xstat)(local_18,p);\u000a    if (iVar2 == 0) {\u000a      return true;\u000a    }\u000a    puVar3 = (uint *)__errno_location();\u000a    fatal_target_file_error((char *)(ulong)*puVar3);\u000a  }\u000a  *argument = (char *)0x0;\u000a  return false;\u000a}\u000a\u000a
p696
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RCX\nMOV R14,RDX\nMOV RDX,RSP\nCALL 0x0040c7f0\nTEST AL,AL\nJZ 0x0040c9ee\nMOV RDI,qword ptr [RSP]\nMOV qword ptr [RBX],RDI\nMOV RSI,R14\nCALL qword ptr [0x0062f090]\nMOV ECX,EAX\nMOV AL,0x1\nTEST ECX,ECX\nJZ 0x0040c9f7\nCALL 0x00402770\nMOV EDI,dword ptr [RAX]\nMOV RSI,qword ptr [RSP]\nCALL 0x004089a0\nMOV qword ptr [RBX],0x0\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p697
S'41 56\n53\n50\n48 89 cb\n49 89 d6\n48 89 e2\ne8 2e fe ff ff\n84 c0\n74 28\n48 8b 3c 24\n48 89 3b\n4c 89 f6\nff 15 ba 26 22 00\n89 c1\nb0 01\n85 c9\n74 19\ne8 8d 5d ff ff\n8b 38\n48 8b 34 24\ne8 b2 bf ff ff\n48 c7 03 00 00 00 00\n31 c0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p698
S'.text:000000000040c9b0\n.text:000000000040c9b2\n.text:000000000040c9b3\n.text:000000000040c9b4\n.text:000000000040c9b7\n.text:000000000040c9ba\n.text:000000000040c9bd\n.text:000000000040c9c2\n.text:000000000040c9c4\n.text:000000000040c9c6\n.text:000000000040c9ca\n.text:000000000040c9cd\n.text:000000000040c9d0\n.text:000000000040c9d6\n.text:000000000040c9d8\n.text:000000000040c9da\n.text:000000000040c9dc\n.text:000000000040c9de\n.text:000000000040c9e3\n.text:000000000040c9e5\n.text:000000000040c9e9\n.text:000000000040c9ee\n.text:000000000040c9f5\n.text:000000000040c9f7\n.text:000000000040c9fb\n.text:000000000040c9fc\n.text:000000000040c9fe\n'
p699
tp700
sS'get_regex_type_flags'
p701
(S'\n__stdcall get_regex_type_flags()\n'
p702
V\u000aint get_regex_type_flags(void)\u000a\u000a{\u000a  int iVar1;\u000a  uint in_EDI;\u000a  \u000a  iVar1 = -1;\u000a  if (in_EDI < 0xd) {\u000a    iVar1 = regex_map[(ulong)in_EDI].option_val;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p703
S'MOV EAX,0xffffffff\nCMP EDI,0xc\nJA 0x0040f9b6\nMOV EAX,EDI\nSHL RAX,0x4\nMOV EAX,dword ptr [0x62dcdc + RAX]\nRET\n'
p704
S'b8 ff ff ff ff\n83 ff 0c\n77 0c\n89 f8\n48 c1 e0 04\n8b 80 dc dc 62 00\nc3\n'
p705
S'.text:000000000040f9a0\n.text:000000000040f9a5\n.text:000000000040f9a8\n.text:000000000040f9aa\n.text:000000000040f9ac\n.text:000000000040f9b0\n.text:000000000040f9b6\n'
p706
tp707
sS'close_stdout_set_file_name'
p708
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p709
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p710
S'MOV qword ptr [0x0062e650],RDI\nRET\n'
p711
S'48 89 3d 09 e8 21 00\nc3\n'
p712
S'.text:000000000040fe40\n.text:000000000040fe47\n'
p713
tp714
sS'getgrnam'
p715
(S'\n__stdcall getgrnam(char * __name)\n'
p716
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000agroup * getgrnam(char *__name)\u000a\u000a{\u000a  group *pgVar1;\u000a  \u000a  pgVar1 = (group *)(*(code *)PTR_getgrnam_0062d290)();\u000a  return pgVar1;\u000a}\u000a\u000a
p717
S'JMP qword ptr [0x0062d290]\n'
p718
S'ff 25 aa a6 22 00\n'
p719
S'.plt:0000000000402be0\n'
p720
tp721
sS'get_format_flags_length'
p722
(S'\n__stdcall get_format_flags_length(char * p)\n'
p723
V\u000asize_t get_format_flags_length(char *p)\u000a\u000a{\u000a  byte bVar1;\u000a  long lVar2;\u000a  size_t sVar3;\u000a  ushort **ppuVar4;\u000a  size_t sVar5;\u000a  \u000a  sVar3 = 0;\u000a  do {\u000a    sVar5 = sVar3;\u000a    bVar1 = p[sVar5 + 1];\u000a    if ((bVar1 == 0) || (0x3f < bVar1)) break;\u000a    sVar3 = sVar5 + 1;\u000a  } while ((1 << (bVar1 & 0x3f) & 0x280900000001U) != 0);\u000a  ppuVar4 = __ctype_b_loc();\u000a  do {\u000a    lVar2 = sVar5 + 1;\u000a    sVar5 = sVar5 + 1;\u000a  } while ((*(byte *)((long)*ppuVar4 + (ulong)(byte)p[lVar2] * 2 + 1) & 8) != 0);\u000a  if (p[lVar2] == 0x2e) {\u000a    do {\u000a      lVar2 = sVar5 + 1;\u000a      sVar5 = sVar5 + 1;\u000a    } while ((*(byte *)((long)*ppuVar4 + (ulong)(byte)p[lVar2] * 2 + 1) & 8) != 0);\u000a  }\u000a  return sVar5;\u000a}\u000a\u000a
p724
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nXOR ECX,ECX\nMOV RAX,0x280900000001\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RBX,RCX\nMOVSX RCX,byte ptr [R14 + RBX*0x1 + 0x1]\nTEST RCX,RCX\nJZ 0x004093d7\nMOV ECX,ECX\nMOV EDX,0x1\nSHL RDX,CL\nCMP RCX,0x3f\nJA 0x004093d7\nLEA RCX,[RBX + 0x1]\nAND RDX,RAX\nJNZ 0x004093b0\nCALL 0x00402f80\nMOV RAX,qword ptr [RAX]\nNOP\nMOVZX ECX,byte ptr [R14 + RBX*0x1 + 0x1]\nINC RBX\nTEST byte ptr [RAX + RCX*0x2 + 0x1],0x8\nJNZ 0x004093e0\nCMP CL,0x2e\nJNZ 0x00409410\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX ECX,byte ptr [R14 + RBX*0x1 + 0x1]\nINC RBX\nTEST byte ptr [RAX + RCX*0x2 + 0x1],0x8\nJNZ 0x00409400\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p725
S'41 56\n53\n50\n49 89 fe\n31 c9\n48 b8 01 00 00 00 09 28 00 00\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 cb\n49 0f be 4c 1e 01\n48 85 c9\n74 19\n89 c9\nba 01 00 00 00\n48 d3 e2\n48 83 f9 3f\n77 09\n48 8d 4b 01\n48 21 c2\n75 d9\ne8 a4 9b ff ff\n48 8b 00\n90\n41 0f b6 4c 1e 01\n48 ff c3\nf6 44 48 01 08\n75 f0\n80 f9 2e\n75 1b\n66 66 2e 0f 1f 84 00 00 00 00 00\n41 0f b6 4c 1e 01\n48 ff c3\nf6 44 48 01 08\n75 f0\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p726
S'.text:0000000000409390\n.text:0000000000409392\n.text:0000000000409393\n.text:0000000000409394\n.text:0000000000409397\n.text:0000000000409399\n.text:00000000004093a3\n.text:00000000004093b0\n.text:00000000004093b3\n.text:00000000004093b9\n.text:00000000004093bc\n.text:00000000004093be\n.text:00000000004093c0\n.text:00000000004093c5\n.text:00000000004093c8\n.text:00000000004093cc\n.text:00000000004093ce\n.text:00000000004093d2\n.text:00000000004093d5\n.text:00000000004093d7\n.text:00000000004093dc\n.text:00000000004093df\n.text:00000000004093e0\n.text:00000000004093e6\n.text:00000000004093e9\n.text:00000000004093ee\n.text:00000000004093f0\n.text:00000000004093f3\n.text:00000000004093f5\n.text:0000000000409400\n.text:0000000000409406\n.text:0000000000409409\n.text:000000000040940e\n.text:0000000000409410\n.text:0000000000409413\n.text:0000000000409417\n.text:0000000000409418\n.text:000000000040941a\n'
p727
tp728
sS'fnmatch_sanitycheck'
p729
(S'\n__stdcall fnmatch_sanitycheck()\n'
p730
V\u000a_Bool fnmatch_sanitycheck(void)\u000a\u000a{\u000a  undefined uVar1;\u000a  int iVar2;\u000a  undefined8 in_RAX;\u000a  undefined8 uVar3;\u000a  \u000a  if (fnmatch_sanitycheck_checked != 0) {\u000a    return SUB81(in_RAX,0);\u000a  }\u000a  iVar2 = fnmatch("foo","foo",0);\u000a  if (iVar2 == 0) {\u000a    iVar2 = fnmatch("Foo","foo",0);\u000a    if (iVar2 != 0) {\u000a      iVar2 = fnmatch("Foo","foo",0x10);\u000a      if (iVar2 == 0) {\u000a        fnmatch_sanitycheck_checked = 1;\u000a        return SUB81(in_RAX,0);\u000a      }\u000a    }\u000a  }\u000a  uVar3 = dcgettext(0,"sanity check of the fnmatch() library function failed.",5);\u000a  uVar1 = error(1,0,uVar3,in_RAX);\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p731
S'PUSH RAX\nMOV AL,byte ptr [0x0062e628]\nTEST AL,AL\nJZ 0x0040d4ad\nPOP RAX\nRET\nMOV EDI,0x421663\nMOV ESI,0x421663\nXOR EDX,EDX\nCALL 0x00402a60\nTEST EAX,EAX\nJZ 0x0040d4e8\nXOR EDI,EDI\nMOV ESI,0x42166b\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nPOP RCX\nJMP 0x00402d90\nMOV EDI,0x421667\nMOV ESI,0x421663\nXOR EDX,EDX\nCALL 0x00402a60\nTEST EAX,EAX\nJZ 0x0040d4c2\nMOV EDI,0x421667\nMOV ESI,0x421663\nMOV EDX,0x10\nCALL 0x00402a60\nTEST EAX,EAX\nJNZ 0x0040d4c2\nMOV byte ptr [0x0062e628],0x1\nPOP RAX\nRET\n'
p732
S'50\n8a 05 81 11 22 00\n84 c0\n74 02\n58\nc3\nbf 63 16 42 00\nbe 63 16 42 00\n31 d2\ne8 a2 55 ff ff\n85 c0\n74 26\n31 ff\nbe 6b 16 42 00\nba 05 00 00 00\ne8 3d 54 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\n59\ne9 a8 58 ff ff\nbf 67 16 42 00\nbe 63 16 42 00\n31 d2\ne8 67 55 ff ff\n85 c0\n74 c5\nbf 67 16 42 00\nbe 63 16 42 00\nba 10 00 00 00\ne8 4f 55 ff ff\n85 c0\n75 ad\nc6 05 0c 11 22 00 01\n58\nc3\n'
p733
S'.text:000000000040d4a0\n.text:000000000040d4a1\n.text:000000000040d4a7\n.text:000000000040d4a9\n.text:000000000040d4ab\n.text:000000000040d4ac\n.text:000000000040d4ad\n.text:000000000040d4b2\n.text:000000000040d4b7\n.text:000000000040d4b9\n.text:000000000040d4be\n.text:000000000040d4c0\n.text:000000000040d4c2\n.text:000000000040d4c4\n.text:000000000040d4c9\n.text:000000000040d4ce\n.text:000000000040d4d3\n.text:000000000040d4d6\n.text:000000000040d4db\n.text:000000000040d4dd\n.text:000000000040d4df\n.text:000000000040d4e2\n.text:000000000040d4e3\n.text:000000000040d4e8\n.text:000000000040d4ed\n.text:000000000040d4f2\n.text:000000000040d4f4\n.text:000000000040d4f9\n.text:000000000040d4fb\n.text:000000000040d4fd\n.text:000000000040d502\n.text:000000000040d507\n.text:000000000040d50c\n.text:000000000040d511\n.text:000000000040d513\n.text:000000000040d515\n.text:000000000040d51c\n.text:000000000040d51d\n'
p734
tp735
sS'is_used_fs_type'
p736
(S'\n__stdcall is_used_fs_type(char * name)\n'
p737
V\u000a_Bool is_used_fs_type(char *name)\u000a\u000a{\u000a  int iVar1;\u000a  mount_entry *pmVar2;\u000a  undefined uVar3;\u000a  \u000a  if ((((*name == 'a') && (name[1] == 'f')) && (name[2] == 's')) && (name[3] == 0)) {\u000a    uVar3 = 1;\u000a  }\u000a  else {\u000a    pmVar2 = read_file_system_list();\u000a    uVar3 = 1;\u000a    if (pmVar2 != (mount_entry *)0x0) {\u000a      do {\u000a        iVar1 = strcmp(name,pmVar2->me_type);\u000a        if (iVar1 == 0) {\u000a          return true;\u000a        }\u000a        pmVar2 = pmVar2->me_next;\u000a      } while (pmVar2 != (mount_entry *)0x0);\u000a      uVar3 = 0;\u000a    }\u000a  }\u000a  return (_Bool)uVar3;\u000a}\u000a\u000a
p738
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCMP byte ptr [RBX],0x61\nJNZ 0x0040d21e\nCMP byte ptr [RBX + 0x1],0x66\nJNZ 0x0040d21e\nCMP byte ptr [RBX + 0x2],0x73\nJNZ 0x0040d21e\nCMP byte ptr [RBX + 0x3],0x0\nJZ 0x0040d254\nXOR EDI,EDI\nCALL 0x0041a740\nMOV RBP,RAX\nMOV R14B,0x1\nTEST RBP,RBP\nJZ 0x0040d24c\nMOV RSI,qword ptr [RBP + 0x18]\nMOV RDI,RBX\nCALL 0x00402b40\nTEST EAX,EAX\nJZ 0x0040d24c\nMOV RBP,qword ptr [RBP + 0x30]\nTEST RBP,RBP\nJNZ 0x0040d230\nXOR R14D,R14D\nMOV EAX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nRET\nMOV R14B,0x1\nJMP 0x0040d24c\n'
p739
S'55\n41 56\n53\n48 89 fb\n80 3b 61\n75 12\n80 7b 01 66\n75 0c\n80 7b 02 73\n75 06\n80 7b 03 00\n74 36\n31 ff\ne8 1b d5 00 00\n48 89 c5\n41 b6 01\n48 85 ed\n74 1c\n48 8b 75 18\n48 89 df\ne8 04 59 ff ff\n85 c0\n74 0c\n48 8b 6d 30\n48 85 ed\n75 e7\n45 31 f6\n44 89 f0\n5b\n41 5e\n5d\nc3\n41 b6 01\neb f3\n'
p740
S'.text:000000000040d200\n.text:000000000040d201\n.text:000000000040d203\n.text:000000000040d204\n.text:000000000040d207\n.text:000000000040d20a\n.text:000000000040d20c\n.text:000000000040d210\n.text:000000000040d212\n.text:000000000040d216\n.text:000000000040d218\n.text:000000000040d21c\n.text:000000000040d21e\n.text:000000000040d220\n.text:000000000040d225\n.text:000000000040d228\n.text:000000000040d22b\n.text:000000000040d22e\n.text:000000000040d230\n.text:000000000040d234\n.text:000000000040d237\n.text:000000000040d23c\n.text:000000000040d23e\n.text:000000000040d240\n.text:000000000040d244\n.text:000000000040d247\n.text:000000000040d249\n.text:000000000040d24c\n.text:000000000040d24f\n.text:000000000040d250\n.text:000000000040d252\n.text:000000000040d253\n.text:000000000040d254\n.text:000000000040d257\n'
p741
tp742
sS'setfileconat'
p743
(S'\n__stdcall setfileconat(char * file, security_context_t con)\n'
p744
V\u000aint setfileconat(char *file,security_context_t con)\u000a\u000a{\u000a  uint uVar1;\u000a  int __fd;\u000a  int iVar2;\u000a  int iVar3;\u000a  saved_cwd *__ptr;\u000a  uint *puVar4;\u000a  int *piVar5;\u000a  security_context_t con_00;\u000a  char proc_buf [4032];\u000a  saved_cwd local_ff8 [252];\u000a  \u000a  __fd = (int)(char *)((ulong)file & 0xffffffff);\u000a  if ((__fd == -100) || (*con == '/')) {\u000a    __fd = setfilecon(con,con_00);\u000a    return __fd;\u000a  }\u000a  __ptr = (saved_cwd *)openat_proc_name((char *)local_ff8,(char *)((ulong)file & 0xffffffff));\u000a  if (__ptr != (saved_cwd *)0x0) {\u000a    iVar2 = setfilecon((char *)__ptr,con_00);\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar1 = *puVar4;\u000a    if (__ptr != local_ff8) {\u000a      free(__ptr);\u000a    }\u000a    if (iVar2 != -1) {\u000a      return iVar2;\u000a    }\u000a    if (((0x26 < uVar1) || ((0x4000102006U >> ((ulong)uVar1 & 0x1f) & 1) == 0)) && (uVar1 != 0x5f))\u000a    {\u000a      *puVar4 = uVar1;\u000a      return -1;\u000a    }\u000a  }\u000a  iVar2 = save_cwd(local_ff8);\u000a  if (iVar2 != 0) {\u000a    puVar4 = (uint *)__errno_location();\u000a    openat_save_fail((ulong)*puVar4);\u000aLAB_0041b374:\u000a    puVar4 = (uint *)__errno_location();\u000a                    /* WARNING: Subroutine does not return */\u000a    openat_restore_fail((ulong)*puVar4);\u000a  }\u000a  if ((__fd < 0) || (local_ff8[0].desc != __fd)) {\u000a    __fd = fchdir(__fd);\u000a    if (__fd == 0) {\u000a      iVar2 = setfilecon(con,con_00);\u000a      __fd = 0;\u000a      if (iVar2 == -1) {\u000a        piVar5 = __errno_location();\u000a        __fd = *piVar5;\u000a      }\u000a      iVar3 = restore_cwd(local_ff8);\u000a      if (iVar3 != 0) goto LAB_0041b374;\u000a      free_cwd(local_ff8);\u000a      if (__fd != 0) {\u000a        piVar5 = __errno_location();\u000a        *piVar5 = __fd;\u000a      }\u000a    }\u000a    else {\u000a      piVar5 = __errno_location();\u000a      __fd = *piVar5;\u000a      free_cwd(local_ff8);\u000a      *piVar5 = __fd;\u000a      iVar2 = -1;\u000a    }\u000a  }\u000a  else {\u000a    free_cwd(local_ff8);\u000a    piVar5 = __errno_location();\u000a    *piVar5 = 9;\u000a    iVar2 = -1;\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p745
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xfd8\nMOV R14,RDX\nMOV RBX,RSI\nMOV EBP,EDI\nCMP EBP,-0x64\nJZ 0x0041b213\nCMP byte ptr [RBX],0x2f\nJNZ 0x0041b22f\nMOV RDI,RBX\nMOV RSI,R14\nADD RSP,0xfd8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00416b20\nLEA R13,[RSP + 0x10]\nMOV RDI,R13\nMOV ESI,EBP\nMOV RDX,RBX\nCALL 0x0041c2f0\nMOV R12,RAX\nTEST R12,R12\nJZ 0x0041b29f\nMOV RDI,R12\nMOV RSI,R14\nCALL 0x00416b20\nMOV R15D,EAX\nCALL 0x00402770\nMOV qword ptr [RSP + 0x8],RAX\nMOV EDX,dword ptr [RAX]\nCMP R12,R13\nJZ 0x0041b276\nMOV RDI,R12\nMOV R12D,EDX\nCALL 0x00402710\nMOV EDX,R12D\nCMP R15D,-0x1\nJNZ 0x0041b353\nCMP EDX,0x26\nJA 0x0041b343\nMOV EAX,EDX\nMOV RCX,0x4000102006\nBT RCX,RAX\nJNC 0x0041b343\nLEA RDI,[RSP + 0x10]\nCALL 0x004169a0\nTEST EAX,EAX\nJNZ 0x0041b368\nTEST EBP,EBP\nJS 0x0041b2d8\nCMP dword ptr [RSP + 0x10],EBP\nJNZ 0x0041b2d8\nLEA RDI,[RSP + 0x10]\nCALL 0x00416a10\nCALL 0x00402770\nMOV dword ptr [RAX],0x9\nMOV R15D,0xffffffff\nJMP 0x0041b353\nMOV EDI,EBP\nCALL 0x00402d10\nTEST EAX,EAX\nJZ 0x0041b301\nCALL 0x00402770\nMOV RBX,RAX\nMOV EBP,dword ptr [RBX]\nLEA RDI,[RSP + 0x10]\nCALL 0x00416a10\nMOV dword ptr [RBX],EBP\nMOV R15D,0xffffffff\nJMP 0x0041b353\nMOV RDI,RBX\nMOV RSI,R14\nCALL 0x00416b20\nMOV R15D,EAX\nXOR EBX,EBX\nCMP R15D,-0x1\nJNZ 0x0041b31e\nCALL 0x00402770\nMOV EBX,dword ptr [RAX]\nLEA RDI,[RSP + 0x10]\nCALL 0x004169f0\nTEST EAX,EAX\nJNZ 0x0041b374\nLEA RDI,[RSP + 0x10]\nCALL 0x00416a10\nTEST EBX,EBX\nJZ 0x0041b353\nCALL 0x00402770\nMOV dword ptr [RAX],EBX\nJMP 0x0041b353\nCMP EDX,0x5f\nJZ 0x0041b29f\nMOV RAX,qword ptr [RSP + 0x8]\nMOV dword ptr [RAX],EDX\nMOV EAX,R15D\nADD RSP,0xfd8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00402770\nMOV EDI,dword ptr [RAX]\nCALL 0x00413210\nCALL 0x00402770\nMOV EDI,dword ptr [RAX]\nCALL 0x00413250\n'
p746
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec d8 0f 00 00\n49 89 d6\n48 89 f3\n89 fd\n83 fd 9c\n74 05\n80 3b 2f\n75 1c\n48 89 df\n4c 89 f6\n48 81 c4 d8 0f 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 f1 b8 ff ff\n4c 8d 6c 24 10\n4c 89 ef\n89 ee\n48 89 da\ne8 af 10 00 00\n49 89 c4\n4d 85 e4\n74 56\n4c 89 e7\n4c 89 f6\ne8 cc b8 ff ff\n41 89 c7\ne8 14 75 fe ff\n48 89 44 24 08\n8b 10\n4d 39 ec\n74 0e\n4c 89 e7\n41 89 d4\ne8 9d 74 fe ff\n44 89 e2\n41 83 ff ff\n0f 85 d3 00 00 00\n83 fa 26\n0f 87 ba 00 00 00\n89 d0\n48 b9 06 20 10 00 40 00 00 00\n48 0f a3 c1\n0f 83 a4 00 00 00\n48 8d 7c 24 10\ne8 f7 b6 ff ff\n85 c0\n0f 85 b7 00 00 00\n85 ed\n78 23\n39 6c 24 10\n75 1d\n48 8d 7c 24 10\ne8 4b b7 ff ff\ne8 a6 74 fe ff\nc7 00 09 00 00 00\n41 bf ff ff ff ff\neb 7b\n89 ef\ne8 31 7a fe ff\n85 c0\n74 1e\ne8 88 74 fe ff\n48 89 c3\n8b 2b\n48 8d 7c 24 10\ne8 19 b7 ff ff\n89 2b\n41 bf ff ff ff ff\neb 52\n48 89 df\n4c 89 f6\ne8 14 b8 ff ff\n41 89 c7\n31 db\n41 83 ff ff\n75 07\ne8 54 74 fe ff\n8b 18\n48 8d 7c 24 10\ne8 c8 b6 ff ff\n85 c0\n75 48\n48 8d 7c 24 10\ne8 da b6 ff ff\n85 db\n74 19\ne8 31 74 fe ff\n89 18\neb 10\n83 fa 5f\n0f 84 53 ff ff ff\n48 8b 44 24 08\n89 10\n44 89 f8\n48 81 c4 d8 0f 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 03 74 fe ff\n8b 38\ne8 9c 7e ff ff\ne8 f7 73 fe ff\n8b 38\ne8 d0 7e ff ff\n'
p747
S'.text:000000000041b1f0\n.text:000000000041b1f1\n.text:000000000041b1f3\n.text:000000000041b1f5\n.text:000000000041b1f7\n.text:000000000041b1f9\n.text:000000000041b1fa\n.text:000000000041b201\n.text:000000000041b204\n.text:000000000041b207\n.text:000000000041b209\n.text:000000000041b20c\n.text:000000000041b20e\n.text:000000000041b211\n.text:000000000041b213\n.text:000000000041b216\n.text:000000000041b219\n.text:000000000041b220\n.text:000000000041b221\n.text:000000000041b223\n.text:000000000041b225\n.text:000000000041b227\n.text:000000000041b229\n.text:000000000041b22a\n.text:000000000041b22f\n.text:000000000041b234\n.text:000000000041b237\n.text:000000000041b239\n.text:000000000041b23c\n.text:000000000041b241\n.text:000000000041b244\n.text:000000000041b247\n.text:000000000041b249\n.text:000000000041b24c\n.text:000000000041b24f\n.text:000000000041b254\n.text:000000000041b257\n.text:000000000041b25c\n.text:000000000041b261\n.text:000000000041b263\n.text:000000000041b266\n.text:000000000041b268\n.text:000000000041b26b\n.text:000000000041b26e\n.text:000000000041b273\n.text:000000000041b276\n.text:000000000041b27a\n.text:000000000041b280\n.text:000000000041b283\n.text:000000000041b289\n.text:000000000041b28b\n.text:000000000041b295\n.text:000000000041b299\n.text:000000000041b29f\n.text:000000000041b2a4\n.text:000000000041b2a9\n.text:000000000041b2ab\n.text:000000000041b2b1\n.text:000000000041b2b3\n.text:000000000041b2b5\n.text:000000000041b2b9\n.text:000000000041b2bb\n.text:000000000041b2c0\n.text:000000000041b2c5\n.text:000000000041b2ca\n.text:000000000041b2d0\n.text:000000000041b2d6\n.text:000000000041b2d8\n.text:000000000041b2da\n.text:000000000041b2df\n.text:000000000041b2e1\n.text:000000000041b2e3\n.text:000000000041b2e8\n.text:000000000041b2eb\n.text:000000000041b2ed\n.text:000000000041b2f2\n.text:000000000041b2f7\n.text:000000000041b2f9\n.text:000000000041b2ff\n.text:000000000041b301\n.text:000000000041b304\n.text:000000000041b307\n.text:000000000041b30c\n.text:000000000041b30f\n.text:000000000041b311\n.text:000000000041b315\n.text:000000000041b317\n.text:000000000041b31c\n.text:000000000041b31e\n.text:000000000041b323\n.text:000000000041b328\n.text:000000000041b32a\n.text:000000000041b32c\n.text:000000000041b331\n.text:000000000041b336\n.text:000000000041b338\n.text:000000000041b33a\n.text:000000000041b33f\n.text:000000000041b341\n.text:000000000041b343\n.text:000000000041b346\n.text:000000000041b34c\n.text:000000000041b351\n.text:000000000041b353\n.text:000000000041b356\n.text:000000000041b35d\n.text:000000000041b35e\n.text:000000000041b360\n.text:000000000041b362\n.text:000000000041b364\n.text:000000000041b366\n.text:000000000041b367\n.text:000000000041b368\n.text:000000000041b36d\n.text:000000000041b36f\n.text:000000000041b374\n.text:000000000041b379\n.text:000000000041b37b\n'
p748
tp749
sS'run_in_dirfd'
p750
(S'\n__stdcall run_in_dirfd(anon_subr_int_void_ptr * callback, void * usercontext)\n'
p751
V\u000aint run_in_dirfd(int (*callback)(void *),void *usercontext)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  int iVar3;\u000a  int *piVar4;\u000a  uint *puVar5;\u000a  saved_cwd sStack40;\u000a  \u000a  if ((int)callback == -100) {\u000a                    /* WARNING: Could not recover jumptable at 0x0040e55d. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a    iVar1 = (*(code *)usercontext)();\u000a    return iVar1;\u000a  }\u000a  iVar1 = save_cwd(&sStack40);\u000a  if (iVar1 == 0) {\u000a    iVar1 = fchdir((int)callback);\u000a    if (iVar1 == 0) {\u000a      iVar2 = (*(code *)usercontext)();\u000a      iVar1 = 0;\u000a      if (iVar2 < 0) {\u000a        piVar4 = __errno_location();\u000a        iVar1 = *piVar4;\u000a      }\u000a      iVar3 = restore_cwd(&sStack40);\u000a      if (iVar3 != 0) goto LAB_0040e5df;\u000a      free_cwd(&sStack40);\u000a      if (iVar1 != 0) {\u000a        piVar4 = __errno_location();\u000a        *piVar4 = iVar1;\u000a      }\u000a    }\u000a    else {\u000a      piVar4 = __errno_location();\u000a      iVar1 = *piVar4;\u000a      free_cwd(&sStack40);\u000a      *piVar4 = iVar1;\u000a      iVar2 = -1;\u000a    }\u000a    return iVar2;\u000a  }\u000a  puVar5 = (uint *)__errno_location();\u000a  openat_save_fail((ulong)*puVar5);\u000aLAB_0040e5df:\u000a  puVar5 = (uint *)__errno_location();\u000a                    /* WARNING: Subroutine does not return */\u000a  openat_restore_fail((ulong)*puVar5);\u000a}\u000a\u000a
p752
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV RBX,RDX\nMOV EBP,EDI\nCMP EBP,-0x64\nJNZ 0x0040e55f\nMOV RDI,RBX\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP RBP\nJMP RSI\nMOV R14,RSI\nMOV RDI,RSP\nCALL 0x004169a0\nTEST EAX,EAX\nJNZ 0x0040e5d3\nMOV EDI,EBP\nCALL 0x00402d10\nTEST EAX,EAX\nJZ 0x0040e594\nCALL 0x00402770\nMOV RBX,RAX\nMOV EBP,dword ptr [RBX]\nMOV RDI,RSP\nCALL 0x00416a10\nMOV dword ptr [RBX],EBP\nMOV EBX,0xffffffff\nJMP 0x0040e5c8\nMOV RDI,RBX\nCALL R14\nMOV EBX,EAX\nXOR EBP,EBP\nTEST EBX,EBX\nJNS 0x0040e5a9\nCALL 0x00402770\nMOV EBP,dword ptr [RAX]\nMOV RDI,RSP\nCALL 0x004169f0\nTEST EAX,EAX\nJNZ 0x0040e5df\nMOV RDI,RSP\nCALL 0x00416a10\nTEST EBP,EBP\nJZ 0x0040e5c8\nCALL 0x00402770\nMOV dword ptr [RAX],EBP\nMOV EAX,EBX\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP RBP\nRET\nCALL 0x00402770\nMOV EDI,dword ptr [RAX]\nCALL 0x00413210\nCALL 0x00402770\nMOV EDI,dword ptr [RAX]\nCALL 0x00413250\n'
p753
S'55\n41 56\n53\n48 83 ec 10\n48 89 d3\n89 fd\n83 fd 9c\n75 0d\n48 89 df\n48 83 c4 10\n5b\n41 5e\n5d\nff e6\n49 89 f6\n48 89 e7\ne8 36 84 00 00\n85 c0\n75 65\n89 ef\ne8 9b 47 ff ff\n85 c0\n74 1b\ne8 f2 41 ff ff\n48 89 c3\n8b 2b\n48 89 e7\ne8 85 84 00 00\n89 2b\nbb ff ff ff ff\neb 34\n48 89 df\n41 ff d6\n89 c3\n31 ed\n85 db\n79 07\ne8 c9 41 ff ff\n8b 28\n48 89 e7\ne8 3f 84 00 00\n85 c0\n75 2a\n48 89 e7\ne8 53 84 00 00\n85 ed\n74 07\ne8 aa 41 ff ff\n89 28\n89 d8\n48 83 c4 10\n5b\n41 5e\n5d\nc3\ne8 98 41 ff ff\n8b 38\ne8 31 4c 00 00\ne8 8c 41 ff ff\n8b 38\ne8 65 4c 00 00\n'
p754
S'.text:000000000040e540\n.text:000000000040e541\n.text:000000000040e543\n.text:000000000040e544\n.text:000000000040e548\n.text:000000000040e54b\n.text:000000000040e54d\n.text:000000000040e550\n.text:000000000040e552\n.text:000000000040e555\n.text:000000000040e559\n.text:000000000040e55a\n.text:000000000040e55c\n.text:000000000040e55d\n.text:000000000040e55f\n.text:000000000040e562\n.text:000000000040e565\n.text:000000000040e56a\n.text:000000000040e56c\n.text:000000000040e56e\n.text:000000000040e570\n.text:000000000040e575\n.text:000000000040e577\n.text:000000000040e579\n.text:000000000040e57e\n.text:000000000040e581\n.text:000000000040e583\n.text:000000000040e586\n.text:000000000040e58b\n.text:000000000040e58d\n.text:000000000040e592\n.text:000000000040e594\n.text:000000000040e597\n.text:000000000040e59a\n.text:000000000040e59c\n.text:000000000040e59e\n.text:000000000040e5a0\n.text:000000000040e5a2\n.text:000000000040e5a7\n.text:000000000040e5a9\n.text:000000000040e5ac\n.text:000000000040e5b1\n.text:000000000040e5b3\n.text:000000000040e5b5\n.text:000000000040e5b8\n.text:000000000040e5bd\n.text:000000000040e5bf\n.text:000000000040e5c1\n.text:000000000040e5c6\n.text:000000000040e5c8\n.text:000000000040e5ca\n.text:000000000040e5ce\n.text:000000000040e5cf\n.text:000000000040e5d1\n.text:000000000040e5d2\n.text:000000000040e5d3\n.text:000000000040e5d8\n.text:000000000040e5da\n.text:000000000040e5df\n.text:000000000040e5e4\n.text:000000000040e5e6\n'
p755
tp756
sS'pred_timewindow'
p757
(S'\n__stdcall pred_timewindow(predicate * pred_ptr)\n'
p758
V\u000a_Bool pred_timewindow(predicate *pred_ptr)\u000a\u000a{\u000a  bool bVar1;\u000a  int iVar2;\u000a  int in_ECX;\u000a  long in_RDX;\u000a  double dVar3;\u000a  \u000a  iVar2 = *(int *)(in_RDX + 0x3c);\u000a  if (iVar2 == 2) {\u000a    dVar3 = ts_difference();\u000a    bVar1 = dVar3 <= (double)in_ECX && 0.00000000 < dVar3;\u000a  }\u000a  else {\u000a    if (iVar2 == 1) {\u000a      iVar2 = compare_ts();\u000a      bVar1 = SUB41((uint)iVar2 >> 0x1f,0);\u000a    }\u000a    else {\u000a      if (iVar2 != 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("0","pred.c",0xd6,\u000a                      "_Bool pred_timewindow(struct timespec, const struct predicate *, int)");\u000a      }\u000a      iVar2 = compare_ts();\u000a      bVar1 = 0 < iVar2;\u000a    }\u000a  }\u000a  return (_Bool)bVar1;\u000a}\u000a\u000a
p759
S'PUSH RBX\nMOV EBX,ECX\nMOV EAX,dword ptr [RDX + 0x3c]\nCMP EAX,0x2\nJZ 0x00404a5b\nCMP EAX,0x1\nJZ 0x00404a87\nTEST EAX,EAX\nJNZ 0x00404a9c\nMOV RAX,qword ptr [RDX + 0x40]\nMOV RCX,qword ptr [RDX + 0x48]\nMOV RDX,RAX\nCALL 0x00404ac0\nTEST EAX,EAX\nSETG AL\nJMP 0x00404a9a\nMOV RAX,qword ptr [RDX + 0x40]\nMOV RCX,qword ptr [RDX + 0x48]\nMOV RDX,RAX\nCALL 0x00405150\nXORPS XMM1,XMM1\nUCOMISD XMM0,XMM1\nSETA CL\nXORPS XMM1,XMM1\nCVTSI2SD XMM1,EBX\nUCOMISD XMM1,XMM0\nSETNC AL\nAND AL,CL\nJMP 0x00404a9a\nMOV RAX,qword ptr [RDX + 0x40]\nMOV RCX,qword ptr [RDX + 0x48]\nMOV RDX,RAX\nCALL 0x00404ac0\nSHR EAX,0x1f\nPOP RBX\nRET\nMOV EDI,0x41cdbe\nMOV ESI,0x41cd0c\nMOV EDX,0xd6\nMOV ECX,0x41d136\nCALL 0x00402a40\n'
p760
S'53\n89 cb\n8b 42 3c\n83 f8 02\n74 20\n83 f8 01\n74 47\n85 c0\n75 58\n48 8b 42 40\n48 8b 4a 48\n48 89 c2\ne8 6c 00 00 00\n85 c0\n0f 9f c0\neb 3f\n48 8b 42 40\n48 8b 4a 48\n48 89 c2\ne8 e5 06 00 00\n0f 57 c9\n66 0f 2e c1\n0f 97 c1\n0f 57 c9\nf2 0f 2a cb\n66 0f 2e c8\n0f 93 c0\n20 c8\neb 13\n48 8b 42 40\n48 8b 4a 48\n48 89 c2\ne8 29 00 00 00\nc1 e8 1f\n5b\nc3\nbf be cd 41 00\nbe 0c cd 41 00\nba d6 00 00 00\nb9 36 d1 41 00\ne8 8b df ff ff\n'
p761
S'.text:0000000000404a30\n.text:0000000000404a31\n.text:0000000000404a33\n.text:0000000000404a36\n.text:0000000000404a39\n.text:0000000000404a3b\n.text:0000000000404a3e\n.text:0000000000404a40\n.text:0000000000404a42\n.text:0000000000404a44\n.text:0000000000404a48\n.text:0000000000404a4c\n.text:0000000000404a4f\n.text:0000000000404a54\n.text:0000000000404a56\n.text:0000000000404a59\n.text:0000000000404a5b\n.text:0000000000404a5f\n.text:0000000000404a63\n.text:0000000000404a66\n.text:0000000000404a6b\n.text:0000000000404a6e\n.text:0000000000404a72\n.text:0000000000404a75\n.text:0000000000404a78\n.text:0000000000404a7c\n.text:0000000000404a80\n.text:0000000000404a83\n.text:0000000000404a85\n.text:0000000000404a87\n.text:0000000000404a8b\n.text:0000000000404a8f\n.text:0000000000404a92\n.text:0000000000404a97\n.text:0000000000404a9a\n.text:0000000000404a9b\n.text:0000000000404a9c\n.text:0000000000404aa1\n.text:0000000000404aa6\n.text:0000000000404aab\n.text:0000000000404ab0\n'
p762
tp763
sS'string_to_security_class'
p764
(S'\n__stdcall string_to_security_class(char * name)\n'
p765
V\u000asecurity_class_t string_to_security_class(char *name)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return 0;\u000a}\u000a\u000a
p766
S'PUSH RAX\nCALL 0x00402770\nMOV dword ptr [RAX],0x5f\nXOR EAX,EAX\nPOP RCX\nRET\n'
p767
S'50\ne8 6a bb fe ff\nc7 00 5f 00 00 00\n31 c0\n59\nc3\n'
p768
S'.text:0000000000416c00\n.text:0000000000416c01\n.text:0000000000416c06\n.text:0000000000416c0c\n.text:0000000000416c0e\n.text:0000000000416c0f\n'
p769
tp770
sS'parse_inum'
p771
(S'\n__stdcall parse_inum(parser_table * entry, char * * argv, int * arg_ptr)\n'
p772
V\u000a_Bool parse_inum(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  predicate *ppVar1;\u000a  \u000a  ppVar1 = insert_num(argv,arg_ptr,entry);\u000a  if (ppVar1 == (predicate *)0x0) {\u000a    *arg_ptr = *arg_ptr + -1;\u000a  }\u000a  else {\u000a    ppVar1->est_success_rate = 0.00000100;\u000a    ppVar1->need_inum = true;\u000a    *(undefined2 *)&ppVar1->need_stat = 0;\u000a  }\u000a  return (_Bool)(ppVar1 != (predicate *)0x0);\u000a}\u000a\u000a
p773
S'PUSH RBX\nMOV RBX,RDX\nMOV RAX,RDI\nMOV RDI,RSI\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x0040d2f0\nTEST RAX,RAX\nJZ 0x0040b98f\nMOV dword ptr [RAX + 0x24],0x358637bd\nMOV byte ptr [RAX + 0x1c],0x1\nMOV word ptr [RAX + 0x1a],0x0\nMOV AL,0x1\nJMP 0x0040b993\nDEC dword ptr [RBX]\nXOR EAX,EAX\nPOP RBX\nRET\n'
p774
S'53\n48 89 d3\n48 89 f8\n48 89 f7\n48 89 de\n48 89 c2\ne8 7b 19 00 00\n48 85 c0\n74 15\nc7 40 24 bd 37 86 35\nc6 40 1c 01\n66 c7 40 1a 00 00\nb0 01\neb 04\nff 0b\n31 c0\n5b\nc3\n'
p775
S'.text:000000000040b960\n.text:000000000040b961\n.text:000000000040b964\n.text:000000000040b967\n.text:000000000040b96a\n.text:000000000040b96d\n.text:000000000040b970\n.text:000000000040b975\n.text:000000000040b978\n.text:000000000040b97a\n.text:000000000040b981\n.text:000000000040b985\n.text:000000000040b98b\n.text:000000000040b98d\n.text:000000000040b98f\n.text:000000000040b991\n.text:000000000040b993\n.text:000000000040b994\n'
p776
tp777
sS'get_max_fd'
p778
(S'\n__stdcall get_max_fd()\n'
p779
V\u000aint get_max_fd(void)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  rlimit local_18;\u000a  \u000a  iVar1 = get_proc_max_fd();\u000a  if (iVar1 < 0) {\u000a    lVar3 = sysconf(4);\u000a    iVar1 = 0x14;\u000a    if (lVar3 != -1) {\u000a      iVar1 = (int)lVar3;\u000a    }\u000a    iVar2 = getrlimit(RLIMIT_NOFILE,&local_18);\u000a    if ((iVar2 == 0) && (local_18.rlim_cur != 0xffffffffffffffff)) {\u000a      iVar1 = (int)local_18.rlim_cur;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p780
S'PUSH RBX\nSUB RSP,0x10\nCALL 0x0040eb20\nMOV EBX,EAX\nTEST EBX,EBX\nJNS 0x0040e794\nMOV EDI,0x4\nCALL 0x00402e00\nCMP RAX,-0x1\nMOV EBX,0x14\nCMOVNZ RBX,RAX\nMOV RSI,RSP\nMOV EDI,0x7\nCALL 0x00402ef0\nTEST EAX,EAX\nJNZ 0x0040e794\nMOV RAX,qword ptr [RSP]\nCMP RAX,-0x1\nJZ 0x0040e794\nMOV EBX,EAX\nMOV EAX,EBX\nADD RSP,0x10\nPOP RBX\nRET\n'
p781
S'53\n48 83 ec 10\ne8 c6 03 00 00\n89 c3\n85 db\n79 34\nbf 04 00 00 00\ne8 96 46 ff ff\n48 83 f8 ff\nbb 14 00 00 00\n48 0f 45 d8\n48 89 e6\nbf 07 00 00 00\ne8 6c 47 ff ff\n85 c0\n75 0c\n48 8b 04 24\n48 83 f8 ff\n74 02\n89 c3\n89 d8\n48 83 c4 10\n5b\nc3\n'
p782
S'.text:000000000040e750\n.text:000000000040e751\n.text:000000000040e755\n.text:000000000040e75a\n.text:000000000040e75c\n.text:000000000040e75e\n.text:000000000040e760\n.text:000000000040e765\n.text:000000000040e76a\n.text:000000000040e76e\n.text:000000000040e773\n.text:000000000040e777\n.text:000000000040e77a\n.text:000000000040e77f\n.text:000000000040e784\n.text:000000000040e786\n.text:000000000040e788\n.text:000000000040e78c\n.text:000000000040e790\n.text:000000000040e792\n.text:000000000040e794\n.text:000000000040e796\n.text:000000000040e79a\n.text:000000000040e79b\n'
p783
tp784
sS'nonfatal_nontarget_file_error'
p785
(S'\n__stdcall nonfatal_nontarget_file_error(char * name)\n'
p786
V\u000avoid nonfatal_nontarget_file_error(char *name)\u000a\u000a{\u000a  report_file_err((char *)0x0);\u000a  return;\u000a}\u000a\u000a
p787
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nXOR EDX,EDX\nMOV ESI,ECX\nMOV RCX,RAX\nJMP 0x00408940\n'
p788
S'48 89 f0\n89 f9\n31 ff\n31 d2\n89 ce\n48 89 c1\ne9 3d 09 00 00\n'
p789
S'.text:0000000000407ff0\n.text:0000000000407ff3\n.text:0000000000407ff5\n.text:0000000000407ff7\n.text:0000000000407ff9\n.text:0000000000407ffb\n.text:0000000000407ffe\n'
p790
tp791
sS'get_stat_atime_ns'
p792
(S'\n__stdcall get_stat_atime_ns(stat * st)\n'
p793
V\u000along get_stat_atime_ns(stat *st)\u000a\u000a{\u000a  return (st->st_atim).tv_nsec;\u000a}\u000a\u000a
p794
S'MOV RAX,qword ptr [RDI + 0x50]\nRET\n'
p795
S'48 8b 47 50\nc3\n'
p796
S'.text:0000000000416c30\n.text:0000000000416c34\n'
p797
tp798
sS'pred_context'
p799
(S'\n__stdcall pred_context(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p800
V\u000a_Bool pred_context(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  char *in_RAX;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  bool bVar6;\u000a  char *local_28;\u000a  \u000a  local_28 = in_RAX;\u000a  iVar2 = (*options.x_getfilecon)(state.cwd_dir_fd,state.rel_pathname,&local_28);\u000a  if (iVar2 < 0) {\u000a    puVar3 = (uint *)__errno_location();\u000a    uVar1 = *puVar3;\u000a    bVar6 = false;\u000a    uVar4 = dcgettext(0,"getfilecon failed: %s",5);\u000a    pcVar5 = safely_quote_err_filename((char *)0x0);\u000a    error(0,(ulong)uVar1,uVar4,pcVar5);\u000a  }\u000a  else {\u000a    iVar2 = fnmatch(*(char **)pred_ptr->args,local_28,0);\u000a    bVar6 = iVar2 == 0;\u000a    freecon(local_28);\u000a  }\u000a  return (_Bool)bVar6;\u000a}\u000a\u000a
p801
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV R14,RDI\nMOV EDI,dword ptr [0x0062f018]\nMOV RSI,qword ptr [0x0062f010]\nMOV RDX,RSP\nCALL qword ptr [0x0062f0a0]\nTEST EAX,EAX\nJS 0x004049e6\nMOV RDI,qword ptr [RBX + 0x38]\nMOV RSI,qword ptr [RSP]\nXOR EDX,EDX\nCALL 0x00402a60\nTEST EAX,EAX\nSETZ BL\nMOV RDI,qword ptr [RSP]\nCALL 0x00416a50\nJMP 0x00404a20\nCALL 0x00402770\nMOV R15D,dword ptr [RAX]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x41cf7d\nMOV EDX,0x5\nCALL 0x00402910\nMOV RBP,RAX\nXOR EDI,EDI\nMOV RSI,R14\nCALL 0x00408920\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,RBP\nCALL 0x00402d90\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p802
S'55\n41 57\n41 56\n53\n50\n48 89 d3\n49 89 fe\n8b 3d 65 a6 22 00\n48 8b 35 56 a6 22 00\n48 89 e2\nff 15 dd a6 22 00\n85 c0\n78 1f\n48 8b 7b 38\n48 8b 34 24\n31 d2\ne8 8a e0 ff ff\n85 c0\n0f 94 c3\n48 8b 3c 24\ne8 6c 20 01 00\neb 3a\ne8 85 dd ff ff\n44 8b 38\n31 db\n31 ff\nbe 7d cf 41 00\nba 05 00 00 00\ne8 0f df ff ff\n48 89 c5\n31 ff\n4c 89 f6\ne8 12 3f 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 fe\n48 89 ea\ne8 70 e3 ff ff\n89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p803
S'.text:00000000004049a0\n.text:00000000004049a1\n.text:00000000004049a3\n.text:00000000004049a5\n.text:00000000004049a6\n.text:00000000004049a7\n.text:00000000004049aa\n.text:00000000004049ad\n.text:00000000004049b3\n.text:00000000004049ba\n.text:00000000004049bd\n.text:00000000004049c3\n.text:00000000004049c5\n.text:00000000004049c7\n.text:00000000004049cb\n.text:00000000004049cf\n.text:00000000004049d1\n.text:00000000004049d6\n.text:00000000004049d8\n.text:00000000004049db\n.text:00000000004049df\n.text:00000000004049e4\n.text:00000000004049e6\n.text:00000000004049eb\n.text:00000000004049ee\n.text:00000000004049f0\n.text:00000000004049f2\n.text:00000000004049f7\n.text:00000000004049fc\n.text:0000000000404a01\n.text:0000000000404a04\n.text:0000000000404a06\n.text:0000000000404a09\n.text:0000000000404a0e\n.text:0000000000404a11\n.text:0000000000404a13\n.text:0000000000404a15\n.text:0000000000404a18\n.text:0000000000404a1b\n.text:0000000000404a20\n.text:0000000000404a22\n.text:0000000000404a26\n.text:0000000000404a27\n.text:0000000000404a29\n.text:0000000000404a2b\n.text:0000000000404a2c\n'
p804
tp805
sS'set_fstype_devno'
p806
(S'\n__stdcall set_fstype_devno(mount_entry * p)\n'
p807
V\u000aint set_fstype_devno(mount_entry *p)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  stat stbuf;\u000a  stat local_a0;\u000a  \u000a  iVar1 = 0;\u000a  if (p->me_dev == 0xffffffffffffffff) {\u000a    set_stat_placeholders(&local_a0);\u000a    iVar2 = (*options.xstat)(p->me_mountdir,&local_a0);\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      p->me_dev = local_a0.st_dev;\u000a      iVar1 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p808
S'PUSH R14\nPUSH RBX\nSUB RSP,0x98\nMOV RBX,RDI\nXOR EAX,EAX\nCMP qword ptr [RBX + 0x20],-0x1\nJNZ 0x0040a5f6\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x004079d0\nMOV RDI,qword ptr [RBX + 0x8]\nMOV RSI,R14\nCALL qword ptr [0x0062f090]\nMOV ECX,EAX\nMOV EAX,0xffffffff\nTEST ECX,ECX\nJNZ 0x0040a5f6\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [RBX + 0x20],RAX\nXOR EAX,EAX\nADD RSP,0x98\nPOP RBX\nPOP R14\nRET\n'
p809
S'41 56\n53\n48 81 ec 98 00 00 00\n48 89 fb\n31 c0\n48 83 7b 20 ff\n75 30\n4c 8d 74 24 08\n4c 89 f7\ne8 fd d3 ff ff\n48 8b 7b 08\n4c 89 f6\nff 15 b0 4a 22 00\n89 c1\nb8 ff ff ff ff\n85 c9\n75 0b\n48 8b 44 24 08\n48 89 43 20\n31 c0\n48 81 c4 98 00 00 00\n5b\n41 5e\nc3\n'
p810
S'.text:000000000040a5b0\n.text:000000000040a5b2\n.text:000000000040a5b3\n.text:000000000040a5ba\n.text:000000000040a5bd\n.text:000000000040a5bf\n.text:000000000040a5c4\n.text:000000000040a5c6\n.text:000000000040a5cb\n.text:000000000040a5ce\n.text:000000000040a5d3\n.text:000000000040a5d7\n.text:000000000040a5da\n.text:000000000040a5e0\n.text:000000000040a5e2\n.text:000000000040a5e7\n.text:000000000040a5e9\n.text:000000000040a5eb\n.text:000000000040a5f0\n.text:000000000040a5f4\n.text:000000000040a5f6\n.text:000000000040a5fd\n.text:000000000040a5fe\n.text:000000000040a600\n'
p811
tp812
sS'hash_get_next'
p813
(S'\n__stdcall hash_get_next(Hash_table * table, void * entry)\n'
p814
V\u000avoid * hash_get_next(Hash_table *table,void *entry)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  hash_entry *phVar2;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar2 = safe_hasher(table,entry);\u000a  phVar3 = phVar2;\u000a  while( true ) {\u000a    phVar1 = phVar3->next;\u000a    if ((phVar3->data == entry) && (phVar1 != (hash_entry *)0x0)) break;\u000a    phVar3 = phVar1;\u000a    if (phVar1 == (hash_entry *)0x0) {\u000a      do {\u000a        phVar2 = phVar2 + 1;\u000a        if (table->bucket_limit <= phVar2) {\u000a          return (void *)0x0;\u000a        }\u000a      } while (phVar2->data == (void *)0x0);\u000a      return phVar2->data;\u000a    }\u000a  }\u000a  return phVar1->data;\u000a}\u000a\u000a
p815
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nCALL 0x004105e0\nMOV RCX,RAX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RSI,RCX\nMOV RCX,qword ptr [RSI + 0x8]\nTEST RCX,RCX\nSETZ DL\nCMP qword ptr [RSI],RBX\nJNZ 0x00410686\nTEST DL,DL\nJZ 0x004106b3\nTEST RCX,RCX\nJNZ 0x00410670\nMOV RDX,qword ptr [R14 + 0x8]\nADD RAX,0x10\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP RAX,RDX\nJNC 0x004106b8\nMOV RCX,qword ptr [RAX]\nADD RAX,0x10\nTEST RCX,RCX\nJZ 0x004106a0\nJMP 0x004106ba\nMOV RCX,qword ptr [RCX]\nJMP 0x004106ba\nXOR ECX,ECX\nMOV RAX,RCX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p816
S'41 56\n53\n50\n48 89 f3\n49 89 fe\ne8 81 ff ff ff\n48 89 c1\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 ce\n48 8b 4e 08\n48 85 c9\n0f 94 c2\n48 39 1e\n75 04\n84 d2\n74 2d\n48 85 c9\n75 e5\n49 8b 56 08\n48 83 c0 10\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 39 d0\n73 13\n48 8b 08\n48 83 c0 10\n48 85 c9\n74 ef\neb 07\n48 8b 09\neb 02\n31 c9\n48 89 c8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p817
S'.text:0000000000410650\n.text:0000000000410652\n.text:0000000000410653\n.text:0000000000410654\n.text:0000000000410657\n.text:000000000041065a\n.text:000000000041065f\n.text:0000000000410662\n.text:0000000000410670\n.text:0000000000410673\n.text:0000000000410677\n.text:000000000041067a\n.text:000000000041067d\n.text:0000000000410680\n.text:0000000000410682\n.text:0000000000410684\n.text:0000000000410686\n.text:0000000000410689\n.text:000000000041068b\n.text:000000000041068f\n.text:0000000000410693\n.text:00000000004106a0\n.text:00000000004106a3\n.text:00000000004106a5\n.text:00000000004106a8\n.text:00000000004106ac\n.text:00000000004106af\n.text:00000000004106b1\n.text:00000000004106b3\n.text:00000000004106b6\n.text:00000000004106b8\n.text:00000000004106ba\n.text:00000000004106bd\n.text:00000000004106c1\n.text:00000000004106c2\n.text:00000000004106c4\n'
p818
tp819
sS'rotr_sz'
p820
(S'\n__stdcall rotr_sz(size_t x)\n'
p821
V\u000asize_t rotr_sz(size_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x >> bVar1 | x << 0x40 - bVar1;\u000a}\u000a\u000a
p822
S'MOV ECX,ESI\nROR RDI,CL\nMOV RAX,RDI\nRET\n'
p823
S'89 f1\n48 d3 cf\n48 89 f8\nc3\n'
p824
S'.text:000000000041b8b0\n.text:000000000041b8b2\n.text:000000000041b8b5\n.text:000000000041b8b8\n'
p825
tp826
sS'mode_compile'
p827
(S'\n__stdcall mode_compile(char * mode_string)\n'
p828
V\u000amode_change * mode_compile(char *mode_string)\u000a\u000a{\u000a  byte *pbVar1;\u000a  char cVar2;\u000a  byte bVar3;\u000a  char cVar4;\u000a  uint uVar5;\u000a  uint uVar6;\u000a  mode_change *__ptr;\u000a  char *pcVar7;\u000a  uint uVar8;\u000a  long lVar9;\u000a  char cVar10;\u000a  mode_t mVar11;\u000a  size_t n;\u000a  long lVar12;\u000a  undefined auStack56 [8];\u000a  \u000a  if ((*mode_string & 0xf8U) == 0x30) {\u000a    uVar8 = 0;\u000a    do {\u000a      uVar8 = (int)*mode_string + -0x30 + uVar8 * 8;\u000a      if (0xfff < uVar8) {\u000a        return (mode_change *)0x0;\u000a      }\u000a      pbVar1 = (byte *)(mode_string + 1);\u000a      mode_string = mode_string + 1;\u000a    } while ((*pbVar1 & 0xf8) == 0x30);\u000a    if (*pbVar1 != 0) {\u000a      return (mode_change *)0x0;\u000a    }\u000a    octal_to_mode();\u000a    __ptr = make_node_op_equals();\u000a    return __ptr;\u000a  }\u000a  n = 1;\u000a  pcVar7 = mode_string;\u000a  do {\u000a    cVar2 = *pcVar7;\u000a    if (cVar2 < '-') {\u000a      lVar9 = 1;\u000a      if (cVar2 != '+') {\u000a        if (cVar2 == 0) break;\u000aLAB_00412e0e:\u000a        lVar9 = 0;\u000a      }\u000a    }\u000a    else {\u000a      if (cVar2 == '-') {\u000a        lVar9 = 1;\u000a      }\u000a      else {\u000a        lVar9 = 1;\u000a        if (cVar2 != '=') goto LAB_00412e0e;\u000a      }\u000a    }\u000a    n = n + lVar9;\u000a    pcVar7 = pcVar7 + 1;\u000a  } while( true );\u000a  __ptr = (mode_change *)xnmalloc(n,0x10);\u000a  lVar9 = 0;\u000aLAB_00412e50:\u000a  uVar8 = 0;\u000a  while (uVar5 = SEXT14(*mode_string), uVar5 - 0x61 < 0x15) {\u000a    uVar6 = 0x438;\u000a    switch(uVar5) {\u000a    case 0x61:\u000a      uVar6 = 0xfff;\u000a      break;\u000a    default:\u000a      goto switchD_00412e76_caseD_62;\u000a    case 0x67:\u000a      break;\u000a    case 0x6f:\u000a      uVar6 = 0x207;\u000a      break;\u000a    case 0x75:\u000a      uVar6 = 0x9c0;\u000a    }\u000a    uVar8 = uVar8 | uVar6;\u000a    mode_string = mode_string + 1;\u000a  }\u000a  if ((0x3d < uVar5) || (lVar12 = lVar9, ((ulong)auStack56 >> ((ulong)uVar5 & 0x1f) & 1) == 0)) {\u000aswitchD_00412e76_caseD_62:\u000a    free(__ptr);\u000a    return (mode_change *)0x0;\u000a  }\u000aswitchD_0041300b_caseD_2b:\u000a  pcVar7 = mode_string + 1;\u000a  cVar2 = *mode_string;\u000a  switch(mode_string[1]) {\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a    uVar5 = 0;\u000a    do {\u000a      uVar5 = (int)*pcVar7 + -0x30 + uVar5 * 8;\u000a      if (0xfff < uVar5) goto switchD_00412e76_caseD_62;\u000a      bVar3 = pcVar7[1];\u000a      pcVar7 = pcVar7 + 1;\u000a    } while ((bVar3 & 0xf8) == 0x30);\u000a    if ((uVar8 == 0) && ((bVar3 == 0x2c || (bVar3 == 0)))) {\u000a      uVar5 = octal_to_mode();\u000a      cVar10 = 1;\u000a      uVar8 = 0xfff;\u000a      mVar11 = 0xfff;\u000a      break;\u000a    }\u000a    goto switchD_00412e76_caseD_62;\u000a  default:\u000a    cVar10 = 1;\u000a    uVar5 = 0;\u000a    do {\u000a      cVar4 = 2;\u000a      switch(*pcVar7) {\u000a      case 'r':\u000a        uVar5 = uVar5 | 0x124;\u000a        cVar4 = cVar10;\u000a        break;\u000a      case 's':\u000a        uVar5 = uVar5 | 0xc00;\u000a        cVar4 = cVar10;\u000a        break;\u000a      case 't':\u000a        uVar5 = uVar5 | 0x200;\u000a        cVar4 = cVar10;\u000a        break;\u000a      case 'w':\u000a        uVar5 = uVar5 | 0x92;\u000a        cVar4 = cVar10;\u000a        break;\u000a      case 'x':\u000a        uVar5 = uVar5 | 0x49;\u000a        cVar4 = cVar10;\u000a        break;\u000a      default:\u000a        goto switchD_00412f62_caseD_59;\u000a      case 'X':\u000a        break;\u000a      }\u000a      cVar10 = cVar4;\u000a      pcVar7 = pcVar7 + 1;\u000a    } while( true );\u000a  case 'g':\u000a    pcVar7 = mode_string + 2;\u000a    cVar10 = 3;\u000a    mVar11 = 0;\u000a    uVar5 = 0x38;\u000a    break;\u000a  case 'o':\u000a    pcVar7 = mode_string + 2;\u000a    cVar10 = 3;\u000a    mVar11 = 0;\u000a    uVar5 = 7;\u000a    break;\u000a  case 'u':\u000a    pcVar7 = mode_string + 2;\u000a    cVar10 = 3;\u000a    mVar11 = 0;\u000a    uVar5 = 0x1c0;\u000a  }\u000a  goto LAB_00412fd0;\u000aswitchD_00412f62_caseD_59:\u000a  mVar11 = 0;\u000aLAB_00412fd0:\u000a  __ptr[lVar12].op = cVar2;\u000a  __ptr[lVar12].flag = cVar10;\u000a  __ptr[lVar12].affected = uVar8;\u000a  __ptr[lVar12].value = uVar5;\u000a  if (mVar11 == 0) {\u000a    mVar11 = (-(uint)(uVar8 == 0) | uVar8) & uVar5;\u000a  }\u000a  lVar9 = lVar12 + 1;\u000a  __ptr[lVar12].mentioned = mVar11;\u000a  mode_string = pcVar7;\u000a  lVar12 = lVar9;\u000a  switch(*pcVar7) {\u000a  case '+':\u000a  case '-':\u000a  case '=':\u000a    goto switchD_0041300b_caseD_2b;\u000a  case ',':\u000a    break;\u000a  default:\u000a    if (*pcVar7 == 0) {\u000a      __ptr[lVar9].flag = 0;\u000a      return __ptr;\u000a    }\u000a    goto switchD_00412e76_caseD_62;\u000a  }\u000a  mode_string = pcVar7 + 1;\u000a  goto LAB_00412e50;\u000a}\u000a\u000a
p829
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBP,RDI\nMOV AL,byte ptr [RBP]\nAND AL,0xf8\nCMP AL,0x30\nJNZ 0x00412dd3\nXOR R14D,R14D\nXOR EDI,EDI\nMOV RBX,RBP\nNOP\nMOVSX EAX,byte ptr [RBX]\nLEA EDI,[RAX + RDI*0x8 + -0x30]\nCMP EDI,0xfff\nJA 0x00413023\nMOVZX EAX,byte ptr [RBX + 0x1]\nINC RBX\nMOV ECX,EAX\nAND CL,0xf8\nCMP CL,0x30\nJZ 0x00412d70\nTEST AL,AL\nJNZ 0x00413020\nCALL 0x00413050\nSUB RBX,RBP\nMOV ECX,EAX\nAND ECX,0xc00\nOR ECX,0x3ff\nCMP RBX,0x5\nMOV ESI,0xfff\nCMOVL ESI,ECX\nMOV EDI,EAX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00413060\nMOV EDI,0x1\nMOV RAX,RBP\nJMP 0x00412de6\nADD RDI,RDX\nINC RAX\nMOVZX ECX,byte ptr [RAX]\nCMP CL,0x2c\nJLE 0x00412e00\nCMP CL,0x2d\nJZ 0x00412e20\nCMP CL,0x3d\nMOV EDX,0x1\nJZ 0x00412de0\nJMP 0x00412e0e\nCMP CL,0x2b\nMOV EDX,0x1\nJZ 0x00412de0\nTEST CL,CL\nJZ 0x00412e27\nXOR EDX,EDX\nJMP 0x00412de0\nMOV EDX,0x1\nJMP 0x00412de0\nMOV ESI,0x10\nCALL 0x00417200\nMOV R14,RAX\nXOR R15D,R15D\nMOV R12,0x2000280000000000\nJMP 0x00412e50\nINC RBP\nNOP word ptr CS:[RAX + RAX*0x1]\nXOR ECX,ECX\nJMP 0x00412e65\nOR ECX,EAX\nINC RBP\nMOVSX EAX,byte ptr [RBP]\nLEA EDX,[RAX + -0x61]\nCMP EDX,0x14\nJA 0x00412eb0\nMOV EAX,0x438\nJMP qword ptr [0x422cc8 + RDX*0x8]\nMOV EAX,0xfff\nJMP 0x00412e60\nMOV EAX,0x207\nJMP 0x00412e60\nMOV EAX,0x9c0\nJMP 0x00412e60\nCMP EAX,0x3d\nJA 0x00413018\nMOV EAX,EAX\nBT RSP,RAX\nJNC 0x00413018\nLEA RSI,[RBP + 0x1]\nMOV R13B,byte ptr [RBP]\nMOVSX EAX,byte ptr [RBP + 0x1]\nADD EAX,-0x30\nCMP EAX,0x45\nJA 0x00412f3f\nJMP qword ptr [0x422d70 + RAX*0x8]\nXOR EDI,EDI\nMOV RBP,RSI\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVSX EAX,byte ptr [RBP]\nLEA EDI,[RAX + RDI*0x8 + -0x30]\nCMP EDI,0xfff\nJA 0x00413018\nMOVZX EAX,byte ptr [RBP + 0x1]\nINC RBP\nMOV EDX,EAX\nAND DL,0xf8\nCMP DL,0x30\nJZ 0x00412ef0\nTEST ECX,ECX\nJNZ 0x00413018\nCMP AL,0x2c\nJZ 0x00412f29\nTEST AL,AL\nJNZ 0x00413018\nCALL 0x00413050\nMOV BL,0x1\nMOV ECX,0xfff\nMOV EDI,0xfff\nJMP 0x00412fd0\nMOV BL,0x1\nXOR EAX,EAX\nJMP 0x00412f55\nINC RSI\nMOV EBX,EDX\nMOVSX EDI,byte ptr [RSI]\nADD EDI,-0x58\nCMP EDI,0x20\nJA 0x00412fc1\nMOV DL,0x2\nJMP qword ptr [0x422fa0 + RDI*0x8]\nOR EAX,0x124\nJMP 0x00412f90\nOR EAX,0xc00\nJMP 0x00412f90\nOR EAX,0x200\nJMP 0x00412f90\nOR EAX,0x92\nJMP 0x00412f90\nOR EAX,0x49\nNOP dword ptr [RAX + RAX*0x1]\nMOV EDX,EBX\nJMP 0x00412f50\nADD RBP,0x2\nMOV BL,0x3\nXOR EDI,EDI\nMOV EAX,0x38\nJMP 0x00412fd0\nADD RBP,0x2\nMOV BL,0x3\nXOR EDI,EDI\nMOV EAX,0x7\nJMP 0x00412fd0\nADD RBP,0x2\nMOV BL,0x3\nXOR EDI,EDI\nMOV EAX,0x1c0\nJMP 0x00412fd0\nXOR EDI,EDI\nMOV RBP,RSI\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RSI,R15\nSHL RSI,0x4\nMOV byte ptr [R14 + RSI*0x1],R13B\nMOV byte ptr [R14 + RSI*0x1 + 0x1],BL\nMOV dword ptr [R14 + RSI*0x1 + 0x4],ECX\nMOV dword ptr [R14 + RSI*0x1 + 0x8],EAX\nTEST EDI,EDI\nJNZ 0x00412ff7\nCMP ECX,0x1\nSBB EDI,EDI\nOR EDI,ECX\nAND EDI,EAX\nINC R15\nMOV dword ptr [R14 + RSI*0x1 + 0xc],EDI\nMOV AL,byte ptr [RBP]\nADD AL,0xd5\nCMP AL,0x12\nJA 0x00413012\nMOVZX EAX,AL\nJMP qword ptr [0x4230a8 + RAX*0x8]\nCMP byte ptr [RBP],0x0\nJZ 0x00413035\nMOV RDI,R14\nCALL 0x00402710\nXOR R14D,R14D\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nSHL R15,0x4\nMOV byte ptr [R14 + R15*0x1 + 0x1],0x0\nJMP 0x00413023\n'
p830
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n48 89 fd\n8a 45 00\n24 f8\n3c 30\n75 6c\n45 31 f6\n31 ff\n48 89 eb\n90\n0f be 03\n8d 7c f8 d0\n81 ff ff 0f 00 00\n0f 87 a0 02 00 00\n0f b6 43 01\n48 ff c3\n89 c1\n80 e1 f8\n80 f9 30\n74 dc\n84 c0\n0f 85 84 02 00 00\ne8 af 02 00 00\n48 29 eb\n89 c1\n81 e1 00 0c 00 00\n81 c9 ff 03 00 00\n48 83 fb 05\nbe ff 0f 00 00\n0f 4c f1\n89 c7\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 8d 02 00 00\nbf 01 00 00 00\n48 89 e8\neb 09\n48 01 d7\n48 ff c0\n0f b6 08\n80 f9 2c\n7e 12\n80 f9 2d\n74 2d\n80 f9 3d\nba 01 00 00 00\n74 e3\neb 0f\n80 f9 2b\nba 01 00 00 00\n74 d6\n84 c9\n74 19\n31 d2\neb ce\nba 01 00 00 00\neb b9\nbe 10 00 00 00\ne8 cf 43 00 00\n49 89 c6\n45 31 ff\n49 bc 00 00 00 00 00 28 00 20\neb 0d\n48 ff c5\n66 2e 0f 1f 84 00 00 00 00 00\n31 c9\neb 11\n09 c1\n48 ff c5\n0f be 45 00\n8d 50 9f\n83 fa 14\n77 3f\nb8 38 04 00 00\nff 24 d5 c8 2c 42 00\nb8 ff 0f 00 00\neb dc\nb8 07 02 00 00\neb c9\nb8 c0 09 00 00\neb b9\n83 f8 3d\n0f 87 5f 01 00 00\n89 c0\n49 0f a3 c4\n0f 83 53 01 00 00\n48 8d 75 01\n44 8a 6d 00\n0f be 45 01\n83 c0 d0\n83 f8 45\n77 66\nff 24 c5 70 2d 42 00\n31 ff\n48 89 f5\n66 66 2e 0f 1f 84 00 00 00 00 00\n0f be 45 00\n8d 7c f8 d0\n81 ff ff 0f 00 00\n0f 87 14 01 00 00\n0f b6 45 01\n48 ff c5\n89 c2\n80 e2 f8\n80 fa 30\n74 db\n85 c9\n0f 85 fb 00 00 00\n3c 2c\n74 08\n84 c0\n0f 85 ef 00 00 00\ne8 22 01 00 00\nb3 01\nb9 ff 0f 00 00\nbf ff 0f 00 00\ne9 91 00 00 00\nb3 01\n31 c0\neb 10\n48 ff c6\n89 d3\n0f be 3e\n83 c7 a8\n83 ff 20\n77 61\nb2 02\nff 24 fd a0 2f 42 00\n0d 24 01 00 00\neb 20\n0d 00 0c 00 00\neb 19\n0d 00 02 00 00\neb 12\n0d 92 00 00 00\neb 0b\n83 c8 49\n0f 1f 84 00 00 00 00 00\n89 da\neb bc\n48 83 c5 02\nb3 03\n31 ff\nb8 38 00 00 00\neb 2d\n48 83 c5 02\nb3 03\n31 ff\nb8 07 00 00 00\neb 1e\n48 83 c5 02\nb3 03\n31 ff\nb8 c0 01 00 00\neb 0f\n31 ff\n48 89 f5\n66 2e 0f 1f 84 00 00 00 00 00\n4c 89 fe\n48 c1 e6 04\n45 88 2c 36\n41 88 5c 36 01\n41 89 4c 36 04\n41 89 44 36 08\n85 ff\n75 09\n83 f9 01\n19 ff\n09 cf\n21 c7\n49 ff c7\n41 89 7c 36 0c\n8a 45 00\n04 d5\n3c 12\n77 0a\n0f b6 c0\nff 24 c5 a8 30 42 00\n80 7d 00 00\n74 1d\n4c 89 f7\ne8 f0 f6 fe ff\n45 31 f6\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n49 c1 e7 04\n43 c6 44 3e 01 00\neb e2\n'
p831
S'.text:0000000000412d50\n.text:0000000000412d51\n.text:0000000000412d53\n.text:0000000000412d55\n.text:0000000000412d57\n.text:0000000000412d59\n.text:0000000000412d5a\n.text:0000000000412d5b\n.text:0000000000412d5e\n.text:0000000000412d61\n.text:0000000000412d63\n.text:0000000000412d65\n.text:0000000000412d67\n.text:0000000000412d6a\n.text:0000000000412d6c\n.text:0000000000412d6f\n.text:0000000000412d70\n.text:0000000000412d73\n.text:0000000000412d77\n.text:0000000000412d7d\n.text:0000000000412d83\n.text:0000000000412d87\n.text:0000000000412d8a\n.text:0000000000412d8c\n.text:0000000000412d8f\n.text:0000000000412d92\n.text:0000000000412d94\n.text:0000000000412d96\n.text:0000000000412d9c\n.text:0000000000412da1\n.text:0000000000412da4\n.text:0000000000412da6\n.text:0000000000412dac\n.text:0000000000412db2\n.text:0000000000412db6\n.text:0000000000412dbb\n.text:0000000000412dbe\n.text:0000000000412dc0\n.text:0000000000412dc4\n.text:0000000000412dc5\n.text:0000000000412dc7\n.text:0000000000412dc9\n.text:0000000000412dcb\n.text:0000000000412dcd\n.text:0000000000412dce\n.text:0000000000412dd3\n.text:0000000000412dd8\n.text:0000000000412ddb\n.text:0000000000412de0\n.text:0000000000412de3\n.text:0000000000412de6\n.text:0000000000412de9\n.text:0000000000412dec\n.text:0000000000412dee\n.text:0000000000412df1\n.text:0000000000412df3\n.text:0000000000412df6\n.text:0000000000412dfb\n.text:0000000000412dfd\n.text:0000000000412e00\n.text:0000000000412e03\n.text:0000000000412e08\n.text:0000000000412e0a\n.text:0000000000412e0c\n.text:0000000000412e0e\n.text:0000000000412e10\n.text:0000000000412e20\n.text:0000000000412e25\n.text:0000000000412e27\n.text:0000000000412e2c\n.text:0000000000412e31\n.text:0000000000412e34\n.text:0000000000412e37\n.text:0000000000412e41\n.text:0000000000412e43\n.text:0000000000412e46\n.text:0000000000412e50\n.text:0000000000412e52\n.text:0000000000412e60\n.text:0000000000412e62\n.text:0000000000412e65\n.text:0000000000412e69\n.text:0000000000412e6c\n.text:0000000000412e6f\n.text:0000000000412e71\n.text:0000000000412e76\n.text:0000000000412e7d\n.text:0000000000412e82\n.text:0000000000412e90\n.text:0000000000412e95\n.text:0000000000412ea0\n.text:0000000000412ea5\n.text:0000000000412eb0\n.text:0000000000412eb3\n.text:0000000000412eb9\n.text:0000000000412ebb\n.text:0000000000412ebf\n.text:0000000000412ec5\n.text:0000000000412ec9\n.text:0000000000412ecd\n.text:0000000000412ed1\n.text:0000000000412ed4\n.text:0000000000412ed7\n.text:0000000000412ed9\n.text:0000000000412ee0\n.text:0000000000412ee2\n.text:0000000000412ee5\n.text:0000000000412ef0\n.text:0000000000412ef4\n.text:0000000000412ef8\n.text:0000000000412efe\n.text:0000000000412f04\n.text:0000000000412f08\n.text:0000000000412f0b\n.text:0000000000412f0d\n.text:0000000000412f10\n.text:0000000000412f13\n.text:0000000000412f15\n.text:0000000000412f17\n.text:0000000000412f1d\n.text:0000000000412f1f\n.text:0000000000412f21\n.text:0000000000412f23\n.text:0000000000412f29\n.text:0000000000412f2e\n.text:0000000000412f30\n.text:0000000000412f35\n.text:0000000000412f3a\n.text:0000000000412f3f\n.text:0000000000412f41\n.text:0000000000412f43\n.text:0000000000412f50\n.text:0000000000412f53\n.text:0000000000412f55\n.text:0000000000412f58\n.text:0000000000412f5b\n.text:0000000000412f5e\n.text:0000000000412f60\n.text:0000000000412f62\n.text:0000000000412f69\n.text:0000000000412f6e\n.text:0000000000412f70\n.text:0000000000412f75\n.text:0000000000412f77\n.text:0000000000412f7c\n.text:0000000000412f7e\n.text:0000000000412f83\n.text:0000000000412f85\n.text:0000000000412f88\n.text:0000000000412f90\n.text:0000000000412f92\n.text:0000000000412f94\n.text:0000000000412f98\n.text:0000000000412f9a\n.text:0000000000412f9c\n.text:0000000000412fa1\n.text:0000000000412fa3\n.text:0000000000412fa7\n.text:0000000000412fa9\n.text:0000000000412fab\n.text:0000000000412fb0\n.text:0000000000412fb2\n.text:0000000000412fb6\n.text:0000000000412fb8\n.text:0000000000412fba\n.text:0000000000412fbf\n.text:0000000000412fc1\n.text:0000000000412fc3\n.text:0000000000412fc6\n.text:0000000000412fd0\n.text:0000000000412fd3\n.text:0000000000412fd7\n.text:0000000000412fdb\n.text:0000000000412fe0\n.text:0000000000412fe5\n.text:0000000000412fea\n.text:0000000000412fec\n.text:0000000000412fee\n.text:0000000000412ff1\n.text:0000000000412ff3\n.text:0000000000412ff5\n.text:0000000000412ff7\n.text:0000000000412ffa\n.text:0000000000412fff\n.text:0000000000413002\n.text:0000000000413004\n.text:0000000000413006\n.text:0000000000413008\n.text:000000000041300b\n.text:0000000000413012\n.text:0000000000413016\n.text:0000000000413018\n.text:000000000041301b\n.text:0000000000413020\n.text:0000000000413023\n.text:0000000000413026\n.text:000000000041302a\n.text:000000000041302b\n.text:000000000041302d\n.text:000000000041302f\n.text:0000000000413031\n.text:0000000000413033\n.text:0000000000413034\n.text:0000000000413035\n.text:0000000000413039\n.text:000000000041303f\n'
p832
tp833
sS'bc_argc_limit_reached'
p834
(S'\n__stdcall bc_argc_limit_reached(buildcmd_control * ctl, buildcmd_state * state)\n'
p835
V\u000aint bc_argc_limit_reached(buildcmd_control *ctl,buildcmd_state *state)\u000a\u000a{\u000a  uint uVar1;\u000a  size_t *in_RDX;\u000a  \u000a  if ((((int)ctl != 0) || (state[1].cmd_argc == 0)) ||\u000a     (uVar1 = 1, *in_RDX - *(long *)&state->todo != state[1].cmd_argc)) {\u000a    uVar1 = (uint)(*in_RDX == state->cmd_argv_chars);\u000a  }\u000a  return (int)uVar1;\u000a}\u000a\u000a
p836
S'TEST EDI,EDI\nJZ 0x0040e1c1\nMOV RCX,qword ptr [RDX]\nXOR EAX,EAX\nCMP RCX,qword ptr [RSI + 0x20]\nSETZ AL\nRET\nMOV RCX,qword ptr [RSI + 0x50]\nTEST RCX,RCX\nJZ 0x0040e1b4\nMOV RDI,qword ptr [RDX]\nSUB RDI,qword ptr [RSI + 0x38]\nMOV EAX,0x1\nCMP RDI,RCX\nJNZ 0x0040e1b4\nJMP 0x0040e1c0\n'
p837
S'85 ff\n74 0d\n48 8b 0a\n31 c0\n48 3b 4e 20\n0f 94 c0\nc3\n48 8b 4e 50\n48 85 c9\n74 ea\n48 8b 3a\n48 2b 7e 38\nb8 01 00 00 00\n48 39 cf\n75 d9\neb e3\n'
p838
S'.text:000000000040e1b0\n.text:000000000040e1b2\n.text:000000000040e1b4\n.text:000000000040e1b7\n.text:000000000040e1b9\n.text:000000000040e1bd\n.text:000000000040e1c0\n.text:000000000040e1c1\n.text:000000000040e1c5\n.text:000000000040e1c8\n.text:000000000040e1ca\n.text:000000000040e1cd\n.text:000000000040e1d1\n.text:000000000040e1d6\n.text:000000000040e1d9\n.text:000000000040e1db\n'
p839
tp840
sS'o_cloexec_works'
p841
(S'\n__stdcall o_cloexec_works()\n'
p842
V\u000a_Bool o_cloexec_works(void)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  bool bVar2;\u000a  \u000a  bVar2 = false;\u000a  __fd = open_safer("/",0x80000);\u000a  if (-1 < __fd) {\u000a    iVar1 = fd_is_cloexec();\u000a    bVar2 = iVar1 != 0;\u000a    close(__fd);\u000a  }\u000a  return (_Bool)bVar2;\u000a}\u000a\u000a
p843
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nXOR EBX,EBX\nMOV EDI,0x41d1f6\nMOV ESI,0x80000\nXOR EAX,EAX\nCALL 0x00410160\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0040ea1f\nMOV EDI,EBP\nCALL 0x0040ec20\nTEST EAX,EAX\nSETNZ BL\nMOV EDI,EBP\nCALL 0x00402ac0\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p844
S'55\n53\n50\n31 db\nbf f6 d1 41 00\nbe 00 00 08 00\n31 c0\ne8 5a 17 00 00\n89 c5\n85 ed\n78 13\n89 ef\ne8 0d 02 00 00\n85 c0\n0f 95 c3\n89 ef\ne8 a1 40 ff ff\n89 d8\n48 83 c4 08\n5b\n5d\nc3\n'
p845
S'.text:000000000040e9f0\n.text:000000000040e9f1\n.text:000000000040e9f2\n.text:000000000040e9f3\n.text:000000000040e9f5\n.text:000000000040e9fa\n.text:000000000040e9ff\n.text:000000000040ea01\n.text:000000000040ea06\n.text:000000000040ea08\n.text:000000000040ea0a\n.text:000000000040ea0c\n.text:000000000040ea0e\n.text:000000000040ea13\n.text:000000000040ea15\n.text:000000000040ea18\n.text:000000000040ea1a\n.text:000000000040ea1f\n.text:000000000040ea21\n.text:000000000040ea25\n.text:000000000040ea26\n.text:000000000040ea27\n'
p846
tp847
sS'xmemdup'
p848
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p849
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p850
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00417220\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00402bd0\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p851
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 4c b8 fe ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p852
S'.text:0000000000417360\n.text:0000000000417362\n.text:0000000000417364\n.text:0000000000417365\n.text:0000000000417368\n.text:000000000041736b\n.text:000000000041736e\n.text:0000000000417373\n.text:0000000000417376\n.text:0000000000417379\n.text:000000000041737c\n.text:000000000041737f\n.text:0000000000417384\n.text:0000000000417387\n.text:0000000000417388\n.text:000000000041738a\n.text:000000000041738c\n'
p853
tp854
sS're_set_syntax'
p855
(S'\n__stdcall re_set_syntax(reg_syntax_t __syntax)\n'
p856
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000areg_syntax_t re_set_syntax(reg_syntax_t __syntax)\u000a\u000a{\u000a  reg_syntax_t rVar1;\u000a  \u000a  rVar1 = (*(code *)PTR_re_set_syntax_0062d2c8)();\u000a  return rVar1;\u000a}\u000a\u000a
p857
S'JMP qword ptr [0x0062d2c8]\n'
p858
S'ff 25 72 a6 22 00\n'
p859
S'.plt:0000000000402c50\n'
p860
tp861
sS'exit'
p862
(S'\n__stdcall exit(int __status)\n'
p863
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_0062d408)();\u000a  return;\u000a}\u000a\u000a
p864
S'JMP qword ptr [0x0062d408]\n'
p865
S'ff 25 32 a5 22 00\n'
p866
S'.plt:0000000000402ed0\n'
p867
tp868
sS'xstrtod'
p869
(S'\n__stdcall xstrtod(char * str, char * * ptr, double * result, anon_subr_double_char_ptr_char_ptr_ptr * convert)\n'
p870
V\u000a_Bool xstrtod(char *str,char **ptr,double *result,double (*convert)(char *,char **))\u000a\u000a{\u000a  int *piVar1;\u000a  bool bVar2;\u000a  double dVar3;\u000a  char *local_30;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0;\u000a  dVar3 = (*convert)(str,&local_30);\u000a  if (local_30 == str) {\u000a    bVar2 = false;\u000a  }\u000a  else {\u000a    if ((ptr == (char **)0x0) && (*local_30 != 0)) {\u000a      bVar2 = false;\u000a      goto LAB_0041747e;\u000a    }\u000a    if (dVar3 == 0.00000000) {\u000a      bVar2 = true;\u000a    }\u000a    else {\u000a      bVar2 = *piVar1 != 0x22;\u000a    }\u000a  }\u000a  if (ptr != (char **)0x0) {\u000a    *ptr = local_30;\u000a  }\u000aLAB_0041747e:\u000a  *result = dVar3;\u000a  return (_Bool)bVar2;\u000a}\u000a\u000a
p871
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV R13,RCX\nMOV R14,RDX\nMOV R15,RSI\nMOV RBX,RDI\nCALL 0x00402770\nMOV R12,RAX\nMOV dword ptr [R12],0x0\nLEA RSI,[RSP + 0x8]\nMOV RDI,RBX\nCALL R13\nMOV RAX,qword ptr [RSP + 0x8]\nCMP RAX,RBX\nJZ 0x0041745d\nTEST R15,R15\nJZ 0x00417466\nXORPS XMM1,XMM1\nUCOMISD XMM0,XMM1\nJNZ 0x0041744e\nJNP 0x0041746f\nCMP dword ptr [R12],0x22\nSETNZ AL\nTEST R15,R15\nJNZ 0x00417476\nJMP 0x0041747e\nXOR EAX,EAX\nTEST R15,R15\nJNZ 0x00417476\nJMP 0x0041747e\nCMP byte ptr [RAX],0x0\nJZ 0x00417443\nXOR EAX,EAX\nJMP 0x0041747e\nMOV AL,0x1\nTEST R15,R15\nJZ 0x0041747e\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [R15],RCX\nMOVSD qword ptr [R14],XMM0\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p872
S'41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 10\n49 89 cd\n49 89 d6\n49 89 f7\n48 89 fb\ne8 52 b3 fe ff\n49 89 c4\n41 c7 04 24 00 00 00 00\n48 8d 74 24 08\n48 89 df\n41 ff d5\n48 8b 44 24 08\n48 39 d8\n74 1f\n4d 85 ff\n74 23\n0f 57 c9\n66 0f 2e c1\n75 02\n7b 21\n41 83 3c 24 22\n0f 95 c0\n4d 85 ff\n75 1b\neb 21\n31 c0\n4d 85 ff\n75 12\neb 18\n80 38 00\n74 d8\n31 c0\neb 0f\nb0 01\n4d 85 ff\n74 08\n48 8b 4c 24 08\n49 89 0f\nf2 41 0f 11 06\n48 83 c4 10\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p873
S'.text:0000000000417400\n.text:0000000000417402\n.text:0000000000417404\n.text:0000000000417406\n.text:0000000000417408\n.text:0000000000417409\n.text:000000000041740d\n.text:0000000000417410\n.text:0000000000417413\n.text:0000000000417416\n.text:0000000000417419\n.text:000000000041741e\n.text:0000000000417421\n.text:0000000000417429\n.text:000000000041742e\n.text:0000000000417431\n.text:0000000000417434\n.text:0000000000417439\n.text:000000000041743c\n.text:000000000041743e\n.text:0000000000417441\n.text:0000000000417443\n.text:0000000000417446\n.text:000000000041744a\n.text:000000000041744c\n.text:000000000041744e\n.text:0000000000417453\n.text:0000000000417456\n.text:0000000000417459\n.text:000000000041745b\n.text:000000000041745d\n.text:000000000041745f\n.text:0000000000417462\n.text:0000000000417464\n.text:0000000000417466\n.text:0000000000417469\n.text:000000000041746b\n.text:000000000041746d\n.text:000000000041746f\n.text:0000000000417471\n.text:0000000000417474\n.text:0000000000417476\n.text:000000000041747b\n.text:000000000041747e\n.text:0000000000417483\n.text:0000000000417487\n.text:0000000000417488\n.text:000000000041748a\n.text:000000000041748c\n.text:000000000041748e\n.text:0000000000417490\n'
p874
tp875
sS'get_new_pred_noarg'
p876
(S'\n__stdcall get_new_pred_noarg(parser_table * entry)\n'
p877
V\u000apredicate * get_new_pred_noarg(parser_table *entry)\u000a\u000a{\u000a  predicate *ppVar1;\u000a  \u000a  ppVar1 = get_new_pred(entry);\u000a  if (ppVar1 != (predicate *)0x0) {\u000a    ppVar1->arg_text = (char *)0x0;\u000a  }\u000a  return ppVar1;\u000a}\u000a\u000a
p878
S'PUSH RAX\nCALL 0x00406b20\nTEST RAX,RAX\nJZ 0x00406b13\nMOV qword ptr [RAX + 0x30],0x0\nPOP RCX\nRET\n'
p879
S'50\ne8 1a 00 00 00\n48 85 c0\n74 08\n48 c7 40 30 00 00 00 00\n59\nc3\n'
p880
S'.text:0000000000406b00\n.text:0000000000406b01\n.text:0000000000406b06\n.text:0000000000406b09\n.text:0000000000406b0b\n.text:0000000000406b13\n.text:0000000000406b14\n'
p881
tp882
sS'hash_delete'
p883
(S'\n__stdcall hash_delete(Hash_table * table, void * entry)\n'
p884
V\u000avoid * hash_delete(Hash_table *table,void *entry)\u000a\u000a{\u000a  ulong uVar1;\u000a  Hash_tuning *pHVar2;\u000a  hash_entry *phVar3;\u000a  hash_entry *__ptr;\u000a  _Bool _Var4;\u000a  void *pvVar5;\u000a  ulong uVar6;\u000a  size_t candidate;\u000a  float fVar7;\u000a  float fVar8;\u000a  hash_entry *local_20;\u000a  \u000a  pvVar5 = hash_find_entry(table,entry,&local_20);\u000a  if (pvVar5 == (void *)0x0) {\u000a    pvVar5 = (void *)0x0;\u000a  }\u000a  else {\u000a    table->n_entries = table->n_entries - 1;\u000a    if (local_20->data == (void *)0x0) {\u000a      uVar6 = table->n_buckets_used - 1;\u000a      table->n_buckets_used = uVar6;\u000a      if ((long)uVar6 < 0) {\u000a        fVar7 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a        fVar7 = fVar7 + fVar7;\u000a      }\u000a      else {\u000a        fVar7 = (float)uVar6;\u000a      }\u000a      uVar6 = table->n_buckets;\u000a      if ((long)uVar6 < 0) {\u000a        fVar8 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a        fVar8 = fVar8 + fVar8;\u000a      }\u000a      else {\u000a        fVar8 = (float)uVar6;\u000a      }\u000a      if (fVar7 < fVar8 * table->tuning->shrink_threshold) {\u000a        check_tuning(table);\u000a        uVar6 = table->n_buckets;\u000a        uVar1 = table->n_buckets_used;\u000a        if ((long)uVar1 < 0) {\u000a          fVar7 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a          fVar7 = fVar7 + fVar7;\u000a        }\u000a        else {\u000a          fVar7 = (float)uVar1;\u000a        }\u000a        pHVar2 = table->tuning;\u000a        if ((long)uVar6 < 0) {\u000a          fVar8 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a          fVar8 = fVar8 + fVar8;\u000a        }\u000a        else {\u000a          fVar8 = (float)uVar6;\u000a        }\u000a        if (fVar7 < pHVar2->shrink_threshold * fVar8) {\u000a          fVar8 = fVar8 * pHVar2->shrink_factor;\u000a          if (pHVar2->is_n_buckets == false) {\u000a            fVar8 = fVar8 * pHVar2->growth_threshold;\u000a          }\u000a          candidate = (long)fVar8;\u000a          if (DAT_00422830 <= fVar8) {\u000a            candidate = (long)(fVar8 - DAT_00422830) ^ 0x8000000000000000;\u000a          }\u000a          _Var4 = hash_rehash(table,candidate);\u000a          if (_Var4 == false) {\u000a            __ptr = table->free_entry_list;\u000a            while (__ptr != (hash_entry *)0x0) {\u000a              phVar3 = __ptr->next;\u000a              free(__ptr);\u000a              __ptr = phVar3;\u000a            }\u000a            table->free_entry_list = (hash_entry *)0x0;\u000a          }\u000a        }\u000a      }\u000a    }\u000a  }\u000a  return pvVar5;\u000a}\u000a\u000a
p885
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV R15,RDI\nLEA RDX,[RSP + 0x8]\nMOV ECX,0x1\nCALL 0x00410fd0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0041113a\nDEC qword ptr [R15 + 0x20]\nMOV RAX,qword ptr [RSP + 0x8]\nCMP qword ptr [RAX],0x0\nJNZ 0x00411269\nMOV RAX,qword ptr [R15 + 0x18]\nDEC RAX\nMOV qword ptr [R15 + 0x18],RAX\nJS 0x00411142\nCVTSI2SS XMM0,RAX\nJMP 0x00411157\nXOR R14D,R14D\nJMP 0x00411269\nMOV RCX,RAX\nSHR RCX,1\nAND EAX,0x1\nOR RAX,RCX\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOV RCX,qword ptr [R15 + 0x10]\nMOV RAX,qword ptr [R15 + 0x28]\nTEST RCX,RCX\nJS 0x0041116b\nCVTSI2SS XMM1,RCX\nJMP 0x00411180\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM1,RCX\nADDSS XMM1,XMM1\nMULSS XMM1,dword ptr [RAX]\nUCOMISS XMM1,XMM0\nJBE 0x00411269\nMOV RDI,R15\nCALL 0x00410900\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x004111ac\nXORPS XMM1,XMM1\nCVTSI2SS XMM1,RCX\nJMP 0x004111c4\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nXORPS XMM1,XMM1\nCVTSI2SS XMM1,RCX\nADDSS XMM1,XMM1\nMOV RCX,qword ptr [R15 + 0x28]\nTEST RAX,RAX\nJS 0x004111d7\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nJMP 0x004111ef\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOVSS XMM2,dword ptr [RCX]\nMULSS XMM2,XMM0\nUCOMISS XMM2,XMM1\nJBE 0x00411269\nMULSS XMM0,dword ptr [RCX + 0x4]\nCMP byte ptr [RCX + 0x10],0x0\nJNZ 0x0041120c\nMULSS XMM0,dword ptr [RCX + 0x8]\nMOVSS XMM1,dword ptr [0x00422830]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RSI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RSI,RCX\nMOV RDI,R15\nCALL 0x00410ba0\nTEST AL,AL\nJNZ 0x00411269\nMOV RDI,qword ptr [R15 + 0x48]\nTEST RDI,RDI\nJZ 0x00411261\nNOP\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x00402710\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x00411250\nMOV qword ptr [R15 + 0x48],0x0\nMOV RAX,R14\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p886
S'41 57\n41 56\n53\n48 83 ec 10\n49 89 ff\n48 8d 54 24 08\nb9 01 00 00 00\ne8 c5 fe ff ff\n49 89 c6\n4d 85 f6\n74 27\n49 ff 4f 20\n48 8b 44 24 08\n48 83 38 00\n0f 85 43 01 00 00\n49 8b 47 18\n48 ff c8\n49 89 47 18\n78 0f\nf3 48 0f 2a c0\neb 1d\n45 31 f6\ne9 27 01 00 00\n48 89 c1\n48 d1 e9\n83 e0 01\n48 09 c8\nf3 48 0f 2a c0\nf3 0f 58 c0\n49 8b 4f 10\n49 8b 47 28\n48 85 c9\n78 07\nf3 48 0f 2a c9\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a c9\nf3 0f 58 c9\nf3 0f 59 08\n0f 2e c8\n0f 86 dc 00 00 00\n4c 89 ff\ne8 6b f7 ff ff\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 0a\n0f 57 c9\nf3 48 0f 2a c9\neb 18\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\n0f 57 c9\nf3 48 0f 2a c9\nf3 0f 58 c9\n49 8b 4f 28\n48 85 c0\n78 0a\n0f 57 c0\nf3 48 0f 2a c0\neb 18\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\n0f 57 c0\nf3 48 0f 2a c0\nf3 0f 58 c0\nf3 0f 10 11\nf3 0f 59 d0\n0f 2e d1\n76 6d\nf3 0f 59 41 04\n80 79 10 00\n75 05\nf3 0f 59 41 08\nf3 0f 10 0d 1c 16 01 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f0\n0f 2e c1\n48 0f 43 f1\n4c 89 ff\ne8 5f f9 ff ff\n84 c0\n75 24\n49 8b 7f 48\n48 85 ff\n74 13\n66 90\n48 8b 5f 08\ne8 b7 14 ff ff\n48 85 db\n48 89 df\n75 ef\n49 c7 47 48 00 00 00 00\n4c 89 f0\n48 83 c4 10\n5b\n41 5e\n41 5f\nc3\n'
p887
S'.text:00000000004110f0\n.text:00000000004110f2\n.text:00000000004110f4\n.text:00000000004110f5\n.text:00000000004110f9\n.text:00000000004110fc\n.text:0000000000411101\n.text:0000000000411106\n.text:000000000041110b\n.text:000000000041110e\n.text:0000000000411111\n.text:0000000000411113\n.text:0000000000411117\n.text:000000000041111c\n.text:0000000000411120\n.text:0000000000411126\n.text:000000000041112a\n.text:000000000041112d\n.text:0000000000411131\n.text:0000000000411133\n.text:0000000000411138\n.text:000000000041113a\n.text:000000000041113d\n.text:0000000000411142\n.text:0000000000411145\n.text:0000000000411148\n.text:000000000041114b\n.text:000000000041114e\n.text:0000000000411153\n.text:0000000000411157\n.text:000000000041115b\n.text:000000000041115f\n.text:0000000000411162\n.text:0000000000411164\n.text:0000000000411169\n.text:000000000041116b\n.text:000000000041116e\n.text:0000000000411171\n.text:0000000000411174\n.text:0000000000411177\n.text:000000000041117c\n.text:0000000000411180\n.text:0000000000411184\n.text:0000000000411187\n.text:000000000041118d\n.text:0000000000411190\n.text:0000000000411195\n.text:0000000000411199\n.text:000000000041119d\n.text:00000000004111a0\n.text:00000000004111a2\n.text:00000000004111a5\n.text:00000000004111aa\n.text:00000000004111ac\n.text:00000000004111af\n.text:00000000004111b2\n.text:00000000004111b5\n.text:00000000004111b8\n.text:00000000004111bb\n.text:00000000004111c0\n.text:00000000004111c4\n.text:00000000004111c8\n.text:00000000004111cb\n.text:00000000004111cd\n.text:00000000004111d0\n.text:00000000004111d5\n.text:00000000004111d7\n.text:00000000004111da\n.text:00000000004111dd\n.text:00000000004111e0\n.text:00000000004111e3\n.text:00000000004111e6\n.text:00000000004111eb\n.text:00000000004111ef\n.text:00000000004111f3\n.text:00000000004111f7\n.text:00000000004111fa\n.text:00000000004111fc\n.text:0000000000411201\n.text:0000000000411205\n.text:0000000000411207\n.text:000000000041120c\n.text:0000000000411214\n.text:0000000000411217\n.text:000000000041121b\n.text:0000000000411220\n.text:000000000041122a\n.text:000000000041122d\n.text:0000000000411232\n.text:0000000000411235\n.text:0000000000411239\n.text:000000000041123c\n.text:0000000000411241\n.text:0000000000411243\n.text:0000000000411245\n.text:0000000000411249\n.text:000000000041124c\n.text:000000000041124e\n.text:0000000000411250\n.text:0000000000411254\n.text:0000000000411259\n.text:000000000041125c\n.text:000000000041125f\n.text:0000000000411261\n.text:0000000000411269\n.text:000000000041126c\n.text:0000000000411270\n.text:0000000000411271\n.text:0000000000411273\n.text:0000000000411275\n'
p888
tp889
sS'ydhms_diff'
p890
(S'\n__stdcall ydhms_diff(long_int year1, long_int yday1, int yday0, int hour0, int min0, int sec0)\n'
p891
V\u000along_int ydhms_diff(long_int year1,long_int yday1,int yday0,int hour0,int min0,int sec0)\u000a\u000a{\u000a  int iVar1;\u000a  long_int lVar2;\u000a  long_int lVar3;\u000a  int iVar4;\u000a  int iVar5;\u000a  int iVar6;\u000a  int in_stack_00000008;\u000a  int in_stack_00000010;\u000a  int in_stack_00000018;\u000a  int in_stack_00000020;\u000a  \u000a  lVar2 = shr(year1);\u000a  lVar3 = shr(0x76c);\u000a  iVar6 = ((int)lVar2 - (uint)((year1 & 3U) == 0)) + (int)lVar3;\u000a  lVar2 = shr((long)sec0);\u000a  iVar4 = ((int)lVar3 - (uint)((sec0 & 3U) == 0)) + (int)lVar2;\u000a  iVar1 = iVar6 / 0x19 + (iVar6 >> 0x1f) + (uint)((ulong)((long)iVar6 * 0x51eb851f) >> 0x3f);\u000a  iVar1 = iVar1 - ((uint)(iVar6 + iVar1 * -0x19) >> 0x1f);\u000a  iVar5 = iVar4 / 0x19 + (iVar4 >> 0x1f) + (uint)((ulong)((long)iVar4 * 0x51eb851f) >> 0x3f);\u000a  iVar5 = iVar5 - ((uint)(iVar4 + iVar5 * -0x19) >> 0x1f);\u000a  lVar2 = shr((long)iVar1);\u000a  lVar3 = shr((long)iVar5);\u000a  return ((long)min0 - (long)in_stack_00000020) +\u000a         (((long)hour0 - (long)in_stack_00000018) +\u000a         (((long)yday0 - (long)in_stack_00000010) +\u000a         ((yday1 - (long)in_stack_00000008) + (year1 - (long)sec0) * 0x16d +\u000a         (long)(iVar5 + (((((int)lVar2 + iVar6) - iVar4) - (int)lVar3) - iVar1))) * 0x18) * 0x3c) *\u000a         0x3c;\u000a}\u000a\u000a
p892
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV EBX,R9D\nMOV dword ptr [RSP + 0x14],R8D\nMOV dword ptr [RSP + 0x10],ECX\nMOV dword ptr [RSP + 0xc],EDX\nMOV R13,RSI\nMOV ESI,0x2\nMOV RBP,RDI\nMOV qword ptr [RSP + 0x20],RBP\nCALL 0x0041a6f0\nMOV R14,RAX\nMOV EDI,0x76c\nMOV ESI,0x2\nCALL 0x0041a6f0\nMOV R15,RAX\nMOV EAX,EBP\nAND EAX,0x3\nCMP RAX,0x1\nSBB RBP,RBP\nADD RBP,R14\nADD RBP,R15\nMOVSXD RBX,EBX\nMOV qword ptr [RSP + 0x18],RBX\nMOV ESI,0x2\nMOV RDI,RBX\nCALL 0x0041a6f0\nMOV ECX,EBX\nAND ECX,0x3\nCMP ECX,0x1\nSBB RCX,RCX\nADD RCX,R15\nADD RCX,RAX\nMOVSXD R14,EBP\nIMUL RAX,R14,0x51eb851f\nMOV RDX,RAX\nSHR RDX,0x3f\nSAR RAX,0x23\nADD EAX,EDX\nLEA EDX,[RAX + RAX*0x4]\nLEA EDX,[RDX + RDX*0x4]\nMOV ESI,R14D\nSUB ESI,EDX\nSHR ESI,0x1f\nSUB EAX,ESI\nMOVSXD R12,ECX\nIMUL RBX,R12,0x51eb851f\nMOV RCX,RBX\nSHR RCX,0x3f\nSAR RBX,0x23\nADD EBX,ECX\nLEA ECX,[RBX + RBX*0x4]\nLEA ECX,[RCX + RCX*0x4]\nMOV EDX,R12D\nSUB EDX,ECX\nSHR EDX,0x1f\nSUB EBX,EDX\nMOVSXD R15,EAX\nMOV ESI,0x2\nMOV RDI,R15\nCALL 0x0041a6f0\nMOV RBP,RAX\nMOVSXD RBX,EBX\nMOV ESI,0x2\nMOV RDI,RBX\nCALL 0x0041a6f0\nADD EBP,R14D\nSUB EBP,R12D\nSUB EBP,EAX\nSUB EBP,R15D\nADD EBX,EBP\nMOV RAX,qword ptr [RSP + 0x20]\nSUB RAX,qword ptr [RSP + 0x18]\nIMUL RAX,RAX,0x16d\nMOVSXD RCX,dword ptr [RSP + 0x60]\nMOVSXD RDX,EBX\nSUB R13,RCX\nADD R13,RAX\nADD R13,RDX\nLEA RAX,[R13 + R13*0x2]\nMOVSXD RCX,dword ptr [RSP + 0xc]\nMOVSXD RDX,dword ptr [RSP + 0x68]\nSUB RCX,RDX\nLEA RAX,[RCX + RAX*0x8]\nIMUL RAX,RAX,0x3c\nMOVSXD RCX,dword ptr [RSP + 0x10]\nMOVSXD RDX,dword ptr [RSP + 0x70]\nSUB RCX,RDX\nADD RCX,RAX\nIMUL RCX,RCX,0x3c\nMOVSXD RAX,dword ptr [RSP + 0x14]\nMOVSXD RDX,dword ptr [RSP + 0x78]\nSUB RAX,RDX\nADD RAX,RCX\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p893
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n44 89 cb\n44 89 44 24 14\n89 4c 24 10\n89 54 24 0c\n49 89 f5\nbe 02 00 00 00\n48 89 fd\n48 89 6c 24 20\ne8 ed 02 00 00\n49 89 c6\nbf 6c 07 00 00\nbe 02 00 00 00\ne8 db 02 00 00\n49 89 c7\n89 e8\n83 e0 03\n48 83 f8 01\n48 19 ed\n4c 01 f5\n4c 01 fd\n48 63 db\n48 89 5c 24 18\nbe 02 00 00 00\n48 89 df\ne8 b1 02 00 00\n89 d9\n83 e1 03\n83 f9 01\n48 19 c9\n4c 01 f9\n48 01 c1\n4c 63 f5\n49 69 c6 1f 85 eb 51\n48 89 c2\n48 c1 ea 3f\n48 c1 f8 23\n01 d0\n8d 14 80\n8d 14 92\n44 89 f6\n29 d6\nc1 ee 1f\n29 f0\n4c 63 e1\n49 69 dc 1f 85 eb 51\n48 89 d9\n48 c1 e9 3f\n48 c1 fb 23\n01 cb\n8d 0c 9b\n8d 0c 89\n44 89 e2\n29 ca\nc1 ea 1f\n29 d3\n4c 63 f8\nbe 02 00 00 00\n4c 89 ff\ne8 42 02 00 00\n48 89 c5\n48 63 db\nbe 02 00 00 00\n48 89 df\ne8 2f 02 00 00\n44 01 f5\n44 29 e5\n29 c5\n44 29 fd\n01 eb\n48 8b 44 24 20\n48 2b 44 24 18\n48 69 c0 6d 01 00 00\n48 63 4c 24 60\n48 63 d3\n49 29 cd\n49 01 c5\n49 01 d5\n4b 8d 44 6d 00\n48 63 4c 24 0c\n48 63 54 24 68\n48 29 d1\n48 8d 04 c1\n48 6b c0 3c\n48 63 4c 24 10\n48 63 54 24 70\n48 29 d1\n48 01 c1\n48 6b c9 3c\n48 63 44 24 14\n48 63 54 24 78\n48 29 d0\n48 01 c8\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p894
S'.text:000000000041a3d0\n.text:000000000041a3d1\n.text:000000000041a3d3\n.text:000000000041a3d5\n.text:000000000041a3d7\n.text:000000000041a3d9\n.text:000000000041a3da\n.text:000000000041a3de\n.text:000000000041a3e1\n.text:000000000041a3e6\n.text:000000000041a3ea\n.text:000000000041a3ee\n.text:000000000041a3f1\n.text:000000000041a3f6\n.text:000000000041a3f9\n.text:000000000041a3fe\n.text:000000000041a403\n.text:000000000041a406\n.text:000000000041a40b\n.text:000000000041a410\n.text:000000000041a415\n.text:000000000041a418\n.text:000000000041a41a\n.text:000000000041a41d\n.text:000000000041a421\n.text:000000000041a424\n.text:000000000041a427\n.text:000000000041a42a\n.text:000000000041a42d\n.text:000000000041a432\n.text:000000000041a437\n.text:000000000041a43a\n.text:000000000041a43f\n.text:000000000041a441\n.text:000000000041a444\n.text:000000000041a447\n.text:000000000041a44a\n.text:000000000041a44d\n.text:000000000041a450\n.text:000000000041a453\n.text:000000000041a45a\n.text:000000000041a45d\n.text:000000000041a461\n.text:000000000041a465\n.text:000000000041a467\n.text:000000000041a46a\n.text:000000000041a46d\n.text:000000000041a470\n.text:000000000041a472\n.text:000000000041a475\n.text:000000000041a477\n.text:000000000041a47a\n.text:000000000041a481\n.text:000000000041a484\n.text:000000000041a488\n.text:000000000041a48c\n.text:000000000041a48e\n.text:000000000041a491\n.text:000000000041a494\n.text:000000000041a497\n.text:000000000041a499\n.text:000000000041a49c\n.text:000000000041a49e\n.text:000000000041a4a1\n.text:000000000041a4a6\n.text:000000000041a4a9\n.text:000000000041a4ae\n.text:000000000041a4b1\n.text:000000000041a4b4\n.text:000000000041a4b9\n.text:000000000041a4bc\n.text:000000000041a4c1\n.text:000000000041a4c4\n.text:000000000041a4c7\n.text:000000000041a4c9\n.text:000000000041a4cc\n.text:000000000041a4ce\n.text:000000000041a4d3\n.text:000000000041a4d8\n.text:000000000041a4df\n.text:000000000041a4e4\n.text:000000000041a4e7\n.text:000000000041a4ea\n.text:000000000041a4ed\n.text:000000000041a4f0\n.text:000000000041a4f5\n.text:000000000041a4fa\n.text:000000000041a4ff\n.text:000000000041a502\n.text:000000000041a506\n.text:000000000041a50a\n.text:000000000041a50f\n.text:000000000041a514\n.text:000000000041a517\n.text:000000000041a51a\n.text:000000000041a51e\n.text:000000000041a523\n.text:000000000041a528\n.text:000000000041a52b\n.text:000000000041a52e\n.text:000000000041a532\n.text:000000000041a533\n.text:000000000041a535\n.text:000000000041a537\n.text:000000000041a539\n.text:000000000041a53b\n.text:000000000041a53c\n'
p895
tp896
sS'pred_mmin'
p897
(S'\n__stdcall pred_mmin(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p898
V\u000a_Bool pred_mmin(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  timespec tVar2;\u000a  \u000a  tVar2 = get_stat_mtime(stat_buf);\u000a  _Var1 = pred_timewindow(SUB168((undefined  [16])tVar2,0));\u000a  return _Var1;\u000a}\u000a\u000a
p899
S'PUSH RBX\nMOV RBX,RDX\nMOV RDI,RSI\nCALL 0x00416c90\nMOV ECX,0x3c\nMOV RDI,RAX\nMOV RSI,RDX\nMOV RDX,RBX\nPOP RBX\nJMP 0x00404a30\n'
p900
S'53\n48 89 d3\n48 89 f7\ne8 24 2a 01 00\nb9 3c 00 00 00\n48 89 c7\n48 89 d6\n48 89 da\n5b\ne9 b0 07 00 00\n'
p901
S'.text:0000000000404260\n.text:0000000000404261\n.text:0000000000404264\n.text:0000000000404267\n.text:000000000040426c\n.text:0000000000404271\n.text:0000000000404274\n.text:0000000000404277\n.text:000000000040427a\n.text:000000000040427b\n'
p902
tp903
sS'print_quoted'
p904
(S'\n__stdcall print_quoted(FILE * fp, quoting_options * qopts, char * format, char * s)\n'
p905
V\u000aint print_quoted(FILE *fp,quoting_options *qopts,char *format,char *s)\u000a\u000a{\u000a  int iVar1;\u000a  size_t len;\u000a  char *buffer;\u000a  char *arg;\u000a  char smallbuf [8192];\u000a  char local_2038 [8200];\u000a  \u000a  if ((char)format != 0) {\u000a    buffer = local_2038;\u000a    len = quotearg_buffer(buffer,0x2000,arg,0xffffffffffffffff,qopts);\u000a    if (0x1fff < len) {\u000a      buffer = (char *)xmalloc(len + 1);\u000a      quotearg_buffer(buffer,len + 1,arg,0xffffffffffffffff,qopts);\u000a    }\u000a    qmark_chars(buffer,len);\u000a    iVar1 = fprintf((FILE *)fp,s,buffer);\u000a    if (buffer != local_2038) {\u000a      free(buffer);\u000a    }\u000a    return iVar1;\u000a  }\u000a  iVar1 = fprintf((FILE *)fp,s);\u000a  return iVar1;\u000a}\u000a\u000a
p906
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x2018\nMOV R12,R8\nMOV RBX,RCX\nMOV R13,RSI\nMOV R14,RDI\nTEST DL,DL\nJZ 0x0040f676\nLEA RBP,[RSP + 0x10]\nMOV ESI,0x2000\nMOV RCX,-0x1\nMOV RDI,RBP\nMOV RDX,R12\nMOV R8,R13\nCALL 0x00415240\nMOV R15,RAX\nCMP R15,0x2000\nJC 0x0040f633\nMOV qword ptr [RSP + 0x8],R14\nMOV R14,R15\nINC R14\nMOV RDI,R14\nCALL 0x00417220\nMOV RBP,RAX\nMOV RCX,-0x1\nMOV RDI,RBP\nMOV RSI,R14\nMOV R14,qword ptr [RSP + 0x8]\nMOV RDX,R12\nMOV R8,R13\nCALL 0x00415240\nMOV RDI,RBP\nMOV RSI,R15\nCALL 0x0040f6a0\nXOR EAX,EAX\nMOV RDI,R14\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00402ba0\nMOV EBX,EAX\nLEA RAX,[RSP + 0x10]\nCMP RBP,RAX\nJZ 0x0040f662\nMOV RDI,RBP\nCALL 0x00402710\nMOV EAX,EBX\nADD RSP,0x2018\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EAX,EAX\nMOV RDI,R14\nMOV RSI,RBX\nMOV RDX,R12\nADD RSP,0x2018\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00402ba0\n'
p907
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 18 20 00 00\n4d 89 c4\n48 89 cb\n49 89 f5\n49 89 fe\n84 d2\n0f 84 a1 00 00 00\n48 8d 6c 24 10\nbe 00 20 00 00\n48 c7 c1 ff ff ff ff\n48 89 ef\n4c 89 e2\n4d 89 e8\ne8 4c 5c 00 00\n49 89 c7\n49 81 ff 00 20 00 00\n72 33\n4c 89 74 24 08\n4d 89 fe\n49 ff c6\n4c 89 f7\ne8 0d 7c 00 00\n48 89 c5\n48 c7 c1 ff ff ff ff\n48 89 ef\n4c 89 f6\n4c 8b 74 24 08\n4c 89 e2\n4d 89 e8\ne8 0d 5c 00 00\n48 89 ef\n4c 89 fe\ne8 62 00 00 00\n31 c0\n4c 89 f7\n48 89 de\n48 89 ea\ne8 52 35 ff ff\n89 c3\n48 8d 44 24 10\n48 39 c5\n74 08\n48 89 ef\ne8 ae 30 ff ff\n89 d8\n48 81 c4 18 20 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 c0\n4c 89 f7\n48 89 de\n4c 89 e2\n48 81 c4 18 20 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 09 35 ff ff\n'
p908
S'.text:000000000040f5b0\n.text:000000000040f5b1\n.text:000000000040f5b3\n.text:000000000040f5b5\n.text:000000000040f5b7\n.text:000000000040f5b9\n.text:000000000040f5ba\n.text:000000000040f5c1\n.text:000000000040f5c4\n.text:000000000040f5c7\n.text:000000000040f5ca\n.text:000000000040f5cd\n.text:000000000040f5cf\n.text:000000000040f5d5\n.text:000000000040f5da\n.text:000000000040f5df\n.text:000000000040f5e6\n.text:000000000040f5e9\n.text:000000000040f5ec\n.text:000000000040f5ef\n.text:000000000040f5f4\n.text:000000000040f5f7\n.text:000000000040f5fe\n.text:000000000040f600\n.text:000000000040f605\n.text:000000000040f608\n.text:000000000040f60b\n.text:000000000040f60e\n.text:000000000040f613\n.text:000000000040f616\n.text:000000000040f61d\n.text:000000000040f620\n.text:000000000040f623\n.text:000000000040f628\n.text:000000000040f62b\n.text:000000000040f62e\n.text:000000000040f633\n.text:000000000040f636\n.text:000000000040f639\n.text:000000000040f63e\n.text:000000000040f640\n.text:000000000040f643\n.text:000000000040f646\n.text:000000000040f649\n.text:000000000040f64e\n.text:000000000040f650\n.text:000000000040f655\n.text:000000000040f658\n.text:000000000040f65a\n.text:000000000040f65d\n.text:000000000040f662\n.text:000000000040f664\n.text:000000000040f66b\n.text:000000000040f66c\n.text:000000000040f66e\n.text:000000000040f670\n.text:000000000040f672\n.text:000000000040f674\n.text:000000000040f675\n.text:000000000040f676\n.text:000000000040f678\n.text:000000000040f67b\n.text:000000000040f67e\n.text:000000000040f681\n.text:000000000040f688\n.text:000000000040f689\n.text:000000000040f68b\n.text:000000000040f68d\n.text:000000000040f68f\n.text:000000000040f691\n.text:000000000040f692\n'
p909
tp910
sS'parse_anewer'
p911
(S'\n__stdcall parse_anewer(parser_table * entry, char * * argv, int * arg_ptr)\n'
p912
V\u000a_Bool parse_anewer(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  predicate *ppVar2;\u000a  float fVar3;\u000a  timespec tVar4;\u000a  char *local_b8;\u000a  stat local_b0;\u000a  \u000a  set_stat_placeholders(&local_b0);\u000a  _Var1 = collect_arg_stat_info(argv,arg_ptr,&local_b0,&local_b8);\u000a  if (_Var1 != false) {\u000a    ppVar2 = insert_primary(entry,local_b8);\u000a    *(undefined4 *)ppVar2->args = 0;\u000a    tVar4 = get_stat_mtime(&local_b0);\u000a    *(long *)(ppVar2->args + 8) = SUB168((undefined  [16])tVar4,0);\u000a    *(long *)(ppVar2->args + 0x10) = SUB168((undefined  [16])tVar4 >> 0x40,0);\u000a    *(undefined4 *)(ppVar2->args + 4) = 0;\u000a    fVar3 = estimate_timestamp_success_rate(local_b0.st_mtim.tv_sec);\u000a    ppVar2->est_success_rate = fVar3;\u000a  }\u000a  return (_Bool)(_Var1 != false);\u000a}\u000a\u000a
p913
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,RDX\nMOV RBX,RSI\nMOV R14,RDI\nLEA R12,[RSP + 0x8]\nMOV RDI,R12\nCALL 0x004079d0\nMOV RCX,RSP\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,R12\nCALL 0x0040c9b0\nTEST AL,AL\nJZ 0x0040af7b\nMOV RSI,qword ptr [RSP]\nMOV RDI,R14\nCALL 0x00407730\nMOV RBX,RAX\nMOV dword ptr [RBX + 0x38],0x0\nLEA RDI,[RSP + 0x8]\nCALL 0x00416c90\nMOV qword ptr [RBX + 0x40],RAX\nMOV qword ptr [RBX + 0x48],RDX\nMOV dword ptr [RBX + 0x3c],0x0\nMOV RDI,qword ptr [RSP + 0x60]\nCALL 0x0040ade0\nMOVSS dword ptr [RBX + 0x24],XMM0\nMOV AL,0x1\nJMP 0x0040af7d\nXOR EAX,EAX\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p914
S'41 57\n41 56\n41 54\n53\n48 81 ec 98 00 00 00\n49 89 d7\n48 89 f3\n49 89 fe\n4c 8d 64 24 08\n4c 89 e7\ne8 ac ca ff ff\n48 89 e1\n48 89 df\n4c 89 fe\n4c 89 e2\ne8 7b 1a 00 00\n84 c0\n74 42\n48 8b 34 24\n4c 89 f7\ne8 eb c7 ff ff\n48 89 c3\nc7 43 38 00 00 00 00\n48 8d 7c 24 08\ne8 37 bd 00 00\n48 89 43 40\n48 89 53 48\nc7 43 3c 00 00 00 00\n48 8b 7c 24 60\ne8 6e fe ff ff\nf3 0f 11 43 24\nb0 01\neb 02\n31 c0\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p915
S'.text:000000000040af00\n.text:000000000040af02\n.text:000000000040af04\n.text:000000000040af06\n.text:000000000040af07\n.text:000000000040af0e\n.text:000000000040af11\n.text:000000000040af14\n.text:000000000040af17\n.text:000000000040af1c\n.text:000000000040af1f\n.text:000000000040af24\n.text:000000000040af27\n.text:000000000040af2a\n.text:000000000040af2d\n.text:000000000040af30\n.text:000000000040af35\n.text:000000000040af37\n.text:000000000040af39\n.text:000000000040af3d\n.text:000000000040af40\n.text:000000000040af45\n.text:000000000040af48\n.text:000000000040af4f\n.text:000000000040af54\n.text:000000000040af59\n.text:000000000040af5d\n.text:000000000040af61\n.text:000000000040af68\n.text:000000000040af6d\n.text:000000000040af72\n.text:000000000040af77\n.text:000000000040af79\n.text:000000000040af7b\n.text:000000000040af7d\n.text:000000000040af84\n.text:000000000040af85\n.text:000000000040af87\n.text:000000000040af89\n.text:000000000040af8b\n'
p916
tp917
sS'set_char_quoting'
p918
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p919
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p920
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x62e690\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p921
S'89 f1\n48 85 ff\nbe 90 e6 62 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p922
S'.text:00000000004151b0\n.text:00000000004151b2\n.text:00000000004151b5\n.text:00000000004151ba\n.text:00000000004151be\n.text:00000000004151c0\n.text:00000000004151c3\n.text:00000000004151c7\n.text:00000000004151cc\n.text:00000000004151cf\n.text:00000000004151d1\n.text:00000000004151d3\n.text:00000000004151d6\n.text:00000000004151d8\n.text:00000000004151db\n.text:00000000004151dd\n.text:00000000004151e0\n.text:00000000004151e5\n'
p923
tp924
sS'fd_is_cloexec'
p925
(S'\n__stdcall fd_is_cloexec()\n'
p926
V\u000aint fd_is_cloexec(void)\u000a\u000a{\u000a  uint uVar1;\u000a  undefined8 in_RDI;\u000a  \u000a  uVar1 = rpl_fcntl(in_RDI,1);\u000a  return (int)(uVar1 & 1);\u000a}\u000a\u000a
p927
S'PUSH RAX\nMOV ESI,0x1\nXOR EAX,EAX\nCALL 0x00417de0\nAND EAX,0x1\nPOP RCX\nRET\n'
p928
S'50\nbe 01 00 00 00\n31 c0\ne8 b3 91 00 00\n83 e0 01\n59\nc3\n'
p929
S'.text:000000000040ec20\n.text:000000000040ec21\n.text:000000000040ec26\n.text:000000000040ec28\n.text:000000000040ec2d\n.text:000000000040ec30\n.text:000000000040ec31\n'
p930
tp931
sS'fputc'
p932
(S'\n__stdcall fputc(int __c, FILE * __stream)\n'
p933
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputc_0062d218)();\u000a  return iVar1;\u000a}\u000a\u000a
p934
S'JMP qword ptr [0x0062d218]\n'
p935
S'ff 25 22 a7 22 00\n'
p936
S'.plt:0000000000402af0\n'
p937
tp938
sS'parse_daystart'
p939
(S'\n__stdcall parse_daystart(parser_table * entry, char * * argv, int * arg_ptr)\n'
p940
V\u000a_Bool parse_daystart(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  tm *ptVar1;\u000a  long lVar2;\u000a  \u000a  if (options.full_days == false) {\u000a    options.cur_day_start.tv_sec = options.cur_day_start.tv_sec + 0x15180;\u000a    options.cur_day_start.tv_nsec = 0;\u000a    ptVar1 = localtime((time_t *)&options.cur_day_start);\u000a    if (ptVar1 == (tm *)0x0) {\u000a      lVar2 = options.cur_day_start.tv_sec +\u000a              (options.cur_day_start.tv_sec / 0x15180 + (options.cur_day_start.tv_sec >> 0x3f)) *\u000a              -0x15180;\u000a    }\u000a    else {\u000a      lVar2 = (long)ptVar1->tm_hour * 0xe10 + (long)ptVar1->tm_sec + (long)ptVar1->tm_min * 0x3c;\u000a    }\u000a    options.cur_day_start.tv_sec = options.cur_day_start.tv_sec - lVar2;\u000a    options.full_days = true;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p941
S'CMP byte ptr [0x0062f078],0x0\nJNZ 0x0040b319\nPUSH RAX\nADD qword ptr [0x0062f068],0x15180\nMOV qword ptr [0x0062f070],0x0\nMOV EDI,0x62f068\nCALL 0x00402740\nTEST RAX,RAX\nMOV RCX,qword ptr [0x0062f068]\nLEA RSP,[RSP + 0x8]\nJZ 0x0040b2dd\nMOVSXD RDX,dword ptr [RAX + 0x4]\nIMUL RDX,RDX,0x3c\nMOVSXD RSI,dword ptr [RAX]\nADD RSI,RDX\nMOVSXD RAX,dword ptr [RAX + 0x8]\nIMUL RAX,RAX,0xe10\nADD RAX,RSI\nJMP 0x0040b308\nMOV RDX,0x1845c8a0ce512957\nMOV RAX,RCX\nIMUL RDX\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0xd\nADD RDX,RAX\nIMUL RDX,RDX,0x15180\nMOV RAX,RCX\nSUB RAX,RDX\nSUB RCX,RAX\nMOV qword ptr [0x0062f068],RCX\nMOV byte ptr [0x0062f078],0x1\nMOV AL,0x1\nRET\n'
p942
S'80 3d f1 3d 22 00 00\n0f 85 8c 00 00 00\n50\n48 81 05 cf 3d 22 00 80 51 01 00\n48 c7 05 cc 3d 22 00 00 00 00 00\nbf 68 f0 62 00\ne8 92 74 ff ff\n48 85 c0\n48 8b 0d b0 3d 22 00\n48 8d 64 24 08\n74 1e\n48 63 50 04\n48 6b d2 3c\n48 63 30\n48 01 d6\n48 63 40 08\n48 69 c0 10 0e 00 00\n48 01 f0\neb 2b\n48 ba 57 29 51 ce a0 c8 45 18\n48 89 c8\n48 f7 ea\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 0d\n48 01 c2\n48 69 d2 80 51 01 00\n48 89 c8\n48 29 d0\n48 29 c1\n48 89 0d 56 3d 22 00\nc6 05 5f 3d 22 00 01\nb0 01\nc3\n'
p943
S'.text:000000000040b280\n.text:000000000040b287\n.text:000000000040b28d\n.text:000000000040b28e\n.text:000000000040b299\n.text:000000000040b2a4\n.text:000000000040b2a9\n.text:000000000040b2ae\n.text:000000000040b2b1\n.text:000000000040b2b8\n.text:000000000040b2bd\n.text:000000000040b2bf\n.text:000000000040b2c3\n.text:000000000040b2c7\n.text:000000000040b2ca\n.text:000000000040b2cd\n.text:000000000040b2d1\n.text:000000000040b2d8\n.text:000000000040b2db\n.text:000000000040b2dd\n.text:000000000040b2e7\n.text:000000000040b2ea\n.text:000000000040b2ed\n.text:000000000040b2f0\n.text:000000000040b2f4\n.text:000000000040b2f8\n.text:000000000040b2fb\n.text:000000000040b302\n.text:000000000040b305\n.text:000000000040b308\n.text:000000000040b30b\n.text:000000000040b312\n.text:000000000040b319\n.text:000000000040b31b\n'
p944
tp945
sS'process_debug_options'
p946
(S'\n__stdcall process_debug_options(char * arg)\n'
p947
V\u000avoid process_debug_options(char *arg)\u000a\u000a{\u000a  char "," [2];\u000a  int iVar1;\u000a  char *__s2;\u000a  undefined8 uVar2;\u000a  ulong uVar3;\u000a  int *piVar4;\u000a  char *token_context;\u000a  char *local_30;\u000a  \u000a  local_30 = (char *)0x0;\u000a  __s2 = __strtok_r(arg,",",&local_30);\u000a  if (__s2 == (char *)0x0) {\u000a    uVar2 = dcgettext(0,"Empty argument to the -D option.",5);\u000a    error(0,0,uVar2,uVar2);\u000a    usage(1);\u000a  }\u000a  else {\u000a    do {\u000a      piVar4 = &debugassoc[0].val;\u000a      uVar3 = 0;\u000a      do {\u000a        iVar1 = strcmp(*(char **)(piVar4 + -2),__s2);\u000a        if (iVar1 == 0) {\u000a          options.debug_options = options.debug_options | (long)*piVar4;\u000a          goto LAB_0040858b;\u000a        }\u000a        uVar3 = uVar3 + 1;\u000a        piVar4 = piVar4 + 6;\u000a      } while (uVar3 < 8);\u000a      uVar2 = dcgettext(0,"Ignoring unrecognised debug flag %s",5);\u000a      __s2 = quotearg_n_style((char *)0x0);\u000a      error(0,0,uVar2,__s2);\u000aLAB_0040858b:\u000a      __s2 = __strtok_r((char *)0x0,",",&local_30);\u000a    } while (__s2 != (char *)0x0);\u000a    if ((options.debug_options & 0x10) == 0) {\u000a      return;\u000a    }\u000a  }\u000a  show_valid_debug_options();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(0);\u000a}\u000a\u000a
p948
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV R14,RDI\nMOV qword ptr [RSP + 0x8],0x0\nLEA RDX,[RSP + 0x8]\nMOV ESI,0x41e000\nCALL 0x00402a70\nMOV R12,RAX\nTEST R12,R12\nJZ 0x004085bd\nLEA R15,[RSP + 0x8]\nNOP dword ptr [RAX]\nMOV R13D,0x41df48\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [R13 + -0x8]\nMOV RSI,R12\nCALL 0x00402b40\nTEST EAX,EAX\nJZ 0x00408580\nINC RBX\nADD R13,0x18\nCMP RBX,0x8\nJC 0x00408520\nXOR EDI,EDI\nMOV ESI,0x41eb8f\nMOV EDX,0x5\nCALL 0x00402910\nMOV RBX,RAX\nMOV ESI,dword ptr [0x0062f0ac]\nXOR EDI,EDI\nMOV RDX,R14\nCALL 0x00416290\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00402d90\nJMP 0x0040858b\nMOVSXD RAX,dword ptr [R13]\nOR qword ptr [0x0062f080],RAX\nXOR EDI,EDI\nMOV ESI,0x41e000\nMOV RDX,R15\nCALL 0x00402a70\nMOV R12,RAX\nTEST R12,R12\nJNZ 0x00408510\nTEST byte ptr [0x0062f080],0x10\nJNZ 0x004085e9\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\nXOR EDI,EDI\nMOV ESI,0x41ebb3\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402d90\nMOV EDI,0x1\nCALL 0x00407770\nMOV EDI,0x1\nCALL 0x00407910\nXOR EDI,EDI\nCALL 0x00402ed0\n'
p949
S'41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 10\n49 89 fe\n48 c7 44 24 08 00 00 00 00\n48 8d 54 24 08\nbe 00 e0 41 00\ne8 78 a5 ff ff\n49 89 c4\n4d 85 e4\n0f 84 b9 00 00 00\n4c 8d 7c 24 08\n0f 1f 80 00 00 00 00\n41 bd 48 df 41 00\n31 db\n0f 1f 84 00 00 00 00 00\n49 8b 7d f8\n4c 89 e6\ne8 14 a6 ff ff\n85 c0\n74 50\n48 ff c3\n49 83 c5 18\n48 83 fb 08\n72 e3\n31 ff\nbe 8f eb 41 00\nba 05 00 00 00\ne8 c2 a3 ff ff\n48 89 c3\n8b 35 55 6b 22 00\n31 ff\n4c 89 f2\ne8 2f dd 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 1e a8 ff ff\neb 17\n49 63 45 00\n48 09 05 f5 6a 22 00\n31 ff\nbe 00 e0 41 00\n4c 89 fa\ne8 d6 a4 ff ff\n49 89 c4\n4d 85 e4\n0f 85 6a ff ff ff\nf6 05 d3 6a 22 00 10\n75 3a\n48 83 c4 10\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n31 ff\nbe b3 eb 41 00\nba 05 00 00 00\ne8 42 a3 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 b1 a7 ff ff\nbf 01 00 00 00\ne8 87 f1 ff ff\nbf 01 00 00 00\ne8 1d f3 ff ff\n31 ff\ne8 d6 a8 ff ff\n'
p950
S'.text:00000000004084d0\n.text:00000000004084d2\n.text:00000000004084d4\n.text:00000000004084d6\n.text:00000000004084d8\n.text:00000000004084d9\n.text:00000000004084dd\n.text:00000000004084e0\n.text:00000000004084e9\n.text:00000000004084ee\n.text:00000000004084f3\n.text:00000000004084f8\n.text:00000000004084fb\n.text:00000000004084fe\n.text:0000000000408504\n.text:0000000000408509\n.text:0000000000408510\n.text:0000000000408516\n.text:0000000000408518\n.text:0000000000408520\n.text:0000000000408524\n.text:0000000000408527\n.text:000000000040852c\n.text:000000000040852e\n.text:0000000000408530\n.text:0000000000408533\n.text:0000000000408537\n.text:000000000040853b\n.text:000000000040853d\n.text:000000000040853f\n.text:0000000000408544\n.text:0000000000408549\n.text:000000000040854e\n.text:0000000000408551\n.text:0000000000408557\n.text:0000000000408559\n.text:000000000040855c\n.text:0000000000408561\n.text:0000000000408564\n.text:0000000000408566\n.text:0000000000408568\n.text:000000000040856a\n.text:000000000040856d\n.text:0000000000408572\n.text:0000000000408580\n.text:0000000000408584\n.text:000000000040858b\n.text:000000000040858d\n.text:0000000000408592\n.text:0000000000408595\n.text:000000000040859a\n.text:000000000040859d\n.text:00000000004085a0\n.text:00000000004085a6\n.text:00000000004085ad\n.text:00000000004085af\n.text:00000000004085b3\n.text:00000000004085b4\n.text:00000000004085b6\n.text:00000000004085b8\n.text:00000000004085ba\n.text:00000000004085bc\n.text:00000000004085bd\n.text:00000000004085bf\n.text:00000000004085c4\n.text:00000000004085c9\n.text:00000000004085ce\n.text:00000000004085d1\n.text:00000000004085d3\n.text:00000000004085d5\n.text:00000000004085d7\n.text:00000000004085da\n.text:00000000004085df\n.text:00000000004085e4\n.text:00000000004085e9\n.text:00000000004085ee\n.text:00000000004085f3\n.text:00000000004085f5\n'
p951
tp952
sS'pred_perm'
p953
(S'\n__stdcall pred_perm(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p954
V\u000a_Bool pred_perm(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  uint uVar3;\u000a  \u000a  uVar3 = stat_buf->st_mode;\u000a  uVar1 = *(uint *)(pred_ptr->args + (ulong)((uVar3 & 0xf000) == 0x4000) * 4 + 4);\u000a  iVar2 = *(int *)pred_ptr->args;\u000a  if (iVar2 == 2) {\u000a    uVar3 = uVar3 & 0xfff;\u000a  }\u000a  else {\u000a    if (iVar2 == 1) {\u000a      if (uVar1 != 0) {\u000a        return (_Bool)((uVar1 & uVar3) != 0);\u000a      }\u000a      return true;\u000a    }\u000a    if (iVar2 != 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      abort();\u000a    }\u000a    uVar3 = uVar3 & uVar1;\u000a  }\u000a  return (_Bool)(uVar3 == uVar1);\u000a}\u000a\u000a
p955
S'MOV EAX,dword ptr [RSI + 0x18]\nMOV ECX,EAX\nAND ECX,0xf000\nXOR ESI,ESI\nCMP ECX,0x4000\nSETZ SIL\nMOV ECX,dword ptr [RDX + RSI*0x4 + 0x3c]\nMOV EDX,dword ptr [RDX + 0x38]\nCMP EDX,0x2\nJZ 0x004045a0\nCMP EDX,0x1\nJZ 0x004045ab\nTEST EDX,EDX\nJNZ 0x004045b8\nAND EAX,ECX\nJMP 0x004045a5\nAND EAX,0xfff\nCMP EAX,ECX\nSETZ AL\nRET\nTEST ECX,ECX\nJZ 0x004045b5\nTEST ECX,EAX\nSETNZ AL\nRET\nMOV AL,0x1\nRET\nPUSH RAX\nCALL 0x00402750\n'
p956
S'8b 46 18\n89 c1\n81 e1 00 f0 00 00\n31 f6\n81 f9 00 40 00 00\n40 0f 94 c6\n8b 4c b2 3c\n8b 52 38\n83 fa 02\n74 0d\n83 fa 01\n74 13\n85 d2\n75 1c\n21 c8\neb 05\n25 ff 0f 00 00\n39 c8\n0f 94 c0\nc3\n85 c9\n74 06\n85 c1\n0f 95 c0\nc3\nb0 01\nc3\n50\ne8 92 e1 ff ff\n'
p957
S'.text:0000000000404570\n.text:0000000000404573\n.text:0000000000404575\n.text:000000000040457b\n.text:000000000040457d\n.text:0000000000404583\n.text:0000000000404587\n.text:000000000040458b\n.text:000000000040458e\n.text:0000000000404591\n.text:0000000000404593\n.text:0000000000404596\n.text:0000000000404598\n.text:000000000040459a\n.text:000000000040459c\n.text:000000000040459e\n.text:00000000004045a0\n.text:00000000004045a5\n.text:00000000004045a7\n.text:00000000004045aa\n.text:00000000004045ab\n.text:00000000004045ad\n.text:00000000004045af\n.text:00000000004045b1\n.text:00000000004045b4\n.text:00000000004045b5\n.text:00000000004045b7\n.text:00000000004045b8\n.text:00000000004045b9\n'
p958
tp959
sS'is_fts_enabled'
p960
(S'\n__stdcall is_fts_enabled(int * fts_options)\n'
p961
V\u000a_Bool is_fts_enabled(int *fts_options)\u000a\u000a{\u000a  *fts_options = ftsoptions;\u000a  return true;\u000a}\u000a\u000a
p962
S'MOV EAX,dword ptr [0x0062d480]\nMOV dword ptr [RDI],EAX\nMOV AL,0x1\nRET\n'
p963
S'8b 05 ba a1 22 00\n89 07\nb0 01\nc3\n'
p964
S'.text:00000000004032c0\n.text:00000000004032c6\n.text:00000000004032c8\n.text:00000000004032ca\n'
p965
tp966
sS'optionh_getfilecon'
p967
(S'\n__stdcall optionh_getfilecon(char * name, security_context_t * p)\n'
p968
V\u000aint optionh_getfilecon(char *name,security_context_t *p)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  name = (char *)((ulong)name & 0xffffffff);\u000a  if (state.curdepth != 0) {\u000a    iVar1 = lgetfileconat(name,p);\u000a    return iVar1;\u000a  }\u000a  iVar1 = getfileconat(name,p);\u000a  if (iVar1 != 0) {\u000a    iVar1 = fallback_getfilecon(name,p);\u000a    return iVar1;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p969
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RDX\nMOV RBX,RSI\nMOV EBP,EDI\nCMP dword ptr [0x0062f000],0x0\nJZ 0x0040a796\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x0041b060\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nCALL 0x0041aed0\nTEST EAX,EAX\nJZ 0x0040a7ba\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV ECX,EAX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x0040a990\nXOR EAX,EAX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p970
S'55\n41 56\n53\n49 89 d6\n48 89 f3\n89 fd\n83 3d 7d 48 22 00 00\n74 11\n89 ef\n48 89 de\n4c 89 f2\n5b\n41 5e\n5d\ne9 ca 08 01 00\n89 ef\n48 89 de\n4c 89 f2\ne8 2d 07 01 00\n85 c0\n74 13\n89 ef\n48 89 de\n4c 89 f2\n89 c1\n5b\n41 5e\n5d\ne9 d6 01 00 00\n31 c0\n5b\n41 5e\n5d\nc3\n'
p971
S'.text:000000000040a770\n.text:000000000040a771\n.text:000000000040a773\n.text:000000000040a774\n.text:000000000040a777\n.text:000000000040a77a\n.text:000000000040a77c\n.text:000000000040a783\n.text:000000000040a785\n.text:000000000040a787\n.text:000000000040a78a\n.text:000000000040a78d\n.text:000000000040a78e\n.text:000000000040a790\n.text:000000000040a791\n.text:000000000040a796\n.text:000000000040a798\n.text:000000000040a79b\n.text:000000000040a79e\n.text:000000000040a7a3\n.text:000000000040a7a5\n.text:000000000040a7a7\n.text:000000000040a7a9\n.text:000000000040a7ac\n.text:000000000040a7af\n.text:000000000040a7b1\n.text:000000000040a7b2\n.text:000000000040a7b4\n.text:000000000040a7b5\n.text:000000000040a7ba\n.text:000000000040a7bc\n.text:000000000040a7bd\n.text:000000000040a7bf\n.text:000000000040a7c0\n'
p972
tp973
sS'clear_ungetc_buffer_preserving_position'
p974
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p975
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p976
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00417fd7\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00417ff0\n'
p977
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p978
S'.text:0000000000417fd0\n.text:0000000000417fd4\n.text:0000000000417fd6\n.text:0000000000417fd7\n.text:0000000000417fd9\n.text:0000000000417fde\n'
p979
tp980
sS'pred_xtype'
p981
(S'\n__stdcall pred_xtype(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p982
V\u000a_Bool pred_xtype(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  uint uVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  uint *puVar4;\u000a  char *pathname_00;\u000a  code *pcVar5;\u000a  stat *stat_buf_00;\u000a  stat sStack184;\u000a  \u000a  _Var2 = following_links();\u000a  pcVar5 = optionl_stat;\u000a  if (_Var2 != false) {\u000a    pcVar5 = optionp_stat;\u000a  }\u000a  set_stat_placeholders(&sStack184);\u000a  pathname_00 = state.rel_pathname;\u000a  iVar3 = (*pcVar5)(state.rel_pathname,&sStack184);\u000a  stat_buf_00 = &sStack184;\u000a  if (iVar3 != 0) {\u000a    _Var2 = following_links();\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar1 = *puVar4;\u000a    if ((_Var2 == false) || (stat_buf_00 = stat_buf, uVar1 != 2)) {\u000a      pathname_00 = safely_quote_err_filename((char *)0x0);\u000a      error(0,(ulong)uVar1,&DAT_0042542f,pathname_00);\u000a      state.exit_status = 1;\u000a      return false;\u000a    }\u000a  }\u000a  _Var2 = pred_type(pathname_00,stat_buf_00,pred_ptr);\u000a  return _Var2;\u000a}\u000a\u000a
p983
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x90\nMOV R12,RDX\nMOV R15,RSI\nMOV R14,RDI\nCALL 0x00408230\nMOV ECX,0x408160\nMOV EBX,0x4080f0\nTEST AL,AL\nCMOVNZ RBX,RCX\nMOV RBP,RSP\nMOV RDI,RBP\nCALL 0x004079d0\nMOV RDI,qword ptr [0x0062f010]\nMOV RSI,RBP\nCALL RBX\nTEST EAX,EAX\nJZ 0x00404954\nCALL 0x00408230\nMOV EBX,EAX\nCALL 0x00402770\nMOV EBP,dword ptr [RAX]\nTEST BL,BL\nJZ 0x00404963\nCMP EBP,0x2\nJNZ 0x00404963\nMOV RSI,R15\nJMP 0x00404957\nMOV RSI,RSP\nMOV RDX,R12\nCALL 0x00404790\nMOV BL,AL\nJMP 0x0040498c\nXOR EBX,EBX\nXOR EDI,EDI\nMOV RSI,R14\nCALL 0x00408920\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x42542f\nXOR EAX,EAX\nMOV ESI,EBP\nCALL 0x00402d90\nMOV dword ptr [0x0062f024],0x1\nMOV EAX,EBX\nADD RSP,0x90\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p984
S'55\n41 57\n41 56\n41 54\n53\n48 81 ec 90 00 00 00\n49 89 d4\n49 89 f7\n49 89 fe\ne8 23 39 00 00\nb9 60 81 40 00\nbb f0 80 40 00\n84 c0\n48 0f 45 d9\n48 89 e5\n48 89 ef\ne8 a8 30 00 00\n48 8b 3d e1 a6 22 00\n48 89 ee\nff d3\n85 c0\n74 1c\ne8 f3 38 00 00\n89 c3\ne8 2c de ff ff\n8b 28\n84 db\n74 19\n83 fd 02\n75 14\n4c 89 fe\neb 03\n48 89 e6\n4c 89 e2\ne8 31 fe ff ff\n88 c3\neb 29\n31 db\n31 ff\n4c 89 f6\ne8 b1 3f 00 00\n48 89 c1\n31 ff\nba 2f 54 42 00\n31 c0\n89 ee\ne8 0e e4 ff ff\nc7 05 98 a6 22 00 01 00 00 00\n89 d8\n48 81 c4 90 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p985
S'.text:00000000004048f0\n.text:00000000004048f1\n.text:00000000004048f3\n.text:00000000004048f5\n.text:00000000004048f7\n.text:00000000004048f8\n.text:00000000004048ff\n.text:0000000000404902\n.text:0000000000404905\n.text:0000000000404908\n.text:000000000040490d\n.text:0000000000404912\n.text:0000000000404917\n.text:0000000000404919\n.text:000000000040491d\n.text:0000000000404920\n.text:0000000000404923\n.text:0000000000404928\n.text:000000000040492f\n.text:0000000000404932\n.text:0000000000404934\n.text:0000000000404936\n.text:0000000000404938\n.text:000000000040493d\n.text:000000000040493f\n.text:0000000000404944\n.text:0000000000404946\n.text:0000000000404948\n.text:000000000040494a\n.text:000000000040494d\n.text:000000000040494f\n.text:0000000000404952\n.text:0000000000404954\n.text:0000000000404957\n.text:000000000040495a\n.text:000000000040495f\n.text:0000000000404961\n.text:0000000000404963\n.text:0000000000404965\n.text:0000000000404967\n.text:000000000040496a\n.text:000000000040496f\n.text:0000000000404972\n.text:0000000000404974\n.text:0000000000404979\n.text:000000000040497b\n.text:000000000040497d\n.text:0000000000404982\n.text:000000000040498c\n.text:000000000040498e\n.text:0000000000404995\n.text:0000000000404996\n.text:0000000000404998\n.text:000000000040499a\n.text:000000000040499c\n.text:000000000040499d\n'
p986
tp987
sS'xnmalloc'
p988
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p989
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p990
S'MOV RAX,RDI\nMUL RSI\nJO 0x00417211\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00417220\nPUSH RAX\nCALL 0x004173b0\n'
p991
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p992
S'.text:0000000000417200\n.text:0000000000417203\n.text:0000000000417206\n.text:0000000000417208\n.text:000000000041720c\n.text:000000000041720f\n.text:0000000000417211\n.text:0000000000417212\n'
p993
tp994
sS'quotearg_char'
p995
(S'\n__stdcall quotearg_char(char * arg)\n'
p996
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p997
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x004163b0\n'
p998
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p999
S'.text:0000000000416420\n.text:0000000000416422\n.text:0000000000416429\n.text:000000000041642b\n'
p1000
tp1001
sS'malloc'
p1002
(S'\n__stdcall malloc(size_t __size)\n'
p1003
V\u000a/* WARNING: Switch with 1 destination removed at 0x00402c60 */\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1004
S'JMP qword ptr [0x0062d2d0]\n'
p1005
S'ff 25 6a a6 22 00\n'
p1006
S'.plt:0000000000402c60\n'
p1007
tp1008
sS'cdb_free'
p1009
(S'\n__stdcall cdb_free(cd_buf * cdb)\n'
p1010
V\u000avoid cdb_free(cd_buf *cdb)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (-1 < (int)*cdb) {\u000a    iVar1 = close((int)*cdb);\u000a    if (iVar1 != 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("! close_fail","chdir-long.c",0x40,"void cdb_free(const struct cd_buf *)");\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p1011
S'PUSH RAX\nMOV EDI,dword ptr [RDI]\nTEST EDI,EDI\nJS 0x00417dc0\nCALL 0x00402ac0\nTEST EAX,EAX\nJNZ 0x00417dc2\nPOP RAX\nRET\nMOV EDI,0x42524d\nMOV ESI,0x4251ef\nMOV EDX,0x40\nMOV ECX,0x42525a\nCALL 0x00402a40\n'
p1012
S'50\n8b 3f\n85 ff\n78 09\ne8 04 ad fe ff\n85 c0\n75 02\n58\nc3\nbf 4d 52 42 00\nbe ef 51 42 00\nba 40 00 00 00\nb9 5a 52 42 00\ne8 65 ac fe ff\n'
p1013
S'.text:0000000000417db0\n.text:0000000000417db1\n.text:0000000000417db3\n.text:0000000000417db5\n.text:0000000000417db7\n.text:0000000000417dbc\n.text:0000000000417dbe\n.text:0000000000417dc0\n.text:0000000000417dc1\n.text:0000000000417dc2\n.text:0000000000417dc7\n.text:0000000000417dcc\n.text:0000000000417dd1\n.text:0000000000417dd6\n'
p1014
tp1015
sS'open_cloexec'
p1016
(S'\n__stdcall open_cloexec(char * path)\n'
p1017
V\u000a/* WARNING: Removing unreachable block (ram,0x0040e986) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff48 : 0x0040e994 */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint open_cloexec(char *path,...)\u000a\u000a{\u000a  _Bool cloexec_works;\u000a  int iVar1;\u000a  uint uVar2;\u000a  uint in_ESI;\u000a  va_list ap;\u000a  uint local_b8;\u000a  \u000a  uVar2 = 0;\u000a  if ((in_ESI & 0x40) != 0) {\u000a    uVar2 = local_b8;\u000a  }\u000a  if (open_cloexec_cloexec_status_known == 0) {\u000a    cloexec_works = o_cloexec_works();\u000a    open_cloexec_cloexec_status_known = 1;\u000a  }\u000a  iVar1 = open_safer(path,(ulong)(in_ESI | 0x80000),(ulong)uVar2);\u000a  if ((-1 < iVar1) && (cloexec_works == false)) {\u000a    set_cloexec_flag();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1018
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0xd0\nMOV EBX,ESI\nMOV R14,RDI\nTEST AL,AL\nJZ 0x0040e92b\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nXOR EBP,EBP\nTEST BL,0x40\nJZ 0x0040e996\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xf0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RCX,dword ptr [RSP]\nCMP RCX,0x28\nJA 0x0040e986\nMOV RAX,RCX\nADD RAX,qword ptr [RSP + 0x10]\nLEA ECX,[RCX + 0x8]\nMOV dword ptr [RSP],ECX\nJMP 0x0040e994\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RCX,[RAX + 0x8]\nMOV qword ptr [RSP + 0x8],RCX\nMOV EBP,dword ptr [RAX]\nMOV AL,byte ptr [0x0062e649]\nTEST AL,AL\nJNZ 0x0040e9b2\nCALL 0x0040e9f0\nMOV byte ptr [0x0062e648],AL\nMOV byte ptr [0x0062e649],0x1\nOR EBX,0x80000\nXOR EAX,EAX\nMOV RDI,R14\nMOV ESI,EBX\nMOV EDX,EBP\nCALL 0x00410160\nMOV EBX,EAX\nTEST EBX,EBX\nJS 0x0040e9e2\nMOV AL,byte ptr [0x0062e648]\nTEST AL,AL\nJNZ 0x0040e9e2\nMOV ESI,0x1\nMOV EDI,EBX\nCALL 0x0040fdd0\nMOV EAX,EBX\nADD RSP,0xd0\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1019
S'55\n41 56\n53\n48 81 ec d0 00 00 00\n89 f3\n49 89 fe\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n31 ed\nf6 c3 40\n74 50\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 f0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 0c 24\n48 83 f9 28\n77 10\n48 89 c8\n48 03 44 24 10\n8d 49 08\n89 0c 24\neb 0e\n48 8b 44 24 08\n48 8d 48 08\n48 89 4c 24 08\n8b 28\n8a 05 ad fc 21 00\n84 c0\n75 12\ne8 4b 00 00 00\n88 05 9d fc 21 00\nc6 05 97 fc 21 00 01\n81 cb 00 00 08 00\n31 c0\n4c 89 f7\n89 de\n89 ea\ne8 9a 17 00 00\n89 c3\n85 db\n78 16\n8a 05 76 fc 21 00\n84 c0\n75 0c\nbe 01 00 00 00\n89 df\ne8 ee 13 00 00\n89 d8\n48 81 c4 d0 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1020
S'.text:000000000040e8e0\n.text:000000000040e8e1\n.text:000000000040e8e3\n.text:000000000040e8e4\n.text:000000000040e8eb\n.text:000000000040e8ed\n.text:000000000040e8f0\n.text:000000000040e8f2\n.text:000000000040e8f4\n.text:000000000040e8f9\n.text:000000000040e8fe\n.text:000000000040e903\n.text:000000000040e90b\n.text:000000000040e913\n.text:000000000040e91b\n.text:000000000040e923\n.text:000000000040e92b\n.text:000000000040e930\n.text:000000000040e935\n.text:000000000040e93a\n.text:000000000040e93f\n.text:000000000040e941\n.text:000000000040e944\n.text:000000000040e946\n.text:000000000040e94b\n.text:000000000040e950\n.text:000000000040e958\n.text:000000000040e95d\n.text:000000000040e965\n.text:000000000040e96c\n.text:000000000040e970\n.text:000000000040e974\n.text:000000000040e976\n.text:000000000040e979\n.text:000000000040e97e\n.text:000000000040e981\n.text:000000000040e984\n.text:000000000040e986\n.text:000000000040e98b\n.text:000000000040e98f\n.text:000000000040e994\n.text:000000000040e996\n.text:000000000040e99c\n.text:000000000040e99e\n.text:000000000040e9a0\n.text:000000000040e9a5\n.text:000000000040e9ab\n.text:000000000040e9b2\n.text:000000000040e9b8\n.text:000000000040e9ba\n.text:000000000040e9bd\n.text:000000000040e9bf\n.text:000000000040e9c1\n.text:000000000040e9c6\n.text:000000000040e9c8\n.text:000000000040e9ca\n.text:000000000040e9cc\n.text:000000000040e9d2\n.text:000000000040e9d4\n.text:000000000040e9d6\n.text:000000000040e9db\n.text:000000000040e9dd\n.text:000000000040e9e2\n.text:000000000040e9e4\n.text:000000000040e9eb\n.text:000000000040e9ec\n.text:000000000040e9ee\n.text:000000000040e9ef\n'
p1021
tp1022
sS'atof'
p1023
(S'\n__stdcall atof(char * __nptr)\n'
p1024
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000adouble atof(char *__nptr)\u000a\u000a{\u000a  double dVar1;\u000a  \u000a  dVar1 = (double)(*(code *)PTR_atof_0062d0c8)();\u000a  return dVar1;\u000a}\u000a\u000a
p1025
S'JMP qword ptr [0x0062d0c8]\n'
p1026
S'ff 25 72 a8 22 00\n'
p1027
S'.plt:0000000000402850\n'
p1028
tp1029
sS'dup_cloexec'
p1030
(S'\n__stdcall dup_cloexec()\n'
p1031
V\u000aint dup_cloexec(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 in_RDI;\u000a  \u000a  iVar1 = rpl_fcntl(in_RDI,0x406,0);\u000a  return iVar1;\u000a}\u000a\u000a
p1032
S'MOV ESI,0x406\nXOR EDX,EDX\nXOR EAX,EAX\nJMP 0x00417de0\n'
p1033
S'be 06 04 00 00\n31 d2\n31 c0\ne9 a2 7f 00 00\n'
p1034
S'.text:000000000040fe30\n.text:000000000040fe35\n.text:000000000040fe37\n.text:000000000040fe39\n'
p1035
tp1036
sS'fputs'
p1037
(S'\n__stdcall fputs(char * __s, FILE * __stream)\n'
p1038
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_0062d1c8)();\u000a  return iVar1;\u000a}\u000a\u000a
p1039
S'JMP qword ptr [0x0062d1c8]\n'
p1040
S'ff 25 72 a7 22 00\n'
p1041
S'.plt:0000000000402a50\n'
p1042
tp1043
sS'memchr'
p1044
(S'\n__stdcall memchr(void * __s, int __c, size_t __n)\n'
p1045
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memchr(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memchr_0062d228)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1046
S'JMP qword ptr [0x0062d228]\n'
p1047
S'ff 25 12 a7 22 00\n'
p1048
S'.plt:0000000000402b10\n'
p1049
tp1050
sS'fts_set_stat_required'
p1051
(S'\n__stdcall fts_set_stat_required(FTSENT * p)\n'
p1052
V\u000avoid fts_set_stat_required(FTSENT *p)\u000a\u000a{\u000a  byte in_SIL;\u000a  \u000a  if (p->fts_info == 0xb) {\u000a    p->fts_statp[0].st_size = (ulong)in_SIL + 1;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1053
S'MOVZX EAX,word ptr [RDI + 0x70]\nCMP EAX,0xb\nJNZ 0x00418528\nMOVZX EAX,SIL\nINC RAX\nMOV qword ptr [0xa8 + RDI],RAX\nRET\nPUSH RAX\nCALL 0x00402750\n'
p1054
S'0f b7 47 70\n83 f8 0b\n75 0f\n40 0f b6 c6\n48 ff c0\n48 89 87 a8 00 00 00\nc3\n50\ne8 22 a2 fe ff\n'
p1055
S'.text:0000000000418510\n.text:0000000000418514\n.text:0000000000418517\n.text:0000000000418519\n.text:000000000041851d\n.text:0000000000418520\n.text:0000000000418527\n.text:0000000000418528\n.text:0000000000418529\n'
p1056
tp1057
sS'fopen_safer'
p1058
(S'\n__stdcall fopen_safer(char * file, char * mode)\n'
p1059
V\u000aFILE * fopen_safer(char *file,char *mode)\u000a\u000a{\u000a  uint uVar1;\u000a  int __fd;\u000a  int iVar2;\u000a  FILE *__stream;\u000a  int *piVar3;\u000a  \u000a  __stream = (FILE *)fopen(file,mode);\u000a  if (__stream != (FILE *)0x0) {\u000a    uVar1 = fileno((FILE *)__stream);\u000a    if (2 < uVar1) {\u000a      return __stream;\u000a    }\u000a    __fd = dup_safer();\u000a    if (__fd < 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      fclose((FILE *)__stream);\u000a      *piVar3 = __fd;\u000a    }\u000a    else {\u000a      iVar2 = fclose((FILE *)__stream);\u000a      if ((iVar2 == 0) && (__stream = (FILE *)fdopen(__fd,mode), __stream != (FILE *)0x0)) {\u000a        return __stream;\u000a      }\u000a      piVar3 = __errno_location();\u000a      iVar2 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar2;\u000a    }\u000a  }\u000a  return (FILE *)0x0;\u000a}\u000a\u000a
p1060
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nCALL 0x00402df0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004103bb\nMOV RDI,RBX\nCALL 0x00402c10\nCMP EAX,0x2\nJA 0x004103bd\nMOV EDI,EAX\nCALL 0x00416cf0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x004103a3\nMOV RDI,RBX\nCALL 0x004028c0\nTEST EAX,EAX\nJNZ 0x0041038c\nMOV EDI,EBP\nMOV RSI,R14\nCALL 0x00402d40\nMOV RBX,RAX\nTEST RBX,RBX\nJNZ 0x004103bd\nCALL 0x00402770\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x00402ac0\nMOV dword ptr [RBX],R14D\nJMP 0x004103bb\nCALL 0x00402770\nMOV RBP,RAX\nMOV R14D,dword ptr [RBP]\nMOV RDI,RBX\nCALL 0x004028c0\nMOV dword ptr [RBP],R14D\nXOR EBX,EBX\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1061
S'55\n41 56\n53\n49 89 f6\ne8 a4 2a ff ff\n48 89 c3\n48 85 db\n74 67\n48 89 df\ne8 b4 28 ff ff\n83 f8 02\n77 5c\n89 c7\ne8 88 69 00 00\n89 c5\n85 ed\n78 35\n48 89 df\ne8 4a 25 ff ff\n85 c0\n75 12\n89 ef\n4c 89 f6\ne8 bc 29 ff ff\n48 89 c3\n48 85 db\n75 31\ne8 df 23 ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 22 27 ff ff\n44 89 33\neb 18\ne8 c8 23 ff ff\n48 89 c5\n44 8b 75 00\n48 89 df\ne8 09 25 ff ff\n44 89 75 00\n31 db\n48 89 d8\n5b\n41 5e\n5d\nc3\n'
p1062
S'.text:0000000000410340\n.text:0000000000410341\n.text:0000000000410343\n.text:0000000000410344\n.text:0000000000410347\n.text:000000000041034c\n.text:000000000041034f\n.text:0000000000410352\n.text:0000000000410354\n.text:0000000000410357\n.text:000000000041035c\n.text:000000000041035f\n.text:0000000000410361\n.text:0000000000410363\n.text:0000000000410368\n.text:000000000041036a\n.text:000000000041036c\n.text:000000000041036e\n.text:0000000000410371\n.text:0000000000410376\n.text:0000000000410378\n.text:000000000041037a\n.text:000000000041037c\n.text:000000000041037f\n.text:0000000000410384\n.text:0000000000410387\n.text:000000000041038a\n.text:000000000041038c\n.text:0000000000410391\n.text:0000000000410394\n.text:0000000000410397\n.text:0000000000410399\n.text:000000000041039e\n.text:00000000004103a1\n.text:00000000004103a3\n.text:00000000004103a8\n.text:00000000004103ab\n.text:00000000004103af\n.text:00000000004103b2\n.text:00000000004103b7\n.text:00000000004103bb\n.text:00000000004103bd\n.text:00000000004103c0\n.text:00000000004103c1\n.text:00000000004103c3\n.text:00000000004103c4\n'
p1063
tp1064
sS'quotearg_n_custom'
p1065
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p1066
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1067
S'MOV R8,-0x1\nJMP 0x004164b0\n'
p1068
S'49 c7 c0 ff ff ff ff\neb 07\n'
p1069
S'.text:00000000004164a0\n.text:00000000004164a7\n'
p1070
tp1071
sS'check_normalization'
p1072
(S'\n__stdcall check_normalization(predicate * p)\n'
p1073
V\u000avoid check_normalization(predicate *p)\u000a\u000a{\u000a  predicate *p_00;\u000a  ulong in_RSI;\u000a  \u000a  do {\u000a    if (((in_RSI & 1) != 0) && (p->p_type != BI_OP)) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("BI_OP == p->p_type","tree.c",0x4c7,\u000a                    "void check_normalization(struct predicate *, _Bool)");\u000a    }\u000a    p_00 = p->pred_left;\u000a    if (p_00 != (predicate *)0x0) {\u000a      if (p_00->p_type != BI_OP) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("BI_OP == p->pred_left->p_type","tree.c",0x4cc,\u000a                      "void check_normalization(struct predicate *, _Bool)");\u000a      }\u000a      check_normalization(p_00);\u000a    }\u000a    p = p->pred_right;\u000a    in_RSI = 0;\u000a  } while (p != (predicate *)0x0);\u000a  return;\u000a}\u000a\u000a
p1074
S'PUSH RBX\nMOV RBX,RDI\nNOP word ptr CS:[RAX + RAX*0x1]\nTEST SIL,0x1\nJZ 0x00406a5c\nCMP dword ptr [RBX + 0x10],0x3\nJNZ 0x00406a9e\nMOV RDI,qword ptr [0x110 + RBX]\nTEST RDI,RDI\nJZ 0x00406a75\nCMP dword ptr [RDI + 0x10],0x3\nJNZ 0x00406a85\nXOR ESI,ESI\nCALL 0x00406a40\nMOV RBX,qword ptr [0x118 + RBX]\nXOR ESI,ESI\nTEST RBX,RBX\nJNZ 0x00406a50\nPOP RBX\nRET\nMOV EDI,0x41dcfc\nMOV ESI,0x41d4d0\nMOV EDX,0x4cc\nMOV ECX,0x41dcc8\nCALL 0x00402a40\nMOV EDI,0x41dcb5\nMOV ESI,0x41d4d0\nMOV EDX,0x4c7\nMOV ECX,0x41dcc8\nCALL 0x00402a40\n'
p1075
S'53\n48 89 fb\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n40 f6 c6 01\n74 06\n83 7b 10 03\n75 42\n48 8b bb 10 01 00 00\n48 85 ff\n74 0d\n83 7f 10 03\n75 17\n31 f6\ne8 cb ff ff ff\n48 8b 9b 18 01 00 00\n31 f6\n48 85 db\n75 cd\n5b\nc3\nbf fc dc 41 00\nbe d0 d4 41 00\nba cc 04 00 00\nb9 c8 dc 41 00\ne8 a2 bf ff ff\nbf b5 dc 41 00\nbe d0 d4 41 00\nba c7 04 00 00\nb9 c8 dc 41 00\ne8 89 bf ff ff\n'
p1076
S'.text:0000000000406a40\n.text:0000000000406a41\n.text:0000000000406a44\n.text:0000000000406a50\n.text:0000000000406a54\n.text:0000000000406a56\n.text:0000000000406a5a\n.text:0000000000406a5c\n.text:0000000000406a63\n.text:0000000000406a66\n.text:0000000000406a68\n.text:0000000000406a6c\n.text:0000000000406a6e\n.text:0000000000406a70\n.text:0000000000406a75\n.text:0000000000406a7c\n.text:0000000000406a7e\n.text:0000000000406a81\n.text:0000000000406a83\n.text:0000000000406a84\n.text:0000000000406a85\n.text:0000000000406a8a\n.text:0000000000406a8f\n.text:0000000000406a94\n.text:0000000000406a99\n.text:0000000000406a9e\n.text:0000000000406aa3\n.text:0000000000406aa8\n.text:0000000000406aad\n.text:0000000000406ab2\n'
p1077
tp1078
sS'get_tz'
p1079
(S'\n__stdcall get_tz(char * tzbuf)\n'
p1080
V\u000achar * get_tz(char *tzbuf)\u000a\u000a{\u000a  char *__s;\u000a  size_t sVar1;\u000a  ulong s;\u000a  \u000a  __s = getenv("TZ");\u000a  if (__s == (char *)0x0) {\u000a    tzbuf = (char *)0x0;\u000a  }\u000a  else {\u000a    sVar1 = strlen(__s);\u000a    s = sVar1 + 1;\u000a    if (100 < s) {\u000a      __s = (char *)xmemdup(__s,s);\u000a      return __s;\u000a    }\u000a    memcpy(tzbuf,__s,s);\u000a  }\u000a  return tzbuf;\u000a}\u000a\u000a
p1081
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV EDI,0x424283\nCALL 0x00402700\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00414c9a\nMOV RDI,RBX\nCALL 0x00402930\nINC RAX\nCMP RAX,0x64\nJA 0x00414ca8\nMOV RDI,R14\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x00402bd0\nJMP 0x00414c9d\nXOR R14D,R14D\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RDI,RBX\nMOV RSI,RAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00417360\n'
p1082
S'41 56\n53\n50\n49 89 fe\nbf 83 42 42 00\ne8 8f da fe ff\n48 89 c3\n48 85 db\n74 21\n48 89 df\ne8 af dc fe ff\n48 ff c0\n48 83 f8 64\n77 1e\n4c 89 f7\n48 89 de\n48 89 c2\ne8 38 df fe ff\neb 03\n45 31 f6\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n48 89 df\n48 89 c6\n48 83 c4 08\n5b\n41 5e\ne9 a6 26 00 00\n'
p1083
S'.text:0000000000414c60\n.text:0000000000414c62\n.text:0000000000414c63\n.text:0000000000414c64\n.text:0000000000414c67\n.text:0000000000414c6c\n.text:0000000000414c71\n.text:0000000000414c74\n.text:0000000000414c77\n.text:0000000000414c79\n.text:0000000000414c7c\n.text:0000000000414c81\n.text:0000000000414c84\n.text:0000000000414c88\n.text:0000000000414c8a\n.text:0000000000414c8d\n.text:0000000000414c90\n.text:0000000000414c93\n.text:0000000000414c98\n.text:0000000000414c9a\n.text:0000000000414c9d\n.text:0000000000414ca0\n.text:0000000000414ca4\n.text:0000000000414ca5\n.text:0000000000414ca7\n.text:0000000000414ca8\n.text:0000000000414cab\n.text:0000000000414cae\n.text:0000000000414cb2\n.text:0000000000414cb3\n.text:0000000000414cb5\n'
p1084
tp1085
sS'fts_read'
p1086
(S'\n__stdcall fts_read(FTS * sp)\n'
p1087
V\u000aFTSENT * fts_read(FTS *sp)\u000a\u000a{\u000a  byte *pbVar1;\u000a  uint uVar2;\u000a  _ftsent *p_Var3;\u000a  char *pcVar4;\u000a  size_t sVar5;\u000a  long lVar6;\u000a  _Bool _Var7;\u000a  unsigned_short uVar8;\u000a  int iVar9;\u000a  FTSENT *ent;\u000a  FTSENT *head;\u000a  int *piVar10;\u000a  size_t sVar11;\u000a  \u000a  ent = (FTSENT *)sp->fts_cur;\u000a  if (ent == (FTSENT *)0x0) {\u000a    return (FTSENT *)0x0;\u000a  }\u000a  if ((*(byte *)((long)&sp->fts_options + 1) & 0x40) != 0) {\u000a    return (FTSENT *)0x0;\u000a  }\u000a  uVar8 = ent->fts_instr;\u000a  ent->fts_instr = 3;\u000a  if (uVar8 == 1) {\u000a    uVar8 = fts_stat(sp,ent);\u000a    ent->fts_info = uVar8;\u000a    return ent;\u000a  }\u000a  if ((uVar8 == 2) && ((ent->fts_info & 0xfffe) == 0xc)) {\u000a    uVar8 = fts_stat(sp,ent);\u000a    ent->fts_info = uVar8;\u000a    if ((uVar8 == 1) && ((*(byte *)&sp->fts_options & 4) == 0)) {\u000a      iVar9 = diropen(sp,\u000a                         "warning: Unix filenames usually don\u005c't contain slashes (though pathnames do).  That means that \u005c'%s %s\u005c' will probably evaluate to false all the time on this system.  You might find the \u005c'-wholename\u005c' test more useful, or perhaps \u005c'-samefile\u005c'.  Alternatively, if you are using GNU grep, you could use \u005c'find ... -print0 | grep -FzZ %s\u005c'."\u000a                         + 0x148);\u000a      ent->fts_symfd = iVar9;\u000a      if (iVar9 < 0) {\u000a        piVar10 = __errno_location();\u000a        ent->fts_errno = *piVar10;\u000a        ent->fts_info = 7;\u000a      }\u000a      else {\u000a        *(byte *)&ent->fts_flags = *(byte *)&ent->fts_flags | 2;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    head = ent;\u000a    if (ent->fts_info == 1) {\u000a      if ((uVar8 == 4) ||\u000a         ((uVar2 = sp->fts_options, (uVar2 & 0x40) != 0 && (ent->fts_statp[0].st_dev != sp->fts_dev)\u000a          ))) {\u000a        if ((*(byte *)&ent->fts_flags & 2) != 0) {\u000a          close(ent->fts_symfd);\u000a        }\u000a        if ((FTSENT *)sp->fts_child != (FTSENT *)0x0) {\u000a          fts_lfree((FTSENT *)sp->fts_child);\u000a          sp->fts_child = (_ftsent *)0x0;\u000a        }\u000a        ent->fts_info = 6;\u000a        goto LAB_00418bf8;\u000a      }\u000a      head = (FTSENT *)sp->fts_child;\u000a      if (((uVar2 & 0x2000) == 0) || (head == (FTSENT *)0x0)) {\u000a        if (head == (FTSENT *)0x0) goto LAB_00418cd0;\u000a        iVar9 = fts_safe_changedir(sp,ent,(char *)0xffffffff);\u000a        if (iVar9 != 0) {\u000a          piVar10 = __errno_location();\u000a          ent->fts_errno = *piVar10;\u000a          *(byte *)&ent->fts_flags = *(byte *)&ent->fts_flags | 1;\u000a          p_Var3 = sp->fts_child;\u000a          while (p_Var3 != (_ftsent *)0x0) {\u000a            p_Var3->fts_accpath = p_Var3->fts_parent->fts_accpath;\u000a            p_Var3 = p_Var3->fts_link;\u000a          }\u000a        }\u000a      }\u000a      else {\u000a        sp->fts_options = uVar2 & 0xffffdfff;\u000a        fts_lfree(head);\u000a        sp->fts_child = (_ftsent *)0x0;\u000aLAB_00418cd0:\u000a        head = fts_build(sp);\u000a        *(FTSENT **)&sp->fts_child = head;\u000a        if (head == (FTSENT *)0x0) {\u000a          if ((*(byte *)((long)&sp->fts_options + 1) & 0x40) != 0) {\u000a            return (FTSENT *)0x0;\u000a          }\u000a          if ((ent->fts_errno != 0) && (ent->fts_info != 4)) {\u000a            ent->fts_info = 7;\u000a          }\u000aLAB_00418bf8:\u000a          leave_dir(sp,ent);\u000a          return ent;\u000a        }\u000a      }\u000a      ent = (FTSENT *)sp->fts_child;\u000a      sp->fts_child = (_ftsent *)0x0;\u000a    }\u000a    else {\u000a      do {\u000a        ent = (FTSENT *)head->fts_link;\u000a        if (ent == (FTSENT *)0x0) {\u000a          p_Var3 = head->fts_parent;\u000a          if (p_Var3->fts_dirp != (DIR *)0x0) {\u000a            sp->fts_cur = p_Var3;\u000a            sp->fts_path[p_Var3->fts_pathlen] = 0;\u000a            ent = fts_build(sp);\u000a            if (ent != (FTSENT *)0x0) {\u000a              free(head);\u000a              goto LAB_00418e54;\u000a            }\u000a            if ((*(byte *)((long)&sp->fts_options + 1) & 0x40) != 0) {\u000a              return (FTSENT *)0x0;\u000a            }\u000a          }\u000a          ent = (FTSENT *)head->fts_parent;\u000a          *(FTSENT **)&sp->fts_cur = ent;\u000a          free(head);\u000a          if (ent->fts_level == -1) {\u000a            free(ent);\u000a            piVar10 = __errno_location();\u000a            *piVar10 = 0;\u000a            sp->fts_cur = (_ftsent *)0x0;\u000a            return (FTSENT *)0x0;\u000a          }\u000a          if (ent->fts_info != 0xb) {\u000a            sp->fts_path[ent->fts_pathlen] = 0;\u000a            if (ent->fts_level == 0) {\u000a              iVar9 = restore_initial_cwd(sp);\u000a            }\u000a            else {\u000a              if ((ent->fts_flags & 2) != 0) {\u000a                if ((sp->fts_options & 4U) == 0) {\u000a                  if ((sp->fts_options & 0x200U) == 0) {\u000a                    iVar9 = fchdir(ent->fts_symfd);\u000a                    if (iVar9 != 0) {\u000a                      piVar10 = __errno_location();\u000a                      ent->fts_errno = *piVar10;\u000a                      pbVar1 = (byte *)((long)&sp->fts_options + 1);\u000a                      *pbVar1 = *pbVar1 | 0x40;\u000a                    }\u000a                  }\u000a                  else {\u000a                    cwd_advance_fd(sp);\u000a                  }\u000a                }\u000a                close(ent->fts_symfd);\u000a                goto LAB_00418f87;\u000a              }\u000a              if ((ent->fts_flags & 1) != 0) goto LAB_00418f87;\u000a              iVar9 = fts_safe_changedir(sp,(FTSENT *)ent->fts_parent,(char *)0xffffffff);\u000a            }\u000a            if (iVar9 != 0) {\u000a              piVar10 = __errno_location();\u000a              ent->fts_errno = *piVar10;\u000a              pbVar1 = (byte *)((long)&sp->fts_options + 1);\u000a              *pbVar1 = *pbVar1 | 0x40;\u000a            }\u000aLAB_00418f87:\u000a            if ((ent->fts_info != 2) &&\u000a               (ent->fts_info = (ushort)(ent->fts_errno != 0) | 6, ent->fts_errno == 0)) {\u000a              leave_dir(sp,ent);\u000a            }\u000a            if ((*(byte *)((long)&sp->fts_options + 1) & 0x40) != 0) {\u000a              return (FTSENT *)0x0;\u000a            }\u000a            return ent;\u000a          }\u000a          goto LAB_00418fc5;\u000a        }\u000a        *(FTSENT **)&sp->fts_cur = ent;\u000a        free(head);\u000a        if (ent->fts_level == 0) {\u000a          iVar9 = restore_initial_cwd(sp);\u000a          if (iVar9 != 0) {\u000a            pbVar1 = (byte *)((long)&sp->fts_options + 1);\u000a            *pbVar1 = *pbVar1 | 0x40;\u000a            return (FTSENT *)0x0;\u000a          }\u000a          free_dir(sp);\u000a          fts_load(sp,ent);\u000a          setup_dir(sp);\u000a          goto LAB_00418e90;\u000a        }\u000a        head = ent;\u000a      } while (ent->fts_instr == 4);\u000a      if (ent->fts_instr == 2) {\u000a        uVar8 = fts_stat(sp,ent);\u000a        ent->fts_info = uVar8;\u000a        if ((uVar8 == 1) && ((*(byte *)&sp->fts_options & 4) == 0)) {\u000a          iVar9 = diropen(sp,\u000a                             "warning: Unix filenames usually don\u005c't contain slashes (though pathnames do).  That means that \u005c'%s %s\u005c' will probably evaluate to false all the time on this system.  You might find the \u005c'-wholename\u005c' test more useful, or perhaps \u005c'-samefile\u005c'.  Alternatively, if you are using GNU grep, you could use \u005c'find ... -print0 | grep -FzZ %s\u005c'."\u000a                             + 0x148);\u000a          ent->fts_symfd = iVar9;\u000a          if (iVar9 < 0) {\u000a            piVar10 = __errno_location();\u000a            ent->fts_errno = *piVar10;\u000a            ent->fts_info = 7;\u000a          }\u000a          else {\u000a            *(byte *)&ent->fts_flags = *(byte *)&ent->fts_flags | 2;\u000a          }\u000a        }\u000a        ent->fts_instr = 3;\u000a      }\u000a    }\u000aLAB_00418e54:\u000a    pcVar4 = sp->fts_path;\u000a    sVar5 = ent->fts_parent->fts_pathlen;\u000a    sVar11 = sVar5 - 1;\u000a    if (ent->fts_parent->fts_path[sVar5 - 1] != '/') {\u000a      sVar11 = sVar5;\u000a    }\u000a    pcVar4[sVar11] = '/';\u000a    memmove(pcVar4 + sVar11 + 1,ent + 1,ent->fts_namelen + 1);\u000a  }\u000aLAB_00418e90:\u000a  *(FTSENT **)&sp->fts_cur = ent;\u000a  uVar8 = ent->fts_info;\u000a  if (uVar8 == 0xb) {\u000a    lVar6 = ent->fts_statp[0].st_size;\u000a    if (lVar6 != 1) {\u000a      if (lVar6 != 2) {\u000aLAB_00418fc5:\u000a                    /* WARNING: Subroutine does not return */\u000a        abort();\u000a      }\u000a      head = (FTSENT *)ent->fts_parent;\u000a      if ((((ent->fts_level < 1) || (head->fts_n_dirs_remaining != 0)) ||\u000a          ((sp->fts_options & 0x18U) != 0x18)) ||\u000a         (_Var7 = link_count_optimize_ok(head), _Var7 == false)) {\u000a        uVar8 = fts_stat(sp,ent);\u000a        ent->fts_info = uVar8;\u000a        if ((ent->fts_statp[0].st_mode & 0xf000) != 0x4000) goto LAB_00418f2c;\u000a        if ((ent->fts_level != 0) && (head->fts_n_dirs_remaining != 0)) {\u000a          head->fts_n_dirs_remaining = head->fts_n_dirs_remaining - 1;\u000a        }\u000a      }\u000a    }\u000a    uVar8 = ent->fts_info;\u000a  }\u000aLAB_00418f2c:\u000a  if (uVar8 != 1) {\u000a    return ent;\u000a  }\u000a  if (ent->fts_level == 0) {\u000a    sp->fts_dev = ent->fts_statp[0].st_dev;\u000a  }\u000a  _Var7 = enter_dir(sp,ent);\u000a  if (_Var7 == false) {\u000a    piVar10 = __errno_location();\u000a    *piVar10 = 0xc;\u000a    return (FTSENT *)0x0;\u000a  }\u000a  return ent;\u000a}\u000a\u000a
p1088
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV R12,qword ptr [R14]\nTEST R12,R12\nJZ 0x00418f5f\nTEST byte ptr [R14 + 0x49],0x40\nJNZ 0x00418f5f\nMOVZX EAX,word ptr [R12 + 0x74]\nMOV word ptr [R12 + 0x74],0x3\nCMP EAX,0x1\nJNZ 0x00418a6d\nXOR EDX,EDX\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00418530\nMOV word ptr [R12 + 0x70],AX\nJMP 0x00418f62\nMOVZX ECX,word ptr [R12 + 0x70]\nMOVZX EAX,AX\nCMP EAX,0x2\nJNZ 0x00418add\nMOV EDX,ECX\nAND EDX,0xfffe\nMOVZX EDX,DX\nCMP EDX,0xc\nJNZ 0x00418add\nMOV EDX,0x1\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00418530\nMOV word ptr [R12 + 0x70],AX\nMOVZX EAX,AX\nCMP EAX,0x1\nJNZ 0x00418e90\nTEST byte ptr [R14 + 0x48],0x4\nJNZ 0x00418e90\nMOV ESI,0x4217ea\nMOV RDI,R14\nCALL 0x00418800\nMOV dword ptr [R12 + 0x44],EAX\nTEST EAX,EAX\nJS 0x00418c67\nOR byte ptr [R12 + 0x72],0x2\nJMP 0x00418e90\nMOVZX ECX,CX\nCMP ECX,0x1\nJNZ 0x00418b40\nCMP EAX,0x4\nJZ 0x00418bc8\nMOV EAX,dword ptr [R14 + 0x48]\nTEST AL,0x40\nJZ 0x00418b05\nMOV RCX,qword ptr [R12 + 0x78]\nCMP RCX,qword ptr [R14 + 0x18]\nJNZ 0x00418bc8\nMOV RDI,qword ptr [R14 + 0x8]\nTEST AH,0x20\nJZ 0x00418c80\nTEST RDI,RDI\nJZ 0x00418c80\nAND EAX,0xffffdfff\nMOV dword ptr [R14 + 0x48],EAX\nCALL 0x00418860\nMOV qword ptr [R14 + 0x8],0x0\nJMP 0x00418cd0\nMOV RBX,qword ptr [R12 + 0x10]\nTEST RBX,RBX\nJZ 0x00418c08\nMOV qword ptr [R14],RBX\nMOV RDI,R12\nCALL 0x00402710\nCMP qword ptr [RBX + 0x58],0x0\nJZ 0x00418c4d\nMOVZX EAX,word ptr [RBX + 0x74]\nCMP EAX,0x4\nMOV R12,RBX\nJZ 0x00418b40\nMOVZX EAX,AX\nCMP EAX,0x2\nJNZ 0x00418e54\nMOV EDX,0x1\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00418530\nMOV word ptr [RBX + 0x70],AX\nMOVZX EAX,AX\nCMP EAX,0x1\nJNZ 0x00418e4e\nTEST byte ptr [R14 + 0x48],0x4\nJNZ 0x00418e4e\nMOV ESI,0x4217ea\nMOV RDI,R14\nCALL 0x00418800\nMOV dword ptr [RBX + 0x44],EAX\nTEST EAX,EAX\nJS 0x00418e3e\nOR byte ptr [RBX + 0x72],0x2\nJMP 0x00418e4e\nTEST byte ptr [R12 + 0x72],0x2\nJZ 0x00418bda\nMOV EDI,dword ptr [R12 + 0x44]\nCALL 0x00402ac0\nMOV RDI,qword ptr [R14 + 0x8]\nTEST RDI,RDI\nJZ 0x00418bf0\nCALL 0x00418860\nMOV qword ptr [R14 + 0x8],0x0\nMOV word ptr [R12 + 0x70],0x6\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00418fd0\nJMP 0x00418f62\nMOV RAX,qword ptr [R12 + 0x8]\nCMP qword ptr [RAX + 0x18],0x0\nJZ 0x00418d55\nMOV qword ptr [R14],RAX\nMOV RCX,qword ptr [R14 + 0x20]\nMOV RAX,qword ptr [RAX + 0x48]\nMOV byte ptr [RCX + RAX*0x1],0x0\nMOV ESI,0x3\nMOV RDI,R14\nCALL 0x004191f0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00418d4a\nMOV RDI,R12\nCALL 0x00402710\nJMP 0x00418e54\nMOV RDI,R14\nCALL 0x00419930\nTEST EAX,EAX\nJZ 0x00418cf7\nOR byte ptr [R14 + 0x49],0x40\nJMP 0x00418f5f\nCALL 0x00402770\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [R12 + 0x40],EAX\nMOV word ptr [R12 + 0x70],0x7\nJMP 0x00418e90\nTEST RDI,RDI\nJZ 0x00418cd0\nMOV RCX,qword ptr [R12 + 0x30]\nMOV EDX,0xffffffff\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00419060\nTEST EAX,EAX\nJZ 0x00418ce6\nCALL 0x00402770\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [R12 + 0x40],EAX\nOR byte ptr [R12 + 0x72],0x1\nMOV RAX,qword ptr [R14 + 0x8]\nTEST RAX,RAX\nJZ 0x00418ce6\nMOV RCX,qword ptr [RAX + 0x8]\nMOV RCX,qword ptr [RCX + 0x30]\nMOV qword ptr [RAX + 0x30],RCX\nMOV RAX,qword ptr [RAX + 0x10]\nTEST RAX,RAX\nJNZ 0x00418cb9\nJMP 0x00418ce6\nMOV ESI,0x3\nMOV RDI,R14\nCALL 0x004191f0\nMOV qword ptr [R14 + 0x8],RAX\nTEST RAX,RAX\nJZ 0x00418d17\nMOV RBX,qword ptr [R14 + 0x8]\nMOV qword ptr [R14 + 0x8],0x0\nJMP 0x00418e54\nMOV RDI,R14\nCALL 0x004189f0\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00419980\nMOV RDI,R14\nCALL 0x00418790\nJMP 0x00418e8d\nTEST byte ptr [R14 + 0x49],0x40\nJNZ 0x00418f5f\nCMP dword ptr [R12 + 0x40],0x0\nJZ 0x00418bf8\nMOVZX EAX,word ptr [R12 + 0x70]\nCMP EAX,0x4\nJZ 0x00418bf8\nMOV word ptr [R12 + 0x70],0x7\nJMP 0x00418bf8\nTEST byte ptr [R14 + 0x49],0x40\nJNZ 0x00418f5f\nMOV R15,qword ptr [R12 + 0x8]\nMOV qword ptr [R14],R15\nMOV RDI,R12\nCALL 0x00402710\nCMP qword ptr [R15 + 0x58],-0x1\nJZ 0x00418dbd\nMOVZX EAX,word ptr [R15 + 0x70]\nCMP EAX,0xb\nJZ 0x00418fc5\nMOV RAX,qword ptr [R14 + 0x20]\nMOV RCX,qword ptr [R15 + 0x48]\nMOV byte ptr [RAX + RCX*0x1],0x0\nCMP qword ptr [R15 + 0x58],0x0\nJZ 0x00418ddc\nMOVZX EAX,word ptr [R15 + 0x72]\nTEST AL,0x2\nJNZ 0x00418e01\nTEST AL,0x1\nJNZ 0x00418f87\nMOV RSI,qword ptr [R15 + 0x8]\nMOV EDX,0xffffffff\nMOV ECX,0x42527f\nMOV RDI,R14\nCALL 0x00419060\nTEST EAX,EAX\nJNZ 0x00418dec\nJMP 0x00418f87\nMOV RDI,R15\nCALL 0x00402710\nCALL 0x00402770\nMOV dword ptr [RAX],0x0\nMOV qword ptr [R14],0x0\nJMP 0x00418f5f\nMOV RDI,R14\nCALL 0x00419930\nTEST EAX,EAX\nJZ 0x00418f87\nCALL 0x00402770\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [R15 + 0x40],EAX\nOR byte ptr [R14 + 0x49],0x40\nJMP 0x00418f87\nMOV EAX,dword ptr [R14 + 0x48]\nTEST AL,0x4\nJNZ 0x00418f7e\nTEST AH,0x2\nMOV ESI,dword ptr [R15 + 0x44]\nJNZ 0x00418f71\nMOV EDI,ESI\nCALL 0x00402d10\nTEST EAX,EAX\nJZ 0x00418f7e\nCALL 0x00402770\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [R15 + 0x40],EAX\nOR byte ptr [R14 + 0x49],0x40\nJMP 0x00418f7e\nCALL 0x00402770\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RBX + 0x40],EAX\nMOV word ptr [RBX + 0x70],0x7\nMOV word ptr [RBX + 0x74],0x3\nMOV RAX,qword ptr [R14 + 0x20]\nMOV RCX,qword ptr [RBX + 0x8]\nMOV RDX,qword ptr [RCX + 0x38]\nMOV RCX,qword ptr [RCX + 0x48]\nLEA RSI,[RCX + -0x1]\nCMP byte ptr [RDX + RCX*0x1 + -0x1],0x2f\nCMOVNZ RSI,RCX\nLEA RDI,[RAX + RSI*0x1 + 0x1]\nMOV byte ptr [RAX + RSI*0x1],0x2f\nLEA RSI,[0x108 + RBX]\nMOV RDX,qword ptr [RBX + 0x60]\nINC RDX\nCALL 0x00402d80\nMOV R12,RBX\nMOV qword ptr [R14],R12\nMOVZX EAX,word ptr [R12 + 0x70]\nCMP EAX,0xb\nJNZ 0x00418f2c\nMOV RAX,qword ptr [0xa8 + R12]\nCMP RAX,0x1\nJZ 0x00418f26\nCMP RAX,0x2\nJNZ 0x00418fc5\nMOV RBX,qword ptr [R12 + 0x8]\nCMP qword ptr [R12 + 0x58],0x0\nJLE 0x00418ee6\nCMP qword ptr [RBX + 0x68],0x0\nJNZ 0x00418ee6\nMOV EAX,dword ptr [R14 + 0x48]\nAND EAX,0x18\nCMP EAX,0x18\nJNZ 0x00418ee6\nMOV RDI,RBX\nCALL 0x00419a10\nTEST AL,AL\nJNZ 0x00418f26\nXOR EDX,EDX\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00418530\nMOV word ptr [R12 + 0x70],AX\nMOV ECX,0xf000\nAND ECX,dword ptr [0x90 + R12]\nCMP ECX,0x4000\nJNZ 0x00418f2c\nCMP qword ptr [R12 + 0x58],0x0\nJZ 0x00418f26\nMOV RAX,qword ptr [RBX + 0x68]\nTEST RAX,RAX\nJZ 0x00418f26\nDEC RAX\nMOV qword ptr [RBX + 0x68],RAX\nMOV AX,word ptr [R12 + 0x70]\nMOVZX EAX,AX\nCMP EAX,0x1\nJNZ 0x00418f62\nCMP qword ptr [R12 + 0x58],0x0\nJNZ 0x00418f45\nMOV RAX,qword ptr [R12 + 0x78]\nMOV qword ptr [R14 + 0x18],RAX\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00419af0\nTEST AL,AL\nJNZ 0x00418f62\nCALL 0x00402770\nMOV dword ptr [RAX],0xc\nXOR R12D,R12D\nMOV RAX,R12\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nMOV EDX,0x1\nMOV RDI,R14\nCALL 0x00419b90\nMOV EDI,dword ptr [R15 + 0x44]\nCALL 0x00402ac0\nMOVZX EAX,word ptr [R15 + 0x70]\nCMP EAX,0x2\nJZ 0x00418fb5\nMOV EAX,dword ptr [R15 + 0x40]\nXOR ECX,ECX\nCMP EAX,0x0\nSETNZ CL\nOR ECX,0x6\nCMP EAX,0x0\nMOV word ptr [R15 + 0x70],CX\nJNZ 0x00418fb5\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x00418fd0\nXOR EAX,EAX\nTEST byte ptr [R14 + 0x49],0x40\nCMOVNZ R15,RAX\nMOV R12,R15\nJMP 0x00418f62\nCALL 0x00402750\n'
p1089
S'41 57\n41 56\n41 54\n53\n50\n49 89 fe\n4d 8b 26\n4d 85 e4\n0f 84 28 05 00 00\n41 f6 46 49 40\n0f 85 1d 05 00 00\n41 0f b7 44 24 74\n66 41 c7 44 24 74 03 00\n83 f8 01\n75 18\n31 d2\n4c 89 f7\n4c 89 e6\ne8 ce fa ff ff\n66 41 89 44 24 70\ne9 f5 04 00 00\n41 0f b7 4c 24 70\n0f b7 c0\n83 f8 02\n75 62\n89 ca\n81 e2 fe ff 00 00\n0f b7 d2\n83 fa 0c\n75 52\nba 01 00 00 00\n4c 89 f7\n4c 89 e6\ne8 95 fa ff ff\n66 41 89 44 24 70\n0f b7 c0\n83 f8 01\n0f 85 e3 03 00 00\n41 f6 46 48 04\n0f 85 d8 03 00 00\nbe ea 17 42 00\n4c 89 f7\ne8 3b fd ff ff\n41 89 44 24 44\n85 c0\n0f 88 95 01 00 00\n41 80 4c 24 72 02\ne9 b3 03 00 00\n0f b7 c9\n83 f9 01\n75 5b\n83 f8 04\n0f 84 da 00 00 00\n41 8b 46 48\na8 40\n74 0f\n49 8b 4c 24 78\n49 3b 4e 18\n0f 85 c3 00 00 00\n49 8b 7e 08\nf6 c4 20\n0f 84 6e 01 00 00\n48 85 ff\n0f 84 65 01 00 00\n25 ff df ff ff\n41 89 46 48\ne8 37 fd ff ff\n49 c7 46 08 00 00 00 00\ne9 9a 01 00 00\n49 8b 5c 24 10\n48 85 db\n0f 84 ba 00 00 00\n49 89 1e\n4c 89 e7\ne8 b7 9b fe ff\n48 83 7b 58 00\n0f 84 e9 00 00 00\n0f b7 43 74\n83 f8 04\n49 89 dc\n74 d0\n0f b7 c0\n83 f8 02\n0f 85 d8 02 00 00\nba 01 00 00 00\n4c 89 f7\n48 89 de\ne8 a4 f9 ff ff\n66 89 43 70\n0f b7 c0\n83 f8 01\n0f 85 b2 02 00 00\n41 f6 46 48 04\n0f 85 a7 02 00 00\nbe ea 17 42 00\n4c 89 f7\ne8 4c fc ff ff\n89 43 44\n85 c0\n0f 88 7f 02 00 00\n80 4b 72 02\ne9 86 02 00 00\n41 f6 44 24 72 02\n74 0a\n41 8b 7c 24 44\ne8 e6 9e fe ff\n49 8b 7e 08\n48 85 ff\n74 0d\ne8 78 fc ff ff\n49 c7 46 08 00 00 00 00\n66 41 c7 44 24 70 06 00\n4c 89 f7\n4c 89 e6\ne8 cd 03 00 00\ne9 5a 03 00 00\n49 8b 44 24 08\n48 83 78 18 00\n0f 84 3d 01 00 00\n49 89 06\n49 8b 4e 20\n48 8b 40 48\nc6 04 01 00\nbe 03 00 00 00\n4c 89 f7\ne8 bc 05 00 00\n48 89 c3\n48 85 db\n0f 84 0a 01 00 00\n4c 89 e7\ne8 c8 9a fe ff\ne9 07 02 00 00\n4c 89 f7\ne8 db 0c 00 00\n85 c0\n0f 84 9a 00 00 00\n41 80 4e 49 40\ne9 f8 02 00 00\ne8 04 9b fe ff\n8b 00\n41 89 44 24 40\n66 41 c7 44 24 70 07 00\ne9 10 02 00 00\n48 85 ff\n74 4b\n49 8b 4c 24 30\nba ff ff ff ff\n4c 89 f7\n4c 89 e6\ne8 c6 03 00 00\n85 c0\n74 48\ne8 cd 9a fe ff\n8b 00\n41 89 44 24 40\n41 80 4c 24 72 01\n49 8b 46 08\n48 85 c0\n74 2d\n48 8b 48 08\n48 8b 49 30\n48 89 48 30\n48 8b 40 10\n48 85 c0\n75 eb\neb 16\nbe 03 00 00 00\n4c 89 f7\ne8 13 05 00 00\n49 89 46 08\n48 85 c0\n74 31\n49 8b 5e 08\n49 c7 46 08 00 00 00 00\ne9 5d 01 00 00\n4c 89 f7\ne8 f1 fc ff ff\n4c 89 f7\n48 89 de\ne8 76 0c 00 00\n4c 89 f7\ne8 7e fa ff ff\ne9 76 01 00 00\n41 f6 46 49 40\n0f 85 3d 02 00 00\n41 83 7c 24 40 00\n0f 84 ca fe ff ff\n41 0f b7 44 24 70\n83 f8 04\n0f 84 bb fe ff ff\n66 41 c7 44 24 70 07 00\ne9 ae fe ff ff\n41 f6 46 49 40\n0f 85 0a 02 00 00\n4d 8b 7c 24 08\n4d 89 3e\n4c 89 e7\ne8 ab 99 fe ff\n49 83 7f 58 ff\n74 51\n41 0f b7 47 70\n83 f8 0b\n0f 84 4b 02 00 00\n49 8b 46 20\n49 8b 4f 48\nc6 04 08 00\n49 83 7f 58 00\n74 4f\n41 0f b7 47 72\na8 02\n75 6b\na8 01\n0f 85 e9 01 00 00\n49 8b 77 08\nba ff ff ff ff\nb9 7f 52 42 00\n4c 89 f7\ne8 ac 02 00 00\n85 c0\n75 34\ne9 ca 01 00 00\n4c 89 ff\ne8 4b 99 fe ff\ne8 a6 99 fe ff\nc7 00 00 00 00 00\n49 c7 06 00 00 00 00\ne9 83 01 00 00\n4c 89 f7\ne8 4c 0b 00 00\n85 c0\n0f 84 9b 01 00 00\ne8 7f 99 fe ff\n8b 00\n41 89 47 40\n41 80 4e 49 40\ne9 86 01 00 00\n41 8b 46 48\na8 04\n0f 85 71 01 00 00\nf6 c4 02\n41 8b 77 44\n0f 85 57 01 00 00\n89 f7\ne8 ef 9e fe ff\n85 c0\n0f 84 55 01 00 00\ne8 42 99 fe ff\n8b 00\n41 89 47 40\n41 80 4e 49 40\ne9 40 01 00 00\ne8 2d 99 fe ff\n8b 00\n89 43 40\n66 c7 43 70 07 00\n66 c7 43 74 03 00\n49 8b 46 20\n48 8b 4b 08\n48 8b 51 38\n48 8b 49 48\n48 8d 71 ff\n80 7c 0a ff 2f\n48 0f 45 f1\n48 8d 7c 30 01\nc6 04 30 2f\n48 8d b3 08 01 00 00\n48 8b 53 60\n48 ff c2\ne8 f3 9e fe ff\n49 89 dc\n4d 89 26\n41 0f b7 44 24 70\n83 f8 0b\n0f 85 8a 00 00 00\n49 8b 84 24 a8 00 00 00\n48 83 f8 01\n74 76\n48 83 f8 02\n0f 85 0b 01 00 00\n49 8b 5c 24 08\n49 83 7c 24 58 00\n7e 1f\n48 83 7b 68 00\n75 18\n41 8b 46 48\n83 e0 18\n83 f8 18\n75 0c\n48 89 df\ne8 2e 0b 00 00\n84 c0\n75 40\n31 d2\n4c 89 f7\n4c 89 e6\ne8 3d f6 ff ff\n66 41 89 44 24 70\nb9 00 f0 00 00\n41 23 8c 24 90 00 00 00\n81 f9 00 40 00 00\n75 1e\n49 83 7c 24 58 00\n74 10\n48 8b 43 68\n48 85 c0\n74 07\n48 ff c8\n48 89 43 68\n66 41 8b 44 24 70\n0f b7 c0\n83 f8 01\n75 2e\n49 83 7c 24 58 00\n75 09\n49 8b 44 24 78\n49 89 46 18\n4c 89 f7\n4c 89 e6\ne8 a0 0b 00 00\n84 c0\n75 0e\ne8 17 98 fe ff\nc7 00 0c 00 00 00\n45 31 e4\n4c 89 e0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\nba 01 00 00 00\n4c 89 f7\ne8 12 0c 00 00\n41 8b 7f 44\ne8 39 9b fe ff\n41 0f b7 47 70\n83 f8 02\n74 24\n41 8b 47 40\n31 c9\n83 f8 00\n0f 95 c1\n83 c9 06\n83 f8 00\n66 41 89 4f 70\n75 0b\n4c 89 f7\n4c 89 fe\ne8 1b 00 00 00\n31 c0\n41 f6 46 49 40\n4c 0f 45 f8\n4d 89 fc\neb 9d\ne8 86 97 fe ff\n'
p1090
S'.text:0000000000418a20\n.text:0000000000418a22\n.text:0000000000418a24\n.text:0000000000418a26\n.text:0000000000418a27\n.text:0000000000418a28\n.text:0000000000418a2b\n.text:0000000000418a2e\n.text:0000000000418a31\n.text:0000000000418a37\n.text:0000000000418a3c\n.text:0000000000418a42\n.text:0000000000418a48\n.text:0000000000418a50\n.text:0000000000418a53\n.text:0000000000418a55\n.text:0000000000418a57\n.text:0000000000418a5a\n.text:0000000000418a5d\n.text:0000000000418a62\n.text:0000000000418a68\n.text:0000000000418a6d\n.text:0000000000418a73\n.text:0000000000418a76\n.text:0000000000418a79\n.text:0000000000418a7b\n.text:0000000000418a7d\n.text:0000000000418a83\n.text:0000000000418a86\n.text:0000000000418a89\n.text:0000000000418a8b\n.text:0000000000418a90\n.text:0000000000418a93\n.text:0000000000418a96\n.text:0000000000418a9b\n.text:0000000000418aa1\n.text:0000000000418aa4\n.text:0000000000418aa7\n.text:0000000000418aad\n.text:0000000000418ab2\n.text:0000000000418ab8\n.text:0000000000418abd\n.text:0000000000418ac0\n.text:0000000000418ac5\n.text:0000000000418aca\n.text:0000000000418acc\n.text:0000000000418ad2\n.text:0000000000418ad8\n.text:0000000000418add\n.text:0000000000418ae0\n.text:0000000000418ae3\n.text:0000000000418ae5\n.text:0000000000418ae8\n.text:0000000000418aee\n.text:0000000000418af2\n.text:0000000000418af4\n.text:0000000000418af6\n.text:0000000000418afb\n.text:0000000000418aff\n.text:0000000000418b05\n.text:0000000000418b09\n.text:0000000000418b0c\n.text:0000000000418b12\n.text:0000000000418b15\n.text:0000000000418b1b\n.text:0000000000418b20\n.text:0000000000418b24\n.text:0000000000418b29\n.text:0000000000418b31\n.text:0000000000418b40\n.text:0000000000418b45\n.text:0000000000418b48\n.text:0000000000418b4e\n.text:0000000000418b51\n.text:0000000000418b54\n.text:0000000000418b59\n.text:0000000000418b5e\n.text:0000000000418b64\n.text:0000000000418b68\n.text:0000000000418b6b\n.text:0000000000418b6e\n.text:0000000000418b70\n.text:0000000000418b73\n.text:0000000000418b76\n.text:0000000000418b7c\n.text:0000000000418b81\n.text:0000000000418b84\n.text:0000000000418b87\n.text:0000000000418b8c\n.text:0000000000418b90\n.text:0000000000418b93\n.text:0000000000418b96\n.text:0000000000418b9c\n.text:0000000000418ba1\n.text:0000000000418ba7\n.text:0000000000418bac\n.text:0000000000418baf\n.text:0000000000418bb4\n.text:0000000000418bb7\n.text:0000000000418bb9\n.text:0000000000418bbf\n.text:0000000000418bc3\n.text:0000000000418bc8\n.text:0000000000418bce\n.text:0000000000418bd0\n.text:0000000000418bd5\n.text:0000000000418bda\n.text:0000000000418bde\n.text:0000000000418be1\n.text:0000000000418be3\n.text:0000000000418be8\n.text:0000000000418bf0\n.text:0000000000418bf8\n.text:0000000000418bfb\n.text:0000000000418bfe\n.text:0000000000418c03\n.text:0000000000418c08\n.text:0000000000418c0d\n.text:0000000000418c12\n.text:0000000000418c18\n.text:0000000000418c1b\n.text:0000000000418c1f\n.text:0000000000418c23\n.text:0000000000418c27\n.text:0000000000418c2c\n.text:0000000000418c2f\n.text:0000000000418c34\n.text:0000000000418c37\n.text:0000000000418c3a\n.text:0000000000418c40\n.text:0000000000418c43\n.text:0000000000418c48\n.text:0000000000418c4d\n.text:0000000000418c50\n.text:0000000000418c55\n.text:0000000000418c57\n.text:0000000000418c5d\n.text:0000000000418c62\n.text:0000000000418c67\n.text:0000000000418c6c\n.text:0000000000418c6e\n.text:0000000000418c73\n.text:0000000000418c7b\n.text:0000000000418c80\n.text:0000000000418c83\n.text:0000000000418c85\n.text:0000000000418c8a\n.text:0000000000418c8f\n.text:0000000000418c92\n.text:0000000000418c95\n.text:0000000000418c9a\n.text:0000000000418c9c\n.text:0000000000418c9e\n.text:0000000000418ca3\n.text:0000000000418ca5\n.text:0000000000418caa\n.text:0000000000418cb0\n.text:0000000000418cb4\n.text:0000000000418cb7\n.text:0000000000418cb9\n.text:0000000000418cbd\n.text:0000000000418cc1\n.text:0000000000418cc5\n.text:0000000000418cc9\n.text:0000000000418ccc\n.text:0000000000418cce\n.text:0000000000418cd0\n.text:0000000000418cd5\n.text:0000000000418cd8\n.text:0000000000418cdd\n.text:0000000000418ce1\n.text:0000000000418ce4\n.text:0000000000418ce6\n.text:0000000000418cea\n.text:0000000000418cf2\n.text:0000000000418cf7\n.text:0000000000418cfa\n.text:0000000000418cff\n.text:0000000000418d02\n.text:0000000000418d05\n.text:0000000000418d0a\n.text:0000000000418d0d\n.text:0000000000418d12\n.text:0000000000418d17\n.text:0000000000418d1c\n.text:0000000000418d22\n.text:0000000000418d28\n.text:0000000000418d2e\n.text:0000000000418d34\n.text:0000000000418d37\n.text:0000000000418d3d\n.text:0000000000418d45\n.text:0000000000418d4a\n.text:0000000000418d4f\n.text:0000000000418d55\n.text:0000000000418d5a\n.text:0000000000418d5d\n.text:0000000000418d60\n.text:0000000000418d65\n.text:0000000000418d6a\n.text:0000000000418d6c\n.text:0000000000418d71\n.text:0000000000418d74\n.text:0000000000418d7a\n.text:0000000000418d7e\n.text:0000000000418d82\n.text:0000000000418d86\n.text:0000000000418d8b\n.text:0000000000418d8d\n.text:0000000000418d92\n.text:0000000000418d94\n.text:0000000000418d96\n.text:0000000000418d98\n.text:0000000000418d9e\n.text:0000000000418da2\n.text:0000000000418da7\n.text:0000000000418dac\n.text:0000000000418daf\n.text:0000000000418db4\n.text:0000000000418db6\n.text:0000000000418db8\n.text:0000000000418dbd\n.text:0000000000418dc0\n.text:0000000000418dc5\n.text:0000000000418dca\n.text:0000000000418dd0\n.text:0000000000418dd7\n.text:0000000000418ddc\n.text:0000000000418ddf\n.text:0000000000418de4\n.text:0000000000418de6\n.text:0000000000418dec\n.text:0000000000418df1\n.text:0000000000418df3\n.text:0000000000418df7\n.text:0000000000418dfc\n.text:0000000000418e01\n.text:0000000000418e05\n.text:0000000000418e07\n.text:0000000000418e0d\n.text:0000000000418e10\n.text:0000000000418e14\n.text:0000000000418e1a\n.text:0000000000418e1c\n.text:0000000000418e21\n.text:0000000000418e23\n.text:0000000000418e29\n.text:0000000000418e2e\n.text:0000000000418e30\n.text:0000000000418e34\n.text:0000000000418e39\n.text:0000000000418e3e\n.text:0000000000418e43\n.text:0000000000418e45\n.text:0000000000418e48\n.text:0000000000418e4e\n.text:0000000000418e54\n.text:0000000000418e58\n.text:0000000000418e5c\n.text:0000000000418e60\n.text:0000000000418e64\n.text:0000000000418e68\n.text:0000000000418e6d\n.text:0000000000418e71\n.text:0000000000418e76\n.text:0000000000418e7a\n.text:0000000000418e81\n.text:0000000000418e85\n.text:0000000000418e88\n.text:0000000000418e8d\n.text:0000000000418e90\n.text:0000000000418e93\n.text:0000000000418e99\n.text:0000000000418e9c\n.text:0000000000418ea2\n.text:0000000000418eaa\n.text:0000000000418eae\n.text:0000000000418eb0\n.text:0000000000418eb4\n.text:0000000000418eba\n.text:0000000000418ebf\n.text:0000000000418ec5\n.text:0000000000418ec7\n.text:0000000000418ecc\n.text:0000000000418ece\n.text:0000000000418ed2\n.text:0000000000418ed5\n.text:0000000000418ed8\n.text:0000000000418eda\n.text:0000000000418edd\n.text:0000000000418ee2\n.text:0000000000418ee4\n.text:0000000000418ee6\n.text:0000000000418ee8\n.text:0000000000418eeb\n.text:0000000000418eee\n.text:0000000000418ef3\n.text:0000000000418ef9\n.text:0000000000418efe\n.text:0000000000418f06\n.text:0000000000418f0c\n.text:0000000000418f0e\n.text:0000000000418f14\n.text:0000000000418f16\n.text:0000000000418f1a\n.text:0000000000418f1d\n.text:0000000000418f1f\n.text:0000000000418f22\n.text:0000000000418f26\n.text:0000000000418f2c\n.text:0000000000418f2f\n.text:0000000000418f32\n.text:0000000000418f34\n.text:0000000000418f3a\n.text:0000000000418f3c\n.text:0000000000418f41\n.text:0000000000418f45\n.text:0000000000418f48\n.text:0000000000418f4b\n.text:0000000000418f50\n.text:0000000000418f52\n.text:0000000000418f54\n.text:0000000000418f59\n.text:0000000000418f5f\n.text:0000000000418f62\n.text:0000000000418f65\n.text:0000000000418f69\n.text:0000000000418f6a\n.text:0000000000418f6c\n.text:0000000000418f6e\n.text:0000000000418f70\n.text:0000000000418f71\n.text:0000000000418f76\n.text:0000000000418f79\n.text:0000000000418f7e\n.text:0000000000418f82\n.text:0000000000418f87\n.text:0000000000418f8c\n.text:0000000000418f8f\n.text:0000000000418f91\n.text:0000000000418f95\n.text:0000000000418f97\n.text:0000000000418f9a\n.text:0000000000418f9d\n.text:0000000000418fa0\n.text:0000000000418fa3\n.text:0000000000418fa8\n.text:0000000000418faa\n.text:0000000000418fad\n.text:0000000000418fb0\n.text:0000000000418fb5\n.text:0000000000418fb7\n.text:0000000000418fbc\n.text:0000000000418fc0\n.text:0000000000418fc3\n.text:0000000000418fc5\n'
p1091
tp1092
sS'fts_lfree'
p1093
(S'\n__stdcall fts_lfree(FTSENT * head)\n'
p1094
V\u000avoid fts_lfree(FTSENT *head)\u000a\u000a{\u000a  _ftsent *p_Var1;\u000a  \u000a  if (head != (FTSENT *)0x0) {\u000a    do {\u000a      p_Var1 = head->fts_link;\u000a      if ((DIR *)head->fts_dirp != (DIR *)0x0) {\u000a        closedir((DIR *)head->fts_dirp);\u000a      }\u000a      free(head);\u000a      head = (FTSENT *)p_Var1;\u000a    } while (p_Var1 != (_ftsent *)0x0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1095
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00418892\nNOP dword ptr [RAX]\nMOV R14,qword ptr [RBX + 0x10]\nMOV RDI,qword ptr [RBX + 0x18]\nTEST RDI,RDI\nJZ 0x00418882\nCALL 0x00402ae0\nMOV RDI,RBX\nCALL 0x00402710\nTEST R14,R14\nMOV RBX,R14\nJNZ 0x00418870\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1096
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 26\n0f 1f 40 00\n4c 8b 73 10\n48 8b 7b 18\n48 85 ff\n74 05\ne8 5e a2 fe ff\n48 89 df\ne8 86 9e fe ff\n4d 85 f6\n4c 89 f3\n75 de\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1097
S'.text:0000000000418860\n.text:0000000000418862\n.text:0000000000418863\n.text:0000000000418864\n.text:0000000000418867\n.text:000000000041886a\n.text:000000000041886c\n.text:0000000000418870\n.text:0000000000418874\n.text:0000000000418878\n.text:000000000041887b\n.text:000000000041887d\n.text:0000000000418882\n.text:0000000000418885\n.text:000000000041888a\n.text:000000000041888d\n.text:0000000000418890\n.text:0000000000418892\n.text:0000000000418896\n.text:0000000000418897\n.text:0000000000418899\n'
p1098
tp1099
sS'c_isupper'
p1100
(S'\n__stdcall c_isupper()\n'
p1101
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p1102
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1103
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p1104
S'.text:000000000041ba40\n.text:000000000041ba43\n.text:000000000041ba46\n.text:000000000041ba49\n'
p1105
tp1106
sS'allocate_entry'
p1107
(S'\n__stdcall allocate_entry(Hash_table * table)\n'
p1108
V\u000ahash_entry * allocate_entry(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  \u000a  phVar1 = table->free_entry_list;\u000a  if (phVar1 != (hash_entry *)0x0) {\u000a    table->free_entry_list = phVar1->next;\u000a    return phVar1;\u000a  }\u000a  phVar1 = (hash_entry *)malloc(0x10);\u000a  return phVar1;\u000a}\u000a\u000a
p1109
S'MOV RAX,qword ptr [RDI + 0x48]\nTEST RAX,RAX\nJZ 0x004110a2\nMOV RCX,qword ptr [RAX + 0x8]\nMOV qword ptr [RDI + 0x48],RCX\nRET\nPUSH RAX\nMOV EDI,0x10\nCALL 0x00402c60\nADD RSP,0x8\nRET\n'
p1110
S'48 8b 47 48\n48 85 c0\n74 09\n48 8b 48 08\n48 89 4f 48\nc3\n50\nbf 10 00 00 00\ne8 b3 1b ff ff\n48 83 c4 08\nc3\n'
p1111
S'.text:0000000000411090\n.text:0000000000411094\n.text:0000000000411097\n.text:0000000000411099\n.text:000000000041109d\n.text:00000000004110a1\n.text:00000000004110a2\n.text:00000000004110a3\n.text:00000000004110a8\n.text:00000000004110ad\n.text:00000000004110b1\n'
p1112
tp1113
sS'pred_empty'
p1114
(S'\n__stdcall pred_empty(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p1115
V\u000a_Bool pred_empty(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  char cVar1;\u000a  uint uVar2;\u000a  ushort uVar3;\u000a  int __fd;\u000a  uint *puVar4;\u000a  DIR *__dirp;\u000a  dirent *pdVar5;\u000a  char *pcVar6;\u000a  undefined uVar7;\u000a  \u000a  uVar3 = *(ushort *)&stat_buf->st_mode & 0xf000;\u000a  if (uVar3 == 0x8000) {\u000a    return (_Bool)(stat_buf->st_size == 0);\u000a  }\u000a  if (uVar3 != 0x4000) {\u000a    return false;\u000a  }\u000a  puVar4 = (uint *)__errno_location();\u000a  *puVar4 = 0;\u000a  __fd = openat(state.cwd_dir_fd,state.rel_pathname,0);\u000a  if ((-1 < __fd) && (__dirp = fdopendir(__fd), __dirp != (DIR *)0x0)) {\u000a    *puVar4 = 0;\u000a    pdVar5 = readdir(__dirp);\u000a    uVar7 = 1;\u000a    while (pdVar5 != (dirent *)0x0) {\u000a      if (pdVar5->d_name[0] != '.') {\u000aLAB_00403fb6:\u000a        uVar7 = 0;\u000a        break;\u000a      }\u000a      cVar1 = pdVar5->d_name[1];\u000a      if (cVar1 == '.') {\u000a        cVar1 = pdVar5->d_name[2];\u000a      }\u000a      if (cVar1 != 0) goto LAB_00403fb6;\u000a      pdVar5 = readdir(__dirp);\u000a    }\u000a    uVar2 = *puVar4;\u000a    if (uVar2 != 0) {\u000a      pcVar6 = safely_quote_err_filename((char *)0x0);\u000a      goto LAB_00404015;\u000a    }\u000a    __fd = closedir(__dirp);\u000a    if (__fd == 0) {\u000a      return (_Bool)uVar7;\u000a    }\u000a  }\u000a  uVar2 = *puVar4;\u000a  pcVar6 = safely_quote_err_filename((char *)0x0);\u000aLAB_00404015:\u000a  error(0,(ulong)uVar2,&DAT_0042542f,pcVar6);\u000a  state.exit_status = 1;\u000a  return false;\u000a}\u000a\u000a
p1116
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14,RDI\nMOVZX EAX,word ptr [RSI + 0x18]\nAND EAX,0xf000\nCMP EAX,0x8000\nJZ 0x00403fdd\nMOVZX EAX,AX\nCMP EAX,0x4000\nJNZ 0x00403fe8\nCALL 0x00402770\nMOV R15,RAX\nMOV dword ptr [R15],0x0\nMOV EDI,dword ptr [0x0062f018]\nMOV RSI,qword ptr [0x0062f010]\nXOR EDX,EDX\nXOR EAX,EAX\nCALL 0x00402950\nTEST EAX,EAX\nJS 0x00403ff8\nMOV EDI,EAX\nCALL 0x00402e30\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00403ff8\nMOV dword ptr [R15],0x0\nMOV RDI,RBX\nCALL 0x00402c30\nMOV BPL,0x1\nTEST RAX,RAX\nJNZ 0x00403f8d\nJMP 0x00403fb8\nMOV RDI,RBX\nCALL 0x00402c30\nTEST RAX,RAX\nJZ 0x00403fb8\nCMP byte ptr [RAX + 0x13],0x2e\nJNZ 0x00403fb6\nMOVZX ECX,byte ptr [RAX + 0x14]\nCMP CL,0x2e\nJZ 0x00403fb0\nTEST CL,CL\nJZ 0x00403f80\nJMP 0x00403fb6\nCMP byte ptr [RAX + 0x15],0x0\nJZ 0x00403f80\nXOR EBP,EBP\nMOV R12D,dword ptr [R15]\nTEST R12D,R12D\nJZ 0x00403fec\nXOR EBP,EBP\nXOR EDI,EDI\nMOV RSI,R14\nCALL 0x00408920\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x42542f\nXOR EAX,EAX\nMOV ESI,R12D\nJMP 0x00404015\nCMP qword ptr [RSI + 0x30],0x0\nSETZ BPL\nJMP 0x00404024\nXOR EBP,EBP\nJMP 0x00404024\nMOV RDI,RBX\nCALL 0x00402ae0\nTEST EAX,EAX\nJZ 0x00404024\nMOV EBX,dword ptr [R15]\nXOR EBP,EBP\nXOR EDI,EDI\nMOV RSI,R14\nCALL 0x00408920\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x42542f\nXOR EAX,EAX\nMOV ESI,EBX\nCALL 0x00402d90\nMOV dword ptr [0x0062f024],0x1\nMOV EAX,EBP\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1117
S'55\n41 57\n41 56\n41 54\n53\n49 89 fe\n0f b7 46 18\n25 00 f0 00 00\n3d 00 80 00 00\n0f 84 ce 00 00 00\n0f b7 c0\n3d 00 40 00 00\n0f 85 cb 00 00 00\ne8 4e e8 ff ff\n49 89 c7\n41 c7 07 00 00 00 00\n8b 3d e6 b0 22 00\n48 8b 35 d7 b0 22 00\n31 d2\n31 c0\ne8 0e ea ff ff\n85 c0\n0f 88 ae 00 00 00\n89 c7\ne8 df ee ff ff\n48 89 c3\n48 85 db\n0f 84 9b 00 00 00\n41 c7 07 00 00 00 00\n48 89 df\ne8 c4 ec ff ff\n40 b5 01\n48 85 c0\n75 19\neb 42\n48 89 df\ne8 a8 ec ff ff\n48 85 c0\n74 2b\n80 78 13 2e\n75 23\n0f b6 48 14\n80 f9 2e\n74 14\n84 c9\n74 e0\neb 14\n80 78 15 00\n74 ca\n31 ed\n45 8b 27\n45 85 e4\n74 2c\n31 ed\n31 ff\n4c 89 f6\ne8 54 49 00 00\n48 89 c1\n31 ff\nba 2f 54 42 00\n31 c0\n44 89 e6\neb 38\n48 83 7e 30 00\n40 0f 94 c5\neb 3c\n31 ed\neb 38\n48 89 df\ne8 ec ea ff ff\n85 c0\n74 2c\n41 8b 1f\n31 ed\n31 ff\n4c 89 f6\ne8 19 49 00 00\n48 89 c1\n31 ff\nba 2f 54 42 00\n31 c0\n89 de\ne8 76 ed ff ff\nc7 05 00 b0 22 00 01 00 00 00\n89 e8\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1118
S'.text:0000000000403ef0\n.text:0000000000403ef1\n.text:0000000000403ef3\n.text:0000000000403ef5\n.text:0000000000403ef7\n.text:0000000000403ef8\n.text:0000000000403efb\n.text:0000000000403eff\n.text:0000000000403f04\n.text:0000000000403f09\n.text:0000000000403f0f\n.text:0000000000403f12\n.text:0000000000403f17\n.text:0000000000403f1d\n.text:0000000000403f22\n.text:0000000000403f25\n.text:0000000000403f2c\n.text:0000000000403f32\n.text:0000000000403f39\n.text:0000000000403f3b\n.text:0000000000403f3d\n.text:0000000000403f42\n.text:0000000000403f44\n.text:0000000000403f4a\n.text:0000000000403f4c\n.text:0000000000403f51\n.text:0000000000403f54\n.text:0000000000403f57\n.text:0000000000403f5d\n.text:0000000000403f64\n.text:0000000000403f67\n.text:0000000000403f6c\n.text:0000000000403f6f\n.text:0000000000403f72\n.text:0000000000403f74\n.text:0000000000403f80\n.text:0000000000403f83\n.text:0000000000403f88\n.text:0000000000403f8b\n.text:0000000000403f8d\n.text:0000000000403f91\n.text:0000000000403f93\n.text:0000000000403f97\n.text:0000000000403f9a\n.text:0000000000403f9c\n.text:0000000000403f9e\n.text:0000000000403fa0\n.text:0000000000403fb0\n.text:0000000000403fb4\n.text:0000000000403fb6\n.text:0000000000403fb8\n.text:0000000000403fbb\n.text:0000000000403fbe\n.text:0000000000403fc0\n.text:0000000000403fc2\n.text:0000000000403fc4\n.text:0000000000403fc7\n.text:0000000000403fcc\n.text:0000000000403fcf\n.text:0000000000403fd1\n.text:0000000000403fd6\n.text:0000000000403fd8\n.text:0000000000403fdb\n.text:0000000000403fdd\n.text:0000000000403fe2\n.text:0000000000403fe6\n.text:0000000000403fe8\n.text:0000000000403fea\n.text:0000000000403fec\n.text:0000000000403fef\n.text:0000000000403ff4\n.text:0000000000403ff6\n.text:0000000000403ff8\n.text:0000000000403ffb\n.text:0000000000403ffd\n.text:0000000000403fff\n.text:0000000000404002\n.text:0000000000404007\n.text:000000000040400a\n.text:000000000040400c\n.text:0000000000404011\n.text:0000000000404013\n.text:0000000000404015\n.text:000000000040401a\n.text:0000000000404024\n.text:0000000000404026\n.text:0000000000404027\n.text:0000000000404029\n.text:000000000040402b\n.text:000000000040402d\n.text:000000000040402e\n'
p1119
tp1120
sS'rpmatch'
p1121
(S'\n__stdcall rpmatch(char * __response)\n'
p1122
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint rpmatch(char *__response)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_rpmatch_0062d278)();\u000a  return iVar1;\u000a}\u000a\u000a
p1123
S'JMP qword ptr [0x0062d278]\n'
p1124
S'ff 25 c2 a6 22 00\n'
p1125
S'.plt:0000000000402bb0\n'
p1126
tp1127
sS'modf'
p1128
(S'\n__stdcall modf(double __x, double * __iptr)\n'
p1129
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000adouble modf(double __x,double *__iptr)\u000a\u000a{\u000a  double dVar1;\u000a  \u000a  dVar1 = (double)(*(code *)PTR_modf_0062d198)();\u000a  return dVar1;\u000a}\u000a\u000a
p1130
S'JMP qword ptr [0x0062d198]\n'
p1131
S'ff 25 a2 a7 22 00\n'
p1132
S'.plt:00000000004029f0\n'
p1133
tp1134
sS'decide_size'
p1135
(S'\n__stdcall decide_size(size_t current, size_t wanted)\n'
p1136
V\u000asize_t decide_size(size_t current,size_t wanted)\u000a\u000a{\u000a  ulong uVar1;\u000a  bool bVar2;\u000a  \u000a  uVar1 = 0x10;\u000a  if (current != 0) {\u000a    uVar1 = current;\u000a  }\u000a  do {\u000a    if (wanted <= uVar1) {\u000a      return uVar1;\u000a    }\u000a    bVar2 = uVar1 <= uVar1 * 2;\u000a    uVar1 = uVar1 * 2;\u000a  } while (bVar2);\u000a  return wanted;\u000a}\u000a\u000a
p1137
S'TEST RDI,RDI\nMOV EAX,0x10\nCMOVNZ RAX,RDI\nNOP dword ptr [RAX]\nCMP RAX,RSI\nJNC 0x0040e6d4\nLEA RCX,[RAX + RAX*0x1]\nCMP RCX,RAX\nMOV RAX,RCX\nJNC 0x0040e6c0\nMOV RAX,RSI\nRET\n'
p1138
S'48 85 ff\nb8 10 00 00 00\n48 0f 45 c7\n0f 1f 40 00\n48 39 f0\n73 0f\n48 8d 0c 00\n48 39 c1\n48 89 c8\n73 ef\n48 89 f0\nc3\n'
p1139
S'.text:000000000040e6b0\n.text:000000000040e6b3\n.text:000000000040e6b8\n.text:000000000040e6bc\n.text:000000000040e6c0\n.text:000000000040e6c3\n.text:000000000040e6c5\n.text:000000000040e6c9\n.text:000000000040e6cc\n.text:000000000040e6cf\n.text:000000000040e6d1\n.text:000000000040e6d4\n'
p1140
tp1141
sS'set_custom_quoting'
p1142
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p1143
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1144
S'TEST RDI,RDI\nMOV EAX,0x62e690\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00415235\nTEST RDX,RDX\nJZ 0x00415235\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00402750\n'
p1145
S'48 85 ff\nb8 90 e6 62 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 15 d5 fe ff\n'
p1146
S'.text:0000000000415210\n.text:0000000000415213\n.text:0000000000415218\n.text:000000000041521c\n.text:0000000000415222\n.text:0000000000415225\n.text:0000000000415227\n.text:000000000041522a\n.text:000000000041522c\n.text:0000000000415230\n.text:0000000000415234\n.text:0000000000415235\n.text:0000000000415236\n'
p1147
tp1148
sS'ftypelet'
p1149
(S'\n__stdcall ftypelet()\n'
p1150
V\u000achar ftypelet(void)\u000a\u000a{\u000a  uint uVar1;\u000a  undefined8 in_RDI;\u000a  \u000a  uVar1 = ((uint)in_RDI & 0xf000) - 0x1000;\u000a  if (uVar1 < 0xc000) {\u000a    return "pc?d?b?-?l?s"[(ulong)(uVar1 >> 0xc)];\u000a  }\u000a  return '?';\u000a}\u000a\u000a
p1151
S'AND EDI,0xf000\nADD EDI,0xfffff000\nCMP EDI,0xbfff\nJA 0x0041031e\nSHR EDI,0xc\nMOV AL,byte ptr [0x42280d + RDI]\nRET\nMOV AL,0x3f\nRET\n'
p1152
S'81 e7 00 f0 00 00\n81 c7 00 f0 ff ff\n81 ff ff bf 00 00\n77 0a\nc1 ef 0c\n8a 87 0d 28 42 00\nc3\nb0 3f\nc3\n'
p1153
S'.text:0000000000410300\n.text:0000000000410306\n.text:000000000041030c\n.text:0000000000410312\n.text:0000000000410314\n.text:0000000000410317\n.text:000000000041031d\n.text:000000000041031e\n.text:0000000000410320\n'
p1154
tp1155
sS'set_hhmmss'
p1156
(S'\n__stdcall set_hhmmss(parser_control * pc, long hour, long minutes, time_t sec, long nsec)\n'
p1157
V\u000avoid set_hhmmss(parser_control *pc,long hour,long minutes,time_t sec,long nsec)\u000a\u000a{\u000a  pc->hour = hour;\u000a  pc->minutes = minutes;\u000a  (pc->seconds).tv_sec = sec;\u000a  (pc->seconds).tv_nsec = nsec;\u000a  return;\u000a}\u000a\u000a
p1158
S'MOV qword ptr [RDI + 0x50],RSI\nMOV qword ptr [RDI + 0x58],RDX\nMOV qword ptr [RDI + 0x60],RCX\nMOV qword ptr [RDI + 0x68],R8\nRET\n'
p1159
S'48 89 77 50\n48 89 57 58\n48 89 4f 60\n4c 89 47 68\nc3\n'
p1160
S'.text:00000000004140f0\n.text:00000000004140f4\n.text:00000000004140f8\n.text:00000000004140fc\n.text:0000000000414100\n'
p1161
tp1162
sS'pred_and'
p1163
(S'\n__stdcall pred_and(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p1164
V\u000a_Bool pred_and(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  if (pred_ptr->pred_left != (predicate *)0x0) {\u000a    _Var1 = apply_predicate(pathname,stat_buf,pred_ptr->pred_left);\u000a    if (_Var1 == false) {\u000a      return false;\u000a    }\u000a  }\u000a  _Var1 = apply_predicate(pathname,stat_buf,pred_ptr->pred_right);\u000a  return _Var1;\u000a}\u000a\u000a
p1165
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV RBX,RDX\nMOV R14,RSI\nMOV R15,RDI\nMOV RDX,qword ptr [0x110 + RBX]\nTEST RDX,RDX\nJZ 0x00403cb9\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x004088a0\nTEST AL,AL\nJZ 0x00403cd0\nMOV RDX,qword ptr [0x118 + RBX]\nMOV RDI,R15\nMOV RSI,R14\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x004088a0\nXOR EAX,EAX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1166
S'41 57\n41 56\n53\n48 89 d3\n49 89 f6\n49 89 ff\n48 8b 93 10 01 00 00\n48 85 d2\n74 0f\n4c 89 ff\n4c 89 f6\ne8 eb 4b 00 00\n84 c0\n74 17\n48 8b 93 18 01 00 00\n4c 89 ff\n4c 89 f6\n5b\n41 5e\n41 5f\ne9 d0 4b 00 00\n31 c0\n5b\n41 5e\n41 5f\nc3\n'
p1167
S'.text:0000000000403c90\n.text:0000000000403c92\n.text:0000000000403c94\n.text:0000000000403c95\n.text:0000000000403c98\n.text:0000000000403c9b\n.text:0000000000403c9e\n.text:0000000000403ca5\n.text:0000000000403ca8\n.text:0000000000403caa\n.text:0000000000403cad\n.text:0000000000403cb0\n.text:0000000000403cb5\n.text:0000000000403cb7\n.text:0000000000403cb9\n.text:0000000000403cc0\n.text:0000000000403cc3\n.text:0000000000403cc6\n.text:0000000000403cc7\n.text:0000000000403cc9\n.text:0000000000403ccb\n.text:0000000000403cd0\n.text:0000000000403cd2\n.text:0000000000403cd3\n.text:0000000000403cd5\n.text:0000000000403cd7\n'
p1168
tp1169
sS'faccessat'
p1170
(S'\n__stdcall faccessat(int __fd, char * __file, int __type, int __flag)\n'
p1171
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint faccessat(int __fd,char *__file,int __type,int __flag)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_faccessat_0062d0d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p1172
S'JMP qword ptr [0x0062d0d8]\n'
p1173
S'ff 25 62 a8 22 00\n'
p1174
S'.plt:0000000000402870\n'
p1175
tp1176
sS'insert_primary_withpred'
p1177
(S'\n__stdcall insert_primary_withpred(parser_table * entry, PRED_FUNC * pred_func, char * arg)\n'
p1178
V\u000apredicate *\u000ainsert_primary_withpred(parser_table *entry,_Bool (*pred_func)(char *,stat *,predicate *),char *arg)\u000a\u000a{\u000a  predicate *ppVar1;\u000a  \u000a  ppVar1 = get_new_pred_chk_op(entry,arg);\u000a  ppVar1->pred_func = pred_func;\u000a  ppVar1->p_name = entry->parser_name;\u000a  *(undefined8 *)ppVar1->args = 0;\u000a  *(undefined8 *)&ppVar1->p_type = 1;\u000a  return ppVar1;\u000a}\u000a\u000a
p1179
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RSI,RDX\nCALL 0x00406c00\nMOV qword ptr [RAX],R14\nMOV RCX,qword ptr [RBX + 0x8]\nMOV qword ptr [RAX + 0x8],RCX\nMOV qword ptr [RAX + 0x38],0x0\nMOV qword ptr [RAX + 0x10],0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1180
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n48 89 d6\ne8 fe f4 ff ff\n4c 89 30\n48 8b 4b 08\n48 89 48 08\n48 c7 40 38 00 00 00 00\n48 c7 40 10 01 00 00 00\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1181
S'.text:00000000004076f0\n.text:00000000004076f2\n.text:00000000004076f3\n.text:00000000004076f4\n.text:00000000004076f7\n.text:00000000004076fa\n.text:00000000004076fd\n.text:0000000000407702\n.text:0000000000407705\n.text:0000000000407709\n.text:000000000040770d\n.text:0000000000407715\n.text:000000000040771d\n.text:0000000000407721\n.text:0000000000407722\n.text:0000000000407724\n'
p1182
tp1183
sS'pred_mtime'
p1184
(S'\n__stdcall pred_mtime(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p1185
V\u000a_Bool pred_mtime(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  timespec tVar2;\u000a  \u000a  tVar2 = get_stat_mtime(stat_buf);\u000a  _Var1 = pred_timewindow(SUB168((undefined  [16])tVar2,0));\u000a  return _Var1;\u000a}\u000a\u000a
p1186
S'PUSH RBX\nMOV RBX,RDX\nMOV RDI,RSI\nCALL 0x00416c90\nMOV ECX,0x15180\nMOV RDI,RAX\nMOV RSI,RDX\nMOV RDX,RBX\nPOP RBX\nJMP 0x00404a30\n'
p1187
S'53\n48 89 d3\n48 89 f7\ne8 04 2a 01 00\nb9 80 51 01 00\n48 89 c7\n48 89 d6\n48 89 da\n5b\ne9 90 07 00 00\n'
p1188
S'.text:0000000000404280\n.text:0000000000404281\n.text:0000000000404284\n.text:0000000000404287\n.text:000000000040428c\n.text:0000000000404291\n.text:0000000000404294\n.text:0000000000404297\n.text:000000000040429a\n.text:000000000040429b\n'
p1189
tp1190
sS'inside_dir'
p1191
(S'\n__stdcall inside_dir()\n'
p1192
V\u000aundefined8 inside_dir(int iParm1)\u000a\u000a{\u000a  undefined8 in_RAX;\u000a  \u000a  if ((ftsoptions._1_1_ & 2) != 0) {\u000a    if ((iParm1 != -100) && (iParm1 < 0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("dir_fd == AT_FDCWD || dir_fd >= 0","ftsfind.c",0x71,"void inside_dir(int)");\u000a    }\u000a    state.cwd_dir_fd = iParm1;\u000a    if (curr_fd < 0) {\u000a      if (iParm1 == -100) {\u000a        curr_fd = -100;\u000a        state.cwd_dir_fd = iParm1;\u000a        return in_RAX;\u000a      }\u000a      if (iParm1 < 0) {\u000a        state.cwd_dir_fd = iParm1;\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("curr_fd >= 0 || dir_fd >= 0","ftsfind.c",0x83,"void inside_dir(int)");\u000a      }\u000a      state.cwd_dir_fd = iParm1;\u000a      curr_fd = dup_cloexec();\u000a    }\u000a  }\u000a  return in_RAX;\u000a}\u000a\u000a
p1193
S'PUSH RAX\nTEST byte ptr [0x0062d481],0x2\nJZ 0x004034d2\nCMP EDI,-0x64\nJZ 0x004034a3\nTEST EDI,EDI\nJS 0x004034d4\nMOV dword ptr [0x0062f018],EDI\nCMP dword ptr [0x0062d484],0x0\nJNS 0x004034d2\nCMP EDI,-0x64\nJNZ 0x004034c3\nMOV dword ptr [0x0062d484],0xffffff9c\nPOP RAX\nRET\nTEST EDI,EDI\nJS 0x004034ed\nCALL 0x0040fe30\nMOV dword ptr [0x0062d484],EAX\nPOP RAX\nRET\nMOV EDI,0x41c6e1\nMOV ESI,0x41c703\nMOV EDX,0x71\nMOV ECX,0x41c70d\nCALL 0x00402a40\nMOV EDI,0x41c722\nMOV ESI,0x41c703\nMOV EDX,0x83\nMOV ECX,0x41c70d\nCALL 0x00402a40\n'
p1194
S'50\nf6 05 e9 9f 22 00 02\n74 38\n83 ff 9c\n74 04\n85 ff\n78 31\n89 3d 6f bb 22 00\n83 3d d4 9f 22 00 00\n79 20\n83 ff 9c\n75 0c\nc7 05 c3 9f 22 00 9c ff ff ff\n58\nc3\n85 ff\n78 26\ne8 64 c9 00 00\n89 05 b2 9f 22 00\n58\nc3\nbf e1 c6 41 00\nbe 03 c7 41 00\nba 71 00 00 00\nb9 0d c7 41 00\ne8 53 f5 ff ff\nbf 22 c7 41 00\nbe 03 c7 41 00\nba 83 00 00 00\nb9 0d c7 41 00\ne8 3a f5 ff ff\n'
p1195
S'.text:0000000000403490\n.text:0000000000403491\n.text:0000000000403498\n.text:000000000040349a\n.text:000000000040349d\n.text:000000000040349f\n.text:00000000004034a1\n.text:00000000004034a3\n.text:00000000004034a9\n.text:00000000004034b0\n.text:00000000004034b2\n.text:00000000004034b5\n.text:00000000004034b7\n.text:00000000004034c1\n.text:00000000004034c2\n.text:00000000004034c3\n.text:00000000004034c5\n.text:00000000004034c7\n.text:00000000004034cc\n.text:00000000004034d2\n.text:00000000004034d3\n.text:00000000004034d4\n.text:00000000004034d9\n.text:00000000004034de\n.text:00000000004034e3\n.text:00000000004034e8\n.text:00000000004034ed\n.text:00000000004034f2\n.text:00000000004034f7\n.text:00000000004034fc\n.text:0000000000403501\n'
p1196
tp1197
sS'dup_safer'
p1198
(S'\n__stdcall dup_safer()\n'
p1199
V\u000aint dup_safer(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 in_RDI;\u000a  \u000a  iVar1 = rpl_fcntl(in_RDI,0,3);\u000a  return iVar1;\u000a}\u000a\u000a
p1200
S'XOR ESI,ESI\nMOV EDX,0x3\nXOR EAX,EAX\nJMP 0x00417de0\n'
p1201
S'31 f6\nba 03 00 00 00\n31 c0\ne9 e2 10 00 00\n'
p1202
S'.text:0000000000416cf0\n.text:0000000000416cf2\n.text:0000000000416cf7\n.text:0000000000416cf9\n'
p1203
tp1204
sS'pred_print0'
p1205
(S'\n__stdcall pred_print0(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p1206
V\u000a_Bool pred_print0(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  pred_fprint0(pathname,stat_buf,pred_ptr);\u000a  return true;\u000a}\u000a\u000a
p1207
S'PUSH RAX\nCALL 0x004040c0\nMOV AL,0x1\nPOP RCX\nRET\n'
p1208
S'50\ne8 ca fa ff ff\nb0 01\n59\nc3\n'
p1209
S'.text:00000000004045f0\n.text:00000000004045f1\n.text:00000000004045f6\n.text:00000000004045f8\n.text:00000000004045f9\n'
p1210
tp1211
sS'__ctype_b_loc'
p1212
(S'\n__stdcall __ctype_b_loc()\n'
p1213
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_0062d460)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p1214
S'JMP qword ptr [0x0062d460]\n'
p1215
S'ff 25 da a4 22 00\n'
p1216
S'.plt:0000000000402f80\n'
p1217
tp1218
sS'matches_start_point'
p1219
(S'\n__stdcall matches_start_point(char * glob)\n'
p1220
V\u000a_Bool matches_start_point(char *glob)\u000a\u000a{\u000a  bool bVar1;\u000a  int iVar2;\u000a  ulong uVar3;\u000a  int __flags;\u000a  undefined8 in_RSI;\u000a  \u000a  __flags = ((uint)in_RSI & 0xff) << 4;\u000a  if (num_start_points == 0) {\u000a    __flags = fnmatch(glob,\u000a                           "warning: Unix filenames usually don\u005c't contain slashes (though pathnames do).  That means that \u005c'%s %s\u005c' will probably evaluate to false all the time on this system.  You might find the \u005c'-wholename\u005c' test more useful, or perhaps \u005c'-samefile\u005c'.  Alternatively, if you are using GNU grep, you could use \u005c'find ... -print0 | grep -FzZ %s\u005c'."\u000a                           + 0x148,__flags);\u000a    bVar1 = __flags == 0;\u000a  }\u000a  else {\u000a    if (num_start_points == 0) {\u000a      bVar1 = false;\u000a    }\u000a    else {\u000a      uVar3 = 0;\u000a      do {\u000a        iVar2 = fnmatch(glob,start_points[uVar3],__flags);\u000a        if (iVar2 == 0) {\u000a          return true;\u000a        }\u000a        uVar3 = uVar3 + 1;\u000a      } while (uVar3 < num_start_points);\u000a      bVar1 = false;\u000a    }\u000a  }\u000a  return (_Bool)bVar1;\u000a}\u000a\u000a
p1221
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RDI\nMOVZX EBP,SIL\nSHL EBP,0x4\nCMP qword ptr [0x0062de88],0x0\nJZ 0x00405859\nCMP qword ptr [0x0062de88],0x0\nJZ 0x0040586f\nXOR EBX,EBX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RAX,qword ptr [0x0062de90]\nMOV RSI,qword ptr [RAX + RBX*0x8]\nMOV RDI,R14\nMOV EDX,EBP\nCALL 0x00402a60\nTEST EAX,EAX\nJZ 0x00405873\nINC RBX\nCMP RBX,qword ptr [0x0062de88]\nJC 0x00405830\nXOR EAX,EAX\nJMP 0x00405875\nMOV ESI,0x4217ea\nMOV RDI,R14\nMOV EDX,EBP\nCALL 0x00402a60\nTEST EAX,EAX\nSETZ AL\nJMP 0x00405875\nXOR EAX,EAX\nJMP 0x00405875\nMOV AL,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1222
S'55\n41 56\n53\n49 89 fe\n40 0f b6 ee\nc1 e5 04\n48 83 3d 72 86 22 00 00\n74 41\n48 83 3d 68 86 22 00 00\n74 4d\n31 db\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 05 59 86 22 00\n48 8b 34 d8\n4c 89 f7\n89 ea\ne8 1b d2 ff ff\n85 c0\n74 2a\n48 ff c3\n48 3b 1d 35 86 22 00\n72 db\n31 c0\neb 1c\nbe ea 17 42 00\n4c 89 f7\n89 ea\ne8 f8 d1 ff ff\n85 c0\n0f 94 c0\neb 06\n31 c0\neb 02\nb0 01\n5b\n41 5e\n5d\nc3\n'
p1223
S'.text:0000000000405800\n.text:0000000000405801\n.text:0000000000405803\n.text:0000000000405804\n.text:0000000000405807\n.text:000000000040580b\n.text:000000000040580e\n.text:0000000000405816\n.text:0000000000405818\n.text:0000000000405820\n.text:0000000000405822\n.text:0000000000405824\n.text:0000000000405830\n.text:0000000000405837\n.text:000000000040583b\n.text:000000000040583e\n.text:0000000000405840\n.text:0000000000405845\n.text:0000000000405847\n.text:0000000000405849\n.text:000000000040584c\n.text:0000000000405853\n.text:0000000000405855\n.text:0000000000405857\n.text:0000000000405859\n.text:000000000040585e\n.text:0000000000405861\n.text:0000000000405863\n.text:0000000000405868\n.text:000000000040586a\n.text:000000000040586d\n.text:000000000040586f\n.text:0000000000405871\n.text:0000000000405873\n.text:0000000000405875\n.text:0000000000405876\n.text:0000000000405878\n.text:0000000000405879\n'
p1224
tp1225
sS'quotearg'
p1226
(S'\n__stdcall quotearg(char * arg)\n'
p1227
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1228
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00416090\n'
p1229
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1230
S'.text:0000000000416270\n.text:0000000000416273\n.text:0000000000416275\n.text:0000000000416278\n'
p1231
tp1232
sS'hash_reset_tuning'
p1233
(S'\n__stdcall hash_reset_tuning(Hash_tuning * tuning)\n'
p1234
V\u000avoid hash_reset_tuning(Hash_tuning *tuning)\u000a\u000a{\u000a  float fVar1;\u000a  float fVar2;\u000a  float fVar3;\u000a  \u000a  *(undefined4 *)&tuning->is_n_buckets = default_tuning._16_4_;\u000a  fVar3 = default_tuning.growth_factor;\u000a  fVar2 = default_tuning.growth_threshold;\u000a  fVar1 = default_tuning.shrink_factor;\u000a  tuning->shrink_threshold = default_tuning.shrink_threshold;\u000a  tuning->shrink_factor = fVar1;\u000a  tuning->growth_threshold = fVar2;\u000a  tuning->growth_factor = fVar3;\u000a  return;\u000a}\u000a\u000a
p1235
S'MOV EAX,dword ptr [0x004228b4]\nMOV dword ptr [RDI + 0x10],EAX\nMOVUPS XMM0,xmmword ptr [0x004228a4]\nMOVUPS xmmword ptr [RDI],XMM0\nRET\n'
p1236
S'8b 05 de 20 01 00\n89 47 10\n0f 10 05 c4 20 01 00\n0f 11 07\nc3\n'
p1237
S'.text:00000000004107d0\n.text:00000000004107d6\n.text:00000000004107d9\n.text:00000000004107e0\n.text:00000000004107e3\n'
p1238
tp1239
sS'parse_delete'
p1240
(S'\n__stdcall parse_delete(parser_table * entry, char * * argv, int * arg_ptr)\n'
p1241
V\u000a_Bool parse_delete(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  predicate *ppVar1;\u000a  \u000a  ppVar1 = insert_primary_noarg(entry);\u000a  ppVar1->no_default_print = true;\u000a  ppVar1->side_effects = true;\u000a  options.do_dir_first = false;\u000a  ppVar1->need_type = false;\u000a  ppVar1->need_stat = false;\u000a  ppVar1->est_success_rate = 1.00000000;\u000a  return true;\u000a}\u000a\u000a
p1242
S'PUSH RAX\nCALL 0x00407760\nMOV byte ptr [RAX + 0x19],0x1\nMOV byte ptr [RAX + 0x18],0x1\nMOV byte ptr [0x0062f040],0x0\nMOV byte ptr [RAX + 0x1b],0x0\nMOV byte ptr [RAX + 0x1a],0x0\nMOV dword ptr [RAX + 0x24],0x3f800000\nMOV AL,0x1\nPOP RCX\nRET\n'
p1243
S'50\ne8 3a c4 ff ff\nc6 40 19 01\nc6 40 18 01\nc6 05 0b 3d 22 00 00\nc6 40 1b 00\nc6 40 1a 00\nc7 40 24 00 00 80 3f\nb0 01\n59\nc3\n'
p1244
S'.text:000000000040b320\n.text:000000000040b321\n.text:000000000040b326\n.text:000000000040b32a\n.text:000000000040b32e\n.text:000000000040b335\n.text:000000000040b339\n.text:000000000040b33d\n.text:000000000040b344\n.text:000000000040b346\n.text:000000000040b347\n'
p1245
tp1246
sS'worst_cost'
p1247
(S'\n__stdcall worst_cost(predicate * p)\n'
p1248
V\u000aint worst_cost(predicate *p)\u000a\u000a{\u000a  EvaluationCost EVar1;\u000a  EvaluationCost EVar2;\u000a  \u000a  if (p == (predicate *)0x0) {\u000a    EVar2 = NeedsNothing;\u000a  }\u000a  else {\u000a    EVar1 = worst_cost(p->pred_left);\u000a    EVar2 = worst_cost(p->pred_right);\u000a    if (EVar2 < EVar1) {\u000a      EVar2 = EVar1;\u000a    }\u000a    if (EVar2 < p->p_cost) {\u000a      EVar2 = p->p_cost;\u000a    }\u000a  }\u000a  return (int)EVar2;\u000a}\u000a\u000a
p1249
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x004076b4\nMOV RDI,qword ptr [0x110 + RBX]\nCALL 0x00407680\nMOV EBP,EAX\nMOV RDI,qword ptr [0x118 + RBX]\nCALL 0x00407680\nCMP EBP,EAX\nCMOVA EAX,EBP\nMOV ECX,dword ptr [RBX + 0x20]\nCMP EAX,ECX\nCMOVC EAX,ECX\nJMP 0x004076b6\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1250
S'55\n53\n50\n48 89 fb\n48 85 db\n74 29\n48 8b bb 10 01 00 00\ne8 e9 ff ff ff\n89 c5\n48 8b bb 18 01 00 00\ne8 db ff ff ff\n39 c5\n0f 47 c5\n8b 4b 20\n39 c8\n0f 42 c1\neb 02\n31 c0\n48 83 c4 08\n5b\n5d\nc3\n'
p1251
S'.text:0000000000407680\n.text:0000000000407681\n.text:0000000000407682\n.text:0000000000407683\n.text:0000000000407686\n.text:0000000000407689\n.text:000000000040768b\n.text:0000000000407692\n.text:0000000000407697\n.text:0000000000407699\n.text:00000000004076a0\n.text:00000000004076a5\n.text:00000000004076a7\n.text:00000000004076aa\n.text:00000000004076ad\n.text:00000000004076af\n.text:00000000004076b2\n.text:00000000004076b4\n.text:00000000004076b6\n.text:00000000004076ba\n.text:00000000004076bb\n.text:00000000004076bc\n'
p1252
tp1253
sS'fatal_nontarget_file_error'
p1254
(S'\n__stdcall fatal_nontarget_file_error(char * name)\n'
p1255
V\u000avoid fatal_nontarget_file_error(char *name)\u000a\u000a{\u000a  state.already_issued_stat_error_msg = false;\u000a  report_file_err((char *)0x1);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1256
S'PUSH RAX\nMOV RAX,RSI\nMOV ECX,EDI\nMOV byte ptr [0x0062f038],0x0\nMOV EDI,0x1\nXOR EDX,EDX\nMOV ESI,ECX\nMOV RCX,RAX\nCALL 0x00408940\nCALL 0x00402750\n'
p1257
S'50\n48 89 f0\n89 f9\nc6 05 6b 66 22 00 00\nbf 01 00 00 00\n31 d2\n89 ce\n48 89 c1\ne8 62 ff ff ff\ne8 6d 9d ff ff\n'
p1258
S'.text:00000000004089c0\n.text:00000000004089c1\n.text:00000000004089c4\n.text:00000000004089c6\n.text:00000000004089cd\n.text:00000000004089d2\n.text:00000000004089d4\n.text:00000000004089d6\n.text:00000000004089d9\n.text:00000000004089de\n'
p1259
tp1260
sS'cycle_check_init'
p1261
(S'\n__stdcall cycle_check_init(cycle_check_state * state)\n'
p1262
V\u000avoid cycle_check_init(cycle_check_state *state)\u000a\u000a{\u000a  state->chdir_counter = 0;\u000a  state->magic = 0x95f616;\u000a  return;\u000a}\u000a\u000a
p1263
S'MOV qword ptr [RDI + 0x10],0x0\nMOV dword ptr [RDI + 0x18],0x95f616\nRET\n'
p1264
S'48 c7 47 10 00 00 00 00\nc7 47 18 16 f6 95 00\nc3\n'
p1265
S'.text:000000000041bb00\n.text:000000000041bb08\n.text:000000000041bb0f\n'
p1266
tp1267
sS'mode_adjust'
p1268
(S'\n__stdcall mode_adjust(mode_change * changes, mode_t * pmode_bits)\n'
p1269
V\u000amode_t mode_adjust(mode_change *changes,mode_t *pmode_bits)\u000a\u000a{\u000a  uint uVar1;\u000a  char cVar2;\u000a  char *in_RCX;\u000a  uint in_EDX;\u000a  uint uVar3;\u000a  uint uVar4;\u000a  uint uVar5;\u000a  uint uVar6;\u000a  uint *in_R8;\u000a  uint uVar7;\u000a  uint uVar8;\u000a  uint uVar9;\u000a  \u000a  uVar6 = (uint)changes & 0xfff;\u000a  cVar2 = in_RCX[1];\u000a  uVar9 = 0;\u000a  if (cVar2 != 0) {\u000a    uVar7 = 0xc00;\u000a    if ((char)pmode_bits == 0) {\u000a      uVar7 = 0;\u000a    }\u000a    do {\u000a      uVar1 = *(uint *)(in_RCX + 4);\u000a      uVar4 = *(uint *)(in_RCX + 8);\u000a      if (cVar2 == 2) {\u000a        if ((uVar6 & 0x49 | (uint)pmode_bits & 0xff) != 0) {\u000a          uVar4 = uVar4 | 0x49;\u000a        }\u000a      }\u000a      else {\u000a        if (cVar2 == 3) {\u000a          uVar4 = uVar4 & uVar6;\u000a          uVar3 = uVar4 & 0x124;\u000a          if (uVar3 != 0) {\u000a            uVar3 = 0x124;\u000a          }\u000a          uVar8 = uVar4 & 0x92;\u000a          if (uVar8 != 0) {\u000a            uVar8 = 0x92;\u000a          }\u000a          uVar5 = uVar4 & 0x49;\u000a          if (uVar5 != 0) {\u000a            uVar5 = 0x49;\u000a          }\u000a          uVar4 = uVar5 | uVar3 | uVar8 | uVar4;\u000a        }\u000a      }\u000a      uVar3 = ~in_EDX;\u000a      if (uVar1 != 0) {\u000a        uVar3 = uVar1;\u000a      }\u000a      uVar3 = (*(uint *)(in_RCX + 0xc) | ~uVar7) & uVar4 & uVar3;\u000a      cVar2 = *in_RCX;\u000a      if (cVar2 == '+') {\u000a        uVar9 = uVar9 | uVar3;\u000a        uVar6 = uVar6 | uVar3;\u000a      }\u000a      else {\u000a        if (cVar2 == '-') {\u000a          uVar9 = uVar9 | uVar3;\u000a          uVar6 = uVar6 & ~uVar3;\u000a        }\u000a        else {\u000a          if (cVar2 == '=') {\u000a            uVar4 = ~uVar1;\u000a            if (uVar1 == 0) {\u000a              uVar4 = uVar1;\u000a            }\u000a            uVar4 = uVar4 | ~*(uint *)(in_RCX + 0xc) & uVar7;\u000a            uVar9 = uVar9 | ~uVar4 & 0xfff;\u000a            uVar6 = uVar3 | uVar4 & uVar6;\u000a          }\u000a        }\u000a      }\u000a      cVar2 = in_RCX[0x11];\u000a      in_RCX = in_RCX + 0x10;\u000a    } while (cVar2 != 0);\u000a  }\u000a  if (in_R8 != (uint *)0x0) {\u000a    *in_R8 = uVar9;\u000a  }\u000a  return (mode_t)uVar6;\u000a}\u000a\u000a
p1270
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV qword ptr [RSP + -0x8],R8\nAND EDI,0xfff\nMOV AL,byte ptr [RCX + 0x1]\nXOR R13D,R13D\nTEST AL,AL\nJZ 0x004131f5\nTEST SIL,SIL\nMOV R9D,0xc00\nCMOVZ R9D,R13D\nNOT EDX\nMOV R10D,R9D\nNOT R10D\nMOVZX R12D,SIL\nMOV R14D,0x92\nMOV R15D,0x49\nNOP dword ptr [RAX + RAX*0x1]\nMOVSX EBP,AL\nMOV EBX,dword ptr [RCX + 0x4]\nMOV ESI,dword ptr [RCX + 0x8]\nMOV R8D,dword ptr [RCX + 0xc]\nCMP EBP,0x2\nJZ 0x00413170\nCMP EBP,0x3\nJNZ 0x00413180\nAND ESI,EDI\nMOV EBP,ESI\nAND EBP,0x124\nMOV EAX,0x124\nCMOVNZ EBP,EAX\nMOV R11D,ESI\nAND R11D,0x92\nCMOVNZ R11D,R14D\nOR R11D,ESI\nAND ESI,0x49\nCMOVNZ ESI,R15D\nOR ESI,EBP\nOR ESI,R11D\nJMP 0x00413180\nMOV EBP,EDI\nAND EBP,0x49\nMOV EAX,ESI\nOR EAX,0x49\nOR EBP,R12D\nCMOVNZ ESI,EAX\nTEST EBX,EBX\nMOV EAX,EDX\nCMOVNZ EAX,EBX\nMOV EBP,R8D\nOR EBP,R10D\nAND EBP,ESI\nAND EBP,EAX\nMOVSX ESI,byte ptr [RCX]\nCMP ESI,0x2b\nJZ 0x004131e0\nCMP ESI,0x2d\nJZ 0x004131d0\nCMP ESI,0x3d\nJNZ 0x004131e5\nNOT R8D\nAND R8D,R9D\nTEST EBX,EBX\nMOV EAX,EBX\nNOT EAX\nCMOVZ EAX,EBX\nOR EAX,R8D\nMOV ESI,EAX\nNOT ESI\nAND ESI,0xfff\nOR R13D,ESI\nAND EAX,EDI\nOR EBP,EAX\nMOV EDI,EBP\nJMP 0x004131e5\nOR R13D,EBP\nNOT EBP\nAND EDI,EBP\nJMP 0x004131e5\nOR R13D,EBP\nOR EDI,EBP\nMOVZX EAX,byte ptr [RCX + 0x11]\nADD RCX,0x10\nTEST AL,AL\nJNZ 0x00413120\nMOV RAX,qword ptr [RSP + -0x8]\nTEST RAX,RAX\nJZ 0x00413202\nMOV dword ptr [RAX],R13D\nMOV EAX,EDI\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1271
S'55\n41 57\n41 56\n41 55\n41 54\n53\n4c 89 44 24 f8\n81 e7 ff 0f 00 00\n8a 41 01\n45 31 ed\n84 c0\n0f 84 02 01 00 00\n40 84 f6\n41 b9 00 0c 00 00\n45 0f 44 cd\nf7 d2\n45 89 ca\n41 f7 d2\n44 0f b6 e6\n41 be 92 00 00 00\n41 bf 49 00 00 00\n0f 1f 84 00 00 00 00 00\n0f be e8\n8b 59 04\n8b 71 08\n44 8b 41 0c\n83 fd 02\n74 3e\n83 fd 03\n75 49\n21 fe\n89 f5\n81 e5 24 01 00 00\nb8 24 01 00 00\n0f 45 e8\n41 89 f3\n41 81 e3 92 00 00 00\n45 0f 45 de\n41 09 f3\n83 e6 49\n41 0f 45 f7\n09 ee\n44 09 de\neb 18\n89 fd\n83 e5 49\n89 f0\n83 c8 49\n44 09 e5\n0f 45 f0\n85 db\n89 d0\n0f 45 c3\n44 89 c5\n44 09 d5\n21 f5\n21 c5\n0f be 31\n83 fe 2b\n74 47\n83 fe 2d\n74 32\n83 fe 3d\n75 42\n41 f7 d0\n45 21 c8\n85 db\n89 d8\nf7 d0\n0f 44 c3\n44 09 c0\n89 c6\nf7 d6\n81 e6 ff 0f 00 00\n41 09 f5\n21 f8\n09 c5\n89 ef\neb 1b\n41 09 ed\nf7 d5\n21 ef\neb 0c\n41 09 ed\n09 ef\n0f b6 41 11\n48 83 c1 10\n84 c0\n0f 85 2b ff ff ff\n48 8b 44 24 f8\n48 85 c0\n74 03\n44 89 28\n89 f8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1272
S'.text:00000000004130d0\n.text:00000000004130d1\n.text:00000000004130d3\n.text:00000000004130d5\n.text:00000000004130d7\n.text:00000000004130d9\n.text:00000000004130da\n.text:00000000004130df\n.text:00000000004130e5\n.text:00000000004130e8\n.text:00000000004130eb\n.text:00000000004130ed\n.text:00000000004130f3\n.text:00000000004130f6\n.text:00000000004130fc\n.text:0000000000413100\n.text:0000000000413102\n.text:0000000000413105\n.text:0000000000413108\n.text:000000000041310c\n.text:0000000000413112\n.text:0000000000413118\n.text:0000000000413120\n.text:0000000000413123\n.text:0000000000413126\n.text:0000000000413129\n.text:000000000041312d\n.text:0000000000413130\n.text:0000000000413132\n.text:0000000000413135\n.text:0000000000413137\n.text:0000000000413139\n.text:000000000041313b\n.text:0000000000413141\n.text:0000000000413146\n.text:0000000000413149\n.text:000000000041314c\n.text:0000000000413153\n.text:0000000000413157\n.text:000000000041315a\n.text:000000000041315d\n.text:0000000000413161\n.text:0000000000413163\n.text:0000000000413166\n.text:0000000000413170\n.text:0000000000413172\n.text:0000000000413175\n.text:0000000000413177\n.text:000000000041317a\n.text:000000000041317d\n.text:0000000000413180\n.text:0000000000413182\n.text:0000000000413184\n.text:0000000000413187\n.text:000000000041318a\n.text:000000000041318d\n.text:000000000041318f\n.text:0000000000413191\n.text:0000000000413194\n.text:0000000000413197\n.text:0000000000413199\n.text:000000000041319c\n.text:000000000041319e\n.text:00000000004131a1\n.text:00000000004131a3\n.text:00000000004131a6\n.text:00000000004131a9\n.text:00000000004131ab\n.text:00000000004131ad\n.text:00000000004131af\n.text:00000000004131b2\n.text:00000000004131b5\n.text:00000000004131b7\n.text:00000000004131b9\n.text:00000000004131bf\n.text:00000000004131c2\n.text:00000000004131c4\n.text:00000000004131c6\n.text:00000000004131c8\n.text:00000000004131d0\n.text:00000000004131d3\n.text:00000000004131d5\n.text:00000000004131d7\n.text:00000000004131e0\n.text:00000000004131e3\n.text:00000000004131e5\n.text:00000000004131e9\n.text:00000000004131ed\n.text:00000000004131ef\n.text:00000000004131f5\n.text:00000000004131fa\n.text:00000000004131fd\n.text:00000000004131ff\n.text:0000000000413202\n.text:0000000000413204\n.text:0000000000413205\n.text:0000000000413207\n.text:0000000000413209\n.text:000000000041320b\n.text:000000000041320d\n.text:000000000041320e\n'
p1273
tp1274
sS'parse_amin'
p1275
(S'\n__stdcall parse_amin(parser_table * entry, char * * argv, int * arg_ptr)\n'
p1276
V\u000a_Bool parse_amin(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = do_parse_xmin(entry,argv,arg_ptr);\u000a  return _Var1;\u000a}\u000a\u000a
p1277
S'XOR ECX,ECX\nJMP 0x0040c740\n'
p1278
S'31 c9\ne9 49 18 00 00\n'
p1279
S'.text:000000000040aef0\n.text:000000000040aef2\n'
p1280
tp1281
sS'strnlen1'
p1282
(S'\n__stdcall strnlen1(char * string, size_t maxlen)\n'
p1283
V\u000asize_t strnlen1(char *string,size_t maxlen)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  \u000a  pvVar1 = memchr(string,0,maxlen);\u000a  sVar2 = (1 - (long)string) + (long)pvVar1;\u000a  if (pvVar1 == (void *)0x0) {\u000a    sVar2 = maxlen;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p1284
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nXOR ESI,ESI\nMOV RDX,R14\nCALL 0x00402b10\nMOV ECX,0x1\nSUB RCX,RBX\nADD RCX,RAX\nTEST RAX,RAX\nCMOVZ RCX,R14\nMOV RAX,RCX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1285
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n31 f6\n4c 89 f2\ne8 4c be fe ff\nb9 01 00 00 00\n48 29 d9\n48 01 c1\n48 85 c0\n49 0f 44 ce\n48 89 c8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1286
S'.text:0000000000416cb0\n.text:0000000000416cb2\n.text:0000000000416cb3\n.text:0000000000416cb4\n.text:0000000000416cb7\n.text:0000000000416cba\n.text:0000000000416cbc\n.text:0000000000416cbf\n.text:0000000000416cc4\n.text:0000000000416cc9\n.text:0000000000416ccc\n.text:0000000000416ccf\n.text:0000000000416cd2\n.text:0000000000416cd6\n.text:0000000000416cd9\n.text:0000000000416cdd\n.text:0000000000416cde\n.text:0000000000416ce0\n'
p1287
tp1288
sS're_match'
p1289
(S'\n__stdcall re_match(re_pattern_buffer * __buffer, char * __string, int __length, int __start, re_registers * __regs)\n'
p1290
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint re_match(re_pattern_buffer *__buffer,char *__string,int __length,int __start,\u000a            re_registers *__regs)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_re_match_0062d050)();\u000a  return iVar1;\u000a}\u000a\u000a
p1291
S'JMP qword ptr [0x0062d050]\n'
p1292
S'ff 25 ea a8 22 00\n'
p1293
S'.plt:0000000000402760\n'
p1294
tp1295
sS'guess_time_tm'
p1296
(S'\n__stdcall guess_time_tm(long_int year, long_int yday, long_int t, tm * tp)\n'
p1297
V\u000along_int guess_time_tm(long_int year,long_int yday,long_int t,tm *tp)\u000a\u000a{\u000a  long_int lVar1;\u000a  long lVar2;\u000a  int min0;\u000a  long in_R9;\u000a  long in_stack_00000008;\u000a  \u000a  if (in_stack_00000008 != 0) {\u000a    lVar1 = ydhms_diff(year,yday,(int)t,(int)tp,min0,*(int *)(in_stack_00000008 + 0x14));\u000a    if (!SCARRY8(lVar1,in_R9)) {\u000a      return lVar1 + in_R9;\u000a    }\u000a  }\u000a  lVar1 = long_int_avg(-0x8000000000000000,0x7fffffffffffffff);\u000a  if (in_R9 < lVar1) {\u000a    lVar2 = -0x8000000000000000;\u000a    if (in_R9 < -0x7ffffffffffffffe) {\u000a      lVar2 = in_R9 + 1;\u000a    }\u000a  }\u000a  else {\u000a    lVar2 = in_R9 + -1;\u000a    if (in_R9 < 0x7ffffffffffffffe) {\u000a      lVar2 = 0x7fffffffffffffff;\u000a    }\u000a  }\u000a  return lVar2;\u000a}\u000a\u000a
p1298
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,R9\nMOV RAX,qword ptr [RSP + 0x20]\nTEST RAX,RAX\nJZ 0x0041a57a\nMOV R9D,dword ptr [RAX + 0x14]\nMOV R10D,dword ptr [RAX + 0x1c]\nMOV R11D,dword ptr [RAX + 0x8]\nMOV EBX,dword ptr [RAX]\nMOV EAX,dword ptr [RAX + 0x4]\nPUSH RBX\nPUSH RAX\nPUSH R11\nPUSH R10\nCALL 0x0041a3d0\nADD RSP,0x20\nMOV RBX,RAX\nADD RBX,R14\nJNO 0x0041a5b8\nMOV R15,0x7fffffffffffffff\nLEA RBX,[R15 + 0x1]\nMOV RDI,RBX\nMOV RSI,R15\nCALL 0x0041a700\nCMP RAX,R14\nJLE 0x0041a5a9\nADD R15,0x3\nLEA RAX,[R14 + 0x1]\nCMP R14,R15\nCMOVL RBX,RAX\nJMP 0x0041a5b8\nLEA RAX,[R15 + -0x2]\nCMP R14,RAX\nLEA RBX,[R14 + -0x1]\nCMOVLE RBX,R15\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1299
S'41 57\n41 56\n53\n4d 89 ce\n48 8b 44 24 20\n48 85 c0\n74 28\n44 8b 48 14\n44 8b 50 1c\n44 8b 58 08\n8b 18\n8b 40 04\n53\n50\n41 53\n41 52\ne8 62 fe ff ff\n48 83 c4 20\n48 89 c3\n4c 01 f3\n71 3e\n49 bf ff ff ff ff ff ff ff 7f\n49 8d 5f 01\n48 89 df\n4c 89 fe\ne8 6d 01 00 00\n4c 39 f0\n7e 11\n49 83 c7 03\n49 8d 46 01\n4d 39 fe\n48 0f 4c d8\neb 0f\n49 8d 47 fe\n49 39 c6\n49 8d 5e ff\n49 0f 4e df\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p1300
S'.text:000000000041a540\n.text:000000000041a542\n.text:000000000041a544\n.text:000000000041a545\n.text:000000000041a548\n.text:000000000041a54d\n.text:000000000041a550\n.text:000000000041a552\n.text:000000000041a556\n.text:000000000041a55a\n.text:000000000041a55e\n.text:000000000041a560\n.text:000000000041a563\n.text:000000000041a564\n.text:000000000041a565\n.text:000000000041a567\n.text:000000000041a569\n.text:000000000041a56e\n.text:000000000041a572\n.text:000000000041a575\n.text:000000000041a578\n.text:000000000041a57a\n.text:000000000041a584\n.text:000000000041a588\n.text:000000000041a58b\n.text:000000000041a58e\n.text:000000000041a593\n.text:000000000041a596\n.text:000000000041a598\n.text:000000000041a59c\n.text:000000000041a5a0\n.text:000000000041a5a3\n.text:000000000041a5a7\n.text:000000000041a5a9\n.text:000000000041a5ad\n.text:000000000041a5b0\n.text:000000000041a5b4\n.text:000000000041a5b8\n.text:000000000041a5bb\n.text:000000000041a5bc\n.text:000000000041a5be\n.text:000000000041a5c0\n'
p1301
tp1302
sS'xstrtoul'
p1303
(S'\n__stdcall xstrtoul(char * s, char * * ptr, ulong * val, char * valid_suffixes)\n'
p1304
V\u000astrtol_error xstrtoul(char *s,char **ptr,ulong *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  byte *pbVar7;\u000a  strtol_error sVar8;\u000a  strtol_error sVar9;\u000a  uint uVar10;\u000a  char *__s;\u000a  long lVar11;\u000a  char **__endptr;\u000a  ulong local_48;\u000a  ulong *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./xstrtol.c",0x60,\u000a                  "strtol_error xstrtoul(const char *, char **, int, unsigned long *, const char *)"\u000a                 );\u000a  }\u000a  local_40 = (ulong *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar7 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar7;\u000a    pbVar7 = pbVar7 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoul(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar8 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar8 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar8 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar9 = sVar8;\u000a    if (__s == (char *)0x0) goto LAB_004176da;\u000a  }\u000a  cVar2 = **__endptr;\u000a  sVar9 = sVar8;\u000a  if (cVar2 == 0) goto LAB_004176da;\u000a  pcVar6 = strchr(__s,(int)cVar2);\u000a  if (pcVar6 == (char *)0x0) goto switchD_0041762d_caseD_43;\u000a  lVar11 = 1;\u000a  uVar10 = (int)cVar2 - 0x45;\u000a  if ((uVar10 < 0x30) && ((0x814400308945U >> ((ulong)uVar10 & 0x1f) & 1) != 0)) {\u000a    pcVar6 = strchr(__s,0x30);\u000a    if (pcVar6 == (char *)0x0) {\u000aLAB_00417609:\u000a      lVar11 = 1;\u000a    }\u000a    else {\u000a      cVar2 = (*__endptr)[1];\u000a      if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a        lVar11 = 2;\u000a      }\u000a      else {\u000a        if (cVar2 != 'i') goto LAB_00417609;\u000a        lVar11 = (ulong)((*__endptr)[2] == 'B') * 2 + 1;\u000a      }\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_004176bc;\u000a  default:\u000aswitchD_0041762d_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar8 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    break;\u000a  case 'P':\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    break;\u000a  case 'Y':\u000a    break;\u000a  case 'Z':\u000a    break;\u000a  case 'b':\u000a    goto LAB_004176bc;\u000a  case 'c':\u000a    goto switchD_0041762d_caseD_63;\u000a  case 'w':\u000aLAB_004176bc:\u000a    sVar3 = bkm_scale(&local_48);\u000a    goto switchD_0041762d_caseD_63;\u000a  }\u000a  sVar3 = bkm_scale_by_power(&local_48);\u000aswitchD_0041762d_caseD_63:\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar9 = sVar3 | sVar8 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar9 = sVar3 | sVar8;\u000a  }\u000aLAB_004176da:\u000a  *local_40 = local_48;\u000a  return sVar9;\u000a}\u000a\u000a
p1305
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R13,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x004176f7\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x00402770\nMOV R12,RAX\nMOV dword ptr [R12],0x0\nCALL 0x00402f80\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x004174f0\nTEST RBX,RBX\nLEA R15,[RSP + 0x10]\nCMOVNZ R15,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x004176e6\nMOV RDI,RBP\nMOV RSI,R15\nMOV EDX,R14D\nCALL 0x00402e60\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R15]\nCMP RAX,RBP\nJZ 0x00417550\nMOV EAX,dword ptr [R12]\nTEST EAX,EAX\nJZ 0x00417581\nCMP EAX,0x22\nJNZ 0x004176e6\nMOV EBX,0x1\nTEST R13,R13\nJNZ 0x0041758c\nJMP 0x004176da\nTEST R13,R13\nJZ 0x004176e6\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x004176e6\nMOV RDI,R13\nCALL 0x00402980\nTEST RAX,RAX\nJZ 0x004176e6\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x0041758c\nXOR EBX,EBX\nTEST R13,R13\nJZ 0x004176da\nMOV RAX,qword ptr [R15]\nMOVSX EBP,byte ptr [RAX]\nTEST EBP,EBP\nJZ 0x004176da\nMOV RDI,R13\nMOV ESI,EBP\nCALL 0x00402980\nTEST RAX,RAX\nJZ 0x0041763e\nMOV R14D,0x400\nMOV R12D,0x1\nADD EBP,-0x45\nCMP EBP,0x2f\nJA 0x0041761d\nMOV RAX,0x814400308945\nBT RAX,RBP\nJNC 0x0041761d\nMOV ESI,0x30\nMOV RDI,R13\nCALL 0x00402980\nTEST RAX,RAX\nJZ 0x00417609\nMOV RAX,qword ptr [R15]\nMOVSX ECX,byte ptr [RAX + 0x1]\nCMP ECX,0x42\nJZ 0x00417611\nCMP ECX,0x44\nJZ 0x00417611\nCMP ECX,0x69\nJNZ 0x00417609\nXOR ECX,ECX\nCMP byte ptr [RAX + 0x2],0x42\nSETZ CL\nLEA R12,[RCX + RCX*0x1 + 0x1]\nJMP 0x0041761d\nMOV R12D,0x1\nJMP 0x0041761d\nMOV R14D,0x3e8\nMOV R12D,0x2\nMOV RAX,qword ptr [R15]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x0041763e\nXOR EAX,EAX\nJMP qword ptr [0x424db0 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nJMP 0x004176a0\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x004176e6\nMOV RDI,RSP\nMOV EDX,0x1\nJMP 0x004176a0\nMOV RDI,RSP\nMOV EDX,0x2\nJMP 0x004176a0\nMOV RDI,RSP\nMOV EDX,0x4\nJMP 0x004176a0\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x004176bc\nMOV RDI,RSP\nMOV EDX,0x6\nJMP 0x004176a0\nMOV RDI,RSP\nMOV EDX,0x5\nJMP 0x004176a0\nMOV RDI,RSP\nMOV EDX,0x8\nJMP 0x004176a0\nMOV RDI,RSP\nMOV EDX,0x7\nMOV ESI,R14D\nCALL 0x00417740\nJMP 0x004176c1\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x004176bc\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x00417710\nOR EAX,EBX\nMOV RCX,qword ptr [R15]\nLEA RDX,[RCX + R12*0x1]\nMOV qword ptr [R15],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + R12*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x424f60\nMOV ESI,0x424f86\nMOV EDX,0x60\nMOV ECX,0x424f92\nCALL 0x00402a40\n'
p1306
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c5\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 33 02 00 00\n48 89 4c 24 08\ne8 a2 b2 fe ff\n49 89 c4\n41 c7 04 24 00 00 00 00\ne8 a2 ba fe ff\n48 8b 08\n48 89 ea\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 7c 24 10\n4c 0f 45 fb\nbb 04 00 00 00\n3c 2d\n0f 84 d0 01 00 00\n48 89 ef\n4c 89 fe\n44 89 f2\ne8 3c b9 fe ff\n48 89 04 24\n49 8b 07\n48 39 e8\n74 20\n41 8b 04 24\n85 c0\n74 49\n83 f8 22\n0f 85 a5 01 00 00\nbb 01 00 00 00\n4d 85 ed\n75 41\ne9 8a 01 00 00\n4d 85 ed\n0f 84 8d 01 00 00\n0f be 30\n85 f6\n0f 84 82 01 00 00\n4c 89 ef\ne8 14 b4 fe ff\n48 85 c0\n0f 84 71 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 ed\n0f 84 4e 01 00 00\n49 8b 07\n0f be 28\n85 ed\n0f 84 40 01 00 00\n4c 89 ef\n89 ee\ne8 dc b3 fe ff\n48 85 c0\n0f 84 91 00 00 00\n41 be 00 04 00 00\n41 bc 01 00 00 00\n83 c5 bb\n83 fd 2f\n77 5c\n48 b8 45 89 30 00 44 81 00 00\n48 0f a3 e8\n73 4c\nbe 30 00 00 00\n4c 89 ef\ne8 a2 b3 fe ff\n48 85 c0\n74 26\n49 8b 07\n0f be 48 01\n83 f9 42\n74 22\n83 f9 44\n74 1d\n83 f9 69\n75 10\n31 c9\n80 78 02 42\n0f 94 c1\n4c 8d 64 09 01\neb 14\n41 bc 01 00 00 00\neb 0c\n41 be e8 03 00 00\n41 bc 02 00 00 00\n49 8b 07\n0f be 08\n83 c1 be\n83 f9 35\n77 13\n31 c0\nff 24 cd b0 4d 42 00\n48 89 e7\nba 03 00 00 00\neb 62\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 94 00 00 00\n48 89 e7\nba 01 00 00 00\neb 44\n48 89 e7\nba 02 00 00 00\neb 3a\n48 89 e7\nba 04 00 00 00\neb 30\n48 89 e7\nbe 00 04 00 00\neb 42\n48 89 e7\nba 06 00 00 00\neb 1c\n48 89 e7\nba 05 00 00 00\neb 12\n48 89 e7\nba 08 00 00 00\neb 08\n48 89 e7\nba 07 00 00 00\n44 89 f6\ne8 98 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 4f 00 00 00\n09 d8\n49 8b 0f\n4a 8d 14 21\n49 89 17\n89 c3\n83 cb 02\n42 80 3c 21 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 60 4f 42 00\nbe 86 4f 42 00\nba 60 00 00 00\nb9 92 4f 42 00\ne8 30 b3 fe ff\n'
p1307
S'.text:00000000004174a0\n.text:00000000004174a1\n.text:00000000004174a3\n.text:00000000004174a5\n.text:00000000004174a7\n.text:00000000004174a9\n.text:00000000004174aa\n.text:00000000004174ae\n.text:00000000004174b1\n.text:00000000004174b4\n.text:00000000004174b7\n.text:00000000004174ba\n.text:00000000004174be\n.text:00000000004174c4\n.text:00000000004174c9\n.text:00000000004174ce\n.text:00000000004174d1\n.text:00000000004174d9\n.text:00000000004174de\n.text:00000000004174e1\n.text:00000000004174e4\n.text:00000000004174f0\n.text:00000000004174f3\n.text:00000000004174f6\n.text:00000000004174fb\n.text:00000000004174fd\n.text:0000000000417500\n.text:0000000000417505\n.text:0000000000417509\n.text:000000000041750e\n.text:0000000000417510\n.text:0000000000417516\n.text:0000000000417519\n.text:000000000041751c\n.text:000000000041751f\n.text:0000000000417524\n.text:0000000000417528\n.text:000000000041752b\n.text:000000000041752e\n.text:0000000000417530\n.text:0000000000417534\n.text:0000000000417536\n.text:0000000000417538\n.text:000000000041753b\n.text:0000000000417541\n.text:0000000000417546\n.text:0000000000417549\n.text:000000000041754b\n.text:0000000000417550\n.text:0000000000417553\n.text:0000000000417559\n.text:000000000041755c\n.text:000000000041755e\n.text:0000000000417564\n.text:0000000000417567\n.text:000000000041756c\n.text:000000000041756f\n.text:0000000000417575\n.text:000000000041757d\n.text:000000000041757f\n.text:0000000000417581\n.text:0000000000417583\n.text:0000000000417586\n.text:000000000041758c\n.text:000000000041758f\n.text:0000000000417592\n.text:0000000000417594\n.text:000000000041759a\n.text:000000000041759d\n.text:000000000041759f\n.text:00000000004175a4\n.text:00000000004175a7\n.text:00000000004175ad\n.text:00000000004175b3\n.text:00000000004175b9\n.text:00000000004175bc\n.text:00000000004175bf\n.text:00000000004175c1\n.text:00000000004175cb\n.text:00000000004175cf\n.text:00000000004175d1\n.text:00000000004175d6\n.text:00000000004175d9\n.text:00000000004175de\n.text:00000000004175e1\n.text:00000000004175e3\n.text:00000000004175e6\n.text:00000000004175ea\n.text:00000000004175ed\n.text:00000000004175ef\n.text:00000000004175f2\n.text:00000000004175f4\n.text:00000000004175f7\n.text:00000000004175f9\n.text:00000000004175fb\n.text:00000000004175ff\n.text:0000000000417602\n.text:0000000000417607\n.text:0000000000417609\n.text:000000000041760f\n.text:0000000000417611\n.text:0000000000417617\n.text:000000000041761d\n.text:0000000000417620\n.text:0000000000417623\n.text:0000000000417626\n.text:0000000000417629\n.text:000000000041762b\n.text:000000000041762d\n.text:0000000000417634\n.text:0000000000417637\n.text:000000000041763c\n.text:000000000041763e\n.text:0000000000417642\n.text:0000000000417647\n.text:000000000041764a\n.text:000000000041764d\n.text:0000000000417652\n.text:0000000000417655\n.text:000000000041765a\n.text:000000000041765c\n.text:000000000041765f\n.text:0000000000417664\n.text:0000000000417666\n.text:0000000000417669\n.text:000000000041766e\n.text:0000000000417670\n.text:0000000000417673\n.text:0000000000417678\n.text:000000000041767a\n.text:000000000041767d\n.text:0000000000417682\n.text:0000000000417684\n.text:0000000000417687\n.text:000000000041768c\n.text:000000000041768e\n.text:0000000000417691\n.text:0000000000417696\n.text:0000000000417698\n.text:000000000041769b\n.text:00000000004176a0\n.text:00000000004176a3\n.text:00000000004176a8\n.text:00000000004176aa\n.text:00000000004176ad\n.text:00000000004176b2\n.text:00000000004176b4\n.text:00000000004176b7\n.text:00000000004176bc\n.text:00000000004176c1\n.text:00000000004176c3\n.text:00000000004176c6\n.text:00000000004176ca\n.text:00000000004176cd\n.text:00000000004176cf\n.text:00000000004176d2\n.text:00000000004176d7\n.text:00000000004176da\n.text:00000000004176de\n.text:00000000004176e3\n.text:00000000004176e6\n.text:00000000004176e8\n.text:00000000004176ec\n.text:00000000004176ed\n.text:00000000004176ef\n.text:00000000004176f1\n.text:00000000004176f3\n.text:00000000004176f5\n.text:00000000004176f6\n.text:00000000004176f7\n.text:00000000004176fc\n.text:0000000000417701\n.text:0000000000417706\n.text:000000000041770b\n'
p1308
tp1309
sS'getgidbyname'
p1310
(S'\n__stdcall getgidbyname(char * group)\n'
p1311
V\u000agid_t * getgidbyname(char *group)\u000a\u000a{\u000a  char cVar1;\u000a  int iVar2;\u000a  group *pgVar3;\u000a  size_t sVar4;\u000a  userid *puVar5;\u000a  userid *puVar6;\u000a  \u000a  if (group_alist != (userid *)0x0) {\u000a    cVar1 = *group;\u000a    puVar5 = group_alist;\u000a    do {\u000a      if ((*(char *)&puVar5[1].id == cVar1) &&\u000a         (iVar2 = strcmp((char *)(puVar5 + 1),group), iVar2 == 0)) {\u000a        return (gid_t *)puVar5;\u000a      }\u000a      puVar5 = puVar5->next;\u000a    } while (puVar5 != (userid *)0x0);\u000a  }\u000a  if (nogroup_alist != (userid *)0x0) {\u000a    cVar1 = *group;\u000a    puVar5 = nogroup_alist;\u000a    do {\u000a      if ((*(char *)&puVar5[1].id == cVar1) &&\u000a         (iVar2 = strcmp((char *)(puVar5 + 1),group), iVar2 == 0)) {\u000a        return (gid_t *)0x0;\u000a      }\u000a      puVar5 = puVar5->next;\u000a    } while (puVar5 != (userid *)0x0);\u000a  }\u000a  pgVar3 = getgrnam(group);\u000a  sVar4 = strlen(group);\u000a  puVar5 = (userid *)xmalloc(sVar4 + 0x11);\u000a  strcpy((char *)(puVar5 + 1),group);\u000a  if (pgVar3 == (group *)0x0) {\u000a    puVar5->next = nogroup_alist;\u000a    puVar6 = (userid *)0x0;\u000a    nogroup_alist = puVar5;\u000a  }\u000a  else {\u000a    puVar5->id = pgVar3->gr_gid;\u000a    puVar5->next = group_alist;\u000a    puVar6 = puVar5;\u000a    group_alist = puVar5;\u000a  }\u000a  return (gid_t *)puVar6;\u000a}\u000a\u000a
p1312
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14,RDI\nMOV R12,qword ptr [0x0062e670]\nTEST R12,R12\nJZ 0x00411e76\nMOV BL,byte ptr [R14]\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R12 + 0x10],BL\nJNZ 0x00411e6c\nLEA RDI,[R12 + 0x10]\nMOV RSI,R14\nCALL 0x00402b40\nTEST EAX,EAX\nJZ 0x00411f13\nMOV R12,qword ptr [R12 + 0x8]\nTEST R12,R12\nJNZ 0x00411e50\nMOV RBX,qword ptr [0x0062e678]\nTEST RBX,RBX\nJZ 0x00411eaf\nMOV BPL,byte ptr [R14]\nXOR R12D,R12D\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RBX + 0x10],BPL\nJNZ 0x00411ea6\nLEA RDI,[RBX + 0x10]\nMOV RSI,R14\nCALL 0x00402b40\nTEST EAX,EAX\nJZ 0x00411f13\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x00411e90\nMOV RDI,R14\nCALL 0x00402be0\nMOV R15,RAX\nMOV RDI,R14\nCALL 0x00402930\nLEA RDI,[RAX + 0x11]\nCALL 0x00417220\nMOV R12,RAX\nLEA RDI,[R12 + 0x10]\nMOV RSI,R14\nCALL 0x004027c0\nTEST R15,R15\nJZ 0x00411efd\nMOV EAX,dword ptr [R15 + 0x10]\nMOV dword ptr [R12],EAX\nMOV RAX,qword ptr [0x0062e670]\nMOV qword ptr [R12 + 0x8],RAX\nMOV qword ptr [0x0062e670],R12\nJMP 0x00411f13\nMOV RAX,qword ptr [0x0062e678]\nMOV qword ptr [R12 + 0x8],RAX\nMOV qword ptr [0x0062e678],R12\nXOR R12D,R12D\nMOV RAX,R12\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1313
S'55\n41 57\n41 56\n41 54\n53\n49 89 fe\n4c 8b 25 2e c8 21 00\n4d 85 e4\n74 2f\n41 8a 1e\n66 0f 1f 44 00 00\n41 38 5c 24 10\n75 15\n49 8d 7c 24 10\n4c 89 f6\ne8 dc 0c ff ff\n85 c0\n0f 84 a7 00 00 00\n4d 8b 64 24 08\n4d 85 e4\n75 da\n48 8b 1d fb c7 21 00\n48 85 db\n74 2d\n41 8a 2e\n45 31 e4\n0f 1f 84 00 00 00 00 00\n40 38 6b 10\n75 10\n48 8d 7b 10\n4c 89 f6\ne8 9e 0c ff ff\n85 c0\n74 6d\n48 8b 5b 08\n48 85 db\n75 e1\n4c 89 f7\ne8 29 0d ff ff\n49 89 c7\n4c 89 f7\ne8 6e 0a ff ff\n48 8d 78 11\ne8 55 53 00 00\n49 89 c4\n49 8d 7c 24 10\n4c 89 f6\ne8 e5 08 ff ff\n4d 85 ff\n74 1d\n41 8b 47 10\n41 89 04 24\n48 8b 05 81 c7 21 00\n49 89 44 24 08\n4c 89 25 75 c7 21 00\neb 16\n48 8b 05 74 c7 21 00\n49 89 44 24 08\n4c 89 25 68 c7 21 00\n45 31 e4\n4c 89 e0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1314
S'.text:0000000000411e30\n.text:0000000000411e31\n.text:0000000000411e33\n.text:0000000000411e35\n.text:0000000000411e37\n.text:0000000000411e38\n.text:0000000000411e3b\n.text:0000000000411e42\n.text:0000000000411e45\n.text:0000000000411e47\n.text:0000000000411e4a\n.text:0000000000411e50\n.text:0000000000411e55\n.text:0000000000411e57\n.text:0000000000411e5c\n.text:0000000000411e5f\n.text:0000000000411e64\n.text:0000000000411e66\n.text:0000000000411e6c\n.text:0000000000411e71\n.text:0000000000411e74\n.text:0000000000411e76\n.text:0000000000411e7d\n.text:0000000000411e80\n.text:0000000000411e82\n.text:0000000000411e85\n.text:0000000000411e88\n.text:0000000000411e90\n.text:0000000000411e94\n.text:0000000000411e96\n.text:0000000000411e9a\n.text:0000000000411e9d\n.text:0000000000411ea2\n.text:0000000000411ea4\n.text:0000000000411ea6\n.text:0000000000411eaa\n.text:0000000000411ead\n.text:0000000000411eaf\n.text:0000000000411eb2\n.text:0000000000411eb7\n.text:0000000000411eba\n.text:0000000000411ebd\n.text:0000000000411ec2\n.text:0000000000411ec6\n.text:0000000000411ecb\n.text:0000000000411ece\n.text:0000000000411ed3\n.text:0000000000411ed6\n.text:0000000000411edb\n.text:0000000000411ede\n.text:0000000000411ee0\n.text:0000000000411ee4\n.text:0000000000411ee8\n.text:0000000000411eef\n.text:0000000000411ef4\n.text:0000000000411efb\n.text:0000000000411efd\n.text:0000000000411f04\n.text:0000000000411f09\n.text:0000000000411f10\n.text:0000000000411f13\n.text:0000000000411f16\n.text:0000000000411f17\n.text:0000000000411f19\n.text:0000000000411f1b\n.text:0000000000411f1d\n.text:0000000000411f1e\n'
p1315
tp1316
sS'record_initial_cwd'
p1317
(S'\n__stdcall record_initial_cwd()\n'
p1318
V\u000avoid record_initial_cwd(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  undefined8 uVar5;\u000a  char *pcVar6;\u000a  \u000a  initial_wd = (saved_cwd *)xmalloc(0x10);\u000a  iVar2 = save_cwd(initial_wd);\u000a  if (iVar2 != 0) {\u000a    puVar3 = (uint *)__errno_location();\u000a    uVar1 = *puVar3;\u000a    uVar4 = dcgettext(0,"Failed to save initial working directory%s%s",5);\u000a    if (initial_wd->desc < 0) {\u000a      uVar5 = 0x41e69a;\u000a      if (initial_wd->name != (char *)0x0) {\u000a        uVar5 = 0x421bd9;\u000a      }\u000a    }\u000a    else {\u000a      uVar5 = 0x41e69a;\u000a    }\u000a    if (initial_wd->desc < 0) {\u000a      pcVar6 = "";\u000a      if (initial_wd->name != (char *)0x0) {\u000a        pcVar6 = initial_wd->name;\u000a      }\u000a    }\u000a    else {\u000a      pcVar6 = "";\u000a    }\u000a    error(1,(ulong)uVar1,uVar4,uVar5,pcVar6);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1319
S'PUSH RBX\nMOV EDI,0x10\nCALL 0x00417220\nMOV qword ptr [0x0062de78],RAX\nMOV RDI,RAX\nCALL 0x004169a0\nTEST EAX,EAX\nJZ 0x00407dac\nCALL 0x00402770\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x41e6f1\nMOV EDX,0x5\nCALL 0x00402910\nMOV RDX,RAX\nMOV RAX,qword ptr [0x0062de78]\nCMP dword ptr [RAX],0x0\nJS 0x00407dae\nMOV ECX,0x41e69a\nJMP 0x00407dc1\nPOP RBX\nRET\nCMP qword ptr [RAX + 0x8],0x0\nMOV EAX,0x421bd9\nMOV ECX,0x41e69a\nCMOVNZ RCX,RAX\nMOV RAX,qword ptr [0x0062de78]\nCMP dword ptr [RAX],0x0\nJS 0x00407dd5\nMOV R8D,0x41e69a\nJMP 0x00407de6\nMOV RAX,qword ptr [RAX + 0x8]\nTEST RAX,RAX\nMOV R8D,0x41e69a\nCMOVNZ R8,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nPOP RBX\nJMP 0x00402d90\n'
p1320
S'53\nbf 10 00 00 00\ne8 b5 f4 00 00\n48 89 05 06 61 22 00\n48 89 c7\ne8 26 ec 00 00\n85 c0\n74 2e\ne8 ed a9 ff ff\n8b 18\n31 ff\nbe f1 e6 41 00\nba 05 00 00 00\ne8 7a ab ff ff\n48 89 c2\n48 8b 05 d8 60 22 00\n83 38 00\n78 09\nb9 9a e6 41 00\neb 15\n5b\nc3\n48 83 78 08 00\nb8 d9 1b 42 00\nb9 9a e6 41 00\n48 0f 45 c8\n48 8b 05 b0 60 22 00\n83 38 00\n78 08\n41 b8 9a e6 41 00\neb 11\n48 8b 40 08\n48 85 c0\n41 b8 9a e6 41 00\n4c 0f 45 c0\nbf 01 00 00 00\n31 c0\n89 de\n5b\ne9 9b af ff ff\n'
p1321
S'.text:0000000000407d60\n.text:0000000000407d61\n.text:0000000000407d66\n.text:0000000000407d6b\n.text:0000000000407d72\n.text:0000000000407d75\n.text:0000000000407d7a\n.text:0000000000407d7c\n.text:0000000000407d7e\n.text:0000000000407d83\n.text:0000000000407d85\n.text:0000000000407d87\n.text:0000000000407d8c\n.text:0000000000407d91\n.text:0000000000407d96\n.text:0000000000407d99\n.text:0000000000407da0\n.text:0000000000407da3\n.text:0000000000407da5\n.text:0000000000407daa\n.text:0000000000407dac\n.text:0000000000407dad\n.text:0000000000407dae\n.text:0000000000407db3\n.text:0000000000407db8\n.text:0000000000407dbd\n.text:0000000000407dc1\n.text:0000000000407dc8\n.text:0000000000407dcb\n.text:0000000000407dcd\n.text:0000000000407dd3\n.text:0000000000407dd5\n.text:0000000000407dd9\n.text:0000000000407ddc\n.text:0000000000407de2\n.text:0000000000407de6\n.text:0000000000407deb\n.text:0000000000407ded\n.text:0000000000407def\n.text:0000000000407df0\n'
p1322
tp1323
sS'splitstring'
p1324
(S'\n__stdcall splitstring(char * s, char * separators, size_t * pos, size_t * len)\n'
p1325
V\u000a_Bool splitstring(char *s,char *separators,size_t *pos,size_t *len)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t *in_R8;\u000a  \u000a  if ((char)pos == 0) {\u000a    sVar1 = *len + *in_R8;\u000a    *len = sVar1;\u000a    if (s[sVar1] == 0) {\u000a      return false;\u000a    }\u000a    *len = sVar1 + 1;\u000a  }\u000a  else {\u000a    *len = 0;\u000a    *in_R8 = 0;\u000a  }\u000a  sVar1 = field_length(s + *len,separators);\u000a  *in_R8 = sVar1;\u000a  return true;\u000a}\u000a\u000a
p1326
S'PUSH RBX\nMOV RBX,R8\nTEST DL,DL\nJZ 0x0040fb88\nMOV qword ptr [RCX],0x0\nMOV qword ptr [RBX],0x0\nJMP 0x0040fb9d\nMOV RAX,qword ptr [RCX]\nADD RAX,qword ptr [RBX]\nMOV qword ptr [RCX],RAX\nCMP byte ptr [RDI + RAX*0x1],0x0\nJZ 0x0040fbac\nINC RAX\nMOV qword ptr [RCX],RAX\nADD RDI,qword ptr [RCX]\nCALL 0x0040fbb0\nMOV qword ptr [RBX],RAX\nMOV AL,0x1\nJMP 0x0040fbae\nXOR EAX,EAX\nPOP RBX\nRET\n'
p1327
S'53\n4c 89 c3\n84 d2\n74 10\n48 c7 01 00 00 00 00\n48 c7 03 00 00 00 00\neb 15\n48 8b 01\n48 03 03\n48 89 01\n80 3c 07 00\n74 15\n48 ff c0\n48 89 01\n48 03 39\ne8 0b 00 00 00\n48 89 03\nb0 01\neb 02\n31 c0\n5b\nc3\n'
p1328
S'.text:000000000040fb70\n.text:000000000040fb71\n.text:000000000040fb74\n.text:000000000040fb76\n.text:000000000040fb78\n.text:000000000040fb7f\n.text:000000000040fb86\n.text:000000000040fb88\n.text:000000000040fb8b\n.text:000000000040fb8e\n.text:000000000040fb91\n.text:000000000040fb95\n.text:000000000040fb97\n.text:000000000040fb9a\n.text:000000000040fb9d\n.text:000000000040fba0\n.text:000000000040fba5\n.text:000000000040fba8\n.text:000000000040fbaa\n.text:000000000040fbac\n.text:000000000040fbae\n.text:000000000040fbaf\n'
p1329
tp1330
sS'getfilecon'
p1331
(S'\n__stdcall getfilecon(char * file, security_context_t * con)\n'
p1332
V\u000aint getfilecon(char *file,security_context_t *con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p1333
S'PUSH RAX\nCALL 0x00402770\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p1334
S'50\ne8 aa bc fe ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p1335
S'.text:0000000000416ac0\n.text:0000000000416ac1\n.text:0000000000416ac6\n.text:0000000000416acc\n.text:0000000000416ad1\n.text:0000000000416ad2\n'
p1336
tp1337
sS'parse_nowarn'
p1338
(S'\n__stdcall parse_nowarn(parser_table * entry, char * * argv, int * arg_ptr)\n'
p1339
V\u000a_Bool parse_nowarn(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  options.warnings = false;\u000a  parse_noop();\u000a  return true;\u000a}\u000a\u000a
p1340
S'PUSH RAX\nMOV byte ptr [0x0062f050],0x0\nMOV RDI,RSI\nMOV RSI,RDX\nCALL 0x0040ca00\nMOV AL,0x1\nPOP RCX\nRET\n'
p1341
S'50\nc6 05 a8 33 22 00 00\n48 89 f7\n48 89 d6\ne8 4d 0d 00 00\nb0 01\n59\nc3\n'
p1342
S'.text:000000000040bca0\n.text:000000000040bca1\n.text:000000000040bca8\n.text:000000000040bcab\n.text:000000000040bcae\n.text:000000000040bcb3\n.text:000000000040bcb5\n.text:000000000040bcb6\n'
p1343
tp1344
sS'pred_executable'
p1345
(S'\n__stdcall pred_executable(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p1346
V\u000a_Bool pred_executable(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = faccessat(state.cwd_dir_fd,state.rel_pathname,1,0);\u000a  return (_Bool)(iVar1 == 0);\u000a}\u000a\u000a
p1347
S'PUSH RAX\nMOV EDI,dword ptr [0x0062f018]\nMOV RSI,qword ptr [0x0062f010]\nMOV EDX,0x1\nXOR ECX,ECX\nCALL 0x00402870\nTEST EAX,EAX\nSETZ AL\nPOP RCX\nRET\n'
p1348
S'50\n8b 3d c1 af 22 00\n48 8b 35 b2 af 22 00\nba 01 00 00 00\n31 c9\ne8 06 e8 ff ff\n85 c0\n0f 94 c0\n59\nc3\n'
p1349
S'.text:0000000000404050\n.text:0000000000404051\n.text:0000000000404057\n.text:000000000040405e\n.text:0000000000404063\n.text:0000000000404065\n.text:000000000040406a\n.text:000000000040406c\n.text:000000000040406f\n.text:0000000000404070\n'
p1350
tp1351
sS'pred_lname'
p1352
(S'\n__stdcall pred_lname(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p1353
V\u000a_Bool pred_lname(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = match_lname(pathname,stat_buf,pred_ptr);\u000a  return _Var1;\u000a}\u000a\u000a
p1354
S'XOR ECX,ECX\nJMP 0x00404b50\n'
p1355
S'31 c9\ne9 09 09 00 00\n'
p1356
S'.text:0000000000404240\n.text:0000000000404242\n'
p1357
tp1358
sS'rpl_fcntl'
p1359
(S'\n__stdcall rpl_fcntl()\n'
p1360
V\u000a/* WARNING: Removing unreachable block (ram,0x00417e9b) */\u000a/* WARNING: Removing unreachable block (ram,0x00417f04) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff38 : 0x00417ea9 */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint rpl_fcntl(void...)\u000a\u000a{\u000a  int have_dupfd_cloexec;\u000a  int __fd;\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  int __cmd;\u000a  uint __fd_00;\u000a  va_list arg;\u000a  ulong local_c8;\u000a  \u000a  if (__cmd == 0x406) {\u000a    if (have_dupfd_cloexec < 0) {\u000a      __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a    }\u000a    else {\u000a      __fd = fcntl(__fd_00,0x406,local_c8 & 0xffffffff);\u000a      have_dupfd_cloexec = 1;\u000a      if ((__fd < 0) && (piVar3 = __errno_location(), *piVar3 == 0x16)) {\u000a        __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a        have_dupfd_cloexec = -1;\u000a        if (__fd < 0) {\u000a          return __fd;\u000a        }\u000a      }\u000a    }\u000a    if (((-1 < __fd) && (have_dupfd_cloexec == -1)) &&\u000a       ((uVar1 = fcntl(__fd,1), (int)uVar1 < 0 ||\u000a        (iVar2 = fcntl(__fd,2,(ulong)(uVar1 | 1),(ulong)(uVar1 | 1)), iVar2 == -1)))) {\u000a      piVar3 = __errno_location();\u000a      iVar2 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar2;\u000a      __fd = -1;\u000a    }\u000a  }\u000a  else {\u000a    __fd = fcntl(__fd_00,__cmd,local_c8);\u000a  }\u000a  return __fd;\u000a}\u000a\u000a
p1361
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0xd8\nMOV R14D,EDI\nTEST AL,AL\nJZ 0x00417e2b\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0x100 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RAX,dword ptr [RSP]\nCMP ESI,0x406\nJNZ 0x00417e86\nCMP EAX,0x28\nJA 0x00417e9b\nMOV RCX,qword ptr [RSP + 0x10]\nADD RCX,RAX\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x00417ea9\nCMP EAX,0x28\nJA 0x00417f04\nMOV RCX,RAX\nADD RCX,qword ptr [RSP + 0x10]\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x00417f12\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV EBX,dword ptr [RCX]\nCMP dword ptr [0x0062e7d0],0x0\nJS 0x00417f23\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00402880\nMOV EBP,EAX\nMOV R15D,0x1\nTEST EBP,EBP\nJNS 0x00417ef4\nCALL 0x00402770\nCMP dword ptr [RAX],0x16\nJNZ 0x00417ef4\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00417de0\nMOV EBP,EAX\nMOV R15D,0xffffffff\nTEST EBP,EBP\nJS 0x00417f86\nMOV dword ptr [0x0062e7d0],R15D\nTEST EBP,EBP\nJNS 0x00417f37\nJMP 0x00417f86\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RDX,qword ptr [RCX]\nXOR EAX,EAX\nMOV EDI,R14D\nCALL 0x00402880\nMOV EBP,EAX\nJMP 0x00417f86\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00417de0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00417f86\nCMP dword ptr [0x0062e7d0],-0x1\nJNZ 0x00417f86\nMOV ESI,0x1\nXOR EAX,EAX\nMOV EDI,EBP\nCALL 0x00402880\nMOV ECX,EAX\nTEST ECX,ECX\nJS 0x00417f6c\nOR ECX,0x1\nMOV ESI,0x2\nXOR EAX,EAX\nMOV EDI,EBP\nMOV EDX,ECX\nCALL 0x00402880\nCMP EAX,-0x1\nJNZ 0x00417f86\nCALL 0x00402770\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x00402ac0\nMOV dword ptr [RBX],R14D\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0xd8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1362
S'55\n41 57\n41 56\n53\n48 81 ec d8 00 00 00\n41 89 fe\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 00 01 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 04 24\n81 fe 06 04 00 00\n75 15\n83 f8 28\n77 25\n48 8b 4c 24 10\n48 01 c1\n8d 40 08\n89 04 24\neb 23\n83 f8 28\n77 79\n48 89 c1\n48 03 4c 24 10\n8d 40 08\n89 04 24\neb 77\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n8b 19\n83 3d 1e 69 21 00 00\n78 6f\n31 c0\n44 89 f7\n89 da\ne8 c0 a9 fe ff\n89 c5\n41 bf 01 00 00 00\n85 ed\n79 28\ne8 9f a8 fe ff\n83 38 16\n75 1e\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 fc fe ff ff\n89 c5\n41 bf ff ff ff ff\n85 ed\n0f 88 92 00 00 00\n44 89 3d d5 68 21 00\n85 ed\n79 38\ne9 82 00 00 00\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n48 8b 11\n31 c0\n44 89 f7\ne8 61 a9 fe ff\n89 c5\neb 63\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 af fe ff ff\n89 c5\n85 ed\n78 4f\n83 3d 92 68 21 00 ff\n75 46\nbe 01 00 00 00\n31 c0\n89 ef\ne8 32 a9 fe ff\n89 c1\n85 c9\n78 18\n83 c9 01\nbe 02 00 00 00\n31 c0\n89 ef\n89 ca\ne8 19 a9 fe ff\n83 f8 ff\n75 1a\ne8 ff a7 fe ff\n48 89 c3\n44 8b 33\n89 ef\ne8 42 ab fe ff\n44 89 33\nbd ff ff ff ff\n89 e8\n48 81 c4 d8 00 00 00\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1363
S'.text:0000000000417de0\n.text:0000000000417de1\n.text:0000000000417de3\n.text:0000000000417de5\n.text:0000000000417de6\n.text:0000000000417ded\n.text:0000000000417df0\n.text:0000000000417df2\n.text:0000000000417df4\n.text:0000000000417df9\n.text:0000000000417dfe\n.text:0000000000417e03\n.text:0000000000417e0b\n.text:0000000000417e13\n.text:0000000000417e1b\n.text:0000000000417e23\n.text:0000000000417e2b\n.text:0000000000417e30\n.text:0000000000417e35\n.text:0000000000417e3a\n.text:0000000000417e3f\n.text:0000000000417e44\n.text:0000000000417e49\n.text:0000000000417e51\n.text:0000000000417e56\n.text:0000000000417e5e\n.text:0000000000417e65\n.text:0000000000417e69\n.text:0000000000417e6f\n.text:0000000000417e71\n.text:0000000000417e74\n.text:0000000000417e76\n.text:0000000000417e7b\n.text:0000000000417e7e\n.text:0000000000417e81\n.text:0000000000417e84\n.text:0000000000417e86\n.text:0000000000417e89\n.text:0000000000417e8b\n.text:0000000000417e8e\n.text:0000000000417e93\n.text:0000000000417e96\n.text:0000000000417e99\n.text:0000000000417e9b\n.text:0000000000417ea0\n.text:0000000000417ea4\n.text:0000000000417ea9\n.text:0000000000417eab\n.text:0000000000417eb2\n.text:0000000000417eb4\n.text:0000000000417eb6\n.text:0000000000417eb9\n.text:0000000000417ebb\n.text:0000000000417ec0\n.text:0000000000417ec2\n.text:0000000000417ec8\n.text:0000000000417eca\n.text:0000000000417ecc\n.text:0000000000417ed1\n.text:0000000000417ed4\n.text:0000000000417ed6\n.text:0000000000417ed8\n.text:0000000000417eda\n.text:0000000000417edd\n.text:0000000000417edf\n.text:0000000000417ee4\n.text:0000000000417ee6\n.text:0000000000417eec\n.text:0000000000417eee\n.text:0000000000417ef4\n.text:0000000000417efb\n.text:0000000000417efd\n.text:0000000000417eff\n.text:0000000000417f04\n.text:0000000000417f09\n.text:0000000000417f0d\n.text:0000000000417f12\n.text:0000000000417f15\n.text:0000000000417f17\n.text:0000000000417f1a\n.text:0000000000417f1f\n.text:0000000000417f21\n.text:0000000000417f23\n.text:0000000000417f25\n.text:0000000000417f27\n.text:0000000000417f2a\n.text:0000000000417f2c\n.text:0000000000417f31\n.text:0000000000417f33\n.text:0000000000417f35\n.text:0000000000417f37\n.text:0000000000417f3e\n.text:0000000000417f40\n.text:0000000000417f45\n.text:0000000000417f47\n.text:0000000000417f49\n.text:0000000000417f4e\n.text:0000000000417f50\n.text:0000000000417f52\n.text:0000000000417f54\n.text:0000000000417f57\n.text:0000000000417f5c\n.text:0000000000417f5e\n.text:0000000000417f60\n.text:0000000000417f62\n.text:0000000000417f67\n.text:0000000000417f6a\n.text:0000000000417f6c\n.text:0000000000417f71\n.text:0000000000417f74\n.text:0000000000417f77\n.text:0000000000417f79\n.text:0000000000417f7e\n.text:0000000000417f81\n.text:0000000000417f86\n.text:0000000000417f88\n.text:0000000000417f8f\n.text:0000000000417f90\n.text:0000000000417f92\n.text:0000000000417f94\n.text:0000000000417f95\n'
p1364
tp1365
sS'__fpending'
p1366
(S'\n__stdcall __fpending()\n'
p1367
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_0062d088)();\u000a  return;\u000a}\u000a\u000a
p1368
S'JMP qword ptr [0x0062d088]\n'
p1369
S'ff 25 b2 a8 22 00\n'
p1370
S'.plt:00000000004027d0\n'
p1371
tp1372
sS'exceeds'
p1373
(S'\n__stdcall exceeds(char * env_var_name, size_t quantity)\n'
p1374
V\u000aint exceeds(char *env_var_name,size_t quantity)\u000a\u000a{\u000a  uint uVar1;\u000a  strtol_error sVar2;\u000a  char *s;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  ulong limit;\u000a  char *tmp;\u000a  ulong local_30;\u000a  char *local_28;\u000a  \u000a  s = getenv(env_var_name);\u000a  if (s != (char *)0x0) {\u000a    sVar2 = xstrtoul(s,&local_28,(ulong *)0xa,(char *)&local_30);\u000a    if (sVar2 != LONGINT_OK) {\u000a      puVar3 = (uint *)__errno_location();\u000a      uVar1 = *puVar3;\u000a      uVar4 = dcgettext(0,"Environment variable %s is not set to a valid decimal number",5);\u000a      error(1,(ulong)uVar1,uVar4,env_var_name);\u000a      return 0;\u000a    }\u000a    if (local_30 < quantity) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1375
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x18\nMOV R15,RSI\nMOV RBX,RDI\nCALL 0x00402700\nTEST RAX,RAX\nJZ 0x0040e499\nXOR R14D,R14D\nLEA RSI,[RSP + 0x10]\nLEA RCX,[RSP + 0x8]\nMOV EDX,0xa\nXOR R8D,R8D\nMOV RDI,RAX\nCALL 0x004174a0\nTEST EAX,EAX\nJZ 0x0040e48c\nCALL 0x00402770\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x421fa3\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nMOV RCX,RBX\nCALL 0x00402d90\nJMP 0x0040e49c\nCMP qword ptr [RSP + 0x8],R15\nMOV R14D,0x1\nJC 0x0040e49c\nXOR R14D,R14D\nMOV EAX,R14D\nADD RSP,0x18\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1376
S'55\n41 57\n41 56\n53\n48 83 ec 18\n49 89 f7\n48 89 fb\ne8 cb 42 ff ff\n48 85 c0\n74 5f\n45 31 f6\n48 8d 74 24 10\n48 8d 4c 24 08\nba 0a 00 00 00\n45 31 c0\n48 89 c7\ne8 49 90 00 00\n85 c0\n74 31\ne8 10 43 ff ff\n8b 28\n31 ff\nbe a3 1f 42 00\nba 05 00 00 00\ne8 9d 44 ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 ee\n48 89 ca\n48 89 d9\ne8 06 49 ff ff\neb 10\n4c 39 7c 24 08\n41 be 01 00 00 00\n72 03\n45 31 f6\n44 89 f0\n48 83 c4 18\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1377
S'.text:000000000040e420\n.text:000000000040e421\n.text:000000000040e423\n.text:000000000040e425\n.text:000000000040e426\n.text:000000000040e42a\n.text:000000000040e42d\n.text:000000000040e430\n.text:000000000040e435\n.text:000000000040e438\n.text:000000000040e43a\n.text:000000000040e43d\n.text:000000000040e442\n.text:000000000040e447\n.text:000000000040e44c\n.text:000000000040e44f\n.text:000000000040e452\n.text:000000000040e457\n.text:000000000040e459\n.text:000000000040e45b\n.text:000000000040e460\n.text:000000000040e462\n.text:000000000040e464\n.text:000000000040e469\n.text:000000000040e46e\n.text:000000000040e473\n.text:000000000040e476\n.text:000000000040e47b\n.text:000000000040e47d\n.text:000000000040e47f\n.text:000000000040e482\n.text:000000000040e485\n.text:000000000040e48a\n.text:000000000040e48c\n.text:000000000040e491\n.text:000000000040e497\n.text:000000000040e499\n.text:000000000040e49c\n.text:000000000040e49f\n.text:000000000040e4a3\n.text:000000000040e4a4\n.text:000000000040e4a6\n.text:000000000040e4a8\n.text:000000000040e4a9\n'
p1378
tp1379
sS'pred_fprintf'
p1380
(S'\n__stdcall pred_fprintf(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p1381
V\u000a_Bool pred_fprintf(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  char cVar1;\u000a  char *pcVar2;\u000a  segment *segment;\u000a  char *fmt;\u000a  timespec tVar3;\u000a  \u000a  segment = *(segment **)pred_ptr->args;\u000a  if (segment != (segment *)0x0) {\u000a    do {\u000a      if ((segment->segkind == KIND_FORMAT) && (cVar1 = segment->format_char[1], cVar1 != 0)) {\u000a        switch(segment->format_char[0]) {\u000a        case 'A':\u000a          get_stat_atime(stat_buf);\u000a          break;\u000a        case 'B':\u000a          tVar3 = get_stat_birthtime(stat_buf);\u000a          if (cVar1 == '@') break;\u000a          fmt = segment->text;\u000a          if (-1 < SUB168((undefined  [16])tVar3 >> 0x40,0)) goto LAB_0040926f;\u000a          pcVar2 = "";\u000a          goto LAB_0040928e;\u000a        case 'C':\u000a          get_stat_ctime(stat_buf);\u000a          break;\u000a        default:\u000a                    /* WARNING: Subroutine does not return */\u000a          __assert_fail("0","print.c",0x515,\u000a                        "_Bool pred_fprintf(const char *, struct stat *, struct predicate *)");\u000a        case 'T':\u000a          get_stat_mtime(stat_buf);\u000a        }\u000a        fmt = segment->text;\u000aLAB_0040926f:\u000a        pcVar2 = format_date();\u000aLAB_0040928e:\u000a        checked_fprintf((format_val *)pred_ptr->args,fmt,pcVar2);\u000a      }\u000a      else {\u000a        do_fprintf((format_val *)pred_ptr->args,segment,pathname,stat_buf);\u000a      }\u000a      segment = segment->next;\u000a    } while (segment != (segment *)0x0);\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1382
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,RDX\nMOV R14,RSI\nMOV R15,RDI\nMOV RBX,qword ptr [R12 + 0x38]\nTEST RBX,RBX\nJZ 0x004092a0\nADD R12,0x38\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP dword ptr [RBX],0x2\nJNZ 0x00409220\nMOVZX EBP,byte ptr [RBX + 0x5]\nTEST BPL,BPL\nJZ 0x00409220\nMOVSX EAX,byte ptr [RBX + 0x4]\nADD EAX,-0x41\nCMP EAX,0x13\nJA 0x004092b1\nJMP qword ptr [0x41efe8 + RAX*0x8]\nMOV RDI,R14\nCALL 0x00416c70\nJMP 0x0040926b\nMOV RDI,R12\nMOV RSI,RBX\nMOV RDX,R15\nMOV RCX,R14\nCALL 0x00409730\nJMP 0x00409293\nMOV RDI,R14\nCALL 0x00416ca0\nCMP BPL,0x40\nJZ 0x0040926b\nTEST RDX,RDX\nMOV R13,qword ptr [RBX + 0x8]\nJNS 0x0040926f\nMOV EDX,0x41e69a\nXOR EAX,EAX\nMOV RDI,R12\nMOV RSI,R13\nJMP 0x0040928e\nMOV RDI,R14\nCALL 0x00416c80\nJMP 0x0040926b\nMOV RDI,R14\nCALL 0x00416c90\nMOV R13,qword ptr [RBX + 0x8]\nMOVSX ECX,byte ptr [RBX + 0x5]\nMOV RDI,RAX\nMOV RSI,RDX\nMOV EDX,ECX\nCALL 0x00409520\nMOV RCX,RAX\nXOR EAX,EAX\nMOV RDI,R12\nMOV RSI,R13\nMOV RDX,RCX\nCALL 0x00409470\nMOV RBX,qword ptr [RBX + 0x18]\nTEST RBX,RBX\nJNZ 0x004091f0\nMOV AL,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x41cdbe\nMOV ESI,0x41f663\nMOV EDX,0x515\nMOV ECX,0x41f85b\nCALL 0x00402a40\n'
p1383
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d4\n49 89 f6\n49 89 ff\n49 8b 5c 24 38\n48 85 db\n0f 84 be 00 00 00\n49 83 c4 38\n66 2e 0f 1f 84 00 00 00 00 00\n83 3b 02\n75 2b\n0f b6 6b 05\n40 84 ed\n74 22\n0f be 43 04\n83 c0 bf\n83 f8 13\n0f 87 a3 00 00 00\nff 24 c5 e8 ef 41 00\n4c 89 f7\ne8 53 da 00 00\neb 4c\n4c 89 e7\n48 89 de\n4c 89 fa\n4c 89 f1\ne8 ff 04 00 00\neb 60\n4c 89 f7\ne8 65 da 00 00\n40 80 fd 40\n74 2a\n48 85 d2\n4c 8b 6b 08\n79 25\nba 9a e6 41 00\n31 c0\n4c 89 e7\n4c 89 ee\neb 35\n4c 89 f7\ne8 1f da 00 00\neb 08\n4c 89 f7\ne8 25 da 00 00\n4c 8b 6b 08\n0f be 4b 05\n48 89 c7\n48 89 d6\n89 ca\ne8 a0 02 00 00\n48 89 c1\n31 c0\n4c 89 e7\n4c 89 ee\n48 89 ca\ne8 dd 01 00 00\n48 8b 5b 18\n48 85 db\n0f 85 50 ff ff ff\nb0 01\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf be cd 41 00\nbe 63 f6 41 00\nba 15 05 00 00\nb9 5b f8 41 00\ne8 76 97 ff ff\n'
p1384
S'.text:00000000004091c0\n.text:00000000004091c1\n.text:00000000004091c3\n.text:00000000004091c5\n.text:00000000004091c7\n.text:00000000004091c9\n.text:00000000004091ca\n.text:00000000004091cb\n.text:00000000004091ce\n.text:00000000004091d1\n.text:00000000004091d4\n.text:00000000004091d9\n.text:00000000004091dc\n.text:00000000004091e2\n.text:00000000004091e6\n.text:00000000004091f0\n.text:00000000004091f3\n.text:00000000004091f5\n.text:00000000004091f9\n.text:00000000004091fc\n.text:00000000004091fe\n.text:0000000000409202\n.text:0000000000409205\n.text:0000000000409208\n.text:000000000040920e\n.text:0000000000409215\n.text:0000000000409218\n.text:000000000040921d\n.text:0000000000409220\n.text:0000000000409223\n.text:0000000000409226\n.text:0000000000409229\n.text:000000000040922c\n.text:0000000000409231\n.text:0000000000409233\n.text:0000000000409236\n.text:000000000040923b\n.text:000000000040923f\n.text:0000000000409241\n.text:0000000000409244\n.text:0000000000409248\n.text:000000000040924a\n.text:000000000040924f\n.text:0000000000409251\n.text:0000000000409254\n.text:0000000000409257\n.text:0000000000409259\n.text:000000000040925c\n.text:0000000000409261\n.text:0000000000409263\n.text:0000000000409266\n.text:000000000040926b\n.text:000000000040926f\n.text:0000000000409273\n.text:0000000000409276\n.text:0000000000409279\n.text:000000000040927b\n.text:0000000000409280\n.text:0000000000409283\n.text:0000000000409285\n.text:0000000000409288\n.text:000000000040928b\n.text:000000000040928e\n.text:0000000000409293\n.text:0000000000409297\n.text:000000000040929a\n.text:00000000004092a0\n.text:00000000004092a2\n.text:00000000004092a6\n.text:00000000004092a7\n.text:00000000004092a9\n.text:00000000004092ab\n.text:00000000004092ad\n.text:00000000004092af\n.text:00000000004092b0\n.text:00000000004092b1\n.text:00000000004092b6\n.text:00000000004092bb\n.text:00000000004092c0\n.text:00000000004092c5\n'
p1385
tp1386
sS'strchr'
p1387
(S'\n__stdcall strchr(char * __s, int __c)\n'
p1388
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_0062d160)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1389
S'JMP qword ptr [0x0062d160]\n'
p1390
S'ff 25 da a7 22 00\n'
p1391
S'.plt:0000000000402980\n'
p1392
tp1393
sS'pred_newer'
p1394
(S'\n__stdcall pred_newer(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p1395
V\u000a_Bool pred_newer(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (*(int *)(pred_ptr->args + 4) == 0) {\u000a    get_stat_mtime(stat_buf);\u000a    iVar1 = compare_ts();\u000a    return (_Bool)(0 < iVar1);\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("COMP_GT == pred_ptr->args.reftime.kind","pred.c",0x2b3,\u000a                "_Bool pred_newer(const char *, struct stat *, struct predicate *)");\u000a}\u000a\u000a
p1396
S'PUSH RBX\nMOV RBX,RDX\nCMP dword ptr [RBX + 0x3c],0x0\nJNZ 0x004042ff\nMOV RDI,RSI\nCALL 0x00416c90\nMOV R8,qword ptr [RBX + 0x40]\nMOV RCX,qword ptr [RBX + 0x48]\nMOV RDI,RAX\nMOV RSI,RDX\nMOV RDX,R8\nCALL 0x00404ac0\nTEST EAX,EAX\nSETG AL\nPOP RBX\nRET\nMOV EDI,0x41cce5\nMOV ESI,0x41cd0c\nMOV EDX,0x2b3\nMOV ECX,0x41ce01\nCALL 0x00402a40\n'
p1397
S'53\n48 89 d3\n83 7b 3c 00\n75 25\n48 89 f7\ne8 ae 29 01 00\n4c 8b 43 40\n48 8b 4b 48\n48 89 c7\n48 89 d6\n4c 89 c2\ne8 c8 07 00 00\n85 c0\n0f 9f c0\n5b\nc3\nbf e5 cc 41 00\nbe 0c cd 41 00\nba b3 02 00 00\nb9 01 ce 41 00\ne8 28 e7 ff ff\n'
p1398
S'.text:00000000004042d0\n.text:00000000004042d1\n.text:00000000004042d4\n.text:00000000004042d8\n.text:00000000004042da\n.text:00000000004042dd\n.text:00000000004042e2\n.text:00000000004042e6\n.text:00000000004042ea\n.text:00000000004042ed\n.text:00000000004042f0\n.text:00000000004042f3\n.text:00000000004042f8\n.text:00000000004042fa\n.text:00000000004042fd\n.text:00000000004042fe\n.text:00000000004042ff\n.text:0000000000404304\n.text:0000000000404309\n.text:000000000040430e\n.text:0000000000404313\n'
p1399
tp1400
sS'print_num'
p1401
(S'\n__stdcall print_num(FILE * stream, ulong num, int * width)\n'
p1402
V\u000a_Bool print_num(FILE *stream,ulong num,int *width)\u000a\u000a{\u000a  int iVar1;\u000a  undefined uVar2;\u000a  \u000a  uVar2 = 0;\u000a  iVar1 = fprintf((FILE *)stream,"%*lu",(ulong)(uint)*width,num);\u000a  if ((-1 < iVar1) && (uVar2 = 1, *width < iVar1)) {\u000a    *width = iVar1;\u000a  }\u000a  return (_Bool)uVar2;\u000a}\u000a\u000a
p1403
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV EDX,dword ptr [RBX]\nXOR EBP,EBP\nMOV ESI,0x422274\nXOR EAX,EAX\nCALL 0x00402ba0\nTEST EAX,EAX\nJS 0x0040f4b6\nMOV BPL,0x1\nCMP dword ptr [RBX],EAX\nJGE 0x0040f4b6\nMOV dword ptr [RBX],EAX\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1404
S'55\n53\n50\n48 89 d3\n48 89 f1\n8b 13\n31 ed\nbe 74 22 42 00\n31 c0\ne8 f7 36 ff ff\n85 c0\n78 09\n40 b5 01\n39 03\n7d 02\n89 03\n89 e8\n48 83 c4 08\n5b\n5d\nc3\n'
p1405
S'.text:000000000040f490\n.text:000000000040f491\n.text:000000000040f492\n.text:000000000040f493\n.text:000000000040f496\n.text:000000000040f499\n.text:000000000040f49b\n.text:000000000040f49d\n.text:000000000040f4a2\n.text:000000000040f4a4\n.text:000000000040f4a9\n.text:000000000040f4ab\n.text:000000000040f4ad\n.text:000000000040f4b0\n.text:000000000040f4b2\n.text:000000000040f4b4\n.text:000000000040f4b6\n.text:000000000040f4b8\n.text:000000000040f4bc\n.text:000000000040f4bd\n.text:000000000040f4be\n'
p1406
tp1407
sS'mbsnwidth'
p1408
(S'\n__stdcall mbsnwidth(char * string, size_t nbytes)\n'
p1409
V\u000aint mbsnwidth(char *string,size_t nbytes)\u000a\u000a{\u000a  byte *pbVar1;\u000a  byte bVar2;\u000a  int iVar3;\u000a  size_t sVar4;\u000a  size_t sVar5;\u000a  ushort **ppuVar6;\u000a  ulong uVar7;\u000a  byte *pbVar8;\u000a  ulong in_RDX;\u000a  int iVar9;\u000a  uint uVar10;\u000a  bool bVar11;\u000a  wint_t local_48;\u000a  uint local_44;\u000a  uint local_40;\u000a  uint local_3c;\u000a  mbstate_t local_38;\u000a  \u000a  pbVar1 = (byte *)(string + nbytes);\u000a  sVar4 = __ctype_get_mb_cur_max();\u000a  if (sVar4 < 2) {\u000a    iVar3 = 0;\u000aLAB_00412b50:\u000a    do {\u000a      pbVar8 = (byte *)string;\u000a      if (pbVar1 <= pbVar8) {\u000a        return iVar3;\u000a      }\u000a      bVar2 = *pbVar8;\u000a      ppuVar6 = __ctype_b_loc();\u000a      if (((*ppuVar6)[(ulong)bVar2] & 0x4000) == 0) {\u000a        if ((in_RDX & 2) != 0) {\u000a          return -1;\u000a        }\u000a        string = (char *)(pbVar8 + 1);\u000a        if (((*ppuVar6)[(ulong)bVar2] & 2) != 0) goto LAB_00412b50;\u000a      }\u000a      bVar11 = iVar3 != 0x7fffffff;\u000a      iVar3 = iVar3 + 1;\u000a      iVar9 = 0x7fffffff;\u000a      string = (char *)(pbVar8 + 1);\u000a    } while (bVar11);\u000a  }\u000a  else {\u000a    if ((long)nbytes < 1) {\u000a      iVar9 = 0;\u000a    }\u000a    else {\u000a      local_44 = (uint)in_RDX & 2;\u000a      uVar10 = (uint)in_RDX & 1;\u000a      local_3c = uVar10 ^ 1;\u000a      local_40 = uVar10 * 4 ^ 5;\u000a      iVar9 = 0;\u000a      do {\u000a        switch(*string) {\u000a        case ' ':\u000a        case '!':\u000a        case '\u005c"':\u000a        case '#':\u000a        case '%':\u000a        case '&':\u000a        case '\u005c'':\u000a        case '(':\u000a        case ')':\u000a        case '*':\u000a        case '+':\u000a        case ',':\u000a        case '-':\u000a        case '.':\u000a        case '/':\u000a        case '0':\u000a        case '1':\u000a        case '2':\u000a        case '3':\u000a        case '4':\u000a        case '5':\u000a        case '6':\u000a        case '7':\u000a        case '8':\u000a        case '9':\u000a        case ':':\u000a        case ';':\u000a        case '<':\u000a        case '=':\u000a        case '>':\u000a        case '?':\u000a        case 'A':\u000a        case 'B':\u000a        case 'C':\u000a        case 'D':\u000a        case 'E':\u000a        case 'F':\u000a        case 'G':\u000a        case 'H':\u000a        case 'I':\u000a        case 'J':\u000a        case 'K':\u000a        case 'L':\u000a        case 'M':\u000a        case 'N':\u000a        case 'O':\u000a        case 'P':\u000a        case 'Q':\u000a        case 'R':\u000a        case 'S':\u000a        case 'T':\u000a        case 'U':\u000a        case 'V':\u000a        case 'W':\u000a        case 'X':\u000a        case 'Y':\u000a        case 'Z':\u000a        case '[':\u000a        case '\u005c\u005c':\u000a        case ']':\u000a        case '^':\u000a        case '_':\u000a        case 'a':\u000a        case 'b':\u000a        case 'c':\u000a        case 'd':\u000a        case 'e':\u000a        case 'f':\u000a        case 'g':\u000a        case 'h':\u000a        case 'i':\u000a        case 'j':\u000a        case 'k':\u000a        case 'l':\u000a        case 'm':\u000a        case 'n':\u000a        case 'o':\u000a        case 'p':\u000a        case 'q':\u000a        case 'r':\u000a        case 's':\u000a        case 't':\u000a        case 'u':\u000a        case 'v':\u000a        case 'w':\u000a        case 'x':\u000a        case 'y':\u000a        case 'z':\u000a        case '{':\u000a        case '|':\u000a        case '}':\u000a        case '~':\u000a          string = (char *)((byte *)string + 1);\u000a          iVar9 = iVar9 + 1;\u000a          break;\u000a        default:\u000a          local_38 = (mbstate_t)0x0;\u000a          do {\u000a            sVar5 = rpl_mbrtowc((wchar_t *)&local_48,string,(size_t)(pbVar1 + -(long)string),\u000a                                (mbstate_t *)&local_38);\u000a            if (sVar5 == 0xfffffffffffffffe) {\u000a              iVar9 = iVar9 + local_3c;\u000a              if ((in_RDX & 1) == 0) {\u000a                string = (char *)pbVar1;\u000a              }\u000a              uVar7 = (ulong)local_40;\u000a            }\u000a            else {\u000a              if (sVar5 == 0) {\u000a                sVar5 = 1;\u000a              }\u000a              else {\u000a                if (sVar5 == 0xffffffffffffffff) {\u000a                  uVar7 = 1;\u000a                  if ((in_RDX & 1) == 0) {\u000a                    string = (char *)((byte *)string + 1);\u000a                    iVar9 = iVar9 + 1;\u000a                    uVar7 = 5;\u000a                  }\u000a                  goto LAB_00412af5;\u000a                }\u000a              }\u000a              iVar3 = wcwidth(local_48);\u000a              if (iVar3 < 0) {\u000a                uVar7 = 1;\u000a                if (local_44 == 0) {\u000a                  iVar3 = iswcntrl(local_48);\u000a                  if (iVar3 == 0) {\u000a                    if (iVar9 == 0x7fffffff) {\u000a                      uVar7 = 7;\u000a                      iVar9 = 0x7fffffff;\u000a                      goto LAB_00412af5;\u000a                    }\u000a                    iVar9 = iVar9 + 1;\u000a                  }\u000aLAB_00412af0:\u000a                  string = (char *)((byte *)string + sVar5);\u000a                  uVar7 = 0;\u000a                }\u000a              }\u000a              else {\u000a                uVar7 = 7;\u000a                if (iVar3 <= 0x7fffffff - iVar9) {\u000a                  iVar9 = iVar9 + iVar3;\u000a                  goto LAB_00412af0;\u000a                }\u000a              }\u000a            }\u000aLAB_00412af5:\u000a            if ((uVar7 & 7) != 0) {\u000a              if ((((byte)uVar7 & 7) != 5) && ((uVar7 & 7) != 0)) {\u000a                if (((byte)uVar7 & 7) != 7) {\u000a                  return -1;\u000a                }\u000a                return 0x7fffffff;\u000a              }\u000a              break;\u000a            }\u000a            iVar3 = mbsinit(&local_38);\u000a          } while (iVar3 == 0);\u000a        }\u000a      } while (string < pbVar1);\u000a    }\u000a  }\u000a  return iVar9;\u000a}\u000a\u000a
p1410
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nLEA R15,[RBX + RBP*0x1]\nCALL 0x00402920\nCMP RAX,0x1\nJBE 0x00412b32\nTEST RBP,RBP\nJLE 0x00412ba0\nMOV EAX,R14D\nAND EAX,0x2\nMOV dword ptr [RSP + 0x4],EAX\nAND R14D,0x1\nMOV EAX,R14D\nXOR EAX,0x1\nMOV dword ptr [RSP + 0xc],EAX\nLEA EAX,[R14*0x4]\nXOR EAX,0x5\nMOV dword ptr [RSP + 0x8],EAX\nXOR EBP,EBP\nLEA R12,[RSP + 0x10]\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVSX EAX,byte ptr [RBX]\nADD EAX,-0x20\nCMP EAX,0x5e\nJA 0x00412a11\nJMP qword ptr [0x4229d0 + RAX*0x8]\nINC RBX\nINC EBP\nCMP RBX,R15\nJC 0x004129f0\nJMP 0x00412ba2\nMOV qword ptr [RSP + 0x10],0x0\nNOP word ptr [RAX + RAX*0x1]\nMOV RDX,R15\nSUB RDX,RBX\nMOV RDI,RSP\nMOV RSI,RBX\nMOV RCX,R12\nCALL 0x00419f50\nMOV R13,RAX\nCMP R13,-0x2\nJZ 0x00412a70\nTEST R13,R13\nJZ 0x00412a90\nCMP R13,-0x1\nJNZ 0x00412a96\nMOV ECX,0x1\nTEST R14D,R14D\nJNZ 0x00412af5\nINC RBX\nINC EBP\nMOV ECX,0x5\nJMP 0x00412af5\nADD EBP,dword ptr [RSP + 0xc]\nTEST R14D,R14D\nCMOVZ RBX,R15\nMOV ECX,dword ptr [RSP + 0x8]\nJMP 0x00412af5\nMOV R13D,0x1\nMOV EDI,dword ptr [RSP]\nCALL 0x00402c40\nTEST EAX,EAX\nJS 0x00412ab6\nMOV EDX,0x7fffffff\nSUB EDX,EBP\nMOV ECX,0x7\nCMP EAX,EDX\nJG 0x00412af5\nADD EBP,EAX\nJMP 0x00412af0\nMOV ECX,0x1\nCMP dword ptr [RSP + 0x4],0x0\nJNZ 0x00412af5\nMOV EDI,dword ptr [RSP]\nCALL 0x00402830\nTEST EAX,EAX\nJNZ 0x00412af0\nCMP EBP,0x7fffffff\nJNZ 0x00412ae2\nMOV ECX,0x7\nMOV EBP,0x7fffffff\nJMP 0x00412af5\nINC EBP\nNOP word ptr CS:[RAX + RAX*0x1]\nADD RBX,R13\nXOR ECX,ECX\nMOV EAX,ECX\nAND AL,0x7\nJNZ 0x00412b10\nMOV RDI,R12\nCALL 0x00402f20\nTEST EAX,EAX\nJZ 0x00412a20\nJMP 0x00412a07\nCMP AL,0x5\nJZ 0x00412a07\nAND CL,0x7\nJZ 0x00412a07\nMOV EBP,0xffffffff\nCMP CL,0x7\nJNZ 0x00412ba2\nMOV EBP,0x7fffffff\nJMP 0x00412ba2\nAND R14D,0x2\nXOR R12D,R12D\nMOV RCX,RBX\nJMP 0x00412b50\nMOV RCX,RBX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RBX,RCX\nCMP RBX,R15\nJNC 0x00412b94\nMOVZX EBP,byte ptr [RBX]\nCALL 0x00402f80\nMOV RAX,qword ptr [RAX]\nMOVZX EAX,word ptr [RAX + RBP*0x2]\nTEST AH,0x40\nJNZ 0x00412b79\nTEST R14D,R14D\nJNZ 0x00412b99\nLEA RCX,[RBX + 0x1]\nTEST AL,0x2\nJNZ 0x00412b50\nINC RBX\nCMP R12D,0x7fffffff\nLEA EAX,[R12 + 0x1]\nMOV EBP,0x7fffffff\nMOV R12D,EAX\nJNZ 0x00412b3e\nJMP 0x00412ba2\nMOV EBP,R12D\nJMP 0x00412ba2\nMOV EBP,0xffffffff\nJMP 0x00412ba2\nXOR EBP,EBP\nMOV EAX,EBP\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1411
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n41 89 d6\n48 89 f5\n48 89 fb\n4c 8d 3c 2b\ne8 80 ff fe ff\n48 83 f8 01\n0f 86 88 01 00 00\n48 85 ed\n0f 8e ed 01 00 00\n44 89 f0\n83 e0 02\n89 44 24 04\n41 83 e6 01\n44 89 f0\n83 f0 01\n89 44 24 0c\n42 8d 04 b5 00 00 00 00\n83 f0 05\n89 44 24 08\n31 ed\n4c 8d 64 24 10\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f be 03\n83 c0 e0\n83 f8 5e\n77 16\nff 24 c5 d0 29 42 00\n48 ff c3\nff c5\n4c 39 fb\n72 e4\ne9 91 01 00 00\n48 c7 44 24 10 00 00 00 00\n66 0f 1f 44 00 00\n4c 89 fa\n48 29 da\n48 89 e7\n48 89 de\n4c 89 e1\ne8 1c 75 00 00\n49 89 c5\n49 83 fd fe\n74 33\n4d 85 ed\n74 4e\n49 83 fd ff\n75 4e\nb9 01 00 00 00\n45 85 f6\n0f 85 9f 00 00 00\n48 ff c3\nff c5\nb9 05 00 00 00\ne9 90 00 00 00\n03 6c 24 0c\n45 85 f6\n49 0f 44 df\n8b 4c 24 08\neb 74\n41 bd 01 00 00 00\n8b 3c 24\ne8 a2 01 ff ff\n85 c0\n78 14\nba ff ff ff 7f\n29 ea\nb9 07 00 00 00\n39 d0\n7f 43\n01 c5\neb 3a\nb9 01 00 00 00\n83 7c 24 04 00\n75 33\n8b 3c 24\ne8 66 fd fe ff\n85 c0\n75 22\n81 fd ff ff ff 7f\n75 0c\nb9 07 00 00 00\nbd ff ff ff 7f\neb 13\nff c5\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 01 eb\n31 c9\n89 c8\n24 07\n75 15\n4c 89 e7\ne8 1d 04 ff ff\n85 c0\n0f 84 15 ff ff ff\ne9 f7 fe ff ff\n3c 05\n0f 84 ef fe ff ff\n80 e1 07\n0f 84 e6 fe ff ff\nbd ff ff ff ff\n80 f9 07\n75 77\nbd ff ff ff 7f\neb 70\n41 83 e6 02\n45 31 e4\n48 89 d9\neb 12\n48 89 d9\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 cb\n4c 39 fb\n73 3c\n0f b6 2b\ne8 20 04 ff ff\n48 8b 00\n0f b7 04 68\nf6 c4 40\n75 0d\n45 85 f6\n75 28\n48 8d 4b 01\na8 02\n75 d7\n48 ff c3\n41 81 fc ff ff ff 7f\n41 8d 44 24 01\nbd ff ff ff 7f\n41 89 c4\n75 ac\neb 0e\n44 89 e5\neb 09\nbd ff ff ff ff\neb 02\n31 ed\n89 e8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1412
S'.text:0000000000412980\n.text:0000000000412981\n.text:0000000000412983\n.text:0000000000412985\n.text:0000000000412987\n.text:0000000000412989\n.text:000000000041298a\n.text:000000000041298e\n.text:0000000000412991\n.text:0000000000412994\n.text:0000000000412997\n.text:000000000041299b\n.text:00000000004129a0\n.text:00000000004129a4\n.text:00000000004129aa\n.text:00000000004129ad\n.text:00000000004129b3\n.text:00000000004129b6\n.text:00000000004129b9\n.text:00000000004129bd\n.text:00000000004129c1\n.text:00000000004129c4\n.text:00000000004129c7\n.text:00000000004129cb\n.text:00000000004129d3\n.text:00000000004129d6\n.text:00000000004129da\n.text:00000000004129dc\n.text:00000000004129e1\n.text:00000000004129f0\n.text:00000000004129f3\n.text:00000000004129f6\n.text:00000000004129f9\n.text:00000000004129fb\n.text:0000000000412a02\n.text:0000000000412a05\n.text:0000000000412a07\n.text:0000000000412a0a\n.text:0000000000412a0c\n.text:0000000000412a11\n.text:0000000000412a1a\n.text:0000000000412a20\n.text:0000000000412a23\n.text:0000000000412a26\n.text:0000000000412a29\n.text:0000000000412a2c\n.text:0000000000412a2f\n.text:0000000000412a34\n.text:0000000000412a37\n.text:0000000000412a3b\n.text:0000000000412a3d\n.text:0000000000412a40\n.text:0000000000412a42\n.text:0000000000412a46\n.text:0000000000412a48\n.text:0000000000412a4d\n.text:0000000000412a50\n.text:0000000000412a56\n.text:0000000000412a59\n.text:0000000000412a5b\n.text:0000000000412a60\n.text:0000000000412a70\n.text:0000000000412a74\n.text:0000000000412a77\n.text:0000000000412a7b\n.text:0000000000412a7f\n.text:0000000000412a90\n.text:0000000000412a96\n.text:0000000000412a99\n.text:0000000000412a9e\n.text:0000000000412aa0\n.text:0000000000412aa2\n.text:0000000000412aa7\n.text:0000000000412aa9\n.text:0000000000412aae\n.text:0000000000412ab0\n.text:0000000000412ab2\n.text:0000000000412ab4\n.text:0000000000412ab6\n.text:0000000000412abb\n.text:0000000000412ac0\n.text:0000000000412ac2\n.text:0000000000412ac5\n.text:0000000000412aca\n.text:0000000000412acc\n.text:0000000000412ace\n.text:0000000000412ad4\n.text:0000000000412ad6\n.text:0000000000412adb\n.text:0000000000412ae0\n.text:0000000000412ae2\n.text:0000000000412ae4\n.text:0000000000412af0\n.text:0000000000412af3\n.text:0000000000412af5\n.text:0000000000412af7\n.text:0000000000412af9\n.text:0000000000412afb\n.text:0000000000412afe\n.text:0000000000412b03\n.text:0000000000412b05\n.text:0000000000412b0b\n.text:0000000000412b10\n.text:0000000000412b12\n.text:0000000000412b18\n.text:0000000000412b1b\n.text:0000000000412b21\n.text:0000000000412b26\n.text:0000000000412b29\n.text:0000000000412b2b\n.text:0000000000412b30\n.text:0000000000412b32\n.text:0000000000412b36\n.text:0000000000412b39\n.text:0000000000412b3c\n.text:0000000000412b3e\n.text:0000000000412b41\n.text:0000000000412b50\n.text:0000000000412b53\n.text:0000000000412b56\n.text:0000000000412b58\n.text:0000000000412b5b\n.text:0000000000412b60\n.text:0000000000412b63\n.text:0000000000412b67\n.text:0000000000412b6a\n.text:0000000000412b6c\n.text:0000000000412b6f\n.text:0000000000412b71\n.text:0000000000412b75\n.text:0000000000412b77\n.text:0000000000412b79\n.text:0000000000412b7c\n.text:0000000000412b83\n.text:0000000000412b88\n.text:0000000000412b8d\n.text:0000000000412b90\n.text:0000000000412b92\n.text:0000000000412b94\n.text:0000000000412b97\n.text:0000000000412b99\n.text:0000000000412b9e\n.text:0000000000412ba0\n.text:0000000000412ba2\n.text:0000000000412ba4\n.text:0000000000412ba8\n.text:0000000000412ba9\n.text:0000000000412bab\n.text:0000000000412bad\n.text:0000000000412baf\n.text:0000000000412bb1\n.text:0000000000412bb2\n'
p1413
tp1414
sS'show_outstanding_execdirs'
p1415
(S'\n__stdcall show_outstanding_execdirs(FILE * fp)\n'
p1416
V\u000avoid show_outstanding_execdirs(FILE *fp)\u000a\u000a{\u000a  bool bVar1;\u000a  predicate *ppVar2;\u000a  char *pcVar3;\u000a  ulong uVar4;\u000a  \u000a  if (((byte)options.debug_options & 0x20) == 0) {\u000a    return;\u000a  }\u000a  ppVar2 = get_eval_tree();\u000a  fwrite("Outstanding execdirs:",0x15,1,(FILE *)fp);\u000a  if (ppVar2 != (predicate *)0x0) {\u000a    bVar1 = false;\u000a    do {\u000a      pcVar3 = (char *)0x0;\u000a      if (ppVar2->pred_func == pred_okdir) {\u000a        pcVar3 = "-okdir";\u000a      }\u000a      if (ppVar2->pred_func == pred_execdir) {\u000a        pcVar3 = "-execdir";\u000a      }\u000a      if (pcVar3 != (char *)0x0) {\u000a        fprintf((FILE *)fp,"%s ");\u000a        if (ppVar2->args[0] != 0) {\u000a          fwrite("multiple ",9,1,(FILE *)fp);\u000a        }\u000a        fprintf((FILE *)fp,"%lu args: ",*(undefined8 *)(ppVar2->args + 0x60));\u000a        if (*(long *)(ppVar2->args + 0x60) != 0) {\u000a          uVar4 = 0;\u000a          do {\u000a            fprintf((FILE *)fp,"%s ",*(undefined8 *)(*(long *)(ppVar2->args + 0x68) + uVar4 * 8));\u000a            uVar4 = uVar4 + 1;\u000a          } while (uVar4 < *(ulong *)(ppVar2->args + 0x60));\u000a        }\u000a        fputc(10,(FILE *)fp);\u000a        bVar1 = true;\u000a      }\u000a      ppVar2 = ppVar2->pred_next;\u000a    } while (ppVar2 != (predicate *)0x0);\u000a    if (bVar1) {\u000a      return;\u000a    }\u000a  }\u000a  fwrite(" none\u005cn",6,1,(FILE *)fp);\u000a  return;\u000a}\u000a\u000a
p1417
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nTEST byte ptr [0x0062f080],0x20\nJZ 0x0040365e\nCALL 0x004058b0\nMOV RBX,RAX\nMOV EDI,0x41c73e\nMOV ESI,0x15\nMOV EDX,0x1\nMOV RCX,R14\nCALL 0x00402ee0\nTEST RBX,RBX\nJZ 0x00403639\nMOV R12D,0x4044a0\nMOV R13D,0x41e987\nMOV EBP,0x41c754\nXOR EAX,EAX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RCX,qword ptr [RBX]\nCMP RCX,R12\nMOV EDX,0x0\nCMOVZ RDX,R13\nMOV ESI,0x404040\nCMP RCX,RSI\nCMOVZ RDX,RBP\nTEST RDX,RDX\nJZ 0x00403625\nMOV ESI,0x4222a5\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00402ba0\nCMP byte ptr [RBX + 0x38],0x0\nJZ 0x004035c0\nMOV EDI,0x41c75d\nMOV ESI,0x9\nMOV EDX,0x1\nMOV RCX,R14\nCALL 0x00402ee0\nMOV RDX,qword ptr [0x98 + RBX]\nMOV ESI,0x41c767\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00402ba0\nCMP qword ptr [0x98 + RBX],0x0\nJZ 0x00403616\nXOR R15D,R15D\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RAX,qword ptr [0xa0 + RBX]\nMOV RDX,qword ptr [RAX + R15*0x8]\nMOV ESI,0x4222a5\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00402ba0\nINC R15\nCMP R15,qword ptr [0x98 + RBX]\nJC 0x004035f0\nMOV EDI,0xa\nMOV RSI,R14\nCALL 0x00402af0\nMOV AL,0x1\nMOV RBX,qword ptr [0x108 + RBX]\nTEST RBX,RBX\nJNZ 0x00403570\nTEST AL,0x1\nJNZ 0x0040365e\nMOV EDI,0x41c772\nMOV ESI,0x6\nMOV EDX,0x1\nMOV RCX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00402ee0\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1418
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 fe\nf6 05 5b bb 22 00 20\n0f 84 33 01 00 00\ne8 80 23 00 00\n48 89 c3\nbf 3e c7 41 00\nbe 15 00 00 00\nba 01 00 00 00\n4c 89 f1\ne8 96 f9 ff ff\n48 85 db\n0f 84 e6 00 00 00\n41 bc a0 44 40 00\n41 bd 87 e9 41 00\nbd 54 c7 41 00\n31 c0\n66 2e 0f 1f 84 00 00 00 00 00\n48 8b 0b\n4c 39 e1\nba 00 00 00 00\n49 0f 44 d5\nbe 40 40 40 00\n48 39 f1\n48 0f 44 d5\n48 85 d2\n0f 84 91 00 00 00\nbe a5 22 42 00\n31 c0\n4c 89 f7\ne8 fd f5 ff ff\n80 7b 38 00\n74 17\nbf 5d c7 41 00\nbe 09 00 00 00\nba 01 00 00 00\n4c 89 f1\ne8 20 f9 ff ff\n48 8b 93 98 00 00 00\nbe 67 c7 41 00\n31 c0\n4c 89 f7\ne8 ca f5 ff ff\n48 83 bb 98 00 00 00 00\n74 36\n45 31 ff\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 83 a0 00 00 00\n4a 8b 14 f8\nbe a5 22 42 00\n31 c0\n4c 89 f7\ne8 96 f5 ff ff\n49 ff c7\n4c 3b bb 98 00 00 00\n72 da\nbf 0a 00 00 00\n4c 89 f6\ne8 cd f4 ff ff\nb0 01\n48 8b 9b 08 01 00 00\n48 85 db\n0f 85 3b ff ff ff\na8 01\n75 25\nbf 72 c7 41 00\nbe 06 00 00 00\nba 01 00 00 00\n4c 89 f1\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 82 f8 ff ff\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1419
S'.text:0000000000403510\n.text:0000000000403511\n.text:0000000000403513\n.text:0000000000403515\n.text:0000000000403517\n.text:0000000000403519\n.text:000000000040351a\n.text:000000000040351b\n.text:000000000040351e\n.text:0000000000403525\n.text:000000000040352b\n.text:0000000000403530\n.text:0000000000403533\n.text:0000000000403538\n.text:000000000040353d\n.text:0000000000403542\n.text:0000000000403545\n.text:000000000040354a\n.text:000000000040354d\n.text:0000000000403553\n.text:0000000000403559\n.text:000000000040355f\n.text:0000000000403564\n.text:0000000000403566\n.text:0000000000403570\n.text:0000000000403573\n.text:0000000000403576\n.text:000000000040357b\n.text:000000000040357f\n.text:0000000000403584\n.text:0000000000403587\n.text:000000000040358b\n.text:000000000040358e\n.text:0000000000403594\n.text:0000000000403599\n.text:000000000040359b\n.text:000000000040359e\n.text:00000000004035a3\n.text:00000000004035a7\n.text:00000000004035a9\n.text:00000000004035ae\n.text:00000000004035b3\n.text:00000000004035b8\n.text:00000000004035bb\n.text:00000000004035c0\n.text:00000000004035c7\n.text:00000000004035cc\n.text:00000000004035ce\n.text:00000000004035d1\n.text:00000000004035d6\n.text:00000000004035de\n.text:00000000004035e0\n.text:00000000004035e3\n.text:00000000004035f0\n.text:00000000004035f7\n.text:00000000004035fb\n.text:0000000000403600\n.text:0000000000403602\n.text:0000000000403605\n.text:000000000040360a\n.text:000000000040360d\n.text:0000000000403614\n.text:0000000000403616\n.text:000000000040361b\n.text:000000000040361e\n.text:0000000000403623\n.text:0000000000403625\n.text:000000000040362c\n.text:000000000040362f\n.text:0000000000403635\n.text:0000000000403637\n.text:0000000000403639\n.text:000000000040363e\n.text:0000000000403643\n.text:0000000000403648\n.text:000000000040364b\n.text:000000000040364f\n.text:0000000000403650\n.text:0000000000403652\n.text:0000000000403654\n.text:0000000000403656\n.text:0000000000403658\n.text:0000000000403659\n.text:000000000040365e\n.text:0000000000403662\n.text:0000000000403663\n.text:0000000000403665\n.text:0000000000403667\n.text:0000000000403669\n.text:000000000040366b\n.text:000000000040366c\n'
p1420
tp1421
sS'parse_mindepth'
p1422
(S'\n__stdcall parse_mindepth(parser_table * entry, char * * argv, int * arg_ptr)\n'
p1423
V\u000a_Bool parse_mindepth(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = insert_depthspec();\u000a  return _Var1;\u000a}\u000a\u000a
p1424
S'MOV RAX,RDX\nMOV EDX,0x62f048\nMOV RDI,RSI\nMOV RSI,RAX\nJMP 0x0040d7d0\n'
p1425
S'48 89 d0\nba 48 f0 62 00\n48 89 f7\n48 89 c6\ne9 ed 1c 00 00\n'
p1426
S'.text:000000000040bad0\n.text:000000000040bad3\n.text:000000000040bad8\n.text:000000000040badb\n.text:000000000040bade\n'
p1427
tp1428
sS'gettimeofday'
p1429
(S'\n__stdcall gettimeofday(timeval * __tv, __timezone_ptr_t __tz)\n'
p1430
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint gettimeofday(timeval *__tv,__timezone_ptr_t __tz)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_gettimeofday_0062d1b8)();\u000a  return iVar1;\u000a}\u000a\u000a
p1431
S'JMP qword ptr [0x0062d1b8]\n'
p1432
S'ff 25 82 a7 22 00\n'
p1433
S'.plt:0000000000402a30\n'
p1434
tp1435
sS'find_non_slash'
p1436
(S'\n__stdcall find_non_slash(char * s)\n'
p1437
V\u000achar * find_non_slash(char *s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = strspn(s,"/");\u000a  return s + sVar1;\u000a}\u000a\u000a
p1438
S'PUSH RBX\nMOV RBX,RDI\nMOV ESI,0x41d1f6\nCALL 0x00402ad0\nADD RAX,RBX\nPOP RBX\nRET\n'
p1439
S'53\n48 89 fb\nbe f6 d1 41 00\ne8 42 ad fe ff\n48 01 d8\n5b\nc3\n'
p1440
S'.text:0000000000417d80\n.text:0000000000417d81\n.text:0000000000417d84\n.text:0000000000417d89\n.text:0000000000417d8e\n.text:0000000000417d91\n.text:0000000000417d92\n'
p1441
tp1442
sS'quotearg_n_style_colon'
p1443
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p1444
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1445
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x004162d0\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x004151b0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x004160a0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1446
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p1447
S'.text:0000000000416450\n.text:0000000000416451\n.text:0000000000416453\n.text:0000000000416454\n.text:0000000000416458\n.text:000000000041645b\n.text:000000000041645d\n.text:0000000000416462\n.text:0000000000416465\n.text:000000000041646a\n.text:000000000041646f\n.text:0000000000416474\n.text:0000000000416477\n.text:000000000041647c\n.text:0000000000416483\n.text:0000000000416485\n.text:0000000000416488\n.text:000000000041648b\n.text:0000000000416490\n.text:0000000000416494\n.text:0000000000416495\n.text:0000000000416497\n.text:0000000000416498\n'
p1448
tp1449
sS'field_length'
p1450
(S'\n__stdcall field_length(char * str, char * separators)\n'
p1451
V\u000asize_t field_length(char *str,char *separators)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t sVar2;\u000a  \u000a  if (*separators != 0) {\u000a    pcVar1 = strpbrk(str,separators);\u000a    if (pcVar1 != (char *)0x0) {\u000a      return (size_t)(pcVar1 + -(long)str);\u000a    }\u000a  }\u000a  sVar2 = strlen(str);\u000a  return sVar2;\u000a}\u000a\u000a
p1452
S'PUSH RBX\nMOV RBX,RDI\nCMP byte ptr [RSI],0x0\nJZ 0x0040fbcb\nMOV RDI,RBX\nCALL 0x00402cf0\nTEST RAX,RAX\nJZ 0x0040fbcb\nSUB RAX,RBX\nPOP RBX\nRET\nMOV RDI,RBX\nPOP RBX\nJMP 0x00402930\n'
p1453
S'53\n48 89 fb\n80 3e 00\n74 12\n48 89 df\ne8 2f 31 ff ff\n48 85 c0\n74 05\n48 29 d8\n5b\nc3\n48 89 df\n5b\ne9 5c 2d ff ff\n'
p1454
S'.text:000000000040fbb0\n.text:000000000040fbb1\n.text:000000000040fbb4\n.text:000000000040fbb7\n.text:000000000040fbb9\n.text:000000000040fbbc\n.text:000000000040fbc1\n.text:000000000040fbc4\n.text:000000000040fbc6\n.text:000000000040fbc9\n.text:000000000040fbca\n.text:000000000040fbcb\n.text:000000000040fbce\n.text:000000000040fbcf\n'
p1455
tp1456
sS'issue_loop_warning'
p1457
(S'\n__stdcall issue_loop_warning(FTSENT * ent)\n'
p1458
V\u000avoid issue_loop_warning(FTSENT *ent)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  \u000a  if ((ent->fts_statp[0].st_mode & 0xf000) == 0xa000) {\u000a    uVar1 = dcgettext(0,\u000a                      "Symbolic link %s is part of a loop in the directory hierarchy; we have already visited the directory to which it points."\u000a                      ,5);\u000a    pcVar2 = safely_quote_err_filename((char *)0x0);\u000a    error(0,0,uVar1,pcVar2);\u000a    return;\u000a  }\u000a  uVar1 = dcgettext(0,"File system loop detected; %s is part of the same file system loop as %s.",5)\u000a  ;\u000a  pcVar2 = safely_quote_err_filename((char *)0x0);\u000a  pcVar3 = partial_quotearg_n();\u000a  error(0,0,uVar1,pcVar2,pcVar3);\u000a  return;\u000a}\u000a\u000a
p1459
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nMOV EAX,0xf000\nAND EAX,dword ptr [0x90 + RBX]\nXOR EDI,EDI\nCMP EAX,0xa000\nJNZ 0x00403b1f\nMOV ESI,0x41c942\nMOV EDX,0x5\nCALL 0x00402910\nMOV R14,RAX\nMOV RSI,qword ptr [RBX + 0x38]\nXOR EDI,EDI\nCALL 0x00408920\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R14\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00402d90\nMOV ESI,0x41c9bb\nMOV EDX,0x5\nCALL 0x00402910\nMOV R14,RAX\nMOV RSI,qword ptr [RBX + 0x38]\nXOR EDI,EDI\nCALL 0x00408920\nMOV R15,RAX\nMOV RAX,qword ptr [RBX]\nMOV RDI,qword ptr [RAX + 0x38]\nMOV RSI,qword ptr [RAX + 0x48]\nMOV EDX,dword ptr [0x0062f0ac]\nCALL 0x00403c20\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R14\nMOV RCX,R15\nMOV R8,RBX\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00402d90\n'
p1460
S'41 57\n41 56\n53\n48 89 fb\nb8 00 f0 00 00\n23 83 90 00 00 00\n31 ff\n3d 00 a0 00 00\n75 33\nbe 42 c9 41 00\nba 05 00 00 00\ne8 15 ee ff ff\n49 89 c6\n48 8b 73 38\n31 ff\ne8 17 4e 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n4c 89 f2\n5b\n41 5e\n41 5f\ne9 71 f2 ff ff\nbe bb c9 41 00\nba 05 00 00 00\ne8 e2 ed ff ff\n49 89 c6\n48 8b 73 38\n31 ff\ne8 e4 4d 00 00\n49 89 c7\n48 8b 03\n48 8b 78 38\n48 8b 70 48\n8b 15 5c b5 22 00\ne8 cb 00 00 00\n48 89 c3\n31 ff\n31 f6\n31 c0\n4c 89 f2\n4c 89 f9\n49 89 d8\n5b\n41 5e\n41 5f\ne9 1f f2 ff ff\n'
p1461
S'.text:0000000000403ad0\n.text:0000000000403ad2\n.text:0000000000403ad4\n.text:0000000000403ad5\n.text:0000000000403ad8\n.text:0000000000403add\n.text:0000000000403ae3\n.text:0000000000403ae5\n.text:0000000000403aea\n.text:0000000000403aec\n.text:0000000000403af1\n.text:0000000000403af6\n.text:0000000000403afb\n.text:0000000000403afe\n.text:0000000000403b02\n.text:0000000000403b04\n.text:0000000000403b09\n.text:0000000000403b0c\n.text:0000000000403b0e\n.text:0000000000403b10\n.text:0000000000403b12\n.text:0000000000403b15\n.text:0000000000403b16\n.text:0000000000403b18\n.text:0000000000403b1a\n.text:0000000000403b1f\n.text:0000000000403b24\n.text:0000000000403b29\n.text:0000000000403b2e\n.text:0000000000403b31\n.text:0000000000403b35\n.text:0000000000403b37\n.text:0000000000403b3c\n.text:0000000000403b3f\n.text:0000000000403b42\n.text:0000000000403b46\n.text:0000000000403b4a\n.text:0000000000403b50\n.text:0000000000403b55\n.text:0000000000403b58\n.text:0000000000403b5a\n.text:0000000000403b5c\n.text:0000000000403b5e\n.text:0000000000403b61\n.text:0000000000403b64\n.text:0000000000403b67\n.text:0000000000403b68\n.text:0000000000403b6a\n.text:0000000000403b6c\n'
p1462
tp1463
sS'quote_mem'
p1464
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p1465
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1466
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00416560\n'
p1467
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p1468
S'.text:0000000000416570\n.text:0000000000416573\n.text:0000000000416576\n.text:0000000000416578\n.text:000000000041657b\n.text:000000000041657e\n'
p1469
tp1470
sS'fts_load'
p1471
(S'\n__stdcall fts_load(FTS * sp, FTSENT * p)\n'
p1472
V\u000avoid fts_load(FTS *sp,FTSENT *p)\u000a\u000a{\u000a  FTSENT *__src;\u000a  FTSENT *pFVar1;\u000a  size_t sVar2;\u000a  char *__s;\u000a  \u000a  p->fts_pathlen = p->fts_namelen;\u000a  __src = p + 1;\u000a  memmove(sp->fts_path,__src,p->fts_namelen + 1);\u000a  pFVar1 = (FTSENT *)strrchr((char *)__src,0x2f);\u000a  if ((pFVar1 != (FTSENT *)0x0) &&\u000a     ((pFVar1 != __src || (*(char *)((long)&pFVar1->fts_cycle + 1) != 0)))) {\u000a    __s = (char *)((long)&pFVar1->fts_cycle + 1);\u000a    sVar2 = strlen(__s);\u000a    memmove(__src,__s,sVar2 + 1);\u000a    p->fts_namelen = sVar2;\u000a  }\u000a  __s = sp->fts_path;\u000a  p->fts_path = __s;\u000a  p->fts_accpath = __s;\u000a  return;\u000a}\u000a\u000a
p1473
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R12,RSI\nMOV R14,RDI\nMOV RDX,qword ptr [R12 + 0x60]\nMOV qword ptr [R12 + 0x48],RDX\nMOV RDI,qword ptr [R14 + 0x20]\nLEA R15,[0x108 + R12]\nINC RDX\nMOV RSI,R15\nCALL 0x00402d80\nMOV ESI,0x2f\nMOV RDI,R15\nCALL 0x00402a00\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004199f2\nCMP RBX,R15\nJNZ 0x004199d0\nCMP byte ptr [RBX + 0x1],0x0\nJZ 0x004199f2\nINC RBX\nMOV RDI,RBX\nCALL 0x00402930\nMOV R13,RAX\nLEA RDX,[R13 + 0x1]\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x00402d80\nMOV qword ptr [R12 + 0x60],R13\nMOV RAX,qword ptr [R14 + 0x20]\nMOV qword ptr [R12 + 0x38],RAX\nMOV qword ptr [R12 + 0x30],RAX\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p1474
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 f4\n49 89 fe\n49 8b 54 24 60\n49 89 54 24 48\n49 8b 7e 20\n4d 8d bc 24 08 01 00 00\n48 ff c2\n4c 89 fe\ne8 d0 93 fe ff\nbe 2f 00 00 00\n4c 89 ff\ne8 43 90 fe ff\n48 89 c3\n48 85 db\n74 2d\n4c 39 fb\n75 06\n80 7b 01 00\n74 22\n48 ff c3\n48 89 df\ne8 55 8f fe ff\n49 89 c5\n49 8d 55 01\n4c 89 ff\n48 89 de\ne8 93 93 fe ff\n4d 89 6c 24 60\n49 8b 46 20\n49 89 44 24 38\n49 89 44 24 30\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p1475
S'.text:0000000000419980\n.text:0000000000419982\n.text:0000000000419984\n.text:0000000000419986\n.text:0000000000419988\n.text:0000000000419989\n.text:000000000041998c\n.text:000000000041998f\n.text:0000000000419994\n.text:0000000000419999\n.text:000000000041999d\n.text:00000000004199a5\n.text:00000000004199a8\n.text:00000000004199ab\n.text:00000000004199b0\n.text:00000000004199b5\n.text:00000000004199b8\n.text:00000000004199bd\n.text:00000000004199c0\n.text:00000000004199c3\n.text:00000000004199c5\n.text:00000000004199c8\n.text:00000000004199ca\n.text:00000000004199ce\n.text:00000000004199d0\n.text:00000000004199d3\n.text:00000000004199d6\n.text:00000000004199db\n.text:00000000004199de\n.text:00000000004199e2\n.text:00000000004199e5\n.text:00000000004199e8\n.text:00000000004199ed\n.text:00000000004199f2\n.text:00000000004199f6\n.text:00000000004199fb\n.text:0000000000419a00\n.text:0000000000419a01\n.text:0000000000419a03\n.text:0000000000419a05\n.text:0000000000419a07\n.text:0000000000419a09\n'
p1476
tp1477
sS'sscanf'
p1478
(S'\n__stdcall sscanf(char * __s, char * __format)\n'
p1479
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sscanf(char *__s,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sscanf_0062d310)();\u000a  return iVar1;\u000a}\u000a\u000a
p1480
S'JMP qword ptr [0x0062d310]\n'
p1481
S'ff 25 2a a6 22 00\n'
p1482
S'.plt:0000000000402ce0\n'
p1483
tp1484
sS'yyparse'
p1485
(S'\n__stdcall yyparse(parser_control * pc)\n'
p1486
V\u000aint yyparse(parser_control *pc)\u000a\u000a{\u000a  textint *ptVar1;\u000a  char cVar2;\u000a  long lVar3;\u000a  uint uVar4;\u000a  uint uVar5;\u000a  int iVar6;\u000a  ulong uVar7;\u000a  long lVar8;\u000a  long local_568;\u000a  ulong uVar9;\u000a  relative_time *prVar10;\u000a  long lVar11;\u000a  uint uVar12;\u000a  long lVar13;\u000a  long lVar14;\u000a  long lVar15;\u000a  long_time_t lVar16;\u000a  long lVar17;\u000a  relative_time *prVar18;\u000a  YYSTYPE yylval;\u000a  yytype_int16 yyssa [20];\u000a  YYSTYPE yyvsa [20];\u000a  undefined4 local_598;\u000a  undefined4 uVar19;\u000a  undefined4 uVar20;\u000a  undefined4 uVar21;\u000a  undefined4 uVar22;\u000a  undefined4 uVar23;\u000a  undefined4 uVar24;\u000a  undefined4 uVar25;\u000a  undefined4 local_578;\u000a  undefined4 uVar26;\u000a  undefined4 uVar27;\u000a  undefined4 uVar28;\u000a  long local_530;\u000a  undefined4 local_508;\u000a  undefined4 uStack1284;\u000a  undefined4 local_500;\u000a  undefined4 uStack1276;\u000a  undefined4 local_4f8;\u000a  undefined4 uStack1268;\u000a  undefined4 uStack1264;\u000a  undefined4 uStack1260;\u000a  undefined4 local_4e8;\u000a  undefined4 uStack1252;\u000a  undefined4 uStack1248;\u000a  undefined4 uStack1244;\u000a  long local_4d8;\u000a  short local_4c8 [24];\u000a  relative_time local_498 [20];\u000a  \u000a  local_4e8 = 0;\u000a  uStack1252 = 0;\u000a  uStack1248 = 0;\u000a  uStack1244 = 0;\u000a  local_4f8 = 0;\u000a  uStack1268 = 0;\u000a  uStack1264 = 0;\u000a  uStack1260 = 0;\u000a  local_508 = 0;\u000a  uStack1284 = 0;\u000a  local_500 = 0;\u000a  uStack1276 = 0;\u000a  local_4d8 = 0;\u000a  local_4c8[0] = 0;\u000a  ptVar1 = &pc->year;\u000a  uVar4 = 0xfffffffe;\u000a  uVar7 = 0;\u000a  lVar17 = 0;\u000a  prVar18 = local_498;\u000aLAB_00413d50:\u000a  iVar6 = (int)uVar7;\u000a  if (iVar6 == 0xc) {\u000a    return 0;\u000a  }\u000a  cVar2 = yypact[(long)iVar6];\u000a  if ((int)cVar2 != -0x5d) {\u000a    if (uVar4 == 0xfffffffe) {\u000a      uVar4 = yylex((YYSTYPE *)&local_508,pc);\u000a    }\u000a    if ((int)uVar4 < 1) {\u000a      uVar5 = 0;\u000a      uVar4 = 0;\u000a    }\u000a    else {\u000a      uVar5 = 2;\u000a      if (uVar4 < 0x116) {\u000a        uVar5 = (uint)""[(long)(int)uVar4];\u000a      }\u000a    }\u000a    uVar12 = (int)cVar2 + uVar5;\u000a    if ((0x70 < uVar12) ||\u000a       (uVar9 = SEXT48((int)uVar12),\u000a       (int)\u000a            "\u005cx1b\u005cx05\u005cx06\u005ca\u005cb\u005ct\u005cn\u005cx04\u005cf\u005cx0ff\u005cx0f\u005cx10\u005cx13\u005cx0f\u005cx13\u005cx13\u005cx14\u005cx13\u005cx19p\u005cx19\u005cx13\u005cx1b\u005cx05\u005cx06\u005ca\u005cb\u005ct\u005cn\u005cx05\u005cx06\u005ca\u005cb\u005ct\u005cn\u005cx13\u005cx13\u005cx13k\u005cx13\u005cx14\u005cx19\u005cx19\u005cx19q\u005cx13\u005cx14\u005cx15\u005cx16\u005cx19\u005cx05\u005cx06\u005ca\u005cb\u005ct\u005cn\u005cv\u005cf\u005cr\u005cx0e\u005cx17\u005cx10\u005cx11\u005cx12\u005cx13\u005cx14\u005cx15\u005cx16`\u005cx18\u005cx05\u005cx06\u005ca\u005cb\u005ct\u005cn"\u000a            [uVar9] != uVar5)) goto LAB_00413390;\u000a    uVar7 = (ulong)\u000a                   "OCDEFGH:IdkJKenL12efqM;N=>?@AB=>?@ABee\u005c\u005coZ[jpXo\u005cx05\u005cx06\u005ca\u005cbX\u005cr\u005cx0e\u005cx0f\u005cx10\u005cx11\u005cx12\u005cx13\u005cx14\u005cx15\u005cx16\u005cx01\u005cx17\u005cx18\u005cx19\u005cx1a\u005cx1b\u005cx1c\u005cx1dO\u005cx1e345678\u005cf9=>?@AB<0P/\u005cx06S\u005cbQR\u005cx1aTUVW^_`Yiabc"\u000a                   [uVar9];\u000a    if ((uVar9 | 4) == 0x6f) {\u000a      uVar5 = -(uint)\u000a                     "OCDEFGH:IdkJKenL12efqM;N=>?@AB=>?@ABee\u005c\u005coZ[jpXo\u005cx05\u005cx06\u005ca\u005cbX\u005cr\u005cx0e\u005cx0f\u005cx10\u005cx11\u005cx12\u005cx13\u005cx14\u005cx15\u005cx16\u005cx01\u005cx17\u005cx18\u005cx19\u005cx1a\u005cx1b\u005cx1c\u005cx1dO\u005cx1e345678\u005cf9=>?@AB<0P/\u005cx06S\u005cbQR\u005cx1aTUVW^_`Yiabc"\u000a                     [uVar9];\u000a      goto LAB_0041339f;\u000a    }\u000a    prVar18[1].ns = local_4d8;\u000a    *(undefined4 *)&prVar18[1].minutes = local_4e8;\u000a    *(undefined4 *)((long)&prVar18[1].minutes + 4) = uStack1252;\u000a    *(undefined4 *)&prVar18[1].seconds = uStack1248;\u000a    *(undefined4 *)((long)&prVar18[1].seconds + 4) = uStack1244;\u000a    *(undefined4 *)&prVar18[1].day = local_4f8;\u000a    *(undefined4 *)((long)&prVar18[1].day + 4) = uStack1268;\u000a    *(undefined4 *)&prVar18[1].hour = uStack1264;\u000a    *(undefined4 *)((long)&prVar18[1].hour + 4) = uStack1260;\u000a    *(undefined4 *)&prVar18[1].year = local_508;\u000a    *(undefined4 *)((long)&prVar18[1].year + 4) = uStack1284;\u000a    *(undefined4 *)&prVar18[1].month = local_500;\u000a    *(undefined4 *)((long)&prVar18[1].month + 4) = uStack1276;\u000a    prVar10 = prVar18 + 1;\u000a    uVar4 = 0xfffffffe;\u000a    goto LAB_00413be7;\u000a  }\u000aLAB_00413390:\u000a  uVar5 = (uint)"\u005cx05"[(long)iVar6];\u000a  if ("\u005cx05"[(long)iVar6] == 0) {\u000a    return 1;\u000a  }\u000aLAB_0041339f:\u000a  uVar7 = (ulong)""[(long)(int)uVar5];\u000a  lVar8 = 1 - uVar7;\u000a  lVar14 = prVar18[lVar8].year;\u000a  lVar13 = prVar18[lVar8].month;\u000a  lVar11 = prVar18[lVar8].day;\u000a  local_530 = prVar18[lVar8].hour;\u000a  lVar15 = prVar18[lVar8].minutes;\u000a  lVar16 = prVar18[lVar8].seconds;\u000a  lVar8 = prVar18[lVar8].ns;\u000a  switch(uVar5) {\u000a  case 4:\u000a    local_598 = *(undefined4 *)((long)&prVar18->year + 4);\u000a    uVar22 = *(undefined4 *)&prVar18->month;\u000a    local_578 = *(undefined4 *)((long)&prVar18->month + 4);\u000a    *(undefined4 *)&(pc->seconds).tv_sec = *(undefined4 *)&prVar18->year;\u000a    *(undefined4 *)((long)&(pc->seconds).tv_sec + 4) = local_598;\u000a    *(undefined4 *)&(pc->seconds).tv_nsec = uVar22;\u000a    *(undefined4 *)((long)&(pc->seconds).tv_nsec + 4) = local_578;\u000a    pc->timespec_seen = true;\u000a    break;\u000a  case 7:\u000a    pc->times_seen = pc->times_seen + 1;\u000a    pc->dates_seen = pc->dates_seen + 1;\u000a    break;\u000a  case 8:\u000a    pc->times_seen = pc->times_seen + 1;\u000a    break;\u000a  case 9:\u000a    pc->local_zones_seen = pc->local_zones_seen + 1;\u000a    break;\u000a  case 10:\u000a    pc->zones_seen = pc->zones_seen + 1;\u000a    break;\u000a  case 0xb:\u000a    pc->dates_seen = pc->dates_seen + 1;\u000a    break;\u000a  case 0xc:\u000a    pc->days_seen = pc->days_seen + 1;\u000a    break;\u000a  case 0x12:\u000a    set_hhmmss(pc,prVar18[-1].hour,0,0,0);\u000a    goto LAB_004137bc;\u000a  case 0x13:\u000a    set_hhmmss(pc,prVar18[-3].hour,prVar18[-1].hour,0,0);\u000a    goto LAB_004137bc;\u000a  case 0x14:\u000a    set_hhmmss(pc,prVar18[-5].hour,prVar18[-3].hour,prVar18[-1].day,prVar18[-1].hour);\u000aLAB_004137bc:\u000a    pc->meridian = *(int *)&prVar18->year;\u000a    break;\u000a  case 0x16:\u000a    set_hhmmss(pc,prVar18[-1].hour,0,0,0);\u000a    goto LAB_00413869;\u000a  case 0x17:\u000a    set_hhmmss(pc,prVar18[-3].hour,prVar18[-1].hour,0,0);\u000a    goto LAB_00413869;\u000a  case 0x18:\u000a    set_hhmmss(pc,prVar18[-5].hour,prVar18[-3].hour,prVar18[-1].day,prVar18[-1].hour);\u000aLAB_00413869:\u000a    pc->meridian = 2;\u000a    break;\u000a  case 0x1b:\u000a    pc->zones_seen = pc->zones_seen + 1;\u000a                    /* WARNING: Load size is inaccurate */\u000a    local_568 = time_zone_hhmm(pc,(textint)CONCAT420((int)((ulong)prVar18[-1].minutes >> 0x20),\u000a                                                     CONCAT416((int)prVar18[-1].minutes,\u000a                                                               *(undefined *)&prVar18[-1].day)),\u000a                               prVar18->year);\u000a    goto LAB_004139e2;\u000a  case 0x1c:\u000a    local_568 = prVar18->year;\u000a    pc->local_isdst = (int)local_568;\u000a    pc->dsts_seen = pc->dsts_seen + (ulong)(0 < local_568);\u000a    break;\u000a  case 0x1d:\u000a    pc->local_isdst = 1;\u000a    pc->dsts_seen = (ulong)(0 < prVar18[-1].day) + 1 + pc->dsts_seen;\u000a    break;\u000a  case 0x1e:\u000a    local_568 = prVar18->year;\u000a    goto LAB_004139e2;\u000a  case 0x1f:\u000a    pc->time_zone = 0x1a4;\u000a    break;\u000a  case 0x20:\u000a    pc->time_zone = prVar18[-1].day;\u000a    goto LAB_00413902;\u000a  case 0x21:\u000a    pc->time_zone = 0x1a4;\u000aLAB_00413902:\u000a    local_568 = prVar18->ns;\u000a    local_598 = *(undefined4 *)&prVar18->year;\u000a    uVar19 = *(undefined4 *)((long)&prVar18->year + 4);\u000a    uVar20 = *(undefined4 *)&prVar18->month;\u000a    uVar21 = *(undefined4 *)((long)&prVar18->month + 4);\u000a    uVar22 = *(undefined4 *)&prVar18->day;\u000a    uVar23 = *(undefined4 *)((long)&prVar18->day + 4);\u000a    uVar24 = *(undefined4 *)&prVar18->hour;\u000a    uVar25 = *(undefined4 *)((long)&prVar18->hour + 4);\u000a    local_578 = *(undefined4 *)&prVar18->minutes;\u000a    uVar26 = *(undefined4 *)((long)&prVar18->minutes + 4);\u000a    uVar27 = *(undefined4 *)&prVar18->seconds;\u000a    uVar28 = *(undefined4 *)((long)&prVar18->seconds + 4);\u000aLAB_00413931:\u000a    apply_relative_time(pc,(relative_time)\u000a                           CONCAT848(local_568,\u000a                                     CONCAT444(uVar28,CONCAT440(uVar27,CONCAT436(uVar26,CONCAT432(\u000a                                                  local_578,\u000a                                                  CONCAT428(uVar25,CONCAT424(uVar24,CONCAT420(uVar23\u000a                                                  ,CONCAT416(uVar22,CONCAT412(uVar21,CONCAT48(uVar20\u000a                                                  ,CONCAT44(uVar19,local_598)))))))))))));\u000a    break;\u000a  case 0x22:\u000a    lVar3 = prVar18[-2].day;\u000a                    /* WARNING: Load size is inaccurate */\u000a    local_568 = time_zone_hhmm(pc,(textint)CONCAT420((int)((ulong)prVar18[-1].minutes >> 0x20),\u000a                                                     CONCAT416((int)prVar18[-1].minutes,\u000a                                                               *(undefined *)&prVar18[-1].day)),\u000a                               prVar18->year);\u000a    local_568 = local_568 + lVar3;\u000a    goto LAB_004139e2;\u000a  case 0x23:\u000a    local_568 = prVar18->year;\u000a    goto LAB_004139de;\u000a  case 0x24:\u000a    local_568 = prVar18[-1].day;\u000aLAB_004139de:\u000a    local_568 = local_568 + 0x3c;\u000aLAB_004139e2:\u000a    pc->time_zone = local_568;\u000a    break;\u000a  case 0x25:\u000a    pc->day_ordinal = 0;\u000a    goto LAB_00413a16;\u000a  case 0x26:\u000a    pc->day_ordinal = 0;\u000a    pc->day_number = *(int *)&prVar18[-1].day;\u000a    break;\u000a  case 0x27:\u000a    local_568 = prVar18[-1].day;\u000a    goto LAB_00413a0d;\u000a  case 0x28:\u000a    local_568 = prVar18[-1].hour;\u000aLAB_00413a0d:\u000a    pc->day_ordinal = local_568;\u000aLAB_00413a16:\u000a    pc->day_number = *(int *)&prVar18->year;\u000a    break;\u000a  case 0x29:\u000a    goto switchD_004133ea_caseD_29;\u000a  case 0x2a:\u000a    if ((ulong)prVar18[-4].minutes < 4) {\u000a      local_568 = prVar18[-4].hour;\u000a      goto LAB_00413d1a;\u000a    }\u000a    (pc->year).digits = prVar18[-4].minutes;\u000a    local_598 = *(undefined4 *)((long)&prVar18[-4].day + 4);\u000a    uVar22 = *(undefined4 *)&prVar18[-4].hour;\u000a    local_578 = *(undefined4 *)((long)&prVar18[-4].hour + 4);\u000a    *(undefined4 *)ptVar1 = *(undefined4 *)&prVar18[-4].day;\u000a    *(undefined4 *)&(pc->year).field_0x4 = local_598;\u000a    *(undefined4 *)&(pc->year).value = uVar22;\u000a    *(undefined4 *)((long)&(pc->year).value + 4) = local_578;\u000a    goto switchD_004133ea_caseD_29;\u000a  case 0x2b:\u000a    pc->day = prVar18[-2].hour;\u000a    pc->month = prVar18[-1].day;\u000a    (pc->year).value = -prVar18->month;\u000a    (pc->year).digits = prVar18->day;\u000a    break;\u000a  case 0x2c:\u000a    pc->month = prVar18[-2].day;\u000a    pc->day = -prVar18[-1].hour;\u000a    (pc->year).value = -prVar18->month;\u000a    (pc->year).digits = prVar18->day;\u000a    break;\u000a  case 0x2d:\u000a    local_568 = prVar18[-1].day;\u000a    goto LAB_00413ab1;\u000a  case 0x2e:\u000a    local_568 = prVar18[-3].day;\u000aLAB_00413d1a:\u000a    pc->month = local_568;\u000a    pc->day = prVar18[-2].hour;\u000a    goto LAB_00413d2b;\u000a  case 0x2f:\u000a    pc->day = prVar18[-1].hour;\u000a    pc->month = prVar18->year;\u000a    break;\u000a  case 0x30:\u000a    pc->day = prVar18[-2].hour;\u000a    pc->month = prVar18[-1].day;\u000aLAB_00413d2b:\u000a    (pc->year).digits = prVar18->day;\u000a    local_598 = *(undefined4 *)((long)&prVar18->year + 4);\u000a    uVar22 = *(undefined4 *)&prVar18->month;\u000a    local_578 = *(undefined4 *)((long)&prVar18->month + 4);\u000a    *(undefined4 *)ptVar1 = *(undefined4 *)&prVar18->year;\u000a    *(undefined4 *)&(pc->year).field_0x4 = local_598;\u000a    *(undefined4 *)&(pc->year).value = uVar22;\u000a    *(undefined4 *)((long)&(pc->year).value + 4) = local_578;\u000a    break;\u000a  case 0x32:\u000a    (pc->year).digits = prVar18[-2].minutes;\u000a    local_598 = *(undefined4 *)((long)&prVar18[-2].day + 4);\u000a    uVar22 = *(undefined4 *)&prVar18[-2].hour;\u000a    local_578 = *(undefined4 *)((long)&prVar18[-2].hour + 4);\u000a    *(undefined4 *)ptVar1 = *(undefined4 *)&prVar18[-2].day;\u000a    *(undefined4 *)&(pc->year).field_0x4 = local_598;\u000a    *(undefined4 *)&(pc->year).value = uVar22;\u000a    *(undefined4 *)((long)&(pc->year).value + 4) = local_578;\u000a    pc->month = -prVar18[-1].hour;\u000a    pc->day = -prVar18->month;\u000a    break;\u000a  case 0x33:\u000a    apply_relative_time(pc,*(relative_time *)&prVar18[-1].day);\u000a    break;\u000a  case 0x34:\u000a  case 0x35:\u000a    local_568 = prVar18->ns;\u000a    local_598 = *(undefined4 *)&prVar18->year;\u000a    uVar19 = *(undefined4 *)((long)&prVar18->year + 4);\u000a    uVar20 = *(undefined4 *)&prVar18->month;\u000a    uVar21 = *(undefined4 *)((long)&prVar18->month + 4);\u000a    uVar22 = *(undefined4 *)&prVar18->day;\u000a    uVar23 = *(undefined4 *)((long)&prVar18->day + 4);\u000a    uVar24 = *(undefined4 *)&prVar18->hour;\u000a    uVar25 = *(undefined4 *)((long)&prVar18->hour + 4);\u000a    local_578 = *(undefined4 *)&prVar18->minutes;\u000a    uVar26 = *(undefined4 *)((long)&prVar18->minutes + 4);\u000a    uVar27 = *(undefined4 *)&prVar18->seconds;\u000a    uVar28 = *(undefined4 *)((long)&prVar18->seconds + 4);\u000a    goto LAB_00413931;\u000a  case 0x36:\u000a    lVar14 = prVar18[-1].day;\u000a    goto LAB_0041363f;\u000a  case 0x37:\u000a  case 0x4b:\u000a    lVar14 = prVar18[-1].hour;\u000aLAB_0041363f:\u000a    lVar13 = 0;\u000a    goto LAB_00413b30;\u000a  case 0x38:\u000a    lVar13 = 0;\u000a    lVar14 = 1;\u000a    goto LAB_00413b30;\u000a  case 0x39:\u000a    lVar13 = prVar18[-1].day;\u000a    goto LAB_00413b2e;\u000a  case 0x3a:\u000a  case 0x4c:\u000a    lVar13 = prVar18[-1].hour;\u000a    goto LAB_00413b2e;\u000a  case 0x3b:\u000a    lVar13 = 1;\u000aLAB_00413b2e:\u000a    lVar14 = 0;\u000aLAB_00413b30:\u000a    lVar11 = 0;\u000aLAB_00413b40:\u000a    local_530 = 0;\u000aLAB_00413b5f:\u000a    lVar15 = 0;\u000aLAB_00413b62:\u000a    lVar16 = 0;\u000aLAB_00413b65:\u000a    lVar8 = 0;\u000a    break;\u000a  case 0x3c:\u000a    lVar11 = prVar18->year * prVar18[-1].day;\u000a    goto LAB_00413b3c;\u000a  case 0x3d:\u000a  case 0x4d:\u000a    lVar11 = prVar18->year * prVar18[-1].hour;\u000a    goto LAB_00413b3c;\u000a  case 0x3e:\u000a  case 0x51:\u000a    lVar11 = prVar18->year;\u000aLAB_00413b3c:\u000a    lVar14 = 0;\u000a    lVar13 = 0;\u000a    goto LAB_00413b40;\u000a  case 0x3f:\u000a    local_530 = prVar18[-1].day;\u000a    goto LAB_00413b54;\u000a  case 0x40:\u000a  case 0x4e:\u000a    local_530 = prVar18[-1].hour;\u000a    goto LAB_00413b54;\u000a  case 0x41:\u000a    local_530 = 1;\u000aLAB_00413b54:\u000a    lVar14 = 0;\u000a    lVar13 = 0;\u000a    lVar11 = 0;\u000a    goto LAB_00413b5f;\u000a  case 0x42:\u000a    lVar15 = prVar18[-1].day;\u000a    goto LAB_00413c0b;\u000a  case 0x43:\u000a  case 0x4f:\u000a    lVar15 = prVar18[-1].hour;\u000a    goto LAB_00413c0b;\u000a  case 0x44:\u000a    lVar15 = 1;\u000aLAB_00413c0b:\u000a    lVar14 = 0;\u000a    lVar13 = 0;\u000a    lVar11 = 0;\u000a    local_530 = 0;\u000a    goto LAB_00413b62;\u000a  case 0x45:\u000a    lVar16 = prVar18[-1].day;\u000a    goto LAB_00413c29;\u000a  case 0x46:\u000a  case 0x50:\u000a    lVar16 = prVar18[-1].hour;\u000a    goto LAB_00413c29;\u000a  case 0x47:\u000a  case 0x48:\u000a    lVar16 = prVar18[-1].day;\u000a    lVar8 = prVar18[-1].hour;\u000a    lVar14 = 0;\u000a    lVar13 = 0;\u000a    lVar11 = 0;\u000a    local_530 = 0;\u000a    lVar15 = 0;\u000a    break;\u000a  case 0x49:\u000a    lVar16 = 1;\u000aLAB_00413c29:\u000a    lVar14 = 0;\u000a    lVar13 = 0;\u000a    lVar11 = 0;\u000a    local_530 = 0;\u000a    lVar15 = 0;\u000a    goto LAB_00413b65;\u000a  case 0x55:\u000a  case 0x57:\u000a    lVar14 = prVar18->month;\u000a    lVar13 = 0;\u000a    break;\u000a  case 0x58:\u000a                    /* WARNING: Load size is inaccurate */\u000a    digits_to_date_time(pc,(textint)CONCAT420((int)((ulong)prVar18->day >> 0x20),\u000a                                              CONCAT416((int)prVar18->day,*(undefined *)prVar18)));\u000a    break;\u000a  case 0x59:\u000a                    /* WARNING: Load size is inaccurate */\u000a    digits_to_date_time(pc,(textint)CONCAT420((int)((ulong)prVar18[-1].minutes >> 0x20),\u000a                                              CONCAT416((int)prVar18[-1].minutes,\u000a                                                        *(undefined *)&prVar18[-1].day)));\u000a    apply_relative_time(pc,*prVar18);\u000a    break;\u000a  case 0x5a:\u000a    lVar14 = -1;\u000a    break;\u000a  case 0x5b:\u000a    lVar14 = prVar18->month;\u000a  }\u000aswitchD_004133ea_caseD_5:\u000a  lVar17 = lVar17 - uVar7;\u000a  local_568 = uVar7 * -0x38;\u000a  prVar10 = (relative_time *)((long)prVar18 + local_568 + 0x38);\u000a  *(long *)((long)prVar18 + local_568 + 0x38) = lVar14;\u000a  *(long *)((long)prVar18 + local_568 + 0x40) = lVar13;\u000a  *(long *)((long)prVar18 + local_568 + 0x48) = lVar11;\u000a  *(long *)((long)prVar18 + local_568 + 0x50) = local_530;\u000a  *(long *)((long)prVar18 + local_568 + 0x58) = lVar15;\u000a  *(long_time_t *)((long)prVar18 + local_568 + 0x60) = lVar16;\u000a  *(long *)((long)prVar18 + local_568 + 0x68) = lVar8;\u000a  uVar12 = (int)(char)""[(ulong)""[(long)(int)uVar5] + 0x44] + (int)local_4c8[lVar17];\u000a  if ((uVar12 < 0x71) &&\u000a     ((int)\u000a           "\u005cx1b\u005cx05\u005cx06\u005ca\u005cb\u005ct\u005cn\u005cx04\u005cf\u005cx0ff\u005cx0f\u005cx10\u005cx13\u005cx0f\u005cx13\u005cx13\u005cx14\u005cx13\u005cx19p\u005cx19\u005cx13\u005cx1b\u005cx05\u005cx06\u005ca\u005cb\u005ct\u005cn\u005cx05\u005cx06\u005ca\u005cb\u005ct\u005cn\u005cx13\u005cx13\u005cx13k\u005cx13\u005cx14\u005cx19\u005cx19\u005cx19q\u005cx13\u005cx14\u005cx15\u005cx16\u005cx19\u005cx05\u005cx06\u005ca\u005cb\u005ct\u005cn\u005cv\u005cf\u005cr\u005cx0e\u005cx17\u005cx10\u005cx11\u005cx12\u005cx13\u005cx14\u005cx15\u005cx16`\u005cx18\u005cx05\u005cx06\u005ca\u005cb\u005ct\u005cn"\u000a           [(long)(int)uVar12] == (int)local_4c8[lVar17])) {\u000a    uVar7 = (ulong)\u000a                   "OCDEFGH:IdkJKenL12efqM;N=>?@AB=>?@ABee\u005c\u005coZ[jpXo\u005cx05\u005cx06\u005ca\u005cbX\u005cr\u005cx0e\u005cx0f\u005cx10\u005cx11\u005cx12\u005cx13\u005cx14\u005cx15\u005cx16\u005cx01\u005cx17\u005cx18\u005cx19\u005cx1a\u005cx1b\u005cx1c\u005cx1dO\u005cx1e345678\u005cf9=>?@AB<0P/\u005cx06S\u005cbQR\u005cx1aTUVW^_`Yiabc"\u000a                   [(long)(int)uVar12];\u000a  }\u000a  else {\u000a    uVar7 = (ulong)(uint)(int)yypgoto[(ulong)""[(long)(int)uVar5] + 4];\u000a  }\u000aLAB_00413be7:\u000a  local_4c8[lVar17 + 1] = (short)uVar7;\u000a  lVar17 = lVar17 + 1;\u000a  prVar18 = prVar10;\u000a  if (0x12 < lVar17) {\u000a    return 2;\u000a  }\u000a  goto LAB_00413d50;\u000aswitchD_004133ea_caseD_29:\u000a  local_568 = prVar18[-2].hour;\u000aLAB_00413ab1:\u000a  pc->month = local_568;\u000a  pc->day = prVar18->month;\u000a  goto switchD_004133ea_caseD_5;\u000a}\u000a\u000a
p1487
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x568\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [0xb0 + RSP],XMM0\nMOVAPS xmmword ptr [0xa0 + RSP],XMM0\nMOVAPS xmmword ptr [0x90 + RSP],XMM0\nMOV qword ptr [0xc0 + RSP],0x0\nLEA R15,[0x100 + RSP]\nMOV word ptr [0xd0 + RSP],0x0\nLEA RAX,[RDI + 0x60]\nMOV qword ptr [0x88 + RSP],RAX\nMOV qword ptr [RSP + 0x48],RDI\nLEA RAX,[RDI + 0x28]\nMOV qword ptr [0x80 + RSP],RAX\nMOV R8D,0xfffffffe\nXOR EAX,EAX\nXOR R12D,R12D\nJMP 0x00413d50\nMOVSXD RBX,EAX\nMOVSX EBP,byte ptr [0x4234a0 + RBX]\nCMP EBP,-0x5d\nJZ 0x00413390\nCMP R8D,-0x2\nJNZ 0x0041333a\nLEA RDI,[0x90 + RSP]\nMOV RSI,qword ptr [RSP + 0x48]\nCALL 0x00413d80\nMOV R8D,EAX\nTEST R8D,R8D\nJLE 0x00413359\nMOV EAX,0x2\nCMP R8D,0x115\nJA 0x0041335e\nMOVSXD RAX,R8D\nMOVZX EAX,byte ptr [0x423520 + RAX]\nJMP 0x0041335e\nXOR EAX,EAX\nXOR R8D,R8D\nADD EBP,EAX\nCMP EBP,0x70\nJA 0x00413390\nMOVSXD RCX,EBP\nMOVSX EDX,byte ptr [0x423640 + RCX]\nCMP EDX,EAX\nJNZ 0x00413390\nMOVZX EAX,byte ptr [0x4236c0 + RCX]\nOR RCX,0x4\nCMP RCX,0x6f\nJNZ 0x0041342f\nNEG EAX\nJMP 0x0041339f\nMOVZX EAX,byte ptr [0x423740 + RBX]\nTEST EAX,EAX\nJZ 0x00413d64\nMOVSXD R13,EAX\nMOVZX R14D,byte ptr [0x4237c0 + R13]\nMOV EAX,0x1\nSUB RAX,R14\nIMUL RAX,RAX,0x38\nMOV RSI,qword ptr [R15 + RAX*0x1]\nMOV RBP,qword ptr [R15 + RAX*0x1 + 0x8]\nMOV RBX,qword ptr [R15 + RAX*0x1 + 0x10]\nMOV RCX,qword ptr [R15 + RAX*0x1 + 0x18]\nMOV qword ptr [RSP + 0x68],RCX\nMOV R9,qword ptr [R15 + RAX*0x1 + 0x20]\nMOV R10,qword ptr [R15 + RAX*0x1 + 0x28]\nMOV R11,qword ptr [R15 + RAX*0x1 + 0x30]\nLEA EAX,[R13 + -0x4]\nCMP EAX,0x57\nJA 0x00413b68\nJMP qword ptr [0x4231a0 + RAX*0x8]\nMOV RAX,qword ptr [R15 + 0x30]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [R15]\nMOVUPS XMM1,xmmword ptr [R15 + 0x10]\nMOVUPS XMM2,xmmword ptr [R15 + 0x20]\nMOVUPS xmmword ptr [RSP + 0x20],XMM2\nMOVUPS xmmword ptr [RSP + 0x10],XMM1\nMOVUPS xmmword ptr [RSP],XMM0\nMOV qword ptr [RSP + 0x60],RSI\nMOV ESI,0x1\nMOV qword ptr [RSP + 0x58],RBP\nMOV RDI,qword ptr [RSP + 0x48]\nJMP 0x00413931\nMOV RCX,qword ptr [0xc0 + RSP]\nMOV qword ptr [R15 + 0x68],RCX\nMOVAPS XMM0,xmmword ptr [0x90 + RSP]\nMOVAPS XMM1,xmmword ptr [0xa0 + RSP]\nMOVAPS XMM2,xmmword ptr [0xb0 + RSP]\nMOVUPS xmmword ptr [R15 + 0x58],XMM2\nMOVUPS xmmword ptr [R15 + 0x48],XMM1\nMOVUPS xmmword ptr [R15 + 0x38],XMM0\nLEA RCX,[R15 + 0x38]\nMOV R8D,0xfffffffe\nJMP 0x00413be7\nMOV R10,qword ptr [R15 + -0x38]\nMOV R11,qword ptr [R15 + -0x30]\nXOR ESI,ESI\nXOR EBP,EBP\nXOR EBX,EBX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x68],RAX\nXOR R9D,R9D\nJMP 0x00413b68\nMOV RSI,qword ptr [R15 + -0x30]\nJMP 0x0041363f\nMOV RBP,qword ptr [R15 + -0x30]\nJMP 0x00413b2e\nMOV RBX,qword ptr [R15]\nIMUL RBX,qword ptr [R15 + -0x30]\nJMP 0x00413b3c\nMOV RBX,qword ptr [R15]\nJMP 0x00413b3c\nMOV RAX,qword ptr [R15 + -0x30]\nJMP 0x00413b54\nMOV R9,qword ptr [R15 + -0x30]\nJMP 0x00413c0b\nMOV R10,qword ptr [R15 + -0x30]\nJMP 0x00413c29\nMOV RSI,qword ptr [R15 + 0x8]\nXOR EBP,EBP\nJMP 0x00413b68\nMOV qword ptr [RSP + 0x60],RSI\nMOV RSI,qword ptr [R15 + -0x30]\nXOR EDX,EDX\nXOR ECX,ECX\nMOV dword ptr [RSP + 0x44],R8D\nXOR R8D,R8D\nMOV qword ptr [RSP + 0x58],RBP\nMOV RDI,qword ptr [RSP + 0x48]\nMOV qword ptr [RSP + 0x78],RBX\nMOV RBP,R9\nMOV qword ptr [RSP + 0x50],R10\nMOV RBX,R11\nCALL 0x004140f0\nMOV R11,RBX\nMOV R10,qword ptr [RSP + 0x50]\nMOV R9,RBP\nMOV RBX,qword ptr [RSP + 0x78]\nJMP 0x00413869\nMOV RDI,qword ptr [RSP + 0x48]\nINC qword ptr [0xd8 + RDI]\nMOV qword ptr [RSP + 0x60],RSI\nMOV RSI,qword ptr [R15]\nMOV RAX,qword ptr [R15 + -0x28]\nMOV qword ptr [RSP + 0x10],RAX\nMOVUPS XMM0,xmmword ptr [R15 + -0x38]\nMOVUPS xmmword ptr [RSP],XMM0\nMOV qword ptr [RSP + 0x58],RBP\nMOV dword ptr [RSP + 0x44],R8D\nMOV RBP,R9\nMOV qword ptr [RSP + 0x50],R10\nMOV qword ptr [RSP + 0x70],R11\nCALL 0x00414110\nMOV R11,qword ptr [RSP + 0x70]\nMOV R10,qword ptr [RSP + 0x50]\nMOV R9,RBP\nMOV RBP,qword ptr [RSP + 0x58]\nMOV RSI,qword ptr [RSP + 0x60]\nMOV R8D,dword ptr [RSP + 0x44]\nJMP 0x004139e2\nMOV RAX,qword ptr [R15 + -0x38]\nMOV qword ptr [RSP + 0x58],RBP\nMOV RDI,qword ptr [RSP + 0x48]\nMOV qword ptr [RDI + 0x18],RAX\nJMP 0x00413902\nMOV RAX,qword ptr [R15]\nJMP 0x004139de\nMOV RCX,qword ptr [RSP + 0x48]\nMOV qword ptr [RCX + 0x8],0x0\nJMP 0x00413a16\nMOV RAX,qword ptr [R15 + -0x38]\nJMP 0x00413a0d\nMOV RAX,qword ptr [R15 + -0x30]\nMOV RCX,qword ptr [RSP + 0x48]\nMOV qword ptr [RCX + 0x48],RAX\nMOV RAX,qword ptr [R15]\nMOV qword ptr [RCX + 0x40],RAX\nJMP 0x00413b68\nMOV qword ptr [RSP + 0x60],RSI\nMOV ESI,dword ptr [R15]\nMOV RAX,qword ptr [R15 + -0x8]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [R15 + -0x38]\nMOVUPS XMM1,xmmword ptr [R15 + -0x28]\nMOVUPS XMM2,xmmword ptr [R15 + -0x18]\nMOVUPS xmmword ptr [RSP + 0x20],XMM2\nMOVUPS xmmword ptr [RSP + 0x10],XMM1\nMOVUPS xmmword ptr [RSP],XMM0\nMOV qword ptr [RSP + 0x58],RBP\nMOV RDI,qword ptr [RSP + 0x48]\nMOV dword ptr [RSP + 0x44],R8D\nMOV RBP,R9\nMOV qword ptr [RSP + 0x50],R10\nMOV qword ptr [RSP + 0x70],R11\nCALL 0x004141a0\nMOV R11,qword ptr [RSP + 0x70]\nMOV R10,qword ptr [RSP + 0x50]\nMOV R9,RBP\nJMP 0x0041395f\nMOV RSI,qword ptr [R15 + -0x38]\nXOR EBP,EBP\nJMP 0x00413b30\nMOV RBP,qword ptr [R15 + -0x38]\nJMP 0x00413b2e\nMOV R9,qword ptr [R15 + -0x38]\nJMP 0x00413c0b\nMOVUPS XMM0,xmmword ptr [R15]\nMOV RAX,qword ptr [0x88 + RSP]\nMOVUPS xmmword ptr [RAX],XMM0\nMOV RAX,qword ptr [RSP + 0x48]\nMOV byte ptr [0xa8 + RAX],0x1\nJMP 0x00413b68\nMOV RAX,qword ptr [RSP + 0x48]\nINC qword ptr [0xd0 + RAX]\nINC qword ptr [0xb0 + RAX]\nJMP 0x00413b68\nMOV RAX,qword ptr [RSP + 0x48]\nINC qword ptr [0xd0 + RAX]\nJMP 0x00413b68\nMOV RAX,qword ptr [RSP + 0x48]\nINC qword ptr [0xc0 + RAX]\nJMP 0x00413b68\nMOV RAX,qword ptr [RSP + 0x48]\nINC qword ptr [0xd8 + RAX]\nJMP 0x00413b68\nMOV RAX,qword ptr [RSP + 0x48]\nINC qword ptr [0xb0 + RAX]\nJMP 0x00413b68\nMOV RAX,qword ptr [RSP + 0x48]\nINC qword ptr [0xb8 + RAX]\nJMP 0x00413b68\nMOV qword ptr [RSP + 0x60],RSI\nMOV RSI,qword ptr [R15 + -0x30]\nXOR EDX,EDX\nXOR ECX,ECX\nMOV dword ptr [RSP + 0x44],R8D\nXOR R8D,R8D\nMOV qword ptr [RSP + 0x58],RBP\nMOV RDI,qword ptr [RSP + 0x48]\nMOV qword ptr [RSP + 0x78],RBX\nMOV RBP,R9\nMOV qword ptr [RSP + 0x50],R10\nMOV RBX,R11\nCALL 0x004140f0\nMOV R11,RBX\nMOV R10,qword ptr [RSP + 0x50]\nMOV R9,RBP\nMOV RBX,qword ptr [RSP + 0x78]\nJMP 0x004137bc\nMOV qword ptr [RSP + 0x60],RSI\nMOV RSI,qword ptr [-0xa0 + R15]\nMOV RDX,qword ptr [R15 + -0x30]\nXOR ECX,ECX\nMOV dword ptr [RSP + 0x44],R8D\nXOR R8D,R8D\nMOV qword ptr [RSP + 0x58],RBP\nMOV RDI,qword ptr [RSP + 0x48]\nMOV RBP,R9\nMOV qword ptr [RSP + 0x50],R10\nMOV qword ptr [RSP + 0x70],R11\nCALL 0x004140f0\nMOV R11,qword ptr [RSP + 0x70]\nMOV R10,qword ptr [RSP + 0x50]\nMOV R9,RBP\nJMP 0x004137bc\nMOV qword ptr [RSP + 0x60],RSI\nMOV RSI,qword ptr [-0x110 + R15]\nMOV RDX,qword ptr [-0xa0 + R15]\nMOV RCX,qword ptr [R15 + -0x38]\nMOV dword ptr [RSP + 0x44],R8D\nMOV R8,qword ptr [R15 + -0x30]\nMOV qword ptr [RSP + 0x58],RBP\nMOV RDI,qword ptr [RSP + 0x48]\nMOV qword ptr [RSP + 0x50],R9\nMOV RBP,R10\nMOV qword ptr [RSP + 0x70],R11\nCALL 0x004140f0\nMOV R11,qword ptr [RSP + 0x70]\nMOV R10,RBP\nMOV R9,qword ptr [RSP + 0x50]\nMOV RBP,qword ptr [RSP + 0x58]\nMOV RSI,qword ptr [RSP + 0x60]\nMOV R8D,dword ptr [RSP + 0x44]\nMOV EAX,dword ptr [R15]\nMOV RCX,qword ptr [RSP + 0x48]\nMOV dword ptr [RCX + 0x20],EAX\nJMP 0x00413b68\nMOV qword ptr [RSP + 0x60],RSI\nMOV RSI,qword ptr [-0xa0 + R15]\nMOV RDX,qword ptr [R15 + -0x30]\nXOR ECX,ECX\nMOV dword ptr [RSP + 0x44],R8D\nXOR R8D,R8D\nMOV qword ptr [RSP + 0x58],RBP\nMOV RDI,qword ptr [RSP + 0x48]\nMOV RBP,R9\nMOV qword ptr [RSP + 0x50],R10\nMOV qword ptr [RSP + 0x70],R11\nCALL 0x004140f0\nMOV R11,qword ptr [RSP + 0x70]\nMOV R10,qword ptr [RSP + 0x50]\nMOV R9,RBP\nJMP 0x00413869\nMOV qword ptr [RSP + 0x60],RSI\nMOV RSI,qword ptr [-0x110 + R15]\nMOV RDX,qword ptr [-0xa0 + R15]\nMOV RCX,qword ptr [R15 + -0x38]\nMOV dword ptr [RSP + 0x44],R8D\nMOV R8,qword ptr [R15 + -0x30]\nMOV qword ptr [RSP + 0x58],RBP\nMOV RDI,qword ptr [RSP + 0x48]\nMOV qword ptr [RSP + 0x50],R9\nMOV RBP,R10\nMOV qword ptr [RSP + 0x70],R11\nCALL 0x004140f0\nMOV R11,qword ptr [RSP + 0x70]\nMOV R10,RBP\nMOV R9,qword ptr [RSP + 0x50]\nMOV RBP,qword ptr [RSP + 0x58]\nMOV RSI,qword ptr [RSP + 0x60]\nMOV R8D,dword ptr [RSP + 0x44]\nMOV RAX,qword ptr [RSP + 0x48]\nMOV dword ptr [RAX + 0x20],0x2\nJMP 0x00413b68\nMOV RAX,qword ptr [R15]\nMOV RDX,qword ptr [RSP + 0x48]\nMOV dword ptr [RDX + 0x14],EAX\nXOR ECX,ECX\nTEST RAX,RAX\nSETG CL\nADD qword ptr [0xc8 + RDX],RCX\nJMP 0x00413b68\nMOV RDX,qword ptr [RSP + 0x48]\nMOV dword ptr [RDX + 0x14],0x1\nXOR EAX,EAX\nCMP qword ptr [R15 + -0x38],0x0\nSETG AL\nMOV RCX,qword ptr [0xc8 + RDX]\nLEA RAX,[RAX + RCX*0x1 + 0x1]\nMOV qword ptr [0xc8 + RDX],RAX\nJMP 0x00413b68\nMOV RAX,qword ptr [R15]\nJMP 0x004139e2\nMOV RAX,qword ptr [RSP + 0x48]\nMOV qword ptr [RAX + 0x18],0x1a4\nJMP 0x00413b68\nMOV qword ptr [RSP + 0x58],RBP\nMOV RDI,qword ptr [RSP + 0x48]\nMOV qword ptr [RDI + 0x18],0x1a4\nMOV RAX,qword ptr [R15 + 0x30]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [R15]\nMOVUPS XMM1,xmmword ptr [R15 + 0x10]\nMOVUPS XMM2,xmmword ptr [R15 + 0x20]\nMOVUPS xmmword ptr [RSP + 0x20],XMM2\nMOVUPS xmmword ptr [RSP + 0x10],XMM1\nMOVUPS xmmword ptr [RSP],XMM0\nMOV qword ptr [RSP + 0x60],RSI\nMOV ESI,0x1\nMOV dword ptr [RSP + 0x44],R8D\nMOV qword ptr [RSP + 0x78],RBX\nMOV qword ptr [RSP + 0x50],R9\nMOV RBX,R10\nMOV qword ptr [RSP + 0x70],R11\nCALL 0x004141a0\nMOV R11,qword ptr [RSP + 0x70]\nMOV R10,RBX\nMOV R9,qword ptr [RSP + 0x50]\nMOV RBX,qword ptr [RSP + 0x78]\nMOV RBP,qword ptr [RSP + 0x58]\nMOV RSI,qword ptr [RSP + 0x60]\nMOV R8D,dword ptr [RSP + 0x44]\nJMP 0x00413b68\nMOV RAX,qword ptr [R15 + -0x70]\nMOV qword ptr [RSP + 0x78],RAX\nMOV qword ptr [RSP + 0x60],RSI\nMOV RSI,qword ptr [R15]\nMOV RAX,qword ptr [R15 + -0x28]\nMOV qword ptr [RSP + 0x10],RAX\nMOVUPS XMM0,xmmword ptr [R15 + -0x38]\nMOVUPS xmmword ptr [RSP],XMM0\nMOV qword ptr [RSP + 0x58],RBP\nMOV RDI,qword ptr [RSP + 0x48]\nMOV dword ptr [RSP + 0x44],R8D\nMOV RBP,R9\nMOV qword ptr [RSP + 0x50],R10\nMOV qword ptr [RSP + 0x70],R11\nCALL 0x00414110\nMOV R11,qword ptr [RSP + 0x70]\nMOV R10,qword ptr [RSP + 0x50]\nMOV R9,RBP\nMOV RBP,qword ptr [RSP + 0x58]\nMOV RSI,qword ptr [RSP + 0x60]\nMOV R8D,dword ptr [RSP + 0x44]\nADD RAX,qword ptr [RSP + 0x78]\nJMP 0x004139e2\nMOV RAX,qword ptr [R15 + -0x38]\nADD RAX,0x3c\nMOV RCX,qword ptr [RSP + 0x48]\nMOV qword ptr [RCX + 0x18],RAX\nJMP 0x00413b68\nMOV RCX,qword ptr [RSP + 0x48]\nMOV qword ptr [RCX + 0x8],0x0\nMOV EAX,dword ptr [R15 + -0x38]\nMOV dword ptr [RCX + 0x10],EAX\nJMP 0x00413b68\nMOV RAX,qword ptr [R15 + -0x30]\nMOV RCX,qword ptr [RSP + 0x48]\nMOV qword ptr [RCX + 0x8],RAX\nMOV EAX,dword ptr [R15]\nMOV dword ptr [RCX + 0x10],EAX\nJMP 0x00413b68\nCMP qword ptr [-0xd0 + R15],0x4\nJC 0x00413d13\nMOV RAX,qword ptr [-0xd0 + R15]\nMOV RCX,qword ptr [0x80 + RSP]\nMOV qword ptr [RCX + 0x10],RAX\nMOVUPS XMM0,xmmword ptr [-0xe0 + R15]\nMOVUPS xmmword ptr [RCX],XMM0\nMOV RAX,qword ptr [R15 + -0x68]\nJMP 0x00413ab1\nMOV RAX,qword ptr [R15 + -0x68]\nMOV RCX,qword ptr [RSP + 0x48]\nMOV qword ptr [RCX + 0x48],RAX\nMOV RAX,qword ptr [R15 + -0x38]\nMOV qword ptr [RCX + 0x40],RAX\nXOR EAX,EAX\nSUB RAX,qword ptr [R15 + 0x8]\nMOV qword ptr [RCX + 0x30],RAX\nMOV RAX,qword ptr [R15 + 0x10]\nMOV qword ptr [RCX + 0x38],RAX\nJMP 0x00413b68\nMOV RAX,qword ptr [R15 + -0x70]\nMOV RDX,qword ptr [RSP + 0x48]\nMOV qword ptr [RDX + 0x40],RAX\nXOR EAX,EAX\nXOR ECX,ECX\nSUB RCX,qword ptr [R15 + -0x30]\nMOV qword ptr [RDX + 0x48],RCX\nSUB RAX,qword ptr [R15 + 0x8]\nMOV qword ptr [RDX + 0x30],RAX\nMOV RAX,qword ptr [R15 + 0x10]\nMOV qword ptr [RDX + 0x38],RAX\nJMP 0x00413b68\nMOV RAX,qword ptr [R15 + -0x38]\nMOV RCX,qword ptr [RSP + 0x48]\nMOV qword ptr [RCX + 0x40],RAX\nMOV RAX,qword ptr [R15 + 0x8]\nMOV qword ptr [RCX + 0x48],RAX\nJMP 0x00413b68\nMOV RAX,qword ptr [-0xa8 + R15]\nJMP 0x00413d1a\nMOV RAX,qword ptr [R15 + -0x68]\nMOV RCX,qword ptr [RSP + 0x48]\nMOV qword ptr [RCX + 0x48],RAX\nMOV RAX,qword ptr [R15 + -0x38]\nMOV qword ptr [RCX + 0x40],RAX\nJMP 0x00413d2b\nMOV RAX,qword ptr [R15 + -0x60]\nMOV RCX,qword ptr [0x80 + RSP]\nMOV qword ptr [RCX + 0x10],RAX\nMOVUPS XMM0,xmmword ptr [R15 + -0x70]\nMOVUPS xmmword ptr [RCX],XMM0\nXOR EAX,EAX\nXOR ECX,ECX\nSUB RCX,qword ptr [R15 + -0x30]\nMOV RDX,qword ptr [RSP + 0x48]\nMOV qword ptr [RDX + 0x40],RCX\nSUB RAX,qword ptr [R15 + 0x8]\nMOV qword ptr [RDX + 0x48],RAX\nJMP 0x00413b68\nXOR EBP,EBP\nMOV ESI,0x1\nJMP 0x00413b30\nMOV EBP,0x1\nXOR ESI,ESI\nXOR EBX,EBX\nJMP 0x00413b40\nMOV RBX,qword ptr [R15]\nIMUL RBX,qword ptr [R15 + -0x38]\nXOR ESI,ESI\nXOR EBP,EBP\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x68],RAX\nJMP 0x00413b5f\nMOV RAX,qword ptr [R15 + -0x38]\nJMP 0x00413b54\nMOV EAX,0x1\nMOV qword ptr [RSP + 0x68],RAX\nXOR ESI,ESI\nXOR EBP,EBP\nXOR EBX,EBX\nXOR R9D,R9D\nXOR R10D,R10D\nXOR R11D,R11D\nSUB R12,R14\nNEG R14\nIMUL RAX,R14,0x38\nLEA RCX,[R15 + RAX*0x1 + 0x38]\nMOV qword ptr [R15 + RAX*0x1 + 0x38],RSI\nMOV qword ptr [R15 + RAX*0x1 + 0x40],RBP\nMOV qword ptr [R15 + RAX*0x1 + 0x48],RBX\nMOV RDX,qword ptr [RSP + 0x68]\nMOV qword ptr [R15 + RAX*0x1 + 0x50],RDX\nMOV qword ptr [R15 + RAX*0x1 + 0x58],R9\nMOV qword ptr [R15 + RAX*0x1 + 0x60],R10\nMOV qword ptr [R15 + RAX*0x1 + 0x68],R11\nMOVZX EAX,byte ptr [0x423820 + R13]\nMOVSX ESI,byte ptr [0x423864 + RAX]\nMOVSX EDX,word ptr [0xd0 + RSP + R12*0x2]\nADD ESI,EDX\nCMP ESI,0x70\nJA 0x00413be0\nMOVSXD RSI,ESI\nMOVSX EDI,byte ptr [0x423640 + RSI]\nCMP EDI,EDX\nJNZ 0x00413be0\nMOVZX EAX,byte ptr [0x4236c0 + RSI]\nJMP 0x00413be7\nMOVSX EAX,byte ptr [0x423884 + RAX]\nMOV word ptr [0xd2 + RSP + R12*0x2],AX\nINC R12\nCMP R12,0x12\nMOV R15,RCX\nJLE 0x00413d50\nJMP 0x00413d5d\nMOV R9D,0x1\nXOR ESI,ESI\nXOR EBP,EBP\nXOR EBX,EBX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x68],RAX\nJMP 0x00413b62\nMOV R10,qword ptr [R15 + -0x38]\nJMP 0x00413c29\nMOV R10D,0x1\nXOR ESI,ESI\nXOR EBP,EBP\nXOR EBX,EBX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x68],RAX\nXOR R9D,R9D\nJMP 0x00413b65\nMOV RAX,qword ptr [R15 + 0x10]\nMOV qword ptr [RSP + 0x10],RAX\nMOVUPS XMM0,xmmword ptr [R15]\nMOVUPS xmmword ptr [RSP],XMM0\nMOV qword ptr [RSP + 0x58],RBP\nMOV RDI,qword ptr [RSP + 0x48]\nMOV dword ptr [RSP + 0x44],R8D\nMOV qword ptr [RSP + 0x60],RSI\nMOV qword ptr [RSP + 0x78],RBX\nMOV qword ptr [RSP + 0x50],R9\nMOV RBX,R10\nMOV qword ptr [RSP + 0x70],R11\nCALL 0x00414220\nJMP 0x0041394d\nMOV RAX,qword ptr [R15 + -0x28]\nMOV qword ptr [RSP + 0x10],RAX\nMOVUPS XMM0,xmmword ptr [R15 + -0x38]\nMOVUPS xmmword ptr [RSP],XMM0\nMOV qword ptr [RSP + 0x58],RBP\nMOV RDI,qword ptr [RSP + 0x48]\nMOV dword ptr [RSP + 0x44],R8D\nMOV qword ptr [RSP + 0x60],RSI\nMOV qword ptr [RSP + 0x78],RBX\nMOV RBP,R9\nMOV qword ptr [RSP + 0x50],R10\nMOV RBX,R11\nCALL 0x00414220\nMOV RAX,qword ptr [R15 + 0x30]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [R15]\nMOVUPS XMM1,xmmword ptr [R15 + 0x10]\nMOVUPS XMM2,xmmword ptr [R15 + 0x20]\nMOVUPS xmmword ptr [RSP + 0x20],XMM2\nMOVUPS xmmword ptr [RSP + 0x10],XMM1\nMOVUPS xmmword ptr [RSP],XMM0\nMOV ESI,0x1\nMOV RDI,qword ptr [RSP + 0x48]\nCALL 0x004141a0\nMOV R11,RBX\nMOV R10,qword ptr [RSP + 0x50]\nMOV R9,RBP\nJMP 0x0041395a\nMOV RSI,-0x1\nJMP 0x00413b68\nMOV RSI,qword ptr [R15 + 0x8]\nJMP 0x00413b68\nMOV RAX,qword ptr [-0xd8 + R15]\nMOV RCX,qword ptr [RSP + 0x48]\nMOV qword ptr [RCX + 0x40],RAX\nMOV RAX,qword ptr [R15 + -0x68]\nMOV qword ptr [RCX + 0x48],RAX\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [0x80 + RSP]\nMOV qword ptr [RCX + 0x10],RAX\nMOVUPS XMM0,xmmword ptr [R15]\nMOVUPS xmmword ptr [RCX],XMM0\nJMP 0x00413b68\nCMP EAX,0xc\nJNZ 0x00413310\nXOR EAX,EAX\nJMP 0x00413d69\nMOV EAX,0x2\nJMP 0x00413d69\nMOV EAX,0x1\nADD RSP,0x568\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1488
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 68 05 00 00\n0f 57 c0\n0f 29 84 24 b0 00 00 00\n0f 29 84 24 a0 00 00 00\n0f 29 84 24 90 00 00 00\n48 c7 84 24 c0 00 00 00 00 00 00 00\n4c 8d bc 24 00 01 00 00\n66 c7 84 24 d0 00 00 00 00 00\n48 8d 47 60\n48 89 84 24 88 00 00 00\n48 89 7c 24 48\n48 8d 47 28\n48 89 84 24 80 00 00 00\n41 b8 fe ff ff ff\n31 c0\n45 31 e4\ne9 49 0a 00 00\n48 63 d8\n0f be ab a0 34 42 00\n83 fd a3\n74 71\n41 83 f8 fe\n75 15\n48 8d bc 24 90 00 00 00\n48 8b 74 24 48\ne8 49 0a 00 00\n41 89 c0\n45 85 c0\n7e 1a\nb8 02 00 00 00\n41 81 f8 15 01 00 00\n77 11\n49 63 c0\n0f b6 80 20 35 42 00\neb 05\n31 c0\n45 31 c0\n01 c5\n83 fd 70\n77 2b\n48 63 cd\n0f be 91 40 36 42 00\n39 c2\n75 1d\n0f b6 81 c0 36 42 00\n48 83 c9 04\n48 83 f9 6f\n0f 85 a7 00 00 00\nf7 d8\neb 13\n0f b6 83 40 37 42 00\n85 c0\n0f 84 c5 09 00 00\n4c 63 e8\n45 0f b6 b5 c0 37 42 00\nb8 01 00 00 00\n4c 29 f0\n48 6b c0 38\n49 8b 34 07\n49 8b 6c 07 08\n49 8b 5c 07 10\n49 8b 4c 07 18\n48 89 4c 24 68\n4d 8b 4c 07 20\n4d 8b 54 07 28\n4d 8b 5c 07 30\n41 8d 45 fc\n83 f8 57\n0f 87 7e 07 00 00\nff 24 c5 a0 31 42 00\n49 8b 47 30\n48 89 44 24 30\n41 0f 10 07\n41 0f 10 4f 10\n41 0f 10 57 20\n0f 11 54 24 20\n0f 11 4c 24 10\n0f 11 04 24\n48 89 74 24 60\nbe 01 00 00 00\n48 89 6c 24 58\n48 8b 7c 24 48\ne9 02 05 00 00\n48 8b 8c 24 c0 00 00 00\n49 89 4f 68\n0f 28 84 24 90 00 00 00\n0f 28 8c 24 a0 00 00 00\n0f 28 94 24 b0 00 00 00\n41 0f 11 57 58\n41 0f 11 4f 48\n41 0f 11 47 38\n49 8d 4f 38\n41 b8 fe ff ff ff\ne9 76 07 00 00\n4d 8b 57 c8\n4d 8b 5f d0\n31 f6\n31 ed\n31 db\n31 c0\n48 89 44 24 68\n45 31 c9\ne9 da 06 00 00\n49 8b 77 d0\ne9 a8 01 00 00\n49 8b 6f d0\ne9 8e 06 00 00\n49 8b 1f\n49 0f af 5f d0\ne9 8f 06 00 00\n49 8b 1f\ne9 87 06 00 00\n49 8b 47 d0\ne9 96 06 00 00\n4d 8b 4f d0\ne9 44 07 00 00\n4d 8b 57 d0\ne9 59 07 00 00\n49 8b 77 08\n31 ed\ne9 8d 06 00 00\n48 89 74 24 60\n49 8b 77 d0\n31 d2\n31 c9\n44 89 44 24 44\n45 31 c0\n48 89 6c 24 58\n48 8b 7c 24 48\n48 89 5c 24 78\n4c 89 cd\n4c 89 54 24 50\n4c 89 db\ne8 e1 0b 00 00\n49 89 db\n4c 8b 54 24 50\n49 89 e9\n48 8b 5c 24 78\ne9 45 03 00 00\n48 8b 7c 24 48\n48 ff 87 d8 00 00 00\n48 89 74 24 60\n49 8b 37\n49 8b 47 d8\n48 89 44 24 10\n41 0f 10 47 c8\n0f 11 04 24\n48 89 6c 24 58\n44 89 44 24 44\n4c 89 cd\n4c 89 54 24 50\n4c 89 5c 24 70\ne8 aa 0b 00 00\n4c 8b 5c 24 70\n4c 8b 54 24 50\n49 89 e9\n48 8b 6c 24 58\n48 8b 74 24 60\n44 8b 44 24 44\ne9 5b 04 00 00\n49 8b 47 c8\n48 89 6c 24 58\n48 8b 7c 24 48\n48 89 47 18\ne9 64 03 00 00\n49 8b 07\ne9 38 04 00 00\n48 8b 4c 24 48\n48 c7 41 08 00 00 00 00\ne9 5e 04 00 00\n49 8b 47 c8\ne9 4c 04 00 00\n49 8b 47 d0\n48 8b 4c 24 48\n48 89 41 48\n49 8b 07\n48 89 41 40\ne9 8e 05 00 00\n48 89 74 24 60\n41 8b 37\n49 8b 47 f8\n48 89 44 24 30\n41 0f 10 47 c8\n41 0f 10 4f d8\n41 0f 10 57 e8\n0f 11 54 24 20\n0f 11 4c 24 10\n0f 11 04 24\n48 89 6c 24 58\n48 8b 7c 24 48\n44 89 44 24 44\n4c 89 cd\n4c 89 54 24 50\n4c 89 5c 24 70\ne8 77 0b 00 00\n4c 8b 5c 24 70\n4c 8b 54 24 50\n49 89 e9\ne9 24 03 00 00\n49 8b 77 c8\n31 ed\ne9 ea 04 00 00\n49 8b 6f c8\ne9 df 04 00 00\n4d 8b 4f c8\ne9 b3 05 00 00\n41 0f 10 07\n48 8b 84 24 88 00 00 00\n0f 11 00\n48 8b 44 24 48\nc6 80 a8 00 00 00 01\ne9 f0 04 00 00\n48 8b 44 24 48\n48 ff 80 d0 00 00 00\n48 ff 80 b0 00 00 00\ne9 d8 04 00 00\n48 8b 44 24 48\n48 ff 80 d0 00 00 00\ne9 c7 04 00 00\n48 8b 44 24 48\n48 ff 80 c0 00 00 00\ne9 b6 04 00 00\n48 8b 44 24 48\n48 ff 80 d8 00 00 00\ne9 a5 04 00 00\n48 8b 44 24 48\n48 ff 80 b0 00 00 00\ne9 94 04 00 00\n48 8b 44 24 48\n48 ff 80 b8 00 00 00\ne9 83 04 00 00\n48 89 74 24 60\n49 8b 77 d0\n31 d2\n31 c9\n44 89 44 24 44\n45 31 c0\n48 89 6c 24 58\n48 8b 7c 24 48\n48 89 5c 24 78\n4c 89 cd\n4c 89 54 24 50\n4c 89 db\ne8 d7 09 00 00\n49 89 db\n4c 8b 54 24 50\n49 89 e9\n48 8b 5c 24 78\ne9 8e 00 00 00\n48 89 74 24 60\n49 8b b7 60 ff ff ff\n49 8b 57 d0\n31 c9\n44 89 44 24 44\n45 31 c0\n48 89 6c 24 58\n48 8b 7c 24 48\n4c 89 cd\n4c 89 54 24 50\n4c 89 5c 24 70\ne8 8c 09 00 00\n4c 8b 5c 24 70\n4c 8b 54 24 50\n49 89 e9\neb 49\n48 89 74 24 60\n49 8b b7 f0 fe ff ff\n49 8b 97 60 ff ff ff\n49 8b 4f c8\n44 89 44 24 44\n4d 8b 47 d0\n48 89 6c 24 58\n48 8b 7c 24 48\n4c 89 4c 24 50\n4c 89 d5\n4c 89 5c 24 70\ne8 41 09 00 00\n4c 8b 5c 24 70\n49 89 ea\n4c 8b 4c 24 50\n48 8b 6c 24 58\n48 8b 74 24 60\n44 8b 44 24 44\n41 8b 07\n48 8b 4c 24 48\n89 41 20\ne9 8d 03 00 00\n48 89 74 24 60\n49 8b b7 60 ff ff ff\n49 8b 57 d0\n31 c9\n44 89 44 24 44\n45 31 c0\n48 89 6c 24 58\n48 8b 7c 24 48\n4c 89 cd\n4c 89 54 24 50\n4c 89 5c 24 70\ne8 df 08 00 00\n4c 8b 5c 24 70\n4c 8b 54 24 50\n49 89 e9\neb 49\n48 89 74 24 60\n49 8b b7 f0 fe ff ff\n49 8b 97 60 ff ff ff\n49 8b 4f c8\n44 89 44 24 44\n4d 8b 47 d0\n48 89 6c 24 58\n48 8b 7c 24 48\n4c 89 4c 24 50\n4c 89 d5\n4c 89 5c 24 70\ne8 94 08 00 00\n4c 8b 5c 24 70\n49 89 ea\n4c 8b 4c 24 50\n48 8b 6c 24 58\n48 8b 74 24 60\n44 8b 44 24 44\n48 8b 44 24 48\nc7 40 20 02 00 00 00\ne9 df 02 00 00\n49 8b 07\n48 8b 54 24 48\n89 42 14\n31 c9\n48 85 c0\n0f 9f c1\n48 01 8a c8 00 00 00\ne9 c0 02 00 00\n48 8b 54 24 48\nc7 42 14 01 00 00 00\n31 c0\n49 83 7f c8 00\n0f 9f c0\n48 8b 8a c8 00 00 00\n48 8d 44 08 01\n48 89 82 c8 00 00 00\ne9 92 02 00 00\n49 8b 07\ne9 04 01 00 00\n48 8b 44 24 48\n48 c7 40 18 a4 01 00 00\ne9 78 02 00 00\n48 89 6c 24 58\n48 8b 7c 24 48\n48 c7 47 18 a4 01 00 00\n49 8b 47 30\n48 89 44 24 30\n41 0f 10 07\n41 0f 10 4f 10\n41 0f 10 57 20\n0f 11 54 24 20\n0f 11 4c 24 10\n0f 11 04 24\n48 89 74 24 60\nbe 01 00 00 00\n44 89 44 24 44\n48 89 5c 24 78\n4c 89 4c 24 50\n4c 89 d3\n4c 89 5c 24 70\ne8 53 08 00 00\n4c 8b 5c 24 70\n49 89 da\n4c 8b 4c 24 50\n48 8b 5c 24 78\n48 8b 6c 24 58\n48 8b 74 24 60\n44 8b 44 24 44\ne9 f5 01 00 00\n49 8b 47 90\n48 89 44 24 78\n48 89 74 24 60\n49 8b 37\n49 8b 47 d8\n48 89 44 24 10\n41 0f 10 47 c8\n0f 11 04 24\n48 89 6c 24 58\n48 8b 7c 24 48\n44 89 44 24 44\n4c 89 cd\n4c 89 54 24 50\n4c 89 5c 24 70\ne8 59 07 00 00\n4c 8b 5c 24 70\n4c 8b 54 24 50\n49 89 e9\n48 8b 6c 24 58\n48 8b 74 24 60\n44 8b 44 24 44\n48 03 44 24 78\neb 08\n49 8b 47 c8\n48 83 c0 3c\n48 8b 4c 24 48\n48 89 41 18\ne9 78 01 00 00\n48 8b 4c 24 48\n48 c7 41 08 00 00 00 00\n41 8b 47 c8\n89 41 10\ne9 5f 01 00 00\n49 8b 47 d0\n48 8b 4c 24 48\n48 89 41 08\n41 8b 07\n89 41 10\ne9 47 01 00 00\n49 83 bf 30 ff ff ff 04\n0f 82 e4 02 00 00\n49 8b 87 30 ff ff ff\n48 8b 8c 24 80 00 00 00\n48 89 41 10\n41 0f 10 87 20 ff ff ff\n0f 11 01\n49 8b 47 98\neb 5e\n49 8b 47 98\n48 8b 4c 24 48\n48 89 41 48\n49 8b 47 c8\n48 89 41 40\n31 c0\n49 2b 47 08\n48 89 41 30\n49 8b 47 10\n48 89 41 38\ne9 e9 00 00 00\n49 8b 47 90\n48 8b 54 24 48\n48 89 42 40\n31 c0\n31 c9\n49 2b 4f d0\n48 89 4a 48\n49 2b 47 08\n48 89 42 30\n49 8b 47 10\n48 89 42 38\ne9 bb 00 00 00\n49 8b 47 c8\n48 8b 4c 24 48\n48 89 41 40\n49 8b 47 08\n48 89 41 48\ne9 a1 00 00 00\n49 8b 87 58 ff ff ff\ne9 47 02 00 00\n49 8b 47 98\n48 8b 4c 24 48\n48 89 41 48\n49 8b 47 c8\n48 89 41 40\ne9 3e 02 00 00\n49 8b 47 a0\n48 8b 8c 24 80 00 00 00\n48 89 41 10\n41 0f 10 47 90\n0f 11 01\n31 c0\n31 c9\n49 2b 4f d0\n48 8b 54 24 48\n48 89 4a 40\n49 2b 47 08\n48 89 42 48\neb 48\n31 ed\nbe 01 00 00 00\neb 07\nbd 01 00 00 00\n31 f6\n31 db\neb 0c\n49 8b 1f\n49 0f af 5f c8\n31 f6\n31 ed\n31 c0\n48 89 44 24 68\neb 16\n49 8b 47 c8\neb 05\nb8 01 00 00 00\n48 89 44 24 68\n31 f6\n31 ed\n31 db\n45 31 c9\n45 31 d2\n45 31 db\n4d 29 f4\n49 f7 de\n49 6b c6 38\n49 8d 4c 07 38\n49 89 74 07 38\n49 89 6c 07 40\n49 89 5c 07 48\n48 8b 54 24 68\n49 89 54 07 50\n4d 89 4c 07 58\n4d 89 54 07 60\n4d 89 5c 07 68\n41 0f b6 85 20 38 42 00\n0f be b0 64 38 42 00\n42 0f bf 94 64 d0 00 00 00\n01 d6\n83 fe 70\n77 22\n48 63 f6\n0f be be 40 36 42 00\n39 d7\n75 14\n0f b6 86 c0 36 42 00\neb 12\n0f be 80 84 38 42 00\n66 42 89 84 64 d2 00 00 00\n49 ff c4\n49 83 fc 12\n49 89 cf\n0f 8e 50 01 00 00\ne9 58 01 00 00\n41 b9 01 00 00 00\n31 f6\n31 ed\n31 db\n31 c0\n48 89 44 24 68\ne9 45 ff ff ff\n4d 8b 57 c8\neb 06\n41 ba 01 00 00 00\n31 f6\n31 ed\n31 db\n31 c0\n48 89 44 24 68\n45 31 c9\ne9 27 ff ff ff\n49 8b 47 10\n48 89 44 24 10\n41 0f 10 07\n0f 11 04 24\n48 89 6c 24 58\n48 8b 7c 24 48\n44 89 44 24 44\n48 89 74 24 60\n48 89 5c 24 78\n4c 89 4c 24 50\n4c 89 d3\n4c 89 5c 24 70\ne8 a6 05 00 00\ne9 ce fc ff ff\n49 8b 47 d8\n48 89 44 24 10\n41 0f 10 47 c8\n0f 11 04 24\n48 89 6c 24 58\n48 8b 7c 24 48\n44 89 44 24 44\n48 89 74 24 60\n48 89 5c 24 78\n4c 89 cd\n4c 89 54 24 50\n4c 89 db\ne8 66 05 00 00\n49 8b 47 30\n48 89 44 24 30\n41 0f 10 07\n41 0f 10 4f 10\n41 0f 10 57 20\n0f 11 54 24 20\n0f 11 4c 24 10\n0f 11 04 24\nbe 01 00 00 00\n48 8b 7c 24 48\ne8 b2 04 00 00\n49 89 db\n4c 8b 54 24 50\n49 89 e9\ne9 5c fc ff ff\n48 c7 c6 ff ff ff ff\ne9 5e fe ff ff\n49 8b 77 08\ne9 55 fe ff ff\n49 8b 87 28 ff ff ff\n48 8b 4c 24 48\n48 89 41 40\n49 8b 47 98\n48 89 41 48\n49 8b 47 10\n48 8b 8c 24 80 00 00 00\n48 89 41 10\n41 0f 10 07\n0f 11 01\ne9 21 fe ff ff\n83 f8 0c\n0f 85 b7 f5 ff ff\n31 c0\neb 0c\nb8 02 00 00 00\neb 05\nb8 01 00 00 00\n48 81 c4 68 05 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1489
S'.text:0000000000413290\n.text:0000000000413291\n.text:0000000000413293\n.text:0000000000413295\n.text:0000000000413297\n.text:0000000000413299\n.text:000000000041329a\n.text:00000000004132a1\n.text:00000000004132a4\n.text:00000000004132ac\n.text:00000000004132b4\n.text:00000000004132bc\n.text:00000000004132c8\n.text:00000000004132d0\n.text:00000000004132da\n.text:00000000004132de\n.text:00000000004132e6\n.text:00000000004132eb\n.text:00000000004132ef\n.text:00000000004132f7\n.text:00000000004132fd\n.text:00000000004132ff\n.text:0000000000413302\n.text:0000000000413310\n.text:0000000000413313\n.text:000000000041331a\n.text:000000000041331d\n.text:000000000041331f\n.text:0000000000413323\n.text:0000000000413325\n.text:000000000041332d\n.text:0000000000413332\n.text:0000000000413337\n.text:000000000041333a\n.text:000000000041333d\n.text:000000000041333f\n.text:0000000000413344\n.text:000000000041334b\n.text:000000000041334d\n.text:0000000000413350\n.text:0000000000413357\n.text:0000000000413359\n.text:000000000041335b\n.text:000000000041335e\n.text:0000000000413360\n.text:0000000000413363\n.text:0000000000413365\n.text:0000000000413368\n.text:000000000041336f\n.text:0000000000413371\n.text:0000000000413373\n.text:000000000041337a\n.text:000000000041337e\n.text:0000000000413382\n.text:0000000000413388\n.text:000000000041338a\n.text:0000000000413390\n.text:0000000000413397\n.text:0000000000413399\n.text:000000000041339f\n.text:00000000004133a2\n.text:00000000004133aa\n.text:00000000004133af\n.text:00000000004133b2\n.text:00000000004133b6\n.text:00000000004133ba\n.text:00000000004133bf\n.text:00000000004133c4\n.text:00000000004133c9\n.text:00000000004133ce\n.text:00000000004133d3\n.text:00000000004133d8\n.text:00000000004133dd\n.text:00000000004133e1\n.text:00000000004133e4\n.text:00000000004133ea\n.text:00000000004133f1\n.text:00000000004133f5\n.text:00000000004133fa\n.text:00000000004133fe\n.text:0000000000413403\n.text:0000000000413408\n.text:000000000041340d\n.text:0000000000413412\n.text:0000000000413416\n.text:000000000041341b\n.text:0000000000413420\n.text:0000000000413425\n.text:000000000041342a\n.text:000000000041342f\n.text:0000000000413437\n.text:000000000041343b\n.text:0000000000413443\n.text:000000000041344b\n.text:0000000000413453\n.text:0000000000413458\n.text:000000000041345d\n.text:0000000000413462\n.text:0000000000413466\n.text:000000000041346c\n.text:0000000000413471\n.text:0000000000413475\n.text:0000000000413479\n.text:000000000041347b\n.text:000000000041347d\n.text:000000000041347f\n.text:0000000000413481\n.text:0000000000413486\n.text:0000000000413489\n.text:000000000041348e\n.text:0000000000413492\n.text:0000000000413497\n.text:000000000041349b\n.text:00000000004134a0\n.text:00000000004134a3\n.text:00000000004134a8\n.text:00000000004134ad\n.text:00000000004134b0\n.text:00000000004134b5\n.text:00000000004134b9\n.text:00000000004134be\n.text:00000000004134c2\n.text:00000000004134c7\n.text:00000000004134cb\n.text:00000000004134d0\n.text:00000000004134d4\n.text:00000000004134d6\n.text:00000000004134db\n.text:00000000004134e0\n.text:00000000004134e4\n.text:00000000004134e6\n.text:00000000004134e8\n.text:00000000004134ed\n.text:00000000004134f0\n.text:00000000004134f5\n.text:00000000004134fa\n.text:00000000004134ff\n.text:0000000000413502\n.text:0000000000413507\n.text:000000000041350a\n.text:000000000041350f\n.text:0000000000413512\n.text:0000000000413517\n.text:000000000041351a\n.text:000000000041351f\n.text:0000000000413524\n.text:0000000000413529\n.text:0000000000413530\n.text:0000000000413535\n.text:0000000000413538\n.text:000000000041353c\n.text:0000000000413541\n.text:0000000000413546\n.text:000000000041354a\n.text:000000000041354f\n.text:0000000000413554\n.text:0000000000413557\n.text:000000000041355c\n.text:0000000000413561\n.text:0000000000413566\n.text:000000000041356b\n.text:0000000000413570\n.text:0000000000413573\n.text:0000000000413578\n.text:000000000041357d\n.text:0000000000413582\n.text:0000000000413587\n.text:000000000041358b\n.text:0000000000413590\n.text:0000000000413595\n.text:0000000000413599\n.text:000000000041359e\n.text:00000000004135a1\n.text:00000000004135a6\n.text:00000000004135ab\n.text:00000000004135b3\n.text:00000000004135b8\n.text:00000000004135bc\n.text:00000000004135c1\n.text:00000000004135c5\n.text:00000000004135ca\n.text:00000000004135ce\n.text:00000000004135d1\n.text:00000000004135d5\n.text:00000000004135da\n.text:00000000004135df\n.text:00000000004135e2\n.text:00000000004135e6\n.text:00000000004135eb\n.text:00000000004135f0\n.text:00000000004135f5\n.text:00000000004135fa\n.text:00000000004135ff\n.text:0000000000413604\n.text:0000000000413608\n.text:000000000041360d\n.text:0000000000413612\n.text:0000000000413617\n.text:000000000041361a\n.text:000000000041361f\n.text:0000000000413624\n.text:0000000000413629\n.text:000000000041362e\n.text:0000000000413633\n.text:0000000000413636\n.text:000000000041363b\n.text:000000000041363f\n.text:0000000000413641\n.text:0000000000413646\n.text:000000000041364a\n.text:000000000041364f\n.text:0000000000413653\n.text:0000000000413658\n.text:000000000041365c\n.text:0000000000413664\n.text:0000000000413667\n.text:000000000041366c\n.text:0000000000413673\n.text:0000000000413678\n.text:000000000041367d\n.text:0000000000413684\n.text:000000000041368b\n.text:0000000000413690\n.text:0000000000413695\n.text:000000000041369c\n.text:00000000004136a1\n.text:00000000004136a6\n.text:00000000004136ad\n.text:00000000004136b2\n.text:00000000004136b7\n.text:00000000004136be\n.text:00000000004136c3\n.text:00000000004136c8\n.text:00000000004136cf\n.text:00000000004136d4\n.text:00000000004136d9\n.text:00000000004136e0\n.text:00000000004136e5\n.text:00000000004136ea\n.text:00000000004136ee\n.text:00000000004136f0\n.text:00000000004136f2\n.text:00000000004136f7\n.text:00000000004136fa\n.text:00000000004136ff\n.text:0000000000413704\n.text:0000000000413709\n.text:000000000041370c\n.text:0000000000413711\n.text:0000000000413714\n.text:0000000000413719\n.text:000000000041371c\n.text:0000000000413721\n.text:0000000000413724\n.text:0000000000413729\n.text:000000000041372e\n.text:0000000000413733\n.text:000000000041373a\n.text:000000000041373e\n.text:0000000000413740\n.text:0000000000413745\n.text:0000000000413748\n.text:000000000041374d\n.text:0000000000413752\n.text:0000000000413755\n.text:000000000041375a\n.text:000000000041375f\n.text:0000000000413764\n.text:0000000000413769\n.text:000000000041376e\n.text:0000000000413771\n.text:0000000000413773\n.text:0000000000413778\n.text:000000000041377f\n.text:0000000000413786\n.text:000000000041378a\n.text:000000000041378f\n.text:0000000000413793\n.text:0000000000413798\n.text:000000000041379d\n.text:00000000004137a2\n.text:00000000004137a5\n.text:00000000004137aa\n.text:00000000004137af\n.text:00000000004137b4\n.text:00000000004137b7\n.text:00000000004137bc\n.text:00000000004137c1\n.text:00000000004137c6\n.text:00000000004137cb\n.text:00000000004137ce\n.text:00000000004137d3\n.text:00000000004137d6\n.text:00000000004137db\n.text:00000000004137e0\n.text:00000000004137e7\n.text:00000000004137eb\n.text:00000000004137ed\n.text:00000000004137f2\n.text:00000000004137f5\n.text:00000000004137fa\n.text:00000000004137ff\n.text:0000000000413802\n.text:0000000000413807\n.text:000000000041380c\n.text:0000000000413811\n.text:0000000000413816\n.text:000000000041381b\n.text:000000000041381e\n.text:0000000000413820\n.text:0000000000413825\n.text:000000000041382c\n.text:0000000000413833\n.text:0000000000413837\n.text:000000000041383c\n.text:0000000000413840\n.text:0000000000413845\n.text:000000000041384a\n.text:000000000041384f\n.text:0000000000413852\n.text:0000000000413857\n.text:000000000041385c\n.text:0000000000413861\n.text:0000000000413864\n.text:0000000000413869\n.text:000000000041386e\n.text:0000000000413873\n.text:0000000000413878\n.text:000000000041387d\n.text:0000000000413884\n.text:0000000000413889\n.text:000000000041388c\n.text:0000000000413891\n.text:0000000000413894\n.text:0000000000413896\n.text:0000000000413899\n.text:000000000041389c\n.text:00000000004138a3\n.text:00000000004138a8\n.text:00000000004138ad\n.text:00000000004138b4\n.text:00000000004138b6\n.text:00000000004138bb\n.text:00000000004138be\n.text:00000000004138c5\n.text:00000000004138ca\n.text:00000000004138d1\n.text:00000000004138d6\n.text:00000000004138d9\n.text:00000000004138de\n.text:00000000004138e3\n.text:00000000004138eb\n.text:00000000004138f0\n.text:00000000004138f5\n.text:00000000004138fa\n.text:0000000000413902\n.text:0000000000413906\n.text:000000000041390b\n.text:000000000041390f\n.text:0000000000413914\n.text:0000000000413919\n.text:000000000041391e\n.text:0000000000413923\n.text:0000000000413927\n.text:000000000041392c\n.text:0000000000413931\n.text:0000000000413936\n.text:000000000041393b\n.text:0000000000413940\n.text:0000000000413943\n.text:0000000000413948\n.text:000000000041394d\n.text:0000000000413952\n.text:0000000000413955\n.text:000000000041395a\n.text:000000000041395f\n.text:0000000000413964\n.text:0000000000413969\n.text:000000000041396e\n.text:0000000000413973\n.text:0000000000413977\n.text:000000000041397c\n.text:0000000000413981\n.text:0000000000413984\n.text:0000000000413988\n.text:000000000041398d\n.text:0000000000413992\n.text:0000000000413996\n.text:000000000041399b\n.text:00000000004139a0\n.text:00000000004139a5\n.text:00000000004139a8\n.text:00000000004139ad\n.text:00000000004139b2\n.text:00000000004139b7\n.text:00000000004139bc\n.text:00000000004139c1\n.text:00000000004139c4\n.text:00000000004139c9\n.text:00000000004139ce\n.text:00000000004139d3\n.text:00000000004139d8\n.text:00000000004139da\n.text:00000000004139de\n.text:00000000004139e2\n.text:00000000004139e7\n.text:00000000004139eb\n.text:00000000004139f0\n.text:00000000004139f5\n.text:00000000004139fd\n.text:0000000000413a01\n.text:0000000000413a04\n.text:0000000000413a09\n.text:0000000000413a0d\n.text:0000000000413a12\n.text:0000000000413a16\n.text:0000000000413a19\n.text:0000000000413a1c\n.text:0000000000413a21\n.text:0000000000413a29\n.text:0000000000413a2f\n.text:0000000000413a36\n.text:0000000000413a3e\n.text:0000000000413a42\n.text:0000000000413a4a\n.text:0000000000413a4d\n.text:0000000000413a51\n.text:0000000000413a53\n.text:0000000000413a57\n.text:0000000000413a5c\n.text:0000000000413a60\n.text:0000000000413a64\n.text:0000000000413a68\n.text:0000000000413a6a\n.text:0000000000413a6e\n.text:0000000000413a72\n.text:0000000000413a76\n.text:0000000000413a7a\n.text:0000000000413a7f\n.text:0000000000413a83\n.text:0000000000413a88\n.text:0000000000413a8c\n.text:0000000000413a8e\n.text:0000000000413a90\n.text:0000000000413a94\n.text:0000000000413a98\n.text:0000000000413a9c\n.text:0000000000413aa0\n.text:0000000000413aa4\n.text:0000000000413aa8\n.text:0000000000413aad\n.text:0000000000413ab1\n.text:0000000000413ab6\n.text:0000000000413aba\n.text:0000000000413abe\n.text:0000000000413ac2\n.text:0000000000413ac7\n.text:0000000000413ace\n.text:0000000000413ad3\n.text:0000000000413ad7\n.text:0000000000413adc\n.text:0000000000413ae0\n.text:0000000000413ae4\n.text:0000000000413ae8\n.text:0000000000413aed\n.text:0000000000413af1\n.text:0000000000413af9\n.text:0000000000413afd\n.text:0000000000413b02\n.text:0000000000413b05\n.text:0000000000413b07\n.text:0000000000413b09\n.text:0000000000413b0d\n.text:0000000000413b12\n.text:0000000000413b16\n.text:0000000000413b1a\n.text:0000000000413b1e\n.text:0000000000413b20\n.text:0000000000413b22\n.text:0000000000413b27\n.text:0000000000413b29\n.text:0000000000413b2e\n.text:0000000000413b30\n.text:0000000000413b32\n.text:0000000000413b34\n.text:0000000000413b37\n.text:0000000000413b3c\n.text:0000000000413b3e\n.text:0000000000413b40\n.text:0000000000413b42\n.text:0000000000413b47\n.text:0000000000413b49\n.text:0000000000413b4d\n.text:0000000000413b4f\n.text:0000000000413b54\n.text:0000000000413b59\n.text:0000000000413b5b\n.text:0000000000413b5d\n.text:0000000000413b5f\n.text:0000000000413b62\n.text:0000000000413b65\n.text:0000000000413b68\n.text:0000000000413b6b\n.text:0000000000413b6e\n.text:0000000000413b72\n.text:0000000000413b77\n.text:0000000000413b7c\n.text:0000000000413b81\n.text:0000000000413b86\n.text:0000000000413b8b\n.text:0000000000413b90\n.text:0000000000413b95\n.text:0000000000413b9a\n.text:0000000000413b9f\n.text:0000000000413ba7\n.text:0000000000413bae\n.text:0000000000413bb7\n.text:0000000000413bb9\n.text:0000000000413bbc\n.text:0000000000413bbe\n.text:0000000000413bc1\n.text:0000000000413bc8\n.text:0000000000413bca\n.text:0000000000413bcc\n.text:0000000000413bd3\n.text:0000000000413be0\n.text:0000000000413be7\n.text:0000000000413bf0\n.text:0000000000413bf3\n.text:0000000000413bf7\n.text:0000000000413bfa\n.text:0000000000413c00\n.text:0000000000413c05\n.text:0000000000413c0b\n.text:0000000000413c0d\n.text:0000000000413c0f\n.text:0000000000413c11\n.text:0000000000413c13\n.text:0000000000413c18\n.text:0000000000413c1d\n.text:0000000000413c21\n.text:0000000000413c23\n.text:0000000000413c29\n.text:0000000000413c2b\n.text:0000000000413c2d\n.text:0000000000413c2f\n.text:0000000000413c31\n.text:0000000000413c36\n.text:0000000000413c39\n.text:0000000000413c3e\n.text:0000000000413c42\n.text:0000000000413c47\n.text:0000000000413c4b\n.text:0000000000413c4f\n.text:0000000000413c54\n.text:0000000000413c59\n.text:0000000000413c5e\n.text:0000000000413c63\n.text:0000000000413c68\n.text:0000000000413c6d\n.text:0000000000413c70\n.text:0000000000413c75\n.text:0000000000413c7a\n.text:0000000000413c7f\n.text:0000000000413c83\n.text:0000000000413c88\n.text:0000000000413c8d\n.text:0000000000413c91\n.text:0000000000413c96\n.text:0000000000413c9b\n.text:0000000000413ca0\n.text:0000000000413ca5\n.text:0000000000413caa\n.text:0000000000413cad\n.text:0000000000413cb2\n.text:0000000000413cb5\n.text:0000000000413cba\n.text:0000000000413cbe\n.text:0000000000413cc3\n.text:0000000000413cc7\n.text:0000000000413ccc\n.text:0000000000413cd1\n.text:0000000000413cd6\n.text:0000000000413cdb\n.text:0000000000413cdf\n.text:0000000000413ce4\n.text:0000000000413ce9\n.text:0000000000413cee\n.text:0000000000413cf1\n.text:0000000000413cf6\n.text:0000000000413cf9\n.text:0000000000413cfe\n.text:0000000000413d05\n.text:0000000000413d0a\n.text:0000000000413d0e\n.text:0000000000413d13\n.text:0000000000413d1a\n.text:0000000000413d1f\n.text:0000000000413d23\n.text:0000000000413d27\n.text:0000000000413d2b\n.text:0000000000413d2f\n.text:0000000000413d37\n.text:0000000000413d3b\n.text:0000000000413d3f\n.text:0000000000413d42\n.text:0000000000413d50\n.text:0000000000413d53\n.text:0000000000413d59\n.text:0000000000413d5b\n.text:0000000000413d5d\n.text:0000000000413d62\n.text:0000000000413d64\n.text:0000000000413d69\n.text:0000000000413d70\n.text:0000000000413d71\n.text:0000000000413d73\n.text:0000000000413d75\n.text:0000000000413d77\n.text:0000000000413d79\n.text:0000000000413d7a\n'
p1490
tp1491
sS'mbrtowc'
p1492
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p1493
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_0062d158)();\u000a  return sVar1;\u000a}\u000a\u000a
p1494
S'JMP qword ptr [0x0062d158]\n'
p1495
S'ff 25 e2 a7 22 00\n'
p1496
S'.plt:0000000000402970\n'
p1497
tp1498
sS'xextendbuf'
p1499
(S'\n__stdcall xextendbuf(void * existing, size_t wanted, size_t * allocated)\n'
p1500
V\u000avoid * xextendbuf(void *existing,size_t wanted,size_t *allocated)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = extendbuf(existing,wanted,allocated);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a  free(existing);\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1501
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x0040e5f0\nTEST RAX,RAX\nJZ 0x0040e6f0\nPOP RBX\nRET\nMOV RDI,RBX\nCALL 0x00402710\nCALL 0x004173b0\n'
p1502
S'53\n48 89 fb\ne8 07 ff ff ff\n48 85 c0\n74 02\n5b\nc3\n48 89 df\ne8 18 40 ff ff\ne8 b3 8c 00 00\n'
p1503
S'.text:000000000040e6e0\n.text:000000000040e6e1\n.text:000000000040e6e4\n.text:000000000040e6e9\n.text:000000000040e6ec\n.text:000000000040e6ee\n.text:000000000040e6ef\n.text:000000000040e6f0\n.text:000000000040e6f3\n.text:000000000040e6f8\n'
p1504
tp1505
sS'enter_dir'
p1506
(S'\n__stdcall enter_dir(FTS * fts, FTSENT * ent)\n'
p1507
V\u000a_Bool enter_dir(FTS *fts,FTSENT *ent)\u000a\u000a{\u000a  _Bool _Var1;\u000a  __dev_t *entry;\u000a  __dev_t *p_Var2;\u000a  undefined uVar3;\u000a  \u000a  if ((*(ushort *)&fts->fts_options & 0x102) == 0) {\u000a    _Var1 = cycle_check((cycle_check_state *)fts->fts_cycle,ent->fts_statp);\u000a    if (_Var1 == false) {\u000a      return true;\u000a    }\u000a    *(FTSENT **)&ent->fts_cycle = ent;\u000aLAB_00419b73:\u000a    uVar3 = 1;\u000a    ent->fts_info = 2;\u000a  }\u000a  else {\u000a    entry = (__dev_t *)malloc(0x18);\u000a    if (entry != (__dev_t *)0x0) {\u000a      *entry = ent->fts_statp[0].st_dev;\u000a      entry[1] = ent->fts_statp[0].st_ino;\u000a      *(FTSENT **)(entry + 2) = ent;\u000a      p_Var2 = (__dev_t *)hash_insert((Hash_table *)fts->fts_cycle,entry);\u000a      if (p_Var2 == entry) {\u000a        return true;\u000a      }\u000a      free(entry);\u000a      if (p_Var2 != (__dev_t *)0x0) {\u000a        ent->fts_cycle = (_ftsent *)p_Var2[2];\u000a        goto LAB_00419b73;\u000a      }\u000a    }\u000a    uVar3 = 0;\u000a  }\u000a  return (_Bool)uVar3;\u000a}\u000a\u000a
p1508
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBP,RDI\nMOVZX EAX,word ptr [RBP + 0x48]\nTEST AX,0x102\nJZ 0x00419b5c\nMOV EDI,0x18\nCALL 0x00402c60\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00419b7c\nMOV RAX,qword ptr [R14 + 0x78]\nMOV qword ptr [RBX],RAX\nMOV RAX,qword ptr [0x80 + R14]\nMOV qword ptr [RBX + 0x8],RAX\nMOV qword ptr [RBX + 0x10],R14\nMOV RDI,qword ptr [RBP + 0x58]\nMOV RSI,RBX\nCALL 0x004110c0\nMOV R15,RAX\nMOV BPL,0x1\nCMP R15,RBX\nJZ 0x00419b7e\nMOV RDI,RBX\nCALL 0x00402710\nTEST R15,R15\nJZ 0x00419b7c\nMOV RAX,qword ptr [R15 + 0x10]\nMOV qword ptr [R14],RAX\nJMP 0x00419b73\nMOV RDI,qword ptr [RBP + 0x58]\nLEA RSI,[R14 + 0x78]\nCALL 0x0041bb10\nMOV BPL,0x1\nTEST AL,AL\nJZ 0x00419b7e\nMOV qword ptr [R14],R14\nMOV word ptr [R14 + 0x70],0x2\nJMP 0x00419b7e\nXOR EBP,EBP\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1509
S'55\n41 57\n41 56\n53\n50\n49 89 f6\n48 89 fd\n0f b7 45 48\n66 a9 02 01\n74 55\nbf 18 00 00 00\ne8 4f 91 fe ff\n48 89 c3\n48 85 db\n74 63\n49 8b 46 78\n48 89 03\n49 8b 86 80 00 00 00\n48 89 43 08\n4c 89 73 10\n48 8b 7d 58\n48 89 de\ne8 85 75 ff ff\n49 89 c7\n40 b5 01\n49 39 df\n74 38\n48 89 df\ne8 c2 8b fe ff\n4d 85 ff\n74 29\n49 8b 47 10\n49 89 06\neb 17\n48 8b 7d 58\n49 8d 76 78\ne8 a7 1f 00 00\n40 b5 01\n84 c0\n74 0e\n4d 89 36\n66 41 c7 46 70 02 00\neb 02\n31 ed\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1510
S'.text:0000000000419af0\n.text:0000000000419af1\n.text:0000000000419af3\n.text:0000000000419af5\n.text:0000000000419af6\n.text:0000000000419af7\n.text:0000000000419afa\n.text:0000000000419afd\n.text:0000000000419b01\n.text:0000000000419b05\n.text:0000000000419b07\n.text:0000000000419b0c\n.text:0000000000419b11\n.text:0000000000419b14\n.text:0000000000419b17\n.text:0000000000419b19\n.text:0000000000419b1d\n.text:0000000000419b20\n.text:0000000000419b27\n.text:0000000000419b2b\n.text:0000000000419b2f\n.text:0000000000419b33\n.text:0000000000419b36\n.text:0000000000419b3b\n.text:0000000000419b3e\n.text:0000000000419b41\n.text:0000000000419b44\n.text:0000000000419b46\n.text:0000000000419b49\n.text:0000000000419b4e\n.text:0000000000419b51\n.text:0000000000419b53\n.text:0000000000419b57\n.text:0000000000419b5a\n.text:0000000000419b5c\n.text:0000000000419b60\n.text:0000000000419b64\n.text:0000000000419b69\n.text:0000000000419b6c\n.text:0000000000419b6e\n.text:0000000000419b70\n.text:0000000000419b73\n.text:0000000000419b7a\n.text:0000000000419b7c\n.text:0000000000419b7e\n.text:0000000000419b80\n.text:0000000000419b84\n.text:0000000000419b85\n.text:0000000000419b87\n.text:0000000000419b89\n.text:0000000000419b8a\n'
p1511
tp1512
sS'endmntent'
p1513
(S'\n__stdcall endmntent()\n'
p1514
V\u000avoid endmntent(void)\u000a\u000a{\u000a  (*(code *)PTR_endmntent_0062d038)();\u000a  return;\u000a}\u000a\u000a
p1515
S'JMP qword ptr [0x0062d038]\n'
p1516
S'ff 25 02 a9 22 00\n'
p1517
S'.plt:0000000000402730\n'
p1518
tp1519
sS'dcgettext'
p1520
(S'\n__stdcall dcgettext()\n'
p1521
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_0062d128)();\u000a  return;\u000a}\u000a\u000a
p1522
S'JMP qword ptr [0x0062d128]\n'
p1523
S'ff 25 12 a8 22 00\n'
p1524
S'.plt:0000000000402910\n'
p1525
tp1526
sS'parse_datetime'
p1527
(S'\n__stdcall parse_datetime(timespec * result, char * p, timespec * now)\n'
p1528
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000a_Bool parse_datetime(timespec *result,char *p,timespec *now)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  __syscall_slong_t _Var3;\u000a  ulong uVar4;\u000a  byte bVar5;\u000a  bool bVar6;\u000a  timespec *ptVar7;\u000a  _Bool _Var8;\u000a  int iVar9;\u000a  tm *ptVar10;\u000a  char *__value;\u000a  time_t t;\u000a  char *pcVar11;\u000a  long lVar12;\u000a  ulong n;\u000a  long lVar13;\u000a  char *__s1;\u000a  __time_t _Var14;\u000a  time_t probe;\u000a  parser_control pc;\u000a  timespec gettime_buffer;\u000a  char tz1buf [30];\u000a  char tz0buf [100];\u000a  char *local_268;\u000a  int local_258;\u000a  int local_254;\u000a  int local_250;\u000a  int local_24c;\u000a  int local_248;\u000a  int local_244;\u000a  int local_240;\u000a  int iStack572;\u000a  int local_238;\u000a  undefined4 uStack564;\u000a  undefined4 local_230;\u000a  undefined4 uStack556;\u000a  char *local_228;\u000a  timespec *local_220;\u000a  undefined8 local_218;\u000a  int local_210;\u000a  int iStack524;\u000a  int local_208;\u000a  int iStack516;\u000a  int iStack512;\u000a  int iStack508;\u000a  int local_1f8;\u000a  undefined4 uStack500;\u000a  undefined4 uStack496;\u000a  undefined4 uStack492;\u000a  char *local_1e8;\u000a  char *local_1d8;\u000a  long local_1d0;\u000a  int local_1c8;\u000a  int local_1c4;\u000a  ulong local_1c0;\u000a  int local_1b8;\u000a  undefined4 local_1b0;\u000a  undefined4 uStack428;\u000a  undefined8 local_1a8;\u000a  size_t local_1a0;\u000a  long local_198;\u000a  long local_190;\u000a  long local_188;\u000a  long local_180;\u000a  undefined8 local_178;\u000a  undefined8 local_170;\u000a  int local_168;\u000a  uint uStack356;\u000a  int local_160;\u000a  uint uStack348;\u000a  int local_158;\u000a  uint uStack340;\u000a  undefined4 local_150;\u000a  undefined4 uStack332;\u000a  undefined4 local_148;\u000a  undefined4 uStack324;\u000a  undefined2 local_140;\u000a  undefined2 uStack318;\u000a  undefined2 uStack316;\u000a  undefined2 uStack314;\u000a  undefined2 local_138;\u000a  undefined4 uStack310;\u000a  undefined2 uStack306;\u000a  _Bool local_130;\u000a  _Bool local_12f;\u000a  undefined4 local_128;\u000a  undefined4 uStack292;\u000a  undefined4 local_120;\u000a  undefined4 uStack284;\u000a  undefined4 local_118;\u000a  undefined4 uStack276;\u000a  undefined4 local_110;\u000a  undefined4 uStack268;\u000a  undefined4 local_108;\u000a  undefined4 uStack260;\u000a  undefined4 local_100;\u000a  undefined4 uStack252;\u000a  char *local_f8;\u000a  int local_f0;\u000a  int local_ec;\u000a  char *local_e8;\u000a  int local_e0;\u000a  int local_dc;\u000a  char *local_d8;\u000a  timespec local_c8;\u000a  char local_b8 [32];\u000a  char local_98 [104];\u000a  \u000a  if (now == (timespec *)0x0) {\u000a    now = &local_c8;\u000a    gettime(now);\u000a  }\u000a  _Var14 = now->tv_sec;\u000a  _Var3 = now->tv_nsec;\u000a  ptVar10 = localtime((time_t *)now);\u000a  if (ptVar10 == (tm *)0x0) {\u000a    return false;\u000a  }\u000a  pcVar11 = p + 3;\u000a  local_220 = result;\u000a  do {\u000a    __s1 = pcVar11;\u000a    _Var8 = c_isspace();\u000a    pcVar11 = __s1 + 1;\u000a  } while (_Var8 != false);\u000a  __s1 = __s1 + -3;\u000a  iVar9 = strncmp(__s1,"TZ=\u005c"",4);\u000a  if (iVar9 == 0) {\u000a    n = 1;\u000a    __value = pcVar11;\u000a    do {\u000a      cVar2 = *__value;\u000a      if (cVar2 == '\u005c\u005c') {\u000a        pcVar1 = __value + 1;\u000a        __value = __value + 1;\u000a        if ((*pcVar1 != '\u005c"') && (*pcVar1 != '\u005c\u005c')) break;\u000a      }\u000a      else {\u000a        if (cVar2 == 0) break;\u000a        if (cVar2 == '\u005c"') goto LAB_0041478a;\u000a      }\u000a      __value = __value + 1;\u000a      n = n + 1;\u000a    } while( true );\u000a  }\u000a  local_268 = (char *)0x0;\u000a  bVar6 = false;\u000aLAB_004143f7:\u000a  local_1d8 = "0";\u000a  if (*__s1 != 0) {\u000a    local_1d8 = __s1;\u000a  }\u000a  local_1a8 = (long)ptVar10->tm_year + 0x76c;\u000a  local_1a0 = 0;\u000a  local_198 = (long)ptVar10->tm_mon + 1;\u000a  local_190 = (long)ptVar10->tm_mday;\u000a  local_188 = (long)ptVar10->tm_hour;\u000a  local_180 = (long)ptVar10->tm_min;\u000a  local_178 = (long)ptVar10->tm_sec;\u000a  local_238 = ptVar10->tm_isdst;\u000a  local_1b8 = 2;\u000a  local_138 = 0;\u000a  uStack310 = 0;\u000a  uStack306 = 0;\u000a  local_130 = false;\u000a  local_12f = false;\u000a  local_148 = 0;\u000a  uStack324 = 0;\u000a  local_140 = 0;\u000a  uStack318 = 0;\u000a  uStack316 = 0;\u000a  uStack314 = 0;\u000a  local_158 = 0;\u000a  uStack340 = 0;\u000a  local_150 = 0;\u000a  uStack332 = 0;\u000a  local_168 = 0;\u000a  uStack356 = 0;\u000a  local_160 = 0;\u000a  uStack348 = 0;\u000a  local_108 = 0;\u000a  uStack260 = 0;\u000a  local_100 = 0;\u000a  uStack252 = 0;\u000a  local_118 = 0;\u000a  uStack276 = 0;\u000a  local_110 = 0;\u000a  uStack268 = 0;\u000a  local_128 = 0;\u000a  uStack292 = 0;\u000a  local_120 = 0;\u000a  uStack284 = 0;\u000a  local_f8 = ptVar10->tm_zone;\u000a  local_f0 = 0x10d;\u000a  local_ec = ptVar10->tm_isdst;\u000a  local_e8 = (char *)0x0;\u000a  lVar12 = 1;\u000a  local_170 = _Var3;\u000a  do {\u000a    _Var14 = _Var14 + 0x76a700;\u000a    local_218 = _Var14;\u000a    ptVar10 = localtime(&local_218);\u000a    if (((ptVar10 != (tm *)0x0) && (ptVar10->tm_zone != (char *)0x0)) &&\u000a       (ptVar10->tm_isdst != local_ec)) {\u000a      local_e0 = 0x10d;\u000a      local_d8 = (char *)0x0;\u000a      local_e8 = ptVar10->tm_zone;\u000a      local_dc = ptVar10->tm_isdst;\u000a      break;\u000a    }\u000a    lVar12 = lVar12 + 1;\u000a  } while (lVar12 < 4);\u000a  if (((local_f8 != (char *)0x0) && (local_e8 != (char *)0x0)) &&\u000a     (iVar9 = strcmp(local_f8,local_e8), iVar9 == 0)) {\u000a    local_ec = -1;\u000a    local_e8 = (char *)0x0;\u000a  }\u000a  iVar9 = yyparse((parser_control *)&local_1d8);\u000a  if (iVar9 == 0) {\u000a    if (local_130 != false) {\u000a      *(int *)&local_220->tv_sec = (int)local_178;\u000a      *(undefined4 *)((long)&local_220->tv_sec + 4) = local_178._4_4_;\u000a      *(undefined4 *)&local_220->tv_nsec = (undefined4)local_170;\u000a      *(undefined4 *)((long)&local_220->tv_nsec + 4) = local_170._4_4_;\u000a      bVar5 = 1;\u000a      goto joined_r0x00414b31;\u000a    }\u000a    if (1 < (CONCAT44(uStack252,local_100) + CONCAT44(uStack276,local_118) |\u000a            CONCAT44(uStack292,local_128) | CONCAT44(uStack260,local_108) |\u000a            CONCAT44(uStack284,local_120) | CONCAT44(uStack268,local_110))) goto LAB_00414617;\u000a    lVar12 = to_year((textint)CONCAT816(local_1a0,\u000a                                        CONCAT412(local_1a8._4_4_,\u000a                                                  CONCAT48((undefined4)local_1a8,\u000a                                                           CONCAT44(uStack428,local_1b0)))));\u000a    local_244 = (int)lVar12 + -0x76c;\u000a    local_248 = (int)local_198 + -1;\u000a    local_24c = (int)local_190;\u000a    if ((CONCAT44(uStack260,local_108) != 0) ||\u000a       ((local_12f != false &&\u000a        ((CONCAT44(uStack284,local_120) | CONCAT44(uStack292,local_128)) == 0)))) {\u000a      local_250 = to_hour(local_188);\u000a      if (-1 < local_250) {\u000a        local_254 = (int)local_180;\u000a        local_258 = (int)local_178;\u000a        goto LAB_0041487b;\u000a      }\u000aLAB_00414bd9:\u000a      bVar5 = 0;\u000a      goto joined_r0x00414b31;\u000a    }\u000a    local_258 = 0;\u000a    local_254 = 0;\u000a    local_250 = 0;\u000a    local_170 = 0;\u000aLAB_0041487b:\u000a    ptVar7 = local_220;\u000a    if ((CONCAT44(uStack284,local_120) | CONCAT44(uStack292,local_128) |\u000a        CONCAT44(uStack260,local_108)) != 0) {\u000a      local_238 = -1;\u000a    }\u000a    if (CONCAT44(uStack276,local_118) != 0) {\u000a      local_238 = local_1c4;\u000a    }\u000a    local_1e8 = local_228;\u000a    local_1f8 = local_238;\u000a    uStack500 = uStack564;\u000a    uStack496 = local_230;\u000a    uStack492 = uStack556;\u000a    local_208 = local_248;\u000a    iStack516 = local_244;\u000a    iStack512 = local_240;\u000a    iStack508 = iStack572;\u000a    local_218 = CONCAT44(local_254,local_258);\u000a    local_210 = local_250;\u000a    iStack524 = local_24c;\u000a    t = rpl_mktime((tm *)&local_258);\u000a    _Var8 = mktime_ok((tm *)&local_218,(tm *)&local_258,t);\u000a    n = local_1c0;\u000a    if (_Var8 != false) {\u000a      lVar12 = CONCAT44(uStack284,local_120);\u000ajoined_r0x00414c4a:\u000a      if ((lVar12 != 0) && (CONCAT44(uStack292,local_128) == 0)) {\u000a        iVar9 = (local_1c8 + 7) - local_240;\u000a        local_24c = iVar9 + (iVar9 / 7 + (iVar9 >> 0x1f) +\u000a                            (uint)((ulong)((long)iVar9 * 0x92492493) >> 0x3f)) * -7 + local_24c +\u000a                    ((int)local_1d0 - (uint)(0 < local_1d0 && local_1c8 != local_240)) * 7;\u000a        local_238 = -1;\u000a        t = rpl_mktime((tm *)&local_258);\u000a        if (t == -1) goto LAB_00414bd9;\u000a      }\u000a      if ((CONCAT44(uStack348,local_160) | CONCAT44(uStack356,local_168) |\u000a          CONCAT44(uStack340,local_158)) == 0) {\u000aLAB_00414a69:\u000a        if (CONCAT44(uStack252,local_100) != 0) {\u000a          t = local_1c0 * -0x3c + t + CONCAT44(uStack556,local_230);\u000a        }\u000a        lVar13 = CONCAT26(uStack306,CONCAT42(uStack310,local_138)) + local_170;\u000a        lVar12 = lVar13 + (lVar13 / 1000000000 + (lVar13 >> 0x3f)) * -1000000000 + 1000000000;\u000a        lVar12 = lVar12 + (lVar12 / 1000000000 + (lVar12 >> 0x3f)) * -1000000000;\u000a        lVar13 = lVar13 - lVar12;\u000a        ptVar7->tv_sec =\u000a             CONCAT44(uStack324,local_148) * 0x3c + CONCAT44(uStack332,local_150) * 0xe10 + t +\u000a             CONCAT26(uStack314,CONCAT24(uStack316,CONCAT22(uStack318,local_140))) +\u000a             lVar13 / 1000000000 + (lVar13 >> 0x3f);\u000a        ptVar7->tv_nsec = lVar12;\u000a        bVar5 = 1;\u000a        goto joined_r0x00414b31;\u000a      }\u000a      if ((uStack340 >> 0x1f ^ (uint)(local_158 + local_24c < local_24c) |\u000a          uStack348 >> 0x1f ^ (uint)(local_160 + local_248 < local_248) |\u000a          uStack356 >> 0x1f ^ (uint)(local_168 + local_244 < local_244)) == 0) {\u000a        local_250 = local_210;\u000a        local_254 = local_218._4_4_;\u000a        local_258 = (int)local_218;\u000a        local_238 = local_1f8;\u000a        local_24c = local_158 + local_24c;\u000a        local_248 = local_160 + local_248;\u000a        local_244 = local_168 + local_244;\u000a        t = rpl_mktime((tm *)&local_258);\u000a        if (t != -1) goto LAB_00414a69;\u000a      }\u000a      goto LAB_00414bd9;\u000a    }\u000a    if (CONCAT44(uStack252,local_100) == 0) goto LAB_00414bd9;\u000a    if (!bVar6) {\u000a      local_268 = get_tz(local_98);\u000a    }\u000a    sprintf(local_b8,"XXX%s%ld:%02d",&DAT_0041e869 + (n >> 0x3f));\u000a    iVar9 = setenv("TZ",local_b8,1);\u000a    if (iVar9 != 0) goto LAB_00414bd9;\u000a    local_228 = local_1e8;\u000a    local_238 = local_1f8;\u000a    uStack564 = uStack500;\u000a    local_230 = uStack496;\u000a    uStack556 = uStack492;\u000a    local_248 = local_208;\u000a    local_244 = iStack516;\u000a    local_240 = iStack512;\u000a    iStack572 = iStack508;\u000a    local_258 = (int)local_218;\u000a    local_254 = local_218._4_4_;\u000a    local_250 = local_210;\u000a    local_24c = iStack524;\u000a    t = rpl_mktime((tm *)&local_258);\u000a    _Var8 = mktime_ok((tm *)&local_218,(tm *)&local_258,t);\u000a    if (_Var8 != false) {\u000a      bVar6 = true;\u000a      lVar12 = CONCAT44(uStack284,local_120);\u000a      goto joined_r0x00414c4a;\u000a    }\u000a    bVar5 = 0;\u000a  }\u000a  else {\u000aLAB_00414617:\u000a    bVar5 = 0;\u000ajoined_r0x00414b31:\u000a    if (!bVar6) goto LAB_00414668;\u000a  }\u000a  if (local_268 == (char *)0x0) {\u000a    iVar9 = unsetenv("TZ");\u000a  }\u000a  else {\u000a    iVar9 = setenv("TZ",local_268,1);\u000a  }\u000a  bVar5 = bVar5 & iVar9 == 0;\u000aLAB_00414668:\u000a  if (local_268 != local_98) {\u000a    free(local_268);\u000a  }\u000a  return (_Bool)bVar5;\u000aLAB_0041478a:\u000a  local_268 = get_tz(local_98);\u000a  if (n < 0x65) {\u000a    __value = &local_1d8;\u000a  }\u000a  else {\u000a    __value = (char *)xmalloc(n);\u000a  }\u000a  cVar2 = *pcVar11;\u000a  __s1 = pcVar11;\u000a  pcVar11 = __value;\u000a  while (cVar2 != '\u005c"') {\u000a    uVar4 = (ulong)(cVar2 == '\u005c\u005c');\u000a    *pcVar11 = __s1[uVar4];\u000a    pcVar11 = pcVar11 + 1;\u000a    cVar2 = __s1[uVar4 + 1];\u000a    __s1 = __s1 + uVar4 + 1;\u000a  }\u000a  *pcVar11 = 0;\u000a  iVar9 = setenv("TZ",__value,1);\u000a  if (100 < n) {\u000a    free(__value);\u000a  }\u000a  if (iVar9 != 0) {\u000a    bVar5 = 0;\u000a    goto LAB_00414668;\u000a  }\u000a  do {\u000a    __s1 = __s1 + 1;\u000a    _Var8 = c_isspace();\u000a  } while (_Var8 != false);\u000a  bVar6 = true;\u000a  goto LAB_004143f7;\u000a}\u000a\u000a
p1529
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x258\nMOV RBP,RDX\nMOV RBX,RSI\nMOV R13,RDI\nTEST RBP,RBP\nJNZ 0x0041438f\nLEA RBP,[0x1c0 + RSP]\nMOV RDI,RBP\nCALL 0x0041bba0\nMOV R15,qword ptr [RBP]\nMOV R14,qword ptr [RBP + 0x8]\nMOV RDI,RBP\nCALL 0x00402740\nMOV R12,RAX\nTEST R12,R12\nJZ 0x00414559\nMOV qword ptr [RSP + 0x68],R13\nADD RBX,0x3\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVZX EDI,byte ptr [RBX + -0x3]\nCALL 0x0041ba20\nINC RBX\nTEST AL,AL\nJNZ 0x004143c0\nLEA R13,[RBX + -0x4]\nMOV ESI,0x42427e\nMOV EDX,0x4\nMOV RDI,R13\nCALL 0x00402790\nTEST EAX,EAX\nJZ 0x00414560\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x20],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x28],RAX\nCMP byte ptr [R13],0x0\nMOV EAX,0x41cdbe\nCMOVNZ RAX,R13\nMOV qword ptr [0xb0 + RSP],RAX\nMOVSXD RAX,dword ptr [R12 + 0x14]\nLEA R13,[0xd8 + RSP]\nADD RAX,0x76c\nMOV qword ptr [0xe0 + RSP],RAX\nMOV qword ptr [0xe8 + RSP],0x0\nMOVSXD RAX,dword ptr [R12 + 0x10]\nINC RAX\nMOV qword ptr [0xf0 + RSP],RAX\nMOVSXD RAX,dword ptr [R12 + 0xc]\nMOV qword ptr [0xf8 + RSP],RAX\nMOVSXD RAX,dword ptr [R12 + 0x8]\nMOV qword ptr [0x100 + RSP],RAX\nMOVSXD RAX,dword ptr [R12 + 0x4]\nMOV qword ptr [0x108 + RSP],RAX\nMOVSXD RAX,dword ptr [R12]\nMOV qword ptr [0x110 + RSP],RAX\nMOV qword ptr [0x118 + RSP],R14\nMOV EAX,dword ptr [R12 + 0x20]\nMOV dword ptr [RSP + 0x50],EAX\nMOV dword ptr [0xd0 + RSP],0x2\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [0x14a + RSP],XMM0\nMOVUPS xmmword ptr [0x140 + RSP],XMM0\nMOVUPS xmmword ptr [0x130 + RSP],XMM0\nMOVUPS xmmword ptr [0x120 + RSP],XMM0\nMOVUPS xmmword ptr [0x180 + RSP],XMM0\nMOVUPS xmmword ptr [0x170 + RSP],XMM0\nMOVUPS xmmword ptr [0x160 + RSP],XMM0\nMOV RAX,qword ptr [R12 + 0x30]\nMOV qword ptr [0x190 + RSP],RAX\nMOV dword ptr [0x198 + RSP],0x10d\nMOV EAX,dword ptr [R12 + 0x20]\nMOV dword ptr [0x19c + RSP],EAX\nMOV qword ptr [0x1a0 + RSP],0x0\nADD R15,0x76a700\nMOV EBP,0x1\nLEA RBX,[RSP + 0x70]\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV qword ptr [RSP + 0x70],R15\nMOV RDI,RBX\nCALL 0x00402740\nTEST RAX,RAX\nJZ 0x00414547\nMOV RCX,qword ptr [RAX + 0x30]\nTEST RCX,RCX\nJZ 0x00414547\nMOV EAX,dword ptr [RAX + 0x20]\nCMP EAX,dword ptr [0x19c + RSP]\nJNZ 0x004145a6\nINC RBP\nADD R15,0x76a700\nCMP RBP,0x4\nJL 0x00414520\nJMP 0x004145cc\nXOR EAX,EAX\nJMP 0x00414682\nMOV EBP,0x1\nMOV RAX,RBX\nJMP 0x00414576\nINC RAX\nINC RBP\nMOVZX ECX,byte ptr [RAX]\nCMP CL,0x5c\nJZ 0x00414590\nTEST CL,CL\nJZ 0x004143ee\nCMP CL,0x22\nJNZ 0x00414570\nJMP 0x0041478a\nMOVZX ECX,byte ptr [RAX + 0x1]\nINC RAX\nCMP CL,0x22\nJZ 0x00414570\nCMP CL,0x5c\nJZ 0x00414570\nJMP 0x004143ee\nMOV qword ptr [0x1a0 + RSP],RCX\nMOV dword ptr [0x1a8 + RSP],0x10d\nMOV dword ptr [0x1ac + RSP],EAX\nMOV qword ptr [0x1b0 + RSP],0x0\nMOV RDI,qword ptr [0x190 + RSP]\nTEST RDI,RDI\nJZ 0x00414606\nMOV RSI,qword ptr [0x1a0 + RSP]\nTEST RSI,RSI\nJZ 0x00414606\nCALL 0x00402b40\nTEST EAX,EAX\nJNZ 0x00414606\nMOV dword ptr [0x19c + RSP],0xffffffff\nMOV qword ptr [0x1a0 + RSP],0x0\nLEA RDI,[0xb0 + RSP]\nCALL 0x00413290\nTEST EAX,EAX\nJZ 0x0041461b\nXOR EBX,EBX\nJMP 0x00414634\nCMP byte ptr [0x158 + RSP],0x0\nJZ 0x00414694\nMOVUPS XMM0,xmmword ptr [R13 + 0x38]\nMOV RAX,qword ptr [RSP + 0x68]\nMOVUPS xmmword ptr [RAX],XMM0\nMOV BL,0x1\nMOV RBP,qword ptr [RSP + 0x20]\nMOV R13,qword ptr [RSP + 0x28]\nTEST R13B,R13B\nJZ 0x00414668\nMOV EDI,0x424283\nTEST RBP,RBP\nJZ 0x0041465c\nMOV EDX,0x1\nMOV RSI,RBP\nCALL 0x004028a0\nJMP 0x00414661\nCALL 0x00402e40\nTEST EAX,EAX\nSETZ AL\nAND BL,AL\nLEA RAX,[0x1f0 + RSP]\nCMP RBP,RAX\nJZ 0x0041467d\nMOV RDI,RBP\nCALL 0x00402710\nTEST BL,BL\nSETNZ AL\nADD RSP,0x258\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RAX,qword ptr [0x160 + RSP]\nMOV RCX,qword ptr [0x188 + RSP]\nOR RAX,qword ptr [0x180 + RSP]\nOR RAX,qword ptr [0x168 + RSP]\nOR RAX,qword ptr [0x178 + RSP]\nADD RCX,qword ptr [0x170 + RSP]\nOR RCX,RAX\nCMP RCX,0x1\nJA 0x00414617\nMOV RAX,qword ptr [R13 + 0x10]\nMOV qword ptr [RSP + 0x10],RAX\nMOVUPS XMM0,xmmword ptr [R13]\nMOVUPS xmmword ptr [RSP],XMM0\nCALL 0x00414cc0\nADD EAX,0xfffff894\nMOV dword ptr [RSP + 0x44],EAX\nMOV EAX,0xfffff894\nADD EAX,dword ptr [0xf0 + RSP]\nADD EAX,0x76b\nMOV dword ptr [RSP + 0x40],EAX\nMOV EAX,dword ptr [0xf8 + RSP]\nMOV dword ptr [RSP + 0x3c],EAX\nCMP qword ptr [0x180 + RSP],0x0\nJNZ 0x00414740\nCMP byte ptr [0x159 + RSP],0x0\nJZ 0x00414848\nMOV RAX,qword ptr [0x168 + RSP]\nOR RAX,qword ptr [0x160 + RSP]\nJNZ 0x00414848\nMOV RDI,qword ptr [0x100 + RSP]\nMOV ESI,dword ptr [0xd0 + RSP]\nCALL 0x00414cf0\nMOV dword ptr [RSP + 0x38],EAX\nTEST EAX,EAX\nMOV RBP,qword ptr [RSP + 0x20]\nMOV R15,qword ptr [RSP + 0x68]\nMOV R13,qword ptr [RSP + 0x28]\nJS 0x00414bd9\nMOV EAX,dword ptr [0x108 + RSP]\nMOV dword ptr [RSP + 0x34],EAX\nMOV EAX,dword ptr [0x110 + RSP]\nMOV dword ptr [RSP + 0x30],EAX\nJMP 0x0041487b\nLEA RDI,[0x1f0 + RSP]\nCALL 0x00414c60\nMOV R13,RAX\nCMP RBP,0x65\nJC 0x004147aa\nMOV RDI,RBP\nCALL 0x00417220\nJMP 0x004147b2\nLEA RAX,[0xb0 + RSP]\nMOV qword ptr [RSP + 0x20],R13\nMOV CL,byte ptr [RBX]\nMOV RSI,RAX\nCMP CL,0x22\nJNZ 0x004147d0\nMOV R13,RBX\nJMP 0x004147f3\nXOR EDX,EDX\nCMP CL,0x5c\nSETZ DL\nMOVZX ECX,byte ptr [RBX + RDX*0x1]\nMOV byte ptr [RSI],CL\nINC RSI\nLEA R13,[RBX + RDX*0x1 + 0x1]\nMOVZX ECX,byte ptr [RBX + RDX*0x1 + 0x1]\nCMP CL,0x22\nMOV RBX,R13\nJNZ 0x004147d0\nMOV byte ptr [RSI],0x0\nMOV EDI,0x424283\nMOV EDX,0x1\nMOV RBX,RAX\nMOV RSI,RBX\nCALL 0x004028a0\nCMP RBP,0x65\nJC 0x0041481d\nMOV RDI,RBX\nMOV EBX,EAX\nCALL 0x00402710\nMOV EAX,EBX\nTEST EAX,EAX\nJZ 0x00414830\nXOR EBX,EBX\nMOV RBP,qword ptr [RSP + 0x20]\nJMP 0x00414668\nMOVZX EDI,byte ptr [R13 + 0x1]\nINC R13\nCALL 0x0041ba20\nTEST AL,AL\nJNZ 0x00414830\nMOV AL,0x1\nJMP 0x004143f7\nMOV dword ptr [RSP + 0x30],0x0\nMOV dword ptr [RSP + 0x34],0x0\nMOV dword ptr [RSP + 0x38],0x0\nMOV qword ptr [0x118 + RSP],0x0\nMOV RBP,qword ptr [RSP + 0x20]\nMOV R15,qword ptr [RSP + 0x68]\nMOV R13,qword ptr [RSP + 0x28]\nMOV RAX,qword ptr [0x168 + RSP]\nOR RAX,qword ptr [0x160 + RSP]\nOR RAX,qword ptr [0x180 + RSP]\nJZ 0x0041489d\nMOV dword ptr [RSP + 0x50],0xffffffff\nCMP qword ptr [0x170 + RSP],0x0\nJZ 0x004148b3\nMOV EAX,dword ptr [0xc4 + RSP]\nMOV dword ptr [RSP + 0x50],EAX\nMOV RAX,qword ptr [RSP + 0x60]\nMOV qword ptr [0xa0 + RSP],RAX\nMOVUPS XMM0,xmmword ptr [RSP + 0x30]\nMOVUPS XMM1,xmmword ptr [RSP + 0x40]\nMOVUPS XMM2,xmmword ptr [RSP + 0x50]\nMOVAPS xmmword ptr [0x90 + RSP],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM0\nLEA RBX,[RSP + 0x30]\nMOV RDI,RBX\nCALL 0x0041a6d0\nMOV R14,RAX\nLEA RDI,[RSP + 0x70]\nMOV RSI,RBX\nMOV RDX,R14\nCALL 0x00414d50\nTEST AL,AL\nJZ 0x00414b3c\nCMP qword ptr [0x168 + RSP],0x0\nJZ 0x004149ac\nMOV RAX,qword ptr [0x160 + RSP]\nTEST RAX,RAX\nJNZ 0x004149ac\nMOV ECX,dword ptr [0xc0 + RSP]\nMOV EDX,dword ptr [RSP + 0x48]\nLEA EAX,[RCX + 0x7]\nSUB EAX,EDX\nCDQE\nIMUL RSI,RAX,-0x6db6db6d\nSHR RSI,0x20\nADD ESI,EAX\nMOV EDI,ESI\nSHR EDI,0x1f\nSAR ESI,0x2\nADD ESI,EDI\nLEA EDI,[RSI*0x8]\nSUB EDI,ESI\nSUB EAX,EDI\nMOV RSI,qword ptr [0xb8 + RSP]\nTEST RSI,RSI\nSETG BL\nCMP ECX,EDX\nSETNZ CL\nAND CL,BL\nMOVZX ECX,CL\nSUB ESI,ECX\nLEA ECX,[RSI*0x8]\nSUB ECX,ESI\nADD EAX,dword ptr [RSP + 0x3c]\nADD EAX,ECX\nMOV dword ptr [RSP + 0x3c],EAX\nMOV dword ptr [RSP + 0x50],0xffffffff\nLEA RDI,[RSP + 0x30]\nCALL 0x0041a6d0\nMOV R14,RAX\nCMP R14,-0x1\nJZ 0x00414bd9\nMOV RSI,qword ptr [0x120 + RSP]\nMOV RAX,qword ptr [0x128 + RSP]\nMOV RDX,RAX\nOR RDX,RSI\nMOV RCX,qword ptr [0x130 + RSP]\nOR RDX,RCX\nJZ 0x00414a69\nMOV EDX,dword ptr [RSP + 0x44]\nLEA R8D,[RSI + RDX*0x1]\nMOV R11D,dword ptr [RSP + 0x3c]\nMOV EDI,dword ptr [RSP + 0x40]\nLEA R9D,[RAX + RDI*0x1]\nLEA R10D,[RCX + R11*0x1]\nXOR EBX,EBX\nCMP R8D,EDX\nSETL BL\nSHR RSI,0x3f\nXOR ESI,EBX\nXOR EDX,EDX\nCMP R9D,EDI\nSETL DL\nSHR RAX,0x3f\nXOR EAX,EDX\nOR EAX,ESI\nXOR EDX,EDX\nCMP R10D,R11D\nSETL DL\nSHR RCX,0x3f\nXOR ECX,EDX\nOR ECX,EAX\nJNZ 0x00414bd9\nMOV dword ptr [RSP + 0x44],R8D\nMOV dword ptr [RSP + 0x40],R9D\nMOV dword ptr [RSP + 0x3c],R10D\nMOV EAX,dword ptr [RSP + 0x78]\nMOV dword ptr [RSP + 0x38],EAX\nMOV EAX,dword ptr [RSP + 0x74]\nMOV dword ptr [RSP + 0x34],EAX\nMOV EAX,dword ptr [RSP + 0x70]\nMOV dword ptr [RSP + 0x30],EAX\nMOV EAX,dword ptr [0x90 + RSP]\nMOV dword ptr [RSP + 0x50],EAX\nLEA RDI,[RSP + 0x30]\nCALL 0x0041a6d0\nMOV R14,RAX\nCMP R14,-0x1\nJZ 0x00414bd9\nCMP qword ptr [0x188 + RSP],0x0\nJZ 0x00414a88\nIMUL RAX,qword ptr [0xc8 + RSP],-0x3c\nADD RAX,R14\nADD RAX,qword ptr [RSP + 0x58]\nMOV R14,RAX\nMOV RSI,qword ptr [0x150 + RSP]\nADD RSI,qword ptr [0x118 + RSP]\nMOV RDI,0x112e0be826d694b3\nMOV RAX,RSI\nIMUL RDI\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0x1a\nADD RDX,RAX\nIMUL RAX,RDX,0x3b9aca00\nMOV RCX,RSI\nSUB RCX,RAX\nADD RCX,0x3b9aca00\nMOV RAX,RCX\nIMUL RDI\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0x1a\nADD RDX,RAX\nIMUL RAX,RDX,0x3b9aca00\nSUB RCX,RAX\nSUB RSI,RCX\nMOV RAX,RSI\nIMUL RDI\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0x1a\nADD RDX,RAX\nIMUL RAX,qword ptr [0x138 + RSP],0xe10\nADD RAX,R14\nIMUL RSI,qword ptr [0x140 + RSP],0x3c\nADD RSI,RAX\nADD RSI,qword ptr [0x148 + RSP]\nADD RSI,RDX\nMOV qword ptr [R15],RSI\nMOV qword ptr [R15 + 0x8],RCX\nMOV BL,0x1\nTEST R13B,R13B\nJNZ 0x00414643\nJMP 0x00414668\nCMP qword ptr [0x188 + RSP],0x0\nJZ 0x00414bd9\nMOV R14,qword ptr [0xc8 + RSP]\nMOV RBX,R14\nNEG RBX\nCMOVL RBX,R14\nMOV RCX,-0x7777777777777777\nMOV RAX,RBX\nIMUL RCX\nADD RDX,RBX\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0x5\nLEA R12,[RDX + RAX*0x1]\nADD EDX,EAX\nIMUL EAX,EDX,0x3c\nSUB EBX,EAX\nTEST R13B,R13B\nJNZ 0x00414b9b\nLEA RDI,[0x1f0 + RSP]\nCALL 0x00414c60\nMOV RBP,RAX\nSHR R14,0x3f\nLEA RDX,[0x41e869 + R14]\nLEA R14,[0x1d0 + RSP]\nMOV ESI,0x424286\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,R12\nMOV R8D,EBX\nCALL 0x00402ec0\nMOV EDI,0x424283\nMOV EDX,0x1\nMOV RSI,R14\nCALL 0x004028a0\nTEST EAX,EAX\nJZ 0x00414be9\nXOR EBX,EBX\nTEST R13B,R13B\nJNZ 0x00414643\nJMP 0x00414668\nMOV RAX,qword ptr [0xa0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOVAPS XMM0,xmmword ptr [RSP + 0x70]\nMOVAPS XMM1,xmmword ptr [0x80 + RSP]\nMOVAPS XMM2,xmmword ptr [0x90 + RSP]\nMOVAPS xmmword ptr [RSP + 0x50],XMM2\nMOVAPS xmmword ptr [RSP + 0x40],XMM1\nMOVAPS xmmword ptr [RSP + 0x30],XMM0\nLEA RBX,[RSP + 0x30]\nMOV RDI,RBX\nCALL 0x0041a6d0\nMOV R14,RAX\nLEA RDI,[RSP + 0x70]\nMOV RSI,RBX\nMOV RDX,R14\nCALL 0x00414d50\nTEST AL,AL\nJZ 0x00414c55\nMOV R13B,0x1\nCMP qword ptr [0x168 + RSP],0x0\nJNZ 0x0041491b\nJMP 0x004149ac\nXOR EBX,EBX\nJMP 0x00414643\n'
p1530
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 58 02 00 00\n48 89 d5\n48 89 f3\n49 89 fd\n48 85 ed\n75 10\n48 8d ac 24 c0 01 00 00\n48 89 ef\ne8 11 78 00 00\n4c 8b 7d 00\n4c 8b 75 08\n48 89 ef\ne8 a1 e3 fe ff\n49 89 c4\n4d 85 e4\n0f 84 ae 01 00 00\n4c 89 6c 24 68\n48 83 c3 03\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 7b fd\ne8 57 76 00 00\n48 ff c3\n84 c0\n75 f0\n4c 8d 6b fc\nbe 7e 42 42 00\nba 04 00 00 00\n4c 89 ef\ne8 aa e3 fe ff\n85 c0\n0f 84 72 01 00 00\n31 c0\n48 89 44 24 20\n31 c0\n48 89 44 24 28\n41 80 7d 00 00\nb8 be cd 41 00\n49 0f 45 c5\n48 89 84 24 b0 00 00 00\n49 63 44 24 14\n4c 8d ac 24 d8 00 00 00\n48 05 6c 07 00 00\n48 89 84 24 e0 00 00 00\n48 c7 84 24 e8 00 00 00 00 00 00 00\n49 63 44 24 10\n48 ff c0\n48 89 84 24 f0 00 00 00\n49 63 44 24 0c\n48 89 84 24 f8 00 00 00\n49 63 44 24 08\n48 89 84 24 00 01 00 00\n49 63 44 24 04\n48 89 84 24 08 01 00 00\n49 63 04 24\n48 89 84 24 10 01 00 00\n4c 89 b4 24 18 01 00 00\n41 8b 44 24 20\n89 44 24 50\nc7 84 24 d0 00 00 00 02 00 00 00\n0f 57 c0\n0f 11 84 24 4a 01 00 00\n0f 11 84 24 40 01 00 00\n0f 11 84 24 30 01 00 00\n0f 11 84 24 20 01 00 00\n0f 11 84 24 80 01 00 00\n0f 11 84 24 70 01 00 00\n0f 11 84 24 60 01 00 00\n49 8b 44 24 30\n48 89 84 24 90 01 00 00\nc7 84 24 98 01 00 00 0d 01 00 00\n41 8b 44 24 20\n89 84 24 9c 01 00 00\n48 c7 84 24 a0 01 00 00 00 00 00 00\n49 81 c7 00 a7 76 00\nbd 01 00 00 00\n48 8d 5c 24 70\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 7c 24 70\n48 89 df\ne8 13 e2 fe ff\n48 85 c0\n74 15\n48 8b 48 30\n48 85 c9\n74 0c\n8b 40 20\n3b 84 24 9c 01 00 00\n75 5f\n48 ff c5\n49 81 c7 00 a7 76 00\n48 83 fd 04\n7c c9\neb 73\n31 c0\ne9 22 01 00 00\nbd 01 00 00 00\n48 89 d8\neb 0c\n48 ff c0\n48 ff c5\n0f b6 08\n80 f9 5c\n74 12\n84 c9\n0f 84 68 fe ff ff\n80 f9 22\n75 e5\ne9 fa 01 00 00\n0f b6 48 01\n48 ff c0\n80 f9 22\n74 d4\n80 f9 5c\n74 cf\ne9 48 fe ff ff\n48 89 8c 24 a0 01 00 00\nc7 84 24 a8 01 00 00 0d 01 00 00\n89 84 24 ac 01 00 00\n48 c7 84 24 b0 01 00 00 00 00 00 00\n48 8b bc 24 90 01 00 00\n48 85 ff\n74 2d\n48 8b b4 24 a0 01 00 00\n48 85 f6\n74 20\ne8 55 e5 fe ff\n85 c0\n75 17\nc7 84 24 9c 01 00 00 ff ff ff ff\n48 c7 84 24 a0 01 00 00 00 00 00 00\n48 8d bc 24 b0 00 00 00\ne8 7d ec ff ff\n85 c0\n74 04\n31 db\neb 19\n80 bc 24 58 01 00 00 00\n74 6f\n41 0f 10 45 38\n48 8b 44 24 68\n0f 11 00\nb3 01\n48 8b 6c 24 20\n4c 8b 6c 24 28\n45 84 ed\n74 25\nbf 83 42 42 00\n48 85 ed\n74 0f\nba 01 00 00 00\n48 89 ee\ne8 46 e2 fe ff\neb 05\ne8 df e7 fe ff\n85 c0\n0f 94 c0\n20 c3\n48 8d 84 24 f0 01 00 00\n48 39 c5\n74 08\n48 89 ef\ne8 93 e0 fe ff\n84 db\n0f 95 c0\n48 81 c4 58 02 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 84 24 60 01 00 00\n48 8b 8c 24 88 01 00 00\n48 0b 84 24 80 01 00 00\n48 0b 84 24 68 01 00 00\n48 0b 84 24 78 01 00 00\n48 03 8c 24 70 01 00 00\n48 09 c1\n48 83 f9 01\n0f 87 46 ff ff ff\n49 8b 45 10\n48 89 44 24 10\n41 0f 10 45 00\n0f 11 04 24\ne8 d8 05 00 00\n05 94 f8 ff ff\n89 44 24 44\nb8 94 f8 ff ff\n03 84 24 f0 00 00 00\n05 6b 07 00 00\n89 44 24 40\n8b 84 24 f8 00 00 00\n89 44 24 3c\n48 83 bc 24 80 01 00 00 00\n75 24\n80 bc 24 59 01 00 00 00\n0f 84 1e 01 00 00\n48 8b 84 24 68 01 00 00\n48 0b 84 24 60 01 00 00\n0f 85 08 01 00 00\n48 8b bc 24 00 01 00 00\n8b b4 24 d0 00 00 00\ne8 9c 05 00 00\n89 44 24 38\n85 c0\n48 8b 6c 24 20\n4c 8b 7c 24 68\n4c 8b 6c 24 28\n0f 88 6a 04 00 00\n8b 84 24 08 01 00 00\n89 44 24 34\n8b 84 24 10 01 00 00\n89 44 24 30\ne9 f1 00 00 00\n48 8d bc 24 f0 01 00 00\ne8 c9 04 00 00\n49 89 c5\n48 83 fd 65\n72 0a\n48 89 ef\ne8 78 2a 00 00\neb 08\n48 8d 84 24 b0 00 00 00\n4c 89 6c 24 20\n8a 0b\n48 89 c6\n80 f9 22\n75 0f\n49 89 dd\neb 2d\n31 d2\n80 f9 5c\n0f 94 c2\n0f b6 0c 13\n88 0e\n48 ff c6\n4c 8d 6c 13 01\n0f b6 4c 13 01\n80 f9 22\n4c 89 eb\n75 dd\nc6 06 00\nbf 83 42 42 00\nba 01 00 00 00\n48 89 c3\n48 89 de\ne8 95 e0 fe ff\n48 83 fd 65\n72 0c\n48 89 df\n89 c3\ne8 f5 de fe ff\n89 d8\n85 c0\n74 0f\n31 db\n48 8b 6c 24 20\ne9 3b fe ff ff\n41 0f b6 7d 01\n49 ff c5\ne8 e3 71 00 00\n84 c0\n75 ef\nb0 01\ne9 af fb ff ff\nc7 44 24 30 00 00 00 00\nc7 44 24 34 00 00 00 00\nc7 44 24 38 00 00 00 00\n48 c7 84 24 18 01 00 00 00 00 00 00\n48 8b 6c 24 20\n4c 8b 7c 24 68\n4c 8b 6c 24 28\n48 8b 84 24 68 01 00 00\n48 0b 84 24 60 01 00 00\n48 0b 84 24 80 01 00 00\n74 08\nc7 44 24 50 ff ff ff ff\n48 83 bc 24 70 01 00 00 00\n74 0b\n8b 84 24 c4 00 00 00\n89 44 24 50\n48 8b 44 24 60\n48 89 84 24 a0 00 00 00\n0f 10 44 24 30\n0f 10 4c 24 40\n0f 10 54 24 50\n0f 29 94 24 90 00 00 00\n0f 29 8c 24 80 00 00 00\n0f 29 44 24 70\n48 8d 5c 24 30\n48 89 df\ne8 df 5d 00 00\n49 89 c6\n48 8d 7c 24 70\n48 89 de\n4c 89 f2\ne8 4c 04 00 00\n84 c0\n0f 84 30 02 00 00\n48 83 bc 24 68 01 00 00 00\n0f 84 91 00 00 00\n48 8b 84 24 60 01 00 00\n48 85 c0\n0f 85 80 00 00 00\n8b 8c 24 c0 00 00 00\n8b 54 24 48\n8d 41 07\n29 d0\n48 98\n48 69 f0 93 24 49 92\n48 c1 ee 20\n01 c6\n89 f7\nc1 ef 1f\nc1 fe 02\n01 fe\n8d 3c f5 00 00 00 00\n29 f7\n29 f8\n48 8b b4 24 b8 00 00 00\n48 85 f6\n0f 9f c3\n39 d1\n0f 95 c1\n20 d9\n0f b6 c9\n29 ce\n8d 0c f5 00 00 00 00\n29 f1\n03 44 24 3c\n01 c8\n89 44 24 3c\nc7 44 24 50 ff ff ff ff\n48 8d 7c 24 30\ne8 31 5d 00 00\n49 89 c6\n49 83 fe ff\n0f 84 2d 02 00 00\n48 8b b4 24 20 01 00 00\n48 8b 84 24 28 01 00 00\n48 89 c2\n48 09 f2\n48 8b 8c 24 30 01 00 00\n48 09 ca\n0f 84 96 00 00 00\n8b 54 24 44\n44 8d 04 16\n44 8b 5c 24 3c\n8b 7c 24 40\n44 8d 0c 38\n46 8d 14 19\n31 db\n41 39 d0\n0f 9c c3\n48 c1 ee 3f\n31 de\n31 d2\n41 39 f9\n0f 9c c2\n48 c1 e8 3f\n31 d0\n09 f0\n31 d2\n45 39 da\n0f 9c c2\n48 c1 e9 3f\n31 d1\n09 c1\n0f 85 b9 01 00 00\n44 89 44 24 44\n44 89 4c 24 40\n44 89 54 24 3c\n8b 44 24 78\n89 44 24 38\n8b 44 24 74\n89 44 24 34\n8b 44 24 70\n89 44 24 30\n8b 84 24 90 00 00 00\n89 44 24 50\n48 8d 7c 24 30\ne8 74 5c 00 00\n49 89 c6\n49 83 fe ff\n0f 84 70 01 00 00\n48 83 bc 24 88 01 00 00 00\n74 14\n48 6b 84 24 c8 00 00 00 c4\n4c 01 f0\n48 03 44 24 58\n49 89 c6\n48 8b b4 24 50 01 00 00\n48 03 b4 24 18 01 00 00\n48 bf b3 94 d6 26 e8 0b 2e 11\n48 89 f0\n48 f7 ef\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 1a\n48 01 c2\n48 69 c2 00 ca 9a 3b\n48 89 f1\n48 29 c1\n48 81 c1 00 ca 9a 3b\n48 89 c8\n48 f7 ef\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 1a\n48 01 c2\n48 69 c2 00 ca 9a 3b\n48 29 c1\n48 29 ce\n48 89 f0\n48 f7 ef\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 1a\n48 01 c2\n48 69 84 24 38 01 00 00 10 0e 00 00\n4c 01 f0\n48 6b b4 24 40 01 00 00 3c\n48 01 c6\n48 03 b4 24 48 01 00 00\n48 01 d6\n49 89 37\n49 89 4f 08\nb3 01\n45 84 ed\n0f 85 0c fb ff ff\ne9 2c fb ff ff\n48 83 bc 24 88 01 00 00 00\n0f 84 8e 00 00 00\n4c 8b b4 24 c8 00 00 00\n4c 89 f3\n48 f7 db\n49 0f 4c de\n48 b9 89 88 88 88 88 88 88 88\n48 89 d8\n48 f7 e9\n48 01 da\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 05\n4c 8d 24 02\n01 c2\n6b c2 3c\n29 c3\n45 84 ed\n75 10\n48 8d bc 24 f0 01 00 00\ne8 c8 00 00 00\n48 89 c5\n49 c1 ee 3f\n49 8d 96 69 e8 41 00\n4c 8d b4 24 d0 01 00 00\nbe 86 42 42 00\n31 c0\n4c 89 f7\n4c 89 e1\n41 89 d8\ne8 fd e2 fe ff\nbf 83 42 42 00\nba 01 00 00 00\n4c 89 f6\ne8 cb dc fe ff\n85 c0\n74 10\n31 db\n45 84 ed\n0f 85 5f fa ff ff\ne9 7f fa ff ff\n48 8b 84 24 a0 00 00 00\n48 89 44 24 60\n0f 28 44 24 70\n0f 28 8c 24 80 00 00 00\n0f 28 94 24 90 00 00 00\n0f 29 54 24 50\n0f 29 4c 24 40\n0f 29 44 24 30\n48 8d 5c 24 30\n48 89 df\ne8 a9 5a 00 00\n49 89 c6\n48 8d 7c 24 70\n48 89 de\n4c 89 f2\ne8 16 01 00 00\n84 c0\n74 17\n41 b5 01\n48 83 bc 24 68 01 00 00 00\n0f 85 cb fc ff ff\ne9 57 fd ff ff\n31 db\ne9 e7 f9 ff ff\n'
p1531
S'.text:0000000000414360\n.text:0000000000414361\n.text:0000000000414363\n.text:0000000000414365\n.text:0000000000414367\n.text:0000000000414369\n.text:000000000041436a\n.text:0000000000414371\n.text:0000000000414374\n.text:0000000000414377\n.text:000000000041437a\n.text:000000000041437d\n.text:000000000041437f\n.text:0000000000414387\n.text:000000000041438a\n.text:000000000041438f\n.text:0000000000414393\n.text:0000000000414397\n.text:000000000041439a\n.text:000000000041439f\n.text:00000000004143a2\n.text:00000000004143a5\n.text:00000000004143ab\n.text:00000000004143b0\n.text:00000000004143b4\n.text:00000000004143c0\n.text:00000000004143c4\n.text:00000000004143c9\n.text:00000000004143cc\n.text:00000000004143ce\n.text:00000000004143d0\n.text:00000000004143d4\n.text:00000000004143d9\n.text:00000000004143de\n.text:00000000004143e1\n.text:00000000004143e6\n.text:00000000004143e8\n.text:00000000004143ee\n.text:00000000004143f0\n.text:00000000004143f5\n.text:00000000004143f7\n.text:00000000004143fc\n.text:0000000000414401\n.text:0000000000414406\n.text:000000000041440a\n.text:0000000000414412\n.text:0000000000414417\n.text:000000000041441f\n.text:0000000000414425\n.text:000000000041442d\n.text:0000000000414439\n.text:000000000041443e\n.text:0000000000414441\n.text:0000000000414449\n.text:000000000041444e\n.text:0000000000414456\n.text:000000000041445b\n.text:0000000000414463\n.text:0000000000414468\n.text:0000000000414470\n.text:0000000000414474\n.text:000000000041447c\n.text:0000000000414484\n.text:0000000000414489\n.text:000000000041448d\n.text:0000000000414498\n.text:000000000041449b\n.text:00000000004144a3\n.text:00000000004144ab\n.text:00000000004144b3\n.text:00000000004144bb\n.text:00000000004144c3\n.text:00000000004144cb\n.text:00000000004144d3\n.text:00000000004144d8\n.text:00000000004144e0\n.text:00000000004144eb\n.text:00000000004144f0\n.text:00000000004144f7\n.text:0000000000414503\n.text:000000000041450a\n.text:000000000041450f\n.text:0000000000414514\n.text:0000000000414520\n.text:0000000000414525\n.text:0000000000414528\n.text:000000000041452d\n.text:0000000000414530\n.text:0000000000414532\n.text:0000000000414536\n.text:0000000000414539\n.text:000000000041453b\n.text:000000000041453e\n.text:0000000000414545\n.text:0000000000414547\n.text:000000000041454a\n.text:0000000000414551\n.text:0000000000414555\n.text:0000000000414557\n.text:0000000000414559\n.text:000000000041455b\n.text:0000000000414560\n.text:0000000000414565\n.text:0000000000414568\n.text:0000000000414570\n.text:0000000000414573\n.text:0000000000414576\n.text:0000000000414579\n.text:000000000041457c\n.text:000000000041457e\n.text:0000000000414580\n.text:0000000000414586\n.text:0000000000414589\n.text:000000000041458b\n.text:0000000000414590\n.text:0000000000414594\n.text:0000000000414597\n.text:000000000041459a\n.text:000000000041459c\n.text:000000000041459f\n.text:00000000004145a1\n.text:00000000004145a6\n.text:00000000004145ae\n.text:00000000004145b9\n.text:00000000004145c0\n.text:00000000004145cc\n.text:00000000004145d4\n.text:00000000004145d7\n.text:00000000004145d9\n.text:00000000004145e1\n.text:00000000004145e4\n.text:00000000004145e6\n.text:00000000004145eb\n.text:00000000004145ed\n.text:00000000004145ef\n.text:00000000004145fa\n.text:0000000000414606\n.text:000000000041460e\n.text:0000000000414613\n.text:0000000000414615\n.text:0000000000414617\n.text:0000000000414619\n.text:000000000041461b\n.text:0000000000414623\n.text:0000000000414625\n.text:000000000041462a\n.text:000000000041462f\n.text:0000000000414632\n.text:0000000000414634\n.text:0000000000414639\n.text:000000000041463e\n.text:0000000000414641\n.text:0000000000414643\n.text:0000000000414648\n.text:000000000041464b\n.text:000000000041464d\n.text:0000000000414652\n.text:0000000000414655\n.text:000000000041465a\n.text:000000000041465c\n.text:0000000000414661\n.text:0000000000414663\n.text:0000000000414666\n.text:0000000000414668\n.text:0000000000414670\n.text:0000000000414673\n.text:0000000000414675\n.text:0000000000414678\n.text:000000000041467d\n.text:000000000041467f\n.text:0000000000414682\n.text:0000000000414689\n.text:000000000041468a\n.text:000000000041468c\n.text:000000000041468e\n.text:0000000000414690\n.text:0000000000414692\n.text:0000000000414693\n.text:0000000000414694\n.text:000000000041469c\n.text:00000000004146a4\n.text:00000000004146ac\n.text:00000000004146b4\n.text:00000000004146bc\n.text:00000000004146c4\n.text:00000000004146c7\n.text:00000000004146cb\n.text:00000000004146d1\n.text:00000000004146d5\n.text:00000000004146da\n.text:00000000004146df\n.text:00000000004146e3\n.text:00000000004146e8\n.text:00000000004146ed\n.text:00000000004146f1\n.text:00000000004146f6\n.text:00000000004146fd\n.text:0000000000414702\n.text:0000000000414706\n.text:000000000041470d\n.text:0000000000414711\n.text:000000000041471a\n.text:000000000041471c\n.text:0000000000414724\n.text:000000000041472a\n.text:0000000000414732\n.text:000000000041473a\n.text:0000000000414740\n.text:0000000000414748\n.text:000000000041474f\n.text:0000000000414754\n.text:0000000000414758\n.text:000000000041475a\n.text:000000000041475f\n.text:0000000000414764\n.text:0000000000414769\n.text:000000000041476f\n.text:0000000000414776\n.text:000000000041477a\n.text:0000000000414781\n.text:0000000000414785\n.text:000000000041478a\n.text:0000000000414792\n.text:0000000000414797\n.text:000000000041479a\n.text:000000000041479e\n.text:00000000004147a0\n.text:00000000004147a3\n.text:00000000004147a8\n.text:00000000004147aa\n.text:00000000004147b2\n.text:00000000004147b7\n.text:00000000004147b9\n.text:00000000004147bc\n.text:00000000004147bf\n.text:00000000004147c1\n.text:00000000004147c4\n.text:00000000004147d0\n.text:00000000004147d2\n.text:00000000004147d5\n.text:00000000004147d8\n.text:00000000004147dc\n.text:00000000004147de\n.text:00000000004147e1\n.text:00000000004147e6\n.text:00000000004147eb\n.text:00000000004147ee\n.text:00000000004147f1\n.text:00000000004147f3\n.text:00000000004147f6\n.text:00000000004147fb\n.text:0000000000414800\n.text:0000000000414803\n.text:0000000000414806\n.text:000000000041480b\n.text:000000000041480f\n.text:0000000000414811\n.text:0000000000414814\n.text:0000000000414816\n.text:000000000041481b\n.text:000000000041481d\n.text:000000000041481f\n.text:0000000000414821\n.text:0000000000414823\n.text:0000000000414828\n.text:0000000000414830\n.text:0000000000414835\n.text:0000000000414838\n.text:000000000041483d\n.text:000000000041483f\n.text:0000000000414841\n.text:0000000000414843\n.text:0000000000414848\n.text:0000000000414850\n.text:0000000000414858\n.text:0000000000414860\n.text:000000000041486c\n.text:0000000000414871\n.text:0000000000414876\n.text:000000000041487b\n.text:0000000000414883\n.text:000000000041488b\n.text:0000000000414893\n.text:0000000000414895\n.text:000000000041489d\n.text:00000000004148a6\n.text:00000000004148a8\n.text:00000000004148af\n.text:00000000004148b3\n.text:00000000004148b8\n.text:00000000004148c0\n.text:00000000004148c5\n.text:00000000004148ca\n.text:00000000004148cf\n.text:00000000004148d7\n.text:00000000004148df\n.text:00000000004148e4\n.text:00000000004148e9\n.text:00000000004148ec\n.text:00000000004148f1\n.text:00000000004148f4\n.text:00000000004148f9\n.text:00000000004148fc\n.text:00000000004148ff\n.text:0000000000414904\n.text:0000000000414906\n.text:000000000041490c\n.text:0000000000414915\n.text:000000000041491b\n.text:0000000000414923\n.text:0000000000414926\n.text:000000000041492c\n.text:0000000000414933\n.text:0000000000414937\n.text:000000000041493a\n.text:000000000041493c\n.text:000000000041493e\n.text:0000000000414945\n.text:0000000000414949\n.text:000000000041494b\n.text:000000000041494d\n.text:0000000000414950\n.text:0000000000414953\n.text:0000000000414955\n.text:000000000041495c\n.text:000000000041495e\n.text:0000000000414960\n.text:0000000000414968\n.text:000000000041496b\n.text:000000000041496e\n.text:0000000000414970\n.text:0000000000414973\n.text:0000000000414975\n.text:0000000000414978\n.text:000000000041497a\n.text:0000000000414981\n.text:0000000000414983\n.text:0000000000414987\n.text:0000000000414989\n.text:000000000041498d\n.text:0000000000414995\n.text:000000000041499a\n.text:000000000041499f\n.text:00000000004149a2\n.text:00000000004149a6\n.text:00000000004149ac\n.text:00000000004149b4\n.text:00000000004149bc\n.text:00000000004149bf\n.text:00000000004149c2\n.text:00000000004149ca\n.text:00000000004149cd\n.text:00000000004149d3\n.text:00000000004149d7\n.text:00000000004149db\n.text:00000000004149e0\n.text:00000000004149e4\n.text:00000000004149e8\n.text:00000000004149ec\n.text:00000000004149ee\n.text:00000000004149f1\n.text:00000000004149f4\n.text:00000000004149f8\n.text:00000000004149fa\n.text:00000000004149fc\n.text:00000000004149ff\n.text:0000000000414a02\n.text:0000000000414a06\n.text:0000000000414a08\n.text:0000000000414a0a\n.text:0000000000414a0c\n.text:0000000000414a0f\n.text:0000000000414a12\n.text:0000000000414a16\n.text:0000000000414a18\n.text:0000000000414a1a\n.text:0000000000414a20\n.text:0000000000414a25\n.text:0000000000414a2a\n.text:0000000000414a2f\n.text:0000000000414a33\n.text:0000000000414a37\n.text:0000000000414a3b\n.text:0000000000414a3f\n.text:0000000000414a43\n.text:0000000000414a47\n.text:0000000000414a4e\n.text:0000000000414a52\n.text:0000000000414a57\n.text:0000000000414a5c\n.text:0000000000414a5f\n.text:0000000000414a63\n.text:0000000000414a69\n.text:0000000000414a72\n.text:0000000000414a74\n.text:0000000000414a7d\n.text:0000000000414a80\n.text:0000000000414a85\n.text:0000000000414a88\n.text:0000000000414a90\n.text:0000000000414a98\n.text:0000000000414aa2\n.text:0000000000414aa5\n.text:0000000000414aa8\n.text:0000000000414aab\n.text:0000000000414aaf\n.text:0000000000414ab3\n.text:0000000000414ab6\n.text:0000000000414abd\n.text:0000000000414ac0\n.text:0000000000414ac3\n.text:0000000000414aca\n.text:0000000000414acd\n.text:0000000000414ad0\n.text:0000000000414ad3\n.text:0000000000414ad7\n.text:0000000000414adb\n.text:0000000000414ade\n.text:0000000000414ae5\n.text:0000000000414ae8\n.text:0000000000414aeb\n.text:0000000000414aee\n.text:0000000000414af1\n.text:0000000000414af4\n.text:0000000000414af8\n.text:0000000000414afc\n.text:0000000000414aff\n.text:0000000000414b0b\n.text:0000000000414b0e\n.text:0000000000414b17\n.text:0000000000414b1a\n.text:0000000000414b22\n.text:0000000000414b25\n.text:0000000000414b28\n.text:0000000000414b2c\n.text:0000000000414b2e\n.text:0000000000414b31\n.text:0000000000414b37\n.text:0000000000414b3c\n.text:0000000000414b45\n.text:0000000000414b4b\n.text:0000000000414b53\n.text:0000000000414b56\n.text:0000000000414b59\n.text:0000000000414b5d\n.text:0000000000414b67\n.text:0000000000414b6a\n.text:0000000000414b6d\n.text:0000000000414b70\n.text:0000000000414b73\n.text:0000000000414b77\n.text:0000000000414b7b\n.text:0000000000414b7f\n.text:0000000000414b81\n.text:0000000000414b84\n.text:0000000000414b86\n.text:0000000000414b89\n.text:0000000000414b8b\n.text:0000000000414b93\n.text:0000000000414b98\n.text:0000000000414b9b\n.text:0000000000414b9f\n.text:0000000000414ba6\n.text:0000000000414bae\n.text:0000000000414bb3\n.text:0000000000414bb5\n.text:0000000000414bb8\n.text:0000000000414bbb\n.text:0000000000414bbe\n.text:0000000000414bc3\n.text:0000000000414bc8\n.text:0000000000414bcd\n.text:0000000000414bd0\n.text:0000000000414bd5\n.text:0000000000414bd7\n.text:0000000000414bd9\n.text:0000000000414bdb\n.text:0000000000414bde\n.text:0000000000414be4\n.text:0000000000414be9\n.text:0000000000414bf1\n.text:0000000000414bf6\n.text:0000000000414bfb\n.text:0000000000414c03\n.text:0000000000414c0b\n.text:0000000000414c10\n.text:0000000000414c15\n.text:0000000000414c1a\n.text:0000000000414c1f\n.text:0000000000414c22\n.text:0000000000414c27\n.text:0000000000414c2a\n.text:0000000000414c2f\n.text:0000000000414c32\n.text:0000000000414c35\n.text:0000000000414c3a\n.text:0000000000414c3c\n.text:0000000000414c3e\n.text:0000000000414c41\n.text:0000000000414c4a\n.text:0000000000414c50\n.text:0000000000414c55\n.text:0000000000414c57\n'
p1532
tp1533
sS'security_check_context'
p1534
(S'\n__stdcall security_check_context(security_context_t con)\n'
p1535
V\u000aint security_check_context(security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p1536
S'PUSH RAX\nCALL 0x00402770\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p1537
S'50\ne8 ea bb fe ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p1538
S'.text:0000000000416b80\n.text:0000000000416b81\n.text:0000000000416b86\n.text:0000000000416b8c\n.text:0000000000416b91\n.text:0000000000416b92\n'
p1539
tp1540
sS'apply_predicate'
p1541
(S'\n__stdcall apply_predicate(char * pathname, stat * stat_buf, predicate * p)\n'
p1542
V\u000a_Bool apply_predicate(char *pathname,stat *stat_buf,predicate *p)\u000a\u000a{\u000a  ulong *puVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  (p->perf).visits = (p->perf).visits + 1;\u000a  if (((((p->need_stat == false) && (p->need_type == false)) && (p->need_inum == false)) ||\u000a      (iVar3 = get_info(pathname,stat_buf,p), iVar3 == 0)) &&\u000a     (_Var2 = (*p->pred_func)(pathname,stat_buf,p), _Var2 != false)) {\u000a    puVar1 = &(p->perf).successes;\u000a    *puVar1 = *puVar1 + 1;\u000a    return true;\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1543
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV RBX,RDX\nMOV R14,RSI\nMOV R15,RDI\nINC qword ptr [0x120 + RBX]\nCMP byte ptr [RBX + 0x1a],0x0\nJNZ 0x004088c7\nCMP byte ptr [RBX + 0x1b],0x0\nJNZ 0x004088c7\nCMP byte ptr [RBX + 0x1c],0x0\nJZ 0x004088d9\nMOV RDI,R15\nMOV RSI,R14\nMOV RDX,RBX\nCALL 0x00407ad0\nTEST EAX,EAX\nJNZ 0x004088f3\nMOV RDI,R15\nMOV RSI,R14\nMOV RDX,RBX\nCALL qword ptr [RBX]\nTEST AL,AL\nJZ 0x004088f3\nINC qword ptr [0x128 + RBX]\nMOV AL,0x1\nJMP 0x004088f5\nXOR EAX,EAX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1544
S'41 57\n41 56\n53\n48 89 d3\n49 89 f6\n49 89 ff\n48 ff 83 20 01 00 00\n80 7b 1a 00\n75 0c\n80 7b 1b 00\n75 06\n80 7b 1c 00\n74 12\n4c 89 ff\n4c 89 f6\n48 89 da\ne8 fb f1 ff ff\n85 c0\n75 1a\n4c 89 ff\n4c 89 f6\n48 89 da\nff 13\n84 c0\n74 0b\n48 ff 83 28 01 00 00\nb0 01\neb 02\n31 c0\n5b\n41 5e\n41 5f\nc3\n'
p1545
S'.text:00000000004088a0\n.text:00000000004088a2\n.text:00000000004088a4\n.text:00000000004088a5\n.text:00000000004088a8\n.text:00000000004088ab\n.text:00000000004088ae\n.text:00000000004088b5\n.text:00000000004088b9\n.text:00000000004088bb\n.text:00000000004088bf\n.text:00000000004088c1\n.text:00000000004088c5\n.text:00000000004088c7\n.text:00000000004088ca\n.text:00000000004088cd\n.text:00000000004088d0\n.text:00000000004088d5\n.text:00000000004088d7\n.text:00000000004088d9\n.text:00000000004088dc\n.text:00000000004088df\n.text:00000000004088e2\n.text:00000000004088e4\n.text:00000000004088e6\n.text:00000000004088e8\n.text:00000000004088ef\n.text:00000000004088f1\n.text:00000000004088f3\n.text:00000000004088f5\n.text:00000000004088f6\n.text:00000000004088f8\n.text:00000000004088fa\n'
p1546
tp1547
sS'display_findutils_version'
p1548
(S'\n__stdcall display_findutils_version(char * official_name)\n'
p1549
V\u000avoid display_findutils_version(char *official_name)\u000a\u000a{\u000a  char *version;\u000a  FILE *stream;\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  undefined8 uVar3;\u000a  \u000a  rpl_fflush(stderr);\u000a  stream = stdout;\u000a  version = version_string;\u000a  uVar1 = dcgettext(0,"Eric B. Decker",5);\u000a  uVar2 = dcgettext(0,"James Youngman",5);\u000a  uVar3 = dcgettext(0,"Kevin Dalley",5);\u000a  version_etc(stream,official_name,"GNU findutils",version,uVar1,uVar2,uVar3,0);\u000a  return;\u000a}\u000a\u000a
p1550
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV RDI,qword ptr [0x0062de60]\nCALL 0x00417fa0\nMOV R12,qword ptr [0x0062de28]\nMOV R15,qword ptr [0x0062dca0]\nXOR EDI,EDI\nMOV ESI,0x422127\nMOV EDX,0x5\nCALL 0x00402910\nMOV R13,RAX\nXOR EDI,EDI\nMOV ESI,0x422136\nMOV EDX,0x5\nCALL 0x00402910\nMOV RBP,RAX\nXOR EDI,EDI\nMOV ESI,0x422145\nMOV EDX,0x5\nCALL 0x00402910\nMOV RBX,RAX\nMOV EDX,0x422119\nMOV EAX,0x0\nMOV RDI,R12\nMOV RSI,R14\nMOV RCX,R15\nMOV R8,R13\nMOV R9,RBP\nPUSH 0x0\nPUSH RBX\nCALL 0x00417100\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1551
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 fe\n48 8b 3d ab f1 21 00\ne8 e6 92 00 00\n4c 8b 25 67 f1 21 00\n4c 8b 3d d8 ef 21 00\n31 ff\nbe 27 21 42 00\nba 05 00 00 00\ne8 37 3c ff ff\n49 89 c5\n31 ff\nbe 36 21 42 00\nba 05 00 00 00\ne8 23 3c ff ff\n48 89 c5\n31 ff\nbe 45 21 42 00\nba 05 00 00 00\ne8 0f 3c ff ff\n48 89 c3\nba 19 21 42 00\nb8 00 00 00 00\n4c 89 e7\n4c 89 f6\n4c 89 f9\n4d 89 e8\n49 89 e9\n6a 00\n53\ne8 db 83 00 00\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1552
S'.text:000000000040eca0\n.text:000000000040eca1\n.text:000000000040eca3\n.text:000000000040eca5\n.text:000000000040eca7\n.text:000000000040eca9\n.text:000000000040ecaa\n.text:000000000040ecab\n.text:000000000040ecae\n.text:000000000040ecb5\n.text:000000000040ecba\n.text:000000000040ecc1\n.text:000000000040ecc8\n.text:000000000040ecca\n.text:000000000040eccf\n.text:000000000040ecd4\n.text:000000000040ecd9\n.text:000000000040ecdc\n.text:000000000040ecde\n.text:000000000040ece3\n.text:000000000040ece8\n.text:000000000040eced\n.text:000000000040ecf0\n.text:000000000040ecf2\n.text:000000000040ecf7\n.text:000000000040ecfc\n.text:000000000040ed01\n.text:000000000040ed04\n.text:000000000040ed09\n.text:000000000040ed0e\n.text:000000000040ed11\n.text:000000000040ed14\n.text:000000000040ed17\n.text:000000000040ed1a\n.text:000000000040ed1d\n.text:000000000040ed1f\n.text:000000000040ed20\n.text:000000000040ed25\n.text:000000000040ed29\n.text:000000000040ed2a\n.text:000000000040ed2c\n.text:000000000040ed2e\n.text:000000000040ed30\n.text:000000000040ed32\n.text:000000000040ed33\n'
p1553
tp1554
sS'quote_n_mem'
p1555
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p1556
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p1557
S'MOV ECX,0x62ddc8\nJMP 0x004160a0\n'
p1558
S'b9 c8 dd 62 00\ne9 36 fb ff ff\n'
p1559
S'.text:0000000000416560\n.text:0000000000416565\n'
p1560
tp1561
sS'xstrdup'
p1562
(S'\n__stdcall xstrdup(char * string)\n'
p1563
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p1564
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00402930\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00417360\n'
p1565
S'53\n48 89 fb\ne8 97 b5 fe ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p1566
S'.text:0000000000417390\n.text:0000000000417391\n.text:0000000000417394\n.text:0000000000417399\n.text:000000000041739d\n.text:00000000004173a0\n.text:00000000004173a1\n'
p1567
tp1568
sS'c_ispunct'
p1569
(S'\n__stdcall c_ispunct()\n'
p1570
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p1571
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x0041ba12\nMOV AL,0x1\nJMP qword ptr [0x425438 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p1572
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 38 54 42 00\nc3\n31 c0\nc3\n'
p1573
S'.text:000000000041ba00\n.text:000000000041ba03\n.text:000000000041ba06\n.text:000000000041ba08\n.text:000000000041ba0a\n.text:000000000041ba11\n.text:000000000041ba12\n.text:000000000041ba14\n'
p1574
tp1575
sS'complete_pending_execs'
p1576
(S'\n__stdcall complete_pending_execs(predicate * p)\n'
p1577
V\u000avoid complete_pending_execs(predicate *p)\u000a\u000a{\u000a  if (p != (predicate *)0x0) {\u000a    do {\u000a      complete_pending_execs(p->pred_left);\u000a      if (((p->pred_func == pred_exec) && (p->args[0] != 0)) && (*(int *)(p->args + 0x98) != 0)) {\u000a        bc_do_exec((buildcmd_control *)(p->args + 8),(buildcmd_state *)(p->args + 0x60));\u000a      }\u000a      p = p->pred_right;\u000a    } while (p != (predicate *)0x0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1578
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00407d4d\nMOV R14D,0x404030\nJMP 0x00407d30\nCMP byte ptr [RBX + 0x38],0x0\nJZ 0x00407d41\nCMP dword ptr [0xd0 + RBX],0x0\nJZ 0x00407d41\nLEA RSI,[0x98 + RBX]\nLEA RDI,[RBX + 0x40]\nCALL 0x0040def0\nJMP 0x00407d41\nMOV RDI,qword ptr [0x110 + RBX]\nCALL 0x00407ce0\nCMP qword ptr [RBX],R14\nJZ 0x00407d00\nMOV RBX,qword ptr [0x118 + RBX]\nTEST RBX,RBX\nJNZ 0x00407d30\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1579
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 61\n41 be 30 40 40 00\neb 3c\n80 7b 38 00\n74 3b\n83 bb d0 00 00 00 00\n74 32\n48 8d b3 98 00 00 00\n48 8d 7b 40\ne8 d1 61 00 00\neb 20\n48 8b bb 10 01 00 00\ne8 a4 ff ff ff\n4c 39 33\n74 bf\n48 8b 9b 18 01 00 00\n48 85 db\n75 e3\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1580
S'.text:0000000000407ce0\n.text:0000000000407ce2\n.text:0000000000407ce3\n.text:0000000000407ce4\n.text:0000000000407ce7\n.text:0000000000407cea\n.text:0000000000407cec\n.text:0000000000407cf2\n.text:0000000000407d00\n.text:0000000000407d04\n.text:0000000000407d06\n.text:0000000000407d0d\n.text:0000000000407d0f\n.text:0000000000407d16\n.text:0000000000407d1a\n.text:0000000000407d1f\n.text:0000000000407d30\n.text:0000000000407d37\n.text:0000000000407d3c\n.text:0000000000407d3f\n.text:0000000000407d41\n.text:0000000000407d48\n.text:0000000000407d4b\n.text:0000000000407d4d\n.text:0000000000407d51\n.text:0000000000407d52\n.text:0000000000407d54\n'
p1581
tp1582
sS'extendbuf'
p1583
(S'\n__stdcall extendbuf(void * existing, size_t wanted, size_t * allocated)\n'
p1584
V\u000avoid * extendbuf(void *existing,size_t wanted,size_t *allocated)\u000a\u000a{\u000a  int iVar1;\u000a  size_t current;\u000a  int *piVar2;\u000a  size_t __size;\u000a  \u000a  piVar2 = __errno_location();\u000a  if (wanted == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("wanted > 0u","extendbuf.c",0x47,"void *extendbuf(void *, size_t, size_t *)");\u000a  }\u000a  iVar1 = *piVar2;\u000a  current = *allocated;\u000a  __size = decide_size(current,wanted);\u000a  if (current == 0) {\u000a    if (existing != (void *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("NULL == existing","extendbuf.c",0x4f,\u000a                    "void *extendbuf(void *, size_t, size_t *)");\u000a    }\u000a    *allocated = __size;\u000a    existing = malloc(__size);\u000a  }\u000a  else {\u000a    if (__size != current) {\u000a      *allocated = __size;\u000a      existing = realloc(existing,__size);\u000a    }\u000a  }\u000a  if (existing == (void *)0x0) {\u000a    existing = (void *)0x0;\u000a  }\u000a  else {\u000a    *piVar2 = iVar1;\u000a  }\u000a  return existing;\u000a}\u000a\u000a
p1585
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDX\nMOV R13,RSI\nMOV R12,RDI\nCALL 0x00402770\nMOV R14,RAX\nTEST R13,R13\nJZ 0x0040e676\nMOV EBP,dword ptr [R14]\nMOV RBX,qword ptr [R15]\nMOV RDI,RBX\nMOV RSI,R13\nCALL 0x0040e6b0\nTEST RBX,RBX\nJZ 0x0040e644\nCMP RAX,RBX\nJZ 0x0040e657\nMOV qword ptr [R15],RAX\nMOV RDI,R12\nMOV RSI,RAX\nCALL 0x00402d30\nMOV R12,RAX\nTEST R12,R12\nJNZ 0x0040e65c\nJMP 0x0040e661\nTEST R12,R12\nJNZ 0x0040e68f\nMOV qword ptr [R15],RAX\nMOV RDI,RAX\nCALL 0x00402c60\nMOV R12,RAX\nTEST R12,R12\nJZ 0x0040e661\nMOV dword ptr [R14],EBP\nJMP 0x0040e664\nXOR R12D,R12D\nMOV RAX,R12\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x421fe0\nMOV ESI,0x421fec\nMOV EDX,0x47\nMOV ECX,0x421ff8\nCALL 0x00402a40\nMOV EDI,0x422022\nMOV ESI,0x421fec\nMOV EDX,0x4f\nMOV ECX,0x421ff8\nCALL 0x00402a40\n'
p1586
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d7\n49 89 f5\n49 89 fc\ne8 67 41 ff ff\n49 89 c6\n4d 85 ed\n74 65\n41 8b 2e\n49 8b 1f\n48 89 df\n4c 89 ee\ne8 8e 00 00 00\n48 85 db\n74 1d\n48 39 d8\n74 2b\n49 89 07\n4c 89 e7\n48 89 c6\ne8 f6 46 ff ff\n49 89 c4\n4d 85 e4\n75 1a\neb 1d\n4d 85 e4\n75 46\n49 89 07\n48 89 c7\ne8 0c 46 ff ff\n49 89 c4\n4d 85 e4\n74 05\n41 89 2e\neb 03\n45 31 e4\n4c 89 e0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf e0 1f 42 00\nbe ec 1f 42 00\nba 47 00 00 00\nb9 f8 1f 42 00\ne8 b1 43 ff ff\nbf 22 20 42 00\nbe ec 1f 42 00\nba 4f 00 00 00\nb9 f8 1f 42 00\ne8 98 43 ff ff\n'
p1587
S'.text:000000000040e5f0\n.text:000000000040e5f1\n.text:000000000040e5f3\n.text:000000000040e5f5\n.text:000000000040e5f7\n.text:000000000040e5f9\n.text:000000000040e5fa\n.text:000000000040e5fb\n.text:000000000040e5fe\n.text:000000000040e601\n.text:000000000040e604\n.text:000000000040e609\n.text:000000000040e60c\n.text:000000000040e60f\n.text:000000000040e611\n.text:000000000040e614\n.text:000000000040e617\n.text:000000000040e61a\n.text:000000000040e61d\n.text:000000000040e622\n.text:000000000040e625\n.text:000000000040e627\n.text:000000000040e62a\n.text:000000000040e62c\n.text:000000000040e62f\n.text:000000000040e632\n.text:000000000040e635\n.text:000000000040e63a\n.text:000000000040e63d\n.text:000000000040e640\n.text:000000000040e642\n.text:000000000040e644\n.text:000000000040e647\n.text:000000000040e649\n.text:000000000040e64c\n.text:000000000040e64f\n.text:000000000040e654\n.text:000000000040e657\n.text:000000000040e65a\n.text:000000000040e65c\n.text:000000000040e65f\n.text:000000000040e661\n.text:000000000040e664\n.text:000000000040e667\n.text:000000000040e66b\n.text:000000000040e66c\n.text:000000000040e66e\n.text:000000000040e670\n.text:000000000040e672\n.text:000000000040e674\n.text:000000000040e675\n.text:000000000040e676\n.text:000000000040e67b\n.text:000000000040e680\n.text:000000000040e685\n.text:000000000040e68a\n.text:000000000040e68f\n.text:000000000040e694\n.text:000000000040e699\n.text:000000000040e69e\n.text:000000000040e6a3\n'
p1588
tp1589
sS'parse_newer'
p1590
(S'\n__stdcall parse_newer(parser_table * entry, char * * argv, int * arg_ptr)\n'
p1591
V\u000a_Bool parse_newer(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  predicate *ppVar2;\u000a  float fVar3;\u000a  timespec tVar4;\u000a  char *local_b8;\u000a  stat local_b0;\u000a  \u000a  set_stat_placeholders(&local_b0);\u000a  _Var1 = collect_arg_stat_info(argv,arg_ptr,&local_b0,&local_b8);\u000a  if (_Var1 != false) {\u000a    ppVar2 = insert_primary(entry,local_b8);\u000a    tVar4 = get_stat_mtime(&local_b0);\u000a    *(long *)(ppVar2->args + 8) = SUB168((undefined  [16])tVar4,0);\u000a    *(long *)(ppVar2->args + 0x10) = SUB168((undefined  [16])tVar4 >> 0x40,0);\u000a    *(undefined8 *)ppVar2->args = 3;\u000a    fVar3 = estimate_timestamp_success_rate(local_b0.st_mtim.tv_sec);\u000a    ppVar2->est_success_rate = fVar3;\u000a  }\u000a  return (_Bool)(_Var1 != false);\u000a}\u000a\u000a
p1592
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,RDX\nMOV RBX,RSI\nMOV R14,RDI\nLEA R12,[RSP + 0x8]\nMOV RDI,R12\nCALL 0x004079d0\nMOV RCX,RSP\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,R12\nCALL 0x0040c9b0\nTEST AL,AL\nJZ 0x0040bc05\nMOV RSI,qword ptr [RSP]\nMOV RDI,R14\nCALL 0x00407730\nMOV RBX,RAX\nLEA RDI,[RSP + 0x8]\nCALL 0x00416c90\nMOV qword ptr [RBX + 0x40],RAX\nMOV qword ptr [RBX + 0x48],RDX\nMOV qword ptr [RBX + 0x38],0x3\nMOV RDI,qword ptr [RSP + 0x60]\nCALL 0x0040ade0\nMOVSS dword ptr [RBX + 0x24],XMM0\nMOV AL,0x1\nJMP 0x0040bc07\nXOR EAX,EAX\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p1593
S'41 57\n41 56\n41 54\n53\n48 81 ec 98 00 00 00\n49 89 d7\n48 89 f3\n49 89 fe\n4c 8d 64 24 08\n4c 89 e7\ne8 1c be ff ff\n48 89 e1\n48 89 df\n4c 89 fe\n4c 89 e2\ne8 eb 0d 00 00\n84 c0\n74 3c\n48 8b 34 24\n4c 89 f7\ne8 5b bb ff ff\n48 89 c3\n48 8d 7c 24 08\ne8 ae b0 00 00\n48 89 43 40\n48 89 53 48\n48 c7 43 38 03 00 00 00\n48 8b 7c 24 60\ne8 e4 f1 ff ff\nf3 0f 11 43 24\nb0 01\neb 02\n31 c0\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p1594
S'.text:000000000040bb90\n.text:000000000040bb92\n.text:000000000040bb94\n.text:000000000040bb96\n.text:000000000040bb97\n.text:000000000040bb9e\n.text:000000000040bba1\n.text:000000000040bba4\n.text:000000000040bba7\n.text:000000000040bbac\n.text:000000000040bbaf\n.text:000000000040bbb4\n.text:000000000040bbb7\n.text:000000000040bbba\n.text:000000000040bbbd\n.text:000000000040bbc0\n.text:000000000040bbc5\n.text:000000000040bbc7\n.text:000000000040bbc9\n.text:000000000040bbcd\n.text:000000000040bbd0\n.text:000000000040bbd5\n.text:000000000040bbd8\n.text:000000000040bbdd\n.text:000000000040bbe2\n.text:000000000040bbe6\n.text:000000000040bbea\n.text:000000000040bbf2\n.text:000000000040bbf7\n.text:000000000040bbfc\n.text:000000000040bc01\n.text:000000000040bc03\n.text:000000000040bc05\n.text:000000000040bc07\n.text:000000000040bc0e\n.text:000000000040bc0f\n.text:000000000040bc11\n.text:000000000040bc13\n.text:000000000040bc15\n'
p1595
tp1596
sS'strftime'
p1597
(S'\n__stdcall strftime(char * __s, size_t __maxsize, char * __format, tm * __tp)\n'
p1598
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strftime(char *__s,size_t __maxsize,char *__format,tm *__tp)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strftime_0062d358)();\u000a  return sVar1;\u000a}\u000a\u000a
p1599
S'JMP qword ptr [0x0062d358]\n'
p1600
S'ff 25 e2 a5 22 00\n'
p1601
S'.plt:0000000000402d70\n'
p1602
tp1603
sS'close_stdout_set_ignore_EPIPE'
p1604
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p1605
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p1606
S'MOV byte ptr [0x0062e658],DIL\nRET\n'
p1607
S'40 88 3d 01 e8 21 00\nc3\n'
p1608
S'.text:000000000040fe50\n.text:000000000040fe57\n'
p1609
tp1610
sS'iswprint'
p1611
(S'\n__stdcall iswprint(wint_t __wc)\n'
p1612
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_0062d438)();\u000a  return iVar1;\u000a}\u000a\u000a
p1613
S'JMP qword ptr [0x0062d438]\n'
p1614
S'ff 25 02 a5 22 00\n'
p1615
S'.plt:0000000000402f30\n'
p1616
tp1617
sS'c_isspace'
p1618
(S'\n__stdcall c_isspace()\n'
p1619
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1620
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x0041ba35\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1621
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1622
S'.text:000000000041ba20\n.text:000000000041ba23\n.text:000000000041ba26\n.text:000000000041ba28\n.text:000000000041ba2d\n.text:000000000041ba2f\n.text:000000000041ba31\n.text:000000000041ba34\n.text:000000000041ba35\n.text:000000000041ba37\n'
p1623
tp1624
sS'predlist_merge_sort'
p1625
(S'\n__stdcall predlist_merge_sort(predlist * list, predicate * * last)\n'
p1626
V\u000avoid predlist_merge_sort(predlist *list,predicate **last)\u000a\u000a{\u000a  predicate *beg_list;\u000a  predicate *ppVar1;\u000a  int iVar2;\u000a  predlist *ppVar3;\u000a  predlist new_list;\u000a  predlist local_40;\u000a  \u000a  if (list->head != (predicate *)0x0) {\u000a    if (((byte)options.debug_options & 8) != 0) {\u000a      fprintf((FILE *)stderr,"%s:\u005cn","predlist before merge sort");\u000a      print_tree(stderr,list->head);\u000a    }\u000a    calculate_derived_rates(list->head);\u000a    predlist_init(&local_40);\u000a    beg_list = list->head;\u000a    while (beg_list != (predicate *)0x0) {\u000a      list->head = beg_list->pred_left;\u000a      beg_list->pred_left = (predicate *)0x0;\u000a      ppVar3 = &local_40;\u000a      do {\u000a        ppVar1 = ppVar3->head;\u000a        if (ppVar1 == (predicate *)0x0) {\u000a          beg_list->pred_left = local_40.head;\u000a          local_40.head = beg_list;\u000a          if (local_40.tail == (predicate *)0x0) {\u000a            local_40.tail = beg_list;\u000a            local_40.head = beg_list;\u000a          }\u000a          goto LAB_004072e8;\u000a        }\u000a        iVar2 = pred_cost_compare(ppVar1->pred_right,beg_list->pred_right);\u000a        ppVar3 = (predlist *)&ppVar1->pred_left;\u000a      } while (iVar2 < 0);\u000a      ppVar1 = ppVar3->head;\u000a      beg_list->pred_left = ppVar1;\u000a      if (ppVar1 == (predicate *)0x0) {\u000a        local_40.tail = beg_list;\u000a      }\u000a      ppVar3->head = beg_list;\u000aLAB_004072e8:\u000a      beg_list = list->head;\u000a    }\u000a    if (((byte)options.debug_options & 8) != 0) {\u000a      fprintf((FILE *)stderr,"%s:\u005cn","predlist after merge sort");\u000a      print_tree(stderr,local_40.head);\u000a    }\u000a    beg_list = local_40.head;\u000a    calculate_derived_rates(local_40.head);\u000a    merge_pred(beg_list,local_40.tail,last);\u000a    predlist_init(list);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1627
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R14,RSI\nMOV R12,RDI\nCMP qword ptr [R12],0x0\nJZ 0x00407328\nTEST byte ptr [0x0062f080],0x8\nJNZ 0x00407337\nMOV RDI,qword ptr [R12]\nCALL 0x004058c0\nLEA R15,[RSP + 0x8]\nMOV RDI,R15\nCALL 0x00407050\nMOV RBX,qword ptr [R12]\nTEST RBX,RBX\nJZ 0x004072fa\nMOV R13,qword ptr [RSP + 0x10]\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RAX,qword ptr [0x110 + RBX]\nMOV qword ptr [R12],RAX\nMOV qword ptr [0x110 + RBX],0x0\nMOV RBP,R15\nNOP dword ptr [RAX]\nMOV RBP,qword ptr [RBP]\nTEST RBP,RBP\nJZ 0x004072d0\nXOR EDX,EDX\nCMP dword ptr [RBP + 0x14],0x2\nSETNZ DL\nMOV RDI,qword ptr [0x118 + RBP]\nMOV RSI,qword ptr [0x118 + RBX]\nCALL 0x004073a0\nADD RBP,0x110\nTEST EAX,EAX\nJS 0x00407280\nMOV RAX,qword ptr [RBP]\nMOV qword ptr [0x110 + RBX],RAX\nTEST RAX,RAX\nCMOVZ R13,RBX\nMOV qword ptr [RBP],RBX\nJMP 0x004072e8\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [0x110 + RBX],RAX\nMOV qword ptr [RSP + 0x8],RBX\nTEST R13,R13\nCMOVZ R13,RBX\nMOV RBX,qword ptr [R12]\nTEST RBX,RBX\nJNZ 0x00407260\nMOV qword ptr [RSP + 0x10],R13\nTEST byte ptr [0x0062f080],0x8\nJNZ 0x00407369\nMOV R15,qword ptr [RSP + 0x8]\nMOV RDI,R15\nCALL 0x004058c0\nMOV RSI,qword ptr [RSP + 0x10]\nMOV RDI,R15\nMOV RDX,R14\nCALL 0x004073f0\nMOV RDI,R12\nCALL 0x00407050\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RDI,qword ptr [0x0062de60]\nMOV ESI,0x41dc7b\nMOV EDX,0x41dc80\nXOR EAX,EAX\nCALL 0x00402ba0\nMOV RDI,qword ptr [0x0062de60]\nMOV RSI,qword ptr [R12]\nMOV EDX,0x2\nCALL 0x004063d0\nJMP 0x0040722c\nMOV RDI,qword ptr [0x0062de60]\nMOV ESI,0x41dc7b\nMOV EDX,0x41dc9b\nXOR EAX,EAX\nCALL 0x00402ba0\nMOV RDI,qword ptr [0x0062de60]\nMOV RSI,qword ptr [RSP + 0x8]\nMOV EDX,0x2\nCALL 0x004063d0\nJMP 0x00407303\n'
p1628
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 f6\n49 89 fc\n49 83 3c 24 00\n0f 84 09 01 00 00\nf6 05 5a 7e 22 00 08\n0f 85 0b 01 00 00\n49 8b 3c 24\ne8 8b e6 ff ff\n4c 8d 7c 24 08\n4c 89 ff\ne8 0e fe ff ff\n49 8b 1c 24\n48 85 db\n0f 84 ab 00 00 00\n4c 8b 6c 24 10\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 83 10 01 00 00\n49 89 04 24\n48 c7 83 10 01 00 00 00 00 00 00\n4c 89 fd\n0f 1f 80 00 00 00 00\n48 8b 6d 00\n48 85 ed\n74 47\n31 d2\n83 7d 14 02\n0f 95 c2\n48 8b bd 18 01 00 00\n48 8b b3 18 01 00 00\ne8 fb 00 00 00\n48 81 c5 10 01 00 00\n85 c0\n78 d0\n48 8b 45 00\n48 89 83 10 01 00 00\n48 85 c0\n4c 0f 44 eb\n48 89 5d 00\neb 20\n48 8b 44 24 08\n48 89 83 10 01 00 00\n48 89 5c 24 08\n4d 85 ed\n4c 0f 44 eb\n49 8b 1c 24\n48 85 db\n0f 85 6b ff ff ff\n4c 89 6c 24 10\nf6 05 7f 7d 22 00 08\n75 66\n4c 8b 7c 24 08\n4c 89 ff\ne8 b0 e5 ff ff\n48 8b 74 24 10\n4c 89 ff\n4c 89 f2\ne8 d0 00 00 00\n4c 89 e7\ne8 28 fd ff ff\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 3d 22 6b 22 00\nbe 7b dc 41 00\nba 80 dc 41 00\n31 c0\ne8 51 b8 ff ff\n48 8b 3d 0a 6b 22 00\n49 8b 34 24\nba 02 00 00 00\ne8 6c f0 ff ff\ne9 c3 fe ff ff\n48 8b 3d f0 6a 22 00\nbe 7b dc 41 00\nba 9b dc 41 00\n31 c0\ne8 1f b8 ff ff\n48 8b 3d d8 6a 22 00\n48 8b 74 24 08\nba 02 00 00 00\ne8 39 f0 ff ff\ne9 67 ff ff ff\n'
p1629
S'.text:0000000000407200\n.text:0000000000407201\n.text:0000000000407203\n.text:0000000000407205\n.text:0000000000407207\n.text:0000000000407209\n.text:000000000040720a\n.text:000000000040720e\n.text:0000000000407211\n.text:0000000000407214\n.text:0000000000407219\n.text:000000000040721f\n.text:0000000000407226\n.text:000000000040722c\n.text:0000000000407230\n.text:0000000000407235\n.text:000000000040723a\n.text:000000000040723d\n.text:0000000000407242\n.text:0000000000407246\n.text:0000000000407249\n.text:000000000040724f\n.text:0000000000407254\n.text:0000000000407260\n.text:0000000000407267\n.text:000000000040726b\n.text:0000000000407276\n.text:0000000000407279\n.text:0000000000407280\n.text:0000000000407284\n.text:0000000000407287\n.text:0000000000407289\n.text:000000000040728b\n.text:000000000040728f\n.text:0000000000407292\n.text:0000000000407299\n.text:00000000004072a0\n.text:00000000004072a5\n.text:00000000004072ac\n.text:00000000004072ae\n.text:00000000004072b0\n.text:00000000004072b4\n.text:00000000004072bb\n.text:00000000004072be\n.text:00000000004072c2\n.text:00000000004072c6\n.text:00000000004072d0\n.text:00000000004072d5\n.text:00000000004072dc\n.text:00000000004072e1\n.text:00000000004072e4\n.text:00000000004072e8\n.text:00000000004072ec\n.text:00000000004072ef\n.text:00000000004072f5\n.text:00000000004072fa\n.text:0000000000407301\n.text:0000000000407303\n.text:0000000000407308\n.text:000000000040730b\n.text:0000000000407310\n.text:0000000000407315\n.text:0000000000407318\n.text:000000000040731b\n.text:0000000000407320\n.text:0000000000407323\n.text:0000000000407328\n.text:000000000040732c\n.text:000000000040732d\n.text:000000000040732f\n.text:0000000000407331\n.text:0000000000407333\n.text:0000000000407335\n.text:0000000000407336\n.text:0000000000407337\n.text:000000000040733e\n.text:0000000000407343\n.text:0000000000407348\n.text:000000000040734a\n.text:000000000040734f\n.text:0000000000407356\n.text:000000000040735a\n.text:000000000040735f\n.text:0000000000407364\n.text:0000000000407369\n.text:0000000000407370\n.text:0000000000407375\n.text:000000000040737a\n.text:000000000040737c\n.text:0000000000407381\n.text:0000000000407388\n.text:000000000040738d\n.text:0000000000407392\n.text:0000000000407397\n'
p1630
tp1631
sS'pred_anewer'
p1632
(S'\n__stdcall pred_anewer(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p1633
V\u000a_Bool pred_anewer(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (*(int *)(pred_ptr->args + 4) == 0) {\u000a    get_stat_atime(stat_buf);\u000a    iVar1 = compare_ts();\u000a    return (_Bool)(0 < iVar1);\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("COMP_GT == pred_ptr->args.reftime.kind","pred.c",0xf2,\u000a                "_Bool pred_anewer(const char *, struct stat *, struct predicate *)");\u000a}\u000a\u000a
p1634
S'PUSH RBX\nMOV RBX,RDX\nCMP dword ptr [RBX + 0x3c],0x0\nJNZ 0x00403d0f\nMOV RDI,RSI\nCALL 0x00416c70\nMOV R8,qword ptr [RBX + 0x40]\nMOV RCX,qword ptr [RBX + 0x48]\nMOV RDI,RAX\nMOV RSI,RDX\nMOV RDX,R8\nCALL 0x00404ac0\nTEST EAX,EAX\nSETG AL\nPOP RBX\nRET\nMOV EDI,0x41cce5\nMOV ESI,0x41cd0c\nMOV EDX,0xf2\nMOV ECX,0x41cd13\nCALL 0x00402a40\n'
p1635
S'53\n48 89 d3\n83 7b 3c 00\n75 25\n48 89 f7\ne8 7e 2f 01 00\n4c 8b 43 40\n48 8b 4b 48\n48 89 c7\n48 89 d6\n4c 89 c2\ne8 b8 0d 00 00\n85 c0\n0f 9f c0\n5b\nc3\nbf e5 cc 41 00\nbe 0c cd 41 00\nba f2 00 00 00\nb9 13 cd 41 00\ne8 18 ed ff ff\n'
p1636
S'.text:0000000000403ce0\n.text:0000000000403ce1\n.text:0000000000403ce4\n.text:0000000000403ce8\n.text:0000000000403cea\n.text:0000000000403ced\n.text:0000000000403cf2\n.text:0000000000403cf6\n.text:0000000000403cfa\n.text:0000000000403cfd\n.text:0000000000403d00\n.text:0000000000403d03\n.text:0000000000403d08\n.text:0000000000403d0a\n.text:0000000000403d0d\n.text:0000000000403d0e\n.text:0000000000403d0f\n.text:0000000000403d14\n.text:0000000000403d19\n.text:0000000000403d1e\n.text:0000000000403d23\n'
p1637
tp1638
sS'strpbrk'
p1639
(S'\n__stdcall strpbrk(char * __s, char * __accept)\n'
p1640
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strpbrk(char *__s,char *__accept)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strpbrk_0062d318)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1641
S'JMP qword ptr [0x0062d318]\n'
p1642
S'ff 25 22 a6 22 00\n'
p1643
S'.plt:0000000000402cf0\n'
p1644
tp1645
sS'parse_iname'
p1646
(S'\n__stdcall parse_iname(parser_table * entry, char * * argv, int * arg_ptr)\n'
p1647
V\u000a_Bool parse_iname(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  char *arg;\u000a  _Bool _Var1;\u000a  predicate *ppVar2;\u000a  float fVar3;\u000a  char *local_20;\u000a  \u000a  fnmatch_sanitycheck();\u000a  _Var1 = collect_arg(argv,arg_ptr,&local_20);\u000a  arg = local_20;\u000a  if (_Var1 != false) {\u000a    check_name_arg();\u000a    ppVar2 = insert_primary(entry,arg);\u000a    *(undefined2 *)&ppVar2->need_stat = 0;\u000a    *(char **)ppVar2->args = local_20;\u000a    fVar3 = estimate_pattern_match_rate(local_20);\u000a    ppVar2->est_success_rate = fVar3;\u000a  }\u000a  return (_Bool)(_Var1 != false);\u000a}\u000a\u000a
p1648
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV R15,RDX\nMOV RBX,RSI\nMOV R14,RDI\nCALL 0x0040d4a0\nLEA RDX,[RSP + 0x8]\nMOV RDI,RBX\nMOV RSI,R15\nCALL 0x0040c7f0\nTEST AL,AL\nJZ 0x0040b94a\nMOV RBX,qword ptr [RSP + 0x8]\nMOV EDI,0x42165c\nMOV RSI,RBX\nCALL 0x0040d520\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00407730\nMOV RBX,RAX\nMOV word ptr [RBX + 0x1a],0x0\nMOV RDI,qword ptr [RSP + 0x8]\nMOV qword ptr [RBX + 0x38],RDI\nXOR ESI,ESI\nCALL 0x0040d450\nMOVSS dword ptr [RBX + 0x24],XMM0\nMOV AL,0x1\nJMP 0x0040b94c\nXOR EAX,EAX\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1649
S'41 57\n41 56\n53\n48 83 ec 10\n49 89 d7\n48 89 f3\n49 89 fe\ne8 a9 1b 00 00\n48 8d 54 24 08\n48 89 df\n4c 89 fe\ne8 e9 0e 00 00\n84 c0\n74 3f\n48 8b 5c 24 08\nbf 5c 16 42 00\n48 89 de\ne8 03 1c 00 00\n4c 89 f7\n48 89 de\ne8 08 be ff ff\n48 89 c3\n66 c7 43 1a 00 00\n48 8b 7c 24 08\n48 89 7b 38\n31 f6\ne8 0f 1b 00 00\nf3 0f 11 43 24\nb0 01\neb 02\n31 c0\n48 83 c4 10\n5b\n41 5e\n41 5f\nc3\n'
p1650
S'.text:000000000040b8e0\n.text:000000000040b8e2\n.text:000000000040b8e4\n.text:000000000040b8e5\n.text:000000000040b8e9\n.text:000000000040b8ec\n.text:000000000040b8ef\n.text:000000000040b8f2\n.text:000000000040b8f7\n.text:000000000040b8fc\n.text:000000000040b8ff\n.text:000000000040b902\n.text:000000000040b907\n.text:000000000040b909\n.text:000000000040b90b\n.text:000000000040b910\n.text:000000000040b915\n.text:000000000040b918\n.text:000000000040b91d\n.text:000000000040b920\n.text:000000000040b923\n.text:000000000040b928\n.text:000000000040b92b\n.text:000000000040b931\n.text:000000000040b936\n.text:000000000040b93a\n.text:000000000040b93c\n.text:000000000040b941\n.text:000000000040b946\n.text:000000000040b948\n.text:000000000040b94a\n.text:000000000040b94c\n.text:000000000040b950\n.text:000000000040b951\n.text:000000000040b953\n.text:000000000040b955\n'
p1651
tp1652
sS'set_quoting_flags'
p1653
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p1654
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p1655
S'TEST RDI,RDI\nMOV ECX,0x62e690\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p1656
S'48 85 ff\nb9 90 e6 62 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p1657
S'.text:00000000004151f0\n.text:00000000004151f3\n.text:00000000004151f8\n.text:00000000004151fc\n.text:00000000004151ff\n.text:0000000000415202\n'
p1658
tp1659
sS'pred_quit'
p1660
(S'\n__stdcall pred_quit(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p1661
V\u000a_Bool pred_quit(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  cleanup((EVP_PKEY_CTX *)pathname);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(state.exit_status);\u000a}\u000a\u000a
p1662
S'PUSH RAX\nCALL 0x00407e20\nMOV EDI,dword ptr [0x0062f024]\nCALL 0x00402ed0\n'
p1663
S'50\ne8 ca 37 00 00\n8b 3d c8 a9 22 00\ne8 6f e8 ff ff\n'
p1664
S'.text:0000000000404650\n.text:0000000000404651\n.text:0000000000404656\n.text:000000000040465c\n'
p1665
tp1666
sS'get_charset_aliases'
p1667
(S'\n__stdcall get_charset_aliases()\n'
p1668
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *__stream;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases = "";\u000a    return "";\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    __stream = fdopen(__fd,"r");\u000a    if (__stream != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_0041bf74_caseD_9:\u000a      __fd = getc_unlocked(__stream);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,__stream);\u000a        __fd = fscanf(__stream,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_0041bf74_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_0041bf74_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_0041bf74_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked(__stream);\u000a          if (__fd == -1) goto switchD_0041bf74_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_0041bf74_caseD_9;\u000a      case -1:\u000a        goto switchD_0041bf74_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_0041bfcd:\u000a  __s = "";\u000aLAB_0041bfd3:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_0041bf74_caseD_ffffffff:\u000a  fclose(__stream);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_0041bfd3;\u000a  }\u000a  goto LAB_0041bfcd;\u000a}\u000a\u000a
p1669
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x0062e7e0]\nTEST R15,R15\nJNZ 0x0041bfe2\nMOV EDI,0x4258d4\nCALL 0x00402700\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0041bd98\nCMP byte ptr [RBX],0x0\nJNZ 0x0041bd9d\nMOV EBX,0x4258e4\nMOV RDI,RBX\nCALL 0x00402930\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x0041bdb7\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x0041bdb9\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00402c60\nMOV R13,RAX\nTEST R13,R13\nJZ 0x0041be0d\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00402bd0\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x0041be18\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x0041be35\nMOV R15D,0x41e69a\nJMP 0x0041bfdb\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00402dc0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0041bfcd\nMOV ESI,0x4222e2\nMOV EDI,EBP\nCALL 0x00402d40\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0041bf94\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x0041bf60\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x004027c0\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x004027c0\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x0041bf60\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00402cb0\nMOV ESI,0x4258f3\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00402a90\nCMP EAX,0x2\nJL 0x0041bfb4\nMOV RDI,R12\nCALL 0x00402930\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x00402930\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0041bf3d\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00402d30\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x0041be84\nJMP 0x0041bf9d\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00402c60\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x0041be84\nJMP 0x0041bf9d\nMOV RDI,RBX\nCALL 0x00402800\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x0041bec7\nJMP qword ptr [0x425798 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x00402800\nCMP EAX,-0x1\nJZ 0x0041bfb4\nCMP EAX,0xa\nJNZ 0x0041bf80\nJMP 0x0041bf60\nMOV EDI,EBP\nCALL 0x00402ac0\nJMP 0x0041bfcd\nMOV RDI,R15\nCALL 0x00402710\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x004028c0\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0041bfcd\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x0041bfd3\nMOV R15D,0x41e69a\nMOV RDI,R13\nCALL 0x00402710\nMOV qword ptr [0x0062e7e0],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1670
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 68 2a 21 00\n4d 85 ff\n0f 85 61 02 00 00\nbf d4 58 42 00\ne8 75 69 fe ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb e4 58 42 00\n48 89 df\ne8 8b 6b fe ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 99 6e fe ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 f3 6d fe ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf 9a e6 41 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 7c 6f fe ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe e2 22 42 00\n89 ef\ne8 e6 6e fe ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 1b 69 fe ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 0b 69 fe ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 df 6d fe ff\nbe f3 58 42 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 aa 6b fe ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 39 6a fe ff\n49 89 c4\n48 89 ef\ne8 2e 6a fe ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 06 6e fe ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 15 6d fe ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 98 68 fe ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 98 57 42 00\n48 89 df\ne8 78 68 fe ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 25 6b fe ff\neb 30\n4c 89 ff\ne8 6b 67 fe ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 04 69 fe ff\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf 9a e6 41 00\n4c 89 ef\ne8 35 67 fe ff\n4c 89 3d fe 27 21 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1671
S'.text:000000000041bd60\n.text:000000000041bd61\n.text:000000000041bd63\n.text:000000000041bd65\n.text:000000000041bd67\n.text:000000000041bd69\n.text:000000000041bd6a\n.text:000000000041bd71\n.text:000000000041bd78\n.text:000000000041bd7b\n.text:000000000041bd81\n.text:000000000041bd86\n.text:000000000041bd8b\n.text:000000000041bd8e\n.text:000000000041bd91\n.text:000000000041bd93\n.text:000000000041bd96\n.text:000000000041bd98\n.text:000000000041bd9d\n.text:000000000041bda0\n.text:000000000041bda5\n.text:000000000041bda8\n.text:000000000041bdab\n.text:000000000041bdad\n.text:000000000041bdb2\n.text:000000000041bdb5\n.text:000000000041bdb7\n.text:000000000041bdb9\n.text:000000000041bdbd\n.text:000000000041bdc2\n.text:000000000041bdc7\n.text:000000000041bdca\n.text:000000000041bdcd\n.text:000000000041bdcf\n.text:000000000041bdd2\n.text:000000000041bdd5\n.text:000000000041bdd8\n.text:000000000041bddd\n.text:000000000041bde0\n.text:000000000041bde3\n.text:000000000041bde6\n.text:000000000041bde8\n.text:000000000041bdee\n.text:000000000041bdf8\n.text:000000000041bdfd\n.text:000000000041be07\n.text:000000000041be0b\n.text:000000000041be0d\n.text:000000000041be13\n.text:000000000041be18\n.text:000000000041be22\n.text:000000000041be27\n.text:000000000041be31\n.text:000000000041be35\n.text:000000000041be3a\n.text:000000000041be3c\n.text:000000000041be3f\n.text:000000000041be44\n.text:000000000041be46\n.text:000000000041be48\n.text:000000000041be4e\n.text:000000000041be53\n.text:000000000041be55\n.text:000000000041be5a\n.text:000000000041be5d\n.text:000000000041be60\n.text:000000000041be66\n.text:000000000041be6b\n.text:000000000041be70\n.text:000000000041be72\n.text:000000000041be77\n.text:000000000041be7a\n.text:000000000041be7f\n.text:000000000041be84\n.text:000000000041be89\n.text:000000000041be8c\n.text:000000000041be8f\n.text:000000000041be92\n.text:000000000041be95\n.text:000000000041be98\n.text:000000000041be9d\n.text:000000000041bea0\n.text:000000000041bea5\n.text:000000000041bea8\n.text:000000000041bead\n.text:000000000041beb0\n.text:000000000041beb5\n.text:000000000041beba\n.text:000000000041bebd\n.text:000000000041bec2\n.text:000000000041bec7\n.text:000000000041bec9\n.text:000000000041becc\n.text:000000000041bed1\n.text:000000000041bed6\n.text:000000000041bed8\n.text:000000000041bedb\n.text:000000000041bede\n.text:000000000041bee1\n.text:000000000041bee6\n.text:000000000041bee9\n.text:000000000041beef\n.text:000000000041bef2\n.text:000000000041bef7\n.text:000000000041befa\n.text:000000000041befd\n.text:000000000041bf02\n.text:000000000041bf05\n.text:000000000041bf0a\n.text:000000000041bf0f\n.text:000000000041bf12\n.text:000000000041bf14\n.text:000000000041bf18\n.text:000000000041bf1d\n.text:000000000041bf22\n.text:000000000041bf25\n.text:000000000041bf2a\n.text:000000000041bf2d\n.text:000000000041bf32\n.text:000000000041bf35\n.text:000000000041bf3b\n.text:000000000041bf3d\n.text:000000000041bf42\n.text:000000000041bf46\n.text:000000000041bf4b\n.text:000000000041bf4e\n.text:000000000041bf51\n.text:000000000041bf57\n.text:000000000041bf60\n.text:000000000041bf63\n.text:000000000041bf68\n.text:000000000041bf6b\n.text:000000000041bf6e\n.text:000000000041bf74\n.text:000000000041bf80\n.text:000000000041bf83\n.text:000000000041bf88\n.text:000000000041bf8b\n.text:000000000041bf8d\n.text:000000000041bf90\n.text:000000000041bf92\n.text:000000000041bf94\n.text:000000000041bf96\n.text:000000000041bf9b\n.text:000000000041bf9d\n.text:000000000041bfa0\n.text:000000000041bfa5\n.text:000000000041bfa7\n.text:000000000041bfac\n.text:000000000041bfaf\n.text:000000000041bfb4\n.text:000000000041bfb7\n.text:000000000041bfbc\n.text:000000000041bfc1\n.text:000000000041bfc4\n.text:000000000041bfc6\n.text:000000000041bfcb\n.text:000000000041bfcd\n.text:000000000041bfd3\n.text:000000000041bfd6\n.text:000000000041bfdb\n.text:000000000041bfe2\n.text:000000000041bfe5\n.text:000000000041bfec\n.text:000000000041bfed\n.text:000000000041bfef\n.text:000000000041bff1\n.text:000000000041bff3\n.text:000000000041bff5\n.text:000000000041bff6\n'
p1672
tp1673
sS'x2realloc'
p1674
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p1675
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p1676
S'MOV EDX,0x1\nJMP 0x00417290\n'
p1677
S'ba 01 00 00 00\neb 89\n'
p1678
S'.text:0000000000417300\n.text:0000000000417305\n'
p1679
tp1680
sS'set_stat_type'
p1681
(S'\n__stdcall set_stat_type(stat * st)\n'
p1682
V\u000avoid set_stat_type(stat *st)\u000a\u000a{\u000a  __mode_t _Var1;\u000a  int in_ESI;\u000a  \u000a  _Var1 = 0;\u000a  if (in_ESI - 1U < 0xc) {\u000a    _Var1 = *(__mode_t *)(&DAT_00425290 + (long)(int)(in_ESI - 1U) * 4);\u000a  }\u000a  st->st_mode = _Var1;\u000a  return;\u000a}\u000a\u000a
p1683
S'DEC ESI\nXOR EAX,EAX\nCMP ESI,0xb\nJA 0x00419e43\nMOVSXD RAX,ESI\nMOV EAX,dword ptr [0x425290 + RAX*0x4]\nMOV dword ptr [RDI + 0x18],EAX\nRET\n'
p1684
S'ff ce\n31 c0\n83 fe 0b\n77 0a\n48 63 c6\n8b 04 85 90 52 42 00\n89 47 18\nc3\n'
p1685
S'.text:0000000000419e30\n.text:0000000000419e32\n.text:0000000000419e34\n.text:0000000000419e37\n.text:0000000000419e39\n.text:0000000000419e3c\n.text:0000000000419e43\n.text:0000000000419e46\n'
p1686
tp1687
sS'bkm_scale_by_power'
p1688
(S'\n__stdcall bkm_scale_by_power(uintmax_t * x)\n'
p1689
V\u000astrtol_error bkm_scale_by_power(uintmax_t *x)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  int in_EDX;\u000a  strtol_error sVar2;\u000a  \u000a  sVar2 = LONGINT_OK;\u000a  if (in_EDX != 0) {\u000a    do {\u000a      sVar1 = bkm_scale(x);\u000a      sVar2 = sVar2 | sVar1;\u000a      in_EDX = in_EDX + -1;\u000a    } while (in_EDX != 0);\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p1690
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R14D,ESI\nMOV R15,RDI\nXOR EBP,EBP\nTEST EBX,EBX\nJZ 0x00417a51\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nMOV ESI,R14D\nCALL 0x004179f0\nOR EBP,EAX\nDEC EBX\nJNZ 0x00417a40\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1691
S'55\n41 57\n41 56\n53\n50\n89 d3\n41 89 f6\n49 89 ff\n31 ed\n85 db\n74 1c\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\n44 89 f6\ne8 a5 ff ff ff\n09 c5\nff cb\n75 ef\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1692
S'.text:0000000000417a20\n.text:0000000000417a21\n.text:0000000000417a23\n.text:0000000000417a25\n.text:0000000000417a26\n.text:0000000000417a27\n.text:0000000000417a29\n.text:0000000000417a2c\n.text:0000000000417a2f\n.text:0000000000417a31\n.text:0000000000417a33\n.text:0000000000417a35\n.text:0000000000417a40\n.text:0000000000417a43\n.text:0000000000417a46\n.text:0000000000417a4b\n.text:0000000000417a4d\n.text:0000000000417a4f\n.text:0000000000417a51\n.text:0000000000417a53\n.text:0000000000417a57\n.text:0000000000417a58\n.text:0000000000417a5a\n.text:0000000000417a5c\n.text:0000000000417a5d\n'
p1693
tp1694
sS'argmatch_valid'
p1695
(S'\n__stdcall argmatch_valid(char * * arglist, char * vallist, size_t valsize)\n'
p1696
V\u000avoid argmatch_valid(char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  FILE *__stream;\u000a  int iVar1;\u000a  char *__s;\u000a  char *__s1;\u000a  long lVar2;\u000a  \u000a  __s = (char *)dcgettext(0,"Valid arguments are:",5);\u000a  fputs(__s,stderr);\u000a  __s = *arglist;\u000a  if (__s != (char *)0x0) {\u000a    __s1 = (char *)0x0;\u000a    lVar2 = 0;\u000a    do {\u000a      __stream = stderr;\u000a      if ((lVar2 == 0) || (iVar1 = memcmp(__s1,vallist,valsize), iVar1 != 0)) {\u000a        __s = quote(__s);\u000a        fprintf(__stream,"\u005cn  - %s",__s,__s);\u000a        __s1 = vallist;\u000a      }\u000a      else {\u000a        __s = quote(__s);\u000a        fprintf(__stream,", %s",__s,__s);\u000a      }\u000a      __s = arglist[lVar2 + 1];\u000a      lVar2 = lVar2 + 1;\u000a      vallist = vallist + valsize;\u000a    } while (__s != (char *)0x0);\u000a  }\u000a  _IO_putc(10,(_IO_FILE *)stderr);\u000a  return;\u000a}\u000a\u000a
p1697
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBP,RDX\nMOV R13,RSI\nMOV R15,RDI\nXOR EDI,EDI\nMOV ESI,0x425410\nMOV EDX,0x5\nCALL 0x00402910\nMOV RSI,qword ptr [0x0062de60]\nMOV RDI,RAX\nCALL 0x00402a50\nMOV RBX,qword ptr [R15]\nTEST RBX,RBX\nMOV R12,qword ptr [0x0062de60]\nJNZ 0x0041b6ee\nMOV EDI,0xa\nMOV RSI,R12\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004029b0\nMOV qword ptr [RSP],RBP\nXOR EBP,EBP\nXOR R14D,R14D\nNOP word ptr [RAX + RAX*0x1]\nTEST R14,R14\nJZ 0x0041b740\nMOV RDI,RBP\nMOV RSI,R13\nMOV RDX,qword ptr [RSP]\nCALL 0x00402b20\nTEST EAX,EAX\nJNZ 0x0041b740\nMOV RDI,RBX\nCALL 0x00416590\nMOV RCX,RAX\nMOV ESI,0x42542d\nXOR EAX,EAX\nMOV RDI,R12\nMOV RDX,RCX\nCALL 0x00402ba0\nJMP 0x0041b760\nMOV RDI,RBX\nCALL 0x00416590\nMOV RCX,RAX\nMOV ESI,0x425425\nXOR EAX,EAX\nMOV RDI,R12\nMOV RDX,RCX\nCALL 0x00402ba0\nMOV RBP,R13\nMOV RBX,qword ptr [R15 + R14*0x8 + 0x8]\nINC R14\nMOV R12,qword ptr [0x0062de60]\nADD R13,qword ptr [RSP]\nTEST RBX,RBX\nJNZ 0x0041b700\nJMP 0x0041b6d3\n'
p1698
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n48 89 d5\n49 89 f5\n49 89 ff\n31 ff\nbe 10 54 42 00\nba 05 00 00 00\ne8 5b 72 fe ff\n48 8b 35 a4 27 21 00\n48 89 c7\ne8 8c 73 fe ff\n49 8b 1f\n48 85 db\n4c 8b 25 8f 27 21 00\n75 1b\nbf 0a 00 00 00\n4c 89 e6\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 c2 72 fe ff\n48 89 2c 24\n31 ed\n45 31 f6\n66 0f 1f 84 00 00 00 00 00\n4d 85 f6\n74 3b\n48 89 ef\n4c 89 ee\n48 8b 14 24\ne8 0c 74 fe ff\n85 c0\n75 28\n48 89 df\ne8 70 ae ff ff\n48 89 c1\nbe 2d 54 42 00\n31 c0\n4c 89 e7\n48 89 ca\ne8 6b 74 fe ff\neb 29\n48 89 df\ne8 48 ae ff ff\n48 89 c1\nbe 25 54 42 00\n31 c0\n4c 89 e7\n48 89 ca\ne8 43 74 fe ff\n4c 89 ed\n4b 8b 5c f7 08\n49 ff c6\n4c 8b 25 f1 26 21 00\n4c 03 2c 24\n48 85 db\n75 88\ne9 56 ff ff ff\n'
p1699
S'.text:000000000041b690\n.text:000000000041b691\n.text:000000000041b693\n.text:000000000041b695\n.text:000000000041b697\n.text:000000000041b699\n.text:000000000041b69a\n.text:000000000041b69b\n.text:000000000041b69e\n.text:000000000041b6a1\n.text:000000000041b6a4\n.text:000000000041b6a6\n.text:000000000041b6ab\n.text:000000000041b6b0\n.text:000000000041b6b5\n.text:000000000041b6bc\n.text:000000000041b6bf\n.text:000000000041b6c4\n.text:000000000041b6c7\n.text:000000000041b6ca\n.text:000000000041b6d1\n.text:000000000041b6d3\n.text:000000000041b6d8\n.text:000000000041b6db\n.text:000000000041b6df\n.text:000000000041b6e0\n.text:000000000041b6e2\n.text:000000000041b6e4\n.text:000000000041b6e6\n.text:000000000041b6e8\n.text:000000000041b6e9\n.text:000000000041b6ee\n.text:000000000041b6f2\n.text:000000000041b6f4\n.text:000000000041b6f7\n.text:000000000041b700\n.text:000000000041b703\n.text:000000000041b705\n.text:000000000041b708\n.text:000000000041b70b\n.text:000000000041b70f\n.text:000000000041b714\n.text:000000000041b716\n.text:000000000041b718\n.text:000000000041b71b\n.text:000000000041b720\n.text:000000000041b723\n.text:000000000041b728\n.text:000000000041b72a\n.text:000000000041b72d\n.text:000000000041b730\n.text:000000000041b735\n.text:000000000041b740\n.text:000000000041b743\n.text:000000000041b748\n.text:000000000041b74b\n.text:000000000041b750\n.text:000000000041b752\n.text:000000000041b755\n.text:000000000041b758\n.text:000000000041b75d\n.text:000000000041b760\n.text:000000000041b765\n.text:000000000041b768\n.text:000000000041b76f\n.text:000000000041b773\n.text:000000000041b776\n.text:000000000041b778\n'
p1700
tp1701
sS'estimate_pattern_match_rate'
p1702
(S'\n__stdcall estimate_pattern_match_rate(char * pattern)\n'
p1703
V\u000afloat estimate_pattern_match_rate(char *pattern)\u000a\u000a{\u000a  char *pcVar1;\u000a  int in_ESI;\u000a  float fVar2;\u000a  \u000a  pcVar1 = strpbrk(pattern,"*?[");\u000a  fVar2 = DAT_0041fb90;\u000a  if (((pcVar1 == (char *)0x0) && (fVar2 = DAT_0041fb7c, in_ESI != 0)) &&\u000a     (pcVar1 = strchr(pattern,0x2e), fVar2 = DAT_0041fb7c, pcVar1 != (char *)0x0)) {\u000a    return DAT_0041fb90;\u000a  }\u000a  return fVar2;\u000a}\u000a\u000a
p1704
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV ESI,0x421658\nCALL 0x00402cf0\nMOVSS XMM0,dword ptr [0x0041fb90]\nTEST RAX,RAX\nJNZ 0x0040d495\nTEST EBP,EBP\nJZ 0x0040d48d\nMOV ESI,0x2e\nMOV RDI,RBX\nCALL 0x00402980\nMOVSS XMM0,dword ptr [0x0041fb90]\nTEST RAX,RAX\nJNZ 0x0040d495\nMOVSS XMM0,dword ptr [0x0041fb7c]\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1705
S'55\n53\n50\n89 f5\n48 89 fb\nbe 58 16 42 00\ne8 8e 58 ff ff\nf3 0f 10 05 26 27 01 00\n48 85 c0\n75 26\n85 ed\n74 1a\nbe 2e 00 00 00\n48 89 df\ne8 00 55 ff ff\nf3 0f 10 05 08 27 01 00\n48 85 c0\n75 08\nf3 0f 10 05 e7 26 01 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1706
S'.text:000000000040d450\n.text:000000000040d451\n.text:000000000040d452\n.text:000000000040d453\n.text:000000000040d455\n.text:000000000040d458\n.text:000000000040d45d\n.text:000000000040d462\n.text:000000000040d46a\n.text:000000000040d46d\n.text:000000000040d46f\n.text:000000000040d471\n.text:000000000040d473\n.text:000000000040d478\n.text:000000000040d47b\n.text:000000000040d480\n.text:000000000040d488\n.text:000000000040d48b\n.text:000000000040d48d\n.text:000000000040d495\n.text:000000000040d499\n.text:000000000040d49a\n.text:000000000040d49b\n'
p1707
tp1708
sS'digest_mode'
p1709
(S'\n__stdcall digest_mode(mode_t * mode, char * pathname, char * name, stat * pstat)\n'
p1710
V\u000a_Bool digest_mode(mode_t *mode,char *pathname,char *name,stat *pstat)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char in_R8B;\u000a  \u000a  if (*mode == 0) {\u000a    if (in_R8B != 0) {\u000a      state.have_stat = false;\u000a      state.have_type = false;\u000a      state.type = 0;\u000a      return true;\u000a    }\u000a    iVar2 = get_statinfo(pathname,name,pstat);\u000a    if (iVar2 != 0) {\u000a      return false;\u000a    }\u000a    state.type = pstat->st_mode;\u000a    *mode = state.type;\u000a  }\u000a  else {\u000a    if (((*mode & 0xf000) != 0xa000) || (_Var1 = following_links(), _Var1 == false)) {\u000a      state.have_type = true;\u000a      state.type = *mode;\u000a      pstat->st_mode = state.type;\u000a      return true;\u000a    }\u000a    iVar2 = get_statinfo(pathname,name,pstat);\u000a    if (iVar2 != 0) {\u000a      return false;\u000a    }\u000a    state.type = pstat->st_mode;\u000a    *mode = state.type;\u000a  }\u000a  state.have_type = true;\u000a  return true;\u000a}\u000a\u000a
p1711
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV RBX,RDI\nMOV EAX,dword ptr [RBX]\nTEST EAX,EAX\nJZ 0x004082ba\nAND EAX,0xf000\nCMP EAX,0xa000\nJNZ 0x004082a5\nCALL 0x00408230\nTEST AL,AL\nJZ 0x004082a5\nMOV RDI,R12\nMOV RSI,R15\nMOV RDX,R14\nCALL 0x004079e0\nTEST EAX,EAX\nJZ 0x004082fd\nXOR EAX,EAX\nJMP 0x00408312\nMOV byte ptr [0x0062f005],0x1\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [0x0062f008],EAX\nMOV dword ptr [R14 + 0x18],EAX\nJMP 0x00408310\nTEST R8B,R8B\nJZ 0x004082d9\nMOV byte ptr [0x0062f004],0x0\nMOV byte ptr [0x0062f005],0x0\nMOV dword ptr [0x0062f008],0x0\nJMP 0x00408310\nMOV RDI,R12\nMOV RSI,R15\nMOV RDX,R14\nCALL 0x004079e0\nTEST EAX,EAX\nJZ 0x004082ef\nXOR EAX,EAX\nJMP 0x00408312\nMOV EAX,dword ptr [R14 + 0x18]\nMOV dword ptr [RBX],EAX\nMOV dword ptr [0x0062f008],EAX\nJMP 0x00408309\nMOV EAX,dword ptr [R14 + 0x18]\nMOV dword ptr [0x0062f008],EAX\nMOV dword ptr [RBX],EAX\nMOV byte ptr [0x0062f005],0x1\nMOV AL,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p1712
S'41 57\n41 56\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n48 89 fb\n8b 03\n85 c0\n74 40\n25 00 f0 00 00\n3d 00 a0 00 00\n75 1f\ne8 a5 ff ff ff\n84 c0\n74 16\n4c 89 e7\n4c 89 fe\n4c 89 f2\ne8 43 f7 ff ff\n85 c0\n74 5c\n31 c0\neb 6d\nc6 05 59 6d 22 00 01\n8b 03\n89 05 54 6d 22 00\n41 89 46 18\neb 56\n45 84 c0\n74 1a\nc6 05 3e 6d 22 00 00\nc6 05 38 6d 22 00 00\nc7 05 31 6d 22 00 00 00 00 00\neb 37\n4c 89 e7\n4c 89 fe\n4c 89 f2\ne8 f9 f6 ff ff\n85 c0\n74 04\n31 c0\neb 23\n41 8b 46 18\n89 03\n89 05 0d 6d 22 00\neb 0c\n41 8b 46 18\n89 05 01 6d 22 00\n89 03\nc6 05 f5 6c 22 00 01\nb0 01\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p1713
S'.text:0000000000408260\n.text:0000000000408262\n.text:0000000000408264\n.text:0000000000408266\n.text:0000000000408267\n.text:0000000000408268\n.text:000000000040826b\n.text:000000000040826e\n.text:0000000000408271\n.text:0000000000408274\n.text:0000000000408276\n.text:0000000000408278\n.text:000000000040827a\n.text:000000000040827f\n.text:0000000000408284\n.text:0000000000408286\n.text:000000000040828b\n.text:000000000040828d\n.text:000000000040828f\n.text:0000000000408292\n.text:0000000000408295\n.text:0000000000408298\n.text:000000000040829d\n.text:000000000040829f\n.text:00000000004082a1\n.text:00000000004082a3\n.text:00000000004082a5\n.text:00000000004082ac\n.text:00000000004082ae\n.text:00000000004082b4\n.text:00000000004082b8\n.text:00000000004082ba\n.text:00000000004082bd\n.text:00000000004082bf\n.text:00000000004082c6\n.text:00000000004082cd\n.text:00000000004082d7\n.text:00000000004082d9\n.text:00000000004082dc\n.text:00000000004082df\n.text:00000000004082e2\n.text:00000000004082e7\n.text:00000000004082e9\n.text:00000000004082eb\n.text:00000000004082ed\n.text:00000000004082ef\n.text:00000000004082f3\n.text:00000000004082f5\n.text:00000000004082fb\n.text:00000000004082fd\n.text:0000000000408301\n.text:0000000000408307\n.text:0000000000408309\n.text:0000000000408310\n.text:0000000000408312\n.text:0000000000408316\n.text:0000000000408317\n.text:0000000000408319\n.text:000000000040831b\n.text:000000000040831d\n'
p1714
tp1715
sS'get_comp_type'
p1716
(S'\n__stdcall get_comp_type()\n'
p1717
V\u000a_Bool get_comp_type(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  undefined4 *in_RSI;\u000a  char **in_RDI;\u000a  \u000a  _Var1 = (_Bool)**in_RDI;\u000a  if (_Var1 == true) {\u000a    *in_RSI = 1;\u000a    *in_RDI = *in_RDI + 1;\u000a    return _Var1;\u000a  }\u000a  if (_Var1 == true) {\u000a    *in_RSI = 0;\u000a    *in_RDI = *in_RDI + 1;\u000a    return _Var1;\u000a  }\u000a  *in_RSI = 2;\u000a  return _Var1;\u000a}\u000a\u000a
p1718
S'MOV RAX,qword ptr [RDI]\nMOVSX EAX,byte ptr [RAX]\nCMP EAX,0x2d\nJZ 0x0040c99a\nCMP EAX,0x2b\nJNZ 0x0040c9a4\nMOV dword ptr [RSI],0x0\nINC qword ptr [RDI]\nRET\nMOV dword ptr [RSI],0x1\nINC qword ptr [RDI]\nRET\nMOV dword ptr [RSI],0x2\nRET\n'
p1719
S'48 8b 07\n0f be 00\n83 f8 2d\n74 0f\n83 f8 2b\n75 14\nc7 06 00 00 00 00\n48 ff 07\nc3\nc7 06 01 00 00 00\n48 ff 07\nc3\nc7 06 02 00 00 00\nc3\n'
p1720
S'.text:000000000040c980\n.text:000000000040c983\n.text:000000000040c986\n.text:000000000040c989\n.text:000000000040c98b\n.text:000000000040c98e\n.text:000000000040c990\n.text:000000000040c996\n.text:000000000040c999\n.text:000000000040c99a\n.text:000000000040c9a0\n.text:000000000040c9a3\n.text:000000000040c9a4\n.text:000000000040c9aa\n'
p1721
tp1722
sS'check_name_arg'
p1723
(S'\n__stdcall check_name_arg()\n'
p1724
V\u000a_Bool check_name_arg(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  undefined uVar2;\u000a  char *pcVar3;\u000a  undefined8 uVar4;\u000a  char *__s;\u000a  \u000a  _Var1 = should_issue_warnings();\u000a  if (_Var1 != false) {\u000a    pcVar3 = strchr(__s,0x2f);\u000a    _Var1 = SUB81(pcVar3,0);\u000a    if (pcVar3 != (char *)0x0) {\u000a      uVar4 = dcgettext(0,\u000a                        "warning: Unix filenames usually don\u005c't contain slashes (though pathnames do).  That means that \u005c'%s %s\u005c' will probably evaluate to false all the time on this system.  You might find the \u005c'-wholename\u005c' test more useful, or perhaps \u005c'-samefile\u005c'.  Alternatively, if you are using GNU grep, you could use \u005c'find ... -print0 | grep -FzZ %s\u005c'."\u000a                        ,5);\u000a      safely_quote_err_filename((char *)0x0);\u000a      safely_quote_err_filename((char *)0x1);\u000a      uVar2 = error(0,0,uVar4);\u000a      return (_Bool)uVar2;\u000a    }\u000a  }\u000a  return _Var1;\u000a}\u000a\u000a
p1725
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nCALL 0x0040aa00\nTEST AL,AL\nJZ 0x0040d59c\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00402980\nTEST RAX,RAX\nJZ 0x0040d59c\nXOR EDI,EDI\nMOV ESI,0x4216a2\nMOV EDX,0x5\nCALL 0x00402910\nMOV R15,RAX\nXOR EDI,EDI\nMOV RSI,RBX\nCALL 0x00408920\nMOV R12,RAX\nMOV EDI,0x1\nMOV RSI,RBX\nCALL 0x00408920\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV R8,R12\nMOV RDX,R15\nMOV RCX,R14\nMOV R9,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00402d90\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p1726
S'41 57\n41 56\n41 54\n53\n50\n48 89 f3\n49 89 fe\ne8 cd d4 ff ff\n84 c0\n74 65\nbe 2f 00 00 00\n48 89 df\ne8 3c 54 ff ff\n48 85 c0\n74 53\n31 ff\nbe a2 16 42 00\nba 05 00 00 00\ne8 b6 53 ff ff\n49 89 c7\n31 ff\n48 89 de\ne8 b9 b3 ff ff\n49 89 c4\nbf 01 00 00 00\n48 89 de\ne8 a9 b3 ff ff\n48 89 c3\n31 ff\n31 f6\n31 c0\n4d 89 e0\n4c 89 fa\n4c 89 f1\n49 89 d9\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 f4 57 ff ff\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p1727
S'.text:000000000040d520\n.text:000000000040d522\n.text:000000000040d524\n.text:000000000040d526\n.text:000000000040d527\n.text:000000000040d528\n.text:000000000040d52b\n.text:000000000040d52e\n.text:000000000040d533\n.text:000000000040d535\n.text:000000000040d537\n.text:000000000040d53c\n.text:000000000040d53f\n.text:000000000040d544\n.text:000000000040d547\n.text:000000000040d549\n.text:000000000040d54b\n.text:000000000040d550\n.text:000000000040d555\n.text:000000000040d55a\n.text:000000000040d55d\n.text:000000000040d55f\n.text:000000000040d562\n.text:000000000040d567\n.text:000000000040d56a\n.text:000000000040d56f\n.text:000000000040d572\n.text:000000000040d577\n.text:000000000040d57a\n.text:000000000040d57c\n.text:000000000040d57e\n.text:000000000040d580\n.text:000000000040d583\n.text:000000000040d586\n.text:000000000040d589\n.text:000000000040d58c\n.text:000000000040d590\n.text:000000000040d591\n.text:000000000040d593\n.text:000000000040d595\n.text:000000000040d597\n.text:000000000040d59c\n.text:000000000040d5a0\n.text:000000000040d5a1\n.text:000000000040d5a3\n.text:000000000040d5a5\n.text:000000000040d5a7\n'
p1728
tp1729
sS'predlist_insert'
p1730
(S'\n__stdcall predlist_insert(predlist * list, predicate * curr, predicate * * pprev)\n'
p1731
V\u000avoid predlist_insert(predlist *list,predicate *curr,predicate **pprev)\u000a\u000a{\u000a  *pprev = curr->pred_left;\u000a  curr->pred_left = list->head;\u000a  list->head = curr;\u000a  if (list->tail == (predicate *)0x0) {\u000a    list->tail = curr;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1732
S'MOV RAX,qword ptr [0x110 + RSI]\nMOV qword ptr [RDX],RAX\nMOV RAX,qword ptr [RDI]\nMOV qword ptr [0x110 + RSI],RAX\nMOV qword ptr [RDI],RSI\nCMP qword ptr [RDI + 0x8],0x0\nJNZ 0x00407192\nMOV qword ptr [RDI + 0x8],RSI\nRET\n'
p1733
S'48 8b 86 10 01 00 00\n48 89 02\n48 8b 07\n48 89 86 10 01 00 00\n48 89 37\n48 83 7f 08 00\n75 04\n48 89 77 08\nc3\n'
p1734
S'.text:0000000000407170\n.text:0000000000407177\n.text:000000000040717a\n.text:000000000040717d\n.text:0000000000407184\n.text:0000000000407187\n.text:000000000040718c\n.text:000000000040718e\n.text:0000000000407192\n'
p1735
tp1736
sS'getrate'
p1737
(S'\n__stdcall getrate(predicate * p)\n'
p1738
V\u000afloat getrate(predicate *p)\u000a\u000a{\u000a  if (p != (predicate *)0x0) {\u000a    return p->est_success_rate;\u000a  }\u000a  return DAT_0041d344;\u000a}\u000a\u000a
p1739
S'TEST RDI,RDI\nJZ 0x00405b3b\nMOVSS XMM0,dword ptr [RDI + 0x24]\nRET\nMOVSS XMM0,dword ptr [0x0041d344]\nRET\n'
p1740
S'48 85 ff\n74 06\nf3 0f 10 47 24\nc3\nf3 0f 10 05 01 78 01 00\nc3\n'
p1741
S'.text:0000000000405b30\n.text:0000000000405b33\n.text:0000000000405b35\n.text:0000000000405b3a\n.text:0000000000405b3b\n.text:0000000000405b43\n'
p1742
tp1743
sS'parse_group'
p1744
(S'\n__stdcall parse_group(parser_table * entry, char * * argv, int * arg_ptr)\n'
p1745
V\u000a_Bool parse_group(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  int iVar1;\u000a  _Bool _Var2;\u000a  __gid_t _Var3;\u000a  group *pgVar4;\u000a  predicate *ppVar5;\u000a  size_t sVar6;\u000a  char *s;\u000a  char *pcVar7;\u000a  undefined8 uVar8;\u000a  undefined uVar9;\u000a  char *local_40;\u000a  undefined8 local_38;\u000a  \u000a  iVar1 = *arg_ptr;\u000a  _Var2 = collect_arg(argv,arg_ptr,&local_40);\u000a  if (_Var2 == false) {\u000aLAB_0040b841:\u000a    uVar9 = 0;\u000a  }\u000a  else {\u000a    pgVar4 = getgrnam(local_40);\u000a    endgrent();\u000a    s = local_40;\u000a    if (pgVar4 == (group *)0x0) {\u000a      sVar6 = strspn(local_40,"0123456789");\u000a      if ((int)sVar6 == 0) {\u000a        if (*s == 0) {\u000a          uVar8 = dcgettext(0,"argument to -group is empty, but should be a group name",5);\u000a          error(1,0,uVar8,uVar8);\u000a        }\u000a        else {\u000a          uVar8 = dcgettext(0,"%s is not the name of an existing group",5);\u000a          s = quotearg_n_style((char *)0x0);\u000a          error(1,0,uVar8,s);\u000a        }\u000a        *arg_ptr = iVar1;\u000a        goto LAB_0040b841;\u000a      }\u000a      if (s[(long)(int)sVar6] != 0) {\u000a        local_38 = dcgettext(0,\u000a                             "%s is not the name of an existing group and it does not look like a numeric group ID because it has the unexpected suffix %s"\u000a                             ,5);\u000a        s = quotearg_n_style((char *)0x0);\u000a        pcVar7 = quotearg_n_style((char *)0x1);\u000a        error(1,0,local_38,s,pcVar7);\u000a        *arg_ptr = iVar1;\u000a        return false;\u000a      }\u000a      _Var3 = safe_atoi(s);\u000a    }\u000a    else {\u000a      _Var3 = pgVar4->gr_gid;\u000a    }\u000a    ppVar5 = insert_primary(entry,local_40);\u000a    *(__gid_t *)ppVar5->args = _Var3;\u000a    ppVar5->est_success_rate =\u000a         *(float *)(&DAT_0041fbc8 + (ulong)(-(uint)(*(ulong *)(ppVar5->args + 8) < 100) & 4));\u000a    uVar9 = 1;\u000a  }\u000a  return (_Bool)uVar9;\u000a}\u000a\u000a
p1746
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R15,RDX\nMOV R14,RDI\nMOV EBP,dword ptr [R15]\nLEA RDX,[RSP + 0x8]\nMOV RDI,RSI\nMOV RSI,R15\nCALL 0x0040c7f0\nTEST AL,AL\nJZ 0x0040b841\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x00402be0\nMOV RBX,RAX\nCALL 0x004026f0\nTEST RBX,RBX\nJZ 0x0040b738\nMOV EBX,dword ptr [RBX + 0x10]\nMOV RSI,qword ptr [RSP + 0x8]\nMOV RDI,R14\nCALL 0x00407730\nMOV dword ptr [RAX + 0x38],EBX\nCMP qword ptr [RAX + 0x40],0x64\nSBB RCX,RCX\nAND ECX,0x4\nMOVSS XMM0,dword ptr [0x41fbc8 + RCX]\nMOVSS dword ptr [RAX + 0x24],XMM0\nMOV BL,0x1\nJMP 0x0040b843\nMOV RBX,qword ptr [RSP + 0x8]\nMOV ESI,0x421570\nMOV RDI,RBX\nCALL 0x00402ad0\nTEST EAX,EAX\nJZ 0x0040b7c3\nMOVSXD R12,EAX\nCMP byte ptr [RBX + R12*0x1],0x0\nJZ 0x0040b804\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x42157b\nMOV EDX,0x5\nCALL 0x00402910\nMOV qword ptr [RSP + 0x10],RAX\nMOV ESI,dword ptr [0x0062f0ac]\nMOV R13,qword ptr [RSP + 0x8]\nXOR EDI,EDI\nMOV RDX,R13\nCALL 0x00416290\nMOV R14,RAX\nMOV ESI,dword ptr [0x0062f0ac]\nADD R12,R13\nMOV EDI,0x1\nMOV RDX,R12\nCALL 0x00416290\nMOV R8,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,R14\nCALL 0x00402d90\nMOV dword ptr [R15],EBP\nJMP 0x0040b843\nCMP byte ptr [RBX],0x0\nJZ 0x0040b819\nXOR EDI,EDI\nMOV ESI,0x4215f8\nMOV EDX,0x5\nCALL 0x00402910\nMOV RBX,RAX\nMOV ESI,dword ptr [0x0062f0ac]\nMOV RDX,qword ptr [RSP + 0x8]\nXOR EDI,EDI\nCALL 0x00416290\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00402d90\nJMP 0x0040b83e\nMOV ESI,dword ptr [0x0062f0ac]\nMOV RDI,RBX\nCALL 0x0040fa30\nMOV EBX,EAX\nJMP 0x0040b709\nXOR EDI,EDI\nMOV ESI,0x421620\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402d90\nMOV dword ptr [R15],EBP\nXOR EBX,EBX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1747
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 d7\n49 89 fe\n41 8b 2f\n48 8d 54 24 08\n48 89 f7\n4c 89 fe\ne8 09 11 00 00\n84 c0\n0f 84 52 01 00 00\n48 8b 7c 24 08\ne8 e7 74 ff ff\n48 89 c3\ne8 ef 6f ff ff\n48 85 db\n74 32\n8b 5b 10\n48 8b 74 24 08\n4c 89 f7\ne8 1a c0 ff ff\n89 58 38\n48 83 78 40 64\n48 19 c9\n83 e1 04\nf3 0f 10 81 c8 fb 41 00\nf3 0f 11 40 24\nb3 01\ne9 0b 01 00 00\n48 8b 5c 24 08\nbe 70 15 42 00\n48 89 df\ne8 86 73 ff ff\n85 c0\n74 75\n4c 63 e0\n42 80 3c 23 00\n0f 84 a8 00 00 00\n31 db\n31 ff\nbe 7b 15 42 00\nba 05 00 00 00\ne8 a1 71 ff ff\n48 89 44 24 10\n8b 35 32 39 22 00\n4c 8b 6c 24 08\n31 ff\n4c 89 ea\ne8 07 ab 00 00\n49 89 c6\n8b 35 1a 39 22 00\n4d 01 ec\nbf 01 00 00 00\n4c 89 e2\ne8 ee aa 00 00\n49 89 c0\nbf 01 00 00 00\n31 f6\n31 c0\n48 8b 54 24 10\n4c 89 f1\ne8 d5 75 ff ff\n41 89 2f\ne9 80 00 00 00\n80 3b 00\n74 51\n31 ff\nbe f8 15 42 00\nba 05 00 00 00\ne8 37 71 ff ff\n48 89 c3\n8b 35 ca 38 22 00\n48 8b 54 24 08\n31 ff\ne8 a2 aa 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 da\ne8 8e 75 ff ff\neb 3a\n8b 35 a2 38 22 00\n48 89 df\ne8 1e 42 00 00\n89 c3\ne9 f0 fe ff ff\n31 ff\nbe 20 16 42 00\nba 05 00 00 00\ne8 e6 70 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 52 75 ff ff\n41 89 2f\n31 db\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1748
S'.text:000000000040b6c0\n.text:000000000040b6c1\n.text:000000000040b6c3\n.text:000000000040b6c5\n.text:000000000040b6c7\n.text:000000000040b6c9\n.text:000000000040b6ca\n.text:000000000040b6ce\n.text:000000000040b6d1\n.text:000000000040b6d4\n.text:000000000040b6d7\n.text:000000000040b6dc\n.text:000000000040b6df\n.text:000000000040b6e2\n.text:000000000040b6e7\n.text:000000000040b6e9\n.text:000000000040b6ef\n.text:000000000040b6f4\n.text:000000000040b6f9\n.text:000000000040b6fc\n.text:000000000040b701\n.text:000000000040b704\n.text:000000000040b706\n.text:000000000040b709\n.text:000000000040b70e\n.text:000000000040b711\n.text:000000000040b716\n.text:000000000040b719\n.text:000000000040b71e\n.text:000000000040b721\n.text:000000000040b724\n.text:000000000040b72c\n.text:000000000040b731\n.text:000000000040b733\n.text:000000000040b738\n.text:000000000040b73d\n.text:000000000040b742\n.text:000000000040b745\n.text:000000000040b74a\n.text:000000000040b74c\n.text:000000000040b74e\n.text:000000000040b751\n.text:000000000040b756\n.text:000000000040b75c\n.text:000000000040b75e\n.text:000000000040b760\n.text:000000000040b765\n.text:000000000040b76a\n.text:000000000040b76f\n.text:000000000040b774\n.text:000000000040b77a\n.text:000000000040b77f\n.text:000000000040b781\n.text:000000000040b784\n.text:000000000040b789\n.text:000000000040b78c\n.text:000000000040b792\n.text:000000000040b795\n.text:000000000040b79a\n.text:000000000040b79d\n.text:000000000040b7a2\n.text:000000000040b7a5\n.text:000000000040b7aa\n.text:000000000040b7ac\n.text:000000000040b7ae\n.text:000000000040b7b3\n.text:000000000040b7b6\n.text:000000000040b7bb\n.text:000000000040b7be\n.text:000000000040b7c3\n.text:000000000040b7c6\n.text:000000000040b7c8\n.text:000000000040b7ca\n.text:000000000040b7cf\n.text:000000000040b7d4\n.text:000000000040b7d9\n.text:000000000040b7dc\n.text:000000000040b7e2\n.text:000000000040b7e7\n.text:000000000040b7e9\n.text:000000000040b7ee\n.text:000000000040b7f1\n.text:000000000040b7f6\n.text:000000000040b7f8\n.text:000000000040b7fa\n.text:000000000040b7fd\n.text:000000000040b802\n.text:000000000040b804\n.text:000000000040b80a\n.text:000000000040b80d\n.text:000000000040b812\n.text:000000000040b814\n.text:000000000040b819\n.text:000000000040b81b\n.text:000000000040b820\n.text:000000000040b825\n.text:000000000040b82a\n.text:000000000040b82d\n.text:000000000040b832\n.text:000000000040b834\n.text:000000000040b836\n.text:000000000040b839\n.text:000000000040b83e\n.text:000000000040b841\n.text:000000000040b843\n.text:000000000040b845\n.text:000000000040b849\n.text:000000000040b84a\n.text:000000000040b84c\n.text:000000000040b84e\n.text:000000000040b850\n.text:000000000040b852\n.text:000000000040b853\n'
p1749
tp1750
sS'freea'
p1751
(S'\n__stdcall freea(void * p)\n'
p1752
V\u000avoid freea(void *p)\u000a\u000a{\u000a  void **ppvVar1;\u000a  void *pvVar2;\u000a  void **ppvVar3;\u000a  \u000a  if ((p != (void *)0x0) && (*(int *)((long)p + -4) == 0x1415fb4a)) {\u000a    if (mmalloca_results[(ulong)p % 0x101] != (void *)0x0) {\u000a      ppvVar3 = mmalloca_results + (ulong)p % 0x101;\u000a      pvVar2 = mmalloca_results[(ulong)p % 0x101];\u000a      do {\u000a        if (pvVar2 == p) {\u000a          *ppvVar3 = *(void **)((long)p + -0x10);\u000a          free((void *)((long)p + -0x10));\u000a          return;\u000a        }\u000a        ppvVar1 = (void **)((long)pvVar2 + -0x10);\u000a        ppvVar3 = (void **)((long)pvVar2 + -0x10);\u000a        pvVar2 = *ppvVar1;\u000a      } while (*ppvVar1 != (void *)0x0);\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p1753
S'TEST RDI,RDI\nJZ 0x0041c0e5\nCMP dword ptr [RDI + -0x4],0x1415fb4a\nJNZ 0x0041c0e5\nMOV RCX,-0xff00ff00ff00ff\nMOV RAX,RDI\nMUL RCX\nSHR RDX,0x8\nMOV RAX,RDX\nSHL RAX,0x8\nADD RAX,RDX\nMOV RCX,RDI\nSUB RCX,RAX\nMOV RAX,qword ptr [0x62e7f0 + RCX*0x8]\nTEST RAX,RAX\nJZ 0x0041c0e5\nLEA RCX,[0x62e7f0 + RCX*0x8]\nNOP word ptr [RAX + RAX*0x1]\nCMP RAX,RDI\nJZ 0x0041c0e6\nMOV RCX,RAX\nMOV RAX,qword ptr [RAX + -0x10]\nADD RCX,-0x10\nTEST RAX,RAX\nJNZ 0x0041c0d0\nRET\nMOV RAX,qword ptr [RDI + -0x10]\nADD RDI,-0x10\nMOV qword ptr [RCX],RAX\nJMP 0x00402710\n'
p1754
S'48 85 ff\n74 60\n81 7f fc 4a fb 15 14\n75 57\n48 b9 01 ff 00 ff 00 ff 00 ff\n48 89 f8\n48 f7 e1\n48 c1 ea 08\n48 89 d0\n48 c1 e0 08\n48 01 d0\n48 89 f9\n48 29 c1\n48 8b 04 cd f0 e7 62 00\n48 85 c0\n74 26\n48 8d 0c cd f0 e7 62 00\n66 0f 1f 84 00 00 00 00 00\n48 39 f8\n74 11\n48 89 c1\n48 8b 40 f0\n48 83 c1 f0\n48 85 c0\n75 eb\nc3\n48 8b 47 f0\n48 83 c7 f0\n48 89 01\ne9 1a 66 fe ff\n'
p1755
S'.text:000000000041c080\n.text:000000000041c083\n.text:000000000041c085\n.text:000000000041c08c\n.text:000000000041c08e\n.text:000000000041c098\n.text:000000000041c09b\n.text:000000000041c09e\n.text:000000000041c0a2\n.text:000000000041c0a5\n.text:000000000041c0a9\n.text:000000000041c0ac\n.text:000000000041c0af\n.text:000000000041c0b2\n.text:000000000041c0ba\n.text:000000000041c0bd\n.text:000000000041c0bf\n.text:000000000041c0c7\n.text:000000000041c0d0\n.text:000000000041c0d3\n.text:000000000041c0d5\n.text:000000000041c0d8\n.text:000000000041c0dc\n.text:000000000041c0e0\n.text:000000000041c0e3\n.text:000000000041c0e5\n.text:000000000041c0e6\n.text:000000000041c0ea\n.text:000000000041c0ee\n.text:000000000041c0f1\n'
p1756
tp1757
sS'close_stdout'
p1758
(S'\n__stdcall close_stdout()\n'
p1759
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_0040fe87;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,&DAT_0042542f,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_0040fe87:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p1760
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x0062de28]\nCALL 0x0041ba90\nTEST EAX,EAX\nJZ 0x0040fe87\nCMP byte ptr [0x0062e658],0x0\nJZ 0x0040fe9c\nCALL 0x00402770\nCMP dword ptr [RAX],0x20\nJNZ 0x0040fe9c\nMOV RDI,qword ptr [0x0062de60]\nCALL 0x0041ba90\nTEST EAX,EAX\nJNZ 0x0040fee1\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x4227fa\nMOV EDX,0x5\nCALL 0x00402910\nMOV R14,RAX\nMOV RBX,qword ptr [0x0062e650]\nCALL 0x00402770\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x0040feec\nXOR EDI,EDI\nMOV EDX,0x42542f\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00402d90\nMOV EDI,dword ptr [0x0062dda0]\nCALL 0x004027b0\nMOV EDI,dword ptr [0x0062dda0]\nCALL 0x004027b0\nMOV RDI,RBX\nCALL 0x00416430\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x422806\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00402d90\nMOV EDI,dword ptr [0x0062dda0]\nCALL 0x004027b0\n'
p1761
S'55\n41 56\n53\n48 8b 3d bd df 21 00\ne8 20 bc 00 00\n85 c0\n74 13\n80 3d dd e7 21 00 00\n74 1f\ne8 ee 28 ff ff\n83 38 20\n75 15\n48 8b 3d d2 df 21 00\ne8 fd bb 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe fa 27 42 00\nba 05 00 00 00\ne8 63 2a ff ff\n49 89 c6\n48 8b 1d 99 e7 21 00\ne8 b4 28 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 2f 54 42 00\n31 c0\n89 ee\n4c 89 f1\ne8 ba 2e ff ff\n8b 3d c4 de 21 00\ne8 cf 28 ff ff\n8b 3d b9 de 21 00\ne8 c4 28 ff ff\n48 89 df\ne8 3c 65 00 00\n48 89 c1\n31 ff\nba 06 28 42 00\n31 c0\n89 ee\n4d 89 f0\ne8 86 2e ff ff\n8b 3d 90 de 21 00\ne8 9b 28 ff ff\n'
p1762
S'.text:000000000040fe60\n.text:000000000040fe61\n.text:000000000040fe63\n.text:000000000040fe64\n.text:000000000040fe6b\n.text:000000000040fe70\n.text:000000000040fe72\n.text:000000000040fe74\n.text:000000000040fe7b\n.text:000000000040fe7d\n.text:000000000040fe82\n.text:000000000040fe85\n.text:000000000040fe87\n.text:000000000040fe8e\n.text:000000000040fe93\n.text:000000000040fe95\n.text:000000000040fe97\n.text:000000000040fe98\n.text:000000000040fe9a\n.text:000000000040fe9b\n.text:000000000040fe9c\n.text:000000000040fe9e\n.text:000000000040fea3\n.text:000000000040fea8\n.text:000000000040fead\n.text:000000000040feb0\n.text:000000000040feb7\n.text:000000000040febc\n.text:000000000040febf\n.text:000000000040fec1\n.text:000000000040fec3\n.text:000000000040fec5\n.text:000000000040feca\n.text:000000000040fecc\n.text:000000000040fece\n.text:000000000040fed1\n.text:000000000040fed6\n.text:000000000040fedc\n.text:000000000040fee1\n.text:000000000040fee7\n.text:000000000040feec\n.text:000000000040feef\n.text:000000000040fef4\n.text:000000000040fef7\n.text:000000000040fef9\n.text:000000000040fefe\n.text:000000000040ff00\n.text:000000000040ff02\n.text:000000000040ff05\n.text:000000000040ff0a\n.text:000000000040ff10\n'
p1763
tp1764
sS'getgroup'
p1765
(S'\n__stdcall getgroup()\n'
p1766
V\u000achar * getgroup(void)\u000a\u000a{\u000a  group *pgVar1;\u000a  size_t sVar2;\u000a  userid *puVar3;\u000a  userid *puVar4;\u000a  __gid_t __gid;\u000a  char *__s;\u000a  \u000a  puVar4 = group_alist;\u000a  if (group_alist != (userid *)0x0) {\u000a    do {\u000a      if (puVar4->id == __gid) goto LAB_00411e1a;\u000a      puVar4 = puVar4->next;\u000a    } while (puVar4 != (userid *)0x0);\u000a  }\u000a  pgVar1 = getgrgid(__gid);\u000a  if (pgVar1 == (group *)0x0) {\u000a    __s = "";\u000a  }\u000a  else {\u000a    __s = pgVar1->gr_name;\u000a  }\u000a  sVar2 = strlen(__s);\u000a  puVar4 = (userid *)xmalloc(sVar2 + 0x11);\u000a  puVar4->id = __gid;\u000a  strcpy((char *)(puVar4 + 1),__s);\u000a  puVar4->next = group_alist;\u000a  group_alist = puVar4;\u000aLAB_00411e1a:\u000a  puVar3 = (userid *)0x0;\u000a  if (*(char *)&puVar4[1].id != 0) {\u000a    puVar3 = puVar4 + 1;\u000a  }\u000a  return (char *)puVar3;\u000a}\u000a\u000a
p1767
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EBP,EDI\nMOV RBX,qword ptr [0x0062e670]\nTEST RBX,RBX\nJNZ 0x00411dc9\nJMP 0x00411dcf\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJZ 0x00411dcf\nCMP dword ptr [RBX],EBP\nJNZ 0x00411dc0\nJMP 0x00411e1a\nMOV EDI,EBP\nCALL 0x004029c0\nTEST RAX,RAX\nJZ 0x00411de0\nMOV R14,qword ptr [RAX]\nJMP 0x00411de6\nMOV R14D,0x41e69a\nMOV RDI,R14\nCALL 0x00402930\nLEA RDI,[RAX + 0x11]\nCALL 0x00417220\nMOV RBX,RAX\nMOV dword ptr [RBX],EBP\nLEA RDI,[RBX + 0x10]\nMOV RSI,R14\nCALL 0x004027c0\nMOV RAX,qword ptr [0x0062e670]\nMOV qword ptr [RBX + 0x8],RAX\nMOV qword ptr [0x0062e670],RBX\nXOR EAX,EAX\nCMP byte ptr [RBX + 0x10],0x0\nLEA RCX,[RBX + 0x10]\nCMOVNZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1768
S'55\n41 56\n53\n89 fd\n48 8b 1d c3 c8 21 00\n48 85 db\n75 17\neb 1b\n48 8b 5b 08\n48 85 db\n74 06\n39 2b\n75 f3\neb 4b\n89 ef\ne8 ea 0b ff ff\n48 85 c0\n74 05\n4c 8b 30\neb 06\n41 be 9a e6 41 00\n4c 89 f7\ne8 42 0b ff ff\n48 8d 78 11\ne8 29 54 00 00\n48 89 c3\n89 2b\n48 8d 7b 10\n4c 89 f6\ne8 b8 09 ff ff\n48 8b 05 61 c8 21 00\n48 89 43 08\n48 89 1d 56 c8 21 00\n31 c0\n80 7b 10 00\n48 8d 4b 10\n48 0f 45 c1\n5b\n41 5e\n5d\nc3\n'
p1769
S'.text:0000000000411da0\n.text:0000000000411da1\n.text:0000000000411da3\n.text:0000000000411da4\n.text:0000000000411da6\n.text:0000000000411dad\n.text:0000000000411db0\n.text:0000000000411db2\n.text:0000000000411dc0\n.text:0000000000411dc4\n.text:0000000000411dc7\n.text:0000000000411dc9\n.text:0000000000411dcb\n.text:0000000000411dcd\n.text:0000000000411dcf\n.text:0000000000411dd1\n.text:0000000000411dd6\n.text:0000000000411dd9\n.text:0000000000411ddb\n.text:0000000000411dde\n.text:0000000000411de0\n.text:0000000000411de6\n.text:0000000000411de9\n.text:0000000000411dee\n.text:0000000000411df2\n.text:0000000000411df7\n.text:0000000000411dfa\n.text:0000000000411dfc\n.text:0000000000411e00\n.text:0000000000411e03\n.text:0000000000411e08\n.text:0000000000411e0f\n.text:0000000000411e13\n.text:0000000000411e1a\n.text:0000000000411e1c\n.text:0000000000411e20\n.text:0000000000411e24\n.text:0000000000411e28\n.text:0000000000411e29\n.text:0000000000411e2b\n.text:0000000000411e2c\n'
p1770
tp1771
sS'get_stat_Ytime'
p1772
(S'\n__stdcall get_stat_Ytime(stat * p, timespec * ret)\n'
p1773
V\u000aint get_stat_Ytime(stat *p,timespec *ret)\u000a\u000a{\u000a  undefined8 *in_RDX;\u000a  int iVar1;\u000a  timespec tVar2;\u000a  \u000a  iVar1 = (int)ret;\u000a  if (iVar1 < 99) {\u000a    if (iVar1 == 0x42) {\u000a      tVar2 = get_stat_birthtime(p);\u000a      *in_RDX = SUB168((undefined  [16])tVar2,0);\u000a      in_RDX[1] = SUB168((undefined  [16])tVar2 >> 0x40,0);\u000a      return SUB164((undefined  [16])tVar2 >> 0x7f,0) ^ 1;\u000a    }\u000a    if (iVar1 != 0x61) {\u000aLAB_0040adb9:\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("0","parser.c",0x1f9,\u000a                    "int get_stat_Ytime(const struct stat *, char, struct timespec *)");\u000a    }\u000a    tVar2 = get_stat_atime(p);\u000a  }\u000a  else {\u000a    if (iVar1 == 99) {\u000a      tVar2 = get_stat_ctime(p);\u000a    }\u000a    else {\u000a      if (iVar1 != 0x6d) goto LAB_0040adb9;\u000a      tVar2 = get_stat_mtime(p);\u000a    }\u000a  }\u000a  *in_RDX = SUB168((undefined  [16])tVar2,0);\u000a  in_RDX[1] = SUB168((undefined  [16])tVar2 >> 0x40,0);\u000a  return 1;\u000a}\u000a\u000a
p1774
S'PUSH RBX\nMOV RBX,RDX\nCMP ESI,0x62\nJG 0x0040ad7a\nCMP ESI,0x42\nJZ 0x0040ad8b\nCMP ESI,0x61\nJNZ 0x0040adb9\nCALL 0x00416c70\nJMP 0x0040adab\nCMP ESI,0x63\nJZ 0x0040ada6\nCMP ESI,0x6d\nJNZ 0x0040adb9\nCALL 0x00416c90\nJMP 0x0040adab\nCALL 0x00416ca0\nMOV RCX,RAX\nMOV RAX,RDX\nMOV qword ptr [RBX],RCX\nMOV qword ptr [RBX + 0x8],RAX\nSHR RAX,0x3f\nXOR EAX,0x1\nJMP 0x0040adb7\nCALL 0x00416c80\nMOV qword ptr [RBX],RAX\nMOV qword ptr [RBX + 0x8],RDX\nMOV EAX,0x1\nPOP RBX\nRET\nMOV EDI,0x41cdbe\nMOV ESI,0x420cb7\nMOV EDX,0x1f9\nMOV ECX,0x420e2d\nCALL 0x00402a40\n'
p1775
S'53\n48 89 d3\n83 fe 62\n7f 11\n83 fe 42\n74 1d\n83 fe 61\n75 46\ne8 f8 be 00 00\neb 31\n83 fe 63\n74 27\n83 fe 6d\n75 35\ne8 07 bf 00 00\neb 20\ne8 10 bf 00 00\n48 89 c1\n48 89 d0\n48 89 0b\n48 89 43 08\n48 c1 e8 3f\n83 f0 01\neb 11\ne8 d5 be 00 00\n48 89 03\n48 89 53 08\nb8 01 00 00 00\n5b\nc3\nbf be cd 41 00\nbe b7 0c 42 00\nba f9 01 00 00\nb9 2d 0e 42 00\ne8 6e 7c ff ff\n'
p1776
S'.text:000000000040ad60\n.text:000000000040ad61\n.text:000000000040ad64\n.text:000000000040ad67\n.text:000000000040ad69\n.text:000000000040ad6c\n.text:000000000040ad6e\n.text:000000000040ad71\n.text:000000000040ad73\n.text:000000000040ad78\n.text:000000000040ad7a\n.text:000000000040ad7d\n.text:000000000040ad7f\n.text:000000000040ad82\n.text:000000000040ad84\n.text:000000000040ad89\n.text:000000000040ad8b\n.text:000000000040ad90\n.text:000000000040ad93\n.text:000000000040ad96\n.text:000000000040ad99\n.text:000000000040ad9d\n.text:000000000040ada1\n.text:000000000040ada4\n.text:000000000040ada6\n.text:000000000040adab\n.text:000000000040adae\n.text:000000000040adb2\n.text:000000000040adb7\n.text:000000000040adb8\n.text:000000000040adb9\n.text:000000000040adbe\n.text:000000000040adc3\n.text:000000000040adc8\n.text:000000000040adcd\n'
p1777
tp1778
sS'pred_iname'
p1779
(S'\n__stdcall pred_iname(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p1780
V\u000a_Bool pred_iname(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = pred_name_common(pathname,*(char **)pred_ptr->args);\u000a  return _Var1;\u000a}\u000a\u000a
p1781
S'MOV RSI,qword ptr [RDX + 0x38]\nMOV EDX,0x10\nJMP 0x00404be0\n'
p1782
S'48 8b 72 38\nba 10 00 00 00\ne9 62 0a 00 00\n'
p1783
S'.text:0000000000404170\n.text:0000000000404174\n.text:0000000000404179\n'
p1784
tp1785
sS'is_basic'
p1786
(S'\n__stdcall is_basic()\n'
p1787
V\u000a_Bool is_basic(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)((*(uint *)((long)is_basic_table + (ulong)(in_EDI >> 3 & 0x1c)) >> (in_EDI & 0x1f) &\u000a                 1) != 0);\u000a}\u000a\u000a
p1788
S'MOV EAX,EDI\nSHR EAX,0x3\nAND EAX,0x1c\nMOV EAX,dword ptr [0x425900 + RAX]\nBT EAX,EDI\nSETC AL\nRET\n'
p1789
S'89 f8\nc1 e8 03\n83 e0 1c\n8b 80 00 59 42 00\n0f a3 f8\n0f 92 c0\nc3\n'
p1790
S'.text:000000000041c170\n.text:000000000041c172\n.text:000000000041c175\n.text:000000000041c178\n.text:000000000041c17e\n.text:000000000041c181\n.text:000000000041c184\n'
p1791
tp1792
sS'ferror'
p1793
(S'\n__stdcall ferror(FILE * __stream)\n'
p1794
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_0062d098)();\u000a  return iVar1;\u000a}\u000a\u000a
p1795
S'JMP qword ptr [0x0062d098]\n'
p1796
S'ff 25 a2 a8 22 00\n'
p1797
S'.plt:00000000004027f0\n'
p1798
tp1799
sS'__libc_csu_fini'
p1800
(S'\n__stdcall __libc_csu_fini()\n'
p1801
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1802
S'RET\n'
p1803
S'f3 c3\n'
p1804
S'.text:000000000041c450\n'
p1805
tp1806
sS'insert_primary'
p1807
(S'\n__stdcall insert_primary(parser_table * entry, char * arg)\n'
p1808
V\u000apredicate * insert_primary(parser_table *entry,char *arg)\u000a\u000a{\u000a  predicate *ppVar1;\u000a  \u000a  if (entry->pred_func != (_Bool (*)(char *,stat *,predicate *))0x0) {\u000a    ppVar1 = insert_primary_withpred(entry,entry->pred_func,arg);\u000a    return ppVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("entry->pred_func != NULL","util.c",0x81,\u000a                "struct predicate *insert_primary(const struct parser_table *, const char *)");\u000a}\u000a\u000a
p1809
S'MOV RAX,RSI\nMOV RSI,qword ptr [RDI + 0x18]\nTEST RSI,RSI\nJZ 0x00407741\nMOV RDX,RAX\nJMP 0x004076f0\nPUSH RAX\nMOV EDI,0x41e002\nMOV ESI,0x41e01b\nMOV EDX,0x81\nMOV ECX,0x41e022\nCALL 0x00402a40\n'
p1810
S'48 89 f0\n48 8b 77 18\n48 85 f6\n74 05\n48 89 c2\neb af\n50\nbf 02 e0 41 00\nbe 1b e0 41 00\nba 81 00 00 00\nb9 22 e0 41 00\ne8 e5 b2 ff ff\n'
p1811
S'.text:0000000000407730\n.text:0000000000407733\n.text:0000000000407737\n.text:000000000040773a\n.text:000000000040773c\n.text:000000000040773f\n.text:0000000000407741\n.text:0000000000407742\n.text:0000000000407747\n.text:000000000040774c\n.text:0000000000407751\n.text:0000000000407756\n'
p1812
tp1813
sS'print_list'
p1814
(S'\n__stdcall print_list(FILE * fp, predicate * node)\n'
p1815
V\u000avoid print_list(FILE *fp,predicate *node)\u000a\u000a{\u000a  char *pcVar1;\u000a  char name [256];\u000a  char acStack280 [256];\u000a  \u000a  if (node != (predicate *)0x0) {\u000a    do {\u000a      pcVar1 = blank_rtrim(node->p_name,acStack280);\u000a      fprintf((FILE *)fp,"[%s] ",pcVar1,pcVar1);\u000a      node = node->pred_next;\u000a    } while (node != (predicate *)0x0);\u000a  }\u000a  fputc(10,(FILE *)fp);\u000a  return;\u000a}\u000a\u000a
p1816
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x100\nMOV RBX,RSI\nMOV R14,RDI\nTEST RBX,RBX\nJZ 0x00404cfd\nMOV R15,RSP\nNOP word ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RBX + 0x8]\nMOV RSI,R15\nCALL 0x00404d20\nMOV RCX,RAX\nMOV ESI,0x41cf93\nXOR EAX,EAX\nMOV RDI,R14\nMOV RDX,RCX\nCALL 0x00402ba0\nMOV RBX,qword ptr [0x108 + RBX]\nTEST RBX,RBX\nJNZ 0x00404cd0\nMOV EDI,0xa\nMOV RSI,R14\nCALL 0x00402af0\nADD RSP,0x100\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1817
S'41 57\n41 56\n53\n48 81 ec 00 01 00 00\n48 89 f3\n49 89 fe\n48 85 db\n74 36\n49 89 e7\n66 0f 1f 44 00 00\n48 8b 7b 08\n4c 89 fe\ne8 44 00 00 00\n48 89 c1\nbe 93 cf 41 00\n31 c0\n4c 89 f7\n48 89 ca\ne8 af de ff ff\n48 8b 9b 08 01 00 00\n48 85 db\n75 d3\nbf 0a 00 00 00\n4c 89 f6\ne8 e6 dd ff ff\n48 81 c4 00 01 00 00\n5b\n41 5e\n41 5f\nc3\n'
p1818
S'.text:0000000000404cb0\n.text:0000000000404cb2\n.text:0000000000404cb4\n.text:0000000000404cb5\n.text:0000000000404cbc\n.text:0000000000404cbf\n.text:0000000000404cc2\n.text:0000000000404cc5\n.text:0000000000404cc7\n.text:0000000000404cca\n.text:0000000000404cd0\n.text:0000000000404cd4\n.text:0000000000404cd7\n.text:0000000000404cdc\n.text:0000000000404cdf\n.text:0000000000404ce4\n.text:0000000000404ce6\n.text:0000000000404ce9\n.text:0000000000404cec\n.text:0000000000404cf1\n.text:0000000000404cf8\n.text:0000000000404cfb\n.text:0000000000404cfd\n.text:0000000000404d02\n.text:0000000000404d05\n.text:0000000000404d0a\n.text:0000000000404d11\n.text:0000000000404d12\n.text:0000000000404d14\n.text:0000000000404d16\n'
p1819
tp1820
sS'parse_begin_user_args'
p1821
(S'\n__stdcall parse_begin_user_args(char * * args, predicate * last, predicate * predicates)\n'
p1822
V\u000avoid parse_begin_user_args(char **args,predicate *last,predicate *predicates)\u000a\u000a{\u000a  first_nonoption_arg = (char *)0x0;\u000a  return;\u000a}\u000a\u000a
p1823
S'MOV qword ptr [0x0062e618],0x0\nRET\n'
p1824
S'48 c7 05 3d 3e 22 00 00 00 00 00\nc3\n'
p1825
S'.text:000000000040a7d0\n.text:000000000040a7db\n'
p1826
tp1827
sS'closedir'
p1828
(S'\n__stdcall closedir(DIR * __dirp)\n'
p1829
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint closedir(DIR *__dirp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_closedir_0062d210)();\u000a  return iVar1;\u000a}\u000a\u000a
p1830
S'JMP qword ptr [0x0062d210]\n'
p1831
S'ff 25 2a a7 22 00\n'
p1832
S'.plt:0000000000402ae0\n'
p1833
tp1834
sS'do_parse_xmin'
p1835
(S'\n__stdcall do_parse_xmin(parser_table * entry, char * * argv, int * arg_ptr)\n'
p1836
V\u000a_Bool do_parse_xmin(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  int iVar1;\u000a  _Bool _Var2;\u000a  predicate *ppVar3;\u000a  xval in_ECX;\u000a  float fVar4;\u000a  time_val tval;\u000a  char *local_40;\u000a  xval local_38;\u000a  comparison_type cStack52;\u000a  undefined4 local_30;\u000a  undefined4 uStack44;\u000a  __syscall_slong_t local_28;\u000a  \u000a  iVar1 = *arg_ptr;\u000a  _Var2 = collect_arg(argv,arg_ptr,&local_40);\u000a  if (_Var2 != false) {\u000a    local_38 = in_ECX;\u000a    _Var2 = get_relative_timestamp\u000a                      (local_40,(time_val *)&local_38,DAT_0041fbe8,\u000a                       (char *)(options.cur_day_start.tv_sec + 0x15180));\u000a    if (_Var2 != false) {\u000a      ppVar3 = insert_primary(entry,local_40);\u000a      *(__syscall_slong_t *)(ppVar3->args + 0x10) = local_28;\u000a      *(xval *)ppVar3->args = local_38;\u000a      *(comparison_type *)(ppVar3->args + 4) = cStack52;\u000a      *(undefined4 *)(ppVar3->args + 8) = local_30;\u000a      *(undefined4 *)(ppVar3->args + 0xc) = uStack44;\u000a      fVar4 = estimate_timestamp_success_rate(CONCAT44(uStack44,local_30));\u000a      ppVar3->est_success_rate = fVar4;\u000a      return true;\u000a    }\u000a    *arg_ptr = iVar1;\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1837
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x28\nMOV EBP,ECX\nMOV RBX,RDX\nMOV R14,RDI\nMOV R15D,dword ptr [RBX]\nLEA RDX,[RSP + 0x8]\nMOV RDI,RSI\nMOV RSI,RBX\nCALL 0x0040c7f0\nTEST AL,AL\nJZ 0x0040c7d9\nMOV RCX,qword ptr [0x0062f070]\nMOV EDX,0x15180\nADD RDX,qword ptr [0x0062f068]\nMOV dword ptr [RSP + 0x10],EBP\nMOV RDI,qword ptr [RSP + 0x8]\nLEA RSI,[RSP + 0x10]\nMOVSD XMM0,qword ptr [0x0041fbe8]\nMOV R8D,0x420fb4\nCALL 0x0040c810\nTEST AL,AL\nJZ 0x0040c7d6\nMOV RSI,qword ptr [RSP + 0x8]\nMOV RDI,R14\nCALL 0x00407730\nMOV RBX,RAX\nMOV RAX,qword ptr [RSP + 0x20]\nMOV qword ptr [RBX + 0x48],RAX\nMOVUPS XMM0,xmmword ptr [RSP + 0x10]\nMOVUPS xmmword ptr [RBX + 0x38],XMM0\nMOV RDI,qword ptr [RSP + 0x18]\nCALL 0x0040ade0\nMOVSS dword ptr [RBX + 0x24],XMM0\nMOV AL,0x1\nJMP 0x0040c7db\nMOV dword ptr [RBX],R15D\nXOR EAX,EAX\nADD RSP,0x28\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1838
S'55\n41 57\n41 56\n53\n48 83 ec 28\n89 cd\n48 89 d3\n49 89 fe\n44 8b 3b\n48 8d 54 24 08\n48 89 f7\n48 89 de\ne8 8b 00 00 00\n84 c0\n74 70\n48 8b 0d 00 29 22 00\nba 80 51 01 00\n48 03 15 ec 28 22 00\n89 6c 24 10\n48 8b 7c 24 08\n48 8d 74 24 10\nf2 0f 10 05 56 34 01 00\n41 b8 b4 0f 42 00\ne8 73 00 00 00\n84 c0\n74 35\n48 8b 74 24 08\n4c 89 f7\ne8 82 af ff ff\n48 89 c3\n48 8b 44 24 20\n48 89 43 48\n0f 10 44 24 10\n0f 11 43 38\n48 8b 7c 24 18\ne8 13 e6 ff ff\nf3 0f 11 43 24\nb0 01\neb 05\n44 89 3b\n31 c0\n48 83 c4 28\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1839
S'.text:000000000040c740\n.text:000000000040c741\n.text:000000000040c743\n.text:000000000040c745\n.text:000000000040c746\n.text:000000000040c74a\n.text:000000000040c74c\n.text:000000000040c74f\n.text:000000000040c752\n.text:000000000040c755\n.text:000000000040c75a\n.text:000000000040c75d\n.text:000000000040c760\n.text:000000000040c765\n.text:000000000040c767\n.text:000000000040c769\n.text:000000000040c770\n.text:000000000040c775\n.text:000000000040c77c\n.text:000000000040c780\n.text:000000000040c785\n.text:000000000040c78a\n.text:000000000040c792\n.text:000000000040c798\n.text:000000000040c79d\n.text:000000000040c79f\n.text:000000000040c7a1\n.text:000000000040c7a6\n.text:000000000040c7a9\n.text:000000000040c7ae\n.text:000000000040c7b1\n.text:000000000040c7b6\n.text:000000000040c7ba\n.text:000000000040c7bf\n.text:000000000040c7c3\n.text:000000000040c7c8\n.text:000000000040c7cd\n.text:000000000040c7d2\n.text:000000000040c7d4\n.text:000000000040c7d6\n.text:000000000040c7d9\n.text:000000000040c7db\n.text:000000000040c7df\n.text:000000000040c7e0\n.text:000000000040c7e2\n.text:000000000040c7e4\n.text:000000000040c7e5\n'
p1840
tp1841
sS'security_check_context_raw'
p1842
(S'\n__stdcall security_check_context_raw(security_context_t con)\n'
p1843
V\u000aint security_check_context_raw(security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p1844
S'PUSH RAX\nCALL 0x00402770\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p1845
S'50\ne8 ca bb fe ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p1846
S'.text:0000000000416ba0\n.text:0000000000416ba1\n.text:0000000000416ba6\n.text:0000000000416bac\n.text:0000000000416bb1\n.text:0000000000416bb2\n'
p1847
tp1848
sS'build_expression_tree'
p1849
(S'\n__stdcall build_expression_tree(char * * argv)\n'
p1850
V\u000apredicate * build_expression_tree(char **argv)\u000a\u000a{\u000a  int iVar1;\u000a  _Bool _Var2;\u000a  parser_table *entry;\u000a  parser_table *search_name;\u000a  parser_table *entry_00;\u000a  undefined8 uVar3;\u000a  int in_EDX;\u000a  char **argv_00;\u000a  char *pcVar4;\u000a  uint uVar5;\u000a  predicate *predicates;\u000a  long lVar6;\u000a  int local_48;\u000a  uint local_44;\u000a  predicate *local_40;\u000a  parser_table *local_38;\u000a  \u000a  uVar5 = (uint)argv;\u000a  predicates = (predicate *)0x0;\u000a  start_points = argv_00 + (long)in_EDX;\u000a  local_48 = in_EDX;\u000a  local_44 = uVar5;\u000a  if (in_EDX < (int)uVar5) {\u000a    do {\u000a      _Var2 = looks_like_expression(argv_00[(long)local_48]);\u000a      if (_Var2 != false) break;\u000a      num_start_points = num_start_points + 1;\u000a      local_48 = local_48 + 1;\u000a    } while (local_48 < (int)uVar5);\u000a  }\u000a  entry = find_parser("(");\u000a  search_name = find_parser(")");\u000a  entry_00 = find_parser("print");\u000a  if (entry == (parser_table *)0x0) {\u000aLAB_00406115:\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("entry_open != NULL","tree.c",0x4ef,\u000a                  "struct predicate *build_expression_tree(int, char **, int)");\u000a  }\u000a  if (search_name == (parser_table *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("entry_close != NULL","tree.c",0x4f0,\u000a                  "struct predicate *build_expression_tree(int, char **, int)");\u000a  }\u000a  if (entry_00 == (parser_table *)0x0) {\u000a    local_38 = search_name;\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("entry_print != NULL","tree.c",0x4f1,\u000a                  "struct predicate *build_expression_tree(int, char **, int)");\u000a  }\u000a  local_38 = search_name;\u000a  parse_openparen(entry,argv_00,(int *)&local_44);\u000a  last_pred->p_name = "(";\u000a  predicates->artificial = true;\u000a  parse_begin_user_args(argv_00,(predicate *)(ulong)local_44,last_pred);\u000a  pred_sanity_check(last_pred);\u000a  if (local_48 < (int)local_44) {\u000a    do {\u000a      state.already_issued_stat_error_msg = false;\u000a      _Var2 = looks_like_expression(argv_00[(long)local_48]);\u000a      if (_Var2 == false) {\u000a        uVar3 = dcgettext(0,"paths must precede expression: %s",5);\u000a        search_name = (parser_table *)argv_00[(long)local_48];\u000aLAB_004060d2:\u000a        error(0,0,uVar3,search_name);\u000a        usage(1);\u000a        search_name = entry;\u000aLAB_004060e1:\u000a        uVar3 = dcgettext(0,"invalid argument `%s\u005c' to `%s\u005c'",5);\u000a        error(0,0,uVar3,argv_00[(long)local_48],search_name);\u000a        usage(1);\u000a        goto LAB_00406115;\u000a      }\u000a      search_name = (parser_table *)argv_00[(long)local_48];\u000a      entry = find_parser((char *)search_name);\u000a      if (entry == (parser_table *)0x0) {\u000a        pcVar4 = "unknown predicate `%s\u005c'";\u000a        goto LAB_004060b9;\u000a      }\u000a      if (entry->type != ARG_SPECIAL_PARSE) {\u000a        local_48 = local_48 + 1;\u000a      }\u000a      iVar1 = local_48;\u000a      lVar6 = (long)local_48;\u000a      _Var2 = (*entry->parser_func)(entry,argv_00,&local_48);\u000a      predicates = last_pred;\u000a      if (_Var2 == false) {\u000a        if (argv_00[(long)local_48] == (char *)0x0) {\u000a          pcVar4 = "missing argument to `%s\u005c'";\u000aLAB_004060b9:\u000a          uVar3 = dcgettext(0,pcVar4,5);\u000a          entry = search_name;\u000a          goto LAB_004060d2;\u000a        }\u000a        if ((local_48 == iVar1) && (entry->type == ARG_SPECIAL_PARSE)) {\u000a          pcVar4 = "invalid predicate `%s\u005c'";\u000a          goto LAB_004060b9;\u000a        }\u000a        goto LAB_004060e1;\u000a      }\u000a      *(parser_table **)&last_pred->p_name = search_name;\u000a      if (local_48 == iVar1) {\u000a        pcVar4 = (char *)0x0;\u000a      }\u000a      else {\u000a        pcVar4 = argv_00[lVar6];\u000a      }\u000a      predicates->arg_text = pcVar4;\u000a      pred_sanity_check(predicates);\u000a      pred_sanity_check(predicates);\u000a      entry = search_name;\u000a    } while (local_48 < (int)local_44);\u000a  }\u000a  parse_end_user_args(argv_00,(predicate *)(ulong)local_44,last_pred);\u000a  predicates = predicates;\u000a  if (predicates->pred_next == (predicate *)0x0) {\u000a    local_40 = predicates;\u000a    predicates = predicates->pred_next;\u000a    last_pred = predicates;\u000a    free(predicates);\u000a    parse_print(entry_00,argv_00,(int *)&local_44);\u000a    predicates = last_pred;\u000a    last_pred->p_name = "-print";\u000aLAB_00405e08:\u000a    pred_sanity_check(predicates);\u000a    pred_sanity_check(predicates);\u000a  }\u000a  else {\u000a    _Var2 = default_prints(predicates->pred_next);\u000a    predicates = predicates;\u000a    if (_Var2 != false) {\u000a      parse_closeparen(local_38,argv_00,(int *)&local_44);\u000a      predicates = last_pred;\u000a      last_pred->p_name = ")";\u000a      predicates->artificial = true;\u000a      pred_sanity_check(predicates);\u000a      parse_print(entry_00,argv_00,(int *)&local_44);\u000a      predicates = last_pred;\u000a      last_pred->p_name = "-print";\u000a      predicates->artificial = true;\u000a      goto LAB_00405e08;\u000a    }\u000a    local_40 = predicates;\u000a    predicates = predicates->pred_next;\u000a    pred_sanity_check(predicates);\u000a    free(predicates);\u000a  }\u000a  if (((byte)options.debug_options & 9) != 0) {\u000a    fwrite("Predicate List:\u005cn",0x10,1,(FILE *)stderr);\u000a    print_list(stderr,predicates);\u000a  }\u000a  check_option_combinations(predicates);\u000a  pred_sanity_check(predicates);\u000a  local_40 = predicates;\u000a  eval_tree = get_expr(&local_40,(predicate *)0x0);\u000a  calculate_derived_rates(eval_tree);\u000a  if (local_40 != (predicate *)0x0) {\u000a    if (local_40->pred_func == pred_closeparen) {\u000a      pcVar4 = "you have too many \u005c')\u005c'";\u000a    }\u000a    else {\u000a      if (local_40->p_name != (char *)0x0) {\u000a        uVar3 = dcgettext(0,"unexpected extra predicate \u005c'%s\u005c'",5);\u000a        error(1,0,uVar3,local_40->p_name);\u000a        goto joined_r0x00405f25;\u000a      }\u000a      pcVar4 = "unexpected extra predicate";\u000a    }\u000a    uVar3 = dcgettext(0,pcVar4,5);\u000a    error(1,0,uVar3,uVar3);\u000a  }\u000ajoined_r0x00405f25:\u000a  if (((byte)options.debug_options & 9) != 0) {\u000a    fwrite("Eval Tree:\u005cn",0xb,1,(FILE *)stderr);\u000a    print_tree(stderr,eval_tree);\u000a  }\u000a  estimate_costs(eval_tree);\u000a  opt_expr(&eval_tree);\u000a  check_normalization(eval_tree);\u000a  do_arm_swaps();\u000a  check_normalization(eval_tree);\u000a  if (((byte)options.debug_options & 9) != 0) {\u000a    fwrite("Optimized Eval Tree:\u005cn",0x15,1,(FILE *)stderr);\u000a    print_tree(stderr,eval_tree);\u000a    fwrite("Optimized command line:\u005cn",0x18,1,(FILE *)stderr);\u000a    print_optlist(stderr,eval_tree);\u000a    fputc(10,(FILE *)stderr);\u000a  }\u000a  return eval_tree;\u000a}\u000a\u000a
p1851
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,RSI\nMOV dword ptr [RSP + 0x4],EDI\nMOV qword ptr [0x0062dea0],0x0\nMOVSXD RAX,EDX\nLEA RCX,[R12 + RAX*0x8]\nMOV qword ptr [0x0062de90],RCX\nMOV dword ptr [RSP],EAX\nCMP dword ptr [RSP + 0x4],EAX\nJLE 0x00405be8\nMOV EBX,dword ptr [RSP + 0x4]\nNOP dword ptr [RAX + RAX*0x1]\nMOVSXD RAX,EDX\nMOV RDI,qword ptr [R12 + RAX*0x8]\nMOV ESI,0x1\nCALL 0x00408350\nTEST AL,AL\nJNZ 0x00405be8\nINC qword ptr [0x0062de88]\nMOV EDX,dword ptr [RSP]\nINC EDX\nMOV dword ptr [RSP],EDX\nCMP EDX,EBX\nJL 0x00405bc0\nMOV EDI,0x421c1b\nCALL 0x0040a7f0\nMOV RBX,RAX\nMOV EDI,0x41dc00\nCALL 0x0040a7f0\nMOV RBP,RAX\nMOV EDI,0x41d67c\nCALL 0x0040a7f0\nMOV R14,RAX\nTEST RBX,RBX\nJZ 0x00406115\nTEST RBP,RBP\nJZ 0x0040612e\nMOV qword ptr [RSP + 0x10],RBP\nTEST R14,R14\nJZ 0x00406147\nLEA RDX,[RSP + 0x4]\nMOV RDI,RBX\nMOV RSI,R12\nCALL 0x0040a930\nMOV RAX,qword ptr [0x0062dea8]\nMOV qword ptr [RAX + 0x8],0x421c1b\nMOV RCX,qword ptr [0x0062dea0]\nMOV byte ptr [RCX + 0x29],0x1\nMOV ESI,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [0x0062dea8]\nMOV RDI,R12\nCALL 0x0040a7d0\nMOV RDI,qword ptr [0x0062dea8]\nCALL 0x00404fd0\nMOV EAX,dword ptr [RSP]\nMOV ESI,dword ptr [RSP + 0x4]\nCMP EAX,ESI\nJGE 0x00405d38\nMOV R13,RSP\nNOP word ptr [RAX + RAX*0x1]\nMOV byte ptr [0x0062f038],0x0\nCDQE\nMOV RDI,qword ptr [R12 + RAX*0x8]\nXOR ESI,ESI\nCALL 0x00408350\nTEST AL,AL\nJZ 0x0040606a\nMOVSXD RAX,dword ptr [RSP]\nMOV RBX,qword ptr [R12 + RAX*0x8]\nMOV RDI,RBX\nCALL 0x0040a7f0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x0040608e\nCMP dword ptr [RBP],0x4\nJZ 0x00405cd1\nINC dword ptr [RSP]\nMOVSXD R15,dword ptr [RSP]\nMOV RDI,RBP\nMOV RSI,R12\nMOV RDX,R13\nCALL qword ptr [RBP + 0x10]\nMOVSXD RCX,dword ptr [RSP]\nTEST AL,AL\nJZ 0x00406097\nMOV RDI,qword ptr [0x0062dea8]\nMOV qword ptr [RDI + 0x8],RBX\nCMP ECX,R15D\nJNZ 0x00405d10\nXOR EAX,EAX\nJMP 0x00405d14\nMOV RAX,qword ptr [R12 + R15*0x8]\nMOV qword ptr [RDI + 0x30],RAX\nCALL 0x00404fd0\nMOV RDI,qword ptr [0x0062dea0]\nCALL 0x00404fd0\nMOV EAX,dword ptr [RSP]\nMOV ESI,dword ptr [RSP + 0x4]\nCMP EAX,ESI\nJL 0x00405c90\nMOV RDX,qword ptr [0x0062dea8]\nMOV RCX,qword ptr [0x0062dea0]\nMOV RDI,R12\nCALL 0x0040a7e0\nMOV RAX,qword ptr [0x0062dea0]\nMOV RDI,qword ptr [0x108 + RAX]\nTEST RDI,RDI\nJZ 0x00405dbe\nCALL 0x00408320\nTEST AL,AL\nJZ 0x00405e27\nLEA RBX,[RSP + 0x4]\nMOV RDI,qword ptr [RSP + 0x10]\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x0040a900\nMOV RDI,qword ptr [0x0062dea8]\nMOV qword ptr [RDI + 0x8],0x41dc00\nMOV byte ptr [RDI + 0x29],0x1\nCALL 0x00404fd0\nMOV RDI,R14\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x0040a960\nMOV RDI,qword ptr [0x0062dea8]\nMOV qword ptr [RDI + 0x8],0x41d67b\nMOV byte ptr [RDI + 0x29],0x1\nJMP 0x00405e08\nMOV qword ptr [RSP + 0x8],RAX\nMOV RAX,qword ptr [0x0062dea0]\nMOV RAX,qword ptr [0x108 + RAX]\nMOV qword ptr [0x0062dea8],RAX\nMOV qword ptr [0x0062dea0],RAX\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x00402710\nLEA RDX,[RSP + 0x4]\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x0040a960\nMOV RDI,qword ptr [0x0062dea8]\nMOV qword ptr [RDI + 0x8],0x41d67b\nCALL 0x00404fd0\nMOV RDI,qword ptr [0x0062dea0]\nCALL 0x00404fd0\nTEST byte ptr [0x0062f080],0x9\nJZ 0x00405e5b\nJMP 0x00405f8e\nMOV RBX,qword ptr [0x0062dea0]\nMOV qword ptr [RSP + 0x8],RBX\nMOV RDI,qword ptr [0x108 + RBX]\nMOV qword ptr [0x0062dea0],RDI\nCALL 0x00404fd0\nMOV RDI,RBX\nCALL 0x00402710\nTEST byte ptr [0x0062f080],0x9\nJNZ 0x00405f8e\nMOV RDI,qword ptr [0x0062dea0]\nCALL 0x0040a610\nMOV RDI,qword ptr [0x0062dea0]\nCALL 0x00404fd0\nMOV RAX,qword ptr [0x0062dea0]\nMOV qword ptr [RSP + 0x8],RAX\nLEA RDI,[RSP + 0x8]\nXOR ESI,ESI\nXOR EDX,EDX\nCALL 0x00406160\nMOV qword ptr [0x0062de98],RAX\nMOV RDI,RAX\nCALL 0x004058c0\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00405f1e\nMOV ECX,0x403d50\nCMP qword ptr [RAX],RCX\nJZ 0x00405ef0\nCMP qword ptr [RAX + 0x8],0x0\nJZ 0x00405ef9\nXOR EDI,EDI\nMOV ESI,0x41d693\nMOV EDX,0x5\nCALL 0x00402910\nMOV RDX,RAX\nMOV RAX,qword ptr [RSP + 0x8]\nMOV RCX,qword ptr [RAX + 0x8]\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00402d90\nTEST byte ptr [0x0062f080],0x9\nJZ 0x00405f2b\nJMP 0x00405fc1\nXOR EDI,EDI\nMOV ESI,0x41d9be\nJMP 0x00405f00\nXOR EDI,EDI\nMOV ESI,0x41d6b3\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402d90\nTEST byte ptr [0x0062f080],0x9\nJNZ 0x00405fc1\nMOV RDI,qword ptr [0x0062de98]\nCALL 0x004066a0\nMOV EDI,0x62de98\nCALL 0x004066d0\nMOV RDI,qword ptr [0x0062de98]\nMOV ESI,0x1\nCALL 0x00406a40\nMOV RDI,qword ptr [0x0062de98]\nCALL 0x00406ac0\nMOV RDI,qword ptr [0x0062de98]\nMOV ESI,0x1\nCALL 0x00406a40\nTEST byte ptr [0x0062f080],0x9\nJNZ 0x00405ff6\nMOV RAX,qword ptr [0x0062de98]\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x0062de60]\nMOV EDI,0x41d682\nMOV ESI,0x10\nMOV EDX,0x1\nCALL 0x00402ee0\nMOV RDI,qword ptr [0x0062de60]\nMOV RSI,qword ptr [0x0062dea0]\nCALL 0x00404cb0\nJMP 0x00405e5b\nMOV RCX,qword ptr [0x0062de60]\nMOV EDI,0x41dc0d\nMOV ESI,0xb\nMOV EDX,0x1\nCALL 0x00402ee0\nMOV RDI,qword ptr [0x0062de60]\nMOV RSI,qword ptr [0x0062de98]\nXOR EDX,EDX\nCALL 0x004063d0\nJMP 0x00405f2b\nMOV RCX,qword ptr [0x0062de60]\nMOV EDI,0x41d6ce\nMOV ESI,0x15\nMOV EDX,0x1\nCALL 0x00402ee0\nMOV RDI,qword ptr [0x0062de60]\nMOV RSI,qword ptr [0x0062de98]\nXOR EDX,EDX\nCALL 0x004063d0\nMOV RCX,qword ptr [0x0062de60]\nMOV EDI,0x41d6e4\nMOV ESI,0x18\nMOV EDX,0x1\nCALL 0x00402ee0\nMOV RDI,qword ptr [0x0062de60]\nMOV RSI,qword ptr [0x0062de98]\nCALL 0x00404d80\nMOV RSI,qword ptr [0x0062de60]\nMOV EDI,0xa\nCALL 0x00402af0\nJMP 0x00405f78\nXOR EDI,EDI\nMOV ESI,0x41d5f4\nMOV EDX,0x5\nCALL 0x00402910\nMOV RDX,RAX\nMOVSXD RAX,dword ptr [RSP]\nMOV RCX,qword ptr [R12 + RAX*0x8]\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nJMP 0x004060d2\nXOR EDI,EDI\nMOV ESI,0x41d616\nJMP 0x004060b9\nCMP qword ptr [R12 + RCX*0x8],0x0\nJNZ 0x004060a7\nXOR EDI,EDI\nMOV ESI,0x41d662\nJMP 0x004060b9\nCMP ECX,R15D\nJNZ 0x004060e1\nCMP dword ptr [RBP],0x4\nJNZ 0x004060e1\nXOR EDI,EDI\nMOV ESI,0x41d62d\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,RBX\nCALL 0x00402d90\nMOV EDI,0x1\nCALL 0x00407770\nXOR EDI,EDI\nMOV ESI,0x41d644\nMOV EDX,0x5\nCALL 0x00402910\nMOV RDX,RAX\nMOVSXD RAX,dword ptr [RSP]\nMOV RCX,qword ptr [R12 + RAX*0x8]\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV R8,RBX\nCALL 0x00402d90\nMOV EDI,0x1\nCALL 0x00407770\nMOV EDI,0x41d57e\nMOV ESI,0x41d4d0\nMOV EDX,0x4ef\nMOV ECX,0x41d591\nCALL 0x00402a40\nMOV EDI,0x41d5cc\nMOV ESI,0x41d4d0\nMOV EDX,0x4f0\nMOV ECX,0x41d591\nCALL 0x00402a40\nMOV EDI,0x41d5e0\nMOV ESI,0x41d4d0\nMOV EDX,0x4f1\nMOV ECX,0x41d591\nCALL 0x00402a40\n'
p1852
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 f4\n89 7c 24 04\n48 c7 05 00 83 22 00 00 00 00 00\n48 63 c2\n49 8d 0c c4\n48 89 0d e2 82 22 00\n89 04 24\n39 44 24 04\n7e 31\n8b 5c 24 04\n0f 1f 44 00 00\n48 63 c2\n49 8b 3c c4\nbe 01 00 00 00\ne8 7f 27 00 00\n84 c0\n75 13\n48 ff 05 ac 82 22 00\n8b 14 24\nff c2\n89 14 24\n39 da\n7c d8\nbf 1b 1c 42 00\ne8 fe 4b 00 00\n48 89 c3\nbf 00 dc 41 00\ne8 f1 4b 00 00\n48 89 c5\nbf 7c d6 41 00\ne8 e4 4b 00 00\n49 89 c6\n48 85 db\n0f 84 fd 04 00 00\n48 85 ed\n0f 84 0d 05 00 00\n48 89 6c 24 10\n4d 85 f6\n0f 84 18 05 00 00\n48 8d 54 24 04\n48 89 df\n4c 89 e6\ne8 f1 4c 00 00\n48 8b 05 62 82 22 00\n48 c7 40 08 1b 1c 42 00\n48 8b 0d 4b 82 22 00\nc6 41 29 01\n8b 74 24 04\n48 8b 15 44 82 22 00\n4c 89 e7\ne8 64 4b 00 00\n48 8b 3d 35 82 22 00\ne8 58 f3 ff ff\n8b 04 24\n8b 74 24 04\n39 f0\n0f 8d b1 00 00 00\n49 89 e5\n66 0f 1f 44 00 00\nc6 05 a1 93 22 00 00\n48 98\n49 8b 3c c4\n31 f6\ne8 ac 26 00 00\n84 c0\n0f 84 be 03 00 00\n48 63 04 24\n49 8b 1c c4\n48 89 df\ne8 34 4b 00 00\n48 89 c5\n48 85 ed\n0f 84 c6 03 00 00\n83 7d 00 04\n74 03\nff 04 24\n4c 63 3c 24\n48 89 ef\n4c 89 e6\n4c 89 ea\nff 55 10\n48 63 0c 24\n84 c0\n0f 84 aa 03 00 00\n48 8b 3d b4 81 22 00\n48 89 5f 08\n44 39 f9\n75 13\n31 c0\neb 13\n4b 8b 04 fc\n48 89 47 30\ne8 b3 f2 ff ff\n48 8b 3d 7c 81 22 00\ne8 a7 f2 ff ff\n8b 04 24\n8b 74 24 04\n39 f0\n0f 8c 58 ff ff ff\n48 8b 15 69 81 22 00\n48 8b 0d 5a 81 22 00\n4c 89 e7\ne8 92 4a 00 00\n48 8b 05 4b 81 22 00\n48 8b b8 08 01 00 00\n48 85 ff\n74 5d\ne8 ba 25 00 00\n84 c0\n0f 84 b9 00 00 00\n48 8d 5c 24 04\n48 8b 7c 24 10\n4c 89 e6\n48 89 da\ne8 7d 4b 00 00\n48 8b 3d 1e 81 22 00\n48 c7 47 08 00 dc 41 00\nc6 47 29 01\ne8 35 f2 ff ff\n4c 89 f7\n4c 89 e6\n48 89 da\ne8 b7 4b 00 00\n48 8b 3d f8 80 22 00\n48 c7 47 08 7b d6 41 00\nc6 47 29 01\neb 4a\n48 89 44 24 08\n48 8b 05 d6 80 22 00\n48 8b 80 08 01 00 00\n48 89 05 d0 80 22 00\n48 89 05 c1 80 22 00\n48 8b 7c 24 08\ne8 27 c9 ff ff\n48 8d 54 24 04\n4c 89 f7\n4c 89 e6\ne8 67 4b 00 00\n48 8b 3d a8 80 22 00\n48 c7 47 08 7b d6 41 00\ne8 c3 f1 ff ff\n48 8b 3d 8c 80 22 00\ne8 b7 f1 ff ff\nf6 05 60 92 22 00 09\n74 39\ne9 67 01 00 00\n48 8b 1d 72 80 22 00\n48 89 5c 24 08\n48 8b bb 08 01 00 00\n48 89 3d 5f 80 22 00\ne8 8a f1 ff ff\n48 89 df\ne8 c2 c8 ff ff\nf6 05 2b 92 22 00 09\n0f 85 33 01 00 00\n48 8b 3d 3e 80 22 00\ne8 a9 47 00 00\n48 8b 3d 32 80 22 00\ne8 5d f1 ff ff\n48 8b 05 26 80 22 00\n48 89 44 24 08\n48 8d 7c 24 08\n31 f6\n31 d2\ne8 d3 02 00 00\n48 89 05 04 80 22 00\n48 89 c7\ne8 24 fa ff ff\n48 8b 44 24 08\n48 85 c0\n74 78\nb9 50 3d 40 00\n48 39 08\n74 40\n48 83 78 08 00\n74 42\n31 ff\nbe 93 d6 41 00\nba 05 00 00 00\ne8 48 ca ff ff\n48 89 c2\n48 8b 44 24 08\n48 8b 48 08\nbf 01 00 00 00\n31 f6\n31 c0\ne8 ae ce ff ff\nf6 05 97 91 22 00 09\n74 40\ne9 d1 00 00 00\n31 ff\nbe be d9 41 00\neb 07\n31 ff\nbe b3 d6 41 00\nba 05 00 00 00\ne8 06 ca ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 72 ce ff ff\nf6 05 5b 91 22 00 09\n0f 85 96 00 00 00\n48 8b 3d 66 7f 22 00\ne8 69 07 00 00\nbf 98 de 62 00\ne8 8f 07 00 00\n48 8b 3d 50 7f 22 00\nbe 01 00 00 00\ne8 ee 0a 00 00\n48 8b 3d 3f 7f 22 00\ne8 62 0b 00 00\n48 8b 3d 33 7f 22 00\nbe 01 00 00 00\ne8 d1 0a 00 00\nf6 05 0a 91 22 00 09\n75 7e\n48 8b 05 19 7f 22 00\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 0d cb 7e 22 00\nbf 82 d6 41 00\nbe 10 00 00 00\nba 01 00 00 00\ne8 37 cf ff ff\n48 8b 3d b0 7e 22 00\n48 8b 35 e9 7e 22 00\ne8 f4 ec ff ff\ne9 9a fe ff ff\n48 8b 0d 98 7e 22 00\nbf 0d dc 41 00\nbe 0b 00 00 00\nba 01 00 00 00\ne8 04 cf ff ff\n48 8b 3d 7d 7e 22 00\n48 8b 35 ae 7e 22 00\n31 d2\ne8 df 03 00 00\ne9 35 ff ff ff\n48 8b 0d 63 7e 22 00\nbf ce d6 41 00\nbe 15 00 00 00\nba 01 00 00 00\ne8 cf ce ff ff\n48 8b 3d 48 7e 22 00\n48 8b 35 79 7e 22 00\n31 d2\ne8 aa 03 00 00\n48 8b 0d 33 7e 22 00\nbf e4 d6 41 00\nbe 18 00 00 00\nba 01 00 00 00\ne8 9f ce ff ff\n48 8b 3d 18 7e 22 00\n48 8b 35 49 7e 22 00\ne8 2c ed ff ff\n48 8b 35 05 7e 22 00\nbf 0a 00 00 00\ne8 8b ca ff ff\ne9 0e ff ff ff\n31 ff\nbe f4 d5 41 00\nba 05 00 00 00\ne8 95 c8 ff ff\n48 89 c2\n48 63 04 24\n49 8b 0c c4\n31 ff\n31 f6\n31 c0\neb 44\n31 ff\nbe 16 d6 41 00\neb 22\n49 83 3c cc 00\n75 09\n31 ff\nbe 62 d6 41 00\neb 12\n44 39 f9\n75 35\n83 7d 00 04\n75 2f\n31 ff\nbe 2d d6 41 00\nba 05 00 00 00\ne8 4d c8 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\n48 89 d9\ne8 b9 cc ff ff\nbf 01 00 00 00\ne8 8f 16 00 00\n31 ff\nbe 44 d6 41 00\nba 05 00 00 00\ne8 1e c8 ff ff\n48 89 c2\n48 63 04 24\n49 8b 0c c4\n31 ff\n31 f6\n31 c0\n49 89 d8\ne8 85 cc ff ff\nbf 01 00 00 00\ne8 5b 16 00 00\nbf 7e d5 41 00\nbe d0 d4 41 00\nba ef 04 00 00\nb9 91 d5 41 00\ne8 12 c9 ff ff\nbf cc d5 41 00\nbe d0 d4 41 00\nba f0 04 00 00\nb9 91 d5 41 00\ne8 f9 c8 ff ff\nbf e0 d5 41 00\nbe d0 d4 41 00\nba f1 04 00 00\nb9 91 d5 41 00\ne8 e0 c8 ff ff\n'
p1853
S'.text:0000000000405b80\n.text:0000000000405b81\n.text:0000000000405b83\n.text:0000000000405b85\n.text:0000000000405b87\n.text:0000000000405b89\n.text:0000000000405b8a\n.text:0000000000405b8e\n.text:0000000000405b91\n.text:0000000000405b95\n.text:0000000000405ba0\n.text:0000000000405ba3\n.text:0000000000405ba7\n.text:0000000000405bae\n.text:0000000000405bb1\n.text:0000000000405bb5\n.text:0000000000405bb7\n.text:0000000000405bbb\n.text:0000000000405bc0\n.text:0000000000405bc3\n.text:0000000000405bc7\n.text:0000000000405bcc\n.text:0000000000405bd1\n.text:0000000000405bd3\n.text:0000000000405bd5\n.text:0000000000405bdc\n.text:0000000000405bdf\n.text:0000000000405be1\n.text:0000000000405be4\n.text:0000000000405be6\n.text:0000000000405be8\n.text:0000000000405bed\n.text:0000000000405bf2\n.text:0000000000405bf5\n.text:0000000000405bfa\n.text:0000000000405bff\n.text:0000000000405c02\n.text:0000000000405c07\n.text:0000000000405c0c\n.text:0000000000405c0f\n.text:0000000000405c12\n.text:0000000000405c18\n.text:0000000000405c1b\n.text:0000000000405c21\n.text:0000000000405c26\n.text:0000000000405c29\n.text:0000000000405c2f\n.text:0000000000405c34\n.text:0000000000405c37\n.text:0000000000405c3a\n.text:0000000000405c3f\n.text:0000000000405c46\n.text:0000000000405c4e\n.text:0000000000405c55\n.text:0000000000405c59\n.text:0000000000405c5d\n.text:0000000000405c64\n.text:0000000000405c67\n.text:0000000000405c6c\n.text:0000000000405c73\n.text:0000000000405c78\n.text:0000000000405c7b\n.text:0000000000405c7f\n.text:0000000000405c81\n.text:0000000000405c87\n.text:0000000000405c8a\n.text:0000000000405c90\n.text:0000000000405c97\n.text:0000000000405c99\n.text:0000000000405c9d\n.text:0000000000405c9f\n.text:0000000000405ca4\n.text:0000000000405ca6\n.text:0000000000405cac\n.text:0000000000405cb0\n.text:0000000000405cb4\n.text:0000000000405cb7\n.text:0000000000405cbc\n.text:0000000000405cbf\n.text:0000000000405cc2\n.text:0000000000405cc8\n.text:0000000000405ccc\n.text:0000000000405cce\n.text:0000000000405cd1\n.text:0000000000405cd5\n.text:0000000000405cd8\n.text:0000000000405cdb\n.text:0000000000405cde\n.text:0000000000405ce1\n.text:0000000000405ce5\n.text:0000000000405ce7\n.text:0000000000405ced\n.text:0000000000405cf4\n.text:0000000000405cf8\n.text:0000000000405cfb\n.text:0000000000405cfd\n.text:0000000000405cff\n.text:0000000000405d10\n.text:0000000000405d14\n.text:0000000000405d18\n.text:0000000000405d1d\n.text:0000000000405d24\n.text:0000000000405d29\n.text:0000000000405d2c\n.text:0000000000405d30\n.text:0000000000405d32\n.text:0000000000405d38\n.text:0000000000405d3f\n.text:0000000000405d46\n.text:0000000000405d49\n.text:0000000000405d4e\n.text:0000000000405d55\n.text:0000000000405d5c\n.text:0000000000405d5f\n.text:0000000000405d61\n.text:0000000000405d66\n.text:0000000000405d68\n.text:0000000000405d6e\n.text:0000000000405d73\n.text:0000000000405d78\n.text:0000000000405d7b\n.text:0000000000405d7e\n.text:0000000000405d83\n.text:0000000000405d8a\n.text:0000000000405d92\n.text:0000000000405d96\n.text:0000000000405d9b\n.text:0000000000405d9e\n.text:0000000000405da1\n.text:0000000000405da4\n.text:0000000000405da9\n.text:0000000000405db0\n.text:0000000000405db8\n.text:0000000000405dbc\n.text:0000000000405dbe\n.text:0000000000405dc3\n.text:0000000000405dca\n.text:0000000000405dd1\n.text:0000000000405dd8\n.text:0000000000405ddf\n.text:0000000000405de4\n.text:0000000000405de9\n.text:0000000000405dee\n.text:0000000000405df1\n.text:0000000000405df4\n.text:0000000000405df9\n.text:0000000000405e00\n.text:0000000000405e08\n.text:0000000000405e0d\n.text:0000000000405e14\n.text:0000000000405e19\n.text:0000000000405e20\n.text:0000000000405e22\n.text:0000000000405e27\n.text:0000000000405e2e\n.text:0000000000405e33\n.text:0000000000405e3a\n.text:0000000000405e41\n.text:0000000000405e46\n.text:0000000000405e49\n.text:0000000000405e4e\n.text:0000000000405e55\n.text:0000000000405e5b\n.text:0000000000405e62\n.text:0000000000405e67\n.text:0000000000405e6e\n.text:0000000000405e73\n.text:0000000000405e7a\n.text:0000000000405e7f\n.text:0000000000405e84\n.text:0000000000405e86\n.text:0000000000405e88\n.text:0000000000405e8d\n.text:0000000000405e94\n.text:0000000000405e97\n.text:0000000000405e9c\n.text:0000000000405ea1\n.text:0000000000405ea4\n.text:0000000000405ea6\n.text:0000000000405eab\n.text:0000000000405eae\n.text:0000000000405eb0\n.text:0000000000405eb5\n.text:0000000000405eb7\n.text:0000000000405eb9\n.text:0000000000405ebe\n.text:0000000000405ec3\n.text:0000000000405ec8\n.text:0000000000405ecb\n.text:0000000000405ed0\n.text:0000000000405ed4\n.text:0000000000405ed9\n.text:0000000000405edb\n.text:0000000000405edd\n.text:0000000000405ee2\n.text:0000000000405ee9\n.text:0000000000405eeb\n.text:0000000000405ef0\n.text:0000000000405ef2\n.text:0000000000405ef7\n.text:0000000000405ef9\n.text:0000000000405efb\n.text:0000000000405f00\n.text:0000000000405f05\n.text:0000000000405f0a\n.text:0000000000405f0d\n.text:0000000000405f12\n.text:0000000000405f14\n.text:0000000000405f16\n.text:0000000000405f19\n.text:0000000000405f1e\n.text:0000000000405f25\n.text:0000000000405f2b\n.text:0000000000405f32\n.text:0000000000405f37\n.text:0000000000405f3c\n.text:0000000000405f41\n.text:0000000000405f48\n.text:0000000000405f4d\n.text:0000000000405f52\n.text:0000000000405f59\n.text:0000000000405f5e\n.text:0000000000405f65\n.text:0000000000405f6a\n.text:0000000000405f6f\n.text:0000000000405f76\n.text:0000000000405f78\n.text:0000000000405f7f\n.text:0000000000405f83\n.text:0000000000405f84\n.text:0000000000405f86\n.text:0000000000405f88\n.text:0000000000405f8a\n.text:0000000000405f8c\n.text:0000000000405f8d\n.text:0000000000405f8e\n.text:0000000000405f95\n.text:0000000000405f9a\n.text:0000000000405f9f\n.text:0000000000405fa4\n.text:0000000000405fa9\n.text:0000000000405fb0\n.text:0000000000405fb7\n.text:0000000000405fbc\n.text:0000000000405fc1\n.text:0000000000405fc8\n.text:0000000000405fcd\n.text:0000000000405fd2\n.text:0000000000405fd7\n.text:0000000000405fdc\n.text:0000000000405fe3\n.text:0000000000405fea\n.text:0000000000405fec\n.text:0000000000405ff1\n.text:0000000000405ff6\n.text:0000000000405ffd\n.text:0000000000406002\n.text:0000000000406007\n.text:000000000040600c\n.text:0000000000406011\n.text:0000000000406018\n.text:000000000040601f\n.text:0000000000406021\n.text:0000000000406026\n.text:000000000040602d\n.text:0000000000406032\n.text:0000000000406037\n.text:000000000040603c\n.text:0000000000406041\n.text:0000000000406048\n.text:000000000040604f\n.text:0000000000406054\n.text:000000000040605b\n.text:0000000000406060\n.text:0000000000406065\n.text:000000000040606a\n.text:000000000040606c\n.text:0000000000406071\n.text:0000000000406076\n.text:000000000040607b\n.text:000000000040607e\n.text:0000000000406082\n.text:0000000000406086\n.text:0000000000406088\n.text:000000000040608a\n.text:000000000040608c\n.text:000000000040608e\n.text:0000000000406090\n.text:0000000000406095\n.text:0000000000406097\n.text:000000000040609c\n.text:000000000040609e\n.text:00000000004060a0\n.text:00000000004060a5\n.text:00000000004060a7\n.text:00000000004060aa\n.text:00000000004060ac\n.text:00000000004060b0\n.text:00000000004060b2\n.text:00000000004060b4\n.text:00000000004060b9\n.text:00000000004060be\n.text:00000000004060c3\n.text:00000000004060c6\n.text:00000000004060c8\n.text:00000000004060ca\n.text:00000000004060cc\n.text:00000000004060cf\n.text:00000000004060d2\n.text:00000000004060d7\n.text:00000000004060dc\n.text:00000000004060e1\n.text:00000000004060e3\n.text:00000000004060e8\n.text:00000000004060ed\n.text:00000000004060f2\n.text:00000000004060f5\n.text:00000000004060f9\n.text:00000000004060fd\n.text:00000000004060ff\n.text:0000000000406101\n.text:0000000000406103\n.text:0000000000406106\n.text:000000000040610b\n.text:0000000000406110\n.text:0000000000406115\n.text:000000000040611a\n.text:000000000040611f\n.text:0000000000406124\n.text:0000000000406129\n.text:000000000040612e\n.text:0000000000406133\n.text:0000000000406138\n.text:000000000040613d\n.text:0000000000406142\n.text:0000000000406147\n.text:000000000040614c\n.text:0000000000406151\n.text:0000000000406156\n.text:000000000040615b\n'
p1854
tp1855
sS'find_first_leaked_fd'
p1856
(S'\n__stdcall find_first_leaked_fd(int * prev_non_cloexec_fds, size_t n)\n'
p1857
V\u000aint find_first_leaked_fd(int *prev_non_cloexec_fds,size_t n)\u000a\u000a{\u000a  get_max_fd();\u000a  visit_open_fds();\u000a  return -1;\u000a}\u000a\u000a
p1858
S'PUSH R14\nPUSH RBX\nSUB RSP,0x28\nMOV R14,RSI\nMOV RBX,RDI\nCALL 0x0040e750\nLEA EDI,[RAX + 0x1]\nCMP EAX,0x7fffffff\nCMOVZ EDI,EAX\nMOV qword ptr [RSP + 0x8],RBX\nMOV qword ptr [RSP + 0x10],R14\nMOV qword ptr [RSP + 0x18],0x0\nMOV dword ptr [RSP + 0x20],0xffffffff\nLEA RDX,[RSP + 0x8]\nMOV ESI,0x40ec40\nCALL 0x0040e7a0\nMOV EAX,dword ptr [RSP + 0x20]\nADD RSP,0x28\nPOP RBX\nPOP R14\nRET\n'
p1859
S'41 56\n53\n48 83 ec 28\n49 89 f6\n48 89 fb\ne8 7e fc ff ff\n8d 78 01\n3d ff ff ff 7f\n0f 44 f8\n48 89 5c 24 08\n4c 89 74 24 10\n48 c7 44 24 18 00 00 00 00\nc7 44 24 20 ff ff ff ff\n48 8d 54 24 08\nbe 40 ec 40 00\ne8 99 fc ff ff\n8b 44 24 20\n48 83 c4 28\n5b\n41 5e\nc3\n'
p1860
S'.text:000000000040eac0\n.text:000000000040eac2\n.text:000000000040eac3\n.text:000000000040eac7\n.text:000000000040eaca\n.text:000000000040eacd\n.text:000000000040ead2\n.text:000000000040ead5\n.text:000000000040eada\n.text:000000000040eadd\n.text:000000000040eae2\n.text:000000000040eae7\n.text:000000000040eaf0\n.text:000000000040eaf8\n.text:000000000040eafd\n.text:000000000040eb02\n.text:000000000040eb07\n.text:000000000040eb0b\n.text:000000000040eb0f\n.text:000000000040eb10\n.text:000000000040eb12\n'
p1861
tp1862
sS'pred_group'
p1863
(S'\n__stdcall pred_group(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p1864
V\u000a_Bool pred_group(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  return (_Bool)(*(__gid_t *)pred_ptr->args == stat_buf->st_gid);\u000a}\u000a\u000a
p1865
S'MOV EAX,dword ptr [RDX + 0x38]\nCMP EAX,dword ptr [RSI + 0x20]\nSETZ AL\nRET\n'
p1866
S'8b 42 38\n3b 46 20\n0f 94 c0\nc3\n'
p1867
S'.text:0000000000404150\n.text:0000000000404153\n.text:0000000000404156\n.text:0000000000404159\n'
p1868
tp1869
sS'hash_rehash'
p1870
(S'\n__stdcall hash_rehash(Hash_table * table, size_t candidate)\n'
p1871
V\u000a_Bool hash_rehash(Hash_table *table,size_t candidate)\u000a\u000a{\u000a  _Bool _Var1;\u000a  hash_entry *local_68;\u000a  hash_entry *local_60;\u000a  size_t local_58;\u000a  undefined4 local_50;\u000a  undefined4 uStack76;\u000a  undefined4 uStack72;\u000a  undefined4 uStack68;\u000a  Hash_tuning *local_40;\u000a  size_t (*local_38)(void *,size_t);\u000a  _Bool (*local_30)(void *,void *);\u000a  void (*local_28)(void *);\u000a  hash_entry *local_20;\u000a  \u000a  local_58 = compute_bucket_size(candidate,table->tuning);\u000a  if (local_58 != 0) {\u000a    if (local_58 == table->n_buckets) {\u000a      return true;\u000a    }\u000a    local_68 = (hash_entry *)calloc(local_58,0x10);\u000a    if (local_68 != (hash_entry *)0x0) {\u000a      local_60 = local_68 + local_58;\u000a      local_50 = 0;\u000a      uStack76 = 0;\u000a      uStack72 = 0;\u000a      uStack68 = 0;\u000a      local_40 = table->tuning;\u000a      local_38 = table->hasher;\u000a      local_30 = table->comparator;\u000a      local_28 = table->data_freer;\u000a      local_20 = table->free_entry_list;\u000a      _Var1 = transfer_entries((Hash_table *)&local_68,table);\u000a      if (_Var1 != false) {\u000a        free(table->bucket);\u000a        table->bucket = local_68;\u000a        table->bucket_limit = local_60;\u000a        table->n_buckets = local_58;\u000a        table->n_buckets_used = CONCAT44(uStack76,local_50);\u000a        table->free_entry_list = local_20;\u000a        return true;\u000a      }\u000a      table->free_entry_list = local_20;\u000a      _Var1 = transfer_entries(table,(Hash_table *)&local_68);\u000a      if ((_Var1 == false) ||\u000a         (_Var1 = transfer_entries(table,(Hash_table *)&local_68), _Var1 == false)) {\u000a                    /* WARNING: Subroutine does not return */\u000a        abort();\u000a      }\u000a      free(local_68);\u000a    }\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1872
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x50\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x28]\nMOV RDI,RSI\nMOV RSI,RAX\nCALL 0x00410980\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00410cb1\nMOV R14B,0x1\nCMP RBP,qword ptr [RBX + 0x10]\nJZ 0x00410cb4\nMOV ESI,0x10\nMOV RDI,RBP\nCALL 0x00402b30\nMOV qword ptr [RSP],RAX\nTEST RAX,RAX\nJZ 0x00410cb1\nMOV qword ptr [RSP + 0x10],RBP\nSHL RBP,0x4\nADD RBP,qword ptr [RSP]\nMOV qword ptr [RSP + 0x8],RBP\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RSP + 0x18],XMM0\nMOV RAX,qword ptr [RBX + 0x28]\nMOV qword ptr [RSP + 0x28],RAX\nMOV RAX,qword ptr [RBX + 0x30]\nMOV qword ptr [RSP + 0x30],RAX\nMOV RAX,qword ptr [RBX + 0x38]\nMOV qword ptr [RSP + 0x38],RAX\nMOV RAX,qword ptr [RBX + 0x40]\nMOV qword ptr [RSP + 0x40],RAX\nMOV RAX,qword ptr [RBX + 0x48]\nMOV qword ptr [RSP + 0x48],RAX\nMOV RDI,RSP\nXOR EDX,EDX\nMOV RSI,RBX\nCALL 0x00410cd0\nTEST AL,AL\nJZ 0x00410c7a\nMOV RDI,qword ptr [RBX]\nCALL 0x00402710\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX],RAX\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [RBX + 0x8],RAX\nMOV RAX,qword ptr [RSP + 0x10]\nMOV qword ptr [RBX + 0x10],RAX\nMOV RAX,qword ptr [RSP + 0x18]\nMOV qword ptr [RBX + 0x18],RAX\nMOV RAX,qword ptr [RSP + 0x48]\nMOV qword ptr [RBX + 0x48],RAX\nJMP 0x00410cb4\nMOV RAX,qword ptr [RSP + 0x48]\nMOV qword ptr [RBX + 0x48],RAX\nMOV RSI,RSP\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00410cd0\nTEST AL,AL\nJZ 0x00410cc0\nMOV RSI,RSP\nXOR EDX,EDX\nMOV RDI,RBX\nCALL 0x00410cd0\nTEST AL,AL\nJZ 0x00410cc0\nMOV RDI,qword ptr [RSP]\nCALL 0x00402710\nXOR R14D,R14D\nMOV EAX,R14D\nADD RSP,0x50\nPOP RBX\nPOP R14\nPOP RBP\nRET\nCALL 0x00402750\n'
p1873
S'55\n41 56\n53\n48 83 ec 50\n48 89 fb\n48 8b 43 28\n48 89 f7\n48 89 c6\ne8 c6 fd ff ff\n48 89 c5\n48 85 ed\n0f 84 eb 00 00 00\n41 b6 01\n48 3b 6b 10\n0f 84 e1 00 00 00\nbe 10 00 00 00\n48 89 ef\ne8 50 1f ff ff\n48 89 04 24\n48 85 c0\n0f 84 c4 00 00 00\n48 89 6c 24 10\n48 c1 e5 04\n48 03 2c 24\n48 89 6c 24 08\n0f 57 c0\n0f 11 44 24 18\n48 8b 43 28\n48 89 44 24 28\n48 8b 43 30\n48 89 44 24 30\n48 8b 43 38\n48 89 44 24 38\n48 8b 43 40\n48 89 44 24 40\n48 8b 43 48\n48 89 44 24 48\n48 89 e7\n31 d2\n48 89 de\ne8 8f 00 00 00\n84 c0\n74 35\n48 8b 3b\ne8 c3 1a ff ff\n48 8b 04 24\n48 89 03\n48 8b 44 24 08\n48 89 43 08\n48 8b 44 24 10\n48 89 43 10\n48 8b 44 24 18\n48 89 43 18\n48 8b 44 24 48\n48 89 43 48\neb 3a\n48 8b 44 24 48\n48 89 43 48\n48 89 e6\nba 01 00 00 00\n48 89 df\ne8 3d 00 00 00\n84 c0\n74 29\n48 89 e6\n31 d2\n48 89 df\ne8 2c 00 00 00\n84 c0\n74 18\n48 8b 3c 24\ne8 5f 1a ff ff\n45 31 f6\n44 89 f0\n48 83 c4 50\n5b\n41 5e\n5d\nc3\ne8 8b 1a ff ff\n'
p1874
S'.text:0000000000410ba0\n.text:0000000000410ba1\n.text:0000000000410ba3\n.text:0000000000410ba4\n.text:0000000000410ba8\n.text:0000000000410bab\n.text:0000000000410baf\n.text:0000000000410bb2\n.text:0000000000410bb5\n.text:0000000000410bba\n.text:0000000000410bbd\n.text:0000000000410bc0\n.text:0000000000410bc6\n.text:0000000000410bc9\n.text:0000000000410bcd\n.text:0000000000410bd3\n.text:0000000000410bd8\n.text:0000000000410bdb\n.text:0000000000410be0\n.text:0000000000410be4\n.text:0000000000410be7\n.text:0000000000410bed\n.text:0000000000410bf2\n.text:0000000000410bf6\n.text:0000000000410bfa\n.text:0000000000410bff\n.text:0000000000410c02\n.text:0000000000410c07\n.text:0000000000410c0b\n.text:0000000000410c10\n.text:0000000000410c14\n.text:0000000000410c19\n.text:0000000000410c1d\n.text:0000000000410c22\n.text:0000000000410c26\n.text:0000000000410c2b\n.text:0000000000410c2f\n.text:0000000000410c34\n.text:0000000000410c37\n.text:0000000000410c39\n.text:0000000000410c3c\n.text:0000000000410c41\n.text:0000000000410c43\n.text:0000000000410c45\n.text:0000000000410c48\n.text:0000000000410c4d\n.text:0000000000410c51\n.text:0000000000410c54\n.text:0000000000410c59\n.text:0000000000410c5d\n.text:0000000000410c62\n.text:0000000000410c66\n.text:0000000000410c6b\n.text:0000000000410c6f\n.text:0000000000410c74\n.text:0000000000410c78\n.text:0000000000410c7a\n.text:0000000000410c7f\n.text:0000000000410c83\n.text:0000000000410c86\n.text:0000000000410c8b\n.text:0000000000410c8e\n.text:0000000000410c93\n.text:0000000000410c95\n.text:0000000000410c97\n.text:0000000000410c9a\n.text:0000000000410c9c\n.text:0000000000410c9f\n.text:0000000000410ca4\n.text:0000000000410ca6\n.text:0000000000410ca8\n.text:0000000000410cac\n.text:0000000000410cb1\n.text:0000000000410cb4\n.text:0000000000410cb7\n.text:0000000000410cbb\n.text:0000000000410cbc\n.text:0000000000410cbe\n.text:0000000000410cbf\n.text:0000000000410cc0\n'
p1875
tp1876
sS'default_block_size'
p1877
(S'\n__stdcall default_block_size()\n'
p1878
V\u000auintmax_t default_block_size(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  uintmax_t uVar2;\u000a  \u000a  pcVar1 = getenv("POSIXLY_CORRECT");\u000a  uVar2 = 0x400;\u000a  if (pcVar1 != (char *)0x0) {\u000a    uVar2 = 0x200;\u000a  }\u000a  return uVar2;\u000a}\u000a\u000a
p1879
S'PUSH RAX\nMOV EDI,0x41e86e\nCALL 0x00402700\nTEST RAX,RAX\nMOV ECX,0x200\nMOV EAX,0x400\nCMOVNZ RAX,RCX\nPOP RCX\nRET\n'
p1880
S'50\nbf 6e e8 41 00\ne8 f5 0a ff ff\n48 85 c0\nb9 00 02 00 00\nb8 00 04 00 00\n48 0f 45 c1\n59\nc3\n'
p1881
S'.text:0000000000411c00\n.text:0000000000411c01\n.text:0000000000411c06\n.text:0000000000411c0b\n.text:0000000000411c0e\n.text:0000000000411c13\n.text:0000000000411c18\n.text:0000000000411c1c\n.text:0000000000411c1d\n'
p1882
tp1883
sS'opendir_safer'
p1884
(S'\n__stdcall opendir_safer(char * name)\n'
p1885
V\u000aDIR * opendir_safer(char *name)\u000a\u000a{\u000a  uint uVar1;\u000a  int __fd;\u000a  DIR *__dirp;\u000a  DIR *pDVar2;\u000a  int *piVar3;\u000a  int iVar4;\u000a  \u000a  __dirp = opendir(name);\u000a  if (__dirp == (DIR *)0x0) {\u000a    return (DIR *)0x0;\u000a  }\u000a  uVar1 = dirfd(__dirp);\u000a  if (2 < uVar1) {\u000a    return (DIR *)__dirp;\u000a  }\u000a  __fd = dup_safer();\u000a  if (__fd < 0) {\u000a    piVar3 = __errno_location();\u000a    iVar4 = *piVar3;\u000a  }\u000a  else {\u000a    pDVar2 = fdopendir(__fd);\u000a    piVar3 = __errno_location();\u000a    iVar4 = *piVar3;\u000a    if (pDVar2 != (DIR *)0x0) goto LAB_0040ff7d;\u000a    close(__fd);\u000a  }\u000a  pDVar2 = (DIR *)0x0;\u000aLAB_0040ff7d:\u000a  closedir(__dirp);\u000a  piVar3 = __errno_location();\u000a  *piVar3 = iVar4;\u000a  return (DIR *)pDVar2;\u000a}\u000a\u000a
p1886
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nCALL 0x004028d0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040ff6e\nMOV RDI,RBX\nCALL 0x00402b70\nCMP EAX,0x2\nJA 0x0040ff90\nMOV EDI,EAX\nCALL 0x00416cf0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0040ff72\nMOV EDI,EBP\nCALL 0x00402e30\nMOV R14,RAX\nCALL 0x00402770\nMOV R15D,dword ptr [RAX]\nTEST R14,R14\nJNZ 0x0040ff7d\nMOV EDI,EBP\nCALL 0x00402ac0\nJMP 0x0040ff7a\nXOR EBX,EBX\nJMP 0x0040ff90\nCALL 0x00402770\nMOV R15D,dword ptr [RAX]\nXOR R14D,R14D\nMOV RDI,RBX\nCALL 0x00402ae0\nCALL 0x00402770\nMOV dword ptr [RAX],R15D\nMOV RBX,R14\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1887
S'55\n41 57\n41 56\n53\n50\ne8 a4 29 ff ff\n48 89 c3\n48 85 db\n74 3a\n48 89 df\ne8 34 2c ff ff\n83 f8 02\n77 4f\n89 c7\ne8 a8 6d 00 00\n89 c5\n85 ed\n78 24\n89 ef\ne8 db 2e ff ff\n49 89 c6\ne8 13 28 ff ff\n44 8b 38\n4d 85 f6\n75 18\n89 ef\ne8 54 2b ff ff\neb 0c\n31 db\neb 1e\ne8 f9 27 ff ff\n44 8b 38\n45 31 f6\n48 89 df\ne8 5b 2b ff ff\ne8 e6 27 ff ff\n44 89 38\n4c 89 f3\n48 89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1888
S'.text:000000000040ff20\n.text:000000000040ff21\n.text:000000000040ff23\n.text:000000000040ff25\n.text:000000000040ff26\n.text:000000000040ff27\n.text:000000000040ff2c\n.text:000000000040ff2f\n.text:000000000040ff32\n.text:000000000040ff34\n.text:000000000040ff37\n.text:000000000040ff3c\n.text:000000000040ff3f\n.text:000000000040ff41\n.text:000000000040ff43\n.text:000000000040ff48\n.text:000000000040ff4a\n.text:000000000040ff4c\n.text:000000000040ff4e\n.text:000000000040ff50\n.text:000000000040ff55\n.text:000000000040ff58\n.text:000000000040ff5d\n.text:000000000040ff60\n.text:000000000040ff63\n.text:000000000040ff65\n.text:000000000040ff67\n.text:000000000040ff6c\n.text:000000000040ff6e\n.text:000000000040ff70\n.text:000000000040ff72\n.text:000000000040ff77\n.text:000000000040ff7a\n.text:000000000040ff7d\n.text:000000000040ff80\n.text:000000000040ff85\n.text:000000000040ff8a\n.text:000000000040ff8d\n.text:000000000040ff90\n.text:000000000040ff93\n.text:000000000040ff97\n.text:000000000040ff98\n.text:000000000040ff9a\n.text:000000000040ff9c\n.text:000000000040ff9d\n'
p1889
tp1890
sS'hash_get_n_entries'
p1891
(S'\n__stdcall hash_get_n_entries(Hash_table * table)\n'
p1892
V\u000asize_t hash_get_n_entries(Hash_table *table)\u000a\u000a{\u000a  return table->n_entries;\u000a}\u000a\u000a
p1893
S'MOV RAX,qword ptr [RDI + 0x20]\nRET\n'
p1894
S'48 8b 47 20\nc3\n'
p1895
S'.text:00000000004103f0\n.text:00000000004103f4\n'
p1896
tp1897
sS'mode_to_filetype'
p1898
(S'\n__stdcall mode_to_filetype()\n'
p1899
V\u000achar * mode_to_filetype(void)\u000a\u000a{\u000a  int in_EDI;\u000a  uint uVar1;\u000a  \u000a  uVar1 = in_EDI << 0x14 | in_EDI - 0x1000U >> 0xc;\u000a  if (uVar1 < 0xc) {\u000a    return *(char **)(&DAT_0041f5d0 + (long)(int)uVar1 * 8);\u000a  }\u000a  return "U";\u000a}\u000a\u000a
p1900
S'ADD EDI,0xfffff000\nROL EDI,0x14\nCMP EDI,0xb\nJA 0x0040a28a\nMOVSXD RAX,EDI\nMOV RAX,qword ptr [0x41f5d0 + RAX*0x8]\nRET\nMOV EAX,0x41fb49\nRET\n'
p1901
S'81 c7 00 f0 ff ff\nc1 c7 14\n83 ff 0b\n77 0c\n48 63 c7\n48 8b 04 c5 d0 f5 41 00\nc3\nb8 49 fb 41 00\nc3\n'
p1902
S'.text:000000000040a270\n.text:000000000040a276\n.text:000000000040a279\n.text:000000000040a27c\n.text:000000000040a27e\n.text:000000000040a281\n.text:000000000040a289\n.text:000000000040a28a\n.text:000000000040a28f\n'
p1903
tp1904
sS'hash_lookup'
p1905
(S'\n__stdcall hash_lookup(Hash_table * table, void * entry)\n'
p1906
V\u000avoid * hash_lookup(Hash_table *table,void *entry)\u000a\u000a{\u000a  _Bool _Var1;\u000a  hash_entry *phVar2;\u000a  \u000a  phVar2 = safe_hasher(table,entry);\u000a  if (phVar2->data != (void *)0x0) {\u000a    while (phVar2 != (hash_entry *)0x0) {\u000a      if ((phVar2->data == entry) ||\u000a         (_Var1 = (*table->comparator)(entry,phVar2->data), _Var1 != false)) {\u000a        return phVar2->data;\u000a      }\u000a      phVar2 = phVar2->next;\u000a    }\u000a  }\u000a  return (void *)0x0;\u000a}\u000a\u000a
p1907
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,RSI\nMOV R15,RDI\nCALL 0x004105e0\nMOV RBX,RAX\nXOR R14D,R14D\nCMP qword ptr [RBX],0x0\nJZ 0x004105d1\nTEST RBX,RBX\nJZ 0x004105d1\nXOR R14D,R14D\nNOP word ptr [RAX + RAX*0x1]\nMOV RSI,qword ptr [RBX]\nCMP RSI,R12\nJZ 0x004105ce\nMOV RDI,R12\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJNZ 0x004105ce\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x004105b0\nJMP 0x004105d1\nMOV R14,qword ptr [RBX]\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p1908
S'41 57\n41 56\n41 54\n53\n50\n49 89 f4\n49 89 ff\ne8 4d 00 00 00\n48 89 c3\n45 31 f6\n48 83 3b 00\n74 32\n48 85 db\n74 2d\n45 31 f6\n66 0f 1f 84 00 00 00 00 00\n48 8b 33\n4c 39 e6\n74 16\n4c 89 e7\n41 ff 57 38\n84 c0\n75 0b\n48 8b 5b 08\n48 85 db\n75 e4\neb 03\n4c 8b 33\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p1909
S'.text:0000000000410580\n.text:0000000000410582\n.text:0000000000410584\n.text:0000000000410586\n.text:0000000000410587\n.text:0000000000410588\n.text:000000000041058b\n.text:000000000041058e\n.text:0000000000410593\n.text:0000000000410596\n.text:0000000000410599\n.text:000000000041059d\n.text:000000000041059f\n.text:00000000004105a2\n.text:00000000004105a4\n.text:00000000004105a7\n.text:00000000004105b0\n.text:00000000004105b3\n.text:00000000004105b6\n.text:00000000004105b8\n.text:00000000004105bb\n.text:00000000004105bf\n.text:00000000004105c1\n.text:00000000004105c3\n.text:00000000004105c7\n.text:00000000004105ca\n.text:00000000004105cc\n.text:00000000004105ce\n.text:00000000004105d1\n.text:00000000004105d4\n.text:00000000004105d8\n.text:00000000004105d9\n.text:00000000004105db\n.text:00000000004105dd\n.text:00000000004105df\n'
p1910
tp1911
sS'fchdir'
p1912
(S'\n__stdcall fchdir(int __fd)\n'
p1913
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fchdir(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fchdir_0062d328)();\u000a  return iVar1;\u000a}\u000a\u000a
p1914
S'JMP qword ptr [0x0062d328]\n'
p1915
S'ff 25 12 a6 22 00\n'
p1916
S'.plt:0000000000402d10\n'
p1917
tp1918
sS'strcat'
p1919
(S'\n__stdcall strcat(char * __dest, char * __src)\n'
p1920
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcat(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcat_0062d3f8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1921
S'JMP qword ptr [0x0062d3f8]\n'
p1922
S'ff 25 42 a5 22 00\n'
p1923
S'.plt:0000000000402eb0\n'
p1924
tp1925
sS'copy_args'
p1926
(S'\n__stdcall copy_args(buildcmd_control * ctl, buildcmd_state * state, char * * working_args, size_t limit, size_t done)\n'
p1927
V\u000asize_t copy_args(buildcmd_control *ctl,buildcmd_state *state,char **working_args,size_t limit,\u000a                size_t done)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  ulong uVar3;\u000a  bool bVar4;\u000a  \u000a  if (ctl->initial_argc == 0) {\u000a    uVar2 = 0;\u000a  }\u000a  else {\u000a    uVar3 = ctl->initial_argc;\u000a    uVar2 = 0;\u000a    do {\u000a      working_args[uVar2] = state->cmd_argv[uVar2];\u000a      uVar2 = uVar2 + 1;\u000a    } while (uVar2 < uVar3);\u000a  }\u000a  if ((uVar2 < limit) && (uVar2 + done < state->cmd_argc)) {\u000a    uVar1 = state->cmd_argc;\u000a    uVar3 = uVar2 + 1 + done;\u000a    do {\u000a      working_args[uVar2] = state->cmd_argv[uVar3 - 1];\u000a      uVar2 = uVar2 + 1;\u000a      if (limit <= uVar2) break;\u000a      bVar4 = uVar3 < uVar1;\u000a      uVar3 = uVar3 + 1;\u000a    } while (bVar4);\u000a  }\u000a  if (uVar2 < ctl->initial_argc) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("dst_pos >= ctl->initial_argc","buildcmd.c",0xfc,\u000a                                    \u000a                  "size_t copy_args(struct buildcmd_control *, struct buildcmd_state *, char **, size_t, size_t)"\u000a                 );\u000a  }\u000a  working_args[uVar2] = (char *)0x0;\u000a  return uVar2;\u000a}\u000a\u000a
p1928
S'CMP qword ptr [RDI + 0x38],0x0\nJZ 0x0040e096\nMOV R9,qword ptr [RDI + 0x38]\nXOR EAX,EAX\nNOP dword ptr [RAX]\nMOV R10,qword ptr [RSI + 0x8]\nMOV R10,qword ptr [R10 + RAX*0x8]\nMOV qword ptr [RDX + RAX*0x8],R10\nINC RAX\nCMP RAX,R9\nJC 0x0040e080\nJMP 0x0040e098\nXOR EAX,EAX\nCMP RAX,RCX\nJNC 0x0040e0ce\nLEA R9,[RAX + R8*0x1]\nCMP R9,qword ptr [RSI]\nJNC 0x0040e0ce\nMOV R9,qword ptr [RSI]\nLEA R8,[RAX + R8*0x1 + 0x1]\nNOP\nMOV R10,qword ptr [RSI + 0x8]\nMOV R10,qword ptr [R10 + R8*0x8 + -0x8]\nMOV qword ptr [RDX + RAX*0x8],R10\nINC RAX\nCMP RAX,RCX\nJNC 0x0040e0ce\nCMP R8,R9\nLEA R8,[R8 + 0x1]\nJC 0x0040e0b0\nCMP RAX,qword ptr [RDI + 0x38]\nJC 0x0040e0dd\nMOV qword ptr [RDX + RAX*0x8],0x0\nRET\nPUSH RAX\nMOV EDI,0x421f1c\nMOV ESI,0x421c75\nMOV EDX,0xfc\nMOV ECX,0x421f39\nCALL 0x00402a40\n'
p1929
S'48 83 7f 38 00\n74 1f\n4c 8b 4f 38\n31 c0\n0f 1f 00\n4c 8b 56 08\n4d 8b 14 c2\n4c 89 14 c2\n48 ff c0\n4c 39 c8\n72 ec\neb 02\n31 c0\n48 39 c8\n73 31\n4e 8d 0c 00\n4c 3b 0e\n73 28\n4c 8b 0e\n4e 8d 44 00 01\n66 90\n4c 8b 56 08\n4f 8b 54 c2 f8\n4c 89 14 c2\n48 ff c0\n48 39 c8\n73 09\n4d 39 c8\n4d 8d 40 01\n72 e2\n48 3b 47 38\n72 09\n48 c7 04 c2 00 00 00 00\nc3\n50\nbf 1c 1f 42 00\nbe 75 1c 42 00\nba fc 00 00 00\nb9 39 1f 42 00\ne8 49 49 ff ff\n'
p1930
S'.text:000000000040e070\n.text:000000000040e075\n.text:000000000040e077\n.text:000000000040e07b\n.text:000000000040e07d\n.text:000000000040e080\n.text:000000000040e084\n.text:000000000040e088\n.text:000000000040e08c\n.text:000000000040e08f\n.text:000000000040e092\n.text:000000000040e094\n.text:000000000040e096\n.text:000000000040e098\n.text:000000000040e09b\n.text:000000000040e09d\n.text:000000000040e0a1\n.text:000000000040e0a4\n.text:000000000040e0a6\n.text:000000000040e0a9\n.text:000000000040e0ae\n.text:000000000040e0b0\n.text:000000000040e0b4\n.text:000000000040e0b9\n.text:000000000040e0bd\n.text:000000000040e0c0\n.text:000000000040e0c3\n.text:000000000040e0c5\n.text:000000000040e0c8\n.text:000000000040e0cc\n.text:000000000040e0ce\n.text:000000000040e0d2\n.text:000000000040e0d4\n.text:000000000040e0dc\n.text:000000000040e0dd\n.text:000000000040e0de\n.text:000000000040e0e3\n.text:000000000040e0e8\n.text:000000000040e0ed\n.text:000000000040e0f2\n'
p1931
tp1932
sS'now'
p1933
(S'\n__stdcall now()\n'
p1934
V\u000atimespec now(void)\u000a\u000a{\u000a  int iVar1;\u000a  timeval local_18;\u000a  \u000a  iVar1 = gettimeofday(&local_18,(__timezone_ptr_t)0x0);\u000a  if (iVar1 == 0) {\u000a    local_18.tv_usec = local_18.tv_usec * 1000;\u000a  }\u000a  else {\u000a    local_18.tv_usec = 0;\u000a    local_18.tv_sec = time((time_t *)0x0);\u000a    if (local_18.tv_sec == -1) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("t != (time_t)-1","util.c",0x3ef,"struct timespec now(void)");\u000a    }\u000a  }\u000a  return (timespec)CONCAT88(local_18.tv_usec,local_18.tv_sec);\u000a}\u000a\u000a
p1935
S'PUSH RBX\nSUB RSP,0x10\nMOV RDI,RSP\nXOR ESI,ESI\nCALL 0x00402a30\nTEST EAX,EAX\nJZ 0x0040887b\nXOR EBX,EBX\nXOR EDI,EDI\nCALL 0x00402c00\nCMP RAX,-0x1\nJNZ 0x00408888\nMOV EDI,0x41eccf\nMOV ESI,0x41e01b\nMOV EDX,0x3ef\nMOV ECX,0x41ecdf\nCALL 0x00402a40\nMOV RAX,qword ptr [RSP]\nIMUL RBX,qword ptr [RSP + 0x8],0x3e8\nMOV RDX,RBX\nADD RSP,0x10\nPOP RBX\nRET\n'
p1936
S'53\n48 83 ec 10\n48 89 e7\n31 f6\ne8 e1 a1 ff ff\n85 c0\n74 28\n31 db\n31 ff\ne8 a4 a3 ff ff\n48 83 f8 ff\n75 26\nbf cf ec 41 00\nbe 1b e0 41 00\nba ef 03 00 00\nb9 df ec 41 00\ne8 c5 a1 ff ff\n48 8b 04 24\n48 69 5c 24 08 e8 03 00 00\n48 89 da\n48 83 c4 10\n5b\nc3\n'
p1937
S'.text:0000000000408840\n.text:0000000000408841\n.text:0000000000408845\n.text:0000000000408848\n.text:000000000040884a\n.text:000000000040884f\n.text:0000000000408851\n.text:0000000000408853\n.text:0000000000408855\n.text:0000000000408857\n.text:000000000040885c\n.text:0000000000408860\n.text:0000000000408862\n.text:0000000000408867\n.text:000000000040886c\n.text:0000000000408871\n.text:0000000000408876\n.text:000000000040887b\n.text:000000000040887f\n.text:0000000000408888\n.text:000000000040888b\n.text:000000000040888f\n.text:0000000000408890\n'
p1938
tp1939
sS'__strdup'
p1940
(S'\n__stdcall __strdup()\n'
p1941
V\u000avoid __strdup(void)\u000a\u000a{\u000a  (*(code *)PTR___strdup_0062d220)();\u000a  return;\u000a}\u000a\u000a
p1942
S'JMP qword ptr [0x0062d220]\n'
p1943
S'ff 25 1a a7 22 00\n'
p1944
S'.plt:0000000000402b00\n'
p1945
tp1946
sS'print_optlist'
p1947
(S'\n__stdcall print_optlist(FILE * fp, predicate * p)\n'
p1948
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000avoid print_optlist(FILE *fp,predicate *p)\u000a\u000a{\u000a  ulong uVar1;\u000a  undefined auVar2 [12];\u000a  char *pcVar3;\u000a  char *pcVar4;\u000a  char *pcVar5;\u000a  undefined auVar6 [16];\u000a  undefined auVar7 [16];\u000a  undefined4 uVar8;\u000a  \u000a  if (p != (predicate *)0x0) {\u000a    print_parenthesised(fp,p->pred_left);\u000a    pcVar4 = "[call stat] ";\u000a    if (p->need_stat == false) {\u000a      pcVar4 = "";\u000a    }\u000a    pcVar3 = "[need type] ";\u000a    if (p->need_type == false) {\u000a      pcVar3 = "";\u000a    }\u000a    pcVar5 = "[need inum] ";\u000a    if (p->need_inum == false) {\u000a      pcVar5 = "";\u000a    }\u000a    fprintf((FILE *)fp,"%s%s%s",pcVar4,pcVar3,pcVar5);\u000a    print_predicate(fp,p);\u000a    fprintf((FILE *)ZEXT816((ulong)(double)p->est_success_rate),(char *)fp,\u000a            " [est success rate %.4g] ");\u000a    if (((byte)options.debug_options & 0x40) != 0) {\u000a      fprintf((FILE *)fp,"[real success rate %ld/%ld",(p->perf).successes,(p->perf).visits);\u000a      uVar1 = (p->perf).visits;\u000a      if (uVar1 == 0) {\u000a        fwrite(&DAT_0041d004,4,1,(FILE *)fp);\u000a      }\u000a      else {\u000a        uVar8 = SUB164(_DAT_0041caa0 >> 0x20,0);\u000a        auVar2 = ZEXT812((p->perf).successes) & (undefined  [12])0xffffffffffffffff;\u000a        auVar6 = subpd(CONCAT88(SUB168(CONCAT412(uVar8,auVar2 | (undefined  [12])0x0 << 0x40) >>\u000a                                       0x40,0),CONCAT44(SUB164(_DAT_0041caa0,0),SUB124(auVar2,0))),\u000a                       CONCAT88(DAT_0041cab8,DAT_0041cab0));\u000a        auVar6 = addpd(CONCAT412(SUB164(auVar6 >> 0x20,0),\u000a                                 CONCAT48(SUB164(auVar6,0),SUB168(auVar6 >> 0x40,0))),auVar6);\u000a        auVar2 = ZEXT812(uVar1) & (undefined  [12])0xffffffffffffffff;\u000a        auVar7 = subpd(CONCAT88(SUB168(CONCAT412(uVar8,auVar2 | (undefined  [12])0x0 << 0x40) >>\u000a                                       0x40,0),CONCAT44(SUB164(_DAT_0041caa0,0),SUB124(auVar2,0))),\u000a                       CONCAT88(DAT_0041cab8,DAT_0041cab0));\u000a        auVar7 = addpd(CONCAT412(SUB164(auVar7 >> 0x20,0),\u000a                                 CONCAT48(SUB164(auVar7,0),SUB168(auVar7 >> 0x40,0))),auVar7);\u000a        fprintf((FILE *)CONCAT88(SUB168(auVar6 >> 0x40,0),SUB168(auVar6,0) / SUB168(auVar7,0)),\u000a                (char *)fp,"=%.4g] ");\u000a      }\u000a    }\u000a    print_parenthesised(fp,p->pred_right);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1949
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nTEST RBX,RBX\nJZ 0x00404e8b\nMOV RSI,qword ptr [0x110 + RBX]\nMOV RDI,R14\nCALL 0x00404ec0\nCMP byte ptr [RBX + 0x1a],0x0\nMOV EDX,0x41cfa0\nMOV EAX,0x41e69a\nCMOVZ RDX,RAX\nCMP byte ptr [RBX + 0x1b],0x0\nMOV ECX,0x41cfad\nCMOVZ RCX,RAX\nCMP byte ptr [RBX + 0x1c],0x0\nMOV R8D,0x41cfba\nCMOVZ R8,RAX\nMOV ESI,0x41cf99\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00402ba0\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00405880\nMOVSS XMM0,dword ptr [RBX + 0x24]\nCVTSS2SD XMM0,XMM0\nMOV ESI,0x41cfc7\nMOV AL,0x1\nMOV RDI,R14\nCALL 0x00402ba0\nTEST byte ptr [0x0062f080],0x40\nJZ 0x00404eaa\nMOV RCX,qword ptr [0x120 + RBX]\nMOV RDX,qword ptr [0x128 + RBX]\nMOV ESI,0x41cfe1\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00402ba0\nMOV RAX,qword ptr [0x120 + RBX]\nTEST RAX,RAX\nJZ 0x00404e93\nMOVQ XMM1,qword ptr [0x128 + RBX]\nMOVDQA XMM2,xmmword ptr [0x0041caa0]\nPUNPCKLDQ XMM1,XMM2\nMOVAPD XMM3,xmmword ptr [0x0041cab0]\nSUBPD XMM1,XMM3\nPSHUFD XMM0,XMM1,0x4e\nADDPD XMM0,XMM1\nMOVQ XMM1,RAX\nPUNPCKLDQ XMM1,XMM2\nSUBPD XMM1,XMM3\nPSHUFD XMM2,XMM1,0x4e\nADDPD XMM2,XMM1\nDIVSD XMM0,XMM2\nMOV ESI,0x41cffc\nMOV AL,0x1\nMOV RDI,R14\nCALL 0x00402ba0\nJMP 0x00404eaa\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV EDI,0x41d004\nMOV ESI,0x4\nMOV EDX,0x1\nMOV RCX,R14\nCALL 0x00402ee0\nMOV RSI,qword ptr [0x118 + RBX]\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00404ec0\n'
p1950
S'41 56\n53\n50\n48 89 f3\n49 89 fe\n48 85 db\n0f 84 f8 00 00 00\n48 8b b3 10 01 00 00\n4c 89 f7\ne8 1e 01 00 00\n80 7b 1a 00\nba a0 cf 41 00\nb8 9a e6 41 00\n48 0f 44 d0\n80 7b 1b 00\nb9 ad cf 41 00\n48 0f 44 c8\n80 7b 1c 00\n41 b8 ba cf 41 00\n4c 0f 44 c0\nbe 99 cf 41 00\n31 c0\n4c 89 f7\ne8 c2 dd ff ff\n4c 89 f7\n48 89 de\ne8 97 0a 00 00\nf3 0f 10 43 24\nf3 0f 5a c0\nbe c7 cf 41 00\nb0 01\n4c 89 f7\ne8 9f dd ff ff\nf6 05 78 a2 22 00 40\n0f 84 9c 00 00 00\n48 8b 8b 20 01 00 00\n48 8b 93 28 01 00 00\nbe e1 cf 41 00\n31 c0\n4c 89 f7\ne8 75 dd ff ff\n48 8b 83 20 01 00 00\n48 85 c0\n74 5c\nf3 0f 7e 8b 28 01 00 00\n66 0f 6f 15 59 7c 01 00\n66 0f 62 ca\n66 0f 28 1d 5d 7c 01 00\n66 0f 5c cb\n66 0f 70 c1 4e\n66 0f 58 c1\n66 48 0f 6e c8\n66 0f 62 ca\n66 0f 5c cb\n66 0f 70 d1 4e\n66 0f 58 d1\nf2 0f 5e c2\nbe fc cf 41 00\nb0 01\n4c 89 f7\ne8 17 dd ff ff\neb 1f\n48 83 c4 08\n5b\n41 5e\nc3\nbf 04 d0 41 00\nbe 04 00 00 00\nba 01 00 00 00\n4c 89 f1\ne8 36 e0 ff ff\n48 8b b3 18 01 00 00\n4c 89 f7\n48 83 c4 08\n5b\n41 5e\neb 03\n'
p1951
S'.text:0000000000404d80\n.text:0000000000404d82\n.text:0000000000404d83\n.text:0000000000404d84\n.text:0000000000404d87\n.text:0000000000404d8a\n.text:0000000000404d8d\n.text:0000000000404d93\n.text:0000000000404d9a\n.text:0000000000404d9d\n.text:0000000000404da2\n.text:0000000000404da6\n.text:0000000000404dab\n.text:0000000000404db0\n.text:0000000000404db4\n.text:0000000000404db8\n.text:0000000000404dbd\n.text:0000000000404dc1\n.text:0000000000404dc5\n.text:0000000000404dcb\n.text:0000000000404dcf\n.text:0000000000404dd4\n.text:0000000000404dd6\n.text:0000000000404dd9\n.text:0000000000404dde\n.text:0000000000404de1\n.text:0000000000404de4\n.text:0000000000404de9\n.text:0000000000404dee\n.text:0000000000404df2\n.text:0000000000404df7\n.text:0000000000404df9\n.text:0000000000404dfc\n.text:0000000000404e01\n.text:0000000000404e08\n.text:0000000000404e0e\n.text:0000000000404e15\n.text:0000000000404e1c\n.text:0000000000404e21\n.text:0000000000404e23\n.text:0000000000404e26\n.text:0000000000404e2b\n.text:0000000000404e32\n.text:0000000000404e35\n.text:0000000000404e37\n.text:0000000000404e3f\n.text:0000000000404e47\n.text:0000000000404e4b\n.text:0000000000404e53\n.text:0000000000404e57\n.text:0000000000404e5c\n.text:0000000000404e60\n.text:0000000000404e65\n.text:0000000000404e69\n.text:0000000000404e6d\n.text:0000000000404e72\n.text:0000000000404e76\n.text:0000000000404e7a\n.text:0000000000404e7f\n.text:0000000000404e81\n.text:0000000000404e84\n.text:0000000000404e89\n.text:0000000000404e8b\n.text:0000000000404e8f\n.text:0000000000404e90\n.text:0000000000404e92\n.text:0000000000404e93\n.text:0000000000404e98\n.text:0000000000404e9d\n.text:0000000000404ea2\n.text:0000000000404ea5\n.text:0000000000404eaa\n.text:0000000000404eb1\n.text:0000000000404eb4\n.text:0000000000404eb8\n.text:0000000000404eb9\n.text:0000000000404ebb\n'
p1952
tp1953
sS'digits_to_date_time'
p1954
(S'\n__stdcall digits_to_date_time(parser_control * pc, textint text_int)\n'
p1955
V\u000avoid digits_to_date_time(parser_control *pc,textint text_int)\u000a\u000a{\u000a  long lVar1;\u000a  long lVar2;\u000a  long lVar3;\u000a  \u000a  if ((((pc->dates_seen != 0) && ((pc->year).digits == 0)) && (pc->rels_seen == false)) &&\u000a     ((pc->times_seen != 0 || (2 < text_int.digits)))) {\u000a    (pc->year).digits = text_int.digits;\u000a    *(undefined4 *)&pc->year = text_int._0_4_;\u000a    *(undefined4 *)&(pc->year).field_0x4 = text_int._4_4_;\u000a    *(undefined4 *)&(pc->year).value = (undefined4)text_int.value;\u000a    *(int *)((long)&(pc->year).value + 4) = text_int.value._4_4_;\u000a    return;\u000a  }\u000a  lVar1 = SUB248(text_int >> 0x40,0);\u000a  lVar2 = (long)text_int.value._4_4_ >> 0x1f;\u000a  if (4 < text_int.digits) {\u000a    pc->dates_seen = pc->dates_seen + 1;\u000a    lVar3 = lVar1 / 100 + lVar2 + SUB168(SEXT816(lVar1) * ZEXT816(0xa3d70a3d70a3d70b) >> 0x7f,0);\u000a    pc->day = lVar1 + lVar3 * -100;\u000a    pc->month = lVar3 + (lVar3 / 100 + (lVar3 >> 0x3f) +\u000a                        SUB168(SEXT816(lVar3) * ZEXT816(0xa3d70a3d70a3d70b) >> 0x7f,0)) * -100;\u000a    (pc->year).value = lVar1 / 10000 + lVar2;\u000a    (pc->year).digits = text_int.digits - 4;\u000a    return;\u000a  }\u000a  pc->times_seen = pc->times_seen + 1;\u000a  if (text_int.digits < 3) {\u000a    pc->hour = lVar1;\u000a    lVar1 = 0;\u000a  }\u000a  else {\u000a    lVar2 = lVar1 / 100 + lVar2 + SUB168(SEXT816(lVar1) * ZEXT816(0xa3d70a3d70a3d70b) >> 0x7f,0);\u000a    pc->hour = lVar2;\u000a    lVar1 = lVar1 + lVar2 * -100;\u000a  }\u000a  pc->minutes = lVar1;\u000a  *(undefined4 *)&(pc->seconds).tv_sec = 0;\u000a  *(undefined4 *)((long)&(pc->seconds).tv_sec + 4) = 0;\u000a  *(undefined4 *)&(pc->seconds).tv_nsec = 0;\u000a  *(undefined4 *)((long)&(pc->seconds).tv_nsec + 4) = 0;\u000a  pc->meridian = 2;\u000a  return;\u000a}\u000a\u000a
p1956
S'LEA RAX,[RSP + 0x8]\nCMP qword ptr [0xb0 + RDI],0x0\nJZ 0x00414243\nCMP qword ptr [RDI + 0x38],0x0\nJNZ 0x00414243\nCMP byte ptr [0xa9 + RDI],0x0\nJZ 0x0041432f\nMOV RCX,qword ptr [RAX + 0x8]\nMOV R8,qword ptr [RAX + 0x10]\nCMP R8,0x5\nJC 0x004142db\nINC qword ptr [0xb0 + RDI]\nMOV R9,-0x5c28f5c28f5c28f5\nMOV RAX,RCX\nIMUL R9\nMOV RSI,RDX\nADD RSI,RCX\nMOV RAX,RSI\nSHR RAX,0x3f\nSAR RSI,0x6\nADD RSI,RAX\nIMUL RAX,RSI,0x64\nMOV RDX,RCX\nSUB RDX,RAX\nMOV qword ptr [RDI + 0x48],RDX\nMOV RAX,RSI\nIMUL R9\nADD RDX,RSI\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0x6\nADD RDX,RAX\nIMUL RAX,RDX,0x64\nSUB RSI,RAX\nMOV qword ptr [RDI + 0x40],RSI\nMOV RDX,0x346dc5d63886594b\nMOV RAX,RCX\nIMUL RDX\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0xb\nADD RDX,RAX\nMOV qword ptr [RDI + 0x30],RDX\nADD R8,-0x4\nMOV qword ptr [RDI + 0x38],R8\nRET\nINC qword ptr [0xd0 + RDI]\nCMP R8,0x2\nJA 0x004142f0\nMOV qword ptr [RDI + 0x50],RCX\nXOR ECX,ECX\nJMP 0x0041431c\nMOV RDX,-0x5c28f5c28f5c28f5\nMOV RAX,RCX\nIMUL RDX\nADD RDX,RCX\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0x6\nADD RDX,RAX\nMOV qword ptr [RDI + 0x50],RDX\nIMUL RAX,RDX,0x64\nSUB RCX,RAX\nMOV qword ptr [RDI + 0x58],RCX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RDI + 0x60],XMM0\nMOV dword ptr [RDI + 0x20],0x2\nRET\nCMP qword ptr [0xd0 + RDI],0x0\nJNZ 0x00414344\nCMP qword ptr [RAX + 0x10],0x3\nJC 0x00414243\nMOV RCX,qword ptr [RAX + 0x10]\nMOV qword ptr [RDI + 0x38],RCX\nMOVUPS XMM0,xmmword ptr [RAX]\nMOVUPS xmmword ptr [RDI + 0x28],XMM0\nRET\n'
p1957
S'48 8d 44 24 08\n48 83 bf b0 00 00 00 00\n74 14\n48 83 7f 38 00\n75 0d\n80 bf a9 00 00 00 00\n0f 84 ec 00 00 00\n48 8b 48 08\n4c 8b 40 10\n49 83 f8 05\n0f 82 86 00 00 00\n48 ff 87 b0 00 00 00\n49 b9 0b d7 a3 70 3d 0a d7 a3\n48 89 c8\n49 f7 e9\n48 89 d6\n48 01 ce\n48 89 f0\n48 c1 e8 3f\n48 c1 fe 06\n48 01 c6\n48 6b c6 64\n48 89 ca\n48 29 c2\n48 89 57 48\n48 89 f0\n49 f7 e9\n48 01 f2\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 06\n48 01 c2\n48 6b c2 64\n48 29 c6\n48 89 77 40\n48 ba 4b 59 86 38 d6 c5 6d 34\n48 89 c8\n48 f7 ea\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 0b\n48 01 c2\n48 89 57 30\n49 83 c0 fc\n4c 89 47 38\nc3\n48 ff 87 d0 00 00 00\n49 83 f8 02\n77 08\n48 89 4f 50\n31 c9\neb 2c\n48 ba 0b d7 a3 70 3d 0a d7 a3\n48 89 c8\n48 f7 ea\n48 01 ca\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 06\n48 01 c2\n48 89 57 50\n48 6b c2 64\n48 29 c1\n48 89 4f 58\n0f 57 c0\n0f 11 47 60\nc7 47 20 02 00 00 00\nc3\n48 83 bf d0 00 00 00 00\n75 0b\n48 83 78 10 03\n0f 82 ff fe ff ff\n48 8b 48 10\n48 89 4f 38\n0f 10 00\n0f 11 47 28\nc3\n'
p1958
S'.text:0000000000414220\n.text:0000000000414225\n.text:000000000041422d\n.text:000000000041422f\n.text:0000000000414234\n.text:0000000000414236\n.text:000000000041423d\n.text:0000000000414243\n.text:0000000000414247\n.text:000000000041424b\n.text:000000000041424f\n.text:0000000000414255\n.text:000000000041425c\n.text:0000000000414266\n.text:0000000000414269\n.text:000000000041426c\n.text:000000000041426f\n.text:0000000000414272\n.text:0000000000414275\n.text:0000000000414279\n.text:000000000041427d\n.text:0000000000414280\n.text:0000000000414284\n.text:0000000000414287\n.text:000000000041428a\n.text:000000000041428e\n.text:0000000000414291\n.text:0000000000414294\n.text:0000000000414297\n.text:000000000041429a\n.text:000000000041429e\n.text:00000000004142a2\n.text:00000000004142a5\n.text:00000000004142a9\n.text:00000000004142ac\n.text:00000000004142b0\n.text:00000000004142ba\n.text:00000000004142bd\n.text:00000000004142c0\n.text:00000000004142c3\n.text:00000000004142c7\n.text:00000000004142cb\n.text:00000000004142ce\n.text:00000000004142d2\n.text:00000000004142d6\n.text:00000000004142da\n.text:00000000004142db\n.text:00000000004142e2\n.text:00000000004142e6\n.text:00000000004142e8\n.text:00000000004142ec\n.text:00000000004142ee\n.text:00000000004142f0\n.text:00000000004142fa\n.text:00000000004142fd\n.text:0000000000414300\n.text:0000000000414303\n.text:0000000000414306\n.text:000000000041430a\n.text:000000000041430e\n.text:0000000000414311\n.text:0000000000414315\n.text:0000000000414319\n.text:000000000041431c\n.text:0000000000414320\n.text:0000000000414323\n.text:0000000000414327\n.text:000000000041432e\n.text:000000000041432f\n.text:0000000000414337\n.text:0000000000414339\n.text:000000000041433e\n.text:0000000000414344\n.text:0000000000414348\n.text:000000000041434c\n.text:000000000041434f\n.text:0000000000414353\n'
p1959
tp1960
sS'constrain_rate'
p1961
(S'\n__stdcall constrain_rate(float rate)\n'
p1962
V\u000afloat constrain_rate(float rate)\u000a\u000a{\u000a  undefined4 in_XMM0_Db;\u000a  undefined4 in_XMM0_Dc;\u000a  undefined4 in_XMM0_Dd;\u000a  undefined in_XMM2 [16];\u000a  undefined auVar1 [16];\u000a  \u000a  auVar1 = maxss(in_XMM2 & (undefined  [16])0x0,\u000a                 CONCAT412(in_XMM0_Dd,CONCAT48(in_XMM0_Dc,CONCAT44(in_XMM0_Db,rate))));\u000a  auVar1 = orps(ZEXT416(-(uint)(DAT_0041d344 < rate) & (uint)DAT_0041d344),\u000a                CONCAT412(SUB164(auVar1 >> 0x60,0),\u000a                          CONCAT48(SUB164(auVar1 >> 0x40,0),\u000a                                   CONCAT44(SUB164(auVar1 >> 0x20,0),\u000a                                            ~-(uint)(DAT_0041d344 < rate) & SUB164(auVar1,0)))));\u000a  return SUB164(auVar1,0);\u000a}\u000a\u000a
p1963
S'XORPS XMM2,XMM2\nMAXSS XMM2,XMM0\nMOVSS XMM3,dword ptr [0x0041d344]\nMOVAPS XMM1,XMM3\nCMPLTSS XMM1,XMM0\nMOVAPS XMM0,XMM1\nANDNPS XMM0,XMM2\nANDPS XMM1,XMM3\nORPS XMM1,XMM0\nMOVAPS XMM0,XMM1\nRET\n'
p1964
S'0f 57 d2\nf3 0f 5f d0\nf3 0f 10 1d e5 77 01 00\n0f 28 cb\nf3 0f c2 c8 01\n0f 28 c1\n0f 55 c2\n0f 54 cb\n0f 56 c8\n0f 28 c1\nc3\n'
p1965
S'.text:0000000000405b50\n.text:0000000000405b53\n.text:0000000000405b57\n.text:0000000000405b5f\n.text:0000000000405b62\n.text:0000000000405b67\n.text:0000000000405b6a\n.text:0000000000405b6d\n.text:0000000000405b70\n.text:0000000000405b73\n.text:0000000000405b76\n'
p1966
tp1967
sS'fsetfilecon'
p1968
(S'\n__stdcall fsetfilecon(security_context_t con)\n'
p1969
V\u000aint fsetfilecon(security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p1970
S'PUSH RAX\nCALL 0x00402770\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p1971
S'50\ne8 0a bc fe ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p1972
S'.text:0000000000416b60\n.text:0000000000416b61\n.text:0000000000416b66\n.text:0000000000416b6c\n.text:0000000000416b71\n.text:0000000000416b72\n'
p1973
tp1974
sS'__ctype_get_mb_cur_max'
p1975
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p1976
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_0062d130)();\u000a  return sVar1;\u000a}\u000a\u000a
p1977
S'JMP qword ptr [0x0062d130]\n'
p1978
S'ff 25 0a a8 22 00\n'
p1979
S'.plt:0000000000402920\n'
p1980
tp1981
sS'raw_hasher'
p1982
(S'\n__stdcall raw_hasher(void * data, size_t n)\n'
p1983
V\u000asize_t raw_hasher(void *data,size_t n)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = rotr_sz((size_t)data);\u000a  return sVar1 % n;\u000a}\u000a\u000a
p1984
S'PUSH RBX\nMOV RBX,RSI\nMOV ESI,0x3\nCALL 0x0041b8b0\nXOR EDX,EDX\nDIV RBX\nMOV RAX,RDX\nPOP RBX\nRET\n'
p1985
S'53\n48 89 f3\nbe 03 00 00 00\ne8 d2 af 00 00\n31 d2\n48 f7 f3\n48 89 d0\n5b\nc3\n'
p1986
S'.text:00000000004108d0\n.text:00000000004108d1\n.text:00000000004108d4\n.text:00000000004108d9\n.text:00000000004108de\n.text:00000000004108e0\n.text:00000000004108e3\n.text:00000000004108e6\n.text:00000000004108e7\n'
p1987
tp1988
sS'parse_gid'
p1989
(S'\n__stdcall parse_gid(parser_table * entry, char * * argv, int * arg_ptr)\n'
p1990
V\u000a_Bool parse_gid(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  predicate *ppVar1;\u000a  \u000a  ppVar1 = insert_num(argv,arg_ptr,entry);\u000a  if (ppVar1 == (predicate *)0x0) {\u000a    *arg_ptr = *arg_ptr + -1;\u000a  }\u000a  else {\u000a    ppVar1->est_success_rate =\u000a         *(float *)(&DAT_0041fbc8 + (ulong)(-(uint)(*(ulong *)(ppVar1->args + 8) < 100) & 4));\u000a  }\u000a  return (_Bool)(ppVar1 != (predicate *)0x0);\u000a}\u000a\u000a
p1991
S'PUSH RBX\nMOV RBX,RDX\nMOV RAX,RDI\nMOV RDI,RSI\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x0040d2f0\nTEST RAX,RAX\nJZ 0x0040b6b6\nCMP qword ptr [RAX + 0x40],0x64\nSBB RCX,RCX\nAND ECX,0x4\nMOVSS XMM0,dword ptr [0x41fbc8 + RCX]\nMOVSS dword ptr [RAX + 0x24],XMM0\nMOV AL,0x1\nJMP 0x0040b6ba\nDEC dword ptr [RBX]\nXOR EAX,EAX\nPOP RBX\nRET\n'
p1992
S'53\n48 89 d3\n48 89 f8\n48 89 f7\n48 89 de\n48 89 c2\ne8 5b 1c 00 00\n48 85 c0\n74 1c\n48 83 78 40 64\n48 19 c9\n83 e1 04\nf3 0f 10 81 c8 fb 41 00\nf3 0f 11 40 24\nb0 01\neb 04\nff 0b\n31 c0\n5b\nc3\n'
p1993
S'.text:000000000040b680\n.text:000000000040b681\n.text:000000000040b684\n.text:000000000040b687\n.text:000000000040b68a\n.text:000000000040b68d\n.text:000000000040b690\n.text:000000000040b695\n.text:000000000040b698\n.text:000000000040b69a\n.text:000000000040b69f\n.text:000000000040b6a2\n.text:000000000040b6a5\n.text:000000000040b6ad\n.text:000000000040b6b2\n.text:000000000040b6b4\n.text:000000000040b6b6\n.text:000000000040b6b8\n.text:000000000040b6ba\n.text:000000000040b6bb\n'
p1994
tp1995
sS'pred_name'
p1996
(S'\n__stdcall pred_name(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p1997
V\u000a_Bool pred_name(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = pred_name_common(pathname,*(char **)pred_ptr->args);\u000a  return _Var1;\u000a}\u000a\u000a
p1998
S'MOV RSI,qword ptr [RDX + 0x38]\nXOR EDX,EDX\nJMP 0x00404be0\n'
p1999
S'48 8b 72 38\n31 d2\ne9 35 09 00 00\n'
p2000
S'.text:00000000004042a0\n.text:00000000004042a4\n.text:00000000004042a6\n'
p2001
tp2002
sS'readlinkat'
p2003
(S'\n__stdcall readlinkat(int __fd, char * __path, char * __buf, size_t __len)\n'
p2004
V\u000a/* WARNING: Switch with 1 destination removed at 0x00402b60 */\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000assize_t readlinkat(int __fd,char *__path,char *__buf,size_t __len)\u000a\u000a{\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p2005
S'JMP qword ptr [0x0062d250]\n'
p2006
S'ff 25 ea a6 22 00\n'
p2007
S'.plt:0000000000402b60\n'
p2008
tp2009
sS'time'
p2010
(S'\n__stdcall time(time_t * __timer)\n'
p2011
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000atime_t time(time_t *__timer)\u000a\u000a{\u000a  time_t tVar1;\u000a  \u000a  tVar1 = (*(code *)PTR_time_0062d2a0)();\u000a  return tVar1;\u000a}\u000a\u000a
p2012
S'JMP qword ptr [0x0062d2a0]\n'
p2013
S'ff 25 9a a6 22 00\n'
p2014
S'.plt:0000000000402c00\n'
p2015
tp2016
sS'check_tuning'
p2017
(S'\n__stdcall check_tuning(Hash_table * table)\n'
p2018
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000a_Bool check_tuning(Hash_table *table)\u000a\u000a{\u000a  float fVar1;\u000a  Hash_tuning *pHVar2;\u000a  undefined uVar3;\u000a  float fVar4;\u000a  \u000a  pHVar2 = table->tuning;\u000a  uVar3 = 1;\u000a  if ((pHVar2 != &default_tuning) &&\u000a     ((((fVar1 = pHVar2->growth_threshold, fVar1 <= DAT_0041fb7c || (DAT_00422828 <= fVar1)) ||\u000a       (pHVar2->growth_factor <= _DAT_0042282c)) ||\u000a      (((pHVar2->shrink_threshold < 0.00000000 ||\u000a        (fVar4 = pHVar2->shrink_threshold + DAT_0041fb7c, fVar1 <= fVar4)) ||\u000a       ((DAT_0041d344 < pHVar2->shrink_factor || (pHVar2->shrink_factor <= fVar4)))))))) {\u000a    table->tuning = &default_tuning;\u000a    uVar3 = 0;\u000a  }\u000a  return (_Bool)uVar3;\u000a}\u000a\u000a
p2019
S'MOV RCX,qword ptr [RDI + 0x28]\nMOV EDX,0x4228a4\nMOV AL,0x1\nCMP RCX,RDX\nJZ 0x00410973\nMOVSS XMM0,dword ptr [RCX + 0x8]\nUCOMISS XMM0,dword ptr [0x0041fb7c]\nJBE 0x00410969\nMOVSS XMM1,dword ptr [0x00422828]\nUCOMISS XMM1,XMM0\nJBE 0x00410969\nMOVSS XMM1,dword ptr [RCX + 0xc]\nUCOMISS XMM1,dword ptr [0x0042282c]\nJBE 0x00410969\nMOVSS XMM1,dword ptr [RCX]\nXORPS XMM2,XMM2\nUCOMISS XMM1,XMM2\nJC 0x00410969\nADDSS XMM1,dword ptr [0x0041fb7c]\nUCOMISS XMM0,XMM1\nJBE 0x00410969\nMOVSS XMM0,dword ptr [RCX + 0x4]\nMOVSS XMM2,dword ptr [0x0041d344]\nUCOMISS XMM2,XMM0\nJC 0x00410969\nUCOMISS XMM0,XMM1\nJA 0x00410973\nMOV qword ptr [RDI + 0x28],0x4228a4\nXOR EAX,EAX\nRET\n'
p2020
S'48 8b 4f 28\nba a4 28 42 00\nb0 01\n48 39 d1\n74 63\nf3 0f 10 41 08\n0f 2e 05 60 f2 00 00\n76 4b\nf3 0f 10 0d 02 1f 01 00\n0f 2e c8\n76 3e\nf3 0f 10 49 0c\n0f 2e 0d f5 1e 01 00\n76 30\nf3 0f 10 09\n0f 57 d2\n0f 2e ca\n72 24\nf3 0f 58 0d 2f f2 00 00\n0f 2e c1\n76 17\nf3 0f 10 41 04\nf3 0f 10 15 e5 c9 00 00\n0f 2e d0\n72 05\n0f 2e c1\n77 0a\n48 c7 47 28 a4 28 42 00\n31 c0\nc3\n'
p2021
S'.text:0000000000410900\n.text:0000000000410904\n.text:0000000000410909\n.text:000000000041090b\n.text:000000000041090e\n.text:0000000000410910\n.text:0000000000410915\n.text:000000000041091c\n.text:000000000041091e\n.text:0000000000410926\n.text:0000000000410929\n.text:000000000041092b\n.text:0000000000410930\n.text:0000000000410937\n.text:0000000000410939\n.text:000000000041093d\n.text:0000000000410940\n.text:0000000000410943\n.text:0000000000410945\n.text:000000000041094d\n.text:0000000000410950\n.text:0000000000410952\n.text:0000000000410957\n.text:000000000041095f\n.text:0000000000410962\n.text:0000000000410964\n.text:0000000000410967\n.text:0000000000410969\n.text:0000000000410971\n.text:0000000000410973\n'
p2022
tp2023
sS'argmatch_to_argument'
p2024
(S'\n__stdcall argmatch_to_argument(char * value, char * * arglist, char * vallist, size_t valsize)\n'
p2025
V\u000achar * argmatch_to_argument(char *value,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  \u000a  pcVar2 = *arglist;\u000a  if (pcVar2 != (char *)0x0) {\u000a    arglist = arglist + 1;\u000a    do {\u000a      iVar1 = memcmp(value,vallist,valsize);\u000a      if (iVar1 == 0) {\u000a        return pcVar2;\u000a      }\u000a      pcVar2 = *arglist;\u000a      arglist = arglist + 1;\u000a      vallist = vallist + valsize;\u000a    } while (pcVar2 != (char *)0x0);\u000a  }\u000a  return (char *)0x0;\u000a}\u000a\u000a
p2026
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R14,RCX\nMOV R12,RDX\nMOV RBX,RSI\nMOV R13,RDI\nMOV R15,qword ptr [RBX]\nTEST R15,R15\nJZ 0x0041b841\nADD RBX,0x8\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R14\nCALL 0x00402b20\nTEST EAX,EAX\nJZ 0x0041b844\nMOV R15,qword ptr [RBX]\nADD RBX,0x8\nADD R12,R14\nTEST R15,R15\nJNZ 0x0041b820\nXOR R15D,R15D\nMOV RAX,R15\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p2027
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 ce\n49 89 d4\n48 89 f3\n49 89 fd\n4c 8b 3b\n4d 85 ff\n74 34\n48 83 c3 08\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ef\n4c 89 e6\n4c 89 f2\ne8 f2 72 fe ff\n85 c0\n74 12\n4c 8b 3b\n48 83 c3 08\n4d 01 f4\n4d 85 ff\n75 df\n45 31 ff\n4c 89 f8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p2028
S'.text:000000000041b7f0\n.text:000000000041b7f2\n.text:000000000041b7f4\n.text:000000000041b7f6\n.text:000000000041b7f8\n.text:000000000041b7f9\n.text:000000000041b7fc\n.text:000000000041b7ff\n.text:000000000041b802\n.text:000000000041b805\n.text:000000000041b808\n.text:000000000041b80b\n.text:000000000041b80d\n.text:000000000041b811\n.text:000000000041b820\n.text:000000000041b823\n.text:000000000041b826\n.text:000000000041b829\n.text:000000000041b82e\n.text:000000000041b830\n.text:000000000041b832\n.text:000000000041b835\n.text:000000000041b839\n.text:000000000041b83c\n.text:000000000041b83f\n.text:000000000041b841\n.text:000000000041b844\n.text:000000000041b847\n.text:000000000041b848\n.text:000000000041b84a\n.text:000000000041b84c\n.text:000000000041b84e\n.text:000000000041b850\n'
p2029
tp2030
sS'hash_do_for_each'
p2031
(S'\n__stdcall hash_do_for_each(Hash_table * table, Hash_processor * processor, void * processor_data)\n'
p2032
V\u000asize_t hash_do_for_each(Hash_table *table,_Bool (*processor)(void *,void *),void *processor_data)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  _Bool _Var2;\u000a  size_t sVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar4 = table->bucket;\u000a  if (phVar4 < table->bucket_limit) {\u000a    sVar3 = 0;\u000a    do {\u000a      phVar1 = phVar4;\u000a      if (phVar4->data != (void *)0x0) {\u000a        while (phVar1 != (hash_entry *)0x0) {\u000a          _Var2 = (*processor)(phVar1->data,processor_data);\u000a          if (_Var2 == false) {\u000a            return sVar3;\u000a          }\u000a          sVar3 = sVar3 + 1;\u000a          phVar1 = phVar1->next;\u000a        }\u000a      }\u000a      phVar4 = phVar4 + 1;\u000a    } while (phVar4 < table->bucket_limit);\u000a  }\u000a  else {\u000a    sVar3 = 0;\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p2033
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R15,RSI\nMOV R12,RDI\nMOV R13,qword ptr [R12]\nCMP R13,qword ptr [R12 + 0x8]\nJNC 0x00410777\nXOR EBX,EBX\nCMP qword ptr [R13],0x0\nJZ 0x0041076a\nTEST R13,R13\nJZ 0x0041076a\nMOV RBP,R13\nMOV RDI,qword ptr [RBP]\nMOV RSI,R14\nCALL R15\nTEST AL,AL\nJZ 0x00410779\nINC RBX\nMOV RBP,qword ptr [RBP + 0x8]\nTEST RBP,RBP\nJNZ 0x00410750\nADD R13,0x10\nCMP R13,qword ptr [R12 + 0x8]\nJC 0x00410741\nJMP 0x00410779\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2034
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f7\n49 89 fc\n4d 8b 2c 24\n4d 3b 6c 24 08\n73 38\n31 db\n49 83 7d 00 00\n74 22\n4d 85 ed\n74 1d\n4c 89 ed\n48 8b 7d 00\n4c 89 f6\n41 ff d7\n84 c0\n74 1b\n48 ff c3\n48 8b 6d 08\n48 85 ed\n75 e6\n49 83 c5 10\n4d 3b 6c 24 08\n72 cc\neb 02\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2035
S'.text:0000000000410720\n.text:0000000000410721\n.text:0000000000410723\n.text:0000000000410725\n.text:0000000000410727\n.text:0000000000410729\n.text:000000000041072a\n.text:000000000041072b\n.text:000000000041072e\n.text:0000000000410731\n.text:0000000000410734\n.text:0000000000410738\n.text:000000000041073d\n.text:000000000041073f\n.text:0000000000410741\n.text:0000000000410746\n.text:0000000000410748\n.text:000000000041074b\n.text:000000000041074d\n.text:0000000000410750\n.text:0000000000410754\n.text:0000000000410757\n.text:000000000041075a\n.text:000000000041075c\n.text:000000000041075e\n.text:0000000000410761\n.text:0000000000410765\n.text:0000000000410768\n.text:000000000041076a\n.text:000000000041076e\n.text:0000000000410773\n.text:0000000000410775\n.text:0000000000410777\n.text:0000000000410779\n.text:000000000041077c\n.text:0000000000410780\n.text:0000000000410781\n.text:0000000000410783\n.text:0000000000410785\n.text:0000000000410787\n.text:0000000000410789\n.text:000000000041078a\n'
p2036
tp2037
sS'usage'
p2038
(S'\n__stdcall usage()\n'
p2039
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  FILE *__stream;\u000a  FILE *__stream_00;\u000a  char *__format;\u000a  \u000a  __stream_00 = stderr;\u000a  __stream = stdout;\u000a  if (iParm1 == 0) {\u000a    __format = (char *)dcgettext(0,\u000a                                 "Usage: %s [-H] [-L] [-P] [-Olevel] [-D debugopts] [path...] [expression]\u005cn"\u000a                                 ,5);\u000a    fprintf((FILE *)__stream,__format,program_name);\u000a    __format = (char *)dcgettext(0,\u000a                                 "\u005cndefault path is the current directory; default expression is -print\u005cnexpression may consist of: operators, options, tests, and actions:\u005cn"\u000a                                 ,5);\u000a    fputs(__format,(FILE *)stdout);\u000a    __format = (char *)dcgettext(0,\u000a                                 "operators (decreasing precedence; -and is implicit where no others are given):\u005cn      ( EXPR )   ! EXPR   -not EXPR   EXPR1 -a EXPR2   EXPR1 -and EXPR2\u005cn      EXPR1 -o EXPR2   EXPR1 -or EXPR2   EXPR1 , EXPR2\u005cn"\u000a                                 ,5);\u000a    fputs(__format,(FILE *)stdout);\u000a    __format = (char *)dcgettext(0,\u000a                                 "positional options (always true): -daystart -follow -regextype\u005cn\u005cnnormal options (always true, specified before other expressions):\u005cn      -depth --help -maxdepth LEVELS -mindepth LEVELS -mount -noleaf\u005cn      --version -xdev -ignore_readdir_race -noignore_readdir_race\u005cn"\u000a                                 ,5);\u000a    fputs(__format,(FILE *)stdout);\u000a    __format = (char *)dcgettext(0,\u000a                                 "tests (N can be +N or -N or N): -amin N -anewer FILE -atime N -cmin N\u005cn      -cnewer FILE -ctime N -empty -false -fstype TYPE -gid N -group NAME\u005cn      -ilname PATTERN -iname PATTERN -inum N -iwholename PATTERN -iregex PATTERN\u005cn      -links N -lname PATTERN -mmin N -mtime N -name PATTERN -newer FILE"\u000a                                 ,5);\u000a    fputs(__format,(FILE *)stdout);\u000a    __format = (char *)dcgettext(0,\u000a                                 "\u005cn      -nouser -nogroup -path PATTERN -perm [-/]MODE -regex PATTERN\u005cn      -readable -writable -executable\u005cn      -wholename PATTERN -size N[bcwkMG] -true -type [bcdpflsD] -uid N\u005cn      -used N -user NAME -xtype [bcdpfls]"\u000a                                 ,5);\u000a    fputs(__format,(FILE *)stdout);\u000a    __format = (char *)dcgettext(0,"      -context CONTEXT\u005cn",5);\u000a    fputs(__format,(FILE *)stdout);\u000a    __format = (char *)dcgettext(0,\u000a                                 "\u005cnactions: -delete -print0 -printf FORMAT -fprintf FILE FORMAT -print \u005cn      -fprint0 FILE -fprint FILE -ls -fls FILE -prune -quit\u005cn      -exec COMMAND ; -exec COMMAND {} + -ok COMMAND ;\u005cn      -execdir COMMAND ; -execdir COMMAND {} + -okdir COMMAND ;\u005cn\u005cn"\u000a                                 ,5);\u000a    fputs(__format,(FILE *)stdout);\u000a    show_valid_debug_options(0);\u000a    __format = (char *)dcgettext(0,\u000a                                 "\u005cnUse \u005c'-D help\u005c' for a description of the options, or see find(1)\u005cn\u005cn"\u000a                                 ,5);\u000a    fputs(__format,(FILE *)stdout);\u000a    explain_how_to_report_bugs(stdout,program_name);\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  __format = (char *)dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  fprintf(__stream_00,__format,program_name);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p2040
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,EDI\nTEST EBP,EBP\nJNZ 0x004078cd\nMOV RBX,qword ptr [0x0062de28]\nXOR EDI,EDI\nMOV ESI,0x41e095\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0062e680]\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RSI,RCX\nCALL 0x00402ba0\nXOR EDI,EDI\nMOV ESI,0x41e0df\nMOV EDX,0x5\nCALL 0x00402910\nMOV RSI,qword ptr [0x0062de28]\nMOV RDI,RAX\nCALL 0x00402a50\nXOR EDI,EDI\nMOV ESI,0x41e168\nMOV EDX,0x5\nCALL 0x00402910\nMOV RSI,qword ptr [0x0062de28]\nMOV RDI,RAX\nCALL 0x00402a50\nXOR EDI,EDI\nMOV ESI,0x41e237\nMOV EDX,0x5\nCALL 0x00402910\nMOV RSI,qword ptr [0x0062de28]\nMOV RDI,RAX\nCALL 0x00402a50\nXOR EDI,EDI\nMOV ESI,0x41e341\nMOV EDX,0x5\nCALL 0x00402910\nMOV RSI,qword ptr [0x0062de28]\nMOV RDI,RAX\nCALL 0x00402a50\nXOR EDI,EDI\nMOV ESI,0x41e46b\nMOV EDX,0x5\nCALL 0x00402910\nMOV RSI,qword ptr [0x0062de28]\nMOV RDI,RAX\nCALL 0x00402a50\nXOR EDI,EDI\nMOV ESI,0x41e546\nMOV EDX,0x5\nCALL 0x00402910\nMOV RSI,qword ptr [0x0062de28]\nMOV RDI,RAX\nCALL 0x00402a50\nXOR EDI,EDI\nMOV ESI,0x41e55e\nMOV EDX,0x5\nCALL 0x00402910\nMOV RSI,qword ptr [0x0062de28]\nMOV RDI,RAX\nCALL 0x00402a50\nXOR EDI,EDI\nCALL 0x00407910\nXOR EDI,EDI\nMOV ESI,0x41e659\nMOV EDX,0x5\nCALL 0x00402910\nMOV RSI,qword ptr [0x0062de28]\nMOV RDI,RAX\nCALL 0x00402a50\nMOV RDI,qword ptr [0x0062de28]\nMOV RSI,qword ptr [0x0062e680]\nCALL 0x0040fbe0\nMOV EDI,EBP\nCALL 0x00402ed0\nMOV RBX,qword ptr [0x0062de60]\nXOR EDI,EDI\nMOV ESI,0x41e06e\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0062e680]\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RSI,RCX\nCALL 0x00402ba0\nMOV EDI,EBP\nCALL 0x00402ed0\n'
p2041
S'55\n53\n50\n89 fd\n85 ed\n0f 85 50 01 00 00\n48 8b 1d a4 66 22 00\n31 ff\nbe 95 e0 41 00\nba 05 00 00 00\ne8 7b b1 ff ff\n48 89 c1\n48 8b 15 e1 6e 22 00\n31 c0\n48 89 df\n48 89 ce\ne8 f4 b3 ff ff\n31 ff\nbe df e0 41 00\nba 05 00 00 00\ne8 53 b1 ff ff\n48 8b 35 64 66 22 00\n48 89 c7\ne8 84 b2 ff ff\n31 ff\nbe 68 e1 41 00\nba 05 00 00 00\ne8 33 b1 ff ff\n48 8b 35 44 66 22 00\n48 89 c7\ne8 64 b2 ff ff\n31 ff\nbe 37 e2 41 00\nba 05 00 00 00\ne8 13 b1 ff ff\n48 8b 35 24 66 22 00\n48 89 c7\ne8 44 b2 ff ff\n31 ff\nbe 41 e3 41 00\nba 05 00 00 00\ne8 f3 b0 ff ff\n48 8b 35 04 66 22 00\n48 89 c7\ne8 24 b2 ff ff\n31 ff\nbe 6b e4 41 00\nba 05 00 00 00\ne8 d3 b0 ff ff\n48 8b 35 e4 65 22 00\n48 89 c7\ne8 04 b2 ff ff\n31 ff\nbe 46 e5 41 00\nba 05 00 00 00\ne8 b3 b0 ff ff\n48 8b 35 c4 65 22 00\n48 89 c7\ne8 e4 b1 ff ff\n31 ff\nbe 5e e5 41 00\nba 05 00 00 00\ne8 93 b0 ff ff\n48 8b 35 a4 65 22 00\n48 89 c7\ne8 c4 b1 ff ff\n31 ff\ne8 7d 00 00 00\n31 ff\nbe 59 e6 41 00\nba 05 00 00 00\ne8 6c b0 ff ff\n48 8b 35 7d 65 22 00\n48 89 c7\ne8 9d b1 ff ff\n48 8b 3d 6e 65 22 00\n48 8b 35 bf 6d 22 00\ne8 1a 83 00 00\n89 ef\ne8 03 b6 ff ff\n48 8b 1d 8c 65 22 00\n31 ff\nbe 6e e0 41 00\nba 05 00 00 00\ne8 2b b0 ff ff\n48 89 c1\n48 8b 15 91 6d 22 00\n31 c0\n48 89 df\n48 89 ce\ne8 a4 b2 ff ff\n89 ef\ne8 cd b5 ff ff\n'
p2042
S'.text:0000000000407770\n.text:0000000000407771\n.text:0000000000407772\n.text:0000000000407773\n.text:0000000000407775\n.text:0000000000407777\n.text:000000000040777d\n.text:0000000000407784\n.text:0000000000407786\n.text:000000000040778b\n.text:0000000000407790\n.text:0000000000407795\n.text:0000000000407798\n.text:000000000040779f\n.text:00000000004077a1\n.text:00000000004077a4\n.text:00000000004077a7\n.text:00000000004077ac\n.text:00000000004077ae\n.text:00000000004077b3\n.text:00000000004077b8\n.text:00000000004077bd\n.text:00000000004077c4\n.text:00000000004077c7\n.text:00000000004077cc\n.text:00000000004077ce\n.text:00000000004077d3\n.text:00000000004077d8\n.text:00000000004077dd\n.text:00000000004077e4\n.text:00000000004077e7\n.text:00000000004077ec\n.text:00000000004077ee\n.text:00000000004077f3\n.text:00000000004077f8\n.text:00000000004077fd\n.text:0000000000407804\n.text:0000000000407807\n.text:000000000040780c\n.text:000000000040780e\n.text:0000000000407813\n.text:0000000000407818\n.text:000000000040781d\n.text:0000000000407824\n.text:0000000000407827\n.text:000000000040782c\n.text:000000000040782e\n.text:0000000000407833\n.text:0000000000407838\n.text:000000000040783d\n.text:0000000000407844\n.text:0000000000407847\n.text:000000000040784c\n.text:000000000040784e\n.text:0000000000407853\n.text:0000000000407858\n.text:000000000040785d\n.text:0000000000407864\n.text:0000000000407867\n.text:000000000040786c\n.text:000000000040786e\n.text:0000000000407873\n.text:0000000000407878\n.text:000000000040787d\n.text:0000000000407884\n.text:0000000000407887\n.text:000000000040788c\n.text:000000000040788e\n.text:0000000000407893\n.text:0000000000407895\n.text:000000000040789a\n.text:000000000040789f\n.text:00000000004078a4\n.text:00000000004078ab\n.text:00000000004078ae\n.text:00000000004078b3\n.text:00000000004078ba\n.text:00000000004078c1\n.text:00000000004078c6\n.text:00000000004078c8\n.text:00000000004078cd\n.text:00000000004078d4\n.text:00000000004078d6\n.text:00000000004078db\n.text:00000000004078e0\n.text:00000000004078e5\n.text:00000000004078e8\n.text:00000000004078ef\n.text:00000000004078f1\n.text:00000000004078f4\n.text:00000000004078f7\n.text:00000000004078fc\n.text:00000000004078fe\n'
p2043
tp2044
sS'get_stat_ctime_ns'
p2045
(S'\n__stdcall get_stat_ctime_ns(stat * st)\n'
p2046
V\u000along get_stat_ctime_ns(stat *st)\u000a\u000a{\u000a  return (st->st_ctim).tv_nsec;\u000a}\u000a\u000a
p2047
S'MOV RAX,qword ptr [RDI + 0x70]\nRET\n'
p2048
S'48 8b 47 70\nc3\n'
p2049
S'.text:0000000000416c40\n.text:0000000000416c44\n'
p2050
tp2051
sS'quoting_options_from_style'
p2052
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p2053
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p2054
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x0041631d\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00402750\n'
p2055
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 2e c4 fe ff\n'
p2056
S'.text:00000000004162d0\n.text:00000000004162d4\n.text:00000000004162d7\n.text:00000000004162dc\n.text:00000000004162e1\n.text:00000000004162e5\n.text:00000000004162ed\n.text:00000000004162f0\n.text:00000000004162f2\n.text:00000000004162f4\n.text:00000000004162f8\n.text:00000000004162fb\n.text:00000000004162ff\n.text:0000000000416304\n.text:0000000000416309\n.text:000000000041630d\n.text:0000000000416311\n.text:0000000000416315\n.text:0000000000416318\n.text:000000000041631c\n.text:000000000041631d\n'
p2057
tp2058
sS'strcpy'
p2059
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p2060
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_0062d080)();\u000a  return pcVar1;\u000a}\u000a\u000a
p2061
S'JMP qword ptr [0x0062d080]\n'
p2062
S'ff 25 ba a8 22 00\n'
p2063
S'.plt:00000000004027c0\n'
p2064
tp2065
sS'pred_execdir'
p2066
(S'\n__stdcall pred_execdir(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p2067
V\u000a_Bool pred_execdir(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = impl_pred_exec(state.rel_pathname,stat_buf,pred_ptr);\u000a  return _Var1;\u000a}\u000a\u000a
p2068
S'MOV RDI,qword ptr [0x0062f010]\nJMP 0x00405180\n'
p2069
S'48 8b 3d c9 af 22 00\ne9 34 11 00 00\n'
p2070
S'.text:0000000000404040\n.text:0000000000404047\n'
p2071
tp2072
sS'rotl8'
p2073
(S'\n__stdcall rotl8()\n'
p2074
V\u000auint8_t rotl8(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint8_t)((byte)(in_EDI >> (8 - (byte)in_ESI & 0x1f)) |\u000a                  (byte)(in_EDI << ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p2075
S'MOV EAX,EDI\nMOV ECX,ESI\nSHL EAX,CL\nMOV ECX,0x8\nSUB ECX,ESI\nSHR EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p2076
S'89 f8\n89 f1\nd3 e0\nb9 08 00 00 00\n29 f1\nd3 ef\n09 c7\n89 f8\nc3\n'
p2077
S'.text:000000000041b900\n.text:000000000041b902\n.text:000000000041b904\n.text:000000000041b906\n.text:000000000041b90b\n.text:000000000041b90d\n.text:000000000041b90f\n.text:000000000041b911\n.text:000000000041b913\n'
p2078
tp2079
sS'_IO_putc'
p2080
(S'\n__stdcall _IO_putc(int __c, _IO_FILE * __fp)\n'
p2081
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint _IO_putc(int __c,_IO_FILE *__fp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR__IO_putc_0062d178)();\u000a  return iVar1;\u000a}\u000a\u000a
p2082
S'JMP qword ptr [0x0062d178]\n'
p2083
S'ff 25 c2 a7 22 00\n'
p2084
S'.plt:00000000004029b0\n'
p2085
tp2086
sS'parse_exec'
p2087
(S'\n__stdcall parse_exec(parser_table * entry, char * * argv, int * arg_ptr)\n'
p2088
V\u000a_Bool parse_exec(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = insert_exec_ok("-exec",entry,argv,arg_ptr);\u000a  return _Var1;\u000a}\u000a\u000a
p2089
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nMOV EDI,0x4211b4\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x0040ca60\n'
p2090
S'48 89 d0\n48 89 f1\n48 89 fa\nbf b4 11 42 00\n48 89 d6\n48 89 ca\n48 89 c1\ne9 64 16 00 00\n'
p2091
S'.text:000000000040b3e0\n.text:000000000040b3e3\n.text:000000000040b3e6\n.text:000000000040b3e9\n.text:000000000040b3ee\n.text:000000000040b3f1\n.text:000000000040b3f4\n.text:000000000040b3f7\n'
p2092
tp2093
sS'stream_is_tty'
p2094
(S'\n__stdcall stream_is_tty(FILE * fp)\n'
p2095
V\u000a_Bool stream_is_tty(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  bool bVar1;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (__fd == -1) {\u000a    bVar1 = false;\u000a  }\u000a  else {\u000a    __fd = isatty(__fd);\u000a    bVar1 = __fd != 0;\u000a  }\u000a  return (_Bool)bVar1;\u000a}\u000a\u000a
p2096
S'PUSH RAX\nCALL 0x00402c10\nCMP EAX,-0x1\nJZ 0x0040d1a9\nMOV EDI,EAX\nCALL 0x00402820\nTEST EAX,EAX\nSETNZ AL\nJMP 0x0040d1ab\nXOR EAX,EAX\nPOP RCX\nRET\n'
p2097
S'50\ne8 7a 5a ff ff\n83 f8 ff\n74 0e\n89 c7\ne8 7e 56 ff ff\n85 c0\n0f 95 c0\neb 02\n31 c0\n59\nc3\n'
p2098
S'.text:000000000040d190\n.text:000000000040d191\n.text:000000000040d196\n.text:000000000040d199\n.text:000000000040d19b\n.text:000000000040d19d\n.text:000000000040d1a2\n.text:000000000040d1a4\n.text:000000000040d1a7\n.text:000000000040d1a9\n.text:000000000040d1ab\n.text:000000000040d1ac\n'
p2099
tp2100
sS'get_regex_type'
p2101
(S'\n__stdcall get_regex_type(char * s)\n'
p2102
V\u000aint get_regex_type(char *s)\u000a\u000a{\u000a  int iVar1;\u000a  char *__s1;\u000a  size_t sVar2;\u000a  undefined2 *puVar3;\u000a  undefined8 uVar4;\u000a  undefined2 *__dest;\u000a  ulong uVar5;\u000a  long lVar6;\u000a  tagRegexTypeMap *ptVar7;\u000a  \u000a  ptVar7 = regex_map;\u000a  uVar5 = 0;\u000a  lVar6 = 0;\u000a  do {\u000a    __s1 = ptVar7->name;\u000a    iVar1 = strcmp(__s1,s);\u000a    if (iVar1 == 0) {\u000a      return ptVar7->option_val;\u000a    }\u000a    __s1 = quote(__s1);\u000a    sVar2 = strlen(__s1);\u000a    lVar6 = lVar6 + 2 + sVar2;\u000a    uVar5 = uVar5 + 1;\u000a    ptVar7 = ptVar7 + 1;\u000a  } while (uVar5 < 0xd);\u000a  puVar3 = (undefined2 *)xmalloc(lVar6 + 1);\u000a  lVar6 = 0;\u000a  __dest = puVar3;\u000a  do {\u000a    if (lVar6 != 0) {\u000a      *(undefined *)(__dest + 1) = 0;\u000a      *__dest = 0x202c;\u000a      __dest = __dest + 1;\u000a    }\u000a    __s1 = quote(*(char **)((long)&regex_map[0].name + lVar6));\u000a    sVar2 = strlen(__s1);\u000a    memcpy(__dest,__s1,sVar2 + 1);\u000a    __dest = (undefined2 *)((long)__dest + (long)(int)sVar2);\u000a    lVar6 = lVar6 + 0x10;\u000a  } while (lVar6 != 0xd0);\u000a  uVar4 = dcgettext(0,"Unknown regular expression type %s; valid types are %s.",5);\u000a  __s1 = quote(s);\u000a  error(1,0,uVar4,__s1,puVar3);\u000a  return -1;\u000a}\u000a\u000a
p2103
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDI\nMOV R12D,0x62dcd0\nXOR EBP,EBP\nXOR R14D,R14D\nNOP dword ptr [RAX]\nMOV RBX,qword ptr [R12]\nMOV RDI,RBX\nMOV RSI,R15\nCALL 0x00402b40\nTEST EAX,EAX\nJZ 0x0040f968\nMOV RDI,RBX\nCALL 0x00416590\nMOV RDI,RAX\nCALL 0x00402930\nLEA R14,[R14 + RAX*0x1 + 0x2]\nINC RBP\nADD R12,0x10\nCMP RBP,0xd\nJC 0x0040f890\nINC R14\nMOV RDI,R14\nCALL 0x00417220\nMOV R14,RAX\nXOR EBP,EBP\nMOV RBX,R14\nNOP dword ptr [RAX]\nTEST RBP,RBP\nJZ 0x0040f8f2\nMOV byte ptr [RBX + 0x2],0x0\nMOV word ptr [RBX],0x202c\nADD RBX,0x2\nMOV RDI,qword ptr [0x62dcd0 + RBP]\nCALL 0x00416590\nMOV R12,RAX\nMOV RDI,R12\nCALL 0x00402930\nMOV R13,RAX\nLEA RDX,[R13 + 0x1]\nMOV RDI,RBX\nMOV RSI,R12\nCALL 0x00402bd0\nMOVSXD RAX,R13D\nADD RBX,RAX\nADD RBP,0x10\nCMP RBP,0xd0\nJNZ 0x0040f8e0\nXOR EDI,EDI\nMOV ESI,0x422655\nMOV EDX,0x5\nCALL 0x00402910\nMOV RBX,RAX\nMOV RDI,R15\nCALL 0x00416590\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nMOV R8,R14\nCALL 0x00402d90\nMOV EAX,0xffffffff\nJMP 0x0040f96d\nMOV EAX,dword ptr [R12 + 0xc]\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2104
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ff\n41 bc d0 dc 62 00\n31 ed\n45 31 f6\n0f 1f 80 00 00 00 00\n49 8b 1c 24\n48 89 df\n4c 89 fe\ne8 a1 32 ff ff\n85 c0\n0f 84 c1 00 00 00\n48 89 df\ne8 e1 6c 00 00\n48 89 c7\ne8 79 30 ff ff\n4d 8d 74 06 02\n48 ff c5\n49 83 c4 10\n48 83 fd 0d\n72 c7\n49 ff c6\n4c 89 f7\ne8 4c 79 00 00\n49 89 c6\n31 ed\n4c 89 f3\n0f 1f 40 00\n48 85 ed\n74 0d\nc6 43 02 00\n66 c7 03 2c 20\n48 83 c3 02\n48 8b bd d0 dc 62 00\ne8 92 6c 00 00\n49 89 c4\n4c 89 e7\ne8 27 30 ff ff\n49 89 c5\n49 8d 55 01\n48 89 df\n4c 89 e6\ne8 b5 32 ff ff\n49 63 c5\n48 01 c3\n48 83 c5 10\n48 81 fd d0 00 00 00\n75 b2\n31 ff\nbe 55 26 42 00\nba 05 00 00 00\ne8 d1 2f ff ff\n48 89 c3\n4c 89 ff\ne8 46 6c 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 da\n4d 89 f0\ne8 2f 34 ff ff\nb8 ff ff ff ff\neb 05\n41 8b 44 24 0c\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2105
S'.text:000000000040f870\n.text:000000000040f871\n.text:000000000040f873\n.text:000000000040f875\n.text:000000000040f877\n.text:000000000040f879\n.text:000000000040f87a\n.text:000000000040f87b\n.text:000000000040f87e\n.text:000000000040f884\n.text:000000000040f886\n.text:000000000040f889\n.text:000000000040f890\n.text:000000000040f894\n.text:000000000040f897\n.text:000000000040f89a\n.text:000000000040f89f\n.text:000000000040f8a1\n.text:000000000040f8a7\n.text:000000000040f8aa\n.text:000000000040f8af\n.text:000000000040f8b2\n.text:000000000040f8b7\n.text:000000000040f8bc\n.text:000000000040f8bf\n.text:000000000040f8c3\n.text:000000000040f8c7\n.text:000000000040f8c9\n.text:000000000040f8cc\n.text:000000000040f8cf\n.text:000000000040f8d4\n.text:000000000040f8d7\n.text:000000000040f8d9\n.text:000000000040f8dc\n.text:000000000040f8e0\n.text:000000000040f8e3\n.text:000000000040f8e5\n.text:000000000040f8e9\n.text:000000000040f8ee\n.text:000000000040f8f2\n.text:000000000040f8f9\n.text:000000000040f8fe\n.text:000000000040f901\n.text:000000000040f904\n.text:000000000040f909\n.text:000000000040f90c\n.text:000000000040f910\n.text:000000000040f913\n.text:000000000040f916\n.text:000000000040f91b\n.text:000000000040f91e\n.text:000000000040f921\n.text:000000000040f925\n.text:000000000040f92c\n.text:000000000040f92e\n.text:000000000040f930\n.text:000000000040f935\n.text:000000000040f93a\n.text:000000000040f93f\n.text:000000000040f942\n.text:000000000040f945\n.text:000000000040f94a\n.text:000000000040f94d\n.text:000000000040f952\n.text:000000000040f954\n.text:000000000040f956\n.text:000000000040f959\n.text:000000000040f95c\n.text:000000000040f961\n.text:000000000040f966\n.text:000000000040f968\n.text:000000000040f96d\n.text:000000000040f971\n.text:000000000040f972\n.text:000000000040f974\n.text:000000000040f976\n.text:000000000040f978\n.text:000000000040f97a\n.text:000000000040f97b\n'
p2106
tp2107
sS'hard_locale'
p2108
(S'\n__stdcall hard_locale()\n'
p2109
V\u000a_Bool hard_locale(void)\u000a\u000a{\u000a  int iVar1;\u000a  char *__s1;\u000a  undefined uVar2;\u000a  int __category;\u000a  \u000a  __s1 = setlocale(__category,(char *)0x0);\u000a  uVar2 = 1;\u000a  if (__s1 != (char *)0x0) {\u000a    if (((*__s1 != 'C') || (__s1[1] != 0)) && (iVar1 = strcmp(__s1,"POSIX"), iVar1 != 0)) {\u000a      return true;\u000a    }\u000a    uVar2 = 0;\u000a  }\u000a  return (_Bool)uVar2;\u000a}\u000a\u000a
p2110
S'PUSH RBX\nXOR ESI,ESI\nCALL 0x00402d50\nMOV BL,0x1\nTEST RAX,RAX\nJZ 0x0041bc0d\nCMP byte ptr [RAX],0x43\nJNZ 0x0041bbfa\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x0041bc0b\nMOV ESI,0x425791\nMOV RDI,RAX\nCALL 0x00402b40\nTEST EAX,EAX\nJNZ 0x0041bc0d\nXOR EBX,EBX\nMOV EAX,EBX\nPOP RBX\nRET\n'
p2111
S'53\n31 f6\ne8 68 71 fe ff\nb3 01\n48 85 c0\n74 1e\n80 38 43\n75 06\n80 78 01 00\n74 11\nbe 91 57 42 00\n48 89 c7\ne8 39 6f fe ff\n85 c0\n75 02\n31 db\n89 d8\n5b\nc3\n'
p2112
S'.text:000000000041bbe0\n.text:000000000041bbe1\n.text:000000000041bbe3\n.text:000000000041bbe8\n.text:000000000041bbea\n.text:000000000041bbed\n.text:000000000041bbef\n.text:000000000041bbf2\n.text:000000000041bbf4\n.text:000000000041bbf8\n.text:000000000041bbfa\n.text:000000000041bbff\n.text:000000000041bc02\n.text:000000000041bc07\n.text:000000000041bc09\n.text:000000000041bc0b\n.text:000000000041bc0d\n.text:000000000041bc0f\n.text:000000000041bc10\n'
p2113
tp2114
sS'getgrgid'
p2115
(S'\n__stdcall getgrgid(__gid_t __gid)\n'
p2116
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000agroup * getgrgid(__gid_t __gid)\u000a\u000a{\u000a  group *pgVar1;\u000a  \u000a  pgVar1 = (group *)(*(code *)PTR_getgrgid_0062d180)();\u000a  return pgVar1;\u000a}\u000a\u000a
p2117
S'JMP qword ptr [0x0062d180]\n'
p2118
S'ff 25 ba a7 22 00\n'
p2119
S'.plt:00000000004029c0\n'
p2120
tp2121
sS'is_zero_or_power_of_two'
p2122
(S'\n__stdcall is_zero_or_power_of_two(uintmax_t i)\n'
p2123
V\u000a_Bool is_zero_or_power_of_two(uintmax_t i)\u000a\u000a{\u000a  return (_Bool)((i - 1 & i) == 0);\u000a}\u000a\u000a
p2124
S'LEA RAX,[RDI + -0x1]\nTEST RAX,RDI\nSETZ AL\nRET\n'
p2125
S'48 8d 47 ff\n48 85 f8\n0f 94 c0\nc3\n'
p2126
S'.text:000000000041bb90\n.text:000000000041bb94\n.text:000000000041bb97\n.text:000000000041bb9a\n'
p2127
tp2128
sS'parse_xdev'
p2129
(S'\n__stdcall parse_xdev(parser_table * entry, char * * argv, int * arg_ptr)\n'
p2130
V\u000a_Bool parse_xdev(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  options.stay_on_filesystem = true;\u000a  parse_noop();\u000a  return true;\u000a}\u000a\u000a
p2131
S'PUSH RAX\nMOV byte ptr [0x0062f04d],0x1\nMOV RDI,RSI\nMOV RSI,RDX\nCALL 0x0040ca00\nMOV AL,0x1\nPOP RCX\nRET\n'
p2132
S'50\nc6 05 45 35 22 00 01\n48 89 f7\n48 89 d6\ne8 ed 0e 00 00\nb0 01\n59\nc3\n'
p2133
S'.text:000000000040bb00\n.text:000000000040bb01\n.text:000000000040bb08\n.text:000000000040bb0b\n.text:000000000040bb0e\n.text:000000000040bb13\n.text:000000000040bb15\n.text:000000000040bb16\n'
p2134
tp2135
sS'explain_how_to_report_bugs'
p2136
(S'\n__stdcall explain_how_to_report_bugs(FILE * f, char * program_name)\n'
p2137
V\u000aint explain_how_to_report_bugs(FILE *f,char *program_name)\u000a\u000a{\u000a  int iVar1;\u000a  char *__format;\u000a  \u000a  __format = (char *)dcgettext(0,\u000a                               "Please see also the documentation at %s.\u005cnYou can report (and track progress on fixing) bugs in the \u005c"%s\u005c"\u005cnprogram via the %s bug-reporting page at\u005cn%s or, if\u005cnyou have no web access, by sending email to <%s>.\u005cn"\u000a                               ,5);\u000a  iVar1 = fprintf((FILE *)f,__format,"http://www.gnu.org/software/findutils/",program_name,\u000a                  "GNU findutils","https://savannah.gnu.org/bugs/?group=findutils",\u000a                  "bug-findutils@gnu.org");\u000a  return iVar1;\u000a}\u000a\u000a
p2138
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV ESI,0x4226c0\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV qword ptr [RSP],0x4227e4\nMOV EDX,0x42278e\nMOV R8D,0x422119\nMOV R9D,0x4227b5\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RSI,RCX\nMOV RCX,R14\nCALL 0x00402ba0\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p2139
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n31 ff\nbe c0 26 42 00\nba 05 00 00 00\ne8 15 2d ff ff\n48 89 c1\n48 c7 04 24 e4 27 42 00\nba 8e 27 42 00\n41 b8 19 21 42 00\n41 b9 b5 27 42 00\n31 c0\n48 89 df\n48 89 ce\n4c 89 f1\ne8 79 2f ff ff\n48 83 c4 08\n5b\n41 5e\nc3\n'
p2140
S'.text:000000000040fbe0\n.text:000000000040fbe2\n.text:000000000040fbe3\n.text:000000000040fbe4\n.text:000000000040fbe7\n.text:000000000040fbea\n.text:000000000040fbec\n.text:000000000040fbf1\n.text:000000000040fbf6\n.text:000000000040fbfb\n.text:000000000040fbfe\n.text:000000000040fc06\n.text:000000000040fc0b\n.text:000000000040fc11\n.text:000000000040fc17\n.text:000000000040fc19\n.text:000000000040fc1c\n.text:000000000040fc1f\n.text:000000000040fc22\n.text:000000000040fc27\n.text:000000000040fc2b\n.text:000000000040fc2c\n.text:000000000040fc2e\n'
p2141
tp2142
sS'setup_dir'
p2143
(S'\n__stdcall setup_dir(FTS * fts)\n'
p2144
V\u000a_Bool setup_dir(FTS *fts)\u000a\u000a{\u000a  Hash_table *pHVar1;\u000a  cycle_check_state *state;\u000a  \u000a  if ((*(ushort *)&fts->fts_options & 0x102) == 0) {\u000a    state = (cycle_check_state *)malloc(0x20);\u000a    *(cycle_check_state **)&fts->fts_cycle = state;\u000a    if (state == (cycle_check_state *)0x0) {\u000a      return false;\u000a    }\u000a    cycle_check_init(state);\u000a  }\u000a  else {\u000a    pHVar1 = hash_initialize(0x1f,(Hash_tuning *)0x0,AD_hash,AD_compare,free);\u000a    *(Hash_table **)&fts->fts_cycle = pHVar1;\u000a    if (pHVar1 == (Hash_table *)0x0) {\u000a      return false;\u000a    }\u000a  }\u000a  return true;\u000a}\u000a\u000a
p2145
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOVZX EAX,word ptr [RBX + 0x48]\nTEST AX,0x102\nJZ 0x004187cb\nXOR R14D,R14D\nMOV EDI,0x1f\nXOR ESI,ESI\nMOV EDX,0x419d40\nMOV ECX,0x419d50\nMOV R8D,0x402710\nCALL 0x004107f0\nMOV qword ptr [RBX + 0x58],RAX\nTEST RAX,RAX\nJNZ 0x004187e6\nJMP 0x004187e9\nMOV EDI,0x20\nCALL 0x00402c60\nMOV qword ptr [RBX + 0x58],RAX\nTEST RAX,RAX\nJZ 0x004187f4\nMOV RDI,RAX\nCALL 0x0041bb00\nMOV R14B,0x1\nMOV EAX,R14D\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nXOR R14D,R14D\nJMP 0x004187e9\n'
p2146
S'41 56\n53\n50\n48 89 fb\n0f b7 43 48\n66 a9 02 01\n74 2a\n45 31 f6\nbf 1f 00 00 00\n31 f6\nba 40 9d 41 00\nb9 50 9d 41 00\n41 b8 10 27 40 00\ne8 30 80 ff ff\n48 89 43 58\n48 85 c0\n75 1d\neb 1e\nbf 20 00 00 00\ne8 8b a4 fe ff\n48 89 43 58\n48 85 c0\n74 16\n48 89 c7\ne8 1a 33 00 00\n41 b6 01\n44 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n45 31 f6\neb f0\n'
p2147
S'.text:0000000000418790\n.text:0000000000418792\n.text:0000000000418793\n.text:0000000000418794\n.text:0000000000418797\n.text:000000000041879b\n.text:000000000041879f\n.text:00000000004187a1\n.text:00000000004187a4\n.text:00000000004187a9\n.text:00000000004187ab\n.text:00000000004187b0\n.text:00000000004187b5\n.text:00000000004187bb\n.text:00000000004187c0\n.text:00000000004187c4\n.text:00000000004187c7\n.text:00000000004187c9\n.text:00000000004187cb\n.text:00000000004187d0\n.text:00000000004187d5\n.text:00000000004187d9\n.text:00000000004187dc\n.text:00000000004187de\n.text:00000000004187e1\n.text:00000000004187e6\n.text:00000000004187e9\n.text:00000000004187ec\n.text:00000000004187f0\n.text:00000000004187f1\n.text:00000000004187f3\n.text:00000000004187f4\n.text:00000000004187f7\n'
p2148
tp2149
sS'locale_charset'
p2150
(S'\n__stdcall locale_charset()\n'
p2151
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = "";\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_0041bd4d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_0041bd4d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p2152
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00402ca0\nTEST RAX,RAX\nMOV R14D,0x41e69a\nCMOVNZ R14,RAX\nCALL 0x0041bd60\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x0041bd25\nJMP 0x0041bd4d\nMOV RDI,RBX\nCALL 0x00402930\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00402930\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x0041bd4d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00402b40\nTEST EAX,EAX\nJZ 0x0041bd40\nCMP BPL,0x2a\nJNZ 0x0041bd00\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x0041bd00\nMOV RDI,RBX\nCALL 0x00402930\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x4258c0\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p2153
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 c2 6f fe ff\n48 85 c0\n41 be 9a e6 41 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 28 6c fe ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 1a 6c fe ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 10 6e fe ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 e8 6b fe ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 c0 58 42 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p2154
S'.text:000000000041bcd0\n.text:000000000041bcd1\n.text:000000000041bcd3\n.text:000000000041bcd4\n.text:000000000041bcd9\n.text:000000000041bcde\n.text:000000000041bce1\n.text:000000000041bce7\n.text:000000000041bceb\n.text:000000000041bcf0\n.text:000000000041bcf3\n.text:000000000041bcf6\n.text:000000000041bcf9\n.text:000000000041bcfb\n.text:000000000041bd00\n.text:000000000041bd03\n.text:000000000041bd08\n.text:000000000041bd0c\n.text:000000000041bd11\n.text:000000000041bd16\n.text:000000000041bd1b\n.text:000000000041bd20\n.text:000000000041bd23\n.text:000000000041bd25\n.text:000000000041bd28\n.text:000000000041bd2b\n.text:000000000041bd30\n.text:000000000041bd32\n.text:000000000041bd34\n.text:000000000041bd38\n.text:000000000041bd3a\n.text:000000000041bd3e\n.text:000000000041bd40\n.text:000000000041bd43\n.text:000000000041bd48\n.text:000000000041bd4d\n.text:000000000041bd51\n.text:000000000041bd56\n.text:000000000041bd5a\n.text:000000000041bd5b\n.text:000000000041bd5d\n.text:000000000041bd5e\n'
p2155
tp2156
sS'set_program_name'
p2157
(S'\n__stdcall set_program_name(char * argv0)\n'
p2158
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p2159
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00415121\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00402a00\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x0041510b\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x424510\nMOV EDX,0x7\nCALL 0x00402790\nTEST EAX,EAX\nJNZ 0x0041510b\nMOV ESI,0x424518\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00402790\nTEST EAX,EAX\nJNZ 0x00415108\nADD R14,0x3\nMOV qword ptr [0x0062de20],R14\nMOV RBX,R14\nMOV qword ptr [0x0062e680],RBX\nMOV qword ptr [0x0062de40],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x0062de60]\nMOV EDI,0x4244d8\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00402ee0\nCALL 0x00402750\n'
p2160
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 47 d9 fe ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 10 45 42 00\nba 07 00 00 00\ne8 ad d6 fe ff\n85 c0\n75 24\nbe 18 45 42 00\nba 03 00 00 00\n4c 89 f7\ne8 97 d6 fe ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 18 8d 21 00\n4c 89 f3\n48 89 1d 6e 95 21 00\n48 89 1d 27 8d 21 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 38 8d 21 00\nbf d8 44 42 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 a4 dd fe ff\ne8 0f d6 fe ff\n'
p2161
S'.text:00000000004150a0\n.text:00000000004150a2\n.text:00000000004150a3\n.text:00000000004150a4\n.text:00000000004150a7\n.text:00000000004150aa\n.text:00000000004150ac\n.text:00000000004150b1\n.text:00000000004150b4\n.text:00000000004150b9\n.text:00000000004150bc\n.text:00000000004150c0\n.text:00000000004150c4\n.text:00000000004150c7\n.text:00000000004150ca\n.text:00000000004150ce\n.text:00000000004150d0\n.text:00000000004150d4\n.text:00000000004150d9\n.text:00000000004150de\n.text:00000000004150e3\n.text:00000000004150e5\n.text:00000000004150e7\n.text:00000000004150ec\n.text:00000000004150f1\n.text:00000000004150f4\n.text:00000000004150f9\n.text:00000000004150fb\n.text:00000000004150fd\n.text:0000000000415101\n.text:0000000000415108\n.text:000000000041510b\n.text:0000000000415112\n.text:0000000000415119\n.text:000000000041511d\n.text:000000000041511e\n.text:0000000000415120\n.text:0000000000415121\n.text:0000000000415128\n.text:000000000041512d\n.text:0000000000415132\n.text:0000000000415137\n.text:000000000041513c\n'
p2162
tp2163
sS'cdb_fchdir'
p2164
(S'\n__stdcall cdb_fchdir(cd_buf * cdb)\n'
p2165
V\u000aint cdb_fchdir(cd_buf *cdb)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = fchdir((int)*cdb);\u000a  return iVar1;\u000a}\u000a\u000a
p2166
S'MOV EDI,dword ptr [RDI]\nJMP 0x00402d10\n'
p2167
S'8b 3f\ne9 69 af fe ff\n'
p2168
S'.text:0000000000417da0\n.text:0000000000417da2\n'
p2169
tp2170
sS'rpl_fflush'
p2171
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p2172
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_0062d2d8)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p2173
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00417fbd\nMOV RDI,RBX\nCALL 0x00402d00\nTEST EAX,EAX\nJZ 0x00417fbd\nMOV RDI,RBX\nCALL 0x00417fd0\nMOV RDI,RBX\nPOP RBX\nJMP 0x00402c70\n'
p2174
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 4f ad fe ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 aa ac fe ff\n'
p2175
S'.text:0000000000417fa0\n.text:0000000000417fa1\n.text:0000000000417fa4\n.text:0000000000417fa7\n.text:0000000000417fa9\n.text:0000000000417fac\n.text:0000000000417fb1\n.text:0000000000417fb3\n.text:0000000000417fb5\n.text:0000000000417fb8\n.text:0000000000417fbd\n.text:0000000000417fc0\n.text:0000000000417fc1\n'
p2176
tp2177
sS'pred_readable'
p2178
(S'\n__stdcall pred_readable(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p2179
V\u000a_Bool pred_readable(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = faccessat(state.cwd_dir_fd,state.rel_pathname,4,0);\u000a  return (_Bool)(iVar1 == 0);\u000a}\u000a\u000a
p2180
S'PUSH RAX\nMOV EDI,dword ptr [0x0062f018]\nMOV RSI,qword ptr [0x0062f010]\nMOV EDX,0x4\nXOR ECX,ECX\nCALL 0x00402870\nTEST EAX,EAX\nSETZ AL\nPOP RCX\nRET\n'
p2181
S'50\n8b 3d a1 a9 22 00\n48 8b 35 92 a9 22 00\nba 04 00 00 00\n31 c9\ne8 e6 e1 ff ff\n85 c0\n0f 94 c0\n59\nc3\n'
p2182
S'.text:0000000000404670\n.text:0000000000404671\n.text:0000000000404677\n.text:000000000040467e\n.text:0000000000404683\n.text:0000000000404685\n.text:000000000040468a\n.text:000000000040468c\n.text:000000000040468f\n.text:0000000000404690\n'
p2183
tp2184
sS'visit_open_fds'
p2185
(S'\n__stdcall visit_open_fds()\n'
p2186
V\u000aint visit_open_fds(void)\u000a\u000a{\u000a  uint in_EAX;\u000a  long lVar1;\u000a  code *in_RSI;\u000a  int in_EDI;\u000a  int iVar2;\u000a  int iVar3;\u000a  pollfd pf [64];\u000a  pollfd local_238 [65];\u000a  \u000a  if (0 < in_EDI) {\u000a    iVar3 = 0;\u000a    do {\u000a      iVar2 = in_EDI - iVar3;\u000a      if (0x40 < iVar2) {\u000a        iVar2 = 0x40;\u000a      }\u000a      if (iVar3 < in_EDI) {\u000a        lVar1 = 0;\u000a        do {\u000a          local_238[lVar1].events = 5;\u000a          local_238[lVar1].revents = 0;\u000a          local_238[lVar1].fd = iVar3 + (int)lVar1;\u000a          lVar1 = lVar1 + 1;\u000a        } while (lVar1 < (long)iVar2);\u000a      }\u000a      in_EAX = poll(local_238,(long)iVar2,0);\u000a      if (in_EAX == 0xffffffff) {\u000a        return -1;\u000a      }\u000a      if (0 < in_EDI - iVar3) {\u000a        lVar1 = 0;\u000a        do {\u000a          in_EAX = (uint)(ushort)local_238[lVar1].revents;\u000a          if ((local_238[lVar1].revents != 0x20) &&\u000a             (in_EAX = (*in_RSI)((ulong)(uint)local_238[lVar1].fd), in_EAX != 0)) {\u000a            return in_EAX;\u000a          }\u000a          lVar1 = lVar1 + 1;\u000a        } while (lVar1 < (long)iVar2);\u000a      }\u000a      iVar3 = iVar3 + iVar2;\u000a    } while (iVar3 < in_EDI);\u000a  }\u000a  return (int)in_EAX;\u000a}\u000a\u000a
p2187
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x218\nMOV qword ptr [RSP + 0x8],RDX\nMOV R13,RSI\nMOV dword ptr [RSP + 0x4],EDI\nTEST EDI,EDI\nJLE 0x0040e860\nXOR R14D,R14D\nMOV R15D,dword ptr [RSP + 0x4]\nMOV R12D,R15D\nSUB R12D,R14D\nCMP R12D,0x41\nMOV ECX,0x40\nCMOVGE R12D,ECX\nSUB R15D,R14D\nJLE 0x0040e80d\nMOV EAX,R14D\nMOVSXD RCX,R12D\nXOR EDX,EDX\nNOP dword ptr [RAX]\nMOV word ptr [RSP + RDX*0x8 + 0x14],0x5\nMOV word ptr [RSP + RDX*0x8 + 0x16],0x0\nLEA ESI,[RAX + RDX*0x1]\nMOV dword ptr [RSP + RDX*0x8 + 0x10],ESI\nINC RDX\nCMP RDX,RCX\nJL 0x0040e7f0\nMOVSXD RBP,R12D\nXOR EDX,EDX\nLEA RDI,[RSP + 0x10]\nMOV RSI,RBP\nCALL 0x00402d60\nCMP EAX,-0x1\nJZ 0x0040e860\nTEST R15D,R15D\nJLE 0x0040e852\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOVZX EAX,word ptr [RSP + RBX*0x8 + 0x16]\nCMP EAX,0x20\nJZ 0x0040e84a\nMOV EDI,dword ptr [RSP + RBX*0x8 + 0x10]\nMOV RSI,qword ptr [RSP + 0x8]\nCALL R13\nTEST EAX,EAX\nJNZ 0x0040e860\nINC RBX\nCMP RBX,RBP\nJL 0x0040e830\nADD R14D,R12D\nCMP R14D,dword ptr [RSP + 0x4]\nJL 0x0040e7c8\nADD RSP,0x218\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2188
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 18 02 00 00\n48 89 54 24 08\n49 89 f5\n89 7c 24 04\n85 ff\n0f 8e 9b 00 00 00\n45 31 f6\n44 8b 7c 24 04\n45 89 fc\n45 29 f4\n41 83 fc 41\nb9 40 00 00 00\n44 0f 4d e1\n45 29 f7\n7e 28\n44 89 f0\n49 63 cc\n31 d2\n0f 1f 00\n66 c7 44 d4 14 05 00\n66 c7 44 d4 16 00 00\n8d 34 10\n89 74 d4 10\n48 ff c2\n48 39 ca\n7c e3\n49 63 ec\n31 d2\n48 8d 7c 24 10\n48 89 ee\ne8 41 45 ff ff\n83 f8 ff\n74 3c\n45 85 ff\n7e 29\n31 db\n0f 1f 44 00 00\n0f b7 44 dc 16\n83 f8 20\n74 10\n8b 7c dc 10\n48 8b 74 24 08\n41 ff d5\n85 c0\n75 16\n48 ff c3\n48 39 eb\n7c de\n45 01 e6\n44 3b 74 24 04\n0f 8c 68 ff ff ff\n48 81 c4 18 02 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2189
S'.text:000000000040e7a0\n.text:000000000040e7a1\n.text:000000000040e7a3\n.text:000000000040e7a5\n.text:000000000040e7a7\n.text:000000000040e7a9\n.text:000000000040e7aa\n.text:000000000040e7b1\n.text:000000000040e7b6\n.text:000000000040e7b9\n.text:000000000040e7bd\n.text:000000000040e7bf\n.text:000000000040e7c5\n.text:000000000040e7c8\n.text:000000000040e7cd\n.text:000000000040e7d0\n.text:000000000040e7d3\n.text:000000000040e7d7\n.text:000000000040e7dc\n.text:000000000040e7e0\n.text:000000000040e7e3\n.text:000000000040e7e5\n.text:000000000040e7e8\n.text:000000000040e7eb\n.text:000000000040e7ed\n.text:000000000040e7f0\n.text:000000000040e7f7\n.text:000000000040e7fe\n.text:000000000040e801\n.text:000000000040e805\n.text:000000000040e808\n.text:000000000040e80b\n.text:000000000040e80d\n.text:000000000040e810\n.text:000000000040e812\n.text:000000000040e817\n.text:000000000040e81a\n.text:000000000040e81f\n.text:000000000040e822\n.text:000000000040e824\n.text:000000000040e827\n.text:000000000040e829\n.text:000000000040e82b\n.text:000000000040e830\n.text:000000000040e835\n.text:000000000040e838\n.text:000000000040e83a\n.text:000000000040e83e\n.text:000000000040e843\n.text:000000000040e846\n.text:000000000040e848\n.text:000000000040e84a\n.text:000000000040e84d\n.text:000000000040e850\n.text:000000000040e852\n.text:000000000040e855\n.text:000000000040e85a\n.text:000000000040e860\n.text:000000000040e867\n.text:000000000040e868\n.text:000000000040e86a\n.text:000000000040e86c\n.text:000000000040e86e\n.text:000000000040e870\n.text:000000000040e871\n'
p2190
tp2191
sS'quotearg_n'
p2192
(S'\n__stdcall quotearg_n(char * arg)\n'
p2193
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p2194
S'MOV RDX,-0x1\nMOV ECX,0x62e690\nJMP 0x004160a0\n'
p2195
S'48 c7 c2 ff ff ff ff\nb9 90 e6 62 00\neb 02\n'
p2196
S'.text:0000000000416090\n.text:0000000000416097\n.text:000000000041609c\n'
p2197
tp2198
sS'open_output_file'
p2199
(S'\n__stdcall open_output_file(char * path, format_val * p)\n'
p2200
V\u000avoid open_output_file(char *path,format_val *p)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  quoting_options *pqVar3;\u000a  FILE *pFVar4;\u000a  uint *puVar5;\u000a  FILE **ppFVar6;\u000a  char *pcVar7;\u000a  \u000a  p->segment = (segment *)0x0;\u000a  pqVar3 = clone_quoting_options((quoting_options *)0x0);\u000a  p->quote_opts = pqVar3;\u000a  iVar2 = strcmp(path,"/dev/stderr");\u000a  if (iVar2 == 0) {\u000aLAB_0040d149:\u000a    pcVar7 = "standard error";\u000a    ppFVar6 = (FILE **)&stderr;\u000a  }\u000a  else {\u000a    iVar2 = strcmp(path,"/dev/stdout");\u000a    if (iVar2 != 0) {\u000a      pFVar4 = sharefile_fopen(state.shared_files,path);\u000a      p->stream = pFVar4;\u000a      p->filename = path;\u000a      if (pFVar4 != (FILE *)0x0) goto LAB_0040d176;\u000a      puVar5 = (uint *)__errno_location();\u000a      fatal_nontarget_file_error((char *)(ulong)*puVar5);\u000a      goto LAB_0040d149;\u000a    }\u000a    pcVar7 = "standard output";\u000a    ppFVar6 = (FILE **)&stdout;\u000a  }\u000a  p->stream = *ppFVar6;\u000a  pcVar7 = (char *)dcgettext(0,pcVar7,5);\u000a  p->filename = pcVar7;\u000aLAB_0040d176:\u000a  _Var1 = stream_is_tty(p->stream);\u000a  p->dest_is_tty = _Var1;\u000a  return;\u000a}\u000a\u000a
p2201
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nMOV qword ptr [RBX],0x0\nXOR EDI,EDI\nCALL 0x00415150\nMOV qword ptr [RBX + 0x20],RAX\nMOV ESI,0x42150a\nMOV RDI,R14\nCALL 0x00402b40\nTEST EAX,EAX\nJZ 0x0040d149\nMOV ESI,0x421525\nMOV RDI,R14\nCALL 0x00402b40\nTEST EAX,EAX\nJZ 0x0040d155\nMOV RDI,qword ptr [0x0062f030]\nMOV RSI,R14\nCALL 0x00408b60\nMOV qword ptr [RBX + 0x8],RAX\nMOV qword ptr [RBX + 0x10],R14\nTEST RAX,RAX\nJNZ 0x0040d176\nCALL 0x00402770\nMOV EDI,dword ptr [RAX]\nMOV RSI,R14\nCALL 0x004089c0\nMOV ESI,0x421516\nMOV EAX,0x62de60\nJMP 0x0040d15f\nMOV ESI,0x41e73a\nMOV EAX,0x62de28\nMOV RAX,qword ptr [RAX]\nMOV qword ptr [RBX + 0x8],RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00402910\nMOV qword ptr [RBX + 0x10],RAX\nMOV RDI,qword ptr [RBX + 0x8]\nCALL 0x0040d190\nMOV byte ptr [RBX + 0x18],AL\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p2202
S'41 56\n53\n50\n48 89 f3\n49 89 fe\n48 c7 03 00 00 00 00\n31 ff\ne8 58 80 00 00\n48 89 43 20\nbe 0a 15 42 00\n4c 89 f7\ne8 37 5a ff ff\n85 c0\n74 3c\nbe 25 15 42 00\n4c 89 f7\ne8 26 5a ff ff\n85 c0\n74 37\n48 8b 3d 0b 1f 22 00\n4c 89 f6\ne8 33 ba ff ff\n48 89 43 08\n4c 89 73 10\n48 85 c0\n75 3c\ne8 31 56 ff ff\n8b 38\n4c 89 f6\ne8 77 b8 ff ff\nbe 16 15 42 00\nb8 60 de 62 00\neb 0a\nbe 3a e7 41 00\nb8 28 de 62 00\n48 8b 00\n48 89 43 08\n31 ff\nba 05 00 00 00\ne8 9e 57 ff ff\n48 89 43 10\n48 8b 7b 08\ne8 11 00 00 00\n88 43 18\n48 83 c4 08\n5b\n41 5e\nc3\n'
p2203
S'.text:000000000040d0e0\n.text:000000000040d0e2\n.text:000000000040d0e3\n.text:000000000040d0e4\n.text:000000000040d0e7\n.text:000000000040d0ea\n.text:000000000040d0f1\n.text:000000000040d0f3\n.text:000000000040d0f8\n.text:000000000040d0fc\n.text:000000000040d101\n.text:000000000040d104\n.text:000000000040d109\n.text:000000000040d10b\n.text:000000000040d10d\n.text:000000000040d112\n.text:000000000040d115\n.text:000000000040d11a\n.text:000000000040d11c\n.text:000000000040d11e\n.text:000000000040d125\n.text:000000000040d128\n.text:000000000040d12d\n.text:000000000040d131\n.text:000000000040d135\n.text:000000000040d138\n.text:000000000040d13a\n.text:000000000040d13f\n.text:000000000040d141\n.text:000000000040d144\n.text:000000000040d149\n.text:000000000040d14e\n.text:000000000040d153\n.text:000000000040d155\n.text:000000000040d15a\n.text:000000000040d15f\n.text:000000000040d162\n.text:000000000040d166\n.text:000000000040d168\n.text:000000000040d16d\n.text:000000000040d172\n.text:000000000040d176\n.text:000000000040d17a\n.text:000000000040d17f\n.text:000000000040d182\n.text:000000000040d186\n.text:000000000040d187\n.text:000000000040d189\n'
p2204
tp2205
sS'setenv'
p2206
(S'\n__stdcall setenv(char * __name, char * __value, int __replace)\n'
p2207
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint setenv(char *__name,char *__value,int __replace)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_setenv_0062d0f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p2208
S'JMP qword ptr [0x0062d0f0]\n'
p2209
S'ff 25 4a a8 22 00\n'
p2210
S'.plt:00000000004028a0\n'
p2211
tp2212
sS'pred_nogroup'
p2213
(S'\n__stdcall pred_nogroup(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p2214
V\u000a_Bool pred_nogroup(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  group *pgVar1;\u000a  \u000a  pgVar1 = getgrgid(stat_buf->st_gid);\u000a  return (_Bool)(pgVar1 == (group *)0x0);\u000a}\u000a\u000a
p2215
S'PUSH RAX\nMOV EDI,dword ptr [RSI + 0x20]\nCALL 0x004029c0\nTEST RAX,RAX\nSETZ AL\nPOP RCX\nRET\n'
p2216
S'50\n8b 7e 20\ne8 97 e5 ff ff\n48 85 c0\n0f 94 c0\n59\nc3\n'
p2217
S'.text:0000000000404420\n.text:0000000000404421\n.text:0000000000404424\n.text:0000000000404429\n.text:000000000040442c\n.text:000000000040442f\n.text:0000000000404430\n'
p2218
tp2219
sS'collect_arg_nonconst'
p2220
(S'\n__stdcall collect_arg_nonconst(char * * argv, int * arg_ptr, char * * collected_arg)\n'
p2221
V\u000a_Bool collect_arg_nonconst(char **argv,int *arg_ptr,char **collected_arg)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (argv != (char **)0x0) {\u000a    iVar1 = *arg_ptr;\u000a    if (argv[(long)iVar1] != (char *)0x0) {\u000a      *collected_arg = argv[(long)iVar1];\u000a      *arg_ptr = iVar1 + 1;\u000a      return true;\u000a    }\u000a  }\u000a  *collected_arg = (char *)0x0;\u000a  return false;\u000a}\u000a\u000a
p2222
S'TEST RDI,RDI\nJZ 0x0040c96b\nMOVSXD RAX,dword ptr [RSI]\nMOV RCX,qword ptr [RDI + RAX*0x8]\nTEST RCX,RCX\nJZ 0x0040c96b\nMOV qword ptr [RDX],RCX\nINC EAX\nMOV dword ptr [RSI],EAX\nMOV AL,0x1\nRET\nMOV qword ptr [RDX],0x0\nXOR EAX,EAX\nRET\n'
p2223
S'48 85 ff\n74 16\n48 63 06\n48 8b 0c c7\n48 85 c9\n74 0a\n48 89 0a\nff c0\n89 06\nb0 01\nc3\n48 c7 02 00 00 00 00\n31 c0\nc3\n'
p2224
S'.text:000000000040c950\n.text:000000000040c953\n.text:000000000040c955\n.text:000000000040c958\n.text:000000000040c95c\n.text:000000000040c95f\n.text:000000000040c961\n.text:000000000040c964\n.text:000000000040c966\n.text:000000000040c968\n.text:000000000040c96a\n.text:000000000040c96b\n.text:000000000040c972\n.text:000000000040c974\n'
p2225
tp2226
sS'predlist_init'
p2227
(S'\n__stdcall predlist_init(predlist * p)\n'
p2228
V\u000avoid predlist_init(predlist *p)\u000a\u000a{\u000a  *(undefined4 *)&p->head = 0;\u000a  *(undefined4 *)((long)&p->head + 4) = 0;\u000a  *(undefined4 *)&p->tail = 0;\u000a  *(undefined4 *)((long)&p->tail + 4) = 0;\u000a  return;\u000a}\u000a\u000a
p2229
S'XORPS XMM0,XMM0\nMOVUPS xmmword ptr [RDI],XMM0\nRET\n'
p2230
S'0f 57 c0\n0f 11 07\nc3\n'
p2231
S'.text:0000000000407050\n.text:0000000000407053\n.text:0000000000407056\n'
p2232
tp2233
sS'parse_ilname'
p2234
(S'\n__stdcall parse_ilname(parser_table * entry, char * * argv, int * arg_ptr)\n'
p2235
V\u000a_Bool parse_ilname(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  char *in_RAX;\u000a  predicate *ppVar2;\u000a  float fVar3;\u000a  char *local_18;\u000a  \u000a  local_18 = in_RAX;\u000a  _Var1 = collect_arg(argv,arg_ptr,&local_18);\u000a  if (_Var1 != false) {\u000a    ppVar2 = insert_primary(entry,local_18);\u000a    *(char **)ppVar2->args = local_18;\u000a    fVar3 = estimate_pattern_match_rate(local_18);\u000a    ppVar2->est_success_rate = fVar3 * DAT_0041fb7c;\u000a  }\u000a  return (_Bool)(_Var1 != false);\u000a}\u000a\u000a
p2236
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV RAX,RSP\nMOV RDI,RSI\nMOV RSI,RDX\nMOV RDX,RAX\nCALL 0x0040c7f0\nTEST AL,AL\nJZ 0x0040b8ce\nMOV RBX,qword ptr [RSP]\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00407730\nMOV R14,RAX\nMOV qword ptr [R14 + 0x38],RBX\nXOR ESI,ESI\nMOV RDI,RBX\nCALL 0x0040d450\nMULSS XMM0,dword ptr [0x0041fb7c]\nMOVSS dword ptr [R14 + 0x24],XMM0\nMOV AL,0x1\nJMP 0x0040b8d0\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p2237
S'41 56\n53\n50\n49 89 fe\n48 89 e0\n48 89 f7\n48 89 d6\n48 89 c2\ne8 58 0f 00 00\n84 c0\n74 32\n48 8b 1c 24\n4c 89 f7\n48 89 de\ne8 85 be ff ff\n49 89 c6\n49 89 5e 38\n31 f6\n48 89 df\ne8 94 1b 00 00\nf3 0f 59 05 b8 42 01 00\nf3 41 0f 11 46 24\nb0 01\neb 02\n31 c0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p2238
S'.text:000000000040b880\n.text:000000000040b882\n.text:000000000040b883\n.text:000000000040b884\n.text:000000000040b887\n.text:000000000040b88a\n.text:000000000040b88d\n.text:000000000040b890\n.text:000000000040b893\n.text:000000000040b898\n.text:000000000040b89a\n.text:000000000040b89c\n.text:000000000040b8a0\n.text:000000000040b8a3\n.text:000000000040b8a6\n.text:000000000040b8ab\n.text:000000000040b8ae\n.text:000000000040b8b2\n.text:000000000040b8b4\n.text:000000000040b8b7\n.text:000000000040b8bc\n.text:000000000040b8c4\n.text:000000000040b8ca\n.text:000000000040b8cc\n.text:000000000040b8ce\n.text:000000000040b8d0\n.text:000000000040b8d4\n.text:000000000040b8d5\n.text:000000000040b8d7\n'
p2239
tp2240
sS'readdir'
p2241
(S'\n__stdcall readdir(DIR * __dirp)\n'
p2242
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000adirent * readdir(DIR *__dirp)\u000a\u000a{\u000a  dirent *pdVar1;\u000a  \u000a  pdVar1 = (dirent *)(*(code *)PTR_readdir_0062d2b8)();\u000a  return pdVar1;\u000a}\u000a\u000a
p2243
S'JMP qword ptr [0x0062d2b8]\n'
p2244
S'ff 25 82 a6 22 00\n'
p2245
S'.plt:0000000000402c30\n'
p2246
tp2247
sS'strtol'
p2248
(S'\n__stdcall strtol(char * __nptr, char * * __endptr, int __base)\n'
p2249
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000along strtol(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  lVar1 = (*(code *)PTR_strtol_0062d280)();\u000a  return lVar1;\u000a}\u000a\u000a
p2250
S'JMP qword ptr [0x0062d280]\n'
p2251
S'ff 25 ba a6 22 00\n'
p2252
S'.plt:0000000000402bc0\n'
p2253
tp2254
sS'security_compute_create'
p2255
(S'\n__stdcall security_compute_create(security_context_t scon, security_context_t tcon, security_context_t * newcon)\n'
p2256
V\u000aint security_compute_create\u000a              (security_context_t scon,security_context_t tcon,security_context_t *newcon)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p2257
S'PUSH RAX\nCALL 0x00402770\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p2258
S'50\ne8 8a bb fe ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p2259
S'.text:0000000000416be0\n.text:0000000000416be1\n.text:0000000000416be6\n.text:0000000000416bec\n.text:0000000000416bf1\n.text:0000000000416bf2\n'
p2260
tp2261
sS'ctime_format'
p2262
(S'\n__stdcall ctime_format()\n'
p2263
V\u000achar * ctime_format(void)\u000a\u000a{\u000a  int iVar1;\u000a  uint uVar2;\u000a  char resultbuf [1024];\u000a  int iVar3;\u000a  tm *ptVar4;\u000a  char *pcVar5;\u000a  undefined8 in_RSI;\u000a  undefined8 uVar6;\u000a  time_t local_28;\u000a  undefined8 local_20;\u000a  \u000a  uVar6 = 0x40a02a;\u000a  local_20 = in_RSI;\u000a  ptVar4 = localtime(&local_28);\u000a  if (ptVar4 == (tm *)0x0) {\u000a    pcVar5 = format_date();\u000a  }\u000a  else {\u000a    iVar3 = ptVar4->tm_wday;\u000a    if ((long)iVar3 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("ptm->tm_wday >= 0","print.c",0x2ef,"char *ctime_format(struct timespec)");\u000a    }\u000a    if (6 < iVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("ptm->tm_wday < 7","print.c",0x2f0,"char *ctime_format(struct timespec)");\u000a    }\u000a    iVar1 = ptVar4->tm_mon;\u000a    if ((long)iVar1 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("ptm->tm_mon >= 0","print.c",0x2f1,"char *ctime_format(struct timespec)");\u000a    }\u000a    if (0xb < iVar1) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("ptm->tm_mon < 12","print.c",0x2f2,"char *ctime_format(struct timespec)");\u000a    }\u000a    uVar2 = ptVar4->tm_hour;\u000a    if ((int)uVar2 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("ptm->tm_hour >= 0","print.c",0x2f3,"char *ctime_format(struct timespec)");\u000a    }\u000a    if (0x17 < (int)uVar2) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("ptm->tm_hour < 24","print.c",0x2f4,"char *ctime_format(struct timespec)");\u000a    }\u000a    if (0x3b < ptVar4->tm_min) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("ptm->tm_min < 60","print.c",0x2f5,"char *ctime_format(struct timespec)");\u000a    }\u000a    if (0x3d < ptVar4->tm_sec) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("ptm->tm_sec <= 61","print.c",0x2f6,"char *ctime_format(struct timespec)");\u000a    }\u000a    pcVar5 = &ram0x0062e200;\u000a    iVar3 = snprintf((char *)0x62e200,0x400,"%3s %3s %2d %02d:%02d:%02d.%09ld0 %04d",\u000a                     weekdays[(long)iVar3],months[(long)iVar1],(ulong)(uint)ptVar4->tm_mday,\u000a                     (ulong)uVar2,(ulong)(uint)ptVar4->tm_min,(ulong)(uint)ptVar4->tm_sec,local_20,\u000a                     (ulong)(ptVar4->tm_year + 0x76c),uVar6);\u000a    if (0x3ff < iVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("nout < TIME_BUF_LEN","print.c",0x304,"char *ctime_format(struct timespec)");\u000a    }\u000a  }\u000a  return pcVar5;\u000a}\u000a\u000a
p2264
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV qword ptr [RSP],RDI\nMOV qword ptr [RSP + 0x8],RSI\nMOV RDI,RSP\nCALL 0x00402740\nTEST RAX,RAX\nJZ 0x0040a0ff\nMOVSXD RCX,dword ptr [RAX + 0x18]\nTEST RCX,RCX\nJS 0x0040a122\nCMP ECX,0x7\nJGE 0x0040a13b\nMOVSXD RDX,dword ptr [RAX + 0x10]\nTEST RDX,RDX\nJS 0x0040a154\nCMP EDX,0xc\nJGE 0x0040a16d\nMOV R11D,dword ptr [RAX + 0x8]\nTEST R11D,R11D\nJS 0x0040a186\nCMP R11D,0x18\nJGE 0x0040a19f\nMOV R10D,dword ptr [RAX + 0x4]\nCMP R10D,0x3c\nJGE 0x0040a1b8\nMOV R15D,dword ptr [RAX]\nCMP R15D,0x3e\nJGE 0x0040a1d1\nMOV RCX,qword ptr [0x41f530 + RCX*0x8]\nMOV R8,qword ptr [0x41f570 + RDX*0x8]\nMOV R9D,dword ptr [RAX + 0xc]\nMOV EBX,0x76c\nADD EBX,dword ptr [RAX + 0x14]\nSUB RSP,0x8\nMOV R14D,0x62e200\nMOV EDI,0x62e200\nMOV ESI,0x400\nMOV EDX,0x41fac2\nMOV EAX,0x0\nPUSH RBX\nPUSH qword ptr [RSP + 0x18]\nPUSH R15\nPUSH R10\nPUSH R11\nCALL 0x004029e0\nADD RSP,0x30\nCMP EAX,0x400\nJL 0x0040a115\nMOV EDI,0x41fae9\nMOV ESI,0x41f663\nMOV EDX,0x304\nMOV ECX,0x41fa24\nCALL 0x00402a40\nMOV RDI,qword ptr [RSP]\nMOV RSI,qword ptr [RSP + 0x8]\nMOV EDX,0x40\nCALL 0x00409520\nMOV R14,RAX\nMOV RAX,R14\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOV EDI,0x41fa12\nMOV ESI,0x41f663\nMOV EDX,0x2ef\nMOV ECX,0x41fa24\nCALL 0x00402a40\nMOV EDI,0x41fa48\nMOV ESI,0x41f663\nMOV EDX,0x2f0\nMOV ECX,0x41fa24\nCALL 0x00402a40\nMOV EDI,0x41fa59\nMOV ESI,0x41f663\nMOV EDX,0x2f1\nMOV ECX,0x41fa24\nCALL 0x00402a40\nMOV EDI,0x41fa6a\nMOV ESI,0x41f663\nMOV EDX,0x2f2\nMOV ECX,0x41fa24\nCALL 0x00402a40\nMOV EDI,0x41fa7b\nMOV ESI,0x41f663\nMOV EDX,0x2f3\nMOV ECX,0x41fa24\nCALL 0x00402a40\nMOV EDI,0x41fa8d\nMOV ESI,0x41f663\nMOV EDX,0x2f4\nMOV ECX,0x41fa24\nCALL 0x00402a40\nMOV EDI,0x41fa9f\nMOV ESI,0x41f663\nMOV EDX,0x2f5\nMOV ECX,0x41fa24\nCALL 0x00402a40\nMOV EDI,0x41fab0\nMOV ESI,0x41f663\nMOV EDX,0x2f6\nMOV ECX,0x41fa24\nCALL 0x00402a40\n'
p2265
S'41 57\n41 56\n53\n48 83 ec 10\n48 89 3c 24\n48 89 74 24 08\n48 89 e7\ne8 16 87 ff ff\n48 85 c0\n0f 84 cc 00 00 00\n48 63 48 18\n48 85 c9\n0f 88 e2 00 00 00\n83 f9 07\n0f 8d f2 00 00 00\n48 63 50 10\n48 85 d2\n0f 88 fe 00 00 00\n83 fa 0c\n0f 8d 0e 01 00 00\n44 8b 58 08\n45 85 db\n0f 88 1a 01 00 00\n41 83 fb 18\n0f 8d 29 01 00 00\n44 8b 50 04\n41 83 fa 3c\n0f 8d 34 01 00 00\n44 8b 38\n41 83 ff 3e\n0f 8d 40 01 00 00\n48 8b 0c cd 30 f5 41 00\n4c 8b 04 d5 70 f5 41 00\n44 8b 48 0c\nbb 6c 07 00 00\n03 58 14\n48 83 ec 08\n41 be 00 e2 62 00\nbf 00 e2 62 00\nbe 00 04 00 00\nba c2 fa 41 00\nb8 00 00 00 00\n53\nff 74 24 18\n41 57\n41 52\n41 53\ne8 05 89 ff ff\n48 83 c4 30\n3d 00 04 00 00\n7c 2f\nbf e9 fa 41 00\nbe 63 f6 41 00\nba 04 03 00 00\nb9 24 fa 41 00\ne8 41 89 ff ff\n48 8b 3c 24\n48 8b 74 24 08\nba 40 00 00 00\ne8 0e f4 ff ff\n49 89 c6\n4c 89 f0\n48 83 c4 10\n5b\n41 5e\n41 5f\nc3\nbf 12 fa 41 00\nbe 63 f6 41 00\nba ef 02 00 00\nb9 24 fa 41 00\ne8 05 89 ff ff\nbf 48 fa 41 00\nbe 63 f6 41 00\nba f0 02 00 00\nb9 24 fa 41 00\ne8 ec 88 ff ff\nbf 59 fa 41 00\nbe 63 f6 41 00\nba f1 02 00 00\nb9 24 fa 41 00\ne8 d3 88 ff ff\nbf 6a fa 41 00\nbe 63 f6 41 00\nba f2 02 00 00\nb9 24 fa 41 00\ne8 ba 88 ff ff\nbf 7b fa 41 00\nbe 63 f6 41 00\nba f3 02 00 00\nb9 24 fa 41 00\ne8 a1 88 ff ff\nbf 8d fa 41 00\nbe 63 f6 41 00\nba f4 02 00 00\nb9 24 fa 41 00\ne8 88 88 ff ff\nbf 9f fa 41 00\nbe 63 f6 41 00\nba f5 02 00 00\nb9 24 fa 41 00\ne8 6f 88 ff ff\nbf b0 fa 41 00\nbe 63 f6 41 00\nba f6 02 00 00\nb9 24 fa 41 00\ne8 56 88 ff ff\n'
p2266
S'.text:000000000040a010\n.text:000000000040a012\n.text:000000000040a014\n.text:000000000040a015\n.text:000000000040a019\n.text:000000000040a01d\n.text:000000000040a022\n.text:000000000040a025\n.text:000000000040a02a\n.text:000000000040a02d\n.text:000000000040a033\n.text:000000000040a037\n.text:000000000040a03a\n.text:000000000040a040\n.text:000000000040a043\n.text:000000000040a049\n.text:000000000040a04d\n.text:000000000040a050\n.text:000000000040a056\n.text:000000000040a059\n.text:000000000040a05f\n.text:000000000040a063\n.text:000000000040a066\n.text:000000000040a06c\n.text:000000000040a070\n.text:000000000040a076\n.text:000000000040a07a\n.text:000000000040a07e\n.text:000000000040a084\n.text:000000000040a087\n.text:000000000040a08b\n.text:000000000040a091\n.text:000000000040a099\n.text:000000000040a0a1\n.text:000000000040a0a5\n.text:000000000040a0aa\n.text:000000000040a0ad\n.text:000000000040a0b1\n.text:000000000040a0b7\n.text:000000000040a0bc\n.text:000000000040a0c1\n.text:000000000040a0c6\n.text:000000000040a0cb\n.text:000000000040a0cc\n.text:000000000040a0d0\n.text:000000000040a0d2\n.text:000000000040a0d4\n.text:000000000040a0d6\n.text:000000000040a0db\n.text:000000000040a0df\n.text:000000000040a0e4\n.text:000000000040a0e6\n.text:000000000040a0eb\n.text:000000000040a0f0\n.text:000000000040a0f5\n.text:000000000040a0fa\n.text:000000000040a0ff\n.text:000000000040a103\n.text:000000000040a108\n.text:000000000040a10d\n.text:000000000040a112\n.text:000000000040a115\n.text:000000000040a118\n.text:000000000040a11c\n.text:000000000040a11d\n.text:000000000040a11f\n.text:000000000040a121\n.text:000000000040a122\n.text:000000000040a127\n.text:000000000040a12c\n.text:000000000040a131\n.text:000000000040a136\n.text:000000000040a13b\n.text:000000000040a140\n.text:000000000040a145\n.text:000000000040a14a\n.text:000000000040a14f\n.text:000000000040a154\n.text:000000000040a159\n.text:000000000040a15e\n.text:000000000040a163\n.text:000000000040a168\n.text:000000000040a16d\n.text:000000000040a172\n.text:000000000040a177\n.text:000000000040a17c\n.text:000000000040a181\n.text:000000000040a186\n.text:000000000040a18b\n.text:000000000040a190\n.text:000000000040a195\n.text:000000000040a19a\n.text:000000000040a19f\n.text:000000000040a1a4\n.text:000000000040a1a9\n.text:000000000040a1ae\n.text:000000000040a1b3\n.text:000000000040a1b8\n.text:000000000040a1bd\n.text:000000000040a1c2\n.text:000000000040a1c7\n.text:000000000040a1cc\n.text:000000000040a1d1\n.text:000000000040a1d6\n.text:000000000040a1db\n.text:000000000040a1e0\n.text:000000000040a1e5\n'
p2267
tp2268
sS'parse_xtype'
p2269
(S'\n__stdcall parse_xtype(parser_table * entry, char * * argv, int * arg_ptr)\n'
p2270
V\u000a_Bool parse_xtype(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = insert_type(argv,arg_ptr,entry,pred_xtype);\u000a  return _Var1;\u000a}\u000a\u000a
p2271
S'MOV RAX,RDI\nMOV ECX,0x4048f0\nMOV RDI,RSI\nMOV RSI,RDX\nMOV RDX,RAX\nJMP 0x0040d8a0\n'
p2272
S'48 89 f8\nb9 f0 48 40 00\n48 89 f7\n48 89 d6\n48 89 c2\ne9 7a 12 00 00\n'
p2273
S'.text:000000000040c610\n.text:000000000040c613\n.text:000000000040c618\n.text:000000000040c61b\n.text:000000000040c61e\n.text:000000000040c621\n'
p2274
tp2275
sS'c_tolower'
p2276
(S'\n__stdcall c_tolower()\n'
p2277
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p2278
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p2279
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p2280
S'.text:000000000041ba70\n.text:000000000041ba73\n.text:000000000041ba76\n.text:000000000041ba79\n.text:000000000041ba7c\n'
p2281
tp2282
sS'get_format_specifer_length'
p2283
(S'\n__stdcall get_format_specifer_length()\n'
p2284
V\u000asize_t get_format_specifer_length(void)\u000a\u000a{\u000a  void *pvVar1;\u000a  int __c;\u000a  \u000a  pvVar1 = memchr(&DAT_0041f8a4,__c,0x1d);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return 1;\u000a  }\u000a  pvVar1 = memchr(&DAT_0041f8c1,__c,5);\u000a  return (ulong)(pvVar1 != (void *)0x0) * 2;\u000a}\u000a\u000a
p2285
S'PUSH RBX\nMOV EBX,EDI\nMOV EDI,0x41f8a4\nMOV EDX,0x1d\nMOV ESI,EBX\nCALL 0x00402b10\nTEST RAX,RAX\nJZ 0x00409440\nMOV EAX,0x1\nPOP RBX\nRET\nMOV EDI,0x41f8c1\nMOV EDX,0x5\nMOV ESI,EBX\nCALL 0x00402b10\nMOV RCX,RAX\nXOR EAX,EAX\nTEST RCX,RCX\nSETNZ AL\nADD RAX,RAX\nPOP RBX\nRET\n'
p2286
S'53\n89 fb\nbf a4 f8 41 00\nba 1d 00 00 00\n89 de\ne8 dc 96 ff ff\n48 85 c0\n74 07\nb8 01 00 00 00\n5b\nc3\nbf c1 f8 41 00\nba 05 00 00 00\n89 de\ne8 bf 96 ff ff\n48 89 c1\n31 c0\n48 85 c9\n0f 95 c0\n48 01 c0\n5b\nc3\n'
p2287
S'.text:0000000000409420\n.text:0000000000409421\n.text:0000000000409423\n.text:0000000000409428\n.text:000000000040942d\n.text:000000000040942f\n.text:0000000000409434\n.text:0000000000409437\n.text:0000000000409439\n.text:000000000040943e\n.text:000000000040943f\n.text:0000000000409440\n.text:0000000000409445\n.text:000000000040944a\n.text:000000000040944c\n.text:0000000000409451\n.text:0000000000409454\n.text:0000000000409456\n.text:0000000000409459\n.text:000000000040945c\n.text:000000000040945f\n.text:0000000000409460\n'
p2288
tp2289
sS'get_noop'
p2290
(S'\n__stdcall get_noop()\n'
p2291
V\u000aparser_table * get_noop(void)\u000a\u000a{\u000a  parser_table_conflict *ppVar1;\u000a  parser_table_conflict *ppVar2;\u000a  \u000a  if (noop == (parser_table *)0x0) {\u000a    ppVar2 = parse_table;\u000a    do {\u000a      ppVar1 = ppVar2 + 1;\u000a      ppVar2 = ppVar2 + 1;\u000a      noop = (parser_table *)ppVar2;\u000a    } while (ppVar1->type != ARG_NOOP);\u000a  }\u000a  return noop;\u000a}\u000a\u000a
p2292
S'CMP qword ptr [0x0062e620],0x0\nJNZ 0x0040ca51\nMOV EAX,0x41ffe0\nNOP\nCMP dword ptr [RAX + 0x20],0x1\nLEA RAX,[RAX + 0x20]\nJNZ 0x0040ca40\nMOV qword ptr [0x0062e620],RAX\nMOV RAX,qword ptr [0x0062e620]\nRET\n'
p2293
S'48 83 3d e8 1b 22 00 00\n75 17\nb8 e0 ff 41 00\n90\n83 78 20 01\n48 8d 40 20\n75 f6\n48 89 05 cf 1b 22 00\n48 8b 05 c8 1b 22 00\nc3\n'
p2294
S'.text:000000000040ca30\n.text:000000000040ca38\n.text:000000000040ca3a\n.text:000000000040ca3f\n.text:000000000040ca40\n.text:000000000040ca44\n.text:000000000040ca48\n.text:000000000040ca4a\n.text:000000000040ca51\n.text:000000000040ca58\n'
p2295
tp2296
sS'optionh_stat'
p2297
(S'\n__stdcall optionh_stat(char * name, stat * p)\n'
p2298
V\u000aint optionh_stat(char *name,stat *p)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if ((state.cwd_dir_fd != -100) && (state.cwd_dir_fd < 0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("state.cwd_dir_fd >= 0","util.c",0x27f,\u000a                  "int optionh_stat(const char *, struct stat *)");\u000a  }\u000a  if (state.curdepth != 0) {\u000a    iVar1 = fstatat(state.cwd_dir_fd,name,(stat *)p,0x100);\u000a    return iVar1;\u000a  }\u000a  iVar1 = fstatat(state.cwd_dir_fd,name,(stat *)p,0);\u000a  if (iVar1 != 0) {\u000a    iVar1 = fallback_stat(name,p);\u000a    return iVar1;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p2299
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nMOV EDI,dword ptr [0x0062f018]\nCMP EDI,-0x64\nJZ 0x00408029\nTEST EDI,EDI\nJS 0x00408075\nCMP dword ptr [0x0062f000],0x0\nJZ 0x00408049\nMOV ECX,0x100\nMOV RSI,RBX\nMOV RDX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x0041c4c0\nXOR ECX,ECX\nMOV RSI,RBX\nMOV RDX,R14\nCALL 0x0041c4c0\nTEST EAX,EAX\nJZ 0x0040806b\nMOV RDI,RBX\nMOV RSI,R14\nMOV EDX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00408090\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV EDI,0x41e74a\nMOV ESI,0x41e01b\nMOV EDX,0x27f\nMOV ECX,0x41e760\nCALL 0x00402a40\n'
p2300
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n8b 3d f8 6f 22 00\n83 ff 9c\n74 04\n85 ff\n78 4c\n83 3d d0 6f 22 00 00\n74 17\nb9 00 01 00 00\n48 89 de\n4c 89 f2\n48 83 c4 08\n5b\n41 5e\ne9 77 44 01 00\n31 c9\n48 89 de\n4c 89 f2\ne8 6a 44 01 00\n85 c0\n74 11\n48 89 df\n4c 89 f6\n89 c2\n48 83 c4 08\n5b\n41 5e\neb 25\n31 c0\n48 83 c4 08\n5b\n41 5e\nc3\nbf 4a e7 41 00\nbe 1b e0 41 00\nba 7f 02 00 00\nb9 60 e7 41 00\ne8 b2 a9 ff ff\n'
p2301
S'.text:0000000000408010\n.text:0000000000408012\n.text:0000000000408013\n.text:0000000000408014\n.text:0000000000408017\n.text:000000000040801a\n.text:0000000000408020\n.text:0000000000408023\n.text:0000000000408025\n.text:0000000000408027\n.text:0000000000408029\n.text:0000000000408030\n.text:0000000000408032\n.text:0000000000408037\n.text:000000000040803a\n.text:000000000040803d\n.text:0000000000408041\n.text:0000000000408042\n.text:0000000000408044\n.text:0000000000408049\n.text:000000000040804b\n.text:000000000040804e\n.text:0000000000408051\n.text:0000000000408056\n.text:0000000000408058\n.text:000000000040805a\n.text:000000000040805d\n.text:0000000000408060\n.text:0000000000408062\n.text:0000000000408066\n.text:0000000000408067\n.text:0000000000408069\n.text:000000000040806b\n.text:000000000040806d\n.text:0000000000408071\n.text:0000000000408072\n.text:0000000000408074\n.text:0000000000408075\n.text:000000000040807a\n.text:000000000040807f\n.text:0000000000408084\n.text:0000000000408089\n'
p2302
tp2303
sS'quotearg_style'
p2304
(S'\n__stdcall quotearg_style(char * arg)\n'
p2305
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p2306
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00416290\n'
p2307
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p2308
S'.text:0000000000416370\n.text:0000000000416373\n.text:0000000000416375\n.text:0000000000416377\n.text:0000000000416379\n.text:000000000041637c\n'
p2309
tp2310
sS'is_feasible_path_argument'
p2311
(S'\n__stdcall is_feasible_path_argument(char * arg)\n'
p2312
V\u000a_Bool is_feasible_path_argument(char *arg)\u000a\u000a{\u000a  _Bool _Var1;\u000a  char *pcVar2;\u000a  \u000a  pcVar2 = strrchr(arg,0x2f);\u000a  if ((pcVar2 != (char *)0x0) && (pcVar2[1] == 0)) {\u000a    _Var1 = matches_start_point(arg);\u000a    return _Var1;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p2313
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV ESI,0x2f\nCALL 0x00402a00\nTEST RAX,RAX\nJZ 0x0040d6ad\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x0040d6b6\nMOV AL,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOVZX ESI,BPL\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00405800\n'
p2314
S'55\n53\n50\n89 f5\n48 89 fb\nbe 2f 00 00 00\ne8 5e 53 ff ff\n48 85 c0\n74 06\n80 78 01 00\n74 09\nb0 01\n48 83 c4 08\n5b\n5d\nc3\n40 0f b6 f5\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 38 81 ff ff\n'
p2315
S'.text:000000000040d690\n.text:000000000040d691\n.text:000000000040d692\n.text:000000000040d693\n.text:000000000040d695\n.text:000000000040d698\n.text:000000000040d69d\n.text:000000000040d6a2\n.text:000000000040d6a5\n.text:000000000040d6a7\n.text:000000000040d6ab\n.text:000000000040d6ad\n.text:000000000040d6af\n.text:000000000040d6b3\n.text:000000000040d6b4\n.text:000000000040d6b5\n.text:000000000040d6b6\n.text:000000000040d6ba\n.text:000000000040d6bd\n.text:000000000040d6c1\n.text:000000000040d6c2\n.text:000000000040d6c3\n'
p2316
tp2317
sS'qmark_chars'
p2318
(S'\n__stdcall qmark_chars(char * buf, size_t len)\n'
p2319
V\u000asize_t qmark_chars(char *buf,size_t len)\u000a\u000a{\u000a  char cVar1;\u000a  int iVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  size_t sVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  char *s;\u000a  char *pcVar8;\u000a  char *pcVar9;\u000a  wchar_t local_44;\u000a  char *local_40;\u000a  mbstate_t local_38;\u000a  \u000a  sVar3 = __ctype_get_mb_cur_max();\u000a  if (sVar3 < 2) {\u000a    sVar4 = unibyte_qmark_chars(buf,len);\u000a    return sVar4;\u000a  }\u000a  pcVar8 = buf;\u000a  local_40 = buf;\u000a  if (0 < (long)len) {\u000a    pcVar9 = buf + len;\u000a    pcVar8 = buf;\u000a    local_40 = buf;\u000aLAB_0040f700:\u000a    do {\u000a      cVar1 = *buf;\u000a      switch(cVar1) {\u000a      case ' ':\u000a      case '!':\u000a      case '\u005c"':\u000a      case '#':\u000a      case '%':\u000a      case '&':\u000a      case '\u005c'':\u000a      case '(':\u000a      case ')':\u000a      case '*':\u000a      case '+':\u000a      case ',':\u000a      case '-':\u000a      case '.':\u000a      case '/':\u000a      case '0':\u000a      case '1':\u000a      case '2':\u000a      case '3':\u000a      case '4':\u000a      case '5':\u000a      case '6':\u000a      case '7':\u000a      case '8':\u000a      case '9':\u000a      case ':':\u000a      case ';':\u000a      case '<':\u000a      case '=':\u000a      case '>':\u000a      case '?':\u000a      case 'A':\u000a      case 'B':\u000a      case 'C':\u000a      case 'D':\u000a      case 'E':\u000a      case 'F':\u000a      case 'G':\u000a      case 'H':\u000a      case 'I':\u000a      case 'J':\u000a      case 'K':\u000a      case 'L':\u000a      case 'M':\u000a      case 'N':\u000a      case 'O':\u000a      case 'P':\u000a      case 'Q':\u000a      case 'R':\u000a      case 'S':\u000a      case 'T':\u000a      case 'U':\u000a      case 'V':\u000a      case 'W':\u000a      case 'X':\u000a      case 'Y':\u000a      case 'Z':\u000a      case '[':\u000a      case '\u005c\u005c':\u000a      case ']':\u000a      case '^':\u000a      case '_':\u000a      case 'a':\u000a      case 'b':\u000a      case 'c':\u000a      case 'd':\u000a      case 'e':\u000a      case 'f':\u000a      case 'g':\u000a      case 'h':\u000a      case 'i':\u000a      case 'j':\u000a      case 'k':\u000a      case 'l':\u000a      case 'm':\u000a      case 'n':\u000a      case 'o':\u000a      case 'p':\u000a      case 'q':\u000a      case 'r':\u000a      case 's':\u000a      case 't':\u000a      case 'u':\u000a      case 'v':\u000a      case 'w':\u000a      case 'x':\u000a      case 'y':\u000a      case 'z':\u000a      case '{':\u000a      case '|':\u000a      case '}':\u000a      case '~':\u000a        buf = buf + 1;\u000a        *pcVar8 = cVar1;\u000a        pcVar8 = pcVar8 + 1;\u000a        if (pcVar9 <= buf) goto LAB_0040f7ee;\u000a        goto LAB_0040f700;\u000a      }\u000a      local_38 = (mbstate_t)0x0;\u000a      s = buf;\u000a      do {\u000a        sVar4 = rpl_mbrtowc(&local_44,s,(size_t)(pcVar9 + -(long)s),(mbstate_t *)&local_38);\u000a        if (sVar4 != 0) {\u000a          buf = pcVar9;\u000a          if (sVar4 != 0xfffffffffffffffe) {\u000a            if (sVar4 != 0xffffffffffffffff) goto LAB_0040f776;\u000a            buf = s + 1;\u000a          }\u000a          *pcVar8 = '?';\u000a          pcVar8 = pcVar8 + 1;\u000a          break;\u000a        }\u000a        sVar4 = 1;\u000aLAB_0040f776:\u000a        iVar2 = wcwidth(local_44);\u000a        sVar5 = sVar4;\u000a        pcVar6 = pcVar8;\u000a        pcVar7 = s;\u000a        if (iVar2 < 0) {\u000a          *pcVar8 = '?';\u000a          pcVar8 = pcVar8 + 1;\u000a        }\u000a        else {\u000a          do {\u000a            cVar1 = *pcVar7;\u000a            pcVar7 = pcVar7 + 1;\u000a            *pcVar6 = cVar1;\u000a            pcVar6 = pcVar6 + 1;\u000a            sVar5 = sVar5 - 1;\u000a          } while (sVar5 != 0);\u000a          pcVar8 = pcVar8 + sVar4;\u000a        }\u000a        buf = s + sVar4;\u000a        iVar2 = mbsinit(&local_38);\u000a        s = buf;\u000a      } while (iVar2 == 0);\u000a    } while (buf < pcVar9);\u000a  }\u000aLAB_0040f7ee:\u000a  return (size_t)(pcVar8 + -(long)local_40);\u000a}\u000a\u000a
p2320
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R15,RSI\nMOV R14,RDI\nCALL 0x00402920\nCMP RAX,0x1\nJA 0x0040f6d8\nMOV RDI,R14\nMOV RSI,R15\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x0040f810\nTEST R15,R15\nMOV R13,R14\nJLE 0x0040f7ee\nADD R15,R14\nLEA RBX,[RSP + 0x10]\nMOV R13,R14\nMOV RBP,R14\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVSX EAX,byte ptr [RBP]\nLEA ECX,[RAX + -0x20]\nCMP ECX,0x5e\nJA 0x0040f727\nJMP qword ptr [0x4222f8 + RCX*0x8]\nINC RBP\nMOV byte ptr [R13],AL\nINC R13\nCMP RBP,R15\nJC 0x0040f700\nJMP 0x0040f7ee\nMOV qword ptr [RSP + 0x8],R14\nMOV qword ptr [RSP + 0x10],0x0\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDX,R15\nSUB RDX,RBP\nLEA RDI,[RSP + 0x4]\nMOV RSI,RBP\nMOV RCX,RBX\nCALL 0x00419f50\nMOV R12,RAX\nTEST R12,R12\nJZ 0x0040f770\nCMP R12,-0x2\nJZ 0x0040f7d0\nCMP R12,-0x1\nJNZ 0x0040f776\nJMP 0x0040f7d5\nMOV R12D,0x1\nMOV R14,RBX\nMOV EDI,dword ptr [RSP + 0x4]\nCALL 0x00402c40\nTEST EAX,EAX\nMOV RAX,R12\nMOV RCX,R13\nMOV RDX,RBP\nJS 0x0040f7b0\nNOP\nMOVZX EBX,byte ptr [RDX]\nINC RDX\nMOV byte ptr [RCX],BL\nINC RCX\nDEC RAX\nJNZ 0x0040f790\nADD R13,R12\nJMP 0x0040f7b8\nMOV byte ptr [R13],0x3f\nINC R13\nADD RBP,R12\nMOV RBX,R14\nMOV RDI,RBX\nCALL 0x00402f20\nTEST EAX,EAX\nJZ 0x0040f740\nJMP 0x0040f7e0\nMOV RBP,R15\nJMP 0x0040f7d8\nINC RBP\nMOV byte ptr [R13],0x3f\nINC R13\nMOV R14,qword ptr [RSP + 0x8]\nCMP RBP,R15\nJC 0x0040f700\nSUB R13,R14\nMOV RAX,R13\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2321
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 f7\n49 89 fe\ne8 67 32 ff ff\n48 83 f8 01\n77 19\n4c 89 f7\n4c 89 fe\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 38 01 00 00\n4d 85 ff\n4d 89 f5\n0f 8e 0a 01 00 00\n4d 01 f7\n48 8d 5c 24 10\n4d 89 f5\n4c 89 f5\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f be 45 00\n8d 48 e0\n83 f9 5e\n77 1b\nff 24 cd f8 22 42 00\n48 ff c5\n41 88 45 00\n49 ff c5\n4c 39 fd\n72 de\ne9 c7 00 00 00\n4c 89 74 24 08\n48 c7 44 24 10 00 00 00 00\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 fa\n48 29 ea\n48 8d 7c 24 04\n48 89 ee\n48 89 d9\ne8 fa a7 00 00\n49 89 c4\n4d 85 e4\n74 12\n49 83 fc fe\n74 6c\n49 83 fc ff\n75 0c\neb 69\n41 bc 01 00 00 00\n49 89 de\n8b 7c 24 04\ne8 be 34 ff ff\n85 c0\n4c 89 e0\n4c 89 e9\n48 89 ea\n78 21\n90\n0f b6 1a\n48 ff c2\n88 19\n48 ff c1\n48 ff c8\n75 f0\n4d 01 e5\neb 13\n41 c6 45 00 3f\n49 ff c5\n4c 01 e5\n4c 89 f3\n48 89 df\ne8 5a 37 ff ff\n85 c0\n0f 84 72 ff ff ff\neb 10\n4c 89 fd\neb 03\n48 ff c5\n41 c6 45 00 3f\n49 ff c5\n4c 8b 74 24 08\n4c 39 fd\n0f 82 12 ff ff ff\n4d 29 f5\n4c 89 e8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2322
S'.text:000000000040f6a0\n.text:000000000040f6a1\n.text:000000000040f6a3\n.text:000000000040f6a5\n.text:000000000040f6a7\n.text:000000000040f6a9\n.text:000000000040f6aa\n.text:000000000040f6ae\n.text:000000000040f6b1\n.text:000000000040f6b4\n.text:000000000040f6b9\n.text:000000000040f6bd\n.text:000000000040f6bf\n.text:000000000040f6c2\n.text:000000000040f6c5\n.text:000000000040f6c9\n.text:000000000040f6ca\n.text:000000000040f6cc\n.text:000000000040f6ce\n.text:000000000040f6d0\n.text:000000000040f6d2\n.text:000000000040f6d3\n.text:000000000040f6d8\n.text:000000000040f6db\n.text:000000000040f6de\n.text:000000000040f6e4\n.text:000000000040f6e7\n.text:000000000040f6ec\n.text:000000000040f6ef\n.text:000000000040f6f2\n.text:000000000040f700\n.text:000000000040f704\n.text:000000000040f707\n.text:000000000040f70a\n.text:000000000040f70c\n.text:000000000040f713\n.text:000000000040f716\n.text:000000000040f71a\n.text:000000000040f71d\n.text:000000000040f720\n.text:000000000040f722\n.text:000000000040f727\n.text:000000000040f72c\n.text:000000000040f735\n.text:000000000040f740\n.text:000000000040f743\n.text:000000000040f746\n.text:000000000040f74b\n.text:000000000040f74e\n.text:000000000040f751\n.text:000000000040f756\n.text:000000000040f759\n.text:000000000040f75c\n.text:000000000040f75e\n.text:000000000040f762\n.text:000000000040f764\n.text:000000000040f768\n.text:000000000040f76a\n.text:000000000040f770\n.text:000000000040f776\n.text:000000000040f779\n.text:000000000040f77d\n.text:000000000040f782\n.text:000000000040f784\n.text:000000000040f787\n.text:000000000040f78a\n.text:000000000040f78d\n.text:000000000040f78f\n.text:000000000040f790\n.text:000000000040f793\n.text:000000000040f796\n.text:000000000040f798\n.text:000000000040f79b\n.text:000000000040f79e\n.text:000000000040f7a0\n.text:000000000040f7a3\n.text:000000000040f7b0\n.text:000000000040f7b5\n.text:000000000040f7b8\n.text:000000000040f7bb\n.text:000000000040f7be\n.text:000000000040f7c1\n.text:000000000040f7c6\n.text:000000000040f7c8\n.text:000000000040f7ce\n.text:000000000040f7d0\n.text:000000000040f7d3\n.text:000000000040f7d5\n.text:000000000040f7d8\n.text:000000000040f7dd\n.text:000000000040f7e0\n.text:000000000040f7e5\n.text:000000000040f7e8\n.text:000000000040f7ee\n.text:000000000040f7f1\n.text:000000000040f7f4\n.text:000000000040f7f8\n.text:000000000040f7f9\n.text:000000000040f7fb\n.text:000000000040f7fd\n.text:000000000040f7ff\n.text:000000000040f801\n.text:000000000040f802\n'
p2323
tp2324
sS'strip_trailing_slashes'
p2325
(S'\n__stdcall strip_trailing_slashes(char * file)\n'
p2326
V\u000a_Bool strip_trailing_slashes(char *file)\u000a\u000a{\u000a  char cVar1;\u000a  char *name;\u000a  size_t sVar2;\u000a  \u000a  name = last_component(file);\u000a  if (*name == 0) {\u000a    name = file;\u000a  }\u000a  sVar2 = base_len(name);\u000a  cVar1 = name[sVar2];\u000a  name[sVar2] = 0;\u000a  return (_Bool)(cVar1 != 0);\u000a}\u000a\u000a
p2327
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00410090\nMOV RBX,RAX\nCMP byte ptr [RBX],0x0\nCMOVZ RBX,R14\nMOV RDI,RBX\nCALL 0x004100f0\nCMP byte ptr [RBX + RAX*0x1],0x0\nSETNZ CL\nMOV byte ptr [RBX + RAX*0x1],0x0\nMOV EAX,ECX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p2328
S'41 56\n53\n50\n49 89 fe\ne8 64 ff ff ff\n48 89 c3\n80 3b 00\n49 0f 44 de\n48 89 df\ne8 b2 ff ff ff\n80 3c 03 00\n0f 95 c1\nc6 04 03 00\n89 c8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p2329
S'.text:0000000000410120\n.text:0000000000410122\n.text:0000000000410123\n.text:0000000000410124\n.text:0000000000410127\n.text:000000000041012c\n.text:000000000041012f\n.text:0000000000410132\n.text:0000000000410136\n.text:0000000000410139\n.text:000000000041013e\n.text:0000000000410142\n.text:0000000000410145\n.text:0000000000410149\n.text:000000000041014b\n.text:000000000041014f\n.text:0000000000410150\n.text:0000000000410152\n'
p2330
tp2331
sS'parse_size'
p2332
(S'\n__stdcall parse_size(parser_table * entry, char * * argv, int * arg_ptr)\n'
p2333
V\u000a_Bool parse_size(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  char cVar1;\u000a  char *__s;\u000a  _Bool _Var2;\u000a  size_t sVar3;\u000a  undefined8 uVar4;\u000a  predicate *ppVar5;\u000a  uint uVar6;\u000a  undefined uVar7;\u000a  long lVar8;\u000a  float fVar9;\u000a  char tail [2];\u000a  char local_46;\u000a  undefined local_45;\u000a  comparison_type local_44;\u000a  uintmax_t local_40;\u000a  parser_table *local_38;\u000a  \u000a  if ((argv == (char **)0x0) || (__s = argv[(long)*arg_ptr], __s == (char *)0x0)) {\u000a    uVar7 = 0;\u000a  }\u000a  else {\u000a    local_38 = entry;\u000a    sVar3 = strlen(__s);\u000a    if ((int)sVar3 == 0) {\u000a      uVar4 = dcgettext(0,"invalid null argument to -size",5);\u000a      error(1,0,uVar4,uVar4);\u000a    }\u000a    lVar8 = (long)((sVar3 << 0x20) + -0x100000000) >> 0x20;\u000a    cVar1 = __s[lVar8];\u000a    uVar6 = 0x200;\u000a    local_46 = 0;\u000a    switch(cVar1) {\u000a    case '0':\u000a    case '1':\u000a    case '2':\u000a    case '3':\u000a    case '4':\u000a    case '5':\u000a    case '6':\u000a    case '7':\u000a    case '8':\u000a    case '9':\u000a      break;\u000a    default:\u000a      uVar4 = dcgettext(0,"invalid -size type `%c\u005c'",5);\u000a      error(1,0,uVar4,(ulong)(uint)(int)argv[(long)*arg_ptr][lVar8]);\u000a      uVar6 = 0x200;\u000a      local_46 = cVar1;\u000a      break;\u000a    case 'G':\u000a      __s[lVar8] = 0;\u000a      uVar6 = 0x40000000;\u000a      local_46 = cVar1;\u000a      break;\u000a    case 'M':\u000a      __s[lVar8] = 0;\u000a      uVar6 = 0x100000;\u000a      local_46 = cVar1;\u000a      break;\u000a    case 'b':\u000a      __s[lVar8] = 0;\u000a      uVar6 = 0x200;\u000a      local_46 = cVar1;\u000a      break;\u000a    case 'c':\u000a      __s[lVar8] = 0;\u000a      uVar6 = 1;\u000a      local_46 = cVar1;\u000a      break;\u000a    case 'k':\u000a      __s[lVar8] = 0;\u000a      uVar6 = 0x400;\u000a      local_46 = cVar1;\u000a      break;\u000a    case 'w':\u000a      __s[lVar8] = 0;\u000a      uVar6 = 2;\u000a      local_46 = cVar1;\u000a    }\u000a    _Var2 = get_num(__s,&local_40,&local_44);\u000a    if (_Var2 == false) {\u000a      local_45 = 0;\u000a      uVar7 = 0;\u000a      uVar4 = dcgettext(0,"Invalid argument `%s%s\u005c' to -size",5);\u000a      error(1,0,uVar4,__s,&local_46);\u000a    }\u000a    else {\u000a      ppVar5 = insert_primary(local_38,__s);\u000a      *(comparison_type *)ppVar5->args = local_44;\u000a      *(uint *)(ppVar5->args + 4) = uVar6;\u000a      *(uintmax_t *)(ppVar5->args + 8) = local_40;\u000a      *(undefined2 *)&ppVar5->need_stat = 1;\u000a      if (local_44 == COMP_LT) {\u000a        fVar9 = *(float *)(&DAT_0041fbd8 + (ulong)(0x5000 < (ulong)uVar6 * local_40) * 4);\u000a      }\u000a      else {\u000a        fVar9 = DAT_0041fb78;\u000a        if (local_44 == COMP_GT) {\u000a          fVar9 = *(float *)(&DAT_0041fbe0 + (ulong)(0x5000 < (ulong)uVar6 * local_40) * 4);\u000a        }\u000a      }\u000a      ppVar5->est_success_rate = fVar9;\u000a      *arg_ptr = *arg_ptr + 1;\u000a      uVar7 = 1;\u000a    }\u000a  }\u000a  return (_Bool)uVar7;\u000a}\u000a\u000a
p2334
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R14,RDX\nMOV R13,RSI\nTEST R13,R13\nJZ 0x0040c251\nMOVSXD RAX,dword ptr [R14]\nMOV R12,qword ptr [R13 + RAX*0x8]\nTEST R12,R12\nJZ 0x0040c251\nMOV qword ptr [RSP + 0x10],RDI\nMOV RDI,R12\nCALL 0x00402930\nMOV RBX,RAX\nTEST EBX,EBX\nJNZ 0x0040c213\nXOR EDI,EDI\nMOV ESI,0x421991\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402d90\nSHL RBX,0x20\nMOV R15,-0x100000000\nADD R15,RBX\nSAR R15,0x20\nMOVSX EBP,byte ptr [R12 + R15*0x1]\nMOV ECX,0x200\nMOV EAX,EBP\nADD EAX,-0x30\nCMP EAX,0x47\nJA 0x0040c258\nXOR EBX,EBX\nJMP qword ptr [0x41fc00 + RAX*0x8]\nMOV byte ptr [R12 + R15*0x1],0x0\nMOV ECX,0x40000000\nJMP 0x0040c2c3\nXOR EBX,EBX\nJMP 0x0040c39e\nXOR EDI,EDI\nMOV ESI,0x4219b0\nMOV EDX,0x5\nCALL 0x00402910\nMOV RDX,RAX\nMOVSXD RAX,dword ptr [R14]\nMOV RAX,qword ptr [R13 + RAX*0x8]\nMOVSX ECX,byte ptr [RAX + R15*0x1]\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00402d90\nMOV ECX,0x200\nJMP 0x0040c2c3\nMOV byte ptr [R12 + R15*0x1],0x0\nMOV ECX,0x100000\nJMP 0x0040c2c3\nMOV byte ptr [R12 + R15*0x1],0x0\nJMP 0x0040c2c3\nMOV byte ptr [R12 + R15*0x1],0x0\nMOV ECX,0x1\nJMP 0x0040c2c3\nMOV byte ptr [R12 + R15*0x1],0x0\nMOV ECX,0x400\nJMP 0x0040c2c3\nMOV byte ptr [R12 + R15*0x1],0x0\nMOV ECX,0x2\nMOV BL,BPL\nMOV EBP,ECX\nLEA RSI,[RSP + 0x8]\nLEA RDX,[RSP + 0x4]\nMOV RDI,R12\nCALL 0x0040d400\nTEST AL,AL\nJZ 0x0040c330\nMOV RDI,qword ptr [RSP + 0x10]\nMOV RSI,R12\nCALL 0x00407730\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RAX + 0x38],ECX\nMOV dword ptr [RAX + 0x3c],EBP\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RAX + 0x40],RCX\nMOV word ptr [RAX + 0x1a],0x1\nMOV ECX,dword ptr [RSP + 0x4]\nCMP ECX,0x1\nJZ 0x0040c36d\nTEST ECX,ECX\nJNZ 0x0040c38c\nMOV ECX,EBP\nIMUL RCX,qword ptr [RSP + 0x8]\nXOR EDX,EDX\nCMP RCX,0x5000\nSETA DL\nMOVSS XMM0,dword ptr [0x41fbe0 + RDX*0x4]\nJMP 0x0040c394\nMOV byte ptr [RSP + 0x2],BL\nMOV byte ptr [RSP + 0x3],0x0\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x4219c8\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nLEA R8,[RSP + 0x2]\nMOV EDI,0x1\nMOV ESI,0x0\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,R12\nCALL 0x00402d90\nJMP 0x0040c39e\nMOV ECX,EBP\nIMUL RCX,qword ptr [RSP + 0x8]\nXOR EDX,EDX\nCMP RCX,0x5000\nSETA DL\nMOVSS XMM0,dword ptr [0x41fbd8 + RDX*0x4]\nJMP 0x0040c394\nMOVSS XMM0,dword ptr [0x0041fb78]\nMOVSS dword ptr [RAX + 0x24],XMM0\nINC dword ptr [R14]\nMOV BL,0x1\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2335
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 d6\n49 89 f5\n4d 85 ed\n0f 84 84 00 00 00\n49 63 06\n4d 8b 64 c5 00\n4d 85 e4\n74 77\n48 89 7c 24 10\n4c 89 e7\ne8 49 67 ff ff\n48 89 c3\n85 db\n75 25\n31 ff\nbe 91 19 42 00\nba 05 00 00 00\ne8 11 67 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 7d 6b ff ff\n48 c1 e3 20\n49 bf 00 00 00 00 ff ff ff ff\n49 01 df\n49 c1 ff 20\n43 0f be 2c 3c\nb9 00 02 00 00\n89 e8\n83 c0 d0\n83 f8 47\n77 1c\n31 db\nff 24 c5 00 fc 41 00\n43 c6 04 3c 00\nb9 00 00 00 40\neb 72\n31 db\ne9 46 01 00 00\n31 ff\nbe b0 19 42 00\nba 05 00 00 00\ne8 a7 66 ff ff\n48 89 c2\n49 63 06\n49 8b 44 c5 00\n42 0f be 0c 38\nbf 01 00 00 00\n31 f6\n31 c0\ne8 09 6b ff ff\nb9 00 02 00 00\neb 35\n43 c6 04 3c 00\nb9 00 00 10 00\neb 29\n43 c6 04 3c 00\neb 22\n43 c6 04 3c 00\nb9 01 00 00 00\neb 16\n43 c6 04 3c 00\nb9 00 04 00 00\neb 0a\n43 c6 04 3c 00\nb9 02 00 00 00\n40 88 eb\n89 cd\n48 8d 74 24 08\n48 8d 54 24 04\n4c 89 e7\ne8 26 11 00 00\n84 c0\n74 52\n48 8b 7c 24 10\n4c 89 e6\ne8 45 b4 ff ff\n8b 4c 24 04\n89 48 38\n89 68 3c\n48 8b 4c 24 08\n48 89 48 40\n66 c7 40 1a 01 00\n8b 4c 24 04\n83 f9 01\n74 60\n85 c9\n75 7b\n89 e9\n48 0f af 4c 24 08\n31 d2\n48 81 f9 00 50 00 00\n0f 97 c2\nf3 0f 10 04 95 e0 fb 41 00\neb 64\n88 5c 24 02\nc6 44 24 03 00\n31 db\n31 ff\nbe c8 19 42 00\nba 05 00 00 00\ne8 c4 65 ff ff\n48 89 c1\n4c 8d 44 24 02\nbf 01 00 00 00\nbe 00 00 00 00\n31 c0\n48 89 ca\n4c 89 e1\ne8 25 6a ff ff\neb 31\n89 e9\n48 0f af 4c 24 08\n31 d2\n48 81 f9 00 50 00 00\n0f 97 c2\nf3 0f 10 04 95 d8 fb 41 00\neb 08\nf3 0f 10 05 e4 37 01 00\nf3 0f 11 40 24\n41 ff 06\nb3 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2336
S'.text:000000000040c1b0\n.text:000000000040c1b1\n.text:000000000040c1b3\n.text:000000000040c1b5\n.text:000000000040c1b7\n.text:000000000040c1b9\n.text:000000000040c1ba\n.text:000000000040c1be\n.text:000000000040c1c1\n.text:000000000040c1c4\n.text:000000000040c1c7\n.text:000000000040c1cd\n.text:000000000040c1d0\n.text:000000000040c1d5\n.text:000000000040c1d8\n.text:000000000040c1da\n.text:000000000040c1df\n.text:000000000040c1e2\n.text:000000000040c1e7\n.text:000000000040c1ea\n.text:000000000040c1ec\n.text:000000000040c1ee\n.text:000000000040c1f0\n.text:000000000040c1f5\n.text:000000000040c1fa\n.text:000000000040c1ff\n.text:000000000040c202\n.text:000000000040c207\n.text:000000000040c209\n.text:000000000040c20b\n.text:000000000040c20e\n.text:000000000040c213\n.text:000000000040c217\n.text:000000000040c221\n.text:000000000040c224\n.text:000000000040c228\n.text:000000000040c22d\n.text:000000000040c232\n.text:000000000040c234\n.text:000000000040c237\n.text:000000000040c23a\n.text:000000000040c23c\n.text:000000000040c23e\n.text:000000000040c245\n.text:000000000040c24a\n.text:000000000040c24f\n.text:000000000040c251\n.text:000000000040c253\n.text:000000000040c258\n.text:000000000040c25a\n.text:000000000040c25f\n.text:000000000040c264\n.text:000000000040c269\n.text:000000000040c26c\n.text:000000000040c26f\n.text:000000000040c274\n.text:000000000040c279\n.text:000000000040c27e\n.text:000000000040c280\n.text:000000000040c282\n.text:000000000040c287\n.text:000000000040c28c\n.text:000000000040c28e\n.text:000000000040c293\n.text:000000000040c298\n.text:000000000040c29a\n.text:000000000040c29f\n.text:000000000040c2a1\n.text:000000000040c2a6\n.text:000000000040c2ab\n.text:000000000040c2ad\n.text:000000000040c2b2\n.text:000000000040c2b7\n.text:000000000040c2b9\n.text:000000000040c2be\n.text:000000000040c2c3\n.text:000000000040c2c6\n.text:000000000040c2c8\n.text:000000000040c2cd\n.text:000000000040c2d2\n.text:000000000040c2d5\n.text:000000000040c2da\n.text:000000000040c2dc\n.text:000000000040c2de\n.text:000000000040c2e3\n.text:000000000040c2e6\n.text:000000000040c2eb\n.text:000000000040c2ef\n.text:000000000040c2f2\n.text:000000000040c2f5\n.text:000000000040c2fa\n.text:000000000040c2fe\n.text:000000000040c304\n.text:000000000040c308\n.text:000000000040c30b\n.text:000000000040c30d\n.text:000000000040c30f\n.text:000000000040c311\n.text:000000000040c313\n.text:000000000040c319\n.text:000000000040c31b\n.text:000000000040c322\n.text:000000000040c325\n.text:000000000040c32e\n.text:000000000040c330\n.text:000000000040c334\n.text:000000000040c339\n.text:000000000040c33b\n.text:000000000040c33d\n.text:000000000040c342\n.text:000000000040c347\n.text:000000000040c34c\n.text:000000000040c34f\n.text:000000000040c354\n.text:000000000040c359\n.text:000000000040c35e\n.text:000000000040c360\n.text:000000000040c363\n.text:000000000040c366\n.text:000000000040c36b\n.text:000000000040c36d\n.text:000000000040c36f\n.text:000000000040c375\n.text:000000000040c377\n.text:000000000040c37e\n.text:000000000040c381\n.text:000000000040c38a\n.text:000000000040c38c\n.text:000000000040c394\n.text:000000000040c399\n.text:000000000040c39c\n.text:000000000040c39e\n.text:000000000040c3a0\n.text:000000000040c3a4\n.text:000000000040c3a5\n.text:000000000040c3a7\n.text:000000000040c3a9\n.text:000000000040c3ab\n.text:000000000040c3ad\n.text:000000000040c3ae\n'
p2337
tp2338
sS'fts_alloc'
p2339
(S'\n__stdcall fts_alloc(FTS * sp, char * name, size_t namelen)\n'
p2340
V\u000aFTSENT * fts_alloc(FTS *sp,char *name,size_t namelen)\u000a\u000a{\u000a  FTSENT *pFVar1;\u000a  \u000a  pFVar1 = (FTSENT *)malloc(namelen + 0x118 & 0xfffffffffffffff0);\u000a  if (pFVar1 == (FTSENT *)0x0) {\u000a    pFVar1 = (FTSENT *)0x0;\u000a  }\u000a  else {\u000a    memcpy(pFVar1 + 1,name,namelen);\u000a    *(undefined *)((long)&pFVar1[1].fts_cycle + namelen) = 0;\u000a    pFVar1->fts_namelen = namelen;\u000a    pFVar1->fts_fts = sp;\u000a    pFVar1->fts_path = sp->fts_path;\u000a    pFVar1->fts_errno = 0;\u000a    pFVar1->fts_dirp = (DIR *)0x0;\u000a    pFVar1->fts_flags = 0;\u000a    pFVar1->fts_instr = 3;\u000a    *(undefined4 *)&pFVar1->fts_number = 0;\u000a    *(undefined4 *)((long)&pFVar1->fts_number + 4) = 0;\u000a    *(undefined4 *)&pFVar1->fts_pointer = 0;\u000a    *(undefined4 *)((long)&pFVar1->fts_pointer + 4) = 0;\u000a  }\u000a  return pFVar1;\u000a}\u000a\u000a
p2341
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDX\nMOV R12,RSI\nMOV R14,RDI\nLEA RDI,[0x118 + R15]\nAND RDI,-0x10\nCALL 0x00402c60\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004184fb\nMOV RDI,RBX\nADD RDI,0x108\nMOV RSI,R12\nMOV RDX,R15\nCALL 0x00402bd0\nMOV byte ptr [0x108 + RBX + R15*0x1],0x0\nMOV qword ptr [RBX + 0x60],R15\nMOV qword ptr [RBX + 0x50],R14\nMOV RAX,qword ptr [R14 + 0x20]\nMOV qword ptr [RBX + 0x38],RAX\nMOV dword ptr [RBX + 0x40],0x0\nMOV qword ptr [RBX + 0x18],0x0\nMOV word ptr [RBX + 0x72],0x0\nMOV word ptr [RBX + 0x74],0x3\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX + 0x20],XMM0\nJMP 0x004184fd\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p2342
S'41 57\n41 56\n41 54\n53\n50\n49 89 d7\n49 89 f4\n49 89 fe\n49 8d bf 18 01 00 00\n48 83 e7 f0\ne8 bf a7 fe ff\n48 89 c3\n48 85 db\n74 52\n48 89 df\n48 81 c7 08 01 00 00\n4c 89 e6\n4c 89 fa\ne8 12 a7 fe ff\n42 c6 84 3b 08 01 00 00 00\n4c 89 7b 60\n4c 89 73 50\n49 8b 46 20\n48 89 43 38\nc7 43 40 00 00 00 00\n48 c7 43 18 00 00 00 00\n66 c7 43 72 00 00\n66 c7 43 74 03 00\n0f 57 c0\n0f 11 43 20\neb 02\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p2343
S'.text:0000000000418480\n.text:0000000000418482\n.text:0000000000418484\n.text:0000000000418486\n.text:0000000000418487\n.text:0000000000418488\n.text:000000000041848b\n.text:000000000041848e\n.text:0000000000418491\n.text:0000000000418498\n.text:000000000041849c\n.text:00000000004184a1\n.text:00000000004184a4\n.text:00000000004184a7\n.text:00000000004184a9\n.text:00000000004184ac\n.text:00000000004184b3\n.text:00000000004184b6\n.text:00000000004184b9\n.text:00000000004184be\n.text:00000000004184c7\n.text:00000000004184cb\n.text:00000000004184cf\n.text:00000000004184d3\n.text:00000000004184d7\n.text:00000000004184de\n.text:00000000004184e6\n.text:00000000004184ec\n.text:00000000004184f2\n.text:00000000004184f5\n.text:00000000004184f9\n.text:00000000004184fb\n.text:00000000004184fd\n.text:0000000000418500\n.text:0000000000418504\n.text:0000000000418505\n.text:0000000000418507\n.text:0000000000418509\n.text:000000000041850b\n'
p2344
tp2345
sS'__freading'
p2346
(S'\n__stdcall __freading()\n'
p2347
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_0062d320)();\u000a  return;\u000a}\u000a\u000a
p2348
S'JMP qword ptr [0x0062d320]\n'
p2349
S'ff 25 1a a6 22 00\n'
p2350
S'.plt:0000000000402d00\n'
p2351
tp2352
sS'checked_fflush'
p2353
(S'\n__stdcall checked_fflush(format_val * dest)\n'
p2354
V\u000avoid checked_fflush(format_val *dest)\u000a\u000a{\u000a  int iVar1;\u000a  uint *puVar2;\u000a  \u000a  iVar1 = rpl_fflush(dest->stream);\u000a  if (iVar1 != 0) {\u000a    puVar2 = (uint *)__errno_location();\u000a    nonfatal_nontarget_file_error((char *)(ulong)*puVar2);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p2355
S'PUSH RBX\nMOV RBX,RDI\nMOV RDI,qword ptr [RBX + 0x8]\nCALL 0x00417fa0\nTEST EAX,EAX\nJZ 0x0040a002\nCALL 0x00402770\nMOV EDI,dword ptr [RAX]\nMOV RSI,qword ptr [RBX + 0x10]\nPOP RBX\nJMP 0x00407ff0\nPOP RBX\nRET\n'
p2356
S'53\n48 89 fb\n48 8b 7b 08\ne8 b3 df 00 00\n85 c0\n74 11\ne8 7a 87 ff ff\n8b 38\n48 8b 73 10\n5b\ne9 ee df ff ff\n5b\nc3\n'
p2357
S'.text:0000000000409fe0\n.text:0000000000409fe1\n.text:0000000000409fe4\n.text:0000000000409fe8\n.text:0000000000409fed\n.text:0000000000409fef\n.text:0000000000409ff1\n.text:0000000000409ff6\n.text:0000000000409ff8\n.text:0000000000409ffc\n.text:0000000000409ffd\n.text:000000000040a002\n.text:000000000040a003\n'
p2358
tp2359
sS'estimate_fstype_success_rate'
p2360
(S'\n__stdcall estimate_fstype_success_rate(char * fsname)\n'
p2361
V\u000afloat estimate_fstype_success_rate(char *fsname)\u000a\u000a{\u000a  int iVar1;\u000a  char *__s2;\u000a  float fVar2;\u000a  stat sStack152;\u000a  \u000a  iVar1 = stat("/",(stat *)&sStack152);\u000a  fVar2 = DAT_0041d344;\u000a  if (iVar1 == 0) {\u000a    __s2 = filesystem_type(&sStack152,"/");\u000a    iVar1 = strcmp(fsname,__s2);\u000a    fVar2 = *(float *)(&DAT_0041fbf8 + (ulong)(iVar1 == 0) * 4);\u000a  }\u000a  return fVar2;\u000a}\u000a\u000a
p2362
S'PUSH RBX\nSUB RSP,0x90\nMOV RBX,RDI\nMOV RSI,RSP\nMOV EDI,0x41d1f6\nCALL 0x0041c490\nTEST EAX,EAX\nJZ 0x0040d286\nMOVSS XMM0,dword ptr [0x0041d344]\nJMP 0x0040d2ae\nMOV RDI,RSP\nMOV ESI,0x41d1f6\nCALL 0x0040a290\nMOV RDI,RBX\nMOV RSI,RAX\nCALL 0x00402b40\nXOR ECX,ECX\nTEST EAX,EAX\nSETZ CL\nMOVSS XMM0,dword ptr [0x41fbf8 + RCX*0x4]\nADD RSP,0x90\nPOP RBX\nRET\n'
p2363
S'53\n48 81 ec 90 00 00 00\n48 89 fb\n48 89 e6\nbf f6 d1 41 00\ne8 18 f2 00 00\n85 c0\n74 0a\nf3 0f 10 05 c0 00 01 00\neb 28\n48 89 e7\nbe f6 d1 41 00\ne8 fd cf ff ff\n48 89 df\n48 89 c6\ne8 a2 58 ff ff\n31 c9\n85 c0\n0f 94 c1\nf3 0f 10 04 8d f8 fb 41 00\n48 81 c4 90 00 00 00\n5b\nc3\n'
p2364
S'.text:000000000040d260\n.text:000000000040d261\n.text:000000000040d268\n.text:000000000040d26b\n.text:000000000040d26e\n.text:000000000040d273\n.text:000000000040d278\n.text:000000000040d27a\n.text:000000000040d27c\n.text:000000000040d284\n.text:000000000040d286\n.text:000000000040d289\n.text:000000000040d28e\n.text:000000000040d293\n.text:000000000040d296\n.text:000000000040d299\n.text:000000000040d29e\n.text:000000000040d2a0\n.text:000000000040d2a2\n.text:000000000040d2a5\n.text:000000000040d2ae\n.text:000000000040d2b5\n.text:000000000040d2b6\n'
p2365
tp2366
sS'xcharalloc'
p2367
(S'\n__stdcall xcharalloc(size_t n)\n'
p2368
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p2369
S'JMP 0x00417220\n'
p2370
S'e9 2b ff ff ff\n'
p2371
S'.text:00000000004172f0\n'
p2372
tp2373
sS'isatty'
p2374
(S'\n__stdcall isatty(int __fd)\n'
p2375
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint isatty(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_isatty_0062d0b0)();\u000a  return iVar1;\u000a}\u000a\u000a
p2376
S'JMP qword ptr [0x0062d0b0]\n'
p2377
S'ff 25 8a a8 22 00\n'
p2378
S'.plt:0000000000402820\n'
p2379
tp2380
sS'get_regex_type_synonym'
p2381
(S'\n__stdcall get_regex_type_synonym()\n'
p2382
V\u000aint get_regex_type_synonym(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int *piVar2;\u000a  uint in_EDI;\u000a  \u000a  if ((in_EDI < 0xd) && (in_EDI != 0)) {\u000a    uVar1 = 0;\u000a    piVar2 = &regex_map[0].option_val;\u000a    do {\u000a      if (regex_map[(ulong)in_EDI].option_val == *piVar2) {\u000a        return (int)uVar1;\u000a      }\u000a      uVar1 = uVar1 + 1;\u000a      piVar2 = piVar2 + 4;\u000a    } while (uVar1 < in_EDI);\u000a  }\u000a  return -1;\u000a}\u000a\u000a
p2383
S'MOV EAX,0xffffffff\nCMP EDI,0xc\nJA 0x0040fa1e\nTEST EDI,EDI\nJZ 0x0040fa1e\nMOV ECX,EDI\nSHL RCX,0x4\nMOV EDX,dword ptr [0x62dcdc + RCX]\nXOR ECX,ECX\nMOV ESI,0x62dcdc\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP EDX,dword ptr [RSI]\nJZ 0x0040fa1f\nINC ECX\nADD RSI,0x10\nCMP ECX,EDI\nJC 0x0040fa10\nRET\nMOV EAX,ECX\nRET\n'
p2384
S'b8 ff ff ff ff\n83 ff 0c\n77 34\n85 ff\n74 30\n89 f9\n48 c1 e1 04\n8b 91 dc dc 62 00\n31 c9\nbe dc dc 62 00\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n3b 16\n74 0b\nff c1\n48 83 c6 10\n39 f9\n72 f2\nc3\n89 c8\nc3\n'
p2385
S'.text:000000000040f9e0\n.text:000000000040f9e5\n.text:000000000040f9e8\n.text:000000000040f9ea\n.text:000000000040f9ec\n.text:000000000040f9ee\n.text:000000000040f9f0\n.text:000000000040f9f4\n.text:000000000040f9fa\n.text:000000000040f9fc\n.text:000000000040fa01\n.text:000000000040fa10\n.text:000000000040fa12\n.text:000000000040fa14\n.text:000000000040fa16\n.text:000000000040fa1a\n.text:000000000040fa1c\n.text:000000000040fa1e\n.text:000000000040fa1f\n.text:000000000040fa21\n'
p2386
tp2387
sS'c_isalnum'
p2388
(S'\n__stdcall c_isalnum()\n'
p2389
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p2390
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x0041b95b\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x0041b95b\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x0041b95a\nXOR EAX,EAX\nRET\n'
p2391
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p2392
S'.text:000000000041b940\n.text:000000000041b942\n.text:000000000041b945\n.text:000000000041b948\n.text:000000000041b94a\n.text:000000000041b954\n.text:000000000041b958\n.text:000000000041b95a\n.text:000000000041b95b\n.text:000000000041b95e\n.text:000000000041b961\n.text:000000000041b963\n.text:000000000041b965\n'
p2393
tp2394
sS'exec_cb'
p2395
(S'\n__stdcall exec_cb(void * context)\n'
p2396
V\u000aint exec_cb(void *context)\u000a\u000a{\u000a  bc_do_exec((buildcmd_control *)((long)context + 8),(buildcmd_state *)((long)context + 0x60));\u000a  return 0;\u000a}\u000a\u000a
p2397
S'PUSH RAX\nLEA RAX,[RDI + 0x8]\nLEA RSI,[RDI + 0x60]\nMOV RDI,RAX\nCALL 0x0040def0\nXOR EAX,EAX\nPOP RCX\nRET\n'
p2398
S'50\n48 8d 47 08\n48 8d 77 60\n48 89 c7\ne8 9f 54 00 00\n31 c0\n59\nc3\n'
p2399
S'.text:0000000000408a40\n.text:0000000000408a41\n.text:0000000000408a45\n.text:0000000000408a49\n.text:0000000000408a4c\n.text:0000000000408a51\n.text:0000000000408a53\n.text:0000000000408a54\n'
p2400
tp2401
sS'x2nrealloc'
p2402
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p2403
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p2404
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x004172bc\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x004172e9\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x004172da\nTEST RCX,RCX\nJNZ 0x004172da\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00417260\nPUSH RAX\nCALL 0x004173b0\n'
p2405
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p2406
S'.text:0000000000417290\n.text:0000000000417293\n.text:0000000000417296\n.text:0000000000417299\n.text:000000000041729b\n.text:00000000004172a5\n.text:00000000004172a7\n.text:00000000004172aa\n.text:00000000004172ad\n.text:00000000004172af\n.text:00000000004172b2\n.text:00000000004172b5\n.text:00000000004172ba\n.text:00000000004172bc\n.text:00000000004172bf\n.text:00000000004172c1\n.text:00000000004172c6\n.text:00000000004172c8\n.text:00000000004172cb\n.text:00000000004172cd\n.text:00000000004172d4\n.text:00000000004172d7\n.text:00000000004172da\n.text:00000000004172dd\n.text:00000000004172e1\n.text:00000000004172e4\n.text:00000000004172e9\n.text:00000000004172ea\n'
p2407
tp2408
sS'quotearg_n_options'
p2409
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p2410
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p2411
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00402770\nTEST R12D,R12D\nJS 0x00416251\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x0062dda8]\nCMP dword ptr [0x0062ddb0],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x0041616b\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x62ddb8\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00417260\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x0062dda8],R15\nJNZ 0x00416132\nMOVUPS XMM0,xmmword ptr [0x0062ddb8]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x0062ddb0]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00402a80\nMOV dword ptr [0x0062ddb0],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x004152c0\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x004161cd\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x0041623b\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x62e6d0\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x004161f8\nCALL 0x00402710\nMOV RDI,R15\nCALL 0x004172f0\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x004152c0\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00402750\n'
p2412
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 b1 c6 fe ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 ce 7c 21 00\n44 39 25 cf 7c 21 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd b8 dd 62 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 48 11 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 83 7c 21 00\n75 0b\n0f 10 05 8a 7c 21 00\n41 0f 11 07\n8b 05 78 7c 21 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 2d c9 fe ff\n89 1d 57 7c 21 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 d0 e6 62 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 18 c5 fe ff\n4c 89 ff\ne8 f0 10 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 fa c4 fe ff\n'
p2413
S'.text:00000000004160a0\n.text:00000000004160a1\n.text:00000000004160a3\n.text:00000000004160a5\n.text:00000000004160a7\n.text:00000000004160a9\n.text:00000000004160aa\n.text:00000000004160ae\n.text:00000000004160b1\n.text:00000000004160b4\n.text:00000000004160b7\n.text:00000000004160ba\n.text:00000000004160bf\n.text:00000000004160c2\n.text:00000000004160c8\n.text:00000000004160cd\n.text:00000000004160cf\n.text:00000000004160d3\n.text:00000000004160da\n.text:00000000004160e1\n.text:00000000004160e6\n.text:00000000004160eb\n.text:00000000004160f0\n.text:00000000004160f2\n.text:00000000004160f7\n.text:00000000004160fa\n.text:00000000004160fd\n.text:0000000000416103\n.text:0000000000416105\n.text:0000000000416108\n.text:000000000041610c\n.text:000000000041610f\n.text:0000000000416113\n.text:0000000000416118\n.text:000000000041611b\n.text:000000000041611e\n.text:0000000000416125\n.text:0000000000416127\n.text:000000000041612e\n.text:0000000000416132\n.text:0000000000416138\n.text:000000000041613b\n.text:000000000041613f\n.text:0000000000416142\n.text:0000000000416145\n.text:0000000000416149\n.text:000000000041614b\n.text:000000000041614e\n.text:0000000000416153\n.text:0000000000416159\n.text:000000000041615c\n.text:0000000000416161\n.text:0000000000416166\n.text:000000000041616b\n.text:000000000041616e\n.text:0000000000416172\n.text:0000000000416176\n.text:000000000041617b\n.text:000000000041617f\n.text:0000000000416183\n.text:0000000000416187\n.text:000000000041618b\n.text:000000000041618f\n.text:0000000000416194\n.text:0000000000416197\n.text:000000000041619a\n.text:000000000041619d\n.text:00000000004161a2\n.text:00000000004161a5\n.text:00000000004161a8\n.text:00000000004161ab\n.text:00000000004161ac\n.text:00000000004161b1\n.text:00000000004161b5\n.text:00000000004161b8\n.text:00000000004161bb\n.text:00000000004161bd\n.text:00000000004161c2\n.text:00000000004161c6\n.text:00000000004161cb\n.text:00000000004161cd\n.text:00000000004161d1\n.text:00000000004161d6\n.text:00000000004161d9\n.text:00000000004161dc\n.text:00000000004161e1\n.text:00000000004161e6\n.text:00000000004161e9\n.text:00000000004161ee\n.text:00000000004161f1\n.text:00000000004161f3\n.text:00000000004161f8\n.text:00000000004161fb\n.text:0000000000416200\n.text:0000000000416203\n.text:0000000000416206\n.text:000000000041620b\n.text:000000000041620e\n.text:0000000000416212\n.text:0000000000416215\n.text:0000000000416218\n.text:000000000041621d\n.text:0000000000416222\n.text:0000000000416227\n.text:000000000041622a\n.text:000000000041622d\n.text:000000000041622e\n.text:0000000000416233\n.text:0000000000416237\n.text:000000000041623b\n.text:000000000041623f\n.text:0000000000416242\n.text:0000000000416246\n.text:0000000000416247\n.text:0000000000416249\n.text:000000000041624b\n.text:000000000041624d\n.text:000000000041624f\n.text:0000000000416250\n.text:0000000000416251\n'
p2414
tp2415
sS'strcmp'
p2416
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p2417
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_0062d240)();\u000a  return iVar1;\u000a}\u000a\u000a
p2418
S'JMP qword ptr [0x0062d240]\n'
p2419
S'ff 25 fa a6 22 00\n'
p2420
S'.plt:0000000000402b40\n'
p2421
tp2422
sS'complain_about_leaky_fds'
p2423
(S'\n__stdcall complain_about_leaky_fds()\n'
p2424
V\u000avoid complain_about_leaky_fds(void)\u000a\u000a{\u000a  uint uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = find_first_leaked_fd(non_cloexec_fds,num_cloexec_fds);\u000a  if ((int)uVar1 < 0) {\u000a    return;\u000a  }\u000a  uVar2 = dcgettext(0,\u000a                    "File descriptor %d will leak; please report this as a bug, remembering to include a detailed description of the simplest way to reproduce this problem."\u000a                    ,5);\u000a  error(0,0,uVar2,(ulong)uVar1);\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("no_leaks","fdleak.c",0x185,"void complain_about_leaky_fds(void)");\u000a}\u000a\u000a
p2425
S'PUSH RBX\nMOV RDI,qword ptr [0x0062e638]\nMOV RSI,qword ptr [0x0062e640]\nCALL 0x0040eac0\nMOV EBX,EAX\nTEST EBX,EBX\nJNS 0x0040ea7c\nPOP RBX\nRET\nXOR EDI,EDI\nMOV ESI,0x422033\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV ECX,EBX\nCALL 0x00402d90\nMOV EDI,0x4220cb\nMOV ESI,0x4220d4\nMOV EDX,0x185\nMOV ECX,0x4220dd\nCALL 0x00402a40\n'
p2426
S'53\n48 8b 3d d0 fb 21 00\n48 8b 35 d1 fb 21 00\ne8 4c 00 00 00\n89 c3\n85 db\n79 02\n5b\nc3\n31 ff\nbe 33 20 42 00\nba 05 00 00 00\ne8 83 3e ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\n89 d9\ne8 f0 42 ff ff\nbf cb 20 42 00\nbe d4 20 42 00\nba 85 01 00 00\nb9 dd 20 42 00\ne8 87 3f ff ff\n'
p2427
S'.text:000000000040ea60\n.text:000000000040ea61\n.text:000000000040ea68\n.text:000000000040ea6f\n.text:000000000040ea74\n.text:000000000040ea76\n.text:000000000040ea78\n.text:000000000040ea7a\n.text:000000000040ea7b\n.text:000000000040ea7c\n.text:000000000040ea7e\n.text:000000000040ea83\n.text:000000000040ea88\n.text:000000000040ea8d\n.text:000000000040ea90\n.text:000000000040ea92\n.text:000000000040ea94\n.text:000000000040ea96\n.text:000000000040ea99\n.text:000000000040ea9b\n.text:000000000040eaa0\n.text:000000000040eaa5\n.text:000000000040eaaa\n.text:000000000040eaaf\n.text:000000000040eab4\n'
p2428
tp2429
sS'hash_get_max_bucket_length'
p2430
(S'\n__stdcall hash_get_max_bucket_length(Hash_table * table)\n'
p2431
V\u000asize_t hash_get_max_bucket_length(Hash_table *table)\u000a\u000a{\u000a  ulong uVar1;\u000a  hash_entry *phVar2;\u000a  ulong uVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar2 = table->bucket;\u000a  if (phVar2 < table->bucket_limit) {\u000a    uVar1 = 0;\u000a    do {\u000a      if (phVar2->data != (void *)0x0) {\u000a        uVar3 = 0;\u000a        phVar4 = phVar2;\u000a        do {\u000a          phVar4 = phVar4->next;\u000a          uVar3 = uVar3 + 1;\u000a        } while (phVar4 != (hash_entry *)0x0);\u000a        if (uVar1 < uVar3) {\u000a          uVar1 = uVar3;\u000a        }\u000a      }\u000a      phVar2 = phVar2 + 1;\u000a    } while (phVar2 < table->bucket_limit);\u000a    return uVar1;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p2432
S'MOV RCX,qword ptr [RDI]\nCMP RCX,qword ptr [RDI + 0x8]\nJNC 0x0041043d\nMOV RDX,qword ptr [RDI + 0x8]\nXOR EAX,EAX\nNOP\nCMP qword ptr [RCX],0x0\nJZ 0x00410433\nXOR ESI,ESI\nMOV RDI,RCX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RDI + 0x8]\nINC RSI\nTEST RDI,RDI\nJNZ 0x00410420\nCMP RSI,RAX\nCMOVA RAX,RSI\nADD RCX,0x10\nCMP RCX,RDX\nJC 0x00410410\nRET\nXOR EAX,EAX\nRET\n'
p2433
S'48 8b 0f\n48 3b 4f 08\n73 34\n48 8b 57 08\n31 c0\n90\n48 83 39 00\n74 1d\n31 f6\n48 89 cf\n0f 1f 44 00 00\n48 8b 7f 08\n48 ff c6\n48 85 ff\n75 f4\n48 39 c6\n48 0f 47 c6\n48 83 c1 10\n48 39 d1\n72 d4\nc3\n31 c0\nc3\n'
p2434
S'.text:0000000000410400\n.text:0000000000410403\n.text:0000000000410407\n.text:0000000000410409\n.text:000000000041040d\n.text:000000000041040f\n.text:0000000000410410\n.text:0000000000410414\n.text:0000000000410416\n.text:0000000000410418\n.text:000000000041041b\n.text:0000000000410420\n.text:0000000000410424\n.text:0000000000410427\n.text:000000000041042a\n.text:000000000041042c\n.text:000000000041042f\n.text:0000000000410433\n.text:0000000000410437\n.text:000000000041043a\n.text:000000000041043c\n.text:000000000041043d\n.text:000000000041043f\n'
p2435
tp2436
sS'strtod'
p2437
(S'\n__stdcall strtod(char * __nptr, char * * __endptr)\n'
p2438
V\u000a/* WARNING: Switch with 1 destination removed at 0x00402840 */\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000adouble strtod(char *__nptr,char **__endptr)\u000a\u000a{\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p2439
S'JMP qword ptr [0x0062d0c0]\n'
p2440
S'ff 25 7a a8 22 00\n'
p2441
S'.plt:0000000000402840\n'
p2442
tp2443
sS'setfscreatecon'
p2444
(S'\n__stdcall setfscreatecon(security_context_t con)\n'
p2445
V\u000aint setfscreatecon(security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p2446
S'PUSH RAX\nCALL 0x00402770\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p2447
S'50\ne8 ea bc fe ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p2448
S'.text:0000000000416a80\n.text:0000000000416a81\n.text:0000000000416a86\n.text:0000000000416a8c\n.text:0000000000416a91\n.text:0000000000416a92\n'
p2449
tp2450
sS'gnu_dev_major'
p2451
(S'\n__stdcall gnu_dev_major(ulonglong __dev)\n'
p2452
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000auint gnu_dev_major(ulonglong __dev)\u000a\u000a{\u000a  uint uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_gnu_dev_major_0062d330)();\u000a  return uVar1;\u000a}\u000a\u000a
p2453
S'JMP qword ptr [0x0062d330]\n'
p2454
S'ff 25 0a a6 22 00\n'
p2455
S'.plt:0000000000402d20\n'
p2456
tp2457
sS'symlink_loop'
p2458
(S'\n__stdcall symlink_loop(char * name)\n'
p2459
V\u000a_Bool symlink_loop(char *name)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  bool bVar3;\u000a  stat stbuf;\u000a  stat local_90;\u000a  \u000a  iVar1 = (*options.xstat)(name,&local_90);\u000a  if (iVar1 == 0) {\u000a    bVar3 = false;\u000a  }\u000a  else {\u000a    piVar2 = __errno_location();\u000a    bVar3 = *piVar2 == 0x28;\u000a  }\u000a  return (_Bool)bVar3;\u000a}\u000a\u000a
p2460
S'SUB RSP,0x98\nLEA RSI,[RSP + 0x8]\nCALL qword ptr [0x0062f090]\nTEST EAX,EAX\nJZ 0x00403ba3\nCALL 0x00402770\nCMP dword ptr [RAX],0x28\nSETZ AL\nJMP 0x00403ba5\nXOR EAX,EAX\nADD RSP,0x98\nRET\n'
p2461
S'48 81 ec 98 00 00 00\n48 8d 74 24 08\nff 15 fe b4 22 00\n85 c0\n74 0d\ne8 d5 eb ff ff\n83 38 28\n0f 94 c0\neb 02\n31 c0\n48 81 c4 98 00 00 00\nc3\n'
p2462
S'.text:0000000000403b80\n.text:0000000000403b87\n.text:0000000000403b8c\n.text:0000000000403b92\n.text:0000000000403b94\n.text:0000000000403b96\n.text:0000000000403b9b\n.text:0000000000403b9e\n.text:0000000000403ba1\n.text:0000000000403ba3\n.text:0000000000403ba5\n.text:0000000000403bac\n'
p2463
tp2464
sS'do_fprintf'
p2465
(S'\n__stdcall do_fprintf(format_val * dest, segment * segment, char * pathname, stat * stat_buf)\n'
p2466
V\u000avoid do_fprintf(format_val *dest,segment *segment,char *pathname,stat *stat_buf)\u000a\u000a{\u000a  SegmentKind SVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  char *s;\u000a  long lVar4;\u000a  char *s_00;\u000a  passwd *ppVar5;\u000a  undefined8 uVar6;\u000a  uint *puVar7;\u000a  uintmax_t to_block_size;\u000a  uint uVar8;\u000a  undefined *puVar9;\u000a  code *pcVar10;\u000a  security_context_t *ppcVar11;\u000a  ulong uVar12;\u000a  __dev_t n;\u000a  size_t __n;\u000a  char hbuf [652];\u000a  security_context_t local_2c8;\u000a  undefined local_2be;\u000a  \u000a  ppcVar11 = &local_2c8;\u000a  SVar1 = segment->segkind;\u000a  if (SVar1 != KIND_FORMAT) {\u000a    if (SVar1 == KIND_STOP) {\u000a      checked_fwrite(segment->text,(long)segment->text_len,dest);\u000a      checked_fflush(dest);\u000a      return;\u000a    }\u000a    if (SVar1 != KIND_PLAIN) {\u000a      return;\u000a    }\u000aswitchD_00409783_caseD_25:\u000a    checked_fwrite(segment->text,(long)segment->text_len,dest);\u000a    return;\u000a  }\u000a  switch(segment->format_char[0]) {\u000a  case 0:\u000a    puVar9 = (undefined *)dcgettext(0,"error: %s at end of format string",5);\u000a    uVar6 = 1;\u000a    uVar12 = 0;\u000a    s_00 = "%";\u000a    goto LAB_004097ac;\u000a  case '%':\u000a    goto switchD_00409783_caseD_25;\u000a  case 'D':\u000a    s_00 = segment->text;\u000a    n = stat_buf->st_dev;\u000a    goto LAB_00409b3a;\u000a  case 'F':\u000a    s_00 = segment->text;\u000a    s = filesystem_type(stat_buf,pathname);\u000a    checked_print_quoted(dest,s_00,s);\u000a    break;\u000a  case 'G':\u000a    goto switchD_00409783_caseD_47;\u000a  case 'H':\u000a    s_00 = (char *)xmalloc((long)state.starting_path_length + 1);\u000a    __n = SEXT48(state.starting_path_length);\u000a    memcpy(s_00,pathname,__n);\u000a    s_00[__n] = 0;\u000a    checked_fprintf(dest,segment->text,s_00);\u000a    goto LAB_00409c55;\u000a  case 'M':\u000a    filemodestring(stat_buf,(char *)&local_2c8);\u000a    local_2be = 0;\u000a    s_00 = segment->text;\u000a    goto LAB_00409b5d;\u000a  case 'P':\u000a    if (state.curdepth < 1) {\u000a      s = "";\u000a    }\u000a    else {\u000a      lVar4 = (long)state.starting_path_length;\u000a      s = pathname + lVar4 + 1;\u000a      if (pathname[lVar4] != '/') {\u000a        s = pathname + lVar4;\u000a      }\u000a    }\u000a    s_00 = segment->text;\u000a    goto LAB_00409bfc;\u000a  case 'S':\u000a    s_00 = segment->text;\u000a    file_sparseness(stat_buf);\u000a    checked_fprintf(dest,s_00);\u000a    break;\u000a  case 'U':\u000a    goto switchD_00409783_caseD_55;\u000a  case 'Y':\u000a    if ((stat_buf->st_mode & 0xf000) != 0xa000) {\u000a      s_00 = segment->text;\u000a      ppcVar11 = (security_context_t *)mode_to_filetype();\u000a      goto LAB_00409b5d;\u000a    }\u000a    _Var2 = following_links();\u000a    pcVar10 = optionl_stat;\u000a    if (_Var2 != false) {\u000a      pcVar10 = optionp_stat;\u000a    }\u000a    iVar3 = (*pcVar10)(state.rel_pathname,&local_2c8,pcVar10);\u000a    s_00 = segment->text;\u000a    if (iVar3 == 0) {\u000a      ppcVar11 = (security_context_t *)mode_to_filetype();\u000a      goto LAB_00409b5d;\u000a    }\u000a    puVar7 = (uint *)__errno_location();\u000a    if (*puVar7 == 0x28) {\u000a      ppcVar11 = (security_context_t *)0x41e863;\u000a      goto LAB_00409b5d;\u000a    }\u000a    if (*puVar7 == 2) {\u000a      ppcVar11 = (security_context_t *)0x41fafb;\u000a      goto LAB_00409b5d;\u000a    }\u000a    checked_fprintf(dest,s_00,&DAT_004210f1);\u000a    uVar8 = *puVar7;\u000a    s_00 = safely_quote_err_filename((char *)0x0);\u000a    uVar6 = 0;\u000a    puVar9 = &DAT_0042542f;\u000a    uVar12 = (ulong)uVar8;\u000aLAB_004097ac:\u000a    error(uVar6,uVar12,puVar9,s_00);\u000a    break;\u000a  case 'Z':\u000a    iVar3 = (*options.x_getfilecon)(state.cwd_dir_fd,state.rel_pathname,&local_2c8);\u000a    if (iVar3 < 0) {\u000a      checked_fprintf(dest,segment->text,0x41e69a);\u000a      puVar7 = (uint *)__errno_location();\u000a      uVar8 = *puVar7;\u000a      uVar6 = dcgettext(0,"getfilecon failed: %s",5);\u000a      s_00 = safely_quote_err_filename((char *)0x0);\u000a      error(0,(ulong)uVar8,uVar6,s_00);\u000a      state.exit_status = 1;\u000a    }\u000a    else {\u000a      checked_fprintf(dest,segment->text,local_2c8);\u000a      freecon(local_2c8);\u000a    }\u000a    break;\u000a  case 'a':\u000a    s_00 = segment->text;\u000a    get_stat_atime(stat_buf);\u000a    goto LAB_00409afb;\u000a  case 'b':\u000a    s_00 = segment->text;\u000a    n = stat_buf->st_blocks;\u000a    to_block_size = 0x200;\u000a    goto LAB_00409b4a;\u000a  case 'c':\u000a    s_00 = segment->text;\u000a    get_stat_ctime(stat_buf);\u000a    goto LAB_00409afb;\u000a  case 'd':\u000a    s_00 = segment->text;\u000a    uVar8 = state.curdepth;\u000a    goto LAB_00409ab9;\u000a  case 'f':\u000a    s_00 = base_name(pathname);\u000a    checked_print_quoted(dest,segment->text,s_00);\u000a    free(s_00);\u000a    break;\u000a  case 'g':\u000a    ppVar5 = (passwd *)getgrgid(stat_buf->st_gid);\u000a    if (ppVar5 != (passwd *)0x0) {\u000aLAB_00409b17:\u000a      segment->text[(long)segment->text_len] = 's';\u000a      s_00 = segment->text;\u000a      ppcVar11 = (security_context_t *)ppVar5->pw_name;\u000a      goto LAB_00409b5d;\u000a    }\u000a    goto switchD_00409783_caseD_47;\u000a  case 'h':\u000a    s_00 = strrchr(pathname,0x2f);\u000a    if (s_00 != (char *)0x0) {\u000a      s = (char *)__strdup(pathname);\u000a      s[(long)(s_00 + -(long)pathname)] = 0;\u000a      checked_print_quoted(dest,segment->text,s);\u000a      free(s);\u000a      return;\u000a    }\u000a    s_00 = segment->text;\u000a    s = \u000a        "warning: Unix filenames usually don\u005c't contain slashes (though pathnames do).  That means that \u005c'%s %s\u005c' will probably evaluate to false all the time on this system.  You might find the \u005c'-wholename\u005c' test more useful, or perhaps \u005c'-samefile\u005c'.  Alternatively, if you are using GNU grep, you could use \u005c'find ... -print0 | grep -FzZ %s\u005c'."\u000a        + 0x148;\u000aLAB_00409bfc:\u000a    checked_print_quoted(dest,s_00,s);\u000a    break;\u000a  case 'i':\u000a    s_00 = segment->text;\u000a    n = stat_buf->st_ino;\u000a    goto LAB_00409b3a;\u000a  case 'k':\u000a    s_00 = segment->text;\u000a    n = stat_buf->st_blocks;\u000a    to_block_size = 0x200;\u000a    goto LAB_00409b4a;\u000a  case 'l':\u000a    if ((stat_buf->st_mode & 0xf000) == 0xa000) {\u000a      s_00 = areadlinkat((char *)(ulong)(uint)state.cwd_dir_fd);\u000a      if (s_00 != (char *)0x0) {\u000a        checked_print_quoted(dest,segment->text,s_00);\u000a        goto LAB_00409c55;\u000a      }\u000a      puVar7 = (uint *)__errno_location();\u000a      nonfatal_target_file_error((char *)(ulong)*puVar7);\u000a      state.exit_status = 1;\u000a    }\u000a    checked_print_quoted(dest,segment->text,"");\u000a    s_00 = (char *)0x0;\u000aLAB_00409c55:\u000a    free(s_00);\u000a    break;\u000a  case 'm':\u000a    s_00 = segment->text;\u000a    uVar8 = stat_buf->st_mode & 0xfff;\u000aLAB_00409ab9:\u000a    checked_fprintf(dest,s_00,(ulong)uVar8);\u000a    break;\u000a  case 'n':\u000a    s_00 = segment->text;\u000a    n = stat_buf->st_nlink;\u000a    goto LAB_00409b3a;\u000a  case 'p':\u000a    checked_print_quoted(dest,segment->text,pathname);\u000a    break;\u000a  case 's':\u000a    s_00 = segment->text;\u000a    n = stat_buf->st_size;\u000a    goto LAB_00409b3a;\u000a  case 't':\u000a    s_00 = segment->text;\u000a    get_stat_mtime(stat_buf);\u000aLAB_00409afb:\u000a    ppcVar11 = (security_context_t *)ctime_format();\u000a    goto LAB_00409b5d;\u000a  case 'u':\u000a    ppVar5 = getpwuid(stat_buf->st_uid);\u000a    if (ppVar5 != (passwd *)0x0) goto LAB_00409b17;\u000a    goto switchD_00409783_caseD_55;\u000a  case 'y':\u000a    s_00 = segment->text;\u000a    ppcVar11 = (security_context_t *)mode_to_filetype();\u000a    goto LAB_00409b5d;\u000a  }\u000a  return;\u000aswitchD_00409783_caseD_47:\u000a  s_00 = segment->text;\u000a  n = (__dev_t)stat_buf->st_gid;\u000a  goto LAB_00409b3a;\u000aswitchD_00409783_caseD_55:\u000a  s_00 = segment->text;\u000a  n = (__dev_t)stat_buf->st_uid;\u000aLAB_00409b3a:\u000a  to_block_size = 1;\u000aLAB_00409b4a:\u000a  ppcVar11 = (security_context_t *)human_readable(n,(char *)&local_2c8,0,to_block_size);\u000aLAB_00409b5d:\u000a  checked_fprintf(dest,s_00,ppcVar11);\u000a  return;\u000a}\u000a\u000a
p2467
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x298\nMOV R12,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R14,RDI\nMOV EAX,dword ptr [RBX]\nCMP EAX,0x2\nJZ 0x00409776\nCMP EAX,0x1\nJZ 0x004097b6\nTEST EAX,EAX\nJNZ 0x00409b62\nMOV RDI,qword ptr [RBX + 0x8]\nMOVSXD RSI,dword ptr [RBX + 0x10]\nMOV RDX,R14\nCALL 0x00409fa0\nJMP 0x00409b62\nMOVSX EAX,byte ptr [RBX + 0x4]\nCMP EAX,0x79\nJA 0x00409b62\nJMP qword ptr [0x41f160 + RAX*0x8]\nXOR EDI,EDI\nMOV ESI,0x41f780\nMOV EDX,0x5\nCALL 0x00402910\nMOV RDX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nMOV ECX,0x41f8bf\nXOR EAX,EAX\nCALL 0x00402d90\nJMP 0x00409b62\nMOV RDI,qword ptr [RBX + 0x8]\nMOVSXD RSI,dword ptr [RBX + 0x10]\nMOV RDX,R14\nCALL 0x00409fa0\nMOV RDI,R14\nCALL 0x00409fe0\nJMP 0x00409b62\nMOV RBX,qword ptr [RBX + 0x8]\nMOV RDI,qword ptr [R12]\nJMP 0x00409b3a\nMOV RBX,qword ptr [RBX + 0x8]\nMOV RDI,R12\nMOV RSI,R15\nCALL 0x0040a290\nMOV RDI,R14\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x0040a1f0\nJMP 0x00409b62\nMOVSXD RDI,dword ptr [0x0062f01c]\nINC RDI\nCALL 0x00417220\nMOV R12,RAX\nMOVSXD R13,dword ptr [0x0062f01c]\nMOV RDI,R12\nMOV RSI,R15\nMOV RDX,R13\nCALL 0x00402bd0\nMOV byte ptr [R12 + R13*0x1],0x0\nMOV RSI,qword ptr [RBX + 0x8]\nXOR EAX,EAX\nMOV RDI,R14\nMOV RDX,R12\nCALL 0x00409470\nJMP 0x00409c55\nMOV R15,RSP\nMOV RDI,R12\nMOV RSI,R15\nCALL 0x00410330\nMOV byte ptr [RSP + 0xa],0x0\nMOV RSI,qword ptr [RBX + 0x8]\nXOR EAX,EAX\nMOV RDI,R14\nMOV RDX,R15\nJMP 0x00409b5d\nCMP dword ptr [0x0062f000],0x0\nJLE 0x00409b94\nMOVSXD RAX,dword ptr [0x0062f01c]\nLEA RCX,[R15 + RAX*0x1]\nCMP byte ptr [R15 + RAX*0x1],0x2f\nLEA RDX,[R15 + RAX*0x1 + 0x1]\nCMOVNZ RDX,RCX\nJMP 0x00409b99\nMOV RBX,qword ptr [RBX + 0x8]\nMOV RDI,R12\nCALL 0x0040a230\nMOV AL,0x1\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00409470\nJMP 0x00409b62\nMOV EDI,0xf000\nAND EDI,dword ptr [R12 + 0x18]\nCMP EDI,0xa000\nJNZ 0x00409b89\nCALL 0x00408230\nMOV ECX,0x408160\nMOV EDX,0x4080f0\nTEST AL,AL\nCMOVNZ RDX,RCX\nMOV RDI,qword ptr [0x0062f010]\nMOV RSI,RSP\nCALL RDX\nTEST EAX,EAX\nMOV R12,qword ptr [RBX + 0x8]\nJZ 0x00409c09\nCALL 0x00402770\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nCMP EAX,0x28\nJZ 0x00409c62\nCMP EAX,0x2\nJNZ 0x00409c74\nMOV EDX,0x41fafb\nJMP 0x00409c67\nMOV EDI,dword ptr [0x0062f018]\nMOV RSI,qword ptr [0x0062f010]\nMOV RDX,RSP\nCALL qword ptr [0x0062f0a0]\nMOV RSI,qword ptr [RBX + 0x8]\nTEST EAX,EAX\nJS 0x00409b9f\nMOV RDX,qword ptr [RSP]\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00409470\nMOV RDI,qword ptr [RSP]\nCALL 0x00416a50\nJMP 0x00409b62\nMOV RBX,qword ptr [RBX + 0x8]\nMOV RDI,R12\nCALL 0x00416c70\nJMP 0x00409afb\nMOV RBX,qword ptr [RBX + 0x8]\nMOV RDI,qword ptr [R12 + 0x40]\nMOV RSI,RSP\nXOR EDX,EDX\nMOV ECX,0x200\nMOV R8D,0x200\nJMP 0x00409b4a\nMOV RBX,qword ptr [RBX + 0x8]\nMOV RDI,R12\nCALL 0x00416c80\nJMP 0x00409afb\nMOV RSI,qword ptr [RBX + 0x8]\nMOV EDX,dword ptr [0x0062f000]\nJMP 0x00409ab9\nMOV RDI,R15\nCALL 0x0040ffa0\nMOV R15,RAX\nMOV RSI,qword ptr [RBX + 0x8]\nMOV RDI,R14\nMOV RDX,R15\nCALL 0x0040a1f0\nMOV RDI,R15\nCALL 0x00402710\nJMP 0x00409b62\nMOV EDI,dword ptr [R12 + 0x20]\nCALL 0x004029c0\nTEST RAX,RAX\nJNZ 0x00409b17\nMOV RBX,qword ptr [RBX + 0x8]\nMOV EDI,dword ptr [R12 + 0x20]\nJMP 0x00409b3a\nMOV ESI,0x2f\nMOV RDI,R15\nCALL 0x00402a00\nMOV R12,RAX\nTEST R12,R12\nJZ 0x00409bf3\nMOV RDI,R15\nCALL 0x00402b00\nMOV R13,RAX\nSUB R12,R15\nMOV byte ptr [R13 + R12*0x1],0x0\nMOV RSI,qword ptr [RBX + 0x8]\nMOV RDI,R14\nMOV RDX,R13\nCALL 0x0040a1f0\nMOV RDI,R13\nCALL 0x00402710\nJMP 0x00409b62\nMOV RBX,qword ptr [RBX + 0x8]\nMOV RDI,qword ptr [R12 + 0x8]\nJMP 0x00409b3a\nMOV RBX,qword ptr [RBX + 0x8]\nMOV RDI,qword ptr [R12 + 0x40]\nMOV RSI,RSP\nXOR EDX,EDX\nMOV ECX,0x200\nMOV R8D,0x400\nJMP 0x00409b4a\nMOV EAX,0xf000\nAND EAX,dword ptr [R12 + 0x18]\nCMP EAX,0xa000\nJNZ 0x00409c41\nMOV EDI,dword ptr [0x0062f018]\nMOV RSI,qword ptr [0x0062f010]\nCALL 0x0040fc30\nMOV R12,RAX\nTEST R12,R12\nJZ 0x00409c28\nMOV RSI,qword ptr [RBX + 0x8]\nMOV RDI,R14\nMOV RDX,R12\nCALL 0x0040a1f0\nJMP 0x00409c55\nMOV RSI,qword ptr [RBX + 0x8]\nMOV EDX,0xfff\nAND EDX,dword ptr [R12 + 0x18]\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00409470\nJMP 0x00409b62\nMOV RBX,qword ptr [RBX + 0x8]\nMOV RDI,qword ptr [R12 + 0x10]\nJMP 0x00409b3a\nMOV RSI,qword ptr [RBX + 0x8]\nMOV RDI,R14\nMOV RDX,R15\nCALL 0x0040a1f0\nJMP 0x00409b62\nMOV RBX,qword ptr [RBX + 0x8]\nMOV RDI,qword ptr [R12 + 0x30]\nJMP 0x00409b3a\nMOV RBX,qword ptr [RBX + 0x8]\nMOV RDI,R12\nCALL 0x00416c90\nMOV RDI,RAX\nMOV RSI,RDX\nCALL 0x0040a010\nJMP 0x00409b4f\nMOV EDI,dword ptr [R12 + 0x1c]\nCALL 0x004028e0\nTEST RAX,RAX\nJZ 0x00409b31\nMOV RCX,qword ptr [RBX + 0x8]\nMOVSXD RDX,dword ptr [RBX + 0x10]\nMOV byte ptr [RCX + RDX*0x1],0x73\nMOV RSI,qword ptr [RBX + 0x8]\nMOV RDX,qword ptr [RAX]\nXOR EAX,EAX\nMOV RDI,R14\nJMP 0x00409b5d\nMOV RBX,qword ptr [RBX + 0x8]\nMOV EDI,dword ptr [R12 + 0x1c]\nMOV RSI,RSP\nXOR EDX,EDX\nMOV ECX,0x1\nMOV R8D,0x1\nCALL 0x00411370\nMOV RCX,RAX\nXOR EAX,EAX\nMOV RDI,R14\nMOV RSI,RBX\nMOV RDX,RCX\nCALL 0x00409470\nADD RSP,0x298\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RBX,qword ptr [RBX + 0x8]\nMOV EDI,0xf000\nAND EDI,dword ptr [R12 + 0x18]\nCALL 0x0040a270\nJMP 0x00409b4f\nMOV RBX,qword ptr [RBX + 0x8]\nCALL 0x0040a270\nJMP 0x00409b4f\nMOV EDX,0x41e69a\nMOV RSI,qword ptr [RBX + 0x8]\nJMP 0x00409bfc\nMOV EDX,0x41e69a\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00409470\nCALL 0x00402770\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x41cf7d\nMOV EDX,0x5\nCALL 0x00402910\nMOV RBX,RAX\nXOR EDI,EDI\nMOV RSI,R15\nCALL 0x00408920\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RBX\nCALL 0x00402d90\nMOV dword ptr [0x0062f024],0x1\nJMP 0x00409b62\nMOV RSI,qword ptr [RBX + 0x8]\nMOV EDX,0x4217ea\nMOV RDI,R14\nCALL 0x0040a1f0\nJMP 0x00409b62\nMOV EDI,dword ptr [RSP + 0x18]\nAND EDI,0xf000\nCALL 0x0040a270\nMOV RCX,RAX\nXOR EAX,EAX\nMOV RDI,R14\nMOV RSI,R12\nJMP 0x00409b5a\nCALL 0x00402770\nMOV EDI,dword ptr [RAX]\nMOV RSI,R15\nCALL 0x00407ab0\nMOV dword ptr [0x0062f024],0x1\nMOV RSI,qword ptr [RBX + 0x8]\nMOV EDX,0x41e69a\nMOV RDI,R14\nCALL 0x0040a1f0\nXOR R12D,R12D\nMOV RDI,R12\nCALL 0x00402710\nJMP 0x00409b62\nMOV EDX,0x41e863\nXOR EAX,EAX\nMOV RDI,R14\nMOV RSI,R12\nJMP 0x00409b5d\nMOV EDX,0x4210f1\nXOR EAX,EAX\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00409470\nMOV EBX,dword ptr [RBX]\nXOR EDI,EDI\nMOV RSI,R15\nCALL 0x00408920\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x42542f\nXOR EAX,EAX\nMOV ESI,EBX\nJMP 0x004097ac\n'
p2468
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 02 00 00\n49 89 cc\n49 89 d7\n48 89 f3\n49 89 fe\n8b 03\n83 f8 02\n74 22\n83 f8 01\n74 5d\n85 c0\n0f 85 01 04 00 00\n48 8b 7b 08\n48 63 73 10\n4c 89 f2\ne8 2f 08 00 00\ne9 ec 03 00 00\n0f be 43 04\n83 f8 79\n0f 87 df 03 00 00\nff 24 c5 60 f1 41 00\n31 ff\nbe 80 f7 41 00\nba 05 00 00 00\ne8 75 91 ff ff\n48 89 c2\nbf 01 00 00 00\n31 f6\nb9 bf f8 41 00\n31 c0\ne8 df 95 ff ff\ne9 ac 03 00 00\n48 8b 7b 08\n48 63 73 10\n4c 89 f2\ne8 da 07 00 00\n4c 89 f7\ne8 12 08 00 00\ne9 8f 03 00 00\n48 8b 5b 08\n49 8b 3c 24\ne9 5a 03 00 00\n48 8b 5b 08\n4c 89 e7\n4c 89 fe\ne8 a1 0a 00 00\n4c 89 f7\n48 89 de\n48 89 c2\ne8 f3 09 00 00\ne9 60 03 00 00\n48 63 3d 13 58 22 00\n48 ff c7\ne8 0f da 00 00\n49 89 c4\n4c 63 2d 01 58 22 00\n4c 89 e7\n4c 89 fe\n4c 89 ea\ne8 a7 93 ff ff\n43 c6 04 2c 00\n48 8b 73 08\n31 c0\n4c 89 f7\n4c 89 e2\ne8 31 fc ff ff\ne9 11 04 00 00\n49 89 e7\n4c 89 e7\n4c 89 fe\ne8 de 6a 00 00\nc6 44 24 0a 00\n48 8b 73 08\n31 c0\n4c 89 f7\n4c 89 fa\ne9 f5 02 00 00\n83 3d 91 57 22 00 00\n0f 8e 1f 03 00 00\n48 63 05 a0 57 22 00\n49 8d 0c 07\n41 80 3c 07 2f\n49 8d 54 07 01\n48 0f 45 d1\ne9 06 03 00 00\n48 8b 5b 08\n4c 89 e7\ne8 91 09 00 00\nb0 01\n4c 89 f7\n48 89 de\ne8 c4 fb ff ff\ne9 b1 02 00 00\nbf 00 f0 00 00\n41 23 7c 24 18\n81 ff 00 a0 00 00\n0f 85 c2 02 00 00\ne8 64 e9 ff ff\nb9 60 81 40 00\nba f0 80 40 00\n84 c0\n48 0f 45 d1\n48 8b 3d 2d 57 22 00\n48 89 e6\nff d2\n85 c0\n4c 8b 63 08\n0f 84 15 03 00 00\ne8 77 8e ff ff\n48 89 c3\n8b 03\n83 f8 28\n0f 84 5b 03 00 00\n83 f8 02\n0f 85 64 03 00 00\nba fb fa 41 00\ne9 4d 03 00 00\n8b 3d f8 56 22 00\n48 8b 35 e9 56 22 00\n48 89 e2\nff 15 70 57 22 00\n48 8b 73 08\n85 c0\n0f 88 63 02 00 00\n48 8b 14 24\n31 c0\n4c 89 f7\ne8 26 fb ff ff\n48 8b 3c 24\ne8 fd d0 00 00\ne9 0a 02 00 00\n48 8b 5b 08\n4c 89 e7\ne8 0c d3 00 00\ne9 92 01 00 00\n48 8b 5b 08\n49 8b 7c 24 40\n48 89 e6\n31 d2\nb9 00 02 00 00\n41 b8 00 02 00 00\ne9 c3 01 00 00\n48 8b 5b 08\n4c 89 e7\ne8 ed d2 00 00\ne9 63 01 00 00\n48 8b 73 08\n8b 15 5e 56 22 00\ne9 12 01 00 00\n4c 89 ff\ne8 f1 65 00 00\n49 89 c7\n48 8b 73 08\n4c 89 f7\n4c 89 fa\ne8 2f 08 00 00\n4c 89 ff\ne8 47 8d ff ff\ne9 94 01 00 00\n41 8b 7c 24 20\ne8 e8 8f ff ff\n48 85 c0\n0f 85 36 01 00 00\n48 8b 5b 08\n41 8b 7c 24 20\ne9 4b 01 00 00\nbe 2f 00 00 00\n4c 89 ff\ne8 04 90 ff ff\n49 89 c4\n4d 85 e4\n0f 84 eb 01 00 00\n4c 89 ff\ne8 f0 90 ff ff\n49 89 c5\n4d 29 fc\n43 c6 44 25 00 00\n48 8b 73 08\n4c 89 f7\n4c 89 ea\ne8 c5 07 00 00\n4c 89 ef\ne8 dd 8c ff ff\ne9 2a 01 00 00\n48 8b 5b 08\n49 8b 7c 24 08\ne9 f4 00 00 00\n48 8b 5b 08\n49 8b 7c 24 40\n48 89 e6\n31 d2\nb9 00 02 00 00\n41 b8 00 04 00 00\ne9 e6 00 00 00\nb8 00 f0 00 00\n41 23 44 24 18\n3d 00 a0 00 00\n0f 85 c8 01 00 00\n8b 3d 99 55 22 00\n48 8b 35 8a 55 22 00\ne8 a5 61 00 00\n49 89 c4\n4d 85 e4\n0f 84 91 01 00 00\n48 8b 73 08\n4c 89 f7\n4c 89 e2\ne8 4a 07 00 00\ne9 aa 01 00 00\n48 8b 73 08\nba ff 0f 00 00\n41 23 54 24 18\n31 c0\n4c 89 f7\ne8 ad f9 ff ff\ne9 9a 00 00 00\n48 8b 5b 08\n49 8b 7c 24 10\neb 67\n48 8b 73 08\n4c 89 f7\n4c 89 fa\ne8 0e 07 00 00\neb 7e\n48 8b 5b 08\n49 8b 7c 24 30\neb 4b\n48 8b 5b 08\n4c 89 e7\ne8 95 d1 00 00\n48 89 c7\n48 89 d6\ne8 0a 05 00 00\neb 47\n41 8b 7c 24 1c\ne8 ce 8d ff ff\n48 85 c0\n74 1a\n48 8b 4b 08\n48 63 53 10\nc6 04 11 73\n48 8b 73 08\n48 8b 10\n31 c0\n4c 89 f7\neb 2c\n48 8b 5b 08\n41 8b 7c 24 1c\n48 89 e6\n31 d2\nb9 01 00 00 00\n41 b8 01 00 00 00\ne8 21 78 00 00\n48 89 c1\n31 c0\n4c 89 f7\n48 89 de\n48 89 ca\ne8 0e f9 ff ff\n48 81 c4 98 02 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 5b 08\nbf 00 f0 00 00\n41 23 7c 24 18\ne8 e9 06 00 00\neb c6\n48 8b 5b 08\ne8 de 06 00 00\neb bb\nba 9a e6 41 00\n48 8b 73 08\neb 5d\nba 9a e6 41 00\n31 c0\n4c 89 f7\ne8 c2 f8 ff ff\ne8 bd 8b ff ff\n8b 28\n31 ff\nbe 7d cf 41 00\nba 05 00 00 00\ne8 4a 8d ff ff\n48 89 c3\n31 ff\n4c 89 fe\ne8 4d ed ff ff\n48 89 c1\n31 ff\n31 c0\n89 ee\n48 89 da\ne8 ac 91 ff ff\nc7 05 36 54 22 00 01 00 00 00\ne9 6f ff ff ff\n48 8b 73 08\nba ea 17 42 00\n4c 89 f7\ne8 ec 05 00 00\ne9 59 ff ff ff\n8b 7c 24 18\n81 e7 00 f0 00 00\ne8 58 06 00 00\n48 89 c1\n31 c0\n4c 89 f7\n4c 89 e6\ne9 32 ff ff ff\ne8 43 8b ff ff\n8b 38\n4c 89 fe\ne8 79 de ff ff\nc7 05 e3 53 22 00 01 00 00 00\n48 8b 73 08\nba 9a e6 41 00\n4c 89 f7\ne8 9e 05 00 00\n45 31 e4\n4c 89 e7\ne8 b3 8a ff ff\ne9 00 ff ff ff\nba 63 e8 41 00\n31 c0\n4c 89 f7\n4c 89 e6\ne9 e9 fe ff ff\nba f1 10 42 00\n31 c0\n4c 89 f7\n4c 89 e6\ne8 ea f7 ff ff\n8b 1b\n31 ff\n4c 89 fe\ne8 8e ec ff ff\n48 89 c1\n31 ff\nba 2f 54 42 00\n31 c0\n89 de\ne9 07 fb ff ff\n'
p2469
S'.text:0000000000409730\n.text:0000000000409731\n.text:0000000000409733\n.text:0000000000409735\n.text:0000000000409737\n.text:0000000000409739\n.text:000000000040973a\n.text:0000000000409741\n.text:0000000000409744\n.text:0000000000409747\n.text:000000000040974a\n.text:000000000040974d\n.text:000000000040974f\n.text:0000000000409752\n.text:0000000000409754\n.text:0000000000409757\n.text:0000000000409759\n.text:000000000040975b\n.text:0000000000409761\n.text:0000000000409765\n.text:0000000000409769\n.text:000000000040976c\n.text:0000000000409771\n.text:0000000000409776\n.text:000000000040977a\n.text:000000000040977d\n.text:0000000000409783\n.text:000000000040978a\n.text:000000000040978c\n.text:0000000000409791\n.text:0000000000409796\n.text:000000000040979b\n.text:000000000040979e\n.text:00000000004097a3\n.text:00000000004097a5\n.text:00000000004097aa\n.text:00000000004097ac\n.text:00000000004097b1\n.text:00000000004097b6\n.text:00000000004097ba\n.text:00000000004097be\n.text:00000000004097c1\n.text:00000000004097c6\n.text:00000000004097c9\n.text:00000000004097ce\n.text:00000000004097d3\n.text:00000000004097d7\n.text:00000000004097db\n.text:00000000004097e0\n.text:00000000004097e4\n.text:00000000004097e7\n.text:00000000004097ea\n.text:00000000004097ef\n.text:00000000004097f2\n.text:00000000004097f5\n.text:00000000004097f8\n.text:00000000004097fd\n.text:0000000000409802\n.text:0000000000409809\n.text:000000000040980c\n.text:0000000000409811\n.text:0000000000409814\n.text:000000000040981b\n.text:000000000040981e\n.text:0000000000409821\n.text:0000000000409824\n.text:0000000000409829\n.text:000000000040982e\n.text:0000000000409832\n.text:0000000000409834\n.text:0000000000409837\n.text:000000000040983a\n.text:000000000040983f\n.text:0000000000409844\n.text:0000000000409847\n.text:000000000040984a\n.text:000000000040984d\n.text:0000000000409852\n.text:0000000000409857\n.text:000000000040985b\n.text:000000000040985d\n.text:0000000000409860\n.text:0000000000409863\n.text:0000000000409868\n.text:000000000040986f\n.text:0000000000409875\n.text:000000000040987c\n.text:0000000000409880\n.text:0000000000409885\n.text:000000000040988a\n.text:000000000040988e\n.text:0000000000409893\n.text:0000000000409897\n.text:000000000040989a\n.text:000000000040989f\n.text:00000000004098a1\n.text:00000000004098a4\n.text:00000000004098a7\n.text:00000000004098ac\n.text:00000000004098b1\n.text:00000000004098b6\n.text:00000000004098bb\n.text:00000000004098c1\n.text:00000000004098c7\n.text:00000000004098cc\n.text:00000000004098d1\n.text:00000000004098d6\n.text:00000000004098d8\n.text:00000000004098dc\n.text:00000000004098e3\n.text:00000000004098e6\n.text:00000000004098e8\n.text:00000000004098ea\n.text:00000000004098ee\n.text:00000000004098f4\n.text:00000000004098f9\n.text:00000000004098fc\n.text:00000000004098fe\n.text:0000000000409901\n.text:0000000000409907\n.text:000000000040990a\n.text:0000000000409910\n.text:0000000000409915\n.text:000000000040991a\n.text:0000000000409920\n.text:0000000000409927\n.text:000000000040992a\n.text:0000000000409930\n.text:0000000000409934\n.text:0000000000409936\n.text:000000000040993c\n.text:0000000000409940\n.text:0000000000409942\n.text:0000000000409945\n.text:000000000040994a\n.text:000000000040994e\n.text:0000000000409953\n.text:0000000000409958\n.text:000000000040995c\n.text:000000000040995f\n.text:0000000000409964\n.text:0000000000409969\n.text:000000000040996d\n.text:0000000000409972\n.text:0000000000409975\n.text:0000000000409977\n.text:000000000040997c\n.text:0000000000409982\n.text:0000000000409987\n.text:000000000040998b\n.text:000000000040998e\n.text:0000000000409993\n.text:0000000000409998\n.text:000000000040999c\n.text:00000000004099a2\n.text:00000000004099a7\n.text:00000000004099aa\n.text:00000000004099af\n.text:00000000004099b2\n.text:00000000004099b6\n.text:00000000004099b9\n.text:00000000004099bc\n.text:00000000004099c1\n.text:00000000004099c4\n.text:00000000004099c9\n.text:00000000004099ce\n.text:00000000004099d3\n.text:00000000004099d8\n.text:00000000004099db\n.text:00000000004099e1\n.text:00000000004099e5\n.text:00000000004099ea\n.text:00000000004099ef\n.text:00000000004099f4\n.text:00000000004099f7\n.text:00000000004099fc\n.text:00000000004099ff\n.text:0000000000409a02\n.text:0000000000409a08\n.text:0000000000409a0b\n.text:0000000000409a10\n.text:0000000000409a13\n.text:0000000000409a16\n.text:0000000000409a1c\n.text:0000000000409a20\n.text:0000000000409a23\n.text:0000000000409a26\n.text:0000000000409a2b\n.text:0000000000409a2e\n.text:0000000000409a33\n.text:0000000000409a38\n.text:0000000000409a3c\n.text:0000000000409a41\n.text:0000000000409a46\n.text:0000000000409a4a\n.text:0000000000409a4f\n.text:0000000000409a52\n.text:0000000000409a54\n.text:0000000000409a59\n.text:0000000000409a5f\n.text:0000000000409a64\n.text:0000000000409a69\n.text:0000000000409a6e\n.text:0000000000409a73\n.text:0000000000409a79\n.text:0000000000409a7f\n.text:0000000000409a86\n.text:0000000000409a8b\n.text:0000000000409a8e\n.text:0000000000409a91\n.text:0000000000409a97\n.text:0000000000409a9b\n.text:0000000000409a9e\n.text:0000000000409aa1\n.text:0000000000409aa6\n.text:0000000000409aab\n.text:0000000000409aaf\n.text:0000000000409ab4\n.text:0000000000409ab9\n.text:0000000000409abb\n.text:0000000000409abe\n.text:0000000000409ac3\n.text:0000000000409ac8\n.text:0000000000409acc\n.text:0000000000409ad1\n.text:0000000000409ad3\n.text:0000000000409ad7\n.text:0000000000409ada\n.text:0000000000409add\n.text:0000000000409ae2\n.text:0000000000409ae4\n.text:0000000000409ae8\n.text:0000000000409aed\n.text:0000000000409aef\n.text:0000000000409af3\n.text:0000000000409af6\n.text:0000000000409afb\n.text:0000000000409afe\n.text:0000000000409b01\n.text:0000000000409b06\n.text:0000000000409b08\n.text:0000000000409b0d\n.text:0000000000409b12\n.text:0000000000409b15\n.text:0000000000409b17\n.text:0000000000409b1b\n.text:0000000000409b1f\n.text:0000000000409b23\n.text:0000000000409b27\n.text:0000000000409b2a\n.text:0000000000409b2c\n.text:0000000000409b2f\n.text:0000000000409b31\n.text:0000000000409b35\n.text:0000000000409b3a\n.text:0000000000409b3d\n.text:0000000000409b3f\n.text:0000000000409b44\n.text:0000000000409b4a\n.text:0000000000409b4f\n.text:0000000000409b52\n.text:0000000000409b54\n.text:0000000000409b57\n.text:0000000000409b5a\n.text:0000000000409b5d\n.text:0000000000409b62\n.text:0000000000409b69\n.text:0000000000409b6a\n.text:0000000000409b6c\n.text:0000000000409b6e\n.text:0000000000409b70\n.text:0000000000409b72\n.text:0000000000409b73\n.text:0000000000409b74\n.text:0000000000409b78\n.text:0000000000409b7d\n.text:0000000000409b82\n.text:0000000000409b87\n.text:0000000000409b89\n.text:0000000000409b8d\n.text:0000000000409b92\n.text:0000000000409b94\n.text:0000000000409b99\n.text:0000000000409b9d\n.text:0000000000409b9f\n.text:0000000000409ba4\n.text:0000000000409ba6\n.text:0000000000409ba9\n.text:0000000000409bae\n.text:0000000000409bb3\n.text:0000000000409bb5\n.text:0000000000409bb7\n.text:0000000000409bbc\n.text:0000000000409bc1\n.text:0000000000409bc6\n.text:0000000000409bc9\n.text:0000000000409bcb\n.text:0000000000409bce\n.text:0000000000409bd3\n.text:0000000000409bd6\n.text:0000000000409bd8\n.text:0000000000409bda\n.text:0000000000409bdc\n.text:0000000000409bdf\n.text:0000000000409be4\n.text:0000000000409bee\n.text:0000000000409bf3\n.text:0000000000409bf7\n.text:0000000000409bfc\n.text:0000000000409bff\n.text:0000000000409c04\n.text:0000000000409c09\n.text:0000000000409c0d\n.text:0000000000409c13\n.text:0000000000409c18\n.text:0000000000409c1b\n.text:0000000000409c1d\n.text:0000000000409c20\n.text:0000000000409c23\n.text:0000000000409c28\n.text:0000000000409c2d\n.text:0000000000409c2f\n.text:0000000000409c32\n.text:0000000000409c37\n.text:0000000000409c41\n.text:0000000000409c45\n.text:0000000000409c4a\n.text:0000000000409c4d\n.text:0000000000409c52\n.text:0000000000409c55\n.text:0000000000409c58\n.text:0000000000409c5d\n.text:0000000000409c62\n.text:0000000000409c67\n.text:0000000000409c69\n.text:0000000000409c6c\n.text:0000000000409c6f\n.text:0000000000409c74\n.text:0000000000409c79\n.text:0000000000409c7b\n.text:0000000000409c7e\n.text:0000000000409c81\n.text:0000000000409c86\n.text:0000000000409c88\n.text:0000000000409c8a\n.text:0000000000409c8d\n.text:0000000000409c92\n.text:0000000000409c95\n.text:0000000000409c97\n.text:0000000000409c9c\n.text:0000000000409c9e\n.text:0000000000409ca0\n'
p2470
tp2471
sS'pred_gid'
p2472
(S'\n__stdcall pred_gid(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p2473
V\u000a_Bool pred_gid(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = *(int *)pred_ptr->args;\u000a  if (iVar1 == 2) {\u000a    if ((ulong)stat_buf->st_gid == *(ulong *)(pred_ptr->args + 8)) {\u000a      return true;\u000a    }\u000a  }\u000a  else {\u000a    if (iVar1 == 1) {\u000a      if ((ulong)stat_buf->st_gid < *(ulong *)(pred_ptr->args + 8)) {\u000a        return true;\u000a      }\u000a    }\u000a    else {\u000a      if ((iVar1 == 0) &&\u000a         (*(ulong *)(pred_ptr->args + 8) <= (ulong)stat_buf->st_gid &&\u000a          (ulong)stat_buf->st_gid != *(ulong *)(pred_ptr->args + 8))) {\u000a        return true;\u000a      }\u000a    }\u000a  }\u000a  return false;\u000a}\u000a\u000a
p2474
S'MOV EAX,dword ptr [RDX + 0x38]\nCMP EAX,0x2\nJZ 0x0040412e\nCMP EAX,0x1\nJZ 0x0040413b\nTEST EAX,EAX\nJNZ 0x00404146\nMOV ECX,dword ptr [RSI + 0x20]\nMOV AL,0x1\nCMP RCX,qword ptr [RDX + 0x40]\nJBE 0x00404146\nJMP 0x00404148\nMOV ECX,dword ptr [RSI + 0x20]\nMOV AL,0x1\nCMP RCX,qword ptr [RDX + 0x40]\nJNZ 0x00404146\nJMP 0x00404148\nMOV ECX,dword ptr [RSI + 0x20]\nMOV AL,0x1\nCMP RCX,qword ptr [RDX + 0x40]\nJC 0x00404148\nXOR EAX,EAX\nRET\n'
p2475
S'8b 42 38\n83 f8 02\n74 16\n83 f8 01\n74 1e\n85 c0\n75 25\n8b 4e 20\nb0 01\n48 3b 4a 40\n76 1a\neb 1a\n8b 4e 20\nb0 01\n48 3b 4a 40\n75 0d\neb 0d\n8b 4e 20\nb0 01\n48 3b 4a 40\n72 02\n31 c0\nc3\n'
p2476
S'.text:0000000000404110\n.text:0000000000404113\n.text:0000000000404116\n.text:0000000000404118\n.text:000000000040411b\n.text:000000000040411d\n.text:000000000040411f\n.text:0000000000404121\n.text:0000000000404124\n.text:0000000000404126\n.text:000000000040412a\n.text:000000000040412c\n.text:000000000040412e\n.text:0000000000404131\n.text:0000000000404133\n.text:0000000000404137\n.text:0000000000404139\n.text:000000000040413b\n.text:000000000040413e\n.text:0000000000404140\n.text:0000000000404144\n.text:0000000000404146\n.text:0000000000404148\n'
p2477
tp2478
sS'getuser'
p2479
(S'\n__stdcall getuser()\n'
p2480
V\u000achar * getuser(void)\u000a\u000a{\u000a  passwd *ppVar1;\u000a  size_t sVar2;\u000a  userid *puVar3;\u000a  userid *puVar4;\u000a  __uid_t __uid;\u000a  char *__s;\u000a  \u000a  puVar4 = user_alist;\u000a  if (user_alist != (userid *)0x0) {\u000a    do {\u000a      if (puVar4->id == __uid) goto LAB_00411c9a;\u000a      puVar4 = puVar4->next;\u000a    } while (puVar4 != (userid *)0x0);\u000a  }\u000a  ppVar1 = getpwuid(__uid);\u000a  if (ppVar1 == (passwd *)0x0) {\u000a    __s = "";\u000a  }\u000a  else {\u000a    __s = ppVar1->pw_name;\u000a  }\u000a  sVar2 = strlen(__s);\u000a  puVar4 = (userid *)xmalloc(sVar2 + 0x11);\u000a  puVar4->id = __uid;\u000a  strcpy((char *)(puVar4 + 1),__s);\u000a  puVar4->next = user_alist;\u000a  user_alist = puVar4;\u000aLAB_00411c9a:\u000a  puVar3 = (userid *)0x0;\u000a  if (*(char *)&puVar4[1].id != 0) {\u000a    puVar3 = puVar4 + 1;\u000a  }\u000a  return (char *)puVar3;\u000a}\u000a\u000a
p2481
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EBP,EDI\nMOV RBX,qword ptr [0x0062e660]\nTEST RBX,RBX\nJNZ 0x00411c49\nJMP 0x00411c4f\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJZ 0x00411c4f\nCMP dword ptr [RBX],EBP\nJNZ 0x00411c40\nJMP 0x00411c9a\nMOV EDI,EBP\nCALL 0x004028e0\nTEST RAX,RAX\nJZ 0x00411c60\nMOV R14,qword ptr [RAX]\nJMP 0x00411c66\nMOV R14D,0x41e69a\nMOV RDI,R14\nCALL 0x00402930\nLEA RDI,[RAX + 0x11]\nCALL 0x00417220\nMOV RBX,RAX\nMOV dword ptr [RBX],EBP\nLEA RDI,[RBX + 0x10]\nMOV RSI,R14\nCALL 0x004027c0\nMOV RAX,qword ptr [0x0062e660]\nMOV qword ptr [RBX + 0x8],RAX\nMOV qword ptr [0x0062e660],RBX\nXOR EAX,EAX\nCMP byte ptr [RBX + 0x10],0x0\nLEA RCX,[RBX + 0x10]\nCMOVNZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p2482
S'55\n41 56\n53\n89 fd\n48 8b 1d 33 ca 21 00\n48 85 db\n75 17\neb 1b\n48 8b 5b 08\n48 85 db\n74 06\n39 2b\n75 f3\neb 4b\n89 ef\ne8 8a 0c ff ff\n48 85 c0\n74 05\n4c 8b 30\neb 06\n41 be 9a e6 41 00\n4c 89 f7\ne8 c2 0c ff ff\n48 8d 78 11\ne8 a9 55 00 00\n48 89 c3\n89 2b\n48 8d 7b 10\n4c 89 f6\ne8 38 0b ff ff\n48 8b 05 d1 c9 21 00\n48 89 43 08\n48 89 1d c6 c9 21 00\n31 c0\n80 7b 10 00\n48 8d 4b 10\n48 0f 45 c1\n5b\n41 5e\n5d\nc3\n'
p2483
S'.text:0000000000411c20\n.text:0000000000411c21\n.text:0000000000411c23\n.text:0000000000411c24\n.text:0000000000411c26\n.text:0000000000411c2d\n.text:0000000000411c30\n.text:0000000000411c32\n.text:0000000000411c40\n.text:0000000000411c44\n.text:0000000000411c47\n.text:0000000000411c49\n.text:0000000000411c4b\n.text:0000000000411c4d\n.text:0000000000411c4f\n.text:0000000000411c51\n.text:0000000000411c56\n.text:0000000000411c59\n.text:0000000000411c5b\n.text:0000000000411c5e\n.text:0000000000411c60\n.text:0000000000411c66\n.text:0000000000411c69\n.text:0000000000411c6e\n.text:0000000000411c72\n.text:0000000000411c77\n.text:0000000000411c7a\n.text:0000000000411c7c\n.text:0000000000411c80\n.text:0000000000411c83\n.text:0000000000411c88\n.text:0000000000411c8f\n.text:0000000000411c93\n.text:0000000000411c9a\n.text:0000000000411c9c\n.text:0000000000411ca0\n.text:0000000000411ca4\n.text:0000000000411ca8\n.text:0000000000411ca9\n.text:0000000000411cab\n.text:0000000000411cac\n'
p2484
tp2485
sS'getuidbyname'
p2486
(S'\n__stdcall getuidbyname(char * user)\n'
p2487
V\u000auid_t * getuidbyname(char *user)\u000a\u000a{\u000a  char cVar1;\u000a  int iVar2;\u000a  passwd *ppVar3;\u000a  size_t sVar4;\u000a  userid *puVar5;\u000a  userid *puVar6;\u000a  \u000a  if (user_alist != (userid *)0x0) {\u000a    cVar1 = *user;\u000a    puVar5 = user_alist;\u000a    do {\u000a      if ((*(char *)&puVar5[1].id == cVar1) &&\u000a         (iVar2 = strcmp((char *)(puVar5 + 1),user), iVar2 == 0)) {\u000a        return (uid_t *)puVar5;\u000a      }\u000a      puVar5 = puVar5->next;\u000a    } while (puVar5 != (userid *)0x0);\u000a  }\u000a  if (nouser_alist != (userid *)0x0) {\u000a    cVar1 = *user;\u000a    puVar5 = nouser_alist;\u000a    do {\u000a      if ((*(char *)&puVar5[1].id == cVar1) &&\u000a         (iVar2 = strcmp((char *)(puVar5 + 1),user), iVar2 == 0)) {\u000a        return (uid_t *)0x0;\u000a      }\u000a      puVar5 = puVar5->next;\u000a    } while (puVar5 != (userid *)0x0);\u000a  }\u000a  ppVar3 = getpwnam(user);\u000a  sVar4 = strlen(user);\u000a  puVar5 = (userid *)xmalloc(sVar4 + 0x11);\u000a  strcpy((char *)(puVar5 + 1),user);\u000a  if (ppVar3 == (passwd *)0x0) {\u000a    puVar5->next = nouser_alist;\u000a    puVar6 = (userid *)0x0;\u000a    nouser_alist = puVar5;\u000a  }\u000a  else {\u000a    puVar5->id = ppVar3->pw_uid;\u000a    puVar5->next = user_alist;\u000a    puVar6 = puVar5;\u000a    user_alist = puVar5;\u000a  }\u000a  return (uid_t *)puVar6;\u000a}\u000a\u000a
p2488
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14,RDI\nMOV R12,qword ptr [0x0062e660]\nTEST R12,R12\nJZ 0x00411cf6\nMOV BL,byte ptr [R14]\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R12 + 0x10],BL\nJNZ 0x00411cec\nLEA RDI,[R12 + 0x10]\nMOV RSI,R14\nCALL 0x00402b40\nTEST EAX,EAX\nJZ 0x00411d93\nMOV R12,qword ptr [R12 + 0x8]\nTEST R12,R12\nJNZ 0x00411cd0\nMOV RBX,qword ptr [0x0062e668]\nTEST RBX,RBX\nJZ 0x00411d2f\nMOV BPL,byte ptr [R14]\nXOR R12D,R12D\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RBX + 0x10],BPL\nJNZ 0x00411d26\nLEA RDI,[RBX + 0x10]\nMOV RSI,R14\nCALL 0x00402b40\nTEST EAX,EAX\nJZ 0x00411d93\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x00411d10\nMOV RDI,R14\nCALL 0x00402b80\nMOV R15,RAX\nMOV RDI,R14\nCALL 0x00402930\nLEA RDI,[RAX + 0x11]\nCALL 0x00417220\nMOV R12,RAX\nLEA RDI,[R12 + 0x10]\nMOV RSI,R14\nCALL 0x004027c0\nTEST R15,R15\nJZ 0x00411d7d\nMOV EAX,dword ptr [R15 + 0x10]\nMOV dword ptr [R12],EAX\nMOV RAX,qword ptr [0x0062e660]\nMOV qword ptr [R12 + 0x8],RAX\nMOV qword ptr [0x0062e660],R12\nJMP 0x00411d93\nMOV RAX,qword ptr [0x0062e668]\nMOV qword ptr [R12 + 0x8],RAX\nMOV qword ptr [0x0062e668],R12\nXOR R12D,R12D\nMOV RAX,R12\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2489
S'55\n41 57\n41 56\n41 54\n53\n49 89 fe\n4c 8b 25 9e c9 21 00\n4d 85 e4\n74 2f\n41 8a 1e\n66 0f 1f 44 00 00\n41 38 5c 24 10\n75 15\n49 8d 7c 24 10\n4c 89 f6\ne8 5c 0e ff ff\n85 c0\n0f 84 a7 00 00 00\n4d 8b 64 24 08\n4d 85 e4\n75 da\n48 8b 1d 6b c9 21 00\n48 85 db\n74 2d\n41 8a 2e\n45 31 e4\n0f 1f 84 00 00 00 00 00\n40 38 6b 10\n75 10\n48 8d 7b 10\n4c 89 f6\ne8 1e 0e ff ff\n85 c0\n74 6d\n48 8b 5b 08\n48 85 db\n75 e1\n4c 89 f7\ne8 49 0e ff ff\n49 89 c7\n4c 89 f7\ne8 ee 0b ff ff\n48 8d 78 11\ne8 d5 54 00 00\n49 89 c4\n49 8d 7c 24 10\n4c 89 f6\ne8 65 0a ff ff\n4d 85 ff\n74 1d\n41 8b 47 10\n41 89 04 24\n48 8b 05 f1 c8 21 00\n49 89 44 24 08\n4c 89 25 e5 c8 21 00\neb 16\n48 8b 05 e4 c8 21 00\n49 89 44 24 08\n4c 89 25 d8 c8 21 00\n45 31 e4\n4c 89 e0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p2490
S'.text:0000000000411cb0\n.text:0000000000411cb1\n.text:0000000000411cb3\n.text:0000000000411cb5\n.text:0000000000411cb7\n.text:0000000000411cb8\n.text:0000000000411cbb\n.text:0000000000411cc2\n.text:0000000000411cc5\n.text:0000000000411cc7\n.text:0000000000411cca\n.text:0000000000411cd0\n.text:0000000000411cd5\n.text:0000000000411cd7\n.text:0000000000411cdc\n.text:0000000000411cdf\n.text:0000000000411ce4\n.text:0000000000411ce6\n.text:0000000000411cec\n.text:0000000000411cf1\n.text:0000000000411cf4\n.text:0000000000411cf6\n.text:0000000000411cfd\n.text:0000000000411d00\n.text:0000000000411d02\n.text:0000000000411d05\n.text:0000000000411d08\n.text:0000000000411d10\n.text:0000000000411d14\n.text:0000000000411d16\n.text:0000000000411d1a\n.text:0000000000411d1d\n.text:0000000000411d22\n.text:0000000000411d24\n.text:0000000000411d26\n.text:0000000000411d2a\n.text:0000000000411d2d\n.text:0000000000411d2f\n.text:0000000000411d32\n.text:0000000000411d37\n.text:0000000000411d3a\n.text:0000000000411d3d\n.text:0000000000411d42\n.text:0000000000411d46\n.text:0000000000411d4b\n.text:0000000000411d4e\n.text:0000000000411d53\n.text:0000000000411d56\n.text:0000000000411d5b\n.text:0000000000411d5e\n.text:0000000000411d60\n.text:0000000000411d64\n.text:0000000000411d68\n.text:0000000000411d6f\n.text:0000000000411d74\n.text:0000000000411d7b\n.text:0000000000411d7d\n.text:0000000000411d84\n.text:0000000000411d89\n.text:0000000000411d90\n.text:0000000000411d93\n.text:0000000000411d96\n.text:0000000000411d97\n.text:0000000000411d99\n.text:0000000000411d9b\n.text:0000000000411d9d\n.text:0000000000411d9e\n'
p2491
tp2492
sS'collect_arg'
p2493
(S'\n__stdcall collect_arg(char * * argv, int * arg_ptr, char * * collected_arg)\n'
p2494
V\u000a_Bool collect_arg(char **argv,int *arg_ptr,char **collected_arg)\u000a\u000a{\u000a  _Bool _Var1;\u000a  char *arg;\u000a  char *local_10;\u000a  \u000a  _Var1 = collect_arg_nonconst(argv,arg_ptr,&local_10);\u000a  *collected_arg = local_10;\u000a  return _Var1;\u000a}\u000a\u000a
p2495
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RDX\nLEA RDX,[RSP + 0x8]\nCALL 0x0040c950\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RBX],RCX\nADD RSP,0x10\nPOP RBX\nRET\n'
p2496
S'53\n48 83 ec 10\n48 89 d3\n48 8d 54 24 08\ne8 4e 01 00 00\n48 8b 4c 24 08\n48 89 0b\n48 83 c4 10\n5b\nc3\n'
p2497
S'.text:000000000040c7f0\n.text:000000000040c7f1\n.text:000000000040c7f5\n.text:000000000040c7f8\n.text:000000000040c7fd\n.text:000000000040c802\n.text:000000000040c807\n.text:000000000040c80a\n.text:000000000040c80e\n.text:000000000040c80f\n'
p2498
tp2499
sS'bc_get_arg_max'
p2500
(S'\n__stdcall bc_get_arg_max()\n'
p2501
V\u000asize_t bc_get_arg_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = sysconf(0);\u000a  if ((long)sVar1 < 1) {\u000a    sVar1 = 0x7fffffffffffffff;\u000a  }\u000a  return sVar1;\u000a}\u000a\u000a
p2502
S'PUSH RAX\nXOR EDI,EDI\nCALL 0x00402e00\nTEST RAX,RAX\nMOV RCX,0x7fffffffffffffff\nCMOVLE RAX,RCX\nPOP RCX\nRET\n'
p2503
S'50\n31 ff\ne8 18 4c ff ff\n48 85 c0\n48 b9 ff ff ff ff ff ff ff 7f\n48 0f 4e c1\n59\nc3\n'
p2504
S'.text:000000000040e1e0\n.text:000000000040e1e1\n.text:000000000040e1e3\n.text:000000000040e1e8\n.text:000000000040e1eb\n.text:000000000040e1f5\n.text:000000000040e1f9\n.text:000000000040e1fa\n'
p2505
tp2506
sS'consider_arm_swap'
p2507
(S'\n__stdcall consider_arm_swap(predicate * p)\n'
p2508
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000a_Bool consider_arm_swap(predicate *p)\u000a\u000a{\u000a  float fVar1;\u000a  float fVar2;\u000a  predicate *ppVar3;\u000a  bool bVar4;\u000a  byte bVar5;\u000a  _Bool _Var6;\u000a  int iVar7;\u000a  int iVar8;\u000a  char *pcVar9;\u000a  \u000a  if (p->p_type != BI_OP) {\u000a    pcVar9 = "Not a binary operation";\u000a    bVar5 = (byte)options.debug_options & 8;\u000a    goto joined_r0x0040747c;\u000a  }\u000a  if ((p->pred_left == (predicate *)0x0) || (p->pred_right == (predicate *)0x0)) {\u000a    pcVar9 = "Doesn\u005c't have two arms";\u000a    bVar5 = (byte)options.debug_options & 8;\u000a    goto joined_r0x0040747c;\u000a  }\u000a  ppVar3 = p->pred_left;\u000a  if (ppVar3->pred_right == (predicate *)0x0) {\u000a    pcVar9 = "Left arm has no child on RHS";\u000a    bVar5 = (byte)options.debug_options & 8;\u000a    goto joined_r0x0040747c;\u000a  }\u000a  _Var6 = subtree_has_side_effects(ppVar3->pred_right);\u000a  if (_Var6 != false) {\u000a    pcVar9 = "Left subtree has side-effects";\u000a    bVar5 = (byte)options.debug_options & 8;\u000a    goto joined_r0x0040747c;\u000a  }\u000a  _Var6 = subtree_has_side_effects(p->pred_right);\u000a  if (_Var6 != false) {\u000a    pcVar9 = "Right subtree has side-effects";\u000a    bVar5 = (byte)options.debug_options & 8;\u000a    goto joined_r0x0040747c;\u000a  }\u000a  iVar7 = worst_cost(ppVar3->pred_right);\u000a  iVar8 = worst_cost(p->pred_right);\u000a  if (iVar7 < iVar8) {\u000a    pcVar9 = "efficient as-is";\u000a  }\u000a  else {\u000a    if (iVar7 != iVar8) goto LAB_004075a5;\u000a    fVar1 = ppVar3->pred_right->est_success_rate;\u000a    fVar2 = p->pred_right->est_success_rate;\u000a    if (((byte)options.debug_options & 8) != 0) {\u000a      fprintf((FILE *)(double)fVar1,(char *)stderr,"Success rates: l=%f, r=%f\u005cn");\u000a    }\u000a    if (p->pred_func == pred_or) {\u000a      bVar4 = fVar2 < fVar1;\u000a      if (fVar2 < fVar1) {\u000aLAB_0040758d:\u000a        pcVar9 = (char *)0x0;\u000a        if (bVar4) {\u000aLAB_004075a5:\u000a          if (((byte)options.debug_options & 8) != 0) {\u000a            fwrite("Performing arm swap on:\u005cn",0x18,1,(FILE *)stderr);\u000a            print_tree(stderr,p);\u000a          }\u000a          perform_arm_swap(p);\u000a          return true;\u000a        }\u000a      }\u000a      else {\u000a        pcVar9 = "Operation is OR; right success rate >= left";\u000a        if (bVar4) goto LAB_004075a5;\u000a      }\u000a    }\u000a    else {\u000a      if (p->pred_func == pred_and) {\u000a        bVar4 = fVar1 < fVar2;\u000a        if (fVar1 < fVar2) goto LAB_0040758d;\u000a        pcVar9 = "Operation is AND; right success rate <= left";\u000a        if (fVar1 < fVar2) goto LAB_004075a5;\u000a      }\u000a      else {\u000a        pcVar9 = "Not \u005c'AND\u005c' or \u005c'OR\u005c'";\u000a      }\u000a    }\u000a  }\u000a  bVar5 = (byte)options.debug_options & 8;\u000ajoined_r0x0040747c:\u000a  if (bVar5 != 0) {\u000a    fprintf((FILE *)stderr,"Not an arm swap candidate (%s):\u005cn",pcVar9);\u000a    print_tree(stderr,p);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p2509
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV RBX,RDI\nCMP dword ptr [RBX + 0x10],0x3\nJNZ 0x0040745d\nCMP qword ptr [0x110 + RBX],0x0\nJZ 0x00407470\nCMP qword ptr [0x118 + RBX],0x0\nJZ 0x00407470\nMOV RBP,qword ptr [0x110 + RBX]\nCMP qword ptr [0x118 + RBP],0x0\nJZ 0x00407483\nMOV RDI,qword ptr [0x118 + RBP]\nCALL 0x00407630\nTEST AL,AL\nJZ 0x00407496\nMOV EDX,0x41dd64\nTEST byte ptr [0x0062f080],0x8\nJZ 0x004074e7\nJMP 0x00407544\nMOV EDX,0x41dd1a\nTEST byte ptr [0x0062f080],0x8\nJZ 0x004074e7\nJMP 0x00407544\nMOV EDX,0x41dd31\nTEST byte ptr [0x0062f080],0x8\nJZ 0x004074e7\nJMP 0x00407544\nMOV EDX,0x41dd47\nTEST byte ptr [0x0062f080],0x8\nJZ 0x004074e7\nJMP 0x00407544\nMOV RDI,qword ptr [0x118 + RBX]\nCALL 0x00407630\nTEST AL,AL\nJZ 0x004074b9\nMOV EDX,0x41dd82\nTEST byte ptr [0x0062f080],0x8\nJZ 0x004074e7\nJMP 0x00407544\nMOV RDI,qword ptr [0x118 + RBP]\nCALL 0x00407680\nMOV R14D,EAX\nMOV RDI,qword ptr [0x118 + RBX]\nCALL 0x00407680\nCMP R14D,EAX\nJGE 0x004074f4\nMOV EDX,0x41dda1\nTEST byte ptr [0x0062f080],0x8\nJNZ 0x00407544\nXOR EBP,EBP\nMOV EAX,EBP\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP RBP\nRET\nJNZ 0x004075a5\nMOV RAX,qword ptr [0x118 + RBP]\nMOVSS XMM0,dword ptr [RAX + 0x24]\nMOV RAX,qword ptr [0x118 + RBX]\nMOVSS XMM1,dword ptr [RAX + 0x24]\nTEST byte ptr [0x0062f080],0x8\nJNZ 0x004075ec\nMOV RAX,qword ptr [RBX]\nMOV ECX,0x404500\nCMP RAX,RCX\nJZ 0x0040756f\nMOV ECX,0x403c90\nCMP RAX,RCX\nJZ 0x00407585\nMOV EDX,0x41de25\nTEST byte ptr [0x0062f080],0x8\nJZ 0x004074e7\nMOV RDI,qword ptr [0x0062de60]\nXOR EBP,EBP\nMOV ESI,0x41de50\nXOR EAX,EAX\nCALL 0x00402ba0\nMOV RDI,qword ptr [0x0062de60]\nXOR EDX,EDX\nMOV RSI,RBX\nCALL 0x004063d0\nJMP 0x004074e9\nUCOMISS XMM0,XMM1\nSETA AL\nJA 0x0040758d\nMOV EDX,0x41ddcc\nTEST AL,AL\nJNZ 0x004075a5\nJMP 0x004074de\nUCOMISS XMM1,XMM0\nSETA AL\nJBE 0x00407598\nXOR EDX,EDX\nTEST AL,AL\nJNZ 0x004075a5\nJMP 0x004074de\nMOV EDX,0x41ddf8\nTEST AL,AL\nJZ 0x004074de\nTEST byte ptr [0x0062f080],0x8\nJNZ 0x004075be\nMOV RDI,RBX\nCALL 0x004076c0\nMOV BPL,0x1\nJMP 0x004074e9\nMOV RCX,qword ptr [0x0062de60]\nMOV EDI,0x41de37\nMOV ESI,0x18\nMOV EDX,0x1\nCALL 0x00402ee0\nMOV RDI,qword ptr [0x0062de60]\nXOR EDX,EDX\nMOV RSI,RBX\nCALL 0x004063d0\nJMP 0x004075ae\nMOV RDI,qword ptr [0x0062de60]\nMOVSS dword ptr [RSP + 0xc],XMM0\nMOVSS XMM0,dword ptr [RSP + 0xc]\nCVTSS2SD XMM0,XMM0\nMOVSS dword ptr [RSP + 0x8],XMM1\nMOVSS XMM1,dword ptr [RSP + 0x8]\nCVTSS2SD XMM1,XMM1\nMOV ESI,0x41ddb1\nMOV AL,0x2\nCALL 0x00402ba0\nMOVSS XMM1,dword ptr [RSP + 0x8]\nMOVSS XMM0,dword ptr [RSP + 0xc]\nJMP 0x0040751f\n'
p2510
S'55\n41 56\n53\n48 83 ec 10\n48 89 fb\n83 7b 10 03\n75 4c\n48 83 bb 10 01 00 00 00\n74 55\n48 83 bb 18 01 00 00 00\n74 4b\n48 8b ab 10 01 00 00\n48 83 bd 18 01 00 00 00\n74 4d\n48 8b bd 18 01 00 00\ne8 ee 01 00 00\n84 c0\n74 50\nba 64 dd 41 00\nf6 05 2e 7c 22 00 08\n0f 84 8f 00 00 00\ne9 e7 00 00 00\nba 1a dd 41 00\nf6 05 17 7c 22 00 08\n74 7c\ne9 d4 00 00 00\nba 31 dd 41 00\nf6 05 04 7c 22 00 08\n74 69\ne9 c1 00 00 00\nba 47 dd 41 00\nf6 05 f1 7b 22 00 08\n74 56\ne9 ae 00 00 00\n48 8b bb 18 01 00 00\ne8 8e 01 00 00\n84 c0\n74 13\nba 82 dd 41 00\nf6 05 ce 7b 22 00 08\n74 33\ne9 8b 00 00 00\n48 8b bd 18 01 00 00\ne8 bb 01 00 00\n41 89 c6\n48 8b bb 18 01 00 00\ne8 ac 01 00 00\n41 39 c6\n7d 1b\nba a1 dd 41 00\nf6 05 9b 7b 22 00 08\n75 5d\n31 ed\n89 e8\n48 83 c4 10\n5b\n41 5e\n5d\nc3\n0f 85 ab 00 00 00\n48 8b 85 18 01 00 00\nf3 0f 10 40 24\n48 8b 83 18 01 00 00\nf3 0f 10 48 24\nf6 05 67 7b 22 00 08\n0f 85 cd 00 00 00\n48 8b 03\nb9 00 45 40 00\n48 39 c8\n74 43\nb9 90 3c 40 00\n48 39 c8\n74 4f\nba 25 de 41 00\nf6 05 3e 7b 22 00 08\n74 a3\n48 8b 3d 15 69 22 00\n31 ed\nbe 50 de 41 00\n31 c0\ne8 47 b6 ff ff\n48 8b 3d 00 69 22 00\n31 d2\n48 89 de\ne8 66 ee ff ff\ne9 7a ff ff ff\n0f 2e c1\n0f 97 c0\n77 16\nba cc dd 41 00\n84 c0\n75 25\ne9 59 ff ff ff\n0f 2e c8\n0f 97 c0\n76 0b\n31 d2\n84 c0\n75 12\ne9 46 ff ff ff\nba f8 dd 41 00\n84 c0\n0f 84 39 ff ff ff\nf6 05 d4 7a 22 00 08\n75 10\n48 89 df\ne8 0a 01 00 00\n40 b5 01\ne9 2b ff ff ff\n48 8b 0d 9b 68 22 00\nbf 37 de 41 00\nbe 18 00 00 00\nba 01 00 00 00\ne8 07 b9 ff ff\n48 8b 3d 80 68 22 00\n31 d2\n48 89 de\ne8 e6 ed ff ff\neb c2\n48 8b 3d 6d 68 22 00\nf3 0f 11 44 24 0c\nf3 0f 10 44 24 0c\nf3 0f 5a c0\nf3 0f 11 4c 24 08\nf3 0f 10 4c 24 08\nf3 0f 5a c9\nbe b1 dd 41 00\nb0 02\ne8 81 b5 ff ff\nf3 0f 10 4c 24 08\nf3 0f 10 44 24 0c\ne9 ef fe ff ff\n'
p2511
S'.text:0000000000407400\n.text:0000000000407401\n.text:0000000000407403\n.text:0000000000407404\n.text:0000000000407408\n.text:000000000040740b\n.text:000000000040740f\n.text:0000000000407411\n.text:0000000000407419\n.text:000000000040741b\n.text:0000000000407423\n.text:0000000000407425\n.text:000000000040742c\n.text:0000000000407434\n.text:0000000000407436\n.text:000000000040743d\n.text:0000000000407442\n.text:0000000000407444\n.text:0000000000407446\n.text:000000000040744b\n.text:0000000000407452\n.text:0000000000407458\n.text:000000000040745d\n.text:0000000000407462\n.text:0000000000407469\n.text:000000000040746b\n.text:0000000000407470\n.text:0000000000407475\n.text:000000000040747c\n.text:000000000040747e\n.text:0000000000407483\n.text:0000000000407488\n.text:000000000040748f\n.text:0000000000407491\n.text:0000000000407496\n.text:000000000040749d\n.text:00000000004074a2\n.text:00000000004074a4\n.text:00000000004074a6\n.text:00000000004074ab\n.text:00000000004074b2\n.text:00000000004074b4\n.text:00000000004074b9\n.text:00000000004074c0\n.text:00000000004074c5\n.text:00000000004074c8\n.text:00000000004074cf\n.text:00000000004074d4\n.text:00000000004074d7\n.text:00000000004074d9\n.text:00000000004074de\n.text:00000000004074e5\n.text:00000000004074e7\n.text:00000000004074e9\n.text:00000000004074eb\n.text:00000000004074ef\n.text:00000000004074f0\n.text:00000000004074f2\n.text:00000000004074f3\n.text:00000000004074f4\n.text:00000000004074fa\n.text:0000000000407501\n.text:0000000000407506\n.text:000000000040750d\n.text:0000000000407512\n.text:0000000000407519\n.text:000000000040751f\n.text:0000000000407522\n.text:0000000000407527\n.text:000000000040752a\n.text:000000000040752c\n.text:0000000000407531\n.text:0000000000407534\n.text:0000000000407536\n.text:000000000040753b\n.text:0000000000407542\n.text:0000000000407544\n.text:000000000040754b\n.text:000000000040754d\n.text:0000000000407552\n.text:0000000000407554\n.text:0000000000407559\n.text:0000000000407560\n.text:0000000000407562\n.text:0000000000407565\n.text:000000000040756a\n.text:000000000040756f\n.text:0000000000407572\n.text:0000000000407575\n.text:0000000000407577\n.text:000000000040757c\n.text:000000000040757e\n.text:0000000000407580\n.text:0000000000407585\n.text:0000000000407588\n.text:000000000040758b\n.text:000000000040758d\n.text:000000000040758f\n.text:0000000000407591\n.text:0000000000407593\n.text:0000000000407598\n.text:000000000040759d\n.text:000000000040759f\n.text:00000000004075a5\n.text:00000000004075ac\n.text:00000000004075ae\n.text:00000000004075b1\n.text:00000000004075b6\n.text:00000000004075b9\n.text:00000000004075be\n.text:00000000004075c5\n.text:00000000004075ca\n.text:00000000004075cf\n.text:00000000004075d4\n.text:00000000004075d9\n.text:00000000004075e0\n.text:00000000004075e2\n.text:00000000004075e5\n.text:00000000004075ea\n.text:00000000004075ec\n.text:00000000004075f3\n.text:00000000004075f9\n.text:00000000004075ff\n.text:0000000000407603\n.text:0000000000407609\n.text:000000000040760f\n.text:0000000000407613\n.text:0000000000407618\n.text:000000000040761a\n.text:000000000040761f\n.text:0000000000407625\n.text:000000000040762b\n'
p2512
tp2513
sS'print_name_without_quoting'
p2514
(S'\n__stdcall print_name_without_quoting(char * p, FILE * stream)\n'
p2515
V\u000a_Bool print_name_without_quoting(char *p,FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = fprintf((FILE *)stream,"%s",p);\u000a  return (_Bool)(-1 < iVar1);\u000a}\u000a\u000a
p2516
S'PUSH RAX\nMOV RCX,RSI\nMOV RDX,RDI\nMOV ESI,0x42542f\nXOR EAX,EAX\nMOV RDI,RCX\nCALL 0x00402ba0\nTEST EAX,EAX\nSETNS AL\nPOP RCX\nRET\n'
p2517
S'50\n48 89 f1\n48 89 fa\nbe 2f 54 42 00\n31 c0\n48 89 cf\ne8 ba 36 ff ff\n85 c0\n0f 99 c0\n59\nc3\n'
p2518
S'.text:000000000040f4d0\n.text:000000000040f4d1\n.text:000000000040f4d4\n.text:000000000040f4d7\n.text:000000000040f4dc\n.text:000000000040f4de\n.text:000000000040f4e1\n.text:000000000040f4e6\n.text:000000000040f4e8\n.text:000000000040f4eb\n.text:000000000040f4ec\n'
p2519
tp2520
sS'parse_follow'
p2521
(S'\n__stdcall parse_follow(parser_table * entry, char * * argv, int * arg_ptr)\n'
p2522
V\u000a_Bool parse_follow(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  set_follow_state(1);\u000a  parse_noop();\u000a  return true;\u000a}\u000a\u000a
p2523
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV RBX,RSI\nMOV EDI,0x1\nCALL 0x0040a6a0\nMOV RDI,RBX\nMOV RSI,R14\nCALL 0x0040ca00\nMOV AL,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p2524
S'41 56\n53\n50\n49 89 d6\n48 89 f3\nbf 01 00 00 00\ne8 fc f1 ff ff\n48 89 df\n4c 89 f6\ne8 51 15 00 00\nb0 01\n48 83 c4 08\n5b\n41 5e\nc3\n'
p2525
S'.text:000000000040b490\n.text:000000000040b492\n.text:000000000040b493\n.text:000000000040b494\n.text:000000000040b497\n.text:000000000040b49a\n.text:000000000040b49f\n.text:000000000040b4a4\n.text:000000000040b4a7\n.text:000000000040b4aa\n.text:000000000040b4af\n.text:000000000040b4b1\n.text:000000000040b4b5\n.text:000000000040b4b6\n.text:000000000040b4b8\n'
p2526
tp2527
sS'get_eval_tree'
p2528
(S'\n__stdcall get_eval_tree()\n'
p2529
V\u000apredicate * get_eval_tree(void)\u000a\u000a{\u000a  return eval_tree;\u000a}\u000a\u000a
p2530
S'MOV RAX,qword ptr [0x0062de98]\nRET\n'
p2531
S'48 8b 05 e1 85 22 00\nc3\n'
p2532
S'.text:00000000004058b0\n.text:00000000004058b7\n'
p2533
tp2534
sS'pred_fprint0'
p2535
(S'\n__stdcall pred_fprint0(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p2536
V\u000a_Bool pred_fprint0(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  FILE *__stream;\u000a  \u000a  __stream = *(FILE **)(pred_ptr->args + 8);\u000a  fputs(pathname,__stream);\u000a  _IO_putc(0,(_IO_FILE *)__stream);\u000a  return true;\u000a}\u000a\u000a
p2537
S'PUSH RBX\nMOV RBX,qword ptr [RDX + 0x40]\nMOV RSI,RBX\nCALL 0x00402a50\nXOR EDI,EDI\nMOV RSI,RBX\nCALL 0x004029b0\nMOV AL,0x1\nPOP RBX\nRET\n'
p2538
S'53\n48 8b 5a 40\n48 89 de\ne8 83 e9 ff ff\n31 ff\n48 89 de\ne8 d9 e8 ff ff\nb0 01\n5b\nc3\n'
p2539
S'.text:00000000004040c0\n.text:00000000004040c1\n.text:00000000004040c5\n.text:00000000004040c8\n.text:00000000004040cd\n.text:00000000004040cf\n.text:00000000004040d2\n.text:00000000004040d7\n.text:00000000004040d9\n.text:00000000004040da\n'
p2540
tp2541
sS'partial_quotearg_n'
p2542
(S'\n__stdcall partial_quotearg_n()\n'
p2543
V\u000achar * partial_quotearg_n(void)\u000a\u000a{\u000a  undefined uVar1;\u000a  char *pcVar2;\u000a  long in_RSI;\u000a  long in_RDI;\u000a  \u000a  if (in_RSI != 0) {\u000a    uVar1 = *(undefined *)(in_RDI + in_RSI);\u000a    *(undefined *)(in_RDI + in_RSI) = 0;\u000a    pcVar2 = quotearg_n_style((char *)0x1);\u000a    *(undefined *)(in_RDI + in_RSI) = uVar1;\u000a    return pcVar2;\u000a  }\u000a  pcVar2 = quotearg_n_style((char *)0x1);\u000a  return pcVar2;\u000a}\u000a\u000a
p2544
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EAX,EDX\nMOV RBX,RSI\nMOV R14,RDI\nTEST RBX,RBX\nJZ 0x00403c52\nMOV BPL,byte ptr [R14 + RBX*0x1]\nMOV byte ptr [R14 + RBX*0x1],0x0\nMOV EDI,0x1\nMOV ESI,EAX\nMOV RDX,R14\nCALL 0x00416290\nMOV byte ptr [R14 + RBX*0x1],BPL\nPOP RBX\nPOP R14\nPOP RBP\nRET\nMOV EDI,0x1\nMOV EDX,0x41e69a\nMOV ESI,EAX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00416290\n'
p2545
S'55\n41 56\n53\n89 d0\n48 89 f3\n49 89 fe\n48 85 db\n74 21\n41 8a 2c 1e\n41 c6 04 1e 00\nbf 01 00 00 00\n89 c6\n4c 89 f2\ne8 47 26 01 00\n41 88 2c 1e\n5b\n41 5e\n5d\nc3\nbf 01 00 00 00\nba 9a e6 41 00\n89 c6\n5b\n41 5e\n5d\ne9 29 26 01 00\n'
p2546
S'.text:0000000000403c20\n.text:0000000000403c21\n.text:0000000000403c23\n.text:0000000000403c24\n.text:0000000000403c26\n.text:0000000000403c29\n.text:0000000000403c2c\n.text:0000000000403c2f\n.text:0000000000403c31\n.text:0000000000403c35\n.text:0000000000403c3a\n.text:0000000000403c3f\n.text:0000000000403c41\n.text:0000000000403c44\n.text:0000000000403c49\n.text:0000000000403c4d\n.text:0000000000403c4e\n.text:0000000000403c50\n.text:0000000000403c51\n.text:0000000000403c52\n.text:0000000000403c57\n.text:0000000000403c5c\n.text:0000000000403c5e\n.text:0000000000403c5f\n.text:0000000000403c61\n.text:0000000000403c62\n'
p2547
tp2548
sS'scan_for_digit_differences'
p2549
(S'\n__stdcall scan_for_digit_differences(char * p, char * q, size_t * first, size_t * n)\n'
p2550
V\u000a_Bool scan_for_digit_differences(char *p,char *q,size_t *first,size_t *n)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  size_t sVar2;\u000a  byte bVar3;\u000a  size_t sVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  bool bVar7;\u000a  \u000a  bVar3 = *p;\u000a  bVar6 = *q;\u000a  bVar7 = bVar6 == 0;\u000a  if (bVar3 != 0) {\u000a    sVar4 = 0;\u000a    bVar5 = false;\u000a    do {\u000a      if (bVar7) {\u000a        return false;\u000a      }\u000a      if (bVar3 != bVar6) {\u000a        ppuVar1 = __ctype_b_loc();\u000a        if ((*(byte *)((long)*ppuVar1 + (ulong)bVar6 * 2 + 1) & 8) == 0) {\u000a          return false;\u000a        }\u000a        if (bVar5) {\u000a          if (sVar4 - *first != *n) {\u000a            return false;\u000a          }\u000a          sVar2 = *n + 1;\u000a        }\u000a        else {\u000a          *first = sVar4;\u000a          bVar5 = true;\u000a          sVar2 = 1;\u000a        }\u000a        *n = sVar2;\u000a      }\u000a      bVar3 = p[sVar4 + 1];\u000a      bVar6 = q[sVar4 + 1];\u000a      sVar4 = sVar4 + 1;\u000a      bVar7 = bVar6 == 0;\u000a    } while (bVar3 != 0);\u000a  }\u000a  return (_Bool)bVar7;\u000a}\u000a\u000a
p2551
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RCX\nMOV qword ptr [RSP],RDX\nMOV R12,RSI\nMOV R13,RDI\nMOV CL,byte ptr [R13]\nMOV R14B,byte ptr [R12]\nTEST R14B,R14B\nSETZ AL\nTEST CL,CL\nJZ 0x00409f85\nXOR EBX,EBX\nXOR EBP,EBP\nNOP\nTEST AL,0x1\nJNZ 0x00409f83\nCMP CL,R14B\nJZ 0x00409f68\nCALL 0x00402f80\nMOV RAX,qword ptr [RAX]\nMOVZX ECX,R14B\nTEST byte ptr [RAX + RCX*0x2 + 0x1],0x8\nJZ 0x00409f83\nTEST BPL,0x1\nJNZ 0x00409f50\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RAX],RBX\nMOV BPL,0x1\nMOV EAX,0x1\nJMP 0x00409f65\nMOV RCX,RBX\nMOV RAX,qword ptr [RSP]\nSUB RCX,qword ptr [RAX]\nMOV RAX,qword ptr [R15]\nCMP RCX,RAX\nJNZ 0x00409f83\nINC RAX\nMOV qword ptr [R15],RAX\nMOVZX ECX,byte ptr [R13 + RBX*0x1 + 0x1]\nMOVZX R14D,byte ptr [R12 + RBX*0x1 + 0x1]\nINC RBX\nTEST R14B,R14B\nSETZ AL\nTEST CL,CL\nJNZ 0x00409f10\nJMP 0x00409f85\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2552
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 cf\n48 89 14 24\n49 89 f4\n49 89 fd\n41 8a 4d 00\n45 8a 34 24\n45 84 f6\n0f 94 c0\n84 c9\n74 7b\n31 db\n31 ed\n66 90\na8 01\n75 6f\n44 38 f1\n74 4f\ne8 62 90 ff ff\n48 8b 00\n41 0f b6 ce\nf6 44 48 01 08\n74 57\n40 f6 c5 01\n75 1e\n48 8b 04 24\n48 89 18\n40 b5 01\nb8 01 00 00 00\neb 22\n48 89 d9\n48 8b 04 24\n48 2b 08\n49 8b 07\n48 39 c1\n75 21\n48 ff c0\n49 89 07\n41 0f b6 4c 1d 01\n45 0f b6 74 1c 01\n48 ff c3\n45 84 f6\n0f 94 c0\n84 c9\n75 8f\neb 02\n31 c0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2553
S'.text:0000000000409ee0\n.text:0000000000409ee1\n.text:0000000000409ee3\n.text:0000000000409ee5\n.text:0000000000409ee7\n.text:0000000000409ee9\n.text:0000000000409eea\n.text:0000000000409eeb\n.text:0000000000409eee\n.text:0000000000409ef2\n.text:0000000000409ef5\n.text:0000000000409ef8\n.text:0000000000409efc\n.text:0000000000409f00\n.text:0000000000409f03\n.text:0000000000409f06\n.text:0000000000409f08\n.text:0000000000409f0a\n.text:0000000000409f0c\n.text:0000000000409f0e\n.text:0000000000409f10\n.text:0000000000409f12\n.text:0000000000409f14\n.text:0000000000409f17\n.text:0000000000409f19\n.text:0000000000409f1e\n.text:0000000000409f21\n.text:0000000000409f25\n.text:0000000000409f2a\n.text:0000000000409f2c\n.text:0000000000409f30\n.text:0000000000409f32\n.text:0000000000409f36\n.text:0000000000409f39\n.text:0000000000409f3c\n.text:0000000000409f41\n.text:0000000000409f50\n.text:0000000000409f53\n.text:0000000000409f57\n.text:0000000000409f5a\n.text:0000000000409f5d\n.text:0000000000409f60\n.text:0000000000409f62\n.text:0000000000409f65\n.text:0000000000409f68\n.text:0000000000409f6e\n.text:0000000000409f74\n.text:0000000000409f77\n.text:0000000000409f7a\n.text:0000000000409f7d\n.text:0000000000409f7f\n.text:0000000000409f81\n.text:0000000000409f83\n.text:0000000000409f85\n.text:0000000000409f89\n.text:0000000000409f8a\n.text:0000000000409f8c\n.text:0000000000409f8e\n.text:0000000000409f90\n.text:0000000000409f92\n.text:0000000000409f93\n'
p2554
tp2555
sS'get_stat_mtime'
p2556
(S'\n__stdcall get_stat_mtime(stat * st)\n'
p2557
V\u000atimespec get_stat_mtime(stat *st)\u000a\u000a{\u000a  return st->st_mtim;\u000a}\u000a\u000a
p2558
S'MOV RAX,qword ptr [RDI + 0x58]\nMOV RDX,qword ptr [RDI + 0x60]\nRET\n'
p2559
S'48 8b 47 58\n48 8b 57 60\nc3\n'
p2560
S'.text:0000000000416c90\n.text:0000000000416c94\n.text:0000000000416c98\n'
p2561
tp2562
sS'hash_table_ok'
p2563
(S'\n__stdcall hash_table_ok(Hash_table * table)\n'
p2564
V\u000a_Bool hash_table_ok(Hash_table *table)\u000a\u000a{\u000a  hash_entry **pphVar1;\u000a  undefined uVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  hash_entry *phVar5;\u000a  hash_entry *phVar6;\u000a  \u000a  phVar6 = table->bucket;\u000a  if (phVar6 < table->bucket_limit) {\u000a    sVar4 = 0;\u000a    sVar3 = 0;\u000a    do {\u000a      phVar5 = phVar6;\u000a      if (phVar6->data != (void *)0x0) {\u000a        do {\u000a          sVar4 = sVar4 + 1;\u000a          pphVar1 = &phVar5->next;\u000a          phVar5 = *pphVar1;\u000a        } while (*pphVar1 != (hash_entry *)0x0);\u000a        sVar3 = sVar3 + 1;\u000a      }\u000a      phVar6 = phVar6 + 1;\u000a    } while (phVar6 < table->bucket_limit);\u000a  }\u000a  else {\u000a    sVar3 = 0;\u000a    sVar4 = 0;\u000a  }\u000a  if ((sVar3 != table->n_buckets_used) || (uVar2 = 1, sVar4 != table->n_entries)) {\u000a    uVar2 = 0;\u000a  }\u000a  return (_Bool)uVar2;\u000a}\u000a\u000a
p2565
S'MOV RSI,qword ptr [RDI]\nCMP RSI,qword ptr [RDI + 0x8]\nJNC 0x0041048a\nMOV R8,qword ptr [RDI + 0x8]\nXOR ECX,ECX\nXOR EAX,EAX\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP qword ptr [RSI],0x0\nJZ 0x0041047f\nMOV RDX,RSI\nNOP dword ptr [RAX]\nINC RCX\nMOV RDX,qword ptr [RDX + 0x8]\nTEST RDX,RDX\nJNZ 0x00410470\nINC RAX\nADD RSI,0x10\nCMP RSI,R8\nJC 0x00410460\nJMP 0x0041048e\nXOR EAX,EAX\nXOR ECX,ECX\nCMP RAX,qword ptr [RDI + 0x18]\nJNZ 0x0041049c\nMOV AL,0x1\nCMP RCX,qword ptr [RDI + 0x20]\nJZ 0x0041049e\nXOR EAX,EAX\nRET\n'
p2566
S'48 8b 37\n48 3b 77 08\n73 41\n4c 8b 47 08\n31 c9\n31 c0\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 83 3e 00\n74 19\n48 89 f2\n0f 1f 80 00 00 00 00\n48 ff c1\n48 8b 52 08\n48 85 d2\n75 f4\n48 ff c0\n48 83 c6 10\n4c 39 c6\n72 d8\neb 04\n31 c0\n31 c9\n48 3b 47 18\n75 08\nb0 01\n48 3b 4f 20\n74 02\n31 c0\nc3\n'
p2567
S'.text:0000000000410440\n.text:0000000000410443\n.text:0000000000410447\n.text:0000000000410449\n.text:000000000041044d\n.text:000000000041044f\n.text:0000000000410451\n.text:0000000000410460\n.text:0000000000410464\n.text:0000000000410466\n.text:0000000000410469\n.text:0000000000410470\n.text:0000000000410473\n.text:0000000000410477\n.text:000000000041047a\n.text:000000000041047c\n.text:000000000041047f\n.text:0000000000410483\n.text:0000000000410486\n.text:0000000000410488\n.text:000000000041048a\n.text:000000000041048c\n.text:000000000041048e\n.text:0000000000410492\n.text:0000000000410494\n.text:0000000000410496\n.text:000000000041049a\n.text:000000000041049c\n.text:000000000041049e\n'
p2568
tp2569
sS'remember_fd_if_non_cloexec'
p2570
(S'\n__stdcall remember_fd_if_non_cloexec(void * context)\n'
p2571
V\u000aint remember_fd_if_non_cloexec(void *context)\u000a\u000a{\u000a  void *pvVar1;\u000a  int iVar2;\u000a  void *pvVar3;\u000a  void **in_RSI;\u000a  int iVar4;\u000a  \u000a  iVar2 = fd_is_cloexec();\u000a  iVar4 = 0;\u000a  if (iVar2 == 0) {\u000a    pvVar3 = extendbuf(*in_RSI,(long)in_RSI[1] * 4 + 4,(size_t *)(in_RSI + 2));\u000a    if (pvVar3 == (void *)0x0) {\u000a      iVar4 = -1;\u000a    }\u000a    else {\u000a      *in_RSI = pvVar3;\u000a      pvVar1 = in_RSI[1];\u000a      *(undefined4 *)((long)pvVar3 + (long)pvVar1 * 4) = (int)context;\u000a      in_RSI[1] = (void *)((long)pvVar1 + 1);\u000a      iVar4 = 0;\u000a    }\u000a  }\u000a  return iVar4;\u000a}\u000a\u000a
p2572
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RSI\nMOV EBP,EDI\nCALL 0x0040ec20\nXOR R14D,R14D\nTEST EAX,EAX\nJNZ 0x0040e8cb\nMOV RDI,qword ptr [RBX]\nMOV RAX,qword ptr [RBX + 0x8]\nLEA RSI,[0x4 + RAX*0x4]\nLEA RDX,[RBX + 0x10]\nCALL 0x0040e5f0\nTEST RAX,RAX\nJZ 0x0040e8c5\nMOV qword ptr [RBX],RAX\nMOV RCX,qword ptr [RBX + 0x8]\nMOV dword ptr [RAX + RCX*0x4],EBP\nINC RCX\nMOV qword ptr [RBX + 0x8],RCX\nJMP 0x0040e8cb\nMOV R14D,0xffffffff\nMOV EAX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p2573
S'55\n41 56\n53\n48 89 f3\n89 fd\ne8 92 03 00 00\n45 31 f6\n85 c0\n75 36\n48 8b 3b\n48 8b 43 08\n48 8d 34 85 04 00 00 00\n48 8d 53 10\ne8 43 fd ff ff\n48 85 c0\n74 13\n48 89 03\n48 8b 4b 08\n89 2c 88\n48 ff c1\n48 89 4b 08\neb 06\n41 be ff ff ff ff\n44 89 f0\n5b\n41 5e\n5d\nc3\n'
p2574
S'.text:000000000040e880\n.text:000000000040e881\n.text:000000000040e883\n.text:000000000040e884\n.text:000000000040e887\n.text:000000000040e889\n.text:000000000040e88e\n.text:000000000040e891\n.text:000000000040e893\n.text:000000000040e895\n.text:000000000040e898\n.text:000000000040e89c\n.text:000000000040e8a4\n.text:000000000040e8a8\n.text:000000000040e8ad\n.text:000000000040e8b0\n.text:000000000040e8b2\n.text:000000000040e8b5\n.text:000000000040e8b9\n.text:000000000040e8bc\n.text:000000000040e8bf\n.text:000000000040e8c3\n.text:000000000040e8c5\n.text:000000000040e8cb\n.text:000000000040e8ce\n.text:000000000040e8cf\n.text:000000000040e8d1\n.text:000000000040e8d2\n'
p2575
tp2576
sS'snprintf'
p2577
(S'\n__stdcall snprintf(char * __s, size_t __maxlen, char * __format)\n'
p2578
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint snprintf(char *__s,size_t __maxlen,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_snprintf_0062d190)();\u000a  return iVar1;\u000a}\u000a\u000a
p2579
S'JMP qword ptr [0x0062d190]\n'
p2580
S'ff 25 aa a7 22 00\n'
p2581
S'.plt:00000000004029e0\n'
p2582
tp2583
sS'qsort'
p2584
(S'\n__stdcall qsort(void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)\n'
p2585
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\u000a\u000a{\u000a  (*(code *)PTR_qsort_0062d0a8)();\u000a  return;\u000a}\u000a\u000a
p2586
S'JMP qword ptr [0x0062d0a8]\n'
p2587
S'ff 25 92 a8 22 00\n'
p2588
S'.plt:0000000000402810\n'
p2589
tp2590
sS'c_islower'
p2591
(S'\n__stdcall c_islower()\n'
p2592
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p2593
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p2594
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p2595
S'.text:000000000041b9e0\n.text:000000000041b9e3\n.text:000000000041b9e6\n.text:000000000041b9e9\n'
p2596
tp2597
sS'fwrite'
p2598
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p2599
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_0062d410)();\u000a  return sVar1;\u000a}\u000a\u000a
p2600
S'JMP qword ptr [0x0062d410]\n'
p2601
S'ff 25 2a a5 22 00\n'
p2602
S'.plt:0000000000402ee0\n'
p2603
tp2604
sS'setexeccon'
p2605
(S'\n__stdcall setexeccon(security_context_t con)\n'
p2606
V\u000aint setexeccon(security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p2607
S'PUSH RAX\nCALL 0x00402770\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p2608
S'50\ne8 aa bb fe ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p2609
S'.text:0000000000416bc0\n.text:0000000000416bc1\n.text:0000000000416bc6\n.text:0000000000416bcc\n.text:0000000000416bd1\n.text:0000000000416bd2\n'
p2610
tp2611
sS'parse_lname'
p2612
(S'\n__stdcall parse_lname(parser_table * entry, char * * argv, int * arg_ptr)\n'
p2613
V\u000a_Bool parse_lname(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  predicate *ppVar2;\u000a  float fVar3;\u000a  char *local_20;\u000a  \u000a  fnmatch_sanitycheck();\u000a  _Var1 = collect_arg(argv,arg_ptr,&local_20);\u000a  if (_Var1 != false) {\u000a    ppVar2 = insert_primary(entry,local_20);\u000a    *(char **)ppVar2->args = local_20;\u000a    fVar3 = estimate_pattern_match_rate(local_20);\u000a    ppVar2->est_success_rate = fVar3 * DAT_0041fb7c;\u000a  }\u000a  return (_Bool)(_Var1 != false);\u000a}\u000a\u000a
p2614
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV R15,RDX\nMOV RBX,RSI\nMOV R14,RDI\nCALL 0x0040d4a0\nLEA RDX,[RSP + 0x8]\nMOV RDI,RBX\nMOV RSI,R15\nCALL 0x0040c7f0\nTEST AL,AL\nJZ 0x0040ba8e\nMOV RBX,qword ptr [RSP + 0x8]\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00407730\nMOV R14,RAX\nMOV qword ptr [R14 + 0x38],RBX\nXOR ESI,ESI\nMOV RDI,RBX\nCALL 0x0040d450\nMULSS XMM0,dword ptr [0x0041fb7c]\nMOVSS dword ptr [R14 + 0x24],XMM0\nMOV AL,0x1\nJMP 0x0040ba90\nXOR EAX,EAX\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p2615
S'41 57\n41 56\n53\n48 83 ec 10\n49 89 d7\n48 89 f3\n49 89 fe\ne8 59 1a 00 00\n48 8d 54 24 08\n48 89 df\n4c 89 fe\ne8 99 0d 00 00\n84 c0\n74 33\n48 8b 5c 24 08\n4c 89 f7\n48 89 de\ne8 c5 bc ff ff\n49 89 c6\n49 89 5e 38\n31 f6\n48 89 df\ne8 d4 19 00 00\nf3 0f 59 05 f8 40 01 00\nf3 41 0f 11 46 24\nb0 01\neb 02\n31 c0\n48 83 c4 10\n5b\n41 5e\n41 5f\nc3\n'
p2616
S'.text:000000000040ba30\n.text:000000000040ba32\n.text:000000000040ba34\n.text:000000000040ba35\n.text:000000000040ba39\n.text:000000000040ba3c\n.text:000000000040ba3f\n.text:000000000040ba42\n.text:000000000040ba47\n.text:000000000040ba4c\n.text:000000000040ba4f\n.text:000000000040ba52\n.text:000000000040ba57\n.text:000000000040ba59\n.text:000000000040ba5b\n.text:000000000040ba60\n.text:000000000040ba63\n.text:000000000040ba66\n.text:000000000040ba6b\n.text:000000000040ba6e\n.text:000000000040ba72\n.text:000000000040ba74\n.text:000000000040ba77\n.text:000000000040ba7c\n.text:000000000040ba84\n.text:000000000040ba8a\n.text:000000000040ba8c\n.text:000000000040ba8e\n.text:000000000040ba90\n.text:000000000040ba94\n.text:000000000040ba95\n.text:000000000040ba97\n.text:000000000040ba99\n'
p2617
tp2618
sS'rotl_sz'
p2619
(S'\n__stdcall rotl_sz(size_t x)\n'
p2620
V\u000asize_t rotl_sz(size_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x << bVar1 | x >> 0x40 - bVar1;\u000a}\u000a\u000a
p2621
S'MOV ECX,ESI\nROL RDI,CL\nMOV RAX,RDI\nRET\n'
p2622
S'89 f1\n48 d3 c7\n48 89 f8\nc3\n'
p2623
S'.text:000000000041b8a0\n.text:000000000041b8a2\n.text:000000000041b8a5\n.text:000000000041b8a8\n'
p2624
tp2625
sS'bc_init_state'
p2626
(S'\n__stdcall bc_init_state(buildcmd_control * ctl, buildcmd_state * state, void * context)\n'
p2627
V\u000avoid bc_init_state(buildcmd_control *ctl,buildcmd_state *state,void *context)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  state->cmd_argv_chars = 0;\u000a  *(undefined4 *)&state->cmd_argc = 0;\u000a  *(undefined4 *)((long)&state->cmd_argc + 4) = 0;\u000a  *(undefined4 *)&state->cmd_argv = 0;\u000a  *(undefined4 *)((long)&state->cmd_argv + 4) = 0;\u000a  state->cmd_argv_alloc = 0;\u000a  *(undefined4 *)&state->largest_successful_arg_count = 0;\u000a  *(undefined4 *)((long)&state->largest_successful_arg_count + 4) = 0;\u000a  *(undefined4 *)&state->smallest_failed_arg_count = 0;\u000a  *(undefined4 *)((long)&state->smallest_failed_arg_count + 4) = 0;\u000a  if (ctl->arg_max < 0x7ffffffffffff800) {\u000a    pcVar1 = (char *)xmalloc(ctl->arg_max + 1);\u000a    state->argbuf = pcVar1;\u000a    state->todo = 0;\u000a    *(undefined4 *)&state->cmd_argv_chars = 0;\u000a    *(undefined4 *)((long)&state->cmd_argv_chars + 4) = 0;\u000a    *(undefined4 *)&state->cmd_initial_argv_chars = 0;\u000a    *(undefined4 *)((long)&state->cmd_initial_argv_chars + 4) = 0;\u000a    state->dir_fd = -1;\u000a    state->usercontext = context;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("ctl->arg_max <= (LONG_MAX - 2048L)","buildcmd.c",0x246,\u000a                                \u000a                "void bc_init_state(const struct buildcmd_control *, struct buildcmd_state *, void *)"\u000a               );\u000a}\u000a\u000a
p2628
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RDX\nMOV RBX,RSI\nMOV qword ptr [RBX + 0x20],0x0\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX],XMM0\nMOV qword ptr [RBX + 0x10],0x0\nMOVUPS xmmword ptr [RBX + 0x40],XMM0\nMOV RDI,qword ptr [RDI + 0x18]\nMOV RAX,0x7ffffffffffff800\nCMP RDI,RAX\nJNC 0x0040e397\nLEA R15,[RBX + 0x20]\nINC RDI\nCALL 0x00417220\nMOV qword ptr [RBX + 0x18],RAX\nMOV dword ptr [RBX + 0x38],0x0\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R15],XMM0\nMOV dword ptr [RBX + 0x3c],0xffffffff\nMOV qword ptr [RBX + 0x30],R14\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOV EDI,0x421e59\nMOV ESI,0x421c75\nMOV EDX,0x246\nMOV ECX,0x421e7c\nCALL 0x00402a40\n'
p2629
S'41 57\n41 56\n53\n49 89 d6\n48 89 f3\n48 c7 43 20 00 00 00 00\n0f 57 c0\n0f 11 03\n48 c7 43 10 00 00 00 00\n0f 11 43 40\n48 8b 7f 18\n48 b8 00 f8 ff ff ff ff ff 7f\n48 39 c7\n73 2f\n4c 8d 7b 20\n48 ff c7\ne8 ac 8e 00 00\n48 89 43 18\nc7 43 38 00 00 00 00\n0f 57 c0\n41 0f 11 07\nc7 43 3c ff ff ff ff\n4c 89 73 30\n5b\n41 5e\n41 5f\nc3\nbf 59 1e 42 00\nbe 75 1c 42 00\nba 46 02 00 00\nb9 7c 1e 42 00\ne8 90 46 ff ff\n'
p2630
S'.text:000000000040e330\n.text:000000000040e332\n.text:000000000040e334\n.text:000000000040e335\n.text:000000000040e338\n.text:000000000040e33b\n.text:000000000040e343\n.text:000000000040e346\n.text:000000000040e349\n.text:000000000040e351\n.text:000000000040e355\n.text:000000000040e359\n.text:000000000040e363\n.text:000000000040e366\n.text:000000000040e368\n.text:000000000040e36c\n.text:000000000040e36f\n.text:000000000040e374\n.text:000000000040e378\n.text:000000000040e37f\n.text:000000000040e382\n.text:000000000040e386\n.text:000000000040e38d\n.text:000000000040e391\n.text:000000000040e392\n.text:000000000040e394\n.text:000000000040e396\n.text:000000000040e397\n.text:000000000040e39c\n.text:000000000040e3a1\n.text:000000000040e3a6\n.text:000000000040e3ab\n'
p2631
tp2632
sS'c_isprint'
p2633
(S'\n__stdcall c_isprint()\n'
p2634
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p2635
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p2636
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p2637
S'.text:000000000041b9f0\n.text:000000000041b9f3\n.text:000000000041b9f6\n.text:000000000041b9f9\n'
p2638
tp2639
sS'parse_empty'
p2640
(S'\n__stdcall parse_empty(parser_table * entry, char * * argv, int * arg_ptr)\n'
p2641
V\u000a_Bool parse_empty(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  predicate *ppVar1;\u000a  \u000a  ppVar1 = insert_primary_noarg(entry);\u000a  ppVar1->est_success_rate = 0.01000000;\u000a  return true;\u000a}\u000a\u000a
p2642
S'PUSH RAX\nCALL 0x00407760\nMOV dword ptr [RAX + 0x24],0x3c23d70a\nMOV AL,0x1\nPOP RCX\nRET\n'
p2643
S'50\ne8 9a c3 ff ff\nc7 40 24 0a d7 23 3c\nb0 01\n59\nc3\n'
p2644
S'.text:000000000040b3c0\n.text:000000000040b3c1\n.text:000000000040b3c6\n.text:000000000040b3cd\n.text:000000000040b3cf\n.text:000000000040b3d0\n'
p2645
tp2646
sS'_fini'
p2647
(S'\n__stdcall _fini()\n'
p2648
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p2649
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p2650
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p2651
S'.fini:000000000041c4d8\n.fini:000000000041c4dc\n.fini:000000000041c4e0\n'
p2652
tp2653
sS'process_leading_options'
p2654
(S'\n__stdcall process_leading_options(char * * argv)\n'
p2655
V\u000aint process_leading_options(char **argv)\u000a\u000a{\u000a  char *__s2;\u000a  int iVar1;\u000a  long lVar2;\u000a  int iVar3;\u000a  long in_RSI;\u000a  \u000a  iVar3 = 1;\u000a  if (1 < (int)argv) {\u000a    iVar3 = 1;\u000a    do {\u000a      lVar2 = (long)iVar3;\u000a      __s2 = *(char **)(in_RSI + lVar2 * 8);\u000a      if (((*__s2 == '-') && (__s2[1] == 'H')) && (__s2[2] == 0)) {\u000a        set_follow_state(2);\u000a      }\u000a      else {\u000a        __s2 = *(char **)(in_RSI + lVar2 * 8);\u000a        if (((*__s2 == '-') && (__s2[1] == 'L')) && (__s2[2] == 0)) {\u000a          set_follow_state(1);\u000a        }\u000a        else {\u000a          __s2 = *(char **)(in_RSI + lVar2 * 8);\u000a          if (((*__s2 == '-') && (__s2[1] == 'P')) && (__s2[2] == 0)) {\u000a            set_follow_state(0);\u000a          }\u000a          else {\u000a            __s2 = *(char **)(in_RSI + lVar2 * 8);\u000a            if (((*__s2 == '-') && (__s2[1] == '-')) && (__s2[2] == 0)) {\u000a              return iVar3 + 1;\u000a            }\u000a            __s2 = *(char **)(in_RSI + lVar2 * 8);\u000a            if (((*__s2 == '-') && (__s2[1] == 'D')) && (__s2[2] == 0)) {\u000a              iVar3 = iVar3 + 1;\u000a              process_debug_options(*(char **)(in_RSI + 8 + lVar2 * 8));\u000a            }\u000a            else {\u000a              __s2 = *(char **)(in_RSI + lVar2 * 8);\u000a              iVar1 = strncmp("-O",__s2,2);\u000a              if (iVar1 != 0) {\u000a                return iVar3;\u000a              }\u000a              process_optimisation_option(__s2 + 2);\u000a            }\u000a          }\u000a        }\u000a      }\u000a      iVar3 = iVar3 + 1;\u000a    } while (iVar3 < (int)argv);\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p2656
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV R15D,EDI\nMOV EBX,0x1\nCMP R15D,0x2\nJL 0x004084b1\nMOV EBX,0x1\nJMP 0x004083f0\nMOV EDI,0x2\nCALL 0x0040a6a0\nJMP 0x004084a6\nMOV EDI,0x1\nCALL 0x0040a6a0\nJMP 0x004084a6\nXOR EDI,EDI\nCALL 0x0040a6a0\nJMP 0x004084a6\nLEA EBX,[RAX + 0x1]\nMOV RDI,qword ptr [R14 + RAX*0x8 + 0x8]\nCALL 0x004084d0\nJMP 0x004084a6\nMOVSXD RAX,EBX\nMOV RCX,qword ptr [R14 + RAX*0x8]\nCMP byte ptr [RCX],0x2d\nJNZ 0x00408410\nCMP byte ptr [RCX + 0x1],0x48\nJNZ 0x00408410\nCMP byte ptr [RCX + 0x2],0x0\nJZ 0x004083b3\nNOP dword ptr [RAX + RAX*0x1]\nMOV RCX,qword ptr [R14 + RAX*0x8]\nCMP byte ptr [RCX],0x2d\nJNZ 0x00408430\nCMP byte ptr [RCX + 0x1],0x4c\nJNZ 0x00408430\nCMP byte ptr [RCX + 0x2],0x0\nJZ 0x004083c2\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RCX,qword ptr [R14 + RAX*0x8]\nCMP byte ptr [RCX],0x2d\nJNZ 0x00408450\nCMP byte ptr [RCX + 0x1],0x50\nJNZ 0x00408450\nCMP byte ptr [RCX + 0x2],0x0\nJZ 0x004083d1\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RCX,qword ptr [R14 + RAX*0x8]\nCMP byte ptr [RCX],0x2d\nJNZ 0x00408465\nCMP byte ptr [RCX + 0x1],0x2d\nJNZ 0x00408465\nCMP byte ptr [RCX + 0x2],0x0\nJZ 0x004084be\nMOV RCX,qword ptr [R14 + RAX*0x8]\nCMP byte ptr [RCX],0x2d\nJNZ 0x00408480\nCMP byte ptr [RCX + 0x1],0x44\nJNZ 0x00408480\nCMP byte ptr [RCX + 0x2],0x0\nJZ 0x004083dd\nNOP\nMOV RBP,qword ptr [R14 + RAX*0x8]\nMOV EDI,0x41ec46\nMOV EDX,0x2\nMOV RSI,RBP\nCALL 0x00402790\nTEST EAX,EAX\nJNZ 0x004084b1\nADD RBP,0x2\nMOV RDI,RBP\nCALL 0x00408600\nINC EBX\nCMP EBX,R15D\nJL 0x004083f0\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nINC EBX\nJMP 0x004084b1\n'
p2657
S'55\n41 57\n41 56\n53\n50\n49 89 f6\n41 89 ff\nbb 01 00 00 00\n41 83 ff 02\n0f 8c 05 01 00 00\nbb 01 00 00 00\neb 3d\nbf 02 00 00 00\ne8 e3 22 00 00\ne9 e4 00 00 00\nbf 01 00 00 00\ne8 d4 22 00 00\ne9 d5 00 00 00\n31 ff\ne8 c8 22 00 00\ne9 c9 00 00 00\n8d 58 01\n49 8b 7c c6 08\ne8 e6 00 00 00\ne9 b7 00 00 00\n48 63 c3\n49 8b 0c c6\n80 39 2d\n75 14\n80 79 01 48\n75 0e\n80 79 02 00\n74 ab\n0f 1f 84 00 00 00 00 00\n49 8b 0c c6\n80 39 2d\n75 17\n80 79 01 4c\n75 11\n80 79 02 00\n74 9d\n66 66 2e 0f 1f 84 00 00 00 00 00\n49 8b 0c c6\n80 39 2d\n75 17\n80 79 01 50\n75 11\n80 79 02 00\n74 8c\n66 66 2e 0f 1f 84 00 00 00 00 00\n49 8b 0c c6\n80 39 2d\n75 0c\n80 79 01 2d\n75 06\n80 79 02 00\n74 59\n49 8b 0c c6\n80 39 2d\n75 12\n80 79 01 44\n75 0c\n80 79 02 00\n0f 84 5f ff ff ff\n66 90\n49 8b 2c c6\nbf 46 ec 41 00\nba 02 00 00 00\n48 89 ee\ne8 fa a2 ff ff\n85 c0\n75 17\n48 83 c5 02\n48 89 ef\ne8 5a 01 00 00\nff c3\n44 39 fb\n0f 8c 3f ff ff ff\n89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\nff c3\neb ef\n'
p2658
S'.text:0000000000408390\n.text:0000000000408391\n.text:0000000000408393\n.text:0000000000408395\n.text:0000000000408396\n.text:0000000000408397\n.text:000000000040839a\n.text:000000000040839d\n.text:00000000004083a2\n.text:00000000004083a6\n.text:00000000004083ac\n.text:00000000004083b1\n.text:00000000004083b3\n.text:00000000004083b8\n.text:00000000004083bd\n.text:00000000004083c2\n.text:00000000004083c7\n.text:00000000004083cc\n.text:00000000004083d1\n.text:00000000004083d3\n.text:00000000004083d8\n.text:00000000004083dd\n.text:00000000004083e0\n.text:00000000004083e5\n.text:00000000004083ea\n.text:00000000004083f0\n.text:00000000004083f3\n.text:00000000004083f7\n.text:00000000004083fa\n.text:00000000004083fc\n.text:0000000000408400\n.text:0000000000408402\n.text:0000000000408406\n.text:0000000000408408\n.text:0000000000408410\n.text:0000000000408414\n.text:0000000000408417\n.text:0000000000408419\n.text:000000000040841d\n.text:000000000040841f\n.text:0000000000408423\n.text:0000000000408425\n.text:0000000000408430\n.text:0000000000408434\n.text:0000000000408437\n.text:0000000000408439\n.text:000000000040843d\n.text:000000000040843f\n.text:0000000000408443\n.text:0000000000408445\n.text:0000000000408450\n.text:0000000000408454\n.text:0000000000408457\n.text:0000000000408459\n.text:000000000040845d\n.text:000000000040845f\n.text:0000000000408463\n.text:0000000000408465\n.text:0000000000408469\n.text:000000000040846c\n.text:000000000040846e\n.text:0000000000408472\n.text:0000000000408474\n.text:0000000000408478\n.text:000000000040847e\n.text:0000000000408480\n.text:0000000000408484\n.text:0000000000408489\n.text:000000000040848e\n.text:0000000000408491\n.text:0000000000408496\n.text:0000000000408498\n.text:000000000040849a\n.text:000000000040849e\n.text:00000000004084a1\n.text:00000000004084a6\n.text:00000000004084a8\n.text:00000000004084ab\n.text:00000000004084b1\n.text:00000000004084b3\n.text:00000000004084b7\n.text:00000000004084b8\n.text:00000000004084ba\n.text:00000000004084bc\n.text:00000000004084bd\n.text:00000000004084be\n.text:00000000004084c0\n'
p2659
tp2660
sS'visit'
p2661
(S'\n__stdcall visit(FTS * p, FTSENT * ent, stat * pstat)\n'
p2662
V\u000avoid visit(FTS *p,FTSENT *ent,stat *pstat)\u000a\u000a{\u000a  predicate *p_00;\u000a  \u000a  state.have_stat = (_Bool)((ent->fts_info & 0xfffe) != 10);\u000a  state.rel_pathname = ent->fts_accpath;\u000a  state.cwd_dir_fd = p->fts_cwd_fd;\u000a  p_00 = get_eval_tree();\u000a  apply_predicate(ent->fts_path,pstat,p_00);\u000a  if (state.stop_at_current_level != false) {\u000a    fts_set(p,ent);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p2663
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R14,RDI\nMOVZX EAX,word ptr [RBX + 0x70]\nAND EAX,0xfffe\nCMP EAX,0xa\nSETNZ byte ptr [0x0062f004]\nMOV RAX,qword ptr [RBX + 0x30]\nMOV qword ptr [0x0062f010],RAX\nMOV EAX,dword ptr [R14 + 0x2c]\nMOV dword ptr [0x0062f018],EAX\nCALL 0x004058b0\nMOV RDI,qword ptr [RBX + 0x38]\nMOV RSI,R15\nMOV RDX,RAX\nCALL 0x004088a0\nCMP byte ptr [0x0062f020],0x0\nJZ 0x00403c18\nMOV EDX,0x4\nMOV RDI,R14\nMOV RSI,RBX\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00419be0\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p2664
S'41 57\n41 56\n53\n49 89 d7\n48 89 f3\n49 89 fe\n0f b7 43 70\n25 fe ff 00 00\n83 f8 0a\n0f 95 05 33 b4 22 00\n48 8b 43 30\n48 89 05 34 b4 22 00\n41 8b 46 2c\n89 05 32 b4 22 00\ne8 c5 1c 00 00\n48 8b 7b 38\n4c 89 fe\n48 89 c2\ne8 a6 4c 00 00\n80 3d 1f b4 22 00 00\n74 15\nba 04 00 00 00\n4c 89 f7\n48 89 de\n5b\n41 5e\n41 5f\ne9 c8 5f 01 00\n5b\n41 5e\n41 5f\nc3\n'
p2665
S'.text:0000000000403bb0\n.text:0000000000403bb2\n.text:0000000000403bb4\n.text:0000000000403bb5\n.text:0000000000403bb8\n.text:0000000000403bbb\n.text:0000000000403bbe\n.text:0000000000403bc2\n.text:0000000000403bc7\n.text:0000000000403bca\n.text:0000000000403bd1\n.text:0000000000403bd5\n.text:0000000000403bdc\n.text:0000000000403be0\n.text:0000000000403be6\n.text:0000000000403beb\n.text:0000000000403bef\n.text:0000000000403bf2\n.text:0000000000403bf5\n.text:0000000000403bfa\n.text:0000000000403c01\n.text:0000000000403c03\n.text:0000000000403c08\n.text:0000000000403c0b\n.text:0000000000403c0e\n.text:0000000000403c0f\n.text:0000000000403c11\n.text:0000000000403c13\n.text:0000000000403c18\n.text:0000000000403c19\n.text:0000000000403c1b\n.text:0000000000403c1d\n'
p2666
tp2667
sS'pred_cost_compare'
p2668
(S'\n__stdcall pred_cost_compare(predicate * p1, predicate * p2)\n'
p2669
V\u000aint pred_cost_compare(predicate *p1,predicate *p2)\u000a\u000a{\u000a  float fVar1;\u000a  float fVar2;\u000a  int iVar3;\u000a  char in_DL;\u000a  \u000a  if (p1->p_cost == p2->p_cost) {\u000a    fVar1 = p1->est_success_rate;\u000a    fVar2 = p2->est_success_rate;\u000a    iVar3 = 0;\u000a    if (fVar1 != fVar2) {\u000a      if (in_DL != 0) {\u000a        iVar3 = 1;\u000a        if (fVar1 < fVar2) {\u000a          iVar3 = -1;\u000a        }\u000a        return iVar3;\u000a      }\u000a      iVar3 = -1;\u000a      if (fVar1 < fVar2) {\u000a        iVar3 = 1;\u000a      }\u000a      return iVar3;\u000a    }\u000a  }\u000a  else {\u000a    iVar3 = 1;\u000a    if (p1->p_cost < p2->p_cost) {\u000a      iVar3 = -1;\u000a    }\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p2670
S'MOV EAX,dword ptr [RSI + 0x20]\nCMP dword ptr [RDI + 0x20],EAX\nJNZ 0x004073d0\nMOVSS XMM0,dword ptr [RDI + 0x24]\nMOVSS XMM1,dword ptr [RSI + 0x24]\nXOR EAX,EAX\nUCOMISS XMM0,XMM1\nJNZ 0x004073bb\nJNP 0x004073dd\nTEST DL,DL\nJZ 0x004073de\nUCOMISS XMM1,XMM0\nMOV ECX,0xffffffff\nMOV EAX,0x1\nCMOVA EAX,ECX\nRET\nMOV ECX,0xffffffff\nMOV EAX,0x1\nCMOVC EAX,ECX\nRET\nUCOMISS XMM1,XMM0\nMOV ECX,0x1\nMOV EAX,0xffffffff\nCMOVA EAX,ECX\nRET\n'
p2671
S'8b 46 20\n39 47 20\n75 28\nf3 0f 10 47 24\nf3 0f 10 4e 24\n31 c0\n0f 2e c1\n75 02\n7b 22\n84 d2\n74 1f\n0f 2e c8\nb9 ff ff ff ff\nb8 01 00 00 00\n0f 47 c1\nc3\nb9 ff ff ff ff\nb8 01 00 00 00\n0f 42 c1\nc3\n0f 2e c8\nb9 01 00 00 00\nb8 ff ff ff ff\n0f 47 c1\nc3\n'
p2672
S'.text:00000000004073a0\n.text:00000000004073a3\n.text:00000000004073a6\n.text:00000000004073a8\n.text:00000000004073ad\n.text:00000000004073b2\n.text:00000000004073b4\n.text:00000000004073b7\n.text:00000000004073b9\n.text:00000000004073bb\n.text:00000000004073bd\n.text:00000000004073bf\n.text:00000000004073c2\n.text:00000000004073c7\n.text:00000000004073cc\n.text:00000000004073cf\n.text:00000000004073d0\n.text:00000000004073d5\n.text:00000000004073da\n.text:00000000004073dd\n.text:00000000004073de\n.text:00000000004073e1\n.text:00000000004073e6\n.text:00000000004073eb\n.text:00000000004073ee\n'
p2673
tp2674
sS'fd_ring_clear'
p2675
(S'\n__stdcall fd_ring_clear(I_ring * fd_ring)\n'
p2676
V\u000avoid fd_ring_clear(I_ring *fd_ring)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int __fd;\u000a  \u000a  while (_Var1 = i_ring_empty(fd_ring), _Var1 == false) {\u000a    __fd = i_ring_pop(fd_ring);\u000a    if (-1 < __fd) {\u000a      close(__fd);\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p2677
S'PUSH RBX\nMOV RBX,RDI\nJMP 0x004189c7\nMOV EDI,EAX\nCALL 0x00402ac0\nMOV RDI,RBX\nCALL 0x0041bc40\nTEST AL,AL\nJNZ 0x004189e1\nMOV RDI,RBX\nCALL 0x0041bc90\nTEST EAX,EAX\nJNS 0x004189c0\nJMP 0x004189c7\nPOP RBX\nRET\n'
p2678
S'53\n48 89 fb\neb 11\n89 c7\ne8 f9 a0 fe ff\n48 89 df\ne8 71 32 00 00\n84 c0\n75 0e\n48 89 df\ne8 b5 32 00 00\n85 c0\n79 e1\neb e6\n5b\nc3\n'
p2679
S'.text:00000000004189b0\n.text:00000000004189b1\n.text:00000000004189b4\n.text:00000000004189c0\n.text:00000000004189c2\n.text:00000000004189c7\n.text:00000000004189ca\n.text:00000000004189cf\n.text:00000000004189d1\n.text:00000000004189d3\n.text:00000000004189d6\n.text:00000000004189db\n.text:00000000004189dd\n.text:00000000004189df\n.text:00000000004189e1\n.text:00000000004189e2\n'
p2680
tp2681
sS'cleanup_initial_cwd'
p2682
(S'\n__stdcall cleanup_initial_cwd()\n'
p2683
V\u000avoid cleanup_initial_cwd(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  undefined8 uVar5;\u000a  char *pcVar6;\u000a  \u000a  iVar2 = restore_cwd(initial_wd);\u000a  if (iVar2 != 0) {\u000a    puVar3 = (uint *)__errno_location();\u000a    uVar1 = *puVar3;\u000a    uVar4 = dcgettext(0,"Failed to restore initial working directory%s%s",5);\u000a    if (initial_wd->desc < 0) {\u000a      uVar5 = 0x41e69a;\u000a      if (initial_wd->name != (char *)0x0) {\u000a        uVar5 = 0x421bd9;\u000a      }\u000a    }\u000a    else {\u000a      uVar5 = 0x41e69a;\u000a    }\u000a    if (initial_wd->desc < 0) {\u000a      pcVar6 = "";\u000a      if (initial_wd->name != (char *)0x0) {\u000a        pcVar6 = initial_wd->name;\u000a      }\u000a    }\u000a    else {\u000a      pcVar6 = "";\u000a    }\u000a    error(0,(ulong)uVar1,uVar4,uVar5,pcVar6);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(1);\u000a  }\u000a  free_cwd(initial_wd);\u000a  free(initial_wd);\u000a  initial_wd = (saved_cwd *)0x0;\u000a  return;\u000a}\u000a\u000a
p2684
S'PUSH RBX\nMOV RDI,qword ptr [0x0062de78]\nCALL 0x004169f0\nTEST EAX,EAX\nJNZ 0x00407f66\nMOV RDI,qword ptr [0x0062de78]\nCALL 0x00416a10\nMOV RDI,qword ptr [0x0062de78]\nCALL 0x00402710\nMOV qword ptr [0x0062de78],0x0\nPOP RBX\nRET\nCALL 0x00402770\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x41eb24\nMOV EDX,0x5\nCALL 0x00402910\nMOV RDX,RAX\nMOV RAX,qword ptr [0x0062de78]\nCMP dword ptr [RAX],0x0\nJNS 0x00407fa2\nCMP qword ptr [RAX + 0x8],0x0\nMOV EAX,0x421bd9\nMOV ECX,0x41e69a\nCMOVNZ RCX,RAX\nJMP 0x00407fa7\nMOV ECX,0x41e69a\nMOV RAX,qword ptr [0x0062de78]\nCMP dword ptr [RAX],0x0\nJNS 0x00407fc6\nMOV RAX,qword ptr [RAX + 0x8]\nTEST RAX,RAX\nMOV R8D,0x41e69a\nCMOVNZ R8,RAX\nJMP 0x00407fcc\nMOV R8D,0x41e69a\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nCALL 0x00402d90\nMOV EDI,0x1\nCALL 0x004027b0\n'
p2685
S'53\n48 8b 3d 40 5f 22 00\ne8 b3 ea 00 00\n85 c0\n75 25\n48 8b 3d 30 5f 22 00\ne8 c3 ea 00 00\n48 8b 3d 24 5f 22 00\ne8 b7 a7 ff ff\n48 c7 05 14 5f 22 00 00 00 00 00\n5b\nc3\ne8 05 a8 ff ff\n8b 18\n31 ff\nbe 24 eb 41 00\nba 05 00 00 00\ne8 92 a9 ff ff\n48 89 c2\n48 8b 05 f0 5e 22 00\n83 38 00\n79 15\n48 83 78 08 00\nb8 d9 1b 42 00\nb9 9a e6 41 00\n48 0f 45 c8\neb 05\nb9 9a e6 41 00\n48 8b 05 ca 5e 22 00\n83 38 00\n79 13\n48 8b 40 08\n48 85 c0\n41 b8 9a e6 41 00\n4c 0f 45 c0\neb 06\n41 b8 9a e6 41 00\n31 ff\n31 c0\n89 de\ne8 b9 ad ff ff\nbf 01 00 00 00\ne8 cf a7 ff ff\n'
p2686
S'.text:0000000000407f30\n.text:0000000000407f31\n.text:0000000000407f38\n.text:0000000000407f3d\n.text:0000000000407f3f\n.text:0000000000407f41\n.text:0000000000407f48\n.text:0000000000407f4d\n.text:0000000000407f54\n.text:0000000000407f59\n.text:0000000000407f64\n.text:0000000000407f65\n.text:0000000000407f66\n.text:0000000000407f6b\n.text:0000000000407f6d\n.text:0000000000407f6f\n.text:0000000000407f74\n.text:0000000000407f79\n.text:0000000000407f7e\n.text:0000000000407f81\n.text:0000000000407f88\n.text:0000000000407f8b\n.text:0000000000407f8d\n.text:0000000000407f92\n.text:0000000000407f97\n.text:0000000000407f9c\n.text:0000000000407fa0\n.text:0000000000407fa2\n.text:0000000000407fa7\n.text:0000000000407fae\n.text:0000000000407fb1\n.text:0000000000407fb3\n.text:0000000000407fb7\n.text:0000000000407fba\n.text:0000000000407fc0\n.text:0000000000407fc4\n.text:0000000000407fc6\n.text:0000000000407fcc\n.text:0000000000407fce\n.text:0000000000407fd0\n.text:0000000000407fd2\n.text:0000000000407fd7\n.text:0000000000407fdc\n'
p2687
tp2688
sS'fallback_stat'
p2689
(S'\n__stdcall fallback_stat(char * name, stat * p)\n'
p2690
V\u000aint fallback_stat(char *name,stat *p)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  int in_EDX;\u000a  \u000a  piVar2 = __errno_location();\u000a  if ((*piVar2 != 0x14) && (*piVar2 != 2)) {\u000a    return in_EDX;\u000a  }\u000a  if (((byte)options.debug_options & 2) != 0) {\u000a    fprintf(stderr,"fallback_stat(): stat(%s) failed; falling back on lstat()\u005cn",name);\u000a  }\u000a  iVar1 = fstatat(state.cwd_dir_fd,name,(stat *)p,0x100);\u000a  return iVar1;\u000a}\u000a\u000a
p2691
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EBP,EDX\nMOV R14,RSI\nMOV RBX,RDI\nCALL 0x00402770\nMOV EAX,dword ptr [RAX]\nCMP EAX,0x14\nJZ 0x004080ad\nCMP EAX,0x2\nJNZ 0x004080d0\nTEST byte ptr [0x0062f080],0x2\nJNZ 0x004080d7\nMOV EDI,dword ptr [0x0062f018]\nMOV ECX,0x100\nMOV RSI,RBX\nMOV RDX,R14\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x0041c4c0\nMOV EAX,EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\nMOV RDI,qword ptr [0x0062de60]\nMOV ESI,0x41eb54\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00402ba0\nJMP 0x004080b6\n'
p2692
S'55\n41 56\n53\n89 d5\n49 89 f6\n48 89 fb\ne8 cf a6 ff ff\n8b 00\n83 f8 14\n74 05\n83 f8 02\n75 23\nf6 05 cc 6f 22 00 02\n75 21\n8b 3d 5c 6f 22 00\nb9 00 01 00 00\n48 89 de\n4c 89 f2\n5b\n41 5e\n5d\ne9 f0 43 01 00\n89 e8\n5b\n41 5e\n5d\nc3\n48 8b 3d 82 5d 22 00\nbe 54 eb 41 00\n31 c0\n48 89 da\ne8 b3 aa ff ff\neb c7\n'
p2693
S'.text:0000000000408090\n.text:0000000000408091\n.text:0000000000408093\n.text:0000000000408094\n.text:0000000000408096\n.text:0000000000408099\n.text:000000000040809c\n.text:00000000004080a1\n.text:00000000004080a3\n.text:00000000004080a6\n.text:00000000004080a8\n.text:00000000004080ab\n.text:00000000004080ad\n.text:00000000004080b4\n.text:00000000004080b6\n.text:00000000004080bc\n.text:00000000004080c1\n.text:00000000004080c4\n.text:00000000004080c7\n.text:00000000004080c8\n.text:00000000004080ca\n.text:00000000004080cb\n.text:00000000004080d0\n.text:00000000004080d2\n.text:00000000004080d3\n.text:00000000004080d5\n.text:00000000004080d6\n.text:00000000004080d7\n.text:00000000004080de\n.text:00000000004080e3\n.text:00000000004080e5\n.text:00000000004080e8\n.text:00000000004080ed\n'
p2694
tp2695
sS'fts_maxarglen'
p2696
(S'\n__stdcall fts_maxarglen(char * * argv)\n'
p2697
V\u000asize_t fts_maxarglen(char **argv)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *__s;\u000a  ulong uVar2;\u000a  size_t sVar3;\u000a  \u000a  __s = *argv;\u000a  if (__s == (char *)0x0) {\u000a    sVar3 = 1;\u000a  }\u000a  else {\u000a    argv = argv + 1;\u000a    uVar2 = 0;\u000a    do {\u000a      sVar1 = strlen(__s);\u000a      if (uVar2 < sVar1) {\u000a        uVar2 = sVar1;\u000a      }\u000a      __s = *argv;\u000a      argv = argv + 1;\u000a    } while (__s != (char *)0x0);\u000a    sVar3 = uVar2 + 1;\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p2698
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV RDI,qword ptr [RBX]\nTEST RDI,RDI\nJZ 0x0041840d\nADD RBX,0x8\nXOR R14D,R14D\nNOP word ptr CS:[RAX + RAX*0x1]\nCALL 0x00402930\nCMP RAX,R14\nCMOVA R14,RAX\nMOV RDI,qword ptr [RBX]\nADD RBX,0x8\nTEST RDI,RDI\nJNZ 0x004183f0\nINC R14\nJMP 0x00418413\nMOV R14D,0x1\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p2699
S'41 56\n53\n50\n48 89 fb\n48 8b 3b\n48 85 ff\n74 2e\n48 83 c3 08\n45 31 f6\n66 2e 0f 1f 84 00 00 00 00 00\ne8 3b a5 fe ff\n4c 39 f0\n4c 0f 47 f0\n48 8b 3b\n48 83 c3 08\n48 85 ff\n75 e8\n49 ff c6\neb 06\n41 be 01 00 00 00\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p2700
S'.text:00000000004183d0\n.text:00000000004183d2\n.text:00000000004183d3\n.text:00000000004183d4\n.text:00000000004183d7\n.text:00000000004183da\n.text:00000000004183dd\n.text:00000000004183df\n.text:00000000004183e3\n.text:00000000004183e6\n.text:00000000004183f0\n.text:00000000004183f5\n.text:00000000004183f8\n.text:00000000004183fc\n.text:00000000004183ff\n.text:0000000000418403\n.text:0000000000418406\n.text:0000000000418408\n.text:000000000041840b\n.text:000000000041840d\n.text:0000000000418413\n.text:0000000000418416\n.text:000000000041841a\n.text:000000000041841b\n.text:000000000041841d\n'
p2701
tp2702
sS'mktime_internal'
p2703
(S'\n__stdcall mktime_internal(tm * tp, anon_subr_tm_ptr_time_t_ptr_tm_ptr * convert, mktime_offset_t * offset)\n'
p2704
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000atime_t mktime_internal(tm *tp,tm *(*convert)(time_t *,tm *),mktime_offset_t *offset)\u000a\u000a{\u000a  uint uVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  long_int lVar4;\u000a  tm *ptVar5;\u000a  long_int lVar6;\u000a  long lVar7;\u000a  uint uVar8;\u000a  int iVar9;\u000a  long lVar10;\u000a  long lVar11;\u000a  long_int lVar12;\u000a  bool bVar13;\u000a  long_int local_108;\u000a  uint local_fc;\u000a  uint local_f8;\u000a  uint local_f4;\u000a  tm *(*local_f0)(time_t *,tm *);\u000a  int local_e4;\u000a  long_int local_e0;\u000a  long local_d8;\u000a  long local_d0;\u000a  long local_c8;\u000a  tm *local_c0;\u000a  long local_b8;\u000a  long *local_b0;\u000a  long local_a8;\u000a  int local_a0;\u000a  int iStack156;\u000a  int iStack152;\u000a  int iStack148;\u000a  int local_90;\u000a  int iStack140;\u000a  int iStack136;\u000a  int iStack132;\u000a  int local_80;\u000a  undefined4 uStack124;\u000a  undefined4 uStack120;\u000a  undefined4 uStack116;\u000a  char *local_70;\u000a  tm local_68;\u000a  \u000a  uVar1 = tp->tm_sec;\u000a  local_a8 = (long)(int)uVar1;\u000a  local_f8 = tp->tm_min;\u000a  local_fc = tp->tm_hour;\u000a  iVar9 = tp->tm_mon;\u000a  local_e4 = tp->tm_isdst;\u000a  iVar3 = iVar9 / 0xc + (iVar9 >> 0x1f) + ((uint)(iVar9 / 6 + (iVar9 >> 0x1f)) >> 0x1f);\u000a  uVar8 = iVar9 + iVar3 * -0xc;\u000a  local_d0 = (long)(int)(iVar3 - (uVar8 >> 0x1f)) + (long)tp->tm_year;\u000a  iVar9 = tp->tm_mday;\u000a  local_f0 = convert;\u000a  local_c0 = tp;\u000a  _Var2 = leapyear(local_d0);\u000a  iVar3 = local_e4;\u000a  bVar13 = false;\u000a  local_d8 = (long)iVar9 + -1 +\u000a             (ulong)__mon_yday\u000a                    [(ulong)_Var2 * 0xd + (long)(int)(((int)uVar8 >> 0x1f & 0xcU) + uVar8)];\u000a  uVar8 = 0;\u000a  if (-1 < local_a8) {\u000a    uVar8 = uVar1;\u000a  }\u000a  local_f4 = 0x3b;\u000a  if ((int)uVar8 < 0x3c) {\u000a    local_f4 = uVar8;\u000a  }\u000a  local_b8 = -*offset;\u000a  local_b0 = offset;\u000a  local_e0 = ydhms_diff(local_d0,local_d8,local_fc,local_f8,local_f4,0x46);\u000a  local_108 = local_e0;\u000a  ranged_convert(local_f0,&local_108,(tm *)&local_a0);\u000a  lVar4 = guess_time_tm(local_d0,local_d8,(ulong)local_fc,(tm *)(ulong)local_f8);\u000a  if (local_108 != lVar4) {\u000a    iVar9 = -6;\u000a    lVar6 = local_e0;\u000a    lVar12 = local_e0;\u000a    do {\u000a      lVar7 = local_108;\u000a      if ((local_108 == lVar6) && (local_108 != lVar12)) {\u000a        if (local_80 < 0) goto LAB_0041a2b1;\u000a        if (iVar3 < 0) {\u000a          if (bVar13 <= (local_80 != 0)) goto LAB_0041a2b1;\u000a        }\u000a        else {\u000a          if ((iVar3 != 0) != (local_80 != 0)) goto LAB_0041a2b1;\u000a        }\u000a      }\u000a      iVar9 = iVar9 + 1;\u000a      if (iVar9 == 0) {\u000a        return -1;\u000a      }\u000a      bVar13 = local_80 != 0;\u000a      local_108 = lVar4;\u000a      ranged_convert(local_f0,&local_108,(tm *)&local_a0);\u000a      lVar4 = guess_time_tm(local_d0,local_d8,(ulong)local_fc,(tm *)(ulong)local_f8);\u000a      lVar6 = lVar12;\u000a      lVar12 = lVar7;\u000a    } while (local_108 != lVar4);\u000a  }\u000a  _Var2 = isdst_differ();\u000a  lVar7 = local_108;\u000a  if (_Var2 != false) {\u000a    lVar10 = 0x92c70;\u000a    do {\u000a      lVar11 = -1;\u000a      do {\u000a        local_c8 = lVar11 * lVar10 + lVar7;\u000a        if (!SCARRY8(lVar11 * lVar10,lVar7)) {\u000a          ranged_convert(local_f0,&local_c8,&local_68);\u000a          _Var2 = isdst_differ();\u000a          if (_Var2 == false) {\u000a            local_108 = guess_time_tm(local_d0,local_d8,(ulong)local_fc,(tm *)(ulong)local_f8);\u000a            ranged_convert(local_f0,&local_108,(tm *)&local_a0);\u000a            goto LAB_0041a2b1;\u000a          }\u000a        }\u000a        bVar13 = lVar11 < 0;\u000a        lVar11 = lVar11 + 2;\u000a      } while (bVar13);\u000a      lVar10 = lVar10 + 0x92c70;\u000a    } while (lVar10 < 0x1005fe28);\u000a  }\u000aLAB_0041a2b1:\u000a  *local_b0 = local_108 - ((long)(int)local_b8 + local_e0);\u000a  if ((int)local_a8 != local_a0) {\u000a    lVar7 = (local_a8 - (ulong)local_f4) + (ulong)(local_a0 == 0x3c && local_f4 == 0);\u000a    bVar13 = SCARRY8(local_108,lVar7);\u000a    local_108 = local_108 + lVar7;\u000a    if (bVar13) {\u000a      return -1;\u000a    }\u000a    ptVar5 = convert_time(local_f0,local_108,(tm *)&local_a0);\u000a    if (ptVar5 == (tm *)0x0) {\u000a      return -1;\u000a    }\u000a  }\u000a  local_c0->tm_zone = local_70;\u000a  local_c0->tm_isdst = local_80;\u000a  *(undefined4 *)&local_c0->field_0x24 = uStack124;\u000a  *(undefined4 *)&local_c0->tm_gmtoff = uStack120;\u000a  *(undefined4 *)((long)&local_c0->tm_gmtoff + 4) = uStack116;\u000a  local_c0->tm_mon = local_90;\u000a  local_c0->tm_year = iStack140;\u000a  local_c0->tm_wday = iStack136;\u000a  local_c0->tm_yday = iStack132;\u000a  local_c0->tm_sec = local_a0;\u000a  local_c0->tm_min = iStack156;\u000a  local_c0->tm_hour = iStack152;\u000a  local_c0->tm_mday = iStack148;\u000a  return local_108;\u000a}\u000a\u000a
p2705
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xd8\nMOV R12,RDX\nMOV qword ptr [RSP + 0x18],RSI\nMOVSXD RBP,dword ptr [RDI]\nMOV EAX,dword ptr [RDI + 0x4]\nMOV dword ptr [RSP + 0x10],EAX\nMOV EAX,dword ptr [RDI + 0x8]\nMOV dword ptr [RSP + 0xc],EAX\nMOVSXD RBX,dword ptr [RDI + 0x10]\nMOV EAX,dword ptr [RDI + 0x20]\nMOV dword ptr [RSP + 0x24],EAX\nIMUL RAX,RBX,0x2aaaaaab\nMOV RCX,RAX\nSHR RCX,0x3f\nSAR RAX,0x21\nADD EAX,ECX\nLEA ECX,[RAX*0x4]\nLEA ECX,[RCX + RCX*0x2]\nSUB EBX,ECX\nMOV ECX,EBX\nSHR ECX,0x1f\nSUB EAX,ECX\nMOVSXD RCX,dword ptr [RDI + 0x14]\nMOVSXD R13,EAX\nADD R13,RCX\nMOV qword ptr [RSP + 0x48],RDI\nMOVSXD R15,dword ptr [RDI + 0xc]\nMOV RDI,R13\nCALL 0x0041a370\nMOVZX EAX,AL\nMOV ECX,EBX\nSAR ECX,0x1f\nAND ECX,0xc\nADD ECX,EBX\nIMUL RAX,RAX,0x1a\nXOR EBX,EBX\nTEST RBP,RBP\nMOVSXD RCX,ECX\nMOVZX EAX,word ptr [0x4252c0 + RAX + RCX*0x2]\nLEA R14,[R15 + RAX*0x1 + -0x1]\nMOV EAX,0x0\nMOV qword ptr [RSP + 0x60],RBP\nCMOVNS EAX,EBP\nCMP EAX,0x3c\nMOV R15D,0x3b\nCMOVL R15D,EAX\nMOV qword ptr [RSP + 0x58],R12\nMOV RBP,qword ptr [R12]\nMOV R12D,dword ptr [RSP + 0x24]\nNEG RBP\nMOV R9D,0x46\nMOV RDI,R13\nMOV RSI,R14\nMOV EDX,dword ptr [RSP + 0xc]\nMOV ECX,dword ptr [RSP + 0x10]\nMOV R8D,R15D\nMOV RAX,RBP\nMOV qword ptr [RSP + 0x50],RAX\nPUSH RBP\nPUSH 0x0\nPUSH 0x0\nPUSH 0x0\nCALL 0x0041a3d0\nADD RSP,0x20\nMOV RBP,RAX\nMOV qword ptr [RSP],RBP\nMOV RSI,RSP\nLEA RDX,[RSP + 0x68]\nMOV RDI,qword ptr [RSP + 0x18]\nCALL 0x0041a5d0\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x40],R13\nMOV RDI,R13\nMOV qword ptr [RSP + 0x38],R14\nMOV RSI,R14\nMOV EDX,dword ptr [RSP + 0x14]\nMOV ECX,dword ptr [RSP + 0x18]\nMOV dword ptr [RSP + 0x1c],R15D\nMOV R8D,R15D\nMOV qword ptr [RSP + 0x30],RBP\nMOV R9,RBP\nPUSH RAX\nCALL 0x0041a540\nADD RSP,0x10\nMOV R13,RAX\nMOV RAX,qword ptr [RSP]\nCMP RAX,R13\nMOV R15D,R12D\nJZ 0x0041a1e0\nMOV EBP,0xfffffffa\nMOV R14,qword ptr [RSP + 0x28]\nMOV RCX,R14\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP RAX,RCX\nJNZ 0x0041a170\nCMP RAX,R14\nJZ 0x0041a170\nMOV EAX,dword ptr [0x88 + RSP]\nTEST EAX,EAX\nJS 0x0041a2b1\nTEST R12D,R12D\nJS 0x0041a152\nTEST EAX,EAX\nSETNZ AL\nTEST R12D,R12D\nSETNZ CL\nXOR CL,AL\nJZ 0x0041a170\nJMP 0x0041a2b1\nXOR ECX,ECX\nTEST EAX,EAX\nSETNZ CL\nCMP EBX,ECX\nJBE 0x0041a2b1\nNOP dword ptr CS:[RAX + RAX*0x1]\nINC EBP\nJZ 0x0041a34e\nMOV R12,qword ptr [RSP]\nMOV qword ptr [RSP],R13\nXOR EBX,EBX\nCMP dword ptr [0x88 + RSP],0x0\nSETNZ BL\nMOV RDI,qword ptr [RSP + 0x18]\nMOV RSI,RSP\nLEA RDX,[RSP + 0x68]\nCALL 0x0041a5d0\nSUB RSP,0x8\nMOV RDI,qword ptr [RSP + 0x40]\nMOV RSI,qword ptr [RSP + 0x38]\nMOV EDX,dword ptr [RSP + 0x14]\nMOV ECX,dword ptr [RSP + 0x18]\nMOV R8D,dword ptr [RSP + 0x1c]\nMOV R9,R13\nPUSH RAX\nCALL 0x0041a540\nADD RSP,0x10\nMOV R13,RAX\nMOV RAX,qword ptr [RSP]\nCMP RAX,R13\nMOV RCX,R14\nMOV R14,R12\nMOV R12D,R15D\nJNZ 0x0041a120\nMOV ESI,dword ptr [0x88 + RSP]\nMOV EDI,R12D\nCALL 0x0041a690\nTEST AL,AL\nJZ 0x0041a2b1\nMOV RBX,qword ptr [RSP]\nMOV EBP,0x92c70\nLEA R13,[RSP + 0x40]\nLEA R14,[0xa0 + RSP]\nMOV R12,-0x1\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RAX,R12\nIMUL RAX,RBP\nADD RAX,RBX\nMOV qword ptr [RSP + 0x40],RAX\nJO 0x0041a254\nMOV RDI,qword ptr [RSP + 0x18]\nMOV RSI,R13\nMOV RDX,R14\nCALL 0x0041a5d0\nMOV ESI,dword ptr [0xc0 + RSP]\nMOV EDI,R15D\nCALL 0x0041a690\nTEST AL,AL\nJZ 0x0041a270\nTEST R12,R12\nLEA R12,[R12 + 0x2]\nJS 0x0041a220\nADD RBP,0x92c70\nCMP RBP,0x1005fe28\nJL 0x0041a20d\nJMP 0x0041a2b1\nMOV R9,qword ptr [RSP + 0x40]\nSUB RSP,0x8\nMOV RDI,qword ptr [RSP + 0x40]\nMOV RSI,qword ptr [RSP + 0x38]\nMOV EDX,dword ptr [RSP + 0x14]\nMOV ECX,dword ptr [RSP + 0x18]\nMOV R8D,dword ptr [RSP + 0x1c]\nPUSH R14\nCALL 0x0041a540\nADD RSP,0x10\nMOV qword ptr [RSP],RAX\nMOV RSI,RSP\nLEA RDX,[RSP + 0x68]\nMOV RDI,qword ptr [RSP + 0x18]\nCALL 0x0041a5d0\nMOVSXD RAX,dword ptr [RSP + 0x50]\nMOV RSI,qword ptr [RSP]\nADD RAX,qword ptr [RSP + 0x28]\nMOV RCX,RSI\nSUB RCX,RAX\nMOV RAX,qword ptr [RSP + 0x58]\nMOV qword ptr [RAX],RCX\nMOV EAX,dword ptr [RSP + 0x68]\nMOV RDX,qword ptr [RSP + 0x60]\nCMP EDX,EAX\nJZ 0x0041a31a\nMOV EDI,dword ptr [RSP + 0x14]\nTEST EDI,EDI\nSETZ CL\nCMP EAX,0x3c\nSETZ AL\nAND AL,CL\nMOVZX EAX,AL\nMOV ECX,EDI\nSUB RDX,RCX\nADD RDX,RAX\nADD RSI,RDX\nMOV qword ptr [RSP],RSI\nMOV RBX,-0x1\nJO 0x0041a355\nLEA RDX,[RSP + 0x68]\nMOV RDI,qword ptr [RSP + 0x18]\nCALL 0x0041a6b0\nTEST RAX,RAX\nJZ 0x0041a355\nMOV RAX,qword ptr [0x98 + RSP]\nMOV RCX,qword ptr [RSP + 0x48]\nMOV qword ptr [RCX + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [RSP + 0x68]\nMOVUPS XMM1,xmmword ptr [RSP + 0x78]\nMOVUPS XMM2,xmmword ptr [0x88 + RSP]\nMOVUPS xmmword ptr [RCX + 0x20],XMM2\nMOVUPS xmmword ptr [RCX + 0x10],XMM1\nMOVUPS xmmword ptr [RCX],XMM0\nMOV RBX,qword ptr [RSP]\nJMP 0x0041a355\nMOV RBX,-0x1\nMOV RAX,RBX\nADD RSP,0xd8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2706
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec d8 00 00 00\n49 89 d4\n48 89 74 24 18\n48 63 2f\n8b 47 04\n89 44 24 10\n8b 47 08\n89 44 24 0c\n48 63 5f 10\n8b 47 20\n89 44 24 24\n48 69 c3 ab aa aa 2a\n48 89 c1\n48 c1 e9 3f\n48 c1 f8 21\n01 c8\n8d 0c 85 00 00 00 00\n8d 0c 49\n29 cb\n89 d9\nc1 e9 1f\n29 c8\n48 63 4f 14\n4c 63 e8\n49 01 cd\n48 89 7c 24 48\n4c 63 7f 0c\n4c 89 ef\ne8 49 03 00 00\n0f b6 c0\n89 d9\nc1 f9 1f\n83 e1 0c\n01 d9\n48 6b c0 1a\n31 db\n48 85 ed\n48 63 c9\n0f b7 84 48 c0 52 42 00\n4d 8d 74 07 ff\nb8 00 00 00 00\n48 89 6c 24 60\n0f 49 c5\n83 f8 3c\n41 bf 3b 00 00 00\n44 0f 4c f8\n4c 89 64 24 58\n49 8b 2c 24\n44 8b 64 24 24\n48 f7 dd\n41 b9 46 00 00 00\n4c 89 ef\n4c 89 f6\n8b 54 24 0c\n8b 4c 24 10\n45 89 f8\n48 89 e8\n48 89 44 24 50\n55\n6a 00\n6a 00\n6a 00\ne8 2d 03 00 00\n48 83 c4 20\n48 89 c5\n48 89 2c 24\n48 89 e6\n48 8d 54 24 68\n48 8b 7c 24 18\ne8 10 05 00 00\n48 83 ec 08\n4c 89 6c 24 40\n4c 89 ef\n4c 89 74 24 38\n4c 89 f6\n8b 54 24 14\n8b 4c 24 18\n44 89 7c 24 1c\n45 89 f8\n48 89 6c 24 30\n49 89 e9\n50\ne8 4e 04 00 00\n48 83 c4 10\n49 89 c5\n48 8b 04 24\n4c 39 e8\n45 89 e7\n0f 84 d7 00 00 00\nbd fa ff ff ff\n4c 8b 74 24 28\n4c 89 f1\n66 2e 0f 1f 84 00 00 00 00 00\n48 39 c8\n75 4b\n4c 39 f0\n74 46\n8b 84 24 88 00 00 00\n85 c0\n0f 88 78 01 00 00\n45 85 e4\n78 14\n85 c0\n0f 95 c0\n45 85 e4\n0f 95 c1\n30 c1\n74 23\ne9 5f 01 00 00\n31 c9\n85 c0\n0f 95 c1\n39 cb\n0f 86 50 01 00 00\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\nff c5\n0f 84 d6 01 00 00\n4c 8b 24 24\n4c 89 2c 24\n31 db\n83 bc 24 88 00 00 00 00\n0f 95 c3\n48 8b 7c 24 18\n48 89 e6\n48 8d 54 24 68\ne8 31 04 00 00\n48 83 ec 08\n48 8b 7c 24 40\n48 8b 74 24 38\n8b 54 24 14\n8b 4c 24 18\n44 8b 44 24 1c\n4d 89 e9\n50\ne8 7d 03 00 00\n48 83 c4 10\n49 89 c5\n48 8b 04 24\n4c 39 e8\n4c 89 f1\n4d 89 e6\n45 89 fc\n0f 85 40 ff ff ff\n8b b4 24 88 00 00 00\n44 89 e7\ne8 a1 04 00 00\n84 c0\n0f 84 ba 00 00 00\n48 8b 1c 24\nbd 70 2c 09 00\n4c 8d 6c 24 40\n4c 8d b4 24 a0 00 00 00\n49 c7 c4 ff ff ff ff\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 e0\n48 0f af c5\n48 01 d8\n48 89 44 24 40\n70 23\n48 8b 7c 24 18\n4c 89 ee\n4c 89 f2\ne8 8f 03 00 00\n8b b4 24 c0 00 00 00\n44 89 ff\ne8 40 04 00 00\n84 c0\n74 1c\n4d 85 e4\n4d 8d 64 24 02\n78 c2\n48 81 c5 70 2c 09 00\n48 81 fd 28 fe 05 10\n7c 9f\neb 41\n4c 8b 4c 24 40\n48 83 ec 08\n48 8b 7c 24 40\n48 8b 74 24 38\n8b 54 24 14\n8b 4c 24 18\n44 8b 44 24 1c\n41 56\ne8 a9 02 00 00\n48 83 c4 10\n48 89 04 24\n48 89 e6\n48 8d 54 24 68\n48 8b 7c 24 18\ne8 1f 03 00 00\n48 63 44 24 50\n48 8b 34 24\n48 03 44 24 28\n48 89 f1\n48 29 c1\n48 8b 44 24 58\n48 89 08\n8b 44 24 68\n48 8b 54 24 60\n39 c2\n74 40\n8b 7c 24 14\n85 ff\n0f 94 c1\n83 f8 3c\n0f 94 c0\n20 c8\n0f b6 c0\n89 f9\n48 29 ca\n48 01 c2\n48 01 d6\n48 89 34 24\n48 c7 c3 ff ff ff ff\n70 4f\n48 8d 54 24 68\n48 8b 7c 24 18\ne8 9b 03 00 00\n48 85 c0\n74 3b\n48 8b 84 24 98 00 00 00\n48 8b 4c 24 48\n48 89 41 30\n0f 10 44 24 68\n0f 10 4c 24 78\n0f 10 94 24 88 00 00 00\n0f 11 51 20\n0f 11 49 10\n0f 11 01\n48 8b 1c 24\neb 07\n48 c7 c3 ff ff ff ff\n48 89 d8\n48 81 c4 d8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2707
S'.text:0000000000419fb0\n.text:0000000000419fb1\n.text:0000000000419fb3\n.text:0000000000419fb5\n.text:0000000000419fb7\n.text:0000000000419fb9\n.text:0000000000419fba\n.text:0000000000419fc1\n.text:0000000000419fc4\n.text:0000000000419fc9\n.text:0000000000419fcc\n.text:0000000000419fcf\n.text:0000000000419fd3\n.text:0000000000419fd6\n.text:0000000000419fda\n.text:0000000000419fde\n.text:0000000000419fe1\n.text:0000000000419fe5\n.text:0000000000419fec\n.text:0000000000419fef\n.text:0000000000419ff3\n.text:0000000000419ff7\n.text:0000000000419ff9\n.text:000000000041a000\n.text:000000000041a003\n.text:000000000041a005\n.text:000000000041a007\n.text:000000000041a00a\n.text:000000000041a00c\n.text:000000000041a010\n.text:000000000041a013\n.text:000000000041a016\n.text:000000000041a01b\n.text:000000000041a01f\n.text:000000000041a022\n.text:000000000041a027\n.text:000000000041a02a\n.text:000000000041a02c\n.text:000000000041a02f\n.text:000000000041a032\n.text:000000000041a034\n.text:000000000041a038\n.text:000000000041a03a\n.text:000000000041a03d\n.text:000000000041a040\n.text:000000000041a048\n.text:000000000041a04d\n.text:000000000041a052\n.text:000000000041a057\n.text:000000000041a05a\n.text:000000000041a05d\n.text:000000000041a063\n.text:000000000041a067\n.text:000000000041a06c\n.text:000000000041a070\n.text:000000000041a075\n.text:000000000041a078\n.text:000000000041a07e\n.text:000000000041a081\n.text:000000000041a084\n.text:000000000041a088\n.text:000000000041a08c\n.text:000000000041a08f\n.text:000000000041a092\n.text:000000000041a097\n.text:000000000041a098\n.text:000000000041a09a\n.text:000000000041a09c\n.text:000000000041a09e\n.text:000000000041a0a3\n.text:000000000041a0a7\n.text:000000000041a0aa\n.text:000000000041a0ae\n.text:000000000041a0b1\n.text:000000000041a0b6\n.text:000000000041a0bb\n.text:000000000041a0c0\n.text:000000000041a0c4\n.text:000000000041a0c9\n.text:000000000041a0cc\n.text:000000000041a0d1\n.text:000000000041a0d4\n.text:000000000041a0d8\n.text:000000000041a0dc\n.text:000000000041a0e1\n.text:000000000041a0e4\n.text:000000000041a0e9\n.text:000000000041a0ec\n.text:000000000041a0ed\n.text:000000000041a0f2\n.text:000000000041a0f6\n.text:000000000041a0f9\n.text:000000000041a0fd\n.text:000000000041a100\n.text:000000000041a103\n.text:000000000041a109\n.text:000000000041a10e\n.text:000000000041a113\n.text:000000000041a116\n.text:000000000041a120\n.text:000000000041a123\n.text:000000000041a125\n.text:000000000041a128\n.text:000000000041a12a\n.text:000000000041a131\n.text:000000000041a133\n.text:000000000041a139\n.text:000000000041a13c\n.text:000000000041a13e\n.text:000000000041a140\n.text:000000000041a143\n.text:000000000041a146\n.text:000000000041a149\n.text:000000000041a14b\n.text:000000000041a14d\n.text:000000000041a152\n.text:000000000041a154\n.text:000000000041a156\n.text:000000000041a159\n.text:000000000041a15b\n.text:000000000041a161\n.text:000000000041a170\n.text:000000000041a172\n.text:000000000041a178\n.text:000000000041a17c\n.text:000000000041a180\n.text:000000000041a182\n.text:000000000041a18a\n.text:000000000041a18d\n.text:000000000041a192\n.text:000000000041a195\n.text:000000000041a19a\n.text:000000000041a19f\n.text:000000000041a1a3\n.text:000000000041a1a8\n.text:000000000041a1ad\n.text:000000000041a1b1\n.text:000000000041a1b5\n.text:000000000041a1ba\n.text:000000000041a1bd\n.text:000000000041a1be\n.text:000000000041a1c3\n.text:000000000041a1c7\n.text:000000000041a1ca\n.text:000000000041a1ce\n.text:000000000041a1d1\n.text:000000000041a1d4\n.text:000000000041a1d7\n.text:000000000041a1da\n.text:000000000041a1e0\n.text:000000000041a1e7\n.text:000000000041a1ea\n.text:000000000041a1ef\n.text:000000000041a1f1\n.text:000000000041a1f7\n.text:000000000041a1fb\n.text:000000000041a200\n.text:000000000041a205\n.text:000000000041a20d\n.text:000000000041a214\n.text:000000000041a220\n.text:000000000041a223\n.text:000000000041a227\n.text:000000000041a22a\n.text:000000000041a22f\n.text:000000000041a231\n.text:000000000041a236\n.text:000000000041a239\n.text:000000000041a23c\n.text:000000000041a241\n.text:000000000041a248\n.text:000000000041a24b\n.text:000000000041a250\n.text:000000000041a252\n.text:000000000041a254\n.text:000000000041a257\n.text:000000000041a25c\n.text:000000000041a25e\n.text:000000000041a265\n.text:000000000041a26c\n.text:000000000041a26e\n.text:000000000041a270\n.text:000000000041a275\n.text:000000000041a279\n.text:000000000041a27e\n.text:000000000041a283\n.text:000000000041a287\n.text:000000000041a28b\n.text:000000000041a290\n.text:000000000041a292\n.text:000000000041a297\n.text:000000000041a29b\n.text:000000000041a29f\n.text:000000000041a2a2\n.text:000000000041a2a7\n.text:000000000041a2ac\n.text:000000000041a2b1\n.text:000000000041a2b6\n.text:000000000041a2ba\n.text:000000000041a2bf\n.text:000000000041a2c2\n.text:000000000041a2c5\n.text:000000000041a2ca\n.text:000000000041a2cd\n.text:000000000041a2d1\n.text:000000000041a2d6\n.text:000000000041a2d8\n.text:000000000041a2da\n.text:000000000041a2de\n.text:000000000041a2e0\n.text:000000000041a2e3\n.text:000000000041a2e6\n.text:000000000041a2e9\n.text:000000000041a2eb\n.text:000000000041a2ee\n.text:000000000041a2f0\n.text:000000000041a2f3\n.text:000000000041a2f6\n.text:000000000041a2f9\n.text:000000000041a2fd\n.text:000000000041a304\n.text:000000000041a306\n.text:000000000041a30b\n.text:000000000041a310\n.text:000000000041a315\n.text:000000000041a318\n.text:000000000041a31a\n.text:000000000041a322\n.text:000000000041a327\n.text:000000000041a32b\n.text:000000000041a330\n.text:000000000041a335\n.text:000000000041a33d\n.text:000000000041a341\n.text:000000000041a345\n.text:000000000041a348\n.text:000000000041a34c\n.text:000000000041a34e\n.text:000000000041a355\n.text:000000000041a358\n.text:000000000041a35f\n.text:000000000041a360\n.text:000000000041a362\n.text:000000000041a364\n.text:000000000041a366\n.text:000000000041a368\n.text:000000000041a369\n'
p2708
tp2709
sS'pred_ipath'
p2710
(S'\n__stdcall pred_ipath(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p2711
V\u000a_Bool pred_ipath(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = fnmatch(*(char **)pred_ptr->args,pathname,0x10);\u000a  return (_Bool)(iVar1 == 0);\u000a}\u000a\u000a
p2712
S'PUSH RAX\nMOV RAX,RDI\nMOV RDI,qword ptr [RDX + 0x38]\nMOV EDX,0x10\nMOV RSI,RAX\nCALL 0x00402a60\nTEST EAX,EAX\nSETZ AL\nPOP RCX\nRET\n'
p2713
S'50\n48 89 f8\n48 8b 7a 38\nba 10 00 00 00\n48 89 c6\ne8 6b e8 ff ff\n85 c0\n0f 94 c0\n59\nc3\n'
p2714
S'.text:00000000004041e0\n.text:00000000004041e1\n.text:00000000004041e4\n.text:00000000004041e8\n.text:00000000004041ed\n.text:00000000004041f0\n.text:00000000004041f5\n.text:00000000004041f7\n.text:00000000004041fa\n.text:00000000004041fb\n'
p2715
tp2716
sS'apply_relative_time'
p2717
(S'\n__stdcall apply_relative_time(parser_control * pc, relative_time rel)\n'
p2718
V\u000avoid apply_relative_time(parser_control *pc,relative_time rel)\u000a\u000a{\u000a  long *plVar1;\u000a  long lVar2;\u000a  int in_ESI;\u000a  \u000a  lVar2 = (long)in_ESI;\u000a  plVar1 = &(pc->rel).ns;\u000a  *plVar1 = *plVar1 + rel.ns * lVar2;\u000a  plVar1 = &(pc->rel).seconds;\u000a  *plVar1 = *plVar1 + rel.seconds * lVar2;\u000a  plVar1 = &(pc->rel).minutes;\u000a  *plVar1 = *plVar1 + rel.minutes * lVar2;\u000a  plVar1 = &(pc->rel).hour;\u000a  *plVar1 = *plVar1 + rel.hour * lVar2;\u000a  plVar1 = &(pc->rel).day;\u000a  *plVar1 = *plVar1 + rel.day * lVar2;\u000a  plVar1 = &(pc->rel).month;\u000a  *plVar1 = *plVar1 + rel.month * lVar2;\u000a  (pc->rel).year = (pc->rel).year + lVar2 * rel.year;\u000a  pc->rels_seen = true;\u000a  return;\u000a}\u000a\u000a
p2719
S'MOVSXD RAX,ESI\nMOV RCX,qword ptr [RSP + 0x38]\nIMUL RCX,RAX\nADD qword ptr [0xa0 + RDI],RCX\nMOV RCX,qword ptr [RSP + 0x30]\nIMUL RCX,RAX\nADD qword ptr [0x98 + RDI],RCX\nMOV RCX,qword ptr [RSP + 0x28]\nIMUL RCX,RAX\nADD qword ptr [0x90 + RDI],RCX\nMOV RCX,qword ptr [RSP + 0x20]\nIMUL RCX,RAX\nADD qword ptr [0x88 + RDI],RCX\nMOV RCX,qword ptr [RSP + 0x18]\nIMUL RCX,RAX\nADD qword ptr [0x80 + RDI],RCX\nMOV RCX,qword ptr [RSP + 0x10]\nIMUL RCX,RAX\nADD qword ptr [RDI + 0x78],RCX\nIMUL RAX,qword ptr [RSP + 0x8]\nADD qword ptr [RDI + 0x70],RAX\nMOV byte ptr [0xa9 + RDI],0x1\nRET\n'
p2720
S'48 63 c6\n48 8b 4c 24 38\n48 0f af c8\n48 01 8f a0 00 00 00\n48 8b 4c 24 30\n48 0f af c8\n48 01 8f 98 00 00 00\n48 8b 4c 24 28\n48 0f af c8\n48 01 8f 90 00 00 00\n48 8b 4c 24 20\n48 0f af c8\n48 01 8f 88 00 00 00\n48 8b 4c 24 18\n48 0f af c8\n48 01 8f 80 00 00 00\n48 8b 4c 24 10\n48 0f af c8\n48 01 4f 78\n48 0f af 44 24 08\n48 01 47 70\nc6 87 a9 00 00 00 01\nc3\n'
p2721
S'.text:00000000004141a0\n.text:00000000004141a3\n.text:00000000004141a8\n.text:00000000004141ac\n.text:00000000004141b3\n.text:00000000004141b8\n.text:00000000004141bc\n.text:00000000004141c3\n.text:00000000004141c8\n.text:00000000004141cc\n.text:00000000004141d3\n.text:00000000004141d8\n.text:00000000004141dc\n.text:00000000004141e3\n.text:00000000004141e8\n.text:00000000004141ec\n.text:00000000004141f3\n.text:00000000004141f8\n.text:00000000004141fc\n.text:0000000000414200\n.text:0000000000414206\n.text:000000000041420a\n.text:0000000000414211\n'
p2722
tp2723
sS'leave_dir'
p2724
(S'\n__stdcall leave_dir(FTS * fts, FTSENT * ent)\n'
p2725
V\u000avoid leave_dir(FTS *fts,FTSENT *ent)\u000a\u000a{\u000a  _ftsent *p_Var1;\u000a  __ino_t *p_Var2;\u000a  void *__ptr;\u000a  __dev_t local_18;\u000a  __ino_t local_10;\u000a  \u000a  if ((*(ushort *)&fts->fts_options & 0x102) != 0) {\u000a    local_18 = ent->fts_statp[0].st_dev;\u000a    local_10 = ent->fts_statp[0].st_ino;\u000a    __ptr = hash_delete((Hash_table *)fts->fts_cycle,&local_18);\u000a    if (__ptr != (void *)0x0) {\u000a      free(__ptr);\u000a      return;\u000a    }\u000aLAB_00419058:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  p_Var1 = ent->fts_parent;\u000a  if ((p_Var1 != (_ftsent *)0x0) && (-1 < p_Var1->fts_level)) {\u000a    p_Var2 = (__ino_t *)fts->fts_cycle;\u000a    if (p_Var2[2] == 0) goto LAB_00419058;\u000a    if ((*p_Var2 == ent->fts_statp[0].st_ino) && (p_Var2[1] == ent->fts_statp[0].st_dev)) {\u000a      p_Var2[1] = p_Var1->fts_statp[0].st_dev;\u000a      *p_Var2 = p_Var1->fts_statp[0].st_ino;\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p2726
S'SUB RSP,0x18\nMOVZX EAX,word ptr [RDI + 0x48]\nTEST AX,0x102\nJZ 0x00419010\nMOV RAX,qword ptr [RSI + 0x78]\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [0x80 + RSI]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RDI,qword ptr [RDI + 0x58]\nMOV RSI,RSP\nCALL 0x004110f0\nTEST RAX,RAX\nJZ 0x00419058\nMOV RDI,RAX\nCALL 0x00402710\nADD RSP,0x18\nRET\nMOV RAX,qword ptr [RSI + 0x8]\nTEST RAX,RAX\nJZ 0x00419053\nCMP qword ptr [RAX + 0x58],0x0\nJS 0x00419053\nMOV RCX,qword ptr [RDI + 0x58]\nCMP qword ptr [RCX + 0x10],0x0\nJZ 0x00419058\nMOV RDX,qword ptr [RCX]\nCMP RDX,qword ptr [0x80 + RSI]\nJNZ 0x00419053\nMOV RDX,qword ptr [RCX + 0x8]\nCMP RDX,qword ptr [RSI + 0x78]\nJNZ 0x00419053\nMOV RDX,qword ptr [RAX + 0x78]\nMOV qword ptr [RCX + 0x8],RDX\nMOV RAX,qword ptr [0x80 + RAX]\nMOV qword ptr [RCX],RAX\nADD RSP,0x18\nRET\nCALL 0x00402750\n'
p2727
S'48 83 ec 18\n0f b7 47 48\n66 a9 02 01\n74 32\n48 8b 46 78\n48 89 04 24\n48 8b 86 80 00 00 00\n48 89 44 24 08\n48 8b 7f 58\n48 89 e6\ne8 f2 80 ff ff\n48 85 c0\n74 55\n48 89 c7\ne8 05 97 fe ff\n48 83 c4 18\nc3\n48 8b 46 08\n48 85 c0\n74 3a\n48 83 78 58 00\n78 33\n48 8b 4f 58\n48 83 79 10 00\n74 2d\n48 8b 11\n48 3b 96 80 00 00 00\n75 1c\n48 8b 51 08\n48 3b 56 78\n75 12\n48 8b 50 78\n48 89 51 08\n48 8b 80 80 00 00 00\n48 89 01\n48 83 c4 18\nc3\ne8 f3 96 fe ff\n'
p2728
S'.text:0000000000418fd0\n.text:0000000000418fd4\n.text:0000000000418fd8\n.text:0000000000418fdc\n.text:0000000000418fde\n.text:0000000000418fe2\n.text:0000000000418fe6\n.text:0000000000418fed\n.text:0000000000418ff2\n.text:0000000000418ff6\n.text:0000000000418ff9\n.text:0000000000418ffe\n.text:0000000000419001\n.text:0000000000419003\n.text:0000000000419006\n.text:000000000041900b\n.text:000000000041900f\n.text:0000000000419010\n.text:0000000000419014\n.text:0000000000419017\n.text:0000000000419019\n.text:000000000041901e\n.text:0000000000419020\n.text:0000000000419024\n.text:0000000000419029\n.text:000000000041902b\n.text:000000000041902e\n.text:0000000000419035\n.text:0000000000419037\n.text:000000000041903b\n.text:000000000041903f\n.text:0000000000419041\n.text:0000000000419045\n.text:0000000000419049\n.text:0000000000419050\n.text:0000000000419053\n.text:0000000000419057\n.text:0000000000419058\n'
p2729
tp2730
sS'lgetfileconat'
p2731
(S'\n__stdcall lgetfileconat(char * file, security_context_t * con)\n'
p2732
V\u000aint lgetfileconat(char *file,security_context_t *con)\u000a\u000a{\u000a  uint uVar1;\u000a  int __fd;\u000a  int iVar2;\u000a  int iVar3;\u000a  saved_cwd *__ptr;\u000a  uint *puVar4;\u000a  int *piVar5;\u000a  security_context_t *con_00;\u000a  char proc_buf [4032];\u000a  saved_cwd local_ff8 [252];\u000a  \u000a  __fd = (int)(char *)((ulong)file & 0xffffffff);\u000a  if ((__fd == -100) || (*(char *)con == '/')) {\u000a    __fd = lgetfilecon((char *)con,con_00);\u000a    return __fd;\u000a  }\u000a  __ptr = (saved_cwd *)openat_proc_name((char *)local_ff8,(char *)((ulong)file & 0xffffffff));\u000a  if (__ptr != (saved_cwd *)0x0) {\u000a    iVar2 = lgetfilecon((char *)__ptr,con_00);\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar1 = *puVar4;\u000a    if (__ptr != local_ff8) {\u000a      free(__ptr);\u000a    }\u000a    if (iVar2 != -1) {\u000a      return iVar2;\u000a    }\u000a    if (((0x26 < uVar1) || ((0x4000102006U >> ((ulong)uVar1 & 0x1f) & 1) == 0)) && (uVar1 != 0x5f))\u000a    {\u000a      *puVar4 = uVar1;\u000a      return -1;\u000a    }\u000a  }\u000a  iVar2 = save_cwd(local_ff8);\u000a  if (iVar2 != 0) {\u000a    puVar4 = (uint *)__errno_location();\u000a    openat_save_fail((ulong)*puVar4);\u000aLAB_0041b1e4:\u000a    puVar4 = (uint *)__errno_location();\u000a                    /* WARNING: Subroutine does not return */\u000a    openat_restore_fail((ulong)*puVar4);\u000a  }\u000a  if ((__fd < 0) || (local_ff8[0].desc != __fd)) {\u000a    __fd = fchdir(__fd);\u000a    if (__fd == 0) {\u000a      iVar2 = lgetfilecon((char *)con,con_00);\u000a      __fd = 0;\u000a      if (iVar2 == -1) {\u000a        piVar5 = __errno_location();\u000a        __fd = *piVar5;\u000a      }\u000a      iVar3 = restore_cwd(local_ff8);\u000a      if (iVar3 != 0) goto LAB_0041b1e4;\u000a      free_cwd(local_ff8);\u000a      if (__fd != 0) {\u000a        piVar5 = __errno_location();\u000a        *piVar5 = __fd;\u000a      }\u000a    }\u000a    else {\u000a      piVar5 = __errno_location();\u000a      __fd = *piVar5;\u000a      free_cwd(local_ff8);\u000a      *piVar5 = __fd;\u000a      iVar2 = -1;\u000a    }\u000a  }\u000a  else {\u000a    free_cwd(local_ff8);\u000a    piVar5 = __errno_location();\u000a    *piVar5 = 9;\u000a    iVar2 = -1;\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p2733
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xfd8\nMOV R14,RDX\nMOV RBX,RSI\nMOV EBP,EDI\nCMP EBP,-0x64\nJZ 0x0041b083\nCMP byte ptr [RBX],0x2f\nJNZ 0x0041b09f\nMOV RDI,RBX\nMOV RSI,R14\nADD RSP,0xfd8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00416ae0\nLEA R13,[RSP + 0x10]\nMOV RDI,R13\nMOV ESI,EBP\nMOV RDX,RBX\nCALL 0x0041c2f0\nMOV R12,RAX\nTEST R12,R12\nJZ 0x0041b10f\nMOV RDI,R12\nMOV RSI,R14\nCALL 0x00416ae0\nMOV R15D,EAX\nCALL 0x00402770\nMOV qword ptr [RSP + 0x8],RAX\nMOV EDX,dword ptr [RAX]\nCMP R12,R13\nJZ 0x0041b0e6\nMOV RDI,R12\nMOV R12D,EDX\nCALL 0x00402710\nMOV EDX,R12D\nCMP R15D,-0x1\nJNZ 0x0041b1c3\nCMP EDX,0x26\nJA 0x0041b1b3\nMOV EAX,EDX\nMOV RCX,0x4000102006\nBT RCX,RAX\nJNC 0x0041b1b3\nLEA RDI,[RSP + 0x10]\nCALL 0x004169a0\nTEST EAX,EAX\nJNZ 0x0041b1d8\nTEST EBP,EBP\nJS 0x0041b148\nCMP dword ptr [RSP + 0x10],EBP\nJNZ 0x0041b148\nLEA RDI,[RSP + 0x10]\nCALL 0x00416a10\nCALL 0x00402770\nMOV dword ptr [RAX],0x9\nMOV R15D,0xffffffff\nJMP 0x0041b1c3\nMOV EDI,EBP\nCALL 0x00402d10\nTEST EAX,EAX\nJZ 0x0041b171\nCALL 0x00402770\nMOV RBX,RAX\nMOV EBP,dword ptr [RBX]\nLEA RDI,[RSP + 0x10]\nCALL 0x00416a10\nMOV dword ptr [RBX],EBP\nMOV R15D,0xffffffff\nJMP 0x0041b1c3\nMOV RDI,RBX\nMOV RSI,R14\nCALL 0x00416ae0\nMOV R15D,EAX\nXOR EBX,EBX\nCMP R15D,-0x1\nJNZ 0x0041b18e\nCALL 0x00402770\nMOV EBX,dword ptr [RAX]\nLEA RDI,[RSP + 0x10]\nCALL 0x004169f0\nTEST EAX,EAX\nJNZ 0x0041b1e4\nLEA RDI,[RSP + 0x10]\nCALL 0x00416a10\nTEST EBX,EBX\nJZ 0x0041b1c3\nCALL 0x00402770\nMOV dword ptr [RAX],EBX\nJMP 0x0041b1c3\nCMP EDX,0x5f\nJZ 0x0041b10f\nMOV RAX,qword ptr [RSP + 0x8]\nMOV dword ptr [RAX],EDX\nMOV EAX,R15D\nADD RSP,0xfd8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00402770\nMOV EDI,dword ptr [RAX]\nCALL 0x00413210\nCALL 0x00402770\nMOV EDI,dword ptr [RAX]\nCALL 0x00413250\n'
p2734
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec d8 0f 00 00\n49 89 d6\n48 89 f3\n89 fd\n83 fd 9c\n74 05\n80 3b 2f\n75 1c\n48 89 df\n4c 89 f6\n48 81 c4 d8 0f 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 41 ba ff ff\n4c 8d 6c 24 10\n4c 89 ef\n89 ee\n48 89 da\ne8 3f 12 00 00\n49 89 c4\n4d 85 e4\n74 56\n4c 89 e7\n4c 89 f6\ne8 1c ba ff ff\n41 89 c7\ne8 a4 76 fe ff\n48 89 44 24 08\n8b 10\n4d 39 ec\n74 0e\n4c 89 e7\n41 89 d4\ne8 2d 76 fe ff\n44 89 e2\n41 83 ff ff\n0f 85 d3 00 00 00\n83 fa 26\n0f 87 ba 00 00 00\n89 d0\n48 b9 06 20 10 00 40 00 00 00\n48 0f a3 c1\n0f 83 a4 00 00 00\n48 8d 7c 24 10\ne8 87 b8 ff ff\n85 c0\n0f 85 b7 00 00 00\n85 ed\n78 23\n39 6c 24 10\n75 1d\n48 8d 7c 24 10\ne8 db b8 ff ff\ne8 36 76 fe ff\nc7 00 09 00 00 00\n41 bf ff ff ff ff\neb 7b\n89 ef\ne8 c1 7b fe ff\n85 c0\n74 1e\ne8 18 76 fe ff\n48 89 c3\n8b 2b\n48 8d 7c 24 10\ne8 a9 b8 ff ff\n89 2b\n41 bf ff ff ff ff\neb 52\n48 89 df\n4c 89 f6\ne8 64 b9 ff ff\n41 89 c7\n31 db\n41 83 ff ff\n75 07\ne8 e4 75 fe ff\n8b 18\n48 8d 7c 24 10\ne8 58 b8 ff ff\n85 c0\n75 48\n48 8d 7c 24 10\ne8 6a b8 ff ff\n85 db\n74 19\ne8 c1 75 fe ff\n89 18\neb 10\n83 fa 5f\n0f 84 53 ff ff ff\n48 8b 44 24 08\n89 10\n44 89 f8\n48 81 c4 d8 0f 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 93 75 fe ff\n8b 38\ne8 2c 80 ff ff\ne8 87 75 fe ff\n8b 38\ne8 60 80 ff ff\n'
p2735
S'.text:000000000041b060\n.text:000000000041b061\n.text:000000000041b063\n.text:000000000041b065\n.text:000000000041b067\n.text:000000000041b069\n.text:000000000041b06a\n.text:000000000041b071\n.text:000000000041b074\n.text:000000000041b077\n.text:000000000041b079\n.text:000000000041b07c\n.text:000000000041b07e\n.text:000000000041b081\n.text:000000000041b083\n.text:000000000041b086\n.text:000000000041b089\n.text:000000000041b090\n.text:000000000041b091\n.text:000000000041b093\n.text:000000000041b095\n.text:000000000041b097\n.text:000000000041b099\n.text:000000000041b09a\n.text:000000000041b09f\n.text:000000000041b0a4\n.text:000000000041b0a7\n.text:000000000041b0a9\n.text:000000000041b0ac\n.text:000000000041b0b1\n.text:000000000041b0b4\n.text:000000000041b0b7\n.text:000000000041b0b9\n.text:000000000041b0bc\n.text:000000000041b0bf\n.text:000000000041b0c4\n.text:000000000041b0c7\n.text:000000000041b0cc\n.text:000000000041b0d1\n.text:000000000041b0d3\n.text:000000000041b0d6\n.text:000000000041b0d8\n.text:000000000041b0db\n.text:000000000041b0de\n.text:000000000041b0e3\n.text:000000000041b0e6\n.text:000000000041b0ea\n.text:000000000041b0f0\n.text:000000000041b0f3\n.text:000000000041b0f9\n.text:000000000041b0fb\n.text:000000000041b105\n.text:000000000041b109\n.text:000000000041b10f\n.text:000000000041b114\n.text:000000000041b119\n.text:000000000041b11b\n.text:000000000041b121\n.text:000000000041b123\n.text:000000000041b125\n.text:000000000041b129\n.text:000000000041b12b\n.text:000000000041b130\n.text:000000000041b135\n.text:000000000041b13a\n.text:000000000041b140\n.text:000000000041b146\n.text:000000000041b148\n.text:000000000041b14a\n.text:000000000041b14f\n.text:000000000041b151\n.text:000000000041b153\n.text:000000000041b158\n.text:000000000041b15b\n.text:000000000041b15d\n.text:000000000041b162\n.text:000000000041b167\n.text:000000000041b169\n.text:000000000041b16f\n.text:000000000041b171\n.text:000000000041b174\n.text:000000000041b177\n.text:000000000041b17c\n.text:000000000041b17f\n.text:000000000041b181\n.text:000000000041b185\n.text:000000000041b187\n.text:000000000041b18c\n.text:000000000041b18e\n.text:000000000041b193\n.text:000000000041b198\n.text:000000000041b19a\n.text:000000000041b19c\n.text:000000000041b1a1\n.text:000000000041b1a6\n.text:000000000041b1a8\n.text:000000000041b1aa\n.text:000000000041b1af\n.text:000000000041b1b1\n.text:000000000041b1b3\n.text:000000000041b1b6\n.text:000000000041b1bc\n.text:000000000041b1c1\n.text:000000000041b1c3\n.text:000000000041b1c6\n.text:000000000041b1cd\n.text:000000000041b1ce\n.text:000000000041b1d0\n.text:000000000041b1d2\n.text:000000000041b1d4\n.text:000000000041b1d6\n.text:000000000041b1d7\n.text:000000000041b1d8\n.text:000000000041b1dd\n.text:000000000041b1df\n.text:000000000041b1e4\n.text:000000000041b1e9\n.text:000000000041b1eb\n'
p2736
tp2737
sS'putchar'
p2738
(S'\n__stdcall putchar(int __c)\n'
p2739
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint putchar(int __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_putchar_0062d030)();\u000a  return iVar1;\u000a}\u000a\u000a
p2740
S'JMP qword ptr [0x0062d030]\n'
p2741
S'ff 25 0a a9 22 00\n'
p2742
S'.plt:0000000000402720\n'
p2743
tp2744
sS'cwd_advance_fd'
p2745
(S'\n__stdcall cwd_advance_fd(FTS * sp)\n'
p2746
V\u000avoid cwd_advance_fd(FTS *sp)\u000a\u000a{\u000a  int __fd;\u000a  char in_DL;\u000a  int in_ESI;\u000a  \u000a  __fd = sp->fts_cwd_fd;\u000a  if ((__fd == in_ESI) && (__fd != -100)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  if (in_DL == 0) {\u000a    if ((__fd < 0) || ((sp->fts_options & 4U) != 0)) goto LAB_00419bcc;\u000a  }\u000a  else {\u000a    __fd = i_ring_push(&sp->fts_fd_ring);\u000a    if (__fd < 0) goto LAB_00419bcc;\u000a  }\u000a  close(__fd);\u000aLAB_00419bcc:\u000a  sp->fts_cwd_fd = in_ESI;\u000a  return;\u000a}\u000a\u000a
p2747
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV ESI,dword ptr [RBX + 0x2c]\nCMP ESI,EBP\nJNZ 0x00419ba4\nCMP ESI,-0x64\nJNZ 0x00419bd6\nTEST DL,DL\nJZ 0x00419bb9\nLEA RDI,[RBX + 0x60]\nCALL 0x0041bc50\nTEST EAX,EAX\nJS 0x00419bcc\nMOV EDI,EAX\nJMP 0x00419bc7\nTEST ESI,ESI\nJS 0x00419bcc\nMOV EAX,dword ptr [RBX + 0x48]\nAND EAX,0x4\nJNZ 0x00419bcc\nMOV EDI,ESI\nCALL 0x00402ac0\nMOV dword ptr [RBX + 0x2c],EBP\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nCALL 0x00402750\n'
p2748
S'55\n53\n50\n89 f5\n48 89 fb\n8b 73 2c\n39 ee\n75 05\n83 fe 9c\n75 32\n84 d2\n74 11\n48 8d 7b 60\ne8 9f 20 00 00\n85 c0\n78 17\n89 c7\neb 0e\n85 f6\n78 0f\n8b 43 48\n83 e0 04\n75 07\n89 f7\ne8 f4 8e fe ff\n89 6b 2c\n48 83 c4 08\n5b\n5d\nc3\ne8 75 8b fe ff\n'
p2749
S'.text:0000000000419b90\n.text:0000000000419b91\n.text:0000000000419b92\n.text:0000000000419b93\n.text:0000000000419b95\n.text:0000000000419b98\n.text:0000000000419b9b\n.text:0000000000419b9d\n.text:0000000000419b9f\n.text:0000000000419ba2\n.text:0000000000419ba4\n.text:0000000000419ba6\n.text:0000000000419ba8\n.text:0000000000419bac\n.text:0000000000419bb1\n.text:0000000000419bb3\n.text:0000000000419bb5\n.text:0000000000419bb7\n.text:0000000000419bb9\n.text:0000000000419bbb\n.text:0000000000419bbd\n.text:0000000000419bc0\n.text:0000000000419bc3\n.text:0000000000419bc5\n.text:0000000000419bc7\n.text:0000000000419bcc\n.text:0000000000419bcf\n.text:0000000000419bd3\n.text:0000000000419bd4\n.text:0000000000419bd5\n.text:0000000000419bd6\n'
p2750
tp2751
sS'getmntent'
p2752
(S'\n__stdcall getmntent()\n'
p2753
V\u000avoid getmntent(void)\u000a\u000a{\u000a  (*(code *)PTR_getmntent_0062d2e0)();\u000a  return;\u000a}\u000a\u000a
p2754
S'JMP qword ptr [0x0062d2e0]\n'
p2755
S'ff 25 5a a6 22 00\n'
p2756
S'.plt:0000000000402c80\n'
p2757
tp2758
sS'ctime'
p2759
(S'\n__stdcall ctime(time_t * __timer)\n'
p2760
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * ctime(time_t *__timer)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_ctime_0062d118)();\u000a  return pcVar1;\u000a}\u000a\u000a
p2761
S'JMP qword ptr [0x0062d118]\n'
p2762
S'ff 25 22 a8 22 00\n'
p2763
S'.plt:00000000004028f0\n'
p2764
tp2765
sS'format_date'
p2766
(S'\n__stdcall format_date()\n'
p2767
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000achar * format_date(void)\u000a\u000a{\u000a  bool bVar1;\u000a  bool bVar2;\u000a  char buf [791];\u000a  int iVar3;\u000a  tm *p;\u000a  char *__s;\u000a  size_t sVar4;\u000a  ulong in_RDX;\u000a  int iVar5;\u000a  ulong uVar6;\u000a  undefined8 in_RSI;\u000a  uintmax_t in_RDI;\u000a  uintmax_t n;\u000a  char fmt [6];\u000a  char ns_buf [32];\u000a  uint local_50;\u000a  undefined2 local_4c;\u000a  uintmax_t local_48 [2];\u000a  char local_38 [32];\u000a  \u000a  iVar5 = (int)(in_RDX & 0xffffffff);\u000a  if (iVar5 == 0x2b) {\u000a    local_4c = 0x54;\u000a    local_50 = 0x252b4625;\u000a  }\u000a  else {\u000a    local_50._0_2_ = CONCAT11((char)(in_RDX & 0xffffffff),0x25);\u000a    local_50 = local_50 & 0xff000000 | (uint)(ushort)local_50;\u000a    if ((0x18 < iVar5 - 0x40U) || ((0x1180001U >> (iVar5 - 0x40U & 0x1f) & 1) == 0)) {\u000a      local_38[0] = 0;\u000a      bVar2 = false;\u000a      bVar1 = false;\u000a      iVar3 = 0;\u000a      local_48[0] = in_RDI;\u000a      goto joined_r0x00409577;\u000a    }\u000a  }\u000a  local_48[0] = in_RDI;\u000a  iVar3 = snprintf(local_38,0x20,".%09ld0",in_RSI);\u000a  if (0x1f < iVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("charsprinted < NS_BUF_LEN","print.c",0x29b,\u000a                  "char *format_date(struct timespec, int)");\u000a  }\u000a  bVar2 = true;\u000a  bVar1 = true;\u000ajoined_r0x00409577:\u000a  if (((iVar5 == 0x40) || (p = localtime((time_t *)local_48), bVar1 = bVar2, p == (tm *)0x0)) ||\u000a     (__s = do_time_format((char *)&local_50,(tm *)p,local_38,(long)iVar3), bVar1 = bVar2,\u000a     __s == (char *)0x0)) {\u000a    n = -local_48[0];\u000a    if (0 < (long)local_48[0]) {\u000a      n = local_48[0];\u000a    }\u000a    __s = human_readable(n,(char *)&ram0x0062ded0 + 1,0,1);\u000a    if (__s < (char *)0x62ded1) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("p > buf","print.c",699,"char *format_date(struct timespec, int)");\u000a    }\u000a    if ((char *)0x62e1e6 < __s) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("p < (buf + (sizeof buf))","print.c",700,\u000a                    "char *format_date(struct timespec, int)");\u000a    }\u000a    if ((long)local_48[0] < 0) {\u000a      __s[-1] = '-';\u000a      __s = __s + -1;\u000a    }\u000a    if (bVar1) {\u000a      sVar4 = strlen(__s);\u000a      if ((char *)0x316 < __s + (sVar4 - 0x62ded0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("sizeof buf > used","print.c",0x2c9,"char *format_date(struct timespec, int)")\u000a        ;\u000a      }\u000a      uVar6 = 0x316 - (long)(__s + (sVar4 - 0x62ded0));\u000a      sVar4 = strlen(local_38);\u000a      if (uVar6 <= sVar4) {\u000a        error(0,0,"charsprinted=%ld but remaining=%lu: ns_buf=%s",(long)iVar3,uVar6,local_38);\u000a      }\u000a      sVar4 = strlen(local_38);\u000a      if (uVar6 <= sVar4) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("strlen (ns_buf) < remaining","print.c",0x2d2,\u000a                      "char *format_date(struct timespec, int)");\u000a      }\u000a      strcat(__s,local_38);\u000a    }\u000a  }\u000a  return __s;\u000a}\u000a\u000a
p2768
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EBX,EDX\nMOV qword ptr [RSP + 0x10],RDI\nMOV qword ptr [RSP + 0x18],RSI\nCMP EBX,0x2b\nJNZ 0x0040954a\nMOV word ptr [RSP + 0xc],0x54\nMOV dword ptr [RSP + 0x8],0x252b4625\nJMP 0x0040957b\nMOV byte ptr [RSP + 0x8],0x25\nMOV byte ptr [RSP + 0x9],BL\nMOV byte ptr [RSP + 0xa],0x0\nLEA EAX,[RBX + -0x40]\nCMP EAX,0x18\nJA 0x0040956a\nMOV ECX,0x1180001\nBT ECX,EAX\nJC 0x0040957b\nMOV byte ptr [RSP + 0x20],0x0\nXOR EBP,EBP\nXOR R14D,R14D\nCMP EBX,0x40\nJNZ 0x004095ab\nJMP 0x004095db\nMOV RCX,qword ptr [RSP + 0x18]\nLEA RDI,[RSP + 0x20]\nMOV ESI,0x20\nMOV EDX,0x41f8cc\nXOR EAX,EAX\nCALL 0x004029e0\nMOV R14D,EAX\nCMP R14D,0x20\nJGE 0x004096e3\nMOV BPL,0x1\nCMP EBX,0x40\nJZ 0x004095db\nLEA RDI,[RSP + 0x10]\nCALL 0x00402740\nTEST RAX,RAX\nJZ 0x004095db\nMOVSXD RCX,R14D\nLEA RDI,[RSP + 0x8]\nLEA RDX,[RSP + 0x20]\nMOV RSI,RAX\nCALL 0x00409cb0\nMOV RBX,RAX\nTEST RBX,RBX\nJNZ 0x004096a5\nMOV RAX,qword ptr [RSP + 0x10]\nMOV RDI,RAX\nNEG RDI\nCMOVL RDI,RAX\nMOV ESI,0x62ded1\nXOR EDX,EDX\nMOV ECX,0x1\nMOV R8D,0x1\nCALL 0x00411370\nMOV RBX,RAX\nMOV EAX,0x62ded0\nCMP RBX,RAX\nJBE 0x004096b1\nMOV EAX,0x62e1e7\nCMP RBX,RAX\nJNC 0x004096ca\nCMP qword ptr [RSP + 0x10],0x0\nJNS 0x0040962f\nMOV byte ptr [RBX + -0x1],0x2d\nDEC RBX\nTEST BPL,BPL\nJZ 0x004096a5\nMOV RDI,RBX\nCALL 0x00402930\nMOV EDX,0x62ded0\nMOV RCX,RBX\nSUB RCX,RDX\nADD RCX,RAX\nCMP RCX,0x317\nJNC 0x004096fc\nMOV EBP,0x316\nSUB RBP,RCX\nLEA RDI,[RSP + 0x20]\nCALL 0x00402930\nCMP RAX,RBP\nJC 0x00409689\nMOVSXD RCX,R14D\nLEA R9,[RSP + 0x20]\nXOR EDI,EDI\nXOR ESI,ESI\nMOV EDX,0x41f949\nXOR EAX,EAX\nMOV R8,RBP\nCALL 0x00402d90\nLEA RDI,[RSP + 0x20]\nCALL 0x00402930\nCMP RAX,RBP\nJNC 0x00409715\nLEA RSI,[RSP + 0x20]\nMOV RDI,RBX\nCALL 0x00402eb0\nMOV RAX,RBX\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\nMOV EDI,0x41f916\nMOV ESI,0x41f663\nMOV EDX,0x2bb\nMOV ECX,0x41f8ee\nCALL 0x00402a40\nMOV EDI,0x41f91e\nMOV ESI,0x41f663\nMOV EDX,0x2bc\nMOV ECX,0x41f8ee\nCALL 0x00402a40\nMOV EDI,0x41f8d4\nMOV ESI,0x41f663\nMOV EDX,0x29b\nMOV ECX,0x41f8ee\nCALL 0x00402a40\nMOV EDI,0x41f937\nMOV ESI,0x41f663\nMOV EDX,0x2c9\nMOV ECX,0x41f8ee\nCALL 0x00402a40\nMOV EDI,0x41f977\nMOV ESI,0x41f663\nMOV EDX,0x2d2\nMOV ECX,0x41f8ee\nCALL 0x00402a40\n'
p2769
S'55\n41 56\n53\n48 83 ec 40\n89 d3\n48 89 7c 24 10\n48 89 74 24 18\n83 fb 2b\n75 11\n66 c7 44 24 0c 54 00\nc7 44 24 08 25 46 2b 25\neb 31\nc6 44 24 08 25\n88 5c 24 09\nc6 44 24 0a 00\n8d 43 c0\n83 f8 18\n77 0a\nb9 01 00 18 01\n0f a3 c1\n72 11\nc6 44 24 20 00\n31 ed\n45 31 f6\n83 fb 40\n75 32\neb 60\n48 8b 4c 24 18\n48 8d 7c 24 20\nbe 20 00 00 00\nba cc f8 41 00\n31 c0\ne8 4a 94 ff ff\n41 89 c6\n41 83 fe 20\n0f 8d 40 01 00 00\n40 b5 01\n83 fb 40\n74 30\n48 8d 7c 24 10\ne8 8b 91 ff ff\n48 85 c0\n74 21\n49 63 ce\n48 8d 7c 24 08\n48 8d 54 24 20\n48 89 c6\ne8 e1 06 00 00\n48 89 c3\n48 85 db\n0f 85 ca 00 00 00\n48 8b 44 24 10\n48 89 c7\n48 f7 df\n48 0f 4c f8\nbe d1 de 62 00\n31 d2\nb9 01 00 00 00\n41 b8 01 00 00 00\ne8 6f 7d 00 00\n48 89 c3\nb8 d0 de 62 00\n48 39 c3\n0f 86 9f 00 00 00\nb8 e7 e1 62 00\n48 39 c3\n0f 83 aa 00 00 00\n48 83 7c 24 10 00\n79 07\nc6 43 ff 2d\n48 ff cb\n40 84 ed\n74 71\n48 89 df\ne8 f4 92 ff ff\nba d0 de 62 00\n48 89 d9\n48 29 d1\n48 01 c1\n48 81 f9 17 03 00 00\n0f 83 a5 00 00 00\nbd 16 03 00 00\n48 29 cd\n48 8d 7c 24 20\ne8 c7 92 ff ff\n48 39 e8\n72 1b\n49 63 ce\n4c 8d 4c 24 20\n31 ff\n31 f6\nba 49 f9 41 00\n31 c0\n49 89 e8\ne8 07 97 ff ff\n48 8d 7c 24 20\ne8 9d 92 ff ff\n48 39 e8\n73 7d\n48 8d 74 24 20\n48 89 df\ne8 0b 98 ff ff\n48 89 d8\n48 83 c4 40\n5b\n41 5e\n5d\nc3\nbf 16 f9 41 00\nbe 63 f6 41 00\nba bb 02 00 00\nb9 ee f8 41 00\ne8 76 93 ff ff\nbf 1e f9 41 00\nbe 63 f6 41 00\nba bc 02 00 00\nb9 ee f8 41 00\ne8 5d 93 ff ff\nbf d4 f8 41 00\nbe 63 f6 41 00\nba 9b 02 00 00\nb9 ee f8 41 00\ne8 44 93 ff ff\nbf 37 f9 41 00\nbe 63 f6 41 00\nba c9 02 00 00\nb9 ee f8 41 00\ne8 2b 93 ff ff\nbf 77 f9 41 00\nbe 63 f6 41 00\nba d2 02 00 00\nb9 ee f8 41 00\ne8 12 93 ff ff\n'
p2770
S'.text:0000000000409520\n.text:0000000000409521\n.text:0000000000409523\n.text:0000000000409524\n.text:0000000000409528\n.text:000000000040952a\n.text:000000000040952f\n.text:0000000000409534\n.text:0000000000409537\n.text:0000000000409539\n.text:0000000000409540\n.text:0000000000409548\n.text:000000000040954a\n.text:000000000040954f\n.text:0000000000409553\n.text:0000000000409558\n.text:000000000040955b\n.text:000000000040955e\n.text:0000000000409560\n.text:0000000000409565\n.text:0000000000409568\n.text:000000000040956a\n.text:000000000040956f\n.text:0000000000409571\n.text:0000000000409574\n.text:0000000000409577\n.text:0000000000409579\n.text:000000000040957b\n.text:0000000000409580\n.text:0000000000409585\n.text:000000000040958a\n.text:000000000040958f\n.text:0000000000409591\n.text:0000000000409596\n.text:0000000000409599\n.text:000000000040959d\n.text:00000000004095a3\n.text:00000000004095a6\n.text:00000000004095a9\n.text:00000000004095ab\n.text:00000000004095b0\n.text:00000000004095b5\n.text:00000000004095b8\n.text:00000000004095ba\n.text:00000000004095bd\n.text:00000000004095c2\n.text:00000000004095c7\n.text:00000000004095ca\n.text:00000000004095cf\n.text:00000000004095d2\n.text:00000000004095d5\n.text:00000000004095db\n.text:00000000004095e0\n.text:00000000004095e3\n.text:00000000004095e6\n.text:00000000004095ea\n.text:00000000004095ef\n.text:00000000004095f1\n.text:00000000004095f6\n.text:00000000004095fc\n.text:0000000000409601\n.text:0000000000409604\n.text:0000000000409609\n.text:000000000040960c\n.text:0000000000409612\n.text:0000000000409617\n.text:000000000040961a\n.text:0000000000409620\n.text:0000000000409626\n.text:0000000000409628\n.text:000000000040962c\n.text:000000000040962f\n.text:0000000000409632\n.text:0000000000409634\n.text:0000000000409637\n.text:000000000040963c\n.text:0000000000409641\n.text:0000000000409644\n.text:0000000000409647\n.text:000000000040964a\n.text:0000000000409651\n.text:0000000000409657\n.text:000000000040965c\n.text:000000000040965f\n.text:0000000000409664\n.text:0000000000409669\n.text:000000000040966c\n.text:000000000040966e\n.text:0000000000409671\n.text:0000000000409676\n.text:0000000000409678\n.text:000000000040967a\n.text:000000000040967f\n.text:0000000000409681\n.text:0000000000409684\n.text:0000000000409689\n.text:000000000040968e\n.text:0000000000409693\n.text:0000000000409696\n.text:0000000000409698\n.text:000000000040969d\n.text:00000000004096a0\n.text:00000000004096a5\n.text:00000000004096a8\n.text:00000000004096ac\n.text:00000000004096ad\n.text:00000000004096af\n.text:00000000004096b0\n.text:00000000004096b1\n.text:00000000004096b6\n.text:00000000004096bb\n.text:00000000004096c0\n.text:00000000004096c5\n.text:00000000004096ca\n.text:00000000004096cf\n.text:00000000004096d4\n.text:00000000004096d9\n.text:00000000004096de\n.text:00000000004096e3\n.text:00000000004096e8\n.text:00000000004096ed\n.text:00000000004096f2\n.text:00000000004096f7\n.text:00000000004096fc\n.text:0000000000409701\n.text:0000000000409706\n.text:000000000040970b\n.text:0000000000409710\n.text:0000000000409715\n.text:000000000040971a\n.text:000000000040971f\n.text:0000000000409724\n.text:0000000000409729\n'
p2771
tp2772
sS'checked_fprintf'
p2773
(S'\n__stdcall checked_fprintf(format_val * dest, char * fmt)\n'
p2774
V\u000avoid checked_fprintf(format_val *dest,char *fmt,...)\u000a\u000a{\u000a  char in_AL;\u000a  int iVar1;\u000a  uint *puVar2;\u000a  undefined8 in_RCX;\u000a  undefined8 in_RDX;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list ap;\u000a  undefined4 local_d8;\u000a  undefined4 local_d4;\u000a  void **local_d0;\u000a  undefined *local_c8;\u000a  undefined local_b8 [16];\u000a  undefined8 local_a8;\u000a  undefined8 local_a0;\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_c8 = local_b8;\u000a  local_d0 = &ap[0].overflow_arg_area;\u000a  local_d4 = 0x30;\u000a  local_d8 = 0x10;\u000a  local_a8 = in_RDX;\u000a  local_a0 = in_RCX;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  iVar1 = vfprintf((FILE *)dest->stream,fmt,&local_d8);\u000a  if (iVar1 < 0) {\u000a    puVar2 = (uint *)__errno_location();\u000a    nonfatal_nontarget_file_error((char *)(ulong)*puVar2);\u000a  }\u000a  return;\u000a}\u000a\u000a
p2775
S'PUSH RBX\nSUB RSP,0xd0\nMOV RBX,RDI\nTEST AL,AL\nJZ 0x004094b6\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOV RDI,qword ptr [RBX + 0x8]\nMOV RDX,RSP\nCALL 0x00402e20\nTEST EAX,EAX\nJNS 0x00409510\nCALL 0x00402770\nMOV EDI,dword ptr [RAX]\nMOV RSI,qword ptr [RBX + 0x10]\nCALL 0x00407ff0\nADD RSP,0xd0\nPOP RBX\nRET\n'
p2776
S'53\n48 81 ec d0 00 00 00\n48 89 fb\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 8b 7b 08\n48 89 e2\ne8 24 99 ff ff\n85 c0\n79 10\ne8 6b 92 ff ff\n8b 38\n48 8b 73 10\ne8 e0 ea ff ff\n48 81 c4 d0 00 00 00\n5b\nc3\n'
p2777
S'.text:0000000000409470\n.text:0000000000409471\n.text:0000000000409478\n.text:000000000040947b\n.text:000000000040947d\n.text:000000000040947f\n.text:0000000000409484\n.text:0000000000409489\n.text:000000000040948e\n.text:0000000000409496\n.text:000000000040949e\n.text:00000000004094a6\n.text:00000000004094ae\n.text:00000000004094b6\n.text:00000000004094bb\n.text:00000000004094c0\n.text:00000000004094c5\n.text:00000000004094ca\n.text:00000000004094cf\n.text:00000000004094d4\n.text:00000000004094dc\n.text:00000000004094e1\n.text:00000000004094e9\n.text:00000000004094f0\n.text:00000000004094f4\n.text:00000000004094f7\n.text:00000000004094fc\n.text:00000000004094fe\n.text:0000000000409500\n.text:0000000000409505\n.text:0000000000409507\n.text:000000000040950b\n.text:0000000000409510\n.text:0000000000409517\n.text:0000000000409518\n'
p2778
tp2779
sS'set_new_parent'
p2780
(S'\n__stdcall set_new_parent(predicate * curr, predicate * * prevp)\n'
p2781
V\u000apredicate * set_new_parent(predicate *curr,predicate **prevp)\u000a\u000a{\u000a  predicate_precedence pVar1;\u000a  predicate *ppVar2;\u000a  predicate **in_RDX;\u000a  float fVar3;\u000a  \u000a  pVar1 = (predicate_precedence)prevp;\u000a  ppVar2 = (predicate *)xzalloc(0x138);\u000a  ppVar2->p_type = BI_OP;\u000a  ppVar2->p_prec = pVar1;\u000a  ppVar2->p_cost = NeedsNothing;\u000a  if (pVar1 == AND_PREC) {\u000a    ppVar2->pred_func = pred_and;\u000a    ppVar2->p_name = "-a";\u000aLAB_004070d5:\u000a    fVar3 = constrain_rate(curr->est_success_rate);\u000a  }\u000a  else {\u000a    if (pVar1 == OR_PREC) {\u000a      ppVar2->pred_func = pred_or;\u000a      ppVar2->p_name = "-o";\u000a      goto LAB_004070d5;\u000a    }\u000a    if (pVar1 != COMMA_PREC) goto LAB_004070e5;\u000a    ppVar2->pred_func = pred_comma;\u000a    ppVar2->p_name = ",";\u000a    fVar3 = DAT_0041d344;\u000a  }\u000a  ppVar2->est_success_rate = fVar3;\u000aLAB_004070e5:\u000a  ppVar2->pred_right = curr;\u000a  *in_RDX = ppVar2;\u000a  return ppVar2;\u000a}\u000a\u000a
p2782
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV EBP,ESI\nMOV R15,RDI\nMOV EDI,0x138\nCALL 0x00417310\nMOV RBX,RAX\nMOV dword ptr [RBX + 0x10],0x3\nMOV dword ptr [RBX + 0x14],EBP\nMOV dword ptr [RBX + 0x20],0x0\nCMP EBP,0x3\nJZ 0x004070b5\nCMP EBP,0x2\nJZ 0x004070c6\nCMP EBP,0x1\nJNZ 0x004070e5\nMOV qword ptr [RBX],0x403dd0\nMOV qword ptr [RBX + 0x8],0x41d8bd\nMOVSS XMM0,dword ptr [0x0041d344]\nJMP 0x004070e0\nMOV qword ptr [RBX],0x403c90\nMOV qword ptr [RBX + 0x8],0x41d7e9\nJMP 0x004070d5\nMOV qword ptr [RBX],0x404500\nMOV qword ptr [RBX + 0x8],0x41dc78\nMOVSS XMM0,dword ptr [R15 + 0x24]\nCALL 0x00405b50\nMOVSS dword ptr [RBX + 0x24],XMM0\nMOV qword ptr [0x118 + RBX],R15\nMOV qword ptr [R14],RBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2783
S'55\n41 57\n41 56\n53\n50\n49 89 d6\n89 f5\n49 89 ff\nbf 38 01 00 00\ne8 97 02 01 00\n48 89 c3\nc7 43 10 03 00 00 00\n89 6b 14\nc7 43 20 00 00 00 00\n83 fd 03\n74 23\n83 fd 02\n74 2f\n83 fd 01\n75 49\n48 c7 03 d0 3d 40 00\n48 c7 43 08 bd d8 41 00\nf3 0f 10 05 91 62 01 00\neb 2b\n48 c7 03 90 3c 40 00\n48 c7 43 08 e9 d7 41 00\neb 0f\n48 c7 03 00 45 40 00\n48 c7 43 08 78 dc 41 00\nf3 41 0f 10 47 24\ne8 70 ea ff ff\nf3 0f 11 43 24\n4c 89 bb 18 01 00 00\n49 89 1e\n48 89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p2784
S'.text:0000000000407060\n.text:0000000000407061\n.text:0000000000407063\n.text:0000000000407065\n.text:0000000000407066\n.text:0000000000407067\n.text:000000000040706a\n.text:000000000040706c\n.text:000000000040706f\n.text:0000000000407074\n.text:0000000000407079\n.text:000000000040707c\n.text:0000000000407083\n.text:0000000000407086\n.text:000000000040708d\n.text:0000000000407090\n.text:0000000000407092\n.text:0000000000407095\n.text:0000000000407097\n.text:000000000040709a\n.text:000000000040709c\n.text:00000000004070a3\n.text:00000000004070ab\n.text:00000000004070b3\n.text:00000000004070b5\n.text:00000000004070bc\n.text:00000000004070c4\n.text:00000000004070c6\n.text:00000000004070cd\n.text:00000000004070d5\n.text:00000000004070db\n.text:00000000004070e0\n.text:00000000004070e5\n.text:00000000004070ec\n.text:00000000004070ef\n.text:00000000004070f2\n.text:00000000004070f6\n.text:00000000004070f7\n.text:00000000004070f9\n.text:00000000004070fb\n.text:00000000004070fc\n'
p2785
tp2786
sS'restore_initial_cwd'
p2787
(S'\n__stdcall restore_initial_cwd(FTS * sp)\n'
p2788
V\u000aint restore_initial_cwd(FTS *sp)\u000a\u000a{\u000a  int iVar1;\u000a  bool bVar2;\u000a  \u000a  if ((sp->fts_options & 4U) == 0) {\u000a    if ((sp->fts_options & 0x200U) == 0) {\u000a      iVar1 = fchdir(sp->fts_rfd);\u000a      bVar2 = iVar1 != 0;\u000a      goto LAB_00419965;\u000a    }\u000a    cwd_advance_fd(sp);\u000a  }\u000a  bVar2 = false;\u000aLAB_00419965:\u000a  fd_ring_clear(&sp->fts_fd_ring);\u000a  return (int)(uint)bVar2;\u000a}\u000a\u000a
p2789
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV EAX,dword ptr [RBX + 0x48]\nTEST AL,0x4\nJNZ 0x00419963\nTEST AH,0x2\nJNZ 0x00419951\nMOV EDI,dword ptr [RBX + 0x28]\nCALL 0x00402d10\nTEST EAX,EAX\nSETNZ AL\nJMP 0x00419965\nMOV ESI,0xffffff9c\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00419b90\nXOR EAX,EAX\nMOVZX EBP,AL\nADD RBX,0x60\nMOV RDI,RBX\nCALL 0x004189b0\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p2790
S'55\n53\n50\n48 89 fb\n8b 43 48\na8 04\n75 26\nf6 c4 02\n75 0f\n8b 7b 28\ne8 c6 93 fe ff\n85 c0\n0f 95 c0\neb 14\nbe 9c ff ff ff\nba 01 00 00 00\n48 89 df\ne8 2d 02 00 00\n31 c0\n0f b6 e8\n48 83 c3 60\n48 89 df\ne8 3c f0 ff ff\n89 e8\n48 83 c4 08\n5b\n5d\nc3\n'
p2791
S'.text:0000000000419930\n.text:0000000000419931\n.text:0000000000419932\n.text:0000000000419933\n.text:0000000000419936\n.text:0000000000419939\n.text:000000000041993b\n.text:000000000041993d\n.text:0000000000419940\n.text:0000000000419942\n.text:0000000000419945\n.text:000000000041994a\n.text:000000000041994c\n.text:000000000041994f\n.text:0000000000419951\n.text:0000000000419956\n.text:000000000041995b\n.text:000000000041995e\n.text:0000000000419963\n.text:0000000000419965\n.text:0000000000419968\n.text:000000000041996c\n.text:000000000041996f\n.text:0000000000419974\n.text:0000000000419976\n.text:000000000041997a\n.text:000000000041997b\n.text:000000000041997c\n'
p2792
tp2793
sS'execvp'
p2794
(S'\n__stdcall execvp(char * __file, char * * __argv)\n'
p2795
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint execvp(char *__file,char **__argv)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_execvp_0062d3e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p2796
S'JMP qword ptr [0x0062d3e0]\n'
p2797
S'ff 25 5a a5 22 00\n'
p2798
S'.plt:0000000000402e80\n'
p2799
tp2800
sS'FUN_004026e0'
p2801
(S'\n__stdcall FUN_004026e0()\n'
p2802
V\u000avoid FUN_004026e0(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_0062d010)();\u000a  return;\u000a}\u000a\u000a
p2803
S'PUSH qword ptr [0x0062d008]\nJMP qword ptr [0x0062d010]\n'
p2804
S'ff 35 22 a9 22 00\nff 25 24 a9 22 00\n'
p2805
S'.plt:00000000004026e0\n.plt:00000000004026e6\n'
p2806
tp2807
sS'filemodestring'
p2808
(S'\n__stdcall filemodestring(stat * statp, char * str)\n'
p2809
V\u000avoid filemodestring(stat *statp,char *str)\u000a\u000a{\u000a  strmode((char *)(ulong)statp->st_mode);\u000a  return;\u000a}\u000a\u000a
p2810
S'MOV EDI,dword ptr [RDI + 0x18]\nJMP 0x00410230\n'
p2811
S'8b 7f 18\ne9 f8 fe ff ff\n'
p2812
S'.text:0000000000410330\n.text:0000000000410333\n'
p2813
tp2814
sS'time_zone_hhmm'
p2815
(S'\n__stdcall time_zone_hhmm(parser_control * pc, textint s, long mm)\n'
p2816
V\u000along time_zone_hhmm(parser_control *pc,textint s,long mm)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  \u000a  if ((mm < 0) && (s.digits < 3)) {\u000a    s.value = s.value * 100;\u000a  }\u000a  if (mm < 0) {\u000a    lVar3 = s.value + (s.value / 100 + (s.value >> 0x3f) +\u000a                      SUB168(SEXT816(s.value) * ZEXT816(0xa3d70a3d70a3d70b) >> 0x7f,0)) * -0x28;\u000a  }\u000a  else {\u000a    lVar3 = -mm;\u000a    if (s.negative == false) {\u000a      lVar3 = mm;\u000a    }\u000a    lVar3 = lVar3 + s.value * 0x3c;\u000a  }\u000a  iVar2 = (int)lVar3;\u000a  iVar1 = -iVar2;\u000a  if (0 < iVar2) {\u000a    iVar1 = iVar2;\u000a  }\u000a  if (0x5a0 < iVar1) {\u000a    pc->zones_seen = pc->zones_seen + 1;\u000a  }\u000a  return lVar3;\u000a}\u000a\u000a
p2817
S'LEA RAX,[RSP + 0x8]\nTEST RSI,RSI\nJNS 0x0041412b\nCMP qword ptr [RSP + 0x18],0x2\nJA 0x0041412b\nIMUL RCX,qword ptr [RAX + 0x8],0x64\nMOV qword ptr [RAX + 0x8],RCX\nMOV RCX,qword ptr [RAX + 0x8]\nTEST RSI,RSI\nJS 0x0041414a\nIMUL RDX,RCX,0x3c\nMOV RCX,RSI\nNEG RCX\nCMP byte ptr [RAX],0x0\nCMOVZ RCX,RSI\nADD RCX,RDX\nJMP 0x00414179\nMOV RDX,-0x5c28f5c28f5c28f5\nMOV RAX,RCX\nIMUL RDX\nADD RDX,RCX\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0x6\nADD RDX,RAX\nIMUL RAX,RDX,0x3c\nIMUL RDX,RDX,0x64\nSUB RCX,RDX\nADD RCX,RAX\nMOV EAX,ECX\nNEG EAX\nCMOVL EAX,ECX\nCMP EAX,0x5a1\nJL 0x0041418e\nINC qword ptr [0xd8 + RDI]\nMOV RAX,RCX\nRET\n'
p2818
S'48 8d 44 24 08\n48 85 f6\n79 11\n48 83 7c 24 18 02\n77 09\n48 6b 48 08 64\n48 89 48 08\n48 8b 48 08\n48 85 f6\n78 16\n48 6b d1 3c\n48 89 f1\n48 f7 d9\n80 38 00\n48 0f 44 ce\n48 01 d1\neb 2f\n48 ba 0b d7 a3 70 3d 0a d7 a3\n48 89 c8\n48 f7 ea\n48 01 ca\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 06\n48 01 c2\n48 6b c2 3c\n48 6b d2 64\n48 29 d1\n48 01 c1\n89 c8\nf7 d8\n0f 4c c1\n3d a1 05 00 00\n7c 07\n48 ff 87 d8 00 00 00\n48 89 c8\nc3\n'
p2819
S'.text:0000000000414110\n.text:0000000000414115\n.text:0000000000414118\n.text:000000000041411a\n.text:0000000000414120\n.text:0000000000414122\n.text:0000000000414127\n.text:000000000041412b\n.text:000000000041412f\n.text:0000000000414132\n.text:0000000000414134\n.text:0000000000414138\n.text:000000000041413b\n.text:000000000041413e\n.text:0000000000414141\n.text:0000000000414145\n.text:0000000000414148\n.text:000000000041414a\n.text:0000000000414154\n.text:0000000000414157\n.text:000000000041415a\n.text:000000000041415d\n.text:0000000000414160\n.text:0000000000414164\n.text:0000000000414168\n.text:000000000041416b\n.text:000000000041416f\n.text:0000000000414173\n.text:0000000000414176\n.text:0000000000414179\n.text:000000000041417b\n.text:000000000041417d\n.text:0000000000414180\n.text:0000000000414185\n.text:0000000000414187\n.text:000000000041418e\n.text:0000000000414191\n'
p2820
tp2821
sS'insert_exec_ok'
p2822
(S'\n__stdcall insert_exec_ok(char * action, parser_table * entry, char * * argv, int * arg_ptr)\n'
p2823
V\u000a_Bool insert_exec_ok(char *action,parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  byte *context;\u000a  buildcmd_control *ctl;\u000a  _Bool (*pred_func)(char *,stat *,predicate *);\u000a  bool bVar1;\u000a  uint uVar2;\u000a  BC_INIT_STATUS BVar3;\u000a  predicate *__ptr;\u000a  char *haystack;\u000a  char *pcVar4;\u000a  size_t sVar5;\u000a  void *pvVar6;\u000a  long lVar7;\u000a  long lVar8;\u000a  int iVar9;\u000a  int iVar10;\u000a  int iVar11;\u000a  undefined8 uVar12;\u000a  char **ppcVar13;\u000a  int iVar14;\u000a  bool bVar15;\u000a  char buf [19];\u000a  char *local_88;\u000a  char local_48 [24];\u000a  \u000a  if ((argv != (char **)0x0) && (argv[(long)*arg_ptr] != (char *)0x0)) {\u000a    pred_func = entry->pred_func;\u000a    __ptr = insert_primary_withpred(entry,pred_func,"(some -exec* arguments)");\u000a    __ptr->no_default_print = true;\u000a    __ptr->side_effects = true;\u000a    __ptr->need_stat = false;\u000a    __ptr->need_type = false;\u000a    *(undefined8 *)(__ptr->args + 0xc0) = 0;\u000a    bVar15 = pred_func == pred_okdir;\u000a    *(bool *)(__ptr->args + 0xbc) = pred_func == pred_ok || bVar15;\u000a    if (pred_func != pred_execdir && !bVar15) {\u000a      if (initial_wd == (saved_cwd *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("NULL != initial_wd","parser.c",0xb9f,\u000a                                            \u000a                      "_Bool insert_exec_ok(const char *, const struct parser_table *, char **, int *)"\u000a                     );\u000a      }\u000a      *(saved_cwd **)(__ptr->args + 0xc0) = initial_wd;\u000a    }\u000a    else {\u000a      *(undefined8 *)(__ptr->args + 0xc0) = 0;\u000a      options.ignore_readdir_race = false;\u000a      check_path_safety(action);\u000a    }\u000a    __ptr->args[0] = 0;\u000a    iVar9 = *arg_ptr;\u000a    lVar7 = (long)iVar9;\u000a    haystack = argv[lVar7];\u000a    iVar14 = iVar9;\u000a    if (haystack != (char *)0x0) {\u000a      context = __ptr->args;\u000a      ppcVar13 = argv + lVar7;\u000a      bVar1 = false;\u000a      local_88 = (char *)0x0;\u000a      iVar10 = 0;\u000a      iVar14 = iVar9;\u000a      do {\u000a        if (*haystack == ';') {\u000a          if (haystack[1] == 0) break;\u000a        }\u000a        else {\u000a          if ((((!bVar15 && pred_func != pred_ok) && *haystack == '+') && (bVar1)) &&\u000a             (haystack[1] == 0)) {\u000a            *context = 1;\u000a            break;\u000a          }\u000a        }\u000a        haystack = *ppcVar13;\u000a        pcVar4 = mbsstr(haystack,"{}");\u000a        if (pcVar4 == (char *)0x0) {\u000a          bVar1 = false;\u000a        }\u000a        else {\u000a          iVar10 = iVar10 + 1;\u000a          if (iVar14 == 0 && (pred_func == pred_execdir || bVar15)) {\u000a            uVar12 = dcgettext(0,\u000a                               "You may not use {} within the utility name for -execdir and -okdir, because this is a potential security problem."\u000a                               ,5);\u000a            error(1,0,uVar12);\u000a          }\u000a          bVar1 = true;\u000a          local_88 = haystack;\u000a        }\u000a        iVar14 = iVar14 + 1;\u000a        haystack = ppcVar13[1];\u000a        ppcVar13 = ppcVar13 + 1;\u000a      } while (haystack != (char *)0x0);\u000a      iVar11 = iVar14 - iVar9;\u000a      if ((iVar11 != 0) && (*ppcVar13 != (char *)0x0)) {\u000a        if (*context != 0) {\u000a          uVar12 = 0x41e69a;\u000a          if (pred_func == pred_execdir) {\u000a            uVar12 = 0x41c759;\u000a          }\u000a          if (iVar10 < 2) {\u000a            sVar5 = strlen(local_88);\u000a            if (sVar5 != 2) {\u000a              uVar2 = snprintf(local_48,0x13,"-exec%s ... {} +",uVar12);\u000a              if (0x13 < uVar2) {\u000a                    /* WARNING: Subroutine does not return */\u000a                __assert_fail("needed <= MsgBufSize","parser.c",0xbec,\u000a                                                            \u000a                              "_Bool insert_exec_ok(const char *, const struct parser_table *, char **, int *)"\u000a                             );\u000a              }\u000a              uVar12 = dcgettext(0,"In %s the %s must appear by itself, but you specified %s",5);\u000a              quotearg_n_style((char *)0x0);\u000a              quotearg_n_style((char *)0x1);\u000a              quotearg_n_style((char *)0x2);\u000a              error(1,0,uVar12);\u000a            }\u000a          }\u000a          else {\u000a            uVar12 = dcgettext(0,"Only one instance of {} is supported with -exec%s ... +",5);\u000a            error(1,0,uVar12);\u000a          }\u000a        }\u000a        ctl = (buildcmd_control *)(__ptr->args + 8);\u000a        BVar3 = bc_init_controlinfo(ctl,0x800);\u000a        if (BVar3 + ~BC_INIT_OK < 2) {\u000a          uVar12 = dcgettext(0,"The environment is too large for exec().",5);\u000a          error(1,0,uVar12);\u000a        }\u000a        bc_use_sensible_arg_max(ctl);\u000a        *(undefined8 *)(__ptr->args + 0x48) = 0x405470;\u000a        if (__ptr->args[0] == 0) {\u000a          *(int *)(__ptr->args + 0xb8) = iVar11;\u000a          *(undefined8 *)(__ptr->args + 0x38) = 0x421235;\u000a          *(undefined8 *)(__ptr->args + 0x30) = 2;\u000a          *(undefined4 *)(__ptr->args + 0x50) = 0;\u000a          *(undefined4 *)(__ptr->args + 0x54) = 0;\u000a          *(undefined4 *)(__ptr->args + 0x58) = 0;\u000a          *(undefined4 *)(__ptr->args + 0x5c) = 0;\u000a          pvVar6 = xmalloc((long)*(int *)(__ptr->args + 0xb8) << 3);\u000a          *(void **)(__ptr->args + 0xb0) = pvVar6;\u000a          bc_init_state(ctl,(buildcmd_state *)(__ptr->args + 0x60),context);\u000a          if (0 < *(int *)(__ptr->args + 0xb8)) {\u000a            iVar9 = *(int *)(__ptr->args + 0xb8);\u000a            lVar8 = 0;\u000a            do {\u000a              *(char **)(*(long *)(__ptr->args + 0xb0) + lVar8 * 8) = argv[lVar7 + lVar8];\u000a              lVar8 = lVar8 + 1;\u000a            } while (lVar8 < (long)iVar9);\u000a          }\u000a        }\u000a        else {\u000a          *(undefined8 *)(__ptr->args + 0xb0) = 0;\u000a          *(undefined4 *)(__ptr->args + 0x30) = 0;\u000a          *(undefined4 *)(__ptr->args + 0x34) = 0;\u000a          *(undefined4 *)(__ptr->args + 0x38) = 0;\u000a          *(undefined4 *)(__ptr->args + 0x3c) = 0;\u000a          *(undefined4 *)(__ptr->args + 0x50) = 0;\u000a          *(undefined4 *)(__ptr->args + 0x54) = 0;\u000a          *(undefined4 *)(__ptr->args + 0x58) = 0;\u000a          *(undefined4 *)(__ptr->args + 0x5c) = 0;\u000a          *(long *)(__ptr->args + 0x40) = (long)(iVar11 + -1);\u000a          bc_init_state(ctl,(buildcmd_state *)(__ptr->args + 0x60),context);\u000a          if (iVar9 < iVar14 + -1) {\u000a            argv = argv + lVar7;\u000a            iVar9 = (iVar14 + -1) - iVar9;\u000a            do {\u000a              haystack = *argv;\u000a              sVar5 = strlen(haystack);\u000a              bc_push_arg(ctl,(buildcmd_state *)(__ptr->args + 0x60),haystack,sVar5 + 1,(char *)0x0,\u000a                          0);\u000a              argv = argv + 1;\u000a              iVar9 = iVar9 + -1;\u000a            } while (iVar9 != 0);\u000a          }\u000a        }\u000a        *arg_ptr = (iVar14 + 1) - (uint)(*ppcVar13 == (char *)0x0);\u000a        return true;\u000a      }\u000a    }\u000a    *arg_ptr = iVar14;\u000a    free(__ptr);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p2824
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x68\nMOV R12,RCX\nMOV R13,RDX\nMOV R15,RDI\nTEST R13,R13\nJZ 0x0040ccd3\nMOVSXD RAX,dword ptr [R12]\nCMP qword ptr [R13 + RAX*0x8],0x0\nJZ 0x0040ccd3\nMOV RBX,qword ptr [RSI + 0x18]\nMOV EDX,0x4211ba\nMOV RDI,RSI\nMOV RSI,RBX\nCALL 0x004076f0\nMOV RBP,RAX\nMOV byte ptr [RBP + 0x19],0x1\nMOV byte ptr [RBP + 0x18],0x1\nMOV byte ptr [RBP + 0x1a],0x0\nMOV byte ptr [RBP + 0x1b],0x0\nMOV qword ptr [0xf8 + RBP],0x0\nMOV EAX,0x4044a0\nMOV ECX,0x404460\nCMP RBX,RCX\nSETZ CL\nSETNZ R14B\nCMP RBX,RAX\nSETNZ byte ptr [RSP + 0xc]\nSETZ AL\nOR CL,AL\nMOV byte ptr [0xf4 + RBP],CL\nMOV ECX,0x404040\nMOV qword ptr [RSP + 0x48],RBX\nCMP RBX,RCX\nSETZ CL\nOR CL,AL\nMOV EBX,ECX\nCMP CL,0x1\nJNZ 0x0040cb1e\nMOV qword ptr [0xf8 + RBP],0x0\nMOV byte ptr [0x0062f04e],0x0\nMOV RDI,R15\nCALL 0x0040cf70\nJMP 0x0040cb35\nMOV RAX,qword ptr [0x0062de78]\nTEST RAX,RAX\nJZ 0x0040cf3e\nMOV qword ptr [0xf8 + RBP],RAX\nMOV byte ptr [RBP + 0x38],0x0\nMOV EDX,dword ptr [R12]\nMOVSXD RCX,EDX\nMOV RAX,qword ptr [R13 + RCX*0x8]\nTEST RAX,RAX\nJZ 0x0040ccc7\nMOV qword ptr [RSP + 0x30],R12\nAND byte ptr [RSP + 0xc],R14B\nMOV qword ptr [RSP + 0x28],RBP\nLEA RSI,[RBP + 0x38]\nMOV qword ptr [RSP + 0x20],RSI\nMOV qword ptr [RSP + 0x40],R13\nMOV qword ptr [RSP + 0x38],RCX\nLEA R14,[R13 + RCX*0x8]\nXOR BL,0x1\nMOV dword ptr [RSP + 0x1c],EDX\nMOV R15D,EDX\nXOR R13D,R13D\nXOR ECX,ECX\nMOV qword ptr [RSP + 0x10],RCX\nXOR EBP,EBP\nNOP dword ptr [RAX + RAX*0x1]\nMOVZX ECX,byte ptr [RAX]\nCMP CL,0x3b\nJNZ 0x0040cbb0\nCMP byte ptr [RAX + 0x1],0x0\nJNZ 0x0040cbd0\nJMP 0x0040cc51\nCMP CL,0x2b\nSETZ CL\nAND CL,byte ptr [RSP + 0xc]\nCMP CL,0x1\nJNZ 0x0040cbd0\nTEST R13D,R13D\nJZ 0x0040cbd0\nMOVZX EAX,byte ptr [RAX + 0x1]\nTEST AL,AL\nJZ 0x0040cc49\nNOP dword ptr [RAX]\nMOV R12,qword ptr [R14]\nMOV ESI,0x421235\nMOV RDI,R12\nCALL 0x00411f20\nTEST RAX,RAX\nJZ 0x0040cc30\nINC EBP\nTEST R15D,R15D\nSETNZ AL\nMOV R13D,0x1\nOR AL,BL\nJNZ 0x0040cc22\nXOR EDI,EDI\nMOV ESI,0x421238\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV R13D,0x1\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402d90\nMOV qword ptr [RSP + 0x10],R12\nJMP 0x0040cc33\nXOR R13D,R13D\nINC R15D\nMOV RAX,qword ptr [R14 + 0x8]\nADD R14,0x8\nTEST RAX,RAX\nJNZ 0x0040cb90\nJMP 0x0040cc51\nMOV RAX,qword ptr [RSP + 0x20]\nMOV byte ptr [RAX],0x1\nMOV R12D,R15D\nSUB R12D,dword ptr [RSP + 0x1c]\nJZ 0x0040ccba\nCMP qword ptr [R14],0x0\nJZ 0x0040ccba\nMOV RAX,qword ptr [RSP + 0x20]\nCMP byte ptr [RAX],0x0\nJZ 0x0040cd97\nMOV EAX,0x404040\nCMP qword ptr [RSP + 0x48],RAX\nMOV EAX,0x41c759\nMOV R13D,0x41e69a\nCMOVZ R13,RAX\nCMP EBP,0x2\nJL 0x0040cce4\nXOR EDI,EDI\nMOV ESI,0x4212aa\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,R13\nCALL 0x00402d90\nJMP 0x0040cd97\nMOV EDX,R15D\nMOV R12,qword ptr [RSP + 0x30]\nMOV RBP,qword ptr [RSP + 0x28]\nMOV dword ptr [R12],EDX\nMOV RDI,RBP\nCALL 0x00402710\nXOR EAX,EAX\nADD RSP,0x68\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RDI,qword ptr [RSP + 0x10]\nCALL 0x00402930\nCMP RAX,0x2\nJZ 0x0040cd97\nMOV dword ptr [RSP + 0xc],R12D\nLEA RDI,[RSP + 0x50]\nMOV ESI,0x13\nMOV EDX,0x4212e2\nXOR EAX,EAX\nMOV RCX,R13\nCALL 0x004029e0\nCMP EAX,0x14\nJNC 0x0040cf57\nXOR EDI,EDI\nMOV ESI,0x421308\nMOV EDX,0x5\nCALL 0x00402910\nMOV RBX,RAX\nMOV ESI,dword ptr [0x0062f0ac]\nLEA RDX,[RSP + 0x50]\nXOR EDI,EDI\nCALL 0x00416290\nMOV R13,RAX\nMOV ESI,dword ptr [0x0062f0ac]\nMOV EDI,0x1\nMOV EDX,0x421235\nCALL 0x00416290\nMOV R12,RAX\nMOV ESI,dword ptr [0x0062f0ac]\nMOV EDI,0x2\nMOV RDX,qword ptr [RSP + 0x10]\nCALL 0x00416290\nMOV RBP,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nMOV RCX,R13\nMOV R8,R12\nMOV R9,RBP\nCALL 0x00402d90\nMOV R12D,dword ptr [RSP + 0xc]\nMOV RBP,qword ptr [RSP + 0x28]\nLEA RBX,[RBP + 0x40]\nMOV ESI,0x800\nMOV RDI,RBX\nCALL 0x0040e250\nDEC EAX\nCMP EAX,0x1\nJA 0x0040cdd9\nXOR EDI,EDI\nMOV ESI,0x421341\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402d90\nMOV RDI,RBX\nCALL 0x0040e300\nMOV qword ptr [0x80 + RBP],0x405470\nCMP byte ptr [RBP + 0x38],0x0\nMOV R13,qword ptr [RSP + 0x40]\nJZ 0x0040ce9a\nMOV qword ptr [0xe8 + RBP],0x0\nDEC R12D\nMOVSXD RAX,R12D\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBP + 0x68],XMM0\nMOVUPS xmmword ptr [0x88 + RBP],XMM0\nMOV qword ptr [RBP + 0x78],RAX\nADD RBP,0x98\nMOV RDI,RBX\nMOV RSI,RBP\nMOV RDX,qword ptr [RSP + 0x20]\nCALL 0x0040e330\nMOV qword ptr [RSP + 0x10],RBX\nLEA EBX,[R15 + -0x1]\nMOV ECX,dword ptr [RSP + 0x1c]\nCMP ECX,EBX\nMOV R12,RBP\nJGE 0x0040cf27\nMOV RAX,qword ptr [RSP + 0x38]\nLEA RBP,[R13 + RAX*0x8]\nSUB EBX,ECX\nNOP dword ptr [RAX]\nMOV R13,qword ptr [RBP]\nMOV RDI,R13\nCALL 0x00402930\nLEA RCX,[RAX + 0x1]\nMOV dword ptr [RSP],0x1\nXOR R8D,R8D\nXOR R9D,R9D\nMOV RDI,qword ptr [RSP + 0x10]\nMOV RSI,R12\nMOV RDX,R13\nCALL 0x0040dcf0\nADD RBP,0x8\nDEC EBX\nJNZ 0x0040ce60\nJMP 0x0040cf27\nMOV dword ptr [0xf0 + RBP],R12D\nMOV qword ptr [RBP + 0x70],0x421235\nMOV qword ptr [RBP + 0x68],0x2\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [0x88 + RBP],XMM0\nMOVSXD RDI,dword ptr [0xf0 + RBP]\nSHL RDI,0x3\nCALL 0x00417220\nMOV qword ptr [0xe8 + RBP],RAX\nMOV RSI,RBP\nADD RSI,0x98\nMOV RDI,RBX\nMOV RDX,qword ptr [RSP + 0x20]\nCALL 0x0040e330\nCMP dword ptr [0xf0 + RBP],0x0\nJLE 0x0040cf27\nMOVSXD RAX,dword ptr [0xf0 + RBP]\nMOV RCX,qword ptr [RSP + 0x38]\nLEA RCX,[R13 + RCX*0x8]\nXOR EDX,EDX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RSI,qword ptr [RCX + RDX*0x8]\nMOV RDI,qword ptr [0xe8 + RBP]\nMOV qword ptr [RDI + RDX*0x8],RSI\nINC RDX\nCMP RDX,RAX\nJL 0x0040cf10\nCMP qword ptr [R14],0x1\nSBB R15D,-0x1\nMOV RAX,qword ptr [RSP + 0x30]\nMOV dword ptr [RAX],R15D\nMOV AL,0x1\nJMP 0x0040ccd5\nMOV EDI,0x4211d2\nMOV ESI,0x420cb7\nMOV EDX,0xb9f\nMOV ECX,0x4211e5\nCALL 0x00402a40\nMOV EDI,0x4212f3\nMOV ESI,0x420cb7\nMOV EDX,0xbec\nMOV ECX,0x4211e5\nCALL 0x00402a40\n'
p2825
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 68\n49 89 cc\n49 89 d5\n49 89 ff\n4d 85 ed\n0f 84 53 02 00 00\n49 63 04 24\n49 83 7c c5 00 00\n0f 84 43 02 00 00\n48 8b 5e 18\nba ba 11 42 00\n48 89 f7\n48 89 de\ne8 4c ac ff ff\n48 89 c5\nc6 45 19 01\nc6 45 18 01\nc6 45 1a 00\nc6 45 1b 00\n48 c7 85 f8 00 00 00 00 00 00 00\nb8 a0 44 40 00\nb9 60 44 40 00\n48 39 cb\n0f 94 c1\n41 0f 95 c6\n48 39 c3\n0f 95 44 24 0c\n0f 94 c0\n08 c1\n88 8d f4 00 00 00\nb9 40 40 40 00\n48 89 5c 24 48\n48 39 cb\n0f 94 c1\n08 c1\n89 cb\n80 f9 01\n75 1c\n48 c7 85 f8 00 00 00 00 00 00 00\nc6 05 3a 25 22 00 00\n4c 89 ff\ne8 54 04 00 00\neb 17\n48 8b 05 53 13 22 00\n48 85 c0\n0f 84 10 04 00 00\n48 89 85 f8 00 00 00\nc6 45 38 00\n41 8b 14 24\n48 63 ca\n49 8b 44 cd 00\n48 85 c0\n0f 84 79 01 00 00\n4c 89 64 24 30\n44 20 74 24 0c\n48 89 6c 24 28\n48 8d 75 38\n48 89 74 24 20\n4c 89 6c 24 40\n48 89 4c 24 38\n4d 8d 74 cd 00\n80 f3 01\n89 54 24 1c\n41 89 d7\n45 31 ed\n31 c9\n48 89 4c 24 10\n31 ed\n0f 1f 44 00 00\n0f b6 08\n80 f9 3b\n75 18\n80 78 01 00\n75 32\ne9 ae 00 00 00\n80 f9 2b\n0f 94 c1\n22 4c 24 0c\n80 f9 01\n75 11\n45 85 ed\n74 0c\n0f b6 40 01\n84 c0\n74 7d\n0f 1f 40 00\n4d 8b 26\nbe 35 12 42 00\n4c 89 e7\ne8 40 53 00 00\n48 85 c0\n74 4b\nff c5\n45 85 ff\n0f 95 c0\n41 bd 01 00 00 00\n08 d8\n75 2b\n31 ff\nbe 38 12 42 00\nba 05 00 00 00\ne8 08 5d ff ff\n48 89 c1\n41 bd 01 00 00 00\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 6e 61 ff ff\n4c 89 64 24 10\neb 0a\n45 31 ed\n41 ff c7\n49 8b 46 08\n49 83 c6 08\n48 85 c0\n0f 85 49 ff ff ff\neb 08\n48 8b 44 24 20\nc6 00 01\n45 89 fc\n44 2b 64 24 1c\n74 5f\n49 83 3e 00\n74 59\n48 8b 44 24 20\n80 38 00\n0f 84 28 01 00 00\nb8 40 40 40 00\n48 39 44 24 48\nb8 59 c7 41 00\n41 bd 9a e6 41 00\n4c 0f 44 e8\n83 fd 02\n7c 57\n31 ff\nbe aa 12 42 00\nba 05 00 00 00\ne8 72 5c ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\n4c 89 e9\ne8 db 60 ff ff\ne9 dd 00 00 00\n44 89 fa\n4c 8b 64 24 30\n48 8b 6c 24 28\n41 89 14 24\n48 89 ef\ne8 3d 5a ff ff\n31 c0\n48 83 c4 68\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 7c 24 10\ne8 42 5c ff ff\n48 83 f8 02\n0f 84 9f 00 00 00\n44 89 64 24 0c\n48 8d 7c 24 50\nbe 13 00 00 00\nba e2 12 42 00\n31 c0\n4c 89 e9\ne8 ca 5c ff ff\n83 f8 14\n0f 83 38 02 00 00\n31 ff\nbe 08 13 42 00\nba 05 00 00 00\ne8 e0 5b ff ff\n48 89 c3\n8b 35 73 23 22 00\n48 8d 54 24 50\n31 ff\ne8 4b 95 00 00\n49 89 c5\n8b 35 5e 23 22 00\nbf 01 00 00 00\nba 35 12 42 00\ne8 33 95 00 00\n49 89 c4\n8b 35 46 23 22 00\nbf 02 00 00 00\n48 8b 54 24 10\ne8 1b 95 00 00\n48 89 c5\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 da\n4c 89 e9\n4d 89 e0\n49 89 e9\ne8 fe 5f ff ff\n44 8b 64 24 0c\n48 8b 6c 24 28\n48 8d 5d 40\nbe 00 08 00 00\n48 89 df\ne8 a3 14 00 00\nff c8\n83 f8 01\n77 25\n31 ff\nbe 41 13 42 00\nba 05 00 00 00\ne8 4b 5b ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 b7 5f ff ff\n48 89 df\ne8 1f 15 00 00\n48 c7 85 80 00 00 00 70 54 40 00\n80 7d 38 00\n4c 8b 6c 24 40\n0f 84 9f 00 00 00\n48 c7 85 e8 00 00 00 00 00 00 00\n41 ff cc\n49 63 c4\n0f 57 c0\n0f 11 45 68\n0f 11 85 88 00 00 00\n48 89 45 78\n48 81 c5 98 00 00 00\n48 89 df\n48 89 ee\n48 8b 54 24 20\ne8 fb 14 00 00\n48 89 5c 24 10\n41 8d 5f ff\n8b 4c 24 1c\n39 d9\n49 89 ec\n0f 8d da 00 00 00\n48 8b 44 24 38\n49 8d 6c c5 00\n29 cb\n0f 1f 80 00 00 00 00\n4c 8b 6d 00\n4c 89 ef\ne8 c4 5a ff ff\n48 8d 48 01\nc7 04 24 01 00 00 00\n45 31 c0\n45 31 c9\n48 8b 7c 24 10\n4c 89 e6\n4c 89 ea\ne8 63 0e 00 00\n48 83 c5 08\nff cb\n75 cb\ne9 8d 00 00 00\n44 89 a5 f0 00 00 00\n48 c7 45 70 35 12 42 00\n48 c7 45 68 02 00 00 00\n0f 57 c0\n0f 11 85 88 00 00 00\n48 63 bd f0 00 00 00\n48 c1 e7 03\ne8 55 a3 00 00\n48 89 85 e8 00 00 00\n48 89 ee\n48 81 c6 98 00 00 00\n48 89 df\n48 8b 54 24 20\ne8 47 14 00 00\n83 bd f0 00 00 00 00\n7e 35\n48 63 85 f0 00 00 00\n48 8b 4c 24 38\n49 8d 4c cd 00\n31 d2\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 34 d1\n48 8b bd e8 00 00 00\n48 89 34 d7\n48 ff c2\n48 39 c2\n7c e9\n49 83 3e 01\n41 83 df ff\n48 8b 44 24 30\n44 89 38\nb0 01\ne9 97 fd ff ff\nbf d2 11 42 00\nbe b7 0c 42 00\nba 9f 0b 00 00\nb9 e5 11 42 00\ne8 e9 5a ff ff\nbf f3 12 42 00\nbe b7 0c 42 00\nba ec 0b 00 00\nb9 e5 11 42 00\ne8 d0 5a ff ff\n'
p2826
S'.text:000000000040ca60\n.text:000000000040ca61\n.text:000000000040ca63\n.text:000000000040ca65\n.text:000000000040ca67\n.text:000000000040ca69\n.text:000000000040ca6a\n.text:000000000040ca6e\n.text:000000000040ca71\n.text:000000000040ca74\n.text:000000000040ca77\n.text:000000000040ca7a\n.text:000000000040ca80\n.text:000000000040ca84\n.text:000000000040ca8a\n.text:000000000040ca90\n.text:000000000040ca94\n.text:000000000040ca99\n.text:000000000040ca9c\n.text:000000000040ca9f\n.text:000000000040caa4\n.text:000000000040caa7\n.text:000000000040caab\n.text:000000000040caaf\n.text:000000000040cab3\n.text:000000000040cab7\n.text:000000000040cac2\n.text:000000000040cac7\n.text:000000000040cacc\n.text:000000000040cacf\n.text:000000000040cad2\n.text:000000000040cad6\n.text:000000000040cad9\n.text:000000000040cade\n.text:000000000040cae1\n.text:000000000040cae3\n.text:000000000040cae9\n.text:000000000040caee\n.text:000000000040caf3\n.text:000000000040caf6\n.text:000000000040caf9\n.text:000000000040cafb\n.text:000000000040cafd\n.text:000000000040cb00\n.text:000000000040cb02\n.text:000000000040cb0d\n.text:000000000040cb14\n.text:000000000040cb17\n.text:000000000040cb1c\n.text:000000000040cb1e\n.text:000000000040cb25\n.text:000000000040cb28\n.text:000000000040cb2e\n.text:000000000040cb35\n.text:000000000040cb39\n.text:000000000040cb3d\n.text:000000000040cb40\n.text:000000000040cb45\n.text:000000000040cb48\n.text:000000000040cb4e\n.text:000000000040cb53\n.text:000000000040cb58\n.text:000000000040cb5d\n.text:000000000040cb61\n.text:000000000040cb66\n.text:000000000040cb6b\n.text:000000000040cb70\n.text:000000000040cb75\n.text:000000000040cb78\n.text:000000000040cb7c\n.text:000000000040cb7f\n.text:000000000040cb82\n.text:000000000040cb84\n.text:000000000040cb89\n.text:000000000040cb8b\n.text:000000000040cb90\n.text:000000000040cb93\n.text:000000000040cb96\n.text:000000000040cb98\n.text:000000000040cb9c\n.text:000000000040cb9e\n.text:000000000040cbb0\n.text:000000000040cbb3\n.text:000000000040cbb6\n.text:000000000040cbba\n.text:000000000040cbbd\n.text:000000000040cbbf\n.text:000000000040cbc2\n.text:000000000040cbc4\n.text:000000000040cbc8\n.text:000000000040cbca\n.text:000000000040cbcc\n.text:000000000040cbd0\n.text:000000000040cbd3\n.text:000000000040cbd8\n.text:000000000040cbdb\n.text:000000000040cbe0\n.text:000000000040cbe3\n.text:000000000040cbe5\n.text:000000000040cbe7\n.text:000000000040cbea\n.text:000000000040cbed\n.text:000000000040cbf3\n.text:000000000040cbf5\n.text:000000000040cbf7\n.text:000000000040cbf9\n.text:000000000040cbfe\n.text:000000000040cc03\n.text:000000000040cc08\n.text:000000000040cc0b\n.text:000000000040cc11\n.text:000000000040cc16\n.text:000000000040cc18\n.text:000000000040cc1a\n.text:000000000040cc1d\n.text:000000000040cc22\n.text:000000000040cc27\n.text:000000000040cc30\n.text:000000000040cc33\n.text:000000000040cc36\n.text:000000000040cc3a\n.text:000000000040cc3e\n.text:000000000040cc41\n.text:000000000040cc47\n.text:000000000040cc49\n.text:000000000040cc4e\n.text:000000000040cc51\n.text:000000000040cc54\n.text:000000000040cc59\n.text:000000000040cc5b\n.text:000000000040cc5f\n.text:000000000040cc61\n.text:000000000040cc66\n.text:000000000040cc69\n.text:000000000040cc6f\n.text:000000000040cc74\n.text:000000000040cc79\n.text:000000000040cc7e\n.text:000000000040cc84\n.text:000000000040cc88\n.text:000000000040cc8b\n.text:000000000040cc8d\n.text:000000000040cc8f\n.text:000000000040cc94\n.text:000000000040cc99\n.text:000000000040cc9e\n.text:000000000040cca1\n.text:000000000040cca6\n.text:000000000040cca8\n.text:000000000040ccaa\n.text:000000000040ccad\n.text:000000000040ccb0\n.text:000000000040ccb5\n.text:000000000040ccba\n.text:000000000040ccbd\n.text:000000000040ccc2\n.text:000000000040ccc7\n.text:000000000040cccb\n.text:000000000040ccce\n.text:000000000040ccd3\n.text:000000000040ccd5\n.text:000000000040ccd9\n.text:000000000040ccda\n.text:000000000040ccdc\n.text:000000000040ccde\n.text:000000000040cce0\n.text:000000000040cce2\n.text:000000000040cce3\n.text:000000000040cce4\n.text:000000000040cce9\n.text:000000000040ccee\n.text:000000000040ccf2\n.text:000000000040ccf8\n.text:000000000040ccfd\n.text:000000000040cd02\n.text:000000000040cd07\n.text:000000000040cd0c\n.text:000000000040cd0e\n.text:000000000040cd11\n.text:000000000040cd16\n.text:000000000040cd19\n.text:000000000040cd1f\n.text:000000000040cd21\n.text:000000000040cd26\n.text:000000000040cd2b\n.text:000000000040cd30\n.text:000000000040cd33\n.text:000000000040cd39\n.text:000000000040cd3e\n.text:000000000040cd40\n.text:000000000040cd45\n.text:000000000040cd48\n.text:000000000040cd4e\n.text:000000000040cd53\n.text:000000000040cd58\n.text:000000000040cd5d\n.text:000000000040cd60\n.text:000000000040cd66\n.text:000000000040cd6b\n.text:000000000040cd70\n.text:000000000040cd75\n.text:000000000040cd78\n.text:000000000040cd7d\n.text:000000000040cd7f\n.text:000000000040cd81\n.text:000000000040cd84\n.text:000000000040cd87\n.text:000000000040cd8a\n.text:000000000040cd8d\n.text:000000000040cd92\n.text:000000000040cd97\n.text:000000000040cd9c\n.text:000000000040cda0\n.text:000000000040cda5\n.text:000000000040cda8\n.text:000000000040cdad\n.text:000000000040cdaf\n.text:000000000040cdb2\n.text:000000000040cdb4\n.text:000000000040cdb6\n.text:000000000040cdbb\n.text:000000000040cdc0\n.text:000000000040cdc5\n.text:000000000040cdc8\n.text:000000000040cdcd\n.text:000000000040cdcf\n.text:000000000040cdd1\n.text:000000000040cdd4\n.text:000000000040cdd9\n.text:000000000040cddc\n.text:000000000040cde1\n.text:000000000040cdec\n.text:000000000040cdf0\n.text:000000000040cdf5\n.text:000000000040cdfb\n.text:000000000040ce06\n.text:000000000040ce09\n.text:000000000040ce0c\n.text:000000000040ce0f\n.text:000000000040ce13\n.text:000000000040ce1a\n.text:000000000040ce1e\n.text:000000000040ce25\n.text:000000000040ce28\n.text:000000000040ce2b\n.text:000000000040ce30\n.text:000000000040ce35\n.text:000000000040ce3a\n.text:000000000040ce3e\n.text:000000000040ce42\n.text:000000000040ce44\n.text:000000000040ce47\n.text:000000000040ce4d\n.text:000000000040ce52\n.text:000000000040ce57\n.text:000000000040ce59\n.text:000000000040ce60\n.text:000000000040ce64\n.text:000000000040ce67\n.text:000000000040ce6c\n.text:000000000040ce70\n.text:000000000040ce77\n.text:000000000040ce7a\n.text:000000000040ce7d\n.text:000000000040ce82\n.text:000000000040ce85\n.text:000000000040ce88\n.text:000000000040ce8d\n.text:000000000040ce91\n.text:000000000040ce93\n.text:000000000040ce95\n.text:000000000040ce9a\n.text:000000000040cea1\n.text:000000000040cea9\n.text:000000000040ceb1\n.text:000000000040ceb4\n.text:000000000040cebb\n.text:000000000040cec2\n.text:000000000040cec6\n.text:000000000040cecb\n.text:000000000040ced2\n.text:000000000040ced5\n.text:000000000040cedc\n.text:000000000040cedf\n.text:000000000040cee4\n.text:000000000040cee9\n.text:000000000040cef0\n.text:000000000040cef2\n.text:000000000040cef9\n.text:000000000040cefe\n.text:000000000040cf03\n.text:000000000040cf05\n.text:000000000040cf10\n.text:000000000040cf14\n.text:000000000040cf1b\n.text:000000000040cf1f\n.text:000000000040cf22\n.text:000000000040cf25\n.text:000000000040cf27\n.text:000000000040cf2b\n.text:000000000040cf2f\n.text:000000000040cf34\n.text:000000000040cf37\n.text:000000000040cf39\n.text:000000000040cf3e\n.text:000000000040cf43\n.text:000000000040cf48\n.text:000000000040cf4d\n.text:000000000040cf52\n.text:000000000040cf57\n.text:000000000040cf5c\n.text:000000000040cf61\n.text:000000000040cf66\n.text:000000000040cf6b\n'
p2827
tp2828
sS'yesno'
p2829
(S'\n__stdcall yesno()\n'
p2830
V\u000a_Bool yesno(void)\u000a\u000a{\u000a  int iVar1;\u000a  __ssize_t _Var2;\u000a  bool bVar3;\u000a  char *local_18;\u000a  size_t local_10;\u000a  \u000a  local_18 = (char *)0x0;\u000a  local_10 = 0;\u000a  _Var2 = getline(&local_18,&local_10,stdin);\u000a  if (_Var2 < 1) {\u000a    bVar3 = false;\u000a  }\u000a  else {\u000a    if (local_18[_Var2 + -1] == '\u005cn') {\u000a      local_18[_Var2 + -1] = 0;\u000a    }\u000a    iVar1 = rpmatch(local_18);\u000a    bVar3 = 0 < iVar1;\u000a  }\u000a  free(local_18);\u000a  return (_Bool)bVar3;\u000a}\u000a\u000a
p2831
S'PUSH RBX\nSUB RSP,0x10\nMOV qword ptr [RSP],0x0\nMOV qword ptr [RSP + 0x8],0x0\nMOV RDX,qword ptr [0x0062de30]\nMOV RDI,RSP\nLEA RSI,[RSP + 0x8]\nCALL 0x00402ea0\nTEST RAX,RAX\nJLE 0x00417aaf\nMOV RCX,qword ptr [RSP]\nCMP byte ptr [RCX + RAX*0x1 + -0x1],0xa\nJNZ 0x00417a9f\nMOV byte ptr [RCX + RAX*0x1 + -0x1],0x0\nMOV RDI,qword ptr [RSP]\nCALL 0x00402bb0\nTEST EAX,EAX\nSETG BL\nJMP 0x00417ab1\nXOR EBX,EBX\nMOV RDI,qword ptr [RSP]\nCALL 0x00402710\nMOV EAX,EBX\nADD RSP,0x10\nPOP RBX\nRET\n'
p2832
S'53\n48 83 ec 10\n48 c7 04 24 00 00 00 00\n48 c7 44 24 08 00 00 00 00\n48 8b 15 b3 63 21 00\n48 89 e7\n48 8d 74 24 08\ne8 16 b4 fe ff\n48 85 c0\n7e 20\n48 8b 0c 24\n80 7c 01 ff 0a\n75 05\nc6 44 01 ff 00\n48 8b 3c 24\ne8 08 b1 fe ff\n85 c0\n0f 9f c3\neb 02\n31 db\n48 8b 3c 24\ne8 56 ac fe ff\n89 d8\n48 83 c4 10\n5b\nc3\n'
p2833
S'.text:0000000000417a60\n.text:0000000000417a61\n.text:0000000000417a65\n.text:0000000000417a6d\n.text:0000000000417a76\n.text:0000000000417a7d\n.text:0000000000417a80\n.text:0000000000417a85\n.text:0000000000417a8a\n.text:0000000000417a8d\n.text:0000000000417a8f\n.text:0000000000417a93\n.text:0000000000417a98\n.text:0000000000417a9a\n.text:0000000000417a9f\n.text:0000000000417aa3\n.text:0000000000417aa8\n.text:0000000000417aaa\n.text:0000000000417aad\n.text:0000000000417aaf\n.text:0000000000417ab1\n.text:0000000000417ab5\n.text:0000000000417aba\n.text:0000000000417abc\n.text:0000000000417ac0\n.text:0000000000417ac1\n'
p2834
tp2835
sS'insert_path_check'
p2836
(S'\n__stdcall insert_path_check(parser_table * entry, char * * argv, int * arg_ptr, char * predicate_name, PREDICATEFUNCTION * pred)\n'
p2837
V\u000a_Bool insert_path_check(parser_table *entry,char **argv,int *arg_ptr,char *predicate_name,\u000a                       _Bool (*pred)(char *,stat *,predicate *))\u000a\u000a{\u000a  _Bool _Var1;\u000a  predicate *ppVar2;\u000a  undefined8 uVar3;\u000a  undefined uVar4;\u000a  float fVar5;\u000a  char *local_30;\u000a  \u000a  fnmatch_sanitycheck();\u000a  _Var1 = collect_arg(argv,arg_ptr,&local_30);\u000a  if (_Var1 == false) {\u000a    uVar4 = 0;\u000a  }\u000a  else {\u000a    ppVar2 = insert_primary_withpred(entry,pred,local_30);\u000a    *(undefined2 *)&ppVar2->need_stat = 0;\u000a    *(char **)ppVar2->args = local_30;\u000a    fVar5 = estimate_pattern_match_rate(local_30);\u000a    ppVar2->est_success_rate = fVar5;\u000a    uVar4 = 1;\u000a    if (options.posixly_correct == false) {\u000a      _Var1 = is_feasible_path_argument(local_30);\u000a      if (_Var1 == false) {\u000a        uVar3 = dcgettext(0,"warning: -%s %s will not match anything because it ends with /.",5);\u000a        error(0,0,uVar3,predicate_name,local_30);\u000a        ppVar2->est_success_rate = 0.00000001;\u000a      }\u000a    }\u000a  }\u000a  return (_Bool)uVar4;\u000a}\u000a\u000a
p2838
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV R12,R8\nMOV R14,RCX\nMOV RBP,RDX\nMOV RBX,RSI\nMOV R15,RDI\nCALL 0x0040d4a0\nLEA RDX,[RSP + 0x8]\nMOV RDI,RBX\nMOV RSI,RBP\nCALL 0x0040c7f0\nTEST AL,AL\nJZ 0x0040d671\nMOV RDX,qword ptr [RSP + 0x8]\nMOV RDI,R15\nMOV RSI,R12\nCALL 0x004076f0\nMOV RBX,RAX\nMOV word ptr [RBX + 0x1a],0x0\nMOV RDI,qword ptr [RSP + 0x8]\nMOV qword ptr [RBX + 0x38],RDI\nXOR ESI,ESI\nCALL 0x0040d450\nMOVSS dword ptr [RBX + 0x24],XMM0\nMOV R15B,0x1\nCMP byte ptr [0x0062f051],0x0\nJNZ 0x0040d674\nMOV EAX,0x4041e0\nXOR ESI,ESI\nCMP R12,RAX\nSETZ SIL\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x0040d690\nTEST AL,AL\nJNZ 0x0040d674\nXOR EDI,EDI\nMOV ESI,0x4217ec\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV R8,qword ptr [RSP + 0x8]\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,R14\nCALL 0x00402d90\nMOV dword ptr [RBX + 0x24],0x322bcc77\nJMP 0x0040d674\nXOR R15D,R15D\nMOV EAX,R15D\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2839
S'55\n41 57\n41 56\n41 54\n53\n48 83 ec 10\n4d 89 c4\n49 89 ce\n48 89 d5\n48 89 f3\n49 89 ff\ne8 d0 fe ff ff\n48 8d 54 24 08\n48 89 df\n48 89 ee\ne8 10 f2 ff ff\n84 c0\n0f 84 89 00 00 00\n48 8b 54 24 08\n4c 89 ff\n4c 89 e6\ne8 f8 a0 ff ff\n48 89 c3\n66 c7 43 1a 00 00\n48 8b 7c 24 08\n48 89 7b 38\n31 f6\ne8 3f fe ff ff\nf3 0f 11 43 24\n41 b7 01\n80 3d 31 1a 22 00 00\n75 52\nb8 e0 41 40 00\n31 f6\n49 39 c4\n40 0f 94 c6\n48 8b 7c 24 08\ne8 56 00 00 00\n84 c0\n75 36\n31 ff\nbe ec 17 42 00\nba 05 00 00 00\ne8 c1 52 ff ff\n48 89 c1\n4c 8b 44 24 08\n31 ff\n31 f6\n31 c0\n48 89 ca\n4c 89 f1\ne8 28 57 ff ff\nc7 43 24 77 cc 2b 32\neb 03\n45 31 ff\n44 89 f8\n48 83 c4 10\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p2840
S'.text:000000000040d5b0\n.text:000000000040d5b1\n.text:000000000040d5b3\n.text:000000000040d5b5\n.text:000000000040d5b7\n.text:000000000040d5b8\n.text:000000000040d5bc\n.text:000000000040d5bf\n.text:000000000040d5c2\n.text:000000000040d5c5\n.text:000000000040d5c8\n.text:000000000040d5cb\n.text:000000000040d5d0\n.text:000000000040d5d5\n.text:000000000040d5d8\n.text:000000000040d5db\n.text:000000000040d5e0\n.text:000000000040d5e2\n.text:000000000040d5e8\n.text:000000000040d5ed\n.text:000000000040d5f0\n.text:000000000040d5f3\n.text:000000000040d5f8\n.text:000000000040d5fb\n.text:000000000040d601\n.text:000000000040d606\n.text:000000000040d60a\n.text:000000000040d60c\n.text:000000000040d611\n.text:000000000040d616\n.text:000000000040d619\n.text:000000000040d620\n.text:000000000040d622\n.text:000000000040d627\n.text:000000000040d629\n.text:000000000040d62c\n.text:000000000040d630\n.text:000000000040d635\n.text:000000000040d63a\n.text:000000000040d63c\n.text:000000000040d63e\n.text:000000000040d640\n.text:000000000040d645\n.text:000000000040d64a\n.text:000000000040d64f\n.text:000000000040d652\n.text:000000000040d657\n.text:000000000040d659\n.text:000000000040d65b\n.text:000000000040d65d\n.text:000000000040d660\n.text:000000000040d663\n.text:000000000040d668\n.text:000000000040d66f\n.text:000000000040d671\n.text:000000000040d674\n.text:000000000040d677\n.text:000000000040d67b\n.text:000000000040d67c\n.text:000000000040d67e\n.text:000000000040d680\n.text:000000000040d682\n.text:000000000040d683\n'
p2841
tp2842
sS'rotr16'
p2843
(S'\n__stdcall rotr16()\n'
p2844
V\u000auint16_t rotr16(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint16_t)\u000a         ((ushort)(in_EDI << (0x10 - (byte)in_ESI & 0x1f)) |\u000a         (ushort)(in_EDI >> ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p2845
S'MOV EAX,EDI\nMOV ECX,ESI\nSHR EAX,CL\nMOV ECX,0x10\nSUB ECX,ESI\nSHL EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p2846
S'89 f8\n89 f1\nd3 e8\nb9 10 00 00 00\n29 f1\nd3 e7\n09 c7\n89 f8\nc3\n'
p2847
S'.text:000000000041b8e0\n.text:000000000041b8e2\n.text:000000000041b8e4\n.text:000000000041b8e6\n.text:000000000041b8eb\n.text:000000000041b8ed\n.text:000000000041b8ef\n.text:000000000041b8f1\n.text:000000000041b8f3\n'
p2848
tp2849
sS'openat'
p2850
(S'\n__stdcall openat(int __fd, char * __file, int __oflag)\n'
p2851
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint openat(int __fd,char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_openat_0062d148)();\u000a  return iVar1;\u000a}\u000a\u000a
p2852
S'JMP qword ptr [0x0062d148]\n'
p2853
S'ff 25 f2 a7 22 00\n'
p2854
S'.plt:0000000000402950\n'
p2855
tp2856
sS'setlocale'
p2857
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p2858
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_0062d348)();\u000a  return pcVar1;\u000a}\u000a\u000a
p2859
S'JMP qword ptr [0x0062d348]\n'
p2860
S'ff 25 f2 a5 22 00\n'
p2861
S'.plt:0000000000402d50\n'
p2862
tp2863
sS'should_issue_warnings'
p2864
(S'\n__stdcall should_issue_warnings()\n'
p2865
V\u000a_Bool should_issue_warnings(void)\u000a\u000a{\u000a  return (_Bool)(options.warnings != false && options.posixly_correct == false);\u000a}\u000a\u000a
p2866
S'CMP byte ptr [0x0062f051],0x0\nSETZ CL\nCMP byte ptr [0x0062f050],0x0\nSETNZ AL\nAND AL,CL\nRET\n'
p2867
S'80 3d 4a 46 22 00 00\n0f 94 c1\n80 3d 3f 46 22 00 00\n0f 95 c0\n20 c8\nc3\n'
p2868
S'.text:000000000040aa00\n.text:000000000040aa07\n.text:000000000040aa0a\n.text:000000000040aa11\n.text:000000000040aa14\n.text:000000000040aa16\n'
p2869
tp2870
sS'c_toupper'
p2871
(S'\n__stdcall c_toupper()\n'
p2872
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p2873
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p2874
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p2875
S'.text:000000000041ba80\n.text:000000000041ba83\n.text:000000000041ba86\n.text:000000000041ba89\n.text:000000000041ba8c\n'
p2876
tp2877
sS'parse_used'
p2878
(S'\n__stdcall parse_used(parser_table * entry, char * * argv, int * arg_ptr)\n'
p2879
V\u000a_Bool parse_used(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  predicate *ppVar2;\u000a  undefined8 uVar3;\u000a  undefined uVar4;\u000a  float fVar5;\u000a  time_val tval;\u000a  char *local_28;\u000a  xval local_20;\u000a  comparison_type cStack28;\u000a  undefined4 local_18;\u000a  undefined4 uStack20;\u000a  __syscall_slong_t local_10;\u000a  \u000a  _Var1 = collect_arg(argv,arg_ptr,&local_28);\u000a  if (_Var1 == false) {\u000a    uVar4 = 0;\u000a  }\u000a  else {\u000a    _Var1 = get_relative_timestamp(local_28,(time_val *)&local_20,DAT_0041fbb8,(char *)0x0);\u000a    if (_Var1 == false) {\u000a      uVar4 = 0;\u000a      uVar3 = dcgettext(0,"Invalid argument %s to -used",5);\u000a      error(1,0,uVar3,local_28);\u000a    }\u000a    else {\u000a      ppVar2 = insert_primary(entry,local_28);\u000a      *(__syscall_slong_t *)(ppVar2->args + 0x10) = local_10;\u000a      *(xval *)ppVar2->args = local_20;\u000a      *(comparison_type *)(ppVar2->args + 4) = cStack28;\u000a      *(undefined4 *)(ppVar2->args + 8) = local_18;\u000a      *(undefined4 *)(ppVar2->args + 0xc) = uStack20;\u000a      fVar5 = estimate_file_age_success_rate\u000a                        ((float)SUB168(SEXT816(0x1845c8a0ce512957) *\u000a                                       SEXT816(CONCAT44(uStack20,local_18)) >> 0x4d,0));\u000a      ppVar2->est_success_rate = fVar5;\u000a      uVar4 = 1;\u000a    }\u000a  }\u000a  return (_Bool)uVar4;\u000a}\u000a\u000a
p2880
S'PUSH RBX\nSUB RSP,0x20\nMOV RBX,RDI\nMOV RAX,RSP\nMOV RDI,RSI\nMOV RSI,RDX\nMOV RDX,RAX\nCALL 0x0040c7f0\nTEST AL,AL\nJZ 0x0040c4a5\nMOV RDI,qword ptr [RSP]\nLEA RSI,[RSP + 0x8]\nMOVSD XMM0,qword ptr [0x0041fbb8]\nXOR EDX,EDX\nXOR ECX,ECX\nMOV R8D,0x42107a\nCALL 0x0040c810\nTEST AL,AL\nJZ 0x0040c4a9\nMOV RSI,qword ptr [RSP]\nMOV RDI,RBX\nCALL 0x00407730\nMOV RBX,RAX\nMOV RAX,qword ptr [RSP + 0x18]\nMOV qword ptr [RBX + 0x48],RAX\nMOVUPS XMM0,xmmword ptr [RSP + 0x8]\nMOVUPS xmmword ptr [RBX + 0x38],XMM0\nMOV RAX,0x1845c8a0ce512957\nIMUL qword ptr [RSP + 0x10]\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0xd\nADD RDX,RAX\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RDX\nCALL 0x0040ae10\nMOVSS dword ptr [RBX + 0x24],XMM0\nMOV BL,0x1\nJMP 0x0040c4d1\nXOR EBX,EBX\nJMP 0x0040c4d1\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x421b5f\nMOV EDX,0x5\nCALL 0x00402910\nMOV RDX,RAX\nMOV RCX,qword ptr [RSP]\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00402d90\nMOV EAX,EBX\nADD RSP,0x20\nPOP RBX\nRET\n'
p2881
S'53\n48 83 ec 20\n48 89 fb\n48 89 e0\n48 89 f7\n48 89 d6\n48 89 c2\ne8 c7 03 00 00\n84 c0\n74 78\n48 8b 3c 24\n48 8d 74 24 08\nf2 0f 10 05 7a 37 01 00\n31 d2\n31 c9\n41 b8 7a 10 42 00\ne8 c3 03 00 00\n84 c0\n74 58\n48 8b 34 24\n48 89 df\ne8 d3 b2 ff ff\n48 89 c3\n48 8b 44 24 18\n48 89 43 48\n0f 10 44 24 08\n0f 11 43 38\n48 b8 57 29 51 ce a0 c8 45 18\n48 f7 6c 24 10\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 0d\n48 01 c2\n0f 57 c0\nf3 48 0f 2a c2\ne8 74 e9 ff ff\nf3 0f 11 43 24\nb3 01\neb 2c\n31 db\neb 28\n31 db\n31 ff\nbe 5f 1b 42 00\nba 05 00 00 00\ne8 54 64 ff ff\n48 89 c2\n48 8b 0c 24\nbf 01 00 00 00\n31 f6\n31 c0\ne8 bf 68 ff ff\n89 d8\n48 83 c4 20\n5b\nc3\n'
p2882
S'.text:000000000040c410\n.text:000000000040c411\n.text:000000000040c415\n.text:000000000040c418\n.text:000000000040c41b\n.text:000000000040c41e\n.text:000000000040c421\n.text:000000000040c424\n.text:000000000040c429\n.text:000000000040c42b\n.text:000000000040c42d\n.text:000000000040c431\n.text:000000000040c436\n.text:000000000040c43e\n.text:000000000040c440\n.text:000000000040c442\n.text:000000000040c448\n.text:000000000040c44d\n.text:000000000040c44f\n.text:000000000040c451\n.text:000000000040c455\n.text:000000000040c458\n.text:000000000040c45d\n.text:000000000040c460\n.text:000000000040c465\n.text:000000000040c469\n.text:000000000040c46e\n.text:000000000040c472\n.text:000000000040c47c\n.text:000000000040c481\n.text:000000000040c484\n.text:000000000040c488\n.text:000000000040c48c\n.text:000000000040c48f\n.text:000000000040c492\n.text:000000000040c497\n.text:000000000040c49c\n.text:000000000040c4a1\n.text:000000000040c4a3\n.text:000000000040c4a5\n.text:000000000040c4a7\n.text:000000000040c4a9\n.text:000000000040c4ab\n.text:000000000040c4ad\n.text:000000000040c4b2\n.text:000000000040c4b7\n.text:000000000040c4bc\n.text:000000000040c4bf\n.text:000000000040c4c3\n.text:000000000040c4c8\n.text:000000000040c4ca\n.text:000000000040c4cc\n.text:000000000040c4d1\n.text:000000000040c4d3\n.text:000000000040c4d7\n.text:000000000040c4d8\n'
p2883
tp2884
sS'cost_table_comparison'
p2885
(S'\n__stdcall cost_table_comparison(void * p1, void * p2)\n'
p2886
V\u000aint cost_table_comparison(void *p1,void *p2)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 local_10;\u000a  undefined8 local_8;\u000a  \u000a  local_8 = *(undefined8 *)p1;\u000a  local_10 = *(undefined8 *)p2;\u000a  iVar1 = memcmp(&local_8,&local_10,8);\u000a  return iVar1;\u000a}\u000a\u000a
p2887
S'SUB RSP,0x18\nMOV RAX,qword ptr [RDI]\nMOV qword ptr [RSP + 0x10],RAX\nMOV RAX,qword ptr [RSI]\nMOV qword ptr [RSP + 0x8],RAX\nLEA RDI,[RSP + 0x10]\nLEA RSI,[RSP + 0x8]\nMOV EDX,0x8\nCALL 0x00402b20\nADD RSP,0x18\nRET\n'
p2888
S'48 83 ec 18\n48 8b 07\n48 89 44 24 10\n48 8b 06\n48 89 44 24 08\n48 8d 7c 24 10\n48 8d 74 24 08\nba 08 00 00 00\ne8 58 bb ff ff\n48 83 c4 18\nc3\n'
p2889
S'.text:0000000000406fa0\n.text:0000000000406fa4\n.text:0000000000406fa7\n.text:0000000000406fac\n.text:0000000000406faf\n.text:0000000000406fb4\n.text:0000000000406fb9\n.text:0000000000406fbe\n.text:0000000000406fc3\n.text:0000000000406fc8\n.text:0000000000406fcc\n'
p2890
tp2891
sS'fcntl'
p2892
(S'\n__stdcall fcntl(int __fd, int __cmd)\n'
p2893
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fcntl(int __fd,int __cmd,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fcntl_0062d0e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p2894
S'JMP qword ptr [0x0062d0e0]\n'
p2895
S'ff 25 5a a8 22 00\n'
p2896
S'.plt:0000000000402880\n'
p2897
tp2898
sS'get_pred_cost'
p2899
(S'\n__stdcall get_pred_cost(predicate * p)\n'
p2900
V\u000aEvaluationCost get_pred_cost(predicate *p)\u000a\u000a{\u000a  _Bool (*pVar1)(char *,stat *,predicate *);\u000a  _Bool _Var2;\u000a  EvaluationCost EVar3;\u000a  void *pvVar4;\u000a  undefined8 uVar5;\u000a  EvaluationCost EVar6;\u000a  _Bool (*local_20 [2])(char *,stat *,predicate *);\u000a  \u000a  EVar6 = NeedsStatInfo;\u000a  if ((p->need_stat == false) && (EVar6 = NeedsInodeNumber, p->need_inum == false)) {\u000a    EVar6 = (uint)p->need_type * 2;\u000a  }\u000a  pVar1 = p->pred_func;\u000a  if ((pVar1 == pred_exec) || (pVar1 == pred_execdir)) {\u000a    EVar3 = (uint)(p->args[0] == 0) + NeedsEventualExec;\u000a  }\u000a  else {\u000a    if (pVar1 == pred_fprintf) {\u000a      EVar3 = p->p_cost;\u000a    }\u000a    else {\u000a      if (pred_table_sorted == 0) {\u000a        qsort(costlookup,0x3b,0x10,cost_table_comparison);\u000a        _Var2 = check_sorted();\u000a        if (_Var2 == false) {\u000a          error(1,0,"failed to sort the costlookup array");\u000a        }\u000a        pred_table_sorted = 1;\u000a      }\u000a      local_20[0] = p->pred_func;\u000a      pvVar4 = bsearch(local_20,costlookup,0x3b,0x10,cost_table_comparison);\u000a      if (pvVar4 == (void *)0x0) {\u000a        uVar5 = dcgettext(0,\u000a                          "warning: there is no entry in the predicate evaluation cost table for predicate %s; please report this as a bug"\u000a                          ,5);\u000a        error(0,0,uVar5,p->p_name);\u000a        EVar3 = NeedsUnknown;\u000a      }\u000a      else {\u000a        EVar3 = *(EvaluationCost *)((long)pvVar4 + 8);\u000a      }\u000a    }\u000a  }\u000a  if (EVar6 < EVar3) {\u000a    EVar6 = EVar3;\u000a  }\u000a  return EVar6;\u000a}\u000a\u000a
p2901
S'PUSH R14\nPUSH RBX\nSUB RSP,0x18\nMOV R14,RDI\nMOV EBX,0x3\nCMP byte ptr [R14 + 0x1a],0x0\nJNZ 0x00406ea9\nMOV EBX,0x1\nCMP byte ptr [R14 + 0x1c],0x0\nJNZ 0x00406ea9\nMOVZX EBX,byte ptr [R14 + 0x1b]\nADD EBX,EBX\nMOV RAX,qword ptr [R14]\nMOV ECX,0x404030\nCMP RAX,RCX\nJZ 0x00406f4d\nMOV ECX,0x404040\nCMP RAX,RCX\nJZ 0x00406f4d\nMOV ECX,0x4091c0\nCMP RAX,RCX\nJZ 0x00406f5c\nMOV AL,byte ptr [0x0062deb8]\nTEST AL,AL\nJNZ 0x00406f1c\nMOV EDI,0x62d8f0\nMOV ESI,0x3b\nMOV EDX,0x10\nMOV ECX,0x406fa0\nCALL 0x00402810\nCALL 0x00406fd0\nTEST AL,AL\nJNZ 0x00406f15\nMOV EDI,0x1\nXOR ESI,ESI\nMOV EDX,0x41db12\nXOR EAX,EAX\nCALL 0x00402d90\nMOV byte ptr [0x0062deb8],0x1\nMOV RAX,qword ptr [R14]\nMOV qword ptr [RSP + 0x8],RAX\nLEA RDI,[RSP + 0x8]\nMOV ESI,0x62d8f0\nMOV EDX,0x3b\nMOV ECX,0x10\nMOV R8D,0x406fa0\nCALL 0x00402f00\nTEST RAX,RAX\nJZ 0x00406f62\nMOV EAX,dword ptr [RAX + 0x8]\nJMP 0x00406f8a\nCMP byte ptr [R14 + 0x38],0x1\nMOV EAX,0x7\nADC EAX,0x0\nJMP 0x00406f8a\nMOV EAX,dword ptr [R14 + 0x20]\nJMP 0x00406f8a\nXOR EDI,EDI\nMOV ESI,0x41db36\nMOV EDX,0x5\nCALL 0x00402910\nMOV RDX,RAX\nMOV RCX,qword ptr [R14 + 0x8]\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00402d90\nMOV EAX,0xa\nCMP EAX,EBX\nCMOVA EBX,EAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R14\nRET\n'
p2902
S'41 56\n53\n48 83 ec 18\n49 89 fe\nbb 03 00 00 00\n41 80 7e 1a 00\n75 13\nbb 01 00 00 00\n41 80 7e 1c 00\n75 07\n41 0f b6 5e 1b\n01 db\n49 8b 06\nb9 30 40 40 00\n48 39 c8\n0f 84 93 00 00 00\nb9 40 40 40 00\n48 39 c8\n0f 84 85 00 00 00\nb9 c0 91 40 00\n48 39 c8\n0f 84 86 00 00 00\n8a 05 dc 6f 22 00\n84 c0\n75 3c\nbf f0 d8 62 00\nbe 3b 00 00 00\nba 10 00 00 00\nb9 a0 6f 40 00\ne8 17 b9 ff ff\ne8 d2 00 00 00\n84 c0\n75 13\nbf 01 00 00 00\n31 f6\nba 12 db 41 00\n31 c0\ne8 7b be ff ff\nc6 05 9c 6f 22 00 01\n49 8b 06\n48 89 44 24 08\n48 8d 7c 24 08\nbe f0 d8 62 00\nba 3b 00 00 00\nb9 10 00 00 00\n41 b8 a0 6f 40 00\ne8 bd bf ff ff\n48 85 c0\n74 1a\n8b 40 08\neb 3d\n41 80 7e 38 01\nb8 07 00 00 00\n83 d0 00\neb 2e\n41 8b 46 20\neb 28\n31 ff\nbe 36 db 41 00\nba 05 00 00 00\ne8 9d b9 ff ff\n48 89 c2\n49 8b 4e 08\n31 ff\n31 f6\n31 c0\ne8 0b be ff ff\nb8 0a 00 00 00\n39 d8\n0f 47 d8\n89 d8\n48 83 c4 18\n5b\n41 5e\nc3\n'
p2903
S'.text:0000000000406e80\n.text:0000000000406e82\n.text:0000000000406e83\n.text:0000000000406e87\n.text:0000000000406e8a\n.text:0000000000406e8f\n.text:0000000000406e94\n.text:0000000000406e96\n.text:0000000000406e9b\n.text:0000000000406ea0\n.text:0000000000406ea2\n.text:0000000000406ea7\n.text:0000000000406ea9\n.text:0000000000406eac\n.text:0000000000406eb1\n.text:0000000000406eb4\n.text:0000000000406eba\n.text:0000000000406ebf\n.text:0000000000406ec2\n.text:0000000000406ec8\n.text:0000000000406ecd\n.text:0000000000406ed0\n.text:0000000000406ed6\n.text:0000000000406edc\n.text:0000000000406ede\n.text:0000000000406ee0\n.text:0000000000406ee5\n.text:0000000000406eea\n.text:0000000000406eef\n.text:0000000000406ef4\n.text:0000000000406ef9\n.text:0000000000406efe\n.text:0000000000406f00\n.text:0000000000406f02\n.text:0000000000406f07\n.text:0000000000406f09\n.text:0000000000406f0e\n.text:0000000000406f10\n.text:0000000000406f15\n.text:0000000000406f1c\n.text:0000000000406f1f\n.text:0000000000406f24\n.text:0000000000406f29\n.text:0000000000406f2e\n.text:0000000000406f33\n.text:0000000000406f38\n.text:0000000000406f3e\n.text:0000000000406f43\n.text:0000000000406f46\n.text:0000000000406f48\n.text:0000000000406f4b\n.text:0000000000406f4d\n.text:0000000000406f52\n.text:0000000000406f57\n.text:0000000000406f5a\n.text:0000000000406f5c\n.text:0000000000406f60\n.text:0000000000406f62\n.text:0000000000406f64\n.text:0000000000406f69\n.text:0000000000406f6e\n.text:0000000000406f73\n.text:0000000000406f76\n.text:0000000000406f7a\n.text:0000000000406f7c\n.text:0000000000406f7e\n.text:0000000000406f80\n.text:0000000000406f85\n.text:0000000000406f8a\n.text:0000000000406f8c\n.text:0000000000406f8f\n.text:0000000000406f91\n.text:0000000000406f95\n.text:0000000000406f96\n.text:0000000000406f98\n'
p2904
tp2905
sS'pred_closeparen'
p2906
(S'\n__stdcall pred_closeparen(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p2907
V\u000a_Bool pred_closeparen(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  return true;\u000a}\u000a\u000a
p2908
S'MOV AL,0x1\nRET\n'
p2909
S'b0 01\nc3\n'
p2910
S'.text:0000000000403d50\n.text:0000000000403d52\n'
p2911
tp2912
sS'dirent_inode_sort_may_be_useful'
p2913
(S'\n__stdcall dirent_inode_sort_may_be_useful()\n'
p2914
V\u000a_Bool dirent_inode_sort_may_be_useful(void)\u000a\u000a{\u000a  undefined uVar1;\u000a  int iVar2;\u000a  int __fildes;\u000a  statfs local_78;\u000a  \u000a  iVar2 = fstatfs(__fildes,&local_78);\u000a  uVar1 = 1;\u000a  if (iVar2 == 0) {\u000a    uVar1 = 0;\u000a    if ((local_78.f_type != 0x6969) && (local_78.f_type != 0x1021994)) {\u000a      uVar1 = 1;\u000a    }\u000a  }\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p2915
S'SUB RSP,0x78\nMOV RSI,RSP\nCALL 0x00402e70\nMOV ECX,EAX\nMOV AL,0x1\nTEST ECX,ECX\nJZ 0x00419ee9\nADD RSP,0x78\nRET\nXOR EAX,EAX\nMOV RCX,qword ptr [RSP]\nCMP RCX,0x6969\nJZ 0x00419ee4\nCMP RCX,0x1021994\nJZ 0x00419ee4\nMOV AL,0x1\nJMP 0x00419ee4\n'
p2916
S'48 83 ec 78\n48 89 e6\ne8 94 8f fe ff\n89 c1\nb0 01\n85 c9\n74 05\n48 83 c4 78\nc3\n31 c0\n48 8b 0c 24\n48 81 f9 69 69 00 00\n74 ec\n48 81 f9 94 19 02 01\n74 e3\nb0 01\neb df\n'
p2917
S'.text:0000000000419ed0\n.text:0000000000419ed4\n.text:0000000000419ed7\n.text:0000000000419edc\n.text:0000000000419ede\n.text:0000000000419ee0\n.text:0000000000419ee2\n.text:0000000000419ee4\n.text:0000000000419ee8\n.text:0000000000419ee9\n.text:0000000000419eeb\n.text:0000000000419eef\n.text:0000000000419ef6\n.text:0000000000419ef8\n.text:0000000000419eff\n.text:0000000000419f01\n.text:0000000000419f03\n'
p2918
tp2919
sS'mbslen'
p2920
(S'\n__stdcall mbslen(char * string)\n'
p2921
V\u000asize_t mbslen(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  mbuiter_multi local_50;\u000a  \u000a  sVar1 = __ctype_get_mb_cur_max();\u000a  if (1 < sVar1) {\u000a    local_50.in_shift = false;\u000a    local_50.state = 0;\u000a    local_50.next_done = false;\u000a    local_50.cur.ptr = string;\u000a    mbuiter_multi_next(&local_50);\u000a    if ((local_50.cur.wc_valid == false) || (local_50.cur.wc != 0)) {\u000a      sVar2 = 0;\u000a      do {\u000a        do {\u000a          sVar2 = sVar2 + 1;\u000a          local_50.cur.ptr = local_50.cur.ptr + local_50.cur.bytes;\u000a          local_50.next_done = false;\u000a          mbuiter_multi_next(&local_50);\u000a        } while (local_50.cur.wc_valid == false);\u000a      } while (local_50.cur.wc != 0);\u000a    }\u000a    else {\u000a      sVar2 = 0;\u000a    }\u000a    return sVar2;\u000a  }\u000a  sVar1 = strlen(string);\u000a  return sVar1;\u000a}\u000a\u000a
p2922
S'PUSH R14\nPUSH RBX\nSUB RSP,0x48\nMOV RBX,RDI\nCALL 0x00402920\nCMP RAX,0x2\nJC 0x0041c1da\nMOV qword ptr [RSP + 0x18],RBX\nMOV byte ptr [RSP + 0x8],0x0\nMOV qword ptr [RSP + 0xc],0x0\nMOV byte ptr [RSP + 0x14],0x0\nLEA RDI,[RSP + 0x8]\nCALL 0x00412bc0\nCMP byte ptr [RSP + 0x28],0x0\nJZ 0x0041c1e9\nMOV EAX,dword ptr [RSP + 0x2c]\nTEST EAX,EAX\nJNZ 0x0041c1e9\nXOR EBX,EBX\nJMP 0x0041c219\nMOV RDI,RBX\nADD RSP,0x48\nPOP RBX\nPOP R14\nJMP 0x00402930\nXOR EBX,EBX\nLEA R14,[RSP + 0x8]\nINC RBX\nMOV RAX,qword ptr [RSP + 0x20]\nADD qword ptr [RSP + 0x18],RAX\nMOV byte ptr [RSP + 0x14],0x0\nMOV RDI,R14\nCALL 0x00412bc0\nMOV EAX,dword ptr [RSP + 0x2c]\nCMP byte ptr [RSP + 0x28],0x0\nJZ 0x0041c1f0\nTEST EAX,EAX\nJNZ 0x0041c1f0\nMOV RAX,RBX\nADD RSP,0x48\nPOP RBX\nPOP R14\nRET\n'
p2923
S'41 56\n53\n48 83 ec 48\n48 89 fb\ne8 81 67 fe ff\n48 83 f8 02\n72 35\n48 89 5c 24 18\nc6 44 24 08 00\n48 c7 44 24 0c 00 00 00 00\nc6 44 24 14 00\n48 8d 7c 24 08\ne8 f9 69 ff ff\n80 7c 24 28 00\n74 1b\n8b 44 24 2c\n85 c0\n75 13\n31 db\neb 3f\n48 89 df\n48 83 c4 48\n5b\n41 5e\ne9 47 67 fe ff\n31 db\n4c 8d 74 24 08\n48 ff c3\n48 8b 44 24 20\n48 01 44 24 18\nc6 44 24 14 00\n4c 89 f7\ne8 b6 69 ff ff\n8b 44 24 2c\n80 7c 24 28 00\n74 db\n85 c0\n75 d7\n48 89 d8\n48 83 c4 48\n5b\n41 5e\nc3\n'
p2924
S'.text:000000000041c190\n.text:000000000041c192\n.text:000000000041c193\n.text:000000000041c197\n.text:000000000041c19a\n.text:000000000041c19f\n.text:000000000041c1a3\n.text:000000000041c1a5\n.text:000000000041c1aa\n.text:000000000041c1af\n.text:000000000041c1b8\n.text:000000000041c1bd\n.text:000000000041c1c2\n.text:000000000041c1c7\n.text:000000000041c1cc\n.text:000000000041c1ce\n.text:000000000041c1d2\n.text:000000000041c1d4\n.text:000000000041c1d6\n.text:000000000041c1d8\n.text:000000000041c1da\n.text:000000000041c1dd\n.text:000000000041c1e1\n.text:000000000041c1e2\n.text:000000000041c1e4\n.text:000000000041c1e9\n.text:000000000041c1eb\n.text:000000000041c1f0\n.text:000000000041c1f3\n.text:000000000041c1f8\n.text:000000000041c1fd\n.text:000000000041c202\n.text:000000000041c205\n.text:000000000041c20a\n.text:000000000041c20e\n.text:000000000041c213\n.text:000000000041c215\n.text:000000000041c217\n.text:000000000041c219\n.text:000000000041c21c\n.text:000000000041c220\n.text:000000000041c221\n.text:000000000041c223\n'
p2925
tp2926
sS'adjust_value'
p2927
(S'\n__stdcall adjust_value()\n'
p2928
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000alongdouble adjust_value(void)\u000a\u000a{\u000a  longdouble in_XMM0;\u000a  \u000a  return in_XMM0;\u000a}\u000a\u000a
p2929
S'FLD tword ptr [RSP + 0x8]\nCMP EDI,0x1\nJZ 0x00411a0c\nFLD tword ptr [0x004228d0]\nFUCOMIP ST0,ST1\nJBE 0x00411a0c\nFLD dword ptr [0x00422830]\nFLD ST1\nFSUB ST0,ST1\nFNSTCW word ptr [RSP + -0x22]\nMOVZX EAX,word ptr [RSP + -0x22]\nMOV word ptr [RSP + -0x22],0xc7f\nFLDCW word ptr [RSP + -0x22]\nMOV word ptr [RSP + -0x22],AX\nFISTP qword ptr [RSP + -0x18]\nFLDCW word ptr [RSP + -0x22]\nFNSTCW word ptr [RSP + -0x24]\nMOVZX EAX,word ptr [RSP + -0x24]\nMOV word ptr [RSP + -0x24],0xc7f\nFLDCW word ptr [RSP + -0x24]\nMOV word ptr [RSP + -0x24],AX\nFLD ST1\nFISTP qword ptr [RSP + -0x20]\nFLDCW word ptr [RSP + -0x24]\nMOV RAX,-0x8000000000000000\nXOR RAX,qword ptr [RSP + -0x18]\nFXCH\nFUCOMI ST0,ST1\nFSTP ST1\nCMOVC RAX,qword ptr [RSP + -0x20]\nTEST EDI,EDI\nSETZ SIL\nMOV qword ptr [RSP + -0x10],RAX\nXOR EDX,EDX\nTEST RAX,RAX\nSETNS DL\nFILD qword ptr [RSP + -0x10]\nFADD dword ptr [0x4228b8 + RDX*0x4]\nFUCOMIP ST0,ST1\nFSTP ST0\nSETP DL\nSETNZ CL\nOR CL,DL\nAND CL,SIL\nMOVZX ECX,CL\nXOR EDX,EDX\nADD RCX,RAX\nMOV qword ptr [RSP + -0x8],RCX\nSETNS DL\nFILD qword ptr [RSP + -0x8]\nFADD dword ptr [0x4228b8 + RDX*0x4]\nRET\n'
p2930
S'db 6c 24 08\n83 ff 01\n0f 84 bf 00 00 00\ndb 2d 7d 0f 01 00\ndf e9\n0f 86 b1 00 00 00\nd9 05 cf 0e 01 00\nd9 c1\nd8 e1\nd9 7c 24 de\n0f b7 44 24 de\n66 c7 44 24 de 7f 0c\nd9 6c 24 de\n66 89 44 24 de\ndf 7c 24 e8\nd9 6c 24 de\nd9 7c 24 dc\n0f b7 44 24 dc\n66 c7 44 24 dc 7f 0c\nd9 6c 24 dc\n66 89 44 24 dc\nd9 c1\ndf 7c 24 e0\nd9 6c 24 dc\n48 b8 00 00 00 00 00 00 00 80\n48 33 44 24 e8\nd9 c9\ndb e9\ndd d9\n48 0f 42 44 24 e0\n85 ff\n40 0f 94 c6\n48 89 44 24 f0\n31 d2\n48 85 c0\n0f 99 c2\ndf 6c 24 f0\nd8 04 95 b8 28 42 00\ndf e9\ndd d8\n0f 9a c2\n0f 95 c1\n08 d1\n40 20 f1\n0f b6 c9\n31 d2\n48 01 c1\n48 89 4c 24 f8\n0f 99 c2\ndf 6c 24 f8\nd8 04 95 b8 28 42 00\nc3\n'
p2931
S'.text:0000000000411940\n.text:0000000000411944\n.text:0000000000411947\n.text:000000000041194d\n.text:0000000000411953\n.text:0000000000411955\n.text:000000000041195b\n.text:0000000000411961\n.text:0000000000411963\n.text:0000000000411965\n.text:0000000000411969\n.text:000000000041196e\n.text:0000000000411975\n.text:0000000000411979\n.text:000000000041197e\n.text:0000000000411982\n.text:0000000000411986\n.text:000000000041198a\n.text:000000000041198f\n.text:0000000000411996\n.text:000000000041199a\n.text:000000000041199f\n.text:00000000004119a1\n.text:00000000004119a5\n.text:00000000004119a9\n.text:00000000004119b3\n.text:00000000004119b8\n.text:00000000004119ba\n.text:00000000004119bc\n.text:00000000004119be\n.text:00000000004119c4\n.text:00000000004119c6\n.text:00000000004119ca\n.text:00000000004119cf\n.text:00000000004119d1\n.text:00000000004119d4\n.text:00000000004119d7\n.text:00000000004119db\n.text:00000000004119e2\n.text:00000000004119e4\n.text:00000000004119e6\n.text:00000000004119e9\n.text:00000000004119ec\n.text:00000000004119ee\n.text:00000000004119f1\n.text:00000000004119f4\n.text:00000000004119f6\n.text:00000000004119f9\n.text:00000000004119fe\n.text:0000000000411a01\n.text:0000000000411a05\n.text:0000000000411a0c\n'
p2932
tp2933
sS'pred_regex'
p2934
(S'\n__stdcall pred_regex(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p2935
V\u000a_Bool pred_regex(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  int iVar1;\u000a  size_t sVar2;\u000a  \u000a  sVar2 = strlen(pathname);\u000a  iVar1 = re_match(*(re_pattern_buffer **)pred_ptr->args,pathname,(int)sVar2,0,(re_registers *)0x0);\u000a  return (_Bool)(iVar1 == (int)sVar2);\u000a}\u000a\u000a
p2936
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RDX\nMOV R15,RDI\nCALL 0x00402930\nMOV RBX,RAX\nMOV RDI,qword ptr [R14 + 0x38]\nXOR ECX,ECX\nXOR R8D,R8D\nMOV RSI,R15\nMOV EDX,EBX\nCALL 0x00402760\nCMP EAX,EBX\nSETZ AL\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p2937
S'41 57\n41 56\n53\n49 89 d6\n49 89 ff\ne8 80 e2 ff ff\n48 89 c3\n49 8b 7e 38\n31 c9\n45 31 c0\n4c 89 fe\n89 da\ne8 9a e0 ff ff\n39 d8\n0f 94 c0\n5b\n41 5e\n41 5f\nc3\n'
p2938
S'.text:00000000004046a0\n.text:00000000004046a2\n.text:00000000004046a4\n.text:00000000004046a5\n.text:00000000004046a8\n.text:00000000004046ab\n.text:00000000004046b0\n.text:00000000004046b3\n.text:00000000004046b7\n.text:00000000004046b9\n.text:00000000004046bc\n.text:00000000004046bf\n.text:00000000004046c1\n.text:00000000004046c6\n.text:00000000004046c8\n.text:00000000004046cb\n.text:00000000004046cc\n.text:00000000004046ce\n.text:00000000004046d0\n'
p2939
tp2940
sS'parse_user'
p2941
(S'\n__stdcall parse_user(parser_table * entry, char * * argv, int * arg_ptr)\n'
p2942
V\u000a_Bool parse_user(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  __uid_t _Var2;\u000a  passwd *ppVar3;\u000a  predicate *ppVar4;\u000a  size_t sVar5;\u000a  undefined8 uVar6;\u000a  char *s;\u000a  undefined uVar7;\u000a  char *local_20;\u000a  \u000a  _Var1 = collect_arg(argv,arg_ptr,&local_20);\u000a  if (_Var1 == false) {\u000a    uVar7 = 0;\u000a  }\u000a  else {\u000a    ppVar3 = getpwnam(local_20);\u000a    endpwent();\u000a    s = local_20;\u000a    if (ppVar3 == (passwd *)0x0) {\u000a      sVar5 = strspn(local_20,"0123456789");\u000a      if ((sVar5 == 0) || (s[sVar5] != 0)) {\u000a        if (*s != 0) {\u000a          uVar6 = dcgettext(0,"%s is not the name of a known user",5);\u000a          s = quotearg_n_style((char *)0x0);\u000a          error(1,0,uVar6,s);\u000a          return false;\u000a        }\u000a        uVar6 = dcgettext(0,"The argument to -user should not be empty",5);\u000a        error(1,0,uVar6,uVar6);\u000a        return false;\u000a      }\u000a      _Var2 = safe_atoi(s);\u000a    }\u000a    else {\u000a      _Var2 = ppVar3->pw_uid;\u000a    }\u000a    ppVar4 = insert_primary(entry,local_20);\u000a    *(__uid_t *)ppVar4->args = _Var2;\u000a    ppVar4->est_success_rate = *(float *)(&DAT_0041fbc8 + (ulong)(-(uint)(_Var2 < 100) & 4));\u000a    uVar7 = 1;\u000a  }\u000a  return (_Bool)uVar7;\u000a}\u000a\u000a
p2943
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV RBX,RDI\nLEA RAX,[RSP + 0x8]\nMOV RDI,RSI\nMOV RSI,RDX\nMOV RDX,RAX\nCALL 0x0040c7f0\nTEST AL,AL\nJZ 0x0040c546\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x00402b80\nMOV RBP,RAX\nCALL 0x00402cd0\nTEST RBP,RBP\nJZ 0x0040c553\nMOV EBP,dword ptr [RBP + 0x10]\nMOV RSI,qword ptr [RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00407730\nMOV dword ptr [RAX + 0x38],EBP\nCMP EBP,0x64\nSBB RCX,RCX\nAND ECX,0x4\nMOVSS XMM0,dword ptr [0x41fbc8 + RCX]\nMOVSS dword ptr [RAX + 0x24],XMM0\nMOV BL,0x1\nJMP 0x0040c548\nXOR EBX,EBX\nMOV EAX,EBX\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP RBP\nRET\nMOV R14,qword ptr [RSP + 0x8]\nMOV ESI,0x421570\nMOV RDI,R14\nCALL 0x00402ad0\nTEST RAX,RAX\nJZ 0x0040c571\nCMP byte ptr [R14 + RAX*0x1],0x0\nJZ 0x0040c5e1\nCMP byte ptr [R14],0x0\nJZ 0x0040c5b5\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x421b7c\nMOV EDX,0x5\nCALL 0x00402910\nMOV RBP,RAX\nMOV ESI,dword ptr [0x0062f0ac]\nMOV RDX,qword ptr [RSP + 0x8]\nXOR EDI,EDI\nCALL 0x00416290\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x00402d90\nJMP 0x0040c548\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x421b9f\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402d90\nJMP 0x0040c548\nMOV ESI,dword ptr [0x0062f0ac]\nMOV RDI,R14\nCALL 0x0040fa30\nMOV EBP,EAX\nJMP 0x0040c51c\n'
p2944
S'55\n41 56\n53\n48 83 ec 10\n48 89 fb\n48 8d 44 24 08\n48 89 f7\n48 89 d6\n48 89 c2\ne8 f2 02 00 00\n84 c0\n74 44\n48 8b 7c 24 08\ne8 74 66 ff ff\n48 89 c5\ne8 bc 67 ff ff\n48 85 ed\n74 3a\n8b 6d 10\n48 8b 74 24 08\n48 89 df\ne8 07 b2 ff ff\n89 68 38\n83 fd 64\n48 19 c9\n83 e1 04\nf3 0f 10 81 c8 fb 41 00\nf3 0f 11 40 24\nb3 01\neb 02\n31 db\n89 d8\n48 83 c4 10\n5b\n41 5e\n5d\nc3\n4c 8b 74 24 08\nbe 70 15 42 00\n4c 89 f7\ne8 6b 65 ff ff\n48 85 c0\n74 07\n41 80 3c 06 00\n74 70\n41 80 3e 00\n74 3e\n31 db\n31 ff\nbe 7c 1b 42 00\nba 05 00 00 00\ne8 86 63 ff ff\n48 89 c5\n8b 35 19 2b 22 00\n48 8b 54 24 08\n31 ff\ne8 f1 9c 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ea\ne8 dd 67 ff ff\neb 93\n31 db\n31 ff\nbe 9f 1b 42 00\nba 05 00 00 00\ne8 48 63 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 b4 67 ff ff\ne9 67 ff ff ff\n8b 35 c5 2a 22 00\n4c 89 f7\ne8 41 34 00 00\n89 c5\ne9 26 ff ff ff\n'
p2945
S'.text:000000000040c4e0\n.text:000000000040c4e1\n.text:000000000040c4e3\n.text:000000000040c4e4\n.text:000000000040c4e8\n.text:000000000040c4eb\n.text:000000000040c4f0\n.text:000000000040c4f3\n.text:000000000040c4f6\n.text:000000000040c4f9\n.text:000000000040c4fe\n.text:000000000040c500\n.text:000000000040c502\n.text:000000000040c507\n.text:000000000040c50c\n.text:000000000040c50f\n.text:000000000040c514\n.text:000000000040c517\n.text:000000000040c519\n.text:000000000040c51c\n.text:000000000040c521\n.text:000000000040c524\n.text:000000000040c529\n.text:000000000040c52c\n.text:000000000040c52f\n.text:000000000040c532\n.text:000000000040c535\n.text:000000000040c53d\n.text:000000000040c542\n.text:000000000040c544\n.text:000000000040c546\n.text:000000000040c548\n.text:000000000040c54a\n.text:000000000040c54e\n.text:000000000040c54f\n.text:000000000040c551\n.text:000000000040c552\n.text:000000000040c553\n.text:000000000040c558\n.text:000000000040c55d\n.text:000000000040c560\n.text:000000000040c565\n.text:000000000040c568\n.text:000000000040c56a\n.text:000000000040c56f\n.text:000000000040c571\n.text:000000000040c575\n.text:000000000040c577\n.text:000000000040c579\n.text:000000000040c57b\n.text:000000000040c580\n.text:000000000040c585\n.text:000000000040c58a\n.text:000000000040c58d\n.text:000000000040c593\n.text:000000000040c598\n.text:000000000040c59a\n.text:000000000040c59f\n.text:000000000040c5a2\n.text:000000000040c5a7\n.text:000000000040c5a9\n.text:000000000040c5ab\n.text:000000000040c5ae\n.text:000000000040c5b3\n.text:000000000040c5b5\n.text:000000000040c5b7\n.text:000000000040c5b9\n.text:000000000040c5be\n.text:000000000040c5c3\n.text:000000000040c5c8\n.text:000000000040c5cb\n.text:000000000040c5d0\n.text:000000000040c5d2\n.text:000000000040c5d4\n.text:000000000040c5d7\n.text:000000000040c5dc\n.text:000000000040c5e1\n.text:000000000040c5e7\n.text:000000000040c5ea\n.text:000000000040c5ef\n.text:000000000040c5f1\n'
p2946
tp2947
sS'cost_name'
p2948
(S'\n__stdcall cost_name()\n'
p2949
V\u000achar * cost_name(void)\u000a\u000a{\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  int in_EDI;\u000a  \u000a  uVar1 = 0;\u000a  ppcVar2 = &cost_table[0].name;\u000a  do {\u000a    if (*(int *)(ppcVar2 + -1) == in_EDI) {\u000a      return *ppcVar2;\u000a    }\u000a    uVar1 = uVar1 + 1;\u000a    ppcVar2 = ppcVar2 + 2;\u000a  } while (uVar1 < 0xb);\u000a  return "unknown";\u000a}\u000a\u000a
p2950
S'XOR ECX,ECX\nMOV EDX,0x62d848\nMOV EAX,0x41dea0\nNOP dword ptr [RAX]\nCMP dword ptr [RDX + -0x8],EDI\nJZ 0x00406d84\nINC RCX\nADD RDX,0x10\nCMP RCX,0xa\nJBE 0x00406d70\nJMP 0x00406d87\nMOV RAX,qword ptr [RDX]\nRET\n'
p2951
S'31 c9\nba 48 d8 62 00\nb8 a0 de 41 00\n0f 1f 40 00\n39 7a f8\n74 0f\n48 ff c1\n48 83 c2 10\n48 83 f9 0a\n76 ee\neb 03\n48 8b 02\nc3\n'
p2952
S'.text:0000000000406d60\n.text:0000000000406d62\n.text:0000000000406d67\n.text:0000000000406d6c\n.text:0000000000406d70\n.text:0000000000406d73\n.text:0000000000406d75\n.text:0000000000406d78\n.text:0000000000406d7c\n.text:0000000000406d80\n.text:0000000000406d82\n.text:0000000000406d84\n.text:0000000000406d87\n'
p2953
tp2954
sS'getenv'
p2955
(S'\n__stdcall getenv(char * __name)\n'
p2956
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_0062d020)();\u000a  return pcVar1;\u000a}\u000a\u000a
p2957
S'JMP qword ptr [0x0062d020]\n'
p2958
S'ff 25 1a a9 22 00\n'
p2959
S'.plt:0000000000402700\n'
p2960
tp2961
sS'LCO_hash'
p2962
(S'\n__stdcall LCO_hash(void * x, size_t table_size)\n'
p2963
V\u000asize_t LCO_hash(void *x,size_t table_size)\u000a\u000a{\u000a  return *(ulong *)x % table_size;\u000a}\u000a\u000a
p2964
S'MOV RAX,qword ptr [RDI]\nXOR EDX,EDX\nDIV RSI\nMOV RAX,RDX\nRET\n'
p2965
S'48 8b 07\n31 d2\n48 f7 f6\n48 89 d0\nc3\n'
p2966
S'.text:0000000000419d70\n.text:0000000000419d73\n.text:0000000000419d75\n.text:0000000000419d78\n.text:0000000000419d7b\n'
p2967
tp2968
sS'fnmatch'
p2969
(S'\n__stdcall fnmatch(char * __pattern, char * __name, int __flags)\n'
p2970
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fnmatch(char *__pattern,char *__name,int __flags)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fnmatch_0062d1d0)();\u000a  return iVar1;\u000a}\u000a\u000a
p2971
S'JMP qword ptr [0x0062d1d0]\n'
p2972
S'ff 25 6a a7 22 00\n'
p2973
S'.plt:0000000000402a60\n'
p2974
tp2975
sS'rpl_fseeko'
p2976
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p2977
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_0062d390)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p2978
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00418018\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00418018\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x0041802a\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00402de0\nMOV RDI,RBX\nCALL 0x00402c10\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00402a20\nCMP RAX,-0x1\nJZ 0x00418053\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x00418058\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p2979
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 b6 ad fe ff\n48 89 df\ne8 de ab fe ff\n89 c7\n48 89 ee\n44 89 f2\ne8 e1 a9 fe ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p2980
S'.text:0000000000417ff0\n.text:0000000000417ff1\n.text:0000000000417ff3\n.text:0000000000417ff4\n.text:0000000000417ff7\n.text:0000000000417ffa\n.text:0000000000417ffd\n.text:0000000000418001\n.text:0000000000418005\n.text:0000000000418007\n.text:000000000041800b\n.text:000000000041800f\n.text:0000000000418011\n.text:0000000000418016\n.text:0000000000418018\n.text:000000000041801b\n.text:000000000041801e\n.text:0000000000418021\n.text:0000000000418022\n.text:0000000000418024\n.text:0000000000418025\n.text:000000000041802a\n.text:000000000041802d\n.text:0000000000418032\n.text:0000000000418034\n.text:0000000000418037\n.text:000000000041803a\n.text:000000000041803f\n.text:0000000000418043\n.text:0000000000418045\n.text:0000000000418048\n.text:000000000041804f\n.text:0000000000418051\n.text:0000000000418053\n.text:0000000000418058\n.text:0000000000418059\n.text:000000000041805b\n.text:000000000041805c\n'
p2981
tp2982
sS'default_prints'
p2983
(S'\n__stdcall default_prints(predicate * pred)\n'
p2984
V\u000a_Bool default_prints(predicate *pred)\u000a\u000a{\u000a  if (pred != (predicate *)0x0) {\u000a    do {\u000a      if (pred->no_default_print != false) {\u000a        return false;\u000a      }\u000a      pred = pred->pred_next;\u000a    } while (pred != (predicate *)0x0);\u000a  }\u000a  return true;\u000a}\u000a\u000a
p2985
S'MOV AL,0x1\nTEST RDI,RDI\nJNZ 0x0040833c\nJMP 0x00408344\nMOV RDI,qword ptr [0x108 + RDI]\nTEST RDI,RDI\nJZ 0x00408344\nCMP byte ptr [RDI + 0x19],0x0\nJZ 0x00408330\nXOR EAX,EAX\nRET\n'
p2986
S'b0 01\n48 85 ff\n75 15\neb 1b\n48 8b bf 08 01 00 00\n48 85 ff\n74 08\n80 7f 19 00\n74 ee\n31 c0\nc3\n'
p2987
S'.text:0000000000408320\n.text:0000000000408322\n.text:0000000000408325\n.text:0000000000408327\n.text:0000000000408330\n.text:0000000000408337\n.text:000000000040833a\n.text:000000000040833c\n.text:0000000000408340\n.text:0000000000408342\n.text:0000000000408344\n'
p2988
tp2989
sS'unescape_tab'
p2990
(S'\n__stdcall unescape_tab(char * str)\n'
p2991
V\u000avoid unescape_tab(char *str)\u000a\u000a{\u000a  long lVar1;\u000a  long lVar2;\u000a  long lVar3;\u000a  size_t sVar4;\u000a  ulong uVar5;\u000a  char *pcVar6;\u000a  char cVar7;\u000a  \u000a  sVar4 = strlen(str);\u000a  if (sVar4 != 0xffffffffffffffff) {\u000a    uVar5 = 0;\u000a    pcVar6 = str;\u000a    do {\u000a      if ((((uVar5 + 4 < sVar4 + 1) && (str[uVar5] == '\u005c\u005c')) &&\u000a          (lVar1 = uVar5 + 1, (str[lVar1] & 0xfcU) == 0x30)) &&\u000a         ((lVar2 = uVar5 + 2, (str[lVar2] & 0xf8U) == 0x30 &&\u000a          (lVar3 = uVar5 + 3, (str[lVar3] & 0xf8U) == 0x30)))) {\u000a        uVar5 = uVar5 + 3;\u000a        cVar7 = str[lVar2] * '\u005cb' + str[lVar1] * '@' + str[lVar3] + 'P';\u000a      }\u000a      else {\u000a        cVar7 = str[uVar5];\u000a      }\u000a      *pcVar6 = cVar7;\u000a      uVar5 = uVar5 + 1;\u000a      pcVar6 = pcVar6 + 1;\u000a    } while (uVar5 < sVar4 + 1);\u000a  }\u000a  return;\u000a}\u000a\u000a
p2992
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00402930\nINC RAX\nJZ 0x0041ae83\nXOR ECX,ECX\nMOV RDX,R14\nNOP word ptr [RAX + RAX*0x1]\nLEA RSI,[RCX + 0x4]\nCMP RSI,RAX\nJNC 0x0041ae70\nCMP byte ptr [R14 + RCX*0x1],0x5c\nJNZ 0x0041ae70\nMOVZX ESI,byte ptr [R14 + RCX*0x1 + 0x1]\nMOV EBX,ESI\nAND BL,0xfc\nCMP BL,0x30\nJNZ 0x0041ae70\nMOVZX R8D,byte ptr [R14 + RCX*0x1 + 0x2]\nMOV EBX,R8D\nAND BL,0xf8\nCMP BL,0x30\nJNZ 0x0041ae70\nMOVZX EDI,byte ptr [R14 + RCX*0x1 + 0x3]\nMOV EBX,EDI\nAND BL,0xf8\nCMP BL,0x30\nJNZ 0x0041ae70\nADD RCX,0x3\nSHL SIL,0x6\nSHL R8B,0x3\nADD R8B,SIL\nADD R8B,DIL\nADD R8B,0x50\nJMP 0x0041ae75\nMOVZX R8D,byte ptr [R14 + RCX*0x1]\nMOV byte ptr [RDX],R8B\nINC RCX\nINC RDX\nCMP RCX,RAX\nJC 0x0041ae10\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p2993
S'41 56\n53\n50\n49 89 fe\ne8 34 7b fe ff\n48 ff c0\n0f 84 7e 00 00 00\n31 c9\n4c 89 f2\n66 0f 1f 44 00 00\n48 8d 71 04\n48 39 c6\n73 57\n41 80 3c 0e 5c\n75 50\n41 0f b6 74 0e 01\n89 f3\n80 e3 fc\n80 fb 30\n75 40\n45 0f b6 44 0e 02\n44 89 c3\n80 e3 f8\n80 fb 30\n75 2f\n41 0f b6 7c 0e 03\n89 fb\n80 e3 f8\n80 fb 30\n75 1f\n48 83 c1 03\n40 c0 e6 06\n41 c0 e0 03\n41 00 f0\n41 00 f8\n41 80 c0 50\neb 0c\n45 0f b6 04 0e\n44 88 02\n48 ff c1\n48 ff c2\n48 39 c1\n72 8d\n48 83 c4 08\n5b\n41 5e\nc3\n'
p2994
S'.text:000000000041adf0\n.text:000000000041adf2\n.text:000000000041adf3\n.text:000000000041adf4\n.text:000000000041adf7\n.text:000000000041adfc\n.text:000000000041adff\n.text:000000000041ae05\n.text:000000000041ae07\n.text:000000000041ae0a\n.text:000000000041ae10\n.text:000000000041ae14\n.text:000000000041ae17\n.text:000000000041ae19\n.text:000000000041ae1e\n.text:000000000041ae20\n.text:000000000041ae26\n.text:000000000041ae28\n.text:000000000041ae2b\n.text:000000000041ae2e\n.text:000000000041ae30\n.text:000000000041ae36\n.text:000000000041ae39\n.text:000000000041ae3c\n.text:000000000041ae3f\n.text:000000000041ae41\n.text:000000000041ae47\n.text:000000000041ae49\n.text:000000000041ae4c\n.text:000000000041ae4f\n.text:000000000041ae51\n.text:000000000041ae55\n.text:000000000041ae59\n.text:000000000041ae5d\n.text:000000000041ae60\n.text:000000000041ae63\n.text:000000000041ae67\n.text:000000000041ae70\n.text:000000000041ae75\n.text:000000000041ae78\n.text:000000000041ae7b\n.text:000000000041ae7e\n.text:000000000041ae81\n.text:000000000041ae83\n.text:000000000041ae87\n.text:000000000041ae88\n.text:000000000041ae8a\n'
p2995
tp2996
sS'is_prime'
p2997
(S'\n__stdcall is_prime(size_t candidate)\n'
p2998
V\u000a_Bool is_prime(size_t candidate)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  long lVar3;\u000a  bool bVar4;\u000a  \u000a  bVar4 = candidate != (candidate / 3) * 3;\u000a  if ((9 < candidate) && (bVar4)) {\u000a    uVar2 = 9;\u000a    lVar3 = 0x10;\u000a    uVar1 = 5;\u000a    do {\u000a      uVar2 = uVar2 + lVar3;\u000a      bVar4 = candidate % uVar1 != 0;\u000a      if (candidate <= uVar2) {\u000a        return (_Bool)bVar4;\u000a      }\u000a      lVar3 = lVar3 + 8;\u000a      uVar1 = uVar1 + 2;\u000a    } while (bVar4);\u000a  }\u000a  return (_Bool)bVar4;\u000a}\u000a\u000a
p2999
S'MOV R8,RDI\nMOV RCX,-0x5555555555555555\nMOV RAX,R8\nMUL RCX\nSHR RDX,1\nLEA RAX,[RDX + RDX*0x2]\nCMP R8,RAX\nSETNZ AL\nSETZ CL\nCMP R8,0xa\nJC 0x00411345\nTEST CL,CL\nJNZ 0x00411345\nMOV ESI,0x9\nMOV EDI,0x10\nMOV ECX,0x5\nNOP dword ptr [RAX]\nADD RSI,RDI\nXOR EDX,EDX\nMOV RAX,R8\nDIV RCX\nTEST RDX,RDX\nSETNZ AL\nSETZ DL\nCMP RSI,R8\nJNC 0x00411345\nADD RDI,0x8\nADD RCX,0x2\nTEST DL,DL\nJZ 0x00411320\nRET\n'
p3000
S'49 89 f8\n48 b9 ab aa aa aa aa aa aa aa\n4c 89 c0\n48 f7 e1\n48 d1 ea\n48 8d 04 52\n49 39 c0\n0f 95 c0\n0f 94 c1\n49 83 f8 0a\n72 3c\n84 c9\n75 38\nbe 09 00 00 00\nbf 10 00 00 00\nb9 05 00 00 00\n0f 1f 40 00\n48 01 fe\n31 d2\n4c 89 c0\n48 f7 f1\n48 85 d2\n0f 95 c0\n0f 94 c2\n4c 39 c6\n73 0c\n48 83 c7 08\n48 83 c1 02\n84 d2\n74 db\nc3\n'
p3001
S'.text:00000000004112e0\n.text:00000000004112e3\n.text:00000000004112ed\n.text:00000000004112f0\n.text:00000000004112f3\n.text:00000000004112f6\n.text:00000000004112fa\n.text:00000000004112fd\n.text:0000000000411300\n.text:0000000000411303\n.text:0000000000411307\n.text:0000000000411309\n.text:000000000041130b\n.text:000000000041130d\n.text:0000000000411312\n.text:0000000000411317\n.text:000000000041131c\n.text:0000000000411320\n.text:0000000000411323\n.text:0000000000411325\n.text:0000000000411328\n.text:000000000041132b\n.text:000000000041132e\n.text:0000000000411331\n.text:0000000000411334\n.text:0000000000411337\n.text:0000000000411339\n.text:000000000041133d\n.text:0000000000411341\n.text:0000000000411343\n.text:0000000000411345\n'
p3002
tp3003
sS'xstrndup'
p3004
(S'\n__stdcall xstrndup(char * string, size_t n)\n'
p3005
V\u000achar * xstrndup(char *string,size_t n)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)__strndup();\u000a  if (pcVar1 != (char *)0x0) {\u000a    return pcVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p3006
S'PUSH RAX\nCALL 0x00402b90\nTEST RAX,RAX\nJZ 0x004173ed\nPOP RCX\nRET\nCALL 0x004173b0\n'
p3007
S'50\ne8 aa b7 fe ff\n48 85 c0\n74 02\n59\nc3\ne8 be ff ff ff\n'
p3008
S'.text:00000000004173e0\n.text:00000000004173e1\n.text:00000000004173e6\n.text:00000000004173e9\n.text:00000000004173eb\n.text:00000000004173ec\n.text:00000000004173ed\n'
p3009
tp3010
sS'i_ring_push'
p3011
(S'\n__stdcall i_ring_push(I_ring * ir)\n'
p3012
V\u000aint i_ring_push(I_ring *ir)\u000a\u000a{\u000a  int iVar1;\u000a  uint uVar2;\u000a  int in_ESI;\u000a  \u000a  uVar2 = (uint)(ir->ir_empty ^ 1) + ir->ir_front & 3;\u000a  iVar1 = ir->ir_data[(ulong)uVar2];\u000a  ir->ir_data[(ulong)uVar2] = in_ESI;\u000a  ir->ir_front = uVar2;\u000a  if (uVar2 == ir->ir_back) {\u000a    ir->ir_back = (uint)(ir->ir_empty ^ 1) + ir->ir_back & 3;\u000a  }\u000a  ir->ir_empty = false;\u000a  return iVar1;\u000a}\u000a\u000a
p3013
S'MOV AL,byte ptr [RDI + 0x1c]\nXOR AL,0x1\nMOVZX EDX,AL\nADD EDX,dword ptr [RDI + 0x14]\nAND EDX,0x3\nMOV EAX,dword ptr [RDI + RDX*0x4]\nMOV dword ptr [RDI + RDX*0x4],ESI\nMOV dword ptr [RDI + 0x14],EDX\nMOV ECX,dword ptr [RDI + 0x18]\nCMP EDX,ECX\nJNZ 0x0041bc7f\nMOV DL,byte ptr [RDI + 0x1c]\nXOR DL,0x1\nMOVZX EDX,DL\nADD EDX,ECX\nAND EDX,0x3\nMOV dword ptr [RDI + 0x18],EDX\nMOV byte ptr [RDI + 0x1c],0x0\nRET\n'
p3014
S'8a 47 1c\n34 01\n0f b6 d0\n03 57 14\n83 e2 03\n8b 04 97\n89 34 97\n89 57 14\n8b 4f 18\n39 ca\n75 11\n8a 57 1c\n80 f2 01\n0f b6 d2\n01 ca\n83 e2 03\n89 57 18\nc6 47 1c 00\nc3\n'
p3015
S'.text:000000000041bc50\n.text:000000000041bc53\n.text:000000000041bc55\n.text:000000000041bc58\n.text:000000000041bc5b\n.text:000000000041bc5e\n.text:000000000041bc61\n.text:000000000041bc64\n.text:000000000041bc67\n.text:000000000041bc6a\n.text:000000000041bc6c\n.text:000000000041bc6e\n.text:000000000041bc71\n.text:000000000041bc74\n.text:000000000041bc77\n.text:000000000041bc79\n.text:000000000041bc7c\n.text:000000000041bc7f\n.text:000000000041bc83\n'
p3016
tp3017
sS'fscanf'
p3018
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p3019
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_0062d1e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p3020
S'JMP qword ptr [0x0062d1e8]\n'
p3021
S'ff 25 52 a7 22 00\n'
p3022
S'.plt:0000000000402a90\n'
p3023
tp3024
sS'pred_sanity_check'
p3025
(S'\n__stdcall pred_sanity_check(predicate * predicates)\n'
p3026
V\u000avoid pred_sanity_check(predicate *predicates)\u000a\u000a{\u000a  _Bool (*pVar1)(char *,stat *,predicate *);\u000a  parser_table *ppVar2;\u000a  \u000a  if (predicates != (predicate *)0x0) {\u000a    do {\u000a      pVar1 = predicates->pred_func;\u000a      if (pVar1 == (_Bool (*)(char *,stat *,predicate *))0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("p->pred_func != NULL","pred.c",0x560,\u000a                      "void pred_sanity_check(const struct predicate *)");\u000a      }\u000a      ppVar2 = predicates->parser_entry;\u000a      if (ppVar2 == (parser_table *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("p->parser_entry != NULL","pred.c",0x563,\u000a                      "void pred_sanity_check(const struct predicate *)");\u000a      }\u000a      if ((ppVar2->pred_func != (_Bool (*)(char *,stat *,predicate *))0x0) &&\u000a         (ppVar2->pred_func != pVar1)) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("p->parser_entry->pred_func == p->pred_func","pred.c",0x56c,\u000a                      "void pred_sanity_check(const struct predicate *)");\u000a      }\u000a      switch(ppVar2->type) {\u000a      case ARG_OPTION:\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("p->parser_entry->type != ARG_OPTION","pred.c",0x57c,\u000a                      "void pred_sanity_check(const struct predicate *)");\u000a      case ARG_NOOP:\u000a      case ARG_TEST:\u000a      case ARG_SPECIAL_PARSE:\u000a      case ARG_PUNCTUATION:\u000a        if (predicates->no_default_print != false) {\u000a                    /* WARNING: Subroutine does not return */\u000a          __assert_fail("!p->no_default_print","pred.c",0x595,\u000a                        "void pred_sanity_check(const struct predicate *)");\u000a        }\u000a        if (predicates->side_effects != false) {\u000a                    /* WARNING: Subroutine does not return */\u000a          __assert_fail("!p->side_effects","pred.c",0x596,\u000a                        "void pred_sanity_check(const struct predicate *)");\u000a        }\u000a        break;\u000a      case ARG_POSITIONAL_OPTION:\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("p->parser_entry->type != ARG_POSITIONAL_OPTION","pred.c",0x57d,\u000a                      "void pred_sanity_check(const struct predicate *)");\u000a      case ARG_ACTION:\u000a        if (predicates->side_effects == false) {\u000a                    /* WARNING: Subroutine does not return */\u000a          __assert_fail("p->side_effects","pred.c",0x581,\u000a                        "void pred_sanity_check(const struct predicate *)");\u000a        }\u000a        if (((pVar1 != pred_prune) && (pVar1 != pred_quit)) &&\u000a           (predicates->no_default_print == false)) {\u000a                    /* WARNING: Subroutine does not return */\u000a          __assert_fail("p->no_default_print","pred.c",0x587,\u000a                        "void pred_sanity_check(const struct predicate *)");\u000a        }\u000a      }\u000a      predicates = predicates->pred_next;\u000a    } while (predicates != (predicate *)0x0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p3027
S'PUSH RAX\nTEST RDI,RDI\nJZ 0x00405082\nMOV EAX,0x404600\nMOV R8D,0x404650\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDX,qword ptr [RDI]\nTEST RDX,RDX\nJZ 0x00405084\nMOV RSI,qword ptr [0x130 + RDI]\nTEST RSI,RSI\nJZ 0x0040509d\nMOV RCX,qword ptr [RSI + 0x18]\nTEST RCX,RCX\nJZ 0x0040501e\nCMP RCX,RDX\nJNZ 0x004050b6\nMOV ECX,dword ptr [RSI]\nCMP RCX,0x6\nJA 0x00405041\nJMP qword ptr [0x41ca38 + RCX*0x8]\nCMP byte ptr [RDI + 0x19],0x0\nJNZ 0x004050cf\nCMP byte ptr [RDI + 0x18],0x0\nJNZ 0x004050e8\nMOV RDI,qword ptr [0x108 + RDI]\nTEST RDI,RDI\nJNZ 0x00404ff0\nJMP 0x00405082\nCMP byte ptr [RDI + 0x18],0x0\nJZ 0x00405133\nCMP RDX,RAX\nJZ 0x00405041\nCMP RDX,R8\nJZ 0x00405041\nCMP byte ptr [RDI + 0x19],0x0\nJNZ 0x00405041\nMOV EDI,0x41d111\nMOV ESI,0x41cd0c\nMOV EDX,0x587\nMOV ECX,0x41d049\nCALL 0x00402a40\nPOP RAX\nRET\nMOV EDI,0x41d034\nMOV ESI,0x41cd0c\nMOV EDX,0x560\nMOV ECX,0x41d049\nCALL 0x00402a40\nMOV EDI,0x41d07a\nMOV ESI,0x41cd0c\nMOV EDX,0x563\nMOV ECX,0x41d049\nCALL 0x00402a40\nMOV EDI,0x41d092\nMOV ESI,0x41cd0c\nMOV EDX,0x56c\nMOV ECX,0x41d049\nCALL 0x00402a40\nMOV EDI,0x41d110\nMOV ESI,0x41cd0c\nMOV EDX,0x595\nMOV ECX,0x41d049\nCALL 0x00402a40\nMOV EDI,0x41d125\nMOV ESI,0x41cd0c\nMOV EDX,0x596\nMOV ECX,0x41d049\nCALL 0x00402a40\nMOV EDI,0x41d0bd\nMOV ESI,0x41cd0c\nMOV EDX,0x57c\nMOV ECX,0x41d049\nCALL 0x00402a40\nMOV EDI,0x41d0e1\nMOV ESI,0x41cd0c\nMOV EDX,0x57d\nMOV ECX,0x41d049\nCALL 0x00402a40\nMOV EDI,0x41d126\nMOV ESI,0x41cd0c\nMOV EDX,0x581\nMOV ECX,0x41d049\nCALL 0x00402a40\n'
p3028
S'50\n48 85 ff\n0f 84 a8 00 00 00\nb8 00 46 40 00\n41 b8 50 46 40 00\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 17\n48 85 d2\n0f 84 88 00 00 00\n48 8b b7 30 01 00 00\n48 85 f6\n0f 84 91 00 00 00\n48 8b 4e 18\n48 85 c9\n74 09\n48 39 d1\n0f 85 98 00 00 00\n8b 0e\n48 83 f9 06\n77 1b\nff 24 cd 38 ca 41 00\n80 7f 19 00\n0f 85 98 00 00 00\n80 7f 18 00\n0f 85 a7 00 00 00\n48 8b bf 08 01 00 00\n48 85 ff\n75 a3\neb 33\n80 7f 18 00\n0f 84 da 00 00 00\n48 39 c2\n74 e3\n4c 39 c2\n74 de\n80 7f 19 00\n75 d8\nbf 11 d1 41 00\nbe 0c cd 41 00\nba 87 05 00 00\nb9 49 d0 41 00\ne8 be d9 ff ff\n58\nc3\nbf 34 d0 41 00\nbe 0c cd 41 00\nba 60 05 00 00\nb9 49 d0 41 00\ne8 a3 d9 ff ff\nbf 7a d0 41 00\nbe 0c cd 41 00\nba 63 05 00 00\nb9 49 d0 41 00\ne8 8a d9 ff ff\nbf 92 d0 41 00\nbe 0c cd 41 00\nba 6c 05 00 00\nb9 49 d0 41 00\ne8 71 d9 ff ff\nbf 10 d1 41 00\nbe 0c cd 41 00\nba 95 05 00 00\nb9 49 d0 41 00\ne8 58 d9 ff ff\nbf 25 d1 41 00\nbe 0c cd 41 00\nba 96 05 00 00\nb9 49 d0 41 00\ne8 3f d9 ff ff\nbf bd d0 41 00\nbe 0c cd 41 00\nba 7c 05 00 00\nb9 49 d0 41 00\ne8 26 d9 ff ff\nbf e1 d0 41 00\nbe 0c cd 41 00\nba 7d 05 00 00\nb9 49 d0 41 00\ne8 0d d9 ff ff\nbf 26 d1 41 00\nbe 0c cd 41 00\nba 81 05 00 00\nb9 49 d0 41 00\ne8 f4 d8 ff ff\n'
p3029
S'.text:0000000000404fd0\n.text:0000000000404fd1\n.text:0000000000404fd4\n.text:0000000000404fda\n.text:0000000000404fdf\n.text:0000000000404fe5\n.text:0000000000404ff0\n.text:0000000000404ff3\n.text:0000000000404ff6\n.text:0000000000404ffc\n.text:0000000000405003\n.text:0000000000405006\n.text:000000000040500c\n.text:0000000000405010\n.text:0000000000405013\n.text:0000000000405015\n.text:0000000000405018\n.text:000000000040501e\n.text:0000000000405020\n.text:0000000000405024\n.text:0000000000405026\n.text:000000000040502d\n.text:0000000000405031\n.text:0000000000405037\n.text:000000000040503b\n.text:0000000000405041\n.text:0000000000405048\n.text:000000000040504b\n.text:000000000040504d\n.text:000000000040504f\n.text:0000000000405053\n.text:0000000000405059\n.text:000000000040505c\n.text:000000000040505e\n.text:0000000000405061\n.text:0000000000405063\n.text:0000000000405067\n.text:0000000000405069\n.text:000000000040506e\n.text:0000000000405073\n.text:0000000000405078\n.text:000000000040507d\n.text:0000000000405082\n.text:0000000000405083\n.text:0000000000405084\n.text:0000000000405089\n.text:000000000040508e\n.text:0000000000405093\n.text:0000000000405098\n.text:000000000040509d\n.text:00000000004050a2\n.text:00000000004050a7\n.text:00000000004050ac\n.text:00000000004050b1\n.text:00000000004050b6\n.text:00000000004050bb\n.text:00000000004050c0\n.text:00000000004050c5\n.text:00000000004050ca\n.text:00000000004050cf\n.text:00000000004050d4\n.text:00000000004050d9\n.text:00000000004050de\n.text:00000000004050e3\n.text:00000000004050e8\n.text:00000000004050ed\n.text:00000000004050f2\n.text:00000000004050f7\n.text:00000000004050fc\n.text:0000000000405101\n.text:0000000000405106\n.text:000000000040510b\n.text:0000000000405110\n.text:0000000000405115\n.text:000000000040511a\n.text:000000000040511f\n.text:0000000000405124\n.text:0000000000405129\n.text:000000000040512e\n.text:0000000000405133\n.text:0000000000405138\n.text:000000000040513d\n.text:0000000000405142\n.text:0000000000405147\n'
p3030
tp3031
sS'pred_size'
p3032
(S'\n__stdcall pred_size(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p3033
V\u000a_Bool pred_size(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  \u000a  uVar2 = (stat_buf->st_size / (long)*(int *)(pred_ptr->args + 4) + 1) -\u000a          (ulong)(stat_buf->st_size % (long)*(int *)(pred_ptr->args + 4) == 0);\u000a  iVar1 = *(int *)pred_ptr->args;\u000a  if (iVar1 == 2) {\u000a    if (uVar2 == *(ulong *)(pred_ptr->args + 8)) {\u000a      return true;\u000a    }\u000a  }\u000a  else {\u000a    if (iVar1 == 1) {\u000a      if (uVar2 < *(ulong *)(pred_ptr->args + 8)) {\u000a        return true;\u000a      }\u000a    }\u000a    else {\u000a      if ((iVar1 == 0) &&\u000a         (*(ulong *)(pred_ptr->args + 8) <= uVar2 && uVar2 != *(ulong *)(pred_ptr->args + 8))) {\u000a        return true;\u000a      }\u000a    }\u000a  }\u000a  return false;\u000a}\u000a\u000a
p3034
S'MOV RCX,RDX\nMOV RAX,qword ptr [RSI + 0x30]\nMOVSXD RSI,dword ptr [RCX + 0x3c]\nCQO\nIDIV RSI\nCMP RDX,0x1\nSBB RAX,-0x1\nMOV EDX,dword ptr [RCX + 0x38]\nCMP EDX,0x2\nJZ 0x00404763\nCMP EDX,0x1\nJZ 0x0040476d\nTEST EDX,EDX\nJNZ 0x00404775\nMOV DL,0x1\nCMP RAX,qword ptr [RCX + 0x40]\nJBE 0x00404775\nJMP 0x00404777\nMOV DL,0x1\nCMP RAX,qword ptr [RCX + 0x40]\nJNZ 0x00404775\nJMP 0x00404777\nMOV DL,0x1\nCMP RAX,qword ptr [RCX + 0x40]\nJC 0x00404777\nXOR EDX,EDX\nMOV EAX,EDX\nRET\n'
p3035
S'48 89 d1\n48 8b 46 30\n48 63 71 3c\n48 99\n48 f7 fe\n48 83 fa 01\n48 83 d8 ff\n8b 51 38\n83 fa 02\n74 13\n83 fa 01\n74 18\n85 d2\n75 1c\nb2 01\n48 3b 41 40\n76 14\neb 14\nb2 01\n48 3b 41 40\n75 0a\neb 0a\nb2 01\n48 3b 41 40\n72 02\n31 d2\n89 d0\nc3\n'
p3036
S'.text:0000000000404730\n.text:0000000000404733\n.text:0000000000404737\n.text:000000000040473b\n.text:000000000040473d\n.text:0000000000404740\n.text:0000000000404744\n.text:0000000000404748\n.text:000000000040474b\n.text:000000000040474e\n.text:0000000000404750\n.text:0000000000404753\n.text:0000000000404755\n.text:0000000000404757\n.text:0000000000404759\n.text:000000000040475b\n.text:000000000040475f\n.text:0000000000404761\n.text:0000000000404763\n.text:0000000000404765\n.text:0000000000404769\n.text:000000000040476b\n.text:000000000040476d\n.text:000000000040476f\n.text:0000000000404773\n.text:0000000000404775\n.text:0000000000404777\n.text:0000000000404779\n'
p3037
tp3038
sS'localtime'
p3039
(S'\n__stdcall localtime(time_t * __timer)\n'
p3040
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000atm * localtime(time_t *__timer)\u000a\u000a{\u000a  tm *ptVar1;\u000a  \u000a  ptVar1 = (tm *)(*(code *)PTR_localtime_0062d040)();\u000a  return ptVar1;\u000a}\u000a\u000a
p3041
S'JMP qword ptr [0x0062d040]\n'
p3042
S'ff 25 fa a8 22 00\n'
p3043
S'.plt:0000000000402740\n'
p3044
tp3045
sS'base_name'
p3046
(S'\n__stdcall base_name(char * name)\n'
p3047
V\u000achar * base_name(char *name)\u000a\u000a{\u000a  char *name_00;\u000a  size_t n;\u000a  \u000a  name_00 = last_component(name);\u000a  if (*name_00 == 0) {\u000a    n = base_len(name);\u000a  }\u000a  else {\u000a    n = base_len(name_00);\u000a    n = (ulong)(name_00[n] == '/') + n;\u000a    name = name_00;\u000a  }\u000a  name_00 = xstrndup(name,n);\u000a  return name_00;\u000a}\u000a\u000a
p3048
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00410090\nMOV RBX,RAX\nCMP byte ptr [RBX],0x0\nJZ 0x0040ffce\nMOV RDI,RBX\nCALL 0x004100f0\nXOR ESI,ESI\nCMP byte ptr [RBX + RAX*0x1],0x2f\nSETZ SIL\nADD RSI,RAX\nMOV RDI,RBX\nJMP 0x0040ffdc\nMOV RDI,R14\nCALL 0x004100f0\nMOV RDI,R14\nMOV RSI,RAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x004173e0\n'
p3049
S'41 56\n53\n50\n49 89 fe\ne8 e4 00 00 00\n48 89 c3\n80 3b 00\n74 1a\n48 89 df\ne8 34 01 00 00\n31 f6\n80 3c 03 2f\n40 0f 94 c6\n48 01 c6\n48 89 df\neb 0e\n4c 89 f7\ne8 1a 01 00 00\n4c 89 f7\n48 89 c6\n48 83 c4 08\n5b\n41 5e\ne9 f8 73 00 00\n'
p3050
S'.text:000000000040ffa0\n.text:000000000040ffa2\n.text:000000000040ffa3\n.text:000000000040ffa4\n.text:000000000040ffa7\n.text:000000000040ffac\n.text:000000000040ffaf\n.text:000000000040ffb2\n.text:000000000040ffb4\n.text:000000000040ffb7\n.text:000000000040ffbc\n.text:000000000040ffbe\n.text:000000000040ffc2\n.text:000000000040ffc6\n.text:000000000040ffc9\n.text:000000000040ffcc\n.text:000000000040ffce\n.text:000000000040ffd1\n.text:000000000040ffd6\n.text:000000000040ffd9\n.text:000000000040ffdc\n.text:000000000040ffe0\n.text:000000000040ffe1\n.text:000000000040ffe3\n'
p3051
tp3052
sS'get_stat_birthtime'
p3053
(S'\n__stdcall get_stat_birthtime(stat * st)\n'
p3054
V\u000atimespec get_stat_birthtime(stat *st)\u000a\u000a{\u000a  return (timespec)CONCAT88(0xffffffffffffffff,0xffffffffffffffff);\u000a}\u000a\u000a
p3055
S'MOV RAX,-0x1\nMOV RDX,-0x1\nRET\n'
p3056
S'48 c7 c0 ff ff ff ff\n48 c7 c2 ff ff ff ff\nc3\n'
p3057
S'.text:0000000000416ca0\n.text:0000000000416ca7\n.text:0000000000416cae\n'
p3058
tp3059
sS'realloc'
p3060
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p3061
V\u000a/* WARNING: Switch with 1 destination removed at 0x00402d30 */\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p3062
S'JMP qword ptr [0x0062d338]\n'
p3063
S'ff 25 02 a6 22 00\n'
p3064
S'.plt:0000000000402d30\n'
p3065
tp3066
sS'looks_like_expression'
p3067
(S'\n__stdcall looks_like_expression(char * arg)\n'
p3068
V\u000a_Bool looks_like_expression(char *arg)\u000a\u000a{\u000a  byte in_SIL;\u000a  bool bVar1;\u000a  \u000a  bVar1 = false;\u000a  switch(*arg) {\u000a  case '!':\u000a  case '(':\u000a    bVar1 = arg[1] == 0;\u000a    break;\u000a  case ')':\u000a  case ',':\u000a    return (_Bool)((in_SIL ^ 1) & arg[1] == 0);\u000a  case '-':\u000a    return (_Bool)(arg[1] != 0);\u000a  }\u000a  return (_Bool)bVar1;\u000a}\u000a\u000a
p3069
S'MOVSX ECX,byte ptr [RDI]\nXOR EAX,EAX\nADD ECX,-0x21\nCMP ECX,0xc\nJA 0x0040836b\nJMP qword ptr [0x41ded0 + RCX*0x8]\nCMP byte ptr [RDI + 0x1],0x0\nSETZ AL\nRET\nCMP byte ptr [RDI + 0x1],0x0\nSETZ AL\nXOR SIL,0x1\nAND SIL,AL\nMOV EAX,ESI\nRET\nCMP byte ptr [RDI + 0x1],0x0\nSETNZ AL\nRET\n'
p3070
S'0f be 0f\n31 c0\n83 c1 df\n83 f9 0c\n77 0e\nff 24 cd d0 de 41 00\n80 7f 01 00\n0f 94 c0\nc3\n80 7f 01 00\n0f 94 c0\n40 80 f6 01\n40 20 c6\n89 f0\nc3\n80 7f 01 00\n0f 95 c0\nc3\n'
p3071
S'.text:0000000000408350\n.text:0000000000408353\n.text:0000000000408355\n.text:0000000000408358\n.text:000000000040835b\n.text:000000000040835d\n.text:0000000000408364\n.text:0000000000408368\n.text:000000000040836b\n.text:000000000040836c\n.text:0000000000408370\n.text:0000000000408373\n.text:0000000000408377\n.text:000000000040837a\n.text:000000000040837c\n.text:000000000040837d\n.text:0000000000408381\n.text:0000000000408384\n'
p3072
tp3073
sS'fstatfs'
p3074
(S'\n__stdcall fstatfs(int __fildes, statfs * __buf)\n'
p3075
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fstatfs(int __fildes,statfs *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fstatfs_0062d3d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p3076
S'JMP qword ptr [0x0062d3d8]\n'
p3077
S'ff 25 62 a5 22 00\n'
p3078
S'.plt:0000000000402e70\n'
p3079
tp3080
sS'hash_free'
p3081
(S'\n__stdcall hash_free(Hash_table * table)\n'
p3082
V\u000avoid hash_free(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  hash_entry *__ptr;\u000a  hash_entry *__ptr_00;\u000a  \u000a  if (((table->data_freer != (void (*)(void *))0x0) && (table->n_entries != 0)) &&\u000a     (__ptr_00 = table->bucket, __ptr_00 < table->bucket_limit)) {\u000a    do {\u000a      __ptr = __ptr_00;\u000a      if (__ptr_00->data != (void *)0x0) {\u000a        while (__ptr != (hash_entry *)0x0) {\u000a          (*table->data_freer)(__ptr->data);\u000a          __ptr = __ptr->next;\u000a        }\u000a      }\u000a      __ptr_00 = __ptr_00 + 1;\u000a    } while (__ptr_00 < table->bucket_limit);\u000a  }\u000a  __ptr_00 = table->bucket;\u000a  if (__ptr_00 < table->bucket_limit) {\u000a    do {\u000a      __ptr = __ptr_00->next;\u000a      while (__ptr != (hash_entry *)0x0) {\u000a        phVar1 = __ptr->next;\u000a        free(__ptr);\u000a        __ptr = phVar1;\u000a      }\u000a      __ptr_00 = __ptr_00 + 1;\u000a    } while (__ptr_00 < table->bucket_limit);\u000a  }\u000a  __ptr_00 = table->free_entry_list;\u000a  while (__ptr_00 != (hash_entry *)0x0) {\u000a    __ptr = __ptr_00->next;\u000a    free(__ptr_00);\u000a    __ptr_00 = __ptr;\u000a  }\u000a  free(table->bucket);\u000a  free(table);\u000a  return;\u000a}\u000a\u000a
p3083
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nCMP qword ptr [R15 + 0x40],0x0\nJZ 0x00410b22\nCMP qword ptr [R15 + 0x20],0x0\nJZ 0x00410b22\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x00410afa\nJMP 0x00410b22\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x00410b22\nCMP qword ptr [R14],0x0\nJZ 0x00410af0\nTEST R14,R14\nJZ 0x00410af0\nMOV RBX,R14\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RBX]\nCALL qword ptr [R15 + 0x40]\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x00410b10\nJMP 0x00410af0\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x00410b3a\nJMP 0x00410b63\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x00410b63\nMOV RDI,qword ptr [R14 + 0x8]\nTEST RDI,RDI\nJZ 0x00410b30\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x00402710\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x00410b50\nJMP 0x00410b30\nMOV RDI,qword ptr [R15 + 0x48]\nTEST RDI,RDI\nJZ 0x00410b81\nNOP dword ptr [RAX]\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x00402710\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x00410b70\nMOV RDI,qword ptr [R15]\nCALL 0x00402710\nMOV RDI,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00402710\n'
p3084
S'41 57\n41 56\n53\n49 89 ff\n49 83 7f 40 00\n74 53\n49 83 7f 20 00\n74 4c\n4d 8b 37\n4d 3b 77 08\n72 1b\neb 41\n49 83 c6 10\n4d 3b 77 08\n73 28\n49 83 3e 00\n74 f0\n4d 85 f6\n74 eb\n4c 89 f3\n0f 1f 84 00 00 00 00 00\n48 8b 3b\n41 ff 57 40\n48 8b 5b 08\n48 85 db\n75 f0\neb ce\n4d 8b 37\n4d 3b 77 08\n72 0f\neb 36\n49 83 c6 10\n4d 3b 77 08\n73 29\n49 8b 7e 08\n48 85 ff\n74 ed\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 5f 08\ne8 b7 1b ff ff\n48 85 db\n48 89 df\n75 ef\neb cd\n49 8b 7f 48\n48 85 ff\n74 15\n0f 1f 40 00\n48 8b 5f 08\ne8 97 1b ff ff\n48 85 db\n48 89 df\n75 ef\n49 8b 3f\ne8 87 1b ff ff\n4c 89 ff\n5b\n41 5e\n41 5f\ne9 7a 1b ff ff\n'
p3085
S'.text:0000000000410ac0\n.text:0000000000410ac2\n.text:0000000000410ac4\n.text:0000000000410ac5\n.text:0000000000410ac8\n.text:0000000000410acd\n.text:0000000000410acf\n.text:0000000000410ad4\n.text:0000000000410ad6\n.text:0000000000410ad9\n.text:0000000000410add\n.text:0000000000410adf\n.text:0000000000410af0\n.text:0000000000410af4\n.text:0000000000410af8\n.text:0000000000410afa\n.text:0000000000410afe\n.text:0000000000410b00\n.text:0000000000410b03\n.text:0000000000410b05\n.text:0000000000410b08\n.text:0000000000410b10\n.text:0000000000410b13\n.text:0000000000410b17\n.text:0000000000410b1b\n.text:0000000000410b1e\n.text:0000000000410b20\n.text:0000000000410b22\n.text:0000000000410b25\n.text:0000000000410b29\n.text:0000000000410b2b\n.text:0000000000410b30\n.text:0000000000410b34\n.text:0000000000410b38\n.text:0000000000410b3a\n.text:0000000000410b3e\n.text:0000000000410b41\n.text:0000000000410b43\n.text:0000000000410b50\n.text:0000000000410b54\n.text:0000000000410b59\n.text:0000000000410b5c\n.text:0000000000410b5f\n.text:0000000000410b61\n.text:0000000000410b63\n.text:0000000000410b67\n.text:0000000000410b6a\n.text:0000000000410b6c\n.text:0000000000410b70\n.text:0000000000410b74\n.text:0000000000410b79\n.text:0000000000410b7c\n.text:0000000000410b7f\n.text:0000000000410b81\n.text:0000000000410b84\n.text:0000000000410b89\n.text:0000000000410b8c\n.text:0000000000410b8d\n.text:0000000000410b8f\n.text:0000000000410b91\n'
p3086
tp3087
sS'_exit'
p3088
(S'\n__stdcall _exit(int __status)\n'
p3089
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_0062d078)();\u000a  return;\u000a}\u000a\u000a
p3090
S'JMP qword ptr [0x0062d078]\n'
p3091
S'ff 25 c2 a8 22 00\n'
p3092
S'.plt:00000000004027b0\n'
p3093
tp3094
sS'get_num'
p3095
(S'\n__stdcall get_num(char * str, uintmax_t * num, comparison_type * comp_type)\n'
p3096
V\u000a_Bool get_num(char *str,uintmax_t *num,comparison_type *comp_type)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  bool bVar2;\u000a  char *pend;\u000a  char *local_10;\u000a  \u000a  if (str == (char *)0x0) {\u000a    bVar2 = false;\u000a  }\u000a  else {\u000a    if (comp_type != (comparison_type *)0x0) {\u000a      get_comp_type();\u000a    }\u000a    sVar1 = xstrtoumax(str,&local_10,(uintmax_t *)0xa,(char *)num);\u000a    bVar2 = sVar1 == LONGINT_OK;\u000a  }\u000a  return (_Bool)bVar2;\u000a}\u000a\u000a
p3097
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RSI\nMOV qword ptr [RSP],RDI\nTEST RDI,RDI\nJZ 0x0040d444\nTEST RDX,RDX\nJZ 0x0040d421\nMOV RDI,RSP\nMOV RSI,RDX\nCALL 0x0040c980\nMOV RDI,qword ptr [RSP]\nLEA RSI,[RSP + 0x8]\nMOV EDX,0xa\nMOV R8D,0x41e69a\nMOV RCX,RBX\nCALL 0x00417780\nTEST EAX,EAX\nSETZ AL\nJMP 0x0040d446\nXOR EAX,EAX\nADD RSP,0x10\nPOP RBX\nRET\n'
p3098
S'53\n48 83 ec 10\n48 89 f3\n48 89 3c 24\n48 85 ff\n74 33\n48 85 d2\n74 0b\n48 89 e7\n48 89 d6\ne8 5f f5 ff ff\n48 8b 3c 24\n48 8d 74 24 08\nba 0a 00 00 00\n41 b8 9a e6 41 00\n48 89 d9\ne8 43 a3 00 00\n85 c0\n0f 94 c0\neb 02\n31 c0\n48 83 c4 10\n5b\nc3\n'
p3099
S'.text:000000000040d400\n.text:000000000040d401\n.text:000000000040d405\n.text:000000000040d408\n.text:000000000040d40c\n.text:000000000040d40f\n.text:000000000040d411\n.text:000000000040d414\n.text:000000000040d416\n.text:000000000040d419\n.text:000000000040d41c\n.text:000000000040d421\n.text:000000000040d425\n.text:000000000040d42a\n.text:000000000040d42f\n.text:000000000040d435\n.text:000000000040d438\n.text:000000000040d43d\n.text:000000000040d43f\n.text:000000000040d442\n.text:000000000040d444\n.text:000000000040d446\n.text:000000000040d44a\n.text:000000000040d44b\n'
p3100
tp3101
sS'print_name'
p3102
(S'\n__stdcall print_name(char * p, FILE * stream)\n'
p3103
V\u000a_Bool print_name(char *p,FILE *stream)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int in_EDX;\u000a  \u000a  if (in_EDX != 0) {\u000a    _Var1 = print_name_without_quoting(p,stream);\u000a    return _Var1;\u000a  }\u000a  _Var1 = print_name_with_quoting(p,stream);\u000a  return _Var1;\u000a}\u000a\u000a
p3104
S'TEST EDX,EDX\nJZ 0x0040f4c6\nJMP 0x0040f4d0\nJMP 0x0040f4f0\n'
p3105
S'85 d2\n74 02\neb 0a\neb 28\n'
p3106
S'.text:000000000040f4c0\n.text:000000000040f4c2\n.text:000000000040f4c4\n.text:000000000040f4c6\n'
p3107
tp3108
sS'process_optimisation_option'
p3109
(S'\n__stdcall process_optimisation_option(char * arg)\n'
p3110
V\u000avoid process_optimisation_option(char *arg)\u000a\u000a{\u000a  uint uVar1;\u000a  char *in_RAX;\u000a  ushort **ppuVar2;\u000a  uint *puVar3;\u000a  ulong uVar4;\u000a  undefined8 uVar5;\u000a  char *local_28;\u000a  \u000a  if (*arg == 0) {\u000a    uVar5 = dcgettext(0,"The -O option must be immediately followed by a decimal integer",5);\u000a    error(1,0,uVar5,uVar5);\u000a    return;\u000a  }\u000a  local_28 = in_RAX;\u000a  ppuVar2 = __ctype_b_loc();\u000a  if ((*(byte *)((long)*ppuVar2 + (ulong)(byte)*arg * 2 + 1) & 8) != 0) {\u000a    puVar3 = (uint *)__errno_location();\u000a    uVar1 = *puVar3;\u000a    *puVar3 = 0;\u000a    uVar4 = strtoul(arg,&local_28,10);\u000a    if ((uVar4 != 0) || (local_28 != arg)) {\u000a      if (*local_28 != 0) {\u000a        uVar5 = dcgettext(0,"Invalid optimisation level %s",5);\u000a        uVar4 = 0;\u000aLAB_004086d5:\u000a        error(1,uVar4,uVar5,arg);\u000a        return;\u000a      }\u000a      if (uVar4 == 0xffffffffffffffff) {\u000a        uVar1 = *puVar3;\u000a        if (uVar1 != 0) {\u000a          uVar5 = dcgettext(0,"Invalid optimisation level %s",5);\u000a          uVar4 = (ulong)uVar1;\u000a          goto LAB_004086d5;\u000a        }\u000a      }\u000a      else {\u000a        if (uVar4 < 0x10000) {\u000a          options.optimisation_level = (unsigned_short)uVar4;\u000a          *puVar3 = uVar1;\u000a          return;\u000a        }\u000a      }\u000a      uVar5 = dcgettext(0,\u000a                        "Optimisation level %lu is too high.  If you want to find files very quickly, consider using GNU locate."\u000a                        ,5);\u000a      error(1,0,uVar5,uVar4);\u000a      return;\u000a    }\u000a  }\u000a  uVar5 = dcgettext(0,"Please specify a decimal number immediately after -O",5);\u000a  error(1,0,uVar5,uVar5);\u000a  return;\u000a}\u000a\u000a
p3111
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCMP byte ptr [RBX],0x0\nJZ 0x00408684\nCALL 0x00402f80\nMOV RAX,qword ptr [RAX]\nMOVZX ECX,byte ptr [RBX]\nTEST byte ptr [RAX + RCX*0x2 + 0x1],0x8\nJZ 0x00408654\nCALL 0x00402770\nMOV R15,RAX\nMOV EBP,dword ptr [R15]\nMOV dword ptr [R15],0x0\nMOV RSI,RSP\nMOV EDX,0xa\nMOV RDI,RBX\nCALL 0x00402e60\nMOV R14,RAX\nMOV RAX,qword ptr [RSP]\nTEST R14,R14\nJNZ 0x004086b3\nCMP RAX,RBX\nJNZ 0x004086b3\nXOR EDI,EDI\nMOV ESI,0x41ec14\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402d90\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x41ebd4\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00402d90\nCMP byte ptr [RAX],0x0\nJZ 0x004086e2\nXOR EDI,EDI\nMOV ESI,0x41ec49\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,RBX\nCALL 0x00402d90\nJMP 0x00408679\nCMP R14,-0x1\nJZ 0x00408701\nCMP R14,0x10000\nJNC 0x00408727\nMOV word ptr [0x0062f0a8],R14W\nMOV dword ptr [R15],EBP\nJMP 0x00408679\nMOV EBP,dword ptr [R15]\nTEST EBP,EBP\nJZ 0x00408727\nXOR EDI,EDI\nMOV ESI,0x41ec49\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBP\nJMP 0x004086d5\nXOR EDI,EDI\nMOV ESI,0x41ec67\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,R14\nCALL 0x00402d90\nJMP 0x00408679\n'
p3112
S'55\n41 57\n41 56\n53\n50\n48 89 fb\n80 3b 00\n74 75\ne8 6c a9 ff ff\n48 8b 00\n0f b6 0b\nf6 44 48 01 08\n74 33\ne8 4a a1 ff ff\n49 89 c7\n41 8b 2f\n41 c7 07 00 00 00 00\n48 89 e6\nba 0a 00 00 00\n48 89 df\ne8 1d a8 ff ff\n49 89 c6\n48 8b 04 24\n4d 85 f6\n75 64\n48 39 d8\n75 5f\n31 ff\nbe 14 ec 41 00\nba 05 00 00 00\ne8 ab a2 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 17 a7 ff ff\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n31 ff\nbe d4 eb 41 00\nba 05 00 00 00\ne8 7b a2 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\ne9 dd a6 ff ff\n80 38 00\n74 2a\n31 ff\nbe 49 ec 41 00\nba 05 00 00 00\ne8 47 a2 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\n48 89 d9\ne8 b0 a6 ff ff\neb 97\n49 83 fe ff\n74 19\n49 81 fe 00 00 01 00\n73 36\n66 44 89 35 af 69 22 00\n41 89 2f\ne9 78 ff ff ff\n41 8b 2f\n85 ed\n74 1f\n31 ff\nbe 49 ec 41 00\nba 05 00 00 00\ne8 f7 a1 ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 ee\neb ae\n31 ff\nbe 67 ec 41 00\nba 05 00 00 00\ne8 d8 a1 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\n4c 89 f1\ne8 41 a6 ff ff\ne9 25 ff ff ff\n'
p3113
S'.text:0000000000408600\n.text:0000000000408601\n.text:0000000000408603\n.text:0000000000408605\n.text:0000000000408606\n.text:0000000000408607\n.text:000000000040860a\n.text:000000000040860d\n.text:000000000040860f\n.text:0000000000408614\n.text:0000000000408617\n.text:000000000040861a\n.text:000000000040861f\n.text:0000000000408621\n.text:0000000000408626\n.text:0000000000408629\n.text:000000000040862c\n.text:0000000000408633\n.text:0000000000408636\n.text:000000000040863b\n.text:000000000040863e\n.text:0000000000408643\n.text:0000000000408646\n.text:000000000040864a\n.text:000000000040864d\n.text:000000000040864f\n.text:0000000000408652\n.text:0000000000408654\n.text:0000000000408656\n.text:000000000040865b\n.text:0000000000408660\n.text:0000000000408665\n.text:0000000000408668\n.text:000000000040866d\n.text:000000000040866f\n.text:0000000000408671\n.text:0000000000408674\n.text:0000000000408679\n.text:000000000040867d\n.text:000000000040867e\n.text:0000000000408680\n.text:0000000000408682\n.text:0000000000408683\n.text:0000000000408684\n.text:0000000000408686\n.text:000000000040868b\n.text:0000000000408690\n.text:0000000000408695\n.text:0000000000408698\n.text:000000000040869d\n.text:000000000040869f\n.text:00000000004086a1\n.text:00000000004086a4\n.text:00000000004086a8\n.text:00000000004086a9\n.text:00000000004086ab\n.text:00000000004086ad\n.text:00000000004086ae\n.text:00000000004086b3\n.text:00000000004086b6\n.text:00000000004086b8\n.text:00000000004086ba\n.text:00000000004086bf\n.text:00000000004086c4\n.text:00000000004086c9\n.text:00000000004086cc\n.text:00000000004086d1\n.text:00000000004086d3\n.text:00000000004086d5\n.text:00000000004086d8\n.text:00000000004086db\n.text:00000000004086e0\n.text:00000000004086e2\n.text:00000000004086e6\n.text:00000000004086e8\n.text:00000000004086ef\n.text:00000000004086f1\n.text:00000000004086f9\n.text:00000000004086fc\n.text:0000000000408701\n.text:0000000000408704\n.text:0000000000408706\n.text:0000000000408708\n.text:000000000040870a\n.text:000000000040870f\n.text:0000000000408714\n.text:0000000000408719\n.text:000000000040871c\n.text:0000000000408721\n.text:0000000000408723\n.text:0000000000408725\n.text:0000000000408727\n.text:0000000000408729\n.text:000000000040872e\n.text:0000000000408733\n.text:0000000000408738\n.text:000000000040873b\n.text:0000000000408740\n.text:0000000000408742\n.text:0000000000408744\n.text:0000000000408747\n.text:000000000040874a\n.text:000000000040874f\n'
p3114
tp3115
sS'parse_maxdepth'
p3116
(S'\n__stdcall parse_maxdepth(parser_table * entry, char * * argv, int * arg_ptr)\n'
p3117
V\u000a_Bool parse_maxdepth(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = insert_depthspec();\u000a  return _Var1;\u000a}\u000a\u000a
p3118
S'MOV RAX,RDX\nMOV EDX,0x62f044\nMOV RDI,RSI\nMOV RSI,RAX\nJMP 0x0040d7d0\n'
p3119
S'48 89 d0\nba 44 f0 62 00\n48 89 f7\n48 89 c6\ne9 0d 1d 00 00\n'
p3120
S'.text:000000000040bab0\n.text:000000000040bab3\n.text:000000000040bab8\n.text:000000000040babb\n.text:000000000040babe\n'
p3121
tp3122
sS'hash_initialize'
p3123
(S'\n__stdcall hash_initialize(size_t candidate, Hash_tuning * tuning, Hash_hasher * hasher, Hash_comparator * comparator, Hash_data_freer * data_freer)\n'
p3124
V\u000aHash_table *\u000ahash_initialize(size_t candidate,Hash_tuning *tuning,size_t (*hasher)(void *,size_t),\u000a               _Bool (*comparator)(void *,void *),void (*data_freer)(void *))\u000a\u000a{\u000a  _Bool _Var1;\u000a  Hash_table *table;\u000a  size_t __nmemb;\u000a  hash_entry *phVar2;\u000a  code *pcVar3;\u000a  Hash_tuning *tuning_00;\u000a  code *pcVar4;\u000a  \u000a  pcVar3 = raw_hasher;\u000a  if (hasher != (size_t (*)(void *,size_t))0x0) {\u000a    pcVar3 = hasher;\u000a  }\u000a  pcVar4 = raw_comparator;\u000a  if (comparator != (_Bool (*)(void *,void *))0x0) {\u000a    pcVar4 = comparator;\u000a  }\u000a  table = (Hash_table *)malloc(0x50);\u000a  if (table != (Hash_table *)0x0) {\u000a    tuning_00 = &default_tuning;\u000a    if (tuning != (Hash_tuning *)0x0) {\u000a      tuning_00 = tuning;\u000a    }\u000a    table->tuning = tuning_00;\u000a    _Var1 = check_tuning(table);\u000a    if (_Var1 != false) {\u000a      __nmemb = compute_bucket_size(candidate,tuning_00);\u000a      table->n_buckets = __nmemb;\u000a      if (__nmemb != 0) {\u000a        phVar2 = (hash_entry *)calloc(__nmemb,0x10);\u000a        table->bucket = phVar2;\u000a        if (phVar2 != (hash_entry *)0x0) {\u000a          table->bucket_limit = phVar2 + table->n_buckets;\u000a          *(undefined4 *)&table->n_buckets_used = 0;\u000a          *(undefined4 *)((long)&table->n_buckets_used + 4) = 0;\u000a          *(undefined4 *)&table->n_entries = 0;\u000a          *(undefined4 *)((long)&table->n_entries + 4) = 0;\u000a          table->hasher = pcVar3;\u000a          table->comparator = pcVar4;\u000a          table->data_freer = data_freer;\u000a          table->free_entry_list = (hash_entry *)0x0;\u000a          return table;\u000a        }\u000a      }\u000a    }\u000a    free(table);\u000a  }\u000a  return (Hash_table *)0x0;\u000a}\u000a\u000a
p3125
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R13,R8\nMOV R12,RSI\nMOV R15,RDI\nTEST RDX,RDX\nMOV EBP,0x4108d0\nCMOVNZ RBP,RDX\nTEST RCX,RCX\nMOV R14D,0x4108f0\nCMOVNZ R14,RCX\nMOV EDI,0x50\nCALL 0x00402c60\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004108b5\nMOV qword ptr [RSP],R13\nTEST R12,R12\nMOV R13D,0x4228a4\nCMOVNZ R13,R12\nMOV qword ptr [RBX + 0x28],R13\nMOV RDI,RBX\nCALL 0x00410900\nTEST AL,AL\nJZ 0x004108ad\nMOV RDI,R15\nMOV RSI,R13\nCALL 0x00410980\nMOV qword ptr [RBX + 0x10],RAX\nTEST RAX,RAX\nJZ 0x004108ad\nMOV ESI,0x10\nMOV RDI,RAX\nCALL 0x00402b30\nMOV qword ptr [RBX],RAX\nTEST RAX,RAX\nJZ 0x004108ad\nMOV RCX,qword ptr [RBX + 0x10]\nSHL RCX,0x4\nADD RAX,RCX\nMOV qword ptr [RBX + 0x8],RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX + 0x18],XMM0\nMOV qword ptr [RBX + 0x30],RBP\nMOV qword ptr [RBX + 0x38],R14\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX + 0x40],RAX\nMOV qword ptr [RBX + 0x48],0x0\nJMP 0x004108b7\nMOV RDI,RBX\nCALL 0x00402710\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p3126
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 c5\n49 89 f4\n49 89 ff\n48 85 d2\nbd d0 08 41 00\n48 0f 45 ea\n48 85 c9\n41 be f0 08 41 00\n4c 0f 45 f1\nbf 50 00 00 00\ne8 39 24 ff ff\n48 89 c3\n48 85 db\n0f 84 82 00 00 00\n4c 89 2c 24\n4d 85 e4\n41 bd a4 28 42 00\n4d 0f 45 ec\n4c 89 6b 28\n48 89 df\ne8 b0 00 00 00\n84 c0\n74 59\n4c 89 ff\n4c 89 ee\ne8 21 01 00 00\n48 89 43 10\n48 85 c0\n74 45\nbe 10 00 00 00\n48 89 c7\ne8 bb 22 ff ff\n48 89 03\n48 85 c0\n74 30\n48 8b 4b 10\n48 c1 e1 04\n48 01 c8\n48 89 43 08\n0f 57 c0\n0f 11 43 18\n48 89 6b 30\n4c 89 73 38\n48 8b 04 24\n48 89 43 40\n48 c7 43 48 00 00 00 00\neb 0a\n48 89 df\ne8 5b 1e ff ff\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p3127
S'.text:00000000004107f0\n.text:00000000004107f1\n.text:00000000004107f3\n.text:00000000004107f5\n.text:00000000004107f7\n.text:00000000004107f9\n.text:00000000004107fa\n.text:00000000004107fb\n.text:00000000004107fe\n.text:0000000000410801\n.text:0000000000410804\n.text:0000000000410807\n.text:000000000041080c\n.text:0000000000410810\n.text:0000000000410813\n.text:0000000000410819\n.text:000000000041081d\n.text:0000000000410822\n.text:0000000000410827\n.text:000000000041082a\n.text:000000000041082d\n.text:0000000000410833\n.text:0000000000410837\n.text:000000000041083a\n.text:0000000000410840\n.text:0000000000410844\n.text:0000000000410848\n.text:000000000041084b\n.text:0000000000410850\n.text:0000000000410852\n.text:0000000000410854\n.text:0000000000410857\n.text:000000000041085a\n.text:000000000041085f\n.text:0000000000410863\n.text:0000000000410866\n.text:0000000000410868\n.text:000000000041086d\n.text:0000000000410870\n.text:0000000000410875\n.text:0000000000410878\n.text:000000000041087b\n.text:000000000041087d\n.text:0000000000410881\n.text:0000000000410885\n.text:0000000000410888\n.text:000000000041088c\n.text:000000000041088f\n.text:0000000000410893\n.text:0000000000410897\n.text:000000000041089b\n.text:000000000041089f\n.text:00000000004108a3\n.text:00000000004108ab\n.text:00000000004108ad\n.text:00000000004108b0\n.text:00000000004108b5\n.text:00000000004108b7\n.text:00000000004108ba\n.text:00000000004108be\n.text:00000000004108bf\n.text:00000000004108c1\n.text:00000000004108c3\n.text:00000000004108c5\n.text:00000000004108c7\n.text:00000000004108c8\n'
p3128
tp3129
sS'xrealloc'
p3130
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p3131
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p3132
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00417277\nTEST RBX,RBX\nJNZ 0x00417277\nCALL 0x00402710\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00402d30\nTEST RBX,RBX\nJZ 0x00417289\nTEST RAX,RAX\nJZ 0x0041728b\nPOP RBX\nRET\nCALL 0x004173b0\n'
p3133
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 9d b4 fe ff\n31 c0\n5b\nc3\n48 89 de\ne8 b1 ba fe ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p3134
S'.text:0000000000417260\n.text:0000000000417261\n.text:0000000000417264\n.text:0000000000417267\n.text:0000000000417269\n.text:000000000041726c\n.text:000000000041726e\n.text:0000000000417273\n.text:0000000000417275\n.text:0000000000417276\n.text:0000000000417277\n.text:000000000041727a\n.text:000000000041727f\n.text:0000000000417282\n.text:0000000000417284\n.text:0000000000417287\n.text:0000000000417289\n.text:000000000041728a\n.text:000000000041728b\n'
p3135
tp3136
sS'signal'
p3137
(S'\n__stdcall signal(int __sig, __sighandler_t __handler)\n'
p3138
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__sighandler_t signal(int __sig,__sighandler_t __handler)\u000a\u000a{\u000a  __sighandler_t pVar1;\u000a  \u000a  pVar1 = (__sighandler_t)(*(code *)PTR_signal_0062d248)();\u000a  return pVar1;\u000a}\u000a\u000a
p3139
S'JMP qword ptr [0x0062d248]\n'
p3140
S'ff 25 f2 a6 22 00\n'
p3141
S'.plt:0000000000402b50\n'
p3142
tp3143
sS'pred_samefile'
p3144
(S'\n__stdcall pred_samefile(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p3145
V\u000a_Bool pred_samefile(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if ((((stat_buf->st_ino == 0) || (stat_buf->st_ino == *(__ino_t *)pred_ptr->args)) &&\u000a      (iVar1 = get_statinfo(pathname,state.rel_pathname,stat_buf), iVar1 == 0)) &&\u000a     (stat_buf->st_ino == *(__ino_t *)pred_ptr->args)) {\u000a    return (_Bool)(stat_buf->st_dev == *(__dev_t *)(pred_ptr->args + 8));\u000a  }\u000a  return false;\u000a}\u000a\u000a
p3146
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV RBX,RSI\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nJZ 0x004046f9\nCMP RAX,qword ptr [R14 + 0x38]\nJNZ 0x00404722\nMOV RSI,qword ptr [0x0062f010]\nMOV RDX,RBX\nCALL 0x004079e0\nTEST EAX,EAX\nJNZ 0x00404722\nMOV RAX,qword ptr [RBX + 0x8]\nCMP RAX,qword ptr [R14 + 0x38]\nJNZ 0x00404722\nMOV RAX,qword ptr [RBX]\nCMP RAX,qword ptr [R14 + 0x40]\nSETZ AL\nJMP 0x00404724\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p3147
S'41 56\n53\n50\n49 89 d6\n48 89 f3\n48 8b 43 08\n48 85 c0\n74 06\n49 3b 46 38\n75 29\n48 8b 35 10 a9 22 00\n48 89 da\ne8 d8 32 00 00\n85 c0\n75 16\n48 8b 43 08\n49 3b 46 38\n75 0c\n48 8b 03\n49 3b 46 40\n0f 94 c0\neb 02\n31 c0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p3148
S'.text:00000000004046e0\n.text:00000000004046e2\n.text:00000000004046e3\n.text:00000000004046e4\n.text:00000000004046e7\n.text:00000000004046ea\n.text:00000000004046ee\n.text:00000000004046f1\n.text:00000000004046f3\n.text:00000000004046f7\n.text:00000000004046f9\n.text:0000000000404700\n.text:0000000000404703\n.text:0000000000404708\n.text:000000000040470a\n.text:000000000040470c\n.text:0000000000404710\n.text:0000000000404714\n.text:0000000000404716\n.text:0000000000404719\n.text:000000000040471d\n.text:0000000000404720\n.text:0000000000404722\n.text:0000000000404724\n.text:0000000000404728\n.text:0000000000404729\n.text:000000000040472b\n'
p3149
tp3150
sS'pred_fstype'
p3151
(S'\n__stdcall pred_fstype(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p3152
V\u000a_Bool pred_fstype(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  int iVar1;\u000a  char *__s1;\u000a  \u000a  __s1 = filesystem_type(stat_buf,pathname);\u000a  iVar1 = strcmp(__s1,*(char **)pred_ptr->args);\u000a  return (_Bool)(iVar1 == 0);\u000a}\u000a\u000a
p3153
S'PUSH RBX\nMOV RBX,RDX\nMOV RAX,RDI\nMOV RDI,RSI\nMOV RSI,RAX\nCALL 0x0040a290\nMOV RSI,qword ptr [RBX + 0x38]\nMOV RDI,RAX\nCALL 0x00402b40\nTEST EAX,EAX\nSETZ AL\nPOP RBX\nRET\n'
p3154
S'53\n48 89 d3\n48 89 f8\n48 89 f7\n48 89 c6\ne8 9e 61 00 00\n48 8b 73 38\n48 89 c7\ne8 42 ea ff ff\n85 c0\n0f 94 c0\n5b\nc3\n'
p3155
S'.text:00000000004040e0\n.text:00000000004040e1\n.text:00000000004040e4\n.text:00000000004040e7\n.text:00000000004040ea\n.text:00000000004040ed\n.text:00000000004040f2\n.text:00000000004040f6\n.text:00000000004040f9\n.text:00000000004040fe\n.text:0000000000404100\n.text:0000000000404103\n.text:0000000000404104\n'
p3156
tp3157
sS'version_etc_ar'
p3158
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p3159
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p3160
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00417080\nJMP 0x00416d50\n'
p3161
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 bf fc ff ff\n'
p3162
S'.text:0000000000417070\n.text:0000000000417077\n.text:0000000000417080\n.text:0000000000417086\n.text:000000000041708a\n.text:000000000041708c\n'
p3163
tp3164
sS'strtoumax'
p3165
(S'\n__stdcall strtoumax(char * __nptr, char * * __endptr, int __base)\n'
p3166
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000auintmax_t strtoumax(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoumax_0062d3a8)();\u000a  return uVar1;\u000a}\u000a\u000a
p3167
S'JMP qword ptr [0x0062d3a8]\n'
p3168
S'ff 25 92 a5 22 00\n'
p3169
S'.plt:0000000000402e10\n'
p3170
tp3171
sS'open_stdout'
p3172
(S'\n__stdcall open_stdout(format_val * p)\n'
p3173
V\u000avoid open_stdout(format_val *p)\u000a\u000a{\u000a  open_output_file("/dev/stdout",p);\u000a  return;\u000a}\u000a\u000a
p3174
S'MOV RAX,RDI\nMOV EDI,0x421525\nMOV RSI,RAX\nJMP 0x0040d0e0\n'
p3175
S'48 89 f8\nbf 25 15 42 00\n48 89 c6\ne9 50 27 00 00\n'
p3176
S'.text:000000000040a980\n.text:000000000040a983\n.text:000000000040a988\n.text:000000000040a98b\n'
p3177
tp3178
sS'mbuiter_multi_copy'
p3179
(S'\n__stdcall mbuiter_multi_copy(mbuiter_multi * new_iter, mbuiter_multi * old_iter)\n'
p3180
V\u000avoid mbuiter_multi_copy(mbuiter_multi *new_iter,mbuiter_multi *old_iter)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = old_iter->in_shift;\u000a  new_iter->in_shift = _Var1;\u000a  if (_Var1 == false) {\u000a    new_iter->state = (mbstate_t)0x0;\u000a  }\u000a  else {\u000a    new_iter->state = old_iter->state;\u000a  }\u000a  new_iter->next_done = old_iter->next_done;\u000a  mb_copy((mbchar_t *)&new_iter->cur,(mbchar_t *)&old_iter->cur);\u000a  return;\u000a}\u000a\u000a
p3181
S'MOV AL,byte ptr [RSI]\nTEST AL,AL\nMOV byte ptr [RDI],AL\nJZ 0x00412d32\nMOV RAX,qword ptr [RSI + 0x4]\nMOV qword ptr [RDI + 0x4],RAX\nJMP 0x00412d3a\nMOV qword ptr [RDI + 0x4],0x0\nMOV AL,byte ptr [RSI + 0xc]\nMOV byte ptr [RDI + 0xc],AL\nADD RDI,0x10\nADD RSI,0x10\nJMP 0x0041c120\n'
p3182
S'8a 06\n84 c0\n88 07\n74 0a\n48 8b 46 04\n48 89 47 04\neb 08\n48 c7 47 04 00 00 00 00\n8a 46 0c\n88 47 0c\n48 83 c7 10\n48 83 c6 10\ne9 d3 93 00 00\n'
p3183
S'.text:0000000000412d20\n.text:0000000000412d22\n.text:0000000000412d24\n.text:0000000000412d26\n.text:0000000000412d28\n.text:0000000000412d2c\n.text:0000000000412d30\n.text:0000000000412d32\n.text:0000000000412d3a\n.text:0000000000412d3d\n.text:0000000000412d40\n.text:0000000000412d44\n.text:0000000000412d48\n'
p3184
tp3185
sS'bc_args_complete'
p3186
(S'\n__stdcall bc_args_complete(buildcmd_control * ctl, buildcmd_state * state)\n'
p3187
V\u000avoid bc_args_complete(buildcmd_control *ctl,buildcmd_state *state)\u000a\u000a{\u000a  bc_push_arg(ctl,state,"do_not_care",0,(char *)0x0,0);\u000a  return;\u000a}\u000a\u000a
p3188
S'PUSH RAX\nMOV dword ptr [RSP],0x0\nMOV EDX,0x421f97\nXOR ECX,ECX\nXOR R8D,R8D\nXOR R9D,R9D\nCALL 0x0040dcf0\nPOP RAX\nRET\n'
p3189
S'50\nc7 04 24 00 00 00 00\nba 97 1f 42 00\n31 c9\n45 31 c0\n45 31 c9\ne8 86 fc ff ff\n58\nc3\n'
p3190
S'.text:000000000040e050\n.text:000000000040e051\n.text:000000000040e058\n.text:000000000040e05d\n.text:000000000040e05f\n.text:000000000040e062\n.text:000000000040e065\n.text:000000000040e06a\n.text:000000000040e06b\n'
p3191
tp3192
sS'to_year'
p3193
(S'\n__stdcall to_year(textint textyear)\n'
p3194
V\u000along to_year(textint textyear)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  if (-1 < textyear.value) {\u000a    if (textyear.digits == 2) {\u000a      lVar1 = 0x76c;\u000a      if (textyear.value < 0x45) {\u000a        lVar1 = 2000;\u000a      }\u000a      textyear.value = textyear.value + lVar1;\u000a    }\u000a    return textyear.value;\u000a  }\u000a  return -textyear.value;\u000a}\u000a\u000a
p3195
S'MOV RAX,qword ptr [RSP + 0x10]\nTEST RAX,RAX\nJS 0x00414cec\nLEA RCX,[RSP + 0x8]\nCMP qword ptr [RCX + 0x10],0x2\nJNZ 0x00414ceb\nCMP RAX,0x45\nMOV ECX,0x7d0\nMOV EDX,0x76c\nCMOVL RDX,RCX\nADD RAX,RDX\nRET\nNEG RAX\nRET\n'
p3196
S'48 8b 44 24 10\n48 85 c0\n78 22\n48 8d 4c 24 08\n48 83 79 10 02\n75 15\n48 83 f8 45\nb9 d0 07 00 00\nba 6c 07 00 00\n48 0f 4c d1\n48 01 d0\nc3\n48 f7 d8\nc3\n'
p3197
S'.text:0000000000414cc0\n.text:0000000000414cc5\n.text:0000000000414cc8\n.text:0000000000414cca\n.text:0000000000414ccf\n.text:0000000000414cd4\n.text:0000000000414cd6\n.text:0000000000414cda\n.text:0000000000414cdf\n.text:0000000000414ce4\n.text:0000000000414ce8\n.text:0000000000414ceb\n.text:0000000000414cec\n.text:0000000000414cef\n'
p3198
tp3199
sS'strstr'
p3200
(S'\n__stdcall strstr(char * __haystack, char * __needle)\n'
p3201
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strstr(char *__haystack,char *__needle)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strstr_0062d458)();\u000a  return pcVar1;\u000a}\u000a\u000a
p3202
S'JMP qword ptr [0x0062d458]\n'
p3203
S'ff 25 e2 a4 22 00\n'
p3204
S'.plt:0000000000402f70\n'
p3205
tp3206
sS'parse_noleaf'
p3207
(S'\n__stdcall parse_noleaf(parser_table * entry, char * * argv, int * arg_ptr)\n'
p3208
V\u000a_Bool parse_noleaf(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  options.no_leaf_check = true;\u000a  parse_noop();\u000a  return true;\u000a}\u000a\u000a
p3209
S'PUSH RAX\nMOV byte ptr [0x0062f04c],0x1\nMOV RDI,RSI\nMOV RSI,RDX\nCALL 0x0040ca00\nMOV AL,0x1\nPOP RCX\nRET\n'
p3210
S'50\nc6 05 24 34 22 00 01\n48 89 f7\n48 89 d6\ne8 cd 0d 00 00\nb0 01\n59\nc3\n'
p3211
S'.text:000000000040bc20\n.text:000000000040bc21\n.text:000000000040bc28\n.text:000000000040bc2b\n.text:000000000040bc2e\n.text:000000000040bc33\n.text:000000000040bc35\n.text:000000000040bc36\n'
p3212
tp3213
sS'gettime'
p3214
(S'\n__stdcall gettime(timespec * ts)\n'
p3215
V\u000avoid gettime(timespec *ts)\u000a\u000a{\u000a  int iVar1;\u000a  timeval local_18;\u000a  \u000a  iVar1 = clock_gettime(0,(timespec *)ts);\u000a  if (iVar1 != 0) {\u000a    gettimeofday(&local_18,(__timezone_ptr_t)0x0);\u000a    ts->tv_sec = local_18.tv_sec;\u000a    ts->tv_nsec = local_18.tv_usec * 1000;\u000a  }\u000a  return;\u000a}\u000a\u000a
p3216
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RDI\nXOR EDI,EDI\nMOV RSI,RBX\nCALL 0x00402890\nTEST EAX,EAX\nJZ 0x0041bbd4\nMOV RDI,RSP\nXOR ESI,ESI\nCALL 0x00402a30\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX],RAX\nIMUL RAX,qword ptr [RSP + 0x8],0x3e8\nMOV qword ptr [RBX + 0x8],RAX\nADD RSP,0x10\nPOP RBX\nRET\n'
p3217
S'53\n48 83 ec 10\n48 89 fb\n31 ff\n48 89 de\ne8 de 6c fe ff\n85 c0\n74 1e\n48 89 e7\n31 f6\ne8 70 6e fe ff\n48 8b 04 24\n48 89 03\n48 69 44 24 08 e8 03 00 00\n48 89 43 08\n48 83 c4 10\n5b\nc3\n'
p3218
S'.text:000000000041bba0\n.text:000000000041bba1\n.text:000000000041bba5\n.text:000000000041bba8\n.text:000000000041bbaa\n.text:000000000041bbad\n.text:000000000041bbb2\n.text:000000000041bbb4\n.text:000000000041bbb6\n.text:000000000041bbb9\n.text:000000000041bbbb\n.text:000000000041bbc0\n.text:000000000041bbc4\n.text:000000000041bbc7\n.text:000000000041bbd0\n.text:000000000041bbd4\n.text:000000000041bbd8\n.text:000000000041bbd9\n'
p3219
tp3220
sS'pred_links'
p3221
(S'\n__stdcall pred_links(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p3222
V\u000a_Bool pred_links(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = *(int *)pred_ptr->args;\u000a  if (iVar1 == 2) {\u000a    if (stat_buf->st_nlink == *(__nlink_t *)(pred_ptr->args + 8)) {\u000a      return true;\u000a    }\u000a  }\u000a  else {\u000a    if (iVar1 == 1) {\u000a      if (stat_buf->st_nlink < *(ulong *)(pred_ptr->args + 8)) {\u000a        return true;\u000a      }\u000a    }\u000a    else {\u000a      if ((iVar1 == 0) &&\u000a         (*(ulong *)(pred_ptr->args + 8) <= stat_buf->st_nlink &&\u000a          stat_buf->st_nlink != *(ulong *)(pred_ptr->args + 8))) {\u000a        return true;\u000a      }\u000a    }\u000a  }\u000a  return false;\u000a}\u000a\u000a
p3223
S'MOV EAX,dword ptr [RDX + 0x38]\nCMP EAX,0x2\nJZ 0x0040421f\nCMP EAX,0x1\nJZ 0x0040422d\nTEST EAX,EAX\nJNZ 0x00404239\nMOV RCX,qword ptr [RSI + 0x10]\nMOV AL,0x1\nCMP RCX,qword ptr [RDX + 0x40]\nJBE 0x00404239\nJMP 0x0040423b\nMOV RCX,qword ptr [RSI + 0x10]\nMOV AL,0x1\nCMP RCX,qword ptr [RDX + 0x40]\nJNZ 0x00404239\nJMP 0x0040423b\nMOV RCX,qword ptr [RSI + 0x10]\nMOV AL,0x1\nCMP RCX,qword ptr [RDX + 0x40]\nJC 0x0040423b\nXOR EAX,EAX\nRET\n'
p3224
S'8b 42 38\n83 f8 02\n74 17\n83 f8 01\n74 20\n85 c0\n75 28\n48 8b 4e 10\nb0 01\n48 3b 4a 40\n76 1c\neb 1c\n48 8b 4e 10\nb0 01\n48 3b 4a 40\n75 0e\neb 0e\n48 8b 4e 10\nb0 01\n48 3b 4a 40\n72 02\n31 c0\nc3\n'
p3225
S'.text:0000000000404200\n.text:0000000000404203\n.text:0000000000404206\n.text:0000000000404208\n.text:000000000040420b\n.text:000000000040420d\n.text:000000000040420f\n.text:0000000000404211\n.text:0000000000404215\n.text:0000000000404217\n.text:000000000040421b\n.text:000000000040421d\n.text:000000000040421f\n.text:0000000000404223\n.text:0000000000404225\n.text:0000000000404229\n.text:000000000040422b\n.text:000000000040422d\n.text:0000000000404231\n.text:0000000000404233\n.text:0000000000404237\n.text:0000000000404239\n.text:000000000040423b\n'
p3226
tp3227
sS'shr'
p3228
(S'\n__stdcall shr(long_int a)\n'
p3229
V\u000along_int shr(long_int a)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  \u000a  return a >> ((byte)in_ESI & 0x3f);\u000a}\u000a\u000a
p3230
S'MOV ECX,ESI\nSAR RDI,CL\nMOV RAX,RDI\nRET\n'
p3231
S'89 f1\n48 d3 ff\n48 89 f8\nc3\n'
p3232
S'.text:000000000041a6f0\n.text:000000000041a6f2\n.text:000000000041a6f5\n.text:000000000041a6f8\n'
p3233
tp3234
sS'consider_visiting'
p3235
(S'\n__stdcall consider_visiting(FTS * p, FTSENT * ent)\n'
p3236
V\u000avoid consider_visiting(FTS *p,FTSENT *ent)\u000a\u000a{\u000a  int iVar1;\u000a  FILE *__stream;\u000a  _Bool _Var2;\u000a  byte bVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  char *pcVar6;\u000a  uint uVar7;\u000a  ulong uVar8;\u000a  ulong uVar9;\u000a  ulong uVar10;\u000a  uint local_dc;\u000a  char *local_d8;\u000a  char *local_d0;\u000a  FILE *local_c8;\u000a  stat local_c0;\u000a  \u000a  if (((byte)options.debug_options & 4) != 0) {\u000a    local_c8 = stderr;\u000a    local_d0 = quotearg_n_style((char *)0x0);\u000a    local_d8 = get_fts_info_name();\u000a    iVar1 = prev_depth;\u000a    uVar7 = *(uint *)&ent->fts_level;\u000a    pcVar5 = quotearg_n_style((char *)0x1);\u000a    pcVar6 = quotearg_n_style((char *)0x2);\u000a    fprintf(local_c8,\u000a            "consider_visiting (early): %s: fts_info=%-6s, fts_level=%2d, prev_depth=%d fts_path=%s, fts_accpath=%s\u005cn"\u000a            ,local_d0,local_d8,(ulong)uVar7,(ulong)(uint)iVar1,pcVar5,pcVar6);\u000a  }\u000a  if (((ent->fts_info == 6) || (ent->fts_level == 0)) || ((long)prev_depth < ent->fts_level)) {\u000a    left_dir();\u000a  }\u000a  inside_dir();\u000a  prev_depth = *(int *)&ent->fts_level;\u000a  local_c0.st_ino = ent->fts_statp[0].st_ino;\u000a  switch(ent->fts_info) {\u000a  case 2:\u000a    issue_loop_warning(ent);\u000a    error_severity(1);\u000a    return;\u000a  case 4:\u000a  case 7:\u000aswitchD_004036e6_caseD_4:\u000a    nonfatal_target_file_error((char *)(ulong)(uint)ent->fts_errno);\u000a    return;\u000a  case 10:\u000a    if (ent->fts_level == 0) goto switchD_004036e6_caseD_4;\u000a    _Var2 = symlink_loop(ent->fts_accpath);\u000a    if (_Var2 != false) goto LAB_00403748;\u000a    nonfatal_target_file_error((char *)(ulong)(uint)ent->fts_errno);\u000a    break;\u000a  case 0xd:\u000a    _Var2 = symlink_loop(ent->fts_accpath);\u000a    if (_Var2 != false) {\u000aLAB_00403748:\u000a      nonfatal_target_file_error((char *)0x28);\u000a      return;\u000a    }\u000a  }\u000a  if ((ent->fts_info & 0xfffe) == 10) {\u000a    if (state.have_stat != false) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("!state.have_stat","ftsfind.c",0x1a6,"void consider_visiting(FTS *, FTSENT *)");\u000a    }\u000a    if ((ent->fts_info != 0xb) && (state.type != 0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("ent->fts_info == FTS_NSOK || state.type == 0","ftsfind.c",0x1a7,\u000a                    "void consider_visiting(FTS *, FTSENT *)");\u000a    }\u000a    local_dc = state.type;\u000a  }\u000a  else {\u000a    state._4_2_ = 0x101;\u000a    memcpy(&local_c0,ent->fts_statp,0x90);\u000a    local_dc = local_c0.st_mode;\u000a    state.type = local_c0.st_mode;\u000a    if (local_c0.st_mode == 0) {\u000a      uVar4 = dcgettext(0,"WARNING: file %s appears to have mode 0000",5);\u000a      quotearg_n_style((char *)0x0);\u000a      error(0,0,uVar4);\u000a    }\u000a  }\u000a  state.curdepth = *(int *)&ent->fts_level;\u000a  if ((local_dc != 0) &&\u000a     (_Var2 = digest_mode(&local_dc,ent->fts_path,(char *)(ent + 1),&local_c0), _Var2 == false)) {\u000a    return;\u000a  }\u000a  uVar10 = 1;\u000a  if ((local_dc & 0xf000) != 0x4000) {\u000a    uVar7 = (uint)ent->fts_info - 1;\u000a    uVar10 = 0;\u000a    if ((5 < (uVar7 & 0xffff)) ||\u000a       (bVar3 = 0x23U >> ((byte)uVar7 & 0x1f) & 1, uVar10 = (ulong)bVar3, bVar3 == 0))\u000a    goto LAB_0040387c;\u000a  }\u000a  if (ent->fts_info == 0xb) {\u000a    fts_set(p,ent);\u000a    return;\u000a  }\u000aLAB_0040387c:\u000a  uVar9 = 0;\u000a  if ((-1 < (long)options.maxdepth) && ((long)options.maxdepth <= ent->fts_level)) {\u000a    fts_set(p,ent);\u000a    uVar9 = (ulong)(ent->fts_level != (long)options.maxdepth &&\u000a                   (long)options.maxdepth <= ent->fts_level);\u000a  }\u000a  __stream = stderr;\u000a  uVar8 = 1;\u000a  if (((ent->fts_info != 6 || options.do_dir_first == false) !=\u000a       (ent->fts_info == 1 && options.do_dir_first == false)) &&\u000a     (uVar8 = uVar9, ent->fts_level < (long)options.mindepth)) {\u000a    uVar8 = 1;\u000a  }\u000a  if (((byte)options.debug_options & 4) != 0) {\u000a    pcVar5 = quotearg_n_style((char *)0x0);\u000a    pcVar6 = get_fts_info_name();\u000a    fprintf(__stream,\u000a            "consider_visiting (late): %s: fts_info=%-6s, isdir=%d ignore=%d have_stat=%d have_type=%d \u005cn"\u000a            ,pcVar5,pcVar6,uVar10,uVar8,(ulong)state.have_stat,(ulong)state.have_type);\u000a  }\u000a  if ((int)uVar8 == 0) {\u000a    visit(p,ent,&local_c0);\u000a  }\u000a  if (ent->fts_info == 6) {\u000a    state.stop_at_current_level = false;\u000a  }\u000a  return;\u000a}\u000a\u000a
p3237
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xb8\nMOV RBX,RSI\nMOV R14,RDI\nTEST byte ptr [0x0062f080],0x4\nJNZ 0x00403933\nMOVZX EAX,word ptr [RBX + 0x70]\nCMP EAX,0x6\nJNZ 0x004036a4\nCALL 0x00403aa0\nJMP 0x004036b9\nMOV RAX,qword ptr [RBX + 0x58]\nTEST RAX,RAX\nJZ 0x0040369d\nMOVSXD RCX,dword ptr [0x0062d488]\nCMP RAX,RCX\nJG 0x0040369d\nMOV EDI,dword ptr [R14 + 0x2c]\nCALL 0x00403490\nMOV EAX,dword ptr [RBX + 0x58]\nMOV dword ptr [0x0062d488],EAX\nMOV RAX,qword ptr [0x80 + RBX]\nMOV qword ptr [RSP + 0x30],RAX\nMOVZX EAX,word ptr [RBX + 0x70]\nADD EAX,-0x2\nMOVZX EAX,AX\nCMP EAX,0xb\nJA 0x00403757\nJMP qword ptr [0x41c500 + RAX*0x8]\nMOV EDI,dword ptr [RBX + 0x40]\nMOV RSI,qword ptr [RBX + 0x38]\nCALL 0x00407ab0\nJMP 0x00403921\nMOV RDI,RBX\nCALL 0x00403ad0\nMOV EDI,0x1\nCALL 0x00407aa0\nJMP 0x00403921\nCMP qword ptr [RBX + 0x58],0x0\nJZ 0x004036ed\nMOV RDI,qword ptr [RBX + 0x30]\nCALL 0x00403b80\nMOV RSI,qword ptr [RBX + 0x38]\nTEST AL,AL\nJNZ 0x00403748\nMOV EDI,dword ptr [RBX + 0x40]\nCALL 0x00407ab0\nJMP 0x00403757\nMOV RDI,qword ptr [RBX + 0x30]\nCALL 0x00403b80\nTEST AL,AL\nJZ 0x00403757\nMOV RSI,qword ptr [RBX + 0x38]\nMOV EDI,0x28\nCALL 0x00407ab0\nJMP 0x00403921\nMOVZX EAX,word ptr [RBX + 0x70]\nMOV ECX,EAX\nAND ECX,0xfffe\nCMP ECX,0xa\nJNZ 0x00403791\nCMP byte ptr [0x0062f004],0x0\nJNZ 0x00403a33\nMOVZX EAX,AX\nCMP EAX,0xb\nMOV EAX,dword ptr [0x0062f008]\nJZ 0x0040378b\nTEST EAX,EAX\nJNZ 0x00403a4c\nMOV dword ptr [RSP + 0xc],EAX\nJMP 0x004037f9\nLEA RSI,[RBX + 0x78]\nMOV word ptr [0x0062f004],0x101\nLEA RDI,[RSP + 0x28]\nMOV EDX,0x90\nCALL 0x00402bd0\nMOV EAX,dword ptr [RSP + 0x40]\nMOV dword ptr [RSP + 0xc],EAX\nMOV dword ptr [0x0062f008],EAX\nTEST EAX,EAX\nJNZ 0x004037f5\nXOR EDI,EDI\nMOV ESI,0x41c847\nMOV EDX,0x5\nCALL 0x00402910\nMOV RBP,RAX\nMOV ESI,dword ptr [0x0062f0ac]\nMOV RDX,qword ptr [RBX + 0x38]\nXOR EDI,EDI\nCALL 0x00416290\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x00402d90\nMOV EAX,dword ptr [RSP + 0xc]\nMOV ECX,dword ptr [RBX + 0x58]\nMOV dword ptr [0x0062f000],ECX\nTEST EAX,EAX\nJZ 0x0040382b\nMOV RSI,qword ptr [RBX + 0x38]\nLEA RDX,[0x108 + RBX]\nLEA RDI,[RSP + 0xc]\nLEA RCX,[RSP + 0x28]\nXOR R8D,R8D\nCALL 0x00408260\nTEST AL,AL\nJZ 0x00403921\nMOV EAX,0xf000\nAND EAX,dword ptr [RSP + 0xc]\nMOV R15D,0x1\nCMP EAX,0x4000\nJNZ 0x0040385f\nMOVZX EAX,word ptr [RBX + 0x70]\nCMP EAX,0xb\nJNZ 0x0040387c\nMOV EDX,0x1\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00419be0\nJMP 0x00403921\nMOVZX ECX,word ptr [RBX + 0x70]\nDEC ECX\nXOR R15D,R15D\nMOVZX EAX,CX\nCMP EAX,0x5\nJA 0x0040387c\nMOV AL,0x23\nSHR AL,CL\nAND AL,0x1\nMOVZX R15D,AL\nJNZ 0x00403841\nMOVSXD RCX,dword ptr [0x0062f044]\nXOR ESI,ESI\nTEST RCX,RCX\nJS 0x004038b1\nCMP qword ptr [RBX + 0x58],RCX\nJL 0x004038b1\nMOV EDX,0x4\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00419be0\nMOVSXD RCX,dword ptr [0x0062f044]\nXOR ESI,ESI\nCMP qword ptr [RBX + 0x58],RCX\nSETG SIL\nMOVZX ECX,word ptr [RBX + 0x70]\nCMP ECX,0x1\nSETZ DL\nCMP byte ptr [0x0062f040],0x0\nSETZ AL\nAND DL,AL\nCMP ECX,0x6\nSETNZ CL\nOR CL,AL\nXOR CL,DL\nMOV EBP,0x1\nCMP CL,0x1\nJNZ 0x004038f0\nMOVSXD RAX,dword ptr [0x0062f048]\nCMP qword ptr [RBX + 0x58],RAX\nMOV EAX,0x1\nCMOVL ESI,EAX\nMOV EBP,ESI\nTEST byte ptr [0x0062f080],0x4\nJNZ 0x004039cc\nTEST EBP,EBP\nJNZ 0x00403911\nLEA RDX,[RSP + 0x28]\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00403bb0\nMOVZX EAX,word ptr [RBX + 0x70]\nCMP EAX,0x6\nJNZ 0x00403921\nMOV byte ptr [0x0062f020],0x0\nADD RSP,0xb8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RAX,qword ptr [0x0062de60]\nMOV qword ptr [RSP + 0x20],RAX\nMOV ESI,dword ptr [0x0062f0ac]\nMOV RDX,qword ptr [RBX + 0x38]\nXOR EDI,EDI\nCALL 0x00416290\nMOV qword ptr [RSP + 0x18],RAX\nMOVZX EDI,word ptr [RBX + 0x70]\nCALL 0x00403a70\nMOV qword ptr [RSP + 0x10],RAX\nMOV R13D,dword ptr [RBX + 0x58]\nMOV R15D,dword ptr [0x0062d488]\nMOV ESI,dword ptr [0x0062f0ac]\nMOV RDX,qword ptr [RBX + 0x38]\nMOV EDI,0x1\nCALL 0x00416290\nMOV R12,RAX\nMOV ESI,dword ptr [0x0062f0ac]\nMOV RDX,qword ptr [RBX + 0x30]\nMOV EDI,0x2\nCALL 0x00416290\nMOV RBP,RAX\nMOV ESI,0x41c779\nMOV EAX,0x0\nMOV RDI,qword ptr [RSP + 0x20]\nMOV RDX,qword ptr [RSP + 0x18]\nMOV RCX,qword ptr [RSP + 0x10]\nMOV R8D,R13D\nMOV R9D,R15D\nPUSH RBP\nPUSH R12\nCALL 0x00402ba0\nADD RSP,0x10\nJMP 0x00403694\nMOV R12,qword ptr [0x0062de60]\nMOV ESI,dword ptr [0x0062f0ac]\nMOV RDX,qword ptr [RBX + 0x38]\nXOR EDI,EDI\nCALL 0x00416290\nMOV R13,RAX\nMOVZX EDI,word ptr [RBX + 0x70]\nCALL 0x00403a70\nMOV RCX,RAX\nMOVZX R10D,byte ptr [0x0062f004]\nMOVZX R11D,byte ptr [0x0062f005]\nMOV ESI,0x41c872\nMOV EAX,0x0\nMOV RDI,R12\nMOV RDX,R13\nMOV R8D,R15D\nMOV R9D,EBP\nPUSH R11\nPUSH R10\nCALL 0x00402ba0\nADD RSP,0x10\nTEST EBP,EBP\nJNZ 0x00403911\nJMP 0x00403901\nMOV EDI,0x41c7e1\nMOV ESI,0x41c703\nMOV EDX,0x1a6\nMOV ECX,0x41c7f2\nCALL 0x00402a40\nMOV EDI,0x41c81a\nMOV ESI,0x41c703\nMOV EDX,0x1a7\nMOV ECX,0x41c7f2\nCALL 0x00402a40\n'
p3238
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec b8 00 00 00\n48 89 f3\n49 89 fe\nf6 05 f2 b9 22 00 04\n0f 85 9f 02 00 00\n0f b7 43 70\n83 f8 06\n75 07\ne8 fe 03 00 00\neb 15\n48 8b 43 58\n48 85 c0\n74 f0\n48 63 0d d4 9d 22 00\n48 39 c8\n7f e4\n41 8b 7e 2c\ne8 ce fd ff ff\n8b 43 58\n89 05 bd 9d 22 00\n48 8b 83 80 00 00 00\n48 89 44 24 30\n0f b7 43 70\n83 c0 fe\n0f b7 c0\n83 f8 0b\n77 71\nff 24 c5 00 c5 41 00\n8b 7b 40\n48 8b 73 38\ne8 b7 43 00 00\ne9 23 02 00 00\n48 89 df\ne8 ca 03 00 00\nbf 01 00 00 00\ne8 90 43 00 00\ne9 0c 02 00 00\n48 83 7b 58 00\n74 d1\n48 8b 7b 30\ne8 5b 04 00 00\n48 8b 73 38\n84 c0\n75 1b\n8b 7b 40\ne8 7b 43 00 00\neb 20\n48 8b 7b 30\ne8 40 04 00 00\n84 c0\n74 13\n48 8b 73 38\nbf 28 00 00 00\ne8 5e 43 00 00\ne9 ca 01 00 00\n0f b7 43 70\n89 c1\n81 e1 fe ff 00 00\n83 f9 0a\n75 29\n80 3d 95 b8 22 00 00\n0f 85 be 02 00 00\n0f b7 c0\n83 f8 0b\n8b 05 87 b8 22 00\n74 08\n85 c0\n0f 85 c1 02 00 00\n89 44 24 0c\neb 68\n48 8d 73 78\n66 c7 05 66 b8 22 00 01 01\n48 8d 7c 24 28\nba 90 00 00 00\ne8 23 f4 ff ff\n8b 44 24 40\n89 44 24 0c\n89 05 4d b8 22 00\n85 c0\n75 36\n31 ff\nbe 47 c8 41 00\nba 05 00 00 00\ne8 40 f1 ff ff\n48 89 c5\n8b 35 d3 b8 22 00\n48 8b 53 38\n31 ff\ne8 ac 2a 01 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ea\ne8 9b f5 ff ff\n8b 44 24 0c\n8b 4b 58\n89 0d fe b7 22 00\n85 c0\n74 25\n48 8b 73 38\n48 8d 93 08 01 00 00\n48 8d 7c 24 0c\n48 8d 4c 24 28\n45 31 c0\ne8 3d 4a 00 00\n84 c0\n0f 84 f6 00 00 00\nb8 00 f0 00 00\n23 44 24 0c\n41 bf 01 00 00 00\n3d 00 40 00 00\n75 1e\n0f b7 43 70\n83 f8 0b\n75 32\nba 01 00 00 00\n4c 89 f7\n48 89 de\ne8 86 63 01 00\ne9 c2 00 00 00\n0f b7 4b 70\nff c9\n45 31 ff\n0f b7 c1\n83 f8 05\n77 0c\nb0 23\nd2 e8\n24 01\n44 0f b6 f8\n75 c5\n48 63 0d c1 b7 22 00\n31 f6\n48 85 c9\n78 27\n48 39 4b 58\n7c 21\nba 04 00 00 00\n4c 89 f7\n48 89 de\ne8 40 63 01 00\n48 63 0d 9d b7 22 00\n31 f6\n48 39 4b 58\n40 0f 9f c6\n0f b7 4b 70\n83 f9 01\n0f 94 c2\n80 3d 7e b7 22 00 00\n0f 94 c0\n20 c2\n83 f9 06\n0f 95 c1\n08 c1\n30 d1\nbd 01 00 00 00\n80 f9 01\n75 15\n48 63 05 66 b7 22 00\n48 39 43 58\nb8 01 00 00 00\n0f 4c f0\n89 f5\nf6 05 89 b7 22 00 04\n0f 85 cf 00 00 00\n85 ed\n75 10\n48 8d 54 24 28\n4c 89 f7\n48 89 de\ne8 9f 02 00 00\n0f b7 43 70\n83 f8 06\n75 07\nc6 05 ff b6 22 00 00\n48 81 c4 b8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 05 26 a5 22 00\n48 89 44 24 20\n8b 35 67 b7 22 00\n48 8b 53 38\n31 ff\ne8 40 29 01 00\n48 89 44 24 18\n0f b7 7b 70\ne8 12 01 00 00\n48 89 44 24 10\n44 8b 6b 58\n44 8b 3d 1a 9b 22 00\n8b 35 38 b7 22 00\n48 8b 53 38\nbf 01 00 00 00\ne8 0e 29 01 00\n49 89 c4\n8b 35 21 b7 22 00\n48 8b 53 30\nbf 02 00 00 00\ne8 f7 28 01 00\n48 89 c5\nbe 79 c7 41 00\nb8 00 00 00 00\n48 8b 7c 24 20\n48 8b 54 24 18\n48 8b 4c 24 10\n45 89 e8\n45 89 f9\n55\n41 54\ne8 dd f1 ff ff\n48 83 c4 10\ne9 c8 fc ff ff\n4c 8b 25 8d a4 22 00\n8b 35 d3 b6 22 00\n48 8b 53 38\n31 ff\ne8 ac 28 01 00\n49 89 c5\n0f b7 7b 70\ne8 80 00 00 00\n48 89 c1\n44 0f b6 15 09 b6 22 00\n44 0f b6 1d 02 b6 22 00\nbe 72 c8 41 00\nb8 00 00 00 00\n4c 89 e7\n4c 89 ea\n45 89 f8\n41 89 e9\n41 53\n41 52\ne8 7e f1 ff ff\n48 83 c4 10\n85 ed\n0f 85 e3 fe ff ff\ne9 ce fe ff ff\nbf e1 c7 41 00\nbe 03 c7 41 00\nba a6 01 00 00\nb9 f2 c7 41 00\ne8 f4 ef ff ff\nbf 1a c8 41 00\nbe 03 c7 41 00\nba a7 01 00 00\nb9 f2 c7 41 00\ne8 db ef ff ff\n'
p3239
S'.text:0000000000403670\n.text:0000000000403671\n.text:0000000000403673\n.text:0000000000403675\n.text:0000000000403677\n.text:0000000000403679\n.text:000000000040367a\n.text:0000000000403681\n.text:0000000000403684\n.text:0000000000403687\n.text:000000000040368e\n.text:0000000000403694\n.text:0000000000403698\n.text:000000000040369b\n.text:000000000040369d\n.text:00000000004036a2\n.text:00000000004036a4\n.text:00000000004036a8\n.text:00000000004036ab\n.text:00000000004036ad\n.text:00000000004036b4\n.text:00000000004036b7\n.text:00000000004036b9\n.text:00000000004036bd\n.text:00000000004036c2\n.text:00000000004036c5\n.text:00000000004036cb\n.text:00000000004036d2\n.text:00000000004036d7\n.text:00000000004036db\n.text:00000000004036de\n.text:00000000004036e1\n.text:00000000004036e4\n.text:00000000004036e6\n.text:00000000004036ed\n.text:00000000004036f0\n.text:00000000004036f4\n.text:00000000004036f9\n.text:00000000004036fe\n.text:0000000000403701\n.text:0000000000403706\n.text:000000000040370b\n.text:0000000000403710\n.text:0000000000403715\n.text:000000000040371a\n.text:000000000040371c\n.text:0000000000403720\n.text:0000000000403725\n.text:0000000000403729\n.text:000000000040372b\n.text:000000000040372d\n.text:0000000000403730\n.text:0000000000403735\n.text:0000000000403737\n.text:000000000040373b\n.text:0000000000403740\n.text:0000000000403742\n.text:0000000000403744\n.text:0000000000403748\n.text:000000000040374d\n.text:0000000000403752\n.text:0000000000403757\n.text:000000000040375b\n.text:000000000040375d\n.text:0000000000403763\n.text:0000000000403766\n.text:0000000000403768\n.text:000000000040376f\n.text:0000000000403775\n.text:0000000000403778\n.text:000000000040377b\n.text:0000000000403781\n.text:0000000000403783\n.text:0000000000403785\n.text:000000000040378b\n.text:000000000040378f\n.text:0000000000403791\n.text:0000000000403795\n.text:000000000040379e\n.text:00000000004037a3\n.text:00000000004037a8\n.text:00000000004037ad\n.text:00000000004037b1\n.text:00000000004037b5\n.text:00000000004037bb\n.text:00000000004037bd\n.text:00000000004037bf\n.text:00000000004037c1\n.text:00000000004037c6\n.text:00000000004037cb\n.text:00000000004037d0\n.text:00000000004037d3\n.text:00000000004037d9\n.text:00000000004037dd\n.text:00000000004037df\n.text:00000000004037e4\n.text:00000000004037e7\n.text:00000000004037e9\n.text:00000000004037eb\n.text:00000000004037ed\n.text:00000000004037f0\n.text:00000000004037f5\n.text:00000000004037f9\n.text:00000000004037fc\n.text:0000000000403802\n.text:0000000000403804\n.text:0000000000403806\n.text:000000000040380a\n.text:0000000000403811\n.text:0000000000403816\n.text:000000000040381b\n.text:000000000040381e\n.text:0000000000403823\n.text:0000000000403825\n.text:000000000040382b\n.text:0000000000403830\n.text:0000000000403834\n.text:000000000040383a\n.text:000000000040383f\n.text:0000000000403841\n.text:0000000000403845\n.text:0000000000403848\n.text:000000000040384a\n.text:000000000040384f\n.text:0000000000403852\n.text:0000000000403855\n.text:000000000040385a\n.text:000000000040385f\n.text:0000000000403863\n.text:0000000000403865\n.text:0000000000403868\n.text:000000000040386b\n.text:000000000040386e\n.text:0000000000403870\n.text:0000000000403872\n.text:0000000000403874\n.text:0000000000403876\n.text:000000000040387a\n.text:000000000040387c\n.text:0000000000403883\n.text:0000000000403885\n.text:0000000000403888\n.text:000000000040388a\n.text:000000000040388e\n.text:0000000000403890\n.text:0000000000403895\n.text:0000000000403898\n.text:000000000040389b\n.text:00000000004038a0\n.text:00000000004038a7\n.text:00000000004038a9\n.text:00000000004038ad\n.text:00000000004038b1\n.text:00000000004038b5\n.text:00000000004038b8\n.text:00000000004038bb\n.text:00000000004038c2\n.text:00000000004038c5\n.text:00000000004038c7\n.text:00000000004038ca\n.text:00000000004038cd\n.text:00000000004038cf\n.text:00000000004038d1\n.text:00000000004038d6\n.text:00000000004038d9\n.text:00000000004038db\n.text:00000000004038e2\n.text:00000000004038e6\n.text:00000000004038eb\n.text:00000000004038ee\n.text:00000000004038f0\n.text:00000000004038f7\n.text:00000000004038fd\n.text:00000000004038ff\n.text:0000000000403901\n.text:0000000000403906\n.text:0000000000403909\n.text:000000000040390c\n.text:0000000000403911\n.text:0000000000403915\n.text:0000000000403918\n.text:000000000040391a\n.text:0000000000403921\n.text:0000000000403928\n.text:0000000000403929\n.text:000000000040392b\n.text:000000000040392d\n.text:000000000040392f\n.text:0000000000403931\n.text:0000000000403932\n.text:0000000000403933\n.text:000000000040393a\n.text:000000000040393f\n.text:0000000000403945\n.text:0000000000403949\n.text:000000000040394b\n.text:0000000000403950\n.text:0000000000403955\n.text:0000000000403959\n.text:000000000040395e\n.text:0000000000403963\n.text:0000000000403967\n.text:000000000040396e\n.text:0000000000403974\n.text:0000000000403978\n.text:000000000040397d\n.text:0000000000403982\n.text:0000000000403985\n.text:000000000040398b\n.text:000000000040398f\n.text:0000000000403994\n.text:0000000000403999\n.text:000000000040399c\n.text:00000000004039a1\n.text:00000000004039a6\n.text:00000000004039ab\n.text:00000000004039b0\n.text:00000000004039b5\n.text:00000000004039b8\n.text:00000000004039bb\n.text:00000000004039bc\n.text:00000000004039be\n.text:00000000004039c3\n.text:00000000004039c7\n.text:00000000004039cc\n.text:00000000004039d3\n.text:00000000004039d9\n.text:00000000004039dd\n.text:00000000004039df\n.text:00000000004039e4\n.text:00000000004039e7\n.text:00000000004039eb\n.text:00000000004039f0\n.text:00000000004039f3\n.text:00000000004039fb\n.text:0000000000403a03\n.text:0000000000403a08\n.text:0000000000403a0d\n.text:0000000000403a10\n.text:0000000000403a13\n.text:0000000000403a16\n.text:0000000000403a19\n.text:0000000000403a1b\n.text:0000000000403a1d\n.text:0000000000403a22\n.text:0000000000403a26\n.text:0000000000403a28\n.text:0000000000403a2e\n.text:0000000000403a33\n.text:0000000000403a38\n.text:0000000000403a3d\n.text:0000000000403a42\n.text:0000000000403a47\n.text:0000000000403a4c\n.text:0000000000403a51\n.text:0000000000403a56\n.text:0000000000403a5b\n.text:0000000000403a60\n'
p3240
tp3241
sS'bc_init_controlinfo'
p3242
(S'\n__stdcall bc_init_controlinfo(buildcmd_control * ctl, size_t headroom)\n'
p3243
V\u000aBC_INIT_STATUS bc_init_controlinfo(buildcmd_control *ctl,size_t headroom)\u000a\u000a{\u000a  BC_INIT_STATUS BVar1;\u000a  size_t sVar2;\u000a  size_t sVar3;\u000a  ulong uVar4;\u000a  \u000a  sVar2 = bc_size_of_environment();\u000a  ctl->posix_arg_size_min = 0x1000;\u000a  sVar3 = bc_get_arg_max();\u000a  ctl->posix_arg_size_max = sVar3;\u000a  ctl->exit_if_size_exceeded = 0;\u000a  BVar1 = BC_INIT_ENV_TOO_BIG;\u000a  if ((sVar2 <= sVar3) && (BVar1 = BC_INIT_CANNOT_ACCOMODATE_HEADROOM, sVar2 + headroom < sVar3)) {\u000a    uVar4 = (sVar3 - sVar2) - headroom;\u000a    ctl->posix_arg_size_max = uVar4;\u000a    sVar2 = (uVar4 >> 3) - 2;\u000a    ctl->max_arg_count = sVar2;\u000a    if (sVar2 == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("ctl->max_arg_count > 0","buildcmd.c",0x210,\u000a                    "enum BC_INIT_STATUS bc_init_controlinfo(struct buildcmd_control *, size_t)");\u000a    }\u000a    *(undefined4 *)&ctl->rplen = 0;\u000a    *(undefined4 *)((long)&ctl->rplen + 4) = 0;\u000a    *(undefined4 *)&ctl->replace_pat = 0;\u000a    *(undefined4 *)((long)&ctl->replace_pat + 4) = 0;\u000a    ctl->initial_argc = 0;\u000a    ctl->exec_callback = cb_exec_noop;\u000a    *(undefined4 *)&ctl->lines_per_exec = 0;\u000a    *(undefined4 *)((long)&ctl->lines_per_exec + 4) = 0;\u000a    *(undefined4 *)&ctl->args_per_exec = 0;\u000a    *(undefined4 *)((long)&ctl->args_per_exec + 4) = 0;\u000a    ctl->arg_max = ctl->posix_arg_size_max;\u000a    BVar1 = BC_INIT_OK;\u000a  }\u000a  return BVar1;\u000a}\u000a\u000a
p3244
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV RBX,RDI\nCALL 0x0040e200\nMOV R15,RAX\nMOV qword ptr [RBX + 0x10],0x1000\nCALL 0x0040e1e0\nMOV RCX,RAX\nMOV qword ptr [RBX + 0x8],RCX\nMOV dword ptr [RBX],0x0\nMOV EAX,0x1\nMOV RDX,RCX\nSUB RDX,R15\nJC 0x0040e2d1\nADD R15,R14\nMOV EAX,0x2\nCMP R15,RCX\nJNC 0x0040e2d1\nSUB RDX,R14\nMOV qword ptr [RBX + 0x8],RDX\nSHR RDX,0x3\nADD RDX,-0x2\nMOV qword ptr [RBX + 0x20],RDX\nJZ 0x0040e2d7\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX + 0x28],XMM0\nMOV qword ptr [RBX + 0x38],0x0\nMOV qword ptr [RBX + 0x40],0x40e2f0\nMOVUPS xmmword ptr [RBX + 0x48],XMM0\nMOV RAX,qword ptr [RBX + 0x8]\nMOV qword ptr [RBX + 0x18],RAX\nXOR EAX,EAX\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOV EDI,0x421df7\nMOV ESI,0x421c75\nMOV EDX,0x210\nMOV ECX,0x421e0e\nCALL 0x00402a40\n'
p3245
S'41 57\n41 56\n53\n49 89 f6\n48 89 fb\ne8 a0 ff ff ff\n49 89 c7\n48 c7 43 10 00 10 00 00\ne8 70 ff ff ff\n48 89 c1\n48 89 4b 08\nc7 03 00 00 00 00\nb8 01 00 00 00\n48 89 ca\n4c 29 fa\n72 47\n4d 01 f7\nb8 02 00 00 00\n49 39 cf\n73 3a\n4c 29 f2\n48 89 53 08\n48 c1 ea 03\n48 83 c2 fe\n48 89 53 20\n74 2b\n0f 57 c0\n0f 11 43 28\n48 c7 43 38 00 00 00 00\n48 c7 43 40 f0 e2 40 00\n0f 11 43 48\n48 8b 43 08\n48 89 43 18\n31 c0\n5b\n41 5e\n41 5f\nc3\nbf f7 1d 42 00\nbe 75 1c 42 00\nba 10 02 00 00\nb9 0e 1e 42 00\ne8 50 47 ff ff\n'
p3246
S'.text:000000000040e250\n.text:000000000040e252\n.text:000000000040e254\n.text:000000000040e255\n.text:000000000040e258\n.text:000000000040e25b\n.text:000000000040e260\n.text:000000000040e263\n.text:000000000040e26b\n.text:000000000040e270\n.text:000000000040e273\n.text:000000000040e277\n.text:000000000040e27d\n.text:000000000040e282\n.text:000000000040e285\n.text:000000000040e288\n.text:000000000040e28a\n.text:000000000040e28d\n.text:000000000040e292\n.text:000000000040e295\n.text:000000000040e297\n.text:000000000040e29a\n.text:000000000040e29e\n.text:000000000040e2a2\n.text:000000000040e2a6\n.text:000000000040e2aa\n.text:000000000040e2ac\n.text:000000000040e2af\n.text:000000000040e2b3\n.text:000000000040e2bb\n.text:000000000040e2c3\n.text:000000000040e2c7\n.text:000000000040e2cb\n.text:000000000040e2cf\n.text:000000000040e2d1\n.text:000000000040e2d2\n.text:000000000040e2d4\n.text:000000000040e2d6\n.text:000000000040e2d7\n.text:000000000040e2dc\n.text:000000000040e2e1\n.text:000000000040e2e6\n.text:000000000040e2eb\n'
p3247
tp3248
sS'mb_width_aux'
p3249
(S'\n__stdcall mb_width_aux()\n'
p3250
V\u000aint mb_width_aux(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  wint_t __wc;\u000a  \u000a  uVar1 = wcwidth(__wc);\u000a  if ((int)uVar1 < 0) {\u000a    iVar2 = iswcntrl(__wc);\u000a    uVar1 = (uint)(iVar2 == 0);\u000a  }\u000a  return (int)uVar1;\u000a}\u000a\u000a
p3251
S'PUSH RBX\nMOV EBX,EDI\nCALL 0x00402c40\nTEST EAX,EAX\nJNS 0x0041c11c\nMOV EDI,EBX\nCALL 0x00402830\nMOV ECX,EAX\nXOR EAX,EAX\nTEST ECX,ECX\nSETZ AL\nPOP RBX\nRET\n'
p3252
S'53\n89 fb\ne8 38 6b fe ff\n85 c0\n79 10\n89 df\ne8 1d 67 fe ff\n89 c1\n31 c0\n85 c9\n0f 94 c0\n5b\nc3\n'
p3253
S'.text:000000000041c100\n.text:000000000041c101\n.text:000000000041c103\n.text:000000000041c108\n.text:000000000041c10a\n.text:000000000041c10c\n.text:000000000041c10e\n.text:000000000041c113\n.text:000000000041c115\n.text:000000000041c117\n.text:000000000041c119\n.text:000000000041c11c\n.text:000000000041c11d\n'
p3254
tp3255
sS'quotearg_n_mem'
p3256
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p3257
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p3258
S'MOV ECX,0x62e690\nJMP 0x004160a0\n'
p3259
S'b9 90 e6 62 00\ne9 36 fe ff ff\n'
p3260
S'.text:0000000000416260\n.text:0000000000416265\n'
p3261
tp3262
sS'insert_primary_noarg'
p3263
(S'\n__stdcall insert_primary_noarg(parser_table * entry)\n'
p3264
V\u000apredicate * insert_primary_noarg(parser_table *entry)\u000a\u000a{\u000a  predicate *ppVar1;\u000a  \u000a  ppVar1 = insert_primary(entry,(char *)0x0);\u000a  return ppVar1;\u000a}\u000a\u000a
p3265
S'XOR ESI,ESI\nJMP 0x00407730\n'
p3266
S'31 f6\neb cc\n'
p3267
S'.text:0000000000407760\n.text:0000000000407762\n'
p3268
tp3269
sS'entry_free'
p3270
(S'\n__stdcall entry_free(void * pv)\n'
p3271
V\u000avoid entry_free(void *pv)\u000a\u000a{\u000a  int iVar1;\u000a  uint *puVar2;\u000a  void **name;\u000a  \u000a  if (*(FILE **)((long)pv + 0x18) != (FILE *)0x0) {\u000a    iVar1 = fclose(*(FILE **)((long)pv + 0x18));\u000a    if (iVar1 != 0) {\u000a      puVar2 = (uint *)__errno_location();\u000a      name = (void **)(ulong)*puVar2;\u000a      fatal_nontarget_file_error((char *)name);\u000a      free(*name);\u000a      hash_free((Hash_table *)name[1]);\u000a      return;\u000a    }\u000a  }\u000a  free(*(void **)((long)pv + 0x10));\u000a  free(pv);\u000a  return;\u000a}\u000a\u000a
p3272
S'PUSH RBX\nMOV RBX,RDI\nMOV RDI,qword ptr [RBX + 0x18]\nTEST RDI,RDI\nJZ 0x00408b16\nCALL 0x004028c0\nTEST EAX,EAX\nJNZ 0x00408b28\nMOV RDI,qword ptr [RBX + 0x10]\nCALL 0x00402710\nMOV RDI,RBX\nPOP RBX\nJMP 0x00402710\nCALL 0x00402770\nMOV EDI,dword ptr [RAX]\nMOV RSI,qword ptr [RBX + 0x10]\nCALL 0x004089c0\nNOP dword ptr [RAX + RAX*0x1]\n'
p3273
S'53\n48 89 fb\n48 8b 7b 18\n48 85 ff\n74 09\ne8 ae 9d ff ff\n85 c0\n75 12\n48 8b 7b 10\ne8 f1 9b ff ff\n48 89 df\n5b\ne9 e8 9b ff ff\ne8 43 9c ff ff\n8b 38\n48 8b 73 10\ne8 88 fe ff ff\n0f 1f 84 00 00 00 00 00\n'
p3274
S'.text:0000000000408b00\n.text:0000000000408b01\n.text:0000000000408b04\n.text:0000000000408b08\n.text:0000000000408b0b\n.text:0000000000408b0d\n.text:0000000000408b12\n.text:0000000000408b14\n.text:0000000000408b16\n.text:0000000000408b1a\n.text:0000000000408b1f\n.text:0000000000408b22\n.text:0000000000408b23\n.text:0000000000408b28\n.text:0000000000408b2d\n.text:0000000000408b2f\n.text:0000000000408b33\n.text:0000000000408b38\n'
p3275
tp3276
sS'parse_octal_escape'
p3277
(S'\n__stdcall parse_octal_escape(char * p, size_t * consumed)\n'
p3278
V\u000achar parse_octal_escape(char *p,size_t *consumed)\u000a\u000a{\u000a  char cVar1;\u000a  _Bool _Var2;\u000a  char cVar3;\u000a  long lVar4;\u000a  \u000a  lVar4 = 0;\u000a  cVar3 = 0;\u000a  do {\u000a    cVar1 = p[lVar4];\u000a    _Var2 = is_octal_char();\u000a    if (_Var2 == false) break;\u000a    cVar3 = cVar1 + -0x30 + cVar3 * '\u005cb';\u000a    lVar4 = lVar4 + 1;\u000a  } while ((int)lVar4 < 3);\u000a  *consumed = lVar4 - 1;\u000a  return cVar3;\u000a}\u000a\u000a
p3279
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nXOR R13D,R13D\nXOR R12D,R12D\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVSX EBX,byte ptr [R15 + R13*0x1]\nMOV EDI,EBX\nCALL 0x004092d0\nTEST AL,AL\nJZ 0x0040931e\nLEA R12D,[RBX + R12*0x8 + -0x30]\nINC R13\nCMP R13D,0x3\nJL 0x00409300\nDEC R13\nMOV qword ptr [R14],R13\nMOV EAX,R12D\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p3280
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 f6\n49 89 ff\n45 31 ed\n45 31 e4\n66 66 2e 0f 1f 84 00 00 00 00 00\n43 0f be 1c 2f\n89 df\ne8 c4 ff ff ff\n84 c0\n74 0e\n46 8d 64 e3 d0\n49 ff c5\n41 83 fd 03\n7c e2\n49 ff cd\n4d 89 2e\n44 89 e0\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p3281
S'.text:00000000004092e0\n.text:00000000004092e2\n.text:00000000004092e4\n.text:00000000004092e6\n.text:00000000004092e8\n.text:00000000004092e9\n.text:00000000004092ec\n.text:00000000004092ef\n.text:00000000004092f2\n.text:00000000004092f5\n.text:0000000000409300\n.text:0000000000409305\n.text:0000000000409307\n.text:000000000040930c\n.text:000000000040930e\n.text:0000000000409310\n.text:0000000000409315\n.text:0000000000409318\n.text:000000000040931c\n.text:000000000040931e\n.text:0000000000409321\n.text:0000000000409324\n.text:0000000000409327\n.text:0000000000409328\n.text:000000000040932a\n.text:000000000040932c\n.text:000000000040932e\n.text:0000000000409330\n'
p3282
tp3283
sS'pred_prune'
p3284
(S'\n__stdcall pred_prune(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p3285
V\u000a_Bool pred_prune(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  if (options.do_dir_first != false) {\u000a    if (state.have_stat == false) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("state.have_stat","pred.c",0x39b,\u000a                    "_Bool pred_prune(const char *, struct stat *, struct predicate *)");\u000a    }\u000a    if ((stat_buf != (stat *)0x0) && ((stat_buf->st_mode & 0xf000) == 0x4000)) {\u000a      state.stop_at_current_level = true;\u000a    }\u000a  }\u000a  return true;\u000a}\u000a\u000a
p3286
S'CMP byte ptr [0x0062f040],0x0\nJZ 0x0040462d\nCMP byte ptr [0x0062f004],0x0\nJZ 0x00404630\nTEST RSI,RSI\nJZ 0x0040462d\nMOV EAX,0xf000\nAND EAX,dword ptr [RSI + 0x18]\nCMP EAX,0x4000\nJNZ 0x0040462d\nMOV byte ptr [0x0062f020],0x1\nMOV AL,0x1\nRET\nPUSH RAX\nMOV EDI,0x41c7e2\nMOV ESI,0x41cd0c\nMOV EDX,0x39b\nMOV ECX,0x41ceea\nCALL 0x00402a40\n'
p3287
S'80 3d 39 aa 22 00 00\n74 24\n80 3d f4 a9 22 00 00\n74 1e\n48 85 f6\n74 16\nb8 00 f0 00 00\n23 46 18\n3d 00 40 00 00\n75 07\nc6 05 f3 a9 22 00 01\nb0 01\nc3\n50\nbf e2 c7 41 00\nbe 0c cd 41 00\nba 9b 03 00 00\nb9 ea ce 41 00\ne8 f6 e3 ff ff\n'
p3288
S'.text:0000000000404600\n.text:0000000000404607\n.text:0000000000404609\n.text:0000000000404610\n.text:0000000000404612\n.text:0000000000404615\n.text:0000000000404617\n.text:000000000040461c\n.text:000000000040461f\n.text:0000000000404624\n.text:0000000000404626\n.text:000000000040462d\n.text:000000000040462f\n.text:0000000000404630\n.text:0000000000404631\n.text:0000000000404636\n.text:000000000040463b\n.text:0000000000404640\n.text:0000000000404645\n'
p3289
tp3290
sS'setmntent'
p3291
(S'\n__stdcall setmntent()\n'
p3292
V\u000avoid setmntent(void)\u000a\u000a{\u000a  (*(code *)PTR_setmntent_0062d2e8)();\u000a  return;\u000a}\u000a\u000a
p3293
S'JMP qword ptr [0x0062d2e8]\n'
p3294
S'ff 25 52 a6 22 00\n'
p3295
S'.plt:0000000000402c90\n'
p3296
tp3297
sS'xzalloc'
p3298
(S'\n__stdcall xzalloc(size_t s)\n'
p3299
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p3300
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00417220\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00402a80\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p3301
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 54 b7 fe ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p3302
S'.text:0000000000417310\n.text:0000000000417312\n.text:0000000000417313\n.text:0000000000417314\n.text:0000000000417317\n.text:000000000041731c\n.text:000000000041731f\n.text:0000000000417321\n.text:0000000000417324\n.text:0000000000417327\n.text:000000000041732c\n.text:000000000041732f\n.text:0000000000417333\n.text:0000000000417334\n.text:0000000000417336\n'
p3303
tp3304
sS'i_ring_empty'
p3305
(S'\n__stdcall i_ring_empty(I_ring * ir)\n'
p3306
V\u000a_Bool i_ring_empty(I_ring *ir)\u000a\u000a{\u000a  return ir->ir_empty;\u000a}\u000a\u000a
p3307
S'MOV AL,byte ptr [RDI + 0x1c]\nRET\n'
p3308
S'8a 47 1c\nc3\n'
p3309
S'.text:000000000041bc40\n.text:000000000041bc43\n'
p3310
tp3311
sS'pred_name_common'
p3312
(S'\n__stdcall pred_name_common(char * pathname, char * str)\n'
p3313
V\u000a_Bool pred_name_common(char *pathname,char *str)\u000a\u000a{\u000a  int iVar1;\u000a  char *file;\u000a  int __flags;\u000a  \u000a  file = base_name(pathname);\u000a  strip_trailing_slashes(file);\u000a  iVar1 = fnmatch(str,file,__flags);\u000a  free(file);\u000a  return (_Bool)(iVar1 == 0);\u000a}\u000a\u000a
p3314
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBX,RSI\nCALL 0x0040ffa0\nMOV RBP,RAX\nMOV RDI,RBP\nCALL 0x00410120\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00402a60\nTEST EAX,EAX\nSETZ BL\nMOV RDI,RBP\nCALL 0x00402710\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p3315
S'55\n41 56\n53\n41 89 d6\n48 89 f3\ne8 b1 b3 00 00\n48 89 c5\n48 89 ef\ne8 26 b5 00 00\n48 89 df\n48 89 ee\n44 89 f2\ne8 58 de ff ff\n85 c0\n0f 94 c3\n48 89 ef\ne8 fb da ff ff\n89 d8\n5b\n41 5e\n5d\nc3\n'
p3316
S'.text:0000000000404be0\n.text:0000000000404be1\n.text:0000000000404be3\n.text:0000000000404be4\n.text:0000000000404be7\n.text:0000000000404bea\n.text:0000000000404bef\n.text:0000000000404bf2\n.text:0000000000404bf5\n.text:0000000000404bfa\n.text:0000000000404bfd\n.text:0000000000404c00\n.text:0000000000404c03\n.text:0000000000404c08\n.text:0000000000404c0a\n.text:0000000000404c0d\n.text:0000000000404c10\n.text:0000000000404c15\n.text:0000000000404c17\n.text:0000000000404c18\n.text:0000000000404c1a\n.text:0000000000404c1b\n'
p3317
tp3318
sS'blank_rtrim'
p3319
(S'\n__stdcall blank_rtrim(char * str, char * buf)\n'
p3320
V\u000achar * blank_rtrim(char *str,char *buf)\u000a\u000a{\u000a  bool bVar1;\u000a  size_t sVar2;\u000a  int iVar3;\u000a  long lVar4;\u000a  \u000a  if (str == (char *)0x0) {\u000a    buf = (char *)0x0;\u000a  }\u000a  else {\u000a    strcpy(buf,str);\u000a    sVar2 = strlen(buf);\u000a    iVar3 = (int)sVar2 + -1;\u000a    if (-1 < iVar3) {\u000a      lVar4 = (long)iVar3;\u000a      do {\u000a        iVar3 = (int)lVar4;\u000a        if ((buf[lVar4] != ' ') && (buf[lVar4] != '\u005ct')) break;\u000a        iVar3 = (int)(lVar4 + -1);\u000a        bVar1 = 0 < lVar4;\u000a        lVar4 = lVar4 + -1;\u000a      } while (bVar1);\u000a    }\u000a    buf[(long)iVar3 + 1] = 0;\u000a  }\u000a  return buf;\u000a}\u000a\u000a
p3321
S'PUSH RBX\nMOV RBX,RSI\nMOV RAX,RDI\nTEST RAX,RAX\nJZ 0x00404d6f\nMOV RDI,RBX\nMOV RSI,RAX\nCALL 0x004027c0\nMOV RDI,RBX\nCALL 0x00402930\nMOV ECX,0xffffffff\nADD RCX,RAX\nTEST ECX,ECX\nJS 0x00404d65\nMOVSXD RCX,ECX\nNOP\nMOVZX EAX,byte ptr [RBX + RCX*0x1]\nCMP AL,0x20\nJZ 0x00404d5c\nCMP AL,0x9\nJNZ 0x00404d65\nTEST RCX,RCX\nLEA RCX,[RCX + -0x1]\nJG 0x00404d50\nMOVSXD RAX,ECX\nMOV byte ptr [RBX + RAX*0x1 + 0x1],0x0\nJMP 0x00404d71\nXOR EBX,EBX\nMOV RAX,RBX\nPOP RBX\nRET\n'
p3322
S'53\n48 89 f3\n48 89 f8\n48 85 c0\n74 43\n48 89 df\n48 89 c6\ne8 89 da ff ff\n48 89 df\ne8 f1 db ff ff\nb9 ff ff ff ff\n48 01 c1\n85 c9\n78 1a\n48 63 c9\n66 90\n0f b6 04 0b\n3c 20\n74 04\n3c 09\n75 09\n48 85 c9\n48 8d 49 ff\n7f eb\n48 63 c1\nc6 44 03 01 00\neb 02\n31 db\n48 89 d8\n5b\nc3\n'
p3323
S'.text:0000000000404d20\n.text:0000000000404d21\n.text:0000000000404d24\n.text:0000000000404d27\n.text:0000000000404d2a\n.text:0000000000404d2c\n.text:0000000000404d2f\n.text:0000000000404d32\n.text:0000000000404d37\n.text:0000000000404d3a\n.text:0000000000404d3f\n.text:0000000000404d44\n.text:0000000000404d47\n.text:0000000000404d49\n.text:0000000000404d4b\n.text:0000000000404d4e\n.text:0000000000404d50\n.text:0000000000404d54\n.text:0000000000404d56\n.text:0000000000404d58\n.text:0000000000404d5a\n.text:0000000000404d5c\n.text:0000000000404d5f\n.text:0000000000404d63\n.text:0000000000404d65\n.text:0000000000404d68\n.text:0000000000404d6d\n.text:0000000000404d6f\n.text:0000000000404d71\n.text:0000000000404d74\n.text:0000000000404d75\n'
p3324
tp3325
sS'set_option_defaults'
p3326
(S'\n__stdcall set_option_defaults(options * p)\n'
p3327
V\u000avoid set_option_defaults(options *p)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char *pcVar3;\u000a  undefined8 uVar4;\u000a  __syscall_slong_t _Var5;\u000a  timespec tVar6;\u000a  \u000a  pcVar3 = getenv("POSIXLY_CORRECT");\u000a  *(bool *)&p->posixly_correct = pcVar3 != (char *)0x0;\u000a  _Var1 = check_nofollow();\u000a  p->open_nofollow_available = _Var1;\u000a  p->regex_options = 0;\u000a  iVar2 = isatty(0);\u000a  *(bool *)&p->warnings = iVar2 != 0;\u000a  p->literal_control_chars = false;\u000a  if (p->posixly_correct != false) {\u000a    p->warnings = false;\u000a  }\u000a  p->do_dir_first = true;\u000a  p->explicit_depth = false;\u000a  *(undefined8 *)&p->maxdepth = 0xffffffffffffffff;\u000a  tVar6 = now();\u000a  _Var5 = SUB168((undefined  [16])tVar6 >> 0x40,0);\u000a  (p->start_time).tv_sec = SUB168((undefined  [16])tVar6,0);\u000a  (p->start_time).tv_nsec = _Var5;\u000a  (p->cur_day_start).tv_sec = SUB168((undefined  [16])tVar6,0) + 0xfffeae80;\u000a  (p->cur_day_start).tv_nsec = _Var5;\u000a  p->full_days = false;\u000a  *(undefined2 *)&p->stay_on_filesystem = 0;\u000a  iVar2 = 0x400;\u000a  if (p->posixly_correct != false) {\u000a    iVar2 = 0x200;\u000a  }\u000a  p->output_block_size = iVar2;\u000a  p->debug_options = 0;\u000a  p->optimisation_level = 2;\u000a  pcVar3 = getenv("FIND_BLOCK_SIZE");\u000a  if (pcVar3 != (char *)0x0) {\u000a    uVar4 = dcgettext(0,\u000a                      "The environment variable FIND_BLOCK_SIZE is not supported, the only thing that affects the block size is the POSIXLY_CORRECT environment variable"\u000a                      ,5);\u000a    error(1,0,uVar4,uVar4);\u000a  }\u000a  p->no_leaf_check = false;\u000a  set_follow_state(0);\u000a  p->err_quoting_style = locale_quoting_style;\u000a  return;\u000a}\u000a\u000a
p3328
S'PUSH RBX\nMOV RBX,RDI\nMOV EDI,0x41e86e\nCALL 0x00402700\nTEST RAX,RAX\nSETNZ byte ptr [RBX + 0x11]\nCALL 0x00407b90\nMOV byte ptr [RBX + 0x58],AL\nMOV dword ptr [RBX + 0x5c],0x0\nXOR EDI,EDI\nCALL 0x00402820\nTEST EAX,EAX\nSETNZ byte ptr [RBX + 0x10]\nMOV byte ptr [RBX + 0xf],0x0\nCMP byte ptr [RBX + 0x11],0x0\nJZ 0x0040879f\nMOV byte ptr [RBX + 0x10],0x0\nMOV byte ptr [RBX],0x1\nMOV byte ptr [RBX + 0x1],0x0\nMOV qword ptr [RBX + 0x4],-0x1\nCALL 0x00408840\nMOV qword ptr [RBX + 0x18],RAX\nMOV qword ptr [RBX + 0x20],RDX\nADD RAX,0xfffeae80\nMOV qword ptr [RBX + 0x28],RAX\nMOV qword ptr [RBX + 0x30],RDX\nMOV byte ptr [RBX + 0x38],0x0\nMOV word ptr [RBX + 0xd],0x0\nCMP byte ptr [RBX + 0x11],0x0\nMOV EAX,0x200\nMOV ECX,0x400\nCMOVNZ ECX,EAX\nMOV dword ptr [RBX + 0x3c],ECX\nMOV qword ptr [RBX + 0x40],0x0\nMOV word ptr [RBX + 0x68],0x2\nMOV EDI,0x41e87e\nCALL 0x00402700\nTEST RAX,RAX\nJZ 0x00408829\nXOR EDI,EDI\nMOV ESI,0x41e88e\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402d90\nMOV byte ptr [RBX + 0xc],0x0\nXOR EDI,EDI\nCALL 0x0040a6a0\nMOV dword ptr [RBX + 0x6c],0x8\nPOP RBX\nRET\n'
p3329
S'53\n48 89 fb\nbf 6e e8 41 00\ne8 92 9f ff ff\n48 85 c0\n0f 95 43 11\ne8 16 f4 ff ff\n88 43 58\nc7 43 5c 00 00 00 00\n31 ff\ne8 95 a0 ff ff\n85 c0\n0f 95 43 10\nc6 43 0f 00\n80 7b 11 00\n74 04\nc6 43 10 00\nc6 03 01\nc6 43 01 00\n48 c7 43 04 ff ff ff ff\ne8 8d 00 00 00\n48 89 43 18\n48 89 53 20\n48 05 80 ae fe ff\n48 89 43 28\n48 89 53 30\nc6 43 38 00\n66 c7 43 0d 00 00\n80 7b 11 00\nb8 00 02 00 00\nb9 00 04 00 00\n0f 45 c8\n89 4b 3c\n48 c7 43 40 00 00 00 00\n66 c7 43 68 02 00\nbf 7e e8 41 00\ne8 01 9f ff ff\n48 85 c0\n74 25\n31 ff\nbe 8e e8 41 00\nba 05 00 00 00\ne8 fb a0 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 67 a5 ff ff\nc6 43 0c 00\n31 ff\ne8 6c 1e 00 00\nc7 43 6c 08 00 00 00\n5b\nc3\n'
p3330
S'.text:0000000000408760\n.text:0000000000408761\n.text:0000000000408764\n.text:0000000000408769\n.text:000000000040876e\n.text:0000000000408771\n.text:0000000000408775\n.text:000000000040877a\n.text:000000000040877d\n.text:0000000000408784\n.text:0000000000408786\n.text:000000000040878b\n.text:000000000040878d\n.text:0000000000408791\n.text:0000000000408795\n.text:0000000000408799\n.text:000000000040879b\n.text:000000000040879f\n.text:00000000004087a2\n.text:00000000004087a6\n.text:00000000004087ae\n.text:00000000004087b3\n.text:00000000004087b7\n.text:00000000004087bb\n.text:00000000004087c1\n.text:00000000004087c5\n.text:00000000004087c9\n.text:00000000004087cd\n.text:00000000004087d3\n.text:00000000004087d7\n.text:00000000004087dc\n.text:00000000004087e1\n.text:00000000004087e4\n.text:00000000004087e7\n.text:00000000004087ef\n.text:00000000004087f5\n.text:00000000004087fa\n.text:00000000004087ff\n.text:0000000000408802\n.text:0000000000408804\n.text:0000000000408806\n.text:000000000040880b\n.text:0000000000408810\n.text:0000000000408815\n.text:0000000000408818\n.text:000000000040881d\n.text:000000000040881f\n.text:0000000000408821\n.text:0000000000408824\n.text:0000000000408829\n.text:000000000040882d\n.text:000000000040882f\n.text:0000000000408834\n.text:000000000040883b\n.text:000000000040883c\n'
p3331
tp3332
sS'quotearg_n_style'
p3333
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p3334
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p3335
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x004162d0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x004160a0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p3336
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p3337
S'.text:0000000000416290\n.text:0000000000416291\n.text:0000000000416293\n.text:0000000000416294\n.text:0000000000416298\n.text:000000000041629b\n.text:000000000041629d\n.text:00000000004162a2\n.text:00000000004162a5\n.text:00000000004162aa\n.text:00000000004162b1\n.text:00000000004162b3\n.text:00000000004162b6\n.text:00000000004162b9\n.text:00000000004162be\n.text:00000000004162c2\n.text:00000000004162c3\n.text:00000000004162c5\n.text:00000000004162c6\n'
p3338
tp3339
sS'hash_clear'
p3340
(S'\n__stdcall hash_clear(Hash_table * table)\n'
p3341
V\u000avoid hash_clear(Hash_table *table)\u000a\u000a{\u000a  void (*pVar1)(void *);\u000a  hash_entry *phVar2;\u000a  hash_entry *phVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar4 = table->bucket;\u000a  if (phVar4 < table->bucket_limit) {\u000a    do {\u000a      if (phVar4->data != (void *)0x0) {\u000a        pVar1 = table->data_freer;\u000a        phVar3 = phVar4->next;\u000a        while (phVar3 != (hash_entry *)0x0) {\u000a          if (pVar1 != (void (*)(void *))0x0) {\u000a            (*pVar1)(phVar3->data);\u000a          }\u000a          phVar3->data = (void *)0x0;\u000a          phVar2 = phVar3->next;\u000a          phVar3->next = table->free_entry_list;\u000a          table->free_entry_list = phVar3;\u000a          pVar1 = table->data_freer;\u000a          phVar3 = phVar2;\u000a        }\u000a        if (pVar1 != (void (*)(void *))0x0) {\u000a          (*pVar1)(phVar4->data);\u000a        }\u000a        *(undefined4 *)&phVar4->data = 0;\u000a        *(undefined4 *)((long)&phVar4->data + 4) = 0;\u000a        *(undefined4 *)&phVar4->next = 0;\u000a        *(undefined4 *)((long)&phVar4->next + 4) = 0;\u000a      }\u000a      phVar4 = phVar4 + 1;\u000a    } while (phVar4 < table->bucket_limit);\u000a  }\u000a  *(undefined4 *)&table->n_buckets_used = 0;\u000a  *(undefined4 *)((long)&table->n_buckets_used + 4) = 0;\u000a  *(undefined4 *)&table->n_entries = 0;\u000a  *(undefined4 *)((long)&table->n_entries + 4) = 0;\u000a  return;\u000a}\u000a\u000a
p3342
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x00410a4a\nJMP 0x00410aa5\nTEST CL,CL\nJZ 0x00410a39\nMOV RDI,qword ptr [R14]\nCALL RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R14],XMM0\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x00410aa5\nCMP qword ptr [R14],0x0\nJZ 0x00410a40\nMOV RBX,qword ptr [R14 + 0x8]\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nSETNZ CL\nTEST RBX,RBX\nJZ 0x00410a30\nNOP dword ptr CS:[RAX + RAX*0x1]\nTEST CL,0x1\nJZ 0x00410a7a\nMOV RDI,qword ptr [RBX]\nCALL RAX\nMOV qword ptr [RBX],0x0\nMOV RDX,qword ptr [RBX + 0x8]\nMOV RAX,qword ptr [R15 + 0x48]\nMOV qword ptr [RBX + 0x8],RAX\nMOV qword ptr [R15 + 0x48],RBX\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nSETNZ CL\nTEST RDX,RDX\nMOV RBX,RDX\nJNZ 0x00410a70\nJMP 0x00410a30\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R15 + 0x18],XMM0\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p3343
S'41 57\n41 56\n53\n49 89 ff\n4d 8b 37\n4d 3b 77 08\n72 29\ne9 7f 00 00 00\n84 c9\n74 05\n49 8b 3e\nff d0\n0f 57 c0\n41 0f 11 06\n49 83 c6 10\n4d 3b 77 08\n73 5b\n49 83 3e 00\n74 f0\n49 8b 5e 08\n49 8b 47 40\n48 85 c0\n0f 95 c1\n48 85 db\n74 cd\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\nf6 c1 01\n74 05\n48 8b 3b\nff d0\n48 c7 03 00 00 00 00\n48 8b 53 08\n49 8b 47 48\n48 89 43 08\n49 89 5f 48\n49 8b 47 40\n48 85 c0\n0f 95 c1\n48 85 d2\n48 89 d3\n75 cd\neb 8b\n0f 57 c0\n41 0f 11 47 18\n5b\n41 5e\n41 5f\nc3\n'
p3344
S'.text:0000000000410a10\n.text:0000000000410a12\n.text:0000000000410a14\n.text:0000000000410a15\n.text:0000000000410a18\n.text:0000000000410a1b\n.text:0000000000410a1f\n.text:0000000000410a21\n.text:0000000000410a30\n.text:0000000000410a32\n.text:0000000000410a34\n.text:0000000000410a37\n.text:0000000000410a39\n.text:0000000000410a3c\n.text:0000000000410a40\n.text:0000000000410a44\n.text:0000000000410a48\n.text:0000000000410a4a\n.text:0000000000410a4e\n.text:0000000000410a50\n.text:0000000000410a54\n.text:0000000000410a58\n.text:0000000000410a5b\n.text:0000000000410a5e\n.text:0000000000410a61\n.text:0000000000410a63\n.text:0000000000410a70\n.text:0000000000410a73\n.text:0000000000410a75\n.text:0000000000410a78\n.text:0000000000410a7a\n.text:0000000000410a81\n.text:0000000000410a85\n.text:0000000000410a89\n.text:0000000000410a8d\n.text:0000000000410a91\n.text:0000000000410a95\n.text:0000000000410a98\n.text:0000000000410a9b\n.text:0000000000410a9e\n.text:0000000000410aa1\n.text:0000000000410aa3\n.text:0000000000410aa5\n.text:0000000000410aa8\n.text:0000000000410aad\n.text:0000000000410aae\n.text:0000000000410ab0\n.text:0000000000410ab2\n'
p3345
tp3346
sS'dir_len'
p3347
(S'\n__stdcall dir_len(char * file)\n'
p3348
V\u000asize_t dir_len(char *file)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  char *pcVar3;\u000a  char *pcVar4;\u000a  \u000a  cVar2 = *file;\u000a  pcVar3 = last_component(file);\u000a  pcVar3 = pcVar3 + -(long)file;\u000a  do {\u000a    pcVar4 = pcVar3;\u000a    if (pcVar3 <= (char *)(ulong)(cVar2 == '/')) {\u000a      return (size_t)pcVar4;\u000a    }\u000a    pcVar1 = pcVar3 + (long)(file + -1);\u000a    pcVar3 = pcVar3 + -1;\u000a  } while (*pcVar1 == '/');\u000a  return (size_t)pcVar4;\u000a}\u000a\u000a
p3349
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nXOR R14D,R14D\nCMP byte ptr [RBX],0x2f\nSETZ R14B\nCALL 0x00410090\nMOV RCX,RAX\nSUB RCX,RBX\nNOP dword ptr [RAX]\nMOV RAX,RCX\nCMP R14,RAX\nJNC 0x00410023\nLEA RCX,[RAX + -0x1]\nCMP byte ptr [RBX + RAX*0x1 + -0x1],0x2f\nJZ 0x00410010\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p3350
S'41 56\n53\n50\n48 89 fb\n45 31 f6\n80 3b 2f\n41 0f 94 c6\ne8 8a 00 00 00\n48 89 c1\n48 29 d9\n0f 1f 40 00\n48 89 c8\n49 39 c6\n73 0b\n48 8d 48 ff\n80 7c 03 ff 2f\n74 ed\n48 83 c4 08\n5b\n41 5e\nc3\n'
p3351
S'.text:000000000040fff0\n.text:000000000040fff2\n.text:000000000040fff3\n.text:000000000040fff4\n.text:000000000040fff7\n.text:000000000040fffa\n.text:000000000040fffd\n.text:0000000000410001\n.text:0000000000410006\n.text:0000000000410009\n.text:000000000041000c\n.text:0000000000410010\n.text:0000000000410013\n.text:0000000000410016\n.text:0000000000410018\n.text:000000000041001c\n.text:0000000000410021\n.text:0000000000410023\n.text:0000000000410027\n.text:0000000000410028\n.text:000000000041002a\n'
p3352
tp3353
sS'fork'
p3354
(S'\n__stdcall fork()\n'
p3355
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__pid_t fork(void)\u000a\u000a{\u000a  __pid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_fork_0062d450)();\u000a  return _Var1;\u000a}\u000a\u000a
p3356
S'JMP qword ptr [0x0062d450]\n'
p3357
S'ff 25 ea a4 22 00\n'
p3358
S'.plt:0000000000402f60\n'
p3359
tp3360
sS'quote_n'
p3361
(S'\n__stdcall quote_n(char * arg)\n'
p3362
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p3363
S'MOV RDX,-0x1\nJMP 0x00416560\n'
p3364
S'48 c7 c2 ff ff ff ff\neb d7\n'
p3365
S'.text:0000000000416580\n.text:0000000000416587\n'
p3366
tp3367
sS'pred_exec'
p3368
(S'\n__stdcall pred_exec(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p3369
V\u000a_Bool pred_exec(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  uint uVar1;\u000a  char *__s;\u000a  _Bool _Var2;\u000a  _Bool _Var3;\u000a  uint *puVar4;\u000a  undefined8 uVar5;\u000a  char *prefix;\u000a  size_t arglen;\u000a  char *__ptr;\u000a  size_t pfxlen;\u000a  long lVar6;\u000a  bool bVar7;\u000a  \u000a  _Var2 = is_exec_in_local_dir(pred_ptr->pred_func);\u000a  if (_Var2 == false) {\u000a    __ptr = (char *)0x0;\u000a    prefix = (char *)0x0;\u000a    pfxlen = 0;\u000a    if (*(saved_cwd **)(pred_ptr->args + 0xc0) != initial_wd) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("execp->wd_for_exec == initial_wd","exec.c",0x9a,\u000a                    "_Bool impl_pred_exec(const char *, struct stat *, struct predicate *)");\u000a    }\u000a  }\u000a  else {\u000a    _Var3 = record_exec_dir((exec_val *)pred_ptr->args);\u000a    if (_Var3 == false) {\u000a      puVar4 = (uint *)__errno_location();\u000a      uVar1 = *puVar4;\u000a      uVar5 = dcgettext(0,"Failed to save working directory in order to run a command on %s",5);\u000a      prefix = safely_quote_err_filename((char *)0x0);\u000a      error(1,(ulong)uVar1,uVar5,prefix);\u000a    }\u000a    pathname = base_name(state.rel_pathname);\u000a    prefix = (char *)0x0;\u000a    if (*pathname != '/') {\u000a      prefix = "./";\u000a    }\u000a    pfxlen = (ulong)(*pathname != '/') * 2;\u000a    __ptr = pathname;\u000a  }\u000a  if (((exec_val *)pred_ptr->args)->multiple == false) {\u000a    if (0 < *(int *)(pred_ptr->args + 0xb8)) {\u000a      lVar6 = 0;\u000a      do {\u000a        __s = *(char **)(*(long *)(pred_ptr->args + 0xb0) + lVar6 * 8);\u000a        arglen = strlen(__s);\u000a        strlen(pathname);\u000a        bc_do_insert((buildcmd_control *)(pred_ptr->args + 8),\u000a                     (buildcmd_state *)(pred_ptr->args + 0x60),__s,arglen,prefix,pfxlen,\u000a                     (size_t)pathname);\u000a        lVar6 = lVar6 + 1;\u000a      } while (lVar6 < (long)*(int *)(pred_ptr->args + 0xb8));\u000a    }\u000a    bc_do_exec((buildcmd_control *)(pred_ptr->args + 8),(buildcmd_state *)(pred_ptr->args + 0x60));\u000a    bVar7 = (*(ushort *)(pred_ptr->args + 200) & 0xff7f) == 0;\u000a    if (_Var2 != false) {\u000a      free_cwd(*(saved_cwd **)(pred_ptr->args + 0xc0));\u000a    }\u000a  }\u000a  else {\u000a    arglen = strlen(pathname);\u000a    bc_push_arg((buildcmd_control *)(pred_ptr->args + 8),(buildcmd_state *)(pred_ptr->args + 0x60),\u000a                pathname,arglen + 1,prefix,pfxlen);\u000a    bVar7 = true;\u000a    if (*(int *)(pred_ptr->args + 0x98) != 0) {\u000a      state.execdirs_outstanding = true;\u000a    }\u000a  }\u000a  if (__ptr != (char *)0x0) {\u000a    if (_Var2 == false) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("local","exec.c",0xd6,\u000a                    "_Bool impl_pred_exec(const char *, struct stat *, struct predicate *)");\u000a    }\u000a    free(__ptr);\u000a  }\u000a  return (_Bool)bVar7;\u000a}\u000a\u000a
p3370
S'JMP 0x00405180\n'
p3371
S'e9 4b 11 00 00\n'
p3372
S'.text:0000000000404030\n'
p3373
tp3374
sS'get_expr'
p3375
(S'\n__stdcall get_expr(predicate * * input, predicate * prev_pred)\n'
p3376
V\u000apredicate * get_expr(predicate **input,predicate *prev_pred)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  predicate *ppVar2;\u000a  predicate *head;\u000a  char *pcVar3;\u000a  long in_RDX;\u000a  \u000a  ppVar2 = *input;\u000a  if (ppVar2 == (predicate *)0x0) {\u000a    uVar1 = dcgettext(0,"invalid expression",5);\u000a    error(1,0,uVar1,uVar1);\u000a  }\u000a  head = *input;\u000a  switch(head->p_type) {\u000a  case NO_TYPE:\u000a    pcVar3 = "invalid expression";\u000a    break;\u000a  case PRIMARY_TYPE:\u000a    ppVar2 = head->pred_next;\u000a    goto LAB_004062e2;\u000a  case UNI_OP:\u000a    *input = head->pred_next;\u000a    ppVar2 = get_expr(input,(predicate *)0x4);\u000a    head->pred_right = ppVar2;\u000a    goto LAB_0040636c;\u000a  case BI_OP:\u000a    uVar1 = dcgettext(0,\u000a                      "invalid expression; you have used a binary operator \u005c'%s\u005c' with nothing before it."\u000a                      ,5);\u000a    pcVar3 = ppVar2->p_name;\u000a    goto LAB_0040635e;\u000a  case OPEN_PAREN:\u000a    if ((head->pred_next == (predicate *)0x0) || (head->pred_next->artificial != false)) {\u000a      uVar1 = dcgettext(0,\u000a                        "invalid expression; expected to find a \u005c')\u005c' but didn\u005c't see one.  Perhaps you need an extra predicate after \u005c'%s\u005c'"\u000a                        ,5);\u000a      error(1,0,uVar1,ppVar2->p_name);\u000a    }\u000a    ppVar2 = (*input)->pred_next;\u000a    *input = ppVar2;\u000a    if (ppVar2->p_type == CLOSE_PAREN) {\u000a      uVar1 = dcgettext(0,"invalid expression; empty parentheses are not allowed.",5);\u000a      error(1,0,uVar1,uVar1);\u000a    }\u000a    head = get_expr(input,(predicate *)0x0);\u000a    if ((*input == (predicate *)0x0) || ((*input)->p_type != CLOSE_PAREN)) {\u000a      uVar1 = dcgettext(0,\u000a                        "invalid expression; I was expecting to find a \u005c')\u005c' somewhere but did not see one."\u000a                        ,5);\u000a      error(1,0,uVar1,uVar1);\u000a    }\u000a    ppVar2 = (*input)->pred_next;\u000aLAB_004062e2:\u000a    *input = ppVar2;\u000a    if (ppVar2 == (predicate *)0x0) {\u000a      return head;\u000a    }\u000a    goto LAB_00406375;\u000a  case CLOSE_PAREN:\u000a    if (((*(uint *)(in_RDX + 0x10) & 0xfffffffe) == 2) && (ppVar2->artificial == false)) {\u000a      pcVar3 = "expected an expression between \u005c'%s\u005c' and \u005c')\u005c'";\u000a    }\u000a    else {\u000a      if ((*input)->artificial == false) {\u000a        pcVar3 = "invalid expression; you have too many \u005c')\u005c'";\u000a        break;\u000a      }\u000a      pcVar3 = "expected an expression after \u005c'%s\u005c'";\u000a    }\u000a    uVar1 = dcgettext(0,pcVar3,5);\u000a    pcVar3 = *(char **)(in_RDX + 8);\u000aLAB_0040635e:\u000a    head = (predicate *)0x0;\u000a    error(1,0,uVar1,pcVar3);\u000a    goto LAB_0040636c;\u000a  default:\u000a    pcVar3 = "oops -- invalid expression type!";\u000a  }\u000a  head = (predicate *)0x0;\u000a  uVar1 = dcgettext(0,pcVar3,5);\u000a  error(1,0,uVar1,uVar1);\u000aLAB_0040636c:\u000a  ppVar2 = *input;\u000a  if (ppVar2 != (predicate *)0x0) {\u000aLAB_00406375:\u000a    if ((ppVar2->p_prec != (int)(short)prev_pred && (int)(short)prev_pred <= (int)ppVar2->p_prec) &&\u000a       (head = scan_rest(input,head), head == (predicate *)0x0)) {\u000a      head = (predicate *)0x0;\u000a      uVar1 = dcgettext(0,"invalid expression",5);\u000a      error(1,0,uVar1,uVar1);\u000a    }\u000a  }\u000a  return head;\u000a}\u000a\u000a
p3377
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R15,RDX\nMOV R14D,ESI\nMOV R12,RDI\nMOV RBX,qword ptr [R12]\nTEST RBX,RBX\nJNZ 0x0040619f\nXOR EDI,EDI\nMOV ESI,0x41d8f8\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402d90\nMOV RBP,qword ptr [R12]\nMOV EAX,dword ptr [RBP + 0x10]\nCMP RAX,0x5\nJA 0x004061c1\nJMP qword ptr [0x41d380 + RAX*0x8]\nXOR EBP,EBP\nXOR EDI,EDI\nMOV ESI,0x41d8f8\nJMP 0x00406324\nXOR EBP,EBP\nXOR EDI,EDI\nMOV ESI,0x41dacb\nJMP 0x00406324\nMOV RAX,qword ptr [0x108 + RBP]\nJMP 0x004062e2\nMOV RAX,qword ptr [0x108 + RBP]\nMOV qword ptr [R12],RAX\nMOV ESI,0x4\nMOV RDI,R12\nMOV RDX,RBP\nCALL 0x00406160\nMOV qword ptr [0x118 + RBP],RAX\nJMP 0x0040636c\nXOR EBP,EBP\nXOR EDI,EDI\nMOV ESI,0x41d90b\nMOV EDX,0x5\nCALL 0x00402910\nMOV RDX,RAX\nMOV RCX,qword ptr [RBX + 0x8]\nJMP 0x0040635e\nMOV RAX,qword ptr [0x108 + RBP]\nTEST RAX,RAX\nJZ 0x00406233\nCMP byte ptr [RAX + 0x29],0x0\nJZ 0x00406259\nXOR EDI,EDI\nMOV ESI,0x41d9d4\nMOV EDX,0x5\nCALL 0x00402910\nMOV RDX,RAX\nMOV RCX,qword ptr [RBX + 0x8]\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00402d90\nMOV RBP,qword ptr [R12]\nMOV RAX,qword ptr [0x108 + RBP]\nMOV qword ptr [R12],RAX\nCMP dword ptr [RAX + 0x10],0x5\nJNZ 0x00406293\nXOR EDI,EDI\nMOV ESI,0x41da43\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402d90\nXOR ESI,ESI\nMOV RDI,R12\nMOV RDX,RBP\nCALL 0x00406160\nMOV RBP,RAX\nMOV RAX,qword ptr [R12]\nTEST RAX,RAX\nJZ 0x004062b2\nCMP dword ptr [RAX + 0x10],0x5\nJZ 0x004062d7\nXOR EDI,EDI\nMOV ESI,0x41da7a\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402d90\nMOV RAX,qword ptr [R12]\nMOV RAX,qword ptr [0x108 + RAX]\nMOV qword ptr [R12],RAX\nTEST RAX,RAX\nJNZ 0x00406375\nJMP 0x004063b8\nMOV EAX,dword ptr [R15 + 0x10]\nAND EAX,0xfffffffe\nCMP EAX,0x2\nJNZ 0x00406306\nCMP byte ptr [RBX + 0x29],0x0\nJZ 0x00406344\nMOV RAX,qword ptr [R12]\nCMP byte ptr [RAX + 0x29],0x0\nJZ 0x0040631b\nXOR EBP,EBP\nXOR EDI,EDI\nMOV ESI,0x41d988\nJMP 0x0040634d\nXOR EBP,EBP\nXOR EDI,EDI\nMOV ESI,0x41d9aa\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402d90\nJMP 0x0040636c\nXOR EBP,EBP\nXOR EDI,EDI\nMOV ESI,0x41d95c\nMOV EDX,0x5\nCALL 0x00402910\nMOV RDX,RAX\nMOV RCX,qword ptr [R15 + 0x8]\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00402d90\nMOV RAX,qword ptr [R12]\nTEST RAX,RAX\nJZ 0x004063b8\nMOVSX EDX,R14W\nCMP dword ptr [RAX + 0x14],EDX\nJLE 0x004063b8\nMOV RDI,R12\nMOV RSI,RBP\nCALL 0x00406d90\nMOV RBP,RAX\nTEST RBP,RBP\nJNZ 0x004063b8\nXOR EBP,EBP\nXOR EDI,EDI\nMOV ESI,0x41d8f8\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402d90\nMOV RAX,RBP\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p3378
S'55\n41 57\n41 56\n41 54\n53\n49 89 d7\n41 89 f6\n49 89 fc\n49 8b 1c 24\n48 85 db\n75 25\n31 ff\nbe f8 d8 41 00\nba 05 00 00 00\ne8 85 c7 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 f1 cb ff ff\n49 8b 2c 24\n8b 45 10\n48 83 f8 05\n77 15\nff 24 c5 80 d3 41 00\n31 ed\n31 ff\nbe f8 d8 41 00\ne9 63 01 00 00\n31 ed\n31 ff\nbe cb da 41 00\ne9 55 01 00 00\n48 8b 85 08 01 00 00\ne9 07 01 00 00\n48 8b 85 08 01 00 00\n49 89 04 24\nbe 04 00 00 00\n4c 89 e7\n48 89 ea\ne8 6a ff ff ff\n48 89 85 18 01 00 00\ne9 6a 01 00 00\n31 ed\n31 ff\nbe 0b d9 41 00\nba 05 00 00 00\ne8 fb c6 ff ff\n48 89 c2\n48 8b 4b 08\ne9 3d 01 00 00\n48 8b 85 08 01 00 00\n48 85 c0\n74 06\n80 78 29 00\n74 26\n31 ff\nbe d4 d9 41 00\nba 05 00 00 00\ne8 cc c6 ff ff\n48 89 c2\n48 8b 4b 08\nbf 01 00 00 00\n31 f6\n31 c0\ne8 37 cb ff ff\n49 8b 2c 24\n48 8b 85 08 01 00 00\n49 89 04 24\n83 78 10 05\n75 25\n31 ff\nbe 43 da 41 00\nba 05 00 00 00\ne8 91 c6 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 fd ca ff ff\n31 f6\n4c 89 e7\n48 89 ea\ne8 c0 fe ff ff\n48 89 c5\n49 8b 04 24\n48 85 c0\n74 06\n83 78 10 05\n74 25\n31 ff\nbe 7a da 41 00\nba 05 00 00 00\ne8 4d c6 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 b9 ca ff ff\n49 8b 04 24\n48 8b 80 08 01 00 00\n49 89 04 24\n48 85 c0\n0f 85 86 00 00 00\ne9 c4 00 00 00\n41 8b 47 10\n83 e0 fe\n83 f8 02\n75 06\n80 7b 29 00\n74 3e\n49 8b 04 24\n80 78 29 00\n74 0b\n31 ed\n31 ff\nbe 88 d9 41 00\neb 32\n31 ed\n31 ff\nbe aa d9 41 00\nba 05 00 00 00\ne8 e2 c5 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 4e ca ff ff\neb 28\n31 ed\n31 ff\nbe 5c d9 41 00\nba 05 00 00 00\ne8 b9 c5 ff ff\n48 89 c2\n49 8b 4f 08\nbf 01 00 00 00\n31 f6\n31 c0\ne8 24 ca ff ff\n49 8b 04 24\n48 85 c0\n74 43\n41 0f bf d6\n39 50 14\n7e 3a\n4c 89 e7\n48 89 ee\ne8 07 0a 00 00\n48 89 c5\n48 85 ed\n75 27\n31 ed\n31 ff\nbe f8 d8 41 00\nba 05 00 00 00\ne8 6c c5 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 d8 c9 ff ff\n48 89 e8\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p3379
S'.text:0000000000406160\n.text:0000000000406161\n.text:0000000000406163\n.text:0000000000406165\n.text:0000000000406167\n.text:0000000000406168\n.text:000000000040616b\n.text:000000000040616e\n.text:0000000000406171\n.text:0000000000406175\n.text:0000000000406178\n.text:000000000040617a\n.text:000000000040617c\n.text:0000000000406181\n.text:0000000000406186\n.text:000000000040618b\n.text:000000000040618e\n.text:0000000000406193\n.text:0000000000406195\n.text:0000000000406197\n.text:000000000040619a\n.text:000000000040619f\n.text:00000000004061a3\n.text:00000000004061a6\n.text:00000000004061aa\n.text:00000000004061ac\n.text:00000000004061b3\n.text:00000000004061b5\n.text:00000000004061b7\n.text:00000000004061bc\n.text:00000000004061c1\n.text:00000000004061c3\n.text:00000000004061c5\n.text:00000000004061ca\n.text:00000000004061cf\n.text:00000000004061d6\n.text:00000000004061db\n.text:00000000004061e2\n.text:00000000004061e6\n.text:00000000004061eb\n.text:00000000004061ee\n.text:00000000004061f1\n.text:00000000004061f6\n.text:00000000004061fd\n.text:0000000000406202\n.text:0000000000406204\n.text:0000000000406206\n.text:000000000040620b\n.text:0000000000406210\n.text:0000000000406215\n.text:0000000000406218\n.text:000000000040621c\n.text:0000000000406221\n.text:0000000000406228\n.text:000000000040622b\n.text:000000000040622d\n.text:0000000000406231\n.text:0000000000406233\n.text:0000000000406235\n.text:000000000040623a\n.text:000000000040623f\n.text:0000000000406244\n.text:0000000000406247\n.text:000000000040624b\n.text:0000000000406250\n.text:0000000000406252\n.text:0000000000406254\n.text:0000000000406259\n.text:000000000040625d\n.text:0000000000406264\n.text:0000000000406268\n.text:000000000040626c\n.text:000000000040626e\n.text:0000000000406270\n.text:0000000000406275\n.text:000000000040627a\n.text:000000000040627f\n.text:0000000000406282\n.text:0000000000406287\n.text:0000000000406289\n.text:000000000040628b\n.text:000000000040628e\n.text:0000000000406293\n.text:0000000000406295\n.text:0000000000406298\n.text:000000000040629b\n.text:00000000004062a0\n.text:00000000004062a3\n.text:00000000004062a7\n.text:00000000004062aa\n.text:00000000004062ac\n.text:00000000004062b0\n.text:00000000004062b2\n.text:00000000004062b4\n.text:00000000004062b9\n.text:00000000004062be\n.text:00000000004062c3\n.text:00000000004062c6\n.text:00000000004062cb\n.text:00000000004062cd\n.text:00000000004062cf\n.text:00000000004062d2\n.text:00000000004062d7\n.text:00000000004062db\n.text:00000000004062e2\n.text:00000000004062e6\n.text:00000000004062e9\n.text:00000000004062ef\n.text:00000000004062f4\n.text:00000000004062f8\n.text:00000000004062fb\n.text:00000000004062fe\n.text:0000000000406300\n.text:0000000000406304\n.text:0000000000406306\n.text:000000000040630a\n.text:000000000040630e\n.text:0000000000406310\n.text:0000000000406312\n.text:0000000000406314\n.text:0000000000406319\n.text:000000000040631b\n.text:000000000040631d\n.text:000000000040631f\n.text:0000000000406324\n.text:0000000000406329\n.text:000000000040632e\n.text:0000000000406331\n.text:0000000000406336\n.text:0000000000406338\n.text:000000000040633a\n.text:000000000040633d\n.text:0000000000406342\n.text:0000000000406344\n.text:0000000000406346\n.text:0000000000406348\n.text:000000000040634d\n.text:0000000000406352\n.text:0000000000406357\n.text:000000000040635a\n.text:000000000040635e\n.text:0000000000406363\n.text:0000000000406365\n.text:0000000000406367\n.text:000000000040636c\n.text:0000000000406370\n.text:0000000000406373\n.text:0000000000406375\n.text:0000000000406379\n.text:000000000040637c\n.text:000000000040637e\n.text:0000000000406381\n.text:0000000000406384\n.text:0000000000406389\n.text:000000000040638c\n.text:000000000040638f\n.text:0000000000406391\n.text:0000000000406393\n.text:0000000000406395\n.text:000000000040639a\n.text:000000000040639f\n.text:00000000004063a4\n.text:00000000004063a7\n.text:00000000004063ac\n.text:00000000004063ae\n.text:00000000004063b0\n.text:00000000004063b3\n.text:00000000004063b8\n.text:00000000004063bb\n.text:00000000004063bc\n.text:00000000004063be\n.text:00000000004063c0\n.text:00000000004063c2\n.text:00000000004063c3\n'
p3380
tp3381
sS'optionp_stat'
p3382
(S'\n__stdcall optionp_stat(char * name, stat * p)\n'
p3383
V\u000aint optionp_stat(char *name,stat *p)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if ((state.cwd_dir_fd < 0) && (state.cwd_dir_fd != -100)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("(state.cwd_dir_fd >= 0) || (state.cwd_dir_fd==AT_FDCWD)","util.c",0x2af,\u000a                  "int optionp_stat(const char *, struct stat *)");\u000a  }\u000a  iVar1 = fstatat(state.cwd_dir_fd,name,(stat *)p,0x100);\u000a  return iVar1;\u000a}\u000a\u000a
p3384
S'MOV RAX,RSI\nMOV RDX,RDI\nMOV EDI,dword ptr [0x0062f018]\nTEST EDI,EDI\nJNS 0x00408175\nCMP EDI,-0x64\nJNZ 0x00408185\nMOV ECX,0x100\nMOV RSI,RDX\nMOV RDX,RAX\nJMP 0x0041c4c0\nPUSH RAX\nMOV EDI,0x41e7bc\nMOV ESI,0x41e01b\nMOV EDX,0x2af\nMOV ECX,0x41e7f4\nCALL 0x00402a40\n'
p3385
S'48 89 f0\n48 89 fa\n8b 3d ac 6e 22 00\n85 ff\n79 05\n83 ff 9c\n75 10\nb9 00 01 00 00\n48 89 d6\n48 89 c2\ne9 3b 43 01 00\n50\nbf bc e7 41 00\nbe 1b e0 41 00\nba af 02 00 00\nb9 f4 e7 41 00\ne8 a1 a8 ff ff\n'
p3386
S'.text:0000000000408160\n.text:0000000000408163\n.text:0000000000408166\n.text:000000000040816c\n.text:000000000040816e\n.text:0000000000408170\n.text:0000000000408173\n.text:0000000000408175\n.text:000000000040817a\n.text:000000000040817d\n.text:0000000000408180\n.text:0000000000408185\n.text:0000000000408186\n.text:000000000040818b\n.text:0000000000408190\n.text:0000000000408195\n.text:000000000040819a\n'
p3387
tp3388
sS'check_sorted'
p3389
(S'\n__stdcall check_sorted()\n'
p3390
V\u000a_Bool check_sorted(void)\u000a\u000a{\u000a  pred_cost_lookup *p1;\u000a  int iVar1;\u000a  pred_cost_lookup *p2;\u000a  ulong uVar2;\u000a  \u000a  uVar2 = 1;\u000a  p2 = costlookup;\u000a  while( true ) {\u000a    p1 = p2 + 1;\u000a    iVar1 = cost_table_comparison(p1,p2);\u000a    if (iVar1 < 0) {\u000a      return false;\u000a    }\u000a    iVar1 = cost_table_comparison(p2,p1);\u000a    if (0 < iVar1) break;\u000a    uVar2 = uVar2 + 1;\u000a    p2 = p1;\u000a    if (0x3a < uVar2) {\u000a      return true;\u000a    }\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("result <= 0","tree.c",0x3ed,\u000a                "_Bool check_sorted(void *, size_t, size_t, int (*)(const void *, const void *))");\u000a}\u000a\u000a
p3391
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14D,0x62d8f0\nMOV R15D,0x1\nNOP dword ptr CS:[RAX + RAX*0x1]\nLEA RBX,[R14 + 0x10]\nMOV RDI,RBX\nMOV RSI,R14\nCALL 0x00406fa0\nTEST EAX,EAX\nJS 0x00407022\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00406fa0\nTEST EAX,EAX\nJG 0x0040702a\nINC R15\nCMP R15,0x3a\nMOV R14,RBX\nJBE 0x00406ff0\nMOV AL,0x1\nJMP 0x00407024\nXOR EAX,EAX\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOV EDI,0x41dba6\nMOV ESI,0x41d4d0\nMOV EDX,0x3ed\nMOV ECX,0x41dbb2\nCALL 0x00402a40\n'
p3392
S'41 57\n41 56\n53\n41 be f0 d8 62 00\n41 bf 01 00 00 00\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 8d 5e 10\n48 89 df\n4c 89 f6\ne8 a1 ff ff ff\n85 c0\n78 1f\n4c 89 f7\n48 89 de\ne8 92 ff ff ff\n85 c0\n7f 18\n49 ff c7\n49 83 ff 3a\n49 89 de\n76 d2\nb0 01\neb 02\n31 c0\n5b\n41 5e\n41 5f\nc3\nbf a6 db 41 00\nbe d0 d4 41 00\nba ed 03 00 00\nb9 b2 db 41 00\ne8 fd b9 ff ff\n'
p3393
S'.text:0000000000406fd0\n.text:0000000000406fd2\n.text:0000000000406fd4\n.text:0000000000406fd5\n.text:0000000000406fdb\n.text:0000000000406fe1\n.text:0000000000406ff0\n.text:0000000000406ff4\n.text:0000000000406ff7\n.text:0000000000406ffa\n.text:0000000000406fff\n.text:0000000000407001\n.text:0000000000407003\n.text:0000000000407006\n.text:0000000000407009\n.text:000000000040700e\n.text:0000000000407010\n.text:0000000000407012\n.text:0000000000407015\n.text:0000000000407019\n.text:000000000040701c\n.text:000000000040701e\n.text:0000000000407020\n.text:0000000000407022\n.text:0000000000407024\n.text:0000000000407025\n.text:0000000000407027\n.text:0000000000407029\n.text:000000000040702a\n.text:000000000040702f\n.text:0000000000407034\n.text:0000000000407039\n.text:000000000040703e\n'
p3394
tp3395
sS'__libc_csu_init'
p3396
(S'\n__stdcall __libc_csu_init()\n'
p3397
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p3398
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x62cdf8]\nPUSH RBP\nLEA RBP,[0x62ce00]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x004026c0\nTEST RBP,RBP\nJZ 0x0041c436\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x0041c420\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p3399
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 06 0a 21 00\n55\n48 8d 2d 06 0a 21 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 af 62 fe ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p3400
S'.text:000000000041c3e0\n.text:000000000041c3e2\n.text:000000000041c3e4\n.text:000000000041c3e7\n.text:000000000041c3e9\n.text:000000000041c3eb\n.text:000000000041c3f2\n.text:000000000041c3f3\n.text:000000000041c3fa\n.text:000000000041c3fb\n.text:000000000041c3fe\n.text:000000000041c401\n.text:000000000041c404\n.text:000000000041c408\n.text:000000000041c40c\n.text:000000000041c411\n.text:000000000041c414\n.text:000000000041c416\n.text:000000000041c418\n.text:000000000041c420\n.text:000000000041c423\n.text:000000000041c426\n.text:000000000041c429\n.text:000000000041c42d\n.text:000000000041c431\n.text:000000000041c434\n.text:000000000041c436\n.text:000000000041c43a\n.text:000000000041c43b\n.text:000000000041c43c\n.text:000000000041c43e\n.text:000000000041c440\n.text:000000000041c442\n.text:000000000041c444\n'
p3401
tp3402
sS'getrlimit'
p3403
(S'\n__stdcall getrlimit(__rlimit_resource_t __resource, rlimit * __rlimits)\n'
p3404
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getrlimit(__rlimit_resource_t __resource,rlimit *__rlimits)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getrlimit_0062d418)();\u000a  return iVar1;\u000a}\u000a\u000a
p3405
S'JMP qword ptr [0x0062d418]\n'
p3406
S'ff 25 22 a5 22 00\n'
p3407
S'.plt:0000000000402ef0\n'
p3408
tp3409
sS'c_isdigit'
p3410
(S'\n__stdcall c_isdigit()\n'
p3411
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p3412
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p3413
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p3414
S'.text:000000000041b9c0\n.text:000000000041b9c3\n.text:000000000041b9c6\n.text:000000000041b9c9\n'
p3415
tp3416
sS'matchpathcon_init_prefix'
p3417
(S'\n__stdcall matchpathcon_init_prefix(char * path, char * prefix)\n'
p3418
V\u000aint matchpathcon_init_prefix(char *path,char *prefix)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p3419
S'PUSH RAX\nCALL 0x00402770\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p3420
S'50\ne8 5a bb fe ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p3421
S'.text:0000000000416c10\n.text:0000000000416c11\n.text:0000000000416c16\n.text:0000000000416c1c\n.text:0000000000416c21\n.text:0000000000416c22\n'
p3422
tp3423
sS'subtree_has_side_effects'
p3424
(S'\n__stdcall subtree_has_side_effects(predicate * p)\n'
p3425
V\u000a_Bool subtree_has_side_effects(predicate *p)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  if (p != (predicate *)0x0) {\u000a    do {\u000a      if (p->side_effects != false) {\u000a        return true;\u000a      }\u000a      _Var1 = subtree_has_side_effects(p->pred_left);\u000a      if (_Var1 != false) {\u000a        return true;\u000a      }\u000a      p = p->pred_right;\u000a    } while (p != (predicate *)0x0);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p3426
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJNZ 0x0040764c\nJMP 0x00407667\nMOV RBX,qword ptr [0x118 + RBX]\nTEST RBX,RBX\nJZ 0x00407667\nMOV BPL,0x1\nCMP byte ptr [RBX + 0x18],0x0\nJNZ 0x00407669\nMOV RDI,qword ptr [0x110 + RBX]\nCALL 0x00407630\nTEST AL,AL\nJZ 0x00407640\nJMP 0x00407669\nXOR EBP,EBP\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p3427
S'55\n53\n50\n48 89 fb\n48 85 db\n75 11\neb 2a\n48 8b 9b 18 01 00 00\n48 85 db\n74 1b\n40 b5 01\n80 7b 18 00\n75 14\n48 8b bb 10 01 00 00\ne8 cf ff ff ff\n84 c0\n74 db\neb 02\n31 ed\n89 e8\n48 83 c4 08\n5b\n5d\nc3\n'
p3428
S'.text:0000000000407630\n.text:0000000000407631\n.text:0000000000407632\n.text:0000000000407633\n.text:0000000000407636\n.text:0000000000407639\n.text:000000000040763b\n.text:0000000000407640\n.text:0000000000407647\n.text:000000000040764a\n.text:000000000040764c\n.text:000000000040764f\n.text:0000000000407653\n.text:0000000000407655\n.text:000000000040765c\n.text:0000000000407661\n.text:0000000000407663\n.text:0000000000407665\n.text:0000000000407667\n.text:0000000000407669\n.text:000000000040766b\n.text:000000000040766f\n.text:0000000000407670\n.text:0000000000407671\n'
p3429
tp3430
sS'get_stat_mtime_ns'
p3431
(S'\n__stdcall get_stat_mtime_ns(stat * st)\n'
p3432
V\u000along get_stat_mtime_ns(stat *st)\u000a\u000a{\u000a  return (st->st_mtim).tv_nsec;\u000a}\u000a\u000a
p3433
S'MOV RAX,qword ptr [RDI + 0x60]\nRET\n'
p3434
S'48 8b 47 60\nc3\n'
p3435
S'.text:0000000000416c50\n.text:0000000000416c54\n'
p3436
tp3437
sS'estimate_costs'
p3438
(S'\n__stdcall estimate_costs(predicate * tree)\n'
p3439
V\u000avoid estimate_costs(predicate *tree)\u000a\u000a{\u000a  EvaluationCost EVar1;\u000a  \u000a  if (tree != (predicate *)0x0) {\u000a    estimate_costs(tree->pred_right);\u000a    estimate_costs(tree->pred_left);\u000a    EVar1 = get_pred_cost(tree);\u000a    tree->p_cost = EVar1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p3440
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x004066cc\nMOV RDI,qword ptr [0x118 + RBX]\nCALL 0x004066a0\nMOV RDI,qword ptr [0x110 + RBX]\nCALL 0x004066a0\nMOV RDI,RBX\nCALL 0x00406e80\nMOV dword ptr [RBX + 0x20],EAX\nPOP RBX\nRET\n'
p3441
S'53\n48 89 fb\n48 85 db\n74 23\n48 8b bb 18 01 00 00\ne8 eb ff ff ff\n48 8b bb 10 01 00 00\ne8 df ff ff ff\n48 89 df\ne8 b7 07 00 00\n89 43 20\n5b\nc3\n'
p3442
S'.text:00000000004066a0\n.text:00000000004066a1\n.text:00000000004066a4\n.text:00000000004066a7\n.text:00000000004066a9\n.text:00000000004066b0\n.text:00000000004066b5\n.text:00000000004066bc\n.text:00000000004066c1\n.text:00000000004066c4\n.text:00000000004066c9\n.text:00000000004066cc\n.text:00000000004066cd\n'
p3443
tp3444
sS'parse_depth'
p3445
(S'\n__stdcall parse_depth(parser_table * entry, char * * argv, int * arg_ptr)\n'
p3446
V\u000a_Bool parse_depth(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  options._0_2_ = 0x100;\u000a  parse_noop();\u000a  return true;\u000a}\u000a\u000a
p3447
S'PUSH RAX\nMOV word ptr [0x0062f040],0x100\nMOV RDI,RSI\nMOV RSI,RDX\nCALL 0x0040ca00\nMOV AL,0x1\nPOP RCX\nRET\n'
p3448
S'50\n66 c7 05 96 3c 22 00 00 01\n48 89 f7\n48 89 d6\ne8 4b 16 00 00\nb0 01\n59\nc3\n'
p3449
S'.text:000000000040b3a0\n.text:000000000040b3a1\n.text:000000000040b3aa\n.text:000000000040b3ad\n.text:000000000040b3b0\n.text:000000000040b3b5\n.text:000000000040b3b7\n.text:000000000040b3b8\n'
p3450
tp3451
sS'vfprintf'
p3452
(S'\n__stdcall vfprintf(FILE * __s, char * __format, __gnuc_va_list __arg)\n'
p3453
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_vfprintf_0062d3b0)();\u000a  return iVar1;\u000a}\u000a\u000a
p3454
S'JMP qword ptr [0x0062d3b0]\n'
p3455
S'ff 25 8a a5 22 00\n'
p3456
S'.plt:0000000000402e20\n'
p3457
tp3458
sS'must_read_fs_list'
p3459
(S'\n__stdcall must_read_fs_list()\n'
p3460
V\u000amount_entry * must_read_fs_list(void)\u000a\u000a{\u000a  mount_entry *pmVar1;\u000a  undefined8 uVar2;\u000a  \u000a  pmVar1 = read_file_system_list();\u000a  if (pmVar1 == (mount_entry *)0x0) {\u000a    uVar2 = dcgettext(0,"Cannot read mounted file system list",5);\u000a    error(1,0,uVar2,uVar2);\u000a  }\u000a  return pmVar1;\u000a}\u000a\u000a
p3461
S'PUSH RBX\nMOVZX EDI,DIL\nCALL 0x0041a740\nMOV RBX,RAX\nTEST RBX,RBX\nJNZ 0x0040a4a7\nXOR EDI,EDI\nMOV ESI,0x41fb52\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402d90\nMOV RAX,RBX\nPOP RBX\nRET\n'
p3462
S'53\n40 0f b6 ff\ne8 c6 02 01 00\n48 89 c3\n48 85 db\n75 25\n31 ff\nbe 52 fb 41 00\nba 05 00 00 00\ne8 7d 84 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 e9 88 ff ff\n48 89 d8\n5b\nc3\n'
p3463
S'.text:000000000040a470\n.text:000000000040a471\n.text:000000000040a475\n.text:000000000040a47a\n.text:000000000040a47d\n.text:000000000040a480\n.text:000000000040a482\n.text:000000000040a484\n.text:000000000040a489\n.text:000000000040a48e\n.text:000000000040a493\n.text:000000000040a496\n.text:000000000040a49b\n.text:000000000040a49d\n.text:000000000040a49f\n.text:000000000040a4a2\n.text:000000000040a4a7\n.text:000000000040a4aa\n.text:000000000040a4ab\n'
p3464
tp3465
sS'mdir_name'
p3466
(S'\n__stdcall mdir_name(char * file)\n'
p3467
V\u000achar * mdir_name(char *file)\u000a\u000a{\u000a  size_t __n;\u000a  char *__dest;\u000a  \u000a  __n = dir_len(file);\u000a  __dest = (char *)malloc(__n + 1 + (ulong)(__n == 0));\u000a  if (__dest == (char *)0x0) {\u000a    __dest = (char *)0x0;\u000a  }\u000a  else {\u000a    memcpy(__dest,file,__n);\u000a    if (__n == 0) {\u000a      *__dest = '.';\u000a      __n = 1;\u000a    }\u000a    __dest[__n] = 0;\u000a  }\u000a  return __dest;\u000a}\u000a\u000a
p3468
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nCALL 0x0040fff0\nMOV RBX,RAX\nXOR EAX,EAX\nTEST RBX,RBX\nSETZ AL\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00402c60\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0041007e\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,RBX\nCALL 0x00402bd0\nTEST RBX,RBX\nJNZ 0x00410077\nMOV byte ptr [R14 + RBX*0x1],0x2e\nMOV EBX,0x1\nMOV byte ptr [R14 + RBX*0x1],0x0\nJMP 0x00410081\nXOR R14D,R14D\nMOV RAX,R14\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p3469
S'41 57\n41 56\n53\n49 89 ff\ne8 b3 ff ff ff\n48 89 c3\n31 c0\n48 85 db\n0f 94 c0\n48 8d 7c 03 01\ne8 0e 2c ff ff\n49 89 c6\n4d 85 f6\n74 24\n4c 89 f7\n4c 89 fe\n48 89 da\ne8 68 2b ff ff\n48 85 db\n75 0a\n41 c6 04 1e 2e\nbb 01 00 00 00\n41 c6 04 1e 00\neb 03\n45 31 f6\n4c 89 f0\n5b\n41 5e\n41 5f\nc3\n'
p3470
S'.text:0000000000410030\n.text:0000000000410032\n.text:0000000000410034\n.text:0000000000410035\n.text:0000000000410038\n.text:000000000041003d\n.text:0000000000410040\n.text:0000000000410042\n.text:0000000000410045\n.text:0000000000410048\n.text:000000000041004d\n.text:0000000000410052\n.text:0000000000410055\n.text:0000000000410058\n.text:000000000041005a\n.text:000000000041005d\n.text:0000000000410060\n.text:0000000000410063\n.text:0000000000410068\n.text:000000000041006b\n.text:000000000041006d\n.text:0000000000410072\n.text:0000000000410077\n.text:000000000041007c\n.text:000000000041007e\n.text:0000000000410081\n.text:0000000000410084\n.text:0000000000410085\n.text:0000000000410087\n.text:0000000000410089\n'
p3471
tp3472
sS'opendirat'
p3473
(S'\n__stdcall opendirat(char * dir, int * pdir_fd)\n'
p3474
V\u000aDIR * opendirat(char *dir,int *pdir_fd)\u000a\u000a{\u000a  int iVar1;\u000a  int __fd;\u000a  DIR *pDVar2;\u000a  int *piVar3;\u000a  int *in_RCX;\u000a  uint in_EDX;\u000a  \u000a  pDVar2 = (DIR *)0x0;\u000a  __fd = openat_safer(dir,pdir_fd,(ulong)(in_EDX | 0x10900));\u000a  if (-1 < __fd) {\u000a    set_cloexec_flag();\u000a    pDVar2 = fdopendir(__fd);\u000a    if (pDVar2 == (DIR *)0x0) {\u000a      piVar3 = __errno_location();\u000a      iVar1 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar1;\u000a      pDVar2 = (DIR *)0x0;\u000a    }\u000a    else {\u000a      *in_RCX = __fd;\u000a    }\u000a  }\u000a  return (DIR *)pDVar2;\u000a}\u000a\u000a
p3475
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RCX\nOR EDX,0x10900\nXOR EBX,EBX\nXOR EAX,EAX\nCALL 0x0041c230\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00419e23\nMOV ESI,0x1\nMOV EDI,EBP\nCALL 0x0040fdd0\nMOV EDI,EBP\nCALL 0x00402e30\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00419e0c\nMOV dword ptr [R14],EBP\nJMP 0x00419e23\nCALL 0x00402770\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x00402ac0\nMOV dword ptr [RBX],R14D\nXOR EBX,EBX\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p3476
S'55\n41 56\n53\n49 89 ce\n81 ca 00 09 01 00\n31 db\n31 c0\ne8 4a 24 00 00\n89 c5\n85 ed\n78 37\nbe 01 00 00 00\n89 ef\ne8 d8 5f ff ff\n89 ef\ne8 31 90 fe ff\n48 89 c3\n48 85 db\n74 05\n41 89 2e\neb 17\ne8 5f 89 fe ff\n48 89 c3\n44 8b 33\n89 ef\ne8 a2 8c fe ff\n44 89 33\n31 db\n48 89 d8\n5b\n41 5e\n5d\nc3\n'
p3477
S'.text:0000000000419dd0\n.text:0000000000419dd1\n.text:0000000000419dd3\n.text:0000000000419dd4\n.text:0000000000419dd7\n.text:0000000000419ddd\n.text:0000000000419ddf\n.text:0000000000419de1\n.text:0000000000419de6\n.text:0000000000419de8\n.text:0000000000419dea\n.text:0000000000419dec\n.text:0000000000419df1\n.text:0000000000419df3\n.text:0000000000419df8\n.text:0000000000419dfa\n.text:0000000000419dff\n.text:0000000000419e02\n.text:0000000000419e05\n.text:0000000000419e07\n.text:0000000000419e0a\n.text:0000000000419e0c\n.text:0000000000419e11\n.text:0000000000419e14\n.text:0000000000419e17\n.text:0000000000419e19\n.text:0000000000419e1e\n.text:0000000000419e21\n.text:0000000000419e23\n.text:0000000000419e26\n.text:0000000000419e27\n.text:0000000000419e29\n.text:0000000000419e2a\n'
p3478
tp3479
sS'c_isgraph'
p3480
(S'\n__stdcall c_isgraph()\n'
p3481
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p3482
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p3483
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p3484
S'.text:000000000041b9d0\n.text:000000000041b9d3\n.text:000000000041b9d6\n.text:000000000041b9d9\n'
p3485
tp3486
sS'parse_name'
p3487
(S'\n__stdcall parse_name(parser_table * entry, char * * argv, int * arg_ptr)\n'
p3488
V\u000a_Bool parse_name(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  char *arg;\u000a  _Bool _Var1;\u000a  char *in_RAX;\u000a  predicate *ppVar2;\u000a  float fVar3;\u000a  char *local_18;\u000a  \u000a  local_18 = in_RAX;\u000a  _Var1 = collect_arg(argv,arg_ptr,&local_18);\u000a  if (_Var1 != false) {\u000a    fnmatch_sanitycheck();\u000a    arg = local_18;\u000a    check_name_arg();\u000a    ppVar2 = insert_primary(entry,arg);\u000a    *(undefined2 *)&ppVar2->need_stat = 0;\u000a    *(char **)ppVar2->args = local_18;\u000a    fVar3 = estimate_pattern_match_rate(local_18);\u000a    ppVar2->est_success_rate = fVar3;\u000a  }\u000a  return (_Bool)(_Var1 != false);\u000a}\u000a\u000a
p3489
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV RAX,RSP\nMOV RDI,RSI\nMOV RSI,RDX\nMOV RDX,RAX\nCALL 0x0040c7f0\nTEST AL,AL\nJZ 0x0040bb7e\nCALL 0x0040d4a0\nMOV RBX,qword ptr [RSP]\nMOV EDI,0x421899\nMOV RSI,RBX\nCALL 0x0040d520\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00407730\nMOV RBX,RAX\nMOV word ptr [RBX + 0x1a],0x0\nMOV RDI,qword ptr [RSP]\nMOV qword ptr [RBX + 0x38],RDI\nXOR ESI,ESI\nCALL 0x0040d450\nMOVSS dword ptr [RBX + 0x24],XMM0\nMOV AL,0x1\nJMP 0x0040bb80\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p3490
S'41 56\n53\n50\n49 89 fe\n48 89 e0\n48 89 f7\n48 89 d6\n48 89 c2\ne8 b8 0c 00 00\n84 c0\n74 42\ne8 5f 19 00 00\n48 8b 1c 24\nbf 99 18 42 00\n48 89 de\ne8 ce 19 00 00\n4c 89 f7\n48 89 de\ne8 d3 bb ff ff\n48 89 c3\n66 c7 43 1a 00 00\n48 8b 3c 24\n48 89 7b 38\n31 f6\ne8 db 18 00 00\nf3 0f 11 43 24\nb0 01\neb 02\n31 c0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p3491
S'.text:000000000040bb20\n.text:000000000040bb22\n.text:000000000040bb23\n.text:000000000040bb24\n.text:000000000040bb27\n.text:000000000040bb2a\n.text:000000000040bb2d\n.text:000000000040bb30\n.text:000000000040bb33\n.text:000000000040bb38\n.text:000000000040bb3a\n.text:000000000040bb3c\n.text:000000000040bb41\n.text:000000000040bb45\n.text:000000000040bb4a\n.text:000000000040bb4d\n.text:000000000040bb52\n.text:000000000040bb55\n.text:000000000040bb58\n.text:000000000040bb5d\n.text:000000000040bb60\n.text:000000000040bb66\n.text:000000000040bb6a\n.text:000000000040bb6e\n.text:000000000040bb70\n.text:000000000040bb75\n.text:000000000040bb7a\n.text:000000000040bb7c\n.text:000000000040bb7e\n.text:000000000040bb80\n.text:000000000040bb84\n.text:000000000040bb85\n.text:000000000040bb87\n'
p3492
tp3493
sS'parse_warn'
p3494
(S'\n__stdcall parse_warn(parser_table * entry, char * * argv, int * arg_ptr)\n'
p3495
V\u000a_Bool parse_warn(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  options.warnings = true;\u000a  parse_noop();\u000a  return true;\u000a}\u000a\u000a
p3496
S'PUSH RAX\nMOV byte ptr [0x0062f050],0x1\nMOV RDI,RSI\nMOV RSI,RDX\nCALL 0x0040ca00\nMOV AL,0x1\nPOP RCX\nRET\n'
p3497
S'50\nc6 05 88 33 22 00 01\n48 89 f7\n48 89 d6\ne8 2d 0d 00 00\nb0 01\n59\nc3\n'
p3498
S'.text:000000000040bcc0\n.text:000000000040bcc1\n.text:000000000040bcc8\n.text:000000000040bccb\n.text:000000000040bcce\n.text:000000000040bcd3\n.text:000000000040bcd5\n.text:000000000040bcd6\n'
p3499
tp3500
sS'quotearg_buffer_restyled'
p3501
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p3502
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_0041534c_caseD_7;\u000a  case 2:\u000a    goto switchD_0041534c_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_0041534c_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_0041534c_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_0041534c_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_0041534c_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_0041534c_caseD_7;\u000aswitchD_0041534c_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_0041534c_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_0041534c_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00415e10;\u000aLAB_00415530:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00415e19:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00415e28:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_0041553b:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_0041557f:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_0041557f;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00415e28;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00415d55;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00415c60;\u000a    }\u000a    goto LAB_00415e28;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = rpl_mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_00415d8a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00415e28;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit((mbstate_t *)&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00415db9;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00415878;\u000a  case '\u005ca':\u000a    goto joined_r0x00415768;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00415768;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00415596_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00415768;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00415768;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00415596_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00415768:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_00415cce;\u000a    }\u000a    goto LAB_00415e28;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00415e28;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00415e28;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00415e28;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00415e28;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00415e28;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00415596_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00415d26;\u000a      goto joined_r0x00415d18;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00415821:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00415d18;\u000a      goto LAB_00415d26;\u000a    }\u000a    goto LAB_00415e28;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00415e28;\u000a  }\u000a  goto joined_r0x00415c60;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_00415d8a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00415db9;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00415db9:\u000a  if (1 < uVar10) {\u000aLAB_00415896:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00415952;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00415821;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00415952:\u000a        if (bVar6 != 0) goto LAB_00415e28;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00415878:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00415896;\u000ajoined_r0x00415c60:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00415c60:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00415c87;\u000aLAB_00415cc0:\u000a    if (bVar22) goto LAB_00415cc5;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00415cc0;\u000aLAB_00415c87:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00415cc5:\u000a      if (bVar6 != 0) goto LAB_00415e28;\u000aLAB_00415cce:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00415d18;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00415d26:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00415d18:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00415d55:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00415530;\u000aLAB_00415e10:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00415e19;\u000a  goto LAB_0041553b;\u000a}\u000a\u000a
p3503
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x00402920\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00415ef5\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x424520 + RAX*0x8]\nMOV EDI,0x424a44\nMOV ESI,R15D\nCALL 0x004165a0\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x41f6f2\nMOV ESI,R15D\nCALL 0x004165a0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x004153ad\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x004153b0\nNOP\nCMP R12,RSI\nJNC 0x0041539e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00415390\nJMP 0x004153b0\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x00402930\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x0041547c\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x0041547c\nMOV ECX,0x424281\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00415476\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00415417\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00415444\nTEST RSI,RSI\nJZ 0x00415431\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x41f6f2\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x00415452\nMOV ECX,0x41f6f2\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x0041547c\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x00415ecc\nMOV ECX,0x424281\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00415e10\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00415e19\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x0041557f\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x0041557a\nCMP R11,-0x1\nJNZ 0x0041557a\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x00402930\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x004155d0\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x0041582c\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x424578 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00415e28\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00415c80\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00415c87\nJMP 0x00415cc0\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00402b20\nTEST EAX,EAX\nSETZ AL\nJNZ 0x0041561d\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00415581\nJMP 0x00415e28\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00415581\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x004155ab\nCMP EBX,0x2\nJNZ 0x004155ab\nTEST R13,R13\nJNZ 0x004155ab\nJMP 0x00415e28\nCMP R11,-0x1\nJZ 0x00415a03\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00415a23\nJMP 0x004155ab\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00415a34\nTEST R8B,R8B\nJNZ 0x00415e28\nCMP EBX,0x2\nJNZ 0x004156d8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x004156d8\nCMP R12,RSI\nJNC 0x004156b3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004156c2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004156d1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x004156e2\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00415ba8\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00415ba8\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00415ba8\nCMP RCX,RSI\nJNC 0x0041571c\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x0041572b\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004155b6\nJMP 0x00415c80\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004155a9\nJMP 0x0041578a\nMOV DL,0x74\nJMP 0x00415772\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004155a9\nJMP 0x0041578a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004155a9\nJMP 0x0041578a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00415e28\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004155a9\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x00415cce\nJMP 0x00415e28\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x004155a9\nTEST R8B,R8B\nJNZ 0x00415e28\nCMP R12,RSI\nJNC 0x004157ba\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004157c9\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004157d8\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x004155a9\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x00415bbb\nCMP EBX,0x2\nJNZ 0x004155a9\nTEST R8B,R8B\nJZ 0x004155a9\nJMP 0x00415e28\nCMP EBX,0x2\nJNZ 0x00415a54\nTEST R8B,R8B\nJNZ 0x00415e28\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00415d26\nJMP 0x00415d49\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00415a75\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00402f80\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00415c68\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00415c68\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00415952\nJMP 0x00415920\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x00415909\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x00415906\nCMP R12,RSI\nJNC 0x004158eb\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x004158fa\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00415940\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00415940\nTEST BPL,0x1\nJZ 0x004159e3\nCMP R12,RSI\nJNC 0x00415934\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x004159e3\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00415920\nTEST R8B,R8B\nJNZ 0x00415e28\nCMP EBX,0x2\nJNZ 0x0041599a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x0041599a\nCMP R12,RSI\nJNC 0x00415972\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00415981\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00415990\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x004159a4\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004159bb\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004159d5\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x004158d0\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00415d26\nJMP 0x00415d49\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x004155ab\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x004155ab\nJMP 0x00415e28\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00415d55\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004155b6\nJMP 0x00415c80\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00415772\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00415d26\nJMP 0x00415d49\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00415a97\nMOV RDI,R10\nCALL 0x00402930\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00419f50\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00415d6f\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00415d67\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00415d76\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x00415b5e\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00415b56\nBT RDI,RDX\nJC 0x00415ec2\nINC RCX\nCMP RCX,R14\nJC 0x00415b40\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00402f30\nTEST EAX,EAX\nJNZ 0x00415b73\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00402f20\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00415ab5\nJMP 0x00415db9\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004155b6\nJMP 0x00415c80\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x004155a9\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x004155a9\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x004155a9\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x004155ab\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00415df2\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00415e28\nCMP R12,RSI\nJNC 0x00415c1e\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00415c31\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00415c40\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x00415c4f\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004155b6\nJMP 0x00415c80\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004155b6\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00415cc0\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00415cc5\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00415d20\nJMP 0x00415cc5\nTEST BPL,BPL\nJZ 0x00415d20\nTEST R8B,R8B\nJNZ 0x00415e28\nCMP EBX,0x2\nJNZ 0x00415d08\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00415d08\nCMP R12,RSI\nJNC 0x00415ce3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00415cf2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00415d01\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00415d12\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00415d52\nJMP 0x00415d4e\nTEST DIL,0x1\nJZ 0x00415d49\nAND AL,0x1\nJNZ 0x00415d49\nCMP R12,RSI\nJNC 0x00415d34\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00415d43\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00415d52\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00415e10\nJMP 0x00415530\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00415db4\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x00415dac\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00415de8\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x00415d8a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00415db9\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00415878\nJMP 0x00415896\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00415db9\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004155b6\nJMP 0x00415c80\nCMP R13,R11\nJNZ 0x0041553b\nTEST R8B,R8B\nJZ 0x00415e82\nCMP EBX,0x2\nJNZ 0x00415e82\nTEST R12,R12\nJNZ 0x00415e82\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x004152c0\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00415eb6\nTEST R8B,R8B\nJNZ 0x00415eb6\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00415eb6\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00415ea9\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00415ea0\nCMP R12,RSI\nJNC 0x00415e6d\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x00415e6d\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00415e28\nTEST RSI,RSI\nJZ 0x00415ed9\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x424281\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x0041547c\nCALL 0x00402750\n'
p3504
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 32 d6 fe ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 20 45 42 00\nbf 44 4a 42 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf f2 f6 41 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 73 d5 fe ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 81 42 42 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 f2 f6 41 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 f2 f6 41 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 81 42 42 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 d3 d3 fe ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd 78 45 42 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 37 d5 fe ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 37 d7 fe ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 a1 ce fe ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 73 44 00 00\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 c9 d3 fe ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 92 d3 fe ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 81 42 42 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 56 c8 fe ff\n'
p3505
S'.text:00000000004152c0\n.text:00000000004152c1\n.text:00000000004152c3\n.text:00000000004152c5\n.text:00000000004152c7\n.text:00000000004152c9\n.text:00000000004152ca\n.text:00000000004152d1\n.text:00000000004152d4\n.text:00000000004152d7\n.text:00000000004152da\n.text:00000000004152df\n.text:00000000004152e4\n.text:00000000004152e9\n.text:00000000004152ee\n.text:00000000004152f6\n.text:00000000004152fa\n.text:0000000000415300\n.text:0000000000415308\n.text:000000000041530d\n.text:0000000000415315\n.text:000000000041531a\n.text:000000000041531e\n.text:0000000000415320\n.text:0000000000415323\n.text:0000000000415326\n.text:0000000000415329\n.text:000000000041532e\n.text:0000000000415331\n.text:0000000000415334\n.text:0000000000415337\n.text:000000000041533a\n.text:000000000041533c\n.text:000000000041533f\n.text:0000000000415344\n.text:0000000000415347\n.text:000000000041534c\n.text:0000000000415353\n.text:0000000000415358\n.text:000000000041535b\n.text:0000000000415360\n.text:0000000000415365\n.text:000000000041536a\n.text:000000000041536d\n.text:0000000000415372\n.text:0000000000415377\n.text:000000000041537c\n.text:000000000041537e\n.text:0000000000415380\n.text:0000000000415385\n.text:0000000000415387\n.text:000000000041538a\n.text:000000000041538c\n.text:000000000041538e\n.text:0000000000415390\n.text:0000000000415393\n.text:0000000000415395\n.text:000000000041539a\n.text:000000000041539e\n.text:00000000004153a4\n.text:00000000004153a7\n.text:00000000004153a9\n.text:00000000004153ab\n.text:00000000004153ad\n.text:00000000004153b0\n.text:00000000004153b5\n.text:00000000004153b8\n.text:00000000004153bd\n.text:00000000004153c2\n.text:00000000004153c5\n.text:00000000004153c8\n.text:00000000004153cb\n.text:00000000004153ce\n.text:00000000004153d3\n.text:00000000004153d6\n.text:00000000004153d9\n.text:00000000004153de\n.text:00000000004153e1\n.text:00000000004153e3\n.text:00000000004153e6\n.text:00000000004153e8\n.text:00000000004153ea\n.text:00000000004153ed\n.text:00000000004153f2\n.text:00000000004153f7\n.text:00000000004153fc\n.text:00000000004153ff\n.text:0000000000415405\n.text:0000000000415407\n.text:000000000041540a\n.text:000000000041540d\n.text:0000000000415410\n.text:0000000000415412\n.text:0000000000415414\n.text:0000000000415417\n.text:000000000041541a\n.text:000000000041541f\n.text:0000000000415422\n.text:0000000000415424\n.text:0000000000415427\n.text:0000000000415429\n.text:000000000041542e\n.text:0000000000415431\n.text:0000000000415436\n.text:000000000041543c\n.text:0000000000415442\n.text:0000000000415444\n.text:0000000000415449\n.text:000000000041544f\n.text:0000000000415452\n.text:0000000000415455\n.text:0000000000415458\n.text:000000000041545a\n.text:000000000041545f\n.text:0000000000415462\n.text:0000000000415468\n.text:000000000041546d\n.text:0000000000415473\n.text:0000000000415476\n.text:0000000000415479\n.text:000000000041547c\n.text:0000000000415484\n.text:0000000000415486\n.text:0000000000415488\n.text:000000000041548b\n.text:000000000041548f\n.text:0000000000415491\n.text:0000000000415494\n.text:0000000000415498\n.text:000000000041549a\n.text:000000000041549d\n.text:00000000004154a0\n.text:00000000004154a3\n.text:00000000004154a5\n.text:00000000004154a9\n.text:00000000004154ab\n.text:00000000004154af\n.text:00000000004154b2\n.text:00000000004154b5\n.text:00000000004154b8\n.text:00000000004154ba\n.text:00000000004154be\n.text:00000000004154c7\n.text:00000000004154ca\n.text:00000000004154cc\n.text:00000000004154d0\n.text:00000000004154d2\n.text:00000000004154d6\n.text:00000000004154d8\n.text:00000000004154db\n.text:00000000004154df\n.text:00000000004154e1\n.text:00000000004154e4\n.text:00000000004154e8\n.text:00000000004154ed\n.text:00000000004154f0\n.text:00000000004154f4\n.text:00000000004154fc\n.text:00000000004154ff\n.text:0000000000415502\n.text:0000000000415504\n.text:0000000000415508\n.text:000000000041550b\n.text:000000000041550d\n.text:0000000000415512\n.text:0000000000415516\n.text:000000000041551b\n.text:0000000000415520\n.text:0000000000415524\n.text:000000000041552a\n.text:0000000000415530\n.text:0000000000415535\n.text:000000000041553b\n.text:0000000000415540\n.text:0000000000415542\n.text:0000000000415547\n.text:000000000041554b\n.text:000000000041554d\n.text:0000000000415551\n.text:0000000000415553\n.text:0000000000415555\n.text:0000000000415558\n.text:000000000041555d\n.text:000000000041555f\n.text:0000000000415564\n.text:0000000000415569\n.text:000000000041556d\n.text:0000000000415572\n.text:0000000000415577\n.text:000000000041557a\n.text:000000000041557d\n.text:000000000041557f\n.text:0000000000415581\n.text:0000000000415586\n.text:000000000041558a\n.text:0000000000415590\n.text:0000000000415592\n.text:0000000000415594\n.text:0000000000415596\n.text:000000000041559e\n.text:00000000004155a3\n.text:00000000004155a9\n.text:00000000004155ab\n.text:00000000004155b0\n.text:00000000004155b6\n.text:00000000004155bf\n.text:00000000004155c5\n.text:00000000004155d0\n.text:00000000004155d2\n.text:00000000004155d5\n.text:00000000004155d9\n.text:00000000004155e1\n.text:00000000004155e4\n.text:00000000004155e9\n.text:00000000004155eb\n.text:00000000004155ee\n.text:00000000004155f0\n.text:00000000004155f5\n.text:00000000004155f8\n.text:00000000004155fd\n.text:0000000000415600\n.text:0000000000415605\n.text:0000000000415609\n.text:000000000041560e\n.text:0000000000415610\n.text:0000000000415612\n.text:0000000000415618\n.text:000000000041561d\n.text:0000000000415622\n.text:0000000000415625\n.text:000000000041562a\n.text:000000000041562e\n.text:0000000000415633\n.text:0000000000415638\n.text:000000000041563a\n.text:000000000041563c\n.text:0000000000415641\n.text:0000000000415643\n.text:0000000000415646\n.text:000000000041564c\n.text:000000000041564f\n.text:0000000000415655\n.text:0000000000415658\n.text:000000000041565e\n.text:0000000000415663\n.text:0000000000415667\n.text:000000000041566d\n.text:0000000000415670\n.text:0000000000415673\n.text:0000000000415677\n.text:000000000041567a\n.text:000000000041567c\n.text:000000000041567f\n.text:0000000000415685\n.text:000000000041568a\n.text:000000000041568f\n.text:0000000000415695\n.text:0000000000415698\n.text:000000000041569e\n.text:00000000004156a1\n.text:00000000004156a3\n.text:00000000004156a5\n.text:00000000004156a7\n.text:00000000004156a9\n.text:00000000004156ac\n.text:00000000004156ae\n.text:00000000004156b3\n.text:00000000004156b8\n.text:00000000004156bb\n.text:00000000004156bd\n.text:00000000004156c2\n.text:00000000004156c7\n.text:00000000004156ca\n.text:00000000004156cc\n.text:00000000004156d1\n.text:00000000004156d5\n.text:00000000004156d8\n.text:00000000004156db\n.text:00000000004156dd\n.text:00000000004156e2\n.text:00000000004156e7\n.text:00000000004156e9\n.text:00000000004156ec\n.text:00000000004156ef\n.text:00000000004156f5\n.text:00000000004156f9\n.text:00000000004156fc\n.text:0000000000415702\n.text:0000000000415706\n.text:0000000000415709\n.text:000000000041570c\n.text:0000000000415712\n.text:0000000000415715\n.text:0000000000415717\n.text:000000000041571c\n.text:0000000000415721\n.text:0000000000415724\n.text:0000000000415726\n.text:000000000041572b\n.text:000000000041572f\n.text:0000000000415734\n.text:000000000041573a\n.text:000000000041573f\n.text:0000000000415741\n.text:0000000000415746\n.text:000000000041574c\n.text:000000000041574e\n.text:0000000000415750\n.text:0000000000415752\n.text:0000000000415754\n.text:0000000000415759\n.text:000000000041575f\n.text:0000000000415761\n.text:0000000000415763\n.text:0000000000415768\n.text:000000000041576e\n.text:0000000000415770\n.text:0000000000415772\n.text:0000000000415777\n.text:0000000000415779\n.text:000000000041577f\n.text:0000000000415784\n.text:000000000041578a\n.text:000000000041578d\n.text:0000000000415790\n.text:0000000000415796\n.text:000000000041579b\n.text:000000000041579e\n.text:00000000004157a1\n.text:00000000004157a7\n.text:00000000004157aa\n.text:00000000004157b0\n.text:00000000004157b3\n.text:00000000004157b5\n.text:00000000004157ba\n.text:00000000004157bf\n.text:00000000004157c2\n.text:00000000004157c4\n.text:00000000004157c9\n.text:00000000004157ce\n.text:00000000004157d1\n.text:00000000004157d3\n.text:00000000004157d8\n.text:00000000004157dc\n.text:00000000004157de\n.text:00000000004157e3\n.text:00000000004157e6\n.text:00000000004157e9\n.text:00000000004157ef\n.text:00000000004157f2\n.text:00000000004157f8\n.text:00000000004157fb\n.text:0000000000415801\n.text:0000000000415806\n.text:0000000000415809\n.text:000000000041580f\n.text:0000000000415812\n.text:0000000000415818\n.text:000000000041581b\n.text:000000000041581d\n.text:0000000000415821\n.text:0000000000415827\n.text:000000000041582c\n.text:0000000000415830\n.text:0000000000415839\n.text:000000000041583f\n.text:0000000000415844\n.text:0000000000415849\n.text:000000000041584e\n.text:0000000000415851\n.text:0000000000415856\n.text:0000000000415859\n.text:000000000041585c\n.text:0000000000415861\n.text:0000000000415866\n.text:000000000041586a\n.text:000000000041586f\n.text:0000000000415874\n.text:0000000000415878\n.text:000000000041587a\n.text:000000000041587f\n.text:0000000000415885\n.text:0000000000415888\n.text:000000000041588a\n.text:000000000041588d\n.text:0000000000415890\n.text:0000000000415896\n.text:000000000041589b\n.text:000000000041589e\n.text:00000000004158a1\n.text:00000000004158a4\n.text:00000000004158a7\n.text:00000000004158a9\n.text:00000000004158ad\n.text:00000000004158af\n.text:00000000004158b4\n.text:00000000004158b9\n.text:00000000004158bf\n.text:00000000004158d0\n.text:00000000004158d5\n.text:00000000004158d7\n.text:00000000004158da\n.text:00000000004158dc\n.text:00000000004158df\n.text:00000000004158e1\n.text:00000000004158e4\n.text:00000000004158e6\n.text:00000000004158eb\n.text:00000000004158f0\n.text:00000000004158f3\n.text:00000000004158f5\n.text:00000000004158fa\n.text:00000000004158fe\n.text:0000000000415906\n.text:0000000000415909\n.text:000000000041590c\n.text:000000000041590e\n.text:0000000000415912\n.text:0000000000415920\n.text:0000000000415924\n.text:000000000041592a\n.text:000000000041592d\n.text:000000000041592f\n.text:0000000000415934\n.text:0000000000415937\n.text:0000000000415939\n.text:0000000000415940\n.text:0000000000415943\n.text:0000000000415948\n.text:000000000041594b\n.text:0000000000415950\n.text:0000000000415952\n.text:0000000000415955\n.text:000000000041595b\n.text:000000000041595e\n.text:0000000000415960\n.text:0000000000415964\n.text:0000000000415966\n.text:0000000000415968\n.text:000000000041596b\n.text:000000000041596d\n.text:0000000000415972\n.text:0000000000415977\n.text:000000000041597a\n.text:000000000041597c\n.text:0000000000415981\n.text:0000000000415986\n.text:0000000000415989\n.text:000000000041598b\n.text:0000000000415990\n.text:0000000000415994\n.text:0000000000415996\n.text:000000000041599a\n.text:000000000041599d\n.text:000000000041599f\n.text:00000000004159a4\n.text:00000000004159a9\n.text:00000000004159ac\n.text:00000000004159ae\n.text:00000000004159b1\n.text:00000000004159b4\n.text:00000000004159b7\n.text:00000000004159bb\n.text:00000000004159c0\n.text:00000000004159c3\n.text:00000000004159c5\n.text:00000000004159c8\n.text:00000000004159cb\n.text:00000000004159ce\n.text:00000000004159d1\n.text:00000000004159d5\n.text:00000000004159d9\n.text:00000000004159dd\n.text:00000000004159e1\n.text:00000000004159e3\n.text:00000000004159e7\n.text:00000000004159ea\n.text:00000000004159f0\n.text:00000000004159f4\n.text:00000000004159f8\n.text:00000000004159fe\n.text:0000000000415a03\n.text:0000000000415a06\n.text:0000000000415a09\n.text:0000000000415a0e\n.text:0000000000415a11\n.text:0000000000415a13\n.text:0000000000415a16\n.text:0000000000415a1d\n.text:0000000000415a23\n.text:0000000000415a25\n.text:0000000000415a29\n.text:0000000000415a2f\n.text:0000000000415a34\n.text:0000000000415a39\n.text:0000000000415a3f\n.text:0000000000415a42\n.text:0000000000415a44\n.text:0000000000415a49\n.text:0000000000415a4f\n.text:0000000000415a54\n.text:0000000000415a56\n.text:0000000000415a5b\n.text:0000000000415a61\n.text:0000000000415a63\n.text:0000000000415a66\n.text:0000000000415a6a\n.text:0000000000415a70\n.text:0000000000415a75\n.text:0000000000415a81\n.text:0000000000415a85\n.text:0000000000415a87\n.text:0000000000415a8a\n.text:0000000000415a8f\n.text:0000000000415a94\n.text:0000000000415a97\n.text:0000000000415a9b\n.text:0000000000415aa0\n.text:0000000000415aa2\n.text:0000000000415aa6\n.text:0000000000415aa8\n.text:0000000000415ab0\n.text:0000000000415ab5\n.text:0000000000415aba\n.text:0000000000415abe\n.text:0000000000415ac2\n.text:0000000000415aca\n.text:0000000000415acd\n.text:0000000000415ad2\n.text:0000000000415ad5\n.text:0000000000415ad8\n.text:0000000000415add\n.text:0000000000415ae0\n.text:0000000000415ae3\n.text:0000000000415ae9\n.text:0000000000415aed\n.text:0000000000415af7\n.text:0000000000415afd\n.text:0000000000415b01\n.text:0000000000415b06\n.text:0000000000415b0c\n.text:0000000000415b10\n.text:0000000000415b13\n.text:0000000000415b17\n.text:0000000000415b19\n.text:0000000000415b1e\n.text:0000000000415b23\n.text:0000000000415b27\n.text:0000000000415b29\n.text:0000000000415b2e\n.text:0000000000415b33\n.text:0000000000415b37\n.text:0000000000415b3c\n.text:0000000000415b40\n.text:0000000000415b44\n.text:0000000000415b47\n.text:0000000000415b4a\n.text:0000000000415b4c\n.text:0000000000415b50\n.text:0000000000415b56\n.text:0000000000415b59\n.text:0000000000415b5c\n.text:0000000000415b5e\n.text:0000000000415b62\n.text:0000000000415b67\n.text:0000000000415b69\n.text:0000000000415b6b\n.text:0000000000415b73\n.text:0000000000415b78\n.text:0000000000415b7b\n.text:0000000000415b83\n.text:0000000000415b86\n.text:0000000000415b89\n.text:0000000000415b8e\n.text:0000000000415b91\n.text:0000000000415b93\n.text:0000000000415b98\n.text:0000000000415b9d\n.text:0000000000415ba3\n.text:0000000000415ba8\n.text:0000000000415bab\n.text:0000000000415bb0\n.text:0000000000415bb6\n.text:0000000000415bbb\n.text:0000000000415bc0\n.text:0000000000415bc6\n.text:0000000000415bca\n.text:0000000000415bcd\n.text:0000000000415bd3\n.text:0000000000415bd9\n.text:0000000000415bdf\n.text:0000000000415be4\n.text:0000000000415be6\n.text:0000000000415be9\n.text:0000000000415bef\n.text:0000000000415bf3\n.text:0000000000415bf5\n.text:0000000000415bff\n.text:0000000000415c03\n.text:0000000000415c09\n.text:0000000000415c0c\n.text:0000000000415c0e\n.text:0000000000415c14\n.text:0000000000415c17\n.text:0000000000415c19\n.text:0000000000415c1e\n.text:0000000000415c23\n.text:0000000000415c26\n.text:0000000000415c2a\n.text:0000000000415c2c\n.text:0000000000415c31\n.text:0000000000415c36\n.text:0000000000415c39\n.text:0000000000415c3b\n.text:0000000000415c40\n.text:0000000000415c45\n.text:0000000000415c48\n.text:0000000000415c4a\n.text:0000000000415c4f\n.text:0000000000415c53\n.text:0000000000415c55\n.text:0000000000415c58\n.text:0000000000415c5b\n.text:0000000000415c60\n.text:0000000000415c66\n.text:0000000000415c68\n.text:0000000000415c6d\n.text:0000000000415c72\n.text:0000000000415c78\n.text:0000000000415c80\n.text:0000000000415c85\n.text:0000000000415c87\n.text:0000000000415c8c\n.text:0000000000415c8f\n.text:0000000000415c91\n.text:0000000000415c94\n.text:0000000000415c96\n.text:0000000000415c99\n.text:0000000000415c9c\n.text:0000000000415c9f\n.text:0000000000415ca1\n.text:0000000000415ca9\n.text:0000000000415cac\n.text:0000000000415cae\n.text:0000000000415cb0\n.text:0000000000415cc0\n.text:0000000000415cc3\n.text:0000000000415cc5\n.text:0000000000415cc8\n.text:0000000000415cce\n.text:0000000000415cd1\n.text:0000000000415cd3\n.text:0000000000415cd5\n.text:0000000000415cd7\n.text:0000000000415cd9\n.text:0000000000415cdc\n.text:0000000000415cde\n.text:0000000000415ce3\n.text:0000000000415ce8\n.text:0000000000415ceb\n.text:0000000000415ced\n.text:0000000000415cf2\n.text:0000000000415cf7\n.text:0000000000415cfa\n.text:0000000000415cfc\n.text:0000000000415d01\n.text:0000000000415d05\n.text:0000000000415d08\n.text:0000000000415d0b\n.text:0000000000415d0d\n.text:0000000000415d12\n.text:0000000000415d15\n.text:0000000000415d18\n.text:0000000000415d1a\n.text:0000000000415d20\n.text:0000000000415d24\n.text:0000000000415d26\n.text:0000000000415d28\n.text:0000000000415d2a\n.text:0000000000415d2d\n.text:0000000000415d2f\n.text:0000000000415d34\n.text:0000000000415d39\n.text:0000000000415d3c\n.text:0000000000415d3e\n.text:0000000000415d43\n.text:0000000000415d47\n.text:0000000000415d49\n.text:0000000000415d4c\n.text:0000000000415d4e\n.text:0000000000415d52\n.text:0000000000415d55\n.text:0000000000415d58\n.text:0000000000415d5c\n.text:0000000000415d62\n.text:0000000000415d67\n.text:0000000000415d6f\n.text:0000000000415d74\n.text:0000000000415d76\n.text:0000000000415d7e\n.text:0000000000415d83\n.text:0000000000415d85\n.text:0000000000415d8a\n.text:0000000000415d8f\n.text:0000000000415d93\n.text:0000000000415d95\n.text:0000000000415d9a\n.text:0000000000415d9d\n.text:0000000000415da0\n.text:0000000000415da2\n.text:0000000000415daa\n.text:0000000000415dac\n.text:0000000000415db4\n.text:0000000000415db9\n.text:0000000000415dbd\n.text:0000000000415dc2\n.text:0000000000415dc7\n.text:0000000000415dcb\n.text:0000000000415dd0\n.text:0000000000415dd5\n.text:0000000000415dd9\n.text:0000000000415ddd\n.text:0000000000415de3\n.text:0000000000415de8\n.text:0000000000415df0\n.text:0000000000415df2\n.text:0000000000415df4\n.text:0000000000415df8\n.text:0000000000415dfd\n.text:0000000000415e03\n.text:0000000000415e10\n.text:0000000000415e13\n.text:0000000000415e19\n.text:0000000000415e1c\n.text:0000000000415e1e\n.text:0000000000415e21\n.text:0000000000415e23\n.text:0000000000415e26\n.text:0000000000415e28\n.text:0000000000415e30\n.text:0000000000415e36\n.text:0000000000415e3a\n.text:0000000000415e3d\n.text:0000000000415e41\n.text:0000000000415e46\n.text:0000000000415e4a\n.text:0000000000415e4e\n.text:0000000000415e51\n.text:0000000000415e54\n.text:0000000000415e57\n.text:0000000000415e5b\n.text:0000000000415e5f\n.text:0000000000415e61\n.text:0000000000415e66\n.text:0000000000415e6a\n.text:0000000000415e6d\n.text:0000000000415e70\n.text:0000000000415e77\n.text:0000000000415e78\n.text:0000000000415e7a\n.text:0000000000415e7c\n.text:0000000000415e7e\n.text:0000000000415e80\n.text:0000000000415e81\n.text:0000000000415e82\n.text:0000000000415e8a\n.text:0000000000415e8d\n.text:0000000000415e8f\n.text:0000000000415e92\n.text:0000000000415e94\n.text:0000000000415e96\n.text:0000000000415e98\n.text:0000000000415e9a\n.text:0000000000415e9d\n.text:0000000000415ea0\n.text:0000000000415ea3\n.text:0000000000415ea5\n.text:0000000000415ea9\n.text:0000000000415eac\n.text:0000000000415eaf\n.text:0000000000415eb2\n.text:0000000000415eb4\n.text:0000000000415eb6\n.text:0000000000415eb9\n.text:0000000000415ebb\n.text:0000000000415ec0\n.text:0000000000415ec2\n.text:0000000000415ec7\n.text:0000000000415ecc\n.text:0000000000415ecf\n.text:0000000000415ed1\n.text:0000000000415ed6\n.text:0000000000415ed9\n.text:0000000000415ede\n.text:0000000000415ee1\n.text:0000000000415ee7\n.text:0000000000415eed\n.text:0000000000415ef0\n.text:0000000000415ef5\n'
p3506
tp3507
sS'parse_fstype'
p3508
(S'\n__stdcall parse_fstype(parser_table * entry, char * * argv, int * arg_ptr)\n'
p3509
V\u000a_Bool parse_fstype(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  char *in_RAX;\u000a  predicate *ppVar2;\u000a  float fVar3;\u000a  char *local_18;\u000a  \u000a  local_18 = in_RAX;\u000a  _Var1 = collect_arg(argv,arg_ptr,&local_18);\u000a  if (_Var1 != false) {\u000a    if ((options.optimisation_level < 2) || (_Var1 = is_used_fs_type(local_18), _Var1 != false)) {\u000a      ppVar2 = insert_primary(entry,local_18);\u000a      *(char **)ppVar2->args = local_18;\u000a      fVar3 = estimate_fstype_success_rate(local_18);\u000a      ppVar2->est_success_rate = fVar3;\u000a    }\u000a    else {\u000a      if (((byte)options.debug_options & 8) != 0) {\u000a        fprintf(stderr,"-fstype %s can never succeed, substituting -false\u005cn",local_18);\u000a      }\u000a      insert_false();\u000a    }\u000a    return true;\u000a  }\u000a  return false;\u000a}\u000a\u000a
p3510
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV RAX,RSP\nMOV RDI,RSI\nMOV RSI,RDX\nMOV RDX,RAX\nCALL 0x0040c7f0\nTEST AL,AL\nJZ 0x0040b64b\nMOVZX EAX,word ptr [0x0062f0a8]\nCMP EAX,0x2\nJC 0x0040b625\nMOV RDI,qword ptr [RSP]\nCALL 0x0040d200\nTEST AL,AL\nJZ 0x0040b64f\nMOV RBX,qword ptr [RSP]\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00407730\nMOV R14,RAX\nMOV qword ptr [R14 + 0x38],RBX\nMOV RDI,RBX\nCALL 0x0040d260\nMOVSS dword ptr [R14 + 0x24],XMM0\nJMP 0x0040b65d\nXOR EAX,EAX\nJMP 0x0040b65f\nTEST byte ptr [0x0062f080],0x8\nJNZ 0x0040b667\nCALL 0x0040d2c0\nMOV AL,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RDI,qword ptr [0x0062de60]\nMOV RDX,qword ptr [RSP]\nMOV ESI,0x421531\nXOR EAX,EAX\nCALL 0x00402ba0\nJMP 0x0040b658\n'
p3511
S'41 56\n53\n50\n49 89 fe\n48 89 e0\n48 89 f7\n48 89 d6\n48 89 c2\ne8 e8 11 00 00\n84 c0\n74 3f\n0f b7 05 95 3a 22 00\n83 f8 02\n72 0d\n48 8b 3c 24\ne8 df 1b 00 00\n84 c0\n74 2a\n48 8b 1c 24\n4c 89 f7\n48 89 de\ne8 fc c0 ff ff\n49 89 c6\n49 89 5e 38\n48 89 df\ne8 1d 1c 00 00\nf3 41 0f 11 46 24\neb 12\n31 c0\neb 10\nf6 05 2a 3a 22 00 08\n75 0f\ne8 63 1c 00 00\nb0 01\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 3d f2 27 22 00\n48 8b 14 24\nbe 31 15 42 00\n31 c0\ne8 22 75 ff ff\neb d8\n'
p3512
S'.text:000000000040b5f0\n.text:000000000040b5f2\n.text:000000000040b5f3\n.text:000000000040b5f4\n.text:000000000040b5f7\n.text:000000000040b5fa\n.text:000000000040b5fd\n.text:000000000040b600\n.text:000000000040b603\n.text:000000000040b608\n.text:000000000040b60a\n.text:000000000040b60c\n.text:000000000040b613\n.text:000000000040b616\n.text:000000000040b618\n.text:000000000040b61c\n.text:000000000040b621\n.text:000000000040b623\n.text:000000000040b625\n.text:000000000040b629\n.text:000000000040b62c\n.text:000000000040b62f\n.text:000000000040b634\n.text:000000000040b637\n.text:000000000040b63b\n.text:000000000040b63e\n.text:000000000040b643\n.text:000000000040b649\n.text:000000000040b64b\n.text:000000000040b64d\n.text:000000000040b64f\n.text:000000000040b656\n.text:000000000040b658\n.text:000000000040b65d\n.text:000000000040b65f\n.text:000000000040b663\n.text:000000000040b664\n.text:000000000040b666\n.text:000000000040b667\n.text:000000000040b66e\n.text:000000000040b672\n.text:000000000040b677\n.text:000000000040b679\n.text:000000000040b67e\n'
p3513
tp3514
sS'fatal_target_file_error'
p3515
(S'\n__stdcall fatal_target_file_error(char * name)\n'
p3516
V\u000avoid fatal_target_file_error(char *name)\u000a\u000a{\u000a  report_file_err((char *)0x1);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p3517
S'PUSH RAX\nMOV RAX,RSI\nMOV ECX,EDI\nMOV EDI,0x1\nMOV EDX,0x1\nMOV ESI,ECX\nMOV RCX,RAX\nCALL 0x00408940\nCALL 0x00402750\n'
p3518
S'50\n48 89 f0\n89 f9\nbf 01 00 00 00\nba 01 00 00 00\n89 ce\n48 89 c1\ne8 86 ff ff ff\ne8 91 9d ff ff\n'
p3519
S'.text:00000000004089a0\n.text:00000000004089a1\n.text:00000000004089a4\n.text:00000000004089a6\n.text:00000000004089ab\n.text:00000000004089b0\n.text:00000000004089b2\n.text:00000000004089b5\n.text:00000000004089ba\n'
p3520
tp3521
sS'get_new_pred_chk_op'
p3522
(S'\n__stdcall get_new_pred_chk_op(parser_table * entry, char * arg)\n'
p3523
V\u000apredicate * get_new_pred_chk_op(parser_table *entry,char *arg)\u000a\u000a{\u000a  predicate_type pVar1;\u000a  parser_table *entry_and;\u000a  undefined8 uVar2;\u000a  predicate *ppVar3;\u000a  \u000a  if (entry_and == (parser_table *)0x0) {\u000a    entry_and = find_parser("and");\u000a    if (entry_and == (parser_table *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("entry_and != NULL","tree.c",0x5f2,\u000a                                        \u000a                    "struct predicate *get_new_pred_chk_op(const struct parser_table *, const char *)"\u000a                   );\u000a    }\u000a  }\u000a  if (last_pred != (predicate *)0x0) {\u000a    pVar1 = last_pred->p_type;\u000a    if ((pVar1 == CLOSE_PAREN) || (pVar1 == PRIMARY_TYPE)) {\u000a      ppVar3 = get_new_pred_noarg(entry_and);\u000a      ppVar3->pred_func = pred_and;\u000a      ppVar3->p_name = "-a";\u000a      *(undefined8 *)&ppVar3->p_type = 0x300000003;\u000a      ppVar3->need_inum = false;\u000a      *(undefined4 *)&ppVar3->side_effects = 0;\u000a      *(undefined4 *)&ppVar3->arg_text = 0;\u000a      *(undefined4 *)((long)&ppVar3->arg_text + 4) = 0;\u000a      *(undefined4 *)ppVar3->args = 0;\u000a      *(undefined4 *)(ppVar3->args + 4) = 0;\u000a    }\u000a    else {\u000a      if (pVar1 == NO_TYPE) {\u000a        uVar2 = dcgettext(0,"oops -- invalid default insertion of and!",5);\u000a        error(1,0,uVar2,uVar2);\u000a      }\u000a    }\u000a  }\u000a  ppVar3 = get_new_pred(entry);\u000a  ppVar3->arg_text = arg;\u000a  ppVar3->parser_entry = entry;\u000a  return ppVar3;\u000a}\u000a\u000a
p3524
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [0x0062deb0]\nTEST RAX,RAX\nJNZ 0x00406c30\nMOV EDI,0x41d758\nCALL 0x0040a7f0\nMOV qword ptr [0x0062deb0],RAX\nTEST RAX,RAX\nJZ 0x00406cc6\nMOV RCX,qword ptr [0x0062dea8]\nTEST RCX,RCX\nJZ 0x00406cab\nMOV ECX,dword ptr [RCX + 0x10]\nCMP ECX,0x5\nJZ 0x00406c74\nCMP ECX,0x1\nJZ 0x00406c74\nTEST ECX,ECX\nJNZ 0x00406cab\nXOR EDI,EDI\nMOV ESI,0x41d7bf\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402d90\nJMP 0x00406cab\nMOV RDI,RAX\nCALL 0x00406b00\nMOV qword ptr [RAX],0x403c90\nMOV qword ptr [RAX + 0x8],0x41d7e9\nMOV RCX,0x300000003\nMOV qword ptr [RAX + 0x10],RCX\nMOV byte ptr [RAX + 0x1c],0x0\nMOV dword ptr [RAX + 0x18],0x0\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RAX + 0x30],XMM0\nMOV RDI,RBX\nCALL 0x00406b20\nMOV qword ptr [RAX + 0x30],R14\nMOV qword ptr [0x130 + RAX],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV EDI,0x41d75c\nMOV ESI,0x41d4d0\nMOV EDX,0x5f2\nMOV ECX,0x41d76e\nCALL 0x00402a40\n'
p3525
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n48 8b 05 9f 72 22 00\n48 85 c0\n75 1a\nbf 58 d7 41 00\ne8 d0 3b 00 00\n48 89 05 89 72 22 00\n48 85 c0\n0f 84 96 00 00 00\n48 8b 0d 71 72 22 00\n48 85 c9\n74 6f\n8b 49 10\n83 f9 05\n74 30\n83 f9 01\n74 2b\n85 c9\n75 5e\n31 ff\nbe bf d7 41 00\nba 05 00 00 00\ne8 b2 bc ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 1e c1 ff ff\neb 37\n48 89 c7\ne8 84 fe ff ff\n48 c7 00 90 3c 40 00\n48 c7 40 08 e9 d7 41 00\n48 b9 03 00 00 00 03 00 00 00\n48 89 48 10\nc6 40 1c 00\nc7 40 18 00 00 00 00\n0f 57 c0\n0f 11 40 30\n48 89 df\ne8 6d fe ff ff\n4c 89 70 30\n48 89 98 30 01 00 00\n48 83 c4 08\n5b\n41 5e\nc3\nbf 5c d7 41 00\nbe d0 d4 41 00\nba f2 05 00 00\nb9 6e d7 41 00\ne8 61 bd ff ff\n'
p3526
S'.text:0000000000406c00\n.text:0000000000406c02\n.text:0000000000406c03\n.text:0000000000406c04\n.text:0000000000406c07\n.text:0000000000406c0a\n.text:0000000000406c11\n.text:0000000000406c14\n.text:0000000000406c16\n.text:0000000000406c1b\n.text:0000000000406c20\n.text:0000000000406c27\n.text:0000000000406c2a\n.text:0000000000406c30\n.text:0000000000406c37\n.text:0000000000406c3a\n.text:0000000000406c3c\n.text:0000000000406c3f\n.text:0000000000406c42\n.text:0000000000406c44\n.text:0000000000406c47\n.text:0000000000406c49\n.text:0000000000406c4b\n.text:0000000000406c4d\n.text:0000000000406c4f\n.text:0000000000406c54\n.text:0000000000406c59\n.text:0000000000406c5e\n.text:0000000000406c61\n.text:0000000000406c66\n.text:0000000000406c68\n.text:0000000000406c6a\n.text:0000000000406c6d\n.text:0000000000406c72\n.text:0000000000406c74\n.text:0000000000406c77\n.text:0000000000406c7c\n.text:0000000000406c83\n.text:0000000000406c8b\n.text:0000000000406c95\n.text:0000000000406c99\n.text:0000000000406c9d\n.text:0000000000406ca4\n.text:0000000000406ca7\n.text:0000000000406cab\n.text:0000000000406cae\n.text:0000000000406cb3\n.text:0000000000406cb7\n.text:0000000000406cbe\n.text:0000000000406cc2\n.text:0000000000406cc3\n.text:0000000000406cc5\n.text:0000000000406cc6\n.text:0000000000406ccb\n.text:0000000000406cd0\n.text:0000000000406cd5\n.text:0000000000406cda\n'
p3527
tp3528
sS'set_quoting_style'
p3529
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p3530
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p3531
S'TEST RDI,RDI\nMOV EAX,0x62e690\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p3532
S'48 85 ff\nb8 90 e6 62 00\n48 0f 45 c7\n89 30\nc3\n'
p3533
S'.text:00000000004151a0\n.text:00000000004151a3\n.text:00000000004151a8\n.text:00000000004151ac\n.text:00000000004151ae\n'
p3534
tp3535
sS'hash_get_entries'
p3536
(S'\n__stdcall hash_get_entries(Hash_table * table, void * * buffer, size_t buffer_size)\n'
p3537
V\u000asize_t hash_get_entries(Hash_table *table,void **buffer,size_t buffer_size)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  ulong uVar2;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar3 = table->bucket;\u000a  if (table->bucket_limit <= phVar3) {\u000a    return 0;\u000a  }\u000a  uVar2 = 0;\u000a  do {\u000a    phVar1 = phVar3;\u000a    if (phVar3->data != (void *)0x0) {\u000a      while (phVar1 != (hash_entry *)0x0) {\u000a        if (buffer_size <= uVar2) {\u000a          return uVar2;\u000a        }\u000a        buffer[uVar2] = phVar1->data;\u000a        uVar2 = uVar2 + 1;\u000a        phVar1 = phVar1->next;\u000a      }\u000a    }\u000a    phVar3 = phVar3 + 1;\u000a  } while (phVar3 < table->bucket_limit);\u000a  return uVar2;\u000a}\u000a\u000a
p3538
S'MOV R8,qword ptr [RDI]\nCMP R8,qword ptr [RDI + 0x8]\nJNC 0x00410713\nXOR EAX,EAX\nCMP qword ptr [R8],0x0\nJZ 0x00410708\nTEST R8,R8\nJZ 0x00410708\nMOV R9,R8\nNOP dword ptr [RAX]\nCMP RAX,RDX\nJNC 0x00410712\nMOV RCX,qword ptr [R9]\nMOV qword ptr [RSI + RAX*0x8],RCX\nINC RAX\nMOV R9,qword ptr [R9 + 0x8]\nTEST R9,R9\nJNZ 0x004106f0\nADD R8,0x10\nCMP R8,qword ptr [RDI + 0x8]\nJC 0x004106db\nRET\nXOR EAX,EAX\nRET\n'
p3539
S'4c 8b 07\n4c 3b 47 08\n73 3a\n31 c0\n49 83 38 00\n74 27\n4d 85 c0\n74 22\n4d 89 c1\n0f 1f 80 00 00 00 00\n48 39 d0\n73 1d\n49 8b 09\n48 89 0c c6\n48 ff c0\n4d 8b 49 08\n4d 85 c9\n75 e8\n49 83 c0 10\n4c 3b 47 08\n72 c9\nc3\n31 c0\nc3\n'
p3540
S'.text:00000000004106d0\n.text:00000000004106d3\n.text:00000000004106d7\n.text:00000000004106d9\n.text:00000000004106db\n.text:00000000004106df\n.text:00000000004106e1\n.text:00000000004106e4\n.text:00000000004106e6\n.text:00000000004106e9\n.text:00000000004106f0\n.text:00000000004106f3\n.text:00000000004106f5\n.text:00000000004106f8\n.text:00000000004106fc\n.text:00000000004106ff\n.text:0000000000410703\n.text:0000000000410706\n.text:0000000000410708\n.text:000000000041070c\n.text:0000000000410710\n.text:0000000000410712\n.text:0000000000410713\n.text:0000000000410715\n'
p3541
tp3542
sS'get_quoting_style'
p3543
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p3544
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p3545
S'TEST RDI,RDI\nMOV EAX,0x62e690\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p3546
S'48 85 ff\nb8 90 e6 62 00\n48 0f 45 c7\n8b 00\nc3\n'
p3547
S'.text:0000000000415190\n.text:0000000000415193\n.text:0000000000415198\n.text:000000000041519c\n.text:000000000041519e\n'
p3548
tp3549
sS'traverse_tree'
p3550
(S'\n__stdcall traverse_tree(predicate * tree, anon_subr_void_predicate_ptr * callback)\n'
p3551
V\u000avoid traverse_tree(predicate *tree,void (*callback)(predicate *))\u000a\u000a{\u000a  do {\u000a    if (tree->pred_left != (predicate *)0x0) {\u000a      traverse_tree(tree->pred_left,callback);\u000a    }\u000a    (*callback)(tree);\u000a    tree = tree->pred_right;\u000a  } while (tree != (predicate *)0x0);\u000a  return;\u000a}\u000a\u000a
p3552
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nNOP word ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [0x110 + RBX]\nTEST RDI,RDI\nJZ 0x00407ed4\nMOV RSI,R14\nCALL 0x00407eb0\nMOV RDI,RBX\nCALL R14\nMOV RBX,qword ptr [0x118 + RBX]\nTEST RBX,RBX\nJNZ 0x00407ec0\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p3553
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n66 0f 1f 44 00 00\n48 8b bb 10 01 00 00\n48 85 ff\n74 08\n4c 89 f6\ne8 dc ff ff ff\n48 89 df\n41 ff d6\n48 8b 9b 18 01 00 00\n48 85 db\n75 da\n48 83 c4 08\n5b\n41 5e\nc3\n'
p3554
S'.text:0000000000407eb0\n.text:0000000000407eb2\n.text:0000000000407eb3\n.text:0000000000407eb4\n.text:0000000000407eb7\n.text:0000000000407eba\n.text:0000000000407ec0\n.text:0000000000407ec7\n.text:0000000000407eca\n.text:0000000000407ecc\n.text:0000000000407ecf\n.text:0000000000407ed4\n.text:0000000000407ed7\n.text:0000000000407eda\n.text:0000000000407ee1\n.text:0000000000407ee4\n.text:0000000000407ee6\n.text:0000000000407eea\n.text:0000000000407eeb\n.text:0000000000407eed\n'
p3555
tp3556
sS'safe_hasher'
p3557
(S'\n__stdcall safe_hasher(Hash_table * table, void * key)\n'
p3558
V\u000ahash_entry * safe_hasher(Hash_table *table,void *key)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*table->hasher)(key,table->n_buckets);\u000a  if (sVar1 < table->n_buckets) {\u000a    return table->bucket + sVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p3559
S'PUSH RBX\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nMOV RDI,RSI\nMOV RSI,RAX\nCALL qword ptr [RBX + 0x30]\nCMP RAX,qword ptr [RBX + 0x10]\nJNC 0x00410600\nSHL RAX,0x4\nADD RAX,qword ptr [RBX]\nPOP RBX\nRET\nCALL 0x00402750\n'
p3560
S'53\n48 89 fb\n48 8b 43 10\n48 89 f7\n48 89 c6\nff 53 30\n48 3b 43 10\n73 09\n48 c1 e0 04\n48 03 03\n5b\nc3\ne8 4b 21 ff ff\n'
p3561
S'.text:00000000004105e0\n.text:00000000004105e1\n.text:00000000004105e4\n.text:00000000004105e8\n.text:00000000004105eb\n.text:00000000004105ee\n.text:00000000004105f1\n.text:00000000004105f5\n.text:00000000004105f7\n.text:00000000004105fb\n.text:00000000004105fe\n.text:00000000004105ff\n.text:0000000000410600\n'
p3562
tp3563
sS'careadlinkat'
p3564
(S'\n__stdcall careadlinkat(char * filename, char * buffer, size_t buffer_size, allocator * alloc, anon_subr_ssize_t_int_char_ptr_char_ptr_size_t * preadlinkat)\n'
p3565
V\u000achar * careadlinkat(char *filename,char *buffer,size_t buffer_size,allocator *alloc,\u000a                   ssize_t (*preadlinkat)(int,char *,char *,size_t))\u000a\u000a{\u000a  int iVar1;\u000a  allocator *paVar2;\u000a  int *piVar3;\u000a  allocator *paVar4;\u000a  allocator *__n;\u000a  allocator *paVar5;\u000a  char *pcVar6;\u000a  code *in_R9;\u000a  char *__dest;\u000a  char stack_buf [1024];\u000a  char local_438 [1032];\u000a  \u000a  paVar5 = &stdlib_allocator;\u000a  if (preadlinkat != (ssize_t (*)(int,char *,char *,size_t))0x0) {\u000a    paVar5 = (allocator *)preadlinkat;\u000a  }\u000a  paVar4 = (allocator *)0x400;\u000a  if (alloc != (allocator *)0x0) {\u000a    paVar4 = alloc;\u000a  }\u000a  __dest = (char *)buffer_size;\u000a  if (alloc == (allocator *)0x0) {\u000a    buffer_size = (size_t)local_438;\u000a    __dest = local_438;\u000a  }\u000a  do {\u000a    pcVar6 = buffer;\u000a    paVar2 = (allocator *)(*in_R9)((ulong)filename & 0xffffffff,buffer,buffer_size,paVar4);\u000a    if ((long)paVar2 < 0) {\u000a      piVar3 = __errno_location();\u000a      iVar1 = *piVar3;\u000a      if (iVar1 != 0x22) {\u000a        if ((char *)buffer_size == __dest) {\u000a          return (char *)0x0;\u000a        }\u000a        (*paVar5->free)((void *)buffer_size,(size_t)pcVar6);\u000a        *piVar3 = iVar1;\u000a        return (char *)0x0;\u000a      }\u000a    }\u000a    if (paVar2 < paVar4) {\u000a      __n = (allocator *)((long)&paVar2->allocate + 1);\u000a      ((char *)buffer_size)[(long)paVar2] = 0;\u000a      if ((char *)buffer_size != local_438) {\u000a        if ((char *)buffer_size == __dest) {\u000a          return (char *)buffer_size;\u000a        }\u000a        if (paVar4 <= __n) {\u000a          return (char *)buffer_size;\u000a        }\u000a        if (paVar5->reallocate == (void *(*)(void *,size_t))0x0) {\u000a          return (char *)buffer_size;\u000a        }\u000a        __dest = (char *)(*paVar5->reallocate)((void *)buffer_size,(size_t)__n);\u000a        if (__dest != (char *)0x0) {\u000a          return __dest;\u000a        }\u000a        return (char *)buffer_size;\u000a      }\u000a      __dest = (char *)(*paVar5->allocate)((size_t)__n);\u000a      if (__dest != (char *)0x0) {\u000a        memcpy(__dest,(void *)buffer_size,(size_t)__n);\u000a        return __dest;\u000a      }\u000a      break;\u000a    }\u000a    if ((char *)buffer_size != __dest) {\u000a      (*paVar5->free)((void *)buffer_size,(size_t)pcVar6);\u000a    }\u000a    if (paVar4 < (allocator *)0x4000000000000001) {\u000a      __n = (allocator *)((long)paVar4 * 2);\u000a    }\u000a    else {\u000a      __n = (allocator *)0x8000000000000000;\u000a      if ((long)paVar4 < 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = 0x24;\u000a        return (char *)0x0;\u000a      }\u000a    }\u000a    buffer_size = (size_t)(*paVar5->allocate)((size_t)__n);\u000a    paVar4 = __n;\u000a  } while ((char *)buffer_size != (char *)0x0);\u000a  if (paVar5->die != (void (*)(size_t))0x0) {\u000a    (*paVar5->die)(__n,(size_t)pcVar6);\u000a  }\u000a  piVar3 = __errno_location();\u000a  *piVar3 = 0xc;\u000a  return (char *)0x0;\u000a}\u000a\u000a
p3566
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x428\nMOV qword ptr [RSP + 0x18],R9\nMOV R14,RDX\nMOV qword ptr [RSP + 0x10],RSI\nMOV dword ptr [RSP + 0xc],EDI\nTEST R8,R8\nMOV EBP,0x4253b8\nCMOVNZ RBP,R8\nTEST RCX,RCX\nMOV EBX,0x400\nCMOVNZ RBX,RCX\nLEA RAX,[RSP + 0x20]\nCMOVZ R14,RAX\nMOV qword ptr [RSP],R14\nNOP word ptr [RAX + RAX*0x1]\nMOV EDI,dword ptr [RSP + 0xc]\nMOV RSI,qword ptr [RSP + 0x10]\nMOV RDX,R14\nMOV RCX,RBX\nCALL qword ptr [RSP + 0x18]\nMOV R12,RAX\nTEST R12,R12\nJNS 0x0040fcd1\nCALL 0x00402770\nMOV R13,RAX\nMOV R15D,dword ptr [R13]\nCMP R15D,0x22\nJNZ 0x0040fd7f\nCMP R12,RBX\nJC 0x0040fd38\nCMP R14,qword ptr [RSP]\nJZ 0x0040fce2\nMOV RDI,R14\nCALL qword ptr [RBP + 0x10]\nMOV RAX,0x4000000000000000\nCMP RBX,RAX\nJA 0x0040fd00\nADD RBX,RBX\nJMP 0x0040fd0f\nTEST RBX,RBX\nMOV RBX,-0x8000000000000000\nJS 0x0040fd72\nMOV RDI,RBX\nCALL qword ptr [RBP]\nMOV R14,RAX\nTEST R14,R14\nJNZ 0x0040fca0\nMOV RAX,qword ptr [RBP + 0x18]\nTEST RAX,RAX\nJZ 0x0040fd2b\nMOV RDI,RBX\nCALL RAX\nCALL 0x00402770\nMOV dword ptr [RAX],0xc\nJMP 0x0040fd8f\nMOV RAX,R12\nINC R12\nMOV byte ptr [R14 + RAX*0x1],0x0\nLEA RAX,[RSP + 0x20]\nCMP R14,RAX\nJZ 0x0040fda7\nCMP R14,qword ptr [RSP]\nJZ 0x0040fd92\nCMP R12,RBX\nJNC 0x0040fd92\nMOV RCX,qword ptr [RBP + 0x8]\nTEST RCX,RCX\nJZ 0x0040fd92\nMOV RDI,R14\nMOV RSI,R12\nCALL RCX\nTEST RAX,RAX\nCMOVNZ R14,RAX\nJMP 0x0040fd92\nCALL 0x00402770\nMOV dword ptr [RAX],0x24\nJMP 0x0040fd8f\nCMP R14,qword ptr [RSP]\nJZ 0x0040fd8f\nMOV RDI,R14\nCALL qword ptr [RBP + 0x10]\nMOV dword ptr [R13],R15D\nXOR R14D,R14D\nMOV RAX,R14\nADD RSP,0x428\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RDI,R12\nCALL qword ptr [RBP]\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040fdc8\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R12\nCALL 0x00402bd0\nMOV R14,RBX\nJMP 0x0040fd92\nMOV RBX,R12\nJMP 0x0040fd1d\n'
p3567
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 28 04 00 00\n4c 89 4c 24 18\n49 89 d6\n48 89 74 24 10\n89 7c 24 0c\n4d 85 c0\nbd b8 53 42 00\n49 0f 45 e8\n48 85 c9\nbb 00 04 00 00\n48 0f 45 d9\n48 8d 44 24 20\n4c 0f 44 f0\n4c 89 34 24\n66 0f 1f 84 00 00 00 00 00\n8b 7c 24 0c\n48 8b 74 24 10\n4c 89 f2\n48 89 d9\nff 54 24 18\n49 89 c4\n4d 85 e4\n79 16\ne8 b0 2a ff ff\n49 89 c5\n45 8b 7d 00\n41 83 ff 22\n0f 85 ae 00 00 00\n49 39 dc\n72 62\n4c 3b 34 24\n74 06\n4c 89 f7\nff 55 10\n48 b8 00 00 00 00 00 00 00 40\n48 39 c3\n77 0f\n48 01 db\neb 19\n48 85 db\n48 bb 00 00 00 00 00 00 00 80\n78 63\n48 89 df\nff 55 00\n49 89 c6\n4d 85 f6\n75 83\n48 8b 45 18\n48 85 c0\n74 05\n48 89 df\nff d0\ne8 40 2a ff ff\nc7 00 0c 00 00 00\neb 57\n4c 89 e0\n49 ff c4\n41 c6 04 06 00\n48 8d 44 24 20\n49 39 c6\n74 5a\n4c 3b 34 24\n74 3f\n49 39 dc\n73 3a\n48 8b 4d 08\n48 85 c9\n74 31\n4c 89 f7\n4c 89 e6\nff d1\n48 85 c0\n4c 0f 45 f0\neb 20\ne8 f9 29 ff ff\nc7 00 24 00 00 00\neb 10\n4c 3b 34 24\n74 0a\n4c 89 f7\nff 55 10\n45 89 7d 00\n45 31 f6\n4c 89 f0\n48 81 c4 28 04 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n4c 89 e7\nff 55 00\n48 89 c3\n48 85 db\n74 13\n48 89 df\n4c 89 f6\n4c 89 e2\ne8 0d 2e ff ff\n49 89 de\neb ca\n4c 89 e3\ne9 4d ff ff ff\n'
p3568
S'.text:000000000040fc50\n.text:000000000040fc51\n.text:000000000040fc53\n.text:000000000040fc55\n.text:000000000040fc57\n.text:000000000040fc59\n.text:000000000040fc5a\n.text:000000000040fc61\n.text:000000000040fc66\n.text:000000000040fc69\n.text:000000000040fc6e\n.text:000000000040fc72\n.text:000000000040fc75\n.text:000000000040fc7a\n.text:000000000040fc7e\n.text:000000000040fc81\n.text:000000000040fc86\n.text:000000000040fc8a\n.text:000000000040fc8f\n.text:000000000040fc93\n.text:000000000040fc97\n.text:000000000040fca0\n.text:000000000040fca4\n.text:000000000040fca9\n.text:000000000040fcac\n.text:000000000040fcaf\n.text:000000000040fcb3\n.text:000000000040fcb6\n.text:000000000040fcb9\n.text:000000000040fcbb\n.text:000000000040fcc0\n.text:000000000040fcc3\n.text:000000000040fcc7\n.text:000000000040fccb\n.text:000000000040fcd1\n.text:000000000040fcd4\n.text:000000000040fcd6\n.text:000000000040fcda\n.text:000000000040fcdc\n.text:000000000040fcdf\n.text:000000000040fce2\n.text:000000000040fcec\n.text:000000000040fcef\n.text:000000000040fcf1\n.text:000000000040fcf4\n.text:000000000040fd00\n.text:000000000040fd03\n.text:000000000040fd0d\n.text:000000000040fd0f\n.text:000000000040fd12\n.text:000000000040fd15\n.text:000000000040fd18\n.text:000000000040fd1b\n.text:000000000040fd1d\n.text:000000000040fd21\n.text:000000000040fd24\n.text:000000000040fd26\n.text:000000000040fd29\n.text:000000000040fd2b\n.text:000000000040fd30\n.text:000000000040fd36\n.text:000000000040fd38\n.text:000000000040fd3b\n.text:000000000040fd3e\n.text:000000000040fd43\n.text:000000000040fd48\n.text:000000000040fd4b\n.text:000000000040fd4d\n.text:000000000040fd51\n.text:000000000040fd53\n.text:000000000040fd56\n.text:000000000040fd58\n.text:000000000040fd5c\n.text:000000000040fd5f\n.text:000000000040fd61\n.text:000000000040fd64\n.text:000000000040fd67\n.text:000000000040fd69\n.text:000000000040fd6c\n.text:000000000040fd70\n.text:000000000040fd72\n.text:000000000040fd77\n.text:000000000040fd7d\n.text:000000000040fd7f\n.text:000000000040fd83\n.text:000000000040fd85\n.text:000000000040fd88\n.text:000000000040fd8b\n.text:000000000040fd8f\n.text:000000000040fd92\n.text:000000000040fd95\n.text:000000000040fd9c\n.text:000000000040fd9d\n.text:000000000040fd9f\n.text:000000000040fda1\n.text:000000000040fda3\n.text:000000000040fda5\n.text:000000000040fda6\n.text:000000000040fda7\n.text:000000000040fdaa\n.text:000000000040fdad\n.text:000000000040fdb0\n.text:000000000040fdb3\n.text:000000000040fdb5\n.text:000000000040fdb8\n.text:000000000040fdbb\n.text:000000000040fdbe\n.text:000000000040fdc3\n.text:000000000040fdc6\n.text:000000000040fdc8\n.text:000000000040fdcb\n'
p3569
tp3570
sS'quotearg_colon'
p3571
(S'\n__stdcall quotearg_colon(char * arg)\n'
p3572
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p3573
S'MOV ESI,0x3a\nJMP 0x00416420\n'
p3574
S'be 3a 00 00 00\neb e9\n'
p3575
S'.text:0000000000416430\n.text:0000000000416435\n'
p3576
tp3577
sS'__assert_fail'
p3578
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p3579
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_0062d1c0)();\u000a  return;\u000a}\u000a\u000a
p3580
S'JMP qword ptr [0x0062d1c0]\n'
p3581
S'ff 25 7a a7 22 00\n'
p3582
S'.plt:0000000000402a40\n'
p3583
tp3584
sS'bindtextdomain'
p3585
(S'\n__stdcall bindtextdomain()\n'
p3586
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_0062d120)();\u000a  return;\u000a}\u000a\u000a
p3587
S'JMP qword ptr [0x0062d120]\n'
p3588
S'ff 25 1a a8 22 00\n'
p3589
S'.plt:0000000000402900\n'
p3590
tp3591
sS'remember_non_cloexec_fds'
p3592
(S'\n__stdcall remember_non_cloexec_fds()\n'
p3593
V\u000avoid remember_non_cloexec_fds(void)\u000a\u000a{\u000a  get_max_fd();\u000a  visit_open_fds();\u000a  non_cloexec_fds = (int *)0x0;\u000a  num_cloexec_fds = 0;\u000a  return;\u000a}\u000a\u000a
p3594
S'SUB RSP,0x18\nCALL 0x0040e750\nLEA EDI,[RAX + 0x1]\nCMP EAX,0x7fffffff\nCMOVZ EDI,EAX\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV qword ptr [RSP + 0x10],0x0\nMOV RDX,RSP\nMOV ESI,0x40e880\nCALL 0x0040e7a0\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [0x0062e638],RAX\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [0x0062e640],RAX\nADD RSP,0x18\nRET\n'
p3595
S'48 83 ec 18\ne8 47 00 00 00\n8d 78 01\n3d ff ff ff 7f\n0f 44 f8\n0f 57 c0\n0f 29 04 24\n48 c7 44 24 10 00 00 00 00\n48 89 e2\nbe 80 e8 40 00\ne8 6f 00 00 00\n48 8b 04 24\n48 89 05 fc fe 21 00\n48 8b 44 24 08\n48 89 05 f8 fe 21 00\n48 83 c4 18\nc3\n'
p3596
S'.text:000000000040e700\n.text:000000000040e704\n.text:000000000040e709\n.text:000000000040e70c\n.text:000000000040e711\n.text:000000000040e714\n.text:000000000040e717\n.text:000000000040e71b\n.text:000000000040e724\n.text:000000000040e727\n.text:000000000040e72c\n.text:000000000040e731\n.text:000000000040e735\n.text:000000000040e73c\n.text:000000000040e741\n.text:000000000040e748\n.text:000000000040e74c\n'
p3597
tp3598
sS'is_octal_char'
p3599
(S'\n__stdcall is_octal_char()\n'
p3600
V\u000a_Bool is_octal_char(void)\u000a\u000a{\u000a  byte in_DIL;\u000a  \u000a  return (_Bool)((in_DIL & 0xf8) == 0x30);\u000a}\u000a\u000a
p3601
S'AND DIL,0xf8\nCMP DIL,0x30\nSETZ AL\nRET\n'
p3602
S'40 80 e7 f8\n40 80 ff 30\n0f 94 c0\nc3\n'
p3603
S'.text:00000000004092d0\n.text:00000000004092d4\n.text:00000000004092d8\n.text:00000000004092db\n'
p3604
tp3605
sS'xcalloc'
p3606
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p3607
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p3608
S'PUSH RAX\nCALL 0x00402b30\nTEST RAX,RAX\nJZ 0x0041734d\nPOP RCX\nRET\nCALL 0x004173b0\n'
p3609
S'50\ne8 ea b7 fe ff\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p3610
S'.text:0000000000417340\n.text:0000000000417341\n.text:0000000000417346\n.text:0000000000417349\n.text:000000000041734b\n.text:000000000041734c\n.text:000000000041734d\n'
p3611
tp3612
sS'nonfatal_target_file_error'
p3613
(S'\n__stdcall nonfatal_target_file_error(char * name)\n'
p3614
V\u000avoid nonfatal_target_file_error(char *name)\u000a\u000a{\u000a  report_file_err((char *)0x0);\u000a  return;\u000a}\u000a\u000a
p3615
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV EDX,0x1\nMOV ESI,ECX\nMOV RCX,RAX\nJMP 0x00408940\n'
p3616
S'48 89 f0\n89 f9\n31 ff\nba 01 00 00 00\n89 ce\n48 89 c1\ne9 7a 0e 00 00\n'
p3617
S'.text:0000000000407ab0\n.text:0000000000407ab3\n.text:0000000000407ab5\n.text:0000000000407ab7\n.text:0000000000407abc\n.text:0000000000407abe\n.text:0000000000407ac1\n'
p3618
tp3619
sS'parse_comma'
p3620
(S'\n__stdcall parse_comma(parser_table * entry, char * * argv, int * arg_ptr)\n'
p3621
V\u000a_Bool parse_comma(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  predicate *ppVar1;\u000a  \u000a  ppVar1 = get_new_pred_noarg(entry);\u000a  ppVar1->pred_func = pred_comma;\u000a  ppVar1->p_type = BI_OP;\u000a  ppVar1->p_prec = COMMA_PREC;\u000a  ppVar1->need_type = false;\u000a  ppVar1->need_stat = false;\u000a  ppVar1->est_success_rate = 1.00000000;\u000a  return true;\u000a}\u000a\u000a
p3622
S'PUSH RAX\nCALL 0x00406b00\nMOV qword ptr [RAX],0x403dd0\nMOV dword ptr [RAX + 0x10],0x3\nMOV dword ptr [RAX + 0x14],0x1\nMOV byte ptr [RAX + 0x1b],0x0\nMOV byte ptr [RAX + 0x1a],0x0\nMOV dword ptr [RAX + 0x24],0x3f800000\nMOV AL,0x1\nPOP RCX\nRET\n'
p3623
S'50\ne8 6a bc ff ff\n48 c7 00 d0 3d 40 00\nc7 40 10 03 00 00 00\nc7 40 14 01 00 00 00\nc6 40 1b 00\nc6 40 1a 00\nc7 40 24 00 00 80 3f\nb0 01\n59\nc3\n'
p3624
S'.text:000000000040ae90\n.text:000000000040ae91\n.text:000000000040ae96\n.text:000000000040ae9d\n.text:000000000040aea4\n.text:000000000040aeab\n.text:000000000040aeaf\n.text:000000000040aeb3\n.text:000000000040aeba\n.text:000000000040aebc\n.text:000000000040aebd\n'
p3625
tp3626
sS'fts_open'
p3627
(S'\n__stdcall fts_open(char * * argv, anon_subr_int_FTSENT_ptr_ptr_FTSENT_ptr_ptr * compar)\n'
p3628
V\u000aFTS * fts_open(char **argv,int (*compar)(FTSENT **,FTSENT **))\u000a\u000a{\u000a  uint uVar1;\u000a  _ftsent *p_Var2;\u000a  _Bool _Var3;\u000a  unsigned_short uVar4;\u000a  uint uVar5;\u000a  int iVar6;\u000a  FTS *sp;\u000a  size_t sVar7;\u000a  FTSENT *__ptr;\u000a  int *piVar8;\u000a  size_t more;\u000a  FTSENT *p;\u000a  int (*in_RDX)(_ftsent **,_ftsent **);\u000a  ulong nitems;\u000a  char *__s;\u000a  byte local_59;\u000a  FTSENT *local_58;\u000a  FTSENT *local_48;\u000a  \u000a  uVar1 = (uint)compar;\u000a  if (((0x1fff < uVar1) || ((uVar1 & 0x204) == 0x204)) || (((ulong)compar & 0x12) == 0)) {\u000a    piVar8 = __errno_location();\u000a    *piVar8 = 0x16;\u000a    return (FTS *)0x0;\u000a  }\u000a  sp = (FTS *)malloc(0x80);\u000a  if (sp == (FTS *)0x0) {\u000a    return (FTS *)0x0;\u000a  }\u000a  (sp->fts_fd_ring).ir_default_val = 0;\u000a  (sp->fts_fd_ring).ir_front = 0;\u000a  (sp->fts_fd_ring).ir_back = 0;\u000a  *(undefined4 *)&(sp->fts_fd_ring).ir_empty = 0;\u000a  (sp->fts_fd_ring).ir_data[0] = 0;\u000a  (sp->fts_fd_ring).ir_data[1] = 0;\u000a  (sp->fts_fd_ring).ir_data[2] = 0;\u000a  (sp->fts_fd_ring).ir_data[3] = 0;\u000a  *(undefined4 *)&sp->fts_leaf_optimization_works_ht = 0;\u000a  *(undefined4 *)((long)&sp->fts_leaf_optimization_works_ht + 4) = 0;\u000a  *(undefined4 *)&sp->fts_cycle = 0;\u000a  *(undefined4 *)((long)&sp->fts_cycle + 4) = 0;\u000a  *(undefined4 *)&sp->fts_compar = 0;\u000a  *(undefined4 *)((long)&sp->fts_compar + 4) = 0;\u000a  sp->fts_options = 0;\u000a  *(undefined4 *)&sp->field_0x4c = 0;\u000a  *(undefined4 *)&sp->fts_pathlen = 0;\u000a  *(undefined4 *)((long)&sp->fts_pathlen + 4) = 0;\u000a  *(undefined4 *)&sp->fts_nitems = 0;\u000a  *(undefined4 *)((long)&sp->fts_nitems + 4) = 0;\u000a  *(undefined4 *)&sp->fts_path = 0;\u000a  *(undefined4 *)((long)&sp->fts_path + 4) = 0;\u000a  sp->fts_rfd = 0;\u000a  sp->fts_cwd_fd = 0;\u000a  *(undefined4 *)&sp->fts_array = 0;\u000a  *(undefined4 *)((long)&sp->fts_array + 4) = 0;\u000a  *(undefined4 *)&sp->fts_dev = 0;\u000a  *(undefined4 *)((long)&sp->fts_dev + 4) = 0;\u000a  *(undefined4 *)&sp->fts_cur = 0;\u000a  *(undefined4 *)((long)&sp->fts_cur + 4) = 0;\u000a  *(undefined4 *)&sp->fts_child = 0;\u000a  *(undefined4 *)((long)&sp->fts_child + 4) = 0;\u000a  sp->fts_compar = in_RDX;\u000a  uVar5 = uVar1 & 0xfffffdfb | 4;\u000a  if (((ulong)compar & 2) == 0) {\u000a    uVar5 = uVar1;\u000a  }\u000a  sp->fts_options = uVar5;\u000a  sp->fts_cwd_fd = -100;\u000a  sVar7 = fts_maxarglen(argv);\u000a  more = 0x1000;\u000a  if (0x1000 < sVar7) {\u000a    more = sVar7;\u000a  }\u000a  _Var3 = fts_palloc(sp,more);\u000a  if (_Var3 == false) goto LAB_004183b4;\u000a  if (*argv == (char *)0x0) {\u000a    __ptr = (FTSENT *)0x0;\u000aLAB_0041817b:\u000a    if (in_RDX == (int (*)(_ftsent **,_ftsent **))0x0) {\u000a      local_59 = 1;\u000a    }\u000a    else {\u000a      local_59 = (byte)(((ulong)*(byte *)((long)&sp->fts_options + 1) & 0xffffffffffffff04) >> 2);\u000a    }\u000a    __s = *argv;\u000a    if (__s == (char *)0x0) {\u000a      local_58 = (FTSENT *)0x0;\u000a    }\u000a    else {\u000a      local_58 = (FTSENT *)0x0;\u000a      local_48 = (FTSENT *)0x0;\u000a      nitems = 0;\u000a      do {\u000a        more = strlen(__s);\u000a        if (((((ulong)compar & 0x1000) == 0) && (2 < more)) && (__s[more - 1] == '/')) {\u000a          do {\u000a            if (__s[more - 2] != '/') break;\u000a            more = more - 1;\u000a          } while (1 < more);\u000a        }\u000a        p = fts_alloc(sp,*argv,more);\u000a        if (p == (FTSENT *)0x0) goto LAB_0041839b;\u000a        p->fts_level = 0;\u000a        *(FTSENT **)&p->fts_parent = __ptr;\u000a        *(FTSENT **)&p->fts_accpath = p + 1;\u000a        if ((local_58 != (FTSENT *)0x0 & local_59) == 1) {\u000a          p->fts_info = 0xb;\u000a          fts_set_stat_required(p);\u000a          if (in_RDX != (int (*)(_ftsent **,_ftsent **))0x0) goto LAB_00418237;\u000aLAB_00418242:\u000a          p->fts_link = (_ftsent *)0x0;\u000a          p_Var2 = (_ftsent *)p;\u000a          if (local_58 != (FTSENT *)0x0) {\u000a            *(FTSENT **)&local_48->fts_link = p;\u000a            p_Var2 = (_ftsent *)local_58;\u000a          }\u000a        }\u000a        else {\u000a          uVar4 = fts_stat(sp,p);\u000a          p->fts_info = uVar4;\u000a          if (in_RDX == (int (*)(_ftsent **,_ftsent **))0x0) goto LAB_00418242;\u000aLAB_00418237:\u000a          *(FTSENT **)&p->fts_link = local_58;\u000a          p_Var2 = (_ftsent *)p;\u000a          p = local_48;\u000a        }\u000a        local_48 = p;\u000a        local_58 = (FTSENT *)p_Var2;\u000a        nitems = nitems + 1;\u000a        __s = argv[1];\u000a        argv = argv + 1;\u000a      } while (__s != (char *)0x0);\u000a      if ((in_RDX != (int (*)(_ftsent **,_ftsent **))0x0) && (1 < nitems)) {\u000a        local_58 = fts_sort(sp,local_58,nitems);\u000a      }\u000a    }\u000a    p = fts_alloc(sp,"",0);\u000a    *(FTSENT **)&sp->fts_cur = p;\u000a    if (p != (FTSENT *)0x0) {\u000a      *(FTSENT **)&p->fts_link = local_58;\u000a      sp->fts_cur->fts_info = 9;\u000a      _Var3 = setup_dir(sp);\u000a      if (_Var3 != false) {\u000a        if ((*(ushort *)&sp->fts_options & 0x204) == 0) {\u000a          iVar6 = diropen(sp,\u000a                             "warning: Unix filenames usually don\u005c't contain slashes (though pathnames do).  That means that \u005c'%s %s\u005c' will probably evaluate to false all the time on this system.  You might find the \u005c'-wholename\u005c' test more useful, or perhaps \u005c'-samefile\u005c'.  Alternatively, if you are using GNU grep, you could use \u005c'find ... -print0 | grep -FzZ %s\u005c'."\u000a                             + 0x148);\u000a          sp->fts_rfd = iVar6;\u000a          if (iVar6 < 0) {\u000a            *(byte *)&sp->fts_options = *(byte *)&sp->fts_options | 4;\u000a          }\u000a        }\u000a        i_ring_init(&sp->fts_fd_ring);\u000a        return sp;\u000a      }\u000a    }\u000aLAB_0041839b:\u000a    fts_lfree(local_58);\u000a    free(__ptr);\u000a  }\u000a  else {\u000a    __ptr = fts_alloc(sp,"",0);\u000a    if (__ptr != (FTSENT *)0x0) {\u000a      __ptr->fts_level = -1;\u000a      goto LAB_0041817b;\u000a    }\u000a  }\u000a  free(sp->fts_path);\u000aLAB_004183b4:\u000a  free(sp);\u000a  return (FTS *)0x0;\u000a}\u000a\u000a
p3629
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RDX\nMOV R14D,ESI\nMOV R15,RDI\nCMP R14D,0x2000\nJNC 0x00418158\nMOV EAX,R14D\nAND EAX,0x204\nCMP EAX,0x204\nJZ 0x00418158\nTEST R14B,0x12\nJZ 0x00418158\nMOV EDI,0x80\nCALL 0x00402c60\nMOV R13,RAX\nTEST R13,R13\nJZ 0x00418163\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R13 + 0x70],XMM0\nMOVUPS xmmword ptr [R13 + 0x60],XMM0\nMOVUPS xmmword ptr [R13 + 0x50],XMM0\nMOVUPS xmmword ptr [R13 + 0x40],XMM0\nMOVUPS xmmword ptr [R13 + 0x30],XMM0\nMOVUPS xmmword ptr [R13 + 0x20],XMM0\nMOVUPS xmmword ptr [R13 + 0x10],XMM0\nMOVUPS xmmword ptr [R13],XMM0\nMOV qword ptr [R13 + 0x40],RBP\nMOV EAX,R14D\nAND EAX,0xfffffdfb\nOR EAX,0x4\nTEST R14B,0x2\nCMOVZ EAX,R14D\nMOV dword ptr [R13 + 0x48],EAX\nMOV dword ptr [R13 + 0x2c],0xffffff9c\nMOV RDI,R15\nCALL 0x004183d0\nCMP RAX,0x1000\nMOV ESI,0x1000\nCMOVA RSI,RAX\nMOV RDI,R13\nCALL 0x00418420\nTEST AL,AL\nJZ 0x004183b4\nCMP qword ptr [R15],0x0\nJZ 0x00418178\nMOV ESI,0x41e69a\nXOR EDX,EDX\nMOV RDI,R13\nCALL 0x00418480\nMOV R12,RAX\nTEST R12,R12\nJZ 0x004183ab\nMOV qword ptr [R12 + 0x58],-0x1\nJMP 0x0041817b\nCALL 0x00402770\nMOV dword ptr [RAX],0x16\nXOR R13D,R13D\nMOV RAX,R13\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR R12D,R12D\nTEST RBP,RBP\nMOV qword ptr [RSP + 0x28],R13\nJZ 0x00418194\nMOV AL,byte ptr [R13 + 0x49]\nAND AL,0x4\nSHR AL,0x2\nMOV byte ptr [RSP + 0xf],AL\nJMP 0x00418199\nMOV byte ptr [RSP + 0xf],0x1\nMOV R13,qword ptr [R15]\nTEST R13,R13\nJZ 0x004182ee\nMOV qword ptr [RSP + 0x18],R12\nMOV qword ptr [RSP + 0x30],RBP\nAND R14D,0x1000\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x20],RAX\nXOR R12D,R12D\nJMP 0x00418280\nMOV qword ptr [RBP + 0x58],0x0\nMOV RAX,qword ptr [RSP + 0x18]\nMOV qword ptr [RBP + 0x8],RAX\nMOV RAX,RBP\nADD RAX,0x108\nMOV qword ptr [RBP + 0x30],RAX\nMOV RBX,qword ptr [RSP + 0x10]\nTEST RBX,RBX\nSETNZ AL\nAND AL,byte ptr [RSP + 0xf]\nCMP AL,0x1\nJNZ 0x0041821e\nMOV word ptr [RBP + 0x70],0xb\nMOV ESI,0x1\nMOV RDI,RBP\nCALL 0x00418510\nCMP qword ptr [RSP + 0x30],0x0\nJNZ 0x00418237\nJMP 0x00418242\nXOR EDX,EDX\nMOV RDI,R13\nMOV RSI,RBP\nCALL 0x00418530\nMOV word ptr [RBP + 0x70],AX\nCMP qword ptr [RSP + 0x30],0x0\nJZ 0x00418242\nMOV qword ptr [RBP + 0x10],RBX\nMOV qword ptr [RSP + 0x10],RBP\nJMP 0x0041825d\nMOV qword ptr [RBP + 0x10],0x0\nTEST RBX,RBX\nJZ 0x00418272\nMOV RAX,qword ptr [RSP + 0x20]\nMOV qword ptr [RAX + 0x10],RBP\nMOV qword ptr [RSP + 0x20],RBP\nINC R12\nMOV R13,qword ptr [R15 + 0x8]\nADD R15,0x8\nTEST R13,R13\nJNZ 0x00418280\nJMP 0x004182f7\nMOV RAX,RBP\nMOV qword ptr [RSP + 0x20],RAX\nJMP 0x0041823b\nMOV RDI,R13\nCALL 0x00402930\nTEST R14D,R14D\nJNZ 0x004182c0\nCMP RAX,0x3\nJC 0x004182c0\nCMP byte ptr [R13 + RAX*0x1 + -0x1],0x2f\nJNZ 0x004182c0\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [R13 + RAX*0x1 + -0x2],0x2f\nJNZ 0x004182c0\nDEC RAX\nCMP RAX,0x1\nJA 0x004182a0\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RSI,qword ptr [R15]\nMOV R13,qword ptr [RSP + 0x28]\nMOV RDI,R13\nMOV RDX,RAX\nCALL 0x00418480\nMOV RBP,RAX\nTEST RBP,RBP\nJNZ 0x004181d0\nMOV R12,qword ptr [RSP + 0x18]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x0041839b\nXOR EBX,EBX\nMOV R13,qword ptr [RSP + 0x28]\nJMP 0x0041832e\nCMP qword ptr [RSP + 0x30],0x0\nMOV R13,qword ptr [RSP + 0x28]\nJZ 0x00418324\nCMP R12,0x2\nJC 0x00418324\nMOV RDI,R13\nMOV RSI,qword ptr [RSP + 0x10]\nMOV RDX,R12\nCALL 0x004186a0\nMOV RBX,RAX\nMOV R12,qword ptr [RSP + 0x18]\nJMP 0x0041832e\nMOV R12,qword ptr [RSP + 0x18]\nMOV RBX,qword ptr [RSP + 0x10]\nMOV ESI,0x41e69a\nXOR EDX,EDX\nMOV RDI,R13\nCALL 0x00418480\nMOV qword ptr [R13],RAX\nTEST RAX,RAX\nJZ 0x0041839b\nMOV qword ptr [RAX + 0x10],RBX\nMOV RAX,qword ptr [R13]\nMOV word ptr [RAX + 0x70],0x9\nMOV RDI,R13\nCALL 0x00418790\nTEST AL,AL\nJZ 0x0041839b\nMOVZX EAX,word ptr [R13 + 0x48]\nTEST AX,0x204\nJNZ 0x00418385\nMOV ESI,0x4217ea\nMOV RDI,R13\nCALL 0x00418800\nMOV dword ptr [R13 + 0x28],EAX\nTEST EAX,EAX\nJNS 0x00418385\nOR byte ptr [R13 + 0x48],0x4\nMOV RDI,R13\nADD RDI,0x60\nMOV ESI,0xffffffff\nCALL 0x0041bc20\nJMP 0x00418166\nMOV RDI,RBX\nCALL 0x00418860\nMOV RDI,R12\nCALL 0x00402710\nMOV RDI,qword ptr [R13 + 0x20]\nCALL 0x00402710\nMOV RDI,R13\nCALL 0x00402710\nJMP 0x00418163\n'
p3630
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 d5\n41 89 f6\n49 89 ff\n41 81 fe 00 20 00 00\n0f 83 d4 00 00 00\n44 89 f0\n25 04 02 00 00\n3d 04 02 00 00\n0f 84 c1 00 00 00\n41 f6 c6 12\n0f 84 b7 00 00 00\nbf 80 00 00 00\ne8 b5 ab fe ff\n49 89 c5\n4d 85 ed\n0f 84 ac 00 00 00\n0f 57 c0\n41 0f 11 45 70\n41 0f 11 45 60\n41 0f 11 45 50\n41 0f 11 45 40\n41 0f 11 45 30\n41 0f 11 45 20\n41 0f 11 45 10\n41 0f 11 45 00\n49 89 6d 40\n44 89 f0\n25 fb fd ff ff\n83 c8 04\n41 f6 c6 02\n41 0f 44 c6\n41 89 45 48\n41 c7 45 2c 9c ff ff ff\n4c 89 ff\ne8 c3 02 00 00\n48 3d 00 10 00 00\nbe 00 10 00 00\n48 0f 47 f0\n4c 89 ef\ne8 fc 02 00 00\n84 c0\n0f 84 88 02 00 00\n49 83 3f 00\n74 46\nbe 9a e6 41 00\n31 d2\n4c 89 ef\ne8 3f 03 00 00\n49 89 c4\n4d 85 e4\n0f 84 5e 02 00 00\n49 c7 44 24 58 ff ff ff ff\neb 23\ne8 13 a6 fe ff\nc7 00 16 00 00 00\n45 31 ed\n4c 89 e8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n45 31 e4\n48 85 ed\n4c 89 6c 24 28\n74 0f\n41 8a 45 49\n24 04\nc0 e8 02\n88 44 24 0f\neb 05\nc6 44 24 0f 01\n4d 8b 2f\n4d 85 ed\n0f 84 49 01 00 00\n4c 89 64 24 18\n48 89 6c 24 30\n41 81 e6 00 10 00 00\n31 c0\n48 89 44 24 10\n31 c0\n48 89 44 24 20\n45 31 e4\ne9 b4 00 00 00\n48 c7 45 58 00 00 00 00\n48 8b 44 24 18\n48 89 45 08\n48 89 e8\n48 05 08 01 00 00\n48 89 45 30\n48 8b 5c 24 10\n48 85 db\n0f 95 c0\n22 44 24 0f\n3c 01\n75 1d\n66 c7 45 70 0b 00\nbe 01 00 00 00\n48 89 ef\ne8 fc 02 00 00\n48 83 7c 24 30 00\n75 1b\neb 24\n31 d2\n4c 89 ef\n48 89 ee\ne8 05 03 00 00\n66 89 45 70\n48 83 7c 24 30 00\n74 0b\n48 89 5d 10\n48 89 6c 24 10\neb 1b\n48 c7 45 10 00 00 00 00\n48 85 db\n74 23\n48 8b 44 24 20\n48 89 68 10\n48 89 6c 24 20\n49 ff c4\n4d 8b 6f 08\n49 83 c7 08\n4d 85 ed\n75 13\ne9 85 00 00 00\n48 89 e8\n48 89 44 24 20\neb bf\n4c 89 ef\ne8 a8 a6 fe ff\n45 85 f6\n75 33\n48 83 f8 03\n72 2d\n41 80 7c 05 ff 2f\n75 25\n0f 1f 44 00 00\n41 80 7c 05 fe 2f\n75 18\n48 ff c8\n48 83 f8 01\n77 ef\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 8b 37\n4c 8b 6c 24 28\n4c 89 ef\n48 89 c2\ne8 ad 01 00 00\n48 89 c5\n48 85 ed\n0f 85 f1 fe ff ff\n4c 8b 64 24 18\n48 8b 5c 24 10\ne9 ad 00 00 00\n31 db\n4c 8b 6c 24 28\neb 37\n48 83 7c 24 30 00\n4c 8b 6c 24 28\n74 20\n49 83 fc 02\n72 1a\n4c 89 ef\n48 8b 74 24 10\n4c 89 e2\ne8 86 03 00 00\n48 89 c3\n4c 8b 64 24 18\neb 0a\n4c 8b 64 24 18\n48 8b 5c 24 10\nbe 9a e6 41 00\n31 d2\n4c 89 ef\ne8 43 01 00 00\n49 89 45 00\n48 85 c0\n74 55\n48 89 58 10\n49 8b 45 00\n66 c7 40 70 09 00\n4c 89 ef\ne8 34 04 00 00\n84 c0\n74 3b\n41 0f b7 45 48\n66 a9 04 02\n75 1a\nbe ea 17 42 00\n4c 89 ef\ne8 88 04 00 00\n41 89 45 28\n85 c0\n79 05\n41 80 4d 48 04\n4c 89 ef\n48 83 c7 60\nbe ff ff ff ff\ne8 8a 38 00 00\ne9 cb fd ff ff\n48 89 df\ne8 bd 04 00 00\n4c 89 e7\ne8 65 a3 fe ff\n49 8b 7d 20\ne8 5c a3 fe ff\n4c 89 ef\ne8 54 a3 fe ff\ne9 a2 fd ff ff\n'
p3631
S'.text:0000000000418060\n.text:0000000000418061\n.text:0000000000418063\n.text:0000000000418065\n.text:0000000000418067\n.text:0000000000418069\n.text:000000000041806a\n.text:000000000041806e\n.text:0000000000418071\n.text:0000000000418074\n.text:0000000000418077\n.text:000000000041807e\n.text:0000000000418084\n.text:0000000000418087\n.text:000000000041808c\n.text:0000000000418091\n.text:0000000000418097\n.text:000000000041809b\n.text:00000000004180a1\n.text:00000000004180a6\n.text:00000000004180ab\n.text:00000000004180ae\n.text:00000000004180b1\n.text:00000000004180b7\n.text:00000000004180ba\n.text:00000000004180bf\n.text:00000000004180c4\n.text:00000000004180c9\n.text:00000000004180ce\n.text:00000000004180d3\n.text:00000000004180d8\n.text:00000000004180dd\n.text:00000000004180e2\n.text:00000000004180e6\n.text:00000000004180e9\n.text:00000000004180ee\n.text:00000000004180f1\n.text:00000000004180f5\n.text:00000000004180f9\n.text:00000000004180fd\n.text:0000000000418105\n.text:0000000000418108\n.text:000000000041810d\n.text:0000000000418113\n.text:0000000000418118\n.text:000000000041811c\n.text:000000000041811f\n.text:0000000000418124\n.text:0000000000418126\n.text:000000000041812c\n.text:0000000000418130\n.text:0000000000418132\n.text:0000000000418137\n.text:0000000000418139\n.text:000000000041813c\n.text:0000000000418141\n.text:0000000000418144\n.text:0000000000418147\n.text:000000000041814d\n.text:0000000000418156\n.text:0000000000418158\n.text:000000000041815d\n.text:0000000000418163\n.text:0000000000418166\n.text:0000000000418169\n.text:000000000041816d\n.text:000000000041816e\n.text:0000000000418170\n.text:0000000000418172\n.text:0000000000418174\n.text:0000000000418176\n.text:0000000000418177\n.text:0000000000418178\n.text:000000000041817b\n.text:000000000041817e\n.text:0000000000418183\n.text:0000000000418185\n.text:0000000000418189\n.text:000000000041818b\n.text:000000000041818e\n.text:0000000000418192\n.text:0000000000418194\n.text:0000000000418199\n.text:000000000041819c\n.text:000000000041819f\n.text:00000000004181a5\n.text:00000000004181aa\n.text:00000000004181af\n.text:00000000004181b6\n.text:00000000004181b8\n.text:00000000004181bd\n.text:00000000004181bf\n.text:00000000004181c4\n.text:00000000004181c7\n.text:00000000004181d0\n.text:00000000004181d8\n.text:00000000004181dd\n.text:00000000004181e1\n.text:00000000004181e4\n.text:00000000004181ea\n.text:00000000004181ee\n.text:00000000004181f3\n.text:00000000004181f6\n.text:00000000004181f9\n.text:00000000004181fd\n.text:00000000004181ff\n.text:0000000000418201\n.text:0000000000418207\n.text:000000000041820c\n.text:000000000041820f\n.text:0000000000418214\n.text:000000000041821a\n.text:000000000041821c\n.text:000000000041821e\n.text:0000000000418220\n.text:0000000000418223\n.text:0000000000418226\n.text:000000000041822b\n.text:000000000041822f\n.text:0000000000418235\n.text:0000000000418237\n.text:000000000041823b\n.text:0000000000418240\n.text:0000000000418242\n.text:000000000041824a\n.text:000000000041824d\n.text:000000000041824f\n.text:0000000000418254\n.text:0000000000418258\n.text:000000000041825d\n.text:0000000000418260\n.text:0000000000418264\n.text:0000000000418268\n.text:000000000041826b\n.text:000000000041826d\n.text:0000000000418272\n.text:0000000000418275\n.text:000000000041827a\n.text:0000000000418280\n.text:0000000000418283\n.text:0000000000418288\n.text:000000000041828b\n.text:000000000041828d\n.text:0000000000418291\n.text:0000000000418293\n.text:0000000000418299\n.text:000000000041829b\n.text:00000000004182a0\n.text:00000000004182a6\n.text:00000000004182a8\n.text:00000000004182ab\n.text:00000000004182af\n.text:00000000004182b1\n.text:00000000004182c0\n.text:00000000004182c3\n.text:00000000004182c8\n.text:00000000004182cb\n.text:00000000004182ce\n.text:00000000004182d3\n.text:00000000004182d6\n.text:00000000004182d9\n.text:00000000004182df\n.text:00000000004182e4\n.text:00000000004182e9\n.text:00000000004182ee\n.text:00000000004182f0\n.text:00000000004182f5\n.text:00000000004182f7\n.text:00000000004182fd\n.text:0000000000418302\n.text:0000000000418304\n.text:0000000000418308\n.text:000000000041830a\n.text:000000000041830d\n.text:0000000000418312\n.text:0000000000418315\n.text:000000000041831a\n.text:000000000041831d\n.text:0000000000418322\n.text:0000000000418324\n.text:0000000000418329\n.text:000000000041832e\n.text:0000000000418333\n.text:0000000000418335\n.text:0000000000418338\n.text:000000000041833d\n.text:0000000000418341\n.text:0000000000418344\n.text:0000000000418346\n.text:000000000041834a\n.text:000000000041834e\n.text:0000000000418354\n.text:0000000000418357\n.text:000000000041835c\n.text:000000000041835e\n.text:0000000000418360\n.text:0000000000418365\n.text:0000000000418369\n.text:000000000041836b\n.text:0000000000418370\n.text:0000000000418373\n.text:0000000000418378\n.text:000000000041837c\n.text:000000000041837e\n.text:0000000000418380\n.text:0000000000418385\n.text:0000000000418388\n.text:000000000041838c\n.text:0000000000418391\n.text:0000000000418396\n.text:000000000041839b\n.text:000000000041839e\n.text:00000000004183a3\n.text:00000000004183a6\n.text:00000000004183ab\n.text:00000000004183af\n.text:00000000004183b4\n.text:00000000004183b7\n.text:00000000004183bc\n'
p3632
tp3633
sS'complete_pending_execdirs'
p3634
(S'\n__stdcall complete_pending_execdirs()\n'
p3635
V\u000avoid complete_pending_execdirs(void)\u000a\u000a{\u000a  predicate *p;\u000a  \u000a  if (state.execdirs_outstanding != false) {\u000a    p = get_eval_tree();\u000a    do_complete_pending_execdirs(p);\u000a    state.execdirs_outstanding = false;\u000a  }\u000a  return;\u000a}\u000a\u000a
p3636
S'CMP byte ptr [0x0062f028],0x0\nJZ 0x00407c42\nPUSH RAX\nCALL 0x004058b0\nMOV RDI,RAX\nCALL 0x00407c50\nMOV byte ptr [0x0062f028],0x0\nADD RSP,0x8\nRET\n'
p3637
S'80 3d 01 74 22 00 00\n74 19\n50\ne8 81 dc ff ff\n48 89 c7\ne8 19 00 00 00\nc6 05 ea 73 22 00 00\n48 83 c4 08\nc3\n'
p3638
S'.text:0000000000407c20\n.text:0000000000407c27\n.text:0000000000407c29\n.text:0000000000407c2a\n.text:0000000000407c2f\n.text:0000000000407c32\n.text:0000000000407c37\n.text:0000000000407c3e\n.text:0000000000407c42\n'
p3639
tp3640
sS'file_system_type_uncached'
p3641
(S'\n__stdcall file_system_type_uncached()\n'
p3642
V\u000achar * file_system_type_uncached(void)\u000a\u000a{\u000a  int iVar1;\u000a  mount_entry *p;\u000a  char *string;\u000a  mount_entry *p_00;\u000a  dev_t *in_RDI;\u000a  mount_entry *pmVar2;\u000a  \u000a  p = must_read_fs_list();\u000a  if (p != (mount_entry *)0x0) {\u000a    pmVar2 = (mount_entry *)0x0;\u000a    p_00 = p;\u000a    do {\u000a      iVar1 = strcmp(p_00->me_type,"ignore");\u000a      if (iVar1 != 0) {\u000a        iVar1 = set_fstype_devno(p_00);\u000a        if ((iVar1 == 0) && (p_00->me_dev == *in_RDI)) {\u000a          pmVar2 = p_00;\u000a        }\u000a      }\u000a      p_00 = p_00->me_next;\u000a    } while (p_00 != (mount_entry *)0x0);\u000a    if (pmVar2 != (mount_entry *)0x0) {\u000a      string = xstrdup(pmVar2->me_type);\u000a      goto LAB_0040a358;\u000a    }\u000a  }\u000a  string = (char *)0x0;\u000aLAB_0040a358:\u000a  free_file_system_list(p);\u000a  fstype_known = ZEXT14(string != (char *)0x0);\u000a  if (string != (char *)0x0) {\u000a    return string;\u000a  }\u000a  string = (char *)dcgettext(0,"unknown",5);\u000a  string = xstrdup(string);\u000a  return string;\u000a}\u000a\u000a
p3643
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDI\nMOV EDI,0x1\nCALL 0x0040a470\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0040a356\nXOR R12D,R12D\nMOV RBX,R14\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,qword ptr [RBX + 0x18]\nMOV ESI,0x41fb4b\nCALL 0x00402b40\nTEST EAX,EAX\nJZ 0x0040a339\nMOV RDI,RBX\nCALL 0x0040a5b0\nTEST EAX,EAX\nJNZ 0x0040a339\nMOV RAX,qword ptr [RBX + 0x20]\nCMP RAX,qword ptr [R15]\nCMOVZ R12,RBX\nMOV RBX,qword ptr [RBX + 0x30]\nTEST RBX,RBX\nJNZ 0x0040a310\nTEST R12,R12\nJZ 0x0040a356\nMOV RDI,qword ptr [R12 + 0x18]\nCALL 0x00417390\nMOV RBX,RAX\nJMP 0x0040a358\nXOR EBX,EBX\nMOV RDI,R14\nCALL 0x0040a4b0\nXOR EAX,EAX\nTEST RBX,RBX\nSETNZ AL\nMOV dword ptr [0x0062e610],EAX\nJZ 0x0040a37f\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nXOR EDI,EDI\nMOV ESI,0x41dea0\nMOV EDX,0x5\nCALL 0x00402910\nMOV RDI,RAX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00417390\n'
p3644
S'41 57\n41 56\n41 54\n53\n50\n49 89 ff\nbf 01 00 00 00\ne8 7b 01 00 00\n49 89 c6\n4d 85 f6\n74 59\n45 31 e4\n4c 89 f3\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 7b 18\nbe 4b fb 41 00\ne8 22 88 ff ff\n85 c0\n74 17\n48 89 df\ne8 86 02 00 00\n85 c0\n75 0b\n48 8b 43 20\n49 3b 07\n4c 0f 44 e3\n48 8b 5b 30\n48 85 db\n75 ce\n4d 85 e4\n74 0f\n49 8b 7c 24 18\ne8 3f d0 00 00\n48 89 c3\neb 02\n31 db\n4c 89 f7\ne8 50 01 00 00\n31 c0\n48 85 db\n0f 95 c0\n89 05 a2 42 22 00\n74 0f\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n31 ff\nbe a0 de 41 00\nba 05 00 00 00\ne8 80 85 ff ff\n48 89 c7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 ed cf 00 00\n'
p3645
S'.text:000000000040a2e0\n.text:000000000040a2e2\n.text:000000000040a2e4\n.text:000000000040a2e6\n.text:000000000040a2e7\n.text:000000000040a2e8\n.text:000000000040a2eb\n.text:000000000040a2f0\n.text:000000000040a2f5\n.text:000000000040a2f8\n.text:000000000040a2fb\n.text:000000000040a2fd\n.text:000000000040a300\n.text:000000000040a303\n.text:000000000040a310\n.text:000000000040a314\n.text:000000000040a319\n.text:000000000040a31e\n.text:000000000040a320\n.text:000000000040a322\n.text:000000000040a325\n.text:000000000040a32a\n.text:000000000040a32c\n.text:000000000040a32e\n.text:000000000040a332\n.text:000000000040a335\n.text:000000000040a339\n.text:000000000040a33d\n.text:000000000040a340\n.text:000000000040a342\n.text:000000000040a345\n.text:000000000040a347\n.text:000000000040a34c\n.text:000000000040a351\n.text:000000000040a354\n.text:000000000040a356\n.text:000000000040a358\n.text:000000000040a35b\n.text:000000000040a360\n.text:000000000040a362\n.text:000000000040a365\n.text:000000000040a368\n.text:000000000040a36e\n.text:000000000040a370\n.text:000000000040a373\n.text:000000000040a377\n.text:000000000040a378\n.text:000000000040a37a\n.text:000000000040a37c\n.text:000000000040a37e\n.text:000000000040a37f\n.text:000000000040a381\n.text:000000000040a386\n.text:000000000040a38b\n.text:000000000040a390\n.text:000000000040a393\n.text:000000000040a397\n.text:000000000040a398\n.text:000000000040a39a\n.text:000000000040a39c\n.text:000000000040a39e\n'
p3646
tp3647
sS'parse_time'
p3648
(S'\n__stdcall parse_time(parser_table * entry, char * * argv, int * arg_ptr)\n'
p3649
V\u000a_Bool parse_time(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  time_t tVar1;\u000a  FILE *__stream;\u000a  __time_t _Var2;\u000a  _Bool _Var3;\u000a  predicate *ppVar4;\u000a  char *overflowmessage;\u000a  undefined *puVar5;\u000a  undefined *puVar6;\u000a  long lVar7;\u000a  float fVar8;\u000a  comparison_type comp;\u000a  time_val tval;\u000a  time_t local_68;\u000a  char *local_60;\u000a  int local_58;\u000a  int local_54;\u000a  xval local_50;\u000a  comparison_type local_4c;\u000a  undefined4 local_48;\u000a  undefined4 uStack68;\u000a  __syscall_slong_t local_40;\u000a  parser_table *local_38;\u000a  \u000a  dcgettext(0,"arithmetic overflow while converting %s days to a number of seconds",5);\u000a  local_58 = *arg_ptr;\u000a  _Var3 = collect_arg(argv,arg_ptr,&local_60);\u000a  _Var2 = options.cur_day_start.tv_sec;\u000a  if (_Var3 == false) {\u000a    return false;\u000a  }\u000a  local_38 = entry;\u000a  get_comp_type();\u000a  overflowmessage = (char *)(_Var2 + 0x1517f);\u000a  if (local_54 != 1) {\u000a    overflowmessage = (char *)_Var2;\u000a  }\u000a  _Var3 = get_relative_timestamp(local_60,(time_val *)&local_50,DAT_0041fbb8,overflowmessage);\u000a  if (_Var3 == false) {\u000a    *arg_ptr = local_58;\u000a    return false;\u000a  }\u000a  ppVar4 = insert_primary(local_38,local_60);\u000a  *(__syscall_slong_t *)(ppVar4->args + 0x10) = local_40;\u000a  *(xval *)ppVar4->args = local_50;\u000a  *(comparison_type *)(ppVar4->args + 4) = local_4c;\u000a  *(undefined4 *)(ppVar4->args + 8) = local_48;\u000a  *(undefined4 *)(ppVar4->args + 0xc) = uStack68;\u000a  fVar8 = estimate_timestamp_success_rate(CONCAT44(uStack68,local_48));\u000a  ppVar4->est_success_rate = fVar8;\u000a  if (((byte)options.debug_options & 1) == 0) {\u000a    return true;\u000a  }\u000a  fprintf(stderr,"inserting %s\u005cn",ppVar4->p_name);\u000a  if (local_4c == COMP_GT) {\u000a    puVar5 = &DAT_004210e7;\u000a    puVar6 = &DAT_004210e1;\u000a    goto LAB_0040b0fe;\u000a  }\u000a  if (local_4c == COMP_LT) {\u000a    puVar6 = (undefined *)0x4225ff;\u000a  }\u000a  else {\u000a    puVar6 = &DAT_004210f1;\u000a    if (local_4c == COMP_EQ) {\u000a      puVar6 = &DAT_004210e4;\u000a    }\u000a    if (local_4c == COMP_GT) {\u000a      puVar5 = &DAT_004210e7;\u000a      goto LAB_0040b0fe;\u000a    }\u000a    if (local_4c != COMP_LT) {\u000a      puVar5 = &DAT_004210f0;\u000a      if (local_4c == COMP_EQ) {\u000a        puVar5 = &DAT_004210ed;\u000a      }\u000a      goto LAB_0040b0fe;\u000a    }\u000a  }\u000a  puVar5 = &DAT_004210ea;\u000aLAB_0040b0fe:\u000a  fprintf(stderr,"    type: %s    %s  ",puVar6,puVar5);\u000a  __stream = stderr;\u000a  tVar1 = *(time_t *)(ppVar4->args + 8);\u000a  local_68 = tVar1;\u000a  overflowmessage = ctime(&local_68);\u000a  fprintf(__stream,"%ju %s",tVar1,overflowmessage);\u000a  __stream = stderr;\u000a  if (local_4c == COMP_EQ) {\u000a    lVar7 = *(long *)(ppVar4->args + 8) + 0x15180;\u000a    local_68 = lVar7;\u000a    overflowmessage = ctime(&local_68);\u000a    fprintf(__stream,"                 <  %ju %s",lVar7,overflowmessage);\u000a  }\u000a  return true;\u000a}\u000a\u000a
p3650
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV R13,RDX\nMOV RBX,RSI\nMOV R14,RDI\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x42107a\nMOV EDX,0x5\nCALL 0x00402910\nMOV R12,RAX\nMOV EBP,dword ptr [R13]\nLEA RDX,[RSP + 0x8]\nMOV RDI,RBX\nMOV RSI,R13\nCALL 0x0040c7f0\nTEST AL,AL\nJZ 0x0040b0b5\nMOV dword ptr [RSP + 0x10],EBP\nMOV qword ptr [RSP + 0x30],R14\nMOV R15,qword ptr [RSP + 0x8]\nMOV R14,qword ptr [0x0062f068]\nMOV RBX,qword ptr [0x0062f070]\nLEA RDI,[RSP + 0x8]\nLEA RSI,[RSP + 0x14]\nCALL 0x0040c980\nLEA RDX,[0x1517f + R14]\nCMP dword ptr [RSP + 0x14],0x1\nCMOVNZ RDX,R14\nMOV qword ptr [RSP + 0x8],R15\nLEA RSI,[RSP + 0x18]\nMOVSD XMM0,qword ptr [0x0041fbb8]\nMOV RDI,R15\nMOV RCX,RBX\nMOV R8,R12\nCALL 0x0040c810\nTEST AL,AL\nJZ 0x0040b0aa\nMOV RDI,qword ptr [RSP + 0x30]\nMOV RSI,R15\nCALL 0x00407730\nMOV R14,RAX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV qword ptr [R14 + 0x48],RAX\nMOVUPS XMM0,xmmword ptr [RSP + 0x18]\nMOVUPS xmmword ptr [R14 + 0x38],XMM0\nMOV RDI,qword ptr [RSP + 0x20]\nCALL 0x0040ade0\nMOVSS dword ptr [R14 + 0x24],XMM0\nMOV R15B,0x1\nTEST byte ptr [0x0062f080],0x1\nJZ 0x0040b0b5\nMOV RDI,qword ptr [0x0062de60]\nMOV RDX,qword ptr [R14 + 0x8]\nMOV ESI,0x4210be\nXOR EAX,EAX\nCALL 0x00402ba0\nMOV RDI,qword ptr [0x0062de60]\nMOV EAX,dword ptr [RSP + 0x1c]\nTEST EAX,EAX\nJZ 0x0040b0c7\nCMP EAX,0x1\nJNZ 0x0040b0d3\nMOV EDX,0x4225ff\nJMP 0x0040b0f9\nMOV EAX,dword ptr [RSP + 0x10]\nMOV dword ptr [R13],EAX\nXOR R15D,R15D\nMOV EAX,R15D\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV ECX,0x4210e7\nMOV EDX,0x4210e1\nJMP 0x0040b0fe\nCMP EAX,0x2\nMOV EAX,0x4210e4\nMOV EDX,0x4210f1\nCMOVZ RDX,RAX\nMOV EAX,dword ptr [RSP + 0x1c]\nTEST EAX,EAX\nJZ 0x0040b177\nCMP EAX,0x1\nJNZ 0x0040b17e\nMOV ECX,0x4210ea\nMOV ESI,0x4210cc\nXOR EAX,EAX\nCALL 0x00402ba0\nMOV RBX,qword ptr [R14 + 0x40]\nMOV qword ptr [RSP],RBX\nMOV R12,qword ptr [0x0062de60]\nMOV RDI,RSP\nCALL 0x004028f0\nMOV RCX,RAX\nMOV ESI,0x421107\nXOR EAX,EAX\nMOV RDI,R12\nMOV RDX,RBX\nCALL 0x00402ba0\nCMP dword ptr [RSP + 0x1c],0x2\nJNZ 0x0040b0b5\nMOV EBX,0x15180\nADD RBX,qword ptr [R14 + 0x40]\nMOV qword ptr [RSP],RBX\nMOV R14,qword ptr [0x0062de60]\nMOV RDI,RSP\nCALL 0x004028f0\nMOV RCX,RAX\nMOV ESI,0x4210f3\nXOR EAX,EAX\nMOV RDI,R14\nMOV RDX,RBX\nCALL 0x00402ba0\nJMP 0x0040b0b5\nMOV ECX,0x4210e7\nJMP 0x0040b0fe\nCMP EAX,0x2\nMOV EAX,0x4210ed\nMOV ECX,0x4210f0\nCMOVZ RCX,RAX\nJMP 0x0040b0fe\n'
p3651
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n49 89 d5\n48 89 f3\n49 89 fe\n45 31 ff\n31 ff\nbe 7a 10 42 00\nba 05 00 00 00\ne8 55 79 ff ff\n49 89 c4\n41 8b 6d 00\n48 8d 54 24 08\n48 89 df\n4c 89 ee\ne8 1e 18 00 00\n84 c0\n0f 84 db 00 00 00\n89 6c 24 10\n4c 89 74 24 30\n4c 8b 7c 24 08\n4c 8b 35 79 40 22 00\n48 8b 1d 7a 40 22 00\n48 8d 7c 24 08\n48 8d 74 24 14\ne8 7b 19 00 00\n49 8d 96 7f 51 01 00\n83 7c 24 14 01\n49 0f 45 d6\n4c 89 7c 24 08\n48 8d 74 24 18\nf2 0f 10 05 91 4b 01 00\n4c 89 ff\n48 89 d9\n4d 89 e0\ne8 db 17 00 00\n84 c0\n74 71\n48 8b 7c 24 30\n4c 89 fe\ne8 ea c6 ff ff\n49 89 c6\n48 8b 44 24 28\n49 89 46 48\n0f 10 44 24 18\n41 0f 11 46 38\n48 8b 7c 24 20\ne8 7a fd ff ff\nf3 41 0f 11 46 24\n41 b7 01\nf6 05 0a 40 22 00 01\n74 3d\n48 8b 3d e1 2d 22 00\n49 8b 56 08\nbe be 10 42 00\n31 c0\ne8 11 7b ff ff\n48 8b 3d ca 2d 22 00\n8b 44 24 1c\n85 c0\n74 29\n83 f8 01\n75 30\nba ff 25 42 00\neb 4f\n8b 44 24 10\n41 89 45 00\n45 31 ff\n44 89 f8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nb9 e7 10 42 00\nba e1 10 42 00\neb 2b\n83 f8 02\nb8 e4 10 42 00\nba f1 10 42 00\n48 0f 44 d0\n8b 44 24 1c\n85 c0\n0f 84 87 00 00 00\n83 f8 01\n0f 85 85 00 00 00\nb9 ea 10 42 00\nbe cc 10 42 00\n31 c0\ne8 96 7a ff ff\n49 8b 5e 40\n48 89 1c 24\n4c 8b 25 47 2d 22 00\n48 89 e7\ne8 cf 77 ff ff\n48 89 c1\nbe 07 11 42 00\n31 c0\n4c 89 e7\n48 89 da\ne8 6a 7a ff ff\n83 7c 24 1c 02\n0f 85 74 ff ff ff\nbb 80 51 01 00\n49 03 5e 40\n48 89 1c 24\n4c 8b 35 0b 2d 22 00\n48 89 e7\ne8 93 77 ff ff\n48 89 c1\nbe f3 10 42 00\n31 c0\n4c 89 f7\n48 89 da\ne8 2e 7a ff ff\ne9 3e ff ff ff\nb9 e7 10 42 00\neb 80\n83 f8 02\nb8 ed 10 42 00\nb9 f0 10 42 00\n48 0f 44 c8\ne9 6a ff ff ff\n'
p3652
S'.text:000000000040af90\n.text:000000000040af91\n.text:000000000040af93\n.text:000000000040af95\n.text:000000000040af97\n.text:000000000040af99\n.text:000000000040af9a\n.text:000000000040af9e\n.text:000000000040afa1\n.text:000000000040afa4\n.text:000000000040afa7\n.text:000000000040afaa\n.text:000000000040afac\n.text:000000000040afb1\n.text:000000000040afb6\n.text:000000000040afbb\n.text:000000000040afbe\n.text:000000000040afc2\n.text:000000000040afc7\n.text:000000000040afca\n.text:000000000040afcd\n.text:000000000040afd2\n.text:000000000040afd4\n.text:000000000040afda\n.text:000000000040afde\n.text:000000000040afe3\n.text:000000000040afe8\n.text:000000000040afef\n.text:000000000040aff6\n.text:000000000040affb\n.text:000000000040b000\n.text:000000000040b005\n.text:000000000040b00c\n.text:000000000040b011\n.text:000000000040b015\n.text:000000000040b01a\n.text:000000000040b01f\n.text:000000000040b027\n.text:000000000040b02a\n.text:000000000040b02d\n.text:000000000040b030\n.text:000000000040b035\n.text:000000000040b037\n.text:000000000040b039\n.text:000000000040b03e\n.text:000000000040b041\n.text:000000000040b046\n.text:000000000040b049\n.text:000000000040b04e\n.text:000000000040b052\n.text:000000000040b057\n.text:000000000040b05c\n.text:000000000040b061\n.text:000000000040b066\n.text:000000000040b06c\n.text:000000000040b06f\n.text:000000000040b076\n.text:000000000040b078\n.text:000000000040b07f\n.text:000000000040b083\n.text:000000000040b088\n.text:000000000040b08a\n.text:000000000040b08f\n.text:000000000040b096\n.text:000000000040b09a\n.text:000000000040b09c\n.text:000000000040b09e\n.text:000000000040b0a1\n.text:000000000040b0a3\n.text:000000000040b0a8\n.text:000000000040b0aa\n.text:000000000040b0ae\n.text:000000000040b0b2\n.text:000000000040b0b5\n.text:000000000040b0b8\n.text:000000000040b0bc\n.text:000000000040b0bd\n.text:000000000040b0bf\n.text:000000000040b0c1\n.text:000000000040b0c3\n.text:000000000040b0c5\n.text:000000000040b0c6\n.text:000000000040b0c7\n.text:000000000040b0cc\n.text:000000000040b0d1\n.text:000000000040b0d3\n.text:000000000040b0d6\n.text:000000000040b0db\n.text:000000000040b0e0\n.text:000000000040b0e4\n.text:000000000040b0e8\n.text:000000000040b0ea\n.text:000000000040b0f0\n.text:000000000040b0f3\n.text:000000000040b0f9\n.text:000000000040b0fe\n.text:000000000040b103\n.text:000000000040b105\n.text:000000000040b10a\n.text:000000000040b10e\n.text:000000000040b112\n.text:000000000040b119\n.text:000000000040b11c\n.text:000000000040b121\n.text:000000000040b124\n.text:000000000040b129\n.text:000000000040b12b\n.text:000000000040b12e\n.text:000000000040b131\n.text:000000000040b136\n.text:000000000040b13b\n.text:000000000040b141\n.text:000000000040b146\n.text:000000000040b14a\n.text:000000000040b14e\n.text:000000000040b155\n.text:000000000040b158\n.text:000000000040b15d\n.text:000000000040b160\n.text:000000000040b165\n.text:000000000040b167\n.text:000000000040b16a\n.text:000000000040b16d\n.text:000000000040b172\n.text:000000000040b177\n.text:000000000040b17c\n.text:000000000040b17e\n.text:000000000040b181\n.text:000000000040b186\n.text:000000000040b18b\n.text:000000000040b18f\n'
p3653
tp3654
sS'parse_iwholename'
p3655
(S'\n__stdcall parse_iwholename(parser_table * entry, char * * argv, int * arg_ptr)\n'
p3656
V\u000a_Bool parse_iwholename(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = insert_path_check(entry,argv,arg_ptr,"iwholename",pred_ipath);\u000a  return _Var1;\u000a}\u000a\u000a
p3657
S'MOV ECX,0x420ef7\nMOV R8D,0x4041e0\nJMP 0x0040d5b0\n'
p3658
S'b9 f7 0e 42 00\n41 b8 e0 41 40 00\ne9 d0 1b 00 00\n'
p3659
S'.text:000000000040b9d0\n.text:000000000040b9d5\n.text:000000000040b9db\n'
p3660
tp3661
sS'fts_stat'
p3662
(S'\n__stdcall fts_stat(FTS * sp, FTSENT * p)\n'
p3663
V\u000aunsigned_short fts_stat(FTS *sp,FTSENT *p)\u000a\u000a{\u000a  stat *__buf;\u000a  char cVar1;\u000a  ushort uVar2;\u000a  int iVar3;\u000a  int iVar4;\u000a  int *piVar5;\u000a  byte in_DL;\u000a  \u000a  __buf = p->fts_statp;\u000a  if (((sp->fts_options & 2U) == 0) &&\u000a     ((byte)(p->fts_level == 0 & (byte)sp->fts_options & 1 | in_DL) != 1)) {\u000a    iVar3 = fstatat(sp->fts_cwd_fd,p->fts_accpath,(stat *)__buf,0x100);\u000a    if (iVar3 == 0) {\u000aLAB_004185ed:\u000a      uVar2 = *(ushort *)&p->fts_statp[0].st_mode & 0xf000;\u000a      if (uVar2 == 0x8000) {\u000a        return 8;\u000a      }\u000a      if (uVar2 == 0xa000) {\u000a        return 0xc;\u000a      }\u000a      if (uVar2 != 0x4000) {\u000a        return 3;\u000a      }\u000a      p->fts_n_dirs_remaining =\u000a           p->fts_statp[0].st_nlink - (ulong)(~((uint)sp->fts_options >> 4) & 2);\u000a      if (*(char *)&p[1].fts_cycle != '.') {\u000a        return 1;\u000a      }\u000a      cVar1 = *(char *)((long)&p[1].fts_cycle + 1);\u000a      if (cVar1 != 0) {\u000a        if (cVar1 != '.') {\u000a          return 1;\u000a        }\u000a        if (*(char *)((long)&p[1].fts_cycle + 2) != 0) {\u000a          return 1;\u000a        }\u000a      }\u000a      if (p->fts_level != 0) {\u000a        return 5;\u000a      }\u000a      return 1;\u000a    }\u000a    piVar5 = __errno_location();\u000a    iVar3 = *piVar5;\u000a  }\u000a  else {\u000a    iVar3 = stat(p->fts_accpath,(stat *)__buf);\u000a    if (iVar3 == 0) goto LAB_004185ed;\u000a    piVar5 = __errno_location();\u000a    iVar3 = *piVar5;\u000a    if (iVar3 == 2) {\u000a      iVar4 = lstat(p->fts_accpath,(stat *)__buf);\u000a      iVar3 = 2;\u000a      if (iVar4 == 0) {\u000a        *piVar5 = 0;\u000a        return 0xd;\u000a      }\u000a    }\u000a  }\u000a  p->fts_errno = iVar3;\u000a  *(undefined4 *)(p->fts_statp[0].__glibc_reserved + 1) = 0;\u000a  *(undefined4 *)((long)p->fts_statp[0].__glibc_reserved + 0xc) = 0;\u000a  *(undefined4 *)(p->fts_statp[0].__glibc_reserved + 2) = 0;\u000a  *(undefined4 *)((long)p->fts_statp[0].__glibc_reserved + 0x14) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_ctim.tv_nsec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_ctim.tv_nsec + 4) = 0;\u000a  *(undefined4 *)p->fts_statp[0].__glibc_reserved = 0;\u000a  *(undefined4 *)((long)p->fts_statp[0].__glibc_reserved + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_mtim.tv_nsec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_mtim.tv_nsec + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_ctim.tv_sec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_ctim.tv_sec + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_atim.tv_nsec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_atim.tv_nsec + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_mtim.tv_sec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_mtim.tv_sec + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_blocks = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_blocks + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_atim.tv_sec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_atim.tv_sec + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_size = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_size + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_blksize = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_blksize + 4) = 0;\u000a  p->fts_statp[0].st_gid = 0;\u000a  p->fts_statp[0].__pad0 = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_rdev = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_rdev + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_nlink = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_nlink + 4) = 0;\u000a  p->fts_statp[0].st_mode = 0;\u000a  p->fts_statp[0].st_uid = 0;\u000a  *(undefined4 *)&__buf->st_dev = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_dev + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_ino = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_ino + 4) = 0;\u000a  return 10;\u000a}\u000a\u000a
p3664
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nLEA RBX,[R14 + 0x78]\nMOV ECX,dword ptr [R15 + 0x48]\nCMP qword ptr [R14 + 0x58],0x0\nSETZ AL\nTEST CL,0x2\nJNZ 0x0041857d\nAND ECX,0x1\nAND AL,CL\nOR AL,DL\nXOR AL,0x1\nJZ 0x0041857d\nMOV EDI,dword ptr [R15 + 0x2c]\nMOV RSI,qword ptr [R14 + 0x30]\nMOV ECX,0x100\nMOV RDX,RBX\nCALL 0x0041c4c0\nTEST EAX,EAX\nJZ 0x004185ed\nCALL 0x00402770\nMOV ECX,dword ptr [RAX]\nJMP 0x004185b6\nMOV RDI,qword ptr [R14 + 0x30]\nMOV RSI,RBX\nCALL 0x0041c490\nTEST EAX,EAX\nJZ 0x004185ed\nCALL 0x00402770\nMOV R15,RAX\nMOV ECX,dword ptr [R15]\nCMP ECX,0x2\nJNZ 0x004185b6\nMOV RDI,qword ptr [R14 + 0x30]\nMOV RSI,RBX\nCALL 0x0041c4b0\nMOV ECX,0x2\nTEST EAX,EAX\nJZ 0x00418682\nMOV dword ptr [R14 + 0x40],ECX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [0x80 + RBX],XMM0\nMOVUPS xmmword ptr [RBX + 0x70],XMM0\nMOVUPS xmmword ptr [RBX + 0x60],XMM0\nMOVUPS xmmword ptr [RBX + 0x50],XMM0\nMOVUPS xmmword ptr [RBX + 0x40],XMM0\nMOVUPS xmmword ptr [RBX + 0x30],XMM0\nMOVUPS xmmword ptr [RBX + 0x20],XMM0\nMOVUPS xmmword ptr [RBX + 0x10],XMM0\nMOVUPS xmmword ptr [RBX],XMM0\nMOV AX,0xa\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOVZX EAX,word ptr [0x90 + R14]\nAND EAX,0xf000\nCMP EAX,0x8000\nJZ 0x00418670\nMOVZX EAX,AX\nCMP EAX,0xa000\nJZ 0x00418667\nCMP EAX,0x4000\nJNZ 0x00418679\nMOV RAX,qword ptr [0x88 + R14]\nMOV ECX,dword ptr [R15 + 0x48]\nSHR ECX,0x4\nNOT ECX\nAND ECX,0x2\nSUB RAX,RCX\nMOV qword ptr [R14 + 0x68],RAX\nMOV AX,0x1\nCMP byte ptr [0x108 + R14],0x2e\nJNZ 0x004185e7\nMOV CL,byte ptr [0x109 + R14]\nTEST CL,CL\nJZ 0x00418654\nCMP CL,0x2e\nJNZ 0x004185e7\nCMP byte ptr [0x10a + R14],0x0\nJNZ 0x004185e7\nCMP qword ptr [R14 + 0x58],0x0\nMOV CX,0x1\nMOV AX,0x5\nCMOVZ AX,CX\nJMP 0x004185e7\nMOV AX,0xc\nJMP 0x004185e7\nMOV AX,0x8\nJMP 0x004185e7\nMOV AX,0x3\nJMP 0x004185e7\nMOV dword ptr [R15],0x0\nMOV AX,0xd\nJMP 0x004185e7\n'
p3665
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\n49 8d 5e 78\n41 8b 4f 48\n49 83 7e 58 00\n0f 94 c0\nf6 c1 02\n75 2d\n83 e1 01\n20 c8\n08 d0\n34 01\n74 22\n41 8b 7f 2c\n49 8b 76 30\nb9 00 01 00 00\n48 89 da\ne8 50 3f 00 00\n85 c0\n74 79\ne8 f7 a1 fe ff\n8b 08\neb 39\n49 8b 7e 30\n48 89 de\ne8 07 3f 00 00\n85 c0\n74 60\ne8 de a1 fe ff\n49 89 c7\n41 8b 0f\n83 f9 02\n75 19\n49 8b 7e 30\n48 89 de\ne8 07 3f 00 00\nb9 02 00 00 00\n85 c0\n0f 84 cc 00 00 00\n41 89 4e 40\n0f 57 c0\n0f 11 83 80 00 00 00\n0f 11 43 70\n0f 11 43 60\n0f 11 43 50\n0f 11 43 40\n0f 11 43 30\n0f 11 43 20\n0f 11 43 10\n0f 11 03\n66 b8 0a 00\n5b\n41 5e\n41 5f\nc3\n41 0f b7 86 90 00 00 00\n25 00 f0 00 00\n3d 00 80 00 00\n74 6f\n0f b7 c0\n3d 00 a0 00 00\n74 5c\n3d 00 40 00 00\n75 67\n49 8b 86 88 00 00 00\n41 8b 4f 48\nc1 e9 04\nf7 d1\n83 e1 02\n48 29 c8\n49 89 46 68\n66 b8 01 00\n41 80 be 08 01 00 00 2e\n75 ad\n41 8a 8e 09 01 00 00\n84 c9\n74 0f\n80 f9 2e\n75 9d\n41 80 be 0a 01 00 00 00\n75 93\n49 83 7e 58 00\n66 b9 01 00\n66 b8 05 00\n66 0f 44 c1\neb 80\n66 b8 0c 00\ne9 77 ff ff ff\n66 b8 08 00\ne9 6e ff ff ff\n66 b8 03 00\ne9 65 ff ff ff\n41 c7 07 00 00 00 00\n66 b8 0d 00\ne9 55 ff ff ff\n'
p3666
S'.text:0000000000418530\n.text:0000000000418532\n.text:0000000000418534\n.text:0000000000418535\n.text:0000000000418538\n.text:000000000041853b\n.text:000000000041853f\n.text:0000000000418543\n.text:0000000000418548\n.text:000000000041854b\n.text:000000000041854e\n.text:0000000000418550\n.text:0000000000418553\n.text:0000000000418555\n.text:0000000000418557\n.text:0000000000418559\n.text:000000000041855b\n.text:000000000041855f\n.text:0000000000418563\n.text:0000000000418568\n.text:000000000041856b\n.text:0000000000418570\n.text:0000000000418572\n.text:0000000000418574\n.text:0000000000418579\n.text:000000000041857b\n.text:000000000041857d\n.text:0000000000418581\n.text:0000000000418584\n.text:0000000000418589\n.text:000000000041858b\n.text:000000000041858d\n.text:0000000000418592\n.text:0000000000418595\n.text:0000000000418598\n.text:000000000041859b\n.text:000000000041859d\n.text:00000000004185a1\n.text:00000000004185a4\n.text:00000000004185a9\n.text:00000000004185ae\n.text:00000000004185b0\n.text:00000000004185b6\n.text:00000000004185ba\n.text:00000000004185bd\n.text:00000000004185c4\n.text:00000000004185c8\n.text:00000000004185cc\n.text:00000000004185d0\n.text:00000000004185d4\n.text:00000000004185d8\n.text:00000000004185dc\n.text:00000000004185e0\n.text:00000000004185e3\n.text:00000000004185e7\n.text:00000000004185e8\n.text:00000000004185ea\n.text:00000000004185ec\n.text:00000000004185ed\n.text:00000000004185f5\n.text:00000000004185fa\n.text:00000000004185ff\n.text:0000000000418601\n.text:0000000000418604\n.text:0000000000418609\n.text:000000000041860b\n.text:0000000000418610\n.text:0000000000418612\n.text:0000000000418619\n.text:000000000041861d\n.text:0000000000418620\n.text:0000000000418622\n.text:0000000000418625\n.text:0000000000418628\n.text:000000000041862c\n.text:0000000000418630\n.text:0000000000418638\n.text:000000000041863a\n.text:0000000000418641\n.text:0000000000418643\n.text:0000000000418645\n.text:0000000000418648\n.text:000000000041864a\n.text:0000000000418652\n.text:0000000000418654\n.text:0000000000418659\n.text:000000000041865d\n.text:0000000000418661\n.text:0000000000418665\n.text:0000000000418667\n.text:000000000041866b\n.text:0000000000418670\n.text:0000000000418674\n.text:0000000000418679\n.text:000000000041867d\n.text:0000000000418682\n.text:0000000000418689\n.text:000000000041868d\n'
p3667
tp3668
sS'pred_okdir'
p3669
(S'\n__stdcall pred_okdir(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p3670
V\u000a_Bool pred_okdir(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = is_ok(**(char ***)(pred_ptr->args + 0xb0),pathname);\u000a  if (_Var1 != false) {\u000a    _Var1 = impl_pred_exec(state.rel_pathname,stat_buf,pred_ptr);\u000a    return _Var1;\u000a  }\u000a  return false;\u000a}\u000a\u000a
p3671
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV R14,RSI\nMOV RAX,RDI\nMOV RCX,qword ptr [0xe8 + RBX]\nMOV RDI,qword ptr [RCX]\nMOV RSI,RAX\nCALL 0x00404c20\nTEST AL,AL\nJZ 0x004044dc\nMOV RDI,qword ptr [0x0062f010]\nMOV RSI,R14\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00405180\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p3672
S'41 56\n53\n50\n48 89 d3\n49 89 f6\n48 89 f8\n48 8b 8b e8 00 00 00\n48 8b 39\n48 89 c6\ne8 61 07 00 00\n84 c0\n74 19\n48 8b 3d 46 ab 22 00\n4c 89 f6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 a4 0c 00 00\n31 c0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p3673
S'.text:00000000004044a0\n.text:00000000004044a2\n.text:00000000004044a3\n.text:00000000004044a4\n.text:00000000004044a7\n.text:00000000004044aa\n.text:00000000004044ad\n.text:00000000004044b4\n.text:00000000004044b7\n.text:00000000004044ba\n.text:00000000004044bf\n.text:00000000004044c1\n.text:00000000004044c3\n.text:00000000004044ca\n.text:00000000004044cd\n.text:00000000004044d0\n.text:00000000004044d4\n.text:00000000004044d5\n.text:00000000004044d7\n.text:00000000004044dc\n.text:00000000004044de\n.text:00000000004044e2\n.text:00000000004044e3\n.text:00000000004044e5\n'
p3674
tp3675
sS'parse_mmin'
p3676
(S'\n__stdcall parse_mmin(parser_table * entry, char * * argv, int * arg_ptr)\n'
p3677
V\u000a_Bool parse_mmin(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = do_parse_xmin(entry,argv,arg_ptr);\u000a  return _Var1;\u000a}\u000a\u000a
p3678
S'MOV ECX,0x3\nJMP 0x0040c740\n'
p3679
S'b9 03 00 00 00\ne9 46 0c 00 00\n'
p3680
S'.text:000000000040baf0\n.text:000000000040baf5\n'
p3681
tp3682
sS'octal_to_mode'
p3683
(S'\n__stdcall octal_to_mode()\n'
p3684
V\u000amode_t octal_to_mode(void)\u000a\u000a{\u000a  mode_t in_EDI;\u000a  \u000a  return in_EDI;\u000a}\u000a\u000a
p3685
S'MOV EAX,EDI\nRET\n'
p3686
S'89 f8\nc3\n'
p3687
S'.text:0000000000413050\n.text:0000000000413052\n'
p3688
tp3689
sS'parse_d'
p3690
(S'\n__stdcall parse_d(parser_table * entry, char * * argv, int * arg_ptr)\n'
p3691
V\u000a_Bool parse_d(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  undefined8 uVar2;\u000a  \u000a  _Var1 = should_issue_warnings();\u000a  if (_Var1 != false) {\u000a    uVar2 = dcgettext(0,\u000a                      "warning: the -d option is deprecated; please use -depth instead, because the latter is a POSIX-compliant feature."\u000a                      ,5);\u000a    error(0,0,uVar2,uVar2);\u000a  }\u000a  parse_depth(entry,argv,arg_ptr);\u000a  return true;\u000a}\u000a\u000a
p3692
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RDX\nMOV R15,RSI\nMOV RBX,RDI\nCALL 0x0040aa00\nTEST AL,AL\nJZ 0x0040b389\nXOR EDI,EDI\nMOV ESI,0x421142\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402d90\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,R14\nCALL 0x0040b3a0\nMOV AL,0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p3693
S'41 57\n41 56\n53\n49 89 d6\n49 89 f7\n48 89 fb\ne8 9d f6 ff ff\n84 c0\n74 22\n31 ff\nbe 42 11 42 00\nba 05 00 00 00\ne8 98 75 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 07 7a ff ff\n48 89 df\n4c 89 fe\n4c 89 f2\ne8 09 00 00 00\nb0 01\n5b\n41 5e\n41 5f\nc3\n'
p3694
S'.text:000000000040b350\n.text:000000000040b352\n.text:000000000040b354\n.text:000000000040b355\n.text:000000000040b358\n.text:000000000040b35b\n.text:000000000040b35e\n.text:000000000040b363\n.text:000000000040b365\n.text:000000000040b367\n.text:000000000040b369\n.text:000000000040b36e\n.text:000000000040b373\n.text:000000000040b378\n.text:000000000040b37b\n.text:000000000040b37d\n.text:000000000040b37f\n.text:000000000040b381\n.text:000000000040b384\n.text:000000000040b389\n.text:000000000040b38c\n.text:000000000040b38f\n.text:000000000040b392\n.text:000000000040b397\n.text:000000000040b399\n.text:000000000040b39a\n.text:000000000040b39c\n.text:000000000040b39e\n'
p3695
tp3696
sS'pred_ls'
p3697
(S'\n__stdcall pred_ls(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p3698
V\u000a_Bool pred_ls(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  pred_fls(pathname,stat_buf,pred_ptr);\u000a  return true;\u000a}\u000a\u000a
p3699
S'PUSH RAX\nCALL 0x00404b10\nMOV AL,0x1\nPOP RCX\nRET\n'
p3700
S'50\ne8 ba 08 00 00\nb0 01\n59\nc3\n'
p3701
S'.text:0000000000404250\n.text:0000000000404251\n.text:0000000000404256\n.text:0000000000404258\n.text:0000000000404259\n'
p3702
tp3703
sS'mbuiter_multi_reloc'
p3704
(S'\n__stdcall mbuiter_multi_reloc(mbuiter_multi * iter, ptrdiff_t ptrdiff)\n'
p3705
V\u000avoid mbuiter_multi_reloc(mbuiter_multi *iter,ptrdiff_t ptrdiff)\u000a\u000a{\u000a  (iter->cur).ptr = (iter->cur).ptr + ptrdiff;\u000a  return;\u000a}\u000a\u000a
p3706
S'ADD qword ptr [RDI + 0x10],RSI\nRET\n'
p3707
S'48 01 77 10\nc3\n'
p3708
S'.text:0000000000412d10\n.text:0000000000412d14\n'
p3709
tp3710
sS'__strndup'
p3711
(S'\n__stdcall __strndup()\n'
p3712
V\u000avoid __strndup(void)\u000a\u000a{\u000a  (*(code *)PTR___strndup_0062d268)();\u000a  return;\u000a}\u000a\u000a
p3713
S'JMP qword ptr [0x0062d268]\n'
p3714
S'ff 25 d2 a6 22 00\n'
p3715
S'.plt:0000000000402b90\n'
p3716
tp3717
sS'hash_get_n_buckets'
p3718
(S'\n__stdcall hash_get_n_buckets(Hash_table * table)\n'
p3719
V\u000asize_t hash_get_n_buckets(Hash_table *table)\u000a\u000a{\u000a  return table->n_buckets;\u000a}\u000a\u000a
p3720
S'MOV RAX,qword ptr [RDI + 0x10]\nRET\n'
p3721
S'48 8b 47 10\nc3\n'
p3722
S'.text:00000000004103d0\n.text:00000000004103d4\n'
p3723
tp3724
sS'pred_cmin'
p3725
(S'\n__stdcall pred_cmin(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p3726
V\u000a_Bool pred_cmin(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  timespec tVar2;\u000a  \u000a  tVar2 = get_stat_ctime(stat_buf);\u000a  _Var1 = pred_timewindow(SUB168((undefined  [16])tVar2,0));\u000a  return _Var1;\u000a}\u000a\u000a
p3727
S'PUSH RBX\nMOV RBX,RDX\nMOV RDI,RSI\nCALL 0x00416c80\nMOV ECX,0x3c\nMOV RDI,RAX\nMOV RSI,RDX\nMOV RDX,RBX\nPOP RBX\nJMP 0x00404a30\n'
p3728
S'53\n48 89 d3\n48 89 f7\ne8 14 2f 01 00\nb9 3c 00 00 00\n48 89 c7\n48 89 d6\n48 89 da\n5b\ne9 b0 0c 00 00\n'
p3729
S'.text:0000000000403d60\n.text:0000000000403d61\n.text:0000000000403d64\n.text:0000000000403d67\n.text:0000000000403d6c\n.text:0000000000403d71\n.text:0000000000403d74\n.text:0000000000403d77\n.text:0000000000403d7a\n.text:0000000000403d7b\n'
p3730
tp3731
sS'bc_size_of_environment'
p3732
(S'\n__stdcall bc_size_of_environment()\n'
p3733
V\u000asize_t bc_size_of_environment(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  char **ppcVar2;\u000a  char *__s;\u000a  size_t sVar3;\u000a  \u000a  __s = *environ;\u000a  if (__s == (char *)0x0) {\u000a    sVar3 = 0;\u000a  }\u000a  else {\u000a    sVar3 = 0;\u000a    ppcVar2 = environ;\u000a    do {\u000a      ppcVar2 = ppcVar2 + 1;\u000a      sVar1 = strlen(__s);\u000a      sVar3 = sVar3 + 1 + sVar1;\u000a      __s = *ppcVar2;\u000a    } while (__s != (char *)0x0);\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p3734
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,qword ptr [0x0062de38]\nMOV RDI,qword ptr [RBX]\nTEST RDI,RDI\nJZ 0x0040e238\nADD RBX,0x8\nXOR R14D,R14D\nNOP word ptr [RAX + RAX*0x1]\nCALL 0x00402930\nLEA R14,[R14 + RAX*0x1 + 0x1]\nMOV RDI,qword ptr [RBX]\nADD RBX,0x8\nTEST RDI,RDI\nJNZ 0x0040e220\nJMP 0x0040e23b\nXOR R14D,R14D\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p3735
S'41 56\n53\n50\n48 8b 1d 2d fc 21 00\n48 8b 3b\n48 85 ff\n74 25\n48 83 c3 08\n45 31 f6\n66 0f 1f 44 00 00\ne8 0b 47 ff ff\n4d 8d 74 06 01\n48 8b 3b\n48 83 c3 08\n48 85 ff\n75 ea\neb 03\n45 31 f6\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p3736
S'.text:000000000040e200\n.text:000000000040e202\n.text:000000000040e203\n.text:000000000040e204\n.text:000000000040e20b\n.text:000000000040e20e\n.text:000000000040e211\n.text:000000000040e213\n.text:000000000040e217\n.text:000000000040e21a\n.text:000000000040e220\n.text:000000000040e225\n.text:000000000040e22a\n.text:000000000040e22d\n.text:000000000040e231\n.text:000000000040e234\n.text:000000000040e236\n.text:000000000040e238\n.text:000000000040e23b\n.text:000000000040e23e\n.text:000000000040e242\n.text:000000000040e243\n.text:000000000040e245\n'
p3737
tp3738
sS'mb_copy'
p3739
(S'\n__stdcall mb_copy(mbchar_t * new_mbc, mbchar_t * old_mbc)\n'
p3740
V\u000avoid mb_copy(mbchar_t *new_mbc,mbchar_t *old_mbc)\u000a\u000a{\u000a  _Bool _Var1;\u000a  char *__dest;\u000a  \u000a  __dest = old_mbc->ptr;\u000a  if (__dest == old_mbc->buf) {\u000a    __dest = new_mbc->buf;\u000a    memcpy(__dest,old_mbc->buf,old_mbc->bytes);\u000a  }\u000a  new_mbc->ptr = __dest;\u000a  new_mbc->bytes = old_mbc->bytes;\u000a  _Var1 = old_mbc->wc_valid;\u000a  new_mbc->wc_valid = _Var1;\u000a  if (_Var1 != false) {\u000a    new_mbc->wc = old_mbc->wc;\u000a  }\u000a  return;\u000a}\u000a\u000a
p3741
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV RBX,RSI\nMOV R14,RDI\nMOV R15,qword ptr [RBX]\nLEA RSI,[RBX + 0x18]\nCMP R15,RSI\nJNZ 0x0041c147\nLEA R15,[R14 + 0x18]\nMOV RDX,qword ptr [RBX + 0x8]\nMOV RDI,R15\nCALL 0x00402bd0\nMOV qword ptr [R14],R15\nMOV RAX,qword ptr [RBX + 0x8]\nMOV qword ptr [R14 + 0x8],RAX\nMOV AL,byte ptr [RBX + 0x10]\nTEST AL,AL\nMOV byte ptr [R14 + 0x10],AL\nJZ 0x0041c164\nMOV EAX,dword ptr [RBX + 0x14]\nMOV dword ptr [R14 + 0x14],EAX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p3742
S'41 57\n41 56\n53\n48 89 f3\n49 89 fe\n4c 8b 3b\n48 8d 73 18\n49 39 f7\n75 10\n4d 8d 7e 18\n48 8b 53 08\n4c 89 ff\ne8 89 6a fe ff\n4d 89 3e\n48 8b 43 08\n49 89 46 08\n8a 43 10\n84 c0\n41 88 46 10\n74 07\n8b 43 14\n41 89 46 14\n5b\n41 5e\n41 5f\nc3\n'
p3743
S'.text:000000000041c120\n.text:000000000041c122\n.text:000000000041c124\n.text:000000000041c125\n.text:000000000041c128\n.text:000000000041c12b\n.text:000000000041c12e\n.text:000000000041c132\n.text:000000000041c135\n.text:000000000041c137\n.text:000000000041c13b\n.text:000000000041c13f\n.text:000000000041c142\n.text:000000000041c147\n.text:000000000041c14a\n.text:000000000041c14e\n.text:000000000041c152\n.text:000000000041c155\n.text:000000000041c157\n.text:000000000041c15b\n.text:000000000041c15d\n.text:000000000041c160\n.text:000000000041c164\n.text:000000000041c165\n.text:000000000041c167\n.text:000000000041c169\n'
p3744
tp3745
sS'parse_perm'
p3746
(S'\n__stdcall parse_perm(parser_table * entry, char * * argv, int * arg_ptr)\n'
p3747
V\u000a_Bool parse_perm(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  mode_t mVar2;\u000a  mode_t mVar3;\u000a  long lVar4;\u000a  mode_change *__ptr;\u000a  undefined8 uVar5;\u000a  char *pcVar6;\u000a  predicate *ppVar7;\u000a  undefined uVar8;\u000a  undefined4 uVar9;\u000a  float local_34;\u000a  char *local_30;\u000a  \u000a  _Var1 = collect_arg(argv,arg_ptr,&local_30);\u000a  uVar8 = 0;\u000a  uVar9 = 0;\u000a  if (_Var1 != false) {\u000a    if (*local_30 == '-') {\u000a      local_34 = DAT_0041fb88;\u000a      lVar4 = 1;\u000a    }\u000a    else {\u000a      if (*local_30 == '/') {\u000a        local_34 = DAT_0041fb80;\u000a        uVar9 = 1;\u000a        lVar4 = 1;\u000a      }\u000a      else {\u000a        local_34 = DAT_0041fb78;\u000a        uVar9 = 2;\u000a        lVar4 = 0;\u000a      }\u000a    }\u000a    __ptr = mode_compile(local_30 + lVar4);\u000a    if ((__ptr == (mode_change *)0x0) || ((*local_30 == '+' && ((local_30[1] & 0xf8U) == 0x30)))) {\u000a      uVar5 = dcgettext(0,"invalid mode %s",5);\u000a      pcVar6 = quotearg_n_style((char *)0x0);\u000a      error(1,0,uVar5,pcVar6);\u000a    }\u000a    mVar2 = mode_adjust((mode_change *)0x0,(mode_t *)0x0);\u000a    mVar3 = mode_adjust((mode_change *)0x0,(mode_t *)0x1);\u000a    free(__ptr);\u000a    if (((mVar3 | mVar2) == 0) && (*local_30 == '/')) {\u000a      uVar9 = 0;\u000a      uVar5 = dcgettext(0,\u000a                        "warning: you have specified a mode pattern %s (which is equivalent to /000). The meaning of -perm /000 has now been changed to be consistent with -perm -000; that is, while it used to match no files, it now matches all files."\u000a                        ,5);\u000a      error(0,0,uVar5,local_30);\u000a      local_34 = DAT_0041fb8c;\u000a    }\u000a    ppVar7 = insert_primary(entry,local_30);\u000a    ppVar7->est_success_rate = local_34;\u000a    *(undefined4 *)ppVar7->args = uVar9;\u000a    *(mode_t *)(ppVar7->args + 4) = mVar2;\u000a    *(mode_t *)(ppVar7->args + 8) = mVar3;\u000a    uVar8 = 1;\u000a  }\u000a  return (_Bool)uVar8;\u000a}\u000a\u000a
p3748
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV R14,RDI\nLEA RAX,[RSP + 0x8]\nMOV RDI,RSI\nMOV RSI,RDX\nMOV RDX,RAX\nCALL 0x0040c7f0\nXOR R15D,R15D\nTEST AL,AL\nJZ 0x0040bee0\nMOV RDI,qword ptr [RSP + 0x8]\nMOVSX EAX,byte ptr [RDI]\nCMP EAX,0x2d\nJZ 0x0040bdba\nCMP EAX,0x2f\nJNZ 0x0040bdcf\nMOVSS XMM0,dword ptr [0x0041fb80]\nMOVSS dword ptr [RSP + 0x4],XMM0\nMOV R15D,0x1\nMOV EAX,0x1\nJMP 0x0040bde5\nMOVSS XMM0,dword ptr [0x0041fb88]\nMOVSS dword ptr [RSP + 0x4],XMM0\nMOV EAX,0x1\nJMP 0x0040bde5\nMOVSS XMM0,dword ptr [0x0041fb78]\nMOVSS dword ptr [RSP + 0x4],XMM0\nMOV R15D,0x2\nXOR EAX,EAX\nADD RDI,RAX\nCALL 0x00412d50\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040be08\nMOV RAX,qword ptr [RSP + 0x8]\nCMP byte ptr [RAX],0x2b\nJNZ 0x0040be42\nMOV AL,byte ptr [RAX + 0x1]\nAND AL,0xf8\nCMP AL,0x30\nJNZ 0x0040be42\nXOR EDI,EDI\nMOV ESI,0x42189f\nMOV EDX,0x5\nCALL 0x00402910\nMOV RBP,RAX\nMOV ESI,dword ptr [0x0062f0ac]\nMOV RDX,qword ptr [RSP + 0x8]\nXOR EDI,EDI\nCALL 0x00416290\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x00402d90\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EDX,EDX\nXOR R8D,R8D\nMOV RCX,RBX\nCALL 0x004130d0\nMOV R12D,EAX\nXOR EDI,EDI\nMOV ESI,0x1\nXOR EDX,EDX\nXOR R8D,R8D\nMOV RCX,RBX\nCALL 0x004130d0\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00402710\nMOV EAX,EBP\nOR EAX,R12D\nJNZ 0x0040beba\nMOV RAX,qword ptr [RSP + 0x8]\nCMP byte ptr [RAX],0x2f\nJNZ 0x0040beba\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x4218af\nMOV EDX,0x5\nCALL 0x00402910\nMOV RDX,RAX\nMOV RCX,qword ptr [RSP + 0x8]\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00402d90\nMOVSS XMM0,dword ptr [0x0041fb8c]\nMOVSS dword ptr [RSP + 0x4],XMM0\nMOV RSI,qword ptr [RSP + 0x8]\nMOV RDI,R14\nCALL 0x00407730\nMOVSS XMM0,dword ptr [RSP + 0x4]\nMOVSS dword ptr [RAX + 0x24],XMM0\nMOV dword ptr [RAX + 0x38],R15D\nMOV dword ptr [RAX + 0x3c],R12D\nMOV dword ptr [RAX + 0x40],EBP\nMOV R15B,0x1\nMOV EAX,R15D\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p3749
S'55\n41 57\n41 56\n41 54\n53\n48 83 ec 10\n49 89 fe\n48 8d 44 24 08\n48 89 f7\n48 89 d6\n48 89 c2\ne8 6e 0a 00 00\n45 31 ff\n84 c0\n0f 84 53 01 00 00\n48 8b 7c 24 08\n0f be 07\n83 f8 2d\n74 20\n83 f8 2f\n75 30\nf3 0f 10 05 d9 3d 01 00\nf3 0f 11 44 24 04\n41 bf 01 00 00 00\nb8 01 00 00 00\neb 2b\nf3 0f 10 05 c6 3d 01 00\nf3 0f 11 44 24 04\nb8 01 00 00 00\neb 16\nf3 0f 10 05 a1 3d 01 00\nf3 0f 11 44 24 04\n41 bf 02 00 00 00\n31 c0\n48 01 c7\ne8 63 6f 00 00\n48 89 c3\n48 85 db\n74 13\n48 8b 44 24 08\n80 38 2b\n75 43\n8a 40 01\n24 f8\n3c 30\n75 3a\n31 ff\nbe 9f 18 42 00\nba 05 00 00 00\ne8 f7 6a ff ff\n48 89 c5\n8b 35 8a 32 22 00\n48 8b 54 24 08\n31 ff\ne8 62 a4 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ea\ne8 4e 6f ff ff\n31 ff\n31 f6\n31 d2\n45 31 c0\n48 89 d9\ne8 7d 72 00 00\n41 89 c4\n31 ff\nbe 01 00 00 00\n31 d2\n45 31 c0\n48 89 d9\ne8 66 72 00 00\n89 c5\n48 89 df\ne8 9c 68 ff ff\n89 e8\n44 09 e0\n75 3f\n48 8b 44 24 08\n80 38 2f\n75 35\n45 31 ff\n31 ff\nbe af 18 42 00\nba 05 00 00 00\ne8 77 6a ff ff\n48 89 c2\n48 8b 4c 24 08\n31 ff\n31 f6\n31 c0\ne8 e4 6e ff ff\nf3 0f 10 05 d8 3c 01 00\nf3 0f 11 44 24 04\n48 8b 74 24 08\n4c 89 f7\ne8 69 b8 ff ff\nf3 0f 10 44 24 04\nf3 0f 11 40 24\n44 89 78 38\n44 89 60 3c\n89 68 40\n41 b7 01\n44 89 f8\n48 83 c4 10\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p3750
S'.text:000000000040bd60\n.text:000000000040bd61\n.text:000000000040bd63\n.text:000000000040bd65\n.text:000000000040bd67\n.text:000000000040bd68\n.text:000000000040bd6c\n.text:000000000040bd6f\n.text:000000000040bd74\n.text:000000000040bd77\n.text:000000000040bd7a\n.text:000000000040bd7d\n.text:000000000040bd82\n.text:000000000040bd85\n.text:000000000040bd87\n.text:000000000040bd8d\n.text:000000000040bd92\n.text:000000000040bd95\n.text:000000000040bd98\n.text:000000000040bd9a\n.text:000000000040bd9d\n.text:000000000040bd9f\n.text:000000000040bda7\n.text:000000000040bdad\n.text:000000000040bdb3\n.text:000000000040bdb8\n.text:000000000040bdba\n.text:000000000040bdc2\n.text:000000000040bdc8\n.text:000000000040bdcd\n.text:000000000040bdcf\n.text:000000000040bdd7\n.text:000000000040bddd\n.text:000000000040bde3\n.text:000000000040bde5\n.text:000000000040bde8\n.text:000000000040bded\n.text:000000000040bdf0\n.text:000000000040bdf3\n.text:000000000040bdf5\n.text:000000000040bdfa\n.text:000000000040bdfd\n.text:000000000040bdff\n.text:000000000040be02\n.text:000000000040be04\n.text:000000000040be06\n.text:000000000040be08\n.text:000000000040be0a\n.text:000000000040be0f\n.text:000000000040be14\n.text:000000000040be19\n.text:000000000040be1c\n.text:000000000040be22\n.text:000000000040be27\n.text:000000000040be29\n.text:000000000040be2e\n.text:000000000040be31\n.text:000000000040be36\n.text:000000000040be38\n.text:000000000040be3a\n.text:000000000040be3d\n.text:000000000040be42\n.text:000000000040be44\n.text:000000000040be46\n.text:000000000040be48\n.text:000000000040be4b\n.text:000000000040be4e\n.text:000000000040be53\n.text:000000000040be56\n.text:000000000040be58\n.text:000000000040be5d\n.text:000000000040be5f\n.text:000000000040be62\n.text:000000000040be65\n.text:000000000040be6a\n.text:000000000040be6c\n.text:000000000040be6f\n.text:000000000040be74\n.text:000000000040be76\n.text:000000000040be79\n.text:000000000040be7b\n.text:000000000040be80\n.text:000000000040be83\n.text:000000000040be85\n.text:000000000040be88\n.text:000000000040be8a\n.text:000000000040be8f\n.text:000000000040be94\n.text:000000000040be99\n.text:000000000040be9c\n.text:000000000040bea1\n.text:000000000040bea3\n.text:000000000040bea5\n.text:000000000040bea7\n.text:000000000040beac\n.text:000000000040beb4\n.text:000000000040beba\n.text:000000000040bebf\n.text:000000000040bec2\n.text:000000000040bec7\n.text:000000000040becd\n.text:000000000040bed2\n.text:000000000040bed6\n.text:000000000040beda\n.text:000000000040bedd\n.text:000000000040bee0\n.text:000000000040bee3\n.text:000000000040bee7\n.text:000000000040bee8\n.text:000000000040beea\n.text:000000000040beec\n.text:000000000040beee\n.text:000000000040beef\n'
p3751
tp3752
sS'bkm_scale'
p3753
(S'\n__stdcall bkm_scale(uintmax_t * x)\n'
p3754
V\u000astrtol_error bkm_scale(uintmax_t *x)\u000a\u000a{\u000a  ulong uVar1;\u000a  uintmax_t uVar2;\u000a  int in_ESI;\u000a  bool bVar3;\u000a  \u000a  uVar1 = *x;\u000a  uVar2 = (long)in_ESI * uVar1;\u000a  bVar3 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816((ulong)(long)in_ESI),0\u000a                ) < uVar1;\u000a  if (bVar3) {\u000a    uVar2 = 0xffffffffffffffff;\u000a  }\u000a  *x = uVar2;\u000a  return -(uint)bVar3 & LONGINT_OVERFLOW;\u000a}\u000a\u000a
p3755
S'MOVSXD RCX,ESI\nMOV RSI,-0x1\nMOV RAX,-0x1\nXOR EDX,EDX\nDIV RCX\nMOV RDX,qword ptr [RDI]\nIMUL RCX,RDX\nCMP RAX,RDX\nCMOVC RCX,RSI\nSBB EAX,EAX\nAND EAX,0x1\nMOV qword ptr [RDI],RCX\nRET\n'
p3756
S'48 63 ce\n48 c7 c6 ff ff ff ff\n48 c7 c0 ff ff ff ff\n31 d2\n48 f7 f1\n48 8b 17\n48 0f af ca\n48 39 d0\n48 0f 42 ce\n19 c0\n83 e0 01\n48 89 0f\nc3\n'
p3757
S'.text:00000000004179f0\n.text:00000000004179f3\n.text:00000000004179fa\n.text:0000000000417a01\n.text:0000000000417a03\n.text:0000000000417a06\n.text:0000000000417a09\n.text:0000000000417a0d\n.text:0000000000417a10\n.text:0000000000417a14\n.text:0000000000417a16\n.text:0000000000417a19\n.text:0000000000417a1c\n'
p3758
tp3759
sS'xalloc_die'
p3760
(S'\n__stdcall xalloc_die()\n'
p3761
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,&DAT_0042542f,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p3762
S'PUSH RBX\nMOV EBX,dword ptr [0x0062dda0]\nXOR EDI,EDI\nMOV ESI,0x42423e\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x42542f\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00402d90\nCALL 0x00402750\n'
p3763
S'53\n8b 1d e9 69 21 00\n31 ff\nbe 3e 42 42 00\nba 05 00 00 00\ne8 48 b5 fe ff\n48 89 c1\n31 f6\nba 2f 54 42 00\n31 c0\n89 df\ne8 b5 b9 fe ff\ne8 70 b3 fe ff\n'
p3764
S'.text:00000000004173b0\n.text:00000000004173b1\n.text:00000000004173b7\n.text:00000000004173b9\n.text:00000000004173be\n.text:00000000004173c3\n.text:00000000004173c8\n.text:00000000004173cb\n.text:00000000004173cd\n.text:00000000004173d2\n.text:00000000004173d4\n.text:00000000004173d6\n.text:00000000004173db\n'
p3765
tp3766
sS'quotearg_style_mem'
p3767
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p3768
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p3769
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00416330\n'
p3770
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p3771
S'.text:0000000000416390\n.text:0000000000416393\n.text:0000000000416396\n.text:0000000000416398\n.text:000000000041639a\n.text:000000000041639c\n.text:000000000041639f\n.text:00000000004163a2\n'
p3772
tp3773
sS'bc_use_sensible_arg_max'
p3774
(S'\n__stdcall bc_use_sensible_arg_max(buildcmd_control * ctl)\n'
p3775
V\u000avoid bc_use_sensible_arg_max(buildcmd_control *ctl)\u000a\u000a{\u000a  ulong uVar1;\u000a  \u000a  uVar1 = ctl->posix_arg_size_max;\u000a  if (0x1ffff < ctl->posix_arg_size_max) {\u000a    uVar1 = 0x20000;\u000a    if (0x20000 < ctl->posix_arg_size_min) {\u000a      uVar1 = ctl->posix_arg_size_min;\u000a    }\u000a  }\u000a  ctl->arg_max = uVar1;\u000a  return;\u000a}\u000a\u000a
p3776
S'MOV RAX,qword ptr [RDI + 0x8]\nCMP RAX,0x20000\nJC 0x0040e320\nMOV RCX,qword ptr [RDI + 0x10]\nCMP RCX,0x20000\nMOV EAX,0x20000\nCMOVA RAX,RCX\nMOV qword ptr [RDI + 0x18],RAX\nRET\n'
p3777
S'48 8b 47 08\n48 3d 00 00 02 00\n72 14\n48 8b 4f 10\n48 81 f9 00 00 02 00\nb8 00 00 02 00\n48 0f 47 c1\n48 89 47 18\nc3\n'
p3778
S'.text:000000000040e300\n.text:000000000040e304\n.text:000000000040e30a\n.text:000000000040e30c\n.text:000000000040e310\n.text:000000000040e317\n.text:000000000040e31c\n.text:000000000040e320\n.text:000000000040e324\n'
p3779
tp3780
sS'open_safer'
p3781
(S'\n__stdcall open_safer(char * file)\n'
p3782
V\u000a/* WARNING: Removing unreachable block (ram,0x004101fe) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff58 : 0x0041020c */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint open_safer(char *file,...)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  uint __oflag;\u000a  va_list ap;\u000a  uint local_a8;\u000a  \u000a  uVar2 = 0;\u000a  if ((__oflag & 0x40) != 0) {\u000a    uVar2 = (ulong)local_a8;\u000a  }\u000a  open(file,__oflag,uVar2);\u000a  iVar1 = fd_safer();\u000a  return iVar1;\u000a}\u000a\u000a
p3783
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x004101a2\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nXOR EDX,EDX\nTEST SIL,0x40\nJZ 0x0041020e\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RCX,dword ptr [RSP]\nCMP RCX,0x28\nJA 0x004101fe\nMOV RAX,RCX\nADD RAX,qword ptr [RSP + 0x10]\nLEA ECX,[RCX + 0x8]\nMOV dword ptr [RSP],ECX\nJMP 0x0041020c\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RCX,[RAX + 0x8]\nMOV qword ptr [RSP + 0x8],RCX\nMOV EDX,dword ptr [RAX]\nXOR EAX,EAX\nCALL 0x00402dc0\nMOV EDI,EAX\nCALL 0x00416d00\nADD RSP,0xd8\nRET\n'
p3784
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n31 d2\n40 f6 c6 40\n74 50\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 0c 24\n48 83 f9 28\n77 10\n48 89 c8\n48 03 44 24 10\n8d 49 08\n89 0c 24\neb 0e\n48 8b 44 24 08\n48 8d 48 08\n48 89 4c 24 08\n8b 10\n31 c0\ne8 ab 2b ff ff\n89 c7\ne8 e4 6a 00 00\n48 81 c4 d8 00 00 00\nc3\n'
p3785
S'.text:0000000000410160\n.text:0000000000410167\n.text:0000000000410169\n.text:000000000041016b\n.text:0000000000410170\n.text:0000000000410175\n.text:000000000041017a\n.text:0000000000410182\n.text:000000000041018a\n.text:0000000000410192\n.text:000000000041019a\n.text:00000000004101a2\n.text:00000000004101a7\n.text:00000000004101ac\n.text:00000000004101b1\n.text:00000000004101b6\n.text:00000000004101b8\n.text:00000000004101bc\n.text:00000000004101be\n.text:00000000004101c3\n.text:00000000004101c8\n.text:00000000004101d0\n.text:00000000004101d5\n.text:00000000004101dd\n.text:00000000004101e4\n.text:00000000004101e8\n.text:00000000004101ec\n.text:00000000004101ee\n.text:00000000004101f1\n.text:00000000004101f6\n.text:00000000004101f9\n.text:00000000004101fc\n.text:00000000004101fe\n.text:0000000000410203\n.text:0000000000410207\n.text:000000000041020c\n.text:000000000041020e\n.text:0000000000410210\n.text:0000000000410215\n.text:0000000000410217\n.text:000000000041021c\n.text:0000000000410223\n'
p3786
tp3787
sS'file_sparseness'
p3788
(S'\n__stdcall file_sparseness(stat * p)\n'
p3789
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000adouble file_sparseness(stat *p)\u000a\u000a{\u000a  ulong uVar1;\u000a  \u000a  uVar1 = p->st_blocks;\u000a  if (p->st_size != 0) {\u000a    return ((double)uVar1 * _DAT_0041f630) / (double)p->st_size;\u000a  }\u000a  if (uVar1 != 0) {\u000a    return *(double *)(&DAT_0041f640 + (uVar1 >> 0x3f) * 8);\u000a  }\u000a  return DAT_0041f638;\u000a}\u000a\u000a
p3790
S'MOV RCX,qword ptr [RDI + 0x30]\nMOV RAX,qword ptr [RDI + 0x40]\nTEST RCX,RCX\nJZ 0x0040a254\nCVTSI2SD XMM0,RAX\nMULSD XMM0,qword ptr [0x0041f630]\nCVTSI2SD XMM1,RCX\nDIVSD XMM0,XMM1\nRET\nTEST RAX,RAX\nJZ 0x0040a267\nSHR RAX,0x3f\nMOVSD XMM0,qword ptr [0x41f640 + RAX*0x8]\nRET\nMOVSD XMM0,qword ptr [0x0041f638]\nRET\n'
p3791
S'48 8b 4f 30\n48 8b 47 40\n48 85 c9\n74 17\nf2 48 0f 2a c0\nf2 0f 59 05 e6 53 01 00\nf2 48 0f 2a c9\nf2 0f 5e c1\nc3\n48 85 c0\n74 0e\n48 c1 e8 3f\nf2 0f 10 04 c5 40 f6 41 00\nc3\nf2 0f 10 05 c9 53 01 00\nc3\n'
p3792
S'.text:000000000040a230\n.text:000000000040a234\n.text:000000000040a238\n.text:000000000040a23b\n.text:000000000040a23d\n.text:000000000040a242\n.text:000000000040a24a\n.text:000000000040a24f\n.text:000000000040a253\n.text:000000000040a254\n.text:000000000040a257\n.text:000000000040a259\n.text:000000000040a25d\n.text:000000000040a266\n.text:000000000040a267\n.text:000000000040a26f\n'
p3793
tp3794
sS'waitpid'
p3795
(S'\n__stdcall waitpid(__pid_t __pid, int * __stat_loc, int __options)\n'
p3796
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__pid_t waitpid(__pid_t __pid,int *__stat_loc,int __options)\u000a\u000a{\u000a  __pid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_waitpid_0062d378)();\u000a  return _Var1;\u000a}\u000a\u000a
p3797
S'JMP qword ptr [0x0062d378]\n'
p3798
S'ff 25 c2 a5 22 00\n'
p3799
S'.plt:0000000000402db0\n'
p3800
tp3801
sS'fts_sort'
p3802
(S'\n__stdcall fts_sort(FTS * sp, FTSENT * head, size_t nitems)\n'
p3803
V\u000aFTSENT * fts_sort(FTS *sp,FTSENT *head,size_t nitems)\u000a\u000a{\u000a  ulong uVar1;\u000a  int (*__compar)(_ftsent **,_ftsent **);\u000a  _ftsent **pp_Var2;\u000a  FTSENT *pFVar3;\u000a  _ftsent *p_Var4;\u000a  long lVar5;\u000a  _ftsent *p_Var6;\u000a  \u000a  __compar = sp->fts_compar;\u000a  if (sp->fts_nitems < nitems) {\u000a    uVar1 = nitems + 0x28;\u000a    sp->fts_nitems = uVar1;\u000a    if (uVar1 >> 0x3d == 0) {\u000a      pp_Var2 = (_ftsent **)realloc(sp->fts_array,uVar1 * 8);\u000a      if (pp_Var2 != (_ftsent **)0x0) {\u000a        sp->fts_array = pp_Var2;\u000a        goto LAB_004186e6;\u000a      }\u000a    }\u000a    free(sp->fts_array);\u000a    sp->fts_array = (_ftsent **)0x0;\u000a    sp->fts_nitems = 0;\u000a  }\u000a  else {\u000aLAB_004186e6:\u000a    if (head != (FTSENT *)0x0) {\u000a      pFVar3 = (FTSENT *)sp->fts_array;\u000a      do {\u000a        *(FTSENT **)pFVar3 = head;\u000a        pFVar3 = (FTSENT *)((FTSENT **)pFVar3 + 1);\u000a        head = (FTSENT *)head->fts_link;\u000a      } while (head != (FTSENT *)0x0);\u000a    }\u000a    qsort(sp->fts_array,nitems,8,(__compar_fn_t)__compar);\u000a    p_Var4 = (_ftsent *)sp->fts_array;\u000a    head = (FTSENT *)p_Var4->fts_cycle;\u000a    p_Var6 = (_ftsent *)head;\u000a    if (nitems != 1) {\u000a      lVar5 = 1 - nitems;\u000a      p_Var6 = (_ftsent *)head;\u000a      do {\u000a        p_Var4 = (_ftsent *)((_ftsent **)p_Var4 + 1);\u000a        ((FTSENT *)p_Var6)->fts_link = *(_ftsent **)p_Var4;\u000a        p_Var6 = *(_ftsent **)p_Var4;\u000a        lVar5 = lVar5 + 1;\u000a      } while (lVar5 != 0);\u000a    }\u000a    p_Var6->fts_link = (_ftsent *)0x0;\u000a  }\u000a  return head;\u000a}\u000a\u000a
p3804
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV RBX,RSI\nMOV R15,RDI\nMOV R12,qword ptr [R15 + 0x40]\nCMP qword ptr [R15 + 0x38],R14\nJNC 0x004186e6\nLEA RSI,[R14 + 0x28]\nMOV qword ptr [R15 + 0x38],RSI\nMOV RAX,RSI\nSHR RAX,0x3d\nJNZ 0x0041875d\nMOV RDI,qword ptr [R15 + 0x10]\nSHL RSI,0x3\nCALL 0x00402d30\nTEST RAX,RAX\nJZ 0x0041875d\nMOV qword ptr [R15 + 0x10],RAX\nTEST RBX,RBX\nJZ 0x00418700\nMOV RAX,qword ptr [R15 + 0x10]\nNOP\nMOV qword ptr [RAX],RBX\nADD RAX,0x8\nMOV RBX,qword ptr [RBX + 0x10]\nTEST RBX,RBX\nJNZ 0x004186f0\nMOV RDI,qword ptr [R15 + 0x10]\nMOV EDX,0x8\nMOV RSI,R14\nMOV RCX,R12\nCALL 0x00402810\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RBX,qword ptr [RAX]\nCMP R14,0x1\nMOV RDX,RBX\nJZ 0x00418753\nMOV ECX,0x1\nSUB RCX,R14\nADD RAX,0x8\nMOV RDX,RBX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RSI,qword ptr [RAX]\nMOV qword ptr [RDX + 0x10],RSI\nMOV RDX,qword ptr [RAX]\nADD RAX,0x8\nINC RCX\nJNZ 0x00418740\nMOV qword ptr [RDX + 0x10],0x0\nJMP 0x00418776\nMOV RDI,qword ptr [R15 + 0x10]\nCALL 0x00402710\nMOV qword ptr [R15 + 0x10],0x0\nMOV qword ptr [R15 + 0x38],0x0\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p3805
S'41 57\n41 56\n41 54\n53\n50\n49 89 d6\n48 89 f3\n49 89 ff\n4d 8b 67 40\n4d 39 77 38\n73 2b\n49 8d 76 28\n49 89 77 38\n48 89 f0\n48 c1 e8 3d\n0f 85 8d 00 00 00\n49 8b 7f 10\n48 c1 e6 03\ne8 53 a6 fe ff\n48 85 c0\n74 7b\n49 89 47 10\n48 85 db\n74 15\n49 8b 47 10\n90\n48 89 18\n48 83 c0 08\n48 8b 5b 10\n48 85 db\n75 f0\n49 8b 7f 10\nba 08 00 00 00\n4c 89 f6\n4c 89 e1\ne8 fc a0 fe ff\n49 8b 47 10\n48 8b 18\n49 83 fe 01\n48 89 da\n74 2f\nb9 01 00 00 00\n4c 29 f1\n48 83 c0 08\n48 89 da\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 30\n48 89 72 10\n48 8b 10\n48 83 c0 08\n48 ff c1\n75 ed\n48 c7 42 10 00 00 00 00\neb 19\n49 8b 7f 10\ne8 aa 9f fe ff\n49 c7 47 10 00 00 00 00\n49 c7 47 38 00 00 00 00\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p3806
S'.text:00000000004186a0\n.text:00000000004186a2\n.text:00000000004186a4\n.text:00000000004186a6\n.text:00000000004186a7\n.text:00000000004186a8\n.text:00000000004186ab\n.text:00000000004186ae\n.text:00000000004186b1\n.text:00000000004186b5\n.text:00000000004186b9\n.text:00000000004186bb\n.text:00000000004186bf\n.text:00000000004186c3\n.text:00000000004186c6\n.text:00000000004186ca\n.text:00000000004186d0\n.text:00000000004186d4\n.text:00000000004186d8\n.text:00000000004186dd\n.text:00000000004186e0\n.text:00000000004186e2\n.text:00000000004186e6\n.text:00000000004186e9\n.text:00000000004186eb\n.text:00000000004186ef\n.text:00000000004186f0\n.text:00000000004186f3\n.text:00000000004186f7\n.text:00000000004186fb\n.text:00000000004186fe\n.text:0000000000418700\n.text:0000000000418704\n.text:0000000000418709\n.text:000000000041870c\n.text:000000000041870f\n.text:0000000000418714\n.text:0000000000418718\n.text:000000000041871b\n.text:000000000041871f\n.text:0000000000418722\n.text:0000000000418724\n.text:0000000000418729\n.text:000000000041872c\n.text:0000000000418730\n.text:0000000000418733\n.text:0000000000418740\n.text:0000000000418743\n.text:0000000000418747\n.text:000000000041874a\n.text:000000000041874e\n.text:0000000000418751\n.text:0000000000418753\n.text:000000000041875b\n.text:000000000041875d\n.text:0000000000418761\n.text:0000000000418766\n.text:000000000041876e\n.text:0000000000418776\n.text:0000000000418779\n.text:000000000041877d\n.text:000000000041877e\n.text:0000000000418780\n.text:0000000000418782\n.text:0000000000418784\n'
p3807
tp3808
sS'fd_safer'
p3809
(S'\n__stdcall fd_safer()\n'
p3810
V\u000aint fd_safer(void)\u000a\u000a{\u000a  int iVar1;\u000a  uint uVar2;\u000a  int *piVar3;\u000a  uint __fd;\u000a  \u000a  if (__fd < 3) {\u000a    uVar2 = dup_safer();\u000a    piVar3 = __errno_location();\u000a    iVar1 = *piVar3;\u000a    close(__fd);\u000a    *piVar3 = iVar1;\u000a    __fd = uVar2;\u000a  }\u000a  return (int)__fd;\u000a}\u000a\u000a
p3811
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDI\nCMP EBX,0x2\nJA 0x00416d34\nMOV EDI,EBX\nCALL 0x00416cf0\nMOV R14D,EAX\nCALL 0x00402770\nMOV RBP,RAX\nMOV R15D,dword ptr [RBP]\nMOV EDI,EBX\nCALL 0x00402ac0\nMOV dword ptr [RBP],R15D\nMOV EAX,R14D\nJMP 0x00416d36\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p3812
S'55\n41 57\n41 56\n53\n50\n89 fb\n83 fb 02\n77 26\n89 df\ne8 db ff ff ff\n41 89 c6\ne8 53 ba fe ff\n48 89 c5\n44 8b 7d 00\n89 df\ne8 95 bd fe ff\n44 89 7d 00\n44 89 f0\neb 02\n89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p3813
S'.text:0000000000416d00\n.text:0000000000416d01\n.text:0000000000416d03\n.text:0000000000416d05\n.text:0000000000416d06\n.text:0000000000416d07\n.text:0000000000416d09\n.text:0000000000416d0c\n.text:0000000000416d0e\n.text:0000000000416d10\n.text:0000000000416d15\n.text:0000000000416d18\n.text:0000000000416d1d\n.text:0000000000416d20\n.text:0000000000416d24\n.text:0000000000416d26\n.text:0000000000416d2b\n.text:0000000000416d2f\n.text:0000000000416d32\n.text:0000000000416d34\n.text:0000000000416d36\n.text:0000000000416d3a\n.text:0000000000416d3b\n.text:0000000000416d3d\n.text:0000000000416d3f\n.text:0000000000416d40\n'
p3814
tp3815
sS'print_parenthesised'
p3816
(S'\n__stdcall print_parenthesised(FILE * fp, predicate * node)\n'
p3817
V\u000avoid print_parenthesised(FILE *fp,predicate *node)\u000a\u000a{\u000a  if (node != (predicate *)0x0) {\u000a    do {\u000a      if (((node->pred_func != pred_or) && (node->pred_func != pred_and)) ||\u000a         (node->pred_left != (predicate *)0x0)) {\u000a        if ((node->pred_left == (predicate *)0x0) && (node->pred_right == (predicate *)0x0)) {\u000a          print_optlist(fp,node);\u000a          return;\u000a        }\u000a        fwrite(&DAT_0041d1ac,3,1,(FILE *)fp);\u000a        print_optlist(fp,node);\u000a        fwrite(&DAT_0041d1b0,3,1,(FILE *)fp);\u000a        return;\u000a      }\u000a      node = node->pred_right;\u000a    } while (node != (predicate *)0x0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p3818
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nTEST RBX,RBX\nJZ 0x00404f03\nMOV EAX,0x404500\nMOV ECX,0x403c90\nNOP dword ptr [RAX]\nMOV RDX,qword ptr [RBX]\nCMP RDX,RAX\nJZ 0x00404eed\nCMP RDX,RCX\nJNZ 0x00404f0b\nCMP qword ptr [0x110 + RBX],0x0\nJNZ 0x00404f0b\nMOV RBX,qword ptr [0x118 + RBX]\nTEST RBX,RBX\nJNZ 0x00404ee0\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nCMP qword ptr [0x110 + RBX],0x0\nJNZ 0x00404f1f\nCMP qword ptr [0x118 + RBX],0x0\nJZ 0x00404f5f\nMOV EDI,0x41d1ac\nMOV ESI,0x3\nMOV EDX,0x1\nMOV RCX,R14\nCALL 0x00402ee0\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00404d80\nMOV EDI,0x41d1b0\nMOV ESI,0x3\nMOV EDX,0x1\nMOV RCX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00402ee0\nMOV RDI,R14\nMOV RSI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00404d80\n'
p3819
S'41 56\n53\n50\n48 89 f3\n49 89 fe\n48 85 db\n74 34\nb8 00 45 40 00\nb9 90 3c 40 00\n0f 1f 80 00 00 00 00\n48 8b 13\n48 39 c2\n74 05\n48 39 ca\n75 1e\n48 83 bb 10 01 00 00 00\n75 14\n48 8b 9b 18 01 00 00\n48 85 db\n75 dd\n48 83 c4 08\n5b\n41 5e\nc3\n48 83 bb 10 01 00 00 00\n75 0a\n48 83 bb 18 01 00 00 00\n74 40\nbf ac d1 41 00\nbe 03 00 00 00\nba 01 00 00 00\n4c 89 f1\ne8 aa df ff ff\n4c 89 f7\n48 89 de\ne8 3f fe ff ff\nbf b0 d1 41 00\nbe 03 00 00 00\nba 01 00 00 00\n4c 89 f1\n48 83 c4 08\n5b\n41 5e\ne9 81 df ff ff\n4c 89 f7\n48 89 de\n48 83 c4 08\n5b\n41 5e\ne9 0f fe ff ff\n'
p3820
S'.text:0000000000404ec0\n.text:0000000000404ec2\n.text:0000000000404ec3\n.text:0000000000404ec4\n.text:0000000000404ec7\n.text:0000000000404eca\n.text:0000000000404ecd\n.text:0000000000404ecf\n.text:0000000000404ed4\n.text:0000000000404ed9\n.text:0000000000404ee0\n.text:0000000000404ee3\n.text:0000000000404ee6\n.text:0000000000404ee8\n.text:0000000000404eeb\n.text:0000000000404eed\n.text:0000000000404ef5\n.text:0000000000404ef7\n.text:0000000000404efe\n.text:0000000000404f01\n.text:0000000000404f03\n.text:0000000000404f07\n.text:0000000000404f08\n.text:0000000000404f0a\n.text:0000000000404f0b\n.text:0000000000404f13\n.text:0000000000404f15\n.text:0000000000404f1d\n.text:0000000000404f1f\n.text:0000000000404f24\n.text:0000000000404f29\n.text:0000000000404f2e\n.text:0000000000404f31\n.text:0000000000404f36\n.text:0000000000404f39\n.text:0000000000404f3c\n.text:0000000000404f41\n.text:0000000000404f46\n.text:0000000000404f4b\n.text:0000000000404f50\n.text:0000000000404f53\n.text:0000000000404f57\n.text:0000000000404f58\n.text:0000000000404f5a\n.text:0000000000404f5f\n.text:0000000000404f62\n.text:0000000000404f65\n.text:0000000000404f69\n.text:0000000000404f6a\n.text:0000000000404f6c\n'
p3821
tp3822
sS'main'
p3823
(S'\n__stdcall main(char * * argv)\n'
p3824
V\u000aint main(char **argv)\u000a\u000a{\u000a  uint uVar1;\u000a  FILE *__stream;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  uint *puVar4;\u000a  undefined8 uVar5;\u000a  predicate *p;\u000a  char *argv0;\u000a  char **in_RSI;\u000a  \u000a  argv = (char **)((ulong)argv & 0xffffffff);\u000a  argv0 = *in_RSI;\u000a  if (argv0 == (char *)0x0) {\u000a    argv0 = "find";\u000a  }\u000a  set_program_name(argv0);\u000a  record_initial_cwd();\u000a  state.already_issued_stat_error_msg = false;\u000a  state.exit_status = 0;\u000a  state.execdirs_outstanding = false;\u000a  state.cwd_dir_fd = -100;\u000a  _Var2 = fd_leak_check_is_enabled();\u000a  if (_Var2 != false) {\u000a    remember_non_cloexec_fds();\u000a  }\u000a  state.shared_files = sharefile_init("w");\u000a  if (state.shared_files == (sharefile_handle)0x0) {\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar1 = *puVar4;\u000a    uVar5 = dcgettext(0,"Failed to initialize shared-file hash table",5);\u000a    error(1,(ulong)uVar1,uVar5,uVar5);\u000a  }\u000a  set_option_defaults(&options);\u000a  setlocale(6,"");\u000a  bindtextdomain(0x42211d,"/usr/local/share/locale");\u000a  textdomain(0x42211d);\u000a  iVar3 = atexit(close_stdout);\u000a  if (iVar3 != 0) {\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar1 = *puVar4;\u000a    uVar5 = dcgettext(0,"The atexit library function failed",5);\u000a    error(1,(ulong)uVar1,uVar5,uVar5);\u000a  }\u000a  iVar3 = process_leading_options(argv);\u000a  __stream = stderr;\u000a  if (((byte)options.debug_options & 2) != 0) {\u000a    options.xstat = debug_stat;\u000a  }\u000a  if ((char)(byte)options.debug_options < 0) {\u000a    argv0 = ctime((time_t *)&options.cur_day_start);\u000a    fprintf(__stream,"cur_day_start = %s",argv0,argv0);\u000a  }\u000a  p = build_expression_tree(argv);\u000a  _Var2 = process_all_startpoints((char **)(ulong)(uint)((int)argv - iVar3));\u000a  if (_Var2 != false) {\u000a    show_success_rates(p);\u000a    cleanup((EVP_PKEY_CTX *)p);\u000a  }\u000a  return state.exit_status;\u000a}\u000a\u000a
p3825
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV R15D,EDI\nMOV RDI,qword ptr [R14]\nTEST RDI,RDI\nJNZ 0x004030aa\nMOV EDI,0x41c5e0\nCALL 0x004150a0\nCALL 0x00407d60\nMOV byte ptr [0x0062f038],0x0\nMOV dword ptr [0x0062f024],0x0\nMOV byte ptr [0x0062f028],0x0\nMOV dword ptr [0x0062f018],0xffffff9c\nCALL 0x00407e00\nTEST AL,AL\nJZ 0x004030e4\nCALL 0x0040e700\nMOV EDI,0x420eba\nCALL 0x00408a60\nMOV qword ptr [0x0062f030],RAX\nTEST RAX,RAX\nJNZ 0x00403126\nCALL 0x00402770\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x41c5e5\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00402d90\nMOV EDI,0x62f040\nCALL 0x00408760\nMOV EDI,0x6\nMOV ESI,0x41e69a\nCALL 0x00402d50\nMOV EDI,0x42211d\nMOV ESI,0x41c611\nCALL 0x00402900\nMOV EDI,0x42211d\nCALL 0x004028b0\nMOV EDI,0x40fe60\nCALL 0x0041c460\nTEST EAX,EAX\nJZ 0x00403192\nCALL 0x00402770\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x41c629\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00402d90\nMOV EDI,R15D\nMOV RSI,R14\nCALL 0x00408390\nMOV EBP,EAX\nTEST byte ptr [0x0062f080],0x2\nJZ 0x004031b3\nMOV qword ptr [0x0062f090],0x4081a0\nCMP byte ptr [0x0062f080],0x0\nJS 0x00403200\nMOV EDI,R15D\nMOV RSI,R14\nMOV EDX,EBP\nCALL 0x00405b80\nMOV RBX,RAX\nSUB R15D,EBP\nMOVSXD RAX,EBP\nLEA RSI,[R14 + RAX*0x8]\nMOV EDI,R15D\nCALL 0x00403230\nTEST AL,AL\nJZ 0x004031ef\nMOV RDI,RBX\nCALL 0x00404f80\nCALL 0x00407e20\nMOV EAX,dword ptr [0x0062f024]\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RBX,qword ptr [0x0062de60]\nMOV EDI,0x62f068\nCALL 0x004028f0\nMOV RCX,RAX\nMOV ESI,0x41c64c\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,RCX\nCALL 0x00402ba0\nJMP 0x004031bc\n'
p3826
S'55\n41 57\n41 56\n53\n50\n49 89 f6\n41 89 ff\n49 8b 3e\n48 85 ff\n75 05\nbf e0 c5 41 00\ne8 f1 1f 01 00\ne8 ac 4c 00 00\nc6 05 7d bf 22 00 00\nc7 05 5f bf 22 00 00 00 00 00\nc6 05 5c bf 22 00 00\nc7 05 42 bf 22 00 9c ff ff ff\ne8 25 4d 00 00\n84 c0\n74 05\ne8 1c b6 00 00\nbf ba 0e 42 00\ne8 72 59 00 00\n48 89 05 3b bf 22 00\n48 85 c0\n75 2c\ne8 71 f6 ff ff\n8b 18\n31 ff\nbe e5 c5 41 00\nba 05 00 00 00\ne8 fe f7 ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ca\ne8 6a fc ff ff\nbf 40 f0 62 00\ne8 30 56 00 00\nbf 06 00 00 00\nbe 9a e6 41 00\ne8 11 fc ff ff\nbf 1d 21 42 00\nbe 11 c6 41 00\ne8 b2 f7 ff ff\nbf 1d 21 42 00\ne8 58 f7 ff ff\nbf 60 fe 40 00\ne8 fe 92 01 00\n85 c0\n74 2c\ne8 05 f6 ff ff\n8b 18\n31 ff\nbe 29 c6 41 00\nba 05 00 00 00\ne8 92 f7 ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ca\ne8 fe fb ff ff\n44 89 ff\n4c 89 f6\ne8 f3 51 00 00\n89 c5\nf6 05 da be 22 00 02\n74 0b\n48 c7 05 dd be 22 00 a0 81 40 00\n80 3d c6 be 22 00 00\n78 44\n44 89 ff\n4c 89 f6\n89 ea\ne8 b7 29 00 00\n48 89 c3\n41 29 ef\n48 63 c5\n49 8d 34 c6\n44 89 ff\ne8 52 00 00 00\n84 c0\n74 0d\n48 89 df\ne8 96 1d 00 00\ne8 31 4c 00 00\n8b 05 2f be 22 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n48 8b 1d 59 ac 22 00\nbf 68 f0 62 00\ne8 df f6 ff ff\n48 89 c1\nbe 4c c6 41 00\n31 c0\n48 89 df\n48 89 ca\ne8 7a f9 ff ff\neb 94\n'
p3827
S'.text:0000000000403090\n.text:0000000000403091\n.text:0000000000403093\n.text:0000000000403095\n.text:0000000000403096\n.text:0000000000403097\n.text:000000000040309a\n.text:000000000040309d\n.text:00000000004030a0\n.text:00000000004030a3\n.text:00000000004030a5\n.text:00000000004030aa\n.text:00000000004030af\n.text:00000000004030b4\n.text:00000000004030bb\n.text:00000000004030c5\n.text:00000000004030cc\n.text:00000000004030d6\n.text:00000000004030db\n.text:00000000004030dd\n.text:00000000004030df\n.text:00000000004030e4\n.text:00000000004030e9\n.text:00000000004030ee\n.text:00000000004030f5\n.text:00000000004030f8\n.text:00000000004030fa\n.text:00000000004030ff\n.text:0000000000403101\n.text:0000000000403103\n.text:0000000000403108\n.text:000000000040310d\n.text:0000000000403112\n.text:0000000000403115\n.text:000000000040311a\n.text:000000000040311c\n.text:000000000040311e\n.text:0000000000403121\n.text:0000000000403126\n.text:000000000040312b\n.text:0000000000403130\n.text:0000000000403135\n.text:000000000040313a\n.text:000000000040313f\n.text:0000000000403144\n.text:0000000000403149\n.text:000000000040314e\n.text:0000000000403153\n.text:0000000000403158\n.text:000000000040315d\n.text:0000000000403162\n.text:0000000000403164\n.text:0000000000403166\n.text:000000000040316b\n.text:000000000040316d\n.text:000000000040316f\n.text:0000000000403174\n.text:0000000000403179\n.text:000000000040317e\n.text:0000000000403181\n.text:0000000000403186\n.text:0000000000403188\n.text:000000000040318a\n.text:000000000040318d\n.text:0000000000403192\n.text:0000000000403195\n.text:0000000000403198\n.text:000000000040319d\n.text:000000000040319f\n.text:00000000004031a6\n.text:00000000004031a8\n.text:00000000004031b3\n.text:00000000004031ba\n.text:00000000004031bc\n.text:00000000004031bf\n.text:00000000004031c2\n.text:00000000004031c4\n.text:00000000004031c9\n.text:00000000004031cc\n.text:00000000004031cf\n.text:00000000004031d2\n.text:00000000004031d6\n.text:00000000004031d9\n.text:00000000004031de\n.text:00000000004031e0\n.text:00000000004031e2\n.text:00000000004031e5\n.text:00000000004031ea\n.text:00000000004031ef\n.text:00000000004031f5\n.text:00000000004031f9\n.text:00000000004031fa\n.text:00000000004031fc\n.text:00000000004031fe\n.text:00000000004031ff\n.text:0000000000403200\n.text:0000000000403207\n.text:000000000040320c\n.text:0000000000403211\n.text:0000000000403214\n.text:0000000000403219\n.text:000000000040321b\n.text:000000000040321e\n.text:0000000000403221\n.text:0000000000403226\n'
p3828
tp3829
sS'sharefile_destroy'
p3830
(S'\n__stdcall sharefile_destroy(sharefile_handle pv)\n'
p3831
V\u000avoid sharefile_destroy(sharefile_handle pv)\u000a\u000a{\u000a  free(*(void **)pv);\u000a  hash_free(*(Hash_table **)((long)pv + 8));\u000a  return;\u000a}\u000a\u000a
p3832
S'PUSH RBX\nMOV RBX,RDI\nMOV RDI,qword ptr [RBX]\nCALL 0x00402710\nMOV RDI,qword ptr [RBX + 0x8]\nPOP RBX\nJMP 0x00410ac0\n'
p3833
S'53\n48 89 fb\n48 8b 3b\ne8 c4 9b ff ff\n48 8b 7b 08\n5b\ne9 6a 7f 00 00\n'
p3834
S'.text:0000000000408b40\n.text:0000000000408b41\n.text:0000000000408b44\n.text:0000000000408b47\n.text:0000000000408b4c\n.text:0000000000408b50\n.text:0000000000408b51\n'
p3835
tp3836
sS'check_option_combinations'
p3837
(S'\n__stdcall check_option_combinations(predicate * p)\n'
p3838
V\u000avoid check_option_combinations(predicate *p)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong in_RAX;\u000a  undefined8 uVar2;\u000a  uint uVar3;\u000a  \u000a  if (p != (predicate *)0x0) {\u000a    uVar3 = 0;\u000a    do {\u000a      if (p->pred_func == pred_delete) {\u000a        uVar3 = uVar3 | 1;\u000a      }\u000a      else {\u000a        in_RAX = 0;\u000a        if (p->pred_func == pred_prune) {\u000a          uVar3 = uVar3 | 2;\u000a        }\u000a      }\u000a      p = p->pred_next;\u000a    } while (p != (predicate *)0x0);\u000a    if ((uVar3 == 3) && (uVar1 = (ulong)options.explicit_depth, options.explicit_depth == false)) {\u000a      uVar2 = dcgettext(0,\u000a                        "The -delete action automatically turns on -depth, but -prune does nothing when -depth is in effect.  If you want to carry on anyway, just explicitly use the -depth option."\u000a                        ,5);\u000a      error(1,0,uVar2,in_RAX & 0xffffffffffffff00 | uVar1);\u000a      return;\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p3839
S'TEST RDI,RDI\nJZ 0x0040a698\nXOR EDX,EDX\nMOV ECX,0x403e30\nMOV R8D,0x404600\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RSI,qword ptr [RDI]\nCMP RSI,RCX\nJZ 0x0040a650\nMOV EAX,EDX\nOR EAX,0x2\nCMP RSI,R8\nCMOVZ EDX,EAX\nJMP 0x0040a653\nOR EDX,0x1\nMOV RDI,qword ptr [0x108 + RDI]\nTEST RDI,RDI\nJNZ 0x0040a630\nAND EDX,0x3\nCMP EDX,0x3\nJNZ 0x0040a698\nMOV AL,byte ptr [0x0062f041]\nTEST AL,AL\nJNZ 0x0040a698\nPUSH RAX\nXOR EDI,EDI\nMOV ESI,0x420aa6\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nPOP RCX\nJMP 0x00402d90\nRET\n'
p3840
S'48 85 ff\n0f 84 7f 00 00 00\n31 d2\nb9 30 3e 40 00\n41 b8 00 46 40 00\n66 2e 0f 1f 84 00 00 00 00 00\n48 8b 37\n48 39 ce\n74 18\n89 d0\n83 c8 02\n4c 39 c6\n0f 44 d0\neb 0e\n83 ca 01\n48 8b bf 08 01 00 00\n48 85 ff\n75 d1\n83 e2 03\n83 fa 03\n75 31\n8a 05 d4 49 22 00\n84 c0\n75 27\n50\n31 ff\nbe a6 0a 42 00\nba 05 00 00 00\ne8 8d 82 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\n59\ne9 f8 86 ff ff\nc3\n'
p3841
S'.text:000000000040a610\n.text:000000000040a613\n.text:000000000040a619\n.text:000000000040a61b\n.text:000000000040a620\n.text:000000000040a626\n.text:000000000040a630\n.text:000000000040a633\n.text:000000000040a636\n.text:000000000040a638\n.text:000000000040a63a\n.text:000000000040a63d\n.text:000000000040a640\n.text:000000000040a643\n.text:000000000040a650\n.text:000000000040a653\n.text:000000000040a65a\n.text:000000000040a65d\n.text:000000000040a65f\n.text:000000000040a662\n.text:000000000040a665\n.text:000000000040a667\n.text:000000000040a66d\n.text:000000000040a66f\n.text:000000000040a671\n.text:000000000040a672\n.text:000000000040a674\n.text:000000000040a679\n.text:000000000040a67e\n.text:000000000040a683\n.text:000000000040a686\n.text:000000000040a68b\n.text:000000000040a68d\n.text:000000000040a68f\n.text:000000000040a692\n.text:000000000040a693\n.text:000000000040a698\n'
p3842
tp3843
sS'getpwuid'
p3844
(S'\n__stdcall getpwuid(__uid_t __uid)\n'
p3845
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000apasswd * getpwuid(__uid_t __uid)\u000a\u000a{\u000a  passwd *ppVar1;\u000a  \u000a  ppVar1 = (passwd *)(*(code *)PTR_getpwuid_0062d110)();\u000a  return ppVar1;\u000a}\u000a\u000a
p3846
S'JMP qword ptr [0x0062d110]\n'
p3847
S'ff 25 2a a8 22 00\n'
p3848
S'.plt:00000000004028e0\n'
p3849
tp3850
sS'find'
p3851
(S'\n__stdcall find(char * arg)\n'
p3852
V\u000a_Bool find(char *arg)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  size_t sVar3;\u000a  FTS *sp;\u000a  uint *puVar4;\u000a  FTSENT *ent;\u000a  undefined8 uVar5;\u000a  char *pcVar6;\u000a  undefined uVar7;\u000a  char *arglist [2];\u000a  char *local_38;\u000a  undefined8 local_30;\u000a  \u000a  sVar3 = strlen(arg);\u000a  state.starting_path_length = (int)sVar3;\u000a  inside_dir(0xffffff9c);\u000a  local_30 = 0;\u000a  if ((ulong)(long)(int)options.symlink_handling < 3) {\u000a    ftsoptions = ftsoptions | *(uint *)(&DAT_0041c560 + (long)(int)options.symlink_handling * 4);\u000a  }\u000a  if (options.stay_on_filesystem != false) {\u000a    ftsoptions = ftsoptions | 0x40;\u000a  }\u000a  local_38 = arg;\u000a  sp = fts_open(&local_38,(int (*)(FTSENT **,FTSENT **))(ulong)(uint)ftsoptions);\u000a  puVar4 = (uint *)__errno_location();\u000a  if (sp == (FTS *)0x0) {\u000a    uVar1 = *puVar4;\u000a    uVar5 = dcgettext(0,"cannot search %s",5);\u000a    pcVar6 = safely_quote_err_filename((char *)0x0);\u000a    error(0,(ulong)uVar1,uVar5,pcVar6);\u000a    error_severity(1);\u000a    uVar7 = 1;\u000a  }\u000a  else {\u000a    *puVar4 = 0;\u000a    ent = fts_read(sp);\u000a    if (ent != (FTSENT *)0x0) {\u000a      iVar2 = -0x80000000;\u000a      do {\u000a        if ((state.execdirs_outstanding != false) && (*(int *)&ent->fts_level != iVar2)) {\u000a          show_outstanding_execdirs(stderr);\u000a          complete_pending_execdirs();\u000a        }\u000a        iVar2 = *(int *)&ent->fts_level;\u000a        state.already_issued_stat_error_msg = false;\u000a        state.have_stat = false;\u000a        state.type = ent->fts_statp[0].st_mode;\u000a        state.have_type = (_Bool)(state.type != 0);\u000a        consider_visiting(sp,ent);\u000a        *puVar4 = 0;\u000a        ent = fts_read(sp);\u000a      } while (ent != (FTSENT *)0x0);\u000a    }\u000a    uVar1 = *puVar4;\u000a    if (uVar1 == 0) {\u000a      iVar2 = fts_close(sp);\u000a      if (iVar2 == 0) {\u000a        return true;\u000a      }\u000a      uVar1 = *puVar4;\u000a      pcVar6 = (char *)dcgettext(0,"failed to restore working directory after searching %s",5);\u000a    }\u000a    else {\u000a      arg = safely_quote_err_filename((char *)0x0);\u000a      pcVar6 = "failed to read file names from file system at or below %s";\u000a    }\u000a    uVar7 = 0;\u000a    error(0,(ulong)uVar1,pcVar6,arg);\u000a    error_severity(1);\u000a  }\u000a  return (_Bool)uVar7;\u000a}\u000a\u000a
p3853
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV R14,RDI\nCALL 0x00402930\nMOV dword ptr [0x0062f01c],EAX\nMOV EDI,0xffffff9c\nCALL 0x00403490\nMOV qword ptr [RSP],R14\nMOV qword ptr [RSP + 0x8],0x0\nMOVSXD RAX,dword ptr [0x0062f088]\nCMP RAX,0x2\nJA 0x0040331b\nMOV EAX,dword ptr [0x41c560 + RAX*0x4]\nOR dword ptr [0x0062d480],EAX\nCMP byte ptr [0x0062f04d],0x0\nJZ 0x0040332b\nOR byte ptr [0x0062d480],0x40\nMOV ESI,dword ptr [0x0062d480]\nMOV RDI,RSP\nXOR EDX,EDX\nCALL 0x00418060\nMOV R12,RAX\nCALL 0x00402770\nMOV R15,RAX\nTEST R12,R12\nJZ 0x004033fa\nMOV dword ptr [R15],0x0\nMOV RDI,R12\nCALL 0x00418a20\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004033d7\nMOV EBP,0x80000000\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [0x0062f028],0x0\nJZ 0x0040338f\nCMP dword ptr [RBX + 0x58],EBP\nJZ 0x0040338f\nMOV RDI,qword ptr [0x0062de60]\nCALL 0x00403510\nCALL 0x00407c20\nMOV EBP,dword ptr [RBX + 0x58]\nMOV byte ptr [0x0062f038],0x0\nMOV byte ptr [0x0062f004],0x0\nMOV EAX,dword ptr [0x90 + RBX]\nTEST EAX,EAX\nSETNZ byte ptr [0x0062f005]\nMOV dword ptr [0x0062f008],EAX\nMOV RDI,R12\nMOV RSI,RBX\nCALL 0x00403670\nMOV dword ptr [R15],0x0\nMOV RDI,R12\nCALL 0x00418a20\nMOV RBX,RAX\nTEST RBX,RBX\nJNZ 0x00403370\nMOV EBP,dword ptr [R15]\nTEST EBP,EBP\nJZ 0x0040343a\nXOR EBX,EBX\nXOR EDI,EDI\nMOV RSI,R14\nCALL 0x00408920\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x41c670\nXOR EAX,EAX\nMOV ESI,EBP\nJMP 0x0040346b\nMOV EBX,dword ptr [R15]\nXOR EDI,EDI\nMOV ESI,0x41c65f\nMOV EDX,0x5\nCALL 0x00402910\nMOV RBP,RAX\nXOR EDI,EDI\nMOV RSI,R14\nCALL 0x00408920\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00402d90\nMOV EDI,0x1\nCALL 0x00407aa0\nMOV BL,0x1\nJMP 0x0040347a\nMOV RDI,R12\nCALL 0x004188a0\nTEST EAX,EAX\nJZ 0x00403489\nMOV EBP,dword ptr [R15]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x41c6aa\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nMOV RCX,R14\nCALL 0x00402d90\nMOV EDI,0x1\nCALL 0x00407aa0\nMOV EAX,EBX\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV BL,0x1\nJMP 0x0040347a\n'
p3854
S'55\n41 57\n41 56\n41 54\n53\n48 83 ec 10\n49 89 fe\ne8 4c f6 ff ff\n89 05 32 bd 22 00\nbf 9c ff ff ff\ne8 9c 01 00 00\n4c 89 34 24\n48 c7 44 24 08 00 00 00 00\n48 63 05 80 bd 22 00\n48 83 f8 02\n77 0d\n8b 04 85 60 c5 41 00\n09 05 65 a1 22 00\n80 3d 2b bd 22 00 00\n74 07\n80 0d 55 a1 22 00 40\n8b 35 4f a1 22 00\n48 89 e7\n31 d2\ne8 25 4d 01 00\n49 89 c4\ne8 2d f4 ff ff\n49 89 c7\n4d 85 e4\n0f 84 ab 00 00 00\n41 c7 07 00 00 00 00\n4c 89 e7\ne8 c2 56 01 00\n48 89 c3\n48 85 db\n74 71\nbd 00 00 00 80\n0f 1f 44 00 00\n80 3d b1 bc 22 00 00\n74 16\n39 6b 58\n74 11\n48 8b 3d db aa 22 00\ne8 86 01 00 00\ne8 91 48 00 00\n8b 6b 58\nc6 05 9f bc 22 00 00\nc6 05 64 bc 22 00 00\n8b 83 90 00 00 00\n85 c0\n0f 95 05 56 bc 22 00\n89 05 53 bc 22 00\n4c 89 e7\n48 89 de\ne8 b0 02 00 00\n41 c7 07 00 00 00 00\n4c 89 e7\ne8 51 56 01 00\n48 89 c3\n48 85 db\n75 99\n41 8b 2f\n85 ed\n74 5c\n31 db\n31 ff\n4c 89 f6\ne8 36 55 00 00\n48 89 c1\n31 ff\nba 70 c6 41 00\n31 c0\n89 ee\neb 71\n41 8b 1f\n31 ff\nbe 5f c6 41 00\nba 05 00 00 00\ne8 02 f5 ff ff\n48 89 c5\n31 ff\n4c 89 f6\ne8 05 55 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 64 f9 ff ff\nbf 01 00 00 00\ne8 6a 46 00 00\nb3 01\neb 40\n4c 89 e7\ne8 5e 54 01 00\n85 c0\n74 43\n41 8b 2f\n31 db\n31 ff\nbe aa c6 41 00\nba 05 00 00 00\ne8 b4 f4 ff ff\n48 89 c1\n31 ff\n31 c0\n89 ee\n48 89 ca\n4c 89 f1\ne8 20 f9 ff ff\nbf 01 00 00 00\ne8 26 46 00 00\n89 d8\n48 83 c4 10\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\nb3 01\neb ed\n'
p3855
S'.text:00000000004032d0\n.text:00000000004032d1\n.text:00000000004032d3\n.text:00000000004032d5\n.text:00000000004032d7\n.text:00000000004032d8\n.text:00000000004032dc\n.text:00000000004032df\n.text:00000000004032e4\n.text:00000000004032ea\n.text:00000000004032ef\n.text:00000000004032f4\n.text:00000000004032f8\n.text:0000000000403301\n.text:0000000000403308\n.text:000000000040330c\n.text:000000000040330e\n.text:0000000000403315\n.text:000000000040331b\n.text:0000000000403322\n.text:0000000000403324\n.text:000000000040332b\n.text:0000000000403331\n.text:0000000000403334\n.text:0000000000403336\n.text:000000000040333b\n.text:000000000040333e\n.text:0000000000403343\n.text:0000000000403346\n.text:0000000000403349\n.text:000000000040334f\n.text:0000000000403356\n.text:0000000000403359\n.text:000000000040335e\n.text:0000000000403361\n.text:0000000000403364\n.text:0000000000403366\n.text:000000000040336b\n.text:0000000000403370\n.text:0000000000403377\n.text:0000000000403379\n.text:000000000040337c\n.text:000000000040337e\n.text:0000000000403385\n.text:000000000040338a\n.text:000000000040338f\n.text:0000000000403392\n.text:0000000000403399\n.text:00000000004033a0\n.text:00000000004033a6\n.text:00000000004033a8\n.text:00000000004033af\n.text:00000000004033b5\n.text:00000000004033b8\n.text:00000000004033bb\n.text:00000000004033c0\n.text:00000000004033c7\n.text:00000000004033ca\n.text:00000000004033cf\n.text:00000000004033d2\n.text:00000000004033d5\n.text:00000000004033d7\n.text:00000000004033da\n.text:00000000004033dc\n.text:00000000004033de\n.text:00000000004033e0\n.text:00000000004033e2\n.text:00000000004033e5\n.text:00000000004033ea\n.text:00000000004033ed\n.text:00000000004033ef\n.text:00000000004033f4\n.text:00000000004033f6\n.text:00000000004033f8\n.text:00000000004033fa\n.text:00000000004033fd\n.text:00000000004033ff\n.text:0000000000403404\n.text:0000000000403409\n.text:000000000040340e\n.text:0000000000403411\n.text:0000000000403413\n.text:0000000000403416\n.text:000000000040341b\n.text:000000000040341e\n.text:0000000000403420\n.text:0000000000403422\n.text:0000000000403424\n.text:0000000000403427\n.text:000000000040342c\n.text:0000000000403431\n.text:0000000000403436\n.text:0000000000403438\n.text:000000000040343a\n.text:000000000040343d\n.text:0000000000403442\n.text:0000000000403444\n.text:0000000000403446\n.text:0000000000403449\n.text:000000000040344b\n.text:000000000040344d\n.text:0000000000403452\n.text:0000000000403457\n.text:000000000040345c\n.text:000000000040345f\n.text:0000000000403461\n.text:0000000000403463\n.text:0000000000403465\n.text:0000000000403468\n.text:000000000040346b\n.text:0000000000403470\n.text:0000000000403475\n.text:000000000040347a\n.text:000000000040347c\n.text:0000000000403480\n.text:0000000000403481\n.text:0000000000403483\n.text:0000000000403485\n.text:0000000000403487\n.text:0000000000403488\n.text:0000000000403489\n.text:000000000040348b\n'
p3856
tp3857
sS'fts_safe_changedir'
p3858
(S'\n__stdcall fts_safe_changedir(FTS * sp, FTSENT * p, char * dir)\n'
p3859
V\u000aint fts_safe_changedir(FTS *sp,FTSENT *p,char *dir)\u000a\u000a{\u000a  uint uVar1;\u000a  _Bool _Var2;\u000a  int __fd;\u000a  int iVar3;\u000a  int *piVar4;\u000a  byte *dir_00;\u000a  int __fd_00;\u000a  bool bVar5;\u000a  stat sb;\u000a  stat local_c0;\u000a  \u000a  __fd_00 = (int)dir;\u000a  if (dir_00 == (byte *)0x0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    __fd = 0x2e - (uint)*dir_00;\u000a    if ((__fd == 0) && (__fd = 0x2e - (uint)dir_00[1], __fd == 0)) {\u000a      __fd = -(uint)dir_00[2];\u000a    }\u000a    bVar5 = __fd == 0;\u000a  }\u000a  uVar1 = sp->fts_options;\u000a  if ((uVar1 & 4) != 0) {\u000a    if (__fd_00 < 0) {\u000a      return 0;\u000a    }\u000a    if ((uVar1 & 0x200) == 0) {\u000a      return 0;\u000a    }\u000a    close(__fd_00);\u000a    return 0;\u000a  }\u000a  if (((__fd_00 < 0) && (bVar5)) && ((uVar1 & 0x200) != 0)) {\u000a    _Var2 = i_ring_empty(&sp->fts_fd_ring);\u000a    if (_Var2 == false) {\u000a      __fd = i_ring_pop(&sp->fts_fd_ring);\u000a      if (-1 < __fd) {\u000a        dir_00 = (byte *)0x0;\u000a        __fd_00 = __fd;\u000a      }\u000a    }\u000a  }\u000a  __fd = __fd_00;\u000a  if ((__fd_00 < 0) && (__fd = diropen(sp,(char *)dir_00), __fd < 0)) {\u000a    return -1;\u000a  }\u000a  if (((*(byte *)&sp->fts_options & 2) == 0) &&\u000a     (((dir_00 == (byte *)0x0 || (*dir_00 != 0x2e)) || ((dir_00[1] != 0x2e || (dir_00[2] != 0))))))\u000a  {\u000aLAB_00419161:\u000a    if ((*(byte *)((long)&sp->fts_options + 1) & 2) != 0) {\u000a      cwd_advance_fd(sp);\u000a      return 0;\u000a    }\u000a    iVar3 = fchdir(__fd);\u000a  }\u000a  else {\u000a    iVar3 = fstat(__fd,&local_c0);\u000a    if (iVar3 == 0) {\u000a      if ((p->fts_statp[0].st_dev == local_c0.st_dev) && (p->fts_statp[0].st_ino == local_c0.st_ino)\u000a         ) goto LAB_00419161;\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 2;\u000a    }\u000a    iVar3 = -1;\u000a  }\u000a  if (__fd_00 < 0) {\u000a    piVar4 = __errno_location();\u000a    __fd_00 = *piVar4;\u000a    close(__fd);\u000a    *piVar4 = __fd_00;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p3860
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV RBX,RCX\nMOV R13D,EDX\nMOV RBP,RSI\nMOV R14,RDI\nTEST RBX,RBX\nJZ 0x004190ab\nMOVZX EDX,byte ptr [RBX]\nMOV ECX,0x2e\nMOV EAX,0x2e\nSUB EAX,EDX\nJNZ 0x004190a3\nMOVZX EAX,byte ptr [RBX + 0x1]\nSUB ECX,EAX\nMOV EAX,ECX\nJNZ 0x004190a3\nMOVZX EAX,byte ptr [RBX + 0x2]\nNEG EAX\nTEST EAX,EAX\nSETZ R15B\nJMP 0x004190ae\nXOR R15D,R15D\nMOV EAX,dword ptr [R14 + 0x48]\nTEST AL,0x4\nJNZ 0x00419179\nTEST R13D,R13D\nJNS 0x004190fb\nMOV ECX,R15D\nXOR CL,0x1\nJNZ 0x004190fb\nAND EAX,0x200\nJZ 0x004190fb\nMOV R12,RBP\nLEA RBP,[R14 + 0x60]\nMOV RDI,RBP\nCALL 0x0041bc40\nTEST AL,AL\nJNZ 0x004190f8\nMOV RDI,RBP\nCALL 0x0041bc90\nXOR ECX,ECX\nTEST EAX,EAX\nCMOVNS RBX,RCX\nCMOVNS R13D,EAX\nMOV R15B,0x1\nMOV RBP,R12\nTEST R13D,R13D\nMOV R12D,R13D\nJNS 0x0041911a\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00418800\nMOV R12D,EAX\nTEST R12D,R12D\nJS 0x004191a8\nTEST byte ptr [R14 + 0x48],0x2\nJNZ 0x00419137\nTEST RBX,RBX\nJZ 0x00419161\nCMP byte ptr [RBX],0x2e\nJNZ 0x00419161\nCMP byte ptr [RBX + 0x1],0x2e\nJNZ 0x00419161\nCMP byte ptr [RBX + 0x2],0x0\nJNZ 0x00419161\nLEA RSI,[RSP + 0x8]\nMOV EDI,R12D\nCALL 0x0041c4a0\nTEST EAX,EAX\nJNZ 0x004191ba\nMOV RAX,qword ptr [RBP + 0x78]\nCMP RAX,qword ptr [RSP + 0x8]\nJNZ 0x004191af\nMOV RAX,qword ptr [0x80 + RBP]\nCMP RAX,qword ptr [RSP + 0x10]\nJNZ 0x004191af\nTEST byte ptr [R14 + 0x49],0x2\nJNZ 0x00419191\nMOV EDI,R12D\nCALL 0x00402d10\nMOV EBX,EAX\nTEST R13D,R13D\nJNS 0x004191dc\nJMP 0x004191c4\nXOR EBX,EBX\nTEST R13D,R13D\nJS 0x004191dc\nAND EAX,0x200\nJZ 0x004191dc\nMOV EDI,R13D\nCALL 0x00402ac0\nJMP 0x004191dc\nXOR EDX,EDX\nTEST R15B,R15B\nSETZ DL\nMOV RDI,R14\nMOV ESI,R12D\nCALL 0x00419b90\nXOR EBX,EBX\nJMP 0x004191dc\nMOV EBX,0xffffffff\nJMP 0x004191dc\nCALL 0x00402770\nMOV dword ptr [RAX],0x2\nMOV EBX,0xffffffff\nTEST R13D,R13D\nJNS 0x004191dc\nCALL 0x00402770\nMOV RBP,RAX\nMOV R14D,dword ptr [RBP]\nMOV EDI,R12D\nCALL 0x00402ac0\nMOV dword ptr [RBP],R14D\nMOV EAX,EBX\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p3861
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n48 89 cb\n41 89 d5\n48 89 f5\n49 89 fe\n48 85 db\n74 29\n0f b6 13\nb9 2e 00 00 00\nb8 2e 00 00 00\n29 d0\n75 10\n0f b6 43 01\n29 c1\n89 c8\n75 06\n0f b6 43 02\nf7 d8\n85 c0\n41 0f 94 c7\neb 03\n45 31 ff\n41 8b 46 48\na8 04\n0f 85 bf 00 00 00\n45 85 ed\n79 3c\n44 89 f9\n80 f1 01\n75 34\n25 00 02 00 00\n74 2d\n49 89 ec\n49 8d 6e 60\n48 89 ef\ne8 63 2b 00 00\n84 c0\n75 17\n48 89 ef\ne8 a7 2b 00 00\n31 c9\n85 c0\n48 0f 49 d9\n44 0f 49 e8\n41 b7 01\n4c 89 e5\n45 85 ed\n45 89 ec\n79 17\n4c 89 f7\n48 89 de\ne8 f2 f6 ff ff\n41 89 c4\n45 85 e4\n0f 88 8e 00 00 00\n41 f6 46 48 02\n75 16\n48 85 db\n74 3b\n80 3b 2e\n75 36\n80 7b 01 2e\n75 30\n80 7b 02 00\n75 2a\n48 8d 74 24 08\n44 89 e7\ne8 5c 33 00 00\n85 c0\n75 72\n48 8b 45 78\n48 3b 44 24 08\n75 5c\n48 8b 85 80 00 00 00\n48 3b 44 24 10\n75 4e\n41 f6 46 49 02\n75 29\n44 89 e7\ne8 a0 9b fe ff\n89 c3\n45 85 ed\n79 65\neb 4b\n31 db\n45 85 ed\n78 5c\n25 00 02 00 00\n74 55\n44 89 ef\ne8 31 99 fe ff\neb 4b\n31 d2\n45 84 ff\n0f 94 c2\n4c 89 f7\n44 89 e6\ne8 ec 09 00 00\n31 db\neb 34\nbb ff ff ff ff\neb 2d\ne8 bc 95 fe ff\nc7 00 02 00 00 00\nbb ff ff ff ff\n45 85 ed\n79 18\ne8 a7 95 fe ff\n48 89 c5\n44 8b 75 00\n44 89 e7\ne8 e8 98 fe ff\n44 89 75 00\n89 d8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p3862
S'.text:0000000000419060\n.text:0000000000419061\n.text:0000000000419063\n.text:0000000000419065\n.text:0000000000419067\n.text:0000000000419069\n.text:000000000041906a\n.text:0000000000419071\n.text:0000000000419074\n.text:0000000000419077\n.text:000000000041907a\n.text:000000000041907d\n.text:0000000000419080\n.text:0000000000419082\n.text:0000000000419085\n.text:000000000041908a\n.text:000000000041908f\n.text:0000000000419091\n.text:0000000000419093\n.text:0000000000419097\n.text:0000000000419099\n.text:000000000041909b\n.text:000000000041909d\n.text:00000000004190a1\n.text:00000000004190a3\n.text:00000000004190a5\n.text:00000000004190a9\n.text:00000000004190ab\n.text:00000000004190ae\n.text:00000000004190b2\n.text:00000000004190b4\n.text:00000000004190ba\n.text:00000000004190bd\n.text:00000000004190bf\n.text:00000000004190c2\n.text:00000000004190c5\n.text:00000000004190c7\n.text:00000000004190cc\n.text:00000000004190ce\n.text:00000000004190d1\n.text:00000000004190d5\n.text:00000000004190d8\n.text:00000000004190dd\n.text:00000000004190df\n.text:00000000004190e1\n.text:00000000004190e4\n.text:00000000004190e9\n.text:00000000004190eb\n.text:00000000004190ed\n.text:00000000004190f1\n.text:00000000004190f5\n.text:00000000004190f8\n.text:00000000004190fb\n.text:00000000004190fe\n.text:0000000000419101\n.text:0000000000419103\n.text:0000000000419106\n.text:0000000000419109\n.text:000000000041910e\n.text:0000000000419111\n.text:0000000000419114\n.text:000000000041911a\n.text:000000000041911f\n.text:0000000000419121\n.text:0000000000419124\n.text:0000000000419126\n.text:0000000000419129\n.text:000000000041912b\n.text:000000000041912f\n.text:0000000000419131\n.text:0000000000419135\n.text:0000000000419137\n.text:000000000041913c\n.text:000000000041913f\n.text:0000000000419144\n.text:0000000000419146\n.text:0000000000419148\n.text:000000000041914c\n.text:0000000000419151\n.text:0000000000419153\n.text:000000000041915a\n.text:000000000041915f\n.text:0000000000419161\n.text:0000000000419166\n.text:0000000000419168\n.text:000000000041916b\n.text:0000000000419170\n.text:0000000000419172\n.text:0000000000419175\n.text:0000000000419177\n.text:0000000000419179\n.text:000000000041917b\n.text:000000000041917e\n.text:0000000000419180\n.text:0000000000419185\n.text:0000000000419187\n.text:000000000041918a\n.text:000000000041918f\n.text:0000000000419191\n.text:0000000000419193\n.text:0000000000419196\n.text:0000000000419199\n.text:000000000041919c\n.text:000000000041919f\n.text:00000000004191a4\n.text:00000000004191a6\n.text:00000000004191a8\n.text:00000000004191ad\n.text:00000000004191af\n.text:00000000004191b4\n.text:00000000004191ba\n.text:00000000004191bf\n.text:00000000004191c2\n.text:00000000004191c4\n.text:00000000004191c9\n.text:00000000004191cc\n.text:00000000004191d0\n.text:00000000004191d3\n.text:00000000004191d8\n.text:00000000004191dc\n.text:00000000004191de\n.text:00000000004191e5\n.text:00000000004191e6\n.text:00000000004191e8\n.text:00000000004191ea\n.text:00000000004191ec\n.text:00000000004191ee\n.text:00000000004191ef\n'
p3863
tp3864
sS'mode_create_from_ref'
p3865
(S'\n__stdcall mode_create_from_ref(char * ref_file)\n'
p3866
V\u000amode_change * mode_create_from_ref(char *ref_file)\u000a\u000a{\u000a  int iVar1;\u000a  mode_change *pmVar2;\u000a  stat ref_stats;\u000a  stat local_90;\u000a  \u000a  iVar1 = stat(ref_file,&local_90);\u000a  if (iVar1 != 0) {\u000a    return (mode_change *)0x0;\u000a  }\u000a  pmVar2 = make_node_op_equals();\u000a  return pmVar2;\u000a}\u000a\u000a
p3867
S'SUB RSP,0x98\nLEA RSI,[RSP + 0x8]\nCALL 0x0041c490\nTEST EAX,EAX\nJZ 0x004130af\nXOR EAX,EAX\nADD RSP,0x98\nRET\nMOV EDI,dword ptr [RSP + 0x20]\nMOV ESI,0xfff\nCALL 0x00413060\nADD RSP,0x98\nRET\n'
p3868
S'48 81 ec 98 00 00 00\n48 8d 74 24 08\ne8 ef 93 00 00\n85 c0\n74 0a\n31 c0\n48 81 c4 98 00 00 00\nc3\n8b 7c 24 20\nbe ff 0f 00 00\ne8 a3 ff ff ff\n48 81 c4 98 00 00 00\nc3\n'
p3869
S'.text:0000000000413090\n.text:0000000000413097\n.text:000000000041309c\n.text:00000000004130a1\n.text:00000000004130a3\n.text:00000000004130a5\n.text:00000000004130a7\n.text:00000000004130ae\n.text:00000000004130af\n.text:00000000004130b3\n.text:00000000004130b8\n.text:00000000004130bd\n.text:00000000004130c4\n'
p3870
tp3871
sS'rotr64'
p3872
(S'\n__stdcall rotr64(uint64_t x)\n'
p3873
V\u000auint64_t rotr64(uint64_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x >> bVar1 | x << 0x40 - bVar1;\u000a}\u000a\u000a
p3874
S'MOV ECX,ESI\nROR RDI,CL\nMOV RAX,RDI\nRET\n'
p3875
S'89 f1\n48 d3 cf\n48 89 f8\nc3\n'
p3876
S'.text:000000000041b870\n.text:000000000041b872\n.text:000000000041b875\n.text:000000000041b878\n'
p3877
tp3878
sS'c_isalpha'
p3879
(S'\n__stdcall c_isalpha()\n'
p3880
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p3881
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x0041b98b\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p3882
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p3883
S'.text:000000000041b970\n.text:000000000041b973\n.text:000000000041b976\n.text:000000000041b978\n.text:000000000041b982\n.text:000000000041b984\n.text:000000000041b987\n.text:000000000041b98a\n.text:000000000041b98b\n.text:000000000041b98d\n'
p3884
tp3885
sS'gnu_dev_minor'
p3886
(S'\n__stdcall gnu_dev_minor(ulonglong __dev)\n'
p3887
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000auint gnu_dev_minor(ulonglong __dev)\u000a\u000a{\u000a  uint uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_gnu_dev_minor_0062d3c8)();\u000a  return uVar1;\u000a}\u000a\u000a
p3888
S'JMP qword ptr [0x0062d3c8]\n'
p3889
S'ff 25 72 a5 22 00\n'
p3890
S'.plt:0000000000402e50\n'
p3891
tp3892
sS'print_name_with_quoting'
p3893
(S'\n__stdcall print_name_with_quoting(char * p, FILE * stream)\n'
p3894
V\u000a_Bool print_name_with_quoting(char *p,FILE *stream)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined uVar2;\u000a  int iVar3;\u000a  char *__format;\u000a  \u000a  do {\u000a    while( true ) {\u000a      bVar1 = *p;\u000a      p = (char *)((byte *)p + 1);\u000a      if (bVar1 < 0x23) break;\u000a      if (bVar1 == 0x5c) {\u000a        __format = "\u005c\u005c\u005c\u005c";\u000a        goto LAB_0040f570;\u000a      }\u000aswitchD_0040f50e_caseD_1:\u000a      if ((byte)(bVar1 - 0x21) < 0x5e) {\u000a        iVar3 = _IO_putc((uint)bVar1,(_IO_FILE *)stream);\u000a        if (iVar3 == -1) goto LAB_0040f597;\u000a      }\u000a      else {\u000a        iVar3 = fprintf((FILE *)stream,"\u005c\u005c%03o");\u000a        if (iVar3 < 0) goto LAB_0040f597;\u000a      }\u000a    }\u000a    uVar2 = 1;\u000a    switch(bVar1) {\u000a    case 0:\u000a      goto switchD_0040f50e_caseD_0;\u000a    default:\u000a      goto switchD_0040f50e_caseD_1;\u000a    case 8:\u000a      __format = "\u005c\u005cb";\u000a      break;\u000a    case 9:\u000a      __format = "\u005c\u005ct";\u000a      break;\u000a    case 10:\u000a      __format = "\u005c\u005cn";\u000a      break;\u000a    case 0xc:\u000a      __format = "\u005c\u005cf";\u000a      break;\u000a    case 0xd:\u000a      __format = "\u005c\u005cr";\u000a      break;\u000a    case 0x20:\u000a      __format = "\u005c\u005c ";\u000a      break;\u000a    case 0x22:\u000a      __format = "\u005c\u005c\u005c"";\u000a    }\u000aLAB_0040f570:\u000a    iVar3 = fprintf((FILE *)stream,__format);\u000a  } while (-1 < iVar3);\u000aLAB_0040f597:\u000a  uVar2 = 0;\u000aswitchD_0040f50e_caseD_0:\u000a  return (_Bool)uVar2;\u000a}\u000a\u000a
p3895
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nNOP word ptr [RAX + RAX*0x1]\nMOVZX EDX,byte ptr [RBX]\nINC RBX\nCMP RDX,0x22\nJA 0x0040f51c\nMOV AL,0x1\nJMP qword ptr [0x422158 + RDX*0x8]\nMOV ESI,0x4222de\nJMP 0x0040f570\nCMP DL,0x5c\nJNZ 0x0040f528\nMOV ESI,0x4222d8\nJMP 0x0040f570\nMOV EAX,EDX\nADD AL,0xdf\nCMP AL,0x5d\nJA 0x0040f580\nMOV EDI,EDX\nMOV RSI,R14\nCALL 0x004029b0\nCMP EAX,-0x1\nJNZ 0x0040f500\nJMP 0x0040f597\nMOV ESI,0x4222e4\nJMP 0x0040f570\nMOV ESI,0x4222db\nJMP 0x0040f570\nMOV ESI,0x4222e7\nJMP 0x0040f570\nMOV ESI,0x4222e1\nJMP 0x0040f570\nMOV ESI,0x4222ea\nJMP 0x0040f570\nMOV ESI,0x4222ed\nNOP dword ptr [RAX]\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00402ba0\nTEST EAX,EAX\nJNS 0x0040f500\nJMP 0x0040f597\nMOV ESI,0x4222f0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00402ba0\nTEST EAX,EAX\nJNS 0x0040f500\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p3896
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n66 0f 1f 44 00 00\n0f b6 13\n48 ff c3\n48 83 fa 22\n77 10\nb0 01\nff 24 d5 58 21 42 00\nbe de 22 42 00\neb 54\n80 fa 5c\n75 07\nbe d8 22 42 00\neb 48\n89 d0\n04 df\n3c 5d\n77 50\n89 d7\n4c 89 f6\ne8 76 34 ff ff\n83 f8 ff\n75 c1\neb 56\nbe e4 22 42 00\neb 28\nbe db 22 42 00\neb 21\nbe e7 22 42 00\neb 1a\nbe e1 22 42 00\neb 13\nbe ea 22 42 00\neb 0c\nbe ed 22 42 00\n0f 1f 80 00 00 00 00\n31 c0\n4c 89 f7\ne8 26 36 ff ff\n85 c0\n79 82\neb 17\nbe f0 22 42 00\n31 c0\n4c 89 f7\ne8 11 36 ff ff\n85 c0\n0f 89 69 ff ff ff\n31 c0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p3897
S'.text:000000000040f4f0\n.text:000000000040f4f2\n.text:000000000040f4f3\n.text:000000000040f4f4\n.text:000000000040f4f7\n.text:000000000040f4fa\n.text:000000000040f500\n.text:000000000040f503\n.text:000000000040f506\n.text:000000000040f50a\n.text:000000000040f50c\n.text:000000000040f50e\n.text:000000000040f515\n.text:000000000040f51a\n.text:000000000040f51c\n.text:000000000040f51f\n.text:000000000040f521\n.text:000000000040f526\n.text:000000000040f528\n.text:000000000040f52a\n.text:000000000040f52c\n.text:000000000040f52e\n.text:000000000040f530\n.text:000000000040f532\n.text:000000000040f535\n.text:000000000040f53a\n.text:000000000040f53d\n.text:000000000040f53f\n.text:000000000040f541\n.text:000000000040f546\n.text:000000000040f548\n.text:000000000040f54d\n.text:000000000040f54f\n.text:000000000040f554\n.text:000000000040f556\n.text:000000000040f55b\n.text:000000000040f55d\n.text:000000000040f562\n.text:000000000040f564\n.text:000000000040f569\n.text:000000000040f570\n.text:000000000040f572\n.text:000000000040f575\n.text:000000000040f57a\n.text:000000000040f57c\n.text:000000000040f57e\n.text:000000000040f580\n.text:000000000040f585\n.text:000000000040f587\n.text:000000000040f58a\n.text:000000000040f58f\n.text:000000000040f591\n.text:000000000040f597\n.text:000000000040f599\n.text:000000000040f59d\n.text:000000000040f59e\n.text:000000000040f5a0\n'
p3898
tp3899
sS'__strtok_r'
p3900
(S'\n__stdcall __strtok_r(char * __s, char * __delim, char * * __save_ptr)\n'
p3901
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * __strtok_r(char *__s,char *__delim,char **__save_ptr)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR___strtok_r_0062d1d8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p3902
S'JMP qword ptr [0x0062d1d8]\n'
p3903
S'ff 25 62 a7 22 00\n'
p3904
S'.plt:0000000000402a70\n'
p3905
tp3906
sS'memset'
p3907
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p3908
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_0062d1e0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p3909
S'JMP qword ptr [0x0062d1e0]\n'
p3910
S'ff 25 5a a7 22 00\n'
p3911
S'.plt:0000000000402a80\n'
p3912
tp3913
sS'parse_version'
p3914
(S'\n__stdcall parse_version(parser_table * entry, char * * argv, int * arg_ptr)\n'
p3915
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000a_Bool parse_version(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  uint in_EAX;\u000a  char *__format;\u000a  ulong uStack8;\u000a  \u000a  uStack8._0_4_ = in_EAX;\u000a  display_findutils_version("find");\u000a  __format = (char *)dcgettext(0,"Features enabled: ",5);\u000a  printf(__format);\u000a  printf("D_TYPE ");\u000a  __format = "disabled";\u000a  if (options.open_nofollow_available != false) {\u000a    __format = "enabled";\u000a  }\u000a  printf("O_NOFOLLOW(%s) ",__format);\u000a  printf("LEAF_OPTIMISATION ");\u000a  uStack8 = (ulong)(uint)uStack8;\u000a  _Var1 = is_fts_enabled((int *)((long)&uStack8 + 4));\u000a  if (_Var1 != false) {\u000a    printf("FTS(");\u000a    if ((uStack8 & 0x20000000000) != 0) {\u000a      printf("FTS_CWDFD");\u000a    }\u000a    printf(") ");\u000a  }\u000a  printf("CBO(level=%d) ",(ulong)options.optimisation_level);\u000a  putchar(10);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(0);\u000a}\u000a\u000a
p3916
S'PUSH RAX\nMOV EDI,0x41c5e0\nCALL 0x0040eca0\nXOR EDI,EDI\nMOV ESI,0x421bc9\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nXOR EAX,EAX\nMOV RDI,RCX\nCALL 0x00402990\nMOV EDI,0x421bdc\nXOR EAX,EAX\nCALL 0x00402990\nCMP byte ptr [0x0062f098],0x0\nMOV EAX,0x421bf4\nMOV ESI,0x421bfc\nCMOVNZ RSI,RAX\nMOV EDI,0x421be4\nXOR EAX,EAX\nCALL 0x00402990\nMOV EDI,0x421c05\nXOR EAX,EAX\nCALL 0x00402990\nMOV dword ptr [RSP + 0x4],0x0\nLEA RDI,[RSP + 0x4]\nCALL 0x004032c0\nTEST AL,AL\nJZ 0x0040c713\nMOV EDI,0x421c18\nXOR EAX,EAX\nCALL 0x00402990\nTEST byte ptr [RSP + 0x5],0x2\nJZ 0x0040c707\nMOV EDI,0x421c1d\nXOR EAX,EAX\nCALL 0x00402990\nMOV EDI,0x41d1b1\nXOR EAX,EAX\nCALL 0x00402990\nMOVZX ESI,word ptr [0x0062f0a8]\nMOV EDI,0x421c27\nXOR EAX,EAX\nCALL 0x00402990\nMOV EDI,0xa\nCALL 0x00402720\nXOR EDI,EDI\nCALL 0x00402ed0\n'
p3917
S'50\nbf e0 c5 41 00\ne8 25 26 00 00\n31 ff\nbe c9 1b 42 00\nba 05 00 00 00\ne8 84 62 ff ff\n48 89 c1\n31 c0\n48 89 cf\ne8 f7 62 ff ff\nbf dc 1b 42 00\n31 c0\ne8 eb 62 ff ff\n80 3d ec 29 22 00 00\nb8 f4 1b 42 00\nbe fc 1b 42 00\n48 0f 45 f0\nbf e4 1b 42 00\n31 c0\ne8 ca 62 ff ff\nbf 05 1c 42 00\n31 c0\ne8 be 62 ff ff\nc7 44 24 04 00 00 00 00\n48 8d 7c 24 04\ne8 dc 6b ff ff\n84 c0\n74 2b\nbf 18 1c 42 00\n31 c0\ne8 9c 62 ff ff\nf6 44 24 05 02\n74 0c\nbf 1d 1c 42 00\n31 c0\ne8 89 62 ff ff\nbf b1 d1 41 00\n31 c0\ne8 7d 62 ff ff\n0f b7 35 8e 29 22 00\nbf 27 1c 42 00\n31 c0\ne8 6a 62 ff ff\nbf 0a 00 00 00\ne8 f0 5f ff ff\n31 ff\ne8 99 67 ff ff\n'
p3918
S'.text:000000000040c670\n.text:000000000040c671\n.text:000000000040c676\n.text:000000000040c67b\n.text:000000000040c67d\n.text:000000000040c682\n.text:000000000040c687\n.text:000000000040c68c\n.text:000000000040c68f\n.text:000000000040c691\n.text:000000000040c694\n.text:000000000040c699\n.text:000000000040c69e\n.text:000000000040c6a0\n.text:000000000040c6a5\n.text:000000000040c6ac\n.text:000000000040c6b1\n.text:000000000040c6b6\n.text:000000000040c6ba\n.text:000000000040c6bf\n.text:000000000040c6c1\n.text:000000000040c6c6\n.text:000000000040c6cb\n.text:000000000040c6cd\n.text:000000000040c6d2\n.text:000000000040c6da\n.text:000000000040c6df\n.text:000000000040c6e4\n.text:000000000040c6e6\n.text:000000000040c6e8\n.text:000000000040c6ed\n.text:000000000040c6ef\n.text:000000000040c6f4\n.text:000000000040c6f9\n.text:000000000040c6fb\n.text:000000000040c700\n.text:000000000040c702\n.text:000000000040c707\n.text:000000000040c70c\n.text:000000000040c70e\n.text:000000000040c713\n.text:000000000040c71a\n.text:000000000040c71f\n.text:000000000040c721\n.text:000000000040c726\n.text:000000000040c72b\n.text:000000000040c730\n.text:000000000040c732\n'
p3919
tp3920
sS'compare_ts'
p3921
(S'\n__stdcall compare_ts()\n'
p3922
V\u000aint compare_ts(void)\u000a\u000a{\u000a  int iVar1;\u000a  long in_RCX;\u000a  long in_RDX;\u000a  long in_RSI;\u000a  long in_RDI;\u000a  double dVar2;\u000a  \u000a  if ((in_RDI != in_RDX) || (iVar1 = 0, in_RSI != in_RCX)) {\u000a    dVar2 = ts_difference();\u000a    iVar1 = 1;\u000a    if (dVar2 < 0.00000000) {\u000a      iVar1 = -1;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p3923
S'CMP RDI,RDX\nJNZ 0x00404acc\nXOR EAX,EAX\nCMP RSI,RCX\nJZ 0x00404aea\nPUSH RAX\nCALL 0x00405150\nXORPS XMM1,XMM1\nUCOMISD XMM1,XMM0\nMOV ECX,0xffffffff\nMOV EAX,0x1\nCMOVA EAX,ECX\nADD RSP,0x8\nRET\n'
p3924
S'48 39 d7\n75 07\n31 c0\n48 39 ce\n74 1e\n50\ne8 7e 06 00 00\n0f 57 c9\n66 0f 2e c8\nb9 ff ff ff ff\nb8 01 00 00 00\n0f 47 c1\n48 83 c4 08\nc3\n'
p3925
S'.text:0000000000404ac0\n.text:0000000000404ac3\n.text:0000000000404ac5\n.text:0000000000404ac7\n.text:0000000000404aca\n.text:0000000000404acc\n.text:0000000000404acd\n.text:0000000000404ad2\n.text:0000000000404ad5\n.text:0000000000404ad9\n.text:0000000000404ade\n.text:0000000000404ae3\n.text:0000000000404ae6\n.text:0000000000404aea\n'
p3926
tp3927
sS'cleanup'
p3928
(S'\n__stdcall cleanup(EVP_PKEY_CTX * ctx)\n'
p3929
V\u000avoid cleanup(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  predicate *tree;\u000a  uint *puVar3;\u000a  \u000a  tree = get_eval_tree();\u000a  if (tree == (predicate *)0x0) {\u000a    sharefile_destroy(state.shared_files);\u000a  }\u000a  else {\u000a    traverse_tree(tree,complete_pending_execs);\u000a    complete_pending_execdirs();\u000a    sharefile_destroy(state.shared_files);\u000a    traverse_tree(tree,undangle_file_pointers);\u000a  }\u000a  cleanup_initial_cwd();\u000a  _Var1 = fd_leak_check_is_enabled();\u000a  if (_Var1 != false) {\u000a    complain_about_leaky_fds();\u000a    forget_non_cloexec_fds();\u000a  }\u000a  iVar2 = rpl_fflush(stdout);\u000a  if (iVar2 != -1) {\u000a    return;\u000a  }\u000a  puVar3 = (uint *)__errno_location();\u000a  nonfatal_nontarget_file_error((char *)(ulong)*puVar3);\u000a  return;\u000a}\u000a\u000a
p3930
S'PUSH RBX\nCALL 0x004058b0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00407e5b\nMOV ESI,0x407ce0\nMOV RDI,RBX\nCALL 0x00407eb0\nCALL 0x00407c20\nMOV RDI,qword ptr [0x0062f030]\nCALL 0x00408b40\nMOV ESI,0x407ef0\nMOV RDI,RBX\nCALL 0x00407eb0\nJMP 0x00407e67\nMOV RDI,qword ptr [0x0062f030]\nCALL 0x00408b40\nCALL 0x00407f30\nCALL 0x00407e00\nTEST AL,AL\nJZ 0x00407e7f\nCALL 0x0040ea60\nCALL 0x0040ea30\nMOV RDI,qword ptr [0x0062de28]\nCALL 0x00417fa0\nCMP EAX,-0x1\nJZ 0x00407e92\nPOP RBX\nRET\nCALL 0x00402770\nMOV EDI,dword ptr [RAX]\nMOV ESI,0x41e73a\nPOP RBX\nJMP 0x00407ff0\n'
p3931
S'53\ne8 8a da ff ff\n48 89 c3\n48 85 db\n74 2d\nbe e0 7c 40 00\n48 89 df\ne8 75 00 00 00\ne8 e0 fd ff ff\n48 8b 3d e9 71 22 00\ne8 f4 0c 00 00\nbe f0 7e 40 00\n48 89 df\ne8 57 00 00 00\neb 0c\n48 8b 3d ce 71 22 00\ne8 d9 0c 00 00\ne8 c4 00 00 00\ne8 8f ff ff ff\n84 c0\n74 0a\ne8 e6 6b 00 00\ne8 b1 6b 00 00\n48 8b 3d a2 5f 22 00\ne8 15 01 01 00\n83 f8 ff\n74 02\n5b\nc3\ne8 d9 a8 ff ff\n8b 38\nbe 3a e7 41 00\n5b\ne9 4c 01 00 00\n'
p3932
S'.text:0000000000407e20\n.text:0000000000407e21\n.text:0000000000407e26\n.text:0000000000407e29\n.text:0000000000407e2c\n.text:0000000000407e2e\n.text:0000000000407e33\n.text:0000000000407e36\n.text:0000000000407e3b\n.text:0000000000407e40\n.text:0000000000407e47\n.text:0000000000407e4c\n.text:0000000000407e51\n.text:0000000000407e54\n.text:0000000000407e59\n.text:0000000000407e5b\n.text:0000000000407e62\n.text:0000000000407e67\n.text:0000000000407e6c\n.text:0000000000407e71\n.text:0000000000407e73\n.text:0000000000407e75\n.text:0000000000407e7a\n.text:0000000000407e7f\n.text:0000000000407e86\n.text:0000000000407e8b\n.text:0000000000407e8e\n.text:0000000000407e90\n.text:0000000000407e91\n.text:0000000000407e92\n.text:0000000000407e97\n.text:0000000000407e99\n.text:0000000000407e9e\n.text:0000000000407e9f\n'
p3933
tp3934
sS'perform_delete'
p3935
(S'\n__stdcall perform_delete()\n'
p3936
V\u000a_Bool perform_delete(void)\u000a\u000a{\u000a  int iVar1;\u000a  int __flag;\u000a  \u000a  iVar1 = unlinkat(state.cwd_dir_fd,state.rel_pathname,__flag);\u000a  return (_Bool)(iVar1 == 0);\u000a}\u000a\u000a
p3937
S'PUSH RAX\nMOV EAX,EDI\nMOV EDI,dword ptr [0x0062f018]\nMOV RSI,qword ptr [0x0062f010]\nMOV EDX,EAX\nCALL 0x004027e0\nTEST EAX,EAX\nSETZ AL\nPOP RCX\nRET\n'
p3938
S'50\n89 f8\n8b 3d 1f a5 22 00\n48 8b 35 10 a5 22 00\n89 c2\ne8 d9 dc ff ff\n85 c0\n0f 94 c0\n59\nc3\n'
p3939
S'.text:0000000000404af0\n.text:0000000000404af1\n.text:0000000000404af3\n.text:0000000000404af9\n.text:0000000000404b00\n.text:0000000000404b02\n.text:0000000000404b07\n.text:0000000000404b09\n.text:0000000000404b0c\n.text:0000000000404b0d\n'
p3940
tp3941
sS'__xargmatch_internal'
p3942
(S'\n__stdcall __xargmatch_internal(char * context, char * arg, char * * arglist, char * vallist, size_t valsize, argmatch_exit_fn * exit_fn)\n'
p3943
V\u000aptrdiff_t __xargmatch_internal\u000a                    (char *context,char *arg,char **arglist,char *vallist,size_t valsize,\u000a                    void (*exit_fn)())\u000a\u000a{\u000a  ptrdiff_t problem;\u000a  \u000a  problem = argmatch(arg,arglist,vallist,valsize);\u000a  if (problem < 0) {\u000a    argmatch_invalid(context,arg,problem);\u000a    argmatch_valid(arglist,vallist,valsize);\u000a    (*exit_fn)();\u000a    problem = -1;\u000a  }\u000a  return problem;\u000a}\u000a\u000a
p3944
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,R9\nMOV R15,R8\nMOV R12,RCX\nMOV R13,RDX\nMOV RBX,RSI\nMOV RBP,RDI\nMOV RDI,RBX\nMOV RSI,R13\nMOV RDX,R12\nMOV RCX,R15\nCALL 0x0041b520\nTEST RAX,RAX\nJNS 0x0041b7d9\nMOV RDI,RBP\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x0041b620\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nCALL 0x0041b690\nCALL R14\nMOV RAX,-0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p3945
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 ce\n4d 89 c7\n49 89 cc\n49 89 d5\n48 89 f3\n48 89 fd\n48 89 df\n4c 89 ee\n4c 89 e2\n4c 89 f9\ne8 72 fd ff ff\n48 85 c0\n79 26\n48 89 ef\n48 89 de\n48 89 c2\ne8 5f fe ff ff\n4c 89 ef\n4c 89 e6\n4c 89 fa\ne8 c1 fe ff ff\n41 ff d6\n48 c7 c0 ff ff ff ff\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p3946
S'.text:000000000041b780\n.text:000000000041b781\n.text:000000000041b783\n.text:000000000041b785\n.text:000000000041b787\n.text:000000000041b789\n.text:000000000041b78a\n.text:000000000041b78b\n.text:000000000041b78e\n.text:000000000041b791\n.text:000000000041b794\n.text:000000000041b797\n.text:000000000041b79a\n.text:000000000041b79d\n.text:000000000041b7a0\n.text:000000000041b7a3\n.text:000000000041b7a6\n.text:000000000041b7a9\n.text:000000000041b7ae\n.text:000000000041b7b1\n.text:000000000041b7b3\n.text:000000000041b7b6\n.text:000000000041b7b9\n.text:000000000041b7bc\n.text:000000000041b7c1\n.text:000000000041b7c4\n.text:000000000041b7c7\n.text:000000000041b7ca\n.text:000000000041b7cf\n.text:000000000041b7d2\n.text:000000000041b7d9\n.text:000000000041b7dd\n.text:000000000041b7de\n.text:000000000041b7e0\n.text:000000000041b7e2\n.text:000000000041b7e4\n.text:000000000041b7e6\n.text:000000000041b7e7\n'
p3947
tp3948
sS'print_tree'
p3949
(S'\n__stdcall print_tree(FILE * fp, predicate * node)\n'
p3950
V\u000avoid print_tree(FILE *fp,predicate *node)\u000a\u000a{\u000a  _Bool _Var1;\u000a  bool bVar2;\u000a  char *__ptr;\u000a  char *pcVar3;\u000a  undefined *puVar4;\u000a  int in_EDX;\u000a  int iVar5;\u000a  size_t __size;\u000a  bool bVar6;\u000a  \u000a  if (node != (predicate *)0x0) {\u000a    do {\u000a      if (0 < in_EDX) {\u000a        iVar5 = 0;\u000a        do {\u000a          fwrite(&DAT_0041cc27,4,1,(FILE *)fp);\u000a          iVar5 = iVar5 + 1;\u000a        } while (in_EDX != iVar5);\u000a      }\u000a      fwrite("pred=[",6,1,(FILE *)fp);\u000a      print_predicate(fp,node);\u000a      __ptr = type_name();\u000a      pcVar3 = prec_name();\u000a      fprintf((FILE *)fp,"] type=%s prec=%s",__ptr,pcVar3);\u000a      __ptr = cost_name();\u000a      puVar4 = &DAT_0041d8aa;\u000a      if (node->side_effects != false) {\u000a        puVar4 = (undefined *)0x41e69a;\u000a      }\u000a      fprintf((FILE *)(double)node->est_success_rate,(char *)fp,\u000a              " cost=%s est_success_rate=%#.4g %sside effects ",__ptr,puVar4);\u000a      if (((node->need_stat != false) || (node->need_type != false)) || (node->need_inum != false))\u000a      {\u000a        fwrite("Needs ",6,1,(FILE *)fp);\u000a        bVar6 = node->need_stat == false;\u000a        if (bVar6) {\u000a          _Var1 = node->need_inum;\u000a        }\u000a        else {\u000a          fwrite("stat",4,1,(FILE *)fp);\u000a          _Var1 = node->need_inum;\u000a        }\u000a        bVar2 = !bVar6;\u000a        if (_Var1 != false) {\u000a          puVar4 = (undefined *)0x41e69a;\u000a          if (!bVar6) {\u000a            puVar4 = &DAT_0041d8bd;\u000a          }\u000a          fprintf((FILE *)fp,"%sinode",puVar4);\u000a          bVar2 = true;\u000a        }\u000a        if (node->need_type != false) {\u000a          puVar4 = (undefined *)0x41e69a;\u000a          if (bVar2) {\u000a            puVar4 = &DAT_0041d8bd;\u000a          }\u000a          fprintf((FILE *)fp,"%stype",puVar4);\u000a        }\u000a      }\u000a      fputc(10,(FILE *)fp);\u000a      if (0 < in_EDX) {\u000a        iVar5 = 0;\u000a        do {\u000a          fwrite(&DAT_0041cc27,4,1,(FILE *)fp);\u000a          iVar5 = iVar5 + 1;\u000a        } while (in_EDX != iVar5);\u000a      }\u000a      if (node->pred_left == (predicate *)0x0) {\u000a        if (node->pred_right == (predicate *)0x0) {\u000a          __ptr = "no children.\u005cn";\u000a          __size = 0xd;\u000a          goto LAB_00406685;\u000a        }\u000a        fwrite("no left.\u005cn",9,1,(FILE *)fp);\u000a      }\u000a      else {\u000a        fwrite("left:\u005cn",6,1,(FILE *)fp);\u000a        print_tree(fp,node->pred_left);\u000a      }\u000a      if (0 < in_EDX) {\u000a        iVar5 = 0;\u000a        do {\u000a          fwrite(&DAT_0041cc27,4,1,(FILE *)fp);\u000a          iVar5 = iVar5 + 1;\u000a        } while (in_EDX != iVar5);\u000a      }\u000a      if (node->pred_right == (predicate *)0x0) {\u000a        __ptr = "no right.\u005cn";\u000a        __size = 10;\u000aLAB_00406685:\u000a        fwrite(__ptr,__size,1,(FILE *)fp);\u000a        return;\u000a      }\u000a      fwrite("right:\u005cn",7,1,(FILE *)fp);\u000a      node = node->pred_right;\u000a      in_EDX = in_EDX + 1;\u000a    } while (node != (predicate *)0x0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p3951
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R15,RSI\nMOV R14,RDI\nTEST R15,R15\nJZ 0x00406660\nMOV R13D,0x41d8bd\nNOP word ptr CS:[RAX + RAX*0x1]\nTEST EBX,EBX\nJLE 0x0040642d\nXOR EBP,EBP\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV EDI,0x41cc27\nMOV ESI,0x4\nMOV EDX,0x1\nMOV RCX,R14\nCALL 0x00402ee0\nINC EBP\nCMP EBX,EBP\nJNZ 0x00406410\nMOV EDI,0x41d861\nMOV ESI,0x6\nMOV EDX,0x1\nMOV RCX,R14\nCALL 0x00402ee0\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x00405880\nMOVSX EDI,word ptr [R15 + 0x10]\nCALL 0x00406ce0\nMOV R12,RAX\nMOVSX EDI,word ptr [R15 + 0x14]\nCALL 0x00406d20\nMOV RCX,RAX\nMOV ESI,0x41d868\nXOR EAX,EAX\nMOV RDI,R14\nMOV RDX,R12\nCALL 0x00402ba0\nMOV EDI,dword ptr [R15 + 0x20]\nCALL 0x00406d60\nMOV RDX,RAX\nMOVSS XMM0,dword ptr [R15 + 0x24]\nCVTSS2SD XMM0,XMM0\nCMP byte ptr [R15 + 0x18],0x0\nMOV ECX,0x41d8aa\nMOV EAX,0x41e69a\nCMOVNZ RCX,RAX\nMOV ESI,0x41d87a\nMOV AL,0x1\nMOV RDI,R14\nCALL 0x00402ba0\nCMP byte ptr [R15 + 0x1a],0x0\nJNZ 0x004064d0\nCMP byte ptr [R15 + 0x1b],0x0\nJNZ 0x004064d0\nCMP byte ptr [R15 + 0x1c],0x0\nJZ 0x00406569\nNOP dword ptr [RAX]\nMOV EDI,0x41d8ae\nMOV ESI,0x6\nMOV EDX,0x1\nMOV RCX,R14\nCALL 0x00402ee0\nCMP byte ptr [R15 + 0x1a],0x0\nJZ 0x00406520\nMOV EDI,0x420e28\nMOV ESI,0x4\nMOV EDX,0x1\nMOV RCX,R14\nCALL 0x00402ee0\nMOV EAX,0x1\nCMP byte ptr [R15 + 0x1c],0x0\nJNZ 0x00406529\nJMP 0x00406548\nXOR EAX,EAX\nCMP byte ptr [R15 + 0x1c],0x0\nJZ 0x00406548\nTEST EAX,EAX\nMOV EDX,0x41e69a\nCMOVNZ RDX,R13\nMOV ESI,0x41d8b5\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00402ba0\nMOV EAX,0x1\nCMP byte ptr [R15 + 0x1b],0x0\nJZ 0x00406569\nTEST EAX,EAX\nMOV EDX,0x41e69a\nCMOVNZ RDX,R13\nMOV ESI,0x41d8bf\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00402ba0\nMOV EDI,0xa\nMOV RSI,R14\nCALL 0x00402af0\nTEST EBX,EBX\nJLE 0x0040659d\nXOR EBP,EBP\nNOP dword ptr [RAX]\nMOV EDI,0x41cc27\nMOV ESI,0x4\nMOV EDX,0x1\nMOV RCX,R14\nCALL 0x00402ee0\nINC EBP\nCMP EBX,EBP\nJNZ 0x00406580\nCMP qword ptr [0x110 + R15],0x0\nJZ 0x004065e0\nMOV EDI,0x41d8d4\nMOV ESI,0x6\nMOV EDX,0x1\nMOV RCX,R14\nCALL 0x00402ee0\nMOV RSI,qword ptr [0x110 + R15]\nLEA EDX,[RBX + 0x1]\nMOV RDI,R14\nCALL 0x004063d0\nTEST EBX,EBX\nJG 0x00406609\nJMP 0x0040662d\nCMP qword ptr [0x118 + R15],0x0\nJZ 0x0040667b\nMOV EDI,0x41d8db\nMOV ESI,0x9\nMOV EDX,0x1\nMOV RCX,R14\nCALL 0x00402ee0\nTEST EBX,EBX\nJLE 0x0040662d\nXOR EBP,EBP\nNOP dword ptr [RAX + RAX*0x1]\nMOV EDI,0x41cc27\nMOV ESI,0x4\nMOV EDX,0x1\nMOV RCX,R14\nCALL 0x00402ee0\nINC EBP\nCMP EBX,EBP\nJNZ 0x00406610\nCMP qword ptr [0x118 + R15],0x0\nJZ 0x0040666f\nMOV EDI,0x41d8e5\nMOV ESI,0x7\nMOV EDX,0x1\nMOV RCX,R14\nCALL 0x00402ee0\nMOV R15,qword ptr [0x118 + R15]\nINC EBX\nTEST R15,R15\nJNZ 0x00406400\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x41d8ed\nMOV ESI,0xa\nJMP 0x00406685\nMOV EDI,0x41d8c6\nMOV ESI,0xd\nMOV EDX,0x1\nMOV RCX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00402ee0\n'
p3952
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n89 d3\n49 89 f7\n49 89 fe\n4d 85 ff\n0f 84 74 02 00 00\n41 bd bd d8 41 00\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n85 db\n7e 29\n31 ed\n66 2e 0f 1f 84 00 00 00 00 00\nbf 27 cc 41 00\nbe 04 00 00 00\nba 01 00 00 00\n4c 89 f1\ne8 b9 ca ff ff\nff c5\n39 eb\n75 e3\nbf 61 d8 41 00\nbe 06 00 00 00\nba 01 00 00 00\n4c 89 f1\ne8 9c ca ff ff\n4c 89 f7\n4c 89 fe\ne8 31 f4 ff ff\n41 0f bf 7f 10\ne8 87 08 00 00\n49 89 c4\n41 0f bf 7f 14\ne8 ba 08 00 00\n48 89 c1\nbe 68 d8 41 00\n31 c0\n4c 89 f7\n4c 89 e2\ne8 25 c7 ff ff\n41 8b 7f 20\ne8 dc 08 00 00\n48 89 c2\nf3 41 0f 10 47 24\nf3 0f 5a c0\n41 80 7f 18 00\nb9 aa d8 41 00\nb8 9a e6 41 00\n48 0f 45 c8\nbe 7a d8 41 00\nb0 01\n4c 89 f7\ne8 ed c6 ff ff\n41 80 7f 1a 00\n75 16\n41 80 7f 1b 00\n75 0f\n41 80 7f 1c 00\n0f 84 9d 00 00 00\n0f 1f 40 00\nbf ae d8 41 00\nbe 06 00 00 00\nba 01 00 00 00\n4c 89 f1\ne8 f9 c9 ff ff\n41 80 7f 1a 00\n74 32\nbf 28 0e 42 00\nbe 04 00 00 00\nba 01 00 00 00\n4c 89 f1\ne8 db c9 ff ff\nb8 01 00 00 00\n41 80 7f 1c 00\n75 18\neb 35\n31 c0\n41 80 7f 1c 00\n74 1f\n85 c0\nba 9a e6 41 00\n49 0f 45 d5\nbe b5 d8 41 00\n31 c0\n4c 89 f7\ne8 5d c6 ff ff\nb8 01 00 00 00\n41 80 7f 1b 00\n74 1a\n85 c0\nba 9a e6 41 00\n49 0f 45 d5\nbe bf d8 41 00\n31 c0\n4c 89 f7\ne8 37 c6 ff ff\nbf 0a 00 00 00\n4c 89 f6\ne8 7a c5 ff ff\n85 db\n7e 23\n31 ed\n0f 1f 40 00\nbf 27 cc 41 00\nbe 04 00 00 00\nba 01 00 00 00\n4c 89 f1\ne8 49 c9 ff ff\nff c5\n39 eb\n75 e3\n49 83 bf 10 01 00 00 00\n74 39\nbf d4 d8 41 00\nbe 06 00 00 00\nba 01 00 00 00\n4c 89 f1\ne8 22 c9 ff ff\n49 8b b7 10 01 00 00\n8d 53 01\n4c 89 f7\ne8 00 fe ff ff\n85 db\n7f 35\neb 57\n49 83 bf 18 01 00 00 00\n0f 84 8d 00 00 00\nbf db d8 41 00\nbe 09 00 00 00\nba 01 00 00 00\n4c 89 f1\ne8 db c8 ff ff\n85 db\n7e 24\n31 ed\n0f 1f 44 00 00\nbf 27 cc 41 00\nbe 04 00 00 00\nba 01 00 00 00\n4c 89 f1\ne8 b9 c8 ff ff\nff c5\n39 eb\n75 e3\n49 83 bf 18 01 00 00 00\n74 38\nbf e5 d8 41 00\nbe 07 00 00 00\nba 01 00 00 00\n4c 89 f1\ne8 92 c8 ff ff\n4d 8b bf 18 01 00 00\nff c3\n4d 85 ff\n0f 85 a0 fd ff ff\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf ed d8 41 00\nbe 0a 00 00 00\neb 0a\nbf c6 d8 41 00\nbe 0d 00 00 00\nba 01 00 00 00\n4c 89 f1\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 40 c8 ff ff\n'
p3953
S'.text:00000000004063d0\n.text:00000000004063d1\n.text:00000000004063d3\n.text:00000000004063d5\n.text:00000000004063d7\n.text:00000000004063d9\n.text:00000000004063da\n.text:00000000004063db\n.text:00000000004063dd\n.text:00000000004063e0\n.text:00000000004063e3\n.text:00000000004063e6\n.text:00000000004063ec\n.text:00000000004063f2\n.text:0000000000406400\n.text:0000000000406402\n.text:0000000000406404\n.text:0000000000406406\n.text:0000000000406410\n.text:0000000000406415\n.text:000000000040641a\n.text:000000000040641f\n.text:0000000000406422\n.text:0000000000406427\n.text:0000000000406429\n.text:000000000040642b\n.text:000000000040642d\n.text:0000000000406432\n.text:0000000000406437\n.text:000000000040643c\n.text:000000000040643f\n.text:0000000000406444\n.text:0000000000406447\n.text:000000000040644a\n.text:000000000040644f\n.text:0000000000406454\n.text:0000000000406459\n.text:000000000040645c\n.text:0000000000406461\n.text:0000000000406466\n.text:0000000000406469\n.text:000000000040646e\n.text:0000000000406470\n.text:0000000000406473\n.text:0000000000406476\n.text:000000000040647b\n.text:000000000040647f\n.text:0000000000406484\n.text:0000000000406487\n.text:000000000040648d\n.text:0000000000406491\n.text:0000000000406496\n.text:000000000040649b\n.text:00000000004064a0\n.text:00000000004064a4\n.text:00000000004064a9\n.text:00000000004064ab\n.text:00000000004064ae\n.text:00000000004064b3\n.text:00000000004064b8\n.text:00000000004064ba\n.text:00000000004064bf\n.text:00000000004064c1\n.text:00000000004064c6\n.text:00000000004064cc\n.text:00000000004064d0\n.text:00000000004064d5\n.text:00000000004064da\n.text:00000000004064df\n.text:00000000004064e2\n.text:00000000004064e7\n.text:00000000004064ec\n.text:00000000004064ee\n.text:00000000004064f3\n.text:00000000004064f8\n.text:00000000004064fd\n.text:0000000000406500\n.text:0000000000406505\n.text:000000000040650a\n.text:000000000040650f\n.text:0000000000406511\n.text:0000000000406520\n.text:0000000000406522\n.text:0000000000406527\n.text:0000000000406529\n.text:000000000040652b\n.text:0000000000406530\n.text:0000000000406534\n.text:0000000000406539\n.text:000000000040653b\n.text:000000000040653e\n.text:0000000000406543\n.text:0000000000406548\n.text:000000000040654d\n.text:000000000040654f\n.text:0000000000406551\n.text:0000000000406556\n.text:000000000040655a\n.text:000000000040655f\n.text:0000000000406561\n.text:0000000000406564\n.text:0000000000406569\n.text:000000000040656e\n.text:0000000000406571\n.text:0000000000406576\n.text:0000000000406578\n.text:000000000040657a\n.text:000000000040657c\n.text:0000000000406580\n.text:0000000000406585\n.text:000000000040658a\n.text:000000000040658f\n.text:0000000000406592\n.text:0000000000406597\n.text:0000000000406599\n.text:000000000040659b\n.text:000000000040659d\n.text:00000000004065a5\n.text:00000000004065a7\n.text:00000000004065ac\n.text:00000000004065b1\n.text:00000000004065b6\n.text:00000000004065b9\n.text:00000000004065be\n.text:00000000004065c5\n.text:00000000004065c8\n.text:00000000004065cb\n.text:00000000004065d0\n.text:00000000004065d2\n.text:00000000004065d4\n.text:00000000004065e0\n.text:00000000004065e8\n.text:00000000004065ee\n.text:00000000004065f3\n.text:00000000004065f8\n.text:00000000004065fd\n.text:0000000000406600\n.text:0000000000406605\n.text:0000000000406607\n.text:0000000000406609\n.text:000000000040660b\n.text:0000000000406610\n.text:0000000000406615\n.text:000000000040661a\n.text:000000000040661f\n.text:0000000000406622\n.text:0000000000406627\n.text:0000000000406629\n.text:000000000040662b\n.text:000000000040662d\n.text:0000000000406635\n.text:0000000000406637\n.text:000000000040663c\n.text:0000000000406641\n.text:0000000000406646\n.text:0000000000406649\n.text:000000000040664e\n.text:0000000000406655\n.text:0000000000406657\n.text:000000000040665a\n.text:0000000000406660\n.text:0000000000406664\n.text:0000000000406665\n.text:0000000000406667\n.text:0000000000406669\n.text:000000000040666b\n.text:000000000040666d\n.text:000000000040666e\n.text:000000000040666f\n.text:0000000000406674\n.text:0000000000406679\n.text:000000000040667b\n.text:0000000000406680\n.text:0000000000406685\n.text:000000000040668a\n.text:000000000040668d\n.text:0000000000406691\n.text:0000000000406692\n.text:0000000000406694\n.text:0000000000406696\n.text:0000000000406698\n.text:000000000040669a\n.text:000000000040669b\n'
p3954
tp3955
sS'lookup_zone'
p3956
(S'\n__stdcall lookup_zone(parser_control * pc, char * name)\n'
p3957
V\u000atable * lookup_zone(parser_control *pc,char *name)\u000a\u000a{\u000a  int iVar1;\u000a  table *ptVar2;\u000a  char *__s2;\u000a  \u000a  ptVar2 = universal_time_zone_table;\u000a  __s2 = "GMT";\u000a  do {\u000a    iVar1 = strcmp(name,__s2);\u000a    if (iVar1 == 0) {\u000a      return ptVar2;\u000a    }\u000a    __s2 = ptVar2[1].name;\u000a    ptVar2 = ptVar2 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = pc->local_time_zone_table[0].name;\u000a  if (__s2 != (char *)0x0) {\u000a    ptVar2 = pc->local_time_zone_table;\u000a    do {\u000a      iVar1 = strcmp(name,__s2);\u000a      if (iVar1 == 0) {\u000a        return ptVar2;\u000a      }\u000a      __s2 = ptVar2[1].name;\u000a      ptVar2 = ptVar2 + 1;\u000a    } while (__s2 != (char *)0x0);\u000a  }\u000a  ptVar2 = time_zone_table;\u000a  __s2 = "WET";\u000a  do {\u000a    iVar1 = strcmp(name,__s2);\u000a    if (iVar1 == 0) {\u000a      return ptVar2;\u000a    }\u000a    __s2 = ptVar2[1].name;\u000a    ptVar2 = ptVar2 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  return (table *)0x0;\u000a}\u000a\u000a
p3958
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nMOV EBX,0x423ed0\nMOV ESI,0x42434f\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R14\nCALL 0x00402b40\nTEST EAX,EAX\nJZ 0x0041508b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00415010\nMOV RSI,qword ptr [0xe0 + R15]\nTEST RSI,RSI\nJZ 0x00415059\nADD R15,0xe0\nMOV RBX,R15\nNOP\nMOV RDI,R14\nCALL 0x00402b40\nTEST EAX,EAX\nJZ 0x0041508b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00415040\nMOV EBX,0x423f10\nMOV ESI,0x42435a\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R14\nCALL 0x00402b40\nTEST EAX,EAX\nJZ 0x0041508b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00415070\nXOR EBX,EBX\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p3959
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\nbb d0 3e 42 00\nbe 4f 43 42 00\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 f7\ne8 28 db fe ff\n85 c0\n74 6f\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e7\n49 8b b7 e0 00 00 00\n48 85 f6\n74 24\n49 81 c7 e0 00 00 00\n4c 89 fb\n90\n4c 89 f7\ne8 f8 da fe ff\n85 c0\n74 3f\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e7\nbb 10 3f 42 00\nbe 5a 43 42 00\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 f7\ne8 c8 da fe ff\n85 c0\n74 0f\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e7\n31 db\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p3960
S'.text:0000000000414ff0\n.text:0000000000414ff2\n.text:0000000000414ff4\n.text:0000000000414ff5\n.text:0000000000414ff8\n.text:0000000000414ffb\n.text:0000000000415000\n.text:0000000000415005\n.text:0000000000415010\n.text:0000000000415013\n.text:0000000000415018\n.text:000000000041501a\n.text:000000000041501c\n.text:0000000000415020\n.text:0000000000415024\n.text:0000000000415027\n.text:0000000000415029\n.text:0000000000415030\n.text:0000000000415033\n.text:0000000000415035\n.text:000000000041503c\n.text:000000000041503f\n.text:0000000000415040\n.text:0000000000415043\n.text:0000000000415048\n.text:000000000041504a\n.text:000000000041504c\n.text:0000000000415050\n.text:0000000000415054\n.text:0000000000415057\n.text:0000000000415059\n.text:000000000041505e\n.text:0000000000415063\n.text:0000000000415070\n.text:0000000000415073\n.text:0000000000415078\n.text:000000000041507a\n.text:000000000041507c\n.text:0000000000415080\n.text:0000000000415084\n.text:0000000000415087\n.text:0000000000415089\n.text:000000000041508b\n.text:000000000041508e\n.text:000000000041508f\n.text:0000000000415091\n.text:0000000000415093\n'
p3961
tp3962
sS'pred_type'
p3963
(S'\n__stdcall pred_type(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p3964
V\u000a_Bool pred_type(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  uint uVar1;\u000a  \u000a  if (state.have_type == false) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("state.have_type","pred.c",0x417,\u000a                  "_Bool pred_type(const char *, struct stat *, struct predicate *)");\u000a  }\u000a  if (state.type != 0) {\u000a    uVar1 = state.type;\u000a    if (state.have_stat != false) {\u000a      uVar1 = stat_buf->st_mode;\u000a    }\u000a    uVar1 = (uVar1 & 0xf000) - 0x1000 >> 0xc;\u000a    if (((uVar1 < 0xc) && ((0x554U >> ((ulong)uVar1 & 0x1f) & 1) == 0)) &&\u000a       (pred_ptr->args[(ulong)*(uint *)(&DAT_0041ca70 + ((long)((ulong)uVar1 << 0x2c) >> 0x2c) * 4)]\u000a        != 0)) {\u000a      return true;\u000a    }\u000a  }\u000a  return false;\u000a}\u000a\u000a
p3965
S'CMP byte ptr [0x0062f005],0x0\nJZ 0x004047e7\nMOV EAX,dword ptr [0x0062f008]\nTEST EAX,EAX\nJZ 0x004047e4\nCMP byte ptr [0x0062f004],0x0\nJZ 0x004047af\nMOV EAX,dword ptr [RSI + 0x18]\nAND EAX,0xf000\nADD EAX,0xfffff000\nSHR EAX,0xc\nCMP EAX,0xb\nJA 0x004047e4\nMOV ECX,0x554\nBT RCX,RAX\nJC 0x004047e4\nSHL RAX,0x2c\nSAR RAX,0x2c\nMOV ECX,dword ptr [0x41ca70 + RAX*0x4]\nMOV AL,0x1\nCMP byte ptr [RDX + RCX*0x1 + 0x38],0x0\nJNZ 0x004047e6\nXOR EAX,EAX\nRET\nPUSH RAX\nMOV EDI,0x41cf2c\nMOV ESI,0x41cd0c\nMOV EDX,0x417\nMOV ECX,0x41cf3c\nCALL 0x00402a40\n'
p3966
S'80 3d 6e a8 22 00 00\n74 4e\n8b 05 69 a8 22 00\n85 c0\n74 41\n80 3d 5a a8 22 00 00\n74 03\n8b 46 18\n25 00 f0 00 00\n05 00 f0 ff ff\nc1 e8 0c\n83 f8 0b\n77 23\nb9 54 05 00 00\n48 0f a3 c1\n72 18\n48 c1 e0 2c\n48 c1 f8 2c\n8b 0c 85 70 ca 41 00\nb0 01\n80 7c 0a 38 00\n75 02\n31 c0\nc3\n50\nbf 2c cf 41 00\nbe 0c cd 41 00\nba 17 04 00 00\nb9 3c cf 41 00\ne8 3f e2 ff ff\n'
p3967
S'.text:0000000000404790\n.text:0000000000404797\n.text:0000000000404799\n.text:000000000040479f\n.text:00000000004047a1\n.text:00000000004047a3\n.text:00000000004047aa\n.text:00000000004047ac\n.text:00000000004047af\n.text:00000000004047b4\n.text:00000000004047b9\n.text:00000000004047bc\n.text:00000000004047bf\n.text:00000000004047c1\n.text:00000000004047c6\n.text:00000000004047ca\n.text:00000000004047cc\n.text:00000000004047d0\n.text:00000000004047d4\n.text:00000000004047db\n.text:00000000004047dd\n.text:00000000004047e2\n.text:00000000004047e4\n.text:00000000004047e6\n.text:00000000004047e7\n.text:00000000004047e8\n.text:00000000004047ed\n.text:00000000004047f2\n.text:00000000004047f7\n.text:00000000004047fc\n'
p3968
tp3969
sS'pred_ok'
p3970
(S'\n__stdcall pred_ok(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p3971
V\u000a_Bool pred_ok(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = is_ok(**(char ***)(pred_ptr->args + 0xb0),pathname);\u000a  if (_Var1 != false) {\u000a    _Var1 = impl_pred_exec(pathname,stat_buf,pred_ptr);\u000a    return _Var1;\u000a  }\u000a  return false;\u000a}\u000a\u000a
p3972
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [0xe8 + R15]\nMOV RDI,qword ptr [RAX]\nMOV RSI,RBX\nCALL 0x00404c20\nTEST AL,AL\nJZ 0x00404497\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00405180\nXOR EAX,EAX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p3973
S'41 57\n41 56\n53\n49 89 d7\n49 89 f6\n48 89 fb\n49 8b 87 e8 00 00 00\n48 8b 38\n48 89 de\ne8 a0 07 00 00\n84 c0\n74 13\n48 89 df\n4c 89 f6\n4c 89 fa\n5b\n41 5e\n41 5f\ne9 e9 0c 00 00\n31 c0\n5b\n41 5e\n41 5f\nc3\n'
p3974
S'.text:0000000000404460\n.text:0000000000404462\n.text:0000000000404464\n.text:0000000000404465\n.text:0000000000404468\n.text:000000000040446b\n.text:000000000040446e\n.text:0000000000404475\n.text:0000000000404478\n.text:000000000040447b\n.text:0000000000404480\n.text:0000000000404482\n.text:0000000000404484\n.text:0000000000404487\n.text:000000000040448a\n.text:000000000040448d\n.text:000000000040448e\n.text:0000000000404490\n.text:0000000000404492\n.text:0000000000404497\n.text:0000000000404499\n.text:000000000040449a\n.text:000000000040449c\n.text:000000000040449e\n'
p3975
tp3976
sS'checked_fwrite'
p3977
(S'\n__stdcall checked_fwrite()\n'
p3978
V\u000avoid checked_fwrite(void *pvParm1,ulong uParm2,long lParm3)\u000a\u000a{\u000a  size_t sVar1;\u000a  uint *puVar2;\u000a  \u000a  sVar1 = fwrite(pvParm1,1,uParm2,*(FILE **)(lParm3 + 8));\u000a  if (sVar1 < uParm2) {\u000a    puVar2 = (uint *)__errno_location();\u000a    nonfatal_nontarget_file_error((char *)(ulong)*puVar2);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p3979
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV RBX,RSI\nMOV RCX,qword ptr [R14 + 0x8]\nMOV ESI,0x1\nMOV RDX,RBX\nCALL 0x00402ee0\nCMP RAX,RBX\nJNC 0x00409fd7\nCALL 0x00402770\nMOV EDI,dword ptr [RAX]\nMOV RSI,qword ptr [R14 + 0x10]\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00407ff0\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p3980
S'41 56\n53\n50\n49 89 d6\n48 89 f3\n49 8b 4e 08\nbe 01 00 00 00\n48 89 da\ne8 25 8f ff ff\n48 39 d8\n73 17\ne8 ab 87 ff ff\n8b 38\n49 8b 76 10\n48 83 c4 08\n5b\n41 5e\ne9 19 e0 ff ff\n48 83 c4 08\n5b\n41 5e\nc3\n'
p3981
S'.text:0000000000409fa0\n.text:0000000000409fa2\n.text:0000000000409fa3\n.text:0000000000409fa4\n.text:0000000000409fa7\n.text:0000000000409faa\n.text:0000000000409fae\n.text:0000000000409fb3\n.text:0000000000409fb6\n.text:0000000000409fbb\n.text:0000000000409fbe\n.text:0000000000409fc0\n.text:0000000000409fc5\n.text:0000000000409fc7\n.text:0000000000409fcb\n.text:0000000000409fcf\n.text:0000000000409fd0\n.text:0000000000409fd2\n.text:0000000000409fd7\n.text:0000000000409fdb\n.text:0000000000409fdc\n.text:0000000000409fde\n'
p3982
tp3983
sS'undangle_file_pointers'
p3984
(S'\n__stdcall undangle_file_pointers(predicate * p)\n'
p3985
V\u000avoid undangle_file_pointers(predicate *p)\u000a\u000a{\u000a  _Bool (*pVar1)(char *,stat *,predicate *);\u000a  \u000a  pVar1 = p->pred_func;\u000a  if ((((pVar1 == pred_fprint0) || (pVar1 == pred_fls)) || (pVar1 == pred_fprint)) ||\u000a     (pVar1 == pred_fprintf)) {\u000a    *(undefined8 *)(p->args + 8) = 0;\u000a  }\u000a  return;\u000a}\u000a\u000a
p3986
S'MOV RAX,qword ptr [RDI]\nMOV ECX,0x4040c0\nCMP RAX,RCX\nJZ 0x00407f1b\nMOV ECX,0x404b10\nCMP RAX,RCX\nJZ 0x00407f1b\nMOV ECX,0x404090\nCMP RAX,RCX\nJZ 0x00407f1b\nMOV ECX,0x4091c0\nCMP RAX,RCX\nJNZ 0x00407f23\nMOV qword ptr [RDI + 0x40],0x0\nRET\n'
p3987
S'48 8b 07\nb9 c0 40 40 00\n48 39 c8\n74 1e\nb9 10 4b 40 00\n48 39 c8\n74 14\nb9 90 40 40 00\n48 39 c8\n74 0a\nb9 c0 91 40 00\n48 39 c8\n75 08\n48 c7 47 40 00 00 00 00\nc3\n'
p3988
S'.text:0000000000407ef0\n.text:0000000000407ef3\n.text:0000000000407ef8\n.text:0000000000407efb\n.text:0000000000407efd\n.text:0000000000407f02\n.text:0000000000407f05\n.text:0000000000407f07\n.text:0000000000407f0c\n.text:0000000000407f0f\n.text:0000000000407f11\n.text:0000000000407f16\n.text:0000000000407f19\n.text:0000000000407f1b\n.text:0000000000407f23\n'
p3989
tp3990
sS'pred_or'
p3991
(S'\n__stdcall pred_or(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p3992
V\u000a_Bool pred_or(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  if (pred_ptr->pred_left != (predicate *)0x0) {\u000a    _Var1 = apply_predicate(pathname,stat_buf,pred_ptr->pred_left);\u000a    if (_Var1 != false) {\u000a      return true;\u000a    }\u000a  }\u000a  _Var1 = apply_predicate(pathname,stat_buf,pred_ptr->pred_right);\u000a  return _Var1;\u000a}\u000a\u000a
p3993
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV RBX,RDX\nMOV R14,RSI\nMOV R15,RDI\nMOV RDX,qword ptr [0x110 + RBX]\nTEST RDX,RDX\nJZ 0x00404531\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x004088a0\nTEST AL,AL\nJZ 0x00404531\nMOV AL,0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOV RDX,qword ptr [0x118 + RBX]\nMOV RDI,R15\nMOV RSI,R14\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x004088a0\n'
p3994
S'41 57\n41 56\n53\n48 89 d3\n49 89 f6\n49 89 ff\n48 8b 93 10 01 00 00\n48 85 d2\n74 17\n4c 89 ff\n4c 89 f6\ne8 7b 43 00 00\n84 c0\n74 08\nb0 01\n5b\n41 5e\n41 5f\nc3\n48 8b 93 18 01 00 00\n4c 89 ff\n4c 89 f6\n5b\n41 5e\n41 5f\ne9 58 43 00 00\n'
p3995
S'.text:0000000000404500\n.text:0000000000404502\n.text:0000000000404504\n.text:0000000000404505\n.text:0000000000404508\n.text:000000000040450b\n.text:000000000040450e\n.text:0000000000404515\n.text:0000000000404518\n.text:000000000040451a\n.text:000000000040451d\n.text:0000000000404520\n.text:0000000000404525\n.text:0000000000404527\n.text:0000000000404529\n.text:000000000040452b\n.text:000000000040452c\n.text:000000000040452e\n.text:0000000000404530\n.text:0000000000404531\n.text:0000000000404538\n.text:000000000040453b\n.text:000000000040453e\n.text:000000000040453f\n.text:0000000000404541\n.text:0000000000404543\n'
p3996
tp3997
sS'rotr32'
p3998
(S'\n__stdcall rotr32()\n'
p3999
V\u000auint32_t rotr32(void)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x1f;\u000a  return (uint32_t)(in_EDI >> bVar1 | in_EDI << 0x20 - bVar1);\u000a}\u000a\u000a
p4000
S'MOV ECX,ESI\nROR EDI,CL\nMOV EAX,EDI\nRET\n'
p4001
S'89 f1\nd3 cf\n89 f8\nc3\n'
p4002
S'.text:000000000041b890\n.text:000000000041b892\n.text:000000000041b894\n.text:000000000041b896\n'
p4003
tp4004
sS'c_iscntrl'
p4005
(S'\n__stdcall c_iscntrl()\n'
p4006
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p4007
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x0041b9b8\nRET\nCMP EDI,0x7f\nJZ 0x0041b9b7\nXOR EAX,EAX\nRET\n'
p4008
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p4009
S'.text:000000000041b9b0\n.text:000000000041b9b2\n.text:000000000041b9b5\n.text:000000000041b9b7\n.text:000000000041b9b8\n.text:000000000041b9bb\n.text:000000000041b9bd\n.text:000000000041b9bf\n'
p4010
tp4011
sS'c_isblank'
p4012
(S'\n__stdcall c_isblank()\n'
p4013
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p4014
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p4015
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p4016
S'.text:000000000041b9a0\n.text:000000000041b9a3\n.text:000000000041b9a6\n.text:000000000041b9a9\n.text:000000000041b9ac\n.text:000000000041b9ae\n'
p4017
tp4018
sS'long_int_avg'
p4019
(S'\n__stdcall long_int_avg(long_int a, long_int b)\n'
p4020
V\u000along_int long_int_avg(long_int a,long_int b)\u000a\u000a{\u000a  long_int lVar1;\u000a  long_int lVar2;\u000a  \u000a  lVar1 = shr(a);\u000a  lVar2 = shr(b);\u000a  return lVar1 + (ulong)(((uint)b | (uint)a) & 1) + lVar2;\u000a}\u000a\u000a
p4021
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV RBX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nCALL 0x0041a6f0\nMOV R15,RAX\nMOV ESI,0x1\nMOV RDI,RBX\nCALL 0x0041a6f0\nOR EBX,R14D\nAND EBX,0x1\nADD R15,RBX\nADD R15,RAX\nMOV RAX,R15\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p4022
S'41 57\n41 56\n53\n48 89 f3\n49 89 fe\nbe 01 00 00 00\ne8 db ff ff ff\n49 89 c7\nbe 01 00 00 00\n48 89 df\ne8 cb ff ff ff\n44 09 f3\n83 e3 01\n49 01 df\n49 01 c7\n4c 89 f8\n5b\n41 5e\n41 5f\nc3\n'
p4023
S'.text:000000000041a700\n.text:000000000041a702\n.text:000000000041a704\n.text:000000000041a705\n.text:000000000041a708\n.text:000000000041a70b\n.text:000000000041a710\n.text:000000000041a715\n.text:000000000041a718\n.text:000000000041a71d\n.text:000000000041a720\n.text:000000000041a725\n.text:000000000041a728\n.text:000000000041a72b\n.text:000000000041a72e\n.text:000000000041a731\n.text:000000000041a734\n.text:000000000041a735\n.text:000000000041a737\n.text:000000000041a739\n'
p4024
tp4025
sS'pred_false'
p4026
(S'\n__stdcall pred_false(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p4027
V\u000a_Bool pred_false(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  return false;\u000a}\u000a\u000a
p4028
S'XOR EAX,EAX\nRET\n'
p4029
S'31 c0\nc3\n'
p4030
S'.text:0000000000404080\n.text:0000000000404082\n'
p4031
tp4032
sS'isdst_differ'
p4033
(S'\n__stdcall isdst_differ()\n'
p4034
V\u000a_Bool isdst_differ(void)\u000a\u000a{\u000a  uint in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(-1 < (int)(in_ESI | in_EDI) && (in_ESI == 0) != (in_EDI == 0));\u000a}\u000a\u000a
p4035
S'TEST EDI,EDI\nSETZ AL\nTEST ESI,ESI\nSETZ CL\nXOR CL,AL\nOR ESI,EDI\nSETNS AL\nAND AL,CL\nRET\n'
p4036
S'85 ff\n0f 94 c0\n85 f6\n0f 94 c1\n30 c1\n09 fe\n0f 99 c0\n20 c8\nc3\n'
p4037
S'.text:000000000041a690\n.text:000000000041a692\n.text:000000000041a695\n.text:000000000041a697\n.text:000000000041a69a\n.text:000000000041a69c\n.text:000000000041a69e\n.text:000000000041a6a1\n.text:000000000041a6a3\n'
p4038
tp4039
sS'parse_quit'
p4040
(S'\n__stdcall parse_quit(parser_table * entry, char * * argv, int * arg_ptr)\n'
p4041
V\u000a_Bool parse_quit(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  predicate *ppVar1;\u000a  \u000a  ppVar1 = insert_primary_noarg(entry);\u000a  ppVar1->need_type = false;\u000a  ppVar1->need_stat = false;\u000a  ppVar1->side_effects = true;\u000a  ppVar1->no_default_print = false;\u000a  ppVar1->est_success_rate = 1.00000000;\u000a  return true;\u000a}\u000a\u000a
p4042
S'PUSH RAX\nCALL 0x00407760\nMOV byte ptr [RAX + 0x1b],0x0\nMOV byte ptr [RAX + 0x1a],0x0\nMOV byte ptr [RAX + 0x18],0x1\nMOV byte ptr [RAX + 0x19],0x0\nMOV dword ptr [RAX + 0x24],0x3f800000\nMOV AL,0x1\nPOP RCX\nRET\n'
p4043
S'50\ne8 da b7 ff ff\nc6 40 1b 00\nc6 40 1a 00\nc6 40 18 01\nc6 40 19 00\nc7 40 24 00 00 80 3f\nb0 01\n59\nc3\n'
p4044
S'.text:000000000040bf80\n.text:000000000040bf81\n.text:000000000040bf86\n.text:000000000040bf8a\n.text:000000000040bf8e\n.text:000000000040bf92\n.text:000000000040bf96\n.text:000000000040bf9d\n.text:000000000040bf9f\n.text:000000000040bfa0\n'
p4045
tp4046
sS'find_parser'
p4047
(S'\n__stdcall find_parser(char * search_name)\n'
p4048
V\u000aparser_table * find_parser(char *search_name)\u000a\u000a{\u000a  int iVar1;\u000a  size_t sVar2;\u000a  parser_table *entry;\u000a  long lVar3;\u000a  char *__s2;\u000a  \u000a  iVar1 = strncmp("-newer",search_name,6);\u000a  if (iVar1 == 0) {\u000a    sVar2 = strlen(search_name);\u000a    if (sVar2 == 8) {\u000a      entry = &parse_entry_newerXY;\u000a      goto LAB_0040a86f;\u000a    }\u000a  }\u000a  __s2 = search_name + 1;\u000a  if (*search_name != '-') {\u000a    __s2 = search_name;\u000a  }\u000a  lVar3 = 0;\u000a  while( true ) {\u000a    iVar1 = strcmp(*(char **)((long)&parse_table[0].parser_name + lVar3),__s2);\u000a    if (iVar1 == 0) break;\u000a    lVar3 = lVar3 + 0x20;\u000a    if (lVar3 == 0xaa0) {\u000a      return (parser_table *)0x0;\u000a    }\u000a  }\u000a  entry = (parser_table *)((long)&parse_table[0].type + lVar3);\u000aLAB_0040a86f:\u000a  entry = found_parser(search_name,entry);\u000a  return entry;\u000a}\u000a\u000a
p4049
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RDI\nMOV EDI,0x420b52\nMOV EDX,0x6\nMOV RSI,R14\nCALL 0x00402790\nTEST EAX,EAX\nJNZ 0x0040a823\nMOV RDI,R14\nCALL 0x00402930\nCMP RAX,0x8\nJNZ 0x0040a823\nMOV ESI,0x41ffc0\nJMP 0x0040a86f\nLEA R15,[R14 + 0x1]\nCMP byte ptr [R14],0x2d\nCMOVNZ R15,R14\nXOR EBX,EBX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,qword ptr [0x41ffe8 + RBX]\nMOV RSI,R15\nCALL 0x00402b40\nTEST EAX,EAX\nJZ 0x0040a868\nADD RBX,0x20\nCMP RBX,0xaa0\nJNZ 0x0040a840\nXOR EAX,EAX\nPOP RBX\nPOP R14\nPOP R15\nRET\nLEA RSI,[0x41ffe0 + RBX]\nMOV RDI,R14\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x0040a880\n'
p4050
S'41 57\n41 56\n53\n49 89 fe\nbf 52 0b 42 00\nba 06 00 00 00\n4c 89 f6\ne8 86 7f ff ff\n85 c0\n75 15\n4c 89 f7\ne8 1a 81 ff ff\n48 83 f8 08\n75 07\nbe c0 ff 41 00\neb 4c\n4d 8d 7e 01\n41 80 3e 2d\n4d 0f 45 fe\n31 db\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b bb e8 ff 41 00\n4c 89 fe\ne8 f1 82 ff ff\n85 c0\n74 15\n48 83 c3 20\n48 81 fb a0 0a 00 00\n75 e0\n31 c0\n5b\n41 5e\n41 5f\nc3\n48 8d b3 e0 ff 41 00\n4c 89 f7\n5b\n41 5e\n41 5f\neb 07\n'
p4051
S'.text:000000000040a7f0\n.text:000000000040a7f2\n.text:000000000040a7f4\n.text:000000000040a7f5\n.text:000000000040a7f8\n.text:000000000040a7fd\n.text:000000000040a802\n.text:000000000040a805\n.text:000000000040a80a\n.text:000000000040a80c\n.text:000000000040a80e\n.text:000000000040a811\n.text:000000000040a816\n.text:000000000040a81a\n.text:000000000040a81c\n.text:000000000040a821\n.text:000000000040a823\n.text:000000000040a827\n.text:000000000040a82b\n.text:000000000040a82f\n.text:000000000040a831\n.text:000000000040a840\n.text:000000000040a847\n.text:000000000040a84a\n.text:000000000040a84f\n.text:000000000040a851\n.text:000000000040a853\n.text:000000000040a857\n.text:000000000040a85e\n.text:000000000040a860\n.text:000000000040a862\n.text:000000000040a863\n.text:000000000040a865\n.text:000000000040a867\n.text:000000000040a868\n.text:000000000040a86f\n.text:000000000040a872\n.text:000000000040a873\n.text:000000000040a875\n.text:000000000040a877\n'
p4052
tp4053
sS'entry_hashfunc'
p4054
(S'\n__stdcall entry_hashfunc(void * pv, size_t buckets)\n'
p4055
V\u000asize_t entry_hashfunc(void *pv,size_t buckets)\u000a\u000a{\u000a  return (*(ulong *)((long)pv + 8) ^ *(ulong *)pv) % buckets;\u000a}\u000a\u000a
p4056
S'MOV RAX,qword ptr [RDI + 0x8]\nXOR RAX,qword ptr [RDI]\nXOR EDX,EDX\nDIV RSI\nMOV RAX,RDX\nRET\n'
p4057
S'48 8b 47 08\n48 33 07\n31 d2\n48 f7 f6\n48 89 d0\nc3\n'
p4058
S'.text:0000000000408ad0\n.text:0000000000408ad4\n.text:0000000000408ad7\n.text:0000000000408ad9\n.text:0000000000408adc\n.text:0000000000408adf\n'
p4059
tp4060
sS'argmatch'
p4061
(S'\n__stdcall argmatch(char * arg, char * * arglist, char * vallist, size_t valsize)\n'
p4062
V\u000aptrdiff_t argmatch(char *arg,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  bool bVar1;\u000a  long lVar2;\u000a  int iVar3;\u000a  size_t __n;\u000a  size_t sVar4;\u000a  long lVar5;\u000a  ptrdiff_t pVar6;\u000a  char *__s2;\u000a  char *__s1;\u000a  long local_50;\u000a  \u000a  __n = strlen(arg);\u000a  __s1 = *arglist;\u000a  if (__s1 == (char *)0x0) {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a  }\u000a  else {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a    lVar5 = 0;\u000a    __s2 = vallist;\u000a    do {\u000a      iVar3 = strncmp(__s1,arg,__n);\u000a      lVar2 = local_50;\u000a      if (iVar3 == 0) {\u000a        sVar4 = strlen(__s1);\u000a        if (sVar4 == __n) {\u000a          return lVar5;\u000a        }\u000a        lVar2 = lVar5;\u000a        if ((local_50 != -1) &&\u000a           ((vallist == (char *)0x0 ||\u000a            (iVar3 = memcmp(vallist + local_50 * valsize,__s2,valsize), lVar2 = local_50, iVar3 != 0\u000a            )))) {\u000a          bVar1 = true;\u000a          lVar2 = local_50;\u000a        }\u000a      }\u000a      local_50 = lVar2;\u000a      __s1 = arglist[lVar5 + 1];\u000a      lVar5 = lVar5 + 1;\u000a      __s2 = __s2 + valsize;\u000a    } while (__s1 != (char *)0x0);\u000a  }\u000a  pVar6 = -2;\u000a  if (!bVar1) {\u000a    pVar6 = local_50;\u000a  }\u000a  return pVar6;\u000a}\u000a\u000a
p4063
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R13,RCX\nMOV R14,RDX\nMOV RBP,RSI\nMOV R12,RDI\nCALL 0x00402930\nMOV RBX,RAX\nMOV qword ptr [RSP + 0x20],RBP\nMOV R15,qword ptr [RBP]\nTEST R15,R15\nJZ 0x0041b5e7\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nMOV qword ptr [RSP + 0x18],R14\nXOR EBP,EBP\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,R15\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x00402790\nTEST EAX,EAX\nJNZ 0x0041b5d0\nMOV RDI,R15\nCALL 0x00402930\nCMP RAX,RBX\nJZ 0x0041b609\nCMP qword ptr [RSP + 0x8],-0x1\nJZ 0x0041b5c5\nMOV RAX,qword ptr [RSP + 0x18]\nTEST RAX,RAX\nJZ 0x0041b5bc\nMOV RDI,qword ptr [RSP + 0x8]\nIMUL RDI,R13\nADD RDI,RAX\nMOV RSI,R14\nMOV RDX,R13\nCALL 0x00402b20\nTEST EAX,EAX\nJZ 0x0041b5d0\nMOV AL,0x1\nMOV qword ptr [RSP + 0x10],RAX\nJMP 0x0041b5d0\nMOV qword ptr [RSP + 0x8],RBP\nNOP word ptr [RAX + RAX*0x1]\nMOV RAX,qword ptr [RSP + 0x20]\nMOV R15,qword ptr [RAX + RBP*0x8 + 0x8]\nINC RBP\nADD R14,R13\nTEST R15,R15\nJNZ 0x0041b570\nJMP 0x0041b5f7\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nTEST byte ptr [RSP + 0x10],0x1\nMOV RBP,-0x2\nCMOVZ RBP,qword ptr [RSP + 0x8]\nMOV RAX,RBP\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p4064
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 cd\n49 89 d6\n48 89 f5\n49 89 fc\ne8 f1 73 fe ff\n48 89 c3\n48 89 6c 24 20\n4c 8b 7d 00\n4d 85 ff\n0f 84 93 00 00 00\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\n4c 89 74 24 18\n31 ed\n0f 1f 44 00 00\n4c 89 ff\n4c 89 e6\n48 89 da\ne8 12 72 fe ff\n85 c0\n75 4e\n4c 89 ff\ne8 a6 73 fe ff\n48 39 d8\n74 7a\n48 83 7c 24 08 ff\n74 2e\n48 8b 44 24 18\n48 85 c0\n74 1b\n48 8b 7c 24 08\n49 0f af fd\n48 01 c7\n4c 89 f6\n4c 89 ea\ne8 68 75 fe ff\n85 c0\n74 14\nb0 01\n48 89 44 24 10\neb 0b\n48 89 6c 24 08\n66 0f 1f 44 00 00\n48 8b 44 24 20\n4c 8b 7c e8 08\n48 ff c5\n4d 01 ee\n4d 85 ff\n75 8b\neb 10\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\nf6 44 24 10 01\n48 c7 c5 fe ff ff ff\n48 0f 44 6c 24 08\n48 89 e8\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p4065
S'.text:000000000041b520\n.text:000000000041b521\n.text:000000000041b523\n.text:000000000041b525\n.text:000000000041b527\n.text:000000000041b529\n.text:000000000041b52a\n.text:000000000041b52e\n.text:000000000041b531\n.text:000000000041b534\n.text:000000000041b537\n.text:000000000041b53a\n.text:000000000041b53f\n.text:000000000041b542\n.text:000000000041b547\n.text:000000000041b54b\n.text:000000000041b54e\n.text:000000000041b554\n.text:000000000041b55d\n.text:000000000041b55f\n.text:000000000041b564\n.text:000000000041b569\n.text:000000000041b56b\n.text:000000000041b570\n.text:000000000041b573\n.text:000000000041b576\n.text:000000000041b579\n.text:000000000041b57e\n.text:000000000041b580\n.text:000000000041b582\n.text:000000000041b585\n.text:000000000041b58a\n.text:000000000041b58d\n.text:000000000041b58f\n.text:000000000041b595\n.text:000000000041b597\n.text:000000000041b59c\n.text:000000000041b59f\n.text:000000000041b5a1\n.text:000000000041b5a6\n.text:000000000041b5aa\n.text:000000000041b5ad\n.text:000000000041b5b0\n.text:000000000041b5b3\n.text:000000000041b5b8\n.text:000000000041b5ba\n.text:000000000041b5bc\n.text:000000000041b5be\n.text:000000000041b5c3\n.text:000000000041b5c5\n.text:000000000041b5ca\n.text:000000000041b5d0\n.text:000000000041b5d5\n.text:000000000041b5da\n.text:000000000041b5dd\n.text:000000000041b5e0\n.text:000000000041b5e3\n.text:000000000041b5e5\n.text:000000000041b5e7\n.text:000000000041b5f0\n.text:000000000041b5f2\n.text:000000000041b5f7\n.text:000000000041b5fc\n.text:000000000041b603\n.text:000000000041b609\n.text:000000000041b60c\n.text:000000000041b610\n.text:000000000041b611\n.text:000000000041b613\n.text:000000000041b615\n.text:000000000041b617\n.text:000000000041b619\n.text:000000000041b61a\n'
p4066
tp4067
sS'entry_comparator'
p4068
(S'\n__stdcall entry_comparator(void * av, void * bv)\n'
p4069
V\u000a_Bool entry_comparator(void *av,void *bv)\u000a\u000a{\u000a  if (*(long *)((long)av + 8) == *(long *)((long)bv + 8)) {\u000a    return (_Bool)(*(long *)av == *(long *)bv);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p4070
S'MOV RAX,qword ptr [RDI + 0x8]\nCMP RAX,qword ptr [RSI + 0x8]\nJNZ 0x00408af4\nMOV RAX,qword ptr [RDI]\nCMP RAX,qword ptr [RSI]\nSETZ AL\nRET\nXOR EAX,EAX\nRET\n'
p4071
S'48 8b 47 08\n48 3b 46 08\n75 0a\n48 8b 07\n48 3b 06\n0f 94 c0\nc3\n31 c0\nc3\n'
p4072
S'.text:0000000000408ae0\n.text:0000000000408ae4\n.text:0000000000408ae8\n.text:0000000000408aea\n.text:0000000000408aed\n.text:0000000000408af0\n.text:0000000000408af3\n.text:0000000000408af4\n.text:0000000000408af6\n'
p4073
tp4074
sS'fgetfilecon'
p4075
(S'\n__stdcall fgetfilecon(security_context_t * con)\n'
p4076
V\u000aint fgetfilecon(security_context_t *con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p4077
S'PUSH RAX\nCALL 0x00402770\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p4078
S'50\ne8 6a bc fe ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p4079
S'.text:0000000000416b00\n.text:0000000000416b01\n.text:0000000000416b06\n.text:0000000000416b0c\n.text:0000000000416b11\n.text:0000000000416b12\n'
p4080
tp4081
sS'sharefile_fopen'
p4082
(S'\n__stdcall sharefile_fopen(sharefile_handle h, char * filename)\n'
p4083
V\u000aFILE * sharefile_fopen(sharefile_handle h,char *filename)\u000a\u000a{\u000a  int __fd;\u000a  __dev_t *__ptr;\u000a  __dev_t _Var1;\u000a  FILE *pFVar2;\u000a  void *pvVar3;\u000a  int *piVar4;\u000a  stat st;\u000a  stat local_b0;\u000a  \u000a  __ptr = (__dev_t *)malloc(0x20);\u000a  if (__ptr != (__dev_t *)0x0) {\u000a    _Var1 = __strdup(filename);\u000a    __ptr[2] = _Var1;\u000a    if (_Var1 != 0) {\u000a      pFVar2 = fopen_safer(filename,*(char **)h);\u000a      *(FILE **)(__ptr + 3) = pFVar2;\u000a      if (pFVar2 != (FILE *)0x0) {\u000a        __fd = fileno((FILE *)__ptr[3]);\u000a        if (__fd < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a          __assert_fail("fd >= 0","sharefile.c",0xa6,\u000a                        "FILE *sharefile_fopen(sharefile_handle, const char *)");\u000a        }\u000a        set_cloexec_flag();\u000a        __fd = fstat(__fd,&local_b0);\u000a        if (__fd < 0) {\u000a          entry_free(__ptr);\u000a          return (FILE *)0x0;\u000a        }\u000a        *__ptr = local_b0.st_dev;\u000a        __ptr[1] = local_b0.st_ino;\u000a        pvVar3 = hash_lookup(*(Hash_table **)((long)h + 8),__ptr);\u000a        if (pvVar3 != (void *)0x0) {\u000a          entry_free(__ptr);\u000a          return *(FILE **)((long)pvVar3 + 0x18);\u000a        }\u000a        pvVar3 = hash_insert(*(Hash_table **)((long)h + 8),__ptr);\u000a        if (pvVar3 == (void *)0x0) {\u000a          piVar4 = __errno_location();\u000a          __fd = *piVar4;\u000a          entry_free(__ptr);\u000a          *piVar4 = __fd;\u000a          return (FILE *)0x0;\u000a        }\u000a        return (FILE *)__ptr[3];\u000a      }\u000a    }\u000a    free(__ptr);\u000a  }\u000a  return (FILE *)0x0;\u000a}\u000a\u000a
p4084
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x98\nMOV RBX,RSI\nMOV R14,RDI\nMOV EDI,0x20\nCALL 0x00402c60\nMOV R15,RAX\nTEST R15,R15\nJZ 0x00408c18\nMOV RDI,RBX\nCALL 0x00402b00\nMOV qword ptr [R15 + 0x10],RAX\nTEST RAX,RAX\nJZ 0x00408c10\nMOV RSI,qword ptr [R14]\nMOV RDI,RBX\nCALL 0x00410340\nMOV qword ptr [R15 + 0x18],RAX\nTEST RAX,RAX\nJZ 0x00408c10\nMOV RDI,qword ptr [R15 + 0x18]\nCALL 0x00402c10\nMOV EBX,EAX\nTEST EBX,EBX\nJS 0x00408c5f\nMOV ESI,0x1\nMOV EDI,EBX\nCALL 0x0040fdd0\nLEA RSI,[RSP + 0x8]\nMOV EDI,EBX\nCALL 0x0041c4a0\nTEST EAX,EAX\nJS 0x00408c28\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [R15],RAX\nMOV RAX,qword ptr [RSP + 0x10]\nMOV qword ptr [R15 + 0x8],RAX\nMOV RDI,qword ptr [R14 + 0x8]\nMOV RSI,R15\nCALL 0x00410580\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00408c32\nMOV RDI,R15\nCALL 0x00408b00\nMOV RAX,qword ptr [RBX + 0x18]\nJMP 0x00408c1a\nMOV RDI,R15\nCALL 0x00402710\nXOR EAX,EAX\nADD RSP,0x98\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RDI,R15\nCALL 0x00408b00\nJMP 0x00408c18\nMOV RDI,qword ptr [R14 + 0x8]\nMOV RSI,R15\nCALL 0x004110c0\nTEST RAX,RAX\nJZ 0x00408c49\nMOV RAX,qword ptr [R15 + 0x18]\nJMP 0x00408c1a\nCALL 0x00402770\nMOV RBX,RAX\nMOV EBP,dword ptr [RBX]\nMOV RDI,R15\nCALL 0x00408b00\nMOV dword ptr [RBX],EBP\nJMP 0x00408c18\nMOV EDI,0x41c736\nMOV ESI,0x41ecf9\nMOV EDX,0xa6\nMOV ECX,0x41ed05\nCALL 0x00402a40\n'
p4085
S'55\n41 57\n41 56\n53\n48 81 ec 98 00 00 00\n48 89 f3\n49 89 fe\nbf 20 00 00 00\ne8 e3 a0 ff ff\n49 89 c7\n4d 85 ff\n0f 84 8f 00 00 00\n48 89 df\ne8 6f 9f ff ff\n49 89 47 10\n48 85 c0\n74 76\n49 8b 36\n48 89 df\ne8 9b 77 00 00\n49 89 47 18\n48 85 c0\n74 62\n49 8b 7f 18\ne8 59 a0 ff ff\n89 c3\n85 db\n0f 88 9e 00 00 00\nbe 01 00 00 00\n89 df\ne8 03 72 00 00\n48 8d 74 24 08\n89 df\ne8 c7 38 01 00\n85 c0\n78 4b\n48 8b 44 24 08\n49 89 07\n48 8b 44 24 10\n49 89 47 08\n49 8b 7e 08\n4c 89 fe\ne8 86 79 00 00\n48 89 c3\n48 85 db\n74 30\n4c 89 ff\ne8 f6 fe ff ff\n48 8b 43 18\neb 0a\n4c 89 ff\ne8 f8 9a ff ff\n31 c0\n48 81 c4 98 00 00 00\n5b\n41 5e\n41 5f\n5d\nc3\n4c 89 ff\ne8 d0 fe ff ff\neb e6\n49 8b 7e 08\n4c 89 fe\ne8 82 84 00 00\n48 85 c0\n74 06\n49 8b 47 18\neb d1\ne8 22 9b ff ff\n48 89 c3\n8b 2b\n4c 89 ff\ne8 a5 fe ff ff\n89 2b\neb b9\nbf 36 c7 41 00\nbe f9 ec 41 00\nba a6 00 00 00\nb9 05 ed 41 00\ne8 c8 9d ff ff\n'
p4086
S'.text:0000000000408b60\n.text:0000000000408b61\n.text:0000000000408b63\n.text:0000000000408b65\n.text:0000000000408b66\n.text:0000000000408b6d\n.text:0000000000408b70\n.text:0000000000408b73\n.text:0000000000408b78\n.text:0000000000408b7d\n.text:0000000000408b80\n.text:0000000000408b83\n.text:0000000000408b89\n.text:0000000000408b8c\n.text:0000000000408b91\n.text:0000000000408b95\n.text:0000000000408b98\n.text:0000000000408b9a\n.text:0000000000408b9d\n.text:0000000000408ba0\n.text:0000000000408ba5\n.text:0000000000408ba9\n.text:0000000000408bac\n.text:0000000000408bae\n.text:0000000000408bb2\n.text:0000000000408bb7\n.text:0000000000408bb9\n.text:0000000000408bbb\n.text:0000000000408bc1\n.text:0000000000408bc6\n.text:0000000000408bc8\n.text:0000000000408bcd\n.text:0000000000408bd2\n.text:0000000000408bd4\n.text:0000000000408bd9\n.text:0000000000408bdb\n.text:0000000000408bdd\n.text:0000000000408be2\n.text:0000000000408be5\n.text:0000000000408bea\n.text:0000000000408bee\n.text:0000000000408bf2\n.text:0000000000408bf5\n.text:0000000000408bfa\n.text:0000000000408bfd\n.text:0000000000408c00\n.text:0000000000408c02\n.text:0000000000408c05\n.text:0000000000408c0a\n.text:0000000000408c0e\n.text:0000000000408c10\n.text:0000000000408c13\n.text:0000000000408c18\n.text:0000000000408c1a\n.text:0000000000408c21\n.text:0000000000408c22\n.text:0000000000408c24\n.text:0000000000408c26\n.text:0000000000408c27\n.text:0000000000408c28\n.text:0000000000408c2b\n.text:0000000000408c30\n.text:0000000000408c32\n.text:0000000000408c36\n.text:0000000000408c39\n.text:0000000000408c3e\n.text:0000000000408c41\n.text:0000000000408c43\n.text:0000000000408c47\n.text:0000000000408c49\n.text:0000000000408c4e\n.text:0000000000408c51\n.text:0000000000408c53\n.text:0000000000408c56\n.text:0000000000408c5b\n.text:0000000000408c5d\n.text:0000000000408c5f\n.text:0000000000408c64\n.text:0000000000408c69\n.text:0000000000408c6e\n.text:0000000000408c73\n'
p4087
tp4088
sS'openat_save_fail'
p4089
(S'\n__stdcall openat_save_fail()\n'
p4090
V\u000avoid openat_save_fail(uint uParm1)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"unable to record current working directory",5);\u000a  error((ulong)(uint)iVar1,(ulong)uParm1,uVar2,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p4091
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBX,EDI\nMOV EBP,dword ptr [0x0062dda0]\nXOR EDI,EDI\nMOV ESI,0x423140\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nXOR EAX,EAX\nMOV EDI,EBP\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00402d90\nCALL 0x00402750\n'
p4092
S'55\n53\n50\n89 fb\n8b 2d 85 ab 21 00\n31 ff\nbe 40 31 42 00\nba 05 00 00 00\ne8 e4 f6 fe ff\n48 89 c1\n31 c0\n89 ef\n89 de\n48 89 ca\ne8 53 fb fe ff\ne8 0e f5 fe ff\n'
p4093
S'.text:0000000000413210\n.text:0000000000413211\n.text:0000000000413212\n.text:0000000000413213\n.text:0000000000413215\n.text:000000000041321b\n.text:000000000041321d\n.text:0000000000413222\n.text:0000000000413227\n.text:000000000041322c\n.text:000000000041322f\n.text:0000000000413231\n.text:0000000000413233\n.text:0000000000413235\n.text:0000000000413238\n.text:000000000041323d\n'
p4094
tp4095
sS'parse_print'
p4096
(S'\n__stdcall parse_print(parser_table * entry, char * * argv, int * arg_ptr)\n'
p4097
V\u000a_Bool parse_print(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  predicate *ppVar1;\u000a  \u000a  ppVar1 = insert_primary_noarg(entry);\u000a  *(undefined4 *)&ppVar1->side_effects = 0x101;\u000a  open_stdout((format_val *)ppVar1->args);\u000a  return true;\u000a}\u000a\u000a
p4098
S'PUSH RAX\nCALL 0x00407760\nMOV dword ptr [RAX + 0x18],0x101\nLEA RDI,[RAX + 0x38]\nCALL 0x0040a980\nMOV AL,0x1\nPOP RCX\nRET\n'
p4099
S'50\ne8 fa cd ff ff\nc7 40 18 01 01 00 00\n48 8d 78 38\ne8 0a 00 00 00\nb0 01\n59\nc3\n'
p4100
S'.text:000000000040a960\n.text:000000000040a961\n.text:000000000040a966\n.text:000000000040a96d\n.text:000000000040a971\n.text:000000000040a976\n.text:000000000040a978\n.text:000000000040a979\n'
p4101
tp4102
sS'getfscreatecon'
p4103
(S'\n__stdcall getfscreatecon(security_context_t * con)\n'
p4104
V\u000aint getfscreatecon(security_context_t *con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p4105
S'PUSH RAX\nCALL 0x00402770\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p4106
S'50\ne8 0a bd fe ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p4107
S'.text:0000000000416a60\n.text:0000000000416a61\n.text:0000000000416a66\n.text:0000000000416a6c\n.text:0000000000416a71\n.text:0000000000416a72\n'
p4108
tp4109
sS'check_path_safety'
p4110
(S'\n__stdcall check_path_safety(char * action)\n'
p4111
V\u000avoid check_path_safety(char *action)\u000a\u000a{\u000a  _Bool _Var1;\u000a  char *s;\u000a  void *__ptr;\u000a  char *pcVar2;\u000a  undefined8 uVar3;\u000a  size_t local_40;\u000a  long local_38;\u000a  \u000a  s = getenv(\u000a             "The relative path %s is included in the PATH environment variable, which is insecure in combination with the %s action of find.  Please remove that entry from $PATH"\u000a             + 0xa0);\u000a  if (s != (char *)0x0) {\u000a    splitstring(s,":",(size_t *)0x1,&local_40);\u000a    do {\u000a      if ((local_38 == 0) || ((local_38 == 1 && (s[local_40] == '.')))) {\u000a        uVar3 = dcgettext(0,\u000a                          "The current directory is included in the PATH environment variable, which is insecure in combination with the %s action of find.  Please remove the current directory from your $PATH (that is, remove \u005c".\u005c", doubled colons, or leading or trailing colons)"\u000a                          ,5);\u000a        error(1,0,uVar3,action);\u000a      }\u000a      else {\u000a        if (s[local_40] != '/') {\u000a          __ptr = (void *)__strndup();\u000a          uVar3 = dcgettext(0,\u000a                            "The relative path %s is included in the PATH environment variable, which is insecure in combination with the %s action of find.  Please remove that entry from $PATH"\u000a                            ,5);\u000a          pcVar2 = safely_quote_err_filename((char *)0x0);\u000a          error(1,0,uVar3,pcVar2,action);\u000a          free(__ptr);\u000a        }\u000a      }\u000a      _Var1 = splitstring(s,":",(size_t *)0x0,&local_40);\u000a    } while (_Var1 != false);\u000a  }\u000a  return;\u000a}\u000a\u000a
p4112
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R14,RDI\nMOV EDI,0x421505\nCALL 0x00402700\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040d07e\nLEA R15,[RSP + 0x8]\nLEA R12,[RSP + 0x10]\nMOV ESI,0x425423\nMOV EDX,0x1\nMOV RDI,RBX\nMOV RCX,R15\nMOV R8,R12\nCALL 0x0040fb70\nJMP 0x0040d020\nCMP AL,0x2f\nJZ 0x0040d065\nADD RDI,RBX\nCALL 0x00402b90\nMOV R13,RAX\nXOR EDI,EDI\nMOV ESI,0x421465\nMOV EDX,0x5\nCALL 0x00402910\nMOV RBP,RAX\nMOV RSI,qword ptr [RSP + 0x8]\nADD RSI,RBX\nTEST R13,R13\nCMOVNZ RSI,R13\nXOR EDI,EDI\nCALL 0x00408920\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nMOV R8,R14\nCALL 0x00402d90\nMOV RDI,R13\nCALL 0x00402710\nJMP 0x0040d065\nMOV RSI,qword ptr [RSP + 0x10]\nTEST RSI,RSI\nJZ 0x0040d03d\nMOV RDI,qword ptr [RSP + 0x8]\nMOVZX EAX,byte ptr [RBX + RDI*0x1]\nCMP RSI,0x1\nJNZ 0x0040cfc0\nCMP AL,0x2e\nJNZ 0x0040cfc0\nXOR EDI,EDI\nMOV ESI,0x42136a\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,R14\nCALL 0x00402d90\nMOV ESI,0x425423\nXOR EDX,EDX\nMOV RDI,RBX\nMOV RCX,R15\nMOV R8,R12\nCALL 0x0040fb70\nTEST AL,AL\nJNZ 0x0040d020\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p4113
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 fe\nbf 05 15 42 00\ne8 75 57 ff ff\n48 89 c3\n48 85 db\n0f 84 e7 00 00 00\n4c 8d 7c 24 08\n4c 8d 64 24 10\nbe 23 54 42 00\nba 01 00 00 00\n48 89 df\n4c 89 f9\n4d 89 e0\ne8 b7 2b 00 00\neb 65\n3c 2f\n0f 84 9d 00 00 00\n48 01 df\ne8 c0 5b ff ff\n49 89 c5\n31 ff\nbe 65 14 42 00\nba 05 00 00 00\ne8 2c 59 ff ff\n48 89 c5\n48 8b 74 24 08\n48 01 de\n4d 85 ed\n49 0f 45 f5\n31 ff\ne8 23 b9 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ea\n4d 89 f0\ne8 7c 5d ff ff\n4c 89 ef\ne8 f4 56 ff ff\neb 47\n48 8b 74 24 10\n48 85 f6\n74 13\n48 8b 7c 24 08\n0f b6 04 3b\n48 83 fe 01\n75 87\n3c 2e\n75 83\n31 ff\nbe 6a 13 42 00\nba 05 00 00 00\ne8 c2 58 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\n4c 89 f1\ne8 2b 5d ff ff\nbe 23 54 42 00\n31 d2\n48 89 df\n4c 89 f9\n4d 89 e0\ne8 f6 2a 00 00\n84 c0\n75 a2\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p4114
S'.text:000000000040cf70\n.text:000000000040cf71\n.text:000000000040cf73\n.text:000000000040cf75\n.text:000000000040cf77\n.text:000000000040cf79\n.text:000000000040cf7a\n.text:000000000040cf7e\n.text:000000000040cf81\n.text:000000000040cf86\n.text:000000000040cf8b\n.text:000000000040cf8e\n.text:000000000040cf91\n.text:000000000040cf97\n.text:000000000040cf9c\n.text:000000000040cfa1\n.text:000000000040cfa6\n.text:000000000040cfab\n.text:000000000040cfae\n.text:000000000040cfb1\n.text:000000000040cfb4\n.text:000000000040cfb9\n.text:000000000040cfc0\n.text:000000000040cfc2\n.text:000000000040cfc8\n.text:000000000040cfcb\n.text:000000000040cfd0\n.text:000000000040cfd3\n.text:000000000040cfd5\n.text:000000000040cfda\n.text:000000000040cfdf\n.text:000000000040cfe4\n.text:000000000040cfe7\n.text:000000000040cfec\n.text:000000000040cfef\n.text:000000000040cff2\n.text:000000000040cff6\n.text:000000000040cff8\n.text:000000000040cffd\n.text:000000000040d000\n.text:000000000040d005\n.text:000000000040d007\n.text:000000000040d009\n.text:000000000040d00c\n.text:000000000040d00f\n.text:000000000040d014\n.text:000000000040d017\n.text:000000000040d01c\n.text:000000000040d020\n.text:000000000040d025\n.text:000000000040d028\n.text:000000000040d02a\n.text:000000000040d02f\n.text:000000000040d033\n.text:000000000040d037\n.text:000000000040d039\n.text:000000000040d03b\n.text:000000000040d03d\n.text:000000000040d03f\n.text:000000000040d044\n.text:000000000040d049\n.text:000000000040d04e\n.text:000000000040d051\n.text:000000000040d056\n.text:000000000040d058\n.text:000000000040d05a\n.text:000000000040d05d\n.text:000000000040d060\n.text:000000000040d065\n.text:000000000040d06a\n.text:000000000040d06c\n.text:000000000040d06f\n.text:000000000040d072\n.text:000000000040d075\n.text:000000000040d07a\n.text:000000000040d07c\n.text:000000000040d07e\n.text:000000000040d082\n.text:000000000040d083\n.text:000000000040d085\n.text:000000000040d087\n.text:000000000040d089\n.text:000000000040d08b\n.text:000000000040d08c\n'
p4115
tp4116
sS'mmalloca'
p4117
(S'\n__stdcall mmalloca(size_t n)\n'
p4118
V\u000avoid * mmalloca(size_t n)\u000a\u000a{\u000a  void **ppvVar1;\u000a  long lVar2;\u000a  void **ppvVar3;\u000a  \u000a  if (0xffffffffffffffef < n) {\u000a    return (void *)0x0;\u000a  }\u000a  ppvVar3 = (void **)malloc(n + 0x10);\u000a  if (ppvVar3 != (void **)0x0) {\u000a    ppvVar1 = ppvVar3 + 2;\u000a    *(undefined4 *)((long)ppvVar3 + 0xc) = 0x1415fb4a;\u000a    lVar2 = (long)ppvVar3 + ((ulong)ppvVar1 / 0x101) * -0x101 + 0x10;\u000a    *ppvVar3 = mmalloca_results[lVar2];\u000a    *(void ***)(mmalloca_results + lVar2) = ppvVar1;\u000a    return ppvVar1;\u000a  }\u000a  return (void *)0x0;\u000a}\u000a\u000a
p4119
S'CMP RDI,-0x11\nJA 0x0041c065\nPUSH RAX\nADD RDI,0x10\nCALL 0x00402c60\nMOV RSI,RAX\nTEST RSI,RSI\nLEA RSP,[RSP + 0x8]\nJZ 0x0041c06b\nLEA RCX,[RSI + 0x10]\nMOV dword ptr [RSI + 0xc],0x1415fb4a\nMOV RDX,-0xff00ff00ff00ff\nMOV RAX,RCX\nMUL RDX\nSHR RDX,0x8\nMOV RAX,RDX\nSHL RAX,0x8\nADD RAX,RDX\nNEG RAX\nLEA RAX,[RSI + RAX*0x1 + 0x10]\nMOV RDX,qword ptr [0x62e7f0 + RAX*0x8]\nMOV qword ptr [RSI],RDX\nMOV qword ptr [0x62e7f0 + RAX*0x8],RCX\nMOV RAX,RCX\nRET\nXOR ECX,ECX\nMOV RAX,RCX\nRET\nXOR ECX,ECX\nMOV RAX,RCX\nRET\n'
p4120
S'48 83 ff ef\n77 5f\n50\n48 83 c7 10\ne8 50 6c fe ff\n48 89 c6\n48 85 f6\n48 8d 64 24 08\n74 4e\n48 8d 4e 10\nc7 46 0c 4a fb 15 14\n48 ba 01 ff 00 ff 00 ff 00 ff\n48 89 c8\n48 f7 e2\n48 c1 ea 08\n48 89 d0\n48 c1 e0 08\n48 01 d0\n48 f7 d8\n48 8d 44 06 10\n48 8b 14 c5 f0 e7 62 00\n48 89 16\n48 89 0c c5 f0 e7 62 00\n48 89 c8\nc3\n31 c9\n48 89 c8\nc3\n31 c9\n48 89 c8\nc3\n'
p4121
S'.text:000000000041c000\n.text:000000000041c004\n.text:000000000041c006\n.text:000000000041c007\n.text:000000000041c00b\n.text:000000000041c010\n.text:000000000041c013\n.text:000000000041c016\n.text:000000000041c01b\n.text:000000000041c01d\n.text:000000000041c021\n.text:000000000041c028\n.text:000000000041c032\n.text:000000000041c035\n.text:000000000041c038\n.text:000000000041c03c\n.text:000000000041c03f\n.text:000000000041c043\n.text:000000000041c046\n.text:000000000041c049\n.text:000000000041c04e\n.text:000000000041c056\n.text:000000000041c059\n.text:000000000041c061\n.text:000000000041c064\n.text:000000000041c065\n.text:000000000041c067\n.text:000000000041c06a\n.text:000000000041c06b\n.text:000000000041c06d\n.text:000000000041c070\n'
p4122
tp4123
sS'to_hour'
p4124
(S'\n__stdcall to_hour(long hours)\n'
p4125
V\u000aint to_hour(long hours)\u000a\u000a{\u000a  int iVar1;\u000a  int in_ESI;\u000a  int iVar2;\u000a  \u000a  iVar2 = (int)hours;\u000a  if (in_ESI == 0) {\u000a    iVar1 = -1;\u000a    if (hours == 0xc) {\u000a      iVar1 = 0;\u000a    }\u000a    if (hours - 1U < 0xb) {\u000a      iVar1 = iVar2;\u000a    }\u000a    return iVar1;\u000a  }\u000a  if (in_ESI == 1) {\u000a    iVar1 = -1;\u000a    if (hours == 0xc) {\u000a      iVar1 = iVar2;\u000a    }\u000a    if (hours - 1U < 0xb) {\u000a      iVar1 = iVar2 + 0xc;\u000a    }\u000a    return iVar1;\u000a  }\u000a  iVar1 = -1;\u000a  if ((ulong)hours < 0x18) {\u000a    iVar1 = iVar2;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p4126
S'TEST ESI,ESI\nJZ 0x00414d19\nCMP ESI,0x1\nJNZ 0x00414d37\nLEA RCX,[RDI + -0x1]\nLEA RDX,[RDI + 0xc]\nCMP RDI,0xc\nMOV RAX,-0x1\nCMOVZ RAX,RDI\nCMP RCX,0xb\nCMOVC RAX,RDX\nRET\nLEA RCX,[RDI + -0x1]\nXOR EDX,EDX\nCMP RDI,0xc\nMOV RAX,-0x1\nCMOVZ RAX,RDX\nCMP RCX,0xb\nCMOVC RAX,RDI\nRET\nCMP RDI,0x18\nMOV RAX,-0x1\nCMOVC RAX,RDI\nRET\n'
p4127
S'85 f6\n74 25\n83 fe 01\n75 3e\n48 8d 4f ff\n48 8d 57 0c\n48 83 ff 0c\n48 c7 c0 ff ff ff ff\n48 0f 44 c7\n48 83 f9 0b\n48 0f 42 c2\nc3\n48 8d 4f ff\n31 d2\n48 83 ff 0c\n48 c7 c0 ff ff ff ff\n48 0f 44 c2\n48 83 f9 0b\n48 0f 42 c7\nc3\n48 83 ff 18\n48 c7 c0 ff ff ff ff\n48 0f 42 c7\nc3\n'
p4128
S'.text:0000000000414cf0\n.text:0000000000414cf2\n.text:0000000000414cf4\n.text:0000000000414cf7\n.text:0000000000414cf9\n.text:0000000000414cfd\n.text:0000000000414d01\n.text:0000000000414d05\n.text:0000000000414d0c\n.text:0000000000414d10\n.text:0000000000414d14\n.text:0000000000414d18\n.text:0000000000414d19\n.text:0000000000414d1d\n.text:0000000000414d1f\n.text:0000000000414d23\n.text:0000000000414d2a\n.text:0000000000414d2e\n.text:0000000000414d32\n.text:0000000000414d36\n.text:0000000000414d37\n.text:0000000000414d3b\n.text:0000000000414d42\n.text:0000000000414d46\n'
p4129
tp4130
sS'error_severity'
p4131
(S'\n__stdcall error_severity()\n'
p4132
V\u000avoid error_severity(int iParm1)\u000a\u000a{\u000a  if (state.exit_status < iParm1) {\u000a    state.exit_status = iParm1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p4133
S'CMP dword ptr [0x0062f024],EDI\nJGE 0x00407aae\nMOV dword ptr [0x0062f024],EDI\nRET\n'
p4134
S'39 3d 7e 75 22 00\n7d 06\n89 3d 76 75 22 00\nc3\n'
p4135
S'.text:0000000000407aa0\n.text:0000000000407aa6\n.text:0000000000407aa8\n.text:0000000000407aae\n'
p4136
tp4137
sS'parse_uid'
p4138
(S'\n__stdcall parse_uid(parser_table * entry, char * * argv, int * arg_ptr)\n'
p4139
V\u000a_Bool parse_uid(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  predicate *ppVar1;\u000a  \u000a  ppVar1 = insert_num(argv,arg_ptr,entry);\u000a  if (ppVar1 == (predicate *)0x0) {\u000a    *arg_ptr = *arg_ptr + -1;\u000a  }\u000a  else {\u000a    ppVar1->est_success_rate =\u000a         *(float *)(&DAT_0041fbc8 + (ulong)(-(uint)(*(ulong *)(ppVar1->args + 8) < 100) & 4));\u000a  }\u000a  return (_Bool)(ppVar1 != (predicate *)0x0);\u000a}\u000a\u000a
p4140
S'PUSH RBX\nMOV RBX,RDX\nMOV RAX,RDI\nMOV RDI,RSI\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x0040d2f0\nTEST RAX,RAX\nJZ 0x0040c406\nCMP qword ptr [RAX + 0x40],0x64\nSBB RCX,RCX\nAND ECX,0x4\nMOVSS XMM0,dword ptr [0x41fbc8 + RCX]\nMOVSS dword ptr [RAX + 0x24],XMM0\nMOV AL,0x1\nJMP 0x0040c40a\nDEC dword ptr [RBX]\nXOR EAX,EAX\nPOP RBX\nRET\n'
p4141
S'53\n48 89 d3\n48 89 f8\n48 89 f7\n48 89 de\n48 89 c2\ne8 0b 0f 00 00\n48 85 c0\n74 1c\n48 83 78 40 64\n48 19 c9\n83 e1 04\nf3 0f 10 81 c8 fb 41 00\nf3 0f 11 40 24\nb0 01\neb 04\nff 0b\n31 c0\n5b\nc3\n'
p4142
S'.text:000000000040c3d0\n.text:000000000040c3d1\n.text:000000000040c3d4\n.text:000000000040c3d7\n.text:000000000040c3da\n.text:000000000040c3dd\n.text:000000000040c3e0\n.text:000000000040c3e5\n.text:000000000040c3e8\n.text:000000000040c3ea\n.text:000000000040c3ef\n.text:000000000040c3f2\n.text:000000000040c3f5\n.text:000000000040c3fd\n.text:000000000040c402\n.text:000000000040c404\n.text:000000000040c406\n.text:000000000040c408\n.text:000000000040c40a\n.text:000000000040c40b\n'
p4143
tp4144
sS'calculate_derived_rates'
p4145
(S'\n__stdcall calculate_derived_rates(predicate * p)\n'
p4146
V\u000afloat calculate_derived_rates(predicate *p)\u000a\u000a{\u000a  _Bool (*pVar1)(char *,stat *,predicate *);\u000a  float rate;\u000a  float fVar2;\u000a  \u000a  if (p == (predicate *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("NULL != p","tree.c",0x47d,"float calculate_derived_rates(struct predicate *)");\u000a  }\u000a  if (p->pred_right != (predicate *)0x0) {\u000a    calculate_derived_rates(p->pred_right);\u000a  }\u000a  if (p->pred_left != (predicate *)0x0) {\u000a    calculate_derived_rates(p->pred_left);\u000a  }\u000a  switch(p->p_type) {\u000a  case NO_TYPE:\u000a    if (p->pred_right != (predicate *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("NULL == p->pred_right","tree.c",0x48a,\u000a                    "float calculate_derived_rates(struct predicate *)");\u000a    }\u000a    if (p->pred_left == (predicate *)0x0) {\u000a      return p->est_success_rate;\u000a    }\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("NULL == p->pred_left","tree.c",0x48b,\u000a                  "float calculate_derived_rates(struct predicate *)");\u000a  case PRIMARY_TYPE:\u000a    if (p->pred_right != (predicate *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("NULL == p->pred_right","tree.c",0x48f,\u000a                    "float calculate_derived_rates(struct predicate *)");\u000a    }\u000a    if (p->pred_left == (predicate *)0x0) {\u000a      return p->est_success_rate;\u000a    }\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("NULL == p->pred_left","tree.c",0x490,\u000a                  "float calculate_derived_rates(struct predicate *)");\u000a  case UNI_OP:\u000a    if (p->pred_func != pred_negate) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("pred_is (p, pred_negate)","tree.c",0x495,\u000a                    "float calculate_derived_rates(struct predicate *)");\u000a    }\u000a    if (p->pred_left != (predicate *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("NULL == p->pred_left","tree.c",0x496,\u000a                    "float calculate_derived_rates(struct predicate *)");\u000a    }\u000a    rate = DAT_0041d344 - p->pred_right->est_success_rate;\u000a    break;\u000a  case BI_OP:\u000a    pVar1 = p->pred_func;\u000a    if (pVar1 == pred_and) {\u000a      rate = getrate(p->pred_right);\u000a      fVar2 = getrate(p->pred_left);\u000a      rate = fVar2 * rate;\u000a    }\u000a    else {\u000a      rate = DAT_0041d344;\u000a      if (pVar1 != pred_comma) {\u000a        if (pVar1 != pred_or) {\u000a                    /* WARNING: Subroutine does not return */\u000a          __assert_fail("0","tree.c",0x4ad,"float calculate_derived_rates(struct predicate *)");\u000a        }\u000a        rate = getrate(p->pred_right);\u000a        fVar2 = getrate(p->pred_left);\u000a        rate = fVar2 + rate;\u000a      }\u000a    }\u000a    rate = constrain_rate(rate);\u000a    break;\u000a  case OPEN_PAREN:\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("p->p_type != OPEN_PAREN","tree.c",0x485,\u000a                  "float calculate_derived_rates(struct predicate *)");\u000a  case CLOSE_PAREN:\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("p->p_type != CLOSE_PAREN","tree.c",0x484,\u000a                  "float calculate_derived_rates(struct predicate *)");\u000a  default:\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0","tree.c",0x4b9,"float calculate_derived_rates(struct predicate *)");\u000a  }\u000a  p->est_success_rate = rate;\u000a  return rate;\u000a}\u000a\u000a
p4147
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00405a0e\nMOV RDI,qword ptr [0x118 + RBX]\nTEST RDI,RDI\nJZ 0x004058e2\nCALL 0x004058c0\nMOV RDI,qword ptr [0x110 + RBX]\nTEST RDI,RDI\nJZ 0x004058f3\nCALL 0x004058c0\nMOV EAX,dword ptr [RBX + 0x10]\nCMP RAX,0x5\nJA 0x00405a27\nJMP qword ptr [0x41d350 + RAX*0x8]\nCMP qword ptr [0x118 + RBX],0x0\nJNZ 0x00405a72\nCMP qword ptr [0x110 + RBX],0x0\nJNZ 0x00405a8b\nMOVSS XMM0,dword ptr [RBX + 0x24]\nJMP 0x00405a08\nCMP qword ptr [0x118 + RBX],0x0\nJNZ 0x00405aa4\nCMP qword ptr [0x110 + RBX],0x0\nJNZ 0x00405abd\nMOVSS XMM0,dword ptr [RBX + 0x24]\nJMP 0x00405a08\nMOV EAX,0x4042b0\nCMP qword ptr [RBX],RAX\nJNZ 0x00405ad6\nCMP qword ptr [0x110 + RBX],0x0\nJNZ 0x00405aef\nMOV RAX,qword ptr [0x118 + RBX]\nMOVSS XMM0,dword ptr [0x0041d344]\nSUBSS XMM0,dword ptr [RAX + 0x24]\nJMP 0x00405a03\nMOV RAX,qword ptr [RBX]\nMOV ECX,0x403c90\nCMP RAX,RCX\nJZ 0x004059d0\nMOV ECX,0x403dd0\nCMP RAX,RCX\nJZ 0x004059f6\nMOV ECX,0x404500\nCMP RAX,RCX\nJNZ 0x00405b08\nMOV RDI,qword ptr [0x118 + RBX]\nCALL 0x00405b30\nMOVSS dword ptr [RSP + 0xc],XMM0\nMOV RDI,qword ptr [0x110 + RBX]\nCALL 0x00405b30\nADDSS XMM0,dword ptr [RSP + 0xc]\nJMP 0x004059fe\nMOV RDI,qword ptr [0x118 + RBX]\nCALL 0x00405b30\nMOVSS dword ptr [RSP + 0xc],XMM0\nMOV RDI,qword ptr [0x110 + RBX]\nCALL 0x00405b30\nMULSS XMM0,dword ptr [RSP + 0xc]\nJMP 0x004059fe\nMOVSS XMM0,dword ptr [0x0041d344]\nCALL 0x00405b50\nMOVSS dword ptr [RBX + 0x24],XMM0\nADD RSP,0x10\nPOP RBX\nRET\nMOV EDI,0x41d4c6\nMOV ESI,0x41d4d0\nMOV EDX,0x47d\nMOV ECX,0x41d4d7\nCALL 0x00402a40\nMOV EDI,0x41cdbe\nMOV ESI,0x41d4d0\nMOV EDX,0x4b9\nMOV ECX,0x41d4d7\nCALL 0x00402a40\nMOV EDI,0x41d522\nMOV ESI,0x41d4d0\nMOV EDX,0x485\nMOV ECX,0x41d4d7\nCALL 0x00402a40\nMOV EDI,0x41d509\nMOV ESI,0x41d4d0\nMOV EDX,0x484\nMOV ECX,0x41d4d7\nCALL 0x00402a40\nMOV EDI,0x41d53a\nMOV ESI,0x41d4d0\nMOV EDX,0x48a\nMOV ECX,0x41d4d7\nCALL 0x00402a40\nMOV EDI,0x41d550\nMOV ESI,0x41d4d0\nMOV EDX,0x48b\nMOV ECX,0x41d4d7\nCALL 0x00402a40\nMOV EDI,0x41d53a\nMOV ESI,0x41d4d0\nMOV EDX,0x48f\nMOV ECX,0x41d4d7\nCALL 0x00402a40\nMOV EDI,0x41d550\nMOV ESI,0x41d4d0\nMOV EDX,0x490\nMOV ECX,0x41d4d7\nCALL 0x00402a40\nMOV EDI,0x41d565\nMOV ESI,0x41d4d0\nMOV EDX,0x495\nMOV ECX,0x41d4d7\nCALL 0x00402a40\nMOV EDI,0x41d550\nMOV ESI,0x41d4d0\nMOV EDX,0x496\nMOV ECX,0x41d4d7\nCALL 0x00402a40\nMOV EDI,0x41cdbe\nMOV ESI,0x41d4d0\nMOV EDX,0x4ad\nMOV ECX,0x41d4d7\nCALL 0x00402a40\n'
p4148
S'53\n48 83 ec 10\n48 89 fb\n48 85 db\n0f 84 3d 01 00 00\n48 8b bb 18 01 00 00\n48 85 ff\n74 05\ne8 de ff ff ff\n48 8b bb 10 01 00 00\n48 85 ff\n74 05\ne8 cd ff ff ff\n8b 43 10\n48 83 f8 05\n0f 87 27 01 00 00\nff 24 c5 50 d3 41 00\n48 83 bb 18 01 00 00 00\n0f 85 5d 01 00 00\n48 83 bb 10 01 00 00 00\n0f 85 68 01 00 00\nf3 0f 10 43 24\ne9 db 00 00 00\n48 83 bb 18 01 00 00 00\n0f 85 69 01 00 00\n48 83 bb 10 01 00 00 00\n0f 85 74 01 00 00\nf3 0f 10 43 24\ne9 b5 00 00 00\nb8 b0 42 40 00\n48 39 03\n0f 85 75 01 00 00\n48 83 bb 10 01 00 00 00\n0f 85 80 01 00 00\n48 8b 83 18 01 00 00\nf3 0f 10 05 c6 79 01 00\nf3 0f 5c 40 24\neb 7e\n48 8b 03\nb9 90 3c 40 00\n48 39 c8\n74 3e\nb9 d0 3d 40 00\n48 39 c8\n74 5a\nb9 00 45 40 00\n48 39 c8\n0f 85 5e 01 00 00\n48 8b bb 18 01 00 00\ne8 7a 01 00 00\nf3 0f 11 44 24 0c\n48 8b bb 10 01 00 00\ne8 68 01 00 00\nf3 0f 58 44 24 0c\neb 2e\n48 8b bb 18 01 00 00\ne8 54 01 00 00\nf3 0f 11 44 24 0c\n48 8b bb 10 01 00 00\ne8 42 01 00 00\nf3 0f 59 44 24 0c\neb 08\nf3 0f 10 05 46 79 01 00\ne8 4d 01 00 00\nf3 0f 11 43 24\n48 83 c4 10\n5b\nc3\nbf c6 d4 41 00\nbe d0 d4 41 00\nba 7d 04 00 00\nb9 d7 d4 41 00\ne8 19 d0 ff ff\nbf be cd 41 00\nbe d0 d4 41 00\nba b9 04 00 00\nb9 d7 d4 41 00\ne8 00 d0 ff ff\nbf 22 d5 41 00\nbe d0 d4 41 00\nba 85 04 00 00\nb9 d7 d4 41 00\ne8 e7 cf ff ff\nbf 09 d5 41 00\nbe d0 d4 41 00\nba 84 04 00 00\nb9 d7 d4 41 00\ne8 ce cf ff ff\nbf 3a d5 41 00\nbe d0 d4 41 00\nba 8a 04 00 00\nb9 d7 d4 41 00\ne8 b5 cf ff ff\nbf 50 d5 41 00\nbe d0 d4 41 00\nba 8b 04 00 00\nb9 d7 d4 41 00\ne8 9c cf ff ff\nbf 3a d5 41 00\nbe d0 d4 41 00\nba 8f 04 00 00\nb9 d7 d4 41 00\ne8 83 cf ff ff\nbf 50 d5 41 00\nbe d0 d4 41 00\nba 90 04 00 00\nb9 d7 d4 41 00\ne8 6a cf ff ff\nbf 65 d5 41 00\nbe d0 d4 41 00\nba 95 04 00 00\nb9 d7 d4 41 00\ne8 51 cf ff ff\nbf 50 d5 41 00\nbe d0 d4 41 00\nba 96 04 00 00\nb9 d7 d4 41 00\ne8 38 cf ff ff\nbf be cd 41 00\nbe d0 d4 41 00\nba ad 04 00 00\nb9 d7 d4 41 00\ne8 1f cf ff ff\n'
p4149
S'.text:00000000004058c0\n.text:00000000004058c1\n.text:00000000004058c5\n.text:00000000004058c8\n.text:00000000004058cb\n.text:00000000004058d1\n.text:00000000004058d8\n.text:00000000004058db\n.text:00000000004058dd\n.text:00000000004058e2\n.text:00000000004058e9\n.text:00000000004058ec\n.text:00000000004058ee\n.text:00000000004058f3\n.text:00000000004058f6\n.text:00000000004058fa\n.text:0000000000405900\n.text:0000000000405907\n.text:000000000040590f\n.text:0000000000405915\n.text:000000000040591d\n.text:0000000000405923\n.text:0000000000405928\n.text:000000000040592d\n.text:0000000000405935\n.text:000000000040593b\n.text:0000000000405943\n.text:0000000000405949\n.text:000000000040594e\n.text:0000000000405953\n.text:0000000000405958\n.text:000000000040595b\n.text:0000000000405961\n.text:0000000000405969\n.text:000000000040596f\n.text:0000000000405976\n.text:000000000040597e\n.text:0000000000405983\n.text:0000000000405985\n.text:0000000000405988\n.text:000000000040598d\n.text:0000000000405990\n.text:0000000000405992\n.text:0000000000405997\n.text:000000000040599a\n.text:000000000040599c\n.text:00000000004059a1\n.text:00000000004059a4\n.text:00000000004059aa\n.text:00000000004059b1\n.text:00000000004059b6\n.text:00000000004059bc\n.text:00000000004059c3\n.text:00000000004059c8\n.text:00000000004059ce\n.text:00000000004059d0\n.text:00000000004059d7\n.text:00000000004059dc\n.text:00000000004059e2\n.text:00000000004059e9\n.text:00000000004059ee\n.text:00000000004059f4\n.text:00000000004059f6\n.text:00000000004059fe\n.text:0000000000405a03\n.text:0000000000405a08\n.text:0000000000405a0c\n.text:0000000000405a0d\n.text:0000000000405a0e\n.text:0000000000405a13\n.text:0000000000405a18\n.text:0000000000405a1d\n.text:0000000000405a22\n.text:0000000000405a27\n.text:0000000000405a2c\n.text:0000000000405a31\n.text:0000000000405a36\n.text:0000000000405a3b\n.text:0000000000405a40\n.text:0000000000405a45\n.text:0000000000405a4a\n.text:0000000000405a4f\n.text:0000000000405a54\n.text:0000000000405a59\n.text:0000000000405a5e\n.text:0000000000405a63\n.text:0000000000405a68\n.text:0000000000405a6d\n.text:0000000000405a72\n.text:0000000000405a77\n.text:0000000000405a7c\n.text:0000000000405a81\n.text:0000000000405a86\n.text:0000000000405a8b\n.text:0000000000405a90\n.text:0000000000405a95\n.text:0000000000405a9a\n.text:0000000000405a9f\n.text:0000000000405aa4\n.text:0000000000405aa9\n.text:0000000000405aae\n.text:0000000000405ab3\n.text:0000000000405ab8\n.text:0000000000405abd\n.text:0000000000405ac2\n.text:0000000000405ac7\n.text:0000000000405acc\n.text:0000000000405ad1\n.text:0000000000405ad6\n.text:0000000000405adb\n.text:0000000000405ae0\n.text:0000000000405ae5\n.text:0000000000405aea\n.text:0000000000405aef\n.text:0000000000405af4\n.text:0000000000405af9\n.text:0000000000405afe\n.text:0000000000405b03\n.text:0000000000405b08\n.text:0000000000405b0d\n.text:0000000000405b12\n.text:0000000000405b17\n.text:0000000000405b1c\n'
p4150
tp4151
sS'insert_regex'
p4152
(S'\n__stdcall insert_regex(char * * argv, int * arg_ptr, parser_table * entry)\n'
p4153
V\u000a_Bool insert_regex(char **argv,int *arg_ptr,parser_table *entry)\u000a\u000a{\u000a  _Bool _Var1;\u000a  undefined uVar2;\u000a  predicate *ppVar3;\u000a  re_pattern_buffer *__buffer;\u000a  uchar *puVar4;\u000a  size_t __length;\u000a  char *__pattern;\u000a  undefined8 uVar5;\u000a  int in_ECX;\u000a  float fVar6;\u000a  char *local_20;\u000a  \u000a  _Var1 = collect_arg(argv,arg_ptr,&local_20);\u000a  if (_Var1 == false) {\u000a    uVar2 = 0;\u000a  }\u000a  else {\u000a    ppVar3 = insert_primary_withpred(entry,pred_regex,local_20);\u000a    *(undefined2 *)&ppVar3->need_stat = 0;\u000a    __buffer = (re_pattern_buffer *)xmalloc(0x40);\u000a    *(re_pattern_buffer **)ppVar3->args = __buffer;\u000a    __buffer->allocated = 100;\u000a    puVar4 = (uchar *)xmalloc(100);\u000a    __buffer->buffer = puVar4;\u000a    __buffer->fastmap = (char *)0x0;\u000a    re_set_syntax((long)in_ECX);\u000a    __pattern = local_20;\u000a    __buffer->syntax = (long)in_ECX;\u000a    __buffer->translate = (uchar *)0x0;\u000a    __length = strlen(local_20);\u000a    __pattern = re_compile_pattern(__pattern,__length,__buffer);\u000a    if (__pattern != (char *)0x0) {\u000a      uVar5 = dcgettext(0,"failed to compile regular expression \u005c'%s\u005c': %s",5);\u000a      error(1,0,uVar5,local_20,__pattern);\u000a    }\u000a    fVar6 = estimate_pattern_match_rate(local_20);\u000a    ppVar3->est_success_rate = fVar6;\u000a    uVar2 = 1;\u000a  }\u000a  return (_Bool)uVar2;\u000a}\u000a\u000a
p4154
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV EBP,ECX\nMOV RBX,RDX\nLEA RDX,[RSP + 0x8]\nCALL 0x0040c7f0\nTEST AL,AL\nJZ 0x0040d7b6\nMOV RDX,qword ptr [RSP + 0x8]\nMOV ESI,0x4046a0\nMOV RDI,RBX\nCALL 0x004076f0\nMOV R14,RAX\nMOV word ptr [R14 + 0x1a],0x0\nMOV EDI,0x40\nCALL 0x00417220\nMOV RBX,RAX\nMOV qword ptr [R14 + 0x38],RBX\nMOV qword ptr [RBX + 0x8],0x64\nMOV EDI,0x64\nCALL 0x00417220\nMOV qword ptr [RBX],RAX\nMOV qword ptr [RBX + 0x20],0x0\nMOVSXD RBP,EBP\nMOV RDI,RBP\nCALL 0x00402c50\nMOV qword ptr [RBX + 0x18],RBP\nMOV qword ptr [RBX + 0x28],0x0\nMOV RBP,qword ptr [RSP + 0x8]\nMOV RDI,RBP\nCALL 0x00402930\nMOV RDI,RBP\nMOV RSI,RAX\nMOV RDX,RBX\nCALL 0x00402f10\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x0040d79d\nXOR EDI,EDI\nMOV ESI,0x42182c\nMOV EDX,0x5\nCALL 0x00402910\nMOV RDX,RAX\nMOV RCX,qword ptr [RSP + 0x8]\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV R8,RBP\nCALL 0x00402d90\nMOV RDI,qword ptr [RSP + 0x8]\nMOV ESI,0x1\nCALL 0x0040d450\nMOVSS dword ptr [R14 + 0x24],XMM0\nMOV AL,0x1\nJMP 0x0040d7b8\nXOR EAX,EAX\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p4155
S'55\n41 56\n53\n48 83 ec 10\n89 cd\n48 89 d3\n48 8d 54 24 08\ne8 09 f1 ff ff\n84 c0\n0f 84 c7 00 00 00\n48 8b 54 24 08\nbe a0 46 40 00\n48 89 df\ne8 ef 9f ff ff\n49 89 c6\n66 41 c7 46 1a 00 00\nbf 40 00 00 00\ne8 0b 9b 00 00\n48 89 c3\n49 89 5e 38\n48 c7 43 08 64 00 00 00\nbf 64 00 00 00\ne8 f2 9a 00 00\n48 89 03\n48 c7 43 20 00 00 00 00\n48 63 ed\n48 89 ef\ne8 0c 55 ff ff\n48 89 6b 18\n48 c7 43 28 00 00 00 00\n48 8b 6c 24 08\n48 89 ef\ne8 d3 51 ff ff\n48 89 ef\n48 89 c6\n48 89 da\ne8 a5 57 ff ff\n48 89 c5\n48 85 ed\n74 2a\n31 ff\nbe 2c 18 42 00\nba 05 00 00 00\ne8 8c 51 ff ff\n48 89 c2\n48 8b 4c 24 08\nbf 01 00 00 00\n31 f6\n31 c0\n49 89 e8\ne8 f3 55 ff ff\n48 8b 7c 24 08\nbe 01 00 00 00\ne8 a4 fc ff ff\nf3 41 0f 11 46 24\nb0 01\neb 02\n31 c0\n48 83 c4 10\n5b\n41 5e\n5d\nc3\n'
p4156
S'.text:000000000040d6d0\n.text:000000000040d6d1\n.text:000000000040d6d3\n.text:000000000040d6d4\n.text:000000000040d6d8\n.text:000000000040d6da\n.text:000000000040d6dd\n.text:000000000040d6e2\n.text:000000000040d6e7\n.text:000000000040d6e9\n.text:000000000040d6ef\n.text:000000000040d6f4\n.text:000000000040d6f9\n.text:000000000040d6fc\n.text:000000000040d701\n.text:000000000040d704\n.text:000000000040d70b\n.text:000000000040d710\n.text:000000000040d715\n.text:000000000040d718\n.text:000000000040d71c\n.text:000000000040d724\n.text:000000000040d729\n.text:000000000040d72e\n.text:000000000040d731\n.text:000000000040d739\n.text:000000000040d73c\n.text:000000000040d73f\n.text:000000000040d744\n.text:000000000040d748\n.text:000000000040d750\n.text:000000000040d755\n.text:000000000040d758\n.text:000000000040d75d\n.text:000000000040d760\n.text:000000000040d763\n.text:000000000040d766\n.text:000000000040d76b\n.text:000000000040d76e\n.text:000000000040d771\n.text:000000000040d773\n.text:000000000040d775\n.text:000000000040d77a\n.text:000000000040d77f\n.text:000000000040d784\n.text:000000000040d787\n.text:000000000040d78c\n.text:000000000040d791\n.text:000000000040d793\n.text:000000000040d795\n.text:000000000040d798\n.text:000000000040d79d\n.text:000000000040d7a2\n.text:000000000040d7a7\n.text:000000000040d7ac\n.text:000000000040d7b2\n.text:000000000040d7b4\n.text:000000000040d7b6\n.text:000000000040d7b8\n.text:000000000040d7bc\n.text:000000000040d7bd\n.text:000000000040d7bf\n.text:000000000040d7c0\n'
p4157
tp4158
sS'checked_print_quoted'
p4159
(S'\n__stdcall checked_print_quoted(format_val * dest, char * format, char * s)\n'
p4160
V\u000avoid checked_print_quoted(format_val *dest,char *format,char *s)\u000a\u000a{\u000a  int iVar1;\u000a  uint *puVar2;\u000a  \u000a  iVar1 = print_quoted(dest->stream,dest->quote_opts,(char *)(ulong)dest->dest_is_tty,format);\u000a  if (-1 < iVar1) {\u000a    return;\u000a  }\u000a  puVar2 = (uint *)__errno_location();\u000a  nonfatal_nontarget_file_error((char *)(ulong)*puVar2);\u000a  return;\u000a}\u000a\u000a
p4161
S'PUSH RBX\nMOV RAX,RDX\nMOV RCX,RSI\nMOV RBX,RDI\nMOV RDI,qword ptr [RBX + 0x8]\nMOV RSI,qword ptr [RBX + 0x20]\nMOVZX EDX,byte ptr [RBX + 0x18]\nMOV R8,RAX\nCALL 0x0040f5b0\nTEST EAX,EAX\nJS 0x0040a214\nPOP RBX\nRET\nCALL 0x00402770\nMOV EDI,dword ptr [RAX]\nMOV RSI,qword ptr [RBX + 0x10]\nPOP RBX\nJMP 0x00407ff0\n'
p4162
S'53\n48 89 d0\n48 89 f1\n48 89 fb\n48 8b 7b 08\n48 8b 73 20\n0f b6 53 18\n49 89 c0\ne8 a2 53 00 00\n85 c0\n78 02\n5b\nc3\ne8 57 85 ff ff\n8b 38\n48 8b 73 10\n5b\ne9 cb dd ff ff\n'
p4163
S'.text:000000000040a1f0\n.text:000000000040a1f1\n.text:000000000040a1f4\n.text:000000000040a1f7\n.text:000000000040a1fa\n.text:000000000040a1fe\n.text:000000000040a202\n.text:000000000040a206\n.text:000000000040a209\n.text:000000000040a20e\n.text:000000000040a210\n.text:000000000040a212\n.text:000000000040a213\n.text:000000000040a214\n.text:000000000040a219\n.text:000000000040a21b\n.text:000000000040a21f\n.text:000000000040a220\n'
p4164
tp4165
sS'filesystem_type'
p4166
(S'\n__stdcall filesystem_type(stat * statp, char * path)\n'
p4167
V\u000achar * filesystem_type(stat *statp,char *path)\u000a\u000a{\u000a  char *current_fstype;\u000a  dev_t current_dev;\u000a  char *pcVar1;\u000a  \u000a  if (current_fstype != (char *)0x0) {\u000a    if ((fstype_known != 0) && (statp->st_dev == current_dev)) {\u000a      return current_fstype;\u000a    }\u000a    free(current_fstype);\u000a  }\u000a  current_dev = statp->st_dev;\u000a  pcVar1 = file_system_type_uncached();\u000a  return pcVar1;\u000a}\u000a\u000a
p4168
S'PUSH RBX\nMOV RBX,RDI\nMOV RAX,qword ptr [0x0062e600]\nTEST RAX,RAX\nJZ 0x0040a2bd\nCMP dword ptr [0x0062e610],0x0\nJZ 0x0040a2b5\nMOV RCX,qword ptr [RBX]\nCMP RCX,qword ptr [0x0062e608]\nJZ 0x0040a2d6\nMOV RDI,RAX\nCALL 0x00402710\nMOV RAX,qword ptr [RBX]\nMOV qword ptr [0x0062e608],RAX\nMOV RDI,RBX\nCALL 0x0040a2e0\nMOV qword ptr [0x0062e600],RAX\nPOP RBX\nRET\n'
p4169
S'53\n48 89 fb\n48 8b 05 65 43 22 00\n48 85 c0\n74 1d\n83 3d 69 43 22 00 00\n74 0c\n48 8b 0b\n48 3b 0d 55 43 22 00\n74 21\n48 89 c7\ne8 53 84 ff ff\n48 8b 03\n48 89 05 41 43 22 00\n48 89 df\ne8 11 00 00 00\n48 89 05 2a 43 22 00\n5b\nc3\n'
p4170
S'.text:000000000040a290\n.text:000000000040a291\n.text:000000000040a294\n.text:000000000040a29b\n.text:000000000040a29e\n.text:000000000040a2a0\n.text:000000000040a2a7\n.text:000000000040a2a9\n.text:000000000040a2ac\n.text:000000000040a2b3\n.text:000000000040a2b5\n.text:000000000040a2b8\n.text:000000000040a2bd\n.text:000000000040a2c0\n.text:000000000040a2c7\n.text:000000000040a2ca\n.text:000000000040a2cf\n.text:000000000040a2d6\n.text:000000000040a2d7\n'
p4171
tp4172
sS'set_follow_state'
p4173
(S'\n__stdcall set_follow_state()\n'
p4174
V\u000avoid set_follow_state(SymlinkOption SParm1)\u000a\u000a{\u000a  if (((byte)options.debug_options & 2) != 0) {\u000a    options.symlink_handling = SParm1;\u000a    options.xstat = debug_stat;\u000a    return;\u000a  }\u000a  if (SParm1 != SYMLINK_NEVER_DEREF) {\u000a    if (SParm1 == SYMLINK_DEREF_ARGSONLY) {\u000a      options.xstat = optionh_stat;\u000a      options.x_getfilecon = optionh_getfilecon;\u000a    }\u000a    else {\u000a      if (SParm1 != SYMLINK_ALWAYS_DEREF) {\u000a        options.symlink_handling = SParm1;\u000a        return;\u000a      }\u000a      options.xstat = optionl_stat;\u000a      options.x_getfilecon = optionl_getfilecon;\u000a    }\u000a    options.no_leaf_check = true;\u000a    options.symlink_handling = SParm1;\u000a    return;\u000a  }\u000a  options.symlink_handling = SParm1;\u000a  options.xstat = optionp_stat;\u000a  options.x_getfilecon = optionp_getfilecon;\u000a  return;\u000a}\u000a\u000a
p4175
S'TEST byte ptr [0x0062f080],0x2\nJNZ 0x0040a6cf\nTEST EDI,EDI\nJZ 0x0040a6e1\nCMP EDI,0x2\nJZ 0x0040a6fe\nCMP EDI,0x1\nJNZ 0x0040a71b\nMOV qword ptr [0x0062f090],0x4080f0\nMOV qword ptr [0x0062f0a0],0x40a730\nJMP 0x0040a714\nMOV qword ptr [0x0062f090],0x4081a0\nMOV dword ptr [0x0062f088],EDI\nRET\nMOV qword ptr [0x0062f090],0x408160\nMOV qword ptr [0x0062f0a0],0x40a760\nMOV dword ptr [0x0062f088],EDI\nRET\nMOV qword ptr [0x0062f090],0x408010\nMOV qword ptr [0x0062f0a0],0x40a770\nMOV byte ptr [0x0062f04c],0x1\nMOV dword ptr [0x0062f088],EDI\nRET\n'
p4176
S'f6 05 d9 49 22 00 02\n75 26\n85 ff\n74 34\n83 ff 02\n74 4c\n83 ff 01\n75 64\n48 c7 05 ce 49 22 00 f0 80 40 00\n48 c7 05 d3 49 22 00 30 a7 40 00\neb 45\n48 c7 05 b6 49 22 00 a0 81 40 00\n89 3d a8 49 22 00\nc3\n48 c7 05 a4 49 22 00 60 81 40 00\n48 c7 05 a9 49 22 00 60 a7 40 00\n89 3d 8b 49 22 00\nc3\n48 c7 05 87 49 22 00 10 80 40 00\n48 c7 05 8c 49 22 00 70 a7 40 00\nc6 05 31 49 22 00 01\n89 3d 67 49 22 00\nc3\n'
p4177
S'.text:000000000040a6a0\n.text:000000000040a6a7\n.text:000000000040a6a9\n.text:000000000040a6ab\n.text:000000000040a6ad\n.text:000000000040a6b0\n.text:000000000040a6b2\n.text:000000000040a6b5\n.text:000000000040a6b7\n.text:000000000040a6c2\n.text:000000000040a6cd\n.text:000000000040a6cf\n.text:000000000040a6da\n.text:000000000040a6e0\n.text:000000000040a6e1\n.text:000000000040a6ec\n.text:000000000040a6f7\n.text:000000000040a6fd\n.text:000000000040a6fe\n.text:000000000040a709\n.text:000000000040a714\n.text:000000000040a71b\n.text:000000000040a721\n'
p4178
tp4179
sS'xnrealloc'
p4180
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p4181
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p4182
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00417254\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00417260\nPUSH RAX\nCALL 0x004173b0\n'
p4183
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p4184
S'.text:0000000000417240\n.text:0000000000417243\n.text:0000000000417246\n.text:0000000000417249\n.text:000000000041724b\n.text:000000000041724f\n.text:0000000000417252\n.text:0000000000417254\n.text:0000000000417255\n'
p4185
tp4186
sS'emit_bug_reporting_address'
p4187
(S'\n__stdcall emit_bug_reporting_address()\n'
p4188
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  char *__format;\u000a  \u000a  __format = (char *)dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  printf(__format,"bug-findutils@gnu.org");\u000a  __format = (char *)dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  printf(__format,"GNU findutils","http://www.gnu.org/software/findutils/");\u000a  __format = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",\u000a                               5);\u000a  fputs(__format,stdout);\u000a  return;\u000a}\u000a\u000a
p4189
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x424d15\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV ESI,0x4227e4\nXOR EAX,EAX\nMOV RDI,RCX\nCALL 0x00402990\nXOR EDI,EDI\nMOV ESI,0x424d2a\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV ESI,0x422119\nMOV EDX,0x42278e\nXOR EAX,EAX\nMOV RDI,RCX\nCALL 0x00402990\nXOR EDI,EDI\nMOV ESI,0x424d3e\nMOV EDX,0x5\nCALL 0x00402910\nMOV RSI,qword ptr [0x0062de28]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00402a50\n'
p4190
S'50\n31 ff\nbe 15 4d 42 00\nba 05 00 00 00\ne8 6e b7 fe ff\n48 89 c1\nbe e4 27 42 00\n31 c0\n48 89 cf\ne8 dc b7 fe ff\n31 ff\nbe 2a 4d 42 00\nba 05 00 00 00\ne8 4b b7 fe ff\n48 89 c1\nbe 19 21 42 00\nba 8e 27 42 00\n31 c0\n48 89 cf\ne8 b4 b7 fe ff\n31 ff\nbe 3e 4d 42 00\nba 05 00 00 00\ne8 23 b7 fe ff\n48 8b 35 34 6c 21 00\n48 89 c7\n58\ne9 53 b8 fe ff\n'
p4191
S'.text:0000000000417190\n.text:0000000000417191\n.text:0000000000417193\n.text:0000000000417198\n.text:000000000041719d\n.text:00000000004171a2\n.text:00000000004171a5\n.text:00000000004171aa\n.text:00000000004171ac\n.text:00000000004171af\n.text:00000000004171b4\n.text:00000000004171b6\n.text:00000000004171bb\n.text:00000000004171c0\n.text:00000000004171c5\n.text:00000000004171c8\n.text:00000000004171cd\n.text:00000000004171d2\n.text:00000000004171d4\n.text:00000000004171d7\n.text:00000000004171dc\n.text:00000000004171de\n.text:00000000004171e3\n.text:00000000004171e8\n.text:00000000004171ed\n.text:00000000004171f4\n.text:00000000004171f7\n.text:00000000004171f8\n'
p4192
tp4193
sS'get_stat_atime'
p4194
(S'\n__stdcall get_stat_atime(stat * st)\n'
p4195
V\u000atimespec get_stat_atime(stat *st)\u000a\u000a{\u000a  return st->st_atim;\u000a}\u000a\u000a
p4196
S'MOV RAX,qword ptr [RDI + 0x48]\nMOV RDX,qword ptr [RDI + 0x50]\nRET\n'
p4197
S'48 8b 47 48\n48 8b 57 50\nc3\n'
p4198
S'.text:0000000000416c70\n.text:0000000000416c74\n.text:0000000000416c78\n'
p4199
tp4200
sS'xmalloc'
p4201
(S'\n__stdcall xmalloc(size_t n)\n'
p4202
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p4203
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00402c60\nTEST RBX,RBX\nJZ 0x00417233\nTEST RAX,RAX\nJZ 0x00417235\nPOP RBX\nRET\nCALL 0x004173b0\n'
p4204
S'53\n48 89 fb\ne8 37 ba fe ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p4205
S'.text:0000000000417220\n.text:0000000000417221\n.text:0000000000417224\n.text:0000000000417229\n.text:000000000041722c\n.text:000000000041722e\n.text:0000000000417231\n.text:0000000000417233\n.text:0000000000417234\n.text:0000000000417235\n'
p4206
tp4207
sS'parse_true'
p4208
(S'\n__stdcall parse_true(parser_table * entry, char * * argv, int * arg_ptr)\n'
p4209
V\u000a_Bool parse_true(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  predicate *ppVar1;\u000a  \u000a  ppVar1 = insert_primary_noarg(entry);\u000a  ppVar1->need_type = false;\u000a  ppVar1->need_stat = false;\u000a  ppVar1->est_success_rate = 1.00000000;\u000a  return true;\u000a}\u000a\u000a
p4210
S'PUSH RAX\nCALL 0x00407760\nMOV byte ptr [RAX + 0x1b],0x0\nMOV byte ptr [RAX + 0x1a],0x0\nMOV dword ptr [RAX + 0x24],0x3f800000\nMOV AL,0x1\nPOP RCX\nRET\n'
p4211
S'50\ne8 1a b1 ff ff\nc6 40 1b 00\nc6 40 1a 00\nc7 40 24 00 00 80 3f\nb0 01\n59\nc3\n'
p4212
S'.text:000000000040c640\n.text:000000000040c641\n.text:000000000040c646\n.text:000000000040c64a\n.text:000000000040c64e\n.text:000000000040c655\n.text:000000000040c657\n.text:000000000040c658\n'
p4213
tp4214
sS'difftime'
p4215
(S'\n__stdcall difftime(time_t __time1, time_t __time0)\n'
p4216
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000adouble difftime(time_t __time1,time_t __time0)\u000a\u000a{\u000a  double dVar1;\u000a  \u000a  dVar1 = (double)(*(code *)PTR_difftime_0062d170)();\u000a  return dVar1;\u000a}\u000a\u000a
p4217
S'JMP qword ptr [0x0062d170]\n'
p4218
S'ff 25 ca a7 22 00\n'
p4219
S'.plt:00000000004029a0\n'
p4220
tp4221
sS'leapyear'
p4222
(S'\n__stdcall leapyear(long_int year)\n'
p4223
V\u000a_Bool leapyear(long_int year)\u000a\u000a{\u000a  bool bVar1;\u000a  \u000a  if ((year & 3U) != 0) {\u000a    return false;\u000a  }\u000a  bVar1 = true;\u000a  if (year == (year / 100 + (year >> 0x3f) +\u000a              SUB168(SEXT816(year) * ZEXT816(0xa3d70a3d70a3d70b) >> 0x7f,0)) * 100) {\u000a    bVar1 = (((uint)SUB168(SEXT816(year) * ZEXT816(0xa3d70a3d70a3d70b) >> 0x46,0) & 0x3ffffff) +\u000a             SUB164(SEXT816(year) * ZEXT816(0xa3d70a3d70a3d70b) >> 0x7f,0) & 3) == 1;\u000a  }\u000a  return (_Bool)bVar1;\u000a}\u000a\u000a
p4224
S'TEST DIL,0x3\nJZ 0x0041a379\nXOR EAX,EAX\nRET\nMOV RCX,-0x5c28f5c28f5c28f5\nMOV RAX,RDI\nIMUL RCX\nADD RDX,RDI\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0x6\nADD RDX,RAX\nIMUL RDX,RDX,0x64\nMOV AL,0x1\nCMP RDI,RDX\nJNZ 0x0041a3c4\nMOV RAX,RDI\nIMUL RCX\nADD RDX,RDI\nMOV RAX,RDX\nSHR RAX,0x3f\nSHR EDX,0x6\nADD EDX,EAX\nAND EDX,0x3\nCMP RDX,0x1\nSETZ AL\nRET\n'
p4225
S'40 f6 c7 03\n74 03\n31 c0\nc3\n48 b9 0b d7 a3 70 3d 0a d7 a3\n48 89 f8\n48 f7 e9\n48 01 fa\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 06\n48 01 c2\n48 6b d2 64\nb0 01\n48 39 d7\n75 1f\n48 89 f8\n48 f7 e9\n48 01 fa\n48 89 d0\n48 c1 e8 3f\nc1 ea 06\n01 c2\n83 e2 03\n48 83 fa 01\n0f 94 c0\nc3\n'
p4226
S'.text:000000000041a370\n.text:000000000041a374\n.text:000000000041a376\n.text:000000000041a378\n.text:000000000041a379\n.text:000000000041a383\n.text:000000000041a386\n.text:000000000041a389\n.text:000000000041a38c\n.text:000000000041a38f\n.text:000000000041a393\n.text:000000000041a397\n.text:000000000041a39a\n.text:000000000041a39e\n.text:000000000041a3a0\n.text:000000000041a3a3\n.text:000000000041a3a5\n.text:000000000041a3a8\n.text:000000000041a3ab\n.text:000000000041a3ae\n.text:000000000041a3b1\n.text:000000000041a3b5\n.text:000000000041a3b8\n.text:000000000041a3ba\n.text:000000000041a3bd\n.text:000000000041a3c1\n.text:000000000041a3c4\n'
p4227
tp4228
sS'quotearg_char_mem'
p4229
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p4230
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p4231
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x0062e6c0]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x0062e6b0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0062e6a0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0062e690]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x004151b0\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004160a0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p4232
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d f8 82 21 00\n48 89 4c 24 30\n0f 10 05 dc 82 21 00\n0f 29 44 24 20\n0f 10 05 c0 82 21 00\n0f 29 44 24 10\n0f 10 05 a4 82 21 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p4233
S'.text:00000000004163b0\n.text:00000000004163b2\n.text:00000000004163b4\n.text:00000000004163b5\n.text:00000000004163b9\n.text:00000000004163bb\n.text:00000000004163be\n.text:00000000004163c1\n.text:00000000004163c8\n.text:00000000004163cd\n.text:00000000004163d4\n.text:00000000004163d9\n.text:00000000004163e0\n.text:00000000004163e5\n.text:00000000004163ec\n.text:00000000004163f0\n.text:00000000004163f3\n.text:00000000004163f8\n.text:00000000004163fb\n.text:00000000004163fd\n.text:0000000000416402\n.text:0000000000416404\n.text:0000000000416407\n.text:000000000041640a\n.text:000000000041640d\n.text:0000000000416412\n.text:0000000000416416\n.text:0000000000416417\n.text:0000000000416419\n.text:000000000041641b\n'
p4234
tp4235
sS'bc_do_exec'
p4236
(S'\n__stdcall bc_do_exec(buildcmd_control * ctl, buildcmd_state * state)\n'
p4237
V\u000avoid bc_do_exec(buildcmd_control *ctl,buildcmd_state *state)\u000a\u000a{\u000a  int iVar1;\u000a  char **working_args;\u000a  size_t sVar2;\u000a  size_t limit;\u000a  undefined8 uVar3;\u000a  size_t done;\u000a  \u000a  bc_args_complete(ctl,state);\u000a  limit = state->cmd_argc;\u000a  if (limit == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("state->cmd_argc > 0","buildcmd.c",0x10f,\u000a                  "void bc_do_exec(struct buildcmd_control *, struct buildcmd_state *)");\u000a  }\u000a  if (state->cmd_argv[limit - 1] == (char *)0x0) {\u000a    working_args = (char **)xmalloc(limit * 8 + 8);\u000a    limit = state->cmd_argc;\u000a    done = 0;\u000a    do {\u000a      sVar2 = copy_args(ctl,state,working_args,limit,done);\u000a      iVar1 = (*ctl->exec_callback)(ctl,state->usercontext,(int)sVar2,working_args);\u000a      if (iVar1 == 0) {\u000a        if (ctl->initial_argc + 1 < limit) {\u000a          limit = update_limit(ctl,state,0);\u000a        }\u000a        else {\u000a          uVar3 = dcgettext(0,"can\u005c't call exec() due to argument size restrictions",5);\u000a          error(1,0,uVar3,uVar3);\u000a        }\u000a      }\u000a      else {\u000a        limit = update_limit(ctl,state,1);\u000a        done = (sVar2 + done) - ctl->initial_argc;\u000a      }\u000a    } while (done + 1 < state->cmd_argc - ctl->initial_argc);\u000a    free(working_args);\u000a    bc_clear_args(ctl,state);\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("state->cmd_argv[state->cmd_argc-1] == NULL","buildcmd.c",0x110,\u000a                "void bc_do_exec(struct buildcmd_control *, struct buildcmd_state *)");\u000a}\u000a\u000a
p4238
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nCALL 0x0040e050\nMOV RAX,qword ptr [R14]\nTEST RAX,RAX\nJZ 0x0040e015\nMOV RCX,qword ptr [R14 + 0x8]\nCMP qword ptr [RCX + RAX*0x8 + -0x8],0x0\nJNZ 0x0040e02e\nLEA RDI,[0x8 + RAX*0x8]\nCALL 0x00417220\nMOV R15,RAX\nMOV R12,qword ptr [R14]\nXOR R13D,R13D\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nMOV RCX,R12\nMOV R8,R13\nCALL 0x0040e070\nMOV RBP,RAX\nMOV RSI,qword ptr [R14 + 0x30]\nMOV RDI,RBX\nMOV EDX,EBP\nMOV RCX,R15\nCALL qword ptr [RBX + 0x40]\nTEST EAX,EAX\nJZ 0x0040df90\nMOV EDX,0x1\nMOV RDI,RBX\nMOV RSI,R14\nMOV RCX,R12\nCALL 0x0040e100\nMOV R12,RAX\nADD RBP,R13\nSUB RBP,qword ptr [RBX + 0x38]\nMOV R13,RBP\nJMP 0x0040dfe0\nMOV RAX,qword ptr [RBX + 0x38]\nINC RAX\nCMP R12,RAX\nJBE 0x0040dfb1\nXOR EDX,EDX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RCX,R12\nCALL 0x0040e100\nMOV R12,RAX\nJMP 0x0040dfe0\nXOR EDI,EDI\nMOV ESI,0x421cef\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402d90\nNOP word ptr CS:[RAX + RAX*0x1]\nLEA RAX,[R13 + 0x1]\nMOV RCX,qword ptr [R14]\nSUB RCX,qword ptr [RBX + 0x38]\nCMP RAX,RCX\nJC 0x0040df40\nMOV RDI,R15\nCALL 0x00402710\nMOV RDI,RBX\nMOV RSI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x0040e190\nMOV EDI,0x421c61\nMOV ESI,0x421c75\nMOV EDX,0x10f\nMOV ECX,0x421c80\nCALL 0x00402a40\nMOV EDI,0x421cc4\nMOV ESI,0x421c75\nMOV EDX,0x110\nMOV ECX,0x421c80\nCALL 0x00402a40\n'
p4239
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f6\n48 89 fb\ne8 4a 01 00 00\n49 8b 06\n48 85 c0\n0f 84 03 01 00 00\n49 8b 4e 08\n48 83 7c c1 f8 00\n0f 85 0c 01 00 00\n48 8d 3c c5 08 00 00 00\ne8 f1 92 00 00\n49 89 c7\n4d 8b 26\n45 31 ed\n0f 1f 84 00 00 00 00 00\n48 89 df\n4c 89 f6\n4c 89 fa\n4c 89 e1\n4d 89 e8\ne8 1c 01 00 00\n48 89 c5\n49 8b 76 30\n48 89 df\n89 ea\n4c 89 f9\nff 53 40\n85 c0\n74 26\nba 01 00 00 00\n48 89 df\n4c 89 f6\n4c 89 e1\ne8 83 01 00 00\n49 89 c4\n4c 01 ed\n48 2b 6b 38\n49 89 ed\neb 54\n48 8b 43 38\n48 ff c0\n49 39 c4\n76 15\n31 d2\n48 89 df\n4c 89 f6\n4c 89 e1\ne8 54 01 00 00\n49 89 c4\neb 2f\n31 ff\nbe ef 1c 42 00\nba 05 00 00 00\ne8 4e 49 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 ba 4d ff ff\n66 2e 0f 1f 84 00 00 00 00 00\n49 8d 45 01\n49 8b 0e\n48 2b 4b 38\n48 39 c8\n0f 82 4c ff ff ff\n4c 89 ff\ne8 14 47 ff ff\n48 89 df\n4c 89 f6\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 7b 01 00 00\nbf 61 1c 42 00\nbe 75 1c 42 00\nba 0f 01 00 00\nb9 80 1c 42 00\ne8 12 4a ff ff\nbf c4 1c 42 00\nbe 75 1c 42 00\nba 10 01 00 00\nb9 80 1c 42 00\ne8 f9 49 ff ff\n'
p4240
S'.text:000000000040def0\n.text:000000000040def1\n.text:000000000040def3\n.text:000000000040def5\n.text:000000000040def7\n.text:000000000040def9\n.text:000000000040defa\n.text:000000000040defb\n.text:000000000040defe\n.text:000000000040df01\n.text:000000000040df06\n.text:000000000040df09\n.text:000000000040df0c\n.text:000000000040df12\n.text:000000000040df16\n.text:000000000040df1c\n.text:000000000040df22\n.text:000000000040df2a\n.text:000000000040df2f\n.text:000000000040df32\n.text:000000000040df35\n.text:000000000040df38\n.text:000000000040df40\n.text:000000000040df43\n.text:000000000040df46\n.text:000000000040df49\n.text:000000000040df4c\n.text:000000000040df4f\n.text:000000000040df54\n.text:000000000040df57\n.text:000000000040df5b\n.text:000000000040df5e\n.text:000000000040df60\n.text:000000000040df63\n.text:000000000040df66\n.text:000000000040df68\n.text:000000000040df6a\n.text:000000000040df6f\n.text:000000000040df72\n.text:000000000040df75\n.text:000000000040df78\n.text:000000000040df7d\n.text:000000000040df80\n.text:000000000040df83\n.text:000000000040df87\n.text:000000000040df8a\n.text:000000000040df90\n.text:000000000040df94\n.text:000000000040df97\n.text:000000000040df9a\n.text:000000000040df9c\n.text:000000000040df9e\n.text:000000000040dfa1\n.text:000000000040dfa4\n.text:000000000040dfa7\n.text:000000000040dfac\n.text:000000000040dfaf\n.text:000000000040dfb1\n.text:000000000040dfb3\n.text:000000000040dfb8\n.text:000000000040dfbd\n.text:000000000040dfc2\n.text:000000000040dfc5\n.text:000000000040dfca\n.text:000000000040dfcc\n.text:000000000040dfce\n.text:000000000040dfd1\n.text:000000000040dfd6\n.text:000000000040dfe0\n.text:000000000040dfe4\n.text:000000000040dfe7\n.text:000000000040dfeb\n.text:000000000040dfee\n.text:000000000040dff4\n.text:000000000040dff7\n.text:000000000040dffc\n.text:000000000040dfff\n.text:000000000040e002\n.text:000000000040e006\n.text:000000000040e007\n.text:000000000040e009\n.text:000000000040e00b\n.text:000000000040e00d\n.text:000000000040e00f\n.text:000000000040e010\n.text:000000000040e015\n.text:000000000040e01a\n.text:000000000040e01f\n.text:000000000040e024\n.text:000000000040e029\n.text:000000000040e02e\n.text:000000000040e033\n.text:000000000040e038\n.text:000000000040e03d\n.text:000000000040e042\n'
p4241
tp4242
sS'fallback_getfilecon'
p4243
(S'\n__stdcall fallback_getfilecon(char * name, security_context_t * p)\n'
p4244
V\u000aint fallback_getfilecon(char *name,security_context_t *p)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  int in_ECX;\u000a  \u000a  piVar2 = __errno_location();\u000a  if ((*piVar2 != 0x14) && (*piVar2 != 2)) {\u000a    return in_ECX;\u000a  }\u000a  if (((byte)options.debug_options & 2) != 0) {\u000a    fprintf(stderr,"fallback_getfilecon(): getfilecon(%s) failed; falling back on lgetfilecon()\u005cn",p\u000a           );\u000a  }\u000a  iVar1 = lgetfileconat((char *)((ulong)name & 0xffffffff),p);\u000a  return iVar1;\u000a}\u000a\u000a
p4245
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,ECX\nMOV R14,RDX\nMOV R15,RSI\nMOV EBP,EDI\nCALL 0x00402770\nMOV EAX,dword ptr [RAX]\nCMP EAX,0x14\nJZ 0x0040a9b2\nCMP EAX,0x2\nJNZ 0x0040a9d2\nTEST byte ptr [0x0062f080],0x2\nJNZ 0x0040a9df\nMOV EDI,EBP\nMOV RSI,R15\nMOV RDX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x0041b060\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RDI,qword ptr [0x0062de60]\nMOV ESI,0x420b59\nXOR EAX,EAX\nMOV RDX,R15\nCALL 0x00402ba0\nJMP 0x0040a9bb\n'
p4246
S'55\n41 57\n41 56\n53\n50\n89 cb\n49 89 d6\n49 89 f7\n89 fd\ne8 ca 7d ff ff\n8b 00\n83 f8 14\n74 05\n83 f8 02\n75 20\nf6 05 c7 46 22 00 02\n75 24\n89 ef\n4c 89 fe\n4c 89 f2\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\ne9 8e 06 01 00\n89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n48 8b 3d 7a 34 22 00\nbe 59 0b 42 00\n31 c0\n4c 89 fa\ne8 ab 81 ff ff\neb c4\n'
p4247
S'.text:000000000040a990\n.text:000000000040a991\n.text:000000000040a993\n.text:000000000040a995\n.text:000000000040a996\n.text:000000000040a997\n.text:000000000040a999\n.text:000000000040a99c\n.text:000000000040a99f\n.text:000000000040a9a1\n.text:000000000040a9a6\n.text:000000000040a9a8\n.text:000000000040a9ab\n.text:000000000040a9ad\n.text:000000000040a9b0\n.text:000000000040a9b2\n.text:000000000040a9b9\n.text:000000000040a9bb\n.text:000000000040a9bd\n.text:000000000040a9c0\n.text:000000000040a9c3\n.text:000000000040a9c7\n.text:000000000040a9c8\n.text:000000000040a9ca\n.text:000000000040a9cc\n.text:000000000040a9cd\n.text:000000000040a9d2\n.text:000000000040a9d4\n.text:000000000040a9d8\n.text:000000000040a9d9\n.text:000000000040a9db\n.text:000000000040a9dd\n.text:000000000040a9de\n.text:000000000040a9df\n.text:000000000040a9e6\n.text:000000000040a9eb\n.text:000000000040a9ed\n.text:000000000040a9f0\n.text:000000000040a9f5\n'
p4248
tp4249
sS'show_valid_debug_options'
p4250
(S'\n__stdcall show_valid_debug_options()\n'
p4251
V\u000avoid show_valid_debug_options(int iParm1)\u000a\u000a{\u000a  char *__s;\u000a  undefined *puVar1;\u000a  long lVar2;\u000a  \u000a  __s = (char *)dcgettext(0,"Valid arguments for -D:\u005cn",5);\u000a  fputs(__s,stdout);\u000a  if (iParm1 == 0) {\u000a    lVar2 = -0xc0;\u000a    do {\u000a      puVar1 = (undefined *)0x41e69a;\u000a      if (lVar2 != 0xffffff40) {\u000a        puVar1 = &DAT_0041e943;\u000a      }\u000a      fprintf(stdout,"%s%s",puVar1,*(undefined8 *)("," + lVar2));\u000a      lVar2 = lVar2 + 0x18;\u000a    } while (lVar2 != 0);\u000a  }\u000a  else {\u000a    lVar2 = -0xc0;\u000a    do {\u000a      fprintf(stdout,"%-10s %s\u005cn",*(undefined8 *)("," + lVar2),\u000a              *(undefined8 *)("entry->pred_func != NULL" + lVar2 + 0xe));\u000a      lVar2 = lVar2 + 0x18;\u000a    } while (lVar2 != 0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p4252
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDI\nXOR EDI,EDI\nMOV ESI,0x41e920\nMOV EDX,0x5\nCALL 0x00402910\nMOV RSI,qword ptr [0x0062de28]\nMOV RDI,RAX\nCALL 0x00402a50\nTEST EBX,EBX\nJZ 0x00407979\nMOV RBX,-0xc0\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,qword ptr [0x0062de28]\nMOV RDX,qword ptr [0x41e000 + RBX]\nMOV RCX,qword ptr [0x41e010 + RBX]\nMOV ESI,0x41e939\nXOR EAX,EAX\nCALL 0x00402ba0\nADD RBX,0x18\nJNZ 0x00407950\nJMP 0x004079c0\nMOV RBX,-0xc0\nMOV R14D,0x41e943\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RDI,qword ptr [0x0062de28]\nCMP RBX,0xffffff40\nMOV EDX,0x41e69a\nCMOVNZ RDX,R14\nMOV RCX,qword ptr [0x41e000 + RBX]\nMOV ESI,0x41cf9b\nXOR EAX,EAX\nCALL 0x00402ba0\nADD RBX,0x18\nJNZ 0x00407990\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p4253
S'41 56\n53\n50\n89 fb\n31 ff\nbe 20 e9 41 00\nba 05 00 00 00\ne8 e9 af ff ff\n48 8b 35 fa 64 22 00\n48 89 c7\ne8 1a b1 ff ff\n85 db\n74 3f\n48 c7 c3 40 ff ff ff\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 3d d1 64 22 00\n48 8b 93 00 e0 41 00\n48 8b 8b 10 e0 41 00\nbe 39 e9 41 00\n31 c0\ne8 2f b2 ff ff\n48 83 c3 18\n75 d9\neb 47\n48 c7 c3 40 ff ff ff\n41 be 43 e9 41 00\n66 2e 0f 1f 84 00 00 00 00 00\n48 8b 3d 91 64 22 00\n48 81 fb 40 ff ff ff\nba 9a e6 41 00\n49 0f 45 d6\n48 8b 8b 00 e0 41 00\nbe 9b cf 41 00\n31 c0\ne8 e6 b1 ff ff\n48 83 c3 18\n75 d0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p4254
S'.text:0000000000407910\n.text:0000000000407912\n.text:0000000000407913\n.text:0000000000407914\n.text:0000000000407916\n.text:0000000000407918\n.text:000000000040791d\n.text:0000000000407922\n.text:0000000000407927\n.text:000000000040792e\n.text:0000000000407931\n.text:0000000000407936\n.text:0000000000407938\n.text:000000000040793a\n.text:0000000000407941\n.text:0000000000407950\n.text:0000000000407957\n.text:000000000040795e\n.text:0000000000407965\n.text:000000000040796a\n.text:000000000040796c\n.text:0000000000407971\n.text:0000000000407975\n.text:0000000000407977\n.text:0000000000407979\n.text:0000000000407980\n.text:0000000000407986\n.text:0000000000407990\n.text:0000000000407997\n.text:000000000040799e\n.text:00000000004079a3\n.text:00000000004079a7\n.text:00000000004079ae\n.text:00000000004079b3\n.text:00000000004079b5\n.text:00000000004079ba\n.text:00000000004079be\n.text:00000000004079c0\n.text:00000000004079c4\n.text:00000000004079c5\n.text:00000000004079c7\n'
p4255
tp4256
sS'pred_uid'
p4257
(S'\n__stdcall pred_uid(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p4258
V\u000a_Bool pred_uid(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = *(int *)pred_ptr->args;\u000a  if (iVar1 == 2) {\u000a    if ((ulong)stat_buf->st_uid == *(ulong *)(pred_ptr->args + 8)) {\u000a      return true;\u000a    }\u000a  }\u000a  else {\u000a    if (iVar1 == 1) {\u000a      if ((ulong)stat_buf->st_uid < *(ulong *)(pred_ptr->args + 8)) {\u000a        return true;\u000a      }\u000a    }\u000a    else {\u000a      if ((iVar1 == 0) &&\u000a         (*(ulong *)(pred_ptr->args + 8) <= (ulong)stat_buf->st_uid &&\u000a          (ulong)stat_buf->st_uid != *(ulong *)(pred_ptr->args + 8))) {\u000a        return true;\u000a      }\u000a    }\u000a  }\u000a  return false;\u000a}\u000a\u000a
p4259
S'MOV EAX,dword ptr [RDX + 0x38]\nCMP EAX,0x2\nJZ 0x0040482e\nCMP EAX,0x1\nJZ 0x0040483b\nTEST EAX,EAX\nJNZ 0x00404846\nMOV ECX,dword ptr [RSI + 0x1c]\nMOV AL,0x1\nCMP RCX,qword ptr [RDX + 0x40]\nJBE 0x00404846\nJMP 0x00404848\nMOV ECX,dword ptr [RSI + 0x1c]\nMOV AL,0x1\nCMP RCX,qword ptr [RDX + 0x40]\nJNZ 0x00404846\nJMP 0x00404848\nMOV ECX,dword ptr [RSI + 0x1c]\nMOV AL,0x1\nCMP RCX,qword ptr [RDX + 0x40]\nJC 0x00404848\nXOR EAX,EAX\nRET\n'
p4260
S'8b 42 38\n83 f8 02\n74 16\n83 f8 01\n74 1e\n85 c0\n75 25\n8b 4e 1c\nb0 01\n48 3b 4a 40\n76 1a\neb 1a\n8b 4e 1c\nb0 01\n48 3b 4a 40\n75 0d\neb 0d\n8b 4e 1c\nb0 01\n48 3b 4a 40\n72 02\n31 c0\nc3\n'
p4261
S'.text:0000000000404810\n.text:0000000000404813\n.text:0000000000404816\n.text:0000000000404818\n.text:000000000040481b\n.text:000000000040481d\n.text:000000000040481f\n.text:0000000000404821\n.text:0000000000404824\n.text:0000000000404826\n.text:000000000040482a\n.text:000000000040482c\n.text:000000000040482e\n.text:0000000000404831\n.text:0000000000404833\n.text:0000000000404837\n.text:0000000000404839\n.text:000000000040483b\n.text:000000000040483e\n.text:0000000000404840\n.text:0000000000404844\n.text:0000000000404846\n.text:0000000000404848\n'
p4262
tp4263
sS'parse_fls'
p4264
(S'\n__stdcall parse_fls(parser_table * entry, char * * argv, int * arg_ptr)\n'
p4265
V\u000a_Bool parse_fls(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  char *local_10;\u000a  \u000a  _Var1 = collect_arg(argv,arg_ptr,&local_10);\u000a  if (_Var1 != false) {\u000a    insert_fls();\u000a  }\u000a  return (_Bool)(_Var1 != false);\u000a}\u000a\u000a
p4266
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RDI\nLEA RAX,[RSP + 0x8]\nMOV RDI,RSI\nMOV RSI,RDX\nMOV RDX,RAX\nCALL 0x0040c7f0\nTEST AL,AL\nJZ 0x0040b480\nMOV RSI,qword ptr [RSP + 0x8]\nMOV RDI,RBX\nCALL 0x0040d090\nMOV AL,0x1\nJMP 0x0040b482\nXOR EAX,EAX\nADD RSP,0x10\nPOP RBX\nRET\n'
p4267
S'53\n48 83 ec 10\n48 89 fb\n48 8d 44 24 08\n48 89 f7\n48 89 d6\n48 89 c2\ne8 85 13 00 00\n84 c0\n74 11\n48 8b 74 24 08\n48 89 df\ne8 14 1c 00 00\nb0 01\neb 02\n31 c0\n48 83 c4 10\n5b\nc3\n'
p4268
S'.text:000000000040b450\n.text:000000000040b451\n.text:000000000040b455\n.text:000000000040b458\n.text:000000000040b45d\n.text:000000000040b460\n.text:000000000040b463\n.text:000000000040b466\n.text:000000000040b46b\n.text:000000000040b46d\n.text:000000000040b46f\n.text:000000000040b474\n.text:000000000040b477\n.text:000000000040b47c\n.text:000000000040b47e\n.text:000000000040b480\n.text:000000000040b482\n.text:000000000040b486\n.text:000000000040b487\n'
p4269
tp4270
sS'uname'
p4271
(S'\n__stdcall uname(utsname * __name)\n'
p4272
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint uname(utsname *__name)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_uname_0062d1a8)();\u000a  return iVar1;\u000a}\u000a\u000a
p4273
S'JMP qword ptr [0x0062d1a8]\n'
p4274
S'ff 25 92 a7 22 00\n'
p4275
S'.plt:0000000000402a10\n'
p4276
tp4277
sS'left_dir'
p4278
(S'\n__stdcall left_dir()\n'
p4279
V\u000avoid left_dir(void)\u000a\u000a{\u000a  if (((ftsoptions & 0x200U) != 0) && (-1 < curr_fd)) {\u000a    close(curr_fd);\u000a    curr_fd = -1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p4280
S'MOV EAX,dword ptr [0x0062d480]\nTEST AH,0x2\nJZ 0x00403ac9\nMOV EDI,dword ptr [0x0062d484]\nTEST EDI,EDI\nJS 0x00403ac9\nPUSH RAX\nCALL 0x00402ac0\nMOV dword ptr [0x0062d484],0xffffffff\nADD RSP,0x8\nRET\n'
p4281
S'8b 05 da 99 22 00\nf6 c4 02\n74 1e\n8b 3d d3 99 22 00\n85 ff\n78 14\n50\ne8 05 f0 ff ff\nc7 05 bf 99 22 00 ff ff ff ff\n48 83 c4 08\nc3\n'
p4282
S'.text:0000000000403aa0\n.text:0000000000403aa6\n.text:0000000000403aa9\n.text:0000000000403aab\n.text:0000000000403ab1\n.text:0000000000403ab3\n.text:0000000000403ab5\n.text:0000000000403ab6\n.text:0000000000403abb\n.text:0000000000403ac5\n.text:0000000000403ac9\n'
p4283
tp4284
sS'parse_fprint0'
p4285
(S'\n__stdcall parse_fprint0(parser_table * entry, char * * argv, int * arg_ptr)\n'
p4286
V\u000a_Bool parse_fprint0(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  char *local_10;\u000a  \u000a  _Var1 = collect_arg(argv,arg_ptr,&local_10);\u000a  if (_Var1 != false) {\u000a    insert_fprint();\u000a  }\u000a  return (_Bool)(_Var1 != false);\u000a}\u000a\u000a
p4287
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RDI\nLEA RAX,[RSP + 0x8]\nMOV RDI,RSI\nMOV RSI,RDX\nMOV RDX,RAX\nCALL 0x0040c7f0\nTEST AL,AL\nJZ 0x0040b560\nMOV RSI,qword ptr [RSP + 0x8]\nMOV RDI,RBX\nCALL 0x0040d1b0\nMOV AL,0x1\nJMP 0x0040b562\nXOR EAX,EAX\nADD RSP,0x10\nPOP RBX\nRET\n'
p4288
S'53\n48 83 ec 10\n48 89 fb\n48 8d 44 24 08\n48 89 f7\n48 89 d6\n48 89 c2\ne8 a5 12 00 00\n84 c0\n74 11\n48 8b 74 24 08\n48 89 df\ne8 54 1c 00 00\nb0 01\neb 02\n31 c0\n48 83 c4 10\n5b\nc3\n'
p4289
S'.text:000000000040b530\n.text:000000000040b531\n.text:000000000040b535\n.text:000000000040b538\n.text:000000000040b53d\n.text:000000000040b540\n.text:000000000040b543\n.text:000000000040b546\n.text:000000000040b54b\n.text:000000000040b54d\n.text:000000000040b54f\n.text:000000000040b554\n.text:000000000040b557\n.text:000000000040b55c\n.text:000000000040b55e\n.text:000000000040b560\n.text:000000000040b562\n.text:000000000040b566\n.text:000000000040b567\n'
p4290
tp4291
sS'rotl64'
p4292
(S'\n__stdcall rotl64(uint64_t x)\n'
p4293
V\u000auint64_t rotl64(uint64_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x << bVar1 | x >> 0x40 - bVar1;\u000a}\u000a\u000a
p4294
S'MOV ECX,ESI\nROL RDI,CL\nMOV RAX,RDI\nRET\n'
p4295
S'89 f1\n48 d3 c7\n48 89 f8\nc3\n'
p4296
S'.text:000000000041b860\n.text:000000000041b862\n.text:000000000041b865\n.text:000000000041b868\n'
p4297
tp4298
sS'hasmntopt'
p4299
(S'\n__stdcall hasmntopt()\n'
p4300
V\u000avoid hasmntopt(void)\u000a\u000a{\u000a  (*(code *)PTR_hasmntopt_0062d440)();\u000a  return;\u000a}\u000a\u000a
p4301
S'JMP qword ptr [0x0062d440]\n'
p4302
S'ff 25 fa a4 22 00\n'
p4303
S'.plt:0000000000402f40\n'
p4304
tp4305
sS'fts_children'
p4306
(S'\n__stdcall fts_children(FTS * sp)\n'
p4307
V\u000aFTSENT * fts_children(FTS *sp)\u000a\u000a{\u000a  byte *pbVar1;\u000a  _ftsent *p_Var2;\u000a  int __fd;\u000a  int iVar3;\u000a  int *piVar4;\u000a  FTSENT *pFVar5;\u000a  uint in_ESI;\u000a  \u000a  piVar4 = __errno_location();\u000a  if ((in_ESI | 0x2000) == 0x2000) {\u000a    p_Var2 = sp->fts_cur;\u000a    *piVar4 = 0;\u000a    if ((*(byte *)((long)&sp->fts_options + 1) & 0x40) == 0) {\u000a      if (p_Var2->fts_info != 1) {\u000a        if (p_Var2->fts_info != 9) {\u000a          return (FTSENT *)0x0;\u000a        }\u000a        return (FTSENT *)p_Var2->fts_link;\u000a      }\u000a      if ((FTSENT *)sp->fts_child != (FTSENT *)0x0) {\u000a        fts_lfree((FTSENT *)sp->fts_child);\u000a      }\u000a      if (in_ESI == 0x2000) {\u000a        pbVar1 = (byte *)((long)&sp->fts_options + 1);\u000a        *pbVar1 = *pbVar1 | 0x20;\u000a      }\u000a      if (((p_Var2->fts_level == 0) && (*p_Var2->fts_accpath != '/')) &&\u000a         ((*(byte *)&sp->fts_options & 4) == 0)) {\u000a        __fd = diropen(sp,\u000a                          "warning: Unix filenames usually don\u005c't contain slashes (though pathnames do).  That means that \u005c'%s %s\u005c' will probably evaluate to false all the time on this system.  You might find the \u005c'-wholename\u005c' test more useful, or perhaps \u005c'-samefile\u005c'.  Alternatively, if you are using GNU grep, you could use \u005c'find ... -print0 | grep -FzZ %s\u005c'."\u000a                          + 0x148);\u000a        if (__fd < 0) {\u000a          sp->fts_child = (_ftsent *)0x0;\u000a          return (FTSENT *)0x0;\u000a        }\u000a        pFVar5 = fts_build(sp);\u000a        *(FTSENT **)&sp->fts_child = pFVar5;\u000a        if ((*(byte *)((long)&sp->fts_options + 1) & 2) == 0) {\u000a          iVar3 = fchdir(__fd);\u000a          if (iVar3 != 0) {\u000a            iVar3 = *piVar4;\u000a            close(__fd);\u000a            *piVar4 = iVar3;\u000a            return (FTSENT *)0x0;\u000a          }\u000a          close(__fd);\u000a        }\u000a        else {\u000a          cwd_advance_fd(sp);\u000a        }\u000a        return (FTSENT *)sp->fts_child;\u000a      }\u000a      pFVar5 = fts_build(sp);\u000a      *(FTSENT **)&sp->fts_child = pFVar5;\u000a      return pFVar5;\u000a    }\u000a  }\u000a  else {\u000a    *piVar4 = 0x16;\u000a  }\u000a  return (FTSENT *)0x0;\u000a}\u000a\u000a
p4308
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV EBP,ESI\nMOV RBX,RDI\nCALL 0x00402770\nMOV R14,RAX\nMOV EAX,EBP\nOR EAX,0x2000\nCMP EAX,0x2000\nJNZ 0x00419c5f\nMOV R15,qword ptr [RBX]\nMOV dword ptr [R14],0x0\nTEST byte ptr [RBX + 0x49],0x40\nJNZ 0x00419c66\nMOVZX EAX,word ptr [R15 + 0x70]\nCMP EAX,0x1\nJZ 0x00419c71\nMOVZX EAX,AX\nCMP EAX,0x9\nJNZ 0x00419cf1\nMOV RAX,qword ptr [R15 + 0x10]\nJMP 0x00419c68\nMOV dword ptr [R14],0x16\nXOR EAX,EAX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RDI,qword ptr [RBX + 0x8]\nTEST RDI,RDI\nJZ 0x00419c7f\nCALL 0x00418860\nMOV R12D,0x1\nCMP EBP,0x2000\nJNZ 0x00419c97\nOR byte ptr [RBX + 0x49],0x20\nMOV R12D,0x2\nCMP qword ptr [R15 + 0x58],0x0\nJNZ 0x00419cf8\nMOV RAX,qword ptr [R15 + 0x30]\nCMP byte ptr [RAX],0x2f\nJZ 0x00419cf8\nTEST byte ptr [RBX + 0x48],0x4\nJNZ 0x00419cf8\nMOV ESI,0x4217ea\nMOV RDI,RBX\nCALL 0x00418800\nMOV R15D,EAX\nTEST R15D,R15D\nJS 0x00419d0c\nMOV RDI,RBX\nMOV ESI,R12D\nCALL 0x004191f0\nMOV qword ptr [RBX + 0x8],RAX\nTEST byte ptr [RBX + 0x49],0x2\nJNZ 0x00419d1b\nMOV EDI,R15D\nCALL 0x00402d10\nTEST EAX,EAX\nJZ 0x00419d2d\nMOV EBX,dword ptr [R14]\nMOV EDI,R15D\nCALL 0x00402ac0\nMOV dword ptr [R14],EBX\nXOR EAX,EAX\nJMP 0x00419c68\nMOV RDI,RBX\nMOV ESI,R12D\nCALL 0x004191f0\nMOV qword ptr [RBX + 0x8],RAX\nJMP 0x00419c68\nMOV qword ptr [RBX + 0x8],0x0\nXOR EAX,EAX\nJMP 0x00419c68\nMOV EDX,0x1\nMOV RDI,RBX\nMOV ESI,R15D\nCALL 0x00419b90\nJMP 0x00419d35\nMOV EDI,R15D\nCALL 0x00402ac0\nMOV RAX,qword ptr [RBX + 0x8]\nJMP 0x00419c68\n'
p4309
S'55\n41 57\n41 56\n41 54\n53\n89 f5\n48 89 fb\ne8 4e 8b fe ff\n49 89 c6\n89 e8\n0d 00 20 00 00\n3d 00 20 00 00\n75 2c\n4c 8b 3b\n41 c7 06 00 00 00 00\nf6 43 49 40\n75 23\n41 0f b7 47 70\n83 f8 01\n74 24\n0f b7 c0\n83 f8 09\n0f 85 98 00 00 00\n49 8b 47 10\neb 09\n41 c7 06 16 00 00 00\n31 c0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n48 8b 7b 08\n48 85 ff\n74 05\ne8 e1 eb ff ff\n41 bc 01 00 00 00\n81 fd 00 20 00 00\n75 0a\n80 4b 49 20\n41 bc 02 00 00 00\n49 83 7f 58 00\n75 5a\n49 8b 47 30\n80 38 2f\n74 51\nf6 43 48 04\n75 4b\nbe ea 17 42 00\n48 89 df\ne8 46 eb ff ff\n41 89 c7\n45 85 ff\n78 4a\n48 89 df\n44 89 e6\ne8 23 f5 ff ff\n48 89 43 08\nf6 43 49 02\n75 44\n44 89 ff\ne8 31 90 fe ff\n85 c0\n74 4a\n41 8b 1e\n44 89 ff\ne8 d2 8d fe ff\n41 89 1e\n31 c0\ne9 70 ff ff ff\n48 89 df\n44 89 e6\ne8 ed f4 ff ff\n48 89 43 08\ne9 5c ff ff ff\n48 c7 43 08 00 00 00 00\n31 c0\ne9 4d ff ff ff\nba 01 00 00 00\n48 89 df\n44 89 fe\ne8 65 fe ff ff\neb 08\n44 89 ff\ne8 8b 8d fe ff\n48 8b 43 08\ne9 2a ff ff ff\n'
p4310
S'.text:0000000000419c10\n.text:0000000000419c11\n.text:0000000000419c13\n.text:0000000000419c15\n.text:0000000000419c17\n.text:0000000000419c18\n.text:0000000000419c1a\n.text:0000000000419c1d\n.text:0000000000419c22\n.text:0000000000419c25\n.text:0000000000419c27\n.text:0000000000419c2c\n.text:0000000000419c31\n.text:0000000000419c33\n.text:0000000000419c36\n.text:0000000000419c3d\n.text:0000000000419c41\n.text:0000000000419c43\n.text:0000000000419c48\n.text:0000000000419c4b\n.text:0000000000419c4d\n.text:0000000000419c50\n.text:0000000000419c53\n.text:0000000000419c59\n.text:0000000000419c5d\n.text:0000000000419c5f\n.text:0000000000419c66\n.text:0000000000419c68\n.text:0000000000419c69\n.text:0000000000419c6b\n.text:0000000000419c6d\n.text:0000000000419c6f\n.text:0000000000419c70\n.text:0000000000419c71\n.text:0000000000419c75\n.text:0000000000419c78\n.text:0000000000419c7a\n.text:0000000000419c7f\n.text:0000000000419c85\n.text:0000000000419c8b\n.text:0000000000419c8d\n.text:0000000000419c91\n.text:0000000000419c97\n.text:0000000000419c9c\n.text:0000000000419c9e\n.text:0000000000419ca2\n.text:0000000000419ca5\n.text:0000000000419ca7\n.text:0000000000419cab\n.text:0000000000419cad\n.text:0000000000419cb2\n.text:0000000000419cb5\n.text:0000000000419cba\n.text:0000000000419cbd\n.text:0000000000419cc0\n.text:0000000000419cc2\n.text:0000000000419cc5\n.text:0000000000419cc8\n.text:0000000000419ccd\n.text:0000000000419cd1\n.text:0000000000419cd5\n.text:0000000000419cd7\n.text:0000000000419cda\n.text:0000000000419cdf\n.text:0000000000419ce1\n.text:0000000000419ce3\n.text:0000000000419ce6\n.text:0000000000419ce9\n.text:0000000000419cee\n.text:0000000000419cf1\n.text:0000000000419cf3\n.text:0000000000419cf8\n.text:0000000000419cfb\n.text:0000000000419cfe\n.text:0000000000419d03\n.text:0000000000419d07\n.text:0000000000419d0c\n.text:0000000000419d14\n.text:0000000000419d16\n.text:0000000000419d1b\n.text:0000000000419d20\n.text:0000000000419d23\n.text:0000000000419d26\n.text:0000000000419d2b\n.text:0000000000419d2d\n.text:0000000000419d30\n.text:0000000000419d35\n.text:0000000000419d39\n'
p4311
tp4312
sS'parse_iregex'
p4313
(S'\n__stdcall parse_iregex(parser_table * entry, char * * argv, int * arg_ptr)\n'
p4314
V\u000a_Bool parse_iregex(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = insert_regex(argv,arg_ptr,entry);\u000a  return _Var1;\u000a}\u000a\u000a
p4315
S'MOV RAX,RDI\nMOV ECX,dword ptr [0x0062f09c]\nOR ECX,0x400000\nMOV RDI,RSI\nMOV RSI,RDX\nMOV RDX,RAX\nJMP 0x0040d6d0\n'
p4316
S'48 89 f8\n8b 0d e3 36 22 00\n81 c9 00 00 40 00\n48 89 f7\n48 89 d6\n48 89 c2\ne9 03 1d 00 00\n'
p4317
S'.text:000000000040b9b0\n.text:000000000040b9b3\n.text:000000000040b9b9\n.text:000000000040b9bf\n.text:000000000040b9c2\n.text:000000000040b9c5\n.text:000000000040b9c8\n'
p4318
tp4319
sS'safe_atoi'
p4320
(S'\n__stdcall safe_atoi(char * s)\n'
p4321
V\u000aint safe_atoi(char *s)\u000a\u000a{\u000a  uint uVar1;\u000a  char *in_RAX;\u000a  uint *puVar2;\u000a  long lVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  char *pcVar6;\u000a  undefined *puVar7;\u000a  ulong uVar8;\u000a  char *local_38;\u000a  \u000a  local_38 = in_RAX;\u000a  puVar2 = (uint *)__errno_location();\u000a  *puVar2 = 0;\u000a  lVar3 = strtol(s,&local_38,10);\u000a  if (lVar3 + 0x8000000000000001U < 2) {\u000a    error(1,(ulong)*puVar2,&DAT_0042542f,s);\u000a  }\u000a  if (lVar3 - 0x80000000U >> 0x20 == 0) {\u000a    if (*local_38 != 0) {\u000a      uVar1 = *puVar2;\u000a      uVar4 = dcgettext(0,"Unexpected suffix %s on %s",5);\u000a      pcVar5 = quotearg_n_style((char *)0x0);\u000a      pcVar6 = quotearg_n_style((char *)0x1);\u000a      error(1,(ulong)uVar1,uVar4,pcVar5,pcVar6);\u000a      goto LAB_0040fb22;\u000a    }\u000a    if (local_38 != s) goto LAB_0040fb22;\u000a    uVar1 = *puVar2;\u000a    puVar7 = (undefined *)dcgettext(0,"Expected an integer: %s",5);\u000a    s = quotearg_n_style((char *)0x0);\u000a    uVar8 = (ulong)uVar1;\u000a  }\u000a  else {\u000a    *puVar2 = 0x22;\u000a    uVar8 = 0x22;\u000a    puVar7 = &DAT_0042542f;\u000a  }\u000a  error(1,uVar8,puVar7,s);\u000aLAB_0040fb22:\u000a  return (int)lVar3;\u000a}\u000a\u000a
p4322
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15D,ESI\nMOV RBX,RDI\nCALL 0x00402770\nMOV RBP,RAX\nMOV dword ptr [RBP],0x0\nMOV RSI,RSP\nMOV EDX,0xa\nMOV RDI,RBX\nCALL 0x00402bc0\nMOV R14,RAX\nMOV RAX,-0x7fffffffffffffff\nADD RAX,R14\nCMP RAX,0x1\nJA 0x0040fa8d\nMOV ESI,dword ptr [RBP]\nMOV EDI,0x1\nMOV EDX,0x42542f\nXOR EAX,EAX\nMOV RCX,RBX\nCALL 0x00402d90\nMOV RAX,R14\nSUB RAX,0x80000000\nSHR RAX,0x20\nJZ 0x0040fabe\nMOV dword ptr [RBP],0x22\nMOV EDI,0x1\nMOV ESI,0x22\nMOV EDX,0x42542f\nXOR EAX,EAX\nMOV RCX,RBX\nCALL 0x00402d90\nJMP 0x0040fb22\nMOV RAX,qword ptr [RSP]\nCMP byte ptr [RAX],0x0\nJZ 0x0040fb1d\nMOV R12D,dword ptr [RBP]\nXOR EDI,EDI\nMOV ESI,0x42268d\nMOV EDX,0x5\nCALL 0x00402910\nMOV R13,RAX\nMOV RDX,qword ptr [RSP]\nXOR EDI,EDI\nMOV ESI,R15D\nCALL 0x00416290\nMOV RBP,RAX\nMOV EDI,0x1\nMOV ESI,R15D\nMOV RDX,RBX\nCALL 0x00416290\nMOV RBX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,R12D\nMOV RDX,R13\nMOV RCX,RBP\nMOV R8,RBX\nCALL 0x00402d90\nJMP 0x0040fb22\nCMP RAX,RBX\nJZ 0x0040fb34\nMOV EAX,R14D\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV R12D,dword ptr [RBP]\nXOR EDI,EDI\nMOV ESI,0x4226a8\nMOV EDX,0x5\nCALL 0x00402910\nMOV RBP,RAX\nXOR EDI,EDI\nMOV ESI,R15D\nMOV RDX,RBX\nCALL 0x00416290\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,R12D\nMOV RDX,RBP\nJMP 0x0040fab7\n'
p4323
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n41 89 f7\n48 89 fb\ne8 2a 2d ff ff\n48 89 c5\nc7 45 00 00 00 00 00\n48 89 e6\nba 0a 00 00 00\n48 89 df\ne8 60 31 ff ff\n49 89 c6\n48 b8 01 00 00 00 00 00 00 80\n4c 01 f0\n48 83 f8 01\n77 17\n8b 75 00\nbf 01 00 00 00\nba 2f 54 42 00\n31 c0\n48 89 d9\ne8 03 33 ff ff\n4c 89 f0\n48 2d 00 00 00 80\n48 c1 e8 20\n74 22\nc7 45 00 22 00 00 00\nbf 01 00 00 00\nbe 22 00 00 00\nba 2f 54 42 00\n31 c0\n48 89 d9\ne8 d4 32 ff ff\neb 64\n48 8b 04 24\n80 38 00\n74 56\n44 8b 65 00\n31 ff\nbe 8d 26 42 00\nba 05 00 00 00\ne8 34 2e ff ff\n49 89 c5\n48 8b 14 24\n31 ff\n44 89 fe\ne8 a3 67 00 00\n48 89 c5\nbf 01 00 00 00\n44 89 fe\n48 89 da\ne8 90 67 00 00\n48 89 c3\nbf 01 00 00 00\n31 c0\n44 89 e6\n4c 89 ea\n48 89 e9\n49 89 d8\ne8 75 32 ff ff\neb 05\n48 39 d8\n74 12\n44 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n44 8b 65 00\n31 ff\nbe a8 26 42 00\nba 05 00 00 00\ne8 c7 2d ff ff\n48 89 c5\n31 ff\n44 89 fe\n48 89 da\ne8 37 67 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n44 89 e6\n48 89 ea\ne9 49 ff ff ff\n'
p4324
S'.text:000000000040fa30\n.text:000000000040fa31\n.text:000000000040fa33\n.text:000000000040fa35\n.text:000000000040fa37\n.text:000000000040fa39\n.text:000000000040fa3a\n.text:000000000040fa3b\n.text:000000000040fa3e\n.text:000000000040fa41\n.text:000000000040fa46\n.text:000000000040fa49\n.text:000000000040fa50\n.text:000000000040fa53\n.text:000000000040fa58\n.text:000000000040fa5b\n.text:000000000040fa60\n.text:000000000040fa63\n.text:000000000040fa6d\n.text:000000000040fa70\n.text:000000000040fa74\n.text:000000000040fa76\n.text:000000000040fa79\n.text:000000000040fa7e\n.text:000000000040fa83\n.text:000000000040fa85\n.text:000000000040fa88\n.text:000000000040fa8d\n.text:000000000040fa90\n.text:000000000040fa96\n.text:000000000040fa9a\n.text:000000000040fa9c\n.text:000000000040faa3\n.text:000000000040faa8\n.text:000000000040faad\n.text:000000000040fab2\n.text:000000000040fab4\n.text:000000000040fab7\n.text:000000000040fabc\n.text:000000000040fabe\n.text:000000000040fac2\n.text:000000000040fac5\n.text:000000000040fac7\n.text:000000000040facb\n.text:000000000040facd\n.text:000000000040fad2\n.text:000000000040fad7\n.text:000000000040fadc\n.text:000000000040fadf\n.text:000000000040fae3\n.text:000000000040fae5\n.text:000000000040fae8\n.text:000000000040faed\n.text:000000000040faf0\n.text:000000000040faf5\n.text:000000000040faf8\n.text:000000000040fafb\n.text:000000000040fb00\n.text:000000000040fb03\n.text:000000000040fb08\n.text:000000000040fb0a\n.text:000000000040fb0d\n.text:000000000040fb10\n.text:000000000040fb13\n.text:000000000040fb16\n.text:000000000040fb1b\n.text:000000000040fb1d\n.text:000000000040fb20\n.text:000000000040fb22\n.text:000000000040fb25\n.text:000000000040fb29\n.text:000000000040fb2a\n.text:000000000040fb2c\n.text:000000000040fb2e\n.text:000000000040fb30\n.text:000000000040fb32\n.text:000000000040fb33\n.text:000000000040fb34\n.text:000000000040fb38\n.text:000000000040fb3a\n.text:000000000040fb3f\n.text:000000000040fb44\n.text:000000000040fb49\n.text:000000000040fb4c\n.text:000000000040fb4e\n.text:000000000040fb51\n.text:000000000040fb54\n.text:000000000040fb59\n.text:000000000040fb5c\n.text:000000000040fb61\n.text:000000000040fb63\n.text:000000000040fb66\n.text:000000000040fb69\n'
p4325
tp4326
sS'pred_ctime'
p4327
(S'\n__stdcall pred_ctime(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p4328
V\u000a_Bool pred_ctime(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  timespec tVar2;\u000a  \u000a  tVar2 = get_stat_ctime(stat_buf);\u000a  _Var1 = pred_timewindow(SUB168((undefined  [16])tVar2,0));\u000a  return _Var1;\u000a}\u000a\u000a
p4329
S'PUSH RBX\nMOV RBX,RDX\nMOV RDI,RSI\nCALL 0x00416c80\nMOV ECX,0x15180\nMOV RDI,RAX\nMOV RSI,RDX\nMOV RDX,RBX\nPOP RBX\nJMP 0x00404a30\n'
p4330
S'53\n48 89 d3\n48 89 f7\ne8 64 2e 01 00\nb9 80 51 01 00\n48 89 c7\n48 89 d6\n48 89 da\n5b\ne9 00 0c 00 00\n'
p4331
S'.text:0000000000403e10\n.text:0000000000403e11\n.text:0000000000403e14\n.text:0000000000403e17\n.text:0000000000403e1c\n.text:0000000000403e21\n.text:0000000000403e24\n.text:0000000000403e27\n.text:0000000000403e2a\n.text:0000000000403e2b\n'
p4332
tp4333
sS'get_info'
p4334
(S'\n__stdcall get_info(char * pathname, stat * p, predicate * pred_ptr)\n'
p4335
V\u000aint get_info(char *pathname,stat *p,predicate *pred_ptr)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  \u000a  if (((pred_ptr->need_stat != false) ||\u000a      ((pred_ptr->need_type != false && (state.have_type == false)))) ||\u000a     ((iVar2 = 0, pred_ptr->need_inum != false &&\u000a      (((state.have_type == false || (p->st_ino == 0)) || ((p->st_mode & 0xf000) == 0x4000)))))) {\u000a    iVar1 = get_statinfo(pathname,state.rel_pathname,p);\u000a    iVar2 = -1;\u000a    if (iVar1 == 0) {\u000a      if ((pred_ptr->need_type != false) && (state.have_type == false)) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("state.have_type","util.c",0x14c,\u000a                      "int get_info(const char *, struct stat *, struct predicate *)");\u000a      }\u000a      iVar2 = 0;\u000a      if ((pred_ptr->need_inum != false) && (iVar2 = 0, p->st_ino == 0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("p->st_ino","util.c",0x150,\u000a                      "int get_info(const char *, struct stat *, struct predicate *)");\u000a      }\u000a    }\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p4336
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV R14,RSI\nCMP byte ptr [RBX + 0x1a],0x0\nJNZ 0x00407af0\nMOV CL,byte ptr [0x0062f005]\nCMP byte ptr [RBX + 0x1b],0x0\nJZ 0x00407b42\nTEST CL,CL\nJNZ 0x00407b42\nMOV RSI,qword ptr [0x0062f010]\nMOV RDX,R14\nCALL 0x004079e0\nMOV ECX,EAX\nMOV EAX,0xffffffff\nTEST ECX,ECX\nJNZ 0x00407b68\nCMP byte ptr [RBX + 0x1b],0x0\nJZ 0x00407b1a\nMOV AL,byte ptr [0x0062f005]\nTEST AL,AL\nJZ 0x00407b70\nXOR EAX,EAX\nCMP byte ptr [RBX + 0x1c],0x0\nJZ 0x00407b68\nCMP qword ptr [R14 + 0x8],0x0\nJNZ 0x00407b68\nMOV EDI,0x41e6d9\nMOV ESI,0x41e01b\nMOV EDX,0x150\nMOV ECX,0x41e69b\nCALL 0x00402a40\nXOR EAX,EAX\nCMP byte ptr [RBX + 0x1c],0x0\nJZ 0x00407b68\nTEST CL,CL\nJZ 0x00407af0\nMOV RCX,qword ptr [R14 + 0x8]\nTEST RCX,RCX\nJZ 0x00407af0\nMOV ECX,0xf000\nAND ECX,dword ptr [R14 + 0x18]\nCMP ECX,0x4000\nJZ 0x00407af0\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV EDI,0x41cf2c\nMOV ESI,0x41e01b\nMOV EDX,0x14c\nMOV ECX,0x41e69b\nCALL 0x00402a40\n'
p4337
S'41 56\n53\n50\n48 89 d3\n49 89 f6\n80 7b 1a 00\n75 10\n8a 0d 1f 75 22 00\n80 7b 1b 00\n74 56\n84 c9\n75 52\n48 8b 35 19 75 22 00\n4c 89 f2\ne8 e1 fe ff ff\n89 c1\nb8 ff ff ff ff\n85 c9\n75 5e\n80 7b 1b 00\n74 0a\n8a 05 ef 74 22 00\n84 c0\n74 56\n31 c0\n80 7b 1c 00\n74 46\n49 83 7e 08 00\n75 3f\nbf d9 e6 41 00\nbe 1b e0 41 00\nba 50 01 00 00\nb9 9b e6 41 00\ne8 fe ae ff ff\n31 c0\n80 7b 1c 00\n74 1e\n84 c9\n74 a2\n49 8b 4e 08\n48 85 c9\n74 99\nb9 00 f0 00 00\n41 23 4e 18\n81 f9 00 40 00 00\n74 88\n48 83 c4 08\n5b\n41 5e\nc3\nbf 2c cf 41 00\nbe 1b e0 41 00\nba 4c 01 00 00\nb9 9b e6 41 00\ne8 b7 ae ff ff\n'
p4338
S'.text:0000000000407ad0\n.text:0000000000407ad2\n.text:0000000000407ad3\n.text:0000000000407ad4\n.text:0000000000407ad7\n.text:0000000000407ada\n.text:0000000000407ade\n.text:0000000000407ae0\n.text:0000000000407ae6\n.text:0000000000407aea\n.text:0000000000407aec\n.text:0000000000407aee\n.text:0000000000407af0\n.text:0000000000407af7\n.text:0000000000407afa\n.text:0000000000407aff\n.text:0000000000407b01\n.text:0000000000407b06\n.text:0000000000407b08\n.text:0000000000407b0a\n.text:0000000000407b0e\n.text:0000000000407b10\n.text:0000000000407b16\n.text:0000000000407b18\n.text:0000000000407b1a\n.text:0000000000407b1c\n.text:0000000000407b20\n.text:0000000000407b22\n.text:0000000000407b27\n.text:0000000000407b29\n.text:0000000000407b2e\n.text:0000000000407b33\n.text:0000000000407b38\n.text:0000000000407b3d\n.text:0000000000407b42\n.text:0000000000407b44\n.text:0000000000407b48\n.text:0000000000407b4a\n.text:0000000000407b4c\n.text:0000000000407b4e\n.text:0000000000407b52\n.text:0000000000407b55\n.text:0000000000407b57\n.text:0000000000407b5c\n.text:0000000000407b60\n.text:0000000000407b66\n.text:0000000000407b68\n.text:0000000000407b6c\n.text:0000000000407b6d\n.text:0000000000407b6f\n.text:0000000000407b70\n.text:0000000000407b75\n.text:0000000000407b7a\n.text:0000000000407b7f\n.text:0000000000407b84\n'
p4339
tp4340
sS'pred_openparen'
p4341
(S'\n__stdcall pred_openparen(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p4342
V\u000a_Bool pred_openparen(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  return true;\u000a}\u000a\u000a
p4343
S'MOV AL,0x1\nRET\n'
p4344
S'b0 01\nc3\n'
p4345
S'.text:00000000004044f0\n.text:00000000004044f2\n'
p4346
tp4347
sS'endpwent'
p4348
(S'\n__stdcall endpwent()\n'
p4349
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid endpwent(void)\u000a\u000a{\u000a  (*(code *)PTR_endpwent_0062d308)();\u000a  return;\u000a}\u000a\u000a
p4350
S'JMP qword ptr [0x0062d308]\n'
p4351
S'ff 25 32 a6 22 00\n'
p4352
S'.plt:0000000000402cd0\n'
p4353
tp4354
sS'access'
p4355
(S'\n__stdcall access(char * __name, int __type)\n'
p4356
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint access(char *__name,int __type)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_access_0062d388)();\u000a  return iVar1;\u000a}\u000a\u000a
p4357
S'JMP qword ptr [0x0062d388]\n'
p4358
S'ff 25 b2 a5 22 00\n'
p4359
S'.plt:0000000000402dd0\n'
p4360
tp4361
sS'free_file_system_list'
p4362
(S'\n__stdcall free_file_system_list(mount_entry * p)\n'
p4363
V\u000avoid free_file_system_list(mount_entry *p)\u000a\u000a{\u000a  mount_entry *pmVar1;\u000a  \u000a  if (p != (mount_entry *)0x0) {\u000a    do {\u000a      pmVar1 = p->me_next;\u000a      free_mount_entry(p);\u000a      p = pmVar1;\u000a    } while (pmVar1 != (mount_entry *)0x0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p4364
S'PUSH RBX\nTEST RDI,RDI\nJZ 0x0040a4d1\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RBX,qword ptr [RDI + 0x30]\nCALL 0x0041ae90\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x0040a4c0\nPOP RBX\nRET\n'
p4365
S'53\n48 85 ff\n74 1b\n66 2e 0f 1f 84 00 00 00 00 00\n48 8b 5f 30\ne8 c7 09 01 00\n48 85 db\n48 89 df\n75 ef\n5b\nc3\n'
p4366
S'.text:000000000040a4b0\n.text:000000000040a4b1\n.text:000000000040a4b4\n.text:000000000040a4b6\n.text:000000000040a4c0\n.text:000000000040a4c4\n.text:000000000040a4c9\n.text:000000000040a4cc\n.text:000000000040a4cf\n.text:000000000040a4d1\n.text:000000000040a4d2\n'
p4367
tp4368
sS'set_cloexec_flag'
p4369
(S'\n__stdcall set_cloexec_flag()\n'
p4370
V\u000aint set_cloexec_flag(void)\u000a\u000a{\u000a  uint uVar1;\u000a  uint uVar2;\u000a  int iVar3;\u000a  char in_SIL;\u000a  ulong in_RDI;\u000a  \u000a  iVar3 = 0;\u000a  uVar2 = rpl_fcntl(in_RDI,1,0);\u000a  if ((int)uVar2 < 0) {\u000a    iVar3 = -1;\u000a  }\u000a  else {\u000a    uVar1 = uVar2 & 0xfffffffe;\u000a    if (in_SIL != 0) {\u000a      uVar1 = uVar2 | 1;\u000a    }\u000a    if ((uVar2 != uVar1) && (iVar3 = rpl_fcntl(in_RDI & 0xffffffff,2), iVar3 != -1)) {\u000a      iVar3 = 0;\u000a    }\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p4371
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV EBX,EDI\nXOR EBP,EBP\nMOV ESI,0x1\nXOR EDX,EDX\nXOR EAX,EAX\nCALL 0x00417de0\nTEST EAX,EAX\nJS 0x0040fe19\nMOV ECX,EAX\nOR ECX,0x1\nMOV EDX,EAX\nAND EDX,0xfffffffe\nTEST R14B,R14B\nCMOVNZ EDX,ECX\nCMP EAX,EDX\nJZ 0x0040fe1e\nXOR EBP,EBP\nMOV ESI,0x2\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00417de0\nCMP EAX,-0x1\nCMOVNZ EAX,EBP\nJMP 0x0040fe20\nMOV EBP,0xffffffff\nMOV EAX,EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p4372
S'55\n41 56\n53\n41 89 f6\n89 fb\n31 ed\nbe 01 00 00 00\n31 d2\n31 c0\ne8 f7 7f 00 00\n85 c0\n78 2c\n89 c1\n83 c9 01\n89 c2\n83 e2 fe\n45 84 f6\n0f 45 d1\n39 d0\n74 1d\n31 ed\nbe 02 00 00 00\n31 c0\n89 df\ne8 cf 7f 00 00\n83 f8 ff\n0f 45 c5\neb 07\nbd ff ff ff ff\n89 e8\n5b\n41 5e\n5d\nc3\n'
p4373
S'.text:000000000040fdd0\n.text:000000000040fdd1\n.text:000000000040fdd3\n.text:000000000040fdd4\n.text:000000000040fdd7\n.text:000000000040fdd9\n.text:000000000040fddb\n.text:000000000040fde0\n.text:000000000040fde2\n.text:000000000040fde4\n.text:000000000040fde9\n.text:000000000040fdeb\n.text:000000000040fded\n.text:000000000040fdef\n.text:000000000040fdf2\n.text:000000000040fdf4\n.text:000000000040fdf7\n.text:000000000040fdfa\n.text:000000000040fdfd\n.text:000000000040fdff\n.text:000000000040fe01\n.text:000000000040fe03\n.text:000000000040fe08\n.text:000000000040fe0a\n.text:000000000040fe0c\n.text:000000000040fe11\n.text:000000000040fe14\n.text:000000000040fe17\n.text:000000000040fe19\n.text:000000000040fe1e\n.text:000000000040fe20\n.text:000000000040fe21\n.text:000000000040fe23\n.text:000000000040fe24\n'
p4374
tp4375
sS'predicate_is_cost_free'
p4376
(S'\n__stdcall predicate_is_cost_free(predicate * p)\n'
p4377
V\u000a_Bool predicate_is_cost_free(predicate *p)\u000a\u000a{\u000a  _Bool (*pVar1)(char *,stat *,predicate *);\u000a  bool bVar2;\u000a  bool bVar3;\u000a  \u000a  pVar1 = p->pred_func;\u000a  bVar3 = true;\u000a  if ((((pVar1 != pred_ipath) && (pVar1 != pred_iname)) && (pVar1 != pred_name)) &&\u000a     (pVar1 != pred_path)) {\u000a    if (options.optimisation_level == 0) {\u000a      return false;\u000a    }\u000a    bVar2 = false;\u000a    bVar3 = false;\u000a    if (((pVar1 != pred_or) && (bVar3 = bVar2, pVar1 != pred_comma)) &&\u000a       ((bVar3 = bVar2, pVar1 != pred_and && (bVar3 = bVar2, pVar1 != pred_negate)))) {\u000a      bVar3 = p->p_cost == NeedsNothing;\u000a    }\u000a  }\u000a  return (_Bool)bVar3;\u000a}\u000a\u000a
p4378
S'MOV RCX,qword ptr [RDI]\nMOV EAX,0x4041e0\nCMP RCX,RAX\nMOV AL,0x1\nJZ 0x00407168\nMOV EDX,0x404170\nCMP RCX,RDX\nJZ 0x00407168\nMOV EDX,0x4042a0\nCMP RCX,RDX\nJZ 0x00407168\nMOV EDX,0x404550\nCMP RCX,RDX\nJZ 0x00407168\nCMP word ptr [0x0062f0a8],0x0\nJZ 0x00407169\nMOV EDX,0x404500\nXOR EAX,EAX\nCMP RCX,RDX\nJZ 0x00407168\nMOV EDX,0x403dd0\nCMP RCX,RDX\nJZ 0x00407168\nMOV EDX,0x403c90\nCMP RCX,RDX\nJZ 0x00407168\nMOV EDX,0x4042b0\nCMP RCX,RDX\nJZ 0x00407168\nCMP dword ptr [RDI + 0x20],0x0\nSETZ AL\nRET\nXOR EAX,EAX\nRET\n'
p4379
S'48 8b 0f\nb8 e0 41 40 00\n48 39 c1\nb0 01\n74 59\nba 70 41 40 00\n48 39 d1\n74 4f\nba a0 42 40 00\n48 39 d1\n74 45\nba 50 45 40 00\n48 39 d1\n74 3b\n66 83 3d 73 7f 22 00 00\n74 32\nba 00 45 40 00\n31 c0\n48 39 d1\n74 25\nba d0 3d 40 00\n48 39 d1\n74 1b\nba 90 3c 40 00\n48 39 d1\n74 11\nba b0 42 40 00\n48 39 d1\n74 07\n83 7f 20 00\n0f 94 c0\nc3\n31 c0\nc3\n'
p4380
S'.text:0000000000407100\n.text:0000000000407103\n.text:0000000000407108\n.text:000000000040710b\n.text:000000000040710d\n.text:000000000040710f\n.text:0000000000407114\n.text:0000000000407117\n.text:0000000000407119\n.text:000000000040711e\n.text:0000000000407121\n.text:0000000000407123\n.text:0000000000407128\n.text:000000000040712b\n.text:000000000040712d\n.text:0000000000407135\n.text:0000000000407137\n.text:000000000040713c\n.text:000000000040713e\n.text:0000000000407141\n.text:0000000000407143\n.text:0000000000407148\n.text:000000000040714b\n.text:000000000040714d\n.text:0000000000407152\n.text:0000000000407155\n.text:0000000000407157\n.text:000000000040715c\n.text:000000000040715f\n.text:0000000000407161\n.text:0000000000407165\n.text:0000000000407168\n.text:0000000000407169\n.text:000000000040716b\n'
p4381
tp4382
sS'parse_end_user_args'
p4383
(S'\n__stdcall parse_end_user_args(char * * args, predicate * last, predicate * predicates)\n'
p4384
V\u000avoid parse_end_user_args(char **args,predicate *last,predicate *predicates)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p4385
S'RET\n'
p4386
S'c3\n'
p4387
S'.text:000000000040a7e0\n'
p4388
tp4389
sS'quotearg_free'
p4390
(S'\n__stdcall quotearg_free()\n'
p4391
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p4392
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x0062dda8]\nCMP dword ptr [0x0062ddb0],0x2\nJC 0x0041603a\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00402710\nINC RBX\nMOV EAX,dword ptr [0x0062ddb0]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00416020\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x62e6d0\nCMP RDI,RAX\nJZ 0x00416063\nCALL 0x00402710\nMOV qword ptr [0x0062ddb8],0x100\nMOV qword ptr [0x0062ddc0],0x62e6d0\nMOV EAX,0x62ddb8\nCMP R14,RAX\nJZ 0x00416080\nMOV RDI,R14\nCALL 0x00402710\nMOV qword ptr [0x0062dda8],0x62ddb8\nMOV dword ptr [0x0062ddb0],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p4393
S'41 57\n41 56\n53\n4c 8b 35 9c 7d 21 00\n83 3d 9d 7d 21 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 e8 c6 fe ff\n48 ff c3\n8b 05 7f 7d 21 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 d0 e6 62 00\n48 39 c7\n74 1b\ne8 c3 c6 fe ff\n48 c7 05 60 7d 21 00 00 01 00 00\n48 c7 05 5d 7d 21 00 d0 e6 62 00\nb8 b8 dd 62 00\n49 39 c6\n74 13\n4c 89 f7\ne8 9b c6 fe ff\n48 c7 05 28 7d 21 00 b8 dd 62 00\nc7 05 26 7d 21 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p4394
S'.text:0000000000416000\n.text:0000000000416002\n.text:0000000000416004\n.text:0000000000416005\n.text:000000000041600c\n.text:0000000000416013\n.text:0000000000416015\n.text:0000000000416019\n.text:000000000041601e\n.text:0000000000416020\n.text:0000000000416023\n.text:0000000000416028\n.text:000000000041602b\n.text:0000000000416031\n.text:0000000000416035\n.text:0000000000416038\n.text:000000000041603a\n.text:000000000041603e\n.text:0000000000416043\n.text:0000000000416046\n.text:0000000000416048\n.text:000000000041604d\n.text:0000000000416058\n.text:0000000000416063\n.text:0000000000416068\n.text:000000000041606b\n.text:000000000041606d\n.text:0000000000416070\n.text:0000000000416075\n.text:0000000000416080\n.text:000000000041608a\n.text:000000000041608b\n.text:000000000041608d\n.text:000000000041608f\n'
p4395
tp4396
sS'quotearg_mem'
p4397
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p4398
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p4399
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00416260\n'
p4400
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p4401
S'.text:0000000000416280\n.text:0000000000416283\n.text:0000000000416286\n.text:0000000000416288\n.text:000000000041628b\n.text:000000000041628e\n'
p4402
tp4403
sS'free_cwd'
p4404
(S'\n__stdcall free_cwd(saved_cwd * cwd)\n'
p4405
V\u000avoid free_cwd(saved_cwd *cwd)\u000a\u000a{\u000a  if (-1 < cwd->desc) {\u000a    close(cwd->desc);\u000a  }\u000a  free(cwd->name);\u000a  return;\u000a}\u000a\u000a
p4406
S'PUSH RBX\nMOV RBX,RDI\nMOV EDI,dword ptr [RBX]\nTEST EDI,EDI\nJS 0x00416a1f\nCALL 0x00402ac0\nMOV RDI,qword ptr [RBX + 0x8]\nPOP RBX\nJMP 0x00402710\n'
p4407
S'53\n48 89 fb\n8b 3b\n85 ff\n78 05\ne8 a1 c0 fe ff\n48 8b 7b 08\n5b\ne9 e7 bc fe ff\n'
p4408
S'.text:0000000000416a10\n.text:0000000000416a11\n.text:0000000000416a14\n.text:0000000000416a16\n.text:0000000000416a18\n.text:0000000000416a1a\n.text:0000000000416a1f\n.text:0000000000416a23\n.text:0000000000416a24\n'
p4409
tp4410
sS'rotl32'
p4411
(S'\n__stdcall rotl32()\n'
p4412
V\u000auint32_t rotl32(void)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x1f;\u000a  return (uint32_t)(in_EDI << bVar1 | in_EDI >> 0x20 - bVar1);\u000a}\u000a\u000a
p4413
S'MOV ECX,ESI\nROL EDI,CL\nMOV EAX,EDI\nRET\n'
p4414
S'89 f1\nd3 c7\n89 f8\nc3\n'
p4415
S'.text:000000000041b880\n.text:000000000041b882\n.text:000000000041b884\n.text:000000000041b886\n'
p4416
tp4417
sS'free'
p4418
(S'\n__stdcall free(void * __ptr)\n'
p4419
V\u000a/* WARNING: Switch with 1 destination removed at 0x00402710 */\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p4420
S'JMP qword ptr [0x0062d028]\n'
p4421
S'ff 25 12 a9 22 00\n'
p4422
S'.plt:0000000000402710\n'
p4423
tp4424
sS'pred_fls'
p4425
(S'\n__stdcall pred_fls(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p4426
V\u000a_Bool pred_fls(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  list_file(pathname,(char *)(ulong)(uint)state.cwd_dir_fd,(stat *)state.rel_pathname,\u000a            (time_t)stat_buf,(FILE *)options.start_time.tv_sec);\u000a  return true;\u000a}\u000a\u000a
p4427
S'PUSH RAX\nMOV RAX,RDX\nMOV RCX,RSI\nMOV ESI,dword ptr [0x0062f018]\nMOV RDX,qword ptr [0x0062f010]\nMOV R8,qword ptr [0x0062f058]\nMOV R9D,dword ptr [0x0062f07c]\nMOVZX R10D,byte ptr [RAX + 0x28]\nPUSH qword ptr [RAX + 0x40]\nPUSH R10\nCALL 0x0040ed40\nADD RSP,0x10\nMOV AL,0x1\nPOP RCX\nRET\n'
p4428
S'50\n48 89 d0\n48 89 f1\n8b 35 fb a4 22 00\n48 8b 15 ec a4 22 00\n4c 8b 05 2d a5 22 00\n44 8b 0d 4a a5 22 00\n44 0f b6 50 28\nff 70 40\n41 52\ne8 ff a1 00 00\n48 83 c4 10\nb0 01\n59\nc3\n'
p4429
S'.text:0000000000404b10\n.text:0000000000404b11\n.text:0000000000404b14\n.text:0000000000404b17\n.text:0000000000404b1d\n.text:0000000000404b24\n.text:0000000000404b2b\n.text:0000000000404b32\n.text:0000000000404b37\n.text:0000000000404b3a\n.text:0000000000404b3c\n.text:0000000000404b41\n.text:0000000000404b45\n.text:0000000000404b47\n.text:0000000000404b48\n'
p4430
tp4431
sS'fopen'
p4432
(S'\n__stdcall fopen(char * __filename, char * __modes)\n'
p4433
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fopen(char *__filename,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fopen_0062d398)();\u000a  return pFVar1;\u000a}\u000a\u000a
p4434
S'JMP qword ptr [0x0062d398]\n'
p4435
S'ff 25 a2 a5 22 00\n'
p4436
S'.plt:0000000000402df0\n'
p4437
tp4438
sS'insert_depthspec'
p4439
(S'\n__stdcall insert_depthspec()\n'
p4440
V\u000a_Bool insert_depthspec(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  size_t sVar4;\u000a  undefined8 uVar5;\u000a  char *pcVar6;\u000a  int *in_RDX;\u000a  int *arg_ptr;\u000a  char **argv;\u000a  char *local_30;\u000a  \u000a  pcVar1 = argv[(long)*arg_ptr + -1];\u000a  _Var2 = collect_arg(argv,arg_ptr,&local_30);\u000a  if (_Var2 != false) {\u000a    sVar4 = strspn(local_30,"0123456789");\u000a    if ((0 < (int)sVar4) && (local_30[(long)(int)sVar4] == 0)) {\u000a      iVar3 = safe_atoi(local_30);\u000a      *in_RDX = iVar3;\u000a      if (-1 < iVar3) {\u000a        parse_noop();\u000a        return true;\u000a      }\u000a    }\u000a    uVar5 = dcgettext(0,"Expected a positive decimal integer argument to %s, but got %s",5);\u000a    pcVar6 = quotearg_n_style((char *)0x0);\u000a    error(1,0,uVar5,pcVar1,pcVar6);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p4441
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV R12,RDX\nMOV R15,RSI\nMOV RBX,RDI\nMOVSXD RAX,dword ptr [R15]\nMOV R14,qword ptr [RBX + RAX*0x8 + -0x8]\nLEA RDX,[RSP + 0x8]\nCALL 0x0040c7f0\nTEST AL,AL\nJZ 0x0040d85d\nMOV R13,qword ptr [RSP + 0x8]\nMOV ESI,0x421570\nMOV RDI,R13\nCALL 0x00402ad0\nTEST EAX,EAX\nJLE 0x0040d81c\nCDQE\nCMP byte ptr [R13 + RAX*0x1],0x0\nJZ 0x0040d86f\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x42185a\nMOV EDX,0x5\nCALL 0x00402910\nMOV R15,RAX\nMOV ESI,dword ptr [0x0062f0ac]\nMOV RDX,qword ptr [RSP + 0x8]\nXOR EDI,EDI\nCALL 0x00416290\nMOV R8,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R15\nMOV RCX,R14\nCALL 0x00402d90\nJMP 0x0040d85f\nXOR EBX,EBX\nMOV EAX,EBX\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\nMOV ESI,dword ptr [0x0062f0ac]\nMOV RDI,R13\nCALL 0x0040fa30\nMOV dword ptr [R12],EAX\nTEST EAX,EAX\nJS 0x0040d81c\nMOV RDI,RBX\nMOV RSI,R15\nCALL 0x0040ca00\nMOV BL,0x1\nJMP 0x0040d85f\n'
p4442
S'41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 10\n49 89 d4\n49 89 f7\n48 89 fb\n49 63 07\n4c 8b 74 c3 f8\n48 8d 54 24 08\ne8 f8 ef ff ff\n84 c0\n74 61\n4c 8b 6c 24 08\nbe 70 15 42 00\n4c 89 ef\ne8 c2 52 ff ff\n85 c0\n7e 0a\n48 98\n41 80 7c 05 00 00\n74 53\n31 db\n31 ff\nbe 5a 18 42 00\nba 05 00 00 00\ne8 e1 50 ff ff\n49 89 c7\n8b 35 74 18 22 00\n48 8b 54 24 08\n31 ff\ne8 4c 8a 00 00\n49 89 c0\nbf 01 00 00 00\n31 f6\n31 c0\n4c 89 fa\n4c 89 f1\ne8 35 55 ff ff\neb 02\n31 db\n89 d8\n48 83 c4 10\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n8b 35 37 18 22 00\n4c 89 ef\ne8 b3 21 00 00\n41 89 04 24\n85 c0\n78 97\n48 89 df\n4c 89 fe\ne8 70 f1 ff ff\nb3 01\neb cb\n'
p4443
S'.text:000000000040d7d0\n.text:000000000040d7d2\n.text:000000000040d7d4\n.text:000000000040d7d6\n.text:000000000040d7d8\n.text:000000000040d7d9\n.text:000000000040d7dd\n.text:000000000040d7e0\n.text:000000000040d7e3\n.text:000000000040d7e6\n.text:000000000040d7e9\n.text:000000000040d7ee\n.text:000000000040d7f3\n.text:000000000040d7f8\n.text:000000000040d7fa\n.text:000000000040d7fc\n.text:000000000040d801\n.text:000000000040d806\n.text:000000000040d809\n.text:000000000040d80e\n.text:000000000040d810\n.text:000000000040d812\n.text:000000000040d814\n.text:000000000040d81a\n.text:000000000040d81c\n.text:000000000040d81e\n.text:000000000040d820\n.text:000000000040d825\n.text:000000000040d82a\n.text:000000000040d82f\n.text:000000000040d832\n.text:000000000040d838\n.text:000000000040d83d\n.text:000000000040d83f\n.text:000000000040d844\n.text:000000000040d847\n.text:000000000040d84c\n.text:000000000040d84e\n.text:000000000040d850\n.text:000000000040d853\n.text:000000000040d856\n.text:000000000040d85b\n.text:000000000040d85d\n.text:000000000040d85f\n.text:000000000040d861\n.text:000000000040d865\n.text:000000000040d866\n.text:000000000040d868\n.text:000000000040d86a\n.text:000000000040d86c\n.text:000000000040d86e\n.text:000000000040d86f\n.text:000000000040d875\n.text:000000000040d878\n.text:000000000040d87d\n.text:000000000040d881\n.text:000000000040d883\n.text:000000000040d885\n.text:000000000040d888\n.text:000000000040d88b\n.text:000000000040d890\n.text:000000000040d892\n'
p4444
tp4445
sS'stat'
p4446
(S'\n__stdcall stat(char * __file, stat * __buf)\n'
p4447
V\u000aint stat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___xstat_0062d2b0)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p4448
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x00402c20\n'
p4449
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 80 67 fe ff\n'
p4450
S'.text:000000000041c490\n.text:000000000041c493\n.text:000000000041c496\n.text:000000000041c49b\n'
p4451
tp4452
sS'insert_fprint'
p4453
(S'\n__stdcall insert_fprint()\n'
p4454
V\u000a_Bool insert_fprint(void)\u000a\u000a{\u000a  undefined extraout_AL;\u000a  undefined extraout_AL_00;\u000a  undefined uVar1;\u000a  predicate *ppVar2;\u000a  char *arg;\u000a  parser_table *entry;\u000a  \u000a  ppVar2 = insert_primary(entry,arg);\u000a  if (arg == (char *)0x0) {\u000a    open_stdout((format_val *)ppVar2->args);\u000a    uVar1 = extraout_AL_00;\u000a  }\u000a  else {\u000a    open_output_file(arg,(format_val *)ppVar2->args);\u000a    uVar1 = extraout_AL;\u000a  }\u000a  ppVar2->no_default_print = true;\u000a  ppVar2->side_effects = true;\u000a  ppVar2->need_type = false;\u000a  ppVar2->need_stat = false;\u000a  ppVar2->est_success_rate = 1.00000000;\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p4455
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nCALL 0x00407730\nMOV RBX,RAX\nMOV RSI,RBX\nADD RSI,0x38\nTEST R14,R14\nJZ 0x0040d1d5\nMOV RDI,R14\nCALL 0x0040d0e0\nJMP 0x0040d1dd\nMOV RDI,RSI\nCALL 0x0040a980\nMOV byte ptr [RBX + 0x19],0x1\nMOV byte ptr [RBX + 0x18],0x1\nMOV byte ptr [RBX + 0x1b],0x0\nMOV byte ptr [RBX + 0x1a],0x0\nMOV dword ptr [RBX + 0x24],0x3f800000\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p4456
S'41 56\n53\n50\n49 89 f6\ne8 74 a5 ff ff\n48 89 c3\n48 89 de\n48 83 c6 38\n4d 85 f6\n74 0a\n4c 89 f7\ne8 0d ff ff ff\neb 08\n48 89 f7\ne8 a3 d7 ff ff\nc6 43 19 01\nc6 43 18 01\nc6 43 1b 00\nc6 43 1a 00\nc7 43 24 00 00 80 3f\n48 83 c4 08\n5b\n41 5e\nc3\n'
p4457
S'.text:000000000040d1b0\n.text:000000000040d1b2\n.text:000000000040d1b3\n.text:000000000040d1b4\n.text:000000000040d1b7\n.text:000000000040d1bc\n.text:000000000040d1bf\n.text:000000000040d1c2\n.text:000000000040d1c6\n.text:000000000040d1c9\n.text:000000000040d1cb\n.text:000000000040d1ce\n.text:000000000040d1d3\n.text:000000000040d1d5\n.text:000000000040d1d8\n.text:000000000040d1dd\n.text:000000000040d1e1\n.text:000000000040d1e5\n.text:000000000040d1e9\n.text:000000000040d1ed\n.text:000000000040d1f4\n.text:000000000040d1f8\n.text:000000000040d1f9\n.text:000000000040d1fb\n'
p4458
tp4459
sS'fstat'
p4460
(S'\n__stdcall fstat(int __fd, stat * __buf)\n'
p4461
V\u000aint fstat(int __fd,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___fxstat_0062d300)(1,(ulong)(uint)__fd,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p4462
S'MOV RDX,RSI\nMOV ESI,EDI\nMOV EDI,0x1\nJMP 0x00402cc0\n'
p4463
S'48 89 f2\n89 fe\nbf 01 00 00 00\ne9 11 68 fe ff\n'
p4464
S'.text:000000000041c4a0\n.text:000000000041c4a3\n.text:000000000041c4a5\n.text:000000000041c4aa\n'
p4465
tp4466
sS'launch'
p4467
(S'\n__stdcall launch(buildcmd_control * ctl, void * usercontext, char * * argv)\n'
p4468
V\u000aint launch(buildcmd_control *ctl,void *usercontext,char **argv)\u000a\u000a{\u000a  char cVar1;\u000a  uint uVar2;\u000a  _Bool _Var3;\u000a  __pid_t __pid;\u000a  __pid_t _Var4;\u000a  uint *puVar5;\u000a  undefined8 uVar6;\u000a  char *pcVar7;\u000a  char **argv_00;\u000a  \u000a  rpl_fflush(stdout);\u000a  rpl_fflush(stderr);\u000a  if (launch_first_time == 0) {\u000a    launch_first_time = 1;\u000a    signal(0x11,(__sighandler_t)0x0);\u000a  }\u000a  __pid = fork();\u000a  if (__pid == -1) {\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar2 = *puVar5;\u000a    uVar6 = dcgettext(0,"cannot fork",5);\u000a    error(1,(ulong)uVar2,uVar6);\u000a  }\u000a  else {\u000a    if (__pid == 0) {\u000a      if (*(long *)((long)usercontext + 0xc0) == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("NULL != execp->wd_for_exec","exec.c",0x13a,\u000a                      "int launch(struct buildcmd_control *, void *, int, char **)");\u000a      }\u000a      _Var3 = prep_child_for_exec((saved_cwd *)(ulong)*(byte *)((long)usercontext + 0xbc));\u000a      if (_Var3 != false) {\u000a        _Var3 = fd_leak_check_is_enabled();\u000a        if (_Var3 != false) {\u000a          complain_about_leaky_fds();\u000a        }\u000a        _Var3 = bc_args_exceed_testing_limit(argv_00);\u000a        puVar5 = (uint *)__errno_location();\u000a        if (_Var3 == false) {\u000a          execvp(*argv_00,argv_00);\u000a        }\u000a        else {\u000a          *puVar5 = 7;\u000a        }\u000a        uVar2 = *puVar5;\u000a        pcVar7 = safely_quote_err_filename((char *)0x0);\u000a        error(0,(ulong)uVar2,&DAT_0042542f,pcVar7);\u000a                    /* WARNING: Subroutine does not return */\u000a        _exit(1);\u000a      }\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(1);\u000a    }\u000a  }\u000a  while (_Var4 = waitpid(__pid,(int *)(uint *)((long)usercontext + 200),0), _Var4 == -1) {\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar2 = *puVar5;\u000a    if (uVar2 != 4) {\u000a      uVar6 = dcgettext(0,"error waiting for %s",5);\u000a      pcVar7 = safely_quote_err_filename((char *)0x0);\u000a      error(0,(ulong)uVar2,uVar6,pcVar7);\u000a      state.exit_status = 1;\u000a      return 0;\u000a    }\u000a  }\u000a  uVar2 = *(uint *)((long)usercontext + 200);\u000a  if ((int)((uVar2 & 0x7f) * 0x1000000 + 0x1000000) >> 0x19 < 1) {\u000a    if ((char)((ulong)uVar2 >> 8) == 0) {\u000a      return 1;\u000a    }\u000a    cVar1 = *(char *)usercontext;\u000a  }\u000a  else {\u000a    uVar6 = dcgettext(0,"%s terminated by signal %d",5);\u000a    pcVar7 = quotearg_n_style((char *)0x0);\u000a    error(0,0,uVar6,pcVar7,(ulong)(*(uint *)((long)usercontext + 200) & 0x7f));\u000a    cVar1 = *(char *)usercontext;\u000a  }\u000a  if (cVar1 != 0) {\u000a    state.exit_status = 1;\u000a    return 1;\u000a  }\u000a  return 1;\u000a}\u000a\u000a
p4469
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14,RCX\nMOV R15,RSI\nMOV RDI,qword ptr [0x0062de28]\nCALL 0x00417fa0\nMOV RDI,qword ptr [0x0062de60]\nCALL 0x00417fa0\nMOV AL,byte ptr [0x0062de80]\nTEST AL,AL\nJNZ 0x004054b3\nMOV byte ptr [0x0062de80],0x1\nMOV EDI,0x11\nXOR ESI,ESI\nCALL 0x00402b50\nCALL 0x00402f60\nMOV R12D,EAX\nCMP R12D,-0x1\nJZ 0x004054ef\nTEST R12D,R12D\nJNZ 0x0040551b\nMOV RSI,qword ptr [0xc0 + R15]\nTEST RSI,RSI\nJNZ 0x0040560b\nMOV EDI,0x41d278\nMOV ESI,0x41d219\nMOV EDX,0x13a\nMOV ECX,0x41d293\nCALL 0x00402a40\nCALL 0x00402770\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x41d26c\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00402d90\nLEA RBP,[0xc8 + R15]\nNOP word ptr CS:[RAX + RAX*0x1]\nXOR EDX,EDX\nMOV EDI,R12D\nMOV RSI,RBP\nCALL 0x00402db0\nCMP EAX,-0x1\nJNZ 0x00405581\nCALL 0x00402770\nMOV EBX,dword ptr [RAX]\nCMP EBX,0x4\nJZ 0x00405530\nXOR EBP,EBP\nXOR EDI,EDI\nMOV ESI,0x41d2cf\nMOV EDX,0x5\nCALL 0x00402910\nMOV R15,RAX\nMOV RSI,qword ptr [R14]\nXOR EDI,EDI\nCALL 0x00408920\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,R15\nCALL 0x00402d90\nJMP 0x004055f6\nMOV EAX,dword ptr [RBP]\nMOV ECX,EAX\nAND ECX,0x7f\nSHL ECX,0x18\nADD ECX,0x1000000\nSAR ECX,0x19\nTEST ECX,ECX\nJLE 0x004055e6\nXOR EDI,EDI\nMOV ESI,0x41d2e4\nMOV EDX,0x5\nCALL 0x00402910\nMOV RBX,RAX\nMOV ESI,dword ptr [0x0062f0ac]\nMOV RDX,qword ptr [R14]\nXOR EDI,EDI\nCALL 0x00416290\nMOV RCX,RAX\nMOV R8D,dword ptr [0xc8 + R15]\nAND R8D,0x7f\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00402d90\nMOV EBP,0x1\nCMP byte ptr [R15],0x0\nJNZ 0x004055f6\nJMP 0x00405600\nMOV EBP,0x1\nTEST AH,0xff\nJZ 0x00405600\nCMP byte ptr [R15],0x0\nJZ 0x00405600\nMOV dword ptr [0x0062f024],0x1\nMOV EAX,EBP\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOVZX EDI,byte ptr [0xbc + R15]\nCALL 0x00405690\nTEST AL,AL\nJZ 0x00405649\nCALL 0x00407e00\nTEST AL,AL\nJZ 0x0040562a\nCALL 0x0040ea60\nMOV RDI,R14\nCALL 0x0040e3b0\nMOV EBX,EAX\nCALL 0x00402770\nMOV RBP,RAX\nTEST BL,BL\nJZ 0x00405653\nMOV dword ptr [RBP],0x7\nJMP 0x0040565e\nMOV EDI,0x1\nCALL 0x004027b0\nMOV RDI,qword ptr [R14]\nMOV RSI,R14\nCALL 0x00402e80\nMOV EBX,dword ptr [RBP]\nMOV RSI,qword ptr [R14]\nXOR EDI,EDI\nCALL 0x00408920\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x42542f\nXOR EAX,EAX\nMOV ESI,EBX\nCALL 0x00402d90\nMOV EDI,0x1\nCALL 0x004027b0\n'
p4470
S'55\n41 57\n41 56\n41 54\n53\n49 89 ce\n49 89 f7\n48 8b 3d a3 89 22 00\ne8 16 2b 01 00\n48 8b 3d cf 89 22 00\ne8 0a 2b 01 00\n8a 05 e4 89 22 00\n84 c0\n75 13\nc6 05 d9 89 22 00 01\nbf 11 00 00 00\n31 f6\ne8 9d d6 ff ff\ne8 a8 da ff ff\n41 89 c4\n41 83 fc ff\n74 2e\n45 85 e4\n75 55\n49 8b b7 c0 00 00 00\n48 85 f6\n0f 85 35 01 00 00\nbf 78 d2 41 00\nbe 19 d2 41 00\nba 3a 01 00 00\nb9 93 d2 41 00\ne8 51 d5 ff ff\ne8 7c d2 ff ff\n8b 18\n31 ff\nbe 6c d2 41 00\nba 05 00 00 00\ne8 09 d4 ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ca\ne8 75 d8 ff ff\n49 8d af c8 00 00 00\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n31 d2\n44 89 e7\n48 89 ee\ne8 73 d8 ff ff\n83 f8 ff\n75 3f\ne8 29 d2 ff ff\n8b 18\n83 fb 04\n74 e2\n31 ed\n31 ff\nbe cf d2 41 00\nba 05 00 00 00\ne8 af d3 ff ff\n49 89 c7\n49 8b 36\n31 ff\ne8 b2 33 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n4c 89 fa\ne8 11 d8 ff ff\neb 75\n8b 45 00\n89 c1\n83 e1 7f\nc1 e1 18\n81 c1 00 00 00 01\nc1 f9 19\n85 c9\n7e 4d\n31 ff\nbe e4 d2 41 00\nba 05 00 00 00\ne8 66 d3 ff ff\n48 89 c3\n8b 35 f9 9a 22 00\n49 8b 16\n31 ff\ne8 d3 0c 01 00\n48 89 c1\n45 8b 87 c8 00 00 00\n41 83 e0 7f\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 b7 d7 ff ff\nbd 01 00 00 00\n41 80 3f 00\n75 12\neb 1a\nbd 01 00 00 00\nf6 c4 ff\n74 10\n41 80 3f 00\n74 0a\nc7 05 24 9a 22 00 01 00 00 00\n89 e8\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n41 0f b6 bf bc 00 00 00\ne8 78 00 00 00\n84 c0\n74 2d\ne8 df 27 00 00\n84 c0\n74 05\ne8 36 94 00 00\n4c 89 f7\ne8 7e 8d 00 00\n89 c3\ne8 37 d1 ff ff\n48 89 c5\n84 db\n74 13\nc7 45 00 07 00 00 00\neb 15\nbf 01 00 00 00\ne8 5d d1 ff ff\n49 8b 3e\n4c 89 f6\ne8 22 d8 ff ff\n8b 5d 00\n49 8b 36\n31 ff\ne8 b5 32 00 00\n48 89 c1\n31 ff\nba 2f 54 42 00\n31 c0\n89 de\ne8 12 d7 ff ff\nbf 01 00 00 00\ne8 28 d1 ff ff\n'
p4471
S'.text:0000000000405470\n.text:0000000000405471\n.text:0000000000405473\n.text:0000000000405475\n.text:0000000000405477\n.text:0000000000405478\n.text:000000000040547b\n.text:000000000040547e\n.text:0000000000405485\n.text:000000000040548a\n.text:0000000000405491\n.text:0000000000405496\n.text:000000000040549c\n.text:000000000040549e\n.text:00000000004054a0\n.text:00000000004054a7\n.text:00000000004054ac\n.text:00000000004054ae\n.text:00000000004054b3\n.text:00000000004054b8\n.text:00000000004054bb\n.text:00000000004054bf\n.text:00000000004054c1\n.text:00000000004054c4\n.text:00000000004054c6\n.text:00000000004054cd\n.text:00000000004054d0\n.text:00000000004054d6\n.text:00000000004054db\n.text:00000000004054e0\n.text:00000000004054e5\n.text:00000000004054ea\n.text:00000000004054ef\n.text:00000000004054f4\n.text:00000000004054f6\n.text:00000000004054f8\n.text:00000000004054fd\n.text:0000000000405502\n.text:0000000000405507\n.text:000000000040550a\n.text:000000000040550f\n.text:0000000000405511\n.text:0000000000405513\n.text:0000000000405516\n.text:000000000040551b\n.text:0000000000405522\n.text:0000000000405530\n.text:0000000000405532\n.text:0000000000405535\n.text:0000000000405538\n.text:000000000040553d\n.text:0000000000405540\n.text:0000000000405542\n.text:0000000000405547\n.text:0000000000405549\n.text:000000000040554c\n.text:000000000040554e\n.text:0000000000405550\n.text:0000000000405552\n.text:0000000000405557\n.text:000000000040555c\n.text:0000000000405561\n.text:0000000000405564\n.text:0000000000405567\n.text:0000000000405569\n.text:000000000040556e\n.text:0000000000405571\n.text:0000000000405573\n.text:0000000000405575\n.text:0000000000405577\n.text:000000000040557a\n.text:000000000040557f\n.text:0000000000405581\n.text:0000000000405584\n.text:0000000000405586\n.text:0000000000405589\n.text:000000000040558c\n.text:0000000000405592\n.text:0000000000405595\n.text:0000000000405597\n.text:0000000000405599\n.text:000000000040559b\n.text:00000000004055a0\n.text:00000000004055a5\n.text:00000000004055aa\n.text:00000000004055ad\n.text:00000000004055b3\n.text:00000000004055b6\n.text:00000000004055b8\n.text:00000000004055bd\n.text:00000000004055c0\n.text:00000000004055c7\n.text:00000000004055cb\n.text:00000000004055cd\n.text:00000000004055cf\n.text:00000000004055d1\n.text:00000000004055d4\n.text:00000000004055d9\n.text:00000000004055de\n.text:00000000004055e2\n.text:00000000004055e4\n.text:00000000004055e6\n.text:00000000004055eb\n.text:00000000004055ee\n.text:00000000004055f0\n.text:00000000004055f4\n.text:00000000004055f6\n.text:0000000000405600\n.text:0000000000405602\n.text:0000000000405603\n.text:0000000000405605\n.text:0000000000405607\n.text:0000000000405609\n.text:000000000040560a\n.text:000000000040560b\n.text:0000000000405613\n.text:0000000000405618\n.text:000000000040561a\n.text:000000000040561c\n.text:0000000000405621\n.text:0000000000405623\n.text:0000000000405625\n.text:000000000040562a\n.text:000000000040562d\n.text:0000000000405632\n.text:0000000000405634\n.text:0000000000405639\n.text:000000000040563c\n.text:000000000040563e\n.text:0000000000405640\n.text:0000000000405647\n.text:0000000000405649\n.text:000000000040564e\n.text:0000000000405653\n.text:0000000000405656\n.text:0000000000405659\n.text:000000000040565e\n.text:0000000000405661\n.text:0000000000405664\n.text:0000000000405666\n.text:000000000040566b\n.text:000000000040566e\n.text:0000000000405670\n.text:0000000000405675\n.text:0000000000405677\n.text:0000000000405679\n.text:000000000040567e\n.text:0000000000405683\n'
p4472
tp4473
sS'knuth_morris_pratt_multibyte'
p4474
(S'\n__stdcall knuth_morris_pratt_multibyte(char * haystack, char * needle, char * * resultp)\n'
p4475
V\u000a_Bool knuth_morris_pratt_multibyte(char *haystack,char *needle,char **resultp)\u000a\u000a{\u000a  undefined8 *puVar1;\u000a  char cVar2;\u000a  long __n;\u000a  undefined8 __s1;\u000a  undefined8 __s2;\u000a  bool bVar3;\u000a  undefined uVar4;\u000a  int iVar5;\u000a  ulong uVar6;\u000a  long lVar7;\u000a  undefined *puVar8;\u000a  size_t n;\u000a  ulong uVar9;\u000a  undefined *new_mbc;\u000a  undefined *p;\u000a  undefined auStack216 [8];\u000a  char *local_d0;\u000a  undefined local_c8 [4];\u000a  undefined8 local_c4;\u000a  undefined local_bc;\u000a  char *local_b8;\u000a  long local_b0;\u000a  char local_a8;\u000a  int local_a4;\u000a  undefined *local_88;\u000a  char **local_80;\u000a  undefined local_78 [4];\u000a  undefined8 local_74;\u000a  undefined local_6c;\u000a  char *local_68;\u000a  long local_60;\u000a  char local_58;\u000a  int local_54;\u000a  ulong local_38;\u000a  \u000a  puVar8 = auStack216;\u000a  local_38 = mbslen(needle);\u000a  if (local_38 < 0x492492492492493) {\u000a    n = local_38 * 0x38;\u000a    if (n < 0xfb0) {\u000a      uVar9 = n + 0x1f & 0xfffffffffffffff0;\u000a      puVar8 = auStack216 + -uVar9;\u000a      p = local_c8 + -uVar9;\u000a    }\u000a    else {\u000a      p = (undefined *)mmalloca(n);\u000a      if (p == (undefined *)0x0) {\u000a        return false;\u000a      }\u000a    }\u000a    lVar7 = local_38 * 0x30;\u000a    local_78[0] = 0;\u000a    local_74 = 0;\u000a    local_6c = 0;\u000a    *(undefined8 *)(puVar8 + -8) = 0x4124ee;\u000a    local_d0 = haystack;\u000a    local_80 = resultp;\u000a    local_68 = needle;\u000a    mbuiter_multi_next(local_78,puVar8[-8]);\u000a    if ((local_58 == 0) || (local_54 != 0)) {\u000a      new_mbc = p;\u000a      do {\u000a        do {\u000a          *(undefined8 *)(puVar8 + -8) = 0x41251b;\u000a          mb_copy(new_mbc,&local_68,puVar8[-8]);\u000a          local_68 = local_68 + local_60;\u000a          local_6c = 0;\u000a          *(undefined8 *)(puVar8 + -8) = 0x41252f;\u000a          mbuiter_multi_next(local_78,puVar8[-8]);\u000a          new_mbc = new_mbc + 0x30;\u000a        } while (local_58 == 0);\u000a      } while (local_54 != 0);\u000a    }\u000a    new_mbc = p + lVar7;\u000a    *(undefined8 *)(p + lVar7 + 8) = 1;\u000a    local_88 = new_mbc;\u000a    if (2 < local_38) {\u000a      uVar9 = 2;\u000a      lVar7 = 0;\u000a      local_88 = new_mbc;\u000a      do {\u000a        puVar1 = (undefined8 *)(p + uVar9 * 0x30 + -0x30);\u000a        cVar2 = p[uVar9 * 0x30 + -0x20];\u000a        if (cVar2 != 0) goto LAB_00412599;\u000aLAB_004125c0:\u000a        __n = puVar1[1];\u000a        if (__n != *(long *)(p + lVar7 * 0x30 + 8)) goto LAB_004125e8;\u000a        __s1 = *puVar1;\u000a        __s2 = *(undefined8 *)(p + lVar7 * 0x30);\u000a        *(undefined8 *)(puVar8 + -8) = 0x4125e0;\u000a        iVar5 = memcmp(__s1,__s2,__n,puVar8[-8]);\u000a        new_mbc = local_88;\u000a        if (iVar5 != 0) goto LAB_004125e8;\u000aLAB_00412600:\u000a        lVar7 = lVar7 + 1;\u000a        uVar6 = uVar9 - lVar7;\u000aLAB_00412609:\u000a        *(ulong *)(new_mbc + uVar9 * 8) = uVar6;\u000a        uVar9 = uVar9 + 1;\u000a        if (uVar9 == local_38) break;\u000a      } while( true );\u000a    }\u000a    *local_80 = (char *)0x0;\u000a    local_68 = local_d0;\u000a    local_78[0] = 0;\u000a    local_74 = 0;\u000a    local_6c = 0;\u000a    local_b8 = local_d0;\u000a    local_c8[0] = 0;\u000a    local_c4 = 0;\u000a    local_bc = 0;\u000a    *(undefined8 *)(puVar8 + -8) = 0x41266c;\u000a    mbuiter_multi_next(local_c8,puVar8[-8]);\u000a    bVar3 = local_a8 != 0;\u000a    if ((local_a8 == 0) || (local_a4 != 0)) {\u000a      uVar9 = 0;\u000a      do {\u000a        lVar7 = uVar9 * 0x30;\u000a        if ((p[lVar7 + 0x10] == 0) || ((bool)(bVar3 ^ 1))) {\u000a          __n = *(long *)(p + lVar7 + 8);\u000a          if (__n == local_b0) {\u000a            __s1 = *(undefined8 *)(p + lVar7);\u000a            *(undefined8 *)(puVar8 + -8) = 0x4126ee;\u000a            iVar5 = memcmp(__s1,local_b8,__n,puVar8[-8]);\u000a            if (iVar5 == 0) goto LAB_00412740;\u000a          }\u000aLAB_004126f2:\u000a          if (uVar9 == 0) {\u000a            *(undefined8 *)(puVar8 + -8) = 0x412768;\u000a            mbuiter_multi_next(local_78,puVar8[-8]);\u000a            if ((local_58 != 0) && (local_54 == 0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a              *(undefined8 *)(puVar8 + -8) = 0x4127f3;\u000a              abort(puVar8[-8]);\u000a            }\u000a            local_68 = local_68 + local_60;\u000a            local_6c = 0;\u000a            local_b8 = local_b8 + local_b0;\u000a            local_bc = 0;\u000a            uVar9 = 0;\u000a          }\u000a          else {\u000a            lVar7 = *(long *)(local_88 + uVar9 * 8);\u000a            uVar9 = uVar9 - lVar7;\u000a            while (lVar7 != 0) {\u000a              *(undefined8 *)(puVar8 + -8) = 0x412718;\u000a              mbuiter_multi_next(local_78,puVar8[-8]);\u000a              if ((local_58 != 0) && (local_54 == 0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a                *(undefined8 *)(puVar8 + -8) = 0x4127ee;\u000a                abort(puVar8[-8]);\u000a              }\u000a              local_68 = local_68 + local_60;\u000a              local_6c = 0;\u000a              lVar7 = lVar7 + -1;\u000a            }\u000a          }\u000a        }\u000a        else {\u000a          if (*(int *)(p + lVar7 + 0x14) != local_a4) goto LAB_004126f2;\u000aLAB_00412740:\u000a          uVar9 = uVar9 + 1;\u000a          local_b8 = local_b8 + local_b0;\u000a          local_bc = 0;\u000a          if (uVar9 == local_38) {\u000a            *local_80 = local_68;\u000a            break;\u000a          }\u000a        }\u000a        *(undefined8 *)(puVar8 + -8) = 0x4127a1;\u000a        mbuiter_multi_next(local_c8,puVar8[-8]);\u000a        bVar3 = local_a8 != 0;\u000a      } while ((local_a8 == 0) || (local_a4 != 0));\u000a    }\u000a    *(undefined8 *)(puVar8 + -8) = 0x4127d8;\u000a    freea(p,puVar8[-8]);\u000a    uVar4 = 1;\u000a  }\u000a  else {\u000a    uVar4 = 0;\u000a  }\u000a  return (_Bool)uVar4;\u000aLAB_004125e8:\u000a  while( true ) {\u000a    if (lVar7 == 0) {\u000a      lVar7 = 0;\u000a      uVar6 = uVar9;\u000a      goto LAB_00412609;\u000a    }\u000a    lVar7 = lVar7 - *(long *)(new_mbc + lVar7 * 8);\u000a    if (cVar2 == 0) break;\u000aLAB_00412599:\u000a    if (p[lVar7 * 0x30 + 0x10] == 0) break;\u000a    if (*(int *)((long)puVar1 + 0x14) == *(int *)(p + lVar7 * 0x30 + 0x14)) goto LAB_00412600;\u000a  }\u000a  goto LAB_004125c0;\u000a}\u000a\u000a
p4476
S'PUSH RBP\nMOV RBP,RSP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV R14,RDX\nMOV R13,RSI\nMOV R12,RDI\nMOV RDI,R13\nCALL 0x0041c190\nMOV RBX,RAX\nMOV RAX,0x492492492492492\nCMP RBX,RAX\nJBE 0x0041247e\nXOR EAX,EAX\nJMP 0x004127da\nIMUL RDI,RBX,0x38\nCMP RDI,0xfaf\nJA 0x004124a9\nMOV RAX,RSP\nADD RDI,0x1f\nAND RDI,-0x10\nMOV RCX,RAX\nSUB RCX,RDI\nMOV RSP,RCX\nNEG RDI\nLEA R15,[RAX + RDI*0x1 + 0x10]\nJMP 0x004124ba\nCALL 0x0041c000\nMOV R15,RAX\nTEST R15,R15\nJZ 0x004127c1\nMOV qword ptr [-0xc8 + RBP],R12\nMOV qword ptr [RBP + -0x78],R14\nMOV qword ptr [RBP + -0x30],RBX\nLEA RBX,[RBX + RBX*0x2]\nSHL RBX,0x4\nMOV qword ptr [RBP + -0x60],R13\nMOV byte ptr [RBP + -0x70],0x0\nMOV qword ptr [RBP + -0x6c],0x0\nMOV byte ptr [RBP + -0x64],0x0\nLEA RDI,[RBP + -0x70]\nCALL 0x00412bc0\nCMP byte ptr [RBP + -0x50],0x0\nJZ 0x004124fb\nMOV EAX,dword ptr [RBP + -0x4c]\nTEST EAX,EAX\nJZ 0x00412540\nLEA R13,[RBP + -0x60]\nLEA R14,[RBP + -0x70]\nMOV R12,R15\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RDI,R12\nMOV RSI,R13\nCALL 0x0041c120\nMOV RAX,qword ptr [RBP + -0x58]\nADD qword ptr [RBP + -0x60],RAX\nMOV byte ptr [RBP + -0x64],0x0\nMOV RDI,R14\nCALL 0x00412bc0\nMOV EAX,dword ptr [RBP + -0x4c]\nADD R12,0x30\nCMP byte ptr [RBP + -0x50],0x0\nJZ 0x00412510\nTEST EAX,EAX\nJNZ 0x00412510\nLEA RSI,[R15 + RBX*0x1]\nMOV qword ptr [R15 + RBX*0x1 + 0x8],0x1\nCMP qword ptr [RBP + -0x30],0x3\nMOV qword ptr [RBP + -0x80],RSI\nJC 0x0041261a\nMOV R12D,0x2\nXOR EBX,EBX\nNOP word ptr CS:[RAX + RAX*0x1]\nLEA RAX,[R12 + R12*0x2]\nSHL RAX,0x4\nLEA R13,[R15 + RAX*0x1 + -0x30]\nMOVZX R14D,byte ptr [R15 + RAX*0x1 + -0x20]\nTEST R14B,R14B\nJNZ 0x00412599\nJMP 0x004125c0\nSUB RBX,qword ptr [RSI + RBX*0x8]\nTEST R14B,R14B\nJZ 0x004125c0\nLEA RAX,[RBX + RBX*0x2]\nSHL RAX,0x4\nCMP byte ptr [R15 + RAX*0x1 + 0x10],0x0\nJZ 0x004125c0\nMOV ECX,dword ptr [R13 + 0x14]\nCMP ECX,dword ptr [R15 + RAX*0x1 + 0x14]\nJNZ 0x004125e8\nJMP 0x00412600\nMOV RDX,qword ptr [R13 + 0x8]\nLEA RAX,[RBX + RBX*0x2]\nSHL RAX,0x4\nCMP RDX,qword ptr [R15 + RAX*0x1 + 0x8]\nJNZ 0x004125e8\nMOV RDI,qword ptr [R13]\nMOV RSI,qword ptr [R15 + RAX*0x1]\nCALL 0x00402b20\nMOV RSI,qword ptr [RBP + -0x80]\nTEST EAX,EAX\nJZ 0x00412600\nTEST RBX,RBX\nJNZ 0x00412590\nXOR EBX,EBX\nMOV RAX,R12\nJMP 0x00412609\nINC RBX\nMOV RAX,R12\nSUB RAX,RBX\nMOV qword ptr [RSI + R12*0x8],RAX\nINC R12\nCMP R12,qword ptr [RBP + -0x30]\nJNZ 0x00412570\nMOV RAX,qword ptr [RBP + -0x78]\nMOV qword ptr [RAX],0x0\nMOV RAX,qword ptr [-0xc8 + RBP]\nMOV qword ptr [RBP + -0x60],RAX\nMOV byte ptr [RBP + -0x70],0x0\nMOV qword ptr [RBP + -0x6c],0x0\nMOV byte ptr [RBP + -0x64],0x0\nMOV qword ptr [-0xb0 + RBP],RAX\nMOV byte ptr [-0xc0 + RBP],0x0\nMOV qword ptr [-0xbc + RBP],0x0\nMOV byte ptr [-0xb4 + RBP],0x0\nLEA RDI,[-0xc0 + RBP]\nCALL 0x00412bc0\nCMP byte ptr [-0xa0 + RBP],0x0\nSETNZ CL\nMOV EAX,dword ptr [-0x9c + RBP]\nJZ 0x00412686\nTEST EAX,EAX\nJZ 0x004127d0\nXOR R12D,R12D\nLEA R14,[-0xc0 + RBP]\nLEA R13,[RBP + -0x70]\nNOP word ptr CS:[RAX + RAX*0x1]\nLEA RSI,[R12 + R12*0x2]\nSHL RSI,0x4\nCMP byte ptr [R15 + RSI*0x1 + 0x10],0x0\nJZ 0x004126d0\nXOR CL,0x1\nTEST CL,0x1\nJNZ 0x004126d0\nCMP dword ptr [R15 + RSI*0x1 + 0x14],EAX\nJNZ 0x004126f2\nJMP 0x00412740\nMOV RDX,qword ptr [R15 + RSI*0x1 + 0x8]\nCMP RDX,qword ptr [-0xa8 + RBP]\nJNZ 0x004126f2\nMOV RDI,qword ptr [R15 + RSI*0x1]\nMOV RSI,qword ptr [-0xb0 + RBP]\nCALL 0x00402b20\nTEST EAX,EAX\nJZ 0x00412740\nTEST R12,R12\nJZ 0x00412760\nMOV RAX,qword ptr [RBP + -0x80]\nMOV RBX,qword ptr [RAX + R12*0x8]\nSUB R12,RBX\nTEST RBX,RBX\nJZ 0x00412799\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,R13\nCALL 0x00412bc0\nCMP byte ptr [RBP + -0x50],0x0\nJZ 0x00412729\nMOV EAX,dword ptr [RBP + -0x4c]\nTEST EAX,EAX\nJZ 0x004127e9\nMOV RAX,qword ptr [RBP + -0x58]\nADD qword ptr [RBP + -0x60],RAX\nMOV byte ptr [RBP + -0x64],0x0\nDEC RBX\nJNZ 0x00412710\nJMP 0x00412799\nINC R12\nMOV RAX,qword ptr [-0xa8 + RBP]\nADD qword ptr [-0xb0 + RBP],RAX\nMOV byte ptr [-0xb4 + RBP],0x0\nCMP R12,qword ptr [RBP + -0x30]\nJNZ 0x00412799\nJMP 0x004127c5\nMOV RDI,R13\nCALL 0x00412bc0\nCMP byte ptr [RBP + -0x50],0x0\nJZ 0x00412775\nMOV EAX,dword ptr [RBP + -0x4c]\nTEST EAX,EAX\nJZ 0x004127ee\nMOV RAX,qword ptr [RBP + -0x58]\nADD qword ptr [RBP + -0x60],RAX\nMOV byte ptr [RBP + -0x64],0x0\nMOV RAX,qword ptr [-0xa8 + RBP]\nADD qword ptr [-0xb0 + RBP],RAX\nMOV byte ptr [-0xb4 + RBP],0x0\nXOR R12D,R12D\nMOV RDI,R14\nCALL 0x00412bc0\nCMP byte ptr [-0xa0 + RBP],0x0\nSETNZ CL\nMOV EAX,dword ptr [-0x9c + RBP]\nJZ 0x004126a0\nTEST EAX,EAX\nJNZ 0x004126a0\nJMP 0x004127d0\nXOR EAX,EAX\nJMP 0x004127da\nMOV RAX,qword ptr [RBP + -0x60]\nMOV RCX,qword ptr [RBP + -0x78]\nMOV qword ptr [RCX],RAX\nMOV RDI,R15\nCALL 0x0041c080\nMOV AL,0x1\nLEA RSP,[RBP + -0x28]\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00402750\nCALL 0x00402750\n'
p4477
S'55\n48 89 e5\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n49 89 d6\n49 89 f5\n49 89 fc\n4c 89 ef\ne8 2b 9d 00 00\n48 89 c3\n48 b8 92 24 49 92 24 49 92 04\n48 39 c3\n76 07\n31 c0\ne9 5c 03 00 00\n48 6b fb 38\n48 81 ff af 0f 00 00\n77 1e\n48 89 e0\n48 83 c7 1f\n48 83 e7 f0\n48 89 c1\n48 29 f9\n48 89 cc\n48 f7 df\n4c 8d 7c 38 10\neb 11\ne8 52 9b 00 00\n49 89 c7\n4d 85 ff\n0f 84 07 03 00 00\n4c 89 a5 38 ff ff ff\n4c 89 75 88\n48 89 5d d0\n48 8d 1c 5b\n48 c1 e3 04\n4c 89 6d a0\nc6 45 90 00\n48 c7 45 94 00 00 00 00\nc6 45 9c 00\n48 8d 7d 90\ne8 d2 06 00 00\n80 7d b0 00\n74 07\n8b 45 b4\n85 c0\n74 45\n4c 8d 6d a0\n4c 8d 75 90\n4d 89 fc\n66 2e 0f 1f 84 00 00 00 00 00\n4c 89 e7\n4c 89 ee\ne8 05 9c 00 00\n48 8b 45 a8\n48 01 45 a0\nc6 45 9c 00\n4c 89 f7\ne8 91 06 00 00\n8b 45 b4\n49 83 c4 30\n80 7d b0 00\n74 d4\n85 c0\n75 d0\n49 8d 34 1f\n49 c7 44 1f 08 01 00 00 00\n48 83 7d d0 03\n48 89 75 80\n0f 82 be 00 00 00\n41 bc 02 00 00 00\n31 db\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n4b 8d 04 64\n48 c1 e0 04\n4d 8d 6c 07 d0\n45 0f b6 74 07 e0\n45 84 f6\n75 11\neb 36\n48 2b 1c de\n45 84 f6\n74 27\n48 8d 04 5b\n48 c1 e0 04\n41 80 7c 07 10 00\n74 17\n41 8b 4d 14\n41 3b 4c 07 14\n75 34\neb 4a\n49 8b 55 08\n48 8d 04 5b\n48 c1 e0 04\n49 3b 54 07 08\n75 15\n49 8b 7d 00\n49 8b 34 07\ne8 40 05 ff ff\n48 8b 75 80\n85 c0\n74 18\n48 85 db\n75 a3\n31 db\n4c 89 e0\neb 15\n48 ff c3\n4c 89 e0\n48 29 d8\n4a 89 04 e6\n49 ff c4\n4c 3b 65 d0\n0f 85 56 ff ff ff\n48 8b 45 88\n48 c7 00 00 00 00 00\n48 8b 85 38 ff ff ff\n48 89 45 a0\nc6 45 90 00\n48 c7 45 94 00 00 00 00\nc6 45 9c 00\n48 89 85 50 ff ff ff\nc6 85 40 ff ff ff 00\n48 c7 85 44 ff ff ff 00 00 00 00\nc6 85 4c ff ff ff 00\n48 8d bd 40 ff ff ff\ne8 54 05 00 00\n80 bd 60 ff ff ff 00\n0f 95 c1\n8b 85 64 ff ff ff\n74 08\n85 c0\n0f 84 4a 01 00 00\n45 31 e4\n4c 8d b5 40 ff ff ff\n4c 8d 6d 90\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n4b 8d 34 64\n48 c1 e6 04\n41 80 7c 37 10 00\n74 20\n80 f1 01\nf6 c1 01\n75 18\n41 39 44 37 14\n75 33\neb 7f\n49 8b 54 37 08\n48 3b 95 58 ff ff ff\n75 14\n49 8b 3c 37\n48 8b b5 50 ff ff ff\ne8 32 04 ff ff\n85 c0\n74 4e\n4d 85 e4\n74 69\n48 8b 45 80\n4a 8b 1c e0\n49 29 dc\n48 85 db\n0f 84 8e 00 00 00\n0f 1f 44 00 00\n4c 89 ef\ne8 a8 04 00 00\n80 7d b0 00\n74 0b\n8b 45 b4\n85 c0\n0f 84 c0 00 00 00\n48 8b 45 a8\n48 01 45 a0\nc6 45 9c 00\n48 ff cb\n75 d6\neb 5d\n49 ff c4\n48 8b 85 58 ff ff ff\n48 01 85 50 ff ff ff\nc6 85 4c ff ff ff 00\n4c 3b 65 d0\n75 3b\neb 65\n4c 89 ef\ne8 58 04 00 00\n80 7d b0 00\n74 07\n8b 45 b4\n85 c0\n74 79\n48 8b 45 a8\n48 01 45 a0\nc6 45 9c 00\n48 8b 85 58 ff ff ff\n48 01 85 50 ff ff ff\nc6 85 4c ff ff ff 00\n45 31 e4\n4c 89 f7\ne8 1f 04 00 00\n80 bd 60 ff ff ff 00\n0f 95 c1\n8b 85 64 ff ff ff\n0f 84 e9 fe ff ff\n85 c0\n0f 85 e1 fe ff ff\neb 0f\n31 c0\neb 15\n48 8b 45 a0\n48 8b 4d 88\n48 89 01\n4c 89 ff\ne8 a8 98 00 00\nb0 01\n48 8d 65 d8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 62 ff fe ff\ne8 5d ff fe ff\n'
p4478
S'.text:0000000000412440\n.text:0000000000412441\n.text:0000000000412444\n.text:0000000000412446\n.text:0000000000412448\n.text:000000000041244a\n.text:000000000041244c\n.text:000000000041244d\n.text:0000000000412454\n.text:0000000000412457\n.text:000000000041245a\n.text:000000000041245d\n.text:0000000000412460\n.text:0000000000412465\n.text:0000000000412468\n.text:0000000000412472\n.text:0000000000412475\n.text:0000000000412477\n.text:0000000000412479\n.text:000000000041247e\n.text:0000000000412482\n.text:0000000000412489\n.text:000000000041248b\n.text:000000000041248e\n.text:0000000000412492\n.text:0000000000412496\n.text:0000000000412499\n.text:000000000041249c\n.text:000000000041249f\n.text:00000000004124a2\n.text:00000000004124a7\n.text:00000000004124a9\n.text:00000000004124ae\n.text:00000000004124b1\n.text:00000000004124b4\n.text:00000000004124ba\n.text:00000000004124c1\n.text:00000000004124c5\n.text:00000000004124c9\n.text:00000000004124cd\n.text:00000000004124d1\n.text:00000000004124d5\n.text:00000000004124d9\n.text:00000000004124e1\n.text:00000000004124e5\n.text:00000000004124e9\n.text:00000000004124ee\n.text:00000000004124f2\n.text:00000000004124f4\n.text:00000000004124f7\n.text:00000000004124f9\n.text:00000000004124fb\n.text:00000000004124ff\n.text:0000000000412503\n.text:0000000000412506\n.text:0000000000412510\n.text:0000000000412513\n.text:0000000000412516\n.text:000000000041251b\n.text:000000000041251f\n.text:0000000000412523\n.text:0000000000412527\n.text:000000000041252a\n.text:000000000041252f\n.text:0000000000412532\n.text:0000000000412536\n.text:000000000041253a\n.text:000000000041253c\n.text:000000000041253e\n.text:0000000000412540\n.text:0000000000412544\n.text:000000000041254d\n.text:0000000000412552\n.text:0000000000412556\n.text:000000000041255c\n.text:0000000000412562\n.text:0000000000412564\n.text:0000000000412570\n.text:0000000000412574\n.text:0000000000412578\n.text:000000000041257d\n.text:0000000000412583\n.text:0000000000412586\n.text:0000000000412588\n.text:0000000000412590\n.text:0000000000412594\n.text:0000000000412597\n.text:0000000000412599\n.text:000000000041259d\n.text:00000000004125a1\n.text:00000000004125a7\n.text:00000000004125a9\n.text:00000000004125ad\n.text:00000000004125b2\n.text:00000000004125b4\n.text:00000000004125c0\n.text:00000000004125c4\n.text:00000000004125c8\n.text:00000000004125cc\n.text:00000000004125d1\n.text:00000000004125d3\n.text:00000000004125d7\n.text:00000000004125db\n.text:00000000004125e0\n.text:00000000004125e4\n.text:00000000004125e6\n.text:00000000004125e8\n.text:00000000004125eb\n.text:00000000004125ed\n.text:00000000004125ef\n.text:00000000004125f2\n.text:0000000000412600\n.text:0000000000412603\n.text:0000000000412606\n.text:0000000000412609\n.text:000000000041260d\n.text:0000000000412610\n.text:0000000000412614\n.text:000000000041261a\n.text:000000000041261e\n.text:0000000000412625\n.text:000000000041262c\n.text:0000000000412630\n.text:0000000000412634\n.text:000000000041263c\n.text:0000000000412640\n.text:0000000000412647\n.text:000000000041264e\n.text:0000000000412659\n.text:0000000000412660\n.text:0000000000412667\n.text:000000000041266c\n.text:0000000000412673\n.text:0000000000412676\n.text:000000000041267c\n.text:000000000041267e\n.text:0000000000412680\n.text:0000000000412686\n.text:0000000000412689\n.text:0000000000412690\n.text:0000000000412694\n.text:00000000004126a0\n.text:00000000004126a4\n.text:00000000004126a8\n.text:00000000004126ae\n.text:00000000004126b0\n.text:00000000004126b3\n.text:00000000004126b6\n.text:00000000004126b8\n.text:00000000004126bd\n.text:00000000004126bf\n.text:00000000004126d0\n.text:00000000004126d5\n.text:00000000004126dc\n.text:00000000004126de\n.text:00000000004126e2\n.text:00000000004126e9\n.text:00000000004126ee\n.text:00000000004126f0\n.text:00000000004126f2\n.text:00000000004126f5\n.text:00000000004126f7\n.text:00000000004126fb\n.text:00000000004126ff\n.text:0000000000412702\n.text:0000000000412705\n.text:000000000041270b\n.text:0000000000412710\n.text:0000000000412713\n.text:0000000000412718\n.text:000000000041271c\n.text:000000000041271e\n.text:0000000000412721\n.text:0000000000412723\n.text:0000000000412729\n.text:000000000041272d\n.text:0000000000412731\n.text:0000000000412735\n.text:0000000000412738\n.text:000000000041273a\n.text:0000000000412740\n.text:0000000000412743\n.text:000000000041274a\n.text:0000000000412751\n.text:0000000000412758\n.text:000000000041275c\n.text:000000000041275e\n.text:0000000000412760\n.text:0000000000412763\n.text:0000000000412768\n.text:000000000041276c\n.text:000000000041276e\n.text:0000000000412771\n.text:0000000000412773\n.text:0000000000412775\n.text:0000000000412779\n.text:000000000041277d\n.text:0000000000412781\n.text:0000000000412788\n.text:000000000041278f\n.text:0000000000412796\n.text:0000000000412799\n.text:000000000041279c\n.text:00000000004127a1\n.text:00000000004127a8\n.text:00000000004127ab\n.text:00000000004127b1\n.text:00000000004127b7\n.text:00000000004127b9\n.text:00000000004127bf\n.text:00000000004127c1\n.text:00000000004127c3\n.text:00000000004127c5\n.text:00000000004127c9\n.text:00000000004127cd\n.text:00000000004127d0\n.text:00000000004127d3\n.text:00000000004127d8\n.text:00000000004127da\n.text:00000000004127de\n.text:00000000004127df\n.text:00000000004127e1\n.text:00000000004127e3\n.text:00000000004127e5\n.text:00000000004127e7\n.text:00000000004127e8\n.text:00000000004127e9\n.text:00000000004127ee\n'
p4479
tp4480
sS'leaf_optimization_applies'
p4481
(S'\n__stdcall leaf_optimization_applies()\n'
p4482
V\u000a_Bool leaf_optimization_applies(void)\u000a\u000a{\u000a  undefined uVar1;\u000a  int iVar2;\u000a  int __fildes;\u000a  statfs local_78;\u000a  \u000a  iVar2 = fstatfs(__fildes,&local_78);\u000a  if ((iVar2 != 0) ||\u000a     ((uVar1 = 1, local_78.f_type != 0x52654973 && (local_78.f_type != 0x58465342)))) {\u000a    uVar1 = 0;\u000a  }\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p4483
S'SUB RSP,0x78\nMOV RSI,RSP\nCALL 0x00402e70\nTEST EAX,EAX\nJZ 0x00419da7\nXOR EAX,EAX\nADD RSP,0x78\nRET\nMOV AL,0x1\nMOV RCX,qword ptr [RSP]\nCMP RCX,0x52654973\nJZ 0x00419da2\nCMP RCX,0x58465342\nJZ 0x00419da2\nJMP 0x00419da0\n'
p4484
S'48 83 ec 78\n48 89 e6\ne8 d4 90 fe ff\n85 c0\n74 07\n31 c0\n48 83 c4 78\nc3\nb0 01\n48 8b 0c 24\n48 81 f9 73 49 65 52\n74 ec\n48 81 f9 42 53 46 58\n74 e3\neb df\n'
p4485
S'.text:0000000000419d90\n.text:0000000000419d94\n.text:0000000000419d97\n.text:0000000000419d9c\n.text:0000000000419d9e\n.text:0000000000419da0\n.text:0000000000419da2\n.text:0000000000419da6\n.text:0000000000419da7\n.text:0000000000419da9\n.text:0000000000419dad\n.text:0000000000419db4\n.text:0000000000419db6\n.text:0000000000419dbd\n.text:0000000000419dbf\n'
p4486
tp4487
sS'fprintf'
p4488
(S'\n__stdcall fprintf(FILE * __stream, char * __format)\n'
p4489
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fprintf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fprintf_0062d270)();\u000a  return iVar1;\u000a}\u000a\u000a
p4490
S'JMP qword ptr [0x0062d270]\n'
p4491
S'ff 25 ca a6 22 00\n'
p4492
S'.plt:0000000000402ba0\n'
p4493
tp4494
sS'sharefile_init'
p4495
(S'\n__stdcall sharefile_init(char * mode)\n'
p4496
V\u000asharefile_handle sharefile_init(char *mode)\u000a\u000a{\u000a  void **__ptr;\u000a  void *pvVar1;\u000a  Hash_table *pHVar2;\u000a  \u000a  __ptr = (void **)malloc(0x10);\u000a  if (__ptr != (void **)0x0) {\u000a    pvVar1 = (void *)__strdup(mode);\u000a    *__ptr = pvVar1;\u000a    if (pvVar1 != (void *)0x0) {\u000a      pHVar2 = hash_initialize(0xb,(Hash_tuning *)0x0,entry_hashfunc,entry_comparator,entry_free);\u000a      *(Hash_table **)(__ptr + 1) = pHVar2;\u000a      if (pHVar2 != (Hash_table *)0x0) {\u000a        return __ptr;\u000a      }\u000a      free(*__ptr);\u000a    }\u000a    free(__ptr);\u000a  }\u000a  return (sharefile_handle)0x0;\u000a}\u000a\u000a
p4497
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV EDI,0x10\nCALL 0x00402c60\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00408abe\nMOV RDI,R14\nCALL 0x00402b00\nMOV qword ptr [RBX],RAX\nTEST RAX,RAX\nJZ 0x00408ab6\nMOV EDI,0xb\nXOR ESI,ESI\nMOV EDX,0x408ad0\nMOV ECX,0x408ae0\nMOV R8D,0x408b00\nCALL 0x004107f0\nMOV qword ptr [RBX + 0x8],RAX\nTEST RAX,RAX\nJNZ 0x00408ac0\nMOV RDI,qword ptr [RBX]\nCALL 0x00402710\nMOV RDI,RBX\nCALL 0x00402710\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p4498
S'41 56\n53\n50\n49 89 fe\nbf 10 00 00 00\ne8 ef a1 ff ff\n48 89 c3\n48 85 db\n74 45\n4c 89 f7\ne8 7f a0 ff ff\n48 89 03\n48 85 c0\n74 2d\nbf 0b 00 00 00\n31 f6\nba d0 8a 40 00\nb9 e0 8a 40 00\n41 b8 00 8b 40 00\ne8 4b 7d 00 00\n48 89 43 08\n48 85 c0\n75 12\n48 8b 3b\ne8 5a 9c ff ff\n48 89 df\ne8 52 9c ff ff\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p4499
S'.text:0000000000408a60\n.text:0000000000408a62\n.text:0000000000408a63\n.text:0000000000408a64\n.text:0000000000408a67\n.text:0000000000408a6c\n.text:0000000000408a71\n.text:0000000000408a74\n.text:0000000000408a77\n.text:0000000000408a79\n.text:0000000000408a7c\n.text:0000000000408a81\n.text:0000000000408a84\n.text:0000000000408a87\n.text:0000000000408a89\n.text:0000000000408a8e\n.text:0000000000408a90\n.text:0000000000408a95\n.text:0000000000408a9a\n.text:0000000000408aa0\n.text:0000000000408aa5\n.text:0000000000408aa9\n.text:0000000000408aac\n.text:0000000000408aae\n.text:0000000000408ab1\n.text:0000000000408ab6\n.text:0000000000408ab9\n.text:0000000000408abe\n.text:0000000000408ac0\n.text:0000000000408ac3\n.text:0000000000408ac7\n.text:0000000000408ac8\n.text:0000000000408aca\n'
p4500
tp4501
sS'hash_get_n_buckets_used'
p4502
(S'\n__stdcall hash_get_n_buckets_used(Hash_table * table)\n'
p4503
V\u000asize_t hash_get_n_buckets_used(Hash_table *table)\u000a\u000a{\u000a  return table->n_buckets_used;\u000a}\u000a\u000a
p4504
S'MOV RAX,qword ptr [RDI + 0x18]\nRET\n'
p4505
S'48 8b 47 18\nc3\n'
p4506
S'.text:00000000004103e0\n.text:00000000004103e4\n'
p4507
tp4508
sS'openat_safer'
p4509
(S'\n__stdcall openat_safer(char * file)\n'
p4510
V\u000a/* WARNING: Removing unreachable block (ram,0x0041c2c8) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff60 : 0x0041c2d6 */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint openat_safer(char *file,...)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  uint __oflag;\u000a  char *__file;\u000a  va_list ap;\u000a  uint local_a0;\u000a  \u000a  uVar2 = 0;\u000a  if ((__oflag & 0x40) != 0) {\u000a    uVar2 = (ulong)local_a0;\u000a  }\u000a  openat((int)file,__file,__oflag,uVar2);\u000a  iVar1 = fd_safer();\u000a  return iVar1;\u000a}\u000a\u000a
p4511
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x0041c272\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nXOR ECX,ECX\nTEST DL,0x40\nJZ 0x0041c2d8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x18\nMOVSXD RCX,dword ptr [RSP]\nCMP RCX,0x28\nJA 0x0041c2c8\nMOV RAX,RCX\nADD RAX,qword ptr [RSP + 0x10]\nLEA ECX,[RCX + 0x8]\nMOV dword ptr [RSP],ECX\nJMP 0x0041c2d6\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RCX,[RAX + 0x8]\nMOV qword ptr [RSP + 0x8],RCX\nMOV ECX,dword ptr [RAX]\nXOR EAX,EAX\nCALL 0x00402950\nMOV EDI,EAX\nCALL 0x00416d00\nADD RSP,0xd8\nRET\n'
p4512
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n31 c9\nf6 c2 40\n74 50\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 18 00 00 00\n48 63 0c 24\n48 83 f9 28\n77 10\n48 89 c8\n48 03 44 24 10\n8d 49 08\n89 0c 24\neb 0e\n48 8b 44 24 08\n48 8d 48 08\n48 89 4c 24 08\n8b 08\n31 c0\ne8 71 66 fe ff\n89 c7\ne8 1a aa ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p4513
S'.text:000000000041c230\n.text:000000000041c237\n.text:000000000041c239\n.text:000000000041c23b\n.text:000000000041c240\n.text:000000000041c245\n.text:000000000041c24a\n.text:000000000041c252\n.text:000000000041c25a\n.text:000000000041c262\n.text:000000000041c26a\n.text:000000000041c272\n.text:000000000041c277\n.text:000000000041c27c\n.text:000000000041c281\n.text:000000000041c283\n.text:000000000041c286\n.text:000000000041c288\n.text:000000000041c28d\n.text:000000000041c292\n.text:000000000041c29a\n.text:000000000041c29f\n.text:000000000041c2a7\n.text:000000000041c2ae\n.text:000000000041c2b2\n.text:000000000041c2b6\n.text:000000000041c2b8\n.text:000000000041c2bb\n.text:000000000041c2c0\n.text:000000000041c2c3\n.text:000000000041c2c6\n.text:000000000041c2c8\n.text:000000000041c2cd\n.text:000000000041c2d1\n.text:000000000041c2d6\n.text:000000000041c2d8\n.text:000000000041c2da\n.text:000000000041c2df\n.text:000000000041c2e1\n.text:000000000041c2e6\n.text:000000000041c2ed\n'
p4514
tp4515
sS'find_first_leak_callback'
p4516
(S'\n__stdcall find_first_leak_callback(void * context)\n'
p4517
V\u000aint find_first_leak_callback(void *context)\u000a\u000a{\u000a  int *piVar1;\u000a  int iVar2;\u000a  int iVar3;\u000a  int iVar4;\u000a  ulong uVar5;\u000a  long *in_RSI;\u000a  \u000a  iVar2 = (int)context;\u000a  iVar3 = fd_is_cloexec();\u000a  iVar4 = 0;\u000a  if (iVar3 == 0) {\u000a    uVar5 = in_RSI[2];\u000a    if (uVar5 < (ulong)in_RSI[1]) {\u000a      do {\u000a        piVar1 = (int *)(*in_RSI + uVar5 * 4);\u000a        if (iVar2 <= *piVar1) {\u000a          if (*piVar1 == iVar2) {\u000a            return 0;\u000a          }\u000a          break;\u000a        }\u000a        uVar5 = uVar5 + 1;\u000a        in_RSI[2] = uVar5;\u000a      } while (uVar5 < (ulong)in_RSI[1]);\u000a    }\u000a    *(int *)(in_RSI + 3) = iVar2;\u000a    iVar4 = -1;\u000a  }\u000a  return iVar4;\u000a}\u000a\u000a
p4518
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV EBP,EDI\nCALL 0x0040ec20\nMOV ECX,EAX\nXOR EAX,EAX\nTEST ECX,ECX\nJNZ 0x0040ec8e\nMOV RCX,qword ptr [RBX + 0x10]\nCMP RCX,qword ptr [RBX + 0x8]\nJNC 0x0040ec86\nMOV RDX,qword ptr [RBX]\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP dword ptr [RDX + RCX*0x4],EBP\nJGE 0x0040ec84\nINC RCX\nMOV qword ptr [RBX + 0x10],RCX\nCMP RCX,qword ptr [RBX + 0x8]\nJC 0x0040ec70\nJMP 0x0040ec86\nJZ 0x0040ec8e\nMOV dword ptr [RBX + 0x18],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p4519
S'55\n53\n50\n48 89 f3\n89 fd\ne8 d3 ff ff ff\n89 c1\n31 c0\n85 c9\n75 39\n48 8b 4b 10\n48 3b 4b 08\n73 27\n48 8b 13\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n39 2c 8a\n7d 0f\n48 ff c1\n48 89 4b 10\n48 3b 4b 08\n72 ee\neb 02\n74 08\n89 6b 18\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n'
p4520
S'.text:000000000040ec40\n.text:000000000040ec41\n.text:000000000040ec42\n.text:000000000040ec43\n.text:000000000040ec46\n.text:000000000040ec48\n.text:000000000040ec4d\n.text:000000000040ec4f\n.text:000000000040ec51\n.text:000000000040ec53\n.text:000000000040ec55\n.text:000000000040ec59\n.text:000000000040ec5d\n.text:000000000040ec5f\n.text:000000000040ec62\n.text:000000000040ec70\n.text:000000000040ec73\n.text:000000000040ec75\n.text:000000000040ec78\n.text:000000000040ec7c\n.text:000000000040ec80\n.text:000000000040ec82\n.text:000000000040ec84\n.text:000000000040ec86\n.text:000000000040ec89\n.text:000000000040ec8e\n.text:000000000040ec92\n.text:000000000040ec93\n.text:000000000040ec94\n'
p4521
tp4522
sS'open'
p4523
(S'\n__stdcall open(char * __file, int __oflag)\n'
p4524
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_0062d380)();\u000a  return iVar1;\u000a}\u000a\u000a
p4525
S'JMP qword ptr [0x0062d380]\n'
p4526
S'ff 25 ba a5 22 00\n'
p4527
S'.plt:0000000000402dc0\n'
p4528
tp4529
sS'make_node_op_equals'
p4530
(S'\n__stdcall make_node_op_equals()\n'
p4531
V\u000amode_change * make_node_op_equals(void)\u000a\u000a{\u000a  mode_change *pmVar1;\u000a  mode_t in_ESI;\u000a  mode_t in_EDI;\u000a  \u000a  pmVar1 = (mode_change *)xmalloc(0x20);\u000a  pmVar1->op = '=';\u000a  pmVar1->flag = 1;\u000a  pmVar1->affected = 0xfff;\u000a  pmVar1->value = in_EDI;\u000a  pmVar1->mentioned = in_ESI;\u000a  pmVar1[1].flag = 0;\u000a  return pmVar1;\u000a}\u000a\u000a
p4532
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBX,ESI\nMOV EBP,EDI\nMOV EDI,0x20\nCALL 0x00417220\nMOV byte ptr [RAX],0x3d\nMOV byte ptr [RAX + 0x1],0x1\nMOV dword ptr [RAX + 0x4],0xfff\nMOV dword ptr [RAX + 0x8],EBP\nMOV dword ptr [RAX + 0xc],EBX\nMOV byte ptr [RAX + 0x11],0x0\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p4533
S'55\n53\n50\n89 f3\n89 fd\nbf 20 00 00 00\ne8 af 41 00 00\nc6 00 3d\nc6 40 01 01\nc7 40 04 ff 0f 00 00\n89 68 08\n89 58 0c\nc6 40 11 00\n48 83 c4 08\n5b\n5d\nc3\n'
p4534
S'.text:0000000000413060\n.text:0000000000413061\n.text:0000000000413062\n.text:0000000000413063\n.text:0000000000413065\n.text:0000000000413067\n.text:000000000041306c\n.text:0000000000413071\n.text:0000000000413074\n.text:0000000000413078\n.text:000000000041307f\n.text:0000000000413082\n.text:0000000000413085\n.text:0000000000413089\n.text:000000000041308d\n.text:000000000041308e\n.text:000000000041308f\n'
p4535
tp4536
sS'rotl16'
p4537
(S'\n__stdcall rotl16()\n'
p4538
V\u000auint16_t rotl16(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint16_t)\u000a         ((ushort)(in_EDI >> (0x10 - (byte)in_ESI & 0x1f)) |\u000a         (ushort)(in_EDI << ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p4539
S'MOV EAX,EDI\nMOV ECX,ESI\nSHL EAX,CL\nMOV ECX,0x10\nSUB ECX,ESI\nSHR EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p4540
S'89 f8\n89 f1\nd3 e0\nb9 10 00 00 00\n29 f1\nd3 ef\n09 c7\n89 f8\nc3\n'
p4541
S'.text:000000000041b8c0\n.text:000000000041b8c2\n.text:000000000041b8c4\n.text:000000000041b8c6\n.text:000000000041b8cb\n.text:000000000041b8cd\n.text:000000000041b8cf\n.text:000000000041b8d1\n.text:000000000041b8d3\n'
p4542
tp4543
sS'localtime_r'
p4544
(S'\n__stdcall localtime_r(time_t * __timer, tm * __tp)\n'
p4545
V\u000a/* WARNING: Switch with 1 destination removed at 0x004027a0 */\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000atm * localtime_r(time_t *__timer,tm *__tp)\u000a\u000a{\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p4546
S'JMP qword ptr [0x0062d070]\n'
p4547
S'ff 25 ca a8 22 00\n'
p4548
S'.plt:00000000004027a0\n'
p4549
tp4550
sS'type_name'
p4551
(S'\n__stdcall type_name()\n'
p4552
V\u000achar * type_name(void)\u000a\u000a{\u000a  long lVar1;\u000a  op_assoc *poVar2;\u000a  short in_DI;\u000a  \u000a  poVar2 = type_table;\u000a  lVar1 = 0;\u000a  do {\u000a    if (poVar2->type == in_DI) goto LAB_00406d07;\u000a    lVar1 = lVar1 + 1;\u000a    poVar2 = poVar2 + 1;\u000a  } while (lVar1 != 6);\u000a  lVar1 = 6;\u000aLAB_00406d07:\u000a  return type_table[lVar1].type_name;\u000a}\u000a\u000a
p4553
S'MOV ECX,0x41d3e0\nXOR EAX,EAX\nNOP word ptr [RAX + RAX*0x1]\nCMP word ptr [RCX],DI\nJZ 0x00406d07\nINC RAX\nADD RCX,0x10\nCMP RAX,0x6\nJNZ 0x00406cf0\nMOV EAX,0x6\nSHL RAX,0x4\nMOV RAX,qword ptr [0x41d3e8 + RAX]\nRET\n'
p4554
S'b9 e0 d3 41 00\n31 c0\n66 0f 1f 84 00 00 00 00 00\n66 39 39\n74 12\n48 ff c0\n48 83 c1 10\n48 83 f8 06\n75 ee\nb8 06 00 00 00\n48 c1 e0 04\n48 8b 80 e8 d3 41 00\nc3\n'
p4555
S'.text:0000000000406ce0\n.text:0000000000406ce5\n.text:0000000000406ce7\n.text:0000000000406cf0\n.text:0000000000406cf3\n.text:0000000000406cf5\n.text:0000000000406cf8\n.text:0000000000406cfc\n.text:0000000000406d00\n.text:0000000000406d02\n.text:0000000000406d07\n.text:0000000000406d0b\n.text:0000000000406d12\n'
p4556
tp4557
sS'tzset'
p4558
(S'\n__stdcall tzset()\n'
p4559
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid tzset(void)\u000a\u000a{\u000a  (*(code *)PTR_tzset_0062d298)();\u000a  return;\u000a}\u000a\u000a
p4560
S'JMP qword ptr [0x0062d298]\n'
p4561
S'ff 25 a2 a6 22 00\n'
p4562
S'.plt:0000000000402bf0\n'
p4563
tp4564
sS'localeconv'
p4565
(S'\n__stdcall localeconv()\n'
p4566
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000alconv * localeconv(void)\u000a\u000a{\u000a  lconv *plVar1;\u000a  \u000a  plVar1 = (lconv *)(*(code *)PTR_localeconv_0062d0d0)();\u000a  return plVar1;\u000a}\u000a\u000a
p4567
S'JMP qword ptr [0x0062d0d0]\n'
p4568
S'ff 25 6a a8 22 00\n'
p4569
S'.plt:0000000000402860\n'
p4570
tp4571
sS'report_file_err'
p4572
(S'\n__stdcall report_file_err(char * name)\n'
p4573
V\u000avoid report_file_err(char *name)\u000a\u000a{\u000a  char *pcVar1;\u000a  char in_DL;\u000a  uint in_ESI;\u000a  \u000a  if ((state.already_issued_stat_error_msg == false) || (in_DL != 1)) {\u000a    pcVar1 = safely_quote_err_filename((char *)0x0);\u000a    error((ulong)name & 0xffffffff,(ulong)in_ESI,&DAT_0042542f,pcVar1);\u000a    error_severity(1);\u000a  }\u000a  if (in_DL != 0) {\u000a    state.already_issued_stat_error_msg = true;\u000a  }\u000a  return;\u000a}\u000a\u000a
p4574
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EBX,EDX\nMOV R14D,ESI\nMOV EBP,EDI\nCMP byte ptr [0x0062f038],0x0\nJZ 0x0040895a\nMOV EAX,EBX\nXOR AL,0x1\nJZ 0x00408982\nXOR EDI,EDI\nMOV RSI,RCX\nCALL 0x00408920\nMOV RCX,RAX\nMOV EDX,0x42542f\nXOR EAX,EAX\nMOV EDI,EBP\nMOV ESI,R14D\nCALL 0x00402d90\nMOV EDI,0x1\nCALL 0x00407aa0\nTEST BL,BL\nJZ 0x0040898d\nMOV byte ptr [0x0062f038],0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p4575
S'55\n41 56\n53\n89 d3\n41 89 f6\n89 fd\n80 3d e6 66 22 00 00\n74 06\n89 d8\n34 01\n74 28\n31 ff\n48 89 ce\ne8 bc ff ff ff\n48 89 c1\nba 2f 54 42 00\n31 c0\n89 ef\n44 89 f6\ne8 18 a4 ff ff\nbf 01 00 00 00\ne8 1e f1 ff ff\n84 db\n74 07\nc6 05 ab 66 22 00 01\n5b\n41 5e\n5d\nc3\n'
p4576
S'.text:0000000000408940\n.text:0000000000408941\n.text:0000000000408943\n.text:0000000000408944\n.text:0000000000408946\n.text:0000000000408949\n.text:000000000040894b\n.text:0000000000408952\n.text:0000000000408954\n.text:0000000000408956\n.text:0000000000408958\n.text:000000000040895a\n.text:000000000040895c\n.text:000000000040895f\n.text:0000000000408964\n.text:0000000000408967\n.text:000000000040896c\n.text:000000000040896e\n.text:0000000000408970\n.text:0000000000408973\n.text:0000000000408978\n.text:000000000040897d\n.text:0000000000408982\n.text:0000000000408984\n.text:0000000000408986\n.text:000000000040898d\n.text:000000000040898e\n.text:0000000000408990\n.text:0000000000408991\n'
p4577
tp4578
sS'get_proc_max_fd'
p4579
(S'\n__stdcall get_proc_max_fd()\n'
p4580
V\u000aint get_proc_max_fd(void)\u000a\u000a{\u000a  uint uVar1;\u000a  bool bVar2;\u000a  int iVar3;\u000a  DIR *__dirp;\u000a  uint *puVar4;\u000a  dirent *pdVar5;\u000a  char *pcVar6;\u000a  int iVar7;\u000a  \u000a  __dirp = opendir_safer("/proc/self/fd");\u000a  if (__dirp != (DIR *)0x0) {\u000a    puVar4 = (uint *)__errno_location();\u000a    *puVar4 = 0;\u000a    pdVar5 = readdir((DIR *)__dirp);\u000a    if (pdVar5 == (dirent *)0x0) {\u000a      iVar7 = -1;\u000a      bVar2 = false;\u000a    }\u000a    else {\u000a      bVar2 = false;\u000a      iVar7 = -1;\u000a      do {\u000a        if ((pdVar5->d_name[0] == '.') &&\u000a           ((pdVar5->d_name[1] == 0 || ((pdVar5->d_name[1] == '.' && (pdVar5->d_name[2] == 0)))))) {\u000a          *puVar4 = 0;\u000a          pdVar5 = readdir((DIR *)__dirp);\u000a        }\u000a        else {\u000a          iVar3 = safe_atoi(pdVar5->d_name);\u000a          if (iVar7 <= iVar3) {\u000a            iVar7 = iVar3;\u000a          }\u000a          *puVar4 = 0;\u000a          pdVar5 = readdir((DIR *)__dirp);\u000a          bVar2 = true;\u000a        }\u000a      } while (pdVar5 != (dirent *)0x0);\u000a    }\u000a    uVar1 = *puVar4;\u000a    if (uVar1 == 0) {\u000a      closedir((DIR *)__dirp);\u000a      if (bVar2) {\u000a        return iVar7;\u000a      }\u000a    }\u000a    else {\u000a      pcVar6 = quotearg_n_style((char *)0x0);\u000a      error(0,(ulong)uVar1,&DAT_0042542f,pcVar6);\u000a      closedir((DIR *)__dirp);\u000a    }\u000a  }\u000a  return -1;\u000a}\u000a\u000a
p4581
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EDI,0x422101\nCALL 0x0040ff20\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040ec0a\nCALL 0x00402770\nMOV RBP,RAX\nMOV dword ptr [RBP],0x0\nMOV RDI,RBX\nCALL 0x00402c30\nTEST RAX,RAX\nJZ 0x0040ebbf\nXOR R15D,R15D\nMOV R14D,0xffffffff\nJMP 0x0040eb90\nADD RAX,0x13\nXOR ESI,ESI\nMOV RDI,RAX\nCALL 0x0040fa30\nCMP EAX,R14D\nCMOVGE R14D,EAX\nMOV dword ptr [RBP],0x0\nMOV RDI,RBX\nCALL 0x00402c30\nMOV R15D,0x1\nJMP 0x0040ebb8\nCMP byte ptr [RAX + 0x13],0x2e\nJNZ 0x0040eb64\nMOVZX ECX,byte ptr [RAX + 0x14]\nTEST CL,CL\nJZ 0x0040eba9\nCMP CL,0x2e\nJNZ 0x0040eb64\nCMP byte ptr [RAX + 0x15],0x0\nJNZ 0x0040eb64\nMOV dword ptr [RBP],0x0\nMOV RDI,RBX\nCALL 0x00402c30\nTEST RAX,RAX\nJNZ 0x0040eb90\nJMP 0x0040ebc8\nMOV R14D,0xffffffff\nXOR R15D,R15D\nMOV EBP,dword ptr [RBP]\nTEST EBP,EBP\nJZ 0x0040ebfd\nXOR EDI,EDI\nMOV ESI,0x8\nMOV EDX,0x422101\nCALL 0x00416290\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x42542f\nXOR EAX,EAX\nMOV ESI,EBP\nCALL 0x00402d90\nMOV RDI,RBX\nCALL 0x00402ae0\nJMP 0x0040ec0a\nMOV RDI,RBX\nCALL 0x00402ae0\nTEST R15D,R15D\nJNZ 0x0040ec10\nMOV R14D,0xffffffff\nMOV EAX,R14D\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p4582
S'55\n41 57\n41 56\n53\n50\nbf 01 21 42 00\ne8 ef 13 00 00\n48 89 c3\n48 85 db\n0f 84 cd 00 00 00\ne8 2e 3c ff ff\n48 89 c5\nc7 45 00 00 00 00 00\n48 89 df\ne8 dc 40 ff ff\n48 85 c0\n74 66\n45 31 ff\n41 be ff ff ff ff\neb 2c\n48 83 c0 13\n31 f6\n48 89 c7\ne8 be 0e 00 00\n44 39 f0\n44 0f 4d f0\nc7 45 00 00 00 00 00\n48 89 df\ne8 a8 40 ff ff\n41 bf 01 00 00 00\neb 28\n80 78 13 2e\n75 ce\n0f b6 48 14\n84 c9\n74 0b\n80 f9 2e\n75 c1\n80 78 15 00\n75 bb\nc7 45 00 00 00 00 00\n48 89 df\ne8 78 40 ff ff\n48 85 c0\n75 d3\neb 09\n41 be ff ff ff ff\n45 31 ff\n8b 6d 00\n85 ed\n74 2e\n31 ff\nbe 08 00 00 00\nba 01 21 42 00\ne8 b0 76 00 00\n48 89 c1\n31 ff\nba 2f 54 42 00\n31 c0\n89 ee\ne8 9d 41 ff ff\n48 89 df\ne8 e5 3e ff ff\neb 0d\n48 89 df\ne8 db 3e ff ff\n45 85 ff\n75 06\n41 be ff ff ff ff\n44 89 f0\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p4583
S'.text:000000000040eb20\n.text:000000000040eb21\n.text:000000000040eb23\n.text:000000000040eb25\n.text:000000000040eb26\n.text:000000000040eb27\n.text:000000000040eb2c\n.text:000000000040eb31\n.text:000000000040eb34\n.text:000000000040eb37\n.text:000000000040eb3d\n.text:000000000040eb42\n.text:000000000040eb45\n.text:000000000040eb4c\n.text:000000000040eb4f\n.text:000000000040eb54\n.text:000000000040eb57\n.text:000000000040eb59\n.text:000000000040eb5c\n.text:000000000040eb62\n.text:000000000040eb64\n.text:000000000040eb68\n.text:000000000040eb6a\n.text:000000000040eb6d\n.text:000000000040eb72\n.text:000000000040eb75\n.text:000000000040eb79\n.text:000000000040eb80\n.text:000000000040eb83\n.text:000000000040eb88\n.text:000000000040eb8e\n.text:000000000040eb90\n.text:000000000040eb94\n.text:000000000040eb96\n.text:000000000040eb9a\n.text:000000000040eb9c\n.text:000000000040eb9e\n.text:000000000040eba1\n.text:000000000040eba3\n.text:000000000040eba7\n.text:000000000040eba9\n.text:000000000040ebb0\n.text:000000000040ebb3\n.text:000000000040ebb8\n.text:000000000040ebbb\n.text:000000000040ebbd\n.text:000000000040ebbf\n.text:000000000040ebc5\n.text:000000000040ebc8\n.text:000000000040ebcb\n.text:000000000040ebcd\n.text:000000000040ebcf\n.text:000000000040ebd1\n.text:000000000040ebd6\n.text:000000000040ebdb\n.text:000000000040ebe0\n.text:000000000040ebe3\n.text:000000000040ebe5\n.text:000000000040ebea\n.text:000000000040ebec\n.text:000000000040ebee\n.text:000000000040ebf3\n.text:000000000040ebf6\n.text:000000000040ebfb\n.text:000000000040ebfd\n.text:000000000040ec00\n.text:000000000040ec05\n.text:000000000040ec08\n.text:000000000040ec0a\n.text:000000000040ec10\n.text:000000000040ec13\n.text:000000000040ec17\n.text:000000000040ec18\n.text:000000000040ec1a\n.text:000000000040ec1c\n.text:000000000040ec1d\n'
p4584
tp4585
sS'nl_langinfo'
p4586
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p4587
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_0062d2f0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p4588
S'JMP qword ptr [0x0062d2f0]\n'
p4589
S'ff 25 4a a6 22 00\n'
p4590
S'.plt:0000000000402ca0\n'
p4591
tp4592
sS'restore_cwd'
p4593
(S'\n__stdcall restore_cwd(saved_cwd * cwd)\n'
p4594
V\u000aint restore_cwd(saved_cwd *cwd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (-1 < cwd->desc) {\u000a    iVar1 = fchdir(cwd->desc);\u000a    return iVar1;\u000a  }\u000a  iVar1 = chdir_long(cwd->name);\u000a  return iVar1;\u000a}\u000a\u000a
p4595
S'MOV EAX,dword ptr [RDI]\nTEST EAX,EAX\nJS 0x004169fd\nMOV EDI,EAX\nJMP 0x00402d10\nMOV RDI,qword ptr [RDI + 0x8]\nJMP 0x00417ad0\n'
p4596
S'8b 07\n85 c0\n78 07\n89 c7\ne9 13 c3 fe ff\n48 8b 7f 08\ne9 ca 10 00 00\n'
p4597
S'.text:00000000004169f0\n.text:00000000004169f2\n.text:00000000004169f4\n.text:00000000004169f6\n.text:00000000004169f8\n.text:00000000004169fd\n.text:0000000000416a01\n'
p4598
tp4599
sS'parse_cnewer'
p4600
(S'\n__stdcall parse_cnewer(parser_table * entry, char * * argv, int * arg_ptr)\n'
p4601
V\u000a_Bool parse_cnewer(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  predicate *ppVar2;\u000a  float fVar3;\u000a  timespec tVar4;\u000a  char *local_b8;\u000a  stat local_b0;\u000a  \u000a  set_stat_placeholders(&local_b0);\u000a  _Var1 = collect_arg_stat_info(argv,arg_ptr,&local_b0,&local_b8);\u000a  if (_Var1 != false) {\u000a    ppVar2 = insert_primary(entry,local_b8);\u000a    *(undefined4 *)ppVar2->args = 2;\u000a    tVar4 = get_stat_mtime(&local_b0);\u000a    *(long *)(ppVar2->args + 8) = SUB168((undefined  [16])tVar4,0);\u000a    *(long *)(ppVar2->args + 0x10) = SUB168((undefined  [16])tVar4 >> 0x40,0);\u000a    *(undefined4 *)(ppVar2->args + 4) = 0;\u000a    fVar3 = estimate_timestamp_success_rate(local_b0.st_mtim.tv_sec);\u000a    ppVar2->est_success_rate = fVar3;\u000a  }\u000a  return (_Bool)(_Var1 != false);\u000a}\u000a\u000a
p4602
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,RDX\nMOV RBX,RSI\nMOV R14,RDI\nLEA R12,[RSP + 0x8]\nMOV RDI,R12\nCALL 0x004079d0\nMOV RCX,RSP\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,R12\nCALL 0x0040c9b0\nTEST AL,AL\nJZ 0x0040b22b\nMOV RSI,qword ptr [RSP]\nMOV RDI,R14\nCALL 0x00407730\nMOV RBX,RAX\nMOV dword ptr [RBX + 0x38],0x2\nLEA RDI,[RSP + 0x8]\nCALL 0x00416c90\nMOV qword ptr [RBX + 0x40],RAX\nMOV qword ptr [RBX + 0x48],RDX\nMOV dword ptr [RBX + 0x3c],0x0\nMOV RDI,qword ptr [RSP + 0x60]\nCALL 0x0040ade0\nMOVSS dword ptr [RBX + 0x24],XMM0\nMOV AL,0x1\nJMP 0x0040b22d\nXOR EAX,EAX\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p4603
S'41 57\n41 56\n41 54\n53\n48 81 ec 98 00 00 00\n49 89 d7\n48 89 f3\n49 89 fe\n4c 8d 64 24 08\n4c 89 e7\ne8 fc c7 ff ff\n48 89 e1\n48 89 df\n4c 89 fe\n4c 89 e2\ne8 cb 17 00 00\n84 c0\n74 42\n48 8b 34 24\n4c 89 f7\ne8 3b c5 ff ff\n48 89 c3\nc7 43 38 02 00 00 00\n48 8d 7c 24 08\ne8 87 ba 00 00\n48 89 43 40\n48 89 53 48\nc7 43 3c 00 00 00 00\n48 8b 7c 24 60\ne8 be fb ff ff\nf3 0f 11 43 24\nb0 01\neb 02\n31 c0\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p4604
S'.text:000000000040b1b0\n.text:000000000040b1b2\n.text:000000000040b1b4\n.text:000000000040b1b6\n.text:000000000040b1b7\n.text:000000000040b1be\n.text:000000000040b1c1\n.text:000000000040b1c4\n.text:000000000040b1c7\n.text:000000000040b1cc\n.text:000000000040b1cf\n.text:000000000040b1d4\n.text:000000000040b1d7\n.text:000000000040b1da\n.text:000000000040b1dd\n.text:000000000040b1e0\n.text:000000000040b1e5\n.text:000000000040b1e7\n.text:000000000040b1e9\n.text:000000000040b1ed\n.text:000000000040b1f0\n.text:000000000040b1f5\n.text:000000000040b1f8\n.text:000000000040b1ff\n.text:000000000040b204\n.text:000000000040b209\n.text:000000000040b20d\n.text:000000000040b211\n.text:000000000040b218\n.text:000000000040b21d\n.text:000000000040b222\n.text:000000000040b227\n.text:000000000040b229\n.text:000000000040b22b\n.text:000000000040b22d\n.text:000000000040b234\n.text:000000000040b235\n.text:000000000040b237\n.text:000000000040b239\n.text:000000000040b23b\n'
p4605
tp4606
sS'parse_closeparen'
p4607
(S'\n__stdcall parse_closeparen(parser_table * entry, char * * argv, int * arg_ptr)\n'
p4608
V\u000a_Bool parse_closeparen(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  predicate *ppVar1;\u000a  \u000a  ppVar1 = get_new_pred_noarg(entry);\u000a  ppVar1->pred_func = pred_closeparen;\u000a  ppVar1->p_type = CLOSE_PAREN;\u000a  ppVar1->p_prec = NO_PREC;\u000a  *(undefined2 *)&ppVar1->need_stat = 0;\u000a  return true;\u000a}\u000a\u000a
p4609
S'PUSH RAX\nCALL 0x00406b00\nMOV qword ptr [RAX],0x403d50\nMOV dword ptr [RAX + 0x10],0x5\nMOV dword ptr [RAX + 0x14],0x0\nMOV word ptr [RAX + 0x1a],0x0\nMOV AL,0x1\nPOP RCX\nRET\n'
p4610
S'50\ne8 fa c1 ff ff\n48 c7 00 50 3d 40 00\nc7 40 10 05 00 00 00\nc7 40 14 00 00 00 00\n66 c7 40 1a 00 00\nb0 01\n59\nc3\n'
p4611
S'.text:000000000040a900\n.text:000000000040a901\n.text:000000000040a906\n.text:000000000040a90d\n.text:000000000040a914\n.text:000000000040a91b\n.text:000000000040a921\n.text:000000000040a923\n.text:000000000040a924\n'
p4612
tp4613
sS'debug_stat'
p4614
(S'\n__stdcall debug_stat(char * file, stat * bufp)\n'
p4615
V\u000aint debug_stat(char *file,stat *bufp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  stat_count = stat_count + 1;\u000a  fprintf(stderr,"debug_stat (%s)\u005cn",file);\u000a  if (options.symlink_handling == SYMLINK_NEVER_DEREF) {\u000a    iVar1 = optionp_stat(file,bufp);\u000a    return iVar1;\u000a  }\u000a  if (options.symlink_handling != SYMLINK_DEREF_ARGSONLY) {\u000a    if (options.symlink_handling == SYMLINK_ALWAYS_DEREF) {\u000a      iVar1 = optionl_stat(file,bufp);\u000a      return iVar1;\u000a    }\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0","util.c",0x2c7,"int debug_stat(const char *, struct stat *)");\u000a  }\u000a  iVar1 = optionh_stat(file,bufp);\u000a  return iVar1;\u000a}\u000a\u000a
p4616
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nINC qword ptr [0x0062dec0]\nMOV RDI,qword ptr [0x0062de60]\nMOV ESI,0x41e822\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00402ba0\nMOV EAX,dword ptr [0x0062f088]\nTEST EAX,EAX\nJZ 0x004081ed\nCMP EAX,0x2\nJZ 0x004081ff\nCMP EAX,0x1\nJNZ 0x00408211\nMOV RDI,RBX\nMOV RSI,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x004080f0\nMOV RDI,RBX\nMOV RSI,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00408160\nMOV RDI,RBX\nMOV RSI,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00408010\nMOV EDI,0x41cdbe\nMOV ESI,0x41e01b\nMOV EDX,0x2c7\nMOV ECX,0x41e833\nCALL 0x00402a40\n'
p4617
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n48 ff 05 0f 5d 22 00\n48 8b 3d a8 5c 22 00\nbe 22 e8 41 00\n31 c0\n48 89 da\ne8 d9 a9 ff ff\n8b 05 bb 6e 22 00\n85 c0\n74 1c\n83 f8 02\n74 29\n83 f8 01\n75 36\n48 89 df\n4c 89 f6\n48 83 c4 08\n5b\n41 5e\ne9 03 ff ff ff\n48 89 df\n4c 89 f6\n48 83 c4 08\n5b\n41 5e\ne9 61 ff ff ff\n48 89 df\n4c 89 f6\n48 83 c4 08\n5b\n41 5e\ne9 ff fd ff ff\nbf be cd 41 00\nbe 1b e0 41 00\nba c7 02 00 00\nb9 33 e8 41 00\ne8 16 a8 ff ff\n'
p4618
S'.text:00000000004081a0\n.text:00000000004081a2\n.text:00000000004081a3\n.text:00000000004081a4\n.text:00000000004081a7\n.text:00000000004081aa\n.text:00000000004081b1\n.text:00000000004081b8\n.text:00000000004081bd\n.text:00000000004081bf\n.text:00000000004081c2\n.text:00000000004081c7\n.text:00000000004081cd\n.text:00000000004081cf\n.text:00000000004081d1\n.text:00000000004081d4\n.text:00000000004081d6\n.text:00000000004081d9\n.text:00000000004081db\n.text:00000000004081de\n.text:00000000004081e1\n.text:00000000004081e5\n.text:00000000004081e6\n.text:00000000004081e8\n.text:00000000004081ed\n.text:00000000004081f0\n.text:00000000004081f3\n.text:00000000004081f7\n.text:00000000004081f8\n.text:00000000004081fa\n.text:00000000004081ff\n.text:0000000000408202\n.text:0000000000408205\n.text:0000000000408209\n.text:000000000040820a\n.text:000000000040820c\n.text:0000000000408211\n.text:0000000000408216\n.text:000000000040821b\n.text:0000000000408220\n.text:0000000000408225\n'
p4619
tp4620
sS'bc_args_exceed_testing_limit'
p4621
(S'\n__stdcall bc_args_exceed_testing_limit(char * * argv)\n'
p4622
V\u000a_Bool bc_args_exceed_testing_limit(char **argv)\u000a\u000a{\u000a  int iVar1;\u000a  size_t sVar2;\u000a  size_t quantity;\u000a  char *__s;\u000a  size_t quantity_00;\u000a  bool bVar3;\u000a  \u000a  __s = *argv;\u000a  if (__s == (char *)0x0) {\u000a    quantity_00 = 0;\u000a    quantity = 0;\u000a  }\u000a  else {\u000a    quantity = 0;\u000a    quantity_00 = 0;\u000a    do {\u000a      sVar2 = strlen(__s);\u000a      quantity_00 = quantity_00 + sVar2;\u000a      __s = argv[quantity + 1];\u000a      quantity = quantity + 1;\u000a    } while (__s != (char *)0x0);\u000a  }\u000a  iVar1 = exceeds("__GNU_FINDUTILS_EXEC_ARG_COUNT_LIMIT",quantity);\u000a  bVar3 = true;\u000a  if (iVar1 == 0) {\u000a    iVar1 = exceeds("__GNU_FINDUTILS_EXEC_ARG_LENGTH_LIMIT",quantity_00);\u000a    bVar3 = iVar1 != 0;\u000a  }\u000a  return (_Bool)bVar3;\u000a}\u000a\u000a
p4623
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nMOV RDI,qword ptr [R15]\nTEST RDI,RDI\nJZ 0x0040e3e7\nXOR EBX,EBX\nXOR R14D,R14D\nNOP dword ptr CS:[RAX + RAX*0x1]\nCALL 0x00402930\nADD R14,RAX\nMOV RDI,qword ptr [R15 + RBX*0x8 + 0x8]\nINC RBX\nTEST RDI,RDI\nJNZ 0x0040e3d0\nJMP 0x0040e3ec\nXOR R14D,R14D\nXOR EBX,EBX\nMOV EDI,0x421ed1\nMOV RSI,RBX\nCALL 0x0040e420\nMOV ECX,EAX\nMOV AL,0x1\nTEST ECX,ECX\nJNZ 0x0040e413\nMOV EDI,0x421ef6\nMOV RSI,R14\nCALL 0x0040e420\nTEST EAX,EAX\nSETNZ AL\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p4624
S'41 57\n41 56\n53\n49 89 ff\n49 8b 3f\n48 85 ff\n74 27\n31 db\n45 31 f6\n66 66 2e 0f 1f 84 00 00 00 00 00\ne8 5b 45 ff ff\n49 01 c6\n49 8b 7c df 08\n48 ff c3\n48 85 ff\n75 eb\neb 05\n45 31 f6\n31 db\nbf d1 1e 42 00\n48 89 de\ne8 27 00 00 00\n89 c1\nb0 01\n85 c9\n75 12\nbf f6 1e 42 00\n4c 89 f6\ne8 12 00 00 00\n85 c0\n0f 95 c0\n5b\n41 5e\n41 5f\nc3\n'
p4625
S'.text:000000000040e3b0\n.text:000000000040e3b2\n.text:000000000040e3b4\n.text:000000000040e3b5\n.text:000000000040e3b8\n.text:000000000040e3bb\n.text:000000000040e3be\n.text:000000000040e3c0\n.text:000000000040e3c2\n.text:000000000040e3c5\n.text:000000000040e3d0\n.text:000000000040e3d5\n.text:000000000040e3d8\n.text:000000000040e3dd\n.text:000000000040e3e0\n.text:000000000040e3e3\n.text:000000000040e3e5\n.text:000000000040e3e7\n.text:000000000040e3ea\n.text:000000000040e3ec\n.text:000000000040e3f1\n.text:000000000040e3f4\n.text:000000000040e3f9\n.text:000000000040e3fb\n.text:000000000040e3fd\n.text:000000000040e3ff\n.text:000000000040e401\n.text:000000000040e406\n.text:000000000040e409\n.text:000000000040e40e\n.text:000000000040e410\n.text:000000000040e413\n.text:000000000040e414\n.text:000000000040e416\n.text:000000000040e418\n'
p4626
tp4627
sS'quotearg_n_style_mem'
p4628
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p4629
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p4630
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x004162d0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004160a0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p4631
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p4632
S'.text:0000000000416330\n.text:0000000000416331\n.text:0000000000416333\n.text:0000000000416335\n.text:0000000000416336\n.text:000000000041633a\n.text:000000000041633d\n.text:0000000000416340\n.text:0000000000416342\n.text:0000000000416345\n.text:0000000000416348\n.text:000000000041634d\n.text:000000000041634f\n.text:0000000000416352\n.text:0000000000416355\n.text:0000000000416358\n.text:000000000041635d\n.text:0000000000416361\n.text:0000000000416362\n.text:0000000000416364\n.text:0000000000416366\n.text:0000000000416367\n'
p4633
tp4634
sS'bsearch'
p4635
(S'\n__stdcall bsearch(void * __key, void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)\n'
p4636
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * bsearch(void *__key,void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_bsearch_0062d420)();\u000a  return pvVar1;\u000a}\u000a\u000a
p4637
S'JMP qword ptr [0x0062d420]\n'
p4638
S'ff 25 1a a5 22 00\n'
p4639
S'.plt:0000000000402f00\n'
p4640
tp4641
sS'free_entry'
p4642
(S'\n__stdcall free_entry(Hash_table * table, hash_entry * entry)\n'
p4643
V\u000avoid free_entry(Hash_table *table,hash_entry *entry)\u000a\u000a{\u000a  entry->data = (void *)0x0;\u000a  entry->next = table->free_entry_list;\u000a  table->free_entry_list = entry;\u000a  return;\u000a}\u000a\u000a
p4644
S'MOV qword ptr [RSI],0x0\nMOV RAX,qword ptr [RDI + 0x48]\nMOV qword ptr [RSI + 0x8],RAX\nMOV qword ptr [RDI + 0x48],RSI\nRET\n'
p4645
S'48 c7 06 00 00 00 00\n48 8b 47 48\n48 89 46 08\n48 89 77 48\nc3\n'
p4646
S'.text:0000000000411350\n.text:0000000000411357\n.text:000000000041135b\n.text:000000000041135f\n.text:0000000000411363\n'
p4647
tp4648
sS'do_complete_pending_execdirs'
p4649
(S'\n__stdcall do_complete_pending_execdirs(predicate * p)\n'
p4650
V\u000avoid do_complete_pending_execdirs(predicate *p)\u000a\u000a{\u000a  if (p != (predicate *)0x0) {\u000a    do {\u000a      if (state.execdirs_outstanding == false) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("state.execdirs_outstanding","util.c",0x1a2,\u000a                      "void do_complete_pending_execdirs(struct predicate *)");\u000a      }\u000a      do_complete_pending_execdirs(p->pred_left);\u000a      if ((((p->pred_func == pred_execdir) || (p->pred_func == pred_okdir)) && (p->args[0] != 0)) &&\u000a         (*(int *)(p->args + 0x98) != 0)) {\u000a        do_exec((exec_val *)p->args);\u000a      }\u000a      p = p->pred_right;\u000a    } while (p != (predicate *)0x0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p4651
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00407cbc\nMOV R14D,0x404040\nMOV R15D,0x4044a0\nNOP dword ptr [RAX]\nCMP byte ptr [0x0062f028],0x0\nJZ 0x00407cc2\nMOV RDI,qword ptr [0x110 + RBX]\nCALL 0x00407c50\nMOV RAX,qword ptr [RBX]\nCMP RAX,R14\nJZ 0x00407c92\nCMP RAX,R15\nJNZ 0x00407cb0\nCMP byte ptr [RBX + 0x38],0x0\nJZ 0x00407cb0\nCMP dword ptr [0xd0 + RBX],0x0\nJZ 0x00407cb0\nLEA RDI,[RBX + 0x38]\nCALL 0x004089f0\nNOP word ptr [RAX + RAX*0x1]\nMOV RBX,qword ptr [0x118 + RBX]\nTEST RBX,RBX\nJNZ 0x00407c70\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOV EDI,0x41ead3\nMOV ESI,0x41e01b\nMOV EDX,0x1a2\nMOV ECX,0x41eaee\nCALL 0x00402a40\n'
p4652
S'41 57\n41 56\n53\n48 89 fb\n48 85 db\n74 5f\n41 be 40 40 40 00\n41 bf a0 44 40 00\n0f 1f 80 00 00 00 00\n80 3d b1 73 22 00 00\n74 49\n48 8b bb 10 01 00 00\ne8 cb ff ff ff\n48 8b 03\n4c 39 f0\n74 05\n4c 39 f8\n75 1e\n80 7b 38 00\n74 18\n83 bb d0 00 00 00 00\n74 0f\n48 8d 7b 38\ne8 46 0d 00 00\n66 0f 1f 44 00 00\n48 8b 9b 18 01 00 00\n48 85 db\n75 b4\n5b\n41 5e\n41 5f\nc3\nbf d3 ea 41 00\nbe 1b e0 41 00\nba a2 01 00 00\nb9 ee ea 41 00\ne8 65 ad ff ff\n'
p4653
S'.text:0000000000407c50\n.text:0000000000407c52\n.text:0000000000407c54\n.text:0000000000407c55\n.text:0000000000407c58\n.text:0000000000407c5b\n.text:0000000000407c5d\n.text:0000000000407c63\n.text:0000000000407c69\n.text:0000000000407c70\n.text:0000000000407c77\n.text:0000000000407c79\n.text:0000000000407c80\n.text:0000000000407c85\n.text:0000000000407c88\n.text:0000000000407c8b\n.text:0000000000407c8d\n.text:0000000000407c90\n.text:0000000000407c92\n.text:0000000000407c96\n.text:0000000000407c98\n.text:0000000000407c9f\n.text:0000000000407ca1\n.text:0000000000407ca5\n.text:0000000000407caa\n.text:0000000000407cb0\n.text:0000000000407cb7\n.text:0000000000407cba\n.text:0000000000407cbc\n.text:0000000000407cbd\n.text:0000000000407cbf\n.text:0000000000407cc1\n.text:0000000000407cc2\n.text:0000000000407cc7\n.text:0000000000407ccc\n.text:0000000000407cd1\n.text:0000000000407cd6\n'
p4654
tp4655
sS'unlinkat'
p4656
(S'\n__stdcall unlinkat(int __fd, char * __name, int __flag)\n'
p4657
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint unlinkat(int __fd,char *__name,int __flag)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_unlinkat_0062d090)();\u000a  return iVar1;\u000a}\u000a\u000a
p4658
S'JMP qword ptr [0x0062d090]\n'
p4659
S'ff 25 aa a8 22 00\n'
p4660
S'.plt:00000000004027e0\n'
p4661
tp4662
sS'parse_context'
p4663
(S'\n__stdcall parse_context(parser_table * entry, char * * argv, int * arg_ptr)\n'
p4664
V\u000a_Bool parse_context(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  long lVar1;\u000a  undefined8 uVar2;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  \u000a  if ((argv != (char **)0x0) && (lVar1 = (long)*arg_ptr, argv[lVar1] != (char *)0x0)) {\u000a    uVar2 = dcgettext(0,"invalid predicate -context: SELinux is not enabled.",5);\u000a    error(1,0,uVar2,uVar2,in_R8,in_R9,lVar1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p4665
S'TEST RSI,RSI\nJZ 0x0040b279\nMOVSXD RAX,dword ptr [RDX]\nCMP qword ptr [RSI + RAX*0x8],0x0\nJZ 0x0040b279\nPUSH RAX\nXOR EDI,EDI\nMOV ESI,0x42110e\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402d90\nADD RSP,0x8\nXOR EAX,EAX\nRET\n'
p4666
S'48 85 f6\n74 34\n48 63 02\n48 83 3c c6 00\n74 2a\n50\n31 ff\nbe 0e 11 42 00\nba 05 00 00 00\ne8 af 76 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 1b 7b ff ff\n48 83 c4 08\n31 c0\nc3\n'
p4667
S'.text:000000000040b240\n.text:000000000040b243\n.text:000000000040b245\n.text:000000000040b248\n.text:000000000040b24d\n.text:000000000040b24f\n.text:000000000040b250\n.text:000000000040b252\n.text:000000000040b257\n.text:000000000040b25c\n.text:000000000040b261\n.text:000000000040b264\n.text:000000000040b269\n.text:000000000040b26b\n.text:000000000040b26d\n.text:000000000040b270\n.text:000000000040b275\n.text:000000000040b279\n.text:000000000040b27b\n'
p4668
tp4669
sS'get_regex_type_context'
p4670
(S'\n__stdcall get_regex_type_context()\n'
p4671
V\u000auint get_regex_type_context(void)\u000a\u000a{\u000a  uint uVar1;\u000a  uint in_EDI;\u000a  \u000a  uVar1 = 0;\u000a  if (in_EDI < 0xd) {\u000a    uVar1 = regex_map[(ulong)in_EDI].context;\u000a  }\u000a  return uVar1;\u000a}\u000a\u000a
p4672
S'XOR EAX,EAX\nCMP EDI,0xc\nJA 0x0040f9d3\nMOV EAX,EDI\nSHL RAX,0x4\nMOV EAX,dword ptr [0x62dcd8 + RAX]\nRET\n'
p4673
S'31 c0\n83 ff 0c\n77 0c\n89 f8\n48 c1 e0 04\n8b 80 d8 dc 62 00\nc3\n'
p4674
S'.text:000000000040f9c0\n.text:000000000040f9c2\n.text:000000000040f9c5\n.text:000000000040f9c7\n.text:000000000040f9c9\n.text:000000000040f9cd\n.text:000000000040f9d3\n'
p4675
tp4676
sS'fts_set'
p4677
(S'\n__stdcall fts_set(FTS * sp, FTSENT * p)\n'
p4678
V\u000aint fts_set(FTS *sp,FTSENT *p)\u000a\u000a{\u000a  int *piVar1;\u000a  uint in_EDX;\u000a  \u000a  if (4 < in_EDX) {\u000a    piVar1 = __errno_location();\u000a    *piVar1 = 0x16;\u000a    return 1;\u000a  }\u000a  p->fts_instr = (unsigned_short)in_EDX;\u000a  return 0;\u000a}\u000a\u000a
p4679
S'CMP EDX,0x5\nJC 0x00419bfb\nPUSH RAX\nCALL 0x00402770\nMOV dword ptr [RAX],0x16\nMOV EAX,0x1\nADD RSP,0x8\nRET\nMOV word ptr [RSI + 0x74],DX\nXOR EAX,EAX\nRET\n'
p4680
S'83 fa 05\n72 16\n50\ne8 85 8b fe ff\nc7 00 16 00 00 00\nb8 01 00 00 00\n48 83 c4 08\nc3\n66 89 56 74\n31 c0\nc3\n'
p4681
S'.text:0000000000419be0\n.text:0000000000419be3\n.text:0000000000419be5\n.text:0000000000419be6\n.text:0000000000419beb\n.text:0000000000419bf1\n.text:0000000000419bf6\n.text:0000000000419bfa\n.text:0000000000419bfb\n.text:0000000000419bff\n.text:0000000000419c01\n'
p4682
tp4683
sS'parse_accesscheck'
p4684
(S'\n__stdcall parse_accesscheck(parser_table * entry, char * * argv, int * arg_ptr)\n'
p4685
V\u000a_Bool parse_accesscheck(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  predicate *ppVar1;\u000a  \u000a  ppVar1 = insert_primary_noarg(entry);\u000a  *(undefined4 *)&ppVar1->side_effects = 0;\u000a  ppVar1->est_success_rate =\u000a       *(float *)(&DAT_0041fbc0 + (ulong)(ppVar1->pred_func == pred_executable) * 4);\u000a  return true;\u000a}\u000a\u000a
p4686
S'PUSH RAX\nCALL 0x00407760\nMOV dword ptr [RAX + 0x18],0x0\nMOV ECX,0x404050\nXOR EDX,EDX\nCMP qword ptr [RAX],RCX\nSETZ DL\nMOVSS XMM0,dword ptr [0x41fbc0 + RDX*0x4]\nMOVSS dword ptr [RAX + 0x24],XMM0\nMOV AL,0x1\nPOP RCX\nRET\n'
p4687
S'50\ne8 5a c3 ff ff\nc7 40 18 00 00 00 00\nb9 50 40 40 00\n31 d2\n48 39 08\n0f 94 c2\nf3 0f 10 04 95 c0 fb 41 00\nf3 0f 11 40 24\nb0 01\n59\nc3\n'
p4688
S'.text:000000000040b400\n.text:000000000040b401\n.text:000000000040b406\n.text:000000000040b40d\n.text:000000000040b412\n.text:000000000040b414\n.text:000000000040b417\n.text:000000000040b41a\n.text:000000000040b423\n.text:000000000040b428\n.text:000000000040b42a\n.text:000000000040b42b\n'
p4689
tp4690
sS'c_isxdigit'
p4691
(S'\n__stdcall c_isxdigit()\n'
p4692
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p4693
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x0041ba6b\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p4694
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p4695
S'.text:000000000041ba50\n.text:000000000041ba53\n.text:000000000041ba56\n.text:000000000041ba58\n.text:000000000041ba62\n.text:000000000041ba64\n.text:000000000041ba67\n.text:000000000041ba6a\n.text:000000000041ba6b\n.text:000000000041ba6d\n'
p4696
tp4697
sS'parse_regextype'
p4698
(S'\n__stdcall parse_regextype(parser_table * entry, char * * argv, int * arg_ptr)\n'
p4699
V\u000a_Bool parse_regextype(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  char *in_RAX;\u000a  char *local_18;\u000a  \u000a  local_18 = in_RAX;\u000a  _Var1 = collect_arg(argv,arg_ptr,&local_18);\u000a  if (_Var1 != false) {\u000a    options.regex_options = get_regex_type(local_18);\u000a    parse_noop();\u000a  }\u000a  return (_Bool)(_Var1 != false);\u000a}\u000a\u000a
p4700
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV RBX,RSI\nMOV RDX,RSP\nMOV RDI,RBX\nMOV RSI,R14\nCALL 0x0040c7f0\nTEST AL,AL\nJZ 0x0040c00a\nMOV RDI,qword ptr [RSP]\nCALL 0x0040f870\nMOV dword ptr [0x0062f09c],EAX\nMOV RDI,RBX\nMOV RSI,R14\nCALL 0x0040ca00\nMOV AL,0x1\nJMP 0x0040c00c\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p4701
S'41 56\n53\n50\n49 89 d6\n48 89 f3\n48 89 e2\n48 89 df\n4c 89 f6\ne8 08 08 00 00\n84 c0\n74 1e\n48 8b 3c 24\ne8 7b 38 00 00\n89 05 a1 30 22 00\n48 89 df\n4c 89 f6\ne8 fa 09 00 00\nb0 01\neb 02\n31 c0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p4702
S'.text:000000000040bfd0\n.text:000000000040bfd2\n.text:000000000040bfd3\n.text:000000000040bfd4\n.text:000000000040bfd7\n.text:000000000040bfda\n.text:000000000040bfdd\n.text:000000000040bfe0\n.text:000000000040bfe3\n.text:000000000040bfe8\n.text:000000000040bfea\n.text:000000000040bfec\n.text:000000000040bff0\n.text:000000000040bff5\n.text:000000000040bffb\n.text:000000000040bffe\n.text:000000000040c001\n.text:000000000040c006\n.text:000000000040c008\n.text:000000000040c00a\n.text:000000000040c00c\n.text:000000000040c010\n.text:000000000040c011\n.text:000000000040c013\n'
p4703
tp4704
sS'abort'
p4705
(S'\n__stdcall abort()\n'
p4706
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_0062d048)();\u000a  return;\u000a}\u000a\u000a
p4707
S'JMP qword ptr [0x0062d048]\n'
p4708
S'ff 25 f2 a8 22 00\n'
p4709
S'.plt:0000000000402750\n'
p4710
tp4711
sS'group_number'
p4712
(S'\n__stdcall group_number(char * number, size_t numberlen, char * grouping, char * thousands_sep)\n'
p4713
V\u000achar * group_number(char *number,size_t numberlen,char *grouping,char *thousands_sep)\u000a\u000a{\u000a  byte bVar1;\u000a  size_t __n;\u000a  ulong __n_00;\u000a  char buf [41];\u000a  undefined local_68 [56];\u000a  \u000a  __n = strlen(thousands_sep);\u000a  memcpy(local_68,number,numberlen);\u000a  number = number + numberlen;\u000a  __n_00 = 0xffffffffffffffff;\u000a  while( true ) {\u000a    bVar1 = *grouping;\u000a    if (bVar1 != 0) {\u000a      __n_00 = (ulong)bVar1;\u000a      if (0x7e < bVar1) {\u000a        __n_00 = numberlen;\u000a      }\u000a      grouping = (char *)((byte *)grouping + 1);\u000a    }\u000a    if (numberlen < __n_00) {\u000a      __n_00 = numberlen;\u000a    }\u000a    number = number + -__n_00;\u000a    memcpy(number,local_68 + (numberlen - __n_00),__n_00);\u000a    numberlen = numberlen - __n_00;\u000a    if (numberlen == 0) break;\u000a    number = number + -__n;\u000a    memcpy(number,thousands_sep,__n);\u000a  }\u000a  return number;\u000a}\u000a\u000a
p4714
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x48\nMOV R15,RDX\nMOV R12,RSI\nMOV RBX,RDI\nMOV qword ptr [RSP + 0x8],RCX\nMOV RDI,RCX\nCALL 0x00402930\nMOV R14,RAX\nLEA RDI,[RSP + 0x10]\nMOV RSI,RBX\nMOV RDX,R12\nCALL 0x00402bd0\nADD RBX,R12\nMOV R13,R14\nNEG R13\nMOV RBP,-0x1\nJMP 0x00411a73\nADD RBX,R13\nMOV RDI,RBX\nMOV RSI,qword ptr [RSP + 0x8]\nMOV RDX,R14\nCALL 0x00402bd0\nMOVZX EAX,byte ptr [R15]\nTEST RAX,RAX\nJZ 0x00411a88\nCMP AL,0x7f\nCMOVNC RAX,R12\nINC R15\nMOV RBP,RAX\nCMP R12,RBP\nCMOVC RBP,R12\nSUB RBX,RBP\nMOV RAX,R12\nSUB RAX,RBP\nLEA RSI,[RSP + RAX*0x1 + 0x10]\nMOV RDI,RBX\nMOV RDX,RBP\nCALL 0x00402bd0\nSUB R12,RBP\nJNZ 0x00411a60\nMOV RAX,RBX\nADD RSP,0x48\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p4715
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 48\n49 89 d7\n49 89 f4\n48 89 fb\n48 89 4c 24 08\n48 89 cf\ne8 fc 0e ff ff\n49 89 c6\n48 8d 7c 24 10\n48 89 de\n4c 89 e2\ne8 89 11 ff ff\n4c 01 e3\n4d 89 f5\n49 f7 dd\n48 c7 c5 ff ff ff ff\neb 1a\n4c 01 eb\n48 89 df\n48 8b 74 24 08\n4c 89 f2\ne8 5d 11 ff ff\n41 0f b6 07\n48 85 c0\n74 0c\n3c 7f\n49 0f 43 c4\n49 ff c7\n48 89 c5\n49 39 ec\n49 0f 42 ec\n48 29 eb\n4c 89 e0\n48 29 e8\n48 8d 74 04 10\n48 89 df\n48 89 ea\ne8 28 11 ff ff\n49 29 ec\n75 b3\n48 89 d8\n48 83 c4 48\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p4716
S'.text:0000000000411a10\n.text:0000000000411a11\n.text:0000000000411a13\n.text:0000000000411a15\n.text:0000000000411a17\n.text:0000000000411a19\n.text:0000000000411a1a\n.text:0000000000411a1e\n.text:0000000000411a21\n.text:0000000000411a24\n.text:0000000000411a27\n.text:0000000000411a2c\n.text:0000000000411a2f\n.text:0000000000411a34\n.text:0000000000411a37\n.text:0000000000411a3c\n.text:0000000000411a3f\n.text:0000000000411a42\n.text:0000000000411a47\n.text:0000000000411a4a\n.text:0000000000411a4d\n.text:0000000000411a50\n.text:0000000000411a57\n.text:0000000000411a60\n.text:0000000000411a63\n.text:0000000000411a66\n.text:0000000000411a6b\n.text:0000000000411a6e\n.text:0000000000411a73\n.text:0000000000411a77\n.text:0000000000411a7a\n.text:0000000000411a7c\n.text:0000000000411a7e\n.text:0000000000411a82\n.text:0000000000411a85\n.text:0000000000411a88\n.text:0000000000411a8b\n.text:0000000000411a8f\n.text:0000000000411a92\n.text:0000000000411a95\n.text:0000000000411a98\n.text:0000000000411a9d\n.text:0000000000411aa0\n.text:0000000000411aa3\n.text:0000000000411aa8\n.text:0000000000411aab\n.text:0000000000411aad\n.text:0000000000411ab0\n.text:0000000000411ab4\n.text:0000000000411ab5\n.text:0000000000411ab7\n.text:0000000000411ab9\n.text:0000000000411abb\n.text:0000000000411abd\n.text:0000000000411abe\n'
p4717
tp4718
sS'pred_amin'
p4719
(S'\n__stdcall pred_amin(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p4720
V\u000a_Bool pred_amin(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  timespec tVar2;\u000a  \u000a  tVar2 = get_stat_atime(stat_buf);\u000a  _Var1 = pred_timewindow(SUB168((undefined  [16])tVar2,0));\u000a  return _Var1;\u000a}\u000a\u000a
p4721
S'PUSH RBX\nMOV RBX,RDX\nMOV RDI,RSI\nCALL 0x00416c70\nMOV ECX,0x3c\nMOV RDI,RAX\nMOV RSI,RDX\nMOV RDX,RBX\nPOP RBX\nJMP 0x00404a30\n'
p4722
S'53\n48 89 d3\n48 89 f7\ne8 f4 2f 01 00\nb9 3c 00 00 00\n48 89 c7\n48 89 d6\n48 89 da\n5b\ne9 a0 0d 00 00\n'
p4723
S'.text:0000000000403c70\n.text:0000000000403c71\n.text:0000000000403c74\n.text:0000000000403c77\n.text:0000000000403c7c\n.text:0000000000403c81\n.text:0000000000403c84\n.text:0000000000403c87\n.text:0000000000403c8a\n.text:0000000000403c8b\n'
p4724
tp4725
sS'opendir'
p4726
(S'\n__stdcall opendir(char * __name)\n'
p4727
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aDIR * opendir(char *__name)\u000a\u000a{\u000a  DIR *pDVar1;\u000a  \u000a  pDVar1 = (DIR *)(*(code *)PTR_opendir_0062d108)();\u000a  return pDVar1;\u000a}\u000a\u000a
p4728
S'JMP qword ptr [0x0062d108]\n'
p4729
S'ff 25 32 a8 22 00\n'
p4730
S'.plt:00000000004028d0\n'
p4731
tp4732
sS'compute_bucket_size'
p4733
(S'\n__stdcall compute_bucket_size(size_t candidate, Hash_tuning * tuning)\n'
p4734
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000asize_t compute_bucket_size(size_t candidate,Hash_tuning *tuning)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  float fVar3;\u000a  \u000a  if (tuning->is_n_buckets == false) {\u000a    if ((long)candidate < 0) {\u000a      fVar3 = (float)((ulong)((uint)candidate & 1) | candidate >> 1);\u000a      fVar3 = fVar3 + fVar3;\u000a    }\u000a    else {\u000a      fVar3 = (float)candidate;\u000a    }\u000a    fVar3 = fVar3 / tuning->growth_threshold;\u000a    candidate = (long)fVar3;\u000a    if (DAT_00422830 <= fVar3) {\u000a      candidate = (long)(fVar3 - DAT_00422830) ^ 0x8000000000000000;\u000a    }\u000a    if (_DAT_00422834 <= fVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  sVar1 = next_prime(candidate);\u000a  sVar2 = 0;\u000a  if (SUB168(ZEXT816(sVar1) * ZEXT816(8) >> 0x40,0) == 0) {\u000a    sVar2 = sVar1;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p4735
S'CMP byte ptr [RSI + 0x10],0x0\nJNZ 0x004109e2\nTEST RDI,RDI\nJS 0x00410992\nCVTSI2SS XMM0,RDI\nJMP 0x004109a7\nMOV RAX,RDI\nSHR RAX,1\nAND EDI,0x1\nOR RDI,RAX\nCVTSI2SS XMM0,RDI\nADDSS XMM0,XMM0\nDIVSS XMM0,dword ptr [RSI + 0x8]\nMOVSS XMM1,dword ptr [0x00422830]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RDI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RDI,RCX\nUCOMISS XMM0,dword ptr [0x00422834]\nJNC 0x00410a01\nPUSH RAX\nCALL 0x00411280\nMOV RSI,RAX\nMOV EDX,0x8\nXOR ECX,ECX\nMUL RDX\nCMOVNO RCX,RSI\nADD RSP,0x8\nMOV RAX,RCX\nRET\nXOR ECX,ECX\nMOV RAX,RCX\nRET\n'
p4736
S'80 7e 10 00\n75 5c\n48 85 ff\n78 07\nf3 48 0f 2a c7\neb 15\n48 89 f8\n48 d1 e8\n83 e7 01\n48 09 c7\nf3 48 0f 2a c7\nf3 0f 58 c0\nf3 0f 5e 46 08\nf3 0f 10 0d 7c 1e 01 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f8\n0f 2e c1\n48 0f 43 f9\n0f 2e 05 54 1e 01 00\n73 1f\n50\ne8 98 08 00 00\n48 89 c6\nba 08 00 00 00\n31 c9\n48 f7 e2\n48 0f 41 ce\n48 83 c4 08\n48 89 c8\nc3\n31 c9\n48 89 c8\nc3\n'
p4737
S'.text:0000000000410980\n.text:0000000000410984\n.text:0000000000410986\n.text:0000000000410989\n.text:000000000041098b\n.text:0000000000410990\n.text:0000000000410992\n.text:0000000000410995\n.text:0000000000410998\n.text:000000000041099b\n.text:000000000041099e\n.text:00000000004109a3\n.text:00000000004109a7\n.text:00000000004109ac\n.text:00000000004109b4\n.text:00000000004109b7\n.text:00000000004109bb\n.text:00000000004109c0\n.text:00000000004109ca\n.text:00000000004109cd\n.text:00000000004109d2\n.text:00000000004109d5\n.text:00000000004109d9\n.text:00000000004109e0\n.text:00000000004109e2\n.text:00000000004109e3\n.text:00000000004109e8\n.text:00000000004109eb\n.text:00000000004109f0\n.text:00000000004109f2\n.text:00000000004109f5\n.text:00000000004109f9\n.text:00000000004109fd\n.text:0000000000410a00\n.text:0000000000410a01\n.text:0000000000410a03\n.text:0000000000410a06\n'
p4738
tp4739
sS'openat_proc_name'
p4740
(S'\n__stdcall openat_proc_name(char * buf, char * file)\n'
p4741
V\u000achar * openat_proc_name(char *buf,char *file)\u000a\u000a{\u000a  int proc_status;\u000a  uint __fd;\u000a  int iVar1;\u000a  size_t sVar2;\u000a  char *__s;\u000a  char dotdot_buf [32];\u000a  char acStack72 [32];\u000a  \u000a  if (*__s == 0) {\u000a    *buf = 0;\u000a    return buf;\u000a  }\u000a  if (proc_status == 0) {\u000a    __fd = open("/proc/self/fd",0x10900);\u000a    if ((int)__fd < 0) {\u000a      return (char *)0x0;\u000a    }\u000a    sprintf(acStack72,"/proc/self/fd/%d/../fd",(ulong)__fd);\u000a    iVar1 = access(acStack72,0);\u000a    proc_status = ~-(uint)(iVar1 == 0) | 1;\u000a    close(__fd);\u000a  }\u000a  if (-1 < proc_status) {\u000a    sVar2 = strlen(__s);\u000a    if ((sVar2 + 0x1b < 0xfc1) || (buf = (char *)malloc(sVar2 + 0x1b), buf != (char *)0x0)) {\u000a      iVar1 = sprintf(buf,"/proc/self/fd/%d/",(ulong)file & 0xffffffff);\u000a      strcpy(buf + (long)iVar1,__s);\u000a      return buf;\u000a    }\u000a  }\u000a  return (char *)0x0;\u000a}\u000a\u000a
p4742
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x20\nMOV R14,RDX\nMOV R15D,ESI\nMOV RBX,RDI\nCMP byte ptr [R14],0x0\nJZ 0x0041c3b9\nMOV EAX,dword ptr [0x0062eff8]\nTEST EAX,EAX\nJNZ 0x0041c36f\nMOV EDI,0x422101\nMOV ESI,0x10900\nXOR EAX,EAX\nCALL 0x00402dc0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0041c3be\nMOV R12,RSP\nMOV ESI,0x425920\nXOR EAX,EAX\nMOV RDI,R12\nMOV EDX,EBP\nCALL 0x00402ec0\nXOR ESI,ESI\nMOV RDI,R12\nCALL 0x00402dd0\nCMP EAX,0x1\nSBB EAX,EAX\nNOT EAX\nOR EAX,0x1\nMOV dword ptr [0x0062eff8],EAX\nMOV EDI,EBP\nCALL 0x00402ac0\nMOV EAX,dword ptr [0x0062eff8]\nTEST EAX,EAX\nJS 0x0041c3c8\nMOV RDI,R14\nCALL 0x00402930\nADD RAX,0x1b\nCMP RAX,0xfc1\nJC 0x0041c397\nMOV RDI,RAX\nCALL 0x00402c60\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0041c3c8\nMOV ESI,0x425937\nXOR EAX,EAX\nMOV RDI,RBX\nMOV EDX,R15D\nCALL 0x00402ec0\nMOVSXD RDI,EAX\nADD RDI,RBX\nMOV RSI,R14\nCALL 0x004027c0\nJMP 0x0041c3ca\nMOV byte ptr [RBX],0x0\nJMP 0x0041c3ca\nMOV dword ptr [0x0062eff8],0xffffffff\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x20\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p4743
S'55\n41 57\n41 56\n41 54\n53\n48 83 ec 20\n49 89 d6\n41 89 f7\n48 89 fb\n41 80 3e 00\n0f 84 aa 00 00 00\n8b 05 e3 2c 21 00\n85 c0\n75 56\nbf 01 21 42 00\nbe 00 09 01 00\n31 c0\ne8 96 6a fe ff\n89 c5\n85 ed\n0f 88 8a 00 00 00\n49 89 e4\nbe 20 59 42 00\n31 c0\n4c 89 e7\n89 ea\ne8 78 6b fe ff\n31 f6\n4c 89 e7\ne8 7e 6a fe ff\n83 f8 01\n19 c0\nf7 d0\n83 c8 01\n89 05 96 2c 21 00\n89 ef\ne8 57 67 fe ff\n8b 05 89 2c 21 00\n85 c0\n78 55\n4c 89 f7\ne8 b5 65 fe ff\n48 83 c0 1b\n48 3d c1 0f 00 00\n72 10\n48 89 c7\ne8 d1 68 fe ff\n48 89 c3\n48 85 db\n74 31\nbe 37 59 42 00\n31 c0\n48 89 df\n44 89 fa\ne8 17 6b fe ff\n48 63 f8\n48 01 df\n4c 89 f6\ne8 09 64 fe ff\neb 11\nc6 03 00\neb 0c\nc7 05 30 2c 21 00 ff ff ff ff\n31 db\n48 89 d8\n48 83 c4 20\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p4744
S'.text:000000000041c2f0\n.text:000000000041c2f1\n.text:000000000041c2f3\n.text:000000000041c2f5\n.text:000000000041c2f7\n.text:000000000041c2f8\n.text:000000000041c2fc\n.text:000000000041c2ff\n.text:000000000041c302\n.text:000000000041c305\n.text:000000000041c309\n.text:000000000041c30f\n.text:000000000041c315\n.text:000000000041c317\n.text:000000000041c319\n.text:000000000041c31e\n.text:000000000041c323\n.text:000000000041c325\n.text:000000000041c32a\n.text:000000000041c32c\n.text:000000000041c32e\n.text:000000000041c334\n.text:000000000041c337\n.text:000000000041c33c\n.text:000000000041c33e\n.text:000000000041c341\n.text:000000000041c343\n.text:000000000041c348\n.text:000000000041c34a\n.text:000000000041c34d\n.text:000000000041c352\n.text:000000000041c355\n.text:000000000041c357\n.text:000000000041c359\n.text:000000000041c35c\n.text:000000000041c362\n.text:000000000041c364\n.text:000000000041c369\n.text:000000000041c36f\n.text:000000000041c371\n.text:000000000041c373\n.text:000000000041c376\n.text:000000000041c37b\n.text:000000000041c37f\n.text:000000000041c385\n.text:000000000041c387\n.text:000000000041c38a\n.text:000000000041c38f\n.text:000000000041c392\n.text:000000000041c395\n.text:000000000041c397\n.text:000000000041c39c\n.text:000000000041c39e\n.text:000000000041c3a1\n.text:000000000041c3a4\n.text:000000000041c3a9\n.text:000000000041c3ac\n.text:000000000041c3af\n.text:000000000041c3b2\n.text:000000000041c3b7\n.text:000000000041c3b9\n.text:000000000041c3bc\n.text:000000000041c3be\n.text:000000000041c3c8\n.text:000000000041c3ca\n.text:000000000041c3cd\n.text:000000000041c3d1\n.text:000000000041c3d2\n.text:000000000041c3d4\n.text:000000000041c3d6\n.text:000000000041c3d8\n.text:000000000041c3d9\n'
p4745
tp4746
sS'opt_expr'
p4747
(S'\n__stdcall opt_expr(predicate * * eval_treep)\n'
p4748
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000a_Bool opt_expr(predicate **eval_treep)\u000a\u000a{\u000a  predicate_type pVar1;\u000a  _Bool (*pVar2)(char *,stat *,predicate *);\u000a  FILE *__stream;\u000a  _Bool _Var3;\u000a  predicate *curr;\u000a  char *pcVar4;\u000a  undefined8 uVar5;\u000a  predicate *curr_00;\u000a  predicate_precedence pVar6;\u000a  long lVar7;\u000a  predicate **prevp;\u000a  predicate *p;\u000a  predlist *list;\u000a  predicate **eval_treep_00;\u000a  predlist cbo_list [11];\u000a  undefined local_10c;\u000a  undefined4 local_108;\u000a  undefined4 uStack260;\u000a  undefined4 uStack256;\u000a  undefined4 uStack252;\u000a  undefined4 local_f8;\u000a  undefined4 uStack244;\u000a  undefined4 uStack240;\u000a  undefined4 uStack236;\u000a  predlist local_e8 [11];\u000a  \u000a  local_f8 = 0;\u000a  uStack244 = 0;\u000a  uStack240 = 0;\u000a  uStack236 = 0;\u000a  local_108 = 0;\u000a  uStack260 = 0;\u000a  uStack256 = 0;\u000a  uStack252 = 0;\u000a  if ((eval_treep == (predicate **)0x0) || (*eval_treep == (predicate *)0x0)) {\u000a    return false;\u000a  }\u000a  lVar7 = 0;\u000a  do {\u000a    predlist_init((predlist *)((long)&local_e8[0].head + lVar7));\u000a    lVar7 = lVar7 + 0x10;\u000a  } while (lVar7 != 0xb0);\u000a  curr_00 = *eval_treep;\u000a  curr = curr_00->pred_left;\u000a  if (curr_00->pred_left == (predicate *)0x0) {\u000a    prevp = (predicate **)0x3;\u000a    pVar1 = curr_00->p_type;\u000a  }\u000a  else {\u000a    do {\u000a      p = curr_00;\u000a      curr_00 = curr;\u000a      curr = curr_00->pred_left;\u000a    } while (curr_00->pred_left != (predicate *)0x0);\u000a    prevp = (predicate **)(ulong)p->p_prec;\u000a    pVar1 = curr_00->p_type;\u000a  }\u000a  if (pVar1 != BI_OP) {\u000a    set_new_parent(curr_00,prevp);\u000a  }\u000a  if (((byte)options.debug_options & 9) != 0) {\u000a    fwrite("Normalized Eval Tree:\u005cn",0x16,1,(FILE *)stderr);\u000a    print_tree(stderr,*eval_treep);\u000a  }\u000a  curr_00 = *eval_treep;\u000a  pVar6 = NO_PREC;\u000a  if (curr_00 != (predicate *)0x0) {\u000a    if (curr_00->p_type == BI_OP) {\u000a      pVar6 = curr_00->p_prec;\u000a    }\u000a    curr_00 = *eval_treep;\u000a    if (curr_00 != (predicate *)0x0) {\u000a      local_10c = 0;\u000a      do {\u000a        while( true ) {\u000a          curr = curr_00;\u000a          if ((curr_00->p_type == BI_OP) && (curr = curr_00, curr_00->p_prec != pVar6)) {\u000a            curr = set_new_parent(curr_00,(predicate **)(ulong)pVar6);\u000a          }\u000a          prevp = &curr->pred_right;\u000a          curr_00 = curr->pred_right;\u000a          pVar1 = curr_00->p_type;\u000a          if (pVar1 < UNI_OP) break;\u000a          if (pVar1 == UNI_OP) {\u000a            eval_treep_00 = &curr_00->pred_right;\u000a          }\u000a          else {\u000a            eval_treep_00 = prevp;\u000a            if (pVar1 != BI_OP) {\u000a              uVar5 = dcgettext(0,"oops -- invalid expression type!",5);\u000a              error(1,0,uVar5);\u000a              goto LAB_00406990;\u000a            }\u000a          }\u000a          _Var3 = opt_expr(eval_treep_00);\u000a          (*prevp)->side_effects = _Var3;\u000aLAB_00406990:\u000a          if ((*prevp)->side_effects != false) {\u000a            merge_lists(local_e8,&local_108,&local_f8);\u000a            local_10c = 1;\u000a          }\u000a          curr_00 = curr->pred_left;\u000a          eval_treep = &curr->pred_left;\u000a          if (curr_00 == (predicate *)0x0) goto LAB_004069e0;\u000a        }\u000a        if ((pVar6 == COMMA_PREC) || (p = *prevp, p->side_effects != false)) goto LAB_00406990;\u000a        pVar2 = curr_00->pred_func;\u000a        _Var3 = predicate_is_cost_free(p);\u000a        if (_Var3 == false) {\u000a          if (pVar2 != pred_regex) {\u000a            if (1 < options.optimisation_level) {\u000a              if (p->p_cost + ~NeedsNothing < 2) {\u000a                if ((2 < options.optimisation_level) || (p->need_stat == false)) {\u000aLAB_0040686b:\u000a                  if (((byte)options.debug_options & 8) != 0) {\u000a                    fprintf((FILE *)stderr,"-O%d: categorising predicate ",\u000a                            (ulong)options.optimisation_level);\u000a                    print_predicate(stderr,*prevp);\u000a                    __stream = stderr;\u000a                    pcVar4 = cost_name();\u000a                    fprintf((FILE *)__stream," by cost (%s)\u005cn",pcVar4);\u000a                  }\u000a                  list = local_e8 + (ulong)curr->pred_right->p_cost;\u000a                  goto LAB_00406887;\u000a                }\u000a              }\u000a              else {\u000a                if (2 < options.optimisation_level) goto LAB_0040686b;\u000a              }\u000a            }\u000a            goto LAB_00406990;\u000a          }\u000a          list = (predlist *)&local_f8;\u000a        }\u000a        else {\u000a          if (((byte)options.debug_options & 8) != 0) {\u000a            fprintf((FILE *)stderr,"-O%d: promoting cheap predicate ",\u000a                    (ulong)options.optimisation_level);\u000a            print_predicate(stderr,*prevp);\u000a            fwrite(" into name_list\u005cn",0x10,1,(FILE *)stderr);\u000a          }\u000a          list = (predlist *)&local_108;\u000a        }\u000aLAB_00406887:\u000a        predlist_insert(list,curr,eval_treep);\u000a        curr_00 = *eval_treep;\u000a      } while (curr_00 != (predicate *)0x0);\u000a      goto LAB_004069e0;\u000a    }\u000a  }\u000a  local_10c = 0;\u000aLAB_004069e0:\u000a  merge_lists(local_e8,&local_108,&local_f8,eval_treep);\u000a  return (_Bool)local_10c;\u000a}\u000a\u000a
p4749
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xe8\nMOV RBX,RDI\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nTEST RBX,RBX\nJZ 0x00406757\nCMP qword ptr [RBX],0x0\nJZ 0x00406757\nXOR EBP,EBP\nNOP\nLEA RDI,[RSP + RBP*0x1 + 0x30]\nCALL 0x00407050\nADD RBP,0x10\nCMP RBP,0xb0\nJNZ 0x00406700\nMOV RDI,qword ptr [RBX]\nMOV RAX,qword ptr [0x110 + RDI]\nTEST RAX,RAX\nJZ 0x0040675e\nLEA RCX,[0x110 + RDI]\nNOP dword ptr [RAX]\nMOV RSI,RDI\nMOV RDX,RCX\nMOV RDI,RAX\nLEA RCX,[0x110 + RDI]\nMOV RAX,qword ptr [0x110 + RDI]\nTEST RAX,RAX\nJNZ 0x00406730\nMOV ESI,dword ptr [RSI + 0x14]\nCMP dword ptr [RDI + 0x10],0x3\nJNZ 0x0040676c\nJMP 0x00406771\nXOR EAX,EAX\nJMP 0x004069fd\nMOV ESI,0x3\nMOV RDX,RBX\nCMP dword ptr [RDI + 0x10],0x3\nJZ 0x00406771\nCALL 0x00407060\nTEST byte ptr [0x0062f080],0x9\nJNZ 0x00406a0f\nMOV RAX,qword ptr [RBX]\nXOR EBP,EBP\nTEST RAX,RAX\nJZ 0x004069d3\nCMP dword ptr [RAX + 0x10],0x3\nJNZ 0x00406795\nMOV EBP,dword ptr [RAX + 0x14]\nMOV RAX,qword ptr [RBX]\nTEST RAX,RAX\nJZ 0x004069d3\nMOV dword ptr [RSP + 0xc],0x0\nMOV R13,RBX\nMOV RBX,RAX\nNOP\nCMP dword ptr [RBX + 0x10],0x3\nJNZ 0x004067cb\nCMP dword ptr [RBX + 0x14],EBP\nJZ 0x004067cb\nMOV RDI,RBX\nMOV ESI,EBP\nMOV RDX,R13\nCALL 0x00407060\nMOV RBX,RAX\nLEA R12,[0x118 + RBX]\nMOV RDI,qword ptr [0x118 + RBX]\nMOV EAX,dword ptr [RDI + 0x10]\nCMP EAX,0x2\nJNC 0x00406945\nCMP EBP,0x1\nJZ 0x00406990\nMOV R15,qword ptr [R12]\nCMP byte ptr [R15 + 0x18],0x0\nJNZ 0x00406990\nMOV R14,qword ptr [RDI]\nMOV RDI,R15\nCALL 0x00407100\nTEST AL,AL\nJZ 0x00406820\nTEST byte ptr [0x0062f080],0x8\nJNZ 0x004068a4\nLEA RDI,[RSP + 0x10]\nJMP 0x00406887\nMOV EAX,0x4046a0\nCMP R14,RAX\nJZ 0x0040685b\nMOVZX EAX,word ptr [0x0062f0a8]\nCMP EAX,0x2\nJC 0x00406990\nMOV ECX,dword ptr [R15 + 0x20]\nDEC ECX\nMOVZX EAX,AX\nCMP ECX,0x1\nJA 0x00406862\nCMP EAX,0x2\nJA 0x0040686b\nMOVZX EAX,byte ptr [R15 + 0x1a]\nTEST AL,AL\nJZ 0x0040686b\nJMP 0x00406990\nLEA RDI,[RSP + 0x20]\nJMP 0x00406887\nCMP EAX,0x3\nJC 0x00406990\nTEST byte ptr [0x0062f080],0x8\nJNZ 0x004068ee\nMOV RAX,qword ptr [0x118 + RBX]\nMOV EAX,dword ptr [RAX + 0x20]\nSHL RAX,0x4\nLEA RDI,[RSP + RAX*0x1 + 0x30]\nMOV RSI,RBX\nMOV RDX,R13\nCALL 0x00407170\nMOV RBX,qword ptr [R13]\nTEST RBX,RBX\nJNZ 0x004067b0\nJMP 0x004069dd\nMOV RDI,qword ptr [0x0062de60]\nMOVZX EDX,word ptr [0x0062f0a8]\nMOV ESI,0x41dc19\nXOR EAX,EAX\nCALL 0x00402ba0\nMOV RDI,qword ptr [0x0062de60]\nMOV RSI,qword ptr [R12]\nCALL 0x00405880\nMOV RCX,qword ptr [0x0062de60]\nMOV EDI,0x41dc3a\nMOV ESI,0x10\nMOV EDX,0x1\nCALL 0x00402ee0\nJMP 0x00406819\nMOV RDI,qword ptr [0x0062de60]\nMOVZX EDX,word ptr [0x0062f0a8]\nMOV ESI,0x41dc4b\nXOR EAX,EAX\nCALL 0x00402ba0\nMOV RDI,qword ptr [0x0062de60]\nMOV RSI,qword ptr [R12]\nCALL 0x00405880\nMOV R15,qword ptr [0x0062de60]\nMOV RAX,qword ptr [R12]\nMOV EDI,dword ptr [RAX + 0x20]\nCALL 0x00406d60\nMOV RCX,RAX\nMOV ESI,0x41dc69\nXOR EAX,EAX\nMOV RDI,R15\nMOV RDX,RCX\nCALL 0x00402ba0\nJMP 0x00406874\nJZ 0x00406951\nCMP EAX,0x3\nJNZ 0x00406966\nMOV RDI,R12\nJMP 0x00406958\nADD RDI,0x118\nCALL 0x004066d0\nMOV RCX,qword ptr [R12]\nMOV byte ptr [RCX + 0x18],AL\nJMP 0x00406990\nXOR EDI,EDI\nMOV ESI,0x41dacb\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402d90\nNOP dword ptr [RAX + RAX*0x1]\nMOV RAX,qword ptr [R12]\nCMP byte ptr [RAX + 0x18],0x0\nJZ 0x004069b7\nLEA RDI,[RSP + 0x30]\nLEA RSI,[RSP + 0x10]\nLEA RDX,[RSP + 0x20]\nMOV RCX,R13\nCALL 0x004071a0\nMOV AL,0x1\nMOV dword ptr [RSP + 0xc],EAX\nMOV RAX,qword ptr [0x110 + RBX]\nADD RBX,0x110\nTEST RAX,RAX\nMOV R13,RBX\nJNZ 0x004067ac\nJMP 0x004069e0\nMOV dword ptr [RSP + 0xc],0x0\nJMP 0x004069e0\nMOV RBX,R13\nLEA RDI,[RSP + 0x30]\nLEA RSI,[RSP + 0x10]\nLEA RDX,[RSP + 0x20]\nMOV RCX,RBX\nCALL 0x004071a0\nMOV EAX,dword ptr [RSP + 0xc]\nAND AL,0x1\nADD RSP,0xe8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x0062de60]\nMOV EDI,0x41dc02\nMOV ESI,0x16\nMOV EDX,0x1\nCALL 0x00402ee0\nMOV RDI,qword ptr [0x0062de60]\nMOV RSI,qword ptr [RBX]\nXOR EDX,EDX\nCALL 0x004063d0\nJMP 0x0040677e\n'
p4750
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec e8 00 00 00\n48 89 fb\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n48 85 db\n74 61\n48 83 3b 00\n74 5b\n31 ed\n66 90\n48 8d 7c 2c 30\ne8 46 09 00 00\n48 83 c5 10\n48 81 fd b0 00 00 00\n75 e9\n48 8b 3b\n48 8b 87 10 01 00 00\n48 85 c0\n74 38\n48 8d 8f 10 01 00 00\n0f 1f 00\n48 89 fe\n48 89 ca\n48 89 c7\n48 8d 8f 10 01 00 00\n48 8b 87 10 01 00 00\n48 85 c0\n75 e4\n8b 76 14\n83 7f 10 03\n75 17\neb 1a\n31 c0\ne9 9f 02 00 00\nbe 03 00 00 00\n48 89 da\n83 7f 10 03\n74 05\ne8 ef 08 00 00\nf6 05 08 89 22 00 09\n0f 85 91 02 00 00\n48 8b 03\n31 ed\n48 85 c0\n0f 84 47 02 00 00\n83 78 10 03\n75 03\n8b 68 14\n48 8b 03\n48 85 c0\n0f 84 32 02 00 00\nc7 44 24 0c 00 00 00 00\n49 89 dd\n48 89 c3\n90\n83 7b 10 03\n75 15\n39 6b 14\n74 10\n48 89 df\n89 ee\n4c 89 ea\ne8 98 08 00 00\n48 89 c3\n4c 8d a3 18 01 00 00\n48 8b bb 18 01 00 00\n8b 47 10\n83 f8 02\n0f 83 60 01 00 00\n83 fd 01\n0f 84 a2 01 00 00\n4d 8b 3c 24\n41 80 7f 18 00\n0f 85 93 01 00 00\n4c 8b 37\n4c 89 ff\ne8 f8 08 00 00\n84 c0\n74 14\nf6 05 6d 88 22 00 08\n0f 85 8b 00 00 00\n48 8d 7c 24 10\neb 67\nb8 a0 46 40 00\n49 39 c6\n74 31\n0f b7 05 77 88 22 00\n83 f8 02\n0f 82 56 01 00 00\n41 8b 4f 20\nff c9\n0f b7 c0\n83 f9 01\n77 1a\n83 f8 02\n77 1e\n41 0f b6 47 1a\n84 c0\n74 15\ne9 35 01 00 00\n48 8d 7c 24 20\neb 25\n83 f8 03\n0f 82 25 01 00 00\nf6 05 0e 88 22 00 08\n75 7a\n48 8b 83 18 01 00 00\n8b 40 20\n48 c1 e0 04\n48 8d 7c 04 30\n48 89 de\n4c 89 ea\ne8 de 08 00 00\n49 8b 5d 00\n48 85 db\n0f 85 11 ff ff ff\ne9 39 01 00 00\n48 8b 3d b5 75 22 00\n0f b7 15 f6 87 22 00\nbe 19 dc 41 00\n31 c0\ne8 e2 c2 ff ff\n48 8b 3d 9b 75 22 00\n49 8b 34 24\ne8 b2 ef ff ff\n48 8b 0d 8b 75 22 00\nbf 3a dc 41 00\nbe 10 00 00 00\nba 01 00 00 00\ne8 f7 c5 ff ff\ne9 2b ff ff ff\n48 8b 3d 6b 75 22 00\n0f b7 15 ac 87 22 00\nbe 4b dc 41 00\n31 c0\ne8 98 c2 ff ff\n48 8b 3d 51 75 22 00\n49 8b 34 24\ne8 68 ef ff ff\n4c 8b 3d 41 75 22 00\n49 8b 04 24\n8b 78 20\ne8 35 04 00 00\n48 89 c1\nbe 69 dc 41 00\n31 c0\n4c 89 ff\n48 89 ca\ne8 60 c2 ff ff\ne9 2f ff ff ff\n74 0a\n83 f8 03\n75 1a\n4c 89 e7\neb 07\n48 81 c7 18 01 00 00\ne8 73 fd ff ff\n49 8b 0c 24\n88 41 18\neb 2a\n31 ff\nbe cb da 41 00\nba 05 00 00 00\ne8 99 bf ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 05 c4 ff ff\n0f 1f 44 00 00\n49 8b 04 24\n80 78 18 00\n74 1d\n48 8d 7c 24 30\n48 8d 74 24 10\n48 8d 54 24 20\n4c 89 e9\ne8 ef 07 00 00\nb0 01\n89 44 24 0c\n48 8b 83 10 01 00 00\n48 81 c3 10 01 00 00\n48 85 c0\n49 89 dd\n0f 85 db fd ff ff\neb 0d\nc7 44 24 0c 00 00 00 00\neb 03\n4c 89 eb\n48 8d 7c 24 30\n48 8d 74 24 10\n48 8d 54 24 20\n48 89 d9\ne8 a9 07 00 00\n8b 44 24 0c\n24 01\n48 81 c4 e8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 0d 4a 74 22 00\nbf 02 dc 41 00\nbe 16 00 00 00\nba 01 00 00 00\ne8 b6 c4 ff ff\n48 8b 3d 2f 74 22 00\n48 8b 33\n31 d2\ne8 95 f9 ff ff\ne9 3e fd ff ff\n'
p4751
S'.text:00000000004066d0\n.text:00000000004066d1\n.text:00000000004066d3\n.text:00000000004066d5\n.text:00000000004066d7\n.text:00000000004066d9\n.text:00000000004066da\n.text:00000000004066e1\n.text:00000000004066e4\n.text:00000000004066e7\n.text:00000000004066ec\n.text:00000000004066f1\n.text:00000000004066f4\n.text:00000000004066f6\n.text:00000000004066fa\n.text:00000000004066fc\n.text:00000000004066fe\n.text:0000000000406700\n.text:0000000000406705\n.text:000000000040670a\n.text:000000000040670e\n.text:0000000000406715\n.text:0000000000406717\n.text:000000000040671a\n.text:0000000000406721\n.text:0000000000406724\n.text:0000000000406726\n.text:000000000040672d\n.text:0000000000406730\n.text:0000000000406733\n.text:0000000000406736\n.text:0000000000406739\n.text:0000000000406740\n.text:0000000000406747\n.text:000000000040674a\n.text:000000000040674c\n.text:000000000040674f\n.text:0000000000406753\n.text:0000000000406755\n.text:0000000000406757\n.text:0000000000406759\n.text:000000000040675e\n.text:0000000000406763\n.text:0000000000406766\n.text:000000000040676a\n.text:000000000040676c\n.text:0000000000406771\n.text:0000000000406778\n.text:000000000040677e\n.text:0000000000406781\n.text:0000000000406783\n.text:0000000000406786\n.text:000000000040678c\n.text:0000000000406790\n.text:0000000000406792\n.text:0000000000406795\n.text:0000000000406798\n.text:000000000040679b\n.text:00000000004067a1\n.text:00000000004067a9\n.text:00000000004067ac\n.text:00000000004067af\n.text:00000000004067b0\n.text:00000000004067b4\n.text:00000000004067b6\n.text:00000000004067b9\n.text:00000000004067bb\n.text:00000000004067be\n.text:00000000004067c0\n.text:00000000004067c3\n.text:00000000004067c8\n.text:00000000004067cb\n.text:00000000004067d2\n.text:00000000004067d9\n.text:00000000004067dc\n.text:00000000004067df\n.text:00000000004067e5\n.text:00000000004067e8\n.text:00000000004067ee\n.text:00000000004067f2\n.text:00000000004067f7\n.text:00000000004067fd\n.text:0000000000406800\n.text:0000000000406803\n.text:0000000000406808\n.text:000000000040680a\n.text:000000000040680c\n.text:0000000000406813\n.text:0000000000406819\n.text:000000000040681e\n.text:0000000000406820\n.text:0000000000406825\n.text:0000000000406828\n.text:000000000040682a\n.text:0000000000406831\n.text:0000000000406834\n.text:000000000040683a\n.text:000000000040683e\n.text:0000000000406840\n.text:0000000000406843\n.text:0000000000406846\n.text:0000000000406848\n.text:000000000040684b\n.text:000000000040684d\n.text:0000000000406852\n.text:0000000000406854\n.text:0000000000406856\n.text:000000000040685b\n.text:0000000000406860\n.text:0000000000406862\n.text:0000000000406865\n.text:000000000040686b\n.text:0000000000406872\n.text:0000000000406874\n.text:000000000040687b\n.text:000000000040687e\n.text:0000000000406882\n.text:0000000000406887\n.text:000000000040688a\n.text:000000000040688d\n.text:0000000000406892\n.text:0000000000406896\n.text:0000000000406899\n.text:000000000040689f\n.text:00000000004068a4\n.text:00000000004068ab\n.text:00000000004068b2\n.text:00000000004068b7\n.text:00000000004068b9\n.text:00000000004068be\n.text:00000000004068c5\n.text:00000000004068c9\n.text:00000000004068ce\n.text:00000000004068d5\n.text:00000000004068da\n.text:00000000004068df\n.text:00000000004068e4\n.text:00000000004068e9\n.text:00000000004068ee\n.text:00000000004068f5\n.text:00000000004068fc\n.text:0000000000406901\n.text:0000000000406903\n.text:0000000000406908\n.text:000000000040690f\n.text:0000000000406913\n.text:0000000000406918\n.text:000000000040691f\n.text:0000000000406923\n.text:0000000000406926\n.text:000000000040692b\n.text:000000000040692e\n.text:0000000000406933\n.text:0000000000406935\n.text:0000000000406938\n.text:000000000040693b\n.text:0000000000406940\n.text:0000000000406945\n.text:0000000000406947\n.text:000000000040694a\n.text:000000000040694c\n.text:000000000040694f\n.text:0000000000406951\n.text:0000000000406958\n.text:000000000040695d\n.text:0000000000406961\n.text:0000000000406964\n.text:0000000000406966\n.text:0000000000406968\n.text:000000000040696d\n.text:0000000000406972\n.text:0000000000406977\n.text:000000000040697a\n.text:000000000040697f\n.text:0000000000406981\n.text:0000000000406983\n.text:0000000000406986\n.text:000000000040698b\n.text:0000000000406990\n.text:0000000000406994\n.text:0000000000406998\n.text:000000000040699a\n.text:000000000040699f\n.text:00000000004069a4\n.text:00000000004069a9\n.text:00000000004069ac\n.text:00000000004069b1\n.text:00000000004069b3\n.text:00000000004069b7\n.text:00000000004069be\n.text:00000000004069c5\n.text:00000000004069c8\n.text:00000000004069cb\n.text:00000000004069d1\n.text:00000000004069d3\n.text:00000000004069db\n.text:00000000004069dd\n.text:00000000004069e0\n.text:00000000004069e5\n.text:00000000004069ea\n.text:00000000004069ef\n.text:00000000004069f2\n.text:00000000004069f7\n.text:00000000004069fb\n.text:00000000004069fd\n.text:0000000000406a04\n.text:0000000000406a05\n.text:0000000000406a07\n.text:0000000000406a09\n.text:0000000000406a0b\n.text:0000000000406a0d\n.text:0000000000406a0e\n.text:0000000000406a0f\n.text:0000000000406a16\n.text:0000000000406a1b\n.text:0000000000406a20\n.text:0000000000406a25\n.text:0000000000406a2a\n.text:0000000000406a31\n.text:0000000000406a34\n.text:0000000000406a36\n.text:0000000000406a3b\n'
p4752
tp4753
sS'fd_leak_check_is_enabled'
p4754
(S'\n__stdcall fd_leak_check_is_enabled()\n'
p4755
V\u000a_Bool fd_leak_check_is_enabled(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = getenv("GNU_FINDUTILS_FD_LEAK_CHECK");\u000a  return (_Bool)(pcVar1 != (char *)0x0);\u000a}\u000a\u000a
p4756
S'PUSH RAX\nMOV EDI,0x41e71e\nCALL 0x00402700\nTEST RAX,RAX\nSETNZ AL\nPOP RCX\nRET\n'
p4757
S'50\nbf 1e e7 41 00\ne8 f5 a8 ff ff\n48 85 c0\n0f 95 c0\n59\nc3\n'
p4758
S'.text:0000000000407e00\n.text:0000000000407e01\n.text:0000000000407e06\n.text:0000000000407e0b\n.text:0000000000407e0e\n.text:0000000000407e11\n.text:0000000000407e12\n'
p4759
tp4760
sS'parse_escape_char'
p4761
(S'\n__stdcall parse_escape_char()\n'
p4762
V\u000aint parse_escape_char(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined4 in_EDI;\u000a  \u000a  iVar1 = 0;\u000a  switch(in_EDI) {\u000a  case 0x5c:\u000a    iVar1 = 0x5c;\u000a    break;\u000a  case 0x61:\u000a    return 7;\u000a  case 0x62:\u000a    return 8;\u000a  case 0x66:\u000a    return 0xc;\u000a  case 0x6e:\u000a    return 10;\u000a  case 0x72:\u000a    return 0xd;\u000a  case 0x74:\u000a    return 9;\u000a  case 0x76:\u000a    return 0xb;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p4763
S'XOR EAX,EAX\nADD EDI,-0x5c\nCMP EDI,0x1a\nJA 0x00409356\nJMP qword ptr [0x41f088 + RDI*0x8]\nMOV EAX,0x5c\nRET\nMOV EAX,0x7\nRET\nMOV EAX,0x8\nRET\nMOV EAX,0xc\nRET\nMOV EAX,0xa\nRET\nMOV EAX,0xd\nRET\nMOV EAX,0x9\nRET\nMOV EAX,0xb\nRET\n'
p4764
S'31 c0\n83 c7 a4\n83 ff 1a\n77 0c\nff 24 fd 88 f0 41 00\nb8 5c 00 00 00\nc3\nb8 07 00 00 00\nc3\nb8 08 00 00 00\nc3\nb8 0c 00 00 00\nc3\nb8 0a 00 00 00\nc3\nb8 0d 00 00 00\nc3\nb8 09 00 00 00\nc3\nb8 0b 00 00 00\nc3\n'
p4765
S'.text:0000000000409340\n.text:0000000000409342\n.text:0000000000409345\n.text:0000000000409348\n.text:000000000040934a\n.text:0000000000409351\n.text:0000000000409356\n.text:0000000000409357\n.text:000000000040935c\n.text:000000000040935d\n.text:0000000000409362\n.text:0000000000409363\n.text:0000000000409368\n.text:0000000000409369\n.text:000000000040936e\n.text:000000000040936f\n.text:0000000000409374\n.text:0000000000409375\n.text:000000000040937a\n.text:000000000040937b\n.text:0000000000409380\n'
p4766
tp4767
sS'impl_pred_exec'
p4768
(S'\n__stdcall impl_pred_exec(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p4769
V\u000a_Bool impl_pred_exec(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  uint uVar1;\u000a  char *__s;\u000a  _Bool _Var2;\u000a  _Bool _Var3;\u000a  uint *puVar4;\u000a  undefined8 uVar5;\u000a  char *prefix_00;\u000a  size_t arglen;\u000a  char *__ptr;\u000a  size_t pfxlen;\u000a  long lVar6;\u000a  bool bVar7;\u000a  char *prefix;\u000a  \u000a  _Var2 = is_exec_in_local_dir(pred_ptr->pred_func);\u000a  if (_Var2 == false) {\u000a    __ptr = (char *)0x0;\u000a    prefix_00 = (char *)0x0;\u000a    pfxlen = 0;\u000a    if (*(saved_cwd **)(pred_ptr->args + 0xc0) != initial_wd) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("execp->wd_for_exec == initial_wd","exec.c",0x9a,\u000a                    "_Bool impl_pred_exec(const char *, struct stat *, struct predicate *)");\u000a    }\u000a  }\u000a  else {\u000a    _Var3 = record_exec_dir((exec_val *)pred_ptr->args);\u000a    if (_Var3 == false) {\u000a      puVar4 = (uint *)__errno_location();\u000a      uVar1 = *puVar4;\u000a      uVar5 = dcgettext(0,"Failed to save working directory in order to run a command on %s",5);\u000a      prefix_00 = safely_quote_err_filename((char *)0x0);\u000a      error(1,(ulong)uVar1,uVar5,prefix_00);\u000a    }\u000a    pathname = base_name(state.rel_pathname);\u000a    prefix_00 = (char *)0x0;\u000a    if (*pathname != '/') {\u000a      prefix_00 = "./";\u000a    }\u000a    pfxlen = (ulong)(*pathname != '/') * 2;\u000a    __ptr = pathname;\u000a  }\u000a  if (((exec_val *)pred_ptr->args)->multiple == false) {\u000a    if (0 < *(int *)(pred_ptr->args + 0xb8)) {\u000a      lVar6 = 0;\u000a      do {\u000a        __s = *(char **)(*(long *)(pred_ptr->args + 0xb0) + lVar6 * 8);\u000a        arglen = strlen(__s);\u000a        strlen(pathname);\u000a        bc_do_insert((buildcmd_control *)(pred_ptr->args + 8),\u000a                     (buildcmd_state *)(pred_ptr->args + 0x60),__s,arglen,prefix_00,pfxlen,\u000a                     (size_t)pathname);\u000a        lVar6 = lVar6 + 1;\u000a      } while (lVar6 < (long)*(int *)(pred_ptr->args + 0xb8));\u000a    }\u000a    bc_do_exec((buildcmd_control *)(pred_ptr->args + 8),(buildcmd_state *)(pred_ptr->args + 0x60));\u000a    bVar7 = (*(ushort *)(pred_ptr->args + 200) & 0xff7f) == 0;\u000a    if (_Var2 != false) {\u000a      free_cwd(*(saved_cwd **)(pred_ptr->args + 0xc0));\u000a    }\u000a  }\u000a  else {\u000a    arglen = strlen(pathname);\u000a    bc_push_arg((buildcmd_control *)(pred_ptr->args + 8),(buildcmd_state *)(pred_ptr->args + 0x60),\u000a                pathname,arglen + 1,prefix_00,pfxlen);\u000a    bVar7 = true;\u000a    if (*(int *)(pred_ptr->args + 0x98) != 0) {\u000a      state.execdirs_outstanding = true;\u000a    }\u000a  }\u000a  if (__ptr != (char *)0x0) {\u000a    if (_Var2 == false) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("local","exec.c",0xd6,\u000a                    "_Bool impl_pred_exec(const char *, struct stat *, struct predicate *)");\u000a    }\u000a    free(__ptr);\u000a  }\u000a  return (_Bool)bVar7;\u000a}\u000a\u000a
p4770
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R13,RDX\nMOV RBP,RDI\nLEA R14,[R13 + 0x38]\nMOV RDI,qword ptr [R13]\nCALL 0x00408900\nMOV R15D,EAX\nTEST R15B,R15B\nJZ 0x0040521c\nMOV RDI,R14\nCALL 0x004053f0\nTEST AL,AL\nJNZ 0x004051f0\nCALL 0x00402770\nMOV R12D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x41d1b4\nMOV EDX,0x5\nCALL 0x00402910\nMOV RBX,RAX\nXOR EDI,EDI\nMOV RSI,RBP\nCALL 0x00408920\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,R12D\nMOV RDX,RBX\nCALL 0x00402d90\nMOV RDI,qword ptr [0x0062f010]\nCALL 0x0040ffa0\nMOV RBX,RAX\nXOR EBP,EBP\nXOR R12D,R12D\nCMP byte ptr [RBX],0x2f\nMOV ECX,0x41d1f5\nCMOVNZ RBP,RCX\nSETNZ R12B\nADD R12,R12\nMOV RCX,RBX\nJMP 0x00405240\nMOV RCX,RBP\nMOV RAX,qword ptr [0xf8 + R13]\nXOR EBX,EBX\nCMP RAX,qword ptr [0x0062de78]\nMOV EBP,0x0\nMOV R12D,0x0\nJNZ 0x004053cc\nCMP byte ptr [R14],0x0\nMOV byte ptr [RSP + 0x7],R15B\nJZ 0x004052b1\nMOV qword ptr [RSP + 0x8],RBP\nLEA R14,[R13 + 0x40]\nLEA R15,[0x98 + R13]\nMOV RBP,RCX\nMOV RDI,RBP\nCALL 0x00402930\nLEA RCX,[RAX + 0x1]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,RBP\nMOV R8,qword ptr [RSP + 0x10]\nMOV R9,R12\nPUSH 0x0\nCALL 0x0040dcf0\nADD RSP,0x10\nMOV BPL,0x1\nCMP dword ptr [0xd0 + R13],0x0\nJZ 0x0040529e\nMOV byte ptr [0x0062f028],0x1\nMOV R14B,byte ptr [RSP + 0x7]\nTEST RBX,RBX\nJNZ 0x00405395\nJMP 0x004053a2\nMOV qword ptr [RSP + 0x10],RBX\nLEA RAX,[R13 + 0x40]\nMOV qword ptr [RSP + 0x8],RAX\nLEA RAX,[0x98 + R13]\nMOV qword ptr [RSP + 0x18],RAX\nCMP dword ptr [0xf0 + R13],0x0\nMOV R14,R12\nMOV R12,RCX\nJLE 0x00405356\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x20],R13\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RAX,qword ptr [0xe8 + R13]\nMOV R13,qword ptr [RAX + R15*0x8]\nMOV RDI,R13\nCALL 0x00402930\nMOV RBX,RBP\nMOV RBP,R14\nMOV R14,RAX\nMOV RDI,R12\nCALL 0x00402930\nSUB RSP,0x8\nMOV RDI,qword ptr [RSP + 0x10]\nMOV RSI,qword ptr [RSP + 0x20]\nMOV RDX,R13\nMOV R13,qword ptr [RSP + 0x28]\nMOV RCX,R14\nMOV R14,RBP\nMOV RBP,RBX\nMOV R8,RBP\nMOV R9,R14\nPUSH 0x0\nPUSH RAX\nPUSH R12\nCALL 0x0040db60\nADD RSP,0x20\nINC R15\nMOVSXD RAX,dword ptr [0xf0 + R13]\nCMP R15,RAX\nJL 0x004052f0\nMOV RDI,qword ptr [RSP + 0x8]\nMOV RSI,qword ptr [RSP + 0x18]\nCALL 0x0040def0\nMOVZX EAX,word ptr [0x100 + R13]\nTEST AX,0xff7f\nSETZ BPL\nMOV R14B,byte ptr [RSP + 0x7]\nTEST R14B,R14B\nJZ 0x0040538b\nMOV RDI,qword ptr [0xf8 + R13]\nCALL 0x00416a10\nMOV RBX,qword ptr [RSP + 0x10]\nTEST RBX,RBX\nJZ 0x004053a2\nTEST R14B,R14B\nJZ 0x004053b3\nMOV RDI,RBX\nCALL 0x00402710\nMOV EAX,EBP\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x41d266\nMOV ESI,0x41d219\nMOV EDX,0xd6\nMOV ECX,0x41d220\nCALL 0x00402a40\nMOV EDI,0x41d1f8\nMOV ESI,0x41d219\nMOV EDX,0x9a\nMOV ECX,0x41d220\nCALL 0x00402a40\n'
p4771
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 d5\n48 89 fd\n4d 8d 75 38\n49 8b 7d 00\ne8 5f 37 00 00\n41 89 c7\n45 84 ff\n74 73\n4c 89 f7\ne8 3f 02 00 00\n84 c0\n75 3b\ne8 b6 d5 ff ff\n44 8b 20\n31 ff\nbe b4 d1 41 00\nba 05 00 00 00\ne8 42 d7 ff ff\n48 89 c3\n31 ff\n48 89 ee\ne8 45 37 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n44 89 e6\n48 89 da\ne8 a0 db ff ff\n48 8b 3d 19 9e 22 00\ne8 a4 ad 00 00\n48 89 c3\n31 ed\n45 31 e4\n80 3b 2f\nb9 f5 d1 41 00\n48 0f 45 e9\n41 0f 95 c4\n4d 01 e4\n48 89 d9\neb 24\n48 89 e9\n49 8b 85 f8 00 00 00\n31 db\n48 3b 05 49 8c 22 00\nbd 00 00 00 00\n41 bc 00 00 00 00\n0f 85 8c 01 00 00\n41 80 3e 00\n44 88 7c 24 07\n74 66\n48 89 6c 24 08\n4d 8d 75 40\n4d 8d bd 98 00 00 00\n48 89 cd\n48 89 ef\ne8 ca d6 ff ff\n48 8d 48 01\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 89 ea\n4c 8b 44 24 10\n4d 89 e1\n6a 00\ne8 6a 8a 00 00\n48 83 c4 10\n40 b5 01\n41 83 bd d0 00 00 00 00\n74 07\nc6 05 8a 9d 22 00 01\n44 8a 74 24 07\n48 85 db\n0f 85 e9 00 00 00\ne9 f1 00 00 00\n48 89 5c 24 10\n49 8d 45 40\n48 89 44 24 08\n49 8d 85 98 00 00 00\n48 89 44 24 18\n41 83 bd f0 00 00 00 00\n4d 89 e6\n49 89 cc\n7e 7b\n45 31 ff\n4c 89 6c 24 20\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 8b 85 e8 00 00 00\n4e 8b 2c f8\n4c 89 ef\ne8 2d d6 ff ff\n48 89 eb\n4c 89 f5\n49 89 c6\n4c 89 e7\ne8 1c d6 ff ff\n48 83 ec 08\n48 8b 7c 24 10\n48 8b 74 24 20\n4c 89 ea\n4c 8b 6c 24 28\n4c 89 f1\n49 89 ee\n48 89 dd\n49 89 e8\n4d 89 f1\n6a 00\n50\n41 54\ne8 1d 88 00 00\n48 83 c4 20\n49 ff c7\n49 63 85 f0 00 00 00\n49 39 c7\n7c 9a\n48 8b 7c 24 08\n48 8b 74 24 18\ne8 8b 8b 00 00\n41 0f b7 85 00 01 00 00\n66 a9 7f ff\n40 0f 94 c5\n44 8a 74 24 07\n45 84 f6\n74 0c\n49 8b bd f8 00 00 00\ne8 85 16 01 00\n48 8b 5c 24 10\n48 85 db\n74 0d\n45 84 f6\n74 19\n48 89 df\ne8 6e d3 ff ff\n89 e8\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 66 d2 41 00\nbe 19 d2 41 00\nba d6 00 00 00\nb9 20 d2 41 00\ne8 74 d6 ff ff\nbf f8 d1 41 00\nbe 19 d2 41 00\nba 9a 00 00 00\nb9 20 d2 41 00\ne8 5b d6 ff ff\n'
p4772
S'.text:0000000000405180\n.text:0000000000405181\n.text:0000000000405183\n.text:0000000000405185\n.text:0000000000405187\n.text:0000000000405189\n.text:000000000040518a\n.text:000000000040518e\n.text:0000000000405191\n.text:0000000000405194\n.text:0000000000405198\n.text:000000000040519c\n.text:00000000004051a1\n.text:00000000004051a4\n.text:00000000004051a7\n.text:00000000004051a9\n.text:00000000004051ac\n.text:00000000004051b1\n.text:00000000004051b3\n.text:00000000004051b5\n.text:00000000004051ba\n.text:00000000004051bd\n.text:00000000004051bf\n.text:00000000004051c4\n.text:00000000004051c9\n.text:00000000004051ce\n.text:00000000004051d1\n.text:00000000004051d3\n.text:00000000004051d6\n.text:00000000004051db\n.text:00000000004051de\n.text:00000000004051e3\n.text:00000000004051e5\n.text:00000000004051e8\n.text:00000000004051eb\n.text:00000000004051f0\n.text:00000000004051f7\n.text:00000000004051fc\n.text:00000000004051ff\n.text:0000000000405201\n.text:0000000000405204\n.text:0000000000405207\n.text:000000000040520c\n.text:0000000000405210\n.text:0000000000405214\n.text:0000000000405217\n.text:000000000040521a\n.text:000000000040521c\n.text:000000000040521f\n.text:0000000000405226\n.text:0000000000405228\n.text:000000000040522f\n.text:0000000000405234\n.text:000000000040523a\n.text:0000000000405240\n.text:0000000000405244\n.text:0000000000405249\n.text:000000000040524b\n.text:0000000000405250\n.text:0000000000405254\n.text:000000000040525b\n.text:000000000040525e\n.text:0000000000405261\n.text:0000000000405266\n.text:000000000040526a\n.text:000000000040526e\n.text:0000000000405271\n.text:0000000000405274\n.text:0000000000405277\n.text:000000000040527c\n.text:000000000040527f\n.text:0000000000405281\n.text:0000000000405286\n.text:000000000040528a\n.text:000000000040528d\n.text:0000000000405295\n.text:0000000000405297\n.text:000000000040529e\n.text:00000000004052a3\n.text:00000000004052a6\n.text:00000000004052ac\n.text:00000000004052b1\n.text:00000000004052b6\n.text:00000000004052ba\n.text:00000000004052bf\n.text:00000000004052c6\n.text:00000000004052cb\n.text:00000000004052d3\n.text:00000000004052d6\n.text:00000000004052d9\n.text:00000000004052db\n.text:00000000004052de\n.text:00000000004052e3\n.text:00000000004052f0\n.text:00000000004052f7\n.text:00000000004052fb\n.text:00000000004052fe\n.text:0000000000405303\n.text:0000000000405306\n.text:0000000000405309\n.text:000000000040530c\n.text:000000000040530f\n.text:0000000000405314\n.text:0000000000405318\n.text:000000000040531d\n.text:0000000000405322\n.text:0000000000405325\n.text:000000000040532a\n.text:000000000040532d\n.text:0000000000405330\n.text:0000000000405333\n.text:0000000000405336\n.text:0000000000405339\n.text:000000000040533b\n.text:000000000040533c\n.text:000000000040533e\n.text:0000000000405343\n.text:0000000000405347\n.text:000000000040534a\n.text:0000000000405351\n.text:0000000000405354\n.text:0000000000405356\n.text:000000000040535b\n.text:0000000000405360\n.text:0000000000405365\n.text:000000000040536d\n.text:0000000000405371\n.text:0000000000405375\n.text:000000000040537a\n.text:000000000040537d\n.text:000000000040537f\n.text:0000000000405386\n.text:000000000040538b\n.text:0000000000405390\n.text:0000000000405393\n.text:0000000000405395\n.text:0000000000405398\n.text:000000000040539a\n.text:000000000040539d\n.text:00000000004053a2\n.text:00000000004053a4\n.text:00000000004053a8\n.text:00000000004053a9\n.text:00000000004053ab\n.text:00000000004053ad\n.text:00000000004053af\n.text:00000000004053b1\n.text:00000000004053b2\n.text:00000000004053b3\n.text:00000000004053b8\n.text:00000000004053bd\n.text:00000000004053c2\n.text:00000000004053c7\n.text:00000000004053cc\n.text:00000000004053d1\n.text:00000000004053d6\n.text:00000000004053db\n.text:00000000004053e0\n'
p4773
tp4774
sS'is_exec_in_local_dir'
p4775
(S'\n__stdcall is_exec_in_local_dir(PRED_FUNC * pred_func)\n'
p4776
V\u000a_Bool is_exec_in_local_dir(_Bool (*pred_func)(char *,stat *,predicate *))\u000a\u000a{\u000a  return (_Bool)(pred_func == pred_okdir || pred_func == pred_execdir);\u000a}\u000a\u000a
p4777
S'MOV EAX,0x404040\nCMP RDI,RAX\nSETZ CL\nMOV EAX,0x4044a0\nCMP RDI,RAX\nSETZ AL\nOR AL,CL\nRET\n'
p4778
S'b8 40 40 40 00\n48 39 c7\n0f 94 c1\nb8 a0 44 40 00\n48 39 c7\n0f 94 c0\n08 c8\nc3\n'
p4779
S'.text:0000000000408900\n.text:0000000000408905\n.text:0000000000408908\n.text:000000000040890b\n.text:0000000000408910\n.text:0000000000408913\n.text:0000000000408916\n.text:0000000000408918\n'
p4780
tp4781
sS'optionp_getfilecon'
p4782
(S'\n__stdcall optionp_getfilecon(char * file, security_context_t * con)\n'
p4783
V\u000aint optionp_getfilecon(char *file,security_context_t *con)\u000a\u000a{\u000a  uint uVar1;\u000a  int __fd;\u000a  int iVar2;\u000a  int iVar3;\u000a  saved_cwd *__ptr;\u000a  uint *puVar4;\u000a  int *piVar5;\u000a  security_context_t *con_00;\u000a  saved_cwd asStack4088 [252];\u000a  \u000a  __fd = (int)(char *)((ulong)file & 0xffffffff);\u000a  if ((__fd == -100) || (*(char *)con == '/')) {\u000a    __fd = lgetfilecon((char *)con,con_00);\u000a    return __fd;\u000a  }\u000a  __ptr = (saved_cwd *)openat_proc_name((char *)asStack4088,(char *)((ulong)file & 0xffffffff));\u000a  if (__ptr != (saved_cwd *)0x0) {\u000a    iVar2 = lgetfilecon((char *)__ptr,con_00);\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar1 = *puVar4;\u000a    if (__ptr != asStack4088) {\u000a      free(__ptr);\u000a    }\u000a    if (iVar2 != -1) {\u000a      return iVar2;\u000a    }\u000a    if (((0x26 < uVar1) || ((0x4000102006U >> ((ulong)uVar1 & 0x1f) & 1) == 0)) && (uVar1 != 0x5f))\u000a    {\u000a      *puVar4 = uVar1;\u000a      return -1;\u000a    }\u000a  }\u000a  iVar2 = save_cwd(asStack4088);\u000a  if (iVar2 != 0) {\u000a    puVar4 = (uint *)__errno_location();\u000a    openat_save_fail((ulong)*puVar4);\u000aLAB_0041b1e4:\u000a    puVar4 = (uint *)__errno_location();\u000a                    /* WARNING: Subroutine does not return */\u000a    openat_restore_fail((ulong)*puVar4);\u000a  }\u000a  if ((__fd < 0) || (asStack4088[0].desc != __fd)) {\u000a    __fd = fchdir(__fd);\u000a    if (__fd == 0) {\u000a      iVar2 = lgetfilecon((char *)con,con_00);\u000a      __fd = 0;\u000a      if (iVar2 == -1) {\u000a        piVar5 = __errno_location();\u000a        __fd = *piVar5;\u000a      }\u000a      iVar3 = restore_cwd(asStack4088);\u000a      if (iVar3 != 0) goto LAB_0041b1e4;\u000a      free_cwd(asStack4088);\u000a      if (__fd != 0) {\u000a        piVar5 = __errno_location();\u000a        *piVar5 = __fd;\u000a      }\u000a    }\u000a    else {\u000a      piVar5 = __errno_location();\u000a      __fd = *piVar5;\u000a      free_cwd(asStack4088);\u000a      *piVar5 = __fd;\u000a      iVar2 = -1;\u000a    }\u000a  }\u000a  else {\u000a    free_cwd(asStack4088);\u000a    piVar5 = __errno_location();\u000a    *piVar5 = 9;\u000a    iVar2 = -1;\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p4784
S'JMP 0x0041b060\n'
p4785
S'e9 fb 08 01 00\n'
p4786
S'.text:000000000040a760\n'
p4787
tp4788
sS'lseek'
p4789
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p4790
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_0062d1b0)();\u000a  return _Var1;\u000a}\u000a\u000a
p4791
S'JMP qword ptr [0x0062d1b0]\n'
p4792
S'ff 25 8a a7 22 00\n'
p4793
S'.plt:0000000000402a20\n'
p4794
tp4795
sS'AD_compare'
p4796
(S'\n__stdcall AD_compare(void * x, void * y)\n'
p4797
V\u000a_Bool AD_compare(void *x,void *y)\u000a\u000a{\u000a  if (*(long *)((long)x + 8) == *(long *)((long)y + 8)) {\u000a    return (_Bool)(*(long *)x == *(long *)y);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p4798
S'MOV RAX,qword ptr [RDI + 0x8]\nCMP RAX,qword ptr [RSI + 0x8]\nJNZ 0x00419d64\nMOV RAX,qword ptr [RDI]\nCMP RAX,qword ptr [RSI]\nSETZ AL\nRET\nXOR EAX,EAX\nRET\n'
p4799
S'48 8b 47 08\n48 3b 46 08\n75 0a\n48 8b 07\n48 3b 06\n0f 94 c0\nc3\n31 c0\nc3\n'
p4800
S'.text:0000000000419d50\n.text:0000000000419d54\n.text:0000000000419d58\n.text:0000000000419d5a\n.text:0000000000419d5d\n.text:0000000000419d60\n.text:0000000000419d63\n.text:0000000000419d64\n.text:0000000000419d66\n'
p4801
tp4802
sS'memrchr'
p4803
(S'\n__stdcall memrchr(void * __s, int __c, size_t __n)\n'
p4804
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memrchr(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memrchr_0062d370)();\u000a  return pvVar1;\u000a}\u000a\u000a
p4805
S'JMP qword ptr [0x0062d370]\n'
p4806
S'ff 25 ca a5 22 00\n'
p4807
S'.plt:0000000000402da0\n'
p4808
tp4809
sS'pred_inum'
p4810
(S'\n__stdcall pred_inum(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p4811
V\u000a_Bool pred_inum(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  \u000a  uVar2 = stat_buf->st_ino;\u000a  if (uVar2 == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("stat_buf->st_ino != 0","pred.c",0x239,\u000a                  "_Bool pred_inum(const char *, struct stat *, struct predicate *)");\u000a  }\u000a  iVar1 = *(int *)pred_ptr->args;\u000a  if (iVar1 == 2) {\u000a    if (uVar2 == *(ulong *)(pred_ptr->args + 8)) {\u000a      return true;\u000a    }\u000a  }\u000a  else {\u000a    if (iVar1 == 1) {\u000a      if (uVar2 < *(ulong *)(pred_ptr->args + 8)) {\u000a        return true;\u000a      }\u000a    }\u000a    else {\u000a      if ((iVar1 == 0) &&\u000a         (*(ulong *)(pred_ptr->args + 8) <= uVar2 && uVar2 != *(ulong *)(pred_ptr->args + 8))) {\u000a        return true;\u000a      }\u000a    }\u000a  }\u000a  return false;\u000a}\u000a\u000a
p4812
S'MOV RCX,qword ptr [RSI + 0x8]\nTEST RCX,RCX\nJZ 0x004041b9\nMOV EAX,dword ptr [RDX + 0x38]\nCMP EAX,0x2\nJZ 0x004041ae\nCMP EAX,0x1\nJZ 0x004041a4\nTEST EAX,EAX\nJNZ 0x004041b6\nMOV AL,0x1\nCMP RCX,qword ptr [RDX + 0x40]\nJBE 0x004041b6\nJMP 0x004041b8\nMOV AL,0x1\nCMP RCX,qword ptr [RDX + 0x40]\nJNC 0x004041b6\nJMP 0x004041b8\nMOV AL,0x1\nCMP RCX,qword ptr [RDX + 0x40]\nJZ 0x004041b8\nXOR EAX,EAX\nRET\nPUSH RAX\nMOV EDI,0x41cdaa\nMOV ESI,0x41cd0c\nMOV EDX,0x239\nMOV ECX,0x41cdc0\nCALL 0x00402a40\n'
p4813
S'48 8b 4e 08\n48 85 c9\n74 30\n8b 42 38\n83 f8 02\n74 1d\n83 f8 01\n74 0e\n85 c0\n75 1c\nb0 01\n48 3b 4a 40\n76 14\neb 14\nb0 01\n48 3b 4a 40\n73 0a\neb 0a\nb0 01\n48 3b 4a 40\n74 02\n31 c0\nc3\n50\nbf aa cd 41 00\nbe 0c cd 41 00\nba 39 02 00 00\nb9 c0 cd 41 00\ne8 6d e8 ff ff\n'
p4814
S'.text:0000000000404180\n.text:0000000000404184\n.text:0000000000404187\n.text:0000000000404189\n.text:000000000040418c\n.text:000000000040418f\n.text:0000000000404191\n.text:0000000000404194\n.text:0000000000404196\n.text:0000000000404198\n.text:000000000040419a\n.text:000000000040419c\n.text:00000000004041a0\n.text:00000000004041a2\n.text:00000000004041a4\n.text:00000000004041a6\n.text:00000000004041aa\n.text:00000000004041ac\n.text:00000000004041ae\n.text:00000000004041b0\n.text:00000000004041b4\n.text:00000000004041b6\n.text:00000000004041b8\n.text:00000000004041b9\n.text:00000000004041ba\n.text:00000000004041bf\n.text:00000000004041c4\n.text:00000000004041c9\n.text:00000000004041ce\n'
p4815
tp4816
sS'calloc'
p4817
(S'\n__stdcall calloc(size_t __nmemb, size_t __size)\n'
p4818
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * calloc(size_t __nmemb,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_calloc_0062d238)();\u000a  return pvVar1;\u000a}\u000a\u000a
p4819
S'JMP qword ptr [0x0062d238]\n'
p4820
S'ff 25 02 a7 22 00\n'
p4821
S'.plt:0000000000402b30\n'
p4822
tp4823
sS'get_mounted_devices'
p4824
(S'\n__stdcall get_mounted_devices(size_t * n)\n'
p4825
V\u000adev_t * get_mounted_devices(size_t *n)\u000a\u000a{\u000a  int iVar1;\u000a  mount_entry *p;\u000a  dev_t *pdVar2;\u000a  mount_entry *p_00;\u000a  dev_t *existing;\u000a  size_t sVar3;\u000a  size_t local_38;\u000a  \u000a  local_38 = 0;\u000a  p = read_file_system_list();\u000a  if (p == (mount_entry *)0x0) {\u000a    free_file_system_list((mount_entry *)0x0);\u000a  }\u000a  else {\u000a    sVar3 = 0;\u000a    existing = (dev_t *)0x0;\u000a    p_00 = p;\u000a    do {\u000a      pdVar2 = (dev_t *)extendbuf(existing,sVar3 * 8 + 8,&local_38);\u000a      if (pdVar2 == (dev_t *)0x0) {\u000a        free(existing);\u000a        existing = (dev_t *)0x0;\u000a      }\u000a      else {\u000a        iVar1 = set_fstype_devno(p_00);\u000a        existing = pdVar2;\u000a        if (iVar1 == 0) {\u000a          pdVar2[sVar3] = p_00->me_dev;\u000a          sVar3 = sVar3 + 1;\u000a          existing = pdVar2;\u000a        }\u000a      }\u000a      p_00 = p_00->me_next;\u000a    } while (p_00 != (mount_entry *)0x0);\u000a    free_file_system_list(p);\u000a    if (existing != (dev_t *)0x0) {\u000a      *n = sVar3;\u000a      return existing;\u000a    }\u000a  }\u000a  return (dev_t *)0x0;\u000a}\u000a\u000a
p4826
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV RBX,RDI\nMOV qword ptr [RSP + 0x10],0x0\nXOR EDI,EDI\nCALL 0x0041a740\nMOV R15,RAX\nTEST R15,R15\nJZ 0x0040a58e\nMOV qword ptr [RSP + 0x8],RBX\nXOR R14D,R14D\nLEA R12,[RSP + 0x10]\nXOR EBP,EBP\nMOV RBX,R15\nNOP\nLEA RSI,[0x8 + R14*0x8]\nMOV RDI,RBP\nMOV RDX,R12\nCALL 0x0040e5f0\nMOV R13,RAX\nTEST R13,R13\nJZ 0x0040a560\nMOV RDI,RBX\nCALL 0x0040a5b0\nTEST EAX,EAX\nJNZ 0x0040a56b\nMOV RAX,qword ptr [RBX + 0x20]\nMOV qword ptr [R13 + R14*0x8],RAX\nINC R14\nJMP 0x0040a56b\nMOV RDI,RBP\nCALL 0x00402710\nXOR R13D,R13D\nMOV RBX,qword ptr [RBX + 0x30]\nTEST RBX,RBX\nMOV RBP,R13\nJNZ 0x0040a520\nMOV RDI,R15\nCALL 0x0040a4b0\nTEST R13,R13\nJZ 0x0040a596\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [RAX],R14\nJMP 0x0040a599\nMOV RDI,R15\nCALL 0x0040a4b0\nXOR R13D,R13D\nMOV RAX,R13\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p4827
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n48 89 fb\n48 c7 44 24 10 00 00 00 00\n31 ff\ne8 3f 02 01 00\n49 89 c7\n4d 85 ff\n0f 84 81 00 00 00\n48 89 5c 24 08\n45 31 f6\n4c 8d 64 24 10\n31 ed\n4c 89 fb\n90\n4a 8d 34 f5 08 00 00 00\n48 89 ef\n4c 89 e2\ne8 bd 40 00 00\n49 89 c5\n4d 85 ed\n74 25\n48 89 df\ne8 6d 00 00 00\n85 c0\n75 24\n48 8b 43 20\n4b 89 44 f5 00\n49 ff c6\neb 16\n48 89 ef\ne8 a8 81 ff ff\n45 31 ed\n48 8b 5b 30\n48 85 db\n4c 89 ed\n75 a9\n4c 89 ff\ne8 31 ff ff ff\n4d 85 ed\n74 12\n48 8b 44 24 08\n4c 89 30\neb 0b\n4c 89 ff\ne8 1a ff ff ff\n45 31 ed\n4c 89 e8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p4828
S'.text:000000000040a4e0\n.text:000000000040a4e1\n.text:000000000040a4e3\n.text:000000000040a4e5\n.text:000000000040a4e7\n.text:000000000040a4e9\n.text:000000000040a4ea\n.text:000000000040a4ee\n.text:000000000040a4f1\n.text:000000000040a4fa\n.text:000000000040a4fc\n.text:000000000040a501\n.text:000000000040a504\n.text:000000000040a507\n.text:000000000040a50d\n.text:000000000040a512\n.text:000000000040a515\n.text:000000000040a51a\n.text:000000000040a51c\n.text:000000000040a51f\n.text:000000000040a520\n.text:000000000040a528\n.text:000000000040a52b\n.text:000000000040a52e\n.text:000000000040a533\n.text:000000000040a536\n.text:000000000040a539\n.text:000000000040a53b\n.text:000000000040a53e\n.text:000000000040a543\n.text:000000000040a545\n.text:000000000040a547\n.text:000000000040a54b\n.text:000000000040a550\n.text:000000000040a553\n.text:000000000040a560\n.text:000000000040a563\n.text:000000000040a568\n.text:000000000040a56b\n.text:000000000040a56f\n.text:000000000040a572\n.text:000000000040a575\n.text:000000000040a577\n.text:000000000040a57a\n.text:000000000040a57f\n.text:000000000040a582\n.text:000000000040a584\n.text:000000000040a589\n.text:000000000040a58c\n.text:000000000040a58e\n.text:000000000040a591\n.text:000000000040a596\n.text:000000000040a599\n.text:000000000040a59c\n.text:000000000040a5a0\n.text:000000000040a5a1\n.text:000000000040a5a3\n.text:000000000040a5a5\n.text:000000000040a5a7\n.text:000000000040a5a9\n.text:000000000040a5aa\n'
p4829
tp4830
sS'base_len'
p4831
(S'\n__stdcall base_len(char * name)\n'
p4832
V\u000asize_t base_len(char *name)\u000a\u000a{\u000a  long lVar1;\u000a  size_t sVar2;\u000a  size_t sVar3;\u000a  \u000a  sVar2 = strlen(name);\u000a  do {\u000a    sVar3 = sVar2;\u000a    if (sVar2 < 2) {\u000a      return sVar3;\u000a    }\u000a    lVar1 = sVar2 - 1;\u000a    sVar2 = sVar2 - 1;\u000a  } while (name[lVar1] == '/');\u000a  return sVar3;\u000a}\u000a\u000a
p4833
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00402930\nMOV RCX,RAX\nNOP dword ptr [RAX]\nMOV RAX,RCX\nCMP RAX,0x2\nJC 0x00410114\nLEA RCX,[RAX + -0x1]\nCMP byte ptr [RBX + RAX*0x1 + -0x1],0x2f\nJZ 0x00410100\nPOP RBX\nRET\n'
p4834
S'53\n48 89 fb\ne8 37 28 ff ff\n48 89 c1\n0f 1f 40 00\n48 89 c8\n48 83 f8 02\n72 0b\n48 8d 48 ff\n80 7c 03 ff 2f\n74 ec\n5b\nc3\n'
p4835
S'.text:00000000004100f0\n.text:00000000004100f1\n.text:00000000004100f4\n.text:00000000004100f9\n.text:00000000004100fc\n.text:0000000000410100\n.text:0000000000410103\n.text:0000000000410107\n.text:0000000000410109\n.text:000000000041010d\n.text:0000000000410112\n.text:0000000000410114\n.text:0000000000410115\n'
p4836
tp4837
sS'printf'
p4838
(S'\n__stdcall printf(char * __format)\n'
p4839
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint printf(char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_printf_0062d168)();\u000a  return iVar1;\u000a}\u000a\u000a
p4840
S'JMP qword ptr [0x0062d168]\n'
p4841
S'ff 25 d2 a7 22 00\n'
p4842
S'.plt:0000000000402990\n'
p4843
tp4844
sS'getcwd'
p4845
(S'\n__stdcall getcwd(char * __buf, size_t __size)\n'
p4846
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getcwd(char *__buf,size_t __size)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getcwd_0062d1f8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p4847
S'JMP qword ptr [0x0062d1f8]\n'
p4848
S'ff 25 42 a7 22 00\n'
p4849
S'.plt:0000000000402ab0\n'
p4850
tp4851
sS'version_etc_va'
p4852
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p4853
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p4854
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x004170d0\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x004170dc\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x004170f1\nINC R9\nCMP R9,0xa\nJC 0x004170b0\nMOV R8,RSP\nCALL 0x00416d50\nADD RSP,0x58\nRET\n'
p4855
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 57 fc ff ff\n48 83 c4 58\nc3\n'
p4856
S'.text:00000000004170a0\n.text:00000000004170a4\n.text:00000000004170a7\n.text:00000000004170b0\n.text:00000000004170b3\n.text:00000000004170b7\n.text:00000000004170b9\n.text:00000000004170bc\n.text:00000000004170c0\n.text:00000000004170c4\n.text:00000000004170c7\n.text:00000000004170d0\n.text:00000000004170d4\n.text:00000000004170d8\n.text:00000000004170dc\n.text:00000000004170df\n.text:00000000004170e3\n.text:00000000004170e6\n.text:00000000004170e8\n.text:00000000004170eb\n.text:00000000004170ef\n.text:00000000004170f1\n.text:00000000004170f4\n.text:00000000004170f9\n.text:00000000004170fd\n'
p4857
tp4858
sS'bc_push_arg'
p4859
(S'\n__stdcall bc_push_arg(buildcmd_control * ctl, buildcmd_state * state, char * arg, size_t len, char * prefix, size_t pfxlen)\n'
p4860
V\u000avoid bc_push_arg(buildcmd_control *ctl,buildcmd_state *state,char *arg,size_t len,char *prefix,\u000a                size_t pfxlen)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  int iVar3;\u000a  ulong uVar4;\u000a  undefined8 uVar5;\u000a  char **ppcVar6;\u000a  uint in_stack_00000008;\u000a  \u000a  if (arg != (char *)0x0) {\u000a    if (arg != "do_not_care") {\u000a      uVar4 = pfxlen + len + state->cmd_argv_chars;\u000a      if (ctl->arg_max <= uVar4 && uVar4 != ctl->arg_max) {\u000a        if ((in_stack_00000008 != 0) || (state->cmd_argc == ctl->initial_argc)) {\u000a          uVar5 = dcgettext(0,"cannot fit single argument within argument list size limit",5);\u000a          error(1,0,uVar5,uVar5);\u000a        }\u000a        if ((ctl->replace_pat != (char *)0x0) ||\u000a           ((ctl->exit_if_size_exceeded != 0 &&\u000a            ((ctl->lines_per_exec != 0 || (ctl->args_per_exec != 0)))))) {\u000a          uVar5 = dcgettext(0,"argument list too long",5);\u000a          error(1,0,uVar5,uVar5);\u000a        }\u000a        bc_do_exec(ctl,state);\u000a      }\u000a      iVar3 = bc_argc_limit_reached\u000a                        ((buildcmd_control *)(ulong)in_stack_00000008,(buildcmd_state *)ctl);\u000a      if (iVar3 != 0) {\u000a        bc_do_exec(ctl,state);\u000a      }\u000a    }\u000a    if (in_stack_00000008 == 0) {\u000a      state->todo = 1;\u000a    }\u000a    uVar4 = state->cmd_argv_alloc;\u000a    if (uVar4 <= state->cmd_argc) {\u000a      if (state->cmd_argv == (char **)0x0) {\u000a        state->cmd_argv_alloc = 0x40;\u000a        ppcVar6 = (char **)xmalloc(0x200);\u000a      }\u000a      else {\u000a        state->cmd_argv_alloc = uVar4 * 2;\u000a        ppcVar6 = (char **)xrealloc(state->cmd_argv,uVar4 << 4);\u000a      }\u000a      state->cmd_argv = ppcVar6;\u000a    }\u000a    sVar1 = state->cmd_argc;\u000a    state->cmd_argc = sVar1 + 1;\u000a    if (arg == "do_not_care") {\u000a      state->cmd_argv[sVar1] = (char *)0x0;\u000a    }\u000a    else {\u000a      sVar2 = state->cmd_argv_chars;\u000a      state->cmd_argv[sVar1] = state->argbuf + sVar2;\u000a      if (prefix != (char *)0x0) {\u000a        strcpy(state->argbuf + sVar2,prefix);\u000a        state->cmd_argv_chars = state->cmd_argv_chars + pfxlen;\u000a      }\u000a      strcpy(state->argbuf + state->cmd_argv_chars,arg);\u000a      state->cmd_argv_chars = state->cmd_argv_chars + len;\u000a      iVar3 = bc_argc_limit_reached\u000a                        ((buildcmd_control *)(ulong)in_stack_00000008,(buildcmd_state *)ctl);\u000a      if (iVar3 != 0) {\u000a        bc_do_exec(ctl,state);\u000a      }\u000a    }\u000a    if (in_stack_00000008 != 0) {\u000a      state->cmd_initial_argv_chars = state->cmd_argv_chars;\u000a    }\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("arg != NULL","buildcmd.c",0x15f,\u000a                                \u000a                "void bc_push_arg(struct buildcmd_control *, struct buildcmd_state *, const char *, size_t, const char *, size_t, int)"\u000a               );\u000a}\u000a\u000a
p4861
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV qword ptr [RSP],R9\nMOV R13,R8\nMOV R15,RCX\nMOV RBP,RDX\nMOV RBX,RSI\nMOV R12,RDI\nTEST RBP,RBP\nJZ 0x0040ded5\nMOV R14D,dword ptr [RSP + 0x40]\nMOV EAX,0x421f97\nCMP RBP,RAX\nJZ 0x0040ddca\nMOV RAX,qword ptr [RSP]\nLEA RAX,[RAX + R15*0x1]\nADD RAX,qword ptr [RBX + 0x20]\nCMP RAX,qword ptr [R12 + 0x18]\nJBE 0x0040ddad\nTEST R14D,R14D\nJNZ 0x0040dd4c\nMOV RAX,qword ptr [RBX]\nCMP RAX,qword ptr [R12 + 0x38]\nJNZ 0x0040dd71\nXOR EDI,EDI\nMOV ESI,0x421da5\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402d90\nCMP qword ptr [R12 + 0x30],0x0\nJZ 0x0040dead\nXOR EDI,EDI\nMOV ESI,0x421de0\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402d90\nMOV RDI,R12\nMOV RSI,RBX\nCALL 0x0040def0\nMOV EDI,R14D\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x0040e1b0\nTEST EAX,EAX\nJZ 0x0040ddca\nMOV RDI,R12\nMOV RSI,RBX\nCALL 0x0040def0\nTEST R14D,R14D\nJNZ 0x0040ddd6\nMOV dword ptr [RBX + 0x38],0x1\nMOV RSI,qword ptr [RBX + 0x10]\nCMP qword ptr [RBX],RSI\nJC 0x0040de11\nMOV RDI,qword ptr [RBX + 0x8]\nTEST RDI,RDI\nJZ 0x0040ddfb\nLEA RAX,[RSI + RSI*0x1]\nMOV qword ptr [RBX + 0x10],RAX\nSHL RSI,0x4\nCALL 0x00417260\nJMP 0x0040de0d\nMOV qword ptr [RBX + 0x10],0x40\nMOV EDI,0x200\nCALL 0x00417220\nMOV qword ptr [RBX + 0x8],RAX\nMOV EDX,0x421f97\nMOV RAX,qword ptr [RBX]\nMOV RCX,qword ptr [RBX + 0x8]\nLEA RSI,[RAX + 0x1]\nMOV qword ptr [RBX],RSI\nCMP RBP,RDX\nJZ 0x0040de89\nMOV RDI,qword ptr [RBX + 0x20]\nMOV RDX,qword ptr [RBX + 0x18]\nADD RDX,RDI\nMOV qword ptr [RCX + RAX*0x8],RDX\nTEST R13,R13\nJZ 0x0040de51\nADD RDI,qword ptr [RBX + 0x18]\nMOV RSI,R13\nCALL 0x004027c0\nMOV RAX,qword ptr [RSP]\nADD qword ptr [RBX + 0x20],RAX\nMOV RDI,qword ptr [RBX + 0x18]\nADD RDI,qword ptr [RBX + 0x20]\nMOV RSI,RBP\nCALL 0x004027c0\nADD qword ptr [RBX + 0x20],R15\nMOV EDI,R14D\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x0040e1b0\nTEST EAX,EAX\nJZ 0x0040de91\nMOV RDI,R12\nMOV RSI,RBX\nCALL 0x0040def0\nTEST R14D,R14D\nJNZ 0x0040de96\nJMP 0x0040de9e\nMOV qword ptr [RCX + RAX*0x8],0x0\nTEST R14D,R14D\nJZ 0x0040de9e\nMOV RAX,qword ptr [RBX + 0x20]\nMOV qword ptr [RBX + 0x28],RAX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP dword ptr [R12],0x0\nJZ 0x0040dda2\nCMP qword ptr [R12 + 0x48],0x0\nJNZ 0x0040dd7d\nCMP qword ptr [R12 + 0x50],0x0\nJNZ 0x0040dd7d\nJMP 0x0040dda2\nMOV EDI,0x421d23\nMOV ESI,0x421c75\nMOV EDX,0x15f\nMOV ECX,0x421d2f\nCALL 0x00402a40\n'
p4862
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4c 89 0c 24\n4d 89 c5\n49 89 cf\n48 89 d5\n48 89 f3\n49 89 fc\n48 85 ed\n0f 84 be 01 00 00\n44 8b 74 24 40\nb8 97 1f 42 00\n48 39 c5\n0f 84 a0 00 00 00\n48 8b 04 24\n4a 8d 04 38\n48 03 43 20\n49 3b 44 24 18\n76 70\n45 85 f6\n75 0a\n48 8b 03\n49 3b 44 24 38\n75 25\n31 ff\nbe a5 1d 42 00\nba 05 00 00 00\ne8 b3 4b ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 1f 50 ff ff\n49 83 7c 24 30 00\n0f 84 30 01 00 00\n31 ff\nbe e0 1d 42 00\nba 05 00 00 00\ne8 82 4b ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 ee 4f ff ff\n4c 89 e7\n48 89 de\ne8 43 01 00 00\n44 89 f7\n4c 89 e6\n48 89 da\ne8 f5 03 00 00\n85 c0\n74 0b\n4c 89 e7\n48 89 de\ne8 26 01 00 00\n45 85 f6\n75 07\nc7 43 38 01 00 00 00\n48 8b 73 10\n48 39 33\n72 32\n48 8b 7b 08\n48 85 ff\n74 13\n48 8d 04 36\n48 89 43 10\n48 c1 e6 04\ne8 67 94 00 00\neb 12\n48 c7 43 10 40 00 00 00\nbf 00 02 00 00\ne8 13 94 00 00\n48 89 43 08\nba 97 1f 42 00\n48 8b 03\n48 8b 4b 08\n48 8d 70 01\n48 89 33\n48 39 d5\n74 60\n48 8b 7b 20\n48 8b 53 18\n48 01 fa\n48 89 14 c1\n4d 85 ed\n74 14\n48 03 7b 18\n4c 89 ee\ne8 77 49 ff ff\n48 8b 04 24\n48 01 43 20\n48 8b 7b 18\n48 03 7b 20\n48 89 ee\ne8 5f 49 ff ff\n4c 01 7b 20\n44 89 f7\n4c 89 e6\n48 89 da\ne8 3d 03 00 00\n85 c0\n74 1a\n4c 89 e7\n48 89 de\ne8 6e 00 00 00\n45 85 f6\n75 0f\neb 15\n48 c7 04 c1 00 00 00 00\n45 85 f6\n74 08\n48 8b 43 20\n48 89 43 28\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n41 83 3c 24 00\n0f 84 ea fe ff ff\n49 83 7c 24 48 00\n0f 85 b9 fe ff ff\n49 83 7c 24 50 00\n0f 85 ad fe ff ff\ne9 cd fe ff ff\nbf 23 1d 42 00\nbe 75 1c 42 00\nba 5f 01 00 00\nb9 2f 1d 42 00\ne8 52 4b ff ff\n'
p4863
S'.text:000000000040dcf0\n.text:000000000040dcf1\n.text:000000000040dcf3\n.text:000000000040dcf5\n.text:000000000040dcf7\n.text:000000000040dcf9\n.text:000000000040dcfa\n.text:000000000040dcfb\n.text:000000000040dcff\n.text:000000000040dd02\n.text:000000000040dd05\n.text:000000000040dd08\n.text:000000000040dd0b\n.text:000000000040dd0e\n.text:000000000040dd11\n.text:000000000040dd17\n.text:000000000040dd1c\n.text:000000000040dd21\n.text:000000000040dd24\n.text:000000000040dd2a\n.text:000000000040dd2e\n.text:000000000040dd32\n.text:000000000040dd36\n.text:000000000040dd3b\n.text:000000000040dd3d\n.text:000000000040dd40\n.text:000000000040dd42\n.text:000000000040dd45\n.text:000000000040dd4a\n.text:000000000040dd4c\n.text:000000000040dd4e\n.text:000000000040dd53\n.text:000000000040dd58\n.text:000000000040dd5d\n.text:000000000040dd60\n.text:000000000040dd65\n.text:000000000040dd67\n.text:000000000040dd69\n.text:000000000040dd6c\n.text:000000000040dd71\n.text:000000000040dd77\n.text:000000000040dd7d\n.text:000000000040dd7f\n.text:000000000040dd84\n.text:000000000040dd89\n.text:000000000040dd8e\n.text:000000000040dd91\n.text:000000000040dd96\n.text:000000000040dd98\n.text:000000000040dd9a\n.text:000000000040dd9d\n.text:000000000040dda2\n.text:000000000040dda5\n.text:000000000040dda8\n.text:000000000040ddad\n.text:000000000040ddb0\n.text:000000000040ddb3\n.text:000000000040ddb6\n.text:000000000040ddbb\n.text:000000000040ddbd\n.text:000000000040ddbf\n.text:000000000040ddc2\n.text:000000000040ddc5\n.text:000000000040ddca\n.text:000000000040ddcd\n.text:000000000040ddcf\n.text:000000000040ddd6\n.text:000000000040ddda\n.text:000000000040dddd\n.text:000000000040dddf\n.text:000000000040dde3\n.text:000000000040dde6\n.text:000000000040dde8\n.text:000000000040ddec\n.text:000000000040ddf0\n.text:000000000040ddf4\n.text:000000000040ddf9\n.text:000000000040ddfb\n.text:000000000040de03\n.text:000000000040de08\n.text:000000000040de0d\n.text:000000000040de11\n.text:000000000040de16\n.text:000000000040de19\n.text:000000000040de1d\n.text:000000000040de21\n.text:000000000040de24\n.text:000000000040de27\n.text:000000000040de29\n.text:000000000040de2d\n.text:000000000040de31\n.text:000000000040de34\n.text:000000000040de38\n.text:000000000040de3b\n.text:000000000040de3d\n.text:000000000040de41\n.text:000000000040de44\n.text:000000000040de49\n.text:000000000040de4d\n.text:000000000040de51\n.text:000000000040de55\n.text:000000000040de59\n.text:000000000040de5c\n.text:000000000040de61\n.text:000000000040de65\n.text:000000000040de68\n.text:000000000040de6b\n.text:000000000040de6e\n.text:000000000040de73\n.text:000000000040de75\n.text:000000000040de77\n.text:000000000040de7a\n.text:000000000040de7d\n.text:000000000040de82\n.text:000000000040de85\n.text:000000000040de87\n.text:000000000040de89\n.text:000000000040de91\n.text:000000000040de94\n.text:000000000040de96\n.text:000000000040de9a\n.text:000000000040de9e\n.text:000000000040dea2\n.text:000000000040dea3\n.text:000000000040dea5\n.text:000000000040dea7\n.text:000000000040dea9\n.text:000000000040deab\n.text:000000000040deac\n.text:000000000040dead\n.text:000000000040deb2\n.text:000000000040deb8\n.text:000000000040debe\n.text:000000000040dec4\n.text:000000000040deca\n.text:000000000040ded0\n.text:000000000040ded5\n.text:000000000040deda\n.text:000000000040dedf\n.text:000000000040dee4\n.text:000000000040dee9\n'
p4864
tp4865
sS'hash_print_statistics'
p4866
(S'\n__stdcall hash_print_statistics(Hash_table * table, FILE * stream)\n'
p4867
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000avoid hash_print_statistics(Hash_table *table,FILE *stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  undefined auVar5 [16];\u000a  undefined auVar6 [16];\u000a  undefined4 uVar7;\u000a  \u000a  sVar1 = hash_get_n_entries(table);\u000a  sVar2 = hash_get_n_buckets(table);\u000a  sVar3 = hash_get_n_buckets_used(table);\u000a  sVar4 = hash_get_max_bucket_length(table);\u000a  fprintf((FILE *)stream,"# entries:         %lu\u005cn",sVar1);\u000a  fprintf((FILE *)stream,"# buckets:         %lu\u005cn",sVar2);\u000a  uVar7 = SUB164(_DAT_0041caa0 >> 0x20,0);\u000a  auVar5 = subpd(CONCAT88(SUB168(CONCAT412(uVar7,ZEXT812(sVar3) &\u000a                                                 (undefined  [12])0xffffffffffffffff |\u000a                                                 (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                          CONCAT44(SUB164(_DAT_0041caa0,0),\u000a                                   SUB124(ZEXT812(sVar3) & (undefined  [12])0xffffffffffffffff,0))),\u000a                 CONCAT88(DAT_0041cab8,DAT_0041cab0));\u000a  auVar5 = addpd(CONCAT412(SUB164(auVar5 >> 0x20,0),\u000a                           CONCAT48(SUB164(auVar5,0),SUB168(auVar5 >> 0x40,0))),auVar5);\u000a  auVar6 = subpd(CONCAT88(SUB168(CONCAT412(uVar7,ZEXT812(sVar2) &\u000a                                                 (undefined  [12])0xffffffffffffffff |\u000a                                                 (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                          CONCAT44(SUB164(_DAT_0041caa0,0),\u000a                                   SUB124(ZEXT812(sVar2) & (undefined  [12])0xffffffffffffffff,0))),\u000a                 CONCAT88(DAT_0041cab8,DAT_0041cab0));\u000a  auVar6 = addpd(CONCAT412(SUB164(auVar6 >> 0x20,0),\u000a                           CONCAT48(SUB164(auVar6,0),SUB168(auVar6 >> 0x40,0))),auVar6);\u000a  fprintf((FILE *)CONCAT88(SUB168(auVar5 >> 0x40,0),\u000a                           (SUB168(auVar5,0) * _DAT_00422820) / SUB168(auVar6,0)),(char *)stream,\u000a          "# buckets used:    %lu (%.2f%%)\u005cn",sVar3);\u000a  fprintf((FILE *)stream,"max bucket length: %lu\u005cn",sVar4);\u000a  return;\u000a}\u000a\u000a
p4868
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R13,RSI\nMOV RBX,RDI\nCALL 0x004103f0\nMOV RBP,RAX\nMOV RDI,RBX\nCALL 0x004103d0\nMOV R12,RAX\nMOV RDI,RBX\nCALL 0x004103e0\nMOV R15,RAX\nMOV RDI,RBX\nCALL 0x00410400\nMOV R14,RAX\nMOV ESI,0x422838\nXOR EAX,EAX\nMOV RDI,R13\nMOV RDX,RBP\nCALL 0x00402ba0\nMOV ESI,0x422850\nXOR EAX,EAX\nMOV RDI,R13\nMOV RDX,R12\nCALL 0x00402ba0\nMOVQ XMM1,R15\nMOVDQA XMM2,xmmword ptr [0x0041caa0]\nPUNPCKLDQ XMM1,XMM2\nMOVAPD XMM3,xmmword ptr [0x0041cab0]\nSUBPD XMM1,XMM3\nPSHUFD XMM0,XMM1,0x4e\nADDPD XMM0,XMM1\nMULSD XMM0,qword ptr [0x00422820]\nMOVQ XMM1,R12\nPUNPCKLDQ XMM1,XMM2\nSUBPD XMM1,XMM3\nPSHUFD XMM2,XMM1,0x4e\nADDPD XMM2,XMM1\nDIVSD XMM0,XMM2\nMOV ESI,0x422868\nMOV AL,0x1\nMOV RDI,R13\nMOV RDX,R15\nCALL 0x00402ba0\nMOV ESI,0x422889\nXOR EAX,EAX\nMOV RDI,R13\nMOV RDX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00402ba0\n'
p4869
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f5\n48 89 fb\ne8 3a ff ff ff\n48 89 c5\n48 89 df\ne8 0f ff ff ff\n49 89 c4\n48 89 df\ne8 14 ff ff ff\n49 89 c7\n48 89 df\ne8 29 ff ff ff\n49 89 c6\nbe 38 28 42 00\n31 c0\n4c 89 ef\n48 89 ea\ne8 b4 26 ff ff\nbe 50 28 42 00\n31 c0\n4c 89 ef\n4c 89 e2\ne8 a2 26 ff ff\n66 49 0f 6e cf\n66 0f 6f 15 95 c5 00 00\n66 0f 62 ca\n66 0f 28 1d 99 c5 00 00\n66 0f 5c cb\n66 0f 70 c1 4e\n66 0f 58 c1\nf2 0f 59 05 f4 22 01 00\n66 49 0f 6e cc\n66 0f 62 ca\n66 0f 5c cb\n66 0f 70 d1 4e\n66 0f 58 d1\nf2 0f 5e c2\nbe 68 28 42 00\nb0 01\n4c 89 ef\n4c 89 fa\ne8 48 26 ff ff\nbe 89 28 42 00\n31 c0\n4c 89 ef\n4c 89 f2\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 28 26 ff ff\n'
p4870
S'.text:00000000004104a0\n.text:00000000004104a1\n.text:00000000004104a3\n.text:00000000004104a5\n.text:00000000004104a7\n.text:00000000004104a9\n.text:00000000004104aa\n.text:00000000004104ab\n.text:00000000004104ae\n.text:00000000004104b1\n.text:00000000004104b6\n.text:00000000004104b9\n.text:00000000004104bc\n.text:00000000004104c1\n.text:00000000004104c4\n.text:00000000004104c7\n.text:00000000004104cc\n.text:00000000004104cf\n.text:00000000004104d2\n.text:00000000004104d7\n.text:00000000004104da\n.text:00000000004104df\n.text:00000000004104e1\n.text:00000000004104e4\n.text:00000000004104e7\n.text:00000000004104ec\n.text:00000000004104f1\n.text:00000000004104f3\n.text:00000000004104f6\n.text:00000000004104f9\n.text:00000000004104fe\n.text:0000000000410503\n.text:000000000041050b\n.text:000000000041050f\n.text:0000000000410517\n.text:000000000041051b\n.text:0000000000410520\n.text:0000000000410524\n.text:000000000041052c\n.text:0000000000410531\n.text:0000000000410535\n.text:0000000000410539\n.text:000000000041053e\n.text:0000000000410542\n.text:0000000000410546\n.text:000000000041054b\n.text:000000000041054d\n.text:0000000000410550\n.text:0000000000410553\n.text:0000000000410558\n.text:000000000041055d\n.text:000000000041055f\n.text:0000000000410562\n.text:0000000000410565\n.text:0000000000410569\n.text:000000000041056a\n.text:000000000041056c\n.text:000000000041056e\n.text:0000000000410570\n.text:0000000000410572\n.text:0000000000410573\n'
p4871
tp4872
sS'next_prime'
p4873
(S'\n__stdcall next_prime(size_t candidate)\n'
p4874
V\u000asize_t next_prime(size_t candidate)\u000a\u000a{\u000a  _Bool _Var1;\u000a  size_t candidate_00;\u000a  size_t sVar2;\u000a  \u000a  candidate_00 = 10;\u000a  if (10 < candidate) {\u000a    candidate_00 = candidate;\u000a  }\u000a  candidate_00 = candidate_00 | 1;\u000a  while ((sVar2 = 0xffffffffffffffff, candidate_00 != 0xffffffffffffffff &&\u000a         (_Var1 = is_prime(candidate_00), sVar2 = candidate_00, _Var1 == false))) {\u000a    candidate_00 = candidate_00 + 2;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p4875
S'PUSH R14\nPUSH RBX\nPUSH RAX\nCMP RDI,0xa\nMOV EBX,0xa\nCMOVA RBX,RDI\nOR RBX,0x1\nMOV R14,-0x1\nCMP RBX,-0x1\nJNZ 0x004112ba\nJMP 0x004112c9\nADD RBX,0x2\nCMP RBX,-0x1\nJZ 0x004112c9\nMOV RDI,RBX\nCALL 0x004112e0\nTEST AL,AL\nJZ 0x004112b0\nMOV R14,RBX\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p4876
S'41 56\n53\n50\n48 83 ff 0a\nbb 0a 00 00 00\n48 0f 47 df\n48 83 cb 01\n49 c7 c6 ff ff ff ff\n48 83 fb ff\n75 18\neb 25\n48 83 c3 02\n48 83 fb ff\n74 0f\n48 89 df\ne8 1e 00 00 00\n84 c0\n74 ea\n49 89 de\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p4877
S'.text:0000000000411280\n.text:0000000000411282\n.text:0000000000411283\n.text:0000000000411284\n.text:0000000000411288\n.text:000000000041128d\n.text:0000000000411291\n.text:0000000000411295\n.text:000000000041129c\n.text:00000000004112a0\n.text:00000000004112a2\n.text:00000000004112b0\n.text:00000000004112b4\n.text:00000000004112b8\n.text:00000000004112ba\n.text:00000000004112bd\n.text:00000000004112c2\n.text:00000000004112c4\n.text:00000000004112c6\n.text:00000000004112c9\n.text:00000000004112cc\n.text:00000000004112d0\n.text:00000000004112d1\n.text:00000000004112d3\n'
p4878
tp4879
sS'openat_restore_fail'
p4880
(S'\n__stdcall openat_restore_fail()\n'
p4881
V\u000avoid openat_restore_fail(uint uParm1)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"failed to return to initial working directory",5);\u000a  error((ulong)(uint)iVar1,(ulong)uParm1,uVar2,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p4882
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBX,EDI\nMOV EBP,dword ptr [0x0062dda0]\nXOR EDI,EDI\nMOV ESI,0x42316b\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nXOR EAX,EAX\nMOV EDI,EBP\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00402d90\nCALL 0x00402750\n'
p4883
S'55\n53\n50\n89 fb\n8b 2d 45 ab 21 00\n31 ff\nbe 6b 31 42 00\nba 05 00 00 00\ne8 a4 f6 fe ff\n48 89 c1\n31 c0\n89 ef\n89 de\n48 89 ca\ne8 13 fb fe ff\ne8 ce f4 fe ff\n'
p4884
S'.text:0000000000413250\n.text:0000000000413251\n.text:0000000000413252\n.text:0000000000413253\n.text:0000000000413255\n.text:000000000041325b\n.text:000000000041325d\n.text:0000000000413262\n.text:0000000000413267\n.text:000000000041326c\n.text:000000000041326f\n.text:0000000000413271\n.text:0000000000413273\n.text:0000000000413275\n.text:0000000000413278\n.text:000000000041327d\n'
p4885
tp4886
sS'lsetfilecon'
p4887
(S'\n__stdcall lsetfilecon(char * file, security_context_t con)\n'
p4888
V\u000aint lsetfilecon(char *file,security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p4889
S'PUSH RAX\nCALL 0x00402770\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p4890
S'50\ne8 2a bc fe ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p4891
S'.text:0000000000416b40\n.text:0000000000416b41\n.text:0000000000416b46\n.text:0000000000416b4c\n.text:0000000000416b51\n.text:0000000000416b52\n'
p4892
tp4893
sS'getpwnam'
p4894
(S'\n__stdcall getpwnam(char * __name)\n'
p4895
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000apasswd * getpwnam(char *__name)\u000a\u000a{\u000a  passwd *ppVar1;\u000a  \u000a  ppVar1 = (passwd *)(*(code *)PTR_getpwnam_0062d260)();\u000a  return ppVar1;\u000a}\u000a\u000a
p4896
S'JMP qword ptr [0x0062d260]\n'
p4897
S'ff 25 da a6 22 00\n'
p4898
S'.plt:0000000000402b80\n'
p4899
tp4900
sS'hash_insert'
p4901
(S'\n__stdcall hash_insert(Hash_table * table, void * entry)\n'
p4902
V\u000avoid * hash_insert(Hash_table *table,void *entry)\u000a\u000a{\u000a  int iVar1;\u000a  void *matched_ent;\u000a  void *local_10;\u000a  \u000a  iVar1 = hash_insert_if_absent(table,entry,&local_10);\u000a  if (iVar1 == -1) {\u000a    entry = (void *)0x0;\u000a  }\u000a  else {\u000a    if (iVar1 == 0) {\u000a      entry = local_10;\u000a    }\u000a  }\u000a  return entry;\u000a}\u000a\u000a
p4903
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RSI\nLEA RDX,[RSP + 0x8]\nCALL 0x00410df0\nCMP EAX,-0x1\nJZ 0x004110e1\nTEST EAX,EAX\nCMOVZ RBX,qword ptr [RSP + 0x8]\nJMP 0x004110e3\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x10\nPOP RBX\nRET\n'
p4904
S'53\n48 83 ec 10\n48 89 f3\n48 8d 54 24 08\ne8 1e fd ff ff\n83 f8 ff\n74 0a\n85 c0\n48 0f 44 5c 24 08\neb 02\n31 db\n48 89 d8\n48 83 c4 10\n5b\nc3\n'
p4905
S'.text:00000000004110c0\n.text:00000000004110c1\n.text:00000000004110c5\n.text:00000000004110c8\n.text:00000000004110cd\n.text:00000000004110d2\n.text:00000000004110d5\n.text:00000000004110d7\n.text:00000000004110d9\n.text:00000000004110df\n.text:00000000004110e1\n.text:00000000004110e3\n.text:00000000004110e6\n.text:00000000004110ea\n.text:00000000004110eb\n'
p4906
tp4907
sS'gettext_quote'
p4908
(S'\n__stdcall gettext_quote(char * msgid)\n'
p4909
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_00424a5c;\u000a        pcVar2 = &DAT_00424a60;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p4910
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x00402910\nCMP RAX,RBX\nJNZ 0x00416658\nCALL 0x0041bcd0\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00416660\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00416608\nCMP byte ptr [RBX],0x60\nMOV ECX,0x424a4c\nMOV EAX,0x424a50\nJMP 0x00416654\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00416660\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00416646\nCMP byte ptr [RBX],0x60\nMOV ECX,0x424a5c\nMOV EAX,0x424a60\nJMP 0x00416654\nCMP R14D,0x9\nMOV ECX,0x424281\nMOV EAX,0x41f6f2\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p4911
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 57 c3 fe ff\n48 39 d8\n0f 85 96 00 00 00\ne8 09 57 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 4c 4a 42 00\nb8 50 4a 42 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 5c 4a 42 00\nb8 60 4a 42 00\neb 0e\n41 83 fe 09\nb9 81 42 42 00\nb8 f2 f6 41 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p4912
S'.text:00000000004165a0\n.text:00000000004165a1\n.text:00000000004165a3\n.text:00000000004165a4\n.text:00000000004165a7\n.text:00000000004165aa\n.text:00000000004165ac\n.text:00000000004165b1\n.text:00000000004165b4\n.text:00000000004165b9\n.text:00000000004165bc\n.text:00000000004165c2\n.text:00000000004165c7\n.text:00000000004165ca\n.text:00000000004165cf\n.text:00000000004165d4\n.text:00000000004165d9\n.text:00000000004165df\n.text:00000000004165e5\n.text:00000000004165e8\n.text:00000000004165ea\n.text:00000000004165ec\n.text:00000000004165f1\n.text:00000000004165f5\n.text:00000000004165f7\n.text:00000000004165f9\n.text:00000000004165fc\n.text:0000000000416601\n.text:0000000000416606\n.text:0000000000416608\n.text:000000000041660d\n.text:0000000000416612\n.text:0000000000416617\n.text:000000000041661d\n.text:0000000000416623\n.text:0000000000416626\n.text:0000000000416628\n.text:000000000041662a\n.text:000000000041662f\n.text:0000000000416633\n.text:0000000000416635\n.text:0000000000416637\n.text:000000000041663a\n.text:000000000041663f\n.text:0000000000416644\n.text:0000000000416646\n.text:000000000041664a\n.text:000000000041664f\n.text:0000000000416654\n.text:0000000000416658\n.text:0000000000416659\n.text:000000000041665b\n.text:000000000041665c\n'
p4913
tp4914
sS'fts_close'
p4915
(S'\n__stdcall fts_close(FTS * sp)\n'
p4916
V\u000aint fts_close(FTS *sp)\u000a\u000a{\u000a  _ftsent *__ptr;\u000a  _ftsent *p_Var1;\u000a  long lVar2;\u000a  int iVar3;\u000a  int iVar4;\u000a  _ftsent **pp_Var5;\u000a  int *piVar6;\u000a  \u000a  __ptr = sp->fts_cur;\u000a  if (__ptr != (_ftsent *)0x0) {\u000a    lVar2 = __ptr->fts_level;\u000a    while (-1 < lVar2) {\u000a      pp_Var5 = &__ptr->fts_link;\u000a      if (__ptr->fts_link == (_ftsent *)0x0) {\u000a        pp_Var5 = &__ptr->fts_parent;\u000a      }\u000a      p_Var1 = *pp_Var5;\u000a      free(__ptr);\u000a      lVar2 = p_Var1->fts_level;\u000a      __ptr = p_Var1;\u000a    }\u000a    free(__ptr);\u000a  }\u000a  if ((FTSENT *)sp->fts_child != (FTSENT *)0x0) {\u000a    fts_lfree((FTSENT *)sp->fts_child);\u000a  }\u000a  free(sp->fts_array);\u000a  free(sp->fts_path);\u000a  if ((sp->fts_options & 0x200U) == 0) {\u000a    iVar3 = 0;\u000a    if ((sp->fts_options & 4U) != 0) goto LAB_0041895f;\u000a    iVar3 = fchdir(sp->fts_rfd);\u000a    if (iVar3 == 0) {\u000a      iVar3 = 0;\u000a    }\u000a    else {\u000a      piVar6 = __errno_location();\u000a      iVar3 = *piVar6;\u000a    }\u000a    iVar4 = close(sp->fts_rfd);\u000a    if (iVar3 != 0) goto LAB_0041895f;\u000a  }\u000a  else {\u000a    iVar3 = 0;\u000a    if (sp->fts_cwd_fd < 0) goto LAB_0041895f;\u000a    iVar4 = close(sp->fts_cwd_fd);\u000a  }\u000a  if (iVar4 != 0) {\u000a    piVar6 = __errno_location();\u000a    iVar3 = *piVar6;\u000a  }\u000aLAB_0041895f:\u000a  fd_ring_clear(&sp->fts_fd_ring);\u000a  if ((Hash_table *)sp->fts_leaf_optimization_works_ht != (Hash_table *)0x0) {\u000a    hash_free((Hash_table *)sp->fts_leaf_optimization_works_ht);\u000a  }\u000a  free_dir(sp);\u000a  free(sp);\u000a  if (iVar3 == 0) {\u000a    iVar3 = 0;\u000a  }\u000a  else {\u000a    piVar6 = __errno_location();\u000a    *piVar6 = iVar3;\u000a    iVar3 = -1;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p4917
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV RBX,qword ptr [R14]\nTEST RBX,RBX\nJZ 0x004188eb\nCMP qword ptr [RBX + 0x58],0x0\nJS 0x004188e3\nMOV RDI,RBX\nNOP dword ptr [RAX]\nCMP qword ptr [RBX + 0x10],0x0\nLEA RAX,[RBX + 0x10]\nLEA RCX,[RBX + 0x8]\nCMOVZ RAX,RCX\nMOV RBX,qword ptr [RAX]\nCALL 0x00402710\nCMP qword ptr [RBX + 0x58],0x0\nMOV RDI,RBX\nJNS 0x004188c0\nMOV RDI,RBX\nCALL 0x00402710\nMOV RDI,qword ptr [R14 + 0x8]\nTEST RDI,RDI\nJZ 0x004188f9\nCALL 0x00418860\nMOV RDI,qword ptr [R14 + 0x10]\nCALL 0x00402710\nMOV RDI,qword ptr [R14 + 0x20]\nCALL 0x00402710\nMOV EAX,dword ptr [R14 + 0x48]\nTEST AH,0x2\nJNZ 0x00418930\nXOR EBX,EBX\nTEST AL,0x4\nJNZ 0x0041895f\nMOV EDI,dword ptr [R14 + 0x28]\nCALL 0x00402d10\nTEST EAX,EAX\nJZ 0x00418945\nCALL 0x00402770\nMOV EBX,dword ptr [RAX]\nJMP 0x00418947\nMOV EDI,dword ptr [R14 + 0x2c]\nXOR EBX,EBX\nTEST EDI,EDI\nJS 0x0041895f\nCALL 0x00402ac0\nTEST EAX,EAX\nJNZ 0x00418958\nJMP 0x0041895f\nXOR EBX,EBX\nMOV EDI,dword ptr [R14 + 0x28]\nCALL 0x00402ac0\nTEST EBX,EBX\nJNZ 0x0041895f\nTEST EAX,EAX\nJZ 0x0041895f\nCALL 0x00402770\nMOV EBX,dword ptr [RAX]\nLEA RDI,[R14 + 0x60]\nCALL 0x004189b0\nMOV RDI,qword ptr [R14 + 0x50]\nTEST RDI,RDI\nJZ 0x00418976\nCALL 0x00410ac0\nMOV RDI,R14\nCALL 0x004189f0\nMOV RDI,R14\nCALL 0x00402710\nTEST EBX,EBX\nJZ 0x00418998\nCALL 0x00402770\nMOV dword ptr [RAX],EBX\nMOV EAX,0xffffffff\nJMP 0x0041899a\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p4918
S'41 56\n53\n50\n49 89 fe\n49 8b 1e\n48 85 db\n74 3c\n48 83 7b 58 00\n78 2d\n48 89 df\n0f 1f 80 00 00 00 00\n48 83 7b 10 00\n48 8d 43 10\n48 8d 4b 08\n48 0f 44 c1\n48 8b 18\ne8 37 9e fe ff\n48 83 7b 58 00\n48 89 df\n79 dd\n48 89 df\ne8 25 9e fe ff\n49 8b 7e 08\n48 85 ff\n74 05\ne8 67 ff ff ff\n49 8b 7e 10\ne8 0e 9e fe ff\n49 8b 7e 20\ne8 05 9e fe ff\n41 8b 46 48\nf6 c4 02\n75 1c\n31 db\na8 04\n75 45\n41 8b 7e 28\ne8 ed a3 fe ff\n85 c0\n74 1e\ne8 44 9e fe ff\n8b 18\neb 17\n41 8b 7e 2c\n31 db\n85 ff\n78 25\ne8 81 a1 fe ff\n85 c0\n75 15\neb 1a\n31 db\n41 8b 7e 28\ne8 70 a1 fe ff\n85 db\n75 0b\n85 c0\n74 07\ne8 13 9e fe ff\n8b 18\n49 8d 7e 60\ne8 48 00 00 00\n49 8b 7e 50\n48 85 ff\n74 05\ne8 4a 81 ff ff\n4c 89 f7\ne8 72 00 00 00\n4c 89 f7\ne8 8a 9d fe ff\n85 db\n74 0e\ne8 e1 9d fe ff\n89 18\nb8 ff ff ff ff\neb 02\n31 c0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p4919
S'.text:00000000004188a0\n.text:00000000004188a2\n.text:00000000004188a3\n.text:00000000004188a4\n.text:00000000004188a7\n.text:00000000004188aa\n.text:00000000004188ad\n.text:00000000004188af\n.text:00000000004188b4\n.text:00000000004188b6\n.text:00000000004188b9\n.text:00000000004188c0\n.text:00000000004188c5\n.text:00000000004188c9\n.text:00000000004188cd\n.text:00000000004188d1\n.text:00000000004188d4\n.text:00000000004188d9\n.text:00000000004188de\n.text:00000000004188e1\n.text:00000000004188e3\n.text:00000000004188e6\n.text:00000000004188eb\n.text:00000000004188ef\n.text:00000000004188f2\n.text:00000000004188f4\n.text:00000000004188f9\n.text:00000000004188fd\n.text:0000000000418902\n.text:0000000000418906\n.text:000000000041890b\n.text:000000000041890f\n.text:0000000000418912\n.text:0000000000418914\n.text:0000000000418916\n.text:0000000000418918\n.text:000000000041891a\n.text:000000000041891e\n.text:0000000000418923\n.text:0000000000418925\n.text:0000000000418927\n.text:000000000041892c\n.text:000000000041892e\n.text:0000000000418930\n.text:0000000000418934\n.text:0000000000418936\n.text:0000000000418938\n.text:000000000041893a\n.text:000000000041893f\n.text:0000000000418941\n.text:0000000000418943\n.text:0000000000418945\n.text:0000000000418947\n.text:000000000041894b\n.text:0000000000418950\n.text:0000000000418952\n.text:0000000000418954\n.text:0000000000418956\n.text:0000000000418958\n.text:000000000041895d\n.text:000000000041895f\n.text:0000000000418963\n.text:0000000000418968\n.text:000000000041896c\n.text:000000000041896f\n.text:0000000000418971\n.text:0000000000418976\n.text:0000000000418979\n.text:000000000041897e\n.text:0000000000418981\n.text:0000000000418986\n.text:0000000000418988\n.text:000000000041898a\n.text:000000000041898f\n.text:0000000000418991\n.text:0000000000418996\n.text:0000000000418998\n.text:000000000041899a\n.text:000000000041899e\n.text:000000000041899f\n.text:00000000004189a1\n'
p4920
tp4921
sS'fclose'
p4922
(S'\n__stdcall fclose(FILE * __stream)\n'
p4923
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_0062d100)();\u000a  return iVar1;\u000a}\u000a\u000a
p4924
S'JMP qword ptr [0x0062d100]\n'
p4925
S'ff 25 3a a8 22 00\n'
p4926
S'.plt:00000000004028c0\n'
p4927
tp4928
sS'lstat'
p4929
(S'\n__stdcall lstat(char * __file, stat * __buf)\n'
p4930
V\u000aint lstat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___lxstat_0062d140)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p4931
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x00402940\n'
p4932
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 80 64 fe ff\n'
p4933
S'.text:000000000041c4b0\n.text:000000000041c4b3\n.text:000000000041c4b6\n.text:000000000041c4bb\n'
p4934
tp4935
sS'parse_samefile'
p4936
(S'\n__stdcall parse_samefile(parser_table * entry, char * * argv, int * arg_ptr)\n'
p4937
V\u000a_Bool parse_samefile(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  char cVar1;\u000a  char *__s;\u000a  _Bool _Var2;\u000a  uint __fd;\u000a  int iVar3;\u000a  predicate *ppVar4;\u000a  uint *puVar5;\u000a  size_t sVar6;\u000a  undefined8 uVar7;\u000a  int *extraout_RDX;\u000a  undefined uVar8;\u000a  uint uVar9;\u000a  long lVar10;\u000a  float fVar11;\u000a  char cStack398;\u000a  undefined uStack397;\u000a  comparison_type cStack396;\u000a  uintmax_t uStack392;\u000a  parser_table *ppStack384;\u000a  char *pcStack376;\u000a  parser_table *ppStack352;\u000a  stat *psStack344;\u000a  ulong uStack336;\u000a  char *local_148;\u000a  stat local_140;\u000a  stat local_b0;\u000a  \u000a  psStack344 = &local_140;\u000a  uStack336 = 0x40c043;\u000a  set_stat_placeholders(psStack344);\u000a  uStack336 = 0x40c054;\u000a  _Var2 = collect_arg_stat_info(argv,arg_ptr,psStack344,&local_148);\u000a  uVar9 = 0;\u000a  if (_Var2 == false) {\u000a    return false;\u000a  }\u000a  uStack336 = 0x40c06b;\u000a  set_stat_placeholders(&local_b0);\u000a  if ((options.symlink_handling == SYMLINK_NEVER_DEREF) &&\u000a     (uVar9 = 0x20000, options.open_nofollow_available == false)) {\u000a    __fd = 0xfffffffe;\u000a    uVar9 = 0;\u000a    if ((local_140.st_mode & 0xf000) == 0xa000) goto LAB_0040c14e;\u000a  }\u000a  uStack336 = 0x40c0ad;\u000a  __fd = open_cloexec(local_148,(ulong)uVar9);\u000a  if ((int)__fd < 0) {\u000aLAB_0040c14e:\u000a    uStack336 = 0x40c15a;\u000a    ppVar4 = insert_primary(entry,local_148);\u000a    *(__ino_t *)ppVar4->args = local_140.st_ino;\u000a    *(__dev_t *)(ppVar4->args + 8) = local_140.st_dev;\u000a    *(uint *)(ppVar4->args + 0x10) = __fd;\u000a    ppVar4->need_type = false;\u000a    ppVar4->need_stat = true;\u000a    ppVar4->est_success_rate = 0.01000000;\u000a    return true;\u000a  }\u000a  uStack336 = 0x40c0c6;\u000a  iVar3 = fstat(__fd,(stat *)&local_b0);\u000a  pcStack376 = local_148;\u000a  if (iVar3 == 0) {\u000a    uStack336 = 0x40c0e0;\u000a    iVar3 = (*options.xstat)(local_148,&local_140);\u000a    if (iVar3 == 0) {\u000a      if ((options.symlink_handling == SYMLINK_NEVER_DEREF) &&\u000a         (options.open_nofollow_available == false)) {\u000a        if ((((local_140.st_mode & 0xf000) == 0xa000) || (local_140.st_dev != local_b0.st_dev)) ||\u000a           (local_140.st_ino != local_b0.st_ino)) {\u000a          uStack336 = 0x40c130;\u000a          close(__fd);\u000a          __fd = 0xffffffff;\u000a        }\u000a      }\u000a      else {\u000a        uStack336 = 0x40c14e;\u000a        memcpy(&local_140,&local_b0,0x90);\u000a      }\u000a      goto LAB_0040c14e;\u000a    }\u000a  }\u000a  else {\u000a    uStack336 = 0x40c195;\u000a    puVar5 = (uint *)__errno_location();\u000a    uStack336 = 0x40c19f;\u000a    fatal_target_file_error((char *)(ulong)*puVar5);\u000a  }\u000a  uStack336 = 0x40c1a4;\u000a  puVar5 = (uint *)__errno_location();\u000a  ppStack384 = (parser_table *)(ulong)*puVar5;\u000a  uStack336 = 0x40c1af;\u000a  fatal_target_file_error((char *)ppStack384);\u000a  if ((local_148 == (char *)0x0) ||\u000a     (__s = *(char **)(local_148 + (long)*extraout_RDX * 8), __s == (char *)0x0)) {\u000a    uVar8 = 0;\u000a  }\u000a  else {\u000a    ppStack352 = entry;\u000a    uStack336 = (ulong)__fd;\u000a    sVar6 = strlen(__s);\u000a    if ((int)sVar6 == 0) {\u000a      uVar7 = dcgettext(0,"invalid null argument to -size",5);\u000a      error(1,0,uVar7,uVar7);\u000a    }\u000a    lVar10 = (long)((sVar6 << 0x20) + -0x100000000) >> 0x20;\u000a    cVar1 = __s[lVar10];\u000a    uVar9 = 0x200;\u000a    cStack398 = 0;\u000a    switch(cVar1) {\u000a    case '0':\u000a    case '1':\u000a    case '2':\u000a    case '3':\u000a    case '4':\u000a    case '5':\u000a    case '6':\u000a    case '7':\u000a    case '8':\u000a    case '9':\u000a      break;\u000a    default:\u000a      uVar7 = dcgettext(0,"invalid -size type `%c\u005c'",5);\u000a      error(1,0,uVar7,\u000a            (ulong)(uint)(int)*(char *)(*(long *)(local_148 + (long)*extraout_RDX * 8) + lVar10));\u000a      uVar9 = 0x200;\u000a      cStack398 = cVar1;\u000a      break;\u000a    case 'G':\u000a      __s[lVar10] = 0;\u000a      uVar9 = 0x40000000;\u000a      cStack398 = cVar1;\u000a      break;\u000a    case 'M':\u000a      __s[lVar10] = 0;\u000a      uVar9 = 0x100000;\u000a      cStack398 = cVar1;\u000a      break;\u000a    case 'b':\u000a      __s[lVar10] = 0;\u000a      uVar9 = 0x200;\u000a      cStack398 = cVar1;\u000a      break;\u000a    case 'c':\u000a      __s[lVar10] = 0;\u000a      uVar9 = 1;\u000a      cStack398 = cVar1;\u000a      break;\u000a    case 'k':\u000a      __s[lVar10] = 0;\u000a      uVar9 = 0x400;\u000a      cStack398 = cVar1;\u000a      break;\u000a    case 'w':\u000a      __s[lVar10] = 0;\u000a      uVar9 = 2;\u000a      cStack398 = cVar1;\u000a    }\u000a    _Var2 = get_num(__s,&uStack392,&cStack396);\u000a    if (_Var2 == false) {\u000a      uStack397 = 0;\u000a      uVar8 = 0;\u000a      uVar7 = dcgettext(0,"Invalid argument `%s%s\u005c' to -size",5);\u000a      error(1,0,uVar7,__s,&cStack398);\u000a    }\u000a    else {\u000a      ppVar4 = insert_primary(ppStack384,__s);\u000a      *(comparison_type *)ppVar4->args = cStack396;\u000a      *(uint *)(ppVar4->args + 4) = uVar9;\u000a      *(uintmax_t *)(ppVar4->args + 8) = uStack392;\u000a      *(undefined2 *)&ppVar4->need_stat = 1;\u000a      if (cStack396 == COMP_LT) {\u000a        fVar11 = *(float *)(&DAT_0041fbd8 + (ulong)(0x5000 < (ulong)uVar9 * uStack392) * 4);\u000a      }\u000a      else {\u000a        fVar11 = DAT_0041fb78;\u000a        if (cStack396 == COMP_GT) {\u000a          fVar11 = *(float *)(&DAT_0041fbe0 + (ulong)(0x5000 < (ulong)uVar9 * uStack392) * 4);\u000a        }\u000a      }\u000a      ppVar4->est_success_rate = fVar11;\u000a      *extraout_RDX = *extraout_RDX + 1;\u000a      uVar8 = 1;\u000a    }\u000a  }\u000a  return (_Bool)uVar8;\u000a}\u000a\u000a
p4938
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x128\nMOV RBX,RDX\nMOV RBP,RSI\nMOV R14,RDI\nLEA R15,[RSP + 0x8]\nMOV RDI,R15\nCALL 0x004079d0\nMOV RCX,RSP\nMOV RDI,RBP\nMOV RSI,RBX\nMOV RDX,R15\nCALL 0x0040c9b0\nXOR EBX,EBX\nTEST AL,AL\nJZ 0x0040c180\nLEA RDI,[0x98 + RSP]\nCALL 0x004079d0\nCMP dword ptr [0x0062f088],0x0\nJNZ 0x0040c0a0\nMOV EBX,0x20000\nCMP byte ptr [0x0062f098],0x0\nJNZ 0x0040c0a0\nMOV EAX,0xf000\nAND EAX,dword ptr [RSP + 0x20]\nMOV EBP,0xfffffffe\nCMP EAX,0xa000\nMOV EBX,0x0\nJZ 0x0040c14e\nMOV RDI,qword ptr [RSP]\nXOR EAX,EAX\nMOV ESI,EBX\nCALL 0x0040e8e0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0040c14e\nLEA RSI,[0x98 + RSP]\nMOV EDI,EBP\nCALL 0x0041c4a0\nTEST EAX,EAX\nMOV RBX,qword ptr [RSP]\nJNZ 0x0040c190\nLEA RSI,[RSP + 0x8]\nMOV RDI,RBX\nCALL qword ptr [0x0062f090]\nTEST EAX,EAX\nJNZ 0x0040c19f\nCMP dword ptr [0x0062f088],0x0\nJNZ 0x0040c137\nMOV AL,byte ptr [0x0062f098]\nTEST AL,AL\nJNZ 0x0040c137\nMOV EAX,0xf000\nAND EAX,dword ptr [RSP + 0x20]\nCMP EAX,0xa000\nJZ 0x0040c129\nMOV RAX,qword ptr [RSP + 0x8]\nCMP RAX,qword ptr [0x98 + RSP]\nJNZ 0x0040c129\nMOV RAX,qword ptr [RSP + 0x10]\nCMP RAX,qword ptr [0xa0 + RSP]\nJZ 0x0040c14e\nMOV EDI,EBP\nCALL 0x00402ac0\nMOV EBP,0xffffffff\nJMP 0x0040c14e\nLEA RDI,[RSP + 0x8]\nLEA RSI,[0x98 + RSP]\nMOV EDX,0x90\nCALL 0x00402bd0\nMOV RSI,qword ptr [RSP]\nMOV RDI,R14\nCALL 0x00407730\nMOV RCX,qword ptr [RSP + 0x10]\nMOV qword ptr [RAX + 0x38],RCX\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RAX + 0x40],RCX\nMOV dword ptr [RAX + 0x48],EBP\nMOV byte ptr [RAX + 0x1b],0x0\nMOV byte ptr [RAX + 0x1a],0x1\nMOV dword ptr [RAX + 0x24],0x3c23d70a\nMOV BL,0x1\nMOV EAX,EBX\nADD RSP,0x128\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00402770\nMOV EDI,dword ptr [RAX]\nMOV RSI,RBX\nCALL 0x004089a0\nCALL 0x00402770\nMOV EDI,dword ptr [RAX]\nMOV RSI,qword ptr [RSP]\nCALL 0x004089a0\nNOP\n'
p4939
S'55\n41 57\n41 56\n53\n48 81 ec 28 01 00 00\n48 89 d3\n48 89 f5\n49 89 fe\n4c 8d 7c 24 08\n4c 89 ff\ne8 8d b9 ff ff\n48 89 e1\n48 89 ef\n48 89 de\n4c 89 fa\ne8 5c 09 00 00\n31 db\n84 c0\n0f 84 22 01 00 00\n48 8d bc 24 98 00 00 00\ne8 65 b9 ff ff\n83 3d 16 30 22 00 00\n75 2c\nbb 00 00 02 00\n80 3d 18 30 22 00 00\n75 1e\nb8 00 f0 00 00\n23 44 24 20\nbd fe ff ff ff\n3d 00 a0 00 00\nbb 00 00 00 00\n0f 84 ae 00 00 00\n48 8b 3c 24\n31 c0\n89 de\ne8 33 28 00 00\n89 c5\n85 ed\n0f 88 97 00 00 00\n48 8d b4 24 98 00 00 00\n89 ef\ne8 da 03 01 00\n85 c0\n48 8b 1c 24\n0f 85 be 00 00 00\n48 8d 74 24 08\n48 89 df\nff 15 b0 2f 22 00\n85 c0\n0f 85 b7 00 00 00\n83 3d 99 2f 22 00 00\n75 46\n8a 05 a1 2f 22 00\n84 c0\n75 3c\nb8 00 f0 00 00\n23 44 24 20\n3d 00 a0 00 00\n74 1e\n48 8b 44 24 08\n48 3b 84 24 98 00 00 00\n75 0f\n48 8b 44 24 10\n48 3b 84 24 a0 00 00 00\n74 25\n89 ef\ne8 90 69 ff ff\nbd ff ff ff ff\neb 17\n48 8d 7c 24 08\n48 8d b4 24 98 00 00 00\nba 90 00 00 00\ne8 82 6a ff ff\n48 8b 34 24\n4c 89 f7\ne8 d6 b5 ff ff\n48 8b 4c 24 10\n48 89 48 38\n48 8b 4c 24 08\n48 89 48 40\n89 68 48\nc6 40 1b 00\nc6 40 1a 01\nc7 40 24 0a d7 23 3c\nb3 01\n89 d8\n48 81 c4 28 01 00 00\n5b\n41 5e\n41 5f\n5d\nc3\ne8 db 65 ff ff\n8b 38\n48 89 de\ne8 01 c8 ff ff\ne8 cc 65 ff ff\n8b 38\n48 8b 34 24\ne8 f1 c7 ff ff\n90\n'
p4940
S'.text:000000000040c020\n.text:000000000040c021\n.text:000000000040c023\n.text:000000000040c025\n.text:000000000040c026\n.text:000000000040c02d\n.text:000000000040c030\n.text:000000000040c033\n.text:000000000040c036\n.text:000000000040c03b\n.text:000000000040c03e\n.text:000000000040c043\n.text:000000000040c046\n.text:000000000040c049\n.text:000000000040c04c\n.text:000000000040c04f\n.text:000000000040c054\n.text:000000000040c056\n.text:000000000040c058\n.text:000000000040c05e\n.text:000000000040c066\n.text:000000000040c06b\n.text:000000000040c072\n.text:000000000040c074\n.text:000000000040c079\n.text:000000000040c080\n.text:000000000040c082\n.text:000000000040c087\n.text:000000000040c08b\n.text:000000000040c090\n.text:000000000040c095\n.text:000000000040c09a\n.text:000000000040c0a0\n.text:000000000040c0a4\n.text:000000000040c0a6\n.text:000000000040c0a8\n.text:000000000040c0ad\n.text:000000000040c0af\n.text:000000000040c0b1\n.text:000000000040c0b7\n.text:000000000040c0bf\n.text:000000000040c0c1\n.text:000000000040c0c6\n.text:000000000040c0c8\n.text:000000000040c0cc\n.text:000000000040c0d2\n.text:000000000040c0d7\n.text:000000000040c0da\n.text:000000000040c0e0\n.text:000000000040c0e2\n.text:000000000040c0e8\n.text:000000000040c0ef\n.text:000000000040c0f1\n.text:000000000040c0f7\n.text:000000000040c0f9\n.text:000000000040c0fb\n.text:000000000040c100\n.text:000000000040c104\n.text:000000000040c109\n.text:000000000040c10b\n.text:000000000040c110\n.text:000000000040c118\n.text:000000000040c11a\n.text:000000000040c11f\n.text:000000000040c127\n.text:000000000040c129\n.text:000000000040c12b\n.text:000000000040c130\n.text:000000000040c135\n.text:000000000040c137\n.text:000000000040c13c\n.text:000000000040c144\n.text:000000000040c149\n.text:000000000040c14e\n.text:000000000040c152\n.text:000000000040c155\n.text:000000000040c15a\n.text:000000000040c15f\n.text:000000000040c163\n.text:000000000040c168\n.text:000000000040c16c\n.text:000000000040c16f\n.text:000000000040c173\n.text:000000000040c177\n.text:000000000040c17e\n.text:000000000040c180\n.text:000000000040c182\n.text:000000000040c189\n.text:000000000040c18a\n.text:000000000040c18c\n.text:000000000040c18e\n.text:000000000040c18f\n.text:000000000040c190\n.text:000000000040c195\n.text:000000000040c197\n.text:000000000040c19a\n.text:000000000040c19f\n.text:000000000040c1a4\n.text:000000000040c1a6\n.text:000000000040c1aa\n.text:000000000040c1af\n'
p4941
tp4942
sS'parse_fprintf'
p4943
(S'\n__stdcall parse_fprintf(parser_table * entry, char * * argv, int * arg_ptr)\n'
p4944
V\u000a_Bool parse_fprintf(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  format_val fmt;\u000a  char *local_58;\u000a  char *local_50;\u000a  format_val local_48;\u000a  \u000a  iVar2 = *arg_ptr;\u000a  _Var1 = collect_arg(argv,arg_ptr,&local_50);\u000a  if ((_Var1 != false) && (_Var1 = collect_arg_nonconst(argv,arg_ptr,&local_58), _Var1 != false)) {\u000a    open_output_file(local_50,&local_48);\u000a    iVar2 = *arg_ptr;\u000a    _Var1 = insert_fprintf(&local_48,entry,local_58);\u000a    if (_Var1 != false) {\u000a      return true;\u000a    }\u000a  }\u000a  *arg_ptr = iVar2;\u000a  return false;\u000a}\u000a\u000a
p4945
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R15,RDX\nMOV RBX,RSI\nMOV R14,RDI\nMOV EBP,dword ptr [R15]\nLEA RDX,[RSP + 0x8]\nMOV RDI,RBX\nMOV RSI,R15\nCALL 0x0040c7f0\nTEST AL,AL\nJZ 0x0040b5d8\nMOV RDX,RSP\nMOV RDI,RBX\nMOV RSI,R15\nCALL 0x0040c950\nTEST AL,AL\nJZ 0x0040b5d8\nMOV RDI,qword ptr [RSP + 0x8]\nLEA RBX,[RSP + 0x10]\nMOV RSI,RBX\nCALL 0x0040d0e0\nMOV EBP,dword ptr [R15]\nMOV RDX,qword ptr [RSP]\nMOV RDI,RBX\nMOV RSI,R14\nCALL 0x00408e80\nMOV ECX,EAX\nMOV AL,0x1\nTEST CL,CL\nJNZ 0x0040b5dd\nMOV dword ptr [R15],EBP\nXOR EAX,EAX\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p4946
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 d7\n48 89 f3\n49 89 fe\n41 8b 2f\n48 8d 54 24 08\n48 89 df\n4c 89 fe\ne8 5a 12 00 00\n84 c0\n74 3e\n48 89 e2\n48 89 df\n4c 89 fe\ne8 a8 13 00 00\n84 c0\n74 2c\n48 8b 7c 24 08\n48 8d 5c 24 10\n48 89 de\ne8 22 1b 00 00\n41 8b 2f\n48 8b 14 24\n48 89 df\n4c 89 f6\ne8 b0 d8 ff ff\n89 c1\nb0 01\n84 c9\n75 05\n41 89 2f\n31 c0\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p4947
S'.text:000000000040b570\n.text:000000000040b571\n.text:000000000040b573\n.text:000000000040b575\n.text:000000000040b576\n.text:000000000040b57a\n.text:000000000040b57d\n.text:000000000040b580\n.text:000000000040b583\n.text:000000000040b586\n.text:000000000040b58b\n.text:000000000040b58e\n.text:000000000040b591\n.text:000000000040b596\n.text:000000000040b598\n.text:000000000040b59a\n.text:000000000040b59d\n.text:000000000040b5a0\n.text:000000000040b5a3\n.text:000000000040b5a8\n.text:000000000040b5aa\n.text:000000000040b5ac\n.text:000000000040b5b1\n.text:000000000040b5b6\n.text:000000000040b5b9\n.text:000000000040b5be\n.text:000000000040b5c1\n.text:000000000040b5c5\n.text:000000000040b5c8\n.text:000000000040b5cb\n.text:000000000040b5d0\n.text:000000000040b5d2\n.text:000000000040b5d4\n.text:000000000040b5d6\n.text:000000000040b5d8\n.text:000000000040b5db\n.text:000000000040b5dd\n.text:000000000040b5e1\n.text:000000000040b5e2\n.text:000000000040b5e4\n.text:000000000040b5e6\n.text:000000000040b5e7\n'
p4948
tp4949
sS'ts_difference'
p4950
(S'\n__stdcall ts_difference()\n'
p4951
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000adouble ts_difference(void)\u000a\u000a{\u000a  long in_RCX;\u000a  time_t __time0;\u000a  long in_RSI;\u000a  time_t __time1;\u000a  double dVar1;\u000a  \u000a  dVar1 = difftime(__time1,__time0);\u000a  return dVar1 + (double)(in_RSI - in_RCX) * _DAT_0041cac0;\u000a}\u000a\u000a
p4952
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV RBX,RSI\nMOV RSI,RDX\nCALL 0x004029a0\nSUB RBX,R14\nCVTSI2SD XMM1,RBX\nMULSD XMM1,qword ptr [0x0041cac0]\nADDSD XMM0,XMM1\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p4953
S'41 56\n53\n50\n49 89 ce\n48 89 f3\n48 89 d6\ne8 3e d8 ff ff\n4c 29 f3\nf2 48 0f 2a cb\nf2 0f 59 0d 4e 79 01 00\nf2 0f 58 c1\n48 83 c4 08\n5b\n41 5e\nc3\n'
p4954
S'.text:0000000000405150\n.text:0000000000405152\n.text:0000000000405153\n.text:0000000000405154\n.text:0000000000405157\n.text:000000000040515a\n.text:000000000040515d\n.text:0000000000405162\n.text:0000000000405165\n.text:000000000040516a\n.text:0000000000405172\n.text:0000000000405176\n.text:000000000040517a\n.text:000000000040517b\n.text:000000000040517d\n'
p4955
tp4956
sS'quotearg_alloc'
p4957
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p4958
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p4959
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00415f10\n'
p4960
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p4961
S'.text:0000000000415f00\n.text:0000000000415f03\n.text:0000000000415f05\n.text:0000000000415f08\n'
p4962
tp4963
sS'do_exec'
p4964
(S'\n__stdcall do_exec(exec_val * execp)\n'
p4965
V\u000avoid do_exec(exec_val *execp)\u000a\u000a{\u000a  run_in_dir(execp->wd_for_exec,exec_cb,execp);\u000a  if (execp->wd_for_exec != initial_wd) {\u000a    free_cwd(execp->wd_for_exec);\u000a    free(execp->wd_for_exec);\u000a    execp->wd_for_exec = (saved_cwd *)0x0;\u000a  }\u000a  return;\u000a}\u000a\u000a
p4966
S'PUSH RBX\nMOV RBX,RDI\nMOV RDI,qword ptr [0xc0 + RBX]\nMOV ESI,0x408a40\nMOV RDX,RBX\nCALL 0x0040e4b0\nMOV RDI,qword ptr [0xc0 + RBX]\nCMP RDI,qword ptr [0x0062de78]\nJZ 0x00408a34\nCALL 0x00416a10\nMOV RDI,qword ptr [0xc0 + RBX]\nCALL 0x00402710\nMOV qword ptr [0xc0 + RBX],0x0\nPOP RBX\nRET\n'
p4967
S'53\n48 89 fb\n48 8b bb c0 00 00 00\nbe 40 8a 40 00\n48 89 da\ne8 a8 5a 00 00\n48 8b bb c0 00 00 00\n48 3b 3d 62 54 22 00\n74 1c\ne8 f3 df 00 00\n48 8b bb c0 00 00 00\ne8 e7 9c ff ff\n48 c7 83 c0 00 00 00 00 00 00 00\n5b\nc3\n'
p4968
S'.text:00000000004089f0\n.text:00000000004089f1\n.text:00000000004089f4\n.text:00000000004089fb\n.text:0000000000408a00\n.text:0000000000408a03\n.text:0000000000408a08\n.text:0000000000408a0f\n.text:0000000000408a16\n.text:0000000000408a18\n.text:0000000000408a1d\n.text:0000000000408a24\n.text:0000000000408a29\n.text:0000000000408a34\n.text:0000000000408a35\n'
p4969
tp4970
sS'areadlinkat'
p4971
(S'\n__stdcall areadlinkat(char * filename)\n'
p4972
V\u000achar * areadlinkat(char *filename)\u000a\u000a{\u000a  char *pcVar1;\u000a  char *buffer;\u000a  \u000a  pcVar1 = careadlinkat(filename,buffer,0,(allocator *)0x0,\u000a                        (ssize_t (*)(int,char *,char *,size_t))0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p4973
S'XOR EDX,EDX\nXOR ECX,ECX\nXOR R8D,R8D\nMOV R9D,0x402b60\nJMP 0x0040fc50\n'
p4974
S'31 d2\n31 c9\n45 31 c0\n41 b9 60 2b 40 00\ne9 0e 00 00 00\n'
p4975
S'.text:000000000040fc30\n.text:000000000040fc32\n.text:000000000040fc34\n.text:000000000040fc37\n.text:000000000040fc3d\n'
p4976
tp4977
sS'pred_comma'
p4978
(S'\n__stdcall pred_comma(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p4979
V\u000a_Bool pred_comma(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  if (pred_ptr->pred_left != (predicate *)0x0) {\u000a    apply_predicate(pathname,stat_buf,pred_ptr->pred_left);\u000a  }\u000a  _Var1 = apply_predicate(pathname,stat_buf,pred_ptr->pred_right);\u000a  return _Var1;\u000a}\u000a\u000a
p4980
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV RBX,RDX\nMOV R14,RSI\nMOV R15,RDI\nMOV RDX,qword ptr [0x110 + RBX]\nTEST RDX,RDX\nJZ 0x00403df5\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x004088a0\nMOV RDX,qword ptr [0x118 + RBX]\nMOV RDI,R15\nMOV RSI,R14\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x004088a0\n'
p4981
S'41 57\n41 56\n53\n48 89 d3\n49 89 f6\n49 89 ff\n48 8b 93 10 01 00 00\n48 85 d2\n74 0b\n4c 89 ff\n4c 89 f6\ne8 ab 4a 00 00\n48 8b 93 18 01 00 00\n4c 89 ff\n4c 89 f6\n5b\n41 5e\n41 5f\ne9 94 4a 00 00\n'
p4982
S'.text:0000000000403dd0\n.text:0000000000403dd2\n.text:0000000000403dd4\n.text:0000000000403dd5\n.text:0000000000403dd8\n.text:0000000000403ddb\n.text:0000000000403dde\n.text:0000000000403de5\n.text:0000000000403de8\n.text:0000000000403dea\n.text:0000000000403ded\n.text:0000000000403df0\n.text:0000000000403df5\n.text:0000000000403dfc\n.text:0000000000403dff\n.text:0000000000403e02\n.text:0000000000403e03\n.text:0000000000403e05\n.text:0000000000403e07\n'
p4983
tp4984
sS'rpl_mbrtowc'
p4985
(S'\n__stdcall rpl_mbrtowc(wchar_t * pwc, char * s, size_t n, mbstate_t * ps)\n'
p4986
V\u000asize_t rpl_mbrtowc(wchar_t *pwc,char *s,size_t n,mbstate_t *ps)\u000a\u000a{\u000a  _Bool _Var1;\u000a  size_t sVar2;\u000a  uint *__pwc;\u000a  uint local_24;\u000a  \u000a  __pwc = &local_24;\u000a  if (pwc != (wchar_t *)0x0) {\u000a    __pwc = (uint *)pwc;\u000a  }\u000a  sVar2 = mbrtowc((wchar_t *)__pwc,s,n,(mbstate_t *)ps);\u000a  if ((n != 0) && (0xfffffffffffffffd < sVar2)) {\u000a    _Var1 = hard_locale();\u000a    if (_Var1 == false) {\u000a      *__pwc = (uint)(byte)*s;\u000a      sVar2 = 1;\u000a    }\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p4987
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,RDX\nMOV R14,RSI\nTEST RDI,RDI\nLEA RBX,[RSP + 0x4]\nCMOVNZ RBX,RDI\nMOV RDI,RBX\nCALL 0x00402970\nMOV R15,RAX\nTEST R12,R12\nJZ 0x00419f97\nCMP R15,-0x2\nJC 0x00419f97\nXOR EDI,EDI\nCALL 0x0041bbe0\nTEST AL,AL\nJNZ 0x00419f97\nMOVZX EAX,byte ptr [R14]\nMOV dword ptr [RBX],EAX\nMOV R15D,0x1\nMOV RAX,R15\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p4988
S'41 57\n41 56\n41 54\n53\n50\n49 89 d4\n49 89 f6\n48 85 ff\n48 8d 5c 24 04\n48 0f 45 df\n48 89 df\ne8 fe 89 fe ff\n49 89 c7\n4d 85 e4\n74 1d\n49 83 ff fe\n72 17\n31 ff\ne8 59 1c 00 00\n84 c0\n75 0c\n41 0f b6 06\n89 03\n41 bf 01 00 00 00\n4c 89 f8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p4989
S'.text:0000000000419f50\n.text:0000000000419f52\n.text:0000000000419f54\n.text:0000000000419f56\n.text:0000000000419f57\n.text:0000000000419f58\n.text:0000000000419f5b\n.text:0000000000419f5e\n.text:0000000000419f61\n.text:0000000000419f66\n.text:0000000000419f6a\n.text:0000000000419f6d\n.text:0000000000419f72\n.text:0000000000419f75\n.text:0000000000419f78\n.text:0000000000419f7a\n.text:0000000000419f7e\n.text:0000000000419f80\n.text:0000000000419f82\n.text:0000000000419f87\n.text:0000000000419f89\n.text:0000000000419f8b\n.text:0000000000419f8f\n.text:0000000000419f91\n.text:0000000000419f97\n.text:0000000000419f9a\n.text:0000000000419f9e\n.text:0000000000419f9f\n.text:0000000000419fa1\n.text:0000000000419fa3\n.text:0000000000419fa5\n'
p4990
tp4991
sS'pred_atime'
p4992
(S'\n__stdcall pred_atime(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p4993
V\u000a_Bool pred_atime(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  timespec tVar2;\u000a  \u000a  tVar2 = get_stat_atime(stat_buf);\u000a  _Var1 = pred_timewindow(SUB168((undefined  [16])tVar2,0));\u000a  return _Var1;\u000a}\u000a\u000a
p4994
S'PUSH RBX\nMOV RBX,RDX\nMOV RDI,RSI\nCALL 0x00416c70\nMOV ECX,0x15180\nMOV RDI,RAX\nMOV RSI,RDX\nMOV RDX,RBX\nPOP RBX\nJMP 0x00404a30\n'
p4995
S'53\n48 89 d3\n48 89 f7\ne8 34 2f 01 00\nb9 80 51 01 00\n48 89 c7\n48 89 d6\n48 89 da\n5b\ne9 e0 0c 00 00\n'
p4996
S'.text:0000000000403d30\n.text:0000000000403d31\n.text:0000000000403d34\n.text:0000000000403d37\n.text:0000000000403d3c\n.text:0000000000403d41\n.text:0000000000403d44\n.text:0000000000403d47\n.text:0000000000403d4a\n.text:0000000000403d4b\n'
p4997
tp4998
sS'sysconf'
p4999
(S'\n__stdcall sysconf(int __name)\n'
p5000
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000along sysconf(int __name)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  lVar1 = (*(code *)PTR_sysconf_0062d3a0)();\u000a  return lVar1;\u000a}\u000a\u000a
p5001
S'JMP qword ptr [0x0062d3a0]\n'
p5002
S'ff 25 9a a5 22 00\n'
p5003
S'.plt:0000000000402e00\n'
p5004
tp5005
sS'do_time_format'
p5006
(S'\n__stdcall do_time_format(char * fmt, tm * p, char * ns, size_t ns_size)\n'
p5007
V\u000achar * do_time_format(char *fmt,tm *p,char *ns,size_t ns_size)\u000a\u000a{\u000a  size_t n;\u000a  char *buf;\u000a  size_t buf_size;\u000a  _Bool _Var1;\u000a  size_t sVar2;\u000a  char *__format;\u000a  char *__s;\u000a  ushort **ppuVar3;\u000a  long lVar4;\u000a  tm altered_time;\u000a  size_t local_80;\u000a  size_t local_78;\u000a  char *local_70;\u000a  int local_68;\u000a  int iStack100;\u000a  int iStack96;\u000a  int iStack92;\u000a  int local_58;\u000a  int iStack84;\u000a  int iStack80;\u000a  int iStack76;\u000a  int local_48;\u000a  undefined4 uStack68;\u000a  undefined4 uStack64;\u000a  undefined4 uStack60;\u000a  char *local_38;\u000a  \u000a  local_70 = ns;\u000a  sVar2 = strlen(fmt);\u000a  __format = (char *)xmalloc(sVar2 + 2);\u000a  *__format = '_';\u000a  sVar2 = strlen(fmt);\u000a  memcpy(__format + 1,fmt,sVar2 + 1);\u000a  local_38 = p->tm_zone;\u000a  iStack100 = p->tm_min;\u000a  iStack96 = p->tm_hour;\u000a  iStack92 = p->tm_mday;\u000a  local_58 = p->tm_mon;\u000a  iStack84 = p->tm_year;\u000a  iStack80 = p->tm_wday;\u000a  iStack76 = p->tm_yday;\u000a  local_48 = p->tm_isdst;\u000a  uStack68 = *(undefined4 *)&p->field_0x24;\u000a  uStack64 = *(undefined4 *)&p->tm_gmtoff;\u000a  uStack60 = *(undefined4 *)((long)&p->tm_gmtoff + 4);\u000a  local_68 = 0xb;\u000a  if (10 < p->tm_sec) {\u000a    local_68 = -0xb;\u000a  }\u000a  local_68 = local_68 + p->tm_sec;\u000a  if (buf == (char *)0x0) {\u000a    buf_size = 1;\u000a    buf = (char *)xmalloc(1);\u000a  }\u000a  while ((sVar2 = strftime(buf,buf_size,__format,(tm *)p), sVar2 == 0 || (buf_size <= sVar2))) {\u000a    buf = (char *)x2nrealloc(buf,(size_t *)0x62e1f0,1);\u000a  }\u000a  local_78 = 0;\u000a  local_80 = 0;\u000a  n = ns_size + 1 + sVar2;\u000a  buf = (char *)xrealloc(buf,n);\u000a  buf_size = n;\u000a  __s = (char *)xmalloc(n);\u000a  strftime(__s,buf_size,__format,(tm *)&local_68);\u000a  _Var1 = scan_for_digit_differences(buf,__s,&local_78,&local_80);\u000a  if ((_Var1 != false) && (local_80 == 2)) {\u000a    ppuVar3 = __ctype_b_loc();\u000a    lVar4 = local_78 + 2;\u000a    if ((*(byte *)((long)*ppuVar3 + (ulong)(byte)buf[lVar4] * 2 + 1) & 8) == 0) {\u000a      if ((sVar2 - lVar4) + 1 + lVar4 + ns_size != n) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("end_of_seconds + ns_size + suffix_len == final_len","print.c",0x22b,\u000a                      "char *do_time_format(const char *, const struct tm *, const char *, size_t)")\u000a        ;\u000a      }\u000a      memmove(buf + lVar4 + ns_size,buf + lVar4,(sVar2 - lVar4) + 1);\u000a      memcpy(buf + local_80 + local_78,local_70,ns_size);\u000a    }\u000a  }\u000a  free(__format);\u000a  free(__s);\u000a  return buf + 1;\u000a}\u000a\u000a
p5008
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x58\nMOV R15,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV R13,RSI\nMOV RBX,RDI\nCALL 0x00402930\nLEA RDI,[RAX + 0x2]\nCALL 0x00417220\nMOV R12,RAX\nMOV byte ptr [R12],0x5f\nLEA RBP,[R12 + 0x1]\nMOV RDI,RBX\nCALL 0x00402930\nLEA RDX,[RAX + 0x1]\nMOV RDI,RBP\nMOV RSI,RBX\nCALL 0x00402bd0\nMOV RAX,qword ptr [R13 + 0x30]\nMOV qword ptr [RSP + 0x50],RAX\nMOVUPS XMM0,xmmword ptr [R13]\nMOVUPS XMM1,xmmword ptr [R13 + 0x10]\nMOVUPS XMM2,xmmword ptr [R13 + 0x20]\nMOVAPS xmmword ptr [RSP + 0x40],XMM2\nMOVAPS xmmword ptr [RSP + 0x30],XMM1\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOV EAX,dword ptr [RSP + 0x20]\nCMP EAX,0xa\nMOV ECX,0xfffffff5\nMOV EDX,0xb\nCMOVG EDX,ECX\nADD EDX,EAX\nMOV dword ptr [RSP + 0x20],EDX\nCMP qword ptr [0x0062e1e8],0x0\nJNZ 0x00409d65\nMOV qword ptr [0x0062e1f0],0x1\nMOV EDI,0x1\nCALL 0x00417220\nMOV qword ptr [0x0062e1e8],RAX\nMOV RDI,qword ptr [0x0062e1e8]\nMOV RSI,qword ptr [0x0062e1f0]\nMOV RDX,R12\nMOV RCX,R13\nCALL 0x00402d70\nMOV RBX,RAX\nMOV RAX,qword ptr [0x0062e1f0]\nTEST RBX,RBX\nJZ 0x00409ea2\nCMP RBX,RAX\nJNC 0x00409ea2\nMOV qword ptr [RSP + 0x10],0x0\nMOV qword ptr [RSP + 0x8],0x0\nLEA RBP,[R15 + RBX*0x1 + 0x1]\nMOV RDI,qword ptr [0x0062e1e8]\nMOV RSI,RBP\nCALL 0x00417260\nMOV qword ptr [0x0062e1e8],RAX\nMOV qword ptr [0x0062e1f0],RBP\nMOV RDI,RBP\nCALL 0x00417220\nMOV R13,RAX\nMOV RSI,qword ptr [0x0062e1f0]\nLEA RCX,[RSP + 0x20]\nMOV RDI,R13\nMOV RDX,R12\nCALL 0x00402d70\nMOV RDI,qword ptr [0x0062e1e8]\nLEA RDX,[RSP + 0x10]\nLEA RCX,[RSP + 0x8]\nMOV RSI,R13\nCALL 0x00409ee0\nTEST AL,AL\nJZ 0x00409e79\nMOV R14,qword ptr [RSP + 0x8]\nCMP R14,0x2\nJNZ 0x00409e79\nCALL 0x00402f80\nMOV RAX,qword ptr [RAX]\nMOV RSI,qword ptr [0x0062e1e8]\nADD R14,qword ptr [RSP + 0x10]\nMOVZX ECX,byte ptr [RSI + R14*0x1]\nTEST byte ptr [RAX + RCX*0x2 + 0x1],0x8\nJNZ 0x00409e79\nSUB RBX,R14\nLEA RAX,[R14 + R15*0x1]\nLEA RAX,[RBX + RAX*0x1 + 0x1]\nCMP RAX,RBP\nJNZ 0x00409ebd\nADD RSI,R14\nINC RBX\nLEA RDI,[RSI + R15*0x1]\nMOV RDX,RBX\nCALL 0x00402d80\nMOV RDI,qword ptr [0x0062e1e8]\nADD RDI,qword ptr [RSP + 0x10]\nADD RDI,qword ptr [RSP + 0x8]\nMOV RSI,qword ptr [RSP + 0x18]\nMOV RDX,R15\nCALL 0x00402bd0\nMOV RDI,R12\nCALL 0x00402710\nMOV RDI,R13\nCALL 0x00402710\nMOV RAX,qword ptr [0x0062e1e8]\nINC RAX\nADD RSP,0x58\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RDI,qword ptr [0x0062e1e8]\nMOV ESI,0x62e1f0\nMOV EDX,0x1\nCALL 0x00417290\nJMP 0x00409d5e\nMOV EDI,0x41f993\nMOV ESI,0x41f663\nMOV EDX,0x22b\nMOV ECX,0x41f9c6\nCALL 0x00402a40\n'
p5009
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 58\n49 89 cf\n48 89 54 24 18\n49 89 f5\n48 89 fb\ne8 5f 8c ff ff\n48 8d 78 02\ne8 46 d5 00 00\n49 89 c4\n41 c6 04 24 5f\n49 8d 6c 24 01\n48 89 df\ne8 41 8c ff ff\n48 8d 50 01\n48 89 ef\n48 89 de\ne8 d2 8e ff ff\n49 8b 45 30\n48 89 44 24 50\n41 0f 10 45 00\n41 0f 10 4d 10\n41 0f 10 55 20\n0f 29 54 24 40\n0f 29 4c 24 30\n0f 29 44 24 20\n8b 44 24 20\n83 f8 0a\nb9 f5 ff ff ff\nba 0b 00 00 00\n0f 4f d1\n01 c2\n89 54 24 20\n48 83 3d a1 44 22 00 00\n75 1c\n48 c7 05 9c 44 22 00 01 00 00 00\nbf 01 00 00 00\ne8 c2 d4 00 00\n48 89 05 83 44 22 00\n48 8b 3d 7c 44 22 00\n48 8b 35 7d 44 22 00\n4c 89 e2\n4c 89 e9\ne8 f2 8f ff ff\n48 89 c3\n48 8b 05 68 44 22 00\n48 85 db\n0f 84 11 01 00 00\n48 39 c3\n0f 83 08 01 00 00\n48 c7 44 24 10 00 00 00 00\n48 c7 44 24 08 00 00 00 00\n49 8d 6c 1f 01\n48 8b 3d 30 44 22 00\n48 89 ee\ne8 a0 d4 00 00\n48 89 05 21 44 22 00\n48 89 2d 22 44 22 00\n48 89 ef\ne8 4a d4 00 00\n49 89 c5\n48 8b 35 10 44 22 00\n48 8d 4c 24 20\n4c 89 ef\n4c 89 e2\ne8 80 8f ff ff\n48 8b 3d f1 43 22 00\n48 8d 54 24 10\n48 8d 4c 24 08\n4c 89 ee\ne8 d7 00 00 00\n84 c0\n74 6c\n4c 8b 74 24 08\n49 83 fe 02\n75 61\ne8 63 91 ff ff\n48 8b 00\n48 8b 35 c1 43 22 00\n4c 03 74 24 10\n42 0f b6 0c 36\nf6 44 48 01 08\n75 41\n4c 29 f3\n4b 8d 04 3e\n48 8d 44 03 01\n48 39 e8\n75 74\n4c 01 f6\n48 ff c3\n4a 8d 3c 3e\n48 89 da\ne8 25 8f ff ff\n48 8b 3d 86 43 22 00\n48 03 7c 24 10\n48 03 7c 24 08\n48 8b 74 24 18\n4c 89 fa\ne8 57 8d ff ff\n4c 89 e7\ne8 8f 88 ff ff\n4c 89 ef\ne8 87 88 ff ff\n48 8b 05 58 43 22 00\n48 ff c0\n48 83 c4 58\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 3d 3f 43 22 00\nbe f0 e1 62 00\nba 01 00 00 00\ne8 d8 d3 00 00\ne9 a1 fe ff ff\nbf 93 f9 41 00\nbe 63 f6 41 00\nba 2b 02 00 00\nb9 c6 f9 41 00\ne8 6a 8b ff ff\n'
p5010
S'.text:0000000000409cb0\n.text:0000000000409cb1\n.text:0000000000409cb3\n.text:0000000000409cb5\n.text:0000000000409cb7\n.text:0000000000409cb9\n.text:0000000000409cba\n.text:0000000000409cbe\n.text:0000000000409cc1\n.text:0000000000409cc6\n.text:0000000000409cc9\n.text:0000000000409ccc\n.text:0000000000409cd1\n.text:0000000000409cd5\n.text:0000000000409cda\n.text:0000000000409cdd\n.text:0000000000409ce2\n.text:0000000000409ce7\n.text:0000000000409cea\n.text:0000000000409cef\n.text:0000000000409cf3\n.text:0000000000409cf6\n.text:0000000000409cf9\n.text:0000000000409cfe\n.text:0000000000409d02\n.text:0000000000409d07\n.text:0000000000409d0c\n.text:0000000000409d11\n.text:0000000000409d16\n.text:0000000000409d1b\n.text:0000000000409d20\n.text:0000000000409d25\n.text:0000000000409d29\n.text:0000000000409d2c\n.text:0000000000409d31\n.text:0000000000409d36\n.text:0000000000409d39\n.text:0000000000409d3b\n.text:0000000000409d3f\n.text:0000000000409d47\n.text:0000000000409d49\n.text:0000000000409d54\n.text:0000000000409d59\n.text:0000000000409d5e\n.text:0000000000409d65\n.text:0000000000409d6c\n.text:0000000000409d73\n.text:0000000000409d76\n.text:0000000000409d79\n.text:0000000000409d7e\n.text:0000000000409d81\n.text:0000000000409d88\n.text:0000000000409d8b\n.text:0000000000409d91\n.text:0000000000409d94\n.text:0000000000409d9a\n.text:0000000000409da3\n.text:0000000000409dac\n.text:0000000000409db1\n.text:0000000000409db8\n.text:0000000000409dbb\n.text:0000000000409dc0\n.text:0000000000409dc7\n.text:0000000000409dce\n.text:0000000000409dd1\n.text:0000000000409dd6\n.text:0000000000409dd9\n.text:0000000000409de0\n.text:0000000000409de5\n.text:0000000000409de8\n.text:0000000000409deb\n.text:0000000000409df0\n.text:0000000000409df7\n.text:0000000000409dfc\n.text:0000000000409e01\n.text:0000000000409e04\n.text:0000000000409e09\n.text:0000000000409e0b\n.text:0000000000409e0d\n.text:0000000000409e12\n.text:0000000000409e16\n.text:0000000000409e18\n.text:0000000000409e1d\n.text:0000000000409e20\n.text:0000000000409e27\n.text:0000000000409e2c\n.text:0000000000409e31\n.text:0000000000409e36\n.text:0000000000409e38\n.text:0000000000409e3b\n.text:0000000000409e3f\n.text:0000000000409e44\n.text:0000000000409e47\n.text:0000000000409e49\n.text:0000000000409e4c\n.text:0000000000409e4f\n.text:0000000000409e53\n.text:0000000000409e56\n.text:0000000000409e5b\n.text:0000000000409e62\n.text:0000000000409e67\n.text:0000000000409e6c\n.text:0000000000409e71\n.text:0000000000409e74\n.text:0000000000409e79\n.text:0000000000409e7c\n.text:0000000000409e81\n.text:0000000000409e84\n.text:0000000000409e89\n.text:0000000000409e90\n.text:0000000000409e93\n.text:0000000000409e97\n.text:0000000000409e98\n.text:0000000000409e9a\n.text:0000000000409e9c\n.text:0000000000409e9e\n.text:0000000000409ea0\n.text:0000000000409ea1\n.text:0000000000409ea2\n.text:0000000000409ea9\n.text:0000000000409eae\n.text:0000000000409eb3\n.text:0000000000409eb8\n.text:0000000000409ebd\n.text:0000000000409ec2\n.text:0000000000409ec7\n.text:0000000000409ecc\n.text:0000000000409ed1\n'
p5011
tp5012
sS'free_mount_entry'
p5013
(S'\n__stdcall free_mount_entry(mount_entry * me)\n'
p5014
V\u000avoid free_mount_entry(mount_entry *me)\u000a\u000a{\u000a  free(me->me_devname);\u000a  free(me->me_mountdir);\u000a  free(me->me_mntroot);\u000a  if ((*(byte *)&me->me_dummy_bitfield & 4) != 0) {\u000a    free(me->me_type);\u000a  }\u000a  free(me);\u000a  return;\u000a}\u000a\u000a
p5015
S'PUSH RBX\nMOV RBX,RDI\nMOV RDI,qword ptr [RBX]\nCALL 0x00402710\nMOV RDI,qword ptr [RBX + 0x8]\nCALL 0x00402710\nMOV RDI,qword ptr [RBX + 0x10]\nCALL 0x00402710\nTEST byte ptr [RBX + 0x28],0x4\nJZ 0x0041aebd\nMOV RDI,qword ptr [RBX + 0x18]\nCALL 0x00402710\nMOV RDI,RBX\nPOP RBX\nJMP 0x00402710\n'
p5016
S'53\n48 89 fb\n48 8b 3b\ne8 74 78 fe ff\n48 8b 7b 08\ne8 6b 78 fe ff\n48 8b 7b 10\ne8 62 78 fe ff\nf6 43 28 04\n74 09\n48 8b 7b 18\ne8 53 78 fe ff\n48 89 df\n5b\ne9 4a 78 fe ff\n'
p5017
S'.text:000000000041ae90\n.text:000000000041ae91\n.text:000000000041ae94\n.text:000000000041ae97\n.text:000000000041ae9c\n.text:000000000041aea0\n.text:000000000041aea5\n.text:000000000041aea9\n.text:000000000041aeae\n.text:000000000041aeb2\n.text:000000000041aeb4\n.text:000000000041aeb8\n.text:000000000041aebd\n.text:000000000041aec0\n.text:000000000041aec1\n'
p5018
tp5019
sS'i_ring_pop'
p5020
(S'\n__stdcall i_ring_pop(I_ring * ir)\n'
p5021
V\u000aint i_ring_pop(I_ring *ir)\u000a\u000a{\u000a  int iVar1;\u000a  _Bool _Var2;\u000a  \u000a  _Var2 = i_ring_empty(ir);\u000a  if (_Var2 != false) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = ir->ir_data[(ulong)ir->ir_front];\u000a  ir->ir_data[(ulong)ir->ir_front] = ir->ir_default_val;\u000a  if (ir->ir_front == ir->ir_back) {\u000a    ir->ir_empty = true;\u000a    return iVar1;\u000a  }\u000a  ir->ir_front = ir->ir_front + 3 & 3;\u000a  return iVar1;\u000a}\u000a\u000a
p5022
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x0041bc40\nTEST AL,AL\nJNZ 0x0041bcc2\nMOV ECX,dword ptr [RBX + 0x10]\nMOV EDX,dword ptr [RBX + 0x14]\nMOV EAX,dword ptr [RBX + RDX*0x4]\nMOV dword ptr [RBX + RDX*0x4],ECX\nMOV ECX,dword ptr [RBX + 0x14]\nCMP ECX,dword ptr [RBX + 0x18]\nJNZ 0x0041bcb7\nMOV byte ptr [RBX + 0x1c],0x1\nPOP RBX\nRET\nADD ECX,0x3\nAND ECX,0x3\nMOV dword ptr [RBX + 0x14],ECX\nPOP RBX\nRET\nCALL 0x00402750\n'
p5023
S'53\n48 89 fb\ne8 a7 ff ff ff\n84 c0\n75 25\n8b 4b 10\n8b 53 14\n8b 04 93\n89 0c 93\n8b 4b 14\n3b 4b 18\n75 06\nc6 43 1c 01\n5b\nc3\n83 c1 03\n83 e1 03\n89 4b 14\n5b\nc3\ne8 89 6a fe ff\n'
p5024
S'.text:000000000041bc90\n.text:000000000041bc91\n.text:000000000041bc94\n.text:000000000041bc99\n.text:000000000041bc9b\n.text:000000000041bc9d\n.text:000000000041bca0\n.text:000000000041bca3\n.text:000000000041bca6\n.text:000000000041bca9\n.text:000000000041bcac\n.text:000000000041bcaf\n.text:000000000041bcb1\n.text:000000000041bcb5\n.text:000000000041bcb6\n.text:000000000041bcb7\n.text:000000000041bcba\n.text:000000000041bcbd\n.text:000000000041bcc0\n.text:000000000041bcc1\n.text:000000000041bcc2\n'
p5025
tp5026
sS'getfileconat'
p5027
(S'\n__stdcall getfileconat(char * file, security_context_t * con)\n'
p5028
V\u000aint getfileconat(char *file,security_context_t *con)\u000a\u000a{\u000a  uint uVar1;\u000a  int __fd;\u000a  int iVar2;\u000a  int iVar3;\u000a  saved_cwd *__ptr;\u000a  uint *puVar4;\u000a  int *piVar5;\u000a  security_context_t *con_00;\u000a  char proc_buf [4032];\u000a  saved_cwd local_ff8 [252];\u000a  \u000a  __fd = (int)(char *)((ulong)file & 0xffffffff);\u000a  if ((__fd == -100) || (*(char *)con == '/')) {\u000a    __fd = getfilecon((char *)con,con_00);\u000a    return __fd;\u000a  }\u000a  __ptr = (saved_cwd *)openat_proc_name((char *)local_ff8,(char *)((ulong)file & 0xffffffff));\u000a  if (__ptr != (saved_cwd *)0x0) {\u000a    iVar2 = getfilecon((char *)__ptr,con_00);\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar1 = *puVar4;\u000a    if (__ptr != local_ff8) {\u000a      free(__ptr);\u000a    }\u000a    if (iVar2 != -1) {\u000a      return iVar2;\u000a    }\u000a    if (((0x26 < uVar1) || ((0x4000102006U >> ((ulong)uVar1 & 0x1f) & 1) == 0)) && (uVar1 != 0x5f))\u000a    {\u000a      *puVar4 = uVar1;\u000a      return -1;\u000a    }\u000a  }\u000a  iVar2 = save_cwd(local_ff8);\u000a  if (iVar2 != 0) {\u000a    puVar4 = (uint *)__errno_location();\u000a    openat_save_fail((ulong)*puVar4);\u000aLAB_0041b054:\u000a    puVar4 = (uint *)__errno_location();\u000a                    /* WARNING: Subroutine does not return */\u000a    openat_restore_fail((ulong)*puVar4);\u000a  }\u000a  if ((__fd < 0) || (local_ff8[0].desc != __fd)) {\u000a    __fd = fchdir(__fd);\u000a    if (__fd == 0) {\u000a      iVar2 = getfilecon((char *)con,con_00);\u000a      __fd = 0;\u000a      if (iVar2 == -1) {\u000a        piVar5 = __errno_location();\u000a        __fd = *piVar5;\u000a      }\u000a      iVar3 = restore_cwd(local_ff8);\u000a      if (iVar3 != 0) goto LAB_0041b054;\u000a      free_cwd(local_ff8);\u000a      if (__fd != 0) {\u000a        piVar5 = __errno_location();\u000a        *piVar5 = __fd;\u000a      }\u000a    }\u000a    else {\u000a      piVar5 = __errno_location();\u000a      __fd = *piVar5;\u000a      free_cwd(local_ff8);\u000a      *piVar5 = __fd;\u000a      iVar2 = -1;\u000a    }\u000a  }\u000a  else {\u000a    free_cwd(local_ff8);\u000a    piVar5 = __errno_location();\u000a    *piVar5 = 9;\u000a    iVar2 = -1;\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p5029
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xfd8\nMOV R14,RDX\nMOV RBX,RSI\nMOV EBP,EDI\nCMP EBP,-0x64\nJZ 0x0041aef3\nCMP byte ptr [RBX],0x2f\nJNZ 0x0041af0f\nMOV RDI,RBX\nMOV RSI,R14\nADD RSP,0xfd8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00416ac0\nLEA R13,[RSP + 0x10]\nMOV RDI,R13\nMOV ESI,EBP\nMOV RDX,RBX\nCALL 0x0041c2f0\nMOV R12,RAX\nTEST R12,R12\nJZ 0x0041af7f\nMOV RDI,R12\nMOV RSI,R14\nCALL 0x00416ac0\nMOV R15D,EAX\nCALL 0x00402770\nMOV qword ptr [RSP + 0x8],RAX\nMOV EDX,dword ptr [RAX]\nCMP R12,R13\nJZ 0x0041af56\nMOV RDI,R12\nMOV R12D,EDX\nCALL 0x00402710\nMOV EDX,R12D\nCMP R15D,-0x1\nJNZ 0x0041b033\nCMP EDX,0x26\nJA 0x0041b023\nMOV EAX,EDX\nMOV RCX,0x4000102006\nBT RCX,RAX\nJNC 0x0041b023\nLEA RDI,[RSP + 0x10]\nCALL 0x004169a0\nTEST EAX,EAX\nJNZ 0x0041b048\nTEST EBP,EBP\nJS 0x0041afb8\nCMP dword ptr [RSP + 0x10],EBP\nJNZ 0x0041afb8\nLEA RDI,[RSP + 0x10]\nCALL 0x00416a10\nCALL 0x00402770\nMOV dword ptr [RAX],0x9\nMOV R15D,0xffffffff\nJMP 0x0041b033\nMOV EDI,EBP\nCALL 0x00402d10\nTEST EAX,EAX\nJZ 0x0041afe1\nCALL 0x00402770\nMOV RBX,RAX\nMOV EBP,dword ptr [RBX]\nLEA RDI,[RSP + 0x10]\nCALL 0x00416a10\nMOV dword ptr [RBX],EBP\nMOV R15D,0xffffffff\nJMP 0x0041b033\nMOV RDI,RBX\nMOV RSI,R14\nCALL 0x00416ac0\nMOV R15D,EAX\nXOR EBX,EBX\nCMP R15D,-0x1\nJNZ 0x0041affe\nCALL 0x00402770\nMOV EBX,dword ptr [RAX]\nLEA RDI,[RSP + 0x10]\nCALL 0x004169f0\nTEST EAX,EAX\nJNZ 0x0041b054\nLEA RDI,[RSP + 0x10]\nCALL 0x00416a10\nTEST EBX,EBX\nJZ 0x0041b033\nCALL 0x00402770\nMOV dword ptr [RAX],EBX\nJMP 0x0041b033\nCMP EDX,0x5f\nJZ 0x0041af7f\nMOV RAX,qword ptr [RSP + 0x8]\nMOV dword ptr [RAX],EDX\nMOV EAX,R15D\nADD RSP,0xfd8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00402770\nMOV EDI,dword ptr [RAX]\nCALL 0x00413210\nCALL 0x00402770\nMOV EDI,dword ptr [RAX]\nCALL 0x00413250\n'
p5030
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec d8 0f 00 00\n49 89 d6\n48 89 f3\n89 fd\n83 fd 9c\n74 05\n80 3b 2f\n75 1c\n48 89 df\n4c 89 f6\n48 81 c4 d8 0f 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 b1 bb ff ff\n4c 8d 6c 24 10\n4c 89 ef\n89 ee\n48 89 da\ne8 cf 13 00 00\n49 89 c4\n4d 85 e4\n74 56\n4c 89 e7\n4c 89 f6\ne8 8c bb ff ff\n41 89 c7\ne8 34 78 fe ff\n48 89 44 24 08\n8b 10\n4d 39 ec\n74 0e\n4c 89 e7\n41 89 d4\ne8 bd 77 fe ff\n44 89 e2\n41 83 ff ff\n0f 85 d3 00 00 00\n83 fa 26\n0f 87 ba 00 00 00\n89 d0\n48 b9 06 20 10 00 40 00 00 00\n48 0f a3 c1\n0f 83 a4 00 00 00\n48 8d 7c 24 10\ne8 17 ba ff ff\n85 c0\n0f 85 b7 00 00 00\n85 ed\n78 23\n39 6c 24 10\n75 1d\n48 8d 7c 24 10\ne8 6b ba ff ff\ne8 c6 77 fe ff\nc7 00 09 00 00 00\n41 bf ff ff ff ff\neb 7b\n89 ef\ne8 51 7d fe ff\n85 c0\n74 1e\ne8 a8 77 fe ff\n48 89 c3\n8b 2b\n48 8d 7c 24 10\ne8 39 ba ff ff\n89 2b\n41 bf ff ff ff ff\neb 52\n48 89 df\n4c 89 f6\ne8 d4 ba ff ff\n41 89 c7\n31 db\n41 83 ff ff\n75 07\ne8 74 77 fe ff\n8b 18\n48 8d 7c 24 10\ne8 e8 b9 ff ff\n85 c0\n75 48\n48 8d 7c 24 10\ne8 fa b9 ff ff\n85 db\n74 19\ne8 51 77 fe ff\n89 18\neb 10\n83 fa 5f\n0f 84 53 ff ff ff\n48 8b 44 24 08\n89 10\n44 89 f8\n48 81 c4 d8 0f 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 23 77 fe ff\n8b 38\ne8 bc 81 ff ff\ne8 17 77 fe ff\n8b 38\ne8 f0 81 ff ff\n'
p5031
S'.text:000000000041aed0\n.text:000000000041aed1\n.text:000000000041aed3\n.text:000000000041aed5\n.text:000000000041aed7\n.text:000000000041aed9\n.text:000000000041aeda\n.text:000000000041aee1\n.text:000000000041aee4\n.text:000000000041aee7\n.text:000000000041aee9\n.text:000000000041aeec\n.text:000000000041aeee\n.text:000000000041aef1\n.text:000000000041aef3\n.text:000000000041aef6\n.text:000000000041aef9\n.text:000000000041af00\n.text:000000000041af01\n.text:000000000041af03\n.text:000000000041af05\n.text:000000000041af07\n.text:000000000041af09\n.text:000000000041af0a\n.text:000000000041af0f\n.text:000000000041af14\n.text:000000000041af17\n.text:000000000041af19\n.text:000000000041af1c\n.text:000000000041af21\n.text:000000000041af24\n.text:000000000041af27\n.text:000000000041af29\n.text:000000000041af2c\n.text:000000000041af2f\n.text:000000000041af34\n.text:000000000041af37\n.text:000000000041af3c\n.text:000000000041af41\n.text:000000000041af43\n.text:000000000041af46\n.text:000000000041af48\n.text:000000000041af4b\n.text:000000000041af4e\n.text:000000000041af53\n.text:000000000041af56\n.text:000000000041af5a\n.text:000000000041af60\n.text:000000000041af63\n.text:000000000041af69\n.text:000000000041af6b\n.text:000000000041af75\n.text:000000000041af79\n.text:000000000041af7f\n.text:000000000041af84\n.text:000000000041af89\n.text:000000000041af8b\n.text:000000000041af91\n.text:000000000041af93\n.text:000000000041af95\n.text:000000000041af99\n.text:000000000041af9b\n.text:000000000041afa0\n.text:000000000041afa5\n.text:000000000041afaa\n.text:000000000041afb0\n.text:000000000041afb6\n.text:000000000041afb8\n.text:000000000041afba\n.text:000000000041afbf\n.text:000000000041afc1\n.text:000000000041afc3\n.text:000000000041afc8\n.text:000000000041afcb\n.text:000000000041afcd\n.text:000000000041afd2\n.text:000000000041afd7\n.text:000000000041afd9\n.text:000000000041afdf\n.text:000000000041afe1\n.text:000000000041afe4\n.text:000000000041afe7\n.text:000000000041afec\n.text:000000000041afef\n.text:000000000041aff1\n.text:000000000041aff5\n.text:000000000041aff7\n.text:000000000041affc\n.text:000000000041affe\n.text:000000000041b003\n.text:000000000041b008\n.text:000000000041b00a\n.text:000000000041b00c\n.text:000000000041b011\n.text:000000000041b016\n.text:000000000041b018\n.text:000000000041b01a\n.text:000000000041b01f\n.text:000000000041b021\n.text:000000000041b023\n.text:000000000041b026\n.text:000000000041b02c\n.text:000000000041b031\n.text:000000000041b033\n.text:000000000041b036\n.text:000000000041b03d\n.text:000000000041b03e\n.text:000000000041b040\n.text:000000000041b042\n.text:000000000041b044\n.text:000000000041b046\n.text:000000000041b047\n.text:000000000041b048\n.text:000000000041b04d\n.text:000000000041b04f\n.text:000000000041b054\n.text:000000000041b059\n.text:000000000041b05b\n'
p5032
tp5033
sS'textdomain'
p5034
(S'\n__stdcall textdomain()\n'
p5035
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_0062d0f8)();\u000a  return;\u000a}\u000a\u000a
p5036
S'JMP qword ptr [0x0062d0f8]\n'
p5037
S'ff 25 42 a8 22 00\n'
p5038
S'.plt:00000000004028b0\n'
p5039
tp5040
sS'get_regex_type_name'
p5041
(S'\n__stdcall get_regex_type_name()\n'
p5042
V\u000achar * get_regex_type_name(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if (in_EDI < 0xd) {\u000a    return regex_map[(ulong)in_EDI].name;\u000a  }\u000a  return (char *)0x0;\u000a}\u000a\u000a
p5043
S'CMP EDI,0xc\nJA 0x0040f993\nMOV EAX,EDI\nSHL RAX,0x4\nMOV RAX,qword ptr [0x62dcd0 + RAX]\nRET\nXOR EAX,EAX\nRET\n'
p5044
S'83 ff 0c\n77 0e\n89 f8\n48 c1 e0 04\n48 8b 80 d0 dc 62 00\nc3\n31 c0\nc3\n'
p5045
S'.text:000000000040f980\n.text:000000000040f983\n.text:000000000040f985\n.text:000000000040f987\n.text:000000000040f98b\n.text:000000000040f992\n.text:000000000040f993\n.text:000000000040f995\n'
p5046
tp5047
sS'run_in_dir'
p5048
(S'\n__stdcall run_in_dir(saved_cwd * there, anon_subr_int_void_ptr * callback, void * usercontext)\n'
p5049
V\u000aint run_in_dir(saved_cwd *there,int (*callback)(void *),void *usercontext)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  uint *puVar4;\u000a  void *extraout_RDX;\u000a  int (*UNRECOVERED_JUMPTABLE)(void *);\u000a  saved_cwd sStack96;\u000a  saved_cwd *psStack80;\u000a  void *pvStack72;\u000a  saved_cwd local_30;\u000a  \u000a  UNRECOVERED_JUMPTABLE = callback;\u000a  __fd = save_cwd(&local_30);\u000a  if (__fd == 0) {\u000a    __fd = restore_cwd(there);\u000a    if (__fd == 0) {\u000a      iVar1 = (*callback)(usercontext);\u000a      __fd = 0;\u000a      if (iVar1 < 0) {\u000a        piVar3 = __errno_location();\u000a        __fd = *piVar3;\u000a      }\u000a      iVar2 = restore_cwd(&local_30);\u000a      if (iVar2 == 0) {\u000a        free_cwd(&local_30);\u000a        if (__fd != 0) {\u000a          piVar3 = __errno_location();\u000a          *piVar3 = __fd;\u000a        }\u000a        return iVar1;\u000a      }\u000a    }\u000a    puVar4 = (uint *)__errno_location();\u000a                    /* WARNING: Subroutine does not return */\u000a    openat_restore_fail((ulong)*puVar4);\u000a  }\u000a  piVar3 = __errno_location();\u000a  __fd = *piVar3;\u000a  openat_save_fail();\u000a  if (__fd == -100) {\u000a    psStack80 = there;\u000a    pvStack72 = usercontext;\u000a                    /* WARNING: Could not recover jumptable at 0x0040e55d. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a    __fd = (*UNRECOVERED_JUMPTABLE)(extraout_RDX);\u000a    return __fd;\u000a  }\u000a  psStack80 = there;\u000a  pvStack72 = usercontext;\u000a  iVar1 = save_cwd(&sStack96);\u000a  if (iVar1 == 0) {\u000a    __fd = fchdir(__fd);\u000a    if (__fd == 0) {\u000a      iVar1 = (*UNRECOVERED_JUMPTABLE)(extraout_RDX);\u000a      __fd = 0;\u000a      if (iVar1 < 0) {\u000a        piVar3 = __errno_location();\u000a        __fd = *piVar3;\u000a      }\u000a      iVar2 = restore_cwd(&sStack96);\u000a      if (iVar2 != 0) goto LAB_0040e5df;\u000a      free_cwd(&sStack96);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a      }\u000a    }\u000a    else {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      free_cwd(&sStack96);\u000a      *piVar3 = __fd;\u000a      iVar1 = -1;\u000a    }\u000a    return iVar1;\u000a  }\u000a  puVar4 = (uint *)__errno_location();\u000a  openat_save_fail((ulong)*puVar4);\u000aLAB_0040e5df:\u000a  puVar4 = (uint *)__errno_location();\u000a                    /* WARNING: Subroutine does not return */\u000a  openat_restore_fail((ulong)*puVar4);\u000a}\u000a\u000a
p5050
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x18\nMOV R14,RDX\nMOV R15,RSI\nMOV RBX,RDI\nLEA RDI,[RSP + 0x8]\nCALL 0x004169a0\nTEST EAX,EAX\nJNZ 0x0040e52e\nMOV RDI,RBX\nCALL 0x004169f0\nTEST EAX,EAX\nJNZ 0x0040e522\nMOV RDI,R14\nCALL R15\nMOV EBX,EAX\nXOR EBP,EBP\nTEST EBX,EBX\nJNS 0x0040e4f2\nCALL 0x00402770\nMOV EBP,dword ptr [RAX]\nLEA RDI,[RSP + 0x8]\nCALL 0x004169f0\nTEST EAX,EAX\nJNZ 0x0040e522\nLEA RDI,[RSP + 0x8]\nCALL 0x00416a10\nTEST EBP,EBP\nJZ 0x0040e515\nCALL 0x00402770\nMOV dword ptr [RAX],EBP\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00402770\nMOV EDI,dword ptr [RAX]\nCALL 0x00413250\nCALL 0x00402770\nMOV EDI,dword ptr [RAX]\nCALL 0x00413210\nNOP word ptr [RAX + RAX*0x1]\n'
p5051
S'55\n41 57\n41 56\n53\n48 83 ec 18\n49 89 d6\n49 89 f7\n48 89 fb\n48 8d 7c 24 08\ne8 d3 84 00 00\n85 c0\n75 5d\n48 89 df\ne8 17 85 00 00\n85 c0\n75 45\n4c 89 f7\n41 ff d7\n89 c3\n31 ed\n85 db\n79 07\ne8 80 42 ff ff\n8b 28\n48 8d 7c 24 08\ne8 f4 84 00 00\n85 c0\n75 22\n48 8d 7c 24 08\ne8 06 85 00 00\n85 ed\n74 07\ne8 5d 42 ff ff\n89 28\n89 d8\n48 83 c4 18\n5b\n41 5e\n41 5f\n5d\nc3\ne8 49 42 ff ff\n8b 38\ne8 22 4d 00 00\ne8 3d 42 ff ff\n8b 38\ne8 d6 4c 00 00\n66 0f 1f 44 00 00\n'
p5052
S'.text:000000000040e4b0\n.text:000000000040e4b1\n.text:000000000040e4b3\n.text:000000000040e4b5\n.text:000000000040e4b6\n.text:000000000040e4ba\n.text:000000000040e4bd\n.text:000000000040e4c0\n.text:000000000040e4c3\n.text:000000000040e4c8\n.text:000000000040e4cd\n.text:000000000040e4cf\n.text:000000000040e4d1\n.text:000000000040e4d4\n.text:000000000040e4d9\n.text:000000000040e4db\n.text:000000000040e4dd\n.text:000000000040e4e0\n.text:000000000040e4e3\n.text:000000000040e4e5\n.text:000000000040e4e7\n.text:000000000040e4e9\n.text:000000000040e4eb\n.text:000000000040e4f0\n.text:000000000040e4f2\n.text:000000000040e4f7\n.text:000000000040e4fc\n.text:000000000040e4fe\n.text:000000000040e500\n.text:000000000040e505\n.text:000000000040e50a\n.text:000000000040e50c\n.text:000000000040e50e\n.text:000000000040e513\n.text:000000000040e515\n.text:000000000040e517\n.text:000000000040e51b\n.text:000000000040e51c\n.text:000000000040e51e\n.text:000000000040e520\n.text:000000000040e521\n.text:000000000040e522\n.text:000000000040e527\n.text:000000000040e529\n.text:000000000040e52e\n.text:000000000040e533\n.text:000000000040e535\n.text:000000000040e53a\n'
p5053
tp5054
sS'strspn'
p5055
(S'\n__stdcall strspn(char * __s, char * __accept)\n'
p5056
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strspn(char *__s,char *__accept)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strspn_0062d208)();\u000a  return sVar1;\u000a}\u000a\u000a
p5057
S'JMP qword ptr [0x0062d208]\n'
p5058
S'ff 25 32 a7 22 00\n'
p5059
S'.plt:0000000000402ad0\n'
p5060
tp5061
sS'set_stat_placeholders'
p5062
(S'\n__stdcall set_stat_placeholders(stat * p)\n'
p5063
V\u000avoid set_stat_placeholders(stat *p)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p5064
S'RET\n'
p5065
S'c3\n'
p5066
S'.text:00000000004079d0\n'
p5067
tp5068
sS'quotearg_buffer'
p5069
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p5070
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p5071
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x62e690\nCMOVNZ RBP,R8\nCALL 0x00402770\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x004152c0\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p5072
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd 90 e6 62 00\n49 0f 45 e8\ne8 08 d5 fe ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p5073
S'.text:0000000000415240\n.text:0000000000415241\n.text:0000000000415243\n.text:0000000000415245\n.text:0000000000415247\n.text:0000000000415249\n.text:000000000041524a\n.text:000000000041524b\n.text:000000000041524e\n.text:0000000000415251\n.text:0000000000415254\n.text:0000000000415257\n.text:000000000041525a\n.text:000000000041525f\n.text:0000000000415263\n.text:0000000000415268\n.text:000000000041526b\n.text:000000000041526d\n.text:0000000000415271\n.text:0000000000415275\n.text:0000000000415279\n.text:000000000041527d\n.text:0000000000415280\n.text:0000000000415283\n.text:0000000000415286\n.text:0000000000415289\n.text:000000000041528c\n.text:000000000041528f\n.text:0000000000415293\n.text:0000000000415294\n.text:0000000000415299\n.text:000000000041529d\n.text:00000000004152a1\n.text:00000000004152a3\n.text:00000000004152a7\n.text:00000000004152a8\n.text:00000000004152aa\n.text:00000000004152ac\n.text:00000000004152ae\n.text:00000000004152b0\n.text:00000000004152b1\n'
p5074
tp5075
sS'estimate_file_age_success_rate'
p5076
(S'\n__stdcall estimate_file_age_success_rate(float num_days)\n'
p5077
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000afloat estimate_file_age_success_rate(float num_days)\u000a\u000a{\u000a  if (num_days < DAT_0041fb7c) {\u000a    return DAT_0041fb78;\u000a  }\u000a  if (num_days < DAT_0041d344) {\u000a    return DAT_0041fb80;\u000a  }\u000a  return *(float *)(&DAT_0041fbb0 + (ulong)(_DAT_0041fb84 < num_days) * 4);\u000a}\u000a\u000a
p5078
S'MOVSS XMM1,dword ptr [0x0041fb7c]\nUCOMISS XMM1,XMM0\nJBE 0x0040ae26\nMOVSS XMM0,dword ptr [0x0041fb78]\nRET\nMOVSS XMM1,dword ptr [0x0041d344]\nUCOMISS XMM1,XMM0\nJBE 0x0040ae3c\nMOVSS XMM0,dword ptr [0x0041fb80]\nRET\nXOR EAX,EAX\nUCOMISS XMM0,dword ptr [0x0041fb84]\nSETA AL\nMOVSS XMM0,dword ptr [0x41fbb0 + RAX*0x4]\nRET\n'
p5079
S'f3 0f 10 0d 64 4d 01 00\n0f 2e c8\n76 09\nf3 0f 10 05 53 4d 01 00\nc3\nf3 0f 10 0d 16 25 01 00\n0f 2e c8\n76 09\nf3 0f 10 05 45 4d 01 00\nc3\n31 c0\n0f 2e 05 3f 4d 01 00\n0f 97 c0\nf3 0f 10 04 85 b0 fb 41 00\nc3\n'
p5080
S'.text:000000000040ae10\n.text:000000000040ae18\n.text:000000000040ae1b\n.text:000000000040ae1d\n.text:000000000040ae25\n.text:000000000040ae26\n.text:000000000040ae2e\n.text:000000000040ae31\n.text:000000000040ae33\n.text:000000000040ae3b\n.text:000000000040ae3c\n.text:000000000040ae3e\n.text:000000000040ae45\n.text:000000000040ae48\n.text:000000000040ae51\n'
p5081
tp5082
sS'parse_nouser'
p5083
(S'\n__stdcall parse_nouser(parser_table * entry, char * * argv, int * arg_ptr)\n'
p5084
V\u000a_Bool parse_nouser(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  predicate *ppVar1;\u000a  \u000a  ppVar1 = insert_primary_noarg(entry);\u000a  ppVar1->est_success_rate = 0.00100000;\u000a  return true;\u000a}\u000a\u000a
p5085
S'PUSH RAX\nCALL 0x00407760\nMOV dword ptr [RAX + 0x24],0x3a83126f\nMOV AL,0x1\nPOP RCX\nRET\n'
p5086
S'50\ne8 fa ba ff ff\nc7 40 24 6f 12 83 3a\nb0 01\n59\nc3\n'
p5087
S'.text:000000000040bc60\n.text:000000000040bc61\n.text:000000000040bc66\n.text:000000000040bc6d\n.text:000000000040bc6f\n.text:000000000040bc70\n'
p5088
tp5089
sS'get_stat_ctime'
p5090
(S'\n__stdcall get_stat_ctime(stat * st)\n'
p5091
V\u000atimespec get_stat_ctime(stat *st)\u000a\u000a{\u000a  return st->st_ctim;\u000a}\u000a\u000a
p5092
S'MOV RAX,qword ptr [RDI + 0x68]\nMOV RDX,qword ptr [RDI + 0x70]\nRET\n'
p5093
S'48 8b 47 68\n48 8b 57 70\nc3\n'
p5094
S'.text:0000000000416c80\n.text:0000000000416c84\n.text:0000000000416c88\n'
p5095
tp5096
sS'merge_pred'
p5097
(S'\n__stdcall merge_pred(predicate * beg_list, predicate * end_list, predicate * * last_p)\n'
p5098
V\u000avoid merge_pred(predicate *beg_list,predicate *end_list,predicate **last_p)\u000a\u000a{\u000a  end_list->pred_left = *last_p;\u000a  *last_p = beg_list;\u000a  return;\u000a}\u000a\u000a
p5099
S'MOV RAX,qword ptr [RDX]\nMOV qword ptr [0x110 + RSI],RAX\nMOV qword ptr [RDX],RDI\nRET\n'
p5100
S'48 8b 02\n48 89 86 10 01 00 00\n48 89 3a\nc3\n'
p5101
S'.text:00000000004073f0\n.text:00000000004073f3\n.text:00000000004073fa\n.text:00000000004073fd\n'
p5102
tp5103
sS'update_limit'
p5104
(S'\n__stdcall update_limit(buildcmd_control * ctl, buildcmd_state * state, size_t limit)\n'
p5105
V\u000asize_t update_limit(buildcmd_control *ctl,buildcmd_state *state,size_t limit)\u000a\u000a{\u000a  ulong uVar1;\u000a  size_t sVar2;\u000a  ulong in_RCX;\u000a  char cVar3;\u000a  ulong uVar4;\u000a  \u000a  cVar3 = (char)limit;\u000a  if (cVar3 == 0) {\u000a    if (in_RCX <= state->smallest_failed_arg_count - 1) {\u000a      state->smallest_failed_arg_count = in_RCX;\u000a    }\u000a  }\u000a  else {\u000a    if (state->largest_successful_arg_count < in_RCX) {\u000a      state->largest_successful_arg_count = in_RCX;\u000a    }\u000a  }\u000a  uVar1 = state->largest_successful_arg_count;\u000a  if ((uVar1 == 0) ||\u000a     (uVar4 = state->smallest_failed_arg_count - uVar1,\u000a     state->smallest_failed_arg_count < uVar1 || uVar4 == 0)) {\u000a    if (cVar3 == 0) {\u000a      uVar4 = in_RCX >> 1;\u000a    }\u000a    else {\u000a      uVar4 = in_RCX + 1;\u000a      if (in_RCX == 0xffffffffffffffff) {\u000a        uVar4 = in_RCX;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    uVar4 = uVar4 >> 1;\u000a    if (cVar3 == 0) {\u000a      if (uVar4 == 0) {\u000a        uVar4 = in_RCX - 1;\u000a      }\u000a      else {\u000a        uVar4 = in_RCX - uVar4;\u000a      }\u000a    }\u000a    else {\u000a      if (uVar4 == 0) {\u000a        uVar4 = in_RCX + 1;\u000a      }\u000a      else {\u000a        uVar4 = uVar4 + in_RCX;\u000a      }\u000a    }\u000a  }\u000a  if ((ctl->initial_argc != 0) && (uVar1 = ctl->initial_argc + 1, uVar4 <= uVar1)) {\u000a    uVar4 = uVar1;\u000a  }\u000a  sVar2 = 1;\u000a  if (uVar4 != 0) {\u000a    sVar2 = uVar4;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p5106
S'TEST DL,DL\nJZ 0x0040e110\nCMP qword ptr [RSI + 0x40],RCX\nJNC 0x0040e120\nMOV qword ptr [RSI + 0x40],RCX\nJMP 0x0040e120\nMOV RAX,qword ptr [RSI + 0x48]\nDEC RAX\nCMP RAX,RCX\nJC 0x0040e120\nMOV qword ptr [RSI + 0x48],RCX\nMOV RAX,qword ptr [RSI + 0x40]\nTEST RAX,RAX\nJZ 0x0040e143\nMOV RSI,qword ptr [RSI + 0x48]\nSUB RSI,RAX\nJBE 0x0040e143\nSHR RSI,1\nTEST DL,DL\nJZ 0x0040e15a\nTEST RSI,RSI\nJZ 0x0040e164\nADD RSI,RCX\nJMP 0x0040e16f\nTEST DL,DL\nJZ 0x0040e155\nLEA RSI,[RCX + 0x1]\nCMP RCX,-0x1\nCMOVZ RSI,RCX\nJMP 0x0040e16f\nSHR RCX,1\nJMP 0x0040e16c\nTEST RSI,RSI\nJZ 0x0040e169\nSUB RCX,RSI\nJMP 0x0040e16c\nINC RCX\nJMP 0x0040e16c\nDEC RCX\nMOV RSI,RCX\nMOV RAX,qword ptr [RDI + 0x38]\nTEST RAX,RAX\nJZ 0x0040e182\nINC RAX\nCMP RSI,RAX\nCMOVBE RSI,RAX\nTEST RSI,RSI\nMOV EAX,0x1\nCMOVNZ RAX,RSI\nRET\n'
p5107
S'84 d2\n74 0c\n48 39 4e 40\n73 16\n48 89 4e 40\neb 10\n48 8b 46 48\n48 ff c8\n48 39 c8\n72 04\n48 89 4e 48\n48 8b 46 40\n48 85 c0\n74 1a\n48 8b 76 48\n48 29 c6\n76 11\n48 d1 ee\n84 d2\n74 21\n48 85 f6\n74 26\n48 01 ce\neb 2c\n84 d2\n74 0e\n48 8d 71 01\n48 83 f9 ff\n48 0f 44 f1\neb 1a\n48 d1 e9\neb 12\n48 85 f6\n74 0a\n48 29 f1\neb 08\n48 ff c1\neb 03\n48 ff c9\n48 89 ce\n48 8b 47 38\n48 85 c0\n74 0a\n48 ff c0\n48 39 c6\n48 0f 46 f0\n48 85 f6\nb8 01 00 00 00\n48 0f 45 c6\nc3\n'
p5108
S'.text:000000000040e100\n.text:000000000040e102\n.text:000000000040e104\n.text:000000000040e108\n.text:000000000040e10a\n.text:000000000040e10e\n.text:000000000040e110\n.text:000000000040e114\n.text:000000000040e117\n.text:000000000040e11a\n.text:000000000040e11c\n.text:000000000040e120\n.text:000000000040e124\n.text:000000000040e127\n.text:000000000040e129\n.text:000000000040e12d\n.text:000000000040e130\n.text:000000000040e132\n.text:000000000040e135\n.text:000000000040e137\n.text:000000000040e139\n.text:000000000040e13c\n.text:000000000040e13e\n.text:000000000040e141\n.text:000000000040e143\n.text:000000000040e145\n.text:000000000040e147\n.text:000000000040e14b\n.text:000000000040e14f\n.text:000000000040e153\n.text:000000000040e155\n.text:000000000040e158\n.text:000000000040e15a\n.text:000000000040e15d\n.text:000000000040e15f\n.text:000000000040e162\n.text:000000000040e164\n.text:000000000040e167\n.text:000000000040e169\n.text:000000000040e16c\n.text:000000000040e16f\n.text:000000000040e173\n.text:000000000040e176\n.text:000000000040e178\n.text:000000000040e17b\n.text:000000000040e17e\n.text:000000000040e182\n.text:000000000040e185\n.text:000000000040e18a\n.text:000000000040e18e\n'
p5109
tp5110
sS'strnlen'
p5111
(S'\n__stdcall strnlen(char * __string, size_t __maxlen)\n'
p5112
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strnlen(char *__string,size_t __maxlen)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strnlen_0062d1f0)();\u000a  return sVar1;\u000a}\u000a\u000a
p5113
S'JMP qword ptr [0x0062d1f0]\n'
p5114
S'ff 25 4a a7 22 00\n'
p5115
S'.plt:0000000000402aa0\n'
p5116
tp5117
sS'close_stream'
p5118
(S'\n__stdcall close_stream(FILE * stream)\n'
p5119
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror((FILE *)stream);\u000a  iVar2 = fclose((FILE *)stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p5120
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x004027d0\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x004027f0\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x004028c0\nTEST EBP,EBP\nJZ 0x0041bacb\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x0041baef\nCALL 0x00402770\nMOV dword ptr [RAX],0x0\nJMP 0x0041baef\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x0041baef\nTEST CL,CL\nJNZ 0x0041baef\nCALL 0x00402770\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p5121
S'55\n41 56\n53\n48 89 fb\ne8 34 6d fe ff\n49 89 c6\n48 89 df\ne8 49 6d fe ff\n89 c5\n48 89 df\ne8 0f 6e fe ff\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 ad 6c fe ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 8e 6c fe ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p5122
S'.text:000000000041ba90\n.text:000000000041ba91\n.text:000000000041ba93\n.text:000000000041ba94\n.text:000000000041ba97\n.text:000000000041ba9c\n.text:000000000041ba9f\n.text:000000000041baa2\n.text:000000000041baa7\n.text:000000000041baa9\n.text:000000000041baac\n.text:000000000041bab1\n.text:000000000041bab3\n.text:000000000041bab5\n.text:000000000041baba\n.text:000000000041babc\n.text:000000000041babe\n.text:000000000041bac3\n.text:000000000041bac9\n.text:000000000041bacb\n.text:000000000041bacd\n.text:000000000041bad0\n.text:000000000041bad2\n.text:000000000041bad4\n.text:000000000041bad7\n.text:000000000041bad9\n.text:000000000041badb\n.text:000000000041badd\n.text:000000000041bae2\n.text:000000000041bae4\n.text:000000000041bae7\n.text:000000000041baec\n.text:000000000041baef\n.text:000000000041baf1\n.text:000000000041baf2\n.text:000000000041baf4\n.text:000000000041baf5\n'
p5123
tp5124
sS'forget_non_cloexec_fds'
p5125
(S'\n__stdcall forget_non_cloexec_fds()\n'
p5126
V\u000aundefined8 forget_non_cloexec_fds(void)\u000a\u000a{\u000a  undefined8 in_RAX;\u000a  \u000a  free(non_cloexec_fds);\u000a  non_cloexec_fds = (int *)0x0;\u000a  num_cloexec_fds = 0;\u000a  return in_RAX;\u000a}\u000a\u000a
p5127
S'PUSH RAX\nMOV RDI,qword ptr [0x0062e638]\nCALL 0x00402710\nMOV qword ptr [0x0062e638],0x0\nMOV qword ptr [0x0062e640],0x0\nPOP RAX\nRET\n'
p5128
S'50\n48 8b 3d 00 fc 21 00\ne8 d3 3c ff ff\n48 c7 05 f0 fb 21 00 00 00 00 00\n48 c7 05 ed fb 21 00 00 00 00 00\n58\nc3\n'
p5129
S'.text:000000000040ea30\n.text:000000000040ea31\n.text:000000000040ea38\n.text:000000000040ea3d\n.text:000000000040ea48\n.text:000000000040ea53\n.text:000000000040ea54\n'
p5130
tp5131
sS'quotearg_colon_mem'
p5132
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p5133
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p5134
S'MOV EDX,0x3a\nJMP 0x004163b0\n'
p5135
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p5136
S'.text:0000000000416440\n.text:0000000000416445\n'
p5137
tp5138
sS'bc_clear_args'
p5139
(S'\n__stdcall bc_clear_args(buildcmd_control * ctl, buildcmd_state * state)\n'
p5140
V\u000avoid bc_clear_args(buildcmd_control *ctl,buildcmd_state *state)\u000a\u000a{\u000a  state->cmd_argc = ctl->initial_argc;\u000a  state->cmd_argv_chars = state->cmd_initial_argv_chars;\u000a  *(undefined8 *)&state->todo = 0xffffffff00000000;\u000a  return;\u000a}\u000a\u000a
p5141
S'MOV RAX,qword ptr [RDI + 0x38]\nMOV qword ptr [RSI],RAX\nMOV RAX,qword ptr [RSI + 0x28]\nMOV qword ptr [RSI + 0x20],RAX\nMOV RAX,-0x100000000\nMOV qword ptr [RSI + 0x38],RAX\nRET\n'
p5142
S'48 8b 47 38\n48 89 06\n48 8b 46 28\n48 89 46 20\n48 b8 00 00 00 00 ff ff ff ff\n48 89 46 38\nc3\n'
p5143
S'.text:000000000040e190\n.text:000000000040e194\n.text:000000000040e197\n.text:000000000040e19b\n.text:000000000040e19f\n.text:000000000040e1a9\n.text:000000000040e1ad\n'
p5144
tp5145
sS'merge_lists'
p5146
(S'\n__stdcall merge_lists()\n'
p5147
V\u000avoid merge_lists(long lParm1,predlist *ppParm2,predlist *ppParm3,predicate **pppParm4)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  predlist_merge_sort(ppParm2,pppParm4);\u000a  predlist_merge_sort(ppParm3,pppParm4);\u000a  lVar1 = 0;\u000a  do {\u000a    predlist_merge_sort((predlist *)(lParm1 + lVar1),pppParm4);\u000a    lVar1 = lVar1 + 0x10;\u000a  } while (lVar1 != 0xb0);\u000a  return;\u000a}\u000a\u000a
p5148
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,RCX\nMOV R15,RDX\nMOV R14,RDI\nMOV RDI,RSI\nMOV RSI,R12\nCALL 0x00407200\nMOV RDI,R15\nMOV RSI,R12\nCALL 0x00407200\nXOR EBX,EBX\nNOP dword ptr [RAX]\nLEA RDI,[R14 + RBX*0x1]\nMOV RSI,R12\nCALL 0x00407200\nADD RBX,0x10\nCMP RBX,0xb0\nJNZ 0x004071d0\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p5149
S'41 57\n41 56\n41 54\n53\n50\n49 89 cc\n49 89 d7\n49 89 fe\n48 89 f7\n4c 89 e6\ne8 44 00 00 00\n4c 89 ff\n4c 89 e6\ne8 39 00 00 00\n31 db\n0f 1f 80 00 00 00 00\n49 8d 3c 1e\n4c 89 e6\ne8 24 00 00 00\n48 83 c3 10\n48 81 fb b0 00 00 00\n75 e7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p5150
S'.text:00000000004071a0\n.text:00000000004071a2\n.text:00000000004071a4\n.text:00000000004071a6\n.text:00000000004071a7\n.text:00000000004071a8\n.text:00000000004071ab\n.text:00000000004071ae\n.text:00000000004071b1\n.text:00000000004071b4\n.text:00000000004071b7\n.text:00000000004071bc\n.text:00000000004071bf\n.text:00000000004071c2\n.text:00000000004071c7\n.text:00000000004071c9\n.text:00000000004071d0\n.text:00000000004071d4\n.text:00000000004071d7\n.text:00000000004071dc\n.text:00000000004071e0\n.text:00000000004071e7\n.text:00000000004071e9\n.text:00000000004071ed\n.text:00000000004071ee\n.text:00000000004071f0\n.text:00000000004071f2\n.text:00000000004071f4\n'
p5151
tp5152
sS'pred_writable'
p5153
(S'\n__stdcall pred_writable(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p5154
V\u000a_Bool pred_writable(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = faccessat(state.cwd_dir_fd,state.rel_pathname,2,0);\u000a  return (_Bool)(iVar1 == 0);\u000a}\u000a\u000a
p5155
S'PUSH RAX\nMOV EDI,dword ptr [0x0062f018]\nMOV RSI,qword ptr [0x0062f010]\nMOV EDX,0x2\nXOR ECX,ECX\nCALL 0x00402870\nTEST EAX,EAX\nSETZ AL\nPOP RCX\nRET\n'
p5156
S'50\n8b 3d 51 a7 22 00\n48 8b 35 42 a7 22 00\nba 02 00 00 00\n31 c9\ne8 96 df ff ff\n85 c0\n0f 94 c0\n59\nc3\n'
p5157
S'.text:00000000004048c0\n.text:00000000004048c1\n.text:00000000004048c7\n.text:00000000004048ce\n.text:00000000004048d3\n.text:00000000004048d5\n.text:00000000004048da\n.text:00000000004048dc\n.text:00000000004048df\n.text:00000000004048e0\n'
p5158
tp5159
sS'following_links'
p5160
(S'\n__stdcall following_links()\n'
p5161
V\u000a_Bool following_links(void)\u000a\u000a{\u000a  if (options.symlink_handling == SYMLINK_ALWAYS_DEREF) {\u000a    return true;\u000a  }\u000a  if (options.symlink_handling == SYMLINK_DEREF_ARGSONLY) {\u000a    return (_Bool)(state.curdepth == 0);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p5162
S'MOV EAX,dword ptr [0x0062f088]\nCMP EAX,0x1\nJZ 0x0040824b\nCMP EAX,0x2\nJNZ 0x0040824e\nCMP dword ptr [0x0062f000],0x0\nSETZ AL\nRET\nMOV AL,0x1\nRET\nXOR EAX,EAX\nRET\n'
p5163
S'8b 05 52 6e 22 00\n83 f8 01\n74 10\n83 f8 02\n75 0e\n83 3d b9 6d 22 00 00\n0f 94 c0\nc3\nb0 01\nc3\n31 c0\nc3\n'
p5164
S'.text:0000000000408230\n.text:0000000000408236\n.text:0000000000408239\n.text:000000000040823b\n.text:000000000040823e\n.text:0000000000408240\n.text:0000000000408247\n.text:000000000040824a\n.text:000000000040824b\n.text:000000000040824d\n.text:000000000040824e\n.text:0000000000408250\n'
p5165
tp5166
sS'hash_string'
p5167
(S'\n__stdcall hash_string(char * string, size_t n_buckets)\n'
p5168
V\u000asize_t hash_string(char *string,size_t n_buckets)\u000a\u000a{\u000a  byte bVar1;\u000a  ulong uVar2;\u000a  byte *pbVar3;\u000a  \u000a  bVar1 = *string;\u000a  if (bVar1 != 0) {\u000a    pbVar3 = (byte *)(string + 1);\u000a    uVar2 = 0;\u000a    do {\u000a      uVar2 = ((ulong)bVar1 + uVar2 * 0x1f) % n_buckets;\u000a      bVar1 = *pbVar3;\u000a      pbVar3 = pbVar3 + 1;\u000a    } while (bVar1 != 0);\u000a    return uVar2;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p5169
S'MOV AL,byte ptr [RDI]\nTEST AL,AL\nJZ 0x004107c3\nINC RDI\nXOR EDX,EDX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RCX,RDX\nSHL RCX,0x5\nSUB RCX,RDX\nMOVZX EAX,AL\nADD RAX,RCX\nXOR EDX,EDX\nDIV RSI\nMOVZX EAX,byte ptr [RDI]\nINC RDI\nTEST AL,AL\nJNZ 0x004107a0\nMOV RAX,RDX\nRET\nXOR EDX,EDX\nMOV RAX,RDX\nRET\n'
p5170
S'8a 07\n84 c0\n74 2d\n48 ff c7\n31 d2\n0f 1f 44 00 00\n48 89 d1\n48 c1 e1 05\n48 29 d1\n0f b6 c0\n48 01 c8\n31 d2\n48 f7 f6\n0f b6 07\n48 ff c7\n84 c0\n75 e1\n48 89 d0\nc3\n31 d2\n48 89 d0\nc3\n'
p5171
S'.text:0000000000410790\n.text:0000000000410792\n.text:0000000000410794\n.text:0000000000410796\n.text:0000000000410799\n.text:000000000041079b\n.text:00000000004107a0\n.text:00000000004107a3\n.text:00000000004107a7\n.text:00000000004107aa\n.text:00000000004107ad\n.text:00000000004107b0\n.text:00000000004107b2\n.text:00000000004107b5\n.text:00000000004107b8\n.text:00000000004107bb\n.text:00000000004107bd\n.text:00000000004107bf\n.text:00000000004107c2\n.text:00000000004107c3\n.text:00000000004107c5\n.text:00000000004107c8\n'
p5172
tp5173
sS'initialize_wd_for_exec'
p5174
(S'\n__stdcall initialize_wd_for_exec(exec_val * execp, char * dir)\n'
p5175
V\u000a_Bool initialize_wd_for_exec(exec_val *execp,char *dir)\u000a\u000a{\u000a  int iVar1;\u000a  saved_cwd *psVar2;\u000a  char *__file;\u000a  bool bVar3;\u000a  \u000a  psVar2 = (saved_cwd *)xmalloc(0x10);\u000a  execp->wd_for_exec = psVar2;\u000a  psVar2->name = (char *)0x0;\u000a  iVar1 = openat((int)dir,__file,0);\u000a  execp->wd_for_exec->desc = iVar1;\u000a  bVar3 = -1 < execp->wd_for_exec->desc;\u000a  if (bVar3) {\u000a    set_cloexec_flag();\u000a  }\u000a  return (_Bool)bVar3;\u000a}\u000a\u000a
p5176
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R15D,ESI\nMOV RBP,RDI\nMOV EDI,0x10\nCALL 0x00417220\nMOV qword ptr [0xc0 + RBP],RAX\nMOV qword ptr [RAX + 0x8],0x0\nXOR EBX,EBX\nXOR EDX,EDX\nXOR EAX,EAX\nMOV EDI,R15D\nMOV RSI,R14\nCALL 0x00402950\nMOV RCX,qword ptr [0xc0 + RBP]\nMOV dword ptr [RCX],EAX\nMOV RAX,qword ptr [0xc0 + RBP]\nMOV EDI,dword ptr [RAX]\nTEST EDI,EDI\nJS 0x004057ec\nMOV ESI,0x1\nCALL 0x0040fdd0\nMOV BL,0x1\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p5177
S'55\n41 57\n41 56\n53\n50\n49 89 d6\n41 89 f7\n48 89 fd\nbf 10 00 00 00\ne8 76 1a 01 00\n48 89 85 c0 00 00 00\n48 c7 40 08 00 00 00 00\n31 db\n31 d2\n31 c0\n44 89 ff\n4c 89 f6\ne8 86 d1 ff ff\n48 8b 8d c0 00 00 00\n89 01\n48 8b 85 c0 00 00 00\n8b 38\n85 ff\n78 0c\nbe 01 00 00 00\ne8 e6 a5 00 00\nb3 01\n89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p5178
S'.text:0000000000405790\n.text:0000000000405791\n.text:0000000000405793\n.text:0000000000405795\n.text:0000000000405796\n.text:0000000000405797\n.text:000000000040579a\n.text:000000000040579d\n.text:00000000004057a0\n.text:00000000004057a5\n.text:00000000004057aa\n.text:00000000004057b1\n.text:00000000004057b9\n.text:00000000004057bb\n.text:00000000004057bd\n.text:00000000004057bf\n.text:00000000004057c2\n.text:00000000004057c5\n.text:00000000004057ca\n.text:00000000004057d1\n.text:00000000004057d3\n.text:00000000004057da\n.text:00000000004057dc\n.text:00000000004057de\n.text:00000000004057e0\n.text:00000000004057e5\n.text:00000000004057ea\n.text:00000000004057ec\n.text:00000000004057ee\n.text:00000000004057f2\n.text:00000000004057f3\n.text:00000000004057f5\n.text:00000000004057f7\n.text:00000000004057f8\n'
p5179
tp5180
sS'cycle_check'
p5181
(S'\n__stdcall cycle_check(cycle_check_state * state, stat * sb)\n'
p5182
V\u000a_Bool cycle_check(cycle_check_state *state,stat *sb)\u000a\u000a{\u000a  undefined uVar1;\u000a  _Bool _Var2;\u000a  uintmax_t i;\u000a  \u000a  if (state->magic != 0x95f616) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("state->magic == 9827862","cycle-check.c",0x3c,\u000a                  "_Bool cycle_check(struct cycle_check_state *, const struct stat *)");\u000a  }\u000a  if (((state->chdir_counter == 0) || (sb->st_ino != (state->dev_ino).st_ino)) ||\u000a     (uVar1 = 1, sb->st_dev != (state->dev_ino).st_dev)) {\u000a    i = state->chdir_counter + 1;\u000a    state->chdir_counter = i;\u000a    _Var2 = is_zero_or_power_of_two(i);\u000a    if (_Var2 != false) {\u000a      if (i == 0) {\u000a        return true;\u000a      }\u000a      (state->dev_ino).st_dev = sb->st_dev;\u000a      (state->dev_ino).st_ino = sb->st_ino;\u000a    }\u000a    uVar1 = 0;\u000a  }\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p5183
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCMP dword ptr [R15 + 0x18],0x95f616\nJNZ 0x0041bb74\nMOV RBX,qword ptr [R15 + 0x10]\nTEST RBX,RBX\nJZ 0x0041bb42\nMOV RAX,qword ptr [R14 + 0x8]\nCMP RAX,qword ptr [R15]\nJNZ 0x0041bb42\nMOV RCX,qword ptr [R14]\nMOV AL,0x1\nCMP RCX,qword ptr [R15 + 0x8]\nJZ 0x0041bb6a\nINC RBX\nMOV qword ptr [R15 + 0x10],RBX\nMOV RDI,RBX\nCALL 0x0041bb90\nTEST AL,AL\nJZ 0x0041bb68\nTEST RBX,RBX\nJZ 0x0041bb70\nMOV RAX,qword ptr [R14]\nMOV qword ptr [R15 + 0x8],RAX\nMOV RAX,qword ptr [R14 + 0x8]\nMOV qword ptr [R15],RAX\nXOR EAX,EAX\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOV AL,0x1\nJMP 0x0041bb6a\nMOV EDI,0x425728\nMOV ESI,0x425740\nMOV EDX,0x3c\nMOV ECX,0x42574e\nCALL 0x00402a40\n'
p5184
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\n41 81 7f 18 16 f6 95 00\n75 4f\n49 8b 5f 10\n48 85 db\n74 14\n49 8b 46 08\n49 3b 07\n75 0b\n49 8b 0e\nb0 01\n49 3b 4f 08\n74 28\n48 ff c3\n49 89 5f 10\n48 89 df\ne8 3f 00 00 00\n84 c0\n74 13\n48 85 db\n74 16\n49 8b 06\n49 89 47 08\n49 8b 46 08\n49 89 07\n31 c0\n5b\n41 5e\n41 5f\nc3\nb0 01\neb f6\nbf 28 57 42 00\nbe 40 57 42 00\nba 3c 00 00 00\nb9 4e 57 42 00\ne8 b3 6e fe ff\n'
p5185
S'.text:000000000041bb10\n.text:000000000041bb12\n.text:000000000041bb14\n.text:000000000041bb15\n.text:000000000041bb18\n.text:000000000041bb1b\n.text:000000000041bb23\n.text:000000000041bb25\n.text:000000000041bb29\n.text:000000000041bb2c\n.text:000000000041bb2e\n.text:000000000041bb32\n.text:000000000041bb35\n.text:000000000041bb37\n.text:000000000041bb3a\n.text:000000000041bb3c\n.text:000000000041bb40\n.text:000000000041bb42\n.text:000000000041bb45\n.text:000000000041bb49\n.text:000000000041bb4c\n.text:000000000041bb51\n.text:000000000041bb53\n.text:000000000041bb55\n.text:000000000041bb58\n.text:000000000041bb5a\n.text:000000000041bb5d\n.text:000000000041bb61\n.text:000000000041bb65\n.text:000000000041bb68\n.text:000000000041bb6a\n.text:000000000041bb6b\n.text:000000000041bb6d\n.text:000000000041bb6f\n.text:000000000041bb70\n.text:000000000041bb72\n.text:000000000041bb74\n.text:000000000041bb79\n.text:000000000041bb7e\n.text:000000000041bb83\n.text:000000000041bb88\n'
p5186
tp5187
sS'insert_fprintf'
p5188
(S'\n__stdcall insert_fprintf(format_val * vec, parser_table * entry, char * format)\n'
p5189
V\u000a_Bool insert_fprintf(format_val *vec,parser_table *entry,char *format)\u000a\u000a{\u000a  undefined4 uVar1;\u000a  undefined4 uVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  undefined4 uVar6;\u000a  undefined4 uVar7;\u000a  _Bool _Var8;\u000a  char cVar9;\u000a  int iVar10;\u000a  predicate *ppVar11;\u000a  size_t sVar12;\u000a  void *pvVar13;\u000a  segment **segment;\u000a  undefined8 uVar14;\u000a  int iVar15;\u000a  char *p;\u000a  long lVar16;\u000a  int iVar17;\u000a  char *format_00;\u000a  size_t local_38;\u000a  \u000a  ppVar11 = insert_primary_withpred(entry,pred_fprintf,format);\u000a  *(undefined2 *)&ppVar11->side_effects = 0x101;\u000a  *(quoting_options **)(ppVar11->args + 0x20) = vec->quote_opts;\u000a  uVar1 = *(undefined4 *)&vec->segment;\u000a  uVar2 = *(undefined4 *)((long)&vec->segment + 4);\u000a  uVar4 = *(undefined4 *)&vec->stream;\u000a  uVar6 = *(undefined4 *)((long)&vec->stream + 4);\u000a  uVar3 = *(undefined4 *)((long)&vec->filename + 4);\u000a  uVar5 = *(undefined4 *)&vec->dest_is_tty;\u000a  uVar7 = *(undefined4 *)&vec->field_0x1c;\u000a  *(undefined4 *)(ppVar11->args + 0x10) = *(undefined4 *)&vec->filename;\u000a  *(undefined4 *)(ppVar11->args + 0x14) = uVar3;\u000a  *(undefined4 *)(ppVar11->args + 0x18) = uVar5;\u000a  *(undefined4 *)(ppVar11->args + 0x1c) = uVar7;\u000a  *(undefined4 *)ppVar11->args = uVar1;\u000a  *(undefined4 *)(ppVar11->args + 4) = uVar2;\u000a  *(undefined4 *)(ppVar11->args + 8) = uVar4;\u000a  *(undefined4 *)(ppVar11->args + 0xc) = uVar6;\u000a  ppVar11->need_type = false;\u000a  ppVar11->need_stat = false;\u000a  ppVar11->p_cost = NeedsNothing;\u000a  *(undefined8 *)ppVar11->args = 0;\u000a  segment = (segment **)ppVar11->args;\u000a  format_00 = format;\u000a  do {\u000a    cVar9 = *format;\u000a    iVar17 = (int)format_00;\u000a    if (cVar9 == '%') {\u000a      cVar9 = format[1];\u000a      if (cVar9 == 0) {\u000a        uVar14 = dcgettext(0,"error: %s at end of format string",5);\u000a        error(1,0,uVar14,format);\u000a        cVar9 = format[1];\u000a      }\u000a      if (cVar9 == '%') {\u000a        sVar12 = 1;\u000a      }\u000a      else {\u000a        sVar12 = get_format_flags_length(format);\u000a      }\u000a      format = format + sVar12;\u000a      sVar12 = get_format_specifer_length();\u000a      iVar15 = (int)format;\u000a      if ((sVar12 == 0) || (format[sVar12 - 1] == 0)) {\u000a        pvVar13 = memchr(&DAT_0041f7a2,(int)*format,4);\u000a        if (pvVar13 != (void *)0x0) {\u000a          uVar14 = dcgettext(0,"error: the format directive `%%%c\u005c' is reserved for future use",5);\u000a          error(1,0,uVar14,(ulong)(uint)(int)*format);\u000a        }\u000a        if ((sVar12 == 2) && (format[1] == 0)) {\u000a          p = "warning: format directive `%%%c\u005c' should be followed by another character";\u000a        }\u000a        else {\u000a          p = "warning: unrecognized format directive `%%%c\u005c'";\u000a        }\u000a        uVar14 = dcgettext(0,p,5);\u000a        error(0,0,uVar14,(ulong)(uint)(int)*format);\u000a        segment = make_segment(segment,format_00,(predicate *)(ulong)(uint)((iVar15 + 1) - iVar17));\u000a      }\u000a      else {\u000a        format = format + (sVar12 - 1);\u000a        segment = make_segment(segment,format_00,(predicate *)(ulong)(uint)(iVar15 - iVar17));\u000a      }\u000a      format_00 = format + 1;\u000a    }\u000a    else {\u000a      iVar15 = (int)format;\u000a      if (cVar9 == '\u005c\u005c') {\u000a        if (format[1] == 0) {\u000a          uVar14 = dcgettext(0,"warning: escape `\u005c\u005c\u005c' followed by nothing at all",5);\u000a          error(0,0,uVar14,uVar14);\u000a          lVar16 = 0;\u000a        }\u000a        else {\u000a          if (format[1] == 'c') {\u000a            make_segment(segment,format_00,(predicate *)(ulong)(uint)(iVar15 - iVar17));\u000a            if (ppVar11->need_stat == false) {\u000a              return true;\u000a            }\u000a            if (NeedsType < ppVar11->p_cost) {\u000a              return true;\u000a            }\u000a            ppVar11->p_cost = NeedsStatInfo;\u000a            return true;\u000a          }\u000a          p = format + 1;\u000a          _Var8 = is_octal_char();\u000a          if (_Var8 == false) {\u000a            iVar10 = parse_escape_char();\u000a            if ((char)iVar10 == 0) {\u000a              uVar14 = dcgettext(0,"warning: unrecognized escape `\u005c\u005c%c\u005c'",5);\u000a              error(0,0,uVar14,(ulong)(uint)(int)*p);\u000a              format = p;\u000a              goto LAB_00408ef0;\u000a            }\u000a            *format = (char)iVar10;\u000a            lVar16 = 1;\u000a          }\u000a          else {\u000a            local_38 = 0;\u000a            cVar9 = parse_octal_escape(p,&local_38);\u000a            *format = cVar9;\u000a            lVar16 = local_38 + 1;\u000a          }\u000a        }\u000a        segment = make_segment(segment,format_00,(predicate *)(ulong)(uint)((iVar15 + 1) - iVar17));\u000a        format_00 = format + lVar16 + 1;\u000a        format = format + lVar16;\u000a      }\u000a      else {\u000a        if (cVar9 == 0) {\u000a          if (format_00 < format) {\u000a            make_segment(segment,format_00,(predicate *)(ulong)(uint)(iVar15 - iVar17));\u000a          }\u000a          return true;\u000a        }\u000a      }\u000a    }\u000aLAB_00408ef0:\u000a    format = format + 1;\u000a  } while( true );\u000a}\u000a\u000a
p5190
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV RBX,RDX\nMOV RAX,RSI\nMOV RBP,RDI\nMOV ESI,0x4091c0\nMOV RDI,RAX\nCALL 0x004076f0\nMOV R14,RAX\nMOV word ptr [R14 + 0x18],0x101\nMOV RAX,qword ptr [RBP + 0x20]\nMOV qword ptr [R14 + 0x58],RAX\nMOVUPS XMM0,xmmword ptr [RBP]\nMOVUPS XMM1,xmmword ptr [RBP + 0x10]\nMOVUPS xmmword ptr [R14 + 0x48],XMM1\nMOVUPS xmmword ptr [R14 + 0x38],XMM0\nMOV byte ptr [R14 + 0x1b],0x0\nMOV byte ptr [R14 + 0x1a],0x0\nMOV dword ptr [R14 + 0x20],0x0\nMOV qword ptr [R14 + 0x38],0x0\nLEA R15,[R14 + 0x38]\nMOV R13,RBX\nJMP 0x00408ef6\nINC RBP\nMOV RBX,RBP\nMOVZX EAX,byte ptr [RBX]\nCMP AL,0x25\nJZ 0x00408f10\nCMP AL,0x5c\nJZ 0x00408f50\nTEST AL,AL\nJZ 0x0040914a\nMOV RBP,RBX\nJMP 0x00408ef0\nMOVZX EAX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJNZ 0x00408f44\nXOR EDI,EDI\nMOV ESI,0x41f780\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,RBX\nCALL 0x00402d90\nMOVZX EAX,byte ptr [RBX + 0x1]\nCMP AL,0x25\nJNZ 0x00408fa1\nMOV EAX,0x1\nJMP 0x00408fa9\nMOVZX EAX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x0040906d\nCMP AL,0x63\nJZ 0x0040916d\nLEA RBP,[RBX + 0x1]\nMOVSX R12D,AL\nMOV EDI,R12D\nCALL 0x004092d0\nTEST AL,AL\nJZ 0x00409094\nMOV qword ptr [RSP + 0x10],0x0\nMOV RDI,RBP\nLEA RSI,[RSP + 0x10]\nCALL 0x004092e0\nMOV byte ptr [RBX],AL\nMOV R12,qword ptr [RSP + 0x10]\nINC R12\nJMP 0x004090b0\nMOV RDI,RBX\nCALL 0x00409390\nLEA RBP,[RBX + RAX*0x1]\nMOVSX EDI,byte ptr [RBX + RAX*0x1]\nCALL 0x00409420\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00408fd7\nCMP byte ptr [RBP + RBX*0x1 + -0x1],0x0\nJZ 0x00408fd7\nCMP RBX,0x2\nJNZ 0x004090de\nMOV AL,byte ptr [RBP + 0x1]\nJMP 0x004090e0\nMOVSX ESI,byte ptr [RBP]\nMOV EDI,0x41f7a2\nMOV EDX,0x4\nCALL 0x00402b10\nTEST RAX,RAX\nJZ 0x00409015\nXOR EDI,EDI\nMOV ESI,0x41f7a6\nMOV EDX,0x5\nCALL 0x00402910\nMOV RDX,RAX\nMOVSX ECX,byte ptr [RBP]\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00402d90\nCMP RBX,0x2\nJNZ 0x00409025\nCMP byte ptr [RBP + 0x1],0x0\nJZ 0x00409116\nXOR EDI,EDI\nMOV ESI,0x41f82d\nMOV EDX,0x5\nCALL 0x00402910\nMOV RDX,RAX\nMOVSX ECX,byte ptr [RBP]\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00402d90\nLEA EDX,[RBP + 0x1]\nSUB EDX,R13D\nMOV qword ptr [RSP],R14\nXOR ECX,ECX\nXOR R8D,R8D\nXOR R9D,R9D\nMOV RDI,R15\nMOV RSI,R13\nCALL 0x00408c80\nMOV R15,RAX\nJMP 0x0040910d\nXOR EDI,EDI\nMOV ESI,0x41f72e\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402d90\nXOR R12D,R12D\nJMP 0x004090b0\nMOV EDI,R12D\nCALL 0x00409340\nTEST AL,AL\nJZ 0x00409122\nMOV byte ptr [RBX],AL\nMOV R12D,0x1\nNOP dword ptr [RAX]\nLEA EDX,[RBX + 0x1]\nSUB EDX,R13D\nMOV qword ptr [RSP],R14\nXOR ECX,ECX\nXOR R8D,R8D\nXOR R9D,R9D\nMOV RDI,R15\nMOV RSI,R13\nCALL 0x00408c80\nMOV R15,RAX\nLEA RBP,[RBX + R12*0x1]\nLEA R13,[RBX + R12*0x1 + 0x1]\nJMP 0x00408ef0\nXOR EAX,EAX\nLEA RBX,[RBP + RBX*0x1 + -0x1]\nMOV EDX,EBP\nSUB EDX,R13D\nMOVSX R8D,byte ptr [RBP]\nMOV qword ptr [RSP],R14\nMOVSX R9D,AL\nMOV ECX,0x2\nMOV RDI,R15\nMOV RSI,R13\nCALL 0x00408c80\nMOV R15,RAX\nMOV RBP,RBX\nLEA R13,[RBP + 0x1]\nJMP 0x00408ef0\nXOR EDI,EDI\nMOV ESI,0x41f7e4\nJMP 0x0040902c\nXOR EDI,EDI\nMOV ESI,0x41f75d\nMOV EDX,0x5\nCALL 0x00402910\nMOV RDX,RAX\nMOVSX ECX,byte ptr [RBP]\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00402d90\nJMP 0x00408ef0\nCMP RBX,R13\nJBE 0x004091a2\nSUB EBX,R13D\nMOV qword ptr [RSP],R14\nXOR ECX,ECX\nXOR R8D,R8D\nXOR R9D,R9D\nMOV RDI,R15\nMOV RSI,R13\nMOV EDX,EBX\nCALL 0x00408c80\nJMP 0x004091a2\nSUB EBX,R13D\nMOV qword ptr [RSP],R14\nMOV ECX,0x1\nXOR R8D,R8D\nXOR R9D,R9D\nMOV RDI,R15\nMOV RSI,R13\nMOV EDX,EBX\nCALL 0x00408c80\nCMP byte ptr [R14 + 0x1a],0x0\nJZ 0x004091a2\nCMP dword ptr [R14 + 0x20],0x2\nJA 0x004091a2\nMOV dword ptr [R14 + 0x20],0x3\nMOV AL,0x1\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p5191
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n48 89 d3\n48 89 f0\n48 89 fd\nbe c0 91 40 00\n48 89 c7\ne8 4c e8 ff ff\n49 89 c6\n66 41 c7 46 18 01 01\n48 8b 45 20\n49 89 46 58\n0f 10 45 00\n0f 10 4d 10\n41 0f 11 4e 48\n41 0f 11 46 38\n41 c6 46 1b 00\n41 c6 46 1a 00\n41 c7 46 20 00 00 00 00\n49 c7 46 38 00 00 00 00\n4d 8d 7e 38\n49 89 dd\neb 0b\n48 ff c5\n48 89 eb\n0f b6 03\n3c 25\n74 13\n3c 5c\n74 4f\n84 c0\n0f 84 41 02 00 00\n48 89 dd\neb e2\n0f b6 43 01\n84 c0\n75 2c\n31 ff\nbe 80 f7 41 00\nba 05 00 00 00\ne8 e7 99 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\n48 89 d9\ne8 50 9e ff ff\n0f b6 43 01\n3c 25\n75 59\nb8 01 00 00 00\neb 5a\n0f b6 43 01\n84 c0\n0f 84 11 01 00 00\n3c 63\n0f 84 09 02 00 00\n48 8d 6b 01\n44 0f be e0\n44 89 e7\ne8 5c 03 00 00\n84 c0\n0f 84 18 01 00 00\n48 c7 44 24 10 00 00 00 00\n48 89 ef\n48 8d 74 24 10\ne8 4e 03 00 00\n88 03\n4c 8b 64 24 10\n49 ff c4\ne9 0f 01 00 00\n48 89 df\ne8 e7 03 00 00\n48 8d 2c 03\n0f be 3c 03\ne8 6a 04 00 00\n48 89 c3\n48 85 db\n74 19\n80 7c 1d ff 00\n74 12\n48 83 fb 02\n0f 85 0f 01 00 00\n8a 45 01\ne9 09 01 00 00\n0f be 75 00\nbf a2 f7 41 00\nba 04 00 00 00\ne8 26 9b ff ff\n48 85 c0\n74 26\n31 ff\nbe a6 f7 41 00\nba 05 00 00 00\ne8 10 99 ff ff\n48 89 c2\n0f be 4d 00\nbf 01 00 00 00\n31 f6\n31 c0\ne8 7b 9d ff ff\n48 83 fb 02\n75 0a\n80 7d 01 00\n0f 84 f1 00 00 00\n31 ff\nbe 2d f8 41 00\nba 05 00 00 00\ne8 da 98 ff ff\n48 89 c2\n0f be 4d 00\n31 ff\n31 f6\n31 c0\ne8 48 9d ff ff\n8d 55 01\n44 29 ea\n4c 89 34 24\n31 c9\n45 31 c0\n45 31 c9\n4c 89 ff\n4c 89 ee\ne8 1b fc ff ff\n49 89 c7\ne9 a0 00 00 00\n31 ff\nbe 2e f7 41 00\nba 05 00 00 00\ne8 92 98 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 01 9d ff ff\n45 31 e4\neb 1c\n44 89 e7\ne8 a4 02 00 00\n84 c0\n0f 84 7e 00 00 00\n88 03\n41 bc 01 00 00 00\n0f 1f 40 00\n8d 53 01\n44 29 ea\n4c 89 34 24\n31 c9\n45 31 c0\n45 31 c9\n4c 89 ff\n4c 89 ee\ne8 b3 fb ff ff\n49 89 c7\n4a 8d 2c 23\n4e 8d 6c 23 01\ne9 12 fe ff ff\n31 c0\n48 8d 5c 1d ff\n89 ea\n44 29 ea\n44 0f be 45 00\n4c 89 34 24\n44 0f be c8\nb9 02 00 00 00\n4c 89 ff\n4c 89 ee\ne8 79 fb ff ff\n49 89 c7\n48 89 dd\n4c 8d 6d 01\ne9 da fd ff ff\n31 ff\nbe e4 f7 41 00\ne9 0a ff ff ff\n31 ff\nbe 5d f7 41 00\nba 05 00 00 00\ne8 dd 97 ff ff\n48 89 c2\n0f be 4d 00\n31 ff\n31 f6\n31 c0\ne8 4b 9c ff ff\ne9 a6 fd ff ff\n4c 39 eb\n76 53\n44 29 eb\n4c 89 34 24\n31 c9\n45 31 c0\n45 31 c9\n4c 89 ff\n4c 89 ee\n89 da\ne8 15 fb ff ff\neb 35\n44 29 eb\n4c 89 34 24\nb9 01 00 00 00\n45 31 c0\n45 31 c9\n4c 89 ff\n4c 89 ee\n89 da\ne8 f4 fa ff ff\n41 80 7e 1a 00\n74 0f\n41 83 7e 20 02\n77 08\n41 c7 46 20 03 00 00 00\nb0 01\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p5192
S'.text:0000000000408e80\n.text:0000000000408e81\n.text:0000000000408e83\n.text:0000000000408e85\n.text:0000000000408e87\n.text:0000000000408e89\n.text:0000000000408e8a\n.text:0000000000408e8e\n.text:0000000000408e91\n.text:0000000000408e94\n.text:0000000000408e97\n.text:0000000000408e9c\n.text:0000000000408e9f\n.text:0000000000408ea4\n.text:0000000000408ea7\n.text:0000000000408eae\n.text:0000000000408eb2\n.text:0000000000408eb6\n.text:0000000000408eba\n.text:0000000000408ebe\n.text:0000000000408ec3\n.text:0000000000408ec8\n.text:0000000000408ecd\n.text:0000000000408ed2\n.text:0000000000408eda\n.text:0000000000408ee2\n.text:0000000000408ee6\n.text:0000000000408ee9\n.text:0000000000408ef0\n.text:0000000000408ef3\n.text:0000000000408ef6\n.text:0000000000408ef9\n.text:0000000000408efb\n.text:0000000000408efd\n.text:0000000000408eff\n.text:0000000000408f01\n.text:0000000000408f03\n.text:0000000000408f09\n.text:0000000000408f0c\n.text:0000000000408f10\n.text:0000000000408f14\n.text:0000000000408f16\n.text:0000000000408f18\n.text:0000000000408f1a\n.text:0000000000408f1f\n.text:0000000000408f24\n.text:0000000000408f29\n.text:0000000000408f2c\n.text:0000000000408f31\n.text:0000000000408f33\n.text:0000000000408f35\n.text:0000000000408f38\n.text:0000000000408f3b\n.text:0000000000408f40\n.text:0000000000408f44\n.text:0000000000408f46\n.text:0000000000408f48\n.text:0000000000408f4d\n.text:0000000000408f50\n.text:0000000000408f54\n.text:0000000000408f56\n.text:0000000000408f5c\n.text:0000000000408f5e\n.text:0000000000408f64\n.text:0000000000408f68\n.text:0000000000408f6c\n.text:0000000000408f6f\n.text:0000000000408f74\n.text:0000000000408f76\n.text:0000000000408f7c\n.text:0000000000408f85\n.text:0000000000408f88\n.text:0000000000408f8d\n.text:0000000000408f92\n.text:0000000000408f94\n.text:0000000000408f99\n.text:0000000000408f9c\n.text:0000000000408fa1\n.text:0000000000408fa4\n.text:0000000000408fa9\n.text:0000000000408fad\n.text:0000000000408fb1\n.text:0000000000408fb6\n.text:0000000000408fb9\n.text:0000000000408fbc\n.text:0000000000408fbe\n.text:0000000000408fc3\n.text:0000000000408fc5\n.text:0000000000408fc9\n.text:0000000000408fcf\n.text:0000000000408fd2\n.text:0000000000408fd7\n.text:0000000000408fdb\n.text:0000000000408fe0\n.text:0000000000408fe5\n.text:0000000000408fea\n.text:0000000000408fed\n.text:0000000000408fef\n.text:0000000000408ff1\n.text:0000000000408ff6\n.text:0000000000408ffb\n.text:0000000000409000\n.text:0000000000409003\n.text:0000000000409007\n.text:000000000040900c\n.text:000000000040900e\n.text:0000000000409010\n.text:0000000000409015\n.text:0000000000409019\n.text:000000000040901b\n.text:000000000040901f\n.text:0000000000409025\n.text:0000000000409027\n.text:000000000040902c\n.text:0000000000409031\n.text:0000000000409036\n.text:0000000000409039\n.text:000000000040903d\n.text:000000000040903f\n.text:0000000000409041\n.text:0000000000409043\n.text:0000000000409048\n.text:000000000040904b\n.text:000000000040904e\n.text:0000000000409052\n.text:0000000000409054\n.text:0000000000409057\n.text:000000000040905a\n.text:000000000040905d\n.text:0000000000409060\n.text:0000000000409065\n.text:0000000000409068\n.text:000000000040906d\n.text:000000000040906f\n.text:0000000000409074\n.text:0000000000409079\n.text:000000000040907e\n.text:0000000000409081\n.text:0000000000409083\n.text:0000000000409085\n.text:0000000000409087\n.text:000000000040908a\n.text:000000000040908f\n.text:0000000000409092\n.text:0000000000409094\n.text:0000000000409097\n.text:000000000040909c\n.text:000000000040909e\n.text:00000000004090a4\n.text:00000000004090a6\n.text:00000000004090ac\n.text:00000000004090b0\n.text:00000000004090b3\n.text:00000000004090b6\n.text:00000000004090ba\n.text:00000000004090bc\n.text:00000000004090bf\n.text:00000000004090c2\n.text:00000000004090c5\n.text:00000000004090c8\n.text:00000000004090cd\n.text:00000000004090d0\n.text:00000000004090d4\n.text:00000000004090d9\n.text:00000000004090de\n.text:00000000004090e0\n.text:00000000004090e5\n.text:00000000004090e7\n.text:00000000004090ea\n.text:00000000004090ef\n.text:00000000004090f3\n.text:00000000004090f7\n.text:00000000004090fc\n.text:00000000004090ff\n.text:0000000000409102\n.text:0000000000409107\n.text:000000000040910a\n.text:000000000040910d\n.text:0000000000409111\n.text:0000000000409116\n.text:0000000000409118\n.text:000000000040911d\n.text:0000000000409122\n.text:0000000000409124\n.text:0000000000409129\n.text:000000000040912e\n.text:0000000000409133\n.text:0000000000409136\n.text:000000000040913a\n.text:000000000040913c\n.text:000000000040913e\n.text:0000000000409140\n.text:0000000000409145\n.text:000000000040914a\n.text:000000000040914d\n.text:000000000040914f\n.text:0000000000409152\n.text:0000000000409156\n.text:0000000000409158\n.text:000000000040915b\n.text:000000000040915e\n.text:0000000000409161\n.text:0000000000409164\n.text:0000000000409166\n.text:000000000040916b\n.text:000000000040916d\n.text:0000000000409170\n.text:0000000000409174\n.text:0000000000409179\n.text:000000000040917c\n.text:000000000040917f\n.text:0000000000409182\n.text:0000000000409185\n.text:0000000000409187\n.text:000000000040918c\n.text:0000000000409191\n.text:0000000000409193\n.text:0000000000409198\n.text:000000000040919a\n.text:00000000004091a2\n.text:00000000004091a4\n.text:00000000004091a8\n.text:00000000004091a9\n.text:00000000004091ab\n.text:00000000004091ad\n.text:00000000004091af\n.text:00000000004091b1\n.text:00000000004091b2\n'
p5193
tp5194
sS'get_new_pred'
p5195
(S'\n__stdcall get_new_pred(parser_table * entry)\n'
p5196
V\u000apredicate * get_new_pred(parser_table *entry)\u000a\u000a{\u000a  predicate *pred;\u000a  predicate **pppVar1;\u000a  \u000a  if (entry->type == ARG_POSITIONAL_OPTION) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("entry->type != ARG_POSITIONAL_OPTION","tree.c",0x5c8,\u000a                  "struct predicate *get_new_pred(const struct parser_table *)");\u000a  }\u000a  if (entry->type != ARG_OPTION) {\u000a    pred = (predicate *)xzalloc(0x138);\u000a    pppVar1 = &last_pred->pred_next;\u000a    if (predicates == (predicate *)0x0) {\u000a      pppVar1 = &predicates;\u000a    }\u000a    *pppVar1 = pred;\u000a    last_pred = pred;\u000a    pred->parser_entry = entry;\u000a    pred->p_type = NO_TYPE;\u000a    pred->p_prec = NO_PREC;\u000a    pred->need_stat = true;\u000a    pred->need_type = true;\u000a    pred->p_cost = NeedsUnknown;\u000a    pred->arg_text = "ThisShouldBeSetToSomethingElse";\u000a    pred->literal_control_chars = options.literal_control_chars;\u000a    pred->est_success_rate = 1.00000000;\u000a    init_pred_perf(pred);\u000a    return last_pred;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("entry->type != ARG_OPTION","tree.c",0x5c7,\u000a                "struct predicate *get_new_pred(const struct parser_table *)");\u000a}\u000a\u000a
p5197
S'PUSH RBX\nMOV RBX,RDI\nMOV EAX,dword ptr [RBX]\nCMP EAX,0x2\nJZ 0x00406bb5\nTEST EAX,EAX\nJZ 0x00406bce\nMOV EDI,0x138\nCALL 0x00417310\nMOV ECX,0x62dea0\nMOV EDX,0x108\nADD RDX,qword ptr [0x0062dea8]\nCMP qword ptr [0x0062dea0],0x0\nCMOVZ RDX,RCX\nMOV qword ptr [RDX],RAX\nMOV qword ptr [0x0062dea8],RAX\nMOV qword ptr [0x130 + RAX],RBX\nMOV dword ptr [RAX + 0x10],0x0\nMOV dword ptr [RAX + 0x14],0x0\nMOV byte ptr [RAX + 0x1a],0x1\nMOV byte ptr [RAX + 0x1b],0x1\nMOV dword ptr [RAX + 0x20],0xa\nMOV qword ptr [RAX + 0x30],0x41d739\nMOV CL,byte ptr [0x0062f04f]\nMOV byte ptr [RAX + 0x28],CL\nMOV dword ptr [RAX + 0x24],0x3f800000\nMOV RDI,RAX\nCALL 0x00406bf0\nMOV RAX,qword ptr [0x0062dea8]\nPOP RBX\nRET\nMOV EDI,0x41d0eb\nMOV ESI,0x41d4d0\nMOV EDX,0x5c8\nMOV ECX,0x41d6fd\nCALL 0x00402a40\nMOV EDI,0x41d0c7\nMOV ESI,0x41d4d0\nMOV EDX,0x5c7\nMOV ECX,0x41d6fd\nCALL 0x00402a40\n'
p5198
S'53\n48 89 fb\n8b 03\n83 f8 02\n0f 84 86 00 00 00\n85 c0\n0f 84 97 00 00 00\nbf 38 01 00 00\ne8 cf 07 01 00\nb9 a0 de 62 00\nba 08 01 00 00\n48 03 15 56 73 22 00\n48 83 3d 46 73 22 00 00\n48 0f 44 d1\n48 89 02\n48 89 05 40 73 22 00\n48 89 98 30 01 00 00\nc7 40 10 00 00 00 00\nc7 40 14 00 00 00 00\nc6 40 1a 01\nc6 40 1b 01\nc7 40 20 0a 00 00 00\n48 c7 40 30 39 d7 41 00\n8a 0d b5 84 22 00\n88 48 28\nc7 40 24 00 00 80 3f\n48 89 c7\ne8 44 00 00 00\n48 8b 05 f5 72 22 00\n5b\nc3\nbf eb d0 41 00\nbe d0 d4 41 00\nba c8 05 00 00\nb9 fd d6 41 00\ne8 72 be ff ff\nbf c7 d0 41 00\nbe d0 d4 41 00\nba c7 05 00 00\nb9 fd d6 41 00\ne8 59 be ff ff\n'
p5199
S'.text:0000000000406b20\n.text:0000000000406b21\n.text:0000000000406b24\n.text:0000000000406b26\n.text:0000000000406b29\n.text:0000000000406b2f\n.text:0000000000406b31\n.text:0000000000406b37\n.text:0000000000406b3c\n.text:0000000000406b41\n.text:0000000000406b46\n.text:0000000000406b4b\n.text:0000000000406b52\n.text:0000000000406b5a\n.text:0000000000406b5e\n.text:0000000000406b61\n.text:0000000000406b68\n.text:0000000000406b6f\n.text:0000000000406b76\n.text:0000000000406b7d\n.text:0000000000406b81\n.text:0000000000406b85\n.text:0000000000406b8c\n.text:0000000000406b94\n.text:0000000000406b9a\n.text:0000000000406b9d\n.text:0000000000406ba4\n.text:0000000000406ba7\n.text:0000000000406bac\n.text:0000000000406bb3\n.text:0000000000406bb4\n.text:0000000000406bb5\n.text:0000000000406bba\n.text:0000000000406bbf\n.text:0000000000406bc4\n.text:0000000000406bc9\n.text:0000000000406bce\n.text:0000000000406bd3\n.text:0000000000406bd8\n.text:0000000000406bdd\n.text:0000000000406be2\n'
p5200
tp5201
sS'argmatch_invalid'
p5202
(S'\n__stdcall argmatch_invalid(char * context, char * value, ptrdiff_t problem)\n'
p5203
V\u000avoid argmatch_invalid(char *context,char *value,ptrdiff_t problem)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  \u000a  pcVar2 = "ambiguous argument %s for %s";\u000a  if (problem == -1) {\u000a    pcVar2 = "invalid argument %s for %s";\u000a  }\u000a  uVar1 = dcgettext(0,pcVar2,5);\u000a  pcVar2 = quotearg_n_style((char *)0x0);\u000a  pcVar3 = quote_n((char *)0x1);\u000a  error(0,0,uVar1,pcVar2,pcVar3);\u000a  return;\u000a}\u000a\u000a
p5204
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RSI\nMOV R14,RDI\nCMP RDX,-0x1\nMOV EAX,0x4253d8\nMOV ESI,0x4253f3\nCMOVZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00402910\nMOV R12,RAX\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,R15\nCALL 0x00416290\nMOV R15,RAX\nMOV EDI,0x1\nMOV RSI,R14\nCALL 0x00416580\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R12\nMOV RCX,R15\nMOV R8,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00402d90\n'
p5205
S'41 57\n41 56\n41 54\n53\n50\n49 89 f7\n49 89 fe\n48 83 fa ff\nb8 d8 53 42 00\nbe f3 53 42 00\n48 0f 44 f0\n31 ff\nba 05 00 00 00\ne8 c4 72 fe ff\n49 89 c4\n31 ff\nbe 08 00 00 00\n4c 89 fa\ne8 32 ac ff ff\n49 89 c7\nbf 01 00 00 00\n4c 89 f6\ne8 12 af ff ff\n48 89 c3\n31 ff\n31 f6\n31 c0\n4c 89 e2\n4c 89 f9\n49 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 00 77 fe ff\n'
p5206
S'.text:000000000041b620\n.text:000000000041b622\n.text:000000000041b624\n.text:000000000041b626\n.text:000000000041b627\n.text:000000000041b628\n.text:000000000041b62b\n.text:000000000041b62e\n.text:000000000041b632\n.text:000000000041b637\n.text:000000000041b63c\n.text:000000000041b640\n.text:000000000041b642\n.text:000000000041b647\n.text:000000000041b64c\n.text:000000000041b64f\n.text:000000000041b651\n.text:000000000041b656\n.text:000000000041b659\n.text:000000000041b65e\n.text:000000000041b661\n.text:000000000041b666\n.text:000000000041b669\n.text:000000000041b66e\n.text:000000000041b671\n.text:000000000041b673\n.text:000000000041b675\n.text:000000000041b677\n.text:000000000041b67a\n.text:000000000041b67d\n.text:000000000041b680\n.text:000000000041b684\n.text:000000000041b685\n.text:000000000041b687\n.text:000000000041b689\n.text:000000000041b68b\n'
p5207
tp5208
sS'scan_rest'
p5209
(S'\n__stdcall scan_rest(predicate * * input, predicate * head)\n'
p5210
V\u000apredicate * scan_rest(predicate **input,predicate *head)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  predicate *ppVar2;\u000a  short in_DX;\u000a  \u000a  if ((*input == (predicate *)0x0) || ((*input)->p_type == CLOSE_PAREN)) {\u000a    head = (predicate *)0x0;\u000a  }\u000a  else {\u000a    ppVar2 = *input;\u000a    if (ppVar2 != (predicate *)0x0) {\u000a      do {\u000a        if (ppVar2->p_prec == (int)in_DX || (int)ppVar2->p_prec < (int)in_DX) {\u000a          return head;\u000a        }\u000a        switch(ppVar2->p_type) {\u000a        case NO_TYPE:\u000a        case PRIMARY_TYPE:\u000a        case UNI_OP:\u000a        case OPEN_PAREN:\u000a          uVar1 = dcgettext(0,"invalid expression",5);\u000a          error(1,0,uVar1,uVar1);\u000a          break;\u000a        case BI_OP:\u000a          ppVar2->pred_left = head;\u000a          head = *input;\u000a          *input = head->pred_next;\u000a          ppVar2 = get_expr(input,(predicate *)(ulong)(uint)(int)*(short *)&head->p_prec);\u000a          head->pred_right = ppVar2;\u000a          break;\u000a        case CLOSE_PAREN:\u000a          goto switchD_00406dd9_caseD_5;\u000a        default:\u000a          uVar1 = dcgettext(0,"oops -- invalid expression type (%d)!",5);\u000a          error(1,0,uVar1,(ulong)(*input)->p_type);\u000a        }\u000a        ppVar2 = *input;\u000a      } while (ppVar2 != (predicate *)0x0);\u000a    }\u000a  }\u000aswitchD_00406dd9_caseD_5:\u000a  return head;\u000a}\u000a\u000a
p5211
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [RBX]\nTEST RCX,RCX\nJZ 0x00406daa\nCMP dword ptr [RCX + 0x10],0x5\nJNZ 0x00406db5\nXOR R14D,R14D\nMOV RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\nMOV RDX,qword ptr [RBX]\nTEST RDX,RDX\nJZ 0x00406dad\nMOVSX EBP,AX\nJMP 0x00406e70\nMOV EAX,dword ptr [RDX + 0x10]\nCMP RAX,0x5\nJA 0x00406e07\nJMP qword ptr [0x41d3b0 + RAX*0x8]\nXOR EDI,EDI\nMOV ESI,0x41d8f8\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402d90\nJMP 0x00406e30\nXOR EDI,EDI\nMOV ESI,0x41daec\nMOV EDX,0x5\nCALL 0x00402910\nMOV RDX,RAX\nMOV RAX,qword ptr [RBX]\nMOV ECX,dword ptr [RAX + 0x10]\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00402d90\nNOP\nMOV RDX,qword ptr [RBX]\nTEST RDX,RDX\nJNZ 0x00406e70\nJMP 0x00406dad\nMOV qword ptr [0x110 + RDX],R14\nMOV R14,qword ptr [RBX]\nMOV RAX,qword ptr [0x108 + R14]\nMOV qword ptr [RBX],RAX\nMOVSX ESI,word ptr [R14 + 0x14]\nMOV RDI,RBX\nCALL 0x00406160\nMOV qword ptr [0x118 + R14],RAX\nJMP 0x00406e30\nCMP dword ptr [RDX + 0x14],EBP\nJG 0x00406dd0\nJMP 0x00406dad\n'
p5212
S'55\n41 56\n53\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0b\n48 85 c9\n74 06\n83 79 10 05\n75 0b\n45 31 f6\n4c 89 f0\n5b\n41 5e\n5d\nc3\n48 8b 13\n48 85 d2\n74 f0\n0f bf e8\ne9 ab 00 00 00\n8b 42 10\n48 83 f8 05\n77 2e\nff 24 c5 b0 d3 41 00\n31 ff\nbe f8 d8 41 00\nba 05 00 00 00\ne8 1f bb ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 8b bf ff ff\neb 29\n31 ff\nbe ec da 41 00\nba 05 00 00 00\ne8 f8 ba ff ff\n48 89 c2\n48 8b 03\n8b 48 10\nbf 01 00 00 00\n31 f6\n31 c0\ne8 61 bf ff ff\n90\n48 8b 13\n48 85 d2\n75 38\ne9 70 ff ff ff\n4c 89 b2 10 01 00 00\n4c 8b 33\n49 8b 86 08 01 00 00\n48 89 03\n41 0f bf 76 14\n48 89 df\ne8 02 f3 ff ff\n49 89 86 18 01 00 00\neb c9\n39 6a 14\n0f 8f 57 ff ff ff\ne9 2f ff ff ff\n'
p5213
S'.text:0000000000406d90\n.text:0000000000406d91\n.text:0000000000406d93\n.text:0000000000406d94\n.text:0000000000406d96\n.text:0000000000406d99\n.text:0000000000406d9c\n.text:0000000000406d9f\n.text:0000000000406da2\n.text:0000000000406da4\n.text:0000000000406da8\n.text:0000000000406daa\n.text:0000000000406dad\n.text:0000000000406db0\n.text:0000000000406db1\n.text:0000000000406db3\n.text:0000000000406db4\n.text:0000000000406db5\n.text:0000000000406db8\n.text:0000000000406dbb\n.text:0000000000406dbd\n.text:0000000000406dc0\n.text:0000000000406dd0\n.text:0000000000406dd3\n.text:0000000000406dd7\n.text:0000000000406dd9\n.text:0000000000406de0\n.text:0000000000406de2\n.text:0000000000406de7\n.text:0000000000406dec\n.text:0000000000406df1\n.text:0000000000406df4\n.text:0000000000406df9\n.text:0000000000406dfb\n.text:0000000000406dfd\n.text:0000000000406e00\n.text:0000000000406e05\n.text:0000000000406e07\n.text:0000000000406e09\n.text:0000000000406e0e\n.text:0000000000406e13\n.text:0000000000406e18\n.text:0000000000406e1b\n.text:0000000000406e1e\n.text:0000000000406e21\n.text:0000000000406e26\n.text:0000000000406e28\n.text:0000000000406e2a\n.text:0000000000406e2f\n.text:0000000000406e30\n.text:0000000000406e33\n.text:0000000000406e36\n.text:0000000000406e38\n.text:0000000000406e3d\n.text:0000000000406e44\n.text:0000000000406e47\n.text:0000000000406e4e\n.text:0000000000406e51\n.text:0000000000406e56\n.text:0000000000406e59\n.text:0000000000406e5e\n.text:0000000000406e65\n.text:0000000000406e70\n.text:0000000000406e73\n.text:0000000000406e79\n'
p5214
tp5215
sS'fts_build'
p5216
(S'\n__stdcall fts_build(FTS * sp)\n'
p5217
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000aFTSENT * fts_build(FTS *sp)\u000a\u000a{\u000a  ulong uVar1;\u000a  byte *pbVar2;\u000a  char cVar3;\u000a  DIR *__dirp;\u000a  size_t sVar4;\u000a  int (*pVar5)(_ftsent **,_ftsent **);\u000a  byte bVar6;\u000a  bool bVar7;\u000a  FTSENT *pFVar8;\u000a  _Bool _Var9;\u000a  unsigned_short uVar10;\u000a  int iVar11;\u000a  DIR *__dirp_00;\u000a  int *piVar12;\u000a  dirent *pdVar13;\u000a  size_t namelen;\u000a  FTSENT *p;\u000a  FTSENT *head;\u000a  FTSENT *ent;\u000a  size_t sVar14;\u000a  long lVar15;\u000a  ulong nitems;\u000a  int in_ESI;\u000a  char *dir;\u000a  uint local_ac;\u000a  char *local_a0;\u000a  FTSENT *local_58;\u000a  ulong local_50;\u000a  \u000a  ent = (FTSENT *)sp->fts_cur;\u000a  __dirp = (DIR *)ent->fts_dirp;\u000a  if (__dirp == (DIR *)0x0) {\u000a    dir = (char *)0xffffff9c;\u000a    if ((sp->fts_options & 0x204U) == 0x200) {\u000a      dir = (char *)(ulong)(uint)sp->fts_cwd_fd;\u000a    }\u000a    __dirp_00 = opendirat(dir,(int *)ent->fts_accpath);\u000a    ent->fts_dirp = __dirp_00;\u000a    if (__dirp_00 == (DIR *)0x0) goto joined_r0x004192bf;\u000a    if (ent->fts_info == 0xb) {\u000a      uVar10 = fts_stat(sp,ent);\u000a      ent->fts_info = uVar10;\u000a    }\u000a    else {\u000a      if ((*(byte *)((long)&sp->fts_options + 1) & 1) != 0) {\u000a        leave_dir(sp,ent);\u000a        fts_stat(sp,ent);\u000a        _Var9 = enter_dir(sp,ent);\u000a        if (_Var9 == false) {\u000a          piVar12 = __errno_location();\u000a          *piVar12 = 0xc;\u000a          return (FTSENT *)0;\u000a        }\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    local_ac = dirfd(__dirp);\u000a    if ((int)local_ac < 0) {\u000a      closedir((DIR *)ent->fts_dirp);\u000a      ent->fts_dirp = (DIR *)0x0;\u000ajoined_r0x004192bf:\u000a      if (in_ESI == 3) {\u000a        ent->fts_info = 4;\u000a        piVar12 = __errno_location();\u000a        ent->fts_errno = *piVar12;\u000a      }\u000a      return (FTSENT *)0x0;\u000a    }\u000a  }\u000a  pVar5 = sp->fts_compar;\u000a  if (in_ESI == 2) {\u000a    lVar15 = 0;\u000a    if (__dirp != (DIR *)0x0) goto LAB_00419355;\u000aLAB_0041935d:\u000a    bVar6 = 1;\u000a    if ((in_ESI == 3) || (lVar15 != 0)) {\u000a      if ((*(byte *)((long)&sp->fts_options + 1) & 2) == 0) {\u000aLAB_00419392:\u000a        if ((-1 < (int)local_ac) &&\u000a           (iVar11 = fts_safe_changedir(sp,ent,(char *)(ulong)local_ac), iVar11 == 0))\u000a        goto LAB_00419355;\u000a      }\u000a      else {\u000a        local_ac = dup_safer();\u000a        if (-1 < (int)local_ac) {\u000a          set_cloexec_flag();\u000a          goto LAB_00419392;\u000a        }\u000a      }\u000a      if ((in_ESI == 3) && (lVar15 != 0)) {\u000a        piVar12 = __errno_location();\u000a        ent->fts_errno = *piVar12;\u000a      }\u000a      *(byte *)&ent->fts_flags = *(byte *)&ent->fts_flags | 1;\u000a      closedir((DIR *)ent->fts_dirp);\u000a      ent->fts_dirp = (DIR *)0x0;\u000a      if (((sp->fts_options & 0x200U) != 0) && (-1 < (int)local_ac)) {\u000a        close(local_ac);\u000a      }\u000a      ent->fts_dirp = (DIR *)0x0;\u000a    }\u000a  }\u000a  else {\u000a    lVar15 = -1;\u000a    if ((sp->fts_options & 0x18U) == 0x18) {\u000a      lVar15 = ent->fts_statp[0].st_nlink - (ulong)(~((uint)sp->fts_options >> 4) & 2);\u000a    }\u000a    if (__dirp == (DIR *)0x0) goto LAB_0041935d;\u000aLAB_00419355:\u000a    bVar6 = 0;\u000a  }\u000a  sVar4 = ent->fts_pathlen;\u000a  sVar14 = sVar4 - 1;\u000a  if (ent->fts_path[sVar4 - 1] != '/') {\u000a    sVar14 = sVar4;\u000a  }\u000a  if ((*(byte *)&sp->fts_options & 4) == 0) {\u000a    local_a0 = (char *)0x0;\u000a  }\u000a  else {\u000a    local_a0 = sp->fts_path + sVar14 + 1;\u000a    sp->fts_path[sVar14] = '/';\u000a  }\u000a  uVar1 = sVar14 + 1;\u000a  local_50 = sp->fts_pathlen - uVar1;\u000a  lVar15 = ent->fts_level;\u000a  bVar7 = false;\u000a  local_58 = (FTSENT *)0x0;\u000a  nitems = 0;\u000a  head = (FTSENT *)0x0;\u000a  do {\u000a    __dirp_00 = ent->fts_dirp;\u000a    if (__dirp_00 == (DIR *)0x0) {\u000a      if (!bVar7) goto LAB_0041974f;\u000a      goto LAB_00419744;\u000a    }\u000a    while( true ) {\u000a      piVar12 = __errno_location();\u000a      *piVar12 = 0;\u000a      pdVar13 = readdir((DIR *)__dirp_00);\u000a      if (pdVar13 == (dirent *)0x0) {\u000a        if (*piVar12 != 0) {\u000a          ent->fts_errno = *piVar12;\u000a          uVar10 = 4;\u000a          if (((ulong)__dirp | nitems) != 0) {\u000a            uVar10 = 7;\u000a          }\u000a          ent->fts_info = uVar10;\u000a        }\u000a        if ((DIR *)ent->fts_dirp != (DIR *)0x0) {\u000a          closedir((DIR *)ent->fts_dirp);\u000a          ent->fts_dirp = (DIR *)0x0;\u000a        }\u000a        if (bVar7) goto LAB_00419744;\u000a        goto LAB_0041974f;\u000a      }\u000a      if (((*(byte *)&sp->fts_options & 0x20) != 0) || (pdVar13->d_name[0] != '.')) break;\u000a      cVar3 = pdVar13->d_name[1];\u000a      if (cVar3 == '.') {\u000a        cVar3 = pdVar13->d_name[2];\u000a      }\u000a      if (cVar3 != 0) break;\u000a      __dirp_00 = ent->fts_dirp;\u000a      if (__dirp_00 == (DIR *)0x0) goto LAB_0041973d;\u000a    }\u000a    namelen = strlen(pdVar13->d_name);\u000a    p = fts_alloc(sp,pdVar13->d_name,namelen);\u000a    if (p == (FTSENT *)0x0) {\u000aLAB_004198a8:\u000a      iVar11 = *piVar12;\u000a      free(p);\u000a      fts_lfree(head);\u000a      closedir((DIR *)ent->fts_dirp);\u000a      ent->fts_dirp = (DIR *)0x0;\u000a      ent->fts_info = 7;\u000a      pbVar2 = (byte *)((long)&sp->fts_options + 1);\u000a      *pbVar2 = *pbVar2 | 0x40;\u000a      *piVar12 = iVar11;\u000a      return (FTSENT *)0;\u000a    }\u000a    if (local_50 <= namelen) {\u000a      dir = sp->fts_path;\u000a      _Var9 = fts_palloc(sp,sVar14 + 2 + namelen);\u000a      if (_Var9 == false) goto LAB_004198a8;\u000a      if (dir != sp->fts_path) {\u000a        if ((*(byte *)&sp->fts_options & 4) != 0) {\u000a          local_a0 = sp->fts_path + uVar1;\u000a        }\u000a        bVar7 = true;\u000a      }\u000a      local_50 = sp->fts_pathlen - uVar1;\u000a    }\u000a    if (CARRY8(namelen,uVar1)) {\u000a      free(p);\u000a      fts_lfree(head);\u000a      closedir((DIR *)ent->fts_dirp);\u000a      ent->fts_dirp = (DIR *)0x0;\u000a      ent->fts_info = 7;\u000a      pbVar2 = (byte *)((long)&sp->fts_options + 1);\u000a      *pbVar2 = *pbVar2 | 0x40;\u000a      *piVar12 = 0x24;\u000a      return (FTSENT *)0;\u000a    }\u000a    p->fts_level = lVar15 + 1;\u000a    p->fts_parent = sp->fts_cur;\u000a    p->fts_pathlen = namelen + uVar1;\u000a    p->fts_statp[0].st_ino = pdVar13->d_ino;\u000a    if ((*(byte *)&sp->fts_options & 4) == 0) {\u000a      *(FTSENT **)&p->fts_accpath = p + 1;\u000a    }\u000a    else {\u000a      p->fts_accpath = p->fts_path;\u000a      memmove(local_a0,p + 1,p->fts_namelen + 1);\u000a    }\u000a    if ((sp->fts_compar == (int (*)(_ftsent **,_ftsent **))0x0) || ((sp->fts_options & 0x400U) != 0)\u000a       ) {\u000a      p->fts_info = 0xb;\u000a      set_stat_type(p->fts_statp);\u000a      fts_set_stat_required(p);\u000a    }\u000a    else {\u000a      uVar10 = fts_stat(sp,p);\u000a      p->fts_info = uVar10;\u000a    }\u000a    p->fts_link = (_ftsent *)0x0;\u000a    pFVar8 = p;\u000a    if (head != (FTSENT *)0x0) {\u000a      *(FTSENT **)&local_58->fts_link = p;\u000a      pFVar8 = head;\u000a    }\u000a    head = pFVar8;\u000a    nitems = nitems + 1;\u000a    local_58 = p;\u000a  } while (nitems < (~-(ulong)(pVar5 == (int (*)(_ftsent **,_ftsent **))0x0) | 100000));\u000aLAB_0041973d:\u000a  if (bVar7) {\u000aLAB_00419744:\u000a    fts_padjust(sp,head);\u000a  }\u000aLAB_0041974f:\u000a  if ((*(byte *)&sp->fts_options & 4) != 0) {\u000a    dir = local_a0;\u000a    if (uVar1 == sp->fts_pathlen) {\u000a      dir = local_a0 + -1;\u000a    }\u000a    if (nitems == 0) {\u000a      dir = local_a0 + -1;\u000a    }\u000a    *dir = 0;\u000a  }\u000a  if (!(bool)(__dirp != (DIR *)0x0 | bVar6)) {\u000a    if ((in_ESI != 1) && (nitems != 0)) goto LAB_004197c7;\u000a    if (ent->fts_level == 0) {\u000a      iVar11 = restore_initial_cwd(sp);\u000a    }\u000a    else {\u000a      iVar11 = fts_safe_changedir(sp,(FTSENT *)ent->fts_parent,(char *)0xffffffff);\u000a    }\u000a    if (iVar11 != 0) {\u000a      ent->fts_info = 7;\u000a      pbVar2 = (byte *)((long)&sp->fts_options + 1);\u000a      *pbVar2 = *pbVar2 | 0x40;\u000a      goto LAB_00419870;\u000a    }\u000a  }\u000a  if (nitems == 0) {\u000a    if (((in_ESI == 3) && (ent->fts_info != 4)) && (ent->fts_info != 7)) {\u000a      ent->fts_info = 6;\u000a    }\u000aLAB_00419870:\u000a    fts_lfree(head);\u000a    return (FTSENT *)0;\u000a  }\u000aLAB_004197c7:\u000a  if ((((10000 < nitems) && (sp->fts_compar == (int (*)(_ftsent **,_ftsent **))0x0)) &&\u000a      ((*(byte *)((long)&sp->fts_options + 1) & 2) != 0)) &&\u000a     (_Var9 = dirent_inode_sort_may_be_useful(), _Var9 != false)) {\u000a    sp->fts_compar = fts_compare_ino;\u000a    head = fts_sort(sp,head,nitems);\u000a    sp->fts_compar = (int (*)(_ftsent **,_ftsent **))0x0;\u000a  }\u000a  if (nitems < 2) {\u000a    return head;\u000a  }\u000a  if (sp->fts_compar == (int (*)(_ftsent **,_ftsent **))0x0) {\u000a    return head;\u000a  }\u000a  ent = fts_sort(sp,head,nitems);\u000a  return ent;\u000a}\u000a\u000a
p5218
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x88\nMOV EBP,ESI\nMOV R15,RDI\nMOV R13,qword ptr [R15]\nMOV R14,qword ptr [R13 + 0x18]\nTEST R14,R14\nJZ 0x00419245\nMOV RDI,R14\nCALL 0x00402b70\nMOV dword ptr [RSP + 0xc],EAX\nTEST EAX,EAX\nJNS 0x0041930e\nMOV RDI,qword ptr [R13 + 0x18]\nCALL 0x00402ae0\nMOV qword ptr [R13 + 0x18],0x0\nCMP EBP,0x3\nJZ 0x004192c5\nJMP 0x00419878\nMOV ECX,dword ptr [R15 + 0x48]\nMOV EAX,ECX\nAND EAX,0x204\nMOV EDI,0xffffff9c\nCMP EAX,0x200\nJNZ 0x00419260\nMOV EDI,dword ptr [R15 + 0x2c]\nMOV RSI,qword ptr [R13 + 0x30]\nXOR EAX,EAX\nTEST CL,0x10\nJZ 0x0041927c\nTEST CL,0x1\nJZ 0x00419277\nCMP qword ptr [R13 + 0x58],0x0\nJZ 0x0041927c\nMOV EAX,0x20000\nMOV EDX,dword ptr [R15 + 0x48]\nSHL EDX,0x7\nAND EDX,0x40000\nOR EDX,EAX\nLEA RCX,[RSP + 0xc]\nCALL 0x00419dd0\nMOV qword ptr [R13 + 0x18],RAX\nTEST RAX,RAX\nJZ 0x004192bc\nMOVZX EAX,word ptr [R13 + 0x70]\nCMP EAX,0xb\nJNZ 0x004192dc\nXOR EDX,EDX\nMOV RDI,R15\nMOV RSI,R13\nCALL 0x00418530\nMOV word ptr [R13 + 0x70],AX\nJMP 0x0041930e\nCMP EBP,0x3\nJNZ 0x00419878\nMOV word ptr [R13 + 0x70],0x4\nCALL 0x00402770\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [R13 + 0x40],EAX\nJMP 0x00419878\nTEST byte ptr [R15 + 0x49],0x1\nJZ 0x0041930e\nMOV RDI,R15\nMOV RSI,R13\nCALL 0x00418fd0\nXOR EDX,EDX\nMOV RDI,R15\nMOV RSI,R13\nCALL 0x00418530\nMOV RDI,R15\nMOV RSI,R13\nCALL 0x00419af0\nTEST AL,AL\nJZ 0x004198e2\nCMP qword ptr [R15 + 0x40],0x1\nSBB RAX,RAX\nMOV qword ptr [RSP + 0x48],RAX\nCMP EBP,0x2\nJNZ 0x00419329\nXOR EBX,EBX\nTEST R14,R14\nJNZ 0x00419355\nJMP 0x0041935d\nMOV EAX,dword ptr [R15 + 0x48]\nMOV ECX,EAX\nAND ECX,0x18\nMOV RBX,-0x1\nCMP ECX,0x18\nJNZ 0x00419350\nMOV RBX,qword ptr [0x88 + R13]\nSHR EAX,0x4\nNOT EAX\nAND EAX,0x2\nSUB RBX,RAX\nTEST R14,R14\nJZ 0x0041935d\nXOR R12D,R12D\nJMP 0x004193f4\nCMP EBP,0x3\nMOV R12B,0x1\nJZ 0x0041936e\nTEST RBX,RBX\nJZ 0x004193f4\nTEST byte ptr [R15 + 0x49],0x2\nJZ 0x00419392\nMOV EDI,dword ptr [RSP + 0xc]\nCALL 0x00416cf0\nMOV dword ptr [RSP + 0xc],EAX\nTEST EAX,EAX\nJS 0x004193ab\nMOV ESI,0x1\nMOV EDI,EAX\nCALL 0x0040fdd0\nMOV EDX,dword ptr [RSP + 0xc]\nTEST EDX,EDX\nJS 0x004193ab\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,R13\nCALL 0x00419060\nTEST EAX,EAX\nJZ 0x00419355\nCMP EBP,0x3\nJNZ 0x004193c0\nTEST RBX,RBX\nJZ 0x004193c0\nCALL 0x00402770\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [R13 + 0x40],EAX\nOR byte ptr [R13 + 0x72],0x1\nMOV RDI,qword ptr [R13 + 0x18]\nCALL 0x00402ae0\nMOV qword ptr [R13 + 0x18],0x0\nMOV EAX,dword ptr [R15 + 0x48]\nTEST AH,0x2\nJZ 0x004193ec\nMOV EDI,dword ptr [RSP + 0xc]\nTEST EDI,EDI\nJS 0x004193ec\nCALL 0x00402ac0\nMOV qword ptr [R13 + 0x18],0x0\nNOT qword ptr [RSP + 0x48]\nMOV RAX,qword ptr [R13 + 0x38]\nMOV RCX,qword ptr [R13 + 0x48]\nCMP byte ptr [RAX + RCX*0x1 + -0x1],0x2f\nLEA RDX,[RCX + -0x1]\nCMOVNZ RDX,RCX\nTEST byte ptr [R15 + 0x48],0x4\nMOV dword ptr [RSP + 0x24],EBP\nMOV dword ptr [RSP + 0x54],R12D\nJNZ 0x00419427\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x18],RAX\nJMP 0x00419439\nMOV RAX,qword ptr [R15 + 0x20]\nLEA RCX,[RAX + RDX*0x1 + 0x1]\nMOV qword ptr [RSP + 0x18],RCX\nMOV byte ptr [RAX + RDX*0x1],0x2f\nOR qword ptr [RSP + 0x48],0x186a0\nLEA RAX,[RDX + 0x1]\nMOV RCX,qword ptr [R15 + 0x30]\nMOV qword ptr [RSP + 0x28],RAX\nSUB RCX,RAX\nMOV qword ptr [RSP + 0x68],RCX\nMOV RAX,qword ptr [R13 + 0x58]\nINC RAX\nMOV qword ptr [RSP + 0x78],RAX\nADD RDX,0x2\nMOV qword ptr [RSP + 0x70],RDX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x58],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x60],RAX\nXOR EBX,EBX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x40],R15\nMOV qword ptr [RSP + 0x38],R13\nMOV qword ptr [0x80 + RSP],R14\nMOV qword ptr [RSP + 0x30],RBX\nMOV RBP,qword ptr [R13 + 0x18]\nTEST RBP,RBP\nJZ 0x00419890\nMOV qword ptr [RSP + 0x10],RAX\nNOP word ptr [RAX + RAX*0x1]\nCALL 0x00402770\nMOV RBX,RAX\nMOV dword ptr [RBX],0x0\nMOV RDI,RBP\nCALL 0x00402c30\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x004196e9\nTEST byte ptr [R15 + 0x48],0x20\nJNZ 0x00419510\nCMP byte ptr [RBP + 0x13],0x2e\nJNZ 0x00419510\nMOVZX EAX,byte ptr [RBP + 0x14]\nCMP AL,0x2e\nJZ 0x004194f0\nTEST AL,AL\nJZ 0x004194f6\nJMP 0x00419510\nCMP byte ptr [RBP + 0x15],0x0\nJNZ 0x00419510\nMOV RBP,qword ptr [R13 + 0x18]\nTEST RBP,RBP\nJNZ 0x004194b0\nJMP 0x00419733\nMOV R14,R15\nMOV R13,RBP\nADD R13,0x13\nMOV RDI,R13\nCALL 0x00402930\nMOV R12,RAX\nMOV RDI,R14\nMOV RSI,R13\nMOV RDX,R12\nCALL 0x00418480\nMOV R13,RAX\nTEST R13,R13\nJZ 0x004198a8\nMOV RAX,qword ptr [RSP + 0x68]\nCMP R12,RAX\nJNC 0x00419560\nMOV R14,qword ptr [RSP + 0x38]\nMOV RDX,qword ptr [RSP + 0x28]\nADD R12,RDX\nJNC 0x004195c9\nJMP 0x004198ef\nMOV R14,qword ptr [RSP + 0x40]\nMOV R15,qword ptr [R14 + 0x20]\nMOV RAX,qword ptr [RSP + 0x70]\nLEA RSI,[RAX + R12*0x1]\nMOV RDI,R14\nCALL 0x00418420\nTEST AL,AL\nJZ 0x004198a8\nMOV RAX,qword ptr [R14 + 0x20]\nCMP R15,RAX\nJZ 0x004195af\nMOV RDX,qword ptr [RSP + 0x28]\nADD RAX,RDX\nTEST byte ptr [R14 + 0x48],0x4\nMOV RCX,qword ptr [RSP + 0x18]\nCMOVNZ RCX,RAX\nMOV qword ptr [RSP + 0x18],RCX\nMOV AL,0x1\nMOV qword ptr [RSP + 0x58],RAX\nJMP 0x004195b4\nMOV RDX,qword ptr [RSP + 0x28]\nMOV RAX,qword ptr [R14 + 0x30]\nSUB RAX,RDX\nMOV R14,qword ptr [RSP + 0x38]\nADD R12,RDX\nJC 0x004198ef\nMOV qword ptr [RSP + 0x68],RAX\nMOV RAX,qword ptr [RSP + 0x78]\nMOV qword ptr [R13 + 0x58],RAX\nMOV R15,qword ptr [RSP + 0x40]\nMOV RAX,qword ptr [R15]\nMOV qword ptr [R13 + 0x8],RAX\nMOV qword ptr [R13 + 0x48],R12\nMOV RAX,qword ptr [RBP]\nMOV qword ptr [0x80 + R13],RAX\nTEST byte ptr [R15 + 0x48],0x4\nJNZ 0x00419610\nLEA RAX,[0x108 + R13]\nMOV qword ptr [R13 + 0x30],RAX\nJMP 0x00419630\nMOV RAX,qword ptr [R13 + 0x38]\nMOV qword ptr [R13 + 0x30],RAX\nLEA RSI,[0x108 + R13]\nMOV RDX,qword ptr [R13 + 0x60]\nINC RDX\nMOV RDI,qword ptr [RSP + 0x18]\nCALL 0x00402d80\nMOV EAX,dword ptr [R15 + 0x48]\nCMP qword ptr [R15 + 0x40],0x0\nJZ 0x00419660\nMOV ECX,EAX\nAND ECX,0x400\nJNZ 0x00419660\nXOR EDX,EDX\nMOV RDI,R15\nMOV RSI,R13\nCALL 0x00418530\nMOV word ptr [R13 + 0x70],AX\nJMP 0x004196a0\nMOV RDI,R13\nADD RDI,0x78\nAND EAX,0x18\nCMP EAX,0x18\nJNZ 0x00419680\nMOV AL,byte ptr [RBP + 0x12]\nCMP AL,0x4\nSETNZ CL\nTEST AL,AL\nSETNZ BL\nAND BL,CL\nJMP 0x00419682\nXOR EBX,EBX\nMOV word ptr [R13 + 0x70],0xb\nMOVZX ESI,byte ptr [RBP + 0x12]\nCALL 0x00419e30\nXOR BL,0x1\nMOVZX ESI,BL\nMOV RDI,R13\nCALL 0x00418510\nMOV qword ptr [R13 + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x10]\nTEST RAX,RAX\nMOV R12,R13\nMOV RBX,qword ptr [RSP + 0x30]\nJZ 0x004196c6\nMOV RCX,qword ptr [RSP + 0x60]\nMOV qword ptr [RCX + 0x10],R13\nMOV R12,RAX\nINC RBX\nCMP qword ptr [RSP + 0x48],RBX\nMOV qword ptr [RSP + 0x60],R13\nMOV RAX,R12\nMOV R13,R14\nMOV R14,qword ptr [0x80 + RSP]\nJA 0x00419490\nJMP 0x0041973d\nMOV EAX,dword ptr [RBX]\nTEST EAX,EAX\nMOV RBX,qword ptr [RSP + 0x30]\nJZ 0x0041970f\nMOV dword ptr [R13 + 0x40],EAX\nMOV RAX,R14\nOR RAX,RBX\nMOV AX,0x7\nMOV CX,0x4\nCMOVNZ CX,AX\nMOV word ptr [R13 + 0x70],CX\nMOV RDI,qword ptr [R13 + 0x18]\nTEST RDI,RDI\nJZ 0x00419725\nCALL 0x00402ae0\nMOV qword ptr [R13 + 0x18],0x0\nMOV R12,qword ptr [RSP + 0x10]\nTEST byte ptr [RSP + 0x58],0x1\nJZ 0x0041974f\nJMP 0x00419744\nMOV R12,qword ptr [RSP + 0x10]\nMOV RBX,qword ptr [RSP + 0x30]\nTEST byte ptr [RSP + 0x58],0x1\nJZ 0x0041974f\nMOV RDI,R15\nMOV RSI,R12\nCALL 0x00419e50\nTEST byte ptr [R15 + 0x48],0x4\nJZ 0x00419779\nMOV RAX,qword ptr [RSP + 0x18]\nMOV RCX,RAX\nLEA RAX,[RCX + -0x1]\nMOV RDX,qword ptr [RSP + 0x28]\nCMP RDX,qword ptr [R15 + 0x30]\nCMOVZ RCX,RAX\nTEST RBX,RBX\nCMOVZ RCX,RAX\nMOV byte ptr [RCX],0x0\nTEST R14,R14\nSETNZ AL\nOR AL,byte ptr [RSP + 0x54]\nJZ 0x004197bb\nTEST RBX,RBX\nJNZ 0x004197c7\nCMP dword ptr [RSP + 0x24],0x3\nJNZ 0x00419870\nMOVZX EAX,word ptr [R13 + 0x70]\nCMP EAX,0x4\nJZ 0x00419870\nMOVZX EAX,AX\nCMP EAX,0x7\nJZ 0x00419870\nMOV word ptr [R13 + 0x70],0x6\nJMP 0x00419870\nCMP dword ptr [RSP + 0x24],0x1\nJZ 0x0041982e\nTEST RBX,RBX\nJZ 0x0041982e\nCMP RBX,0x2711\nJC 0x0041980c\nCMP qword ptr [R15 + 0x40],0x0\nJNZ 0x0041980c\nTEST byte ptr [R15 + 0x49],0x2\nJZ 0x0041980c\nMOV EDI,dword ptr [R15 + 0x2c]\nCALL 0x00419ed0\nTEST AL,AL\nJZ 0x0041980c\nMOV qword ptr [R15 + 0x40],0x419f10\nMOV RDI,R15\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x004186a0\nMOV R12,RAX\nMOV qword ptr [R15 + 0x40],0x0\nCMP RBX,0x2\nJC 0x0041987b\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nJZ 0x0041987b\nMOV RDI,R15\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x004186a0\nMOV R12,RAX\nJMP 0x0041987b\nCMP qword ptr [R13 + 0x58],0x0\nJZ 0x00419854\nMOV RSI,qword ptr [R13 + 0x8]\nMOV EDX,0xffffffff\nMOV ECX,0x42527f\nMOV RDI,R15\nCALL 0x00419060\nTEST EAX,EAX\nJNZ 0x00419864\nJMP 0x00419785\nMOV RDI,R15\nCALL 0x00419930\nTEST EAX,EAX\nJZ 0x00419785\nMOV word ptr [R13 + 0x70],0x7\nOR byte ptr [R15 + 0x49],0x40\nMOV RDI,R12\nCALL 0x00418860\nXOR R12D,R12D\nMOV RAX,R12\nADD RSP,0x88\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV R12,RAX\nMOV RBX,qword ptr [RSP + 0x30]\nTEST byte ptr [RSP + 0x58],0x1\nJNZ 0x00419744\nJMP 0x0041974f\nMOV EBP,dword ptr [RBX]\nMOV RDI,R13\nCALL 0x00402710\nMOV RDI,qword ptr [RSP + 0x10]\nCALL 0x00418860\nMOV R15,qword ptr [RSP + 0x38]\nMOV RDI,qword ptr [R15 + 0x18]\nCALL 0x00402ae0\nMOV qword ptr [R15 + 0x18],0x0\nMOV word ptr [R15 + 0x70],0x7\nOR byte ptr [R14 + 0x49],0x40\nMOV dword ptr [RBX],EBP\nJMP 0x00419878\nCALL 0x00402770\nMOV dword ptr [RAX],0xc\nJMP 0x00419878\nMOV RDI,R13\nCALL 0x00402710\nMOV RDI,qword ptr [RSP + 0x10]\nCALL 0x00418860\nMOV RDI,qword ptr [R14 + 0x18]\nCALL 0x00402ae0\nMOV qword ptr [R14 + 0x18],0x0\nMOV word ptr [R14 + 0x70],0x7\nMOV RAX,qword ptr [RSP + 0x40]\nOR byte ptr [RAX + 0x49],0x40\nMOV dword ptr [RBX],0x24\nJMP 0x00419878\n'
p5219
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 88 00 00 00\n89 f5\n49 89 ff\n4d 8b 2f\n4d 8b 75 18\n4d 85 f6\n74 33\n4c 89 f7\ne8 56 99 fe ff\n89 44 24 0c\n85 c0\n0f 89 e8 00 00 00\n49 8b 7d 18\ne8 b1 98 fe ff\n49 c7 45 18 00 00 00 00\n83 fd 03\n0f 84 85 00 00 00\ne9 33 06 00 00\n41 8b 4f 48\n89 c8\n25 04 02 00 00\nbf 9c ff ff ff\n3d 00 02 00 00\n75 04\n41 8b 7f 2c\n49 8b 75 30\n31 c0\nf6 c1 10\n74 11\nf6 c1 01\n74 07\n49 83 7d 58 00\n74 05\nb8 00 00 02 00\n41 8b 57 48\nc1 e2 07\n81 e2 00 00 04 00\n09 c2\n48 8d 4c 24 0c\ne8 3b 0b 00 00\n49 89 45 18\n48 85 c0\n74 1e\n41 0f b7 45 70\n83 f8 0b\n75 34\n31 d2\n4c 89 ff\n4c 89 ee\ne8 7b f2 ff ff\n66 41 89 45 70\neb 52\n83 fd 03\n0f 85 b3 05 00 00\n66 41 c7 45 70 04 00\ne8 9f 94 fe ff\n8b 00\n41 89 45 40\ne9 9c 05 00 00\n41 f6 47 49 01\n74 2b\n4c 89 ff\n4c 89 ee\ne8 e2 fc ff ff\n31 d2\n4c 89 ff\n4c 89 ee\ne8 35 f2 ff ff\n4c 89 ff\n4c 89 ee\ne8 ea 07 00 00\n84 c0\n0f 84 d4 05 00 00\n49 83 7f 40 01\n48 19 c0\n48 89 44 24 48\n83 fd 02\n75 09\n31 db\n4d 85 f6\n75 2e\neb 34\n41 8b 47 48\n89 c1\n83 e1 18\n48 c7 c3 ff ff ff ff\n83 f9 18\n75 12\n49 8b 9d 88 00 00 00\nc1 e8 04\nf7 d0\n83 e0 02\n48 29 c3\n4d 85 f6\n74 08\n45 31 e4\ne9 97 00 00 00\n83 fd 03\n41 b4 01\n74 09\n48 85 db\n0f 84 86 00 00 00\n41 f6 47 49 02\n74 1d\n8b 7c 24 0c\ne8 72 d9 ff ff\n89 44 24 0c\n85 c0\n78 25\nbe 01 00 00 00\n89 c7\ne8 3e 6a ff ff\n8b 54 24 0c\n85 d2\n78 11\n31 c9\n4c 89 ff\n4c 89 ee\ne8 b9 fc ff ff\n85 c0\n74 aa\n83 fd 03\n75 10\n48 85 db\n74 0b\ne8 b6 93 fe ff\n8b 00\n41 89 45 40\n41 80 4d 72 01\n49 8b 7d 18\ne8 12 97 fe ff\n49 c7 45 18 00 00 00 00\n41 8b 47 48\nf6 c4 02\n74 0d\n8b 7c 24 0c\n85 ff\n78 05\ne8 d4 96 fe ff\n49 c7 45 18 00 00 00 00\n48 f7 54 24 48\n49 8b 45 38\n49 8b 4d 48\n80 7c 08 ff 2f\n48 8d 51 ff\n48 0f 45 d1\n41 f6 47 48 04\n89 6c 24 24\n44 89 64 24 54\n75 09\n31 c0\n48 89 44 24 18\neb 12\n49 8b 47 20\n48 8d 4c 10 01\n48 89 4c 24 18\nc6 04 10 2f\n48 81 4c 24 48 a0 86 01 00\n48 8d 42 01\n49 8b 4f 30\n48 89 44 24 28\n48 29 c1\n48 89 4c 24 68\n49 8b 45 58\n48 ff c0\n48 89 44 24 78\n48 83 c2 02\n48 89 54 24 70\n31 c0\n48 89 44 24 58\n31 c0\n48 89 44 24 60\n31 db\n31 c0\n4c 89 7c 24 40\n4c 89 6c 24 38\n4c 89 b4 24 80 00 00 00\n48 89 5c 24 30\n49 8b 6d 18\n48 85 ed\n0f 84 ee 03 00 00\n48 89 44 24 10\n66 0f 1f 84 00 00 00 00 00\ne8 bb 92 fe ff\n48 89 c3\nc7 03 00 00 00 00\n48 89 ef\ne8 6a 97 fe ff\n48 89 c5\n48 85 ed\n0f 84 17 02 00 00\n41 f6 47 48 20\n75 37\n80 7d 13 2e\n75 31\n0f b6 45 14\n3c 2e\n74 09\n84 c0\n74 0b\neb 23\n80 7d 15 00\n75 1a\n49 8b 6d 18\n48 85 ed\n75 b1\ne9 2f 02 00 00\n4d 89 fe\n49 89 ed\n49 83 c5 13\n4c 89 ef\ne8 0e 94 fe ff\n49 89 c4\n4c 89 f7\n4c 89 ee\n4c 89 e2\ne8 4d ef ff ff\n49 89 c5\n4d 85 ed\n0f 84 69 03 00 00\n48 8b 44 24 68\n49 39 c4\n73 17\n4c 8b 74 24 38\n48 8b 54 24 28\n49 01 d4\n73 71\ne9 92 03 00 00\n4c 8b 74 24 40\n4d 8b 7e 20\n48 8b 44 24 70\n4a 8d 34 20\n4c 89 f7\ne8 a6 ee ff ff\n84 c0\n0f 84 26 03 00 00\n49 8b 46 20\n49 39 c7\n74 24\n48 8b 54 24 28\n48 01 d0\n41 f6 46 48 04\n48 8b 4c 24 18\n48 0f 45 c8\n48 89 4c 24 18\nb0 01\n48 89 44 24 58\neb 05\n48 8b 54 24 28\n49 8b 46 30\n48 29 d0\n4c 8b 74 24 38\n49 01 d4\n0f 82 26 03 00 00\n48 89 44 24 68\n48 8b 44 24 78\n49 89 45 58\n4c 8b 7c 24 40\n49 8b 07\n49 89 45 08\n4d 89 65 48\n48 8b 45 00\n49 89 85 80 00 00 00\n41 f6 47 48 04\n75 17\n49 8d 85 08 01 00 00\n49 89 45 30\neb 2a\n49 8b 45 38\n49 89 45 30\n49 8d b5 08 01 00 00\n49 8b 55 60\n48 ff c2\n48 8b 7c 24 18\ne8 50 97 fe ff\n41 8b 47 48\n49 83 7f 40 00\n74 25\n89 c1\n81 e1 00 04 00 00\n75 1b\n31 d2\n4c 89 ff\n4c 89 ee\ne8 de ee ff ff\n66 41 89 45 70\neb 47\n4c 89 ef\n48 83 c7 78\n83 e0 18\n83 f8 18\n75 11\n8a 45 12\n3c 04\n0f 95 c1\n84 c0\n0f 95 c3\n20 cb\neb 02\n31 db\n66 41 c7 45 70 0b 00\n0f b6 75 12\ne8 9e 07 00 00\n80 f3 01\n0f b6 f3\n4c 89 ef\ne8 70 ee ff ff\n49 c7 45 10 00 00 00 00\n48 8b 44 24 10\n48 85 c0\n4d 89 ec\n48 8b 5c 24 30\n74 0c\n48 8b 4c 24 60\n4c 89 69 10\n49 89 c4\n48 ff c3\n48 39 5c 24 48\n4c 89 6c 24 60\n4c 89 e0\n4d 89 f5\n4c 8b b4 24 80 00 00 00\n0f 87 a9 fd ff ff\neb 54\n8b 03\n85 c0\n48 8b 5c 24 30\n74 1b\n41 89 45 40\n4c 89 f0\n48 09 d8\n66 b8 07 00\n66 b9 04 00\n66 0f 45 c8\n66 41 89 4d 70\n49 8b 7d 18\n48 85 ff\n74 0d\ne8 c3 93 fe ff\n49 c7 45 18 00 00 00 00\n4c 8b 64 24 10\nf6 44 24 58 01\n74 1e\neb 11\n4c 8b 64 24 10\n48 8b 5c 24 30\nf6 44 24 58 01\n74 0b\n4c 89 ff\n4c 89 e6\ne8 01 07 00 00\n41 f6 47 48 04\n74 23\n48 8b 44 24 18\n48 89 c1\n48 8d 41 ff\n48 8b 54 24 28\n49 3b 57 30\n48 0f 44 c8\n48 85 db\n48 0f 44 c8\nc6 01 00\n4d 85 f6\n0f 95 c0\n0a 44 24 54\n74 36\n48 85 db\n75 3d\n83 7c 24 24 03\n0f 85 db 00 00 00\n41 0f b7 45 70\n83 f8 04\n0f 84 cd 00 00 00\n0f b7 c0\n83 f8 07\n0f 84 c1 00 00 00\n66 41 c7 45 70 06 00\ne9 b5 00 00 00\n83 7c 24 24 01\n74 6c\n48 85 db\n74 67\n48 81 fb 11 27 00 00\n72 3c\n49 83 7f 40 00\n75 35\n41 f6 47 49 02\n74 2e\n41 8b 7f 2c\ne8 e9 06 00 00\n84 c0\n74 21\n49 c7 47 40 10 9f 41 00\n4c 89 ff\n4c 89 e6\n48 89 da\ne8 9f ee ff ff\n49 89 c4\n49 c7 47 40 00 00 00 00\n48 83 fb 02\n72 69\n49 8b 47 40\n48 85 c0\n74 60\n4c 89 ff\n4c 89 e6\n48 89 da\ne8 77 ee ff ff\n49 89 c4\neb 4d\n49 83 7d 58 00\n74 1f\n49 8b 75 08\nba ff ff ff ff\nb9 7f 52 42 00\n4c 89 ff\ne8 15 f8 ff ff\n85 c0\n75 15\ne9 31 ff ff ff\n4c 89 ff\ne8 d4 00 00 00\n85 c0\n0f 84 21 ff ff ff\n66 41 c7 45 70 07 00\n41 80 4f 49 40\n4c 89 e7\ne8 e8 ef ff ff\n45 31 e4\n4c 89 e0\n48 81 c4 88 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n49 89 c4\n48 8b 5c 24 30\nf6 44 24 58 01\n0f 85 a1 fe ff ff\ne9 a7 fe ff ff\n8b 2b\n4c 89 ef\ne8 5e 8e fe ff\n48 8b 7c 24 10\ne8 a4 ef ff ff\n4c 8b 7c 24 38\n49 8b 7f 18\ne8 16 92 fe ff\n49 c7 47 18 00 00 00 00\n66 41 c7 47 70 07 00\n41 80 4e 49 40\n89 2b\neb 96\ne8 89 8e fe ff\nc7 00 0c 00 00 00\neb 89\n4c 89 ef\ne8 19 8e fe ff\n48 8b 7c 24 10\ne8 5f ef ff ff\n49 8b 7e 18\ne8 d6 91 fe ff\n49 c7 46 18 00 00 00 00\n66 41 c7 46 70 07 00\n48 8b 44 24 40\n80 48 49 40\nc7 03 24 00 00 00\ne9 4b ff ff ff\n'
p5220
S'.text:00000000004191f0\n.text:00000000004191f1\n.text:00000000004191f3\n.text:00000000004191f5\n.text:00000000004191f7\n.text:00000000004191f9\n.text:00000000004191fa\n.text:0000000000419201\n.text:0000000000419203\n.text:0000000000419206\n.text:0000000000419209\n.text:000000000041920d\n.text:0000000000419210\n.text:0000000000419212\n.text:0000000000419215\n.text:000000000041921a\n.text:000000000041921e\n.text:0000000000419220\n.text:0000000000419226\n.text:000000000041922a\n.text:000000000041922f\n.text:0000000000419237\n.text:000000000041923a\n.text:0000000000419240\n.text:0000000000419245\n.text:0000000000419249\n.text:000000000041924b\n.text:0000000000419250\n.text:0000000000419255\n.text:000000000041925a\n.text:000000000041925c\n.text:0000000000419260\n.text:0000000000419264\n.text:0000000000419266\n.text:0000000000419269\n.text:000000000041926b\n.text:000000000041926e\n.text:0000000000419270\n.text:0000000000419275\n.text:0000000000419277\n.text:000000000041927c\n.text:0000000000419280\n.text:0000000000419283\n.text:0000000000419289\n.text:000000000041928b\n.text:0000000000419290\n.text:0000000000419295\n.text:0000000000419299\n.text:000000000041929c\n.text:000000000041929e\n.text:00000000004192a3\n.text:00000000004192a6\n.text:00000000004192a8\n.text:00000000004192aa\n.text:00000000004192ad\n.text:00000000004192b0\n.text:00000000004192b5\n.text:00000000004192ba\n.text:00000000004192bc\n.text:00000000004192bf\n.text:00000000004192c5\n.text:00000000004192cc\n.text:00000000004192d1\n.text:00000000004192d3\n.text:00000000004192d7\n.text:00000000004192dc\n.text:00000000004192e1\n.text:00000000004192e3\n.text:00000000004192e6\n.text:00000000004192e9\n.text:00000000004192ee\n.text:00000000004192f0\n.text:00000000004192f3\n.text:00000000004192f6\n.text:00000000004192fb\n.text:00000000004192fe\n.text:0000000000419301\n.text:0000000000419306\n.text:0000000000419308\n.text:000000000041930e\n.text:0000000000419313\n.text:0000000000419316\n.text:000000000041931b\n.text:000000000041931e\n.text:0000000000419320\n.text:0000000000419322\n.text:0000000000419325\n.text:0000000000419327\n.text:0000000000419329\n.text:000000000041932d\n.text:000000000041932f\n.text:0000000000419332\n.text:0000000000419339\n.text:000000000041933c\n.text:000000000041933e\n.text:0000000000419345\n.text:0000000000419348\n.text:000000000041934a\n.text:000000000041934d\n.text:0000000000419350\n.text:0000000000419353\n.text:0000000000419355\n.text:0000000000419358\n.text:000000000041935d\n.text:0000000000419360\n.text:0000000000419363\n.text:0000000000419365\n.text:0000000000419368\n.text:000000000041936e\n.text:0000000000419373\n.text:0000000000419375\n.text:0000000000419379\n.text:000000000041937e\n.text:0000000000419382\n.text:0000000000419384\n.text:0000000000419386\n.text:000000000041938b\n.text:000000000041938d\n.text:0000000000419392\n.text:0000000000419396\n.text:0000000000419398\n.text:000000000041939a\n.text:000000000041939c\n.text:000000000041939f\n.text:00000000004193a2\n.text:00000000004193a7\n.text:00000000004193a9\n.text:00000000004193ab\n.text:00000000004193ae\n.text:00000000004193b0\n.text:00000000004193b3\n.text:00000000004193b5\n.text:00000000004193ba\n.text:00000000004193bc\n.text:00000000004193c0\n.text:00000000004193c5\n.text:00000000004193c9\n.text:00000000004193ce\n.text:00000000004193d6\n.text:00000000004193da\n.text:00000000004193dd\n.text:00000000004193df\n.text:00000000004193e3\n.text:00000000004193e5\n.text:00000000004193e7\n.text:00000000004193ec\n.text:00000000004193f4\n.text:00000000004193f9\n.text:00000000004193fd\n.text:0000000000419401\n.text:0000000000419406\n.text:000000000041940a\n.text:000000000041940e\n.text:0000000000419413\n.text:0000000000419417\n.text:000000000041941c\n.text:000000000041941e\n.text:0000000000419420\n.text:0000000000419425\n.text:0000000000419427\n.text:000000000041942b\n.text:0000000000419430\n.text:0000000000419435\n.text:0000000000419439\n.text:0000000000419442\n.text:0000000000419446\n.text:000000000041944a\n.text:000000000041944f\n.text:0000000000419452\n.text:0000000000419457\n.text:000000000041945b\n.text:000000000041945e\n.text:0000000000419463\n.text:0000000000419467\n.text:000000000041946c\n.text:000000000041946e\n.text:0000000000419473\n.text:0000000000419475\n.text:000000000041947a\n.text:000000000041947c\n.text:000000000041947e\n.text:0000000000419483\n.text:0000000000419488\n.text:0000000000419490\n.text:0000000000419495\n.text:0000000000419499\n.text:000000000041949c\n.text:00000000004194a2\n.text:00000000004194a7\n.text:00000000004194b0\n.text:00000000004194b5\n.text:00000000004194b8\n.text:00000000004194be\n.text:00000000004194c1\n.text:00000000004194c6\n.text:00000000004194c9\n.text:00000000004194cc\n.text:00000000004194d2\n.text:00000000004194d7\n.text:00000000004194d9\n.text:00000000004194dd\n.text:00000000004194df\n.text:00000000004194e3\n.text:00000000004194e5\n.text:00000000004194e7\n.text:00000000004194e9\n.text:00000000004194eb\n.text:00000000004194f0\n.text:00000000004194f4\n.text:00000000004194f6\n.text:00000000004194fa\n.text:00000000004194fd\n.text:00000000004194ff\n.text:0000000000419510\n.text:0000000000419513\n.text:0000000000419516\n.text:000000000041951a\n.text:000000000041951d\n.text:0000000000419522\n.text:0000000000419525\n.text:0000000000419528\n.text:000000000041952b\n.text:000000000041952e\n.text:0000000000419533\n.text:0000000000419536\n.text:0000000000419539\n.text:000000000041953f\n.text:0000000000419544\n.text:0000000000419547\n.text:0000000000419549\n.text:000000000041954e\n.text:0000000000419553\n.text:0000000000419556\n.text:0000000000419558\n.text:0000000000419560\n.text:0000000000419565\n.text:0000000000419569\n.text:000000000041956e\n.text:0000000000419572\n.text:0000000000419575\n.text:000000000041957a\n.text:000000000041957c\n.text:0000000000419582\n.text:0000000000419586\n.text:0000000000419589\n.text:000000000041958b\n.text:0000000000419590\n.text:0000000000419593\n.text:0000000000419598\n.text:000000000041959d\n.text:00000000004195a1\n.text:00000000004195a6\n.text:00000000004195a8\n.text:00000000004195ad\n.text:00000000004195af\n.text:00000000004195b4\n.text:00000000004195b8\n.text:00000000004195bb\n.text:00000000004195c0\n.text:00000000004195c3\n.text:00000000004195c9\n.text:00000000004195ce\n.text:00000000004195d3\n.text:00000000004195d7\n.text:00000000004195dc\n.text:00000000004195df\n.text:00000000004195e3\n.text:00000000004195e7\n.text:00000000004195eb\n.text:00000000004195f2\n.text:00000000004195f7\n.text:00000000004195f9\n.text:0000000000419600\n.text:0000000000419604\n.text:0000000000419610\n.text:0000000000419614\n.text:0000000000419618\n.text:000000000041961f\n.text:0000000000419623\n.text:0000000000419626\n.text:000000000041962b\n.text:0000000000419630\n.text:0000000000419634\n.text:0000000000419639\n.text:000000000041963b\n.text:000000000041963d\n.text:0000000000419643\n.text:0000000000419645\n.text:0000000000419647\n.text:000000000041964a\n.text:000000000041964d\n.text:0000000000419652\n.text:0000000000419657\n.text:0000000000419660\n.text:0000000000419663\n.text:0000000000419667\n.text:000000000041966a\n.text:000000000041966d\n.text:000000000041966f\n.text:0000000000419672\n.text:0000000000419674\n.text:0000000000419677\n.text:0000000000419679\n.text:000000000041967c\n.text:000000000041967e\n.text:0000000000419680\n.text:0000000000419682\n.text:0000000000419689\n.text:000000000041968d\n.text:0000000000419692\n.text:0000000000419695\n.text:0000000000419698\n.text:000000000041969b\n.text:00000000004196a0\n.text:00000000004196a8\n.text:00000000004196ad\n.text:00000000004196b0\n.text:00000000004196b3\n.text:00000000004196b8\n.text:00000000004196ba\n.text:00000000004196bf\n.text:00000000004196c3\n.text:00000000004196c6\n.text:00000000004196c9\n.text:00000000004196ce\n.text:00000000004196d3\n.text:00000000004196d6\n.text:00000000004196d9\n.text:00000000004196e1\n.text:00000000004196e7\n.text:00000000004196e9\n.text:00000000004196eb\n.text:00000000004196ed\n.text:00000000004196f2\n.text:00000000004196f4\n.text:00000000004196f8\n.text:00000000004196fb\n.text:00000000004196fe\n.text:0000000000419702\n.text:0000000000419706\n.text:000000000041970a\n.text:000000000041970f\n.text:0000000000419713\n.text:0000000000419716\n.text:0000000000419718\n.text:000000000041971d\n.text:0000000000419725\n.text:000000000041972a\n.text:000000000041972f\n.text:0000000000419731\n.text:0000000000419733\n.text:0000000000419738\n.text:000000000041973d\n.text:0000000000419742\n.text:0000000000419744\n.text:0000000000419747\n.text:000000000041974a\n.text:000000000041974f\n.text:0000000000419754\n.text:0000000000419756\n.text:000000000041975b\n.text:000000000041975e\n.text:0000000000419762\n.text:0000000000419767\n.text:000000000041976b\n.text:000000000041976f\n.text:0000000000419772\n.text:0000000000419776\n.text:0000000000419779\n.text:000000000041977c\n.text:000000000041977f\n.text:0000000000419783\n.text:0000000000419785\n.text:0000000000419788\n.text:000000000041978a\n.text:000000000041978f\n.text:0000000000419795\n.text:000000000041979a\n.text:000000000041979d\n.text:00000000004197a3\n.text:00000000004197a6\n.text:00000000004197a9\n.text:00000000004197af\n.text:00000000004197b6\n.text:00000000004197bb\n.text:00000000004197c0\n.text:00000000004197c2\n.text:00000000004197c5\n.text:00000000004197c7\n.text:00000000004197ce\n.text:00000000004197d0\n.text:00000000004197d5\n.text:00000000004197d7\n.text:00000000004197dc\n.text:00000000004197de\n.text:00000000004197e2\n.text:00000000004197e7\n.text:00000000004197e9\n.text:00000000004197eb\n.text:00000000004197f3\n.text:00000000004197f6\n.text:00000000004197f9\n.text:00000000004197fc\n.text:0000000000419801\n.text:0000000000419804\n.text:000000000041980c\n.text:0000000000419810\n.text:0000000000419812\n.text:0000000000419816\n.text:0000000000419819\n.text:000000000041981b\n.text:000000000041981e\n.text:0000000000419821\n.text:0000000000419824\n.text:0000000000419829\n.text:000000000041982c\n.text:000000000041982e\n.text:0000000000419833\n.text:0000000000419835\n.text:0000000000419839\n.text:000000000041983e\n.text:0000000000419843\n.text:0000000000419846\n.text:000000000041984b\n.text:000000000041984d\n.text:000000000041984f\n.text:0000000000419854\n.text:0000000000419857\n.text:000000000041985c\n.text:000000000041985e\n.text:0000000000419864\n.text:000000000041986b\n.text:0000000000419870\n.text:0000000000419873\n.text:0000000000419878\n.text:000000000041987b\n.text:000000000041987e\n.text:0000000000419885\n.text:0000000000419886\n.text:0000000000419888\n.text:000000000041988a\n.text:000000000041988c\n.text:000000000041988e\n.text:000000000041988f\n.text:0000000000419890\n.text:0000000000419893\n.text:0000000000419898\n.text:000000000041989d\n.text:00000000004198a3\n.text:00000000004198a8\n.text:00000000004198aa\n.text:00000000004198ad\n.text:00000000004198b2\n.text:00000000004198b7\n.text:00000000004198bc\n.text:00000000004198c1\n.text:00000000004198c5\n.text:00000000004198ca\n.text:00000000004198d2\n.text:00000000004198d9\n.text:00000000004198de\n.text:00000000004198e0\n.text:00000000004198e2\n.text:00000000004198e7\n.text:00000000004198ed\n.text:00000000004198ef\n.text:00000000004198f2\n.text:00000000004198f7\n.text:00000000004198fc\n.text:0000000000419901\n.text:0000000000419905\n.text:000000000041990a\n.text:0000000000419912\n.text:0000000000419919\n.text:000000000041991e\n.text:0000000000419922\n.text:0000000000419928\n'
p5221
tp5222
sS'parse_okdir'
p5223
(S'\n__stdcall parse_okdir(parser_table * entry, char * * argv, int * arg_ptr)\n'
p5224
V\u000a_Bool parse_okdir(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = insert_exec_ok("-okdir",entry,argv,arg_ptr);\u000a  return _Var1;\u000a}\u000a\u000a
p5225
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nMOV EDI,0x41e987\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x0040ca60\n'
p5226
S'48 89 d0\n48 89 f1\n48 89 fa\nbf 87 e9 41 00\n48 89 d6\n48 89 ca\n48 89 c1\ne9 14 0d 00 00\n'
p5227
S'.text:000000000040bd30\n.text:000000000040bd33\n.text:000000000040bd36\n.text:000000000040bd39\n.text:000000000040bd3e\n.text:000000000040bd41\n.text:000000000040bd44\n.text:000000000040bd47\n'
p5228
tp5229
sS'endgrent'
p5230
(S'\n__stdcall endgrent()\n'
p5231
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid endgrent(void)\u000a\u000a{\u000a  (*(code *)PTR_endgrent_0062d018)();\u000a  return;\u000a}\u000a\u000a
p5232
S'JMP qword ptr [0x0062d018]\n'
p5233
S'ff 25 22 a9 22 00\n'
p5234
S'.plt:00000000004026f0\n'
p5235
tp5236
sS'__argmatch_die'
p5237
(S'\n__stdcall __argmatch_die()\n'
p5238
V\u000avoid __argmatch_die(void)\u000a\u000a{\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(exit_failure);\u000a}\u000a\u000a
p5239
S'PUSH RAX\nMOV EDI,dword ptr [0x0062dda0]\nCALL 0x00402ed0\n'
p5240
S'50\n8b 3d 89 28 21 00\ne8 b4 79 fe ff\n'
p5241
S'.text:000000000041b510\n.text:000000000041b511\n.text:000000000041b517\n'
p5242
tp5243
sS'strrchr'
p5244
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p5245
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_0062d1a0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p5246
S'JMP qword ptr [0x0062d1a0]\n'
p5247
S'ff 25 9a a7 22 00\n'
p5248
S'.plt:0000000000402a00\n'
p5249
tp5250
sS'quotearg_alloc_mem'
p5251
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p5252
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p5253
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x62e690\nCMOVNZ R12,RCX\nCALL 0x00402770\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x004152c0\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x004172f0\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x004152c0\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x00415fea\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p5254
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc 90 e6 62 00\n4c 0f 45 e1\ne8 28 c8 fe ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 51 13 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p5255
S'.text:0000000000415f10\n.text:0000000000415f11\n.text:0000000000415f13\n.text:0000000000415f15\n.text:0000000000415f17\n.text:0000000000415f19\n.text:0000000000415f1a\n.text:0000000000415f1e\n.text:0000000000415f21\n.text:0000000000415f26\n.text:0000000000415f29\n.text:0000000000415f2e\n.text:0000000000415f31\n.text:0000000000415f36\n.text:0000000000415f39\n.text:0000000000415f3f\n.text:0000000000415f43\n.text:0000000000415f48\n.text:0000000000415f4d\n.text:0000000000415f4f\n.text:0000000000415f53\n.text:0000000000415f55\n.text:0000000000415f58\n.text:0000000000415f5c\n.text:0000000000415f61\n.text:0000000000415f65\n.text:0000000000415f6a\n.text:0000000000415f6e\n.text:0000000000415f70\n.text:0000000000415f72\n.text:0000000000415f75\n.text:0000000000415f78\n.text:0000000000415f7b\n.text:0000000000415f80\n.text:0000000000415f85\n.text:0000000000415f87\n.text:0000000000415f8c\n.text:0000000000415f90\n.text:0000000000415f93\n.text:0000000000415f97\n.text:0000000000415f9a\n.text:0000000000415f9f\n.text:0000000000415fa2\n.text:0000000000415fa6\n.text:0000000000415faa\n.text:0000000000415fad\n.text:0000000000415fb0\n.text:0000000000415fb5\n.text:0000000000415fba\n.text:0000000000415fbd\n.text:0000000000415fc2\n.text:0000000000415fc7\n.text:0000000000415fc9\n.text:0000000000415fce\n.text:0000000000415fd3\n.text:0000000000415fd7\n.text:0000000000415fda\n.text:0000000000415fde\n.text:0000000000415fe3\n.text:0000000000415fe5\n.text:0000000000415fe7\n.text:0000000000415fea\n.text:0000000000415fed\n.text:0000000000415ff1\n.text:0000000000415ff2\n.text:0000000000415ff4\n.text:0000000000415ff6\n.text:0000000000415ff8\n.text:0000000000415ffa\n.text:0000000000415ffb\n'
p5256
tp5257
sS'list_file'
p5258
(S'\n__stdcall list_file(char * name, char * relname, stat * statp, time_t current_time, FILE * stream)\n'
p5259
V\u000avoid list_file(char *name,char *relname,stat *statp,time_t current_time,FILE *stream)\u000a\u000a{\u000a  uintmax_t *__timer;\u000a  uintmax_t n;\u000a  bool bVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  int iVar4;\u000a  uint uVar5;\u000a  char *__format;\u000a  char *string;\u000a  tm *__tp;\u000a  size_t sVar6;\u000a  uint *puVar7;\u000a  undefined8 uVar8;\u000a  uint uVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  char *__s;\u000a  long lVar12;\u000a  uint uVar13;\u000a  bool bVar14;\u000a  bool bVar15;\u000a  FILE *stream_00;\u000a  char local_3f8 [8];\u000a  char init_bigbuf [256];\u000a  char hbuf [652];\u000a  char modebuf [12];\u000a  \u000a  string = local_3f8;\u000a  __s = local_3f8;\u000a  strmode((char *)(ulong)*(uint *)(current_time + 0x18));\u000a  iVar3 = inode_number_width;\u000a  __format = human_readable(*(uintmax_t *)(current_time + 8),init_bigbuf + 0xf8,0,1);\u000a  iVar3 = fprintf((FILE *)stream_00,"%*s",(ulong)(uint)iVar3,__format);\u000a  if (iVar3 < 0) {\u000a    uVar13 = 100;\u000a    string = local_3f8;\u000a    goto LAB_0040f3d1;\u000a  }\u000a  if (inode_number_width < iVar3) {\u000a    inode_number_width = iVar3;\u000a  }\u000a  iVar4 = _IO_putc(0x20,(_IO_FILE *)stream_00);\u000a  iVar3 = block_size_width;\u000a  bVar14 = iVar4 != -1;\u000a  uVar13 = 0x96;\u000a  if (bVar14) {\u000a    uVar13 = 0;\u000a  }\u000a  human_readable(*(uintmax_t *)(current_time + 0x40),init_bigbuf + 0xf8,0,0x200);\u000a  iVar3 = fprintf((FILE *)stream_00,"%*s",(ulong)(uint)iVar3);\u000a  if (iVar3 < 0) {\u000a    uVar13 = 200;\u000a    string = local_3f8;\u000a    goto LAB_0040f3d1;\u000a  }\u000a  if (block_size_width < iVar3) {\u000a    block_size_width = iVar3;\u000a  }\u000a  if (iVar4 == -1) {\u000a    uVar13 = 0x96;\u000a    string = local_3f8;\u000a    if (!bVar14) goto LAB_0040f3d1;\u000a  }\u000a  else {\u000a    iVar3 = _IO_putc(0x20,(_IO_FILE *)stream_00);\u000a    bVar15 = iVar3 != -1;\u000a    if (!bVar15) {\u000a      uVar13 = 0xfa;\u000a    }\u000a    bVar1 = !bVar14;\u000a    bVar14 = bVar14 && bVar15;\u000a    if (bVar1 || !bVar15) goto LAB_0040f3d1;\u000a  }\u000a  uVar11 = (ulong)bVar14;\u000a  iVar3 = fputs(hbuf + 0x284,(FILE *)stream_00);\u000a  if (iVar3 < 0) {\u000a    uVar13 = 0x113;\u000a    uVar11 = 0;\u000a  }\u000a  if ((char)uVar11 == 0) goto LAB_0040efbb;\u000a  iVar3 = fprintf((FILE *)stream_00,"%*lu",(ulong)(uint)nlink_width);\u000a  if (iVar3 < 0) {\u000a    uVar13 = 300;\u000a    string = local_3f8;\u000a    goto LAB_0040f3d1;\u000a  }\u000a  if (nlink_width < iVar3) {\u000a    nlink_width = iVar3;\u000a  }\u000a  if ((char)uVar11 == 0) {\u000aLAB_0040efbb:\u000a    if ((char)uVar11 == 0) goto LAB_0040f013;\u000aLAB_0040efc0:\u000a    string = getgroup();\u000a    if (string != (char *)0x0) {\u000a      iVar3 = gnu_mbswidth(string);\u000a      if (group_width < iVar3) {\u000a        group_width = iVar3;\u000a      }\u000a      iVar3 = fprintf((FILE *)stream_00,"%-*s ",(ulong)(uint)group_width);\u000a      uVar11 = (ulong)(-1 < iVar3);\u000a      if (-1 >= iVar3) {\u000a        uVar13 = 500;\u000a      }\u000a      goto LAB_0040f013;\u000a    }\u000a    iVar3 = fprintf((FILE *)stream_00,"%-*lu",(ulong)(uint)group_width);\u000a    if (group_width < iVar3) {\u000a      group_width = iVar3;\u000a    }\u000a    bVar14 = iVar3 >= 0;\u000a    uVar11 = (ulong)bVar14;\u000a    if (iVar3 < 0) {\u000a      uVar13 = 0x226;\u000a      if (!bVar14) goto joined_r0x0040f1b6;\u000a      goto LAB_0040f01c;\u000a    }\u000a    iVar3 = _IO_putc(0x20,(_IO_FILE *)stream_00);\u000a    if (iVar3 != -1) goto LAB_0040f013;\u000a    uVar11 = 0;\u000a    uVar13 = 0x20d;\u000ajoined_r0x0040f1b6:\u000a    if ((uVar11 & 1) != 0) {\u000aLAB_0040f1b8:\u000a      iVar3 = _IO_putc(0x20,(_IO_FILE *)stream_00);\u000a      if (iVar3 == -1) {\u000a        uVar13 = 0x352;\u000a        uVar11 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar3 = _IO_putc(0x20,(_IO_FILE *)stream_00);\u000a    if (iVar3 == -1) {\u000a      uVar13 = 0xfa;\u000a    }\u000a    string = getuser();\u000a    if (string == (char *)0x0) {\u000a      iVar3 = fprintf((FILE *)stream_00,"%-8lu ",(ulong)*(uint *)(current_time + 0x1c));\u000a      if (owner_width < iVar3) {\u000a        owner_width = iVar3;\u000a      }\u000a      uVar11 = (ulong)(0 < iVar3);\u000a      if (iVar3 < 1) {\u000a        uVar13 = 0x1c2;\u000a      }\u000a      goto LAB_0040efbb;\u000a    }\u000a    iVar3 = gnu_mbswidth(string);\u000a    if (owner_width < iVar3) {\u000a      owner_width = iVar3;\u000a    }\u000a    iVar3 = fprintf((FILE *)stream_00,"%-*s ",(ulong)(uint)owner_width);\u000a    uVar11 = (ulong)(-1 < iVar3);\u000a    if (-1 < iVar3) goto LAB_0040efc0;\u000a    uVar13 = 400;\u000aLAB_0040f013:\u000a    if ((char)uVar11 == 0) goto joined_r0x0040f1b6;\u000aLAB_0040f01c:\u000a    iVar3 = file_size_width;\u000a    if ((*(ushort *)(current_time + 0x18) & 0xf000 | 0x4000) == 0x6000) {\u000a      uVar5 = gnu_dev_major(*(ulonglong *)(current_time + 0x28));\u000a      _Var2 = print_num(stream_00,(ulong)uVar5,&major_device_number_width);\u000a      uVar10 = (ulong)_Var2;\u000a      uVar5 = 600;\u000a      if (_Var2 != false) {\u000a        uVar10 = uVar11;\u000a        uVar5 = uVar13;\u000a      }\u000a      if ((uVar10 & 1) != 0) {\u000a        uVar13 = 0;\u000a        iVar3 = fprintf((FILE *)stream_00,", ");\u000a        if (iVar3 < 0) {\u000a          uVar5 = 0x271;\u000a        }\u000a        else {\u000a          uVar13 = (uint)(byte)uVar10;\u000a        }\u000a        uVar10 = (ulong)uVar13;\u000a      }\u000a      uVar11 = uVar10;\u000a      uVar13 = uVar5;\u000a      if ((uVar10 & 1) != 0) {\u000a        uVar13 = gnu_dev_minor(*(ulonglong *)(current_time + 0x28));\u000a        _Var2 = print_num(stream_00,(ulong)uVar13,&minor_device_number_width);\u000a        uVar9 = (uint)_Var2;\u000a        uVar13 = 0x28a;\u000a        if (_Var2 != false) {\u000a          uVar9 = (uint)uVar10;\u000a          uVar13 = uVar5;\u000a        }\u000a        uVar11 = (ulong)uVar9;\u000a      }\u000a      goto joined_r0x0040f1b6;\u000a    }\u000a    string = human_readable(*(uintmax_t *)(current_time + 0x30),init_bigbuf + 0xf8,0,1);\u000a    iVar3 = fprintf((FILE *)stream_00,"%*s",(ulong)(uint)iVar3,string);\u000a    if (iVar3 < 0) {\u000a      uVar13 = 800;\u000a      string = local_3f8;\u000a      goto LAB_0040f3d1;\u000a    }\u000a    if (file_size_width < iVar3) {\u000a      file_size_width = iVar3;\u000a    }\u000a    if ((char)uVar11 != 0) goto LAB_0040f1b8;\u000a  }\u000a  string = local_3f8;\u000a  if ((uVar11 & 1) != 0) {\u000a    __timer = (uintmax_t *)(current_time + 0x58);\u000a    __tp = localtime((time_t *)__timer);\u000a    if (__tp == (tm *)0x0) {\u000a      n = *__timer;\u000a      if ((long)n < 0) {\u000a        string = human_readable(-n,init_bigbuf + 0xf8,0,1);\u000a        sVar6 = strlen(string);\u000a        uVar5 = 0xc - (int)sVar6;\u000a        uVar10 = (ulong)uVar5;\u000a        if ((int)uVar5 < 0) {\u000a          uVar10 = 0;\u000a        }\u000a        iVar3 = fprintf((FILE *)stream_00,"%*s%s ",uVar10,&DAT_0041e869,string);\u000a        string = local_3f8;\u000a        if (iVar3 < 0) {\u000a          uVar13 = 1000;\u000a          uVar11 = 0;\u000a          string = local_3f8;\u000a        }\u000a      }\u000a      else {\u000a        string = human_readable(n,init_bigbuf + 0xf8,0,1);\u000a        iVar3 = fprintf((FILE *)stream_00,"%*s ",0xc,string);\u000a        string = local_3f8;\u000a        if (iVar3 < 0) {\u000a          uVar13 = 0x44c;\u000a          uVar11 = 0;\u000a          string = local_3f8;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((long)*__timer < (long)&stream[-72000].__pad2) {\u000a        __format = "%b %e  %Y";\u000a      }\u000a      else {\u000a        __format = "%b %e  %Y";\u000a        if ((long)*__timer <= (long)&stream[0x10]._offset) {\u000a          __format = "%b %e %H:%M";\u000a        }\u000a      }\u000a      sVar6 = strftime(local_3f8,0x100,__format,__tp);\u000a      string = local_3f8;\u000a      if (sVar6 == 0) {\u000a        lVar12 = 0x100;\u000a        do {\u000a          __s = __s + lVar12 * -2;\u000a          *(undefined8 *)(__s + -8) = 0x40f2c8;\u000a          sVar6 = strftime(__s,lVar12 * 2,__format,__tp,__s[-8]);\u000a          string = __s;\u000a          lVar12 = lVar12 * 2;\u000a        } while (sVar6 == 0);\u000a      }\u000a      *(undefined8 *)(string + -8) = 0x40f2e5;\u000a      iVar3 = fprintf((FILE *)stream_00,"%s ",string);\u000a      if (iVar3 < 0) {\u000a        uVar13 = 900;\u000a        uVar11 = 0;\u000a      }\u000a    }\u000a  }\u000a  if ((uVar11 & 1) != 0) {\u000a    *(undefined8 *)(string + -8) = 0x40f311;\u000a    _Var2 = print_name(name,stream_00,string[-8]);\u000a    uVar11 = (ulong)_Var2;\u000a    if (_Var2 == false) {\u000a      uVar13 = 0x4b0;\u000a    }\u000a  }\u000a  if ((uVar11 & 1) != 0) {\u000a    if ((*(uint *)(current_time + 0x18) & 0xf000) == 0xa000) {\u000a      *(undefined8 *)(string + -8) = 0x40f343;\u000a      __format = areadlinkat((ulong)relname & 0xffffffff,string[-8]);\u000a      if (__format == (char *)0x0) {\u000a        *(undefined8 *)(string + -8) = 0x40f38e;\u000a        puVar7 = (uint *)__errno_location(string[-8]);\u000a        uVar5 = *puVar7;\u000a        *(undefined8 *)(string + -8) = 0x40f3a2;\u000a        error(0,(ulong)uVar5,&DAT_0042542f,name);\u000a      }\u000a      else {\u000a        *(undefined8 *)(string + -8) = 0x40f358;\u000a        iVar3 = fputs(&DAT_004222ae,stream_00,string[-8]);\u000a        if (iVar3 < 0) {\u000a          uVar13 = 0x514;\u000a          uVar11 = 0;\u000a        }\u000a        if ((uVar11 & 1) != 0) {\u000a          *(undefined8 *)(string + -8) = 0x40f37a;\u000a          _Var2 = print_name(__format,stream_00,string[-8]);\u000a          uVar11 = (ulong)_Var2;\u000a          if (_Var2 == false) {\u000a            uVar13 = 0x546;\u000a          }\u000a        }\u000a      }\u000a      *(undefined8 *)(string + -8) = 0x40f3aa;\u000a      free(__format,string[-8]);\u000a    }\u000a    if ((uVar11 & 1) != 0) {\u000a      *(undefined8 *)(string + -8) = 0x40f3bc;\u000a      iVar3 = _IO_putc(10,stream_00,string[-8]);\u000a      if (iVar3 == -1) {\u000a        uVar13 = 0x578;\u000a        uVar11 = 0;\u000a      }\u000a    }\u000a  }\u000a  if ((uVar11 & 1) != 0) {\u000a    return;\u000a  }\u000aLAB_0040f3d1:\u000a  *(undefined8 *)(string + -8) = 0x40f3d6;\u000a  puVar7 = (uint *)__errno_location(string[-8]);\u000a  uVar5 = *puVar7;\u000a  *(undefined8 *)(string + -8) = 0x40f3e9;\u000a  uVar8 = dcgettext(0,"Failed to write output (at stage %d)",5);\u000a  *(undefined8 *)(string + -8) = 0x40f400;\u000a  error(1,(ulong)uVar5,uVar8,(ulong)uVar13);\u000a  return;\u000a}\u000a\u000a
p5260
S'PUSH RBP\nMOV RBP,RSP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x3c8\nMOV R12D,R9D\nMOV qword ptr [RBP + -0x58],R8\nMOV RBX,RCX\nMOV qword ptr [RBP + -0x50],RDX\nMOV dword ptr [RBP + -0x3c],ESI\nMOV R14,RDI\nMOV R13,qword ptr [RBP + 0x18]\nMOV EDI,dword ptr [RBX + 0x18]\nLEA RSI,[RBP + -0x64]\nCALL 0x00410230\nMOV R15D,dword ptr [0x0062dca8]\nMOV RDI,qword ptr [RBX + 0x8]\nLEA RSI,[-0x2f0 + RBP]\nXOR EDX,EDX\nMOV ECX,0x1\nMOV R8D,0x1\nCALL 0x00411370\nMOV RCX,RAX\nMOV ESI,0x422270\nXOR EAX,EAX\nMOV RDI,R13\nMOV EDX,R15D\nCALL 0x00402ba0\nTEST EAX,EAX\nJS 0x0040ee80\nMOV qword ptr [RBP + -0x38],RBX\nMOV qword ptr [RBP + -0x48],R14\nCMP EAX,dword ptr [0x0062dca8]\nJLE 0x0040edcf\nMOV dword ptr [0x0062dca8],EAX\nMOV EDI,0x20\nMOV RSI,R13\nCALL 0x004029b0\nMOV R15D,EAX\nXOR EAX,EAX\nCMP R15D,-0x1\nMOV ECX,0x96\nCMOVNZ ECX,EAX\nMOV dword ptr [RBP + -0x2c],ECX\nMOV R14,R13\nSETNZ R13B\nMOV EBX,dword ptr [0x0062dcac]\nMOV RAX,qword ptr [RBP + -0x38]\nMOV RDI,qword ptr [RAX + 0x40]\nMOVSXD R12,R12D\nLEA RSI,[-0x2f0 + RBP]\nXOR EDX,EDX\nMOV ECX,0x200\nMOV R8,R12\nCALL 0x00411370\nMOV RCX,RAX\nMOV ESI,0x422270\nXOR EAX,EAX\nMOV RDI,R14\nMOV EDX,EBX\nCALL 0x00402ba0\nTEST EAX,EAX\nJS 0x0040ee8b\nCMP EAX,dword ptr [0x0062dcac]\nJLE 0x0040ee44\nMOV dword ptr [0x0062dcac],EAX\nCMP R15D,-0x1\nMOV EBX,R13D\nMOV R14D,dword ptr [RBP + -0x2c]\nJZ 0x0040ee96\nMOV EDI,0x20\nMOV R13,qword ptr [RBP + 0x18]\nMOV RSI,R13\nCALL 0x004029b0\nCMP EAX,-0x1\nMOV EAX,0xfa\nCMOVZ R14D,EAX\nSETNZ AL\nAND BL,AL\nMOV R15,qword ptr [RBP + -0x38]\nTEST BL,BL\nJNZ 0x0040eeac\nJMP 0x0040f3d1\nMOV R14D,0x64\nJMP 0x0040f3d1\nMOV R14D,0xc8\nJMP 0x0040f3d1\nMOV R14D,0x96\nMOV R15,qword ptr [RBP + -0x38]\nMOV R13,qword ptr [RBP + 0x18]\nTEST BL,BL\nJZ 0x0040f3d1\nLEA RDI,[RBP + -0x64]\nMOV RSI,R13\nCALL 0x00402a50\nTEST EAX,EAX\nMOV EAX,0x113\nCMOVS R14D,EAX\nJNS 0x0040eec7\nXOR EBX,EBX\nTEST BL,BL\nJZ 0x0040efbb\nMOV EDX,dword ptr [0x0062dcb0]\nMOV RCX,qword ptr [R15 + 0x10]\nMOV ESI,0x422274\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00402ba0\nTEST EAX,EAX\nJS 0x0040ef7f\nCMP EAX,dword ptr [0x0062dcb0]\nJLE 0x0040eefe\nMOV dword ptr [0x0062dcb0],EAX\nTEST BL,BL\nJZ 0x0040efbb\nMOV EDI,0x20\nMOV RSI,R13\nCALL 0x004029b0\nCMP EAX,-0x1\nMOV EAX,0xfa\nCMOVZ R14D,EAX\nMOV EDI,dword ptr [R15 + 0x1c]\nCALL 0x00411c20\nMOV RBX,R15\nMOV R15,RAX\nTEST R15,R15\nJZ 0x0040ef8a\nXOR ESI,ESI\nMOV RDI,R15\nCALL 0x00412960\nCMP EAX,dword ptr [0x0062dcb4]\nJLE 0x0040ef4b\nMOV dword ptr [0x0062dcb4],EAX\nMOV EDX,dword ptr [0x0062dcb4]\nMOV ESI,0x422279\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,R15\nCALL 0x00402ba0\nTEST EAX,EAX\nSETNS BL\nMOV EAX,0x190\nCMOVS R14D,EAX\nMOV R15,qword ptr [RBP + -0x38]\nTEST BL,0x1\nJNZ 0x0040efc0\nJMP 0x0040f013\nMOV R14D,0x12c\nJMP 0x0040f3d1\nMOV EDX,dword ptr [RBX + 0x1c]\nMOV ESI,0x42227f\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00402ba0\nCMP EAX,dword ptr [0x0062dcb4]\nMOV R15,RBX\nJLE 0x0040efad\nMOV dword ptr [0x0062dcb4],EAX\nTEST EAX,EAX\nSETG BL\nMOV EAX,0x1c2\nCMOVLE R14D,EAX\nTEST BL,0x1\nJZ 0x0040f013\nMOV EDI,dword ptr [R15 + 0x20]\nCALL 0x00411da0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040f0ac\nXOR ESI,ESI\nMOV RDI,RBX\nCALL 0x00412960\nCMP EAX,dword ptr [0x0062dcb8]\nJLE 0x0040efed\nMOV dword ptr [0x0062dcb8],EAX\nMOV EDX,dword ptr [0x0062dcb8]\nMOV ESI,0x422279\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,RBX\nCALL 0x00402ba0\nTEST EAX,EAX\nSETNS BL\nMOV EAX,0x1f4\nCMOVS R14D,EAX\nTEST BL,0x1\nJZ 0x0040f1b3\nMOVZX EAX,word ptr [R15 + 0x18]\nOR EAX,0x4000\nAND EAX,0xf000\nCMP EAX,0x6000\nJNZ 0x0040f10d\nMOV R12D,EBX\nMOV RDI,qword ptr [R15 + 0x28]\nCALL 0x00402d20\nMOV ESI,EAX\nMOV EDX,0x62dcbc\nMOV RDI,R13\nCALL 0x0040f490\nMOV EBX,EAX\nTEST BL,BL\nMOV R15D,0x258\nCMOVNZ R15D,R14D\nJZ 0x0040f064\nMOV EBX,R12D\nTEST BL,0x1\nJZ 0x0040f08e\nXOR R14D,R14D\nMOV ESI,0x41e943\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00402ba0\nTEST EAX,EAX\nMOV EAX,0x271\nCMOVS R15D,EAX\nJS 0x0040f08b\nMOV R14B,BL\nMOV EBX,R14D\nTEST BL,0x1\nJNZ 0x0040f17f\nMOV R14D,R15D\nMOV R15,qword ptr [RBP + -0x38]\nTEST BL,0x1\nJNZ 0x0040f1b8\nJMP 0x0040f1d5\nMOV EDX,dword ptr [0x0062dcb8]\nMOV ECX,dword ptr [R15 + 0x20]\nMOV ESI,0x422286\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00402ba0\nCMP EAX,dword ptr [0x0062dcb8]\nJLE 0x0040f0d3\nMOV dword ptr [0x0062dcb8],EAX\nTEST EAX,EAX\nSETNS BL\nJS 0x0040f40f\nMOV EDI,0x20\nMOV RSI,R13\nCALL 0x004029b0\nCMP EAX,-0x1\nMOV EAX,0x20d\nCMOVZ R14D,EAX\nJNZ 0x0040f013\nXOR EBX,EBX\nTEST BL,0x1\nJNZ 0x0040f01c\nJMP 0x0040f1b3\nMOV dword ptr [RBP + -0x2c],R14D\nMOV R14,R13\nMOV R13D,EBX\nTEST R12D,R12D\nMOV EBX,dword ptr [0x0062dcc4]\nMOV RDI,qword ptr [R15 + 0x30]\nMOV EAX,0x1\nCMOVNS R12,RAX\nLEA RSI,[-0x2f0 + RBP]\nXOR EDX,EDX\nMOV ECX,0x1\nMOV R8,R12\nCALL 0x00411370\nMOV RCX,RAX\nMOV ESI,0x422270\nXOR EAX,EAX\nMOV RDI,R14\nMOV EDX,EBX\nCALL 0x00402ba0\nTEST EAX,EAX\nJS 0x0040f423\nCMP EAX,dword ptr [0x0062dcc4]\nMOV EBX,R13D\nJLE 0x0040f170\nMOV dword ptr [0x0062dcc4],EAX\nMOV R13,qword ptr [RBP + 0x18]\nMOV R14D,dword ptr [RBP + -0x2c]\nTEST BL,0x1\nJNZ 0x0040f1b8\nJMP 0x0040f1d5\nMOV RAX,qword ptr [RBP + -0x38]\nMOV RDI,qword ptr [RAX + 0x28]\nCALL 0x00402e50\nMOV ESI,EAX\nMOV EDX,0x62dcc0\nMOV RDI,R13\nCALL 0x0040f490\nMOV ECX,EAX\nTEST AL,AL\nMOV R14D,0x28a\nCMOVNZ R14D,R15D\nJZ 0x0040f1ad\nMOV CL,BL\nMOV R15,qword ptr [RBP + -0x38]\nMOV EBX,ECX\nTEST BL,0x1\nJZ 0x0040f1d5\nMOV EDI,0x20\nMOV RSI,R13\nCALL 0x004029b0\nCMP EAX,-0x1\nMOV EAX,0x352\nCMOVZ R14D,EAX\nJNZ 0x0040f1d5\nXOR EBX,EBX\nTEST BL,0x1\nJZ 0x0040f2f9\nMOV dword ptr [RBP + -0x2c],EBX\nLEA RBX,[R15 + 0x58]\nMOV RDI,RBX\nCALL 0x00402740\nMOV R15,RAX\nTEST R15,R15\nJZ 0x0040f20f\nMOV RDX,qword ptr [RBP + -0x58]\nLEA RCX,[-0xed4e00 + RDX]\nMOV RAX,qword ptr [RBX]\nCMP RCX,RAX\nJLE 0x0040f263\nMOV EBX,0x422298\nJMP 0x0040f27b\nMOV RDI,qword ptr [RBX]\nTEST RDI,RDI\nJS 0x0040f42b\nLEA RSI,[-0x2f0 + RBP]\nXOR EBX,EBX\nXOR EDX,EDX\nMOV ECX,0x1\nMOV R8D,0x1\nCALL 0x00411370\nMOV RCX,RAX\nMOV ESI,0x4222a9\nMOV EDX,0xc\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00402ba0\nTEST EAX,EAX\nMOV EAX,0x44c\nCMOVS R14D,EAX\nJNS 0x0040f2f2\nJMP 0x0040f2f5\nADD RDX,0xe10\nCMP RAX,RDX\nMOV EAX,0x42228c\nMOV EBX,0x422298\nCMOVLE RBX,RAX\nLEA R12,[-0x3f0 + RBP]\nMOV ESI,0x100\nMOV RDI,R12\nMOV RDX,RBX\nMOV RCX,R15\nCALL 0x00402d70\nTEST RAX,RAX\nJNZ 0x0040f2cd\nMOV R13D,0x100\nMOV R12,RSP\nLEA RAX,[R13 + R13*0x1 + 0xf]\nLEA R13,[R13 + R13*0x1]\nAND RAX,-0x10\nSUB R12,RAX\nMOV RSP,R12\nMOV RDI,R12\nMOV RSI,R13\nMOV RDX,RBX\nMOV RCX,R15\nCALL 0x00402d70\nTEST RAX,RAX\nJZ 0x0040f2a0\nXOR EBX,EBX\nMOV ESI,0x4222a5\nXOR EAX,EAX\nMOV R13,qword ptr [RBP + 0x18]\nMOV RDI,R13\nMOV RDX,R12\nCALL 0x00402ba0\nTEST EAX,EAX\nMOV EAX,0x384\nCMOVS R14D,EAX\nJS 0x0040f2f5\nMOV EBX,dword ptr [RBP + -0x2c]\nMOV R15,qword ptr [RBP + -0x38]\nMOV R12D,dword ptr [RBP + 0x10]\nTEST BL,0x1\nJZ 0x0040f31e\nMOV RDI,qword ptr [RBP + -0x48]\nMOV RSI,R13\nMOV EDX,R12D\nCALL 0x0040f4c0\nMOV BL,AL\nTEST BL,BL\nMOV EAX,0x4b0\nCMOVZ R14D,EAX\nTEST BL,0x1\nJZ 0x0040f3cc\nMOV EAX,0xf000\nAND EAX,dword ptr [R15 + 0x18]\nCMP EAX,0xa000\nJNZ 0x0040f3aa\nMOV EDI,dword ptr [RBP + -0x3c]\nMOV RSI,qword ptr [RBP + -0x50]\nCALL 0x0040fc30\nMOV R15,RAX\nTEST R15,R15\nJZ 0x0040f389\nMOV EDI,0x4222ae\nMOV RSI,R13\nCALL 0x00402a50\nTEST EAX,EAX\nMOV EAX,0x514\nCMOVS R14D,EAX\nJNS 0x0040f367\nXOR EBX,EBX\nTEST BL,0x1\nJZ 0x0040f3a2\nMOV RDI,R15\nMOV RSI,R13\nMOV EDX,R12D\nCALL 0x0040f4c0\nMOV BL,AL\nTEST BL,BL\nMOV EAX,0x546\nCMOVZ R14D,EAX\nJMP 0x0040f3a2\nCALL 0x00402770\nMOV ESI,dword ptr [RAX]\nXOR EDI,EDI\nMOV EDX,0x42542f\nXOR EAX,EAX\nMOV RCX,qword ptr [RBP + -0x48]\nCALL 0x00402d90\nMOV RDI,R15\nCALL 0x00402710\nTEST BL,0x1\nJZ 0x0040f3cc\nMOV EDI,0xa\nMOV RSI,R13\nCALL 0x004029b0\nCMP EAX,-0x1\nMOV EAX,0x578\nCMOVZ R14D,EAX\nJNZ 0x0040f3cc\nXOR EBX,EBX\nTEST BL,0x1\nJNZ 0x0040f400\nCALL 0x00402770\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x4222b3\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nMOV ECX,R14D\nCALL 0x00402d90\nLEA RSP,[RBP + -0x28]\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV R14D,0x226\nTEST BL,0x1\nJNZ 0x0040f01c\nJMP 0x0040f1b3\nMOV R14D,0x320\nJMP 0x0040f3d1\nNEG RDI\nLEA RSI,[-0x2f0 + RBP]\nXOR R15D,R15D\nXOR EDX,EDX\nMOV ECX,0x1\nMOV R8D,0x1\nCALL 0x00411370\nMOV RBX,RAX\nMOV RDI,RBX\nCALL 0x00402930\nMOV EDX,0xc\nSUB EDX,EAX\nCMOVS EDX,R15D\nMOV ESI,0x4222a2\nMOV ECX,0x41e869\nXOR EAX,EAX\nMOV RDI,R13\nMOV R8,RBX\nCALL 0x00402ba0\nTEST EAX,EAX\nMOV EAX,0x3e8\nCMOVS R14D,EAX\nJS 0x0040f488\nMOV R15D,dword ptr [RBP + -0x2c]\nMOV BL,R15B\nJMP 0x0040f2f5\n'
p5261
S'55\n48 89 e5\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec c8 03 00 00\n45 89 cc\n4c 89 45 a8\n48 89 cb\n48 89 55 b0\n89 75 c4\n49 89 fe\n4c 8b 6d 18\n8b 7b 18\n48 8d 75 9c\ne8 b8 14 00 00\n44 8b 3d 29 ef 21 00\n48 8b 7b 08\n48 8d b5 10 fd ff ff\n31 d2\nb9 01 00 00 00\n41 b8 01 00 00 00\ne8 d4 25 00 00\n48 89 c1\nbe 70 22 42 00\n31 c0\n4c 89 ef\n44 89 fa\ne8 ef 3d ff ff\n85 c0\n0f 88 c7 00 00 00\n48 89 5d c8\n4c 89 75 b8\n3b 05 e1 ee 21 00\n7e 06\n89 05 d9 ee 21 00\nbf 20 00 00 00\n4c 89 ee\ne8 d4 3b ff ff\n41 89 c7\n31 c0\n41 83 ff ff\nb9 96 00 00 00\n0f 45 c8\n89 4d d4\n4d 89 ee\n41 0f 95 c5\n8b 1d af ee 21 00\n48 8b 45 c8\n48 8b 78 40\n4d 63 e4\n48 8d b5 10 fd ff ff\n31 d2\nb9 00 02 00 00\n4d 89 e0\ne8 52 25 00 00\n48 89 c1\nbe 70 22 42 00\n31 c0\n4c 89 f7\n89 da\ne8 6e 3d ff ff\n85 c0\n78 55\n3b 05 70 ee 21 00\n7e 06\n89 05 68 ee 21 00\n41 83 ff ff\n44 89 eb\n44 8b 75 d4\n74 45\nbf 20 00 00 00\n4c 8b 6d 18\n4c 89 ee\ne8 4e 3b ff ff\n83 f8 ff\nb8 fa 00 00 00\n44 0f 44 f0\n0f 95 c0\n20 c3\n4c 8b 7d c8\n84 db\n75 31\ne9 51 05 00 00\n41 be 64 00 00 00\ne9 46 05 00 00\n41 be c8 00 00 00\ne9 3b 05 00 00\n41 be 96 00 00 00\n4c 8b 7d c8\n4c 8b 6d 18\n84 db\n0f 84 25 05 00 00\n48 8d 7d 9c\n4c 89 ee\ne8 98 3b ff ff\n85 c0\nb8 13 01 00 00\n44 0f 48 f0\n79 02\n31 db\n84 db\n0f 84 ec 00 00 00\n8b 15 db ed 21 00\n49 8b 4f 10\nbe 74 22 42 00\n31 c0\n4c 89 ef\ne8 b8 3c ff ff\n85 c0\n0f 88 8f 00 00 00\n3b 05 ba ed 21 00\n7e 06\n89 05 b2 ed 21 00\n84 db\n0f 84 b5 00 00 00\nbf 20 00 00 00\n4c 89 ee\ne8 9d 3a ff ff\n83 f8 ff\nb8 fa 00 00 00\n44 0f 44 f0\n41 8b 7f 1c\ne8 f8 2c 00 00\n4c 89 fb\n49 89 c7\n4d 85 ff\n74 57\n31 f6\n4c 89 ff\ne8 23 3a 00 00\n3b 05 71 ed 21 00\n7e 06\n89 05 69 ed 21 00\n8b 15 63 ed 21 00\nbe 79 22 42 00\n31 c0\n4c 89 ef\n4c 89 f9\ne8 3d 3c ff ff\n85 c0\n0f 99 c3\nb8 90 01 00 00\n44 0f 48 f0\n4c 8b 7d c8\nf6 c3 01\n75 46\ne9 94 00 00 00\n41 be 2c 01 00 00\ne9 47 04 00 00\n8b 53 1c\nbe 7f 22 42 00\n31 c0\n4c 89 ef\ne8 04 3c ff ff\n3b 05 12 ed 21 00\n49 89 df\n7e 06\n89 05 07 ed 21 00\n85 c0\n0f 9f c3\nb8 c2 01 00 00\n44 0f 4e f0\nf6 c3 01\n74 53\n41 8b 7f 20\ne8 d7 2d 00 00\n48 89 c3\n48 85 db\n0f 84 d7 00 00 00\n31 f6\n48 89 df\ne8 81 39 00 00\n3b 05 d3 ec 21 00\n7e 06\n89 05 cb ec 21 00\n8b 15 c5 ec 21 00\nbe 79 22 42 00\n31 c0\n4c 89 ef\n48 89 d9\ne8 9b 3b ff ff\n85 c0\n0f 99 c3\nb8 f4 01 00 00\n44 0f 48 f0\nf6 c3 01\n0f 84 97 01 00 00\n41 0f b7 47 18\n0d 00 40 00 00\n25 00 f0 00 00\n3d 00 60 00 00\n0f 85 d7 00 00 00\n41 89 dc\n49 8b 7f 28\ne8 de 3c ff ff\n89 c6\nba bc dc 62 00\n4c 89 ef\ne8 3f 04 00 00\n89 c3\n84 db\n41 bf 58 02 00 00\n45 0f 45 fe\n74 03\n44 89 e3\nf6 c3 01\n74 25\n45 31 f6\nbe 43 e9 41 00\n31 c0\n4c 89 ef\ne8 25 3b ff ff\n85 c0\nb8 71 02 00 00\n44 0f 48 f8\n78 03\n41 88 de\n44 89 f3\nf6 c3 01\n0f 85 e8 00 00 00\n45 89 fe\n4c 8b 7d c8\nf6 c3 01\n0f 85 11 01 00 00\ne9 29 01 00 00\n8b 15 06 ec 21 00\n41 8b 4f 20\nbe 86 22 42 00\n31 c0\n4c 89 ef\ne8 db 3a ff ff\n3b 05 ed eb 21 00\n7e 06\n89 05 e5 eb 21 00\n85 c0\n0f 99 c3\n0f 88 31 03 00 00\nbf 20 00 00 00\n4c 89 ee\ne8 c5 38 ff ff\n83 f8 ff\nb8 0d 02 00 00\n44 0f 44 f0\n0f 85 16 ff ff ff\n31 db\nf6 c3 01\n0f 85 14 ff ff ff\ne9 a6 00 00 00\n44 89 75 d4\n4d 89 ee\n41 89 dd\n45 85 e4\n8b 1d a4 eb 21 00\n49 8b 7f 30\nb8 01 00 00 00\n4c 0f 49 e0\n48 8d b5 10 fd ff ff\n31 d2\nb9 01 00 00 00\n4d 89 e0\ne8 2d 22 00 00\n48 89 c1\nbe 70 22 42 00\n31 c0\n4c 89 f7\n89 da\ne8 49 3a ff ff\n85 c0\n0f 88 c4 02 00 00\n3b 05 5f eb 21 00\n44 89 eb\n7e 06\n89 05 54 eb 21 00\n4c 8b 6d 18\n44 8b 75 d4\nf6 c3 01\n75 3b\neb 56\n48 8b 45 c8\n48 8b 78 28\ne8 c4 3c ff ff\n89 c6\nba c0 dc 62 00\n4c 89 ef\ne8 f5 02 00 00\n89 c1\n84 c0\n41 be 8a 02 00 00\n45 0f 45 f7\n74 02\n88 d9\n4c 8b 7d c8\n89 cb\nf6 c3 01\n74 1d\nbf 20 00 00 00\n4c 89 ee\ne8 eb 37 ff ff\n83 f8 ff\nb8 52 03 00 00\n44 0f 44 f0\n75 02\n31 db\nf6 c3 01\n0f 84 1b 01 00 00\n89 5d d4\n49 8d 5f 58\n48 89 df\ne8 53 35 ff ff\n49 89 c7\n4d 85 ff\n74 1a\n48 8b 55 a8\n48 8d 8a 00 b2 12 ff\n48 8b 03\n48 39 c1\n7e 5b\nbb 98 22 42 00\neb 6c\n48 8b 3b\n48 85 ff\n0f 88 10 02 00 00\n48 8d b5 10 fd ff ff\n31 db\n31 d2\nb9 01 00 00 00\n41 b8 01 00 00 00\ne8 3a 21 00 00\n48 89 c1\nbe a9 22 42 00\nba 0c 00 00 00\n31 c0\n4c 89 ef\ne8 53 39 ff ff\n85 c0\nb8 4c 04 00 00\n44 0f 48 f0\n0f 89 94 00 00 00\ne9 92 00 00 00\n48 81 c2 10 0e 00 00\n48 39 d0\nb8 8c 22 42 00\nbb 98 22 42 00\n48 0f 4e d8\n4c 8d a5 10 fc ff ff\nbe 00 01 00 00\n4c 89 e7\n48 89 da\n4c 89 f9\ne8 db 3a ff ff\n48 85 c0\n75 33\n41 bd 00 01 00 00\n49 89 e4\n4b 8d 44 2d 0f\n4f 8d 6c 2d 00\n48 83 e0 f0\n49 29 c4\n4c 89 e4\n4c 89 e7\n4c 89 ee\n48 89 da\n4c 89 f9\ne8 a8 3a ff ff\n48 85 c0\n74 d3\n31 db\nbe a5 22 42 00\n31 c0\n4c 8b 6d 18\n4c 89 ef\n4c 89 e2\ne8 bb 38 ff ff\n85 c0\nb8 84 03 00 00\n44 0f 48 f0\n78 03\n8b 5d d4\n4c 8b 7d c8\n44 8b 65 10\nf6 c3 01\n74 1c\n48 8b 7d b8\n4c 89 ee\n44 89 e2\ne8 af 01 00 00\n88 c3\n84 db\nb8 b0 04 00 00\n44 0f 44 f0\nf6 c3 01\n0f 84 a5 00 00 00\nb8 00 f0 00 00\n41 23 47 18\n3d 00 a0 00 00\n75 73\n8b 7d c4\n48 8b 75 b0\ne8 ed 08 00 00\n49 89 c7\n4d 85 ff\n74 3e\nbf ae 22 42 00\n4c 89 ee\ne8 f8 36 ff ff\n85 c0\nb8 14 05 00 00\n44 0f 48 f0\n79 02\n31 db\nf6 c3 01\n74 36\n4c 89 ff\n4c 89 ee\n44 89 e2\ne8 46 01 00 00\n88 c3\n84 db\nb8 46 05 00 00\n44 0f 44 f0\neb 19\ne8 e2 33 ff ff\n8b 30\n31 ff\nba 2f 54 42 00\n31 c0\n48 8b 4d b8\ne8 ee 39 ff ff\n4c 89 ff\ne8 66 33 ff ff\nf6 c3 01\n74 1d\nbf 0a 00 00 00\n4c 89 ee\ne8 f4 35 ff ff\n83 f8 ff\nb8 78 05 00 00\n44 0f 44 f0\n75 02\n31 db\nf6 c3 01\n75 2f\ne8 9a 33 ff ff\n8b 18\n31 ff\nbe b3 22 42 00\nba 05 00 00 00\ne8 27 35 ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ca\n44 89 f1\ne8 90 39 ff ff\n48 8d 65 d8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n41 be 26 02 00 00\nf6 c3 01\n0f 85 fe fb ff ff\ne9 90 fd ff ff\n41 be 20 03 00 00\neb a6\n48 f7 df\n48 8d b5 10 fd ff ff\n45 31 ff\n31 d2\nb9 01 00 00 00\n41 b8 01 00 00 00\ne8 26 1f 00 00\n48 89 c3\n48 89 df\ne8 db 34 ff ff\nba 0c 00 00 00\n29 c2\n41 0f 48 d7\nbe a2 22 42 00\nb9 69 e8 41 00\n31 c0\n4c 89 ef\n49 89 d8\ne8 29 37 ff ff\n85 c0\nb8 e8 03 00 00\n44 0f 48 f0\n78 04\n44 8b 7d d4\n44 88 fb\ne9 65 fe ff ff\n'
p5262
S'.text:000000000040ed40\n.text:000000000040ed41\n.text:000000000040ed44\n.text:000000000040ed46\n.text:000000000040ed48\n.text:000000000040ed4a\n.text:000000000040ed4c\n.text:000000000040ed4d\n.text:000000000040ed54\n.text:000000000040ed57\n.text:000000000040ed5b\n.text:000000000040ed5e\n.text:000000000040ed62\n.text:000000000040ed65\n.text:000000000040ed68\n.text:000000000040ed6c\n.text:000000000040ed6f\n.text:000000000040ed73\n.text:000000000040ed78\n.text:000000000040ed7f\n.text:000000000040ed83\n.text:000000000040ed8a\n.text:000000000040ed8c\n.text:000000000040ed91\n.text:000000000040ed97\n.text:000000000040ed9c\n.text:000000000040ed9f\n.text:000000000040eda4\n.text:000000000040eda6\n.text:000000000040eda9\n.text:000000000040edac\n.text:000000000040edb1\n.text:000000000040edb3\n.text:000000000040edb9\n.text:000000000040edbd\n.text:000000000040edc1\n.text:000000000040edc7\n.text:000000000040edc9\n.text:000000000040edcf\n.text:000000000040edd4\n.text:000000000040edd7\n.text:000000000040eddc\n.text:000000000040eddf\n.text:000000000040ede1\n.text:000000000040ede5\n.text:000000000040edea\n.text:000000000040eded\n.text:000000000040edf0\n.text:000000000040edf3\n.text:000000000040edf7\n.text:000000000040edfd\n.text:000000000040ee01\n.text:000000000040ee05\n.text:000000000040ee08\n.text:000000000040ee0f\n.text:000000000040ee11\n.text:000000000040ee16\n.text:000000000040ee19\n.text:000000000040ee1e\n.text:000000000040ee21\n.text:000000000040ee26\n.text:000000000040ee28\n.text:000000000040ee2b\n.text:000000000040ee2d\n.text:000000000040ee32\n.text:000000000040ee34\n.text:000000000040ee36\n.text:000000000040ee3c\n.text:000000000040ee3e\n.text:000000000040ee44\n.text:000000000040ee48\n.text:000000000040ee4b\n.text:000000000040ee4f\n.text:000000000040ee51\n.text:000000000040ee56\n.text:000000000040ee5a\n.text:000000000040ee5d\n.text:000000000040ee62\n.text:000000000040ee65\n.text:000000000040ee6a\n.text:000000000040ee6e\n.text:000000000040ee71\n.text:000000000040ee73\n.text:000000000040ee77\n.text:000000000040ee79\n.text:000000000040ee7b\n.text:000000000040ee80\n.text:000000000040ee86\n.text:000000000040ee8b\n.text:000000000040ee91\n.text:000000000040ee96\n.text:000000000040ee9c\n.text:000000000040eea0\n.text:000000000040eea4\n.text:000000000040eea6\n.text:000000000040eeac\n.text:000000000040eeb0\n.text:000000000040eeb3\n.text:000000000040eeb8\n.text:000000000040eeba\n.text:000000000040eebf\n.text:000000000040eec3\n.text:000000000040eec5\n.text:000000000040eec7\n.text:000000000040eec9\n.text:000000000040eecf\n.text:000000000040eed5\n.text:000000000040eed9\n.text:000000000040eede\n.text:000000000040eee0\n.text:000000000040eee3\n.text:000000000040eee8\n.text:000000000040eeea\n.text:000000000040eef0\n.text:000000000040eef6\n.text:000000000040eef8\n.text:000000000040eefe\n.text:000000000040ef00\n.text:000000000040ef06\n.text:000000000040ef0b\n.text:000000000040ef0e\n.text:000000000040ef13\n.text:000000000040ef16\n.text:000000000040ef1b\n.text:000000000040ef1f\n.text:000000000040ef23\n.text:000000000040ef28\n.text:000000000040ef2b\n.text:000000000040ef2e\n.text:000000000040ef31\n.text:000000000040ef33\n.text:000000000040ef35\n.text:000000000040ef38\n.text:000000000040ef3d\n.text:000000000040ef43\n.text:000000000040ef45\n.text:000000000040ef4b\n.text:000000000040ef51\n.text:000000000040ef56\n.text:000000000040ef58\n.text:000000000040ef5b\n.text:000000000040ef5e\n.text:000000000040ef63\n.text:000000000040ef65\n.text:000000000040ef68\n.text:000000000040ef6d\n.text:000000000040ef71\n.text:000000000040ef75\n.text:000000000040ef78\n.text:000000000040ef7a\n.text:000000000040ef7f\n.text:000000000040ef85\n.text:000000000040ef8a\n.text:000000000040ef8d\n.text:000000000040ef92\n.text:000000000040ef94\n.text:000000000040ef97\n.text:000000000040ef9c\n.text:000000000040efa2\n.text:000000000040efa5\n.text:000000000040efa7\n.text:000000000040efad\n.text:000000000040efaf\n.text:000000000040efb2\n.text:000000000040efb7\n.text:000000000040efbb\n.text:000000000040efbe\n.text:000000000040efc0\n.text:000000000040efc4\n.text:000000000040efc9\n.text:000000000040efcc\n.text:000000000040efcf\n.text:000000000040efd5\n.text:000000000040efd7\n.text:000000000040efda\n.text:000000000040efdf\n.text:000000000040efe5\n.text:000000000040efe7\n.text:000000000040efed\n.text:000000000040eff3\n.text:000000000040eff8\n.text:000000000040effa\n.text:000000000040effd\n.text:000000000040f000\n.text:000000000040f005\n.text:000000000040f007\n.text:000000000040f00a\n.text:000000000040f00f\n.text:000000000040f013\n.text:000000000040f016\n.text:000000000040f01c\n.text:000000000040f021\n.text:000000000040f026\n.text:000000000040f02b\n.text:000000000040f030\n.text:000000000040f036\n.text:000000000040f039\n.text:000000000040f03d\n.text:000000000040f042\n.text:000000000040f044\n.text:000000000040f049\n.text:000000000040f04c\n.text:000000000040f051\n.text:000000000040f053\n.text:000000000040f055\n.text:000000000040f05b\n.text:000000000040f05f\n.text:000000000040f061\n.text:000000000040f064\n.text:000000000040f067\n.text:000000000040f069\n.text:000000000040f06c\n.text:000000000040f071\n.text:000000000040f073\n.text:000000000040f076\n.text:000000000040f07b\n.text:000000000040f07d\n.text:000000000040f082\n.text:000000000040f086\n.text:000000000040f088\n.text:000000000040f08b\n.text:000000000040f08e\n.text:000000000040f091\n.text:000000000040f097\n.text:000000000040f09a\n.text:000000000040f09e\n.text:000000000040f0a1\n.text:000000000040f0a7\n.text:000000000040f0ac\n.text:000000000040f0b2\n.text:000000000040f0b6\n.text:000000000040f0bb\n.text:000000000040f0bd\n.text:000000000040f0c0\n.text:000000000040f0c5\n.text:000000000040f0cb\n.text:000000000040f0cd\n.text:000000000040f0d3\n.text:000000000040f0d5\n.text:000000000040f0d8\n.text:000000000040f0de\n.text:000000000040f0e3\n.text:000000000040f0e6\n.text:000000000040f0eb\n.text:000000000040f0ee\n.text:000000000040f0f3\n.text:000000000040f0f7\n.text:000000000040f0fd\n.text:000000000040f0ff\n.text:000000000040f102\n.text:000000000040f108\n.text:000000000040f10d\n.text:000000000040f111\n.text:000000000040f114\n.text:000000000040f117\n.text:000000000040f11a\n.text:000000000040f120\n.text:000000000040f124\n.text:000000000040f129\n.text:000000000040f12d\n.text:000000000040f134\n.text:000000000040f136\n.text:000000000040f13b\n.text:000000000040f13e\n.text:000000000040f143\n.text:000000000040f146\n.text:000000000040f14b\n.text:000000000040f14d\n.text:000000000040f150\n.text:000000000040f152\n.text:000000000040f157\n.text:000000000040f159\n.text:000000000040f15f\n.text:000000000040f165\n.text:000000000040f168\n.text:000000000040f16a\n.text:000000000040f170\n.text:000000000040f174\n.text:000000000040f178\n.text:000000000040f17b\n.text:000000000040f17d\n.text:000000000040f17f\n.text:000000000040f183\n.text:000000000040f187\n.text:000000000040f18c\n.text:000000000040f18e\n.text:000000000040f193\n.text:000000000040f196\n.text:000000000040f19b\n.text:000000000040f19d\n.text:000000000040f19f\n.text:000000000040f1a5\n.text:000000000040f1a9\n.text:000000000040f1ab\n.text:000000000040f1ad\n.text:000000000040f1b1\n.text:000000000040f1b3\n.text:000000000040f1b6\n.text:000000000040f1b8\n.text:000000000040f1bd\n.text:000000000040f1c0\n.text:000000000040f1c5\n.text:000000000040f1c8\n.text:000000000040f1cd\n.text:000000000040f1d1\n.text:000000000040f1d3\n.text:000000000040f1d5\n.text:000000000040f1d8\n.text:000000000040f1de\n.text:000000000040f1e1\n.text:000000000040f1e5\n.text:000000000040f1e8\n.text:000000000040f1ed\n.text:000000000040f1f0\n.text:000000000040f1f3\n.text:000000000040f1f5\n.text:000000000040f1f9\n.text:000000000040f200\n.text:000000000040f203\n.text:000000000040f206\n.text:000000000040f208\n.text:000000000040f20d\n.text:000000000040f20f\n.text:000000000040f212\n.text:000000000040f215\n.text:000000000040f21b\n.text:000000000040f222\n.text:000000000040f224\n.text:000000000040f226\n.text:000000000040f22b\n.text:000000000040f231\n.text:000000000040f236\n.text:000000000040f239\n.text:000000000040f23e\n.text:000000000040f243\n.text:000000000040f245\n.text:000000000040f248\n.text:000000000040f24d\n.text:000000000040f24f\n.text:000000000040f254\n.text:000000000040f258\n.text:000000000040f25e\n.text:000000000040f263\n.text:000000000040f26a\n.text:000000000040f26d\n.text:000000000040f272\n.text:000000000040f277\n.text:000000000040f27b\n.text:000000000040f282\n.text:000000000040f287\n.text:000000000040f28a\n.text:000000000040f28d\n.text:000000000040f290\n.text:000000000040f295\n.text:000000000040f298\n.text:000000000040f29a\n.text:000000000040f2a0\n.text:000000000040f2a3\n.text:000000000040f2a8\n.text:000000000040f2ad\n.text:000000000040f2b1\n.text:000000000040f2b4\n.text:000000000040f2b7\n.text:000000000040f2ba\n.text:000000000040f2bd\n.text:000000000040f2c0\n.text:000000000040f2c3\n.text:000000000040f2c8\n.text:000000000040f2cb\n.text:000000000040f2cd\n.text:000000000040f2cf\n.text:000000000040f2d4\n.text:000000000040f2d6\n.text:000000000040f2da\n.text:000000000040f2dd\n.text:000000000040f2e0\n.text:000000000040f2e5\n.text:000000000040f2e7\n.text:000000000040f2ec\n.text:000000000040f2f0\n.text:000000000040f2f2\n.text:000000000040f2f5\n.text:000000000040f2f9\n.text:000000000040f2fd\n.text:000000000040f300\n.text:000000000040f302\n.text:000000000040f306\n.text:000000000040f309\n.text:000000000040f30c\n.text:000000000040f311\n.text:000000000040f313\n.text:000000000040f315\n.text:000000000040f31a\n.text:000000000040f31e\n.text:000000000040f321\n.text:000000000040f327\n.text:000000000040f32c\n.text:000000000040f330\n.text:000000000040f335\n.text:000000000040f337\n.text:000000000040f33a\n.text:000000000040f33e\n.text:000000000040f343\n.text:000000000040f346\n.text:000000000040f349\n.text:000000000040f34b\n.text:000000000040f350\n.text:000000000040f353\n.text:000000000040f358\n.text:000000000040f35a\n.text:000000000040f35f\n.text:000000000040f363\n.text:000000000040f365\n.text:000000000040f367\n.text:000000000040f36a\n.text:000000000040f36c\n.text:000000000040f36f\n.text:000000000040f372\n.text:000000000040f375\n.text:000000000040f37a\n.text:000000000040f37c\n.text:000000000040f37e\n.text:000000000040f383\n.text:000000000040f387\n.text:000000000040f389\n.text:000000000040f38e\n.text:000000000040f390\n.text:000000000040f392\n.text:000000000040f397\n.text:000000000040f399\n.text:000000000040f39d\n.text:000000000040f3a2\n.text:000000000040f3a5\n.text:000000000040f3aa\n.text:000000000040f3ad\n.text:000000000040f3af\n.text:000000000040f3b4\n.text:000000000040f3b7\n.text:000000000040f3bc\n.text:000000000040f3bf\n.text:000000000040f3c4\n.text:000000000040f3c8\n.text:000000000040f3ca\n.text:000000000040f3cc\n.text:000000000040f3cf\n.text:000000000040f3d1\n.text:000000000040f3d6\n.text:000000000040f3d8\n.text:000000000040f3da\n.text:000000000040f3df\n.text:000000000040f3e4\n.text:000000000040f3e9\n.text:000000000040f3ec\n.text:000000000040f3f1\n.text:000000000040f3f3\n.text:000000000040f3f5\n.text:000000000040f3f8\n.text:000000000040f3fb\n.text:000000000040f400\n.text:000000000040f404\n.text:000000000040f405\n.text:000000000040f407\n.text:000000000040f409\n.text:000000000040f40b\n.text:000000000040f40d\n.text:000000000040f40e\n.text:000000000040f40f\n.text:000000000040f415\n.text:000000000040f418\n.text:000000000040f41e\n.text:000000000040f423\n.text:000000000040f429\n.text:000000000040f42b\n.text:000000000040f42e\n.text:000000000040f435\n.text:000000000040f438\n.text:000000000040f43a\n.text:000000000040f43f\n.text:000000000040f445\n.text:000000000040f44a\n.text:000000000040f44d\n.text:000000000040f450\n.text:000000000040f455\n.text:000000000040f45a\n.text:000000000040f45c\n.text:000000000040f460\n.text:000000000040f465\n.text:000000000040f46a\n.text:000000000040f46c\n.text:000000000040f46f\n.text:000000000040f472\n.text:000000000040f477\n.text:000000000040f479\n.text:000000000040f47e\n.text:000000000040f482\n.text:000000000040f484\n.text:000000000040f488\n.text:000000000040f48b\n'
p5263
tp5264
sS'gnu_dev_makedev'
p5265
(S'\n__stdcall gnu_dev_makedev(uint __major, uint __minor)\n'
p5266
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aulonglong gnu_dev_makedev(uint __major,uint __minor)\u000a\u000a{\u000a  ulonglong uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_gnu_dev_makedev_0062d448)();\u000a  return uVar1;\u000a}\u000a\u000a
p5267
S'JMP qword ptr [0x0062d448]\n'
p5268
S'ff 25 f2 a4 22 00\n'
p5269
S'.plt:0000000000402f50\n'
p5270
tp5271
sS'ranged_convert'
p5272
(S'\n__stdcall ranged_convert(anon_subr_tm_ptr_time_t_ptr_tm_ptr * convert, long_int * t, tm * tp)\n'
p5273
V\u000atm * ranged_convert(tm *(*convert)(time_t *,tm *),long_int *t,tm *tp)\u000a\u000a{\u000a  tm *ptVar1;\u000a  long t_00;\u000a  long_int a;\u000a  long b;\u000a  \u000a  ptVar1 = convert_time(convert,*t,tp);\u000a  if (ptVar1 == (tm *)0x0) {\u000a    b = *t;\u000a    ptVar1 = (tm *)0x0;\u000a    if ((b != 0) && ((t_00 = long_int_avg(0,b), t_00 == 0 || (t_00 == b)))) {\u000a      a = 0;\u000a      do {\u000a        ptVar1 = convert_time(convert,t_00,tp);\u000a        if (ptVar1 != (tm *)0x0) {\u000a          a = t_00;\u000a          t_00 = b;\u000a        }\u000a        b = t_00;\u000a        t_00 = long_int_avg(a,b);\u000a      } while ((t_00 == a) || (t_00 == b));\u000a      if ((a != 0) && (ptVar1 == (tm *)0x0)) {\u000a        ptVar1 = convert_time(convert,a,tp);\u000a        return ptVar1;\u000a      }\u000a    }\u000a  }\u000a  return ptVar1;\u000a}\u000a\u000a
p5274
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV RBX,RSI\nMOV R15,RDI\nMOV RSI,qword ptr [RBX]\nCALL 0x0041a6b0\nMOV R12,RAX\nTEST R12,R12\nJZ 0x0041a606\nMOV RAX,R12\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV R13,qword ptr [RBX]\nXOR R12D,R12D\nTEST R13,R13\nJZ 0x0041a5f4\nXOR EDI,EDI\nMOV RSI,R13\nCALL 0x0041a700\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x0041a628\nCMP RBP,R13\nJNZ 0x0041a5f4\nXOR EBX,EBX\nNOP word ptr [RAX + RAX*0x1]\nMOV RDI,R15\nMOV RSI,RBP\nMOV RDX,R14\nCALL 0x0041a6b0\nMOV R12,RAX\nTEST R12,R12\nCMOVZ R13,RBP\nCMOVNZ RBX,RBP\nMOV RDI,RBX\nMOV RSI,R13\nCALL 0x0041a700\nMOV RBP,RAX\nCMP RBP,RBX\nJZ 0x0041a630\nCMP RBP,R13\nJZ 0x0041a630\nTEST RBX,RBX\nJZ 0x0041a5f4\nTEST R12,R12\nJNZ 0x0041a5f4\nMOV RDI,R15\nMOV RSI,RBX\nMOV RDX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x0041a6b0\n'
p5275
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n48 89 f3\n49 89 ff\n48 8b 33\ne8 c4 00 00 00\n49 89 c4\n4d 85 e4\n74 12\n4c 89 e0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n4c 8b 2b\n45 31 e4\n4d 85 ed\n74 e3\n31 ff\n4c 89 ee\ne8 e5 00 00 00\n48 89 c5\n48 85 ed\n74 05\n4c 39 ed\n75 cc\n31 db\n66 0f 1f 44 00 00\n4c 89 ff\n48 89 ee\n4c 89 f2\ne8 72 00 00 00\n49 89 c4\n4d 85 e4\n4c 0f 44 ed\n48 0f 45 dd\n48 89 df\n4c 89 ee\ne8 a9 00 00 00\n48 89 c5\n48 39 dd\n74 d1\n4c 39 ed\n74 cc\n48 85 db\n74 8b\n4d 85 e4\n75 86\n4c 89 ff\n48 89 de\n4c 89 f2\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 29\n'
p5276
S'.text:000000000041a5d0\n.text:000000000041a5d1\n.text:000000000041a5d3\n.text:000000000041a5d5\n.text:000000000041a5d7\n.text:000000000041a5d9\n.text:000000000041a5da\n.text:000000000041a5db\n.text:000000000041a5de\n.text:000000000041a5e1\n.text:000000000041a5e4\n.text:000000000041a5e7\n.text:000000000041a5ec\n.text:000000000041a5ef\n.text:000000000041a5f2\n.text:000000000041a5f4\n.text:000000000041a5f7\n.text:000000000041a5fb\n.text:000000000041a5fc\n.text:000000000041a5fe\n.text:000000000041a600\n.text:000000000041a602\n.text:000000000041a604\n.text:000000000041a605\n.text:000000000041a606\n.text:000000000041a609\n.text:000000000041a60c\n.text:000000000041a60f\n.text:000000000041a611\n.text:000000000041a613\n.text:000000000041a616\n.text:000000000041a61b\n.text:000000000041a61e\n.text:000000000041a621\n.text:000000000041a623\n.text:000000000041a626\n.text:000000000041a628\n.text:000000000041a62a\n.text:000000000041a630\n.text:000000000041a633\n.text:000000000041a636\n.text:000000000041a639\n.text:000000000041a63e\n.text:000000000041a641\n.text:000000000041a644\n.text:000000000041a648\n.text:000000000041a64c\n.text:000000000041a64f\n.text:000000000041a652\n.text:000000000041a657\n.text:000000000041a65a\n.text:000000000041a65d\n.text:000000000041a65f\n.text:000000000041a662\n.text:000000000041a664\n.text:000000000041a667\n.text:000000000041a669\n.text:000000000041a66c\n.text:000000000041a66e\n.text:000000000041a671\n.text:000000000041a674\n.text:000000000041a677\n.text:000000000041a67b\n.text:000000000041a67c\n.text:000000000041a67e\n.text:000000000041a680\n.text:000000000041a682\n.text:000000000041a684\n.text:000000000041a685\n'
p5277
tp5278
sS'found_parser'
p5279
(S'\n__stdcall found_parser(char * original_arg, parser_table * entry)\n'
p5280
V\u000aparser_table * found_parser(char *original_arg,parser_table *entry)\u000a\u000a{\u000a  arg_type aVar1;\u000a  _Bool _Var2;\u000a  undefined8 uVar3;\u000a  \u000a  aVar1 = entry->type;\u000a  if (aVar1 == ARG_NOOP) {\u000a    entry = (parser_table *)0x0;\u000a  }\u000a  else {\u000a    if (aVar1 != ARG_POSITIONAL_OPTION) {\u000a      if (aVar1 == ARG_OPTION) {\u000a        if (first_nonoption_arg != (char *)0x0) {\u000a          _Var2 = should_issue_warnings();\u000a          if (_Var2 != false) {\u000a            uVar3 = dcgettext(0,\u000a                              "warning: you have specified the %s option after a non-option argument %s, but options are not positional (%s affects tests specified before it as well as those specified after it).  Please specify options before other arguments.\u005cn"\u000a                              ,5);\u000a            error(0,0,uVar3,original_arg,first_nonoption_arg,original_arg);\u000a          }\u000a        }\u000a      }\u000a      else {\u000a        if (first_nonoption_arg == (char *)0x0) {\u000a          first_nonoption_arg = original_arg;\u000a        }\u000a      }\u000a    }\u000a  }\u000a  return entry;\u000a}\u000a\u000a
p5281
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nMOV EAX,dword ptr [RBX]\nCMP EAX,0x1\nJZ 0x0040a8af\nCMP EAX,0x2\nJZ 0x0040a8b1\nMOV RCX,qword ptr [0x0062e618]\nTEST EAX,EAX\nJZ 0x0040a8bc\nTEST RCX,RCX\nJNZ 0x0040a8b1\nMOV qword ptr [0x0062e618],R14\nJMP 0x0040a8b1\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nTEST RCX,RCX\nJZ 0x0040a8b1\nCALL 0x0040aa00\nTEST AL,AL\nJZ 0x0040a8b1\nXOR EDI,EDI\nMOV ESI,0x420ba6\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV R8,qword ptr [0x0062e618]\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,R14\nMOV R9,R14\nCALL 0x00402d90\nJMP 0x0040a8b1\n'
p5282
S'41 56\n53\n50\n48 89 f3\n49 89 fe\n8b 03\n83 f8 01\n74 1e\n83 f8 02\n74 1b\n48 8b 0d 7b 3d 22 00\n85 c0\n74 1b\n48 85 c9\n75 0b\n4c 89 35 6b 3d 22 00\neb 02\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n48 85 c9\n74 f0\ne8 3a 01 00 00\n84 c0\n74 e7\n31 ff\nbe a6 0b 42 00\nba 05 00 00 00\ne8 35 80 ff ff\n48 89 c1\n4c 8b 05 33 3d 22 00\n31 ff\n31 f6\n31 c0\n48 89 ca\n4c 89 f1\n4d 89 f1\ne8 97 84 ff ff\neb b6\n'
p5283
S'.text:000000000040a880\n.text:000000000040a882\n.text:000000000040a883\n.text:000000000040a884\n.text:000000000040a887\n.text:000000000040a88a\n.text:000000000040a88c\n.text:000000000040a88f\n.text:000000000040a891\n.text:000000000040a894\n.text:000000000040a896\n.text:000000000040a89d\n.text:000000000040a89f\n.text:000000000040a8a1\n.text:000000000040a8a4\n.text:000000000040a8a6\n.text:000000000040a8ad\n.text:000000000040a8af\n.text:000000000040a8b1\n.text:000000000040a8b4\n.text:000000000040a8b8\n.text:000000000040a8b9\n.text:000000000040a8bb\n.text:000000000040a8bc\n.text:000000000040a8bf\n.text:000000000040a8c1\n.text:000000000040a8c6\n.text:000000000040a8c8\n.text:000000000040a8ca\n.text:000000000040a8cc\n.text:000000000040a8d1\n.text:000000000040a8d6\n.text:000000000040a8db\n.text:000000000040a8de\n.text:000000000040a8e5\n.text:000000000040a8e7\n.text:000000000040a8e9\n.text:000000000040a8eb\n.text:000000000040a8ee\n.text:000000000040a8f1\n.text:000000000040a8f4\n.text:000000000040a8f9\n'
p5284
tp5285
sS'iswcntrl'
p5286
(S'\n__stdcall iswcntrl(wint_t __wc)\n'
p5287
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswcntrl(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswcntrl_0062d0b8)();\u000a  return iVar1;\u000a}\u000a\u000a
p5288
S'JMP qword ptr [0x0062d0b8]\n'
p5289
S'ff 25 82 a8 22 00\n'
p5290
S'.plt:0000000000402830\n'
p5291
tp5292
sS'poll'
p5293
(S'\n__stdcall poll(pollfd * __fds, nfds_t __nfds, int __timeout)\n'
p5294
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint poll(pollfd *__fds,nfds_t __nfds,int __timeout)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_poll_0062d350)();\u000a  return iVar1;\u000a}\u000a\u000a
p5295
S'JMP qword ptr [0x0062d350]\n'
p5296
S'ff 25 ea a5 22 00\n'
p5297
S'.plt:0000000000402d60\n'
p5298
tp5299
sS'estimate_timestamp_success_rate'
p5300
(S'\n__stdcall estimate_timestamp_success_rate(time_t when)\n'
p5301
V\u000afloat estimate_timestamp_success_rate(time_t when)\u000a\u000a{\u000a  float fVar1;\u000a  \u000a  fVar1 = estimate_file_age_success_rate\u000a                    ((float)(int)SUB168(SEXT816(options.cur_day_start.tv_sec - when) *\u000a                                        SEXT816(0x1845c8a0ce512957) >> 0x4d,0));\u000a  return fVar1;\u000a}\u000a\u000a
p5302
S'MOV RAX,qword ptr [0x0062f068]\nSUB RAX,RDI\nMOV RCX,0x1845c8a0ce512957\nIMUL RCX\nMOV RAX,RDX\nSHR RAX,0x3f\nSHR RDX,0xd\nADD EDX,EAX\nCVTSI2SS XMM0,EDX\nJMP 0x0040ae10\n'
p5303
S'48 8b 05 81 42 22 00\n48 29 f8\n48 b9 57 29 51 ce a0 c8 45 18\n48 f7 e9\n48 89 d0\n48 c1 e8 3f\n48 c1 ea 0d\n01 c2\nf3 0f 2a c2\neb 06\n'
p5304
S'.text:000000000040ade0\n.text:000000000040ade7\n.text:000000000040adea\n.text:000000000040adf4\n.text:000000000040adf7\n.text:000000000040adfa\n.text:000000000040adfe\n.text:000000000040ae02\n.text:000000000040ae04\n.text:000000000040ae08\n'
p5305
tp5306
sS'human_options'
p5307
(S'\n__stdcall human_options(char * spec, int * opts, uintmax_t * block_size)\n'
p5308
V\u000astrtol_error human_options(char *spec,int *opts,uintmax_t *block_size)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  uintmax_t uVar2;\u000a  \u000a  sVar1 = humblock(spec,block_size,opts);\u000a  if (*block_size == 0) {\u000a    uVar2 = default_block_size();\u000a    *block_size = uVar2;\u000a    sVar1 = LONGINT_INVALID;\u000a  }\u000a  return sVar1;\u000a}\u000a\u000a
p5309
S'PUSH RBX\nMOV RBX,RDX\nMOV RAX,RSI\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x00411af0\nCMP qword ptr [RBX],0x0\nJNZ 0x00411ae5\nCALL 0x00411c00\nMOV qword ptr [RBX],RAX\nMOV EAX,0x4\nPOP RBX\nRET\n'
p5310
S'53\n48 89 d3\n48 89 f0\n48 89 de\n48 89 c2\ne8 1e 00 00 00\n48 83 3b 00\n75 0d\ne8 23 01 00 00\n48 89 03\nb8 04 00 00 00\n5b\nc3\n'
p5311
S'.text:0000000000411ac0\n.text:0000000000411ac1\n.text:0000000000411ac4\n.text:0000000000411ac7\n.text:0000000000411aca\n.text:0000000000411acd\n.text:0000000000411ad2\n.text:0000000000411ad6\n.text:0000000000411ad8\n.text:0000000000411add\n.text:0000000000411ae0\n.text:0000000000411ae5\n.text:0000000000411ae6\n'
p5312
tp5313
sS'freecon'
p5314
(S'\n__stdcall freecon(security_context_t con)\n'
p5315
V\u000avoid freecon(security_context_t con)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p5316
S'RET\n'
p5317
S'c3\n'
p5318
S'.text:0000000000416a50\n'
p5319
tp5320
sS'i_ring_init'
p5321
(S'\n__stdcall i_ring_init(I_ring * ir)\n'
p5322
V\u000avoid i_ring_init(I_ring *ir)\u000a\u000a{\u000a  long lVar1;\u000a  int in_ESI;\u000a  \u000a  ir->ir_empty = true;\u000a  *(undefined8 *)&ir->ir_front = 0;\u000a  lVar1 = 0;\u000a  do {\u000a    ir->ir_data[lVar1] = in_ESI;\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 4);\u000a  ir->ir_default_val = in_ESI;\u000a  return;\u000a}\u000a\u000a
p5323
S'MOV byte ptr [RDI + 0x1c],0x1\nMOV qword ptr [RDI + 0x14],0x0\nXOR EAX,EAX\nNOP\nMOV dword ptr [RDI + RAX*0x4],ESI\nINC RAX\nCMP RAX,0x4\nJNZ 0x0041bc30\nMOV dword ptr [RDI + 0x10],ESI\nRET\n'
p5324
S'c6 47 1c 01\n48 c7 47 14 00 00 00 00\n31 c0\n66 90\n89 34 87\n48 ff c0\n48 83 f8 04\n75 f4\n89 77 10\nc3\n'
p5325
S'.text:000000000041bc20\n.text:000000000041bc24\n.text:000000000041bc2c\n.text:000000000041bc2e\n.text:000000000041bc30\n.text:000000000041bc33\n.text:000000000041bc36\n.text:000000000041bc3a\n.text:000000000041bc3c\n.text:000000000041bc3f\n'
p5326
tp5327
sS'perform_arm_swap'
p5328
(S'\n__stdcall perform_arm_swap(predicate * p)\n'
p5329
V\u000avoid perform_arm_swap(predicate *p)\u000a\u000a{\u000a  predicate *ppVar1;\u000a  \u000a  ppVar1 = p->pred_left->pred_right;\u000a  p->pred_left->pred_right = p->pred_right;\u000a  p->pred_right = ppVar1;\u000a  return;\u000a}\u000a\u000a
p5330
S'MOV RAX,qword ptr [0x110 + RDI]\nMOV RCX,qword ptr [0x118 + RDI]\nMOV RDX,qword ptr [0x118 + RAX]\nMOV qword ptr [0x118 + RAX],RCX\nMOV qword ptr [0x118 + RDI],RDX\nRET\n'
p5331
S'48 8b 87 10 01 00 00\n48 8b 8f 18 01 00 00\n48 8b 90 18 01 00 00\n48 89 88 18 01 00 00\n48 89 97 18 01 00 00\nc3\n'
p5332
S'.text:00000000004076c0\n.text:00000000004076c7\n.text:00000000004076ce\n.text:00000000004076d5\n.text:00000000004076dc\n.text:00000000004076e3\n'
p5333
tp5334
sS'__errno_location'
p5335
(S'\n__stdcall __errno_location()\n'
p5336
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_0062d058)();\u000a  return piVar1;\u000a}\u000a\u000a
p5337
S'JMP qword ptr [0x0062d058]\n'
p5338
S'ff 25 e2 a8 22 00\n'
p5339
S'.plt:0000000000402770\n'
p5340
tp5341
sS'bc_do_insert'
p5342
(S'\n__stdcall bc_do_insert(buildcmd_control * ctl, buildcmd_state * state, char * arg, size_t arglen, char * prefix, size_t pfxlen, size_t lblen)\n'
p5343
V\u000avoid bc_do_insert(buildcmd_control *ctl,buildcmd_state *state,char *arg,size_t arglen,char *prefix,\u000a                 size_t pfxlen,size_t lblen)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *insertbuf;\u000a  char *pcVar2;\u000a  undefined8 uVar3;\u000a  char *__n;\u000a  char *__dest;\u000a  char *pcVar4;\u000a  bool bVar5;\u000a  long in_stack_00000010;\u000a  char *local_58;\u000a  \u000a  sVar1 = ctl->arg_max;\u000a  if (insertbuf == (char *)0x0) {\u000a    insertbuf = (char *)xmalloc(sVar1 + 1);\u000a  }\u000a  pcVar4 = (char *)(sVar1 - 1);\u000a  __dest = insertbuf;\u000a  local_58 = (char *)arglen;\u000a  do {\u000a    pcVar2 = mbsstr(arg,ctl->replace_pat);\u000a    __n = pcVar2 + -(long)arg;\u000a    if (pcVar2 == (char *)0x0) {\u000a      __n = local_58;\u000a    }\u000a    bVar5 = pcVar4 < __n;\u000a    pcVar4 = pcVar4 + -(long)__n;\u000a    if (bVar5 || pcVar4 == (char *)0x0) {\u000aLAB_0040dc7e:\u000a      if (*arg != 0) {\u000a        uVar3 = dcgettext(0,"command too long",5);\u000a        error(1,0,uVar3,uVar3);\u000a      }\u000a      break;\u000a    }\u000a    strncpy(__dest,arg,(size_t)__n);\u000a    __dest = __dest + (long)__n;\u000a    arg = arg + (long)__n;\u000a    local_58 = local_58 + -(long)__n;\u000a    if (pcVar2 != (char *)0x0) {\u000a      bVar5 = pcVar4 < (char *)(in_stack_00000010 + pfxlen);\u000a      pcVar4 = pcVar4 + -(long)(char *)(in_stack_00000010 + pfxlen);\u000a      if (bVar5 || pcVar4 == (char *)0x0) goto LAB_0040dc7e;\u000a      if (prefix != (char *)0x0) {\u000a        strcpy(__dest,prefix);\u000a        __dest = __dest + pfxlen;\u000a      }\u000a      strcpy(__dest,(char *)lblen);\u000a      __dest = __dest + in_stack_00000010;\u000a      arg = arg + ctl->rplen;\u000a      local_58 = local_58 + -ctl->rplen;\u000a    }\u000a  } while (*arg != 0);\u000a  *__dest = 0;\u000a  bc_push_arg(ctl,state,insertbuf,(size_t)(__dest + (1 - (long)insertbuf)),(char *)0x0,0);\u000a  return;\u000a}\u000a\u000a
p5344
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,R9\nMOV qword ptr [RSP + 0x30],R8\nMOV qword ptr [RSP + 0x10],RCX\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x20],RSI\nMOV RAX,qword ptr [RSP + 0x78]\nMOV qword ptr [RSP + 0x18],RDI\nMOV R15,qword ptr [RDI + 0x18]\nCMP qword ptr [0x0062e630],0x0\nJNZ 0x0040dbb1\nLEA RDI,[R15 + 0x1]\nMOV R14,RAX\nCALL 0x00417220\nMOV qword ptr [0x0062e630],RAX\nMOV RAX,R14\nDEC R15\nMOV R12,qword ptr [0x0062e630]\nLEA RAX,[RAX + RBP*0x1]\nMOV qword ptr [RSP + 0x28],RAX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV R14,RBP\nMOV RAX,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RAX + 0x30]\nMOV RDI,RBX\nCALL 0x00411f20\nMOV R13,RAX\nMOV RBP,R13\nSUB RBP,RBX\nTEST R13,R13\nCMOVZ RBP,qword ptr [RSP + 0x10]\nSUB R15,RBP\nJBE 0x0040dc7e\nMOV RDI,R12\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00402780\nMOV RCX,qword ptr [RSP + 0x10]\nADD R12,RBP\nADD RBX,RBP\nSUB RCX,RBP\nTEST R13,R13\nMOV qword ptr [RSP + 0x10],RCX\nJZ 0x0040dc70\nSUB R15,qword ptr [RSP + 0x28]\nMOV RBP,R14\nMOV RAX,qword ptr [RSP + 0x30]\nJBE 0x0040dc7e\nTEST RAX,RAX\nJZ 0x0040dc47\nMOV RDI,R12\nMOV RSI,RAX\nCALL 0x004027c0\nADD R12,RBP\nMOV RDI,R12\nMOV RSI,qword ptr [RSP + 0x70]\nCALL 0x004027c0\nADD R12,qword ptr [RSP + 0x78]\nMOV RAX,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX + 0x28]\nADD RBX,RAX\nSUB qword ptr [RSP + 0x10],RAX\nJMP 0x0040dc73\nMOV RBP,R14\nCMP byte ptr [RBX],0x0\nJNZ 0x0040dbd0\nJMP 0x0040dca8\nCMP byte ptr [RBX],0x0\nJZ 0x0040dca8\nXOR EDI,EDI\nMOV ESI,0x421c50\nMOV EDX,0x5\nCALL 0x00402910\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402d90\nMOV byte ptr [R12],0x0\nINC R12\nMOV RDX,qword ptr [0x0062e630]\nSUB R12,RDX\nMOV EAX,dword ptr [0x80 + RSP]\nMOV dword ptr [RSP],EAX\nXOR R8D,R8D\nXOR R9D,R9D\nMOV RDI,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x20]\nMOV RCX,R12\nCALL 0x0040dcf0\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p5345
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n4c 89 cd\n4c 89 44 24 30\n48 89 4c 24 10\n48 89 d3\n48 89 74 24 20\n48 8b 44 24 78\n48 89 7c 24 18\n4c 8b 7f 18\n48 83 3d 97 0a 22 00 00\n75 16\n49 8d 7f 01\n49 89 c6\ne8 79 96 00 00\n48 89 05 82 0a 22 00\n4c 89 f0\n49 ff cf\n4c 8b 25 75 0a 22 00\n48 8d 04 28\n48 89 44 24 28\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 89 ee\n48 8b 44 24 18\n48 8b 70 30\n48 89 df\ne8 3c 43 00 00\n49 89 c5\n4c 89 ed\n48 29 dd\n4d 85 ed\n48 0f 44 6c 24 10\n49 29 ef\n0f 86 7f 00 00 00\n4c 89 e7\n48 89 de\n48 89 ea\ne8 73 4b ff ff\n48 8b 4c 24 10\n49 01 ec\n48 01 eb\n48 29 e9\n4d 85 ed\n48 89 4c 24 10\n74 4b\n4c 2b 7c 24 28\n4c 89 f5\n48 8b 44 24 30\n76 4a\n48 85 c0\n74 0e\n4c 89 e7\n48 89 c6\ne8 7c 4b ff ff\n49 01 ec\n4c 89 e7\n48 8b 74 24 70\ne8 6c 4b ff ff\n4c 03 64 24 78\n48 8b 44 24 18\n48 8b 40 28\n48 01 c3\n48 29 44 24 10\neb 07\n4c 89 f5\n80 3b 00\n0f 85 54 ff ff ff\neb 2a\n80 3b 00\n74 25\n31 ff\nbe 50 1c 42 00\nba 05 00 00 00\ne8 7c 4c ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 e8 50 ff ff\n41 c6 04 24 00\n49 ff c4\n48 8b 15 79 09 22 00\n49 29 d4\n8b 84 24 80 00 00 00\n89 04 24\n45 31 c0\n45 31 c9\n48 8b 7c 24 18\n48 8b 74 24 20\n4c 89 e1\ne8 14 00 00 00\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p5346
S'.text:000000000040db60\n.text:000000000040db61\n.text:000000000040db63\n.text:000000000040db65\n.text:000000000040db67\n.text:000000000040db69\n.text:000000000040db6a\n.text:000000000040db6e\n.text:000000000040db71\n.text:000000000040db76\n.text:000000000040db7b\n.text:000000000040db7e\n.text:000000000040db83\n.text:000000000040db88\n.text:000000000040db8d\n.text:000000000040db91\n.text:000000000040db99\n.text:000000000040db9b\n.text:000000000040db9f\n.text:000000000040dba2\n.text:000000000040dba7\n.text:000000000040dbae\n.text:000000000040dbb1\n.text:000000000040dbb4\n.text:000000000040dbbb\n.text:000000000040dbbf\n.text:000000000040dbc4\n.text:000000000040dbd0\n.text:000000000040dbd3\n.text:000000000040dbd8\n.text:000000000040dbdc\n.text:000000000040dbdf\n.text:000000000040dbe4\n.text:000000000040dbe7\n.text:000000000040dbea\n.text:000000000040dbed\n.text:000000000040dbf0\n.text:000000000040dbf6\n.text:000000000040dbf9\n.text:000000000040dbff\n.text:000000000040dc02\n.text:000000000040dc05\n.text:000000000040dc08\n.text:000000000040dc0d\n.text:000000000040dc12\n.text:000000000040dc15\n.text:000000000040dc18\n.text:000000000040dc1b\n.text:000000000040dc1e\n.text:000000000040dc23\n.text:000000000040dc25\n.text:000000000040dc2a\n.text:000000000040dc2d\n.text:000000000040dc32\n.text:000000000040dc34\n.text:000000000040dc37\n.text:000000000040dc39\n.text:000000000040dc3c\n.text:000000000040dc3f\n.text:000000000040dc44\n.text:000000000040dc47\n.text:000000000040dc4a\n.text:000000000040dc4f\n.text:000000000040dc54\n.text:000000000040dc59\n.text:000000000040dc5e\n.text:000000000040dc62\n.text:000000000040dc65\n.text:000000000040dc6a\n.text:000000000040dc70\n.text:000000000040dc73\n.text:000000000040dc76\n.text:000000000040dc7c\n.text:000000000040dc7e\n.text:000000000040dc81\n.text:000000000040dc83\n.text:000000000040dc85\n.text:000000000040dc8a\n.text:000000000040dc8f\n.text:000000000040dc94\n.text:000000000040dc97\n.text:000000000040dc9c\n.text:000000000040dc9e\n.text:000000000040dca0\n.text:000000000040dca3\n.text:000000000040dca8\n.text:000000000040dcad\n.text:000000000040dcb0\n.text:000000000040dcb7\n.text:000000000040dcba\n.text:000000000040dcc1\n.text:000000000040dcc4\n.text:000000000040dcc7\n.text:000000000040dcca\n.text:000000000040dccf\n.text:000000000040dcd4\n.text:000000000040dcd7\n.text:000000000040dcdc\n.text:000000000040dce0\n.text:000000000040dce1\n.text:000000000040dce3\n.text:000000000040dce5\n.text:000000000040dce7\n.text:000000000040dce9\n.text:000000000040dcea\n'
p5347
tp5348
sS'knuth_morris_pratt'
p5349
(S'\n__stdcall knuth_morris_pratt(uchar * haystack, uchar * needle, size_t needle_len, uchar * * resultp)\n'
p5350
V\u000a_Bool knuth_morris_pratt(uchar *haystack,uchar *needle,size_t needle_len,uchar **resultp)\u000a\u000a{\u000a  uchar uVar1;\u000a  size_t n;\u000a  long lVar2;\u000a  size_t sVar3;\u000a  long lVar4;\u000a  undefined *puVar5;\u000a  ulong uVar6;\u000a  undefined *p;\u000a  uchar *puVar7;\u000a  \u000a  puVar5 = &stack0xffffffffffffffd8;\u000a  if (needle_len >> 0x3d != 0) {\u000a    return false;\u000a  }\u000a  n = needle_len * 8;\u000a  if (n < 0xfb0) {\u000a    uVar6 = n + 0x1f & 0xfffffffffffffff0;\u000a    puVar5 = &stack0xffffffffffffffd8 + -uVar6;\u000a    p = &stack0xffffffffffffffe8 + -uVar6;\u000a  }\u000a  else {\u000a    p = (undefined *)mmalloca(n);\u000a    if (p == (undefined *)0x0) {\u000a      return false;\u000a    }\u000a  }\u000a  *(undefined8 *)(p + 8) = 1;\u000a  if (2 < needle_len) {\u000a    n = 2;\u000a    lVar2 = 0;\u000a    do {\u000a      uVar1 = needle[lVar2];\u000a      while (needle[n - 1] != uVar1) {\u000a        if (lVar2 == 0) {\u000a          lVar2 = 0;\u000a          sVar3 = n;\u000a          goto LAB_004128b9;\u000a        }\u000a        lVar2 = lVar2 - *(long *)(p + lVar2 * 8);\u000a        uVar1 = needle[lVar2];\u000a      }\u000a      lVar2 = lVar2 + 1;\u000a      sVar3 = n - lVar2;\u000aLAB_004128b9:\u000a      *(size_t *)(p + n * 8) = sVar3;\u000a      n = n + 1;\u000a    } while (n != needle_len);\u000a  }\u000a  *resultp = (uchar *)0x0;\u000a  lVar2 = 0;\u000a  puVar7 = haystack;\u000a  do {\u000a    lVar4 = 0;\u000a    while( true ) {\u000a      if (haystack[lVar4] == 0) goto LAB_00412943;\u000a      if (needle[lVar4 + lVar2] != haystack[lVar4]) break;\u000a      lVar4 = lVar4 + 1;\u000a      if ((lVar2 - needle_len) + lVar4 == 0) {\u000a        *resultp = puVar7;\u000aLAB_00412943:\u000a        *(undefined8 *)(puVar5 + -8) = 0x412948;\u000a        freea(p,puVar5[-8]);\u000a        return true;\u000a      }\u000a    }\u000a    if (lVar2 + lVar4 == 0) {\u000a      puVar7 = puVar7 + 1;\u000a      haystack = haystack + lVar4 + 1;\u000a      lVar2 = 0;\u000a    }\u000a    else {\u000a      haystack = haystack + lVar4;\u000a      puVar7 = puVar7 + *(long *)(p + lVar4 * 8 + lVar2 * 8);\u000a      lVar2 = (lVar2 - *(long *)(p + lVar4 * 8 + lVar2 * 8)) + lVar4;\u000a    }\u000a  } while( true );\u000a}\u000a\u000a
p5351
S'PUSH RBP\nMOV RBP,RSP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14,RCX\nMOV R12,RDX\nMOV RBX,RSI\nMOV R15,RDI\nMOV RAX,R12\nSHR RAX,0x3d\nJZ 0x00412827\nXOR EAX,EAX\nJMP 0x0041294a\nLEA RDI,[R12*0x8]\nCMP RDI,0xfaf\nJA 0x00412856\nMOV RAX,RSP\nADD RDI,0x1f\nAND RDI,-0x10\nMOV RCX,RAX\nSUB RCX,RDI\nMOV RSP,RCX\nNEG RDI\nLEA RDI,[RAX + RDI*0x1 + 0x10]\nJMP 0x00412867\nCALL 0x0041c000\nMOV RDI,RAX\nTEST RDI,RDI\nJZ 0x00412957\nMOV qword ptr [RDI + 0x8],0x1\nCMP R12,0x3\nJC 0x004128c5\nMOV EAX,0x2\nXOR ECX,ECX\nNOP dword ptr [RAX]\nMOV DL,byte ptr [RBX + RAX*0x1 + -0x1]\nCMP DL,byte ptr [RBX + RCX*0x1]\nJNZ 0x00412899\nJMP 0x004128b0\nSUB RCX,qword ptr [RDI + RCX*0x8]\nCMP DL,byte ptr [RBX + RCX*0x1]\nJZ 0x004128b0\nTEST RCX,RCX\nJNZ 0x00412890\nXOR ECX,ECX\nMOV RDX,RAX\nJMP 0x004128b9\nINC RCX\nMOV RDX,RAX\nSUB RDX,RCX\nMOV qword ptr [RDI + RAX*0x8],RDX\nINC RAX\nCMP RAX,R12\nJNZ 0x00412880\nMOV qword ptr [R14],0x0\nNEG R12\nXOR R8D,R8D\nMOV R9,R15\nJMP 0x00412919\nINC RDX\nMOV RAX,RSI\nADD RAX,RDX\nJNZ 0x00412930\nJMP 0x00412940\nMOV RAX,R8\nADD RAX,RDX\nJNZ 0x00412905\nINC R15\nLEA R9,[R9 + RDX*0x1 + 0x1]\nXOR R8D,R8D\nJMP 0x00412919\nADD R9,RDX\nLEA RAX,[RDI + R8*0x8]\nMOV RAX,qword ptr [RAX + RDX*0x8]\nADD R15,RAX\nSUB R8,RAX\nADD R8,RDX\nLEA RSI,[R12 + R8*0x1]\nLEA RCX,[RBX + R8*0x1]\nXOR EDX,EDX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [R9 + RDX*0x1]\nTEST AL,AL\nJZ 0x00412943\nCMP byte ptr [RCX + RDX*0x1],AL\nJZ 0x004128e0\nJMP 0x004128f0\nMOV qword ptr [R14],R15\nCALL 0x0041c080\nMOV AL,0x1\nLEA RSP,[RBP + -0x20]\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EAX,EAX\nJMP 0x0041294a\n'
p5352
S'55\n48 89 e5\n41 57\n41 56\n41 54\n53\n49 89 ce\n49 89 d4\n48 89 f3\n49 89 ff\n4c 89 e0\n48 c1 e8 3d\n74 07\n31 c0\ne9 23 01 00 00\n4a 8d 3c e5 00 00 00 00\n48 81 ff af 0f 00 00\n77 1e\n48 89 e0\n48 83 c7 1f\n48 83 e7 f0\n48 89 c1\n48 29 f9\n48 89 cc\n48 f7 df\n48 8d 7c 38 10\neb 11\ne8 a5 97 00 00\n48 89 c7\n48 85 ff\n0f 84 f0 00 00 00\n48 c7 47 08 01 00 00 00\n49 83 fc 03\n72 50\nb8 02 00 00 00\n31 c9\n0f 1f 40 00\n8a 54 03 ff\n3a 14 0b\n75 10\neb 25\n48 2b 0c cf\n3a 14 0b\n74 17\n48 85 c9\n75 f2\n31 c9\n48 89 c2\neb 14\n48 ff c1\n48 89 c2\n48 29 ca\n48 89 14 c7\n48 ff c0\n4c 39 e0\n75 bb\n49 c7 06 00 00 00 00\n49 f7 dc\n45 31 c0\n4d 89 f9\neb 42\n48 ff c2\n48 89 f0\n48 01 d0\n75 45\neb 53\n4c 89 c0\n48 01 d0\n75 0d\n49 ff c7\n4d 8d 4c 11 01\n45 31 c0\neb 14\n49 01 d1\n4a 8d 04 c7\n48 8b 04 d0\n49 01 c7\n49 29 c0\n49 01 d0\n4b 8d 34 04\n4a 8d 0c 03\n31 d2\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n41 0f b6 04 11\n84 c0\n74 0a\n38 04 11\n74 a2\neb b0\n4d 89 3e\ne8 38 97 00 00\nb0 01\n48 8d 65 e0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n31 c0\neb ef\n'
p5353
S'.text:0000000000412800\n.text:0000000000412801\n.text:0000000000412804\n.text:0000000000412806\n.text:0000000000412808\n.text:000000000041280a\n.text:000000000041280b\n.text:000000000041280e\n.text:0000000000412811\n.text:0000000000412814\n.text:0000000000412817\n.text:000000000041281a\n.text:000000000041281e\n.text:0000000000412820\n.text:0000000000412822\n.text:0000000000412827\n.text:000000000041282f\n.text:0000000000412836\n.text:0000000000412838\n.text:000000000041283b\n.text:000000000041283f\n.text:0000000000412843\n.text:0000000000412846\n.text:0000000000412849\n.text:000000000041284c\n.text:000000000041284f\n.text:0000000000412854\n.text:0000000000412856\n.text:000000000041285b\n.text:000000000041285e\n.text:0000000000412861\n.text:0000000000412867\n.text:000000000041286f\n.text:0000000000412873\n.text:0000000000412875\n.text:000000000041287a\n.text:000000000041287c\n.text:0000000000412880\n.text:0000000000412884\n.text:0000000000412887\n.text:0000000000412889\n.text:0000000000412890\n.text:0000000000412894\n.text:0000000000412897\n.text:0000000000412899\n.text:000000000041289c\n.text:000000000041289e\n.text:00000000004128a0\n.text:00000000004128a3\n.text:00000000004128b0\n.text:00000000004128b3\n.text:00000000004128b6\n.text:00000000004128b9\n.text:00000000004128bd\n.text:00000000004128c0\n.text:00000000004128c3\n.text:00000000004128c5\n.text:00000000004128cc\n.text:00000000004128cf\n.text:00000000004128d2\n.text:00000000004128d5\n.text:00000000004128e0\n.text:00000000004128e3\n.text:00000000004128e6\n.text:00000000004128e9\n.text:00000000004128eb\n.text:00000000004128f0\n.text:00000000004128f3\n.text:00000000004128f6\n.text:00000000004128f8\n.text:00000000004128fb\n.text:0000000000412900\n.text:0000000000412903\n.text:0000000000412905\n.text:0000000000412908\n.text:000000000041290c\n.text:0000000000412910\n.text:0000000000412913\n.text:0000000000412916\n.text:0000000000412919\n.text:000000000041291d\n.text:0000000000412921\n.text:0000000000412923\n.text:0000000000412930\n.text:0000000000412935\n.text:0000000000412937\n.text:0000000000412939\n.text:000000000041293c\n.text:000000000041293e\n.text:0000000000412940\n.text:0000000000412943\n.text:0000000000412948\n.text:000000000041294a\n.text:000000000041294e\n.text:000000000041294f\n.text:0000000000412951\n.text:0000000000412953\n.text:0000000000412955\n.text:0000000000412956\n.text:0000000000412957\n.text:0000000000412959\n'
p5354
tp5355
sS'quotearg_custom_mem'
p5356
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p5357
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p5358
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x004164b0\n'
p5359
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p5360
S'.text:0000000000416540\n.text:0000000000416543\n.text:0000000000416546\n.text:0000000000416549\n.text:000000000041654c\n.text:000000000041654e\n.text:0000000000416551\n'
p5361
tp5362
sS'read_file_system_list'
p5363
(S'\n__stdcall read_file_system_list()\n'
p5364
V\u000amount_entry * read_file_system_list(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  FILE *__stream;\u000a  __ssize_t _Var3;\u000a  char *__s1;\u000a  char *pcVar4;\u000a  ulonglong uVar5;\u000a  int *piVar6;\u000a  long lVar7;\u000a  long lVar8;\u000a  mount_entry *pmVar9;\u000a  char **ppcVar10;\u000a  mount_entry **ppmVar11;\u000a  bool bVar12;\u000a  bool bVar13;\u000a  int target_s;\u000a  int mntroot_s;\u000a  int source_s;\u000a  int target_e;\u000a  int mntroot_e;\u000a  int source_e;\u000a  int type_e;\u000a  int type_s;\u000a  undefined8 uVar14;\u000a  undefined local_81;\u000a  char *local_80;\u000a  int local_74;\u000a  mount_entry *local_70;\u000a  int local_64;\u000a  int local_60;\u000a  int local_5c;\u000a  int local_58;\u000a  int local_54;\u000a  int local_50;\u000a  int local_4c;\u000a  uint local_48;\u000a  uint local_44;\u000a  size_t local_40;\u000a  FILE *local_38;\u000a  \u000a  __stream = fopen("/proc/self/mountinfo","r");\u000a  if (__stream == (FILE *)0x0) {\u000a    lVar7 = setmntent("/etc/mtab",&DAT_004222e2);\u000a    if (lVar7 == 0) {\u000a      return (mount_entry *)0x0;\u000a    }\u000a    ppcVar10 = (char **)getmntent(lVar7);\u000a    if (ppcVar10 == (char **)0x0) {\u000a      ppmVar11 = &local_70;\u000a    }\u000a    else {\u000a      ppmVar11 = &local_70;\u000a      do {\u000a        lVar8 = hasmntopt(ppcVar10,&DAT_004253b2);\u000a        pmVar9 = (mount_entry *)xmalloc(0x38);\u000a        __s1 = xstrdup(*ppcVar10);\u000a        pmVar9->me_devname = __s1;\u000a        __s1 = xstrdup(ppcVar10[1]);\u000a        pmVar9->me_mountdir = __s1;\u000a        pmVar9->me_mntroot = (char *)0x0;\u000a        __s1 = xstrdup(ppcVar10[2]);\u000a        pmVar9->me_type = __s1;\u000a        *(byte *)&pmVar9->me_dummy_bitfield = *(byte *)&pmVar9->me_dummy_bitfield | 4;\u000a        iVar2 = strcmp(__s1,"autofs");\u000a        bVar13 = true;\u000a        bVar12 = true;\u000a        if (iVar2 != 0) {\u000a          iVar2 = strcmp(__s1,"proc");\u000a          bVar12 = true;\u000a          if (iVar2 != 0) {\u000a            iVar2 = strcmp(__s1,"subfs");\u000a            bVar12 = true;\u000a            if (iVar2 != 0) {\u000a              iVar2 = strcmp(__s1,"debugfs");\u000a              bVar12 = true;\u000a              if (iVar2 != 0) {\u000a                iVar2 = strcmp(__s1,"devpts");\u000a                bVar12 = true;\u000a                if (iVar2 != 0) {\u000a                  iVar2 = strcmp(__s1,"fusectl");\u000a                  bVar12 = true;\u000a                  if (iVar2 != 0) {\u000a                    iVar2 = strcmp(__s1,"mqueue");\u000a                    bVar12 = true;\u000a                    if (iVar2 != 0) {\u000a                      iVar2 = strcmp(__s1,"rpc_pipefs");\u000a                      bVar12 = true;\u000a                      if (iVar2 != 0) {\u000a                        iVar2 = strcmp(__s1,"sysfs");\u000a                        bVar12 = true;\u000a                        if (iVar2 != 0) {\u000a                          iVar2 = strcmp(__s1,"devfs");\u000a                          bVar12 = true;\u000a                          if (iVar2 != 0) {\u000a                            iVar2 = strcmp(__s1,"kernfs");\u000a                            bVar12 = true;\u000a                            if (iVar2 != 0) {\u000a                              iVar2 = strcmp(__s1,"ignore");\u000a                              bVar12 = true;\u000a                              if (iVar2 != 0) {\u000a                                iVar2 = strcmp(__s1,"none");\u000a                                bVar12 = lVar8 == 0 && iVar2 == 0;\u000a                              }\u000a                            }\u000a                          }\u000a                        }\u000a                      }\u000a                    }\u000a                  }\u000a                }\u000a              }\u000a            }\u000a          }\u000a        }\u000a        *(byte *)&pmVar9->me_dummy_bitfield = *(byte *)&pmVar9->me_dummy_bitfield & 0xfe | bVar12;\u000a        __s1 = pmVar9->me_devname;\u000a        pcVar4 = strchr(__s1,0x3a);\u000a        if (pcVar4 == (char *)0x0) {\u000a          if ((*__s1 == '/') && (__s1[1] == '/')) {\u000a            __s1 = pmVar9->me_type;\u000a            iVar2 = strcmp(__s1,"smbfs");\u000a            if ((iVar2 == 0) || (iVar2 = strcmp(__s1,"cifs"), iVar2 == 0)) goto LAB_0041ad73;\u000a          }\u000a          iVar2 = strcmp("-hosts",pmVar9->me_devname);\u000a          bVar13 = iVar2 == 0;\u000a        }\u000aLAB_0041ad73:\u000a        *(byte *)&pmVar9->me_dummy_bitfield =\u000a             *(byte *)&pmVar9->me_dummy_bitfield & 0xfd | bVar13 * 2;\u000a        pmVar9->me_dev = 0xffffffffffffffff;\u000a        *ppmVar11 = pmVar9;\u000a        ppmVar11 = &pmVar9->me_next;\u000a        ppcVar10 = (char **)getmntent(lVar7);\u000a      } while (ppcVar10 != (char **)0x0);\u000a    }\u000a    iVar2 = endmntent(lVar7);\u000a    if (iVar2 != 0) {\u000aLAB_0041add4:\u000a      *ppmVar11 = (mount_entry *)0x0;\u000a      return local_70;\u000a    }\u000a  }\u000a  else {\u000a    local_80 = (char *)0x0;\u000a    local_40 = 0;\u000a    uVar14 = 0x41a78d;\u000a    _Var3 = getline(&local_80,&local_40,__stream);\u000a    ppmVar11 = &local_70;\u000a    if (_Var3 != -1) {\u000a      local_38 = __stream;\u000a      do {\u000a        uVar1 = sscanf(local_80,"%*u %*u %u:%u %n%*s%n %n%*s%n%c",&local_44,&local_48,&local_64,\u000a                       &local_58,&local_74,&local_5c,&local_81,uVar14);\u000a        if ((uVar1 | 4) == 7) {\u000a          uVar14 = 0x41a805;\u000a          __s1 = strstr(local_80 + (long)local_5c," - ");\u000a          if ((__s1 != (char *)0x0) &&\u000a             (uVar1 = sscanf(__s1," - %n%*s%n %n%*s%n %c",&local_4c,&local_50,&local_60,&local_54,\u000a                             &local_81,uVar14), (uVar1 | 4) == 5)) {\u000a            local_80[(long)local_58] = 0;\u000a            local_80[(long)local_5c] = 0;\u000a            __s1[(long)local_50] = 0;\u000a            __s1[(long)local_54] = 0;\u000a            unescape_tab(__s1 + (long)local_60);\u000a            unescape_tab(local_80 + (long)local_74);\u000a            unescape_tab(local_80 + (long)local_64);\u000a            pmVar9 = (mount_entry *)xmalloc(0x38);\u000a            pcVar4 = xstrdup(__s1 + (long)local_60);\u000a            pmVar9->me_devname = pcVar4;\u000a            pcVar4 = xstrdup(local_80 + (long)local_74);\u000a            pmVar9->me_mountdir = pcVar4;\u000a            pcVar4 = xstrdup(local_80 + (long)local_64);\u000a            pmVar9->me_mntroot = pcVar4;\u000a            __s1 = xstrdup(__s1 + (long)local_4c);\u000a            pmVar9->me_type = __s1;\u000a            *(byte *)&pmVar9->me_dummy_bitfield = *(byte *)&pmVar9->me_dummy_bitfield | 4;\u000a            uVar5 = gnu_dev_makedev(local_44,local_48);\u000a            pmVar9->me_dev = uVar5;\u000a            __s1 = pmVar9->me_type;\u000a            iVar2 = strcmp(__s1,"autofs");\u000a            bVar13 = true;\u000a            bVar12 = true;\u000a            if (iVar2 != 0) {\u000a              iVar2 = strcmp(__s1,"proc");\u000a              bVar12 = true;\u000a              if (iVar2 != 0) {\u000a                iVar2 = strcmp(__s1,"subfs");\u000a                bVar12 = true;\u000a                if (iVar2 != 0) {\u000a                  iVar2 = strcmp(__s1,"debugfs");\u000a                  bVar12 = true;\u000a                  if (iVar2 != 0) {\u000a                    iVar2 = strcmp(__s1,"devpts");\u000a                    bVar12 = true;\u000a                    if (iVar2 != 0) {\u000a                      iVar2 = strcmp(__s1,"fusectl");\u000a                      bVar12 = true;\u000a                      if (iVar2 != 0) {\u000a                        iVar2 = strcmp(__s1,"mqueue");\u000a                        bVar12 = true;\u000a                        if (iVar2 != 0) {\u000a                          iVar2 = strcmp(__s1,"rpc_pipefs");\u000a                          bVar12 = true;\u000a                          if (iVar2 != 0) {\u000a                            iVar2 = strcmp(__s1,"sysfs");\u000a                            bVar12 = true;\u000a                            if (iVar2 != 0) {\u000a                              iVar2 = strcmp(__s1,"devfs");\u000a                              bVar12 = true;\u000a                              if (iVar2 != 0) {\u000a                                iVar2 = strcmp(__s1,"kernfs");\u000a                                bVar12 = true;\u000a                                if (iVar2 != 0) {\u000a                                  iVar2 = strcmp(__s1,"ignore");\u000a                                  bVar12 = true;\u000a                                  if (iVar2 != 0) {\u000a                                    iVar2 = strcmp(__s1,"none");\u000a                                    bVar12 = iVar2 == 0;\u000a                                  }\u000a                                }\u000a                              }\u000a                            }\u000a                          }\u000a                        }\u000a                      }\u000a                    }\u000a                  }\u000a                }\u000a              }\u000a            }\u000a            *(byte *)&pmVar9->me_dummy_bitfield =\u000a                 *(byte *)&pmVar9->me_dummy_bitfield & 0xfe | bVar12;\u000a            __s1 = pmVar9->me_devname;\u000a            pcVar4 = strchr(__s1,0x3a);\u000a            if (pcVar4 == (char *)0x0) {\u000a              if ((*__s1 == '/') && (__s1[1] == '/')) {\u000a                __s1 = pmVar9->me_type;\u000a                iVar2 = strcmp(__s1,"smbfs");\u000a                if ((iVar2 == 0) || (iVar2 = strcmp(__s1,"cifs"), iVar2 == 0)) goto LAB_0041aa9a;\u000a              }\u000a              iVar2 = strcmp("-hosts",pmVar9->me_devname);\u000a              bVar13 = iVar2 == 0;\u000a            }\u000aLAB_0041aa9a:\u000a            *(byte *)&pmVar9->me_dummy_bitfield =\u000a                 *(byte *)&pmVar9->me_dummy_bitfield & 0xfd | bVar13 * 2;\u000a            *ppmVar11 = pmVar9;\u000a            ppmVar11 = &pmVar9->me_next;\u000a            __stream = local_38;\u000a          }\u000a        }\u000a        uVar14 = 0x41aad6;\u000a        _Var3 = getline(&local_80,&local_40,__stream);\u000a      } while (_Var3 != -1);\u000a    }\u000a    free(local_80);\u000a    iVar2 = ferror(__stream);\u000a    if (iVar2 == 0) {\u000a      iVar2 = fclose(__stream);\u000a      if (iVar2 != -1) goto LAB_0041add4;\u000a    }\u000a    else {\u000a      piVar6 = __errno_location();\u000a      iVar2 = *piVar6;\u000a      fclose(__stream);\u000a      *piVar6 = iVar2;\u000a    }\u000a  }\u000a  piVar6 = __errno_location();\u000a  iVar2 = *piVar6;\u000a  *ppmVar11 = (mount_entry *)0x0;\u000a  while (local_70 != (mount_entry *)0x0) {\u000a    pmVar9 = local_70->me_next;\u000a    free_mount_entry(local_70);\u000a    local_70 = pmVar9;\u000a  }\u000a  *piVar6 = iVar2;\u000a  return (mount_entry *)0x0;\u000a}\u000a\u000a
p5365
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x58\nMOV EDI,0x4252f4\nMOV ESI,0x4222e2\nCALL 0x00402df0\nMOV R12,RAX\nTEST R12,R12\nJZ 0x0041ab51\nMOV qword ptr [RSP + 0x8],0x0\nMOV qword ptr [RSP + 0x48],0x0\nLEA RDI,[RSP + 0x8]\nLEA RSI,[RSP + 0x48]\nMOV RDX,R12\nCALL 0x00402ea0\nLEA R14,[RSP + 0x18]\nCMP RAX,-0x1\nJZ 0x0041aae0\nLEA RBX,[RSP + 0x7]\nLEA R15,[RSP + 0x2c]\nLEA R13,[RSP + 0x14]\nMOV qword ptr [RSP + 0x50],R12\nMOV RDI,qword ptr [RSP + 0x8]\nSUB RSP,0x8\nMOV ESI,0x425309\nMOV EAX,0x0\nLEA RDX,[RSP + 0x4c]\nLEA RCX,[RSP + 0x48]\nLEA R8,[RSP + 0x2c]\nLEA R9,[RSP + 0x38]\nPUSH RBX\nPUSH R15\nPUSH R13\nCALL 0x00402ce0\nADD RSP,0x20\nOR EAX,0x4\nCMP EAX,0x7\nJNZ 0x0041aac4\nMOVSXD RDI,dword ptr [RSP + 0x2c]\nADD RDI,qword ptr [RSP + 0x8]\nMOV ESI,0x425329\nCALL 0x00402f70\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x0041aac4\nSUB RSP,0x8\nMOV ESI,0x42532d\nXOR EAX,EAX\nMOV RDI,RBP\nLEA RDX,[RSP + 0x44]\nLEA RCX,[RSP + 0x40]\nLEA R8,[RSP + 0x30]\nLEA R9,[RSP + 0x3c]\nPUSH RBX\nCALL 0x00402ce0\nADD RSP,0x10\nOR EAX,0x4\nCMP EAX,0x5\nJNZ 0x0041aac4\nMOV RAX,qword ptr [RSP + 0x8]\nMOVSXD RCX,dword ptr [RSP + 0x30]\nMOV byte ptr [RAX + RCX*0x1],0x0\nMOV RAX,qword ptr [RSP + 0x8]\nMOVSXD RCX,dword ptr [RSP + 0x2c]\nMOV byte ptr [RAX + RCX*0x1],0x0\nMOVSXD RAX,dword ptr [RSP + 0x38]\nMOV byte ptr [RBP + RAX*0x1],0x0\nMOVSXD RAX,dword ptr [RSP + 0x34]\nMOV byte ptr [RBP + RAX*0x1],0x0\nMOVSXD RDI,dword ptr [RSP + 0x28]\nADD RDI,RBP\nCALL 0x0041adf0\nMOVSXD RDI,dword ptr [RSP + 0x14]\nADD RDI,qword ptr [RSP + 0x8]\nCALL 0x0041adf0\nMOVSXD RDI,dword ptr [RSP + 0x24]\nADD RDI,qword ptr [RSP + 0x8]\nCALL 0x0041adf0\nMOV EDI,0x38\nCALL 0x00417220\nMOV R13,RAX\nMOVSXD RDI,dword ptr [RSP + 0x28]\nADD RDI,RBP\nCALL 0x00417390\nMOV qword ptr [R13],RAX\nMOVSXD RDI,dword ptr [RSP + 0x14]\nADD RDI,qword ptr [RSP + 0x8]\nCALL 0x00417390\nMOV qword ptr [R13 + 0x8],RAX\nMOVSXD RDI,dword ptr [RSP + 0x24]\nADD RDI,qword ptr [RSP + 0x8]\nCALL 0x00417390\nMOV qword ptr [R13 + 0x10],RAX\nMOVSXD RDI,dword ptr [RSP + 0x3c]\nADD RDI,RBP\nCALL 0x00417390\nMOV qword ptr [R13 + 0x18],RAX\nOR byte ptr [R13 + 0x28],0x4\nMOV EDI,dword ptr [RSP + 0x44]\nMOV ESI,dword ptr [RSP + 0x40]\nCALL 0x00402f50\nMOV qword ptr [R13 + 0x20],RAX\nMOV RBP,qword ptr [R13 + 0x18]\nMOV ESI,0x425343\nMOV RDI,RBP\nCALL 0x00402b40\nMOV R12B,0x1\nTEST EAX,EAX\nMOV AL,0x1\nJZ 0x0041aa30\nMOV ESI,0x42534a\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nMOV AL,0x1\nJZ 0x0041aa30\nMOV ESI,0x42534f\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nMOV AL,0x1\nJZ 0x0041aa30\nMOV ESI,0x425355\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nMOV AL,0x1\nJZ 0x0041aa30\nMOV ESI,0x42535d\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nMOV AL,0x1\nJZ 0x0041aa30\nMOV ESI,0x425364\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nMOV AL,0x1\nJZ 0x0041aa30\nMOV ESI,0x42536c\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nMOV AL,0x1\nJZ 0x0041aa30\nMOV ESI,0x425373\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nMOV AL,0x1\nJZ 0x0041aa30\nMOV ESI,0x42537e\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nMOV AL,0x1\nJZ 0x0041aa30\nMOV ESI,0x425384\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nMOV AL,0x1\nJZ 0x0041aa30\nMOV ESI,0x42538a\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nMOV AL,0x1\nJZ 0x0041aa30\nMOV ESI,0x41fb4b\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nMOV AL,0x1\nJZ 0x0041aa30\nMOV ESI,0x425391\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nSETZ AL\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVZX ECX,byte ptr [R13 + 0x28]\nAND CL,0xfe\nOR CL,AL\nMOV byte ptr [R13 + 0x28],CL\nMOV RBP,qword ptr [R13]\nMOV ESI,0x3a\nMOV RDI,RBP\nCALL 0x00402980\nTEST RAX,RAX\nJNZ 0x0041aa9a\nCMP byte ptr [RBP],0x2f\nJNZ 0x0041aa86\nCMP byte ptr [RBP + 0x1],0x2f\nJNZ 0x0041aa86\nMOV RBP,qword ptr [R13 + 0x18]\nMOV ESI,0x425396\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nJZ 0x0041aa9a\nMOV ESI,0x42539c\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nJZ 0x0041aa9a\nMOV RSI,qword ptr [R13]\nMOV EDI,0x4253a1\nCALL 0x00402b40\nTEST EAX,EAX\nSETZ R12B\nMOVZX EAX,byte ptr [R13 + 0x28]\nADD R12B,R12B\nAND AL,0xfd\nOR AL,R12B\nMOV byte ptr [R13 + 0x28],AL\nMOV qword ptr [R14],R13\nADD R13,0x30\nMOV R14,R13\nLEA RBX,[RSP + 0x7]\nMOV R12,qword ptr [RSP + 0x50]\nLEA R13,[RSP + 0x14]\nLEA RDI,[RSP + 0x8]\nLEA RSI,[RSP + 0x48]\nMOV RDX,R12\nCALL 0x00402ea0\nCMP RAX,-0x1\nJNZ 0x0041a7b0\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x00402710\nMOV RDI,R12\nCALL 0x004027f0\nTEST EAX,EAX\nJZ 0x0041adad\nCALL 0x00402770\nMOV RBP,RAX\nMOV R15D,dword ptr [RBP]\nMOV RDI,R12\nCALL 0x004028c0\nMOV dword ptr [RBP],R15D\nCALL 0x00402770\nMOV RBP,RAX\nMOV R15D,dword ptr [RBP]\nMOV qword ptr [R14],0x0\nMOV RDI,qword ptr [RSP + 0x18]\nTEST RDI,RDI\nJZ 0x0041ab46\nNOP\nMOV RBX,qword ptr [RDI + 0x30]\nCALL 0x0041ae90\nMOV qword ptr [RSP + 0x18],RBX\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x0041ab30\nMOV dword ptr [RBP],R15D\nXOR EAX,EAX\nJMP 0x0041ade0\nMOV EDI,0x4253a8\nMOV ESI,0x4222e2\nCALL 0x00402c90\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0041ab4a\nMOV RDI,RBX\nCALL 0x00402c80\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x0041adbf\nLEA R12,[RSP + 0x18]\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV ESI,0x4253b2\nMOV RDI,RBP\nCALL 0x00402f40\nMOV R15,RAX\nMOV EDI,0x38\nCALL 0x00417220\nMOV R14,RAX\nMOV RDI,qword ptr [RBP]\nCALL 0x00417390\nMOV qword ptr [R14],RAX\nMOV RDI,qword ptr [RBP + 0x8]\nCALL 0x00417390\nMOV qword ptr [R14 + 0x8],RAX\nMOV qword ptr [R14 + 0x10],0x0\nMOV RDI,qword ptr [RBP + 0x10]\nCALL 0x00417390\nMOV RBP,RAX\nMOV qword ptr [R14 + 0x18],RBP\nOR byte ptr [R14 + 0x28],0x4\nMOV ESI,0x425343\nMOV RDI,RBP\nCALL 0x00402b40\nMOV R13B,0x1\nTEST EAX,EAX\nMOV AL,0x1\nJZ 0x0041ad00\nMOV ESI,0x42534a\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nMOV AL,0x1\nJZ 0x0041ad00\nMOV ESI,0x42534f\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nMOV AL,0x1\nJZ 0x0041ad00\nMOV ESI,0x425355\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nMOV AL,0x1\nJZ 0x0041ad00\nMOV ESI,0x42535d\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nMOV AL,0x1\nJZ 0x0041ad00\nMOV ESI,0x425364\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nMOV AL,0x1\nJZ 0x0041ad00\nMOV ESI,0x42536c\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nMOV AL,0x1\nJZ 0x0041ad00\nMOV ESI,0x425373\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nMOV AL,0x1\nJZ 0x0041ad00\nMOV ESI,0x42537e\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nMOV AL,0x1\nJZ 0x0041ad00\nMOV ESI,0x425384\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nMOV AL,0x1\nJZ 0x0041ad00\nMOV ESI,0x42538a\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nMOV AL,0x1\nJZ 0x0041ad00\nMOV ESI,0x41fb4b\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nMOV AL,0x1\nJZ 0x0041ad00\nMOV ESI,0x425391\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nSETZ CL\nTEST R15,R15\nSETZ AL\nAND AL,CL\nMOVZX ECX,byte ptr [R14 + 0x28]\nAND CL,0xfe\nOR CL,AL\nMOV byte ptr [R14 + 0x28],CL\nMOV RBP,qword ptr [R14]\nMOV ESI,0x3a\nMOV RDI,RBP\nCALL 0x00402980\nTEST RAX,RAX\nJNZ 0x0041ad73\nCMP byte ptr [RBP],0x2f\nJNZ 0x0041ad60\nCMP byte ptr [RBP + 0x1],0x2f\nJNZ 0x0041ad60\nMOV RBP,qword ptr [R14 + 0x18]\nMOV ESI,0x425396\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nJZ 0x0041ad73\nMOV ESI,0x42539c\nMOV RDI,RBP\nCALL 0x00402b40\nTEST EAX,EAX\nJZ 0x0041ad73\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RSI,qword ptr [R14]\nMOV EDI,0x4253a1\nCALL 0x00402b40\nTEST EAX,EAX\nSETZ R13B\nMOVZX EAX,byte ptr [R14 + 0x28]\nADD R13B,R13B\nAND AL,0xfd\nOR AL,R13B\nMOV byte ptr [R14 + 0x28],AL\nMOV qword ptr [R14 + 0x20],-0x1\nMOV qword ptr [R12],R14\nADD R14,0x30\nMOV RDI,RBX\nCALL 0x00402c80\nMOV RBP,RAX\nTEST RBP,RBP\nMOV R12,R14\nJNZ 0x0041ab90\nJMP 0x0041adc4\nMOV RDI,R12\nCALL 0x004028c0\nCMP EAX,-0x1\nJNZ 0x0041add4\nJMP 0x0041ab12\nLEA R14,[RSP + 0x18]\nMOV RDI,RBX\nCALL 0x00402730\nTEST EAX,EAX\nJZ 0x0041ab12\nMOV qword ptr [R14],0x0\nMOV RAX,qword ptr [RSP + 0x18]\nADD RSP,0x58\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p5366
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 58\nbf f4 52 42 00\nbe e2 22 42 00\ne8 93 86 fe ff\n49 89 c4\n4d 85 e4\n0f 84 e8 03 00 00\n48 c7 44 24 08 00 00 00 00\n48 c7 44 24 48 00 00 00 00\n48 8d 7c 24 08\n48 8d 74 24 48\n4c 89 e2\ne8 13 87 fe ff\n4c 8d 74 24 18\n48 83 f8 ff\n0f 84 44 03 00 00\n48 8d 5c 24 07\n4c 8d 7c 24 2c\n4c 8d 6c 24 14\n4c 89 64 24 50\n48 8b 7c 24 08\n48 83 ec 08\nbe 09 53 42 00\nb8 00 00 00 00\n48 8d 54 24 4c\n48 8d 4c 24 48\n4c 8d 44 24 2c\n4c 8d 4c 24 38\n53\n41 57\n41 55\ne8 ff 84 fe ff\n48 83 c4 20\n83 c8 04\n83 f8 07\n0f 85 d3 02 00 00\n48 63 7c 24 2c\n48 03 7c 24 08\nbe 29 53 42 00\ne8 6b 87 fe ff\n48 89 c5\n48 85 ed\n0f 84 b3 02 00 00\n48 83 ec 08\nbe 2d 53 42 00\n31 c0\n48 89 ef\n48 8d 54 24 44\n48 8d 4c 24 40\n4c 8d 44 24 30\n4c 8d 4c 24 3c\n53\ne8 a7 84 fe ff\n48 83 c4 10\n83 c8 04\n83 f8 05\n0f 85 7b 02 00 00\n48 8b 44 24 08\n48 63 4c 24 30\nc6 04 08 00\n48 8b 44 24 08\n48 63 4c 24 2c\nc6 04 08 00\n48 63 44 24 38\nc6 44 05 00 00\n48 63 44 24 34\nc6 44 05 00 00\n48 63 7c 24 28\n48 01 ef\ne8 6a 05 00 00\n48 63 7c 24 14\n48 03 7c 24 08\ne8 5b 05 00 00\n48 63 7c 24 24\n48 03 7c 24 08\ne8 4c 05 00 00\nbf 38 00 00 00\ne8 72 c9 ff ff\n49 89 c5\n48 63 7c 24 28\n48 01 ef\ne8 d2 ca ff ff\n49 89 45 00\n48 63 7c 24 14\n48 03 7c 24 08\ne8 bf ca ff ff\n49 89 45 08\n48 63 7c 24 24\n48 03 7c 24 08\ne8 ac ca ff ff\n49 89 45 10\n48 63 7c 24 3c\n48 01 ef\ne8 9b ca ff ff\n49 89 45 18\n41 80 4d 28 04\n8b 7c 24 44\n8b 74 24 40\ne8 45 86 fe ff\n49 89 45 20\n49 8b 6d 18\nbe 43 53 42 00\n48 89 ef\ne8 20 82 fe ff\n41 b4 01\n85 c0\nb0 01\n0f 84 03 01 00 00\nbe 4a 53 42 00\n48 89 ef\ne8 06 82 fe ff\n85 c0\nb0 01\n0f 84 ec 00 00 00\nbe 4f 53 42 00\n48 89 ef\ne8 ef 81 fe ff\n85 c0\nb0 01\n0f 84 d5 00 00 00\nbe 55 53 42 00\n48 89 ef\ne8 d8 81 fe ff\n85 c0\nb0 01\n0f 84 be 00 00 00\nbe 5d 53 42 00\n48 89 ef\ne8 c1 81 fe ff\n85 c0\nb0 01\n0f 84 a7 00 00 00\nbe 64 53 42 00\n48 89 ef\ne8 aa 81 fe ff\n85 c0\nb0 01\n0f 84 90 00 00 00\nbe 6c 53 42 00\n48 89 ef\ne8 93 81 fe ff\n85 c0\nb0 01\n74 7d\nbe 73 53 42 00\n48 89 ef\ne8 80 81 fe ff\n85 c0\nb0 01\n74 6a\nbe 7e 53 42 00\n48 89 ef\ne8 6d 81 fe ff\n85 c0\nb0 01\n74 57\nbe 84 53 42 00\n48 89 ef\ne8 5a 81 fe ff\n85 c0\nb0 01\n74 44\nbe 8a 53 42 00\n48 89 ef\ne8 47 81 fe ff\n85 c0\nb0 01\n74 31\nbe 4b fb 41 00\n48 89 ef\ne8 34 81 fe ff\n85 c0\nb0 01\n74 1e\nbe 91 53 42 00\n48 89 ef\ne8 21 81 fe ff\n85 c0\n0f 94 c0\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n41 0f b6 4d 28\n80 e1 fe\n08 c1\n41 88 4d 28\n49 8b 6d 00\nbe 3a 00 00 00\n48 89 ef\ne8 31 7f fe ff\n48 85 c0\n75 46\n80 7d 00 2f\n75 2c\n80 7d 01 2f\n75 26\n49 8b 6d 18\nbe 96 53 42 00\n48 89 ef\ne8 cf 80 fe ff\n85 c0\n74 25\nbe 9c 53 42 00\n48 89 ef\ne8 be 80 fe ff\n85 c0\n74 14\n49 8b 75 00\nbf a1 53 42 00\ne8 ac 80 fe ff\n85 c0\n41 0f 94 c4\n41 0f b6 45 28\n45 00 e4\n24 fd\n44 08 e0\n41 88 45 28\n4d 89 2e\n49 83 c5 30\n4d 89 ee\n48 8d 5c 24 07\n4c 8b 64 24 50\n4c 8d 6c 24 14\n48 8d 7c 24 08\n48 8d 74 24 48\n4c 89 e2\ne8 ca 83 fe ff\n48 83 f8 ff\n0f 85 d0 fc ff ff\n48 8b 7c 24 08\ne8 26 7c fe ff\n4c 89 e7\ne8 fe 7c fe ff\n85 c0\n0f 84 b3 02 00 00\ne8 71 7c fe ff\n48 89 c5\n44 8b 7d 00\n4c 89 e7\ne8 b2 7d fe ff\n44 89 7d 00\ne8 59 7c fe ff\n48 89 c5\n44 8b 7d 00\n49 c7 06 00 00 00 00\n48 8b 7c 24 18\n48 85 ff\n74 17\n90\n48 8b 5f 30\ne8 57 03 00 00\n48 89 5c 24 18\n48 85 db\n48 89 df\n75 ea\n44 89 7d 00\n31 c0\ne9 8f 02 00 00\nbf a8 53 42 00\nbe e2 22 42 00\ne8 30 81 fe ff\n48 89 c3\n48 85 db\n74 e2\n48 89 df\ne8 10 81 fe ff\n48 89 c5\n48 85 ed\n0f 84 43 02 00 00\n4c 8d 64 24 18\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\nbe b2 53 42 00\n48 89 ef\ne8 a3 83 fe ff\n49 89 c7\nbf 38 00 00 00\ne8 76 c6 ff ff\n49 89 c6\n48 8b 7d 00\ne8 da c7 ff ff\n49 89 06\n48 8b 7d 08\ne8 ce c7 ff ff\n49 89 46 08\n49 c7 46 10 00 00 00 00\n48 8b 7d 10\ne8 b9 c7 ff ff\n48 89 c5\n49 89 6e 18\n41 80 4e 28 04\nbe 43 53 42 00\n48 89 ef\ne8 50 7f fe ff\n41 b5 01\n85 c0\nb0 01\n0f 84 03 01 00 00\nbe 4a 53 42 00\n48 89 ef\ne8 36 7f fe ff\n85 c0\nb0 01\n0f 84 ec 00 00 00\nbe 4f 53 42 00\n48 89 ef\ne8 1f 7f fe ff\n85 c0\nb0 01\n0f 84 d5 00 00 00\nbe 55 53 42 00\n48 89 ef\ne8 08 7f fe ff\n85 c0\nb0 01\n0f 84 be 00 00 00\nbe 5d 53 42 00\n48 89 ef\ne8 f1 7e fe ff\n85 c0\nb0 01\n0f 84 a7 00 00 00\nbe 64 53 42 00\n48 89 ef\ne8 da 7e fe ff\n85 c0\nb0 01\n0f 84 90 00 00 00\nbe 6c 53 42 00\n48 89 ef\ne8 c3 7e fe ff\n85 c0\nb0 01\n0f 84 79 00 00 00\nbe 73 53 42 00\n48 89 ef\ne8 ac 7e fe ff\n85 c0\nb0 01\n74 66\nbe 7e 53 42 00\n48 89 ef\ne8 99 7e fe ff\n85 c0\nb0 01\n74 53\nbe 84 53 42 00\n48 89 ef\ne8 86 7e fe ff\n85 c0\nb0 01\n74 40\nbe 8a 53 42 00\n48 89 ef\ne8 73 7e fe ff\n85 c0\nb0 01\n74 2d\nbe 4b fb 41 00\n48 89 ef\ne8 60 7e fe ff\n85 c0\nb0 01\n74 1a\nbe 91 53 42 00\n48 89 ef\ne8 4d 7e fe ff\n85 c0\n0f 94 c1\n4d 85 ff\n0f 94 c0\n20 c8\n41 0f b6 4e 28\n80 e1 fe\n08 c1\n41 88 4e 28\n49 8b 2e\nbe 3a 00 00 00\n48 89 ef\ne8 62 7c fe ff\n48 85 c0\n75 50\n80 7d 00 2f\n75 37\n80 7d 01 2f\n75 31\n49 8b 6e 18\nbe 96 53 42 00\n48 89 ef\ne8 00 7e fe ff\n85 c0\n74 2f\nbe 9c 53 42 00\n48 89 ef\ne8 ef 7d fe ff\n85 c0\n74 1e\n66 66 2e 0f 1f 84 00 00 00 00 00\n49 8b 36\nbf a1 53 42 00\ne8 d3 7d fe ff\n85 c0\n41 0f 94 c5\n41 0f b6 46 28\n45 00 ed\n24 fd\n44 08 e8\n41 88 46 28\n49 c7 46 20 ff ff ff ff\n4d 89 34 24\n49 83 c6 30\n48 89 df\ne8 e4 7e fe ff\n48 89 c5\n48 85 ed\n4d 89 f4\n0f 85 e5 fd ff ff\neb 17\n4c 89 e7\ne8 0b 7b fe ff\n83 f8 ff\n75 1a\ne9 53 fd ff ff\n4c 8d 74 24 18\n48 89 df\ne8 64 79 fe ff\n85 c0\n0f 84 3e fd ff ff\n49 c7 06 00 00 00 00\n48 8b 44 24 18\n48 83 c4 58\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p5367
S'.text:000000000041a740\n.text:000000000041a741\n.text:000000000041a743\n.text:000000000041a745\n.text:000000000041a747\n.text:000000000041a749\n.text:000000000041a74a\n.text:000000000041a74e\n.text:000000000041a753\n.text:000000000041a758\n.text:000000000041a75d\n.text:000000000041a760\n.text:000000000041a763\n.text:000000000041a769\n.text:000000000041a772\n.text:000000000041a77b\n.text:000000000041a780\n.text:000000000041a785\n.text:000000000041a788\n.text:000000000041a78d\n.text:000000000041a792\n.text:000000000041a796\n.text:000000000041a79c\n.text:000000000041a7a1\n.text:000000000041a7a6\n.text:000000000041a7ab\n.text:000000000041a7b0\n.text:000000000041a7b5\n.text:000000000041a7b9\n.text:000000000041a7be\n.text:000000000041a7c3\n.text:000000000041a7c8\n.text:000000000041a7cd\n.text:000000000041a7d2\n.text:000000000041a7d7\n.text:000000000041a7d8\n.text:000000000041a7da\n.text:000000000041a7dc\n.text:000000000041a7e1\n.text:000000000041a7e5\n.text:000000000041a7e8\n.text:000000000041a7eb\n.text:000000000041a7f1\n.text:000000000041a7f6\n.text:000000000041a7fb\n.text:000000000041a800\n.text:000000000041a805\n.text:000000000041a808\n.text:000000000041a80b\n.text:000000000041a811\n.text:000000000041a815\n.text:000000000041a81a\n.text:000000000041a81c\n.text:000000000041a81f\n.text:000000000041a824\n.text:000000000041a829\n.text:000000000041a82e\n.text:000000000041a833\n.text:000000000041a834\n.text:000000000041a839\n.text:000000000041a83d\n.text:000000000041a840\n.text:000000000041a843\n.text:000000000041a849\n.text:000000000041a84e\n.text:000000000041a853\n.text:000000000041a857\n.text:000000000041a85c\n.text:000000000041a861\n.text:000000000041a865\n.text:000000000041a86a\n.text:000000000041a86f\n.text:000000000041a874\n.text:000000000041a879\n.text:000000000041a87e\n.text:000000000041a881\n.text:000000000041a886\n.text:000000000041a88b\n.text:000000000041a890\n.text:000000000041a895\n.text:000000000041a89a\n.text:000000000041a89f\n.text:000000000041a8a4\n.text:000000000041a8a9\n.text:000000000041a8ae\n.text:000000000041a8b1\n.text:000000000041a8b6\n.text:000000000041a8b9\n.text:000000000041a8be\n.text:000000000041a8c2\n.text:000000000041a8c7\n.text:000000000041a8cc\n.text:000000000041a8d1\n.text:000000000041a8d5\n.text:000000000041a8da\n.text:000000000041a8df\n.text:000000000041a8e4\n.text:000000000041a8e8\n.text:000000000041a8ed\n.text:000000000041a8f0\n.text:000000000041a8f5\n.text:000000000041a8f9\n.text:000000000041a8fe\n.text:000000000041a902\n.text:000000000041a906\n.text:000000000041a90b\n.text:000000000041a90f\n.text:000000000041a913\n.text:000000000041a918\n.text:000000000041a91b\n.text:000000000041a920\n.text:000000000041a923\n.text:000000000041a925\n.text:000000000041a927\n.text:000000000041a92d\n.text:000000000041a932\n.text:000000000041a935\n.text:000000000041a93a\n.text:000000000041a93c\n.text:000000000041a93e\n.text:000000000041a944\n.text:000000000041a949\n.text:000000000041a94c\n.text:000000000041a951\n.text:000000000041a953\n.text:000000000041a955\n.text:000000000041a95b\n.text:000000000041a960\n.text:000000000041a963\n.text:000000000041a968\n.text:000000000041a96a\n.text:000000000041a96c\n.text:000000000041a972\n.text:000000000041a977\n.text:000000000041a97a\n.text:000000000041a97f\n.text:000000000041a981\n.text:000000000041a983\n.text:000000000041a989\n.text:000000000041a98e\n.text:000000000041a991\n.text:000000000041a996\n.text:000000000041a998\n.text:000000000041a99a\n.text:000000000041a9a0\n.text:000000000041a9a5\n.text:000000000041a9a8\n.text:000000000041a9ad\n.text:000000000041a9af\n.text:000000000041a9b1\n.text:000000000041a9b3\n.text:000000000041a9b8\n.text:000000000041a9bb\n.text:000000000041a9c0\n.text:000000000041a9c2\n.text:000000000041a9c4\n.text:000000000041a9c6\n.text:000000000041a9cb\n.text:000000000041a9ce\n.text:000000000041a9d3\n.text:000000000041a9d5\n.text:000000000041a9d7\n.text:000000000041a9d9\n.text:000000000041a9de\n.text:000000000041a9e1\n.text:000000000041a9e6\n.text:000000000041a9e8\n.text:000000000041a9ea\n.text:000000000041a9ec\n.text:000000000041a9f1\n.text:000000000041a9f4\n.text:000000000041a9f9\n.text:000000000041a9fb\n.text:000000000041a9fd\n.text:000000000041a9ff\n.text:000000000041aa04\n.text:000000000041aa07\n.text:000000000041aa0c\n.text:000000000041aa0e\n.text:000000000041aa10\n.text:000000000041aa12\n.text:000000000041aa17\n.text:000000000041aa1a\n.text:000000000041aa1f\n.text:000000000041aa21\n.text:000000000041aa24\n.text:000000000041aa30\n.text:000000000041aa35\n.text:000000000041aa38\n.text:000000000041aa3a\n.text:000000000041aa3e\n.text:000000000041aa42\n.text:000000000041aa47\n.text:000000000041aa4a\n.text:000000000041aa4f\n.text:000000000041aa52\n.text:000000000041aa54\n.text:000000000041aa58\n.text:000000000041aa5a\n.text:000000000041aa5e\n.text:000000000041aa60\n.text:000000000041aa64\n.text:000000000041aa69\n.text:000000000041aa6c\n.text:000000000041aa71\n.text:000000000041aa73\n.text:000000000041aa75\n.text:000000000041aa7a\n.text:000000000041aa7d\n.text:000000000041aa82\n.text:000000000041aa84\n.text:000000000041aa86\n.text:000000000041aa8a\n.text:000000000041aa8f\n.text:000000000041aa94\n.text:000000000041aa96\n.text:000000000041aa9a\n.text:000000000041aa9f\n.text:000000000041aaa2\n.text:000000000041aaa4\n.text:000000000041aaa7\n.text:000000000041aaab\n.text:000000000041aaae\n.text:000000000041aab2\n.text:000000000041aab5\n.text:000000000041aaba\n.text:000000000041aabf\n.text:000000000041aac4\n.text:000000000041aac9\n.text:000000000041aace\n.text:000000000041aad1\n.text:000000000041aad6\n.text:000000000041aada\n.text:000000000041aae0\n.text:000000000041aae5\n.text:000000000041aaea\n.text:000000000041aaed\n.text:000000000041aaf2\n.text:000000000041aaf4\n.text:000000000041aafa\n.text:000000000041aaff\n.text:000000000041ab02\n.text:000000000041ab06\n.text:000000000041ab09\n.text:000000000041ab0e\n.text:000000000041ab12\n.text:000000000041ab17\n.text:000000000041ab1a\n.text:000000000041ab1e\n.text:000000000041ab25\n.text:000000000041ab2a\n.text:000000000041ab2d\n.text:000000000041ab2f\n.text:000000000041ab30\n.text:000000000041ab34\n.text:000000000041ab39\n.text:000000000041ab3e\n.text:000000000041ab41\n.text:000000000041ab44\n.text:000000000041ab46\n.text:000000000041ab4a\n.text:000000000041ab4c\n.text:000000000041ab51\n.text:000000000041ab56\n.text:000000000041ab5b\n.text:000000000041ab60\n.text:000000000041ab63\n.text:000000000041ab66\n.text:000000000041ab68\n.text:000000000041ab6b\n.text:000000000041ab70\n.text:000000000041ab73\n.text:000000000041ab76\n.text:000000000041ab7c\n.text:000000000041ab81\n.text:000000000041ab90\n.text:000000000041ab95\n.text:000000000041ab98\n.text:000000000041ab9d\n.text:000000000041aba0\n.text:000000000041aba5\n.text:000000000041abaa\n.text:000000000041abad\n.text:000000000041abb1\n.text:000000000041abb6\n.text:000000000041abb9\n.text:000000000041abbd\n.text:000000000041abc2\n.text:000000000041abc6\n.text:000000000041abce\n.text:000000000041abd2\n.text:000000000041abd7\n.text:000000000041abda\n.text:000000000041abde\n.text:000000000041abe3\n.text:000000000041abe8\n.text:000000000041abeb\n.text:000000000041abf0\n.text:000000000041abf3\n.text:000000000041abf5\n.text:000000000041abf7\n.text:000000000041abfd\n.text:000000000041ac02\n.text:000000000041ac05\n.text:000000000041ac0a\n.text:000000000041ac0c\n.text:000000000041ac0e\n.text:000000000041ac14\n.text:000000000041ac19\n.text:000000000041ac1c\n.text:000000000041ac21\n.text:000000000041ac23\n.text:000000000041ac25\n.text:000000000041ac2b\n.text:000000000041ac30\n.text:000000000041ac33\n.text:000000000041ac38\n.text:000000000041ac3a\n.text:000000000041ac3c\n.text:000000000041ac42\n.text:000000000041ac47\n.text:000000000041ac4a\n.text:000000000041ac4f\n.text:000000000041ac51\n.text:000000000041ac53\n.text:000000000041ac59\n.text:000000000041ac5e\n.text:000000000041ac61\n.text:000000000041ac66\n.text:000000000041ac68\n.text:000000000041ac6a\n.text:000000000041ac70\n.text:000000000041ac75\n.text:000000000041ac78\n.text:000000000041ac7d\n.text:000000000041ac7f\n.text:000000000041ac81\n.text:000000000041ac87\n.text:000000000041ac8c\n.text:000000000041ac8f\n.text:000000000041ac94\n.text:000000000041ac96\n.text:000000000041ac98\n.text:000000000041ac9a\n.text:000000000041ac9f\n.text:000000000041aca2\n.text:000000000041aca7\n.text:000000000041aca9\n.text:000000000041acab\n.text:000000000041acad\n.text:000000000041acb2\n.text:000000000041acb5\n.text:000000000041acba\n.text:000000000041acbc\n.text:000000000041acbe\n.text:000000000041acc0\n.text:000000000041acc5\n.text:000000000041acc8\n.text:000000000041accd\n.text:000000000041accf\n.text:000000000041acd1\n.text:000000000041acd3\n.text:000000000041acd8\n.text:000000000041acdb\n.text:000000000041ace0\n.text:000000000041ace2\n.text:000000000041ace4\n.text:000000000041ace6\n.text:000000000041aceb\n.text:000000000041acee\n.text:000000000041acf3\n.text:000000000041acf5\n.text:000000000041acf8\n.text:000000000041acfb\n.text:000000000041acfe\n.text:000000000041ad00\n.text:000000000041ad05\n.text:000000000041ad08\n.text:000000000041ad0a\n.text:000000000041ad0e\n.text:000000000041ad11\n.text:000000000041ad16\n.text:000000000041ad19\n.text:000000000041ad1e\n.text:000000000041ad21\n.text:000000000041ad23\n.text:000000000041ad27\n.text:000000000041ad29\n.text:000000000041ad2d\n.text:000000000041ad2f\n.text:000000000041ad33\n.text:000000000041ad38\n.text:000000000041ad3b\n.text:000000000041ad40\n.text:000000000041ad42\n.text:000000000041ad44\n.text:000000000041ad49\n.text:000000000041ad4c\n.text:000000000041ad51\n.text:000000000041ad53\n.text:000000000041ad55\n.text:000000000041ad60\n.text:000000000041ad63\n.text:000000000041ad68\n.text:000000000041ad6d\n.text:000000000041ad6f\n.text:000000000041ad73\n.text:000000000041ad78\n.text:000000000041ad7b\n.text:000000000041ad7d\n.text:000000000041ad80\n.text:000000000041ad84\n.text:000000000041ad8c\n.text:000000000041ad90\n.text:000000000041ad94\n.text:000000000041ad97\n.text:000000000041ad9c\n.text:000000000041ad9f\n.text:000000000041ada2\n.text:000000000041ada5\n.text:000000000041adab\n.text:000000000041adad\n.text:000000000041adb0\n.text:000000000041adb5\n.text:000000000041adb8\n.text:000000000041adba\n.text:000000000041adbf\n.text:000000000041adc4\n.text:000000000041adc7\n.text:000000000041adcc\n.text:000000000041adce\n.text:000000000041add4\n.text:000000000041addb\n.text:000000000041ade0\n.text:000000000041ade4\n.text:000000000041ade5\n.text:000000000041ade7\n.text:000000000041ade9\n.text:000000000041adeb\n.text:000000000041aded\n.text:000000000041adee\n'
p5368
tp5369
sS'parse_false'
p5370
(S'\n__stdcall parse_false(parser_table * entry, char * * argv, int * arg_ptr)\n'
p5371
V\u000a_Bool parse_false(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  insert_false();\u000a  return true;\u000a}\u000a\u000a
p5372
S'PUSH RAX\nCALL 0x0040d2c0\nMOV AL,0x1\nPOP RCX\nRET\n'
p5373
S'50\ne8 8a 0c 00 00\nb0 01\n59\nc3\n'
p5374
S'.text:000000000040c630\n.text:000000000040c631\n.text:000000000040c636\n.text:000000000040c638\n.text:000000000040c639\n'
p5375
tp5376
sS'chdir'
p5377
(S'\n__stdcall chdir(char * __path)\n'
p5378
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint chdir(char *__path)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_chdir_0062d150)();\u000a  return iVar1;\u000a}\u000a\u000a
p5379
S'JMP qword ptr [0x0062d150]\n'
p5380
S'ff 25 ea a7 22 00\n'
p5381
S'.plt:0000000000402960\n'
p5382
tp5383
sS're_compile_pattern'
p5384
(S'\n__stdcall re_compile_pattern(char * __pattern, size_t __length, re_pattern_buffer * __buffer)\n'
p5385
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * re_compile_pattern(char *__pattern,size_t __length,re_pattern_buffer *__buffer)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_re_compile_pattern_0062d428)();\u000a  return pcVar1;\u000a}\u000a\u000a
p5386
S'JMP qword ptr [0x0062d428]\n'
p5387
S'ff 25 12 a5 22 00\n'
p5388
S'.plt:0000000000402f10\n'
p5389
tp5390
sS'parse_execdir'
p5391
(S'\n__stdcall parse_execdir(parser_table * entry, char * * argv, int * arg_ptr)\n'
p5392
V\u000a_Bool parse_execdir(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = insert_exec_ok("-execdir",entry,argv,arg_ptr);\u000a  return _Var1;\u000a}\u000a\u000a
p5393
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nMOV EDI,0x41c754\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x0040ca60\n'
p5394
S'48 89 d0\n48 89 f1\n48 89 fa\nbf 54 c7 41 00\n48 89 d6\n48 89 ca\n48 89 c1\ne9 14 16 00 00\n'
p5395
S'.text:000000000040b430\n.text:000000000040b433\n.text:000000000040b436\n.text:000000000040b439\n.text:000000000040b43e\n.text:000000000040b441\n.text:000000000040b444\n.text:000000000040b447\n'
p5396
tp5397
sS'getc_unlocked'
p5398
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p5399
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_0062d0a0)();\u000a  return iVar1;\u000a}\u000a\u000a
p5400
S'JMP qword ptr [0x0062d0a0]\n'
p5401
S'ff 25 9a a8 22 00\n'
p5402
S'.plt:0000000000402800\n'
p5403
tp5404
sS'hash_insert_if_absent'
p5405
(S'\n__stdcall hash_insert_if_absent(Hash_table * table, void * entry, void * * matched_ent)\n'
p5406
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000aint hash_insert_if_absent(Hash_table *table,void *entry,void **matched_ent)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  Hash_tuning *pHVar3;\u000a  _Bool _Var4;\u000a  hash_entry *in_RAX;\u000a  void *pvVar5;\u000a  hash_entry *phVar6;\u000a  size_t candidate;\u000a  float fVar7;\u000a  float fVar8;\u000a  hash_entry *local_28;\u000a  \u000a  if (entry != (void *)0x0) {\u000a    local_28 = in_RAX;\u000a    pvVar5 = hash_find_entry(table,entry,&local_28);\u000a    if (pvVar5 != (void *)0x0) {\u000a      if (matched_ent == (void **)0x0) {\u000a        return 0;\u000a      }\u000a      *matched_ent = pvVar5;\u000a      return 0;\u000a    }\u000a    uVar1 = table->n_buckets;\u000a    uVar2 = table->n_buckets_used;\u000a    if ((long)uVar2 < 0) {\u000a      fVar7 = (float)((ulong)((uint)uVar2 & 1) | uVar2 >> 1);\u000a      fVar7 = fVar7 + fVar7;\u000a    }\u000a    else {\u000a      fVar7 = (float)uVar2;\u000a    }\u000a    if ((long)uVar1 < 0) {\u000a      fVar8 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a      fVar8 = fVar8 + fVar8;\u000a    }\u000a    else {\u000a      fVar8 = (float)uVar1;\u000a    }\u000a    if (fVar8 * table->tuning->growth_threshold < fVar7) {\u000a      check_tuning(table);\u000a      uVar1 = table->n_buckets;\u000a      uVar2 = table->n_buckets_used;\u000a      if ((long)uVar2 < 0) {\u000a        fVar7 = (float)((ulong)((uint)uVar2 & 1) | uVar2 >> 1);\u000a        fVar7 = fVar7 + fVar7;\u000a      }\u000a      else {\u000a        fVar7 = (float)uVar2;\u000a      }\u000a      pHVar3 = table->tuning;\u000a      if ((long)uVar1 < 0) {\u000a        fVar8 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a        fVar8 = fVar8 + fVar8;\u000a      }\u000a      else {\u000a        fVar8 = (float)uVar1;\u000a      }\u000a      if (pHVar3->growth_threshold * fVar8 < fVar7) {\u000a        fVar8 = fVar8 * pHVar3->growth_factor;\u000a        if (pHVar3->is_n_buckets == false) {\u000a          fVar8 = fVar8 * pHVar3->growth_threshold;\u000a        }\u000a        if (_DAT_00422834 <= fVar8) {\u000a          return -1;\u000a        }\u000a        candidate = (long)fVar8;\u000a        if (DAT_00422830 <= fVar8) {\u000a          candidate = (long)(fVar8 - DAT_00422830) ^ 0x8000000000000000;\u000a        }\u000a        _Var4 = hash_rehash(table,candidate);\u000a        if (_Var4 == false) {\u000a          return -1;\u000a        }\u000a        pvVar5 = hash_find_entry(table,entry,&local_28);\u000a        if (pvVar5 != (void *)0x0) goto LAB_00410fbd;\u000a      }\u000a    }\u000a    if (local_28->data == (void *)0x0) {\u000a      local_28->data = entry;\u000a      table->n_entries = table->n_entries + 1;\u000a      table->n_buckets_used = table->n_buckets_used + 1;\u000a    }\u000a    else {\u000a      phVar6 = allocate_entry(table);\u000a      if (phVar6 == (hash_entry *)0x0) {\u000a        return -1;\u000a      }\u000a      phVar6->data = entry;\u000a      phVar6->next = local_28->next;\u000a      local_28->next = phVar6;\u000a      table->n_entries = table->n_entries + 1;\u000a    }\u000a    return 1;\u000a  }\u000aLAB_00410fbd:\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p5407
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV R14,RSI\nMOV R15,RDI\nTEST R14,R14\nJZ 0x00410fbd\nMOV RDX,RSP\nXOR EBP,EBP\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x00410fd0\nTEST RAX,RAX\nJZ 0x00410e31\nTEST RBX,RBX\nJZ 0x00410fb0\nMOV qword ptr [RBX],RAX\nJMP 0x00410fb0\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x00410e45\nCVTSI2SS XMM0,RCX\nJMP 0x00410e5a\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM0,RCX\nADDSS XMM0,XMM0\nMOV RCX,qword ptr [R15 + 0x28]\nTEST RAX,RAX\nJS 0x00410e6a\nCVTSI2SS XMM1,RAX\nJMP 0x00410e7f\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nCVTSI2SS XMM1,RAX\nADDSS XMM1,XMM1\nMULSS XMM1,dword ptr [RCX + 0x8]\nUCOMISS XMM0,XMM1\nJBE 0x00410f69\nMOV RDI,R15\nCALL 0x00410900\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x00410ea9\nCVTSI2SS XMM2,RCX\nJMP 0x00410ebe\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM2,RCX\nADDSS XMM2,XMM2\nMOV RCX,qword ptr [R15 + 0x28]\nMOVSS XMM1,dword ptr [RCX + 0x8]\nTEST RAX,RAX\nJS 0x00410ed6\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nJMP 0x00410eee\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOVAPS XMM3,XMM1\nMULSS XMM3,XMM0\nUCOMISS XMM2,XMM3\nJBE 0x00410f69\nCMP byte ptr [RCX + 0x10],0x0\nMULSS XMM0,dword ptr [RCX + 0xc]\nJNZ 0x00410f09\nMULSS XMM0,XMM1\nMOV EBP,0xffffffff\nUCOMISS XMM0,dword ptr [0x00422834]\nJNC 0x00410fb0\nMOVSS XMM1,dword ptr [0x00422830]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RSI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RSI,RCX\nMOV RDI,R15\nCALL 0x00410ba0\nTEST AL,AL\nJZ 0x00410fb0\nMOV RDX,RSP\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x00410fd0\nTEST RAX,RAX\nJNZ 0x00410fbd\nMOV RAX,qword ptr [RSP]\nCMP qword ptr [RAX],0x0\nJZ 0x00410f99\nMOV RDI,R15\nCALL 0x00411090\nTEST RAX,RAX\nJZ 0x00410fab\nMOV qword ptr [RAX],R14\nMOV RCX,qword ptr [RSP]\nMOV RDX,qword ptr [RCX + 0x8]\nMOV qword ptr [RAX + 0x8],RDX\nMOV qword ptr [RCX + 0x8],RAX\nINC qword ptr [R15 + 0x20]\nJMP 0x00410fa4\nMOV qword ptr [RAX],R14\nINC qword ptr [R15 + 0x20]\nINC qword ptr [R15 + 0x18]\nMOV EBP,0x1\nJMP 0x00410fb0\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00402750\n'
p5408
S'55\n41 57\n41 56\n53\n50\n48 89 d3\n49 89 f6\n49 89 ff\n4d 85 f6\n0f 84 b4 01 00 00\n48 89 e2\n31 ed\n31 c9\n4c 89 ff\n4c 89 f6\ne8 b5 01 00 00\n48 85 c0\n74 11\n48 85 db\n0f 84 87 01 00 00\n48 89 03\ne9 7f 01 00 00\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 07\nf3 48 0f 2a c1\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a c1\nf3 0f 58 c0\n49 8b 4f 28\n48 85 c0\n78 07\nf3 48 0f 2a c8\neb 15\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\nf3 48 0f 2a c8\nf3 0f 58 c9\nf3 0f 59 49 08\n0f 2e c1\n0f 86 dc 00 00 00\n4c 89 ff\ne8 6b fa ff ff\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 07\nf3 48 0f 2a d1\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a d1\nf3 0f 58 d2\n49 8b 4f 28\nf3 0f 10 49 08\n48 85 c0\n78 0a\n0f 57 c0\nf3 48 0f 2a c0\neb 18\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\n0f 57 c0\nf3 48 0f 2a c0\nf3 0f 58 c0\n0f 28 d9\nf3 0f 59 d8\n0f 2e d3\n76 6f\n80 79 10 00\nf3 0f 59 41 0c\n75 04\nf3 0f 59 c1\nbd ff ff ff ff\n0f 2e 05 1f 19 01 00\n0f 83 95 00 00 00\nf3 0f 10 0d 0d 19 01 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f0\n0f 2e c1\n48 0f 43 f1\n4c 89 ff\ne8 50 fc ff ff\n84 c0\n74 5c\n48 89 e2\n31 c9\n4c 89 ff\n4c 89 f6\ne8 6c 00 00 00\n48 85 c0\n75 54\n48 8b 04 24\n48 83 38 00\n74 26\n4c 89 ff\ne8 15 01 00 00\n48 85 c0\n74 2b\n4c 89 30\n48 8b 0c 24\n48 8b 51 08\n48 89 50 08\n48 89 41 08\n49 ff 47 20\neb 0b\n4c 89 30\n49 ff 47 20\n49 ff 47 18\nbd 01 00 00 00\neb 05\nbd ff ff ff ff\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\ne8 8e 17 ff ff\n'
p5409
S'.text:0000000000410df0\n.text:0000000000410df1\n.text:0000000000410df3\n.text:0000000000410df5\n.text:0000000000410df6\n.text:0000000000410df7\n.text:0000000000410dfa\n.text:0000000000410dfd\n.text:0000000000410e00\n.text:0000000000410e03\n.text:0000000000410e09\n.text:0000000000410e0c\n.text:0000000000410e0e\n.text:0000000000410e10\n.text:0000000000410e13\n.text:0000000000410e16\n.text:0000000000410e1b\n.text:0000000000410e1e\n.text:0000000000410e20\n.text:0000000000410e23\n.text:0000000000410e29\n.text:0000000000410e2c\n.text:0000000000410e31\n.text:0000000000410e35\n.text:0000000000410e39\n.text:0000000000410e3c\n.text:0000000000410e3e\n.text:0000000000410e43\n.text:0000000000410e45\n.text:0000000000410e48\n.text:0000000000410e4b\n.text:0000000000410e4e\n.text:0000000000410e51\n.text:0000000000410e56\n.text:0000000000410e5a\n.text:0000000000410e5e\n.text:0000000000410e61\n.text:0000000000410e63\n.text:0000000000410e68\n.text:0000000000410e6a\n.text:0000000000410e6d\n.text:0000000000410e70\n.text:0000000000410e73\n.text:0000000000410e76\n.text:0000000000410e7b\n.text:0000000000410e7f\n.text:0000000000410e84\n.text:0000000000410e87\n.text:0000000000410e8d\n.text:0000000000410e90\n.text:0000000000410e95\n.text:0000000000410e99\n.text:0000000000410e9d\n.text:0000000000410ea0\n.text:0000000000410ea2\n.text:0000000000410ea7\n.text:0000000000410ea9\n.text:0000000000410eac\n.text:0000000000410eaf\n.text:0000000000410eb2\n.text:0000000000410eb5\n.text:0000000000410eba\n.text:0000000000410ebe\n.text:0000000000410ec2\n.text:0000000000410ec7\n.text:0000000000410eca\n.text:0000000000410ecc\n.text:0000000000410ecf\n.text:0000000000410ed4\n.text:0000000000410ed6\n.text:0000000000410ed9\n.text:0000000000410edc\n.text:0000000000410edf\n.text:0000000000410ee2\n.text:0000000000410ee5\n.text:0000000000410eea\n.text:0000000000410eee\n.text:0000000000410ef1\n.text:0000000000410ef5\n.text:0000000000410ef8\n.text:0000000000410efa\n.text:0000000000410efe\n.text:0000000000410f03\n.text:0000000000410f05\n.text:0000000000410f09\n.text:0000000000410f0e\n.text:0000000000410f15\n.text:0000000000410f1b\n.text:0000000000410f23\n.text:0000000000410f26\n.text:0000000000410f2a\n.text:0000000000410f2f\n.text:0000000000410f39\n.text:0000000000410f3c\n.text:0000000000410f41\n.text:0000000000410f44\n.text:0000000000410f48\n.text:0000000000410f4b\n.text:0000000000410f50\n.text:0000000000410f52\n.text:0000000000410f54\n.text:0000000000410f57\n.text:0000000000410f59\n.text:0000000000410f5c\n.text:0000000000410f5f\n.text:0000000000410f64\n.text:0000000000410f67\n.text:0000000000410f69\n.text:0000000000410f6d\n.text:0000000000410f71\n.text:0000000000410f73\n.text:0000000000410f76\n.text:0000000000410f7b\n.text:0000000000410f7e\n.text:0000000000410f80\n.text:0000000000410f83\n.text:0000000000410f87\n.text:0000000000410f8b\n.text:0000000000410f8f\n.text:0000000000410f93\n.text:0000000000410f97\n.text:0000000000410f99\n.text:0000000000410f9c\n.text:0000000000410fa0\n.text:0000000000410fa4\n.text:0000000000410fa9\n.text:0000000000410fab\n.text:0000000000410fb0\n.text:0000000000410fb2\n.text:0000000000410fb6\n.text:0000000000410fb7\n.text:0000000000410fb9\n.text:0000000000410fbb\n.text:0000000000410fbc\n.text:0000000000410fbd\n'
p5410
tp5411
sS'memmove'
p5412
(S'\n__stdcall memmove(void * __dest, void * __src, size_t __n)\n'
p5413
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memmove(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memmove_0062d360)();\u000a  return pvVar1;\u000a}\u000a\u000a
p5414
S'JMP qword ptr [0x0062d360]\n'
p5415
S'ff 25 da a5 22 00\n'
p5416
S'.plt:0000000000402d80\n'
p5417
tp5418
sS'c_isascii'
p5419
(S'\n__stdcall c_isascii()\n'
p5420
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p5421
S'CMP EDI,0x80\nSETC AL\nRET\n'
p5422
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p5423
S'.text:000000000041b990\n.text:000000000041b996\n.text:000000000041b999\n'
p5424
tp5425
sS'cdb_advance_fd'
p5426
(S'\n__stdcall cdb_advance_fd(cd_buf * cdb, char * dir)\n'
p5427
V\u000aint cdb_advance_fd(cd_buf *cdb,char *dir)\u000a\u000a{\u000a  cd_buf cVar1;\u000a  int iVar2;\u000a  \u000a  iVar2 = 0;\u000a  cVar1 = (cd_buf)openat((int)*cdb,dir,0x10900);\u000a  if ((int)cVar1 < 0) {\u000a    iVar2 = -1;\u000a  }\u000a  else {\u000a    cdb_free(cdb);\u000a    *cdb = cVar1;\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p5428
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nMOV EDI,dword ptr [RBX]\nXOR R14D,R14D\nMOV EDX,0x10900\nXOR EAX,EAX\nCALL 0x00402950\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00417d6a\nMOV RDI,RBX\nCALL 0x00417db0\nMOV dword ptr [RBX],EBP\nJMP 0x00417d70\nMOV R14D,0xffffffff\nMOV EAX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p5429
S'55\n41 56\n53\n48 89 fb\n8b 3b\n45 31 f6\nba 00 09 01 00\n31 c0\ne8 f8 ab fe ff\n89 c5\n85 ed\n78 0c\n48 89 df\ne8 4a 00 00 00\n89 2b\neb 06\n41 be ff ff ff ff\n44 89 f0\n5b\n41 5e\n5d\nc3\n'
p5430
S'.text:0000000000417d40\n.text:0000000000417d41\n.text:0000000000417d43\n.text:0000000000417d44\n.text:0000000000417d47\n.text:0000000000417d49\n.text:0000000000417d4c\n.text:0000000000417d51\n.text:0000000000417d53\n.text:0000000000417d58\n.text:0000000000417d5a\n.text:0000000000417d5c\n.text:0000000000417d5e\n.text:0000000000417d61\n.text:0000000000417d66\n.text:0000000000417d68\n.text:0000000000417d6a\n.text:0000000000417d70\n.text:0000000000417d73\n.text:0000000000417d74\n.text:0000000000417d76\n.text:0000000000417d77\n'
p5431
tp5432
sS'dirfd'
p5433
(S'\n__stdcall dirfd(DIR * __dirp)\n'
p5434
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint dirfd(DIR *__dirp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_dirfd_0062d258)();\u000a  return iVar1;\u000a}\u000a\u000a
p5435
S'JMP qword ptr [0x0062d258]\n'
p5436
S'ff 25 e2 a6 22 00\n'
p5437
S'.plt:0000000000402b70\n'
p5438
tp5439
sS'parse_path'
p5440
(S'\n__stdcall parse_path(parser_table * entry, char * * argv, int * arg_ptr)\n'
p5441
V\u000a_Bool parse_path(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = insert_path_check(entry,argv,arg_ptr,"path",pred_path);\u000a  return _Var1;\u000a}\u000a\u000a
p5442
S'MOV ECX,0x420eeb\nMOV R8D,0x404550\nJMP 0x0040d5b0\n'
p5443
S'b9 eb 0e 42 00\n41 b8 50 45 40 00\ne9 50 18 00 00\n'
p5444
S'.text:000000000040bd50\n.text:000000000040bd55\n.text:000000000040bd5b\n'
p5445
tp5446
sS'diropen'
p5447
(S'\n__stdcall diropen(FTS * sp, char * dir)\n'
p5448
V\u000aint diropen(FTS *sp,char *dir)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  uint uVar3;\u000a  uint uVar4;\u000a  \u000a  uVar1 = sp->fts_options;\u000a  uVar3 = (uVar1 & 0x10) * 0x2000;\u000a  uVar4 = (uVar1 & 0x800) * 0x80 + 0x10900 + uVar3;\u000a  if ((uVar1 & 0x200) == 0) {\u000a    iVar2 = open_safer(dir,(ulong)uVar4);\u000a  }\u000a  else {\u000a    iVar2 = openat_safer((char *)(ulong)(uint)sp->fts_cwd_fd,dir,(ulong)uVar4,(ulong)uVar3);\u000a  }\u000a  if (-1 < iVar2) {\u000a    set_cloexec_flag();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p5449
S'PUSH RBX\nMOV EAX,dword ptr [RDI + 0x48]\nMOV ECX,EAX\nAND ECX,0x10\nSHL ECX,0xd\nMOV EDX,EAX\nSHL EDX,0x7\nAND EDX,0x40000\nLEA EDX,[0x10900 + RDX + RCX*0x1]\nTEST AH,0x2\nJNZ 0x00418831\nXOR EAX,EAX\nMOV RDI,RSI\nMOV ESI,EDX\nCALL 0x00410160\nJMP 0x0041883b\nMOV EDI,dword ptr [RDI + 0x2c]\nXOR EAX,EAX\nCALL 0x0041c230\nMOV EBX,EAX\nTEST EBX,EBX\nJS 0x0041884d\nMOV ESI,0x1\nMOV EDI,EBX\nCALL 0x0040fdd0\nMOV EAX,EBX\nPOP RBX\nRET\n'
p5450
S'53\n8b 47 48\n89 c1\n83 e1 10\nc1 e1 0d\n89 c2\nc1 e2 07\n81 e2 00 00 04 00\n8d 94 0a 00 09 01 00\nf6 c4 02\n75 0e\n31 c0\n48 89 f7\n89 d6\ne8 31 79 ff ff\neb 0a\n8b 7f 2c\n31 c0\ne8 f5 39 00 00\n89 c3\n85 db\n78 0c\nbe 01 00 00 00\n89 df\ne8 83 75 ff ff\n89 d8\n5b\nc3\n'
p5451
S'.text:0000000000418800\n.text:0000000000418801\n.text:0000000000418804\n.text:0000000000418806\n.text:0000000000418809\n.text:000000000041880c\n.text:000000000041880e\n.text:0000000000418811\n.text:0000000000418817\n.text:000000000041881e\n.text:0000000000418821\n.text:0000000000418823\n.text:0000000000418825\n.text:0000000000418828\n.text:000000000041882a\n.text:000000000041882f\n.text:0000000000418831\n.text:0000000000418834\n.text:0000000000418836\n.text:000000000041883b\n.text:000000000041883d\n.text:000000000041883f\n.text:0000000000418841\n.text:0000000000418846\n.text:0000000000418848\n.text:000000000041884d\n.text:000000000041884f\n.text:0000000000418850\n'
p5452
tp5453
sS'_start'
p5454
(S'\n__stdcall _start()\n'
p5455
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_0062cff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p5456
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x41c450\nMOV RCX,0x41c3e0\nMOV RDI,0x403090\nCALL qword ptr [0x0062cff0]\nHLT\n'
p5457
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 50 c4 41 00\n48 c7 c1 e0 c3 41 00\n48 c7 c7 90 30 40 00\nff 15 36 a0 22 00\nf4\n'
p5458
S'.text:0000000000402f90\n.text:0000000000402f92\n.text:0000000000402f95\n.text:0000000000402f96\n.text:0000000000402f99\n.text:0000000000402f9d\n.text:0000000000402f9e\n.text:0000000000402f9f\n.text:0000000000402fa6\n.text:0000000000402fad\n.text:0000000000402fb4\n.text:0000000000402fba\n'
p5459
tp5460
sS'lgetfilecon'
p5461
(S'\n__stdcall lgetfilecon(char * file, security_context_t * con)\n'
p5462
V\u000aint lgetfilecon(char *file,security_context_t *con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p5463
S'PUSH RAX\nCALL 0x00402770\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p5464
S'50\ne8 8a bc fe ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p5465
S'.text:0000000000416ae0\n.text:0000000000416ae1\n.text:0000000000416ae6\n.text:0000000000416aec\n.text:0000000000416af1\n.text:0000000000416af2\n'
p5466
tp5467
sS'humblock'
p5468
(S'\n__stdcall humblock(char * spec, uintmax_t * block_size, int * options)\n'
p5469
V\u000astrtol_error humblock(char *spec,uintmax_t *block_size,int *options)\u000a\u000a{\u000a  char cVar1;\u000a  strtol_error sVar2;\u000a  char *in_RAX;\u000a  ptrdiff_t pVar3;\u000a  uintmax_t uVar4;\u000a  uint uVar5;\u000a  char *arg;\u000a  uint uVar6;\u000a  char *local_28;\u000a  \u000a  local_28 = in_RAX;\u000a  if (((spec == (char *)0x0) &&\u000a      (local_28 = in_RAX, spec = getenv("BLOCK_SIZE"), spec == (char *)0x0)) &&\u000a     (spec = getenv("BLOCKSIZE"), spec == (char *)0x0)) {\u000a    uVar6 = 0;\u000a    uVar4 = default_block_size();\u000a  }\u000a  else {\u000a    arg = spec + 1;\u000a    if (*spec != '\u005c'') {\u000a      arg = spec;\u000a    }\u000a    uVar6 = (uint)(*spec == '\u005c'') << 2;\u000a    pVar3 = argmatch(arg,block_size_args,(char *)block_size_opts,4);\u000a    if ((int)pVar3 < 0) {\u000a      sVar2 = xstrtoumax(arg,&local_28,(uintmax_t *)0x0,(char *)block_size);\u000a      if (sVar2 != LONGINT_OK) {\u000a        *options = 0;\u000a        return sVar2;\u000a      }\u000a      cVar1 = *arg;\u000a      while (9 < (byte)(cVar1 - 0x30U)) {\u000a        if (local_28 == arg) {\u000a          uVar5 = uVar6 | 0x80;\u000a          uVar6 = uVar6 | 0x180;\u000a          if ((local_28[-1] != 'B') || (uVar5 = uVar6, local_28[-2] == 'i')) {\u000a            uVar6 = uVar5 | 0x20;\u000a          }\u000a          break;\u000a        }\u000a        cVar1 = arg[1];\u000a        arg = arg + 1;\u000a      }\u000a      goto LAB_00411b6a;\u000a    }\u000a    uVar6 = uVar6 | block_size_opts[(long)(int)pVar3];\u000a    uVar4 = 1;\u000a  }\u000a  *block_size = uVar4;\u000aLAB_00411b6a:\u000a  *options = uVar6;\u000a  return LONGINT_OK;\u000a}\u000a\u000a
p5470
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R15,RSI\nTEST RDI,RDI\nJNZ 0x00411b2a\nMOV EDI,0x41e883\nCALL 0x00402700\nMOV RDI,RAX\nTEST RDI,RDI\nJNZ 0x00411b2a\nMOV EDI,0x4228ec\nCALL 0x00402700\nMOV RDI,RAX\nTEST RDI,RDI\nJZ 0x00411bc6\nXOR EBP,EBP\nCMP byte ptr [RDI],0x27\nLEA RBX,[RDI + 0x1]\nSETZ BPL\nCMOVNZ RBX,RDI\nSHL EBP,0x2\nMOV ESI,0x422930\nMOV EDX,0x422948\nMOV ECX,0x4\nMOV RDI,RBX\nCALL 0x0041b520\nTEST EAX,EAX\nJS 0x00411b71\nCDQE\nOR EBP,dword ptr [0x422948 + RAX*0x4]\nMOV EAX,0x1\nMOV qword ptr [R15],RAX\nMOV dword ptr [R14],EBP\nXOR EAX,EAX\nJMP 0x00411b92\nMOV RSI,RSP\nXOR EDX,EDX\nMOV R8D,0x4228f6\nMOV RDI,RBX\nMOV RCX,R15\nCALL 0x00417780\nTEST EAX,EAX\nJZ 0x00411b9d\nMOV dword ptr [R14],0x0\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV AL,byte ptr [RBX]\nADD AL,0xd0\nCMP AL,0xa\nJC 0x00411b6a\nMOV RAX,qword ptr [RSP]\nNOP dword ptr [RAX]\nCMP RAX,RBX\nJZ 0x00411bcf\nMOVZX ECX,byte ptr [RBX + 0x1]\nINC RBX\nADD CL,0xd0\nCMP CL,0xa\nJNC 0x00411bb0\nJMP 0x00411b6a\nXOR EBP,EBP\nCALL 0x00411c00\nJMP 0x00411b67\nMOV ECX,EBP\nOR ECX,0x80\nOR EBP,0x180\nCMP byte ptr [RAX + -0x1],0x42\nCMOVZ ECX,EBP\nJNZ 0x00411bf0\nCMP byte ptr [RAX + -0x2],0x69\nJNZ 0x00411b6a\nOR ECX,0x20\nMOV EBP,ECX\nJMP 0x00411b6a\n'
p5471
S'55\n41 57\n41 56\n53\n50\n49 89 d6\n49 89 f7\n48 85 ff\n75 28\nbf 83 e8 41 00\ne8 f4 0b ff ff\n48 89 c7\n48 85 ff\n75 16\nbf ec 28 42 00\ne8 e2 0b ff ff\n48 89 c7\n48 85 ff\n0f 84 9c 00 00 00\n31 ed\n80 3f 27\n48 8d 5f 01\n40 0f 94 c5\n48 0f 45 df\nc1 e5 02\nbe 30 29 42 00\nba 48 29 42 00\nb9 04 00 00 00\n48 89 df\ne8 cb 99 00 00\n85 c0\n78 18\n48 98\n0b 2c 85 48 29 42 00\nb8 01 00 00 00\n49 89 07\n41 89 2e\n31 c0\neb 21\n48 89 e6\n31 d2\n41 b8 f6 28 42 00\n48 89 df\n4c 89 f9\ne8 f9 5b 00 00\n85 c0\n74 12\n41 c7 06 00 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n8a 03\n04 d0\n3c 0a\n72 c5\n48 8b 04 24\n0f 1f 80 00 00 00 00\n48 39 d8\n74 1a\n0f b6 4b 01\n48 ff c3\n80 c1 d0\n80 f9 0a\n73 ec\neb a4\n31 ed\ne8 33 00 00 00\neb 98\n89 e9\n81 c9 80 00 00 00\n81 cd 80 01 00 00\n80 78 ff 42\n0f 44 cd\n75 0a\n80 78 fe 69\n0f 85 7a ff ff ff\n83 c9 20\n89 cd\ne9 70 ff ff ff\n'
p5472
S'.text:0000000000411af0\n.text:0000000000411af1\n.text:0000000000411af3\n.text:0000000000411af5\n.text:0000000000411af6\n.text:0000000000411af7\n.text:0000000000411afa\n.text:0000000000411afd\n.text:0000000000411b00\n.text:0000000000411b02\n.text:0000000000411b07\n.text:0000000000411b0c\n.text:0000000000411b0f\n.text:0000000000411b12\n.text:0000000000411b14\n.text:0000000000411b19\n.text:0000000000411b1e\n.text:0000000000411b21\n.text:0000000000411b24\n.text:0000000000411b2a\n.text:0000000000411b2c\n.text:0000000000411b2f\n.text:0000000000411b33\n.text:0000000000411b37\n.text:0000000000411b3b\n.text:0000000000411b3e\n.text:0000000000411b43\n.text:0000000000411b48\n.text:0000000000411b4d\n.text:0000000000411b50\n.text:0000000000411b55\n.text:0000000000411b57\n.text:0000000000411b59\n.text:0000000000411b5b\n.text:0000000000411b62\n.text:0000000000411b67\n.text:0000000000411b6a\n.text:0000000000411b6d\n.text:0000000000411b6f\n.text:0000000000411b71\n.text:0000000000411b74\n.text:0000000000411b76\n.text:0000000000411b7c\n.text:0000000000411b7f\n.text:0000000000411b82\n.text:0000000000411b87\n.text:0000000000411b89\n.text:0000000000411b8b\n.text:0000000000411b92\n.text:0000000000411b96\n.text:0000000000411b97\n.text:0000000000411b99\n.text:0000000000411b9b\n.text:0000000000411b9c\n.text:0000000000411b9d\n.text:0000000000411b9f\n.text:0000000000411ba1\n.text:0000000000411ba3\n.text:0000000000411ba5\n.text:0000000000411ba9\n.text:0000000000411bb0\n.text:0000000000411bb3\n.text:0000000000411bb5\n.text:0000000000411bb9\n.text:0000000000411bbc\n.text:0000000000411bbf\n.text:0000000000411bc2\n.text:0000000000411bc4\n.text:0000000000411bc6\n.text:0000000000411bc8\n.text:0000000000411bcd\n.text:0000000000411bcf\n.text:0000000000411bd1\n.text:0000000000411bd7\n.text:0000000000411bdd\n.text:0000000000411be1\n.text:0000000000411be4\n.text:0000000000411be6\n.text:0000000000411bea\n.text:0000000000411bf0\n.text:0000000000411bf3\n.text:0000000000411bf5\n'
p5473
tp5474
sS'atexit'
p5475
(S'\n__stdcall atexit(__func * __func)\n'
p5476
V\u000a/* WARNING: Removing unreachable block (ram,0x0041c480) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_0062d3e8)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p5477
S'MOV RAX,0x62d478\nTEST RAX,RAX\nJZ 0x0041c480\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00402e90\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00402e90\n'
p5478
S'48 c7 c0 78 d4 62 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 1a 6a fe ff\n31 d2\n31 f6\ne9 07 6a fe ff\n'
p5479
S'.text:000000000041c460\n.text:000000000041c467\n.text:000000000041c46a\n.text:000000000041c46c\n.text:000000000041c46f\n.text:000000000041c471\n.text:000000000041c480\n.text:000000000041c482\n.text:000000000041c484\n'
p5480
tp5481
sS'fdopen'
p5482
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p5483
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_0062d340)();\u000a  return pFVar1;\u000a}\u000a\u000a
p5484
S'JMP qword ptr [0x0062d340]\n'
p5485
S'ff 25 fa a5 22 00\n'
p5486
S'.plt:0000000000402d40\n'
p5487
tp5488
sS'hash_find_entry'
p5489
(S'\n__stdcall hash_find_entry(Hash_table * table, void * entry, hash_entry * * bucket_head)\n'
p5490
V\u000avoid * hash_find_entry(Hash_table *table,void *entry,hash_entry **bucket_head)\u000a\u000a{\u000a  undefined4 uVar1;\u000a  undefined4 uVar2;\u000a  undefined4 uVar3;\u000a  _Bool _Var4;\u000a  hash_entry *phVar5;\u000a  hash_entry *entry_00;\u000a  char in_CL;\u000a  hash_entry **pphVar6;\u000a  void *pvVar7;\u000a  \u000a  phVar5 = safe_hasher(table,entry);\u000a  *bucket_head = phVar5;\u000a  pvVar7 = phVar5->data;\u000a  if (pvVar7 == (void *)0x0) {\u000a    return (void *)0x0;\u000a  }\u000a  if ((pvVar7 == entry) || (_Var4 = (*table->comparator)(entry,pvVar7), _Var4 != false)) {\u000a    pvVar7 = phVar5->data;\u000a    if (in_CL == 0) {\u000a      return pvVar7;\u000a    }\u000a    entry_00 = phVar5->next;\u000a    if (entry_00 == (hash_entry *)0x0) {\u000a      phVar5->data = (void *)0x0;\u000a      return pvVar7;\u000a    }\u000a    uVar1 = *(undefined4 *)((long)&entry_00->data + 4);\u000a    uVar2 = *(undefined4 *)&entry_00->next;\u000a    uVar3 = *(undefined4 *)((long)&entry_00->next + 4);\u000a    *(undefined4 *)&phVar5->data = *(undefined4 *)&entry_00->data;\u000a    *(undefined4 *)((long)&phVar5->data + 4) = uVar1;\u000a    *(undefined4 *)&phVar5->next = uVar2;\u000a    *(undefined4 *)((long)&phVar5->next + 4) = uVar3;\u000a  }\u000a  else {\u000a    entry_00 = phVar5->next;\u000a    if (entry_00 == (hash_entry *)0x0) {\u000a      return (void *)0x0;\u000a    }\u000a    while( true ) {\u000a      pphVar6 = &phVar5->next;\u000a      if ((entry_00->data == entry) ||\u000a         (_Var4 = (*table->comparator)(entry,entry_00->data), _Var4 != false)) break;\u000a      phVar5 = *pphVar6;\u000a      entry_00 = phVar5->next;\u000a      if (entry_00 == (hash_entry *)0x0) {\u000a        return (void *)0x0;\u000a      }\u000a    }\u000a    entry_00 = *pphVar6;\u000a    pvVar7 = entry_00->data;\u000a    if (in_CL == 0) {\u000a      return pvVar7;\u000a    }\u000a    *pphVar6 = entry_00->next;\u000a  }\u000a  free_entry(table,entry_00);\u000a  return pvVar7;\u000a}\u000a\u000a
p5491
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R12D,ECX\nMOV R14,RDX\nMOV RBP,RSI\nMOV R15,RDI\nCALL 0x004105e0\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RSI,qword ptr [RBX]\nTEST RSI,RSI\nJZ 0x00411055\nCMP RSI,RBP\nJZ 0x00411007\nMOV RDI,RBP\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJZ 0x00411020\nMOV R14,qword ptr [RBX]\nTEST R12B,R12B\nJZ 0x0041107d\nMOV RSI,qword ptr [RBX + 0x8]\nTEST RSI,RSI\nJZ 0x0041105a\nMOVUPS XMM0,xmmword ptr [RSI]\nMOVUPS xmmword ptr [RBX],XMM0\nJMP 0x00411075\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nJZ 0x00411055\nADD RBX,0x8\nXOR R14D,R14D\nMOV RSI,qword ptr [RAX]\nCMP RSI,RBP\nJZ 0x00411063\nMOV RDI,RBP\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJNZ 0x00411063\nMOV RBX,qword ptr [RBX]\nMOV RAX,qword ptr [RBX + 0x8]\nADD RBX,0x8\nTEST RAX,RAX\nJNZ 0x00411030\nJMP 0x0041107d\nXOR R14D,R14D\nJMP 0x0041107d\nMOV qword ptr [RBX],0x0\nJMP 0x0041107d\nMOV RSI,qword ptr [RBX]\nMOV R14,qword ptr [RSI]\nTEST R12B,R12B\nJZ 0x0041107d\nMOV RAX,qword ptr [RSI + 0x8]\nMOV qword ptr [RBX],RAX\nMOV RDI,R15\nCALL 0x00411350\nMOV RAX,R14\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p5492
S'55\n41 57\n41 56\n41 54\n53\n41 89 cc\n49 89 d6\n48 89 f5\n49 89 ff\ne8 f7 f5 ff ff\n48 89 c3\n49 89 1e\n48 8b 33\n48 85 f6\n74 5e\n48 39 ee\n74 0b\n48 89 ef\n41 ff 57 38\n84 c0\n74 19\n4c 8b 33\n45 84 e4\n74 6e\n48 8b 73 08\n48 85 f6\n74 42\n0f 10 06\n0f 11 03\neb 55\n48 8b 43 08\n48 85 c0\n74 2c\n48 83 c3 08\n45 31 f6\n48 8b 30\n48 39 ee\n74 2b\n48 89 ef\n41 ff 57 38\n84 c0\n75 20\n48 8b 1b\n48 8b 43 08\n48 83 c3 08\n48 85 c0\n75 dd\neb 28\n45 31 f6\neb 23\n48 c7 03 00 00 00 00\neb 1a\n48 8b 33\n4c 8b 36\n45 84 e4\n74 0f\n48 8b 46 08\n48 89 03\n4c 89 ff\ne8 d3 02 00 00\n4c 89 f0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p5493
S'.text:0000000000410fd0\n.text:0000000000410fd1\n.text:0000000000410fd3\n.text:0000000000410fd5\n.text:0000000000410fd7\n.text:0000000000410fd8\n.text:0000000000410fdb\n.text:0000000000410fde\n.text:0000000000410fe1\n.text:0000000000410fe4\n.text:0000000000410fe9\n.text:0000000000410fec\n.text:0000000000410fef\n.text:0000000000410ff2\n.text:0000000000410ff5\n.text:0000000000410ff7\n.text:0000000000410ffa\n.text:0000000000410ffc\n.text:0000000000410fff\n.text:0000000000411003\n.text:0000000000411005\n.text:0000000000411007\n.text:000000000041100a\n.text:000000000041100d\n.text:000000000041100f\n.text:0000000000411013\n.text:0000000000411016\n.text:0000000000411018\n.text:000000000041101b\n.text:000000000041101e\n.text:0000000000411020\n.text:0000000000411024\n.text:0000000000411027\n.text:0000000000411029\n.text:000000000041102d\n.text:0000000000411030\n.text:0000000000411033\n.text:0000000000411036\n.text:0000000000411038\n.text:000000000041103b\n.text:000000000041103f\n.text:0000000000411041\n.text:0000000000411043\n.text:0000000000411046\n.text:000000000041104a\n.text:000000000041104e\n.text:0000000000411051\n.text:0000000000411053\n.text:0000000000411055\n.text:0000000000411058\n.text:000000000041105a\n.text:0000000000411061\n.text:0000000000411063\n.text:0000000000411066\n.text:0000000000411069\n.text:000000000041106c\n.text:000000000041106e\n.text:0000000000411072\n.text:0000000000411075\n.text:0000000000411078\n.text:000000000041107d\n.text:0000000000411080\n.text:0000000000411081\n.text:0000000000411083\n.text:0000000000411085\n.text:0000000000411087\n.text:0000000000411088\n'
p5494
tp5495
sS'error'
p5496
(S'\n__stdcall error()\n'
p5497
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_0062d368)();\u000a  return;\u000a}\u000a\u000a
p5498
S'JMP qword ptr [0x0062d368]\n'
p5499
S'ff 25 d2 a5 22 00\n'
p5500
S'.plt:0000000000402d90\n'
p5501
tp5502
sS'pred_true'
p5503
(S'\n__stdcall pred_true(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p5504
V\u000a_Bool pred_true(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  return true;\u000a}\u000a\u000a
p5505
S'MOV AL,0x1\nRET\n'
p5506
S'b0 01\nc3\n'
p5507
S'.text:0000000000404780\n.text:0000000000404782\n'
p5508
tp5509
sS'raw_comparator'
p5510
(S'\n__stdcall raw_comparator(void * a, void * b)\n'
p5511
V\u000a_Bool raw_comparator(void *a,void *b)\u000a\u000a{\u000a  return (_Bool)(a == b);\u000a}\u000a\u000a
p5512
S'CMP RDI,RSI\nSETZ AL\nRET\n'
p5513
S'48 39 f7\n0f 94 c0\nc3\n'
p5514
S'.text:00000000004108f0\n.text:00000000004108f3\n.text:00000000004108f6\n'
p5515
tp5516
sS'strcaseeq6'
p5517
(S'\n__stdcall strcaseeq6()\n'
p5518
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p5519
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x0041ba40\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00416932\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00416939\nJMP 0x0041694e\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0041694e\nTEST BPL,BPL\nJZ 0x00416949\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00416960\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p5520
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 21 51 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p5521
S'.text:0000000000416910\n.text:0000000000416911\n.text:0000000000416912\n.text:0000000000416913\n.text:0000000000416915\n.text:0000000000416918\n.text:000000000041691a\n.text:000000000041691f\n.text:0000000000416923\n.text:0000000000416925\n.text:0000000000416927\n.text:000000000041692a\n.text:000000000041692c\n.text:000000000041692e\n.text:0000000000416930\n.text:0000000000416932\n.text:0000000000416934\n.text:0000000000416937\n.text:0000000000416939\n.text:000000000041693c\n.text:000000000041693e\n.text:0000000000416941\n.text:0000000000416945\n.text:0000000000416946\n.text:0000000000416947\n.text:0000000000416949\n.text:000000000041694e\n.text:0000000000416952\n.text:0000000000416953\n.text:0000000000416954\n'
p5522
tp5523
sS'strcaseeq5'
p5524
(S'\n__stdcall strcaseeq5()\n'
p5525
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p5526
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x0041ba40\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x004168e6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004168ed\nJMP 0x00416904\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00416904\nTEST BPL,BPL\nJZ 0x004168ff\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00416910\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p5527
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 6d 51 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p5528
S'.text:00000000004168c0\n.text:00000000004168c1\n.text:00000000004168c3\n.text:00000000004168c4\n.text:00000000004168c7\n.text:00000000004168c9\n.text:00000000004168cc\n.text:00000000004168ce\n.text:00000000004168d3\n.text:00000000004168d7\n.text:00000000004168d9\n.text:00000000004168db\n.text:00000000004168de\n.text:00000000004168e0\n.text:00000000004168e2\n.text:00000000004168e4\n.text:00000000004168e6\n.text:00000000004168e8\n.text:00000000004168eb\n.text:00000000004168ed\n.text:00000000004168f0\n.text:00000000004168f2\n.text:00000000004168f6\n.text:00000000004168f9\n.text:00000000004168fa\n.text:00000000004168fc\n.text:00000000004168fd\n.text:00000000004168ff\n.text:0000000000416904\n.text:0000000000416905\n.text:0000000000416907\n.text:0000000000416908\n'
p5529
tp5530
sS'pred_print'
p5531
(S'\n__stdcall pred_print(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p5532
V\u000a_Bool pred_print(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  print_quoted(*(FILE **)(pred_ptr->args + 8),*(quoting_options **)(pred_ptr->args + 0x20),\u000a               (char *)(ulong)pred_ptr->args[0x18],"%s\u005cn");\u000a  return true;\u000a}\u000a\u000a
p5533
S'PUSH RAX\nMOV RAX,RDI\nMOV RDI,qword ptr [RDX + 0x40]\nMOV RSI,qword ptr [RDX + 0x58]\nMOVZX EDX,byte ptr [RDX + 0x50]\nMOV ECX,0x424ac0\nMOV R8,RAX\nCALL 0x0040f5b0\nMOV AL,0x1\nPOP RCX\nRET\n'
p5534
S'50\n48 89 f8\n48 8b 7a 40\n48 8b 72 58\n0f b6 52 50\nb9 c0 4a 42 00\n49 89 c0\ne8 d3 af 00 00\nb0 01\n59\nc3\n'
p5535
S'.text:00000000004045c0\n.text:00000000004045c1\n.text:00000000004045c4\n.text:00000000004045c8\n.text:00000000004045cc\n.text:00000000004045d0\n.text:00000000004045d5\n.text:00000000004045d8\n.text:00000000004045dd\n.text:00000000004045df\n.text:00000000004045e0\n'
p5536
tp5537
sS'strcaseeq7'
p5538
(S'\n__stdcall strcaseeq7()\n'
p5539
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p5540
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x0041ba40\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00416982\nTEST ECX,0xffffffdf\nJNZ 0x00416986\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x0041698a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p5541
S'53\n48 89 fb\n31 ff\ne8 d5 50 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p5542
S'.text:0000000000416960\n.text:0000000000416961\n.text:0000000000416964\n.text:0000000000416966\n.text:000000000041696b\n.text:000000000041696f\n.text:0000000000416971\n.text:0000000000416973\n.text:0000000000416979\n.text:000000000041697b\n.text:0000000000416980\n.text:0000000000416981\n.text:0000000000416982\n.text:0000000000416984\n.text:0000000000416986\n.text:0000000000416988\n.text:0000000000416989\n.text:000000000041698a\n.text:000000000041698f\n.text:0000000000416990\n'
p5543
tp5544
sS'link_count_optimize_ok'
p5545
(S'\n__stdcall link_count_optimize_ok(FTSENT * p)\n'
p5546
V\u000a_Bool link_count_optimize_ok(FTSENT *p)\u000a\u000a{\u000a  FTS *pFVar1;\u000a  _Bool _Var2;\u000a  void *pvVar3;\u000a  __dev_t *entry;\u000a  __dev_t *p_Var4;\u000a  hash_table *table;\u000a  __dev_t local_38 [2];\u000a  \u000a  pFVar1 = p->fts_fts;\u000a  if ((*(byte *)((long)&pFVar1->fts_options + 1) & 2) == 0) {\u000a    _Var2 = false;\u000a  }\u000a  else {\u000a    table = pFVar1->fts_leaf_optimization_works_ht;\u000a    if (table == (hash_table *)0x0) {\u000a      table = (hash_table *)hash_initialize(0xd,(Hash_tuning *)0x0,LCO_hash,LCO_compare,free);\u000a      pFVar1->fts_leaf_optimization_works_ht = table;\u000a      if (table == (hash_table *)0x0) {\u000a        return false;\u000a      }\u000a    }\u000a    local_38[0] = p->fts_statp[0].st_dev;\u000a    pvVar3 = hash_lookup((Hash_table *)table,local_38);\u000a    if (pvVar3 == (void *)0x0) {\u000a      entry = (__dev_t *)malloc(0x10);\u000a      if (entry == (__dev_t *)0x0) {\u000a        _Var2 = false;\u000a      }\u000a      else {\u000a        _Var2 = leaf_optimization_applies();\u000a        *(_Bool *)(entry + 1) = _Var2;\u000a        *entry = p->fts_statp[0].st_dev;\u000a        p_Var4 = (__dev_t *)hash_insert((Hash_table *)table,entry);\u000a        if (p_Var4 == (__dev_t *)0x0) {\u000a          free(entry);\u000a          _Var2 = false;\u000a        }\u000a        else {\u000a          if (p_Var4 != entry) {\u000a                    /* WARNING: Subroutine does not return */\u000a            abort();\u000a          }\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      _Var2 = (_Bool)(*(char *)((long)pvVar3 + 8) != 0);\u000a    }\u000a  }\u000a  return _Var2;\u000a}\u000a\u000a
p5547
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV R14,RDI\nMOV RBX,qword ptr [R14 + 0x50]\nTEST byte ptr [RBX + 0x49],0x2\nJNZ 0x00419a2f\nXOR R15D,R15D\nJMP 0x00419a83\nMOV R13,qword ptr [RBX + 0x50]\nTEST R13,R13\nJNZ 0x00419a63\nXOR R15D,R15D\nMOV EDI,0xd\nXOR ESI,ESI\nMOV EDX,0x419d70\nMOV ECX,0x419d80\nMOV R8D,0x402710\nCALL 0x004107f0\nMOV R13,RAX\nMOV qword ptr [RBX + 0x50],R13\nTEST R13,R13\nJZ 0x00419a83\nMOV RAX,qword ptr [R14 + 0x78]\nMOV qword ptr [RSP],RAX\nMOV RSI,RSP\nMOV RDI,R13\nCALL 0x00410580\nTEST RAX,RAX\nJZ 0x00419a94\nCMP byte ptr [RAX + 0x8],0x0\nSETNZ R15B\nMOV EAX,R15D\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\nMOV EDI,0x10\nCALL 0x00402c60\nMOV R12,RAX\nTEST R12,R12\nJZ 0x00419ad8\nMOV EDI,dword ptr [RBX + 0x2c]\nCALL 0x00419d90\nMOV R15B,AL\nMOV byte ptr [R12 + 0x8],R15B\nMOV RAX,qword ptr [R14 + 0x78]\nMOV qword ptr [R12],RAX\nMOV RDI,R13\nMOV RSI,R12\nCALL 0x004110c0\nTEST RAX,RAX\nJZ 0x00419add\nCMP RAX,R12\nJZ 0x00419a83\nCALL 0x00402750\nXOR R15D,R15D\nJMP 0x00419a83\nMOV RDI,R12\nCALL 0x00402710\nXOR R15D,R15D\nJMP 0x00419a83\n'
p5548
S'41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 10\n49 89 fe\n49 8b 5e 50\nf6 43 49 02\n75 05\n45 31 ff\neb 54\n4c 8b 6b 50\n4d 85 ed\n75 2b\n45 31 ff\nbf 0d 00 00 00\n31 f6\nba 70 9d 41 00\nb9 80 9d 41 00\n41 b8 10 27 40 00\ne8 99 6d ff ff\n49 89 c5\n4c 89 6b 50\n4d 85 ed\n74 20\n49 8b 46 78\n48 89 04 24\n48 89 e6\n4c 89 ef\ne8 0a 6b ff ff\n48 85 c0\n74 19\n80 78 08 00\n41 0f 95 c7\n44 89 f8\n48 83 c4 10\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\nbf 10 00 00 00\ne8 c2 91 fe ff\n49 89 c4\n4d 85 e4\n74 32\n8b 7b 2c\ne8 e2 02 00 00\n41 88 c7\n45 88 7c 24 08\n49 8b 46 78\n49 89 04 24\n4c 89 ef\n4c 89 e6\ne8 f7 75 ff ff\n48 85 c0\n74 0f\n4c 39 e0\n74 b0\ne8 78 8c fe ff\n45 31 ff\neb a6\n4c 89 e7\ne8 2b 8c fe ff\n45 31 ff\neb 99\n'
p5549
S'.text:0000000000419a10\n.text:0000000000419a12\n.text:0000000000419a14\n.text:0000000000419a16\n.text:0000000000419a18\n.text:0000000000419a19\n.text:0000000000419a1d\n.text:0000000000419a20\n.text:0000000000419a24\n.text:0000000000419a28\n.text:0000000000419a2a\n.text:0000000000419a2d\n.text:0000000000419a2f\n.text:0000000000419a33\n.text:0000000000419a36\n.text:0000000000419a38\n.text:0000000000419a3b\n.text:0000000000419a40\n.text:0000000000419a42\n.text:0000000000419a47\n.text:0000000000419a4c\n.text:0000000000419a52\n.text:0000000000419a57\n.text:0000000000419a5a\n.text:0000000000419a5e\n.text:0000000000419a61\n.text:0000000000419a63\n.text:0000000000419a67\n.text:0000000000419a6b\n.text:0000000000419a6e\n.text:0000000000419a71\n.text:0000000000419a76\n.text:0000000000419a79\n.text:0000000000419a7b\n.text:0000000000419a7f\n.text:0000000000419a83\n.text:0000000000419a86\n.text:0000000000419a8a\n.text:0000000000419a8b\n.text:0000000000419a8d\n.text:0000000000419a8f\n.text:0000000000419a91\n.text:0000000000419a93\n.text:0000000000419a94\n.text:0000000000419a99\n.text:0000000000419a9e\n.text:0000000000419aa1\n.text:0000000000419aa4\n.text:0000000000419aa6\n.text:0000000000419aa9\n.text:0000000000419aae\n.text:0000000000419ab1\n.text:0000000000419ab6\n.text:0000000000419aba\n.text:0000000000419abe\n.text:0000000000419ac1\n.text:0000000000419ac4\n.text:0000000000419ac9\n.text:0000000000419acc\n.text:0000000000419ace\n.text:0000000000419ad1\n.text:0000000000419ad3\n.text:0000000000419ad8\n.text:0000000000419adb\n.text:0000000000419add\n.text:0000000000419ae0\n.text:0000000000419ae5\n.text:0000000000419ae8\n'
p5550
tp5551
sS'strtoul'
p5552
(S'\n__stdcall strtoul(char * __nptr, char * * __endptr, int __base)\n'
p5553
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aulong strtoul(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  ulong uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoul_0062d3d0)();\u000a  return uVar1;\u000a}\u000a\u000a
p5554
S'JMP qword ptr [0x0062d3d0]\n'
p5555
S'ff 25 6a a5 22 00\n'
p5556
S'.plt:0000000000402e60\n'
p5557
tp5558
sS'strcaseeq0'
p5559
(S'\n__stdcall strcaseeq0()\n'
p5560
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p5561
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x0041ba40\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00416695\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0041669c\nJMP 0x004166d0\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004166d0\nTEST BPL,BPL\nJZ 0x004166cb\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x004166e0\nJMP 0x004166d0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p5562
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 bd 53 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p5563
S'.text:0000000000416660\n.text:0000000000416661\n.text:0000000000416663\n.text:0000000000416665\n.text:0000000000416667\n.text:0000000000416669\n.text:000000000041666a\n.text:000000000041666b\n.text:000000000041666e\n.text:0000000000416671\n.text:0000000000416674\n.text:0000000000416677\n.text:0000000000416679\n.text:000000000041667c\n.text:000000000041667e\n.text:0000000000416683\n.text:0000000000416686\n.text:0000000000416688\n.text:000000000041668a\n.text:000000000041668d\n.text:000000000041668f\n.text:0000000000416691\n.text:0000000000416693\n.text:0000000000416695\n.text:0000000000416697\n.text:000000000041669a\n.text:000000000041669c\n.text:000000000041669f\n.text:00000000004166a1\n.text:00000000004166a5\n.text:00000000004166aa\n.text:00000000004166ad\n.text:00000000004166b1\n.text:00000000004166b5\n.text:00000000004166b9\n.text:00000000004166bd\n.text:00000000004166c1\n.text:00000000004166c4\n.text:00000000004166c9\n.text:00000000004166cb\n.text:00000000004166d0\n.text:00000000004166d4\n.text:00000000004166d5\n.text:00000000004166d7\n.text:00000000004166d9\n.text:00000000004166db\n.text:00000000004166dd\n.text:00000000004166de\n'
p5564
tp5565
sS'pred_nouser'
p5566
(S'\n__stdcall pred_nouser(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p5567
V\u000a_Bool pred_nouser(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  passwd *ppVar1;\u000a  \u000a  ppVar1 = getpwuid(stat_buf->st_uid);\u000a  return (_Bool)(ppVar1 == (passwd *)0x0);\u000a}\u000a\u000a
p5568
S'PUSH RAX\nMOV EDI,dword ptr [RSI + 0x1c]\nCALL 0x004028e0\nTEST RAX,RAX\nSETZ AL\nPOP RCX\nRET\n'
p5569
S'50\n8b 7e 1c\ne8 97 e4 ff ff\n48 85 c0\n0f 94 c0\n59\nc3\n'
p5570
S'.text:0000000000404440\n.text:0000000000404441\n.text:0000000000404444\n.text:0000000000404449\n.text:000000000040444c\n.text:000000000040444f\n.text:0000000000404450\n'
p5571
tp5572
sS'getline'
p5573
(S'\n__stdcall getline(char * * __lineptr, size_t * __n, FILE * __stream)\n'
p5574
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__ssize_t getline(char **__lineptr,size_t *__n,FILE *__stream)\u000a\u000a{\u000a  __ssize_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_getline_0062d3f0)();\u000a  return _Var1;\u000a}\u000a\u000a
p5575
S'JMP qword ptr [0x0062d3f0]\n'
p5576
S'ff 25 4a a5 22 00\n'
p5577
S'.plt:0000000000402ea0\n'
p5578
tp5579
sS'strcaseeq2'
p5580
(S'\n__stdcall strcaseeq2()\n'
p5581
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p5582
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x0041ba40\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x004167a6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004167ad\nJMP 0x004167da\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004167da\nTEST BPL,BPL\nJZ 0x004167d5\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004167f0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p5583
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 ad 52 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p5584
S'.text:0000000000416770\n.text:0000000000416771\n.text:0000000000416773\n.text:0000000000416775\n.text:0000000000416777\n.text:0000000000416779\n.text:000000000041677a\n.text:000000000041677b\n.text:000000000041677e\n.text:0000000000416781\n.text:0000000000416784\n.text:0000000000416787\n.text:0000000000416789\n.text:000000000041678c\n.text:000000000041678e\n.text:0000000000416793\n.text:0000000000416797\n.text:0000000000416799\n.text:000000000041679b\n.text:000000000041679e\n.text:00000000004167a0\n.text:00000000004167a2\n.text:00000000004167a4\n.text:00000000004167a6\n.text:00000000004167a8\n.text:00000000004167ab\n.text:00000000004167ad\n.text:00000000004167b0\n.text:00000000004167b2\n.text:00000000004167b6\n.text:00000000004167ba\n.text:00000000004167be\n.text:00000000004167c2\n.text:00000000004167c5\n.text:00000000004167c9\n.text:00000000004167ca\n.text:00000000004167cc\n.text:00000000004167ce\n.text:00000000004167d0\n.text:00000000004167d2\n.text:00000000004167d3\n.text:00000000004167d5\n.text:00000000004167da\n.text:00000000004167de\n.text:00000000004167df\n.text:00000000004167e1\n.text:00000000004167e3\n.text:00000000004167e5\n.text:00000000004167e7\n.text:00000000004167e8\n'
p5585
tp5586
sS'strcaseeq1'
p5587
(S'\n__stdcall strcaseeq1()\n'
p5588
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p5589
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x0041ba40\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x0041671d\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00416724\nJMP 0x00416757\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00416757\nTEST BPL,BPL\nJZ 0x00416752\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00416770\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p5590
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 36 53 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p5591
S'.text:00000000004166e0\n.text:00000000004166e1\n.text:00000000004166e3\n.text:00000000004166e5\n.text:00000000004166e7\n.text:00000000004166e9\n.text:00000000004166ea\n.text:00000000004166eb\n.text:00000000004166f0\n.text:00000000004166f3\n.text:00000000004166f6\n.text:00000000004166f9\n.text:00000000004166fb\n.text:00000000004166fe\n.text:0000000000416703\n.text:0000000000416705\n.text:000000000041670a\n.text:000000000041670e\n.text:0000000000416710\n.text:0000000000416712\n.text:0000000000416715\n.text:0000000000416717\n.text:0000000000416719\n.text:000000000041671b\n.text:000000000041671d\n.text:000000000041671f\n.text:0000000000416722\n.text:0000000000416724\n.text:0000000000416727\n.text:0000000000416729\n.text:000000000041672d\n.text:0000000000416731\n.text:0000000000416735\n.text:000000000041673b\n.text:000000000041673f\n.text:0000000000416742\n.text:0000000000416746\n.text:0000000000416747\n.text:0000000000416749\n.text:000000000041674b\n.text:000000000041674d\n.text:000000000041674f\n.text:0000000000416750\n.text:0000000000416752\n.text:0000000000416757\n.text:000000000041675b\n.text:000000000041675c\n.text:000000000041675e\n.text:0000000000416760\n.text:0000000000416762\n.text:0000000000416764\n.text:0000000000416765\n'
p5592
tp5593
sS'strcaseeq4'
p5594
(S'\n__stdcall strcaseeq4()\n'
p5595
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p5596
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x0041ba40\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x0041688c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00416893\nJMP 0x004168b4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004168b4\nTEST BPL,BPL\nJZ 0x004168af\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004168c0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p5597
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 c7 51 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p5598
S'.text:0000000000416860\n.text:0000000000416861\n.text:0000000000416863\n.text:0000000000416865\n.text:0000000000416866\n.text:0000000000416867\n.text:000000000041686a\n.text:000000000041686d\n.text:000000000041686f\n.text:0000000000416872\n.text:0000000000416874\n.text:0000000000416879\n.text:000000000041687d\n.text:000000000041687f\n.text:0000000000416881\n.text:0000000000416884\n.text:0000000000416886\n.text:0000000000416888\n.text:000000000041688a\n.text:000000000041688c\n.text:000000000041688e\n.text:0000000000416891\n.text:0000000000416893\n.text:0000000000416896\n.text:0000000000416898\n.text:000000000041689c\n.text:00000000004168a0\n.text:00000000004168a3\n.text:00000000004168a7\n.text:00000000004168a8\n.text:00000000004168aa\n.text:00000000004168ac\n.text:00000000004168ad\n.text:00000000004168af\n.text:00000000004168b4\n.text:00000000004168b8\n.text:00000000004168b9\n.text:00000000004168bb\n.text:00000000004168bd\n.text:00000000004168be\n'
p5599
tp5600
sS'strcaseeq3'
p5601
(S'\n__stdcall strcaseeq3()\n'
p5602
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p5603
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x0041ba40\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00416820\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00416827\nJMP 0x0041684a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0041684a\nTEST BPL,BPL\nJZ 0x00416845\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00416860\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p5604
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 33 52 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p5605
S'.text:00000000004167f0\n.text:00000000004167f1\n.text:00000000004167f3\n.text:00000000004167f5\n.text:00000000004167f7\n.text:00000000004167f8\n.text:00000000004167fb\n.text:00000000004167fe\n.text:0000000000416801\n.text:0000000000416803\n.text:0000000000416806\n.text:0000000000416808\n.text:000000000041680d\n.text:0000000000416811\n.text:0000000000416813\n.text:0000000000416815\n.text:0000000000416818\n.text:000000000041681a\n.text:000000000041681c\n.text:000000000041681e\n.text:0000000000416820\n.text:0000000000416822\n.text:0000000000416825\n.text:0000000000416827\n.text:000000000041682a\n.text:000000000041682c\n.text:0000000000416830\n.text:0000000000416834\n.text:0000000000416838\n.text:000000000041683b\n.text:000000000041683c\n.text:000000000041683e\n.text:0000000000416840\n.text:0000000000416842\n.text:0000000000416843\n.text:0000000000416845\n.text:000000000041684a\n.text:000000000041684b\n.text:000000000041684d\n.text:000000000041684f\n.text:0000000000416851\n.text:0000000000416852\n'
p5606
tp5607
sS'last_component'
p5608
(S'\n__stdcall last_component(char * name)\n'
p5609
V\u000achar * last_component(char *name)\u000a\u000a{\u000a  bool bVar1;\u000a  bool bVar2;\u000a  char *pcVar3;\u000a  \u000a  name = name + -1;\u000a  do {\u000a    pcVar3 = name + 1;\u000a    name = name + 1;\u000a  } while (*pcVar3 == '/');\u000a  bVar2 = false;\u000a  pcVar3 = name;\u000a  do {\u000a    bVar1 = true;\u000a    if (*name != '/') {\u000a      if (*name == 0) {\u000a        return pcVar3;\u000a      }\u000a      bVar1 = bVar2;\u000a      if (bVar2) {\u000a        pcVar3 = name;\u000a        bVar1 = false;\u000a      }\u000a    }\u000a    bVar2 = bVar1;\u000a    name = name + 1;\u000a  } while( true );\u000a}\u000a\u000a
p5610
S'DEC RDI\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP byte ptr [RDI + 0x1],0x2f\nLEA RDI,[RDI + 0x1]\nJZ 0x004100a0\nXOR ESI,ESI\nMOV RAX,RDI\nJMP 0x004100c6\nINC RAX\nMOV SIL,DL\nMOVZX ECX,byte ptr [RAX]\nMOV DL,0x1\nCMP CL,0x2f\nJZ 0x004100c0\nTEST CL,CL\nJZ 0x004100e7\nMOV EDX,ESI\nAND DL,0x1\nJZ 0x004100dd\nXOR ESI,ESI\nTEST DL,DL\nCMOVNZ RDI,RAX\nMOV EDX,ESI\nJMP 0x004100c0\nMOV RAX,RDI\nRET\n'
p5611
S'48 ff cf\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n80 7f 01 2f\n48 8d 7f 01\n74 f6\n31 f6\n48 89 f8\neb 15\n48 ff c0\n40 88 d6\n0f b6 08\nb2 01\n80 f9 2f\n74 f0\n84 c9\n74 13\n89 f2\n80 e2 01\n74 02\n31 f6\n84 d2\n48 0f 45 f8\n89 f2\neb d9\n48 89 f8\nc3\n'
p5612
S'.text:0000000000410090\n.text:0000000000410093\n.text:00000000004100a0\n.text:00000000004100a4\n.text:00000000004100a8\n.text:00000000004100aa\n.text:00000000004100ac\n.text:00000000004100af\n.text:00000000004100c0\n.text:00000000004100c3\n.text:00000000004100c6\n.text:00000000004100c9\n.text:00000000004100cb\n.text:00000000004100ce\n.text:00000000004100d0\n.text:00000000004100d2\n.text:00000000004100d4\n.text:00000000004100d6\n.text:00000000004100d9\n.text:00000000004100db\n.text:00000000004100dd\n.text:00000000004100df\n.text:00000000004100e3\n.text:00000000004100e5\n.text:00000000004100e7\n.text:00000000004100ea\n'
p5613
tp5614
sS'register_tm_clones'
p5615
(S'\n__stdcall register_tm_clones()\n'
p5616
V\u000a/* WARNING: Removing unreachable block (ram,0x00403023) */\u000a/* WARNING: Removing unreachable block (ram,0x0040302d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p5617
S'MOV ESI,0x62de08\nPUSH RBP\nSUB RSI,0x62de08\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00403038\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00403038\nPOP RBP\nMOV EDI,0x62de08\nJMP RAX\nPOP RBP\nRET\n'
p5618
S'be 08 de 62 00\n55\n48 81 ee 08 de 62 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 08 de 62 00\nff e0\n5d\nc3\n'
p5619
S'.text:0000000000403000\n.text:0000000000403005\n.text:0000000000403006\n.text:000000000040300d\n.text:0000000000403011\n.text:0000000000403014\n.text:0000000000403017\n.text:000000000040301b\n.text:000000000040301e\n.text:0000000000403021\n.text:0000000000403023\n.text:0000000000403028\n.text:000000000040302b\n.text:000000000040302d\n.text:000000000040302e\n.text:0000000000403033\n.text:0000000000403038\n.text:0000000000403039\n'
p5620
tp5621
sS'getcon'
p5622
(S'\n__stdcall getcon(security_context_t * con)\n'
p5623
V\u000aint getcon(security_context_t *con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p5624
S'PUSH RAX\nCALL 0x00402770\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p5625
S'50\ne8 3a bd fe ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p5626
S'.text:0000000000416a30\n.text:0000000000416a31\n.text:0000000000416a36\n.text:0000000000416a3c\n.text:0000000000416a41\n.text:0000000000416a42\n'
p5627
tp5628
sS'fstatat'
p5629
(S'\n__stdcall fstatat(int __fd, char * __file, stat * __buf, int __flag)\n'
p5630
V\u000aint fstatat(int __fd,char *__file,stat *__buf,int __flag)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___fxstatat_0062d188)(1,(ulong)(uint)__fd,__file,__buf,(ulong)(uint)__flag);\u000a  return iVar1;\u000a}\u000a\u000a
p5631
S'MOV R8D,ECX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV ESI,EDI\nMOV EDI,0x1\nJMP 0x004029d0\n'
p5632
S'41 89 c8\n48 89 d1\n48 89 f2\n89 fe\nbf 01 00 00 00\ne9 fb 64 fe ff\n'
p5633
S'.text:000000000041c4c0\n.text:000000000041c4c3\n.text:000000000041c4c6\n.text:000000000041c4c9\n.text:000000000041c4cb\n.text:000000000041c4d0\n'
p5634
tp5635
sS'get_mounted_filesystems'
p5636
(S'\n__stdcall get_mounted_filesystems()\n'
p5637
V\u000achar * get_mounted_filesystems(void)\u000a\u000a{\u000a  size_t wanted;\u000a  int iVar1;\u000a  mount_entry *p;\u000a  size_t sVar2;\u000a  char *pcVar3;\u000a  size_t sVar4;\u000a  char *existing;\u000a  mount_entry *pmVar5;\u000a  size_t local_38;\u000a  \u000a  local_38 = 0;\u000a  existing = (char *)0x0;\u000a  p = must_read_fs_list();\u000a  if (p != (mount_entry *)0x0) {\u000a    existing = (char *)0x0;\u000a    sVar4 = 0;\u000a    pmVar5 = p;\u000a    do {\u000a      iVar1 = strcmp(pmVar5->me_type,"ignore");\u000a      if (iVar1 != 0) {\u000a        sVar2 = strlen(pmVar5->me_mountdir);\u000a        wanted = sVar4 + 1 + sVar2;\u000a        pcVar3 = (char *)extendbuf(existing,wanted,&local_38);\u000a        if (pcVar3 == (char *)0x0) break;\u000a        strcpy(pcVar3 + sVar4,pmVar5->me_mountdir);\u000a        existing = pcVar3;\u000a        sVar4 = wanted;\u000a      }\u000a      pmVar5 = pmVar5->me_next;\u000a    } while (pmVar5 != (mount_entry *)0x0);\u000a  }\u000a  free_file_system_list(p);\u000a  return existing;\u000a}\u000a\u000a
p5638
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV qword ptr [RSP + 0x10],0x0\nXOR R12D,R12D\nXOR EDI,EDI\nCALL 0x0040a470\nTEST RAX,RAX\nMOV qword ptr [RSP + 0x8],RAX\nJZ 0x0040a44f\nXOR R12D,R12D\nLEA R15,[RSP + 0x10]\nXOR EBX,EBX\nMOV R14,RAX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [R14 + 0x18]\nMOV ESI,0x41fb4b\nCALL 0x00402b40\nTEST EAX,EAX\nJZ 0x0040a440\nMOV RDI,qword ptr [R14 + 0x8]\nCALL 0x00402930\nLEA R13,[RBX + RAX*0x1 + 0x1]\nMOV RDI,R12\nMOV RSI,R13\nMOV RDX,R15\nCALL 0x0040e5f0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x0040a44f\nADD RBX,RBP\nMOV RSI,qword ptr [R14 + 0x8]\nMOV RDI,RBX\nCALL 0x004027c0\nMOV R12,RBP\nJMP 0x0040a443\nMOV R13,RBX\nMOV R14,qword ptr [R14 + 0x30]\nTEST R14,R14\nMOV RBX,R13\nJNZ 0x0040a3f0\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x0040a4b0\nMOV RAX,R12\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p5639
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n48 c7 44 24 10 00 00 00 00\n45 31 e4\n31 ff\ne8 9f 00 00 00\n48 85 c0\n48 89 44 24 08\n74 74\n45 31 e4\n4c 8d 7c 24 10\n31 db\n49 89 c6\n0f 1f 84 00 00 00 00 00\n49 8b 7e 18\nbe 4b fb 41 00\ne8 42 87 ff ff\n85 c0\n74 3e\n49 8b 7e 08\ne8 25 85 ff ff\n4c 8d 6c 03 01\n4c 89 e7\n4c 89 ee\n4c 89 fa\ne8 d2 41 00 00\n48 89 c5\n48 85 ed\n74 29\n48 01 eb\n49 8b 76 08\n48 89 df\ne8 8b 83 ff ff\n49 89 ec\neb 09\n49 89 dd\n4d 8b 76 30\n4d 85 f6\n4c 89 eb\n75 a1\n48 8b 7c 24 08\ne8 57 00 00 00\n4c 89 e0\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p5640
S'.text:000000000040a3b0\n.text:000000000040a3b1\n.text:000000000040a3b3\n.text:000000000040a3b5\n.text:000000000040a3b7\n.text:000000000040a3b9\n.text:000000000040a3ba\n.text:000000000040a3be\n.text:000000000040a3c7\n.text:000000000040a3ca\n.text:000000000040a3cc\n.text:000000000040a3d1\n.text:000000000040a3d4\n.text:000000000040a3d9\n.text:000000000040a3db\n.text:000000000040a3de\n.text:000000000040a3e3\n.text:000000000040a3e5\n.text:000000000040a3e8\n.text:000000000040a3f0\n.text:000000000040a3f4\n.text:000000000040a3f9\n.text:000000000040a3fe\n.text:000000000040a400\n.text:000000000040a402\n.text:000000000040a406\n.text:000000000040a40b\n.text:000000000040a410\n.text:000000000040a413\n.text:000000000040a416\n.text:000000000040a419\n.text:000000000040a41e\n.text:000000000040a421\n.text:000000000040a424\n.text:000000000040a426\n.text:000000000040a429\n.text:000000000040a42d\n.text:000000000040a430\n.text:000000000040a435\n.text:000000000040a438\n.text:000000000040a440\n.text:000000000040a443\n.text:000000000040a447\n.text:000000000040a44a\n.text:000000000040a44d\n.text:000000000040a44f\n.text:000000000040a454\n.text:000000000040a459\n.text:000000000040a45c\n.text:000000000040a460\n.text:000000000040a461\n.text:000000000040a463\n.text:000000000040a465\n.text:000000000040a467\n.text:000000000040a469\n.text:000000000040a46a\n'
p5641
tp5642
sS'match_lname'
p5643
(S'\n__stdcall match_lname(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p5644
V\u000a_Bool match_lname(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  int iVar1;\u000a  char *__name;\u000a  uint *puVar2;\u000a  uint in_ECX;\u000a  bool bVar3;\u000a  \u000a  if ((stat_buf->st_mode & 0xf000) == 0xa000) {\u000a    __name = areadlinkat((char *)(ulong)(uint)state.cwd_dir_fd);\u000a    if (__name == (char *)0x0) {\u000a      puVar2 = (uint *)__errno_location();\u000a      nonfatal_target_file_error((char *)(ulong)*puVar2);\u000a      state.exit_status = 1;\u000a      bVar3 = false;\u000a    }\u000a    else {\u000a      iVar1 = fnmatch(*(char **)pred_ptr->args,__name,(in_ECX & 0xff) << 4);\u000a      bVar3 = iVar1 == 0;\u000a    }\u000a    free(__name);\u000a  }\u000a  else {\u000a    bVar3 = false;\u000a  }\u000a  return (_Bool)bVar3;\u000a}\u000a\u000a
p5645
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R15D,ECX\nMOV RBP,RDX\nMOV R14,RDI\nMOV EAX,0xf000\nAND EAX,dword ptr [RSI + 0x18]\nCMP EAX,0xa000\nJNZ 0x00404ba4\nMOV EDI,dword ptr [0x0062f018]\nMOV RSI,qword ptr [0x0062f010]\nCALL 0x0040fc30\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00404ba8\nMOV RDI,qword ptr [RBP + 0x38]\nMOVZX EDX,R15B\nSHL EDX,0x4\nMOV RSI,RBX\nCALL 0x00402a60\nTEST EAX,EAX\nSETZ BPL\nJMP 0x00404bc3\nXOR EBP,EBP\nJMP 0x00404bcb\nCALL 0x00402770\nMOV EDI,dword ptr [RAX]\nMOV RSI,R14\nCALL 0x00407ab0\nMOV dword ptr [0x0062f024],0x1\nXOR EBP,EBP\nMOV RDI,RBX\nCALL 0x00402710\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p5646
S'55\n41 57\n41 56\n53\n50\n41 89 cf\n48 89 d5\n49 89 fe\nb8 00 f0 00 00\n23 46 18\n3d 00 a0 00 00\n75 35\n8b 3d a3 a4 22 00\n48 8b 35 94 a4 22 00\ne8 af b0 00 00\n48 89 c3\n48 85 db\n74 1f\n48 8b 7d 38\n41 0f b6 d7\nc1 e2 04\n48 89 de\ne8 c4 de ff ff\n85 c0\n40 0f 94 c5\neb 1f\n31 ed\neb 23\ne8 c3 db ff ff\n8b 38\n4c 89 f6\ne8 f9 2e 00 00\nc7 05 63 a4 22 00 01 00 00 00\n31 ed\n48 89 df\ne8 45 db ff ff\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p5647
S'.text:0000000000404b50\n.text:0000000000404b51\n.text:0000000000404b53\n.text:0000000000404b55\n.text:0000000000404b56\n.text:0000000000404b57\n.text:0000000000404b5a\n.text:0000000000404b5d\n.text:0000000000404b60\n.text:0000000000404b65\n.text:0000000000404b68\n.text:0000000000404b6d\n.text:0000000000404b6f\n.text:0000000000404b75\n.text:0000000000404b7c\n.text:0000000000404b81\n.text:0000000000404b84\n.text:0000000000404b87\n.text:0000000000404b89\n.text:0000000000404b8d\n.text:0000000000404b91\n.text:0000000000404b94\n.text:0000000000404b97\n.text:0000000000404b9c\n.text:0000000000404b9e\n.text:0000000000404ba2\n.text:0000000000404ba4\n.text:0000000000404ba6\n.text:0000000000404ba8\n.text:0000000000404bad\n.text:0000000000404baf\n.text:0000000000404bb2\n.text:0000000000404bb7\n.text:0000000000404bc1\n.text:0000000000404bc3\n.text:0000000000404bc6\n.text:0000000000404bcb\n.text:0000000000404bcd\n.text:0000000000404bd1\n.text:0000000000404bd2\n.text:0000000000404bd4\n.text:0000000000404bd6\n.text:0000000000404bd7\n'
p5648
tp5649
sS'parse_nogroup'
p5650
(S'\n__stdcall parse_nogroup(parser_table * entry, char * * argv, int * arg_ptr)\n'
p5651
V\u000a_Bool parse_nogroup(parser_table *entry,char **argv,int *arg_ptr)\u000a\u000a{\u000a  predicate *ppVar1;\u000a  \u000a  ppVar1 = insert_primary(entry,(char *)0x0);\u000a  ppVar1->est_success_rate = 0.00010000;\u000a  return true;\u000a}\u000a\u000a
p5652
S'PUSH RAX\nXOR ESI,ESI\nCALL 0x00407730\nMOV dword ptr [RAX + 0x24],0x38d1b717\nMOV AL,0x1\nPOP RCX\nRET\n'
p5653
S'50\n31 f6\ne8 e8 ba ff ff\nc7 40 24 17 b7 d1 38\nb0 01\n59\nc3\n'
p5654
S'.text:000000000040bc40\n.text:000000000040bc41\n.text:000000000040bc43\n.text:000000000040bc48\n.text:000000000040bc4f\n.text:000000000040bc51\n.text:000000000040bc52\n'
p5655
tp5656
sS'rpl_mktime'
p5657
(S'\n__stdcall rpl_mktime(tm * tp)\n'
p5658
V\u000atime_t rpl_mktime(tm *tp)\u000a\u000a{\u000a  time_t tVar1;\u000a  \u000a  tzset();\u000a  tVar1 = mktime_internal(tp,localtime_r,&localtime_offset);\u000a  return tVar1;\u000a}\u000a\u000a
p5659
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00402bf0\nMOV ESI,0x4027a0\nMOV EDX,0x62e7d8\nMOV RDI,RBX\nPOP RBX\nJMP 0x00419fb0\n'
p5660
S'53\n48 89 fb\ne8 17 85 fe ff\nbe a0 27 40 00\nba d8 e7 62 00\n48 89 df\n5b\ne9 c4 f8 ff ff\n'
p5661
S'.text:000000000041a6d0\n.text:000000000041a6d1\n.text:000000000041a6d4\n.text:000000000041a6d9\n.text:000000000041a6de\n.text:000000000041a6e3\n.text:000000000041a6e6\n.text:000000000041a6e7\n'
p5662
tp5663
sS'__do_global_dtors_aux'
p5664
(S'\n__stdcall __do_global_dtors_aux()\n'
p5665
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p5666
S'CMP byte ptr [0x0062de68],0x0\nJNZ 0x0040305a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00402fc0\nPOP RBP\nMOV byte ptr [0x0062de68],0x1\nRET\n'
p5667
S'80 3d 21 ae 22 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 0e ae 22 00 01\nf3 c3\n'
p5668
S'.text:0000000000403040\n.text:0000000000403047\n.text:0000000000403049\n.text:000000000040304a\n.text:000000000040304d\n.text:0000000000403052\n.text:0000000000403053\n.text:000000000040305a\n'
p5669
tp5670
sS'strncpy'
p5671
(S'\n__stdcall strncpy(char * __dest, char * __src, size_t __n)\n'
p5672
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strncpy(char *__dest,char *__src,size_t __n)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strncpy_0062d060)();\u000a  return pcVar1;\u000a}\u000a\u000a
p5673
S'JMP qword ptr [0x0062d060]\n'
p5674
S'ff 25 da a8 22 00\n'
p5675
S'.plt:0000000000402780\n'
p5676
tp5677
sS'print_predicate'
p5678
(S'\n__stdcall print_predicate(FILE * fp, predicate * p)\n'
p5679
V\u000avoid print_predicate(FILE *fp,predicate *p)\u000a\u000a{\u000a  if (p->arg_text != (char *)0x0) {\u000a    fprintf((FILE *)fp,"%s %s");\u000a    return;\u000a  }\u000a  fputs(p->p_name,(FILE *)fp);\u000a  return;\u000a}\u000a\u000a
p5680
S'MOV R8,RDI\nMOV RDX,qword ptr [RSI + 0x8]\nMOV RCX,qword ptr [RSI + 0x30]\nTEST RCX,RCX\nJZ 0x0040589f\nMOV ESI,0x41d4c0\nXOR EAX,EAX\nMOV RDI,R8\nJMP 0x00402ba0\nMOV RDI,RDX\nMOV RSI,R8\nJMP 0x00402a50\n'
p5681
S'49 89 f8\n48 8b 56 08\n48 8b 4e 30\n48 85 c9\n74 0f\nbe c0 d4 41 00\n31 c0\n4c 89 c7\ne9 01 d3 ff ff\n48 89 d7\n4c 89 c6\ne9 a6 d1 ff ff\n'
p5682
S'.text:0000000000405880\n.text:0000000000405883\n.text:0000000000405887\n.text:000000000040588b\n.text:000000000040588e\n.text:0000000000405890\n.text:0000000000405895\n.text:0000000000405897\n.text:000000000040589a\n.text:000000000040589f\n.text:00000000004058a2\n.text:00000000004058a5\n'
p5683
tp5684
sS'init_pred_perf'
p5685
(S'\n__stdcall init_pred_perf(predicate * pred)\n'
p5686
V\u000avoid init_pred_perf(predicate *pred)\u000a\u000a{\u000a  *(undefined4 *)&(pred->perf).visits = 0;\u000a  *(undefined4 *)((long)&(pred->perf).visits + 4) = 0;\u000a  *(undefined4 *)&(pred->perf).successes = 0;\u000a  *(undefined4 *)((long)&(pred->perf).successes + 4) = 0;\u000a  return;\u000a}\u000a\u000a
p5687
S'XORPS XMM0,XMM0\nMOVUPS xmmword ptr [0x120 + RDI],XMM0\nRET\n'
p5688
S'0f 57 c0\n0f 11 87 20 01 00 00\nc3\n'
p5689
S'.text:0000000000406bf0\n.text:0000000000406bf3\n.text:0000000000406bfa\n'
p5690
tp5691
sS'pred_cnewer'
p5692
(S'\n__stdcall pred_cnewer(char * pathname, stat * stat_buf, predicate * pred_ptr)\n'
p5693
V\u000a_Bool pred_cnewer(char *pathname,stat *stat_buf,predicate *pred_ptr)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (*(int *)(pred_ptr->args + 4) == 0) {\u000a    get_stat_ctime(stat_buf);\u000a    iVar1 = compare_ts();\u000a    return (_Bool)(0 < iVar1);\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("COMP_GT == pred_ptr->args.reftime.kind","pred.c",0x113,\u000a                "_Bool pred_cnewer(const char *, struct stat *, struct predicate *)");\u000a}\u000a\u000a
p5694
S'PUSH RBX\nMOV RBX,RDX\nCMP dword ptr [RBX + 0x3c],0x0\nJNZ 0x00403daf\nMOV RDI,RSI\nCALL 0x00416c80\nMOV R8,qword ptr [RBX + 0x40]\nMOV RCX,qword ptr [RBX + 0x48]\nMOV RDI,RAX\nMOV RSI,RDX\nMOV RDX,R8\nCALL 0x00404ac0\nTEST EAX,EAX\nSETG AL\nPOP RBX\nRET\nMOV EDI,0x41cce5\nMOV ESI,0x41cd0c\nMOV EDX,0x113\nMOV ECX,0x41cd56\nCALL 0x00402a40\n'
p5695
S'53\n48 89 d3\n83 7b 3c 00\n75 25\n48 89 f7\ne8 ee 2e 01 00\n4c 8b 43 40\n48 8b 4b 48\n48 89 c7\n48 89 d6\n4c 89 c2\ne8 18 0d 00 00\n85 c0\n0f 9f c0\n5b\nc3\nbf e5 cc 41 00\nbe 0c cd 41 00\nba 13 01 00 00\nb9 56 cd 41 00\ne8 78 ec ff ff\n'
p5696
S'.text:0000000000403d80\n.text:0000000000403d81\n.text:0000000000403d84\n.text:0000000000403d88\n.text:0000000000403d8a\n.text:0000000000403d8d\n.text:0000000000403d92\n.text:0000000000403d96\n.text:0000000000403d9a\n.text:0000000000403d9d\n.text:0000000000403da0\n.text:0000000000403da3\n.text:0000000000403da8\n.text:0000000000403daa\n.text:0000000000403dad\n.text:0000000000403dae\n.text:0000000000403daf\n.text:0000000000403db4\n.text:0000000000403db9\n.text:0000000000403dbe\n.text:0000000000403dc3\n'
p5697
tp5698
sS'unsetenv'
p5699
(S'\n__stdcall unsetenv(char * __name)\n'
p5700
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint unsetenv(char *__name)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_unsetenv_0062d3c0)();\u000a  return iVar1;\u000a}\u000a\u000a
p5701
S'JMP qword ptr [0x0062d3c0]\n'
p5702
S'ff 25 7a a5 22 00\n'
p5703
S'.plt:0000000000402e40\n'
p5704
tp5705
s.